{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA4D;AACb;AACc;AACtB;AACF;AACF;;;AAGpB;;AAEf;AACA;AACA;AACA;AACA;AACA,cAAc,4CAAiB;AAC/B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;;AAEA;AACA,IAAI,iCAAY,oBAAoB,gBAAgB,WAAW,qBAAqB;AACpF;AACA;AACA;AACA;AACA;AACA,qBAAqB,gDAAoB;AACzC;AACA;AACA,4BAA4B,qEAAmC;;AAE/D,gBAAgB,0CAAgB;AAChC,wBAAwB,UAAU;AAClC,6CAA6C,uBAAuB;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,8BAA8B,gDAAqB;;AAEnD;AACA;AACA;AACA;AACA,MAAM,iCAAY,eAAe,gBAAgB;AACjD;;AAEA;AACA;AACA;AACA;;AAEA,yCAAyC,wCAAS;AAClD;;AAEA;;;;;;ACrFqC;AACc;AACQ;AACE;AACY;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,EAAE,iCAAY;AACd;;AAEA;AACA;AACA;;AAEA,qCAAqC,gDAAoB;AACzD;;AAEA;AACA;;AAEA;AACA,IAAI,iCAAY,IAAI,eAAe;AACnC,sBAAsB,gDAAoB;AAC1C;AACA;AACA,MAAM,iCAAY,IAAI,uBAAuB;AAC7C;AACA,6BAA6B,YAAY;AACzC;AACA,uBAAuB,mDAAmD;AAC1E;AACA;AACA;AACA;;AAEA,oCAAoC,gDAAoB;AACxD;AACA,yBAAyB;;AAEzB,4BAA4B,wDAA4B;AACxD,uCAAuC,kEAA6B;;AAEpE;AACA,IAAI,iCAAY,IAAI,eAAe;AACnC,wBAAwB,sBAAO;AAC/B;AACA;AACA;AACA;;AAEA,EAAE,iCAAY;AACd,wBAAwB;AACxB,QAAQ,wDAA4B;;AAEpC;AACA;;;;;;;;;;;;;;;AC1EA;AAC+C;AACH;AACE;AACI;AACJ;AACR;AACI;AACU;AACqB;;AAEzE;AACA,uBAAuB,6BAAS;AAChC,qBAAqB,uDAA0B;AAC/C,qBAAqB,yCAAiB;AACtC,kBAAkB,wDAA2B;AAC7C,iBAAiB;AACjB,sCAAsC,2CAAkB;;AAExD;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU,2CAAmB;AAC7B;AACA;AACA,UAAU,oBAAoB,aAAa,aAAa;AACxD;AACA;AACA;AACA,OAAO;AACP,sBAAsB,QAAQ;AAC9B;AACA;AACA,GAAG;AACH;;AAEO;;AAEP,wBAAwB,yDAAyB;AACjD,QAAQ,+CAAmB;;AAE3B,wBAAwB,yDAAyB;AACjD,QAAQ,+CAAmB;;AAE3B;;AAEA;;AAEA;AACA;;;;;;;ACzDA;AAC+C;AACH;AACE;AACI;AACJ;AACR;AACI;AACU;AACqB;;AAEzE;AACA,uBAAuB,6BAAS;AAChC,qBAAqB,uDAA0B;AAC/C,qBAAqB,yCAAiB;AACtC,kBAAkB,wDAA2B;AAC7C,iBAAiB;AACjB,sCAAsC,2CAAkB;;AAExD;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU,2CAAmB;AAC7B;AACA;AACA,UAAU,oBAAoB,aAAa,aAAa;AACxD;AACA;AACA;AACA,OAAO;AACP,sBAAsB,yBAAQ;AAC9B;AACA;AACA,GAAG;AACH;;AAEO;AACP,wBAAwB,yDAAyB;AACjD,QAAQ,+CAAmB;;AAE3B;;AAEA;AACA;;;;;;;;;ACnD+C;AACc;AACZ;AACZ;AACQ;AACS;AACM;AACrB;AACE;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEO,MAAM,gBAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,oBAAoB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA,iCAAiC,iCAAa;AAC9C,wCAAwC,iBAAiB;;AAEzD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yBAAyB,gDAAqB;;AAE9C;AACA;;AAEO;AACP,EAAE,iCAAY,YAAY,YAAY;AACtC,0BAA0B,qEAAmC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gBAAgB,GAAG,iBAAiB;AAClE;AACA,aAAa;AACb,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,gFAAgF,gBAAgB,GAAG,iBAAiB;AACpH;AACA;AACA,KAAK;;AAEL;AACA;;AAEO;AACP,EAAE,iCAAY,YAAY,YAAY;AACtC;AACA;;AAEA,0BAA0B,qEAAmC;;AAE7D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,+BAA+B,gBAAgB,GAAG,iBAAiB,EAAE,EAAE,cAAc;AACrF,mBAAmB,aAAa;;AAEhC;AACA,wBAAwB,MAAM,IAAI,oBAAoB;AACtD;AACA;AACA,GAAG;;AAEH;AACA;;AAEO;AACP,EAAE,iCAAY;;AAEd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,sBAAsB;AAC1E,kCAAkC,WAAW,EAAE,cAAc;;AAE7D,oCAAoC,wCAAS;;AAE7C;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;AACA;;AAEA,4CAA4C,2CAAkB;AAC9D,yCAAyC,2CAAkB;AAC3D;;AAEA;AACA;AACA;AACA,8BAA8B;AAC9B,8BAA8B,mDAAuB;AACrD;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B;AAC9B,sBAAsB,mDAAuB;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B;AAC9B,2BAA2B,mDAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6CAA6C,UAAU;AACvD,6CAA6C,eAAe;;AAE5D;AACA,IAAI;AACJ;AACA;;AAEA;;AAEO;AACP;AACA,EAAE,iCAAY,YAAY,WAAW;AACrC;AACA;AACA,6BAA6B,4DAAyB;AACtD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,cAAc;;AAE5C;AACA;AACA,6BAA6B,uEAAiC;AAC9D;AACA,QAAQ,2EAAmC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,yBAAyB;AACpE;;AAEA;AACA;AACA;AACA;;AAEA,cAAc,kEAA4B;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,mEAA+B;AAClD,yBAAyB,mDAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,+CAA+C,qEAAgC;AAC/E;AACA,0BAA0B,qEAAgC;AAC1D;AACA,OAAO;AACP,yBAAyB,mDAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,2EAAmC;AAC3D;AACA,4BAA4B,2EAAmC;AAC/D;AACA,OAAO;AACP;AACA;AACA;;AAEA;;AAEA;AACA;AACA,4EAA4E,2BAA2B;AACvG;;AAEA;AACA;AACA;AACA;AACA,WAAW,WAAW,GAAG,eAAe;AACxC;AACA;;AAEA;AACA;;;ACvXqC;AACqF;AAC9D;AACD;AACE;AACX;AACuB;AAChC;;AAEzC;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,0BAA0B;AAChD,iBAAiB,EAAE;AACnB;AACA,MAAM;AACN,sBAAsB,0BAA0B;AAChD,iBAAiB,EAAE;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,qFAA0C;AACjE,iBAAiB,2DAA8B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,qFAA0C;AACjE,iBAAiB,2DAA8B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,cAAc;AACnC,2CAA2C,kBAAkB;AAC7D,oCAAoC,wCAAS;AAC7C,+DAA+D,2BAA2B;AAC1F;AACA;AACA;AACA;;AAEO;AACP;AACA,EAAE,iCAAY,yBAAyB,MAAM;AAC7C;;AAEA;AACA;;AAEA,gCAAgC,gDAAoB;AACpD,EAAE,oBAAoB;AACtB;AACA,EAAE,oBAAoB;;AAEtB;AACA,IAAI,iCAAY,IAAI,YAAY,+BAA+B,OAAO;AACtE;AACA;AACA;AACA;AACA;AACA,MAAM,iCAAY,IAAI,cAAc,8BAA8B,0BAA0B;AAC5F,WAAW,yBAAkB;AAC7B,oCAAoC,eAAe;AACnD;AACA,uBAAuB,wDAAwD;AAC/E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,iCAAY;AACd;AACA;AACA;AACA,GAAG;AACH,+BAA+B,wDAA4B;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,IAAI,iCAAY,IAAI,YAAY;AAChC;AACA;AACA;;AAEA,EAAE,iCAAY;AACd,QAAQ,wDAA4B,mCAAmC,4BAA4B;;AAEnG;AACA;;;ACzJqC;AACuB;AAC8E;AACxF;AACX;AACoB;AACc;AACzE,YAAY,qBAAqB;;AAEjC;AACA;AACA,QAAQ,cAAc;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,4DAAyB;AAC1D,4BAA4B,4DAAyB;AACrD;AACA;;AAEA;AACA,2CAA2C,cAAc,SAAS,qBAAqB;;AAEvF;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,wBAAwB,cAAc;AACtC;AACA;AACA,2CAA2C,kBAAkB;AAC7D,oCAAoC,wCAAS;AAC7C,2CAA2C,2BAA2B;AACtE;AACA;;AAEO;AACP;AACA;AACA;AACA,EAAE,iCAAY;AACd;;AAEA,2BAA2B,8BAAe,gBAAgB,2BAA2B;AACrF;AACA;;AAEA;AACA;AACA;;AAEA,uCAAuC,gDAAoB;AAC3D,EAAE,oBAAoB;AACtB;AACA,wCAAwC,gDAAoB;AAC5D;AACA,EAAE,oBAAoB;;;AAGtB;AACA;AACA;AACA,IAAI,iCAAY,IAAI,eAAe,+BAA+B,sBAAsB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,iCAAY,IAAI,cAAc,iCAAiC,0BAA0B;AAC/F,WAAW,yBAAkB;AAC7B,oCAAoC,eAAe;AACnD;AACA,uBAAuB,wEAAwE;AAC/F;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,EAAE,iCAAY,aAAa,gBAAgB;AAC3C;AACA;AACA;AACA,GAAG;AACH,+BAA+B,wDAA4B;AAC3D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,EAAE,iCAAY;;AAEd;AACA;AACA;AACA;AACA;;AAEA,EAAE,iCAAY;AACd,4BAA4B;AAC5B,QAAQ,wDAA4B;;AAEpC;AACA;;;AC1JqC;;AAEoB;AACE;;AAEpD;AACP,EAAE,iCAAY;AACd;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,iCAAY,IAAI,cAAc;AAClC,SAAS,yBAAkB;AAC3B,kCAAkC,eAAe;AACjD;AACA;AACA,qBAAqB,uDAAuD;AAC5E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wDAA4B;;AAEpC;AACA;;;ACvCA;AACkD;AACH;AACS;AACD;AACT;AACI;AACJ;AACR;AACI;AACU;AAChB;AACqC;;AAEzE;AACA,uBAAuB,6BAAS;AAChC,qBAAqB,uDAA0B;AAC/C,qBAAqB,yCAAiB;AACtC,kBAAkB,wDAA2B;AAC7C,iBAAiB;AACjB,sCAAsC,2CAAkB;;AAExD;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU,2CAAmB,mCAAmC,UAAU;AAC1E;AACA;AACA,UAAU,oBAAoB,aAAa,aAAa;AACxD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;;AAEA;AACA,uBAAuB,6BAAS;AAChC,qBAAqB,uDAA0B;AAC/C,qBAAqB,yCAAiB;AACtC,kBAAkB,wDAA2B;AAC7C,iBAAiB;AACjB,sCAAsC,2CAAkB;;AAExD;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU,2CAAmB,mCAAmC,UAAU;AAC1E;AACA;AACA,UAAU,oBAAoB,aAAa,aAAa;AACxD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;;AAEA;AACA,uBAAuB,6BAAS;AAChC,qBAAqB,uDAA0B;AAC/C,qBAAqB,yCAAiB;AACtC,kBAAkB,wDAA2B;AAC7C,iBAAiB;AACjB,sCAAsC,2CAAkB;;AAExD;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU,2CAAmB;AAC7B;AACA;AACA,UAAU,oBAAoB,aAAa,aAAa;AACxD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;;AAEO;;AAEP,0BAA0B,yDAAyB;AACnD,QAAQ,+CAAmB;;AAE3B,2BAA2B,yDAAyB;AACpD,QAAQ,+CAAmB;;AAE3B,gCAAgC,yDAAyB;AACzD,QAAQ,+CAAmB;;AAE3B;AACA,+BAA+B,UAAU;;AAEzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mCAAmC,oCAAa;AAChD,mCAAmC,aAAa;AAChD;AACA;AACA;;AAEA;AACA;AACA;AACA,qCAAqC,eAAe;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;ACzJA;AAC+C;AACb;AACY;AACA;AACR;AACI;AACU;;AAEpD;AACA,uBAAuB,6BAAS;AAChC,kBAAkB,wDAA2B;AAC7C,qBAAqB,yCAAiB;AACtC,sCAAsC,2CAAkB;;AAExD;AACA;AACA;AACA;;AAEA;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU,oBAAoB,iBAAiB,aAAa;AAC5D;AACA;AACA;AACA,UAAU,2CAAmB;AAC7B;AACA;AACA,OAAO;AACP;AACA,QAAQ,oBAAoB,cAAc,kBAAkB;AAC5D,QAAQ,+BAAW,cAAc,kBAAkB;AACnD;AACA,OAAO;AACP;AACA,GAAG;AACH;;AAEO;AACP;AACA,EAAE,iCAAY;AACd,4CAA4C,2CAAkB;AAC9D,yCAAyC,2CAAkB;AAC3D;;AAEA,EAAE,oBAAoB;AACtB;AACA,sBAAsB,4BAA4B,WAAW;AAC7D,UAAU,mDAAuB;AACjC,GAAG;;AAEH,EAAE,oBAAoB;;AAEtB;AACA;;;ACjEkC;;AAElC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,MAAM,+BAAW,UAAU,YAAY;AACvC;AACA,uBAAuB,mBAAmB,IAAI,aAAa;AAC3D,iEAAiE,YAAY;AAC7E,OAAO;AACP;AACA;AACA;AACA,MAAM,+BAAW,UAAU,YAAY;AACvC,+BAA+B,YAAY;AAC3C;AACA,MAAM;AACN,MAAM,+BAAW,UAAU,YAAY;AACvC,MAAM,+BAAW;AACjB;AACA;AACA,GAAG;AACH,4BAA4B,+BAAW;AACvC;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;;;;;;AC3DqC;AACwB;AACN;AACZ;AACF;AACQ;AACR;AACyB;AAChB;;AAEnC;;AAEf;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,UAAU;AACxB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,iCAAY,sBAAsB,KAAK;AACnD,YAAY,4BAA4B,cAAc,eAAe,UAAU,KAAK;AACpF,oBAAoB,2BAAU;AAC9B;AACA;AACA;AACA,2BAA2B,0DAA4B;AACvD,4BAA4B,wEAAmC;AAC/D;AACA,gBAAgB,iCAAY,sBAAsB,KAAK;AACvD,gBAAgB,4BAA4B,cAAc,eAAe,UAAU,KAAK;AACxF,2CAA2C,gCAAiB,GAAG,WAAW,oBAAoB,EAAE;AAChG;AACA,gBAAgB;AAChB,gBAAgB,+BAAW,6BAA6B,KAAK;AAC7D,kEAAkE,KAAK,uDAAuD,iBAAiB;AAC/I;AACA;AACA,cAAc;AACd;AACA,qGAAqG,iBAAiB;AACtH,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iCAAY,sBAAsB,KAAK;AACnD,YAAY,4BAA4B;AACxC;AACA,oBAAoB,6BAAW;AAC/B;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,yBAAyB,mEAAkC;AAC3D;AACA;AACA;;AAEA,oDAAoD,gBAAgB;AACpE;AACA,KAAK;AACL;;AAEA;AACA;AACA,uBAAuB,MAAM;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM,iCAAY,IAAI,MAAM;AAC5B;AACA,MAAM,iCAAY,IAAI,MAAM;AAC5B;AACA,KAAK;AACL;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,eAAe,gBAAgB;AAC/B;AACA,qDAAqD;AACrD,uBAAuB,mEAAkC;AACzD;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,sFAAsF,gDAAgD;AACtI;AACA;AACA,qFAAqF,gDAAgD;AACrI;AACA;AACA;AACA;;AAEA,SAAS;AACT,MAAM,iCAAY,IAAI,MAAM;AAC5B;AACA,KAAK;AACL;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,yCAAyC,2CAAkB;AAC3D;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,KAAK;AAClB,eAAe;AACf;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,KAAK;AAClB,eAAe,OAAO;AACtB;AACA;AACA;AACA,yFAAyF,OAAO;AAChG,KAAK;;AAEL;AACA;;;AAGA;;;;;ACpU+D;AAC1B;AACY;AACS;AACK;AACtB;AACoB;AACtB;AACqC;AAChB;;AAE7C;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,yBAAyB,cAAc;AACvC;AACA;AACA,6CAA6C,2CAAkB;AAC/D,2BAA2B,kDAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,2BAA2B;AAC3B,gBAAgB;AAChB,gBAAgB;AAChB,qBAAqB;AACrB,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8DAA8D,SAAS;AACvE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA,6DAA6D,qCAAqC;AAClG;AACA,2DAA2D,mCAAmC;AAC9F;AACA;;AAEA;AACA,cAAc,QAAQ;AACtB,cAAc,SAAS;AACvB,eAAe,QAAQ;AACvB;AACA;AACA,sCAAsC,2CAAkB;AACxD;AACA;AACA;AACA;AACA;AACA,aAAa,iEAA8B,eAAe;AAC1D;AACA;AACA,0BAA0B,2CAAkB;AAC5C,0BAA0B,2CAAkB;AAC5C,iCAAiC,kDAAqB;AACtD;AACA,WAAW,6BAA6B,GAAG,WAAW;AACtD,WAAW,6BAA6B,GAAG,cAAc,GAAG,WAAW;AACvE;AACA,WAAW,eAAe,GAAG,WAAW;AACxC,WAAW,eAAe,GAAG,cAAc,GAAG,WAAW;AACzD,uBAAuB,eAAe,GAAG,SAAS;AAClD,qCAAqC,WAAW,GAAG,SAAS,OAAO,cAAc,GAAG,WAAW,GAAG,SAAS;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,MAAM;AACnB,aAAa,QAAQ;AACrB,aAAa,SAAS;AACtB,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA,UAAU,iCAAY,sBAAsB,iBAAiB;AAC7D,gBAAgB,4DAA0B,gCAAgC,iBAAiB;AAC3F,gBAAgB,mEAA+B;AAC/C;AACA;;AAEA;AACA,UAAU,iCAAY,4BAA4B,KAAK;AACvD,iEAAiE,gBAAgB;AACjF,oCAAoC,gEAA4B;AAChE;AACA,2CAA2C,cAAc;AACzD,UAAU;AACV,UAAU,iCAAY,0BAA0B,KAAK;AACrD;;AAEA,kBAAkB,6CAA6C;AAC/D;AACA,MAAM;AACN,MAAM,iCAAY,+BAA+B,MAAM,IAAI,YAAY,KAAK,KAAK;AACjF;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA,UAAU,iCAAY,sBAAsB,iBAAiB;AAC7D,gBAAgB,4DAA0B,gCAAgC,iBAAiB;AAC3F,gBAAgB,mEAA+B;AAC/C;AACA;;AAEA;AACA,UAAU,iCAAY,yBAAyB,KAAK;AACpD;AACA,mCAAmC,iDAAsB;AACzD;AACA;AACA,UAAU;AACV,UAAU,iCAAY,0BAA0B,KAAK;AACrD;AACA,6BAA6B,qBAAqB,GAAG,eAAe;;AAEpE,kBAAkB,yCAAyC;AAC3D;AACA,MAAM;AACN,MAAM,iCAAY,+BAA+B,MAAM,IAAI,YAAY,KAAK,KAAK;AACjF;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,4DAA0B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8DAA2B;AAChD;AACA;;AAEA,mBAAmB;AACnB,SAAS;AACT;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,+BAAW;AACjB;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,2CAAkB;AACrD,qCAAqC,2CAAkB;AACvD,4CAA4C,2CAAkB;AAC9D,0CAA0C,2CAAkB;AAC5D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR,UAAU,8CAAkB;AAC5B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,iCAAY,0BAA0B,oBAAoB;AAClE;AACA;AACA,QAAQ;AACR;AACA;AACA,4DAA4D,cAAc;AAC1E;AACA;AACA,QAAQ,iCAAY,uBAAuB,eAAe;AAC1D;;AAEA;AACA;AACA,OAAO;;AAEP;AACA,QAAQ,iCAAY,4BAA4B,gBAAgB,GAAG,gBAAgB;AACnF;AACA;AACA,KAAK;AACL;;AAEA;AACA,UAAU,8CAAkB;AAC5B;AACA;AACA;AACA,qBAAqB,mEAAkC;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA,wDAAwD,sCAAsC;AAC9F,UAAU,iCAAY,kCAAkC,eAAe;AACvE;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,iCAAY,IAAI,qBAAqB;AAC3C;AACA,YAAY,8CAA8C;AAC1D;AACA;AACA,MAAM,iCAAY,IAAI,qBAAqB;AAC3C;AACA,YAAY,8CAA8C;AAC1D;AACA;AACA,MAAM,iCAAY,IAAI,qBAAqB;AAC3C;AACA,YAAY,8CAA8C;AAC1D;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM,iCAAY,IAAI,qBAAqB;AAC3C,yEAAyE,oCAAoC;AAC7G;AACA;AACA,IAAI,iCAAY;AAChB;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA,QAAQ,kCAAkC;AAC1C,MAAM,iCAAY,IAAI,qBAAqB;AAC3C;AACA;AACA,QAAQ,kCAAkC;AAC1C,MAAM,iCAAY,IAAI,qBAAqB;AAC3C;AACA;AACA,QAAQ,kCAAkC;AAC1C,MAAM,iCAAY,IAAI,qBAAqB;AAC3C;AACA;AACA,QAAQ,kCAAkC;AAC1C,MAAM,iCAAY,IAAI,qBAAqB;AAC3C;AACA;AACA,QAAQ,kCAAkC;AAC1C,MAAM,iCAAY,IAAI,qBAAqB;AAC3C;AACA;AACA,QAAQ,kCAAkC;AAC1C,MAAM,iCAAY,IAAI,qBAAqB;AAC3C;AACA;AACA,QAAQ,kCAAkC;AAC1C,MAAM,iCAAY,IAAI,qBAAqB;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC,oBAAoB;AAC3D,mBAAmB,2BAA2B;AAC9C,mBAAmB,OAAO,eAAe;AACzC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,MAAM,iCAAY,uBAAuB,KAAK,MAAM,KAAK;AACzD;AACA;AACA,QAAQ,iCAAY,UAAU,KAAK,YAAY,KAAK;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,6BAA6B,mEAAkC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,YAAY,iCAAY,mCAAmC,UAAU,KAAK,kBAAkB;AAC5F;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,YAAY,iCAAY,wCAAwC,UAAU,KAAK,8BAA8B;AAC7G;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,IAAI,iCAAY,IAAI,iBAAiB,oBAAoB,mBAAmB;AAC5E;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA,MAAM,+BAAW,aAAa,YAAY;AAC1C;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,+BAAW,aAAa,WAAW,IAAI,qBAAqB;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc,8CAAkB;AAChC;AACA,YAAY,+BAAW;AACvB;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,YAAY,+BAAW,yCAAyC,SAAS;AACzE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,MAAM;AACN;AACA,MAAM,+BAAW,6CAA6C,KAAK;AACnE;AACA,IAAI,+BAAW;AACf;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,2DAA2B;AAClD,MAAM;AACN;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM,iCAAY;AAClB;AACA,MAAM;AACN,MAAM,iCAAY;AAClB;AACA,MAAM;AACN;AACA;AACA,QAAQ,iCAAY;AACpB;AACA,QAAQ,iCAAY;AACpB;AACA;;AAEA;;AAEA;AACA;AACA,sBAAsB,8BAA8B;AACpD;AACA;;AAEA;AACA;;AAEA,IAAI,+BAAW,yBAAyB,qBAAqB,KAAK,kBAAkB;;AAEpF;;AAEA,UAAU,8CAAkB;AAC5B;AACA;AACA;AACA,oBAAoB,gDAAgD;AACpE;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qBAAqB;AACrD;AACA;AACA;AACA,gBAAgB,iCAAY;AAC5B;AACA;AACA,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,2CAAkB;AAC5C;AACA,0BAA0B,2CAAkB;AAC5C;AACA,0BAA0B,2CAAkB;AAC5C;AACA,0BAA0B,2CAAkB;;AAE5C;AACA,2BAA2B,yDAAyB;AACpD,gBAAgB,+CAAmB;AACnC;AACA,oCAAoC,mEAAkC;AACtE;AACA;AACA;;AAEA;AACA;;AAEA;AACA,QAAQ,iCAAY,4BAA4B,2BAA2B;AAC3E;AACA;AACA,UAAU,iCAAY,wBAAwB,uBAAuB;AACrE,UAAU;AACV,UAAU,+BAAW;AACrB;;AAEA;AACA;AACA,4CAA4C,oBAAoB,aAAa,sBAAsB;AACnG,cAAc;AACd;AACA,0DAA0D,oBAAoB,aAAa,sBAAsB;AACjH;;AAEA;AACA;AACA,+BAA+B,oBAAoB;AACnD,cAAc;AACd;AACA;AACA,+BAA+B,oBAAoB;AACnD;AACA;;AAEA;;AAEA;AACA;AACA;AACA,6CAA6C,4CAAuB;;AAEpE;AACA;AACA,2BAA2B,yDAAyB;AACpD,gBAAgB,+CAAmB;AACnC;AACA;;AAEA;;AAEA;;AAEA;AACA,QAAQ;AACR;AACA,+DAA+D,oBAAoB;AACnF,QAAQ,iCAAY,yBAAyB,oBAAoB;AACjE,QAAQ,iCAAY;AACpB,QAAQ,iCAAY;AACpB;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,gBAAgB;AAC7B,eAAe,gBAAgB;AAC/B;AACA;AACA,IAAI,iCAAY;AAChB,8BAA8B,mEAAkC;AAChE;AACA,UAAU,8CAAkB;AAC5B;AACA;AACA,QAAQ,+BAAW,oBAAoB,YAAY,cAAc,aAAa,OAAO,iCAAiC,qBAAqB,mBAAmB;AAC9J;AACA,4BAA4B;AAC5B,uGAAuG,4CAA4C;AACnJ,UAAU;AACV,UAAU,iCAAY;AACtB,UAAU,+BAAW,2BAA2B,YAAY,UAAU,oBAAoB;AAC1F,UAAU,iCAAY,oEAAoE,mBAAmB,KAAK,QAAQ,cAAc,cAAc,eAAe,GAAG,IAAI,cAAc,EAAE;AAC5L;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,iCAAY;AAChB;AACA;;AAEA;AACA,uCAAuC,6CAA6C;AACpF;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,SAAS;AACtB,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA,8BAA8B,mEAAkC;AAChE,+BAA+B,wCAAwC;;AAEvE,IAAI,iCAAY;AAChB,UAAU,8CAAkB;AAC5B,MAAM,iCAAY,iBAAiB,gBAAgB;AACnD;;AAEA;AACA,QAAQ,iCAAY,oBAAoB,kBAAkB,cAAc,gBAAgB;AACxF,QAAQ;AACR;AACA;AACA;AACA;AACA,UAAU,+BAAW,oBAAoB,iBAAiB,cAAc,iBAAiB,OAAO,iCAAiC,qBAAqB,gBAAgB,cAAc,iCAAiC;AACrN;AACA,oCAAoC;AACpC,8BAA8B;AAC9B;AACA;AACA,YAAY;AACZ,YAAY,iCAAY;AACxB,YAAY,+BAAW,2BAA2B,iBAAiB,UAAU,gBAAgB;AAC7F,YAAY,iCAAY,oEAAoE,eAAe,KAAK,QAAQ,kBAAkB,cAAc,mBAAmB,GAAG,IAAI,cAAc,EAAE;AAClM;AACA,UAAU;AACV,UAAU,iCAAY;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe,gBAAgB;AAC/B;AACA;AACA,IAAI,iCAAY,+BAA+B,YAAY;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;;AAEP;AACA,IAAI,iCAAY,+BAA+B,YAAY;AAC3D;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,2BAA2B;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,2BAA2B;AAC/F;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,8CAAkB;AAC9B;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,YAAY,8CAAkB;AAC9B;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,YAAY,8CAAkB;AAC9B;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN,YAAY,8CAAkB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iCAAY,2BAA2B,UAAU;AACzD;AACA;AACA,OAAO;AACP,MAAM;AACN,YAAY,8CAAkB;AAC9B;AACA,gCAAgC,gCAAgC;AAChE,mEAAmE;AACnE;AACA;AACA;AACA,YAAY,iCAAY,6BAA6B,UAAU;AAC/D,kBAAkB,8CAAkB;AACpC;AACA,0EAA0E,UAAU,IAAI,KAAK;AAC7F,aAAa;AACb;AACA,UAAU,iCAAY,2BAA2B,UAAU;AAC3D;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;;;AAGA;AACA,IAAI,iCAAY;AAChB;AACA,2BAA2B,kCAAkC,mDAAmD;AAChH,4BAA4B,kCAAkC,qDAAqD;;AAEnH,IAAI,iCAAY;AAChB;AACA,IAAI,iCAAY;AAChB;AACA,IAAI,iCAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,gBAAgB,iDAAiD;AACjE,OAAO;AACP;;AAEA;AACA;;;AAGA;AACA;AACA,mBAAmB,mEAAkC;AACrD;;AAEA;AACA;AACA,QAAQ,iCAAY;AACpB;AACA;AACA,kEAAkE,+BAA+B;AACjG,4EAA4E,0BAA0B;AACtG,QAAQ;AACR;AACA;AACA;AACA;AACA,SAAS;AACT,4EAA4E,0BAA0B;;AAEtG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,MAAM;AACN,MAAM,iCAAY,+BAA+B,iBAAiB;AAClE;AACA;AACA;;AAEA;AACA;AACA,SAAS,0CAA0C;AACnD,YAAY,8CAAkB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP,YAAY,8CAAkB;AAC9B;AACA;AACA,OAAO;;AAEP,YAAY,8CAAkB;AAC9B;AACA;AACA;AACA;AACA,OAAO;;AAEP,YAAY,8CAAkB;AAC9B;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB;AACxB,MAAM,iCAAY,mBAAmB,UAAU;AAC/C;AACA;AACA;AACA,MAAM,iCAAY,kBAAkB,UAAU;AAC9C;AACA,MAAM,iCAAY,sBAAsB,UAAU;AAClD,uFAAuF,eAAe;AACtG,MAAM,iCAAY,8BAA8B,UAAU;AAC1D,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0CAA0C;AACvD;AACA,+BAA+B,sCAAsC;AACrE,8DAA8D,SAAS;AACvE;AACA;AACA;AACA;AACA,aAAa,0CAA0C;AACvD;AACA,6DAA6D,QAAQ;AACrE;AACA;AACA;AACA;AACA,aAAa,0CAA0C;AACvD;AACA,qEAAqE,WAAW;AAChF;AACA;AACA;AACA,gEAAgE,8DAA8D;AAC9H;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,aAAa,0CAA0C;AACvD;AACA,kEAAkE,aAAa;AAC/E;AACA;AACA;AACA,gEAAgE,4DAA4D;AAC5H;AACA;AACA;AACA;AACA;AACA,aAAa,0CAA0C;AACvD,yBAAyB,oBAAoB,GAAG,UAAU;AAC1D;AACA;AACA;AACA;AACA;AACA,aAAa,0CAA0C;AACvD;AACA,8DAA8D,SAAS;AACvE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,mCAAmC;AAC1D;;AAEA,IAAI,+BAAW,aAAa,qBAAqB,IAAI,YAAY,GAAG,kBAAkB;;AAEtF;AACA;;AAEA,UAAU,8CAAkB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gDAAgD;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,IAAI,iCAAY;;AAEhB;AACA;AACA;AACA;AACA,sBAAsB,YAAY;AAClC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qBAAqB;AACvD;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,uDAAuD,mBAAmB;AAC1E,iBAAiB;AACjB,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;;AAEA,6CAA6C,8BAA8B,IAAI;AAC/E;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;;AAEA;AACA,2BAA2B,6BAA6B,GAAG,cAAc,GAAG,oBAAoB;AAChG;AACA;AACA;AACA,2BAA2B,6BAA6B,GAAG,cAAc,GAAG,4BAA4B;AACxG;AACA;;AAEA;AACA;;AAEA,cAAc,8CAAkB;AAChC;AACA;AACA;AACA,SAAS;AACT;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,4BAA4B,oBAAoB,IAAI;AACpD;AACA;;AAEA,IAAI,+BAAW,6BAA6B,KAAK,IAAI,6BAA6B;;AAElF,uBAAuB,mCAAmC;AAC1D;;AAEA,IAAI,+BAAW,cAAc,qBAAqB,IAAI,YAAY,GAAG,kBAAkB;;AAEvF;;AAEA;AACA,UAAU,8CAAkB;AAC5B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,uDAAuD,YAAY;AACnE;AACA,gBAAgB;AAChB;AACA;AACA,aAAa;AACb;AACA,uDAAuD,YAAY,aAAa,6BAA6B;AAC7G;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,QAAQ;AACrB,eAAe,UAAU;AACzB;AACA;AACA;AACA;;AAEA;AACA,qEAAqE,UAAU;AAC/E,+CAA+C,UAAU;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uEAAuE,mBAAmB;AAC1F,0DAA0D,uBAAuB;AACjF;AACA;AACA,yBAAyB,oBAAoB;AAC7C,mBAAmB,uBAAuB,GAAG,gBAAgB,EAAE,SAAS,EAAE,SAAS;AACnF,gFAAgF,SAAS,GAAG,SAAS,EAAE,EAAE,kBAAkB;AAC3H,YAAY;AACZ,YAAY,+BAAW,mCAAmC,eAAe,eAAe,UAAU;AAClG;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,QAAQ;AACrB,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAsC,wCAAe;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,gBAAgB;AAChF;AACA,UAAU;AACV,UAAU,+BAAW,gCAAgC,eAAe;AACpE;AACA,QAAQ;AACR,QAAQ,+BAAW,gCAAgC,eAAe;AAClE;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,qEAAqE,UAAU;AAC/E,mDAAmD,WAAW;;AAE9D;AACA;AACA;AACA;AACA,QAAQ,+BAAW,4BAA4B,gBAAgB;;AAE/D,+DAA+D,QAAQ,GAAG,aAAa;AACvF;AACA,OAAO;AACP;;AAEA,yBAAyB,wCAAS;;AAElC;AACA;;AAEA;AACA,gDAAgD,KAAK;AACrD;AACA,gBAAgB,kCAAkC;AAClD;AACA,iBAAiB,kDAAkD,GAAG,kCAAkC;AACxG;AACA;;AAEA;AACA,4CAA4C,kDAAkD,GAAG,KAAK;AACtG;AACA;;;;;ACxjDuC;;AAEhC;;AAEP;AACA;AACA,kBAAkB,kEAA4B;AAC9C;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AChD+D;AAC1B;AACqB;AACb;AACI;AACJ;AACJ;AACF;AACQ;;AAE/C;AACA,0DAA0D,6BAA6B;AACvF,2BAA2B,aAAa;;AAEzB;AACf;AACA,yBAAyB,cAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,cAAc;AAC5C;;AAEA;AACA;AACA,8DAA8D,SAAS;AACvE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,iCAAY,IAAI,IAAI,IAAI,MAAM;AACtC;AACA;AACA,8CAA8C,2CAAkB;AAChE;AACA;AACA;AACA,MAAM,iCAAY;AAClB,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,+BAAW;AACjB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;;AAGA;AACA;AACA;AACA,0DAA0D,qBAAqB;AAC/E;;AAEA;AACA;AACA;AACA,UAAU,+BAAW,uBAAuB,KAAK;AACjD;AACA,UAAU;AACV,UAAU,+BAAW,yBAAyB,KAAK;AACnD;AACA;AACA,OAAO;;AAEP;AACA,0DAA0D,gDAAqB;AAC/E,8FAA8F,WAAW;AACzG;;AAEA;AACA,yCAAyC,kBAAkB;AAC3D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,MAAM,iCAAY,IAAI,gBAAgB;AACtC;AACA,YAAY,8CAA8C;AAC1D;AACA;AACA,MAAM,iCAAY,IAAI,gBAAgB;AACtC;AACA,YAAY,8CAA8C;AAC1D;AACA;AACA,MAAM,iCAAY,IAAI,gBAAgB;AACtC;AACA,YAAY,8CAA8C;AAC1D;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,WAAW;AAC9B,mBAAmB,OAAO,eAAe;AACzC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,cAAc,8CAAkB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,YAAY,+BAAW,wCAAwC,IAAI;AACnE;AACA;AACA;AACA,SAAS;AACT;AACA,MAAM;AACN;AACA,MAAM,+BAAW,6CAA6C,KAAK;AACnE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iCAAY,uBAAuB,eAAe;AACtD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gDAAqB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qEAAqE,+BAAW;AAChF;AACA;AACA,mBAAmB,MAAM,GAAG,SAAS;AACrC;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,+BAAW,YAAY,WAAW,IAAI,qBAAqB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,kCAAkC;AACnE;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA,gDAAgD,2CAAkB;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW;;AAEX;AACA,UAAU,+BAAW,gBAAgB,WAAW,gCAAgC,eAAe,KAAK,iBAAiB;AACrH;AACA;AACA,4BAA4B,iDAAqB;AACjD;AACA,0CAA0C,WAAW;AACrD;AACA;AACA;AACA;AACA;;AAEA;AACA,uDAAuD,UAAU;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yCAAyC,iEAAiE;AAC1G,qEAAqE,QAAQ,+BAA+B;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,UAAU,+BAAW,aAAa,YAAY,cAAc,WAAW,GAAG,WAAW;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA,UAAU,8CAAkB;AAC5B,MAAM,iCAAY,oBAAoB,WAAW;AACjD;AACA;AACA;AACA,yBAAyB,gDAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,MAAM,iCAAY,kCAAkC,WAAW;AAC/D,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,IAAI,iCAAY;AAChB;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,MAAM,+BAAW,aAAa,WAAW;AACzC,MAAM,iCAAY,IAAI,WAAW,gBAAgB,sBAAsB;AACvE;AACA;AACA,MAAM;AACN;AACA,0GAA0G,cAAc;AACxH,MAAM,+BAAW,WAAW,YAAY;AACxC,MAAM,iCAAY;AAClB;AACA;AACA;;AAEA;AACA,IAAI,iCAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;;AAEA,UAAU,8CAAkB;AAC5B,MAAM,iCAAY,qBAAqB,YAAY;AACnD;AACA,MAAM,iCAAY;AAClB;AACA;;AAEA,MAAM,iCAAY;AAClB;AACA,MAAM,iCAAY;AAClB,0EAA0E,qCAAqC;AAC/G;AACA,MAAM,iCAAY;AAClB,qEAAqE,qCAAqC;;AAE1G,MAAM,iCAAY,8BAA8B,WAAW;AAC3D,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B,aAAa,QAAQ,gBAAgB;;AAEjE;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;;AAET;;AAEA,MAAM,iCAAY;;AAElB;AACA,mBAAmB;AACnB,kBAAkB;AAClB,kBAAkB;AAClB,uBAAuB;AACvB,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA,iBAAiB,gDAAqB;AACtC,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA,MAAM,iCAAY;;AAElB;AACA;AACA;AACA;;AAEA,MAAM,iCAAY;;AAElB,MAAM,iCAAY;AAClB;AACA,YAAY,8CAAkB;AAC9B,QAAQ,iCAAY,gCAAgC,WAAW;AAC/D;AACA,QAAQ,iCAAY,8BAA8B,WAAW;AAC7D,OAAO;;AAEP;AACA;AACA;AACA,UAAU,iCAAY,gCAAgC,WAAW;AACjE;AACA;AACA;AACA,SAAS;AACT;;AAEA,MAAM,iCAAY;;AAElB,sDAAsD,4CAAuB;AAC7E,MAAM,iCAAY;;AAElB;AACA;;AAEA;AACA,QAAQ,+BAAW;AACnB,yEAAyE,YAAY,KAAK,mBAAmB;AAC7G;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;;AAEA,oEAAoE,YAAY,KAAK,mBAAmB;;AAExG;AACA;AACA;AACA;AACA;;AAEA;AACA,gDAAgD,KAAK;AACrD;AACA,gBAAgB,kCAAkC;AAClD,qBAAqB,kDAAkD,GAAG,kCAAkC;AAC5G;;AAEA;AACA;AACA,qBAAqB,kDAAkD,GAAG,KAAK;AAC/E;AACA;;;;;;;;;;;;;ACxoBqC;AAC8B;AACnE,YAAY,YAAY;AACuB;AACY;AACE;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA,MAAM;AACN;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,QAAQ;AACR,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,mBAAmB;;AAE9D;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA,uBAAuB,iCAAkB;;AAEzC,iBAAiB,gDAAqB;AACtC,yBAAyB,yBAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,EAAE,iCAAY,2CAA2C,8BAA8B;AACvF;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;;;AAGO;AACP,EAAE,iCAAY;AACd;;AAEA;;AAEA;AACA,IAAI,iCAAY,IAAI,iBAAiB;AACrC;AACA;AACA;;AAEA,4BAA4B,wDAA4B,2CAA2C,qBAAqB;AACxH;AACA;;;AC7FA;AAC+C;AACe;AAChB;AACI;AACJ;AACR;AACI;AACU;AACqB;;AAEzE;AACA,uBAAuB,6BAAS;AAChC,qBAAqB,uDAA0B;AAC/C,qBAAqB,yCAAiB;AACtC,kBAAkB,wDAA2B;AAC7C,iBAAiB;AACjB,sCAAsC,2CAAkB;;AAExD;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU,2CAAmB;AAC7B;AACA;AACA,UAAU,oBAAoB,aAAa,aAAa;AACxD;AACA;AACA;AACA,OAAO;AACP,sBAAsB,cAAc;AACpC;AACA;AACA,GAAG;AACH;;AAEO;;AAEP,8BAA8B,yDAAyB;AACvD,QAAQ,+CAAmB;;AAE3B;;AAEA;AACA;;;;;;;;;ACpDA;AACkC;AACkB;AACH;AACE;AACF;AACA;AACI;AACF;AACL;AACM;AACc;AACE;AACE;AACd;AACR;AACe;AACuB;AACzB;AACJ;AAChB;AACH;AACyB;AACO;AACd;;AAEzC;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mEAAmE;AACzF;AACA;;AAEA;AACA;AACA,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,UAAU,yBAAU;AACpB,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,UAAU,cAAc;AACxB,KAAK;AACL;AACA,UAAU,eAAe;AACzB,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0EAAqC;AAC7C,OAAO;;;AAGP;AACA;AACA,yCAAyC;AACzC;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA,mBAAmB,6BAAS;AAC5B,iBAAiB,0DAA4B;AAC7C,kBAAkB,wEAAmC;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB;AACA,YAAY,8CAAe;AAC3B,iCAAiC,gCAAiB,GAAG,iCAAiC;AACtF;AACA;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB,2BAA2B,mCAAe;AAC1C,iDAAiD,QAAQ;AACzD;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB,4BAA4B,2CAAkB;AAC9C,cAAc,4DAA2B;AACzC;AACA,YAAY,8CAAe;AAC3B,YAAY,6BAAW;AACvB;AACA;AACA;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA,kCAAkC,gDAAoB;AACtD;AACA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,gDAAoB;AACtD;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB;AACA,YAAY,8CAAe;AAC3B,YAAY,2BAAU;AACtB;AACA;AACA;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB,YAAY,8CAAe;AAC3B,2BAA2B,UAAU;AACrC,iDAAiD,eAAe;AAChE;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB,YAAY,8CAAe;AAC3B,2BAA2B,UAAU;AACrC,iDAAiD,eAAe;AAChE;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB,YAAY,8CAAe;AAC3B,2BAA2B,gBAAgB;AAC3C,iDAAiD,eAAe;AAChE;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB,YAAY,8CAAe;AAC3B,2BAA2B,YAAY;AACvC,iDAAiD,eAAe;AAChE;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB,2BAA2B,WAAW;AACtC,iDAAiD,eAAe;AAChE;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB,YAAY,4CAAuB;AACnC;AACA;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB,YAAY,qCAAmB;AAC/B;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA,IAAI,+BAAW,cAAc,MAAM;AACnC,kCAAkC,gDAAoB;AACtD;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,+BAAW;AACf,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA,MAAM;AACN,qEAAqE,4BAA4B;AACjG,kEAAkE,0BAA0B;AAC5F;AACA;AACA;AACA;;AAEA;AACA,IAAI,+BAAW;AACf,0BAA0B,4CAA0B;AACpD,kCAAkC,gBAAgB;AAClD;AACA;AACA;;AAEA;AACA,IAAI,+BAAW;AACf,0BAA0B,kCAAgB;AAC1C,kCAAkC,gBAAgB;AAClD;AACA;AACA;;AAEA,oBAAoB;AACpB,uBAAuB,oEAAkC;AACzD,UAAU,8CAAe;AACzB;AACA;AACA;;;;;;;;;;;;AC5cyC;;AAE1B;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+DAAU;AAClB;AACA;;;;;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,MAAM,wCAAwC;AAC9C,MAAM,uCAAuC;AAC7C,MAAM,uCAAuC;AAC7C,MAAM,qCAAqC;AAC3C,MAAM,sCAAsC;AAC5C,MAAM,2CAA2C;AACjD;AACA;AACA,MAAM,sBAAsB;AAC5B,MAAM,0BAA0B;AAChC,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,0BAA0B;AAChC,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,wBAAwB;AAC9B,MAAM,0BAA0B;AAChC,MAAM,0BAA0B;AAChC,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,4BAA4B;AAClC,MAAM,4BAA4B;AAClC,MAAM,8BAA8B;AACpC,MAAM,8BAA8B;AACpC,MAAM,6BAA6B;AACnC,MAAM,6BAA6B;AACnC,MAAM,+BAA+B;AACrC,MAAM,8BAA8B;AACpC,MAAM,8BAA8B;AACpC,MAAM,4BAA4B;AAClC;AACA;AACA;AACA,QAAQ,oBAAoB;AAC5B,QAAQ,8BAA8B;AACtC,QAAQ,oBAAoB;AAC5B,QAAQ,6BAA6B;AACrC,QAAQ,yBAAyB;AACjC,QAAQ,yBAAyB;AACjC,QAAQ,yBAAyB;AACjC,QAAQ,yBAAyB;AACjC,QAAQ,wBAAwB;AAChC,QAAQ,wBAAwB;AAChC,QAAQ,0BAA0B;AAClC,QAAQ,6BAA6B;AACrC,QAAQ,yBAAyB;AACjC,QAAQ,yBAAyB;AACjC,QAAQ,6BAA6B;AACrC,QAAQ,2BAA2B;AACnC,QAAQ,6BAA6B;AACrC,QAAQ,wBAAwB;AAChC,QAAQ,0BAA0B;AAClC,QAAQ,uBAAuB;AAC/B,QAAQ,uBAAuB;AAC/B,QAAQ,mBAAmB;AAC3B,QAAQ,qBAAqB;AAC7B,QAAQ,oBAAoB;AAC5B,QAAQ,kBAAkB;AAC1B;AACA;AACA,QAAQ,sBAAsB;AAC9B,QAAQ,uBAAuB;AAC/B,QAAQ,wBAAwB;AAChC,QAAQ,qBAAqB;AAC7B,QAAQ,qBAAqB;AAC7B,QAAQ,uBAAuB;AAC/B;AACA,GAAG;AACH;AACA,MAAM,oBAAoB;AAC1B,MAAM,8BAA8B;AACpC,MAAM,0BAA0B;AAChC,MAAM,0BAA0B;AAChC,MAAM,oBAAoB;AAC1B,MAAM,6BAA6B;AACnC,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,2BAA2B;AACjC,MAAM,2BAA2B;AACjC,MAAM,oCAAoC;AAC1C,MAAM,+BAA+B;AACrC,MAAM,mBAAmB;AACzB,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,yBAAyB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,MAAM,2EAA2E;AACjF,MAAM,2EAA2E;AACjF,MAAM,6EAA6E;AACnF,MAAM,uFAAuF;AAC7F,MAAM,gFAAgF;AACtF,MAAM,gFAAgF;AACtF,MAAM,gFAAgF;AACtF,MAAM,gFAAgF;AACtF,MAAM,gFAAgF;AACtF,MAAM,gFAAgF;AACtF,MAAM,iFAAiF;AACvF,MAAM,6EAA6E;AACnF,MAAM,uFAAuF;AAC7F,MAAM,+EAA+E;AACrF,MAAM,+EAA+E;AACrF,MAAM,gFAAgF;AACtF,MAAM,8EAA8E;AACpF,MAAM,wEAAwE;AAC9E,MAAM,kFAAkF;AACxF,MAAM,4EAA4E;AAClF,MAAM,oFAAoF;AAC1F,MAAM,mFAAmF;AACzF,MAAM,kFAAkF;AACxF;AACA;AACA;AACA,QAAQ,uCAAuC;AAC/C,QAAQ,kCAAkC;AAC1C,QAAQ,uCAAuC;AAC/C,QAAQ,0CAA0C;AAClD,QAAQ,qDAAqD;AAC7D,QAAQ,oCAAoC;AAC5C,QAAQ,mCAAmC;AAC3C,QAAQ,qCAAqC;AAC7C,QAAQ,oCAAoC;AAC5C,QAAQ,qCAAqC;AAC7C,QAAQ,oCAAoC;AAC5C,QAAQ,mCAAmC;AAC3C,QAAQ,sCAAsC;AAC9C,QAAQ,qCAAqC;AAC7C,QAAQ,oCAAoC;AAC5C,QAAQ,kCAAkC;AAC1C;AACA;AACA,QAAQ,uCAAuC;AAC/C,QAAQ,wCAAwC;AAChD,QAAQ,2CAA2C;AACnD,QAAQ,2CAA2C;AACnD,QAAQ,qCAAqC;AAC7C,QAAQ,uCAAuC;AAC/C;AACA;AACA,QAAQ,qFAAqF;AAC7F,QAAQ,gGAAgG;AACxG,QAAQ,6EAA6E;AACrF,QAAQ,mFAAmF;AAC3F,QAAQ,oFAAoF;AAC5F,QAAQ,+EAA+E;AACvF,QAAQ,gFAAgF;AACxF,QAAQ,0FAA0F;AAClG,QAAQ,2FAA2F;AACnG,QAAQ,kFAAkF;AAC1F,QAAQ,6EAA6E;AACrF,QAAQ,sFAAsF;AAC9F,QAAQ,wFAAwF;AAChG,QAAQ,sFAAsF;AAC9F,QAAQ,kFAAkF;AAC1F,QAAQ,+FAA+F;AACvG,QAAQ,+EAA+E;AACvF,QAAQ,kFAAkF;AAC1F;AACA;AACA;AACA;AACA,QAAQ,yBAAyB;AACjC,QAAQ,2BAA2B;AACnC,QAAQ,yBAAyB;AACjC,QAAQ,yBAAyB;AACjC;AACA;AACA,QAAQ,yCAAyC;AACjD,QAAQ,0CAA0C;AAClD,QAAQ,0CAA0C;AAClD,QAAQ,4CAA4C;AACpD,QAAQ,0CAA0C;AAClD,QAAQ,6CAA6C;AACrD,QAAQ,yCAAyC;AACjD,QAAQ,0CAA0C;AAClD,QAAQ,0CAA0C;AAClD;AACA;AACA,QAAQ,oCAAoC;AAC5C,QAAQ,mCAAmC;AAC3C,QAAQ,qCAAqC;AAC7C,QAAQ,mCAAmC;AAC3C,QAAQ,oCAAoC;AAC5C,QAAQ,yCAAyC;AACjD,WAAW,yEAAyE;AACpF;AACA;AACA,QAAQ,2BAA2B;AACnC,QAAQ,2BAA2B;AACnC,QAAQ,4BAA4B;AACpC;AACA;AACA,QAAQ,wCAAwC;AAChD,QAAQ,4CAA4C;AACpD,QAAQ,0CAA0C;AAClD,QAAQ,sCAAsC;AAC9C,QAAQ,yCAAyC;AACjD;AACA;AACA,QAAQ,mDAAmD;AAC3D,QAAQ,8DAA8D;AACtE,QAAQ,0DAA0D;AAClE,QAAQ,iEAAiE;AACzE,QAAQ,iEAAiE;AACzE,QAAQ,8DAA8D;AACtE,QAAQ,2DAA2D;AACnE,QAAQ,4DAA4D;AACpE,QAAQ,sDAAsD;AAC9D,QAAQ,8DAA8D;AACtE,QAAQ,0DAA0D;AAClE,QAAQ,wDAAwD;AAChE,QAAQ,oDAAoD;AAC5D,QAAQ,4DAA4D;AACpE,QAAQ,0DAA0D;AAClE,QAAQ,sDAAsD;AAC9D,QAAQ,8DAA8D;AACtE,QAAQ,iEAAiE;AACzE,QAAQ,4DAA4D;AACpE,QAAQ,oDAAoD;AAC5D,QAAQ,gEAAgE;AACxE,QAAQ,mEAAmE;AAC3E,QAAQ,wDAAwD;AAChE,QAAQ,yDAAyD;AACjE,QAAQ,yDAAyD;AACjE,QAAQ,kEAAkE;AAC1E;AACA;AACA,QAAQ,qCAAqC;AAC7C,QAAQ,qCAAqC;AAC7C,QAAQ,uCAAuC;AAC/C,QAAQ,qCAAqC;AAC7C,QAAQ,uCAAuC;AAC/C,QAAQ,yCAAyC;AACjD,QAAQ,iCAAiC;AACzC;AACA;AACA,QAAQ,0EAA0E,sCAAsC;AACxH,QAAQ,uEAAuE,mCAAmC;AAClH,QAAQ,uEAAuE,mCAAmC;AAClH,QAAQ,wEAAwE,oCAAoC;AACpH,QAAQ,sEAAsE,kCAAkC;AAChH,QAAQ,qEAAqE,iCAAiC;AAC9G,QAAQ,mEAAmE,+BAA+B;AAC1G,QAAQ,sEAAsE,kCAAkC;AAChH,QAAQ,mEAAmE,+BAA+B;AAC1G,QAAQ,wEAAwE,mCAAmC;AACnH,QAAQ,oEAAoE,+BAA+B;AAC3G,QAAQ,uEAAuE,kCAAkC;AACjH,QAAQ,kFAAkF,mEAAmE;AAC7J,QAAQ,mFAAmF,0EAA0E;AACrK,QAAQ,qFAAqF,0EAA0E;AACvK,QAAQ,oIAAoI,2DAA2D;AACvM,QAAQ,yEAAyE,sCAAsC;AACvH,QAAQ,sEAAsE,mCAAmC;AACjH,QAAQ,sEAAsE,mCAAmC;AACjH,QAAQ,uEAAuE,oCAAoC;AACnH,QAAQ,qEAAqE,kCAAkC;AAC/G,QAAQ,oEAAoE,iCAAiC;AAC7G,QAAQ,kEAAkE,+BAA+B;AACzG,QAAQ,qEAAqE,kCAAkC;AAC/G,QAAQ,kEAAkE,+BAA+B;AACzG,QAAQ,sEAAsE,mCAAmC;AACjH,QAAQ,kEAAkE,+BAA+B;AACzG,QAAQ,qEAAqE,kCAAkC;AAC/G,QAAQ,mJAAmJ,mEAAmE;AAC9N,QAAQ,wKAAwK,0EAA0E;AAC1P,QAAQ,0KAA0K,0EAA0E;AAC5P,QAAQ,4JAA4J,2DAA2D;AAC/N,QAAQ,8EAA8E,sCAAsC;AAC5H,QAAQ,2EAA2E,mCAAmC;AACtH,QAAQ,2EAA2E,mCAAmC;AACtH,QAAQ,4EAA4E,oCAAoC;AACxH,QAAQ,0EAA0E,kCAAkC;AACpH,QAAQ,yEAAyE,iCAAiC;AAClH,QAAQ,uEAAuE,+BAA+B;AAC9G,QAAQ,0EAA0E,kCAAkC;AACpH,QAAQ,uEAAuE,+BAA+B;AAC9G,QAAQ,2EAA2E,mCAAmC;AACtH,QAAQ,uEAAuE,+BAA+B;AAC9G,QAAQ,0EAA0E,kCAAkC;;AAEpH,QAAQ,6JAA6J;AACrK,QAAQ,uKAAuK;;AAE/K,QAAQ,qEAAqE,gCAAgC;AAC7G,QAAQ,mEAAmE,gCAAgC;AAC3G,QAAQ,wEAAwE,gCAAgC;;AAEhH,QAAQ,uFAAuF;AAC/F,QAAQ,qGAAqG;AAC7G,QAAQ,oGAAoG,2CAA2C;;AAEvJ,QAAQ,oHAAoH,8DAA8D;AAC1L,QAAQ,4LAA4L;AACpM,QAAQ,uHAAuH;AAC/H,QAAQ,4JAA4J,iFAAiF;AACrP,QAAQ,+HAA+H,mEAAmE;AAC1M,QAAQ,0GAA0G,oIAAoI;AACtP,QAAQ,oHAAoH;AAC5H,QAAQ,sHAAsH;AAC9H,QAAQ,iPAAiP;AACzP,QAAQ,kGAAkG,kCAAkC;AAC5I,QAAQ,oHAAoH,mEAAmE;AAC/L,QAAQ,sKAAsK;AAC9K,QAAQ,yGAAyG,oCAAoC;AACrJ,QAAQ,6GAA6G,oDAAoD;;AAEzK;AACA,QAAQ,4EAA4E;AACpF,QAAQ,4EAA4E;AACpF,QAAQ,8EAA8E;AACtF,QAAQ,kFAAkF;AAC1F,QAAQ,kFAAkF;AAC1F,QAAQ,8EAA8E;AACtF,QAAQ,wFAAwF;AAChG,QAAQ,gFAAgF;AACxF,QAAQ,gFAAgF;AACxF,QAAQ,iFAAiF;AACzF,QAAQ,+EAA+E;AACvF,QAAQ,yEAAyE;AACjF,QAAQ,mFAAmF;AAC3F,QAAQ,6EAA6E;AACrF,QAAQ,qFAAqF;AAC7F;AACA,QAAQ,iGAAiG;AACzG;AACA;AACA;AACA,QAAQ,uFAAuF;AAC/F,QAAQ,kGAAkG;AAC1G,QAAQ,oGAAoG;AAC5G,QAAQ,kGAAkG;AAC1G,QAAQ,yFAAyF;AACjG,QAAQ,6GAA6G;AACrH,QAAQ,2GAA2G;AACnH,QAAQ,8FAA8F;AACtG,QAAQ,mGAAmG;AAC3G,QAAQ,qGAAqG;AAC7G,QAAQ,gGAAgG;AACxG,QAAQ,6GAA6G;AACrH,QAAQ,8GAA8G;AACtH,QAAQ,2GAA2G;AACnH,QAAQ,wGAAwG;AAChH,QAAQ,0GAA0G;AAClH,QAAQ,mGAAmG;AAC3G,QAAQ,iGAAiG;AACzG,QAAQ,kFAAkF;;AAE1F;AACA,QAAQ,yGAAyG;AACjH,QAAQ,2GAA2G;AACnH;AACA,QAAQ,6IAA6I,aAAa;AAClK,QAAQ,4IAA4I,aAAa;AACjK,QAAQ,gKAAgK,mCAAmC;AAC3M,QAAQ,+IAA+I,mCAAmC;AAC1L,QAAQ,4IAA4I,wBAAwB;AAC5K,QAAQ,sJAAsJ,aAAa;AAC3K,QAAQ,kJAAkJ,wBAAwB;AAClL,QAAQ,iJAAiJ,aAAa;AACtK,QAAQ,0JAA0J,wBAAwB;AAC1L,QAAQ,8IAA8I;AACtJ,QAAQ,4JAA4J,aAAa;AACjL,QAAQ,oJAAoJ,wBAAwB;AACpL,QAAQ,gJAAgJ,aAAa;AACrK,QAAQ,8IAA8I,aAAa;AACnK,QAAQ,6IAA6I,wBAAwB;AAC7K,QAAQ,yIAAyI,aAAa;AAC9J;AACA,QAAQ,qJAAqJ,8CAA8C;AAC3M,QAAQ,uJAAuJ,aAAa;AAC5K,QAAQ,mJAAmJ,wBAAwB;AACnL,QAAQ,+JAA+J,mCAAmC;AAC1M,QAAQ,iKAAiK,8CAA8C;AACvN,QAAQ,2JAA2J,aAAa;AAChL,QAAQ,iJAAiJ;AACzJ,QAAQ,iJAAiJ,mCAAmC;AAC5L,QAAQ,qJAAqJ,wBAAwB;AACrL,QAAQ,yJAAyJ,wBAAwB;AACzL,QAAQ,mJAAmJ,mCAAmC;AAC9L,QAAQ,+IAA+I,wBAAwB;AAC/K,QAAQ,iJAAiJ,mCAAmC;AAC5L,QAAQ,gJAAgJ,8CAA8C;AACtM,QAAQ,mJAAmJ,mCAAmC;AAC9L,QAAQ,uJAAuJ,aAAa;AAC5K,QAAQ,6IAA6I,wBAAwB;AAC7K,QAAQ,6JAA6J;AACrK,QAAQ,2IAA2I,mCAAmC;AACtL,QAAQ,2IAA2I,wBAAwB;AAC3K,QAAQ,6IAA6I,mCAAmC;AACxL,QAAQ,sJAAsJ,mCAAmC;AACjM,QAAQ,2IAA2I,mCAAmC;AACtL,QAAQ,iJAAiJ,aAAa;AACtK,QAAQ,wIAAwI,aAAa;AAC7J,QAAQ,6IAA6I,mCAAmC;AACxL,QAAQ,qJAAqJ,2DAA2D;AACxN,QAAQ,mJAAmJ,8CAA8C;AACzM,QAAQ,qJAAqJ,wBAAwB;AACrL,QAAQ,yJAAyJ,wBAAwB;AACzL,QAAQ,4IAA4I,8CAA8C;AAClM,QAAQ,mJAAmJ,wBAAwB;AACnL,QAAQ,sJAAsJ;AAC9J,QAAQ,uJAAuJ,aAAa;AAC5K,QAAQ,6IAA6I,wBAAwB;;AAE7K;AACA,QAAQ,+JAA+J,mCAAmC;AAC1M,QAAQ,8JAA8J,mCAAmC;AACzM,QAAQ,gKAAgK,8CAA8C;AACtN,QAAQ,iGAAiG;;AAEzG;AACA,QAAQ,yHAAyH;AACjI,QAAQ,mHAAmH;AAC3H,QAAQ,+HAA+H;AACvI,QAAQ,qHAAqH;AAC7H,QAAQ,6HAA6H;AACrI,QAAQ,mIAAmI;AAC3I,QAAQ,yHAAyH;AACjI,QAAQ,sHAAsH;AAC9H,QAAQ,iIAAiI;AACzI,QAAQ,yHAAyH;AACjI,QAAQ,qIAAqI;AAC7I,QAAQ,qHAAqH;AAC7H,QAAQ,qHAAqH;AAC7H,QAAQ,uHAAuH;AAC/H,QAAQ,qHAAqH;AAC7H,QAAQ,uHAAuH;AAC/H,QAAQ,uHAAuH;AAC/H,QAAQ,+HAA+H;AACvI,QAAQ,2GAA2G;AACnH,QAAQ,mHAAmH;AAC3H,QAAQ,mHAAmH;AAC3H,QAAQ,wHAAwH;AAChI,QAAQ,mHAAmH;AAC3H,QAAQ,oGAAoG;AAC5G,QAAQ,mGAAmG;AAC3G,QAAQ,qGAAqG;AAC7G,QAAQ,sGAAsG;AAC9G,QAAQ,wHAAwH;AAChI,QAAQ,mHAAmH;AAC3H,QAAQ,gHAAgH;AACxH,QAAQ,wHAAwH;AAChI,QAAQ,kHAAkH;AAC1H,QAAQ,+GAA+G;AACvH,QAAQ,mHAAmH;AAC3H,QAAQ,gHAAgH;AACxH,QAAQ,kHAAkH;AAC1H,QAAQ,gHAAgH;AACxH,QAAQ,gHAAgH;AACxH,QAAQ,yHAAyH;AACjI,QAAQ,+GAA+G;AACvH,QAAQ,kHAAkH;AAC1H,QAAQ,gHAAgH;AACxH,QAAQ,iHAAiH;AACzH,QAAQ,gHAAgH;AACxH,QAAQ,gHAAgH;AACxH,QAAQ,iHAAiH;AACzH,QAAQ,iHAAiH;AACzH,QAAQ,iHAAiH;AACzH,QAAQ,mHAAmH;AAC3H,QAAQ,iHAAiH;AACzH,QAAQ,qHAAqH;AAC7H,QAAQ,qHAAqH;AAC7H;AACA;AACA,QAAQ,gCAAgC;AACxC,QAAQ,gCAAgC;AACxC;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,QAAQ,0BAA0B;AAClC,aAAa,0BAA0B;AACvC,QAAQ,4BAA4B;AACpC,QAAQ,6BAA6B;AACrC;AACA,GAAG;AACH;AACA,MAAM,4HAA4H;AAClI,MAAM,8HAA8H;AACpI,MAAM,0HAA0H;AAChI,MAAM,wHAAwH;AAC9H,MAAM,8HAA8H;AACpI,MAAM,4HAA4H;AAClI,MAAM,0HAA0H;AAChI,MAAM,8HAA8H;AACpI,MAAM,2IAA2I;AACjJ;AACA;AACA,MAAM,2IAA2I;AACjJ,MAAM,mHAAmH;AACzH,MAAM,2HAA2H;AACjI,MAAM,iIAAiI;AACvI,MAAM,uHAAuH;AAC7H,MAAM,mIAAmI;AACzI,MAAM,qIAAqI;AAC3I,MAAM,+HAA+H;AACrI,MAAM,uHAAuH;AAC7H,MAAM,qHAAqH;AAC3H,MAAM,uHAAuH;AAC7H,MAAM,6HAA6H;AACnI;AACA,MAAM,yHAAyH;AAC/H;AACA;AACA;AACA,QAAQ,4CAA4C;AACpD,QAAQ,8CAA8C;AACtD,QAAQ,4CAA4C;AACpD,QAAQ,wCAAwC;AAChD,QAAQ,uCAAuC;AAC/C,QAAQ,gDAAgD;AACxD,QAAQ,iDAAiD;AACzD,QAAQ,+CAA+C;AACvD,QAAQ,6CAA6C;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA,QAAQ,2BAA2B;AACnC,QAAQ,2BAA2B;AACnC,QAAQ,8BAA8B;AACtC;AACA;AACA,QAAQ,gCAAgC;AACxC,QAAQ,iCAAiC;AACzC,QAAQ,iCAAiC;AACzC,QAAQ,gCAAgC;AACxC;AACA;AACA,QAAQ,kCAAkC;AAC1C,QAAQ,6CAA6C;AACrD,QAAQ,kCAAkC;AAC1C,QAAQ,+BAA+B;AACvC,QAAQ,+BAA+B;AACvC,QAAQ,6BAA6B;AACrC,QAAQ,6BAA6B;AACrC,QAAQ,6BAA6B;AACrC,QAAQ,+BAA+B;AACvC,QAAQ,+BAA+B;AACvC,QAAQ,6BAA6B;AACrC,QAAQ,8BAA8B;AACtC,QAAQ,iCAAiC;AACzC,QAAQ,gCAAgC;AACxC,QAAQ,+BAA+B;AACvC,QAAQ,8BAA8B;AACtC,QAAQ,kCAAkC;AAC1C,QAAQ,iCAAiC;AACzC,WAAW,6BAA6B;AACxC;AACA,GAAG;AACH;AACA;AACA,QAAQ,sBAAsB;AAC9B,QAAQ,wBAAwB;AAChC,QAAQ,wBAAwB;AAChC,QAAQ,uBAAuB;AAC/B,QAAQ,0BAA0B;AAClC,QAAQ,wBAAwB;AAChC,QAAQ,wBAAwB;AAChC,QAAQ,sBAAsB;AAC9B,QAAQ,yBAAyB;AACjC;AACA;AACA;AACA,WAAW,6BAA6B;AACxC,QAAQ,oCAAoC;AAC5C,QAAQ,oCAAoC;AAC5C;AACA;AACA,QAAQ,4BAA4B;AACpC,QAAQ,yBAAyB;AACjC,QAAQ,yBAAyB;AACjC,QAAQ,yBAAyB;AACjC,QAAQ,qBAAqB;AAC7B,QAAQ,qBAAqB;AAC7B,QAAQ,qBAAqB;AAC7B,QAAQ,0BAA0B;AAClC,QAAQ,wBAAwB;AAChC,QAAQ,wBAAwB;AAChC,QAAQ,yBAAyB;AACjC,QAAQ,yBAAyB;AACjC,QAAQ,uBAAuB;AAC/B,QAAQ,sBAAsB;AAC9B;AACA;AACA,QAAQ,sBAAsB;AAC9B,QAAQ,kBAAkB;AAC1B,QAAQ,kBAAkB;AAC1B,QAAQ,sBAAsB;AAC9B;AACA;AACA,GAAG;AACH;AACA;AACA,QAAQ,2IAA2I;AACnJ,QAAQ,6IAA6I;AACrJ,QAAQ,2IAA2I;AACnJ,QAAQ,6IAA6I;AACrJ,QAAQ,yIAAyI;AACjJ,QAAQ,uIAAuI;AAC/I,QAAQ,2IAA2I;AACnJ,QAAQ,iJAAiJ;AACzJ;AACA;AACA,QAAQ,uCAAuC;AAC/C,QAAQ,4CAA4C;AACpD,QAAQ,6BAA6B;AACrC,QAAQ,kCAAkC;AAC1C,QAAQ,qCAAqC;AAC7C,QAAQ,gDAAgD;AACxD,QAAQ,+BAA+B;AACvC,QAAQ,8BAA8B;AACtC,QAAQ,iCAAiC;AACzC,QAAQ,+BAA+B;AACvC,QAAQ,gCAAgC;AACxC,QAAQ,+BAA+B;AACvC,QAAQ,+BAA+B;AACvC,QAAQ,iCAAiC;AACzC,QAAQ,gCAAgC;AACxC,QAAQ,+BAA+B;AACvC,QAAQ,6BAA6B;AACrC;AACA;AACA,QAAQ,sCAAsC;AAC9C,QAAQ,2CAA2C;AACnD,QAAQ,+BAA+B;AACvC,QAAQ,qCAAqC;AAC7C,QAAQ,gDAAgD;AACxD,QAAQ,mCAAmC;AAC3C,QAAQ,kCAAkC;AAC1C,QAAQ,kCAAkC;AAC1C,QAAQ,iCAAiC;AACzC,QAAQ,oCAAoC;AAC5C,QAAQ,iCAAiC;AACzC,QAAQ,gCAAgC;AACxC,QAAQ,mCAAmC;AAC3C,QAAQ,gCAAgC;AACxC,QAAQ,mCAAmC;AAC3C,QAAQ,+BAA+B;AACvC;AACA;AACA,QAAQ,qDAAqD;AAC7D,QAAQ,qDAAqD;AAC7D,QAAQ,qDAAqD;AAC7D,QAAQ,yDAAyD;AACjE,QAAQ,yDAAyD;AACjE,QAAQ,sDAAsD;AAC9D,QAAQ,oDAAoD;AAC5D,QAAQ,gDAAgD;AACxD,QAAQ,sDAAsD;AAC9D;AACA,GAAG;AACH;AACA;AACA;AACA,QAAQ,4EAA4E,aAAa;AACjG,QAAQ,uEAAuE,aAAa;AAC5F,QAAQ,yEAAyE,mCAAmC;AACpH,QAAQ,uEAAuE,wBAAwB;AACvG,QAAQ,4EAA4E,aAAa;AACjG,QAAQ,0EAA0E,wBAAwB;AAC1G,QAAQ,0EAA0E,aAAa;AAC/F,QAAQ,iFAAiF,mCAAmC;AAC5H,QAAQ,+EAA+E,wBAAwB;AAC/G,QAAQ,yEAAyE;AACjF,QAAQ,+EAA+E,aAAa;AACpG,QAAQ,2EAA2E,wBAAwB;AAC3G,QAAQ,yEAAyE,aAAa;AAC9F,QAAQ,wEAAwE,aAAa;AAC7F,QAAQ,wEAAwE,wBAAwB;AACxG,QAAQ,wEAAwE,aAAa;AAC7F;AACA,QAAQ,6EAA6E,aAAa;AAClG,QAAQ,2EAA2E,wBAAwB;AAC3G,QAAQ,2EAA2E;AACnF,QAAQ,0EAA0E,mCAAmC;AACrH,QAAQ,4EAA4E,wBAAwB;AAC5G,QAAQ,8EAA8E,wBAAwB;AAC9G,QAAQ,2EAA2E,mCAAmC;AACtH,QAAQ,iFAAiF,mCAAmC;AAC5H,QAAQ,kFAAkF,8CAA8C;AACxI,QAAQ,yEAAyE,wBAAwB;AACzG,QAAQ,2EAA2E,mCAAmC;AACtH,QAAQ,6EAA6E,aAAa;AAClG,QAAQ,wEAAwE,wBAAwB;AACxG,QAAQ,iFAAiF;AACzF,QAAQ,0EAA0E,mCAAmC;AACrH,QAAQ,uEAAuE,wBAAwB;AACvG,QAAQ,wEAAwE,mCAAmC;AACnH,QAAQ,0EAA0E,mCAAmC;AACrH,QAAQ,0EAA0E,aAAa;AAC/F,QAAQ,4EAA4E,wBAAwB;AAC5G,QAAQ,8EAA8E,wBAAwB;AAC9G,QAAQ,2EAA2E,wBAAwB;AAC3G,QAAQ,8EAA8E;AACtF,QAAQ,6EAA6E,aAAa;AAClG,QAAQ,wEAAwE,wBAAwB;AACxG;AACA,QAAQ,yEAAyE;AACjF,QAAQ,yEAAyE;AACjF,QAAQ,yEAAyE;AACjF,QAAQ,yEAAyE;AACjF,QAAQ,yEAAyE;AACjF,QAAQ,yEAAyE;AACjF,QAAQ,yEAAyE;AACjF,QAAQ,8EAA8E;AACtF;AACA;AACA,QAAQ,oBAAoB;AAC5B,QAAQ,8BAA8B;AACtC,QAAQ,0BAA0B;AAClC,QAAQ,0BAA0B;AAClC,QAAQ,oBAAoB;AAC5B,QAAQ,6BAA6B;AACrC,QAAQ,yBAAyB;AACjC,QAAQ,yBAAyB;AACjC,QAAQ,yBAAyB;AACjC,QAAQ,yBAAyB;AACjC,QAAQ,0BAA0B;AAClC,QAAQ,0BAA0B;AAClC,QAAQ,oCAAoC;AAC5C,QAAQ,+BAA+B;AACvC;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;AC91BwB;AACR;AACQ;AACd;AACF;AACmB;AACG;AAC2B;AACxB;AACX;AAC2B;AACoE;AACH;AACxE;;AAErD;;AAEf,sBAAsB,8DAAU;;AAEhC,kCAAkC,iGAAsB;;AAExD,6BAA6B,4FAAiB;;AAE9C,mCAAmC,kGAAuB;;AAE1D,gCAAgC,+FAAoB;;AAEpD,sCAAsC,8EAA0B;;AAEhE,iCAAiC,yEAAqB;;AAEtD,sCAAsC,8EAA0B;;AAEhE,6BAA6B,qEAAiB;;AAE9C,2BAA2B,8FAAqB;;AAEhD,gCAAgC,wGAA0B;;AAE1D;AACA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,QAAQ;AACrB,aAAa,SAAS;AACtB,cAAc,eAAe;AAC7B;AACA,mDAAmD,8CAA8C,IAAI;AACrG;AACA;AACA;AACA,MAAM,qEAAW,mCAAmC,eAAe;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAU,iHAAmC;AAC7C,QAAQ,wFAAyB;AACjC,qBAAqB,8EAAe;AACpC,QAAQ,2EAAQ;AAChB,QAAQ;AACR,qBAAqB,iFAAqB;AAC1C,cAAc,6EAAS;AACvB,QAAQ;AACR;AACA,kBAAkB,sFAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb,WAAW;AACX;;AAEA,cAAc,+EAAW;AACzB,sBAAsB,mFAAe;AACrC;;AAEA,0CAA0C,oIAA4C,GAAG,2CAA2C;;AAEpI,aAAa,sEAAe;;AAE5B;AACA;AACA;AACA,QAAQ,uEAAY;AACpB,qEAAqE,iBAAiB;AACtF,QAAQ,uEAAY,6CAA6C,cAAc;;AAE/E,QAAQ,qEAAW,4BAA4B,eAAe;AAC9D;AACA,SAAS;AACT;AACA,QAAQ;AACR,QAAQ,qEAAW,mCAAmC,cAAc;AACpE;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,SAAS;AACtB,cAAc,eAAe;AAC7B;AACA,uDAAuD,2BAA2B,IAAI;AACtF,IAAI,qEAAW;AACf;AACA;AACA,MAAM,uEAAY,eAAe,SAAS;AAC1C,2DAA2D,6BAA6B;AACxF;AACA,IAAI,qEAAW;AACf;;AAEA;AACA;AACA;AACA,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,QAAQ;AAChE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,UAAU;AAC5B;AACA;AACA,sCAAsC,QAAQ;AAC9C,SAAS;AACT,OAAO;AACP;AACA,yBAAyB,gBAAgB,EAAE,cAAc;AACzD,0DAA0D,oDAAoD;AAC9G;;AAEA;AACA;AACA;AACA,QAAQ,uEAAY,sCAAsC,cAAc,OAAO,cAAc,OAAO,WAAW;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,+FAAyB;AACpC;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uFAAuF,YAAY;AACnG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB,aAAa,KAAK;AAClB,aAAa,KAAK;AAClB,aAAa,QAAQ;AACrB,cAAc,eAAe;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,kBAAkB,GAAG,eAAe;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,0CAA0C,kBAAkB;AAC5D;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yFAAsB;;AAEpD;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA,oCAAoC,kCAAkC;AACtE;AACA;AACA,MAAM,uEAAY;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,SAAS;AACvB;AACA;AACA,yCAAyC,sBAAsB;AAC/D;AACA;AACA;AACA,+BAA+B,wBAAwB;AACvD;;AAEA;AACA;AACA;AACA,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oBAAoB;AAC/C,6BAA6B,oBAAoB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,wCAAwC;;AAE5F;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,UAAU;AACvB,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,aAAa;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA,QAAQ,gFAAc;AACtB;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,cAAc,OAAO;AACrB;AACA,sDAAsD;AACtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B;AAC7B;AACA;AACA;AACA,QAAQ,4BAA4B;AACpC;AACA;AACA;AACA,QAAQ,OAAO;AACf;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,SAAS;AACtB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C,yBAAyB,wBAAwB;AACjD;AACA,4BAA4B,wBAAwB;AACpD,8BAA8B,yBAAyB;AACvD;AACA;AACA;AACA;AACA,sGAAsG,2BAA2B;AACjI;AACA;AACA;AACA,4BAA4B,QAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB,aAAa,MAAM;AACnB,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM,sCAAsC;AAC5C;AACA,MAAM,sCAAsC;AAC5C;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,SAAS;AACtB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,+FAA+F,kBAAkB;AACjH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,cAAc;AAC3B,cAAc,kBAAkB;AAChC;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;AACA,QAAQ,gFAAc;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB,cAAc,yBAAyB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,yBAAyB;AAC7E;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB,aAAa,MAAM;AACnB,cAAc,SAAS;AACvB;AACA;AACA,kBAAkB,qFAAqB;AACvC,kBAAkB,qFAAqB;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,KAAK,IAAI,KAAK;AAC1C;AACA,QAAQ,qEAAW;AACnB;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,cAAc,SAAS;AACvB;AACA;AACA,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,cAAc;AACjD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,gDAAgD,IAAI;AACrF;AACA;AACA,MAAM,uEAAY;AAClB;AACA;AACA;;AAEA;AACA,MAAM,uEAAY,cAAc,eAAe;AAC/C;AACA;;AAEA,IAAI,uEAAY,aAAa,eAAe,KAAK,WAAW;AAC5D,oFAAoF,aAAa;AACjG;AACA;AACA,MAAM,uEAAY;AAClB,2BAA2B,4CAA4C;AACvE;AACA;;AAEA,8BAA8B,+DAA+D,IAAI;AACjG;AACA;AACA,MAAM,uEAAY;AAClB;AACA;;AAEA;;AAEA;AACA,MAAM,uEAAY,cAAc,eAAe;AAC/C;AACA;;AAEA,IAAI,uEAAY,WAAW,eAAe,KAAK,WAAW;AAC1D;AACA,+CAA+C,gBAAgB,aAAa,0BAA0B;AACtG,0BAA0B,QAAQ;AAClC;AACA,wEAAwE,cAAc;AACtF;AACA,MAAM,uEAAY;AAClB,2BAA2B,4CAA4C;AACvE;AACA;;AAEA,iCAAiC,iFAAiF,IAAI;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qEAAW;AACjB;AACA;AACA,IAAI,uEAAY,0BAA0B,kDAAkD;AAC5F;AACA,MAAM,uEAAY,yBAAyB,6BAA6B;AACxE,2EAA2E,6CAA6C;AACxH;AACA;AACA,MAAM,uEAAY,uBAAuB,qCAAqC;AAC9E,wEAAwE,qDAAqD;AAC7H;AACA,IAAI,uEAAY,yBAAyB,kDAAkD;;AAE3F;;AAEA,kCAAkC,gCAAgC,IAAI;AACtE;AACA,sBAAsB,kFAAe;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,yDAAyD,WAAW;AACpE;;AAEA,uCAAuC,+BAA+B,IAAI;AAC1E;AACA,sBAAsB,kFAAe;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA,6CAA6C,wEAAwE,IAAI;AACzH,uDAAuD,IAAI,kBAAkB;AAC7E,0BAA0B,aAAa;;AAEvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP,KAAK;AACL;;AAEA,wCAAwC,sHAAsH,IAAI;;AAElK;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,8CAA8C,iCAAiC;AAC/E;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kCAAkC;AACpD,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI,IAAI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1kCkC;AACY;AACK;;AAEpC;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,MAAM,qEAAW;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,gDAAgD,wFAAyB;AACzE,YAAY,wGAAiC;AAC7C;;AAEA;AACA;;AAEA;AACA;AACA,IAAI,uEAAY,sBAAsB,MAAM,EAAE,SAAS;AACvD;AACA;AACA,cAAc,yFAAqB,uCAAuC,KAAK;;AAE/E;AACA;AACA,wBAAwB,yFAAqB,uCAAuC,KAAK;AACzF,0CAA0C,eAAe;AACzD;AACA,MAAM;AACN;AACA,oEAAoE,KAAK,MAAM,SAAS;AACxF;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,uFAAuF,IAAI;AAC1H;AACA;AACA;AACA;AACA;AACA,4DAA4D,UAAU,IAAI,UAAU;AACpF;;AAEA;AACA,cAAc,SAAS,EAAE,WAAW;AACpC,gBAAgB,iBAAiB,EAAE,YAAY;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA,+DAA+D,UAAU;AACzE;AACA,4DAA4D,UAAU,IAAI,UAAU;AACpF,oBAAoB,aAAa;AACjC,wCAAwC,EAAE,GAAG,aAAa;AAC1D;;AAEA;AACA;AACA;AACA;;AAEA,kCAAkC,sDAAsD,IAAI;AAC5F;AACA,8DAA8D,cAAc;AAC5E;AACA,4DAA4D,UAAU,IAAI,UAAU;AACpF,oBAAoB,aAAa;AACjC;AACA;;;AAGA,oCAAoC,kGAAkG,IAAI;AAC1I,yDAAyD,gCAAgC;AACzF,4BAA4B,UAAU,GAAG,WAAW,EAAE,YAAY;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uCAAuC,wHAAwH,IAAI;AACnK,yDAAyD,gCAAgC;AACzF;AACA,WAAW,UAAU,GAAG,WAAW,EAAE,YAAY;AACjD,WAAW,WAAW,EAAE,YAAY;;AAEpC;AACA,sCAAsC,cAAc;AACpD;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,kCAAkC;AAC/D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,6BAA6B,wCAAwC;;AAErE;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wCAAwC,uFAAuF;AAC/H;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,sDAAsD,KAAK,IAAI,SAAS;AACxE,MAAM,qEAAW,0BAA0B,KAAK,IAAI,SAAS;AAC7D,+CAA+C,KAAK,IAAI,SAAS;AACjE;AACA;AACA;;AAEA;AACA,+CAA+C;AAC/C,wBAAwB,aAAa;AACrC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gDAAgD,SAAS,MAAM,EAAE,SAAS,6DAA6D;AACvI,qDAAqD,KAAK,GAAG,KAAK;AAClE,IAAI,uEAAY,WAAW,KAAK,IAAI,UAAU;AAC9C;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,gCAAgC;AACxE;AACA,IAAI,uEAAY,aAAa,KAAK,WAAW,KAAK;AAClD;AACA;;AAEA;AACA;AACA,aAAa,cAAc;AAC3B,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,OAAO;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,MAAM,uEAAY,4BAA4B,yBAAyB;AACvE,uGAAuG;AACvG,MAAM,uEAAY;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;ACjXoC;AACF;AACK;;AAEvC;AACA;AACA;AACe;;AAEf;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,sGAAyB;AAC9C,6EAA6E,KAAK,GAAG,SAAS;AAC9F;;AAEA;AACA;AACA;;AAEA,+CAA+C,8BAA8B,kBAAkB,KAAK,oBAAoB,WAAW,IAAI,EAAE,oBAAoB;AAC7J;;;AAGA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,cAAc,cAAc;AAC5B;AACA,+CAA+C,UAAU,IAAI,WAAW,IAAI;AAC5E,kBAAkB,kHAAmC;AACrD,yBAAyB,wFAAsB;AAC/C;AACA;AACA,QAAQ,sGAA6B;AACrC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,8DAA8D,cAAc;AAC5E;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,8CAA8C;AAC9C;AACA,8DAA8D,EAAE,OAAO,GAAG;;AAE1E;AACA;AACA;AACA,MAAM;AACN,MAAM,uEAAY;AAClB;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;ACjH4C;AACV;AACQ;AACuB;;AAEjE;AACA,KAAK,uCAAuC;AAC5C;AACA,KAAK,+CAA+C;AACpD;AACA,KAAK,iDAAiD;;AAEtD;AACA;AACA,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,QAAQ;AAC3B;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACO;AACP;;AAEA;AACA,WAAW,mCAAmC;AAC9C,mBAAmB,kFAAkF;AACrG;AACA;AACA;AACA;;AAEA,0BAA0B;AAC1B,uBAAuB;AACvB;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,iHAAmC;AAC3D;AACA;AACA,UAAU;AACV;AACA;AACA,iCAAiC,cAAc;AAC/C,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wEAAwE,QAAQ;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC,UAAU;AACV,uBAAuB,UAAU;AACjC,UAAU;AACV,+CAA+C,WAAW,IAAI,UAAU,IAAI,WAAW,IAAI,UAAU;AACrG,2BAA2B,UAAU,IAAI,UAAU,IAAI,UAAU;AACjE;AACA;AACA;AACA;AACA,qBAAqB,UAAU;AAC/B;AACA;;AAEA,IAAI,uEAAY,eAAe,SAAS,aAAa,KAAK,IAAI,QAAQ;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA,yBAAyB,wGAA4B;AACrD,kBAAkB,wEAAiB;AACnC,0BAA0B,uEAAY,eAAe,SAAS,YAAY,KAAK;;AAE/E;AACA;;;AAGA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACO;AACP;;AAEA;AACA,WAAW,mCAAmC;AAC9C,mBAAmB,kFAAkF;AACrG;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C,EAAE,uEAAY,wCAAwC,kBAAkB,aAAa,YAAY;;AAEjG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACO;AACP;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACO;AACP;AACA;;AAEA;AACA,4BAA4B,iBAAiB;AAC7C,EAAE,uEAAY,wCAAwC,iBAAiB;;AAEvE,eAAe,qEAAc,iBAAiB,kBAAkB;;AAEhE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrUA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,WAAW,GAAG;AACd;AACO;;AAEP;AACA;;;;;;;ACfoC;AACQ;AACV;AACQ;AACwB;AACD;AACyB;AACrC;;AAErD;AACA;AACA;AACA;AACA,IAAI,yCAAyC;AAC7C,IAAI,0CAA0C;AAC9C,IAAI,wCAAwC;AAC5C,IAAI,6CAA6C;;AAEjD,IAAI,wCAAwC;AAC5C,IAAI,yCAAyC;AAC7C,IAAI,4CAA4C;AAChD,IAAI,sCAAsC;AAC1C,IAAI,4CAA4C;AAChD,IAAI,wCAAwC;;AAE5C;AACA,IAAI,sCAAsC;AAC1C,IAAI,2CAA2C;AAC/C,IAAI,kCAAkC;AACtC,IAAI,qCAAqC;AACzC,IAAI,qCAAqC;AACzC,IAAI,mCAAmC;AACvC,IAAI,mCAAmC;AACvC,IAAI,wCAAwC;AAC5C,IAAI,yCAAyC;AAC7C,IAAI,oCAAoC;AACxC,IAAI,kCAAkC;AACtC,IAAI,sCAAsC;AAC1C,IAAI,uCAAuC;AAC3C,IAAI,sCAAsC;AAC1C,IAAI,oCAAoC;AACxC,IAAI,2CAA2C;AAC/C,IAAI,mCAAmC;AACvC,IAAI,oCAAoC;;AAExC,IAAI,0CAA0C;AAC9C,IAAI,+CAA+C;AACnD,IAAI,sCAAsC;AAC1C,IAAI,yCAAyC;AAC7C,IAAI,yCAAyC;AAC7C,IAAI,uCAAuC;AAC3C,IAAI,uCAAuC;AAC3C,IAAI,4CAA4C;AAChD,IAAI,6CAA6C;AACjD,IAAI,wCAAwC;AAC5C,IAAI,sCAAsC;AAC1C,IAAI,0CAA0C;AAC9C,IAAI,2CAA2C;AAC/C,IAAI,0CAA0C;AAC9C,IAAI,wCAAwC;AAC5C,IAAI,+CAA+C;AACnD,IAAI,uCAAuC;AAC3C,IAAI,wCAAwC;;;AAG5C,IAAI,2CAA2C;AAC/C,IAAI,iDAAiD;AACrD,IAAI,8CAA8C;AAClD;AACA,OAAO,0CAA0C;;AAEjD;AACA,IAAI,0CAA0C;AAC9C,IAAI,sCAAsC;;AAE1C,IAAI,mDAAmD;AACvD,IAAI,oDAAoD;AACxD,IAAI,uDAAuD;AAC3D,IAAI,iDAAiD;AACrD,IAAI,uDAAuD;AAC3D,IAAI,mDAAmD;;AAEvD,IAAI,kDAAkD;AACtD,IAAI,mDAAmD;AACvD,IAAI,sDAAsD;AAC1D,IAAI,gDAAgD;AACpD,IAAI,sDAAsD;AAC1D,IAAI,kDAAkD;;AAEtD;AACA,IAAI,0CAA0C;AAC9C,IAAI,yCAAyC;AAC7C,IAAI,0CAA0C;AAC9C,IAAI,gDAAgD;AACpD,IAAI,iDAAiD;AACrD,IAAI,+BAA+B;;AAEnC;AACA,IAAI,yCAAyC;AAC7C,IAAI,yCAAyC;AAC7C,IAAI,+CAA+C;AACnD,IAAI,gDAAgD;AACpD,IAAI,iDAAiD;AACrD,IAAI,iDAAiD;AACrD,IAAI,+CAA+C;;AAEnD;AACA,IAAI,gDAAgD;AACpD,IAAI,sCAAsC;;AAE1C;AACA,IAAI,0CAA0C;;AAE9C;AACA,IAAI,mCAAmC;AACvC,IAAI,iCAAiC;AACrC,IAAI,sCAAsC;;AAE1C;;AAEA;AACA;AACA,IAAI,yCAAyC;AAC7C,IAAI,sCAAsC;AAC1C,IAAI,yCAAyC;AAC7C,IAAI,sCAAsC;AAC1C,IAAI,0CAA0C;AAC9C,IAAI,uCAAuC;AAC3C,IAAI,wCAAwC;AAC5C,IAAI,qCAAqC;AACzC;;AAEA;AACA;AACA,IAAI,8CAA8C;AAClD,IAAI,+CAA+C;AACnD,IAAI,+CAA+C;AACnD,IAAI,6CAA6C;AACjD;;AAEA;AACA,IAAI,iCAAiC;AACrC,IAAI,yCAAyC;AAC7C,IAAI,0CAA0C;AAC9C,IAAI,0CAA0C;AAC9C,IAAI,wCAAwC;AAC5C;;AAEA;;AAEA;AACA,IAAI,8CAA8C;AAClD;;AAEA;;AAEA;AACA,IAAI,0CAA0C;AAC9C,IAAI,2CAA2C;AAC/C,IAAI,8CAA8C;AAClD,IAAI,wCAAwC;AAC5C,IAAI,8CAA8C;AAClD,IAAI,0CAA0C;AAC9C;;AAEA;AACA;AACA,IAAI,oCAAoC;AACxC;;AAEA;AACA;AACA,IAAI,iCAAiC;AACrC;;AAEA;AACA,IAAI,iDAAiD;AACrD,IAAI,uCAAuC;AAC3C,IAAI,+CAA+C;AACnD,IAAI,kDAAkD;AACtD;;AAEA;AACA,IAAI,+CAA+C;AACnD,IAAI,mDAAmD;AACvD,IAAI,6CAA6C;AACjD;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,IAAI,oCAAoC;AACxC;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP,oBAAoB;AACpB;AACA,OAAO;AACP,cAAc;AACd,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,IAAI,+DAA+D;AACnE;AACA,kDAAkD,oBAAoB;AACtE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;;AAEO;AACP,IAAI,oCAAoC;AACxC;AACA,0CAA0C,oBAAoB;AAC9D;;AAEO,wCAAwC;AAC/C;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,GAAG;AACnC;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA,IAAI;AACJ;AACA,gEAAgE,gCAAgC;AAChG;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,yDAAyD,qBAAqB,IAAI;AACzF;AACA,6CAA6C,eAAe,IAAI,0CAAgB,YAAY,KAAK,oBAAoB;AACrH;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA;;AAEO;AACP,wBAAwB,MAAM;AAC9B;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;;AAGA;AACA;AACA;AACO;AACP;AACA;AACA,gBAAgB,oEAA+B;AAC/C;AACA,IAAI,iCAAY,eAAe,MAAM,YAAY,KAAK;AACtD,gDAAgD,MAAM;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8DAA4B;AAC5C;AACA,IAAI,iCAAY,eAAe,MAAM,YAAY,KAAK;AACtD,yCAAyC,MAAM,EAAE,qBAAqB;AACtE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,2BAA2B,8DAA4B;;AAEvD;AACA,IAAI,iCAAY,eAAe,MAAM,YAAY,KAAK;AACtD;AACA;AACA,uBAAuB,kEAA8B;AACrD;AACA;AACA,KAAK;AACL;AACA,gDAAgD,QAAQ;AACxD,IAAI,iCAAY,gBAAgB,MAAM,YAAY,KAAK;AACvD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,2BAAY;AACvC;;AAEA;AACA,IAAI,iCAAY,wBAAwB,MAAM,MAAM,KAAK;AACzD;AACA,GAAG;AACH;AACA,IAAI,iCAAY,wBAAwB,kBAAkB,MAAM,KAAK;AACrE;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oDAAqB,yCAAyC,YAAY;AACzF,QAAQ;AACR,eAAe,oDAAqB,oCAAoC,YAAY;AACpF;AACA,KAAK;AACL;AACA,IAAI,iCAAY,eAAe,MAAM,aAAa,KAAK;AACvD,gDAAgD,kBAAkB,yBAAyB,KAAK;AAChG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8DAA4B;AAC1D;AACA;;AAEA;AACA,gCAAgC,8DAA4B;AAC5D;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wBAAwB,8DAA4B;AACpD;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,8DAA4B;AACnD;AACA;AACA;AACA,IAAI,iCAAY,8BAA8B,KAAK;AACnmDAAmD;AAC3D,QAAQ,qDAAqD;AAC7D,QAAQ,oDAAoD;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,iBAAiB,8DACM;AACvB;AACA;AACA;AACA,aAAa,2FAA2C;AACxD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB,2FAA2C;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA;;;AAGA;AACA;AACA,iBAAiB,8DAA4B;;AAE7C;AACA,IAAI,iCAAY,yCAAyC,KAAK;AAC9D;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA,4BAA4B,8DAA4B;AACxD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM,iCAAY,eAAe,SAAS,iBAAiB,KAAK;AAChE,sBAAsB,2EAAmC;;AAEzD;AACA,8CAA8C,cAAc,mBAAmB,cAAc,WAAW,YAAY;AACpH;AACA,gFAAgF,cAAc;AAC9F,QAAQ;AACR,iFAAiF,cAAc;AAC/F;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,iCAAY,eAAe,SAAS,eAAe,KAAK;AAC9D,sBAAsB,2EAAmC;AACzD,6EAA6E,QAAQ;AACrF,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,8DAA4B;;AAE9C;AACA;AACA;AACA,IAAI,iCAAY,eAAe,SAAS,6BAA6B,KAAK;AAC1E,oBAAoB,2EAAmC;AACvD,gFAAgF,KAAK,GAAG,QAAQ;AAChG;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,2EAAmC;AACvD,4DAA4D,KAAK;AACjE,+EAA+E,KAAK;AACpF,gFAAgF,KAAK;AACrF,qEAAqE,KAAK,qCAAqC,cAAc;AAC7H,sEAAsE,KAAK,sCAAsC,cAAc;AAC/H;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM,iCAAY,eAAe,OAAO,WAAW,KAAK;AACxD,yFAAyF,MAAM;AAC/F;AACA;AACA;AACA;AACA;AACA,MAAM,iCAAY,eAAe,OAAO,YAAY,KAAK;AACzD,8FAA8F,MAAM;AACpG;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,8DAA4B;AAC5C;AACA,IAAI,iCAAY,qCAAqC,KAAK;AAC1D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,iCAAY,eAAe,SAAS,gBAAgB,KAAK;AAC/D;AACA,wBAAwB,qEAAgC;AACxD;AACA;AACA,iFAAiF,UAAU;AAC3F,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,iCAAY,eAAe,SAAS,kBAAkB,KAAK;AAC/D;AACA;AACA,kBAAkB,qEAAgC;AAClD;AACA;AACA;AACA,kDAAkD,WAAW,oCAAoC,UAAU;AAC3G,MAAM;AACN,0FAA0F,UAAU;AACpG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,mFAAmF;;AAEnF;AACA;;AAEA;AACA;AACA,2BAA2B,2BAAY;AACvC,EAAE,2EAAmC;AACrC;AACA;AACA,mEAAmE,WAAW;AAC9E;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf,KAAK;;AAEL,2BAA2B,2BAAY;;AAEvC;AACA;AACA;AACA;;AAEA;AACA,IAAI,iCAAY,sCAAsC,KAAK;AAC3D,sEAAsE,IAAI;AAC1E,yCAAyC,cAAc,sBAAsB,IAAI;AACjF,8DAA8D,IAAI;AAClE;AACA;AACA,IAAI,iCAAY,wCAAwC,KAAK;AAC7D;AACA,GAAG;AACH;AACA,IAAI,iCAAY,uCAAuC,KAAK;AAC5D;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA;;AAEA;AACA,EAAE,8DAA4B;AAC9B,gBAAgB,kEAA8B;AAC9C;AACA,MAAM,iCAAY,wCAAwC,MAAM,YAAY,oBAAoB;AAChG,gDAAgD,aAAa,aAAa,kCAAkC;AAC5G,MAAM;AACN,MAAM,iCAAY,wCAAwC,MAAM;AAChE;AACA;AACA,GAAG;;AAEH,2BAA2B,8DAA4B;AACvD;AACA;AACA;AACA,oBAAoB,kEAA8B;AAClD;AACA;AACA,KAAK;AACL,8CAA8C,QAAQ;AACtD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,oEAA+B;;AAE/C;AACA;AACA,IAAI,iCAAY,eAAe,eAAe,kBAAkB,KAAK;AACrE,uEAAuE,WAAW;AAClF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8DAA4B;;AAEhD;AACA;AACA,IAAI,iCAAY,eAAe,eAAe,QAAQ,YAAY,MAAM,KAAK;AAC7E,8DAA8D,WAAW,SAAS,WAAW;AAC7F;AACA;AACA;AACA,+DAA+D,WAAW;AAC1E,SAAS;AACT,gEAAgE,WAAW;AAC3E;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,oEAA+B,6BAA6B,cAAc;;AAE1F;AACA;AACA,IAAI,iCAAY,eAAe,eAAe,kBAAkB,KAAK;AACrE,uEAAuE,WAAW;AAClF;AACA;AACA;;AAEA;AACA;AACA,EAAE,2EAAmC;AACrC;AACA,qCAAqC,cAAc;AACnD,4BAA4B,8DAA4B,gCAAgC,cAAc;AACtG,8BAA8B,8DAA4B;AAC1D;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;;;AAGH;AACA;;AAEA;;AAEA;AACA;AACA,gBAAgB,oEAA+B;;AAE/C;AACA,IAAI,iCAAY,oCAAoC,KAAK;AACzD;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8DAA4B;AAChD;AACA,IAAI,iCAAY,wCAAwC,KAAK;AAC7D;AACA;;AAEA,yBAAyB,oEAA+B;AACxD;AACA;AACA,IAAI,iCAAY,oCAAoC,KAAK;AACzD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8DAA4B;AACnD;AACA,IAAI,iCAAY,gCAAgC,KAAK;AACrD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8DAA4B;AAChD;AACA,IAAI,iCAAY,sDAAsD,KAAK;AAC3E;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,2EAAmC;AAC1C;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA,kCAAkC,0FAA0F,IAAI;AAChI;;AAEA;AACA;AACA,SAAS,kBAAkB;;AAE3B;AACA;;AAEA;AACA,EAAE,iCAAY,mCAAmC,iBAAiB;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8CAAwB;AAChD;AACA,QAAQ;AACR,gCAAgC,oDAA8B;AAC9D,QAAQ;AACR,sBAAsB,8CAAwB;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEO,2BAA2B,iFAAiF,IAAI;AACvH,EAAE,iCAAY,aAAa,kBAAkB;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,wBAAwB;AAC5C;AACA;AACA;AACA;AACA,oBAAoB,qDAAyB;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,iCAAY,IAAI,MAAM,SAAS,iBAAiB;AACpD;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;AC7lDA;AACA;AACA;AACA;;AAE6C;AACgB;AACR;AACd;AACF;AACI;;AAE1B;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM,gCAAgC;AACtC,MAAM,iCAAiC;AACvC,MAAM,+BAA+B;AACrC,MAAM,8BAA8B;AACpC,MAAM,wCAAwC;AAC9C,MAAM,kCAAkC;AACxC,MAAM,0CAA0C;AAChD,MAAM,8BAA8B;AACpC,MAAM,8BAA8B;AACpC,SAAS,wCAAwC;AACjD,MAAM,wCAAwC;AAC9C,MAAM,uCAAuC;AAC7C,MAAM,wCAAwC;AAC9C;;AAEA,6EAA6E;AAC7E,qBAAqB,qGAA8B;AACnD;AACA;AACA,KAAK;AACL;AACA;;AAEA,kFAAkF;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,QAAQ,iHAAmC;AAC3C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,2BAA2B;AAC3B,oGAAoG;AACpG;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,yDAAyD,8FAAqB;AAC9E;;AAEA,IAAI,uEAAY,gBAAgB,MAAM,KAAK,KAAK;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,MAAM;AACN;AACA,8DAA8D,KAAK,YAAY,KAAK;AACpF,QAAQ,qEAAW,iCAAiC,KAAK,YAAY,KAAK,sBAAsB,wCAAwC;AACxI;AACA;AACA;AACA;;AAEA;AACA,MAAM,+DAA+D;AACrE;;AAEA;AACA;AACA,MAAM,qEAAW,uDAAuD,MAAM,MAAM,aAAa,cAAc,KAAK;AACpH;AACA;;AAEA,8BAA8B,YAAY;;AAE1C;;AAEA;AACA;AACA,gBAAgB,iHAAkC;AAClD;;AAEA;AACA;AACA;AACA,QAAQ,uEAAY,wBAAwB,YAAY,MAAM,aAAa,6BAA6B,WAAW;AACnH;AACA;;AAEA,MAAM,uEAAY,+CAA+C,cAAc,OAAO,YAAY,gBAAgB,SAAS;AAC3H;AACA;AACA;AACA;AACA,2DAA2D,8FAAqB;AAChF;;AAEA;AACA;AACA;;AAEA,IAAI,uEAAY,2BAA2B,cAAc,+CAA+C,WAAW;AACnH;AACA;;;AAGA;AACA,MAAM;AACN,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,iFAAkB;AACtE;;AAEA;AACA;AACA,IAAI,uEAAY;AAChB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,MAAM,qEAAW,wDAAwD,mBAAmB,uBAAuB,oBAAoB,4BAA4B,UAAU;AAC7K;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA,gBAAgB,iHAAkC;AAClD;;AAEA;AACA;AACA,QAAQ,uEAAY,sCAAsC,iBAAiB,MAAM,mBAAmB,0BAA0B,WAAW;AACzI;AACA;;AAEA,MAAM,uEAAY,sDAAsD,oBAAoB,OAAO,YAAY,gBAAgB,SAAS;AACxI;AACA;AACA;;AAEA,MAAM,uEAAY;AAClB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,MAAM,uEAAY,iCAAiC,oBAAoB,OAAO,YAAY,kBAAkB,iBAAiB;AAC7H;;AAEA,IAAI,uEAAY,2BAA2B,oBAAoB,+CAA+C,gBAAgB;AAC9H;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA,2CAA2C,oEAAoE,IAAI;AACnH;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mGAAmG,eAAe;AAClH;AACA,MAAM,uEAAY,aAAa,oBAAoB;AACnD;AACA;;AAEA,IAAI,uEAAY,YAAY,oBAAoB;AAChD;;AAEA;;AAEA,sBAAsB,iFAAiF,IAAI;AAC3G;AACA;AACA,MAAM,qEAAW,IAAI,eAAe;AACpC;AACA;;AAEA,4DAA4D,sEAAsE;AAClI;AACA;AACA;AACA;;AAEA;AACA;;AAEA,+BAA+B,iFAAiF,IAAI;AACpH;AACA;AACA,MAAM,qEAAW,IAAI,eAAe;AACpC;AACA;;AAEA,4DAA4D,sEAAsE;AAClI;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI,uEAAY;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sGAAsG,UAAU;;AAEhH;AACA,oGAAoG,aAAa;AACjH;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,uEAAY,yBAAyB,UAAU;;AAEvD;AACA,UAAU,uEAAY,oBAAoB,YAAY;AACtD;AACA;AACA,YAAY,uEAAY,kEAAkE,aAAa;AACvG;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY;AACZ,iEAAiE,kDAAkD;AACnH;AACA;AACA;AACA;AACA;;AAEA,yGAAyG,UAAU;AACnH;AACA;AACA;AACA;AACA,QAAQ,uEAAY,uBAAuB,UAAU;AACrD;AACA,UAAU,uEAAY,kBAAkB,eAAe;AACvD;AACA;AACA;AACA;AACA;;AAEA,IAAI,uEAAY;AAChB;AACA;AACA,KAAK;AACL;AACA;;AAEA;;;AAGA;AACA;AACA;AACA,IAAI,uEAAY;;AAEhB;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,MAAM,uEAAY,6BAA6B,mBAAmB,IAAI,4BAA4B;AAClG;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,mFAAmF,iHAAmC;AACtH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,uEAAY,4BAA4B,QAAQ,+BAA+B,mBAAmB;AAC1G;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,0EAA0E,cAAc;AACxF;AACA;;;AAGA;AACA,QAAQ,uEAAY,yBAAyB,QAAQ,+BAA+B,mBAAmB;;AAEvG;AACA;AACA;AACA,YAAY,uEAAY,oBAAoB,YAAY;AACxD;;AAEA;AACA;AACA,cAAc,uEAAY,kEAAkE,aAAa;AACzG;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,uEAAY,uBAAuB,QAAQ,+BAA+B,mBAAmB;AACrG;AACA,UAAU,uEAAY,kBAAkB,eAAe;AACvD;AACA;AACA;AACA;;AAEA;;AAEA,IAAI,uEAAY;AAChB;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;;;;;;;;;;;;;;;ACrmBA;AACA;;AAEuD;AAClB;AACI;AACkB;;AAE5C;;AAEf;AACA;AACA;AACA;AACA;AACA,iBAAiB,oGAA4B;AAC7C,kBAAkB,kHAAmC;AACrD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,SAAS,eAAe;AACvD;AACA;;AAEA;AACA;AACA,+BAA+B,SAAS,eAAe;AACvD;AACA;;AAEA,yCAAyC,iFAAiF,IAAI;AAC9H,WAAW,oGAAiC;AAC5C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,0CAA0C,yFAAyF,IAAI;AACvI;AACA,MAAM,uEAAY;AAClB;AACA;;AAEA;AACA,0BAA0B,iFAAkB;AAC5C,0BAA0B,iFAAkB;AAC5C;AACA,MAAM,uEAAY;AAClB;AACA;;AAEA;AACA;AACA,mBAAmB,kGAAgC;AACnD,MAAM,uEAAY,eAAe,UAAU,UAAU,MAAM,qCAAqC,6BAA6B;;AAE7H,kBAAkB,oGAAiC;AACnD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,QAAQ,uEAAY,gCAAgC,UAAU,aAAa,KAAK;AAChF,oBAAoB,oGAAiC,GAAG,8DAA8D;AACtH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,IAAI,qEAAW;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI,uEAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI,uEAAY;AAChB,IAAI,uEAAY;AAChB,wDAAwD,cAAc;AACtE,IAAI,uEAAY;AAChB,UAAU,sHAA0C;AACpD,IAAI,uEAAY;AAChB,UAAU,kJAAwD;AAClE,IAAI,qEAAW;AACf;AACA;AACA;AACA;;;;;;;;;;;;AC9HwC;;AAEjC;AACP,QAAQ,gGAA0B;AAClC,EAAE,0GAA+B;;AAEjC;AACA;;;;;;;;;;;;ACPoD;;AAE7C;AACP,qBAAqB,yEAAc,cAAc,eAAe;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;AAGA;;AAEA;;AAEA,sBAAsB,yEAAc,cAAc,eAAe;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;ACrDoD;;AAE7C;AACP,eAAe,yEAAc,cAAc,eAAe;AAC1D;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACjBiE;AAC1B;AACM;AACS;AACjB;AAC8C;;AAEnF;;AAEA,0BAA0B,8EAA8E,IAAI;AAC5G;AACA;AACA;AACA,mBAAmB,KAAK,SAAS,eAAe,GAAG,oFAAgB,QAAQ,sBAAsB,OAAO,cAAc,WAAW,cAAc,WAAW,UAAU,GAAG,eAAe,YAAY,cAAc,WAAW;AAC3N;AACA;AACA;;AAEA,wBAAwB,qDAAqD,IAAI;AACjF;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU,SAAS,eAAe,GAAG,oFAAgB,QAAQ,sBAAsB,WAAW,UAAU,GAAG,eAAe,YAAY,gBAAgB,WAAW;AACpL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,+EAA+E;AACrK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAAS,oFAAgB;AACzB,4LAA4L,iCAAiC,IAAI;AACjO;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qIACO;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,4EAAqB;AAC3B;AACA,6CAA6C,SAAS,IAAI,qBAAqB;AAC/E,MAAM;AACN,MAAM,4EAAqB;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC,kEAAkE;AACzG,IAAI;AACJ;AACA;AACA;AACA,yCAAyC,kEAAkE;AAC3G;AACA;AACA;;AAEO;AACP;AACA;AACA,EAAE,uEAAY,kCAAkC,wBAAwB;AACxE,sBAAsB,8FAAiB,sBAAsB,kBAAkB;AAC/E;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,WAAW,IAAI,cAAc;AAC3E;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,IAAI,uEAAY,oCAAoC,WAAW,IAAI,YAAY,MAAM,cAAc;AACnG;AACA,WAAW;AACX;;AAEO;AACP,EAAE,uEAAY,uCAAuC,eAAe,KAAK,WAAW;AACpF;AACA,eAAe,uFAAwB,cAAc,cAAc;AACnE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEO;AACP,EAAE,uEAAY,uCAAuC,eAAe,KAAK,WAAW;AACpF;AACA,eAAe,uFAAwB,cAAc,cAAc;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,uEAAY,iCAAiC,eAAe,KAAK,WAAW;AAChF;AACA;;AAEA,0BAA0B,8FAAiB,0BAA0B,yCAAyC;AAC9G;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI,uEAAY,0CAA0C,eAAe,KAAK,WAAW;AACzF;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,WAAW,GAAG,WAAW;AAClD;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,EAAE,uEAAY,2DAA2D,WAAW,IAAI,cAAc;AACtG,uCAAuC,6EAA6E;;AAEpH;AACA;AACA;;;AAGO,gCAAgC;AACvC,4EAA4E;AAC5E;AACA,eAAe,uFAAwB,cAAc,cAAc;;AAEnE;;AAEA;AACA,IAAI,uEAAY,uEAAuE,cAAc;AACrG;AACA,uBAAuB,sFAAsF;AAC7G;AACA;AACA;AACA,IAAI,uEAAY,qEAAqE,cAAc;AACnG;AACA,uBAAuB,oFAAoF;AAC3G;AACA;;AAEA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;ACpTuB;;AAEhB;AACP,eAAe,kCAAc,cAAc,cAAc;AACzD,sBAAsB,0CAAsB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;ACnC+C;AACP;;AAEjC;AACP,eAAe,kCAAc,cAAc,eAAe;AAC1D;AACA,QAAQ,0DAA0B;AAClC,sBAAsB,gEAA6B,GAAG,wDAAwD;AAC9G;AACA;;AAEA;;AAEA;AACA;;;ACd+C;AACP;;AAEjC;AACP,eAAe,kCAAc,cAAc,cAAc;AACzD,QAAQ,0DAA0B;AAClC,sBAAsB,gEAA6B,GAAG,iBAAiB,cAAc,2DAA2D;AAChJ;AACA;AACA;AACA;AACA;;AAEA,EAAE,oEAA+B;;AAEjC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;ACzBO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;;ACX+C;AACP;;AAEjC;AACP,eAAe,kCAAc;AAC7B,QAAQ,0DAA0B;AAClC,sBAAsB,gEAA6B,GAAG,iBAAiB,cAAc,qDAAqD;AAC1I;AACA;AACA;AACA;;AAEA;AACA;;;ACb+C;;AAExC;AACP;;AAEA,iBAAiB,kCAAc;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;;AAGA;AACA;;;;;ACjBsB;AACtB;AAC6D;AACc;AACF;AAChB;AACI;AACM;AACnB;;;AAGzC;;AAEP;;AAEA;AACA;AACA,iBAAiB,4CAAwB;AACzC;AACA;AACA;AACA;;AAEA,OAAO,iCAAa;AACpB,aAAa,yCAAqB;;AAElC;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA,iBAAiB,4BAAW;AAC5B;AACA;AACA;AACA;AACA;AACA,UAAU,wCAAoB;AAC9B,UAAU,wCAAoB;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS,mCAAe;AACxB;;AAEA;AACA;AACA,WAAW,GAAG;AACd;AACO;AACP;AACA;AACA;AACA;AACA,mBAAmB,kCAAc,cAAc,eAAe,sBAAsB,kCAAkC;AACtH,0BAA0B,6CAAyB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kCAAc,cAAc,eAAe;AAC9D,0BAA0B,yCAAqB;AAC/C;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;;AAEA,SAAS,mCAAe;AACxB;;;;;;;;;;;;;;;;;;ACxK+C;;AAExC;AACP,eAAe,kCAAc;;AAE7B;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;;;;AChBoD;AACZ;;AAEjC;AACP,QAAQ,0DAA0B;;AAElC,eAAe,cAAc,4BAA4B,gBAAgB;AACzE;AACA,IAAI,0EAAkC,GAAG,gGAAgG;AACzI;AACA;;AAEA;AACA;;;ACbwC;AACY;;AAE7C;AACP,eAAe,cAAc;AAC7B,QAAQ,0DAA0B;AAClC,sBAAsB,gEAA6B,GAAG,mDAAmD;AACzG;AACA;AACA;AACA;;AAEA;AACA;;;ACb+C;AACP;;AAEjC;AACP,wBAAwB,kCAAc,cAAc,cAAc;AAClE,QAAQ,0DAA0B;;AAElC;AACA,IAAI,0EAAkC,GAAG,yFAAyF;AAClI;;AAEA;AACA;AACA;;;ACb+C;;;AAGxC;;AAEP,qBAAqB,kCAAc,cAAc,eAAe;AAChE;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;;AAGA;;AAEA,oBAAoB,kCAAc,cAAc,eAAe;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;;;AAGA;AACA;;;AC7C+C;;AAExC;AACP;AACA,uBAAuB,kCAAc;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;;ACnE8C;AACM;;AAE7C;AACP,eAAe,cAAc,cAAc,cAAc;;AAEzD,wDAAwD,wCAAwC;AAChG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM,iCAAa;AACnB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;;ACpD+C;AACP;;AAEjC;AACP,eAAe,kCAAc;AAC7B,QAAQ,0DAA0B;;AAElC;AACA,IAAI,0EAAkC,GAAG,4FAA4F;AACrI;AACA,EAAE,oEAA+B;;AAEjC;AACA;AACA;;;ACdoD;;AAE7C;AACP;AACA,eAAe,cAAc,4BAA4B,gBAAgB;;AAEzE;AACA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,gBAAgB,mCAAmC;AACnD;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;;;AChCO;AACP;AACA;AACA;;;ACHoD;;AAE7C;AACP,eAAe,cAAc,4BAA4B,gBAAgB;AACzE;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;;ACXoD;AACZ;;AAEjC;AACP,iBAAiB,cAAc,4BAA4B,gBAAgB;AAC3E;AACA;AACA;AACA,aAAa,sEAAgC,GAAG,8DAA8D;AAC9G;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,QAAQ,0DAA0B;;AAElC;AACA;;;;ACnBoD;AACZ;;AAEjC;AACP,iBAAiB,cAAc,4BAA4B,gBAAgB;AAC3E;AACA;AACA;AACA,aAAa,sEAAgC,GAAG,sDAAsD;AACtG;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA,QAAQ,0DAA0B;;AAElC;AACA;;;;;ACnBsD;AACF;;AAE7C;AACP,iBAAiB,cAAc;AAC/B,EAAE,yCAAqB;AACvB;AACA;AACA;;AAEA;AACA,+BAA+B;AAC/B,gCAAgC;AAChC;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;ACzBoD;;AAE7C;AACP,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AClCoD;;AAE7C;AACP,aAAa,uCAAmB;AAChC;AACA;AACA;;;ACNoD;;AAE7C;AACP,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B;;AAE5B;AACA;AACA;;;ACtBoD;;AAE7C;AACP,eAAe,cAAc,4BAA4B,gBAAgB;;AAEzE;AACA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;;;AC3CoD;;AAE7C;AACP,eAAe,cAAc,cAAc,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;;ACfoD;AACZ;;AAExC;AACA;AACO;AACP,eAAe,cAAc,wBAAwB,cAAc,KAAK,iBAAiB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,0BAA0B,cAAc,4BAA4B,gBAAgB;AACpF;AACA;AACA,WAAW,sEAAgC,GAAG,yDAAyD;AACvG;AACA;AACA,GAAG;AACH;;AAEA,QAAQ,0DAA0B;AAClC,EAAE,oEAA+B;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AC7CoD;;AAE7C;AACP,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7CoD;AACiB;;AAE9D;AACP;AACA;AACA;;AAEA,mBAAmB,cAAc;AACjC;;;AAGA,MAAM,iCAAa;AACnB,IAAI,yCAAqB;AACzB;AACA;AACA;AACA;AACA,wBAAwB,eAAe,iEAAiE,mCAAmC,eAAe,mCAAmC;AAC7L;AACA,OAAO;AACP;AACA;AACA;AACA,wBAAwB,eAAe,qEAAqE,6BAA6B;AACzI;AACA;AACA;AACA,IAAI;AACJ,2BAA2B,cAAc,cAAc,eAAe;AACtE,IAAI,yCAAqB;AACzB;AACA;AACA;;AAEA;AACA;AACA;;;ACrC+C;AACP;;AAEjC;AACP,eAAe,kCAAc;AAC7B,QAAQ,0DAA0B;AAClC,EAAE,oEAA+B;;AAEjC;AACA;AACA;AACA,4BAA4B;;AAE5B;AACA;;;ACdoD;;AAE7C;AACP,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACnCoD;;AAE7C;AACP;AACA;AACA;AACA;;AAEA,oBAAoB,cAAc,cAAc,eAAe;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;;ACvCoD;AACa;;AAE1D;AACP,eAAe,cAAc;;AAE7B,MAAM,iCAAa;AACnB,wBAAwB,qCAAiB;AACzC,wBAAwB,qCAAiB;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,gBAAgB,mCAAmC;AACnD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;;;;;AC1DoD;;AAE7C;AACP,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA,4BAA4B;AAC5B;AACA;;AAEA;AACA;AACA;;;;ACvB8C;AACM;;AAE7C;AACP,eAAe,cAAc,cAAc,cAAc,KAAK,gBAAgB;AAC9E,MAAM,iCAAa;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AC7CoD;;AAE7C;AACP;AACA;AACA;AACA;;AAEA,oBAAoB,cAAc,cAAc,eAAe;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;;ACjCoD;;AAE7C;AACP,iBAAiB,cAAc;AAC/B;AACA;AACA,4BAA4B;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B;AAC7B;;AAEA;AACA;;;ACrB+C;;AAExC;AACP,eAAe,kCAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC1BoD;AACE;;AAE/C;AACP,eAAe,cAAc;AAC7B;AACA,MAAM,6FAA6F;AACnG,MAAM,oGAAoG;AAC1G;;AAEA,EAAE,yCAAqB;;AAEvB;AACA,4BAA4B;AAC5B,+BAA+B;AAC/B;;AAEA;AACA;AACA;;;;;ACnBoD;AACuB;AACnC;AACH;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;;AAEA,EAAE,iCAAY,0BAA0B,cAAc;;AAEtD;AACA;;AAEA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,WAAW;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,uCAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,WAAW;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,MAAM;AAC1C;AACA,0BAA0B,WAAW;AACrC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,MAAM;AAC1C;AACA,0BAA0B,WAAW;AACrC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,MAAM,yCAAqB;AAC3B;AACA;AACA;AACA,MAAM,yCAAqB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAA0B;AACtC,0BAA0B,gEAA6B,GAAG,gBAAgB,YAAY,wEAAwE;AAC9J;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,8CAA8C;AACzG;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,8CAA8C;AACzG;AACA;AACA;AACA;;AAEA;AACA;;;;AC5UwC;;AAEjC;AACP,QAAQ,0DAA0B;AAClC,EAAE,oEAA+B;;AAEjC;AACA;;;;;ACPoD;;AAE7C;AACP,eAAe,cAAc;AAC7B;AACA,MAAM,iHAAiH;AACvH;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;ACbsD;AACA;;AAE/C;AACP,eAAe,wCAAe;AAC9B,EAAE,yCAAqB;AACvB;AACA;;AAEA;AACA;;;ACVoD;;AAE7C;;AAEP;AACA,mBAAmB,cAAc,cAAc,eAAe,UAAU,gBAAgB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;;;;;ACnBO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,iDAAiD;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;;;AClBsD;AACF;;AAE7C;AACP,eAAe,cAAc;AAC7B,EAAE,yCAAqB;;AAEvB;AACA;AACA;;;;ACRoD;AACZ;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAA0B;AAClC;AACA;;AAEO;AACP,iBAAiB,cAAc,4BAA4B,gBAAgB;AAC3E;AACA;AACA;AACA,aAAa,sEAAgC,GAAG,sDAAsD;AACtG;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;;;AAGO;AACP,iBAAiB,cAAc,4BAA4B,gBAAgB;AAC3E;AACA,IAAI,0EAAkC,GAAG,mFAAmF;AAC5H;AACA;;AAEA;AACA;AACA;;;AC/CoD;AACZ;;AAEjC;AACP,QAAQ,0DAA0B;;AAElC,eAAe,cAAc;;AAE7B;AACA,EAAE,oEAA+B;;AAEjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AC/B+C;;AAExC;AACP,eAAe,kCAAc;AAC7B;AACA,MAAM,uGAAuG;AAC7G;AACA;AACA;AACA;;;;ACT+C;;AAExC;AACP,eAAe,kCAAc;AAC7B;AACA,MAAM,mGAAmG;AACzG;AACA;AACA;AACA;;;ACToD;AACZ;;AAEjC;;AAEP;AACA,iBAAiB,cAAc;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,kBAAkB,eAAe;AACjC;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,8BAA8B;AAC9B;;AAEA,IAAI;AACJ,iBAAiB,cAAc,4BAA4B,gBAAgB;AAC3E;AACA;AACA;AACA,eAAe,sEAAgC,GAAG,0DAA0D;AAC5G;AACA;AACA,OAAO;AACP;;AAEA,UAAU,0DAA0B;AACpC;;AAEA;AACA;;AAEA;AACA;;;ACnEoD;;AAE7C;AACP,eAAe,cAAc,cAAc,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;;;;;ACvEoD;AACa;AACzB;;AAEjC;;AAEP,mBAAmB,cAAc,4BAA4B,gBAAgB;;AAE7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,UAAU,iCAAa;AACvB;AACA,UAAU,qCAAiB;AAC3B,UAAU,qCAAiB;AAC3B;AACA,QAAQ;AACR,cAAc,0DAA0B;AACxC,gCAAgC,gEAA6B,GAAG,gDAAgD;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7GoD;AACqB;;AAElE;AACP;AACA;AACA;;AAEA;AACA;;AAEA,0BAA0B,yCAAqB,cAAc,KAAK;AAClE;AACA;AACA;AACA;AACA,gBAAgB,KAAK,KAAK;AAC1B;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,sBAAsB,cAAc,cAAc,MAAM,mBAAmB,iBAAiB;AAC5F,6BAA6B,qCAAiB;AAC9C,6BAA6B,qCAAiB;AAC9C,6BAA6B,qCAAiB;AAC9C,6BAA6B,8CAA8C;AAC3E,6BAA6B,qCAAiB;AAC9C;AACA;AACA;AACA;AACA,IAAI;AACJ,mGAAmG,2BAA2B;AAC9H;AACA;AACA;;AAEA;;AAEA;AACA;;;ACvDoD;;AAE7C;AACP;AACA,eAAe,cAAc,4BAA4B,gBAAgB;;AAEzE;AACA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;;AC7B+C;;AAExC;AACP,eAAe,kCAAc;AAC7B;AACA,MAAM,qGAAqG;AAC3G;AACA;AACA;AACA;;;;ACT2C;;AAEpC;AACP,eAAe,8BAAU,4BAA4B,iBAAiB;;AAEtE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;;AAEA,mBAAmB,8BAAU,cAAc,eAAe,uBAAuB,gBAAgB;;AAEjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B;AAC5B;;AAEA;AACA;AACA;;AAEA;AACA;;;;;AC1DkE;AACd;;AAE7C;AACP;AACA;AACA;AACA;;AAEA,eAAe,cAAc,cAAc,cAAc;;AAEzD;AACA,kDAAkD,mCAAmC;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,wBAAwB,qCAAmB;AAC3C,gEAAgE,YAAY;AAC5E;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,wBAAwB,qCAAmB;AAC3C,kEAAkE,YAAY;AAC9E;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,wBAAwB,qCAAmB;AAC3C,+DAA+D,YAAY;AAC3E;AACA,IAAI;AACJ,wBAAwB,qCAAmB;AAC3C,gEAAgE,YAAY;AAC5E;;AAEA;AACA;;;;AC3DoD;AACZ;;AAEjC;AACP,iBAAiB,cAAc,4BAA4B,gBAAgB;AAC3E;AACA;AACA;AACA,aAAa,sEAAgC,GAAG,8DAA8D;AAC9G;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,QAAQ,0DAA0B;;AAElC;AACA;;;;AClBoD;AACZ;;AAEjC;AACP,iBAAiB,cAAc,4BAA4B,gBAAgB;AAC3E;AACA;AACA;AACA,aAAa,sEAAgC,GAAG,iEAAiE;AACjH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,QAAQ,0DAA0B;AAClC;AACA;;;AClBoD;AACZ;;AAExC;AACA;AACO;AACP,eAAe,cAAc,wBAAwB,cAAc,KAAK,gBAAgB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,0BAA0B,cAAc,4BAA4B,gBAAgB;AACpF;AACA;AACA,WAAW,sEAAgC,GAAG,0DAA0D;AACxG;AACA;AACA,GAAG;AACH;;AAEA,QAAQ,0DAA0B;AAClC,EAAE,oEAA+B;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AC7C+C;AACP;;AAEjC;AACP,eAAe,kCAAc,4BAA4B,iBAAiB;AAC1E,QAAQ,0DAA0B;AAClC;AACA,IAAI,gEAA6B,GAAG,iBAAiB,cAAc,yDAAyD;AAC5H,IAAI,0EAAkC,GAAG,4FAA4F;AACrI;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,aAAa,sEAAgC,GAAG,+DAA+D;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;ACrC8C;AACM;;AAE7C;AACP,MAAM,iCAAa;AACnB,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,cAAc,cAAc,eAAe;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AClDoD;AACiB;;AAE9D;AACP;AACA;AACA;AACA;;AAEA,oBAAoB,cAAc,cAAc,eAAe;AAC/D,+BAA+B,eAAe;AAC9C;AACA,EAAE,yCAAqB;AACvB,EAAE,yCAAqB;;AAEvB,MAAM,iCAAa;AACnB;AACA;AACA;AACA;AACA,wBAAwB,eAAe,qEAAqE,6BAA6B;AACzI;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;AC5BoD;;AAE7C;AACP,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA,4BAA4B;AAC5B;AACA;;AAEA;AACA;AACA;;;ACvBoD;;AAE7C;;AAEP,mBAAmB,cAAc;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,cAAc,cAAc,eAAe;AAC/D;AACA;AACA;;AAEA;;AAEA;;;AAGA;AACA;;;ACzB8C;;AAEvC;AACP;AACA,2CAA2C,iCAAa;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,GAAG;AACH;AACA;;;;;;AChBoD;;AAE7C;AACP,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC1BoD;;AAE7C;AACP,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;;ACf8C;AACM;;AAE7C;AACP,eAAe,cAAc,cAAc,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,MAAM,iCAAa;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;AClEmF;;AAE5E;AACP,eAAe,kCAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,MAAM,iCAAa;AACnB,eAAe,uCAAmB;AAClC;AACA;AACA;AACA;;;;AClBoD;AACZ;;AAEjC;AACP,QAAQ,0DAA0B;;AAElC,mDAAmD,eAAe,mBAAmB,gBAAgB;AACrG,EAAE,oEAA+B;AACjC;;AAEA,eAAe,cAAc,4BAA4B,gBAAgB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,kBAAkB,eAAe;AACjC;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA,OAAO;AACP;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,kBAAkB,eAAe;AACjC;AACA,OAAO;AACP;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;AAE5B;AACA;;;ACvEsD;AACF;;AAE7C;AACP,iBAAiB,cAAc;AAC/B,EAAE,yCAAqB;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;ACjBoD;;AAE7C;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,cAAc,cAAc,eAAe,SAAS,gBAAgB;AACnF;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;ACrCoD;;AAE7C;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,cAAc,cAAc,cAAc,KAAK,gBAAgB;;AAE9E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;;;AC3CsD;AACF;AACZ;;AAEjC;;AAEP,QAAQ,0DAA0B;;AAElC,iBAAiB,cAAc;AAC/B,EAAE,yCAAqB;AACvB;;AAEA,2BAA2B,cAAc,cAAc,eAAe,sBAAsB,gBAAgB;;AAE5G;AACA,IAAI,gFAAqC,GAAG,qGAAqG;AACjJ,IAAI,gFAAqC,GAAG,qGAAqG;AACjJ,IAAI,gFAAqC,GAAG,qGAAqG;AACjJ,IAAI,gFAAqC,GAAG,qGAAqG;AACjJ;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;;AClCoD;AACZ;;AAEjC;AACP,iBAAiB,cAAc;AAC/B,QAAQ,0DAA0B;AAClC,EAAE,oEAA+B;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;;ACjBwC;;AAEjC;AACP,QAAQ,0DAA0B;AAClC,EAAE,oEAA+B;AACjC;AACA;;;ACNoD;AACa;;AAE1D;AACP,eAAe,cAAc;;AAE7B,MAAM,iCAAa;AACnB,wBAAwB,qCAAiB;AACzC,wBAAwB,qCAAiB;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;ACpCoD;AACa;;AAE1D;AACP,eAAe,cAAc;;AAE7B,MAAM,iCAAa;AACnB,wBAAwB,qCAAiB;AACzC,wBAAwB,qCAAiB;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;ACpC2C;;AAEpC;AACP,eAAe,8BAAU,4BAA4B,iBAAiB;;AAEtE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B;AAC5B;;AAEA;AACA;AACA;;AAEA;AACA;;;ACrCO;;AAEP;AACA;AACA;;AAEA;AACA;;;;ACNoD;AACZ;;;AAGjC;AACP,iBAAiB,cAAc,4BAA4B,gBAAgB;AAC3E,QAAQ,0DAA0B;AAClC;AACA;AACA;AACA,aAAa,sEAAgC,GAAG,0DAA0D;AAC1G;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACrCoD;;AAE7C;AACP,eAAe,cAAc,4BAA4B,gBAAgB;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;;AC5BwC;;AAEjC;;AAEP,QAAQ,0DAA0B;AAClC,EAAE,oEAA+B;;AAEjC;AACA;;;ACRoD;;AAE7C;AACP,eAAe,cAAc,cAAc,cAAc;;AAEzD,wDAAwD,wCAAwC;AAChG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AC9BoD;;AAE7C;AACP;AACA;AACA;AACA;;AAEA,eAAe,cAAc;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;;;AC7BoD;;AAE7C;;AAEP,eAAe,cAAc,cAAc,eAAe;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;;;ACzBoD;;AAE7C;;AAEP,eAAe,cAAc,cAAc,eAAe;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;;;ACzB+C;;AAExC;AACP;AACA,eAAe,kCAAc,4BAA4B,gBAAgB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,yBAAyB,cAAc;AACvC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;ACvCoD;;AAE7C;AACP,eAAe,cAAc,4BAA4B,gBAAgB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;;AC5CsH;;AAEtH;AAC+C;AAC4B;AACV;AACR;AACA;AACc;AAChB;AACQ;AACE;AACV;AACU;AACE;AAChB;AACU;AACQ;AACU;AACZ;AACX;AACL;AACM;AACmB;AACvB;AACM;AACsB;AAC1B;AACI;AACC;AACS;AAChB;AACI;AACE;AACA;AACJ;AACoB;AACZ;AACV;AACQ;AACN;AACkB;AACR;AACe;AACjB;AACA;AACN;AACE;AACd;AACoB;AACR;AACI;AACI;AACJ;AACA;AACd;AACoB;AACM;AACd;AACU;AACd;AACA;AACY;AACZ;AACgB;AACV;AACY;AACJ;AACU;AACxB;AACW;AACW;AACZ;AACV;AACU;AACM;AACJ;AACN;AACU;AACA;AACR;AACJ;AACkB;AACd;AACA;AACoB;AACR;AACpB;AACW;AACX;;AAEhD;AACP,IAAI,qCAAqC;AACzC;AACA,SAAS,8BAAU,oBAAoB,oBAAoB;AAC3D;;AAEA;AACA;AACA;;AAEA,aAAa,yCAAqB;;AAElC;AACA,qBAAqB,eAAe;AACpC;AACA,IAAI;AACJ,qBAAqB,gBAAgB;AACrC;AACA;;AAEA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,iBAAiB,+BAA+B;AAChD;AACA;AACA;AACA,iBAAiB,4BAA4B;AAC7C;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,iBAAiB,uCAAmB;AACpC;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,iBAAiB,0BAA0B;AAC3C;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA,uBAAuB,4CAAmB;AAC1C;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA,iBAAiB,8CAAoB;AACrC;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA,uCAAuC,WAAW;AAClD;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,iBAAiB,uCAAmB;AACpC;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,eAAe;AAC/C;AACA;AACA;AACA,iBAAiB,uCAAmB;AACpC;AACA;AACA;AACA,iBAAiB,0CAAkB;AACnC;AACA;AACA;AACA,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACO;AACP;;AAEA;;AAEA;AACA,eAAe,iCAAa;;AAE5B;AACA;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA,0BAA0B,oBAAoB;AAC9C;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,iBAAiB,6BAA6B;AAC9C;AACA;AACA;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA,iBAAiB,0CAAkB;AACnC;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,mCAAe;AAC1B;;AAEA;AACA;AACA;;AAEA,SAAS,mCAAe;AACxB;;;;;;;;;;;;;;;;;;;;;AC5hB+C;;AAExC;AACP;AACA;AACA;AACA;AACA,iBAAiB,kCAAc,UAAU,UAAU;AACnD;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACrB+C;;AAExC;AACP,eAAe,kCAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;AC1B+C;;AAExC;AACP,eAAe,kCAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;;;ACf+C;;AAExC;AACP,eAAe,kCAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACpB+C;;AAExC;AACP,eAAe,kCAAc;AAC7B;AACA;AACA;AACA;AACA,kBAAkB,wCAAwC;AAC1D;AACA,KAAK;AACL;;AAEA;AACA;AACA;;;;ACfgE;;AAEzD;AACP,eAAe,kCAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA,aAAa,mCAAe;AAC5B;AACA;;;;;;;ACrBuE;AACnB;AACZ;;AAExC;AACA,2DAA2D,+BAA+B;AAC1F,yDAAyD,uDAAuD;AAChH,wDAAwD,wCAAwC;;AAEhG,eAAe,sCAAc;AAC7B,EAAE,yCAAqB;AACvB;AACA;AACA;;AAEA;AACA,aAAa,mCAAe;AAC5B;AACA;;AAEA;AACA,eAAe,sCAAc;AAC7B;AACA;AACA;AACA;AACA,qJAAqJ,cAAc;AACnK;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa,mCAAe;AAC5B;AACA;;AAEA;AACA,eAAe,sCAAc;;AAE7B,QAAQ,0DAA0B;AAClC,sBAAsB,gEAA6B,GAAG,uEAAuE;AAC7H;AACA;AACA;AACA,aAAa,mCAAe;AAC5B;AACA;;AAEO;AACP;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;;AC5DuE;AAC/B;AACyB;;;AAG1D;AACP;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,MAAM,yCAAqB;;AAE3B;AACA;AACA;;AAEA,YAAY,0DAA0B;AACtC,MAAM,oEAA+B;;AAErC;AACA,MAAM;AACN,mBAAmB,wBAAwB;AAC3C;AACA,QAAQ,0EAAkC,GAAG,iFAAiF;AAC9H;AACA;AACA;;AAEA,YAAY,0DAA0B;;AAEtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;AACN,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA,2CAA2C,+BAA+B,gIAAgI,WAAW;AACrN;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,mCAAe;AAC1B;;AAEA;AACA;;;;ACnEuE;AACN;;;AAG1D;AACP;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,MAAM,yCAAqB;;AAE3B;AACA;AACA;;AAEA;AACA;AACA,aAAa,mCAAe;AAC5B;AACA;;AAEA;AACA;;;;AC7BsD;AACW;;;AAG1D;AACP;;AAEA,eAAe,wBAAwB,cAAc,eAAe;AACpE,EAAE,yCAAqB;AACvB;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,4BAA4B;AAC5B;;AAEA;AACA;;AAEA;AACA;;;;;;;;AC9BwC;;AAEjC;AACP,QAAQ,0DAA0B;AAClC,EAAE,oEAA+B;;AAEjC,yDAAyD,uDAAuD;AAChH,wDAAwD,wCAAwC;;AAEhG;AACA;;;ACVgD;AACR;AACyB;;;AAG1D;AACP;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA,QAAQ,0EAAkC,GAAG,qFAAqF;AAClI;AACA;AACA;AACA,YAAY,0DAA0B;;AAEtC;AACA;AACA,WAAW,mCAAe;AAC1B;;AAEA;AACA;;;ACtBwC;AACQ;;AAEzC;AACP,yDAAyD,yDAAyD;AAClH,wDAAwD,uCAAuC;AAC/F,yDAAyD,qCAAqC;AAC9F;AACA;;AAEA,QAAQ,0DAA0B;AAClC,EAAE,oEAA+B;;AAEjC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,aAAa,mCAAe;AAC5B;AACA;;;ACxBwC;AACG;;AAEpC;;AAEP;AACA;;AAEA,QAAQ,0DAA0B;;AAElC,eAAe,8BAAU,4BAA4B,iCAAiC;AACtF;AACA,IAAI,0EAAkC,GAAG,oGAAoG;AAC7I,IAAI,0EAAkC,GAAG,iGAAiG;AAC1I;AACA;;AAEA;AACA;;;;;AClBuE;AACN;;;AAG1D;AACP;AACA;AACA,mBAAmB,wBAAwB;AAC3C,MAAM,yCAAqB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA,aAAa,mCAAe;AAC5B;AACA;;AAEA;AACA;;;;AClCwC;AACQ;;AAEzC;AACP,yDAAyD,yDAAyD;AAClH,wDAAwD,uCAAuC;AAC/F,yDAAyD,qCAAqC;AAC9F;AACA;;AAEA,QAAQ,0DAA0B;AAClC,EAAE,oEAA+B;;AAEjC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,aAAa,mCAAe;AAC5B;AACA;;;ACxBwC;AACG;;AAEpC;AACP,eAAe,8BAAU,4BAA4B,iCAAiC;AACtF,QAAQ,0DAA0B;AAClC,EAAE,oEAA+B;AACjC;AACA;AACA;;;ACTA;AACwH;AAC3D;;AAEM;AACM;AACiC;AAC7B;AACY;AACV;AACd;AAC0B;AACvB;AACR;AACkB;AACb;AACF;AACQ;AACC;AACK;AACA;AAC3C;AACoC;AACuB;AACxB;;AAE9D;AACP,IAAI,qCAAqC;AACzC;AACA,SAAS,8BAAU,oBAAoB,oBAAoB;AAC3D;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,aAAa,QAAQ,SAAS;AACvE;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd;AACA;AACO;AACP;;AAEA;;AAEA,eAAe,iCAAa;AAC5B;AACA,IAAI,iCAAY,gCAAgC,SAAS;AACzD;AACA;AACA;AACA;AACA,2DAA2D,WAAW,KAAK,SAAS;AACpF,gCAAgC,sDAA2B;AAC3D;AACA;AACA;;AAEA,aAAa,mCAAe;AAC5B;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,WAAW,yCAAqB;AAChC;AACA,6DAA6D,uBAAuB;AACpF,0DAA0D,yBAAyB;AACnF,yDAAyD,+BAA+B;AACxF,mDAAmD,0BAA0B;AAC7E,mDAAmD,0CAAkB;AACrE,8CAA8C,8CAAoB;AAClE;AACA,aAAa,yBAAyB;AACtC,sDAAsD,gBAAgB;AACtE,4DAA4D,4CAAmB;AAC/E,4DAA4D,qBAAqB;AACjF,uDAAuD,iBAAiB;;AAExE;AACA;AACA,8BAA8B,iDAAsB;AACpD;AACA;AACA;;AAEA,WAAW,mCAAe;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,mCAAmC,qBAAqB;AACxD,UAAU;AACV,mCAAmC,6BAA6B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,qBAAqB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,yCAAqB;AAC/B,wBAAwB,mCAAe;AACvC;AACA,OAAO;AACP;AACA;AACA;AACA,YAAY,kBAAkB;AAC9B;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B;AACA;AACA;AACA;AACA;AACA,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;AACA;AACA,kBAAkB,yBAAyB;AAC3C;AACA;AACA;AACA;AACA;AACA,mCAAmC,qBAAqB;AACxD;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;AC5MwC;AACM;AACQ;;AAE/C;AACP,iBAAiB,eAAe,cAAc,eAAe;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;;AAEA,2BAA2B,eAAe,cAAc,eAAe;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM,iCAAa;AACnB,UAAU,0DAA0B;AACpC,IAAI,oEAA+B;AACnC;AACA;;AAEA;AACA;;;;;ACjEsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;;ACfwC;AACM;AACQ;;AAE/C;AACP,eAAe,eAAe;;AAE9B,MAAM,iCAAa;AACnB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,+BAA+B;AAC/B,UAAU,0DAA0B;AACpC,wBAAwB,gEAA6B,GAAG,kFAAkF;AAC1I,IAAI,SAAS,iCAAa;AAC1B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;;AC3BsD;;AAE/C;AACP,gCAAgC,eAAe;AAC/C;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,6BAA6B,eAAe;AAC5C;AACA,MAAM,iGAAiG;AACvG,MAAM,yFAAyF;AAC/F,MAAM,qFAAqF;AAC3F,MAAM;AACN;AACA;;AAEA;AACA;;;ACtBsD;AACA;;AAE/C;AACP,eAAe,eAAe,cAAc,eAAe;AAC3D,EAAE,yCAAqB;AACvB;;AAEA;AACA;;;;;ACT6E;;AAEtE;AACP,sBAAsB,gCAAiB;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AC3C6E;;AAEtE;AACP,sBAAsB,gCAAiB;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AChD6E;;AAEtE;AACP,sBAAsB,gCAAiB;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,6BAA6B;;AAE7B;;AAEA;;;AC7CsD;AACd;;AAEjC;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA,QAAQ,0DAA0B;AAClC;;AAEA;AACA;;;ACtBA;AACsD;AACd;AACM;;AAEvC;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM,iCAAa;AACnB,UAAU,0DAA0B;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gEAA6B,GAAG,uEAAuE;AAC/H;AACA;AACA,8BAA8B;AAC9B;AACA;;AAEA;AACA;;AAEA;;;AClDsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA,MAAM,uGAAuG;AAC7G,MAAM,uGAAuG;AAC7G,MAAM,uGAAuG;AAC7G,MAAM,uGAAuG;AAC7G,MAAM;AACN;AACA;;AAEA;AACA;;;ACdsD;AACd;;AAEjC;AACP,eAAe,eAAe;AAC9B,QAAQ,0DAA0B;AAClC,sBAAsB,gEAA6B,GAAG,oFAAoF;AAC1I;;AAEA;AACA;;;ACVsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;ACrBsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM;AACN;AACA;;AAEA;AACA;;;AChBsD;AACd;AAC6B;;AAE9D;AACP,OAAO,iCAAa,4BAA4B,iCAAa;AAC7D,iBAAiB,eAAe,cAAc,eAAe;AAC7D,IAAI,yCAAqB;AACzB;;AAEA;AACA;;AAEA,eAAe,eAAe;AAC9B,QAAQ,0DAA0B,sBAAsB,kGAA8C;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gEAA6B,GAAG,iCAAiC,kGAA8C,EAAE;AACvI,EAAE,oEAA+B,sBAAsB,kGAA8C;;AAErG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mCAAmC;AAChD,mBAAmB,mCAAmC;AACtD,aAAa,6BAA6B;AAC1C;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;;AAEA;;;AClE0E;AACpB;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA,MAAM,wGAAwG;AAC9G,MAAM,uGAAuG;AAC7G,MAAM,uGAAuG;AAC7G,MAAM,uGAAuG;AAC7G,MAAM,uGAAuG;AAC7G;AACA;;AAEA,MAAM,iCAAa;AACnB,wBAAwB,8CAA0B;AAClD;;AAEA;AACA;;;ACnBsD;AACd;AAC6B;;AAE9D;AACP,MAAM,iCAAa;AACnB,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,UAAU,0DAA0B;AACpC,wBAAwB,gEAA6B,GAAG,uDAAuD;AAC/G,IAAI,oEAA+B;AACnC;AACA,IAAI;AACJ,0BAA0B,eAAe;AACzC,IAAI,yCAAqB;AACzB;AACA,yBAAyB,eAAe;AACxC,IAAI,yCAAqB;AACzB;AACA;;;AAGA;AACA;;;AC9B0E;AACpB;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM,iCAAa;AACnB,wBAAwB,8CAA0B;AAClD;;AAEA;;AAEA;AACA;;;ACrBwC;;AAEjC;AACP,6BAA6B;AAC7B;AACA,4BAA4B;AAC5B,QAAQ,0DAA0B;AAClC,EAAE,oEAA+B;AACjC;AACA;;;ACTwC;AACc;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA,aAAa,sEAAgC,GAAG,6DAA6D;AAC7G;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA,QAAQ,0DAA0B;AAClC,EAAE,oEAA+B;AACjC;AACA;;;AC7BsD;AACd;;AAEjC;AACP,eAAe,eAAe;AAC9B,sBAAsB,gEAA6B,GAAG,+EAA+E;AACrI;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAA0B;AAClC,EAAE,oEAA+B;;AAEjC;AACA;;;ACfsD;AACA;;AAE/C;AACP,eAAe,eAAe,cAAc,eAAe;AAC3D,EAAE,yCAAqB;AACvB;;AAEA;AACA;;;ACT8C;AACQ;AACtD;;AAEO;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,MAAM,iCAAa;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AChCwC;;AAEjC;AACP,QAAQ,0DAA0B;AAClC,EAAE,oEAA+B;;AAEjC;AACA;;;ACPsD;AACd;AACM;;AAEvC;AACP;AACA,OAAO,iCAAa,4BAA4B,iCAAa;;AAE7D,QAAQ,0DAA0B,sBAAsB,gHAAqD;;AAE7G,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,iBAAiB,eAAe,+MAA+M,mCAAmC;AAClR;AACA,KAAK;AACL;AACA,sBAAsB,gEAA6B,GAAG,6DAA6D,gHAAqD,EAAE;AAC1K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,oEAA+B,sBAAsB,gHAAqD;AAC5G;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;;;ACpDwC;AAC6B;AACf;;AAE/C;;AAEP,MAAM,iCAAa;AACnB,IAAI,oEAA+B;AACnC,+BAA+B;AAC/B,UAAU,0DAA0B;AACpC,IAAI;AACJ,iBAAiB,eAAe,cAAc,eAAe;AAC7D,IAAI,yCAAqB;AACzB;;AAEA;;AAEA;AACA;;;AClBwC;AACM;AACQ;;AAE/C;AACP,eAAe,eAAe;;AAE9B,MAAM,iCAAa;AACnB,UAAU,0DAA0B;AACpC,IAAI,oEAA+B;AACnC,wBAAwB,gEAA6B,GAAG,6CAA6C;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;ACtBsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AChBsD;AACd;;AAEjC;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,QAAQ,0DAA0B;AAClC,sBAAsB,gEAA6B,GAAG,+CAA+C;AACrG;;AAEA;AACA;;;ACjBsD;AACd;AAC6B;;AAE9D;AACP,eAAe,eAAe;AAC9B,EAAE,yCAAqB;;AAEvB,MAAM,iCAAa;AACnB;AACA,UAAU,0DAA0B;AACpC,wBAAwB,gEAA6B,GAAG,+CAA+C;AACvG;AACA;;AAEA;AACA;;;AChBsD;AACd;AACM;;AAEvC;AACP;AACA,OAAO,iCAAa;;AAEpB,QAAQ,0DAA0B,sBAAsB,gHAAqD;;AAE7G,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gEAA6B,GAAG,iCAAiC,gHAAqD,EAAE;AAC9I,EAAE,oEAA+B,sBAAsB,gHAAqD;;AAE5G;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;;ACrDqE;AACf;;AAE/C;AACP,eAAe,eAAe,cAAc,eAAe;AAC3D,EAAE,yCAAqB;;AAEvB,MAAM,iCAAa;AACnB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;;AClBiE;AACX;AACd;;AAEjC;AACP,eAAe,eAAe;;AAE9B,MAAM,iCAAa;AACnB,wBAAwB,qCAAiB;AACzC,wBAAwB,qCAAiB;AACzC;AACA;AACA;;AAEA,sBAAsB,gEAA6B,GAAG,8EAA8E;AACpI,6BAA6B;AAC7B;AACA;;AAEA,QAAQ,0DAA0B;AAClC;AACA;;;ACrB6E;;AAEtE;AACP,sBAAsB,gCAAiB;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;ACjDsD;AACd;AACM;;AAEvC;AACP,yFAAyF,gBAAgB;AACzG;AACA;;AAEA,OAAO,iCAAa;;AAEpB,eAAe,eAAe;AAC9B;AACA;AACA,QAAQ,0DAA0B;AAClC,sBAAsB,gEAA6B,GAAG,8CAA8C;AACpG;AACA,EAAE,oEAA+B;AACjC;AACA;;;ACnBsD;AACd;AACyB;;AAE1D;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,MAAM,iCAAa;AACnB;AACA,MAAM,qCAAiB;AACvB,MAAM,qCAAiB;AACvB;AACA,IAAI,SAAS,iCAAa;AAC1B,UAAU,0DAA0B;AACpC,wBAAwB,gEAA6B,GAAG,gDAAgD;AACxG;;AAEA;;AAEA;AACA;;;AC1BsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA,MAAM,+GAA+G;AACrH,MAAM;AACN;AACA;AACA,6BAA6B;;AAE7B;AACA;;;ACZsD;AACd;;AAEjC;AACP,eAAe,eAAe;AAC9B,QAAQ,0DAA0B;AAClC,sBAAsB,gEAA6B,GAAG,gDAAgD;AACtG;;AAEA;AACA;;;ACVsD;AACA;;AAE/C;AACP,eAAe,eAAe,cAAc,eAAe;AAC3D,EAAE,yCAAqB;AACvB;;AAEA;AACA;;;ACTsD;AACA;;AAE/C;AACP,eAAe,eAAe,cAAc,eAAe;AAC3D,EAAE,yCAAqB;AACvB;;AAEA;AACA;;;ACTsD;AACA;;AAE/C;AACP,eAAe,eAAe,cAAc,eAAe;AAC3D,EAAE,yCAAqB;AACvB;;AAEA;AACA;;;;;ACTuC;AACe;;AAE/C;AACP;AACA;;AAEA;AACA,MAAM,gEAAgE;AACtE,MAAM,kFAAkF;AACxF,MAAM,2EAA2E;AACjF,MAAM,uEAAuE;AAC7E,MAAM,0EAA0E;AAChF;;AAEA;AACA,MAAM,+BAA+B;AACrC,MAAM,4BAA4B;AAClC,MAAM,+BAA+B;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA,mBAAmB,yCAAqB,cAAc,cAAc,IAAI,0CAAgB,gBAAgB,GAAG,QAAQ;AACnH;AACA,2EAA2E,wBAAwB;AACnG;AACA;AACA;AACA;AACA,oBAAoB,KAAK,SAAS,GAAG,0CAAgB,eAAe;AACpE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB,QAAQ,KAAK,aAAa,OAAO,aAAa;AACrE;AACA;AACA;AACA,mDAAmD,SAAS;AAC5D;AACA;AACA;;AAEA;AACA;;;AChEsD;AACd;;AAEjC;AACP,eAAe,eAAe;AAC9B;AACA;AACA,QAAQ,0DAA0B;AAClC,sBAAsB,gEAA6B,GAAG,oDAAoD;AAC1G,EAAE,oEAA+B;AACjC;;AAEA;AACA;;;ACbsD;AACd;AACM;;AAEvC;;AAEP,iGAAiG,sBAAsB;AACvH;AACA;;AAEA,OAAO,iCAAa;;AAEpB,eAAe,eAAe;AAC9B,QAAQ,0DAA0B;AAClC,sBAAsB,gEAA6B,GAAG,gEAAgE;AACtH;;AAEA;AACA;;;AClBsD;AACd;AAC6B;;AAE9D;AACP,MAAM,iCAAa;AACnB,iBAAiB,eAAe;AAChC,UAAU,0DAA0B;AACpC;AACA,MAAM,0EAAkC,GAAG,+FAA+F;AAC1I;AACA;AACA;;AAEA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,IAAI;AACJ,iBAAiB,eAAe,cAAc,eAAe;AAC7D,IAAI,yCAAqB;AACzB;AACA;;AAEA;AACA;;;AC3BsD;AACA;;AAE/C;AACP,eAAe,eAAe,cAAc,eAAe;AAC3D,EAAE,yCAAqB;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,4HAA4H,cAAc;AAC1I;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;AC7BsD;AACd;;AAEjC;AACP,eAAe,eAAe;AAC9B,QAAQ,0DAA0B;AAClC;AACA,sBAAsB,gEAA6B,GAAG,6CAA6C;AACnG;AACA;AACA;;AAEA;AACA;;;ACbsD;AACd;AACkC;;AAEnE;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,UAAU,0DAA0B;AACpC,wBAAwB,gEAA6B,GAAG,gDAAgD;AACxG;;AAEA,MAAM,iCAAa;AACnB,wBAAwB,8CAA0B;AAClD;;AAEA;;AAEA;AACA;;;ACzBsD;AACA;;AAE/C;AACP,eAAe,eAAe,cAAc,eAAe;AAC3D,EAAE,yCAAqB;AACvB;;AAEA;AACA;;;ACTsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA,MAAM,uGAAuG;AAC7G,MAAM,uGAAuG;AAC7G,MAAM;AACN;AACA;;AAEA;AACA;;;ACZsD;AACd;AACM;;AAEvC;AACP,MAAM,iCAAa;AACnB,iBAAiB,eAAe;AAChC,UAAU,0DAA0B;AACpC;AACA,MAAM,0EAAkC,GAAG,wEAAwE;AACnH;AACA,IAAI,oEAA+B;;AAEnC;AACA;;AAEA;AACA,+BAA+B;AAC/B;AACA;;AAEA;AACA,IAAI;AACJ,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;;ACzCsD;AACd;;AAEjC;AACP,eAAe,eAAe;AAC9B;AACA,IAAI,gEAA6B,GAAG,4EAA4E;AAChH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,EAAE,oEAA+B;AACjC,QAAQ,0DAA0B;AAClC;AACA;;;AC/BsD;AACd;AAC6B;;AAE9D;AACP,eAAe,eAAe;AAC9B,EAAE,yCAAqB;;AAEvB,MAAM,iCAAa;AACnB,UAAU,0DAA0B;AACpC;AACA,wBAAwB,gEAA6B,GAAG,kDAAkD;AAC1G;AACA;;AAEA;AACA;;;AChBsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;;ACbsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA,MAAM,+GAA+G;AACrH,MAAM,+GAA+G;AACrH;AACA;AACA;AACA;;AAEA;AACA;;;ACbsD;AACA;;AAE/C;AACP,eAAe,eAAe,cAAc,eAAe;AAC3D,EAAE,yCAAqB;AACvB;;AAEA;AACA;;;ACTsD;AACd;AAC6B;;AAE9D;;AAEP,OAAO,iCAAa,4BAA4B,iCAAa;AAC7D,iBAAiB,eAAe,cAAc,eAAe;AAC7D,IAAI,yCAAqB;AACzB;;AAEA;AACA;;AAEA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA,+BAA+B,cAAc,uGAAuG,sHAAwD,CAAC;AAC7M;AACA,KAAK;AACL;;AAEA,QAAQ,0DAA0B,sBAAsB,sHAAwD;AAChH,EAAE,oEAA+B,sBAAsB,sHAAwD;AAC/G,sBAAsB,gEAA6B,GAAG,iFAAiF,sHAAwD,EAAE;;AAEjM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;ACnEsD;AACA;;AAE/C;AACP,eAAe,eAAe;AAC9B,EAAE,yCAAqB;AACvB;;AAEA;AACA;;;ACTwC;;AAEjC;AACP,6BAA6B;AAC7B;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,EAAE,oEAA+B;AACjC,QAAQ,0DAA0B;AAClC;AACA;;;ACZsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;ACvCsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;ACtBsD;AACd;;AAEjC;AACP,eAAe,eAAe;;AAE9B,QAAQ,0DAA0B;AAClC;AACA,IAAI,0EAAkC,GAAG,4FAA4F;AACrI;AACA;AACA;;AAEA;AACA,6BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;;;;;ACpBsD;AACd;AACM;;AAEvC;AACP,eAAe,eAAe;AAC9B;AACA,MAAM,sGAAsG;AAC5G,MAAM,0GAA0G;AAChH,MAAM,wGAAwG;AAC9G;AACA,MAAM,iCAAa;AACnB,UAAU,0DAA0B;AACpC,wBAAwB,gEAA6B,GAAG,sFAAsF;AAC9I;AACA;;AAEA;AACA;;;AClBsD;AACd;AACM;;AAEvC;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,MAAM,iCAAa;AACnB;AACA;AACA;AACA;AACA,qFAAqF,eAAe;AACpG;AACA,OAAO;AACP;AACA,UAAU,0DAA0B;AACpC,wBAAwB,gEAA6B,GAAG,6CAA6C;AACrG;AACA;AACA;AACA;AACA;AACA;;;AC/BsD;AACd;;AAExC;AACA;AACO;AACP,eAAe,eAAe;;AAE9B,QAAQ,0DAA0B;AAClC,EAAE,oEAA+B;AACjC;;AAEA;AACA;AACA;;;ACdsD;AACd;AAC6B;;AAE9D;AACP,eAAe,eAAe,cAAc,eAAe;AAC3D,EAAE,yCAAqB;;AAEvB,MAAM,iCAAa;AACnB;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,UAAU,0DAA0B;AACpC,wBAAwB,gEAA6B,GAAG,qDAAqD;AAC7G;AACA;;AAEA,oBAAoB,eAAe,cAAc,eAAe;AAChE,EAAE,yCAAqB;AACvB;;AAEA;AACA;;;AC1BqE;AACf;;AAE/C;AACP,eAAe,eAAe,cAAc,eAAe;AAC3D,EAAE,yCAAqB;;AAEvB,MAAM,iCAAa;AACnB;AACA;AACA;AACA,sBAAsB,eAAe;AACrC;AACA,KAAK;AACL;AACA;;AAEA;AACA;;;AClBqE;AACf;;AAE/C;AACP,eAAe,eAAe,cAAc,eAAe;AAC3D,EAAE,yCAAqB;;AAEvB,MAAM,iCAAa;AACnB;AACA;AACA;AACA,sBAAsB,eAAe;AACrC;AACA,KAAK;AACL;AACA;;AAEA;AACA;;;AClBkD;AACI;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,wBAAwB,qCAAiB;AACzC,wBAAwB,qCAAiB;AACzC,wBAAwB,qCAAiB;AACzC,6BAA6B,8CAA8C;AAC3E,wBAAwB,qCAAiB;AACzC;;AAEA;;AAEA;AACA;;;AC/BsD;AACd;;AAExC;AACA;AACO;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,0BAA0B,eAAe;AACzC;AACA;AACA,WAAW,sEAAgC,GAAG,2DAA2D;AACzG;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA,QAAQ,0DAA0B;AAClC;;AAEA;AACA;;;AClCqE;AACf;;AAE/C;AACP,MAAM,iCAAa;AACnB,uCAAuC,eAAe,cAAc,eAAe;AACnF,IAAI,yCAAqB;AACzB;;AAEA,6CAA6C,eAAe,cAAc,eAAe;AACzF,IAAI,yCAAqB;AACzB;AACA,IAAI;AACJ,iBAAiB,eAAe;AAChC,IAAI,yCAAqB;AACzB,IAAI,yCAAqB;AACzB;AACA;;AAEA;AACA;;;ACpBwC;;AAEjC;AACP,QAAQ,0DAA0B;AAClC,EAAE,oEAA+B;AACjC,6BAA6B;AAC7B,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACfsD;AACd;AACM;;AAEvC;AACP;AACA,OAAO,iCAAa;;AAEpB,QAAQ,0DAA0B,sBAAsB,gHAAqD;;AAE7G,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,iBAAiB,eAAe,uLAAuL,mCAAmC;AAC1P;AACA,KAAK;AACL;AACA,sBAAsB,gEAA6B,GAAG,6DAA6D,gHAAqD,EAAE;AAC1K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,oEAA+B,sBAAsB,gHAAqD;AAC5G;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;;AChDsD;AACd;AACM;;AAEvC;AACP;AACA,OAAO,iCAAa;;AAEpB,QAAQ,0DAA0B,sBAAsB,gHAAqD;;AAE7G,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,iBAAiB,eAAe,wLAAwL,mCAAmC;AAC3P;AACA,KAAK;AACL;AACA,sBAAsB,gEAA6B,GAAG,6DAA6D,gHAAqD,EAAE;AAC1K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,oEAA+B,sBAAsB,gHAAqD;AAC5G;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;;AChDsD;AACA;;AAE/C;AACP,eAAe,eAAe;AAC9B,EAAE,yCAAqB;AACvB;;AAEA;;AAEA;AACA;;;ACXsD;AACd;;AAEjC;AACP,eAAe,eAAe;;AAE9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,QAAQ,0DAA0B;AAClC,sBAAsB,gEAA6B,GAAG,uDAAuD;AAC7G;;AAEA;AACA;;;AC/BiE;AACX;;AAE/C;AACP,eAAe,eAAe;;AAE9B,MAAM,iCAAa;AACnB,wBAAwB,qCAAiB;AACzC,wBAAwB,qCAAiB;AACzC,wBAAwB,qCAAiB;AACzC,wBAAwB,qCAAiB;AACzC,6BAA6B,2CAA2C;AACxE,wBAAwB,qCAAiB;AACzC;;AAEA;AACA;;AAEA;AACA;;;ACnBsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA,MAAM,wGAAwG;AAC9G,MAAM,uGAAuG;AAC7G,MAAM,0GAA0G;AAChH,MAAM,yGAAyG;AAC/G,MAAM;AACN;AACA;;AAEA;AACA;;;ACdsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;;ACb6E;;AAEtE;AACP,sBAAsB,gCAAiB;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;AChDsD;;AAE/C;AACP;AACA,MAAM,+BAA+B;AACrC,MAAM,4BAA4B;AAClC,MAAM,+BAA+B;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA,iBAAiB,yCAAqB,cAAc,cAAc,KAAK,QAAQ;AAC/E,yEAAyE,wBAAwB;AACjG;AACA;AACA;AACA;AACA,kBAAkB,KAAK,QAAQ;AAC/B;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,iDAAiD,SAAS;AAC1D;AACA;;AAEA;AACA;;;AC3CsD;AACA;;AAE/C;AACP,eAAe,eAAe,cAAc,eAAe;AAC3D,EAAE,yCAAqB;AACvB;;AAEA;AACA;;;ACTsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AChB0E;AACpB;;AAE/C;AACP,eAAe,eAAe;;AAE9B,MAAM,iCAAa;AACnB,wBAAwB,8CAA0B;AAClD;;AAEA;;AAEA;AACA;;;ACbsD;AACd;;AAEjC;AACP,eAAe,eAAe;AAC9B,QAAQ,0DAA0B;AAClC,sBAAsB,gEAA6B,GAAG,uEAAuE;AAC7H;;AAEA;AACA;;;ACVsD;AACd;;AAEjC;AACP,eAAe,eAAe;AAC9B;AACA,QAAQ,0DAA0B;AAClC,sBAAsB,gEAA6B,GAAG,0EAA0E;AAChI;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;;;AChBsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AChBqE;AACf;;AAE/C;AACP,eAAe,eAAe;AAC9B,EAAE,yCAAqB;AACvB,MAAM,iCAAa;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,+BAA+B;AAC/B;;AAEA;;AAEA;AACA;;;ACpBO;;AAEP;;AAEA;AACA;;;ACLsD;AACd;;AAEjC;AACP,eAAe,eAAe;AAC9B,QAAQ,0DAA0B;AAClC,sBAAsB,gEAA6B,GAAG,uEAAuE;AAC7H;;AAEA;AACA;;;ACVsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;;ACbqE;AACf;;AAE/C;AACP,eAAe,eAAe,cAAc,eAAe;AAC3D,EAAE,yCAAqB;;AAEvB,MAAM,iCAAa;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;ACvBsD;AACA;;AAE/C;AACP,eAAe,eAAe,cAAc,eAAe;AAC3D,EAAE,yCAAqB;AACvB;AACA;;AAEA;AACA;;;ACVsD;AACd;;AAEjC;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA,GAAG;AACH,QAAQ,0DAA0B;AAClC,sBAAsB,gEAA6B,GAAG,uDAAuD;AAC7G;;AAEA;AACA;;;AChBsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;;ACfsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA,sBAAsB,eAAe;AACrC;AACA;AACA;AACA;;AAEA;AACA;;;ACfsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;;;ACtBsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;;;ACvB0E;AACpB;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,MAAM,iCAAa;AACnB,wBAAwB,8CAA0B;AAClD;;AAEA;;AAEA;AACA;;;ACpB0E;AACpB;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,MAAM,iCAAa;AACnB,wBAAwB,8CAA0B;AAClD;;AAEA;;AAEA;AACA;;;ACnBsD;;AAE/C;AACP;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA,iBAAiB,GAAG,cAAc;AAClC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,qBAAqB,yCAAqB,cAAc,cAAc,gCAAgC,iBAAiB;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,eAAe,yCAAqB,cAAc,cAAc;AAChE;AACA;;AAEA;AACA;;;AC7CsD;AACd;AAC6B;;AAE9D;;AAEP,OAAO,iCAAa;AACpB,iBAAiB,eAAe,cAAc,eAAe;AAC7D,IAAI,yCAAqB;AACzB;AACA;AACA;;AAEA;AACA,QAAQ,0DAA0B;;AAElC,eAAe,eAAe;AAC9B,EAAE,yCAAqB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,oEAA+B;;AAEjC;AACA;AACA,iBAAiB,yBAAyB;AAC1C,KAAK;AACL,aAAa,yBAAyB;AACtC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;;ACpEwC;AAC6B;AACf;;AAE/C;;AAEP,MAAM,iCAAa;AACnB,UAAU,0DAA0B;AACpC,IAAI,oEAA+B;AACnC,+BAA+B;AAC/B,IAAI;AACJ,iBAAiB,eAAe,cAAc,eAAe;AAC7D,IAAI,yCAAqB;AACzB;AACA;;AAEA;AACA;;;ACjBsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA,MAAM,qGAAqG;AAC3G,MAAM,4GAA4G;AAClH,MAAM;AACN;AACA;;AAEA;AACA;;;ACZsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;;ACbsD;AACd;AACM;;AAEvC;AACP;AACA,OAAO,iCAAa;;AAEpB,QAAQ,0DAA0B;;AAElC,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,sBAAsB,gEAA6B,GAAG,iDAAiD;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,oEAA+B;;AAEjC;AACA;AACA;;;ACzCsD;AACd;AACM;;AAEvC;AACP;AACA,OAAO,iCAAa;;AAEpB,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAA0B;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gEAA6B,GAAG,4GAA4G;AAClK;AACA;AACA;;AAEA,6BAA6B;AAC7B;AACA,4BAA4B;AAC5B;AACA;;AAEA;AACA;;;AClDsD;AACd;AACM;;AAEvC;AACP,OAAO,iCAAa;AACpB,eAAe,eAAe;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,0DAA0B;AAClC,EAAE,oEAA+B;;AAEjC,6BAA6B;AAC7B;AACA,4BAA4B;AAC5B;AACA;;AAEA;AACA;AACA;;;AChDsD;AACd;;AAEjC;AACP,eAAe,eAAe;AAC9B,QAAQ,0DAA0B;AAClC,sBAAsB,gEAA6B,GAAG,iFAAiF;AACvI;AACA;AACA;;AAEA,6BAA6B;AAC7B;;AAEA;AACA;;;ACfsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;;ACjCsD;AACd;AACM;;AAEvC;AACP;AACA,OAAO,iCAAa;;AAEpB,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAA0B;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gEAA6B,GAAG,iDAAiD;AACvG,EAAE,oEAA+B;;AAEjC;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;;;ACtDsD;AACA;;AAE/C;AACP,6BAA6B,eAAe,cAAc,eAAe;AACzE,EAAE,yCAAqB;AACvB;;AAEA;AACA;;;ACTO;AACP;AACA;;AAEA;AACA;;;ACLO;AACP;AACA;;AAEA;AACA;;;ACLwC;AACc;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA,aAAa,sEAAgC,GAAG,+DAA+D;AAC/G;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,EAAE,oEAA+B;AACjC,QAAQ,0DAA0B;;AAElC;AACA;;;AChCsD;AACA;;AAE/C;;AAEP,eAAe,eAAe,cAAc,eAAe;AAC3D,EAAE,yCAAqB;AACvB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;ACfwC;;AAEjC;AACP,QAAQ,0DAA0B;AAClC,EAAE,oEAA+B;;AAEjC,6BAA6B;AAC7B;AACA;;;ACRsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;;ACbsD;;AAE/C;AACP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;;ACfA;;;AAGsD;;AAE/C;;AAEP,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;;;AC3BsD;AACd;AACM;;AAEvC;AACP,eAAe,eAAe;AAC9B;AACA,MAAM,sGAAsG;AAC5G,MAAM,iGAAiG;AACvG,MAAM;AACN;;AAEA,MAAM,iCAAa;AACnB,UAAU,0DAA0B;AACpC,wBAAwB,gEAA6B,GAAG,iDAAiD;AACzG;AACA;;AAEA;AACA;;;ACnBsD;AACd;AAC6B;;AAE9D;;AAEP,OAAO,iCAAa,4BAA4B,iCAAa;AAC7D,8BAA8B,eAAe,cAAc,eAAe;AAC1E,IAAI,yCAAqB;AACzB;AACA;AACA;;AAEA;AACA,QAAQ,0DAA0B,sBAAsB,sHAAwD;;AAEhH,eAAe,eAAe;AAC9B,sBAAsB,gEAA6B,GAAG,iFAAiF,sHAAwD,EAAE;AACjM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,oEAA+B,sBAAsB,sHAAwD;;AAE/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;;ACxDsD;AACd;;AAEjC;AACP,eAAe,eAAe;;AAE9B,QAAQ,0DAA0B;AAClC,EAAE,oEAA+B;AACjC;;AAEA;AACA;;;ACXsD;AACd;;AAEjC;AACP,eAAe,eAAe,cAAc,cAAc;;AAE1D;AACA;AACA;AACA;AACA;AACA,aAAa,sEAAgC,GAAG,4DAA4D;AAC5G;AACA,KAAK;AACL;AACA;AACA;AACA,gBAAgB,mCAAmC;AACnD;AACA,KAAK;AACL;AACA;AACA;AACA,gBAAgB,mCAAmC;AACnD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,QAAQ,0DAA0B;;AAElC;AACA;;;ACzDkC;AAOZ;;AAEtB;AACkE;AACV;AACZ;AACY;AACc;AACd;AACE;AACE;AACM;AACR;AACZ;AACY;AACJ;AACQ;AACI;AAClB;AACwB;AAC1B;AACgB;AACE;AACA;AACJ;AACF;AACI;AACN;AACE;AACN;AACwB;AACpB;AACA;AACQ;AACE;AACJ;AACE;AACV;AACI;AACE;AACF;AACM;AACI;AACF;AACE;AACF;AACF;AACI;AACd;AACF;AACM;AACZ;AACY;AACA;AACA;AACI;AAClB;AACY;AACV;AACI;AAC0B;AACR;AACd;AACM;AACE;AACd;AACY;AACR;AACR;AACwB;AACR;AACF;AACJ;AACM;AACQ;AACd;AACc;AACN;AACA;AACU;AACxB;AACY;AACJ;AACF;AACM;AACM;AACV;AACI;AACJ;AACF;AACgB;AACA;AACd;AACsB;AACA;AACd;AACA;AACQ;AACd;AACA;AACU;AACV;AACR;AACc;AACN;AACN;AACJ;AACF;AACc;AACA;AACQ;AACN;AACM;AACZ;AACI;AACR;AACM;AACE;AACQ;AACZ;AACI;AACF;AACQ;AACE;AACR;AAChB;AACY;AACM;;;AAGvD;AACP,IAAI,qCAAqC;AACzC;AACA,SAAS,8BAAU,oBAAoB,oBAAoB;AAC3D;;;AAGA;AACA;AACA;;AAEA,EAAE,iCAAY,4BAA4B,KAAK;AAC/C;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA,iBAAiB,4BAAW;AAC5B;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA,iBAAiB,0BAA0B;AAC3C;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd;AACA;AACA;AACA,eAAe,iCAAa;AAC5B;AACA,aAAa,yCAAqB;;AAElC;AACA;AACA,IAAI,+BAAW;AACf;AACA;;AAEA,EAAE,iCAAY,sBAAsB,KAAK;AACzC;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA,iBAAiB,uCAAmB;AACpC;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,iBAAiB,uCAAmB;AACpC;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA,yBAAyB,eAAe;AACxC;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;;AAEA;AACA;;;AAGO;AACP;AACA;AACA;AACA;AACA,eAAe,mCAAe;AAC9B,IAAI;AACJ;AACA,IAAI,iCAAY,+BAA+B,eAAe;AAC9D;AACA;AACA;;;;;;;;;;;;ACrsBsD;;AAE/C;AACP,eAAe,2EAAe;AAC9B;AACA,MAAM,qGAAqG;AAC3G;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;ACxB6C;AACQ;;;AAGrD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEO;AACP;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2EAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA,eAAe,oEAAa;AAC5B;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;ACnFyC;AACoB;AACR;;AAE9C;AACP,2CAA2C,iFAAkB;AAC7D;AACA;AACA;AACA,kBAAkB,wBAAwB;AAC1C;AACA;AACA;;AAEA,mDAAmD,iFAAkB;AACrE;AACA,YAAY,yFAAsB;AAClC;AACA;AACA,uBAAuB,6GAAkC;;AAEzD;AACA,4BAA4B,iFAAkB;AAC9C,IAAI;AACJ,kCAAkC,8BAA8B;AAChE;AACA;;AAEA,6BAAe,4CAAkB;AACjC,wBAAwB,iFAAkB;AAC1C,6BAA6B,mGAA2B;AACxD;AACA;AACA;AACA;;;;;;;;;;;;;;;AClCkC;AACiB;AACb;AACP;;AAE/B;;AAEA;AACA;AACA,MAAM,8DAA8D;AACpE,MAAM,+DAA+D;AACrE,MAAM,gEAAgE;AACtE,MAAM,iEAAiE;AACvE,MAAM,sDAAsD;AAC5D,MAAM,wDAAwD;AAC9D,MAAM,gEAAgE;AACtE,MAAM,0DAA0D;AAChE,MAAM,yDAAyD;AAC/D,MAAM,0DAA0D;AAChE,MAAM,yDAAyD;AAC/D,MAAM,uDAAuD;AAC7D,MAAM,qDAAqD;AAC3D,MAAM,0DAA0D;AAChE,MAAM,2DAA2D;AACjE,MAAM,yDAAyD;AAC/D,MAAM,oDAAoD;AAC1D,MAAM,qDAAqD;AAC3D,MAAM,0DAA0D;AAChE,MAAM,+DAA+D;AACrE,MAAM,2DAA2D;AACjE,MAAM,oDAAoD;AAC1D,MAAM,yDAAyD;AAC/D,MAAM,0DAA0D;AAChE,MAAM,0DAA0D;AAChE,MAAM,2DAA2D;AACjE,MAAM,sDAAsD;AAC5D,MAAM,4DAA4D;AAClE,MAAM,oDAAoD;AAC1D,MAAM,qDAAqD;AAC3D,MAAM,0DAA0D;AAChE,MAAM,sDAAsD;AAC5D,MAAM,sDAAsD;AAC5D,MAAM,uDAAuD;AAC7D,MAAM,4DAA4D;AAClE,MAAM,8DAA8D;AACpE,MAAM,yDAAyD;AAC/D,MAAM,0DAA0D;AAChE,MAAM,sDAAsD;AAC5D,MAAM,uDAAuD;AAC7D,MAAM,oDAAoD;AAC1D,MAAM,sDAAsD;AAC5D,MAAM,uDAAuD;AAC7D,MAAM,0DAA0D;AAChE,MAAM,2DAA2D;AACjE,MAAM,sDAAsD;AAC5D;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,QAAQ,uEAAY,8BAA8B,MAAM;AACxD,gEAAgE,MAAM;AACtE,yDAAyD,MAAM;AAC/D;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,IAAI,uEAAY,uBAAuB,iBAAiB,gBAAgB,KAAK;AAC7E;AACA;AACA;AACA,MAAM;AACN,MAAM,uEAAY,8BAA8B,iBAAiB,MAAM,MAAM;AAC7E,8DAA8D,gBAAgB;AAC9E;AACA,yDAAyD,gBAAgB;AACzE;AACA;AACA;AACA,GAAG;;AAEH,qDAAqD;AACrD;AACA,+DAA+D,KAAK;AACpE;;AAEA;AACA;AACA,iEAAiE,KAAK;AACtE;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,MAAM,kHAAsC;AAC5C;;AAEA;;AAEA,GAAG;AACH;;AAEA;AACA;AACA;AACA,qEAAqE,4BAA4B;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,MAAM,uEAAY,mBAAmB,KAAK,cAAc,mBAAmB;AAC3E;AACA;AACA;AACA,MAAM;AACN,MAAM,uEAAY,qCAAqC,kBAAkB;AACzE;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,wBAAwB,cAAc,GAAG,eAAe;AACxD;AACA,GAAG;;AAEH;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,eAAe,QAAQ;AACvB;AACA;AACA,8BAA8B,0FAA0F,IAAI;AAC5H,YAAY,uEAAY,mCAAmC,IAAI,aAAa,iFAAkB,CAAC;AAC/F,oBAAoB,uEAAY,sCAAsC,OAAO,aAAa,iFAAkB,CAAC;AAC7G;AACA;AACA,MAAM,uEAAY,gBAAgB,GAAG,KAAK,0BAA0B;AACpE;AACA;AACA;AACA;AACA,MAAM;AACN,MAAM,qEAAW,mBAAmB,MAAM;AAC1C;AACA,wDAAwD,YAAY,GAAG,KAAK;AAC5E;AACA,QAAQ,uEAAY,+BAA+B,GAAG,8CAA8C,KAAK;AACzG;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,WAAW,6FAAwB;AACnC,+BAA+B,iFAAkB;AACjD,KAAK;AACL,GAAG;;AAEH;AACA;AACA,MAAM,qEAAW;AACjB;AACA,sBAAsB,iFAAkB;;AAExC,0CAA0C,+FAAyB;AACnE,+BAA+B,yGAA8B;;AAE7D;AACA;;AAEA,MAAM,qEAAW,aAAa,MAAM,wBAAwB,WAAW,iBAAiB,gBAAgB;AACxG,iCAAiC,eAAe;AAChD;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0FAAqB;;AAExC;AACA;AACA;;AAEA;AACA;;AAEA,oCAAoC,0FAAqB;AACzD;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,0FAAqB;AAClD;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,0FAAqB;AACvC;AACA;AACA,UAAU;AACV;AACA,kBAAkB,0FAAqB;AACvC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,wCAAwC,YAAY,GAAG,iBAAiB;AACxE;AACA,UAAU;AACV;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,eAAe;AACf,cAAc;AACd;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,mBAAmB,0FAAqB;;AAExC;AACA;AACA;AACA,oCAAoC,0FAAqB;AACzD;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;;AAGA;;AAEA,iEAAe,gBAAgB,EAAC;;;;;;;;;;;;;;;;ACxYoB;AACL;AACN;AACP;AACG;;;AAGtB;;;AAGf;AACA;;AAEA;AACA,MAAM,wFAAoB,oCAAoC,WAAW;AACzE,MAAM,uEAAY,oCAAoC,WAAW;AACjE;AACA,MAAM;AACN,MAAM,wFAAoB,sEAAsE,WAAW;AAC3G,MAAM,uEAAY,sEAAsE,WAAW;AACnG;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,gEAAS;AACpD,uBAAuB,+EAAiB;AACxC,oBAAoB,kGAA2B;AAC/C,mBAAmB;;AAEnB;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,YAAY;AACZ,YAAY,uEAAY,sDAAsD,aAAa;AAC3F;AACA;AACA,SAAS;AACT;AACA,UAAU,uEAAY;AACtB,UAAU,uEAAY;AACtB,UAAU,uEAAY;AACtB;AACA,SAAS;AACT,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;;;;;;;;;;;;;;;AClG0C;AACR;AACwB;AAC3B;;AAExB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,8EAAe;AACtC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,4BAA4B,+GAAmC;AAC/D;AACA;AACA,sBAAsB,qGAA8B;AACpD;AACA;;AAEA,iCAAiC,0EAA0E,IAAI;AAC/G,IAAI,uEAAY;AAChB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI,uEAAY;AAChB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK,IAAI,mCAAmC;;AAE5C;AACA;;AAEA;AACA;AACA;AACA,gDAAgD,0CAA0C;AAC1F;AACA;AACA;;AAEA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA,gDAAgD,oCAAoC;AACpF;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD,gDAAgD,YAAY,SAAS,qBAAqB;AAC1F;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,6HAAyC;AACrE,MAAM,uEAAY,yBAAyB,UAAU;AACrD;AACA,gDAAgD,iBAAiB;AACjE;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,2FAAwB;AACjD,yBAAyB,gFAAgB;AACzC,MAAM,uEAAY,yBAAyB,WAAW;AACtD;AACA,gDAAgD,kBAAkB;AAClE;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,mHAAoC;AACjE,MAAM,uEAAY,yBAAyB,WAAW;AACtD;AACA,gDAAgD,uCAAuC;AACvF;AACA;AACA;;AAEA;AACA;AACA,mDAAmD,yHAAuC;AAC1F;AACA,MAAM,uEAAY,8BAA8B,WAAW,cAAc,IAAI;AAC7E;AACA,gDAAgD,uCAAuC;AACvF;AACA;AACA;;AAEA,IAAI,uEAAY;;AAEhB,mDAAmD,yHAAuC;AAC1F,mCAAmC,WAAW;AAC9C,MAAM,uEAAY,mCAAmC,WAAW,cAAc,IAAI;;AAElF;AACA,gDAAgD,8FAA8F;AAC9I;AACA;AACA;;AAEA,mDAAmD,mHAAoC;AACvF,gCAAgC,WAAW;AAC3C,MAAM,uEAAY,gCAAgC,WAAW,cAAc,IAAI;AAC/E;AACA,gDAAgD,2FAA2F;AAC3I;AACA;AACA;;AAEA,mDAAmD,iHAAmC;AACtF,8BAA8B,WAAW;AACzC,MAAM,uEAAY,8BAA8B,WAAW,cAAc,IAAI;AAC7E;AACA,gDAAgD,yFAAyF;AACzI;AACA;AACA;;AAEA,6BAA6B,qHAAqC;AAClE,iCAAiC,WAAW;AAC5C,MAAM,uEAAY,4CAA4C,WAAW;AACzE;AACA,+CAA+C,6FAA6F;AAC5I;AACA;AACA;;AAEA,6BAA6B,2HAAwC;AACrE,oCAAoC,WAAW;AAC/C,MAAM,uEAAY,oCAAoC,WAAW;AACjE;AACA,+CAA+C,+FAA+F;AAC9I;AACA;AACA;;AAEA,6BAA6B,+GAAkC;AAC/D,8BAA8B,WAAW;AACzC,MAAM,uEAAY,8BAA8B,WAAW;AAC3D;AACA,+CAA+C,yFAAyF;AACxI;AACA;AACA;;AAEA,6BAA6B,yHAAuC;AACpE,mCAAmC,WAAW;AAC9C,MAAM,uEAAY,mCAAmC,WAAW;AAChE;AACA,gDAAgD,8FAA8F;AAC9I;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,MAAM,uEAAY,+BAA+B,UAAU;AAC3D;AACA,gDAAgD,iBAAiB;AACjE;AACA;AACA;AACA,oCAAoC,UAAU;AAC9C;AACA,kDAAkD,4EAA4E;AAC9H;AACA;AACA;AACA;AACA;AACA,kDAAkD,oEAAoE;AACtH;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,aAAa;AAC7C,IAAI,uEAAY,kCAAkC,aAAa,uBAAuB,gBAAgB;;AAEtG;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI,uEAAY,8BAA8B,aAAa;AAC3D,2DAA2D,SAAS,GAAG,aAAa;AACpF;AACA,IAAI,uEAAY,qCAAqC,aAAa;AAClE;AACA;AACA,kBAAkB,SAAS,GAAG,aAAa;AAC3C,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,aAAa,GAAG,aAAa;AAC1D,IAAI,uEAAY,8BAA8B,aAAa,oBAAoB,aAAa;;AAE5F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA,+BAA+B,KAAK;AACpC,IAAI,uEAAY,iCAAiC,KAAK;AACtD;AACA;AACA,IAAI,uEAAY,wCAAwC,KAAK;AAC7D;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,KAAK,GAAG,cAAc;AACrD,IAAI,uEAAY,iCAAiC,cAAc,sBAAsB,cAAc;;AAEnG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,IAAI,uEAAY,0DAA0D,UAAU;;AAEpaAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oCAAoC,YAAY;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,YAAY;AACzC,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA,0CAA0C,YAAY;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,YAAY;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,YAAY;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,YAAY;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,YAAY;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,YAAY;AAC/C,UAAU;AACV;AACA,mCAAmC,YAAY;AAC/C,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,UAAU;AAC9C,MAAM;AACN;AACA,mCAAmC,UAAU;AAC7C,MAAM;AACN;AACA,mCAAmC,aAAa;AAChD,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,8BAA8B,UAAU,GAAG,aAAa;;AAExD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,4BAA4B;;AAEzD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,YAAY;;AAE3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gFAAgB,CAAC,qGAA6B;AACnE;AACA;AACA;AACA;AACA,gCAAgC,6HAAyC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,IAAI,uEAAY,aAAa,eAAe,KAAK,cAAc;;AAE/D;AACA;AACA;AACA;AACA,QAAQ,qEAAW,WAAW,WAAW,EAAE,eAAe,YAAY,YAAY;AAClF,gCAAgC,oBAAoB;AACpD,QAAQ;AACR,QAAQ,uEAAY,2BAA2B,WAAW,QAAQ,cAAc,QAAQ,UAAU;AAClG;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sEAAsE,qBAAqB;;AAE3F,IAAI,uEAAY;;AAEhB,mDAAmD,gCAAgC;;AAEnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,IAAI,uEAAY;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,qBAAqB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,qBAAqB;AACpE;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,uEAAY;AAChB,8CAA8C,qBAAqB;AACnE;AACA;;;;;;;;;;;;;;;AC/6B0C;AACR;AACiC;AACpC;;AAE/B;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ,EAAE,iCAAiC,EAAE,0BAA0B;AAClF;AACA,4DAA4D,WAAW;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,mDAAmD;AACnD;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN,gBAAgB,oBAAoB;AACpC;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,UAAU,GAAG,YAAY;AAChD;;AAEA;;AAEA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,uEAAY;AAClB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,0DAA0D,yFAA0B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA,MAAM,yFAA0B;AAChC;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,QAAQ,yFAA0B;AAClC,QAAQ,yFAA0B;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH,uCAAuC,2CAA2C,IAAI;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,wDAAwD,sBAAsB;AAC9E,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,4BAA4B,0DAA0D,IAAI;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,kCAAkC,kFAAkF,IAAI;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,iCAAiC,kFAAkF,IAAI;AACvH,oGAAoG,oCAAoC;AACxI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,0CAA0C,kFAAkF,IAAI;AAChI,oGAAoG,oCAAoC;AACxI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,uCAAuC,kFAAkF,IAAI;AAC7H,oGAAoG,oCAAoC;AACxI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,qCAAqC,kFAAkF,IAAI;AAC3H,oGAAoG,oCAAoC;AACxI,mEAAmE,sEAAsE;AACzI,uCAAuC,yEAAyE;AAChH;AACA,iEAAiE,sEAAsE;AACvI;AACA;AACA,kFAAkF,sEAAsE;AACxJ;AACA;AACA,iFAAiF,sEAAsE;;AAEvJ,wCAAwC,sIAAsI;AAC9K;AACA,GAAG;;AAEH,mCAAmC,oMAAoM,IAAI;AAC3O,gEAAgE,oCAAoC;AACpG;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,qDAAqD;AAC3G;;AAEA,gDAAgD,2BAA2B;AAC3E;AACA,GAAG;;AAEH,8CAA8C,4KAA4K,IAAI;AAC9N;AACA,+CAA+C,4FAA4F;AAC3I;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH,2BAA2B,kIAAkI,IAAI;AACjK;AACA,+CAA+C,4FAA4F;AAC3I;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA,qCAAqC,4KAA4K,IAAI;AACrN;AACA,+CAA+C,4FAA4F;AAC3I;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA,sBAAsB,IAAI;AAC1B,sBAAsB,IAAI;AAC1B;AACA;AACA,gBAAgB,IAAI;AACpB,MAAM;AACN,4CAA4C,IAAI,uBAAuB,IAAI;AAC3E,gBAAgB,KAAK,EAAE,YAAY;AACnC;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iHAAmC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA,aAAa,IAAI;;AAEjB;AACA,GAAG;;AAEH;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,6FAA6F,uBAAuB,GAAG,YAAY;AACnI;AACA;AACA,aAAa;AACb;AACA;AACA,2FAA2F,uBAAuB,GAAG,YAAY;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,KAAK;AACjC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,MAAM,uEAAY,YAAY,WAAW,eAAe,8BAA8B;AACtF;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,IAAI,uEAAY,+BAA+B,WAAW,cAAc,OAAO;;AAE/E;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;AACA;AACA,IAAI,uEAAY,sBAAsB,WAAW,cAAc,OAAO;;AAEtE;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,uEAAY,UAAU,uBAAuB,YAAY,WAAW,cAAc,OAAO;AAC/F,MAAM;AACN,MAAM,uEAAY,wBAAwB,UAAU;AACpD;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR,iDAAiD,WAAW;AAC5D;AACA;AACA;AACA,gGAAgG,YAAY;AAC5G,MAAM;AACN,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,gFAAgB;AAC7B,MAAM;AACN,aAAa,gFAAgB;AAC7B,MAAM;AACN,aAAa,gFAAgB;AAC7B,MAAM;AACN,MAAM,uEAAY;AAClB;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,iHAAmC;AACzD,iDAAiD,QAAQ,WAAW,UAAU,eAAe,QAAQ;AACrG;;AAEA;AACA;AACA,gDAAgD,UAAU;AAC1D;;AAEA;;AAEA;AACA,gDAAgD,eAAe;AAC/D;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA,MAAM,uEAAY,eAAe,iBAAiB,EAAE,cAAc,MAAM,KAAK;AAC7E;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,QAAQ,uEAAY,yBAAyB,iBAAiB,EAAE,cAAc,MAAM,KAAK;AACzF;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR,QAAQ,uEAAY,8BAA8B,iBAAiB,EAAE,cAAc,MAAM,KAAK;AAC9F;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;;AAEA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;;;;;AC3+BS;AACQ;AACJ;AACe;AACN;AACV;AAC4B;AACtB;AACe;AACmB;;AAE9D;;AAEf,iCAAiC,4DAA4D,gCAAgC,IAAI;AACjI;AACA;AACA;AACA;;AAEA,sBAAsB,yGAAkC;AACxD,gCAAgC,eAAe;AAC/C;AACA;;AAEA;;AAEA,sEAAsE,iFAAkB;AACxF;;AAEA,mCAAmC;AACnC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kCAAkC,yBAAyB;AAC3D;AACA;AACA,4DAA4D,KAAK;AACjE,+DAA+D,KAAK;AACpE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS,qIAA4C;AACrD;AACA,iCAAiC,WAAW,MAAM,kBAAkB;AACpE;AACA;AACA;;AAEA;AACA,IAAI,yHAAsC;AAC1C;AACA,KAAK;AACL;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iHAAmC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM,oHAAoH;AAC1H;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU,sGAA8B,uCAAuC;;AAE/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,2BAA2B,uGAA6B;AACxD,oBAAoB,iGAA8B;AAClD;AACA,2CAA2C,oBAAoB;;AAE/D;AACA;AACA;AACA;AACA,6BAA6B,4FAAyB;AACtD;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,qCAAqC;AACrC;AACA;AACA,OAAO;AACP,2BAA2B,MAAM;;AAEjC;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,uEAAY,QAAQ,WAAW;;AAEnC;AACA;;AAEA;AACA;AACA,oCAAoC,mFAAoB;AACxD;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;;AAGA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,sBAAsB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,UAAU,uEAAY,mBAAmB,UAAU,KAAK,WAAW;AACnE;AACA;;AAEA;AACA;AACA;AACA,MAAM,uEAAY,SAAS,WAAW,oBAAoB,eAAe;AACzE;AACA,IAAI,wFAAoB,aAAa,UAAU;AAC/C,IAAI,uEAAY,YAAY,WAAW;AACvC;AACA;;AAEA;AACA;AACA,8FAA8F,iBAAiB;AAC/G,+FAA+F,iBAAiB;AAChH;AACA,IAAI,wFAAoB,aAAa,iBAAiB;AACtD,IAAI,uEAAY,aAAa,iBAAiB;;AAE9C,qDAAqD,kDAAkD;AACvG,wDAAwD,+DAA+D;AACvH;AACA;;AAEA;AACA;AACA,IAAI,wFAAoB,4BAA4B,iBAAiB;AACrE,IAAI,uEAAY,4BAA4B,iBAAiB;AAC7D;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,qEAAW,uBAAuB,WAAW,OAAO,mBAAmB,KAAK,UAAU;AAClG;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,uEAAY,qCAAqC,WAAW,sBAAsB,uBAAuB;;AAE7G;AACA,uCAAuC,oDAAoD;AAC3F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,IAAI,wFAAoB,0BAA0B,mBAAmB,EAAE,WAAW;;AAElF;AACA;AACA,MAAM,uEAAY,YAAY,gBAAgB,WAAW,WAAW;AACpE;;AAEA;AACA;AACA,IAAI,uEAAY,YAAY,sBAAsB,MAAM,WAAW;AACnE,IAAI,wFAAoB;;AAExB;AACA;AACA;;AAEA;AACA,MAAM;AACN,sBAAsB,OAAO;AAC7B,iDAAiD;AACjD;;AAEA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B,4FAAyB;AACtD;AACA,UAAU;AACV,+BAA+B,gGAA2B;AAC1D;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6HAAwC;AAChD;AACA,SAAS;;AAET;AACA,OAAO;AACP,mEAAmE,4BAA4B;AAC/F;AACA;AACA,IAAI,uEAAY,eAAe,WAAW;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,uEAAY,eAAe,WAAW;AAC1C;AACA;;;AAGA;AACA;AACA,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB;AACA;AACA,MAAM;AACN,4EAA4E;AAC5E;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qCAAqC,iFAAkB;;AAEvD;AACA,MAAM,uEAAY;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,qFAAoB;AAC/C;;AAEA;AACA,MAAM;AACN,4GAA4G;AAC5G;AACA,2DAA2D,sDAAsD;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+EAAgB;AAC1C;AACA;AACA,gCAAgC,2IAA4C,GAAG,oDAAoD;AACnI;AACA,IAAI,wFAAoB,cAAc,0BAA0B,EAAE,MAAM;AACxE,IAAI,uEAAY,cAAc,0BAA0B,EAAE,MAAM;AAChE;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACpfsC;;AAEtC;;AAEA;AACA,6BAA6B,iFAAkB;AAC/C,GAAG;;AAEH;AACA,sBAAsB,iFAAkB,kBAAkB,6KAA6D;AACvH,sBAAsB,iFAAkB;AACxC,GAAG;;AAEH;AACA,iFAAiF,iFAAkB;AACnG,gBAAgB,mFAAmB;AACnC,GAAG;;AAEH;AACA,0DAA0D,iFAAkB;AAC5E,gBAAgB,uFAAqB;AACrC,GAAG;;AAEH;AACA,+GAA+G,iFAAkB;AACjI,WAAW,iFAAkB;AAC7B,GAAG;;;AAGH;;AAEA,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;;;;AC/BO;AACG;AACmB;AACf;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGO;AACP;AACA,UAAU,6GAAoC;AAC9C;AACA;;;AAGA;AACA,2EAA2E,KAAK;AAChF,iEAAiE,KAAK;AACtE;AACA;AACA,IAAI,qEAAW,8BAA8B,KAAK;AAClD;AACA;AACA,sBAAsB,8EAAe;AACrC,sCAAsC,gFAAgB,+BAA+B,gFAAgB,6BAA6B;AAClI;AACA,6EAA6E,KAAK;AAClF,0BAA0B,MAAM,GAAG,UAAU,EAAE,EAAE,KAAK;AACtD,IAAI,gCAAgC;AACpC,qBAAqB,gFAAgB,4BAA4B,iBAAiB;AAClF,6CAA6C,gFAAgB;AAC7D;AACA,+EAA+E,KAAK;AACpF,4BAA4B,MAAM,GAAG,eAAe,EAAE,EAAE,UAAU;AAClE;AACA;AACA,EAAE,qEAAW,iDAAiD,MAAM,MAAM,IAAI;AAC9E;AACA;;;AAGA;AACA;AACA,gBAAgB;AAChB,KAAK;AACL,iBAAiB;AACjB,KAAK;AACL,0BAA0B;AAC1B;AACA,KAAK;AACL;;AAEA;AACA,iBAAiB,0FAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,0FAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,gFAAgB;AAC7B;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,YAAY,QAAQ;AACpB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,mCAAmC,YAAY,EAAE,EAAE,MAAM;AACzD;AACA;AACA;;AAEA;AACA,iCAAiC,KAAK,EAAE,EAAE,MAAM;AAChD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA,IAAI,qEAAW,wBAAwB,MAAM;AAC7C;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,8EAAe;AACpC,uBAAuB,0FAAqB;AAC5C;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,YAAY,QAAQ;AACpB;AACA;AACA;AACA,0CAA0C,MAAM;AAChD;AACA;AACA;AACA;AACA;AACA,kFAAkF,YAAY;AAC9F;AACA,mCAAmC,uCAAuC;AAC1E,iEAAiE;AACjE;AACA;AACA,sBAAsB,GAAG,UAAU,KAAK,EAAE,IAAI,eAAe,GAAG;AAChE;AACA;AACA,kBAAkB,GAAG,EAAE,SAAS,aAAa,IAAI,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG;AACzE;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA,2EAA2E,KAAK;AAChF,iEAAiE,KAAK;AACtE;AACA;AACA,IAAI,qEAAW,8BAA8B,KAAK;AAClD;AACA;;AAEA;AACA;AACA,2CAA2C,YAAY,EAAE,EAAE,eAAe;AAC1E,+BAA+B,4GAA4G;AAC3I,cAAc,aAAa,EAAE,QAAQ;AACrC;;;AAGA;AACA;AACA;AACA,cAAc,KAAK;AACnB;AACA;AACA,cAAc,KAAK;AACnB,IAAI;AACJ;AACA;AACA,cAAc,KAAK;AACnB;;AAEA;AACA;;AAEA,+BAA+B,oDAAoD,IAAI;AACvF;AACA,2CAA2C,WAAW;AACtD,oBAAoB,0FAAqB;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ,IAAI,KAAK;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;;AAER,oBAAoB,sGAA2B;AAC/C,0BAA0B,mBAAmB,EAAE,YAAY;AAC3D,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,6BAA6B,mBAAmB,EAAE,YAAY;AAC9D,0BAA0B,qBAAqB,EAAE,YAAY;AAC7D;;AAEA;AACA;;AAEA;AACO,4BAA4B,wBAAwB,IAAI;AAC/D;AACA;AACA;;AAEA,uBAAuB,8EAAe,IAAI,KAAK;;AAE/C;AACA,+DAA+D,aAAa;AAC5E;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,EAAE,uEAAY,IAAI,eAAe,mBAAmB,2BAA2B;;AAE/E;;AAEA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,OAAO,EAAE,4HAA4H;AAChJ;AACA,aAAa,aAAa,EAAE,aAAa;AACzC;;AAEA;AACA,qDAAqD,8DAA8D;AACnH,8BAA8B,QAAQ,EAAE,kBAAkB;AAC1D;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;;AAEA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,8DAA8D,qBAAqB,EAAE,qBAAqB;AAC1G;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,eAAe,EAAE,eAAe;AAC7C;AACA;AACA;AACA,qBAAqB,aAAa;AAClC,8BAA8B,wDAAwD;AACtF,4BAA4B,gBAAgB,EAAE,kBAAkB;AAChE;AACA;AACA;AACA;AACA;AACA,QAAQ;;AAER;AACA;;AAEA;AACA;;AAEO,0BAA0B,iBAAiB,IAAI;;AAEtD;;AAEA,qCAAqC,KAAK;AAC1C;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,4CAA4C,SAAS;AACrD,8CAA8C,QAAQ,MAAM,WAAW,EAAE,MAAM;;AAE/E;;AAEA;;AAEA;;AAEO;AACP;AACA;AACA;AACA,gCAAgC,MAAM,IAAI;AAC1C;AACA;AACA;AACA;AACA,wBAAwB,iFAAkB;AAC1C,yCAAyC,iFAAkB;AAC3D;AACA;AACA;AACA;;;AAGO;AACP;AACA;AACA;;;;;;;;;;;;;;;AChcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oCAAoC;;AAEpC;AACA;;AAEA;AACA,wBAAwB,qBAAM,gBAAgB,qBAAM,IAAI,qBAAM,sBAAsB,qBAAM;;AAE1F;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,GAAG;AACd,WAAW,UAAU;AACrB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,GAAG;AACd,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA,IAAI,mBAAc;;AAElB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,mBAAc;AAClC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,mBAAc;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA,kDAAkD,mBAAc;AAChE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA,kBAAkB;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC73BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEyC;;AAEzC;AACA;AACA;AACA,YAAY,eAAe;AAC3B,YAAY,sCAAsC;AAClD;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;;AAEA,qCAAqC,sBAAsB;AAC3D,KAAK,IAAI;AACT;AACA;;AAEA;AACA;AACA;AACA,YAAY,kBAAkB;AAC9B,YAAY,qBAAqB;AACjC;AACO;AACP;AACA;AACA;AACA,GAAG,GAAG;;AAEN,qBAAqB,IAAI;AACzB;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,kBAAkB;AAC9B,YAAY,qBAAqB;AACjC;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;AC3GqE;AAChB;AACtB;AACG;AACiB;;AAEnD;AACA;AACA,uBAAuB,IAAI;AAC3B;AACA,uBAAuB,oDAAqB,eAAe,iBAAiB;AAC5E,cAAc,aAAa,OAAO,YAAY,IAAI,UAAU,IAAI,IAAI;AACpE,IAAI;AACJ,uBAAuB,oDAAqB;AAC5C,cAAc,aAAa,OAAO,YAAY,aAAa,IAAI;AAC/D,IAAI;AACJ,uBAAuB,oDAAqB;AAC5C,sBAAsB,aAAa,OAAO,WAAW,IAAI,cAAc,EAAE,cAAc,EAAE,aAAa;AACtG;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ,IAAI,+BAAW,iCAAiC,WAAW;AAC3D;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,WAAW;AAC9B,yBAAyB,gBAAgB,GAAG,WAAW;AACvD,wEAAwE,MAAM,iBAAiB,YAAY;AAC3G,KAAK;AACL;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA;AACA;AACA,mBAAmB,wCAAe;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8DAA8D,MAAM,cAAc,KAAK;AACvF;AACA;;;AAGA,sBAAsB,2DAA2D,IAAI;AACrF;;AAEA;AACA,8CAA8C,SAAS;AACvD;AACA,IAAI,iCAAY,qBAAqB,SAAS;;AAE9C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,+BAA+B,IAAI,MAAM,MAAM;AAC/C,UAAU;AACV;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,+BAA+B,KAAK,uBAAuB,KAAK;AAChE;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,GAAG;;AAEH,EAAE,iCAAY,yBAAyB,UAAU;;AAEjD;AACA;;;AAGA,qCAAqC,qEAAqE,IAAI;AAC9G,4BAA4B,2EAA2E;AACvG,2BAA2B;AAC3B,wBAAwB,wDAA4B;AACpD;AACA;;AAEO;AACP,gBAAgB,WAAW;AAC3B,mBAAmB,wCAAe;AAClC;AACA;AACA,wBAAwB,wCAAe;AACvC;AACA,0BAA0B,KAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,qEAAmC;AAClE;AACA;AACA;AACA,wBAAwB,UAAU;AAClC,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,yBAAyB,KAAK,IAAI,UAAU;AAC5C,iCAAiC,yEAAqC;;AAEtE,IAAI,iCAAY,kCAAkC,MAAM,eAAe,WAAW;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,sCAAsC,oEAAoE;;AAE1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;AC5T+B;AACQ;AACL;AACkB;;;AAGpD;AACA;AACA,gCAAgC;AAChC;;;AAGA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;;AAE3B;AACA;AACA,qBAAqB,sGAA6B;AAClD,qEAAqE,iBAAiB,GAAG,EAAE,iBAAiB;AAC5G;AACA;AACA;AACA,MAAM;AACN,MAAM,qEAAW;AACjB;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,EAAE,cAAc,EAAE;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,KAAK;AACxC,SAAS;AACT;AACA;AACA,mDAAmD,mBAAmB;AACtE,QAAQ;AACR;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,oCAAoC,EAAE,cAAc,EAAE;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kCAAkC,GAAG;AACrC,SAAS;AACT;AACA;AACA,iDAAiD,qBAAqB;AACtE;AACA,QAAQ;AACR;AACA,iDAAiD,gFAAgB,gBAAgB;AACjF;;AAEA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wGAA8B;;AAEtC;AACA,sCAAsC,oDAAoD;AAC1F;AACA,mDAAmD,qBAAqB;AACxE,MAAM;AACN;AACA,wBAAwB,wGAA8B;AACtD;AACA,wCAAwC,0DAA0D;AAClG;AACA,qDAAqD,2BAA2B;AAChF,QAAQ;AACR,QAAQ,uEAAY;AACpB,4EAA4E,wBAAwB,oBAAoB,uBAAuB;AAC/I;AACA;AACA,MAAM;AACN;AACA,QAAQ,uEAAY;AACpB;AACA,MAAM,uEAAY,sDAAsD,uBAAuB;AAC/F;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;;AAEA;AACA,6CAA6C,GAAG;AAChD,yDAAyD,GAAG;AAC5D,+CAA+C,gFAAgB,MAAM;AACrE,KAAK;AACL;;AAEA;AACA;AACA,wCAAwC,EAAE;AAC1C;AACA;;AAEA;AACA,8CAA8C,GAAG;AACjD,yDAAyD,GAAG;AAC5D,+CAA+C,gFAAgB,MAAM;AACrE,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,uEAAY,oBAAoB,MAAM;AAC5C,MAAM,qEAAW,yDAAyD,GAAG,aAAa,wBAAwB,mBAAmB;AACrI;AACA;;AAEA;AACA,6BAA6B,OAAO,GAAG,mBAAmB;AAC1D;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB,IAAI;AACJ,YAAY,OAAO,gCAAgC,OAAO;AAC1D,oBAAoB,OAAO;AAC3B;AACA;;AAEA;AACA;;;AAGA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA,kBAAkB,MAAM;;AAExB,OAAO;AACP,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,OAAO,IAAI,mBAAmB;AACtD;AACA;AACA;AACA,wBAAwB,OAAO,IAAI,mBAAmB;AACtD;AACA;AACA;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA,0BAA0B,OAAO;AACjC;AACA;AACA;AACA,QAAQ,uEAAY,oBAAoB,MAAM;AAC9C,QAAQ,qEAAW,yDAAyD,GAAG,aAAa,wBAAwB,mBAAmB;AACvI;AACA;;AAEA;AACA,kBAAkB,OAAO,GAAG,oCAAoC;AAChE;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;AACA,kCAAkC,sBAAsB;AACxD;;AAEA;AACA;AACA,mBAAmB,UAAU;AAC7B,IAAI,mCAAmC,UAAU,gCAAgC,UAAU;AAC3F,qBAAqB,UAAU;AAC/B;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;AACA;AACA,IAAI,qEAAW,yBAAyB,MAAM;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA,cAAc,OAAO,IAAI,GAAG;AAC5B;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC,mDAAmD;AACvF;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;AACA,kEAAkE,EAAE,cAAc;AAClF,mDAAmD,+BAA+B,EAAE,KAAK;AACzF;;AAEA;AACA;AACA,mDAAmD,aAAa;AAChE,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACe;AACf;AACA;;AAEA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,OAAO;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oCAAoC,EAAE,sBAAsB;AAC5D,+DAA+D,EAAE,QAAQ;AACzE;AACA;AACA;AACA;;AAEA;;AAEA,6CAA6C,oEAAoE;;AAEjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAsC,gFAAgF;;AAEtH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR,kCAAkC,aAAa;AAC/C;;AAEA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,sCAAsC;AAChE;AACA;AACA;;AAEA,qFAAqF,cAAc;AACnG;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,kCAAkC,WAAW;AAC7C,0BAA0B,yBAAyB;AACnD,0CAA0C,EAAE;AAC5C,uCAAuC,eAAe;AACtD;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,8CAA8C,GAAG,UAAU,eAAe;AAC1E;AACA;AACA;AACA;AACA,UAAU;AACV,sCAAsC,WAAW;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,6CAA6C;AACzE,UAAU;AACV,8BAA8B,oBAAoB;AAClD,UAAU;AACV;AACA;AACA,YAAY;AACZ,gCAAgC,aAAa;AAC7C;AACA,UAAU,uEAAY;AACtB;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,QAAQ;AACR,mEAAmE,EAAE,QAAQ;AAC7E,QAAQ,qEAAW,oDAAoD,EAAE,QAAQ;AACjF,QAAQ,qEAAW;AACnB;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA,gBAAgB,2EAAS;AACzB;AACA;AACA;;AAEA,qBAAqB,cAAc;AACnC;AACA;;;;;;;;;;;;;;;;;ACxiB+B;;AAE/B;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,aAAa,OAAO;AACpB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,UAAU;AACzB,aAAa,QAAQ;AACrB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,UAAU;AACzB,eAAe,QAAQ;AACvB,eAAe,UAAU;AACzB;AACA;AACA,MAAM,iEAAiE,gBAAgB,eAAe,kBAAkB,IAAI;AAC5H;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB,aAAa,MAAM;AACnB,cAAc,QAAQ;AACtB;AACA;AACA,kCAAkC,GAAG,IAAI,MAAM;AAC/C;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,QAAQ,mBAAmB,KAAK,YAAY,IAAI,IAAI,SAAS,SAAS,IAAI;AAC5F;AACA;AACA,uCAAuC,MAAM;AAC7C;AACA;AACA;AACA,kBAAkB,QAAQ,mBAAmB,KAAK,YAAY,IAAI,IAAI,SAAS,SAAS,IAAI,UAAU,MAAM;AAC5G;AACA;AACA;AACA;AACA;AACA,qCAAqC,IAAI,IAAI,SAAS,GAAG,YAAY;AACrE,WAAW;AACX;AACA,kBAAkB,QAAQ,sBAAsB,IAAI,IAAI,aAAa;AACrE;AACA;AACA;AACA,YAAY,sCAAc;AAC1B;AACA;AACA,mCAAmC,EAAE;AACrC,2BAA2B,IAAI,IAAI,YAAY;AAC/C;AACA;AACA,UAAU;AACV;AACA;AACA,2BAA2B,WAAW,IAAI,aAAa;AACvD;AACA;AACA,UAAU,SAAS,sCAAc;AACjC,4BAA4B,QAAQ;AACpC,UAAU;AACV;AACA;AACA,kBAAkB,QAAQ,wBAAwB,KAAK,YAAY,IAAI,IAAI,MAAM;AACjF;AACA;AACA;AACA,kBAAkB,QAAQ,wBAAwB,KAAK,YAAY,IAAI,WAAW,MAAM;AACxF;AACA;AACA;;;AAGA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA,sBAAsB,WAAW;AACjC,OAAO;AACP;AACA;AACA;;;AAGA;AACA;AACA;AACA,aAAa,aAAa;AAC1B,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,IAAI;AAC9C;AACA;AACA,0CAA0C,IAAI;AAC9C;AACA;AACA,yDAAyD,IAAI;AAC7D;AACA,0CAA0C,IAAI;AAC9C;AACA,OAAO;AACP;AACA;;AAEA;;;AAGO;;AAEP;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA,gBAAgB,0CAA0C;AAC1D,gBAAgB,8BAA8B,0BAA0B,iBAAiB;AACzF,gBAAgB,+BAA+B;AAC/C;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,0CAAgB;AAClC;AACA;AACA;AACA,oBAAoB;AACpB;AACA,gBAAgB;AAChB;AACA;AACA,aAAa;AACb;AACA,SAAS,KAAK;AACd;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,yDAAyD;AACnF;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;;AC1ToD;;AAErC;;AAEf;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,iBAAiB,QAAQ;AACzB,mBAAmB,QAAQ;AAC3B,mBAAmB,QAAQ;AAC3B,eAAe,QAAQ;AACvB,aAAa,QAAQ;AACrB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA,oBAAoB,iCAAiC,GAAG,kCAAkC;AAC1F;AACA;AACA,OAAO;AACP;AACA;AACA,kCAAkC,SAAS;AAC3C;AACA,8BAA8B,+CAA+C,mBAAmB,IAAI;;AAEpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,WAAW,KAAK;AAChB;AACA,SAAS;AACT;AACA,mDAAmD,UAAU;AAC7D;AACA;AACA;AACA,KAAK;AACL;;AAEA,yBAAyB,aAAa;;AAEtC;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AC3DA;AACA;AACA;;AAEkC;AACH;;AAExB;AACP,0BAA0B;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;;AAER;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,4EAA4E,wBAAwB,IAAI,eAAe;AACvH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,mBAAmB,GAAG,aAAa,IAAI,kCAAkC;AACrF,YAAY,mBAAmB,IAAI,kCAAkC;AACrE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gEAAgE,cAAc;AAC9E;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,kBAAkB;AACxC;AACA;AACA,+BAA+B,cAAc,GAAG,SAAS;AACzD;AACA,4EAA4E,cAAc,KAAK,2BAA2B;AAC1H,UAAU;AACV,gCAAgC,iBAAiB,4EAAc,mBAAmB;AAClF;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,YAAY,uEAAY,iCAAiC,wBAAwB,KAAK,mBAAmB;AACzG,YAAY,uEAAY;AACxB,YAAY,uEAAY;AACxB;AACA;AACA;AACA,MAAM;AACN,MAAM,uEAAY;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA,yDAAyD;AACzD;;AAEA,4DAA4D,2CAA2C;AACvG;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA,uDAAuD;AACvD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;ACvP4D;AAC1B;AACI;AACD;AACN;;AAE/B;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;;AAGH;AACA;AACA,aAAa,MAAM;AACnB,cAAc,oBAAoB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA,qCAAqC,mBAAmB;AACxD;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,iEAAiE,SAAS;AAC1E,qCAAqC,mBAAmB,EAAE,SAAS;AACnE,uCAAuC,mBAAmB,EAAE,SAAS;AACrE;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,gBAAgB,yFAAqB;AACrC;AACA,YAAY,2FAAsB;AAClC;AACA,OAAO;AACP;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA,MAAM,uEAAY,0BAA0B,mBAAmB;AAC/D,6BAA6B,2FAAsB;AACnD;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,UAAU;AACV;AACA;AACA;AACA,0GAA0G,OAAO,GAAG,kBAAkB;AACtI;AACA;;AAEA;AACA,MAAM;AACN,MAAM,uEAAY,+BAA+B,mBAAmB;AACpE;AACA,GAAG;;AAEH;AACA;AACA,MAAM,uEAAY,wCAAwC,cAAc;AACxE,kBAAkB,yFAAqB;AACvC;AACA,MAAM;AACN,MAAM,uEAAY,+BAA+B,cAAc;AAC/D;AACA,GAAG;;AAEH;AACA,uBAAuB,cAAc,GAAG,SAAS;AACjD;AACA;;AAEA,IAAI,uEAAY,iBAAiB,UAAU,KAAK,QAAQ;AACxD;;AAEA;;AAEA;AACA,MAAM,uEAAY,UAAU,SAAS;AACrC,MAAM;AACN,MAAM,uEAAY,mBAAmB,QAAQ;AAC7C;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,GAAG;;AAEH;AACA,IAAI,qEAAW,oBAAoB,UAAU;;AAE7C;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,4CAA4C,iFAAkB;;AAE9D;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA,OAAO;;AAEP;AACA,GAAG;;AAEH;AACA,sCAAsC,iFAAkB;AACxD,8CAA8C,iBAAiB;AAC/D;AACA;AACA,oFAAoF,oBAAoB;AACxG;;AAEA,yBAAyB,uGAA4B;AACrD;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,UAAU,uEAAY;AACtB;AACA,SAAS;AACT,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA,sCAAsC,iFAAkB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iFAAkB;AAC1D,4CAA4C,iFAAkB;AAC9D,6CAA6C,iFAAkB;AAC/D;;AAEA;AACA,4BAA4B,uFAAqB;AACjD,yFAAyF,eAAe,EAAE,IAAI;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yFAAqB;AACrD,uCAAuC,gBAAgB,GAAG,aAAa;AACvE;AACA,MAAM;AACN,MAAM,uEAAY;AAClB,0GAA0G,YAAY;AACtH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,eAAe,OAAO,GAAG,SAAS;AAClC,MAAM;AACN;AACA,kBAAkB,yFAAqB;AACvC;AACA;AACA,qDAAqD,YAAY,GAAG,SAAS;AAC7E,QAAQ;AACR;AACA;AACA,8CAA8C,OAAO,GAAG,YAAY,GAAG,SAAS;AAChF;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,oBAAoB,yFAAqB;AACzC;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,gDAAgD,OAAO,GAAG,YAAY,GAAG,SAAS;AAClF,UAAU;AACV;AACA,2BAA2B,WAAW,GAAG,qCAAqC,GAAG,YAAY,GAAG,SAAS;AACzG,UAAU;AACV,UAAU,uEAAY;AACtB;AACA;AACA,MAAM;AACN,yEAAyE,cAAc,kBAAkB,SAAS;AAClH;AACA;AACA,GAAG;;AAEH,mCAAmC;AACnC,yFAAyF;AACzF;AACA;AACA,MAAM,uEAAY,6DAA6D,SAAS,KAAK,6BAA6B;AAC1H,kFAAkF,SAAS;AAC3F;AACA,IAAI,uEAAY,2BAA2B,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,+BAA+B,gBAAgB,EAAE,YAAY;AAC7D;AACA,yBAAyB,yFAAqB;AAC9C,YAAY,mGAA0B;AACtC;AACA;AACA,oEAAoE,iFAAkB;AACtF,0EAA0E,iFAAkB;AAC5F,sCAAsC,iFAAkB;;AAExD;AACA;AACA;AACA;AACA;;AAEA;AACA,yFAAyF,gBAAgB;AACzG,0BAA0B,eAAe,EAAE,kGAAyB,OAAO;AAC3E;;AAEA;AACA;AACA;AACA,uDAAuD,gBAAgB,GAAG,SAAS,GAAG,IAAI;AAC1F;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,MAAM;AACN;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;AC1XQ;AACiB;AACb;AACP;;AAEhB;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,MAAM,EAAE,YAAY,EAAE,WAAW;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,8EAAe;AACvC,oEAAoE,KAAK;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,cAAc,2BAA2B;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,GAAG;AAChB;AACA;AACA,yBAAyB,+GAAiC;AAC1D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAW,aAAa,MAAM,EAAE,UAAU;AACtD,YAAY,kHAAsC;AAClD;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,mBAAmB,EAAE,WAAW,MAAM,KAAK;AAChG,cAAc;AACd,cAAc,qEAAW,aAAa,MAAM,EAAE,UAAU;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;AC7J+C;AACL;AACR;AACI;AACe;AACZ;AACE;AACZ;;AAE/B,wCAAwC,aAAa;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS,gFAAgB;AACzB;;AAEA;AACA,EAAE,uEAAY,6BAA6B,SAAS;AACpD,2BAA2B,qFAAqB;;AAEhD,oBAAoB,qFAAqB;AACzC;AACA,IAAI,qEAAW,wDAAwD,IAAI;AAC3E;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,EAAE,uEAAY,iCAAiC,KAAK;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+BAA+B,KAAK;AACpC;AACA,GAAG;;AAEH;AACA;;AAEA;AACA,yJAAyJ,mCAAmC,iCAAiC,mBAAmB;AAChP;AACA;AACA,kCAAkC,eAAe,gBAAgB,qBAAqB;AACtF;AACA;AACA;AACA;AACA,yJAAyJ,mCAAmC,iCAAiC,mBAAmB;AAChP;AACA;AACA,kCAAkC,eAAe,gBAAgB,qBAAqB;AACtF;AACA;AACA;AACA;AACA,yJAAyJ,mCAAmC,iCAAiC,mBAAmB;AAChP;AACA;AACA,kCAAkC,eAAe,gBAAgB,qBAAqB;AACtF;AACA;AACA;AACA;AACA,yJAAyJ,mCAAmC,iCAAiC,mBAAmB;AAChP;AACA;AACA,kCAAkC,eAAe,gBAAgB,qBAAqB;AACtF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,KAAK;AACtC,MAAM,qEAAW;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,sDAAsD,WAAW,GAAG,UAAU;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,4DAA4D,WAAW,GAAG,UAAU;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;;AAEA;AACA,2BAA2B,uGAA6B;AACxD,oBAAoB,iGAA8B;AAClD;AACA,2CAA2C,oBAAoB;AAC/D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM,uEAAY,aAAa,UAAU;AACzC;AACA;AACA;AACA,QAAQ;AACR,sBAAsB,sGAA8B;AACpD;AACA,iCAAiC,iCAAiC;AAClE;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU,uEAAY,uBAAuB,WAAW,KAAK,kCAAkC;AAC/F;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;;AAEA;AACA,IAAI,wFAAoB;AACxB,iEAAiE,iFAAkB;AACnF,2CAA2C,iFAAkB;AAC7D,8CAA8C,iFAAkB;AAChE,2CAA2C,iFAAkB;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kDAAkD,UAAU;;AAE5D;AACA;AACA;AACA;AACA,YAAY,wFAAoB,gBAAgB,WAAW;AAC3D;AACA,sCAAsC;AACtC,qCAAqC,yFAAuB;AAC5D,YAAY,uEAAY,gBAAgB,WAAW;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,UAAU;AACrD,sCAAsC;AACtC,qCAAqC,yFAAuB;AAC5D;AACA;AACA;AACA;AACA;;AAEA,MAAM,wFAAoB;AAC1B;AACA,KAAK;;AAEL;AACA;;AAEA;AACA,IAAI,wFAAoB,iCAAiC,KAAK;AAC9D,iEAAiE,iFAAkB;AACnF,2CAA2C,iFAAkB;AAC7D,8CAA8C,iFAAkB;AAChE,2CAA2C,iFAAkB;;AAE7D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,KAAK,GAAG,UAAU;AAC/D,qCAAqC,UAAU;AAC/C,gCAAgC;AAChC,wBAAwB,yFAAuB;AAC/C;AACA;;AAEA,IAAI,wFAAoB;;AAExB;AACA;;AAEA;AACA,IAAI,wFAAoB;AACxB,8CAA8C,iFAAkB;AAChE,2CAA2C,iFAAkB;AAC7D;AACA;;AAEA,oBAAoB,mFAAoB;AACxC,gCAAgC;AAChC,wBAAwB,yFAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,IAAI,wFAAoB;AACxB;AACA;;;AAGA;AACA,IAAI,wFAAoB;AACxB,8CAA8C,iFAAkB;AAChE,2CAA2C,iFAAkB;AAC7D;AACA;;AAEA,oBAAoB,yGAA+B;AACnD,gCAAgC;AAChC,wBAAwB,yFAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,IAAI,wFAAoB;AACxB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,IAAI,wFAAoB;AACxB,8CAA8C,iFAAkB;AAChE,2CAA2C,iFAAkB;AAC7D;AACA;;AAEA,sBAAsB,mGAA4B;AAClD,gCAAgC;AAChC,wBAAwB,yFAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,IAAI,wFAAoB;AACxB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,8EAA8E,iHAAmC;;AAEjH;AACA;AACA;AACA,UAAU,iHAAmC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,oDAAoD,iFAAkB;AACtE,4CAA4C,iFAAkB;AAC9D,2CAA2C,iFAAkB;AAC7D,2CAA2C,iFAAkB;;AAE7D;AACA;AACA;AACA,QAAQ,uEAAY;AACpB;AACA;;AAEA;AACA,QAAQ,uEAAY;AACpB;AACA;;AAEA;AACA,QAAQ,uEAAY;AACpB;AACA;;AAEA;AACA,QAAQ,uEAAY;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,aAAa,GAAG;AAChB;AACA;AACA,IAAI,uEAAY;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA,KAAK;AACL;AACA;;AAEA;AACA;AACA,IAAI,uEAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,2CAA2C,iFAAkB;AAC7D;AACA,MAAM,uEAAY;AAClB;AACA;;AAEA,2CAA2C,iFAAkB;AAC7D;AACA;AACA;AACA,MAAM,uEAAY,oCAAoC,gCAAgC;AACtF;AACA;;AAEA;AACA,uCAAuC,iFAAkB;AACzD;AACA;AACA,MAAM,uEAAY;AAClB;AACA;;AAEA;AACA,4CAA4C,iFAAkB;AAC9D;AACA,MAAM,uEAAY;AAClB;AACA;;AAEA;AACA,kDAAkD,iFAAkB;AACpE;AACA,MAAM,uEAAY;AAClB;AACA;;AAEA;AACA,yCAAyC,iFAAkB;AAC3D;AACA;AACA;;AAEA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;ACjqBA;AACkC;AACO;AACM;AACN;AACM;AACT;AACgB;;AAEtD;;AAEA;AACA;AACA,sBAAsB,iFAAkB;AACxC;AACA,sBAAsB,iFAAkB;AACxC;AACA,sBAAsB,iFAAkB;AACxC;AACA,sBAAsB,iFAAkB;AACxC;AACA,sBAAsB,iFAAkB;AACxC;AACA,sBAAsB,iFAAkB;AACxC;AACA,sBAAsB,iFAAkB;AACxC,GAAG;;AAEH;AACA,8EAA8E,4EAAa;AAC3F,sBAAsB,iFAAkB,8CAA8C,4EAAa;AACnG,+EAA+E,4EAAa;AAC5F,sBAAsB,iFAAkB,+CAA+C,4EAAa;AACpG;AACA,sBAAsB,iFAAkB;AACxC;AACA,sBAAsB,iFAAkB;AACxC;AACA,sBAAsB,iFAAkB;AACxC;AACA,sBAAsB,iFAAkB;AACxC,iFAAiF,4EAAa;AAC9F,sBAAsB,iFAAkB,iDAAiD,4EAAa;;AAEtG,GAAG;;AAEH;AACA,WAAW,4EAAa;AACxB,GAAG;;AAEH;AACA;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,OAAO;AACP;;AAEA,mCAAmC,4EAAa;AAChD;AACA,mDAAmD,iFAAkB;AACrE;AACA,wBAAwB,iFAAkB;AAC1C;;AAEA,iGAAiG,iDAAiD,YAAY,qDAAqD,gBAAgB,4CAA4C,8DAA8D,yDAAyD,wBAAwB,iDAAiD;;AAE/c;AACA;AACA,iCAAiC,iDAAiD;AAClF,8HAA8H,4DAA4D,QAAQ,kDAAkD,iGAAiG,0DAA0D,uIAAuI,kDAAkD;AACxkB;AACA,8GAA8G,qDAAqD,gBAAgB,4CAA4C;AAC/N;AACA;;AAEA;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA,yCAAyC,oDAAoD,4MAA4M,oDAAoD;AAC7V;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;;AAEA;;AAEA,wCAAwC,iFAAkB;AAC1D,wBAAwB,mGAA4B;AACpD,iBAAiB,gGAA4B;AAC7C,kBAAkB,8GAAmC;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA,4EAA4E,KAAK;AACjF;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA,IAAI,uEAAY,6BAA6B,WAAW,KAAK,QAAQ;AACrE;AACA,wBAAwB,iFAAkB;AAC1C,wBAAwB,iFAAkB;AAC1C;AACA;AACA,MAAM;AACN,wBAAwB,iFAAkB;AAC1C;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,iFAAkB;AAC1C;AACA;AACA;AACA,GAAG;;AAEH;AACA,qHAAqH,KAAK;AAC1H,2CAA2C,iFAAkB,2CAA2C,KAAK;;AAE7G;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,GAAG;;AAEH;AACA,mBAAmB,gEAAS;AAC5B,oBAAoB,8FAA2B;AAC/C,iBAAiB,gGAA4B;AAC7C,kBAAkB,8GAAmC;AACrD,mCAAmC,4EAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,iDAAiD,YAAY,qDAAqD,gBAAgB,6CAA6C;AACzN,iDAAiD,yDAAyD,wBAAwB,iDAAiD,kBAAkB,wDAAwD,4BAA4B,4DAA4D;AACrV;;AAEA,mDAAmD,iFAAkB;AACrE;AACA,wBAAwB,iFAAkB;AAC1C;;AAEA,4CAA4C,iFAAkB;AAC9D;AACA,0BAA0B,iFAAkB;AAC5C;AACA;AACA,wBAAwB,wGAA4B;AACpD;AACA;AACA;AACA,4EAA4E,uBAAuB;;AAEnG;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD,mTAAmT,iDAAiD,YAAY,qDAAqD;AACra;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA;AACA,SAAS;AACT;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA;AACA,SAAS;AACT;AACA;AACA,uCAAuC,iFAAkB;AACzD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD,oLAAoL,oDAAoD;AACxO;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,iFAAkB;AACvD;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA,IAAI,uEAAY,6BAA6B,WAAW,KAAK,QAAQ;;AAErE,sBAAsB,iFAAkB;;AAExC;AACA;AACA;AACA,4BAA4B,iFAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iFAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iFAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iFAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iFAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iFAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iFAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iFAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,iEAAe,eAAe,EAAC;;;;;;;;;;;;;ACtyBW;AACR;;AAEnB;;AAEf;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,oBAAoB,IAAI,aAAa;AAC9D;;AAEA;AACA;AACA;AACA,yBAAyB,mBAAmB,IAAI,YAAY;AAC5D;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D,yDAAyD;AACzD,sBAAsB,MAAM,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,aAAa,6GAAiC;AAC9C,aAAa,iHAAmC;AAChD;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iHAAmC;AAClD,eAAe,iHAAmC;AAClD;AACA,SAAS;AACT;AACA,UAAU,uEAAY,aAAa,UAAU;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACtK+C;AACb;AACI;AACD;AACN;;AAE/B;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA,MAAM;AACN,+BAA+B,iFAAkB;AACjD;AACA,GAAG;;AAEH;AACA;AACA;AACA,MAAM;AACN,8BAA8B,iFAAkB;AAChD;AACA,GAAG;;AAEH;AACA;AACA;AACA,MAAM;AACN,+BAA+B,iFAAkB;AACjD;AACA,GAAG;;AAEH;AACA;AACA;AACA,MAAM;AACN,8BAA8B,iFAAkB;AAChD;AACA,GAAG;;AAEH;AACA;AACA;AACA,MAAM;AACN,+BAA+B,iFAAkB;AACjD;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,MAAM;AACN,8BAA8B,iFAAkB;AAChD;AACA,GAAG;;AAEH;AACA,QAAQ,+EAAiB,aAAa;AACtC;AACA,uBAAuB,+EAAiB;AACxC,mBAAmB;;AAEnB;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA,YAAY,wFAAoB,iBAAiB,aAAa;AAC9D;AACA;AACA;AACA,UAAU,uEAAY;AACtB;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb,YAAY;AACZ;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,GAAG;;AAEH;AACA,QAAQ,+EAAiB,aAAa;AACtC,uBAAuB,+EAAiB;AACxC,mBAAmB;;AAEnB;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA,wCAAwC,+EAAiB;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA,kBAAkB,+EAAiB;AACnC;AACA,8BAA8B,MAAM;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB,MAAM;;AAE/B;AACA,MAAM,uEAAY;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;;AAEL;AACA,MAAM,qEAAW;AACjB,MAAM,uEAAY;AAClB,MAAM,kFAAiB,iFAAiF,UAAU,gBAAgB,eAAe,SAAS,cAAc,SAAS,cAAc;AAC/L,KAAK;;AAEL;AACA,MAAM,uEAAY;;AAElB;;AAEA,wBAAwB,iFAAkB;AAC1C,wBAAwB,iFAAkB;AAC1C,wBAAwB,iFAAkB;;AAE1C;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA,MAAM,uEAAY;AAClB;AACA,KAAK;AACL,GAAG;;AAEH;;AAEA,iEAAe,aAAa,EAAC;;;;;;;;;;;;;;;;;;;;;ACnNK;AACI;AACD;AACU;;AAE/C;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEO;AACP,sFAAsF,WAAW;AACjG;;AAEO;AACP;AACA,wCAAwC,iFAAkB;AAC1D;;AAEA,EAAE,uEAAY,kCAAkC,WAAW,cAAc,aAAa,eAAe,gBAAgB;AACrH;AACA,uDAAuD,WAAW;AAClE,IAAI;AACJ;AACA,IAAI;AACJ,+BAA+B,iFAAkB;AACjD;;AAEA;AACA;;AAEO;AACP,wCAAwC,iFAAkB;AAC1D;;AAEA;AACA;AACA;AACA;;AAEA,EAAE,uEAAY,kCAAkC,WAAW,cAAc,aAAa,eAAe,gBAAgB;AACrH;AACA,8CAA8C,WAAW;AACzD,IAAI;AACJ;AACA,IAAI;AACJ,4BAA4B,iFAAkB;AAC9C;AACA;;AAEO;AACP;;AAEA;AACA,iDAAiD,WAAW;AAC5D;AACA;;AAEO;AACP;AACA,0BAA0B,iFAAkB;AAC5C,oBAAoB,iFAAkB;AACtC;;AAEO;AACP,oBAAoB,iFAAkB;AACtC,oBAAoB,iFAAkB;AACtC;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,qBAAqB,+EAAiB;AACtC,kBAAkB,8FAA2B;AAC7C,iBAAiB;;AAEjB;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,QAAQ,uEAAY;AACpB,QAAQ,uEAAY;AACpB,QAAQ,uEAAY;AACpB;AACA,OAAO;AACP,GAAG;AACH;;;;;;;;;;;ACpGA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,UAAU;AACxB;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA,GAAG;;AAEH;AACA,yCAAyC,KAAK;AAC9C;AACA;AACA;AACA,kBAAkB,GAAG;AACrB,QAAQ;AACR,kBAAkB,GAAG;AACrB;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH,sBAAsB,8CAA8C,IAAI;AACxE;AACA,6CAA6C,OAAO,8BAA8B,QAAQ;AAC1F;AACA;AACA,oBAAoB,aAAa;;AAEjC,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,wBAAwB;AACxB;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA,8BAA8B;AAC9B,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,WAAW;AAC7B;AACA;;AAEA,kBAAkB,WAAW;AAC7B;AACA,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,8CAA8C,wBAAwB,EAAE,MAAM;AAC9E;AACA;AACA,0CAA0C,kBAAkB;AAC5D,SAAS,WAAW,MAAM,OAAO,EAAE,MAAM,GAAG,IAAI,EAAE,aAAa,EAAE,WAAW;AAC5E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,mBAAmB,MAAM;;AAEzB;AACA;AACA;AACA;;AAEA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA,QAAQ;;AAER;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA,iCAAiC;AACjC;AACA;AACA;AACA,wDAAwD,oBAAoB;AAC5E;AACA,UAAU;AACV,kCAAkC,oBAAoB;AACtD;AACA,OAAO;AACP;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oBAAoB,oBAAoB;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,MAAM,UAAU,OAAO;AAC1E;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH,2BAA2B;AAC3B,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,iEAAe,KAAK,EAAC;;;;;;;;;;;;;ACplBrB;AAC6C;;AAE7C;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB,IAAI,cAAc,IAAI,WAAW;;AAEvE;AACA;AACA;AACA,yCAAyC;AACzC,UAAU;AACV,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,wCAAwC;AACxC,UAAU;AACV,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,wCAAwC;AACxC,UAAU;AACV,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,yCAAyC;AACzC,UAAU;AACV,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,wCAAwC;AACxC,UAAU;AACV,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,UAAU;AACV,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,UAAU;AACV,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA,iEAAe,MAAM,EAAC;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE,qFAAmB;AACrB;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;AC3KkD;AACJ;AACC;AACD;AACY;AAChB;;AAE1C;AACA;AACA,iCAAiC,+GAAmC;AACpE,4BAA4B,qGAA8B;AAC1D;AACA,0DAA0D,wBAAwB;;AAElF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,sBAAsB;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oDAAoD,qBAAqB;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,oBAAoB,oEAAS;AAC7B,wBAAwB,iGAA0B;AAClD;;AAEA,mBAAmB,gBAAgB,GAAG,iBAAiB,EAAE,EAAE;;AAE3D;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,mFAAiB;AACxB,8BAA8B,qEAAc;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,0BAA0B,qGAA8B;AACxD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;;AAEA;;AAEA;;AAEO;AACP;AACA;AACA,EAAE,qFAAmB;AACrB;AACA;;;;;;;;;;;;;;;ACvRqC;AACuB;AACb;AACY;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA,wCAAwC,iBAAiB;AACzD,uCAAuC,aAAa;;AAEpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mEAAmE,0BAA0B;AAC7F;;AAEA,yBAAyB,0FAAqB;;AAE9C,oCAAoC,+EAAS;;AAE7C;AACA;;;AAGA;AACA;;AAEA;AACA;;;AAGO;AACP,EAAE,uEAAY;AACd;;AAEA;;AAEA;AACA,IAAI,uEAAY,IAAI,WAAW;AAC/B;AACA;AACA,GAAG;;AAEH,4BAA4B,kGAA4B,+BAA+B,qBAAqB;AAC5G;AACA;;;;;;;;;;;;;;;;;;;;;;;;AChFkC;AACwB;AACZ;AACC;AACT;AACF;AACM;AACc;;AAExD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH,EAAE,uEAAY;AACd;AACA;;;AAGA;AACA,2BAA2B,wEAAe;AAC1C;AACA;;AAEA;AACA;AACA,4BAA4B,iFAAkB;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,QAAQ,uEAAY;AACpB,gEAAgE,iBAAiB;AACjF,wEAAwE,iBAAiB;AACzF,gEAAgE,4EAA4E;AAC5I,6DAA6D,uEAAuE;AACpI;AACA,UAAU,uEAAY;AACtB;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM,uEAAY,uBAAuB,cAAc;AACvD;AACA;AACA;AACA;AACA;AACA,MAAM,uEAAY;AAClB;AACA;;AAEA,IAAI;AACJ,IAAI,uEAAY;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B,eAAe;AAC7C;;AAEA,iDAAiD,4BAA4B;AAC7E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;;AAGA;AACO,sCAAsC;AAC7C,qEAAqE;AACrE;AACA;AACA;AACA;AACA;;AAEA,yCAAyC,iFAAkB;AAC3D;AACA;AACA;;AAEA;AACA,6CAA6C,iFAAkB;AAC/D,6CAA6C,iFAAkB;;AAE/D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sGAAyB;AAClD,kBAAkB,sGAAyB;;AAE3C,4CAA4C,iFAAkB;AAC9D;AACA,yCAAyC,iFAAkB;;AAE3D;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,4DAA4D,QAAQ;AACpE,gCAAgC;AAChC;AACA,0BAA0B,6FAAuB;AACjD;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,2DAA2D,QAAQ;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,6FAAuB;AACxE;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC,iFAAkB;AAC3D;AACA;AACA;AACA;AACA,4BAA4B,+GAAmC;AAC/D;AACA;AACA;AACA,0BAA0B,qCAAqC,gBAAgB;AAC/E;AACA;AACA,IAAI,uEAAY,iCAAiC,mCAAmC;AACpF;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,iCAAiC,iFAAkB;;AAEnD;AACA,IAAI,uEAAY;AAChB;AACA;AACA;AACA;AACA,+BAA+B,8GAAkC;AACjE;AACA,MAAM,uEAAY,IAAI,WAAW,KAAK,wCAAwC;AAC9E,eAAe;AACf,KAAK;AACL,IAAI,uEAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI,uEAAY,yBAAyB,WAAW;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACO;AACP,EAAE,uEAAY;AACd,4BAA4B,MAAM;AAClC,EAAE,uEAAY;AACd;;AAEA,EAAE,uEAAY;AACd;AACA,qBAAqB,yFAAoB;AACzC,SAAS,yGAA4B;AACrC;;AAEA;AACA;AACA,IAAI,uEAAY;AAChB;AACA;AACA,sDAAsD,iBAAiB;AACvE;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI;AACJ;AACA;;AAEA;;AAEA;AACA;AACA,EAAE,qEAAW,eAAe,MAAM,EAAE,eAAe;AACnD;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,QAAQ,uEAAY,2BAA2B,KAAK,IAAI,OAAO,EAAE,UAAU;AAC3E,QAAQ,uEAAY;AACpB;AACA,OAAO;AACP,GAAG;AACH;;AAEO;AACP;AACA,wBAAwB,iFAAkB;AAC1C,kCAAkC,uGAA2B;AAC7D,IAAI,wFAAoB;;AAExB;AACA,MAAM,uEAAY,aAAa,cAAc;AAC7C;AACA;AACA,QAAQ,uEAAY,qBAAqB,cAAc;AACvD,+BAA+B,uGAA6B;AAC5D,qEAAqE,eAAe,GAAG,cAAc;AACrG,QAAQ,uEAAY,qBAAqB,cAAc,kBAAkB,sBAAsB;AAC/F;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEO;AACP;;AAEA,qCAAqC,iFAAkB;AACvD;AACA;AACA,kCAAkC,uGAA2B;AAC7D,IAAI,wFAAoB;AACxB;;AAEA;AACA,MAAM,wFAAoB,eAAe,aAAa;AACtD;AACA,QAAQ,2FAAqB;AAC7B;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACndA;AAC+C;AACX;AACU;AACA;AACI;AAChB;AACI;AACI;AACU;AACC;AACK;AACV;AACN;AACc;AACqB;;AAE7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,YAAY,sFAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,uBAAuB;AACvB,2BAA2B,wEAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,oEAAS;AAChC,qBAAqB,iGAA0B;AAC/C,qBAAqB,mFAAiB;AACtC,kBAAkB,kGAA2B;AAC7C,iBAAiB;AACjB,sCAAsC,iFAAkB;AACxD,0CAA0C,iFAAkB;AAC5D,wCAAwC,iFAAkB;AAC1D;AACA,wBAAwB,iFAAkB;AAC1C;;AAEA;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU,qFAAmB;AAC7B;AACA;AACA,UAAU,wFAAoB,aAAa,aAAa;AACxD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,8BAA8B,iFAAkB;AAChD;AACA,UAAU,4BAA4B,iFAAkB;AACxD;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,0BAA0B,yEAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEO;AACP,uCAAuC,iFAAkB;AACzD;AACA,4CAA4C,iFAAkB;;AAE9D;AACA,EAAE,qEAAW;AACb,QAAQ,6GAA+B;AACvC,EAAE,qEAAW;;AAEb,QAAQ,wHAAoC;;AAE5C;AACA;AACA,yDAAyD,mHAA+B;AACxF;;AAEA,EAAE,wFAAoB;;AAEtB;AACA;AACA;AACA;;AAEA,EAAE,wFAAoB;;AAEtB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,QAAQ,8GAA8B;;AAEtC,0BAA0B,yEAAe,mBAAmB,oBAAoB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gFAAgB;AACxC,gCAAgC,4IAA4C,GAAG,gDAAgD;;AAE/H;AACA,EAAE,wFAAoB,cAAc,YAAY;AAChD,EAAE,qEAAW;;AAEb;AACA;;AAEA,EAAE,uEAAY,GAAG,wEAAwE;AACzF,EAAE,wFAAoB;AACtB,EAAE,2EAAc;AAChB;AACA;;;;;;;;;;;;;;;;;;ACjO0C;AACgB;AACxB;;AAElC;AACO;AACP,OAAO,+GAAkC;AACzC,wBAAwB,+GAAkC;AAC1D,wBAAwB,aAAa;AACrC;AACA;;AAEA;AACO,kCAAkC,uFAAuF,IAAI;AACpI,4CAA4C,+GAAmC;AAC/E,eAAe,qGAA8B;AAC7C,mBAAmB,eAAe;;AAElC;AACA,IAAI,uEAAY;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,oBAAoB,+GAAkC;AACtD,MAAM,qEAAW,yBAAyB,OAAO;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,OAAO,KAAK,sEAAsE;AAClH;AACA;AACA,IAAI,qEAAW,yBAAyB,OAAO;AAC/C;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,IAAI,qEAAW,eAAe,UAAU,aAAa,OAAO,YAAY,QAAQ,iBAAiB,aAAa;;AAE9G;AACA;AACA;AACA;AACA,MAAM,qEAAW,iCAAiC,WAAW,WAAW,OAAO,OAAO,UAAU;AAChG;AACA;AACA;AACA;AACA,qCAAqC,6BAA6B;AAClE,OAAO;AACP;AACA;;AAEA,wCAAwC,gBAAgB;;AAExD,0DAA0D,gBAAgB;AAC1E;AACA;;;;;;;;;;;;;;;;;;;;;AC/EA;AACyC;AACI;;AAEtC;AACP;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;;AAEA,aAAa,gCAAU;AACvB,KAAK;;AAEL;AACA,UAAU,4BAAS;AACnB;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AAC+C;AACkB;AACnB;AACZ;AACY;AACI;AACZ;AACI;AACgB;AACN;AACJ;AACN;AACc;AACpB;AACyC;;AAE7E;AACA,uBAAuB,6BAAS;AAChC,qBAAqB,uDAA0B;AAC/C,qBAAqB,yCAAiB;AACtC,kBAAkB,wDAA2B;AAC7C,iBAAiB;AACjB,sCAAsC,2CAAkB;AACxD,0CAA0C,2CAAkB;AAC5D;AACA,wBAAwB,2CAAkB;AAC1C;;AAEA;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU,2CAAmB;AAC7B;AACA;AACA,UAAU,6CAAoB,aAAa,aAAa;AACxD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,8BAA8B,2CAAkB;AAChD;AACA,UAAU,4BAA4B,2CAAkB;AACxD;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP;AACA;AACA,QAAQ,+BAAW;AACnB;AACA,OAAO;AACP,GAAG;AACH;;AAEO;AACP,uCAAuC,2CAAkB;AACzD,4CAA4C,2CAAkB;;AAE9D;AACA,QAAQ,mEAA+B;AACvC,QAAQ,6EAAoC;;AAE5C;AACA;AACA,yDAAyD,oEAA+B;AACxF;;;AAGA,EAAE,6CAAoB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,6CAAoB;;AAEtB;AACA;AACA;AACA;;AAEA,0BAA0B,SAAS;;AAEnC;AACA;AACA;AACA,mBAAmB,0CAAgB;AACnC;AACA,KAAK;;AAEL;AACA,IAAI,6CAAoB;AACxB,IAAI,iCAAY;AAChB;;AAEA,QAAQ,mEAA8B;;AAEtC;AACA,0BAA0B,8BAAe,2BAA2B,oBAAoB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oCAAgB;AACvC,gCAAgC,oFAA4C,GAAG,+CAA+C;;AAE9H;AACA,EAAE,6CAAoB,cAAc,YAAY;AAChD,EAAE,+BAAW;AACb;AACA;;AAEA,EAAE,iCAAY,GAAG,yEAAyE;AAC1F,EAAE,6CAAoB;AACtB,EAAE,qCAAc;AAChB;AACA;;;;;;;;;;;;;;;;;;;;;;ACpJkC;AACY;AACY;AACX;AACE;AACc;AACP;;AAExD;AACA;;AAEA;AACA;AACA;;AAEA;AACA,IAAI,wFAAoB,aAAa,MAAM,GAAG,cAAc;AAC5D,IAAI,uEAAY,aAAa,MAAM,GAAG,cAAc;AACpD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,sHAAsC;AAC1C,4DAA4D,iBAAiB;AAC7E;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEO;AACP;AACA;AACA,iCAAiC,+GAAmC;AACpE,4BAA4B,qGAA8B;;AAE1D;AACA;AACA,qDAAqD,wBAAwB;AAC7E;AACA;AACA,IAAI,wFAAoB,aAAa,MAAM,GAAG,cAAc;AAC5D,IAAI,uEAAY,aAAa,cAAc;;AAE3C;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,wFAAoB,UAAU,YAAY;AAClD,QAAQ,uEAAY,YAAY,YAAY,GAAG,IAAI;AACnD;AACA;AACA;AACA;AACA;AACA,IAAI,wFAAoB,sBAAsB,cAAc;AAC5D,IAAI,wFAAoB;;AAExB,IAAI;AACJ,IAAI,uEAAY;AAChB;AACA;AACA;;AAEO;AACP,mEAAmE,+GAAmC;AACtG,4BAA4B,qGAA8B;AAC1D;AACA,mDAAmD,QAAQ;;AAE3D;AACA,QAAQ,6GAA+B;;AAEvC;AACA;AACA;AACA,wBAAwB;AACxB,2BAA2B,wEAAW;AACtC,MAAM,qEAAW,cAAc,OAAO;AACtC;AACA,KAAK;;AAEL,yDAAyD,8BAA8B;AACvF,EAAE,uEAAY;AACd;AACA;;AAEO;AACP,6BAA6B,6EAAiB;AAC9C;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnIO;AACP;AACA;AACA;AACA;AACA,4CAA4C,uBAAuB;AACnE;AACA;AACA,aAAa;AACb,oBAAoB;AACpB;AACA,mBAAmB;AACnB,KAAK;AACL;AACA;AACA;AACA;;;;;AChB6C;;AAEtC;AACP;;AAEA;AACA;;AAEA,sBAAsB,6EAAoC;;AAE1D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,2BAA2B;AAC3B;;AAEA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,4BAA4B,yDAA0B;AACtD;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA,2BAA2B;AAC3B;;AAEA;AACA;;;ACvEO;AACP,IAAI,uCAAuC;AAC3C,IAAI,wCAAwC;AAC5C,IAAI,2CAA2C;AAC/C,IAAI,2CAA2C;AAC/C,IAAI,qCAAqC;AACzC,IAAI,uCAAuC;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;;;AAGO;AACP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;;AAEA;;;ACrEqC;;AAErC;AACA,IAAI,wCAAwC;AAC5C,IAAI,uCAAuC;AAC3C,IAAI,uCAAuC;AAC3C,IAAI,qCAAqC;AACzC,IAAI,sCAAsC;AAC1C,IAAI,2CAA2C;AAC/C;;AAEA;AACA;AACA;;AAEA;AACA,IAAI,+BAAW;AACf,aAAa;AACb;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;;ACpCO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,2EAA2E;AACxF;;AAEA,gBAAgB,YAAY,EAAE,KAAK,EAAE,OAAO;AAC5C,KAAK;AACL;AACA;;AAEA;AACA;;;ACtBO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;AClCA;AAC0C;;AAEnC;AACP,iDAAiD,YAAY;AAC7D;AACA;AACA;AACA,YAAY,4CAAiB;AAC7B;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;ACjBwD;AACX;AACR;AACuB;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,mFAAuC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iDAAsB;AAC5C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,YAAY,mEAA+B;AAC3C;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,4BAA4B;AAC5B;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;AACA;;;AAGA;AACA,uCAAuC,YAAY;AACnD,0CAA0C,mBAAmB;;AAE7D;AACA,oCAAoC,kBAAkB;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,yEAAkC;;AAEvD;;AAEA;AACA;AACA,QAAQ,2EAAmC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC,YAAY;;AAEnD;AACA;AACA;;AAEA,6DAA6D,wCAAS;;AAEtE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iDAAiD;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,YAAY,EAAE,eAAe,EAAE,iBAAiB;AAClF;;AAEA;AACA;AACA;AACA;AACA,uCAAuC,iBAAiB,eAAe,kBAAkB;AACzF,aAAa;AACb,WAAW;AACX;AACA;AACA,kEAAkE;AAClE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,iCAAY;AAChB;AACA;AACA,MAAM,iCAAY;AAClB;AACA,KAAK;AACL,IAAI;AACJ;AACA;;AAEA;;AAEA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;;AAGH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,gEAAgE,iBAAiB;AACjF;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;;ACrjGqC;AACU;AACc;;AAET;AAC0B;AAChB;AAC1B;AACQ;AACY;AACJ;AACD;AACS;;AAE5D;AACA,2CAA2C;;AAE3C,EAAE,iCAAY,sBAAsB,OAAO;AAC3C,8CAA8C,UAAU;AACxD;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,6BAA6B,YAAY;;AAEzC;AACA,6BAA6B,mBAAmB;AAChD,6BAA6B,sBAAsB;;AAEnD;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA,uCAAuC,WAAW;;AAElD;AACA,2CAA2C,YAAY,SAAS,WAAW;AAC3E;AACA;AACA,2CAA2C,YAAY;AACvD;;AAEA;AACA,uCAAuC,WAAW;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;;AAEA,kBAAkB,iBAAiB;;AAEnC;AACA;;AAEA;AACA,kCAAkC,gDAAqB;AACvD,2CAA2C,wCAAS;;AAEpD;AACA;AACA;;AAEA;AACA,sEAAsE,gBAAgB;AACtF;AACA,oBAAoB,aAAa,YAAY,oBAAoB;AACjE,KAAK;AACL,sDAAsD,yBAAyB;;AAE/E;AACA;AACA;;AAEA;AACA,4BAA4B,sBAAsB;AAClD;;AAEA,IAAI;AACJ;AACA,oBAAoB,aAAa,YAAY,oBAAoB;AACjE,KAAK;AACL,uEAAuE,aAAa;AACpF;;AAEA,kBAAkB,qEAAmC;;AAErD;AACA;;;AAGO;;AAEP;AACA;;AAEA;AACA;AACA,MAAM,iCAAY,wBAAwB,aAAa;AACvD;AACA;AACA,MAAM;AACN,MAAM,iCAAY,mBAAmB,aAAa;AAClD,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;ACvKkC;AACY;AACC;AAKnB;AACkB;AACI;AACW;AACvB;AACI;AACU;AACkB;AACd;AACiB;;AAEzE;AACA;AACA,aAAa,sBAAsB;AACnC;AACO;AACP,uBAAuB,6BAAS;AAChC,kBAAkB,wDAA2B;AAC7C,qBAAqB,yCAAiB;;AAEtC,qBAAqB,uDAA0B;AAC/C,iBAAiB;;AAEjB;AACA;AACA,IAAI;AACJ;AACA;AACA,4CAA4C,2CAAkB;AAC9D;AACA,0BAA0B,2CAAkB;AAC5C;AACA;AACA;AACA,wEAAwE,2CAAkB;AAC1F,4EAA4E,2CAAkB;AAC9F;AACA,wCAAwC,2CAAkB;AAC1D,2CAA2C,2CAAkB;AAC7D;;AAEA;AACA,SAAS,WAAW;AACpB,SAAS,WAAW;;AAEpB,sCAAsC,2CAAkB;;AAExD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU,2CAAmB;AAC7B;AACA;AACA,UAAU,6CAAoB,aAAa,aAAa;AACxD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,WAAW,GAAG;AACd;AACA;AACA;AACA,EAAE,6CAAoB,cAAc,gBAAgB;AACpD,EAAE,+BAAW,cAAc,gBAAgB;AAC3C,+BAA+B,aAAa;;AAE5C,EAAE,6CAAoB;AACtB,cAAc,8BAA8B,mBAAmB,0CAA0C;AACzG;AACA;AACA;AACA,EAAE,+BAAW,WAAW,8BAA8B,mBAAmB,0CAA0C;AACnH;AACA,IAAI,iCAAY;AAChB;AACA;AACA;;;AAGO;AACP,mBAAmB,yDAAyB;AAC5C,QAAQ,+CAAmB;;AAE3B,gEAAgE;AAChE,uCAAuC,2CAAkB;AACzD,yCAAyC,2CAAkB;AAC3D,4CAA4C,2CAAkB;;AAE9D;AACA,EAAE,+BAAW;AACb,EAAE,6CAAoB;AACtB,QAAQ,mEAA+B;AACvC,EAAE,+BAAW;AACb,EAAE,6CAAoB;AACtB;AACA;;AAEA,6BAA6B,8BAAe;AAC5C;;AAEA;AACA,IAAI,6CAAoB;AACxB,mCAAmC,oEAAkC,yBAAyB,iBAAiB;AAC/G;AACA;AACA,MAAM,iCAAY;AAClB,MAAM,iCAAY,YAAY,sBAAsB;AACpD,MAAM,6CAAoB,aAAa,uBAAuB;AAC9D;AACA;AACA;AACA,MAAM,iCAAY;AAClB,MAAM,6CAAoB,uBAAuB,uBAAuB;AACxE,iBAAiB,mDAAyB;AAC1C;AACA;AACA,EAAE,6CAAoB;AACtB,EAAE,6CAAoB;AACtB;AACA;;AAEA,EAAE,6CAAoB;AACtB,QAAQ,yCAAe;;AAEvB;AACA,gCAAgC,gDAAoB;AACpD,EAAE,6CAAoB;AACtB;AACA,EAAE,6CAAoB;;AAEtB;AACA;AACA;AACA,EAAE,6CAAoB,qBAAqB,cAAc;AACzD;AACA,IAAI,6CAAoB,KAAK,eAAe,GAAG,aAAa,cAAc,aAAa;AACvF,IAAI,iCAAY,8BAA8B,cAAc;AAC5D,0BAA0B,gCAAM;AAChC;AACA;AACA;AACA,EAAE,iCAAY;AACd,EAAE,6CAAoB;AACtB,gEAAgE;;AAEhE;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3KA;AACuC;AACQ;;AAE/C;AAC2C;AACE;AAC+D;AACvE;AACI;;AAE1B;;AAEf;AACA;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB,8BAAU;;AAE7B,IAAI,iCAAY;AAChB;;AAEA,wBAAwB,gEAA6B,sBAAsB,gCAAgC;;AAE3G;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,0CAAsB;AACxD,8BAA8B,wDAAuB;;AAErD,MAAM,iCAAY;;AAElB;AACA,UAAU,wEAAiC;AAC3C;AACA;AACA,kCAAkC,wCAAwC;AAC1E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,gCAAU,0BAA0B,gBAAgB,2CAA2C,GAAG;AACpI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU,+BAAW,oBAAoB,uBAAuB,oBAAoB,0BAA0B;AAC9G;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0EAAkC;AAC1D;;AAEA,MAAM,iCAAY;AAClB;AACA;AACA;AACA;AACA;AACA,QAAQ,+BAAW,kBAAkB,sBAAsB;AAC3D;AACA;AACA,kBAAkB,kEAA8B;;AAEhD,0BAA0B,kEAA8B;;AAExD,MAAM,iCAAY;;AAElB,UAAU,0CAAsB;AAChC,8BAA8B,gDAA4B;AAC1D,QAAQ;AACR,8BAA8B,0CAAsB;AACpD;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA,8BAA8B,wDAAuB;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gCAAU,0BAA0B,gBAAgB,2CAA2C,GAAG;AACpI;AACA;AACA,QAAQ;AACR;AACA;AACA,kCAAkC,gCAAU,0BAA0B,gBAAgB,2CAA2C,GAAG;AACpI;AACA;AACA,QAAQ;AACR;AACA,QAAQ,+BAAW,oBAAoB,uBAAuB,oBAAoB,eAAe;AACjG;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gCAAU,mCAAmC,gBAAgB,oDAAoD,GAAG;AACtJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,0CAAsB;AAChC,8BAA8B,gDAA4B;AAC1D;;AAEA,8BAA8B,wDAAuB;;AAErD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;;AAEA;AACA,gCAAgC,gCAAU,0BAA0B,gBAAgB,2CAA2C,GAAG;AAClI;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,0CAAsB;AAChC,8BAA8B,gDAA4B;AAC1D;;AAEA,8BAA8B,wDAAuB;;AAErD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;;AAEA;AACA,gCAAgC,gCAAU,0BAA0B,gBAAgB,2CAA2C,GAAG;AAClI;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,0CAAsB;AAChC,8BAA8B,gDAA4B;AAC1D;;AAEA,8BAA8B,wDAAuB;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;;AAEA;AACA,gCAAgC,gCAAU,0BAA0B,gBAAgB,2CAA2C,GAAG;AAClI;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,UAAU,4BAAS;;AAEnB;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5YqC;AACQ;AACN;AACQ;AACc;AACC;AACI;AACG;AAC5B;;;AAG1B;;AAEfwBAAwB,gDAAqB;AAC7C;AACA;;AAEA;AACA,kCAAkC,4DAAyB;AAC3D;;AAEA;AACA,kEAAkE,0CAAgB;AAClF;AACA;AACA;;AAEA;AACA,gEAAgE,0CAAgB;AAChF;AACA;AACA;;AAEA;AACA,+DAA+D,0CAAgB;AAC/E;AACA;AACA;;AAEA;AACA,2DAA2D,0CAAgB;AAC3E;AACA;AACA;;AAEA;AACA,4DAA4D,0CAAgB;AAC5E;AACA;AACA,4DAA4D,0CAAgB;;AAE5E;AACA,6DAA6D,0CAAgB;AAC7E;AACA;AACA,6DAA6D,0CAAgB;;AAE7E;AACA,uEAAuE,0CAAgB;AACvF;AACA;AACA,uEAAuE,0CAAgB;;AAEvF;AACA,gEAAgE,0CAAgB;AAChF;AACA;AACA,gEAAgE,0CAAgB;;AAEhF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,4CAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,uEAAiC;AAChE,kCAAkC,0CAAsB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oDAAoD;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,8CAA8C;AAC1H;;AAEA;AACA,2CAA2C,qCAAmB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC,iBAAiB,IAAI;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,eAAe;AACf,oBAAoB;AACpB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,mEAAkC;AAClD,aAAa,mEAAkC;AAC/C;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAsB,sEAA+B;;AAErD,iCAAiC,gCAAiB;AAClD;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,kBAAkB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc,GAAG,6BAA6B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,iCAAY,YAAY,8BAA8B;AAC1D;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B,kBAAkB,EAAE,EAAE,cAAc;AACjE,uBAAuB,aAAa;AACpC,4BAA4B,MAAM,IAAI,oBAAoB;AAC1D;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA,mCAAmC,iCAAiC;AACpE;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,IAAI,iCAAY,YAAY,+BAA+B;;AAE3D;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,yBAAyB;AACnD,eAAe;AACf,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,sEAAsE,yBAAyB;AAC/F;AACA;AACA;AACA,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,oBAAoB;AACpB;AACA;AACA;AACA,QAAQ;;AAER;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4FAA+C;AACzE;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wEAAiC;;;AAGlD,WAAW,sEAAoC;;AAE/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,wEAAiC;AAC7E;AACA;AACA,SAAS,mEAA+B;AACxC;AACA,+BAA+B,qBAAqB,2CAA2C;AAC/F,4BAA4B,wDAAyB;AACrD;;AAEA;AACA;;AAEA;AACA;;AAEA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,wEAAiC;;AAE7E;AACA;;AAEA;AACA;;AAEA,oBAAoB,SAAS;AAC7B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,oBAAoB,SAAS;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,UAAU;AACV,UAAU,iCAAY;AACtB;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,wEAAiC;AAC7E;AACA;;AAEA;AACA;;AAEA,oBAAoB,SAAS;AAC7B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,wEAAiC;AAC7E;AACA;;AAEA;AACA;;AAEA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,wEAAiC;AAC7E;AACA;;AAEA;AACA;;AAEA,oBAAoB,SAAS;AAC7B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,oBAAoB,SAAS;AAC7B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,wEAAiC;;AAE7E;AACA;;AAEA;AACA;;AAEA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,8BAA8B;AACpD,iBAAiB,EAAE;AACnB;AACA,MAAM;AACN,sBAAsB,8BAA8B;AACpD,iBAAiB,EAAE;AACnB;AACA;;AAEA;AACA,+BAA+B,OAAO;AACtC;AACA;;;AAGA;AACA,yBAAyB,qFAA0C;AACnE,mBAAmB,2DAA8B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEA,oBAAoB,SAAS;AAC7B;;AAEA;AACA;AACA;AACA,iCAAiC,iBAAiB,WAAW,qBAAqB,eAAe;;AAEjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wEAAiC;;AAEpD;AACA,MAAM,iFAAsC;AAC5C,sBAAsB,wDAAyB,kBAAkB,YAAY,aAAa,SAAS;AACnG;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,UAAU,+BAAW,yCAAyC,mDAAmD;AACjH;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,WAAW,GAAG,eAAe;AACxC;AACA;;AAEA;AACA,yBAAyB,qFAA0C;AACnE,mBAAmB,2DAA8B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;ACxgCuC;AAC8B;AAChC;;AAEtB,0BAA0B,QAAQ;;AAEjD;AACA;AACA;AACA;AACA,mBAAmB,wDAA6B;AAChD;AACA,4BAA4B,oEAAmC,EAAE,8DAAgC;AACjG,KAAK;AACL;AACA;AACA,mBAAmB,wDAA6B;AAChD;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,uCAAuC,4DAAyB;;AAEhE;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,4CAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;ACvNqC;AACA;AACM;;AAE5B;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;;AAEA;AACA,gCAAgC,WAAW;AAC3C;AACA;AACA;AACA;AACA;;AAEA,IAAI,iCAAY,cAAc,kBAAkB,YAAY,WAAW;AACvE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM,+BAAW,oBAAoB,YAAY,OAAO,iBAAiB;AACzE;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,MAAM,iCAAY,gBAAgB,iBAAiB,wBAAwB,wBAAwB,GAAG,KAAK;AAC3G;AACA;AACA;AACA;AACA,OAAO;;AAEP,0FAA0F,qBAAqB;AAC/G;AACA,QAAQ,iCAAY,gBAAgB,iBAAiB,gBAAgB,wBAAwB,GAAG,KAAK;AACrG;AACA;AACA,wFAAwF,UAAU,GAAG,gBAAgB;AACrH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM,+BAAW,oBAAoB,YAAY,OAAO,iBAAiB;AACzE;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,MAAM,iCAAY,8BAA8B,iBAAiB,qBAAqB,wBAAwB,GAAG,KAAK;AACtH;AACA;AACA;AACA;AACA,OAAO;;AAEP,0FAA0F,qBAAqB;AAC/G;AACA,QAAQ,iCAAY,8BAA8B,iBAAiB,aAAa,wBAAwB,GAAG,KAAK;AAChH;AACA;AACA,wFAAwF,UAAU,GAAG,gBAAgB;AACrH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,iCAAY;AAChB;AACA,KAAK;AACL;AACA;AACA,MAAM,iCAAY;AAClB;AACA;AACA,OAAO;;AAEP,wBAAwB,uCAAuC;AAC/D;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,MAAM,iCAAY,cAAc,YAAY;AAC5C;AACA;AACA;;;;;;;;;ACpJ+C;AACR;AACF;AACI;;;AAG1B,+BAA+B,yBAAU;;AAExD;AACA;AACA;AACA;AACA;;AAEA,kCAAkC,8EAAoC;;AAEtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,8EAAoC;AAC1E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA,MAAM,iCAAY,kBAAkB,aAAa;;AAEjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,eAAe,IAAI,aAAa;AAC/C;AACA,uBAAuB,0CAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,MAAM;AACN,MAAM,+BAAW;AACjB,6CAA6C,UAAU,kCAAkC,YAAY;AACrG;AACA;AACA,MAAM,iCAAY;AAClB;AACA;;AAEA;AACA,IAAI,iCAAY,+BAA+B,kDAAkD;AACjG;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,MAAM,iCAAY,0CAA0C,iCAAiC;AAC7F;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;;AAEA;;;AC5IqC;AACgB;AACZ;AACE;;;AAG5B;;AAEf,gBAAgB,+BAA+B,IAAI;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,yBAAU;AAClC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,IAAI,iCAAY,mCAAmC,2BAA2B;AAC9E;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,aAAa,oCAAoC;AACjD,MAAM;AACN;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,oCAAoC;AAC/C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,WAAW,8BAA8B;AACzC,gCAAgC,iCAAiC;AACjE,iCAAiC,8BAA8B;AAC/D;AACA,yCAAyC,UAAU,UAAU,+CAA+C,OAAO,8BAA8B;AACjJ;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,WAAW,IAAI,8BAA8B;;AAEzE;;AAEA;AACA;AACA;AACA,WAAW,oCAAoC;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,WAAW,8BAA8B;AACzC,gCAAgC,iCAAiC;AACjE,iCAAiC,8BAA8B;AAC/D;AACA,yCAAyC,aAAa,aAAa,+CAA+C,OAAO,8BAA8B;AACvJ;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,8BAA8B,iCAAiC;AAC/D,+BAA+B,8BAA8B;AAC7D;AACA,uCAAuC,aAAa,aAAa,+CAA+C,OAAO,8BAA8B;AACrJ;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA,MAAM,iCAAY,kCAAkC,sBAAsB;AAC1E;AACA;AACA;AACA,QAAQ,iCAAY,qCAAqC,8BAA8B;AACvF;AACA;AACA,MAAM,iCAAY,yBAAyB,sBAAsB,KAAK,wBAAwB;AAC9F,KAAK;AACL;AACA;;AAEA;;;;;AC3L+C;AACR;AACF;AACI;AACY;AACA;AACZ;AACiB;;;AAG3C;;AAEf,gBAAgB,6CAA6C,IAAI;AACjE;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oDAAoD,2CAAkB;;AAEtE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,gDAAqB;AACxC,2BAA2B,yBAAU;AACrC;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,IAAI,iCAAY,2CAA2C,8BAA8B;AACzF;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,oCAAoC;AACjD,MAAM;AACN;AACA;AACA;;AAEA;AACA,IAAI,iCAAY;AAChB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,8BAA8B;AACrH,UAAU;AACV;AACA;AACA,OAAO;AACP;AACA;;AAEA,sCAAsC,sBAAsB,IAAI;AAChE;AACA,IAAI,iCAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+BAAW,mDAAmD,UAAU,6CAA6C,iCAAiC;AAClK;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ,iCAAY,6BAA6B,UAAU;AAC3D;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,iCAAY;AAChB,iCAAiC,gBAAgB;AACjD;AACA;AACA,KAAK;AACL;AACA;;AAEA,IAAI,iCAAY;AAChB;AACA;AACA,KAAK;;AAEL;AACA,IAAI,iCAAY;AAChB;AACA;AACA;AACA;AACA;AACA,yCAAyC,uCAAuC,OAAO,8BAA8B;AACrH;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA,IAAI,iCAAY;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,iCAAY;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,4DAAyB;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,4DAAyB;AACpD;AACA,wDAAwD,WAAW,GAAG,YAAY;AAClF,UAAU;AACV,gFAAgF,WAAW,GAAG,YAAY;AAC1G;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,MAAM,iCAAY,aAAa,cAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,UAAU,4BAAW;AACrB;AACA,sBAAsB,gCAAe;AACrC;AACA;;;ACvP6C;AACE;AACV;AACE;AACY;AACR;AACe;;AAE3C;;AAEf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,+DAA+D,iBAAiB,GAAG,gBAAgB;AACnG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAAO;;AAEP;AACA;;;AAGA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;;AAEA,oCAAoC,8BAAe,GAAG,mFAAmF;AACzI;;AAEA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;;;AAGA;AACA;AACA;AACA;AACA,4BAA4B,kEAA8B;AAC1D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,0BAA0B,wDAAyB;AACnD;AACA,oCAAoC,8BAAe,GAAG,0GAA0G;AAChK;;AAEA,+CAA+C,YAAY;AAC3D;AACA,OAAO;AACP,IAAI,iCAAY;AAChB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8DAA8D,kEAA8B;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wCAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iCAAY,yBAAyB,YAAY;;AAEzD,8BAA8B,wBAAS,GAAG,+EAA+E;AACzH;AACA,yCAAyC,YAAY;;AAErD;AACA,OAAO;;AAEP,IAAI,iCAAY;AAChB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR,8BAA8B,mFAAuC;AACrE;AACA;AACA,8BAA8B,mFAAuC;AACrE;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;;AAEL,UAAU,4BAAW;AACrB,mCAAmC,gCAAe;AAClD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4BAA4B,WAAW;AACvC;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM,+BAAW,oBAAoB,cAAc,OAAO,iBAAiB;AAC3E;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA,MAAM,iCAAY,gBAAgB,iBAAiB,wBAAwB,wBAAwB,GAAG,KAAK;AAC3G;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,QAAQ,iCAAY,gBAAgB,iBAAiB,gBAAgB,wBAAwB,GAAG,KAAK;AACrG;AACA;AACA,wFAAwF,YAAY,GAAG,gBAAgB;AACvH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,gCAAgC;AACjH,UAAU;AACV;AACA;AACA,mFAAmF,eAAe;AAClG;AACA,UAAU;AACV;AACA;AACA,mFAAmF,UAAU;AAC7F;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,iCAAY;AAChB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,UAAU,iCAAY;AACtB;AACA;AACA,WAAW;AACX,4BAA4B,yCAAyC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1S6C;AAC+D;AAC5G;AACyE;AAC1B;AACY;AACmB;AACvC;AACF;AACE;AACY;AACN;;AAEtC;;AAEP;AACA,IAAI,iCAAY,gCAAgC,sBAAsB;AACtE;;AAEA;;AAEA;AACA,WAAW,4CAAiB,cAAc,6BAA6B;AACvE,YAAY,0CAAgB,cAAc,UAAU;AACpD;AACA,cAAc,4CAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,8BAA8B,gDAAqB;AACnD;AACA;AACA,0CAA0C,oDAAqB,qBAAqB;AACpF;AACA;;AAEA,gBAAgB,iIAAiI,IAAI;AACrJ;AACA;AACA;AACA,gBAAgB,0CAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oDAAqB,qBAAqB;AAC1E;AACA;AACA,uBAAuB,SAAS;AAChC;;AAEA,4BAA4B,+CAAgB,GAAG,sEAAsE;AACrH,qCAAqC,+CAAgB,GAAG,sDAAsD;AAC9G;AACA,aAAa,wCAAS;AACtB,sBAAsB,wCAAS;AAC/B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,gDAAoB;AACrD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI,iCAAY;AAChB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,cAAc,wDAA4B;AAC1C,YAAY,8BAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,0CAAgB,CAAC,mFAAuC,wCAAwC;AACjH;AACA,6BAA6B,UAAU,EAAE,QAAQ;AACjD;AACA,qBAAqB,wDAAyB;AAC9C,cAAc,8BAAe,GAAG,kHAAkH;AAClJ,cAAc,wBAAS,GAAG,mFAAmF;AAC7G;AACA;AACA;AACA;AACA,mBAAmB,4CAAiB;AACpC;AACA;AACA,IAAI,iCAAY;AAChB;;AAEA;AACA;AACA;AACA;;AAEA,wEAAwE,OAAO;;AAE/E;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,yBAAyB;AACjF,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yGAAyG,sBAAsB;AAC/H;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,mBAAmB,4CAAwB,sBAAsB,iBAAiB;AAClF;AACA;AACA;AACA,wGAAwG,sBAAsB;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,wCAAwC,kDAAkD,IAAI;AAC9F;AACA;AACA;AACA,mBAAmB,yCAAqB;AACxC,kCAAkC,cAAc;AAChD,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,qBAAqB,mCAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA,aAAa,0CAA0C;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B,6BAA6B;AACvD,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,iCAAY,aAAa,WAAW;AAC9C;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,8BAA8B,8DAA4B;AAC1D,uBAAuB,sDAAwB;;AAE/C,gCAAgC,8DAA4B;AAC5D,2BAA2B,sDAAwB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,gCAAe;AACrC,yBAAyB,gCAAe;AACxC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,IAAI,iCAAY,qBAAqB,UAAU;AAC/C;AACA;AACA;AACA,KAAK;AACL;;AAEA;;;ACvd+C;AACR;AACF;AACU;;AAExC;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,IAAI,iCAAY;AAChB;AACA;AACA;AACA,kCAAkC,YAAY,IAAI,cAAc;AAChE;AACA,UAAU;AACV,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,MAAM,iCAAY,iBAAiB,6BAA6B;AAChE;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;;AAEA;AACA,MAAM,iCAAY,0BAA0B,iBAAiB;;AAE7D;AACA;;AAEA;AACA,MAAM,oDAAqB;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,gEAA6B;AACrD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;AACN,MAAM,+BAAW,IAAI,kBAAkB;AACvC;AACA;;AAEA;;;AAGA;;;ACzIsE;AACpC;AACc;AACF;AACA;AACI;AACa;AACrB;AACJ;AACoB;AACU;AACG;AACK;AACxC;AACsB;AACd;AAC0B;;;AAGvD;AACf,gBAAgB,4FAA4F,IAAI;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2CAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB,cAAc;AACd,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,mEAAkC;AAC5D,2BAA2B,mEAAkC;;AAE7D;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA,yGAAyG,iBAAiB;AAC1H;;;AAGA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,eAAe,QAAQ;AACvB;;AAEA,2BAA2B,8CAA8C,IAAI;AAC7E,yBAAyB,6BAAS;AAClC,uBAAuB,yCAAiB;AACxC;AACA,uBAAuB,uDAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,WAAW;AACjD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;;AAEA,wBAAwB,8CAAkB;;AAE1C;AACA,YAAY,8CAAe;;AAE3B,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;AACA;AACA,QAAQ,iCAAY,8CAA8C,+DAA+D;AACjI,QAAQ;AACR;AACA,UAAU,2CAAmB,iCAAiC,iBAAiB;AAC/E;AACA;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sDAAsD,mBAAmB,cAAc,YAAY;AACnG;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,8DAA8D,uDAAuD;AACrH;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gGAAgG,4DAA2B;AAC3H,MAAM,iCAAY,oCAAoC,0BAA0B;AAChF;AACA;AACA,QAAQ,iCAAY;AACpB;AACA;;AAEA,MAAM,iCAAY;AAClB;AACA,MAAM,iCAAY;AAClB,8BAA8B,qBAAqB;AACnD;AACA,MAAM,iCAAY;AAClB,0CAA0C,uBAAuB;AACjE;AACA;AACA,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB,kCAAkC,kBAAkB;AACpD;AACA;AACA,MAAM,iCAAY;AAClB,8BAA8B,qBAAqB;AACnD;AACA,MAAM,iCAAY;AAClB;AACA;AACA,MAAM,iCAAY;AAClB;AACA,MAAM,iCAAY;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qDAAqD,2CAAkB;AACvE;AACA;;AAEA;AACA;;AAEA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;AACA;;AAEA,gCAAgC,qDAAqD,IAAI;AACzF;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,0CAAgB,IAAI,MAAM,GAAG,KAAK,QAAQ,0CAAgB;AACxE;AACA,eAAe,0CAAgB,WAAW,0CAAgB;AAC1D,OAAO;AACP;AACA,QAAQ,iCAAY,UAAU,aAAa,IAAI,YAAY;AAC3D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,SAAS,eAAe;AACvD;AACA;;AAEA;AACA;AACA,+BAA+B,SAAS,eAAe;AACvD;AACA;;AAEA;AACA;AACA,+BAA+B,SAAS,eAAe;AACvD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,SAAS,eAAe;AACvD;AACA;;AAEA;AACA,0BAA0B,oCAAgB;AAC1C,uBAAuB,oCAAgB;AACvC,yBAAyB,oCAAgB;AACzC,wBAAwB,oCAAgB;AACxC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,8DAA4B;AACpD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;;;;;;;;;;;;;;;;;AC9YkC;AACqB;AACD;AACZ;AACJ;AACgC;AACpB;;AAElD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA,OAAO;AACP;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA,OAAO;AACP;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA,OAAO;AACP;AACA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,EAAE,qHAAqC;AACvC;AACA,6BAA6B,cAAc;AAC3C;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA,GAAG;AACH,EAAE,+GAAkC;AACpC;AACA,0BAA0B,WAAW;AACrC;AACA;AACA;AACA;AACA,2CAA2C,WAAW;AACtD;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,EAAE,2GAA+B;AACjC,IAAI,uEAAY,kCAAkC,aAAa;AAC/D;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;AACA,IAAI,uEAAY,cAAc,cAAc,KAAK,eAAe;AAChE;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA,EAAE,iHAAmC;AACrC;AACA;AACA,oBAAoB,iHAAmC;AACvD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA,EAAE,uHAAsC;AACxC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,gBAAgB,GAAG,4BAA4B;AACnH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,4EAAc;AAC7C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2CAA2C,iHAAmC;AAC9E,eAAe;AACf,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,EAAE,uEAAY;AACd;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4DAA4D,WAAW;;AAEvE;AACA;;AAEA;AACA;;AAEA;AACA,yCAAyC,+BAA+B,MAAM,gCAAgC;AAC9G;;AAEA;AACA,uCAAuC,+BAA+B,iBAAiB,uCAAuC,kBAAkB,sCAAsC;AACtL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,EAAE,uEAAY;AACd;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,YAAY;AACrC;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEO;AACP;;AAEA;AACA,IAAI,uEAAY;AAChB;;AAEA,yBAAyB,yGAA8B,oCAAoC,WAAW;;AAEtG;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP,IAAI,uEAAY;AAChB,+BAA+B,sEAAiB,GAAG,0CAA0C;AAC7F;AACA,IAAI,uEAAY;;AAEhB;AACA,IAAI,uEAAY;;AAEhB,oCAAoC,mFAAmB,OAAO,kDAAkD;AAChH;AACA,yDAAyD,wBAAwB;;AAEjF,IAAI;AACJ,IAAI,uEAAY;AAChB,IAAI,uEAAY;AAChB,IAAI;AACJ;AACA;AACA;;;;;;;;;;;;;;;;;ACljBA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAU;AACV;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,mDAAmD,gCAAgC,IAAI,+BAA+B;AACtH;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChKwD;AACJ;AACmD;;AAErE;AACwB;AAC4B;AAChD;;AAEQ;AACA;AACJ;AACU;AACM;AACtB;AACyC;;AAE9D;;AAEf;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA,kCAAkC;AAClC,6EAA6E,IAAI;AACjF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,uCAAwB,GAAG,kBAAkB;AAC3E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,yBAAyB,6BAAS;AAClC,oBAAoB,wDAA2B;AAC/C,uBAAuB,yCAAiB;;AAExC;AACA;AACA;AACA;AACA;;AAEA,wCAAwC,2CAAkB;;AAE1D;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA,YAAY,iCAAY;AACxB;AACA;AACA;AACA,YAAY,2CAAmB;AAC/B;AACA;AACA,SAAS;AACT;AACA,UAAU,+BAAW,wBAAwB,oBAAoB;AACjE;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU,sCAAc;AACxB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6CAA6C,yBAAM;AACnD;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA,QAAQ,sCAAc;AACtB;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC;;AAEnC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM,iCAAY,IAAI,kBAAkB,IAAI,iBAAiB;AAC7D;AACA;;AAEA,iBAAiB,oCAAgB;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,qEAAmC;AACxD,eAAe,YAAY;;AAE3B,qBAAqB,0DAA8B;;AAEnD;AACA;AACA,cAAc,kFAA2C;AACzD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,kDAAsB;;AAErC;AACA;;AAEA,IAAI,iCAAY,cAAc,UAAU;AACxC;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;ACjSkC;AACO;AACK;AACA;AACJ;AACU;AACd;AACgC;;AAEtE;AAMqC;AACK;AACc;;AAEzC;;AAEf;AACA,IAAI,qEAAW,SAAS,wBAAwB;AAChD;;AAEA;AACA;AACA;AACA,4CAA4C,iFAAkB;AAC9D;AACA,0BAA0B,iFAAkB;AAC5C;AACA;AACA;AACA,0BAA0B,iFAAkB;AAC5C;AACA;AACA,0BAA0B,iFAAkB;AAC5C,yCAAyC,iFAAkB;AAC3D,4CAA4C,iFAAkB;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uEAAY;AAChB;AACA;;AAEA,iBAAiB,yFAAyF,IAAI;AAC9G;AACA;AACA;AACA;AACA;AACA,iCAAiC,uFAAoB;AACrD,mDAAmD,iFAAkB;AACrE;;AAEA;AACA;AACA,aAAa,GAAG;AAChB;AACA;AACA,oCAAoC;AACpC;AACA;AACA,yBAAyB,oEAAS;AAClC,oBAAoB,kGAA2B;AAC/C,uBAAuB,mFAAiB;;AAExC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wCAAwC,iFAAkB;;AAE1D;AACA,WAAW,WAAW;AACtB,WAAW,WAAW;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA,2CAA2C,aAAa;AACxD,YAAY,uEAAY;AACxB;AACA;AACA;AACA,YAAY,qFAAmB;AAC/B;AACA;AACA,SAAS;AACT;AACA,sCAAsC,sBAAsB;AAC5D,UAAU,qEAAW,cAAc,sBAAsB;AACzD;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,qEAAW;AACf;AACA,sBAAsB,aAAa,EAAE,kCAAkC;AACvE;AACA,kCAAkC,EAAE,GAAG,eAAe,GAAG,KAAK;AAC9D;AACA,QAAQ,uEAAY,wBAAwB,EAAE,GAAG,eAAe,EAAE,aAAa;AAC/E,QAAQ,qEAAW,kBAAkB,KAAK;AAC1C,+BAA+B,+DAAU,YAAY,+EAA+E;AACpI;AACA;AACA,QAAQ,2EAAc,kBAAkB,KAAK;AAC7C,QAAQ;AACR,QAAQ,uEAAY,mBAAmB,KAAK;AAC5C,QAAQ,uEAAY;AACpB,QAAQ,uEAAY;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,IAAI,2EAAc;;AAElB;AACA,gBAAgB,sBAAsB,mBAAmB,kCAAkC;AAC3F;AACA;AACA;AACA,IAAI,qEAAW,WAAW,sBAAsB,mBAAmB,kCAAkC;AACrG;AACA,MAAM,uEAAY;AAClB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,qEAAW;AACf;AACA,2CAA2C,iFAAkB;AAC7D,8CAA8C,iFAAkB;;AAEhE;AACA,IAAI,qEAAW;AACf;AACA;AACA;AACA,UAAU,6GAA8B;AACxC,UAAU,6GAA+B;AACzC,UAAU,6GAA+B;;AAEzC;AACA;AACA;AACA;;AAEA,IAAI,qEAAW;AACf;AACA;AACA;AACA;;AAEA,4BAA4B,yEAAe;AAC3C;;AAEA,IAAI,uEAAY;AAChB;AACA;AACA,+GAA+G,iBAAiB;AAChI;AACA;AACA,QAAQ,uEAAY;AACpB,QAAQ,uEAAY,YAAY,sBAAsB;AACtD,mCAAmC,uBAAuB;AAC1D;AACA;AACA;AACA,QAAQ,uEAAY;AACpB,6CAA6C,uBAAuB;AACpE,gCAAgC,8FAAyB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,oFAAe;AACzB,UAAU,wFAAmB;;AAE7B,IAAI,2EAAc;AAClB,IAAI,uEAAY;AAChB;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;AACA,IAAI,qEAAW;;AAEf;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,cAAc;AACzD;AACA,yBAAyB,eAAe,GAAG,aAAa,cAAc,cAAc;AACpF,MAAM,uEAAY,cAAc,cAAc;AAC9C,4BAA4B,2EAAM;AAClC;AACA;AACA;AACA,IAAI,uEAAY;AAChB;;AAEA,IAAI,2EAAc;AAClB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AClS6C;AAC4B;AAC1B;AACR;AACF;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;;AAEf,gBAAgB,kDAAkD;AAClE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF,uBAAuB,GAAG,YAAY;AAC3H;AACA;AACA;AACA,0BAA0B,2GAAgC;AAC1D;AACA;AACA,QAAQ,2GAAgC;AACxC;AACA;AACA,QAAQ,2GAAgC;AACxC;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF,uBAAuB,GAAG,YAAY;AAC3H;AACA;AACA;AACA,0BAA0B,yHAAuC;AACjE;AACA;AACA;AACA,eAAe,qBAAqB,GAAG,qBAAqB;AAC5D;AACA;AACA;AACA;AACA,UAAU,yHAAuC;AACjD;AACA;AACA;AACA,UAAU,yHAAuC;AACjD;AACA;AACA;AACA;AACA,eAAe,cAAc,GAAG,cAAc;AAC9C;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF,uBAAuB,GAAG,YAAY;AAC3H;AACA;AACA;AACA,0BAA0B,iHAAmC;AAC7D;AACA;AACA,QAAQ,iHAAmC;AAC3C;AACA;AACA,QAAQ,iHAAmC;AAC3C;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qFAAqF,uBAAuB,GAAG,YAAY;AAC3H;AACA;AACA;AACA,0BAA0B,yHAAuC;AACjE;AACA;AACA;AACA,eAAe,wBAAwB,GAAG,yBAAyB;AACnE;AACA;AACA;AACA;AACA,UAAU,yHAAuC;AACjD;AACA;AACA;AACA,UAAU,yHAAuC;AACjD;AACA;AACA;AACA;AACA,eAAe,iBAAiB,GAAG,kBAAkB;AACrD;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF,uBAAuB,GAAG,YAAY;AAC3H;AACA;AACA;AACA,+BAA+B,2GAAgC;AAC/D;AACA,8BAA8B,yHAAuC;AACrE;;AAEA;AACA,QAAQ,2GAAgC;AACxC;AACA;AACA,QAAQ,2GAAgC;AACxC;AACA;AACA;AACA,OAAO;;AAEP;AACA,QAAQ,yHAAuC;AAC/C;AACA;AACA,QAAQ,yHAAuC;AAC/C;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,0CAA0C,iDAAiD,IAAI;AAC/F;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA,oBAAoB,qHACP;AACb,eAAe,kGAAyB,wBAAwB,YAAY,aAAa,iBAAiB;AAC1G,OAAO;AACP,iCAAiC,cAAc;;AAE/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,2GAAgC;AACxC;AACA;AACA,QAAQ,2GAAgC;AACxC;;AAEA;;AAEA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;;AAEA,2DAA2D,MAAM;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;;AAER;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA,sDAAsD,MAAM;AAC5D,iDAAiD,OAAO;;AAExD;AACA,sDAAsD,OAAO;AAC7D,6DAA6D,MAAM;AACnE,iDAAiD,OAAO;;AAExD;AACA;AACA;AACA;AACA,2DAA2D,MAAM;AACjE,KAAK;;AAEL;AACA;;;AAGA;AACA,0BAA0B,kGAAyB;;AAEnD;;AAEA;AACA;AACA,UAAU;AACV;;AAEA;AACA,uBAAuB,iHAAmC;AAC1D;AACA,yBAAyB,iHAAmC;AAC5D,yCAAyC,qBAAqB,GAAG,eAAe;AAChF,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;;AAER;;AAEA;AACA,6DAA6D,OAAO;AACpE,uDAAuD,OAAO;;AAE9D;AACA,4DAA4D,OAAO;AACnE,mEAAmE,MAAM;AACzE,uDAAuD,OAAO;;AAE9D;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,iEAAiE,MAAM;AACvE,KAAK;;AAEL;AACA;;AAEA;AACA,4BAA4B,kGAAyB;AACrD;AACA;AACA,QAAQ,yHACO;AACf;;AAEA;;AAEA;AACA;AACA,UAAU;AACV;;AAEA;AACA,mBAAmB,yHACN;AACb;AACA;AACA,aAAa,cAAc,GAAG,cAAc;AAC5C,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;;AAER;;AAEA;AACA,oDAAoD,OAAO;AAC3D,8CAA8C,OAAO;;;AAGrD;AACA,mDAAmD,OAAO;AAC1D,0DAA0D,MAAM;AAChE,8CAA8C,OAAO;;AAErD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,2DAA2D,MAAM;AACjE,QAAQ;;AAER;AACA;AACA;AACA;AACA,wDAAwD,MAAM;AAC9D,KAAK;;AAEL;AACA;;AAEA;AACA,4BAA4B,kGAAyB;AACrD;AACA;AACA,QAAQ,yHACO;AACf;;AAEA;;AAEA;AACA;AACA,UAAU;AACV;;AAEA;AACA,oBAAoB,yHACP;AACb;AACA;AACA,aAAa,kBAAkB,GAAG,mBAAmB;AACrD,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;;AAER;;AAEA;AACA;AACA;;AAEA;AACA,sDAAsD,OAAO;AAC7D,gDAAgD,OAAO;;AAEvD;AACA,qDAAqD,OAAO;AAC5D,4DAA4D,MAAM;AAClE,gDAAgD,OAAO;;AAEvD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,2DAA2D,MAAM;AACjE,QAAQ;;AAER;AACA;AACA;AACA;AACA,0DAA0D,MAAM;AAChE,KAAK;;AAEL;AACA;;AAEA;AACA,4BAA4B,kGAAyB;AACrD;AACA;AACA,QAAQ,yHACO;AACf;;AAEA;;AAEA;AACA;AACA,UAAU;AACV;;AAEA;AACA,qBAAqB,yHACR;AACb;AACA;AACA,aAAa,mBAAmB,GAAG,oBAAoB;AACvD,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;;AAER;;AAEA;AACA,wDAAwD,OAAO;AAC/D,kDAAkD,OAAO;;;AAGzD;AACA,uDAAuD,OAAO;AAC9D,8DAA8D,MAAM;AACpE,kDAAkD,OAAO;;AAEzD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,+DAA+D,MAAM;AACrE,QAAQ;;AAER;AACA;AACA;AACA;AACA,4DAA4D,MAAM;AAClE,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD,cAAc,kBAAkB,aAAa;AAC9F;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL,iFAAiF,MAAM;AACvF,4EAA4E,KAAK;AACjF;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B,kGAAyB,oBAAoB,mBAAmB;AAC9F;AACA,4BAA4B,4FAA6B;AACzD,uEAAuE,oDAAoD,GAAG,aAAa;AAC3I;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;;AAER;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,QAAQ;;AAER;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,qCAAqC;AAC5D;AACA,iBAAiB;AACjB,OAAO;AACP,gBAAgB,mBAAmB;AACnC;;AAEA;AACA,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,6CAA6C,qCAAqC;;AAElF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,oBAAoB,sGAAyB;AAC7C;AACA,iBAAiB;AACjB,OAAO;AACP,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,yBAAyB,eAAe;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,iHAAmC;AAC7D;AACA,8BAA8B,iHAAmC;AACjE;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,yFAAuB;AAClD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,2GACX;AACf;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B,2GAAgC;AAC1D;AACA,4BAA4B,2GAAgC;AAC5D;AACA,SAAS;AACT,2BAA2B,yFAAuB;AAClD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,2GACX;AACf;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iHAAmC;AAC/D;AACA;AACA;AACA,wDAAwD,sBAAsB,GAAG,gBAAgB;AACjG;AACA;AACA;AACA;AACA,yBAAyB,yFAAuB;AAChD;AACA;AACA;AACA;AACA,gCAAgC,iHAAmC;AACnE;AACA;AACA;AACA,4DAA4D,sBAAsB,GAAG,gBAAgB;AACrG;AACA;AACA,aAAa;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,yFAAuB;AAC9C;AACA;AACA;AACA;AACA,8BAA8B,iHAAmC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,0DAA0D,sBAAsB,GAAG,gBAAgB;AACnG;AACA;AACA,WAAW;AACX,UAAU;AACV;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iHAAmC;AAC/D;AACA,wDAAwD,sBAAsB,GAAG,gBAAgB;AACjG;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,yFAAuB;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,4BAA4B,iHAAmC;AAC/D;AACA,wDAAwD,sBAAsB,GAAG,gBAAgB;AACjG;AACA;AACA;;AAEA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB,yFAAuB;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,oFAAgB;AAC1B;AACA;AACA;;AAEA;AACA,wBAAwB,yHAAuC;AAC/D;AACA,qCAAqC,oFAAgB;AACrD;AACA;;AAEA,4BAA4B,6HAAyC;AACrE;AACA,UAAU,oFAAgB;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,eAAe,GAAG,eAAe;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,yFAAuB;AACjD;AACA;AACA;AACA;AACA;AACA,sCAAsC,UAAU;AAChD,UAAU;AACV,UAAU,uEAAY,kCAAkC,WAAW;AACnE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yFAAuB;AACrD;AACA;AACA;AACA;AACA,0CAA0C,UAAU;AACpD;AACA,WAAW;AACX,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yFAAuB;AACrD;AACA;AACA;AACA,wCAAwC,UAAU;AAClD;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,wBAAwB,6HACb;AACX;AACA;AACA;AACA,KAAK,IAAI;;AAET;AACA;AACA,UAAU,oFAAgB;AAC1B;AACA;AACA;;AAEA;AACA,wBAAwB,yHAAuC;AAC/D;AACA,qCAAqC,oFAAgB;AACrD;AACA;;AAEA,4BAA4B,6HAAyC;AACrE;AACA;AACA;AACA,UAAU,oFAAgB;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,kBAAkB,GAAG,mBAAmB;AACrD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,yBAAyB,6HACd;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,IAAI;;AAET;AACA;AACA,UAAU,oFAAgB;AAC1B;AACA;AACA;;AAEA;AACA,kBAAkB,yHAAuC;AACzD;AACA;AACA,sCAAsC,oFAAgB;AACtD,cAAc,wBAAwB,OAAO,oFAAgB;AAC7D,kBAAkB,wBAAwB,MAAM,oFAAgB;AAChE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,kBAAkB,GAAG,mBAAmB;AACrD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yFAAuB;AAChD;AACA;AACA;AACA,uDAAuD,MAAM;AAC7D;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yFAAuB;AACrD;AACA;AACA;AACA,uDAAuD,UAAU;AACjE;AACA,YAAY;AACZ,4BAA4B,6HAAyC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iBAAiB,GAAG,kBAAkB;AAC3D;AACA,aAAa;AACb;AACA,YAAY;AACZ,YAAY,qEAAW,iCAAiC,eAAe;AACvE;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,6HAAyC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB,GAAG,kBAAkB;AACrD;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iIAA2C;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,KAAK,GAAG,MAAM;AACpD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,WAAW;AACX;AACA,mCAAmC,iIAA2C;AAC9E;AACA;AACA;AACA;AACA;AACA,6BAA6B,8BAA8B;AAC3D;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,GAAG;AACnC;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,gCAAgC,GAAG;AACnC;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,gCAAgC,GAAG;AACnC;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,gCAAgC,GAAG;AACnC;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,GAAG;AAC/B;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,yBAAyB,GAAG;AAC5B,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;;AAEA;;AAEA;;;;;;;;;;;;;;ACj0D6C;AACN;AACO;;AAE9C,yHAAwC;AACxC;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA,mHAAqC;AACrC;AACA;;AAEA,mHAAqC;AACrC;AACA;;AAEA,iHAAoC;AACpC;AACA;;AAEA,iHAAoC;AACpC;AACA;;AAEA,2HAAyC;AACzC;AACA,0EAA0E,iCAAiC;AAC3G,sEAAsE,+BAA+B;AACrG,0EAA0E,iCAAiC;AAC3G,wEAAwE,gCAAgC;AACxG,sEAAsE,+BAA+B;AACrG,sEAAsE,+BAA+B;AACrG,oEAAoE,8BAA8B;AAClG,0EAA0E,iCAAiC;AAC3G;AACA;;AAEA,6HAA0C;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2HAAyC;AACzC;AACA,oBAAoB,mHAAoC;AACxD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEO;AACP;;AAEA;;AAEA;AACA;;AAEA;AACA,iCAAiC,QAAQ;AACzC,4CAA4C,QAAQ;AACpD;;AAEA;AACA,gCAAgC,eAAe;AAC/C,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,2BAA2B;AAC9D;AACA,mCAAmC,kCAAkC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kCAAkC;AACrE;AACA,mCAAmC,yCAAyC;AAC5E;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,kGAAuB;AAC9C;AACA;AACA;AACA;AACA;;AAEA,yHAAwC;AACxC;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,2HAAyC;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,+HAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1LqC;;AAErC;AACA;AACA;AACA,WAAW,UAAU;AACrB;AACA;AACA,2BAA2B,oBAAoB,GAAG,sBAAsB;AACxE;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,MAAM,QAAQ;AACd,MAAM,QAAQ;AACd,MAAM,SAAS;AACf,MAAM,UAAU;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB,GAAG,4BAA4B;AACnE;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,GAAG;AACd;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,uEAAY;AAClB,WAAW,oDAAoD,kBAAkB,gCAAgC;AACjH;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM,uEAAY,oBAAoB,gCAAgC,GAAG,kCAAkC;AAC3G;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA,IAAI,uEAAY,IAAI,sDAAsD,QAAQ,UAAU,IAAI,UAAU;AAC1G,IAAI,uEAAY;AAChB;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;;;;;;;;;;;;;;;;;AC1K6C;AACA;AACU;AAClB;AACK;AACc;AAC+B;AAC9B;;AAE1C;;AAEf,iCAAiC;AACjC,sCAAsC,OAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B;AAC5B,6BAA6B;AAC7B,mCAAmC;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,oGAA4B;AAC7C,kBAAkB,kHAAmC;AACrD,sBAAsB,mFAAiB;AACvC;AACA;AACA;AACA;AACA,yBAAyB,mFAAiB;AAC1C,sCAAsC,WAAW,EAAE,KAAK;AACxD;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,iCAAiC,sEAAiB,GAAG,iBAAiB;;AAEtE,qDAAqD,8GAAqC;;AAE1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mDAAmD,0CAA0C;;AAE7F;AACA;AACA;AACA;AACA;AACA,UAAU,yFAAuB;AACjC;AACA,kDAAkD,WAAW;AAC7D,sCAAsC,MAAM,SAAS,iBAAiB;AACtE;;AAEA;AACA;AACA;AACA,6BAA6B,oBAAoB,mBAAmB,mBAAmB;AACvF;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8BAA8B,WAAW,YAAY,WAAW;AAChE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qDAAqD;AACrD;AACA,uGAAuG;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAY,8BAA8B,cAAc;AAChE,QAAQ;AACR,QAAQ,uEAAY,6BAA6B,cAAc;AAC/D,QAAQ,uEAAY;AACpB,QAAQ,uEAAY;AACpB,QAAQ,uEAAY;AACpB;AACA;AACA,KAAK;;AAEL;AACA,wBAAwB,yGAA+B;AACvD;AACA;AACA;AACA;AACA,4BAA4B,2GAAgC;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB,qFAAqB;AAC1C,WAAW;;AAEX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,mHAAoC;;AAE5D;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,6BAA6B;AAC7B;;AAEA;AACA;;AAEA;AACA,uCAAuC;AACvC;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;;AAEA,2CAA2C,kCAAkC;AAC7E,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,8BAA8B,+FAA0B;AACxD;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;AACA;;AAEA,8DAA8D;AAC9D;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,0BAA0B,iFAAmB;;AAE7C;AACA;AACA;AACA;AACA;AACA,mDAAmD,yFAAuB;AAC1E;AACA,gBAAgB,yFAAuB;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,eAAe;AACf,eAAe,2BAA2B;AAC1C;;AAEA,uCAAuC;AACvC;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;AAGA;AACA,sBAAsB;AACtB,2BAA2B,+DAAU;AACrC;AACA;AACA;AACA;AACA,+BAA+B,8FAAwB,GAAG,2DAA2D;AACrH;AACA,IAAI,uEAAY,mCAAmC,4BAA4B;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA,wBAAwB;;AAExB;AACA;AACA;AACA,QAAQ,uEAAY;AACpB,iBAAiB;AACjB;AACA;AACA,QAAQ,uEAAY;AACpB,iBAAiB;AACjB;AACA;AACA;AACA,QAAQ,uEAAY;AACpB,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,aAAa;AACb;;AAEA;;AAEA;AACA;AACA,MAAM,uEAAY,oBAAoB,eAAe,yBAAyB,YAAY;AAC1F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6DAA6D,eAAe;AAC5E,UAAU;AACV;AACA;AACA,wDAAwD,8BAA8B;AACtF,UAAU;AACV;AACA;AACA,wDAAwD,+BAA+B;AACvF,UAAU;AACV;AACA;AACA,wDAAwD,8BAA8B;AACtF,UAAU;AACV;AACA;AACA;;AAEA;AACA,yCAAyC,gCAAgC;AACzE;AACA;AACA,YAAY,qBAAqB;AACjC;;AAEA;AACA;AACA,IAAI,uEAAY,kCAAkC,KAAK,KAAK,yBAAyB;;AAErF,yBAAyB,MAAM,EAAE,YAAY;AAC7C,qBAAqB,8EAAM;AAC3B,mFAAmF;AACnF;;AAEA;AACA,6EAA6E,KAAK;AAClF,6EAA6E,UAAU;AACvF,uFAAuF,UAAU;;AAEjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,IAAI,uEAAY,iCAAiC,KAAK,KAAK,yDAAyD;AACpH;;AAEA;;;;;;;;;;;;;;;;;;;AC/qBqD;AACd;AACF;AACsB;AAC2C;AACzD;AACgB;AACN;;AAExC;;AAEf,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,8BAA8B,sEAAiB;AAC/C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2CAA2C;AAC3C,IAAI,uEAAY,gCAAgC,OAAO;AACvD,6BAA6B,iEAAY,6CAA6C,yBAAyB;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4EAAO;AACjC;AACA;AACA,QAAQ;AACR,QAAQ,uEAAY;AACpB;AACA;AACA;AACA;AACA,iBAAiB,4EAAO;AACxB;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,uCAAuC,4BAA4B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oFAAgB;AACpC;;AAEA,gDAAgD,aAAa;AAC7D;AACA;AACA,8CAA8C,eAAe;AAC7D;AACA,QAAQ;AACR,4CAA4C,qBAAqB;AACjE;;AAEA;;AAEA;AACA;;AAEA;AACA,6BAA6B,yGAA8B;AAC3D;AACA,2BAA2B,yGAA8B,sBAAsB,oFAAgB;AAC/F;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,qCAAqC,oFAAoF,IAAI;AAC7H;AACA;;AAEA;AACA,IAAI,uEAAY;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,6EAAQ;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qEAAW,uBAAuB,eAAe;AACvD,MAAM,sHAAsC;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,qEAAW,uBAAuB,eAAe;AACvD,MAAM,uEAAY;AAClB;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mCAAmC,4DAA4D,IAAI;AACnG;AACA;AACA,gDAAgD,wCAAwC;;AAExF;;AAEA;AACA;AACA,QAAQ,uEAAY;AACpB,wBAAwB,8FAAyB;AACjD;AACA;;AAEA;AACA;AACA;;AAEA,UAAU,oFAAe;;AAEzB;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,gDAAgD,sBAAsB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM,uEAAY;AAClB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;ACrSyE;AACd;AACpB;AACF;AACmB;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD,0BAA0B,QAAQ;AAClC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD,0BAA0B,QAAQ;AAClC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD,0BAA0B,QAAQ;AAClC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD,0BAA0B,QAAQ;AAClC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD,0BAA0B,QAAQ;AAClC,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD,0BAA0B,QAAQ;AAClC,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA;AACA,SAAS;AACT,0BAA0B,QAAQ;AAClC,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA;AACA,SAAS;AACT,0BAA0B,QAAQ;AAClC,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA;AACA,SAAS;AACT,0BAA0B,QAAQ;AAClC,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA;AACA,SAAS;AACT,0BAA0B,QAAQ;AAClC,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA;AACA,SAAS;AACT,0BAA0B,QAAQ;AAClC,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA;AACA,SAAS;AACT,0BAA0B,QAAQ;AAClC,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD,0BAA0B,QAAQ;AAClC;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD,0BAA0B,QAAQ;AAClC;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD,0BAA0B,QAAQ;AAClC;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD,0BAA0B,QAAQ;AAClC;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD,0BAA0B,QAAQ;AAClC;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGe;;AAEf;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,uFAAoB;AACrD;;AAEA,2BAA2B,wEAAe;AAC1C;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2EAAM;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,uEAAY;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,sBAAsB,sFAAiB,eAAe,kBAAkB;;AAExE;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA,MAAM,uEAAY,aAAa,IAAI;;AAEnC;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;;AC7nB6C;AACE;AACR;AACF;AACI;AACQ;;;AAGlC,wBAAwB,mEAAc;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,uEAAY,sBAAsB,wBAAwB;AAC9D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,4GAA8B;AAC7D;AACA,uBAAuB,kFAAiB;AACxC;AACA,SAAS;AACT;AACA;AACA,uBAAuB,kFAAiB;AACxC;AACA,SAAS;AACT;AACA;AACA,uBAAuB,kFAAiB;AACxC;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,QAAQ,0HAAqC;AAC7C,QAAQ,gGAAwB;AAChC;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,uEAAY;AACpB;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN,MAAM,qEAAW;AACjB,sCAAsC,UAAU,kCAAkC,YAAY;AAC9F;AACA;AACA,MAAM,uEAAY;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ,+GAAkC;AAC1C;;AAEA;AACA;AACA;AACA;AACA,kDAAkD,eAAe;AACjE;AACA,yFAAyF,oBAAoB;AAC7G;AACA,gBAAgB,eAAe;AAC/B;AACA,gDAAgD,iFAAkB;AAClE,2BAA2B,0GAA6B;AACxD;AACA,wFAAwF,oBAAoB;;AAE5G;AACA,gEAAgE,WAAW;AAC3E;AACA;AACA,sBAAsB,eAAe,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW;AACzE;AACA;AACA,QAAQ;AACR;AACA,oEAAoE,oBAAoB;AACxF;AACA;AACA,wCAAwC,UAAU;AAClD;AACA,sCAAsC,UAAU;AAChD,6BAA6B,8FAAqB;AAClD;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oFAAoF,iHAAmC;;AAEvH;AACA,QAAQ,iHAAmC;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,iHAAmC;AACpE;AACA;;AAEA;AACA,uBAAuB,+GAAkC;AACzD;;AAEA,sBAAsB,0GAA6B,2BAA2B,4BAA4B;AAC1G;AACA;AACA,MAAM;AACN,0BAA0B,YAAY;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,mCAAmC,sGAA2B;AAC9D,wEAAwE,oBAAoB;AAC5F;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;AACT;AACA,gEAAgE,WAAW;AAC3E;AACA,aAAa,IAAI,EAAE,UAAU,EAAE,aAAa;AAC5C,UAAU,8FAAqB,SAAS,aAAa;;AAErD;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,gEAAgE,WAAW;AAC3E,2BAA2B,8FAAqB,0BAA0B,aAAa;AACvF;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,iHAAmC;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,sCAAsC,0GAA6B,0BAA0B,4BAA4B;AACzH,MAAM;AACN;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0GAA6B;AAC5D,yFAAyF,oBAAoB;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,MAAM;AAC5B;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,iHAAmC;AACvD,oBAAoB,+GAAkC;AACtD;AACA;AACA;AACA,qBAAqB,YAAY;AACjC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM,8FAAqB;AAC3B;;AAEA;;AAEA;AACA;AACA;AACA,oBAAoB,4GAA8B;AAClD;AACA;AACA;AACA;AACA;AACA,uBAAuB,kHAAiC;AACxD;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA,iCAAiC,wHAAoC;AACrE,SAAS,wHAAoC;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;AC/aqC;AACE;;;AAGxB,8BAA8B,8DAAS;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI,uEAAY,6BAA6B,wBAAwB;AACrE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,MAAM;AACN,MAAM,qEAAW;AACjB,6CAA6C,UAAU,kCAAkC,YAAY;AACrG;AACA;AACA,MAAM,uEAAY;AAClB;AACA;;AAEA;;;;;;;;;;;;;;;;;;ACtE6C;AACE;AACR;AACF;AAC6B;AACP;AACE;;;AAG9C;;AAEf;AACA,IAAI,uEAAY,4BAA4B,wBAAwB;AACpE;;AAEA;AACA;AACA;AACA,YAAY,kFAAiB;AAC7B;AACA,cAAc,sFAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,mGAAmG,IAAI;AACvH;AACA;AACA;AACA;AACA,gBAAgB,oFAAgB;AAChC;AACA,QAAQ,kFAAiB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD,UAAU,IAAI,YAAY;;AAElF;AACA;AACA;AACA,IAAI,uEAAY,mCAAmC,YAAY,MAAM,UAAU;AAC/E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD,UAAU;AAC3D;AACA;AACA;AACA;AACA,uBAAuB,yHACZ;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+EAAmB;AAClC;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,+EAAmB;AAChC;AACA;;AAEA;;AAEA;AACA;;AAEA,oBAAoB,gGAAsB;AAC1C;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,+EAAmB;AAC3B;AACA;AACA;AACA;;AAEA;AACA,QAAQ,+EAAmB;AAC3B;AACA;AACA;;AAEA,wBAAwB,yHAAqC;AAC7D;AACA,sBAAsB,gGAAsB;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN,iDAAiD,gGAAsB;;AAEvE;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uFAAsB;AAC9C;AACA;AACA;AACA;AACA,wBAAwB,iHAAmC;;AAE3D;AACA,kCAAkC,QAAQ;AAC1C;AACA,UAAU;AACV;AACA;AACA,2BAA2B,SAAS,eAAe,QAAQ;AAC3D;AACA;AACA;AACA;AACA,2BAA2B,SAAS,eAAe,QAAQ;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+BAA+B,SAAS;AACxC;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;;AAEA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,cAAc,yGAA+B;AAC7C;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,iCAAiC;AACjC;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D,UAAU;AACV;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,kHAAiC,iBAAiB,gDAAgD;AACxG,MAAM,4FAAsB;AAC5B,MAAM,4FAAsB;AAC5B,MAAM,4FAAsB;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,YAAY;AAClD;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,8EAAe;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;AAGA;AACA,IAAI,kGAAyB;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;ACjf6C;AACgB;AACd;AACR;AACF;AACgC;AAClB;AACF;;;AAGlC,yBAAyB,mEAAc;;AAEtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI,uEAAY,uBAAuB,wBAAwB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,wFAAoB;AAC3D;AACA;AACA;;AAEA,iCAAiC,mFAAiB;AAClD;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,YAAY,oFAAgB;AAC5B;AACA,cAAc,sFAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gCAAgC,oEAAe;AAC/C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,0FAAqB;;AAEnD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,qEAAW,wCAAwC,yBAAyB;AAChF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ,4FAAsB;AAC9B;AACA;AACA,SAAS,yGAA+B;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ,4FAAsB;;AAE9B;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ,4FAAsB;AAC9B;AACA;AACA;;AAEA;AACA;AACA,IAAI,qEAAW,kDAAkD,yBAAyB;AAC1F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6GAAkC;AACzD;;AAEA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB,SAAS;AACT,OAAO;AACP;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gCAAgC,0FAAqB;;AAErD,MAAM,uEAAY,qBAAqB,wBAAwB;AAC/D,MAAM,uEAAY,UAAU,4CAA4C;;AAExE;AACA;AACA;AACA;AACA,qDAAqD,aAAa;AAClE,OAAO;AACP;AACA;AACA;;AAEA,MAAM;AACN,MAAM,qEAAW;AACjB,kDAAkD,UAAU,kCAAkC,YAAY;AAC1G;AACA;AACA,MAAM,uEAAY;AAClB;AACA;;;AAGA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR,QAAQ,uEAAY,IAAI,WAAW;AACnC;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN,MAAM,qEAAW;AACjB,6CAA6C,UAAU,kCAAkC,YAAY;AACrG;AACA;AACA,MAAM,uEAAY;AAClB;AACA;;AAEA;;;;;;;;;;;;;;AC7SsD;AACkB;;AAExE;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA,oCAAoC;AACpC;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,gCAAgC;AAChC,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,kCAAkC;AAClC;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA,mCAAmC,wEAAa;AAChD;AACA;AACA;AACA,8CAA8C,wEAAa;AAC3D;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA,WAAW,0FAAuB;AAClC,GAAG;AACH;;AAEA;;;;;;;;;;;AC5iBA;AACA;;AAEA;AACA;AACA,wDAAwD;AACxD,oDAAoD;AACpD,kDAAkD;AAClD,IAAI;AACJ,yDAAyD,gCAAgC;AACzF;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,mFAAmF,UAAU;AAC7F;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,wDAAwD,4CAA4C;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,+BAA+B;AAC/B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,6BAA6B;AAC7B,8BAA8B;AAC9B;AACA;AACA,6BAA6B;AAC7B,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,+BAA+B;AAC/B,8BAA8B;AAC9B;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,mCAAmC;AACnC,+BAA+B;AAC/B,8BAA8B;AAC9B;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,+BAA+B;AAC/B,8BAA8B;AAC9B;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,+BAA+B;AAC/B,8BAA8B;AAC9B;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,+BAA+B;AAC/B,8BAA8B;AAC9B;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,+BAA+B;AAC/B,8BAA8B;AAC9B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;;;;;;;;;;AC9O0C;AACF;AACQ;AACS;AACb;AACqC;;AAElE;;AAEf;AACA,2BAA2B,UAAU;AACrC;AACA,sGAAsG,UAAU;AAChH;AACA;AACA;AACA;AACA,MAAM;AACN,qCAAqC,yEAAyE,UAAU;AACxH;AACA;AACA,+BAA+B,sBAAsB,GAAG,qBAAqB;AAC7E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,sFAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,kFAAe,IAAI,UAAU;;AAErD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,sBAAsB,2FAA2F,IAAI;;AAErH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gEAAgE,iFAAkB;AAClF,8DAA8D,iFAAkB;AAChF,uCAAuC,iFAAkB;;AAEzD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,kBAAkB,4BAA4B;AAC9C;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;AACA;AACA,6DAA6D,WAAW;AACxE,sBAAsB,8FAAqB;AAC3C;AACA;AACA;AACA;AACA,sBAAsB,0GAA2B;AACjD;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sEAAsE,kBAAkB;AACxF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,IAAI,uEAAY,IAAI,WAAW,mBAAmB,2BAA2B;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO,EAAE,4HAA4H;AAClJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,YAAY;;AAE5D;AACA,sDAAsD,YAAY;AAClE;AACA;AACA,UAAU;AACV;AACA;AACA,eAAe;AACf,gDAAgD,YAAY;AAC5D;AACA;AACA,sDAAsD,YAAY;AAClE;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yCAAyC,8FAAqB;AAC9D;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yGAA+B;AACtD;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,+DAA+D;AAC/D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,2GAAgC;AACnD;AACA;AACA;AACA,0BAA0B,IAAI,IAAI,MAAM;AACxC;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,qEAAW,+BAA+B,yBAAyB,WAAW,YAAY,OAAO,UAAU;;AAEnH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ,uEAAY,yBAAyB,4CAA4C;AACzF;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,UAAU,uEAAY,kCAAkC,8DAA8D;AACtH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,yCAAyC,iFAAkB;AAC3D,2CAA2C,iFAAkB;AAC7D;;AAEA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;;AAEA,mDAAmD,UAAU;AAC7D;AACA;AACA,0CAA0C,iBAAiB,SAAS,YAAY;AAChF,MAAM;AACN;AACA,0CAA0C,iBAAiB,QAAQ,YAAY;AAC/E,MAAM;AACN;AACA,0CAA0C,iBAAiB,OAAO,aAAa;AAC/E,MAAM;AACN,0CAA0C,iBAAiB,OAAO,qDAAqD;AACvH;AACA;AACA;;AAEA;AACA,+EAA+E,UAAU;AACzF;AACA,kBAAkB,sFAAgB,GAAG,uEAAuE;AAC5G,sCAAsC,2CAA2C;AACjF,kBAAkB,+EAAS;AAC3B,kDAAkD,wEAAa;AAC/D;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,iCAAiC;;AAE3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,uEAAY,yBAAyB,UAAU;;AAEnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAY,gCAAgC,UAAU,KAAK,kBAAkB;AACrF,uDAAuD,UAAU;AACjE;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,IAAI,uEAAY,mBAAmB,WAAW,MAAM,qBAAqB,KAAK,eAAe;;AAE7F;;AAEA;;;;;;;;;;;;;;AC19B0C;AACF;AACe;;AAExC;;AAEf;AACA;AACA;AACA,wDAAwD,IAAI;AAC5D;AACA;;AAEA,gBAAgB,8CAA8C,IAAI;AAClE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,4GAA4B;AAC5C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,2EAA2E,iBAAiB;AAC5F;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,mBAAmB,4GAA4B;AAC/C;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA,KAAK;;AAEL;AACA;AACA;AACA,qBAAqB,4GAA4B;AACjD;AACA;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,qBAAqB,4GAA4B;AACjD;AACA;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA,OAAO;AACP;;;AAGA;AACA;AACA;AACA,qBAAqB,4GAA4B;AACjD;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,qBAAqB,4GAA4B;AACjD;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa,UAAU,EAAE,2BAA2B;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA,2BAA2B,4GAA4B;AACvD;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA,4BAA4B,iCAAiC;AAC7D;;AAEA;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA,mBAAmB,sCAAsC;AACzD,2BAA2B,gBAAgB;AAC3C;;;AAGA;AACA;AACA;AACA,uBAAuB,iBAAiB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC,sBAAsB,eAAe;AACrC,sBAAsB,gBAAgB;AACtC;;AAEA;AACA,+BAA+B,sEAAiB,SAAS,6EAA6E;AACtI;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;;AAEA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA,mBAAmB,oCAAoC;AACvD,2BAA2B,gBAAgB;AAC3C;;AAEA;AACA;AACA;AACA,uBAAuB,iBAAiB;;AAExC;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+CAA+C,SAAS,mBAAmB,SAAS;AACpF;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,8BAA8B,+BAA+B,mCAAmC;AAChG,iCAAiC;AACjC;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA,MAAM,8BAA8B;AACpC;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA,2EAA2E,gBAAgB;AAC3F;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,4GAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA,KAAK;;AAEL;AACA;AACA,qBAAqB,4GAA4B;AACjD;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA,OAAO;AACP;;AAEA;AACA,uBAAuB,mCAAmC;AAC1D;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,kCAAkC,6EAA6E;AAC/G,kCAAkC,oEAAoE;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,yBAAyB,4GAA4B;AACrD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,+DAA+D,kGAAuB,IAAI,KAAK;AAC/F;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAY,gCAAgC,UAAU,KAAK,yBAAyB;AAC5F,uDAAuD,UAAU;AACjE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B,sEAAiB;AAC9C;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;AClmB6C;;AAEtC;AACP;;AAEA,EAAE,uHAAsC;AACxC;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;;;;;;;;;;;;ACb0C;;AAEnC;AACP;AACA;AACA;AACA;AACA,wCAAwC,mBAAmB;AAC3D;AACA;AACA;AACA,MAAM,sFAAiB,aAAa,gBAAgB;AACpD;AACA,aAAa;AACb,oBAAoB;AACpB;AACA;AACA,mBAAmB;AACnB,KAAK;AACL;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACvB4D;AACb;AACc;AACZ;AACR;AACF;AACF;AACQ;AACwB;;;AAGtD;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,sFAAiB;AAC/B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+GAAmC;;AAE/D,4CAA4C,oFAAgB,uBAAuB,oFAAgB;AACnG,6CAA6C,sBAAsB;;AAEnE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,8BAA8B,0FAAqB;;AAEnD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,iCAAiC,mFAAiB;AAClD;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,8CAA8C,iFAAkB;AAChE,2CAA2C,iFAAkB;;AAE7D;AACA;AACA;AACA,gCAAgC;AAChC,gCAAgC,6FAAuB;AACvD;AACA;AACA;;AAEA;AACA;AACA;AACA,gCAAgC;AAChC,wBAAwB,6FAAuB;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gCAAgC;AAChC,6BAA6B,6FAAuB;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C,UAAU,0CAA0C,eAAe;AAChH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM,uEAAY,4BAA4B,aAAa;AAC3D;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS,oFAAgB,iBAAiB,oFAAgB;AAC1D;AACA;AACA,wDAAwD,sBAAsB,GAAG,iBAAiB,EAAE,EAAE,YAAY,qBAAqB,WAAW;AAClJ,6CAA6C,MAAM,IAAI,kBAAkB;AACzE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iCAAiC,iBAAiB,wBAAwB;AAC1E,MAAM;AACN,mBAAmB,mHAAoC;AACvD,iCAAiC,iBAAiB,uBAAuB;AACzE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ,uEAAY,6BAA6B,eAAe;AAChE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6CAA6C,iBAAiB,aAAa;AAC3E,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,iHAAmC;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,iHAAmC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yFAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C,uBAAuB;AACpE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,4FAAsB;AAC9B;AACA;AACA,SAAS,yGAA+B;AACxC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,4FAAsB;;AAE9B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ,4FAAsB;;AAE9B;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,uBAAuB,6GAAkC;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM,qEAAW,yCAAyC,gCAAgC;AAC1F;AACA;AACA;AACA;AACA,MAAM,qEAAW,uCAAuC,qBAAqB,iFAAiF,MAAM;AACpK;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,YAAY;AACZ,UAAU;AACV;;AAEA;;;AAGA;;;AAGA;AACA,IAAI,uEAAY;AAChB;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,YAAY,uEAAY,qBAAqB,OAAO,gBAAgB,WAAW,GAAG,mBAAmB;AACrG;AACA;AACA,gFAAgF,cAAc,GAAG,MAAM;AACvG;;;AAGA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,uEAAY;;AAEhB;;AAEA;AACA,4BAA4B,qHAAkC;;AAE9D;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,kGAAyB;AAC/B;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN,MAAM,uEAAY,8GAA8G,GAAG;AACnI;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA,yCAAyC,+EAAS;;AAElD,IAAI,uEAAY,qBAAqB,eAAe;AACpD;;AAEA;AACA,uBAAuB,6GAAkC;AACzD;AACA;AACA,gDAAgD,eAAe;AAC/D;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AC7f6C;;AAE7C;AACO;AACP,SAAS,iHAAmC;AAC5C;;AAEA;AACO;AACP,SAAS,iHAAmC;AAC5C;;AAEA;AACO;AACP;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;;;;;;;;;;;;;;;;;;;;;AC5EO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC9C6C;AACN;;;AAGvC;AACA,wBAAwB,kDAAoB;AAC5C,IAAI,uEAAiC;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA,+EAA+E;AAC/E;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AC3F6C;;AAE7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACO;AACP;AACA;;AAEA;AACA,oBAAoB,iDAAsB;AAC1C;;AAEA;AACA;;AAEA;AACA,sBAAsB,2EAAmC;AACzD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;;AC9D6C;;AAE7C;AACA;AACA;AACO;AACP;AACA;AACA,yBAAyB,+EAAqC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;ACxBA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;;AClB6C;;AAE7C;AACA;AACA,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uDAAyB;AAC/C;AACA,KAAK;AACL,qBAAqB,mDAAuB;;AAE5C;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AClIA;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AC9CO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AC1BuC;;AAEvC;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,uBAAuB;AAC7E,4BAA4B,WAAW,EAAE,eAAe,IAAI,gBAAgB;AAC5E;AACA;AACA;AACA,gDAAgD,WAAW,EAAE,mBAAmB,EAAE,YAAY;AAC9F;AACA,uBAAuB,oDAAqB;AAC5C;AACA,KAAK;;AAEL;AACA;AACA,2FAA2F,oBAAoB;AAC/G;;AAEA;AACA;AACA;AACA,kFAAkF,gDAAgD;AAClI;AACA;AACA;AACA;AACA,oDAAoD,qBAAqB;AACzE,4BAA4B,WAAW,WAAW,gBAAgB;AAClE;AACA;AACA;AACA,gDAAgD,WAAW,EAAE,mBAAmB,EAAE,YAAY;AAC9F,mDAAmD,oBAAoB,EAAE,UAAU;AACnF;AACA,aAAa,WAAW,QAAQ,aAAa;AAC7C,aAAa,UAAU,EAAE,aAAa;AACtC;AACA,KAAK;AACL;;AAEA;AACA;;;AC1E6C;;AAEtC;AACP;AACA,wBAAwB,2EAAmC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;;;;ACzBqC;;AAErC;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN,MAAM,+BAAW;AACjB;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,IAAI,+BAAW,IAAI,MAAM;AACzB,8BAA8B;AAC9B;;AAEA;AACA;;AAEO;AACP;AACA;AACA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,cAAc;AACd,cAAc,+BAAW;AACzB;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChLuC;;AAEvC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGO;AACP;AACA;AACA;AACA,WAAW,0CAAgB;AAC3B,IAAI;AACJ,WAAW,0CAAgB;AAC3B,IAAI;AACJ,WAAW,0CAAgB;AAC3B;AACA;;;;;;;;;AC9BuC;AACM;AACE;;AAE/C;AAC8D;AACJ;AACtB;AACY;AACJ;AACJ;AACF;AACM;AACJ;AACJ;AACW;AACO;AACiB;AACnC;AACwB;AACnB;AAC8B;AAClC;;AAE9B,6CAA6C,qBAAqB,IAAI;AAC7E,eAAe,OAAO;AACtB;AACA,SAAS,4CAAiB,SAAS,sBAAsB;AACzD;AACA,YAAY,4CAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,0CAAgB;AACtC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,wBAAwB,2CAAkB;AAC1C,wBAAwB,2CAAkB;AAC1C;;AAEA;AACA;;AAEA;AACA,iBAAiB,+DAA6B;AAC9C;;AAEA;AACA;AACA;AACA,4BAA4B,aAAa;AACzC,2BAA2B,YAAY;AACvC,6BAA6B,uBAAuB;;AAEpD;AACA;AACA;AACA;AACA,sCAAsC,iCAAa;;AAEnD;AACA,WAAW,wCAAS;AACpB;AACA;;AAEA,wBAAwB,gDAAqB;AAC7C,4BAA4B,aAAa;AACzC,0BAA0B,WAAW;AACrC,wBAAwB,SAAS;AACjC,uBAAuB,QAAQ;AAC/B,4BAA4B,aAAa;AACzC,+BAA+B,SAAS;AACxC;AACA;AACA,sBAAsB,OAAO;AAC7B,yBAAyB,eAAe;AACxC,sBAAsB,OAAO;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,8CAAqB;AAC7B;;AAEA,qCAAqC,2CAAkB;AACvD,QAAQ,iGAA6C;AACrD,sCAAsC,kCAAmB;AACzD;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,MAAM,iCAAY,0BAA0B,WAAW;AACvD;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;;;;;;;;;;;;;;;ACtI6C;AACR;AACU;AACc;;AAE7D;AACA;AACA;;AAEA,4BAA4B,0GAA6B;;AAEzD;AACA;AACA;AACA;AACA,sCAAsC,iHAAmC;AACzE;AACA;AACA,kCAAkC,4BAA4B;AAC9D,UAAU;AACV;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qEAAW,4BAA4B,YAAY;AAC3D;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,0GAA6B,iBAAiB,0CAA0C;;AAEtH;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE,uEAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wBAAwB,6GAAkC;AAC1D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACO;AACP;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI,uEAAY,mBAAmB,MAAM;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,UAAU;AACV,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,gCAAgC;AAChC,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,UAAU;AACV;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,gCAAgC;AAChC;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,kGAAyB;AACtC;;AAEA;AACA;AACA;;;;;;;;;;;;;;AC/nB2D;AAClB;AACU;;AAEnwCAAwC;AAC5C,IAAI,sCAAsC;AAC1C,IAAI,+CAA+C;AACnD,IAAI,oCAAoC;AACxC,IAAI,qCAAqC;AACzC,IAAI,+CAA+C;AACnD,IAAI,2CAA2C;AAC/C,IAAI,4CAA4C;AAChD,IAAI,wCAAwC;AAC5C,IAAI,8CAA8C;AAClD,IAAI,qCAAqC;AACzC,IAAI,yCAAyC;AAC7C,IAAI,mCAAmC;AACvC,IAAI,mCAAmC;AACvC,IAAI,wCAAwC;AAC5C,IAAI,qCAAqC;AACzC,IAAI,wCAAwC;AAC5C,IAAI,0CAA0C;AAC9C,IAAI,wDAAwD;AAC5D,IAAI,gDAAgD;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,uDAAuD;AAC3D,IAAI,gDAAgD;AACpD,IAAI,yDAAyD;AAC7D,IAAI,sDAAsD;AAC1D,IAAI,+DAA+D;AACnE,IAAI,uDAAuD;AAC3D,IAAI,sDAAsD;AAC1D,IAAI,yDAAyD;AAC7D,IAAI,sDAAsD;AAC1D,IAAI,sDAAsD;AAC1D;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,gBAAgB,kHAAmC,CAAC,oGAA4B;AAChrC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iGAAyB;AACzC;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB,iGAAyB;AACzC;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB,iGAAyB;AACzC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,iGAAyB;AACzC,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,iGAAyB;AACzC,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,iGAAyB;AACzC,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbmDAAmD,+BAA+B;AAClF;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;;AAEA,iEAAe,QAAQ,EAAC;;;;;;;;;;;;AC35CxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oCAAoC;;AAEpC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,qBAAM,gBAAgB,qBAAM,IAAI,qBAAM,sBAAsB,qBAAM;;AAE1F;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,gCAAgC,QAAa;;AAE7C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,UAAU;AACrB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,SAAS;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,UAAU;AACrB,WAAW,SAAS;AACpB;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,QAAQ;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA,kBAAkB;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA,8BAA8B,mBAAmB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA,kBAAkB;AAClB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;UC9mDA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;WACA;;;;;WCVA;;;;;;;;;;;;;ACA6C;AACH;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,mFAAuC;AACvC;AACA,EAAE,iFAAsC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;;;;;;;ACnDqC;AACK;AACiB;;AAE3D,6EAAoC;AACpC;AACA;;AAEA,qEAAgC;;AAEhC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,qDAAqD;;AAErD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW,IAAI,WAAW;AAChD;AACA;AACA;AACA;AACA;AACA,8BAA8B,wCAAwC,YAAY,kBAAkB;AACpG;AACA;AACA,KAAK;AACL;;AAEA,EAAE,iCAAY;AACd,+BAA+B,oEAAkC,8BAA8B,oBAAoB;AACnH;AACA;AACA;AACA,GAAG;;AAEH,EAAE,iCAAY,kBAAkB,8BAA8B;AAC9D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,iCAAY,IAAI,kBAAkB;AACpC;AACA;AACA;;AAEA;;;AC/G6C;AACH;;AAE1C,uFAAyC;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA,uFAAyC;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,2FAA2C;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,2BAA2B;AAC3B;;AAEA;AACA;;AAEA,iGAA8C;AAC9C;AACA;;AAEA,mGAA+C;AAC/C;AACA;;AAEA,2GAAmD;AACnD;AACA;;AAEA,uGAAiD;AACjD;;AAEA;AACA;;AAEA;AACA;AACA,4BAA4B,yDAA0B;AACtD;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA,2BAA2B;AAC3B;;AAEA;;;;;ACnGA;AACA;AACA;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;;;AAGA;;AAE6C;AACR;AACI;AACC;;AAE1C,yEAAkC;AAClC;AACA,mBAAmB,+CAAqB;;AAExC;AACA,IAAI,+BAAW;AACf,aAAa;AACb;AACA;AACA;;AAEA,yEAAkC;AAClC;AACA,sCAAsC,+CAAkB;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AC5C0C;;AAE1C;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;;;AAGA,yEAAkC;;AAElC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;ACnC6C;AACN;AACF;AACK;;AAE1C;AACA,OAAO,6CAA6C;AACpD,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,6EAAoC;AACpC;AACA,sBAAsB,mEAA+B;;AAErD;AACA;AACA;AACA;AACA;AACA,sBAAsB,2EAAmC;AACzD;AACA;AACA,0BAA0B,qEAAgC;AAC1D;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;;AAEL;AACA;;;AAGA,qFAAwC;AACxC;AACA;AACA,qBAAqB,wCAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,MAAM,iCAAY,6BAA6B,iBAAiB;AAChE,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;AACA;AACA,GAAG;;AAEH;AACA,sBAAsB,mEAA+B;AACrD;AACA;AACA;AACA;AACA,sBAAsB,2EAAmC;AACzD;AACA;AACA,0BAA0B,qEAAgC;AAC1D;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;;AAEL;AACA;;;ACxI6C;AACH;;AAE1C,yEAAkC;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;;AAEJ,uFAAyC;AACzC;;AAEA;AACA;AACA;AACA,wBAAwB,2CAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,mDAAuB;AAC1E;AACA,gBAAgB,mDAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;AAGA,6EAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,6BAA6B,gBAAgB,IAAI,cAAc;AAC/D;AACA,MAAM;AACN,2BAA2B,gBAAgB,IAAI,cAAc;AAC7D;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;;;;ACrHsC;;AAE1C,yFAA0C;AAC1C;AACA;AACA;AACA;AACA,GAAG;AACH;;;ACR6C;AACH;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ,mFAAuC;AACvC;;AAEA;AACA;;AAEA;AACA;AACA,4BAA4B,2EAAmC;AAC/D;AACA;AACA,MAAM;AACN,6CAA6C,UAAU;AACvD;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA,2BAA2B;AAC3B;AACA;;;AClC0C;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ,mFAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC5B0C;;AAE1C;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ,iFAAsC;AACtC;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iCAAiC,sBAAsB,KAAK,sBAAsB,GAAG,sBAAsB;AAC3G;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;;;AChD0C;;AAE1C,6EAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACdqC;AACI;AACC;;AAE1C;AACA;AACA;AACA;AACA;AACA,iFAAsC;;AAEtC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,+CAAkB;AAC5C,uCAAuC;AACvC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+CAA+C,iCAAiC;;AAEhF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,+BAAW,+BAA+B,iBAAiB,KAAK,uDAAuD;AAC3H;AACA;AACA;AACA;AACA;AACA;;;;;;;ACxD8C;AACT;AACwB;AACpB;AACC;AACG;AACN;;;AAGvC,6EAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yFAA0C;AAC1C;AACA;AACA;AACA;;AAEA,qFAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+EAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iGAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iCAAc;AACpC;AACA;AACA;AACA;AACA;;;AAGA,uFAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,8FAA8F;AACjI,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,8EAA8E;AACnH,QAAQ;AACR;AACA;;AAEA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,8FAA8F;AACjI;AACA;AACA;;;AAGA;AACA,qGAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,2EAAmC,oBAAoB,kBAAkB,IAAI;AAC7E;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ,mDAAuB;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,IAAI,iCAAY;AAChB,mCAAmC,WAAW;AAC9C,mCAAmC,WAAW;AAC9C,mCAAmC,WAAW;AAC9C;AACA;AACA,IAAI;AACJ,IAAI,iCAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,IAAI,iCAAY;AAChB;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,6FAA4C;AAC5C;AACA;AACA,yCAAyC,UAAU;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;AAGA,qEAAqE;;AAErE,6EAAoC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yCAAyC;AACjD;AACA,4BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,cAAc,kEAA4B;;AAE1C;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA,sBAAsB,0CAAgB;AACtC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA,qCAAqC,UAAU;AAC/C;AACA,GAAG;;AAEH;;AAEA,EAAE,iCAAY;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,WAAW,SAAS;AACpB;AACA,+FAA6C;AAC7C,iDAAiD,+CAAkB;AACnE,gCAAgC,+FAAgD;AAChF;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA,+EAAqC;AACrC;AACA;;AAEA;AACA,IAAI,iCAAY,wBAAwB,WAAW;AACnD;AACA;AACA;AACA;AACA,QAAQ,iCAAY;AACpB;AACA;AACA;AACA,oBAAoB,YAAY,GAAG,cAAc;AACjD,6DAA6D,0CAA0C,eAAe,+BAA+B;;AAErJ;AACA,8DAA8D,0CAA0C,eAAe,8BAA8B;AACrJ;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8DAA0B;AACxD;;AAEA;;AAEA;AACA;AACA,2EAAmC;AACnC;AACA;AACA;AACA;AACA,UAAU,iHAAiH;AAC3H,UAAU,4GAA4G;AACtH,UAAU,iHAAiH;AAC3H,UAAU,4GAA4G;AACtH,UAAU,qGAAqG;AAC/G;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,iJAAiJ;AAC3J,UAAU,4IAA4I;AACtJ,UAAU,iJAAiJ;AAC3J,UAAU,4IAA4I;AACtJ,UAAU,qIAAqI;AAC/I,UAAU,0HAA0H;AACpI,UAAU,mHAAmH;AAC7H,UAAU,yHAAyH;AACnI,UAAU,kGAAkG;AAC5G;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD,eAAe,uCAAuC;AACtD,eAAe,uBAAuB;AACtC,eAAe,gCAAgC;AAC/C,eAAe,kCAAkC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,2CAA2C;AAC5E;AACA;AACA;AACA;AACA,iCAAiC,2CAA2C;AAC5E;AACA;AACA;AACA;AACA,oCAAoC,kEAAkE;AACtG;AACA;AACA;AACA;AACA;;AAEA,iEAA8B;AAC9B;AACA;AACA;;AAEA,EAAE,iCAAY;AACd;AACA;AACA;AACA;;AAEA;AACA,IAAI,iCAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,IAAI,iCAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,IAAI,iCAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR,IAAI,iCAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,8BAA8B,iDAAsB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;;;;ACtlBuC;AACO;AAC9C,YAAY,qBAAqB;;AAEjC,6EAAqC;AACrC;;AAEA;AACA,YAAY,4CAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;;AAEA,qFAAyC;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;ACjGqC;AACQ;AACC;;AAE9C,6EAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA,kFAAkF,2CAAmB;AACrG,2BAA2B,2CAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,mDAAuB;AAC5D;AACA;AACA,cAAc,mDAAuB;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA,IAAI;AACJ,IAAI,iCAAY;AAChB,IAAI,iCAAY;AAChB;AACA;AACA;;;;;;;;;ACjE6C;AACR;AACU;AACD;AAC4C;AAC/B;;AAE3D;AACA;AACA;AACA,mEAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uEAAkC;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,4BAA4B,KAAK;AACjC;AACA;AACA,mBAAmB,2EAAmC;AACtD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,6BAA6B,kBAAkB;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2CAA2C,iBAAiB;AAC5D;;AAEA;AACA,oBAAoB,2EAAmC;AACvD;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,IAAI,8DAA4B;AAChC;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uCAAuC;AAC7D;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,yCAAyC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,2EAAmC;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wCAAwC,gEAA6B,mBAAmB,mCAAmC;AAC3H;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2CAAqB,sBAAsB,+CAA+C,aAAa,cAAc;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2CAAqB,sBAAsB,+CAA+C,uBAAuB,cAAc;AAChJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2CAAqB,IAAI,eAAe,6BAA6B,+CAA+C,eAAe,cAAc;AAClK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2CAAqB,sBAAsB,+CAA+C,WAAW,cAAc;AACpI;AACA;AACA;AACA;AACA,aAAa,gEAA6B,gBAAgB,sEAAsE;AAChI,6DAA6D,8DAA8D;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2CAAqB,IAAI,QAAQ,GAAG,sBAAsB,cAAc,WAAW,+CAA+C,YAAY,cAAc;AAC7K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2CAAqB,IAAI,QAAQ,6BAA6B,+CAA+C,WAAW,cAAc;AACvJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2CAAqB,wBAAwB,aAAa,IAAI,cAAc;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2CAAqB,IAAI,QAAQ,6BAA6B,8CAA8C,IAAI,cAAc;AAC/I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,iCAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,uGAAkD;AAClD,yBAAyB,2CAAqB,mCAAmC,iBAAiB;;AAElG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,uFAA0C;AAC1C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,gEACR,6BAA6B,kCAAkC;AACvF;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,wEAAiC;AACvC;AACA;AACA,MAAM,sEAAgC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA,+BAA+B,wEAAiC;AAChE;AACA;AACA;AACA,mBAAmB,2CAAqB;AACxC;AACA;;AAEA;AACA;AACA;AACA,IAAI,wEAAiC;AACrC,IAAI,kDAAsB;AAC1B,IAAI,kDAAsB;AAC1B,IAAI,kDAAsB;AAC1B;;AAEA,EAAE,8DAA4B;AAC9B,sBAAsB,8EAAoC;AAC1D,yFAAyF,0BAA0B;AACnH,mBAAmB,2CAAqB;AACxC;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,mBAAmB,2CAAqB;AACxC,uGAAuG,aAAa;AACpH;AACA;AACA,oBAAoB,aAAa;AACjC;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,EAAE,iCAAY;AACd,EAAE,iCAAY;AACd,EAAE,iCAAY;AACd,EAAE,iCAAY;AACd,EAAE,iCAAY;AACd,EAAE,iCAAY;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,iCAAY;AACd;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;;AAGA;AACA,wBAAwB,+CAAmB;AAC3C,EAAE,iCAAY;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,EAAE,iCAAY;AACd;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;ACvmB+C;AACD;;AAE9C,2FAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,gEAA6B,iCAAiC,uBAAuB;;AAE3F;AACA;AACA,MAAM,gEAA6B,wCAAwC,uBAAuB;;AAElG;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;;ACvH6C;AACN;AACQ;AACD;;AAE9C,uGAAkD;AAClD,sBAAsB,+EACX;AACX;;AAEA;AACA,MAAM,8DAA4B,4CAA4C,YAAY;AAC1F,MAAM,gEAA6B,kDAAkD,YAAY,YAAY,gDAAgD;AAC7J;AACA;;AAEA,+FAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,2FAA4C;AAC5C,SAAS,gEACe,mCAAmC,+DAA+D;AAC1H;AACA,eAAe;AACf,KAAK;AACL;;;AAGA,2FAA4C;AAC5C;AACA;;AAEA;AACA,2BAA2B,uFAAyC;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,gCAAgC,YAAY;AAC5C,KAAK;AACL;AACA;AACA;AACA,wCAAwC;AACxC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAA2C;AAC3C;;AAEA;AACA,+BAA+B,uFACpB;;AAEX,kCAAkC,wDAAyB,oBAAoB,8BAA8B;;AAE7G;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU,wEAAiC;AAC3C;AACA;AACA;AACA;AACA,kDAAkD,yBAAyB;AAC3E;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;;AAER;AACA;AACA;AACA,kCAAkC,YAAY;AAC9C;AACA;;AAEA;;AAEA,6FAA6C;AAC7C;AACA;;AAEA;AACA,2BAA2B,uFAAyC;;AAEpE;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA,aAAa,yBAAyB,EAAE,yBAAyB;AACjE;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,iCAAiC,YAAY;AAC7C,KAAK;AACL;;AAEA;AACA;AACA,yCAAyC;AACzC;AACA;;AAEA,mGAAgD;AAChD;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,2EAAmC;AACxD;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,uBAAuB,2EAAmC;AAC1D;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,qBAAqB,2EAAmC;AACxD;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,0CAAgB,gBAAgB;AAC9E;AACA;;AAEA,qFAAyC;AACzC,oBAAoB,gEAA6B;AACjD;AACA;;AAEA,6FAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;ACpR6C;AACE;AACoB;AAC9B;AACS;;AAE9C,uFAA0C;AAC1C;AACA,gBAAgB,wDAAyB,oBAAoB,8BAA8B;AAC3F;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,mGAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yGAAkD;AAC/D;AACA;AACA;AACA;AACA;;AAEA,2FAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2EAAmC;AACzD;AACA;AACA;AACA;AACA;AACA;;AAEA,uFAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA,mFAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,2FAA4C;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,2EAAmC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA,kBAAkB,4BAA4B;AAC9C;AACA;;AAEA,+DAA+D,mBAAmB;;AAElF;AACA;AACA;AACA;AACA,QAAQ,iCAAY,wBAAwB,YAAY,KAAK,8BAA8B;AAC3F,qBAAqB,yGAAkD;AACvE;AACA;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA,kBAAkB,4BAA4B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6CAA6C;AACvE;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA,+EAAsC;AACtC;;AAEA;AACA,EAAE,2EAAmC;AACrC;AACA;AACA;;AAEA;AACA,+BAA+B,gEACL,6BAA6B,wBAAwB;AAC/E;AACA;AACA,yBAAyB,gEACC,6BAA6B,oBAAoB,cAAc,GAAG;AAC5F;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8BAA8B,WAAW;AACzC;AACA,kBAAkB,cAAc;AAChC;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR,0BAA0B,mDAAuB;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,6CAA6C;AAC/D,oBAAoB,iDAAiD;AACrE,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;;AAEH;AACA;;AAEA;;;ACtN6C;AAC7C;AACuC;AACQ;AACD;;AAE9C,uGAAkD;AAClD,EAAE,iFAAsC;AACxC;AACA;AACA,GAAG;AACH;AACA;;AAEA,mGAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uFAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB;AACA,2EAAoC;AACpC;AACA,EAAE,iFAAsC;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,gEACP,6BAA6B,mFAAmF;AAC1I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gEACQ,6BAA6B,YAAY,aAAa,qEAAqE;AACrJ;AACA;AACA,yBAAyB,gEACC,2BAA2B,YAAY,aAAa,mFAAmF;AACjK;AACA;AACA,4CAA4C,0BAA0B;AACtE,wBAAwB,gEACE,6BAA6B,YAAY,aAAa,qDAAqD;AACrI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,gEAA6B,mCAAmC,YAAY,aAAa,yCAAyC;AAC1I;AACA;;AAEA;AACA;AACA,gCAAgC,wDAAuB;AACvD;AACA;AACA,GAAG;;AAEH;AACA;;AAEA,yFAA2C;;AAE3C;AACA,EAAE,iFAAsC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,gCAAgC,gEACN,6BAA6B,YAAY,aAAa,0CAA0C;AAC1H,uBAAuB,sDAAwB;AAC/C;AACA,iDAAiD,WAAW;AAC5D;;AAEA,+BAA+B,gEACL,6BAA6B,YAAY,aAAa,yCAAyC;AACzH,+BAA+B,sDAAwB;AACvD;;AAEA;AACA;AACA;AACA;AACA,kDAAkD,UAAU;AAC5D,QAAQ;AACR,kDAAkD,mBAAmB;AACrE;AACA,MAAM;AACN;AACA,kDAAkD,oBAAoB,IAAI,gBAAgB;AAC1F,QAAQ;AACR,kDAAkD,mBAAmB;AACrE;AACA,MAAM;AACN,gDAAgD,gBAAgB;AAChE;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB;AACA,6FAA6C;AAC7C;AACA;;;AAGA;AACA;AACA;AACA,qFAAyC;AACzC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;;AC9M+C;AACD;;AAE9C,qFAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,gEAA6B,6BAA6B,iCAAiC;AAC3H,2CAA2C,gEAA6B,6BAA6B,+DAA+D;;AAEpK;AACA;AACA,gBAAgB,kEAA8B;AAC9C;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA,gBAAgB,kEAA8B;AAC9C;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA,gBAAgB,kEAA8B;AAC9C,gCAAgC,WAAW;AAC3C;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;;AAEA,iFAAuC;AACvC;AACA;AACA;AACA;;;ACtG+C;AACD;;AAE9C,uFAA0C;AAC1C,mBAAmB,gEAA6B,6BAA6B,uBAAuB;AACpG;;AAEA,wBAAwB,oEAA+B;;AAEvD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AC1B6C;AAC4B;AAC1B;AACV;AACS;;AAE9C,uFAA0C;AAC1C;AACA;AACA;AACA;AACA;;AAEA,uFAA0C;AAC1C;AACA;AACA;AACA;AACA;;AAEA,6HAA6D;;AAE7D,oBAAoB,gEAA6B;AACjD,0BAA0B,yDAA6B;;AAEvD;AACA;AACA;AACA,oBAAoB,2FAA2C;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH,EAAE,iCAAY,0BAA0B,UAAU,YAAY,OAAO;AACrE;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA,uFAA0C;AAC1C;AACA;AACA;AACA;AACA;;;ACzE8C;;AAE9C,mFAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;ACZ6C;AACE;AACD;;AAE9C,mEAAgC,wBAAwB,yBAAyB,IAAI;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qEAAgC;AAClD;AACA;AACA,UAAU;AACV,+BAA+B,iBAAiB;AAChD;AACA,OAAO;AACP;;AAEA;AACA;AACA,2BAA2B;AAC3B,IAAI,gEAA6B;AACjC;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,gEACsB;AACxB;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,gEACsB;AACxB;AACA;AACA;AACA;AACA,QAAQ;AACR,8BAA8B,UAAU;AACxC;AACA,KAAK;;AAEL;;AAEA;;AAEA,+EAAsC;AACtC;AACA;;;AC9E6C;AACE;AACD;;AAE9C,6EAAqC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,qEAAgC;AACvD;AACA,oFAAoF,WAAW;AAC/F;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA,qBAAqB,gEACG,6BAA6B,+BAA+B;AACpF;;AAEA;AACA;AACA,sBAAsB,gEACI,6BAA6B,kBAAkB,KAAK,mBAAmB;AACjG;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAI,wEAAiC;AACrC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA,uBAAuB,qEAAgC;AACvD;AACA,uBAAuB,gEACG,2BAA2B,yBAAyB,WAAW,gBAAgB;AACzG;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA;AACA;;;AAGA;AACA;AACA;AACA,mBAAmB,qEAAgC;AACnD;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;ACvH6C;AACE;AACD;;AAE9C,2EAAoC;AACpC,mBAAmB,8DAA4B;AAC/C;AACA,MAAM,6EAAoC;AAC1C,MAAM,6EAAoC;AAC1C;AACA;;AAEA;AACA;;;ACb6C;AACN;AACO;;;AAG9C;AACA;AACA,SAAS,2EAAmC;AAC5C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,2FAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wDAAuB;AACnD,oBAAoB,oDAAoD;AACxE;AACA,GAAG;AACH;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,iFAAuC;AACvC;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA,2EAAoC;AACpC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,UAAU;AACV,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,uFAA0C;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qGAAiD;AACjD;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,gCAAgC,wDAAuB;AACvD;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;;;;AC1L6C;AACE;AACD;AACL;;AAEzC,2EAAoC;AACpC;AACA,uCAAuC,kEAA6B;AACpE,sBAAsB,sBAAO;AAC7B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,QAAQ,iFAAsC;AAC9C,wBAAwB,8DACO,uDAAuD,aAAa;AACnG;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,wBAAwB,8DAA4B;AACpD;AACA;AACA;AACA,cAAc,6EAAoC,+DAA+D,sCAAsC;AACvJ,iBAAiB,sCAAsC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;AChD6C;AACR;AACS;;AAE9C,yEAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uGAAkD;AAClD;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,2EAAmC;AAC3D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qFAAyC;AACzC;AACA;;AAEA;;AAEA;AACA;AACA,sBAAsB,oDAAoD;AAC1E;;AAEA;AACA;AACA,cAAc;AACd,kDAAkD;AAClD;AACA;AACA;AACA;AACA,sBAAsB,oDAAoD;AAC1E,sCAAsC;AACtC;AACA;AACA;AACA;AACA,sBAAsB,oDAAoD;AAC1E,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,sBAAsB,oDAAoD;AAC1E,yEAAyE;AACzE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+EAAsC;AACtC;AACA;;AAEA,qHAAyD;AACzD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uFAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+FAA8C;AAC9C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA,uCAAuC,wBAAwB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,MAAM;AACN;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,MAAM,8DAA8D;AACpE,MAAM,sDAAsD;AAC5D,MAAM,wDAAwD;AAC9D,MAAM,gEAAgE;AACtE,MAAM,qDAAqD;AAC3D,MAAM,kEAAkE;AACxE,MAAM,+DAA+D;AACrE,MAAM,sEAAsE;AAC5E,MAAM,oEAAoE;AAC1E,MAAM,mEAAmE;AACzE,MAAM,gEAAgE;AACtE,MAAM,4DAA4D;AAClE,MAAM,0DAA0D;AAChE,MAAM,mDAAmD;AACzD,MAAM,oEAAoE;AAC1E,MAAM,uEAAuE;AAC7E,MAAM,sEAAsE;AAC5E,MAAM,qEAAqE;AAC3E;AACA;AACA,MAAM,6EAA6E;AACnF;AACA;;AAEA;AACA;AACA;;;AAGA,2FAA4C;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,EAAE,iCAAY;;AAEd;AACA,EAAE,iCAAY;;AAEd;;;AAGA,mFAAwC;AACxC;AACA;AACA;;AAEA;AACA,IAAI,iCAAY,uCAAuC,gBAAgB;AACvE;AACA;AACA;AACA,KAAK;;AAEL;AACA,MAAM,iCAAY;AAClB;AACA,QAAQ,iCAAY,aAAa,iBAAiB;AAClD;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,UAAU,iCAAY;AACtB;AACA;AACA,YAAY,iCAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA,OAAO;AACP;AACA;;AAEA;AACA,IAAI,iCAAY,8BAA8B,IAAI;AAClD;AACA;AACA;AACA,KAAK;AACL;AACA,MAAM,iCAAY;AAClB;AACA,QAAQ,iCAAY,aAAa,WAAW;AAC5C;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,UAAU,iCAAY;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;AACP;AACA;;AAEA,EAAE,iCAAY;;AAEd;AACA,EAAE,iCAAY;AACd;;;;;;;;;;;ACxcA;AACuC;;AAEvC;AAC2C;AACF;AACI;AACuC;;;AAGpF;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,kBAAkB,8BAAU;;AAE5B;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,UAAU,0CAAsB;AAChC,8BAA8B,gDAA4B;AAC1D;;AAEA,8BAA8B,wDAAuB;AACrD;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uBAAuB,GAAG,cAAc;AACnE;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA,6BAA6B,qDAAqD;AAClF,qBAAqB,gCAAU,qBAAqB,0BAA0B;AAC9E;;AAEA;AACA,UAAU,4BAAS;AACnB;;AAEA;AACA;;;AChF8C;AACa;AACtB;;AAErC,qFAAyC;AACzC,8BAA8B,aAAa;AAC3C,EAAE,iCAAY;AACd;AACA,EAAE,iCAAY;AACd;;;ACT+C;AACD;;AAE9C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH,WAAW,GAAG;AACd;AACA,2GAAoD;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,yBAAyB,sDAAwB,CAAC,gEAA6B,6BAA6B,uBAAuB;AACnI;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,8BAA8B,4BAA4B;AAC1D;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,WAAW,GAAG;AACd;AACA,yFAA2C;AAC3C;AACA;AACA,MAAM,iDAAiD;AACvD,MAAM,mCAAmC,KAAK,iBAAiB;AAC/D,MAAM,yDAAyD;AAC/D;;AAEA;AACA;;AAEA,qGAAiD;AACjD;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,WAAW,GAAG;AACd;AACA,2FAA4C;AAC5C;AACA;AACA;AACA;AACA,MAAM,mCAAmC,KAAK,WAAW;AACzD,MAAM,kDAAkD;AACxD,MAAM,mCAAmC,KAAK,kBAAkB;AAChE;;AAEA;AACA;;AAEA,uGAAkD;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,WAAW,GAAG;AACd;AACA,+FAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,iDAAiD;AACvD,MAAM,+CAA+C;AACrD,MAAM,+CAA+C;AACrD;;AAEA;AACA,iBAAiB,gEAA6B,6BAA6B,uBAAuB;AAClG,kBAAkB,sDAAwB;AAC1C,+DAA+D,MAAM;AACrE,GAAG;AACH;AACA;;AAEA,2FAA4C;AAC5C;AACA;AACA;AACA;AACA,MAAM,6CAA6C;AACnD,MAAM,qDAAqD;AAC3D;;AAEA;AACA,WAAW,sDAAwB,CAAC,gEAA6B,6BAA6B,uBAAuB;AACrH,GAAG;AACH;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;;ACvKA;AAC0C;AACQ;;AAE3C;AACP;;AAEA,wBAAwB,kDAAsB,GAAG,qCAAqC;AACtF,wBAAwB,oDAAqB;AAC7C,6BAA6B,kDAAsB,GAAG,iCAAiC;AACvF,sBAAsB,oDAAqB;;AAE3C;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA,6BAA6B,eAAe,IAAI,YAAY;AAC5D,iDAAiD,0BAA0B;AAC3E;AACA;AACA;AACA;;AAEA;AACA;;;;AC/G8C;AACmB;;AAEjE,yFAA2C;AAC3C;AACA;AACA;AACA,0BAA0B,mBAAmB;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;;;;;ACjB6C;AACiC;;AAEvE;AACP;AACA;;AAEA;AACA,mEAAmE,sCAAsC;AACzG;;AAEA,0BAA0B,+CAAgB,GAAG,0DAA0D;AACvG,mCAAmC,+CAAgB,GAAG,0CAA0C;AAChG;AACA,WAAW,wCAAS;AACpB,oBAAoB,wCAAS;AAC7B;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACO;AACP;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACO;AACP;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEO;AACP;AACA,cAAc,WAAW;AACzB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;;AAEA,YAAY,MAAM;AAClB;;AAEA;AACA;AACA,WAAW;AACX;AACO;AACP;AACA,oBAAoB,iDAAsB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,aAAa;AACb;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,QAAQ;AACnB,WAAW,OAAO,8DAA8D,yBAAyB;AACzG;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACO;AACP;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA,8BAA8B,uFACjB;AACb;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;;AAGA,WAAW;AACX;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AC1P6C;AACR;AACqB;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,mEAA+B;AAC3C,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kCAAkC,uBAAuB;AACzD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,aAAa;AACb,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,kCAAkC,cAAc;AAChD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,6BAA6B,kBAAkB;;AAE/C;AACA,mCAAmC,qFAAwC;AAC3E;AACA;AACA,UAAU;AACV,mCAAmC,qFAAwC;AAC3E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,IAAI,iCAAY;AAChB;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,uBAAuB,OAAO;AAC9B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,QAAQ,iDAAsB;AAC9B;AACA;AACA;;AAEA;AACA,UAAU;AACV,UAAU;AACV;AACA,UAAU;AACV,UAAU;;AAEV;AACA,UAAU;AACV,UAAU;AACV;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,YAAY;AACZ,OAAO;AACP;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4DAA4D,mBAAmB;AAC/E;;AAEA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,iCAAY,iBAAiB,YAAY,UAAU,UAAU;AACnE;;AAEA;AACA,UAAU,iDAAsB;AAChC;AACA;AACA;;AAEA;AACA,YAAY;AACZ,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,YAAY;AACZ,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;;AAEO;AACP;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ,IAAI,iCAAY,cAAc;AAC9B;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,4BAA4B,UAAU;AACtC;AACA;AACA,MAAM;;AAEN;AACA;;;;;ACvd+C;AACV;;;AAGrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,kCAAkC;;AAElC;AACA;AACA;;AAEA;AACA,IAAI,iCAAY,0BAA0B,iBAAiB;;AAE3D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,gEAA6B,iBAAiB,gDAAgD;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,IAAI,+BAAW,IAAI,kBAAkB;AACrC;AACA;;AAEA;;;AAGO;AACP;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,iCAAY,iCAAiC,sBAAsB,KAAK,UAAU;AAC9F;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;;;;;ACjHsB;;AAEiB;;AAEvC;AACA,eAAe,0CAAc;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,0DAA0B;AAClC,sBAAsB,gEAA6B,GAAG,6CAA6C;AACnG;;AAEA;AACA;;AAEA;AACA,eAAe,0CAAc;AAC7B,QAAQ,0DAA0B;AAClC,EAAE,oEAA+B;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEO;;AAEP;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;ACxO6C;AACN;AACQ;AAC2G;;AAE1J;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA,eAAe,uEAAiC;AAChD;AACA;AACA,gBAAgB,yEAAkC;AAClD;AACA;;AAEA;AACA,cAAc,WAAW,EAAE,YAAY;AACvC,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA,SAAS,2EACE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,gBAAgB,0BAA0B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,gEAA6B;AACzD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU,oDAAqB;AAC/B;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM,oDAAqB,iCAAiC,IAAI;AAChE;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,oDAAqB,gBAAgB,IAAI;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,8DAA4B;AAC7D,6BAA6B,oDAAqB;AAClD,uBAAuB,aAAa;AACpC;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,UAAU;AAC7D;AACA,iCAAiC,8DAA4B;AAC7D,6BAA6B,oDAAqB;AAClD;AACA;AACA,6BAA6B,WAAW,IAAI,gBAAgB;AAC5D;AACA,KAAK;;AAEL;AACA,2EAA2E,uBAAuB;;AAElG;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA,YAAY,4CAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ,+BAA+B,mBAAmB;AAClD;;AAEA,8BAA8B,cAAc;AAC5C,yBAAyB,gDAAqB;AAC9C,2BAA2B,WAAW;AACtC,yBAAyB,mBAAmB;AAC5C,2BAA2B,WAAW;AACtC,yBAAyB,aAAa;AACtC;AACA,+BAA+B;AAC/B;;AAEA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,+BAA+B,oDAAqB;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;ACvUuC;AACQ;AAC6E;;AAE5H;AACA;AACA;AACA,SAAS,mBAAQ;AACjB,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,gBAAgB,0BAA0B;AAC1C;AACA,IAAI,oBAAS;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM,oDAAqB,yCAAyC,mBAAmB;AACvF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEe;AACf;AACA;AACA;AACA,iBAAiB,4CAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA,kCAAkC,cAAc;AAChD,6BAA6B,gDAAqB;AAClD;AACA,+BAA+B,WAAW;AAC1C,6BAA6B,mBAAmB;AAChD,+BAA+B,WAAW;AAC1C,6BAA6B,aAAa;AAC1C;AACA,mCAAmC;AACnC,4BAA4B,mBAAQ;AACpC;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA,6BAA6B,oBAAS;AACtC;;AAEA;AACA;;;AClG6C;AACN;AACQ;AAC2G;;AAE1J;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA,SAAS,oBAAa;AACtB;AACA,eAAe,uEAAiC;AAChD,gBAAgB,yEAAkC;;AAElD;AACA,cAAc,WAAW,EAAE,YAAY;AACvC,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB;AACA,SAAS,oBAAa;AACtB;AACA;AACA;AACA,EAAE,6EAAoC;AACtC;AACA;AACA;AACA,GAAG;;AAEH,WAAW,2EAAmC;AAC9C;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,SAAS,eAAQ;AACjB,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB;AACA,SAAS,iBAAU;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,gBAAgB,0BAA0B;AAC1C;AACA,SAAS,gBAAS;AAClB;AACA;AACA;AACA,gBAAgB,oDAAqB,uBAAuB,mBAAmB;AAC/E,IAAI;AACJ;AACA;;AAEA;;AAEA;AACA;AACA;AACA,uBAAuB,oDAAqB,wCAAwC,mBAAmB;;AAEvG;AACA,SAAS,YAAY;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,uBAAuB,UAAU;AACjC;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEe;AACf,iBAAiB,4CAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA,4BAA4B,oBAAa;AACzC,4BAA4B,oBAAa;AACzC,4BAA4B,mBAAmB;AAC/C,6BAA6B,cAAc;AAC3C,wBAAwB,gDAAqB;AAC7C,0BAA0B,WAAW;AACrC,wBAAwB,mBAAmB;AAC3C,0BAA0B,WAAW;AACrC,wBAAwB,aAAa;AACrC;AACA,8BAA8B;AAC9B,uBAAuB,eAAQ;AAC/B,yBAAyB,iBAAU;AACnC;AACA,8BAA8B,eAAe;AAC7C,wBAAwB,gBAAS,OAAO,eAAe;;AAEvD;AACA,wBAAwB,OAAO;AAC/B;;AAEA;AACA;;;ACjL6C;AACN;AACQ;AACkF;;;AAGjI;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;AACA;AACA,oBAAoB,2EAAmC;AACvD,kBAAkB,2EAAmC;;AAErD;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,sDAAwB,CAAC,8DAA4B;AACpF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA,mDAAmD;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO,8DAA8D,yBAAyB;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA,YAAY,4CAAiB;AAC7B;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA,6BAA6B,cAAc;AAC3C,wBAAwB,gDAAqB;AAC7C,0BAA0B,WAAW;AACrC,wBAAwB,mBAAmB;AAC3C,0BAA0B,WAAW;AACrC,wBAAwB,aAAa;AACrC;AACA,sBAAsB,OAAO;;AAE7B;AACA,yFAAyF,YAAY;AACrG;;AAEA;AACA;;;AClJuC;AACQ;AAW1B;;;AAGrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,gBAAgB,0BAA0B;AAC1C;AACA,SAAS,mBAAS;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,uBAAuB,UAAU;AACjC;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACe,mCAAmC,gDAAgD,IAAI;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4CAAiB;AAC7B;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA,iDAAiD,WAAW;AAC5D,QAAQ,aAAa;AACrB,+BAA+B,oDAAqB;AACpD;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI,oDAAqB;AACzB,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,IAAI,8DAA0B;AAC9B;AACA;;AAEA,4BAA4B,cAAc;AAC1C,uBAAuB,gDAAqB;AAC5C,yBAAyB,WAAW;AACpC,uBAAuB,mBAAmB;AAC1C,yBAAyB,WAAW;AACpC,uBAAuB,aAAa;AACpC;AACA,qBAAqB,OAAO;AAC5B,wCAAwC,WAAW;;AAEnD;;AAEA;AACA,yBAAyB,mBAAS;;AAElC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,QAAQ;AACR;AACA;AACA,yCAAyC,UAAU,KAAK,kCAAkC;AAC1F;AACA;AACA;;;AAGA;AACA;;;AC/K6C;AACN;AACQ;AACqE;;AAEpH;AACA,sBAAsB,+EACX;AACX;AACA,kBAAkB,gEAA6B,sCAAsC,YAAY,YAAY,kBAAkB;AAC/H;AACA;;AAEA;AACA,eAAe,wDAAyB,SAAS,8BAA8B;AAC/E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM,wEAAiC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4CAAiB;AAC7B;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA,yBAAyB,mFAAuC;;AAEhE;AACA,4BAA4B,cAAc;AAC1C;AACA,uBAAuB,gDAAqB;AAC5C,yBAAyB,WAAW;AACpC,uBAAuB,mBAAmB;AAC1C,yBAAyB,WAAW;AACpC,uBAAuB,aAAa;AACpC;AACA,qBAAqB,OAAO;;AAE5B;AACA;;;AC/EuC;AACQ;AAC+E;;;AAGvH,SAAS,wBAAa;AAC7B;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEO,SAAS,oBAAS;AACzB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,uBAAuB;AAC7E,UAAU;AACV,2DAA2D,uBAAuB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,IAAI;AACJ;AACA,QAAQ,yDAAyD;AACjE,QAAQ,4DAA4D;AACpE,QAAQ,uEAAuE;AAC/E,QAAQ,kEAAkE;AAC1E,QAAQ,+DAA+D;AACvE,QAAQ,wDAAwD;AAChE,QAAQ,+DAA+D;AACvE,WAAW,iDAAiD;AAC5D,QAAQ,4DAA4D;AACpE,QAAQ,4DAA4D;AACpE;AACA;AACA;AACA,2DAA2D,iBAAiB;AAC5E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGe,oCAAoC,wDAAwD,IAAI;AAC/G;AACA;AACA;AACA;AACA,YAAY,4CAAiB;AAC7B;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA,qBAAqB,iBAAiB;AACtC,4BAA4B,cAAc;AAC1C,uBAAuB,gDAAqB;AAC5C,yBAAyB,WAAW;AACpC,uBAAuB,mBAAmB;AAC1C,yBAAyB,WAAW;AACpC,uBAAuB,aAAa;AACpC;AACA,6BAA6B;AAC7B;AACA,2BAA2B,wBAAa;;AAExC;AACA,yBAAyB,oBAAS,UAAU,wBAAa;AACzD,IAAI;AACJ;AACA;;AAEA;AACA;;;AC3IuC;AACQ;AACkI;AACpI;;;AAG7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,yDAA0B;AACvC,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;;AAEe;AACf;;AAEA;AACA;AACA;AACA;AACA,YAAY,4CAAiB;AAC7B;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA,4BAA4B,cAAc;AAC1C,uBAAuB,gDAAqB;AAC5C,yBAAyB,WAAW;AACpC,uBAAuB,mBAAmB;AAC1C,yBAAyB,WAAW;AACpC,uBAAuB,aAAa;AACpC;AACA,sBAAsB,QAAQ;;AAE9B;AACA;AACA;AACA,IAAI;AACJ,2BAA2B,WAAW;AACtC,8CAA8C,WAAW;AACzD,QAAQ,aAAa;AACrB,+BAA+B,oDAAqB;AACpD;AACA;AACA;AACA;;;ACrJuC;AAC8D;;AAEtF;AACf;AACA;AACA;AACA;AACA,YAAY,4CAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sCAAsC,sBAAsB;AAC5D;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,WAAW;AAC1C,6BAA6B,mBAAmB;AAChD,4BAA4B,QAAQ;AACpC,+BAA+B,WAAW;AAC1C;AACA,6BAA6B,aAAa;;AAE1C;AACA;;;AC/C+C;AACF;AACC;AACT;;AAErC;AAC+C;;AAEP;;AAExC;AAC2D;AACZ;AACqB;AACA;;AAEpE;AACsD;;AAEhB;AACQ;AACT;AACD;AACQ;AACV;AACY;AACZ;AACQ;;AAEyB;AAC5B;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,eAAe,YAAY,+EAA+E;AACvH;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA,aAAa,eAAe;AAC5B;AACA;AACA;AACA;AACA,aAAa,cAAc,YAAY,6CAA6C;AACpF;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc,YAAY,oDAAoD;AAC7F,QAAQ;AACR,eAAe,cAAc,YAAY,6CAA6C;AACtF,QAAQ;AACR,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,cAAc,YAAY,yBAAyB;AAC9D,IAAI;AACJ,WAAW,SAAS;AACpB,IAAI;AACJ,WAAW,SAAS;AACpB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA,aAAa,eAAe,YAAY,6DAA6D;AACrG;AACA;AACA,aAAa,eAAe,YAAY,6DAA6D;AACrG;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA,MAAM,+BAAW;AACjB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,+CAAqB;AACxC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,YAAY;AACZ,mBAAmB,WAAW;AAC9B;AACA;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe,YAAY,6EAA6E;AAC3H,YAAY;AACZ,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA,iBAAiB,eAAe,YAAY,4EAA4E;AACxH;AACA;AACA;AACA;AACA;AACA,UAAU,+BAAW;AACrB;AACA;AACA,MAAM;AACN;AACA,aAAa,eAAe;AAC5B;AACA,qBAAqB,WAAW;AAChC;AACA;AACA;AACA,6BAA6B,aAAa;AAC1C,wBAAwB,QAAQ;AAChC,2DAA2D,oDAAqB;;AAEhF;AACA,WAAW,wDAAyB;AACpC;;AAEA;AACA,IAAI;AACJ,IAAI,+BAAW;AACf,+BAA+B,wBAAwB,IAAI,wBAAwB,GAAG,8BAA8B,IAAI,YAAY;AACpI;AACA;AACA,IAAI,iCAAY;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA;AACA,SAAS,gEAA6B,kBAAkB,2BAA2B;AACnF;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,mGAA+C;AAC1D;AACA;AACA;AACA;AACA;AACA,QAAQ,mGAA+C;AACvD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,yFAA0C;AACrD;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,wEAAiC;AACxD;AACA;AACA;;AAEA,qBAAqB,wEAAiC;AACtD;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,yEAAmC;AACnC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS,gEAA6B,eAAe,sEAAsE;AAC3H,SAAS,8DAA4B;AACrC,SAAS,8DAA4B;AACrC;AACA;AACA,wBAAwB,gEAA6B,iBAAiB,gDAAgD;AACtH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,0EAAkC;AAC1C;AACA;AACA;AACA,QAAQ,0EAAkC;AAC1C;AACA;AACA,QAAQ,gFAAqC;AAC7C;AACA;AACA;AACA;AACA;;AAEA,EAAE,iCAAY,cAAc,wCAAwC,KAAK,gBAAgB;;AAEzF;AACA;;AAEA;AACA;AACA,yEAAmC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,6EAAoC;AACzD;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,wCAAiB;AAC1C;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,iCAAa;;AAExD,+BAA+B;;AAE/B;AACA;AACA,aAAa,cAAc;AAC3B;AACA;AACA;AACA;;AAEA;AACA,aAAa,2CAAe;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,mBAAmB,mBAAmB;;AAEtC,oCAAoC,aAAa;AACjD,6CAA6C,2CAAe;AAC5D;;AAEA;AACA;AACA;;AAEA,EAAE,gCAAQ;AACV;AACA;AACA;;;;;ACjgBqC;AACI;AACK;AACa;;;AAG3D,+EAAsC;AACtC;AACA;AACA;AACA;;;AAGA,+EAAsC;AACtC,kCAAkC,kCAAmB,SAAS,sBAAsB;AACpF;AACA;AACA;;AAEA,mFAAwC;AACxC;AACA;AACA;AACA;;AAEA,yFAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uFAA0C;AAC1C;AACA;AACA;AACA,qBAAqB,cAAc,IAAI,UAAU;AACjD,gDAAgD,cAAc,IAAI,UAAU;AAC5E;AACA;AACA;AACA;AACA;AACA;;AAEA,qFAAyC;AACzC,qBAAqB,uFAAsC;AAC3D;AACA;AACA;AACA,2DAA2D,qFAAqC;AAChG;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,EAAE,iCAAY;AACd;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AClFA;AACyB;AACzB;AACgC;AACP;AACQ;AACN;AACA;AACE;AACA;AACM;AACH;AACP;AACM;AACF;AACE;AACF;;AAE7B;AAC2B;AAC3B;AAC8B;AACA;AACH;AACW;AACA;AACP;AACG;AACP;AACQ;AACH;AACC;AACF;AACD;AACF;AACC;AACQ;AACR;AACK;AACA;AACI;;AAEN;;AAEP;;AAEW;;;AC9CG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAM;AACkB;AAC1B;;AAE9B;AACP,SAAS,yDAA0B;AACnC;;AAEO;AACP,qBAAqB,6DACV;AACX;AACA,+BAA+B,oGAAkD;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACO;AACP;AACA;AACA,EAAE,iCAAY,yBAAyB,WAAW;;AAElD;AACA;AACA,IAAI,iCAAY,aAAa,gBAAgB,KAAK,WAAW;AAC7D,oFAAoF,kBAAkB;AACtG;AACA;AACA,MAAM,iCAAY;AAClB,2BAA2B,mCAAmC;AAC9D;AACA;AACA;AACA,IAAI,iCAAY,WAAW,gBAAgB,KAAK,WAAW;AAC3D;AACA,0BAA0B,kDAAkD;AAC5E;AACA,+BAA+B,mBAAmB;AAClD,8DAA8D,sCAAsC;AACpG,wEAAwE,cAAc;AACtF;AACA,MAAM,iCAAY;AAClB,2BAA2B,mDAAmD;AAC9E;AACA;AACA;;;;;;;AC7DkC;AACE;AACsB;AAChB;AACJ;AACoB;AACR;AACS;AAC6B;AAC9C;AACW;AACD;AACJ;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,SAAS,wCAAe;AACxB;;AAEA;AACA;AACA,2BAA2B,mEAAkC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,qBAAqB;AACrE;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,gEAA8B;AAC9C;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,6BAAS;AAChC,sBAAsB,mEAA4B;AAClD;AACA,MAAM,uDAAwB;AAC9B,MAAM,yCAAiB;AACvB;AACA,kBAAkB,wDAA2B;AAC7C,qBAAqB,uDAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA,SAAS,WAAW,kBAAkB,KAAK;AAC3C,SAAS,WAAW,gBAAgB,KAAK;;AAEzC,EAAE,iCAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,iCAAY,sBAAsB,WAAW;AACvD,oDAAoD,WAAW,IAAI,cAAc;AACjF;AACA;AACA,QAAQ,iCAAY,IAAI,MAAM;AAC9B;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iCAAY,YAAY,MAAM;AACtC,QAAQ,iCAAY;AACpB;AACA,OAAO;AACP,GAAG;AACH;;AAEA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,yCAAyC,+BAA+B;AACxE;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,2BAA2B,+CAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,0BAA0B,cAAc;AACxC,oBAAoB,QAAQ;AAC5B,kDAAkD,EAAE;AACpD,4DAA4D,EAAE;AAC9D;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,2BAA2B,+CAAkB;;AAE7C,0BAA0B,cAAc;AACxC,oBAAoB,QAAQ;AAC5B,kDAAkD,EAAE;AACpD,iFAAiF,EAAE;AACnF;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,GAAG;AACH;;AAEA;AACA;AACA,2BAA2B,+CAAkB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,0BAAO;;AAExB;AACA;AACA,MAAM;AACN;AACA;;AAEA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,gBAAgB,gBAAgB,KAAK;AACxG,MAAM;AACN;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;;AAEA;AACA;AACA,+CAA+C,+CAA+C;AAC9F,GAAG;AACH;;AAEA;AACA;AACA,2BAA2B,+CAAkB;AAC7C;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;;AAGA;AACA,yBAAyB,+CAAkB;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;;AAEA;AACA;AACA,2BAA2B,+CAAkB;AAC7C;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;AAGA;AACA;AACA,2BAA2B,+CAAkB;AAC7C;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qEAAqE,WAAW;AAChF,GAAG;AACH;;AAEA;AACA;AACA,2BAA2B,+CAAkB;AAC7C,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,2BAA2B,+CAAkB;AAC7C,iBAAiB,0BAAO;;AAExB;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,sDAAsD,wBAAwB;AAC9E,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,2BAA2B,+CAAkB;;AAE7C;;AAEA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,iBAAiB,0BAAO,GAAG;AAC3B;AACA,sDAAsD,wBAAwB;AAC9E;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iCAAY,sCAAsC,YAAY,KAAK,qCAAqC;AAC5G;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA,yBAAyB,+CAAkB;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,iCAAY;AAClB;AACA;AACA;AACA;AACA,QAAQ,iCAAY,WAAW,WAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,iBAAiB;AAChG;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ;AACR,QAAQ,iCAAY,gBAAgB,WAAW;AAC/C,8CAA8C,WAAW;AACzD;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,iBAAiB;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,EAAE,iCAAY;AACd,EAAE,iCAAY;;AAEd;AACA;AACA;;AAEA;AACA,EAAE,iCAAY;;AAEd;AACA;AACA,IAAI,iCAAY;AAChB,IAAI;AACJ,IAAI,iCAAY;AAChB,IAAI,iCAAY;AAChB,IAAI,iCAAY;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET,MAAM,iCAAY;AAClB,MAAM,iCAAY;;AAElB;AACA;AACA;AACA,QAAQ;AACR,QAAQ,iCAAY;AACpB,QAAQ,iCAAY;AACpB,QAAQ,iCAAY;AACpB,QAAQ,iCAAY;AACpB;;AAEA,MAAM;AACN,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB,MAAM,iCAAY;AAClB;;AAEA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,0CAA0C,+CAAkB;AAC5D;;AAEA;AACA;AACA;AACA;AACA,OAAO,2EAAmC;AAC1C;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C,wBAAwB,oCAAoC;AAC5D;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;AACA;AACA,0CAA0C,+CAAkB;AAC5D;;AAEA;;AAEA;AACA;AACA,QAAQ,2EAAmC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM,iCAAY,kBAAkB,UAAU;AAC9C;AACA;AACA,QAAQ;AACR,uEAAuE,6CAA6C;AACpH;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,0CAA0C,+CAAkB;AAC5D;;AAEA;AACA;AACA;AACA;AACA,OAAO,2EAAmC;AAC1C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,iBAAiB;AAC5F,GAAG;AACH;AACA,uBAAuB;AACvB,+EAA+E,iBAAiB;AAChG,GAAG;AACH;AACA;AACA,uBAAuB;AACvB,8EAA8E,iBAAiB;AAC/F,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,iBAAiB;AACjG;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,+EAA+E,iBAAiB;AAChG,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C,wBAAwB,aAAa;AACrC;AACA;AACA,qBAAqB;AACrB;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2CAAmB;AACxC,0EAA0E,gBAAgB,gBAAgB,EAAE;AAC5G;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ,iCAAY,gBAAgB,WAAW;AAC/C,8CAA8C,WAAW;AACzD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;;AAGA;AACA;AACA,0CAA0C,+CAAkB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4CAA4C,+CAAkB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0BAAO;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,iCAAY;AACd;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;;AAEA;AACA;AACA,mFAAmF,WAAW;AAC9F,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,4CAA4C,+CAAkB;;AAE9D;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP,4BAA4B,8BAAW;;AAEvC;AACA,IAAI,iCAAY;AAChB,IAAI;AACJ,IAAI,iCAAY;AAChB,IAAI,iCAAY;AAChB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2BAAY;AACvC;AACA;AACA;;AAEA;AACA,IAAI,iCAAY,iBAAiB,2CAA2C;AAC5E;AACA;;AAEA,EAAE,iCAAY;AACd,EAAE,iCAAY,uBAAuB,sDAAsD;;AAE3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,iCAAY;AACd;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,uCAAuC,+CAAkB;AACzD,6CAA6C,+CAAkB;AAC/D,+CAA+C,+CAAkB;AACjE,gDAAgD,+CAAkB;AAClE,+CAA+C,+CAAkB;AACjE,+CAA+C,+CAAkB;AACjE,uCAAuC,+CAAkB;;;AAGzD;AACA;AACA;AACA,QAAQ,iCAAY;AACpB;AACA;AACA;AACA,QAAQ,iCAAY;AACpB;AACA;AACA;AACA,QAAQ,iCAAY;AACpB;AACA;AACA;AACA;AACA;AACA,UAAU,iCAAY;AACtB;AACA;AACA;AACA;AACA;AACA,UAAU,iCAAY;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iCAAY;AACpB;AACA;AACA;AACA,QAAQ,iCAAY;AACpB;AACA;AACA;AACA,QAAQ,iCAAY;AACpB;AACA;AACA;AACA,QAAQ,iCAAY;AACpB;AACA;AACA;AACA;;AAEA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,UAAU,eAAe;AACzD;AACA;AACA;;AAEA;AACA,wBAAwB,4BAA4B;AACpD,UAAU,iCAAY,kBAAkB,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,iCAAY;;AAEd;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAM,iCAAY;AAClB;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN,MAAM,+BAAW;AACjB;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN,MAAM,iCAAY;AAClB;AACA,8CAA8C,+CAAkB;AAChE,8CAA8C,+CAAkB;AAChE,uCAAuC,+CAAkB;AACzD,mDAAmD,+CAAkB;AACrE;AACA;;AAEA,gCAAgC,2EAAmC;AACnE;AACA;AACA;;AAEA,MAAM,iCAAY,iCAAiC,kCAAkC;AACrF;AACA;AACA;AACA,UAAU,iCAAY;AACtB;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR,QAAQ,iCAAY;AACpB;AACA,QAAQ;AACR;AACA;AACA,QAAQ,iCAAY;AACpB;AACA,UAAU,iCAAY;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,2BAAY;AAC/C;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA,GAAG;AACH;;;AAGA;AACA;AACA;AACA;AACA;;AAEA,4CAA4C,+CAAkB;AAC9D;AACA;AACA;AACA;;AAEA;AACA,MAAM,iCAAY,uBAAuB,qBAAqB;AAC9D;AACA;AACA,QAAQ,iCAAY,kBAAkB,qBAAqB;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,iBAAiB;AACjB,YAAY,iCAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,YAAY,iCAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA,6CAA6C,+CAAkB;AAC/D;AACA;AACA;;AAEA;AACA,MAAM,iCAAY,iBAAiB,qBAAqB;AACxD;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;;AAEA;AACA,QAAQ,iCAAY,kBAAkB,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEO;AACP;AACA,MAAM,mEAA4B;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjmD+C;AACuB;AAChC;;AAEvB;;AAEf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,6BAAS;AAC5B,0CAA0C,gBAAgB,QAAQ,8BAAW;AAC7E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU,6BAAS;;AAEnB,+BAA+B,8BAAW;AAC1C;AACA;AACA,MAAM;AACN,4CAA4C,+CAAkB;;AAE9D;AACA,0BAA0B,+CAAkB;AAC5C,YAAY,yBAAU;AACtB;AACA;AACA;AACA;;;AC3DoD;AACX;AACH;;AAE/B;;AAEP,gBAAgB,gCAAgC,IAAI,cAAc;AAClE;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,wDAA2B;AACjC,KAAK;AACL;;AAEA;AACA,oBAAoB;AACpB,gBAAgB,wDAA2B;AAC3C;AACA;AACA;AACA;AACA,QAAQ,0DAA4B;AACpC;;AAEA;AACA;AACA,UAAU;AACV,cAAc,kEAAgC;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC;AACzC;AACA,uBAAuB,wDAA2B;AAClD;AACA,YAAY,wDAA2B;AACvC,YAAY,0DAA4B;AACxC;AACA;AACA;AACA;;AAEA,0CAA0C,+CAAkB;;AAE5D;AACA,wBAAwB,+CAAkB;AAC1C,UAAU,yBAAU;AACpB;;AAEA;AACA;;AAEO;AACP;;AAEA,cAAc,wDAA2B;AACzC;AACA;AACA,IAAI;AACJ,wBAAwB,kEAAgC;AACxD;AACA;AACA,MAAM;AACN;AACA,wBAAwB,+CAAkB;AAC1C;AACA;AACA;AACA;AACA;;;ACtG0C;AACY;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,qBAAqB;AACrB,KAAK;AACL;AACA;AACA;AACA;;;AAGO;AACP;;AAEA,EAAE,iFAAsC;AACxC;AACA,yBAAyB,kDAAsB,mDAAmD,cAAc;AAChH,GAAG;;AAEH;AACA;;;;;ACvCqD;AACR;AACR;AACsB;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8BAAe;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,2BAA2B,8BAAe;AAC1C;AACA;AACA,sBAAsB,mEAA8B;AACpD;AACA;AACA,YAAY,+DAA8B;AAC1C;AACA;;AAEA,EAAE,iCAAY;;AAEd;AACA;AACA,IAAI,iCAAY;AAChB;AACA;AACA,MAAM,iCAAY;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,8CAA8C,WAAW;AACzD,UAAU;AACV,8CAA8C,UAAU,qBAAqB,WAAW;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,iCAAY;AAClB;AACA;AACA;AACA;AACA;AACA,oFAAoF,yBAAyB,GAAG,cAAc;AAC9H;AACA;AACA;AACA,UAAU;AACV,8CAA8C,WAAW;AACzD,UAAU;AACV,8CAA8C,UAAU,qBAAqB,eAAe;AAC5F;AACA,OAAO;AACP;AACA,GAAG;AACH;;;;;AChHoC;AACU;AACY;AACF;AACJ;AAClB;AACmB;AACX;AACmB;AACI;AACvB;AACsC;AACnC;AACU;AACiB;AACR;AAC1B;AACU;AACQ;AACU;AACtB;AACiC;AACZ;;AAElD;AACf;AACA;AACA;AACA;AACA;AACA,IAAI,iCAAY;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4BAA4B,yDAA2B;AACvD;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,yCAAe,WAAW,yCAAe;AACjD,MAAM,yCAAe;AACrB,MAAM,yCAAe;AACrB,MAAM;AACN;AACA;AACA;AACA,MAAM,yCAAe;AACrB;AACA;AACA,mDAAmD,MAAM,UAAU,OAAO;AAC1E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kEAAkE;;AAExF;AACA;;AAEA;AACA;AACA,wBAAwB,oCAAoC,GAAG,MAAM,OAAO,gBAAgB,QAAQ,WAAW;AAC/G;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yDAA0B;AAC/D;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yDAA0B;AAC/D;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,eAAe;AAC5B;AACA;AACA;AACA;;AAEA,0BAA0B,2DAAwB;AAClD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4EAAsC;AAC9C;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+BAAW,wBAAwB,kBAAkB;AACnE;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;AACA;AACA,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI,iCAAY;AAChB;AACA;AACA,6BAA6B;AAC7B,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,IAAI,iCAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4DAAyB,IAAI,kBAAkB,GAAG,oBAAoB;;AAE7F;AACA,wBAAwB,6DAA4B;AACpD;AACA;AACA,gCAAgC,6DAA4B,uDAAuD,SAAS;AAC5H;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;;;AAGA;AACA,iCAAiC,mEAAkC;AACnE;AACA;AACA;;AAEA;;AAEA;AACA;AACA,0BAA0B,oFAA0C;AACpE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,wBAAwB,iCAAa;AACrC,yBAAyB,6BAAS;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,mEAAkC;AACnE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sEAAmC;AAC3C,OAAO;;AAEP;AACA;AACA;AACA;AACA,QAAQ,sHAA2D;AACnE,OAAO;;AAEP;AACA;AACA;AACA,6BAA6B,SAAS,eAAe,aAAa;AAClE;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,mCAAmC,SAAS,eAAe;AAC3D;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,2BAAY;AAC9C;AACA,UAAU,iCAAY;AACtB;AACA,YAAY,2CAAmB,8CAA8C,YAAY;AACzF;AACA;AACA;AACA;AACA;AACA,YAAY,iCAAY,8BAA8B,4GAA4G;AAClK;AACA,YAAY;AACZ;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,cAAc,iCAAY,cAAc,sDAAsD;AAC9F;AACA;AACA;AACA;AACA;AACA,cAAc,iCAAY;AAC1B,cAAc,iCAAY;AAC1B;AACA,cAAc,iCAAY,cAAc,sDAAsD;AAC9F;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;AACA;AACA,YAAY,iCAAY;AACxB;AACA;AACA,WAAW;AACX,UAAU;AACV,UAAU,iCAAY;AACtB,UAAU,iCAAY;AACtB;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,UAAU,qCAAiB;AAC3B;AACA;AACA,UAAU;AACV,UAAU,iCAAY;AACtB,UAAU,iCAAY;AACtB;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS,GAAG;AAC1B;AACA;AACA,UAAU;AACV,UAAU,iCAAY;AACtB,UAAU,iCAAY;AACtB;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAA2B;AAC3C,oCAAoC,SAAS,eAAe,+BAA+B;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,UAAU,iCAAY;AACtB,UAAU,iCAAY;AACtB;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,oCAAoC,SAAS,eAAe,8BAA8B;AAC1F;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,oCAAoC,wDAA2B;AAC/D;AACA;AACA,YAAY;AACZ,gBAAgB,YAAY;AAC5B;AACA;AACA,aAAa;AACb;AACA,UAAU;AACV,UAAU,iCAAY;AACtB,UAAU,iCAAY;AACtB;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,2BAAY;AAC9C;AACA,UAAU,iCAAY;AACtB;AACA;AACA,YAAY,2CAAmB,8CAA8C,YAAY;AACzF;AACA;AACA,kBAAkB,4CAAuB;AACzC;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,cAAc,iCAAY;AAC1B;AACA;AACA;AACA;AACA;AACA,cAAc,iCAAY;AAC1B,cAAc,iCAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,4BAA4B,yDAA2B;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAU,mEAA8B;;AAExC;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,iEAA6B;AACnD;;AAEA;AACA;AACA,sBAAsB,yDAAyB;AAC/C,sBAAsB,yDAAyB;AAC/C,sBAAsB,yDAAyB;AAC/C;;AAEA;AACA;AACA,sBAAsB,iDAAqB;AAC3C;;AAEA;AACA;AACA,sBAAsB,qEAA+B;AACrD;;AAEA;AACA;AACA,sBAAsB,qEAA+B;AACrD;;AAEA;AACA;AACA;AACA;;AAEA,oBAAoB,6DAA2B;AAC/C,oBAAoB,+DAA4B;AAChD;;AAEA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA,4CAA4C,2EAAgC;AAC5E;;AAEA;AACA;AACA;AACA;;AAEA;AACA,MAAM,iCAAY,gDAAgD,QAAQ,KAAK,qDAAqD;AACpI;AACA;AACA;AACA,MAAM,iCAAY,oDAAoD,QAAQ,KAAK,wDAAwD;AAC3I;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,kBAAkB,qEAAmC;AACrD,uBAAuB,2DAA8B;;AAErD;AACA;AACA;AACA;AACA,+EAA+E,uBAAuB;AACtG;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sEAAmC;;AAEnE;AACA;;AAEA;AACA;AACA,IAAI,iCAAY,mBAAmB,aAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iCAAY,eAAe,MAAM,MAAM,WAAW,KAAK,mBAAmB;AAClF,6DAA6D,KAAK;AAClE;AACA,KAAK;AACL;AACA;AACA,MAAM,iCAAY,aAAa,WAAW;AAC1C;AACA;AACA,QAAQ,iCAAY,wBAAwB,UAAU;AACtD;AACA;AACA;AACA;AACA,QAAQ,iCAAY,4BAA4B,UAAU;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B,8DAA4B;AACvD;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY;;AAEZ,QAAQ,iCAAY,aAAa,WAAW;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iCAAY,2BAA2B,UAAU;AAC7D;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA,MAAM,iCAAY;AAClB;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM,iCAAY;AAClB,YAAY,kBAAkB;AAC9B;;AAEA,IAAI,iCAAY;AAChB;AACA;;AAEA,IAAI,iCAAY;AAChB;;AAEA;AACA;;AAEA,IAAI,iCAAY;AAChB;AACA;;AAEA;AACA;AACA;AACA,MAAM,iCAAY;AAClB;AACA;AACA;AACA,uBAAuB,+BAAW,sCAAsC,UAAU;AAClF;AACA,SAAS;AACT;AACA;AACA;AACA,IAAI,iCAAY;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,MAAM,+BAAW;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,+BAAW;AACjB,4CAA4C,oEAAkC,oBAAoB,qBAAqB;AACvH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,+BAAW;AACjB,iCAAiC,8BAAe;AAChD,mCAAmC,8BAAe;AAClD,+BAA+B,8BAAe;;AAE9C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM,+BAAW;AACjB,2CAA2C,oEAAkC;AAC7E,6CAA6C,oEAAkC;AAC/E,yCAAyC,oEAAkC;AAC3E,yCAAyC,oEAAkC;AAC3E,4CAA4C,oEAAkC;AAC9E,wCAAwC,oEAAkC;AAC1E,0CAA0C,oEAAkC;AAC5E,+CAA+C,oEAAkC;;AAEjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM,iCAAY;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM,+BAAW;AACjB;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB;AACA;;AAEA;AACA;AACA,MAAM,+BAAW;AACjB;AACA;;AAEA,IAAI,iCAAY;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ,iCAAY,0BAA0B,WAAW;AACzD;AACA;AACA;AACA,mEAAmE,iBAAiB;AACpF;;AAEA;AACA,IAAI,iCAAY;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI,iCAAY;AAChB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA,0DAA0D,mDAAmD;AAC7G;AACA,iCAAiC,cAAc;AAC/C;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,8BAA8B;AACzD,KAAK;AACL,mEAAmE,iBAAiB;AACpF,kDAAkD,+BAA+B;AACjF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2DAA2D,oEAA+B;AAC1F;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,iCAAY;AAClB;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB;AACnB,SAAS;AACT;AACA;;AAEA;AACA;AACA,kCAAkC,UAAU,aAAa;AACzD;;AAEA;AACA,YAAY,kBAAkB;;AAE9B;AACA;;AAEA;AACA,cAAc,kGAAmD;AACjE;AACA,YAAY,aAAa;;AAEzB,MAAM;AACN,MAAM,iCAAY,kCAAkC,6DAA6D;AACjH,MAAM,iCAAY;AAClB;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,2BAAY;AACzC;;AAEA,IAAI,iCAAY;AAChB;AACA,MAAM,2CAAmB,yCAAyC,YAAY;AAC9E;AACA;AACA;AACA;AACA,oCAAoC,wCAAe;AACnD;AACA;AACA,MAAM,+BAAW;AACjB;AACA,MAAM;AACN,MAAM,iCAAY,mCAAmC,oDAAoD;AACzG;AACA;AACA,IAAI;AACJ;AACA;AACA,QAAQ,iCAAY;AACpB;AACA;AACA,QAAQ,iCAAY;AACpB;AACA;AACA,QAAQ,iCAAY;AACpB,QAAQ,iCAAY;AACpB;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,YAAY;AACnE,SAAS;AACT,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA;AACA;;;;ACn7CkC;AACY;AACA;AACI;AACZ;AACI;AACmB;AACT;;AAErC;;AAEf;AACA;AACA;;AAEA;AACA,MAAM,+CAA+C;AACrD,MAAM,qCAAqC;AAC3C,MAAM,uCAAuC;AAC7C,MAAM,sCAAsC;AAC5C,MAAM,qCAAqC;AAC3C;;AAEA;AACA,yBAAyB,6BAAS;AAClC,oBAAoB,wDAA2B;AAC/C,uBAAuB,yCAAiB;AACxC,wCAAwC,+CAAkB;;AAE1D;AACA;AACA;AACA;;AAEA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA,YAAY,2BAA2B,iBAAiB,aAAa;AACrE;AACA;AACA;AACA,YAAY,2CAAmB;AAC/B;AACA;AACA,SAAS;AACT;AACA,UAAU,2BAA2B,cAAc,kBAAkB;AACrE,UAAU,+BAAW,cAAc,kBAAkB;AACrD;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;AACA;AACA,IAAI,iCAAY;AAChB,IAAI,2BAA2B;AAC/B,IAAI,2BAA2B;AAC/B;AACA;;AAEA;AACA,4BAA4B,uEAAkC;AAC9D;AACA;;AAEA,IAAI,iCAAY,IAAI,sBAAsB;AAC1C,IAAI,iCAAY;AAChB;AACA,IAAI,iCAAY,uBAAuB,WAAW,KAAK,2BAA2B;AAClF;AACA,IAAI,iCAAY,IAAI,2BAA2B;AAC/C;AACA;AACA;;;ACrFkC;AACwB;AACN;AACI;AACN;AACa;AACzB;AACiB;AACQ;AACb;AACd;;AAErB;;AAEf,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,aAAa;AAC1C;;AAEA;AACA,MAAM,kEAAkE;AACxE,MAAM,0EAA0E;AAChF,MAAM,yEAAyE;AAC/E,MAAM,sEAAsE;AAC5E,MAAM,oEAAoE;AAC1E,MAAM,sEAAsE;AAC5E,MAAM,oEAAoE;AAC1E;;AAEA;AACA;AACA,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mEAAmE;AACzF;AACA;;AAEA;AACA,IAAI,iCAAY,2BAA2B,GAAG;AAC9C;AACA,wBAAwB,mEAAkC;AAC1D,iCAAiC,0CAA0C;;AAE3E;;AAEA;AACA;AACA,IAAI,iCAAY;AAChB;AACA;AACA;AACA;AACA,8BAA8B,wFAAwF;AACtH,QAAQ;AACR,iCAAiC,uCAAuC;AACxE;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,yEAAyE;AAC5G,UAAU;AACV,sCAAsC,2CAA2C;AACjF;AACA,OAAO;;AAEP,uBAAuB,oCAAoC;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,IAAI,iCAAY;;AAEhB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C,+CAAkB;;AAE/D;AACA,MAAM,iCAAY;AAClB,iCAAiC,gCAAiB,GAAG,wCAAwC;AAC7F;AACA,MAAM,iCAAY;AAClB;;AAEA,wBAAwB,mEAAkC;AAC1D,iCAAiC,0CAA0C;AAC3E,2BAA2B,qEAAmC;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,eAAe,GAAG,kBAAkB,EAAE,EAAE,oBAAoB;AAClG;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,yCAAyC,+CAAsB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI,iCAAY;AAChB,UAAU,8CAAkB;AAC5B;AACA;AACA;AACA;AACA,QAAQ,+BAAW;AACnB,+BAA+B,YAAY,cAAc,aAAa,OAAO,2BAA2B,UAAU,SAAS;AAC3H;AACA;AACA;AACA;AACA,WAAW;AACX,UAAU;AACV,UAAU,iCAAY;AACtB,UAAU,+BAAW,2BAA2B,YAAY,UAAU,UAAU;AAChF,UAAU,iCAAY;AACtB,+EAA+E,SAAS,KAAK,WAAW,0BAA0B,GAAG,EAAE;AACvI;AACA;AACA;AACA,2EAA2E,mBAAmB;AAC9F,KAAK;;AAEL;AACA;AACA,KAAK;AACL;;AAEA;AACA,+CAA+C,+CAAkB;AACjE;AACA,YAAY,8CAAkB;AAC9B,cAAc,mBAAmB;AACjC,OAAO;AACP;AACA;;AAEA;AACA,IAAI,iCAAY;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA,4CAA4C,+CAAkB;AAC9D;AACA,kCAAkC,+CAAsB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oBAAoB;AACnD;AACA,8CAA8C,uBAAuB;AACrE;AACA;AACA;AACA;AACA,uCAAuC,qBAAqB,GAAG,iBAAiB;AAChF,SAAS;AACT;AACA;AACA;AACA,kEAAkE,gCAAgC,IAAI,+BAA+B;AACrI;AACA;AACA,kDAAkD,2BAA2B;AAC7E;AACA;AACA,8CAA8C,uBAAuB;AACrE;;AAEA;AACA;AACA;AACA;AACA,QAAQ,+BAAW,sBAAsB,aAAa;AACtD;AACA;AACA,UAAU;AACV,UAAU,iCAAY;AACtB,UAAU,+BAAW,6BAA6B,aAAa;AAC/D;AACA,QAAQ;AACR,QAAQ,+BAAW,qBAAqB,aAAa;AACrD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;;AAGA;AACA,kCAAkC,+CAAsB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,8CAA8C,+CAAkB;AAChE,+CAA+C,+CAAkB;;AAEjE;;AAEA;AACA;;AAEA;AACA,MAAM,iCAAY,kCAAkC,oBAAoB;AACxE;AACA,MAAM;AACN;AACA;AACA;AACA,QAAQ,iCAAY,0BAA0B,gBAAgB,mBAAmB,oBAAoB,OAAO,uBAAuB;AACnI,QAAQ;AACR,QAAQ,+BAAW,yBAAyB,aAAa;AACzD,gDAAgD,aAAa;AAC7D;AACA;AACA;;AAEA;AACA;AACA;AACA,yDAAyD,+CAAkB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,+BAAW,qBAAqB,gBAAgB,MAAM,oBAAoB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,QAAQ,+BAAW,qBAAqB,sBAAsB,GAAG,kBAAkB,QAAQ,oBAAoB;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,+BAAW,mBAAmB,eAAe;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,+BAAW,wBAAwB,eAAe;AAC5D;AACA,kEAAkE,iBAAiB;AACnF;AACA,UAAU;AACV,UAAU,+BAAW,4BAA4B,gBAAgB;AACjE;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,QAAQ,+BAAW,oBAAoB,eAAe;AACtD;AACA;AACA;AACA,UAAU;AACV,UAAU,iCAAY;AACtB,UAAU,+BAAW,2BAA2B,eAAe;AAC/D;AACA;;AAEA;AACA;AACA;;AAEA,MAAM,iCAAY;AAClB;AACA,yDAAyD,cAAc;;AAEvE;;AAEA;AACA;AACA,IAAI,iCAAY;;AAEhB;;AAEA;AACA;;AAEA;AACA,2CAA2C,+CAAkB;AAC7D,2BAA2B,+CAAkB;;AAE7C;AACA,IAAI,iCAAY,kCAAkC,oBAAoB;;AAEtE;AACA,uDAAuD,+CAAkB;;AAEzE;AACA;AACA;AACA;AACA,wCAAwC,oCAAoC;AAC5E;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ,0EAAqC;AAC7C,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sEAAmC;AAC3C,OAAO;;AAEP;AACA;AACA;AACA;AACA,QAAQ,sHAA2D;AACnE,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAkB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAkB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,aAAa,IAAI,eAAe;AAC3E,8DAA8D,wBAAwB;AACtF,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,+EAA+E,eAAe;AAC9F,wEAAwE,aAAa;AACrF;AACA;AACA;AACA,SAAS,IAAI,6EAA6E;AAC1F;AACA;AACA;AACA;AACA,SAAS,cAAc,uEAAuE;AAC9F;;AAEA,4GAA4G,eAAe;AAC3H;AACA,+GAA+G,kBAAkB;AACjI;AACA;AACA,uDAAuD,kBAAkB,4BAA4B,eAAe,EAAE,qBAAqB;AAC3I;AACA;AACA,qDAAqD,gBAAgB,0BAA0B,aAAa,EAAE,mBAAmB;AACjI;AACA,uIAAuI,2BAA2B,IAAI,0BAA0B;AAChM;AACA,+GAA+G,kBAAkB;AACjI;;AAEA;AACA,6LAA6L,kBAAkB;AAC/M;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ,+BAAW,UAAU,UAAU;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+FAA+F,oBAAoB;AACnH,uDAAuD,cAAc,wBAAwB,oBAAoB;AACjH,KAAK;AACL;;AAEA;AACA;AACA,iBAAiB,0DAA4B;AAC7C,kBAAkB,wEAAmC;AACrD,qCAAqC,uEAAkC;AACvE;;AAEA,8BAA8B,oFAA0C;AACxE,4BAA4B,oEAAkC;;AAE9D;;AAEA;AACA;AACA;AACA,qCAAqC,+CAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,+CAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,+CAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,+CAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,+CAAkB;AACvD;AACA;AACA,OAAO;AACP;AACA;AACA,qCAAqC,+CAAkB;AACvD;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA,8CAA8C,kBAAkB;AAChE;AACA,mBAAmB,WAAW,EAAE,WAAW;AAC3C;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,+CAAkB;AAC7D,6CAA6C,+CAAkB;AAC/D;;AAEA;AACA,IAAI,iCAAY;;AAEhB;AACA;AACA;;;;;;;;;;;;;;;;ACn1BkC;AACmB;;AAEtC;;AAEf;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,wEAAwE,UAAU;AAClF,MAAM;AACN,mEAAmE,UAAU;AAC7E,MAAM;AACN,6DAA6D,UAAU;AACvE;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6EAA6E,qEAAmC,aAAa;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,iCAAY,IAAI,YAAY,SAAS,aAAa,SAAS,eAAe,KAAK,YAAY,EAAE,UAAU;AACjH;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,iCAAY,+BAA+B,YAAY,GAAG,UAAU;AAC1E;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACpFA;AACgD;AACc;AACZ;AACF;AACQ;AAC4C;AACxC;AACN;AACoC;AAC9B;AAC8C;AAC3D;AAC/C,YAAY,cAAc;AAC0B;AACL;AACN;AACqB;AACL;AACN;AACM;AACZ;AACc;AACJ;AACd;AACsB;AACM;AACQ;AACxC;AACI;AACR;AACc;AACA;AACY;AACJ;AACN;AACd;AACQ;AAC4B;AACtB;AAC2B;AACA;AACnB;AACgB;;AAEzE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,qEAAmC;AAC7D;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,EAAE,iCAAY,8BAA8B,SAAS;AACrD;AACA,IAAI,+BAAW,mBAAmB,SAAS,yBAAyB,QAAQ;AAC5E;AACA;AACA;;AAEA;AACA,EAAE,+BAAW,sCAAsC,QAAQ;AAC3D;;AAEA;AACA;AACA;AACA;AACA,MAAM,+BAAW,aAAa,YAAY;AAC1C,YAAY,eAAe;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,+BAAW,aAAa,YAAY;AAC1C,YAAY,kBAAkB;AAC9B;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,0BAA0B,qEAAmC;AAC7D,yBAAyB,mEAAkC;AAC3D,0BAA0B,qEAAmC;AAC7D,gCAAgC,iFAAyC;AACzE,KAAK;AACL;AACA,oBAAoB,sDAA0B;AAC9C,sBAAsB,0DAA4B;AAClD,sBAAsB,0DAA4B;AAClD,6BAA6B,wEAAmC;AAChE,sBAAsB,0DAA4B;AAClD,wBAAwB,8DAA8B;AACtD,0BAA0B,kEAAgC;AAC1D,KAAK;AACL;AACA,yBAAyB;AACzB,sBAAsB;AACtB,kBAAkB;AAClB,yBAAyB;AACzB,kBAAkB;AAClB,yBAAyB;AACzB,0BAA0B;AAC1B,oBAAoB;AACpB,qBAAqB;AACrB,uBAAuB;AACvB,mBAAmB;AACnB,eAAe;AACf,qBAAqB;AACrB,eAAe;AACf,gBAAgB;AAChB,uBAAuB;AACvB,cAAc;AACd,uBAAuB;AACvB,kBAAkB;AAClB,qBAAqB;AACrB,gBAAgB;AAChB,qBAAqB;AACrB,iBAAiB;AACjB,iBAAiB;AACjB,KAAK;AACL;AACA,uBAAuB,oEAAkC;AACzD,yBAAyB,oFAA0C;AACnE,KAAK;;AAEL;AACA,eAAe;AACf,gBAAgB,6CAAmB;AACnC;;AAEA,2BAA2B;AAC3B,2BAA2B;;AAE3B,mBAAmB;AACnB,uBAAuB;AACvB,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,gBAAgB,2BAAa;AAC7B,gBAAgB,+BAAe;AAC/B,aAAa,qBAAQ;AACrB,aAAa,uBAAU;AACvB,cAAc,yBAAW;AACzB,KAAK;;AAEL;AACA,0BAA0B,8BAAgB;AAC1C,0BAA0B,4BAAc;AACxC,KAAK;;AAEL,uBAAuB;;AAEvB,iBAAiB,yCAAiB;AAClC,cAAc,yCAAiB;AAC/B,kBAAkB,iDAAqB;;AAEvC,mBAAmB;AACnB,eAAe;AACf,8BAA8B;;AAE9B,2BAA2B,oEAA+B;AAC1D,kBAAkB,8BAAe;AACjC,gBAAgB;AAChB;AACA,eAAe,8BAAe;AAC9B,yBAAyB;AACzB,uCAAuC,kGAAmD;AAC1F,sCAAsC,4FAA8C;AACpF,+BAA+B,8EAAuC;AACtE;AACA,gCAAgC,gFAAwC;AACxE,qCAAqC,0FAA6C;AAClF,sBAAsB,4DAA8B;AACpD,iBAAiB,kDAAyB;AAC1C,0BAA0B,oEAAkC;AAC5D,qCAAqC,0FAA6C;AAClF,qCAAqC,0FAA6C;AAClF,kBAAkB,oDAA0B;AAC5C,mBAAmB,sDAA2B;AAC9C,sBAAsB,4DAA8B;AACpD,yBAAyB,kEAAiC;AAC1D,4BAA4B,wEAAoC;AAChE,4BAA4B,wEAAoC;AAChE,6BAA6B,0EAAqC;AAClE,4BAA4B,wEAAoC;AAChE,YAAY,wCAAoB;AAChC,KAAK;AACL,qBAAqB,wDAAyB;AAC9C;AACA;AACA,mBAAmB,gDAAqB;AACxC,oBAAoB,wDAAyB;AAC7C,wBAAwB,0DAA0B;AAClD,qBAAqB,oDAAuB;AAC5C,cAAc,sCAAgB;AAC9B,gBAAgB,0CAAkB;AAClC,0BAA0B,6CAAsB;AAChD,KAAK;AACL;AACA,sBAAsB,kFAA2C;AACjE,uBAAuB,oFAA4C;AACnE,mBAAmB,kGAAmD;AACtE,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,KAAK;AACL,cAAc;AACd;;AAEA;AACA,mBAAmB,+CAAkB;AACrC,mBAAmB,+CAAkB,eAAe,yBAAU;AAC9D;;;;ACxPO;AACP;AACA;AACA;AACA;AACA;AACA,gDAAgD,iBAAiB;AACjE,KAAK;AACL,GAAG;AACH;;;ACVsC;;;AAG/B;;AAEP;AACA;AACA,8BAA8B,uDAAsB;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,KAAK,WAAW,aAAa,IAAI,gCAAgC;AAC5G,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AChD0E;AACjC;;AAEzC,6BAAe,SAAS,oBAAG;AAC3B,+CAA+C,+CAAkB,EAAE,oBAAoB;AACvF;AACA,GAAG;;AAEH;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA,MAAM;;AAEN;;;AClB4D;AACR;AACF;AACT;AACsE;AAC7E;AACI;AACQ;;AAE9C;AACA;AACA,EAAE,8DAA2B;AAC7B,CAAC;;AAEc;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,+CAAkB;AAC1D,wBAAwB,6DAA4B;AACpD,mBAAmB,6BAAS;AAC5B;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB,mBAAmB,6BAAS;AAC5B;AACA,+BAA+B,8BAAW;AAC1C,0CAA0C,+CAAkB;AAC5D,gBAAgB,wDAA2B;AAC3C;AACA,uBAAuB,uDAA0B;AACjD,iBAAiB,0DAA4B;AAC7C,0CAA0C,+CAAkB;AAC5D,2CAA2C,kEAAgC;AAC3E;AACA,wEAAwE,uEAAkC;;AAE1G;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,wDAA2B;AACjC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,8BAA8B,6DAA6B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+BAAW;AACnB,QAAQ;AACR;AACA;AACA,8CAA8C,YAAY,IAAI,eAAe,GAAG,oBAAoB,MAAM,YAAY;AACtH,WAAW;AACX;;AAEA;AACA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA,iCAAiC,8BAAW;AAC5C;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;;AAGL;;AAEA;AACA;AACA,+BAA+B,8BAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,6BAAS;AACnB,4BAA4B,+CAAkB;AAC9C,wDAAwD,+CAAkB;AAC1E;AACA,MAAM,qCAAiB;AACvB,MAAM;AACN,MAAM,wCAAoB;AAC1B;AACA;;AAEA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wDAA2B;;AAElD;AACA,YAAY,wDAA2B;AACvC,YAAY,0DAA4B;AACxC;;AAEA,4BAA4B,+CAAkB;AAC9C;;AAEA,0CAA0C,+CAAkB;;AAE5D;AACA;AACA;AACA;AACA,MAAM;AACN,wBAAwB,+CAAkB;AAC1C,UAAU,yBAAU;AACpB;AACA;AACA;;;ACxL0C;AACR;;AAE3B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,MAAM,iCAAY,aAAa,SAAS,kBAAkB,cAAc;AACxE;AACA,QAAQ,iCAAY;AACpB;AACA,oCAAoC,cAAc,GAAG,QAAQ;AAC7D;AACA,UAAU,+BAAW,oCAAoC,SAAS;AAClE;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA,MAAM,iCAAY,eAAe,UAAU;AAC3C;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;AACA,gBAAgB,uEAAiC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,uFAAuF,eAAe,GAAG,WAAW;;AAEpH,IAAI,iCAAY;AAChB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iCAAY,6BAA6B,iBAAiB,IAAI,WAAW,KAAK,QAAQ;;AAE9F;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;;;AClHoE;AAC/B;AACS;AACsB;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,MAAM,UAAU,OAAO;AACxE;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,qFAAqF,WAAW;AAChG;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU,iBAAiB,aAAa;AACxC,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,4BAA4B,wBAAwB;;AAEpD;AACA,oCAAoC,mBAAmB,CAAC,kCAAkC;AAC1F;AACA,QAAQ;AACR,YAAY,QAAQ;AACpB;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,qFAAqF,WAAW;AAChG;;AAEA;AACA;AACA;AACA,UAAU,iBAAiB,aAAa;AACxC,MAAM;AACN,MAAM,iCAAY,oBAAoB,IAAI;AAC1C;AACA;AACA,GAAG;;AAEH;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV,QAAQ;AACR;AACA;;AAEA,6BAAe,SAAS,iBAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wFAAwF,WAAW;AACnG;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;;AAGH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;;;;ACxNsC;AACI;;;AAGnC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB,iCAAiC,+CAAkB,CAAC;AACpD;;AAEA;AACA,oBAAoB;AACpB,2BAA2B,yCAAiB;AAC5C,2BAA2B,iDAAmB;AAC9C,2CAA2C,+CAAkB;;AAE7D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC;AACzC;;AAEA;AACA;;AAEA,4BAA4B,+CAAkB;AAC9C,4BAA4B,+CAAkB;AAC9C;AACA;;;ACxCoD;AAClB;AACI;;AAEvB;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC,+CAAkB;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;;AAEP;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB,iBAAiB,0DAA4B;AAC7C,kBAAkB,wEAAmC;AACrD;;AAEA,uCAAuC,uHAAsD;AAC7F;AACA;AACA;AACA,kDAAkD,+CAAkB;AACpE,6CAA6C,+CAAkB,CAAC,yBAAyB,IAAI;AAC7F;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,gDAAgD,+CAAkB;AAClE,2CAA2C,+CAAkB,CAAC;AAC9D;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sCAAsC,+CAAkB;AACxD;AACA,8BAA8B,+CAAkB;AAChD;AACA,mCAAmC,+CAAkB;;AAErD;AACA,MAAM,+BAAW;AACjB;AACA;AACA;AACA;;;AClFsC;;AAEvB;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B,IAAI,oBAAoB;AACvE;AACA;AACA;AACA,OAAO,IAAI;;AAEX;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,qCAAqC,+CAAkB;AACvD;AACA;AACA,OAAO;AACP;;AAEA,wBAAwB,2DAAwB;AAChD;AACA;AACA,iCAAiC,+CAAkB;AACnD,wFAAwF,+CAAkB;AAC1G;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC;AACzC;AACA;AACA,wBAAwB,+CAAkB;AAC1C;AACA;AACA;;;AClF4D;AAC1B;AACI;AACQ;;AAE/B;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oBAAoB;AACpB,qCAAqC,+CAAkB;AACvD,8CAA8C,+CAAkB;AAChE;;AAEA,8CAA8C,iGAA2C;AACzF;AACA;AACA,iCAAiC,+CAAkB;AACnD;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC;AACzC;;AAEA;AACA;;AAEA,0DAA0D,+CAAkB;AAC5E;AACA,8BAA8B,+CAAkB;AAChD;;AAEA;;AAEA,kCAAkC,iGAA2C;AAC7E;AACA,8BAA8B,+CAAkB;AAChD;AACA;AACA;AACA,eAAe,6DAA4B;AAC3C,uBAAuB,4DAA0B,CAAC,kDAAqB;AACvE,OAAO;AACP;;AAEA;AACA;AACA;AACA,MAAM,iCAAY;AAClB;AACA,OAAO;AACP;AACA,MAAM;AACN;AACA;AACA,MAAM,iCAAY;AAClB;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE,8DAA2B;AAC7B,CAAC;;;ACxG4C;AACe;AACG;AACS;AAC1B;AACoB;AACJ;AACrB;AACQ;;AAEjD;AACA;AACA;AACA,cAAc,yBAAU;AACxB,eAAe;AACf;AACA,aAAa;AACb,UAAU;AACV,YAAY;AACZ,YAAY;AACZ,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,iBAAiB;AACjB,KAAK;AACL,GAAG;AACH,WAAW;AACX,YAAY;AACZ;AACA;AACA,eAAe;AACf,mBAAmB;AACnB,aAAa;AACb,GAAG;AACH;AACA;AACA,cAAc;AACd;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;AACA,4CAA4C,qEAA6B;AACzE,4BAA4B,+CAAkB;AAC9C;AACA,4CAA4C,qEAA6B;AACzE,4BAA4B,+CAAkB;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+CAAkB,CAAC;AACtD,4BAA4B,+CAAkB,CAAC,qBAAqB;AACpE,WAAW,+CAAkB,CAAC;AAC9B,QAAQ;AACR;AACA;AACA;AACA,uCAAuC,+CAAkB,CAAC;AAC1D;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,uCAAuC,+CAAkB,CAAC;AAC1D,SAAS;AACT,OAAO;AACP;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,+CAA+C,+CAAkB;AACjE,IAAI,4DAA0B,CAAC,kDAAqB;;AAEpD,2CAA2C,+CAAkB;AAC7D,gBAAgB,mDAAuB;AACvC,8BAA8B,+CAAkB;AAChD;AACA,IAAI,4DAA0B,CAAC,kDAAqB;;;AAGpD,2CAA2C,+CAAkB;AAC7D,IAAI,4DAA0B,CAAC,kDAAqB;;AAEpD,+CAA+C,+CAAkB;AACjE,IAAI,4DAA0B,CAAC,kDAAqB;;AAEpD,0CAA0C,+CAAkB;AAC5D,IAAI,4DAA0B,CAAC,kDAAqB;AACpD;AACA;;AAEA,6BAAe,eAAe,uBAAG;;AAEjC,6BAA6B,+CAAkB;AAC/C,aAAa,+CAAkB,CAAC;AAChC,cAAc,+CAAkB,CAAC;AACjC,aAAa,+CAAkB,CAAC;AAChC;AACA,UAAU,QAAQ;AAClB;AACA,GAAG;;AAEH,6BAA6B,+CAAkB;AAC/C,aAAa,+CAAkB,CAAC;AAChC,cAAc,+CAAkB,CAAC;AACjC,aAAa,+CAAkB,CAAC;AAChC;AACA,UAAU,kBAAkB;AAC5B;AACA,GAAG;;AAEH,6BAA6B,+CAAkB;AAC/C,aAAa,+CAAkB,CAAC;AAChC,cAAc,+CAAkB,CAAC;AACjC,aAAa,+CAAkB,CAAC;AAChC;AACA,UAAU,gBAAgB;AAC1B;AACA,GAAG;;AAEH,6BAA6B,+CAAkB;AAC/C,aAAa,+CAAkB,CAAC;AAChC,cAAc,+CAAkB,CAAC;AACjC,aAAa,+CAAkB,CAAC;AAChC;AACA,UAAU,qBAAqB;AAC/B;AACA,GAAG;;AAEH,4CAA4C,qEAA6B;AACzE,2BAA2B,+CAAkB;AAC7C;;AAEA;AACA;;AAEA,0CAA0C,+CAAkB;AAC5D,yBAAyB,+CAAkB;AAC3C,sBAAsB,+CAAkB;AACxC;;AAEA,wBAAwB,+CAAkB;AAC1C,sBAAsB,+CAAkB;AACxC;;AAEA;AACA,6BAA6B,+CAAkB;AAC/C,aAAa,+CAAkB,CAAC;AAChC,cAAc,+CAAkB,CAAC;AACjC,aAAa,+CAAkB,CAAC;AAChC;AACA;AACA;AACA,GAAG;;AAEH;AACA,6BAA6B,+CAAkB;AAC/C,aAAa,+CAAkB,CAAC;AAChC,cAAc,+CAAkB,CAAC;AACjC,aAAa,+CAAkB,CAAC;AAChC;AACA,UAAU,aAAa;AACvB;AACA,GAAG;;;AAGH,wBAAwB,+CAAkB;AAC1C;AACA;;AAEA;;;ACrM0D;;AAEnD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,qEAAmC;AACrD,uBAAuB,2DAA8B;AACrD;;AAEA;AACA;AACA,kBAAkB,WAAW,GAAG,UAAU;AAC1C;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,0BAA0B,SAAS;AACnC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AClH4D;AACQ;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,MAAM,mCAAmC,WAAW;AACjH;AACA;AACA,UAAU,iBAAiB,iBAAiB;AAC5C,MAAM;AACN,UAAU,aAAa,iBAAiB;AACxC;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEO;AACP;AACA;;;;ACxBuC;AACF;;AAErC;AACA;AACA;AACA,2DAA2D,cAAc,GAAG,YAAY;AACxF,wEAAwE,cAAc,GAAG,YAAY;AACrG;AACA;;AAEA;AACA;AACA;AACA,YAAY,sCAAsC;AAClD,aAAa;AACb,IAAI;AACJ,IAAI,iCAAY;AAChB;AACA;;AAEA;AACA;AACA;AACA,YAAY,+BAA+B;AAC3C,aAAa;AACb,IAAI;AACJ,IAAI,iCAAY;AAChB;AACA;;AAEA,mDAAe;AACf;AACA;AACA;AACA;AACA;AACA,oCAAoC,kDAAoB;;AAExD;AACA,gCAAgC,cAAc,sBAAsB,oBAAoB,wFAAwF,iBAAiB,MAAM,iBAAiB;AACxN;AACA;;AAEA;AACA;AACA;AACA,YAAY,2CAA2C;AACvD,YAAY,wCAAwC;;AAEpD,6BAA6B,kDAAoB;AACjD,6BAA6B,kDAAoB;AACjD,kCAAkC,kDAAoB;;AAEtD;;AAEA,IAAI,iCAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,oBAAoB,iCAAY,kBAAkB,cAAc;;AAEhE;AACA;AACA,eAAe,cAAc,0BAA0B,YAAY,kDAAkD,cAAc;AACnI;AACA;AACA;AACA,IAAI;AACJ,IAAI,+BAAW;AACf,yFAAyF,aAAa;AACtG;AACA,CAAC,EAAC;;;AC7EK;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,MAAM,uBAAuB;AAC7B,MAAM,yBAAyB;AAC/B,MAAM,uBAAuB;AAC7B,MAAM,sBAAsB;AAC5B,MAAM,wBAAwB;AAC9B,MAAM,uBAAuB;AAC7B,MAAM,yBAAyB;AAC/B,MAAM,oBAAoB;AAC1B,MAAM,wBAAwB;AAC9B,MAAM,2BAA2B;AACjC,MAAM,0BAA0B;AAChC,MAAM,6BAA6B;AACnC,MAAM,0BAA0B;AAChC,MAAM,4BAA4B;AAClC,MAAM,wBAAwB;AAC9B,MAAM,6BAA6B;AACnC,MAAM,2BAA2B;AACjC,MAAM,uBAAuB;AAC7B,MAAM,uBAAuB;AAC7B,MAAM,uBAAuB;AAC7B,MAAM,wBAAwB;AAC9B,MAAM,yBAAyB;AAC/B,MAAM,6BAA6B;AACnC,MAAM,2BAA2B;AACjC,MAAM,2BAA2B;AACjC,MAAM,uBAAuB;AAC7B,MAAM,wBAAwB;AAC9B,MAAM,0BAA0B;AAChC,MAAM,wBAAwB;AAC9B,MAAM,6BAA6B;AACnC,MAAM,sBAAsB;AAC5B,MAAM,2BAA2B;AACjC,MAAM,sBAAsB;AAC5B,MAAM,qBAAqB;AAC3B,MAAM,2BAA2B;AACjC,MAAM,uBAAuB;AAC7B,MAAM,0BAA0B;AAChC,MAAM,sBAAsB;AAC5B,MAAM,uBAAuB;AAC7B,MAAM,6BAA6B;AACnC,MAAM,wBAAwB;AAC9B,MAAM,4BAA4B;AAClC,MAAM,4BAA4B;AAClC,MAAM,4BAA4B;AAClC,MAAM,+BAA+B;AACrC,MAAM,uBAAuB;AAC7B,MAAM,2BAA2B;AACjC,MAAM,2BAA2B;AACjC,MAAM,yBAAyB;AAC/B,MAAM,wBAAwB;AAC9B,MAAM,6BAA6B;AACnC,MAAM,wBAAwB;AAC9B,MAAM,2BAA2B;AACjC,MAAM,0BAA0B;AAChC,MAAM,uBAAuB;AAC7B,MAAM,uBAAuB;AAC7B,MAAM,0BAA0B;AAChC,MAAM,yBAAyB;AAC/B,MAAM,uBAAuB;AAC7B,MAAM,0BAA0B;AAChC,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,4BAA4B;AAClC,MAAM,uBAAuB;AAC7B,MAAM,wBAAwB;AAC9B,MAAM,yBAAyB;AAC/B,MAAM,+BAA+B;AACrC,MAAM,0BAA0B;AAChC,MAAM,yBAAyB;AAC/B,MAAM,0BAA0B;AAChC,MAAM,2BAA2B;AACjC,MAAM,4BAA4B;AAClC,MAAM,uBAAuB;AAC7B,MAAM,wBAAwB;AAC9B,MAAM,0BAA0B;AAChC,MAAM,yBAAyB;AAC/B,MAAM,wBAAwB;AAC9B,MAAM,yBAAyB;AAC/B,MAAM,8BAA8B;AACpC,MAAM,wBAAwB;AAC9B,MAAM,yBAAyB;AAC/B,MAAM,wBAAwB;AAC9B,MAAM,yBAAyB;AAC/B,MAAM,wBAAwB;AAC9B,MAAM,6BAA6B;AACnC,MAAM,uBAAuB;AAC7B,MAAM,0BAA0B;AAChC,MAAM,6BAA6B;AACnC,MAAM,2BAA2B;AACjC,MAAM,sBAAsB;AAC5B,MAAM,yBAAyB;AAC/B,MAAM,0BAA0B;AAChC,MAAM,6BAA6B;AACnC,MAAM,sBAAsB;AAC5B,MAAM,0BAA0B;AAChC,MAAM,gCAAgC;AACtC,MAAM,2BAA2B;AACjC,MAAM,2BAA2B;AACjC,MAAM,yBAAyB;AAC/B,MAAM,iCAAiC;AACvC,MAAM,wBAAwB;AAC9B,MAAM,0BAA0B;AAChC,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,MAAM,+DAA+D;AACrE,MAAM,6DAA6D;AACnE;AACA;AACA,MAAM,sGAAsG;AAC5G,MAAM,yGAAyG;AAC/G,MAAM,oGAAoG;AAC1G,MAAM,0GAA0G;AAChH,MAAM,yGAAyG;AAC/G,MAAM,sGAAsG;AAC5G,MAAM,yGAAyG;AAC/G,MAAM,2GAA2G;AACjH,MAAM,sGAAsG;AAC5G,MAAM,0GAA0G;AAChH,MAAM,yGAAyG;AAC/G,MAAM,wGAAwG;AAC9G,MAAM,yGAAyG;AAC/G,MAAM,yGAAyG;AAC/G,MAAM,uGAAuG;AAC7G,MAAM,4GAA4G;AAClH,MAAM,wGAAwG;AAC9G,MAAM,wGAAwG;AAC9G,MAAM,yGAAyG;AAC/G,MAAM,wGAAwG;AAC9G,MAAM,2GAA2G;AACjH,MAAM,wGAAwG;AAC9G,MAAM,qGAAqG;AAC3G;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,wGAAwG;AAC9G,MAAM,sGAAsG;AAC5G,MAAM,4GAA4G;AAClH,MAAM,0GAA0G;AAChH,MAAM,iDAAiD;AACvD,MAAM,2CAA2C;AACjD;AACA;AACA,MAAM,qBAAqB;AAC3B,MAAM,sBAAsB;AAC5B,MAAM,uBAAuB;AAC7B,MAAM,sBAAsB;AAC5B,MAAM,0BAA0B;AAChC;AACA;AACA,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,uBAAuB;AAC7B,MAAM,wBAAwB;AAC9B;AACA;AACA,MAAM,4BAA4B;AAClC,MAAM,gDAAgD;AACtD,MAAM,4BAA4B;AAClC;AACA;AACA,MAAM,sBAAsB;AAC5B,MAAM,uBAAuB;AAC7B,MAAM,yBAAyB;AAC/B;AACA;AACA,MAAM,sBAAsB;AAC5B,MAAM,uBAAuB;AAC7B;AACA;AACA,MAAM,4BAA4B;AAClC,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,0BAA0B;AAChC,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,uBAAuB;AAC7B;AACA;AACA,MAAM,wBAAwB;AAC9B,MAAM,6BAA6B;AACnC,MAAM,uBAAuB;AAC7B;AACA;AACA,MAAM,qBAAqB;AAC3B,MAAM,wBAAwB;AAC9B,MAAM,0BAA0B;AAChC;AACA;AACA,MAAM,0BAA0B;AAChC,MAAM,6BAA6B;AACnC;AACA;AACA,MAAM,qBAAqB;AAC3B,MAAM,6BAA6B;AACnC;AACA;AACA,MAAM,yBAAyB;AAC/B,MAAM,wBAAwB;AAC9B;AACA;AACA,MAAM,yBAAyB;AAC/B,MAAM,+BAA+B;AACrC;AACA;AACA,MAAM,0BAA0B;AAChC,MAAM,sBAAsB;AAC5B,MAAM,sBAAsB;AAC5B,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAC/B,MAAM,oBAAoB;AAC1B,MAAM,uBAAuB;AAC7B,MAAM,yBAAyB;AAC/B,MAAM,sBAAsB;AAC5B,MAAM,uBAAuB;AAC7B,MAAM,8BAA8B;AACpC,MAAM,uBAAuB;AAC7B,MAAM,wBAAwB;AAC9B,MAAM,4BAA4B;AAClC,MAAM,sBAAsB;AAC5B,MAAM,uBAAuB;AAC7B,MAAM,uBAAuB;AAC7B,MAAM,yBAAyB;AAC/B,MAAM,uBAAuB;AAC7B,MAAM,yBAAyB;AAC/B,MAAM,uBAAuB;AAC7B,MAAM,qBAAqB;AAC3B,MAAM,2BAA2B;AACjC,MAAM,wBAAwB;AAC9B,MAAM,uBAAuB;AAC7B,MAAM,uBAAuB;AAC7B,MAAM,0BAA0B;AAChC,MAAM,4BAA4B;AAClC,MAAM,4BAA4B;AAClC,MAAM,0BAA0B;AAChC,MAAM,0BAA0B;AAChC,MAAM,yBAAyB;AAC/B,MAAM,uBAAuB;AAC7B,MAAM,4BAA4B;AAClC,MAAM,6BAA6B;AACnC,MAAM,4BAA4B;AAClC,MAAM,6BAA6B;AACnC,MAAM,4BAA4B;AAClC,MAAM,6BAA6B;AACnC,MAAM,6BAA6B;AACnC,MAAM,0BAA0B;AAChC,MAAM,yBAAyB;AAC/B,MAAM,wBAAwB;AAC9B,MAAM,0BAA0B;AAChC,MAAM,6BAA6B;AACnC,MAAM,8BAA8B;AACpC,MAAM,uBAAuB;AAC7B,MAAM,uBAAuB;AAC7B,MAAM,0BAA0B;AAChC,MAAM,0BAA0B;AAChC,MAAM,0BAA0B;AAChC,MAAM,0BAA0B;AAChC,MAAM,wBAAwB;AAC9B,MAAM,4BAA4B;AAClC,MAAM,2BAA2B;AACjC,MAAM,8BAA8B;AACpC,MAAM,6BAA6B;AACnC,MAAM,8BAA8B;AACpC,MAAM,4BAA4B;AAClC,MAAM,4BAA4B;AAClC,MAAM,2BAA2B;AACjC,MAAM,yBAAyB;AAC/B,MAAM,2BAA2B;AACjC,MAAM,4BAA4B;AAClC,MAAM,2BAA2B;AACjC,MAAM,yBAAyB;AAC/B,MAAM,sBAAsB;AAC5B,MAAM,uBAAuB;AAC7B,MAAM,wBAAwB;AAC9B,MAAM,yBAAyB;AAC/B,MAAM,6BAA6B;AACnC,MAAM,0BAA0B;AAChC,MAAM,qBAAqB;AAC3B,MAAM,wBAAwB;AAC9B,MAAM,0BAA0B;AAChC,MAAM,yBAAyB;AAC/B,MAAM,wBAAwB;AAC9B,MAAM,4BAA4B;AAClC,MAAM,yBAAyB;AAC/B,MAAM,qBAAqB;AAC3B,MAAM,0BAA0B;AAChC,MAAM,2BAA2B;AACjC,MAAM,0BAA0B;AAChC,MAAM,mCAAmC;AACzC,MAAM,uBAAuB;AAC7B,MAAM,sBAAsB;AAC5B,MAAM,8BAA8B;AACpC,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,sBAAsB;AAC5B,MAAM,sBAAsB;AAC5B,MAAM,sBAAsB;AAC5B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,MAAM,4FAA4F;AAClG,MAAM,mGAAmG;AACzG,MAAM,mGAAmG;AACzG,MAAM,wGAAwG;AAC9G,MAAM,+GAA+G;AACrH,MAAM,iGAAiG;AACvG,MAAM,oGAAoG;AAC1G,MAAM,mGAAmG;AACzG,MAAM,+EAA+E;AACrF,MAAM,+FAA+F;AACrG,MAAM,0FAA0F;AAChG,MAAM,qGAAqG;AAC3G,MAAM,mGAAmG;AACzG,MAAM,uFAAuF;AAC7F,MAAM,gGAAgG;AACtG,MAAM,yGAAyG;AAC/G,MAAM,gGAAgG;AACtG,MAAM,yGAAygDAAgD;AACtD,MAAM,kDAAkD;AACxD,MAAM,iDAAiD;AACvD,MAAM,iDAAiD;AACvD,MAAM,iDAAiD;AACvD,MAAM,iDAAiD;AACvD,MAAM,iDAAiD;AACvD,MAAM,kDAAkD;AACxD,MAAM,kDAAkD;AACxD,MAAM,mDAAmD;AACzD,MAAM,mDAAmD;AACzD,MAAM,mDAAmD;AACzD,MAAM,mDAAmD;AACzD,MAAM,oDAAoD;AAC1D,MAAM,oDAAoD;AAC1D,MAAM,oDAAoD;AAC1D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,qDAAqD;AAC3D,MAAM,sDAAsD;AAC5D,MAAM,sDAAsD;AAC5D,MAAM,sDAAsD;AAC5D,MAAM,sDAAshC,MAAM,4BAA4B;AAClC,MAAM,sBAAsB;AAC5B;AACA;AACA,MAAM,uBAAuB;AAC7B,MAAM,wBAAwB;AAC9B,MAAM,uBAAuB;AAC7B,MAAM,uBAAuB;AAC7B,MAAM,0BAA0B;AAChC,MAAM,qBAAqB;AAC3B,MAAM,yBAAyB;AAC/B,MAAM,sBAAsB;AAC5B,MAAM,0BAA0B;AAChC,MAAM,4BAA4B;AAClC,MAAM,uBAAuB;AAC7B;AACA;AACA,MAAM,4BAA4B;AAClC,MAAM,6BAA6B;AACnC,MAAM,4BAA4B;AAClC,MAAM,uBAAuB;AAC7B;AACA;AACA,MAAM,iCAAiC;AACvC,MAAM,sBAAsB;AAC5B,MAAM,yBAAyB;AAC/B,MAAM,sBAAsB;AAC5B,MAAM,uBAAuB;AAC7B,MAAM,uBAAuB;AAC7B,MAAM,qBAAqB;AAC3B,MAAM,oBAAoB;AAC1B,MAAM,uBAAuB;AAC7B,MAAM,uBAAuB;AAC7B,MAAM,sBAAsB;AAC5B,MAAM,gCAAgC;AACtC,MAAM,sBAAsB;AAC5B,MAAM,wBAAwB;AAC9B,MAAM,+BAA+B;AACrC,MAAM,gCAAgC;AACtC,MAAM,iCAAiC;AACvC,MAAM,0BAA0B;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sCAAsC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,oCAAoC;AAC9C,UAAU,mCAAmC;AAC7C;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,UAAU,oCAAoC;AAC9C,UAAU,mCAAmC;AAC7C;AACA,KAAK;AACL,MAAM,uEAAuE;AAC7E,MAAM,iEAAiE;AACvE,MAAM,wEAAwE;AAC9E,MAAM,6DAA6D;AACnE;AACA;AACA;AACA;AACA;AACA,UAAU,kCAAkC;AAC5C,UAAU,oCAAoC;AAC9C;AACA,KAAK;AACL,MAAM,kEAAkE;AACxE;AACA;AACA;AACA;AACA;AACA,UAAU,kCAAkC;AAC5C,UAAU,oCAAoC;AAC9C;AACA,KAAK;AACL,MAAM,8DAA8D;AACpE,MAAM,6DAA6D;AACnE,MAAM,sEAAsE;AAC5E,MAAM,mEAAmE;AACzE,MAAM,kEAAkE;AACxE,MAAM,iEAAiE;AACvE,MAAM,0DAA0D;AAChE,MAAM,iEAAiE;AACvE,MAAM,oEAAoE;AAC1E,MAAM,6DAA6D;AACnE,MAAM,mEAAmE;AACzE,MAAM,2DAA2D;AACjE,MAAM,8DAA8D;AACpE,MAAM,6DAA6D;AACnE,MAAM,yDAAyD;AAC/D,MAAM,0EAA0E;AAChF,MAAM,iEAAiE;AACvE,MAAM,4DAA4D;AAClE,MAAM,oDAAoD;AAC1D;AACA;AACA;AACA;AACA;AACA,UAAU,kCAAkC;AAC5C,UAAU,2CAA2C;AACrD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,UAAU,kCAAkC;AAC5C,UAAU,2CAA2C;AACrD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,UAAU,kCAAkC;AAC5C,UAAU,2CAA2C;AACrD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,UAAU,kCAAkC;AAC5C,UAAU,2CAA2C;AACrD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,UAAU,kCAAkC;AAC5C,UAAU,2CAA2C;AACrD;AACA,KAAK;AACL,MAAM,6DAA6D;AACnE,MAAM,gEAAgE;AACtE,MAAM,wEAAwE;AAC9E,MAAM,uEAAuE;AAC7E,MAAM,qEAAqE;AAC3E,MAAM,8EAA8E;AACpF,MAAM,8DAA8D;AACpE,MAAM,iEAAiE;AACvE,MAAM,gEAAgE;AACtE,MAAM,8DAA8D;AACpE,MAAM,uEAAuE;AAC7E,MAAM,mEAAmE;AACzE,MAAM,4DAA4D;AAClE,MAAM,+DAA+D;AACrE,MAAM,sEAAsE;AAC5E,MAAM,wEAAwE;AAC9E,MAAM,+DAA+D;AACrE;AACA;AACA,MAAM,gDAAgD;AACtD,MAAM,iDAAiD;AACvD,MAAM,kDAAkD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wHAAwH;AACxH,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,MAAM,qGAAqG;AAC3G,MAAM,wGAAwG;AAC9G,MAAM,2GAA2G;AACjH,MAAM,uGAAuG;AAC7G,MAAM,qGAAqG;AAC3G,MAAM,mGAAmG;AACzG,MAAM,sGAAsG;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAyC;AAC7D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,qGAAqG;AACrpH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,yGAAyG;AAC/G;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,+oBAA+oB;AAC/oB,KAAK;AACL;AACA;AACA;AACA;AACA,qIAAqI;AACrI,KAAK;AACL;AACA;AACA;AACA;AACA,+LAA+L;AAC/L,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,uyBAAuyB,qxBAAqxB;AAC5jiHAAiH;AACvH,MAAM,gHAAgH;AACtH,MAAM,4GAA4G;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,uGAAuG;AAC7G,MAAM,iHAAiH;AACvH,MAAM,gHAAgH;AACtH,MAAM,8GAA8G;AACpuGAAuG;AAC7G,MAAM,yGAAyG;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,qGAAqG;AAC3G,MAAM,2GAA2G;AACjcAAc,uFAAuF;AACjH,YAAY,cAAc,qEAAqE;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,YAAY,cAAc,iFAAiF;AAC3G,YAAY,cAAc,2EAA2E;AACrG,YAAY,cAAc,8DAA8D;AACxF;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,MAAM,2FAA2F;AACjG,MAAM,qFAAqF;AAC3F,MAAM,sFAAsF;AAC5F,MAAM,uFAAuF;AAC7F,MAAM,oFAAoF;AAC1F,MAAM,iFAAiF;AACvF,MAAM,6EAA6E;AACnF,MAAM,oFAAoF;AAC1F,MAAM,6EAA6E;AACnF,MAAM,sFAAsF;AAC5F,MAAM,8EAA8E;AACpF,MAAM,qFAAqF;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,4FAA4F;AAClG,MAAM,sFAAsF;AAC5F,MAAM,uFAAuF;AAC7F,MAAM,wFAAwF;AAC9F,MAAM,qFAAqF;AAC3F,MAAM,kFAAkF;AACxF,MAAM,8EAA8E;AACpF,MAAM,qFAAqF;AAC3F,MAAM,8EAA8E;AACpF,MAAM,sFAAsF;AAC5F,MAAM,8EAA8E;AACpF,MAAM,qFAAqF;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,4FAA4F;AAClG,MAAM,sFAAsF;AAC5F,MAAM,uFAAuF;AAC7F,MAAM,wFAAwF;AAC9F,MAAM,qFAAqF;AAC3F,MAAM,kFAAkF;AACxF,MAAM,8EAA8E;AACpF,MAAM,qFAAqF;AAC3F,MAAM,8EAA8E;AACpF,MAAM,sFAAsF;AAC5F,MAAM,8EAA8E;AACpF,MAAM,qFAAqF;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,gFAAgF;AACtF,MAAM,gFAAgF;AACtF,MAAM,gFAAgF;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,mGAAmG;AACzG,MAAM,iHAAiH;AACvH,MAAM,4EAA4E;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,2GAA2G;AACjwBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAC9B,MAAM,yBAAyB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,2EAA2E;AACjF,MAAM,0FAA0F;AAChG,MAAM,oGAAoG;AAC1G,MAAM,oGAAoG;AAC1G,MAAM,0GAA0G;AAChH,MAAM,wGAAwG;AAC9G,MAAM,4GAA4G;AAClH,MAAM,gHAAgH;AACtH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,4GAA4G;AAClH,MAAM,0GAA0G;AAChH,MAAM,4GAA4G;AAClH,MAAM,4GAA4G;AAClH,MAAM,4GAA4G;AAClH,MAAM,kGAAkG;AACxG,MAAM,0GAA0G;AAChH,MAAM,gHAAgH;AACtmCAAmC;AACnoBAAoB;AAC1B,MAAM,oBAAoB;AAC1B,MAAM,oBAAoB;AAC1B,MAAM,oBAAoB;AAC1B,MAAM,oBAAoB;AAC1B,MAAM,oBAAoB;AAC1B,MAAM,oBAAoB;AAC1B,MAAM,oBAAoB;AAC1B,MAAM,oBAAoB;AAC1B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B,MAAM,qBAAqB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,4nJAA4nJ;AAC5nJ,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,MAAM,yDAAyD;AAC/D,MAAM,wDAAwD;AAC9D,MAAM,wDAAwD;AAC9D,MAAM,wDAAwD;AAC9D,MAAM,yDAAyD;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,MAAM,oDAAoD;AAC1D,MAAM,oDAAoD;AAC1D,MAAM,qDAAqD;AAC3D,MAAM,mDAAmD;AACzD,MAAM,iDAAiD;AACvD;AACA;AACA,MAAM,6DAA6D;AACnE,MAAM,8DAA8D;AACpE,MAAM,+DAA+D;AACrE,MAAM,8DAA8D;AACpE,MAAM,6DAA6D;AACnE,MAAM,mEAAmE;AACzE,MAAM,yEAAyE;AAC/E;AACA;AACA,MAAM,2BAA2B;AACjC,MAAM,0BAA0B;AAChC,MAAM,qBAAqB;AAC3B,MAAM,sBAAsB;AAC5B;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,sRAAsR,oGAAoG,sJAAsJ,mHAAmH;AACnoB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB;AACnB,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,6DAA6D,6BAA6B;AAC1F;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,4RAA4R,2CAA2C;AACvU;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,2BAA2B;AAC3B;AACA,kFAAkF;AAClF;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mFAAmF;AACnF;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,MAAM,6CAA6C;AACnD,MAAM,iDAAiD;AACvD,MAAM,+CAA+C;AACrD,MAAM,2CAA2C;AACjD,MAAM,8CAA8C;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,2GAA2G;AACjH,MAAM,8GAA8G;AACpH,MAAM,6GAA6G;AACnH,MAAM,oGAAoG;AAC1G;AACA;AACA;;;ACrnK6C;AACN;AACE;;AAEzC;AACA,wBAAwB,+CAAkB;AAC1C;AACA;;AAEA;AACA,qBAAqB,0CAAgB;AACrC;AACA,SAAS,2EAAmC;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oDAAqB;AACxC;AACA,MAAM,2EAAmC;AACzC;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEe;AACf;AACA;;;ACnCqC;AACmB;AACP;AACR;AACI;AACA;;AAE7C;AACA;AACA;AACA;AACA;AACA,QAAQ,+BAAW;AACnB;AACA;AACA,KAAK;AACL;AACA,MAAM,+BAAW;AACjB;AACA,KAAK;AACL;AACA;AACA,iDAAiD,iBAAiB;AAClE,QAAQ,+BAAW;AACnB,QAAQ;AACR,QAAQ,+BAAW;AACnB;AACA,MAAM,iCAAY;AAClB,KAAK;AACL;;AAEA;AACA,qBAAqB,yCAAiB;AACtC,sCAAsC,+CAAkB;;AAExD,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,UAAU,iCAAY,iBAAiB,aAAa;AACpD,mDAAmD,iBAAiB;AACpE;AACA;AACA;AACA,UAAU,2CAAmB;AAC7B;AACA;AACA,OAAO;AACP;AACA;AACA,UAAU,+BAAW;AACrB;AACA;AACA,QAAQ,iCAAY;AACpB;AACA,OAAO;AACP;AACA,GAAG;AACH;;AAEO;AACP;AACA,6CAA6C,iBAAiB;AAC9D;AACA;AACA,QAAQ,+BAAW;AACnB,QAAQ,iCAAY;AACpB,QAAQ;AACR,QAAQ,+BAAW;AACnB;AACA,UAAU,YAAY;AACtB,SAAS;AACT;AACA,MAAM;AACN;AACA,QAAQ,YAAY;AACpB,OAAO;AACP;AACA;AACA;;;ACvFqC;AACE;;AAEvC;AACA;AACA;AACA;AACA,mCAAmC,aAAa,GAAG,4CAA4C,GAAG,aAAa;AAC/G;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gCAAgC;AAC7D;AACA;;AAEA,cAAc,gDAAmB;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,IAAI,+BAAW;AACf;AACA;;AAEA;AACA;AACA;AACA,MAAM,iCAAY;AAClB;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,gCAAgC;AAC7E;AACA;AACA,OAAO;AACP;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,0BAA0B,uBAAuB;AACjD;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;AACL,GAAG;AACH;;;;ACrHmD;;AAEnD;AACA;AACA;AACA;AACA;AACA,UAAU,8BAA8B;AACxC,IAAI;AACJ,UAAU,8BAA8B;AACxC;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU,8BAA8B;AACxC,IAAI;AACJ,UAAU,8BAA8B;AACxC;AACA;;AAEO;AACP;AACA;AACA;;;AC3BA;AACuC;;;AAGxB;;AAEf;AACA;AACA,oBAAoB;AACpB;;AAEA,IAAI,wDAAyB;AAC7B;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;;AC1ByC;;AAElC;AACP,4CAA4C,qEAA6B;AACzE,2BAA2B,+CAAkB;AAC7C;AACA;;;ACNkD;AACF;AACF;AACK;AACK;;AAEjD;AACP;AACA;;AAEA;AACA;AACA,4BAA4B,wBAAwB;;AAEpD;AACA,mCAAmC,8BAAW;AAC9C;AACA,+BAA+B,UAAU;AACzC;AACA,gBAAgB,yBAAU;AAC1B;AACA,UAAU;AACV,cAAc,SAAS;AACvB;AACA,QAAQ;AACR;AACA,YAAY,QAAQ;AACpB;AACA,KAAK;;AAEL;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;;ACrCgE;AAChB;AACF;AACU;AACL;AACI;AAClB;;;AAG9B;AACP,eAAe,0DAA4B;AAC3C,gBAAgB,wEAAmC;AACnD;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wBAAwB;;AAEtD;AACA,qCAAqC,8BAAW;AAChD;AACA,iCAAiC,UAAU;AAC3C;AACA,kBAAkB,iBAAiB;AACnC;AACA,YAAY;AACZ;AACA,gBAAgB,SAAS;AACzB;AACA,UAAU;AACV;AACA,cAAc,QAAQ;AACtB;;AAEA;AACA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR,QAAQ,iCAAY;AACpB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;;AC7DqC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,UAAU;AAC7C,MAAM;AACN;AACA;AACA,+DAA+D,KAAK;AACpE;AACA;;AAEA;AACA,YAAY,oCAAoC;AAChD;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,iCAAY;AACtB,kCAAkC,UAAU,4BAA4B,aAAa;AACrF;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;;AAEzB;AACA,uCAAuC,YAAY;AACnD,oCAAoC,4BAA4B;AAChE,MAAM;AACN,MAAM,iCAAY,8DAA8D,KAAK,OAAO,YAAY;AACxG,oCAAoC,4CAA4C;AAChF;AACA;AACA;;AAEA;AACA;AACA,YAAY,mBAAmB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,qBAAqB,gBAAgB,oCAAoC;AAC/J;AACA;AACA;AACA;AACA,4CAA4C,KAAK,sBAAsB,qBAAqB;AAC5F;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0CAA0C;AAChF;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB,uBAAuB,YAAY;AACnC;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,2DAA2D,KAAK,KAAK,UAAU;AAC/E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mDAAmD,OAAO;AAC1D,+CAA+C,UAAU,KAAK,OAAO;AACrE;AACA;;AAEA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AChKO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,gBAAgB;AAChE;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;;AAEX,SAAS;AACT;AACA,KAAK;AACL;;;AC/D+C;AACM;;AAE9C;AACP,mEAAmE,IAAI,SAAS,IAAI;;AAEpF;AACA;AACA,GAAG;AACH;;AAEA;AACA,uBAAuB,+CAAsB;AAC7C;AACA,MAAM,gDAAqB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wCAAwC,oDAAoD;AAC5F;AACA;;AAEO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;;AC3FuC;AAC+B;;AAE/D;AACP;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,qGAAqG;AACrG,iGAAiG;;AAEjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,0CAAgB;AACnD;AACA;AACA,kBAAkB,0BAA0B;AAC5C;AACA,eAAe;AACf;AACA,sDAAsD,iBAAiB;AACvE;AACA,eAAe;AACf;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,YAAY,WAAW;AACvB,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;;AC7DqC;;AAErC;AACA,EAAE,iCAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,KAAK,iEAAiE,OAAO,MAAM,EAAE,MAAM;AAClH;AACA;;AAEA;AACA;AACA,2FAA2F;AAC3F;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA,oEAAe,UAAU,EAAC;;;AC/G0C;AAC3B;;AAEzC,MAAM,gBAAM;AACZ;AACA;AACA;AACA,MAAM,qBAAW;AACjB,MAAM,gBAAM,WAAW,gBAAM;AAC7B,IAAI,gBAAM;AACV,IAAI,gBAAM;AACV,IAAI;AACJ;AACA;AACA;AACA,IAAI,gBAAM;AACV;AACA;AACA,iDAAiD,MAAM,UAAU,OAAO;AACxE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kEAAkE,MAAM,mCAAmC,WAAW;AACtH;AACA;AACA,UAAU,iBAAiB,iBAAiB;AAC5C,MAAM;AACN;AACA;AACA;AACA,aAAa,qBAAW,qCAAqC,qBAAqB,GAAG,WAAW;AAChG;AACA;AACA,GAAG;;AAEH;AACA;AACA,EAAE,6BAAU;;AAEZ;;;AAGA,mEAAe,cAAc,EAAC;;;ACvDS;AACkB;;AAElD;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kHAAkH;AAClH,kGAAkG;;AAElG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0CAAgB;AAC/C;AACA;AACA,cAAc,0BAA0B;AACxC;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,iCAAiC,4BAA4B;AAC7D,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;;AC9CA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA,sDAAsD,gBAAgB,YAAY;;AAElF;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,gCAAgC;AAChC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,wEAAwE;AACtF;AACA;AACA;AACA;AACA,YAAY,kFAAkF;AAC9F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA,mDAAe,qBAAqB,EAAC;;;ACrIrC;;AAE6D;AACxB;;AAErC;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sDAAsD,MAAM;AAC5D;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,+BAA+B,GAAG;;AAElC;AACA;AACA;AACA,oDAAoD,8BAA8B;AAClF,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,kBAAkB;AAC7B,WAAW,mBAAmB;AAC9B,aAAa,4BAA4B;AACzC;AACA;AACA;AACA,QAAQ,sBAAsB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA,UAAU,8FAA8F;;AAExG;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI,iCAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;;AAGL,UAAU,6CAAsB;AAChC,IAAI;AACJ;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA,wDAAwD,YAAY,IAAI;AACxE;AACA,KAAK;AACL;;AAEA;AACA;;;ACtMuC;AACW;;AAElD;AACuC;AACe;AACY;;AAElE;AAC6D;AACI;AACQ;AACrB;AACK;AACE;AACQ;AACO;AACjB;;AAEzD;AACuE;AACN;AACkB;;AAEnF;AACyD;;AAEzD;AACsE;AACA;AACD;AACS;;AAEpB;;AAEG;AACQ;AACI;;;AAGzE;AACO;AACP,EAAE,aAAa;AACf,EAAE,6BAAW;AACb,EAAE,WAAW;AACb,EAAE,SAAS;AACX,EAAE,iBAAiB;AACnB,EAAE,+BAAW;AACb,EAAE,wBAAwB;AAC1B,EAAE,uBAAuB;AACzB;;AAEA;AACO;AACP;AACA,QAAQ,oBAAoB;;AAE5B;AACA,EAAE,mCAAgB;AAClB,IAAI,0EAAsC;AAC1C,GAAG;;AAEH;AACA,EAAE,YAAqB;AACvB,EAAE,aAAa;;AAEf;AACA;AACA,IAAI,YAAY;AAChB;AACA,IAAI,cAAc;AAClB,IAAI,UAAU;AACd,IAAI,yBAAyB;AAC7B,IAAI,mBAAmB;AACvB,GAAG;;AAEH,EAAE,eAAe;AACjB,EAAE,+BAAW;AACb;;AAEO;AACP,EAAE,YAAY;AACd;;AAEO;AACP,EAAE,mBAAmB;AACrB,EAAE,UAAU;AACZ;;AAEO;AACP,EAAE,UAAU;AACZ;AACA;AACA;;AAEO;AACP;AACA,IAAI,UAAU;AACd,IAAI,UAAU;AACd,IAAI,cAAc;AAClB;AACA,EAAE,4BAAc;AAChB;;;;;ACtGyC;AACP;AACY;;AAE9C;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,uDAAuD;AAC3G;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM,+BAAW;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,6BAA6B,sBAAsB;AACnD,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4BAA4B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;;AAGL;AACA;;AAEA;AACA,iCAAiC,4CAA4C;;AAE7E;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,iBAAiB,6DAA4B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qEAAqE;AAC3F;AACA;;AAEA;AACA,oDAAoD,gBAAgB;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,yCAAyC,UAAU,GAAG,SAAS,GAAG,WAAW;AAC7E,SAAS;AACT;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;;AAGA,uCAAuC;AACvC;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA,8BAA8B,mBAAmB;;AAEjD;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,IAAI,iCAAY;AAChB;AACA,2CAA2C,KAAK;AAChD,IAAI,2CAAmB,wCAAwC,SAAS;;AAExE;AACA;AACA;;;;AC5fA;AACiD;AACyC;;AAE1F;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAAe,SAAS,6BAAC;AACzB;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC,0BAA0B,yBAAyB,GAAG,sBAAsB;AAC5E,uDAAuD,yBAAyB;AAChF,uDAAuD,yBAAyB;AAChF,mEAAmE,+BAA+B;AAClG;AACA,0BAA0B,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,eAAe,GAAG,KAAK;AAClF,aAAa,2CAAmB,mCAAmC,SAAS;AAC5E,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,UAAU,mBAAmB;AAC7B,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;;;AC1CoB;AACiF;;AAErG;AACA,mBAAmB,IAAI;AACvB,oBAAoB,SAAS;AAC7B,kBAAkB,OAAO;AACzB,6BAA6B,gBAAgB;AAC7C,mCAAmC,kBAAkB;AACrD,4BAA4B,eAAe;AAC3C,sCAAsC,4BAA4B;AAClE,0CAA0C,4BAA4B;;AAEtE;AACA;AACA","sources":["webpack://ddb-importer/./src/parser/race/DDBRaceTrait.js","webpack://ddb-importer/./src/muncher/races/races.js","webpack://ddb-importer/./src/muncher/races.js","webpack://ddb-importer/./src/muncher/feats.js","webpack://ddb-importer/./src/muncher/classes/shared.js","webpack://ddb-importer/./src/muncher/classes/classes.js","webpack://ddb-importer/./src/muncher/classes/subclasses.js","webpack://ddb-importer/./src/muncher/classes/options.js","webpack://ddb-importer/./src/muncher/classes.js","webpack://ddb-importer/./src/muncher/frames.js","webpack://ddb-importer/./src/lib/base64Check.js","webpack://ddb-importer/./src/muncher/adventure/AdventureMunchHelpers.js","webpack://ddb-importer/./src/muncher/adventure/AdventureMunch.js","webpack://ddb-importer/./src/muncher/adventure/PageFinder.js","webpack://ddb-importer/./src/muncher/adventure/ThirdPartyMunch.js","webpack://ddb-importer/./src/muncher/backgrounds/backgrounds.js","webpack://ddb-importer/./src/muncher/backgrounds.js","webpack://ddb-importer/./src/apps/DDBMuncher.js","webpack://ddb-importer/./src/apps/DDBSources.js","webpack://ddb-importer/./src/dictionary.js","webpack://ddb-importer/./src/effects/DDBEffectHelper.js","webpack://ddb-importer/./src/effects/DDBMacros.js","webpack://ddb-importer/./src/effects/DDBSimpleMacro.js","webpack://ddb-importer/./src/effects/acEffects.js","webpack://ddb-importer/./src/effects/specialInfusions.js","webpack://ddb-importer/./src/effects/effects.js","webpack://ddb-importer/./src/effects/external/ChrisPremadesHelper.js","webpack://ddb-importer/./src/effects/external/ExternalAutomations.js","webpack://ddb-importer/./src/effects/feats/maskOfTheWild.js","webpack://ddb-importer/./src/effects/feats/recklessAttack.js","webpack://ddb-importer/./src/effects/feats/uncannyDodge.js","webpack://ddb-importer/./src/effects/monsterFeatures/overTimeEffect.js","webpack://ddb-importer/./src/effects/items/bootsOfSpeed.js","webpack://ddb-importer/./src/effects/items/cloakOfDisplacement.js","webpack://ddb-importer/./src/effects/items/javelinOfLightning.js","webpack://ddb-importer/./src/effects/items/moonSickle.js","webpack://ddb-importer/./src/effects/items/pearlOfPower.js","webpack://ddb-importer/./src/effects/items/stoneOfGoodLuck.js","webpack://ddb-importer/./src/effects/specialEquipment.js","webpack://ddb-importer/./src/effects/feats/alert.js","webpack://ddb-importer/./src/effects/feats/ancestralProtectors.js","webpack://ddb-importer/./src/effects/feats/arcaneRecovery.js","webpack://ddb-importer/./src/effects/feats/arcaneWard.js","webpack://ddb-importer/./src/effects/feats/auraOfHate.js","webpack://ddb-importer/./src/effects/feats/bardicInspiration.js","webpack://ddb-importer/./src/effects/feats/bladesong.js","webpack://ddb-importer/./src/effects/feats/blessedHealer.js","webpack://ddb-importer/./src/effects/feats/blessedStrikes.js","webpack://ddb-importer/./src/effects/feats/cloudRune.js","webpack://ddb-importer/./src/effects/feats/crossbowExpert.js","webpack://ddb-importer/./src/effects/feats/crusherCritical.js","webpack://ddb-importer/./src/effects/feats/crusher.js","webpack://ddb-importer/./src/effects/feats/dauntingRoar.js","webpack://ddb-importer/./src/effects/feats/defensiveDuelist.js","webpack://ddb-importer/./src/effects/feats/deflectMissilesAttack.js","webpack://ddb-importer/./src/effects/feats/deflectMissiles.js","webpack://ddb-importer/./src/effects/feats/deftStike.js","webpack://ddb-importer/./src/effects/feats/evasion.js","webpack://ddb-importer/./src/effects/feats/favoredFoe.js","webpack://ddb-importer/./src/effects/feats/fightingStyles.js","webpack://ddb-importer/./src/effects/feats/fireRune.js","webpack://ddb-importer/./src/effects/feats/fontOfMagic.js","webpack://ddb-importer/./src/effects/feats/formOfTheBeastReaction.js","webpack://ddb-importer/./src/effects/feats/frostRune.js","webpack://ddb-importer/./src/effects/feats/giantsMight.js","webpack://ddb-importer/./src/effects/feats/hadozeeDodge.js","webpack://ddb-importer/./src/effects/feats/heavyArmorMaster.js","webpack://ddb-importer/./src/effects/feats/hillRune.js","webpack://ddb-importer/./src/effects/feats/holdBreath.js","webpack://ddb-importer/./src/effects/feats/indomitable.js","webpack://ddb-importer/./src/effects/feats/kiEmptyBody.js","webpack://ddb-importer/./src/effects/feats/maneuvers.js","webpack://ddb-importer/./src/effects/feats/mantleOfInspiration.js","webpack://ddb-importer/./src/effects/feats/mindLink.js","webpack://ddb-importer/./src/effects/feats/momentaryStasis.js","webpack://ddb-importer/./src/effects/feats/pactMagic.js","webpack://ddb-importer/./src/effects/feats/paladinDefaultAura.js","webpack://ddb-importer/./src/effects/feats/patientDefense.js","webpack://ddb-importer/./src/effects/feats/piercer.js","webpack://ddb-importer/./src/effects/feats/planarWarrior.js","webpack://ddb-importer/./src/effects/feats/potentCantrip.js","webpack://ddb-importer/./src/effects/feats/powerfulBuild.js","webpack://ddb-importer/./src/effects/feats/radiantSoul.js","webpack://ddb-importer/./src/effects/feats/rage.js","webpack://ddb-importer/./src/effects/feats/runeCarver.js","webpack://ddb-importer/./src/effects/feats/sacredWeapon.js","webpack://ddb-importer/./src/effects/feats/savageAttacker.js","webpack://ddb-importer/./src/effects/feats/sculptSpells.js","webpack://ddb-importer/./src/effects/feats/sharpShooter.js","webpack://ddb-importer/./src/effects/feats/shift.js","webpack://ddb-importer/./src/effects/feats/slasherCritical.js","webpack://ddb-importer/./src/effects/feats/slasherReduceSpeed.js","webpack://ddb-importer/./src/effects/feats/slayersPrey.js","webpack://ddb-importer/./src/effects/feats/squireOfSolamnia.js","webpack://ddb-importer/./src/effects/feats/steadyAim.js","webpack://ddb-importer/./src/effects/feats/stoneRune.js","webpack://ddb-importer/./src/effects/feats/stonesEndurance.js","webpack://ddb-importer/./src/effects/feats/stormRune.js","webpack://ddb-importer/./src/effects/feats/unarmoredMovement.js","webpack://ddb-importer/./src/effects/feats/vedalkenDispassion.js","webpack://ddb-importer/./src/effects/feats/vigilantBlessing.js","webpack://ddb-importer/./src/effects/feats/visageOfTheAstralSelf.js","webpack://ddb-importer/./src/effects/feats/warCaster.js","webpack://ddb-importer/./src/effects/feats/furryOfTheSmall.js","webpack://ddb-importer/./src/effects/feats/intimidatingPresence.js","webpack://ddb-importer/./src/effects/feats/sheildingStorm.js","webpack://ddb-importer/./src/effects/feats/stormSoul.js","webpack://ddb-importer/./src/effects/feats/ragingStormSea.js","webpack://ddb-importer/./src/effects/feats/ragingStormTundra.js","webpack://ddb-importer/./src/effects/feats/stormAuraTundra.js","webpack://ddb-importer/./src/effects/feats/giantStature.js","webpack://ddb-importer/./src/effects/feats/demiurgicColossus.js","webpack://ddb-importer/./src/effects/feats/greatWeaponMaster.js","webpack://ddb-importer/./src/effects/feats/psychicBlades.js","webpack://ddb-importer/./src/effects/feats/sneakAttack.js","webpack://ddb-importer/./src/effects/feats/aspectOfTheBeastBear.js","webpack://ddb-importer/./src/effects/feats/flurryOfBlows.js","webpack://ddb-importer/./src/effects/feats/songOfVictory.js","webpack://ddb-importer/./src/effects/feats/twinklingConstellations.js","webpack://ddb-importer/./src/effects/feats/armsOfTheAstralSelf.js","webpack://ddb-importer/./src/effects/feats/ghostWalk.js","webpack://ddb-importer/./src/effects/feats/darkOnesOwnLuck.js","webpack://ddb-importer/./src/effects/feats/foeSlayer.js","webpack://ddb-importer/./src/effects/specialFeats.js","webpack://ddb-importer/./src/effects/monsterFeatures/absorbtion.js","webpack://ddb-importer/./src/effects/monsterFeatures/legendary.js","webpack://ddb-importer/./src/effects/monsterFeatures/packTactics.js","webpack://ddb-importer/./src/effects/monsterFeatures/reversalOfFortune.js","webpack://ddb-importer/./src/effects/monsterFeatures/suaveDefense.js","webpack://ddb-importer/./src/effects/monsterFeatures/taunt.js","webpack://ddb-importer/./src/effects/monsterFeatures/skeletalJuggernautEffects.js","webpack://ddb-importer/./src/effects/monsterFeatures/venomTroll.js","webpack://ddb-importer/./src/effects/monsterFeatures/quasit.js","webpack://ddb-importer/./src/effects/monsterFeatures/invisibility.js","webpack://ddb-importer/./src/effects/monsterFeatures/deathlyChoir.js","webpack://ddb-importer/./src/effects/monsterFeatures/strahdZombie.js","webpack://ddb-importer/./src/effects/monsterFeatures/beholderEyeRays.js","webpack://ddb-importer/./src/effects/monsterFeatures/spellReflection.js","webpack://ddb-importer/./src/effects/monsterFeatures/giantSpider.js","webpack://ddb-importer/./src/effects/monsterFeatures/beholderEyeRayLegendary.js","webpack://ddb-importer/./src/effects/monsterFeatures/multiAttack.js","webpack://ddb-importer/./src/effects/specialMonsters.js","webpack://ddb-importer/./src/effects/spells/absorbElements.js","webpack://ddb-importer/./src/effects/spells/acidArrow.js","webpack://ddb-importer/./src/effects/spells/aid.js","webpack://ddb-importer/./src/effects/spells/alterSelf.js","webpack://ddb-importer/./src/effects/spells/animalFriendship.js","webpack://ddb-importer/./src/effects/spells/arcaneEye.js","webpack://ddb-importer/./src/effects/spells/arcaneHand.js","webpack://ddb-importer/./src/effects/spells/arcaneSword.js","webpack://ddb-importer/./src/effects/spells/armorOfAgathys.js","webpack://ddb-importer/./src/effects/spells/auraOfLife.js","webpack://ddb-importer/./src/effects/spells/bane.js","webpack://ddb-importer/./src/effects/spells/banishment.js","webpack://ddb-importer/./src/effects/spells/barkskin.js","webpack://ddb-importer/./src/effects/spells/beaconofHope.js","webpack://ddb-importer/./src/effects/spells/blackTentacles.js","webpack://ddb-importer/./src/effects/spells/bless.js","webpack://ddb-importer/./src/effects/spells/blindnessDeafness.js","webpack://ddb-importer/./src/effects/spells/blur.js","webpack://ddb-importer/./src/effects/spells/boomingBlade.js","webpack://ddb-importer/./src/effects/spells/brandingSmite.js","webpack://ddb-importer/./src/effects/spells/callLightning.js","webpack://ddb-importer/./src/effects/spells/charmPerson.js","webpack://ddb-importer/./src/effects/spells/chillTouch.js","webpack://ddb-importer/./src/effects/spells/chromaticOrb.js","webpack://ddb-importer/./src/effects/spells/cloudkill.js","webpack://ddb-importer/./src/effects/spells/colorSpray.js","webpack://ddb-importer/./src/effects/spells/command.js","webpack://ddb-importer/./src/effects/spells/comprehendLanguages.js","webpack://ddb-importer/./src/effects/spells/confusion.js","webpack://ddb-importer/./src/effects/spells/contagion.js","webpack://ddb-importer/./src/effects/spells/createBonfire.js","webpack://ddb-importer/./src/effects/spells/crownofMadness.js","webpack://ddb-importer/./src/effects/spells/crownofStars.js","webpack://ddb-importer/./src/effects/spells/dancingLights.js","webpack://ddb-importer/./src/effects/spells/darkness.js","webpack://ddb-importer/./src/effects/spells/darkvision.js","webpack://ddb-importer/./src/effects/spells/divineFavor.js","webpack://ddb-importer/./src/effects/spells/divineWord.js","webpack://ddb-importer/./src/effects/spells/dominateBeast.js","webpack://ddb-importer/./src/effects/spells/dominateMonster.js","webpack://ddb-importer/./src/effects/spells/dominatePerson.js","webpack://ddb-importer/./src/effects/spells/elementalWeapon.js","webpack://ddb-importer/./src/effects/spells/enhanceAbility.js","webpack://ddb-importer/./src/effects/spells/enlargeReduce.js","webpack://ddb-importer/./src/effects/spells/ensnaringStrike.js","webpack://ddb-importer/./src/effects/spells/entangle.js","webpack://ddb-importer/./src/effects/spells/eyebite.js","webpack://ddb-importer/./src/effects/spells/faerieFire.js","webpack://ddb-importer/./src/effects/spells/fear.js","webpack://ddb-importer/./src/effects/spells/feeblemind.js","webpack://ddb-importer/./src/effects/spells/fireShield.js","webpack://ddb-importer/./src/effects/spells/flameBlade.js","webpack://ddb-importer/./src/effects/spells/fleshtoStone.js","webpack://ddb-importer/./src/effects/spells/fly.js","webpack://ddb-importer/./src/effects/spells/frostbite.js","webpack://ddb-importer/./src/effects/spells/geas.js","webpack://ddb-importer/./src/effects/spells/grease.js","webpack://ddb-importer/./src/effects/spells/greaterInvisibility.js","webpack://ddb-importer/./src/effects/spells/greenFlameBlade.js","webpack://ddb-importer/./src/effects/spells/guidance.js","webpack://ddb-importer/./src/effects/spells/guidingBolt.js","webpack://ddb-importer/./src/effects/spells/hailOfThorns.js","webpack://ddb-importer/./src/effects/spells/heroesFeast.js","webpack://ddb-importer/./src/effects/spells/heroism.js","webpack://ddb-importer/./src/effects/spells/hex.js","webpack://ddb-importer/./src/effects/spells/hideousLaughter.js","webpack://ddb-importer/./src/effects/spells/holdMonster.js","webpack://ddb-importer/./src/effects/spells/holdPerson.js","webpack://ddb-importer/./src/effects/spells/holyAura.js","webpack://ddb-importer/./src/effects/spells/huntersMark.js","webpack://ddb-importer/./src/effects/spells/hypnoticPattern.js","webpack://ddb-importer/./src/effects/spells/iceKnife.js","webpack://ddb-importer/./src/effects/spells/incendiaryCloud.js","webpack://ddb-importer/./src/effects/spells/insectPlague.js","webpack://ddb-importer/./src/effects/spells/invisibility.js","webpack://ddb-importer/./src/effects/spells/irresistibleDance.js","webpack://ddb-importer/./src/effects/spells/light.js","webpack://ddb-importer/./src/effects/spells/longstrider.js","webpack://ddb-importer/./src/effects/spells/mageArmor.js","webpack://ddb-importer/./src/effects/spells/mageHand.js","webpack://ddb-importer/./src/effects/spells/magicWeapon.js","webpack://ddb-importer/./src/effects/spells/massSuggestion.js","webpack://ddb-importer/./src/effects/spells/mindBlank.js","webpack://ddb-importer/./src/effects/spells/mirrorImage.js","webpack://ddb-importer/./src/effects/spells/mistyStep.js","webpack://ddb-importer/./src/effects/spells/moonbeam.js","webpack://ddb-importer/./src/effects/spells/passWithoutTrace.js","webpack://ddb-importer/./src/effects/spells/phantasmalKiller.js","webpack://ddb-importer/./src/effects/spells/polymorph.js","webpack://ddb-importer/./src/effects/spells/protectionfromEnergy.js","webpack://ddb-importer/./src/effects/spells/protectionfromPoison.js","webpack://ddb-importer/./src/effects/spells/psychicScream.js","webpack://ddb-importer/./src/effects/spells/rayOfSickness.js","webpack://ddb-importer/./src/effects/spells/rayofEnfeeblement.js","webpack://ddb-importer/./src/effects/spells/rayofFrost.js","webpack://ddb-importer/./src/effects/spells/regenerate.js","webpack://ddb-importer/./src/effects/spells/resilientSphere.js","webpack://ddb-importer/./src/effects/spells/resistance.js","webpack://ddb-importer/./src/effects/spells/shield.js","webpack://ddb-importer/./src/effects/spells/shieldofFaith.js","webpack://ddb-importer/./src/effects/spells/shillelagh.js","webpack://ddb-importer/./src/effects/spells/silence.js","webpack://ddb-importer/./src/effects/spells/sleep.js","webpack://ddb-importer/./src/effects/spells/slow.js","webpack://ddb-importer/./src/effects/spells/spiderClimb.js","webpack://ddb-importer/./src/effects/spells/spikeGrowth.js","webpack://ddb-importer/./src/effects/spells/spiritGuardians.js","webpack://ddb-importer/./src/effects/spells/spiritShroud.js","webpack://ddb-importer/./src/effects/spells/spiritualWeapon.js","webpack://ddb-importer/./src/effects/spells/stoneskin.js","webpack://ddb-importer/./src/effects/spells/stormSphere.js","webpack://ddb-importer/./src/effects/spells/sunbeam.js","webpack://ddb-importer/./src/effects/spells/swordburst.js","webpack://ddb-importer/./src/effects/spells/thunderclap.js","webpack://ddb-importer/./src/effects/spells/thunderousSmite.js","webpack://ddb-importer/./src/effects/spells/tidalWave.js","webpack://ddb-importer/./src/effects/spells/tolltheDead.js","webpack://ddb-importer/./src/effects/spells/trueStrike.js","webpack://ddb-importer/./src/effects/spells/viciousMockery.js","webpack://ddb-importer/./src/effects/spells/vitriolicSphere.js","webpack://ddb-importer/./src/effects/spells/wardingBond.js","webpack://ddb-importer/./src/effects/spells/web.js","webpack://ddb-importer/./src/effects/spells/witchBolt.js","webpack://ddb-importer/./src/effects/spells/zephyrStrike.js","webpack://ddb-importer/./src/effects/specialSpells.js","webpack://ddb-importer/./src/effects/spells/haste.js","webpack://ddb-importer/./src/effects/vision5e.js","webpack://ddb-importer/./src/hooks/ready/checkCompendiums.js","webpack://ddb-importer/./src/lib/CompendiumHelper.js","webpack://ddb-importer/./src/lib/DDBCampaigns.js","webpack://ddb-importer/./src/lib/DDBCompendiumFolders.js","webpack://ddb-importer/./src/lib/DDBHelper.js","webpack://ddb-importer/./src/lib/DDBItemImporter.js","webpack://ddb-importer/./src/lib/DDBProxy.js","webpack://ddb-importer/./src/lib/DDBReferenceLinker.js","webpack://ddb-importer/./vendor/lowdash/uniq.js","webpack://ddb-importer/./vendor/parseTable.js","webpack://ddb-importer/./src/lib/DDBTable.js","webpack://ddb-importer/./src/lib/DDBTemplateStrings.js","webpack://ddb-importer/./src/lib/AdvancedDialog.js","webpack://ddb-importer/./src/lib/DialogHelper.js","webpack://ddb-importer/./src/lib/DirectoryPicker.js","webpack://ddb-importer/./src/lib/FileHelper.js","webpack://ddb-importer/./src/lib/FolderHelper.js","webpack://ddb-importer/./src/lib/Iconizer.js","webpack://ddb-importer/./src/lib/MuncherSettings.js","webpack://ddb-importer/./src/lib/NameMatcher.js","webpack://ddb-importer/./src/lib/PatreonHelper.js","webpack://ddb-importer/./src/lib/Secrets.js","webpack://ddb-importer/./src/lib/utils.js","webpack://ddb-importer/./src/logger.js","webpack://ddb-importer/./src/muncher/adventure.js","webpack://ddb-importer/./src/muncher/feats/feats.js","webpack://ddb-importer/./src/muncher/importMonster.js","webpack://ddb-importer/./src/muncher/items.js","webpack://ddb-importer/./src/muncher/prices.js","webpack://ddb-importer/./src/parser/spells/getGenericSpells.js","webpack://ddb-importer/./src/muncher/spells.js","webpack://ddb-importer/./src/muncher/tools.js","webpack://ddb-importer/./src/parser/vehicle/templates/vehicle.js","webpack://ddb-importer/./src/parser/vehicle/conditions.js","webpack://ddb-importer/./src/parser/vehicle/abilities.js","webpack://ddb-importer/./src/parser/vehicle/size.js","webpack://ddb-importer/./src/parser/vehicle/capacity.js","webpack://ddb-importer/./src/parser/vehicle/movement.js","webpack://ddb-importer/./src/parser/vehicle/templates/component.js","webpack://ddb-importer/./src/parser/vehicle/components.js","webpack://ddb-importer/./src/parser/vehicle/threshold.js","webpack://ddb-importer/./src/parser/vehicle/vehicle.js","webpack://ddb-importer/./src/muncher/vehicles.js","webpack://ddb-importer/./src/parser/spells/CharacterSpellFactory.js","webpack://ddb-importer/./src/parser/classes/DDBClass.js","webpack://ddb-importer/./src/parser/classes/DDBSubClass.js","webpack://ddb-importer/./src/parser/classes/CharacterClassFactory.js","webpack://ddb-importer/./src/parser/features/DDBChoiceFeature.js","webpack://ddb-importer/./src/parser/features/DDBClassFeatures.js","webpack://ddb-importer/./src/parser/features/DDBFeatures.js","webpack://ddb-importer/./src/parser/features/CharacterFeatureFactory.js","webpack://ddb-importer/./src/parser/features/DDBInfusion.js","webpack://ddb-importer/./src/parser/features/DDBInfusionFactory.js","webpack://ddb-importer/./src/parser/DDBCharacter.js","webpack://ddb-importer/./src/parser/DDBExtras.js","webpack://ddb-importer/./src/parser/monster/special.js","webpack://ddb-importer/./src/parser/DDBMonster.js","webpack://ddb-importer/./src/parser/DDBMonsterFactory.js","webpack://ddb-importer/./src/parser/advancements/AdvancementHelper.js","webpack://ddb-importer/./src/parser/character/bio.js","webpack://ddb-importer/./src/parser/character/filterModifiers.js","webpack://ddb-importer/./src/parser/companions/DDBCompanion.js","webpack://ddb-importer/./src/parser/companions/DDBCompanionFactory.js","webpack://ddb-importer/./src/parser/companions/DDBSummonsManager.js","webpack://ddb-importer/./src/parser/features/DDBAction.js","webpack://ddb-importer/./src/parser/features/DDBAttackAction.js","webpack://ddb-importer/./src/parser/features/DDBBaseFeature.js","webpack://ddb-importer/./src/parser/features/DDBFeature.js","webpack://ddb-importer/./src/parser/features/fixes.js","webpack://ddb-importer/./src/parser/item/special.js","webpack://ddb-importer/./src/parser/monster/features/DDBMonsterFeature.js","webpack://ddb-importer/./src/parser/monster/features/DDBMonsterFeatureFactory.js","webpack://ddb-importer/./src/parser/monster/helpers.js","webpack://ddb-importer/./src/parser/monster/templates/monster.js","webpack://ddb-importer/./src/parser/race/DDBRace.js","webpack://ddb-importer/./src/parser/spells/ability.js","webpack://ddb-importer/./src/parser/spells/metadata.js","webpack://ddb-importer/./src/parser/spells/components.js","webpack://ddb-importer/./src/parser/spells/prepartion.js","webpack://ddb-importer/./src/parser/spells/uses.js","webpack://ddb-importer/./src/parser/spells/activation.js","webpack://ddb-importer/./src/parser/spells/duration.js","webpack://ddb-importer/./src/parser/spells/target.js","webpack://ddb-importer/./src/parser/spells/range.js","webpack://ddb-importer/./src/parser/spells/action.js","webpack://ddb-importer/./src/parser/spells/damage.js","webpack://ddb-importer/./src/parser/spells/save.js","webpack://ddb-importer/./src/parser/spells/scaling.js","webpack://ddb-importer/./src/parser/spells/name.js","webpack://ddb-importer/./src/parser/spells/parseSpell.js","webpack://ddb-importer/./src/parser/spells/special.js","webpack://ddb-importer/./src/settings.js","webpack://ddb-importer/./vendor/lowdash/isequal.js","webpack://ddb-importer/webpack/bootstrap","webpack://ddb-importer/webpack/runtime/define property getters","webpack://ddb-importer/webpack/runtime/global","webpack://ddb-importer/webpack/runtime/harmony module decorator","webpack://ddb-importer/webpack/runtime/hasOwnProperty shorthand","webpack://ddb-importer/./src/parser/monster/abilities.js","webpack://ddb-importer/./src/parser/monster/ac.js","webpack://ddb-importer/./src/parser/monster/conditions.js","webpack://ddb-importer/./src/parser/monster/size.js","webpack://ddb-importer/./src/parser/monster/type.js","webpack://ddb-importer/./src/parser/monster/skills.js","webpack://ddb-importer/./src/parser/monster/senses.js","webpack://ddb-importer/./src/parser/monster/environments.js","webpack://ddb-importer/./src/parser/monster/languages.js","webpack://ddb-importer/./src/parser/monster/hp.js","webpack://ddb-importer/./src/parser/monster/movement.js","webpack://ddb-importer/./src/parser/monster/source.js","webpack://ddb-importer/./src/parser/monster/features.js","webpack://ddb-importer/./src/parser/monster/spells.js","webpack://ddb-importer/./src/parser/character/index.js","webpack://ddb-importer/./src/parser/character/token.js","webpack://ddb-importer/./src/parser/character/ac.js","webpack://ddb-importer/./src/parser/character/specialTraits.js","webpack://ddb-importer/./src/parser/character/proficiencies.js","webpack://ddb-importer/./src/parser/character/skills.js","webpack://ddb-importer/./src/parser/character/abilities.js","webpack://ddb-importer/./src/parser/character/hp.js","webpack://ddb-importer/./src/parser/character/initiative.js","webpack://ddb-importer/./src/parser/character/effects.js","webpack://ddb-importer/./src/parser/character/currency.js","webpack://ddb-importer/./src/parser/character/senses.js","webpack://ddb-importer/./src/parser/character/speed.js","webpack://ddb-importer/./src/parser/character/size.js","webpack://ddb-importer/./src/parser/character/spellCasting.js","webpack://ddb-importer/./src/parser/character/race.js","webpack://ddb-importer/./src/parser/character/resources.js","webpack://ddb-importer/./src/parser/spells/getItemSpells.js","webpack://ddb-importer/./src/parser/character/inventory.js","webpack://ddb-importer/./src/parser/character/globalBonuses.js","webpack://ddb-importer/./src/parser/special/additions/divineSmite.js","webpack://ddb-importer/./src/parser/special/character.js","webpack://ddb-importer/./src/parser/item/common.js","webpack://ddb-importer/./src/parser/item/magicify.js","webpack://ddb-importer/./src/parser/item/infusions.js","webpack://ddb-importer/./src/effects/restrictions.js","webpack://ddb-importer/./src/parser/item/weapon.js","webpack://ddb-importer/./src/parser/item/ammunition.js","webpack://ddb-importer/./src/parser/item/staves.js","webpack://ddb-importer/./src/parser/item/armor.js","webpack://ddb-importer/./src/parser/item/wonderous.js","webpack://ddb-importer/./src/parser/item/tool.js","webpack://ddb-importer/./src/parser/item/consumable.js","webpack://ddb-importer/./src/parser/item/loot.js","webpack://ddb-importer/./src/parser/item/custom.js","webpack://ddb-importer/./src/parser/item/index.js","webpack://ddb-importer/./src/parser/companions/companions.js","webpack://ddb-importer/./src/parser/extendParsers.js","webpack://ddb-importer/./src/hooks/init/extendClasses.js","webpack://ddb-importer/./src/parser/special/conditions.js","webpack://ddb-importer/./src/updater/character.js","webpack://ddb-importer/./src/apps/DDBCookie.js","webpack://ddb-importer/./src/apps/DDBKeyChange.js","webpack://ddb-importer/./src/effects/abilityOverrides.js","webpack://ddb-importer/./src/parser/item/itemSpells.js","webpack://ddb-importer/./src/apps/DDBCharacterManager.js","webpack://ddb-importer/./src/parser/DDBEncounters.js","webpack://ddb-importer/./src/apps/DDBEncounterMunch.js","webpack://ddb-importer/./src/lib/OriginFixer.js","webpack://ddb-importer/./src/api.js","webpack://ddb-importer/./src/hooks/init/chatHooks.js","webpack://ddb-importer/./src/apps/DDBAdventureImporter.js","webpack://ddb-importer/./src/hooks/init/adventureImporter.js","webpack://ddb-importer/./src/apps/DDBSetup.js","webpack://ddb-importer/./src/apps/DDBAdventureFlags.js","webpack://ddb-importer/./src/hooks/ready/registerSheets.js","webpack://ddb-importer/./src/apps/DDBProxySetup.js","webpack://ddb-importer/./src/apps/DDBDynamicUpdateSetup.js","webpack://ddb-importer/./src/apps/DDBCompendiumSetup.js","webpack://ddb-importer/./src/apps/DDBLocationSetup.js","webpack://ddb-importer/./src/hooks/ready/registerGameSettings.js","webpack://ddb-importer/./src/apps/DDBItemConfig.js","webpack://ddb-importer/./src/hooks/ready/items.js","webpack://ddb-importer/./src/hooks/ready/checkVersion.js","webpack://ddb-importer/./src/hooks/ready/fallbackConfig.js","webpack://ddb-importer/./src/hooks/ready/addDDBConfig.js","webpack://ddb-importer/./src/hooks/ready/ddbConfig.js","webpack://ddb-importer/./src/hooks/ready/anchorInjection.js","webpack://ddb-importer/./src/hooks/ready/originFixing.js","webpack://ddb-importer/./src/effects/DDBEffectHooks.js","webpack://ddb-importer/./src/hooks/renderMuncher/earlySettings.js","webpack://ddb-importer/./src/hooks/renderMuncher/addMuncher.js","webpack://ddb-importer/./src/hooks/renderMuncher/addEncounterMuncher.js","webpack://ddb-importer/./src/hooks/socket/sockets.js","webpack://ddb-importer/./src/hooks/renderJournalSheet/linkTables.js","webpack://ddb-importer/./src/hooks/renderJournalSheet/shared.js","webpack://ddb-importer/./src/hooks/renderJournalSheet/linkImages.js","webpack://ddb-importer/./src/hooks/renderJournalSheet/buildNotes.js","webpack://ddb-importer/./src/hooks/renderJournalSheet/adventure.js","webpack://ddb-importer/./src/hooks/renderJournalSheet/linkReadAlouds.js","webpack://ddb-importer/./src/lib/Notification.js","webpack://ddb-importer/./src/hooks/ready/enrichers.js","webpack://ddb-importer/./src/hooks.js","webpack://ddb-importer/./src/apps/SceneEnhancerExport.js","webpack://ddb-importer/./src/hooks/navigationContext/extendSceneNavigationContext.js","webpack://ddb-importer/./src/index.js"],"sourcesContent":["import { parseTags } from \"../../lib/DDBReferenceLinker.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport CompendiumHelper from \"../../lib/CompendiumHelper.js\";\nimport utils from \"../../lib/utils.js\";\nimport logger from \"../../logger.js\";\nimport DDBRace from \"./DDBRace.js\";\n\n\nexport default class DDBRaceTrait {\n\n  _generateDataStub() {\n    this.data = {\n      _id: foundry.utils.randomID(),\n      name: \"A Racial Trait\",\n      type: \"feat\",\n      system: utils.getTemplate(\"feat\"),\n      flags: {\n        ddbimporter: {\n          type: \"race\",\n        },\n        obsidian: {\n          source: {\n            type: \"race\"\n          },\n        },\n      },\n      img: null,\n    };\n  }\n\n  constructor(trait, ddbRaceData) {\n    logger.debug(`Trait build for ${trait.fullName} started [${ddbRaceData.raceName}]`);\n    this.trait = trait;\n    this.race = ddbRaceData;\n    this.fullName = this.race.fullName;\n    this.isLegacy = this.race.isLegacy;\n    this.baseRaceName = this.race.baseRaceName;\n    this.groupName = DDBRace.getGroupName(this.race.groupIds, this.baseRaceName);\n    this.isSubRace = this.race.isSubRace || this.groupName !== this.raceName;\n    this._generateDataStub();\n    this._compendiumLabel = CompendiumHelper.getCompendiumLabel(\"traits\");\n\n    this.name = utils.nameString((this.trait.fullName ?? this.trait.name));\n    this.data.name = `${this.name}`;\n    this.data.system.description.value += `${this.trait.description}\\n\\n`;\n\n    this.data.flags.ddbimporter = {\n      type: \"race\",\n      entityRaceId: this.trait.entityRaceId,\n      version: CONFIG.DDBI.version,\n      sourceId: this.trait.sources.length > 0 ? [0].sourceId : -1, // is homebrew\n      baseName: this.name,\n      spellListIds: this.trait.spellListIds,\n      definitionKey: this.trait.definitionKey,\n      race: this.baseName,\n      baseRaceName: this.baseRaceName,\n      baseRaceId: this.race.baseRaceId,\n      subRaceShortName: this.race.subRaceShortName,\n      fullRaceName: this.race.fullName,\n      isSubRace: this.isSubRace,\n      groupIds: this.race.groupIds,\n      groupName: this.groupName,\n    };\n\n    if (this.trait.moreDetailsUrl) {\n      this.data.flags.ddbimporter['moreDetailsUrl'] = this.trait.moreDetailsUrl;\n    }\n\n    this.data.system.source = DDBHelper.parseSource(this.trait);\n\n    if (this.baseRaceName) this.data.system.requirements = this.baseRaceName;\n    const legacyName = game.settings.get(\"ddb-importer\", \"munching-policy-legacy-postfix\");\n    if (legacyName && this.isLegacy) {\n      this.data.name += \" (Legacy)\";\n      logger.debug(`Trait name ${this.data.name} is legacy`);\n    }\n\n    this.data.system.requirements = this.raceName;\n    this.data.system.type = {\n      value: \"race\",\n    };\n\n    this.data.system.description.value = parseTags(this.data.system.description.value);\n  }\n\n}\n\n","import logger from \"../../logger.js\";\nimport DDBRace from \"../../parser/race/DDBRace.js\";\nimport DDBItemImporter from \"../../lib/DDBItemImporter.js\";\nimport DDBRaceTrait from \"../../parser/race/DDBRaceTrait.js\";\nimport { DDBCompendiumFolders } from \"../../lib/DDBCompendiumFolders.js\";\n\nconst NO_TRAITS = [\n  \"Speed\",\n  \"Ability Score Increase\",\n  \"Ability Score Increases\",\n  \"Size\",\n  \"Feat\",\n  \"Languages\",\n  \"Extra Language\",\n  \"Age\",\n  \"Alignment\",\n  \"Creature Type\",\n  \"Darkvision\",\n  \"Keen Senses\",\n  \"Natural Athlete\",\n  \"Necrotic Resistance\",\n  \"Skills\",\n  \"Skill Versatility\",\n];\n\nexport async function getRaces(data) {\n  logger.debug(\"get races started\");\n  const updateBool = game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\");\n\n  let results = [];\n  let races = [];\n  let racialFeatures = [];\n\n  const traitCompendiumFolders = new DDBCompendiumFolders(\"traits\");\n  await traitCompendiumFolders.loadCompendium(\"traits\");\n\n  const excludeLegacy = game.settings.get(\"ddb-importer\", \"munching-policy-exclude-legacy\");\n  const filteredRaces = data.filter((race) => !excludeLegacy || (excludeLegacy && !race.isLegacy));\n\n  for (const race of filteredRaces) {\n    logger.debug(`${race.fullName} features parsing started...`);\n    const groupName = DDBRace.getGroupName(race.groupIds, race.baseRaceName);\n    // await traitCompendiumFolders.getRacialBaseFolder(\"trait\", groupName);\n    for (const trait of race.racialTraits) {\n      logger.debug(`${trait.definition.name} trait starting...`);\n      if (!trait.definition.hideInSheet && !NO_TRAITS.includes(trait.definition.name)) {\n        const ddbTrait = new DDBRaceTrait(trait.definition, race);\n        racialFeatures.push(ddbTrait.data);\n        results.push({ race: race.fullName, trait: trait.definition.name });\n        await traitCompendiumFolders.createSubTraitFolders(groupName, race.fullName);\n      }\n    }\n  }\n\n  const raceCompendiumFolders = new DDBCompendiumFolders(\"races\");\n  await raceCompendiumFolders.loadCompendium(\"races\");\n  const traitOptions = { chrisPremades: true, matchFlags: [\"entityRaceId\"], useCompendiumFolders: true };\n\n  const traitHelper = await DDBItemImporter.buildHandler(\"traits\", racialFeatures, updateBool, traitOptions);\n  const compendiumRacialTraits = await DDBRace.getRacialTraitsLookup(traitHelper.documents);\n\n  for (const race of filteredRaces) {\n    logger.debug(`${race.fullName} race parsing started...`);\n    const ddbRace = new DDBRace(null, race, compendiumRacialTraits, true);\n    await ddbRace.build();\n    await raceCompendiumFolders.getRacialBaseFolder(\"race\", ddbRace.groupName);\n    races.push(ddbRace.data);\n  }\n\n  logger.debug(\"Pre-fiddled races\", foundry.utils.duplicate(races));\n  const raceOptions = { matchFlags: [\"entityRaceId\"], useCompendiumFolders: true };\n  await DDBItemImporter.buildHandler(\"races\", races, updateBool, raceOptions);\n\n  return results;\n}\n","// Main module class\nimport DDBMuncher from \"../apps/DDBMuncher.js\";\nimport { getRaces } from \"./races/races.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport DDBCampaigns from \"../lib/DDBCampaigns.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\nimport PatreonHelper from \"../lib/PatreonHelper.js\";\nimport { createDDBCompendium } from \"../hooks/ready/checkCompendiums.js\";\n\nfunction getRaceData() {\n  const cobaltCookie = getCobalt();\n  const campaignId = DDBCampaigns.getCampaignId();\n  const parsingApi = DDBProxy.getProxy();\n  const betaKey = PatreonHelper.getPatreonKey();\n  const body = { cobalt: cobaltCookie, campaignId: campaignId, betaKey: betaKey };\n  const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n  return new Promise((resolve, reject) => {\n    fetch(`${parsingApi}/proxy/races`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (debugJson) {\n          FileHelper.download(JSON.stringify(data), `races-raw.json`, \"application/json\");\n        }\n        if (!data.success) {\n          DDBMuncher.munchNote(`Failure: ${data.message}`);\n          reject(data.message);\n        }\n        return data;\n      })\n      .then((data) => getRaces(data.data))\n      .then((data) => resolve(data))\n      .catch((error) => reject(error));\n  });\n}\n\nexport async function parseRaces() {\n\n  const racesCompData = SETTINGS.COMPENDIUMS.find((c) => c.title === \"Races\");\n  await createDDBCompendium(racesCompData);\n\n  const traitCompData = SETTINGS.COMPENDIUMS.find((c) => c.title === \"Racial Traits\");\n  await createDDBCompendium(traitCompData);\n\n  const results = await getRaceData();\n\n  // FileHelper.download(JSON.stringify(results), `races-icon.json`, \"application/json\");\n\n  return results;\n}\n\n\n","// Main module class\nimport DDBMuncher from \"../apps/DDBMuncher.js\";\nimport { getFeats } from \"./feats/feats.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport DDBCampaigns from \"../lib/DDBCampaigns.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\nimport PatreonHelper from \"../lib/PatreonHelper.js\";\nimport { createDDBCompendium } from \"../hooks/ready/checkCompendiums.js\";\n\nfunction getFeatData() {\n  const cobaltCookie = getCobalt();\n  const campaignId = DDBCampaigns.getCampaignId();\n  const parsingApi = DDBProxy.getProxy();\n  const betaKey = PatreonHelper.getPatreonKey();\n  const body = { cobalt: cobaltCookie, campaignId: campaignId, betaKey: betaKey };\n  const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n  return new Promise((resolve, reject) => {\n    fetch(`${parsingApi}/proxy/feats`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (debugJson) {\n          FileHelper.download(JSON.stringify(data), `feats-raw.json`, \"application/json\");\n        }\n        if (!data.success) {\n          DDBMuncher.munchNote(`Failure: ${data.message}`);\n          reject(data.message);\n        }\n        return data;\n      })\n      .then((data) => getFeats(data.data))\n      .then((data) => resolve(data))\n      .catch((error) => reject(error));\n  });\n}\n\nexport async function parseFeats() {\n  const featsCompData = SETTINGS.COMPENDIUMS.find((c) => c.title === \"Feats\");\n  await createDDBCompendium(featsCompData);\n\n  const results = await getFeatData();\n\n  return results;\n}\n\n\n","import DDBHelper from \"../../lib/DDBHelper.js\";\nimport CompendiumHelper from \"../../lib/CompendiumHelper.js\";\nimport FileHelper from \"../../lib/FileHelper.js\";\nimport logger from \"../../logger.js\";\nimport DICTIONARY from \"../../dictionary.js\";\nimport { generateTable } from \"../../lib/DDBTable.js\";\nimport { parseTags } from \"../../lib/DDBReferenceLinker.js\";\nimport utils from \"../../lib/utils.js\";\nimport SETTINGS from \"../../settings.js\";\n\nconst CLASS_TEMPLATE = {\n  \"name\": \"\",\n  \"type\": \"feat\",\n  \"system\": {\n    \"description\": {\n      \"value\": \"\",\n      \"chat\": \"\",\n    },\n    \"source\": \"\",\n  },\n  \"sort\": 2600000,\n  \"flags\": {\n    \"ddbimporter\": {\n      \"type\": \"class\",\n    },\n    \"obsidian\": {\n      \"source\": {\n        \"type\": \"class\",\n        \"text\": \"\"\n      }\n    },\n  },\n  \"img\": null\n};\n\nexport const NO_TRAITS = [\n  \"Speed\",\n  \"Size\",\n  \"Feat\",\n  \"Languages\",\n  \"Hit Points\",\n  \"Proficiencies\",\n];\n\nexport const FEATURE_DUP = [\n  \"Ability Score Increase\",\n  \"Ability Score Improvement\",\n  \"Expertise\",\n  \"Fighting Style\",\n  \"Land's Stride\",\n  \"Otherworldly Patron\",\n  \"Pact Magic\",\n  \"Potent Spellcasting\",\n  \"Timeless Body\",\n  \"Unarmored Defense\",\n  \"Circle Spells\",\n  \"Divine Strike\",\n  \"Evasion\",\n  \"Channel Divinity\",\n  \"Expanded Spell List\",\n  \"Oath Spells\",\n  \"Psionic Power\",\n  \"Psychic Blades\",\n  \"Spellcasting\",\n  \"Primal Companion\",\n  \"Domain Spells\",\n  \"Bonus Cantrip\",\n  \"Bonus Cantrips\",\n  \"Bonus Proficiencies\",\n  \"Bonus Proficiency\",\n  \"Extra Attack\",\n  \"Tool Proficiency\",\n];\n\nasync function buildBase(data) {\n  let result = foundry.utils.duplicate(CLASS_TEMPLATE);\n  const updateExisting = game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\");\n\n  result.name = data.name;\n  const tableDescription = await generateTable(data.name, data.description, updateExisting);\n  result.system.description.value += `${tableDescription}\\n\\n`;\n\n  result.flags.ddbimporter = {\n    id: data.id,\n    data: data,\n    version: CONFIG.DDBI.version,\n  };\n\n  if (data.moreDetailsUrl) {\n    result.flags.ddbimporter['moreDetailsUrl'] = data.moreDetailsUrl;\n  }\n\n  result.system.source = DDBHelper.parseSource(data);\n\n  return result;\n}\n\nexport async function generateFeatureAdvancements(klass, compendiumClassFeatures, ignoreIds = []) {\n  logger.debug(`Parsing ${klass.name} features for advancement`);\n  const compendiumLabel = CompendiumHelper.getCompendiumLabel(\"features\");\n\n  let advancements = [];\n  klass.classFeatures\n    .filter((feature) => !ignoreIds.includes(feature.id))\n    .forEach((feature) => {\n      const featureMatch = compendiumClassFeatures.find((match) => {\n        const matchName = foundry.utils.hasProperty(match, \"flags.ddbimporter.featureName\")\n          ? foundry.utils.getProperty(match, \"flags.ddbimporter.featureName\").trim().toLowerCase()\n          : match.name.trim().toLowerCase();\n        return feature.name.trim().toLowerCase() == matchName\n          && foundry.utils.hasProperty(match, \"flags.ddbimporter\")\n          && (match.flags.ddbimporter.class == klass.name\n            || match.flags.ddbimporter.parentClassId == klass.id\n            || match.flags.ddbimporter.classId == klass.id);\n      });\n\n      if (featureMatch) {\n        const levelAdvancement = advancements.findIndex((advancement) => advancement.level === feature.requiredLevel);\n\n        if (levelAdvancement == -1) {\n          const advancement = {\n            _id: foundry.utils.randomID(),\n            type: \"ItemGrant\",\n            configuration: {\n              items: [\n                `Compendium.${compendiumLabel}.${featureMatch._id}`\n              ]\n            },\n            value: {},\n            level: feature.requiredLevel,\n            title: \"Features\",\n            icon: \"\",\n            classRestriction: \"\"\n          };\n          advancements.push(advancement);\n        } else {\n          advancements[levelAdvancement].configuration.items.push(`Compendium.${compendiumLabel}.${featureMatch._id}`);\n        }\n      }\n    });\n\n  return advancements;\n}\n\nexport async function buildClassFeatures(klass, compendiumClassFeatures, ignoreIds = []) {\n  logger.debug(`Parsing ${klass.name} features`);\n  let description = \"<h1>Class Features</h1>\\n\\n\";\n  let classFeatures = [];\n\n  const compendiumLabel = CompendiumHelper.getCompendiumLabel(\"features\");\n\n  klass.classFeatures.forEach((feature) => {\n    const classFeaturesAdded = classFeatures.some((f) => f === feature.name);\n\n    // sort by level?\n    if (!classFeaturesAdded && !ignoreIds.includes(feature.id)) {\n      const featureMatch = compendiumClassFeatures.find((match) => {\n        const matchName = foundry.utils.hasProperty(match, \"flags.ddbimporter.featureName\")\n          ? foundry.utils.getProperty(match, \"flags.ddbimporter.featureName\").trim().toLowerCase()\n          : match.name.trim().toLowerCase();\n        return feature.name.trim().toLowerCase() == matchName\n          && foundry.utils.hasProperty(match, \"flags.ddbimporter\")\n          && (match.flags.ddbimporter.class == klass.name\n            || match.flags.ddbimporter.parentClassId == klass.id\n            || match.flags.ddbimporter.classId == klass.id);\n      });\n      const title = (featureMatch)\n        ? `<p><b>@Compendium[${compendiumLabel}.${featureMatch._id}]{${feature.name}}</b></p>`\n        : `<p><b>${feature.name}</b></p>`;\n\n      // eslint-disable-next-line require-atomic-updates\n      description += `${title}\\n${feature.description}\\n\\n`;\n      classFeatures.push(feature.name);\n    }\n  });\n\n  return description;\n}\n\nexport async function getClassFeature(feature, klass, subClassName = \"\", className = undefined) {\n  logger.debug(\"Class feature build started\");\n\n  let result = await buildBase(feature);\n  result.flags.obsidian.source.text = klass.name;\n\n  result.name = feature.name;\n  result.flags.ddbimporter['featureId'] = feature.id;\n  result.flags.ddbimporter['featureName'] = feature.name;\n  result.flags.ddbimporter['requiredLevel'] = feature.requiredLevel;\n  result.flags.ddbimporter['prerequisite'] = feature.prerequisite;\n  result.flags.ddbimporter['class'] = className ?? klass.name;\n  result.flags.ddbimporter['classId'] = klass.id;\n  result.flags.ddbimporter['subClass'] = subClassName;\n  result.flags.ddbimporter['parentClassId'] = klass.parentClassId;\n  const requiredLevel = feature.requiredLevel ? ` ${feature.requiredLevel}` : \"\";\n  result.system.requirements = `${klass.name}${requiredLevel}`;\n\n  result.system.description.value = parseTags(result.system.description.value);\n\n  result.system.type = {\n    value: \"class\",\n  };\n\n  return result;\n}\n\nexport async function getClassImages(klass, result) {\n  let avatarUrl;\n  let largeAvatarUrl;\n  let portraitAvatarUrl;\n\n  const targetDirectory = game.settings.get(SETTINGS.MODULE_ID, \"other-image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n  const useDeepPaths = game.settings.get(SETTINGS.MODULE_ID, \"use-deep-file-paths\");\n  const name = klass.fullName ?? klass.name;\n\n  if (klass.portraitAvatarUrl) {\n    const imageNamePrefix = useDeepPaths ? \"\" : \"class-portrait\";\n    const pathPostfix = useDeepPaths ? `/class/portrait` : \"\";\n    const downloadOptions = { type: \"class-portrait\", name, targetDirectory, imageNamePrefix, pathPostfix };\n    portraitAvatarUrl = await FileHelper.getImagePath(klass.portraitAvatarUrl, downloadOptions);\n    result.img = portraitAvatarUrl;\n    result.flags.ddbimporter['portraitAvatarUrl'] = klass.portraitAvatarUrl;\n  }\n\n  if (klass.avatarUrl) {\n    const imageNamePrefix = useDeepPaths ? \"\" : \"class-avatar\";\n    const pathPostfix = useDeepPaths ? `/class/avatar` : \"\";\n    const downloadOptions = { type: \"class-avatar\", name, targetDirectory, imageNamePrefix, pathPostfix };\n    avatarUrl = await FileHelper.getImagePath(klass.avatarUrl, downloadOptions);\n    result.flags.ddbimporter['avatarUrl'] = klass.avatarUrl;\n    if (!result.img) {\n      result.img = avatarUrl;\n    }\n  }\n\n  if (klass.largeAvatarUrl) {\n    const imageNamePrefix = useDeepPaths ? \"\" : \"class-large\";\n    const pathPostfix = useDeepPaths ? `/class/large` : \"\";\n    const downloadOptions = { type: \"class-large\", name, targetDirectory, imageNamePrefix, pathPostfix };\n    largeAvatarUrl = await FileHelper.getImagePath(klass.largeAvatarUrl, downloadOptions);\n    // eslint-disable-next-line require-atomic-updates\n    result.flags.ddbimporter['largeAvatarUrl'] = klass.largeAvatarUrl;\n    if (!result.img) {\n      // eslint-disable-next-line require-atomic-updates\n      result.img = largeAvatarUrl;\n    }\n  }\n\n  if (avatarUrl || largeAvatarUrl) {\n    const image = (avatarUrl)\n      ? `<img class=\"ddb-class-image\" src=\"${avatarUrl}\">\\n\\n`\n      : `<img class=\"ddb-class-image\" src=\"${largeAvatarUrl}\">\\n\\n`;\n\n    foundry.utils.setProperty(result, \"flags.ddbimporter.image\", image);\n  } else {\n    foundry.utils.setProperty(result, \"flags.ddbimporter.image\", \"\");\n  }\n\n}\n\nexport async function buildBaseClass(klass) {\n  let result = await buildBase(klass);\n  logger.debug(`Parsing ${klass.name}`);\n  result.flags.obsidian.source.text = klass.name;\n  result.type = \"class\";\n  result.system.identifier = utils.referenceNameString(klass.name).toLowerCase();\n  result.system.advancement = [];\n\n  await getClassImages(klass, result);\n  // eslint-disable-next-line require-atomic-updates\n  result.system.description.value += foundry.utils.getProperty(result, \"flags.ddbimporter.image\");\n\n  result.flags.ddbimporter['parentClassId'] = klass.parentClassId;\n  result.flags.ddbimporter['class'] = klass.name;\n  result.flags.ddbimporter['hitDice'] = klass.hitDice;\n  result.flags.ddbimporter['spellCastingAbilityId'] = klass.spellCastingAbilityId;\n  result.flags.ddbimporter['canCastSpells'] = klass.canCastSpells;\n\n  // setup data\n  result.system.levels = 1;\n  result.system.hitDice = `d${klass.hitDice}`;\n\n  let spellcasting = {};\n  if (klass.canCastSpells) {\n    const spellProgression = DICTIONARY.spell.progression.find((cls) => cls.name == klass.name);\n    const spellCastingAbility = klass.spellCastingAbilityId\n      ? DICTIONARY.character.abilities.find((a) => a.id == klass.spellCastingAbilityId).value\n      : null;\n    if (spellProgression) {\n      spellcasting = {\n        progression: spellProgression.value,\n        ability: spellCastingAbility,\n      };\n    }\n  }\n  // eslint-disable-next-line require-atomic-updates\n  result.system.spellcasting = spellcasting;\n\n  // this can be used with the add class response\n  // const classSkillSubType = `choose-a-${klass.name.toLowerCase()}-skill`;\n  // const skillCount = .filter((mod) => mod.subType === classSkillSubType && mod.type === \"proficiency\"));\n\n  const proficiencyOption = klass.classFeatures.find((feature) =>\n    feature.name === \"Proficiencies\"\n    && feature.requiredLevel === 1\n  );\n\n  const dom = utils.htmlToDocumentFragment(proficiencyOption.description);\n\n  // Choose any three\n  // Skills: Choose two from Arcana, Animal Handling, Insight, Medicine, Nature, Perception, Religion, and Survival\n  const skillText = dom.textContent.toLowerCase().split(\"skills:\").pop().split(\"\\n\")[0].split(\"The\")[0].split(\".\")[0].trim();\n  const allSkillRegex = /Skills: Choose any (\\w+)(.*)($|\\.$|\\w+:)/im;\n  const allMatch = dom.textContent.match(allSkillRegex);\n  const skillRegex = /choose (\\w+)(?:\\sskills)* from (.*)($|The|\\.$|\\w+:)/im;\n  const skillMatch = skillText.match(skillRegex);\n\n  if (allMatch) {\n    const skills = DICTIONARY.character.skills.map((skill) => skill.name);\n    const numberSkills = DICTIONARY.numbers.find((num) => allMatch[1].toLowerCase() === num.natural);\n    // eslint-disable-next-line require-atomic-updates\n    result.system.skills = {\n      number: numberSkills ? numberSkills.num : 2,\n      choices: skills,\n      value: [],\n    };\n  } else if (skillMatch) {\n    const skillNames = skillMatch[2].replace('and', ',').split(',').map((skill) => skill.trim());\n    const skills = skillNames.filter((name) => DICTIONARY.character.skills.some((skill) => skill.label.toLowerCase() === name.toLowerCase()))\n      .map((name) => {\n        const dictSkill = DICTIONARY.character.skills.find((skill) => skill.label.toLowerCase() === name.toLowerCase());\n        return dictSkill.name;\n      });\n    const numberSkills = DICTIONARY.numbers.find((num) => skillMatch[1].toLowerCase() === num.natural);\n    // eslint-disable-next-line require-atomic-updates\n    result.system.skills = {\n      number: numberSkills ? numberSkills.num : 2,\n      choices: skills,\n      value: [],\n    };\n  }\n\n  // get class saves\n  const savingText = dom.textContent.toLowerCase().split(\"saving throws:\").pop().split(\"\\n\")[0].split(\"The\")[0].split(\".\")[0].split(\"skills:\")[0].trim();\n  const saveRegex = /(.*)(?:$|The|\\.$|\\w+:)/im;\n  const saveMatch = savingText.match(saveRegex);\n\n  if (saveMatch) {\n    const saveNames = saveMatch[1].replace('and', ',').split(',').map((ab) => ab.trim());\n    const saves = saveNames\n      .filter((name) => DICTIONARY.character.abilities.some((ab) => ab.long.toLowerCase() === name.toLowerCase()))\n      .map((name) => {\n        const dictAbility = DICTIONARY.character.abilities.find((ab) => ab.long.toLowerCase() === name.toLowerCase());\n        return dictAbility.value;\n      });\n    // eslint-disable-next-line require-atomic-updates\n    result.system.saves = saves;\n  }\n\n  // \"moreDetailsUrl\": \"/characters/classes/rogue\",\n\n  if (klass.equipmentDescription) {\n    // eslint-disable-next-line require-atomic-updates\n    result.system.description.value += `<p><b>Starting Equipment</b></p>\\n${klass.equipmentDescription}\\n\\n`;\n  }\n\n  if (klass.wealthDice) {\n    const diceString = klass.wealthDice.diceString;\n    const diceMultiplier = klass.wealthDice.diceMultiplier;\n    result.system.wealth = diceMultiplier && diceString\n      ? `${diceString}*${diceMultiplier}`\n      : \"\";\n  }\n\n  return result;\n}\n","import logger from \"../../logger.js\";\nimport { buildBaseClass, getClassFeature, NO_TRAITS, buildClassFeatures, generateFeatureAdvancements } from \"./shared.js\";\nimport { parseTags } from \"../../lib/DDBReferenceLinker.js\";\nimport DDBItemImporter from \"../../lib/DDBItemImporter.js\";\nimport CompendiumHelper from \"../../lib/CompendiumHelper.js\";\nimport DDBMuncher from \"../../apps/DDBMuncher.js\";\nimport { DDBCompendiumFolders } from \"../../lib/DDBCompendiumFolders.js\";\nimport SETTINGS from \"../../settings.js\";\n\nfunction getHPAdvancement(klass, character) {\n  // const value = \"value\": {\n  //   \"1\": \"max\",\n  //   \"2\": \"avg\"\n  // },\n  const value = {};\n  if (klass) {\n    const rolledHP = foundry.utils.getProperty(character, \"flags.ddbimporter.rolledHP\") ?? false;\n    const startingClass = foundry.utils.getProperty(klass, \"flags.ddbimporter.isStartingClass\") === true;\n    const useMaxHP = game.settings.get(\"ddb-importer\", \"character-update-policy-use-hp-max-for-rolled-hp\");\n    if (rolledHP && !useMaxHP) {\n      const baseHP = foundry.utils.getProperty(character, \"flags.ddbimporter.baseHitPoints\");\n      const totalLevels = foundry.utils.getProperty(character, \"flags.ddbimporter.dndbeyond.totalLevels\");\n      const hpPerLevel = Math.floor(baseHP / totalLevels);\n      const leftOvers = Math.floor(baseHP % totalLevels);\n\n      for (let i = 1; i <= klass.system.levels; i++) {\n        value[`${i}`] = i === 1 && startingClass ? (hpPerLevel + leftOvers) : hpPerLevel;\n      }\n    } else {\n      for (let i = 1; i <= klass.system.levels; i++) {\n        value[`${i}`] = i === 1 && startingClass ? \"max\" : \"avg\";\n      }\n    };\n  }\n  return {\n    _id: foundry.utils.randomID(),\n    type: \"HitPoints\",\n    configuration: {},\n    value,\n    title: \"\",\n    icon: \"\",\n    classRestriction: \"\",\n  };\n}\n\nasync function addSRDAdvancements(advancements, klass) {\n  for (const packId of SETTINGS.FOUNDRY_COMPENDIUM_MAP[\"classes\"]) {\n    const pack = CompendiumHelper.getCompendium(packId, false);\n    if (!pack) continue;\n    await pack.getIndex();\n    const klassMatch = pack.index.find((k) => k.name === klass.name && k.type === \"class\");\n    if (!klassMatch) continue;\n    const srdKlass = await pack.getDocument(klassMatch._id);\n    const scaleAdvancements = srdKlass.system.advancement.filter((srdA) =>\n      srdA.type === \"ScaleValue\"\n      && !advancements.some((ddbA) => ddbA.configuration.identifier === srdA.configuration.identifier)\n    ).map((advancement) => {\n      return advancement.toObject();\n    });\n    advancements.push(...scaleAdvancements);\n    return advancements;\n  }\n\n  return advancements;\n}\n\nasync function _getSRDEquipment(klass) {\n  for (const packId of SETTINGS.FOUNDRY_COMPENDIUM_MAP[\"classes\"]) {\n    const pack = CompendiumHelper.getCompendium(packId, false);\n    if (!pack) continue;\n    await pack.getIndex();\n    const klassMatch = pack.index.find((k) => k.name === klass.name && k.type === \"class\");\n    if (!klassMatch) continue;\n    const srdKlass = await pack.getDocument(klassMatch._id);\n    return foundry.utils.duplicate(srdKlass.system.startingEquipment);\n  }\n  return [];\n}\n\nasync function buildClass(klass, compendiumClassFeatures) {\n  let result = await buildBaseClass(klass);\n  result.system.description.value += await buildClassFeatures(klass, compendiumClassFeatures);\n  result.system.description.value = parseTags(result.system.description.value);\n  result.system.advancement.push(getHPAdvancement(), ...(await generateFeatureAdvancements(klass, compendiumClassFeatures)));\n  result.system.advancement = await addSRDAdvancements(result.system.advancement, result);\n  result.system.startingEquipment = await _getSRDEquipment(result);\n  return result;\n}\n\nexport async function getClasses(data) {\n  let results = [];\n  logger.debug(\"get clases started\", { data });\n  const updateBool = game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\");\n\n  let klasses = [];\n  let classFeatures = [];\n\n  const compendiumFolders = new DDBCompendiumFolders(\"features\");\n  DDBMuncher.munchNote(`Checking compendium folders..`, true);\n  await compendiumFolders.loadCompendium(\"features\");\n  DDBMuncher.munchNote(\"\", true);\n\n  for (const klass of data) {\n    logger.debug(`${klass.name} feature parsing started...`, { klass });\n    for (const feature of klass.classFeatures.sort((a, b) => a.requiredLevel - b.requiredLevel)) {\n      const existingFeature = classFeatures.some((f) =>\n        f.flags.ddbimporter.featureName === feature.name\n        && f.flags.ddbimporter.classId === klass.id\n      );\n      logger.debug(`${feature.name} class feature starting...`, { existingFeature, feature });\n      if (!NO_TRAITS.includes(feature.name) && !existingFeature) {\n        const parsedFeature = await getClassFeature(feature, klass);\n        classFeatures.push(parsedFeature);\n        results.push({ class: klass.name, subClass: \"\", feature: feature.name });\n      }\n    }\n  }\n\n  const featureHandlerOptions = {\n    chrisPremades: true,\n    deleteBeforeUpdate: false,\n    removeSRDDuplicates: false,\n    filterDuplicates: false,\n    matchFlags: [\"featureId\"],\n    useCompendiumFolders: true,\n  };\n\n  logger.debug(`Creating class features`, {\n    classFeatures,\n    featureHandlerOptions,\n    updateBool\n  });\n  const featureHandler = await DDBItemImporter.buildHandler(\"features\", classFeatures, updateBool, featureHandlerOptions);\n  const firstPassFeatures = await featureHandler.compendiumIndex.filter((i) =>\n    featureHandler.documents.some((orig) => i.name === orig.name)\n  );\n  let compendiumClassFeatures = [];\n\n  for (const f of firstPassFeatures) {\n    const feature = await featureHandler.compendium.getDocument(f._id);\n    compendiumClassFeatures.push(feature.toJSON());\n  }\n\n  for (const klass of data) {\n    logger.debug(`${klass.name} class parsing started...`);\n    const builtClass = await buildClass(klass, compendiumClassFeatures);\n    klasses.push(builtClass);\n  }\n\n  logger.debug(\"Class build finished\", klasses);\n  await DDBItemImporter.buildHandler(\"classes\", klasses, updateBool, { useCompendiumFolders: true });\n\n  return results;\n}\n","import logger from \"../../logger.js\";\nimport { parseTags } from \"../../lib/DDBReferenceLinker.js\";\nimport { buildBaseClass, getClassFeature, NO_TRAITS, buildClassFeatures, generateFeatureAdvancements, getClassImages } from \"./shared.js\";\nimport DDBMuncher from \"../../apps/DDBMuncher.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBItemImporter from \"../../lib/DDBItemImporter.js\";\nimport { DDBCompendiumFolders } from \"../../lib/DDBCompendiumFolders.js\";\n// import { buildClassFeatures } from \"../../parser/classes/index.js\";\n\nasync function buildSubClassBase(klass, subClass) {\n  delete klass['_id'];\n  await getClassImages(subClass, klass);\n\n  // eslint-disable-next-line require-atomic-updates\n  klass.flags.ddbimporter['parentClassId'] = subClass.parentClassId;\n  // eslint-disable-next-line require-atomic-updates\n  klass.flags.ddbimporter['spellCastingAbilityId'] = subClass.spellCastingAbilityId;\n  // eslint-disable-next-line require-atomic-updates\n  klass.flags.ddbimporter['canCastSpells'] = subClass.canCastSpells;\n  // eslint-disable-next-line require-atomic-updates\n  klass.flags.ddbimporter['moreDetailsUrl'] = subClass.moreDetailsUrl;\n\n  const image = foundry.utils.getProperty(klass, \"flags.ddbimporter.image\");\n  if (image && image !== \"\") {\n    const imageMatch = /$<img class=\"ddb-class-image\"(.*)$/;\n    klass.system.description.value.replace(imageMatch, image);\n  }\n\n  klass.system.classIdentifier = utils.referenceNameString(klass.name).toLowerCase();\n  klass.system.identifier = utils.referenceNameString(subClass.name).toLowerCase();\n  klass.type = \"subclass\";\n  klass.name = subClass.name;\n\n  // eslint-disable-next-line require-atomic-updates\n  klass.system.description.value += `<h3>${subClass.name}</h3>\\n${subClass.description}\\n\\n`;\n\n  // spell caster now?\n  // if canCastSpells but now canCastSpells then set to third\n  if (klass.system.spellcasting === \"\" && subClass.canCastSpells) {\n    // eslint-disable-next-line require-atomic-updates\n    klass.system.spellcasting = \"third\";\n  }\n\n  return klass;\n\n}\n\nasync function buildSubClass(klass, subclass, compendiumSubClassFeatures) {\n  let baseClass = await buildBaseClass(klass.flags.ddbimporter.data);\n  let result = await buildSubClassBase(baseClass, subclass);\n  const ignoreIds = klass.flags.ddbimporter.data.classFeatures.map((f) => f.id);\n  result.system.description.value += await buildClassFeatures(subclass, compendiumSubClassFeatures, ignoreIds);\n  result.system.description.value = parseTags(result.system.description.value);\n  result.system.advancement.push(...(await generateFeatureAdvancements(subclass, compendiumSubClassFeatures, ignoreIds)));\n  return result;\n}\n\nexport async function getSubClasses(subClassData, klassData) {\n  if (!klassData || !subClassData) {\n    return [];\n  }\n  logger.debug(\"get subclasses started\");\n  const updateBool = game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\");\n\n  const classHandler = new DDBItemImporter(\"class\", [], { deleteBeforeUpdate: false });\n  await classHandler.init();\n  const classDocs = await classHandler.compendium.getDocuments();\n\n  let subClasses = [];\n  let classFeatures = [];\n  let results = [];\n\n  const featureCompendiumFolders = new DDBCompendiumFolders(\"features\");\n  DDBMuncher.munchNote(`Checking compendium folders..`, true);\n  await featureCompendiumFolders.loadCompendium(\"features\");\n  const subClassCompendiumFolders = new DDBCompendiumFolders(\"subclasses\");\n  await subClassCompendiumFolders.loadCompendium(\"subclasses\");\n  DDBMuncher.munchNote(\"\", true);\n\n\n  for (const subClass of subClassData) {\n    const classMatch = CONFIG.DDB.classConfigurations.find((k) => k.id === subClass.parentClassId);\n    await featureCompendiumFolders.createSubClassFeatureFolder(subClass.name, classMatch.name);\n    logger.debug(`${subClass.name} feature parsing started...`, { subClass, classMatch });\n    const filteredFeatures = subClass.classFeatures\n      .filter((feature) =>\n        !klassData.classFeatures.some((f) =>\n          feature.id === f.id\n        )\n      );\n    for (const feature of filteredFeatures) {\n      const existingFeature = classFeatures.some((f) =>\n        f.name === feature.name\n        && f.flags.ddbimporter.classId === subClass.id\n      );\n      logger.debug(`${feature.name} subclass feature starting...`, { existingFeature, feature });\n      if (!NO_TRAITS.includes(feature.name.trim()) && !existingFeature) {\n        const parsedFeature = await getClassFeature(feature, subClass, subClass.name, classMatch.name);\n        classFeatures.push(parsedFeature);\n        results.push({ class: classMatch.name, subClass: subClass.name, feature: feature.name });\n      }\n    }\n  }\n\n  const featureHandlerOptions = {\n    chrisPremades: true,\n    removeSRDDuplicates: false,\n    filterDuplicates: false,\n    deleteBeforeUpdate: false,\n    matchFlags: [\"featureId\"],\n    useCompendiumFolders: true,\n    indexFilter: {\n      fields: [\n        \"name\",\n        \"flags.ddbimporter.classId\",\n        \"flags.ddbimporter.class\",\n        \"flags.ddbimporter.featureName\",\n        \"flags.ddbimporter.subClass\",\n        \"flags.ddbimporter.parentClassId\"\n      ],\n    },\n  };\n\n  logger.debug(`Creating ${klassData.name} subclass features`, {\n    classFeatures,\n    featureHandlerOptions,\n    updateBool\n  });\n  const featureHandler = await DDBItemImporter.buildHandler(\"features\", classFeatures, updateBool, featureHandlerOptions);\n  await featureHandler.buildIndex(featureHandlerOptions.indexFilter);\n\n  const firstPassFeatures = await featureHandler.compendiumIndex.filter((i) =>\n    featureHandler.documents.some((orig) => i.name === orig.name)\n  );\n  let compendiumClassFeatures = [];\n\n  for (const f of firstPassFeatures) {\n    const feature = await featureHandler.compendium.getDocument(f._id);\n    compendiumClassFeatures.push(feature.toJSON());\n  }\n\n  logger.debug(\"Features fetched for classes\", compendiumClassFeatures);\n\n  for (const subClass of subClassData) {\n    const classMatch = classDocs.find((i) => foundry.utils.getProperty(i, \"flags.ddbimporter.id\") == subClass.parentClassId);\n    const builtClass = await buildSubClass(classMatch, subClass, compendiumClassFeatures);\n    subClasses.push(builtClass);\n  }\n\n  logger.debug(\"Subclass build finished\", subClasses);\n  const subClassOptions = { deleteBeforeUpdate: false, matchFlags: [\"id\"], useCompendiumFolders: true };\n  await DDBItemImporter.buildHandler(\"subclasses\", subClasses, updateBool, subClassOptions);\n\n  return results;\n}\n","import logger from \"../../logger.js\";\n\nimport { getClassFeature, NO_TRAITS } from \"./shared.js\";\nimport DDBItemImporter from \"../../lib/DDBItemImporter.js\";\n\nexport async function getClassOptions(data, className) {\n  logger.debug(\"get options started\");\n  const updateBool = game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\");\n  let results = [];\n\n  let classFeatures = [];\n  const classMatch = CONFIG.DDB.classConfigurations.find((k) => k.name === className);\n\n  const klass = {\n    name: className,\n    id: classMatch.id,\n  };\n\n  for (const feature of data) {\n    const existingFeature = classFeatures.some((f) => f.name === feature.name);\n    logger.debug(`${feature.name} feature starting...`);\n    if (!NO_TRAITS.includes(feature.name.trim()) && !existingFeature) {\n      const parsedFeature = await getClassFeature(feature, klass);\n      foundry.utils.setProperty(parsedFeature, \"flags.ddbimporter.optionalFeature\", true);\n      classFeatures.push(parsedFeature);\n      results.push({ class: className, subClass: \"\", feature: feature.name });\n    }\n  }\n\n  const options = {\n    chrisPremades: true,\n    deleteBeforeUpdate: false,\n    removeSRDDuplicates: false,\n    filterDuplicates: false,\n    matchFlags: [\"featureId\"],\n  };\n  await DDBItemImporter.buildHandler(\"features\", classFeatures, updateBool, options);\n\n  return results;\n}\n","// Main module class\nimport { getClasses } from \"./classes/classes.js\";\nimport DDBMuncher from \"../apps/DDBMuncher.js\";\nimport { getSubClasses } from \"./classes/subclasses.js\";\nimport { getClassOptions } from \"./classes/options.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport DDBCampaigns from \"../lib/DDBCampaigns.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\nimport PatreonHelper from \"../lib/PatreonHelper.js\";\nimport utils from \"../lib/utils.js\";\nimport { createDDBCompendium } from \"../hooks/ready/checkCompendiums.js\";\n\nfunction getSubClassesData(className) {\n  const cobaltCookie = getCobalt();\n  const campaignId = DDBCampaigns.getCampaignId();\n  const parsingApi = DDBProxy.getProxy();\n  const betaKey = PatreonHelper.getPatreonKey();\n  const body = { cobalt: cobaltCookie, campaignId: campaignId, betaKey: betaKey, className: className };\n  const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n  return new Promise((resolve, reject) => {\n    fetch(`${parsingApi}/proxy/subclass`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (debugJson) {\n          FileHelper.download(JSON.stringify(data), `subclass-${className}-raw.json`, \"application/json\");\n        }\n        if (!data.success) {\n          DDBMuncher.munchNote(`Failure: ${data.message}`);\n          reject(data.message);\n        }\n        return data;\n      })\n      .then((data) => resolve(data.data))\n      .catch((error) => reject(error));\n  });\n}\n\nfunction getClassOptionsData(className) {\n  const cobaltCookie = getCobalt();\n  const campaignId = DDBCampaigns.getCampaignId();\n  const parsingApi = DDBProxy.getProxy();\n  const betaKey = PatreonHelper.getPatreonKey();\n  const body = { cobalt: cobaltCookie, campaignId: campaignId, betaKey: betaKey, className: className };\n  const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n  return new Promise((resolve, reject) => {\n    fetch(`${parsingApi}/proxy/v5/classes/options`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (debugJson) {\n          FileHelper.download(JSON.stringify(data), `subclass-${className}-raw.json`, \"application/json\");\n        }\n        if (!data.success) {\n          DDBMuncher.munchNote(`Failure: ${data.message}`);\n          reject(data.message);\n        }\n        return data;\n      })\n      .then((data) => resolve(data.data))\n      .catch((error) => reject(error));\n  });\n}\n\nfunction getClassesData() {\n  const cobaltCookie = getCobalt();\n  const campaignId = DDBCampaigns.getCampaignId();\n  const parsingApi = DDBProxy.getProxy();\n  const betaKey = PatreonHelper.getPatreonKey();\n  const body = { cobalt: cobaltCookie, campaignId: campaignId, betaKey: betaKey };\n  const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n  return new Promise((resolve, reject) => {\n    fetch(`${parsingApi}/proxy/classes`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (debugJson) {\n          FileHelper.download(JSON.stringify(data), `classes-raw.json`, \"application/json\");\n        }\n        if (!data.success) {\n          DDBMuncher.munchNote(`Failure: ${data.message}`);\n          reject(data.message);\n        }\n        return data;\n      })\n      .then((data) => resolve(data.data))\n      .catch((error) => reject(error));\n  });\n}\n\nexport async function parseClasses() {\n\n  const classesCompData = SETTINGS.COMPENDIUMS.find((c) => c.title === \"Classes\");\n  await createDDBCompendium(classesCompData);\n\n  const subClassCompData = SETTINGS.COMPENDIUMS.find((c) => c.title === \"Subclasses\");\n  await createDDBCompendium(subClassCompData);\n\n  const classFeaturesCompData = SETTINGS.COMPENDIUMS.find((c) => c.title === \"Class Features\");\n  await createDDBCompendium(classFeaturesCompData);\n\n  const classData = await getClassesData();\n  const classesResults = await getClasses(classData);\n\n  const classNames = CONFIG.DDB.classConfigurations\n    .filter((c) => !c.name.includes(\"archived\") && !c.name.includes(\"(UA)\"))\n    .map((c) => c.name);\n\n  const subClassResults = [];\n  for (const className of classNames) {\n    const klass = classData.find((c) => c.name === className);\n    const subClassData = await getSubClassesData(className);\n    if (!klass || (subClassData && utils.isArray(subClassData) && subClassData.length > 0)) {\n      const subClassResult = await getSubClasses(subClassData, klass);\n      subClassResults.push(...subClassResult);\n    }\n  }\n\n  const classOptionsResults = [];\n  for (const className of classNames) {\n    const classOptionsData = await getClassOptionsData(className);\n    const classOptionsResult = await getClassOptions(classOptionsData, className);\n    classOptionsResults.push(...classOptionsResult);\n  }\n\n  const results = classesResults.concat(\n    subClassResults.flat(),\n    classOptionsResults.flat()\n    // [],\n  );\n\n  // FileHelper.download(JSON.stringify(results), `classes-icon.json`, \"application/json\");\n  return results;\n}\n\n\n","// Main module class\nimport DDBMuncher from \"../apps/DDBMuncher.js\";\nimport logger from \"../logger.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\nimport PatreonHelper from \"../lib/PatreonHelper.js\";\n\nasync function getFrameData() {\n  const cobaltCookie = getCobalt();\n  const betaKey = PatreonHelper.getPatreonKey();\n  const parsingApi = DDBProxy.getProxy();\n  const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n  const body = {\n    cobalt: cobaltCookie,\n    betaKey: betaKey,\n  };\n\n  return new Promise((resolve, reject) => {\n    fetch(`${parsingApi}/proxy/frames`, {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body), // body data type must match \"Content-Type\" header\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (!data.success) {\n          DDBMuncher.munchNote(`API Failure: ${data.message}`);\n          reject(data.message);\n        }\n        if (debugJson) {\n          FileHelper.download(JSON.stringify(data), `frames-raw.json`, \"application/json\");\n        }\n        return data;\n      })\n      .then((data) => {\n        DDBMuncher.munchNote(`Retrieved ${data.data.length} frames, starting parse...`, true, false);\n        logger.info(`Retrieved ${data.data.length} frames`);\n        resolve(data.data);\n      })\n      .catch((error) => reject(error));\n  });\n}\n\nexport async function parseFrames() {\n  const frames = await getFrameData();\n  logger.debug(\"Importing frames\", frames);\n  const targetDirectory = game.settings.get(SETTINGS.MODULE_ID, \"frame-image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n  const useDeepPaths = game.settings.get(SETTINGS.MODULE_ID, \"use-deep-file-paths\");\n  const imageNamePrefix = useDeepPaths ? \"\" : \"frames\";\n\n  DDBMuncher.munchNote(`Fetching DDB Frames`);\n  frames.forEach(async (frame) => {\n    const options = { type: \"frame\", name: `DDB ${frame.name}`, download: true, targetDirectory, pathPostfix: \"\", imageNamePrefix };\n    await FileHelper.getImagePath(frame.frameAvatarUrl, options);\n  });\n\n  DDBMuncher.munchNote(\"\");\n\n  return frames.length;\n}\n","import logger from \"../logger.js\";\n\nfunction occurrences(string, subString, allowOverlapping) {\n  string += \"\";\n  subString += \"\";\n  if (subString.length <= 0) return (string.length + 1);\n\n  let n = 0,\n    pos = 0,\n    step = allowOverlapping ? 1 : subString.length;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    pos = string.indexOf(subString, pos);\n    if (pos >= 0) {\n      ++n;\n      pos += step;\n    } else break;\n  }\n  return n;\n}\n\nfunction checkBase64(string) {\n  let count = occurrences(JSON.stringify(string), \"base64\");\n\n  return count > 0;\n}\n\nexport function checkScenes() {\n  let fixedScenes = [];\n  let badScenes = [];\n  game.scenes.forEach((scene) => {\n    if (checkBase64(scene.thumb)) {\n      logger.warn(`Scene ${scene.name} has base 64 thumb data - fixing!`);\n      scene.createThumbnail().then((data) => {\n        scene.update({ thumb: data.thumb }, { diff: false });\n        ui.notifications.info(`Regenerated thumbnail image for ${scene.name} background image`);\n      });\n      fixedScenes.push(scene.name);\n    }\n    if (checkBase64(scene.img)) {\n      logger.warn(`Scene ${scene.name} has base 64 Image data!`);\n      ui.notifications.warn(`${scene.name} has a base64 encoded scene image - please fix`);\n      badScenes.push(scene.name);\n    } else if (checkBase64(scene) && !checkBase64(scene.thumb)) {\n      logger.warn(`Scene ${scene.name} has unknown location base 64 data!`);\n      logger.warn(scene);\n      badScenes.push(scene.name);\n    }\n  });\n  if (badScenes.length > 0) logger.warn(\"Please fix the following scenes with base64 data:\", badScenes);\n  return {\n    fixedScenes,\n    badScenes,\n  };\n}\n\nexport function base64Check() {\n  return checkScenes();\n}\n","import logger from \"../../logger.js\";\nimport CompendiumHelper from \"../../lib/CompendiumHelper.js\";\nimport PatreonHelper from \"../../lib/PatreonHelper.js\";\nimport { parseSpells } from \"../spells.js\";\nimport { parseItems } from \"../items.js\";\nimport AdventureMunch from \"./AdventureMunch.js\";\nimport SETTINGS from \"../../settings.js\";\nimport DDBMonsterFactory from \"../../parser/DDBMonsterFactory.js\";\nimport DDBMuncher from \"../../apps/DDBMuncher.js\";\n\nexport default class AdventureMunchHelpers {\n\n  /**\n   * Find an entity by the import key.\n   * @param  {string} type - Entity type to search for\n   * @param  {string} id - Entity Id\n   * @returns {object} - Entity Object Data\n   */\n  static findEntityByImportId(type, id) {\n    return game.data[type].find((item) => item._id === id);\n  }\n\n  /**\n   * Async replace for all matching patterns\n   *\n   * @param  {string} str - Original string to replace values in\n   * @param  {string} regex - regex for matching\n   * @param  {function} asyncFn - async function to run on each match\n   * @returns {string}\n   */\n  static async replaceAsync(str, regex, asyncFn) {\n    const promises = [];\n    str.replace(regex, (match, ...args) => {\n      const promise = asyncFn(match, ...args);\n      promises.push(promise);\n    });\n    const data = await Promise.all(promises);\n    return str.replace(regex, () => data.shift());\n  }\n\n  /**\n   * Returns the difference between object 1 and 2\n   * @param  {object} obj1\n   * @param  {object} obj2\n   * @returns {object}\n   */\n  static diff(obj1, obj2) {\n    let result = {};\n    for (const key in obj1) {\n      if (obj2[key] != obj1[key]) result[key] = obj2[key];\n      // eslint-disable-next-line valid-typeof\n      if (typeof obj2[key] == 'array' && typeof obj1[key] == 'array')\n        result[key] = this.diff(obj1[key], obj2[key]);\n      if (typeof obj2[key] == 'object' && typeof obj1[key] == 'object')\n        result[key] = this.diff(obj1[key], obj2[key]);\n    }\n    return result;\n  }\n\n  /**\n   * Replaces matchAll as it's not yet available in Electron App\n   * @param   {string} regex  RegEx to use\n   * @param   {string} string String to match on\n   * @returns {Array}\n   */\n  static reMatchAll(regexp, string) {\n    const matches = string.match(new RegExp(regexp, \"gm\"));\n    if (matches) {\n      let start = 0;\n      return matches.map((group0) => {\n        const match = group0.match(regexp);\n        match.index = string.indexOf(group0, start);\n        start = match.index;\n        return match;\n      });\n    }\n    return matches;\n  }\n\n  static async loadMissingDocuments(type, docIds) {\n    return new Promise((resolve) => {\n      if (docIds && docIds.length > 0) {\n        switch (type) {\n          case \"item\":\n            logger.debug(`Importing missing ${type}s from DDB`, docIds);\n            AdventureMunch._progressNote(`Importing ${docIds.length} missing ${type}s from DDB`);\n            resolve(parseItems(docIds, false));\n            break;\n          case \"monster\": {\n            try {\n              const tier = PatreonHelper.getPatreonTier();\n              const tiers = PatreonHelper.calculateAccessMatrix(tier);\n              if (tiers.all) {\n                logger.debug(`Importing missing ${type}s from DDB`, docIds);\n                AdventureMunch._progressNote(`Importing ${docIds.length} missing ${type}s from DDB`);\n                const monsterFactory = new DDBMonsterFactory({ munchNote: DDBMuncher.munchNote });\n                resolve(monsterFactory.processIntoCompendium(docIds));\n              } else {\n                logger.warn(`Unable to import missing ${type}s from DDB - link to patreon or use your own proxy`, docIds);\n                ui.notifications.warn(`Unable to import missing ${type}s from DDB - link to patreon or use your own proxy`, { permanent: true });\n                resolve([]);\n              }\n            } catch (err) {\n              if (err instanceof SyntaxError) {\n                ui.notifications.error(\"Error fetching monsters, likely cause outdated ddb-proxy\", { permanent: true });\n              } else {\n                throw err;\n              }\n            }\n            break;\n          }\n          case \"spell\":\n            logger.debug(`Importing missing ${type}s from DDB`);\n            AdventureMunch._progressNote(`Missing spells detected, importing from DDB`);\n            // we actually want all spells, because monsters don't just use spells from a single source\n            resolve(parseSpells(null, false));\n            break;\n          // no default\n        }\n      } else {\n        resolve([]);\n      }\n    });\n  }\n\n  static async getCompendiumIndex(type) {\n    return new Promise((resolve) => {\n      const compendium = CompendiumHelper.getCompendiumType(type);\n      const fields = (type === \"monster\")\n        ? [\"flags.ddbimporter.id\"]\n        : [\"flags.ddbimporter.definitionId\"];\n\n      const compendiumIndex = compendium.getIndex({ fields: fields });\n      resolve(compendiumIndex);\n    });\n  }\n\n  static async checkForMissingDocuments(type, ids) {\n    const index = await AdventureMunchHelpers.getCompendiumIndex(type);\n    // console.warn(`${type} index`, index);\n\n    return new Promise((resolve) => {\n      const missingIds = ids.filter((id) => {\n        switch (type) {\n          case \"monster\":\n            return !index.some((i) => i.flags?.ddbimporter?.id && String(i.flags.ddbimporter.id) == String(id));\n          case \"spell\":\n          case \"item\":\n            return !index.some((i) => i.flags?.ddbimporter?.definitionId && String(i.flags.ddbimporter.definitionId) == String(id));\n          default:\n            return false;\n        }\n      });\n      logger.debug(`${type} missing ids`, missingIds);\n      const missingDocuments = AdventureMunchHelpers.loadMissingDocuments(type, missingIds);\n      logger.debug(`${type} missing`, missingDocuments);\n      resolve(missingDocuments);\n    });\n  }\n\n  /**\n   * Get documents for ids from compendium\n   * @param {string} type compendium type\n   * @param {Array} ids array of ddb ids\n   * @param {boolean} temporary create the items in the world?\n   * @returns {Promise<Array>} array of world actors\n   */\n  static async getDocuments(type, ids, overrides = {}, temporary = false) {\n    const compendium = CompendiumHelper.getCompendiumType(type);\n    const index = await AdventureMunchHelpers.getCompendiumIndex(type);\n    const ddbIds = ids.map((num) => {\n      return String(num);\n    });\n\n    return new Promise((resolve) => {\n      const documents = index\n        .filter((idx) => {\n          switch (type) {\n            case \"monster\":\n              return ddbIds.includes(String(foundry.utils.getProperty(idx, \"flags.ddbimporter.id\")));\n            case \"spell\":\n            case \"item\":\n              return ddbIds.includes(String(foundry.utils.getProperty(idx, \"flags.ddbimporter.definitionId\")));\n            default:\n              return false;\n          }\n        })\n        .map((i) => {\n          switch (type) {\n            case \"monster\":\n              return game.actors.importFromCompendium(compendium, i._id, overrides, { temporary, keepId: true, keepEmbeddedIds: true });\n            case \"spell\":\n            case \"item\":\n              return game.items.importFromCompendium(compendium, i._id, overrides, { temporary, keepId: true, keepEmbeddedIds: true });\n            default:\n              // this should never happen\n              return undefined;\n          }\n\n        });\n      logger.debug(`${type} documents loaded`, documents);\n      resolve(documents);\n    });\n  }\n\n\n  static async linkExistingActorTokens(tokens) {\n    const monsterIndex = await AdventureMunchHelpers.getCompendiumIndex(\"monster\");\n\n    const newTokens = tokens.map((token) => {\n      const monsterHit = monsterIndex.find((monster) =>\n        monster.flags?.ddbimporter?.id && token.flags.ddbActorFlags?.id\n        && monster.flags.ddbimporter.id === token.flags.ddbActorFlags.id);\n      if (monsterHit) {\n        token.flags.compendiumActorId = monsterHit._id;\n      }\n      return token;\n    });\n\n    return newTokens;\n  }\n\n  // check the document for version data and for update info to see if we can replace it\n  static extractDocumentVersionData(newDoc, existingDoc) {\n    const ddbIVersion = game.modules.get(SETTINGS.MODULE_ID).version;\n    if (!existingDoc) existingDoc = {};\n    // do we have versioned metadata?\n    foundry.utils.setProperty(newDoc, \"flags.ddb.versions.importer\", {});\n    if (newDoc?.flags?.ddb?.versions?.ddbMetaData?.lastUpdate) {\n      // check old data, it might not exist\n      const oldDDBMetaDataVersions = existingDoc.flags?.ddb?.versions?.ddbMetaData?.lastUpdate\n        ? existingDoc.flags.ddb.versions.ddbMetaData\n        : {\n          lastUpdate: \"0.0.1\",\n          drawings: \"0.0.1\",\n          notes: \"0.0.1\",\n          tokens: \"0.0.1\",\n          walls: \"0.0.1\",\n          lights: \"0.0.1\",\n          foundry: \"0.8.9\",\n        };\n      const oldDDBImporterVersion = existingDoc?.flags?.ddb?.versions?.ddbImporter\n        ? existingDoc.flags.ddb.versions.ddbImporter\n        : \"2.0.1\";\n      const oldAdventureMuncherVersion = existingDoc?.flags?.ddb?.versions?.adventureMuncher\n        ? existingDoc.flags.ddb.versions.adventureMuncher\n        : \"0.3.0\";\n      const oldVersions = { ddbImporter: oldDDBImporterVersion, ddbMetaData: oldDDBMetaDataVersions, adventureMuncher: oldAdventureMuncherVersion };\n\n      const documentVersions = newDoc.flags.ddb.versions;\n      const documentFoundryVersion = documentVersions[\"ddbMetaData\"][\"foundry\"] !== undefined ? documentVersions[\"ddbMetaData\"][\"foundry\"] : \"0.8.9\";\n      const importerVersionChanged = foundry.utils.isNewerVersion(ddbIVersion, oldVersions[\"ddbImporter\"]);\n      const metaVersionChanged = foundry.utils.isNewerVersion(documentVersions[\"ddbMetaData\"][\"lastUpdate\"], oldVersions[\"ddbMetaData\"][\"lastUpdate\"]);\n      const muncherVersionChanged = foundry.utils.isNewerVersion(documentVersions[\"adventureMuncher\"], oldVersions[\"adventureMuncher\"]);\n      const foundryVersionNewer = foundry.utils.isNewerVersion(documentFoundryVersion, game.version);\n\n      let versionUpdates = {};\n\n      if (metaVersionChanged || muncherVersionChanged || foundryVersionNewer) {\n        versionUpdates.importerVersionChanged = importerVersionChanged;\n        versionUpdates.metaVersionChanged = metaVersionChanged;\n        versionUpdates.muncherVersionChanged = muncherVersionChanged;\n        versionUpdates.foundryVersionNewer = foundryVersionNewer;\n        versionUpdates.drawingVersionChanged = foundry.utils.isNewerVersion(documentVersions[\"ddbMetaData\"][\"drawings\"], oldVersions[\"ddbMetaData\"][\"drawings\"]);\n        versionUpdates.noteVersionChanged = foundry.utils.isNewerVersion(documentVersions[\"ddbMetaData\"][\"notes\"], oldVersions[\"ddbMetaData\"][\"notes\"]);\n        versionUpdates.tokenVersionChanged = foundry.utils.isNewerVersion(documentVersions[\"ddbMetaData\"][\"tokens\"], oldVersions[\"ddbMetaData\"][\"tokens\"]);\n        versionUpdates.wallVersionChanged = foundry.utils.isNewerVersion(documentVersions[\"ddbMetaData\"][\"walls\"], oldVersions[\"ddbMetaData\"][\"walls\"]);\n        versionUpdates.lightVersionChanged = foundry.utils.isNewerVersion(documentVersions[\"ddbMetaData\"][\"lights\"], oldVersions[\"ddbMetaData\"][\"lights\"]);\n      }\n      foundry.utils.setProperty(newDoc, \"flags.ddb.versions.ddbImporter\", ddbIVersion);\n      foundry.utils.setProperty(newDoc, \"flags.ddb.versions.importer\", versionUpdates);\n      foundry.utils.setProperty(newDoc, \"flags.ddb.oldVersions\", oldVersions);\n    }\n    return newDoc;\n  }\n\n  static getImportType(type) {\n    const typeName = type[0].toUpperCase() + type.slice(1);\n    let importType = typeName;\n\n    switch (type) {\n      case \"journal\":\n        importType = \"JournalEntry\";\n        break;\n      case \"table\":\n        importType = \"RollTable\";\n        break;\n      default:\n        importType = typeName;\n        break;\n    }\n\n    return importType;\n  }\n\n  /**\n   * Does the folder exist in the zip archive?\n   * @param {String} folder folder name\n   * @param {Zip} zip\n   * @returns {Boolean}\n   */\n  static folderExists(folder, zip) {\n    const files = Object.values(zip.files).filter((file) => {\n      return file.dir && file.name.toLowerCase().includes(folder);\n    });\n\n    return files.length > 0;\n  }\n\n  /**\n   * Get the files in the zip archive at the specified path\n   * @param {String} folder a folder path to start from\n   * @param {Zip} zip\n   * @returns {Array} list of files in zip\n   */\n  static getFiles(folder, zip) {\n    const files = Object.values(zip.files).filter((file) => {\n      return !file.dir && file.name.split('.').pop() === 'json' && file.name.includes(`${folder}/`);\n    });\n\n    return files;\n  }\n\n\n}\n","import AdventureMunchHelpers from \"./AdventureMunchHelpers.js\";\nimport logger from \"../../logger.js\";\nimport FileHelper from \"../../lib/FileHelper.js\";\nimport { generateAdventureConfig } from \"../adventure.js\";\nimport { DirectoryPicker } from \"../../lib/DirectoryPicker.js\";\nimport SETTINGS from \"../../settings.js\";\nimport CompendiumHelper from \"../../lib/CompendiumHelper.js\";\nimport utils from \"../../lib/utils.js\";\nimport { createDDBCompendium } from \"../../hooks/ready/checkCompendiums.js\";\nimport { parseTags } from \"../../lib/DDBReferenceLinker.js\";\n\nexport default class AdventureMunch extends FormApplication {\n\n  static COMPENDIUM_MAP = {\n    \"spells\": \"spells\",\n    \"magicitems\": \"items\",\n    \"weapons\": \"items\",\n    \"armor\": \"items\",\n    \"adventuring-gear\": \"items\",\n    \"monsters\": \"monsters\",\n    \"vehicles\": \"vehicles\",\n  };\n\n  static DDB_MAP = {\n    \"spells\": \"spells\",\n    \"magicitems\": \"magic-items\",\n    \"weapons\": \"equipment\",\n    \"armor\": \"equipment\",\n    \"adventuring-gear\": \"equipment\",\n    \"monsters\": \"monsters\",\n    \"vehicles\": \"vehicles\",\n  };\n\n\n  /** @override */\n  constructor(object = {}, options = {}) {\n    super(object, options);\n    this._itemsToRevisit = [];\n    const importPathData = game.settings.get(SETTINGS.MODULE_ID, \"adventure-import-path\");\n    this._importPathData = DirectoryPicker.parse(importPathData);\n    this.adventure = null;\n    this.folders = null;\n    this.raw = {\n      scene: [],\n      journal: [],\n      actor: [],\n      item: [],\n      table: [],\n      playlist: [],\n      macro: [],\n      folder: [],\n    };\n    this.temporary = {\n      scenes: [],\n      journals: [],\n      actors: [],\n      items: [],\n      tables: [],\n      playlists: [],\n      macros: [],\n      folders: [],\n    };\n    this.remove = {\n      folderIds: new Set(),\n    };\n    this.zip = null;\n    this.allMonsters = false;\n    this.journalWorldActors = false;\n    this.importFilename = null;\n    this.importToAdventureCompendium = false;\n    this.lookups = {\n      folders: {},\n      compendiumFolders: {},\n      import: {},\n      actors: {},\n      sceneTokens: {},\n      adventureConfig: {},\n    };\n\n    this.addToCompendiums = false;\n    this.compendiums = {\n      journal: null,\n      table: null,\n    };\n    this._compendiumItemsToRevisit = [];\n  }\n\n  /** @override */\n  static get defaultOptions() {\n    this.pattern = /(@[a-z]*)(\\[)([a-z0-9]*|[a-z0-9.]*)(\\])(\\{)(.*?)(\\})/gim;\n    this.altpattern\n      = /((data-entity)=\\\\?[\"']?([a-zA-Z]*)\\\\?[\"']?|(data-pack)=\\\\?[\"']?([[\\S.]*)\\\\?[\"']?) data-id=\\\\?[\"']?([a-zA-Z0-9]*)\\\\?[\"']?.*?>(.*?)<\\/a>/gim;\n\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      id: \"ddb-adventure-import\",\n      classes: [\"ddb-adventure-import\"],\n      title: \"Adventure Munch\",\n      template: \"modules/ddb-importer/handlebars/adventure/import.hbs\",\n      width: 350,\n    });\n  }\n\n  findCompendiumEntityByImportId(type, id) {\n    return this.compendiums[type].index.find((item) => item._id === id);\n  }\n\n  replaceUUIDSForCompendium(text) {\n    const journalRegex = /@UUID\\[JournalEntry/g;\n    text = text.replaceAll(journalRegex, `@UUID[Compendium.${this.compendiums.journal.metadata.id}.JournalEntry`);\n    const tableRegex = /@UUID\\[RollTable/g;\n    text = text.replaceAll(tableRegex, `@UUID[Compendium.${this.compendiums.table.metadata.id}.RollTable`);\n    return text;\n  }\n\n  /**\n   * @param  {String} path\n   * @param  {Boolean} misc Miscellaneous import type/location?\n   * @returns {Object} An object detailing various file path\n   */\n  getImportFilePaths(path, misc) {\n    const useWebP = game.settings.get(SETTINGS.MODULE_ID, \"use-webp\") && !path.endsWith(\"svg\") && !path.endsWith(\"pdf\");\n    const adventurePath = this.adventure.name.replace(/[^a-z0-9]/gi, \"_\");\n    const targetPath = path.replace(/[\\\\/][^\\\\/]+$/, \"\");\n    const baseFilename = path.replace(/^.*[\\\\/]/, \"\").replace(/\\?(.*)/, \"\");\n    const filename\n      = useWebP && !baseFilename.endsWith(\".webp\")\n        ? `${FileHelper.removeFileExtension(baseFilename)}.webp`\n        : baseFilename;\n    const baseUploadPath = misc\n      ? game.settings.get(SETTINGS.MODULE_ID, \"adventure-misc-path\")\n      : game.settings.get(SETTINGS.MODULE_ID, \"adventure-upload-path\");\n    const parsedBaseUploadPath = DirectoryPicker.parse(baseUploadPath);\n    const uploadPath = misc\n      ? `${parsedBaseUploadPath.current}/${targetPath}`\n      : `${parsedBaseUploadPath.current}/${adventurePath}/${targetPath}`;\n    const fullUploadPath = misc\n      ? `${baseUploadPath}/${targetPath}`\n      : `${baseUploadPath}/${adventurePath}/${targetPath}`;\n    const pathKey = `${fullUploadPath}/${filename}`;\n    const returnFilePath = misc ? `${targetPath}/${filename}` : `${adventurePath}/${targetPath}/${filename}`;\n    return {\n      pathKey,\n      adventurePath,\n      targetPath,\n      filename,\n      baseUploadPath,\n      parsedBaseUploadPath,\n      uploadPath,\n      returnFilePath,\n      baseFilename,\n      fullUploadPath,\n      forcingWebp: useWebP && baseFilename !== filename,\n    };\n  }\n\n  /**\n   * Import a non-image file\n   * @param {String} path\n   * @param {Blob} content\n   * @param {String} mimeType\n   * @param {Boolean} misc Miscellaneous import type/location?\n   * @returns {Promise<String>} file path\n   */\n  async importRawFile(path, content, mimeType, misc) {\n    try {\n      if (path[0] === \"*\") {\n        // this file was flagged as core data, just replace name.\n        return path.replace(/\\*/g, \"\");\n      } else if (path.startsWith(\"icons/\") || path.startsWith(\"systems/dnd5e/icons/\") || path.startsWith(\"ddb://\")) {\n        // these are core icons, ignore\n        // or are ddb:// paths that will be replaced by muncher\n        return path;\n      } else {\n        const paths = this.getImportFilePaths(path, misc);\n\n        if (paths.fullUploadPath && !CONFIG.DDBI.KNOWN.CHECKED_DIRS.has(paths.fullUploadPath)) {\n          logger.debug(`Checking dir path ${paths.uploadPath}`, paths);\n          await DirectoryPicker.verifyPath(paths.parsedBaseUploadPath, `${paths.uploadPath}`);\n          await FileHelper.generateCurrentFiles(paths.fullUploadPath);\n          CONFIG.DDBI.KNOWN.CHECKED_DIRS.add(paths.fullUploadPath);\n        }\n\n        if (!CONFIG.DDBI.KNOWN.FILES.has(paths.pathKey)) {\n          logger.debug(`Importing raw file from ${path}`, paths);\n          const fileData = new File([content], paths.filename, { type: mimeType });\n          const targetPath = (await DirectoryPicker.uploadToPath(paths.fullUploadPath, fileData))?.path;\n          CONFIG.DDBI.KNOWN.FILES.add(paths.pathKey);\n          CONFIG.DDBI.KNOWN.LOOKUPS.set(`${paths.pathKey}`, targetPath);\n        } else {\n          logger.debug(`File already imported ${path}`);\n        }\n\n        return `${CONFIG.DDBI.KNOWN.LOOKUPS.get(paths.pathKey)}`;\n      }\n    } catch (err) {\n      logger.error(`Error importing image file ${path} : ${err.message}`, { err });\n    }\n\n    return path;\n  }\n\n  /**\n   * Imports binary file, by extracting from zip file and uploading to path.\n   *\n   * @param  {String} path - Path to image within zip file\n   * @returns {Promise<String>} - Path to file within VTT\n   */\n  async importImage(path, misc = false) {\n    try {\n      if (path[0] === \"*\") {\n        // this file was flagged as core data, just replace name.\n        return path.replace(/\\*/g, \"\");\n      } else if (path.startsWith(\"icons/\") || path.startsWith(\"systems/dnd5e/icons/\") || path.startsWith(\"ddb://\")) {\n        // these are core icons, ignore\n        // or are ddb:// paths that will be replaced by muncher\n        return path;\n      } else {\n        const paths = this.getImportFilePaths(path, misc);\n\n        if (paths.fullUploadPath && !CONFIG.DDBI.KNOWN.CHECKED_DIRS.has(paths.fullUploadPath)) {\n          logger.debug(`Checking dir path ${paths.uploadPath}`, paths);\n          await DirectoryPicker.verifyPath(paths.parsedBaseUploadPath, `${paths.uploadPath}`);\n          await FileHelper.generateCurrentFiles(paths.fullUploadPath);\n          CONFIG.DDBI.KNOWN.CHECKED_DIRS.add(paths.fullUploadPath);\n        }\n\n        if (!CONFIG.DDBI.KNOWN.FILES.has(paths.pathKey)) {\n          logger.debug(`Importing image from ${path}`, paths);\n          const img = await this.zip.file(path).async(\"blob\");\n          const targetPath = await FileHelper.uploadImage(img, paths.fullUploadPath, paths.filename, paths.forcingWebp);\n          CONFIG.DDBI.KNOWN.FILES.add(paths.pathKey);\n          CONFIG.DDBI.KNOWN.LOOKUPS.set(paths.pathKey, targetPath);\n        } else {\n          logger.debug(`File already imported ${path}`);\n        }\n        const returnKey = `${paths.fullUploadPath}/${paths.filename}`;\n\n        return `${CONFIG.DDBI.KNOWN.LOOKUPS.get(returnKey)}`;\n      }\n    } catch (err) {\n      logger.error(`Error importing image file ${path} : ${err.message}`, { err });\n    }\n\n    return path;\n  }\n\n  /** @override */\n  // eslint-disable-next-line class-methods-use-this\n  async getData() {\n    let data;\n    let files = [];\n\n    try {\n      const verifiedDirectory = await DirectoryPicker.verifyPath(this._importPathData);\n      if (verifiedDirectory) {\n        const options = {\n          bucket: this._importPathData.bucket,\n          extensions: [\".fvttadv\", \".FVTTADV\", \".zip\"],\n          wildcard: false,\n        };\n        data = await DirectoryPicker.browseFiles(this._importPathData.activeSource, this._importPathData.current, options);\n        files = data.files.map((file) => {\n          const filename = decodeURIComponent(file).replace(/^.*[\\\\/]/, \"\");\n\n          return { path: decodeURIComponent(file), name: filename };\n        });\n      }\n    } catch (err) {\n      logger.error(err);\n      logger.warn(\n        `Unable to verify import path, this may be due to permissions on the server. You may be able to ignore this message.`\n      );\n    }\n\n    return {\n      data,\n      allScenes: game.settings.get(SETTINGS.MODULE_ID, \"adventure-policy-all-scenes\"),\n      allMonsters: game.settings.get(SETTINGS.MODULE_ID, \"adventure-policy-all-actors-into-world\"),\n      journalWorldActors: game.settings.get(SETTINGS.MODULE_ID, \"adventure-policy-journal-world-actors\"),\n      addToCompendiums: game.settings.get(SETTINGS.MODULE_ID, \"adventure-policy-add-to-compendiums\"),\n      files,\n      cssClass: \"ddb-importer-window\",\n    };\n  }\n\n  async importFolder(folders, folderList) {\n    // console.warn(\"Creating Folders\", {\n    //   folders,\n    //   folderList,\n    // });\n    await utils.asyncForEach(folders, async (f) => {\n      const folderData = f;\n\n      const existingFolder = game.folders.find((folder) =>\n        folder._id === folderData._id && folder.type === folderData.type\n      );\n\n      if (existingFolder) {\n        if (!this.temporary.folders.some((f) => f._id === existingFolder._id)) {\n          this.temporary.folders.push(existingFolder);\n        }\n        logger.debug(`Found existing folder ${existingFolder._id} with data:`, folderData, existingFolder);\n        // eslint-disable-next-line require-atomic-updates\n        // this.lookups.folders[folderData.flags.importid] = existingFolder._id;\n      } else {\n        if (folderData.parent) folderData.folder = folderData.parent;\n        // eslint-disable-next-line require-atomic-updates\n        const newFolder = await Folder.create(folderData, { keepId: true });\n        this.temporary.folders.push(newFolder);\n        if (this.importToAdventureCompendium) this.remove.folderIds.add(newFolder._id);\n        logger.debug(`Created new folder ${newFolder._id} with data:`, folderData, newFolder);\n      }\n\n      let childFolders = folderList.filter((folder) => {\n        return folder.parent === folderData._id;\n      });\n\n      if (childFolders.length > 0) {\n        logger.debug(`Creating subfolders for ${folderData._id} (${folderData.type})`, childFolders);\n        await this.importFolder(childFolders, folderList);\n      }\n    });\n  }\n\n  async importCompendiumFolder(folders, folderList) {\n    await utils.asyncForEach(folders, async (f) => {\n      let folderData = f;\n      const supportedFolders = [\"JournalEntry\", \"RollTable\"];\n      if (supportedFolders.includes(folderData.type)) {\n        const pack = CompendiumHelper.getCompendiumType(folderData.type);\n        let newFolder = pack.folders.find((folder) =>\n          (folder._id === folderData._id || folder.flags.importid === folderData._id)\n          && folder.type === folderData.type\n        );\n\n        if (!newFolder) {\n          if (folderData.parent === null) {\n            folderData.parent = this.lookups.folders[folderData.type];\n          } else {\n            folderData.parent = this.lookups.folders[folderData.parent];\n          }\n\n          // eslint-disable-next-line require-atomic-updates\n          newFolder = await Folder.create(folderData, { keepId: true, pack: pack.metadata.id });\n          logger.debug(`Created new compendium folder ${newFolder._id} with data:`, folderData, newFolder);\n        }\n\n        // eslint-disable-next-line require-atomic-updates\n        this.lookups.folders[folderData.flags.importid] = newFolder._id;\n\n        let childFolders = folderList.filter((folder) => {\n          return folder.parent === folderData._id;\n        });\n\n        if (childFolders.length > 0) {\n          await this.importCompendiumFolder(childFolders, folderList);\n        }\n\n      }\n    });\n  }\n\n  /**\n   * Create missing folder structures in the world\n   */\n  async _createFolders() {\n    this.lookups.folders = {};\n    this.lookups.compendiumFolders = {};\n\n    // the folder list could be out of order, we need to create all folders with parent null first\n    const firstLevelFolders = this.folders.filter((folder) => folder.parent === null);\n    await this.importFolder(firstLevelFolders, this.folders);\n    if (this.addToCompendiums) {\n      await this.importCompendiumFolder(firstLevelFolders, this.folders);\n    }\n  }\n\n  /** @override */\n  activateListeners(html) {\n    super.activateListeners(html);\n\n    html.find(\".world-button\").on(\"click\", this._importAdventure.bind(this));\n    html.find(\".compendium-button\").on(\"click\", this._importAdventure.bind(this));\n  }\n\n  /**\n   * Checks for any missing data from DDB in the compendiums, spells, items, monsters that have been referenced by the\n   * adventure and imports them using DDB Importer.\n   */\n  async _checkForMissingData() {\n    if (this.adventure.required?.spells && this.adventure.required.spells.length > 0) {\n      logger.debug(`${this.adventure.name} - spells required`, this.adventure.required.spells);\n      AdventureMunch._progressNote(`Checking for missing spells from DDB`);\n      await AdventureMunchHelpers.checkForMissingDocuments(\"spell\", this.adventure.required.spells);\n    }\n    if (this.adventure.required?.items && this.adventure.required.items.length > 0) {\n      logger.debug(`${this.adventure.name} - items required`, this.adventure.required.items);\n      AdventureMunch._progressNote(`Checking for missing items from DDB`);\n      await AdventureMunchHelpers.checkForMissingDocuments(\"item\", this.adventure.required.items);\n    }\n    if (this.adventure.required?.monsters && this.adventure.required.monsters.length > 0) {\n      logger.debug(`${this.adventure.name} - monsters required`, this.adventure.required.monsters);\n      AdventureMunch._progressNote(`Checking for missing monsters from DDB`);\n      await AdventureMunchHelpers.checkForMissingDocuments(\"monster\", this.adventure.required.monsters);\n    }\n    if (parseFloat(this.adventure.version) < 4.1 && this.allMonsters) {\n      ui.notifications.warn(`Unable to add all monsters from this adventure, please re-munch adventure with Adventure Muncher v1.0.9 or higher`);\n    } else if (parseFloat(this.adventure.version) >= 4.1 && this.allMonsters && this.adventure.required?.monsterData\n      && this.adventure.required?.monsterData?.length > 0\n    ) {\n      logger.debug(`${this.adventure.name} - Importing Remaining Actors`);\n      AdventureMunch._progressNote(`Checking for missing world actors (${this.adventure.required.monsterData}) from compendium...`);\n      await this.importRemainingActors(this.adventure.required.monsterData);\n    }\n    logger.debug(\"Missing data check complete\");\n  }\n\n  /**\n   * Work through the different types in the adventure and import them\n   * @returns {Promise<>}\n   */\n  async _importFiles() {\n    if (AdventureMunchHelpers.folderExists(\"scene\", this.zip)) {\n      logger.debug(`${this.adventure.name} - Loading scenes`);\n      await this._checkForDataUpdates(\"scene\");\n    }\n    if (AdventureMunchHelpers.folderExists(\"actor\", this.zip)) {\n      logger.debug(`${this.adventure.name} - Loading actors`);\n      await this._importFile(\"actor\");\n    }\n    if (AdventureMunchHelpers.folderExists(\"item\", this.zip)) {\n      logger.debug(`${this.adventure.name} - Loading item`);\n      await this._importFile(\"item\");\n    }\n    if (AdventureMunchHelpers.folderExists(\"journal\", this.zip)) {\n      logger.debug(`${this.adventure.name} - Loading journal`);\n      await this._importFile(\"journal\");\n    }\n    if (AdventureMunchHelpers.folderExists(\"table\", this.zip)) {\n      logger.debug(`${this.adventure.name} - Loading table`);\n      await this._importFile(\"table\");\n    }\n    if (AdventureMunchHelpers.folderExists(\"playlist\", this.zip)) {\n      logger.debug(`${this.adventure.name} - Loading playlist`);\n      await this._importFile(\"playlist\");\n    }\n    if (AdventureMunchHelpers.folderExists(\"macro\", this.zip)) {\n      logger.debug(`${this.adventure.name} - Loading macro`);\n      await this._importFile(\"macro\");\n    }\n  }\n\n  _renderCompleteDialog() {\n    new Dialog(\n      {\n        title: `Successful Import of ${this.adventure.name}`,\n        content: { adventure: this.adventure },\n        buttons: { two: { label: \"OK\" } },\n      },\n      {\n        classes: [\"dialog\", \"adventure-import-export\"],\n        template: \"modules/ddb-importer/handlebars/adventure/import-complete.hbs\",\n      }\n    ).render(true);\n  }\n\n  /**\n   * Search temporary items and return a match\n   *\n   * @param  {String} uuid - Item id or uuid\n   * @returns {Object} - Document\n   */\n  fetchTemporaryItem(uuid) {\n    const id = uuid.split(\".\").pop();\n    for (const [key, itemArray] of Object.entries(this.temporary)) {\n      logger.debug(`Checking temporary ${key} for ${uuid}`, itemArray);\n      const match = itemArray.find((i) => i._id === id);\n      if (match) {\n        logger.debug(`Found ${key} match for ${uuid}`, match);\n        return match;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Get the world actor, or actor that represents the world actor for adventure compendium build\n   *\n   * @param  {String} actorId - Actor Id\n   * @returns {Object} - Actor\n   */\n  _getWorldActor(actorId) {\n    return this.importToAdventureCompendium\n      ? this.temporary.actors.find((a) => a._id === actorId)\n      : game.actors.get(actorId);\n  }\n\n  static async _getTokenUpdateData(worldActor, sceneToken) {\n    const items = [];\n    const ddbItems = sceneToken.flags.ddbItems ?? [];\n    for (const item of ddbItems) {\n      if (item.customItem) {\n        items.push(item.data);\n      } else {\n        const ddbId = foundry.utils.getProperty(item, \"ddbId\");\n        if (Number.isInteger(ddbId)) {\n          // fetch ddbItem\n          const compendium = CompendiumHelper.getCompendiumType(item.type);\n          const itemRef = compendium.index.find((i) => i.name === item.name && i.type === item.type);\n          if (itemRef) {\n            const compendiumItem = await compendium.getDocument(itemRef._id);\n            const jsonItem = compendiumItem.toObject();\n            delete jsonItem._id;\n            items.push(jsonItem);\n          } else {\n            logger.error(`Unable to find compendium item ${item.name}`, { item, sceneToken });\n          }\n        } else {\n          // fetch actor item here\n          const actorItem = worldActor.items.find((i) => i.name === item.name && i.type === item.type);\n          if (actorItem) {\n            const jsonItem = actorItem.toObject();\n            delete jsonItem._id;\n            items.push(jsonItem);\n          } else {\n            logger.error(`Unable to find monster feature/item ${item.name}`, { item, sceneToken, worldActor });\n          }\n        }\n      }\n    }\n\n    const tokenStub = { };\n\n    if (foundry.utils.hasProperty(sceneToken, \"actorData\")) {\n      const data = foundry.utils.deepClone(sceneToken.actorData);\n      if (data.data) {\n        foundry.utils.setProperty(tokenStub, \"delta.system\", foundry.utils.deepClone(data.data));\n        if (data.name) foundry.utils.setProperty(tokenStub, \"delta.name\", foundry.utils.deepClone(data.name));\n      } else {\n        foundry.utils.setProperty(tokenStub, \"delta\", foundry.utils.deepClone(sceneToken.actorData));\n      }\n      delete sceneToken.actorData;\n    }\n\n    if (items.length > 0) {\n      foundry.utils.setProperty(tokenStub, \"delta.items\", items);\n    }\n    if (sceneToken.flags.ddbImages?.keepToken)\n      foundry.utils.setProperty(tokenStub, \"texture.src\", sceneToken.flags.ddbImages.tokenImage);\n    if (sceneToken.flags.ddbImages?.keepAvatar)\n      foundry.utils.setProperty(tokenStub, \"delta.img\", sceneToken.flags.ddbImages.avatarImage);\n\n    const updateData = foundry.utils.mergeObject(tokenStub, sceneToken);\n    if (updateData.name !== worldActor.name && !foundry.utils.hasProperty(updateData, \"delta.name\")) {\n      foundry.utils.setProperty(updateData, \"delta.name\", updateData.name);\n    }\n\n    const tokenData = await worldActor.getTokenDocument(updateData);\n\n    logger.debug(`${sceneToken.name} token data for id ${sceneToken.actorId}`, tokenData);\n    return tokenData.toObject();\n  }\n\n  async _getSceneTokensV11(scene, tokens) {\n    const tokenResults = [];\n    const deadTokens = [];\n\n    for (const token of tokens) {\n      if (token.actorId && !token.actorLink) {\n        const sceneToken = scene.flags.ddb.tokens.find((t) => t._id === foundry.utils.getProperty(token, \"flags.ddbActorFlags.tokenLinkId\"));\n        delete sceneToken.scale;\n        const worldActor = this._getWorldActor(token.actorId);\n        if (worldActor) {\n          const updateData = await AdventureMunch._getTokenUpdateData(worldActor, sceneToken);\n          tokenResults.push(updateData);\n        } else {\n          deadTokens.push(token._id);\n        }\n      } else {\n        deadTokens.push(token);\n      }\n    }\n\n    if (deadTokens.length > 0) {\n      logger.warn(`Removing ${scene.name} tokens with no world actors`, deadTokens);\n    }\n\n    return tokenResults;\n  }\n\n  async _revisitScene(document) {\n    let updatedData = {};\n    const scene = foundry.utils.duplicate(document);\n    // this is a scene we need to update links to all items\n    logger.info(`Updating ${scene.name}, ${scene.tokens.length} tokens`);\n\n    if (!this.importToAdventureCompendium) {\n      // In 0.8.x the thumbs don't seem to be generated.\n      // This code would embed the thumbnail.\n      // Consider writing this out.\n      if (!document.thumb) {\n        const thumbData = await document.createThumbnail();\n        updatedData[\"thumb\"] = thumbData.thumb;\n      }\n      await document.update(updatedData);\n    }\n  }\n\n  /**\n   * Some items need linking up or tweaking post import.\n   * @returns {Promise<>}\n   */\n  async _revisitItems() {\n    try {\n      if (this._itemsToRevisit.length > 0) {\n        let totalCount = this._itemsToRevisit.length;\n        let currentCount = 0;\n\n        await utils.asyncForEach(this._itemsToRevisit, async (itemUuid) => {\n          const toTimer = setTimeout(() => {\n            logger.warn(`Reference update timed out.`);\n            this._renderCompleteDialog();\n            this.close();\n          }, 180000);\n          try {\n            const document = this.importToAdventureCompendium\n              ? this.fetchTemporaryItem(itemUuid)\n              : await fromUuid(itemUuid);\n            // let rawData;\n            switch (document.documentName) {\n              case \"Scene\": {\n                await this._revisitScene(document);\n                break;\n              }\n              // no default\n            }\n          } catch (err) {\n            logger.warn(`Error updating references for object ${itemUuid}`, err);\n          }\n          currentCount += 1;\n          AdventureMunch._updateProgress(totalCount, currentCount, \"References\");\n          clearTimeout(toTimer);\n        });\n      }\n    } catch (err) {\n      // eslint-disable-next-line no-undef\n      logger.warn(`Error during reference update for object ${item}`, err);\n    }\n    logger.info(\"Revisit data complete\");\n  }\n\n  async _loadZip() {\n    const form = document.querySelector(`form[class=\"ddb-importer-window\"]`);\n    if (form.data.files.length) {\n      this.importFilename = form.data.files[0].name;\n      this.zip = await FileHelper.readBlobFromFile(form.data.files[0]).then(JSZip.loadAsync);\n    } else {\n      const selectedFile = document.querySelector(`[name=\"import-file\"]`).value;\n      this.importFilename = selectedFile;\n      this.zip = await fetch(`/${selectedFile}`)\n        .then((response) => {\n          if (response.status === 200 || response.status === 0) {\n            return Promise.resolve(response.blob());\n          } else {\n            return Promise.reject(new Error(response.statusText));\n          }\n        })\n        .then(JSZip.loadAsync);\n    }\n  }\n\n  async _importAdventureToWorld() {\n    await this._importFiles();\n    await this._revisitItems();\n  }\n\n  async _importAdventureToCompendium() {\n    try {\n      const adventureData = await this._createAdventure();\n      logger.debug(\"adventureData to add to compendium\", adventureData);\n      await this._importAdventureCompendium(adventureData);\n    } catch (err) {\n      logger.error(\"Error importing to compendium\", err);\n      throw err;\n    } finally {\n      const folderIds = [...this.remove.folderIds];\n      if (folderIds.length > 0) {\n        logger.debug(\"Removing folders\", folderIds);\n        const results = await Folder.deleteDocuments(folderIds);\n        logger.debug(\"Delete results\", results);\n      }\n    }\n\n  }\n\n  _unpackZip() {\n    for (const key of Object.keys(this.raw)) {\n      this.raw[key] = AdventureMunchHelpers.getFiles(key, this.zip);\n    }\n  }\n\n  async _chooseScenes() {\n    const dataFiles = this.raw[\"scene\"];\n\n    logger.info(`Selecting Scenes for ${this.adventure.name} - (${dataFiles.length} possible scenes for import)`);\n\n    let fileData = [];\n\n    await utils.asyncForEach(dataFiles, async (file) => {\n      const raw = await this.zip.file(file.name).async(\"text\");\n      const json = JSON.parse(raw);\n      const existingScene = await game.scenes.find((item) => item.id === json._id);\n      const scene = AdventureMunchHelpers.extractDocumentVersionData(json, existingScene);\n      fileData.push(scene);\n    });\n\n    return new Promise((resolve) => {\n      new Dialog(\n        {\n          title: \"Choose Scenes to Import\",\n          content: {\n            fileData: fileData,\n            cssClass: \"import-data-selection\",\n          },\n          buttons: {\n            selection: {\n              label: \"Selected\",\n              callback: async () => {\n                const formData = $(\".import-data-selection\").serializeArray();\n                const scenes = [];\n                for (let i = 0; i < formData.length; i++) {\n                  const key = formData[i].name;\n                  scenes.push(this.raw.scene.find((s) => s.name.includes(key)));\n                }\n                logger.debug(\"scenes to import\", scenes);\n                this.raw.scene = scenes;\n                resolve(this);\n              },\n            },\n            all: {\n              label: \"All\",\n              callback: async () => {\n                resolve(this);\n              },\n            },\n          },\n          default: \"all\",\n          close: async () => {\n            resolve(this);\n          },\n        },\n        {\n          width: 700,\n          classes: [\"dialog\", \"adventure-import-selection\"],\n          template: \"modules/ddb-importer/handlebars/adventure/choose-scenes.hbs\",\n        }\n      ).render(true);\n    });\n\n  }\n\n  async _importAdventure(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    event.stopImmediatePropagation();\n    const a = event.currentTarget;\n    const action = a.dataset.button;\n\n    if (action === \"world\" || action === \"compendium\") {\n      try {\n        $(\".import-progress\").toggleClass(\"import-hidden\");\n        $(\".ddb-overlay\").toggleClass(\"import-invalid\");\n\n        this.allScenes = document.querySelector(`[name=\"all-scenes\"]`).checked;\n        game.settings.set(SETTINGS.MODULE_ID, \"adventure-policy-all-scenes\", this.allScenes);\n        this.allMonsters = document.querySelector(`[name=\"all-monsters\"]`).checked;\n        game.settings.set(SETTINGS.MODULE_ID, \"adventure-policy-all-actors-into-world\", this.allMonsters);\n        this.journalWorldActors = document.querySelector(`[name=\"journal-world-actors\"]`).checked;\n        game.settings.set(SETTINGS.MODULE_ID, \"adventure-policy-journal-world-actors\", this.journalWorldActors);\n        this.addToCompendiums = document.querySelector(`[name=\"add-to-compendiums\"]`).checked;\n        game.settings.set(SETTINGS.MODULE_ID, \"adventure-policy-add-to-compendiums\", this.addToCompendiums);\n\n        if (this.addToCompendiums) {\n          const compData = SETTINGS.COMPENDIUMS.find((c) => c.title === \"Journals\");\n          await createDDBCompendium(compData);\n          for (const key of Object.keys(this.compendiums)) {\n            this.compendiums[key] = CompendiumHelper.getCompendiumType(key);\n            await this.compendiums[key].getIndex();\n          }\n        }\n\n        await this._loadZip();\n        this._unpackZip();\n\n        this.adventure = JSON.parse(await this.zip.file(\"adventure.json\").async(\"text\"));\n        logger.debug(\"Loaded adventure data\", { adventure: this.adventure });\n        try {\n          this.folders = JSON.parse(await this.zip.file(\"folders.json\").async(\"text\"));\n          logger.debug(\"Adventure folders\", { folders: this.folders });\n        } catch (err) {\n          logger.warn(`Folder structure file not found.`);\n        }\n\n        if (this.adventure.system !== game.data.system.id) {\n          ui.notifications.error(\n            `Invalid system for Adventure ${this.adventure.name}.  Expects ${this.adventure.system}`,\n            { permanent: true }\n          );\n          throw new Error(`Invalid system for Adventure ${this.adventure.name}.  Expects ${this.adventure.system}`);\n        }\n\n        if (parseFloat(this.adventure.version) < 4.0) {\n          ui.notifications.error(\n            `This Adventure (${this.adventure.name}) was generated for v9.  Please regenerate your config file for Adventure Muncher.`,\n            { permanent: true }\n          );\n          throw new Error(\n            `This Adventure (${this.adventure.name}) was generated for v9.  Please regenerate your config file for Adventure Muncher.`\n          );\n        }\n\n        if (action === \"compendium\") this.importToAdventureCompendium = true;\n\n        await this._createFolders();\n        if (!this.allScenes) await this._chooseScenes();\n        await this._checkForMissingData();\n        this.lookups.adventureConfig = await generateAdventureConfig(true);\n\n        if (action === \"world\") await this._importAdventureToWorld();\n        else if (action === \"compendium\") {\n          const compData = SETTINGS.COMPENDIUMS.find((c) => c.title === \"Adventures\");\n          await createDDBCompendium(compData);\n          await this._importAdventureToCompendium();\n        }\n\n        $(\".ddb-overlay\").toggleClass(\"import-invalid\");\n\n        this._renderCompleteDialog();\n\n        this.close();\n      } catch (err) {\n        $(\".ddb-overlay\").toggleClass(\"import-invalid\");\n        ui.notifications.error(`There was an error importing ${this.importFilename}`);\n        logger.error(`Error importing file ${this.importFilename}`, err);\n        logger.error(err);\n        logger.error(err.stack);\n        this.close();\n      } finally {\n        // eslint-disable-next-line require-atomic-updates\n        this.lookups = {};\n      }\n    }\n  }\n\n  /**\n   * Import actors from compendium into world\n   * @param {Array<Objects>} neededActors array of needed actors\n   * @returns {Promise<Array>} array of world actors\n   */\n  async ensureWorldActors(neededActors) {\n    logger.debug(\"Trying to import actors from compendium\", neededActors);\n    const monsterCompendium = CompendiumHelper.getCompendiumType(\"monster\", false);\n    const results = [];\n    await utils.asyncForEach(neededActors, async (actor) => {\n      let worldActor = this._getWorldActor(actor.actorId);\n      if (!worldActor) {\n        logger.info(`Importing actor ${actor.name} with DDB ID ${actor.ddbId} from ${monsterCompendium.metadata.name} with compendium id ${actor.compendiumId}`);\n        try {\n          const options = { keepId: true, keepEmbeddedIds: true, temporary: this.importToAdventureCompendium };\n          worldActor = await game.actors.importFromCompendium(monsterCompendium, actor.compendiumId, { _id: actor.actorId, folder: actor.folderId }, options);\n        } catch (err) {\n          logger.error(err);\n          logger.warn(`Unable to import actor ${actor.name} with id ${actor.compendiumId} from DDB Compendium`);\n          logger.debug(`Failed on: game.actors.importFromCompendium(monsterCompendium, \"${actor.compendiumId}\", { _id: \"${actor.actorId}\", folder: \"${actor.folderId}\" }, { keepId: true });`);\n        }\n      }\n      if (worldActor) results.push(worldActor);\n      if (this.importToAdventureCompendium && !this.temporary.actors.some((a) => a._id === actor.actorId)) {\n        this.temporary.actors.push(worldActor);\n      }\n    });\n    logger.debug(\"Actors transferred from compendium to world.\", results);\n    return results;\n  }\n\n  static async linkDDBActors(tokens) {\n    const linkedExistingTokens = await AdventureMunchHelpers.linkExistingActorTokens(tokens);\n    const newTokens = linkedExistingTokens\n      .filter((token) => token.flags.ddbActorFlags?.id && token.flags.compendiumActorId);\n\n    return Promise.all(newTokens);\n  }\n\n  /**\n   * Import actors, matching up import ids and actor ids for scene token linking\n   * @param {object} data array of actor data objects\n   * @param {boolean} temporary create the items in the world?\n   * @returns {Promise<Array>} array of world actors\n   */\n  async importRemainingActors(data) {\n    const results = [];\n    const monsterCompendium = CompendiumHelper.getCompendiumType(\"monster\", false);\n    const monsterIndex = await AdventureMunchHelpers.getCompendiumIndex(\"monster\");\n\n    logger.debug(\"Checking for the following actors in world\", data);\n    await utils.asyncForEach(data, async (actorData) => {\n      logger.debug(`Checking for ${actorData.ddbId}`, actorData);\n      let worldActor = this._getWorldActor(actorData.actorId);\n\n      if (worldActor) {\n        logger.debug(`Actor found for ${actorData.actorId}, with name ${worldActor.name}`);\n      } else {\n        const monsterHit = monsterIndex.find((monster) =>\n          monster.flags?.ddbimporter?.id && monster.flags.ddbimporter.id == actorData.ddbId\n        );\n        if (monsterHit) {\n          logger.info(`Importing actor ${monsterHit.name} with DDB ID ${actorData.ddbId} from ${monsterCompendium.metadata.name} with compendium id ${monsterHit._id} (temporary? ${this.importToAdventureCompendium})`);\n          try {\n            const actorOverride = { _id: actorData.actorId, folder: actorData.folderId };\n            const options = { keepId: true, keepEmbeddedIds: true, temporary: this.importToAdventureCompendium };\n            // eslint-disable-next-line require-atomic-updates\n            worldActor = await game.actors.importFromCompendium(monsterCompendium, monsterHit._id, actorOverride, options);\n          } catch (err) {\n            logger.error(err);\n            logger.warn(`Unable to import actor ${monsterHit.name} with id ${monsterHit._id} from DDB Compendium`);\n            logger.debug(`Failed on: game.actors.importFromCompendium(monsterCompendium, \"${monsterHit._id}\", { _id: \"${actorData.actorId}\", folder: \"${actorData.folderId}\" }, { keepId: true });`);\n          }\n        } else {\n          logger.error(\"Actor not found in compendium\", actorData);\n        }\n      }\n      if (worldActor) results.push(worldActor);\n      if (worldActor && this.importToAdventureCompendium && !this.temporary.actors.some((a) => worldActor.flags.ddbimporter.id == a.flags.ddbimporter.id)) {\n        this.temporary.actors.push(worldActor);\n      }\n    });\n    return results;\n  }\n\n  /**\n   * Generates actors for tokens on a scene\n   * @param {object} scene the scene to generate actors for\n   * @returns {Promise<Array>} array of world actors\n   */\n  async generateTokenActors(scene) {\n    logger.debug(`Token Actor generation for ${scene.name} starting`);\n    const tokens = await AdventureMunch.linkDDBActors(scene.tokens);\n    const neededActors = tokens\n      .map((token) => {\n        return {\n          name: token.name,\n          ddbId: token.flags.ddbActorFlags.id,\n          actorId: token.actorId,\n          compendiumId: token.flags.compendiumActorId,\n          folderId: token.flags.actorFolderId\n        };\n      })\n      .filter((obj, pos, arr) => {\n        // we only need to create 1 actor per actorId\n        return arr.map((mapObj) => mapObj[\"actorId\"]).indexOf(obj[\"actorId\"]) === pos;\n      });\n\n    const results = await this.ensureWorldActors(neededActors);\n    logger.debug(`Token Actor generation for ${scene.name} complete`, results);\n    return results;\n  }\n\n  async _loadDocumentAssets(data, importType) {\n\n    data.flags.importid = data._id;\n\n    if (data.background?.src) {\n      // eslint-disable-next-line require-atomic-updates\n      data.background.src = await this.importImage(data.background.src);\n    } else if (data.img) {\n      // eslint-disable-next-line require-atomic-updates\n      data.img = await this.importImage(data.img);\n    }\n    if (data.thumb) {\n      // eslint-disable-next-line require-atomic-updates\n      data.thumb = await this.importImage(data.thumb);\n    }\n    if (data?.token?.img) {\n      // eslint-disable-next-line require-atomic-updates\n      data = await this._importTokenImage(\"token\", data, { img: true, texture: false });\n    }\n    if (data.toke?.texture?.src) {\n      // eslint-disable-next-line require-atomic-updates\n      data = await this._importTokenImage(\"token\", data);\n    }\n    if (data?.prototypeToken?.img) {\n      // eslint-disable-next-line require-atomic-updates\n      data = await this._importTokenImage(\"prototypeToken\", data, { img: true, texture: false });\n    }\n    if (data.prototypeToken?.texture?.src) {\n      // eslint-disable-next-line require-atomic-updates\n      data = await this._importTokenImage(\"prototypeToken\", data);\n    }\n\n    if (data?.items?.length) {\n      await utils.asyncForEach(data.items, async (item) => {\n        if (item.img) {\n          // eslint-disable-next-line require-atomic-updates\n          item.img = await this.importImage(item.img);\n        }\n      });\n    }\n\n    if (data?.pages?.length) {\n      await utils.asyncForEach(data.pages, async (page) => {\n        if (page.src) {\n          // eslint-disable-next-line require-atomic-updates\n          page.src = await this.importImage(page.src);\n        }\n      });\n    }\n\n    if (importType === \"Scene\") {\n      if (data.tokens) {\n        await this.generateTokenActors(data);\n      }\n      if (data.flags[\"perfect-vision\"] && Array.isArray(data.flags[\"perfect-vision\"])) {\n        data.flags[\"perfect-vision\"] = {};\n      }\n    } else if (importType === \"Playlist\") {\n      await utils.asyncForEach(data.sounds, async (sound) => {\n        if (sound.path) {\n          // eslint-disable-next-line require-atomic-updates\n          sound.path = await this.importImage(sound.path);\n        }\n      });\n    } else if (importType === \"RollTable\") {\n      await utils.asyncForEach(data.results, async (result) => {\n        if (result.img) {\n          // eslint-disable-next-line require-atomic-updates\n          result.img = await this.importImage(result.img);\n        }\n        if (result.resultId) {\n          data.flags.ddb.needRevisit = true;\n        }\n        logger.debug(`Updating DDB links for ${data.name}`);\n        // eslint-disable-next-line require-atomic-updates\n        data.text = this.foundryCompendiumReplace(data.text);\n      });\n    } else if (importType === \"JournalEntry\" && data.pages) {\n      await utils.asyncForEach(data.pages, async (page) => {\n        if (page.text.content) {\n          const journalImages = AdventureMunchHelpers.reMatchAll(\n            /(src|href)=\"(?!http(?:s*):\\/\\/)([\\w0-9\\-._~%!$&'()*+,;=:@/]*)\"/,\n            page.text.content\n          );\n          if (journalImages) {\n            logger.debug(`Updating Image links for ${page.name}`);\n            await utils.asyncForEach(journalImages, async (result) => {\n              const path = await this.importImage(result[2]);\n              page.text.content = page.text.content.replace(result[0], `${result[1]}=\"${path}\"`);\n            });\n          }\n          logger.debug(`Updating DDB links for ${page.name}`);\n          page.text.content = this.foundryCompendiumReplace(page.text.content);\n        }\n      });\n    }\n\n    return data;\n\n  }\n\n\n  async _createAdventure() {\n    logger.debug(\"Packing up adventure\");\n    if (this.allMonsters) await this.importRemainingActors(this.adventure.required.monsterData, true);\n    const itemData = await AdventureMunchHelpers.getDocuments(\"items\", (this.adventure.required.items ?? []), {}, true);\n    const spellData = await AdventureMunchHelpers.getDocuments(\"spells\", (this.adventure.required.spells ?? []), {}, true);\n\n    logger.debug(\"Writing out Journals\");\n    await this._importFile(\"journal\");\n    logger.debug(\"Cartographer is working on Scenes\");\n    await this._importFile(\"scene\");\n    logger.debug(\"Performing some table calculations\");\n    await this._importFile(\"table\");\n    // await this._importFile(\"Macro\", [], true);\n    // await this._importFile(\"Card\", [], true);\n    // await this._importFile(\"Playlist\", [], true);\n    // await this._importFile(\"Combat\", [], true);\n    // await this._importFile(\"Actor\", [], true);\n    // await this._importFile(\"Item\", [], true);\n\n    const ddbSource = CONFIG.DDB.sources.find((source) => source.description === this.adventure.name);\n    const image = ddbSource?.avatarURL\n      ? ddbSource.avatarURL\n      : await this.importImage(\"assets/images/cover.jpg\");\n\n    await this._revisitItems();\n\n    const data = {\n      img: image,\n      name: this.adventure.name,\n      description: this.adventure.description,\n      folders: this.temporary.folders.map((doc) => doc.toObject()),\n      combats: [],\n      items: itemData.concat(spellData).map((doc) => doc.toObject()),\n      actors: this.temporary.actors.map((doc) => doc.toObject()),\n      journal: this.temporary.journals.map((doc) => doc.toObject()),\n      scenes: this.temporary.scenes.map((doc) => doc.toObject()),\n      tables: this.temporary.tables.map((doc) => doc.toObject()),\n      macros: [],\n      cards: [],\n      playlists: [],\n\n      flags: {\n        ddbimporter: {\n          isDDBAdventure: true,\n          adventure: {\n            required: this.adventure.required,\n            revisitUuids: this._itemsToRevisit,\n          },\n        },\n        core: { sheetClass: \"ddb-importer.DDBAdventureImporter\" },\n      },\n    };\n\n    return data;\n  }\n\n\n  async _importAdventureCompendium(adventureData) {\n    try {\n      const pack = CompendiumHelper.getCompendiumType(\"adventure\");\n      const existingAdventure = pack.index.find((i) => i.name === adventureData.name);\n\n      let adventure;\n      if (existingAdventure) {\n        logger.debug(\"Deleting existing adventure\", existingAdventure._id);\n        adventureData._id = existingAdventure._id;\n        const loadedAdventure = await pack.getDocument(existingAdventure._id);\n        adventure = await loadedAdventure.update(adventureData, { diff: false, recursive: false });\n        ui.notifications.info(game.i18n.format(\"ADVENTURE.UpdateSuccess\", { name: adventureData.name }));\n      } else {\n        adventure = await Adventure.createDocuments([adventureData], {\n          pack: pack.metadata.id,\n          keepId: true,\n          keepEmbeddedIds: true\n        });\n        ui.notifications.info(game.i18n.format(\"ADVENTURE.CreateSuccess\", { name: adventureData.name }));\n\n      }\n\n      // console.warn(\"Adventure!\", {\n      //   pack,\n      //   item: adventureData,\n      //   adventure,\n      //   temp: this.temporary,\n      //   thisAdventure: this.adventure,\n      // });\n      return adventure;\n    } catch (err) {\n      logger.error(\"error building adventure\", { err, this: this });\n      throw err;\n    }\n  }\n\n  // import a scene file\n  async _importRenderedSceneFile(data, overwriteEntity) {\n    if (!AdventureMunchHelpers.findEntityByImportId(\"scenes\", data._id) || overwriteEntity || this.importToAdventureCompendium) {\n      await utils.asyncForEach(data.tokens, async (token) => {\n        foundry.utils.setProperty(token, \"flags.ddbActorFlags.tokenLinkId\", token._id);\n        // eslint-disable-next-line require-atomic-updates\n        if (token.img) token.img = await this.importImage(token.img);\n        if (token.prototypeToken?.texture?.src) {\n          // eslint-disable-next-line require-atomic-updates\n          token.prototypeToken.texture.src = await this.importImage(token.prototypeToken.texture.src);\n        }\n      });\n\n      await utils.asyncForEach(data.sounds, async (sound) => {\n        // eslint-disable-next-line require-atomic-updates\n        sound.path = await this.importImage(sound.path);\n      });\n\n      await utils.asyncForEach(data.notes, async (note) => {\n        // eslint-disable-next-line require-atomic-updates\n        if (note.icon) note.icon = await this.importImage(note.icon, true);\n        // eslint-disable-next-line require-atomic-updates\n        if (note.texture?.src) note.texture.src = await this.importImage(note.texture.src, true);\n      });\n\n      await utils.asyncForEach(data.tiles, async (tile) => {\n        // eslint-disable-next-line require-atomic-updates\n        if (tile.img) tile.img = await this.importImage(tile.img);\n        // eslint-disable-next-line require-atomic-updates\n        if (tile.texture?.src) tile.texture.src = await this.importImage(tile.texture.src);\n      });\n\n      for (const wall of data.walls) {\n        if (wall.door !== 0 && !wall.doorSound && wall.doorSound !== \"\") {\n          wall.doorSound = \"woodBasic\";\n        }\n      }\n\n      if (overwriteEntity) await Scene.deleteDocuments([data._id]);\n      const options = { keepId: true, keepEmbeddedIds: true, temporary: false };\n      logger.debug(`Creating Scene ${data.name}`, foundry.utils.deepClone(data));\n      const tokens = foundry.utils.deepClone(data.tokens);\n      data.tokens = [];\n      const scene = await Scene.create(data, options);\n      logger.debug(`Created Scene ${data.name}`, scene);\n      const tokenUpdates = await this._getSceneTokensV11(scene, tokens);\n      logger.debug(`Token Updates for ${data.name}`, tokenUpdates);\n      const sceneTokens = await scene.createEmbeddedDocuments(\"Token\", tokenUpdates, { keepId: false });\n      logger.debug(`Token update response for ${data.name}`, sceneTokens);\n      this._itemsToRevisit.push(`Scene.${scene.id}`);\n      if (this.importToAdventureCompendium) {\n        this.temporary.scenes.push(scene);\n        scene.delete();\n      }\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  async _importRenderedFile(typeName, data, needRevisit, overwriteIds) {\n    const overwriteEntity = overwriteIds.includes(data._id);\n    const options = { keepId: true, keepEmbeddedIds: true, temporary: this.importToAdventureCompendium };\n    switch (typeName) {\n      case \"Scene\": {\n        await this._importRenderedSceneFile(data, overwriteEntity);\n        break;\n      }\n      case \"Actor\":\n        if (!AdventureMunchHelpers.findEntityByImportId(\"actors\", data._id)) {\n          let actor = await Actor.create(data, options);\n          await actor.update({ [`prototypeToken.actorId`]: actor.id });\n          if (needRevisit) this._itemsToRevisit.push(`Actor.${actor.id}`);\n          if (this.importToAdventureCompendium) this.temporary.actors.push(actor);\n        }\n        break;\n      case \"Item\":\n        if (!AdventureMunchHelpers.findEntityByImportId(\"items\", data._id)) {\n          let item = await Item.create(data, options);\n          if (needRevisit) this._itemsToRevisit.push(`Item.${item.id}`);\n          if (this.importToAdventureCompendium) this.temporary.items.push(item);\n        }\n        break;\n      case \"JournalEntry\":\n        if (!AdventureMunchHelpers.findEntityByImportId(\"journal\", data._id)) {\n          let journal = await JournalEntry.create(data, options);\n          if (needRevisit) this._itemsToRevisit.push(`JournalEntry.${journal.id}`);\n          if (this.importToAdventureCompendium) this.temporary.journals.push(journal);\n        }\n        if (this.addToCompendiums && !this.findCompendiumEntityByImportId(\"journal\", data._id)) {\n          const cOptions = foundry.utils.mergeObject(options, { temporary: false, pack: this.compendiums.journal.metadata.id });\n          data.pages.forEach((page) => {\n            if (page.type == \"text\") {\n              page.text.content = this.replaceUUIDSForCompendium(page.text.content);\n            }\n          });\n          let cJournal = await JournalEntry.create(data, cOptions);\n          this._compendiumItemsToRevisit.push(cJournal);\n        }\n        break;\n      case \"RollTable\":\n        if (!AdventureMunchHelpers.findEntityByImportId(\"tables\", data._id)) {\n          let rolltable = await RollTable.create(data, options);\n          if (needRevisit) this._itemsToRevisit.push(`RollTable.${rolltable.id}`);\n          if (this.importToAdventureCompendium) this.temporary.tables.push(rolltable);\n        }\n        if (this.addToCompendiums && !this.findCompendiumEntityByImportId(\"table\", data._id)) {\n          const cOptions = foundry.utils.mergeObject(options, { temporary: false, pack: this.compendiums.table.metadata.id });\n          let cTable = await RollTable.create(data, cOptions);\n          this._compendiumItemsToRevisit.push(cTable);\n        }\n        break;\n      case \"Playlist\":\n        if (!AdventureMunchHelpers.findEntityByImportId(\"playlists\", data._id)) {\n          data.name = `${this.adventure.name}.${data.name}`;\n          let playlist = await Playlist.create(data, options);\n          if (this.importToAdventureCompendium) this.temporary.playlists.push(playlist);\n        }\n        break;\n      case \"Macro\":\n        if (!AdventureMunchHelpers.findEntityByImportId(\"macros\", data._id)) {\n          let macro = await Macro.create(data, options);\n          if (needRevisit) this._itemsToRevisit.push(`Macro.${macro.id}`);\n          if (this.importToAdventureCompendium) this.temporary.macros.push(macro);\n        }\n        break;\n      // no default\n    }\n  }\n\n  async _checkForDataUpdates(type) {\n    const importType = AdventureMunchHelpers.getImportType(type);\n    const dataFiles = this.raw[type];\n\n    logger.info(`Checking ${this.adventure.name} - ${importType} (${dataFiles.length} for updates)`);\n\n    let fileData = [];\n    let hasVersions = false;\n\n    await utils.asyncForEach(dataFiles, async (file) => {\n      const raw = await this.zip.file(file.name).async(\"text\");\n      const json = JSON.parse(raw);\n      if (!hasVersions && json?.flags?.ddb?.versions) {\n        hasVersions = true;\n      }\n      switch (importType) {\n        case \"Scene\": {\n          const existingScene = await game.scenes.find((item) => item.id === json._id);\n          const scene = AdventureMunchHelpers.extractDocumentVersionData(json, existingScene);\n          const sceneVersions = scene.flags?.ddb?.versions?.importer;\n          if (existingScene) {\n            if (\n              sceneVersions\n              && (sceneVersions.metaVersionChanged\n                || sceneVersions.muncherVersionChanged\n                || sceneVersions.foundryVersionNewer)\n            ) {\n              fileData.push(scene);\n            }\n          } else if (sceneVersions && sceneVersions.foundryVersionNewer) {\n            fileData.push(scene);\n          }\n          break;\n        }\n        // no default\n      }\n    });\n\n    logger.debug(\"Scene update choices\", fileData);\n\n    return new Promise((resolve) => {\n      if (hasVersions && fileData.length > 0) {\n        new Dialog(\n          {\n            title: `${importType} updates`,\n            content: {\n              dataType: type,\n              dataTypeDisplay: importType,\n              fileData,\n              cssClass: \"import-data-updates\",\n            },\n            buttons: {\n              confirm: {\n                label: \"Confirm\",\n                callback: async () => {\n                  const formData = $(\".import-data-updates\").serializeArray();\n                  let ids = [];\n                  let dataType = \"\";\n                  for (let i = 0; i < formData.length; i++) {\n                    const key = formData[i].name;\n                    if (key.startsWith(\"new_\")) {\n                      ids.push(key.substr(4));\n                    } else if (key === \"type\") {\n                      dataType = formData[i].value;\n                    }\n                  }\n                  resolve(this._importFile(dataType, { overwriteIds: ids }));\n                },\n              },\n            },\n            default: \"confirm\",\n            close: async () => {\n              resolve(this._importFile(type));\n            },\n          },\n          {\n            width: 700,\n            classes: [\"dialog\", \"adventure-import-updates\"],\n            template: \"modules/ddb-importer/handlebars/adventure/import-updates.hbs\",\n          }\n        ).render(true);\n      } else {\n        resolve(this._importFile(type));\n      }\n    });\n  }\n\n  async _importTokenImage(tokenType, data, { img = false, texture = true } = {}) {\n    if (data[tokenType]?.randomImg) {\n      const imgFilepaths = data[tokenType].img.split(\"/\");\n      const imgFilename = imgFilepaths.reverse()[0];\n      const imgFilepath = data[tokenType].img.replace(imgFilename, \"\");\n\n      const filesToUpload = Object.values(this.zip.files).filter((file) => {\n        return !file.dir && file.name.includes(imgFilepath);\n      });\n\n      let adventurePath = this.adventure.name.replace(/[^a-z0-9]/gi, \"_\");\n\n      if (img) {\n        const imgPath = `${this._importPathData.current}/${adventurePath}/${data[tokenType].img}`;\n        data[tokenType].img = imgPath;\n      }\n      if (texture) {\n        const imgPath = `${this._importPathData.current}/${adventurePath}/${data[tokenType].texture.src}`;\n        data[tokenType].texture.src = imgPath;\n      }\n\n      if (filesToUpload.length > 0) {\n        let currentCount = 1;\n\n        await utils.asyncForEach(filesToUpload, async (file) => {\n          await this.importImage(file.name);\n          currentCount += 1;\n          AdventureMunch._updateProgress(filesToUpload.length, currentCount, \"Token Image\");\n        });\n      }\n    } else {\n\n      if (img) {\n        // eslint-disable-next-line require-atomic-updates\n        data[tokenType].img = await this.importImage(data[tokenType].img);\n      }\n      if (texture) {\n        // eslint-disable-next-line require-atomic-updates\n        data[tokenType].texture.src = await this.importImage(data[tokenType].texture.src);\n      }\n    }\n\n    return data;\n  }\n\n  async _importFile(type, { overwriteIds = [] } = {}) {\n    let totalCount = 0;\n    let currentCount = 0;\n\n    logger.info(`IDs to overwrite of type ${type}: ${JSON.stringify(overwriteIds)}`);\n\n    const importType = AdventureMunchHelpers.getImportType(type);\n    const dataFiles = this.raw[type];\n\n    logger.info(`Importing ${this.adventure.name} - ${importType} (${dataFiles.length} items)`);\n\n    totalCount = dataFiles.length;\n\n    // eslint-disable-next-line complexity\n    await utils.asyncForEach(dataFiles, async (file) => {\n      const rawData = await this.zip.file(file.name).async(\"text\");\n      let data = JSON.parse(rawData);\n      let needRevisit = false;\n\n      // let pattern = /(\\@[a-z]*)(\\[)([a-z0-9]*|[a-z0-9\\.]*)(\\])/gmi\n      if (rawData.match(this.pattern) || rawData.match(this.altpattern)) needRevisit = true;\n\n      // eslint-disable-next-line require-atomic-updates\n      data = await this._loadDocumentAssets(data, importType);\n\n      if (data.flags.ddb.needRevisit) needRevisit = true;\n\n      foundry.utils.setProperty(data.flags, \"ddbimporter.version\", CONFIG.DDBI.version);\n\n      // if (importType !== \"Playlist\" && importType !== \"Compendium\") {\n      //   if (this.lookups.folders[data.folder]) {\n      //     logger.debug(\n      //       `Adding data to subfolder importkey = ${data.folder}, folder = ${\n      //         this.lookups.folders[data.folder]\n      //       }`\n      //     );\n      //     data.folder = this.lookups.folders[data.folder];\n      //   } else {\n      //     logger.debug(\n      //       `Adding data to subfolder importkey = ${data.folder}, folder = ${this.lookups.folders[\"null\"]}`\n      //     );\n      //     if (this.adventure?.options?.folders) {\n      //       data.folder = this.lookups.folders[\"null\"];\n      //     } else {\n      //       data.folder = this.lookups.folders[importType];\n      //     }\n      //   }\n      // }\n\n      await this._importRenderedFile(importType, data, needRevisit, overwriteIds);\n\n      currentCount += 1;\n      AdventureMunch._updateProgress(totalCount, currentCount, importType);\n    });\n  }\n\n  /**\n   * Replaced ddb links with compendium or world links\n   * @param {Document} doc HTML document to act on\n   * @param {Object} options provide journalWorldActors and actorData if linking to world actors\n   * @returns {Document} HTML document with modified links\n   */\n  replaceLookupLinks(doc) {\n    const lookups = this.lookups.adventureConfig.lookups;\n    const actorData = this.adventure.required?.monsterData ?? [];\n\n    for (const lookupKey in AdventureMunch.COMPENDIUM_MAP) {\n      const compendiumLinks = doc.querySelectorAll(`a[href*=\"ddb://${lookupKey}/\"]`);\n      const lookupRegExp = new RegExp(`ddb://${lookupKey}/([0-9]*)`);\n      compendiumLinks.forEach((node) => {\n        const lookupMatch = node.outerHTML.match(lookupRegExp);\n        const lookupValue = lookups[AdventureMunch.COMPENDIUM_MAP[lookupKey]];\n        if (lookupValue) {\n          const worldActorLink = this.journalWorldActors && [\"monsters\"].includes(lookupKey);\n          const lookupEntry = worldActorLink\n            ? actorData.find((a) => a.ddbId === parseInt(lookupMatch[1]))\n            : lookupValue.find((e) => e.id == lookupMatch[1]);\n\n          if (lookupEntry) {\n            const pageLink = lookupEntry.pageId ? `.JournalEntryPage.${lookupEntry.pageId}` : \"\";\n            const linkStub = lookupEntry.headerLink ? `#${lookupEntry.headerLink}` : \"\";\n            const linkType = worldActorLink ? \"UUID\" : \"Compendium\";\n            const linkBody = worldActorLink\n              ? `Actor.${lookupEntry.actorId}`\n              : `${lookupEntry.compendium}.${lookupEntry._id}${pageLink}${linkStub}`;\n            doc.body.innerHTML = doc.body.innerHTML.replace(node.outerHTML, `@${linkType}[${linkBody}]{${node.textContent}}`);\n          } else {\n            logger.warn(`NO Lookup Compendium Entry for ${node.outerHTML}, using key \"${lookupKey}\"`, {\n              lookups,\n              actorData,\n              lookupRegExp,\n              lookupKey,\n            });\n          }\n        }\n      });\n    }\n\n    return doc;\n  }\n\n  /**\n   * Replaced ddb links with compendium or world links, or links back to DDB\n   * @param {Document} doc HTML document to act on\n   * @param {Object} options provide journalWorldActors and actorData if linking to world actors\n   * @returns {Document} HTML document with modified links\n   */\n  foundryCompendiumReplace(text) {\n    // replace the ddb:// entries with known compendium look ups if we have them\n    // ddb://spells\n    // ddb://magicitems || weapons || adventuring-gear || armor\n    // ddb://monsters\n\n    let doc = this.replaceLookupLinks(utils.htmlToDoc(text));\n\n    // vehicles - if not imported, link to DDB\n    const compendiumLinks = doc.querySelectorAll(\"a[href*=\\\"ddb://vehicles/\\\"]\");\n    const lookupRegExp = /ddb:\\/\\/vehicles\\/([0-9]*)/g;\n    compendiumLinks.forEach((node) => {\n      const target = node.outerHTML;\n      const lookupMatch = node.outerHTML.match(lookupRegExp);\n      const lookupValue = this.lookups.adventureConfig.lookups[\"vehicles\"];\n      if (lookupMatch) {\n        const lookupEntry = lookupValue.find((e) => e.id == lookupMatch[1]);\n        if (lookupEntry) {\n          node.setAttribute(\"href\", `https://www.dndbeyond.com${lookupEntry.url}`);\n          doc.body.innerHTML = doc.body.innerHTML.replace(target, node.outerHTML);\n        } else {\n          logger.warn(`NO Vehicle Lookup Entry for ${node.outerHTML}`);\n        }\n      } else {\n        logger.warn(`NO Vehicle Lookup Match for ${node.outerHTML}`);\n      }\n    });\n\n    // final replace in case of failure\n    // there is a chance that the adventure references items or monsters we don't have access to\n    // in this case attempt to link to DDB instead of compendium doc\n    for (const lookupKey in AdventureMunch.COMPENDIUM_MAP) {\n      const compendiumLinks = doc.querySelectorAll(`a[href*=\"ddb://${lookupKey}/\"]`);\n      // logger.debug(`final replace for missing ${lookupKey} references`, compendiumLinks);\n\n      compendiumLinks.forEach((node) => {\n        const target = node.outerHTML;\n        const ddbStub = AdventureMunch.DDB_MAP[lookupKey];\n        const ddbNameGuess = node.textContent.toLowerCase().replace(\" \", \"-\").replace(/[^0-9a-z-]/gi, '');\n        logger.warn(`No Compendium Entry for ${node.outerHTML} attempting to guess a link to DDB`);\n\n        node.setAttribute(\"href\", `https://www.dndbeyond.com/${ddbStub}/${ddbNameGuess}`);\n        doc.body.innerHTML = doc.body.innerHTML.replace(target, node.outerHTML);\n      });\n    }\n\n    doc.body.innerHTML = parseTags(doc.body.innerHTML);\n\n    return doc.body.innerHTML;\n  }\n\n  static _updateProgress(total, count, type) {\n    const localizedType = `ddb-importer.label.${type}`;\n    $(\".import-progress-bar\")\n      .width(`${Math.trunc((count / total) * 100)}%`)\n      .html(\n        `<span>${game.i18n.localize(\"ddb-importer.label.Working\")} (${game.i18n.localize(localizedType)})...</span>`\n      );\n  }\n\n  static _progressNote(note) {\n    $(\".import-progress-bar\").html(`<span>${game.i18n.localize(\"ddb-importer.label.Working\")} (${note})...</span>`);\n  }\n}\n","import utils from \"../../lib/utils.js\";\n\nexport class PageFinder {\n\n  generateContentLinks() {\n    for (const page of this.journal.pages.filter((p) => p.type === \"text\")) {\n      const dom = utils.htmlToDocumentFragment(page.text.content);\n      const chunkElements = dom.querySelectorAll(\"[data-content-chunk-id]\");\n      const chunkIds = new Set();\n      chunkElements.forEach((chunk) => {\n        chunkIds.add(chunk.dataset[\"contentChunkId\"]);\n      });\n      this.contentChunkIds[page._id] = chunkIds;\n\n      const idElements = dom.querySelectorAll(\"[id]\");\n      const elementIds = new Set();\n      idElements.forEach((chunk) => {\n        elementIds.add(chunk.id);\n      });\n      this.elementIds[page._id] = elementIds;\n    }\n  }\n\n  constructor(journal) {\n    this.journal = journal;\n    this.contentChunkIds = {};\n    this.elementIds = {};\n    this.generateContentLinks();\n  }\n\n\n  // returns page Id if content chunk id known in contents\n  getPageIdForContentChunkId(chunkId) {\n    for (const [key, value] of Object.entries(this.contentChunkIds)) {\n      if (value.has(chunkId)) return key;\n    }\n    return undefined;\n  }\n\n  // returns page Id if element id known in contents\n  getPageIdForElementId(elementId) {\n    for (const [key, value] of Object.entries(this.elementIds)) {\n      if (value.has(elementId)) return key;\n      // if (value.has(elementId.replace(/^0+/, \"\"))) return key;\n    }\n    return undefined;\n  }\n\n}\n","import AdventureMunchHelpers from \"./AdventureMunchHelpers.js\";\nimport logger from \"../../logger.js\";\nimport { generateAdventureConfig } from \"../adventure.js\";\nimport Iconizer from \"../../lib/Iconizer.js\";\nimport AdventureMunch from \"./AdventureMunch.js\";\nimport { PageFinder } from \"./PageFinder.js\";\nimport SETTINGS from \"../../settings.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\n\nconst MR_PRIMATES_THIRD_PARTY_REPO = \"MrPrimate/ddb-third-party-scenes\";\nconst RAW_BASE_URL = `https://raw.githubusercontent.com/${MR_PRIMATES_THIRD_PARTY_REPO}`;\nconst RAW_MODULES_URL = `${RAW_BASE_URL}/main/modules.json`;\n\nexport default class ThirdPartyMunch extends FormApplication {\n  /** @override */\n  constructor(object = {}, options = {}) {\n    super(object, options);\n    this._itemsToRevisit = [];\n    this._adventure = {};\n    this._scenePackage = {};\n    this._packageName = \"\";\n    this._description = \"\";\n    this._pageFinders = {};\n    this.adventureMunch = new AdventureMunch();\n  }\n\n  /** @override */\n  static get defaultOptions() {\n    this.pattern = /(@[a-z]*)(\\[)([a-z0-9]*|[a-z0-9.]*)(\\])(\\{)(.*?)(\\})/gmi;\n    this.altpattern = /((data-entity)=\\\\?[\"']?([a-zA-Z]*)\\\\?[\"']?|(data-pack)=\\\\?[\"']?([[\\S.]*)\\\\?[\"']?) data-id=\\\\?[\"']?([a-zA-Z0-9]*)\\\\?[\"']?.*?>(.*?)<\\/a>/gmi;\n\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      id: \"ddb-adventure-import\",\n      classes: [\"ddb-adventure-import\"],\n      title: \"Third Party Munch\",\n      template: \"modules/ddb-importer/handlebars/adventure/import-third.hbs\",\n      width: 400,\n      height: \"auto\",\n    });\n  }\n\n  /** @override */\n  // eslint-disable-next-line class-methods-use-this\n  async getData() {\n    let data;\n    let packages = [];\n\n    try {\n      data = await $.getJSON(RAW_MODULES_URL);\n      this._defaultRepoData = data;\n      for (const [key, value] of Object.entries(data.packages)) {\n        logger.debug(`${key}: ${value}`);\n        packages.push(value);\n      }\n      const partialScenes = game.settings.get(SETTINGS.MODULE_ID, \"third-party-scenes-partial\");\n      packages = packages\n        .filter((p) => p.released || partialScenes)\n        .sort((a, b) => a.name.localeCompare(b.last_nom));\n      logger.debug(\"_defaultRepoData\", this._defaultRepoData);\n    } catch (err) {\n      logger.error(err);\n      logger.warn(`Unable to generate package list.`);\n    }\n\n    return {\n      data,\n      packages,\n      cssClass: \"ddb-importer-third-party-window\"\n    };\n\n  }\n\n  /** @override */\n  activateListeners(html) {\n    super.activateListeners(html);\n\n    html.find(\".dialog-button\").on(\"click\", this._dialogButton.bind(this));\n    html.find(\"#select-package\").on(\"change\", this._selectPackage.bind(this, null, html));\n  }\n\n  async _selectPackage(event, html) {\n    const packageSelectionElement = html.find(\"#select-package\");\n\n    // get selected campaign from html selection\n    const packageSelection = packageSelectionElement[0].selectedOptions[0]\n      ? packageSelectionElement[0].selectedOptions[0].value\n      : undefined;\n\n    const moduleMessage = html.find(\"#ddb-message\");\n\n    if (packageSelection) {\n      const missingModules = [this._defaultRepoData.packages[packageSelection].module].filter((module) => {\n        return !game.modules.get(module)?.active;\n      });\n\n      this._packageName = packageSelectionElement[0].selectedOptions[0].text;\n      this._description = this._defaultRepoData.packages[packageSelection].description;\n\n\n      let message = \"\";\n      if (missingModules.length > 0) {\n        const missingModulesString = missingModules.join(\", \");\n        message += `<p>You need to install the modules: ${missingModulesString}</p>`;\n      }\n\n      const missingBooks = this._defaultRepoData.packages[packageSelection].books.filter((book) => {\n        const matchingJournals = game.journal.some((j) => j.flags.ddb?.bookCode === book);\n        if (matchingJournals) {\n          logger.info(`Found journals for ${book}`);\n          return false;\n        } else {\n          logger.warn(`Missing journals for ${book}`);\n          return true;\n        }\n      });\n\n      if (missingBooks.length > 0) {\n        const bookString = missingBooks.map((bookCode) => DDBHelper.getBookName(bookCode)).join(\", \");\n        message += `<p>You need to use Adventure Muncher to load the following books first: ${bookString}</p>`;\n      }\n\n      if (this._description && this.description !== \"\") {\n        message += `<p><b>Details</b>: ${this._description}</p>`;\n      }\n\n      if (message !== \"\") {\n        moduleMessage[0].innerHTML = message;\n        $(\".ddb-message\").removeClass(\"import-hidden\");\n      }\n\n      if (missingBooks.length === 0 && missingModules.length === 0) {\n        $(\".dialog-button\").prop('disabled', false);\n      }\n\n    } else {\n      moduleMessage[0].innerHTML = \"\";\n      $(\".ddb-message\").addClass(\"import-hidden\");\n    }\n    $('#ddb-adventure-import').css(\"height\", \"auto\");\n  }\n\n  async _createFolders(adventure, folders) {\n    if (folders) {\n      CONFIG.DDBI.ADVENTURE.TEMPORARY.folders[\"null\"] = null;\n      CONFIG.DDBI.ADVENTURE.TEMPORARY.lookups = null;\n\n      // the folder list could be out of order, we need to create all folders with parent null first\n      const firstLevelFolders = folders.filter((folder) => folder.parent === null);\n      await this.adventureMunch.importFolder(firstLevelFolders, adventure, folders);\n    }\n  }\n\n  async _checkForMissingData(adventure, folders) {\n    await this._createFolders(adventure, folders);\n\n    if (adventure.required?.spells && adventure.required.spells.length > 0) {\n      logger.debug(`${adventure.name} - spells required`, adventure.required.spells);\n      ThirdPartyMunch._progressNote(`Checking for missing spells from DDB`);\n      await AdventureMunchHelpers.checkForMissingDocuments(\"spell\", adventure.required.spells);\n    }\n    if (adventure.required?.items && adventure.required.items.length > 0) {\n      logger.debug(`${adventure.name} - items required`, adventure.required.items);\n      ThirdPartyMunch._progressNote(`Checking for missing items from DDB`);\n      await AdventureMunchHelpers.checkForMissingDocuments(\"item\", adventure.required.items);\n    }\n    if (adventure.required?.monsters && adventure.required.monsters.length > 0) {\n      logger.debug(`${adventure.name} - monsters required`, adventure.required.monsters);\n      ThirdPartyMunch._progressNote(`Checking for missing monsters from DDB`);\n      await AdventureMunchHelpers.checkForMissingDocuments(\"monster\", adventure.required.monsters);\n    }\n  }\n\n  static _renderCompleteDialog(title, adventure) {\n    new Dialog(\n      {\n        title: title,\n        content: { adventure },\n        buttons: { two: { label: \"OK\" } },\n      },\n      {\n        classes: [\"dialog\", \"adventure-import-export\"],\n        template: \"modules/ddb-importer/handlebars/adventure/import-complete.hbs\",\n      }\n    ).render(true);\n  }\n\n  static async _fixupScenes(scenes) {\n    try {\n      if (scenes.length > 0) {\n        let totalCount = scenes.length;\n        let currentCount = 0;\n\n        await utils.asyncForEach(scenes, async (obj) => {\n          try {\n            let updatedData = {};\n            switch (obj.documentName) {\n              case \"Scene\": {\n                // In 0.8.x the thumbs don't seem to be auto generated anymore\n                // This code would embed the thumbnail.\n                // Remove once/if resolved\n                if (!obj.thumb) {\n                  const thumbData = await obj.createThumbnail();\n                  updatedData[\"thumb\"] = thumbData.thumb;\n                }\n                await obj.update(updatedData);\n                break;\n              }\n              // no default\n            }\n          } catch (err) {\n            logger.warn(`Error updating references for scene ${obj}`, err);\n          }\n          currentCount += 1;\n          ThirdPartyMunch._updateProgress(totalCount, currentCount, \"References\");\n        });\n      }\n    } catch (err) {\n      // eslint-disable-next-line no-undef\n      logger.warn(`Error during reference update for object ${item}`, err);\n    }\n  }\n\n  static async _createFolder(label, type) {\n    const folderData = {\n      \"name\": label,\n      \"type\": type,\n      \"parent\": null,\n      \"sorting\": \"m\",\n    };\n    const newFolder = await Folder.create(folderData);\n    logger.debug(`Created new folder ${newFolder._id} with data:`, folderData, newFolder);\n    return newFolder;\n  }\n\n  static async _findFolder(label, type) {\n    const folder = game.folders.find((f) =>\n      f.type === type\n      && f.parentFolder === undefined\n      && f.name === label\n    );\n\n    return folder ? folder : ThirdPartyMunch._createFolder(label, type);\n  }\n\n  static _generateMockAdventure(scene) {\n    const monsters = scene.flags?.ddbimporter?.export?.actors && scene.flags?.ddb?.tokens\n      ? scene.flags.ddb.tokens\n        .filter((token) => token.flags?.ddbActorFlags?.id)\n        .map((token) => token.flags.ddbActorFlags.id)\n      : [];\n    return {\n      id: foundry.utils.randomID(),\n      name: DDBHelper.getBookName(scene.flags.ddb.bookCode),\n      description: \"\",\n      system: \"dnd5e\",\n      modules: [],\n      version: \"2.5\",\n      options: {\n        folders: true\n      },\n      folderColour: \"FF0000\",\n      required: {\n        monsters,\n      }\n    };\n  }\n\n  static _generateActorId(token) {\n    if (!foundry.utils.hasProperty(token, \"flags.ddbActorFlags.id\")) logger.warn(\"Token does not link to DDB Actor\", token);\n    const ddbId = token.flags.ddbActorFlags?.id;\n    const folderId = token.flags.actorFolderId;\n    const key = `${ddbId}-${folderId}`;\n    if (CONFIG.DDBI.ADVENTURE.TEMPORARY.mockActors[key]) {\n      return CONFIG.DDBI.ADVENTURE.TEMPORARY.mockActors[key];\n    } else {\n      const existingActor = game.actors.find((actor) =>\n        foundry.utils.hasProperty(actor, \"flags.ddbimporter.id\")\n        && actor.folder?.id == folderId && actor.flags.ddbimporter.id == ddbId\n      );\n      const actorId = existingActor ? existingActor.id : foundry.utils.randomID();\n      CONFIG.DDBI.ADVENTURE.TEMPORARY.mockActors[key] = actorId;\n      return actorId;\n    }\n  }\n\n  static async _linkSceneTokens(scene) {\n    logger.info(`Linking ${scene.name}, ${scene.tokens.length} tokens`);\n    const tokens = await Promise.all(scene.tokens.map(async (token) => {\n      if (token.actorId) {\n        const worldActor = game.actors.get(token.actorId);\n        if (worldActor) {\n          // we merge the override data provided by the token to the actor to get\n          // world specific things like img paths and scales etc\n          const sceneToken = scene.flags.ddb.tokens.find((t) => t._id === token._id);\n          delete sceneToken.scale;\n\n          const newToken = await AdventureMunch._getTokenUpdateData(worldActor, sceneToken);\n          return newToken;\n        }\n      }\n      return token;\n    }));\n    return tokens;\n  }\n\n  async _linkSceneNotes(scene, adventure) {\n    const journalNotes = game.journal.filter((journal) => journal?.flags?.ddb?.bookCode === scene.flags.ddb.bookCode);\n    this.adventureMunch.adventure = foundry.utils.deepClone(adventure);\n\n    const noJournalPinNotes = game.settings.get(SETTINGS.MODULE_ID, \"third-party-scenes-notes-merged\");\n\n    const notes = await Promise.all([scene]\n      .filter((scene) => scene.flags?.ddb?.notes)\n      .map((scene) => scene.flags.ddb.notes)\n      .flat()\n      .map(async (note) => {\n        const noteJournal = noJournalPinNotes\n          ? journalNotes.find((journal) => journal.flags.ddb.cobaltId == note.flags.ddb.parentId)\n          : journalNotes.find((journal) => {\n            const contentChunkIdMatch = note.flags.ddb.contentChunkId\n              ? journal.flags.ddb && note.flags.ddb\n                && journal.flags.ddb.contentChunkId == note.flags.ddb.contentChunkId\n              : false;\n\n            const noContentChunk = !note.flags.ddb.contentChunkId\n              && note.flags.ddb.originalLink && note.flags.ddb.ddbId && note.flags.ddb.parentId\n              && note.flags.ddb.slug && note.flags.ddb.linkName;\n            const originMatch = noContentChunk\n              ? journal.flags.ddb.slug == note.flags.ddb.slug\n                && journal.flags.ddb.ddbId == note.flags.ddbId\n                && journal.flags.ddb.parentId == note.flags.ddb.parentId\n                && journal.flags.ddb.cobaltId == note.flags.ddb.cobaltId\n                && journal.flags.ddb.originalLink == note.flags.ddb.originalLink\n                && journal.flags.ddb.linkName == note.flags.ddb.linkName\n              : false;\n            const journalNameMatch = !contentChunkIdMatch && !originMatch\n              ? journal.name.trim() == note.label.trim() // ||\n              //  journal.pages.some((page) => page.name.trim() === note.label.trim())\n              : false;\n            return contentChunkIdMatch || originMatch || journalNameMatch;\n\n          });\n\n        if (noteJournal) {\n          logger.info(`Found note \"${note.label}\" matched to Journal with ID \"${noteJournal.id}\" (${noteJournal.name})`);\n          note.flags.ddb.journalId = noteJournal.id;\n          // eslint-disable-next-line require-atomic-updates\n          note.icon = await Iconizer.generateIcon(this.adventureMunch, note.label);\n          if (noJournalPinNotes) {\n            note.flags.ddb.labelName = `${note.label}`;\n            note.flags.ddb.slugLink = note.label.replace(/[^\\w\\d]+/g, \"\").replace(/^([a-zA-Z]?)0+/, \"$1\");\n            note.flags.anchor = {\n              slug: note.flags.ddb.slugLink\n            };\n            note.text = note.label;\n\n            if (!this._pageFinders[noteJournal._id]) {\n              this._pageFinders[noteJournal._id] = new PageFinder(noteJournal);\n            }\n            const contentChunkIdPageId = foundry.utils.hasProperty(note, \"flags.ddb.contentChunkId\")\n              ? this._pageFinders[noteJournal._id].getPageIdForContentChunkId(note.flags.ddb.contentChunkId)\n              : undefined;\n            const slugLinkPageId = foundry.utils.hasProperty(note, \"flags.ddb.slugLink\")\n              ? this._pageFinders[noteJournal._id].getPageIdForElementId(note.flags.ddb.slugLink)\n              : undefined;\n\n            // console.warn(\"MATCHES\", { slugLinkPageId, contentChunkIdPageId, noteFlags: note.flags.ddb });\n            // console.warn(\"PageIds\", noteJournal.pages.map((p) => {return {id: p._id, flags: p.flags.ddb}}));\n            const journalPage = noteJournal.pages.find((page) =>\n              foundry.utils.hasProperty(page, \"flags.ddb\")\n              && page.flags.ddb.parentId == note.flags.ddb.parentId\n              && (page.flags.ddb.slug == note.flags.ddb.slug\n              || page.flags.ddb.slug.replace(/^([a-zA-Z]?)0+/, \"$1\") == note.flags.ddb.slug\n              || page.flags.ddb.slug.startsWith(note.flags.ddb.slug)\n              || note.flags.ddb.slug.startsWith(page.flags.ddb.slug))\n              && (page._id === contentChunkIdPageId || page._id === slugLinkPageId)\n            );\n\n            if (journalPage) {\n              note.pageId = journalPage._id;\n            }\n          }\n        }\n        return note;\n      }));\n\n    const positionedNotes = [];\n    notes.forEach((note) => {\n      if (note.flags?.ddb?.journalId) {\n        note.positions.forEach((position) => {\n          logger.info(`Matching ${note.label} to position ${position.x}/${position.y}`);\n          const noteId = foundry.utils.randomID();\n          const n = {\n            \"_id\": noteId,\n            \"flags\": {\n              \"ddb\": note.flags.ddb,\n              \"importid\": noteId,\n              \"anchor\": note.flags.anchor ?? {},\n            },\n            \"entryId\": note.flags.ddb.journalId,\n            \"x\": position.x,\n            \"y\": position.y,\n            \"icon\": note.icon, // \"assets/icons/1.svg\",\n            \"iconSize\": note.iconSize ? note.iconSize : 40,\n            \"iconTint\": \"\",\n            \"text\": note.text ? note.text : \"\",\n            \"fontFamily\": note.fontFamily ? note.fontFamily : \"Signika\",\n            \"fontSize\": note.fontSize ? note.fontSize : 48,\n            \"textAnchor\": 1,\n            \"textColor\": note.textColor ? note.textColor : \"\",\n            \"pageId\": note.pageId ? note.pageId : undefined,\n          };\n          positionedNotes.push(n);\n        });\n      }\n    });\n\n    return positionedNotes;\n  }\n\n  async _getAdjustedScenes() {\n    const adjustedScenes = this._scenePackage.scenes\n      .filter((scene) => scene.flags?.ddbimporter?.export?.actors && scene.flags?.ddb?.tokens);\n\n    await utils.asyncForEach(adjustedScenes, async(scene) => {\n      logger.debug(`Adjusting scene ${scene.name}`);\n      const mockAdventure = ThirdPartyMunch._generateMockAdventure(scene);\n      if (scene.flags?.ddbimporter?.export?.actors && scene.flags?.ddb?.tokens) {\n        await this._checkForMissingData(mockAdventure, []);\n        const bookName = DDBHelper.getBookName(scene.flags.ddb.bookCode);\n        const actorFolder = await ThirdPartyMunch._findFolder(bookName, \"Actor\");\n        scene.tokens = scene.flags.ddb.tokens.map((token) => {\n          token.flags.actorFolderId = actorFolder.id;\n          token.actorId = ThirdPartyMunch._generateActorId(token);\n          if (foundry.utils.hasProperty(token, \"actorData\")) {\n            foundry.utils.setProperty(token, \"delta\", foundry.utils.deepClone(token.actorData));\n            delete token.actorData;\n          }\n          return token;\n        });\n\n      }\n      // eslint-disable-next-line require-atomic-updates\n      scene.notes = await this._linkSceneNotes(scene, mockAdventure);\n      logger.debug(`Finished scene adjustment for ${scene.name}`);\n    });\n\n    return adjustedScenes;\n  }\n\n  async _getScene(scene) {\n    const compendiumId = scene.flags.ddbimporter.export.compendium;\n    const compendium = game.packs.get(compendiumId);\n    const folderName = this._scenePackage.folder ? this._scenePackage.folder : compendium.metadata.label;\n    const folder = await ThirdPartyMunch._findFolder(folderName, \"Scene\");\n    const compendiumScene = compendium.index.find((s) => s.name === scene.name);\n\n    const existingScene = game.scenes.find((s) =>\n      s.name === scene.name\n      && (s.folder?.id === folder.id || s.folder?.ancestors?.some((f) => f.id === folder.id))\n    );\n\n    logger.debug(\"Third Party Scene Processing\", {\n      existingScene,\n      scene,\n      folder,\n      folderName,\n      compendiumScene\n    });\n\n    // if scene already exists, update\n    if (existingScene) {\n      logger.info(`Updating ${scene.name}`);\n      logger.debug(`${scene.name}update data`, { scene, existingScene });\n      await existingScene.update(scene);\n      return existingScene;\n    } else {\n      scene.folder = folder.id;\n      const worldScene = await game.scenes.importFromCompendium(compendium, compendiumScene._id, scene, { keepId: true });\n      logger.info(`Scene: ${scene.name} folder:`, folder);\n      logger.debug(\"worldScene:\", worldScene);\n      return worldScene;\n    }\n  }\n\n  async _updateScenes(scenes) {\n    logger.debug(\"Processing scenes!\", scenes);\n    const filteredScenes = scenes\n      .filter((scene) => scene.flags?.ddbimporter?.export?.compendium)\n      // does the scene match a compendium scene\n      .filter(async (scene) => {\n        const compendium = game.packs.get(scene.flags.ddbimporter.export.compendium);\n        const compendiumScene = compendium.index.find((s) => s.name === scene.name);\n        if (compendiumScene) return true;\n        else return false;\n      });\n\n    const processedScenes = [];\n\n    await utils.asyncForEach(filteredScenes, async(scene) => {\n      logger.debug(`Processing scene ${scene.name} with DDB Updates`);\n      const tokenUpdates = foundry.utils.duplicate(scene.tokens);\n      logger.debug(\"tokenUpdates\", tokenUpdates);\n      scene.tokens = [];\n      const worldScene = await this._getScene(scene);\n\n      logger.debug(\"World scene to add tokens to\", worldScene);\n      const existingTokens = tokenUpdates.filter((t) => worldScene.tokens.some((wT) => t._id === wT._id));\n      logger.debug(\"existingTokens\", existingTokens);\n      await worldScene.updateEmbeddedDocuments(\"Token\", existingTokens, { keepId: true, keepEmbeddedIds: true });\n      const newTokens = tokenUpdates.filter((t) => !worldScene.tokens.some((wT) => t._id === wT._id));\n      logger.debug(\"newTokens\", newTokens);\n      await worldScene.createEmbeddedDocuments(\"Token\", newTokens, { keepId: true, keepEmbeddedIds: true });\n\n      logger.debug(`Finished scene DDB update ${scene.name}`);\n    });\n    return processedScenes;\n  }\n\n  async _dialogButton(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    const a = event.currentTarget;\n    const action = a.dataset.button;\n    const packageName = this._packageName;\n\n    if (action === \"import\") {\n      $(\".import-progress\").toggleClass(\"import-hidden\");\n      $(\".ddb-overlay\").toggleClass(\"import-invalid\");\n      const selectedPackage = $(\"#select-package\").val();\n      const packageURL = `${RAW_BASE_URL}/main/${selectedPackage}/module.json`;\n\n      this._scenePackage = await fetch(packageURL)\n        .then((response) => {\n          if (response.status === 200 || response.status === 0) {\n            return Promise.resolve(response.json());\n          } else {\n            return Promise.reject(new Error(response.statusText));\n          }\n        });\n\n      // check for valid json object?\n\n      logger.debug(\"_scenePackage\", this._scenePackage);\n\n      CONFIG.DDBI.ADVENTURE.TEMPORARY = {\n        folders: {},\n        import: {},\n        actors: {},\n        sceneTokens: {},\n        mockActors: {},\n      };\n\n      this.folderNames = this._scenePackage.folder\n        ? [this._scenePackage.folder]\n        : [...new Set(this._scenePackage.scenes\n          .filter((scene) => scene.flags?.ddbimporter?.export?.compendium)\n          .map((scene) => {\n            const compendiumId = scene.flags.ddbimporter.export.compendium;\n            const compendium = game.packs.get(compendiumId);\n            return compendium.metadata.label;\n          }))];\n\n      // We need to check for potential Scene Folders and Create if missing\n      const compendiumLabels = this.folderNames\n        .map((label) => {\n          return ThirdPartyMunch._findFolder(label, \"Scene\");\n        });\n\n      await Promise.all(compendiumLabels);\n\n      const adventureLabels = [...new Set(this._scenePackage.scenes\n        .filter((scene) => scene.flags?.ddb?.bookCode)\n        .map((scene) => {\n          return DDBHelper.getBookName(scene.flags.ddb.bookCode);\n        }))]\n        .map((label) => {\n          return ThirdPartyMunch._findFolder(label, \"Actor\");\n        });\n      await Promise.all(adventureLabels);\n\n      logger.debug(\"Competed folder creation\");\n\n      // import any missing monsters into the compendium\n      // add tokens to scene\n      // add notes to scene\n      const adjustedScenes = await this._getAdjustedScenes(this._scenePackage.scenes);\n\n      logger.debug(\"adjustedScenes\", foundry.utils.duplicate(adjustedScenes));\n\n      logger.debug(\"About to generate Token Actors\");\n      // load token actors into world\n      await utils.asyncForEach(adjustedScenes, async(scene) => {\n        logger.debug(`Generating scene actors for ${scene.name}`);\n        await this.adventureMunch.generateTokenActors(scene);\n        logger.debug(`Finished scene actors for ${scene.name}`);\n      });\n\n      // link tokens on scene to imported actors\n      const tokenAdjustedScenes = await Promise.all(adjustedScenes\n        .map(async (scene) => {\n          logger.debug(`Generating scene tokens for ${scene.name}`);\n          const newScene = foundry.utils.duplicate(scene);\n          newScene.tokens = await ThirdPartyMunch._linkSceneTokens(scene);\n          return newScene;\n        })\n      );\n\n      logger.debug(\"tokenAdjustedScenes\", tokenAdjustedScenes);\n\n      CONFIG.DDBI.ADVENTURE.TEMPORARY.lookups = await generateAdventureConfig(true);\n      logger.debug(\"Lookups loaded\", CONFIG.DDBI.ADVENTURE.TEMPORARY.lookups.lookups);\n\n      const scenes = await this._updateScenes(tokenAdjustedScenes);\n      // logger.debug(\"finalScenes\", scenes);\n\n      const toTimer = setTimeout(() => {\n        logger.warn(`Reference update timed out.`);\n        ThirdPartyMunch._renderCompleteDialog(`Un-Successful Import of ${packageName}`, { name: packageName });\n        this.close();\n      }, 120000);\n\n      // clearup remaining scene things\n      await ThirdPartyMunch._fixupScenes(scenes);\n      clearTimeout(toTimer);\n\n      $(\".ddb-overlay\").toggleClass(\"import-invalid\");\n\n      ThirdPartyMunch._renderCompleteDialog(`Successful Import of ${packageName}`, { name: packageName });\n\n      // eslint-disable-next-line require-atomic-updates\n      CONFIG.DDBI.ADVENTURE.TEMPORARY = {};\n      this.close();\n    }\n  }\n\n  static _updateProgress(total, count, type) {\n    const localizedType = `ddb-importer.label.${type}`;\n    $(\".import-progress-bar\")\n      .width(`${Math.trunc((count / total) * 100)}%`)\n      .html(`<span>${game.i18n.localize(\"ddb-importer.label.Working\")} (${game.i18n.localize(localizedType)})...</span>`);\n  }\n\n  static _progressNote(note) {\n    $(\".import-progress-bar\")\n      .html(`<span>${game.i18n.localize(\"ddb-importer.label.Working\")} (${note})...</span>`);\n  }\n}\n","import logger from \"../../logger.js\";\nimport { generateBackground } from \"../../parser/character/bio.js\";\n// import { parseTags } from \"../../lib/DDBReferenceLinker.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBItemImporter from \"../../lib/DDBItemImporter.js\";\nimport DDBFeature from \"../../parser/features/DDBFeature.js\";\n\n// const BACKGROUND_TEMPLATE = {\n//   \"name\": \"\",\n//   \"type\": \"background\",\n//   \"system\": {\n//     \"description\": {\n//       \"value\": \"\",\n//       \"chat\": \"\",\n//     },\n//     \"type\": {\n//       \"value\": \"background\",\n//     },\n//     \"source\": \"\",\n//   },\n//   \"sort\": 2600000,\n//   \"flags\": {\n//     \"ddbimporter\": {},\n//     \"obsidian\": {\n//       \"source\": {\n//         \"type\": \"background\"\n//       }\n//     },\n//   },\n//   \"img\": \"icons/skills/trades/academics-book-study-purple.webp\",\n// };\n\n// async function buildBase(data) {\n//   let result = foundry.utils.duplicate(BACKGROUND_TEMPLATE);\n//   const bgData = generateBackground(data);\n//   result.name = data.name;\n//   result.system.description.value += `${bgData.description}\\n\\n`;\n\n//   result.flags.ddbimporter = {\n//     featId: data.id,\n//     version: CONFIG.DDBI.version,\n//   };\n\n//   result.system.source = DDBHelper.parseSource(data);\n//   result.system.description.value = parseTags(result.system.description.value);\n//   result.system.description.value = await generateTable(result.name, result.system.description.value, true, \"background\");\n\n//   return result;\n// }\n\n\nasync function buildBackground(backgroundData) {\n  let featDefinition = generateBackground(backgroundData);\n\n  const source = DDBHelper.parseSource(featDefinition);\n  const ddbFeature = new DDBFeature({\n    ddbData: null,\n    ddbDefinition: featDefinition,\n    rawCharacter: null,\n    type: \"background\",\n    source,\n    noMods: true,\n  });\n\n  ddbFeature.build();\n  logger.debug(`DDBFeatures.getFeaturesFromDefinition: ${ddbFeature.ddbDefinition.name}`, {\n    ddbFeature,\n    featDefinition,\n  });\n\n  await ddbFeature.generateAdvancements();\n  const featIds = foundry.utils.getProperty(backgroundData, \"featList.featIds\") ?? [];\n  await ddbFeature.buildBackgroundFeatAdvancements(featIds);\n\n  return ddbFeature.data;\n\n}\n\n\nexport async function getBackgrounds(data) {\n  logger.debug(\"get backgrounds started\");\n  const updateBool = game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\");\n\n  let backgrounds = [];\n\n  for (const background of data) {\n    logger.debug(`${background.name} background parsing started...`);\n    const parsedBackground = await buildBackground(background);\n    backgrounds.push(parsedBackground);\n  }\n\n  const itemHandler = await DDBItemImporter.buildHandler(\"backgrounds\", backgrounds, updateBool, { chrisPremades: true });\n  return itemHandler.documents;\n}\n","// Main module class\nimport DDBMuncher from \"../apps/DDBMuncher.js\";\nimport { getBackgrounds } from \"./backgrounds/backgrounds.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport DDBCampaigns from \"../lib/DDBCampaigns.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\nimport PatreonHelper from \"../lib/PatreonHelper.js\";\nimport { createDDBCompendium } from \"../hooks/ready/checkCompendiums.js\";\n\nfunction getBackgroundData() {\n  const cobaltCookie = getCobalt();\n  const campaignId = DDBCampaigns.getCampaignId();\n  const parsingApi = DDBProxy.getProxy();\n  const betaKey = PatreonHelper.getPatreonKey();\n  const body = { cobalt: cobaltCookie, campaignId: campaignId, betaKey: betaKey };\n  const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n  return new Promise((resolve, reject) => {\n    fetch(`${parsingApi}/proxy/backgrounds`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (debugJson) {\n          FileHelper.download(JSON.stringify(data), `backgrounds-raw.json`, \"application/json\");\n        }\n        if (!data.success) {\n          DDBMuncher.munchNote(`Failure: ${data.message}`);\n          reject(data.message);\n        }\n        return data;\n      })\n      .then((data) => getBackgrounds(data.data))\n      .then((data) => resolve(data))\n      .catch((error) => reject(error));\n  });\n}\n\nexport async function parseBackgrounds() {\n\n  const backgroundsCompData = SETTINGS.COMPENDIUMS.find((c) => c.title === \"Backgrounds\");\n  await createDDBCompendium(backgroundsCompData);\n\n  const results = await getBackgroundData();\n\n  return results;\n}\n","// Main module class\nimport logger from \"../logger.js\";\nimport PatreonHelper from \"../lib/PatreonHelper.js\";\nimport { parseItems } from \"../muncher/items.js\";\nimport { parseSpells } from \"../muncher/spells.js\";\nimport { parseRaces } from \"../muncher/races.js\";\nimport { parseFeats } from \"../muncher/feats.js\";\nimport { parseClasses } from \"../muncher/classes.js\";\nimport { parseFrames } from \"../muncher/frames.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport { base64Check } from \"../lib/base64Check.js\";\nimport { downloadAdventureConfig } from \"../muncher/adventure.js\";\nimport AdventureMunch from \"../muncher/adventure/AdventureMunch.js\";\nimport ThirdPartyMunch from \"../muncher/adventure/ThirdPartyMunch.js\";\nimport MuncherSettings from \"../lib/MuncherSettings.js\";\nimport DDBMacros from \"../effects/DDBMacros.js\";\nimport { importCacheLoad } from \"../lib/DDBReferenceLinker.js\";\nimport { updateWorldMonsters, resetCompendiumActorImages } from \"../muncher/tools.js\";\nimport { parseBackgrounds } from \"../muncher/backgrounds.js\";\nimport { parseTransports } from \"../muncher/vehicles.js\";\nimport DDBSources from \"./DDBSources.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBMonsterFactory from \"../parser/DDBMonsterFactory.js\";\nimport { DDBCompendiumFolders } from \"../lib/DDBCompendiumFolders.js\";\nimport { updateItemPrices } from \"../muncher/prices.js\";\n\nexport default class DDBMuncher extends Application {\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.id = \"ddb-importer-monsters\";\n    options.template = \"modules/ddb-importer/handlebars/munch.hbs\";\n    options.resizable = false;\n    options.height = \"auto\";\n    options.width = 800;\n    options.title = \"MrPrimate's Muncher\";\n    options.classes = [\"ddb-muncher\", \"sheet\"];\n    options.tabs = [{ navSelector: \".tabs\", contentSelector: \"div\", initial: \"settings\" }];\n    return options;\n  }\n\n  /**\n   * Display information when Munching\n   * @param {*} note\n   * @param {*} nameField\n   * @param {*} monsterNote\n   */\n  static munchNote(note, nameField = false, monsterNote = false) {\n    if (nameField) {\n      $(\"#munching-task-name\").text(note);\n      $(\"#ddb-importer-monsters\").css(\"height\", \"auto\");\n    } else if (monsterNote) {\n      $(\"#munching-task-monster\").text(note);\n      $(\"#ddb-importer-monsters\").css(\"height\", \"auto\");\n    } else {\n      $(\"#munching-task-notes\").text(note);\n      $(\"#ddb-importer-monsters\").css(\"height\", \"auto\");\n    }\n  }\n\n  static munchMonsters() {\n    DDBMuncher.munchNote(`Downloading monsters...`, true);\n    $('button[id^=\"munch-\"]').prop('disabled', true);\n    $('button[id^=\"adventure-config-start\"]').prop('disabled', true);\n    DDBMuncher.parseCritters();\n  }\n\n  static munchVehicles() {\n    DDBMuncher.munchNote(`Downloading vehicles...`, true);\n    $('button[id^=\"munch-\"]').prop('disabled', true);\n    $('button[id^=\"adventure-config-start\"]').prop('disabled', true);\n    DDBMuncher.parseTransports();\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n    html.find(\"#munch-monsters-start\").click(async () => {\n      DDBMuncher.munchMonsters();\n    });\n    html.find(\"#munch-vehicles-start\").click(async () => {\n      DDBMuncher.munchVehicles();\n    });\n    html.find(\"#munch-source-select\").click(async () => {\n      new DDBSources().render(true);\n    });\n\n    html.find(\"#munch-spells-start\").click(async () => {\n      DDBMuncher.munchNote(`Downloading spells...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.parseSpells();\n    });\n    html.find(\"#munch-items-start\").click(async () => {\n      DDBMuncher.munchNote(`Downloading items...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.parseItems();\n    });\n    html.find(\"#munch-races-start\").click(async () => {\n      DDBMuncher.munchNote(`Downloading races...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.parseRaces();\n    });\n    html.find(\"#munch-feats-start\").click(async () => {\n      DDBMuncher.munchNote(`Downloading feats...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.parseFeats();\n    });\n    html.find(\"#munch-backgrounds-start\").click(async () => {\n      DDBMuncher.munchNote(`Downloading backgrounds...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.parseBackgrounds();\n    });\n    html.find(\"#munch-classes-start\").click(async () => {\n      DDBMuncher.munchNote(`Downloading classes...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.parseClasses();\n    });\n    html.find(\"#munch-frames-start\").click(async () => {\n      DDBMuncher.munchNote(`Downloading frames...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.parseFrames();\n    });\n    html.find(\"#munch-adventure-config-start\").click(async () => {\n      DDBMuncher.munchNote(`Generating config file...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.generateAdventureConfig();\n    });\n    html.find(\"#munch-adventure-import-start\").click(async () => {\n      new AdventureMunch().render(true);\n    });\n    html.find(\"#munch-adventure-third-party-start\").click(async () => {\n      new ThirdPartyMunch().render(true);\n    });\n    html.find(\"#munch-migrate-compendium-monster\").click(async () => {\n      DDBMuncher.munchNote(`Migrating monster compendium...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.migrateCompendiumFolders(\"monsters\");\n    });\n    html.find(\"#munch-migrate-compendium-spell\").click(async () => {\n      DDBMuncher.munchNote(`Migrating spell compendium...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.migrateCompendiumFolders(\"spells\");\n    });\n    html.find(\"#munch-migrate-compendium-item\").click(async () => {\n      DDBMuncher.munchNote(`Migrating item compendium...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.migrateCompendiumFolders(\"items\");\n    });\n    html.find(\"#munch-fix-base64\").click(async () => {\n      DDBMuncher.munchNote(`Checking Scenes for base64 data...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.base64Check();\n    });\n    html.find(\"#munch-world-monster-update\").click(async () => {\n      DDBMuncher.munchNote(`Updating world actors...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.updateWorldMonsters();\n    });\n    html.find(\"#munch-reset-images\").click(async () => {\n      DDBMuncher.munchNote(`Resetting images...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.resetCompendiumActorImages();\n    });\n    html.find(\"#munch-xanthar-price\").click(async () => {\n      DDBMuncher.munchNote(`Updating item prices...`, true);\n      $('button[id^=\"munch-\"]').prop('disabled', true);\n      DDBMuncher.addItemPrices();\n    });\n\n    // watch the change of the import-policy-selector checkboxes\n    $(html)\n      .find(\n        [\n          '.munching-generic-config input[type=\"checkbox\"]',\n          '.munching-spell-config input[type=\"checkbox\"]',\n          '.munching-item-config input[type=\"checkbox\"]',\n          '.munching-monster-config input[type=\"checkbox\"]',\n          '.munching-monster-world-update-config input[type=\"checkbox\"]',\n        ].join(\",\")\n      )\n      .on(\"change\", (event) => {\n        MuncherSettings.updateMuncherSettings(html, event, this);\n      });\n\n\n    html.find(\"#monster-munch-filter\").on(\"keyup\", (event) => {\n      event.preventDefault();\n      if (event.key !== \"Enter\") return; // Use `.key` instead.\n      DDBMuncher.munchMonsters();\n    });\n\n    // compendium style migrations\n    html.find(\"#compendium-folder-style-monster\").on(\"change\", async () => {\n      const style = html.find(\"#compendium-folder-style-monster\");\n      const importStyle = style[0].selectedOptions[0] ? style[0].selectedOptions[0].value : \"TYPE\";\n      game.settings.set(\"ddb-importer\", \"munching-selection-compendium-folders-monster\", importStyle);\n    });\n    html.find(\"#compendium-folder-style-spell\").on(\"change\", async () => {\n      const style = html.find(\"#compendium-folder-style-spell\");\n      const importStyle = style[0].selectedOptions[0] ? style[0].selectedOptions[0].value : \"SCHOOL\";\n      game.settings.set(\"ddb-importer\", \"munching-selection-compendium-folders-spell\", importStyle);\n    });\n    html.find(\"#compendium-folder-style-item\").on(\"change\", async () => {\n      const style = html.find(\"#compendium-folder-style-item\");\n      const importStyle = style[0].selectedOptions[0] ? style[0].selectedOptions[0].value : \"TYPE\";\n      game.settings.set(\"ddb-importer\", \"munching-selection-compendium-folders-item\", importStyle);\n    });\n\n    this.close();\n  }\n\n  static enableButtons() {\n    const cobalt = getCobalt() != \"\";\n    const tier = PatreonHelper.getPatreonTier();\n    const tiers = PatreonHelper.calculateAccessMatrix(tier);\n\n    if (cobalt) {\n      $('button[id^=\"munch-spells-start\"]').prop('disabled', false);\n      $('button[id^=\"munch-items-start\"]').prop('disabled', false);\n      $('button[id^=\"munch-adventure-config-start\"]').prop('disabled', false);\n      $('button[id^=\"munch-adventure-import-start\"]').prop('disabled', false);\n      $('button[id^=\"munch-adventure-third-party-start\"]').prop('disabled', false);\n      $('button[id^=\"munch-migrate-compendium-monster\"]').prop('disabled', false);\n      $('button[id^=\"munch-migrate-compendium-spell\"]').prop('disabled', false);\n      $('button[id^=\"munch-migrate-compendium-item\"]').prop('disabled', false);\n      $('button[id^=\"munch-fix-base64\"]').prop('disabled', false);\n      $('button[id^=\"munch-reset-images\"]').prop('disabled', false);\n      $('button[id^=\"munch-xanthar-price\"]').prop('disabled', false);\n\n      if (tiers.all) {\n        $('button[id^=\"munch-monsters-start\"]').prop('disabled', false);\n        $('button[id^=\"munch-source-select\"]').prop('disabled', false);\n      }\n      if (tiers.supporter) {\n        $('button[id^=\"munch-races-start\"]').prop('disabled', false);\n        $('button[id^=\"munch-feats-start\"]').prop('disabled', false);\n        $('button[id^=\"munch-frames-start\"]').prop('disabled', false);\n        $('button[id^=\"munch-classes-start\"]').prop('disabled', false);\n        $('button[id^=\"munch-backgrounds-start\"]').prop('disabled', false);\n      }\n      if (tiers.experimentalMid) {\n        $('button[id^=\"munch-vehicles-start\"]').prop('disabled', false);\n      }\n    }\n  }\n\n  static async parseCritters() {\n    try {\n      logger.info(\"Munching monsters!\");\n      // await DDBMuncher.generateCompendiumFolders(\"monsters\");\n      await importCacheLoad();\n      const monsterFactory = new DDBMonsterFactory({ munchNote: DDBMuncher.munchNote });\n      const result = await monsterFactory.processIntoCompendium();\n      await DDBMuncher.cleanupCompendiumFolders(\"monsters\");\n      DDBMuncher.munchNote(`Finished importing ${result} monsters!`, true);\n      DDBMuncher.munchNote(\"\");\n      DDBMuncher.enableButtons();\n    } catch (error) {\n      logger.error(error);\n      logger.error(error.stack);\n    }\n  }\n\n  static async parseTransports() {\n    try {\n      logger.info(\"Munching vehicles!\");\n      const result = await parseTransports();\n      DDBMuncher.munchNote(`Finished importing ${result} vehicles!`, true);\n      DDBMuncher.munchNote(\"\");\n      DDBMuncher.enableButtons();\n    } catch (error) {\n      logger.error(error);\n      logger.error(error.stack);\n    }\n  }\n\n  static async parseSpells() {\n    try {\n      logger.info(\"Munching spells!\");\n      if (game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-add-spell-effects\")) {\n        await DDBMacros.createWorldMacros(\"spells\");\n      }\n      await importCacheLoad();\n      await parseSpells();\n      await DDBMuncher.cleanupCompendiumFolders(\"spells\");\n      DDBMuncher.munchNote(`Finished importing spells!`, true);\n      DDBMuncher.munchNote(\"\");\n      DDBMuncher.enableButtons();\n    } catch (error) {\n      logger.error(error);\n      logger.error(error.stack);\n    }\n  }\n\n  static async cleanupCompendiumFolders(type) {\n    const compendiumFolders = new DDBCompendiumFolders(type);\n    DDBMuncher.munchNote(`Cleaning compendium folders...`, true);\n    await compendiumFolders.loadCompendium(type);\n    await compendiumFolders.removeUnusedFolders();\n    DDBMuncher.munchNote(`Cleaning compendium folders complete`, true);\n  }\n\n  static async generateCompendiumFolders(type) {\n    const compendiumFolders = new DDBCompendiumFolders(type);\n    DDBMuncher.munchNote(`Checking compendium folders..`, true);\n    await compendiumFolders.loadCompendium(type);\n    DDBMuncher.munchNote(\"\", true);\n  }\n\n  static async parseItems() {\n    try {\n      logger.info(\"Munching items!\");\n      // await DDBMuncher.generateCompendiumFolders(\"items\");\n      await importCacheLoad();\n      await parseItems();\n      await DDBMuncher.cleanupCompendiumFolders(\"items\");\n      DDBMuncher.munchNote(`Finished importing items!`, true);\n      DDBMuncher.munchNote(\"\");\n      DDBMuncher.enableButtons();\n    } catch (error) {\n      logger.error(error);\n      logger.error(error.stack);\n    }\n  }\n\n  static async parseRaces() {\n    try {\n      logger.info(\"Munching races!\");\n      await importCacheLoad();\n      const result = await parseRaces();\n      DDBMuncher.munchNote(`Finished importing ${result.length} races and features!`, true);\n      DDBMuncher.munchNote(\"\");\n      DDBMuncher.enableButtons();\n    } catch (error) {\n      logger.error(error);\n      logger.error(error.stack);\n    }\n  }\n\n  static async parseFeats() {\n    try {\n      logger.info(\"Munching feats!\");\n      await importCacheLoad();\n      const result = await parseFeats();\n      DDBMuncher.munchNote(`Finished importing ${result.length} feats!`, true);\n      DDBMuncher.munchNote(\"\");\n      DDBMuncher.enableButtons();\n    } catch (error) {\n      logger.error(error);\n      logger.error(error.stack);\n    }\n  }\n\n  static async parseBackgrounds() {\n    try {\n      logger.info(\"Munching backgrounds!\");\n      await importCacheLoad();\n      const result = await parseBackgrounds();\n      DDBMuncher.munchNote(`Finished importing ${result.length} backgrounds!`, true);\n      DDBMuncher.munchNote(\"\");\n      DDBMuncher.enableButtons();\n    } catch (error) {\n      logger.error(error);\n      logger.error(error.stack);\n    }\n  }\n\n  static async parseClasses() {\n    try {\n      logger.info(\"Munching classes!\");\n      await importCacheLoad();\n      const result = await parseClasses();\n      DDBMuncher.munchNote(`Finished importing ${result.length} classes and features!`, true);\n      DDBMuncher.munchNote(\"\");\n      DDBMuncher.enableButtons();\n    } catch (error) {\n      logger.error(error);\n      logger.error(error.stack);\n    }\n  }\n\n  static async parseFrames() {\n    try {\n      logger.info(\"Munching frames!\");\n      const result = await parseFrames();\n      DDBMuncher.munchNote(`Finished importing ${result.length} frames!`, true);\n      DDBMuncher.munchNote(\"\");\n      DDBMuncher.enableButtons();\n    } catch (error) {\n      logger.error(error);\n      logger.error(error.stack);\n    }\n  }\n\n  static async generateAdventureConfig() {\n    try {\n      logger.info(\"Generating adventure config!\");\n      await downloadAdventureConfig();\n      DDBMuncher.munchNote(`Downloading config file`, true);\n      DDBMuncher.munchNote(\"\");\n      DDBMuncher.enableButtons();\n    } catch (error) {\n      logger.error(error);\n      logger.error(error.stack);\n    }\n  }\n\n  static async updateWorldMonsters() {\n    try {\n      logger.info(\"Updating world monsters!\");\n      await updateWorldMonsters();\n      DDBMuncher.enableButtons();\n    } catch (error) {\n      logger.error(error);\n      logger.error(error.stack);\n    }\n  }\n\n  static async migrateCompendiumFolders(type) {\n    logger.info(`Migrating ${type} compendium`);\n    const compendiumFolders = new DDBCompendiumFolders(type);\n    await compendiumFolders.loadCompendium(type);\n    await compendiumFolders.migrateExistingCompendium();\n    DDBMuncher.munchNote(`Migrating complete.`, true);\n    DDBMuncher.enableButtons();\n  }\n\n  static async base64Check() {\n    logger.info(\"Checking base64 in scenes\");\n    const results = base64Check();\n    let notifyString = `Check complete.`;\n    if (results.fixedScenes.length === 0 && results.badScenes.length === 0) {\n      notifyString += \" No problems found.\";\n    } else {\n      if (results.fixedScenes.length > 0) notifyString += ` Fixing ${results.fixedScenes.length} scenes (wait untill uploads complete).`;\n      if (results.badScenes.length > 0) notifyString += ` Found ${results.badScenes.length} scenes that I couldn't fix.`;\n    }\n    DDBMuncher.munchNote(notifyString, true);\n    DDBMuncher.enableButtons();\n  }\n\n  static async resetCompendiumActorImages() {\n    logger.info(\"Resetting compendium actor images\");\n    const results = await resetCompendiumActorImages();\n    const notifyString = `Reset ${results.length} compendium actors.`;\n    DDBMuncher.munchNote(notifyString, true);\n    DDBMuncher.enableButtons();\n  }\n\n  static async addItemPrices() {\n    logger.info(\"Checking to see if items need prices...\");\n    const results = await updateItemPrices();\n    const notifyString = `Added ${results.length} prices to items.`;\n    DDBMuncher.munchNote(notifyString, true);\n    DDBMuncher.enableButtons();\n  }\n\n  async getData() { // eslint-disable-line class-methods-use-this\n    const resultData = MuncherSettings.getMuncherSettings();\n    await importCacheLoad();\n    return resultData;\n  }\n}\n","import DDBMuncher from \"./DDBMuncher.js\";\n\nexport default class DDBSources extends FormApplication {\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.id = \"ddb-importer-sources\";\n    options.template = \"modules/ddb-importer/handlebars/sources.hbs\";\n    options.width = 500;\n    return options;\n  }\n\n  static getSourcesLookups(selected) {\n    const selections = CONFIG.DDB.sources\n      .filter((source) => source.isReleased && source.sourceCategoryId !== 9 && source.sourceCategoryId !== 3)\n      .map((source) => {\n        const details = {\n          id: source.id,\n          acronym: source.name,\n          label: source.description,\n          selected: selected.includes(source.id),\n        };\n        return details;\n      });\n\n    return selections;\n  }\n\n  get title() { // eslint-disable-line class-methods-use-this\n    // improve localisation\n    // game.i18n.localize(\"\")\n    return \"Monster Muncher Sauce Selection\";\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n\n    html.find(\"#toggle-sources\").click(async (event) => {\n      event.preventDefault();\n      if ($('.munching-sources input:checked').length && $('.munching-sources input').not(':checked').length) {\n        $('.munching-sources input').prop('checked', false);\n      } else {\n        $('.munching-sources input').each(function() {\n          // eslint-disable-next-line no-invalid-this\n          $(this).prop('checked', !$(this).prop('checked'));\n        });\n      }\n    });\n  }\n\n  /** @override */\n  async getData() { // eslint-disable-line class-methods-use-this\n    const existingSelection = game.settings.get(\"ddb-importer\", \"munching-policy-muncher-sources\").flat();\n    const sources = DDBSources.getSourcesLookups(existingSelection);\n\n    return {\n      sources: sources.sort((a, b) => {\n        return (a.label > b.label) ? 1 : ((b.label > a.label) ? -1 : 0);\n      }),\n    };\n  }\n\n  /** @override */\n  // eslint-disable-next-line class-methods-use-this\n  async _updateObject(event, formData) {\n    event.preventDefault();\n    let sources = [];\n    for (const [key, value] of Object.entries(formData)) {\n      if (value) sources.push(parseInt(key));\n    }\n    await game.settings.set(\"ddb-importer\", \"munching-policy-muncher-sources\", sources);\n    // eslint-disable-next-line no-use-before-define\n    new DDBMuncher().render(true);\n  }\n}\n","const DICTIONARY = {\n  types: {\n    full: [\"weapon\", \"equipment\", \"consumable\", \"tool\", \"loot\", \"class\", \"subclass\", \"background\", \"spell\", \"feat\", \"container\"],\n    equipment: [\"equipment\", \"consumable\", \"tool\", \"loot\", \"container\"],\n    inventory: [\"equipment\", \"consumable\", \"tool\", \"loot\", \"container\", \"weapon\"],\n    monster: [\"equipment\", \"consumable\", \"tool\", \"loot\", \"container\", \"weapon\", \"feat\"],\n  },\n  currency: {\n    cp: \"copper\",\n    sp: \"silver\",\n    ep: \"electrum\",\n    gp: \"gold\",\n    pp: \"platinum\",\n  },\n  sizes: [\n    { name: \"Tiny\", value: \"tiny\", size: 0.5 },\n    { name: \"Small\", value: \"sm\", size: 0.8 },\n    { name: \"Medium\", value: \"med\", size: 1 },\n    { name: \"Large\", value: \"lg\", size: 2 },\n    { name: \"Huge\", value: \"huge\", size: 3 },\n    { name: \"Gargantuan\", value: \"grg\", size: 4 },\n  ],\n  numbers: [\n    { num: 1, natural: \"a\" },\n    { num: 1, natural: \"a new\" },\n    { num: 1, natural: \"one\" },\n    { num: 2, natural: \"two\" },\n    { num: 3, natural: \"three\" },\n    { num: 4, natural: \"four\" },\n    { num: 5, natural: \"five\" },\n    { num: 6, natural: \"six\" },\n    { num: 7, natural: \"seven\" },\n    { num: 8, natural: \"eight\" },\n    { num: 9, natural: \"nine\" },\n    { num: 10, natural: \"ten\" },\n    { num: 11, natural: \"eleven\" },\n    { num: 12, natural: \"twelve\" },\n    { num: 13, natural: \"thirteen\" },\n    { num: 14, natural: \"fourteen\" },\n    { num: 15, natural: \"fifteen\" },\n    { num: 16, natural: \"sixteen\" },\n    { num: 17, natural: \"seventeen\" },\n    { num: 18, natural: \"eighteen\" },\n    { num: 19, natural: \"nineteen\" },\n    { num: 20, natural: \"twenty\" },\n  ],\n  magicitems: {\n    rechargeUnits: [\n      { id: 1, value: \"r4\" },\n      { id: \"ShortRest\", value: \"r4\" },\n      { id: 2, value: \"r5\" },\n      { id: \"LongRest\", value: \"r5\" },\n      { id: \"Long\", value: \"r5\" },\n      { id: \"long\", value: \"r5\" },\n      { id: \"Dawn\", value: \"r2\" },\n      { id: \"dawn\", value: \"r2\" },\n      { id: \"Day\", value: \"r2\" },\n      { id: \"day\", value: \"r2\" },\n      { id: \"daily\", value: \"r1\" },\n      { id: \"DawnRest\", value: \"r2\" },\n      { id: \"Dusk\", value: \"r3\" },\n      { id: \"dusk\", value: \"r3\" },\n      { id: \"DuskRest\", value: \"r3\" },\n      { id: \"Sunset\", value: \"r3\" },\n      { id: \"Consumable\", value: \"\" },\n      { id: \"Other\", value: \"\" },\n      { id: \"Daily\", value: \"r1\" },\n      { id: \"sr\", value: \"r4\" },\n      { id: \"lr\", value: \"r5\" },\n      { id: \"\", value: \"\" },\n      { id: null, value: \"\" },\n      { id: 3, value: \"r2\" },\n      { id: 4, value: \"\" },\n    ],\n    nums: [\n      { id: \"once\", value: 1 },\n      { id: \"twice\", value: 2 },\n      { id: \"thrice\", value: 3 },\n      { id: \"one\", value: 1 },\n      { id: \"two\", value: 2 },\n      { id: \"three\", value: 3 },\n    ],\n  },\n  resets: [\n    { id: 1, value: \"sr\" },\n    { id: \"ShortRest\", value: \"sr\" },\n    { id: \"Short\", value: \"sr\" },\n    { id: \"short\", value: \"sr\" },\n    { id: 2, value: \"lr\" },\n    { id: \"LongRest\", value: \"lr\" },\n    { id: \"Long\", value: \"lr\" },\n    { id: \"long\", value: \"lr\" },\n    { id: \"Day\", value: \"day\" },\n    { id: \"day\", value: \"day\" },\n    { id: \"Dawn\", value: \"dawn\" },\n    { id: \"dusk\", value: \"dusk\" },\n    { id: \"Consumable\", value: \"charges\" },\n    { id: \"Other\", value: \"charges\" },\n    { id: \"\", value: \"\" },\n    { id: null, value: \"\" },\n    { id: 3, value: \"day\" },\n    { id: 4, value: \"charges\" },\n  ],\n  // CONFIG.Canvas.visionModes\n  senseMapDefault: {\n    blindsight: \"basic\",\n    darkvision: \"darkvision\",\n    // tremorsense: \"tremorsense\",\n    truesight: \"basic\",\n    unknown: \"basic\",\n  },\n  senseMapVision5e: {\n    blindsight: \"blindsight\",\n    darkvision: \"darkvision\",\n    tremorsense: \"tremorsense\",\n    truesight: \"truesight\",\n    unknown: \"basic\"\n  },\n  senseMap: () => {\n    if (game.modules.get(\"vision-5e\")?.active) return DICTIONARY.senseMapVision5e;\n    return DICTIONARY.senseMapDefault;\n  },\n  // CONFIG.Canvas.detectionModes\n  detectionMap: {\n    blindsight: \"senseAll\",\n    truesight: \"seeAll\",\n    tremorsense: \"feelTremor\",\n  },\n  conditions: [\n    { label: \"Blinded\", foundry: \"blinded\", ddbId: 1, levelId: null, ddbType: 1 },\n    { label: \"Charmed\", foundry: \"charmed\", ddbId: 2, levelId: null, ddbType: 1 },\n    { label: \"Deafened\", foundry: \"deafened\", ddbId: 3, levelId: null, ddbType: 1 },\n    { label: \"Exhaustion\", foundry: \"exhaustion\", ddbId: null, levelId: null, ddbType: null },\n    { label: \"Exhaustion 1\", foundry: \"exhaustion\", ddbId: 4, levelId: 1, ddbType: 2 },\n    { label: \"Exhaustion 2\", foundry: \"exhaustion\", ddbId: 4, levelId: 2, ddbType: 2 },\n    { label: \"Exhaustion 3\", foundry: \"exhaustion\", ddbId: 4, levelId: 3, ddbType: 2 },\n    { label: \"Exhaustion 4\", foundry: \"exhaustion\", ddbId: 4, levelId: 4, ddbType: 2 },\n    { label: \"Exhaustion 5\", foundry: \"exhaustion\", ddbId: 4, levelId: 5, ddbType: 2 },\n    { label: \"Exhaustion 6\", foundry: \"exhaustion\", ddbId: 4, levelId: 6, ddbType: 2 },\n    { label: \"Frightened\", foundry: \"frightened\", ddbId: 5, levelId: null, ddbType: 1 },\n    { label: \"Grappled\", foundry: \"grappled\", ddbId: 6, levelId: null, ddbType: 1 },\n    { label: \"Incapacitated\", foundry: \"incapacitated\", ddbId: 7, levelId: null, ddbType: 1 },\n    { label: \"Invisible\", foundry: \"invisible\", ddbId: 8, levelId: null, ddbType: 1 },\n    { label: \"Paralyzed\", foundry: \"paralyzed\", ddbId: 9, levelId: null, ddbType: 1 },\n    { label: \"Petrified\", foundry: \"petrified\", ddbId: 10, levelId: null, ddbType: 1 },\n    { label: \"Poisoned\", foundry: \"poisoned\", ddbId: 11, levelId: null, ddbType: 1 },\n    { label: \"Prone\", foundry: \"prone\", ddbId: 12, levelId: null, ddbType: 1 },\n    { label: \"Restrained\", foundry: \"restrained\", ddbId: 13, levelId: null, ddbType: 1 },\n    { label: \"Stunned\", foundry: \"stunned\", ddbId: 14, levelId: null, ddbType: 1 },\n    { label: \"Unconscious\", foundry: \"unconscious\", ddbId: 15, levelId: null, ddbType: 1 },\n    { label: \"Diseased\", foundry: \"diseased\", ddbId: null, levelId: null, ddbType: null },\n    { label: \"Disease\", foundry: \"diseased\", ddbId: null, levelId: null, ddbType: null },\n  ],\n  character: {\n    class: [\n      { name: \"Artificer\", multiclassSkill: 0 },\n      { name: \"Bard\", multiclassSkill: 1 },\n      { name: \"Barbarian\", multiclassSkill: 0 },\n      { name: \"Blood Hunter\", multiclassSkill: 0 },\n      { name: \"Blood Hunter (archived)\", multiclassSkill: 0 },\n      { name: \"Cleric\", multiclassSkill: 0 },\n      { name: \"Druid\", multiclassSkill: 0 },\n      { name: \"Fighter\", multiclassSkill: 0 },\n      { name: \"Hunter\", multiclassSkill: 0 },\n      { name: \"Paladin\", multiclassSkill: 0 },\n      { name: \"Ranger\", multiclassSkill: 1 },\n      { name: \"Rogue\", multiclassSkill: 1 },\n      { name: \"Sorcerer\", multiclassSkill: 0 },\n      { name: \"Warlock\", multiclassSkill: 0 },\n      { name: \"Wizard\", multiclassSkill: 0 },\n      { name: \"Monk\", multiclassSkill: 0 },\n    ],\n    abilities: [\n      { id: 1, value: \"str\", long: \"strength\" },\n      { id: 2, value: \"dex\", long: \"dexterity\" },\n      { id: 3, value: \"con\", long: \"constitution\" },\n      { id: 4, value: \"int\", long: \"intelligence\" },\n      { id: 5, value: \"wis\", long: \"wisdom\" },\n      { id: 6, value: \"cha\", long: \"charisma\" },\n    ],\n    skills: [\n      { name: \"acr\", label: \"Acrobatics\", ability: \"dex\", subType: \"acrobatics\", valueId: 3 },\n      { name: \"ani\", label: \"Animal Handling\", ability: \"wis\", subType: \"animal-handling\", valueId: 11 },\n      { name: \"arc\", label: \"Arcana\", ability: \"int\", subType: \"arcana\", valueId: 6 },\n      { name: \"ath\", label: \"Athletics\", ability: \"str\", subType: \"athletics\", valueId: 2 },\n      { name: \"dec\", label: \"Deception\", ability: \"cha\", subType: \"deception\", valueId: 16 },\n      { name: \"his\", label: \"History\", ability: \"int\", subType: \"history\", valueId: 7 },\n      { name: \"ins\", label: \"Insight\", ability: \"wis\", subType: \"insight\", valueId: 12 },\n      { name: \"itm\", label: \"Intimidation\", ability: \"cha\", subType: \"intimidation\", valueId: 17 },\n      { name: \"inv\", label: \"Investigation\", ability: \"int\", subType: \"investigation\", valueId: 8 },\n      { name: \"med\", label: \"Medicine\", ability: \"wis\", subType: \"medicine\", valueId: 13 },\n      { name: \"nat\", label: \"Nature\", ability: \"int\", subType: \"nature\", valueId: 9 },\n      { name: \"prc\", label: \"Perception\", ability: \"wis\", subType: \"perception\", valueId: 14 },\n      { name: \"prf\", label: \"Performance\", ability: \"cha\", subType: \"performance\", valueId: 18 },\n      { name: \"per\", label: \"Persuasion\", ability: \"cha\", subType: \"persuasion\", valueId: 19 },\n      { name: \"rel\", label: \"Religion\", ability: \"int\", subType: \"religion\", valueId: 10 },\n      { name: \"slt\", label: \"Sleight of Hand\", ability: \"dex\", subType: \"sleight-of-hand\", valueId: 4 },\n      { name: \"ste\", label: \"Stealth\", ability: \"dex\", subType: \"stealth\", valueId: 5 },\n      { name: \"sur\", label: \"Survival\", ability: \"wis\", subType: \"survival\", valueId: 15 },\n    ],\n    customSkillProficiencies: [\n      // typeId:26\n      // value not: 1, half 2, prof: 3, expertise 4\n      { value: 1, proficient: 0 },\n      { value: 2, proficient: 0.5 },\n      { value: 3, proficient: 1 },\n      { value: 4, proficient: 2 },\n    ],\n    alignments: [\n      { id: 1, name: \"Lawful Good\", value: \"lg\" },\n      { id: 2, name: \"Neutral Good\", value: \"ng\" },\n      { id: 3, name: \"Chaotic Good\", value: \"cg\" },\n      { id: 4, name: \"Lawful Neutral\", value: \"ln\" },\n      { id: 5, name: \"True Neutral\", value: \"tn\" },\n      { id: 6, name: \"Chaotic Neutral\", value: \"cn\" },\n      { id: 7, name: \"Lawful Evil\", value: \"le\" },\n      { id: 8, name: \"Neutral Evil\", value: \"ne\" },\n      { id: 9, name: \"Chaotic Evil\", value: \"ce\" },\n    ],\n    actorSizes: [\n      { id: 2, name: \"Tiny\", value: \"tiny\" },\n      { id: 3, name: \"Small\", value: \"sm\" },\n      { id: 4, name: \"Medium\", value: \"med\" },\n      { id: 5, name: \"Large\", value: \"lg\" },\n      { id: 6, name: \"Huge\", value: \"huge\" },\n      { id: 7, name: \"Gargantuan\", value: \"grg\" },\n      // { id: 10, entityTypeId: 127108918, name: \"Medium or Small\", weightType: 2 },\n    ],\n    senses: [\n      { id: 1, name: \"Blindsight\" },\n      { id: 2, name: \"Darkvision\" },\n      { id: 3, name: \"Tremorsense\" },\n    ],\n    speeds: [\n      { id: 1, type: \"walk\", innate: \"walking\" },\n      { id: 2, type: \"burrow\", innate: \"burrowing\" },\n      { id: 3, type: \"climb\", innate: \"climbing\" },\n      { id: 4, type: \"fly\", innate: \"flying\" },\n      { id: 5, type: \"swim\", innate: \"swimming\" },\n    ],\n    languages: [\n      { name: \"Common\", value: \"common\", type: \"standard\" },\n      { name: \"Aarakocra\", value: \"aarakocra\", advancement: \"exotic\" },\n      { name: \"Abyssal\", value: \"abyssal\", advancement: \"exotic\" },\n      { name: \"Aquan\", value: \"aquan\", advancement: \"exotic:primordial\" },\n      { name: \"Auran\", value: \"auran\", advancement: \"exotic:primordial\" },\n      { name: \"Celestial\", value: \"celestial\", advancement: \"exotic\" },\n      { name: \"Deep Speech\", value: \"deep\", advancement: \"exotic\" },\n      { name: \"Draconic\", value: \"draconic\", advancement: \"exotic\" },\n      { name: \"Druidic\", value: \"druidic\", advancement: null },\n      { name: \"Dwarvish\", value: \"dwarvish\", advancement: \"standard\" },\n      { name: \"Elvish\", value: \"elvish\", advancement: \"standard\" },\n      { name: \"Giant\", value: \"giant\", advancement: \"standard\" },\n      { name: \"Gith\", value: \"gith\", advancement: \"exotic\" },\n      { name: \"Gnomish\", value: \"gnomish\", advancement: \"standard\" },\n      { name: \"Goblin\", value: \"goblin\", advancement: \"standard\" },\n      { name: \"Gnoll\", value: \"gnoll\", advancement: \"exotic\" },\n      { name: \"Halfling\", value: \"halfling\", advancement: \"standard\" },\n      { name: \"Ignan\", value: \"ignan\", advancement: \"exotic:primordial\" },\n      { name: \"Infernal\", value: \"infernal\", advancement: \"exotic\" },\n      { name: \"Orc\", value: \"orc\", advancement: \"standard\" },\n      { name: \"Primordial\", value: \"primordial\", advancement: \"exotic\" },\n      { name: \"Terran\", value: \"terran\", advancement: \"exotic:primordial\" },\n      { name: \"Sylvan\", value: \"sylvan\", advancement: \"exotic\" },\n      { name: \"Thieves' Cant\", value: \"cant\", advancement: null },\n      { name: \"Thieves’ Cant\", value: \"cant\", advancement: null },\n      { name: \"Undercommon\", value: \"undercommon\", advancement: \"exotic\" },\n    ],\n    armorTypes: [\n      { name: \"Clothing\", value: \"clothing\" },\n      { name: \"Light Armor\", value: \"light\" },\n      { name: \"Medium Armor\", value: \"medium\" },\n      { name: \"Heavy Armor\", value: \"heavy\" },\n      { name: \"Magical Bonus\", value: \"bonus\" },\n      { name: \"Natural Armor\", value: \"natural\" },\n      { name: \"Shield\", value: \"shield\" },\n    ],\n    damageAdjustments: [\n      { id: 1, type: 1, kind: \"resistance\", name: \"Bludgeoning\", foundryValues: { value: [\"bludgeoning\"], bypass: [] } },\n      { id: 2, type: 1, kind: \"resistance\", name: \"Piercing\", foundryValues: { value: [\"piercing\"], bypass: [] } },\n      { id: 3, type: 1, kind: \"resistance\", name: \"Slashing\", foundryValues: { value: [\"slashing\"], bypass: [] } },\n      { id: 4, type: 1, kind: \"resistance\", name: \"Lightning\", foundryValues: { value: [\"lightning\"], bypass: [] } },\n      { id: 5, type: 1, kind: \"resistance\", name: \"Thunder\", foundryValues: { value: [\"thunder\"], bypass: [] } },\n      { id: 6, type: 1, kind: \"resistance\", name: \"Poison\", foundryValues: { value: [\"poison\"], bypass: [] } },\n      { id: 7, type: 1, kind: \"resistance\", name: \"Cold\", foundryValues: { value: [\"cold\"], bypass: [] } },\n      { id: 8, type: 1, kind: \"resistance\", name: \"Radiant\", foundryValues: { value: [\"radiant\"], bypass: [] } },\n      { id: 9, type: 1, kind: \"resistance\", name: \"Fire\", foundryValues: { value: [\"fire\"], bypass: [] } },\n      { id: 10, type: 1, kind: \"resistance\", name: \"Necrotic\", foundryValues: { value: [\"necrotic\"], bypass: [] } },\n      { id: 11, type: 1, kind: \"resistance\", name: \"Acid\", foundryValues: { value: [\"acid\"], bypass: [] } },\n      { id: 12, type: 1, kind: \"resistance\", name: \"Psychic\", foundryValues: { value: [\"psychic\"], bypass: [] } },\n      { id: 13, type: 1, kind: \"resistance\", name: \"Physical (Magical)\", foundryValues: { value: [\"bludgeoning\", \"piercing\", \"slashing\"], bypass: [\"mgc\"] } },\n      { id: 14, type: 1, kind: \"resistance\", name: \"Physical (Silvered)\", foundryValues: { value: [\"bludgeoning\", \"piercing\", \"slashing\"], bypass: [\"mgc\", \"sil\"] } },\n      { id: 15, type: 1, kind: \"resistance\", name: \"Physical (Adamantine)\", foundryValues: { value: [\"bludgeoning\", \"piercing\", \"slashing\"], bypass: [\"mgc\", \"ada\"] } },\n      { id: 16, type: 1, kind: \"resistance\", name: \"Piercing and Slashing from Nonmagical Attacks that aren't Adamantine\", foundryValues: { value: [\"piercing\", \"slashing\"], bypass: [\"mgc\", \"ada\"] } },\n      { id: 17, type: 2, kind: \"immunity\", name: \"Bludgeoning\", foundryValues: { value: [\"bludgeoning\"], bypass: [] } },\n      { id: 18, type: 2, kind: \"immunity\", name: \"Piercing\", foundryValues: { value: [\"piercing\"], bypass: [] } },\n      { id: 19, type: 2, kind: \"immunity\", name: \"Slashing\", foundryValues: { value: [\"slashing\"], bypass: [] } },\n      { id: 20, type: 2, kind: \"immunity\", name: \"Lightning\", foundryValues: { value: [\"lightning\"], bypass: [] } },\n      { id: 21, type: 2, kind: \"immunity\", name: \"Thunder\", foundryValues: { value: [\"thunder\"], bypass: [] } },\n      { id: 22, type: 2, kind: \"immunity\", name: \"Poison\", foundryValues: { value: [\"poison\"], bypass: [] } },\n      { id: 23, type: 2, kind: \"immunity\", name: \"Cold\", foundryValues: { value: [\"cold\"], bypass: [] } },\n      { id: 24, type: 2, kind: \"immunity\", name: \"Radiant\", foundryValues: { value: [\"radiant\"], bypass: [] } },\n      { id: 25, type: 2, kind: \"immunity\", name: \"Fire\", foundryValues: { value: [\"fire\"], bypass: [] } },\n      { id: 26, type: 2, kind: \"immunity\", name: \"Necrotic\", foundryValues: { value: [\"necrotic\"], bypass: [] } },\n      { id: 27, type: 2, kind: \"immunity\", name: \"Acid\", foundryValues: { value: [\"acid\"], bypass: [] } },\n      { id: 28, type: 2, kind: \"immunity\", name: \"Psychic\", foundryValues: { value: [\"psychic\"], bypass: [] } },\n      { id: 29, type: 2, kind: \"immunity\", name: \"Bludgeoning, Piercing, and Slashing from Nonmagical Attacks\", foundryValue: \"physical\", foundryValues: { value: [\"bludgeoning\", \"piercing\", \"slashing\"], bypass: [\"mgc\"] } },\n      { id: 30, type: 2, kind: \"immunity\", name: \"Bludgeoning, Piercing, and Slashing from Nonmagical Attacks that aren't Silvered\", foundryValue: \"physical\", foundryValues: { value: [\"bludgeoning\", \"piercing\", \"slashing\"], bypass: [\"mgc\", \"sil\"] } },\n      { id: 31, type: 2, kind: \"immunity\", name: \"Bludgeoning, Piercing, and Slashing from Nonmagical Attacks that aren't Adamantine\", foundryValue: \"physical\", foundryValues: { value: [\"bludgeoning\", \"piercing\", \"slashing\"], bypass: [\"mgc\", \"ada\"] } },\n      { id: 32, type: 2, kind: \"immunity\", name: \"Piercing and Slashing from Nonmagical Attacks that aren't Adamantine\", foundryValue: \"physical\", foundryValues: { value: [\"piercing\", \"slashing\"], bypass: [\"mgc\", \"ada\"] } },\n      { id: 33, type: 3, kind: \"vulnerability\", name: \"Bludgeoning\", foundryValues: { value: [\"bludgeoning\"], bypass: [] } },\n      { id: 34, type: 3, kind: \"vulnerability\", name: \"Piercing\", foundryValues: { value: [\"piercing\"], bypass: [] } },\n      { id: 35, type: 3, kind: \"vulnerability\", name: \"Slashing\", foundryValues: { value: [\"slashing\"], bypass: [] } },\n      { id: 36, type: 3, kind: \"vulnerability\", name: \"Lightning\", foundryValues: { value: [\"lightning\"], bypass: [] } },\n      { id: 37, type: 3, kind: \"vulnerability\", name: \"Thunder\", foundryValues: { value: [\"thunder\"], bypass: [] } },\n      { id: 38, type: 3, kind: \"vulnerability\", name: \"Poison\", foundryValues: { value: [\"poison\"], bypass: [] } },\n      { id: 39, type: 3, kind: \"vulnerability\", name: \"Cold\", foundryValues: { value: [\"cold\"], bypass: [] } },\n      { id: 40, type: 3, kind: \"vulnerability\", name: \"Radiant\", foundryValues: { value: [\"radiant\"], bypass: [] } },\n      { id: 41, type: 3, kind: \"vulnerability\", name: \"Fire\", foundryValues: { value: [\"fire\"], bypass: [] } },\n      { id: 42, type: 3, kind: \"vulnerability\", name: \"Necrotic\", foundryValues: { value: [\"necrotic\"], bypass: [] } },\n      { id: 43, type: 3, kind: \"vulnerability\", name: \"Acid\", foundryValues: { value: [\"acid\"], bypass: [] } },\n      { id: 44, type: 3, kind: \"vulnerability\", name: \"Psychic\", foundryValues: { value: [\"psychic\"], bypass: [] } },\n\n      { id: 45, type: 3, kind: \"vulnerability\", name: \"Piercing from Magic Weapons Wielded by Good Creatures\", value: \"piercing-from-magic-weapons-wielded-by-good\" },\n      { id: 46, type: 3, kind: \"vulnerability\", name: \"Bludgeoning, Piercing, and Slashing from Magic Weapons\", value: \"bludgeoning-piercing-and-slashing-from-magic-weapons\" },\n\n      { id: 47, type: 1, kind: \"resistance\", name: \"Force\", foundryValues: { value: [\"force\"], bypass: [] } },\n      { id: 48, type: 2, kind: \"immunity\", name: \"Force\", foundryValues: { value: [\"force\"], bypass: [] } },\n      { id: 49, type: 3, kind: \"vulnerability\", name: \"Force\", foundryValues: { value: [\"force\"], bypass: [] } },\n\n      { id: 51, type: 1, kind: \"resistance\", name: \"Ranged attacks\", values: \"ranged-attacks\" },\n      { id: 52, type: 1, kind: \"resistance\", name: \"Damage dealt by traps\", values: \"damage-dealt-by-traps\" },\n      { id: 54, type: 1, kind: \"resistance\", name: \"Bludgeoning from non magical attacks\", foundryValues: { value: [\"bludgeoning\"], bypass: [\"mgc\"] } },\n\n      { id: 55, type: 2, kind: \"immunity\", name: \"Bludgeoning, Piercing, and Slashing from Metal Weapons\", foundryValues: { value: [\"bludgeoning\", \"piercing\", \"slashing\"], bypass: [] } },\n      { id: 56, type: 1, kind: \"resistance\", name: \"Bludgeoning, Piercing, and Slashing while in Dim Light or Darkness\", value: \"bludgeoning-piercing-and-slashing-while-in-dim-or-light-darkness\" },\n      { id: 57, type: 1, kind: \"resistance\", name: \"Damage from Spells\", values: \"damage-from-spells\", midiValues: [\"spells\"] },\n      { id: 60, type: 2, kind: \"immunity\", name: \"Bludgeoning, Piercing, and Slashing from Nonmagical Attacks that aren't Adamantine or Silvered\", foundryValues: { value: [\"slashing\", \"bludgeoning\", \"piercing\"], bypass: [\"ada\", \"sil\", \"mgc\"] } },\n      { id: 61, type: 1, kind: \"resistance\", name: \"Nonmagical Bludgeoning, Piercing, and Slashing (from Stoneskin)\", foundryValues: { value: [\"bludgeoning\", \"piercing\", \"slashing\"], bypass: [\"mgc\"] } },\n      { id: 62, type: 1, kind: \"resistance\", name: \"All damage but Force, Radiant, and Psychic\", foundryValues: { value: [\"bludgeoning\", \"piercing\", \"slashing\", \"lightning\", \"thunder\", \"cold\", \"fire\", \"necrotic\", \"acid\", \"poison\"], bypass: [] } },\n      { id: 63, type: 2, kind: \"immunity\", name: \"Petrified (Aberrant Armor Only)\", value: \"petrified-aberrant-armor-only\" },\n      { id: 64, type: 1, kind: \"vulnerability\", name: \"Slashing from a Vorpal Sword\", value: \"slashing-from-a-vorpal-sword\", },\n      { id: 65, type: 1, kind: \"resistance\", name: \"Damage of the type matching the animated breath's form (acid, cold, fire, lightning, or poison)\", value: \"damage-of-the-type-matching-the-animated-breaths-form-acid-cold-fire-lightning-or-poison\" },\n      { id: 66, type: 1, kind: \"resistance\", name: \"Psychic (granted by Ruidium Armor)\", foundryValues: { value: [\"psychic\"], bypass: [] } },\n      { id: 67, type: 2, kind: \"immunity\", name: \"Bludgeoning, Piercing, and Slashing that is Nonmagical\", foundryValues: { value: [\"slashing\", \"bludgeoning\", \"piercing\"], bypass: [\"mgc\"] } },\n      { id: 68, type: 1, kind: \"resistance\", name: \"One of the following: acid, cold, fire, lightning, or poison\", value: \"one-of-the-following-acid-cold-fire-lightning-or\" },\n      { id: 69, type: 1, kind: \"resistance\", name: \"Lightning (granted by darksteel greataxe)\", foundryValues: { value: [\"lightning\"], bypass: [] } },\n      { id: 70, type: 1, kind: \"resistance\", name: \"Slashing and Piercing from Nonmagical Attacks\", foundryValues: { value: [\"slashing\", \"piercing\"], bypass: [\"mgc\"] } },\n\n      // condition immunities\n      { id: 1, type: 4, kind: \"immunity\", name: \"Blinded\", foundryValue: \"blinded\" },\n      { id: 2, type: 4, kind: \"immunity\", name: \"Charmed\", foundryValue: \"charmed\" },\n      { id: 3, type: 4, kind: \"immunity\", name: \"Deafened\", foundryValue: \"deafened\" },\n      { id: 4, type: 4, kind: \"immunity\", name: \"Exhaustion\", foundryValue: \"exhaustion\" },\n      { id: 5, type: 4, kind: \"immunity\", name: \"Frightened\", foundryValue: \"frightened\" },\n      { id: 6, type: 4, kind: \"immunity\", name: \"Grappled\", foundryValue: \"grappled\" },\n      { id: 7, type: 4, kind: \"immunity\", name: \"Incapacitated\", foundryValue: \"incapacitated\" },\n      { id: 8, type: 4, kind: \"immunity\", name: \"Invisible\", foundryValue: \"invisible\" },\n      { id: 9, type: 4, kind: \"immunity\", name: \"Paralyzed\", foundryValue: \"paralyzed\" },\n      { id: 10, type: 4, kind: \"immunity\", name: \"Petrified\", foundryValue: \"petrified\" },\n      { id: 11, type: 4, kind: \"immunity\", name: \"Poisoned\", foundryValue: \"poisoned\" },\n      { id: 12, type: 4, kind: \"immunity\", name: \"Prone\", foundryValue: \"prone\" },\n      { id: 13, type: 4, kind: \"immunity\", name: \"Restrained\", foundryValue: \"restrained\" },\n      { id: 14, type: 4, kind: \"immunity\", name: \"Stunned\", foundryValue: \"stunned\" },\n      { id: 15, type: 4, kind: \"immunity\", name: \"Unconscious\", foundryValue: \"unconscious\" },\n      // In DDB it is disease, but in FVTT ut is diseased\n      { id: 16, type: 4, kind: \"immunity\", name: \"Diseased\", value: \"disease\", foundryValue: \"diseased\" },\n    ],\n    proficiencies: [\n      // Armor\n      { name: \"All armor\", type: \"Armor\", subType: null, foundryValue: \"all\", advancement: \"\" },\n      { name: \"Light Armor\", type: \"Armor\", subType: \"Light Armor\", foundryValue: \"lgt\", advancement: \"\" },\n      { name: \"Medium Armor\", type: \"Armor\", subType: \"Medium Armor\", foundryValue: \"med\", advancement: \"\" },\n      { name: \"Heavy Armor\", type: \"Armor\", subType: \"Heavy Armor\", foundryValue: \"hvy\", advancement: \"\" },\n      { name: \"Shields\", type: \"Armor\", subType: \"Shield\", foundryValue: \"shl\", advancement: \"\" },\n      { name: \"Studded Leather\", type: \"Armor\", subType: \"Light Armor\", foundryValue: \"studded\", advancement: \"lgt\" },\n      { name: \"Scale Mail\", type: \"Armor\", subType: \"Medium Armor\", foundryValue: \"scalemail\", advancement: \"med\" },\n      { name: \"Shield\", type: \"Armor\", subType: \"Shield\", foundryValue: \"shield\", advancement: \"shl\" },\n      { name: \"Padded\", type: \"Armor\", subType: \"Light Armor\", foundryValue: \"padded\", advancement: \"lgt\" },\n      { name: \"Leather\", type: \"Armor\", subType: \"Light Armor\", foundryValue: \"leather\", advancement: \"lgt\" },\n      { name: \"Hide\", type: \"Armor\", subType: \"Medium Armor\", foundryValue: \"hide\", advancement: \"med\" },\n      { name: \"Chain Shirt\", type: \"Armor\", subType: \"Medium Armor\", foundryValue: \"chainshirt\", advancement: \"med\" },\n      { name: \"Breastplate\", type: \"Armor\", subType: \"Medium Armor\", foundryValue: \"breastplate\", advancement: \"med\" },\n      { name: \"Half Plate\", type: \"Armor\", subType: \"Medium Armor\", foundryValue: \"halfplate\", advancement: \"med\" },\n      { name: \"Ring Mail\", type: \"Armor\", subType: \"Heavy Armor\", foundryValue: \"ringmail\", advancement: \"hvy\" },\n      { name: \"Chain Mail\", type: \"Armor\", subType: \"Heavy Armor\", foundryValue: \"chainmail\", advancement: \"hvy\" },\n      { name: \"Splint\", type: \"Armor\", subType: \"Heavy Armor\", foundryValue: \"splint\", advancement: \"hvy\" },\n      { name: \"Plate\", type: \"Armor\", subType: \"Heavy Armor\", foundryValue: \"plate\", advancement: \"hvy\" },\n      { name: \"Spiked Armor\", type: \"Armor\", subType: \"Medium Armor\", advancement: \"med\" },\n\n      // Weapon Groups\n      { name: \"Simple Weapons\", type: \"Weapon\", subType: \"Simple Weapons\", foundryValue: \"sim\", advancement: \"\" },\n      { name: \"Martial Weapons\", type: \"Weapon\", subType: \"Martial Weapons\", foundryValue: \"mar\", advancement: \"\" },\n      // Simple Weapons\n      { name: \"Boomerang\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"\", advancement: \"sim\", melee: false, ranged: true, properties: { ret: true } },\n      { name: \"Club\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"club\", advancement: \"sim\", melee: true, ranged: false, properties: { lgt: true } },\n      { name: \"Crossbow, Light\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"lightcrossbow\", advancement: \"sim\", melee: false, ranged: true, properties: { amm: true, lod: true, two: true } },\n      { name: \"Dagger\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"dagger\", advancement: \"sim\", melee: true, ranged: true, properties: { lgt: true, fin: true, thr: true } },\n      { name: \"Dart\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"dart\", advancement: \"sim\", melee: false, ranged: true, properties: { fin: true, thr: true } },\n      { name: \"Greatclub\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"greatclub\", advancement: \"sim\", melee: true, ranged: false, properties: { two: true } },\n      { name: \"Handaxe\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"handaxe\", advancement: \"sim\", melee: true, ranged: false, properties: { lgt: true, thr: true } },\n      { name: \"Javelin\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"javelin\", advancement: \"sim\", melee: true, ranged: true, properties: { thr: true } },\n      { name: \"Light Hammer\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"lighthammer\", advancement: \"sim\", melee: true, ranged: true, properties: { lgt: true, thr: true } },\n      { name: \"Mace\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"mace\", advancement: \"sim\", melee: true, ranged: false, properties: {} },\n      { name: \"Quarterstaff\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"quarterstaff\", advancement: \"sim\", melee: true, ranged: false, properties: { ver: true } },\n      { name: \"Shortbow\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"shortbow\", advancement: \"sim\", melee: false, ranged: true, properties: { amm: true, two: true } },\n      { name: \"Sickle\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"sickle\", advancement: \"sim\", melee: true, ranged: false, properties: { lgt: true } },\n      { name: \"Sling\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"sling\", advancement: \"sim\", melee: false, ranged: true, properties: { amm: true } },\n      { name: \"Spear\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"spear\", advancement: \"sim\", melee: true, ranged: true, properties: { thr: true, ver: true } },\n      { name: \"Yklwa\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"\", advancement: \"sim\", melee: true, ranged: false, properties: { amm: true } },\n      // Martial Weapons\n      { name: \"Antimatter Rifle\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\", advancement: \"mar\", melee: false, ranged: true, properties: { amm: true, lod: true, two: true, fir: true } },\n      { name: \"Battleaxe\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"battleaxe\", advancement: \"mar\", melee: true, ranged: false, properties: { ver: true } },\n      { name: \"Blowgun\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"blowgun\", advancement: \"mar\", melee: false, ranged: true, properties: { amm: true, lod: true } },\n      { name: \"Crossbow, Hand\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"handcrossbow\", advancement: \"mar\", melee: false, ranged: true, properties: { amm: true, lgt: true, lod: true } },\n      { name: \"Crossbow, Heavy\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"heavycrossbow\", advancement: \"mar\", melee: false, ranged: true, properties: { amm: true, hvy: true, two: true, lod: true } },\n      { name: \"Double-Bladed Scimitar\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\", advancement: \"mar\", melee: true, ranged: false, properties: { spc: true } },\n      { name: \"Flail\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"flail\", advancement: \"mar\", melee: true, ranged: false, properties: {} },\n      { name: \"Glaive\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"glaive\", advancement: \"mar\", melee: true, ranged: false, properties: { hvy: true, rch: true, two: true } },\n      { name: \"Greataxe\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"greataxe\", advancement: \"mar\", melee: true, ranged: false, properties: { hvy: true, two: true } },\n      { name: \"Greatsword\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"greatsword\", advancement: \"mar\", melee: true, ranged: false, properties: { hvy: true, two: true } },\n      { name: \"Halberd\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"halberd\", advancement: \"mar\", melee: true, ranged: false, properties: { hvy: true, two: true, rch: true } },\n      { name: \"Lance\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"lance\", advancement: \"mar\", melee: true, ranged: false, properties: { rch: true, spc: true } },\n      { name: \"Laser Pistol\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\", advancement: \"mar\", melee: false, ranged: true, properties: { amm: true, lod: true, fir: true } },\n      { name: \"Laser Rifle\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\", advancement: \"mar\", melee: false, ranged: true, properties: { amm: true, lod: true, fir: true, two: true } },\n      { name: \"Longbow\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"longbow\", advancement: \"mar\", melee: false, ranged: true, properties: { amm: true, hvy: true, two: true } },\n      { name: \"Longsword\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"longsword\", advancement: \"mar\", melee: true, ranged: false, properties: { ver: true } },\n      { name: \"Maul\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"maul\", advancement: \"mar\", melee: true, ranged: false, properties: { hvy: true, two: true } },\n      { name: \"Morningstar\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"morningstar\", advancement: \"mar\", melee: true, ranged: false, properties: {} },\n      { name: \"Musket\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\", advancement: \"mar\", melee: false, ranged: true, properties: { amm: true, lod: true, fir: true } },\n      { name: \"Net\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"net\", advancement: \"mar\", melee: true, ranged: false, properties: { spc: true, thw: true } },\n      { name: \"Pike\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"pike\", advancement: \"mar\", melee: true, ranged: false, properties: { hvy: true, two: true, rch: true } },\n      { name: \"Pistol, Automatic\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\", advancement: \"mar\", melee: false, ranged: true, properties: { amm: true, lod: true, fir: true } },\n      { name: \"Pistol\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\", advancement: \"mar\", melee: false, ranged: true, properties: { amm: true, lod: true, fir: true } },\n      { name: \"Rapier\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"rapier\", advancement: \"mar\", melee: true, ranged: false, properties: { fin: true } },\n      { name: \"Revenant Double-Bladed Scimitar\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\", advancement: \"mar\", properties: { spc: true } },\n      { name: \"Revolver\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\", advancement: \"mar\", melee: false, ranged: true, properties: { amm: true, lod: true, fir: true } },\n      { name: \"Rifle, Automatic\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\", advancement: \"mar\", melee: false, ranged: true, properties: { amm: true, lod: true, fir: true, two: true, burst: true } },\n      { name: \"Rifle, Hunting\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\", advancement: \"mar\", melee: false, ranged: true, properties: { amm: true, lod: true, fir: true, two: true } },\n      { name: \"Scimitar\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"scimitar\", advancement: \"mar\", melee: true, ranged: false, properties: { fin: true, lgt: true } },\n      { name: \"Shortsword\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"shortsword\", advancement: \"mar\", melee: true, ranged: false, properties: { fin: true, lgt: true } },\n      { name: \"Shotgun\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"\", advancement: \"mar\", melee: false, ranged: true, properties: { amm: true, lod: true, fir: true, two: true } },\n      { name: \"Trident\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"trident\", advancement: \"mar\", melee: true, ranged: false, properties: { ver: true, thr: true } },\n      { name: \"War Pick\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"warpick\", advancement: \"mar\", melee: true, ranged: false, properties: {} },\n      { name: \"Warhammer\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"warhammer\", advancement: \"mar\", melee: true, ranged: false, properties: { ver: true } },\n      { name: \"Whip\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"whip\", advancement: \"mar\", melee: true, ranged: false, properties: { fin: true, rch: true } },\n\n      // special\n      { name: \"Light Crossbow\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"lightcrossbow\", advancement: \"sim\", melee: false, ranged: true, properties: { amm: true, lod: true, two: true } },\n      { name: \"Hand Crossbow\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"handcrossbow\", advancement: \"mar\", melee: false, ranged: true, properties: { amm: true, lgt: true, lod: true } },\n      { name: \"Heavy Crossbow\", type: \"Weapon\", subType: \"Martial Weapon\", foundryValue: \"heavycrossbow\", advancement: \"mar\", melee: false, ranged: true, properties: { amm: true, hvy: true, two: true, lod: true } },\n      { name: \"Ammunition\", type: \"Weapon\", subType: \"Simple Weapon\", foundryValue: \"\", advancement: \"\" },\n\n      // Tools and Instruments and Stuff\n      { name: \"Alchemist's Supplies\", type: \"Tool\", subType: \"Supplies\", ability: \"int\", baseTool: \"alchemist\", toolType: \"art\" },\n      { name: \"Brewer's Supplies\", type: \"Tool\", subType: \"Supplies\", ability: \"int\", baseTool: \"brewer\", toolType: \"art\" },\n      { name: \"Calligrapher's Supplies\", type: \"Tool\", subType: \"Supplies\", ability: \"dex\", baseTool: \"calligrapher\", toolType: \"art\" },\n      { name: \"Painter's Supplies\", type: \"Tool\", subType: \"Supplies\", ability: \"dex\", baseTool: \"painter\", toolType: \"art\" },\n      { name: \"Carpenter's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"carpenter\", toolType: \"art\" },\n      { name: \"Cartographer's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"cartographer\", toolType: \"art\" },\n      { name: \"Cobbler's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"cobbler\", toolType: \"art\" },\n      { name: \"Cook's Utensils\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"wis\", baseTool: \"cook\", toolType: \"art\" },\n      { name: \"Glassblower's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"glassblower\", toolType: \"art\" },\n      { name: \"Jeweler's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"jeweler\", toolType: \"art\" },\n      { name: \"Leatherworker's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"leatherworker\", toolType: \"art\" },\n      { name: \"Mason's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"mason\", toolType: \"art\" },\n      { name: \"Navigator's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"int\", baseTool: \"navg\", toolType: \"\" },\n      { name: \"Potter's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"potter\", toolType: \"art\" },\n      { name: \"Smith's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"smith\", toolType: \"art\" },\n      { name: \"Tinker's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"tinker\", toolType: \"art\" },\n      { name: \"Weaver's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"weaver\", toolType: \"art\" },\n      { name: \"Woodcarver's Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"woodcarver\", toolType: \"art\" },\n      { name: \"Dice Set\", type: \"Tool\", subType: \"Gaming Set\", ability: \"int\", baseTool: \"dice\", toolType: \"game\" },\n      { name: \"Dragonchess Set\", type: \"Tool\", subType: \"Gaming Set\", ability: \"int\", baseTool: \"chess\", toolType: \"game\" },\n      { name: \"Playing Card Set\", type: \"Tool\", subType: \"Gaming Set\", ability: \"int\", baseTool: \"card\", toolType: \"game\" },\n      { name: \"Three-Dragon Ante Set\", type: \"Tool\", subType: \"Gaming Set\", ability: \"int\", baseTool: \"card\", toolType: \"game\" },\n      { name: \"Thieves' Tools\", type: \"Tool\", subType: \"Artisan's Tools\", ability: \"dex\", baseTool: \"thief\", toolType: \"\" },\n      { name: \"Disguise Kit\", type: \"Tool\", subType: \"Kit\", ability: \"int\", baseTool: \"disg\", toolType: \"\" },\n      { name: \"Forgery Kit\", type: \"Tool\", subType: \"Kit\", ability: \"int\", baseTool: \"forg\", toolType: \"\" },\n      { name: \"Herbalism Kit\", type: \"Tool\", subType: \"Kit\", ability: \"int\", baseTool: \"herb\", toolType: \"\" },\n      { name: \"Poisoner's Kit\", type: \"Tool\", subType: \"Kit\", ability: \"int\", baseTool: \"pois\", toolType: \"\" },\n      { name: \"Bagpipes\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"con\", baseTool: \"bagpipes\", toolType: \"music\" },\n      { name: \"Birdpipes\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"con\", baseTool: null, toolType: \"music\" },\n      { name: \"Drum\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"drum\", toolType: \"music\" },\n      { name: \"Dulcimer\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"dulcimer\", toolType: \"music\" },\n      { name: \"Flute\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"flute\", toolType: \"music\" },\n      { name: \"Glaur\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: null, toolType: \"music\" },\n      { name: \"Hand Drum\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: null, toolType: \"music\" },\n      { name: \"Horn\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"horn\", toolType: \"music\" },\n      { name: \"Longhorn\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: null, toolType: \"music\" },\n      { name: \"Lute\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"lute\", toolType: \"music\" },\n      { name: \"Lyre\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"lyre\", toolType: \"music\" },\n      { name: \"Pan Flute\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"panflute\", toolType: \"music\" },\n      { name: \"Shawm\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: null, toolType: \"music\" },\n      { name: \"Songhorn\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: null, toolType: \"music\" },\n      { name: \"Tantan\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: null, toolType: \"music\" },\n      { name: \"Thelarr\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: null, toolType: \"music\" },\n      { name: \"Tocken\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: null, toolType: \"music\" },\n      { name: \"Viol\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: \"viol\", toolType: \"music\" },\n      { name: \"Wargong\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: null, toolType: \"music\" },\n      { name: \"Yarting\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: null, toolType: \"music\" },\n      { name: \"Zulkoon\", type: \"Tool\", subType: \"Musical Instrument\", ability: \"dex\", baseTool: null, toolType: \"music\" },\n      { name: \"Vehicles (Land)\", type: \"Tool\", subType: \"Vehicles\", ability: \"dex\", baseTool: \"land\", toolType: \"vehicle\" },\n      { name: \"Vehicles (Air)\", type: \"Tool\", subType: \"Vehicles\", ability: \"dex\", baseTool: \"air\", toolType: \"vehicle\" },\n      { name: \"Vehicles (Space)\", type: \"Tool\", subType: \"Vehicles\", ability: \"dex\", baseTool: \"space\", toolType: \"vehicle\" },\n      { name: \"Vehicles (Water)\", type: \"Tool\", subType: \"Vehicles\", ability: \"dex\", baseTool: \"water\", toolType: \"vehicle\" },\n    ],\n    characterValuesLookup: [\n      { name: \"pactWeapon\", typeId: 28 },\n      { name: \"hexWarrior\", typeId: 29 },\n    ],\n    // Supported Warlock Pact Weapon options\n    pactFeatures: [\"Improved Pact Weapon\", \"Lifedrinker\"],\n  },\n  item: {\n    characterValues: [\n      { typeId: 8, value: \"name\" },\n      //   { typeId: 9, value: 'notes'},  // note: Not supported by Foundry right now, skipping\n      { typeId: 19, value: \"price\" },\n      { typeId: 22, value: \"weight\" },\n    ],\n  },\n  items: [\n    { filterType: \"Armor\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/item_types/armor.jpg\" },\n    { filterType: \"Potion\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/item_types/potion.jpg\" },\n    { filterType: \"Ring\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/item_types/ring.jpg\" },\n    { filterType: \"Rod\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/item_types/rod.jpg\" },\n    { filterType: \"Scroll\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/item_types/scroll.jpg\" },\n    { filterType: \"Staff\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/item_types/staff.jpg\" },\n    { filterType: \"Wand\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/item_types/wand.jpg\" },\n    { filterType: \"Weapon\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/item_types/weapon.jpg\" },\n    { filterType: \"Wondrous item\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/item_types/wondrousitem.jpg\" },\n  ],\n  genericItemIcons: [\n    { name: \"Adventuring Gear\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/adventuring-gear.jpg\" },\n    { name: \"Tool\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/tool.jpg\" },\n    { name: \"Gemstone\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/gemstone.jpg\" },\n    { name: \"Holy Symbol\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/holy-symbol.jpg\" },\n    { name: \"Weapon\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/weapon.jpg\" },\n    { name: \"Arcane Focus\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/arcane-focus.jpg\" },\n    { name: \"Druidic Focus\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/druidic-focus.jpg\" },\n    { name: \"Ammunition\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/ammunition.jpg\" },\n    { name: \"Poison\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/poison.jpg\" },\n    { name: \"Mount\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/mount.jpg\" },\n    { name: \"Potion\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/potion.jpg\" },\n    { name: \"Equipment Pack\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/pack.jpg\" },\n    // Vehicle (Land)/(Water)\n    { name: \"Vehicle\", img: \"https://www.dndbeyond.com/content/1-0-1358-0/skins/waterdeep/images/icons/equipment/vehicle.jpg\" },\n  ],\n  equipment: {\n    armorType: [\n      { name: \"Light Armor\", id: 1, value: \"light\" },\n      { name: \"Medium Armor\", id: 2, value: \"medium\" },\n      { name: \"Heavy Armor\", id: 3, value: \"heavy\" },\n      { name: \"Shield\", id: 4, value: \"shield\" },\n      { name: \"Unarmored\", id: 0, value: null },\n      { name: \"Unarmored Defense\", id: -1, value: null },\n      { name: \"Natural Armor\", id: -2, value: \"natural\" },\n      { name: \"Magical Bonus\", id: -3, value: \"bonus\" },\n      { name: \"Clothing\", id: -4, value: \"clothing\" },\n    ],\n    priceFormulas: {\n      \"common\": \"1d6 * 10\",\n      \"uncommon\": \"1d6 * 100\",\n      \"rare\": \"2d10 * 1000\",\n      \"veryRare\": \"1d4 * 10000\",\n      \"legendary\": \"2d6 * 25000\",\n      \"artifact\": \"2d10 * 50000\",\n    },\n  },\n  weapon: {\n    weaponRange: [\n      { attackType: 1, value: \"M\" },\n      { attackType: 2, value: \"R\" },\n      { attackType: null, value: \"R\" },\n    ],\n    weaponType: [\n      { categoryId: 1, value: \"simple\" },\n      { categoryId: 2, value: \"martial\" },\n      { categoryId: 3, value: \"martial\" }, // this is not 100% correct. a martialF for \"Martial Firearms\" would be better\n      { categoryId: 0, value: \"simple\" }, // this is totally incorrect, this is of type ammunition\n    ],\n    properties: [\n      { name: \"Adamantine\", value: \"ada\" },\n      { name: \"Ammunition (Firearms)\", value: \"fir\" },\n      { name: \"Ammunition\", value: \"amm\" },\n      { name: \"Finesse\", value: \"fin\" },\n      { name: \"Firearm\", value: \"fir\" },\n      { name: \"Focus\", value: \"foc\" },\n      { name: \"Heavy\", value: \"hvy\" },\n      { name: \"Light\", value: \"lgt\" },\n      { name: \"Loading\", value: \"lod\" },\n      { name: \"Magical\", value: \"mgc\" },\n      { name: \"Reach\", value: \"rch\" },\n      { name: \"Reload\", value: \"rel\" },\n      { name: \"Returning\", value: \"ret\" },\n      { name: \"Silvered\", value: \"sil\" },\n      { name: \"Special\", value: \"spc\" },\n      { name: \"Thrown\", value: \"thr\" },\n      { name: \"Two-Handed\", value: \"two\" },\n      { name: \"Versatile\", value: \"ver\" },\n      // { name: \"Range\", value: \"fir\" },\n    ],\n  },\n  actions: {\n    activationTypes: [\n      { id: 0, value: \"none\" },\n      { id: 1, value: \"action\" },\n      { id: 2, value: \"action\" },\n      { id: 3, value: \"bonus\" },\n      { id: 4, value: \"reaction\" },\n      { id: 5, value: \"action\" },\n      { id: 6, value: \"minute\" },\n      { id: 7, value: \"hour\" },\n      { id: 8, value: \"special\" },\n    ],\n    attackTypes: [\n      //  natural improv\n      // { attackSubtype: 1, value: \"\" },\n      { attackSubtype: 2, value: \"natural\" },\n      { attackSubtype: 3, value: \"simpleM\" }, // unarmed\n    ],\n    damageType: [\n      { name: \"bludgeoning\", id: 1 },\n      { name: \"piercing\", id: 2 },\n      { name: \"slashing\", id: 3 },\n      { name: \"necrotic\", id: 4 },\n      { name: \"acid\", id: 5 },\n      { name: \"cold\", id: 6 },\n      { name: \"fire\", id: 7 },\n      { name: \"lightning\", id: 8 },\n      { name: \"thunder\", id: 9 },\n      { name: \"poison\", id: 10 },\n      { name: \"psychic\", id: 11 },\n      { name: \"radiant\", id: 12 },\n      { name: \"force\", id: 13 },\n      { name: null, id: null },\n    ],\n    aoeType: [\n      { id: 1, value: \"cone\" },\n      { id: 2, value: \"\" },\n      { id: 3, value: \"\" },\n      { id: 4, value: \"line\" },\n      // presumably others here too! add when found\n    ],\n  },\n  spell: {\n    schools: [\n      { id: \"abj\", name: \"abjuration\", img: \"https://www.dndbeyond.com/content/1-0-1337-0/skins/waterdeep/images/spell-schools/35/abjuration.png\" },\n      { id: \"con\", name: \"conjuration\", img: \"https://www.dndbeyond.com/content/1-0-1337-0/skins/waterdeep/images/spell-schools/35/conjuration.png\" },\n      { id: \"div\", name: \"divination\", img: \"https://www.dndbeyond.com/content/1-0-1337-0/skins/waterdeep/images/spell-schools/35/divination.png\" },\n      { id: \"enc\", name: \"enchantment\", img: \"https://www.dndbeyond.com/content/1-0-1337-0/skins/waterdeep/images/spell-schools/35/enchantment.png\" },\n      { id: \"evo\", name: \"evocation\", img: \"https://www.dndbeyond.com/content/1-0-1337-0/skins/waterdeep/images/spell-schools/35/evocation.png\" },\n      { id: \"ill\", name: \"illusion\", img: \"https://www.dndbeyond.com/content/1-0-1337-0/skins/waterdeep/images/spell-schools/35/illusion.png\" },\n      { id: \"nec\", name: \"necromancy\", img: \"https://www.dndbeyond.com/content/1-0-1337-0/skins/waterdeep/images/spell-schools/35/necromancy.png\" },\n      { id: \"trs\", name: \"transmutation\", img: \"https://www.dndbeyond.com/content/1-0-1337-0/skins/waterdeep/images/spell-schools/35/transmutation.png\" },\n    ],\n    progression: [\n      { name: \"Artificer\", value: \"artificer\" },\n      { name: \"Artificer (UA)\", value: \"artificer\" },\n      { name: \"Bard\", value: \"full\" },\n      { name: \"Barbarian\", value: \"none\" },\n      { name: \"Blood Hunter\", value: \"pact\" },\n      { name: \"Blood Hunter (archived)\", value: \"pact\" },\n      { name: \"Cleric\", value: \"full\" },\n      { name: \"Druid\", value: \"full\" },\n      { name: \"Fighter\", value: \"third\" },\n      { name: \"Hunter\", value: \"half\" },\n      { name: \"Paladin\", value: \"half\" },\n      { name: \"Ranger\", value: \"half\" },\n      { name: \"Rogue\", value: \"third\" },\n      { name: \"Sorcerer\", value: \"full\" },\n      { name: \"Warlock\", value: \"pact\" },\n      { name: \"Wizard\", value: \"full\" },\n      { name: \"Monk\", value: \"none\" },\n    ],\n    preparationModes: [\n      { name: \"Artificer\", value: \"prepared\" },\n      { name: \"Artificer (UA)\", value: \"prepared\" },\n      { name: \"Bard\", value: \"always\" },\n      { name: \"Blood Hunter\", value: \"pact\" },\n      { name: \"Blood Hunter (archived)\", value: \"pact\" },\n      { name: \"Cleric\", value: \"prepared\" },\n      { name: \"Druid\", value: \"prepared\" },\n      { name: \"Fighter\", value: \"always\" },\n      { name: \"Hunter\", value: \"always\" },\n      { name: \"Paladin\", value: \"prepared\" },\n      { name: \"Ranger\", value: \"always\" },\n      { name: \"Rogue\", value: \"always\" },\n      { name: \"Sorcerer\", value: \"always\" },\n      { name: \"Warlock\", value: \"pact\" },\n      { name: \"Wizard\", value: \"prepared\" },\n      { name: \"Monk\", value: \"always\" },\n    ],\n    activationTypes: [\n      { activationType: 0, value: \"none\", name: \"No Action\" }, // doesn't exist an more\n      { activationType: 1, value: \"action\", name: \"Action\", }, // action\n      { activationType: 2, value: \"none\", name: \"No Action\" }, // no action\n      { activationType: 3, value: \"bonus\", name: \"Bonus Action\" }, // bonus action\n      { activationType: 4, value: \"reaction\", name: \"Reaction\", }, // reaction\n      { activationType: 5, value: \"special\", name: \"Unknown\" }, // no longer exists\n      { activationType: 6, value: \"minute\", name: \"Minute\" }, // minute\n      { activationType: 7, value: \"hour\", name: \"Hour\" }, // hour\n      { activationType: 8, value: \"special\", name: \"Special\" }, // special\n    ],\n  },\n  monsters: {\n    weapons: [\n      // simple\n      { name: \"Boomerang\", actionType: \"rwak\", weaponType: \"simpleR\", properties: { ret: true } },\n      { name: \"Club\", actionType: \"mwak\", weaponType: \"simpleM\", properties: { lgt: true } },\n      { name: \"Dagger\", actionType: \"mwak\", weaponType: \"simpleM\", properties: { lgt: true, fin: true, thr: true } },\n      { name: \"Dart\", actionType: \"rwak\", weaponType: \"simpleR\", properties: { fin: true, thr: true } },\n      { name: \"Greatclub\", actionType: \"mwak\", weaponType: \"simpleM\", properties: { two: true } },\n      { name: \"Handaxe\", actionType: \"mwak\", weaponType: \"simpleM\", properties: { lgt: true, thr: true } },\n      { name: \"Javelin\", actionType: \"mwak\", weaponType: \"simpleM\", properties: { thr: true } },\n      { name: \"Light Crossbow\", actionType: \"rwak\", weaponType: \"simpleR\", properties: { amm: true, lod: true, two: true } },\n      { name: \"Light Hammer\", actionType: \"mwak\", weaponType: \"simpleM\", properties: { lgt: true, thr: true } },\n      { name: \"Mace\", actionType: \"mwak\", weaponType: \"simpleM\", properties: {} },\n      { name: \"Quarterstaff\", actionType: \"mwak\", weaponType: \"simpleM\", properties: { ver: true } },\n      { name: \"Shortbow\", actionType: \"rwak\", weaponType: \"simpleR\", properties: { amm: true, two: true } },\n      { name: \"Sickle\", actionType: \"mwak\", weaponType: \"simpleM\", properties: { lgt: true } },\n      { name: \"Sling\", actionType: \"rwak\", weaponType: \"simpleR\", properties: { amm: true } },\n      { name: \"Spear\", actionType: \"mwak\", weaponType: \"simpleM\", properties: { thr: true, ver: true } },\n      { name: \"Yklwa\", actionType: \"rwak\", weaponType: \"simpleR\", properties: { amm: true } },\n      // martial\n      { name: \"Battleaxe\", actionType: \"mwak\", weaponType: \"martialM\", properties: { ver: true } },\n      { name: \"Blowgun\", actionType: \"rwak\", weaponType: \"martialR\", properties: { amm: true, lod: true } },\n      { name: \"Flail\", actionType: \"mwak\", weaponType: \"martialM\", properties: {} },\n      { name: \"Glaive\", actionType: \"mwak\", weaponType: \"martialM\", properties: { hvy: true, rch: true, two: true } },\n      { name: \"Greataxe\", actionType: \"mwak\", weaponType: \"martialM\", properties: { hvy: true, two: true } },\n      { name: \"Greatsword\", actionType: \"mwak\", weaponType: \"martialM\", properties: { hvy: true, two: true } },\n      { name: \"Halberd\", actionType: \"mwak\", weaponType: \"martialM\", properties: { hvy: true, two: true, rch: true } },\n      { name: \"Hand Crossbow\", actionType: \"rwak\", weaponType: \"martialR\", properties: { amm: true, lgt: true, lod: true } },\n      { name: \"Heavy Crossbow\", actionType: \"rwak\", weaponType: \"martialR\", properties: { amm: true, hvy: true, two: true, lod: true } },\n      { name: \"Lance\", actionType: \"mwak\", weaponType: \"martialM\", properties: { rch: true, spc: true } },\n      { name: \"Longbow\", actionType: \"rwak\", weaponType: \"martialR\", properties: { amm: true, hvy: true, two: true } },\n      { name: \"Longsword\", actionType: \"mwak\", weaponType: \"martialM\", properties: { ver: true } },\n      { name: \"Maul\", actionType: \"mwak\", weaponType: \"martialM\", properties: { hvy: true, two: true } },\n      { name: \"Morningstar\", actionType: \"mwak\", weaponType: \"martialM\", properties: {} },\n      { name: \"Musket\", actionType: \"rwak\", weaponType: \"martialR\", properties: { amm: true, lod: true, fir: true } },\n      { name: \"Net\", actionType: \"mwak\", weaponType: \"martialR\", properties: { spc: true, thw: true } },\n      { name: \"Pike\", actionType: \"mwak\", weaponType: \"martialM\", properties: { hvy: true, two: true, rch: true } },\n      { name: \"Pistol\", actionType: \"rwak\", weaponType: \"martialR\", properties: { amm: true, lod: true, fir: true } },\n      { name: \"Rapier\", actionType: \"mwak\", weaponType: \"martialM\", properties: { fin: true } },\n      { name: \"Scimitar\", actionType: \"mwak\", weaponType: \"martialM\", properties: { fin: true, lgt: true } },\n      { name: \"Shortsword\", actionType: \"mwak\", weaponType: \"martialM\", properties: { fin: true, lgt: true } },\n      { name: \"Trident\", actionType: \"mwak\", weaponType: \"martialM\", properties: { ver: true, thr: true } },\n      { name: \"War Pick\", actionType: \"mwak\", weaponType: \"martialM\", properties: {} },\n      { name: \"Warhammer\", actionType: \"mwak\", weaponType: \"martialM\", properties: { ver: true } },\n      { name: \"Whip\", actionType: \"mwak\", weaponType: \"martialM\", properties: { fin: true, rch: true } },\n      // natural\n      { name: \"Bite\", actionType: \"mwak\", weaponType: \"natural\", properties: {} },\n      { name: \"Claw\", actionType: \"mwak\", weaponType: \"natural\", properties: {} },\n      { name: \"Tail\", actionType: \"mwak\", weaponType: \"natural\", properties: {} },\n      { name: \"Wing\", actionType: \"mwak\", weaponType: \"natural\", properties: {} },\n      { name: \"Slam\", actionType: \"mwak\", weaponType: \"natural\", properties: {} },\n      { name: \"Rake\", actionType: \"mwak\", weaponType: \"natural\", properties: {} },\n      { name: \"Beak\", actionType: \"mwak\", weaponType: \"natural\", properties: {} },\n      { name: \"Tentacles\", actionType: \"mwak\", weaponType: \"natural\", properties: {} },\n    ],\n    resets: [\n      { id: 1, value: \"sr\" },\n      { id: \"ShortRest\", value: \"sr\" },\n      { id: \"Short\", value: \"sr\" },\n      { id: \"short\", value: \"sr\" },\n      { id: 2, value: \"lr\" },\n      { id: \"LongRest\", value: \"lr\" },\n      { id: \"Long\", value: \"lr\" },\n      { id: \"long\", value: \"lr\" },\n      { id: \"Day\", value: \"day\" },\n      { id: \"day\", value: \"day\" },\n      { id: \"Dawn\", value: \"day\" },\n      { id: \"dusk\", value: \"day\" },\n      { id: \"Consumable\", value: \"charges\" },\n      { id: \"Other\", value: \"charges\" },\n    ],\n  },\n  COMPENDIUM_FOLDERS: {\n    SPELL_LEVEL: [\n      \"0th Level (Cantrip)\",\n      \"1st Level\",\n      \"2nd Level\",\n      \"3rd Level\",\n      \"4th Level\",\n      \"5th Level\",\n      \"6th Level\",\n      \"7th Level\",\n      \"8th Level\",\n      \"9th Level\",\n    ],\n    RARITY: [\n      \"Common\",\n      \"Uncommon\",\n      \"Rare\",\n      \"Very Rare\",\n      \"Legendary\",\n      \"Artifact\",\n      \"Varies\",\n      \"Unknown\",\n    ],\n    ITEM_ROOT: {\n      equipment: \"Equipment\",\n      tool: \"Tools\",\n      loot: \"Loot\",\n      weapon: \"Weapon\",\n      container: \"Container\",\n      consumable: \"Consumable\",\n    },\n    EQUIPMENT: {\n      heavy: \"Heavy Armor\",\n      medium: \"Medium Armor\",\n      light: \"Light Armor\",\n      trinket: \"Trinket\",\n      shield: \"Shield\",\n      clothing: \"Clothing\",\n    },\n    WEAPON: {\n      simpleM: \"Simple Melee\",\n      simpleR: \"Simple Ranged\",\n      martialM: \"Martial Melee\",\n      martialR: \"Martial Ranged\",\n    },\n    TRINKET: [\n      \"Wondrous item\",\n      \"Ring\",\n      \"Arcane Focus\",\n      \"Holy Symbol\",\n      \"Druidic Focus\",\n      \"Adventuring Gear\",\n      \"Tattoo\",\n    ],\n    CONSUMABLE: [\n      \"Adventuring Gear\",\n      \"Ammunition\",\n      \"Potion\",\n      \"Scroll\",\n      \"Poison\",\n      \"Wand\",\n      \"Rod\",\n      \"Wondrous item\",\n    ],\n    LOOT: [\n      \"Gemstone\",\n      \"Adventuring Gear\",\n      \"Miscellaneous\",\n    ],\n    TOOLS: {\n      art: \"Artisan's Tools\",\n      music: \"Musical Instrument\",\n      game: \"Gaming Set\",\n    },\n    CONTAINER: [\n      \"Equipment Pack\",\n      \"Adventuring Gear\",\n      \"Vehicle\",\n      \"Mount\",\n      \"Wondrous item\",\n    ],\n  },\n};\n\nexport default DICTIONARY;\n","import DialogHelper from \"../lib/DialogHelper.js\";\nimport DICTIONARY from \"../dictionary.js\";\nimport FolderHelper from \"../lib/FolderHelper.js\";\nimport utils from \"../lib/utils.js\";\nimport logger from \"../logger.js\";\nimport { fixItems } from \"../parser/item/special.js\";\nimport { fixSpells } from \"../parser/spells/special.js\";\nimport { equipmentEffectAdjustment, midiItemEffects } from \"./specialEquipment.js\";\nimport { spellEffectAdjustment } from \"./specialSpells.js\";\nimport { addVision5eStub } from \"./vision5e.js\";\nimport { fixFeatures, addExtraEffects } from \"../parser/features/fixes.js\";\nimport { generateOverTimeEffect, damageOverTimeEffect, getOvertimeDamage, getMonsterFeatureDamage } from \"./monsterFeatures/overTimeEffect.js\";\nimport { baseEffect, generateStatusEffectChange, addStatusEffectChange, generateTokenMagicFXChange, generateATLChange } from \"./effects.js\";\nimport ExternalAutomations from \"./external/ExternalAutomations.js\";\n\nexport default class DDBEffectHelper {\n\n  static baseEffect = baseEffect;\n\n  static generateOverTimeEffect = generateOverTimeEffect;\n\n  static getOvertimeDamage = getOvertimeDamage;\n\n  static getMonsterFeatureDamage = getMonsterFeatureDamage;\n\n  static damageOverTimeEffect = damageOverTimeEffect;\n\n  static generateStatusEffectChange = generateStatusEffectChange;\n\n  static addStatusEffectChange = addStatusEffectChange;\n\n  static generateTokenMagicFXChange = generateTokenMagicFXChange;\n\n  static generateATLChange = generateATLChange;\n\n  static addToProperties = utils.addToProperties;\n\n  static removeFromProperties = utils.removeFromProperties;\n\n  /**\n   * Generates and applies DDBI effects to a document.\n   *\n   * @param {Document} document - The document to apply effects to.\n   * @param {object} options - Options for effect generation.\n   * @param {boolean} options.useChrisPremades - Whether to use Chris premade effects. Default is false.\n   * @return {Promise<void>} A promise that resolves when the effects have been applied.\n   */\n  static async addDDBIEffectToDocument(document, { useChrisPremades = false, isMonster = false } = {}) {\n    if (foundry.utils.getProperty(document, \"flags.ddbimporter.effectsApplied\") === true\n      || foundry.utils.getProperty(document, \"flags.ddbimporter.chrisEffectsApplied\") === true\n    ) {\n      logger.warn(`Skipping effect generation for ${document.name} as DDB Importer or Chris effect is already present.`);\n      return;\n    }\n    const startingSpellPolicy = game.settings.get(\"ddb-importer\", \"munching-policy-add-spell-effects\");\n    const startingAddPolicy = game.settings.get(\"ddb-importer\", \"munching-policy-add-effects\");\n    try {\n      game.settings.set(\"ddb-importer\", \"munching-policy-add-spell-effects\", true);\n      game.settings.set(\"ddb-importer\", \"munching-policy-add-effects\", true);\n\n      let data = document.toObject();\n      // remove old effects\n      data.effects = [];\n      if (foundry.utils.hasProperty(data, \"flags.dae\")) delete data.flags.dae;\n      if (foundry.utils.hasProperty(data, \"flags.itemacro\")) delete data.flags.itemacro;\n      if (foundry.utils.hasProperty(data, \"flags.midi-qol\")) delete data.flags[\"midi-qol\"];\n      if (foundry.utils.hasProperty(data, \"flags.ActiveAuras\")) delete data.flags.ActiveAuras;\n\n      if (DICTIONARY.types.inventory.includes(data.type)) {\n        equipmentEffectAdjustment(data);\n        data = await midiItemEffects(data);\n        fixItems([data]);\n      } else if (data.type === \"spell\") {\n        data = await spellEffectAdjustment(data, true);\n        await fixSpells(null, [data]);\n      } else if (data.type === \"feat\") {\n        const mockCharacter = {\n          system: utils.getTemplate(\"character\"),\n          type: \"character\",\n          name: \"\",\n          flags: {\n            ddbimporter: {\n              compendium: true,\n              dndbeyond: {\n                effectAbilities: [],\n                totalLevels: 0,\n                proficiencies: [],\n                proficienciesIncludingEffects: [],\n                characterValues: [],\n              },\n            },\n          },\n        };\n\n        await fixFeatures([data]);\n        data = (await addExtraEffects(null, [data], mockCharacter))[0];\n      }\n\n      if (useChrisPremades) data = (await ExternalAutomations.applyChrisPremadeEffects({ documents: [data], force: true, isMonster }))[0];\n\n      data = addVision5eStub(data);\n\n      if (foundry.utils.getProperty(data, \"flags.ddbimporter.effectsApplied\") === true\n        || foundry.utils.getProperty(data, \"flags.ddbimporter.chrisEffectsApplied\") === true\n      ) {\n        logger.debug(\"New effects generated, removing existing effects\");\n        await document.deleteEmbeddedDocuments(\"ActiveEffect\", [], { deleteAll: true });\n        logger.debug(`Removal complete, adding effects to item ${document.name}`);\n\n        logger.info(`Updating actor document ${document.name} with`, {\n          data: foundry.utils.duplicate(data),\n        });\n        await document.update(data);\n      } else {\n        logger.info(`No effects applied to document ${document.name}`);\n      }\n    } finally {\n      game.settings.set(\"ddb-importer\", \"munching-policy-add-spell-effects\", startingSpellPolicy);\n      game.settings.set(\"ddb-importer\", \"munching-policy-add-effects\", startingAddPolicy);\n    }\n  }\n\n  /**\n   * Adds DDBI effects to actor documents.\n   *\n   * @param {Object} actor - The actor object.\n   * @param {Object} options - The options object.\n   * @param {boolean} options.useChrisPremades - Whether to use Chris premades.\n   * @return {Promise<void>} - A promise that resolves when the effects are added.\n   */\n  static async addDDBIEffectsToActorDocuments(actor, { useChrisPremades = false } = {}) {\n    logger.info(\"Starting to add effects to actor items\");\n    const isMonster = actor.type === \"npc\";\n    for (const doc of actor.items) {\n      logger.debug(`Processing ${doc.name}`);\n      await DDBEffectHelper.addDDBIEffectToDocument(doc, { useChrisPremades, isMonster });\n    }\n    logger.info(\"Effect addition complete\");\n  }\n\n  /**\n   * Adds a save advantage effect for the next save on the specified target actor.\n   *\n   * @param {*} targetActor the target actor on which to add the effect.\n   * @param {*} originItem the item that is the origin of the effect.\n   * @param {*} ability the short ability name to use for save, e.g. str\n   */\n  static async addSaveAdvantageToTarget(targetActor, originItem, ability, additionLabel = \"\", icon = null) {\n    const effectData = {\n      _id: foundry.utils.randomID(),\n      changes: [\n        {\n          key: `flags.midi-qol.advantage.ability.save.${ability}`,\n          mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n          value: \"1\",\n          priority: 20,\n        },\n      ],\n      origin: originItem.uuid,\n      disabled: false,\n      transfer: false,\n      icon,\n      img: icon,\n      duration: { turns: 1 },\n      flags: {\n        dae: {\n          specialDuration: [`isSave.${ability}`],\n        },\n      },\n    };\n    effectData.name = `${originItem.name}${additionLabel}: Save Advantage`;\n    await MidiQOL.socket().executeAsGM(\"createEffects\", { actorUuid: targetActor.uuid, effects: [effectData] });\n  }\n\n  static async attachSequencerFileToTemplate(templateUuid, sequencerFile, originUuid, scale = 1) {\n    if (game.modules.get(\"sequencer\")?.active) {\n      if (Sequencer.Database.entryExists(sequencerFile)) {\n        logger.debug(`Trying to apply sequencer effect (${sequencerFile}) to ${templateUuid} from ${originUuid}`, sequencerFile);\n        const template = await fromUuid(templateUuid);\n        new Sequence()\n          .effect()\n          .file(Sequencer.Database.entryExists(sequencerFile))\n          .size({\n            width: canvas.grid.size * (template.width / canvas.dimensions.distance),\n            height: canvas.grid.size * (template.width / canvas.dimensions.distance),\n          })\n          .persist(true)\n          .origin(originUuid)\n          .belowTokens()\n          .opacity(0.5)\n          .attachTo(template, { followRotation: true })\n          .scaleToObject(scale)\n          .play();\n      }\n    }\n  }\n\n  static async buttonDialog(config, direction) {\n    return DialogHelper.buttonDialog(config, direction);\n  }\n\n  static canSense(token, target) {\n    return MidiQOL.canSense(token, target);\n  }\n\n  static checkCollision(ray, types = [\"sight\", \"move\"], mode = \"any\") {\n    for (const type of types) {\n      const result = CONFIG.Canvas.polygonBackends[type].testCollision(ray.A, ray.B, { mode, type });\n      if (result) return result;\n    }\n    return false;\n  }\n\n  /**\n   * Checks the cover bonus for a given token, target, item, and displayName.\n   *\n   * @param {any} token - The token object.\n   * @param {any} target - The target object.\n   * @param {any} item - The item object.\n   * @param {string} displayName - The display name of the cover.\n   * @return {string|number} The cover bonus or the display name of the cover.\n   */\n  static checkCover(token, target, item, displayName) {\n    const cover = MidiQOL.computeCoverBonus(token, target, item);\n    if (!displayName) return cover;\n    switch (cover) {\n      case 0:\n        return \"No Cover\";\n      case 2:\n        return \"Half Cover\";\n      case 5:\n        return \"Three-Quarters Cover\";\n      case 999:\n        return \"Full Cover\";\n      default:\n        return \"Unknown Cover\";\n    }\n  }\n\n  /**\n   * If a custom AA condition animation exists for the specified name, registers the appropriate hook with AA\n   * to be able to replace the default condition animation by the custom one.\n   *\n   * @param {*} condition condition for which to replace its AA animation by a custom one (it must be a value from CONFIG.DND5E.conditionTypes).\n   * @param {*} macroData the midi-qol macro data.\n   * @param {*} originItemName the name of item used for AA customization of the condition.\n   * @param {*} conditionItemUuid the UUID of the item applying the condition.\n   */\n  static configureCustomAAForCondition(condition, macroData, originItemName, conditionItemUuid) {\n    // Get default condition label\n    const statusName = CONFIG.DND5E.conditionTypes[condition];\n    if (!statusName) {\n      return;\n    }\n    const customStatusName = `${statusName.label} [${originItemName}]`;\n    if (AutomatedAnimations.AutorecManager.getAutorecEntries().aefx.find((a) => (a.label ?? a.name) === customStatusName)) {\n      const aaHookId = Hooks.on(\"AutomatedAnimations-WorkflowStart\", (data) => {\n        if (\n          data.item instanceof CONFIG.ActiveEffect.documentClass\n          && data.item.name === statusName.label\n          && data.item.origin === macroData.sourceItemUuid\n        ) {\n          data.recheckAnimation = true;\n          data.item.name = customStatusName;\n          Hooks.off(\"AutomatedAnimations-WorkflowStart\", aaHookId);\n        }\n      });\n      // Make sure that the hook is removed when the special spell effect is completed\n      Hooks.once(`midi-qol.RollComplete.${conditionItemUuid}`, () => {\n        Hooks.off(\"AutomatedAnimations-WorkflowStart\", aaHookId);\n      });\n    }\n  }\n\n  static checkJB2a(free = true, patreon = true, notify = false) {\n    if (patreon && game.modules.get('jb2a_patreon')?.active) {\n      return true;\n    } else if (!free) {\n      if (notify) ui.notifications.error(\"This macro requires the patreon version of JB2A\");\n      return false;\n    }\n    if (free && game.modules.get('JB2A_DnD5e')?.active) return true;\n    if (notify) ui.notifications.error(\"This macro requires either the patreon or free version of JB2A\");\n    return false;\n  }\n\n  static async _createJB2aActors(subFolderName, name) {\n    const packKeys = ['jb2a_patreon.jb2a-actors', 'JB2A_DnD5e.jb2a-actors'];\n    for (let key of packKeys) {\n      let pack = game.packs.get(key);\n      // eslint-disable-next-line no-continue\n      if (!pack) continue;\n      const actors = pack.index.filter((f) => f.name.includes(name));\n      const subFolder = await FolderHelper.getFolder(\"npc\", subFolderName, \"JB2A Actors\", \"#ceb180\", \"#cccc00\", false);\n\n      for (const actor of actors) {\n        if (!game.actors.find((a) => a.name === actor.name && a.folder?.id === subFolder.id)) {\n          await game.actors.importFromCompendium(pack, actor._id, {\n            folder: subFolder.id,\n          });\n        }\n      }\n    }\n  }\n\n  static async checkTargetInRange({ sourceUuid, targetUuid, distance }) {\n    if (!game.modules.get(\"midi-qol\")?.active) {\n      ui.notifications.error(\"checkTargetInRange requires midiQoL, not checking\");\n      logger.error(\"checkTargetInRange requires midiQoL, not checking\");\n      return true;\n    }\n    const sourceToken = await fromUuid(sourceUuid);\n    if (!sourceToken) return false;\n    const targetsInRange = MidiQOL.findNearby(null, sourceUuid, distance);\n    const isInRange = targetsInRange.reduce((result, possible) => {\n      const collisionRay = new Ray(sourceToken, possible);\n      const collision = DDBEffectHelper.checkCollision(collisionRay, [\"sight\"]);\n      if (possible.uuid === targetUuid && !collision) result = true;\n      return result;\n    }, false);\n    return isInRange;\n  }\n\n  /**\n   * Display an item card on the screen.\n   *\n   * @param {Object} item - The item to display the card for\n   * @return {Promise} A promise that resolves when the card is displayed\n   */\n  static async displayItemCard(item) {\n    const msg = await item.displayCard({ createMessage: false });\n    const DIV = document.createElement(\"DIV\");\n    DIV.innerHTML = msg.content;\n    DIV.querySelector(\"div.card-buttons\").remove();\n    await ChatMessage.create({ content: DIV.innerHTML });\n  }\n\n  /**\n   * Returns ids of tokens in template\n   *\n   * @param {*} templateDoc the templatedoc to check\n   */\n  static findContainedTokensInTemplate(templateDoc) {\n    const contained = new Set();\n    for (const tokenDoc of templateDoc.parent.tokens) {\n      const startX = tokenDoc.width >= 1 ? 0.5 : tokenDoc.width / 2;\n      const startY = tokenDoc.height >= 1 ? 0.5 : tokenDoc.height / 2;\n      for (let x = startX; x < tokenDoc.width; x++) {\n        for (let y = startY; y < tokenDoc.width; y++) {\n          const curr = {\n            x: tokenDoc.x + (x * templateDoc.parent.grid.size) - templateDoc.x,\n            y: tokenDoc.y + (y * templateDoc.parent.grid.size) - templateDoc.y,\n          };\n          const contains = templateDoc.object.shape.contains(curr.x, curr.y);\n          if (contains) contained.add(tokenDoc.id);\n        }\n      }\n    }\n    return [...contained];\n  }\n\n  /**\n   * Finds the effect with the specified name for the given actor.\n   *\n   * @param {Actor} actor - The actor to search for the effect.\n   * @param {string} name - The name of the effect to find.\n   * @return {Effect} - The effect with the specified name, or undefined if not found.\n   */\n  static findEffect(actor, name) {\n    return actor.effects.getName(name);\n  }\n\n  static getActorEffects(actor) {\n    return Array.from(actor?.allApplicableEffects() ?? []);\n  }\n\n  /**\n * Asynchronously gets a new target and updates workflow data.\n *\n * @param {Object} item - The item to get the new target for\n * @return {Token|undefined} The new target, or undefined if no new target is found\n */\n  static async getNewMidiQOLWorkflowTarget(workflow, item, oldToken, targetTitle = undefined) {\n    workflow.targets.delete(oldToken);\n    workflow.saves.delete(oldToken);\n    workflow.hitTargets.delete(oldToken);\n    await DDBEffectHelper.displayItemCard(item);\n    await MidiQOL.resolveTargetConfirmation(item, { forceDisplay: true, title: targetTitle });\n\n    const newToken = game.user.targets.first();\n    if (!newToken) return undefined;\n    workflow.targets.add(newToken);\n    workflow.hitTargets.add(newToken);\n    workflow.saveResults = workflow.saveResults.filter((e) => e.data.tokenId !== oldToken.id);\n    return newToken;\n  }\n\n  /**\n   * Finds effects for the given actor and names.\n   *\n   * @param {Actor} actor - The actor to find effects for.\n   * @param {string[]} names - An array of effect names to search for.\n   * @return {object[]} - An array of effects matching the given names.\n   */\n  static findEffects(actor, names) {\n    const results = [];\n    for (const name of names) {\n      if (DDBEffectHelper.findEffect(actor, name)) {\n        results.push(DDBEffectHelper.findEffect(actor, name));\n      }\n    }\n    return results;\n  }\n\n  /**\n   * Return actor from a UUID\n   *\n   * @param {string} uuid - The UUID of the actor.\n   * @return {object|null} - Returns the actor document or null if not found.\n   */\n  static fromActorUuid(uuid) {\n    const doc = fromUuidSync(uuid);\n    if (doc instanceof CONFIG.Token.documentClass) return doc.actor;\n    if (doc instanceof CONFIG.Actor.documentClass) return doc;\n    return null;\n  }\n\n  /**\n   * Returns the actor object associated with the given actor reference.\n   *\n   * @param {any} actorRef - The actor reference to retrieve the actor from.\n   * @return {Actor|null} The actor object associated with the given actor reference, or null if no actor is found.\n   */\n  static getActor(actorRef) {\n    if (actorRef instanceof Actor) return actorRef;\n    if (actorRef instanceof Token) return actorRef.actor;\n    if (actorRef instanceof TokenDocument) return actorRef.actor;\n    if (utils.isString(actorRef)) return DDBEffectHelper.fromActorUuid(actorRef);\n    return null;\n  }\n\n  /**\n   * Retrieves the number of cantrip dice based on the level of the actor.\n   *\n   * @param {Actor} actor - The actor object\n   * @return {number} The number of cantrip dice.\n   */\n  static getCantripDice(actor) {\n    const level = actor.type === \"character\"\n      ? actor.system.details.level\n      : actor.system.details.cr;\n    return 1 + Math.floor((level + 1) / 6);\n  }\n\n\n  // eslint-disable-next-line no-unused-vars\n  static getConcentrationEffect(actor, _name = null) {\n    return actor?.effects.find((ef) => foundry.utils.getProperty(ef, \"flags.midi-qol.isConcentration\"));\n  }\n\n  /**\n   * This is a simple reworking of midi-qols measureDistances function, for use where midi-qol is not available\n   * Measure distances for given segments with optional grid spaces.\n   *\n   * @param {Array} segments - Array of segments to measure distances for\n   * @param {Object} options - Optional object with grid spaces configuration\n   * @return {Array} Array of distances for each segment\n   */\n  static simpleMeasureDistances(segments, options = {}) {\n    if (canvas?.grid?.grid.constructor.name !== \"BaseGrid\" || !options.gridSpaces) {\n      const distances = canvas?.grid?.measureDistances(segments, options);\n      return distances;\n    }\n\n    const rule = canvas?.grid.diagonalRule;\n    if (!options.gridSpaces || ![\"555\", \"5105\", \"EUCL\"].includes(rule)) {\n      return canvas?.grid?.measureDistances(segments, options);\n    }\n    // Track the total number of diagonals\n    let nDiagonal = 0;\n    const d = canvas?.dimensions;\n\n    const grid = canvas?.scene?.grid;\n    if (!d || !d.size) return 0;\n\n    // Iterate over measured segments\n    return segments.map((s) => {\n      const r = s.ray;\n      // Determine the total distance traveled\n      const nx = Math.ceil(Math.max(0, Math.abs(r.dx / d.size)));\n      const ny = Math.ceil(Math.max(0, Math.abs(r.dy / d.size)));\n      // Determine the number of straight and diagonal moves\n      const nd = Math.min(nx, ny);\n      const ns = Math.abs(ny - nx);\n      nDiagonal += nd;\n\n      if (rule === \"5105\") { // Alternative DMG Movement\n        const nd10 = Math.floor(nDiagonal / 2) - Math.floor((nDiagonal - nd) / 2);\n        const spaces = (nd10 * 2) + (nd - nd10) + ns;\n        return spaces * d.distance;\n      } else if (rule === \"EUCL\") { // Euclidean Measurement\n        const nx = Math.max(0, Math.abs(r.dx / d.size));\n        const ny = Math.max(0, Math.abs(r.dy / d.size));\n        return Math.ceil(Math.hypot(nx, ny) * grid?.distance);\n      } else { // Standard PHB Movement\n        return Math.max(nx, ny) * grid.distance;\n      }\n    });\n  }\n\n  /**\n   * Get the distance segments between two objects.\n   *\n   * @param {Object} t1 - the first token\n   * @param {Object} t2 - the second token\n   * @param {boolean} wallBlocking - whether to consider walls as blocking\n   * @return {Array} an array of segments representing the distance between the two objects\n   */\n  static _getDistanceSegments(t1, t2, wallBlocking = false) {\n    const t1StartX = t1.document.width >= 1 ? 0.5 : t1.document.width / 2;\n    const t1StartY = t1.document.height >= 1 ? 0.5 : t1.document.height / 2;\n    const t2StartX = t2.document.width >= 1 ? 0.5 : t2.document.width / 2;\n    const t2StartY = t2.document.height >= 1 ? 0.5 : t2.document.height / 2;\n    let x, x1, y, y1;\n    let segments = [];\n    for (x = t1StartX; x < t1.document.width; x++) {\n      for (y = t1StartY; y < t1.document.height; y++) {\n        const origin = new PIXI.Point(...canvas.grid.getCenter(Math.round(t1.document.x + (canvas.dimensions.size * x)), Math.round(t1.document.y + (canvas.dimensions.size * y))));\n        for (x1 = t2StartX; x1 < t2.document.width; x1++) {\n          for (y1 = t2StartY; y1 < t2.document.height; y1++) {\n            const dest = new PIXI.Point(...canvas.grid.getCenter(Math.round(t2.document.x + (canvas.dimensions.size * x1)), Math.round(t2.document.y + (canvas.dimensions.size * y1))));\n            const r = new Ray(origin, dest);\n            // eslint-disable-next-line max-depth\n            if (wallBlocking) {\n              const collisionCheck = CONFIG.Canvas.polygonBackends.move.testCollision(origin, dest, { mode: \"any\", type: \"move\" });\n              // eslint-disable-next-line max-depth, no-continue\n              if (collisionCheck) continue;\n            }\n            segments.push({ ray: r });\n          }\n        }\n      }\n    }\n    return segments;\n  }\n\n  /**\n   * Calculate the height difference between two tokens based on their elevation and dimensions.\n   *\n   * @param {type} t1 - description of parameter t1\n   * @param {type} t2 - description of parameter t2\n   * @return {type} the height difference between the two tokens\n   */\n  static _calculateTokeHeightDifference(t1, t2) {\n    const t1Elevation = t1.document.elevation ?? 0;\n    const t2Elevation = t2.document.elevation ?? 0;\n    const t1TopElevation = t1Elevation + (Math.max(t1.document.height, t1.document.width) * (canvas?.dimensions?.distance ?? 5));\n    const t2TopElevation = t2Elevation + (Math.min(t2.document.height, t2.document.width) * (canvas?.dimensions?.distance ?? 5));\n\n    let heightDifference = 0;\n    let t1ElevationRange = Math.max(t1.document.height, t1.document.width) * (canvas?.dimensions?.distance ?? 5);\n    if (Math.abs(t2Elevation - t1Elevation) < t1ElevationRange) {\n      // token 2 is within t1's size so height difference is functionally 0\n      heightDifference = 0;\n    } else if (t1Elevation < t2Elevation) { // t2 above t1\n      heightDifference = t2Elevation - t1TopElevation;\n    } else if (t1Elevation > t2Elevation) { // t1 above t2\n      heightDifference = t1Elevation - t2TopElevation;\n    }\n\n    return heightDifference;\n\n  }\n\n  /**\n   * This is a simple reworking of midi-qols get distance function, for use where midi-qol is not available\n   * Calculate the distance between two tokens on the canvas, considering the presence of walls.\n   *\n   * @param {string} token1 - The ID of the first token\n   * @param {string} token2 - The ID of the second token\n   * @param {boolean} wallBlocking - Whether to consider walls as obstacles (default is false)\n   * @return {number} The calculated distance between the two tokens\n   */\n  static getSimpleDistance(token1, token2, wallBlocking = false) {\n    if (!canvas || !canvas.scene) return -1;\n    if (!canvas.grid || !canvas.dimensions) return -1;\n    const t1 = DDBEffectHelper.getToken(token1);\n    const t2 = DDBEffectHelper.getToken(token2);\n    if (!t1 || !t2) return -1;\n    if (!canvas || !canvas.grid || !canvas.dimensions) return -1;\n\n    const segments = DDBEffectHelper._getDistanceSegments(t1, t2, wallBlocking);\n    if (segments.length === 0) return -1;\n\n    const rayDistances = segments.map((ray) => DDBEffectHelper.simpleMeasureDistances([ray], { gridSpaces: true }));\n    let distance = Math.min(...rayDistances);\n\n    const heightDifference = DDBEffectHelper._calculateTokeHeightDifference(t1, t2);\n\n    const distanceRule = canvas.grid.diagonalRule;\n    // 5105 Alternative DMG Movement\n    // 555 Standard Movement\n    // EUCL Euclidean Measurement\n    if ([\"555\", \"5105\"].includes(distanceRule)) {\n      let nd = Math.min(distance, heightDifference);\n      let ns = Math.abs(distance - heightDifference);\n      distance = nd + ns;\n      let dimension = canvas?.dimensions?.distance ?? 5;\n      if (distanceRule === \"5105\") distance += Math.floor(nd / 2 / dimension) * dimension;\n    } else {\n      // assumes euclidean\n      distance = Math.sqrt((heightDifference * heightDifference) + (distance * distance));\n    }\n\n    return distance;\n  }\n\n  static getDistance(token1, token2, wallsBlocking = false) {\n    if (game.modules.get(\"midi-qol\")?.active) {\n      return MidiQOL.computeDistance(token1, token2, wallsBlocking);\n    } else {\n      return DDBEffectHelper.getSimpleDistance(token1, token2, wallsBlocking);\n    }\n  }\n\n  /**\n   * Returns the highest ability of an actor based on the given abilities.\n   *\n   * @param {Object} actor - The actor object.\n   * @param {Array|string} abilities - The abilities array or string.\n   * @return {string|undefined} - The highest ability or undefined if no abilities are provided.\n   */\n  static getHighestAbility(actor, abilities) {\n    if (typeof abilities === \"string\") {\n      return abilities;\n    } else if (Array.isArray(abilities)) {\n      return abilities.reduce((prv, current) => {\n        if (actor.system.abilities[current].value > actor.system.abilities[prv].value) return current;\n        else return prv;\n      }, abilities[0]);\n    }\n    return undefined;\n  }\n\n  /**\n   * Returns the race or type of the given entity.\n   *\n   * @param {object} entity - The entity for which to retrieve the race or type.\n   * @return {string} The race or type of the entity, in lowercase.\n   */\n  static getRaceOrType(entity) {\n    const actor = DDBEffectHelper.getActor(entity);\n    const systemData = actor?.system;\n    if (!systemData) return \"\";\n    if (systemData.details.race) {\n      return (systemData.details?.race?.name ?? systemData.details?.race)?.toLocaleLowerCase() ?? \"\";\n    }\n    return systemData.details.type?.value.toLocaleLowerCase() ?? \"\";\n  }\n\n  /**\n   * Retrieves the token based on the provided token reference.\n   *\n   * @param {any} tokenRef - The token reference to retrieve the token from.\n   * @return {Token|undefined} The retrieved token if it exists, otherwise undefined.\n   */\n  static getToken(tokenRef) {\n    if (!tokenRef) return undefined;\n    if (tokenRef instanceof Token) return tokenRef;\n    if (utils.isString(tokenRef)) return (fromUuidSync(tokenRef)?.object);\n    if (tokenRef instanceof TokenDocument) return tokenRef.object;\n    return undefined;\n  }\n\n  /**\n   * Retrieves the TokenDocument associated with the given token reference.\n   *\n   * @param {any} tokenRef - The token reference to retrieve the TokenDocument for.\n   * @return {TokenDocument|undefined} The TokenDocument associated with the token reference, or undefined if not found.\n   */\n  static getTokenDocument(tokenRef) {\n    if (!tokenRef) return undefined;\n    if (tokenRef instanceof TokenDocument) return tokenRef;\n    if (typeof tokenRef === \"string\") {\n      const document = fromUuidSync(tokenRef);\n      if (document instanceof TokenDocument) return document;\n      if (document instanceof Actor) return DDBEffectHelper.getTokenForActor(document)?.document;\n    }\n    if (tokenRef instanceof Token) return tokenRef.document;\n    return undefined;\n  }\n\n  /**\n   * Returns a token for the provided actor.\n   *\n   * @param {Actor} actor - The actor for which to retrieve the token.\n   * @return {Token|undefined} The token associated with the actor, or undefined if no token is found.\n   */\n  static getTokenForActor(actor) {\n    const tokens = actor.getActiveTokens();\n    if (!tokens.length) return undefined;\n    const controlled = tokens.filter((t) => t._controlled);\n    return controlled.length ? controlled.shift() : tokens.shift();\n  }\n\n  /**\n   * Get the image for the token.\n   *\n   * @param {object} token - The token for which to get the image.\n   * @return {string} The image URL for the token.\n   */\n  static async getTokenImage(token) {\n    const midiConfigSettings = game.settings.get(\"midi-qol\", \"ConfigSettings\");\n    let img = token.document?.texture?.src ?? token.actor.img ?? \"\";\n    if (midiConfigSettings.usePlayerPortrait && token.actor.type === \"character\") {\n      img = token.actor?.img ?? token.document?.texture?.src ?? \"\";\n    }\n    if (VideoHelper.hasVideoExtension(img)) {\n      img = await game.video.createThumbnail(img, { width: 100, height: 100 });\n    }\n    return img;\n  }\n\n  /**\n   * Retrieves the type or race of the given entity.\n   *\n   * @param {any} entity - The entity to retrieve the type or race from.\n   * @return {string} The type or race of the entity, in lowercase. If the type or race is not available, an empty string is returned.\n   */\n  static getTypeOrRace(entity) {\n    const actor = DDBEffectHelper.getActor(entity);\n    const systemData = actor?.system;\n    if (!systemData) return \"\";\n    if (systemData.details.type?.value) {\n      return systemData.details.type?.value.toLocaleLowerCase() ?? \"\";\n    }\n    return (systemData.details?.race?.name ?? systemData.details?.race)?.toLocaleLowerCase() ?? \"\";\n  }\n\n  /**\n * Returns a new duration which reflects the remaining duration of the specified one.\n *\n * @param {*} duration the source duration\n * @returns a new duration which reflects the remaining duration of the specified one.\n */\n  static getRemainingDuration(duration) {\n    const newDuration = {};\n    if (duration.type === \"seconds\") {\n      newDuration.seconds = duration.remaining;\n    } else if (duration.type === \"turns\") {\n      const remainingRounds = Math.floor(duration.remaining);\n      const remainingTurns = (duration.remaining - remainingRounds) * 100;\n      newDuration.rounds = remainingRounds;\n      newDuration.turns = remainingTurns;\n    }\n    return newDuration;\n  }\n\n\n  /**\n   * Returns true if the attack is a ranged weapon attack that hit. It also supports melee weapons\n   * with the thrown property.\n   * @param {*} macroData the midi-qol macro data.\n   * @returns true if the attack is a ranged weapon attack that hit\n   */\n  static isRangedWeaponAttack(macroData) {\n    if (macroData.hitTargets.length < 1) {\n      return false;\n    }\n    if (macroData.item?.system.actionType === \"rwak\") {\n      return true;\n    }\n    if (macroData.item?.system.actionType !== \"mwak\" || !macroData.item?.system.properties?.thr) {\n      return false;\n    }\n\n    const sourceToken = canvas.tokens?.get(macroData.tokenId);\n    const targetToken = macroData.hitTargets[0].object;\n    const distance = MidiQOL.computeDistance(sourceToken, targetToken, true);\n    const meleeDistance = 5; // Would it be possible to have creatures with reach and thrown weapon?\n    return distance >= 0 && distance > meleeDistance;\n  }\n\n  /**\n   * Check if actor a is smaller than b based on their sizes.\n   *\n   * @param {type} a\n   * @param {type} b\n   * @return {boolean} true if a is smaller than b, false otherwise\n   */\n  static isSmaller (a, b) {\n    const sizeA = DICTIONARY.SIZES.find((s) => s.value === a.system.traits.size)?.size;\n    const sizeB = DICTIONARY.SIZES.find((s) => s.value === b.system.traits.size)?.size;\n    return sizeA < sizeB;\n  }\n\n  /**\n   * If the requirements are met, returns true, false otherwise.\n   *\n   * @returns true if the requirements are met, false otherwise.\n   */\n  static requirementsSatisfied(name, dependencies) {\n    let missingDep = false;\n    dependencies.forEach((dep) => {\n      if (!game.modules.get(dep)?.active) {\n        const errorMsg = `${name}: ${dep} must be installed and active.`;\n        ui.notifications.error(errorMsg);\n        logger.warn(errorMsg);\n        missingDep = true;\n      }\n    });\n    return !missingDep;\n  }\n\n  /**\n   * Asynchronously rolls a saving throw for an item.\n   *\n   * @param {Object} item - The item for which the saving throw is rolled\n   * @param {Object} targetToken - The token representing the target of the saving throw\n   * @param {Object} [workflow=null] - The workflow for which the saving throw is rolled\n   * @return {Promise} A promise that resolves with the save result\n   */\n  static async rollSaveForItem(item, targetToken, workflow = null) {\n    const { ability, dc } = foundry.utils.duplicate(item.system.save);\n    const userID = MidiQOL.playerForActor(targetToken.actor)?.active\n      ? MidiQOL.playerForActor(targetToken.actor).id\n      : game.users.activeGM.id;\n    const data = {\n      request: \"save\",\n      targetUuid: targetToken.document.uuid,\n      ability,\n      options: {\n        name: \"Reflect\",\n        skipDialogue: true,\n        targetValue: dc,\n      },\n    };\n\n    const save = await MidiQOL.socket().executeAsUser(\"rollAbility\", userID, data);\n    if (workflow) workflow.saveResults.push(save);\n    return save;\n  }\n\n\n  /**\n   * Selects all the tokens that are within X distance of the source token for the current game user.\n   * @param {Token} sourceToken the reference token from which to compute the distance.\n   * @param {number} distance the distance from the reference token.\n   * @param {boolean} includeSource flag to indicate if the reference token should be included or not in the selected targets.\n   * @returns an array of Token instances that were selected.\n   */\n  static selectTargetsWithinX(sourceToken, distance, includeSource) {\n    let aoeTargets = MidiQOL.findNearby(null, sourceToken, distance);\n    if (includeSource) {\n      aoeTargets.unshift(sourceToken);\n    }\n    const aoeTargetIds = aoeTargets.map((t) => t.document.id);\n    game.user?.updateTokenTargets(aoeTargetIds);\n    game.user?.broadcastActivity({ aoeTargetIds });\n    return aoeTargets;\n  }\n\n  static updateUserTargets(targets) {\n    game.user.updateTokenTargets(targets);\n  }\n\n  static async wait(ms) {\n    return new Promise((resolve) => {\n      setTimeout(resolve, ms);\n    });\n  }\n\n  static isConditionEffectAppliedAndActive(condition, actor) {\n    return DDBEffectHelper.getActorEffects(actor).some(\n      (activeEffect) =>\n        (activeEffect?.name.toLowerCase() == condition.toLowerCase())\n        && !activeEffect?.disabled\n    );\n  }\n\n  static getConditionEffectAppliedAndActive(condition, actor) {\n    return DDBEffectHelper.getActorEffects(actor).find(\n      (activeEffect) =>\n        (activeEffect?.name.toLowerCase() == condition.toLowerCase())\n        && !activeEffect?.disabled\n    );\n  }\n\n  static async removeCondition({ actor, actorUuid, conditionName, level = null } = {}) {\n    if (!actor) actor = await fromUuid(actorUuid);\n    if (!actor) {\n      logger.error(\"No actor passed to remove condition\");\n      return;\n    }\n    const condition = CONFIG.statusEffects.find((se) => se.name.toLowerCase() === conditionName.toLowerCase());\n\n    if (!condition) {\n      logger.error(`Condition ${conditionName} not found`);\n      return;\n    }\n\n    logger.debug(`removing ${condition.name}`, { condition });\n    const existing = actor.document?.effects?.get(game.dnd5e.utils.staticID(`dnd5e${condition.id}`));\n    if (existing) await existing.delete();\n    if (condition.id === \"exhaustion\") {\n      logger.debug(\"Reducing exhaustion\", level);\n      await actor.update({ \"system.attributes.exhaustion\": level ?? 0 });\n    }\n  }\n\n  static async addCondition({ conditionName, actor, actorUuid, level = null, origin = null } = {}) {\n    if (!actor) actor = await fromUuid(actorUuid);\n    if (!actor) {\n      logger.error(\"No actor passed to remove condition\");\n      return;\n    }\n\n    const condition = CONFIG.statusEffects.find((se) => se.name.toLowerCase() === conditionName.toLowerCase());\n\n    if (!condition) {\n      logger.error(`Condition ${conditionName} not found`);\n      return;\n    }\n\n    logger.debug(`adding ${condition.name}`, { condition });\n    const effect = await ActiveEffect.implementation.fromStatusEffect(condition.id);\n    if (condition.level) effect.updateSource({ [`flags.dnd5e.${condition.id}Level`]: condition.level });\n    effect.updateSource({ origin });\n    const effectData = effect.toObject();\n    await actor.createEmbeddedDocuments(\"ActiveEffect\", [effectData], { keepId: true });\n    if (condition.foundry === \"exhaustion\") {\n      logger.debug(\"Updating actor exhaustion\", level);\n      await actor.update({ \"system.attributes.exhaustion\": level ?? 1 });\n    }\n  }\n\n  static async adjustCondition({ add = false, remove = false, actor, conditionName, level = null, origin = null } = {}) {\n    const gmUser = game.users.find((user) => user.active && user.isGM);\n    if (!gmUser) {\n      ui.notifications.error(\"No GM user found, unable to adjust condition\");\n      return;\n    }\n    if (!add && !remove) {\n      logger.warn(\"You must specify if you want to add or remove the condition\");\n      return;\n    }\n    logger.debug(\"Adjusting condition\", { add, remove, actor, conditionName, level, origin });\n    if (remove) {\n      logger.debug(\"Removing condition\", { actor, conditionName, level });\n      await globalThis.DDBImporter.socket.executeAsGM(\"removeCondition\", { actorUuid: actor.uuid, conditionName, level });\n    }\n    if (add) {\n      logger.debug(\"Adding condition\", { actor, conditionName, level, origin });\n      await globalThis.DDBImporter.socket.executeAsGM(\"addCondition\", { actorUuid: actor.uuid, conditionName, level, origin });\n    }\n    logger.debug(\"Condition adjusted\", { add, remove, actor, conditionName, level, origin });\n\n  }\n\n  static extractListItems(text, { type = \"ol\", titleType = \"em\" } = {}) {\n    const results = [];\n    const parsedDoc = utils.htmlToDoc(text);\n    const list = parsedDoc.body.querySelector(type);\n    if (list) {\n      const listItems = list.querySelectorAll('li');\n      listItems.forEach((item, index) => {\n        // console.log('Item ' + (index + 1) + ': ' + item.textContent);\n        const title = item.querySelector(titleType);\n        const content = title.nextSibling;\n        results.push({\n          number: index + 1,\n          title: title.textContent.replace(/\\.$/, \"\").trim(),\n          content: content.innerHTML ?? content.wholeText ?? content.textContent,\n          full: item.innerHTML,\n        });\n      });\n    }\n    if (results.length > 0) return results;\n    return DDBEffectHelper.extractParagraphItems(text, { titleType });\n  }\n\n  static extractParagraphItems(text, { type = \"p\", titleType = \"em\" } = {}) {\n    const results = [];\n    const parsedDoc = utils.htmlToDoc(text);\n\n    const listItems = parsedDoc.querySelectorAll(type);\n    let i = 1;\n    for (const item of listItems) {\n      const title = item.querySelector(titleType);\n      // eslint-disable-next-line no-continue\n      if (!title) continue;\n      const content = title.nextSibling;\n      results.push({\n        number: i,\n        title: title.textContent.replace(/\\.$/, \"\").trim(),\n        content: content.innerHTML?.trim() ?? content.wholeText?.trim() ?? content.textContent?.trim(),\n        full: item.innerHTML,\n      });\n      i++;\n    }\n\n    return results;\n  }\n\n  static async _verySimpleDamageRollToChat({ actor, flavor, formula, damageType = \"damage\", item, itemId, itemUuid } = {}) {\n    const roll = new CONFIG.Dice.DamageRoll(formula, {}, { type: damageType });\n    await roll.evaluate({ async: true });\n\n    if (!item && itemId && !itemUuid && actor) {\n      item = actor.getEmbeddedDocument(\"Item\", itemId);\n    }\n    if (!item && itemUuid && actor) {\n      item = await fromUuid(itemUuid);\n    }\n\n    if (item && !itemId) itemId = item._id;\n    if (item && !itemUuid) itemUuid = item.uuid;\n\n    roll.toMessage({\n      speaker: ChatMessage.getSpeaker({ actor }),\n      flavor,\n      \"flags.dnd5e\": {\n        targets: CONFIG.Item.documentClass._formatAttackTargets(),\n        roll: {\n          type: \"damage\",\n          itemId,\n          itemUuid,\n        }\n      },\n\n    });\n  }\n\n  static async simpleDamageRollToChat({ event = undefined, actor, flavor, formulas = [], damageType = \"damage\", item, itemId, itemUuid, fastForward = false } = {}) {\n\n    if (!item && itemId && !itemUuid && actor) {\n      item = actor.getEmbeddedDocument(\"Item\", itemId);\n    }\n    if (!item && itemUuid && actor) {\n      item = await fromUuid(itemUuid);\n    }\n\n    if (item && !itemId) itemId = item._id;\n    if (item && !itemUuid) itemUuid = item.uuid;\n\n    const isHealing = damageType in CONFIG.DND5E.healingTypes;\n    const title = game.i18n.localize(`DND5E.${isHealing ? \"Healing\" : \"Damage\"}Roll`);\n    const rollConfig = {\n      rollConfigs: [{\n        parts: formulas,\n        type: damageType\n      }],\n      flavor: flavor ?? title,\n      event,\n      title,\n      fastForward,\n      messageData: {\n        \"flags.dnd5e\": {\n          targets: CONFIG.Item.documentClass._formatAttackTargets(),\n          roll: { type: \"damage\", itemId, itemUuid },\n        },\n        speaker: ChatMessage.implementation.getSpeaker()\n      }\n    };\n\n    if (Hooks.call(\"dnd5e.preRollDamage\", undefined, rollConfig) === false) return;\n    const roll = await globalThis.dnd5e.dice.damageRoll(rollConfig);\n    if (roll) Hooks.callAll(\"dnd5e.rollDamage\", undefined, roll);\n  }\n\n  static syntheticItemWorkflowOptions({\n    targets = undefined, showFullCard = false, useSpellSlot = false, castLevel = false, consume = false,\n    configureDialog = false, targetConfirmation = undefined\n  } = {}) {\n    return [\n      {\n        showFullCard,\n        createWorkflow: true,\n        consumeResource: consume,\n        consumeRecharge: consume,\n        consumeQuantity: consume,\n        consumeUsage: consume,\n        consumeSpellSlot: useSpellSlot,\n        consumeSpellLevel: castLevel,\n        slotLevel: castLevel,\n      },\n      {\n        targetUuids: targets,\n        configureDialog,\n        workflowOptions: {\n          autoRollDamage: 'always',\n          autoFastDamage: true,\n          autoRollAttack: true,\n          targetConfirmation,\n        }\n      }\n    ];\n  }\n}\n","import logger from \"../logger.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport DDBEffectHelper from \"./DDBEffectHelper.js\";\n\nexport default class DDBMacros {\n\n  static MACROS = {\n    WORLD: {\n      // DARKNESS_GM: {\n      //   name: \"Darkness (DDB - GM)\",\n      //   type: \"gm\",\n      //   file: \"darkness.js\",\n      //   isGM: true,\n      //   img: \"icons/magic/unholy/orb-glowing-yellow-purple.webp\",\n      //   world: true,\n      // },\n      // CHILL_TOUCH: {\n      //   name: \"Chill Touch (Target effect)\",\n      //   type: \"spell\",\n      //   file: \"chillTouchWorld.js\",\n      //   isGM: false,\n      //   img: \"icons/magic/fire/flame-burning-hand-purple.webp\",\n      //   world: true,\n      // },\n    },\n    ACTIVE_AURAS: {\n      AA_ONLY: {\n        name: \"Active Aura Only (Generic)\",\n        type: \"generic\",\n        file: \"activeAuraOnly.js\",\n        isGM: false,\n        img: null,\n        world: true,\n      },\n      AA_ON_ENTRY: {\n        name: \"Active Aura Damage and Condition On Entry (Generic)\",\n        type: \"generic\",\n        file: \"activeAuraDamageAndConditionOnEntry.js\",\n        isGM: false,\n        img: null,\n        world: true,\n      },\n      AA_CONDITION_ON_ENTRY: {\n        name: \"Active Aura Condition On Entry (Generic)\",\n        type: \"generic\",\n        file: \"activeAuraConditionOnEntry.js\",\n        isGM: false,\n        img: null,\n        world: true,\n      },\n      AA_DAMAGE_ON_ENTRY: {\n        name: \"Active Aura Damage On Entry (Generic)\",\n        type: \"generic\",\n        file: \"activeAuraDamageOnEntry.js\",\n        isGM: false,\n        img: null,\n        world: true,\n      },\n    },\n  };\n\n  static async checkMacroFolder() {\n    const macroFolder = game.folders.find((folder) => folder.name === \"DDB Macros\" && folder.type === \"Macro\");\n\n    if (!macroFolder) {\n      await Folder.create({\n        color: \"#FF0000\",\n        name: \"DDB Macros\",\n        parent: null,\n        type: \"Macro\",\n      });\n    }\n  }\n\n  static async configureDependencies() {\n    // allow item use macros on items\n    if (game.modules.get(\"midi-qol\")?.active) {\n      let midiQOLSettings = game.settings.get(\"midi-qol\", \"ConfigSettings\");\n      if (!midiQOLSettings.allowUseMacro) {\n        midiQOLSettings.allowUseMacro = true;\n        game.settings.set(\"midi-qol\", \"ConfigSettings\", midiQOLSettings);\n      }\n    } else {\n      logger.warn(\"Midi-QOL needs to be installed for effects\");\n      // ui.notifications.warn(\"Midi-QOL needs to be installed for effects\");\n    }\n\n    if (game.modules.get(\"itemacro\")?.active && game.modules.get(\"dae\")?.active) {\n      const itemMacroSheet = game.settings.get(\"itemacro\", \"defaultmacro\");\n      if (itemMacroSheet) {\n        game.settings.set(\"itemacro\", \"defaultmacro\", false);\n      }\n    }\n\n    if (game.modules.get(\"warpgate\")?.active && DDBEffectHelper.checkJB2a(true, true, false)) {\n      await DDBEffectHelper._createJB2aActors(\"Dancing Lights\", \"Dancing light\");\n    }\n\n    return true;\n  }\n\n  static async loadMacroFile(type, fileName, forceLoad = false, forceDDB = false) {\n    const embedMacros = game.settings.get(\"ddb-importer\", \"embed-macros\");\n    logger.debug(`Getting macro for ${type} ${fileName}`);\n    const fileExists = forceLoad || (typeof ForgeVTT !== \"undefined\" && ForgeVTT?.usingTheForge)\n      ? true\n      : await FileHelper.fileExists(`[data] modules/ddb-importer/macros/${type}s`, fileName);\n\n    let data;\n    if (fileExists && (forceLoad || embedMacros) && !forceDDB) {\n      const url = await FileHelper.getFileUrl(`[data] modules/ddb-importer/macros/${type}s`, fileName);\n      const response = await fetch(url, { method: \"GET\" });\n      data = await response.text();\n    } else if (fileExists && (!embedMacros || forceDDB)) {\n      data = `// Execute DDB Importer dynamic macro\nreturn game.modules.get(\"ddb-importer\")?.api.macros.executeMacro(\"${type}\", \"${fileName}\", scope);\n`;\n    } else if (!fileExists) {\n      data = \"// Unable to load the macro file\";\n    }\n    return data;\n  }\n\n  static generateItemMacroFlag(document, macroText) {\n    const daeMacro = foundry.utils.isNewerVersion((game.modules.get(\"dae\")?.version ?? 0), \"11.0.21\");\n    const data = {\n      name: document.name,\n      type: \"script\",\n      scope: \"global\",\n      command: macroText,\n    };\n    const flag = daeMacro ? \"flags.dae.macro\" : \"flags.itemacro.macro\";\n    foundry.utils.setProperty(document, flag, data);\n    return document;\n  }\n\n  static async setItemMacroFlag(document, macroType, macroName) {\n    const useDDBFunctions = game.settings.get(\"ddb-importer\", \"no-item-macros\");\n    if (!useDDBFunctions) {\n      const itemMacroText = await DDBMacros.loadMacroFile(macroType, macroName);\n      document = DDBMacros.generateItemMacroFlag(document, itemMacroText);\n    }\n    return document;\n  }\n\n  static generateMacroChange({ macroValues = \"\", macroType = null, macroName = null, keyPostfix = \"\", priority = 20 } = {}) {\n    const useDDBFunctions = game.settings.get(\"ddb-importer\", \"no-item-macros\");\n    const macroKey = (useDDBFunctions)\n      ? `macro.execute`\n      : \"macro.itemMacro\";\n    const macroValuePrefix = (useDDBFunctions)\n      ? `function.DDBImporter.lib.DDBMacros.macroFunction.${macroType}(\"${macroName}\") `\n      : \"\";\n\n    return {\n      key: `${macroKey}${keyPostfix}`,\n      value: `${macroValuePrefix}${macroValues}`,\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: priority,\n    };\n  }\n\n  static generateMidiOnUseMacroFlagValue(macroType, macroName, triggerPoints = [], macroUuid = null) {\n    const useDDBFunctions = game.settings.get(\"ddb-importer\", \"no-item-macros\");\n    const docMacroName = (macroUuid && !useDDBFunctions) ? `.${macroUuid}` : \"\";\n    const valueContent = (useDDBFunctions)\n      ? `function.DDBImporter.lib.DDBMacros.macroFunction.${macroType}(\"${macroName}\")`\n      : `ItemMacro${docMacroName}`;\n    return triggerPoints.map((t) => `[${t}]${valueContent}`).join(\",\");\n  }\n\n  static setMidiOnUseMacroFlag(document, macroType, macroName, triggerPoints = []) {\n    const value = DDBMacros.generateMidiOnUseMacroFlagValue(macroType, macroName, triggerPoints);\n    foundry.utils.setProperty(document, \"flags.midi-qol.onUseMacroName\", value);\n  }\n\n  static generateItemMacroValue({ macroType = null, macroName = null, document = null } = {}) {\n    const useDDBFunctions = game.settings.get(\"ddb-importer\", \"no-item-macros\");\n    const docMacroName = (document && !useDDBFunctions) ? `.${document.name}` : \"\";\n    const valueContent = (useDDBFunctions)\n      ? `function.DDBImporter.lib.DDBMacros.macroFunction.${macroType}(\"${macroName}\")`.trim()\n      : `ItemMacro${docMacroName}`.trim();\n    return valueContent;\n  }\n\n\n  static generateOnUseMacroChange({ macroPass, macroType = null, macroName = null, priority = 20, document = null, macroParams = \"\" } = {}) {\n    const valueStub = DDBMacros.generateItemMacroValue({ macroType, macroName, document });\n    const valueContent = `${valueStub},${macroPass} ${macroParams}`.trim();\n\n    return {\n      key: \"flags.midi-qol.onUseMacroName\",\n      value: valueContent,\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: priority,\n    };\n  }\n\n  static generateOptionalMacroChange({ optionPostfix, macroPass = null, macroType = null, macroName = null, priority = 20, document = null, macroParams = \"\" } = {}) {\n    const valueStub = DDBMacros.generateItemMacroValue({ macroType, macroName, document });\n    const valueContent = macroPass\n      ? `${valueStub},${macroPass} ${macroParams}`.trim()\n      : `${valueStub} ${macroParams}`.trim();\n\n    return {\n      key: `flags.midi-qol.optional.${optionPostfix}`,\n      value: valueContent,\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: priority,\n    };\n  }\n\n  static async createMacro({ name, content, img, isGM, isTemp }) {\n    const macroFolder = isTemp\n      ? undefined\n      : game.folders.find((folder) => folder.name === \"DDB Macros\" && folder.type === \"Macro\");\n\n    const data = {\n      name: name,\n      type: \"script\",\n      img: img ? img : \"icons/svg/dice-target.svg\",\n      scope: \"global\",\n      command: content,\n      folder: macroFolder ? macroFolder.id : undefined,\n      flags: {\n        \"advanced-macros\": {\n          runAsGM: isGM,\n          runForSpecificUser: \"\",\n        },\n      },\n      ownership: {\n        default: isGM ? 0 : 2,\n      },\n    };\n\n    const existingMacro = game.macros.find((m) => m.name == name);\n    if (existingMacro) data._id = existingMacro.id;\n    const macro = existingMacro\n      ? existingMacro.update(data)\n      : Macro.create(data, { displaySheet: false, temporary: isTemp });\n\n    return macro;\n\n  }\n\n  static async createWorldMacros() {\n    if (game.user.isGM) {\n      await DDBMacros.checkMacroFolder();\n\n      const worldMacros = [].concat(\n        Object.values(DDBMacros.MACROS.WORLD),\n        // Object.values(DDBMacros.MACROS.ACTIVE_AURAS),\n      ).filter((m) => m.world);\n\n      for (const macro of worldMacros) {\n        const macroFile = await DDBMacros.loadMacroFile(macro.type, macro.file, true);\n\n        if (macroFile) {\n          await DDBMacros.createMacro({ name: macro.name, content: macroFile, img: macro.img, isGM: macro.isGM, isTemp: false });\n        }\n      }\n    }\n  }\n\n\n  static async getMacroBody(type, fileName) {\n    const macroText = await DDBMacros.loadMacroFile(type, fileName, true);\n    if (!macroText) {\n      ui.notifications.error(`Unable to load macro (${type}) ${fileName}`);\n      logger.warn(`Unable to load macro (${type}) ${fileName}`);\n      throw new Error(`Unable to load macro (${type}) ${fileName}`);\n    }\n    return macroText;\n  }\n\n  static _getMacroFileNameFromName(name) {\n    const strippedName = name.split(\".js\")[0]; // sanitise name\n    const fileName = `${strippedName}.js`;\n    return {\n      name: strippedName,\n      fileName: fileName,\n    };\n  }\n\n  static async loadDDBMacroToConfig(type, name, fileName) {\n    const macroText = await DDBMacros.getMacroBody(type, fileName);\n    const macro = await DDBMacros.createMacro({ name: `${type} ${fileName}`, content: macroText, img: null, isGM: false, isTemp: true });\n    foundry.utils.setProperty(CONFIG.DDBI.MACROS, `${type}.${name}`, macro);\n    logger.debug(`Macro (${type}) ${fileName} loaded from file into cache`, macro);\n    return macro;\n  }\n\n\n  static async getMacro(type, name) {\n    const names = DDBMacros._getMacroFileNameFromName(name);\n    const macro = CONFIG.DDBI.MACROS[type]?.[names.name]\n      ?? (await DDBMacros.loadDDBMacroToConfig(type, names.name, names.fileName));\n    return macro;\n  }\n\n  static async executeDDBMacro(type, name, ...params) {\n    // console.warn(\"executeDDBMacro\", {type, name, parms: [...params] });\n    const macro = await DDBMacros.getMacro(type, name);\n    logger.debug(`Calling (${type}) macro \"${name}\" with spread params`, ...params);\n    return macro.execute(...params);\n  }\n\n  /**\n   * Expose some useful things in a macro.\n   * @param {ActiveEffect} effect\n   * @returns {object}\n   */\n  static _getEffectVariables(effect) {\n    const actor = effect.parent instanceof Actor\n      ? effect.parent\n      : effect.parent.parent ?? null;\n    const token = actor?.token?.object ?? actor?.getActiveTokens()[0] ?? null;\n    const scene = token?.scene ?? game.scenes.active ?? null;\n    const origin = effect.origin ? fromUuidSync(effect.origin) : null;\n    const speaker = actor ? ChatMessage.implementation.getSpeaker({ actor }) : {};\n    const item = effect.parent instanceof Item ? effect.parent : null;\n    return {\n      actor,\n      token,\n      speaker,\n      scene,\n      origin,\n      effect,\n      item,\n    };\n  }\n\n  /**\n   * Exectutes a DDB Macro as GM, don't pass in world objects like actors\n   * ids = { actor, effect, token}\n   */\n  static async executeDDBMacroAsGM(type, name, ids = {}, ...params) {\n    const gmUser = game.users.find((user) => user.active && user.isGM);\n    if (!gmUser) {\n      ui.notifications.error(\"No GM user found\");\n      return undefined;\n    }\n    if (game.user.isGM) {\n      return DDBMacros.executeDDBMacro(type, name, ...params);\n    } else {\n      logger.debug(\"Executing macro as GM\", { type, name, ids, params });\n      const result = await globalThis.DDBImporter.socket.executeAsGM(\"ddbMacroFunction\", type, name, {}, ids, ...params);\n      logger.debug(\"GM Macro Result\", result);\n      return result;\n    }\n  }\n\n  static getMacroFunction(type, name) {\n    const macroFunction = async (...params) => {\n      const macro = await DDBMacros.getMacro(type, name);\n      return macro.execute(...params);\n    };\n    return macroFunction;\n  }\n\n  static macroFunction = {\n    spell: (name) => DDBMacros.getMacroFunction(\"spell\", name),\n    feat: (name) => DDBMacros.getMacroFunction(\"feat\", name),\n    gm: (name) => DDBMacros.getMacroFunction(\"gm\", name),\n    item: (name) => DDBMacros.getMacroFunction(\"item\", name),\n    monsterFeature: (name) => DDBMacros.getMacroFunction(\"monsterFeature\", name),\n    generic: (name) => DDBMacros.getMacroFunction(\"generic\", name),\n  };\n\n}\n","import utils from \"../lib/utils.js\";\nimport logger from \"../logger.js\";\nimport DDBMacros from \"./DDBMacros.js\";\n\n/**\n * This class helps execute DDB Macros and is mainl\n */\nexport default class DDBSimpleMacro {\n\n  static MACROS = {\n    \"feat\": {\n      \"lay-on-hands\": {\n        name: \"layOnHands\",\n        label: \"Lay On Hands Macro\"\n      },\n      \"arcane-recovery\": {\n        name: \"arcaneRecovery\",\n        label: \"Arcane Recovery Macro\"\n      },\n      \"font-of-magic\": {\n        name: \"fontOfMagic\",\n        label: \"Font of Magic Macro\",\n      },\n      \"convert-sorcery-points\": {\n        name: \"fontOfMagic\",\n        label: \"Font of Magic Macro\",\n      },\n    },\n    \"item\": {\n      \"spell-refuleing-ring\": {\n        name: \"spellRefuelingRing\",\n        label: \"Spell Refueling Macro\",\n      }\n    }\n  };\n\n  static getDescriptionAddition(name, type, params) {\n    const safeName = utils.referenceNameString(name).toLowerCase();\n    const macroDetails = foundry.utils.getProperty(DDBSimpleMacro.MACROS, `${type}.${safeName}`);\n    if (!macroDetails) return \"\";\n\n    const parameters = params\n      ? params\n      : (macroDetails.parameters ?? \"\");\n\n    return `<br><p>[[/ddbifunc functionName=\"${macroDetails.name ?? safeName}\" functionType=\"${type}\" functionParams=\"${parameters}\"]]{${macroDetails.label}}</div></p>`;\n  }\n\n\n  /**\n   * Executes a DDB macro function.\n   *\n   * @param {string} type - The type of the macro. e.g. gm\n   * @param {string} name - The name of the macro. e.g. test\n   * @param {object} context - The context object.\n   * @param {object} ids - An object of ids you wish to resolve for the macro to run\n   * @param {object} scope - ANy additional information/parameters in an object to pass to the macro\n   * @return {Promise<any>} The result of the macro function.\n   */\n  static async execute(type, name, context = {}, ids = {}, { ...scope } = {}) {\n    const names = DDBMacros._getMacroFileNameFromName(name);\n    const script = await DDBMacros.getMacroBody(type, names.fileName);\n    const effect = ids.effect ? await fromUuid(ids.effect) : null;\n    const effectVariables = ids.effect\n      ? DDBMacros._getEffectVariables(effect)\n      : {};\n\n    const actor = ids.actor\n      ? await fromUuid(ids.actor)\n      : null;\n    if (actor) effectVariables.actor = actor;\n\n    const token = ids.token\n      ? await fromUuid(ids.token)\n      : null;\n    if (token) effectVariables.token = token;\n\n    const item = ids.item\n      ? await fromUuid(ids.item)\n      : null;\n    if (item) effectVariables.item = item;\n\n    const origin = ids.origin\n      ? await fromUuid(ids.origin)\n      : null;\n    if (origin) effectVariables.origin = origin;\n\n    if (!effectVariables.speaker && actor) {\n      const speaker = ChatMessage.implementation.getSpeaker({ actor, token });\n      if (speaker) effectVariables.speaker = speaker;\n    }\n\n    effectVariables.character = game.user.character;\n    effectVariables.scope = scope;\n    foundry.utils.setProperty(effectVariables.scope, \"flags.ddb-importer.ddbMacroFunction\", true);\n\n    const variables = foundry.utils.mergeObject(effectVariables, scope);\n\n    // eslint-disable-next-line no-empty-function\n    const AsyncFunction = (async function() {}).constructor;\n    // eslint-disable-next-line no-new-func\n    const fn = new AsyncFunction(...Object.keys(variables), `{${script}\\n}`);\n\n    try {\n      const result = await fn.call(context, ...Object.values(variables));\n      return result;\n    } catch (err) {\n      logger.error(err);\n      return null;\n    }\n  }\n\n\n}\n","import DDBHelper from \"../lib/DDBHelper.js\";\nimport logger from \"../logger.js\";\nimport DICTIONARY from \"../dictionary.js\";\nimport { baseItemEffect, addAddBonusEffect } from \"./effects.js\";\n\n// // ac -\n// { type: \"bonus\", subType: \"armor-class\" },\n// // e.g. robe of the archm\n// { type: \"set\", subType: \"unarmored-armor-class\" },\n// // bracers of defence\n// { type: \"bonus\", subType: \"unarmored-armor-class\" },\n\n/**\n *\n * @param {*} label\n */\nfunction buildBaseACEffect(label) {\n  let effect = {\n    changes: [],\n    duration: {\n      seconds: null,\n      startTime: null,\n      rounds: null,\n      turns: null,\n      startRound: null,\n      startTurn: null,\n    },\n    origin: null,\n    tint: \"\",\n    disabled: true,\n    transfer: true,\n    selectedKey: [],\n    img: \"icons/svg/shield.svg\",\n  };\n  effect.name = label;\n  return effect;\n}\n\n// function maxACWrapper(formula) {\n//   return `max(${formula}, @attributes.ac.armor + @attributes.ac.dex)`;\n// }\n\n/**\n *\n * Generate an effect given inputs for AC\n * This is a high priority set effect that will typically override all other AE.\n * @param {*} formula\n * @param {*} label\n * @param {*} alwaysActive\n * @param {*} priority\n * @param {*} mode\n */\nexport function generateFixedACEffect(formula, label, alwaysActive = false, priority = 30, mode = CONST.ACTIVE_EFFECT_MODES.OVERRIDE) {\n  let effect = buildBaseACEffect(label);\n\n  effect.flags = {\n    dae: { transfer: true, armorEffect: true },\n    ddbimporter: { disabled: !alwaysActive, itemId: null, entityTypeId: null, characterEffect: true },\n  };\n  // effect.disabled = !alwaysActive;\n  effect.disabled = false;\n  effect.origin = \"AC\";\n\n  const formulaChange = { key: \"system.attributes.ac.formula\", value: formula, mode, priority };\n  const calcChange = { key: \"system.attributes.ac.calc\", value: \"custom\", mode, priority };\n  effect.changes.push(calcChange, formulaChange);\n\n  return effect;\n}\n\n/**\n * Generate stat sets\n *\n * @param {*} modifiers\n * @param {*} name\n * @param {*} subType\n */\nfunction addACSetEffect(modifiers, name, subType) {\n  let bonuses;\n\n  if (modifiers.some((mod) => mod.statId !== null && mod.type === \"set\" && mod.subType === subType)) {\n    modifiers.filter((mod) => mod.statId !== null && mod.type === \"set\" && mod.subType === subType)\n      .forEach((mod) => {\n        const ability = DICTIONARY.character.abilities.find((ability) => ability.id === mod.statId);\n        if (bonuses) {\n          bonuses += \" \";\n        } else {\n          bonuses = \"\";\n        }\n        bonuses += `@abilities.${ability.value}.mod`;\n      });\n  } else {\n    // others are picked up here e.g. Draconic Resilience\n    const fixedValues = modifiers.filter((mod) => mod.type === \"set\" && mod.subType === subType).map((mod) => mod.value);\n    bonuses = Math.max(fixedValues);\n  }\n\n  let effects = [];\n  const maxDexTypes = [\"ac-max-dex-unarmored-modifier\", \"ac-max-dex-modifier\"];\n\n  if (bonuses && bonuses != 0) {\n    const bonusSum = Number.isInteger(bonuses) ? 10 + bonuses : `10 + ${bonuses}`;\n    let formula = \"\";\n    switch (subType) {\n      case \"unarmored-armor-class\": {\n        let maxDexMod = 99;\n        const ignoreDexMod = modifiers.some((mod) => mod.type === \"ignore\" && mod.subType === \"unarmored-dex-ac-bonus\");\n        const maxDexArray = modifiers\n          .filter((mod) => mod.type === \"set\" && maxDexTypes.includes(mod.subType))\n          .map((mod) => mod.value);\n        if (maxDexArray.length > 0) maxDexMod = Math.min(maxDexArray);\n        if (ignoreDexMod) {\n          formula = `${bonusSum}`;\n        } else if (maxDexMod === 99) {\n          formula = `${bonusSum} + @abilities.dex.mod`;\n        } else {\n          // formula = `@abilities.dex.mod > ${maxDexMod} ? ${bonusSum} + ${maxDexMod} : ${bonusSum} + @abilities.dex.mod`;\n          formula = `min(${bonusSum} + ${maxDexMod}, ${bonusSum} + @abilities.dex.mod)`;\n        }\n        break;\n      }\n      default: {\n        formula = `${bonusSum} + @abilities.dex.mod`;\n      }\n    }\n\n    logger.debug(`Generating ${subType} AC set for ${name}: ${formula}`);\n    effects.push(\n      {\n        key: \"system.attributes.ac.formula\",\n        value: formula,\n        mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n        priority: 15,\n      },\n      {\n        key: \"system.attributes.ac.calc\",\n        value: \"custom\",\n        mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n        priority: 15,\n      },\n    );\n  }\n  return effects;\n}\n\n/**\n *\n * @param {*} modifiers\n * @param {*} name\n */\nfunction addACSets(modifiers, name) {\n  let changes = [];\n  const stats = [\"unarmored-armor-class\"];\n  stats.forEach((set) => {\n    const result = addACSetEffect(modifiers, name, set);\n    changes = changes.concat(result);\n  });\n\n  return changes;\n}\n\n/**\n * Generates an AC bonus for an item\n *\n * @param {*} modifiers\n * @param {*} name\n * @param {*} subType\n */\nfunction addACBonusEffect(modifiers, name, subType, restrictions = [\"while wearing heavy armor\", \"while not wearing heavy armor\", \"\", null]) {\n  const bonusModifiers = DDBHelper.filterModifiersOld(modifiers, \"bonus\", subType, restrictions);\n  const changes = addAddBonusEffect(bonusModifiers, name, subType, \"system.attributes.ac.bonus\");\n  if (changes.length > 0) logger.debug(`Generating ${subType} bonus for ${name}`);\n\n  return changes;\n}\n\n\n/**\n *\n * Generate an effect given inputs for AC\n * This is a high priority set effect that will typically override all other AE.\n * @param {*} formula\n * @param {*} label\n * @param {*} alwaysActive\n * @param {*} priority\n * @param {*} mode\n */\nexport function generateBonusACEffect(modifiers, label, subType, restrictions = [], alwaysActive = true) {\n  let effect = buildBaseACEffect(label);\n\n  effect.flags = {\n    dae: { transfer: true, armorEffect: true },\n    ddbimporter: { disabled: !alwaysActive, itemId: null, entityTypeId: null, characterEffect: true },\n  };\n  // effect.disabled = !alwaysActive;\n  effect.disabled = false;\n  effect.origin = \"AC\";\n\n  const changes = addACBonusEffect(modifiers, label, subType, restrictions);\n  if (changes.length > 0) effect.changes = changes;\n\n  return effect;\n}\n\nfunction addEffectFlags(foundryItem, effect, ddbItem, isCompendiumItem) {\n  if (\n    isCompendiumItem\n    || foundryItem.type === \"feat\"\n    || (ddbItem.isAttuned && ddbItem.equipped) // if it is attuned and equipped\n    || (ddbItem.isAttuned && !ddbItem.definition.canEquip) // if it is attuned but can't equip\n    || (!ddbItem.definition.canAttune && ddbItem.equipped) // can't attune but is equipped\n  ) {\n    foundry.utils.setProperty(foundryItem, \"flags.dae.alwaysActive\", false);\n    foundry.utils.setProperty(effect, \"flags.ddbimporter.disabled\", false);\n    effect.disabled = false;\n  } else {\n    effect.disabled = true;\n    foundry.utils.setProperty(effect, \"flags.ddbimporter.disabled\", true);\n    foundry.utils.setProperty(foundryItem, \"flags.dae.alwaysActive\", false);\n  }\n\n  foundry.utils.setProperty(effect, \"flags.ddbimporter.itemId\", ddbItem.id);\n  foundry.utils.setProperty(effect, \"flags.ddbimporter.itemEntityTypeId\", ddbItem.entityTypeId);\n  // set dae flag for active equipped\n  if (ddbItem.definition?.canEquip || ddbItem.definition?.canAttune) {\n    foundry.utils.setProperty(foundryItem, \"flags.dae.activeEquipped\", true);\n  } else {\n    foundry.utils.setProperty(foundryItem, \"flags.dae.activeEquipped\", false);\n  }\n\n  return [foundryItem, effect];\n}\n\nfunction generateBaseACEffectChanges(ddb, character, ddbItem, foundryItem, isCompendiumItem, effect) {\n  const noModifiers = !ddbItem.definition?.grantedModifiers || ddbItem.definition.grantedModifiers.length === 0;\n  // const noACValue = !foundryItem.system?.armor?.value;\n\n  // note: I don't know why I had noACValue here. does this break stuff if I remove it?\n  // if (noModifiers && noACValue) return [];\n  if (noModifiers) return [];\n  // console.error(`Item: ${foundryItem.name}`, ddbItem);\n  logger.debug(`Generating supported AC changes for ${foundryItem.name} for effect ${effect.name}`);\n\n  // base ac from modifiers\n  const acSets = addACSets(ddbItem.definition.grantedModifiers, foundryItem.name);\n\n  // ac bonus effects\n  const acBonus = addACBonusEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"armor-class\",\n  );\n  const unarmoredACBonus = addACBonusEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"unarmored-armor-class\",\n  );\n  const armoredACBonus = addACBonusEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"armored-armor-class\",\n  );\n  const dualWieldACBonus = addACBonusEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"dual-wield-armor-class\",\n  );\n\n  const acChanges = [\n    ...acSets,\n    ...acBonus,\n    ...unarmoredACBonus,\n    ...armoredACBonus,\n    ...dualWieldACBonus,\n  ];\n\n  return acChanges;\n\n}\n\n// generates changes and adds to effect for item\nexport function generateACEffectChangesForItem(ddb, character, ddbItem, foundryItem, isCompendiumItem, effect) {\n  const noModifiers = !ddbItem.definition?.grantedModifiers || ddbItem.definition.grantedModifiers.length === 0;\n\n  if (noModifiers) return [foundryItem, effect];\n\n  const acChanges = generateBaseACEffectChanges(ddb, character, ddbItem, foundryItem, isCompendiumItem, effect);\n\n  if (acChanges.length === 0) return [foundryItem, effect]; ;\n\n  effect.changes = effect.changes.concat(acChanges);\n\n  // generate flags for effect (e.g. checking attunement and equipped status)\n  [foundryItem, effect] = addEffectFlags(foundryItem, effect, ddbItem, isCompendiumItem);\n\n  return [foundryItem, effect];\n\n}\n\n/**\n *\n * @param {*} ddb\n * @param {*} character\n * @param {*} ddbItem\n * @param {*} foundryItem\n * @param {*} isCompendiumItem\n */\nexport function generateBaseACItemEffect(ddb, character, ddbItem, foundryItem, isCompendiumItem) {\n  const noModifiers = !ddbItem.definition?.grantedModifiers || ddbItem.definition.grantedModifiers.length === 0;\n  const noACValue = !foundryItem.system?.armor?.value;\n\n  if (noModifiers && noACValue) return foundryItem;\n  // console.error(`Item: ${foundryItem.name}`, ddbItem);\n  logger.debug(`Generating supported AC effects for ${foundryItem.name}`);\n\n  let effect = baseItemEffect(foundryItem, `${foundryItem.name} (AC)`);\n\n  // generate flags for effect (e.g. checking attunement and equipped status)\n  [foundryItem, effect] = generateACEffectChangesForItem(ddb, character, ddbItem, foundryItem, isCompendiumItem, effect);\n\n  if (effect.changes?.length > 0) {\n    if (!foundryItem.effects) foundryItem.effects = [];\n    foundryItem.effects.push(effect);\n  }\n  return foundryItem;\n}\n","// import {\n//   baseItemEffect,\n//   generateUpgradeChange,\n//   generateAddChange,\n//   generateMultiplyChange,\n//   generateCustomChange,\n// } from \"./effects.js\";\n\n/**\n * This function is mainly for effects that can't be dynamically generated\n * @param {*} document\n */\nexport function infusionEffectAdjustment(document) {\n\n  return document;\n}\n","import utils from \"../lib/utils.js\";\nimport DDBHelper from \"../lib/DDBHelper.js\";\nimport logger from \"../logger.js\";\nimport DICTIONARY from \"../dictionary.js\";\nimport { equipmentEffectAdjustment } from \"./specialEquipment.js\";\nimport { infusionEffectAdjustment } from \"./specialInfusions.js\";\nimport { generateACEffectChangesForItem, generateBaseACItemEffect } from \"./acEffects.js\";\nimport DDBCharacter from \"../parser/DDBCharacter.js\";\n\n/**\n * Add supported effects here to exclude them from calculations.\n */\nconst EFFECT_EXCLUDED_COMMON_MODIFIERS = [\n  { type: \"bonus\", subType: \"saving-throws\" },\n  { type: \"bonus\", subType: \"ability-checks\" },\n  { type: \"bonus\", subType: \"skill-checks\" },\n  { type: \"bonus\", subType: \"proficiency-bonus\" },\n\n  { type: \"set\", subType: \"strength-score\" },\n  { type: \"set\", subType: \"dexterity-score\" },\n  { type: \"set\", subType: \"constitution-score\" },\n  { type: \"set\", subType: \"wisdom-score\" },\n  { type: \"set\", subType: \"intelligence-score\" },\n  { type: \"set\", subType: \"charisma-score\" },\n\n  // skills\n  { type: \"bonus\", subType: \"acrobatics\" },\n  { type: \"bonus\", subType: \"animal-handling\" },\n  { type: \"bonus\", subType: \"arcana\" },\n  { type: \"bonus\", subType: \"athletics\" },\n  { type: \"bonus\", subType: \"deception\" },\n  { type: \"bonus\", subType: \"history\" },\n  { type: \"bonus\", subType: \"insight\" },\n  { type: \"bonus\", subType: \"intimidation\" },\n  { type: \"bonus\", subType: \"investigation\" },\n  { type: \"bonus\", subType: \"medicine\" },\n  { type: \"bonus\", subType: \"nature\" },\n  { type: \"bonus\", subType: \"perception\" },\n  { type: \"bonus\", subType: \"performance\" },\n  { type: \"bonus\", subType: \"persuasion\" },\n  { type: \"bonus\", subType: \"religion\" },\n  { type: \"bonus\", subType: \"sleight-of-hand\" },\n  { type: \"bonus\", subType: \"stealth\" },\n  { type: \"bonus\", subType: \"survival\" },\n\n  { type: \"advantage\", subType: \"acrobatics\" },\n  { type: \"advantage\", subType: \"animal-handling\" },\n  { type: \"advantage\", subType: \"arcana\" },\n  { type: \"advantage\", subType: \"athletics\" },\n  { type: \"advantage\", subType: \"deception\" },\n  { type: \"advantage\", subType: \"history\" },\n  { type: \"advantage\", subType: \"insight\" },\n  { type: \"advantage\", subType: \"intimidation\" },\n  { type: \"advantage\", subType: \"investigation\" },\n  { type: \"advantage\", subType: \"medicine\" },\n  { type: \"advantage\", subType: \"nature\" },\n  { type: \"advantage\", subType: \"perception\" },\n  { type: \"advantage\", subType: \"performance\" },\n  { type: \"advantage\", subType: \"persuasion\" },\n  { type: \"advantage\", subType: \"religion\" },\n  { type: \"advantage\", subType: \"sleight-of-hand\" },\n  { type: \"advantage\", subType: \"stealth\" },\n  { type: \"advantage\", subType: \"survival\" },\n\n\n  { type: \"bonus\", subType: \"passive-insight\" },\n  { type: \"bonus\", subType: \"passive-investigation\" },\n  { type: \"bonus\", subType: \"passive-perception\" },\n  // advantage on skills - not added here as not used elsewhere in importer.\n  // { type: \"advantage\", subType: \"acrobatics\" },\n\n  // initiative\n  { type: \"advantage\", subType: \"initiative\" },\n  { type: \"bonus\", subType: \"initiative\" },\n\n  { type: \"bonus\", subType: \"strength-ability-checks\" },\n  { type: \"bonus\", subType: \"dexterity-ability-checks\" },\n  { type: \"bonus\", subType: \"constitution-ability-checks\" },\n  { type: \"bonus\", subType: \"wisdom-ability-checks\" },\n  { type: \"bonus\", subType: \"intelligence-ability-checks\" },\n  { type: \"bonus\", subType: \"charisma-ability-checks\" },\n\n  { type: \"bonus\", subType: \"strength-saving-throws\" },\n  { type: \"bonus\", subType: \"dexterity-saving-throws\" },\n  { type: \"bonus\", subType: \"constitution-saving-throws\" },\n  { type: \"bonus\", subType: \"wisdom-saving-throws\" },\n  { type: \"bonus\", subType: \"intelligence-saving-throws\" },\n  { type: \"bonus\", subType: \"charisma-saving-throws\" },\n\n  // attack modifiers\n  { type: \"bonus\", subType: \"weapon-attacks\" },\n  { type: \"bonus\", subType: \"melee-attacks\" },\n  { type: \"bonus\", subType: \"ranged-attacks\" },\n  { type: \"bonus\", subType: \"melee-weapon-attacks\" },\n  { type: \"bonus\", subType: \"ranged-weapon-attacks\" },\n  { type: \"damage\", subType: null },\n\n  // spell modifiers\n  { type: \"bonus\", subType: \"spell-save-dc\" },\n  { type: \"bonus\", subType: \"spell-attacks\" },\n  { type: \"bonus\", subType: \"melee-spell-attacks\" },\n  { type: \"bonus\", subType: \"ranged-spell-attacks\" },\n  { type: \"bonus\", subType: \"warlock-spell-save-dc\" },\n  { type: \"bonus\", subType: \"warlock-spell-attacks\" },\n  { type: \"bonus\", subType: \"spell-group-healing\" }, // system.bonuses.heal.damage\n\n  // hp modifiers\n  { type: \"bonus\", subType: \"hit-points-per-level\" },\n  { type: \"bonus\", subType: \"hit-points\" },\n\n  // attunement\n  { type: \"set\", subType: \"attunement-slots\" },\n\n  // resistances - subType - e.g. poison - lookup from DICTIONARY\n  { type: \"resistance\", subType: null },\n  { type: \"immunity\", subType: null },\n  { type: \"vulnerability\", subType: null },\n\n];\n\nconst EFFECT_EXCLUDED_SENSE_MODIFIERS = [\n  // senses\n  { type: \"set-base\", subType: \"darkvision\" },\n  { type: \"sense\", subType: \"darkvision\" },\n  { type: \"set-base\", subType: \"blindsight\" },\n  { type: \"sense\", subType: \"blindsight\" },\n  { type: \"set-base\", subType: \"tremorsense\" },\n  { type: \"sense\", subType: \"tremorsense\" },\n  { type: \"set-base\", subType: \"truesight\" },\n  { type: \"sense\", subType: \"truesight\" },\n];\n\nconst EFFECT_EXCLUDED_SPEED_SET_MODIFIERS = [\n  // speeds\n  { type: \"set\", subType: \"innate-speed-walking\" },\n  { type: \"set\", subType: \"innate-speed-climbing\" },\n  { type: \"set\", subType: \"innate-speed-swimming\" },\n  { type: \"set\", subType: \"innate-speed-flying\" },\n];\n\nconst EFFECT_EXCLUDED_SPEED_BONUS_MODIFIERS = [\n  { type: \"bonus\", subType: \"speed\" },\n  { type: \"bonus\", subType: \"speed-walking\" },\n  { type: \"bonus\", subType: \"speed-climbing\" },\n  { type: \"bonus\", subType: \"speed-swimming\" },\n  { type: \"bonus\", subType: \"speed-flying\" },\n];\n\nconst EFFECT_EXCLUDED_GENERAL_SPEED_MODIFIERS = EFFECT_EXCLUDED_SPEED_SET_MODIFIERS.concat(EFFECT_EXCLUDED_SPEED_BONUS_MODIFIERS);\n\nconst EFFECT_EXCLUDED_MONK_SPEED_MODIFIERS = [\n  { type: \"bonus\", subType: \"unarmored-movement\" },\n];\n\nconst EFFECT_EXCLUDED_ALL_SPEED_MODIFIERS = EFFECT_EXCLUDED_GENERAL_SPEED_MODIFIERS.concat(EFFECT_EXCLUDED_MONK_SPEED_MODIFIERS);\n\nconst EFFECT_EXCLUDED_ABILITY_BONUSES = [\n  { type: \"bonus\", subType: \"strength-score\" },\n  { type: \"bonus\", subType: \"dexterity-score\" },\n  { type: \"bonus\", subType: \"constitution-score\" },\n  { type: \"bonus\", subType: \"wisdom-score\" },\n  { type: \"bonus\", subType: \"intelligence-score\" },\n  { type: \"bonus\", subType: \"charisma-score\" },\n];\n\nconst EFFECT_EXCLUDED_PROFICIENCY_BONUSES = [\n  // profs\n  { type: \"proficiency\", subType: null },\n];\n\nconst EFFECT_EXCLUDED_LANGUAGES_MODIFIERS = [\n  // languages - e.g. dwarvish -- lookup from DICTIONARY\n  { type: \"language\", subType: null },\n];\n\nconst AC_BONUS_MODIFIERS = [\n  { type: \"bonus\", subType: \"unarmored-armor-class\" },\n  { type: \"bonus\", subType: \"armor-class\" },\n  { type: \"bonus\", subType: \"armored-armor-class\" },\n  { type: \"bonus\", subType: \"dual-wield-armor-class\" },\n];\n\nconst AC_EFFECTS = [\n  { type: \"set\", subType: \"unarmored-armor-class\" },\n  { type: \"ignore\", subType: \"unarmored-dex-ac-bonus\" },\n  { type: \"set\", subType: \"ac-max-dex-modifier\" },\n];\n\nexport function getEffectExcludedModifiers(type, features, ac) {\n  let modifiers = [];\n\n  if (type !== \"item\") {\n    // features represent core non ac features\n    if (features) {\n      modifiers = modifiers.concat(EFFECT_EXCLUDED_COMMON_MODIFIERS, EFFECT_EXCLUDED_MONK_SPEED_MODIFIERS);\n      if (![\"race\"].includes(type)) {\n        modifiers = modifiers.concat(EFFECT_EXCLUDED_SENSE_MODIFIERS, EFFECT_EXCLUDED_GENERAL_SPEED_MODIFIERS);\n      }\n    }\n    // here ac represents the more exotic ac effects that set limits and change base\n    modifiers = modifiers.concat(AC_BONUS_MODIFIERS);\n    if (ac) {\n      modifiers = modifiers.concat(AC_EFFECTS);\n    }\n  }\n\n  // items are basically their own thing, all or nuffin\n  if (type === \"item\") {\n    modifiers = modifiers.concat(\n      EFFECT_EXCLUDED_COMMON_MODIFIERS,\n      EFFECT_EXCLUDED_ABILITY_BONUSES,\n      EFFECT_EXCLUDED_LANGUAGES_MODIFIERS,\n      EFFECT_EXCLUDED_PROFICIENCY_BONUSES,\n      EFFECT_EXCLUDED_ALL_SPEED_MODIFIERS,\n      AC_EFFECTS,\n      AC_BONUS_MODIFIERS,\n    );\n  }\n  return modifiers;\n}\n\n// eslint-disable-next-line complexity\nexport function effectModules() {\n  if (CONFIG.DDBI.EFFECT_CONFIG.MODULES.installedModules) {\n    return CONFIG.DDBI.EFFECT_CONFIG.MODULES.installedModules;\n  }\n  const midiQolInstalled = game.modules.get(\"midi-qol\")?.active ?? false;\n  const timesUp = game.modules.get(\"times-up\")?.active ?? false;\n  const daeInstalled = game.modules.get(\"dae\")?.active ?? false;\n  const convenientEffectsInstalled = game.modules.get(\"dfreds-convenient-effects\")?.active ?? false;\n\n  const activeAurasInstalled = game.modules.get(\"ActiveAuras\")?.active ?? false;\n  const atlInstalled = game.modules.get(\"ATL\")?.active ?? false;\n  const tokenMagicInstalled = game.modules.get(\"tokenmagic\")?.active ?? false;\n  const autoAnimationsInstalled = game.modules.get(\"autoanimations\")?.active ?? false;\n  const chrisInstalled = game.modules.get(\"chris-premades\")?.active ?? false;\n  const vision5eInstalled = game.modules.get(\"vision-5e\")?.active ?? false;\n  const warpgateInstalled = game.modules.get(\"warpgate\")?.active ?? false;\n\n  CONFIG.DDBI.EFFECT_CONFIG.MODULES.installedModules = {\n    hasCore: midiQolInstalled && timesUp && daeInstalled,\n    hasMonster: midiQolInstalled && timesUp && daeInstalled,\n    midiQolInstalled,\n    timesUp,\n    daeInstalled,\n    convenientEffectsInstalled,\n    atlInstalled,\n    tokenMagicInstalled,\n    activeAurasInstalled,\n    autoAnimationsInstalled,\n    chrisInstalled,\n    vision5eInstalled,\n    warpgateInstalled,\n  };\n  return CONFIG.DDBI.EFFECT_CONFIG.MODULES.installedModules;\n}\n\nfunction generateEffectDuration(foundryItem) {\n  let duration = {\n    seconds: null,\n    startTime: null,\n    rounds: null,\n    turns: null,\n    startRound: null,\n    startTurn: null,\n  };\n  switch (foundryItem.system?.duration?.units) {\n    case \"turn\":\n      duration.turns = foundryItem.system.duration.value;\n      break;\n    case \"round\":\n      duration.rounds = foundryItem.system.duration.value;\n      break;\n    case \"hour\":\n      duration.seconds = foundryItem.system.duration.value * 60 * 60;\n      break;\n    case \"minute\":\n      duration.rounds = foundryItem.system.duration.value * 10;\n      break;\n    // no default\n  }\n  return duration;\n}\n\nexport function baseEffect(foundryItem, label,\n  { transfer = true, disabled = false } = {}\n) {\n  let effect = {\n    img: foundryItem.img,\n\n    changes: [],\n    duration: {},\n    // duration: {\n    //   seconds: null,\n    //   startTime: null,\n    //   rounds: null,\n    //   turns: null,\n    //   startRound: null,\n    //   startTurn: null,\n    // },\n    tint: \"\",\n    transfer,\n    disabled,\n    // origin: origin,\n    flags: {\n      dae: {\n        transfer,\n        stackable: \"noneName\",\n        // armorEffect: true\n      },\n      ddbimporter: {\n        disabled,\n      },\n      \"midi-qol\": { // by default force CE effect usage to off\n        forceCEOff: true,\n      },\n      core: {},\n    },\n  };\n  effect.name = label;\n  effect.statuses = [];\n  effect.duration = generateEffectDuration(foundryItem);\n  return effect;\n}\n\nexport function baseEnchantmentEffect(foundryItem, label,\n  { transfer = false, disabled = false, origin = null, id = null } = {}\n) {\n  const effect = baseEffect(foundryItem, label, { transfer, disabled });\n  foundry.utils.setProperty(effect, \"flags.dnd5e.type\", \"enchantment\");\n  foundry.utils.setProperty(effect, \"flags.dnd5e.enchantment\", {\n    level: {\n      min: null,\n      max: null\n    },\n    riders: {\n      effect: [],\n      item: [],\n    },\n  });\n  effect._id = id ?? foundry.utils.randomID();\n  effect.origin = origin ?? null;\n  return effect;\n}\n\nexport function baseItemEffect(foundryItem, label,\n  { transfer = true, disabled = false } = {}\n) {\n  return baseEffect(foundryItem, label, { transfer, disabled });\n}\n\nexport function getMidiCEOnFlags(midiFlags = {}) {\n  foundry.utils.setProperty(midiFlags, \"forceCEOff\", false);\n  foundry.utils.setProperty(midiFlags, \"forceCEOn\", true);\n  return midiFlags;\n}\n\nexport function applyDefaultMidiFlags(document) {\n  if (effectModules().midiQolInstalled) {\n    foundry.utils.setProperty(document, \"flags.midi-qol.removeAttackDamageButtons\", \"default\");\n    foundry.utils.setProperty(document, \"flags.midiProperties.confirmTargets\", \"default\");\n  }\n  return document;\n}\n\nexport function forceItemEffect(document) {\n  if (document.effects.length > 0 || foundry.utils.hasProperty(document.flags, \"dae\") || foundry.utils.hasProperty(document.flags, \"midi-qol.onUseMacroName\")) {\n    document = applyDefaultMidiFlags(document);\n    foundry.utils.setProperty(document, \"flags.ddbimporter.effectsApplied\", true);\n    if (!foundry.utils.getProperty(document, \"flags.midi-qol.forceCEOn\")) foundry.utils.setProperty(document, \"flags.midi-qol.forceCEOff\", true);\n  }\n  return document;\n}\n\nexport function forceManualReaction(document) {\n  foundry.utils.setProperty(document, \"system.activation.type\", \"reactionmanual\");\n  return document;\n}\n\n// *\n// CONST.ACTIVE_EFFECT_MODES.\n// ADD: 2\n// CUSTOM: 0\n// DOWNGRADE: 3\n// MULTIPLY: 1\n// OVERRIDE: 5\n// UPGRADE: 4\n//\n\nexport function generateBaseSkillEffect(id, label) {\n  const mockItem = {\n    img: \"icons/svg/up.svg\",\n  };\n  let skillEffect = baseItemEffect(mockItem, label);\n  skillEffect.flags.dae = {};\n  skillEffect.flags.ddbimporter.characterEffect = true;\n  skillEffect.origin = `Actor.${id}`;\n  delete skillEffect.transfer;\n  return skillEffect;\n}\n\nexport function generateStatusEffectChange(statusName, priority = 20) {\n  return {\n    key: effectModules().daeInstalled ? \"macro.StatusEffect\" : \"statuses\",\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n    value: statusName.toLowerCase(),\n    priority: priority,\n  };\n}\n\nexport function addStatusEffectChange(effect, statusName, priority = 20, macro = false, level = null) {\n  if (effectModules().daeInstalled) {\n    const key = generateStatusEffectChange(statusName, priority, macro);\n    effect.changes.push(key);\n  } else {\n    effect.statuses.push(statusName.toLowerCase());\n    if (level) foundry.utils.setProperty(effect, `flags.dnd5e.${statusName.toLowerCase().trim()}Level`, level);\n  }\n  return effect;\n}\n\nexport function generateTokenMagicFXChange(macroValue, priority = 20) {\n  return {\n    key: 'macro.tokenMagic',\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    value: macroValue,\n    priority: priority,\n  };\n}\n\nexport function generateATLChange(atlKey, mode, value, priority = 20) {\n  let key = atlKey;\n\n  switch (atlKey) {\n    case 'ATL.dimLight':\n      key = 'ATL.light.dim';\n      break;\n    case 'ATL.brightLight':\n      key = 'ATL.light.bright';\n      break;\n    case 'ATL.lightAnimation':\n      key = 'ATL.light.animation';\n      break;\n    case 'ATL.lightColor':\n      key = 'ATL.light.color';\n      break;\n    case 'ATL.lightAlpha':\n      key = 'ATL.light.alpha';\n      break;\n    case 'ATL.lightAngle':\n      key = 'ATL.light.angle';\n      break;\n    // no default\n  }\n\n  return {\n    key,\n    mode,\n    value,\n    priority,\n  };\n}\n\nexport function addSimpleConditionEffect(document, condition, { disabled, transfer } = {}) {\n  document.effects = [];\n  const effect = baseItemEffect(document, `${document.name} - ${utils.capitalize(condition)}`, { disabled, transfer });\n  addStatusEffectChange(effect, condition);\n  document.effects.push(effect);\n  return document;\n}\n\nexport function generateChange(bonus, priority, key, mode) {\n  return {\n    key: key,\n    value: bonus,\n    mode: mode,\n    priority: priority,\n  };\n}\n\nexport function generateSignedAddChange(bonus, priority, key) {\n  const bonusValue = (Number.isInteger(bonus) && bonus >= 0) // if bonus is a positive integer\n    || (!Number.isInteger(bonus) && !bonus.trim().startsWith(\"+\") && !bonus.trim().startsWith(\"-\")) // not an int and does not start with + or -\n    ? `+${bonus}`\n    : bonus;\n  return generateChange(bonusValue, priority, key, CONST.ACTIVE_EFFECT_MODES.ADD);\n}\n\nexport function generateUnsignedAddChange(bonus, priority, key) {\n  const bonusValue = `${bonus}`.trim().replace(\"+ +\", \"+\").replace(/^\\+\\s+/, \"\");\n  return generateChange(bonusValue.trim(), priority, key, CONST.ACTIVE_EFFECT_MODES.ADD);\n}\n\nexport function generateCustomChange(bonus, priority, key) {\n  return generateChange(bonus, priority, key, CONST.ACTIVE_EFFECT_MODES.CUSTOM);\n}\n\nexport function generateCustomBonusChange(bonus, priority, key) {\n  const bonusValue = (Number.isInteger(bonus) && bonus >= 0) // if bonus is a positive integer\n    || (!Number.isInteger(bonus) && !bonus.trim().startsWith(\"+\") && !bonus.trim().startsWith(\"-\")) // not an int and does not start with + or -\n    ? `+${bonus}`\n    : bonus;\n  return generateChange(bonusValue, priority, key, CONST.ACTIVE_EFFECT_MODES.CUSTOM);\n}\n\nexport function generateUpgradeChange(bonus, priority, key) {\n  return generateChange(bonus, priority, key, CONST.ACTIVE_EFFECT_MODES.UPGRADE);\n}\n\nexport function generateOverrideChange(bonus, priority, key) {\n  return generateChange(bonus, priority, key, CONST.ACTIVE_EFFECT_MODES.OVERRIDE);\n}\n\nexport function generateMultiplyChange(bonus, priority, key) {\n  return generateChange(bonus, priority, key, CONST.ACTIVE_EFFECT_MODES.MULTIPLY);\n}\n\nexport function generateDowngradeChange(bonus, priority, key) {\n  return generateChange(bonus, priority, key, CONST.ACTIVE_EFFECT_MODES.DOWNGRADE);\n}\n\n\n/**\n * Generates a global add for an item\n */\nexport function addAddBonusEffect(modifiers, name, type, key) {\n  let changes = [];\n  // const bonus = DDBHelper.filterModifiersOld(modifiers, \"bonus\", type).reduce((a, b) => a + b.value, 0);\n  const bonus = DDBHelper.getValueFromModifiers(modifiers, name, type, \"bonus\");\n  if (bonus) {\n    logger.debug(`Generating ${type} bonus for ${name}`, bonus);\n    changes.push(generateUnsignedAddChange(`+ ${bonus}`, 18, key));\n  }\n  return changes;\n}\n\n/**\n * Generates a global custom bonus for an item\n */\nfunction addCustomEffect(modifiers, name, type, key, extra = \"\") {\n  let changes = [];\n  const bonus = DDBHelper.filterModifiersOld(modifiers, \"bonus\", type).reduce((a, b) => a + b.value, 0);\n  if (bonus !== 0) {\n    logger.debug(`Generating ${type} bonus for ${name}`);\n    changes.push(generateCustomChange(`${bonus}${(extra) ? extra : \"\"}`, 18, key));\n  }\n  return changes;\n}\n\n//\n// Generate saving throw bonuses\n//\nfunction addGlobalSavingBonusEffect(modifiers, name) {\n  const type = \"saving-throws\";\n  const key = \"system.bonuses.abilities.save\";\n  let changes = [];\n  const regularBonuses = modifiers.filter((mod) => !mod.bonusTypes?.includes(2));\n  const customBonuses = modifiers.filter((mod) => mod.bonusTypes?.includes(2));\n\n  if (customBonuses.length > 0) {\n    let customEffects = addAddBonusEffect(customBonuses, name, type, key);\n    changes = changes.concat(customEffects);\n  }\n\n  const regularModifiers = DDBHelper.filterModifiersOld(regularBonuses, \"bonus\", type);\n\n  if (regularModifiers.length > 0) {\n    logger.debug(`Generating ${type} bonus for ${name}`);\n    let bonuses = \"\";\n    regularModifiers.forEach((modifier) => {\n      let bonusParse = DDBHelper.extractModifierValue(modifier);\n      if (bonuses !== \"\") bonuses += \" + \";\n      bonuses += bonusParse;\n    });\n    if (bonuses === \"\") bonuses = 0;\n    changes.push(generateUnsignedAddChange(`+ ${bonuses}`, 20, key));\n    logger.debug(`Changes for ${type} bonus for ${name}`, changes);\n  }\n\n  return changes;\n}\n\n/**\n * Adds languages, can't handle custom languages\n */\nfunction addLanguages(modifiers, name) {\n  let changes = [];\n\n  const ddbCharacter = new DDBCharacter();\n  const languages = ddbCharacter.getLanguagesFromModifiers(modifiers);\n\n  languages.value.forEach((prof) => {\n    logger.debug(`Generating language ${prof} for ${name}`);\n    changes.push(generateUnsignedAddChange(prof, 0, \"system.traits.languages.value\"));\n  });\n  if (languages?.custom != \"\") {\n    logger.debug(`Generating language ${languages.custom} for ${name}`);\n    changes.push(generateUnsignedAddChange(languages.custom, 0, \"system.traits.languages.custom\"));\n  }\n\n  return changes;\n}\n\n\nfunction damageBonus(type, modifiers, name) {\n  let changes = [];\n  const bonus = modifiers\n    .filter((mod) => mod.dice || mod.die || mod.value)\n    .map((mod) => {\n      const die = mod.dice ? mod.dice : mod.die ? mod.die : undefined;\n      if (die) {\n        return utils.parseDiceString(die.diceString, null, mod.subType ? `[${mod.subType}]` : null).diceString;\n      } else {\n        return utils.parseDiceString(mod.value, null, mod.subType ? `[${mod.subType}]` : null).diceString;\n      }\n    });\n  if (bonus && bonus.length > 0) {\n    logger.debug(`Generating ${type} damage for ${name}`);\n    const change = generateUnsignedAddChange(`${bonus.join(\" + \")}`, 22, `system.bonuses.${type}.damage`);\n    changes.push(change);\n  }\n  return changes;\n}\n\n/**\n * Generate global damage bonuses\n*/\nfunction addGlobalDamageBonus(modifiers, name) {\n  let changes = [];\n  // melee restricted attacks\n  const meleeRestrictions = [\"Melee Weapon Attacks\"];\n  const meleeRestrictedMods = DDBHelper.filterModifiersOld(modifiers, \"damage\", null, meleeRestrictions);\n  const meleeBonuses = damageBonus(\"mwak\", meleeRestrictedMods, name);\n  changes.push(...meleeBonuses);\n\n  const rangedRestrictions = [\"Ranged Weapon Attacks\"];\n  const rangedRestrictionMods = DDBHelper.filterModifiersOld(modifiers, \"damage\", null, rangedRestrictions);\n  const rangedBonuses = damageBonus(\"rwak\", rangedRestrictionMods, name);\n  changes.push(...rangedBonuses);\n\n  const DAMAGE_SUBTYPE_MAP = {\n    \"one-handed-melee-attacks\": [\"mwak\"],\n  };\n\n  for (const [subtype, damageTypes] of Object.entries(DAMAGE_SUBTYPE_MAP)) {\n    const subTypeMods = DDBHelper.filterModifiersOld(modifiers, \"damage\", subtype);\n    for (const damageType of damageTypes) {\n      const bonus = damageBonus(damageType, subTypeMods, name);\n      changes.push(...bonus);\n    }\n  }\n\n  const allBonusMods = DDBHelper.filterModifiersOld(modifiers, \"damage\", null)\n    .filter((mod) => !Object.keys(DAMAGE_SUBTYPE_MAP).includes(mod.subType))\n    .filter((mod) => mod.dice || mod.die || mod.value);\n  if (allBonusMods.length > 0) {\n    logger.debug(`Generating all damage for ${name}`);\n    changes.push(...damageBonus(\"mwak\", allBonusMods, name));\n    changes.push(...damageBonus(\"rwak\", allBonusMods, name));\n  }\n  return changes;\n}\n\nfunction addWeaponAttackBonuses(modifiers, name) {\n  const meleeAttackBonus = addAddBonusEffect(\n    modifiers,\n    name,\n    \"melee-attacks\",\n    \"system.bonuses.mwak.attack\"\n  );\n  const rangedAttackBonus = addAddBonusEffect(\n    modifiers,\n    name,\n    \"ranged-attacks\",\n    \"system.bonuses.rwak.attack\"\n  );\n  const meleeWeaponAttackBonus = addAddBonusEffect(\n    modifiers,\n    name,\n    \"melee-weapon-attacks\",\n    \"system.bonuses.mwak.attack\"\n  );\n  const rangedWeaponAttackBonus = addAddBonusEffect(\n    modifiers,\n    name,\n    \"ranged-weapon-attacks\",\n    \"system.bonuses.rwak.attack\"\n  );\n  const weaponAttackMeleeBonus = addAddBonusEffect(\n    modifiers,\n    name,\n    \"weapon-attacks\",\n    \"system.bonuses.mwak.attack\"\n  );\n  const weaponAttackRangedBonus = addAddBonusEffect(\n    modifiers,\n    name,\n    \"weapon-attacks\",\n    \"system.bonuses.rwak.attack\"\n  );\n  return [\n    ...meleeAttackBonus,\n    ...rangedAttackBonus,\n    ...meleeWeaponAttackBonus,\n    ...rangedWeaponAttackBonus,\n    ...weaponAttackMeleeBonus,\n    ...weaponAttackRangedBonus,\n  ];\n}\n\n\nfunction addSpellAttackBonuses(modifiers, name) {\n  const meleeSpellAttackBonus = addAddBonusEffect(\n    modifiers,\n    name,\n    \"spell-attacks\",\n    \"system.bonuses.msak.attack\"\n  );\n  const melee2SpellAttackBonus = addAddBonusEffect(\n    modifiers,\n    name,\n    \"melee-spell-attacks\",\n    \"system.bonuses.msak.attack\"\n  );\n  const rangedSpellAttackBonus = addAddBonusEffect(\n    modifiers,\n    name,\n    \"spell-attacks\",\n    \"system.bonuses.rsak.attack\"\n  );\n  const ranged2SpellAttackBonus = addAddBonusEffect(\n    modifiers,\n    name,\n    \"ranged-spell-attacks\",\n    \"system.bonuses.rsak.attack\"\n  );\n  const warlockMeleeSpellAttackBonus = addAddBonusEffect(\n    modifiers,\n    name,\n    \"warlock-spell-attacks\",\n    \"system.bonuses.msak.attack\"\n  );\n  const warlockRangedSpellAttackBonus = addAddBonusEffect(\n    modifiers,\n    name,\n    \"warlock-spell-attacks\",\n    \"system.bonuses.msak.attack\"\n  );\n  const warlockSpellDCBonus = addAddBonusEffect(\n    modifiers,\n    name,\n    \"warlock-spell-save-dc\",\n    \"system.bonuses.spell.dc\"\n  );\n  const spellDCBonus = addAddBonusEffect(\n    modifiers,\n    name,\n    \"spell-save-dc\",\n    \"system.bonuses.spell.dc\"\n  );\n  const healingSpellBonus = addCustomEffect(\n    modifiers,\n    name,\n    \"spell-group-healing\",\n    \"system.bonuses.heal.damage\",\n    \" + @item.level\"\n  );\n\n  return [\n    ...meleeSpellAttackBonus,\n    ...melee2SpellAttackBonus,\n    ...rangedSpellAttackBonus,\n    ...ranged2SpellAttackBonus,\n    ...warlockMeleeSpellAttackBonus,\n    ...warlockRangedSpellAttackBonus,\n    ...warlockSpellDCBonus,\n    ...spellDCBonus,\n    ...healingSpellBonus,\n  ];\n}\n\n// *\n// Get list of generic conditions/damages\n//\nexport function getGenericConditionAffectData(modifiers, condition, typeId, forceNoMidi = false) {\n  const restrictions = [\n    \"\",\n    null,\n    \"While within 20 feet\",\n    \"Dwarf Only\",\n    \"While Not Incapacitated\",\n    // \"As an Action\", this is a timed/limited effect, dealt with elsewhere\n    \"While Staff is Held\",\n    \"Helm has at least one ruby remaining\",\n    \"while holding\",\n    \"While Held\",\n  ];\n\n  const ddbAdjustments = typeId === 4\n    ? [\n      { id: 11, type: 4, name: \"Poisoned\", slug: \"poison\" },\n      { id: 16, type: 4, name: \"Diseased\", slug: \"diseased\" },\n      { id: 16, type: 4, name: \"Diseased\", slug: \"disease\" },\n    ]\n      .concat(CONFIG.DDB.conditions.map((a) => {\n        return {\n          id: a.definition.id,\n          type: 4,\n          name: a.definition.name,\n          slug: a.definition.slug,\n        };\n      }))\n    : CONFIG.DDB.damageAdjustments;\n\n  const result = DDBHelper\n    .filterModifiersOld(modifiers, condition, null, restrictions)\n    .filter((modifier) => {\n      const ddbLookup = ddbAdjustments.find((d) => d.type == typeId && d.slug === modifier.subType);\n      if (!ddbLookup) return false;\n      return DICTIONARY.character.damageAdjustments.some((adj) =>\n        adj.type === typeId\n        && ddbLookup.id === adj.id\n        && (foundry.utils.hasProperty(adj, \"foundryValues\") || foundry.utils.hasProperty(adj, \"foundryValue\"))\n      );\n    })\n    .map((modifier) => {\n      const ddbLookup = ddbAdjustments.find((d) => d.type == typeId && d.slug === modifier.subType);\n      const entry = DICTIONARY.character.damageAdjustments.find((adj) =>\n        adj.type === typeId\n        && ddbLookup.id === adj.id\n      );\n      if (!entry) return undefined;\n      const valueData = foundry.utils.hasProperty(entry, \"foundryValues\")\n        ? foundry.utils.getProperty(entry, \"foundryValues\")\n        : foundry.utils.hasProperty(entry, \"foundryValue\")\n          ? { value: entry.foundryValue }\n          : undefined;\n      return valueData;\n    })\n    .filter((adjustment) => adjustment !== undefined)\n    .map((result) => {\n      if (game.modules.get(\"midi-qol\")?.active && result.midiValues && !forceNoMidi) {\n        return {\n          value: result.value.concat(result.midiValues),\n          bypass: result.bypass,\n        };\n      } else {\n        return result;\n      }\n    });\n\n  return result;\n}\n\n\nfunction addCriticalHitImmunities(modifiers, name) {\n  if (!game.modules.get(\"midi-qol\")?.active) return [];\n  const result = DDBHelper.filterModifiersOld(modifiers, \"immunity\", \"critical-hits\");\n\n  if (result.length > 0) {\n    logger.debug(`Generating critical hit immunity for ${name}`);\n    return [generateCustomChange(1, 1, \"flags.midi-qol.fail.critical.all\")];\n  } else {\n    return [];\n  }\n}\n\n/**\n * Get  Damage Conditions, and Condition Immunities\n * @param {*} ddbItem\n */\nfunction addDamageConditions(modifiers) {\n  let charges = [];\n\n  const damageImmunityData = getGenericConditionAffectData(modifiers, \"immunity\", 2);\n  const damageResistanceData = getGenericConditionAffectData(modifiers, \"resistance\", 1);\n  const damageVulnerabilityData = getGenericConditionAffectData(modifiers, \"vulnerability\", 3);\n\n  damageImmunityData.forEach((data) => {\n    if (data.value && data.value.length > 0) charges.push(generateUnsignedAddChange(data.value, 1, \"system.traits.di.value\"));\n    if (data.bypass && data.bypass.length > 0) charges.push(generateUnsignedAddChange(data.bypass, 1, \"system.traits.di.bypasses\"));\n  });\n  damageResistanceData.forEach((data) => {\n    if (data.value && data.value.length > 0) charges.push(generateUnsignedAddChange(data.value, 1, \"system.traits.dr.value\"));\n    if (data.bypass && data.bypass.length > 0) charges.push(generateUnsignedAddChange(data.bypass, 1, \"system.traits.dr.bypasses\"));\n  });\n  damageVulnerabilityData.forEach((data) => {\n    if (data.value && data.value.length > 0) charges.push(generateUnsignedAddChange(data.value, 1, \"system.traits.dv.value\"));\n    if (data.bypass && data.bypass.length > 0) charges.push(generateUnsignedAddChange(data.bypass, 1, \"system.traits.dv.bypasses\"));\n  });\n\n  const conditionImmunityData = getGenericConditionAffectData(modifiers, \"immunity\", 4);\n\n  conditionImmunityData.forEach((data) => {\n    if (data.value && data.value.length > 0) charges.push(generateUnsignedAddChange(data.value, 1, \"system.traits.ci.value\"));\n    if (data.bypass && data.bypass.length > 0) charges.push(generateUnsignedAddChange(data.bypass, 1, \"system.traits.ci.bypasses\"));\n  });\n\n  // system.traits.di.all\n  const allDamageImmunity = DDBHelper.filterModifiersOld(modifiers, \"immunity\", \"all\");\n  if (allDamageImmunity?.length > 0) {\n    charges.push(generateUnsignedAddChange(\"all\", 1, \"system.traits.di.value\"));\n  }\n\n  return charges;\n}\n\n// *\n// Generate stat bonuses\n//\nfunction addStatBonusEffect(modifiers, name, subType) {\n  const bonuses = modifiers.filter((modifier) => modifier.type === \"bonus\" && modifier.subType === subType);\n\n  let effects = [];\n  if (bonuses.length > 0) {\n    bonuses.forEach((bonus) => {\n      logger.debug(`Generating ${subType} stat bonus for ${name}`);\n      const ability = DICTIONARY.character.abilities.find((ability) => ability.long === subType.split(\"-\")[0]);\n\n      if (game.modules.get(\"dae\")?.active) {\n        const bonusString = `min(@abilities.${ability.value}.max, @abilities.${ability.value}.value + ${bonus.value})`;\n        // min(20, @abilities.con.value + 2)\n        effects.push(generateOverrideChange(bonusString, 5, `system.abilities.${ability.value}.value`));\n      } else {\n        effects.push(generateSignedAddChange(bonus.value, 5, `system.abilities.${ability.value}.value`));\n      }\n\n    });\n  }\n  return effects;\n}\n\nfunction addStatBonuses(modifiers, name) {\n  let changes = [];\n  const stats = [\n    \"strength-score\",\n    \"dexterity-score\",\n    \"constitution-score\",\n    \"wisdom-score\",\n    \"intelligence-score\",\n    \"charisma-score\",\n  ];\n  stats.forEach((stat) => {\n    const result = addStatBonusEffect(modifiers, name, stat);\n    changes = changes.concat(result);\n  });\n\n  return changes;\n}\n\n// *\n// Generate stat sets\n//\nfunction addStatSetEffect(modifiers, name, subType) {\n  const bonuses = modifiers.filter((modifier) => modifier.type === \"set\" && modifier.subType === subType);\n\n  let effects = [];\n  // dwarfen \"Maximum of 20\"\n  if (bonuses.length > 0) {\n    bonuses.forEach((bonus) => {\n      logger.debug(`Generating ${subType} stat set for ${name}`);\n      const ability = DICTIONARY.character.abilities.find((ability) => ability.long === subType.split(\"-\")[0]).value;\n      effects.push(generateUpgradeChange(bonus.value, 3, `system.abilities.${ability}.value`));\n    });\n  }\n  return effects;\n}\n\n// requires midi\n// does not add advantages with restrictions - which is most of them\nfunction addAbilityAdvantageEffect(modifiers, name, subType, type) {\n  const bonuses = DDBHelper.filterModifiersOld(modifiers, \"advantage\", subType);\n\n  let effects = [];\n  if (!game.modules.get(\"midi-qol\")?.active) return effects;\n  if (bonuses.length > 0) {\n    logger.debug(`Generating ${subType} saving throw advantage for ${name}`);\n    const ability = DICTIONARY.character.abilities.find((ability) => ability.long === subType.split(\"-\")[0]).value;\n    effects.push(generateCustomChange(1, 4, `flags.midi-qol.advantage.ability.${type}.${ability}`));\n  }\n  return effects;\n}\n\nfunction addStatChanges(modifiers, name) {\n  let changes = [];\n  const stats = [\"strength\", \"dexterity\", \"constitution\", \"wisdom\", \"intelligence\", \"charisma\"];\n  stats.forEach((stat) => {\n    const ability = DICTIONARY.character.abilities.find((ab) => ab.long === stat);\n    const statEffect = addStatSetEffect(modifiers, name, `${stat}-score`);\n    const savingThrowAdvantage = addAbilityAdvantageEffect(modifiers, name, `${stat}-saving-throws`, \"save\");\n    const abilityCheckAdvantage = addAbilityAdvantageEffect(modifiers, name, `${stat}-ability-checks`, \"check\");\n    const abilityBonusesSave = addAddBonusEffect(modifiers, name, `${stat}-saving-throws`, `system.abilities.${ability.value}.bonuses.save`);\n    const abilityBonusesCheck = addAddBonusEffect(modifiers, name, `${stat}-ability-checks`, `system.abilities.${ability.value}.bonuses.check`);\n    changes = changes.concat(statEffect, savingThrowAdvantage, abilityCheckAdvantage, abilityBonusesSave, abilityBonusesCheck);\n  });\n\n  return changes;\n}\n\n// *\n// Senses\n//\nfunction addSenseBonus(modifiers, name) {\n  let changes = [];\n\n  const senses = [\"darkvision\", \"blindsight\", \"tremorsense\", \"truesight\"];\n\n  senses.forEach((sense) => {\n    const base = modifiers\n      .filter((modifier) => modifier.type === \"set-base\" && modifier.subType === sense)\n      .map((mod) => mod.value);\n    if (base.length > 0) {\n      logger.debug(`Generating ${sense} base for ${name}`);\n      changes.push(generateUpgradeChange(Math.max(base), 10, `system.attributes.senses.${sense}`));\n    }\n    const bonus = modifiers\n      .filter((modifier) => modifier.type === \"sense\" && modifier.subType === sense)\n      .reduce((a, b) => a + b.value, 0);\n    if (bonus > 0) {\n      logger.debug(`Generating ${sense} bonus for ${name}`);\n      changes.push(generateUnsignedAddChange(Math.max(bonus), 20, `system.attributes.senses.${sense}`));\n    }\n  });\n  return changes;\n}\n\n/**\n * Proficiency bonus\n */\n\nfunction addProficiencyBonus(modifiers, name) {\n  let changes = [];\n  const bonus = DDBHelper.filterModifiersOld(modifiers, \"bonus\", \"proficiency-bonus\").reduce((a, b) => a + b.value, 0);\n  if (bonus) {\n    logger.debug(`Generating proficiency bonus for ${name}`);\n    changes.push(generateUnsignedAddChange(bonus, 0, \"system.attributes.prof\"));\n  }\n  return changes;\n}\n\n// *\n// Generate set speeds\n//\nfunction addSetSpeedEffect(modifiers, name, subType) {\n  const bonuses = modifiers.filter((modifier) => modifier.type === \"set\" && modifier.subType === subType);\n\n  let effects = [];\n  // \"Equal to Walking Speed\"\n  if (bonuses.length > 0) {\n    bonuses.forEach((bonus) => {\n      logger.debug(`Generating ${subType} speed set for ${name}`);\n      const innate = subType.split(\"-\").slice(-1)[0];\n      const speedType = DICTIONARY.character.speeds.find((s) => s.innate === innate).type;\n      // current assumption if no speed provided, set to walking speed\n      const speed = bonus.value ? bonus.value : \"@attributes.movement.walk\";\n      effects.push(generateUpgradeChange(speed, 5, `system.attributes.movement.${speedType}`));\n    });\n  }\n  return effects;\n}\n\n/**\n * Innate Speeds\n */\nfunction addSetSpeeds(modifiers, name) {\n  let changes = [];\n  const speedSets = [\n    \"innate-speed-walking\",\n    \"innate-speed-climbing\",\n    \"innate-speed-swimming\",\n    \"innate-speed-flying\",\n    \"innate-speed-burrowing\",\n    \"speed-walking\",\n    \"speed-climbing\",\n    \"speed-swimming\",\n    \"speed-flying\",\n    \"speed-burrowing\",\n  ];\n  speedSets.forEach((speedSet) => {\n    const result = addSetSpeedEffect(modifiers, name, speedSet);\n    changes = changes.concat(result);\n  });\n\n  return changes;\n}\n\n// *\n// Generate speed bonus speeds\n//\nfunction addBonusSpeedEffect(modifiers, name, subType, speedType = null) {\n  const bonuses = modifiers.filter((modifier) => modifier.type === \"bonus\" && modifier.subType === subType);\n\n  let effects = [];\n  // \"Equal to Walking Speed\"\n  // max(10+(ceil(((@classes.monk.levels)-5)/4))*5,10)\n  if (bonuses.length > 0) {\n    logger.debug(`Generating ${subType} speed bonus for ${name}`);\n    if (!speedType) {\n      const innate = subType.split(\"-\").slice(-1)[0];\n      speedType = DICTIONARY.character.speeds.find((s) => s.innate === innate).type;\n    }\n    const bonusValue = bonuses.reduce((speed, mod) => speed + mod.value, 0);\n    if (speedType === \"all\") {\n      effects.push(generateUnsignedAddChange(`+ ${bonusValue}`, 9, `system.attributes.movement.${speedType}`));\n    } else {\n      effects.push(generateUnsignedAddChange(bonusValue, 9, `system.attributes.movement.${speedType}`));\n    }\n  }\n  return effects;\n}\n\n/**\n * Bonus Speeds\n */\nfunction addBonusSpeeds(modifiers, name) {\n  let changes = [];\n  const speedBonuses = [\"speed-walking\", \"speed-climbing\", \"speed-swimming\", \"speed-flying\", \"speed-burrowing\"];\n  speedBonuses.forEach((speed) => {\n    const result = addBonusSpeedEffect(modifiers, name, speed);\n    changes = changes.concat(result);\n  });\n\n  changes = changes.concat(addBonusSpeedEffect(modifiers, name, \"unarmored-movement\", \"walk\"));\n  changes = changes.concat(addBonusSpeedEffect(modifiers, name, \"speed\", \"walk\")); // probably all, but doesn't handle cases of where no base speed set, so say fly gets set to 10.\n\n  return changes;\n}\n\nfunction addSkillProficiencies(modifiers) {\n  let changes = [];\n  const ddbCharacter = new DDBCharacter();\n  DICTIONARY.character.skills.forEach((skill) => {\n    const prof = ddbCharacter.getSkillProficiency(skill, modifiers);\n    if (prof != 0) {\n      changes.push(generateUpgradeChange(prof, 9, `system.skills.${skill.name}.value`));\n    }\n  });\n  return changes;\n}\n\nfunction addProficiencies(modifiers, name) {\n  let changes = [];\n\n  const proficiencies = modifiers\n    .filter((mod) => mod.type === \"proficiency\")\n    .map((mod) => {\n      return { name: mod.friendlySubtypeName };\n    });\n\n  const ddbCharacter = new DDBCharacter();\n\n  changes = changes.concat(addSkillProficiencies(modifiers));\n  const toolProf = ddbCharacter.getToolProficiencies(proficiencies);\n  const weaponProf = ddbCharacter.getWeaponProficiencies(proficiencies);\n  const armorProf = ddbCharacter.getArmorProficiencies(proficiencies);\n\n  for (const [key, value] of Object.entries(toolProf)) {\n    logger.debug(`Generating tool proficiencies for ${name}`);\n    changes.push(generateCustomChange(value.value, 8, `system.tools.${key}.value`));\n    changes.push(generateCustomChange(`${value.ability}`, 8, `system.tools.${key}.ability`));\n    changes.push(generateCustomChange(\"0\", 8, `system.tools.${key}.bonuses.check`));\n  }\n  weaponProf.value.forEach((prof) => {\n    logger.debug(`Generating weapon proficiencies for ${name}`);\n    changes.push(generateUnsignedAddChange(prof, 8, \"system.traits.weaponProf.value\"));\n  });\n  armorProf.value.forEach((prof) => {\n    logger.debug(`Generating armor proficiencies for ${name}`);\n    changes.push(generateUnsignedAddChange(prof, 8, \"system.traits.armorProf.value\"));\n  });\n  // if (toolProf?.custom != \"\") changes.push(generateCustomChange(toolProf.custom, 8, \"system.traits.toolProf.custom\"));\n  if (weaponProf?.custom != \"\")\n    changes.push(generateUnsignedAddChange(weaponProf.custom, 8, \"system.traits.weaponProf.custom\"));\n  if (armorProf?.custom != \"\") changes.push(generateUnsignedAddChange(armorProf.custom, 8, \"system.traits.armorProf.custom\"));\n\n  return changes;\n}\n\n/**\n * Add HP effects\n * @param {*} modifiers\n * @param {*} name\n */\nfunction addHPEffect(ddb, modifiers, name, consumable) {\n  let changes = [];\n\n  // HP per level\n  DDBHelper.filterModifiersOld(modifiers, \"bonus\", \"hit-points-per-level\").forEach((bonus) => {\n    const cls = DDBHelper.findClassByFeatureId(ddb, bonus.componentId);\n    if (cls) {\n      logger.debug(`Generating HP Per Level effects for ${name} for class ${cls.definition.name}`);\n      changes.push(generateUnsignedAddChange(`${bonus.value} * @classes.${cls.definition.name.toLowerCase()}.levels`, 14, \"system.attributes.hp.bonuses.overall\"));\n    } else {\n      logger.debug(`Generating HP Per Level effects for ${name} for all levels`);\n      changes.push(generateUnsignedAddChange(bonus.value, 14, \"system.attributes.hp.bonuses.level\"));\n    }\n  });\n\n  const hpBonusModifiers = DDBHelper.filterModifiersOld(modifiers, \"bonus\", \"hit-points\");\n  if (hpBonusModifiers.length > 0 && !consumable) {\n    let hpBonus = \"\";\n    hpBonusModifiers.forEach((modifier) => {\n      let hpParse = DDBHelper.extractModifierValue(modifier);\n      if (hpBonus !== \"\") hpBonus += \" + \";\n      hpBonus += hpParse;\n    });\n    changes.push(generateUnsignedAddChange(`${hpBonus}`, 14, \"system.attributes.hp.bonuses.overall\"));\n  }\n\n  return changes;\n}\n\n//\n// Generate skill bonuses\n//\nfunction addSkillBonusEffect(modifiers, name, skill) {\n  const bonus = DDBHelper.getValueFromModifiers(modifiers, name, skill.subType, \"bonus\");\n\n  let changes = [];\n  if (bonus) {\n    logger.debug(`Generating ${skill.subType} skill bonus for ${name}`, bonus);\n    changes.push(generateUnsignedAddChange(bonus, 12, `system.skills.${skill.name}.bonuses.check`));\n  }\n  return changes;\n}\n\n//\n// generate skill advantages\n// requires midi\n//\nfunction addSkillMidiEffect(modifiers, name, skill, midiEffect = \"advantage\") {\n  if (!game.modules.get(\"midi-qol\")?.active) return [];\n  const allowedRestrictions = [\n    \"\",\n    null,\n    \"Sound Only\",\n    \"Sight Only\",\n    \"that rely on smell\",\n    \"While the hood is up, checks made to Hide \",\n  ];\n  const advantage = DDBHelper.filterModifiersOld(modifiers, midiEffect, skill.subType, allowedRestrictions);\n\n  let effects = [];\n  if (advantage.length > 0) {\n    logger.debug(`Generating ${skill.subType} skill ${midiEffect} for ${name}`);\n    effects.push(generateCustomChange(1, 5, `flags.midi-qol.${midiEffect}.skill.${skill.name}`));\n    // handled by midi already\n    // advantage/disadvantage on skill grants +/-5 passive bonus, https://www.dndbeyond.com/sources/phb/using-ability-scores#PassiveChecks\n    // if (midiEffect === \"advantage\") {\n    //   effects.push(generateAddChange(5, 5, `system.skills.${skill.name}.bonuses.passive`));\n    // } else if (midiEffect === \"disadvantage\") {\n    //   effects.push(generateAddChange(-5, 5, `system.skills.${skill.name}.bonuses.passive`));\n    // }\n  }\n  return effects;\n}\n\nfunction addSkillPassiveBonusEffect(modifiers, name, skill) {\n  const bonus = DDBHelper.getValueFromModifiers(modifiers, name, `passive-${skill.subType}`, \"bonus\");\n\n  let changes = [];\n  if (bonus) {\n    logger.debug(`Generating ${skill.subType} skill bonus for ${name}`, bonus);\n    changes.push(generateUnsignedAddChange(bonus, 12, `system.skills.${skill.name}.bonuses.passive`));\n  }\n  return changes;\n}\n\nfunction addSkillBonuses(modifiers, name) {\n  let changes = [];\n  DICTIONARY.character.skills.forEach((skill) => {\n    const newMods = modifiers.filter((mod) => {\n      if (mod.subType === `passive-${skill.subType}`) {\n        const passiveMods = DDBHelper.filterModifiersOld(modifiers, \"bonus\", `passive-${skill.subType}`);\n        const advantageMods = DDBHelper.filterModifiersOld(modifiers, \"advantage\", skill.subType);\n        if (passiveMods.length > 0 && advantageMods.length > 0) return false;\n        else return true;\n      } else {\n        return true;\n      }\n    });\n    const skillBonuses = addSkillBonusEffect(newMods, name, skill);\n    const skillPassiveBonuses = addSkillPassiveBonusEffect(newMods, name, skill);\n    const skillAdvantages = addSkillMidiEffect(newMods, name, skill, \"advantage\");\n    changes = changes.concat(skillBonuses, skillPassiveBonuses, skillAdvantages);\n  });\n\n\n  return changes;\n}\n\n// Attunement Slot Bonus\n\nfunction addAttunementSlots(modifiers, name) {\n  let changes = [];\n  const bonus = DDBHelper.getValueFromModifiers(modifiers, name, \"attunement-slots\", \"set\");\n\n  if (bonus) {\n    logger.debug(`Generating Attunement bonus for ${name}`, bonus);\n    changes.push(generateUpgradeChange(bonus, (10 + bonus), \"system.attributes.attunement.max\"));\n  }\n  return changes;\n}\n\n\n//\n// initiative\n//\nfunction addInitiativeBonuses(modifiers, name) {\n  let changes = [];\n  const advantage = DDBHelper.filterModifiersOld(modifiers, \"advantage\", \"initiative\");\n  if (advantage.length > 0) {\n    logger.debug(`Generating Initiative advantage for ${name}`);\n    changes.push(generateUnsignedAddChange(1, 20, \"flags.dnd5e.initiativeAdv\"));\n  }\n\n  const advantageBonus = DDBHelper.getValueFromModifiers(modifiers, \"initiative\", \"initiative\", \"bonus\");\n  // alert feet gets special bonus\n  if (advantageBonus && name !== \"Alert\") {\n    logger.debug(`Generating Initiative bonus for ${name}`);\n    changes.push(generateUnsignedAddChange(advantageBonus, 20, \"system.attributes.init.bonus\"));\n  }\n\n  return changes;\n}\n\n//\n// attack rolls against you\n// midi only\n//\nfunction addAttackRollDisadvantage(modifiers, name) {\n  if (!game.modules.get(\"midi-qol\")?.active) return [];\n  let changes = [];\n  const disadvantage = DDBHelper.filterModifiersOld(modifiers, \"disadvantage\", \"attack-rolls-against-you\", false);\n  if (disadvantage.length > 0) {\n    logger.debug(`Generating disadvantage for ${name}`);\n    changes.push(generateCustomChange(1, 5, \"flags.midi-qol.grants.disadvantage.attack.all\"));\n  }\n  return changes;\n}\n\n// midi advantages on saving throws against spells and magical effects\nfunction addMagicalAdvantage(modifiers, name) {\n  if (!game.modules.get(\"midi-qol\")?.active) return [];\n  let changes = [];\n  const restrictions = [\n    \"against spells and magical effects\",\n    \"Against Spells and Magical Effects\",\n    \"Against Spells\",\n    \"against spells\",\n    \"Against spells\",\n    \"Against spells and magical effects within 10 ft. (or 30 ft. at level 17+) while holding the Holy Avenger\",\n  ];\n  const advantage = DDBHelper.filterModifiersOld(modifiers, \"advantage\", \"saving-throws\", restrictions);\n  if (advantage.length > 0) {\n    logger.debug(`Generating magical advantage on saving throws for ${name}`);\n    changes.push(generateCustomChange(\"1\", 5, \"flags.midi-qol.magicResistance.all\"));\n    // changes.push(generateCustomChange(\"magic-resistant\", 5, \"system.traits.dr.custom\"));\n  }\n  return changes;\n}\n\nfunction consumableEffect(effect, ddbItem, foundryItem) {\n  let label = `${foundryItem.name} - Consumable Effects`;\n  effect.name = label;\n  effect.disabled = false;\n  effect.transfer = false;\n  foundry.utils.setProperty(effect, \"flags.ddbimporter.disabled\", false);\n  foundry.utils.setProperty(effect, \"flags.dae.transfer\", false);\n  effect.duration = generateEffectDuration(foundryItem);\n  if (!foundryItem.system.target?.value) {\n    foundryItem.system.target = {\n      value: 1,\n      width: null,\n      units: \"\",\n      type: \"creature\",\n    };\n  }\n  if (!foundryItem.system.range?.units) {\n    foundryItem.system.range = {\n      value: null,\n      long: null,\n      units: \"touch\",\n    };\n  }\n  if (foundryItem.system.uses) {\n    foundryItem.system.uses.autoDestroy = true;\n    foundryItem.system.uses.autoUse = true;\n  }\n\n  return effect;\n}\n\n/**\n * This checks attunement status and similar to determine effect state\n * set disabled flags etc\n * @param {*} foundryItem\n * @param {*} effect\n * @param {*} ddbItem\n * @param {*} isCompendiumItem\n */\nfunction addEffectFlags(foundryItem, effect, ddbItem, isCompendiumItem) {\n  // check attunement status etc\n\n  if (\n    !ddbItem.definition?.canEquip\n    && !ddbItem.definition?.canAttune\n    && !ddbItem.definition?.isConsumable\n    && DICTIONARY.types.inventory.includes(foundryItem.type)\n  ) {\n    // if item just gives a thing and not potion/scroll\n    effect.disabled = false;\n    foundry.utils.setProperty(effect, \"flags.ddbimporter.disabled\", false);\n    foundry.utils.setProperty(foundryItem, \"flags.dae.alwaysActive\", true);\n  } else if (\n    isCompendiumItem\n    || foundryItem.type === \"feat\"\n    || (ddbItem.isAttuned && ddbItem.equipped) // if it is attuned and equipped\n    || (ddbItem.isAttuned && !ddbItem.definition?.canEquip) // if it is attuned but can't equip\n    || (!ddbItem.definition?.canAttune && ddbItem.equipped) // can't attune but is equipped\n  ) {\n    foundry.utils.setProperty(foundryItem, \"flags.dae.alwaysActive\", false);\n    foundry.utils.setProperty(effect, \"flags.ddbimporter.disabled\", false);\n    effect.disabled = false;\n  } else {\n    effect.disabled = true;\n    foundry.utils.setProperty(effect, \"flags.ddbimporter.disabled\", true);\n    foundry.utils.setProperty(foundryItem, \"flags.dae.alwaysActive\", false);\n  }\n\n  foundry.utils.setProperty(effect, \"flags.ddbimporter.itemId\", ddbItem.id);\n  foundry.utils.setProperty(effect, \"flags.ddbimporter.itemEntityTypeId\", ddbItem.entityTypeId);\n  // set dae flag for active equipped\n  if (ddbItem.definition?.canEquip || ddbItem.definitio?.canAttune) {\n    foundry.utils.setProperty(foundryItem, \"flags.dae.activeEquipped\", true);\n  } else {\n    foundry.utils.setProperty(foundryItem, \"flags.dae.activeEquipped\", false);\n  }\n\n  if (ddbItem.definition?.filterType === \"Potion\") {\n    effect = consumableEffect(effect, ddbItem, foundryItem);\n  }\n\n  return [foundryItem, effect];\n}\n\n/**\n * Generate supported effects for items\n * @param {*} ddb\n * @param {*} character\n * @param {*} ddbItem\n * @param {*} foundryItem\n */\n// eslint-disable-next-line no-unused-vars\nfunction generateGenericEffects({ ddb, character, ddbItem, foundryItem, isCompendiumItem, labelOverride, description = \"\" } = {}) {\n  if (!foundryItem.effects) foundryItem.effects = [];\n\n  const label = labelOverride\n    ? labelOverride\n    : `${foundryItem.name} - Passive`;\n\n  let effect = baseItemEffect(foundryItem, label);\n  effect.description = description;\n\n  if (!ddbItem.definition?.grantedModifiers || ddbItem.definition.grantedModifiers.length === 0) return [foundryItem, effect];\n  logger.debug(`Generating Generic Effects for ${foundryItem.name}`, ddbItem);\n\n  const globalSaveBonus = addGlobalSavingBonusEffect(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const globalAbilityBonus = addAddBonusEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"ability-checks\",\n    \"system.bonuses.abilities.check\",\n  );\n  const globalSkillBonus = addAddBonusEffect(\n    ddbItem.definition.grantedModifiers,\n    foundryItem.name,\n    \"skill-checks\",\n    \"system.bonuses.abilities.skill\",\n  );\n  const languages = addLanguages(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const conditions = addDamageConditions(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const criticalHitImmunity = addCriticalHitImmunities(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const statSets = addStatChanges(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const statBonuses = addStatBonuses(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const senses = addSenseBonus(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const proficiencyBonus = addProficiencyBonus(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const speedSets = addSetSpeeds(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const spellAttackBonuses = addSpellAttackBonuses(ddbItem.definition.grantedModifiers, foundryItem.name);\n\n  const profs = addProficiencies(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const hp = addHPEffect(ddb, ddbItem.definition.grantedModifiers, foundryItem.name, ddbItem.definition.isConsumable);\n  const skillBonus = addSkillBonuses(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const initiative = addInitiativeBonuses(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const disadvantageAgainst = addAttackRollDisadvantage(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const magicalAdvantage = addMagicalAdvantage(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const bonusSpeeds = addBonusSpeeds(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const weaponAttackBonuses = addWeaponAttackBonuses(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const globalDamageBonus = addGlobalDamageBonus(ddbItem.definition.grantedModifiers, foundryItem.name);\n  const attunementAdjustment = addAttunementSlots(ddbItem.definition.grantedModifiers, foundryItem.name);\n\n  effect.changes = [\n    ...criticalHitImmunity,\n    ...globalSaveBonus,\n    ...globalAbilityBonus,\n    ...globalSkillBonus,\n    ...languages,\n    ...conditions,\n    ...statSets,\n    ...statBonuses,\n    ...senses,\n    ...proficiencyBonus,\n    ...speedSets,\n    ...spellAttackBonuses,\n    ...profs,\n    ...hp,\n    ...skillBonus,\n    ...initiative,\n    ...disadvantageAgainst,\n    ...magicalAdvantage,\n    ...bonusSpeeds,\n    ...weaponAttackBonuses,\n    ...globalDamageBonus,\n    ...attunementAdjustment,\n  ];\n\n  // if we don't have effects, lets return the item\n  if (effect.changes?.length === 0) {\n    return [foundryItem, effect];\n  }\n\n  // generate flags for effect (e.g. checking attunement and equipped status)\n  [foundryItem, effect] = addEffectFlags(foundryItem, effect, ddbItem, isCompendiumItem);\n\n  return [foundryItem, effect];\n}\n\nfunction addACEffect(ddb, character, ddbItem, foundryItem, isCompendiumItem, effect, type) {\n  // console.warn(\"addACEffect\", {\n  //   ddb,\n  //   character,\n  //   ddbItem: foundry.utils.deepClone(ddbItem),\n  //   foundryItem: foundry.utils.deepClone(foundryItem),\n  //   isCompendiumItem,\n  //   effect: foundry.utils.deepClone(effect),\n  //   equipment: foundryItem.type === \"equipment\",\n  //   transfer: effect.transfer,\n  //   ac: (foundryItem.system.armor?.type && [\"trinket\", \"clothing\"].includes(foundryItem.system.armor.type)),\n  // });\n  switch (type) {\n    case \"infusion\":\n    case \"equipment\":\n    case \"item\":\n    case \"feature\":\n    case \"feat\": {\n      if (foundryItem.type === \"equipment\") {\n        if (type === \"infusion\"\n          || (foundryItem.system.type?.value\n            && [\"trinket\", \"clothing\"].includes(foundryItem.system.type.value))\n        ) {\n          foundryItem = generateBaseACItemEffect(ddb, character, ddbItem, foundryItem, isCompendiumItem);\n        }\n      } else if (effect.transfer || type === \"infusion\") {\n        [foundryItem, effect] = generateACEffectChangesForItem(ddb, character, ddbItem, foundryItem, isCompendiumItem, effect);\n      } else {\n        foundryItem = generateBaseACItemEffect(ddb, character, ddbItem, foundryItem, isCompendiumItem);\n      }\n      break;\n    }\n    // no default\n  }\n\n  return [foundryItem, effect];\n}\n\nexport function generateEffects({ ddb, character, ddbItem, foundryItem, isCompendiumItem, type, description = \"\" } = {}) {\n  logger.debug(`Checking ${foundryItem.name} for auto generated effects`, ddbItem);\n  // set flags if using effects\n  foundryItem = applyDefaultMidiFlags(foundryItem);\n  let label;\n\n  if (type === \"item\" && foundry.utils.hasProperty(ddbItem, \"definition.grantedModifiers\")) {\n    ddbItem.definition.grantedModifiers = ddbItem.definition.grantedModifiers.filter((modifier) =>\n      modifier.type !== \"damage\" && modifier.subType !== null\n    );\n  }\n\n  const labelAdjustment = foundry.utils.getProperty(foundryItem, \"flags.ddbimporter.effectLabelOverride\");\n  if (labelAdjustment) {\n    label = labelAdjustment;\n  } else if (type == \"infusion\") {\n    label = `${foundryItem.name} - Infusion`;\n  }\n  let effect;\n  [foundryItem, effect] = generateGenericEffects({\n    ddb,\n    character,\n    ddbItem,\n    foundryItem,\n    isCompendiumItem,\n    labelOverride: label,\n    description,\n  });\n  [foundryItem, effect] = addACEffect(ddb, character, ddbItem, foundryItem, isCompendiumItem, effect, type);\n\n  if (effect.changes?.length > 0) {\n    foundryItem.effects.push(effect);\n  }\n\n  switch (type) {\n    case \"infusion\": {\n      foundryItem = infusionEffectAdjustment(foundryItem);\n      break;\n    }\n    case \"equipment\":\n    case \"item\": {\n      foundryItem = equipmentEffectAdjustment(foundryItem);\n      break;\n    }\n    // spells and feats get called from respective parsers for async loading\n    // no default\n  }\n\n  if (foundryItem.effects?.length > 0 || foundry.utils.hasProperty(document, \"flags.dae\") || foundry.utils.hasProperty(document, \"flags.midi-qol.onUseMacroName\")) {\n    logger.debug(`${type} effect ${foundryItem.name}:`, foundry.utils.duplicate(foundryItem));\n    foundry.utils.setProperty(foundryItem, \"flags.ddbimporter.effectsApplied\", true);\n  }\n  return foundryItem;\n\n}\n","/* eslint-disable no-continue */\n/* eslint-disable require-atomic-updates */\n// import DICTIONARY from \"../dictionary.js\";\n// import SETTINGS from \"../settings.js\";\n\nimport DICTIONARY from \"../../dictionary.js\";\nimport CompendiumHelper from \"../../lib/CompendiumHelper.js\";\nimport FolderHelper from \"../../lib/FolderHelper.js\";\nimport utils from \"../../lib/utils.js\";\nimport logger from \"../../logger.js\";\nimport SETTINGS from \"../../settings.js\";\n\nexport default class ChrisPremadesHelper {\n\n  static DDB_FLAGS_TO_REMOVE = [\n    \"midi-qol\",\n    \"midiProperties\",\n    \"ActiveAuras\",\n    \"dae\",\n    \"itemacro\",\n  ];\n\n  static CP_FLAGS_TO_REMOVE = [\n    \"cf\",\n    \"ddbimporter\",\n    \"monsterMunch\",\n    \"core\",\n    \"link-item-resource-5e\",\n  ];\n\n  static CP_FIELDS_TO_COPY = [\n    \"effects\",\n    \"system.damage\",\n    \"system.target\",\n    \"system.range\",\n    \"system.duration\",\n    \"system.save\",\n    \"system.activation\",\n    \"system.ability\",\n    \"system.critical\",\n    \"system.formula\",\n    \"system.actionType\",\n    \"system.scaling\",\n  ];\n\n  static CP_COMPENDIUM_TYPES = [\n    { type: \"spell\", system: \"spell\" },\n    { type: \"feat\", system: \"feature\" },\n    { type: \"feat\", system: \"trait\" },\n    { type: \"feat\", system: \"feat\" },\n    { type: \"equipment\", system: \"inventory\" },\n    { type: \"weapon\", system: \"weapon\" },\n    { type: \"consumable\", system: \"consumable\" },\n    { type: \"tool\", system: \"tool\" },\n    { type: \"loot\", system: \"loot\" },\n    // { type: \"container\", system: \"container\" },\n    { type: \"equipment\", system: \"container\" },\n    { type: \"equipment\", system: \"backback\" },\n    { type: \"equipment\", system: \"equipment\" },\n  ];\n\n  static async getChrisCompendiumIndex(compendiumName, matchedProperties = {}) {\n    const gamePack = CompendiumHelper.getCompendium(compendiumName);\n    const index = await gamePack.getIndex({\n      fields: [\"name\", \"type\", \"flags.cf\", \"folder\"].concat(Object.keys(matchedProperties))\n    });\n    return index;\n  }\n\n  static async getChrisCompendiums(type, isMonster = false, matchedProperties = {}) {\n    if (chrisPremades.helpers.getSearchCompendiums) {\n      const baseType = ChrisPremadesHelper.CP_COMPENDIUM_TYPES.find((t) => t.system === type)?.type ?? type;\n      const compendiums = (\n        isMonster\n          ? (chrisPremades.helpers.getMonsterFeatureSearchCompendiums\n            ? chrisPremades.helpers.getMonsterFeatureSearchCompendiums()\n            : ['chris-premades.CPR Monster Features'])\n          : []\n      ).concat(await chrisPremades.helpers.getSearchCompendiums(baseType));\n      const results = (await Promise.all(compendiums\n        .filter((c) => game.packs.get(c))\n        .map(async (c) => {\n          const index = await ChrisPremadesHelper.getChrisCompendiumIndex(c, matchedProperties);\n          // console.warn(`Matched`, {\n          //   type, baseType, compendiums, index, c\n          // });\n          const result = {\n            index: index.filter((i) => i.type === baseType),\n            packName: c,\n            compendium: game.packs.get(c),\n          };\n          return result;\n        }))).filter((r) => r.index.length > 0);\n      // console.warn(\"Results\", results);\n      return results;\n    } else {\n      return [];\n    }\n  }\n\n  static getOriginalName(document, trimOption = false) {\n    const flagName = document.flags.ddbimporter?.originalName ?? document.name;\n\n    const regex = /(.*)\\s*\\((:?costs \\d actions|\\d\\/Turn|Recharges after a Short or Long Rest|\\d\\/day|recharge \\d-\\d)\\)/i;\n    const nameMatch = flagName.replace(/[–-–−]/g, \"-\").match(regex);\n    const longName = nameMatch ? nameMatch[1].trim() : flagName;\n    if (!trimOption) return longName;\n\n    return longName.split(\":\")[0].trim();\n\n  }\n\n  static getTypeMatch(doc, isMonster = false) {\n    if (DICTIONARY.types.inventory.includes(doc.type)) {\n      return \"inventory\";\n    }\n    if (doc.type !== \"feat\") return doc.type;\n\n    // feats cover a variety of sins, lets try and narrow it down\n    if (isMonster) return \"monsterfeature\";\n\n    // lets see if we have marked this as a class or race type\n    const systemTypeValue = foundry.utils.getProperty(doc, \"system.type.value\");\n    if (systemTypeValue && systemTypeValue !== \"\") {\n      if (systemTypeValue === \"class\") return \"feature\";\n      if (systemTypeValue === \"race\") return \"trait\";\n      return systemTypeValue;\n    }\n\n    // can we derive the type from the ddb importer type flag?\n    const ddbType = foundry.utils.getProperty(doc, \"flags.ddbimporter.type\");\n    if (ddbType && ![\"\", \"other\"].includes(ddbType)) {\n      if (ddbType === \"class\") return \"feature\";\n      if (ddbType === \"race\") return \"trait\";\n      return ddbType;\n    }\n\n    if (doc.type === \"feat\") {\n      return \"feature\";\n    }\n\n    return doc.type;\n  }\n\n  // matchedProperties = { \"system.activation.type\": \"bonus\" }\n  static async getDocumentFromCompendium(key, name, ignoreNotFound, folderId, matchedProperties = {}) {\n    const gamePack = game.packs.get(key);\n    if (!gamePack) {\n      ui.notifications.warn('Invalid compendium specified!');\n      return false;\n    }\n\n    const packIndex = await gamePack.getIndex({\n      fields: ['name', 'type', 'folder'].concat(Object.keys(matchedProperties))\n    });\n\n    const match = packIndex.find((item) =>\n      item.name === name\n      && (!folderId || (folderId && item.folder === folderId))\n      && (Object.keys(matchedProperties).length === 0 || utils.matchProperties(item, matchedProperties))\n    );\n\n    logger.debug(`Looking for ${name} in ${key} with properties`, {\n      key,\n      name, ignoreNotFound,\n      folderId,\n      matchedProperties,\n      match,\n      packIndex,\n    });\n\n    if (match) {\n      return (await gamePack.getDocument(match._id))?.toObject();\n    } else {\n      if (!ignoreNotFound) {\n        ui.notifications.warn(`Item not found in compendium ${key} with name ${name}! Check spelling?`);\n        logger.warn(`Item not found in compendium ${key} with name ${name}! Check spelling?`, { key, name, folderId, matchedProperties });\n      }\n      return undefined;\n    }\n  }\n\n  static async getDocumentFromName(documentName, type,\n    { folderName = null, isMonster = false, matchedProperties = {} } = {}\n  ) {\n\n    const compendiums = await ChrisPremadesHelper.getChrisCompendiums(type, isMonster);\n    if (compendiums.length === 0) {\n      logger.warn(`No compendium found for Chris's Premade effect for ${type} and ${documentName}, with type ${type}!`);\n      return undefined;\n    }\n\n    // console.warn(\"here\", { this: this });\n\n    // const allowFolders = [\"weapon\", \"feat\"].includes(this.original.type);\n\n    for (const c of compendiums) {\n      const folderId = isMonster // && allowFolders\n        ? await FolderHelper.getCompendiumFolderId((folderName ?? documentName), c.packName)\n        : undefined;\n\n      // expected to find feature in a folder, but we could not\n      // if (allowFolders && folderName && folderId === undefined) {\n      if (folderName && folderId === undefined) {\n        logger.debug(`No folder found for ${folderName} and ${documentName}, checking compendium name ${c.packName}`);\n        continue;\n      }\n\n      logger.debug(`CP Effect (From Name): Attempting to fetch ${documentName} from ${c.packName} with folderID ${folderId}`);\n      // const chrisDoc = await ChrisPremadesHelper.getDocumentFromCompendium(c.packName, documentName, true, folderId, matchedProperties);\n      const match = c.index.find((doc) =>\n        doc.name === documentName\n        && (!folderId || (folderId && doc.folder === folderId))\n        && (Object.keys(matchedProperties).length === 0 || utils.matchProperties(doc, matchedProperties))\n      );\n\n      if (!match) continue;\n      return match;\n    }\n\n    logger.debug(`No CP Effect found for ${documentName} from all matched compendiums with folderName ${folderName}`);\n    return undefined;\n  }\n\n\n  constructor(document,\n    { chrisNameOverride = null, isMonster = false, folderName = null, ignoreNotFound = true, type = null,\n      matchedProperties = {} } = {}\n  ) {\n    this.original = foundry.utils.deepClone(document);\n    this.document = document;\n    this.chrisNameOverride = chrisNameOverride;\n    this.isMonster = isMonster;\n    this.folderName = folderName;\n    this.ignoreNotFound = ignoreNotFound;\n    this.type = type ?? ChrisPremadesHelper.getTypeMatch(document, isMonster);\n    this.matchProperties = matchedProperties;\n    this.ddbName = ChrisPremadesHelper.getOriginalName(document);\n    this.chrisName = chrisNameOverride ?? CONFIG.chrisPremades?.renamedItems[this.ddbName] ?? this.ddbName;\n    this.chrisDoc = null;\n    this.appendChrisDescription = game.settings.get(SETTINGS.MODULE_ID, \"append-chris-premade-effect-description\");\n  }\n\n  async findReplacement() {\n    const compendiums = await ChrisPremadesHelper.getChrisCompendiums(this.original.type, this.isMonster);\n    logger.debug(\"Compendiums found\", {\n      compendiums,\n      this: this,\n      type: this.original.type,\n      isMonster: this.isMonster,\n    });\n    if (compendiums.length === 0) {\n      logger.warn(`No compendium found for Chris's Premade effect for \"${this.original.name}\" with original type ${this.original.type} and with type object type ${this.type}!`, {\n        this: this,\n      });\n      return undefined;\n    }\n\n    const allowFolders = [\"weapon\", \"feat\"].includes(this.original.type) && this.isMonster;\n\n    for (const c of compendiums) {\n      const folderId = allowFolders\n        ? await FolderHelper.getCompendiumFolderId((this.folderName ?? this.chrisName), c.packName)\n        : undefined;\n\n      // expected to find feature in a folder, but we could not\n      if (allowFolders && folderId === undefined) {\n        logger.debug(`Needed folder, but none found for ${this.folderName} and ${this.original.name}, using compendium name ${c.packName}`);\n        continue;\n      }\n\n      logger.debug(`CP Effect (find replacement): Attempting to fetch ${this.original.name} from ${c.packName} with folderID ${folderId}`);\n      const chrisDoc = await ChrisPremadesHelper.getDocumentFromCompendium(c.packName, this.chrisName, this.ignoreNotFound, folderId, this.matchedProperties);\n      if (!chrisDoc) continue;\n      const chrisType = ChrisPremadesHelper.getTypeMatch(chrisDoc, this.isMonster);\n\n      logger.debug(\"Found\", {\n        thisType: this.type,\n        chrisType,\n        chrisDoc,\n        truthy: this.type === chrisType,\n      });\n      if (this.type === chrisType || folderId) {\n        this.chrisDoc = chrisDoc;\n        return chrisDoc;\n      }\n      logger.debug(`Skipping CP Effect found for ${this.original.name} from ${c.packName} with folderName ${this.folderName} as type mismatch`);\n    }\n\n    logger.debug(`No CP Effect found for ${this.original.name} from all matched compendiums with folderName ${this.folderName}`);\n    return undefined;\n  }\n\n  static appendDescription(source, target) {\n    const description = foundry.utils.getProperty(source, \"system.description\");\n    if (!description || description.value.trim() === \"\") return target;\n\n    const text = description.value;\n    if (text && text.trim() !== \"\") {\n      target.system.description.value += `\n<br>\n<section class=\"secret\">\n<hr>\n<h5>Automation notes - Chris's Premades (CPR):</h5>\n${text}\n</section>`;\n    }\n    const chat = description.chat;\n    if (chat && chat.trim() !== \"\") {\n      target.system.description.chat += `\n<br>\n<section class=\"secret\">\n<hr>\n<h5>Automation notes - Chris's Premades (CPR):</h5>\n${chat}\n</section>`;\n    }\n\n    return target;\n  }\n\n  static copyDescription(source, target, { appendSourceDescription = false, prependSourceDescription = false } = {}) {\n    const sourceDescription = foundry.utils.getProperty(source, \"system.description\");\n    if (!sourceDescription || sourceDescription.value.trim() === \"\") return target;\n\n    if (appendSourceDescription) {\n      ChrisPremadesHelper.appendDescription(source, target);\n    } else if (prependSourceDescription) {\n      const mockSource = foundry.utils.deepClone(target);\n      const mockDescription = foundry.utils.getProperty(source, \"flags.ddbimporter.initialFeature\")\n        ?? foundry.utils.getProperty(source, \"system.description\");\n\n      mockSource.system.description = foundry.utils.deepClone(foundry.utils.getProperty(target, \"system.description\"));\n      target.system.description = foundry.utils.deepClone(mockDescription);\n      ChrisPremadesHelper.appendDescription(mockSource, target);\n    } else {\n      target.system.description = foundry.utils.deepClone(sourceDescription);\n    }\n\n    return target;\n  }\n\n  updateOriginalDocument() {\n    ChrisPremadesHelper.DDB_FLAGS_TO_REMOVE.forEach((flagName) => {\n      delete this.document.flags[flagName];\n    });\n\n    this.document.effects = [];\n\n    ChrisPremadesHelper.CP_FLAGS_TO_REMOVE.forEach((flagName) => {\n      delete this.chrisDoc.flags[flagName];\n    });\n\n    this.document.flags = foundry.utils.mergeObject(this.document.flags, this.chrisDoc.flags);\n\n    ChrisPremadesHelper.CP_FIELDS_TO_COPY.forEach((field) => {\n      const values = foundry.utils.getProperty(this.chrisDoc, field);\n      if (field === \"effects\") {\n        values.forEach((effect) => {\n          effect._id = foundry.utils.randomID();\n        });\n      }\n      foundry.utils.setProperty(this.document, field, values);\n    });\n\n    if (this.appendChrisDescription) {\n      ChrisPremadesHelper.appendDescription(this.chrisDoc, this.document);\n    }\n\n    foundry.utils.setProperty(this.document, \"flags.ddbimporter.effectsApplied\", true);\n    foundry.utils.setProperty(this.document, \"flags.ddbimporter.chrisEffectsApplied\", true);\n    foundry.utils.setProperty(this.document, \"flags.ddbimporter.chrisPreEffectName\", this.ddbName);\n\n    const correctionProperties = foundry.utils.getProperty(CONFIG, `chrisPremades.correctedItems.${this.chrisName}`);\n    if (correctionProperties) {\n      logger.debug(`Updating ${this.original.name} with a Chris correction properties`);\n      this.document = foundry.utils.mergeObject(this.document, correctionProperties);\n    }\n\n    logger.debug(`Updated ${this.original.name} with a Chris effect`);\n    delete this.document.folder;\n\n  }\n\n  static async find({ document, type, isMonster = false, folderName = null, chrisNameOverride = null } = {}) {\n    if (!game.modules.get(\"chris-premades\")?.active) return document;\n    if (foundry.utils.getProperty(document, \"flags.ddbimporter.ignoreItemForChrisPremades\") === true) {\n      logger.info(`${document.name} set to ignore Chris's Premade effect application`);\n      return document;\n    }\n\n    const chrisHelper = new ChrisPremadesHelper(document, { type, chrisNameOverride, folderName, ignoreNotFound: true, isMonster });\n    const chrisDoc = await chrisHelper.findReplacement();\n    if (!chrisDoc) {\n      return document;\n    }\n\n    return chrisDoc.document;\n  }\n\n  static async findAndUpdate({ document, type, isMonster = false, folderName = null, chrisNameOverride = null } = {}) {\n    if (!game.modules.get(\"chris-premades\")?.active) return document;\n    if (foundry.utils.getProperty(document, \"flags.ddbimporter.ignoreItemForChrisPremades\") === true) {\n      logger.info(`${document.name} set to ignore Chris's Premade effect application`);\n      return document;\n    }\n\n    const chrisHelper = new ChrisPremadesHelper(document, { type, chrisNameOverride, folderName, ignoreNotFound: true, isMonster });\n    const chrisDoc = await chrisHelper.findReplacement();\n    if (!chrisDoc) {\n      return document;\n    }\n\n    chrisHelper.updateOriginalDocument();\n\n    return chrisHelper.document;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  static async addAndReplaceRedundantChrisDocuments(actor, _folderName = null) {\n    if (!game.modules.get(\"chris-premades\")?.active) return;\n    logger.debug(\"Beginning additions and removals of extra effects.\");\n    const documents = actor.getEmbeddedCollection(\"Item\").toObject();\n    const toAdd = [];\n    const toDelete = new Set();\n    const choiceRemovals = foundry.utils.getProperty(CONFIG, \"chrisPremades.removeChoices\") ?? [];\n    const choiceAdditions = new Set();\n\n    for (let doc of documents) {\n      if ([\"class\", \"subclass\", \"background\"].includes(doc.type)) continue;\n\n      const ddbName = ChrisPremadesHelper.getOriginalName(doc);\n      const chrisName = CONFIG.chrisPremades?.renamedItems[ddbName] ?? ddbName;\n      const noChoiceName = ddbName.split(\":\")[0].trim();\n      const newItemNames = new Set(foundry.utils.getProperty(CONFIG, `chrisPremades.additionalItems.${chrisName}`) ?? []);\n\n      if (ddbName !== noChoiceName) {\n        const noChoiceNewNames = foundry.utils.getProperty(CONFIG, `chrisPremades.additionalItems.${noChoiceName}`);\n        if (noChoiceNewNames && !choiceAdditions.has(noChoiceName)) {\n          noChoiceNewNames.forEach((i) => newItemNames.add(i));\n          choiceAdditions.add(noChoiceName);\n        }\n      }\n\n      if (newItemNames.size > 0) {\n        logger.debug(`Adding new items for ${chrisName}`);\n\n        for (const newItemName of newItemNames) {\n          logger.debug(`Adding new item ${newItemName}`);\n          const chrisDoc = await ChrisPremadesHelper.getDocumentFromName(newItemName, doc.type);\n          if (!chrisDoc) {\n            logger.error(`DDB Importer expected to find an item in Chris's Premades for ${newItemName} but did not`, {\n              ddbName,\n              doc,\n              chrisName,\n              newItemNames,\n              documents,\n              chrisDoc,\n            });\n          } else if (!documents.some((d) => d.name === chrisDoc.name)) {\n            ChrisPremadesHelper.copyDescription(doc, chrisDoc, { prependSourceDescription: this.appendDescription });\n            foundry.utils.setProperty(chrisDoc, \"flags.ddbimporter.ignoreItemUpdate\", true);\n            toAdd.push(chrisDoc);\n          }\n        }\n      }\n\n      const itemsToRemoveNames = new Set(foundry.utils.getProperty(CONFIG, `chrisPremades.removedItems.${chrisName}`) ?? []);\n      if (choiceRemovals.includes(noChoiceName)) {\n        itemsToRemoveNames.add(ddbName);\n      }\n      if (itemsToRemoveNames.size > 0) {\n        logger.debug(`Removing items for ${chrisName}`);\n        for (const removeItemName of itemsToRemoveNames) {\n          logger.debug(`Removing item ${removeItemName}`);\n          const deleteDoc = documents.find((d) => ChrisPremadesHelper.getOriginalName(d) === removeItemName);\n          if (deleteDoc) toDelete.add(deleteDoc._id);\n        }\n      }\n    }\n\n    logger.debug(\"Final Chris's Premades list\", {\n      toDelete,\n      toAdd,\n    });\n    await actor.deleteEmbeddedDocuments(\"Item\", Array.from(toDelete));\n    await actor.createEmbeddedDocuments(\"Item\", toAdd);\n\n  }\n\n\n  // eslint-disable-next-line complexity\n  static async restrictedItemReplacer(actor, folderName = null) {\n    if (!game.modules.get(\"chris-premades\")?.active) return;\n    logger.debug(\"Beginning additions and removals of restricted effects.\");\n\n    const documents = actor.getEmbeddedCollection(\"Item\").toObject();\n    const restrictedItems = foundry.utils.getProperty(CONFIG, `chrisPremades.restrictedItems`);\n\n    const sortedItems = Object.keys(restrictedItems).map((key) => {\n      const data = restrictedItems[key];\n      data[\"key\"] = key;\n      return data;\n    }).sort((a, b) => (a.priority ?? 0) - (b.priority ?? 0));\n    const toAdd = [];\n    const toDelete = new Set();\n\n    for (const restrictedItem of sortedItems) {\n      logger.debug(`Checking restricted Item ${restrictedItem.key}: ${restrictedItem.originalName}`);\n      const doc = documents.find((d) => {\n        const ddbName = d.flags.ddbimporter?.chrisPreEffectName ?? ChrisPremadesHelper.getOriginalName(d);\n        const retainDoc = foundry.utils.getProperty(document, \"flags.ddbimporter.ignoreItemForChrisPremades\") === true;\n        return ddbName === restrictedItem.originalName && !retainDoc;\n      });\n      if (!doc) continue;\n      if ([\"class\", \"subclass\", \"background\"].includes(doc.type)) continue;\n      const ddbName = doc.flags.ddbimporter?.chrisPreEffectName ?? ChrisPremadesHelper.getOriginalName(doc);\n\n      const rollData = actor.getRollData();\n\n      if (restrictedItem.requiredClass && !rollData.classes[restrictedItem.requiredClass.toLowerCase()]) continue;\n      if (restrictedItem.requiredSubclass) {\n        const subClassData = rollData.classes[restrictedItem.requiredClass.toLowerCase()].subclass;\n        if (!subClassData) continue;\n        if (subClassData.parent.name.toLowerCase() !== restrictedItem.requiredSubclass.toLowerCase()) continue;\n      }\n      if (restrictedItem.requiredRace\n        && restrictedItem.requiredRace.toLocaleLowerCase() !== (rollData.details.race?.name ?? rollData.details?.race)?.toLocaleLowerCase()\n      ) continue;\n\n\n      if (restrictedItem.requiredEquipment) {\n        for (const requiredEquipment of restrictedItem.requiredEquipment) {\n          const itemMatch = documents.some((d) => ddbName === requiredEquipment && DICTIONARY.types.inventory.includes(d.type));\n          if (!itemMatch) continue;\n        }\n      }\n\n      if (restrictedItem.requiredFeature) {\n        for (const requiredFeature of restrictedItem.requiredFeature) {\n          const itemMatch = documents.some((d) => ddbName === requiredFeature && d.type === \"feat\");\n          if (!itemMatch) continue;\n        }\n      }\n\n      if (restrictedItem.requiredFeatures) {\n        for (const requiredFeature of restrictedItem.requiredFeatures) {\n          const itemMatch = documents.some((d) => ddbName === requiredFeature && d.type === \"feat\");\n          if (!itemMatch) continue;\n        }\n      }\n\n      // now replace the matched item with the replaced Item\n      if (restrictedItem.replacedItemName && restrictedItem.replacedItemName !== \"\") {\n        logger.debug(`Replacing item data for ${ddbName}, using restricted data from ${restrictedItem.key}`);\n        const updateDocument = await ChrisPremadesHelper.findAndUpdate({\n          document: foundry.utils.duplicate(doc),\n          folderName,\n          chrisNameOverride: restrictedItem.replacedItemName,\n        });\n        if (updateDocument) {\n          await actor.deleteEmbeddedDocuments(\"Item\", [doc._id]);\n          await actor.createEmbeddedDocuments(\"Item\", [updateDocument], { keepId: true });\n        }\n      }\n\n\n      if (restrictedItem.additionalItems && restrictedItem.additionalItems.length > 0) {\n        logger.debug(`Adding new items for ${ddbName}, using restricted data from ${restrictedItem.key}`);\n\n        const docAdd = documents.find((d) => d.name === ddbName);\n        if (docAdd) {\n          for (const newItemName of restrictedItem.additionalItems) {\n            logger.debug(`Adding new item ${newItemName}`);\n            const chrisDoc = await ChrisPremadesHelper.getDocumentFromName(newItemName, docAdd.type);\n\n            // eslint-disable-next-line max-depth\n            if (!chrisDoc) {\n              logger.error(`DDB Importer expected to find an item in Chris's Premades for ${newItemName} but did not`, {\n                ddbName,\n                doc: docAdd,\n                additionalItems: restrictedItem.additionalItems,\n                documents,\n                chrisDoc,\n              });\n            } else if (!documents.some((d) => d.name === chrisDoc.name)) {\n              foundry.utils.setProperty(chrisDoc, \"flags.ddbimporter.ignoreItemUpdate\", true);\n              toAdd.push(chrisDoc);\n            }\n          }\n        }\n      }\n\n      if (restrictedItem.removedItems && restrictedItem.removedItems.length > 0) {\n        logger.debug(`Removing items for ${ddbName}, using restricted data from ${restrictedItem.key}`);\n        for (const removeItemName of restrictedItem.removedItems) {\n          logger.debug(`Removing item ${removeItemName}`);\n          const deleteDoc = documents.find((d) => ChrisPremadesHelper.getOriginalName(d) === removeItemName);\n          if (deleteDoc) toDelete.add(deleteDoc._id);\n        }\n      }\n\n    }\n\n    logger.debug(\"Adding and removing the following restricted Chris's Premades\", {\n      toDelete,\n      toAdd,\n    });\n    await actor.deleteEmbeddedDocuments(\"Item\", Array.from(toDelete));\n    await actor.createEmbeddedDocuments(\"Item\", toAdd);\n\n  }\n\n}\n","/* eslint-disable no-continue */\n/* eslint-disable require-atomic-updates */\n\nimport PatreonHelper from \"../../lib/PatreonHelper.js\";\nimport logger from \"../../logger.js\";\nimport SETTINGS from \"../../settings.js\";\nimport ChrisPremadesHelper from \"./ChrisPremadesHelper.js\";\n\nexport default class ExternalAutomations {\n\n  constructor(actor) {\n    this.actor = actor;\n    const dynamicSync = game.settings.get(\"ddb-importer\", \"dynamic-sync\");\n    const updateUser = game.settings.get(\"ddb-importer\", \"dynamic-sync-user\");\n    const gmSyncUser = game.user.isGM && game.user.id == updateUser;\n    const tier = PatreonHelper.getPatreonTier();\n    const tiers = PatreonHelper.calculateAccessMatrix(tier);\n    this.dynamicUpdateAllowed = dynamicSync && gmSyncUser && tiers?.experimentalMid;\n    this.dynamicUpdateStatus = this.actor.flags?.ddbimporter?.activeUpdate;\n  }\n\n  getCurrentDynamicUpdateState() {\n    return this.actor.flags?.ddbimporter?.activeUpdate ?? false;\n  }\n\n  async disableDynamicUpdates() {\n    if (!this.dynamicUpdateStatus) return;\n    const activeUpdateData = { flags: { ddbimporter: { activeUpdate: false } } };\n    await this.actor.update(activeUpdateData);\n  }\n\n  async enableDynamicUpdates() {\n    if (!this.dynamicUpdateStatus) return;\n    const activeUpdateData = { flags: { ddbimporter: { activeUpdate: true } } };\n    await this.actor.update(activeUpdateData);\n  }\n\n  static async applyChrisPremadeEffect({ document, type, isMonster = false, folderName = null, chrisNameOverride = null } = {}) {\n    return ChrisPremadesHelper.findAndUpdate({\n      document,\n      type,\n      folderName,\n      chrisNameOverride,\n      isMonster\n    });\n  }\n\n  static async applyChrisPremadeEffects({ documents, compendiumItem = false, force = false, isMonster = false, folderName = null } = {}) {\n    if (!game.modules.get(\"chris-premades\")?.active) {\n      logger.debug(\"Chris Premades not active\");\n      return documents;\n    }\n\n    const applyChrisEffects = force || (compendiumItem\n      ? game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-chris-premades\")\n      : game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-chris-premades\"));\n    if (!applyChrisEffects) {\n      logger.debug(\"Not Applying basic premades\");\n      return documents;\n    }\n\n    for (let doc of documents) {\n      if ([\"class\", \"subclass\", \"background\"].includes(doc.type)) continue;\n      const type = ChrisPremadesHelper.getTypeMatch(doc, isMonster);\n      logger.debug(`Evaluating ${doc.name} of type ${type} for Chris's Premade application.`, { type, folderName, isMonster });\n\n      doc = await ChrisPremadesHelper.findAndUpdate({\n        document: doc,\n        type,\n        folderName,\n        isMonster,\n      });\n      if (isMonster && ![\"monsterfeature\"].includes(type) && !foundry.utils.getProperty(doc, \"flags.ddbimporter.effectsApplied\") === true) {\n        logger.debug(`No Chris' Premade found for ${doc.name} with type \"${type}\", checking for monster feature.`);\n        doc = await ChrisPremadesHelper.findAndUpdate({ document: doc, type: \"monsterfeature\", folderName, isMonster });\n      }\n    }\n\n    return documents;\n  }\n\n  static async addChrisEffectsToActorDocuments(actor) {\n    if (!game.modules.get(\"chris-premades\")?.active) {\n      ui.notifications.error(\"Chris Premades module not installed\");\n      return [];\n    }\n\n    const externalAutomations = new ExternalAutomations(actor);\n    await externalAutomations.disableDynamicUpdates();\n\n    logger.info(\"Starting to update actor documents with Chris Premades effects\");\n    let documents = actor.getEmbeddedCollection(\"Item\").toObject();\n    const isMonster = actor.type === \"npc\";\n    const folderName = isMonster ? actor.name : null;\n    const data = (await ExternalAutomations.applyChrisPremadeEffects({\n      documents,\n      compendiumItem: false,\n      force: true,\n      folderName,\n      isMonster,\n    }))\n      .filter((d) =>\n        foundry.utils.getProperty(d, \"flags.ddbimporter.chrisEffectsApplied\") === true\n        && !foundry.utils.hasProperty(d, \"flags.items-with-spells-5e.item-spells.parent-item\")\n      );\n    const dataIds = data.map((d) => d._id);\n    logger.debug(\"Chris premades generation complete, beginning replace\", {\n      isMonster,\n      folderName,\n      data,\n      dataIds,\n      actor,\n      documents,\n    });\n    await actor.deleteEmbeddedDocuments(\"Item\", dataIds);\n    logger.debug(\"Chris premades, deletion complete\");\n    logger.debug(\"Creating chris premade items\", data);\n    await actor.createEmbeddedDocuments(\"Item\", data, { keepId: true });\n    logger.debug(\"Delete and recreate complete, beginning restricted item replacer\");\n    await ChrisPremadesHelper.restrictedItemReplacer(actor, folderName);\n    logger.debug(\"Restricted item replacer complete, beginning Replacement of Redundant Chris Documents\");\n    await ChrisPremadesHelper.addAndReplaceRedundantChrisDocuments(actor);\n    logger.info(\"Effect replacement complete\");\n    await externalAutomations.enableDynamicUpdates();\n    return data.map((d) => d.name);\n  }\n}\n","import DDBMacros from \"../DDBMacros.js\";\n\nexport async function maskOfTheWildEffect(document) {\n  await DDBMacros.setItemMacroFlag(document, \"feat\", \"maskOfTheWild.js\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"feat\", \"maskOfTheWild.js\", [\"postActiveEffects\"]);\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function recklessAttackEffect(document, allMWAK = false) {\n  let attackEffect = baseFeatEffect(document, `${document.name} (Attack Effect)`);\n\n  attackEffect.changes.push(\n    {\n      key: allMWAK ? \"flags.midi-qol.advantage.attack.mwak\" : \"flags.midi-qol.advantage.attack.str\",\n      value: `1`,\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 20,\n    },\n  );\n\n\n  foundry.utils.setProperty(attackEffect, \"flags.dae.stackable\", \"noneName\");\n\n  document.effects.push(attackEffect);\n\n  let defenseEffect = baseFeatEffect(document, `${document.name} (Defense Effect)`);\n\n  defenseEffect.changes.push(\n    {\n      key: \"flags.midi-qol.grants.advantage.attack.all\",\n      value: `1`,\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 20,\n    },\n  );\n  defenseEffect.duration = {\n    startTime: null,\n    seconds: 12,\n    rounds: 2,\n    turns: null,\n    startRound: null,\n    startTurn: null,\n  };\n  foundry.utils.setProperty(defenseEffect, \"flags.dae.specialDuration\", [\"turnStartSource\"]);\n  foundry.utils.setProperty(defenseEffect, \"flags.dae.stackable\", \"noneName\");\n  defenseEffect.statuses.push(\"Reckless\");\n\n  document.effects.push(defenseEffect);\n\n  document.system[\"target\"][\"type\"] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.system.actionType = null;\n  foundry.utils.setProperty(document, \"system.activation.type\", \"special\");\n  document.system.duration = {\n    value: 1,\n    units: \"turn\",\n  };\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function uncannyDodgeEffect(document) {\n  let effect = baseFeatEffect(document, `${document.name} - 1/2 Damage`);\n  effect.changes.push({\n    key: \"flags.midi-qol.uncanny-dodge\",\n    value: \"1\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    priority: 10,\n  });\n  effect.flags.dae.specialDuration = [\"1Reaction\"];\n  document.system[\"target\"][\"type\"] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.system.actionType = null;\n  document.system.activation.type = \"reactiondamage\";\n  document.effects.push(effect);\n  return document;\n}\n","import { baseMonsterFeatureEffect } from \"../specialMonsters.js\";\nimport utils from \"../../lib/utils.js\";\nimport DICTIONARY from \"../../dictionary.js\";\nimport { addStatusEffectChange } from \"../effects.js\";\nimport logger from \"../../logger.js\";\nimport DDBMonsterFeature from \"../../parser/monster/features/DDBMonsterFeature.js\";\n\nconst DEFAULT_DURATION = 60;\n\nfunction overTimeDamage({ document, turn, damage, damageType, saveAbility, saveRemove, saveDamage, dc } = {}) {\n  return {\n    key: \"flags.midi-qol.OverTime\",\n    mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n    value: `turn=${turn},label=${document.name} (${utils.capitalize(turn)} of Turn),damageRoll=${damage},damageType=${damageType},saveRemove=${saveRemove},saveDC=${dc},saveAbility=${saveAbility},saveDamage=${saveDamage},killAnim=true`,\n    priority: \"20\",\n  };\n}\n\nfunction overTimeSave({ document, turn, saveAbility, saveRemove = true, dc } = {}) {\n  const turnValue = turn === \"action\" ? \"end\" : turn;\n  const actionSave = turn === \"action\" ? \",actionSave=true\" : \"\";\n  return {\n    key: \"flags.midi-qol.OverTime\",\n    mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n    value: `turn=${turnValue},label=${document.name} (${utils.capitalize(turn)} of Turn),saveRemove=${saveRemove},saveDC=${dc},saveAbility=${saveAbility},killAnim=true${actionSave}`,\n    priority: \"20\",\n  };\n}\n\nfunction startOrEnd(text) {\n  const re = /at the (start|end) of each/i;\n  const match = text.match(re);\n  if (match) {\n    return match[1];\n  } else {\n    return undefined;\n  }\n}\n\nfunction getDuration(text) {\n  const re = /for (\\d+) (minute|hour)/;\n  const match = text.match(re);\n  if (match) {\n    let minutes = parseInt(match[1]) * 60;\n    if (match[2] === \"hour\") {\n      minutes *= 60;\n    }\n    return minutes;\n  } else {\n    const reRounds = /for (\\d+) round/;\n    const roundMatch = text.match(reRounds);\n    if (roundMatch) {\n      return roundMatch[1] * 6;\n    }\n  }\n  return DEFAULT_DURATION;\n}\n\n// A selection of example conditions\n// DC 18 Strength saving throw or be knocked prone\n// DC 14 Constitution saving throw or become poisoned for 1 minute.\n// DC 12 Constitution saving throw or be poisoned for 1 minute\n// DC 15 Wisdom saving throw or be frightened until the end of its next turn.\n// DC 15 Charisma saving throw or be charmed\n// DC 12 Charisma saving throw or become cursed\n// DC 10 Intelligence saving throw or it can’t take a reaction until the end of its next turn\n// DC 12 Constitution saving throw or contract bluerot\n// DC 17 Strength saving throw or be thrown up to 30 feet away in a straight line\n// DC 13 Constitution saving throw or lose the ability to use reactions until the start of the weird’s\n// DC 16 Wisdom saving throw or move 1 round forward in time\n// DC 15 Constitution saving throw, or for 1 minute, its speed is reduced by 10 feet; it can take either an action or a bonus action on each of its turns, not both; and it can’t take reactions.\n// DC 15 Constitution saving throw or have disadvantage on its attack rolls until the end of its next turn\n// DC 15 Wisdom saving throw or be frightened until the end of its next turn\n// DC 13 Strength saving throw or take an extra 3 (1d6) piercing damage and be grappled (escape DC 13)\n// DC 15 Constitution saving throw or gain 1 level of exhaustion\n// DC 20 Constitution saving throw or be paralyzed for 1 minute\n// DC 17 Constitution saving throw or be cursed with loup garou lycanthropy\n// DC 12 Constitution saving throw or be cursed with mummy rot\n// DC 18 Strength saving throw or be swallowed by the neothelid. A swallowed creature is blinded and restrained, it has total cover against attacks and other effects outside the neothelid, and it takes 35 (10d6) acid damage at the start of each of the neothelid’s turns.</p><p>If the neothelid takes 30 damage or more on a single turn from a creature inside it, the neothelid must succeed on a DC 18 Constitution saving throw at the end of that turn or regurgitate all swallowed creatures, which fall prone in a space within 10 feet of the neothelid. If the neothelid dies, a swallowed creature is no longer restrained by it and can escape from the corpse by using 20 feet of movement, exiting prone.\n// (before DC) it can’t regain hit points for 1 minute\n// DC 14 Dexterity saving throw or suffer one additional effect of the shadow dancer’s choice:</p><ul>\\n<li>The target is grappled (escape DC 14) if it is a Medium or smaller creature. Until the grapple ends, the target is restrained, and the shadow dancer can’t grapple another target.</li>\\n<li>The target is knocked prone.</li>\\n<li>The target takes 22 (4d10) necrotic damage.</li>\\n</ul>\\n</section>\\nThe Shadow Dancer attacks with its Spiked Chain.\n// DC 15 Constitution saving throw or be stunned until the end of its next turn.\n// DC 15 Constitution saving throw or die.\n// DC 20 Strength saving throw or be pulled up to 25 feet toward the balor.\n// DC 11 Constitution saving throw or be poisoned until the end of the target’s next turn.\n// DC 14 Wisdom saving throw or be frightened of the quori for 1 minute.\n// DC 13 Constitution saving throw or be poisoned for 1 hour. If the saving throw fails by 5 or more, the target is also unconscious while poisoned in this way. The target wakes up if it takes damage or if another creature takes an action to shake it awake.\n\nfunction getSpecialDuration(effect, match) {\n  // minutes\n  if (match[7]\n    && (match[7].includes(\"until the end of its next turn\")\n    || match[7].includes(\"until the end of the target's next turn\"))\n  ) {\n    foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"turnEnd\"]);\n  } else if (match[7] && match[7].includes(\"until the start of the\")) {\n    foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"turnStartSource\"]);\n  }\n  return effect;\n}\n\nfunction generateConditionEffect(effect, text, nameHint = null) {\n  let results = {\n    success: false,\n    effect,\n  };\n\n  text = utils.nameString(text);\n  const conditionSearch = /\\[\\[\\/save (?<ability>\\w+) (?<dc>\\d\\d) format=long\\]\\](?:,)? or (be |be cursed|become|die|contract|have|it can't|suffer|gain|lose the)\\s?(?:knocked )?(?:&(?:amp;)?Reference\\[(?<condition>\\w+)\\]{\\w+})?\\s?(?:for (\\d+) (minute))?(.*)?(?:.|$)/;\n  let match = text.match(conditionSearch);\n  if (!match) {\n    const rawConditionSearch = /DC (?<dc>\\d+) (?<ability>\\w+) saving throw(?:,)? or (be |be cursed|become|die|contract|have|it can't|suffer|gain|lose the)\\s?(?:knocked )?(?<condition>\\w+)?\\s?(?:for (\\d+) (minute))?(.*)?(?:.|$)/;\n    match = text.match(rawConditionSearch);\n  }\n\n  // console.warn(\"condition status\", match);\n  if (match) {\n    results.success = true;\n    results.save = {\n      dc: parseInt(match.groups[\"dc\"]),\n      ability: match.groups[\"ability\"].toLowerCase().substr(0, 3),\n      scaling: \"flat\",\n    };\n    // group 4 condition - .e.g. \"DC 18 Strength saving throw or be knocked prone\"\n    const group4Condition = match.groups.condition\n      ? DICTIONARY.character.damageAdjustments\n        .filter((type) => type.type === 4)\n        .find(\n          (type) => type.name.toLowerCase() === match.groups.condition.toLowerCase()\n            || type.foundryValue === match.groups.condition.toLowerCase()\n        )\n      : undefined;\n    if (group4Condition) {\n      results.condition = group4Condition.value;\n      addStatusEffectChange(results.effect, group4Condition.name, 20, true);\n      effect = getSpecialDuration(results.effect, match);\n      if (nameHint) results.effect.name = `${nameHint}: ${group4Condition.name}`;\n    } else if (match[3] && match[3] === \"die\") {\n      addStatusEffectChange(results.effect, \"Dead\", 20, true);\n      if (nameHint) results.effect.name = `Condition: Dead`;\n    }\n  }\n  return results;\n}\n\nfunction overTimeSaveEnd(document, effect, save, text) {\n  const saveSearch = /repeat the saving throw at the (end|start) of each/;\n  const match = text.match(saveSearch);\n  if (match) {\n    effect.changes.push(overTimeSave({ document, turn: match[1], saveAbility: save.ability, dc: save.dc }));\n  } else {\n    const actionSaveSearch = /can use its action to repeat the saving throw/;\n    const actionSaveMatch = text.match(actionSaveSearch);\n    if (actionSaveMatch) {\n      effect.changes.push(overTimeSave({ document, turn: \"action\", saveAbility: save.ability, dc: save.dc }));\n    }\n  }\n}\n\nexport function getMonsterFeatureDamage(damageText, featureDoc = null) {\n  const preParsed = foundry.utils.getProperty(featureDoc, \"flags.monsterMunch.actionInfo.damage\");\n  if (preParsed) return preParsed;\n  logger.debug(\"Monster feature damage miss\", { damageText, featureDoc });\n  const feature = new DDBMonsterFeature(\"overTimeFeature\", { html: damageText });\n  feature.prepare();\n  feature.generateExtendedDamageInfo();\n  return feature.actionInfo.damage;\n}\n\nexport function getOvertimeDamage(text, featureDoc = null) {\n  if (text.includes(\"taking\") && (text.includes(\"on a failed save\") || text.includes(\"damage on a failure\"))) {\n    const damageText = text.split(\"taking\")[1];\n    return getMonsterFeatureDamage(damageText, featureDoc);\n  }\n  return undefined;\n}\n\nfunction effectCleanup(document, actor, effect) {\n  if (effect.changes.length > 0 || effect.statuses.length > 0) {\n    document.effects.push(effect);\n    let overTimeFlags = foundry.utils.hasProperty(actor, \"flags.monsterMunch.overTime\")\n      ? foundry.utils.getProperty(actor, \"flags.monsterMunch.overTime\")\n      : [];\n    overTimeFlags.push(document.name);\n    foundry.utils.setProperty(actor, \"flags.monsterMunch.overTime\", overTimeFlags);\n    // console.warn(`ITEM OVER TIME EFFECT: ${actor.name}, ${document.name}`);\n    if (foundry.utils.getProperty(document, \"system.duration.units\") === \"inst\") {\n      foundry.utils.setProperty(document, \"system.duration\", {\n        units: \"round\",\n        value: effect.duration.rounds,\n      });\n    }\n    logger.debug(`Cleanup of over time effect for ${actor.name}, ${actor.name} for ${document.name}`, effect);\n  }\n  return { document, actor };\n}\n\nexport function generateConditionOnlyEffect(actor, document) {\n  logger.debug(`Checking for condition effects for ${document.name} on ${actor.name}`);\n  if (!document.effects) document.effects = [];\n  let effect = baseMonsterFeatureEffect(document, `${document.name}`);\n  // add any condition effects\n  const conditionResults = generateConditionEffect(effect, document.system.description.value, document.name);\n  effect = conditionResults.effect;\n\n  const durationSeconds = foundry.utils.hasProperty(document.flags, \"monsterMunch.overTime.durationSeconds\")\n    ? foundry.utils.getProperty(document.flags, \"monsterMunch.overTime.durationSeconds\")\n    : getDuration(document.system.description.value);\n  foundry.utils.setProperty(effect, \"duration.seconds\", durationSeconds);\n  const durationRounds = Number.parseInt(durationSeconds / 6);\n  foundry.utils.setProperty(effect, \"duration.rounds\", durationRounds);\n\n  const result = effectCleanup(document, actor, effect);\n  return result;\n}\n\nexport function generateOverTimeEffect(actor, document) {\n  logger.debug(`Checking for over time effects for ${document.name} on ${actor.name}`);\n  if (!document.effects) document.effects = [];\n  let effect = baseMonsterFeatureEffect(document, `${document.name}`);\n  // add any condition effects\n  const conditionResults = generateConditionEffect(effect, document.system.description.value);\n  effect = conditionResults.effect;\n  if (conditionResults.success) {\n    foundry.utils.setProperty(document, \"flags.midiProperties.fulldam\", true);\n    overTimeSaveEnd(document, effect, conditionResults.save, document.system.description.value);\n  }\n\n  const durationSeconds = foundry.utils.hasProperty(document.flags, \"monsterMunch.overTime.durationSeconds\")\n    ? foundry.utils.getProperty(document.flags, \"monsterMunch.overTime.durationSeconds\")\n    : getDuration(document.system.description.value);\n  foundry.utils.setProperty(effect, \"duration.seconds\", durationSeconds);\n  const durationRounds = Number.parseInt(durationSeconds / 6);\n  foundry.utils.setProperty(effect, \"duration.rounds\", durationRounds);\n\n  const turn = startOrEnd(document.system.description.value);\n  if (!turn) {\n    logger.debug(`No turn over time effect for ${document.name} on ${actor.name}`);\n    return effectCleanup(document, actor, effect);\n  }\n\n  const saveFeature = new DDBMonsterFeature(\"overTimeSaveFeature\", { html: document.system.description.value });\n  saveFeature.prepare();\n  const save = saveFeature.getFeatSave();\n  if (!Number.isInteger(Number.parseInt(save.dc))) return effectCleanup(document, actor, effect);\n\n  const saveAbility = save.ability;\n  const dc = save.dc;\n\n  const dmg = getOvertimeDamage(document.system.description.value, document);\n  if (!dmg) {\n    logger.debug(`Adding non damage Overtime effect for ${document.name} on ${actor.name}`);\n    return effectCleanup(document, actor, effect);\n  }\n\n  // overtime damage, revert any full damage flag, reset to default on save\n  foundry.utils.setProperty(document, \"flags.midiProperties.fulldam\", false);\n\n  const damage = foundry.utils.hasProperty(document.flags, \"monsterMunch.overTime.damage\")\n    ? foundry.utils.getProperty(document.flags, \"monsterMunch.overTime.damage\")\n    : dmg.parts.reduce((total, current) => {\n      total = [total, `${current[0]}[${current[1]}]`].join(\" + \");\n      return total;\n    }, \"\");\n\n  const damageType = foundry.utils.hasProperty(document.flags, \"monsterMunch.overTime.damageType\")\n    ? foundry.utils.getProperty(document.flags, \"monsterMunch.overTime.damageType\")\n    : dmg.parts.length > 0\n      ? dmg.parts[0][1]\n      : \"\";\n\n  const saveRemove = foundry.utils.hasProperty(document.flags, \"monsterMunch.overTime.saveRemove\")\n    ? foundry.utils.getProperty(document.flags, \"monsterMunch.overTime.saveRemove\")\n    : true;\n\n  const saveDamage = foundry.utils.hasProperty(document.flags, \"monsterMunch.overTime.saveDamage\")\n    ? foundry.utils.getProperty(document.flags, \"monsterMunch.overTime.saveDamage\")\n    : \"nodamage\";\n\n  logger.debug(`generateOverTimeEffect: Generated over time effect for ${actor.name}, ${document.name}`);\n  effect.changes.push(overTimeDamage({ document, turn, damage, damageType, saveAbility, saveRemove, saveDamage, dc }));\n\n  const result = effectCleanup(document, actor, effect);\n  return result;\n}\n\n\nexport function damageOverTimeEffect({ document, startTurn = false, endTurn = false, durationSeconds, damage,\n  damageType, saveAbility, saveRemove = true, saveDamage = \"nodamage\", dc } = {}\n) {\n  let effect = baseMonsterFeatureEffect(document, `${document.name}`);\n\n  if (!startTurn && !endTurn) return document;\n\n  if (startTurn) {\n    logger.debug(`damageOverTimeEffect: Generating damage over time effect START for ${document.name}`);\n    effect.changes.push(\n      overTimeDamage({ document, turn: \"start\", damage, damageType, saveAbility, saveRemove, saveDamage, dc })\n    );\n  }\n  if (endTurn) {\n    logger.debug(`damageOverTimeEffect: Generating damage over time effect END for ${document.name}`);\n    effect.changes.push(\n      overTimeDamage({ document, turn: \"end\", damage, damageType, saveAbility, saveRemove, saveDamage, dc })\n    );\n  }\n\n  foundry.utils.setProperty(effect, \"duration.seconds\", durationSeconds);\n\n  document.effects.push(effect);\n  return document;\n}\n","import {\n  baseItemEffect,\n  generateMultiplyChange,\n} from \"../effects.js\";\n\nexport function bootsOfSpeedEffect(document) {\n  let effect = baseItemEffect(document, `${document.name}`);\n  effect.changes.push(generateMultiplyChange(2, 20, \"system.attributes.movement.walk\"));\n  effect.duration = {\n    startTime: null,\n    seconds: 600,\n    rounds: null,\n    turns: null,\n    startRound: null,\n    startTurn: null,\n  };\n  effect.transfer = true;\n  effect.disabled = true;\n  effect.flags.dae.transfer = true;\n  effect.flags.dae.stackable = true;\n  document.system.target = {\n    value: null,\n    width: null,\n    units: \"\",\n    type: \"self\",\n  };\n  document.system.range = {\n    value: null,\n    long: null,\n    units: \"self\",\n  };\n  document.system.activation.type = \"bonus\";\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function cloakOfDisplacementEffect(document) {\n  let effect = baseItemEffect(document, `${document.name} - Check`);\n  foundry.utils.setProperty(effect, \"flags.dae.macroRepeat\", \"startEveryTurn\");\n  await DDBMacros.setItemMacroFlag(document, \"item\", \"cloakOfDisplacement.js\");\n  effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"item\", macroName: \"cloakOfDisplacement.js\" }));\n  // eslint-disable-next-line require-atomic-updates\n  document.effects[0] = effect;\n\n  // foundry.utils.setProperty(document.effects[0], \"flags.dae.specialDuration\", [\"isDamaged\"]);\n\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function javelinOfLightningEffect(document) {\n  let effect = baseItemEffect(document, `${document.name}: Used Effect Tracker`);\n  await DDBMacros.setItemMacroFlag(document, \"item\", \"javelinOfLightning.js\");\n  effect.changes.push(DDBMacros.generateMacroChange({ macroValues: `\"${document.name}\"`, macroType: \"item\", macroName: \"javelinOfLightning.js\" }));\n  effect.transfer = false;\n  foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"newDay\", \"longRest\"]);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.effects.push(effect);\n\n  DDBMacros.setMidiOnUseMacroFlag(document, \"item\", \"javelinOfLightning.js\", [\"postActiveEffects\", \"postDamageRoll\", \"preAttackRoll\"]);\n\n  // foundry.utils.setProperty(document.effects[0], \"flags.dae.specialDuration\", [\"isDamaged\"]);\n  document.system.uses = {\n    value: null,\n    max: \"\",\n    per: \"\",\n  };\n\n  document.system.formula = \"\";\n\n  return document;\n}\n","export function moonSickleEffect(document) {\n  document.effects[0].changes.push(\n    {\n      key: \"system.bonuses.heal.damage\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"+ d4\",\n      priority: \"20\",\n    },\n  );\n\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function pearlOfPowerEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  await DDBMacros.setItemMacroFlag(document, \"item\", \"pearlOfPower.js\");\n  effect.changes.push(DDBMacros.generateMacroChange({ macroValues: `\"${document.name}\"`, macroType: \"item\", macroName: \"pearlOfPower.js\" }));\n  effect.transfer = false;\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\n\nexport function stoneOfGoodLuckEffect(document) {\n  document.effects = [];\n\n  const effect = baseItemEffect(document, document.name);\n\n  effect.changes.push(\n    {\n      key: \"system.bonuses.abilities.save\",\n      value: \"+1\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 1,\n    },\n    {\n      key: \"system.bonuses.abilities.check\",\n      value: \"+1\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 1,\n    },\n  );\n\n  document.effects.push(effect);\n\n\n  return document;\n}\n","import {\n  baseItemEffect,\n  generateUpgradeChange,\n  generateUnsignedAddChange,\n  generateCustomChange,\n  forceItemEffect,\n  effectModules,\n  applyDefaultMidiFlags,\n  addSimpleConditionEffect,\n} from \"./effects.js\";\n// load item effects\nimport { bootsOfSpeedEffect } from \"./items/bootsOfSpeed.js\";\nimport { cloakOfDisplacementEffect } from \"./items/cloakOfDisplacement.js\";\nimport { javelinOfLightningEffect } from \"./items/javelinOfLightning.js\";\nimport { moonSickleEffect } from \"./items/moonSickle.js\";\nimport { pearlOfPowerEffect } from \"./items/pearlOfPower.js\";\nimport { stoneOfGoodLuckEffect } from \"./items/stoneOfGoodLuck.js\";\nimport { hasteEffect } from \"./spells/haste.js\";\n\n\nexport async function midiItemEffects(document) {\n\n  const name = document.flags.ddbimporter?.originalName || document.name;\n\n  switch (name) {\n    case \"Horn of Blasting\": {\n      document = addSimpleConditionEffect(document, \"deafened\");\n      break;\n    }\n    // no default\n  }\n\n  if (!effectModules().hasCore) return document;\n  document = applyDefaultMidiFlags(document);\n\n  switch (name) {\n    case \"Cloak of Displacement\": {\n      document = await cloakOfDisplacementEffect(document);\n      break;\n    }\n    case \"Javelin of Lightning\":\n    case \"Tempus Javelin\": {\n      document = await javelinOfLightningEffect(document);\n      break;\n    }\n    case \"Pearl of Power\": {\n      document = await pearlOfPowerEffect(document);\n      break;\n    }\n    case \"Potion of Speed\": {\n      document = hasteEffect(document);\n      break;\n    }\n    case \"Spellguard Shield\": {\n      if (document.effects && document.effects.length > 0) {\n        document.effects[0].changes.push(\n          generateCustomChange(1, 20, \"flags.midi-qol.grants.disadvantage.attack.msak\"),\n          generateCustomChange(1, 20, \"flags.midi-qol.grants.disadvantage.attack.rsak\")\n        );\n      }\n      break;\n    }\n    // no default\n  }\n\n  return forceItemEffect(document);\n}\n\n/**\n * This function is mainly for effects that can't be dynamically generated\n * @param {*} document\n */\nexport function equipmentEffectAdjustment(document) {\n  const name = document.flags.ddbimporter?.originalName ?? document.name;\n  switch (name) {\n    case \"Armor of Invulnerability\": {\n      // this effect is 1/day, we have to add it\n      let effect = baseItemEffect(document, `${document.name} - Invulnerability`, { transfer: false, disabled: false });\n      effect.changes.push(generateUnsignedAddChange(\"physical\", 20, \"system.traits.di.value\"));\n      effect.duration = {\n        startTime: null,\n        seconds: 600,\n        rounds: null,\n        turns: null,\n        startRound: null,\n        startTurn: null,\n      };\n      effect.flags.dae.stackable = false;\n      document.system.uses = {\n        value: 1,\n        max: \"1\",\n        per: \"day\",\n      };\n      document.system.target = {\n        value: null,\n        width: null,\n        units: \"\",\n        type: \"self\",\n      };\n      document.system.range = {\n        value: null,\n        long: null,\n        units: \"self\",\n      };\n      document.effects.push(effect);\n      break;\n    }\n    case \"Bracers of Archery\": {\n      // +2 damage to longbows/shortbows translates to +2 ranged weapon damage\n      document.effects[0].changes.push({\n        key: \"system.bonuses.rwak.damage\",\n        value: \"+2\",\n        mode: 0,\n        priority: 20,\n      });\n      break;\n    }\n    case \"Demon Armor\": {\n      // Unarmed strikes bonus/weapons\n      document.effects[0].changes.push(\n        {\n          key: \"items.Unarmed Strike.system.attack.bonus\",\n          value: \"1\",\n          mode: 2,\n          priority: 20,\n        },\n        {\n          key: \"items.Unarmed Strike.system.damage.parts.0.0\",\n          value: \"1d8+@mod+1\",\n          mode: 5,\n          priority: 20,\n        },\n        {\n          key: \"items.Unarmed Strike.system.properties.mgc\",\n          value: \"true\",\n          mode: 5,\n          priority: 20,\n        }\n      );\n      break;\n    }\n    case \"Belashyrra’s Beholder Crown\": {\n      let effect = baseItemEffect(document, `${document.name} - Passive Effects`);\n      effect.changes.push(generateUpgradeChange(120, 10, \"system.attributes.senses.darkvision\"));\n      document.effects.push(effect);\n      break;\n    }\n    case \"Boots of Speed\": {\n      document = bootsOfSpeedEffect(document);\n      break;\n    }\n    case \"Moon Sickle, +1\":\n    case \"Moon Sickle, +2\":\n    case \"Moon Sickle, +3\":\n    case \"Moon Sickle\": {\n      document = moonSickleEffect(document);\n      break;\n    }\n    case \"Stone of Good Luck (Luckstone)\":\n    case \"Luckstone\":\n    case \"Stone of Good Luck\": {\n      document = stoneOfGoodLuckEffect(document);\n      break;\n    }\n    // no default\n  }\n\n  return forceItemEffect(document);\n}\n","import { baseItemEffect } from \"../effects.js\";\n\nexport function alertEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n\n  effect.changes.push({\n    key: \"flags.dnd5e.initiativeAlert\",\n    value: \"1\",\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n    priority: \"0\",\n  });\n\n  document.effects = [\n    effect,\n  ];\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function ancestralProtectorsEffect(document) {\n  await DDBMacros.setItemMacroFlag(document, \"feat\", \"ancestralProtectors.js\");\n\n  let effect = baseFeatEffect(document, document.name, { transfer: true });\n  effect.changes.push(\n    DDBMacros.generateOnUseMacroChange({ macroPass: \"postAttackRoll\", macroType: \"spell\", macroName: \"ancestralProtectors.js\", document }),\n  );\n  document.effects.push(effect);\n\n  return document;\n}\n","import DDBMacros from \"../DDBMacros.js\";\nimport { baseFeatEffect } from \"../specialFeats.js\";\n\nexport async function arcaneRecoveryEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n  await DDBMacros.setItemMacroFlag(document, \"feat\", \"arcaneRecovery.js\");\n  effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"feat\", macroName: \"arcaneRecovery.js\" }));\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.effects.push(effect);\n  document.system.actionType = \"\";\n\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function arcaneWardEffect(document) {\n  let detectionEffect = baseItemEffect(document, `${document.name}: Spell Detection`);\n  await DDBMacros.setItemMacroFlag(document, \"feat\", \"arcaneWard.js\");\n\n  detectionEffect.changes.push(\n    DDBMacros.generateOnUseMacroChange({ macroPass: \"preActiveEffects\", macroType: \"spell\", macroName: \"arcaneWard.js\", document }),\n  );\n\n  document.effects.push(detectionEffect);\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\n\n\nexport function auraOfHateEffect(document) {\n\n  let alliesEffect = baseItemEffect(document, `${document.name} (Self) - Passive`);\n  alliesEffect.changes.push({\n    \"key\": \"system.bonuses.mwak.damage\",\n    \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n    \"value\": \"+@abilities.cha.mod\",\n    \"priority\": 20\n  });\n  alliesEffect.statuses.push(alliesEffect.name);\n  foundry.utils.setProperty(alliesEffect, \"flags.dae.stackable\", \"none\");\n\n  document.effects.push(alliesEffect);\n\n\n  if (!game.modules.get(\"ActiveAuras\")?.active) return document;\n\n  let otherEffect = baseItemEffect(document, `${document.name} (Fiends & Undead) - Passive`);\n  otherEffect.flags.ActiveAuras = {\n    aura: \"All\",\n    radius: \"@scale.oathbreaker.aura-of-hate\",\n    isAura: true,\n    ignoreSelf: true,\n    inactive: false,\n    hidden: false,\n    displayTemp: true,\n    type: \"undead; fiend\",\n  };\n  otherEffect.changes.push({\n    \"key\": \"system.bonuses.mwak.damage\",\n    \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n    \"value\": \"+@abilities.cha.mod\",\n    \"priority\": 20\n  });\n  otherEffect.statuses.push(otherEffect.name);\n\n  foundry.utils.setProperty(otherEffect, \"flags.dae.stackable\", \"none\");\n\n  document.effects.push(otherEffect);\n\n\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\n\nexport function bardicInspirationEffect(document) {\n  document.system.damage.parts = [];\n  let inspiredEffect = baseItemEffect(document, \"Inspired\");\n\n  const diceString = \"@scale.bard.bardic-inspiration\";\n  inspiredEffect.changes.push(\n    {\n      key: \"flags.midi-qol.optional.bardicInspiration.attack.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: diceString,\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.bardicInspiration.save.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: diceString,\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.bardicInspiration.check.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: diceString,\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.bardicInspiration.skill.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: diceString,\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.bardicInspiration.label\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"Bardic Inspiration\",\n      priority: \"20\",\n    }\n  );\n  inspiredEffect.transfer = false;\n  inspiredEffect.disabled = false;\n  foundry.utils.setProperty(inspiredEffect, \"flags.dae.transfer\", false);\n  foundry.utils.setProperty(inspiredEffect, \"flags.dae.stackable\", false);\n  foundry.utils.setProperty(inspiredEffect, \"flags.dae.macroRepeat\", \"none\");\n  foundry.utils.setProperty(inspiredEffect, \"flags.dae.specialDuration\", []);\n\n  if (document.flags.ddbimporter.subclass === \"College of Valor\") {\n    inspiredEffect.changes.push(\n      {\n        key: \"flags.midi-qol.optional.bardicInspiration.damage.all\",\n        mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n        value: diceString,\n        priority: \"20\",\n      },\n      {\n        key: \"flags.midi-qol.optional.bardicInspiration.ac.all\",\n        mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n        value: diceString,\n        priority: \"20\",\n      }\n    );\n  }\n\n  document.effects.push(inspiredEffect);\n\n  foundry.utils.setProperty(document, \"flags.midi-qol.effectActivation\", false);\n  return document;\n}\n\n","import { effectModules } from \"../effects.js\";\nimport { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function bladesongEffect(document) {\n  let effect = baseFeatEffect(document, `${document.name}`);\n\n  foundry.utils.setProperty(document, \"system.range\", { value: null, units: \"self\", long: null });\n  foundry.utils.setProperty(document, \"system.range.value\", null);\n  foundry.utils.setProperty(document, \"system.target.type\", \"self\");\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n\n  effect.changes.push(\n    {\n      key: \"system.attributes.ac.bonus\",\n      value: \"max(@abilities.int.mod,1)\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 20,\n    },\n    {\n      key: \"system.attributes.concentration.bonuses.save\",\n      value: \"max(@abilities.int.mod,1)\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 20,\n    },\n    {\n      key: \"system.attributes.movement.walk\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"10\",\n      priority: \"20\",\n    },\n  );\n  effect.duration = {\n    startTime: null,\n    seconds: 60,\n    rounds: null,\n    turns: null,\n    startRound: null,\n    startTurn: null,\n  };\n\n  if (effectModules().midiQolInstalled) {\n    effect.changes.push({\n      key: \"flags.midi-qol.advantage.skill.acr\",\n      value: \"1\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    });\n  }\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function blessedHealerEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  await DDBMacros.setItemMacroFlag(document, \"feat\", \"blessedHealer.js\");\n\n  effect.changes.push(\n    DDBMacros.generateOnUseMacroChange({ macroPass: \"postActiveEffects\", macroType: \"feat\", macroName: \"blessedHealer.js\", document }),\n  );\n  DDBMacros.setMidiOnUseMacroFlag(document, \"feat\", \"blessedHealer.js\", [\"postActiveEffects\"]);\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function blessedStrikesEffect(document) {\n  if (document.system.actionType === null) return document;\n  let effect = baseFeatEffect(document, document.name, { transfer: true });\n\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.optional.blessedstrikes.label\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: `${document.name} Bonus Damage`,\n      priority: \"5\",\n    },\n    {\n      key: \"flags.midi-qol.optional.blessedstrikes.count\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"each-round\",\n      priority: \"5\",\n    },\n    {\n      key: \"flags.midi-qol.optional.blessedstrikes.damage.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: `${document.system.damage.parts[0][0]}`,\n      priority: \"5\",\n    },\n  );\n\n  document.system.damage.parts = [];\n  document.system.actionType = null;\n\n  document.effects.push(effect);\n  return document;\n}\n","export function cloudRuneEffect(document) {\n  // Missing: reaction effect to transfer attack\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function crossbowExpertEffect(document) {\n  let effect = baseFeatEffect(document, document.name, { transfer: true });\n  effect.changes.push({\n    key: \"flags.midi-qol.ignoreNearbyFoes\",\n    value: \"1\",\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n    priority: 20,\n  });\n  document.effects.push(effect);\n  return document;\n}\n","\nimport { baseFeatEffect } from \"../specialFeats.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function crusherCriticalEffect(document) {\n  const effect = baseFeatEffect(document, document.name, { transfer: true });\n  effect.changes.push(\n    {\n      key: \"flags.dnd5e.DamageBonusMacro\",\n      value: DDBMacros.generateItemMacroValue({ macroType: \"feat\", macroName: \"crusherCritical.js\", document }),\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    },\n  );\n  document.effects.push(effect);\n  document.system.actionType = null;\n\n  await DDBMacros.setItemMacroFlag(document, \"feat\", \"crusherCritical.js\");\n\n  return document;\n}\n","\nimport { baseFeatEffect } from \"../specialFeats.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function crusherEffect(document) {\n  const effect = baseFeatEffect(document, document.name, { transfer: true });\n  effect.changes.push(\n    {\n      key: \"flags.dnd5e.DamageBonusMacro\",\n      value: DDBMacros.generateItemMacroValue({ macroType: \"feat\", macroName: \"crusher.js\", document }),\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    },\n  );\n  document.effects.push(effect);\n\n  document.system.actionType = null;\n\n  await DDBMacros.setItemMacroFlag(document, \"feat\", \"crusher.js\");\n\n  return document;\n}\n","\n\nimport { addStatusEffectChange } from \"../effects.js\";\nimport { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function dauntingRoarEffect(document) {\n  const effect = baseFeatEffect(document, document.name);\n  addStatusEffectChange(effect, \"Frightened\", 20, true);\n  foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"turnEndSource\", \"endCombat\"]);\n  effect.duration.seconds = 12;\n  effect.duration.turns = 2;\n\n  document.effects.push(effect);\n  // document.system.range = { value: null, units: \"spec\", long: null };\n  // document.system.target = { value: 10, width: null, units: \"ft\", type: \"enemy\" };\n  // document.system.activation.condition = \"!target.effects.some((e) => e.name.toLowerCase().includes('deafened'))\";\n\n  foundry.utils.setProperty(document.flags, \"midi-qol.effectActivation\", true);\n\n  foundry.utils.setProperty(document, \"flags.midi-qol.itemCondition\", \"\");\n  foundry.utils.setProperty(document, \"flags.midi-qol.effectCondition\", \"!target.effects.some((e) => e.name.toLowerCase().includes('deafened'))\");\n  foundry.utils.setProperty(document, \"flags.midi-qol.AoETargetType\", \"enemy\");\n  foundry.utils.setProperty(document, \"flags.midi-qol.AoETargetTypeIncludeSelf\", false);\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function defensiveDuelistEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"system.attributes.ac.bonus\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"+ @system.attributes.prof\",\n      priority: \"20\",\n    },\n  );\n  foundry.utils.setProperty(effect, \"duration.turns\", 1);\n  foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"isAttacked\"]);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.system.target = {\n    value: null,\n    width: null,\n    units: \"\",\n    type: \"self\",\n  };\n  document.system.range = {\n    value: null,\n    long: null,\n    units: \"self\",\n  };\n  document.system.duration = {\n    value: null,\n    units: \"inst\",\n  };\n  document.system.actionType = null;\n  document.effects.push(effect);\n  return document;\n}\n","import { forceManualReaction } from \"../effects.js\";\n\nexport function deflectMissilesAttackEffect(document) {\n  document = forceManualReaction(document);\n  foundry.utils.setProperty(document, \"system.range.long\", 60);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function deflectMissilesEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.DR.rwak\",\n    value: \"[[1d10 + @mod + @classes.monk.levels]]\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    priority: 0,\n  });\n  effect.flags.dae.specialDuration = [\"1Reaction\"];\n  // foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  // foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  foundry.utils.setProperty(document, \"system.activation.type\", \"reactiondamage\");\n  // document.system.actionType = null;\n\n  document.system.damage.parts = [];\n  document.system[\"target\"][\"type\"] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function deftStrikeEffect(document) {\n  let effect = baseFeatEffect(document, document.name, { transfer: true });\n\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.optional.deftStrike.label\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: `${document.name} Additional Damage`,\n      priority: \"5\",\n    },\n    {\n      key: \"flags.midi-qol.optional.deftStrike.count\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"turn\",\n      priority: \"5\",\n    },\n    {\n      key: \"flags.midi-qol.optional.deftStrike.damage.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"@scale.monk.martial-arts\",\n      priority: \"5\",\n    },\n    {\n      key: \"flags.midi-qol.optional.deftStrike.countAlt\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"ItemUses.Ki Points\",\n      priority: \"5\",\n    },\n    {\n      key: \"flags.midi-qol.optional.deftStrike.criticalDamage\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"1\",\n      priority: \"5\",\n    },\n  );\n\n  document.system.damage.parts = [];\n  document.system.actionType = null;\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function evasionEffect(document) {\n  let effect = baseFeatEffect(document, `${document.name}`, true);\n\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.superSaver.dex\",\n      value: \"1\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    },\n  );\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\n// this one is a bit different, the macro is triggered by midi-qol and applies effects to the actor\n// the Marked effect gets applied to the target\nexport async function favoredFoeEffect(document) {\n  let effect = baseFeatEffect(document, `Marked by ${document.name}`, { transfer: false });\n  effect.changes.push(\n    {\n      key: \"flags.dae.onUpdateSource\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: document.name,\n      priority: 20,\n    },\n  );\n  effect.duration.seconds = 60;\n  document.effects.push(effect);\n\n  let damageBonusEffect = baseFeatEffect(document, document.name, { transfer: true });\n  damageBonusEffect.changes.push({\n    key: \"flags.dnd5e.DamageBonusMacro\",\n    value: DDBMacros.generateItemMacroValue({ macroType: \"feat\", macroName: \"favoredFoe.js\", document }),\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    priority: 20,\n  });\n  document.effects.push(damageBonusEffect);\n\n  await DDBMacros.setItemMacroFlag(document, \"feat\", \"favoredFoe.js\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"feat\", \"favoredFoe.js\", [\"postActiveEffects\"]);\n\n  foundry.utils.setProperty(document, \"system.actionType\", \"util\");\n  document.system.damage.parts = [];\n  document.system.target = {\n    value: 1,\n    width: null,\n    units: \"\",\n    type: \"creature\",\n  };\n  document.system.range = {\n    value: null,\n    long: null,\n    units: \"\",\n  };\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function fightingStyleInterceptionEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.DR.rwak\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"1d10 + @system.attributes.prof\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.DR.mwak\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"1d10 + @system.attributes.prof\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.DR.msak\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"1d10 + @system.attributes.prof\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.DR.rsak\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"1d10 + @system.attributes.prof\",\n      priority: \"20\",\n    }\n  );\n  foundry.utils.setProperty(effect, \"duration.turns\", 1);\n  foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"isDamaged\"]);\n  document.system.target = {\n    value: 1,\n    width: null,\n    units: \"\",\n    type: \"creature\",\n  };\n  document.system.damage.parts = [];\n  document.system.duration = {\n    value: null,\n    units: \"inst\",\n  };\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport { addStatusEffectChange, effectModules } from \"../effects.js\";\n\nexport function fireRuneEffect(document) {\n  foundry.utils.setProperty(document, \"system.range.units\", \"\");\n  foundry.utils.setProperty(document, \"system.target.value\", 1);\n  foundry.utils.setProperty(document, \"system.target.type\", \"creature\");\n\n  let baseEffect = baseFeatEffect(document, document.name);\n  foundry.utils.setProperty(baseEffect, \"duration.seconds\", 60);\n\n\n  if (effectModules().midiQolInstalled) {\n    addStatusEffectChange(baseEffect, \"Restrained\", 20, true);\n    baseEffect.changes.push(\n      {\n        key: \"flags.midi-qol.OverTime\",\n        mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n        value: `label=${document.name} (Start of Turn Damage),turn=start,savingThrow=false,damageRoll=${document.system.damage.parts[0][0]}, damageType=${document.system.damage.parts[0][1]},killAnim=true`,\n        priority: \"20\",\n      },\n      {\n        key: \"flags.midi-qol.OverTime\",\n        mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n        value: `label=${document.name} (End of Turn Save),turn=end,saveDC=@attributes.spelldc,saveAbility=${document.system.save.ability},savingThrow=true,saveMagic=true,saveRemove=true,killAnim=true`,\n        priority: \"20\",\n      }\n    );\n  } else {\n    let restrainedEffect = baseFeatEffect(document, `${document.name} (Restrained)`);\n    addStatusEffectChange(restrainedEffect, \"Restrained\", 20, true);\n    foundry.utils.setProperty(restrainedEffect, \"duration.seconds\", 60);\n    document.effects.push(restrainedEffect);\n  }\n\n  document.effects.push(baseEffect);\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function fontOfMagicEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  await DDBMacros.setItemMacroFlag(document, \"feat\", \"fontOfMagic.js\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"feat\", \"fontOfMagic.js\", [\"preItemRoll\"]);\n\n  document.effects.push(effect);\n  document.system.activation.type = \"bonus\";\n  document.system[\"target\"][\"type\"] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function formOfTheBeastReactionEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"system.attributes.ac.bonus\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"+ 1d8\",\n      priority: \"20\",\n    },\n  );\n  foundry.utils.setProperty(effect, \"duration.turns\", 1);\n  foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"isAttacked\"]);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.system.target = {\n    value: null,\n    width: null,\n    units: \"\",\n    type: \"self\",\n  };\n  document.system.damage.parts = [];\n  document.system.range = {\n    value: null,\n    long: null,\n    units: \"self\",\n  };\n  document.system.duration = {\n    value: null,\n    units: \"inst\",\n  };\n  document.system.actionType = null;\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function frostRuneEffect(document) {\n  foundry.utils.setProperty(document, \"system.target.type\", \"self\");\n  foundry.utils.setProperty(document, \"system.range.units\", \"self\");\n  foundry.utils.setProperty(document, \"system.range.value\", \"\");\n  foundry.utils.setProperty(document, \"system.actionType\", null);\n\n  let bonusEffect = baseFeatEffect(document, `${document.name} (Sturdiness)`);\n  bonusEffect.changes.push(\n    {\n      key: \"system.abilities.con.bonuses.check\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"+2\",\n      priority: \"20\",\n    },\n    {\n      key: \"system.abilities.con.bonuses.save\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"+2\",\n      priority: \"20\",\n    },\n    {\n      key: \"system.abilities.str.bonuses.check\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"+2\",\n      priority: \"20\",\n    },\n    {\n      key: \"system.abilities.str.bonuses.save\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"+2\",\n      priority: \"20\",\n    },\n  );\n  foundry.utils.setProperty(bonusEffect, \"duration.seconds\", 600);\n  document.effects.push(bonusEffect);\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport { generateATLChange, effectModules } from \"../effects.js\";\n\nexport function giantsMightEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n\n  if (effectModules().atlInstalled) {\n    effect.changes.push(generateATLChange(\"ATL.width\", CONST.ACTIVE_EFFECT_MODES.UPGRADE, 2, 5));\n    effect.changes.push(generateATLChange(\"ATL.height\", CONST.ACTIVE_EFFECT_MODES.UPGRADE, 2, 5));\n  }\n\n  effect.changes.push(\n    {\n      key: \"system.traits.size\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"lg\",\n      priority: 25,\n    },\n    {\n      key: \"flags.midi-qol.advantage.ability.save.str\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"1\",\n      priority: \"5\",\n    },\n    {\n      key: \"flags.midi-qol.advantage.ability.check.str\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"1\",\n      priority: \"5\",\n    },\n    {\n      key: \"flags.midi-qol.optional.giantsmight.label\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"Giant's Might Bonus Damage\",\n      priority: \"5\",\n    },\n    {\n      key: \"flags.midi-qol.optional.giantsmight.count\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"turn\",\n      priority: \"5\",\n    },\n    {\n      key: \"flags.midi-qol.optional.giantsmight.damage.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: `${document.system.damage.parts[0][0]}`,\n      priority: \"5\",\n    },\n    {\n      key: \"flags.midi-qol.optional.giantsmight.criticalDamage\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"1\",\n      priority: \"5\",\n    },\n  );\n\n  document.system.damage.parts = [];\n\n  document.effects.push(effect);\n  return document;\n}\n","\n\nimport { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function hadozeDodgeEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.DR.all\",\n    value: \"[[+1d6 + @attributes.prof]]\",\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n    priority: 20,\n  });\n  effect.flags.dae.specialDuration = [\"1Reaction\"];\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(document, \"system.activation.type\", \"reactiondamage\");\n\n  document.system[\"target\"][\"type\"] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.system.damage.parts = [];\n  document.system.ability = null;\n\n  document.effects.push(effect);\n  return document;\n}\n\n","import { effectModules } from \"../effects.js\";\nimport { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function heavyArmorMasterEffect(document) {\n  let effect = baseFeatEffect(document, `${document.name}`, { transfer: true });\n  if (effectModules().midiQolInstalled) {\n    effect.changes.push(\n      {\n        key: \"flags.midi-qol.DR.non-magical\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: \"3\",\n        priority: \"20\",\n      },\n    );\n  } else {\n    effect.changes.push(\n      {\n        key: \"system.traits.dm.amount.bludgeoning\",\n        mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n        value: \"-3\",\n        priority: \"20\",\n      },\n      {\n        key: \"system.traits.dm.amount.slashing\",\n        mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n        value: \"-3\",\n        priority: \"20\",\n      },\n      {\n        key: \"system.traits.dm.amount.piercing\",\n        mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n        value: \"-3\",\n        priority: \"20\",\n      },\n      {\n        key: \"system.traits.dm.bypasses\",\n        mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n        value: \"mgc\",\n        priority: \"20\",\n      },\n    );\n  }\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function hillRuneEffect(document) {\n  foundry.utils.setProperty(document, \"system.target.type\", \"self\");\n  foundry.utils.setProperty(document, \"system.range.units\", \"self\");\n  foundry.utils.setProperty(document, \"system.range.value\", \"\");\n  foundry.utils.setProperty(document, \"system.actionType\", null);\n\n  let bonusEffect = baseFeatEffect(document, `${document.name} (Resistance)`);\n  bonusEffect.changes.push(\n    {\n      key: \"system.traits.dr.value\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"bludgeoning\",\n      priority: \"20\",\n    },\n    {\n      key: \"system.traits.dr.value\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"slashing\",\n      priority: \"20\",\n    },\n    {\n      key: \"system.traits.dr.value\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"piercing\",\n      priority: \"20\",\n    },\n  );\n  foundry.utils.setProperty(bonusEffect, \"duration.seconds\", 60);\n\n  document.effects.push(bonusEffect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function holdBreathEffect(document) {\n  const effect = baseFeatEffect(document, document.name);\n  effect.duration.rounds = 600;\n  document.system[\"target\"][\"type\"] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.effects.push(effect);\n\n  foundry.utils.setProperty(document, \"flags.midiProperties.toggleEffect\", true);\n  document.system.activation = {\n    \"type\": \"special\",\n    \"cost\": 1,\n    \"condition\": \"\"\n  };\n\n  if (document.name === \"Partially Amphibious\") {\n    document.system.uses = { value: 1, max: \"1\", per: \"lr\", type: \"\" };\n  }\n\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\n\nexport function indomitableEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.optional.Indomitable.save.fail\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"reroll\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.Indomitable.count\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"ItemUses.Indomitable\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.Indomitable.label\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"Use Indomitable to Succeed?\",\n      priority: \"20\",\n    }\n  );\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport { addStatusEffectChange } from \"../effects.js\";\n\nexport function kiEmptyBodyEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n  effect.changes.push(\n    { key: \"system.traits.dr.all\", value: \"\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 0 },\n    { key: \"system.traits.dv.value\", value: \"force\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 0 },\n  );\n\n  addStatusEffectChange(effect, \"invisible\");\n\n  document.system[\"target\"][\"type\"] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.system.duration = { value: 1, units: \"min\" };\n  document.system.actionType = null;\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport { addStatusEffectChange, forceManualReaction } from \"../effects.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport logger from \"../../logger.js\";\n\nfunction dermineDiceString(ddb) {\n  const fighterClass = ddb.character.classes.find((klass) => klass.definition.name === \"Fighter\");\n  if (fighterClass) {\n    const combatSuperiority = fighterClass.classFeatures.find((feat) => feat.definition.name === \"Combat Superiority\");\n    if (combatSuperiority) {\n      return \"@scale.battle-master.combat-superiority-die\";\n    }\n  }\n  return \"1d6\";\n}\n\n// eslint-disable-next-line complexity\nexport async function maneuversEffect(ddb, character, document) {\n  const diceString = dermineDiceString(ddb);\n\n  logger.debug(`Generating effect for ${document.name}`);\n\n  const characterAbilities = character.flags.ddbimporter.dndbeyond.effectAbilities;\n  const ability = characterAbilities.str?.value > characterAbilities.dex?.value ? \"str\" : \"dex\";\n\n  const name = document.flags.ddbimporter?.originalName ?? document.name;\n  let effect = baseFeatEffect(document, document.name);\n  foundry.utils.setProperty(document, \"system.range.units\", \"\");\n  foundry.utils.setProperty(document, \"system.range.value\", null);\n  foundry.utils.setProperty(document, \"system.target.type\", \"self\");\n\n  // special durations\n  switch (name) {\n    case \"Maneuvers: Rally\": {\n      foundry.utils.setProperty(effect, \"duration.seconds\", 86400);\n      foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"longRest\"]);\n      break;\n    }\n    case \"Maneuvers: Brace\":\n    case \"Maneuvers: Riposte\": {\n      foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"1Attack:mwak\"]);\n      foundry.utils.setProperty(effect, \"duration.turns\", 2);\n      break;\n    }\n    case \"Maneuvers: Lunging Attack\":\n    case \"Maneuvers: Sweeping Attack\": {\n      foundry.utils.setProperty(effect, \"duration.turns\", 1);\n      foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"1Attack:mwak\"]);\n      break;\n    }\n    case \"Maneuvers: Quick Toss\": {\n      foundry.utils.setProperty(effect, \"duration.turns\", 1);\n      foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"1Attack:rwak\"]);\n      break;\n    }\n    case \"Maneuvers: Tactical Assessment\": {\n      foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"isSkill.inv\", \"isSkill.his\", \"isSkill.ins\"]);\n      break;\n    }\n    case \"Maneuvers: Commanding Presence\": {\n      foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"isSkill.itm\", \"isSkill.per\", \"isSkill.prf\"]);\n      break;\n    }\n    case \"Maneuvers: Ambush\": {\n      foundry.utils.setProperty(effect, \"duration.turns\", 1);\n      foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"isSkill.ste\"]);\n      break;\n    }\n    case \"Maneuvers: Distracting Strike\": {\n      foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"isAttacked\", \"turnStartSource\"]);\n      break;\n    }\n    case \"Maneuvers: Bait and Switch\": {\n      foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"turnStartSource\"]);\n      break;\n    }\n    case \"Maneuvers: Feinting Attack\": {\n      foundry.utils.setProperty(effect, \"duration.turns\", 1);\n      foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"1Attack\"]);\n      break;\n    }\n    case \"Maneuvers: Trip Attack\": {\n      foundry.utils.setProperty(document, \"system.duration.units\", \"inst\");\n      break;\n    }\n    case \"Maneuvers: Menacing Attack\":\n    case \"Maneuvers: Goading Attack\": {\n      foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"turnEndSource\"]);\n      break;\n    }\n    case \"Maneuvers: Grappling Strike\": {\n      foundry.utils.setProperty(effect, \"duration.turns\", 1);\n      foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"isSkill.ath\"]);\n      break;\n    }\n    case \"Maneuvers: Parry\": {\n      foundry.utils.setProperty(document, \"system.duration.units\", \"inst\");\n      foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"isDamaged\"]);\n      break;\n    }\n    // no default\n  }\n\n  const damageEffect = {\n    \"key\": \"system.bonuses.mwak.damage\",\n    \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n    \"value\": `+ ${diceString}`,\n    \"priority\": \"20\"\n  };\n  // damage effect\n  switch (name) {\n    case \"Maneuvers: Riposte\":\n    case \"Maneuvers: Brace\": {\n      // manual reaction types\n      document = forceManualReaction(document);\n      effect.changes.push(damageEffect);\n      document.effects.push(effect);\n      break;\n    }\n    case \"Maneuvers: Quick Toss\":\n    case \"Maneuvers: Lunging Attack\":\n    case \"Maneuvers: Feinting Attack\": {\n      effect.changes.push(damageEffect);\n      document.effects.push(effect);\n      break;\n    }\n    // no default\n  }\n\n  const rangedDamageEffect = {\n    \"key\": \"system.bonuses.rwak.damage\",\n    \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n    \"value\": `+ ${diceString}`,\n    \"priority\": \"20\"\n  };\n  // damage effect\n  switch (name) {\n    case \"Maneuvers: Commander’s Strike\":\n    case \"Maneuvers: Commander's Strike\": {\n      effect.changes.push(damageEffect);\n      effect.changes.push(rangedDamageEffect);\n      document.effects.push(effect);\n      break;\n    }\n    // no default\n  }\n\n  // other effects\n  switch (name) {\n    // advantage effect\n    case \"Maneuvers: Distracting Strike\":\n    case \"Maneuvers: Feinting Attack\": {\n      effect.changes.push(\n        {\n          \"key\": \"flags.midi-qol.advantage.attack.all\",\n          \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n          \"value\": \"1\",\n          \"priority\": \"20\"\n        }\n      );\n      document.effects.push(effect);\n      break;\n    }\n    // skill bonus\n    case \"Maneuvers: Commanding Presence\": {\n      [\"per\", \"itm\", \"prf\"].forEach((skill) => {\n        effect.changes.push(\n          {\n            \"key\": `system.skills.${skill}.bonuses.check`,\n            \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n            \"value\": `+ ${diceString}`,\n            \"priority\": \"20\"\n          }\n        );\n      });\n      document.effects.push(effect);\n      break;\n    }\n    case \"Maneuvers: Tactical Assessment\": {\n      [\"inv\", \"his\", \"ins\"].forEach((skill) => {\n        effect.changes.push(\n          {\n            \"key\": `system.skills.${skill}.bonuses.check`,\n            \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n            \"value\": `+ ${diceString}`,\n            \"priority\": \"20\"\n          }\n        );\n      });\n      document.effects.push(effect);\n      break;\n    }\n    case \"Maneuvers: Ambush\": {\n      effect.changes.push(\n        {\n          \"key\": \"system.skills.ste.bonuses.check\",\n          \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n          \"value\": `+ ${diceString}`,\n          \"priority\": \"20\"\n        },\n        {\n          \"key\": \"system.attributes.init.bonus\",\n          \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n          \"value\": `+ ${diceString}`,\n          \"priority\": \"20\"\n        }\n      );\n      document.effects.push(effect);\n      break;\n    }\n    case \"Maneuvers: Evasive Footwork\":\n    case \"Maneuvers: Bait and Switch\": {\n      effect.changes.push(\n        {\n          \"key\": \"system.attributes.ac.bonus\",\n          \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n          \"value\": `+ ${diceString}`,\n          \"priority\": \"20\"\n        }\n      );\n      document.effects.push(effect);\n      break;\n    }\n    case \"Maneuvers: Grappling Strike\": {\n      effect.changes.push(\n        {\n          \"key\": \"system.skills.ath.bonuses.check\",\n          \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n          \"value\": `+ ${diceString}`,\n          \"priority\": \"20\"\n        },\n      );\n      document.effects.push(effect);\n      break;\n    }\n    case \"Maneuvers: Menacing Attack\": {\n      addStatusEffectChange(effect, \"Frightened\", 20, true);\n      break;\n    }\n    case \"Maneuvers: Trip Attack\": {\n      addStatusEffectChange(effect, \"Prone\", 20, true);\n      break;\n    }\n    case \"Maneuvers: Parry\": {\n      foundry.utils.setProperty(document, \"system.activation.type\", \"reactiondamage\");\n      effect.changes.push(\n        {\n          \"key\": \"flags.midi-qol.DR.all\",\n          \"mode\": CONST.ACTIVE_EFFECT_MODES.ADD,\n          \"value\": \"1\",\n          \"priority\": \"20\"\n        }\n      );\n      break;\n    }\n    case \"Maneuvers: Rally\": {\n      await DDBMacros.setItemMacroFlag(document, \"feat\", \"maneuversRally.js\");\n      effect.changes.push(DDBMacros.generateMacroChange({ macroValues: `${diceString} @abilities.cha.mod`, macroType: \"feat\", macroName: \"maneuversRally.js\" }));\n      document.effects.push(effect);\n      break;\n    }\n    // no default\n  }\n  // flags.dnd5e.initiativeAdv\n\n  // set target\n  switch (name) {\n    case \"Maneuvers: Trip Attack\":\n    case \"Maneuvers: Maneuvering Attack\":\n    case \"Maneuvers: Goading Attack\":\n    case \"Maneuvers: Distracting Strike\":\n    case \"Maneuvers: Menacing Attack\":\n    case \"Maneuvers: Sweeping Attack\":\n    case \"Maneuvers: Disarming Attack\":\n    case \"Maneuvers: Pushing Attack\":\n    case \"Maneuvers: Rally\":\n    case \"Maneuvers: Bait and Switch\":\n    case \"Maneuvers: Commander’s Strike\":\n    case \"Maneuvers: Commander's Strike\": {\n      foundry.utils.setProperty(document, \"system.target.value\", 1);\n      foundry.utils.setProperty(document, \"system.target.type\", \"creature\");\n      break;\n    }\n    // no default\n  }\n\n  // set regular damage\n  switch (name) {\n    case \"Maneuvers: Parry\":\n    case \"Maneuvers: Trip Attack\":\n    case \"Maneuvers: Maneuvering Attack\":\n    case \"Maneuvers: Goading Attack\":\n    case \"Maneuvers: Distracting Strike\":\n    case \"Maneuvers: Menacing Attack\":\n    case \"Maneuvers: Sweeping Attack\":\n    case \"Maneuvers: Disarming Attack\":\n    case \"Maneuvers: Pushing Attack\": {\n      foundry.utils.setProperty(document, \"system.damage.parts\", [[diceString]]);\n      break;\n    }\n    // no default\n  }\n\n  switch (name) {\n    case \"Maneuvers: Precision Attack\": {\n      foundry.utils.setProperty(document, \"system.damage.parts\", [[diceString, \"midi-none\"]]);\n      break;\n    }\n    // no default\n  }\n\n  // saves\n  switch (name) {\n    case \"Maneuvers: Trip Attack\":\n    case \"Maneuvers: Disarming Attack\":\n    case \"Maneuvers: Pushing Attack\": {\n      foundry.utils.setProperty(effect, \"flags.midiProperties.fulldam\", true);\n      foundry.utils.setProperty(document, \"system.damage.parts\", [[diceString]]);\n      foundry.utils.setProperty(document, \"system.save\", { ability: \"str\", dc: null, \"scaling\": ability });\n      break;\n    }\n    case \"Maneuvers: Menacing Attack\":\n    case \"Maneuvers: Goading Attack\": {\n      foundry.utils.setProperty(effect, \"flags.midiProperties.fulldam\", true);\n      foundry.utils.setProperty(document, \"system.damage.parts\", [[diceString]]);\n      foundry.utils.setProperty(document, \"system.save\", { ability: \"wis\", dc: null, \"scaling\": ability });\n      break;\n    }\n    // no default\n  }\n\n  return document;\n}\n\n","import DDBMacros from \"../DDBMacros.js\";\n\nexport async function mantleOfInspirationEffect(document) {\n  await DDBMacros.setItemMacroFlag(document, \"feat\", \"mantleOfInspiration.js\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"feat\", \"mantleOfInspiration.js\", [\"preTargeting\"]);\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function mindLinkEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n  effect.changes.push(\n    { key: \"system.traits.languages.custom\", value: \"Telepathy\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 10 },\n  );\n\n  effect.duration.seconds = 3600;\n  effect.duration.hour = 1;\n\n  document.effects.push(effect);\n  return document;\n}\n\n","import { addStatusEffectChange } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function momentaryStasis(document) {\n  let effect = baseSpellEffect(document, document.name);\n  addStatusEffectChange(effect, \"Incapacitated\", 20, true);\n  foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"isDamaged\", \"turnEndSource\"]);\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function pactMagicEffect(document) {\n\n  if (foundry.utils.getProperty(document, \"flags.ddbimporter.subclass\")?.startsWith(\"Order of the Profane Soul\")) {\n    const effect = baseFeatEffect(document, `${document.name} Level`, { transfer: true });\n    effect.changes.push(\n      {\n        key: \"system.spells.pact.level\",\n        value: \"@scale.order-of-the-profane-soul.pact-level\",\n        mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n        priority: \"20\",\n      },\n    );\n    document.effects.push(effect);\n\n  }\n\n  return document;\n}\n\n\n","export function paladinDefaultAuraEffect(document) {\n  if (!game.modules.get(\"ActiveAuras\")?.active) return document;\n  document.effects.forEach((effect) => {\n    if (effect.name.includes(\" - Passive\")) {\n      // const distance = document.flags.ddbimporter?.dndbeyond?.levelScale?.fixedValue ?? 10;\n      effect.flags.ActiveAuras = {\n        aura: \"Allies\",\n        radius: `@scale.paladin.${document.name.toLowerCase().replaceAll(\" \", \"-\")}`,\n        isAura: true,\n        inactive: false,\n        hidden: false,\n        displayTemp: true,\n      };\n      effect.statuses.push(effect.name);\n      foundry.utils.setProperty(effect, \"flags.dae.stackable\", \"noneName\");\n    }\n  });\n  return document;\n}\n\n","import { addStatusEffectChange } from \"../effects.js\";\nimport { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function patientDefenseEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n  addStatusEffectChange(effect, \"Dodge\", 20, true);\n\n  document.effects.push(effect);\n  return document;\n}\n","\nimport { baseFeatEffect } from \"../specialFeats.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nasync function commonPiercer(document) {\n  document.system.target = {\n    value: null,\n    width: null,\n    units: \"\",\n    type: \"self\",\n  };\n  document.system.range = {\n    value: null,\n    long: null,\n    units: \"self\",\n  };\n  await DDBMacros.setItemMacroFlag(document, \"feat\", \"piercer.js\");\n  return document;\n};\n\nexport async function piercerCriticalEffect(document) {\n  const effect = baseFeatEffect(document, document.name, { transfer: true });\n  effect.changes.push(\n    {\n      key: \"flags.dnd5e.DamageBonusMacro\",\n      value: DDBMacros.generateItemMacroValue({ macroType: \"feat\", macroName: \"piercer.js\", document }),\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    },\n  );\n  document.effects.push(effect);\n\n  await commonPiercer(document);\n\n  return document;\n}\n\n\nexport async function piercerRerollEffect(document) {\n  const effect = baseFeatEffect(document, document.name, { transfer: true });\n  effect.changes.push(\n    DDBMacros.generateOnUseMacroChange({ macroPass: \"postDamageRoll\", macroType: \"feat\", macroName: \"piercer.js\", document }),\n  );\n  document.effects.push(effect);\n\n  await commonPiercer(document);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function planarWarriorEffect(document) {\n  await DDBMacros.setItemMacroFlag(document, \"feat\", \"planarWarrior.js\");\n\n  let effect = baseFeatEffect(document, \"Marked by Planar Warrior\");\n\n  foundry.utils.setProperty(effect, \"duration.turns\", 1);\n  DDBMacros.setMidiOnUseMacroFlag(document, \"feat\", \"planarWarrior.js\", [\"preItemRoll\", \"preActiveEffects\"]);\n\n  document.effects.push(effect);\n\n  document.system.target = {\n    value: 1,\n    width: null,\n    units: \"\",\n    type: \"creature\",\n  };\n  document.system.range = {\n    value: 30,\n    long: null,\n    units: \"ft\",\n  };\n  document.system.damage = {\n    parts: [],\n    versatile: \"\",\n    value: \"\",\n  };\n\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\n\nexport function potentCantripEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  effect.changes.push(\n    { key: \"flags.midi-qol.potentCantrip\", value: \"1\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 20 },\n  );\n  document.effects.push(effect);\n  return document;\n}\n\n","import { baseItemEffect } from \"../effects.js\";\n\nexport function powerfulBuild (document) {\n  let effect = baseItemEffect(document, document.name);\n  effect.changes.push(\n    { key: \"flags.dnd5e.powerfulBuild\", value: \"1\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 1 },\n  );\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function radiantSoulEffect(document) {\n\n  if (document.flags.ddbimporter.type == \"race\") {\n    let effect = baseFeatEffect(document, document.name);\n\n    effect.changes.push(\n      {\n        key: \"data.attributes.movement.fly\",\n        mode: CONST.ACTIVE_EFFECT_MODES.UPGRADE,\n        value: \"30\",\n        priority: \"20\",\n      },\n      {\n        key: \"flags.midi-qol.optional.radiantsoul.label\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: `${document.name} Bonus Damage`,\n        priority: \"20\",\n      },\n      {\n        key: \"flags.midi-qol.optional.radiantsoul.count\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: \"each-round\",\n        priority: \"20\",\n      },\n      {\n        key: \"flags.midi-qol.optional.radiantsoul.damage.all\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: document.name === \"Celestial Revelation (Radiant Soul)\" ? \"+@prof[radiant]\" : \"+@details.level[radiant]\",\n        priority: \"20\",\n      }\n    );\n    effect.duration = {\n      startTime: null,\n      seconds: null,\n      rounds: 10,\n      turns: null,\n      startRound: null,\n      startTurn: null,\n    };\n\n    document.effects.push(effect);\n\n    document.system[\"target\"][\"type\"] = \"self\";\n    document.system.range = { value: null, units: \"self\", long: null };\n    document.system.actionType = \"other\";\n\n  } else if (document.flags.ddbimporter.type == \"class\") {\n    let effect = baseFeatEffect(document, document.name, { transfer: true });\n    effect.changes.push(\n      {\n        key: \"flags.dnd5e.DamageBonusMacro\",\n        value: DDBMacros.generateItemMacroValue({ macroType: \"feat\", macroName: \"radiantSoul.js\", document }),\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        priority: \"20\",\n      },\n    );\n\n    await DDBMacros.setItemMacroFlag(document, \"feat\", \"radiantSoul.js\");\n    foundry.utils.setProperty(document, \"system.activation.type\", \"special\");\n\n    document.effects.push(effect);\n  }\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function rageEffect(document) {\n  let effect = baseFeatEffect(document, `${document.name}`);\n\n  effect.changes.push(\n    {\n      key: \"system.bonuses.mwak.damage\",\n      value: \"+ @scale.barbarian.rage\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 0,\n    },\n    {\n      key: \"system.traits.dr.value\",\n      value: \"piercing\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 0,\n    },\n    {\n      key: \"system.traits.dr.value\",\n      value: \"slashing\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 20,\n    },\n    {\n      key: \"system.traits.dr.value\",\n      value: \"bludgeoning\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 20,\n    },\n    {\n      key: \"flags.midi-qol.advantage.ability.save.str\",\n      value: \"1\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    },\n    {\n      key: \"flags.midi-qol.advantage.ability.check.str\",\n      value: \"1\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    },\n    {\n      key: \"macro.tokenMagic\",\n      value: \"outline\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 10,\n    },\n  );\n  effect.duration = {\n    startTime: null,\n    seconds: 60,\n    rounds: null,\n    turns: null,\n    startRound: null,\n    startTurn: null,\n  };\n  document.system.damage = {\n    parts: [],\n    versatile: \"\",\n    value: \"\",\n  };\n  document.system.target = {\n    value: null,\n    width: null,\n    units: \"\",\n    type: \"self\",\n  };\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport { generateATLChange, effectModules } from \"../effects.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function runeCarverEffect(document) {\n\n  let baseEffect = baseFeatEffect(document, document.name, { transfer: true });\n\n  switch (document.name) {\n    case \"Rune Carver: Cloud Rune\": {\n      baseEffect.changes.push(\n        {\n          key: \"flags.midi-qol.advantage.skill.dec\",\n          mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n          value: \"1\",\n          priority: \"20\",\n        },\n        {\n          key: \"flags.midi-qol.advantage.skill.slt\",\n          mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n          value: \"1\",\n          priority: \"20\",\n        },\n      );\n      break;\n    }\n    case \"Rune Carver: Fire Rune\": {\n      // Missing: prof bonus expertise for tool\n      break;\n    }\n    case \"Rune Carver: Frost Rune\": {\n      baseEffect.changes.push(\n        {\n          key: \"flags.midi-qol.advantage.skill.ani\",\n          mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n          value: \"1\",\n          priority: \"20\",\n        },\n        {\n          key: \"flags.midi-qol.advantage.skill.itm\",\n          mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n          value: \"1\",\n          priority: \"20\",\n        },\n      );\n      break;\n    }\n    case \"Rune Carver: Stone Rune\": {\n      baseEffect.changes.push(\n        {\n          key: \"flags.midi-qol.advantage.skill.ins\",\n          mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n          value: \"1\",\n          priority: \"20\",\n        },\n        {\n          key: \"system.attributes.senses.darkvision\",\n          value: \"120\",\n          mode: CONST.ACTIVE_EFFECT_MODES.UPGRADE,\n          priority: 20,\n        },\n      );\n      if (effectModules().atlInstalled) {\n        baseEffect.changes.push(\n          generateATLChange(\"ATL.sight.range\", CONST.ACTIVE_EFFECT_MODES.UPGRADE, 120, 5),\n          generateATLChange(\"ATL.sight.visionMode\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, \"darkvision\", 5),\n        );\n      } else {\n        await DDBMacros.setItemMacroFlag(document, \"feat\", \"darkvision.js\");\n        baseEffect.changes.push(DDBMacros.generateMacroChange({ macroType: \"spell\", macroName: \"darkvision.js\" }));\n      }\n      break;\n    }\n    case \"Rune Carver: Hill Rune\": {\n      baseEffect.changes.push(\n        {\n          key: \"system.traits.dr.value\",\n          mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n          value: \"poison\",\n          priority: \"20\",\n        },\n      );\n      // Missing : advantage of saving throws against being poisoned\n      break;\n    }\n    case \"Rune Carver: Storm Rune\": {\n      baseEffect.changes.push(\n        {\n          key: \"flags.midi-qol.advantage.skill.arc\",\n          mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n          value: \"1\",\n          priority: \"20\",\n        },\n      );\n      // Missing : can't be surprised\n\n      break;\n    }\n    // no default\n  }\n\n  if (baseEffect.changes.length > 0) {\n    foundry.utils.setProperty(document, \"system.target.type\", \"self\");\n    foundry.utils.setProperty(document, \"system.range.units\", \"self\");\n    foundry.utils.setProperty(document, \"system.range.value\", \"\");\n    foundry.utils.setProperty(document, \"system.actionType\", null);\n    document.effects.push(baseEffect);\n  }\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport { generateATLChange, baseEnchantmentEffect } from \"../effects.js\";\n\nexport function sacredWeaponEffect(document) {\n  if (document.system.actionType === null) return document;\n  const name = document.name.split(\":\").pop();\n  document.system.actionType = \"ench\";\n\n  document.system.damage.parts = [];\n  document.system.chatFlavor = \"\";\n\n  let enchantmentEffect = baseEnchantmentEffect(document, `${name}`);\n  enchantmentEffect.changes.push(\n    {\n      key: \"name\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: `{}, (${name})`,\n      priority: 20,\n    },\n    {\n      key: \"system.properties\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"mgc\",\n      priority: 20,\n    },\n    {\n      key: \"system.attack.bonus\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"@abilities.cha.mod\",\n      priority: 20,\n    },\n  );\n  enchantmentEffect.description = `The weapon shines with Sacred Energy.`;\n  foundry.utils.setProperty(enchantmentEffect, \"duration.seconds\", 60);\n\n  if (CONFIG.DDBI.EFFECT_CONFIG.MODULES.installedModules.atlInstalled) {\n    let lightEffect = baseFeatEffect(document, `${name} (Light Effect)`, { transfer: false });\n    lightEffect.changes.push(generateATLChange(\"ATL.light.dim\", CONST.ACTIVE_EFFECT_MODES.UPGRADE, '5'));\n    lightEffect.changes.push(generateATLChange(\"ATL.light.color\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, '#ffffff'));\n    lightEffect.changes.push(generateATLChange(\"ATL.light.alpha\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, '0.25'));\n    const lightAnimation = '{\"type\": \"sunburst\", \"speed\": 2,\"intensity\": 4}';\n    lightEffect.changes.push(generateATLChange(\"ATL.light.animation\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, lightAnimation));\n    foundry.utils.setProperty(lightEffect, \"duration.seconds\", 60);\n    lightEffect._id = foundry.utils.randomID();\n    document.effects.push(lightEffect);\n    foundry.utils.setProperty(enchantmentEffect, \"flags.dnd5e.enchantment.riders.effect\", [lightEffect._id]);\n  } else {\n    const macroToggle = `<br><p>[[/ddbifunc functionName=\"sacredWeaponLight\" functionType=\"feat\"]]{Toggle Sacred Weapon Light}</div></p>`;\n    document.system.description.value += macroToggle;\n    if (document.system.description.chat !== \"\") document.system.description.chat += macroToggle;\n  }\n\n  document.effects.push(enchantmentEffect);\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function savageAttackerEffect(document) {\n  if (document.system.actionType === null) return document;\n  let effect = baseFeatEffect(document, document.name, { transfer: true });\n\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.optional.savageAttacker.label\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: `${document.name} - Weapon Damage Reroll`,\n      priority: \"5\",\n    },\n    {\n      key: \"flags.midi-qol.optional.savageAttacker.count\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"turn\",\n      priority: \"5\",\n    },\n    {\n      key: \"flags.midi-qol.optional.savageAttacker.damage.mwak\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"reroll-kh\",\n      priority: \"5\",\n    },\n  );\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\n\nexport function sculptSpellsEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  effect.changes.push(\n    { key: \"flags.midi-qol.sculptSpell\", value: \"1\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 10 },\n  );\n  document.effects.push(effect);\n  return document;\n}\n\n","import { baseEffect } from \"../effects.js\";\n\nexport function sharpShooterEffect(document) {\n  let effect = baseEffect(document, document.name, { transfer: false });\n\n  effect.changes.push(\n    {\n      key: \"system.bonuses.rwak.attack\",\n      value: \"-5\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 30,\n    },\n    {\n      key: \"system.bonuses.rwak.damage\",\n      value: \"+10\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 30,\n    },\n  );\n\n  foundry.utils.setProperty(effect, \"flags.dae.showIcon\", true);\n\n  document.effects.push(effect);\n\n  let rageEffect = baseEffect(document, `${document.name} - Range Adjustment`, { transfer: true });\n\n  rageEffect.changes.push(\n    // changes range\n    {\n      key: \"flags.midi-qol.sharpShooter\",\n      value: \"1\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 30,\n    },\n    {\n      key: \"flags.dnd5e.helpersIgnoreCover\",\n      value: \"2\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 30,\n    },\n  );\n\n  document.effects.push(rageEffect);\n  document.system.activation = {\n    \"type\": \"none\",\n    \"cost\": 1,\n    \"condition\": \"\"\n  };\n\n  document.system[\"target\"][\"type\"] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.system.actionType = \"other\";\n\n  foundry.utils.setProperty(document, \"flags.midi-qol.effectActivation\", false);\n  foundry.utils.setProperty(document, \"flags.midi-qol.removeAttackDamageButtons\", false);\n  foundry.utils.setProperty(document, \"flags.midiProperties.toggleEffect\", true);\n\n  return document;\n}\n","import parseTemplateString from \"../../lib/DDBTemplateStrings.js\";\nimport { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function shiftEffect(ddb, character, document) {\n  const isBeasthide = ddb.character.options.race.find((trait) => trait.definition.name === \"Beasthide\");\n  const isSwiftstride = ddb.character.options.race.find((trait) => trait.definition.name === \"Swiftstride\");\n  const isWildhunt = ddb.character.options.race.find((trait) => trait.definition.name === \"Wildhunt\");\n  const isLongtooth = ddb.character.options.race.find((trait) => trait.definition.name === \"Longtooth\");\n\n  let effect = baseFeatEffect(document, `${document.name}`);\n\n  if (isBeasthide) {\n    document.system.damage.parts[0][0] = `1d6 + ${document.system.damage.parts[0][0]}`;\n    effect.changes.push(\n      {\n        key: \"system.attributes.ac.bonus\",\n        value: \"+ 1\",\n        mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n        priority: 20,\n      },\n    );\n    foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n    foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n    const description = parseTemplateString(ddb, character, isBeasthide.definition.description, isBeasthide.definition).text;\n    document.system.description.value += `<h2>Beasthide</h2>\\n${description}`;\n    document.effects.push(effect);\n  } else if (isSwiftstride) {\n    effect.changes.push(\n      {\n        key: \"system.attributes.movement.walk\",\n        mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n        value: \"+ 10\",\n        priority: \"20\",\n      },\n    );\n    foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n    foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n    const description = parseTemplateString(ddb, character, isSwiftstride.definition.description, isSwiftstride.definition).text;\n    document.system.description.value += `<h2>Swiftstride</h2>\\n${description}`;\n    document.effects.push(effect);\n  } else if (isWildhunt) {\n    effect.changes.push(\n      {\n        key: \"flags.midi-qol.advantage.ability.check.wis\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: \"1\",\n        priority: \"20\",\n      },\n    );\n    foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n    foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n    const description = parseTemplateString(ddb, character, isWildhunt.definition.description, isWildhunt.definition).text;\n    document.system.description.value += `<h2>Wildhunt</h2>\\n${description}`;\n    document.effects.push(effect);\n  } else if (isLongtooth) {\n    const description = parseTemplateString(ddb, character, isLongtooth.definition.description, isLongtooth.definition).text;\n    document.system.description.value += `<h2>Longtooth</h2>\\n${description}`;\n  }\n\n  return document;\n}\n","\nimport { baseFeatEffect } from \"../specialFeats.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function slasherCriticalEffect(document) {\n  const effect = baseFeatEffect(document, document.name, { transfer: true });\n  effect.changes.push(\n    {\n      key: \"flags.dnd5e.DamageBonusMacro\",\n      value: DDBMacros.generateItemMacroValue({ macroType: \"feat\", macroName: \"slasherCritical.js\", document }),\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    },\n  );\n  document.effects.push(effect);\n  document.system.actionType = null;\n  await DDBMacros.setItemMacroFlag(document, \"feat\", \"slasherCritical.js\");\n\n  return document;\n}\n","\nimport { baseFeatEffect } from \"../specialFeats.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function slasherReduceSpeedEffect(document) {\n  const effect = baseFeatEffect(document, document.name, { transfer: true });\n  effect.changes.push(\n    {\n      key: \"flags.dnd5e.DamageBonusMacro\",\n      value: DDBMacros.generateItemMacroValue({ macroType: \"feat\", macroName: \"slasherReduceSpeed.js\", document }),\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    },\n  );\n  document.effects.push(effect);\n  document.system.actionType = null;\n  await DDBMacros.setItemMacroFlag(document, \"feat\", \"slasherReduceSpeed.js\");\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\n// this one is a bit different, the macro is triggered by midi-qol and applies effects to the actor\n// the Marked effect gets applied to the target\nexport async function slayersPreyEffect(document) {\n  let effect = baseFeatEffect(document, `Marked by ${document.name}`, { transfer: true });\n  effect.changes.push(\n    {\n      key: \"flags.dae.onUpdateSource\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: document.name,\n      priority: 20,\n    },\n  );\n  effect.duration.seconds = 60;\n  document.effects.push(effect);\n\n  let damageBonusEffect = baseFeatEffect(document, document.name, { transfer: true });\n  damageBonusEffect.changes.push({\n    key: \"flags.dnd5e.DamageBonusMacro\",\n    value: DDBMacros.generateItemMacroValue({ macroType: \"feat\", macroName: \"slayersPrey.js\", document }),\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    priority: 20,\n  });\n  document.effects.push(damageBonusEffect);\n\n  await DDBMacros.setItemMacroFlag(document, \"feat\", \"slayersPrey.js\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"feat\", \"slayersPrey.js\", [\"postActiveEffects\"]);\n\n  foundry.utils.setProperty(document, \"system.actionType\", \"util\");\n  document.system.damage.parts = [];\n  document.system.target = {\n    value: 1,\n    width: null,\n    units: \"\",\n    type: \"creature\",\n  };\n  document.system.range = {\n    value: null,\n    long: null,\n    units: \"\",\n  };\n\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function squireOfSolamniaEffect(document) {\n  let effect = baseItemEffect(document, document.name, { transfer: false });\n  await DDBMacros.setItemMacroFlag(document, \"feat\", \"squireOfSolamnia.js\");\n  effect.changes.push(\n    DDBMacros.generateMacroChange({ macroValues: `\"${document.name}\"`, macroType: \"feat\", macroName: \"squireOfSolamnia.js\" }),\n    DDBMacros.generateOnUseMacroChange({ macroPass: \"postAttackRoll\", macroType: \"feat\", macroName: \"squireOfSolamnia.js\", document }),\n    {\n      key: \"flags.midi-qol.advantage.attack.mwak\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"1\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.advantage.attack.rwak\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"1\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.dnd5e.DamageBonusMacro\",\n      value: DDBMacros.generateItemMacroValue({ macroType: \"feat\", macroName: \"squireOfSolamnia.js\", document }),\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    }\n  );\n  foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"1Attack\"]);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.effects.push(effect);\n\n  document.system.damage.parts = [];\n  document.system.actionType = null;\n\n  return document;\n}\n","import { effectModules } from \"../effects.js\";\nimport { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function steadyAimEffect(document) {\n  if (effectModules().midiQolInstalled) {\n    let effect = baseFeatEffect(document, document.name);\n    effect.changes.push(\n      {\n        key: \"flags.midi-qol.advantage.attack.all\",\n        value: \"1\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        priority: 30,\n      },\n    );\n    effect.flags.dae.specialDuration = [\"1Attack\"];\n    foundry.utils.setProperty(effect, \"flags.dae.stackable\", \"noneName\");\n    foundry.utils.setProperty(effect, \"duration.turns\", 1);\n\n    document.system[\"target\"][\"type\"] = \"self\";\n    document.system.range = { value: null, units: \"self\", long: null };\n    document.system.actionType = null;\n    // document.system.duration = {\n    //   value: 1,\n    //   units: \"turn\",\n    // };\n    document.effects.push(effect);\n  }\n\n  let moveEffect = baseFeatEffect(document, `${document.name} Movement Restriction`);\n  moveEffect.changes.push(\n    {\n      key: 'data.attributes.movement.all',\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: '0',\n      priority: \"40\",\n    },\n  );\n  moveEffect.duration = {\n    startTime: null,\n    seconds: 12,\n    rounds: 2,\n    turns: null,\n    startRound: null,\n    startTurn: null,\n  };\n  moveEffect.flags.dae.specialDuration = [\"turnStartSource\"];\n  foundry.utils.setProperty(moveEffect, \"flags.dae.stackable\", \"noneName\");\n  document.effects.push(moveEffect);\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport { addStatusEffectChange, effectModules } from \"../effects.js\";\n\nexport function stoneRuneEffect(document) {\n  foundry.utils.setProperty(document, \"system.target.value\", 1);\n  foundry.utils.setProperty(document, \"system.target.type\", \"creature\");\n  foundry.utils.setProperty(document, \"system.range.units\", \"ft\");\n  foundry.utils.setProperty(document, \"system.range.value\", 30);\n\n  let bonusEffect = baseFeatEffect(document, `${document.name} (Charm Effect)`);\n  bonusEffect.statuses.push(`${document.name} (Charm Effect)`);\n  foundry.utils.setProperty(bonusEffect, \"duration.seconds\", 60);\n  addStatusEffectChange(bonusEffect, \"Charmed\", 20, true);\n  addStatusEffectChange(bonusEffect, \"Incapacitated\", 20, true);\n\n  if (effectModules().midiQolInstalled) {\n    bonusEffect.changes.push(\n      {\n        key: \"flags.midi-qol.OverTime\",\n        mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n        value: `label=${document.name} (End of Turn Save),turn=end,saveDC=@attributes.spelldc,saveAbility=${document.system.save.ability},savingThrow=true,saveMagic=true,saveRemove=true,killAnim=true`,\n        priority: \"20\",\n      }\n    );\n  }\n\n  document.effects.push(bonusEffect);\n\n  return document;\n}\n","\nimport { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function stonesEnduranceEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.DR.all\",\n    value: \"[[1d12 + @abilities.con.mod]]\",\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n    priority: 20,\n  });\n  effect.flags.dae.specialDuration = [\"1Reaction\"];\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  foundry.utils.setProperty(document, \"system.activation.type\", \"reactiondamage\");\n\n  document.system[\"target\"][\"type\"] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.system.damage.parts = [];\n  document.system.ability = null;\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function stormRuneEffect(document) {\n\n  let baseEffect = baseFeatEffect(document, document.name);\n  foundry.utils.setProperty(baseEffect, \"duration.seconds\", 60);\n  foundry.utils.setProperty(baseEffect, \"flags.dae.stackable\", \"noneName\");\n\n  foundry.utils.setProperty(document, \"system.target.type\", \"self\");\n  foundry.utils.setProperty(document, \"system.range.units\", \"self\");\n  foundry.utils.setProperty(document, \"system.range.value\", \"\");\n  foundry.utils.setProperty(document, \"system.actionType\", null);\n  document.effects.push(baseEffect);\n\n  let bonusEffect = baseFeatEffect(document, `${document.name} (Prophetic State)`);\n  foundry.utils.setProperty(bonusEffect, \"duration.seconds\", 60);\n  foundry.utils.setProperty(bonusEffect, \"flags.dae.stackable\", \"noneName\");\n  bonusEffect.statuses.push(\"Prophetic State\");\n\n  // Missing effect for Prophetic State to enforce adv or disvantage\n\n  document.effects.push(bonusEffect);\n\n\n  return document;\n}\n","import { effectModules } from \"../effects.js\";\n\nexport function unarmoredMovementEffect(document) {\n  document.effects.forEach((effect) => {\n    if (effect.name.includes(\"Passive\") && effectModules().daeInstalled) {\n      effect.changes = [\n        {\n          key: \"system.attributes.movement.walk\",\n          value: `@scale.monk.unarmored-movement.value`,\n          mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n          priority: 20,\n        },\n      ];\n    }\n  });\n  return document;\n}\n\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function vedalkenDispassionEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.advantage.ability.save.cha\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"1\",\n      priority: 20,\n    },\n    {\n      key: \"flags.midi-qol.advantage.ability.save.wis\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"1\",\n      priority: 20,\n    },\n    {\n      key: \"flags.midi-qol.advantage.ability.save.int\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"1\",\n      priority: 20,\n    }\n  );\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function vigilantBlessingEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.dnd5e.initiativeAdv\",\n    value: \"1\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    priority: 30,\n  });\n  effect.flags.dae.specialDuration = [\"Initiative\"];\n  document.system[\"target\"][\"type\"] = \"creature\";\n  document.system.actionType = null;\n  document.effects.push(effect);\n  return document;\n}\n","import { effectModules } from \"../effects.js\";\nimport { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function visageOfTheAstralSelfEffect(document) {\n  let effect = baseFeatEffect(document, `${document.name}`);\n\n  effect.changes.push(\n    {\n      key: \"system.attributes.senses.truesight\",\n      value: \"120\",\n      mode: CONST.ACTIVE_EFFECT_MODES.UPGRADE,\n      priority: 20,\n    },\n  );\n\n  if (effectModules().midiQolInstalled) {\n    effect.changes.push(\n      {\n        key: \"flags.midi-qol.advantage.skill.itm\",\n        value: `1`,\n        mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n        priority: 20,\n      },\n      {\n        key: \"flags.midi-qol.advantage.skill.ins\",\n        value: `1`,\n        mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n        priority: 20,\n      },\n      {\n        key: \"ATL.sight.visionMode\",\n        value: `basic`,\n        mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n        priority: 20,\n      },\n      {\n        key: \"ATL.sight.range\",\n        value: `120`,\n        mode: CONST.ACTIVE_EFFECT_MODES.UPGRADE,\n        priority: 20,\n      },\n    );\n  }\n  effect.duration = {\n    startTime: null,\n    seconds: 360,\n    rounds: null,\n    turns: null,\n    startRound: null,\n    startTurn: null,\n  };\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n\n  document.effects.push(effect);\n\n  document.system[\"target\"][\"type\"] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.system.actionType = null;\n  document.system.duration = {\n    value: 10,\n    units: \"minute\",\n  };\n\n\n  return document;\n}\n","import { baseItemEffect, forceManualReaction, effectModules } from \"../effects.js\";\n\nexport function warCasterEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  effect.description = document.system.description.value;\n  effect.changes.push(\n    {\n      key: \"system.attributes.concentration.roll.mode\",\n      value: \"1\",\n      mode: CONST.ACTIVE_EFFECT_MODES.UPGRADE,\n      priority: 10\n    },\n  );\n  if (effectModules().midiQolInstalled) {\n    document = forceManualReaction(document);\n  }\n  document.effects.push(effect);\n  return document;\n}\n\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function furyOfTheSmallEffect(document) {\n  await DDBMacros.setItemMacroFlag(document, \"feat\", \"furyOfTheSmall.js\");\n\n  // let macroEffect = baseFeatEffect(document, `${document.name} (Size Checker)`, { transfer: true });\n  DDBMacros.setMidiOnUseMacroFlag(document, \"feat\", \"furyOfTheSmall.js\", [\"preDamageRoll\"]);\n  // document.effects.push(macroEffect);\n\n  let effect = baseFeatEffect(document, document.name, { transfer: true });\n  if (document.system.description.value.includes(\"once per turn\")) {\n    effect.changes.push(\n      {\n        key: \"flags.midi-qol.optional.smallFury.damage.all\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: \"(@prof)\",\n        priority: \"20\",\n      },\n      {\n        key: \"flags.midi-qol.optional.smallFury.label\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: `${document.name} (Only use on targets larger than you)`,\n        priority: \"20\",\n      },\n      {\n        key: \"flags.midi-qol.optional.smallFury.count\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: \"turn\",\n        priority: \"20\",\n      },\n      {\n        key: \"flags.midi-qol.optional.smallFury.countAlt\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: `ItemUses.${document.name}`,\n        priority: \"20\",\n      },\n    );\n  } else {\n    effect.changes.push(\n      {\n        key: \"flags.midi-qol.optional.smallFury.damage.all\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: \"(@details.level)\",\n        priority: \"20\",\n      },\n      {\n        key: \"flags.midi-qol.optional.smallFury.label\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: `${document.name} (Only use on targets larger than you)`,\n        priority: \"20\",\n      },\n      {\n        key: \"flags.midi-qol.optional.smallFury.count\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: `ItemUses.${document.name}`,\n        priority: \"20\",\n      },\n    );\n  }\n  document.effects.push(effect);\n  document.system.damage = {\n    parts: [],\n    versatile: \"\",\n    value: \"\",\n  };\n  document.system.duration.units = \"perm\";\n  document.system[\"target\"][\"type\"] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n\n  return document;\n}\n","import { addStatusEffectChange } from \"../effects.js\";\nimport { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function intimidatingPresenceEffect(document) {\n  const effect = baseFeatEffect(document, document.name);\n  addStatusEffectChange(effect, \"Frightened\", 20, true);\n  foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"turnEndSource\"]);\n  effect.duration.seconds = 12;\n  effect.duration.turns = 2;\n  document.effects.push(effect);\n\n  // document.system.activation.condition = \"!target.effects.some((e)=> e.name?.toLowerCase().includes('blind') || e.name?.toLowerCase().includes('deaf'))\";\n  foundry.utils.setProperty(document, \"flags.midi-qol.effectCondition\", \"!target.effects.some((e)=> e.name?.toLowerCase().includes('blind') || e.name?.toLowerCase().includes('deaf'))\");\n  foundry.utils.setProperty(document.flags, \"midi-qol.effectActivation\", true);\n  document.system.duration.units = \"perm\";\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function shieldingStormEffect(ddb, document) {\n\n  const isDesert = ddb.character.actions.class.some((a) => a.name === \"Storm Aura: Desert\");\n  const isSea = ddb.character.actions.class.some((a) => a.name === \"Storm Aura: Sea\");\n  const isTundra = ddb.character.actions.class.some((a) => a.name === \"Storm Aura: Tundra\");\n\n  const damageType = isDesert\n    ? \"fire\"\n    : isSea\n      ? \"lightning\"\n      : isTundra\n        ? \"cold\"\n        : \"\";\n\n  let effect = baseFeatEffect(document, `${document.name} Aura`, { transfer: true });\n  effect.changes.push({\n    \"key\": \"system.traits.dr.value\",\n    \"mode\": CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    \"value\": damageType,\n    \"priority\": 20\n  });\n\n  effect.flags.ActiveAuras = {\n    aura: \"Allies\",\n    radius: \"10\",\n    isAura: true,\n    ignoreSelf: true,\n    inactive: false,\n    hidden: false,\n    displayTemp: true,\n  };\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport async function stormSoulEffect(ddb, document) {\n  const isDesert = document.name.endsWith(\"Desert\")\n    || ddb.character.actions.class.some((a) => a.name === \"Storm Aura: Desert\");\n  const isSea = document.name.endsWith(\"Sea\")\n    || ddb.character.actions.class.some((a) => a.name === \"Storm Aura: Sea\");\n  const isTundra = document.name.endsWith(\"Tundra\")\n    || ddb.character.actions.class.some((a) => a.name === \"Storm Aura: Tundra\");\n\n  let effect = baseFeatEffect(document, `${document.name}`, { transfer: true });\n\n  const damageType = isDesert\n    ? \"fire\"\n    : isSea\n      ? \"lightning\"\n      : isTundra\n        ? \"cold\"\n        : \"\";\n\n  effect.changes.push(\n    {\n      key: \"system.traits.dr.value\",\n      value: damageType,\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    },\n  );\n\n  if (isSea) {\n    effect.changes.push(\n      {\n        key: \"system.attributes.movement.swim\",\n        value: \"30\",\n        mode: CONST.ACTIVE_EFFECT_MODES.UPGRADE,\n        priority: 20,\n      },\n    );\n  }\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { addStatusEffectChange } from \"../effects.js\";\nimport { baseFeatEffect } from \"../specialFeats.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function ragingStormSeaEffect(document) {\n\n  await DDBMacros.setItemMacroFlag(document, \"feat\", \"ragingStormSea.js\");\n\n  const effect = baseFeatEffect(document, document.name);\n  addStatusEffectChange(effect, \"Prone\", 20, true);\n  document.effects.push(effect);\n\n  const evaluationEffect = baseFeatEffect(document, `${document.name} (Trigger Checker)`, { transfer: true });\n\n  evaluationEffect.changes.push(\n    DDBMacros.generateOptionalMacroChange({ optionPostfix: \"ragingSea.damage.mwak\", macroType: \"feat\", macroName: \"ragingStormSea.js\", document }),\n    DDBMacros.generateOptionalMacroChange({ optionPostfix: \"ragingSea.damage.msak\", macroType: \"feat\", macroName: \"ragingStormSea.js\", document }),\n    DDBMacros.generateOptionalMacroChange({ optionPostfix: \"ragingSea.damage.rwak\", macroType: \"feat\", macroName: \"ragingStormSea.js\", document }),\n    DDBMacros.generateOptionalMacroChange({ optionPostfix: \"ragingSea.damage.rsak\", macroType: \"feat\", macroName: \"ragingStormSea.js\", document }),\n    {\n      key: \"flags.midi-qol.optional.ragingSea.count\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"reaction\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.ragingSea.label\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"Use your reaction to induce a save to apply prone?\",\n      priority: \"20\",\n    },\n  );\n  document.effects.push(evaluationEffect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function ragingStormTundraEffect(document) {\n  const effect = baseFeatEffect(document, document.name);\n  await DDBMacros.setItemMacroFlag(document, \"feat\", \"ragingStormTundra.js\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"feat\", \"ragingStormTundra.js\", [\"preTargeting\"]);\n  effect.changes.push(\n    {\n      key: \"system.attributes.movement.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"*0\",\n      priority: \"20\",\n    },\n  );\n  document.effects.push(effect);\n  return document;\n}\n","import DDBMacros from \"../DDBMacros.js\";\n\nexport async function stormAuraTundraEffect(document) {\n  await DDBMacros.setItemMacroFlag(document, \"feat\", \"stormAuraTundra.js\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"feat\", \"stormAuraTundra.js\", [\"postActiveEffects\"]);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport { generateATLChange, effectModules } from \"../effects.js\";\n\nexport function giantStatureEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n\n  if (effectModules().atlInstalled) {\n    effect.changes.push(generateATLChange(\"ATL.width\", CONST.ACTIVE_EFFECT_MODES.UPGRADE, 2, 5));\n    effect.changes.push(generateATLChange(\"ATL.height\", CONST.ACTIVE_EFFECT_MODES.UPGRADE, 2, 5));\n  }\n\n  effect.changes.push(\n    {\n      key: \"system.traits.size\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"lg\",\n      priority: 25,\n    },\n  );\n\n  document.system.damage.parts = [];\n\n  document.system.target = {\n    value: null,\n    width: null,\n    units: \"\",\n    type: \"self\",\n  };\n  document.system.range = {\n    value: null,\n    long: null,\n    units: \"self\",\n  };\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\nimport { generateATLChange, effectModules } from \"../effects.js\";\n\nexport function demiurgicColossusEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n\n  if (effectModules().atlInstalled) {\n    effect.changes.push(generateATLChange(\"ATL.width\", CONST.ACTIVE_EFFECT_MODES.UPGRADE, 3, 5));\n    effect.changes.push(generateATLChange(\"ATL.height\", CONST.ACTIVE_EFFECT_MODES.UPGRADE, 3, 5));\n  }\n\n  effect.changes.push(\n    {\n      key: \"system.traits.size\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"hg\",\n      priority: 25,\n    },\n  );\n\n  document.system.damage.parts = [];\n\n  document.system.target = {\n    value: null,\n    width: null,\n    units: \"\",\n    type: \"self\",\n  };\n  document.system.range = {\n    value: null,\n    long: null,\n    units: \"self\",\n  };\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseEffect } from \"../effects.js\";\n\nexport function greatWeaponMasterEffect(document) {\n  let effect = baseEffect(document, document.name, { transfer: false });\n\n  effect.changes.push(\n    {\n      key: \"system.bonuses.mwak.attack\",\n      value: \"-5\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 30,\n    },\n    {\n      key: \"system.bonuses.mwak.damage\",\n      value: \"+10\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 30,\n    },\n  );\n  foundry.utils.setProperty(effect, \"flags.dae.showIcon\", true);\n  document.effects.push(effect);\n\n  document.system.activation = {\n    \"type\": \"none\",\n    \"cost\": 1,\n    \"condition\": \"\"\n  };\n\n  document.system[\"target\"][\"type\"] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.system.actionType = \"other\";\n\n  foundry.utils.setProperty(document, \"flags.midi-qol.effectActivation\", false);\n  foundry.utils.setProperty(document, \"flags.midi-qol.removeAttackDamageButtons\", false);\n  foundry.utils.setProperty(document, \"flags.midiProperties.toggleEffect\", true);\n\n  return document;\n}\n","export function psychicBladesEffect(document) {\n\n  // document.system.actionType = \"rwak\";\n  // foundry.utils.setProperty(document, \"flags.midi-qol.effectCondition\", \"\");\n  // foundry.utils.setProperty(document, \"flags.midi-qol.ignoreNearbyFoes\", true);\n\n  return document;\n}\n","\nimport { baseFeatEffect } from \"../specialFeats.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\n\nexport async function sneakAttackEffect(document) {\n  const effect = baseFeatEffect(document, document.name, { transfer: true });\n  await DDBMacros.setItemMacroFlag(document, \"feat\", \"sneakAttack.js\");\n  effect.changes.push(\n    {\n      key: \"flags.dnd5e.DamageBonusMacro\",\n      value: DDBMacros.generateItemMacroValue({ macroType: \"feat\", macroName: \"sneakAttack.js\", document }),\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    },\n  );\n  document.effects.push(effect);\n  document.system.damage.parts = [];\n  document.system.actionType = null;\n\n  document.system.duration = {\n    value: 24,\n    units: \"hours\",\n  };\n\n  document.system.target = {\n    value: null,\n    width: null,\n    units: \"\",\n    type: \"self\",\n  };\n  document.system.range = {\n    value: null,\n    long: null,\n    units: \"self\",\n  };\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function aspectOfTheBeastBearEffect(document) {\n  let effect = baseFeatEffect(document, document.name, { transfer: true });\n\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.advantage.ability.check.str\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"1\",\n      priority: \"20\",\n    },\n    {\n      key: \"system.attributes.encumbrance.max\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"@attributes.encumbrance.max * 2\",\n      priority: \"20\",\n    },\n    {\n      key: \"system.attributes.encumbrance.pct\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"dae.eval(100 * attributes.encumbrance.value / attributes.encumbrance.max)\",\n      priority: \"20\",\n    },\n  );\n\n  document.effects.push(effect);\n  return document;\n}\n","import DDBMacros from \"../DDBMacros.js\";\n\nexport async function flurryOfBlowsEffect(document) {\n\n  await DDBMacros.setItemMacroFlag(document, \"feat\", \"flurryOfBlows.js\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"feat\", \"flurryOfBlows.js\", [\"postActiveEffects\"]);\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function songOfVictoryEffect(document) {\n  let effect = baseFeatEffect(document, `${document.name}`);\n\n  foundry.utils.setProperty(document, \"system.range\", { value: null, units: \"self\", long: null });\n  foundry.utils.setProperty(document, \"system.range.value\", null);\n  foundry.utils.setProperty(document, \"system.target.type\", \"self\");\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n\n  effect.changes.push(\n    {\n      key: \"system.bonuses.mwak.damage\",\n      value: \"max(@abilities.int.mod,1)\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 20,\n    },\n  );\n  effect.duration = {\n    startTime: null,\n    seconds: 60,\n    rounds: null,\n    turns: null,\n    startRound: null,\n    startTurn: null,\n  };\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function twinklingConstellationsEffect(document) {\n  foundry.utils.setProperty(document, \"system.target.type\", \"self\");\n  foundry.utils.setProperty(document, \"system.range.units\", \"self\");\n  foundry.utils.setProperty(document, \"system.range.value\", \"\");\n  foundry.utils.setProperty(document, \"system.actionType\", null);\n\n  let effect = baseFeatEffect(document, document.name);\n  foundry.utils.setProperty(effect, \"duration.seconds\", 600);\n\n  effect.changes.push(\n    {\n      key: \"system.attributes.movement.fly\",\n      mode: CONST.ACTIVE_EFFECT_MODES.UPGRADE,\n      value: \"20\",\n      priority: \"20\",\n    },\n    {\n      key: \"system.attributes.movement.hover\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"true\",\n      priority: \"20\",\n    },\n  );\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function armsOfTheAstralSelfEffect(document) {\n\n  let effect = baseFeatEffect(document, `${document.name} (Save Modifications)`);\n\n  effect.changes.push(\n    {\n      key: \"system.abilities.str.bonuses.check\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"- @abilities.str.mod + @abilities.wis.mod\",\n      priority: \"5\",\n    },\n    {\n      key: \"system.abilities.str.bonuses.save\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"- @abilities.str.mod + @abilities.wis.mod\",\n      priority: \"5\",\n    },\n  );\n\n  foundry.utils.setProperty(effect, \"duration.seconds\", 600);\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function ghostWalkEffect(document) {\n\n  let effect = baseFeatEffect(document, `${document.name} (Fight)`);\n\n  effect.changes.push(\n    {\n      key: \"system.attributes.movement.fly\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"10\",\n      priority: \"5\",\n    },\n    {\n      key: \"system.attributes.movement.hover\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"true\",\n      priority: \"5\",\n    },\n  );\n\n  foundry.utils.setProperty(effect, \"duration.seconds\", 600);\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseItemEffect } from \"../effects.js\";\n\nexport function darkOnesOwnLuckffect(document) {\n  document.system.damage.parts = [];\n  let effect = baseItemEffect(document, document.name, { transfer: true });\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.optional.darkOnesOwnLuck.check.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"+1d10\",\n      priority: 20,\n    },\n    {\n      key: \"flags.midi-qol.optional.darkOnesOwnLuck.save.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"+1d10\",\n      priority: 20,\n    },\n    {\n      key: \"flags.midi-qol.optional.darkOnesOwnLuck.label\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"Dark One's Own Luck\",\n      priority: 20,\n    },\n    {\n      key: \"flags.midi-qol.optional.darkOnesOwnLuck.count\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: `ItemUses.${document.name}`,\n      priority: 20,\n    },\n    {\n      key: \"flags.midi-qol.optional.darkOnesOwnLuck.skill.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"+1d10\",\n      priority: 20,\n    }\n  );\n\n  return document;\n}\n","import { baseFeatEffect } from \"../specialFeats.js\";\n\nexport function foeSlayerEffect(document) {\n  let effect = baseFeatEffect(document, document.name, { transfer: true });\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.optional.foeSlayer.damage.msak\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"@abilities.wis.mod\",\n      priority: 20,\n    },\n    {\n      key: \"flags.midi-qol.optional.foeSlayer.damage.mwak\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"@abilities.wis.mod\",\n      priority: 20,\n    },\n    {\n      key: \"flags.midi-qol.optional.foeSlayer.damage.rsak\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"@abilities.wis.mod\",\n      priority: 20,\n    },\n    {\n      key: \"flags.midi-qol.optional.foeSlayer.damage.rwak\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"@abilities.wis.mod\",\n      priority: 20,\n    },\n    {\n      key: \"flags.midi-qol.optional.foeSlayer.label\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: document.name,\n      priority: 20,\n    },\n    {\n      key: \"flags.midi-qol.optional.foeSlayer.count\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"each-round\",\n      priority: 20,\n    },\n  );\n  document.effects.push(effect);\n  return document;\n}\n","import { applyDefaultMidiFlags, baseEffect, effectModules, forceItemEffect, forceManualReaction } from \"./effects.js\";\n\n// effect loads\nimport { alertEffect } from \"./feats/alert.js\";\nimport { ancestralProtectorsEffect } from \"./feats/ancestralProtectors.js\";\nimport { arcaneRecoveryEffect } from \"./feats/arcaneRecovery.js\";\nimport { arcaneWardEffect } from \"./feats/arcaneWard.js\";\nimport { auraOfHateEffect } from \"./feats/auraOfHate.js\";\nimport { bardicInspirationEffect } from \"./feats/bardicInspiration.js\";\nimport { bladesongEffect } from \"./feats/bladesong.js\";\nimport { blessedHealerEffect } from \"./feats/blessedHealer.js\";\nimport { blessedStrikesEffect } from \"./feats/blessedStrikes.js\";\nimport { cloudRuneEffect } from \"./feats/cloudRune.js\";\nimport { crossbowExpertEffect } from \"./feats/crossbowExpert.js\";\nimport { crusherCriticalEffect } from \"./feats/crusherCritical.js\";\nimport { crusherEffect } from \"./feats/crusher.js\";\nimport { dauntingRoarEffect } from \"./feats/dauntingRoar.js\";\nimport { defensiveDuelistEffect } from \"./feats/defensiveDuelist.js\";\nimport { deflectMissilesAttackEffect } from \"./feats/deflectMissilesAttack.js\";\nimport { deflectMissilesEffect } from \"./feats/deflectMissiles.js\";\nimport { deftStrikeEffect } from \"./feats/deftStike.js\";\nimport { evasionEffect } from \"./feats/evasion.js\";\nimport { favoredFoeEffect } from \"./feats/favoredFoe.js\";\nimport { fightingStyleInterceptionEffect } from \"./feats/fightingStyles.js\";\nimport { fireRuneEffect } from \"./feats/fireRune.js\";\nimport { fontOfMagicEffect } from \"./feats/fontOfMagic.js\";\nimport { formOfTheBeastReactionEffect } from \"./feats/formOfTheBeastReaction.js\";\nimport { frostRuneEffect } from \"./feats/frostRune.js\";\nimport { giantsMightEffect } from \"./feats/giantsMight.js\";\nimport { hadozeDodgeEffect } from \"./feats/hadozeeDodge.js\";\nimport { heavyArmorMasterEffect } from \"./feats/heavyArmorMaster.js\";\nimport { hillRuneEffect } from \"./feats/hillRune.js\";\nimport { holdBreathEffect } from \"./feats/holdBreath.js\";\nimport { indomitableEffect } from \"./feats/indomitable.js\";\nimport { kiEmptyBodyEffect } from \"./feats/kiEmptyBody.js\";\nimport { maneuversEffect } from \"./feats/maneuvers.js\";\nimport { mantleOfInspirationEffect } from \"./feats/mantleOfInspiration.js\";\nimport { maskOfTheWildEffect } from \"./feats/maskOfTheWild.js\";\nimport { mindLinkEffect } from \"./feats/mindLink.js\";\nimport { momentaryStasis } from \"./feats/momentaryStasis.js\";\nimport { pactMagicEffect } from \"./feats/pactMagic.js\";\nimport { paladinDefaultAuraEffect } from \"./feats/paladinDefaultAura.js\";\nimport { patientDefenseEffect } from \"./feats/patientDefense.js\";\nimport { piercerCriticalEffect, piercerRerollEffect } from \"./feats/piercer.js\";\nimport { planarWarriorEffect } from \"./feats/planarWarrior.js\";\nimport { potentCantripEffect } from \"./feats/potentCantrip.js\";\nimport { powerfulBuild } from \"./feats/powerfulBuild.js\";\nimport { radiantSoulEffect } from \"./feats/radiantSoul.js\";\nimport { rageEffect } from \"./feats/rage.js\";\nimport { recklessAttackEffect } from \"./feats/recklessAttack.js\";\nimport { runeCarverEffect } from \"./feats/runeCarver.js\";\nimport { sacredWeaponEffect } from \"./feats/sacredWeapon.js\";\nimport { savageAttackerEffect } from \"./feats/savageAttacker.js\";\nimport { sculptSpellsEffect } from \"./feats/sculptSpells.js\";\nimport { sharpShooterEffect } from \"./feats/sharpShooter.js\";\nimport { shiftEffect } from \"./feats/shift.js\";\nimport { slasherCriticalEffect } from \"./feats/slasherCritical.js\";\nimport { slasherReduceSpeedEffect } from \"./feats/slasherReduceSpeed.js\";\nimport { slayersPreyEffect } from \"./feats/slayersPrey.js\";\nimport { squireOfSolamniaEffect } from \"./feats/squireOfSolamnia.js\";\nimport { steadyAimEffect } from \"./feats/steadyAim.js\";\nimport { stoneRuneEffect } from \"./feats/stoneRune.js\";\nimport { stonesEnduranceEffect } from \"./feats/stonesEndurance.js\";\nimport { stormRuneEffect } from \"./feats/stormRune.js\";\nimport { unarmoredMovementEffect } from \"./feats/unarmoredMovement.js\";\nimport { uncannyDodgeEffect } from \"./feats/uncannyDodge.js\";\nimport { vedalkenDispassionEffect } from \"./feats/vedalkenDispassion.js\";\nimport { vigilantBlessingEffect } from \"./feats/vigilantBlessing.js\";\nimport { visageOfTheAstralSelfEffect } from \"./feats/visageOfTheAstralSelf.js\";\nimport { warCasterEffect } from \"./feats/warCaster.js\";\nimport { furyOfTheSmallEffect } from \"./feats/furryOfTheSmall.js\";\nimport { intimidatingPresenceEffect } from \"./feats/intimidatingPresence.js\";\nimport { shieldingStormEffect } from \"./feats/sheildingStorm.js\";\nimport { stormSoulEffect } from \"./feats/stormSoul.js\";\nimport { ragingStormSeaEffect } from \"./feats/ragingStormSea.js\";\nimport { ragingStormTundraEffect } from \"./feats/ragingStormTundra.js\";\nimport { stormAuraTundraEffect } from \"./feats/stormAuraTundra.js\";\nimport { giantStatureEffect } from \"./feats/giantStature.js\";\nimport { demiurgicColossusEffect } from \"./feats/demiurgicColossus.js\";\nimport { greatWeaponMasterEffect } from \"./feats/greatWeaponMaster.js\";\nimport { psychicBladesEffect } from \"./feats/psychicBlades.js\";\nimport { sneakAttackEffect } from \"./feats/sneakAttack.js\";\nimport { aspectOfTheBeastBearEffect } from \"./feats/aspectOfTheBeastBear.js\";\nimport { flurryOfBlowsEffect } from \"./feats/flurryOfBlows.js\";\nimport { songOfVictoryEffect } from \"./feats/songOfVictory.js\";\nimport { twinklingConstellationsEffect } from \"./feats/twinklingConstellations.js\";\nimport { armsOfTheAstralSelfEffect } from \"./feats/armsOfTheAstralSelf.js\";\nimport { ghostWalkEffect } from \"./feats/ghostWalk.js\";\nimport { darkOnesOwnLuckffect } from \"./feats/darkOnesOwnLuck.js\";\nimport { foeSlayerEffect } from \"./feats/foeSlayer.js\";\n\nexport function baseFeatEffect(document, label,\n  { transfer = false, disabled = false } = {}\n) {\n  return baseEffect(document, label, { transfer, disabled });\n}\n\n// eslint-disable-next-line complexity\nasync function midiFeatureEffects(ddb, character, document) {\n  const name = document.flags.ddbimporter?.originalName ?? document.name;\n\n  document = applyDefaultMidiFlags(document);\n\n  if (name.startsWith(\"Maneuvers: \") && ddb && character) {\n    document = await maneuversEffect(ddb, character, document);\n    return document;\n  } else if (name.startsWith(\"Rune Carver: \")) {\n    document = await runeCarverEffect(document);\n    return document;\n  }\n\n  switch (name) {\n    case \"Arcane Recovery\": {\n      document = await arcaneRecoveryEffect(document);\n      break;\n    }\n    case \"Ancestral Protectors\": {\n      document = await ancestralProtectorsEffect(document);\n      break;\n    }\n    case \"Arcane Ward\": {\n      document = await arcaneWardEffect(document);\n      break;\n    }\n    case \"Aspect of the Beast: Bear\": {\n      document = await aspectOfTheBeastBearEffect(document);\n      break;\n    }\n    case \"Bardic Inspiration\": {\n      document = bardicInspirationEffect(document);\n      break;\n    }\n    case \"Blessed Healer\": {\n      document = await blessedHealerEffect(document);\n      break;\n    }\n    case \"Blessed Strikes\": {\n      document = blessedStrikesEffect(document);\n      break;\n    }\n    case \"Convert Sorcery Points\":\n    case \"Font of Magic\": {\n      document = await fontOfMagicEffect(document);\n      break;\n    }\n    case \"Crusher\": {\n      document = await crusherEffect(document);\n      break;\n    }\n    case \"Crusher: Critical\": {\n      document = await crusherCriticalEffect(document);\n      break;\n    }\n    case \"Cloud Rune\": {\n      document = cloudRuneEffect(document);\n      break;\n    }\n    case \"Crossbow Expert\": {\n      document = crossbowExpertEffect(document);\n      break;\n    }\n    case \"Dark One's Own Luck\":\n    case \"Dark Ones Own Luck\": {\n      document = darkOnesOwnLuckffect(document);\n      break;\n    }\n    case \"Daunting Roar\": {\n      document = dauntingRoarEffect(document);\n      break;\n    }\n    case \"Deflect Missiles\": {\n      document = deflectMissilesEffect(document);\n      break;\n    }\n    case \"Deflect Missiles Attack\": {\n      document = deflectMissilesAttackEffect(document);\n      break;\n    }\n    case \"Deft Strike\": {\n      document = await deftStrikeEffect(document);\n      break;\n    }\n    case \"Evasion\": {\n      document = evasionEffect(document);\n      break;\n    }\n    case \"Empty Body\":\n    case \"Ki: Empty Body\": {\n      document = kiEmptyBodyEffect(document);\n      break;\n    }\n    case \"Favored Foe\": {\n      document = await favoredFoeEffect(document);\n      break;\n    }\n    case \"Foe Slayer\": {\n      document = foeSlayerEffect(document);\n      break;\n    }\n    case \"Fighting Style: Interception\": {\n      document = fightingStyleInterceptionEffect(document);\n      break;\n    }\n    case \"Form of the Beast: Tail (reaction)\": {\n      document = formOfTheBeastReactionEffect(document);\n      break;\n    }\n    case \"Fury of the Small\": {\n      document = await furyOfTheSmallEffect(document);\n      break;\n    }\n    case \"Flurry of Blows\": {\n      document = await flurryOfBlowsEffect(document);\n      break;\n    }\n    case \"Giant's Might\": {\n      document = giantsMightEffect(document);\n      break;\n    }\n    case \"Glide (Reaction)\": {\n      document = forceManualReaction(document);\n      break;\n    }\n    case \"Hadozee Dodge\": {\n      document = hadozeDodgeEffect(document);\n      break;\n    }\n    case \"Indomitable\": {\n      document = indomitableEffect(document);\n      break;\n    }\n    case \"Intimidating Presence\": {\n      document = intimidatingPresenceEffect(document);\n      break;\n    }\n    case \"Mantle of Inspiration\": {\n      document = await mantleOfInspirationEffect(document);\n      break;\n    }\n    case \"Mask of the Wild\": {\n      document = await maskOfTheWildEffect(document);\n      break;\n    }\n    case \"Patient Defense\": {\n      document = patientDefenseEffect(document);\n      break;\n    }\n    case \"Potent Cantrip\": {\n      document = potentCantripEffect(document);\n      break;\n    }\n    case \"Equine Build\":\n    case \"Little Giant\":\n    case \"Hippo Build\":\n    case \"Powerful Build\": {\n      document = powerfulBuild(document);\n      break;\n    }\n    case \"Piercer\": {\n      document = await piercerCriticalEffect(document);\n      document = await piercerRerollEffect(document);\n      break;\n    }\n    case \"Piercer: Reroll Damage\": {\n      document = await piercerRerollEffect(document);\n      break;\n    }\n    case \"Piercer: Critical Hit\": {\n      document = await piercerCriticalEffect(document);\n      break;\n    }\n    case \"Planar Warrior\": {\n      document = await planarWarriorEffect(document);\n      break;\n    }\n    case \"Psychic Blades: Attack (DEX)\":\n    case \"Psychic Blades: Attack (STR)\":\n    case \"Psychic Blades: Bonus Attack (DEX)\":\n    case \"Psychic Blades: Bonus Attack (STR)\":\n    case \"Psychic Blades: Bonus Attack\":\n    case \"Psychic Blades: Attack\": {\n      document = psychicBladesEffect(document);\n      break;\n    }\n    case \"Celestial Revelation (Radiant Soul)\":\n    case \"Radiant Soul\": {\n      document = await radiantSoulEffect(document);\n      break;\n    }\n    case \"Raging Storm: Sea\": {\n      document = await ragingStormSeaEffect(document);\n      break;\n    }\n    case \"Raging Storm: Tundra\": {\n      document = await ragingStormTundraEffect(document);\n      break;\n    }\n    case \"Reckless Attack\": {\n      document = recklessAttackEffect(document);\n      break;\n    }\n    case \"Sculpt Spells\": {\n      document = sculptSpellsEffect(document);\n      break;\n    }\n    case \"Sharpshooter\": {\n      document = sharpShooterEffect(document);\n      break;\n    }\n    case \"Savage Attacker\": {\n      document = savageAttackerEffect(document);\n      break;\n    }\n    case \"Shift\": {\n      if (ddb && character) document = shiftEffect(ddb, character, document);\n      break;\n    }\n    case \"Slasher: Reduce Speed\": {\n      document = await slasherReduceSpeedEffect(document);\n      break;\n    }\n    case \"Slasher: Critical Hit\": {\n      document = await slasherCriticalEffect(document);\n      break;\n    }\n    case \"Slayer's Prey\": {\n      document = await slayersPreyEffect(document);\n      break;\n    }\n    case \"Slow Fall\": {\n      document = forceManualReaction(document);\n      break;\n    }\n    case \"Squire of Solamnia: Precise Strike\": {\n      document = await squireOfSolamniaEffect(document);\n      break;\n    }\n    case \"Sneak Attack\": {\n      document = await sneakAttackEffect(document);\n      break;\n    }\n    case \"Stone's Endurance\":\n    case \"Stone’s Endurance\": {\n      document = stonesEnduranceEffect(document);\n      break;\n    }\n    case \"Storm Aura: Tundra\": {\n      document = await stormAuraTundraEffect(document);\n      break;\n    }\n    case \"Storm Soul: Desert\":\n    case \"Storm Soul: Sea\":\n    case \"Storm Soul: Tundra\":\n    case \"Storm Soul\": {\n      if (ddb) document = await stormSoulEffect(ddb, document);\n      break;\n    }\n    case \"Swiftstride Reaction\": {\n      document = forceManualReaction(document);\n      break;\n    }\n    case \"Uncanny Dodge\": {\n      document = uncannyDodgeEffect(document);\n      break;\n    }\n    case \"Vedalken Dispassion\": {\n      document = vedalkenDispassionEffect(document);\n      break;\n    }\n    // no default\n  }\n  return document;\n}\n\n/**\n * These are effects that can't be generated dynamically and have extra requirements\n */\n// eslint-disable-next-line complexity\nexport async function featureEffectAdjustment(ddb, character, document, midiEffects = false) {\n  if (!document.effects) document.effects = [];\n\n  const name = document.flags.ddbimporter?.originalName ?? document.name;\n\n  // check that we can gen effects\n  const deps = effectModules();\n\n  // effects to always apply\n  switch (name) {\n    case \"Alert\": {\n      document = alertEffect(document);\n      break;\n    }\n    // if using active auras add the aura effect\n    case \"Aura of Courage\":\n    case \"Aura of Protection\": {\n      document = paladinDefaultAuraEffect(document);\n      break;\n    }\n    case \"Aura of Hate\": {\n      document = auraOfHateEffect(document);\n      break;\n    }\n    case \"Arms of the Astral Self\": {\n      document = armsOfTheAstralSelfEffect(document);\n      break;\n    }\n    case \"Bladesong\": {\n      document = bladesongEffect(document);\n      break;\n    }\n    case \"Defensive Duelist\": {\n      document = defensiveDuelistEffect(document);\n      break;\n    }\n    case \"Demiurgic Colossus\": {\n      document = demiurgicColossusEffect(document);\n      break;\n    }\n    case \"Fire Rune\": {\n      document = fireRuneEffect(document);\n      break;\n    }\n    case \"Frost Rune\": {\n      document = frostRuneEffect(document);\n      break;\n    }\n    case \"Ghost Walk\": {\n      document = ghostWalkEffect(document);\n      break;\n    }\n    case \"Giant Stature\":\n    case \"Giant's Havoc: Giant Stature\": {\n      document = giantStatureEffect(document);\n      break;\n    }\n    case \"Great Weapon Master\": {\n      document = greatWeaponMasterEffect(document);\n      break;\n    }\n    case \"Heavy Armor Master\": {\n      document = heavyArmorMasterEffect(document);\n      break;\n    }\n    case \"Partially Amphibious\":\n    case \"Hold Breath\": {\n      document = holdBreathEffect(document);\n      break;\n    }\n    case \"Hill Rune\": {\n      document = hillRuneEffect(document);\n      break;\n    }\n    case \"Pact Magic\": {\n      document = pactMagicEffect(document);\n      break;\n    }\n    case \"Rage\": {\n      document = rageEffect(document);\n      break;\n    }\n    case \"Channel Divinity: Sacred Weapon\":\n    case \"Sacred Weapon\": {\n      document = sacredWeaponEffect(document);\n      break;\n    }\n    case \"Song of Victory\": {\n      document = songOfVictoryEffect(document);\n      break;\n    }\n    case \"Shielding Storm\": {\n      if (ddb) document = shieldingStormEffect(ddb, document);\n      break;\n    }\n    case \"Steady Aim\": {\n      document = steadyAimEffect(document);\n      break;\n    }\n    case \"Stone Rune\": {\n      document = stoneRuneEffect(document);\n      break;\n    }\n    case \"Storm Rune\": {\n      document = stormRuneEffect(document);\n      break;\n    }\n    case \"Twinkling Constellations\": {\n      document = twinklingConstellationsEffect(document);\n      break;\n    }\n    case \"Unarmored Movement\": {\n      document = unarmoredMovementEffect(document);\n      break;\n    }\n    case \"Uncanny Dodge\": {\n      document = uncannyDodgeEffect(document);\n      break;\n    }\n    case \"Vigilant Blessing\": {\n      document = vigilantBlessingEffect(document);\n      break;\n    }\n    case \"Visage of the Astral Self\": {\n      document = visageOfTheAstralSelfEffect(document);\n      break;\n    }\n    case \"War Caster\":\n    case \"Warcaster\": {\n      document = warCasterEffect(document);\n      break;\n    }\n    // no default\n  }\n\n  if (deps.daeInstalled) {\n    switch (name) {\n      case \"Mind Link Response\": {\n        document = mindLinkEffect(document);\n        break;\n      }\n      case \"Momentary Stasis\": {\n        document = momentaryStasis(document);\n        break;\n      }\n      case \"Vigilant Blessing\": {\n        document = vigilantBlessingEffect(document);\n        break;\n      }\n      // no default\n    }\n  }\n\n  if (!deps.hasCore || !midiEffects) {\n    return forceItemEffect(document);\n  }\n\n  if (deps.midiQolInstalled && midiEffects) {\n    document = await midiFeatureEffects(ddb, character, document);\n  }\n\n  return forceItemEffect(document);\n}\n","import { baseItemEffect } from \"../effects.js\";\n\nexport function absorptionEffect(item) {\n  const absRegEx = /is subjected to (\\w+) damage, it takes no damage and (?:instead )?regains a number of hit points equal to (half )?the (\\w+) damage/i;\n  const match = absRegEx.exec(item.system.description.value);\n  if (!item.effects) item.effects = [];\n  if (match) {\n    let effect = baseItemEffect(item, `${item.name}`);\n    effect.changes.push(\n      {\n        key: `flags.midi-qol.absorption.${match[1]}`,\n        value: match[2] ? \"0.5\" : \"1\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        priority: 20,\n      }\n    );\n    effect.img = \"icons/svg/downgrade.svg\";\n    effect.icon = \"icons/svg/downgrade.svg\";\n    item.effects.push(effect);\n  }\n  return item;\n}\n","import { baseItemEffect } from \"../effects.js\";\n\nexport function generateLegendaryEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.optional.LegRes.save.fail.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"success\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.LegRes.count\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"@resources.legres.value\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.LegRes.label\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"Use Legendary Resistance to Succeed?\",\n      priority: \"20\",\n    }\n  );\n\n  document.effects.push(effect);\n  return document;\n}\n","\nimport { baseItemEffect } from \"../effects.js\";\n\nexport function generatePackTacticsEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.advantage.attack.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"findNearby(-1, targetUuid, 5, 0).length > 1\",\n      priority: \"20\",\n    },\n  );\n\n  document.effects.push(effect);\n  return document;\n}\n","\nimport { baseItemEffect } from \"../effects.js\";\n\nexport function generateReversalOfFortuneEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.DR.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"1\",\n      priority: \"20\",\n    },\n  );\n\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"1Reaction\"]);\n  foundry.utils.setProperty(effect, \"duration.turns\", 1);\n  foundry.utils.setProperty(document, \"system.activation.type\", \"reactiondamage\");\n  document.effects.push(effect);\n  return document;\n}\n","\nimport { baseItemEffect } from \"../effects.js\";\n\nexport function generateSuaveDefenseEffect(ddbMonster, document) {\n  let effect = baseItemEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"system.attributes.ac.bonus\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: `+ ${ddbMonster.npc.system.abilities.cha.mod}`,\n      priority: \"20\",\n    },\n  );\n\n  document.effects.push(effect);\n  return document;\n}\n","\nimport { baseItemEffect, forceItemEffect } from \"../effects.js\";\n\nexport function generateTauntEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.disadvantage.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"1\",\n      priority: \"20\",\n    },\n  );\n\n  effect.duration.rounds = 2;\n  effect.duration.seconds = 12;\n  effect.flags.dae.specialDuration = [\"turnStart\"];\n\n  document.effects.push(effect);\n  document = forceItemEffect(document);\n  return document;\n}\n","import { forceItemEffect, addStatusEffectChange } from \"../effects.js\";\nimport { baseFeatEffect } from \"../specialFeats.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nfunction avalancheOfBonesEffect(document) {\n  foundry.utils.setProperty(document, \"system.duration\", { value: null, units: \"special\" });\n  foundry.utils.setProperty(document, \"system.target\", { value: 10, width: null, units: \"ft\", type: \"creature\" });\n  foundry.utils.setProperty(document, \"system.range\", { value: null, long: null, units: \"self\" });\n\n  let effect = baseFeatEffect(document, document.name);\n  addStatusEffectChange(effect, \"Prone\", 20, true);\n  foundry.utils.setProperty(effect, \"duration.turns\", 99);\n  foundry.utils.setProperty(effect, \"duration.seconds\", 9999);\n  effect.transfer = false;\n\n  document.effects.push(effect);\n  document = forceItemEffect(document);\n  return document;\n}\n\nfunction fallingApartEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n  effect.changes.push(\n    {\n      \"key\": \"flags.midi-qol.OverTime\",\n      \"mode\": CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      \"value\": `turn=start, damageRoll=10, damageType=none, condition=@attributes.hp.value > 0 && @attributes.hp.value < @attributes.hp.max, label=${document.name}`,\n      \"priority\": \"20\"\n    },\n  );\n  effect.transfer = true;\n  document.effects.push(effect);\n  document = forceItemEffect(document);\n  return document;\n}\n\nasync function disassembleEffect(document) {\n  let effect = baseFeatEffect(document, document.name);\n\n  await DDBMacros.setItemMacroFlag(document, \"monsterFeature\", \"disassemble.js\");\n  effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"monsterFeature\", macroName: \"disassemble.js\", priority: 0 }));\n  effect.transfer = true;\n  foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"zeroHP\"]);\n  document.effects.push(effect);\n  document = forceItemEffect(document);\n  return document;\n}\n\nexport async function skeletalJuggernautEffects(npc) {\n  for (let item of npc.items) {\n    if (item.name.startsWith(\"Avalanche of Bones\")) {\n      item = avalancheOfBonesEffect(item);\n    } else if (item.name.startsWith(\"Falling Apart\")) {\n      item = fallingApartEffect(item);\n    } else if (item.name.startsWith(\"Disassemble\")) {\n      item = await disassembleEffect(item);\n    }\n  }\n\n  return npc;\n}\n","import { forceItemEffect, addStatusEffectChange } from \"../effects.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { baseMonsterFeatureEffect } from \"../specialMonsters.js\";\n\n\nexport async function venomTrollEffects(npc) {\n  for (let item of npc.items) {\n    if (item.name.startsWith(\"Venom Spray\")) {\n      let effect = baseMonsterFeatureEffect(item, item.name);\n      effect.changes.push(\n        {\n          key: \"flags.midi-qol.OverTime\",\n          mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n          value: \"turn=end, saveAbility=con, saveDC=@abilities.str.dc, label=Poisoned by Venom Spray\",\n          priority: \"20\",\n        },\n      );\n      addStatusEffectChange(effect, \"Poisoned\", 20, true);\n\n      foundry.utils.setProperty(effect, \"duration.seconds\", 60);\n      foundry.utils.setProperty(effect, \"duration.rounds\", 10);\n      foundry.utils.setProperty(effect, \"flags.dae.stackable\", \"noneName\");\n\n      await DDBMacros.setItemMacroFlag(item, \"monsterFeature\", \"venomSpray.js\");\n      DDBMacros.setMidiOnUseMacroFlag(item, \"monsterFeature\", \"venomSpray.js\", [\"postActiveEffects\"]);\n\n      item.effects.push(effect);\n    } else if (item.name === \"Poison Splash\") {\n      let effect = baseMonsterFeatureEffect(item, item.name);\n      effect.changes.push(\n        DDBMacros.generateOnUseMacroChange({ macroPass: \"isDamaged\", macroType: \"monsterFeature\", macroName: \"venomSpray.js\" }),\n      );\n      effect.transfer = true;\n      foundry.utils.setProperty(effect, \"flags.dae.stackable\", \"noneName\");\n\n      await DDBMacros.setItemMacroFlag(item, \"monsterFeature\", \"poisonSplash.js\");\n\n      item.effects.push(effect);\n\n      item.system.target = {\n        \"value\": 5,\n        \"width\": null,\n        \"units\": \"ft\",\n        \"type\": \"creature\"\n      };\n      item.system.range.units = \"spec\";\n      item.system.duration.units = \"inst\";\n\n    } else if (item.name === \"Regeneration\") {\n      let effect = baseMonsterFeatureEffect(item, item.name);\n      effect.changes.push(\n        {\n          key: \"flags.midi-qol.OverTime\",\n          mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n          value: `turn=start, damageRoll=${item.system.damage.parts[0][0]}, damageType=healing, condition=@attributes.hp.value > 0 && @attributes.hp.value < @attributes.hp.max, rollMode=gmroll, label=${item.name} (Fire or Acid prevents)`,\n          priority: \"20\",\n        },\n      );\n      foundry.utils.setProperty(effect, \"flags.dae.transfer\", true);\n      effect.transfer = true;\n      item.system.damage.parts = [];\n      item.effects.push(effect);\n    }\n    item = forceItemEffect(item);\n  }\n\n  return npc;\n}\n\n","import { forceItemEffect, addStatusEffectChange } from \"../effects.js\";\nimport { baseMonsterFeatureEffect } from \"../specialMonsters.js\";\n\n\nexport function quasitEffects(npc) {\n  for (let item of npc.items) {\n    if (item.name.startsWith(\"Claws\")) {\n      let effect = baseMonsterFeatureEffect(item, item.name);\n      effect.changes.push(\n        {\n          key: \"flags.midi-qol.OverTime\",\n          mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n          value: \"turn=end, saveAbility=con, saveDC=@abilities.con.dc, label=Poisoned by Quasit Claws\",\n          priority: \"20\",\n        },\n      );\n      addStatusEffectChange(effect, \"Poisoned\", 20, true);\n\n      foundry.utils.setProperty(effect, \"duration.seconds\", 60);\n      foundry.utils.setProperty(effect, \"duration.rounds\", 10);\n      foundry.utils.setProperty(effect, \"flags.dae.stackable\", \"noneName\");\n\n      item.effects.push(effect);\n      foundry.utils.setProperty(item, \"flags.midiProperties.fulldam\", true);\n      item = forceItemEffect(item);\n    }\n  }\n\n  return npc;\n}\n\n","import { addStatusEffectChange } from \"../effects.js\";\nimport { baseMonsterFeatureEffect } from \"../specialMonsters.js\";\n\n\nexport function invisibilityFeatureEffect(document) {\n  if (document.type === \"spell\") return document;\n\n  let effect = baseMonsterFeatureEffect(document, `${document.name} feature`);\n  addStatusEffectChange(effect, \"Invisible\", 20, true);\n  foundry.utils.setProperty(effect, \"flags.dae.stackable\", \"noneName\");\n\n  const permanent = [\"special\"].includes(foundry.utils.getProperty(document, \"flags.monsterMunch.type\"));\n  const improvedEffect = [\"Superior Invisibility\"].includes(document.name);\n\n  if (permanent) {\n    effect.transfer = true;\n  } else if (!improvedEffect) {\n    foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"1Action\", \"1Spell\", \"1Attack\"]);\n  }\n  document.effects.push(effect);\n\n  document.system.actionType = \"other\";\n  document.system[\"target\"][\"type\"] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.system.duration.units = \"spec\";\n\n  foundry.utils.setProperty(document, \"flags.midi-qol.forceCEOff\", true);\n  foundry.utils.setProperty(document, \"flags.midiProperties.concentration\", true);\n\n  return document;\n}\n\n","import DDBMacros from \"../DDBMacros.js\";\n\nexport async function deathlyChoirEffect(document) {\n  await DDBMacros.setItemMacroFlag(document, \"monsterFeature\", \"deathlyChoir.js\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"monsterFeature\", \"deathlyChoir.js\", [\"prePreambleComplete\"]);\n\n  foundry.utils.setProperty(document, \"system.target\", { value: 10, width: null, units: \"ft\", type: \"creature\" });\n  foundry.utils.setProperty(document, \"system.range\", { value: null, long: null, units: \"spec\" });\n\n  return document;\n}\n","import { forceItemEffect } from \"../effects.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { baseMonsterFeatureEffect } from \"../specialMonsters.js\";\n\n\nexport async function strahdZombieEffects(npc) {\n  for (let item of npc.items) {\n    if (item.name.startsWith(\"Loathsome Limbs\")) {\n      let effect = baseMonsterFeatureEffect(item, item.name);\n      effect.changes.push(\n        DDBMacros.generateOnUseMacroChange({ macroPass: \"isDamaged\", macroType: \"monsterFeature\", macroName: \"loathsomeLimbs.js\" }),\n      );\n      effect.transfer = true;\n      foundry.utils.setProperty(effect, \"flags.dae.stackable\", \"noneName\");\n      await DDBMacros.setItemMacroFlag(item, \"monsterFeature\", \"loathsomeLimbs.js\");\n\n      item.effects.push(effect);\n    }\n    item = forceItemEffect(item);\n  }\n\n  return npc;\n}\n","import DDBMacros from \"../DDBMacros.js\";\nimport { forceItemEffect } from \"../effects.js\";\n\nexport async function beholderEyeRaysEffect(document, rayNum = 3, range = 120) {\n  foundry.utils.setProperty(document, \"system.target\", { value: rayNum, width: null, units: \"\", type: \"creature\" });\n  foundry.utils.setProperty(document, \"system.range\", { value: range, long: null, units: \"ft\" });\n  foundry.utils.setProperty(document, \"system.damage\", { parts: [], versatile: \"\", value: \"\" });\n  foundry.utils.setProperty(document, \"system.activation.type\", \"action\");\n  foundry.utils.setProperty(document, \"system.actionType\", \"other\");\n\n  await DDBMacros.setItemMacroFlag(document, \"monsterFeature\", \"eyeRays.js\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"monsterFeature\", \"eyeRays.js\", [\"postActiveEffects\"]);\n\n  document.system.save = {\n    dc: null,\n    ability: \"\",\n    scaling: \"spell\",\n  };\n\n  foundry.utils.setProperty(document, \"flags.midiProperties.magiceffect\", true);\n\n  document.effects = [];\n  document = forceItemEffect(document);\n  return document;\n}\n","import DDBMacros from \"../DDBMacros.js\";\nimport { baseEffect } from \"../effects.js\";\n\nexport async function spellReflectionEffect(document) {\n\n  foundry.utils.setProperty(document, \"system.activation.type\", \"special\");\n  foundry.utils.setProperty(document, \"system.actionType\", \"other\");\n\n  await DDBMacros.setItemMacroFlag(document, \"monsterFeature\", \"spellReflection.js\");\n\n  let effect = baseEffect(document, document.name, { transfer: true, disabled: false });\n  effect.changes.push(\n    DDBMacros.generateOnUseMacroChange({ macroPass: \"isSaveSuccess\", macroType: \"monsterFeature\", macroName: \"spellReflection.js\", document }),\n    DDBMacros.generateOnUseMacroChange({ macroPass: \"isAttacked\", macroType: \"monsterFeature\", macroName: \"spellReflection.js\", document }),\n  );\n  document.effects.push(effect);\n\n  return document;\n}\n","import { forceItemEffect, addStatusEffectChange } from \"../effects.js\";\nimport { baseMonsterFeatureEffect } from \"../specialMonsters.js\";\n\n\nexport function giantSpiderEffects(npc) {\n  for (let item of npc.items) {\n    if (item.name.startsWith(\"Web\")) {\n      let effect = baseMonsterFeatureEffect(item, item.name);\n      addStatusEffectChange(effect, \"Restrained\", 20, true);\n      effect.changes.push(\n        {\n          key: \"flags.midi-qol.OverTime\",\n          mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n          value: \"turn=start,name=You can take an action to break free of the web by rolling a Strength Ability Check\",\n          priority: \"20\",\n        },\n        {\n          key: \"flags.midi-qol.OverTime\",\n          mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n          value: \"turn=end, rollType=check, actionSave=true, saveAbility=str, saveDC=@abilities.str.dc, label=Restrained by Web\",\n          priority: \"20\",\n        },\n      );\n\n      foundry.utils.setProperty(effect, \"duration.seconds\", 60);\n      foundry.utils.setProperty(effect, \"duration.rounds\", 10);\n      foundry.utils.setProperty(effect, \"flags.dae.stackable\", \"noneName\");\n\n      item.effects.push(effect);\n      item = forceItemEffect(item);\n    }\n  }\n\n  return npc;\n}\n\n","import DDBMacros from \"../DDBMacros.js\";\nimport { forceItemEffect } from \"../effects.js\";\n\nexport async function beholderEyeRayLegendaryEffect(document, rayNum = 3, range = 120) {\n  foundry.utils.setProperty(document, \"system.target\", { value: rayNum, width: null, units: \"\", type: \"creature\" });\n  foundry.utils.setProperty(document, \"system.range\", { value: range, long: null, units: \"ft\" });\n  foundry.utils.setProperty(document, \"system.damage\", { parts: [], versatile: \"\", value: \"\" });\n  foundry.utils.setProperty(document, \"system.activation.type\", \"action\");\n  foundry.utils.setProperty(document, \"system.actionType\", \"other\");\n\n  await DDBMacros.setItemMacroFlag(document, \"monsterFeature\", \"eyeRay.js\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"monsterFeature\", \"eyeRay.js\", [\"postActiveEffects\"]);\n\n  document.system.save = {\n    dc: null,\n    ability: \"\",\n    scaling: \"spell\",\n  };\n\n  foundry.utils.setProperty(document, \"flags.midiProperties.magiceffect\", true);\n\n  document.effects = [];\n  document = forceItemEffect(document);\n  return document;\n}\n","import DDBMacros from \"../DDBMacros.js\";\nimport { baseEffect } from \"../effects.js\";\n\nexport async function multiAttackEffect(document) {\n  let effect = baseEffect(document, document.name, { transfer: true, disabled: false });\n  await DDBMacros.setItemMacroFlag(document, \"monsterFeature\", \"multiAttack.js\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"monsterFeature\", \"multiAttack.js\", [\"preCompleted\"]);\n  document.effects.push(effect);\n  return document;\n}\n","/* eslint-disable require-atomic-updates */\nimport { addStatusEffectChange, applyDefaultMidiFlags, baseEffect, effectModules, forceItemEffect } from \"./effects.js\";\nimport { uncannyDodgeEffect } from \"./feats/uncannyDodge.js\";\n\nimport { absorptionEffect } from \"./monsterFeatures/absorbtion.js\";\nimport { generateLegendaryEffect } from \"./monsterFeatures/legendary.js\";\nimport { generateConditionOnlyEffect, generateOverTimeEffect } from \"./monsterFeatures/overTimeEffect.js\";\nimport { generatePackTacticsEffect } from \"./monsterFeatures/packTactics.js\";\nimport { generateReversalOfFortuneEffect } from \"./monsterFeatures/reversalOfFortune.js\";\nimport { generateSuaveDefenseEffect } from \"./monsterFeatures/suaveDefense.js\";\nimport { generateTauntEffect } from \"./monsterFeatures/taunt.js\";\nimport { skeletalJuggernautEffects } from \"./monsterFeatures/skeletalJuggernautEffects.js\";\nimport { venomTrollEffects } from \"./monsterFeatures/venomTroll.js\";\nimport { quasitEffects } from \"./monsterFeatures/quasit.js\";\nimport { invisibilityFeatureEffect } from \"./monsterFeatures/invisibility.js\";\nimport { recklessAttackEffect } from \"./feats/recklessAttack.js\";\nimport { maskOfTheWildEffect } from \"./feats/maskOfTheWild.js\";\nimport { deathlyChoirEffect } from \"./monsterFeatures/deathlyChoir.js\";\nimport { strahdZombieEffects } from \"./monsterFeatures/strahdZombie.js\";\nimport { beholderEyeRaysEffect } from \"./monsterFeatures/beholderEyeRays.js\";\nimport { spellReflectionEffect } from \"./monsterFeatures/spellReflection.js\";\nimport logger from \"../logger.js\";\nimport { giantSpiderEffects } from \"./monsterFeatures/giantSpider.js\";\nimport { beholderEyeRayLegendaryEffect } from \"./monsterFeatures/beholderEyeRayLegendary.js\";\nimport { multiAttackEffect } from \"./monsterFeatures/multiAttack.js\";\n\nexport function baseMonsterFeatureEffect(document, label,\n  { transfer = false, disabled = false } = {}\n) {\n  return baseEffect(document, label, { transfer, disabled });\n}\n\nexport function transferEffectsToActor(document) {\n  // when legacy transferral gets removed, we don't need to do this.\n  if (!CONFIG.ActiveEffect.legacyTransferral) return document;\n  if (!document.effects) document.effects = [];\n  // loop over items and item effect and transfer any effects to the actor\n  document.items.forEach((item) => {\n    item.effects.forEach((effect) => {\n      if (effect.transfer) {\n        const transferEffect = foundry.utils.duplicate(effect);\n        if (!foundry.utils.hasProperty(item, \"_id\")) item._id = foundry.utils.randomID();\n        if (!foundry.utils.hasProperty(effect, \"_id\")) effect._id = foundry.utils.randomID();\n        transferEffect._id = foundry.utils.randomID();\n        transferEffect.transfer = false;\n        transferEffect.origin = `Actor.${document._id}.Item.${item._id}`;\n        foundry.utils.setProperty(transferEffect, \"flags.ddbimporter.originName\", item.name);\n        foundry.utils.setProperty(transferEffect, \"flags.ddbimporter.localOriginEffect\", true);\n        document.effects.push(transferEffect);\n      }\n    });\n  });\n\n  return document;\n}\n\n/**\n * This function is mainly for effects that can't be dynamically generated\n * @param {*} document\n */\n// eslint-disable-next-line complexity\nexport async function monsterFeatureEffectAdjustment(ddbMonster, addMidiEffects = false) {\n  let npc = foundry.utils.duplicate(ddbMonster.npc);\n\n  if (!npc.effects) npc.effects = [];\n\n  const deps = effectModules();\n  if (!deps.hasCore || !addMidiEffects) {\n    logger.debug(`Adding Condition Effects to ${npc.name}`);\n    // damage over time effects\n    for (let [index, item] of npc.items.entries()) {\n      // auto condition effect\n      if (item.type !== \"spell\") {\n        // console.warn(`Auto-adding Condition Effect to ${item.name} in ${npc.name}`);\n        const overTimeResults = generateConditionOnlyEffect(npc, item);\n        item = overTimeResults.document;\n        npc = overTimeResults.actor;\n      }\n\n      item = forceItemEffect(item);\n      npc.items[index] = item;\n    };\n    return npc;\n  }\n\n  if (!addMidiEffects) return npc;\n\n  // damage over time effects\n  for (let [index, item] of npc.items.entries()) {\n    item = applyDefaultMidiFlags(item);\n    // Legendary Resistance Effects\n    if (item.name.startsWith(\"Legendary Resistance\")) item = generateLegendaryEffect(item);\n    else if (item.name.startsWith(\"Pack Tactics\")) item = generatePackTacticsEffect(item);\n    else if (item.name === \"Reversal of Fortune\") item = generateReversalOfFortuneEffect(item);\n    else if (item.name === \"Suave Defense\") item = generateSuaveDefenseEffect(ddbMonster, item);\n    else if (item.name === \"Uncanny Dodge\") item = uncannyDodgeEffect(item);\n    else if (item.name === \"Reckless\") item = recklessAttackEffect(item, true);\n    else if ([\"Shared Invisibility\", \"Fallible Invisibility\", \"Invisibility\", \"Superior Invisibility\"].includes(item.name))\n      item = invisibilityFeatureEffect(item);\n    else if (item.name.includes(\"Absorption\")) item = absorptionEffect(item);\n    else if (item.name === \"Mask of the Wild\") item = await maskOfTheWildEffect(item);\n    else if (item.name === \"Spell Reflection\") item = await spellReflectionEffect(item);\n    else if (item.name === \"Multiattack\") item = await multiAttackEffect(item);\n\n    // auto overtime effect\n    if (item.type !== \"spell\") {\n      const overTimeResults = generateOverTimeEffect(npc, item);\n      item = overTimeResults.document;\n      npc = overTimeResults.actor;\n    }\n\n    item = forceItemEffect(item);\n    npc.items[index] = item;\n  };\n\n  switch (npc.name) {\n    case \"Bard\": {\n      npc.items.forEach((item) => {\n        if (item.name === \"Taunt\") {\n          item = generateTauntEffect(item);\n        }\n      });\n      break;\n    }\n    case \"Beholder\": {\n      for (let [index, item] of npc.items.entries()) {\n        if (item.name === \"Eye Rays\") {\n          npc.items[index] = await beholderEyeRaysEffect(item, 3, 120);\n        } else if (item.name === \"Eye Ray\") {\n          npc.items[index] = await beholderEyeRayLegendaryEffect(item, 3, 120);\n        }\n      }\n      break;\n    }\n    case \"Beholder Zombie\": {\n      for (let [index, item] of npc.items.entries()) {\n        if (item.name === \"Eye Ray\") {\n          npc.items[index] = await beholderEyeRaysEffect(item, 1, 60);\n        }\n      }\n      break;\n    }\n    case \"Carrion Crawler\":\n    case \"Reduced-threat Carrion Crawler\": {\n      npc.items.forEach(function(item, index) {\n        if (item.name === \"Tentacles\") {\n          addStatusEffectChange(this[index].effects[0], \"Paralyzed\", 20, true);\n          this[index] = forceItemEffect(this[index]);\n        }\n      }, npc.items);\n      break;\n    }\n    case \"Giant Spider\": {\n      npc = giantSpiderEffects(npc);\n      break;\n    }\n    case \"Quasit\": {\n      npc = await quasitEffects(npc);\n      break;\n    }\n    case \"Rahadin\": {\n      for (let [index, item] of npc.items.entries()) {\n        if (item.name === \"Deathly Choir\") {\n          npc.items[index] = await deathlyChoirEffect(item);\n        }\n      }\n      break;\n    }\n    case \"Skeletal Juggernaut\": {\n      npc = await skeletalJuggernautEffects(npc);\n      break;\n    }\n    case \"Spectator\": {\n      for (let [index, item] of npc.items.entries()) {\n        if (item.name === \"Eye Rays\") {\n          npc.items[index] = await beholderEyeRaysEffect(item, 2, 90);\n        }\n      }\n      break;\n    }\n    case \"Strahd Zombie\": {\n      npc = await strahdZombieEffects(npc);\n      break;\n    }\n    case \"Venom Troll\": {\n      npc = await venomTrollEffects(npc);\n      break;\n    }\n    // no default\n  }\n\n  switch (npc.system.details.type.value) {\n    case \"dragon\": {\n      npc.items.forEach(function (item, index) {\n        if (item.name === \"Frightful Presence\") {\n          this[index].effects[0].duration.rounds = 10;\n        }\n      }, npc.items);\n      break;\n    }\n    // no default\n  }\n\n  return npc;\n}\n","import DDBMacros from \"../DDBMacros.js\";\nimport { effectModules } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport async function absorbElementsEffect(document) {\n  const effect = baseSpellEffect(document, `${document.name} - Extra Damage`);\n  effect.changes.push(\n    {\n      key: \"system.bonuses.mwak.damage\",\n      value: `(@item.level)d6`,\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    },\n    {\n      key: \"system.bonuses.msak.damage\",\n      value: `(@item.level)d6`,\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    },\n  );\n\n  effect.flags.dae.specialDuration = [\"DamageDealt\", \"turnEnd\"];\n  effect.duration.rounds = 2;\n  effect.duration.startTurn = 1;\n\n  document.effects.push(effect);\n\n  const resistanceEffect = baseSpellEffect(document, `${document.name} - Resistance`);\n  resistanceEffect.changes.push(\n    {\n      key: \"system.traits.dr.value\",\n      value: \"fire\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 20,\n    },\n  );\n  resistanceEffect.duration.rounds = 2;\n  foundry.utils.setProperty(resistanceEffect, \"flags.dae.specialDuration\", [\"turnStartSource\"]);\n  document.effects.push(resistanceEffect);\n\n  document.system.damage = {\n    parts: [],\n    versatile: \"\",\n    value: \"\",\n  };\n  document.system.target = {\n    value: null,\n    width: null,\n    units: \"\",\n    type: \"self\",\n  };\n  document.system.range = {\n    value: null,\n    long: null,\n    units: \"self\",\n  };\n  foundry.utils.setProperty(document, \"system.actionType\", \"util\");\n\n  if (effectModules().midiQolInstalled) {\n    await DDBMacros.setItemMacroFlag(document, \"spell\", \"absorbElements.js\");\n    DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"absorbElements.js\", [\"postActiveEffects\"]);\n    foundry.utils.setProperty(document, \"system.activation.type\", \"reactiondamage\");\n  }\n\n  return document;\n}\n\n\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function acidArrowEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.OverTime\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    value: `label=${document.name} (End of Turn),turn=end,damageRoll=(@spellLevel)d4[acid],damageType=acid,killAnim=true`,\n    priority: \"20\",\n  });\n  effect.flags.dae.specialDuration = [\"turnEnd\"];\n  effect.duration.rounds = 1;\n  document.effects.push(effect);\n\n  return document;\n}\n","import DDBMacros from \"../DDBMacros.js\";\nimport { effectModules } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport async function aidEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n\n  if (effectModules().midiQolInstalled) {\n    effect.changes.push({\n      key: \"system.attributes.hp.tempmax\",\n      value: \"5 * (@spellLevel - 1)\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 20,\n    });\n    document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n    await DDBMacros.setItemMacroFlag(document, \"spell\", \"aid.js\");\n    effect.changes.push(DDBMacros.generateMacroChange({ macroValues: \"@spellLevel\", macroType: \"spell\", macroName: \"aid.js\", priority: 0 }));\n  } else if (effectModules().daeInstalled) {\n    effect.changes.push({\n      key: \"system.attributes.hp.tempmax\",\n      value: \"5 * (@spellLevel - 1)\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 20,\n    });\n  }\n  document.effects.push(effect);\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function alterSelfEffect(document) {\n  let effectAquaticAdaptation = baseSpellEffect(document, document.name);\n  effectAquaticAdaptation.changes.push({\n    key: \"system.attributes.movement.swim\",\n    value: \"@attributes.movement.walk\",\n    mode: 4,\n    priority: 20,\n  });\n  document.effects.push(effectAquaticAdaptation);\n\n  let effectNaturalWeapons = baseSpellEffect(document, document.name);\n  effectNaturalWeapons.changes.push(\n    { key: \"items.Unarmed Strike.system.damage.parts.0.0\", value: \"1d6+@mod+1\", mode: 5, priority: 20 },\n    { key: \"items.Unarmed Strike.system.properties.mgc\", value: \"true\", mode: 5, priority: 20 },\n    { key: \"items.Unarmed Strike.system.proficient\", value: \"true\", mode: 5, priority: 20 },\n    { key: \"items.Unarmed Strike.system.attack.bonus\", value: \"1\", mode: 2, priority: 20 }\n  );\n  document.effects.push(effectNaturalWeapons);\n\n  return document;\n}\n","import { addStatusEffectChange } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function animalFriendshipEffect(document) {\n  let effect = baseSpellEffect(document, `${document.name} - Charmed`);\n  addStatusEffectChange(effect, \"Charmed\", 20, true);\n  document.effects.push(effect);\n\n  return document;\n}\n","import DDBSummonsManager from \"../../parser/companions/DDBSummonsManager.js\";\n\nexport async function arcaneEyeEffect(document) {\n  const manager = new DDBSummonsManager();\n  await manager.init();\n\n  const summonActors = manager.itemHandler.compendium.index.filter((i) =>\n    [\n      \"ArcaneEye\",\n    ].includes(i.flags?.ddbimporter?.summons?.summonsKey)\n  );\n  const profiles = summonActors\n    .map((actor) => {\n      return {\n        _id: actor._id,\n        name: actor.name,\n        uuid: actor.uuid,\n        count: 1,\n      };\n    });\n\n  const summons = {\n    \"match\": {\n      \"proficiency\": false,\n      \"attacks\": false,\n      \"saves\": false\n    },\n    \"bonuses\": {\n      \"ac\": \"\",\n      \"hp\": \"\",\n      \"attackDamage\": \"\",\n      \"saveDamage\": \"\",\n      \"healing\": \"\"\n    },\n    \"profiles\": profiles,\n    \"prompt\": true\n  };\n\n  foundry.utils.setProperty(document, \"system.summons\", summons);\n  foundry.utils.setProperty(document, \"system.actionType\", \"summ\");\n\n  return document;\n\n}\n","import DDBSummonsManager from \"../../parser/companions/DDBSummonsManager.js\";\n\nexport async function arcaneHandEffect(document) {\n  const manager = new DDBSummonsManager();\n  await manager.init();\n\n  const summonActors = manager.itemHandler.compendium.index.filter((i) =>\n    [\n      \"ArcaneHandRed\",\n      \"ArcaneHandPurple\",\n      \"ArcaneHandGreen\",\n      \"ArcaneHandBlue\",\n      \"ArcaneHandRock\",\n      \"ArcaneHandRainbow\",\n    ].includes(i.flags?.ddbimporter?.summons?.summonsKey)\n  );\n  const profiles = summonActors\n    .map((actor) => {\n      return {\n        _id: actor._id,\n        name: actor.name,\n        uuid: actor.uuid,\n        count: 1,\n      };\n    });\n\n  const summons = {\n    \"match\": {\n      \"proficiency\": false,\n      \"attacks\": true,\n      \"saves\": false\n    },\n    \"bonuses\": {\n      \"ac\": \"\",\n      \"hp\": \"@attributes.hp.max\",\n      \"attackDamage\": \"\",\n      \"saveDamage\": \"\",\n      \"healing\": \"\"\n    },\n    \"profiles\": profiles,\n    \"prompt\": true\n  };\n\n  foundry.utils.setProperty(document, \"system.summons\", summons);\n  foundry.utils.setProperty(document, \"system.actionType\", \"summ\");\n\n  return document;\n\n}\n","import DDBSummonsManager from \"../../parser/companions/DDBSummonsManager.js\";\n\nexport async function arcaneSwordEffect(document) {\n  const manager = new DDBSummonsManager();\n  await manager.init();\n\n  const summonActors = manager.itemHandler.compendium.index.filter((i) =>\n    [\n      \"ArcaneSwordSpectralGreen\",\n      \"ArcaneSwordAstralBlue\",\n    ].includes(i.flags?.ddbimporter?.summons?.summonsKey)\n  );\n  const profiles = summonActors\n    .map((actor) => {\n      return {\n        _id: actor._id,\n        name: actor.name,\n        uuid: actor.uuid,\n        count: 1,\n      };\n    });\n\n  const summons = {\n    \"match\": {\n      \"proficiency\": false,\n      \"attacks\": true,\n      \"saves\": false\n    },\n    \"bonuses\": {\n      \"ac\": \"\",\n      \"hp\": \"\",\n      \"attackDamage\": \"\",\n      \"saveDamage\": \"\",\n      \"healing\": \"\"\n    },\n    \"profiles\": profiles,\n    \"prompt\": true\n  };\n\n  foundry.utils.setProperty(document, \"system.summons\", summons);\n  foundry.utils.setProperty(document, \"system.actionType\", \"summ\");\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n\n  return document;\n\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function armorOfAgathysEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.dae.onUpdateTarget\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"Armor of Agathys,ItemMacro,system.attributes.hp.temp,@item.level\",\n      priority: 20,\n    },\n  );\n  effect.duration.seconds = 3600;\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.effects.push(effect);\n\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"armorOfAgathys.js\");\n  foundry.utils.setProperty(document, \"system.actionType\", \"util\");\n\n  return document;\n}\n","/* eslint-disable require-atomic-updates */\nimport { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { effectModules } from \"../effects.js\";\n\nexport async function auraOfLifeEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"system.traits.dr.value\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"necrotic\",\n      priority: \"20\",\n    },\n    // {\n    //   key: \"flags.midi-qol.OverTime\",\n    //   mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n    //   value: \"turn=start,label=Aura of Life (Start of Turn),damageRoll=1,damageType=heal,killAnim=true,applyCondition=##attributes.hp.value <= 0\",\n    //   priority: \"20\",\n    // }\n  );\n\n  if (effectModules().midiQolInstalled) {\n    await DDBMacros.setItemMacroFlag(document, \"spell\", \"auraOfLife.js\");\n    effect.flags[\"ActiveAuras\"] = {\n      isAura: true,\n      aura: \"Allies\",\n      radius: 30,\n      alignment: \"\",\n      type: \"\",\n      ignoreSelf: false,\n      height: false,\n      hidden: false,\n      onlyOnce: false,\n      save: false,\n      savedc: null,\n      displayTemp: true,\n    };\n    // foundry.utils.setProperty(effect, \"duration.seconds\", 600);\n    foundry.utils.setProperty(effect, \"flags.dae.macroRepeat\", \"startEveryTurn\");\n    effect.changes.push(DDBMacros.generateMacroChange({ macroValues: \"@token\", macroType: \"spell\", macroName: \"auraOfLife.js\" }));\n    document.system.actionType = \"other\";\n    document.system.damage.parts = [];\n    document.system.range = { value: null, units: \"self\", long: null };\n    document.system['target']['type'] = \"self\";\n  }\n\n  document.effects.push(effect);\n  return document;\n\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function baneEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    { key: \"system.bonuses.mwak.attack\", value: \"-1d4\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 0 },\n    { key: \"system.bonuses.rwak.attack\", value: \"-1d4\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 0 },\n    { key: \"system.bonuses.msak.attack\", value: \"-1d4\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 0 },\n    { key: \"system.bonuses.rsak.attack\", value: \"-1d4\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 0 },\n    { key: \"system.bonuses.abilities.save\", value: \"-1d4\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, priority: 20 }\n  );\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function banishmentEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"banishment.js\");\n  effect.changes.push(DDBMacros.generateMacroChange({ macroValues: \"@token\", macroType: \"spell\", macroName: \"banishment.js\", priority: 0 }));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function barkskinEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"system.attributes.ac.value\",\n      mode: CONST.ACTIVE_EFFECT_MODES.UPGRADE,\n      value: \"16\",\n      priority: \"100\",\n    },\n    {\n      key: \"system.attributes.ac.calc\",\n      mode: CONST.ACTIVE_EFFECT_MODES.UPGRADE,\n      value: \"custom\",\n      priority: \"100\",\n    }\n  );\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function beaconofHopeEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.advantage.ability.save.wis\",\n      value: \"1\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      priority: 20,\n    },\n    { key: \"flags.midi-qol.advantage.deathSave\", value: \"1\", mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE, priority: 20 }\n  );\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { effectModules, addStatusEffectChange } from \"../effects.js\";\n\nexport async function blackTentaclesEffect(document) {\n  if (!effectModules().activeAurasInstalled || !effectModules().midiQolInstalled) {\n    let effect = baseSpellEffect(document, `${document.name} - Restrained`);\n    addStatusEffectChange(effect, \"Restrained\", 20, true);\n    document.effects.push(effect);\n\n    return document;\n  }\n\n  let effect = baseSpellEffect(document, document.name);\n  await DDBMacros.setItemMacroFlag(document, \"generic\", DDBMacros.MACROS.ACTIVE_AURAS.AA_ON_ENTRY.file);\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"All\",\n    radius: null,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: false,\n    height: false,\n    hidden: false,\n    // hostile: true,\n    onlyOnce: false,\n    save: \"str\",\n    savedc: null,\n    displayTemp: true,\n  };\n  foundry.utils.setProperty(effect, \"duration.seconds\", 60);\n  foundry.utils.setProperty(effect, \"flags.dae.macroRepeat\", \"startEveryTurn\");\n  effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"generic\", macroName: DDBMacros.MACROS.ACTIVE_AURAS.AA_ON_ENTRY.file }));\n  DDBMacros.setMidiOnUseMacroFlag(document, \"generic\", DDBMacros.MACROS.ACTIVE_AURAS.AA_ON_ENTRY.file, [\"preActiveEffects\"]);\n\n  const aaMacroFlags = {\n    applyStart: true,\n    handleStartRoll: true,\n    autoDamageIfCondition: true,\n    applyEnd: false,\n    applyEntry: true,\n    applyImmediate: false,\n    everyEntry: false,\n    conditionEffect: true,\n    damageEffect: true,\n    removeOnOff: true,\n    allowVsRemoveCondition: true,\n    removalCheck: [\"str\", \"dex\"],\n    removalSave: null,\n    saveRemoves: false,\n    condition: \"Restrained\",\n    dice: `${document.system.damage.parts[0][0]}`,\n    damageType: `${document.system.damage.parts[0][1]}`,\n    save: `${document.system.save.ability}`,\n    sequencerFile: \"jb2a.black_tentacles.dark_purple\",\n  };\n  foundry.utils.setProperty(document, \"flags.ddbimporter.effect\", aaMacroFlags);\n  foundry.utils.setProperty(effect, \"flags.ddbimporter.effect\", aaMacroFlags);\n  // foundry.utils.setProperty(document, \"flags.midiProperties.nodam\", true);\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  document.system.save.ability = \"\";\n  document.system.actionType = \"other\";\n\n  document.effects.push(effect);\n  return document;\n\n}\n","import { effectModules, generateTokenMagicFXChange } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function blessEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    { key: \"system.bonuses.abilities.save\", value: \"+1d4\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, priority: 20 },\n    { key: \"system.bonuses.mwak.attack\", value: \"+1d4\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 0 },\n    { key: \"system.bonuses.rwak.attack\", value: \"+1d4\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 0 },\n    { key: \"system.bonuses.msak.attack\", value: \"+1d4\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 0 },\n    { key: \"system.bonuses.rsak.attack\", value: \"+1d4\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 0 },\n  );\n  document.effects.push(effect);\n\n  if (effectModules().tokenMagicInstalled) {\n    effect.changes.push(generateTokenMagicFXChange(\"bloom\"));\n  }\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { addStatusEffectChange, effectModules } from \"../effects.js\";\n\nexport async function blindnessDeafnessEffect(document) {\n  if (effectModules().midiQolInstalled) {\n    let effect = baseSpellEffect(document, document.name);\n    effect.changes.push({\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"label=Blindness/Deafness (End of Turn),turn=end,saveDC=@attributes.spelldc,saveAbility=con,savingThrow=true,saveMagic=true,killAnim=true\",\n      priority: \"20\",\n    });\n    effect.duration.rounds = 10;\n    effect.duration.seconds = 60;\n    await DDBMacros.setItemMacroFlag(document, \"spell\", \"blindnessDeafness.js\");\n    effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"spell\", macroName: \"blindnessDeafness.js\" }));\n    DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"blindnessDeafness.js\", [\"postActiveEffects\"]);\n    document.effects.push(effect);\n  } else {\n    let blindnessEffect = baseSpellEffect(document, \"Blindness\");\n    addStatusEffectChange(blindnessEffect, \"Blinded\", 20, true);\n    document.effects.push(blindnessEffect);\n    let deafenedEffect = baseSpellEffect(document, \"Deafness\");\n    addStatusEffectChange(deafenedEffect, \"Deafened\", 20, true);\n    document.effects.push(deafenedEffect);\n  }\n\n\n  return document;\n}\n","import { effectModules, generateTokenMagicFXChange } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function blurEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: 'flags.midi-qol.grants.disadvantage.attack.all',\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: '1',\n      priority: \"20\",\n    }\n  );\n\n  if (effectModules().tokenMagicInstalled) {\n    effect.changes.push(generateTokenMagicFXChange(\"blur\"));\n  }\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import DDBMacros from \"../DDBMacros.js\";\n\nexport async function boomingBladeEffect(document) {\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  document.system['target']['type'] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"boomingBlade.js\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"boomingBlade.js\", [\"postActiveEffects\"]);\n  return document;\n}\n","import DDBMacros from \"../DDBMacros.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport async function brandingSmiteEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.dnd5e.DamageBonusMacro\",\n      value: DDBMacros.generateItemMacroValue({ macroType: \"spell\", macroName: \"brandingSmite.js\", document }),\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.brandingSmite.level\",\n      value: \"@item.level\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      priority: \"20\",\n    },\n  );\n  foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"1Hit:rwak\", \"1Hit:mwak\"]);\n\n  document.system.actionType = \"other\";\n  document.system.target.type = \"self\";\n  document.system.damage.parts = [];\n  document.effects.push(effect);\n\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"brandingSmite.js\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"brandingSmite.js\", [\"postActiveEffects\"]);\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function callLightningEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(DDBMacros.generateMacroChange({ macroValues: \"@spellLevel\", macroType: \"spell\", macroName: \"callLightning.js\" }));\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.effects.push(effect);\n  foundry.utils.setProperty(document, \"system.actionType\", \"other\");\n  document.system.save.ability = \"\";\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"callLightning.js\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"callLightning.js\", [\"preTargeting\"]);\n\n  return document;\n}\n","import { addStatusEffectChange } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function charmPersonEffect(document) {\n  let effect = baseSpellEffect(document, `${document.name} - Charmed`);\n  addStatusEffectChange(effect, \"Charmed\", 20, true);\n  document.effects.push(effect);\n\n  return document;\n}\n","import { effectModules } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n// import DDBMacros from \"../DDBMacros.js\";\n\nexport async function chillTouchEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"system.traits.di.value\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"healing\",\n      priority: \"30\",\n    },\n  );\n  if (effectModules().midiQolInstalled) {\n    effect.changes.push(\n      {\n        key: \"flags.midi-qol.onUseMacroName\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: `function.DDBImporter.lib.DDBMacros.macroFunction.spell(\"chillTouchDisadvantage\"),preAttackRoll`,\n        // value: \"Chill Touch (Target effect),preAttackRoll\",\n        priority: \"30\",\n      },\n    );\n    // const itemMacroText = await DDBMacros.loadMacroFile(\"spell\", \"chillTouch.js\");\n    // document = DDBMacros.generateItemMacroFlag(document, itemMacroText);\n    // effect.changes.push(DDBMacros.generateMacroChange());\n    foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"turnEndSource\"]);\n  }\n  document.effects.push(effect);\n\n  return document;\n}\n","import DDBMacros from \"../DDBMacros.js\";\n\nexport async function chromaticOrbEffect(document) {\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"chromaticOrb.js\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"chromaticOrb.js\", [\"postDamageRoll\"]);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { effectModules } from \"../effects.js\";\n\nexport async function cloudkillEffect(document) {\n  // we require active auras for this effect\n  if (!effectModules().activeAurasInstalled || !effectModules().midiQolInstalled) return document;\n\n  await DDBMacros.setItemMacroFlag(document, \"generic\", DDBMacros.MACROS.ACTIVE_AURAS.AA_DAMAGE_ON_ENTRY.file);\n\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value:\n        `label=${document.name} (Start of Turn),turn=start, saveAbility=con, killAnim=true, saveDC=@attributes.spelldc, saveDamage=halfdamage, rollType=save, saveMagic=true, damageBeforeSave=false, damageRoll=(@item.level)d8, damageType=${document.system.damage.parts[0][1]}`,\n      priority: \"20\",\n    },\n  );\n  effect.changes.push(DDBMacros.generateMacroChange({ macroValues: \"@item.level\", macroType: \"generic\", macroName: DDBMacros.MACROS.ACTIVE_AURAS.AA_DAMAGE_ON_ENTRY.file }));\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"All\",\n    radius: 20,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: false,\n    height: false,\n    hidden: false,\n    // hostile: true,\n    onlyOnce: false,\n    save: \"str\",\n    savedc: null,\n    displayTemp: true,\n  };\n  foundry.utils.setProperty(effect, \"duration.seconds\", 600);\n  // foundry.utils.setProperty(effect, \"flags.dae.macroRepeat\", \"startEveryTurn\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"generic\", DDBMacros.MACROS.ACTIVE_AURAS.AA_DAMAGE_ON_ENTRY.file, [\"preActiveEffects\"]);\n  foundry.utils.setProperty(document, \"flags.ddbimporter.effect\", {\n    dice: document.system.damage.parts[0][0],\n    damageType: document.system.damage.parts[0][1],\n    save: document.system.save.ability,\n    sequencerFile: \"jb2a.fog_cloud.2.green\",\n  });\n\n  document.effects.push(effect);\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  document.system.actionType = \"other\";\n  document.system.save.ability = \"\";\n\n  return document;\n}\n","import DDBMacros from \"../DDBMacros.js\";\nimport { addStatusEffectChange, effectModules } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport async function colorSprayEffect(document) {\n\n  if (effectModules().midiQolInstalled) {\n    DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"colorSpray.js\", [\"postActiveEffects\"]);\n    document.system.damage = { parts: [[\"6d10\", \"midi-none\"]], versatile: \"\", value: \"\" };\n    await DDBMacros.setItemMacroFlag(document, \"spell\", \"colorSpray.js\");\n  } else {\n    let effect = baseSpellEffect(document, `${document.name} - Blinded`);\n    addStatusEffectChange(effect, \"Blinded\", 20, true);\n    document.effects.push(effect);\n\n  }\n\n  return document;\n}\n","import DDBMacros from \"../DDBMacros.js\";\nimport { effectModules } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport async function commandEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n\n  if (effectModules().midiQolInstalled) {\n    await DDBMacros.setItemMacroFlag(document, \"spell\", \"command.js\");\n    DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"command.js\", [\"postSave\"]);\n    effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"spell\", macroName: \"command.js\" }));\n    effect.duration = {\n      \"seconds\": 12,\n      \"rounds\": 1,\n      \"turns\": 1,\n    };\n    foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"turnStart\"]);\n  }\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function comprehendLanguagesEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: 'system.traits.languages.all',\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: '1',\n      priority: \"20\",\n    }\n  );\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function confusionEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.OverTime\",\n    mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n    value: \"label=Confusion (End of Turn),turn=end,saveAbility=wis,saveDC=@attributes.spelldc,saveMagic=true,killAnim=true\",\n    priority: \"20\",\n  });\n  effect.flags.dae.macroRepeat = \"startEveryTurn\";\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"confusion.js\");\n  effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"spell\", macroName: \"confusion.js\" }));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { addStatusEffectChange, effectModules } from \"../effects.js\";\n\nexport async function contagionEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  addStatusEffectChange(effect, \"Poisoned\", 20, true);\n\n  if (effectModules().midiQolInstalled) {\n    effect.flags.dae.macroRepeat = \"endEveryTurn\";\n    await DDBMacros.setItemMacroFlag(document, \"spell\", \"contagion.js\");\n    effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"spell\", macroName: \"contagion.js\" }));\n  }\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { effectModules } from \"../effects.js\";\n\nexport async function createBonfireEffect(document) {\n  // we require active auras for this effect\n  if (!effectModules().activeAurasInstalled) return document;\n\n  await DDBMacros.setItemMacroFlag(document, \"generic\", DDBMacros.MACROS.ACTIVE_AURAS.AA_DAMAGE_ON_ENTRY.file);\n\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value:\n        \"turn=end,label=Create Bonfire (End of Turn),damageRoll=(@cantripDice)d8,damageType=fire,saveRemove=false,saveDC=@attributes.spelldc,saveAbility=dex,saveDamage=nodamage,killAnim=true\",\n      priority: \"20\",\n    },\n  );\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"All\",\n    radius: null,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: false,\n    height: false,\n    hidden: false,\n    // hostile: true,\n    onlyOnce: false,\n    save: \"dex\",\n    savedc: null,\n    displayTemp: true,\n  };\n  foundry.utils.setProperty(effect, \"duration.seconds\", 60);\n  foundry.utils.setProperty(effect, \"duration.rounds\", 10);\n  effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"generic\", macroName: DDBMacros.MACROS.ACTIVE_AURAS.AA_DAMAGE_ON_ENTRY.file }));\n  DDBMacros.setMidiOnUseMacroFlag(document, \"generic\", DDBMacros.MACROS.ACTIVE_AURAS.AA_DAMAGE_ON_ENTRY.file, [\"preActiveEffects\"]);\n\n  document.effects.push(effect);\n\n  foundry.utils.setProperty(document, \"flags.ddbimporter.effect\", {\n    dice: document.system.damage.parts[0][0],\n    damageType: document.system.damage.parts[0][1],\n    save: document.system.save.ability,\n    sequencerFile: \"jb2a.flames.01.orange\",\n    sequencerScale: 2,\n    isCantrip: true,\n    saveOnEntry: true,\n  });\n\n  return document;\n}\n","import { addStatusEffectChange, effectModules } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function crownofMadnessEffect(document) {\n  let effect = baseSpellEffect(document, `${document.name} - Charmed`);\n  addStatusEffectChange(effect, \"Charmed\", 20, true);\n\n  if (effectModules().midiQolInstalled) {\n    effect.changes.push({\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"label=Crown of Madness (End of Turn),turn=end,saveDC=@attributes.spelldc,saveAbility=wis,saveMagic=true,killAnim=true\",\n      priority: \"20\",\n    });\n  }\n  document.effects.push(effect);\n\n  return document;\n}\n","import { effectModules, generateATLChange } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function crownofStarsEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n\n  if (effectModules().atlInstalled) {\n    effect.changes.push(generateATLChange(\"ATL.light.dim\", CONST.ACTIVE_EFFECT_MODES.UPGRADE, '60'));\n    effect.changes.push(generateATLChange(\"ATL.light.bright\", CONST.ACTIVE_EFFECT_MODES.UPGRADE, '30'));\n  }\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n\n  effect.changes.push(DDBMacros.generateMacroChange({ macroValues: \"@spellLevel\", macroType: \"spell\", macroName: \"crownofStars.js\" }));\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  document.system.actionType = \"other\";\n  document.effects.push(effect);\n\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"crownofStars.js\");\n  return document;\n}\n","import DDBSummonsManager from \"../../parser/companions/DDBSummonsManager.js\";\n\nexport async function dancingLightsEffect(document) {\n  const manager = new DDBSummonsManager();\n  await manager.init();\n\n  const summonActors = manager.itemHandler.compendium.index.filter((i) =>\n    [\n      \"DancingLightsYellow\",\n      \"DancingLightsBlueTeal\",\n      \"DancingLightsGreen\",\n      \"DancingLightsBlueYellow\",\n      \"DancingLightsPink\",\n      \"DancingLightsPurpleGreen\",\n      \"DancingLightsRed\",\n    ].includes(i.flags?.ddbimporter?.summons?.summonsKey)\n  );\n  const profiles = summonActors\n    .map((actor) => {\n      return {\n        _id: actor._id,\n        name: actor.name,\n        uuid: actor.uuid,\n        count: 4,\n      };\n    });\n\n  const summons = {\n    \"match\": {\n      \"proficiency\": false,\n      \"attacks\": false,\n      \"saves\": false\n    },\n    \"bonuses\": {\n      \"ac\": \"\",\n      \"hp\": \"\",\n      \"attackDamage\": \"\",\n      \"saveDamage\": \"\",\n      \"healing\": \"\"\n    },\n    \"profiles\": profiles,\n    \"prompt\": true\n  };\n\n  foundry.utils.setProperty(document, \"system.summons\", summons);\n  foundry.utils.setProperty(document, \"system.actionType\", \"summ\");\n\n  return document;\n\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { effectModules } from \"../effects.js\";\n\nexport async function darknessEffect(document) {\n  const macroToggle = `<br><p>[[/ddbifunc functionName=\"darkness\" functionType=\"spell\"]]{Darkness Toggle}</div></p>`;\n  document.system.description.value += macroToggle;\n  if (document.system.description.chat !== \"\") document.system.description.chat += macroToggle;\n\n  if (!effectModules().midiQolInstalled) return document;\n\n  let effect = baseSpellEffect(document, document.name);\n  // foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"darkness.js\");\n  effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"spell\", macroName: \"darkness.js\" }));\n  document.effects.push(effect);\n  DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"darkness.js\", [\"preTargeting\"]);\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { effectModules, generateATLChange } from \"../effects.js\";\n\nexport async function darkvisionEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"system.attributes.senses.darkvision\",\n    value: \"60\",\n    mode: CONST.ACTIVE_EFFECT_MODES.UPGRADE,\n    priority: 20,\n  });\n\n  if (effectModules().atlInstalled) {\n    effect.changes.push(\n      generateATLChange(\"ATL.sight.range\", CONST.ACTIVE_EFFECT_MODES.UPGRADE, 60, 5),\n      generateATLChange(\"ATL.sight.visionMode\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, \"darkvision\", 5),\n    );\n  } else if (effectModules().midiQolInstalled) {\n    await DDBMacros.setItemMacroFlag(document, \"spell\", \"darkvision.js\");\n    effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"spell\", macroName: \"darkvision.js\" }));\n  }\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function divineFavorEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    { key: \"system.bonuses.mwak.damage\", value: \"1d4[Radiant]\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 0 },\n    { key: \"system.bonuses.rwak.damage\", value: \"1d4[Radiant]\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 0 }\n  );\n  document.effects.push(effect);\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function divineWordEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"divineWord.js\");\n  effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"spell\", macroName: \"divineWord.js\" }));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { addStatusEffectChange } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function dominateBeastEffect(document) {\n  let effect = baseSpellEffect(document, `${document.name} - Charmed`);\n  addStatusEffectChange(effect, \"Charmed\", 20, true);\n  document.effects.push(effect);\n\n  return document;\n}\n","import { addStatusEffectChange } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function dominateMonsterEffect(document) {\n  let effect = baseSpellEffect(document, `${document.name} - Charmed`);\n  addStatusEffectChange(effect, \"Charmed\", 20, true);\n  document.effects.push(effect);\n\n  return document;\n}\n","import { addStatusEffectChange } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function dominatePersonEffect(document) {\n  let effect = baseSpellEffect(document, `${document.name} - Charmed`);\n  addStatusEffectChange(effect, \"Charmed\", 20, true);\n  document.effects.push(effect);\n\n  return document;\n}\n","import utils from \"../../lib/utils.js\";\nimport { baseEnchantmentEffect } from \"../effects.js\";\n\nexport function elementalWeaponEffect(document) {\n  document.system.damage.parts = [];\n  document.system.chatFlavor = \"\";\n\n  const elementTypes = [\n    { type: \"acid\", img: \"icons/magic/acid/dissolve-bone-white.webp\" },\n    { type: \"cold\", img: \"icons/magic/water/barrier-ice-crystal-wall-jagged-blue.webp\" },\n    { type: \"fire\", img: \"icons/magic/fire/barrier-wall-flame-ring-yellow.webp\" },\n    { type: \"lightning\", img: \"icons/magic/lightning/bolt-strike-blue.webp\" },\n    { type: \"thunder\", img: \"icons/magic/sonic/explosion-shock-wave-teal.webp\" },\n  ];\n\n  const enchantments = [\n    { bonus: \"1\", min: null, max: 3 },\n    { bonus: \"2\", min: 5, max: 6 },\n    { bonus: \"3\", min: 7, max: null },\n  ];\n  document.system.actionType = \"ench\";\n  foundry.utils.setProperty(document, \"system.enchantment\", {\n    restrictions: {\n      allowMagical: false,\n      type: \"weapon\",\n    },\n  });\n  for (const element of elementTypes) {\n    for (const e of enchantments) {\n      let effect = baseEnchantmentEffect(document, `${document.name}: ${utils.capitalize(element.type)} +${e.bonus}`);\n      e.img = element.img;\n      foundry.utils.setProperty(effect, \"flags.dnd5e.enchantment.level\", { min: e.min, max: e.max });\n      effect.changes.push(\n        {\n          key: \"name\",\n          mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n          value: `{}, +${e.bonus} (${utils.capitalize(element.type)})`,\n          priority: 20,\n        },\n        {\n          key: \"system.properties\",\n          mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n          value: \"mgc\",\n          priority: 20,\n        },\n        {\n          key: \"system.magicalBonus\",\n          mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n          value: e.bonus,\n          priority: 20,\n        },\n        {\n          key: \"system.damage.parts\",\n          mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n          value: `[[\"${e.bonus}d4[${element.type}]\", \"${element.type}\"]]`,\n          priority: 20,\n        }\n      );\n      e.description = `This weapon has become a +${e.bonus} magic weapon, granting a bonus to attack and damage rolls.`;\n      document.effects.push(effect);\n    }\n  }\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function enhanceAbilityEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.duration.rounds = 600;\n  effect.duration.seconds = 3600;\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"enhanceAbility.js\");\n  effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"spell\", macroName: \"enhanceAbility.js\" }));\n  DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"enhanceAbility.js\", [\"postActiveEffects\"]);\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { effectModules } from \"../effects.js\";\n\nexport async function enlargeReduceEffect(document) {\n\n  // const macroToggle = `<br><p>[[/ddbifunc functionName=\"enlargeReduce\" functionType=\"spell\"]]{Enlarge/Reduce Toggle}</div></p>`;\n  // document.system.description.value += macroToggle;\n  // if (document.system.description.chat !== \"\") document.system.description.chat += macroToggle;\n\n  if (!effectModules().atlInstalled) return document;\n\n  let effect = baseSpellEffect(document, document.name);\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"enlargeReduce.js\");\n  effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"spell\", macroName: \"enlargeReduce.js\", priority: 0 }));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { addStatusEffectChange, effectModules } from \"../effects.js\";\n\nexport async function ensnaringStrikeEffect(document) {\n  if (effectModules().midiQolInstalled) {\n    let effect = baseSpellEffect(document, document.name);\n    await DDBMacros.setItemMacroFlag(document, \"spell\", \"ensnaringStrike.js\");\n    effect.changes.push(\n      DDBMacros.generateOnUseMacroChange({ macroPass: \"postActiveEffects\", macroType: \"spell\", macroName: \"ensnaringStrike.js\", document }),\n    );\n    foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n    foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n\n    document.effects.push(effect);\n    document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n    document.system.actionType = null;\n    document.system.save.ability = \"\";\n    document.system.target.type = \"self\";\n    // DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"ensnaringStrike.js\", [\"preTargeting\"]);\n  } else {\n    let effect = baseSpellEffect(document, `${document.name} - Restrained`);\n    addStatusEffectChange(effect, \"Restrained\", 20, true);\n    document.effects.push(effect);\n  }\n\n  return document;\n}\n","import { addStatusEffectChange } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function entangleEffect(document) {\n  let effect = baseSpellEffect(document, `${document.name} - Restrained`);\n  addStatusEffectChange(effect, \"Restrained\", 20, true);\n\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"You can take an action to break free by rolling a Strength Ability Check\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: `turn=end, rollType=check, actionSave=true, saveAbility=str, saveDC=@attributes.spelldc, label=Restrained by ${document.name}`,\n      priority: \"20\",\n    },\n  );\n\n  foundry.utils.setProperty(effect, \"duration.seconds\", 60);\n  foundry.utils.setProperty(effect, \"duration.rounds\", 10);\n  foundry.utils.setProperty(effect, \"flags.dae.stackable\", \"noneName\");\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function eyebiteEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"eyebite.js\");\n  effect.flags.dae.macroRepeat = \"startEveryTurn\";\n  effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"spell\", macroName: \"eyebite.js\" }));\n  document.effects.push(effect);\n  foundry.utils.setProperty(document, \"system.actionType\", \"other\");\n  foundry.utils.setProperty(document, \"system.save.ability\", \"\");\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { effectModules, generateTokenMagicFXChange } from \"../effects.js\";\n\nexport async function faerieFireEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.grants.advantage.attack.all\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    value: \"1\",\n    priority: \"20\",\n  });\n\n  if (game.modules.get(\"ATL\")?.active) {\n    await DDBMacros.setItemMacroFlag(document, \"spell\", \"faerieFire.js\");\n    effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"spell\", macroName: \"faerieFire.js\" }));\n  }\n\n  if (effectModules().tokenMagicInstalled) {\n    effect.changes.push(generateTokenMagicFXChange(\"glow\"));\n  }\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { addStatusEffectChange } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function fearEffect(document) {\n  let effect = baseSpellEffect(document, `${document.name} - Frightened`);\n  addStatusEffectChange(effect, \"Frightened\", 20, true);\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function feeblemindEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    { key: \"system.abilities.cha.value\", value: \"1\", mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE, priority: 50 },\n    { key: \"system.abilities.int.value\", value: \"1\", mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE, priority: 50 },\n    { key: \"flags.midi-qol.fail.spell.all\", value: \"1\", mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE, priority: 20 }\n  );\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { effectModules } from \"../effects.js\";\n\nexport async function fireShieldEffect(document) {\n  if (effectModules().midiQolInstalled) {\n    let effect = baseSpellEffect(document, document.name);\n    await DDBMacros.setItemMacroFlag(document, \"spell\", \"fireShield.js\");\n    effect.changes.push(\n      DDBMacros.generateOnUseMacroChange({ macroPass: \"isDamaged\", macroType: \"spell\", macroName: \"fireShield.js\" }),\n    );\n    DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"fireShield.js\", [\"postActiveEffects\"]);\n\n    effect.duration.seconds = 600;\n    effect.duration.rounds = 60;\n\n    document.effects.push(effect);\n    document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n    document.system.target.type = \"self\";\n    foundry.utils.setProperty(document, \"system.actionType\", \"util\");\n\n    foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  } else {\n    let fireEffect = baseSpellEffect(document, \"Cold Shield\");\n    fireEffect.changes.push({\n      key: \"system.traits.dr.value\",\n      value: \"fire\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 0,\n    });\n    document.effects.push(fireEffect);\n    let coldEffect = baseSpellEffect(document, \"Warm Shield\");\n    coldEffect.changes.push({\n      key: \"system.traits.dr.value\",\n      value: \"cold\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 0,\n    });\n    document.effects.push(coldEffect);\n  }\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function flameBladeEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    DDBMacros.generateMacroChange({ macroValues: \"@spellLevel\", macroType: \"spell\", macroName: \"flameBlade.js\" })\n  );\n\n  effect.changes.push(\n    {\n      key: \"ATL.light.dim\",\n      mode: CONST.ACTIVE_EFFECT_MODES.UPGRADE,\n      value: \"20\",\n      priority: 20,\n    },\n    {\n      key: \"ATL.light.bright\",\n      mode: CONST.ACTIVE_EFFECT_MODES.UPGRADE,\n      value: \"10\",\n      priority: 20,\n    }\n  );\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.system.actionType = \"other\";\n  document.effects.push(effect);\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"flameBlade.js\", [\"preTargeting\"]);\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"flameBlade.js\");\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { addStatusEffectChange, effectModules } from \"../effects.js\";\n\nexport async function fleshtoStoneEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  addStatusEffectChange(effect, \"Restrained\", 20, true);\n\n  if (effectModules().midiQolInstalled) {\n    await DDBMacros.setItemMacroFlag(document, \"spell\", \"fleshtoStone.js\");\n    effect.flags.dae.macroRepeat = \"endEveryTurn\";\n    effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"spell\", macroName: \"fleshtoStone.js\" }));\n  }\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function flyEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"system.attributes.movement.fly\",\n    value: \"60\",\n    mode: CONST.ACTIVE_EFFECT_MODES.UPGRADE,\n    priority: 20,\n  });\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function frostbiteEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    { key: \"flags.midi-qol.disadvantage.attack.mwak\", value: \"1\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, priority: 50 },\n    { key: \"flags.midi-qol.disadvantage.attack.rwak\", value: \"1\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, priority: 50 },\n  );\n  foundry.utils.setProperty(effect, \"duration.rounds\", 2);\n  foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"1Attack:rwak\", \"1Attack:mwak\", \"turnEnd\"]);\n  document.effects.push(effect);\n\n  return document;\n}\n","import { addStatusEffectChange } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function geasEffect(document) {\n  let effect = baseSpellEffect(document, `${document.name} - Charmed`);\n  addStatusEffectChange(effect, \"Charmed\", 20, true);\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { addStatusEffectChange, effectModules } from \"../effects.js\";\n\nexport async function greaseEffect(document) {\n\n  if (!effectModules().activeAurasInstalled || !effectModules().midiQolInstalled) {\n    let effect = baseSpellEffect(document, `${document.name} - Prone`);\n    addStatusEffectChange(effect, \"Prone\", 20, true);\n    document.effects.push(effect);\n\n    return document;\n  }\n\n  // if we have active auras use a more advanced macro\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: `turn=end,label=${document.name},saveRemove=false,saveDC=@attributes.spelldc,saveAbility=dex,saveDamage=nodamage,killAnim=true,macro=${DDBMacros.MACROS.ACTIVE_AURAS.AA_CONDITION_ON_ENTRY.name}`,\n      priority: \"20\",\n    },\n  );\n\n  await DDBMacros.setItemMacroFlag(document, \"generic\", DDBMacros.MACROS.ACTIVE_AURAS.AA_CONDITION_ON_ENTRY.file);\n  DDBMacros.setMidiOnUseMacroFlag(document, \"generic\", DDBMacros.MACROS.ACTIVE_AURAS.AA_CONDITION_ON_ENTRY.file, [\"preActiveEffects\"]);\n  effect.changes.push(DDBMacros.generateMacroChange({ macroValues: \"@item.level @attributes.spelldc\", macroType: \"generic\", macroName: DDBMacros.MACROS.ACTIVE_AURAS.AA_CONDITION_ON_ENTRY.file }));\n\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"All\",\n    radius: null,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: false,\n    height: false,\n    hidden: false,\n    // hostile: true,\n    onlyOnce: false,\n    save: \"dex\",\n    savedc: null,\n    displayTemp: true,\n  };\n  foundry.utils.setProperty(effect, \"duration.seconds\", 60);\n  // foundry.utils.setProperty(effect, \"flags.dae.macroRepeat\", \"startEveryTurn\");\n  const aaMacroFlags = {\n    applyStart: true,\n    applyEnd: true,\n    applyEntry: true,\n    applyImmediate: true,\n    everyEntry: true,\n    removeOnOff: false,\n    allowVsRemoveCondition: false,\n    removalCheck: null,\n    removalSave: null,\n    saveRemoves: false,\n    condition: \"Prone\",\n    save: document.system.save.ability,\n    sequencerFile: \"jb2a.grease.dark_green.loop\",\n  };\n  foundry.utils.setProperty(document, \"flags.ddbimporter.effect\", aaMacroFlags);\n  foundry.utils.setProperty(effect, \"flags.ddbimporter.effect\", aaMacroFlags);\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { addStatusEffectChange } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport async function greaterInvisibilityEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  addStatusEffectChange(effect, \"Invisible\", 20, true);\n  document.effects.push(effect);\n\n  return document;\n}\n","import DDBMacros from \"../DDBMacros.js\";\n\nexport async function greenFlameBladeEffect(document) {\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  document.system['target']['type'] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.system.actionType = \"other\";\n  document.system.save.ability = \"\";\n  document.system.chatFlavor = \"\";\n  DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"greenFlameBlade.js\", [\"postActiveEffects\"]);\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"greenFlameBlade.js\");\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function guidanceEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: 'flags.midi-qol.optional.guidance.label',\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: 'Guidance',\n      priority: \"20\",\n    },\n    {\n      key: 'flags.midi-qol.optional.guidance.check.all',\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: '+ 1d4',\n      priority: \"20\",\n    },\n    {\n      key: 'flags.midi-qol.optional.guidance.skill.all',\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: '+ 1d4',\n      priority: \"20\",\n    },\n    {\n      key: 'system.attributes.init.bonus',\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: '+ 1d4',\n      priority: \"20\",\n    },\n  );\n  foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\n    // \"isSkill\",\n    // \"isCheck\",\n    \"isInitiative\",\n  ]);\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function guidingBoltEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.grants.advantage.attack.all\",\n    value: \"1\",\n    mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n    priority: 20,\n  });\n  effect.flags.dae.specialDuration = [\"isAttacked\"];\n  effect.duration = {\n    startTime: null,\n    seconds: null,\n    rounds: 1,\n    turns: null,\n    startRound: null,\n    startTurn: null,\n  };\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function hailOfThornsEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"hailOfThorns.js\");\n  effect.changes.push(\n    DDBMacros.generateOnUseMacroChange({ macroPass: \"postActiveEffects\", macroType: \"spell\", macroName: \"hailOfThorns.js\", document }),\n  );\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n\n  document.effects.push(effect);\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  document.system.actionType = null;\n  document.system.save.ability = \"\";\n  document.system.target.type = \"self\";\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { effectModules } from \"../effects.js\";\n\nexport async function heroesFeastEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    { key: \"system.traits.di.value\", value: \"poison\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 20 },\n    { key: \"system.traits.ci.value\", value: \"frightened\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 20 },\n    { key: \"system.traits.ci.value\", value: \"poisoned\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, priority: 20 },\n  );\n  if (effectModules().midiQolInstalled) {\n    await DDBMacros.setItemMacroFlag(document, \"spell\", \"heroesFeast.js\");\n    effect.changes.push(DDBMacros.generateMacroChange({ macroValues: \"@damage\", macroType: \"spell\", macroName: \"heroesFeast.js\", priority: 0 }));\n  }\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { effectModules } from \"../effects.js\";\n\nexport async function heroismEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"system.traits.ci.value\",\n      value: \"frightened\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: 20,\n    },\n  );\n\n  if (effectModules().midiQolInstalled) {\n    effect.changes.push(\n      {\n        key: \"flags.midi-qol.OverTime\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: `turn=start,damageRoll=@attributes.spellmod,damageType=temphp,label=${document.name} Renewal,fastForwardDamage=true`,\n        priority: 20,\n      },\n    );\n    await DDBMacros.setItemMacroFlag(document, \"spell\", \"heroism.js\");\n    effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"spell\", macroName: \"heroism.js\" }));\n    // eslint-disable-next-line require-atomic-updates\n    document.system.damage.parts = [];\n  }\n  document.effects.push(effect);\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\n// this one is a bit different, the macro is triggered by midi-qol and applies effects to the actor\n// the Marked effect gets applied to the target\nexport async function hexEffect(document) {\n  let effect = baseSpellEffect(document, \"Marked\");\n\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"hex.js\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"hex.js\", [\"postActiveEffects\"]);\n  foundry.utils.setProperty(document, \"system.actionType\", \"util\");\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { addStatusEffectChange, effectModules } from \"../effects.js\";\n\nexport async function hideousLaughterEffect(document) {\n  let effect = baseSpellEffect(document, `${document.name} - Incapacitated`);\n  addStatusEffectChange(effect, \"Incapacitated\", 20, true);\n\n  if (effectModules().midiQolInstalled) {\n    effect.changes.push({\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"label=Hideous Laughter (End of Turn),turn=end,saveDC=@attributes.spelldc,saveAbility=wis,saveMagic=true,killAnim=true\",\n      priority: \"20\",\n    });\n\n    await DDBMacros.setItemMacroFlag(document, \"spell\", \"hideousLaughter.js\");\n    effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"spell\", macroName: \"hideousLaughter.js\" }));\n  }\n  document.effects.push(effect);\n\n  let proneEffect = baseSpellEffect(document, `${document.name} - Prone`);\n  addStatusEffectChange(proneEffect, \"Prone\", 20, true);\n  document.effects.push(proneEffect);\n\n  return document;\n}\n","import { addStatusEffectChange, effectModules } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function holdMonsterEffect(document) {\n  let effect = baseSpellEffect(document, `${document.name} - Paralyzed`);\n  addStatusEffectChange(effect, \"Paralyzed\", 20, true);\n\n  if (effectModules().midiQolInstalled) {\n    effect.changes.push({\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: `label=${document.name} (End of Turn),turn=end,saveDC=@attributes.spelldc,saveAbility=wis,savingThrow=true,saveMagic=true,killAnim=true`,\n      priority: \"20\",\n    });\n  }\n  document.effects.push(effect);\n\n  return document;\n}\n","import { addStatusEffectChange, effectModules } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function holdPersonEffect(document) {\n  let effect = baseSpellEffect(document, `${document.name} - Paralyzed`);\n  addStatusEffectChange(effect, \"Paralyzed\", 20, true);\n\n  if (effectModules().midiQolInstalled) {\n    effect.changes.push({\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: `label=${document.name} (End of Turn),turn=end,saveDC=@attributes.spelldc,saveAbility=wis,savingThrow=true,saveMagic=true,killAnim=true`,\n      priority: \"20\",\n    });\n  }\n  document.effects.push(effect);\n\n  return document;\n}\n","import { generateATLChange } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function holyAuraEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.advantage.ability.save.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"1\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.grants.disadvantage.attack.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"1\",\n      priority: \"20\",\n    },\n  );\n\n  if (CONFIG.DDBI.EFFECT_CONFIG.MODULES.installedModules.atlInstalled) {\n    effect.changes.push(generateATLChange(\"ATL.light.dim\", CONST.ACTIVE_EFFECT_MODES.UPGRADE, '5'));\n    effect.changes.push(generateATLChange(\"ATL.light.color\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, '#ffffff'));\n    effect.changes.push(generateATLChange(\"ATL.light.alpha\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, '0.25'));\n    const lightAnimation = '{\"type\": \"sunburst\", \"speed\": 2,\"intensity\": 4}';\n    effect.changes.push(generateATLChange(\"ATL.light.animation\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, lightAnimation));\n  }\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\n// this one is a bit different, the macro is triggered by midi-qol and applies effects to the actor\n// the Marked effect gets applied to the target\nexport async function huntersMarkEffect(document) {\n  let effect = baseSpellEffect(document, \"Marked\");\n  effect.changes.push(\n    {\n      key: \"flags.dae.onUpdateSource\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"Hunter's Mark\",\n      priority: 20,\n    },\n  );\n  effect.duration.seconds = 3600;\n  document.effects.push(effect);\n\n  let damageBonusEffect = baseSpellEffect(document, \"Hunter's Mark\");\n  damageBonusEffect.changes.push({\n    key: \"flags.dnd5e.DamageBonusMacro\",\n    value: DDBMacros.generateItemMacroValue({ macroType: \"spell\", macroName: \"huntersMark.js\", document }),\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    priority: 20,\n  });\n  damageBonusEffect.transfer = true;\n\n  foundry.utils.setProperty(damageBonusEffect, \"flags.dae.transfer\", true);\n  document.effects.push(damageBonusEffect);\n\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"huntersMark.js\");\n  foundry.utils.setProperty(document, \"system.actionType\", \"util\");\n\n  return document;\n}\n","import { addStatusEffectChange, effectModules } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function hypnoticPatternEffect(document) {\n  if (effectModules().midiQolInstalled) {\n    let effectHypnoticPatternCharmed = baseSpellEffect(document, `${document.name} - Charmed`);\n    addStatusEffectChange(effectHypnoticPatternCharmed, \"Charmed\", 20, true);\n    document.effects.push(effectHypnoticPatternCharmed);\n\n    let effectHypnoticPatternIncapacitated = baseSpellEffect(document, `${document.name} - Incapacitated`);\n    addStatusEffectChange(effectHypnoticPatternIncapacitated, \"Incapacitated\", 20, true);\n    document.effects.push(effectHypnoticPatternIncapacitated);\n  } else {\n    let effect = baseSpellEffect(document, document.name);\n    addStatusEffectChange(effect, \"Charmed\", 20, true);\n    addStatusEffectChange(effect, \"Incapacitated\", 20, true);\n    document.effects.push(effect);\n  }\n\n  return document;\n}\n","import DDBMacros from \"../DDBMacros.js\";\n\nexport async function iceKnifeEffect(document) {\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"iceKnife.js\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"iceKnife.js\", [\"postActiveEffects\"]);\n  document.system.damage = { parts: [[\"1d10\", \"piercing\"]], versatile: \"\", value: \"\" };\n  document.system.scaling = { mode: \"none\", formula: \"\" };\n  document.system.target = {\n    value: 1,\n    width: null,\n    units: \"\",\n    type: \"creature\",\n  };\n  document.system.save.ability = \"\";\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { effectModules } from \"../effects.js\";\n\nexport async function incendiaryCloudEffect(document) {\n  // we require active auras for this effect\n  if (!effectModules().activeAurasInstalled) return document;\n\n  await DDBMacros.setItemMacroFlag(document, \"generic\", DDBMacros.MACROS.ACTIVE_AURAS.AA_DAMAGE_ON_ENTRY.file);\n\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value:\n        `label=${document.name} Turn End,turn=end, saveAbility=dex, saveDC=@attributes.spelldc, saveDamage=halfdamage, rollType=save, saveMagic=true, damageBeforeSave=false, damageRoll=(@item.level)d8, damageType=${document.system.damage.parts[0][1]},killAnim=true`,\n      priority: \"20\",\n    },\n  );\n  effect.changes.push(DDBMacros.generateMacroChange({ macroValues: \"@item.level\", macroType: \"generic\", macroName: DDBMacros.MACROS.ACTIVE_AURAS.AA_DAMAGE_ON_ENTRY.file }));\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"All\",\n    radius: 20,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: false,\n    height: false,\n    hidden: false,\n    // hostile: true,\n    onlyOnce: false,\n    save: \"dex\",\n    savedc: null,\n    displayTemp: true,\n  };\n  foundry.utils.setProperty(effect, \"duration.seconds\", 60);\n  // foundry.utils.setProperty(effect, \"flags.dae.macroRepeat\", \"startEveryTurn\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"generic\", DDBMacros.MACROS.ACTIVE_AURAS.AA_DAMAGE_ON_ENTRY.file, [\"preActiveEffects\"]);\n  foundry.utils.setProperty(document, \"flags.ddbimporter.effect\", {\n    dice: document.system.damage.parts[0][0],\n    damageType: document.system.damage.parts[0][1],\n    save: document.system.save.ability,\n    sequencerFile: \"jb2a.fumes.fire.orange\",\n  });\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { effectModules } from \"../effects.js\";\n\nexport async function insectPlagueEffect(document) {\n  // we require active auras for this effect\n  if (!effectModules().activeAurasInstalled) return document;\n\n  await DDBMacros.setItemMacroFlag(document, \"generic\", DDBMacros.MACROS.ACTIVE_AURAS.AA_DAMAGE_ON_ENTRY.file);\n\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value:\n        `label=${document.name} Turn End,turn=end, saveAbility=con, saveDC=@attributes.spelldc, saveDamage=halfdamage, rollType=save, saveMagic=true, damageBeforeSave=false, damageRoll=(@item.level)d10, damageType=${document.system.damage.parts[0][1]}, killAnim=true`,\n      priority: \"20\",\n    },\n  );\n  effect.changes.push(DDBMacros.generateMacroChange({ macroValues: \"@item.level\", macroType: \"generic\", macroName: DDBMacros.MACROS.ACTIVE_AURAS.AA_DAMAGE_ON_ENTRY.file }));\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"All\",\n    radius: 20,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: false,\n    height: false,\n    hidden: false,\n    // hostile: true,\n    onlyOnce: false,\n    save: \"dex\",\n    savedc: null,\n    displayTemp: true,\n  };\n  foundry.utils.setProperty(effect, \"duration.seconds\", 600);\n  // foundry.utils.setProperty(effect, \"flags.dae.macroRepeat\", \"startEveryTurn\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"generic\", DDBMacros.MACROS.ACTIVE_AURAS.AA_DAMAGE_ON_ENTRY.file, [\"preActiveEffects\"]);\n  foundry.utils.setProperty(document, \"flags.ddbimporter.effect\", {\n    dice: document.system.damage.parts[0][0],\n    damageType: document.system.damage.parts[0][1],\n    save: document.system.save.ability,\n    sequencerFile: \"jb2a.butterflies.many.orange\",\n  });\n\n  document.effects.push(effect);\n  return document;\n}\n","import { addStatusEffectChange } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport async function invisibilityEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  addStatusEffectChange(effect, \"Invisible\", 20, true);\n  foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"1Attack\", \"1Spell\"]);\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function irresistibleDanceEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n\n  effect.changes.push({\n    key: \"flags.midi-qol.disadvantage.ability.save.str\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    value: \"1\",\n    priority: \"20\",\n  });\n  effect.changes.push({\n    key: \"flags.midi-qol.disadvantage.attack.all\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    value: \"1\",\n    priority: \"20\",\n  });\n  effect.changes.push({\n    key: \"flags.midi-qol.grants.advantage.attack.all \",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    value: \"1\",\n    priority: \"20\",\n  });\n\n  effect.flags.dae.macroRepeat = \"startEveryTurn\";\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"irresistibleDance.js\");\n  effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"spell\", macroName: \"irresistibleDance.js\" }));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { effectModules, generateATLChange } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function lightEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n\n  if (effectModules().atlInstalled) {\n    effect.changes.push(generateATLChange(\"ATL.light.dim\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, '40'));\n    effect.changes.push(generateATLChange(\"ATL.light.bright\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, '20'));\n    effect.changes.push(generateATLChange(\"ATL.light.color\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, '#ffffff'));\n    effect.changes.push(generateATLChange(\"ATL.light.alpha\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, '0.25'));\n    const lightAnimation = '{\"type\": \"pulse\", \"speed\": 3,\"intensity\": 1}';\n    effect.changes.push(generateATLChange(\"ATL.light.animation\", CONST.ACTIVE_EFFECT_MODES.OVERRIDE, lightAnimation));\n  }\n\n  foundry.utils.setProperty(document, \"flags.midiProperties.autoFailFriendly\", true);\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function longstriderEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    { key: \"system.attributes.movement.walk\", value: \"10\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, priority: 20 },\n    { key: \"system.attributes.movement.fly\", value: \"10\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, priority: 20 },\n    { key: \"system.attributes.movement.burrow\", value: \"10\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, priority: 20 },\n    { key: \"system.attributes.movement.climb\", value: \"10\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, priority: 20 },\n    { key: \"system.attributes.movement.swim\", value: \"10\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, priority: 20 }\n  );\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function mageArmorEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"system.attributes.ac.calc\",\n    mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n    value: \"mage\",\n    priority: \"5\",\n  });\n  document.effects.push(effect);\n\n  return document;\n}\n","import DDBSummonsManager from \"../../parser/companions/DDBSummonsManager.js\";\n\nexport async function mageHandEffect(document) {\n  const manager = new DDBSummonsManager();\n  await manager.init();\n\n  const summonActors = manager.itemHandler.compendium.index.filter((i) =>\n    [\n      \"MageHandRed\",\n      \"MageHandPurple\",\n      \"MageHandGreen\",\n      \"MageHandBlue\",\n      \"MageHandRock\",\n      \"MageHandRainbow\",\n    ].includes(i.flags?.ddbimporter?.summons?.summonsKey)\n  );\n  const profiles = summonActors\n    .map((actor) => {\n      return {\n        _id: actor._id,\n        name: actor.name,\n        uuid: actor.uuid,\n        count: 1,\n      };\n    });\n\n  const summons = {\n    \"match\": {\n      \"proficiency\": false,\n      \"attacks\": false,\n      \"saves\": false\n    },\n    \"bonuses\": {\n      \"ac\": \"\",\n      \"hp\": \"\",\n      \"attackDamage\": \"\",\n      \"saveDamage\": \"\",\n      \"healing\": \"\"\n    },\n    \"profiles\": profiles,\n    \"prompt\": true\n  };\n\n  foundry.utils.setProperty(document, \"system.summons\", summons);\n  foundry.utils.setProperty(document, \"system.actionType\", \"summ\");\n\n  return document;\n\n}\n","import { baseEnchantmentEffect } from \"../effects.js\";\n\nexport function magicWeaponEffect(document) {\n  const enchantments = [\n    { bonus: \"1\", min: null, max: 3 },\n    { bonus: \"2\", min: 4, max: 5 },\n    { bonus: \"3\", min: 6, max: null },\n  ];\n  document.system.actionType = \"ench\";\n  foundry.utils.setProperty(document, \"system.enchantment\", {\n    restrictions: {\n      allowMagical: false,\n      type: \"weapon\",\n    },\n  });\n  for (const e of enchantments) {\n    let effect = baseEnchantmentEffect(document, `${document.name}: +${e.bonus}`);\n    foundry.utils.setProperty(effect, \"flags.dnd5e.enchantment.level\", { min: e.min, max: e.max });\n    effect.changes.push(\n      {\n        key: \"name\",\n        mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n        value: `{}, +${e.bonus}`,\n        priority: 20,\n      },\n      {\n        key: \"system.properties\",\n        mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n        value: \"mgc\",\n        priority: 20,\n      },\n      {\n        key: \"system.magicalBonus\",\n        mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n        value: e.bonus,\n        priority: 20,\n      },\n    );\n    e.description = `This weapon has become a +${e.bonus} magic weapon, granting a bonus to attack and damage rolls.`;\n    document.effects.push(effect);\n  }\n\n  return document;\n}\n","import { addStatusEffectChange } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function massSuggestionEffect(document) {\n  let effect = baseSpellEffect(document, `${document.name} - Charmed`);\n  addStatusEffectChange(effect, \"Charmed\", 20, true);\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function mindBlankEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: 'system.traits.di.value',\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: 'psychic',\n      priority: \"20\",\n    }\n  );\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { effectModules, generateTokenMagicFXChange } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function mirrorImageEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n\n  if (effectModules().tokenMagicInstalled) {\n    effect.changes.push(generateTokenMagicFXChange(\"images\"));\n  }\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function mistyStepEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"mistyStep.js\");\n  effect.changes.push(DDBMacros.generateMacroChange({ macroValues: \"@target\", macroType: \"spell\", macroName: \"mistyStep.js\" }));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function moonbeamEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.flags.dae.macroRepeat = \"startEveryTurn\";\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"moonbeam.js\");\n  effect.changes.push(DDBMacros.generateMacroChange({ macroValues: \"@spellLevel\", macroType: \"spell\", macroName: \"moonbeam.js\" }));\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.effects.push(effect);\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  document.system.actionType = \"other\";\n  document.system.save.ability = \"\";\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function passWithoutTraceEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: 'system.skills.ste.bonuses.check',\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: '+ 10',\n      priority: \"20\",\n    }\n  );\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { addStatusEffectChange, effectModules } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport async function phantasmalKillerEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  addStatusEffectChange(effect, \"Frightened\", 20, true);\n  if (effectModules().midiQolInstalled) {\n    effect.changes.push({\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value:\n        \"label=Phantasmal Killer (End of Turn),turn=end,saveAbility=wis,saveDC=@attributes.spelldc,saveMagic=true,damageRoll=(@item.level)d10,damageType=psychic,savingThrow=true,damageBeforeSave=false,killAnim=true\",\n      priority: \"20\",\n    });\n    document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  }\n\n  document.effects.push(effect);\n\n  return document;\n}\n","export function polymorphEffect(document) {\n\n  foundry.utils.setProperty(document, \"flags.midiProperties.autoFailFriendly\", true);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function protectionfromEnergyEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"protectionfromEnergy.js\");\n  effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"spell\", macroName: \"protectionfromEnergy.js\", priority: 0 }));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function protectionfromPoisonEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"system.traits.dr.value\",\n    value: \"poison\",\n    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n    priority: 0,\n  });\n  document.effects.push(effect);\n\n  return document;\n}\n","import { addStatusEffectChange, effectModules } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function psychicScreamEffect(document) {\n  let effect = baseSpellEffect(document, `${document.name} - Stunned`);\n  addStatusEffectChange(effect, \"Stunned\", 20, true);\n\n  if (effectModules().midiQolInstalled) {\n    effect.changes.push(\n      {\n        key: \"flags.midi-qol.OverTime\",\n        mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n        value: \"label=Psychic Scream Stun (End of Turn),turn=end,saveDC=@attributes.spelldc,saveAbility=int,saveMagic=true,killAnim=true\",\n        priority: \"20\",\n      },\n    );\n    effect.duration.rounds = 99;\n    foundry.utils.setProperty(document, \"flags.midiProperties.halfdam\", true);\n    foundry.utils.setProperty(document, \"flags.midiProperties.saveDamage\", \"halfdam\");\n  }\n  document.effects.push(effect);\n\n  return document;\n}\n","import { addStatusEffectChange } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function rayofSicknessEffect(document) {\n  let effect = baseSpellEffect(document, `${document.name} - Poisoned`);\n  addStatusEffectChange(effect, \"Poisoned\", 20, true);\n  effect.flags.dae.specialDuration = [\"turnEndSource\"];\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function rayofEnfeeblementEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.OverTime\",\n    mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n    value: `label=${document.name} (End of Turn),turn=end,saveDC=@attributes.spelldc,saveAbility=con,savingThrow=true,saveMagic=true,killAnim=true`,\n    priority: \"20\",\n  });\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"rayofEnfeeblement.js\");\n  effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"spell\", macroName: \"rayofEnfeeblement.js\" }));\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function rayofFrostEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"system.attributes.movement.walk\",\n    value: \"-10\",\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n    priority: 20,\n  });\n  effect.duration.rounds = 2;\n  effect.flags.dae.specialDuration = [\"turnStart\"];\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function regenerateEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: 5,\n      value: `label=${document.name} (Start of Turn),killAnim=true,turn=end,damageRoll=1,damageType=healing,condition=@attributes.hp.value > 0 && @attributes.hp.value < @attributes.hp.max`,\n      priority: \"20\",\n    }\n  );\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function resilientSphereEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: 'system.attributes.movement.all',\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: '* 0.5',\n      priority: \"20\",\n    },\n    {\n      key: 'system.traits.di.all',\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: '1',\n      priority: \"20\",\n    },\n  );\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function resistanceEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: 'flags.midi-qol.optional.resistance.label',\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: 'Resistance',\n      priority: \"20\",\n    },\n    {\n      key: 'flags.midi-qol.optional.resistance.save.all',\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: '+ 1d4',\n      priority: \"20\",\n    },\n  );\n  foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"isSave\"]);\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { effectModules, generateTokenMagicFXChange } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function shieldEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"system.attributes.ac.bonus\",\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n    value: \"+5\",\n    priority: \"20\",\n  });\n  effect.flags.dae.specialDuration = [\"turnStart\"];\n\n  if (effectModules().tokenMagicInstalled) {\n    effect.changes.push(generateTokenMagicFXChange(\"water-field\"));\n  }\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { effectModules, generateTokenMagicFXChange } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function shieldofFaithEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"system.attributes.ac.bonus\",\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n    value: \"+2\",\n    priority: \"20\",\n  });\n\n  if (effectModules().tokenMagicInstalled) {\n    effect.changes.push(generateTokenMagicFXChange(\"bloom\"));\n  }\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseEnchantmentEffect } from \"../effects.js\";\n\nexport function shillelaghEffect(document) {\n  document.system.actionType = \"ench\";\n\n  foundry.utils.setProperty(document, \"system.enchantment\", {\n    restrictions: {\n      allowMagical: true,\n      type: \"weapon\",\n    },\n  });\n\n  const baseEffects = [\n    {\n      key: \"name\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: `{} [${document.name}]`,\n      priority: 20,\n    },\n    {\n      key: \"system.properties\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"mgc\",\n      priority: 20,\n    },\n  ];\n\n  let wisdomEffect = baseEnchantmentEffect(document, `${document.name}: Use Spellcasting Modifier`, { transfer: false });\n  wisdomEffect._id = foundry.utils.randomID();\n  wisdomEffect.changes.push(\n    ...baseEffects,\n    {\n      key: \"system.ability\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"wis\", // @attributes.spellcasting - system.ability only takes a numerical value\n      priority: 20,\n    },\n  );\n  document.effects.push(wisdomEffect);\n\n  let effect = baseEnchantmentEffect(document, `${document.name}: No Spellcasting Modifier`);\n  effect.changes.push(...baseEffects);\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { addStatusEffectChange, effectModules } from \"../effects.js\";\n\nexport async function silenceEffect(document) {\n\n  if (!effectModules().activeAurasInstalled) {\n    let effect = baseSpellEffect(document, `${document.name} - Deafened`);\n    addStatusEffectChange(effect, \"Deafened\", 20, true);\n    document.effects.push(effect);\n    return document;\n  }\n\n  // if we have active auras use a more advanced macro\n  await DDBMacros.setItemMacroFlag(document, \"generic\", \"activeAuraOnly.js\");\n\n  let effect = baseSpellEffect(document, document.name);\n  addStatusEffectChange(effect, \"Deafened\", 20, true);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.fail.spell.vocal\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"1\",\n      priority: \"50\",\n    },\n    {\n      key: \"system.traits.di.value\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"thunder\",\n      priority: \"50\",\n    }\n  );\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"All\",\n    radius: 20,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: false,\n    height: false,\n    hidden: false,\n    // hostile: true,\n    onlyOnce: false,\n    save: \"\",\n    savedc: null,\n    displayTemp: true,\n  };\n  foundry.utils.setProperty(effect, \"duration.seconds\", 600);\n  DDBMacros.setMidiOnUseMacroFlag(document, \"generic\", \"activeAuraOnly.js\", [\"preActiveEffects\"]);\n\n  const limits = {\n    sight: {\n      hearing: { enabled: true, range: 0 }, // Hearing\n    },\n    sound: { enabled: true, range: 0 },\n  };\n\n  const walledtemplates = {\n    wallRestriction: \"move\",\n    wallsBlock: \"walled\",\n  };\n\n  foundry.utils.setProperty(document, \"flags.limits\", limits);\n  foundry.utils.setProperty(document, \"flags.walledtemplates\", walledtemplates);\n\n  document.effects.push(effect);\n\n  return document;\n}\n","import DDBMacros from \"../DDBMacros.js\";\nimport { addStatusEffectChange, effectModules } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport async function sleepEffect(document) {\n\n  if (effectModules().midiQolInstalled) {\n    await DDBMacros.setItemMacroFlag(document, \"spell\", \"sleep.js\");\n    DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"sleep.js\", [\"postActiveEffects\"]);\n    document.system.damage = { parts: [[\"5d8\", \"midi-none\"]], versatile: \"\", value: \"\" };\n  } else {\n    let effect = baseSpellEffect(document, `${document.name} - Unconscious`);\n    addStatusEffectChange(effect, \"Unconscious\", 20, true);\n    document.effects.push(effect);\n  }\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function slowEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    { key: \"system.attributes.ac.bonus\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, value: \"-2\", priority: \"20\" },\n    { key: \"system.attributes.movement.all\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, value: \"/2\", priority: \"20\" },\n    { key: \"system.abilities.dex.bonuses.save\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, value: \"-2\", priority: \"20\" }\n  );\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function spiderClimbEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"system.attributes.movement.climb\",\n    value: \"@attributes.movement.walk\",\n    mode: CONST.ACTIVE_EFFECT_MODES.UPGRADE,\n    priority: 20,\n  });\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { effectModules } from \"../effects.js\";\n\nexport async function spikeGrowthEffect(document) {\n  // we require active auras for this effect\n  if (!effectModules().activeAurasInstalled) return document;\n\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"spikeGrowth.js\");\n\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"system.attributes.movement.walk\",\n      value: \"0.5\",\n      mode: CONST.ACTIVE_EFFECT_MODES.MULTIPLY,\n      priority: 30,\n    },\n  );\n  effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"spell\", macroName: \"spikeGrowth.js\" }));\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"All\",\n    radius: 20,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: false,\n    height: false,\n    hidden: false,\n    // hostile: true,\n    onlyOnce: false,\n    // save: \"dex\",\n    savedc: null,\n    displayTemp: true,\n  };\n  foundry.utils.setProperty(effect, \"duration.seconds\", 600);\n  foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"isMoved\"]);\n  DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"spikeGrowth.js\", [\"preActiveEffects\"]);\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { effectModules } from \"../effects.js\";\n\nexport async function spiritGuardiansEffect(document) {\n  // we require active auras for this effect\n  if (!effectModules().activeAurasInstalled) return document;\n\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"system.attributes.movement.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"/2\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value:\n        \"turn=start,label=Spirit Guardians (Start of Turn),damageRoll=(@spellLevel)d8,damageType=radiant,saveRemove=false,saveDC=@attributes.spelldc,saveAbility=wis,saveDamage=halfdamage,killAnim=true\",\n      priority: \"20\",\n    }\n  );\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"spiritGuardians.js\");\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"Enemy\",\n    radius: 15,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: true,\n    height: false,\n    hidden: false,\n    hostile: false,\n    onlyOnce: false,\n    displayTemp: true,\n  };\n  effect.changes.push(DDBMacros.generateMacroChange({ macroValues: \"@token @spellLevel @attributes.spelldc\", macroType: \"spell\", macroName: \"spiritGuardians.js\" }));\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.effects.push(effect);\n\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  document.system['target']['type'] = \"self\";\n  document.system.range = { value: 15, units: \"ft\", long: null };\n  document.system.actionType = \"\";\n  document.system.save.ability = \"\";\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { effectModules } from \"../effects.js\";\n\nexport async function spiritShroudEffect(document) {\n  if (!effectModules().activeAurasInstalled) return document;\n  let effect = baseSpellEffect(document, document.name);\n\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.spiritShroud\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"@uuid\",\n      priority: 20\n    },\n    {\n      key: \"system.attributes.movement.all\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"-10\",\n      priority: \"15\",\n    });\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"Enemy\",\n    radius: 10,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: true,\n    height: false,\n    hidden: false,\n    hostile: false,\n    onlyOnce: false,\n    displayTemp: true,\n  };\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"spiritShroud.js\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"spiritShroud.js\", [\"preActiveEffects\"]);\n\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  document.system['target']['type'] = \"self\";\n  document.system.range = { value: null, units: \"self\", long: null };\n  document.system.actionType = \"other\";\n  document.system.save.ability = \"\";\n\n  document.effects.push(effect);\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function spiritualWeaponEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"spiritualWeapon.js\");\n  effect.changes.push(DDBMacros.generateMacroChange({ macroValues: \"@item.level\", macroType: \"spell\", macroName: \"spiritualWeapon.js\" }));\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  document.effects.push(effect);\n\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  document.system.actionType = \"other\";\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function stoneskinEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"system.traits.dr.value\",\n      value: \"bludgeoning\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 0,\n    },\n    {\n      key: \"system.traits.dr.value\",\n      value: \"piercing\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 0,\n    },\n    {\n      key: \"system.traits.dr.value\",\n      value: \"slashing\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 0,\n    },\n    {\n      key: \"system.traits.dr.bypass\",\n      value: \"mgc\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      priority: 0,\n    },\n  );\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { effectModules } from \"../effects.js\";\n\nexport async function stormSphereEffect(document) {\n  // we require active auras for this effect\n  if (!effectModules().activeAurasInstalled) return document;\n\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.disadvantage.skill.prc\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"0\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value:\n        \"turn=end,label=Storm Sphere (End of Turn),damageRoll=(@item.level - 2)d6,damageType=bludgeoning,saveRemove=false,saveDC=@attributes.spelldc,saveAbility=str,saveDamage=nodamage,killAnim=true\",\n      priority: \"20\",\n    }\n  );\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"stormSphere.js\");\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"All\",\n    radius: 20,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: false,\n    height: false,\n    hidden: false,\n    // hostile: true,\n    onlyOnce: false,\n    save: \"str\",\n    savedc: null,\n    displayTemp: true,\n  };\n  foundry.utils.setProperty(effect, \"duration.seconds\", 60);\n  foundry.utils.setProperty(effect, \"flags.dae.macroRepeat\", \"startEveryTurn\");\n  effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"spell\", macroName: \"stormSphere.js\" }));\n  DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"stormSphere.js\", [\"preActiveEffects\"]);\n\n  document.effects.push(effect);\n\n  const damageOne = foundry.utils.duplicate(document.system.damage.parts[0]);\n  const damageTwo = foundry.utils.duplicate(document.system.damage.parts[1]);\n  document.system.damage = { parts: [damageOne], versatile: \"\", value: \"\" };\n  document.system.formula = damageTwo[0];\n  document.system.actionType = \"save\";\n\n  return document;\n}\n","import { addStatusEffectChange } from \"../effects.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function sunbeamEffect(document) {\n  let effectSunbeamBlinded = baseSpellEffect(document, `${document.name} - Blinded`);\n  addStatusEffectChange(effectSunbeamBlinded, \"Blinded\", 20, true);\n  document.effects.push(effectSunbeamBlinded);\n\n  return document;\n}\n","export function swordBurstEffect(document) {\n  foundry.utils.setProperty(document, \"flags.midi-qol.AoETargetType\", \"any\");\n  foundry.utils.setProperty(document, \"flags.midi-qol.AoETargetTypeIncludeSelf\", false);\n\n  return document;\n}\n","export function thunderclapEffect(document) {\n  foundry.utils.setProperty(document, \"flags.midi-qol.AoETargetType\", \"any\");\n  foundry.utils.setProperty(document, \"flags.midi-qol.AoETargetTypeIncludeSelf\", false);\n\n  return document;\n}\n","import DDBMacros from \"../DDBMacros.js\";\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport async function thunderousSmiteEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.dnd5e.DamageBonusMacro\",\n      value: DDBMacros.generateItemMacroValue({ macroType: \"spell\", macroName: \"thunderousSmite.js\", document }),\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.thunderousSmite.dc\",\n      value: \"@attributes.spelldc\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      priority: \"20\",\n    },\n  );\n  foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"1Hit:mwak\"]);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n\n\n  document.system.damage.parts = [];\n  document.system.save.ability = \"\";\n  document.system.actionType = \"other\";\n  document.effects.push(effect);\n  DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"thunderousSmite.js\", [\"postActiveEffects\", \"preTargeting\"]);\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"thunderousSmite.js\");\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport { addStatusEffectChange } from \"../effects.js\";\n\nexport function tidalWaveEffect(document) {\n\n  let effect = baseSpellEffect(document, `${document.name} - Prone`);\n  addStatusEffectChange(effect, \"Prone\", 20, true);\n  effect.duration = {\n    seconds: 99999,\n    rounds: 999,\n  };\n  document.effects.push(effect);\n\n  return document;\n\n}\n","import DDBMacros from \"../DDBMacros.js\";\n\nexport async function tolltheDeadEffect(document) {\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"tolltheDead.js\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"tolltheDead.js\", [\"postActiveEffects\"]);\n\n  document.system.damage = { parts: [], versatile: \"\", value: \"\" };\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function trueStrikeEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.advantage.attack.all\",\n    value: \"1\",\n    mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n    priority: 20,\n  });\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function viciousMockeryEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push({\n    key: \"flags.midi-qol.disadvantage.attack.all\",\n    value: \"1\",\n    mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n    priority: 20,\n  });\n  foundry.utils.setProperty(effect, \"duration.turns\", 2);\n  foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"1Attack\", \"turnEnd\"]);\n  document.effects.push(effect);\n\n  return document;\n}\n","// Vitriolic Sphere\n\n\nimport { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function vitriolicSphereEffect(document) {\n\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.OverTime\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: `turn=end,label=${document.name} (End of Turn),damageRoll=5d4,damageType=acid,removeCondition=true,killAnim=true`,\n      priority: \"20\",\n    }\n  );\n  foundry.utils.setProperty(effect, \"flags.dae.specialDuration\", [\"turnEnd\"]);\n  foundry.utils.setProperty(effect, \"duration.rounds\", 1);\n  document.effects.push(effect);\n\n  const damageOne = foundry.utils.duplicate(document.system.damage.parts[0]);\n  const damageTwo = foundry.utils.duplicate(document.system.damage.parts[1]);\n  document.system.damage = { parts: [damageOne], versatile: \"\", value: \"\" };\n  document.system.formula = damageTwo[0];\n  document.system.actionType = \"save\";\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { effectModules } from \"../effects.js\";\n\nexport async function wardingBondEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    { key: \"system.attributes.ac.bonus\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, value: \"+ 1\", priority: \"20\" },\n    { key: \"system.traits.dr.all\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, value: \"1\", priority: \"20\" },\n    { key: \"system.bonuses.abilities.save\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, value: \"+ 1\", priority: \"20\" }\n  );\n\n  if (effectModules().midiQolInstalled) {\n    await DDBMacros.setItemMacroFlag(document, \"spell\", \"wardingBond.js\");\n    effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"spell\", macroName: \"wardingBond.js\" }));\n    document.effects.push(effect);\n  }\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\nimport { effectModules, addStatusEffectChange } from \"../effects.js\";\n\nexport async function webEffect(document) {\n\n  if (!effectModules().activeAurasInstalled || !effectModules().midiQolInstalled) {\n    let effectWebRestrained = baseSpellEffect(document, `${document.name} - Restrained`);\n    addStatusEffectChange(effectWebRestrained, \"Restrained\", 20, true);\n    document.effects.push(effectWebRestrained);\n    return document;\n  }\n\n  // if we have active auras use a more advanced macro\n  await DDBMacros.setItemMacroFlag(document, \"generic\", DDBMacros.MACROS.ACTIVE_AURAS.AA_CONDITION_ON_ENTRY.file);\n\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(DDBMacros.generateMacroChange({ macroValues: \"@item.level @attributes.spelldc\", macroType: \"generic\", macroName: DDBMacros.MACROS.ACTIVE_AURAS.AA_CONDITION_ON_ENTRY.file }));\n  effect.flags[\"ActiveAuras\"] = {\n    isAura: true,\n    aura: \"All\",\n    radius: null,\n    alignment: \"\",\n    type: \"\",\n    ignoreSelf: false,\n    height: false,\n    hidden: false,\n    // hostile: true,\n    onlyOnce: false,\n    save: \"dex\",\n    savedc: null,\n    displayTemp: true,\n  };\n  foundry.utils.setProperty(effect, \"duration.seconds\", 3600);\n  foundry.utils.setProperty(effect, \"flags.dae.macroRepeat\", \"startEveryTurn\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"generic\", DDBMacros.MACROS.ACTIVE_AURAS.AA_CONDITION_ON_ENTRY.file, [\"preActiveEffects\"]);\n\n  foundry.utils.setProperty(document, \"flags.ddbimporter.effect\", {\n    applyStart: true,\n    applyEntry: true,\n    applyImmediate: false,\n    everyEntry: false,\n    allowVsRemoveCondition: true,\n    removalCheck: \"str\",\n    removalSave: null,\n    saveRemoves: false,\n    condition: \"Restrained\",\n    save: document.system.save.ability,\n    // sequencerFile: \"jb2a.web.02\",\n  });\n\n  document.effects.push(effect);\n  document.system.actionType = \"other\";\n  document.system.save.ability = \"\";\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function witchBoltEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"witchBolt.js\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"spell\", \"witchBolt.js\", [\"postActiveEffects\"]);\n  document.effects.push(effect);\n\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\nimport DDBMacros from \"../DDBMacros.js\";\n\nexport async function zephyrStrikeEffect(document) {\n  let effect = baseSpellEffect(document, `${document.name}`);\n\n  // macroToCall\n  effect.changes.push(\n    {\n      key: \"flags.midi-qol.optional.ZephyrStrike.macroToCall\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: DDBMacros.generateItemMacroValue({ macroType: \"spell\", macroName: \"zephyrStrike.js\", document }),\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.ZephyrStrike.damage.mwak\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: `${document.system.damage.parts[0][0]}`,\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.ZephyrStrike.damage.rwak\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: `${document.system.damage.parts[0][0]}`,\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.ZephyrStrike.count\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"1\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.ZephyrStrike.label\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"Gain Zephyr Strike damage bonus?\",\n      priority: \"20\",\n    },\n    {\n      key: \"flags.midi-qol.optional.ZephyrStrike.criticalDamage\",\n      mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n      value: \"1\",\n      priority: \"20\",\n    },\n  );\n\n  document.system.target.type = \"self\";\n  foundry.utils.setProperty(effect, \"flags.dae.selfTarget\", true);\n  foundry.utils.setProperty(effect, \"flags.dae.selfTargetAlways\", true);\n  foundry.utils.setProperty(document, \"system.actionType\", \"other\");\n\n  document.effects.push(effect);\n  document.system.damage.parts = [];\n\n  await DDBMacros.setItemMacroFlag(document, \"spell\", \"zephyrStrike.js\");\n\n  return document;\n}\n","import logger from \"../logger.js\";\nimport {\n  forceItemEffect,\n  effectModules,\n  forceManualReaction,\n  baseEffect,\n  applyDefaultMidiFlags,\n} from \"./effects.js\";\n\n// spell effects load start\nimport { absorbElementsEffect } from \"./spells/absorbElements.js\";\nimport { acidArrowEffect } from \"./spells/acidArrow.js\";\nimport { aidEffect } from \"./spells/aid.js\";\nimport { alterSelfEffect } from \"./spells/alterSelf.js\";\nimport { animalFriendshipEffect } from \"./spells/animalFriendship.js\";\nimport { arcaneEyeEffect } from \"./spells/arcaneEye.js\";\nimport { arcaneHandEffect } from \"./spells/arcaneHand.js\";\nimport { arcaneSwordEffect } from \"./spells/arcaneSword.js\";\nimport { armorOfAgathysEffect } from \"./spells/armorOfAgathys.js\";\nimport { auraOfLifeEffect } from \"./spells/auraOfLife.js\";\nimport { baneEffect } from \"./spells/bane.js\";\nimport { banishmentEffect } from \"./spells/banishment.js\";\nimport { barkskinEffect } from \"./spells/barkskin.js\";\nimport { beaconofHopeEffect } from \"./spells/beaconofHope.js\";\nimport { blackTentaclesEffect } from \"./spells/blackTentacles.js\";\nimport { blessEffect } from \"./spells/bless.js\";\nimport { blindnessDeafnessEffect } from \"./spells/blindnessDeafness.js\";\nimport { blurEffect } from \"./spells/blur.js\";\nimport { boomingBladeEffect } from \"./spells/boomingBlade.js\";\nimport { brandingSmiteEffect } from \"./spells/brandingSmite.js\";\nimport { callLightningEffect } from \"./spells/callLightning.js\";\nimport { charmPersonEffect } from \"./spells/charmPerson.js\";\nimport { chillTouchEffect } from \"./spells/chillTouch.js\";\nimport { chromaticOrbEffect } from \"./spells/chromaticOrb.js\";\nimport { cloudkillEffect } from \"./spells/cloudkill.js\";\nimport { colorSprayEffect } from \"./spells/colorSpray.js\";\nimport { commandEffect } from \"./spells/command.js\";\nimport { comprehendLanguagesEffect } from \"./spells/comprehendLanguages.js\";\nimport { confusionEffect } from \"./spells/confusion.js\";\nimport { contagionEffect } from \"./spells/contagion.js\";\nimport { createBonfireEffect } from \"./spells/createBonfire.js\";\nimport { crownofMadnessEffect } from \"./spells/crownofMadness.js\";\nimport { crownofStarsEffect } from \"./spells/crownofStars.js\";\nimport { dancingLightsEffect } from \"./spells/dancingLights.js\";\nimport { darknessEffect } from \"./spells/darkness.js\";\nimport { darkvisionEffect } from \"./spells/darkvision.js\";\nimport { divineFavorEffect } from \"./spells/divineFavor.js\";\nimport { divineWordEffect } from \"./spells/divineWord.js\";\nimport { dominateBeastEffect } from \"./spells/dominateBeast.js\";\nimport { dominateMonsterEffect } from \"./spells/dominateMonster.js\";\nimport { dominatePersonEffect } from \"./spells/dominatePerson.js\";\nimport { elementalWeaponEffect } from \"./spells/elementalWeapon.js\";\nimport { enhanceAbilityEffect } from \"./spells/enhanceAbility.js\";\nimport { enlargeReduceEffect } from \"./spells/enlargeReduce.js\";\nimport { ensnaringStrikeEffect } from \"./spells/ensnaringStrike.js\";\nimport { entangleEffect } from \"./spells/entangle.js\";\nimport { eyebiteEffect } from \"./spells/eyebite.js\";\nimport { faerieFireEffect } from \"./spells/faerieFire.js\";\nimport { fearEffect } from \"./spells/fear.js\";\nimport { feeblemindEffect } from \"./spells/feeblemind.js\";\nimport { fireShieldEffect } from \"./spells/fireShield.js\";\nimport { flameBladeEffect } from \"./spells/flameBlade.js\";\nimport { fleshtoStoneEffect } from \"./spells/fleshtoStone.js\";\nimport { flyEffect } from \"./spells/fly.js\";\nimport { frostbiteEffect } from \"./spells/frostbite.js\";\nimport { geasEffect } from \"./spells/geas.js\";\nimport { greaseEffect } from \"./spells/grease.js\";\nimport { greaterInvisibilityEffect } from \"./spells/greaterInvisibility.js\";\nimport { greenFlameBladeEffect } from \"./spells/greenFlameBlade.js\";\nimport { guidanceEffect } from \"./spells/guidance.js\";\nimport { guidingBoltEffect } from \"./spells/guidingBolt.js\";\nimport { hailOfThornsEffect } from \"./spells/hailOfThorns.js\";\nimport { hasteEffect } from \"./spells/haste.js\";\nimport { heroesFeastEffect } from \"./spells/heroesFeast.js\";\nimport { heroismEffect } from \"./spells/heroism.js\";\nimport { hexEffect } from \"./spells/hex.js\";\nimport { hideousLaughterEffect } from \"./spells/hideousLaughter.js\";\nimport { holdMonsterEffect } from \"./spells/holdMonster.js\";\nimport { holdPersonEffect } from \"./spells/holdPerson.js\";\nimport { holyAuraEffect } from \"./spells/holyAura.js\";\nimport { huntersMarkEffect } from \"./spells/huntersMark.js\";\nimport { hypnoticPatternEffect } from \"./spells/hypnoticPattern.js\";\nimport { iceKnifeEffect } from \"./spells/iceKnife.js\";\nimport { incendiaryCloudEffect } from \"./spells/incendiaryCloud.js\";\nimport { insectPlagueEffect } from \"./spells/insectPlague.js\";\nimport { invisibilityEffect } from \"./spells/invisibility.js\";\nimport { irresistibleDanceEffect } from \"./spells/irresistibleDance.js\";\nimport { lightEffect } from \"./spells/light.js\";\nimport { longstriderEffect } from \"./spells/longstrider.js\";\nimport { mageArmorEffect } from \"./spells/mageArmor.js\";\nimport { mageHandEffect } from \"./spells/mageHand.js\";\nimport { magicWeaponEffect } from \"./spells/magicWeapon.js\";\nimport { massSuggestionEffect } from \"./spells/massSuggestion.js\";\nimport { mindBlankEffect } from \"./spells/mindBlank.js\";\nimport { mirrorImageEffect } from \"./spells/mirrorImage.js\";\nimport { mistyStepEffect } from \"./spells/mistyStep.js\";\nimport { moonbeamEffect } from \"./spells/moonbeam.js\";\nimport { passWithoutTraceEffect } from \"./spells/passWithoutTrace.js\";\nimport { phantasmalKillerEffect } from \"./spells/phantasmalKiller.js\";\nimport { polymorphEffect } from \"./spells/polymorph.js\";\nimport { protectionfromEnergyEffect } from \"./spells/protectionfromEnergy.js\";\nimport { protectionfromPoisonEffect } from \"./spells/protectionfromPoison.js\";\nimport { psychicScreamEffect } from \"./spells/psychicScream.js\";\nimport { rayofSicknessEffect } from \"./spells/rayOfSickness.js\";\nimport { rayofEnfeeblementEffect } from \"./spells/rayofEnfeeblement.js\";\nimport { rayofFrostEffect } from \"./spells/rayofFrost.js\";\nimport { regenerateEffect } from \"./spells/regenerate.js\";\nimport { resilientSphereEffect } from \"./spells/resilientSphere.js\";\nimport { resistanceEffect } from \"./spells/resistance.js\";\nimport { shieldEffect } from \"./spells/shield.js\";\nimport { shieldofFaithEffect } from \"./spells/shieldofFaith.js\";\nimport { shillelaghEffect } from \"./spells/shillelagh.js\";\nimport { silenceEffect } from \"./spells/silence.js\";\nimport { sleepEffect } from \"./spells/sleep.js\";\nimport { slowEffect } from \"./spells/slow.js\";\nimport { spiderClimbEffect } from \"./spells/spiderClimb.js\";\nimport { spikeGrowthEffect } from \"./spells/spikeGrowth.js\";\nimport { spiritGuardiansEffect } from \"./spells/spiritGuardians.js\";\nimport { spiritShroudEffect } from \"./spells/spiritShroud.js\";\nimport { spiritualWeaponEffect } from \"./spells/spiritualWeapon.js\";\nimport { stoneskinEffect } from \"./spells/stoneskin.js\";\nimport { stormSphereEffect } from \"./spells/stormSphere.js\";\nimport { sunbeamEffect } from \"./spells/sunbeam.js\";\nimport { swordBurstEffect } from \"./spells/swordburst.js\";\nimport { thunderclapEffect } from \"./spells/thunderclap.js\";\nimport { thunderousSmiteEffect } from \"./spells/thunderousSmite.js\";\nimport { tidalWaveEffect } from \"./spells/tidalWave.js\";\nimport { tolltheDeadEffect } from \"./spells/tolltheDead.js\";\nimport { trueStrikeEffect } from \"./spells/trueStrike.js\";\nimport { viciousMockeryEffect } from \"./spells/viciousMockery.js\";\nimport { vitriolicSphereEffect } from \"./spells/vitriolicSphere.js\";\nimport { wardingBondEffect } from \"./spells/wardingBond.js\";\nimport { webEffect } from \"./spells/web.js\";\nimport { witchBoltEffect } from \"./spells/witchBolt.js\";\nimport { zephyrStrikeEffect } from \"./spells/zephyrStrike.js\";\n\n\nexport function baseSpellEffect(document, label,\n  { transfer = false, disabled = false } = {}\n) {\n  return baseEffect(document, label, { transfer, disabled });\n}\n\n\n// eslint-disable-next-line complexity\nasync function basicSpellEffects(document) {\n  const name = document.flags.ddbimporter?.originalName ?? document.name;\n\n  logger.debug(`Adding basic effects to ${name}`);\n  switch (name) {\n    case \"Absorb Elements\": {\n      document = await absorbElementsEffect(document);\n      break;\n    }\n    case \"Aid\": {\n      document = await aidEffect(document);\n      break;\n    }\n    case \"Animal Friendship\": {\n      document = animalFriendshipEffect(document);\n      break;\n    }\n    case \"Aura of Life\": {\n      document = await auraOfLifeEffect(document);\n      break;\n    }\n    case \"Arcane Eye\": {\n      document = await arcaneEyeEffect(document);\n      break;\n    }\n    case \"Bigby's Hand\":\n    case \"Arcane Hand\": {\n      document = await arcaneHandEffect(document);\n      break;\n    }\n    case \"Mordenkainen's Sword\":\n    case \"Arcane Sword\": {\n      document = await arcaneSwordEffect(document);\n      break;\n    }\n    case \"Bane\": {\n      document = baneEffect(document);\n      break;\n    }\n    case \"Barkskin\": {\n      document = barkskinEffect(document);\n      break;\n    }\n    case \"Evard's Black Tentacles\":\n    case \"Black Tentacles\": {\n      document = await blackTentaclesEffect(document);\n      break;\n    }\n    case \"Bless\": {\n      document = blessEffect(document);\n      break;\n    }\n    case \"Blindness/Deafness\": {\n      document = await blindnessDeafnessEffect(document);\n      break;\n    }\n    case \"Charm Person\": {\n      document = charmPersonEffect(document);\n      break;\n    }\n    case \"Chill Touch\": {\n      document = await chillTouchEffect(document);\n      break;\n    }\n    case \"Contagion\": {\n      document = await contagionEffect(document);\n      break;\n    }\n    case \"Crown of Madness\": {\n      document = crownofMadnessEffect(document);\n      break;\n    }\n    case \"Darkness\": {\n      document = await darknessEffect(document);\n      break;\n    }\n    case \"Darkvision\": {\n      document = await darkvisionEffect(document);\n      break;\n    }\n    case \"Dancing Lights\": {\n      document = await dancingLightsEffect(document);\n      break;\n    }\n    case \"Divine Favor\": {\n      document = divineFavorEffect(document);\n      break;\n    }\n    case \"Dominate Beast\": {\n      document = dominateBeastEffect(document);\n      break;\n    }\n    case \"Dominate Monster\": {\n      document = dominateMonsterEffect(document);\n      break;\n    }\n    case \"Dominate Person\": {\n      document = dominatePersonEffect(document);\n      break;\n    }\n    case \"Elemental Weapon\": {\n      document = elementalWeaponEffect(document);\n      break;\n    }\n    case \"Ensnaring Strike\": {\n      document = await ensnaringStrikeEffect(document);\n      break;\n    }\n    case \"Entangle\": {\n      document = entangleEffect(document);\n      break;\n    }\n    case \"Fear\": {\n      document = fearEffect(document);\n      break;\n    }\n    case \"Feeblemind\": {\n      document = feeblemindEffect(document);\n      break;\n    }\n    case \"Fire Shield\": {\n      document = await fireShieldEffect(document);\n      break;\n    }\n    case \"Flesh to Stone\": {\n      document = await fleshtoStoneEffect(document);\n      break;\n    }\n    case \"Fly\": {\n      document = flyEffect(document);\n      break;\n    }\n    case \"Geas\": {\n      document = geasEffect(document);\n      break;\n    }\n    case \"Grease\": {\n      document = await greaseEffect(document);\n      break;\n    }\n    case \"Greater Invisibility\": {\n      document = await greaterInvisibilityEffect(document);\n      break;\n    }\n    case \"Haste\": {\n      document = hasteEffect(document);\n      break;\n    }\n    case \"Heroes' Feast\": {\n      document = await heroesFeastEffect(document);\n      break;\n    }\n    case \"Heroism\": {\n      document = await heroismEffect(document);\n      break;\n    }\n    case \"Tasha's Hideous Laughter\":\n    case \"Hideous Laughter\": {\n      document = await hideousLaughterEffect(document);\n      break;\n    }\n    case \"Hold Monster\": {\n      document = holdMonsterEffect(document);\n      break;\n    }\n    case \"Hold Person\": {\n      document = holdPersonEffect(document);\n      break;\n    }\n    case \"Hypnotic Pattern\": {\n      document = hypnoticPatternEffect(document);\n      break;\n    }\n    case \"Invisibility\": {\n      document = await invisibilityEffect(document);\n      break;\n    }\n    case \"Light\": {\n      document = lightEffect(document);\n      break;\n    }\n    case \"Mage Armor\": {\n      document = mageArmorEffect(document);\n      break;\n    }\n    case \"Mage Hand\": {\n      document = await mageHandEffect(document);\n      break;\n    }\n    case \"Magic Weapon\": {\n      document = magicWeaponEffect(document);\n      break;\n    }\n    case \"Mass Suggestion\": {\n      document = massSuggestionEffect(document);\n      break;\n    }\n    case \"Mind Blank\": {\n      document = mindBlankEffect(document);\n      break;\n    }\n    case \"Mirror Image\": {\n      document = mirrorImageEffect(document);\n      break;\n    }\n    case \"Pass Without Trace\": {\n      document = passWithoutTraceEffect(document);\n      break;\n    }\n    case \"Phantasmal Killer\": {\n      document = await phantasmalKillerEffect(document);\n      break;\n    }\n    case \"Protection from Poison\": {\n      document = protectionfromPoisonEffect(document);\n      break;\n    }\n    case \"Psychic Scream\": {\n      document = psychicScreamEffect(document);\n      break;\n    }\n    case \"Ray of Sickness\": {\n      document = rayofSicknessEffect(document);\n      break;\n    }\n    case \"Shield\": {\n      document = shieldEffect(document);\n      break;\n    }\n    case \"Shillelagh\": {\n      document = shillelaghEffect(document);\n      break;\n    }\n    case \"Shield of Faith\": {\n      document = shieldofFaithEffect(document);\n      break;\n    }\n    case \"Sleep\": {\n      document = await sleepEffect(document);\n      break;\n    }\n    case \"Slow\": {\n      document = slowEffect(document);\n      break;\n    }\n    case \"Spider Climb\": {\n      document = spiderClimbEffect(document);\n      break;\n    }\n    case \"Stoneskin\": {\n      document = stoneskinEffect(document);\n      break;\n    }\n    case \"Sunbeam\": {\n      document = sunbeamEffect(document);\n      break;\n    }\n    case \"Tidal Wave\": {\n      document = tidalWaveEffect(document);\n      break;\n    }\n    case \"Warding Bond\": {\n      document = await wardingBondEffect(document);\n      break;\n    }\n    case \"Web\": {\n      document = await webEffect(document);\n      break;\n    }\n    // no default\n  }\n\n  return document;\n}\n\n/**\n * This function is for effects that can't be dynamically generated\n * @param {*} document\n */\n// eslint-disable-next-line complexity\nasync function midiEffectAdjustment(document) {\n  const deps = effectModules();\n  const name = document.flags.ddbimporter?.originalName ?? document.name;\n  document = applyDefaultMidiFlags(document);\n\n  // check that we can gen effects\n  if (!deps.hasCore) {\n    logger.warn(\"Sorry, you're missing some required modules for advanced automation of spell effects. Please install them and try again.\", deps);\n    return document;\n  }\n\n  logger.debug(`Adding effects to ${name}`);\n  switch (name) {\n    case \"Melf's Acid Arrow\":\n    case \"Acid Arrow\": {\n      document = acidArrowEffect(document);\n      break;\n    }\n    case \"Alter Self\": {\n      document = alterSelfEffect(document);\n      break;\n    }\n    case \"Armor of Agathys\": {\n      document = await armorOfAgathysEffect(document);\n      break;\n    }\n    case \"Banishment\": {\n      document = await banishmentEffect(document);\n      break;\n    }\n    case \"Beacon of Hope\": {\n      document = beaconofHopeEffect(document);\n      break;\n    }\n    case \"Blur\": {\n      document = blurEffect(document);\n      break;\n    }\n    case \"Booming Blade\": {\n      document = await boomingBladeEffect(document);\n      break;\n    }\n    case \"Branding Smite\": {\n      document = await brandingSmiteEffect(document);\n      break;\n    }\n    case \"Call Lightning\": {\n      document = await callLightningEffect(document);\n      break;\n    }\n    case \"Chromatic Orb\": {\n      document = await chromaticOrbEffect(document);\n      break;\n    }\n    case \"Cloudkill\": {\n      document = await cloudkillEffect(document);\n      break;\n    }\n    case \"Color Spray\": {\n      document = await colorSprayEffect(document);\n      break;\n    }\n    case \"Command\": {\n      document = await commandEffect(document);\n      break;\n    }\n    case \"Comprehend Languages\": {\n      document = comprehendLanguagesEffect(document);\n      break;\n    }\n    case \"Confusion\": {\n      document = await confusionEffect(document);\n      break;\n    }\n    case \"Counterspell\": {\n      document = forceManualReaction(document);\n      break;\n    }\n    case \"Crown of Stars\": {\n      document = await crownofStarsEffect(document);\n      break;\n    }\n    case \"Create Bonfire\": {\n      document = await createBonfireEffect(document);\n      break;\n    }\n    case \"Divine Word\": {\n      document = await divineWordEffect(document);\n      break;\n    }\n    case \"Enhance Ability\": {\n      document = await enhanceAbilityEffect(document);\n      break;\n    }\n    case \"Enlarge/Reduce\": {\n      document = await enlargeReduceEffect(document);\n      break;\n    }\n    case \"Eyebite\": {\n      document = await eyebiteEffect(document);\n      break;\n    }\n    case \"Faerie Fire\": {\n      document = await faerieFireEffect(document);\n      break;\n    }\n    case \"Feather Fall\": {\n      document = forceManualReaction(document);\n      break;\n    }\n    case \"Flame Blade\": {\n      document = await flameBladeEffect(document);\n      break;\n    }\n    case \"Frostbite\": {\n      document = frostbiteEffect(document);\n      break;\n    }\n    case \"Green-Flame Blade\": {\n      document = await greenFlameBladeEffect(document);\n      break;\n    }\n    case \"Guidance\": {\n      document = guidanceEffect(document);\n      break;\n    }\n    case \"Guiding Bolt\": {\n      document = guidingBoltEffect(document);\n      break;\n    }\n    case \"Hail of Thorns\": {\n      document = await hailOfThornsEffect(document);\n      break;\n    }\n    case \"Hex\": {\n      document = await hexEffect(document);\n      break;\n    }\n    case \"Holy Aura\": {\n      document = holyAuraEffect(document);\n      break;\n    }\n    case \"Hunter's Mark\": {\n      document = await huntersMarkEffect(document);\n      break;\n    }\n    case \"Ice Knife\": {\n      document = await iceKnifeEffect(document);\n      break;\n    }\n    case \"Incendiary Cloud\": {\n      document = await incendiaryCloudEffect(document);\n      break;\n    }\n    case \"Insect Plague\": {\n      document = await insectPlagueEffect(document);\n      break;\n    }\n    case \"Otto's Irresistible Dance\":\n    case \"Irresistible Dance\": {\n      document = await irresistibleDanceEffect(document);\n      break;\n    }\n    case \"Longstrider\": {\n      document = longstriderEffect(document);\n      break;\n    }\n    case \"Misty Step\": {\n      if (!deps.autoAnimationsInstalled) {\n        document = await mistyStepEffect(document);\n      }\n      break;\n    }\n    case \"Moonbeam\": {\n      document = await moonbeamEffect(document);\n      break;\n    }\n    case \"Polymorph\": {\n      document = polymorphEffect(document);\n      break;\n    }\n    case \"Protection from Energy\": {\n      document = await protectionfromEnergyEffect(document);\n      break;\n    }\n    case \"Ray of Enfeeblement\": {\n      document = await rayofEnfeeblementEffect(document);\n      break;\n    }\n    case \"Ray of Frost\": {\n      document = rayofFrostEffect(document);\n      break;\n    }\n    case \"Regenerate\": {\n      document = regenerateEffect(document);\n      break;\n    }\n    case \"Otiluke's Resilient Sphere\":\n    case \"Resilient Sphere\": {\n      document = resilientSphereEffect(document);\n      break;\n    }\n    case \"Resistance\": {\n      document = resistanceEffect(document);\n      break;\n    }\n    case \"Silence\": {\n      document = await silenceEffect(document);\n      break;\n    }\n    case \"Spike Growth\": {\n      document = await spikeGrowthEffect(document);\n      break;\n    }\n    case \"Spirit Guardians\": {\n      document = await spiritGuardiansEffect(document);\n      break;\n    }\n    case \"Spirit Shroud\": {\n      document = await spiritShroudEffect(document);\n      break;\n    }\n    case \"Spiritual Weapon\": {\n      document = await spiritualWeaponEffect(document);\n      break;\n    }\n    case \"Storm Sphere\": {\n      document = await stormSphereEffect(document);\n      break;\n    }\n    case \"Sword Burst\": {\n      document = swordBurstEffect(document);\n      break;\n    }\n    case \"Thunderclap\": {\n      document = thunderclapEffect(document);\n      break;\n    }\n    case \"Thunderous Smite\": {\n      document = await thunderousSmiteEffect(document);\n      break;\n    }\n    case \"Toll the Dead\": {\n      document = await tolltheDeadEffect(document);\n      break;\n    }\n    case \"True Strike\": {\n      document = trueStrikeEffect(document);\n      break;\n    }\n    case \"Vicious Mockery\": {\n      document = viciousMockeryEffect(document);\n      break;\n    }\n    case \"Vitriolic Sphere\": {\n      document = await vitriolicSphereEffect(document);\n      break;\n    }\n    case \"Witch Bolt\": {\n      document = await witchBoltEffect(document);\n      break;\n    }\n    case \"Zephyr Strike\": {\n      document = await zephyrStrikeEffect(document);\n      break;\n    }\n    // no default\n  }\n\n  return document;\n}\n\n\nexport async function spellEffectAdjustment(document, midiEffects = false) {\n  if (!document.effects) document.effects = [];\n  document = await basicSpellEffects(document);\n  if (midiEffects) document = await midiEffectAdjustment(document);\n  try {\n    document = forceItemEffect(document);\n  } catch (err) {\n    await Promise.all(document);\n    logger.error(\"Error applying effects: \", { err, document });\n  }\n  return document;\n}\n","import { baseSpellEffect } from \"../specialSpells.js\";\n\nexport function hasteEffect(document) {\n  let effect = baseSpellEffect(document, document.name);\n  effect.changes.push(\n    { key: \"system.attributes.ac.bonus\", mode: CONST.ACTIVE_EFFECT_MODES.ADD, value: \"+2\", priority: \"20\" },\n    {\n      key: \"flags.midi-qol.advantage.ability.save.dex\",\n      mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n      value: \"1\",\n      priority: \"20\",\n    },\n    { key: \"system.attributes.movement.all\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, value: \"*2\", priority: \"30\" }\n  );\n  effect.duration = {\n    startTime: null,\n    seconds: null,\n    rounds: 10,\n    startRound: null,\n    startTurn: null,\n  };\n  document.effects.push(effect);\n\n  return document;\n}\n","import { effectModules } from \"./effects.js\";\nimport { baseSpellEffect } from \"./specialSpells.js\";\n\n\nconst VISION_EFFECTS = {\n  \"Detect Evil and Good\": {\n    effectName: \"Detect Evil and Good\",\n    type: \"spell\",\n    transfer: false,\n  },\n  \"Echolocation\": {\n    effectName: \"Echolocation\",\n    type: \"feat\",\n    transfer: true,\n  },\n  \"Detect Thoughts\": {\n    effectName: \"Detect Thoughts\",\n    type: \"spell\",\n    transfer: false,\n  },\n  \"Detect Magic\": {\n    effectName: \"Detect Magic\",\n    type: \"spell\",\n    transfer: false,\n  },\n  \"Detect Poison and Disease\": {\n    effectName: \"Detect Poison and Disease\",\n    type: \"spell\",\n    transfer: false,\n  },\n  \"Eldritch Invocations: Devil's Sight\": {\n    effectName: \"Devil's Sight\",\n    type: \"feat\",\n    transfer: true,\n  },\n  \"Devil's Sight\": {\n    effectName: \"Devil's Sight\",\n    type: \"feat\",\n    transfer: true,\n  },\n  \"See Invisibility\": {\n    effectName: \"See Invisibility\",\n    type: \"spell\",\n    transfer: false,\n  },\n  \"Ghostly Gaze\": {\n    effectName: \"Ghostly Gaze\",\n    type: \"feat\",\n    transfer: false,\n  },\n};\n\nexport function addVision5eStub(document) {\n  if (!document.effects) document.effects = [];\n\n  const name = document.flags?.ddbimporter?.originalName ?? document.name;\n\n  // if document name in Vision effects then add effect\n  if (VISION_EFFECTS[name]\n    && document.type === VISION_EFFECTS[name].type\n    && !document.effects.some((e) => e.name === VISION_EFFECTS[name].effectName)\n  ) {\n    const effect = baseSpellEffect(document, VISION_EFFECTS[name].effectName);\n    effect.transfer = VISION_EFFECTS[name].transfer;\n    document.effects.push(effect);\n    if (VISION_EFFECTS[name].type === \"spell\") {\n      document.system.target.type = \"self\";\n    }\n    foundry.utils.setProperty(document, \"flags.ddbimporter.effectsApplied\", true);\n  }\n  return document;\n}\n\nexport function addVision5eStubs(documents) {\n  // check that we can gen effects\n  const deps = effectModules();\n  if (!deps.vision5eInstalled) return documents;\n\n  for (let document of documents) {\n    document = addVision5eStub(document);\n  }\n\n  return documents;\n}\n","import SETTINGS from '../../settings.js';\nimport CompendiumHelper from '../../lib/CompendiumHelper.js';\nimport FolderHelper from '../../lib/FolderHelper.js';\n\nexport async function createDDBCompendium(compendiumSetting) {\n  const compendiumName = game.settings.get(SETTINGS.MODULE_ID, compendiumSetting.setting);\n  const compendiumData = {\n    id: compendiumName,\n    type: compendiumSetting.type,\n    label: `DDB ${compendiumSetting.title}`,\n    image: compendiumSetting.image,\n    dnd5eTypeTags: compendiumSetting.types,\n  };\n\n  const createCompendiumFolder = game.settings.get(SETTINGS.MODULE_ID, \"top-level-compendium-folder\");\n  const compendiumFolder = createCompendiumFolder\n    ? await FolderHelper.getFolder(\"compendium\", \"\", \"D&D Beyond\", \"#6f0006\", \"#98020a\", false)\n    : null;\n  if (createCompendiumFolder) compendiumData.folder = compendiumFolder._id;\n  const result = await CompendiumHelper.createIfNotExists(compendiumData);\n\n  if (result.created) {\n    await game.settings.set(SETTINGS.MODULE_ID, compendiumSetting.setting, result.compendium.metadata.id);\n  } else if (result.compendium?.folder === null && createCompendiumFolder) {\n    result.compendium.configure({ folder: compendiumFolder._id });\n  }\n}\n\nexport default async function () {\n  if (game.settings.get(SETTINGS.MODULE_ID, \"auto-create-compendium\")) {\n    for (const compendium of SETTINGS.COMPENDIUMS.filter((c) => c.auto)) {\n      await createDDBCompendium(compendium);\n    }\n  }\n}\n","import logger from \"../logger.js\";\nimport DDBItemImporter from \"./DDBItemImporter.js\";\nimport SETTINGS from '../settings.js';\nimport utils from \"./utils.js\";\n\nconst CompendiumHelper = {\n\n  // a mapping of compendiums with content type\n  LOOKUP: [\n    { type: \"adventure\", compendium: \"entity-adventure-compendium\" },\n    { type: \"adventures\", compendium: \"entity-adventure-compendium\" },\n    { type: \"background\", compendium: \"entity-background-compendium\" },\n    { type: \"backgrounds\", compendium: \"entity-background-compendium\" },\n    { type: \"class\", compendium: \"entity-class-compendium\" },\n    { type: \"classes\", compendium: \"entity-class-compendium\" },\n    { type: \"classfeatures\", compendium: \"entity-feature-compendium\" },\n    { type: \"consumable\", compendium: \"entity-item-compendium\" },\n    { type: \"container\", compendium: \"entity-item-compendium\" },\n    { type: \"custom\", compendium: \"entity-override-compendium\" },\n    { type: \"equipment\", compendium: \"entity-item-compendium\" },\n    { type: \"feat\", compendium: \"entity-feature-compendium\" },\n    { type: \"feats\", compendium: \"entity-feat-compendium\" },\n    { type: \"feature\", compendium: \"entity-feature-compendium\" },\n    { type: \"features\", compendium: \"entity-feature-compendium\" },\n    { type: \"inventory\", compendium: \"entity-item-compendium\" },\n    { type: \"item\", compendium: \"entity-item-compendium\" },\n    { type: \"items\", compendium: \"entity-item-compendium\" },\n    { type: \"journal\", compendium: \"entity-journal-compendium\" },\n    { type: \"JournalEntry\", compendium: \"entity-journal-compendium\" },\n    { type: \"journals\", compendium: \"entity-journal-compendium\" },\n    { type: \"loot\", compendium: \"entity-item-compendium\" },\n    { type: \"magicitem\", compendium: \"entity-item-compendium\" },\n    { type: \"magicitems\", compendium: \"entity-item-compendium\" },\n    { type: \"monster\", compendium: \"entity-monster-compendium\" },\n    { type: \"monsters\", compendium: \"entity-monster-compendium\" },\n    { type: \"npc\", compendium: \"entity-monster-compendium\" },\n    { type: \"override\", compendium: \"entity-override-compendium\" },\n    { type: \"race\", compendium: \"entity-race-compendium\" },\n    { type: \"races\", compendium: \"entity-race-compendium\" },\n    { type: \"RollTable\", compendium: \"entity-table-compendium\" },\n    { type: \"spell\", compendium: \"entity-spell-compendium\" },\n    { type: \"spell\", compendium: \"entity-spell-compendium\" },\n    { type: \"spells\", compendium: \"entity-spell-compendium\" },\n    { type: \"subclass\", compendium: \"entity-subclass-compendium\" },\n    { type: \"subclasses\", compendium: \"entity-subclass-compendium\" },\n    { type: \"summon\", compendium: \"entity-summons-compendium\" },\n    { type: \"summons\", compendium: \"entity-summons-compendium\" },\n    { type: \"table\", compendium: \"entity-table-compendium\" },\n    { type: \"tables\", compendium: \"entity-table-compendium\" },\n    { type: \"tool\", compendium: \"entity-item-compendium\" },\n    { type: \"trait\", compendium: \"entity-trait-compendium\" },\n    { type: \"traits\", compendium: \"entity-trait-compendium\" },\n    { type: \"vehicle\", compendium: \"entity-vehicle-compendium\" },\n    { type: \"vehicles\", compendium: \"entity-vehicle-compendium\" },\n    { type: \"weapon\", compendium: \"entity-item-compendium\" },\n  ],\n\n  getCompendiumLabel: (type) => {\n    const compendiumName = CompendiumHelper.LOOKUP.find((c) => c.type == type).compendium;\n    const compendiumLabel = game.settings.get(\"ddb-importer\", compendiumName);\n    return compendiumLabel;\n  },\n\n  getCompendium: (label, fail = true) => {\n    const compendium = game.packs.get(label);\n    if (compendium) {\n      return compendium;\n    } else {\n      if (fail) {\n        logger.error(`Unable to find compendium ${label}`);\n        ui.notifications.error(`Unable to open the Compendium ${label}. Check the compendium exists and is set in \"Module Settings > DDB Importer > Compendiums\"`);\n        throw new Error(`Unable to open the Compendium ${label}. Check the compendium exists and is set in \"Module Settings > DDB Importer > Compendiums\".`);\n      }\n      return undefined;\n    }\n  },\n\n  getCompendiumType: (type, fail = true) => {\n    const compendiumLabel = CompendiumHelper.getCompendiumLabel(type);\n    logger.debug(`Getting compendium ${compendiumLabel} for update of ${type}`);\n    const compendium = CompendiumHelper.getCompendium(compendiumLabel, false);\n    if (compendium) {\n      return compendium;\n    } else {\n      logger.error(`Unable to find compendium ${compendiumLabel} for ${type} documents`);\n      ui.notifications.error(`Unable to open the Compendium ${compendiumLabel}. Check the compendium exists and is set in \"Module Settings > DDB Importer > Compendiums\"`);\n      if (fail) {\n        throw new Error(`Unable to open the Compendium ${compendiumLabel}. Check the compendium exists and is set in \"Module Settings > DDB Importer > Compendiums\"`);\n      }\n      return undefined;\n    }\n  },\n\n  loadCompendiumIndex: async (type, indexOptions = {}) => {\n    const compendiumLabel = CompendiumHelper.getCompendiumLabel(type);\n    foundry.utils.setProperty(CONFIG.DDBI, `compendium.label.${type}`, compendiumLabel);\n    const compendium = await CompendiumHelper.getCompendium(compendiumLabel);\n\n    if (compendium) {\n      const index = await compendium.getIndex(indexOptions);\n      foundry.utils.setProperty(CONFIG.DDBI, `compendium.index.${type}`, index);\n      return index;\n    } else {\n      return undefined;\n    }\n  },\n\n  /* eslint-disable require-atomic-updates */\n  copyExistingActorProperties: async (type, foundryActor) => {\n    const compendium = CompendiumHelper.getCompendiumType(type);\n\n    if (game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\")) {\n      const existingNPC = await compendium.getDocument(foundryActor._id);\n\n      const updateImages = game.settings.get(\"ddb-importer\", \"munching-policy-update-images\");\n      if (!updateImages && existingNPC.system.img !== CONST.DEFAULT_TOKEN) {\n        foundryActor.img = existingNPC.system.img;\n      }\n      if (!updateImages && foundry.utils.getProperty(existingNPC, \"prototypeToken.texture.src\") !== CONST.DEFAULT_TOKEN) {\n        foundryActor.prototypeToken.texture.src = existingNPC.prototypeToken.texture.src;\n        foundryActor.prototypeToken.scale = existingNPC.prototypeToken.scale;\n        foundryActor.prototypeToken.randomImg = existingNPC.prototypeToken.randomImg;\n        foundryActor.prototypeToken.mirrorX = existingNPC.prototypeToken.mirrorX;\n        foundryActor.prototypeToken.mirrorY = existingNPC.prototypeToken.mirrorY;\n        foundryActor.prototypeToken.lockRotation = existingNPC.prototypeToken.lockRotation;\n        foundryActor.prototypeToken.rotation = existingNPC.prototypeToken.rotation;\n        foundryActor.prototypeToken.alpha = existingNPC.prototypeToken.alpha;\n        foundryActor.prototypeToken.lightAlpha = existingNPC.prototypeToken.lightAlpha;\n        foundryActor.prototypeToken.lightAnimation = existingNPC.prototypeToken.lightAnimation;\n        foundryActor.prototypeToken.tint = existingNPC.prototypeToken.tint;\n        foundryActor.prototypeToken.lightColor = existingNPC.prototypeToken.lightColor;\n      }\n\n      const retainBiography = game.settings.get(\"ddb-importer\", \"munching-policy-monster-retain-biography\");\n      if (retainBiography) {\n        foundryActor.system.details.biography = existingNPC.system.details.biography;\n      }\n\n      DDBItemImporter.copySupportedItemFlags(existingNPC.toObject(), foundryActor);\n    }\n\n    return foundryActor;\n\n  },\n  /* eslint-enable require-atomic-updates */\n\n  getActorIndexActor: async (type, npc) => {\n    const monsterIndexFields = [\"name\", \"flags.ddbimporter.id\"];\n    const legacyName = game.settings.get(\"ddb-importer\", \"munching-policy-legacy-postfix\");\n    const index = await CompendiumHelper.loadCompendiumIndex(type, { fields: monsterIndexFields });\n    const npcMatch = index.contents.find((entity) =>\n      foundry.utils.hasProperty(entity, \"flags.ddbimporter.id\")\n      && entity.flags.ddbimporter.id == npc.flags.ddbimporter.id\n      && ((!legacyName && entity.name.toLowerCase() === npc.name.toLowerCase())\n        || (legacyName && npc.flags.ddbimporter.isLegacy && npc.name.toLowerCase().startsWith(entity.name.toLowerCase()))\n        || (legacyName && entity.name.toLowerCase() === npc.name.toLowerCase()))\n    );\n    return npcMatch;\n  },\n\n  existingActorCheck: async (type, foundryActor) => {\n    const matchingActor = await CompendiumHelper.getActorIndexActor(type, foundryActor);\n    if (matchingActor) {\n      logger.debug(`Found existing ${type}, updating: ${matchingActor.name}`);\n      // eslint-disable-next-line require-atomic-updates\n      foundryActor._id = matchingActor._id;\n      foundryActor = await CompendiumHelper.copyExistingActorProperties(type, foundryActor);\n    } else {\n      logger.debug(`No existing compendium match for ${foundryActor.name}`);\n    }\n    return foundryActor;\n  },\n\n  sanitize: (text) => {\n    if (text && typeof text === \"string\") {\n      return text.replace(/\\s|\\./g, '-').toLowerCase();\n    }\n    return text;\n  },\n\n  getDefaultCompendiumName: (compendiumLabel) => {\n    const sanitizedLabel = CompendiumHelper.sanitize(compendiumLabel);\n    const name = `ddb-${game.world.id}-${sanitizedLabel}`;\n    return name;\n  },\n\n  /**\n   * Attempts to find a compendium pack by name, if not found, create a new one based on item type\n   * @param  {string} label - Label of compendium to find\n   * @param  {string} type - Name of compendium\n   * @param  {string} id - Id of compendium, optional, used in place of label to find compendium\n   * @param  {string} packageType - package type of compendium, defaults to world\n   * @returns {object} - Object consisting of compendium and creation result\n   */\n  // eslint-disable-next-line no-unused-vars\n  createIfNotExists: async ({ label, type, id = undefined, packageType = \"world\", folderId = null, dnd5eTypeTags = [] } = {}) => {\n    if (id) logger.debug(`Checking if Compendium with id ${id} exists for ${SETTINGS.MODULE_ID}`);\n    else if (label) logger.debug(`Checking if Compendium with label ${label} exists for ${SETTINGS.MODULE_ID}`);\n    const compendium = await game.packs.get(id) ?? game.packs.find((p) => p.metadata.label === label);\n    if (compendium) {\n      logger.debug(`Compendium '${id}' (${compendium.metadata.label}) found, will not create compendium.`);\n      return {\n        compendium,\n        created: false\n      };\n    } else {\n      logger.info(`Compendium for ${label}, was not found, creating it now.`);\n      const name = CompendiumHelper.getDefaultCompendiumName(label);\n      const defaultCompendium = await game.packs.get(`${packageType}.${name}`);\n      if (defaultCompendium) {\n        logger.error(`Could not load Compendium '${id}', and could not create default Compendium '${name}' as it already exists. Please check your DDB Importer Compendium setup.`);\n        return {\n          compendium: null,\n          created: false,\n        };\n      } else {\n        // create a compendium for the user\n        const newCompendium = await CompendiumCollection.createCompendium({\n          type,\n          label,\n          name,\n          package: packageType,\n          // flags: {\n          //   dnd5e: {\n          //     types: dnd5eTypeTags,\n          //   }\n          // }\n        });\n        if (folderId) await newCompendium.setFolder(folderId);\n        return {\n          compendium: newCompendium,\n          created: true\n        };\n      }\n    }\n  },\n\n  getCompendiumNames: () => {\n    return SETTINGS.COMPENDIUMS.map((ddbCompendium) => {\n      return game.settings.get(SETTINGS.MODULE_ID, ddbCompendium.setting);\n    });\n  },\n\n  deleteDefaultCompendiums: (force = true) => {\n    if (!force) {\n      logger.warn(\"Pass 'true' to this function to force deletion.\");\n    }\n    game.settings.set(SETTINGS.MODULE_ID, \"auto-create-compendium\", false);\n\n    const clone = foundry.utils.deepClone(SETTINGS.DEFAULT_SETTINGS);\n    const compendiumSettings = SETTINGS.APPLY_GLOBAL_DEFAULTS(clone.READY.COMPENDIUMS);\n\n    for (const [name, data] of Object.entries(compendiumSettings)) {\n      const compendiumName = CompendiumHelper.getDefaultCompendiumName(data.default);\n\n      logger.warn(`Setting: ${name} : Deleting compendium ${data.name} with key world.${compendiumName}}`);\n      game.packs.delete(`world.${compendiumName}`);\n    }\n  },\n\n  /**\n   * Queries a compendium for a single document\n   * Returns either the entry from the index, or the complete document from the compendium\n   */\n  queryCompendiumEntry: async (compendiumName, documentName, getDocument = false) => {\n    // normalize the entity name for comparison\n    documentName = utils.normalizeString(documentName);\n\n    // get the compendium\n    const compendium = game.packs.get(compendiumName);\n    if (!compendium) return null;\n\n    // retrieve the compendium index\n    const index = await compendium.getIndex();\n\n    let id = index.find((entity) => utils.normalizeString(entity.name) === documentName);\n    if (id && getDocument) {\n      let entity = await compendium.getDocument(id._id);\n      return entity;\n    }\n    return id ? id : null;\n  },\n\n  /**\n   * Queries a compendium for a single document\n   * Returns either the entry from the index, or the complete document from the compendium\n   */\n  queryCompendiumEntries: async (compendiumName, documentNames, getDocuments = false) => {\n    // get the compendium\n    let compendium = game.packs.get(compendiumName);\n    if (!compendium) return null;\n\n    // retrieve the compendium index\n    let index = await compendium.getIndex();\n    index = index.map((entry) => {\n      entry.normalizedName = utils.normalizeString(entry.name);\n      return entry;\n    });\n\n    // get the indices of all the entitynames, filter un\n    let indices = documentNames\n      .map((entityName) => {\n        // sometimes spells do have restricted use in paranthesis after the name. Let's try to find those restrictions and add them later\n        if (entityName.search(/(.+)\\(([^()]+)\\)*/) !== -1) {\n          const match = entityName.match(/(.+)\\(([^()]+)\\)*/);\n          return {\n            name: utils.normalizeString(match[1].trim()),\n            restriction: match[2].trim(),\n          };\n        } else {\n          return {\n            name: utils.normalizeString(entityName),\n            restriction: null,\n          };\n        }\n      })\n      .map((data) => {\n        let entry = index.find((entity) => entity.normalizedName === data.name);\n        if (entry) {\n          return {\n            _id: entry._id,\n            name: data.restriction ? `${entry.name} (${data.restriction})` : entry.name,\n          };\n        } else {\n          return null;\n        }\n      });\n\n    if (getDocuments) {\n      // replace non-null values with the complete entity from the compendium\n      let entities = await Promise.all(\n        indices.map((entry) => {\n          return new Promise((resolve) => {\n            if (entry) {\n              compendium.getDocument(entry._id).then((entity) => {\n                entity.name = entry.name; // transfer restrictions over, if any\n                // remove redudant info\n                delete entity.id;\n                delete entity.ownership;\n                resolve(entity);\n              });\n            } else {\n              resolve(null);\n            }\n          });\n        })\n      );\n      return entities;\n    }\n    return indices;\n  },\n\n  /**\n   * Queries a compendium for a given document name\n   * @returns the index entries of all matches, otherwise an empty array\n   */\n  queryCompendium: async (compendiumName, documentName, getDocument = false) => {\n    documentName = utils.normalizeString(documentName);\n\n    let compendium = game.packs.get(compendiumName);\n    if (!compendium) return null;\n    let index = await compendium.getIndex();\n    let id = index.find((entity) => utils.normalizeString(entity.name) === documentName);\n    if (id && getDocument) {\n      let entity = await compendium.getEntity(id._id);\n      return entity;\n    }\n    return id ? id : null;\n  },\n\n  /**\n   *\n   * @param {[string]} items Array of Strings or\n   */\n  async retrieveMatchingCompendiumItems(items, compendiumName) {\n    const GET_ENTITY = true;\n\n    const itemNames = items.map((item) => {\n      if (typeof item === \"string\") return item;\n      if (typeof item === \"object\" && Object.prototype.hasOwnProperty.call(item, \"name\")) return item.name;\n      return \"\";\n    });\n\n    const results = await CompendiumHelper.queryCompendiumEntries(compendiumName, itemNames, GET_ENTITY);\n    const cleanResults = results.filter((item) => item !== null);\n\n    return cleanResults;\n  }\n\n\n};\n\nexport default CompendiumHelper;\n","import PatreonHelper from \"../lib/PatreonHelper.js\";\nimport DDBMuncher from \"../apps/DDBMuncher.js\";\nimport { getCobalt } from \"./Secrets.js\";\nimport logger from \"../logger.js\";\nimport DDBProxy from \"./DDBProxy.js\";\n\n\nexport default class DDBCampaigns {\n\n\n  static getCampaignId() {\n    const campaignId = game.settings.get(\"ddb-importer\", \"campaign-id\").split(\"/\").pop();\n\n    if (campaignId && campaignId !== \"\" && !Number.isInteger(parseInt(campaignId))) {\n      DDBMuncher.munchNote(`Campaign Id is invalid! Set to \"${campaignId}\", using empty string`, true);\n      logger.error(`Campaign Id is invalid! Set to \"${campaignId}\", using empty string`);\n      return \"\";\n    } else if (campaignId.includes(\"join\")) {\n      DDBMuncher.munchNote(`Campaign URL is a join campaign link, using empty string! Set to \"${campaignId}\"`, true);\n      logger.error(`Campaign URL is a join campaign link, using empty string! Set to \"${campaignId}\"`);\n      return \"\";\n    }\n    return campaignId;\n  }\n\n  static getDDBCampaigns(cobalt = null) {\n    const cobaltCookie = cobalt ? cobalt : getCobalt();\n    const parsingApi = DDBProxy.getProxy();\n    const betaKey = PatreonHelper.getPatreonKey();\n    const body = { cobalt: cobaltCookie, betaKey: betaKey };\n\n    return new Promise((resolve, reject) => {\n      fetch(`${parsingApi}/proxy/campaigns`, {\n        method: \"POST\",\n        cache: \"no-cache\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body), // body data type must match \"Content-Type\" header\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          if (data.success) {\n            resolve(data.data);\n          } else {\n            logger.error(`Campaign fetch failed, got the following message: ${data.message}`, data);\n            resolve([]);\n          }\n        })\n        .catch((error) => {\n          logger.error(`Cobalt cookie check error`);\n          logger.error(error);\n          logger.error(error.stack);\n          reject(error);\n        });\n    });\n\n  }\n\n  static async refreshCampaigns(cobalt = null) {\n    if (cobalt) {\n      const results = await DDBCampaigns.getDDBCampaigns(cobalt);\n      CONFIG.DDBI.CAMPAIGNS = results;\n    }\n    return CONFIG.DDBI.CAMPAIGNS;\n  }\n\n  static async getAvailableCampaigns() {\n    if (CONFIG.DDBI.CAMPAIGNS) return CONFIG.DDBI.CAMPAIGNS;\n    // eslint-disable-next-line require-atomic-updates\n    CONFIG.DDBI.CAMPAIGNS = [];\n    const campaignId = DDBCampaigns.getCampaignId();\n    const campaigns = await DDBCampaigns.getDDBCampaigns();\n\n    if (!campaigns || campaigns.length === 0) {\n      if (campaignId && campaignId.trim() !== \"\") {\n        // eslint-disable-next-line require-atomic-updates\n        CONFIG.DDBI.CAMPAIGNS = [\n          {\n            id: campaignId,\n            name: \"Unable to fetch campaigns, showing only selected\",\n            dmUsername: campaignId,\n          }\n        ];\n      }\n    } else if (campaigns && campaigns.length > 0) {\n      // eslint-disable-next-line require-atomic-updates\n      CONFIG.DDBI.CAMPAIGNS = campaigns;\n    }\n\n    CONFIG.DDBI.CAMPAIGNS.forEach((campaign) => {\n      const selected = parseInt(campaign.id) === parseInt(campaignId);\n      campaign.selected = selected;\n    });\n\n    return CONFIG.DDBI.CAMPAIGNS;\n  }\n\n}\n","import DICTIONARY from \"../dictionary.js\";\nimport logger from \"../logger.js\";\nimport CompendiumHelper from \"../lib/CompendiumHelper.js\";\nimport utils from \"./utils.js\";\n\nexport class DDBCompendiumFolders {\n  resetFolderLookups() {\n    this.rootItemFolders = {};\n    this.equipmentFolders = {};\n    this.weaponFolders = {};\n    this.trinketFolders = {};\n    this.consumableFolders = {};\n    this.lootFolders = {};\n    this.toolFolders = {};\n    this.containerFolders = {};\n    this.validFolderIds = [];\n    this.classFolders = {};\n    this.subClassFolders = {};\n    this.raceFolders = {};\n    this.subRaceFolders = {};\n    this.traitFolders = {};\n    this.traitSubFolders = {};\n    this.summonFolders = {};\n    this.summonSubFolders = {};\n  }\n\n  constructor(type, packName) {\n    this.type = type;\n    this.packName = packName;\n    this.resetFolderLookups();\n\n    this.entityTypes = utils.entityMap();\n    this.entityType = this.entityTypes.get(type);\n\n    // this.monsterFolders = {};\n    // this.spellFolders = {};\n    // this.itemFolders = {};\n\n    this.compendiumFolderTypeMonster = game.settings.get(\"ddb-importer\", \"munching-selection-compendium-folders-monster\");\n    this.compendiumFolderTypeSpell = game.settings.get(\"ddb-importer\", \"munching-selection-compendium-folders-spell\");\n    this.compendiumFolderTypeItem = game.settings.get(\"ddb-importer\", \"munching-selection-compendium-folders-item\");\n\n  }\n\n  async addCompendiumFolderIds(documents) {\n    const results = documents.map(async (d) => {\n      const folderId = await this.getFolderId(d);\n      // eslint-disable-next-line require-atomic-updates\n      if (folderId) d.folder = folderId;\n      return d;\n    });\n    return Promise.all(results);\n  }\n\n  async loadCompendium(type = null) {\n    if (type) {\n      this.packName = await CompendiumHelper.getCompendiumLabel(type);\n      this.entityType = this.entityTypes.get(type);\n    }\n    this.compendium = CompendiumHelper.getCompendium(this.packName);\n    await this.createCompendiumFolders();\n  }\n\n  async createCompendiumFolder({ name, parentId = null, color = \"#6f0006\", folderId = null, flagTag = \"\" } = {}) {\n    logger.debug(\"Finding folder\", {\n      folders: this.compendium.folders,\n      parentId,\n    });\n    const existingFolder = this.compendium.folders.find((f) =>\n      f.name === name\n      && flagTag === f.flags?.ddbimporter?.flagTag\n      && (parentId === null\n        || (parentId === f.folder?._id)\n      )\n    );\n    if (existingFolder) return existingFolder;\n\n    logger.debug(\"Creating folder\", {\n      folders: this.compendium.folders,\n      parentId,\n    });\n\n    const newFolder = await Folder.create({\n      _id: folderId,\n      name,\n      color,\n      type: this.entityType,\n      folder: parentId,\n      flags: {\n        ddbimporter: {\n          flagTag,\n        },\n      }\n    }, { pack: this.packName, keepId: true });\n\n    return newFolder;\n  }\n\n  async createCreatureTypeCompendiumFolders() {\n    for (const monsterType of CONFIG.DDB.monsterTypes) {\n      const folder = this.getFolder(monsterType.name)\n        ?? (await this.createCompendiumFolder({ name: monsterType.name, color: \"#6f0006\" }));\n      this.validFolderIds.push(folder._id);\n    }\n  }\n\n  async createAlphabeticalCompendiumFolders() {\n    for (let i = 9; ++i < 36;) {\n      const folderName = i.toString(36).toUpperCase();\n      const folder = this.getFolder(folderName)\n        ?? (await this.createCompendiumFolder({ name: folderName, color: \"#6f0006\" }));\n      this.validFolderIds.push(folder._id);\n    }\n  }\n\n  async createChallengeRatingCompendiumFolders() {\n    for (const cr of CONFIG.DDB.challengeRatings) {\n      const paddedCR = String(cr.value).padStart(2, \"0\");\n      const folder = this.getFolder(`CR ${paddedCR}`)\n        ?? (await this.createCompendiumFolder({ name: `CR ${paddedCR}`, color: \"#6f0006\" }));\n      this.validFolderIds.push(folder._id);\n    }\n  }\n\n  // spell level\n  async createSpellLevelCompendiumFolders() {\n    for (const levelName of DICTIONARY.COMPENDIUM_FOLDERS.SPELL_LEVEL) {\n      logger.debug(`Checking for folder '${levelName}'`);\n      const folder = this.getFolder(levelName)\n        ?? (await this.createCompendiumFolder({ name: levelName }));\n      this.validFolderIds.push(folder._id);\n    }\n  }\n\n  // spell school\n  async createSpellSchoolCompendiumFolders() {\n    for (const school of DICTIONARY.spell.schools) {\n      const schoolName = utils.capitalize(school.name);\n      logger.debug(`Checking for folder '${schoolName}'`);\n      const folder = this.getFolder(schoolName)\n        ?? (await this.createCompendiumFolder({ name: schoolName }));\n      this.validFolderIds.push(folder._id);\n    }\n  }\n\n  // item rarity folder\n  async createItemRarityCompendiumFolders() {\n    for (const rarityName of DICTIONARY.COMPENDIUM_FOLDERS.RARITY) {\n      logger.debug(`Checking for folder '${rarityName}'`);\n      const folder = this.getFolder(rarityName, rarityName)\n        ?? (await this.createCompendiumFolder({ name: rarityName, flagTag: rarityName }));\n      this.validFolderIds.push(folder._id);\n    }\n  }\n\n  // item type folder\n  async createItemTypeCompendiumFolders() {\n    for (const [key, folderName] of Object.entries(DICTIONARY.COMPENDIUM_FOLDERS.ITEM_ROOT)) {\n      const flagTag = folderName;\n      logger.debug(`Checking for root folder '${folderName}' with key '${key}'`);\n      const folder = this.getFolder(folderName, flagTag)\n        ?? (await this.createCompendiumFolder({ name: folderName, flagTag: folderName }));\n      this.rootItemFolders[key] = folder;\n      this.validFolderIds.push(folder._id);\n    }\n\n    logger.debug(\"Root item folders\", this.rootItemFolders);\n\n    for (const [key, folderName] of Object.entries(DICTIONARY.COMPENDIUM_FOLDERS.EQUIPMENT)) {\n      const flagTag = `equipment/${folderName}`;\n      logger.debug(`Checking for Equipment folder '${folderName}' with key '${key}'`);\n\n      const folder = this.getFolder(folderName, flagTag)\n        ?? (await this.createCompendiumFolder({ name: folderName, parentId: this.rootItemFolders[\"equipment\"]._id, color: \"#222222\", flagTag }));\n      this.equipmentFolders[key] = folder;\n      this.validFolderIds.push(folder._id);\n    }\n\n    for (const [key, folderName] of Object.entries(DICTIONARY.COMPENDIUM_FOLDERS.WEAPON)) {\n      const flagTag = `weapon/${folderName}`;\n      logger.debug(`Checking for Weapon folder '${folderName}' with key '${key}'`);\n      const folder = this.getFolder(folderName, flagTag)\n        ?? (await this.createCompendiumFolder({ name: folderName, parentId: this.rootItemFolders[\"weapon\"]._id, color: \"#222222\", flagTag }));\n      this.weaponFolders[key] = folder;\n      this.validFolderIds.push(folder._id);\n    }\n\n    for (const [key, folderName] of Object.entries(DICTIONARY.COMPENDIUM_FOLDERS.TOOLS)) {\n      const flagTag = `tool/${folderName}`;\n      logger.debug(`Checking for Tool folder '${folderName}' with key '${key}'`);\n      const folder = this.getFolder(folderName, flagTag)\n        ?? (await this.createCompendiumFolder({ name: folderName, parentId: this.rootItemFolders[\"tool\"]._id, color: \"#222222\", flagTag }));\n      this.toolFolders[key] = folder;\n      this.validFolderIds.push(folder._id);\n    }\n\n    for (const folderName of DICTIONARY.COMPENDIUM_FOLDERS.TRINKET) {\n      const flagTag = `trinket/${folderName}`;\n      logger.debug(`Checking for Equipment\\\\Trinket folder '${folderName}'`);\n      const folder = this.getFolder(folderName, flagTag)\n       ?? (await this.createCompendiumFolder({ name: folderName, parentId: this.equipmentFolders[\"trinket\"]._id, color: \"#444444\", flagTag }));\n      this.trinketFolders[folderName] = folder;\n      this.validFolderIds.push(folder._id);\n    }\n\n    for (const folderName of DICTIONARY.COMPENDIUM_FOLDERS.CONSUMABLE) {\n      const flagTag = `consumable/${folderName}`;\n      logger.debug(`Checking for Consumable folder '${folderName}'`);\n      const folder = this.getFolder(folderName, flagTag)\n       ?? (await this.createCompendiumFolder({ name: folderName, parentId: this.rootItemFolders[\"consumable\"]._id, color: \"#222222\", flagTag }));\n      this.consumableFolders[folderName] = folder;\n      this.validFolderIds.push(folder._id);\n    }\n\n    for (const folderName of DICTIONARY.COMPENDIUM_FOLDERS.LOOT) {\n      const flagTag = `loot/${folderName}`;\n      logger.debug(`Checking for Loot folder '${folderName}'`);\n      const folder = this.getFolder(folderName, flagTag)\n       ?? (await this.createCompendiumFolder({ name: folderName, parentId: this.rootItemFolders[\"loot\"]._id, color: \"#222222\", flagTag }));\n      this.lootFolders[folderName] = folder;\n      this.validFolderIds.push(folder._id);\n    }\n\n    for (const folderName of DICTIONARY.COMPENDIUM_FOLDERS.CONTAINER) {\n      const flagTag = `container/${folderName}`;\n      logger.debug(`Checking for Container folder '${folderName}'`);\n      const folder = this.getFolder(folderName, flagTag)\n        ?? (await this.createCompendiumFolder({ name: folderName, parentId: this.rootItemFolders[\"container\"]._id, color: \"#222222\", flagTag }));\n      this.containerFolders[folderName] = folder;\n      this.validFolderIds.push(folder._id);\n    }\n  }\n\n  async createClassFeatureFolders(includeOptions = true) {\n    const classNames = CONFIG.DDB.classConfigurations\n      .filter((c) => !c.name.includes(\"archived\") && !c.name.includes(\"(UA)\"))\n      .map((c) => c.name);\n\n    for (const className of classNames) {\n      logger.debug(`Checking for class folder '${className}'`);\n      const folder = this.getFolder(className)\n        ?? (await this.createCompendiumFolder({ name: className }));\n      this.validFolderIds.push(folder._id);\n      this.classFolders[className] = folder;\n      if (includeOptions) {\n        const flagTag = `optional/${className}`;\n        const optionalFolder = this.getFolder(\"Optional Features\", flagTag)\n          ?? (await this.createCompendiumFolder({ name: \"Optional Features\", parentId: folder._id, color: \"#222222\", flagTag }));\n        this.validFolderIds.push(optionalFolder._id);\n      }\n      if (includeOptions && className === \"Artificer\") {\n        const flagTag = `infusions/Artificer`;\n        const infusionsFolder = this.getFolder(\"Infusions\", flagTag)\n          ?? (await this.createCompendiumFolder({ name: \"Infusions\", parentId: folder._id, color: \"#222222\", flagTag }));\n        this.validFolderIds.push(infusionsFolder._id);\n      }\n    }\n  }\n\n  async createSubClassFeatureFolder(subclassName, parentClassName) {\n    const flagTag = `subclass/${subclassName}`;\n    logger.debug(`Checking for Subclass folder '${subclassName}' with Parent Class '${parentClassName}'`);\n\n    const folder = this.getFolder(subclassName, flagTag)\n      ?? (await this.createCompendiumFolder({\n        name: subclassName,\n        parentId: this.classFolders[parentClassName]._id,\n        color: \"#222222\",\n        flagTag,\n      }));\n    this.subClassFolders[subclassName] = folder;\n    this.validFolderIds.push(folder._id);\n  }\n\n  async getRacialBaseFolder(type, baseRaceName) {\n    const folderType = type.includes(\"trait\") ? \"traitFolders\" : \"raceFolders\";\n    const flagType = type.includes(\"trait\") ? \"trait\" : \"race\";\n    logger.debug(`Checking for race folder '${baseRaceName}'`);\n    const existingFolder = this.getFolder(baseRaceName, `${flagType}/${baseRaceName}`);\n    if (existingFolder) return existingFolder;\n    logger.debug(`Not found, creating race folder '${baseRaceName}'`);\n    const newFolder = await this.createCompendiumFolder({\n      name: baseRaceName,\n      flagTag: `${flagType}/${baseRaceName}`,\n    });\n    this.validFolderIds.push(newFolder._id);\n    this[folderType][baseRaceName] = newFolder;\n    return newFolder;\n  }\n\n  async createBaseRacialFolders(type) {\n    const raceNames = CONFIG.DDB.raceGroups.map((c) => c.name);\n    for (const raceName of raceNames) {\n      await this.getRacialBaseFolder(type, raceName);\n    }\n  }\n\n  async createSubTraitFolders(baseRaceName, fullRaceName) {\n    const flagTag = `trait/${baseRaceName}/${fullRaceName}`;\n    logger.debug(`Checking for Race folder '${fullRaceName}' with Base Race '${baseRaceName}'`);\n\n    const parentFolder = await this.getRacialBaseFolder(\"trait\", baseRaceName);\n\n    const folder = this.getFolder(fullRaceName, flagTag)\n      ?? (await this.createCompendiumFolder({\n        name: fullRaceName,\n        parentId: parentFolder._id,\n        color: \"#222222\",\n        flagTag,\n      }));\n    this.traitSubFolders[fullRaceName] = folder;\n    this.validFolderIds.push(folder._id);\n  }\n\n  async createSummonsFolder(type) {\n    const flagTag = `summons/${type}`;\n    logger.debug(`Checking for Summons folder '${type}'`);\n    const existingFolder = this.getFolder(type, flagTag);\n    if (existingFolder) return existingFolder;\n    logger.debug(`Not found, creating summons folder '${type}'`);\n    const newFolder = await this.createCompendiumFolder({\n      name: type,\n      flagTag,\n    });\n    this.validFolderIds.push(newFolder._id);\n    this.summonFolders[type] = newFolder;\n    return newFolder;\n  }\n\n  async createSummonsSubFolder(type, subFolderName) {\n    const flagTag = `summons/${type}/${subFolderName}`;\n    logger.debug(`Checking for Summons folder '${subFolderName}' with Base Folder '${subFolderName}'`);\n\n    const parentFolder = await this.createSummonsFolder(type);\n\n    const folder = this.getFolder(subFolderName, flagTag)\n      ?? (await this.createCompendiumFolder({\n        name: subFolderName,\n        parentId: parentFolder._id,\n        color: \"#222222\",\n        flagTag,\n      }));\n    this.summonSubFolders[subFolderName] = folder;\n    this.validFolderIds.push(folder._id);\n  }\n\n  // eslint-disable-next-line complexity\n  async createCompendiumFolders() {\n    logger.debug(`Checking and creating Compendium folder structure for ${this.type}`);\n\n    this.resetFolderLookups();\n\n    switch (this.type) {\n      case \"race\":\n      case \"races\": {\n        // we create these as needed\n        // this.createBaseRacialFolders(\"race\");\n        break;\n      }\n      case \"trait\":\n      case \"traits\": {\n        // we create these as needed\n        // this.createBaseRacialFolders(\"trait\");\n        break;\n      }\n      case \"summons\":\n      case \"summon\": {\n        // we create these as needed\n        // this.createBaseSummonFolders(\"summon\");\n        break;\n      }\n      case \"monsters\":\n      case \"npc\":\n      case \"monster\": {\n        switch (this.compendiumFolderTypeMonster) {\n          case \"TYPE\": {\n            await this.createCreatureTypeCompendiumFolders();\n            break;\n          }\n          case \"ALPHA\": {\n            await this.createAlphabeticalCompendiumFolders();\n            break;\n          }\n          case \"CR\": {\n            await this.createChallengeRatingCompendiumFolders();\n            break;\n          }\n          // no default\n        }\n        break;\n      }\n      case \"spell\":\n      case \"spells\": {\n        switch (this.compendiumFolderTypeSpell) {\n          case \"SCHOOL\":\n            await this.createSpellSchoolCompendiumFolders();\n            break;\n          case \"LEVEL\":\n            await this.createSpellLevelCompendiumFolders();\n            break;\n          // no default\n        }\n        break;\n      }\n      case \"inventory\":\n      case \"item\":\n      case \"items\": {\n        switch (this.compendiumFolderTypeItem) {\n          case \"TYPE\":\n            await this.createItemTypeCompendiumFolders();\n            break;\n          case \"RARITY\":\n            await this.createItemRarityCompendiumFolders();\n            break;\n          // no default\n        }\n        break;\n      }\n      case \"features\": {\n        await this.createClassFeatureFolders();\n        break;\n      }\n      case \"subclass\":\n      case \"subclasses\": {\n        await this.createClassFeatureFolders(false);\n        break;\n      }\n      // no default\n    }\n    return this.compendium.folders;\n  }\n\n  static getItemCompendiumFolderNameForRarity(document) {\n    let name;\n    const rarity = document.system.rarity;\n\n    if (rarity && rarity != \"\") {\n      switch (rarity.toLowerCase().trim()) {\n        case \"common\":\n          name = \"Common\";\n          break;\n        case \"uncommon\":\n          name = \"Uncommon\";\n          break;\n        case \"rare\":\n          name = \"Rare\";\n          break;\n        case \"very rare\":\n        case \"veryrare\":\n          name = \"Very Rare\";\n          break;\n        case \"legendary\":\n          name = \"Legendary\";\n          break;\n        case \"artifact\":\n          name = \"Artifact\";\n          break;\n        case \"varies\":\n          name = \"Varies\";\n          break;\n        case \"unknown\":\n        default:\n          name = \"Unknown\";\n          break;\n      }\n    } else {\n      name = \"Unknown\";\n    }\n    return { name, flagTag: name };\n  }\n\n  getItemCompendiumFolderNameForType(document) {\n    const result = {\n      name: undefined,\n      flagTag: \"\",\n    };\n\n    switch (document.type) {\n      case \"dnd-tashas-cauldron.tattoo\":\n      case \"tattoo\": {\n        const ddbType = document.flags?.ddbimporter?.dndbeyond?.type;\n        result.name = this.trinketFolders[ddbType].name;\n        result.flagTag = `trinket/${result.name}`;\n        break;\n      }\n      case \"equipment\": {\n        switch (document.system?.type?.value) {\n          case \"trinket\": {\n            const ddbType = document.flags?.ddbimporter?.dndbeyond?.type;\n            const isContainer = foundry.utils.getProperty(document, \"flags.ddbimporter.dndbeyond.isContainer\") === true;\n            result.name = isContainer\n              ? this.containerFolders[ddbType].name\n              : this.trinketFolders[ddbType].name;\n            result.flagTag = isContainer\n              ? `container/${result.name}`\n              : `trinket/${result.name}`;\n            break;\n          }\n          default: {\n            result.name = this.equipmentFolders[document.system.type.value].name;\n            result.flagTag = `equipment/${result.name}`;\n            break;\n          }\n        }\n        break;\n      }\n      case \"weapon\": {\n        result.name = this.weaponFolders[document.system.type.value].name;\n        result.flagTag = `weapon/${result.name}`;\n        break;\n      }\n      case \"consumable\": {\n        const ddbType = document.flags?.ddbimporter?.dndbeyond?.type;\n        if (ddbType) {\n          result.name = this.consumableFolders[ddbType].name;\n          result.flagTag = `consumable/${result.name}`;\n        }\n        break;\n      }\n      case \"loot\": {\n        const ddbType = document.flags?.ddbimporter?.dndbeyond?.type;\n        if (ddbType) {\n          result.name = this.lootFolders[ddbType].name;\n          result.flagTag = `loot/${result.name}`;\n        }\n        break;\n      }\n      case \"container\": {\n        const ddbType = document.flags?.ddbimporter?.dndbeyond?.type;\n        if (ddbType) {\n          result.name = this.containerFolders[ddbType].name;\n          result.flagTag = `container/${result.name}`;\n        }\n        break;\n      }\n      case \"tool\": {\n        const toolType = document.system.type.value;\n        const instrument = document.flags?.ddbimporter?.dndbeyond?.tags.includes(\"Instrument\");\n        const ddbType = [\"art\", \"music\", \"game\"].includes(toolType);\n        if (instrument) {\n          result.name = this.toolFolders[\"music\"].name;\n          result.flagTag = `tool/${result.name}`;\n        } else if (ddbType) {\n          result.name = this.toolFolders[toolType].name;\n          result.flagTag = `tool/${result.name}`;\n        } else {\n          result.name = this.rootItemFolders[document.type].name;\n          result.flagTag = `Tools`;\n        }\n\n        break;\n      }\n      default: {\n        result.name = this.rootItemFolders[document.type].name;\n        result.flagTag = `${result.name}`;\n        break;\n      }\n    }\n\n    return result;\n  }\n\n  getItemCompendiumFolderName(document) {\n    let name;\n    switch (this.compendiumFolderTypeItem) {\n      case \"RARITY\": {\n        name = DDBCompendiumFolders.getItemCompendiumFolderNameForRarity(document);\n        break;\n      }\n      case \"TYPE\": {\n        name = this.getItemCompendiumFolderNameForType(document);\n        break;\n      }\n      // no default\n    }\n    return name;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getClassFeatureFolderName(document) {\n    const result = {\n      name: undefined,\n      flagTag: \"\",\n    };\n    const subClassName = foundry.utils.getProperty(document, \"flags.ddbimporter.subClass\");\n    const className = foundry.utils.getProperty(document, \"flags.ddbimporter.class\");\n    const optional = foundry.utils.getProperty(document, \"flags.ddbimporter.optionalFeature\");\n    const infusion = foundry.utils.getProperty(document, \"flags.ddbimporter.infusionFeature\");\n    if (infusion) {\n      result.name = \"Infusions\";\n      result.flagTag = `infusions/${className}`;\n    } else if (optional) {\n      result.name = \"Optional Features\";\n      result.flagTag = `optional/${className}`;\n    } else if (subClassName && subClassName.trim() !== \"\") {\n      result.name = subClassName;\n      result.flagTag = `subclass/${subClassName}`;\n    } else if (className && className.trim() !== \"\") {\n      result.name = className;\n    } else {\n      result.name = \"Unknown\";\n    }\n\n    if (result.name) return result;\n    else return undefined;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getRaceTraitFolderName(document) {\n    const result = {\n      name: undefined,\n      flagTag: \"\",\n    };\n    // \"flags.ddbimporter.baseRaceName\",\n    // \"flags.ddbimporter.baseName\",\n    // \"flags.ddbimporter.subRaceShortName\",\n    // \"flags.ddbimporter.isSubRace\",\n    // const isSubRace = foundry.utils.getProperty(document, \"flags.ddbimporter.isSubRace\");\n    // const baseRaceName = foundry.utils.getProperty(document, \"flags.ddbimporter.baseRaceName\");\n    // const baseName = foundry.utils.getProperty(document, \"flags.ddbimporter.baseName\");\n    // const subRaceShortName = foundry.utils.getProperty(document, \"flags.ddbimporter.subRaceShortName\");\n    const fullRaceName = foundry.utils.getProperty(document, \"flags.ddbimporter.fullRaceName\");\n    // const name = document.name;\n    // const lowercaseName = name.toLowerCase();\n\n    const groupName = foundry.utils.getProperty(document, \"flags.ddbimporter.groupName\");\n\n    result.name = fullRaceName;\n    result.flagTag = `trait/${groupName}/${fullRaceName}`;\n\n    return result;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getRaceFolderName(document) {\n    const result = {\n      name: undefined,\n      flagTag: \"\",\n    };\n\n    const fullRaceName = foundry.utils.getProperty(document, \"flags.ddbimporter.fullRaceName\");\n    const groupName = foundry.utils.getProperty(document, \"flags.ddbimporter.groupName\");\n    result.name = groupName ?? fullRaceName;\n    result.flagTag = `race/${(groupName ?? fullRaceName)}`;\n\n    return result;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getSummonFolderName(document) {\n    const result = {\n      name: undefined,\n      flagTag: \"\",\n    };\n\n    const folderHint = foundry.utils.getProperty(document, \"flags.ddbimporter.summons.folder\");\n    const summonHint = foundry.utils.getProperty(document, \"flags.ddbimporter.summons.name\");\n    result.name = folderHint ?? summonHint ?? document.name;\n    result.flagTag = `summon/${result.name}`;\n\n    return result;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getClassFolderName(document) {\n    const result = {\n      name: undefined,\n      flagTag: \"\",\n    };\n    const className = foundry.utils.getProperty(document, \"flags.ddbimporter.class\");\n    if (className && className.trim() !== \"\") {\n      result.name = className;\n    } else {\n      result.name = \"Unknown\";\n    }\n\n    if (result.name) return result;\n    else return undefined;\n  }\n\n  // eslint-disable-next-line complexity\n  getCompendiumFolderName(document) {\n    let name;\n    switch (this.type) {\n      case \"trait\":\n      case \"traits\": {\n        name = this.getRaceTraitFolderName(document);\n        break;\n      }\n      case \"race\":\n      case \"races\": {\n        name = this.getRaceFolderName(document);\n        break;\n      }\n      case \"feature\":\n      case \"features\": {\n        name = this.getClassFeatureFolderName(document);\n        break;\n      }\n      case \"subclass\":\n      case \"subclasses\": {\n        name = this.getClassFolderName(document);\n        break;\n      }\n      case \"summon\":\n      case \"summons\": {\n        name = this.getSummonFolderName(document);\n        break;\n      }\n      case \"monsters\":\n      case \"npc\":\n      case \"monster\": {\n        switch (this.compendiumFolderTypeMonster) {\n          case \"TYPE\": {\n            const creatureType = document.system?.details?.type?.value\n              ? document.system?.details?.type?.value\n              : \"Unknown\";\n            const ddbType = CONFIG.DDB.monsterTypes.find((c) => creatureType.toLowerCase() == c.name.toLowerCase());\n            if (ddbType) name = ddbType.name;\n            break;\n          }\n          case \"ALPHA\": {\n            name = document.name\n              .replace(/[^a-z]/gi, \"\")\n              .charAt(0)\n              .toUpperCase();\n            break;\n          }\n          case \"CR\": {\n            if (document.system.details.cr !== undefined || document.system.details.cr !== \"\") {\n              const paddedCR = String(document.system.details.cr).padStart(2, \"0\");\n              name = `CR ${paddedCR}`;\n            }\n          }\n          // no default\n        }\n        break;\n      }\n      case \"spell\":\n      case \"spells\": {\n        switch (this.compendiumFolderTypeSpell) {\n          case \"SCHOOL\": {\n            const school = document.system?.school;\n            if (school) {\n              name = utils.capitalize(DICTIONARY.spell.schools.find((sch) => school == sch.id).name);\n            }\n            break;\n          }\n          case \"LEVEL\": {\n            const levelFolder = DICTIONARY.COMPENDIUM_FOLDERS.SPELL_LEVEL[document.system?.level];\n            if (levelFolder) {\n              name = levelFolder;\n            }\n            break;\n          }\n          // no default\n        }\n        break;\n      }\n      case \"inventory\":\n      case \"item\":\n      case \"items\": {\n        name = this.getItemCompendiumFolderName(document);\n      }\n      // no default\n    }\n    return name;\n  }\n\n  getFolder(folderName, flagTag = \"\") {\n    const folder = this.compendium.folders.find((f) =>\n      f.name == folderName\n      && f.flags?.ddbimporter?.flagTag === flagTag\n    );\n    return folder;\n  }\n\n  getFolderId(document) {\n    const folderName = this.getCompendiumFolderName(document);\n    if (folderName) {\n      const folder = this.getFolder((folderName.name ?? folderName), (folderName.flagTag ?? \"\"));\n      if (folder) return folder._id;\n    }\n\n    return undefined;\n  }\n\n  async addToCompendiumFolder(document) {\n    logger.debug(`Checking ${document.name} in ${this.packName}`);\n\n    const folderName = this.getCompendiumFolderName(document);\n    if (folderName) {\n      const folder = this.compendium.folders.find((f) => f.name == (folderName.name ?? folderName));\n      if (folder) {\n        logger.info(`Moving ${this.type} ${document.name} to folder ${folder.name}`);\n        await document.update({ folder: folder._id });\n      } else {\n        logger.error(`Unable to find folder \"${folderName}\" in \"${this.packName}\" for ${this.type}`);\n      }\n    }\n  }\n\n\n  #getIndexFields() {\n    switch (this.type) {\n      case \"spells\":\n      case \"spell\": {\n        return [\n          \"name\",\n          \"system.level\",\n          \"system.school\",\n        ];\n      }\n      case \"inventory\":\n      case \"items\":\n      case \"item\": {\n        return [\n          \"name\",\n          \"type\",\n          \"flags.ddbimporter.dndbeyond.type\",\n          \"flags.ddbimporter.dndbeyond.tags\",\n          \"system.armor.type\",\n          \"system.type.value\",\n          \"system.rarity\",\n          \"system.type.value\",\n          \"system.details.type.value\",\n        ];\n      }\n      case \"monster\":\n      case \"monsters\": {\n        return [\n          \"name\",\n          \"type\",\n          \"system.details.type.value\",\n          \"system.details.cr\",\n        ];\n      }\n      case \"summon\":\n      case \"summons\": {\n        return [\n          \"name\",\n          \"type\",\n          \"flags.ddbimporter.summons.name\",\n          \"flags.ddbimporter.summons.folder\",\n        ];\n      }\n      case \"class\":\n      case \"subclass\":\n      case \"classes\":\n      case \"subclasses\":\n      case \"feature\": {\n        return [\n          \"name\",\n          \"flags.ddbimporter.class\",\n          \"flags.ddbimporter.subClass\",\n          \"flags.ddbimporter.optionalFeature\",\n          \"flags.ddbimporter.infusionFeature\",\n        ];\n      }\n      case \"trait\":\n      case \"traits\":\n      case \"race\":\n      case \"races\": {\n        return [\n          \"name\",\n          \"flags.ddbimporter.baseRaceName\",\n          \"flags.ddbimporter.baseName\",\n          \"flags.ddbimporter.subRaceShortName\",\n          \"flags.ddbimporter.isSubRace\",\n          \"flags.ddbimporter.fullRaceName\",\n          \"flags.ddbimporter.groupName\"\n        ];\n      }\n      default:\n        return [\"name\"];\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  async migrateExistingCompendium() {\n    if (!this.compendium) return undefined;\n\n    const foldersToRemove = this.compendium.folders.filter((f) => !this.validFolderIds.includes(f._id));\n    await Folder.deleteDocuments(foldersToRemove.map((f) => f._id), { pack: this.packName });\n\n    logger.debug(\"Remaining Compendium Folders\", this.compendium.folders);\n\n    const index = await this.compendium.getIndex({ fields: this.#getIndexFields() });\n\n    const results = [];\n    for (const i of index) {\n      const folderId = this.getFolderId(i);\n      if (folderId) {\n        results.push({\n          _id: i._id,\n          folder: folderId,\n        });\n      }\n    }\n\n    logger.debug(\"Folder update results\", results);\n\n    switch (this.type) {\n      case \"trait\":\n      case \"traits\":\n      case \"race\":\n      case \"races\":\n      case \"features\":\n      case \"feature\":\n      case \"class\":\n      case \"classes\":\n      case \"subclass\":\n      case \"subclasses\":\n      case \"inventory\":\n      case \"items\":\n      case \"item\":\n      case \"spells\":\n      case \"spell\": {\n        await Item.updateDocuments(results, { pack: this.packName });\n        break;\n      }\n      case \"summon\":\n      case \"summons\":\n      case \"monsters\":\n      case \"npc\":\n      case \"monster\": {\n        await Actor.updateDocuments(results, { pack: this.packName });\n        break;\n      }\n      // no default\n    }\n\n\n    return this.compendium.folders;\n  }\n\n  async removeUnusedFolders() {\n    const folderIds = this.compendium.folders\n      .filter((c) => c.contents.length === 0 && c.children.length === 0)\n      .map((f) => f.id);\n    logger.debug(\"Deleting compendium folders\", folderIds);\n    await Folder.deleteDocuments(folderIds, { pack: this.packName });\n  }\n}\n","import DICTIONARY from \"../dictionary.js\";\nimport logger from \"../logger.js\";\nimport { getEffectExcludedModifiers } from \"../effects/effects.js\";\nimport utils from \"./utils.js\";\n\nconst DDBHelper = {\n\n  getBookName: (bookId) => {\n    const book = CONFIG.DDB.sources.find((source) => source.name.toLowerCase() == bookId.toLowerCase());\n    if (book) {\n      return book.description;\n    } else {\n      return \"\";\n    }\n  },\n\n  getDamageType: (data) => {\n    if (data.definition.damageType) {\n      const damageTypeReplace = data.definition.grantedModifiers.find((mod) =>\n        mod.type === \"replace-damage-type\"\n        && (!mod.restriction || mod.restriction === \"\")\n      );\n\n      const damageType = damageTypeReplace\n        ? damageTypeReplace.subType.toLowerCase()\n        : data.definition.damageType.toLowerCase();\n      return damageType;\n    } else {\n      return undefined;\n    }\n  },\n\n  globalDamageTagInfo: (mod) => {\n    const globalDamageHints = game.settings.get(\"ddb-importer\", \"use-damage-hints\");\n    const midiInstalled = game.modules.get(\"midi-qol\")?.active;\n    const damageRestrictionHints = game.settings.get(\"ddb-importer\", \"add-damage-restrictions-to-hints\") && !midiInstalled;\n    const hintOrRestriction = globalDamageHints || damageRestrictionHints;\n    const restriction = damageRestrictionHints && mod.restriction && mod.restriction !== \"\" ? mod.restriction : \"\";\n    const hintAndRestriction = globalDamageHints && restriction !== \"\" ? \" - \" : \"\";\n\n    return {\n      globalDamageHints,\n      damageRestrictionHints,\n      hintOrRestriction,\n      hintAndRestriction,\n      restriction,\n    };\n  },\n\n  getDamageTag(mod, overrideDamageType) {\n    const damageTagData = DDBHelper.globalDamageTagInfo(mod);\n    const damageType = overrideDamageType\n      ? overrideDamageType\n      : mod.subType ? mod.subType : \"\";\n    const hintTag = damageType !== \"\" && damageTagData.globalDamageHints ? damageType : \"\";\n    const damageHint = damageTagData.hintOrRestriction\n      ? `${hintTag}${damageTagData.hintAndRestriction}${damageTagData.restriction}`\n      : \"\";\n    const damageTag = damageTagData.hintOrRestriction ? `[${damageHint}]` : \"\";\n    return {\n      globalDamageHints: damageTagData.globalDamageHints,\n      damageRestrictionHints: damageTagData.damageRestrictionHints,\n      hintOrRestriction: damageTagData.hintOrRestriction,\n      hintAndRestriction: damageTagData.hintAndRestriction,\n      restriction: damageTagData.restriction,\n      damageType,\n      damageHint,\n      damageTag,\n    };\n  },\n\n  getDamageTagForMod: (mod) => {\n    const damageTagData = DDBHelper.getDamageTag(mod);\n    return damageTagData;\n  },\n\n  getDamageTagForItem(data) {\n    const damageType = DDBHelper.getDamageType(data);\n    const damageTagData = DDBHelper.getDamageTag({}, damageType);\n    return damageTagData;\n  },\n\n  hasChosenCharacterOption: (ddb, optionName) => {\n    const hasClassOptions = [ddb.character.options.race, ddb.character.options.class, ddb.character.options.feat]\n      .flat()\n      .some((option) => option.definition.name === optionName);\n    return hasClassOptions;\n  },\n\n  getClassFromOptionID: (ddb, optionId) => {\n    // Use case class spell - which class?\n    // componentId on spells.class[0].componentId = options.class[0].definition.id\n    // options.class[0].definition.componentId = classes[0].classFeatures[0].definition.id\n    const option = ddb.character.options.class.find((option) => option.definition.id === optionId);\n\n    if (option) {\n      const klass = ddb.character.classes.find((klass) =>\n        klass.classFeatures.some((feature) => feature.definition.id === option.componentId)\n      );\n      return klass;\n    }\n    return undefined;\n  },\n\n  /**\n   * Look up a component by id\n   * For now we assume that most features we are going to want to get a scaling value\n   * from are character options\n   * @param {*} ddb\n   * @param {*} featureId\n   */\n\n  findComponentByComponentId: (ddb, componentId) => {\n    let result;\n\n    ddb.character.classes.forEach((cls) => {\n      const feature = cls.classFeatures.find((component) => component.definition.id === componentId);\n      if (feature) result = feature;\n    });\n\n    const optionalClassFeature = ddb.classOptions.find((option) => option.id == componentId);\n    if (optionalClassFeature && !result) {\n      result = optionalClassFeature;\n      const optionalLevelScales = optionalClassFeature.levelScales && optionalClassFeature.levelScales.length > 0;\n      if (result && !result.levelScale && optionalLevelScales) {\n        const klass = ddb.character.classes.find((cls) => cls.definition.id === optionalClassFeature.classId);\n        const klassLevel = klass ? klass.level : undefined;\n        if (klassLevel) {\n          const levelFilteredScales = optionalClassFeature.levelScales.filter((scale) => scale.level <= klassLevel);\n          if (levelFilteredScales.length > 0) {\n            result.levelScale = levelFilteredScales\n              .reduce((previous, current) => {\n                if (previous.level > current.level) return previous;\n                return current;\n              });\n          }\n        }\n      }\n    }\n\n    return result;\n  },\n\n  /**\n * Gets the levelscaling value for a feature\n * @param {*} feature\n */\n  getExactScalingValue: (feature) => {\n    const die = feature.levelScale?.dice ? feature.levelScale.dice : feature.levelScale?.die ? feature.levelScale.die : undefined;\n    if (feature && feature.levelScale && feature.levelScale.fixedValue) {\n      return feature.levelScale.fixedValue;\n    } else if (die) {\n      return die.diceString;\n    } else {\n      return \"{{scalevalue-unknown}}\";\n    }\n  },\n\n  getScaleValueLink: (ddb, feature) => {\n    const featDefinition = feature.definition ? feature.definition : feature;\n\n    const klass = ddb.character.classes.find((cls) =>\n      (cls.definition.id === featDefinition.classId\n      || cls.subclassDefinition?.id === featDefinition.classId)\n      && featDefinition.levelScales?.length > 0\n    );\n\n    if (klass) {\n      const featureName = featDefinition.name.toLowerCase().replace(/\\s|'|’/g, '-');\n      const klassName = klass.subclassDefinition?.id === featDefinition.classId\n        ? klass.subclassDefinition.name.toLowerCase().replace(/\\s|'|’/g, '-')\n        : klass.definition.name.toLowerCase().replace(/\\s|'|’/g, '-');\n      return `@scale.${klassName}.${featureName}`;\n    }\n\n    return undefined;\n\n  },\n\n  getScaleValueString: (ddb, feature) => {\n    const classOption = [ddb.character.options.race, ddb.character.options.class, ddb.character.options.feat]\n      .flat()\n      .find((option) => option.definition.id === feature.componentId);\n\n    let feat = feature.levelScale ? feature : DDBHelper.findComponentByComponentId(ddb, feature.componentId);\n    if (!feat && foundry.utils.hasProperty(feature, \"flags.ddbimporter.dndbeyond.choice\")) {\n      feat = DDBHelper.findComponentByComponentId(ddb, feature.flags.ddbimporter.dndbeyond.choice.componentId);\n    }\n    if (!feat && classOption) {\n      feat = DDBHelper.findComponentByComponentId(ddb, classOption.componentId);\n    }\n    if (!feat) {\n      logger.debug(\"no scale value for \", feature);\n      return { name: undefined, value: undefined };\n    }\n    const scaleValue = DDBHelper.getScaleValueLink(ddb, feat);\n    if (scaleValue) {\n      return {\n        name: feat.definition?.name ? feat.definition?.name : feat.name,\n        value: scaleValue,\n      };\n    }\n    // final fallback if scale value extraction fails\n    return {\n      name: feat.definition?.name ? feat.definition?.name : feat.name,\n      value: DDBHelper.getExactScalingValue(feat),\n    };\n  },\n\n  /**\n   *\n   * Gets the sourcebook for a subset of dndbeyond sources\n   * @param {obj} definition item definition\n   */\n  // eslint-disable-next-line complexity\n  getSourceData: (definition) => {\n    const fullSource = game.settings.get(\"ddb-importer\", \"use-full-source\");\n    const results = [];\n    if (definition.sources?.length > 0) {\n      // is basic rules (e.g. SRD)\n      const basicRules = definition.sources.some((source) => source.sourceType === 2 && source.sourceId === 1);\n      const hasPage = definition.sources.some((source) => source.pageNumber !== null);\n      const sources = hasPage\n        ? definition.sources.filter((source) => source.pageNumber !== null)\n        : basicRules\n          ? definition.sources.filter((source) => source.sourceType === 2 && source.sourceId === 1)\n          : definition.sources.some((source) => source.sourceType === 1)\n            ? definition.sources.filter((source) => source.sourceType === 1)\n            : definition.sources;\n      for (const ds of sources) {\n        const ddbSource = CONFIG.DDB.sources.find((ddb) => ddb.id === ds.sourceId);\n\n        results.push({\n          book: ddbSource ? (fullSource ? ddbSource.description : ddbSource.name) : \"Homebrew\",\n          page: ds.pageNumber ?? \"\",\n          license: \"\",\n          custom: \"\",\n          id: ddbSource ? ddbSource.id : 9999999,\n        });\n      }\n    } else if (definition.sourceIds) {\n      for (const sourceId of definition.sourceIds) {\n        const ddbSource = CONFIG.DDB.sources.find((ddb) => ddb.id === sourceId);\n        results.push({\n          book: ddbSource ? (fullSource ? ddbSource.description : ddbSource.name) : \"Homebrew\",\n          page: definition.sourcePageNumber ?? \"\",\n          license: \"\",\n          custom: \"\",\n          id: ddbSource ? ddbSource.id : 9999999,\n        });\n      }\n    } else if (definition.sourceId) {\n      const ddbSource = CONFIG.DDB.sources.find((ddb) => ddb.id === definition.sourceId);\n      results.push({\n        book: ddbSource ? (fullSource ? ddbSource.description : ddbSource.name) : \"Homebrew\",\n        page: definition.sourcePageNumber ?? \"\",\n        license: \"\",\n        custom: \"\",\n        id: ddbSource ? ddbSource.id : 9999999,\n      });\n    }\n    return results;\n  },\n\n  /**\n   * Fetches the sources and pages for a definition\n   * @param {obj} data item\n   */\n  parseSource: (definition) => {\n    const sources = DDBHelper.getSourceData(definition);\n    const latestSource = sources.length > 0\n      ? sources.reduce((prev, current) => {\n        return prev.id > current.id ? prev : current;\n      })\n      : null;\n\n    if (!latestSource) return {\n      name: \"\",\n      page: \"\",\n      license: \"\",\n      custom: \"\",\n    };\n    delete latestSource.id;\n    return latestSource;\n  },\n\n  getActiveItemModifiers: (ddb, includeExcludedEffects = false) => {\n    // are we adding effects to items?\n    const excludedModifiers = (!includeExcludedEffects) ? getEffectExcludedModifiers(\"item\", true, true) : [];\n    // get items we are going to interact on\n    const modifiers = ddb.character.inventory\n      .filter(\n        (item) =>\n          ((!item.definition.canEquip && !item.definition.canAttune && !item.definition.isConsumable) // if item just gives a thing and not potion/scroll\n          || (item.isAttuned && item.equipped) // if it is attuned and equipped\n          || (item.isAttuned && !item.definition.canEquip) // if it is attuned but can't equip\n            || (!item.definition.canAttune && item.equipped)) // can't attune but is equipped\n          && item.definition.grantedModifiers.length > 0\n      )\n      .flatMap((item) => item.definition.grantedModifiers)\n      .filter((mod) => !excludedModifiers.some((exMod) =>\n        mod.type === exMod.type\n        && (mod.subType === exMod.subType || !exMod.subType))\n      );\n\n    return modifiers;\n  },\n\n  getActiveItemEffectModifiers: (ddb) => {\n    return DDBHelper.getActiveItemModifiers(ddb, true).filter((mod) =>\n      getEffectExcludedModifiers(\"item\", true, true).some((exMod) => mod.type === exMod.type\n      && (mod.subType === exMod.subType || !exMod.subType))\n    );\n  },\n\n  getModifiers: (ddb, type, includeExcludedEffects = false, effectOnly = false, useUnfilteredModifiers = false) => {\n    // are we adding effects to documents?\n    const excludedModifiers = (!includeExcludedEffects || (includeExcludedEffects && effectOnly))\n      ? getEffectExcludedModifiers(type, true, true)\n      : getEffectExcludedModifiers(type, false, false);\n    // get items we are going to interact on\n    let modifiers = [];\n    const baseMods = useUnfilteredModifiers\n      ? ddb.unfilteredModifiers[type]\n      : ddb.character.modifiers[type];\n    if (effectOnly) {\n      modifiers = baseMods\n        .filter((mod) => excludedModifiers.some((exMod) =>\n          mod.type === exMod.type\n        && (mod.subType === exMod.subType || !exMod.subType))\n        );\n    } else {\n      modifiers = baseMods\n        .filter((mod) => !excludedModifiers.some((exMod) =>\n          mod.type === exMod.type\n        && (mod.subType === exMod.subType || !exMod.subType))\n        );\n    }\n\n    return modifiers;\n  },\n\n  filterModifiers: (modifiers, type, { subType = null, restriction = [\"\", null] } = {}) => {\n    return modifiers\n      .flat()\n      .filter(\n        (modifier) =>\n          modifier.type === type\n          && (subType !== null ? modifier.subType === subType : true)\n          && (!restriction ? true : restriction.includes(modifier.restriction))\n      );\n  },\n\n  filterModifiersOld: (modifiers, type, subType = null, restriction = [\"\", null]) => {\n    return DDBHelper.filterModifiers(modifiers, type, { subType, restriction });\n  },\n\n  isComponentIdInClassFeatures: (ddb, componentId, classId) => {\n    return ddb.character.classes\n      .filter((klass) => classId === klass.definition?.id || classId === klass.subclassDefinition?.id)\n      .some((klass) =>\n        klass.classFeatures.some((feat) => feat.definition.id == componentId)\n      );\n  },\n\n  getClassFeatureIds(ddb, { classId = null, requiredLevel = null, exactLevel = null } = {}) {\n    return ddb.character.classes\n      .filter((klass) =>\n        (classId === null\n          ? true\n          : (classId === klass.definition?.id || classId === klass.subclassDefinition?.id))\n      ).map((klass) => klass.classFeatures)\n      .flat()\n      .filter((feat) =>\n        (requiredLevel === null || feat.definition.requiredLevel >= requiredLevel)\n        && (exactLevel === null || feat.definition.requiredLevel == exactLevel)\n      ).map((feat) => feat.definition.id);\n  },\n\n  isModClassFeature: (ddb, mod, { classFeatureIds = null, classId = null, requiredLevel = null, exactLevel = null } = {}) => {\n    return ddb.character.classes.some((klass) =>\n      (classId === null\n        ? true\n        : (classId === klass.definition?.id || classId === klass.subclassDefinition?.id))\n      && klass.classFeatures.some((feat) =>\n        feat.definition.id == mod.componentId\n        && feat.definition.entityTypeId == mod.componentTypeId\n        && (classFeatureIds === null || classFeatureIds.includes(feat.definition.id))\n        && (requiredLevel === null || feat.definition.requiredLevel >= requiredLevel)\n        && (exactLevel === null || feat.definition.requiredLevel == exactLevel)\n        // make sure this class feature is not replaced\n        && !ddb.character.optionalClassFeatures.some((f) => f.affectedClassFeatureId == feat.definition.id)\n      ));\n  },\n\n  isModClassOption: (ddb, mod, { classFeatureIds = null, classId = null, requiredLevel = null, exactLevel = null } = {}) => {\n    const klassFeatureIds = classFeatureIds ? classFeatureIds : DDBHelper.getClassFeatureIds(ddb, { classId, requiredLevel, exactLevel });\n    return ddb.character.options.class.some((option) =>\n      // is this option actually part of the class list?\n      klassFeatureIds.includes(option.componentId)\n      // does this class option match a modifier?\n      && ((option.componentTypeId == mod.componentTypeId && option.componentId == mod.componentId)\n      || (option.definition.entityTypeId == mod.componentTypeId && option.definition.id == mod.componentId))\n      // has this feature set been replaced by an optional class feature?\n      && !ddb.character.optionalClassFeatures.some((f) => f.affectedClassFeatureId == option.componentId)\n      // has it been chosen?\n      && (\n        ddb.character.choices.class.some((choice) =>\n          choice.componentId == option.componentId\n          && choice.componentTypeId == option.componentTypeId\n          && foundry.utils.hasProperty(choice, \"optionValue\")\n        )\n        || !ddb.character.choices.class.some((choice) =>\n          choice.componentId == option.componentId\n          && choice.componentTypeId == option.componentTypeId)\n      )\n    );\n  },\n\n  isModOptionalClassFeature: (ddb, mod, { classFeatureIds = null, classId = null, requiredLevel = null, exactLevel = null } = {}) => {\n    const klassFeatureIds = classFeatureIds ? classFeatureIds : DDBHelper.getClassFeatureIds(ddb, { classId, requiredLevel, exactLevel });\n    return ddb.character.options.class.some((option) =>\n      // is this option actually part of the class list?\n      klassFeatureIds.includes(option.componentId)\n      // does this modifier match a class option?\n      && ((option.componentTypeId == mod.componentTypeId && option.componentId == mod.componentId)\n        || (option.definition.entityTypeId == mod.componentTypeId && option.definition.id == mod.componentId))\n      // !data.character.optionalClassFeatures.some((f) => f.affectedClassFeatureId == option.definition.id) &&\n      // optional class feature\n      && ddb.character.optionalClassFeatures?.some((f) => f.classFeatureId == option.componentId)\n      // has it been chosen?\n      && (\n        ddb.character.choices.class.some((choice) =>\n          choice.componentId == option.componentId\n          && choice.componentTypeId == option.componentTypeId\n          && choice.optionValue\n        )\n        || ddb.classOptions?.some((classOption) =>\n          classOption.id == option.componentId\n          && classOption.entityTypeId == option.componentTypeId\n          && (classId === null || classId === classOption.classId)\n        )\n      )\n    );\n  },\n\n  isModOptionalClassChoice(ddb, mod, { classFeatureIds = null, classId = null, requiredLevel = null, exactLevel = null } = {}) {\n    const klassFeatureIds = classFeatureIds ? classFeatureIds : DDBHelper.getClassFeatureIds(ddb, { classId, requiredLevel, exactLevel });\n    return ddb.character.choices.class.some((choice) =>\n      // is this option actually part of the class list?\n      // classFeatureIds.includes(choice.componentId)\n      choice.componentTypeId == mod.componentTypeId\n      && choice.componentId == mod.componentId\n      && ddb.character.optionalClassFeatures?.some((f) =>\n        f.classFeatureId == choice.componentId\n        && (!f.affectedClassFeatureId || klassFeatureIds.includes(f.affectedClassFeatureId))\n      )\n    );\n  },\n\n  isModAChosenClassMod: (ddb, mod, { classFeatureIds = null, classId = null, requiredLevel = null, exactLevel = null } = {}) => {\n    const klassFeatureIds = classFeatureIds ? classFeatureIds : DDBHelper.getClassFeatureIds(ddb, { classId, requiredLevel, exactLevel });\n    const isClassFeature = DDBHelper.isModClassFeature(ddb, mod, { classFeatureIds: klassFeatureIds, classId, requiredLevel, exactLevel });\n    // console.warn(\"isClassFeature\", {isClassFeature, mod, klassFeatureIds, classId, requiredLevel, exactLevel});\n    if (isClassFeature) return true;\n    const isClassOption = DDBHelper.isModClassOption(ddb, mod, { classFeatureIds: klassFeatureIds, classId, requiredLevel, exactLevel });\n    if (isClassOption) return true;\n    // if it's been replaced by a class feature lets check that\n    const isOptionalClassOption = DDBHelper.isModOptionalClassFeature(ddb, mod, { classFeatureIds: klassFeatureIds, classId, requiredLevel, exactLevel });\n    if (isOptionalClassOption) return true;\n    // new class feature choice\n    const isOptionalClassChoice = DDBHelper.isModOptionalClassChoice(ddb, mod, { classFeatureIds: klassFeatureIds, classId, requiredLevel, exactLevel });\n\n    // console.warn(\"isClassFeature2\", {isClassFeature, mod, klassFeatureIds, classId, requiredLevel, exactLevel, isClassOption, isOptionalClassOption, isOptionalClassChoice});\n    return isOptionalClassChoice;\n  },\n\n  getChosenClassModifiers: (ddb, { includeExcludedEffects = false, effectOnly = false, classId = null, requiredLevel = null, exactLevel = null, availableToMulticlass = null, useUnfilteredModifiers = null, filterOnFeatureIds = [] } = {}) => {\n    const classFeatureIds = DDBHelper.getClassFeatureIds(ddb, { classId, requiredLevel, exactLevel })\n      .filter((id) => {\n        if (filterOnFeatureIds.length === 0) return true;\n        return filterOnFeatureIds.includes(id);\n      });\n    // get items we are going to interact on\n    const modifiers = DDBHelper\n      .getModifiers(ddb, 'class', includeExcludedEffects, effectOnly, useUnfilteredModifiers)\n      .filter((mod) =>\n        (\n          availableToMulticlass === null\n          || mod.availableToMulticlass === undefined\n          || mod.availableToMulticlass === null\n          || mod.availableToMulticlass === availableToMulticlass\n        )\n        && DDBHelper.isModAChosenClassMod(ddb, mod, { classFeatureIds, classId, requiredLevel, exactLevel })\n      );\n\n    // console.warn(\"getChosenClassModifiers\", {classFeatureIds, modifiers});\n    return modifiers;\n  },\n\n  filterBaseCharacterModifiers: (ddb, type, { subType = null, restriction = [\"\", null], includeExcludedEffects = false, effectOnly = false, classId = null, availableToMulticlass = null, useUnfilteredModifiers = null } = {}) => {\n    const modifiers = [\n      DDBHelper.getChosenClassModifiers(ddb, { includeExcludedEffects, effectOnly, classId, availableToMulticlass, useUnfilteredModifiers }),\n      DDBHelper.getModifiers(ddb, \"race\", includeExcludedEffects, effectOnly, useUnfilteredModifiers),\n      DDBHelper.getModifiers(ddb, \"background\", includeExcludedEffects, effectOnly, useUnfilteredModifiers),\n      DDBHelper.getModifiers(ddb, \"feat\", includeExcludedEffects, effectOnly, useUnfilteredModifiers),\n    ];\n\n    return DDBHelper.filterModifiersOld(modifiers, type, subType, restriction);\n  },\n\n  getAllModifiers: (ddb, { includeExcludedEffects = false, effectOnly = false, classId = null, availableToMulticlass = null, useUnfilteredModifiers = null } = {}) => {\n    return [\n      DDBHelper.getChosenClassModifiers(ddb, { includeExcludedEffects, effectOnly, classId, availableToMulticlass, useUnfilteredModifiers }),\n      DDBHelper.getModifiers(ddb, \"race\", includeExcludedEffects, effectOnly, useUnfilteredModifiers),\n      DDBHelper.getModifiers(ddb, \"background\", includeExcludedEffects, effectOnly, useUnfilteredModifiers),\n      DDBHelper.getModifiers(ddb, \"feat\", includeExcludedEffects, effectOnly, useUnfilteredModifiers),\n      DDBHelper.getActiveItemModifiers(ddb, includeExcludedEffects),\n    ].flat();\n  },\n\n  // I need to getChosenOriginFeatures from data.optionalOriginFeatures\n\n  filterBaseModifiers: (ddb, type, { subType = null, restriction = [\"\", null], includeExcludedEffects = false, effectOnly = false, classId = null, availableToMulticlass = null, useUnfilteredModifiers = null } = {}) => {\n    const modifiers = [\n      DDBHelper.getChosenClassModifiers(ddb, { includeExcludedEffects, effectOnly, classId, availableToMulticlass, useUnfilteredModifiers }),\n      DDBHelper.getModifiers(ddb, \"race\", includeExcludedEffects, effectOnly, useUnfilteredModifiers),\n      DDBHelper.getModifiers(ddb, \"background\", includeExcludedEffects, effectOnly, useUnfilteredModifiers),\n      DDBHelper.getModifiers(ddb, \"feat\", includeExcludedEffects, effectOnly, useUnfilteredModifiers),\n      DDBHelper.getActiveItemModifiers(ddb, includeExcludedEffects),\n    ];\n\n    return DDBHelper.filterModifiersOld(modifiers, type, subType, restriction);\n  },\n\n  stringIntAdder(one, two) {\n    const oneInt = `${one}`.trim().replace(/^[+-]\\s*/, \"\");\n    const twoInt = `${two}`.trim().replace(/^[+-]\\s*/, \"\");\n    if (Number.isInteger(parseInt(oneInt)) && Number.isInteger(parseInt(twoInt))) {\n      const num = parseInt(oneInt) + parseInt(twoInt);\n      return `${num}`;\n    } else {\n      const twoAdjusted = (/^[+-]/).test(`${two}`.trim()) ? two : `+ ${two}`;\n      return `${one} ${twoAdjusted}`;\n    }\n  },\n\n  /**\n   * Checks the list of modifiers provided for a matching bonus type\n   * and returns a sum of it's value. May include a dice string.\n   * @param {*} modifiers\n   * @param {*} character\n   * @param {*} bonusSubType\n   */\n  getModifierSum: (modifiers, character) => {\n    let sum = \"\";\n    let diceString = \"\";\n    let modBonus = 0;\n    modifiers.forEach((modifier) => {\n      const die = modifier.dice ?? modifier.die ?? undefined;\n      const fixedBonus = die?.fixedValue ?? 0;\n      const statBonus = (Number.isInteger(modifier.statId))\n        ? modifier.statId\n        : Number.isInteger(modifier.abilityModifierStatId)\n          ? modifier.abilityModifierStatId\n          : null;\n      if (Number.isInteger(statBonus)) {\n        const ability = DICTIONARY.character.abilities.find((ability) => ability.id === modifier.statId);\n        modBonus += character.system.abilities[ability.value].mod;\n      }\n      if (die) {\n        const mod = die.diceString;\n        diceString += diceString === \"\" ? mod : \" + \" + mod;\n        if (die.diceString) {\n          const mod = die.diceString + modBonus + fixedBonus;\n          diceString += diceString === \"\" ? mod : \" + \" + mod;\n        } else if (fixedBonus) {\n          sum = DDBHelper.stringIntAdder(sum, fixedBonus + modBonus);\n        }\n      } else if (modifier.fixedValue) {\n        sum = DDBHelper.stringIntAdder(sum, modifier.fixedValue);\n      } else if (modifier.value) {\n        sum = DDBHelper.stringIntAdder(sum, modifier.value);\n      } else if (modBonus !== 0) {\n        sum = DDBHelper.stringIntAdder(sum, modBonus);\n      }\n      if (modifier.modifierTypeId === 1 && modifier.bonusTypes.includes(1)) {\n        // prof bonus\n        sum = DDBHelper.stringIntAdder(sum, character.system.attributes.prof);\n      }\n\n    });\n    if (diceString !== \"\") {\n      sum = diceString + \" + \" + sum;\n    }\n\n    sum = `${sum}`.trim().replace(/\\+\\s*\\+/, \"+\").replace(/^\\+\\s*/, \"\");\n\n    return sum !== \"\" ? sum : 0;\n  },\n\n  /**\n   * Searches for selected options if a given feature provides choices to the user\n   * @param {string} type character property: \"class\", \"race\" etc.\n   * @param {object} feat options to search for\n   */\n  getChoices: (ddb, type, feat) => {\n    const id = feat.id ? feat.id : feat.definition.id ? feat.definition.id : null;\n    const featDefinition = feat.definition ? feat.definition : feat;\n\n    if (ddb.character.choices[type] && Array.isArray(ddb.character.choices[type])) {\n      // find a choice in the related choices-array\n      const choices = ddb.character.choices[type].filter(\n        (characterChoice) => characterChoice.componentId && characterChoice.componentId === id\n      );\n\n      if (choices) {\n        const choiceDefinitions = ddb.character.choices.choiceDefinitions;\n\n        const options = choices\n          .filter(\n            (choice) => {\n              const optionChoice = choiceDefinitions.find((selection) => selection.id === `${choice.componentTypeId}-${choice.type}`);\n              const validOption = optionChoice && optionChoice.options.find((option) => option.id === choice.optionValue);\n              return validOption;\n            })\n          .map((choice) => {\n            // console.warn(choice);\n            const optionChoice = choiceDefinitions.find((selection) => selection.id === `${choice.componentTypeId}-${choice.type}`);\n            let result = optionChoice.options.find((option) => option.id === choice.optionValue);\n            result.componentId = choice.componentId;\n            result.componentTypeId = choice.componentTypeId;\n            result.choiceId = choice.id;\n            result.parentChoiceId = choice.parentChoiceId;\n            result.subType = choice.subType;\n            result.type = type;\n            result.wasOption = false;\n            return result;\n          });\n\n        if (options.length > 0) return options;\n\n        if (ddb.character.options[type]?.length > 0) {\n          // if it is a choice option, try and see if the mod matches\n          const optionMatch = ddb.character.options[type]\n            .filter(\n              (option) =>\n                // id match\n                (!featDefinition.componentTypeId && !featDefinition.entityTypeId && id == option.componentId)\n                || (!featDefinition.componentTypeId && foundry.utils.hasProperty(featDefinition, \"entityTypeId\")\n                  && featDefinition.entityTypeId == option.componentTypeId && id == option.componentId\n                )\n                // && // the choice id matches the option componentID\n                // (featDefinition.componentTypeId == option.componentTypeId || // either the choice componenttype and optiontype match or\n                //   featDefinition.componentTypeId == option.definition.entityTypeId) && // the choice componentID matches the option definition entitytypeid\n                // option.componentTypeId == featDefinition.entityTypeId\n            )\n            .map((option) => {\n              return {\n                id: option.definition.id,\n                entityTypeId: option.definition.entityTypeId,\n                label: option.definition.name,\n                description: option.definition.description,\n                componentId: option.componentId,\n                componentTypeId: option.componentTypeId,\n                choiceId: null,\n                sourceId: option.definition.sourceId,\n                parentChoiceId: null,\n                subType: `${type}-option`,\n                type: type,\n                wasOption: true,\n              };\n            });\n          if (optionMatch.length > 0) return optionMatch;\n        }\n      }\n    }\n    // we could not determine if there are any choices left\n    return [];\n  },\n\n  getComponentIdFromOptionValue: (ddb, type, optionId) => {\n    if (ddb.character?.choices && ddb.character.choices[type] && Array.isArray(ddb.character.choices[type])) {\n      // find a choice in the related choices-array\n      const choice = ddb.character.choices[type].find(\n        (characterChoice) => characterChoice.optionValue && characterChoice.optionValue === optionId\n      );\n      if (choice) return choice.componentId;\n    }\n    // we could not determine if there are any choices left\n    return undefined;\n  },\n\n  determineActualFeatureId: (ddb, featureId, type = \"class\") => {\n    const optionalFeatureReplacement = ddb.character?.optionalClassFeatures\n      ? ddb.character.optionalClassFeatures\n        .filter((f) => f.classFeatureId === featureId)\n        .map((f) => f.affectedClassFeatureId)\n      : [];\n    // are we dealing with an optional class feature?\n    const choiceFeature = DDBHelper.getComponentIdFromOptionValue(ddb, type, featureId);\n\n    if (choiceFeature) {\n      const choiceOptionalFeature = ddb.character.optionalClassFeatures\n        .filter((f) => f.classFeatureId === choiceFeature)\n        .map((f) => f.affectedClassFeatureId);\n      if (choiceOptionalFeature && choiceOptionalFeature.length > 0) {\n        return choiceOptionalFeature[0];\n      }\n    } else if (optionalFeatureReplacement && optionalFeatureReplacement.length > 0) {\n      logger.debug(`Feature ${featureId} is replacing ${optionalFeatureReplacement[0]}`);\n      return optionalFeatureReplacement[0];\n    }\n    return featureId;\n  },\n\n  findSubClassByFeatureId: (ddb, featureId) => {\n    // optional class features need this filter, as they replace existing features\n    const featId = DDBHelper.determineActualFeatureId(ddb, featureId);\n    logger.debug(`Finding subclass featureId ${featureId} with featId ${featId}`);\n\n    let klass = ddb.character.classes.find((cls) => {\n      let classFeatures = cls.definition.classFeatures;\n      if (!cls.subclassDefinition) return false;\n      if (!cls.subclassDefinition.classFeatures) return false;\n\n      const subClassFeatures = cls.subclassDefinition.classFeatures.filter((f) =>\n        !classFeatures.some((cf) => cf.id === f.id)\n      );\n\n      return subClassFeatures.some((feature) => feature.id === featId);\n    });\n    return klass;\n  },\n\n  findClassByFeatureId: (ddb, featureId) => {\n    // optional class features need this filter, as they replace existing features\n    const featId = DDBHelper.determineActualFeatureId(ddb, featureId);\n    logger.debug(`Finding featureId ${featureId} with featId ${featId}`);\n\n    let klass = ddb.character.classes.find((cls) => {\n      let classFeatures = cls.classFeatures;\n      let featureMatch = classFeatures.find((feature) => feature.definition.id === featId);\n\n      if (featureMatch) {\n        return true;\n      } else {\n        // if not in global class feature list lets dig down\n        classFeatures = cls.definition.classFeatures;\n        if (cls.subclassDefinition && cls.subclassDefinition.classFeatures) {\n          classFeatures = classFeatures.concat(cls.subclassDefinition.classFeatures);\n        }\n        return classFeatures.some((feature) => feature.id === featId);\n      }\n    });\n    // try class option lookup\n    if (!klass) {\n      const option = ddb.character.options.class.find((option) => option.definition.id == featureId);\n      if (option) {\n        klass = ddb.character.classes.find((cls) => cls.classFeatures.find((feature) => feature.definition.id == option.componentId));\n      }\n      if (option && !klass && ddb.classOptions) {\n        const classOption = ddb.classOptions.find((cOption) => cOption.id == option.componentId);\n        if (classOption) {\n          klass = ddb.character.classes.find((cls) => cls.definition.id === classOption.classId);\n        }\n      }\n    }\n    // class option lookups\n    if (!klass && ddb.classOptions) {\n      const classOption = ddb.classOptions.find((option) => option.id == featureId);\n      if (classOption) {\n        klass = ddb.character.classes.find((cls) => cls.definition.id == classOption.classId);\n      }\n    }\n    if (klass) {\n      logger.debug(`Class ${klass.definition.name} found for ${featureId} with featId ${featId}`);\n    } else {\n      logger.debug(`Class not found for ${featureId}`);\n    }\n\n    return klass;\n  },\n\n  getCustomValueFromCharacter(ddbItem, character, type) {\n    if (!character) return null;\n    const characterValues = character.flags.ddbimporter.dndbeyond.characterValues;\n    const customValue = characterValues.filter((value) =>\n      value.valueId == ddbItem.id\n      && value.valueTypeId == ddbItem.entityTypeId\n    );\n\n    if (customValue) {\n      const value = customValue.find((value) => value.typeId == type);\n      if (value) return value.value;\n    }\n    return null;\n  },\n\n  getCustomValue(foundryItem, ddb, type) {\n    const characterValues = ddb.character?.characterValues;\n    if (!characterValues) return null;\n    const customValue = characterValues.filter(\n      (value) =>\n        (value.valueId == foundryItem.flags.ddbimporter.dndbeyond?.id\n          && value.valueTypeId == foundryItem.flags.ddbimporter.dndbeyond?.entityTypeId)\n        || (value.valueId == foundryItem.flags.ddbimporter.id\n          && value.valueTypeId == foundryItem.flags.ddbimporter.entityTypeId)\n    );\n\n    if (customValue) {\n      const customName = customValue.find((value) => value.typeId == type);\n      if (customName) return customName.value;\n    }\n    return null;\n  },\n\n  addCustomValues(ddb, foundryItem) {\n    // to hit override requires a lot of crunching\n    // const toHitOverride = DDBHelper.getCustomValue(item, character, 13);\n    const toHitBonus = DDBHelper.getCustomValue(foundryItem, ddb, 12);\n    const damageBonus = DDBHelper.getCustomValue(foundryItem, ddb, 10);\n    // const displayAsAttack = DDBHelper.getCustomValue(item, character, 16);\n    const costOverride = DDBHelper.getCustomValue(foundryItem, ddb, 19);\n    const weightOverride = DDBHelper.getCustomValue(foundryItem, ddb, 22);\n    // dual wield 18\n    // silvered\n    const silvered = DDBHelper.getCustomValue(foundryItem, ddb, 20);\n    // adamantine\n    const adamantine = DDBHelper.getCustomValue(foundryItem, ddb, 21);\n    // off-hand\n    // const offHand = DDBHelper.getCustomValue(ddbItem, character, 18);\n    const dcOverride = DDBHelper.getCustomValue(foundryItem, ddb, 15);\n    const dcBonus = DDBHelper.getCustomValue(foundryItem, ddb, 14);\n\n    if (toHitBonus) {\n      if (foundry.utils.hasProperty(foundryItem, \"system.attack.bonus\") && parseInt(foundryItem.system.attack.bonus) === 0) {\n        foundryItem.system.attack.bonus = toHitBonus;\n      } else {\n        foundryItem.system.attack.bonus += ` + ${toHitBonus}`;\n      }\n    }\n    if (damageBonus && foundryItem.system?.damage?.parts && foundryItem.system?.damage?.parts.length !== 0) {\n      foundryItem.system.damage.parts[0][0] = foundryItem.system.damage.parts[0][0].concat(` +${damageBonus}`);\n    } else if (damageBonus && foundryItem.system?.damage?.parts) {\n      const part = [`+${damageBonus}`, \"\"];\n      foundryItem.system.damage.parts.push(part);\n    }\n    if (costOverride) foundryItem.system.cost = costOverride;\n    if (weightOverride) foundryItem.system.weight = weightOverride;\n    if (silvered) foundryItem.system.properties['sil'] = true;\n    if (adamantine) foundryItem.system.properties['ada'] = true;\n    if (dcBonus) {\n      if (foundryItem.flags.ddbimporter.dndbeyond.dc) {\n        foundryItem.system.save.dc = parseInt(foundryItem.flags.ddbimporter.dndbeyond.dc) + dcBonus;\n        foundryItem.system.save.scaling = \"flat\";\n      }\n    }\n    if (dcOverride) {\n      foundryItem.system.save.dc = dcOverride;\n      foundryItem.system.save.scaling = \"flat\";\n    }\n    return foundryItem;\n  },\n\n  getName(ddb, item, character = null, allowCustom = true) {\n    // spell name\n    const customName = character\n      ? DDBHelper.getCustomValueFromCharacter(item, character, 8)\n      : DDBHelper.getCustomValue(item, ddb, 8);\n    if (customName && allowCustom) {\n      return utils.nameString(customName);\n    } else if (item.definition?.name) {\n      return utils.nameString(item.definition.name);\n    } else if (item.name) {\n      return utils.nameString(item.name);\n    } else {\n      logger.error(\"Unable to determine name for:\", item);\n      return \"Unknown thing.\";\n    }\n  },\n\n  displayAsAttack(ddb, item, character = null) {\n    const customDisplay = character\n      ? DDBHelper.getCustomValueFromCharacter(item, character, 16)\n      : DDBHelper.getCustomValue(item, ddb, 16);\n    if (typeof customDisplay == \"boolean\") {\n      return customDisplay;\n    } else if (foundry.utils.hasProperty(item, \"displayAsAttack\")) {\n      return item.displayAsAttack;\n    } else {\n      return false;\n    }\n  },\n\n  extractModifierValue(modifier) {\n    let value = \"\";\n    let modBonus = \"\";\n\n    let statBonus = (modifier.statId)\n      ? modifier.statId\n      : modifier.abilityModifierStatId\n        ? modifier.abilityModifierStatId\n        : null;\n\n    if (statBonus) {\n      const ability = DICTIONARY.character.abilities.find((ability) => ability.id === modifier.statId).value;\n      modBonus = modBonus === \"\" ? `@abilities.${ability}.mod` : `${modBonus} + @abilities.${ability}.mod`;\n    }\n\n    if (modifier.modifierTypeId === 1 && modifier.bonusTypes.includes(1)) {\n      // prof bonus\n      modBonus = modBonus === \"\" ? `@prof` : `${modBonus} + @prof`;\n    }\n\n    const die = modifier.dice ? modifier.dice : modifier.die ? modifier.die : undefined;\n\n    if (die) {\n      const fixedBonus = die.fixedValue ? ` + ${die.fixedValue}` : \"\";\n      if (die.diceString) {\n        value = die.diceString + modBonus + fixedBonus;\n      } else if (fixedBonus) {\n        value = fixedBonus + modBonus;\n      }\n    } else if (modifier.fixedValue) {\n      value = modifier.fixedValue;\n    } else if (modifier.value) {\n      value = modifier.value;\n    } else if (modBonus) {\n      value = modBonus;\n    }\n\n    if (value === \"\" && modifier.subType == \"saving-throws\" && modifier.bonusTypes.includes(2)) {\n      // we set the value to zero and when the saving throw is calculated it will\n      // be updated by the attunedItemsBonus function above\n      value = \"@attributes.attunement.value\";\n    }\n\n    return value;\n  },\n\n  getValueFromModifiers(modifiers, name, modifierSubType, modifierType = \"bonus\") {\n    let bonuses;\n    const bonusEffects = DDBHelper.filterModifiersOld(modifiers, modifierType, modifierSubType, null);\n\n    if (bonusEffects.length > 0) {\n      logger.debug(`Generating ${modifierSubType} ${modifierType} for ${name}`);\n      bonuses = \"\";\n      bonusEffects.forEach((modifier) => {\n        let bonusParse = DDBHelper.extractModifierValue(modifier);\n        if (bonuses !== \"\") bonuses += \" + \";\n        bonuses += bonusParse;\n      });\n      if (bonuses === \"\") {\n        bonuses = undefined;\n        logger.debug(`Modifier value 0 for ${modifierSubType} ${modifierType} for ${name}. Reset to undefined`, {\n          modifiers,\n          name,\n          modifierSubType,\n          modifierType,\n        });\n      } else {\n        logger.debug(`Modifier value string for ${modifierSubType} ${modifierType} for ${name}`, bonuses);\n      }\n    }\n\n    return bonuses;\n  },\n\n  findMatchedDDBItem(item, ownedItems, existingMatchedItems = []) {\n    return ownedItems.find((owned) => {\n      // have we already matched against this id? lets not double dip\n      const existingMatch = existingMatchedItems.find((matched) => {\n        return foundry.utils.getProperty(owned, \"flags.ddbimporter.id\") === foundry.utils.getProperty(matched, \"flags.ddbimporter.id\");\n      });\n      if (existingMatch) return false;\n      // the simple match\n      const simpleMatch\n        = item.name === owned.name\n        && item.type === owned.type\n        && item.flags?.ddbimporter?.id === owned.flags?.ddbimporter?.id;\n      // account for choices in ddb\n      const isChoice\n        = foundry.utils.hasProperty(item, \"flags.ddbimporter.dndbeyond.choice.choiceId\")\n        && foundry.utils.hasProperty(owned, \"flags.ddbimporter.dndbeyond.choice.choiceId\");\n      const choiceMatch = isChoice\n        ? item.flags.ddbimporter.dndbeyond.choice.choiceId\n          === owned.flags.ddbimporter.dndbeyond.choice.choiceId\n        : true;\n      // force an override\n      const overrideDetails = foundry.utils.getProperty(owned, \"flags.ddbimporter.overrideItem\");\n      const overrideMatch\n        = overrideDetails\n        && item.name === overrideDetails.name\n        && item.type === overrideDetails.type\n        && item.flags?.ddbimporter?.id === overrideDetails.ddbId;\n\n      return (simpleMatch && choiceMatch) || overrideMatch;\n    });\n  }\n\n};\n\nexport default DDBHelper;\n","import logger from \"../logger.js\";\nimport DICTIONARY from \"../dictionary.js\";\nimport SETTINGS from \"../settings.js\";\nimport CompendiumHelper from \"./CompendiumHelper.js\";\nimport DDBMuncher from \"../apps/DDBMuncher.js\";\nimport Iconizer from \"./Iconizer.js\";\nimport { DDBCompendiumFolders } from \"./DDBCompendiumFolders.js\";\nimport NameMatcher from \"./NameMatcher.js\";\nimport { addVision5eStubs } from \"../effects/vision5e.js\";\nimport ExternalAutomations from \"../effects/external/ExternalAutomations.js\";\n\nexport default class DDBItemImporter {\n\n  constructor(type, documents, { matchFlags = [], deleteBeforeUpdate = null, indexFilter = {}, useCompendiumFolders = null } = {}) {\n    this.type = type;\n    this.documents = documents;\n    this.useCompendiumFolders = useCompendiumFolders ?? true;\n    this.matchFlags = matchFlags;\n\n    this.compendium = CompendiumHelper.getCompendiumType(this.type);\n    this.compendium.configure({ locked: false });\n    this.compendiumIndex = null;\n    this.indexFilter = indexFilter;\n\n    this.results = [];\n\n    this.deleteBeforeUpdate = deleteBeforeUpdate ?? game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-delete-during-update\");\n  }\n\n  async buildIndex(indexFilter = {}) {\n    this.indexFilter = indexFilter;\n    this.compendiumIndex = await this.compendium.getIndex(this.indexFilter);\n  }\n\n  async init() {\n    await this.buildIndex(this.indexFilter);\n  }\n\n  #flagMatch(item1, item2) {\n    // console.warn(\"flagMatch\", {item1, item2, matchFlags});\n    if (this.matchFlags.length === 0) return true;\n    const matched = this.matchFlags.some((flag) =>\n      foundry.utils.hasProperty(item1, `flags.ddbimporter.${flag}`)\n      && foundry.utils.hasProperty(item2, `flags.ddbimporter.${flag}`)\n      && item1.flags.ddbimporter[flag] === item2.flags.ddbimporter[flag]\n    );\n    return matched;\n  }\n\n  static copyFlagGroup(flagGroup, originalItem, targetItem) {\n    if (targetItem.flags === undefined) targetItem.flags = {};\n    // if we have generated effects we dont want to copy some flag groups. mostly for AE on spells\n    const effectsProperty = foundry.utils.getProperty(targetItem, \"flags.ddbimporter.effectsApplied\")\n      && SETTINGS.EFFECTS_IGNORE_FLAG_GROUPS.includes(flagGroup);\n    if (originalItem.flags && !!originalItem.flags[flagGroup] && !effectsProperty) {\n      // logger.debug(`Copying ${flagGroup} for ${originalItem.name}`);\n      targetItem.flags[flagGroup] = originalItem.flags[flagGroup];\n    }\n  }\n\n  static copySupportedItemFlags(originalItem, targetItem) {\n    SETTINGS.SUPPORTED_FLAG_GROUPS.forEach((flagGroup) => {\n      this.copyFlagGroup(flagGroup, originalItem, targetItem);\n    });\n  }\n\n\n  static updateCharacterItemFlags(itemData, replaceData) {\n    if (itemData.flags?.ddbimporter?.importId) foundry.utils.setProperty(replaceData, \"flags.ddbimporter.importId\", itemData.flags.ddbimporter.importId);\n    if (replaceData.flags?.ddbimporter?.ddbCustomAdded) {\n      replaceData.system = itemData.system;\n      replaceData.type = itemData.type;\n    }\n    if (itemData.system.quantity) replaceData.system.quantity = itemData.system.quantity;\n    if (itemData.system.attuned) replaceData.system.attuned = itemData.system.attuned;\n    if (itemData.system.attunement) replaceData.system.attunement = itemData.system.attunement;\n    if (itemData.system.equipped) replaceData.system.equipped = itemData.system.equipped;\n    if (itemData.system.resources) replaceData.system.resources = itemData.system.resources;\n    if (itemData.system.preparation) replaceData.system.preparation = itemData.system.preparation;\n    if (itemData.system.proficient) replaceData.system.proficient = itemData.system.proficient;\n    if (!DICTIONARY.types.inventory.includes(itemData.type)) {\n      if (itemData.system.uses) replaceData.system.uses = itemData.system.uses;\n      if (itemData.system.consume) replaceData.system.consume = itemData.system.consume;\n      if (itemData.system.ability) replaceData.system.ability = itemData.system.ability;\n    }\n    if (foundry.utils.hasProperty(itemData, \"system.levels\")) replaceData.system.levels = itemData.system.levels;\n    if (foundry.utils.getProperty(itemData, \"flags.ddbimporter.price.xgte\")) {\n      replaceData.system.price.value = itemData.system.price.value;\n      replaceData.system.price.denomination = itemData.system.price.denomination;\n      foundry.utils.setProperty(replaceData, \"flags.ddbimporter.price\", itemData.flags.ddbimporter.price);\n    }\n    return replaceData;\n  }\n\n  static updateMatchingItems(oldItems, newItems,\n    { looseMatch = false, monster = false, keepId = false, keepDDBId = false, overrideId = false, linkItemFlags = false } = {}\n  ) {\n    let results = [];\n\n    for (let newItem of newItems) {\n      let item = foundry.utils.duplicate(newItem);\n\n      const matched = overrideId\n        ? oldItems.find((oldItem) => foundry.utils.getProperty(oldItem, \"flags.ddbimporter.overrideId\") == item._id)\n        : NameMatcher.looseItemNameMatch(item, oldItems, looseMatch, monster); // eslint-disable-line no-await-in-loop\n\n      if (matched) {\n        const match = foundry.utils.duplicate(matched);\n        // in some instances we want to keep the ddb id\n        if (keepDDBId && foundry.utils.hasProperty(item, \"flags.ddbimporter.id\")) {\n          foundry.utils.setProperty(match, \"flags.ddbimporter.id\", foundry.utils.duplicate(item.flags.ddbimporter.id));\n        }\n        if (!item.flags.ddbimporter) {\n          foundry.utils.setProperty(item, \"flags.ddbimporter\", match.flags.ddbimporter);\n        } else if (match.flags.ddbimporter && item.flags.ddbimporter) {\n          const mergedFlags = foundry.utils.mergeObject(item.flags.ddbimporter, match.flags.ddbimporter);\n          foundry.utils.setProperty(item, \"flags.ddbimporter\", mergedFlags);\n        }\n        if (!item.flags.monsterMunch && match.flags.monsterMunch) {\n          foundry.utils.setProperty(item, \"flags.monsterMunch\", match.flags.monsterMunch);\n        }\n        foundry.utils.setProperty(item, \"flags.ddbimporter.originalItemName\", match.name);\n        foundry.utils.setProperty(item, \"flags.ddbimporter.replaced\", true);\n        if (linkItemFlags && foundry.utils.hasProperty(match, \"flags.link-item-resource-5e\")) {\n          foundry.utils.setProperty(item, \"flags.link-item-resource-5e\", match.flags[\"link-item-resource-5e\"]);\n        }\n        item = DDBItemImporter.updateCharacterItemFlags(match, item);\n\n        if (!keepId) delete item[\"_id\"];\n        results.push(item);\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Removes items\n   * @param {*} itemsToRemove\n   */\n  removeItems(itemsToRemove, matchDDBId = false) {\n    this.documents = this.documents.filter((item) =>\n      !itemsToRemove.some((originalItem) =>\n        (item.name === originalItem.name || item.flags?.ddbimporter?.originalName === originalItem.name)\n        && item.type === originalItem.type\n        && (!matchDDBId || (matchDDBId && item.flags?.ddbimporter?.id === originalItem.flags?.ddbimporter?.id))\n      )\n    );\n  }\n\n\n  async getSRDCompendiumItems(looseMatch = false, keepId = false, monster = false) {\n    const compendiumName = SETTINGS.SRD_COMPENDIUMS.find((c) => c.type == this.type).name;\n    const srdPack = CompendiumHelper.getCompendium(compendiumName);\n    const srdIndices = [\"name\", \"type\", \"flags.ddbimporter.dndbeyond.alternativeNames\"];\n    const index = await srdPack.getIndex({ fields: srdIndices });\n\n    const matchedIds = index.filter((i) =>\n      index.some((orig) => {\n        const extraNames = foundry.utils.getProperty(orig, \"flags.ddbimporter.dndbeyond.alternativeNames\") ?? [];\n        if (looseMatch) {\n          const looseNames = NameMatcher.getLooseNames(orig.name, extraNames);\n          return looseNames.includes(i.name.split(\"(\")[0].trim().toLowerCase());\n        } else {\n          return i.name === orig.name || extraNames.includes(i.name);\n        }\n      })\n    ).map((i) => i._id);\n\n    const loadedItems = (await srdPack.getDocuments(matchedIds))\n      .map((i) => {\n        const item = i.toObject();\n        delete i.folder;\n        if (item.flags.ddbimporter) {\n          item.flags.ddbimporter[\"pack\"] = compendiumName;\n        } else {\n          item.flags.ddbimporter = { pack: compendiumName };\n        }\n        return item;\n      });\n    // logger.debug(`SRD ${type} loaded items:`, loadedItems);\n\n    const matchingOptions = {\n      looseMatch,\n      monster,\n      keepId,\n    };\n\n    const results = DDBItemImporter.updateMatchingItems(this.documents, loadedItems, matchingOptions);\n    logger.debug(`SRD ${this.type} result items:`, results);\n\n    return results;\n  }\n\n  async addCompendiumFolderIds(documents) {\n    if (this.useCompendiumFolders) {\n      const compendiumFolders = new DDBCompendiumFolders(this.type);\n      await compendiumFolders.loadCompendium(this.type);\n      const results = await compendiumFolders.addCompendiumFolderIds(documents);\n      return results;\n    } else {\n      return documents;\n    }\n  }\n\n  async getFilteredItems(item) {\n    const indexEntries = this.compendiumIndex.filter((idx) => idx.name === item.name);\n\n    const mapped = await Promise.all(indexEntries.map((idx) => {\n      const entry = this.compendium.getDocument(idx._id).then((doc) => doc);\n      return entry;\n    }));\n\n    const flagFiltered = mapped.filter((idx) => {\n      const nameMatch = idx.name === item.name;\n      const flagMatched = this.#flagMatch(idx, item);\n      return nameMatch && flagMatched;\n    });\n\n    return flagFiltered;\n  }\n\n\n  /**\n   * Asynchronously creates a new item to be added to a compendium based on its type.\n   * @param {object} item - the data for the new item to be created\n   * @return {Promise<object|null>} a Promise that resolves with the imported item or null if import failed\n   */\n  async createCompendiumItem(item) {\n    let newItem;\n    switch (this.type) {\n      case \"table\":\n      case \"tables\": {\n        newItem = new RollTable(item);\n        break;\n      }\n      default: {\n        try {\n          const options = {\n            displaySheet: false,\n            keepId: true,\n            temporary: true,\n          };\n          newItem = new Item.implementation(item, options);\n        } catch (err) {\n          logger.error(`Error creating ${item.name}`, { item, err });\n          throw err;\n        }\n\n      }\n    }\n    if (!newItem) {\n      logger.error(`Item ${item.name} failed creation`, { item, newItem });\n    }\n    DDBMuncher.munchNote(`Creating ${item.name}`);\n    logger.debug(`Pushing ${item.name} to compendium`);\n    return this.compendium.importDocument(newItem);\n  }\n\n  async updateCompendiumItem(updateItem, existingItem) {\n    // purge existing active effects on this item\n    if (existingItem.results) await existingItem.deleteEmbeddedDocuments(\"TableResult\", [], { deleteAll: true });\n    if (existingItem.effects) await existingItem.deleteEmbeddedDocuments(\"ActiveEffect\", [], { deleteAll: true });\n    if (existingItem.flags) DDBItemImporter.copySupportedItemFlags(existingItem, updateItem);\n    DDBMuncher.munchNote(`Updating ${updateItem.name} compendium entry`);\n    logger.debug(`Updating ${updateItem.name} compendium entry`);\n\n    const update = existingItem.update(updateItem, { pack: this.compendium.metadata.id, render: false });\n    // const update = existingItem.update(updateItem, { pack: compendium.metadata.id, recursive: false, render: false });\n    return update;\n  }\n\n  async deleteCreateCompendiumItem(updateItem, existingItem) {\n    if (existingItem.flags) DDBItemImporter.copySupportedItemFlags(existingItem, updateItem);\n    DDBMuncher.munchNote(`Removing and Recreating ${updateItem.name} compendium entry`);\n    logger.debug(`Removing and Recreating ${updateItem.name} compendium entry`);\n    await existingItem.delete();\n    let newItem = await this.createCompendiumItem(updateItem);\n    return newItem;\n  }\n\n\n  async updateCompendiumItems(inputItems) {\n    let results = [];\n    for (const item of inputItems) {\n      const existingItems = await this.getFilteredItems(item);\n      // we have a match, update first match\n      if (existingItems.length >= 1) {\n        const existingItem = existingItems[0];\n        // eslint-disable-next-line require-atomic-updates\n        item._id = existingItem._id;\n\n        if (item.type !== existingItem.type || this.deleteBeforeUpdate) {\n          if (item.type !== existingItem.type) {\n            logger.warn(`Item type mismatch ${item.name} from ${existingItem.type} to ${item.type}. DDB Importer will delete and recreate this item from scratch. You can most likely ignore this message.`);\n          }\n          let newItem = this.deleteCreateCompendiumItem(item, existingItem);\n          results.push(newItem);\n        } else {\n          let update = this.updateCompendiumItem(item, existingItem);\n          results.push(update);\n        }\n      }\n    }\n\n    return Promise.all(results);\n  }\n\n  async createCompendiumItems(inputItems) {\n    let promises = [];\n    for (const item of inputItems) {\n      const existingItems = await this.getFilteredItems(item);\n      // we have a single match\n      if (existingItems.length === 0) {\n        let newItem = await this.createCompendiumItem(item);\n        promises.push(newItem);\n      }\n    };\n    return Promise.all(promises);\n  }\n\n  async updateCompendium(updateExisting = false, filterDuplicates = true) {\n    if (!game.user.isGM) return [];\n    logger.debug(`Getting compendium for update of ${this.type} documents (checking ${this.documents.length} docs)`);\n\n    if (this.compendium.metadata.type === \"Item\" && this.deleteBeforeUpdate) {\n      await Item.deleteDocuments([], { pack: this.compendium.metadata.id, deleteAll: true });\n    }\n\n    // remove duplicate items based on name and type\n    const filterItems = filterDuplicates\n      ? [...new Map(this.documents.map((item) => {\n        let filterItem = item[\"name\"] + item[\"type\"];\n        this.matchFlags.forEach((flag) => {\n          filterItem += item.flags.ddbimporter[flag];\n        });\n        return [filterItem, item];\n      })).values()]\n      : this.documents;\n\n    // v11 compendium folders - just add to doc before creation/update\n    const inputItems = (await this.addCompendiumFolderIds(filterItems)).map((item) => {\n      if (foundry.utils.hasProperty(item, \"system.description.value\")) {\n        item.system.description.value = `<div class=\"ddb\">\n${item.system.description.value}\n</div>`;\n        item.system.description.chat = item.system.description.chat.trim() !== \"\"\n          ? `<div class=\"ddb\">\n${item.system.description.chat}\n</div>`\n          : \"\";\n      }\n      return item;\n    });\n\n    let results = [];\n    // update existing items\n    DDBMuncher.munchNote(`Creating and updating ${inputItems.length} ${this.type} items in compendium...`, true);\n\n    if (updateExisting) {\n      results = await this.updateCompendiumItems(inputItems);\n      logger.debug(`Updated ${results.length} existing ${this.type} items in compendium`);\n    }\n\n    // create new items\n    const createResults = await this.createCompendiumItems(inputItems);\n    logger.debug(`Created ${createResults.length} new ${this.type} items in compendium`);\n    DDBMuncher.munchNote(\"\", true);\n\n    this.results = createResults.concat(results);\n    return new Promise((resolve) => resolve(this.results));\n  }\n\n  async loadPassedItemsFromCompendium(items,\n    { looseMatch = false, monsterMatch = false, keepId = false, deleteCompendiumId = true,\n      indexFilter = {}, // { fields: [\"name\", \"flags.ddbimporter.id\"] }\n      keepDDBId = false, linkItemFlags = false } = {}\n  ) {\n\n    await this.buildIndex(indexFilter);\n\n    const firstPassItems = await this.compendiumIndex.filter((i) =>\n      items.some((orig) => {\n        const extraNames = foundry.utils.getProperty(orig, \"flags.ddbimporter.dndbeyond.alternativeNames\") ?? [];\n        if (looseMatch) {\n          const looseNames = NameMatcher.getLooseNames(orig.name, extraNames);\n          return looseNames.includes(i.name.split(\"(\")[0].trim().toLowerCase());\n        } else if (monsterMatch) {\n          const monsterNames = NameMatcher.getMonsterNames(orig.name);\n          // console.log(magicNames)\n          if (i.name === orig.name) {\n            return true;\n          } else if (monsterNames.includes(i.name.toLowerCase())) {\n            return true;\n          } else {\n            return false;\n          }\n        } else {\n          return i.name === orig.name || extraNames.includes(i.name);\n        }\n      })\n    );\n\n    let loadedItems = [];\n    for (const i of firstPassItems) {\n      let item = await this.compendium.getDocument(i._id).then((doc) => {\n        const docData = doc.toObject();\n        if (deleteCompendiumId) delete docData._id;\n        delete docData.folder;\n        SETTINGS.COMPENDIUM_REMOVE_FLAGS.forEach((flag) => {\n          if (foundry.utils.hasProperty(docData, flag)) foundry.utils.setProperty(docData, flag, undefined);\n        });\n\n        return docData;\n      });\n      foundry.utils.setProperty(item, \"flags.ddbimporter.pack\", `${this.compendium.metadata.id}`);\n      loadedItems.push(item);\n    }\n    logger.debug(`compendium ${this.type} loaded items:`, loadedItems);\n\n    const matchingOptions = {\n      looseMatch,\n      monster: monsterMatch,\n      keepId,\n      keepDDBId,\n      linkItemFlags,\n    };\n\n    const results = await DDBItemImporter.updateMatchingItems(items, loadedItems, matchingOptions);\n    logger.debug(`compendium ${this.type} result items:`, results);\n    return results;\n  }\n\n\n  /**\n   * gets items from compendium\n   * @param {*} items\n   * @param {*} type\n   * @param {*} options\n   */\n  static async getCompendiumItems(items, type,\n    { looseMatch = false, monsterMatch = false, keepId = false,\n      deleteCompendiumId = true, keepDDBId = false, linkItemFlags = false } = {}\n  ) {\n\n    const itemImporter = new DDBItemImporter(type, []);\n    await itemImporter.init();\n\n    const loadOptions = {\n      looseMatch,\n      monsterMatch,\n      keepId,\n      keepDDBId,\n      deleteCompendiumId,\n      linkItemFlags,\n    };\n    const results = await itemImporter.loadPassedItemsFromCompendium(items, loadOptions);\n\n    return results;\n  }\n\n  async srdFiddling(removeDuplicates = true, matchDDBId = false) {\n    const useSrd = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-srd\");\n\n    if (useSrd) {\n      logger.debug(\"Replacing SRD compendium items\");\n      const srdItems = await this.getSRDCompendiumItems();\n      if (removeDuplicates) this.removeItems(srdItems, matchDDBId);\n      this.documents = this.documents.concat(srdItems);\n    }\n  }\n\n  async iconAdditions() {\n    this.documents = await Iconizer.updateIcons(this.documents);\n  }\n\n  static async buildHandler(type, documents, updateBool,\n    { srdFidding = true, removeSRDDuplicates = true, ids = null, vision5e = false, chrisPremades = false, matchFlags = [],\n      deleteBeforeUpdate = null, filterDuplicates = true, useCompendiumFolders = null, updateIcons = true } = {}\n  ) {\n    const handler = new DDBItemImporter(type, documents, { matchFlags, deleteBeforeUpdate, useCompendiumFolders });\n    await handler.init();\n    if (srdFidding) await handler.srdFiddling(removeSRDDuplicates);\n    if (updateIcons) await handler.iconAdditions();\n    const filteredItems = (ids !== null && ids.length > 0)\n      ? handler.documents.filter((s) => s.flags?.ddbimporter?.definitionId && ids.includes(String(s.flags.ddbimporter.definitionId)))\n      : handler.documents;\n    if (vision5e) {\n      handler.documents = addVision5eStubs(filteredItems);\n    }\n    if (chrisPremades) {\n      handler.documents = await ExternalAutomations.applyChrisPremadeEffects({ documents: handler.documents, compendiumItem: true });\n    }\n    DDBMuncher.munchNote(`Importing ${handler.documents.length} ${type} documents!`, true);\n    logger.debug(`Importing ${handler.documents.length} ${type} documents!`, foundry.utils.deepClone(documents));\n    await handler.updateCompendium(updateBool, filterDuplicates);\n    await handler.buildIndex();\n    return handler;\n  }\n\n}\n","import SETTINGS from \"../settings.js\";\n\nconst DDBProxy = {\n\n  isCustom: () => {\n    return game.settings.get(SETTINGS.MODULE_ID, \"custom-proxy\");\n  },\n\n  resetProxy: () => {\n    game.settings.set(SETTINGS.MODULE_ID, \"api-endpoint\", SETTINGS.DEFAULT_SETTINGS.READY.PROXY[\"api-endpoint\"].default);\n    game.settings.set(SETTINGS.MODULE_ID, \"custom-proxy\", false);\n  },\n\n  getProxy: () => {\n    if (DDBProxy.isCustom() || CONFIG.DDBI.DEV.enabled) return game.settings.get(SETTINGS.MODULE_ID, \"api-endpoint\");\n    else return SETTINGS.URLS.PROXY;\n  },\n\n  getDynamicProxy: () => {\n    if (CONFIG.DDBI.DEV.enabled) return game.settings.get(SETTINGS.MODULE_ID, \"dynamic-api-endpoint\");\n    else return SETTINGS.URLS.DYNAMIC;\n  },\n\n  getCORSProxy: () => {\n    if (DDBProxy.isCustom() || CONFIG.DDBI.DEV.enabled || CONFIG.DDBI.DEV.customCors) return game.settings.get(SETTINGS.MODULE_ID, \"cors-endpoint\");\n    return SETTINGS.URLS.CORS;\n  },\n\n\n};\n\nexport default DDBProxy;\n","import utils from \"./utils.js\";\nimport logger from \"../logger.js\";\nimport CompendiumHelper from \"./CompendiumHelper.js\";\nimport SETTINGS from \"../settings.js\";\n\nconst INDEX_COMPENDIUMS = [\n  \"spell\",\n  \"spells\",\n  \"item\",\n  \"items\",\n  \"magicitems\",\n  \"monsters\",\n  \"magicitem\",\n  \"monster\",\n  \"vehicle\",\n  \"vehicles\",\n];\n\nconst ATTACK_ACTION_HINTS = {\n  \"Opportunity Attack\": \"Opportunity Attacks\",\n  \"Grapple\": \"Grappling\",\n  \"Shove\": \"Shoving\",\n  \"Interact with an Object\": \"Use an Object\",\n};\n\nconst RULE_ADJUSTMENT = {\n  \"rule\": \"rules\",\n  \"skill\": \"skills\",\n  \"ability\": \"abilities\",\n  \"condition\": \"conditions\",\n  \"creatureType\": \"creatureTypes\",\n  \"damageType\": \"damageTypes\",\n  \"spellComponent\": \"spellComponents\",\n  \"spellTag\": \"spellTags\",\n  \"spellSchool\": \"spellSchools\",\n  \"areaTargetType\": \"areaTargetTypes\",\n};\n\nconst SUPER_LOOSE = [\n  \"rules\",\n  \"actions\",\n  \"areaTargetType\",\n];\n\n\nexport async function loadDDBCompendiumIndexes() {\n  for (const i of INDEX_COMPENDIUMS) {\n    await CompendiumHelper.loadCompendiumIndex(i);\n  }\n}\n\n\nfunction findMatchingTagInIndex(type, tag) {\n  const index = foundry.utils.hasProperty(CONFIG.DDBI, `compendium.index.${type}`)\n    ? foundry.utils.getProperty(CONFIG.DDBI, `compendium.index.${type}`)\n    : undefined;\n  if (!index) {\n    logger.warn(`Unable to load compendium ${type}s`);\n    return tag;\n  }\n  const strippedTag = utils.stripHtml(tag);\n  const match = index.find((entry) => utils.nameString(entry.name).toLowerCase() === utils.nameString(strippedTag).replace(\"&nbsp;\", \" \").toLowerCase());\n  if (match) {\n    const label = foundry.utils.getProperty(CONFIG.DDBI, `compendium.label.${type}`);\n    return `@Compendium[${label}.${match._id}]{${tag}}`;\n  } else if (strippedTag.includes(\";\")) {\n    const tagSplit = utils.nameString(strippedTag.replace(\"&nbsp;\", \" \")).split(\";\")[0];\n    const splitMatch = index.find((entry) => utils.nameString(entry.name).toLowerCase() === tagSplit.toLowerCase());\n    if (splitMatch) {\n      const label = foundry.utils.getProperty(CONFIG.DDBI, `compendium.label.${type}`);\n      return `@Compendium[${label}.${splitMatch._id}]{${tagSplit}}`;\n    }\n  }\n  logger.info(`Unable to find tag parse compendium match in ${type} for ${tag}`);\n  return tag;\n}\n\n\nfunction generateDDBRuleLinks() {\n  const rules = {\n    \"senses\": { // CONFIG.DDB.senses\n    },\n    \"actions\": { // CONFIG.DDB.basicActions\n    },\n    \"weaponproperties\": { // CONFIG.DDB.weaponProperties\n      // foundry does not yet have weapon property descriptions\n    },\n  };\n\n  for (const sense of CONFIG.DDB.senses) {\n    const slug = utils.normalizeString(sense.name);\n    if (CONFIG.DND5E.rules[slug]) {\n      rules.senses[slug] = {\n        reference: CONFIG.DND5E.rules[slug],\n        label: sense.name,\n        id: sense.id,\n      };\n    }\n  }\n\n  for (const action of CONFIG.DDB.basicActions) {\n    const slug = utils.normalizeString(action.name);\n    const lookup = CONFIG.DND5E.rules[slug] ?? ATTACK_ACTION_HINTS[action.name];\n    if (lookup) {\n      rules.actions[slug] = {\n        reference: CONFIG.DND5E.rules[slug],\n        label: action.name,\n        id: action.id,\n      };\n    }\n  }\n\n  return rules;\n}\n\n\nfunction getRuleLookups() {\n  if (CONFIG.DDBI.RULE_MATCHES) return CONFIG.DDBI.RULE_MATCHES;\n\n  const baseRules = {\n    \"rules\": {},\n    \"conditions\": CONFIG.DND5E.conditionTypes,\n    \"skills\": CONFIG.DND5E.skills,\n    \"abilities\": CONFIG.DND5E.abilities,\n    \"creatureTypes\": CONFIG.DND5E.creatureTypes,\n    \"damageTypes\": CONFIG.DND5E.damageTypes,\n    \"spellComponents\": CONFIG.DND5E.spellComponents,\n    \"spellTags\": CONFIG.DND5E.spellTags,\n    \"spellSchools\": CONFIG.DND5E.spellSchools,\n    \"areaTargetTypes\": CONFIG.DND5E.areaTargetTypes\n  };\n\n  const rules = {};\n  for (const [key, value] of Object.entries(CONFIG.DND5E.rules)) {\n    rules[key] = {\n      label: utils.capitalize(key),\n      reference: value,\n    };\n  }\n  baseRules[\"rules\"] = foundry.utils.mergeObject(foundry.utils.mergeObject({}, rules), baseRules.spellTags);\n  CONFIG.DDBI.RULE_MATCHES = foundry.utils.mergeObject(baseRules, generateDDBRuleLinks());\n  return CONFIG.DDBI.RULE_MATCHES;\n}\n\n\n/**\n * Replaces a rule based on the given type, reference, slug, and forceTrimCheck flag.\n *\n * @param {string} baseType - The base type of the rule.\n * @param {string} text - The text to be replaced/used as description.\n * @param {string} slug - The slug to identify the rule.\n * @param {boolean} forceTrimCheck - Optional flag to force trim check.\n * @return {string} The replaced reference based on the rule.\n */\nfunction ruleReplacer(baseType, text, slug, forceTrimCheck = false) {\n  const type = RULE_ADJUSTMENT[baseType] ?? baseType;\n\n  const rules = getRuleLookups()[type];\n  if (!rules) return text;\n\n  if (forceTrimCheck || [\"abilities\", \"skills\", \"spellSchools\"].includes(\"type\")) {\n    // ensure it's not a trimmed slug\n    const trimmedSlug = slug.substring(0, 3).toLowerCase();\n    if (rules[trimmedSlug] && type[trimmedSlug].reference) {\n      const result = `&Reference[${trimmedSlug}]{${text}}`;\n      return result;\n    }\n  }\n\n  if (rules[slug] && rules[slug].reference) {\n    const result = `&Reference[${slug}]{${text}}`;\n    return result;\n  }\n\n  return text;\n}\n\n/**\n * Replaces a tag in the given string with a modified version.\n *  /(\\[([^\\]]+)]([^[]+)\\[\\/([^\\]]+)]/g;\n *\n * @param {string} match - the entire matched string\n * @param {string} tagType - tag name e.g. skills\n * @param {string} tagName - tag name e.g. Acrobatics\n * @param {number} _p4 - final tag closure\n * @param {number} _offset - the zero-based index of the match in the string\n * @param {string} _string - the input string\n * @return {string} the modified string with the replaced tag\n */\n// eslint-disable-next-line no-unused-vars\nfunction replaceTag(match, tagType, tagName, _p4, _offset, _string) {\n  if (!tagName) {\n    logger.warn(`Unable to tag parse ${match}`);\n    return match;\n  }\n\n  if (INDEX_COMPENDIUMS.includes(tagType)) {\n    return findMatchingTagInIndex(tagType, tagName);\n  }\n\n  const strippedP2 = utils.stripHtml(tagName);\n  const lowerCaseTag = utils.normalizeString(strippedP2);\n  const result = ruleReplacer(tagType, tagName, lowerCaseTag);\n\n  return result;\n}\n\n/**\n * Parses loose rule references in the given text.\n * Fast and loose search and replace\n *\n * @param {string} text - The text to parse rule references from\n * @param {boolean} superLoose - Flag to indicate whether to allow super loose rule references\n * @return {string} The parsed text with rule references replaced\n */\nfunction parseLooseRuleReferences(text, superLoose = false) {\n  for (const [type, entries] of Object.entries(getRuleLookups())) {\n    // console.error(`Reference Check`, { text });\n    // eslint-disable-next-line no-continue\n    if (!superLoose && SUPER_LOOSE.includes(type)) continue;\n    for (const [key, value] of Object.entries(entries)) {\n      // eslint-disable-next-line no-continue\n      if (!value.reference) continue;\n      const linkRegEx = new RegExp(`(&Reference)?(^| |\\\\(|\\\\[|>)(DC (\\\\d\\\\d) )?(${value.label})( (saving throw|average=true|average=false))?( |\\\\)|\\\\]|\\\\.|,|$|\\\\n|<)`, \"ig\");\n      const replaceRule = (match, p1, p2, p3, p4, p5, p6, p7, p8) => {\n        // console.warn(\"match\", { match, p1, p2, p3, p4, p5, p6, p7, p8 });\n        if (p1 || (p7 && p7.includes(\"average=\"))) return match; // already a reference match don't match this\n        if (p3 && Number.isInteger(parseInt(p4)) && p7) {\n          if (p7.toLowerCase() === \"saving throw\") {\n            return `${p2}[[/save ${key} ${p4} format=long]]${p8}`;\n          }\n        }\n        return `${p2}${p3 ?? \"\"}&Reference[${key}]{${p5}}${p6 ?? \"\"}${p8}`;\n      };\n      text = text.replaceAll(linkRegEx, replaceRule);\n    }\n  }\n\n\n  return text;\n}\n\nfunction parseHardReferenceTag(type, text) {\n  const index = foundry.utils.hasProperty(CONFIG.DDBI, `compendium.index.${type}`)\n    ? foundry.utils.getProperty(CONFIG.DDBI, `compendium.index.${type}`)\n    : undefined;\n  if (!index) {\n    logger.warn(`Unable to load compendium ${type}s`);\n    return text;\n  }\n\n  const referenceRegexReplacer = (match, referenceName, postfix) => {\n    const cMatch = index.find((f) => f.name.toLowerCase() === referenceName.toLowerCase());\n    const replacedText = cMatch ? `@UUID[${cMatch.uuid}]{${referenceName}}` : referenceName;\n    // console.warn(\"match\", { match, document, prefix, spellName, postfix, compendium: this.spellCompendium.index, cMatch, replacedSpell });\n    return `${replacedText}${postfix}`;\n  };\n\n\n  if ([\"spell\", \"spells\"].includes(type.toLowerCase())) {\n    // easiest, e.g.wand of fireballs\n    const simpleStrongRegex = /(?:<strong>)([\\w\\s]*?)(?:<\\/strong>)(\\s*spell)/gi;\n    text = `${text}`.replaceAll(simpleStrongRegex, referenceRegexReplacer);\n    // <strong>cone of cold</strong> (5 charges)\n    const chargeSpellRegex = /(?:<strong>)([\\w\\s]*?)(?:<\\/strong>)(\\s*\\(\\d* charge)/gi;\n    text = `${text}`.replaceAll(chargeSpellRegex, referenceRegexReplacer);\n  } else if ([\"item\", \"items\", \"magicitem\", \"magicitems\"].includes(type)) {\n    // easiest, e.g.wand of fireballs\n    const simpleStrongRegex = /(?:<strong>)([\\w\\s]*?)(?:<\\/strong>)(\\s*item)/gi;\n    text = `${text}`.replaceAll(simpleStrongRegex, referenceRegexReplacer);\n  }\n\n  return text;\n}\n\nfunction damageRollGenerator({ text, damageType, actor, document, extraMods = [] } = {}) {\n  let result;\n  const damageHint = damageType ? ` type=${damageType}` : \"\";\n  const diceParse = utils.parseDiceString(text, null, \"\");\n  const baseAbility = foundry.utils.getProperty(document, \"flags.monsterMunch.actionInfo.baseAbility\");\n  const mods = extraMods.join(\" + \");\n\n  if (baseAbility) {\n    const baseAbilityMod = actor ? actor.system.abilities[baseAbility].mod : diceParse.bonus;\n    const bonusMod = (diceParse.bonus && diceParse.bonus !== 0) ? diceParse.bonus - baseAbilityMod : \"\";\n    const useMod = (diceParse.bonus && diceParse.bonus !== 0) ? \" + @mod \" : \"\";\n    const finalMods = mods.length > 0\n      ? `${useMod} + ${mods}`\n      : useMod;\n\n    // console.warn(\"RESULTS\", {\n    //   text,\n    //   diceParse,\n    //   baseAbility,\n    //   baseAbilityMod,\n    //   bonusMod,\n    //   useMod,\n    //   finalMods\n    // });\n\n    const reParse = utils.diceStringResultBuild(diceParse.diceMap, diceParse.dice, bonusMod, finalMods, \"\");\n    result = `[[/damage ${reParse.diceString}${damageHint} average=true]]`;\n  } else {\n    // console.warn(\"RESULTS2\", {\n    //   text,\n    //   diceParse,\n    //   baseAbility,\n    //   document,\n    // });\n    // const reParse = utils.diceStringResultBuild(diceParse.diceMap, diceParse.dice, undefined, mods, \"\");\n    // result = `[[/damage ${reParse.diceString}${damageHint} average=true]]`;\n    result = `[[/damage ${diceParse.diceString}${damageHint} average=true]]`;\n  }\n\n  return result;\n}\n\n// eslint-disable-next-line complexity\nexport function parseDamageRolls({ text, document, actor } = {}) {\n  // (2d8 + 3) piercing damage\n  // [[/damage 2d6 fire average=true]]\n  // 5 (1d4 + 3) piercing damage plus 10 (3d6) psychic damage, or 1 piercing damage plus 10 (3d6) psychic damage while under the effect of Reduce.\n\n  const strippedHtml = utils.stripHtml(`${text}`).trim();\n\n  const hitIndex = strippedHtml.indexOf(\"Hit:\");\n  let hit = (hitIndex > 0) ? strippedHtml.slice(hitIndex) : `${strippedHtml}`;\n  hit = hit.split(\"At the end of each\")[0].split(\"At the start of each\")[0];\n  hit = hit.replace(/[–-–−]/g, \"-\");\n  const damageExpression = new RegExp(/((?:takes\\s+|plus\\s+|saving throw or take\\s+)|(?:[\\w]*\\s+))(?:([0-9]+))?(?:\\s*\\(?([0-9]*d[0-9]+(?:\\s*[-+]\\s*(?:[0-9]+|PB|the spell[’']s level))*(?:\\s+plus [^)]+)?)\\)?)\\s*([\\w ]*?)\\s*damage/gi);\n\n  const matches = [...hit.matchAll(damageExpression)];\n  const regainExpression = new RegExp(/(regains|regain)\\s+?(?:([0-9]+))?(?: *\\(?([0-9]*d[0-9]+(?:\\s*[-+]\\s*[0-9]+)??)\\)?)?\\s+hit\\s+points/);\n\n  const regainMatch = hit.match(regainExpression);\n\n  logger.debug(`${document.name} Damage matches`, { hit, matches, regainMatch });\n\n  const includesDiceRegExp = /[0-9]*d[0-9]+/;\n\n  for (const dmg of matches) {\n    if (dmg[1] == \"DC \" || dmg[4] == \"hit points by this\") {\n      continue; // eslint-disable-line no-continue\n    }\n\n    const bonusMods = [];\n    if (dmg[3]?.includes(\" + PB\") || dmg[3]?.includes(\" plus PB\")) bonusMods.push(\"@prof\");\n    if (dmg[3] && (/the spell[’']s level/i).test(dmg[3])) bonusMods.push(\"@item.level\");\n\n    const damage = bonusMods.length > 0\n      ? `${dmg[2]}${dmg[3].replace(\" + PB\", \"\").replace(\" plus PB\", \"\").replace(\" + the spell’s level\", \"\").replace(\" + the spell's level\", \"\")}`\n      : dmg[3] && dmg[3].startsWith(\"d\") // satisfies parsing where no average damage e.g. horn of blasting summary\n        ? `${dmg[2] ?? \"\"}${dmg[3] ?? \"\"}`\n        : dmg[3] ?? dmg[2];\n\n    if (damage && includesDiceRegExp.test(damage)) {\n      const parsedDiceDamage = damageRollGenerator({ text: damage, damageType: dmg[4], actor, document, bonusMods });\n      const replaceValue = `${dmg[1]} ${parsedDiceDamage} damage`;\n      // console.warn(\"DAMAGE PARSE\", {\n      //   damage,\n      //   dmg,\n      //   parsedDiceDamage,\n      //   replaceValue,\n      // });\n\n      text = text.replace(dmg[0], replaceValue);\n\n    } else {\n      const noDiceRegex = /(\\d+) (\\w+) damage/i;\n      const fixedDamageMatch = dmg[0].match(noDiceRegex);\n      // console.warn(\"no dice match\",{\n      //   noDiceRegex,\n      //   fixedDamageMatch,\n      //   dmg\n      // })\n      if (fixedDamageMatch) {\n        text = text.replace(fixedDamageMatch[0], `[[/damage ${fixedDamageMatch[1]} ${fixedDamageMatch[2]} average=false]] damage`);\n      }\n    }\n  }\n\n  if (regainMatch) {\n    const damageValue = regainMatch[3]\n      ? regainMatch[2]\n        ? `${regainMatch[2]}${regainMatch[3]}`\n        : regainMatch[3]\n      : regainMatch[2];\n    const parsedDiceDamage = Number.isInteger(parseInt(damageValue))\n      ? `[[/damage ${damageValue} type=heal average=false]]`\n      : damageRollGenerator({ text: damageValue, damageType: \"heal\", actor, document });\n    const replaceValue = `${regainMatch[1]} ${parsedDiceDamage} hit points`;\n    // console.warn(\"DAMAGE PARSE\", {\n    //   regainMatch,\n    //   damageValue,\n    //   parsedDiceDamage,\n    //   replaceValue,\n    // });\n\n    text = text.replace(regainMatch[0], replaceValue);\n  }\n\n  return text;\n}\n\nexport function parseToHitRoll({ text, document } = {}) {\n\n  if (!document) return text;\n\n  const matches = utils.stripHtml(`${text}`).trim().match(\n    /(?:Melee|Ranged|Melee\\s+or\\s+Ranged)\\s+(?:|Weapon|Spell)\\s*Attack:\\s*([+-]\\d+|your (?:\\w+\\s*)*)(?:,)?\\s+(plus PB\\s|\\+ PB\\s)?to\\s+hit/i\n  );\n\n  const toHit = matches && Number.isInteger(parseInt(matches[1]));\n\n  if (!toHit) return text;\n\n  const ability = foundry.utils.getProperty(document, \"flags.monsterMunch.actionInfo.baseAbility\");\n  const proficient = foundry.utils.getProperty(document, \"flags.monsterMunch.actionInfo.proficient\") ? \" + @prof\" : \"\";\n  const extraNum = foundry.utils.getProperty(document, \"flags.monsterMunch.actionInfo.extraAttackBonus\");\n  const extra = extraNum === 0 ? \"\" : ` + ${extraNum}`;\n  const result = `[[/roll 1d20 + @abilities.${ability}.mod${proficient}${extra}]]`;\n\n  text = text.replace(matches[1], result);\n\n  return text;\n\n}\n\nexport function parseTags(text) {\n  for (const tag of [\"spell\", \"item\", \"spells\", \"items\"]) {\n    text = parseHardReferenceTag(tag, text);\n  }\n  const tagRegEx = /\\[([^\\]]+)]{?([^[}]+)}?\\[\\/([^\\]]+)]/g;\n  const matches = text.match(tagRegEx);\n  if (matches) {\n    return text.replaceAll(tagRegEx, replaceTag);\n  }\n  if (game.settings.get(SETTINGS.MODULE_ID, \"use-loose-srd-reference-matching\")) {\n    const superLoose = game.settings.get(SETTINGS.MODULE_ID, \"use-super-loose-srd-reference-matching\");\n    text = parseLooseRuleReferences(text, superLoose);\n  }\n  return text;\n}\n\n\nexport async function importCacheLoad() {\n  await loadDDBCompendiumIndexes();\n  getRuleLookups();\n}\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludes(array, value) {\n  var length = array ? array.length : 0;\n  return !!length && baseIndexOf(array, value, 0) > -1;\n}\n\n/**\n * This function is like `arrayIncludes` except that it accepts a comparator.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludesWith(array, value, comparator) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (comparator(value, array[index])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  if (value !== value) {\n    return baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\n/**\n * Checks if a cache value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    Set = getNative(root, 'Set'),\n    nativeCreate = getNative(Object, 'create');\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values ? values.length : 0;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  }\n  else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n    if (set) {\n      return setToArray(set);\n    }\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache;\n  }\n  else {\n    seen = iteratee ? [] : result;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n      if (iteratee) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n    else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a set object of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n */\nvar createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n  return new Set(values);\n};\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each\n * element is kept.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nexport function uniq(array) {\n  return (array && array.length)\n    ? baseUniq(array)\n    : [];\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n","/**\n * @license\n *\n * The MIT License (MIT)\n *\n * Copyright (c) 2014 Nick Williams\n * Copyright (c) 2021 Jack Holloway\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport { uniq } from \"./lowdash/uniq.js\";\n\n/**\n * generates factory functions to convert table rows to objects,\n * based on the titles in the table's <thead>\n * @param  {Array<String>} headings the values of the table's <thead>\n * @return {(row: HTMLTableRowElement) => Object} a function that takes a table row and spits out an object\n */\nfunction mapRow(headings, highSplit = false) {\n  return function mapRowToObject({ cells }) {\n    const lowCells = [...cells];\n    const highCells = lowCells.length > headings.length\n      ? lowCells.splice(Math.ceil(lowCells.length / 2))\n      : [];\n    const range = highSplit ? highCells : lowCells;\n\n    return range.reduce((result, cell, i) => {\n      const input = cell.querySelector(\"input,select\");\n      var value;\n\n      if (input) {\n        value = input.type === \"checkbox\" ? input.checked : input.value;\n      } else {\n        value = cell.innerHTML;\n      }\n\n      return Object.assign(result, { [headings[i]]: value });\n    }, {});\n  };\n}\n\n/**\n * given a table, generate an array of keys/column names\n *\n * @param  {HTMLTableElement} table the table to convert\n * @return {Array<String>}       array of strings representing each header in the table\n */\nexport function getHeadings(table, unique = true) {\n  if (!table.tHead || table.tHead.rows.length === 0) return [];\n  const headings = [...table.tHead.rows[0].cells].map((heading) => {\n    return heading.textContent;\n  }); // .filter((h) => h.trim() !== \"\");\n\n  if (unique) return uniq(headings);\n  return headings;\n}\n\n\nfunction getRowsFromHeader(table) {\n  let rows = [...table.tHead.rows];\n  rows.splice(0, 1);\n  return rows;\n}\n\n/**\n * given a table, generate an array of objects.\n * each object corresponds to a row in the table.\n * each object's key/value pairs correspond to a column's heading and the row's value for that column\n *\n * @param  {HTMLTableElement} table the table to convert\n * @return {Array<Object>}       array of objects representing each row in the table\n */\nexport function parseTable(table) {\n  const headings = getHeadings(table);\n  const allHeadings = getHeadings(table, false);\n\n  if (headings.length === 0) return [];\n  // some tables are misformated and only have a thead and no tbody\n  const rows = table.tBodies[0]\n    ? [...table.tBodies[0].rows]\n    : table.tHead.rows.length > 1\n      ? getRowsFromHeader(table)\n      : [];\n  // DDB often puts d rolls alongside each other. we attempt to detect these\n  const lowResults = rows.map(mapRow(headings));\n  const highResults = allHeadings.length !== headings.length\n    ? rows.map(mapRow(headings, true))\n    : [];\n\n  return lowResults.concat(highResults);\n}\n\n","import { parseTable, getHeadings } from \"../../vendor/parseTable.js\";\nimport CompendiumHelper from \"./CompendiumHelper.js\";\nimport utils from \"./utils.js\";\nimport logger from \"../logger.js\";\nimport DDBItemImporter from \"./DDBItemImporter.js\";\n\nfunction diceRollMatcher(match, p1, p2, p3, p4, p5) {\n  if (p5 && p5.toLowerCase() === \"damage\") {\n    let dmgString = `${p4} damage`;\n    dmgString = dmgString[0].toUpperCase() + dmgString.substring(1);\n    const diceString = utils.parseDiceString(p2, null, `[${p4.toLowerCase()}]`).diceString;\n    return `${p1 ? p1 : \"\"}[[/r ${diceString} # ${dmgString}]]${p3} damage`;\n  } else if (p5 && p1 && p5.toLowerCase() === \"points\" && p1.toLowerCase() === \"regains\") {\n    const diceString = utils.parseDiceString(p2, null, \"[healing]\").diceString;\n    return `${p1 ? p1 : \"\"}[[/r ${diceString} # Healing]]${p3} hit points`;\n  } else {\n    const diceString = utils.parseDiceString(p2).diceString;\n    const result = `${p1 ? p1 : \"\"}[[/r ${diceString}]]${p3 ? p3 : \"\"} ${p4 ? p4 : \"\"} ${p5 ? p5 : \"\"}`.trim();\n    return result;\n  }\n}\n\nfunction replaceRollLinks(text) {\n  text = text.replace(/[­––−-]/gu, \"-\").replace(/-+/g, \"-\");\n  const damageRegex = new RegExp(/([.>( ^]|^|regains +)?(\\d*d\\d+(?:\\s*[+-]\\s*\\d*d*\\d*)*)([.,<)]|$| +) *([a-z,A-Z]*) *(damage|points)?/, \"g\");\n  text = text.replace(damageRegex, diceRollMatcher);\n\n  // const Regex\n  // to hit rolls\n  const toHitRegex = new RegExp(/ ([+-]) *(\\d+) to hit/, \"g\");\n  text = text.replace(toHitRegex, \" [[/r 1d20 $1 $2]] to hit\");\n  return text;\n}\n\nfunction findDiceColumns(table) {\n  let result = [];\n  if (table.tHead) {\n    const headings = getHeadings(table);\n    headings.forEach((h) => {\n      const diceRegex = new RegExp(/(\\d*[d|D]\\d+(\\s*[+-]?\\s*\\d*)?)/, \"g\");\n      const match = h.replace(/[­––−-]/gu, \"-\").replace(/-+/g, \"-\").match(diceRegex);\n      if (match && !h.match(/lasts 1d10 minutes/i)) {\n        result.push(h);\n      }\n    });\n  }\n  return result;\n}\n\nfunction guessTableName(parentName, htmlDocument, tableNum) {\n  const element = htmlDocument.querySelectorAll('table');\n  let track = element[tableNum];\n  let sibling = track.previousElementSibling;\n\n  while (!sibling && track.parentElement?.nodeName === \"DIV\") {\n    if (!track.parentElement.previousElementSibling) {\n      track = track.parentElement;\n    } else {\n      sibling = track.parentElement.previousElementSibling;\n    }\n  }\n\n  if (sibling) {\n    return sibling.textContent.split(\".\")[0];\n  } else {\n    logger.warn(`No table name identified for ${parentName}`);\n    return \"\";\n  }\n}\n\n\nfunction tableReplacer(htmlDocument, tableNum, compendiumTables, compendiumLabel) {\n  // future enhancement - replace liks to DDB spells, monsters, items etc to munched compendium\n  const element = htmlDocument.querySelectorAll('table');\n  const tablePoint = element[tableNum];\n\n  if (tablePoint) {\n    compendiumTables.slice().reverse().forEach((table) => {\n      const link = table.uuid\n        ? `@UUID[${table.uuid}]`\n        : `@Compendium[${compendiumLabel}.${table.name}]`;\n      tablePoint.insertAdjacentHTML(\"afterend\", `<div id=\"table-link\">${link}{Open RollTable ${table.name}}</div>`);\n    });\n  }\n\n  return htmlDocument;\n}\n\n\nfunction diceInt(text) {\n  if (text === \"0\") return 10;\n  if (text === \"00\") return 100;\n  return parseInt(text);\n}\n\n/**\n * This could be:\n * a single value e.g. 19\n * a range of values 19-20\n * remaining values 19+\n * @param {*} value\n * @returns array of range\n */\nfunction getDiceTableRange(value) {\n  const document = utils.htmlToDoc(value);\n  const text = document.body.textContent.replace(/[­––−-]/gu, \"-\").replace(/-+/g, \"-\").replace(/\\s/g, \"\").trim();\n  // eslint-disable-next-line no-useless-escape\n  const valueRegex = new RegExp(/^(\\d+)\\-(\\d+)|^(\\d+)(\\+?)$/);\n  const valueMatch = text.match(valueRegex);\n\n  if (valueMatch) {\n    if (valueMatch[1] !== undefined && valueMatch[2] !== undefined) {\n      const low = diceInt(valueMatch[1]);\n      const high = diceInt(valueMatch[2]);\n      return [low, high];\n    }\n\n    if (valueMatch[3]) {\n      if (valueMatch[4] !== undefined && valueMatch[4] === \"+\") {\n        const low = diceInt(valueMatch[3]);\n        return [low, 0];\n      }\n      if (valueMatch[4] !== undefined && valueMatch[4] === \"\") {\n        const low = diceInt(valueMatch[3]);\n        return [low, low];\n      }\n    }\n  }\n\n  // logger.debug(`Dice range: Unable to table range match '${value}' text was '${text}'`);\n  return [];\n}\n\n\nfunction buildTable({ parsedTable, keys, diceKeys, tableName, parentName, html } = {}) {\n  let generatedTables = [];\n\n  diceKeys.forEach((diceKey) => {\n    const nameExtension = diceKeys > 1 ? ` [${diceKeys}]` : \"\";\n    const realName = ((tableName && tableName !== \"\") ? tableName : \"Unnamed Table\") + nameExtension;\n    logger.debug(`Generating table ${realName}`);\n\n    const diceRegex = new RegExp(/(\\d*d\\d+(\\s*[+-]?\\s*\\d*d*\\d*)?)/, \"g\");\n    const formulaMatch = diceKey.match(diceRegex);\n\n    const spellCastingAttackRegex = new RegExp(/make a spell attack roll/ig);\n    const spellCastingAttackMatch = diceKey.includes(\"d20\") && spellCastingAttackRegex.test(html);\n\n    let table = {\n      \"name\": realName,\n      \"sort\": 100000,\n      \"flags\": {\n        \"ddbimporter\": {\n          \"parentName\": parentName,\n          \"keys\": keys,\n          \"diceKeys\": diceKeys\n        }\n      },\n      \"img\": \"icons/svg/d20-grey.svg\",\n      \"description\": \"\",\n      \"results\": [],\n      \"formula\": formulaMatch\n        ? spellCastingAttackMatch\n          ? \"1d20 + @prof + @attributes.spellmod\"\n          : formulaMatch[0].trim()\n        : \"\",\n      \"replacement\": true,\n      \"displayRoll\": true,\n    };\n\n    const concatKeys = (keys.length - diceKeys.length) > 1;\n    // loop through rows and build result entry.\n    // if more than one result key then we will concat the results.\n    parsedTable.forEach((entry) => {\n      const result = {\n        flags: {},\n        type: 0,\n        text: \"\",\n        img: \"icons/svg/d20-black.svg\",\n        resultId: null,\n        weight: 1,\n        range: [],\n        drawn: false,\n        resultCollection: \"\",\n      };\n      Object.entries(entry).forEach(([key, value]) => {\n        if (key === diceKey) {\n          result.range = getDiceTableRange(value);\n        } else if (diceKeys.includes(key)) return;\n        if (concatKeys) {\n          if (result.text != \"\") result.text += \"\\n\\n\";\n          result.text += `<b>${key}</b>${value}`;\n        } else {\n          result.text = value;\n        }\n      });\n      result.text = replaceRollLinks(result.text);\n      const diceRollerRegexp = new RegExp(/\\[\\[\\/r\\s*([0-9d+-\\s]*)(:?#.*)?\\]\\]/);\n      result.text = result.text.replace(diceRollerRegexp, \"[[$1]] ($&)\");\n      table.results.push(result);\n    });\n\n    if (table.results.some((r, i, a) => {\n      const low = r.range[0];\n      const high = r.range[1];\n      if (low > high) {\n        // console.warn(`Low ${low} is greater than high ${high}`, {\n        //   low,\n        //   high,\n        //   a,\n        //   length: a.length,\n        //   i,\n        // });\n        if (high === 0 && i === (a.length - 1)) {\n          r.range[1] += 100;\n          a[i] = r;\n        } else {\n          return true;\n        }\n      }\n      return false;\n    })) {\n      return;\n    }\n    generatedTables.push(table);\n\n  });\n\n  logger.debug(`Generated Tables for ${tableName}`, generatedTables);\n\n  return generatedTables;\n}\n\n\nasync function buildAndImportTable({ parsedTable, keys, diceKeys, finalName, name, updateExisting, html } = {}) {\n  const data = buildTable({ parsedTable, keys, diceKeys, tableName: finalName, parentName: name, html });\n  const handlerOptions = { srdFidding: false, updateIcons: false };\n  const handler = await DDBItemImporter.buildHandler(\"tables\", data, updateExisting, handlerOptions);\n  return handler.results;\n}\n\nexport async function generateTable(parentName, html, updateExisting, type = \"\") {\n  let name = `${parentName}`;\n  const document = utils.htmlToDoc(html);\n  const tableNodes = document.querySelectorAll(\"table\");\n  let tablesMatched = [];\n  let updatedDocument = utils.htmlToDoc(html);\n  if (type === \"background\" && !name.startsWith(\"Background:\")) {\n    name = `Background: ${name}`;\n  }\n  if (name.startsWith(\"Background:\")) {\n    const namesArray = name.split(\":\");\n    // if (parentNamesArray.length > 2) parentNamesArray.pop();\n    name = namesArray.join(\":\");\n  }\n\n  const tableCompendiumLabel = CompendiumHelper.getCompendiumLabel(\"tables\");\n  let tableNum = 0;\n  let foundTables = [];\n  for (const node of tableNodes) {\n    const parsedTable = parseTable(node);\n    const keys = getHeadings(node);\n    const diceKeys = findDiceColumns(node);\n    let nameGuess = guessTableName(name, document, tableNum);\n    if (nameGuess.split(\" \").length > 5 && diceKeys.length === 1 && keys.length === 2) {\n      nameGuess = keys[1];\n    } else if (nameGuess.trim() === \"\") {\n      nameGuess = keys[1];\n    }\n    const finalName = `${name}: ${nameGuess}`;\n    const tableGenerated = await CompendiumHelper.queryCompendiumEntry(tableCompendiumLabel, finalName, true);\n\n    logger.debug(`Table detection triggered for ${name} (parentName: ${parentName})!`, {\n      finalName,\n      diceKeys,\n      keys,\n      node,\n      html,\n      parsedTable,\n      foundTables,\n      nameGuess,\n      tableGenerated,\n    });\n\n    try {\n      const builtTables = tableGenerated\n        ? [tableGenerated]\n        : await buildAndImportTable({ parsedTable, keys, diceKeys, finalName, name, updateExisting, html });\n\n      if (builtTables.length > 0) {\n        let tableData = {\n          nameGuess,\n          finalName,\n          parentName,\n          name,\n          tableNum,\n          uuids: builtTables.map((t) => t.uuid),\n          length: parsedTable.length,\n          keys: keys,\n          diceKeys: diceKeys,\n          diceTable: diceKeys.length > 0,\n          multiDiceKeys: diceKeys.length > 1,\n          diceKeysNumber: diceKeys.length,\n          totalKeys: keys.length,\n          builtTables: builtTables.map((t) => t.toObject()),\n        };\n        tablesMatched.push(tableData);\n        updatedDocument = tableReplacer(updatedDocument, tableNum, builtTables, tableCompendiumLabel);\n      }\n    } catch (error) {\n      logger.error(\"Table parser failed, please log a bug!\", error);\n    }\n    tableNum++;\n  }\n\n  return updatedDocument.body.innerHTML;\n}\n","import utils from \"./utils.js\";\nimport DDBHelper from \"./DDBHelper.js\";\nimport logger from \"../logger.js\";\nimport { parseTags } from './DDBReferenceLinker.js';\n\n\nfunction evaluateMath(obj) {\n  // eslint-disable-next-line no-new-func\n  return Function('\"use strict\";return ' + obj.replace(/\\+\\s*\\+/g, \"+\"))();\n}\n\n\n/**\n * Parse a match and replace template values ready for evaluation\n * @param {*} ddb\n * @param {*} character\n * @param {*} match\n * @param {*} feature\n */\n// eslint-disable-next-line complexity\nfunction parseMatch(ddb, character, match, feature) {\n  const featureDef = feature.definition ?? feature;\n  const splitMatchAt = match.split(\"@\");\n  let result = splitMatchAt[0];\n  const classOption = [ddb.character.options.race, ddb.character.options.class, ddb.character.options.feat]\n    .flat()\n    .find((option) => option.definition.id === featureDef.componentId);\n  let linktext = `${result}`;\n\n  // scalevalue\n  if (result.includes(\"scalevalue\")) {\n    let scaleValue = DDBHelper.getScaleValueString(ddb, feature);\n    // if (scaleValue.value.startsWith(\"@\")) scaleValue.value = `[[${scaleValue.value}]]{${scaleValue.name}}`;\n    if (scaleValue && scaleValue.value) {\n      result = result.replace(\"scalevalue\", scaleValue.value);\n      linktext = result.replace(\"scalevalue\", \" (Scaled Value) \");\n    } else {\n      logger.warn(\"Unable to parse scalevalue\", {\n        ddb,\n        feature: featureDef,\n        scaleValue,\n      });\n    }\n  }\n\n  // savedc:int\n  // savedc:str,dex\n  if (result.includes(\"savedc\")) {\n    const regexp = /savedc:([a-z]{3})(?:,)?([a-z]{3})?/g;\n    const matches = [...result.matchAll(regexp)];\n\n    matches.forEach((match) => {\n      const saves = match.slice(1);\n      const saveDCs = saves\n        .filter((save) => save)\n        .map((save) => {\n          return `8 + @abilities.${save}.mod + @prof`;\n        });\n      const saveRegexp = RegExp(match[0], \"g\");\n      if (saveDCs.length > 1) {\n        result = result.replace(saveRegexp, `max(${saveDCs.join(\", \")})`);\n      } else {\n        result = result.replace(saveRegexp, saveDCs[0]);\n      }\n\n      linktext = result.replace(saveRegexp, \" (Save DC) \");\n    });\n  }\n\n  // modifier:int@min:1\n  // (modifier:cha)+1\n  if (result.includes(\"modifier\")) {\n    const regexp = /modifier:([a-z]{3})(?:,)?([a-z]{3})?/g;\n    // creates array from match groups and dedups\n    // const ability = [...new Set(Array.from(result.matchAll(regexp), (m) => m[1]))];\n    const matches = [...result.matchAll(regexp)];\n\n    matches.forEach((match) => {\n      const mods = match.slice(1);\n      const modValues = mods\n        .filter((mod) => mod)\n        .map((ab) => {\n          return ` + @abilities.${ab}.mod`;\n        });\n      const abRegexp = RegExp(match[0], \"g\");\n      if (modValues.length > 1) {\n        result = result.replace(abRegexp, `max(${modValues.join(\", \")})`);\n        linktext = result.replace(abRegexp, \" (Modifier) \");\n      } else {\n        result = result.replace(abRegexp, modValues[0]);\n        linktext = result.replace(abRegexp, ` (${utils.capitalize(modValues[0])} Modifier) `);\n      }\n\n    });\n  }\n\n  // classlevel*5\n  // (classlevel/2)@roundup\n  if (result.includes(\"classlevel\")) {\n    const cls = featureDef.classId\n      ? ddb.character.classes.find((cls) =>\n        cls.definition.id == featureDef.classId\n        || featureDef.classId === cls.subclassDefinition?.id\n      )\n      : DDBHelper.findClassByFeatureId(ddb, featureDef.componentId);\n\n    if (cls) {\n      const clsLevel = ` + @classes.${cls.definition.name.toLowerCase().replace(\" \", \"-\")}.levels`;\n      result = result.replace(\"classlevel\", clsLevel);\n      linktext = result.replace(\"classlevel\", ` (${cls.definition.name} Level) `);\n    } else if (classOption) {\n      // still not found a cls? could be an option\n      const optionCls = DDBHelper.findClassByFeatureId(ddb, classOption.componentId);\n      if (optionCls) {\n        const clsLevel = ` + @classes.${optionCls.definition.name.toLowerCase().replace(\" \", \"-\")}.levels`;\n        result = result.replace(\"classlevel\", clsLevel);\n        linktext = result.replace(\"classlevel\", ` (${optionCls.definition.name} Level) `);\n      } else {\n        logger.error(\n          `Unable to parse option class info. classOption ComponentId is: ${classOption.componentId}.  ComponentId is ${featureDef.componentId}`\n        );\n      }\n    } else {\n      if (!featureDef.componentId) {\n        logger.debug(\"Feature failed componentID parse\", featureDef);\n      }\n      logger.error(`Unable to parse option class info. ComponentId is ${featureDef.componentId}`);\n    }\n  }\n\n  if (result.includes(\"characterlevel\")) {\n    result = result.replace(\"characterlevel\", \" + @details.level\");\n    linktext = result.replace(\"characterlevel\", ` (Character Level) `);\n  }\n\n  if (result.includes(\"proficiency\")) {\n    result = result.replace(\"proficiency\", \" + @prof\");\n    linktext = result.replace(\"proficiency\", ` (Proficiency Bonus) `);\n  }\n\n  // abilityscore:int\n  if (result.includes(\"spellattack\")) {\n    const regexp = /spellattack:([a-z]{3})/g;\n    // creates array from match groups and dedups\n    const ability = [...new Set(Array.from(result.matchAll(regexp), (m) => m[1]))];\n\n    ability.forEach((ab) => {\n      const abRegexp = RegExp(`spellattack:${ab}`, \"g\");\n      result = result.replace(abRegexp, ` + @abilities.${ab}.mod + @prof + @bonus.rsak.attack`);\n      linktext = result.replace(abRegexp, ` (${utils.capitalize(ab)} Spell Attack) `);\n    });\n  }\n\n  // abilityscore:int\n  if (result.includes(\"abilityscore\")) {\n    const regexp = /abilityscore:([a-z]{3})/g;\n    // creates array from match groups and dedups\n    const ability = [...new Set(Array.from(result.matchAll(regexp), (m) => m[1]))];\n\n    ability.forEach((ab) => {\n      const abRegexp = RegExp(`abilityscore:${ab}`, \"g\");\n      result = result.replace(abRegexp, ` + @abilities.${ab}.value`);\n      linktext = result.replace(abRegexp, ` (${utils.capitalize(ab)} Score) `);\n    });\n  }\n\n  // limiteduse\n  if (result.includes(\"limiteduse\")) {\n    const limitedUse = featureDef.limitedUse?.maxUses || \"\";\n    result = result.replace(\"limiteduse\", limitedUse);\n    linktext = result.replace(\"limiteduse\", ` (Has limited uses) `);\n  }\n\n  if (result.includes(\"fixedvalue:\")) {\n    const fvRegexp = /fixedvalue:(\\d+)/g;\n    result = result.replace(fvRegexp, \"$1\");\n    linktext = result.replace(fvRegexp, \"\");\n  }\n\n  return {\n    parsed: result,\n    linktext,\n  };\n}\n\n/**\n * Apply the expression constraint\n * @param {*} value\n * @param {*} constraint\n */\nconst applyConstraint = (value, constraint) => {\n  // {{(classlevel/2)@rounddown#unsigned}}\n  // @ features\n  // @roundup\n  // @roundown\n  // min:1\n  // max:3\n  const splitConstraint = constraint.split(\":\");\n  const multiConstraint = splitConstraint[0].split(\"*\");\n  const match = multiConstraint[0];\n\n  let result = value;\n\n  switch (match) {\n    case \"max\": {\n      result = Math.min(splitConstraint[1], result);\n      break;\n    }\n    case \"min\": {\n      result = Math.max(splitConstraint[1], result);\n      break;\n    }\n    case \"roundup\": {\n      result = Math.ceil(result);\n      break;\n    }\n    case \"rounddown\":\n    case \"roundown\": {\n      result = Math.floor(result);\n      break;\n    }\n    default: {\n      logger.debug(`Missed match is ${match}`);\n      logger.warn(`ddb-importer does not know about template constraint {{@${constraint}}}. Please log a bug.`, { value, constraint });\n    }\n  }\n\n  if (multiConstraint.length > 1) {\n    const evalStatement = `${result}*${multiConstraint[1]}`;\n    result = evaluateMath(evalStatement.replace(\")\", \"\"));\n  }\n\n  if (match == \"unsigned\") {\n    result = `${result}`.trim().replace(/^\\+\\s*/, \"\");\n  } else if (match == \"signed\") {\n    if (!`${result}`.trim().startsWith(\"+\") && !`${result}`.trim().startsWith(\"-\")) {\n      result = `+ ${result}`;\n    }\n  }\n\n  return result;\n};\n\n\n/**\n * Apply the expression constraint\n * @param {*} result\n * @param {*} constraint\n */\nconst addConstraintEvaluations = (value, constraintList) => {\n  let result = `${value}`;\n\n  // {{@rounddown,max:9}}\n  // {{(classlevel/2)@rounddown#unsigned}}\n  // @ features\n  // @roundup\n  // @roundown\n  // min:1\n  // max:3\n  constraintList.split(\",\").forEach((constraint) => {\n    const splitConstraint = constraint.split(\":\");\n    const multiConstraint = splitConstraint[0].split(\"*\");\n    const match = multiConstraint[0];\n\n    switch (match) {\n      case \"max\": {\n        result = `min(${result}, ${splitConstraint[1]})`;\n        break;\n      }\n      case \"min\": {\n        result = `max(${result}, ${splitConstraint[1]})`;\n        break;\n      }\n      case \"roundup\": {\n        result = `ceil(${result})`;\n        break;\n      }\n      case \"rounddown\":\n      case \"roundown\": {\n        result = `floor(${result})`;\n        break;\n      }\n      default: {\n        logger.debug(`Missed match is ${match}`);\n        logger.warn(`ddb-importer does not know about template constraint {{@${constraint}}}. Please log a bug.`, { value, constraint });\n      }\n    }\n\n    if (multiConstraint.length > 1) {\n      result = `${result}*${multiConstraint[1].replace(\")\", \"\")}`;\n    }\n  });\n\n  if (typeof result === 'string') result = result.trim().replace(/^\\+\\s*/, \"\");\n\n  return result;\n};\n\nconst escapeRegExp = (string) => {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n};\n\nconst getNumber = (theNumber, signed) => {\n  if (signed == \"unsigned\") {\n    theNumber = `${theNumber}`.trim().replace(/^\\+\\s*/, \"\");\n  } else if (signed == \"signed\" && !`${theNumber}`.trim().startsWith(\"+\") && !`${theNumber}`.trim().startsWith(\"-\")) {\n    theNumber = `+ ${theNumber}`;\n  }\n\n  return theNumber.toString();\n};\n\n\n/**\n * Replaces the matched string with the appropriate value or format, based on the value of p2.\n *\n * @param {string} match - the matched string\n * @param {string} p1 - the first capturing group\n * @param {string} p2 - the second capturing group\n * @return {string} the replaced or formatted string\n */\nfunction replaceRoll(match, p1, p2) {\n  if (!p2) {\n    logger.warn(`Unable to roll parse ${match}`);\n    return match;\n  }\n  const isRollRegex = /([0-9]*d[0-9]+)|(@scale\\.)/g;\n  const isRollMatches = p2.match(isRollRegex);\n  if (isRollMatches) {\n    return match;\n  } else if (Number.isInteger(parseInt(p2))) {\n    return p2;\n  } else {\n    const prefix = p2.trim().startsWith(\"+\") ? \"+ \" : \"\";\n    return `${prefix}[[${p2}]]`;\n  }\n}\n\n/**\n * Fix rollables in the given text by replacing them with the correct syntax.\n *\n * @param {string} text - The input text to be fixed.\n * @return {string} The text with corrected rollables.\n */\nfunction fixRollables(text) {\n  const diceMatchRegex = /(?:<strong>)?\\+*\\s*(\\d*d\\d\\d*\\s*\\+*)\\s*(?:<\\/strong>)?\\+*\\s*\\[\\[(\\/roll)?/g;\n  const matches = text.match(diceMatchRegex);\n  if (matches) {\n    const replaceString = matches[2] ? \"[[ $1 + \" : \"[[/roll $1 + \";\n    text = text.replaceAll(diceMatchRegex, replaceString);\n  }\n\n  const noRollRegex = /(\\[\\[\\/roll)([\\w\\s.,@\\d+-\\\\*/()]*(?![0-9]*d[0-9]+)(?!@scale\\.)[\\w\\s.,@\\d-+\\\\*/()]*)(\\]\\])/g;\n  // const noRollMatches = text.match(noRollRegex);\n  // console.warn(\"noRollMatches\", {text: foundry.utils.duplicate(text), noRollMatches});\n  text = text.replaceAll(noRollRegex, replaceRoll);\n\n  return text;\n}\n\n/**\n * Replaces occurrences of matchString in the text with a roll command where appropriate\n *\n * @param {string} text - the input text\n * @param {string} matchString - the string to match and replace\n * @return {string} the text with replacements\n */\nfunction rollMatch(text, matchString) {\n  const rollMatch = new RegExp(`(?:^|[ \"'(+>])(\\\\d*d\\\\d\\\\d*\\\\s)({{${matchString}}})(?:$|[., \"')+<])`, \"g\");\n  return text.replace(rollMatch, (m) => `[[/roll ${m[1] !== undefined ? m[1] : \"\"}${m[2]}]`);\n}\n\n/**\n * This will parse a snippet/description with template boilerplate in from DDB.\n * e.g. Each creature in the area must make a DC {{savedc:con}} saving throw.\n * @param {object} ddb - The ddb object.\n * @param {object} character - The character object.\n * @param {string} text - The template string to parse.\n * @param {object} feature - The feature object.\n * @return {object} - The parsed template string result object.\n */\nexport default function parseTemplateString(ddb, character, text, feature) {\n  if (!text) return text;\n  const featureDefinition = feature.definition ?? feature;\n\n  text = text.replace(/\\r\\n•/g, \"</p>\\r\\n<p>&bull;\");\n  let result = {\n    id: featureDefinition.id,\n    entityTypeId: featureDefinition.entityTypeId,\n    componentId: featureDefinition.componentId ? featureDefinition.componentId : null,\n    componentTypeId: featureDefinition.componentTypeId ? featureDefinition.componentTypeId : null,\n    damageTypeId: featureDefinition.damageTypeId ? featureDefinition.damageTypeId : null,\n    text,\n    resultStrings: [],\n    displayStrings: [],\n    definitions: [],\n  };\n\n  const regexp = /{{(.*?)}}/g;\n  // creates array from match groups and dedups\n  const matches = [...new Set(Array.from(result.text.matchAll(regexp), (m) => m[1]))];\n\n  // eslint-disable-next-line complexity\n  matches.forEach((match) => {\n    let entry = {\n      parsed: null,\n      match,\n      replacePattern: new RegExp(`{{${escapeRegExp(match)}}}`, \"g\"),\n      rollMatch: new RegExp(`(?:^|[ \"'(+>])(\\\\d*d\\\\d\\\\d*\\\\s)({{${match}}})(?:$|[., \"')+<])`, \"g\"),\n      rollMatchTest: false,\n      type: null,\n      subType: null,\n    };\n\n    entry.rollMatchTest = entry.rollMatch.test(result.text);\n\n    // console.warn(\"parseTemplateString\", { text: foundry.utils.duplicate(text), feature, entry, match, result });\n\n    const splitSignedBase = match.split(\"#\");\n    const splitSigned = splitSignedBase.length > 1 && [\"signed\", \"unsigned\"].includes(splitSignedBase[1])\n      ? splitSignedBase\n      : !match.includes(\"@\")\n        ? [match.replace(\"#\", \"@\")]\n        : splitSignedBase;\n    const splitRemoveUnsigned = splitSigned[0];\n    const signed = splitSigned.length > 1\n      ? splitSigned[1]\n      : match.includes(\"modifier\")\n        ? \"signed\"\n        : null;\n    const splitMatchAt = splitRemoveUnsigned.split(\"@\");\n\n    // console.warn(\"splitMatchAt\", { splitMatchAt, splitRemoveUnsigned, signed, splitSigned, splitSignedBase, match });\n\n    const parsedMatchData = parseMatch(ddb, character, splitRemoveUnsigned, feature);\n    const parsedMatch = parsedMatchData.parsed;\n    result.displayStrings.push(parsedMatchData);\n    const dicePattern = /\\d*d\\d\\d*/;\n    const typeSplit = splitMatchAt[0].split(\":\");\n    entry.type = typeSplit[0];\n\n    if (typeSplit.length > 1) entry.subType = typeSplit[1];\n    // do we have a dice string, e.g. sneak attack?\n    if (parsedMatch.match(dicePattern) || parsedMatch.includes(\"@scale\")) {\n      if (parsedMatch.match(dicePattern)) entry.type = \"dice\";\n      entry.parsed = parsedMatch;\n      if (splitMatchAt.length > 1) {\n        for (let i = 1; i < splitMatchAt.length; i++) {\n          if (splitMatchAt[i].includes(\")\")) entry.parsed = entry.parsed.replace(\"(\", \"\");\n          entry.parsed = addConstraintEvaluations(entry.parsed, splitMatchAt[i]);\n        }\n      }\n      // console.warn(\"entry\", {\n      //   entry,\n      //   replacePattern: entry.replacePattern.test(result.text),\n      //   match: entry.rollMatch.test(result.text),\n      // });\n      if (entry.rollMatchTest) {\n        entry.parsed = rollMatch(text, entry.parsed);\n      } else {\n        entry.parsed = `[[/roll ${entry.parsed}]]`;\n      }\n\n      result.text = result.text.replace(entry.replacePattern, entry.parsed);\n    } else {\n      // we try and eval the expression!\n      try {\n        const openExpression = (parsedMatch.match(/\\(/g) || []).length;\n        const closeExpression = (parsedMatch.match(/\\)/g) || []).length;\n\n        let evalString = parsedMatch;\n        if (openExpression != closeExpression) {\n          for (let i = 0; i < openExpression - closeExpression; i++) {\n            evalString = evalString.replace(\"(\", \"\").trim();\n          }\n        }\n\n        for (let start = evalString.startsWith(\"(\"), end = evalString.endsWith(\")\"); start && end; start = evalString.startsWith(\"(\"), end = evalString.endsWith(\")\")) {\n          evalString = evalString.replace(/^\\(/, \"\").replace(/\\)$/, \"\");\n        }\n        entry.evalString = evalString;\n        // console.warn(\"evalString\", {\n        //   evalString,\n        //   splitMatchAt,\n        // });\n        if (splitMatchAt.length > 1) {\n          let evalConstraint = `${evalString}`;\n          for (let i = 1; i < splitMatchAt.length; i++) {\n            // console.warn(`splitMatch ${i}`, {\n            //   evalConstraintPre: `${evalConstraint}`,\n            //   matchat: splitMatchAt[i],\n            //   isInt: Number.isInteger(Number.parseInt(evalConstraint)),\n            // });\n            evalConstraint = Number.isInteger(Number.parseInt(evalConstraint)) && !evalConstraint.includes(\"@\")\n              ? applyConstraint(evalConstraint, splitMatchAt[i])\n              : addConstraintEvaluations(evalConstraint, splitMatchAt[i]);\n            // console.warn(`evalConstraint ${i} post`, `${evalConstraint}`);\n          }\n          // console.warn(\"evalConstraint\", evalConstraint);\n          entry.evalConstraint = evalConstraint;\n          entry.parsed = getNumber(evalConstraint, signed);\n        } else {\n          entry.parsed = getNumber(`${evalString}`, signed);\n        }\n        entry.parsed = entry.parsed\n          .replaceAll(\"+ +\", \"+\")\n          .replaceAll(\"++\", \"+\")\n          .replaceAll(\"* +\", \"*\")\n          .replaceAll(\":\", \"\");\n        const isRoll = entry.rollMatchTest;\n        // there are some edge cases here where some template string matches do not get the correct [[]] boxes because\n        // they are not all [[/roll ]] boxes\n        // I need to move the [[]] box addition to outside this process loop\n        if (!isRoll && (/^\\+\\s/).test(entry.parsed.trim())) {\n          entry.parsed = `${entry.parsed.trim().replace(/^\\+\\s/, \"+ [[\")}]]`;\n        } else if (!isRoll && [undefined, null, \"unsigned\"].includes(signed)) {\n          entry.parsed = `[[${entry.parsed.trim()}]]`;\n        } else {\n          if (entry.rollMatchTest) {\n            entry.parsed = rollMatch(text, entry.parsed);\n          } else {\n            entry.parsed = `[[${entry.parsed}]]`;\n          }\n          logger.debug(\"template string odd match\", {\n            result,\n            entry,\n            signed,\n            isRoll,\n          });\n        }\n        result.text = result.text.replace(entry.replacePattern, entry.parsed);\n      } catch (err) {\n        result.text = result.text.replace(entry.replacePattern, `{{${match}}}`);\n        logger.warn(`ddb-importer does not know about template value {{${match}}}. Please log a bug.`, err);\n        logger.warn(err.stack);\n      }\n    }\n    if (entry.parsed && !entry.parsed.includes(\"NaN\")) result.resultStrings.push(entry.parsed);\n    result.definitions.push(entry);\n  });\n\n  result.text = fixRollables(result.text);\n  result.text = result.text.replace(/\\+\\s*\\+/g, \"+\").replace(/\\+\\s*\\+/g, \"+\");\n  result.text = result.text.replace(/\\+<\\/strong>\\+/g, \"+</strong>\");\n\n  result.text = parseTags(result.text);\n  if (foundry.utils.hasProperty(character, \"flags.ddbimporter.dndbeyond.templateStrings\")) {\n    character.flags.ddbimporter.dndbeyond.templateStrings.push(result);\n  }\n\n  // console.warn(`${feature.name} tempalte`, result);\n  return result;\n}\n","import utils from \"./utils.js\";\n\nclass AdvancedDialog {\n\n  /**\n   * A class that constructs a chooser dialog with the given prompt information and buttons.\n   *\n   * @param {Array} inputs - An array of input fields for the dialog.\n   *   @param {string} input.label - The label of the input field.\n   *   @param {string} input.type - The type of the input field.\n   *   @param {Array} input.options - The options of the input field. This varies depending on the type, see notes below.\n   * @param {Array} buttons - An array of buttons for the dialog.\n   *   @param {string} button.label - The label of the button.\n   *   @param {string} button.value - The value associated with the button.\n   *   @param {function} button.callback - The (optional) callback function for the button.\n   * @param {object} config - The configuration object for the dialog.\n   *   @param {string} config.title - The title of the dialog.\n   *   @param {string} config.defaultButton - The default button label.\n   *   @param {function} config.close - The callback function for closing the dialog.\n   *   @param {object} config.options - Additional options for the foundry Dialog.\n   *   @param {function} config.render - Optional function to pass to render call for Dialog.\n   */\n  constructor(inputs = [], buttons = [], // prompt information\n    { title = \"\", defaultButton = \"OK\", close = (resolve) => resolve({ success: false }), options = {}, render = null } = {}, // dialog config\n  ) {\n    this.inputs = inputs;\n    this.buttons = buttons;\n    this.dialog = null;\n\n    this.config = {\n      title,\n      defaultButtonLabel: defaultButton,\n      close,\n      options,\n      render,\n      classes: [\"dialog\", \"ddb-advanced-dialog\"],\n    };\n  }\n\n  /**\n   * Generates the table header label HTML element with the specified ID and label text.\n   *\n   * @param {type} id - The ID of the input element associated with the label.\n   * @param {type} label - The text to be displayed as the label.\n   * @return {string} The generated HTML for the table header label.\n   */\n  static _generateTableHeaderLabel(id, label) {\n    return `<th><label for=\"ddb-${id}\">${label}</label></th>`;\n  }\n\n  /**\n   * Generates the HTML stub for a selection element based on the given type, label, options, and index.\n   *\n   * @param {string} type - The type of the selection element.\n   * @param {string} label - The label of the selection element.\n   * @param {array} options - The options for the selection element.\n   * @param {number} idx - The index of the selection element.\n   * @return {string} The HTML stub for the selection element.\n   */\n  static _generateSelectionHtmlStub(type, label, options, idx) {\n    const thLabel = AdvancedDialog._generateTableHeaderLabel(idx, label);\n    switch (type.toLowerCase()) {\n      case \"button\":\n        return \"\";\n      case \"checkbox\": {\n        const checked = options?.checked ? \"checked\" : \"\";\n        return `${thLabel}<td><input type=\"${type}\" id=\"ddb-${idx}\" ${checked} value=\"${idx}\"/></td>`;\n      }\n      case \"label\":\n        return `<td class=\"colspan2\">${label}</td>`;\n      case \"radio\": {\n        const checked = options?.checked ? \"checked\" : \"\";\n        const group = options?.group ?? \"radio\";\n        return `${thLabel}<td><input type=\"${type}\" id=\"ddb-${idx}\" ${checked} value=\"${idx}\" name=\"${group}\"/></td>`;\n      }\n      case \"select\": {\n        const optionString = options\n          .map((entry, idx) => {\n            const selected = entry.selected ? \"selected\" : \"\";\n            return `<option value=\"${idx}\" ${selected}>${entry.label}</option>`;\n          })\n          .join(\"\\n\");\n        return `${thLabel}<td><select id=\"ddb-${idx}\">${optionString}</select></td>`;\n      }\n      case \"number\": {\n        let value = \"\";\n        if (utils.isObject(options)) {\n          const values = [];\n          for (const [key, v] of Object.entries(options)) {\n            const stringValue = `${v}`.trim();\n            values.push(`${key}=\"${stringValue}\"`);\n          }\n          value = values.join(\" \");\n        } else if (Array.isArray(options)) {\n          const values = [];\n          for (const option of options) {\n            values.push(`${option.key}=\"${option.value}\"`);\n          }\n          value = values.join(\" \");\n        } else if (utils.isString(options)) {\n          value = `value=\"${options}\"`;\n        } else {\n          value = `value=\"\"`;\n        }\n        return `${thLabel}</th><td><input type=\"${type}\" id=\"ddb-${idx}\" ${value}/></td>`;\n      }\n      default: {\n        const value = Array.isArray(options) ? options[0] : options;\n        return `${thLabel}</th><td><input type=\"${type}\" id=\"ddb-${idx}\" value=\"${value}\"/></td>`;\n      }\n    }\n  }\n\n\n  /**\n   * Generate the HTML for the selection table.\n   *\n   * @param {Array} data - An array of objects containing type, label, and options.\n   * @return {string} The generated HTML.\n   */\n  _generateSelectionHtml() {\n    return [\n      `<table class=\"ddb-selection-table\">`,\n      ...this.inputs.map(({ type, label, options }, id) => {\n        const rowContent = AdvancedDialog._generateSelectionHtmlStub(type, label, options, id);\n        return `<tr>${rowContent}</tr>`;\n      }),\n      `</table>`\n    ].join(`\\n`);\n  };\n\n\n  /**\n   * Parses the selection results based on the given inputs, HTML, and checked text.\n   *\n   * @param {HTMLElement} html - The HTML element to parse.\n   * @return {Array} The parsed selection results.\n   */\n  _parseSelectionResults(html) {\n    const results = this.inputs\n      .map((input, idx) => {\n        switch (input.type.toLowerCase()) {\n          case \"label\":\n            return null;\n          case \"radio\":\n          case \"checkbox\": {\n            return html.find(`input#ddb-${idx}`)[0].checked;\n          }\n          case \"number\":\n            return html.find(`input#ddb-${idx}`)[0].valueAsNumber;\n          case \"select\":\n            // the value is the index of the selected option\n            return input.options[html.find(`select#ddb-${idx}`).val()].value;\n          default:\n            return html.find(`input#ddb-${idx}`)[0].value;\n        }\n      });\n    return results;\n  }\n\n}\n\n\nexport class ChooserDialog extends AdvancedDialog {\n\n  /**\n   * Asynchronously waits for the dialog choices to be made or closed.\n   *\n   * @return {Promise} A promise that resolves when the action is completed.\n   * @example\n   *  let dialog = new DDBImporter.DialogHelper.ChooserDialog([{\n   *      label: 'Group 1 Radio Label 1',\n   *      type: 'radio',\n   *      options: {\n   *        group: 'group1',\n   *      },\n   *    }, {\n   *      label: 'Group 1 Radio Label 2',\n   *      type: 'radio',\n   *      options: {\n   *        group: 'group1',\n   *        checked: true,\n   *      },\n   *    },\n   *    {\n   *      label: 'Group 2 Radio Label 1',\n   *      type: 'radio',\n   *      options: {\n   *        group: 'group2',\n   *      },\n   *    },\n   *    {\n   *      label: 'Group 2 Radio Label 2',\n   *      type: 'radio',\n   *      options: {\n   *        group: 'group2',\n   *      },\n   *    },\n   *    {\n   *      label: 'Default Group Radio Label 1',\n   *      type: 'radio',\n   *    },\n   *    {\n   *      label: 'Default Group Radio Label 2',\n   *      type: 'radio',\n   *    },\n   *    {\n   *      label: 'Checkbox Label',\n   *      type: 'checkbox',\n   *      options: {\n   *        checked: true,\n   *      },\n   *    },{\n   *      type: 'select',\n   *      label: 'Select Dialog Label',\n   *      options: [\n   *          { label: 'String Option', value: \"option1\" },\n   *          { label: 'Map Option', value: { valuesCanBeObjects: true }, selected:true },\n   *          { label: 'Int Option', value: 3 },\n   *      ],\n   *    }],\n   *    [{\n   *      label: \"Yes\",\n   *      value: \"yes\",\n   *      callback: () => console.log(\"Yes was clicked\"),\n   *    }, {\n   *      label: \"No\",\n   *      value: \"no\"\n   *    }, {\n   *      label: \"<b>Callback Function</b>\",\n   *      value: \"html\",\n   *      default: true,\n   *      callback: (results) => {\n   *        console.warn(results);\n   *        results.extra =  {\n   *          a: 1,\n   *          b: 2,\n   *        };\n   *        console.log(\"Adding some extra data\");\n   *      },\n   *    }],\n   *    {\n   *     title: 'A wrapped choice dialog',\n   *      options: {\n   *        width: 450,\n   *      }\n   *    });\n   *\n   *  let result = await d.ask();\n   */\n  async ask() {\n    return new Promise((resolve) => {\n\n      const buttonObject = (this.buttons.length > 0)\n        ? this.buttons.reduce((o, button) => ({\n          ...o,\n          [button.label]: {\n            label: button.label,\n            callback: (html) => {\n              const results = {\n                button,\n                results: this._parseSelectionResults(html),\n                inputs: this.inputs,\n                success: true,\n              };\n              if (utils.isFunction(button.callback)) {\n                // button.callback(results, html).then(() => {\n                //   console.warn(\"Callbacj resykts\", results);\n                //   resolve(results);\n                // });\n                resolve(button.callback(results, html));\n              } else {\n                resolve(results);\n              }\n            },\n          }\n        }), {})\n        // inserts default button\n        : {\n          defaultButton: {\n            label: this.config.defaultButtonLabel,\n            callback: (html) =>\n              resolve({\n                button: { value: \"default\", label: this.config.defaultButtonLabel },\n                results: this._parseSelectionResults(html),\n                inputs: this.inputs,\n                success: true,\n              }),\n          }\n        };\n\n      this.dialog = new Dialog(\n        {\n          title: this.config.title,\n          content: this._generateSelectionHtml(),\n          default: this.buttons.find((b) => b.default)?.label ?? this.config.defaultButtonLabel,\n          close: (...abc) => this.config.close(resolve, ...abc),\n          buttons: buttonObject,\n          render: this.config.render,\n        },\n        {\n          classes: this.config.classes,\n          focus: true,\n          ...this.config.options\n        }\n      );\n      this.dialog.render(true);\n    });\n  }\n\n  static async Ask(...args) {\n    const dialog = new ChooserDialog(...args);\n    return dialog.ask();\n  }\n}\n","import { ChooserDialog } from \"./AdvancedDialog.js\";\n\nexport default class DialogHelper {\n\n  /**\n   * Generates a dialog with buttons and options in the specified direction.\n   *\n   * @param {Object} options - An object containing the dialog options.\n   *   @param {string} options.title - The title of the dialog.\n   *   @param {string} options.content - The content of the dialog.\n   *   @param {Array} options.buttons - An array of buttons for the dialog.\n   *     @param {Object} button - An object representing a button.\n   *       @param {string} button.label - The label of the button.\n   *       @param {string} button.value - The value associated with the button.\n   *   @param {Object} options.options - Additional options to pass to the dialog.\n   * @param {string} direction - The direction of the dialog buttons.\n   * @return {Promise} A promise that resolves with the button value or rejects with an error.\n   *\n   *     @example\n     const selected = await DDBImporter.EffectHelper.buttonDialog(\n       {\n        buttons: [{ label: \"Label1\", value: \"Value1\"}, {label: \"Label2\", value: \"Value2\" }],\n        title: \"A title\",\n        content: \"Some <b>bold</b> content\"\n      },\n      'row'\n     );\n     console.warn(`You selected ${selected}`);\n   */\n  static async buttonDialog({ title = \"\", content = \"\", buttons, options = { height: \"auto\" } } = {}, direction = \"row\") {\n\n    return new Promise((resolve) => {\n      new Dialog(\n        {\n          title,\n          content,\n          buttons: buttons.reduce((o, button) => ({\n            ...o,\n            [button.label]: { label: button.label, callback: () => resolve(button.value) }\n          }), {}),\n          close: () => resolve(this),\n        },\n        {\n          classes: [\"dialog\", `ddb-button-dialog-${direction}`],\n          ...options,\n        }\n      ).render(true);\n    });\n  }\n\n  static ChooserDialog = ChooserDialog;\n\n  static async AskUserButtonDialog(user, ...buttonArgs) {\n    return globalThis.DDBImporter.socket.executeAsUser(\"simpleButtonDialog\", user, ...buttonArgs);\n  }\n\n  static async AskUserChooserDialog(user, ...dialogArgs) {\n    return globalThis.DDBImporter.socket.executeAsUser(\"chooserDialog\", user, ...dialogArgs);\n  }\n}\n","/**\n * Game Settings: Directory\n */\n\nimport logger from \"../logger.js\";\nimport utils from \"./utils.js\";\n\nexport class DirectoryPicker extends FilePicker {\n  constructor(options = {}) {\n    super(options);\n  }\n\n  _onSubmit(event) {\n    event.preventDefault();\n    const path = event.target.target.value;\n    const activeSource = this.activeSource;\n    const bucket = this.sources.s3?.bucket && this.sources.s3.bucket !== \"\"\n      ? this.sources.s3.bucket\n      : null;\n\n    // console.warn(\"Clicked\", {\n    //   event,\n    //   bucket,\n    //   target: event.target.bucket,\n    //   targetTargget: event.target.target,\n    //   path,\n    //   pathv12,\n    //   currentTarget,\n    //   currentTargetValue: currentTarget.value,\n    //   activeSource,\n    //   thisBucket: this.sources.s3.bucket,\n    // })\n\n    this.field.value = DirectoryPicker.format({\n      activeSource,\n      bucket,\n      path,\n    });\n    this.close();\n  }\n\n  static async uploadToPath(path, file) {\n    const options = DirectoryPicker.parse(path);\n    return FilePicker.upload(options.activeSource, options.current, file, { bucket: options.bucket }, { notify: false });\n  }\n\n  // returns the type \"Directory\" for rendering the SettingsConfig\n  static Directory(val) {\n    return val;\n  }\n\n  // formats the data into a string for saving it as a GameSetting\n  static format(value) {\n    return value.bucket !== null && value.bucket !== \"\"\n      ? `[${value.activeSource}:${value.bucket}] ${value.path ?? value.current ?? \"\"}`\n      : `[${value.activeSource}] ${value.path ?? value.current ?? \"\"}`;\n  }\n\n  // parses the string back to something the FilePicker can understand as an option\n  static parse(str) {\n    let matches = str.match(/\\[(.+)\\]\\s*(.+)/);\n    if (matches) {\n      let source = matches[1];\n      const current = matches[2].trim();\n      const [s3, bucket] = source.split(\":\");\n      if (bucket !== undefined) {\n        return {\n          activeSource: s3,\n          bucket: bucket,\n          current: current,\n          fullPath: str,\n        };\n      } else {\n        return {\n          activeSource: s3,\n          bucket: null,\n          current: current,\n          fullPath: str,\n        };\n      }\n    }\n    // failsave, try it at least\n    return {\n      activeSource: \"data\",\n      bucket: null,\n      current: str,\n    };\n  }\n\n  // Adds a FilePicker-Simulator-Button next to the input fields\n  static processHtml(html) {\n    $(html)\n      .find(`input[data-dtype=\"Directory\"], .ddb-directory`)\n      .each((index, element) => {\n        // disable the input field raw editing\n        $(element).prop(\"readonly\", true);\n\n        // if there is no button next to this input element yet, we add it\n        if (!$(element).next().length) {\n          let picker = new DirectoryPicker({\n            field: $(element)[0],\n            ...DirectoryPicker.parse($(element).val()),\n          });\n          let pickerButton = $(\n            '<button type=\"button\" class=\"file-picker\" data-type=\"imagevideo\" data-target=\"img\" title=\"Pick directory\"><i class=\"fas fa-file-import fa-fw\"></i></button>'\n          );\n          pickerButton.on(\"click\", () => {\n            picker.render(true);\n          });\n          $(element).parent().append(pickerButton);\n        }\n      });\n  }\n\n  /** @override */\n  activateListeners(html) {\n    super.activateListeners(html);\n\n    // remove unnecessary elements\n    $(html).find(\"ol.files-list\").remove();\n    $(html).find(\"footer div\").remove();\n    $(html).find(\"footer button\").text(\"Select Directory\");\n  }\n\n  static async forgeCreateDirectory(target) {\n    if (!target) return undefined;\n    const response = await ForgeAPI.call('assets/new-folder', { path: target });\n    if (!response || response.error) {\n      throw new Error(response ? response.error : \"Unknown error while creating directory.\");\n    }\n    return response;\n  }\n\n  /**\n   * @param  {string} source\n   * @param  {string} target\n   * @param  {object} options={}\n   */\n  static async createDirectory(source, target, options = {}) {\n    if (!target) {\n      throw new Error(\"No directory name provided\");\n    }\n    if (typeof ForgeVTT !== \"undefined\" && ForgeVTT?.usingTheForge) {\n      return DirectoryPicker.forgeCreateDirectory(target);\n    }\n    return FilePicker.createDirectory(source, target, options);\n  }\n\n  /**\n   * Verifies server path exists, and if it doesn't creates it.\n   *\n   * @param  {object} parsedPath - output from DirectoryPicker,parse\n   * @param  {string} targetPath - if set will check this path, else check parsedPath.current\n   * @returns {boolean} - true if verfied, false if unable to create/verify\n   */\n  static async verifyPath(parsedPath, targetPath = null) {\n    try {\n      if (CONFIG.DDBI.KNOWN.CHECKED_DIRS.has(parsedPath.fullPath)) return true;\n      const paths = (targetPath) ? targetPath.split(\"/\") : parsedPath.current.split(\"/\");\n      let currentSource = paths[0];\n\n      for (let i = 0; i < paths.length; i += 1) {\n        try {\n          if (currentSource !== paths[i]) {\n            currentSource = `${currentSource}/${paths[i]}`;\n          }\n          await DirectoryPicker.createDirectory(parsedPath.activeSource, `${currentSource}`, { bucket: parsedPath.bucket });\n        } catch (err) {\n          const errMessage = `${(err?.message ?? utils.isString(err) ? err : err)}`.replace(/^Error: /, \"\").trim();\n          // if (errMessage.startsWith(\"EEXIST\")) {\n          //   const newBrowsePath = DirectoryPicker.format({\n          //     activeSource: parsedPath.activeSource,\n          //     bucket: parsedPath.bucket,\n          //     current: currentSource,\n          //   });\n          //   console.warn(\"about to check files on existing folder\", newBrowsePath);\n          //   await FileHelper.generateCurrentFiles(newBrowsePath);\n          // }\n          if (!errMessage.startsWith(\"EEXIST\") && !errMessage.startsWith(\"The S3 key\")) {\n            logger.error(`Error trying to verify path [${parsedPath.activeSource}], ${parsedPath.current}`, err);\n            logger.error(\"parsedPath\", parsedPath);\n            logger.error(\"targetPath\", targetPath);\n          }\n        }\n      }\n    } catch (err) {\n      logger.error(\"Unable to verify path\", err);\n      return false;\n    }\n\n    return true;\n  }\n\n  static async verifyDirectory(parsedPath, targetPath = null) {\n    if (CONFIG.DDBI.KNOWN.CHECKED_DIRS.has(parsedPath.fullPath)) return true;\n    return DirectoryPicker.verifyPath(parsedPath, targetPath);\n  }\n\n  /**\n   * Browse files using Forge API\n   * @param  {string} source\n   * @param  {string} target\n   * @param  {object} options={}\n   */\n  static async browseForgeFiles(source, target, options = {}) {\n    if (target.startsWith(ForgeVTT.ASSETS_LIBRARY_URL_PREFIX)) {\n      if (options.wildcard)\n        options.wildcard = target;\n      target = target.slice(ForgeVTT.ASSETS_LIBRARY_URL_PREFIX.length);\n      target = target.split(\"/\").slice(1, -1).join(\"/\"); // Remove userid from url to get target path\n    }\n\n    const response = await ForgeAPI.call('assets/browse', { path: decodeURIComponent(target), options });\n    if (!response || response.error) {\n      ui.notifications.error(response ? response.error : \"An unknown error occured accessing The Forge API\");\n      return { target, dirs: [], files: [], gridSize: null, private: false, privateDirs: [], extensions: options.extensions };\n    }\n    // Should be decodeURIComponent but FilePicker's _onPick needs to do encodeURIComponent too, but on each separate path.\n    response.target = decodeURI(response.folder);\n    delete response.folder;\n    response.dirs = response.dirs.map((d) => d.path.slice(0, -1));\n    response.files = response.files.map((f) => f.url);\n    // 0.5.6 specific\n    response.private = true;\n    response.privateDirs = [];\n    response.gridSize = null;\n    response.extensions = options.extensions;\n    return response;\n  }\n\n  /**\n   * Browse files using FilePicker\n   * @param  {string} source\n   * @param  {string} target\n   * @param  {object} options={}\n   */\n  static async browseFiles(source, target, options = {}) {\n    if (typeof ForgeVTT !== \"undefined\" && ForgeVTT?.usingTheForge) {\n      if (target.startsWith(ForgeVTT.ASSETS_LIBRARY_URL_PREFIX)) source = \"forgevtt\";\n\n      if (source === \"forgevtt\") {\n        return DirectoryPicker.browseForgeFiles(source, target, options);\n      }\n    }\n\n    return FilePicker.browse(source, target, options);\n  }\n}\n","import { DirectoryPicker } from \"../lib/DirectoryPicker.js\";\nimport logger from \"../logger.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"./DDBProxy.js\";\nimport utils from \"./utils.js\";\n\nconst FileHelper = {\n  BAD_DIRS: [\"[data]\", \"[data] \", \"\", null],\n\n  removeFileExtension: (name) => {\n    let nameArray = name.split(\".\");\n    nameArray.pop();\n    return nameArray.join(\".\");\n  },\n\n\n  /**\n   * Read data from a user provided File object\n   * @param {File} file           A File object\n   * @return {Promise.<String>}   A Promise which resolves to the loaded text data\n   */\n  readBlobFromFile: (file) => {\n    const reader = new FileReader();\n    return new Promise((resolve, reject) => {\n      reader.onload = () => {\n        resolve(reader.result);\n      };\n      reader.onerror = () => {\n        reader.abort();\n        reject();\n      };\n      reader.readAsBinaryString(file);\n    });\n  },\n\n  download: (content, fileName, contentType) => {\n    let a = document.createElement(\"a\");\n    let file = new Blob([content], { type: contentType });\n    a.href = URL.createObjectURL(file);\n    a.download = fileName;\n    a.click();\n  },\n\n  addFileToKnown: (parsedDir, file) => {\n    CONFIG.DDBI.KNOWN.FILES.add(file);\n    const split = file.split(parsedDir.current);\n    if (split.length > 1) {\n      const fileName = split[1].startsWith(\"/\") ? split[1] : `/${split[1]}`;\n      CONFIG.DDBI.KNOWN.FILES.add(`${parsedDir.fullPath}${fileName}`);\n      CONFIG.DDBI.KNOWN.LOOKUPS.set(`${parsedDir.fullPath}${fileName}`, file);\n    }\n  },\n\n  fileExistsUpdate: (parsedDir, fileList) => {\n    const targetFiles = fileList.filter((f) => !CONFIG.DDBI.KNOWN.FILES.has(f));\n    for (const file of targetFiles) {\n      FileHelper.addFileToKnown(parsedDir, file);\n    }\n  },\n\n  dirExistsUpdate: (dirList) => {\n    const targetFiles = dirList.filter((f) => !CONFIG.DDBI.KNOWN.DIRS.has(f));\n    for (const file of targetFiles) {\n      CONFIG.DDBI.KNOWN.DIRS.add(file);\n    }\n  },\n\n  doesDirExist: async (directoryPath) => {\n    const dir = DirectoryPicker.parse(directoryPath);\n    try {\n      await DirectoryPicker.browse(dir.activeSource, dir.current, {\n        bucket: dir.bucket,\n      });\n      return true;\n    } catch (error) {\n      return false;\n    }\n  },\n\n  generateCurrentFilesFromParsedDir: async (parsedDir) => {\n    if (!CONFIG.DDBI.KNOWN.CHECKED_DIRS.has(parsedDir.fullPath)) {\n      logger.debug(`Checking for files in ${parsedDir.fullPath}...`, parsedDir);\n      const fileList = await DirectoryPicker.browse(parsedDir.activeSource, parsedDir.current, {\n        bucket: parsedDir.bucket,\n      });\n      FileHelper.fileExistsUpdate(parsedDir, fileList.files);\n      FileHelper.dirExistsUpdate(fileList.dirs);\n      // lets do some forge fun because\n      if (typeof ForgeVTT !== \"undefined\" && ForgeVTT?.usingTheForge) {\n        if (fileList.bazaar) {\n          // eslint-disable-next-line require-atomic-updates\n          CONFIG.DDBI.KNOWN.FORGE.TARGETS[parsedDir.fullPath] = {};\n          fileList.files.forEach((file) => {\n            const fileName = file.split(\"/\").pop();\n            CONFIG.DDBI.KNOWN.FORGE.TARGETS[parsedDir.fullPath][fileName] = file;\n            FileHelper.addFileToKnown(parsedDir, file);\n          });\n        } else {\n          const status = ForgeAPI.lastStatus || (await ForgeAPI.status());\n          const userId = status.user;\n          // eslint-disable-next-line require-atomic-updates\n          CONFIG.DDBI.KNOWN.FORGE.TARGET_URL_PREFIX[parsedDir.fullPath] = `https://assets.forge-vtt.com/${userId}/${parsedDir.current}`;\n        }\n      }\n\n      CONFIG.DDBI.KNOWN.CHECKED_DIRS.add(parsedDir.fullPath);\n    } else {\n      logger.debug(`Skipping full dir scan for ${parsedDir.fullPath}...`);\n    }\n  },\n\n  generateCurrentFiles: async (directoryPath) => {\n    if (!CONFIG.DDBI.KNOWN.CHECKED_DIRS.has(directoryPath)) {\n      logger.debug(`Checking for files in directoryPath ${directoryPath}...`);\n      const dir = DirectoryPicker.parse(directoryPath);\n      await FileHelper.generateCurrentFilesFromParsedDir(dir);\n    } else {\n      logger.debug(`Skipping full dir scan for ${directoryPath}...`);\n    }\n  },\n\n  fileExists: async (directoryPath, filename) => {\n    const fileRef = `${directoryPath}/${filename}`;\n    let existingFile = CONFIG.DDBI.KNOWN.FILES.has(fileRef);\n    if (existingFile) return true;\n\n    logger.debug(`Checking for ${filename} at ${fileRef}...`);\n    await FileHelper.generateCurrentFiles(directoryPath);\n\n    const filePresent = CONFIG.DDBI.KNOWN.FILES.has(fileRef);\n\n    if (filePresent) {\n      logger.debug(`Found ${fileRef} after directory scan.`);\n    } else {\n      logger.debug(`Could not find ${fileRef}`, {\n        directoryPath,\n        filename,\n        fileUrl: fileRef,\n      });\n    }\n\n    return filePresent;\n  },\n\n  convertImageToWebp: async function (file, filename) {\n    logger.info(`Converting file ${filename} to webp`);\n\n    // Load the data into an image\n    const result = new Promise((resolve) => {\n      let rawImage = new Image();\n\n      rawImage.addEventListener(\"load\", () => {\n        resolve(rawImage);\n      });\n\n      rawImage.src = URL.createObjectURL(file);\n    })\n      .then((rawImage) => {\n        // Convert image to webp ObjectURL via a canvas blob\n        return new Promise((resolve) => {\n          let canvas = document.createElement(\"canvas\");\n          let ctx = canvas.getContext(\"2d\");\n          const quality = game.settings.get(SETTINGS.MODULE_ID, \"webp-quality\");\n\n          canvas.width = rawImage.width;\n          canvas.height = rawImage.height;\n          ctx.drawImage(rawImage, 0, 0);\n\n          canvas.toBlob((blob) => {\n            resolve(blob);\n          }, \"image/webp\", quality);\n        });\n      }).then((blob) => {\n        return blob;\n      });\n\n    return result;\n  },\n\n  uploadFile: async function (data, path, filename, forceWebp = false) {\n    const useWebP = game.settings.get(SETTINGS.MODULE_ID, \"use-webp\");\n    const file = new File([data], filename, { type: data.type });\n    const imageType = data.type.startsWith(\"image\") && data.type !== \"image/webp\";\n    const uploadFile = useWebP && (imageType || forceWebp)\n      ? new File([await FileHelper.convertImageToWebp(file, filename)], filename, { type: \"image/webp\" })\n      : file;\n\n    const result = await DirectoryPicker.uploadToPath(path, uploadFile);\n    return result;\n  },\n\n  uploadImage: async function (data, path, filename, forceWebp = false) {\n    return new Promise((resolve, reject) => {\n      FileHelper.uploadFile(data, path, filename, forceWebp)\n        .then((result) => {\n          resolve(result.path);\n        })\n        .catch((error) => {\n          logger.error(\"error uploading file: \", error);\n          reject(error);\n        });\n    });\n  },\n\n  downloadImage: async function (url) {\n    return new Promise((resolve, reject) => {\n      fetch(url, {\n        method: \"GET\",\n        headers: {\n          \"x-requested-with\": \"foundry\"\n        },\n      })\n        .then((response) => {\n          if (!response.ok) {\n            reject(\"Could not retrieve image\");\n          }\n          return response.blob();\n        })\n        .then((blob) => resolve(blob))\n        .catch((error) => reject(error.message));\n    });\n  },\n\n  uploadRemoteImage: async function (originalUrl, targetDirectory, baseFilename, useProxy = true) {\n    // prepare filenames\n    const filename = baseFilename;\n    const useWebP = game.settings.get(SETTINGS.MODULE_ID, \"use-webp\");\n    const ext = useWebP\n      ? \"webp\"\n      : originalUrl\n        .split(\".\")\n        .pop()\n        .split(/#|\\?|&/)[0];\n    const urlEncode = game.settings.get(SETTINGS.MODULE_ID, \"cors-encode\");\n    const stripProtocol = game.settings.get(SETTINGS.MODULE_ID, \"cors-strip-protocol\");\n    const corsPathPrefix = game.settings.get(SETTINGS.MODULE_ID, \"cors-path-prefix\");\n    let url = originalUrl.split(\"?\")[0];\n\n    try {\n      const proxyEndpoint = DDBProxy.getCORSProxy();\n      const fiddledUrl = stripProtocol ? url.replace(/^https:\\/\\//, corsPathPrefix) : `${corsPathPrefix}${url}`;\n      const target = urlEncode ? encodeURIComponent(fiddledUrl) : fiddledUrl;\n      url = useProxy ? proxyEndpoint + target : url;\n      const data = await FileHelper.downloadImage(url);\n      // hack as proxy returns ddb access denied as application/xml\n      if (data.type === \"application/xml\") return null;\n      const result = await FileHelper.uploadImage(data, targetDirectory, filename + \".\" + ext);\n      FileHelper.addFileToKnown(DirectoryPicker.parse(targetDirectory), result);\n      CONFIG.DDBI.KNOWN.LOOKUPS.set(`${targetDirectory}/${baseFilename}`, result);\n      return result;\n    } catch (error) {\n      logger.error(\"Image upload error\", error);\n      ui.notifications.warn(`Image upload failed. Please check your ddb-importer upload folder setting. ${originalUrl}`);\n      return null;\n    }\n  },\n\n  getForgeUrl: async (directoryPath, filename) => {\n    let uri;\n    if (!CONFIG.DDBI.KNOWN.CHECKED_DIRS.has(directoryPath)) {\n      await FileHelper.generateCurrentFiles(directoryPath);\n    }\n    const prefix = CONFIG.DDBI.KNOWN.FORGE.TARGET_URL_PREFIX[directoryPath];\n    const bazaarTargetPath = CONFIG.DDBI.KNOWN.FORGE.TARGETS[directoryPath];\n    const bazaarTarget = bazaarTargetPath ? bazaarTargetPath[filename] : undefined;\n    if (bazaarTarget) {\n      uri = bazaarTarget;\n    } else if (prefix) {\n      uri = `${prefix}/${filename}`;\n    } else {\n      // we can't find the directory path for some reason, final fallback, try and guess the url\n      const dir = DirectoryPicker.parse(directoryPath);\n      if (dir.activeSource == \"data\") {\n        // Local on-server file system\n        uri = `https://assets.forge-vtt.com/bazaar/${dir.current}/${filename}`;\n      } else if (dir.activeSource == \"forgevtt\") {\n        const status = ForgeAPI.lastStatus || (await ForgeAPI.status());\n        const userId = status.user;\n        uri = `https://assets.forge-vtt.com/${userId}/${dir.current}/${filename}`;\n      }\n    }\n    return uri;\n  },\n\n  getFileUrl: async (directoryPath, filename) => {\n    let uri;\n    try {\n      if (typeof ForgeVTT !== \"undefined\" && ForgeVTT?.usingTheForge) {\n        uri = await FileHelper.getForgeUrl(directoryPath, filename);\n        return uri;\n      } else {\n        const dir = DirectoryPicker.parse(directoryPath);\n        if (dir.activeSource == \"data\") {\n          // Local on-server file system\n          uri = dir.current + \"/\" + filename;\n        } else if (dir.activeSource == \"forgevtt\") {\n          const status = ForgeAPI.lastStatus || (await ForgeAPI.status());\n          const userId = status.user;\n          uri = `https://assets.forge-vtt.com/${userId}/${dir.current}/${filename}`;\n        } else if (dir.activeSource == \"s3\") {\n          // S3 Bucket\n          uri = `https://${dir.bucket}.${game.data.files.s3.endpoint.hostname}/${dir.current}/${filename}`;\n        } else {\n          logger.error(\"DDB Importer cannot handle files stored in that location\", dir);\n        }\n      }\n    } catch (exception) {\n      throw new Error(`Unable to determine file URL for directoryPath \"${directoryPath}\" and filename \"${filename}\"`);\n    }\n    return encodeURI(uri);\n  },\n\n  getImagePath: async (imageUrl, { type = \"ddb\", imageNamePrefix = \"\", name = undefined, download = false,\n    remoteImages = false, force = false, pathPostfix = \"\", targetDirectory = undefined } = {}\n  ) => {\n    if (!name || !targetDirectory) {\n      logger.error(`You must supply a targetDirectory and name for the image ${imageUrl}`, { name, targetDirectory, type });\n      throw new Error(`You must supply a targetDirectory and name for the image ${imageUrl}`);\n    }\n    logger.debug(`Getting image path for ${imageUrl}`, {\n      type,\n      imageNamePrefix,\n      name,\n      download,\n      remoteImages,\n      force,\n      pathPostfix,\n      targetDirectory,\n    });\n    const uploadDirectory = `${targetDirectory}${pathPostfix}`;\n    if (!CONFIG.DDBI.KNOWN.CHECKED_DIRS.has(uploadDirectory)) {\n      const parsedPath = DirectoryPicker.parse(uploadDirectory);\n      await DirectoryPicker.verifyPath(parsedPath);\n      await FileHelper.generateCurrentFilesFromParsedDir(parsedPath);\n    }\n    const downloadImage = (download) ? download : game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-download-images\");\n    const remoteImage = (remoteImages) ? remoteImages : game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-remote-images\");\n    const useWebP = game.settings.get(SETTINGS.MODULE_ID, \"use-webp\");\n\n    if (imageUrl && downloadImage) {\n      const ext = useWebP\n        ? \"webp\"\n        : imageUrl.split(\".\").pop().split(/#|\\?|&/)[0];\n      if (!name) name = imageUrl.split(\"/\").pop();\n\n      // image upload\n      const fileNamePrefix = !imageNamePrefix || imageNamePrefix.trim() === \"\" ? \"\" : `${imageNamePrefix}-`;\n      const filename = `${fileNamePrefix}${utils.referenceNameString(name)}`;\n      const imageExists = await FileHelper.fileExists(uploadDirectory, filename + \".\" + ext);\n\n      if (imageExists && !force) {\n        // eslint-disable-next-line require-atomic-updates\n        // const image = await FileHelper.getFileUrl(uploadDirectory, filename + \".\" + ext);\n        const image = CONFIG.DDBI.KNOWN.LOOKUPS.get(`${uploadDirectory}/${filename}.${ext}`);\n        return image.trim();\n      } else {\n        // eslint-disable-next-line require-atomic-updates\n        const image = await FileHelper.uploadRemoteImage(imageUrl, uploadDirectory, filename);\n        // did upload succeed? if not fall back to remote image path\n        if (image) {\n          return image.trim();\n        } else {\n          return null;\n        }\n\n      }\n    } else if (imageUrl && remoteImage) {\n      try {\n        return imageUrl.trim();\n      } catch (ignored) {\n        return null;\n      }\n    }\n    return null;\n  },\n\n};\n\nexport default FileHelper;\n","import logger from \"../logger.js\";\nimport DDBItemImporter from \"./DDBItemImporter.js\";\nimport SETTINGS from \"../settings.js\";\nimport utils from \"./utils.js\";\n\nexport default class FolderHelper {\n\n  static async getOrCreateFolder (root, entityType, folderName, folderColor = \"\") {\n    let folder = game.folders.contents.find((f) =>\n      f.type === entityType && f.name === folderName\n      // if a root folder we want to match the root id for the parent folder\n      && (root ? root.id : null) === (f.folder?.id ?? null)\n    );\n    // console.warn(`Looking for ${root} ${entityType} ${folderName}`);\n    // console.warn(folder);\n    if (folder) return folder;\n    folder = await Folder.create(\n      {\n        name: folderName,\n        type: entityType,\n        color: folderColor,\n        parent: (root) ? root.id : null,\n      },\n      { displaySheet: false }\n    );\n    return folder;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  static async getFolder(kind, subFolder = \"\", baseFolderName = \"D&D Beyond Import\", baseColor = \"#6f0006\", subColor = \"#98020a\", typeFolder = true) {\n    const entityTypes = utils.entityMap();\n    const folderName = game.i18n.localize(`ddb-importer.item-type.${kind}`);\n    const entityType = entityTypes.get(kind);\n    const baseFolder = await FolderHelper.getOrCreateFolder(null, entityType, baseFolderName, baseColor);\n    const entityFolder = typeFolder\n      ? await FolderHelper.getOrCreateFolder(baseFolder, entityType, folderName, subColor)\n      : baseFolder;\n    if (subFolder !== \"\") {\n      const subFolderName = subFolder.charAt(0).toUpperCase() + subFolder.slice(1);\n      const typeFolder = await FolderHelper.getOrCreateFolder(entityFolder, entityType, subFolderName, subColor);\n      return typeFolder;\n    } else {\n      return entityFolder;\n    }\n  }\n\n  /**\n   * Retrieves the folder ID of a compendium with a given name within a specified compendium.\n   *\n   * @param {string} name - The name of the folder to search for.\n   * @param {string} compendiumName - The name of the compendium to search within.\n   * @return {Promise<string|undefined>} The ID of the folder if found, otherwise undefined.\n   */\n  static async getCompendiumFolderId(name, compendiumName) {\n    const compendium = game.packs.get(compendiumName);\n    return compendium.folders.find((f) => f.name === name)?._id;\n  }\n\n  /**\n   * Updates game folder items\n   * @param {*} type\n   */\n  static async updateFolderItems(type, input, update = true) {\n    const folderLookup = SETTINGS.GAME_FOLDER_LOOKUPS.find((c) => c.type == type);\n    const itemFolderNames = [...new Set(input[type]\n      .filter((item) => item.flags?.ddbimporter?.dndbeyond?.lookupName)\n      .map((item) => item.flags.ddbimporter.dndbeyond.lookupName))];\n\n    const getSubFolders = async () => {\n      return Promise.all(\n        itemFolderNames.map((name) => {\n          return FolderHelper.getFolder(folderLookup.folder, name);\n        })\n      );\n    };\n\n    const subFolders = await getSubFolders();\n\n    const defaultItemsFolder = await FolderHelper.getFolder(folderLookup.folder);\n    const existingItems = await game.items.entities.filter((item) => {\n      const itemFolder = subFolders.find((folder) =>\n        item.flags?.ddbimporter?.dndbeyond?.lookupName\n        && folder.name === item.flags.ddbimporter.dndbeyond.lookupName\n      );\n      return itemFolder && item.type === folderLookup.itemType && item.folder === itemFolder._id;\n    });\n\n    // update or create folder items\n    const updateItems = async () => {\n      return Promise.all(\n        input[type]\n          .filter((item) => existingItems.some((idx) => idx.name === item.name))\n          .map(async (item) => {\n            const existingItem = await existingItems.find((existing) => item.name === existing.name);\n            item._id = existingItem._id;\n            logger.info(`Updating ${type} ${item.name}`);\n            DDBItemImporter.copySupportedItemFlags(existingItem, item);\n            await Item.update(item);\n            return item;\n          })\n      );\n    };\n\n    const createItems = async () => {\n      return Promise.all(\n        input[type]\n          .filter((item) => !existingItems.some((idx) => idx.name === item.name))\n          .map(async (item) => {\n            if (!game.user.can(\"ITEM_CREATE\")) {\n              ui.notifications.warn(`Cannot create ${folderLookup.type} ${item.name} for ${type}`);\n            } else {\n              logger.info(`Creating ${type} ${item.name}`);\n              const itemsFolder = subFolders.find((folder) =>\n                item.flags?.ddbimporter?.dndbeyond?.lookupName\n                && folder.name === item.flags.ddbimporter.dndbeyond.lookupName\n              );\n              item.folder = (itemsFolder) ? itemsFolder._id : defaultItemsFolder._id;\n              await Item.create(item);\n            }\n            return item;\n          })\n      );\n    };\n\n    if (update) await updateItems();\n    await createItems();\n\n    // lets generate our compendium info like id, pack and img for use\n    // by things like magicitems\n    const folderIds = [defaultItemsFolder._id, ...subFolders.map((f) => f._id)];\n    const items = Promise.all(\n      game.items.entities\n        .filter((item) => item.type === folderLookup.itemType && folderIds.includes(item.folder))\n        .map((result) => {\n          const subFolder = (result.flags.ddbimporter?.dndbeyond?.lookupName)\n            ? result.flags.ddbimporter.dndbeyond.lookupName\n            : null;\n          return {\n            magicItem: {\n              _id: result._id,\n              id: result._id,\n              pack: \"world\",\n              img: result.img,\n              name: result.name,\n              subFolder: subFolder,\n              flatDc: result.flags?.ddbimporter?.dndbeyond?.overrideDC,\n              dc: result.flags?.ddbimporter?.dndbeyond?.dc,\n            },\n            _id: result._id,\n            name: result.name,\n            compendium: false,\n          };\n        })\n    );\n    return items;\n  }\n\n}\n\n\n","import DDBMuncher from \"../apps/DDBMuncher.js\";\nimport DICTIONARY from \"../dictionary.js\";\nimport logger from \"../logger.js\";\nimport SETTINGS from \"../settings.js\";\nimport CompendiumHelper from \"./CompendiumHelper.js\";\nimport FileHelper from \"./FileHelper.js\";\nimport NameMatcher from \"./NameMatcher.js\";\nimport utils from \"./utils.js\";\n\n// const BASE_PATH = ROUTE_PREFIX ? `/${ROUTE_PREFIX}` : \"\";\n\nconst TYPE_MAP = {\n  items: \"items\",\n  weapons: \"items\",\n  weapon: \"items\",\n  item: \"items\",\n  equipment: \"items\",\n  consumable: \"items\",\n  tool: \"items\",\n  loot: \"items\",\n  container: \"items\",\n  inventory: \"items\",\n  spells: \"spells\",\n  spell: \"spells\",\n  feats: \"feats\",\n  feat: \"feats\",\n  classes: \"classes\",\n  class: \"classes\",\n  subclass: \"classes\",\n  monster: \"monster\",\n  summons: \"monster\",\n  summon: \"monster\",\n  backgrounds: \"backgrounds\",\n  background: \"backgrounds\",\n  traits: \"traits\",\n  races: \"races\",\n  race: \"races\",\n  tattoo: \"items\",\n  \"dnd-tashas-cauldron.tattoo\": \"items\",\n};\n\nconst FILE_MAP = {\n  items: [\"items.json\", \"class-features.json\", \"races.json\"],\n  traits: [\"class-features.json\", \"races.json\", \"general.json\", \"items.json\"],\n  spells: [\"spells.json\"],\n  races: [\"races.json\"],\n  feats: [\"feats.json\", \"class-features.json\", \"races.json\", \"general.json\"],\n  classes: [\"classes.json\"],\n  monster: [\"named-monster-features.json\", \"generic-monster-features.json\"],\n  backgrounds: [\"backgrounds.json\", \"feats.json\", \"class-features.json\", \"races.json\", \"general.json\"],\n};\n\nfunction sanitiseName(name) {\n  return utils.nameString(name).toLowerCase();\n}\n\nasync function loadDataFile(fileName) {\n  logger.debug(`Getting icon mapping for ${fileName}`);\n  const fileExists = await FileHelper.fileExists(\"[data] modules/ddb-importer/data\", fileName);\n\n  const url = await FileHelper.getFileUrl(\"[data] modules/ddb-importer/data\", fileName);\n  if (!fileExists) {\n    logger.warn(`Possible missing file, icon load may fail. Fetching ${url}`);\n  }\n\n  const data = await foundry.utils.fetchJsonWithTimeout(url);\n  return data;\n}\n\nasync function loadIconMap(type) {\n  // check to see if dictionary is loaded\n  if (CONFIG.DDBI.ICONS[type]) return;\n\n  logger.debug(`Loading Inbuilt Icon Map for ${type}`);\n  let data = [];\n  for (const fileName of FILE_MAP[type]) {\n    const dataLoad = await loadDataFile(fileName);\n    data = data.concat(dataLoad);\n  }\n\n  CONFIG.DDBI.ICONS[type] = data;\n  // console.warn(iconMap);\n}\n\nfunction looseMatch(item, typeValue) {\n  const originalName = item.flags?.ddbimporter?.originalName;\n  if (originalName) {\n    const originalMatch = CONFIG.DDBI.ICONS[typeValue].find((entry) => sanitiseName(entry.name) === sanitiseName(originalName));\n    if (originalMatch) return originalMatch.path;\n  }\n\n  const sanitisedName = sanitiseName(item.name);\n  if (item.name.includes(\":\")) {\n    const nameArray = sanitisedName.split(\":\");\n    const postMatch = CONFIG.DDBI.ICONS[typeValue].find((entry) => sanitiseName(entry.name) === nameArray[1].trim());\n    if (postMatch) return postMatch.path;\n    const subMatch = CONFIG.DDBI.ICONS[typeValue].find((entry) => sanitiseName(entry.name) === nameArray[0].trim());\n    if (subMatch) return subMatch.path;\n  }\n\n  const startsMatchEntry = CONFIG.DDBI.ICONS[typeValue].find((entry) => sanitisedName.split(\":\")[0].trim().startsWith(sanitiseName(entry.name).split(\":\")[0].trim()));\n  if (startsMatchEntry) return startsMatchEntry.path;\n  const startsMatchItem = CONFIG.DDBI.ICONS[typeValue].find((entry) => sanitiseName(entry.name).split(\":\")[0].trim().startsWith(sanitisedName.split(\":\")[0].trim()));\n  if (startsMatchItem) return startsMatchItem.path;\n\n  if (item.type === \"subclass\" && item.system.classIdentifier) {\n    const sanitisedClassName = sanitiseName(item.system.classIdentifier);\n    const subClassMatch = CONFIG.DDBI.ICONS[typeValue].find((entry) => sanitiseName(entry.name).startsWith(sanitisedClassName));\n    if (subClassMatch) return subClassMatch.path;\n  }\n\n  return null;\n}\n\nfunction getIconPath(item, type, monsterName) {\n  // check to see if we are able to load a dic for that type\n  const typeValue = TYPE_MAP[type];\n  if (!typeValue || !CONFIG.DDBI.ICONS[typeValue]) return null;\n\n  const iconMatch = CONFIG.DDBI.ICONS[typeValue].find((entry) => {\n    const sanitisedName = sanitiseName(entry.name);\n    const sanitisedItemName = sanitiseName(item.name);\n    if (type === \"monster\") {\n      return sanitisedName === sanitisedItemName.split(\"(\")[0].trim() && entry.monster && sanitiseName(entry.monster) == sanitiseName(monsterName);\n    }\n    return sanitisedName === sanitisedItemName;\n  });\n\n  if (!iconMatch && type === \"monster\") {\n    const genericMonsterIconMatch = CONFIG.DDBI.ICONS[typeValue].find((entry) => {\n      const sanitisedName = sanitiseName(entry.name);\n      const sanitisedItemName = sanitiseName(item.name);\n      return sanitisedName === sanitisedItemName;\n    });\n    if (genericMonsterIconMatch) return genericMonsterIconMatch.path;\n  }\n\n  if (iconMatch) {\n    return iconMatch.path;\n  } else {\n    return looseMatch(item, typeValue);\n  }\n}\n\n\nasync function loadIconMaps(types) {\n  let promises = [];\n\n  const mapTypes = types\n    .filter((type) => TYPE_MAP[type])\n    .map((type) => TYPE_MAP[type]).filter((type, i, ar) => ar.indexOf(type) === i);\n\n  mapTypes.forEach((type) => {\n    // logger.debug(`Loading ${type}`);\n    promises.push(loadIconMap(type));\n  });\n\n  return Promise.all(promises);\n}\n\nconst STUBS = {\n  1: `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" style=\"shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd\"\n  viewBox=\"0 0 512 512\" width=\"512\" height=\"512\">\n    <g>\n      <circle style=\"fill:#ffffff;stroke:#010101;stroke-width:30;stroke-miterlimit:10;\" cx=\"250\" cy=\"250\" r=\"220\">\n      </circle>\n      <text font-family='-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"' font-size=\"300\" font-weight=\"400\" fill=\"black\" x=\"50%\" y=\"52%\" text-anchor=\"middle\" stroke=\"#000000\" dy=\".3em\">REPLACEME</text>\n    </g>\n  </svg>`,\n  2: `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" style=\"shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd\"\n  viewBox=\"0 0 512 512\" width=\"512\" height=\"512\">\n    <g>\n      <circle style=\"fill:#ffffff;stroke:#010101;stroke-width:30;stroke-miterlimit:10;\" cx=\"250\" cy=\"250\" r=\"220\">\n      </circle>\n      <text font-family='-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"' font-size=\"230\" font-weight=\"400\" fill=\"black\" x=\"50%\" y=\"52%\" text-anchor=\"middle\" stroke=\"#000000\" dy=\".3em\">REPLACEME</text>\n    </g>\n  </svg>`,\n  3: `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" style=\"shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd\"\n  viewBox=\"0 0 512 512\" width=\"512\" height=\"512\">\n    <g>\n      <circle style=\"fill:#ffffff;stroke:#010101;stroke-width:30;stroke-miterlimit:10;\" cx=\"250\" cy=\"250\" r=\"220\">\n      </circle>\n      <text font-family='-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"' font-size=\"170\" font-weight=\"400\" fill=\"black\" x=\"50%\" y=\"52%\" text-anchor=\"middle\" stroke=\"#000000\" dy=\".3em\">REPLACEME</text>\n    </g>\n  </svg>`,\n  4: `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" style=\"shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd\"\n  viewBox=\"0 0 512 512\" width=\"512\" height=\"512\">\n    <g>\n      <circle style=\"fill:#ffffff;stroke:#010101;stroke-width:30;stroke-miterlimit:10;\" cx=\"250\" cy=\"250\" r=\"220\">\n      </circle>\n      <text font-family='-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"' font-size=\"140\" font-weight=\"400\" fill=\"black\" x=\"50%\" y=\"52%\" text-anchor=\"middle\" stroke=\"#000000\" dy=\".3em\">REPLACEME</text>\n    </g>\n  </svg>`,\n};\n\nfunction unPad(match, p1) {\n  if (isNaN(parseInt(p1))) {\n    return p1;\n  } else {\n    return parseInt(p1);\n  }\n}\n\nexport default class Iconizer {\n\n  static async generateIcon(adventure, title) {\n    // default path\n    let iconPath = \"icons/svg/book.svg\";\n    let stub = title.trim().split(\".\")[0].split(\" \")[0];\n    stub = stub.replace(/(\\d+)/, unPad);\n    if (stub.length <= 4) {\n      iconPath = `assets/icons/${stub}.svg`;\n      logger.info(stub);\n      let content = STUBS[stub.length];\n      content = content.replace(\"REPLACEME\", stub);\n      const uploadPath = await adventure.importRawFile(iconPath, content, \"text/plain\", true);\n      return uploadPath;\n    }\n    return iconPath;\n  }\n\n  static async iconPath(item, monster = false, monsterName = \"\") {\n    const itemTypes = [item.type];\n    if (monster) itemTypes.push(\"monster\");\n    await loadIconMaps(itemTypes);\n\n    let iconPath;\n    // logger.debug(`Inbuilt icon match started for ${item.name} [${item.type}]`);\n    // if we have a monster lets check the monster dict first\n    if (monster) {\n      const monsterPath = getIconPath(item, \"monster\", monsterName);\n      if (monsterPath) {\n        iconPath = monsterPath;\n      }\n    }\n    if (!iconPath) iconPath = getIconPath(item, item.type);\n    return iconPath;\n  }\n\n  static async copyInbuiltIcons(items, monster = false, monsterName = \"\") {\n    // get unique array of item types to be matching\n    const itemTypes = items.map((item) => item.type).filter((item, i, ar) => ar.indexOf(item) === i);\n\n    if (monster) itemTypes.push(\"monster\");\n    await loadIconMaps(itemTypes);\n\n    return new Promise((resolve) => {\n      const iconItems = items.map((item) => {\n        if (foundry.utils.getProperty(item, \"flags.ddbimporter.keepIcon\") !== true) {\n          // logger.debug(`Inbuilt icon match started for ${item.name} [${item.type}]`);\n          // if we have a monster lets check the monster dict first\n          if (monster && ![\"spell\"].includes(item.type)) {\n            const monsterPath = getIconPath(item, \"monster\", monsterName);\n            if (monsterPath) {\n              item.img = monsterPath;\n              return item;\n            }\n          }\n          const pathMatched = getIconPath(item, item.type);\n          if (pathMatched) {\n            item.img = pathMatched;\n            if (item.effects) {\n              item.effects.forEach((effect) => {\n                if (!effect.icon || effect.icon === \"\") {\n                  effect.icon = pathMatched;\n                }\n                if (!effect.img || effect.img === \"\") {\n                  effect.img = pathMatched;\n                }\n              });\n            }\n          }\n        }\n        return item;\n      });\n      resolve(iconItems);\n    });\n  }\n\n  static async getSRDIconMatch(type) {\n    const compendiumName = SETTINGS.SRD_COMPENDIUMS.find((c) => c.type == type).name;\n    const srdPack = CompendiumHelper.getCompendium(compendiumName);\n    const srdIndices = [\"name\", \"img\", \"prototypeToken.texture.src\", \"type\", \"system.activation\", \"prototypeToken.texture.scaleY\", \"prototypeToken.texture.scaleX\"];\n    const index = await srdPack.getIndex({ fields: srdIndices });\n    return index;\n  }\n\n  static async getSRDImageLibrary() {\n    if (CONFIG.DDBI.SRD_LOAD.mapLoaded) return CONFIG.DDBI.SRD_LOAD.iconMap;\n    const compendiumFeatureItems = await Iconizer.getSRDIconMatch(\"features\");\n    const compendiumInventoryItems = await Iconizer.getSRDIconMatch(\"inventory\");\n    const compendiumSpellItems = await Iconizer.getSRDIconMatch(\"spells\");\n    const compendiumMonsterFeatures = await Iconizer.getSRDIconMatch(\"monsterfeatures\");\n    const compendiumMonsters = await Iconizer.getSRDIconMatch(\"monsters\");\n\n    // eslint-disable-next-line require-atomic-updates\n    CONFIG.DDBI.SRD_LOAD.iconMap = [\n      ...compendiumInventoryItems,\n      ...compendiumSpellItems,\n      ...compendiumFeatureItems,\n      ...compendiumMonsterFeatures,\n      ...compendiumMonsters,\n    ];\n    return CONFIG.DDBI.SRD_LOAD.iconMap;\n  }\n\n  static async copySRDIcons(items, srdImageLibrary = null, nameMatchList = []) {\n    // eslint-disable-next-line require-atomic-updates\n    if (!srdImageLibrary) srdImageLibrary = await Iconizer.getSRDImageLibrary();\n\n    const srdItems = items.map((item) => {\n      logger.debug(`Matching ${item.name}`);\n      const nameMatch = nameMatchList.find((m) => m.name === item.name);\n      if (nameMatch) {\n        item.img = nameMatch.img;\n      } else {\n        const match = NameMatcher.looseItemNameMatch(item, srdImageLibrary, true);\n        if (match) {\n          srdImageLibrary.push({ name: item.name, img: match.img });\n          item.img = match.img;\n        }\n      }\n      return item;\n    });\n    return srdItems;\n  }\n\n  static async retainExistingIcons(items) {\n    return new Promise((resolve) => {\n      const newItems = items.map((item) => {\n        if (item.flags.ddbimporter?.ignoreIcon) {\n          logger.debug(`Retaining icon for ${item.name} to ${item.flags.ddbimporter.matchedImg}`);\n          item.img = item.flags.ddbimporter.matchedImg;\n        }\n        return item;\n      });\n      resolve(newItems);\n    });\n  }\n\n  static async getDDBItemImages(items, download) {\n    DDBMuncher.munchNote(`Fetching DDB Item Images`);\n    const downloadImages = (download) ? true : game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-download-images\");\n    const remoteImages = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-remote-images\");\n    const targetDirectory = game.settings.get(SETTINGS.MODULE_ID, \"other-image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n    const useDeepPaths = game.settings.get(SETTINGS.MODULE_ID, \"use-deep-file-paths\");\n\n    const itemMap = items.map(async (item) => {\n      let itemImage = {\n        name: item.name,\n        type: item.type,\n        img: null,\n        large: null,\n      };\n\n      const pathPostfix = useDeepPaths ? `/item/${item.type}` : \"\";\n\n      if (foundry.utils.hasProperty(item, \"flags.ddbimporter.dndbeyond\")) {\n        if (item.flags.ddbimporter.dndbeyond.avatarUrl) {\n          const avatarUrl = item.flags.ddbimporter.dndbeyond['avatarUrl'];\n          if (avatarUrl && avatarUrl != \"\") {\n            DDBMuncher.munchNote(`Downloading ${item.name} image`);\n            const imageNamePrefix = useDeepPaths ? \"\" : \"item\";\n            const downloadOptions = { type: \"item\", name: item.name, download: downloadImages, remoteImages, targetDirectory, pathPostfix, imageNamePrefix };\n            const smallImage = await FileHelper.getImagePath(avatarUrl, downloadOptions);\n            logger.debug(`Final image ${smallImage}`);\n            itemImage.img = smallImage;\n          }\n        }\n        if (item.flags.ddbimporter.dndbeyond.largeAvatarUrl) {\n          const largeAvatarUrl = item.flags.ddbimporter.dndbeyond['largeAvatarUrl'];\n          if (largeAvatarUrl && largeAvatarUrl != \"\") {\n            const imageNamePrefix = useDeepPaths ? \"\" : \"item\";\n            const name = useDeepPaths ? `${item.name}-large` : item.name;\n            const downloadOptions = { type: \"item-large\", name, download: downloadImages, remoteImages, targetDirectory, pathPostfix, imageNamePrefix };\n            const largeImage = await FileHelper.getImagePath(largeAvatarUrl, downloadOptions);\n            itemImage.large = largeImage;\n            if (!itemImage.img) itemImage.img = largeImage;\n          }\n        }\n      }\n\n      DDBMuncher.munchNote(\"\");\n      return itemImage;\n    });\n\n    return Promise.all(itemMap);\n  }\n\n  static async getDDBHintImages(type, items, download) {\n    DDBMuncher.munchNote(`Fetching DDB Hint Images for ${type}`);\n    const downloadImages = (download) ? true : game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-download-images\");\n    const remoteImages = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-remote-images\");\n    const targetDirectory = game.settings.get(SETTINGS.MODULE_ID, \"other-image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n    const useDeepPaths = game.settings.get(SETTINGS.MODULE_ID, \"use-deep-file-paths\");\n\n    const imageNamePrefix = useDeepPaths ? \"\" : type;\n\n    for (const item of items) {\n      // eslint-disable-next-line no-continue\n      if (item.type !== type || item.img) continue;\n      const ddbImg = foundry.utils.getProperty(item, \"flags.ddbimporter.ddbImg\");\n      // eslint-disable-next-line no-continue\n      if (!ddbImg || ddbImg === \"\") continue;\n      const pathPostfix = useDeepPaths ? `/${type}/${item.type}` : \"\";\n      const name = useDeepPaths ? `${item.name}` : item.name;\n      const downloadOptions = { type, name, download: downloadImages, remoteImages, targetDirectory, pathPostfix, imageNamePrefix };\n      const img = await FileHelper.getImagePath(ddbImg, downloadOptions);\n      if (img) item.img = img;\n    }\n\n    DDBMuncher.munchNote(\"\");\n\n    return items;\n  }\n\n  static async getDDBGenericItemImages(download) {\n    DDBMuncher.munchNote(`Fetching DDB Generic Item icons`);\n    const targetDirectory = game.settings.get(SETTINGS.MODULE_ID, \"other-image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n    const useDeepPaths = game.settings.get(SETTINGS.MODULE_ID, \"use-deep-file-paths\");\n    const imageNamePrefix = useDeepPaths ? \"\" : \"item\";\n    const pathPostfix = useDeepPaths ? \"/ddb/item\" : \"\";\n\n    const itemMap = DICTIONARY.items.map(async (item) => {\n      const downloadOptions = { type: \"item\", name: item.filterType, download, targetDirectory, pathPostfix, imageNamePrefix };\n      const img = await FileHelper.getImagePath(item.img, downloadOptions);\n      let itemIcons = {\n        filterType: item.filterType,\n        img: img,\n      };\n      return itemIcons;\n    });\n\n    DDBMuncher.munchNote(\"\");\n    return Promise.all(itemMap);\n  }\n\n\n  static async getDDBGenericLootImages(download) {\n    DDBMuncher.munchNote(`Fetching DDB Generic Loot icons`);\n    const targetDirectory = game.settings.get(SETTINGS.MODULE_ID, \"other-image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n    const useDeepPaths = game.settings.get(SETTINGS.MODULE_ID, \"use-deep-file-paths\");\n    const imageNamePrefix = useDeepPaths ? \"\" : \"equipment\";\n    const pathPostfix = useDeepPaths ? \"/ddb/loot\" : \"\";\n\n    const itemMap = DICTIONARY.genericItemIcons.map(async (item) => {\n      const downloadOptions = { type: \"equipment\", name: item.name, download, targetDirectory, pathPostfix, imageNamePrefix };\n      const img = await FileHelper.getImagePath(item.img, downloadOptions);\n      let itemIcons = {\n        name: item.name,\n        img: img,\n      };\n      return itemIcons;\n    });\n\n    DDBMuncher.munchNote(\"\");\n    return Promise.all(itemMap);\n  }\n\n  static async getDDBGenericItemIcons(items, download) {\n    const genericItems = await Iconizer.getDDBGenericItemImages(download);\n    const genericLoots = await Iconizer.getDDBGenericLootImages(download);\n\n    let updatedItems = items.map((item) => {\n      // logger.debug(item.name);\n      // logger.debug(item.flags.ddbimporter.dndbeyond.filterType);\n      const excludedItems = [\"spell\", \"feat\", \"class\"];\n      if (!excludedItems.includes(item.type)\n          && item.flags\n          && item.flags.ddbimporter\n          && item.flags.ddbimporter.dndbeyond) {\n        let generic = null;\n        if (item.flags.ddbimporter.dndbeyond.filterType) {\n          generic = genericItems.find((i) => i.filterType === item.flags.ddbimporter.dndbeyond.filterType);\n        } else if (item.flags.ddbimporter.dndbeyond.type) {\n          generic = genericLoots.find((i) => i.name === item.flags.ddbimporter.dndbeyond.type);\n        }\n        if (generic && (!item.img || item.img == \"\" || item.img == CONST.DEFAULT_TOKEN)) {\n          item.img = generic.img;\n        }\n      }\n      return item;\n    });\n    return Promise.all(updatedItems);\n  }\n\n  static async getDDBSchoolSpellImages(download) {\n    DDBMuncher.munchNote(`Fetching spell school icons`);\n    const targetDirectory = game.settings.get(SETTINGS.MODULE_ID, \"other-image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n    const useDeepPaths = game.settings.get(SETTINGS.MODULE_ID, \"use-deep-file-paths\");\n    const imageNamePrefix = useDeepPaths ? \"\" : \"spell\";\n    const pathPostfix = useDeepPaths ? \"/spell/school\" : \"\";\n\n    const schoolMap = DICTIONARY.spell.schools.map(async (school) => {\n      const downloadOptions = { type: \"spell\", name: school.name, download, targetDirectory, imageNamePrefix, pathPostfix };\n      const img = await FileHelper.getImagePath(school.img, downloadOptions);\n      let schoolIcons = {\n        name: school.name,\n        img: img,\n        id: school.id,\n      };\n      return schoolIcons;\n    });\n\n    DDBMuncher.munchNote(\"\");\n    return Promise.all(schoolMap);\n  }\n\n  static async getDDBSpellSchoolIcons(items, download) {\n    const schools = await Iconizer.getDDBSchoolSpellImages(download);\n\n    let updatedItems = items.map((item) => {\n      // logger.debug(item.name);\n      // logger.debug(item.flags.ddbimporter.dndbeyond);\n      if (item.type == \"spell\") {\n        const school = schools.find((school) => school.id === item.system.school);\n        if (school && (!item.img || item.img == \"\" || item.img == CONST.DEFAULT_TOKEN)) {\n          item.img = school.img;\n        }\n      }\n      return item;\n    });\n    return Promise.all(updatedItems);\n  }\n\n  static async getDDBEquipmentIcons(items, download) {\n    const itemImages = await Iconizer.getDDBItemImages(items.filter((item) => DICTIONARY.types.inventory.includes(item.type)), download);\n\n    let updatedItems = items.map((item) => {\n      // logger.debug(item.name);\n      // logger.debug(item.flags.ddbimporter.dndbeyond);\n      if (DICTIONARY.types.inventory.includes(item.type)) {\n        if (!item.img || item.img == \"\" || item.img == CONST.DEFAULT_TOKEN) {\n          const imageMatch = itemImages.find((m) => m.name == item.name && m.type == item.type);\n          if (imageMatch && imageMatch.img) {\n            item.img = imageMatch.img;\n            foundry.utils.setProperty(item, \"flags.ddbimporter.keepIcon\", true);\n          }\n          if (imageMatch && imageMatch.large) {\n            item.flags.ddbimporter.dndbeyond['pictureUrl'] = imageMatch.large;\n          }\n        }\n      }\n      return item;\n    });\n    return Promise.all(updatedItems);\n  }\n\n  static async updateMagicItemImages(items) {\n    const useSRDCompendiumIcons = game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-srd-icons\");\n    const ddbSpellIcons = game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-ddb-spell-icons\");\n    const inbuiltIcons = game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-inbuilt-icons\");\n    const ddbItemIcons = game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-ddb-item-icons\");\n\n    // if we still have items to add, add them\n    if (items.length > 0) {\n      if (ddbItemIcons) {\n        logger.debug(\"Magic items: adding equipment icons\");\n        items = await Iconizer.getDDBEquipmentIcons(items, true);\n      }\n\n      if (inbuiltIcons) {\n        logger.debug(\"Magic items: adding inbuilt icons\");\n        items = await Iconizer.copyInbuiltIcons(items);\n      }\n\n      if (useSRDCompendiumIcons) {\n        logger.debug(\"Magic items: adding srd compendium icons\");\n        items = await Iconizer.copySRDIcons(items);\n      }\n\n      if (ddbSpellIcons) {\n        logger.debug(\"Magic items: adding ddb spell school icons\");\n        items = await Iconizer.getDDBSpellSchoolIcons(items, true);\n      }\n    }\n    return items;\n  }\n\n  static async preFetchDDBIconImages() {\n    await Iconizer.getDDBGenericItemImages(true);\n    await Iconizer.getDDBGenericLootImages(true);\n    await Iconizer.getDDBSchoolSpellImages(true);\n  }\n\n\n  /**\n   * Add an item to effects, if available\n   * @param {*} items\n   */\n  static addItemEffectIcons(items) {\n    logger.debug(\"Adding Icons to effects\");\n    items.forEach((item) => {\n      if (item.effects && (item.img && (item.img !== \"\" || item.img !== CONST.DEFAULT_TOKEN))) {\n        item.effects.forEach((effect) => {\n\n          if (!effect.icon || effect.icon === \"\" || effect.icon === CONST.DEFAULT_TOKEN) {\n            effect.icon = item.img;\n          }\n          if (!effect.img || effect.img === \"\" || effect.img === CONST.DEFAULT_TOKEN) {\n            effect.img = item.img;\n          }\n        });\n      }\n\n    });\n    return items;\n  }\n\n  static addActorEffectIcons(actor) {\n    if (!actor.effects) return actor;\n    logger.debug(\"Adding Icons to actor effects\");\n    actor.effects.forEach((effect) => {\n      const name = foundry.utils.getProperty(effect, \"flags.ddbimporter.originName\");\n      if (name) {\n        const actorItem = actor.items.find((i) => i.name === name);\n        if (actorItem) {\n          effect.icon = actorItem.img;\n          effect.img = actorItem.img;\n        }\n      }\n    });\n    return actor;\n  }\n\n  static async updateIcons(items, srdIconUpdate = true, monster = false, monsterName = \"\") {\n    // this will use ddb item icons as a fall back\n    const ddbItemIcons = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-ddb-item-icons\");\n    if (ddbItemIcons) {\n      logger.debug(\"DDB Equipment Icon Match\");\n      items = await Iconizer.getDDBEquipmentIcons(items);\n    }\n\n    const inBuiltIcons = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-inbuilt-icons\");\n    if (inBuiltIcons) {\n      items = await Iconizer.getDDBHintImages(\"class\", items);\n      items = await Iconizer.getDDBHintImages(\"subclass\", items);\n      logger.debug(`Inbuilt icon matching (Monster? ${monster ? monsterName : monster})`);\n      items = await Iconizer.copyInbuiltIcons(items, monster, monsterName);\n    }\n\n    // check for SRD icons\n    const srdIcons = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-srd-icons\");\n    // eslint-disable-next-line require-atomic-updates\n    if (srdIcons && srdIconUpdate) {\n      logger.debug(\"SRD Icon Matching\");\n      items = await Iconizer.copySRDIcons(items);\n    }\n\n    // this will use ddb spell school icons as a fall back\n    const ddbSpellIcons = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-ddb-spell-icons\");\n    if (ddbSpellIcons) {\n      logger.debug(\"DDB Spell School Icon Match\");\n      items = await Iconizer.getDDBSpellSchoolIcons(items, true);\n    }\n\n    // this will use ddb generic icons as a fall back\n    const ddbGenericItemIcons = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-ddb-generic-item-icons\");\n    if (ddbGenericItemIcons) {\n      logger.debug(\"DDB Generic Item Icon Match\");\n      items = await Iconizer.getDDBGenericItemIcons(items, true);\n    }\n\n    // update any generated effects\n    const addEffects = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-add-effects\");\n    if (addEffects) {\n      items = Iconizer.addItemEffectIcons(items);\n    }\n\n    return items;\n  }\n\n\n}\n","// import logger from \"../logger.js\";\nimport logger from \"../logger.js\";\nimport FileHelper from \"./FileHelper.js\";\nimport PatreonHelper from \"./PatreonHelper.js\";\nimport { getCobalt } from \"./Secrets.js\";\nimport DDBSources from \"../apps/DDBSources.js\";\nimport SETTINGS from \"../settings.js\";\nimport { effectModules } from \"../effects/effects.js\";\n\nconst MuncherSettings = {\n\n  disableCharacterActiveEffectSettings: (html) => {\n    $(html).find(\"#character-import-policy-dae-effect-copy\").prop(\"checked\", false);\n    game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-dae-effect-copy\", false);\n    $(html).find(\"#character-import-policy-add-spell-effects\").prop(\"checked\", false);\n    game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-add-spell-effects\", false);\n    $(html).find(\"#character-import-policy-dae-effect-copy\").prop(\"checked\", false);\n    game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-dae-effect-copy\", false);\n    $(html).find(\"#character-import-policy-add-item-effects\").prop(\"checked\", false);\n    game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-add-item-effects\", false);\n    $(html).find(\"#character-import-policy-add-character-effects\").prop(\"checked\", false);\n    game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-add-character-effects\", false);\n    $(html).find(\"#character-import-policy-active-effect-copy\").prop(\"checked\", false);\n    game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-active-effect-copy\", false);\n    $(html).find(\"#character-update-policy-use-chris-premades\").prop(\"checked\", false);\n    game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-use-chris-premades\", false);\n  },\n\n  setRecommendedCharacterActiveEffectSettings: (html) => {\n    $(html).find(\"#character-import-policy-dae-effect-copy\").prop(\"checked\", !effectModules().hasCore);\n    game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-dae-effect-copy\", !effectModules().hasCore);\n    $(html).find(\"#character-import-policy-add-spell-effects\").prop(\"checked\", effectModules().hasCore);\n    game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-add-spell-effects\", effectModules().hasCore);\n    $(html).find(\"#character-import-policy-dae-effect-copy\").prop(\"checked\", false);\n    game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-dae-effect-copy\", false);\n    $(html).find(\"#character-import-policy-add-item-effects\").prop(\"checked\", true);\n    game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-add-item-effects\", true);\n    $(html).find(\"#character-import-policy-add-character-effects\").prop(\"checked\", true);\n    game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-add-character-effects\", true);\n    $(html).find(\"#character-import-policy-active-effect-copy\").prop(\"checked\", false);\n    game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-active-effect-copy\", false);\n    $(html).find(\"#character-update-policy-use-chris-premades\").prop(\"checked\", !effectModules().chrisInstalled);\n    game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-use-chris-premades\", !effectModules().chrisInstalled);\n\n  },\n\n  getInstalledIcon: (name) => {\n    return effectModules()[name] ? \"<i class='fas fa-check-circle' style='color: green'></i>\" : \"<i class='fas fa-times-circle' style='color: red'></i> \";\n  },\n\n  getCharacterImportSettings: () => {\n    const importPolicies1 = [\n      {\n        name: \"name\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-name\"),\n        description: \"Name\",\n      },\n      {\n        name: \"hp\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-hp\"),\n        description: \"HP\",\n      },\n      {\n        name: \"xp\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-xp\"),\n        description: \"XP\",\n      },\n      {\n        name: \"hit-die\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-hit-die\"),\n        description: \"Hit Die\",\n      },\n      {\n        name: \"image\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-image\"),\n        description: \"Image\",\n      },\n      {\n        name: \"bio\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-bio\"),\n        description: \"Bio\",\n      },\n      {\n        name: \"languages\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-languages\"),\n        description: \"Languages\",\n      },\n      {\n        name: \"spell-use\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-spell-use\"),\n        description: \"Spell Slots\",\n      }\n    ];\n    const importPolicies2 = [\n      {\n        name: \"class\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-class\"),\n        description: \"Classes\",\n      },\n      {\n        name: \"feat\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-feat\"),\n        description: \"Features\",\n      },\n      {\n        name: \"weapon\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-weapon\"),\n        description: \"Weapons\",\n      },\n      {\n        name: \"equipment\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-equipment\"),\n        description: \"Other Equipment\",\n      },\n      {\n        name: \"currency\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-currency\"),\n        description: \"Currency\",\n      },\n      {\n        name: \"spell\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-spell\"),\n        description: \"Spells\",\n      },\n    ];\n\n    const effectModulesAvailable = effectModules();\n    const chrisInstalled = effectModulesAvailable.chrisInstalled;\n    const generateSpellEffects = game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-add-spell-effects\");\n    if (generateSpellEffects && !effectModulesAvailable.hasCore) {\n      game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-add-spell-effects\", false);\n    }\n\n    const spellEffectText = `These are highly automated and required the following modules: DAE${MuncherSettings.getInstalledIcon(\"daeInstalled\")}, Midi-QOL${MuncherSettings.getInstalledIcon(\"midiQolInstalled\")}, and Times Up${MuncherSettings.getInstalledIcon(\"timesUp\")}. Optional, but recommended automation modules: Active Auras${MuncherSettings.getInstalledIcon(\"activeAurasInstalled\")}, Active Token Effects${MuncherSettings.getInstalledIcon(\"atlInstalled\")}.`;\n\n    const installedModulesText = `\n<p>Some Active Effects do not require any external modules, many of these will be created regardless of what settings are checked here, some will need these options checked.</p>\n<p>Some Active Effects need DAE${MuncherSettings.getInstalledIcon(\"daeInstalled\")}, and although not required, it is <em>strongly recommended</em> if generating active effects with DDB Importer.</p>\n<p>The following modules are entirely optional but offer pretty animations for your spells and attacks (Automated Animations${MuncherSettings.getInstalledIcon(\"autoAnimationsInstalled\")}). DAE${MuncherSettings.getInstalledIcon(\"daeInstalled\")} offers several effect options that are useful but not provided by the core system. Active Auras${MuncherSettings.getInstalledIcon(\"activeAurasInstalled\")} offers support for things like Paladin auras, as well as more automated effects for spells such as Spike Growth. Active Token Effects${MuncherSettings.getInstalledIcon(\"atlInstalled\")} allows for effects to change tokens size and vision.</p>\n<p>For games looking for high levels of automation, particularly around spells and more complex character features such as Battle Master Manoeuvres, then the \"Midi-QOL\" suite is required. This will allow varying degrees of automation from auto-calculating hit rolls, advantage damage, and even applying it for you (if desired).</p>\n<p>For high automation games you will need some additional modules, but are otherwise not required: Midi-QOL${MuncherSettings.getInstalledIcon(\"midiQolInstalled\")}, and Times Up${MuncherSettings.getInstalledIcon(\"timesUp\")}.</p>\n`;\n    // const importExtras = game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-import-extras\");\n\n    const importConfig = [\n      {\n        name: \"use-inbuilt-icons\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-inbuilt-icons\"),\n        description: \"Use icons from the inbuilt dictionary. (High coverage of items, feats, and spells).\",\n        enabled: true,\n      },\n      {\n        name: \"use-srd-icons\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-srd-icons\"),\n        description: \"Use icons from the SRD compendium. (This can take a while).\",\n        enabled: true,\n      },\n      {\n        name: \"use-ddb-spell-icons\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-ddb-spell-icons\"),\n        description: \"Use spell school icons from D&DBeyond.\",\n        enabled: true,\n      },\n      {\n        name: \"use-ddb-item-icons\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-ddb-item-icons\"),\n        description: \"Use equipment icons from D&DBeyond (where they exist).\",\n        enabled: true,\n      },\n      {\n        name: \"use-ddb-generic-item-icons\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-ddb-generic-item-icons\"),\n        description: \"Use D&D Beyond generic item type images, if available (final fallback)\",\n        enabled: true,\n      },\n      {\n        name: \"use-full-description\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-full-description\"),\n        description: \"For actions use full description and snippets, else use snippets only.\",\n        enabled: true,\n      },\n      {\n        name: \"add-description-to-chat\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"add-description-to-chat\"),\n        description: \"Add the snippet to the chat card (otherwise will use description).\",\n        enabled: true,\n      },\n      // {\n      //   name: \"use-actions-as-features\",\n      //   isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-actions-as-features\"),\n      //   description:\n      //     \"Import D&D Beyond Actions as Features, not weapons.\",\n      //   enabled: true,\n      // },\n      {\n        name: \"use-action-and-feature\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-action-and-feature\"),\n        description:\n          \"[CAUTION] If a feature is marked as an action, import both the action and the feature. This might lead to some weird behaviour.\",\n        enabled: true,\n      },\n      {\n        name: \"ignore-non-ddb-items\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-ignore-non-ddb-items\"),\n        description:\n          \"Ignore items on character sheet that have not been imported from D&D Beyond. This will remove items that have been removed from the DDB character since the last import, but will keep items added to the character within Foundry.\",\n        enabled: true,\n      },\n      {\n        name: \"create-companions\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-create-companions\"),\n        description: \"Generate summon monster actors? (Requires item/actor create permissions)\",\n        enabled: true,\n      },\n    ];\n\n    const advancedImportConfig = [\n      {\n        name: \"use-override\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-override\"),\n        title: \"Replace Items using those in your Override compendium\",\n        description:\n          \"Use existing items from <i>ddb-import Override compendium</i>, rather than parsing from DDB. This is useful if you want to place customised items into the compendium for use by characters.\",\n        enabled: true,\n      },\n      {\n        name: \"use-existing\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-existing\"),\n        title: \"[Caution] Replace Items using ddb-importer compendiums\",\n        description:\n          \"Use existing items from <i>ddb-import compendiums</i>, rather than parsing from DDB. This is useful if you have customised the items in the compendium, although you will lose any custom effects applied by this module e.g. Improved Divine Smite. Please consider marking the item you wish to keep as ignored by import instead.\",\n        enabled: true,\n      },\n      {\n        name: \"use-srd\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-srd\"),\n        title: \"[Caution] Replace Items using SRD compendiums\",\n        description:\n          \"Use the <i>SRD compendiums</i>, rather than DDB. Importing using SRD will not include features like fighting style and divine smite in damage calculations. Please consider marking the item you wish to keep as ignored by import instead.\",\n        enabled: true,\n      },\n    ];\n\n    const effectImportConfig = [\n      {\n        name: \"add-character-effects\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-add-character-effects\"),\n        title: \"Generate Automation Effects for Character Features/Racial Traits/Feats/Backgrounds\",\n        description: null,\n        enabled: true,\n      },\n      {\n        name: \"add-item-effects\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-add-item-effects\"),\n        title: \"Generate Automation Effects for Equipment\",\n        description: null,\n        enabled: true,\n      },\n      {\n        name: \"add-spell-effects\",\n        isChecked: generateSpellEffects && effectModulesAvailable.hasCore,\n        title: \"Generate Automation Effects for Spells\",\n        description: spellEffectText,\n        enabled: effectModulesAvailable.hasCore,\n      },\n      {\n        name: \"use-chris-premades\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-chris-premades\"),\n        title: \"Use Automation Effects from Chris's Premades module?\",\n        description: `Chris's Premades ${MuncherSettings.getInstalledIcon(\"chrisInstalled\")} offer even more automation for all aspects of D&D, but have even more pre-requisites. You should investigate and set up this module before importing with this option selected. Requires Chris's Premades ${MuncherSettings.getInstalledIcon(\"chrisInstalled\")} module.<br>These will replace any effects created by DDB Importer.`,\n        enabled: chrisInstalled,\n      },\n      {\n        name: \"active-effect-copy\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-active-effect-copy\"),\n        title: \"Retain Active Effects?\",\n        description:\n          \"Retain existing Active Effects, this will try and transfer any existing effects on the actor such as custom effects, effects from conditions or existing spells. Untick this option if you experience <i>odd</i> behaviour.\",\n        enabled: true,\n      },\n    ];\n\n    const syncConfig = [\n      {\n        name: \"action-use\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-action-use\"),\n        description: \"Action Uses\",\n        enabled: true,\n      },\n      {\n        name: \"currency\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-currency\"),\n        description: \"Currency\",\n        enabled: true,\n      },\n      {\n        name: \"deathsaves\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-deathsaves\"),\n        description: \"Death Saves\",\n        enabled: true,\n      },\n      {\n        name: \"equipment\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-equipment\"),\n        description: \"Equipment\",\n        enabled: true,\n      },\n      {\n        name: \"condition\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-condition\"),\n        description: \"Conditions/Exhaustion\",\n        enabled: true,\n      },\n      {\n        name: \"hitdice\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-hitdice\"),\n        description: \"Hit Dice/Short Rest\",\n        enabled: true,\n      },\n      {\n        name: \"hitpoints\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-hitpoints\"),\n        description: \"Hit Points\",\n        enabled: true,\n      },\n      {\n        name: \"inspiration\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-inspiration\"),\n        description: \"Inspiration\",\n        enabled: true,\n      },\n      {\n        name: \"spells-prepared\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-spells-prepared\"),\n        description: \"Spells Prepared\",\n        enabled: true,\n      },\n      {\n        name: \"spells-slots\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-spells-slots\"),\n        description: \"Spell Slots\",\n        enabled: true,\n      },\n      {\n        name: \"spells-sync\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-spells-sync\"),\n        description: \"Spells Known\",\n        enabled: false,\n      },\n      {\n        name: \"xp\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-xp\"),\n        description: \"XP\",\n        enabled: true,\n      },\n    ];\n\n    const extrasConfig = [];\n\n    const uploadDir = game.settings.get(SETTINGS.MODULE_ID, \"image-upload-directory\");\n    const dataDirSet = !FileHelper.BAD_DIRS.includes(uploadDir);\n    const tier = PatreonHelper.getPatreonTier();\n    const tiers = PatreonHelper.calculateAccessMatrix(tier);\n\n    const result = {\n      installedModulesText,\n      importPolicies1,\n      importPolicies2,\n      importConfig,\n      extrasConfig,\n      advancedImportConfig,\n      effectImportConfig,\n      dataDirSet,\n      syncConfig,\n      tiers,\n    };\n\n    return result;\n  },\n\n  toggleByName(name, value = null) {\n    const checkbox = document.querySelector(`input[type=\"checkbox\"][name=\"${name}\"]`);\n    if (value === null) checkbox.checked = !checkbox.checked;\n    else checkbox.checked = value;\n  },\n\n  updateActorSettings: (html, event) => {\n    const selection = event.currentTarget.dataset.section;\n    const checked = event.currentTarget.checked;\n\n    logger.debug(`Updating munching-policy-${selection} to ${checked}`);\n    if (selection === \"add-description-to-chat\") {\n      game.settings.set(SETTINGS.MODULE_ID, \"add-description-to-chat\", checked);\n      game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-use-full-description\", false);\n      MuncherSettings.toggleByName(\"character-import-policy-use-full-description\", false);\n      // $(html).find(\"#character-import-policy-use-full-description\").prop(\"checked\", false);\n    } else {\n      game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-\" + selection, checked);\n    }\n\n    // if (selection === \"dae-copy\" && checked) {\n    //   $(html).find(\"#character-import-policy-dae-effect-copy\").prop(\"checked\", false);\n    //   game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-dae-effect-copy\", false);\n    // } else if (selection === \"dae-effect-copy\" && checked) {\n    //   $(html).find(\"#character-import-policy-add-item-effects\").prop(\"checked\", true);\n    //   game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-add-item-effects\", true);\n    //   $(html).find(\"#character-import-policy-add-character-effects\").prop(\"checked\", true);\n    //   game.settings.set(SETTINGS.MODULE_ID, \"character-update-policy-add-character-effects\", true);\n    // }\n\n    if (selection === \"use-full-description\") {\n      game.settings.set(SETTINGS.MODULE_ID, \"add-description-to-chat\", false);\n      // $(html).find(\"#character-import-policy-add-description-to-chat\").prop(\"checked\", false);\n      MuncherSettings.toggleByName(\"character-import-policy-add-description-to-chat\", false);\n    }\n  },\n\n  getCompendiumFolderLookups: (type) => {\n    const compendiumFolderSetting = game.settings.settings.get(`ddb-importer.munching-selection-compendium-folders-${type}`);\n    const settingValue = game.settings.get(SETTINGS.MODULE_ID, `munching-selection-compendium-folders-${type}`);\n\n    let selections = [];\n    for (const [key, value] of Object.entries(compendiumFolderSetting.choices)) {\n      selections.push({\n        key: key,\n        label: value,\n        selected: key === settingValue,\n      });\n    }\n\n    return selections;\n  },\n\n  getMuncherSettings: (includeHomebrew = true) => {\n    const cobalt = getCobalt() != \"\";\n    const betaKey = PatreonHelper.getPatreonKey() != \"\";\n    const tier = PatreonHelper.getPatreonTier();\n    const tiers = PatreonHelper.calculateAccessMatrix(tier);\n    const effectModulesAvailable = effectModules();\n    const chrisInstalled = effectModulesAvailable.chrisInstalled;\n    const compendiumFolderMonsterStyles = MuncherSettings.getCompendiumFolderLookups(\"monster\");\n    const compendiumFolderSpellStyles = MuncherSettings.getCompendiumFolderLookups(\"spell\");\n    const compendiumFolderItemStyles = MuncherSettings.getCompendiumFolderLookups(\"item\");\n    const spellEffectText = `Create Automation Effects for spells?<br>\nThese effects automate a lot of common spells, but do require the use of a number of external modules, including \"Midi-QOL\", which potentially introduces a much higher level of automation and complexity above the base Foundry system.<br>\nThese require the following modules: DAE${MuncherSettings.getInstalledIcon(\"daeInstalled\")}, Midi-QOL${MuncherSettings.getInstalledIcon(\"midiQolInstalled\")}, and Times Up${MuncherSettings.getInstalledIcon(\"timesUp\")} as a minimum.<br>\nEffects can also be created to use Active Auras${MuncherSettings.getInstalledIcon(\"activeAurasInstalled\")}, Active Token Effects${MuncherSettings.getInstalledIcon(\"atlInstalled\")}, Token Magic FX${MuncherSettings.getInstalledIcon(\"tokenMagicInstalled\")}, and Automated Animations${MuncherSettings.getInstalledIcon(\"autoAnimationsInstalled\")}.\n`;\n\n    const generateSpellEffects = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-add-spell-effects\");\n    if (generateSpellEffects && !effectModulesAvailable.hasCore) {\n      game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-add-spell-effects\", false);\n    }\n\n    const enableSources = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-source-filter\");\n    const sourceArray = enableSources\n      ? game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-muncher-sources\").flat()\n      : [];\n    const sourcesSelected = enableSources && sourceArray.length > 0;\n    const sourceNames = DDBSources.getSourcesLookups(sourceArray).filter((source) => source.selected).map((source) => source.label);\n    const homebrewDescription = sourcesSelected\n      ? \"Include homebrew? SOURCES SELECTED! You can't import homebrew with a source filter selected\"\n      : \"Include homebrew?\";\n    const sourceDescription = `Importing from the following sources only: ${sourceNames.join(\", \")}`;\n\n    const itemConfig = [\n      {\n        name: \"use-ddb-item-icons\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-ddb-item-icons\"),\n        description: \"Use D&D Beyond item images, if available\",\n        enabled: true,\n      },\n      {\n        name: \"use-ddb-generic-item-icons\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-ddb-generic-item-icons\"),\n        description: \"Use D&D Beyond generic item type images, if available (final fallback)\",\n        enabled: true,\n      },\n      {\n        name: \"add-effects\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-add-effects\"),\n        description: \"Add Automation effects to equipment?\",\n        enabled: true,\n      },\n      {\n        name: \"item-homebrew\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-item-homebrew\"),\n        description: homebrewDescription,\n        enabled: !sourcesSelected,\n      },\n      {\n        name: \"item-homebrew-only\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-item-homebrew-only\"),\n        description: \"Only import homebrew items?\",\n        enabled: !sourcesSelected,\n      },\n    ];\n\n    const spellConfig = [\n      {\n        name: \"use-ddb-spell-icons\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-ddb-spell-icons\"),\n        description: \"If no other icon, use the D&DBeyond spell school icon.\",\n        enabled: true,\n      },\n      {\n        name: \"add-spell-effects\",\n        isChecked: generateSpellEffects && effectModulesAvailable.hasCore,\n        description: spellEffectText,\n        enabled: effectModulesAvailable.hasCore,\n      },\n      {\n        name: \"spell-homebrew\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-spell-homebrew\"),\n        description: homebrewDescription,\n        enabled: !sourcesSelected,\n      },\n      {\n        name: \"spell-homebrew-only\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-spell-homebrew-only\"),\n        description: \"Only import homebrew spells?\",\n        enabled: !sourcesSelected,\n      },\n    ];\n\n    const tokenizerReady = game.modules.get(\"vtta-tokenizer\")?.active;\n\n    const basicMonsterConfig = [\n      {\n        name: \"hide-description\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-hide-description\"),\n        description: \"Hide monster action description from players?\",\n        enabled: true,\n      },\n      {\n        name: \"monster-items\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-items\"),\n        description: \"[Experimental] Load attack/weapon items from DDB compendium instead of parsing action/attack? (Poor success rate).\",\n        enabled: true,\n      },\n      {\n        name: \"monster-use-item-ac\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-use-item-ac\"),\n        description: \"Use AC items instead of setting a flat AC? (Recommended if using spell effects like shield on NPC's).\",\n        enabled: true,\n      },\n      {\n        name: \"use-full-token-image\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-full-token-image\"),\n        description: \"Use avatar image for token rather than token image (full art).\",\n        enabled: true,\n      },\n      {\n        name: \"use-token-avatar-image\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-token-avatar-image\"),\n        description: \"Use token image for avatar rather than avatar image (close up).\",\n        enabled: true,\n      },\n      {\n        name: \"use-srd-monster-images\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-srd-monster-images\"),\n        description: \"Use images from the SRD compendiums.\",\n        enabled: true,\n      },\n      {\n        name: \"update-images\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-images\"),\n        description: \"[CAUTION] Update Monster images on existing npcs? (This will dramatically slow down re-munching).\",\n        enabled: true,\n      },\n      {\n        name: \"monster-tokenize\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-tokenize\"),\n        description: \"Auto-Tokenize monsters token image? (Adds Tokenizer default token ring using the Tokenizer module).\",\n        enabled: tokenizerReady,\n      },\n      {\n        name: \"monster-retain-biography\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-retain-biography\"),\n        description: \"Should monsters retain existing biography?\",\n        enabled: true,\n      },\n      {\n        name: \"monster-strip-name\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-strip-name\"),\n        description: \"Strip uses and recharge information from action names?\",\n        enabled: true,\n      },\n      {\n        name: \"monster-set-legendary-resource-bar\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-set-legendary-resource-bar\"),\n        description: \"Monsters display legendary resources on bar2? (Like the SRD Monsters).\",\n        enabled: true,\n      },\n      {\n        name: \"add-monster-effects\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-add-monster-effects\"),\n        description: `Generate Automation Effects that use Midi-QOL on monster attacks/features? <br>These are for a highly automated game, and are things such as managing abilities with conditions that have saves every round, or attacks which apply conditions such as frightened or prone.<br>Requires DAE${MuncherSettings.getInstalledIcon(\"daeInstalled\")}, Midi-QOL${MuncherSettings.getInstalledIcon(\"midiQolInstalled\")}.`,\n        enabled: effectModulesAvailable.hasMonster,\n      },\n    ];\n\n    const homebrewMonsterConfig = includeHomebrew\n      ? [\n        {\n          name: \"monster-homebrew\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-homebrew\") && !sourcesSelected,\n          description: homebrewDescription,\n          enabled: tiers.homebrew && !sourcesSelected,\n        },\n        {\n          name: \"monster-homebrew-only\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-homebrew-only\") && !sourcesSelected,\n          description: \"Homebrew monsters only? (Otherwise both)\",\n          enabled: tiers.homebrew && !sourcesSelected,\n        },\n        {\n          name: \"monster-exact-match\",\n          isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-exact-match\"),\n          description: \"Exact name match?\",\n          enabled: tiers.homebrew,\n        }\n      ]\n      : [];\n\n    const monsterConfig = basicMonsterConfig.concat(homebrewMonsterConfig);\n\n    const genericConfig = [\n      {\n        name: \"update-existing\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-existing\"),\n        description: \"Update existing things.\",\n        enabled: true,\n      },\n      {\n        name: \"use-inbuilt-icons\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-inbuilt-icons\"),\n        description: \"Use icons from the inbuilt dictionary. (High coverage, recommended, fast).\",\n        enabled: true,\n      },\n      {\n        name: \"use-srd-icons\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-srd-icons\"),\n        description: \"Use icons from the SRD compendiums.\",\n        enabled: true,\n      },\n      {\n        name: \"download-images\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-download-images\"),\n        description: \"Download D&D Beyond images (takes longer and needs space).\",\n        enabled: true,\n      },\n      {\n        name: \"remote-images\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-remote-images\"),\n        description: \"Use D&D Beyond remote images (a lot quicker)\",\n        enabled: true,\n      },\n      {\n        name: \"use-chris-premades\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-chris-premades\"),\n        description: `Use Automation Effects from Chris's Premades module? These provide high quality automations for spells, features, monsters, etc. (Requires Chris's Premades ${MuncherSettings.getInstalledIcon(\"chrisInstalled\")} module).<br>These will replace any effects created by DDB Importer.`,\n        enabled: chrisInstalled,\n      },\n      {\n        name: \"use-srd\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-srd\"),\n        description:\n          \"[CAUTION] Use SRD compendium things instead of importing. This is not recommended, and may break adventure munching functionality.\",\n        enabled: true,\n      },\n      {\n        name: \"exclude-legacy\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-exclude-legacy\"),\n        description: \"Exclude legacy monsters/races from import? These are replaced by newer versions e.g. in Monsters of the Multiverse.\",\n        enabled: true,\n      },\n      {\n        name: \"legacy-postfix\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-legacy-postfix\"),\n        description: \"Append (Legacy) to Legacy monster/race names? These are replaced by newer versions e.g. in Monsters of the Multiverse.\",\n        enabled: true,\n      },\n      {\n        name: \"use-source-filter\",\n        isChecked: enableSources,\n        description: \"Restrict import to specific source book(s)? (DDB sets this as the <i>first</i> book a monster appears in).\",\n        enabled: true,\n      }\n    ];\n\n    const worldUpdateConfig = [\n      {\n        name: \"update-world-monster-update-images\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-world-monster-update-images\"),\n        description: \"Update Monster images?\",\n        enabled: true,\n      },\n      {\n        name: \"update-world-monster-retain-biography\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-world-monster-retain-biography\"),\n        description: \"Retain existing biography?\",\n        enabled: true,\n      },\n    ];\n\n    const resultData = {\n      cobalt,\n      genericConfig,\n      monsterConfig,\n      spellConfig,\n      itemConfig,\n      worldUpdateConfig,\n      beta: betaKey && cobalt,\n      tiers,\n      compendiumFolderMonsterStyles,\n      compendiumFolderItemStyles,\n      compendiumFolderSpellStyles,\n      sourcesSelected,\n      sourceDescription,\n      enableSources,\n      version: CONFIG.DDBI.version,\n    };\n\n    // console.warn(resultData);\n\n    return resultData;\n  },\n\n  // eslint-disable-next-line complexity\n  updateMuncherSettings: (html, event, dialog) => {\n    const selection = event.currentTarget.dataset.section;\n    const checked = event.currentTarget.checked;\n\n    logger.debug(`Updating munching-policy-${selection} to ${checked}`);\n\n    game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-\" + selection, checked);\n\n    switch (selection) {\n      case \"monster-homebrew\": {\n        if (!checked) {\n          game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-monster-homebrew-only\", false);\n          $(\"#munching-policy-monster-homebrew-only\").prop(\"checked\", false);\n        }\n        break;\n      }\n      case \"monster-homebrew-only\": {\n        if (checked) {\n          game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-monster-homebrew\", true);\n          $(\"#munching-policy-monster-homebrew\").prop(\"checked\", true);\n        }\n        break;\n      }\n      case \"spell-homebrew\": {\n        if (!checked) {\n          game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-spell-homebrew-only\", false);\n          $(\"#munching-policy-spell-homebrew-only\").prop(\"checked\", false);\n        }\n        break;\n      }\n      case \"spell-homebrew-only\": {\n        if (checked) {\n          game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-spell-homebrew\", true);\n          $(\"#munching-policy-spell-homebrew\").prop(\"checked\", true);\n        }\n        break;\n      }\n      case \"item-homebrew\": {\n        if (!checked) {\n          game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-item-homebrew-only\", false);\n          $(\"#munching-policy-item-homebrew-only\").prop(\"checked\", false);\n        }\n        break;\n      }\n      case \"item-homebrew-only\": {\n        if (checked) {\n          game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-item-homebrew\", true);\n          $(\"#munching-policy-item-homebrew\").prop(\"checked\", true);\n        }\n        break;\n      }\n      case \"remote-images\": {\n        if (checked) {\n          game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-download-images\", false);\n          $(\"#munching-generic-policy-download-images\").prop(\"checked\", false);\n        }\n        break;\n      }\n      case \"download-images\": {\n        if (checked) {\n          game.settings.set(SETTINGS.MODULE_ID, \"munching-policy-remote-images\", false);\n          $(\"#munching-generic-policy-remote-images\").prop(\"checked\", false);\n        }\n        break;\n      }\n      case \"use-source-filter\": {\n        $(\"#munch-source-select\").prop(\"disabled\", !checked);\n        $(\"#munch-source-div\").toggleClass(\"ddbimporter-hidden\");\n        dialog.render(true);\n        break;\n      }\n      // no default\n    }\n  },\n};\n\nexport default MuncherSettings;\n","import DICTIONARY from \"../dictionary.js\";\nimport logger from \"../logger.js\";\n\nexport default class NameMatcher {\n\n  static getMonsterNames(name) {\n    let magicNames = [name, name.toLowerCase()];\n\n    // +2 sword\n    let frontPlus = name.match(/^(\\+\\d*)\\s*(.*)/);\n    if (frontPlus) {\n      magicNames.push(`${frontPlus[2].trim()}, ${frontPlus[1]}`.toLowerCase().trim());\n    }\n\n    // sword +2\n    let backPlus = name.match(/(.*)\\s*(\\+\\d*)$/);\n    if (backPlus) {\n      magicNames.push(`${backPlus[1].trim()}, ${backPlus[2]}`.toLowerCase().trim());\n    }\n\n    return magicNames;\n  }\n\n  static getLooseNames(name, extraNames = [], removeMagic = true) {\n    let looseNames = new Set(extraNames.map((name) => name.toLowerCase()));\n    looseNames.add(name.toLowerCase());\n    looseNames.add(name.replace(\",\", \"\").toLowerCase());\n    let refactNameArray = name.split(\"(\")[0].trim().split(\", \");\n    refactNameArray.unshift(refactNameArray.pop());\n    const refactName = refactNameArray.join(\" \").trim();\n    looseNames.add(refactName.toLowerCase());\n\n    let deconNameArray = name.replace(\"(\", \"\").replace(\")\", \"\").trim().split(\",\");\n    deconNameArray.unshift(deconNameArray.pop());\n    const deconName = deconNameArray.join(\" \").trim();\n    looseNames.add(deconName.toLowerCase());\n\n    // word smart quotes are the worst\n    looseNames.add(name.replace(\"'\", \"’\").toLowerCase());\n    looseNames.add(name.replace(\"’\", \"'\").toLowerCase());\n    looseNames.add(name.replace(\" armor\", \"\").toLowerCase());\n    looseNames.add(name.replace(/s$/, \"\").toLowerCase()); // trim s, e.g. crossbow bolt(s)\n    looseNames.add(name.replace(\",\", \"\").toLowerCase()); // +1 weapons etc\n    looseNames.add(`${name} attack`.toLowerCase()); // Claw Attack\n    looseNames.add(name.replace(\" (1 day)\", \"\").toLowerCase());\n    looseNames.add(name.replace(\" (10-foot)\", \"\").toLowerCase());\n    looseNames.add(name.replace(\" (bag of 20)\", \"\").toLowerCase());\n    looseNames.add(name.replace(\" (bag of 1000)\", \"\").toLowerCase());\n    looseNames.add(name.replace(\" (per day)\", \"\").toLowerCase());\n    looseNames.add(name.replace(\"(10 foot)\", \"(10-foot)\").toLowerCase());\n    looseNames.add(name.replace(\"(10-foot)\", \"(10 foot)\").toLowerCase());\n    looseNames.add(name.replace(\"(0 - Cantrip)\", \"Cantrip\").toLowerCase());\n    looseNames.add(name.replace(/\\((\\d..) Level\\)/, \"$1 Level\").toLowerCase());\n\n    if (removeMagic || (!removeMagic && name.split(\",\")[0].length > 1 && !(/\\+\\d$/).test(name.trim()))) {\n      looseNames.add(name.split(\",\")[0].toLowerCase());\n    }\n\n    if (removeMagic) {\n      let refactNamePlusArray = name\n        .replace(/\\+\\d*\\s*/, \"\")\n        .trim()\n        .split(\"(\")[0]\n        .trim()\n        .split(\", \");\n      refactNamePlusArray.unshift(refactNamePlusArray.pop());\n      const refactNamePlus = refactNamePlusArray.join(\" \").trim();\n      looseNames.add(refactNamePlus.toLowerCase());\n      looseNames.add(\n        refactName\n          .replace(/\\+\\d*\\s*/, \"\")\n          .trim()\n          .toLowerCase()\n      );\n      looseNames.add(\n        refactName\n          .replace(/\\+\\d*\\s*/, \"\")\n          .trim()\n          .toLowerCase()\n          .replace(/s$/, \"\")\n      );\n    }\n\n    return Array.from(looseNames);\n  }\n\n  // The monster setting is less vigorous!\n  static looseItemNameMatch(item, items, loose = false, monster = false, magicMatch = false) {\n    // first pass is a strict match\n    let matchingItem = items.find((matchItem) => {\n      let activationMatch = false;\n      const extraNames = foundry.utils.getProperty(matchItem, \"flags.ddbimporter.dndbeyond.alternativeNames\") ?? [];\n\n      const itemActivationProperty = Object.prototype.hasOwnProperty.call(item.system, \"activation\");\n      const matchItemActivationProperty = Object.prototype.hasOwnProperty.call(item.system, \"activation\");\n\n      if (itemActivationProperty && item.system?.activation?.type == \"\") {\n        activationMatch = true;\n      } else if (matchItemActivationProperty && itemActivationProperty) {\n        // I can't remember why I added this. Maybe I was concerned about identical named items with\n        // different activation times?\n        // maybe I just want to check it exists?\n        // causing issues so changed.\n        // activationMatch = matchItem.system.activation.type === item.system.activation.type;\n        activationMatch = matchItemActivationProperty && itemActivationProperty;\n      } else if (!itemActivationProperty) {\n        activationMatch = true;\n      }\n\n      const nameMatch = item.name === matchItem.name || extraNames.includes(item.name);\n      const isMatch = nameMatch && item.type === matchItem.type && activationMatch;\n      return isMatch;\n    });\n\n    if (!matchingItem && monster) {\n      matchingItem = items.find((matchItem) => {\n        const monsterNames = NameMatcher.getMonsterNames(matchItem.name);\n        const monsterMatch = monsterNames.includes(item.name.toLowerCase())\n          && DICTIONARY.types.monster.includes(matchItem.type)\n          && DICTIONARY.types.inventory.includes(item.type);\n        return monsterMatch;\n      });\n    }\n\n    if (!matchingItem && magicMatch) {\n      // is this an inverse match for updates?\n      // if so strip out the non-magic names, we want to match on the magic names\n      const magicName = item.name\n        .replace(/(.*)\\s+(\\+\\d*)\\s*/, \"$1, $2\")\n        .trim()\n        .toLowerCase();\n      const magicName2 = item.name\n        .replace(/(.*)\\s+(\\+\\d*)\\s*/, \"$2 $1\")\n        .trim()\n        .toLowerCase();\n      matchingItem = items.find((matchItem) => [magicName, magicName2].includes(matchItem.name.trim().toLowerCase()));\n    }\n\n    if (!matchingItem && loose) {\n      const extraNames = foundry.utils.getProperty(item, \"flags.ddbimporter.dndbeyond.alternativeNames\") ?? [];\n      const looseNames = NameMatcher.getLooseNames(item.name, extraNames, !magicMatch);\n      // console.warn(\"loose names\", looseNames);\n      for (const looseName of looseNames) {\n        matchingItem = items.find((matchItem) => {\n          const looseItemMatch = (looseName === matchItem.name.toLowerCase()\n            || looseName === matchItem.name.toLowerCase().replace(\" armor\", \"\"))\n            && DICTIONARY.types.inventory.includes(item.type)\n            && DICTIONARY.types.inventory.includes(matchItem.type);\n          return looseItemMatch;\n        });\n        if (matchingItem) {\n          logger.debug(`Broke on ${looseName}`, matchingItem);\n          break;\n        }\n      }\n\n      // super loose name match!\n      if (!matchingItem) {\n        // still no matching item, lets do a final pass\n        matchingItem = items.find((matchItem) =>\n          looseNames.includes(matchItem.name.split(\"(\")[0].trim().toLowerCase())\n        );\n      }\n    }\n    return matchingItem;\n  }\n}\n","import DDBMuncher from \"../apps/DDBMuncher.js\";\nimport logger from \"../logger.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"./DDBProxy.js\";\nimport utils from \"./utils.js\";\n\nasync function setLocalStorage(key, value) {\n  // remove item if null or undefined\n  if (value === null || value === undefined) {\n    localStorage.removeItem(key);\n  } else {\n    localStorage.setItem(key, value);\n  }\n}\n\n\nconst PatreonHelper = {\n\n  getPatreonKey: (local = false) => {\n    if (local) {\n      return localStorage.getItem(\"ddb-patreon-key\");\n    } else {\n      return game.settings.get(SETTINGS.MODULE_ID, \"beta-key\");\n    }\n  },\n\n  setPatreonKey: async (key, local = false) => {\n    if (local) {\n      setLocalStorage(\"ddb-patreon-key\", key);\n    } else {\n      await game.settings.set(SETTINGS.MODULE_ID, \"beta-key\", key);\n    }\n  },\n\n  getPatreonUser: (local = false) => {\n    if (local) {\n      return localStorage.getItem(\"ddb-patreon-user\");\n    } else {\n      return game.settings.get(SETTINGS.MODULE_ID, \"patreon-user\");\n    }\n  },\n\n  setPatreonUser: async (user, local = false) => {\n    if (local) {\n      setLocalStorage(\"ddb-patreon-user\", user);\n    } else {\n      await game.settings.set(SETTINGS.MODULE_ID, \"patreon-user\", user);\n    }\n  },\n\n  getPatreonTier: (local = false) => {\n    if (local) {\n      return localStorage.getItem(\"ddb-patreon-tier\");\n    } else {\n      return game.settings.get(SETTINGS.MODULE_ID, \"patreon-tier\");\n    }\n  },\n\n  setPatreonTier: async (local = false) => {\n    const tier = await PatreonHelper.fetchPatreonTier(local);\n    if (local) {\n      setLocalStorage(\"ddb-patreon-tier\", tier);\n    } else {\n      await game.settings.set(SETTINGS.MODULE_ID, \"patreon-tier\", tier);\n    }\n  },\n\n  fetchPatreonTier: async (local = false) => {\n    if (DDBProxy.isCustom()) return { success: true, message: \"custom proxy\", data: \"CUSTOM\" };\n    const key = PatreonHelper.getPatreonKey(local);\n    const parsingApi = DDBProxy.getProxy();\n    const body = { betaKey: key };\n\n    return new Promise((resolve, reject) => {\n      fetch(`${parsingApi}/patreon/tier`, {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          if (!data.success) {\n            DDBMuncher.munchNote(`API Failure: ${data.message}`);\n            reject(data.message);\n          }\n          let currentEmail = PatreonHelper.getPatreonUser(local);\n          logger.debug(\"Fetched Patreon tier information\", {\n            user: data.email,\n            tier: data.data\n          });\n          if (data.email !== currentEmail) {\n            PatreonHelper.setPatreonUser(data.email, local).then(() => {\n              resolve(data.data);\n            });\n          } else {\n            resolve(data.data);\n          }\n        })\n        .catch((error) => reject(error));\n    });\n  },\n\n  getPatreonValidity: async (betaKey) => {\n    if (DDBProxy.isCustom()) return { success: true, message: \"custom proxy\", data: true };\n    const parsingApi = DDBProxy.getProxy();\n    const body = { betaKey: betaKey };\n\n    return new Promise((resolve, reject) => {\n      fetch(`${parsingApi}/patreon/valid`, {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body), // body data type must match \"Content-Type\" header\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          resolve(data);\n        })\n        .catch((error) => reject(error));\n    });\n  },\n\n  calculateAccessMatrix: (tier) => {\n    const godTier = tier === \"GOD\";\n    const undyingTier = tier === \"UNDYING\";\n    const coffeeTier = tier === \"COFFEE\";\n    const custom = tier === \"CUSTOM\" || DDBProxy.isCustom();\n\n    const tiers = {\n      god: godTier,\n      undying: undyingTier,\n      custom: custom,\n      coffee: coffeeTier,\n      source: godTier || undyingTier || coffeeTier || custom,\n      experimentalMid: godTier || undyingTier,\n      homebrew: godTier || undyingTier || coffeeTier || custom,\n      all: godTier || undyingTier || coffeeTier || custom,\n      supporter: godTier || undyingTier || coffeeTier,\n      not: !godTier && !undyingTier && !coffeeTier && !custom,\n    };\n\n    return tiers;\n  },\n\n  checkPatreon: async (local = false) => {\n    const tier = await PatreonHelper.fetchPatreonTier(local);\n    const matrix = PatreonHelper.calculateAccessMatrix(tier);\n    return matrix;\n  },\n\n  linkToPatreon: async () => {\n\n    const proxy = DDBProxy.getProxy();\n    const patreonId = \"oXQUxnRAbV6mq2DXlsXY2uDYQpU-Ea2ds0G_5hIdi0Bou33ZRJgvV8Ub3zsEQcHp\";\n    const patreonAuthUrl = `${proxy}/patreon/auth`;\n    const patreonScopes = encodeURI(\"identity identity[email]\");\n\n    const socketOptions = {\n      transports: ['websocket', 'polling', 'flashsocket'],\n      // reconnection: false,\n      // reconnectionAttempts: 10,\n    };\n    const socket = io(`${proxy}/`, socketOptions);\n\n    socket.on(\"connect\", () => {\n      logger.debug(\"DDB Muncher socketID\", socket.id);\n      const serverDetails = {\n        id: socket.id,\n        world: game.world.title,\n        userId: game.userId,\n      };\n      socket.emit(\"register\", serverDetails);\n\n    });\n\n    socket.on('registered', (data) => {\n      logger.info(`Foundry instance registered with DDB Muncher Proxy`);\n      logger.debug(data);\n      utils.renderPopup(\"web\", `https://www.patreon.com/oauth2/authorize?response_type=code&client_id=${patreonId}&redirect_uri=${patreonAuthUrl}&state=${data.userHash}&scope=${patreonScopes}`);\n    });\n\n    socket.on('auth', (data) => {\n      logger.debug(`Response from auth socket!`, data);\n\n      CONFIG.DDBI.POPUPS[\"web\"].close();\n\n      game.settings.set(SETTINGS.MODULE_ID, \"beta-key\", data.key);\n      game.settings.set(SETTINGS.MODULE_ID, \"patreon-user\", data.email);\n      game.settings.set(SETTINGS.MODULE_ID, \"patreon-tier\", data.tier);\n\n      $('#ddb-patreon-user').text(data.email);\n      $('#ddb-patreon-tier').text(data.tier);\n      $('#ddb-patreon-valid').text(\"True\");\n      $('#ddb-beta-key').val(data.key);\n\n      socket.disconnect();\n    });\n\n    socket.on('error', (data) => {\n      logger.error(`Error Response from socket!`, data);\n      socket.disconnect();\n    });\n  },\n\n};\n\nexport default PatreonHelper;\n","import logger from \"../logger.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"./DDBProxy.js\";\nimport PatreonHelper from \"./PatreonHelper.js\";\n\nfunction isJSON(str) {\n  try {\n    return (JSON.parse(str) && !!str && str !== null);\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function isLocalCobalt(keyPostfix) {\n  return keyPostfix && keyPostfix !== \"\" && localStorage.getItem(`ddb-cobalt-cookie-${keyPostfix}`) !== null;\n}\n\nexport function getCobalt(keyPostfix = \"\") {\n  let cobalt;\n  const localCookie = game.settings.get(SETTINGS.MODULE_ID, \"cobalt-cookie-local\");\n  const characterCookie = isLocalCobalt(keyPostfix);\n\n  logger.debug(`Getting Cookie: Key postfix? \"${keyPostfix}\" -  Local? ${localCookie} - Character? ${characterCookie}`);\n  if (characterCookie) {\n    cobalt = localStorage.getItem(`ddb-cobalt-cookie-${keyPostfix}`);\n  } else if (localCookie) {\n    cobalt = localStorage.getItem(\"ddb-cobalt-cookie\");\n  } else {\n    cobalt = game.settings.get(SETTINGS.MODULE_ID, \"cobalt-cookie\");\n  }\n\n  return cobalt;\n}\n\nexport async function setCobalt(value, keyPostfix = \"\") {\n  const localCookie = game.settings.get(SETTINGS.MODULE_ID, \"cobalt-cookie-local\");\n  const characterCookie = keyPostfix && keyPostfix !== \"\";\n\n  let cobaltValue = value;\n  if (isJSON(value)) {\n    cobaltValue = JSON.parse(value).cbt;\n  }\n\n  logger.debug(`Setting Cookie: Key postfix? \"${keyPostfix}\" -  Local? ${localCookie} - Character? ${characterCookie}`);\n  if (characterCookie) {\n    localStorage.setItem(`ddb-cobalt-cookie-${keyPostfix}`, cobaltValue);\n  } else if (localCookie) {\n    localStorage.setItem(\"ddb-cobalt-cookie\", cobaltValue);\n  } else {\n    await game.settings.set(SETTINGS.MODULE_ID, \"cobalt-cookie\", cobaltValue);\n  }\n}\n\nexport function deleteLocalCobalt(keyPostfix) {\n  const localCookie = isLocalCobalt(keyPostfix);\n\n  if (localCookie) {\n    localStorage.removeItem(`ddb-cobalt-cookie-${keyPostfix}`);\n  }\n}\n\nexport async function moveCobaltToLocal() {\n  localStorage.setItem('ddb-cobalt-cookie', game.settings.get(\"ddb-importer\", \"cobalt-cookie\"));\n  await game.settings.set(SETTINGS.MODULE_ID, \"cobalt-cookie\", \"\");\n  game.settings.set(SETTINGS.MODULE_ID, \"cobalt-cookie-local\", true);\n}\n\nexport async function moveCobaltToSettings() {\n  game.settings.set(SETTINGS.MODULE_ID, \"cobalt-cookie\", localStorage.getItem('ddb-cobalt-cookie'));\n  game.settings.set(SETTINGS.MODULE_ID, \"cobalt-cookie-local\", false);\n}\n\nexport async function checkCobalt(keyPostfix = \"\", alternativeKey = null) {\n  const cobaltCookie = alternativeKey\n    ? isJSON(alternativeKey)\n      ? JSON.parse(alternativeKey).cbt\n      : alternativeKey\n    : getCobalt(keyPostfix);\n  const parsingApi = DDBProxy.getProxy();\n  const betaKey = PatreonHelper.getPatreonKey();\n  const body = { cobalt: cobaltCookie, betaKey: betaKey };\n\n  return new Promise((resolve, reject) => {\n    fetch(`${parsingApi}/proxy/auth`, {\n      method: \"POST\",\n      cache: \"no-cache\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((response) => response.json())\n      .then((data) => resolve(data))\n      .catch((error) => {\n        logger.error(`Cobalt cookie check error`);\n        logger.error(error);\n        logger.error(error.stack);\n        reject(error);\n      });\n  });\n}\n","const utils = {\n  debug: () => {\n    return true;\n  },\n\n  capitalize: (s) => {\n    if (typeof s !== \"string\") return \"\";\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  },\n\n  /**\n   * Async for each loop\n   *\n   * @param  {array} array - Array to loop through\n   * @param  {function} callback - Function to apply to each array item loop\n   */\n  asyncForEach: async (array, callback) => {\n    for (let index = 0; index < array.length; index += 1) {\n      // eslint-disable-next-line callback-return, no-await-in-loop\n      await callback(array[index], index, array);\n    }\n  },\n\n  removeCompendiumLinks: (text) => {\n    const linkRegExTag = /@\\w+\\[(.*)\\](\\{.*?\\})/g;\n    const linkRegExNoTag = /@\\w+\\[(.*)\\]/g;\n    function replaceRule(match, p1, p2) {\n      if (p2) {\n        return `${p2}`;\n      } else {\n        return `${p1}`;\n      }\n    }\n    return text.replaceAll(linkRegExTag, replaceRule).replaceAll(linkRegExNoTag, replaceRule);\n  },\n\n  normalizeString: (str) => {\n    return str.toLowerCase().replace(/\\W/g, \"\");\n  },\n\n  referenceNameString: (str) => {\n    return str.replace(/[^a-zA-Z0-9]/g, \"-\")\n      .replace(/-+/g, \"-\")\n      .trim()\n      .replace(/-$/g, '');\n  },\n\n  idString: (str) => {\n    return str.replace(/[^a-zA-Z0-9]/g, \"\");\n  },\n\n  namedIDStub(name, { prefix = \"ddb\", postfix = null, length = 16 } = {}) {\n    const nameSplit = name.split(\" \").map((n) => utils.idString(n));\n    const remainingN = length - (prefix ? `${prefix}`.length : 0) - (postfix ? `${postfix}`.length : 0);\n    const quotient = Math.floor(remainingN / nameSplit.length);\n    let remainder = remainingN % nameSplit.length;\n    let result = `${prefix ?? \"\"}`;\n\n    for (let i = 0; i < nameSplit.length; i++) {\n      const splitLength = nameSplit[i].length > quotient + remainder\n        ? quotient + remainder\n        : Math.min(nameSplit[i].length, quotient + remainder);\n      result += utils.capitalize(nameSplit[i].substring(0, splitLength));\n      const remainderUsed = splitLength > quotient\n        ? splitLength - quotient\n        : 0;\n      remainder -= remainderUsed;\n    }\n\n    if (postfix) result += postfix;\n    const padding = length - result.length;\n    if (padding > 0) {\n      result += \"I\".repeat(padding);\n    }\n\n    return result;\n  },\n\n  nameString: (str) => {\n    return str.replaceAll(\"’\", \"'\").trim();\n  },\n\n  stripHtml: (html, preferInnerText = false) => {\n    let tmp = document.createElement(\"DIV\");\n    tmp.innerHTML = html;\n    if (preferInnerText) {\n      return tmp.innerText ?? tmp.textContent ?? \"\";\n    }\n    return tmp.textContent || tmp.innerText || \"\";\n  },\n\n  htmlToElement: (html) => {\n    const template = document.createElement('template');\n    html = html.trim(); // Never return a text node of whitespace as the result\n    template.innerHTML = html;\n    return template.content.firstChild;\n  },\n\n  htmlToDoc: (text) => {\n    const parser = new DOMParser();\n    return parser.parseFromString(text, \"text/html\");\n  },\n\n  htmlToDocumentFragment: (text) => {\n    const dom = new DocumentFragment();\n    $.parseHTML(text).forEach((element) => {\n      dom.appendChild(element);\n    });\n    return dom;\n  },\n\n  replaceHtmlSpaces: (str) => {\n    return str.replace(/&nbsp;/g, ' ').replace(/\\xA0/g, ' ').replace(/\\s\\s+/g, ' ').trim();\n  },\n\n  renderLesserString: (str) => {\n    return utils.replaceHtmlSpaces(utils.stripHtml(str)).trim().toLowerCase();\n  },\n\n  stringKindaEqual(a, b) {\n    return utils.renderLesserString(a) === utils.renderLesserString(b);\n  },\n\n  findByProperty: (arr, property, searchString) => {\n    function levenshtein(a, b) {\n      let tmp;\n      if (a.length === 0) {\n        return b.length;\n      }\n      if (b.length === 0) {\n        return a.length;\n      }\n      if (a.length > b.length) {\n        tmp = a;\n        a = b;\n        b = tmp;\n      }\n\n      let i,\n        j,\n        res,\n        alen = a.length,\n        blen = b.length,\n        row = Array(alen);\n      for (i = 0; i <= alen; i++) {\n        row[i] = i;\n      }\n\n      for (i = 1; i <= blen; i++) {\n        res = i;\n        for (j = 1; j <= alen; j++) {\n          tmp = row[j - 1];\n          row[j - 1] = res;\n          res = b[i - 1] === a[j - 1] ? tmp : Math.min(tmp + 1, Math.min(res + 1, row[j] + 1));\n        }\n      }\n      return res;\n    }\n\n    const maxDistance = 3;\n    let minDistance = 100;\n    let nearestHit = undefined;\n    let nearestDistance = minDistance;\n\n    if (!Array.isArray(arr)) return undefined;\n    arr\n      .filter((entry) => Object.prototype.hasOwnProperty.call(entry, property))\n      .forEach((entry) => {\n        let distance = levenshtein(searchString, entry[property]);\n        if (distance < nearestDistance && distance <= maxDistance && distance < minDistance) {\n          nearestHit = entry;\n          nearestDistance = distance;\n        }\n      });\n\n    return nearestHit;\n  },\n\n  calculateModifier: (val) => {\n    return Math.floor((val - 10) / 2);\n  },\n\n  diceStringResultBuild: (diceMap, dice, bonus = \"\", mods = \"\", diceHint = \"\", specialFlags = \"\") => {\n    const globalDamageHints = game.settings.get(\"ddb-importer\", \"use-damage-hints\");\n    const resultBonus = bonus === 0 ? \"\" : `${bonus > 0 ? ' +' : ' '} ${bonus}`;\n    const diceHintAdd = globalDamageHints && diceHint && diceMap;\n    const hintString = diceHintAdd ? diceHint : \"\";\n    const diceHintString = diceMap.map(({ sign, count, die }, index) =>\n      `${index ? `${sign} ` : ''}${count}d${die}${specialFlags}${hintString}`\n    ).join(' ');\n\n    const result = {\n      dice,\n      diceMap,\n      diceHintString,\n      bonus,\n      diceString: [\n        diceHintString,\n        mods,\n        resultBonus\n      ].join('').trim(),\n    };\n    return result;\n  },\n\n  parseDiceString: (inStr, mods = \"\", diceHint = \"\", specialFlags = \"\") => {\n    // sanitizing possible inputs a bit\n    const str = `${inStr}`.toLowerCase().replace(/[–-–−]/gu, \"-\").replace(/\\s+/gu, \"\");\n\n    // all found dice strings, e.g. 1d8, 4d6\n    let dice = [];\n    // all bonuses, e.g. -1+8\n    let bonuses = [];\n\n    const diceRegex = /(?<rawSign>[+-]*)(?<count>\\d+)(?:d(?<die>\\d+))?/gu;\n\n    for (const { groups } of str.matchAll(diceRegex)) {\n      const {\n        rawSign = '+',\n        count,\n        die\n      } = groups;\n\n      // sign. We only take the sign standing exactly in front of the dice string\n      // so +-1d8 => -1d8. Just as a failsave\n      const sign = rawSign === \"\" ? \"+\" : rawSign.slice(-1);\n\n      if (die) {\n        dice.push({\n          sign,\n          count: parseInt(sign + count),\n          die: parseInt(die)\n        });\n      } else {\n        bonuses.push({\n          sign,\n          count: parseInt(sign + count)\n        });\n      }\n    }\n\n    // sum up the bonus\n    const bonus = bonuses.reduce((prev, cur) => prev + cur.count, 0);\n\n    // group the dice, so that all the same dice are summed up if they have the same sign\n    // e.g.\n    // +1d8+2d8 => 3d8\n    // +1d8-2d8 => +1d8 -2d8 will remain as-is\n    const diceMap = [];\n\n    const groupBySign = utils.groupBy(dice, 'sign');\n    for (const group of groupBySign.values()) {\n      const groupByDie = utils.groupBy(group, 'die');\n\n      for (const dieGroup of groupByDie.values()) {\n        diceMap.push(\n          dieGroup.reduce((acc, item) => ({\n            ...acc,\n            count: acc.count + item.count\n          }))\n        );\n      }\n    }\n\n    diceMap.sort((a, b) => {\n      if (a.die < b.die) return -1;\n      if (a.die > b.die) return 1;\n      if (a.sign === b.sign) {\n        if (a.count < b.count) return -1;\n        if (a.count > b.count) return 1;\n        return 0;\n      } else {\n        return a.sign === \"+\" ? -1 : 1;\n      }\n    });\n\n    const result = utils.diceStringResultBuild(diceMap, dice, bonus, mods, diceHint, specialFlags);\n    return result;\n  },\n\n  isObject: (obj) => {\n    return typeof obj === 'object' && !Array.isArray(obj) && obj !== null;\n  },\n\n  isString: (str) => {\n    return typeof str === 'string' || str instanceof String;\n  },\n\n  isArray: (arr) => {\n    return Array.isArray(arr);\n  },\n\n  isBoolean: (bool) => {\n    return typeof bool === 'boolean';\n  },\n\n  isFunction: (func) => {\n    return func instanceof Function;\n  },\n\n  mergeDeep: (target, source) => {\n    let output = Object.assign({}, target);\n    if (utils.isObject(target) && utils.isObject(source)) {\n      Object.keys(source).forEach((key) => {\n        if (utils.isObject(source[key])) {\n          if (!(key in target)) Object.assign(output, { [key]: source[key] });\n          else output[key] = utils.mergeDeep(target[key], source[key]);\n        } else {\n          Object.assign(output, { [key]: source[key] });\n        }\n      });\n    }\n    return output;\n  },\n\n  filterDeprecated: (data) => {\n    for (let prop in data) {\n      if (\n        data[prop]\n        && Object.prototype.hasOwnProperty.call(data[prop], \"_deprecated\")\n        && data[prop][\"_deprecated\"] === true\n      ) {\n        delete data[prop];\n      }\n      if (prop === \"_deprecated\" && data[prop] === true) {\n        delete data[prop];\n      }\n    }\n    return data;\n  },\n\n  getTemplateLegacy: (type) => {\n    const templates = game.data.template;\n    for (let entityType in templates) {\n      if (\n        templates[entityType].types\n        && Array.isArray(templates[entityType].types)\n        && templates[entityType].types.includes(type)\n      ) {\n        let obj = utils.mergeDeep({}, utils.filterDeprecated(templates[entityType][type]));\n        if (obj.templates) {\n          obj.templates.forEach((tpl) => {\n            obj = utils.mergeDeep(obj, utils.filterDeprecated(templates[entityType].templates[tpl]));\n          });\n          delete obj.templates;\n        }\n        // store the result as JSON for easy cloning\n        return JSON.stringify(obj);\n      }\n    }\n    return undefined;\n  },\n\n  // eslint-disable-next-line complexity\n  getTemplate: (type) => {\n    switch (type.toLowerCase()) {\n      case \"character\":\n        return game.dnd5e.dataModels.actor.CharacterData.schema.initial();\n      case \"npc\":\n        return game.dnd5e.dataModels.actor.NPCData.schema.initial();\n      case \"vehicle\":\n        return game.dnd5e.dataModels.actor.VehicleData.schema.initial();\n      case \"class\":\n        return game.dnd5e.dataModels.item.ClassData.schema.initial();\n      case \"background\":\n        return game.dnd5e.dataModels.item.BackgroundData.schema.initial();\n      case \"consumable\":\n        return game.dnd5e.dataModels.item.ConsumableData.schema.initial();\n      case \"backpack\":\n      case \"container\":\n        return game.dnd5e.dataModels.item.ContainerData.schema.initial();\n      case \"equipment\":\n      case \"armor\":\n        return game.dnd5e.dataModels.item.EquipmentData.schema.initial();\n      case \"feat\":\n        return game.dnd5e.dataModels.item.FeatData.schema.initial();\n      case \"loot\":\n        return game.dnd5e.dataModels.item.LootData.schema.initial();\n      case \"race\":\n        return game.dnd5e.dataModels.item.RaceData.schema.initial();\n      case \"spell\":\n        return game.dnd5e.dataModels.item.SpellData.schema.initial();\n      case \"subclass\":\n        return game.dnd5e.dataModels.item.SubclassData.schema.initial();\n      case \"tool\":\n        return game.dnd5e.dataModels.item.ToolData.schema.initial();\n      case \"weapon\":\n        return game.dnd5e.dataModels.item.WeaponData.schema.initial();\n      case \"journalpage\":\n        return game.dnd5e.dataModels.journal.ClassJournalPageData.schema.initial();\n      case \"dnd-tashas-cauldron.tattoo\":\n      case \"tattoo\":\n        return CONFIG.Item.dataModels[\"dnd-tashas-cauldron.tattoo\"].schema.initial();\n      default:\n        return undefined;\n    }\n  },\n\n  entityMap: () => {\n    let entityTypes = new Map();\n    entityTypes.set(\"spell\", \"Item\");\n    entityTypes.set(\"spells\", \"Item\");\n    entityTypes.set(\"inventory\", \"Item\");\n    entityTypes.set(\"item\", \"Item\");\n    entityTypes.set(\"items\", \"Item\");\n    entityTypes.set(\"equipment\", \"Item\");\n    entityTypes.set(\"consumable\", \"Item\");\n    entityTypes.set(\"tool\", \"Item\");\n    entityTypes.set(\"loot\", \"Item\");\n    entityTypes.set(\"class\", \"Item\");\n    entityTypes.set(\"backpack\", \"Item\");\n    entityTypes.set(\"container\", \"Item\");\n    entityTypes.set(\"magic-items\", \"Item\");\n    entityTypes.set(\"magic-item-spells\", \"Item\");\n    entityTypes.set(\"npc\", \"Actor\");\n    entityTypes.set(\"character\", \"Actor\");\n    entityTypes.set(\"monsters\", \"Actor\");\n    entityTypes.set(\"monster\", \"Actor\");\n    entityTypes.set(\"extras\", \"Actor\");\n    entityTypes.set(\"summon\", \"Actor\");\n    entityTypes.set(\"summons\", \"Actor\");\n    entityTypes.set(\"scene\", \"Scene\");\n    entityTypes.set(\"page\", \"JournalEntry\");\n    entityTypes.set(\"journal\", \"JournalEntry\");\n    entityTypes.set(\"journalEntry\", \"JournalEntry\");\n    entityTypes.set(\"background\", \"Item\");\n    entityTypes.set(\"compendium\", \"Compendium\");\n    entityTypes.set(\"class\", \"Item\");\n    entityTypes.set(\"classes\", \"Item\");\n    entityTypes.set(\"subclass\", \"Item\");\n    entityTypes.set(\"subclasses\", \"Item\");\n    entityTypes.set(\"feature\", \"Item\");\n    entityTypes.set(\"features\", \"Item\");\n    entityTypes.set(\"classfeatures\", \"Item\");\n    entityTypes.set(\"races\", \"Item\");\n    entityTypes.set(\"traits\", \"Item\");\n    return entityTypes;\n  },\n\n  versionCompare: (v1, v2, options) => {\n    let lexicographical = options && options.lexicographical,\n      zeroExtend = options && options.zeroExtend,\n      v1parts = v1.split(\".\"),\n      v2parts = v2.split(\".\");\n\n    function isValidPart(x) {\n      return (lexicographical ? /^\\d+[A-Za-z]*$/ : /^\\d+$/).test(x);\n    }\n\n    if (!v1parts.every(isValidPart) || !v2parts.every(isValidPart)) {\n      return NaN;\n    }\n\n    if (zeroExtend) {\n      while (v1parts.length < v2parts.length) v1parts.push(\"0\");\n      while (v2parts.length < v1parts.length) v2parts.push(\"0\");\n    }\n\n    if (!lexicographical) {\n      v1parts = v1parts.map(Number);\n      v2parts = v2parts.map(Number);\n    }\n\n    for (let i = 0; i < v1parts.length; ++i) {\n      if (v2parts.length == i) {\n        return 1;\n      }\n\n      if (v1parts[i] > v2parts[i]) {\n        return 1;\n      }\n      if (v1parts[i] < v2parts[i]) {\n        return -1;\n      }\n    }\n\n    if (v1parts.length != v2parts.length) {\n      return -1;\n    }\n\n    return 0;\n  },\n\n  groupBy(arr, property) {\n    const map = new Map();\n\n    for (const item of arr) {\n      const prop = item[property];\n      const group = map.get(prop) ?? [];\n\n      group.push(item);\n      map.set(prop, group);\n    }\n\n    return map;\n  },\n\n  async namePrompt(question) {\n    const content = `\n    <label class=\"text-label\">\n      <input type=\"text\" name=\"name\"/>\n    </label>\n  `;\n    const name = await new Promise((resolve) => {\n      new Dialog({\n        title: question,\n        content,\n        buttons: {\n          ok: {\n            label: \"Okay\",\n            callback: async (html) => {\n              const value = html.find(\"input[type='text'][name='name']\").val();\n              resolve(value);\n            },\n          },\n          cancel: {\n            label: \"Cancel\",\n            callback: () => {\n              resolve(\"\");\n            },\n          }\n        },\n        default: \"ok\",\n        close: () => {\n          resolve(\"\");\n        },\n      }).render(true);\n    });\n    return name;\n  },\n\n  renderPopup: (type, url) => {\n    if (CONFIG.DDBI.POPUPS[type] && !CONFIG.DDBI.POPUPS[type].close) {\n      CONFIG.DDBI.POPUPS[type].focus();\n      CONFIG.DDBI.POPUPS[type].location.href = url;\n    } else {\n      const ratio = window.innerWidth / window.innerHeight;\n      const width = Math.round(window.innerWidth * 0.5);\n      const height = Math.round(window.innerWidth * 0.5 * ratio);\n      CONFIG.DDBI.POPUPS[type] = window.open(\n        url,\n        \"ddb_sheet_popup\",\n        `resizeable,scrollbars,location=no,width=${width},height=${height},toolbar=1`\n      );\n    }\n    return true;\n  },\n\n  addToProperties: (properties, value) => {\n    const setProperties = properties\n      ? utils.isArray(properties)\n        ? new Set(properties)\n        : properties\n      : new Set();\n\n    setProperties.add(value);\n    return Array.from(setProperties);\n  },\n\n  removeFromProperties: (properties, value) => {\n    const setProperties = properties\n      ? utils.isArray(properties)\n        ? new Set(properties)\n        : properties\n      : new Set();\n\n    setProperties.delete(value);\n    return Array.from(setProperties);\n  },\n\n  // matchedProperties = { \"system.activation.type\": \"bonus\" }\n  matchProperties: (document, matchedProperties = {}) => {\n    for (const [key, value] of Object.entries(matchedProperties)) {\n      if (foundry.utils.getProperty(document, key) !== value) {\n        return false;\n      }\n    }\n    return true;\n  },\n\n  ordinalSuffixOf(i) {\n    let j = i % 10,\n      k = i % 100;\n    if (j === 1 && k !== 11) {\n      return i + \"st\";\n    }\n    if (j === 2 && k !== 12) {\n      return i + \"nd\";\n    }\n    if (j === 3 && k !== 13) {\n      return i + \"rd\";\n    }\n    return i + \"th\";\n  },\n};\n\nexport default utils;\n","/* eslint-disable no-continue */\nimport FileHelper from \"./lib/FileHelper.js\";\n\nconst logger = {\n\n  LOG_PREFIX: \"DDB Importer\",\n  LOG_MSG_DEFAULT: \"No logging message provided.  Please see the payload for more information.\",\n\n  _showMessage: (logLevel, data) => {\n    if (!logLevel || !data || typeof (logLevel) !== 'string') {\n      return false;\n    }\n\n    try {\n      const setting = game.settings.get(\"ddb-importer\", \"log-level\");\n      const logLevels = [\"DEBUG\", \"TIME\", \"TIMEEND\", \"TIMELOG\", \"INFO\", \"WARN\", \"ERR\", \"OFF\"];\n      const logLevelIndex = logLevels.indexOf(logLevel.toUpperCase());\n      if (setting == \"OFF\"\n              || logLevelIndex === -1\n              || logLevelIndex < logLevels.indexOf(setting)) {\n        return false;\n      }\n      return true;\n    } catch (err) {\n      return true;\n    }\n\n  },\n  _addToLogFile: (logLevel, data) => {\n    if (foundry.utils.getProperty(CONFIG.debug, \"ddbimporter.record\") === true) {\n      CONFIG.debug.ddbimporter.log.push({\n        level: logLevel,\n        data: data,\n      });\n    }\n  },\n  // eslint-disable-next-line complexity\n  log: (logLevel, ...data) => {\n    logger._addToLogFile(logLevel, data);\n    if (!logger._showMessage(logLevel, data)) {\n      return;\n    }\n\n    const logLevelType = logLevel.startsWith(\"TIME\")\n      ? \"DEBUG\"\n      : logLevel.toUpperCase();\n\n    const msgContent = data[0] && typeof (data[0] == 'string')\n      ? data[0]\n      : logger.LOG_MSG_DEFAULT;\n    const payload = data[0] && typeof (data[0] == 'string')\n      ? data.length > 1\n        ? data.slice(1)\n        : null\n      : data.slice();\n    const msg = `${logger.LOG_PREFIX} | ${logLevelType} > ${msgContent}`;\n\n    switch (logLevel.toUpperCase()) {\n      case \"DEBUG\":\n        if (payload) {\n          console.debug(msg, ...payload);// eslint-disable-line no-console\n        } else {\n          console.debug(msg);// eslint-disable-line no-console\n        }\n        break;\n      case \"INFO\":\n        if (payload) {\n          console.info(msg, ...payload);// eslint-disable-line no-console\n        } else {\n          console.info(msg);// eslint-disable-line no-console\n        }\n        break;\n      case \"WARN\":\n        if (payload) {\n          console.warn(msg, ...payload);// eslint-disable-line no-console\n        } else {\n          console.warn(msg);// eslint-disable-line no-console\n        }\n        break;\n      case \"ERR\":\n        if (payload) {\n          console.error(msg, ...payload);// eslint-disable-line no-console\n        } else {\n          console.error(msg);// eslint-disable-line no-console\n        }\n        break;\n      case \"TIME\":\n        if (payload) {\n          console.time(msg, ...payload);// eslint-disable-line no-console\n        } else {\n          console.time(msg);// eslint-disable-line no-console\n        }\n        break;\n      case \"TIMEEND\":\n        if (payload) {\n          console.timeEnd(msg, ...payload);// eslint-disable-line no-console\n        } else {\n          console.timeEnd(msg);// eslint-disable-line no-console\n        }\n        break;\n      case \"TIMELOG\":\n        if (payload) {\n          console.timeLog(msg, ...payload);// eslint-disable-line no-console\n        } else {\n          console.timeLog(msg);// eslint-disable-line no-console\n        }\n        break;\n      default: break;\n    }\n  },\n\n  debug: (...data) => {\n    logger.log(\"DEBUG\", ...data);\n  },\n\n  info: (...data) => {\n    logger.log(\"INFO\", ...data);\n  },\n\n  warn: (...data) => {\n    logger.log(\"WARN\", ...data);\n  },\n\n  error: (...data) => {\n    logger.log(\"ERR\", ...data);\n  },\n\n  time: (...data) => {\n    logger.log(\"TIME\", ...data);\n  },\n\n  timeEnd: (...data) => {\n    logger.log(\"TIMEEND\", ...data);\n  },\n\n  timeLog: (...data) => {\n    logger.log(\"TIMELOG\", ...data);\n  },\n\n};\nexport default logger;\n\nconst getCircularReplacer = () => {\n  const seen = new WeakSet();\n  return (key, value) => {\n    if (typeof value === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n      seen.add(value);\n    }\n    // eslint-disable-next-line consistent-return\n    return value;\n  };\n};\n\nfunction downloadLog() {\n  FileHelper.download(JSON.stringify(CONFIG.debug.ddbimporter.log, getCircularReplacer()), `ddbimporter-log-data.json`, \"application/json\");\n  foundry.utils.setProperty(CONFIG.debug, \"ddbimporter.log\", []);\n}\n\nexport function setupLogger() {\n  const enabledDebugLogging = false;\n\n  const defaults = {\n    record: enabledDebugLogging,\n    log: [],\n    download: downloadLog,\n  };\n\n  foundry.utils.setProperty(CONFIG.debug, \"ddbimporter\", defaults);\n}\n","import DDBCampaigns from \"../lib/DDBCampaigns.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport { getVehicleData } from \"./vehicles.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport CompendiumHelper from \"../lib/CompendiumHelper.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\n\nasync function getMonsterMap () {\n  // ddb://monsters\n  const monsterCompendiumLabel = CompendiumHelper.getCompendiumLabel(\"monster\");\n  const monsterCompendium = CompendiumHelper.getCompendium(monsterCompendiumLabel);\n  const monsterIndices = [\"name\", \"flags.ddbimporter.id\"];\n  const monsterIndex = await monsterCompendium.getIndex({ fields: monsterIndices });\n\n  const results = monsterIndex\n    .filter((monster) => monster.flags?.ddbimporter?.id)\n    .map((monster) => {\n      return {\n        id: monster.flags.ddbimporter.id,\n        _id: monster._id,\n        compendium: monsterCompendiumLabel,\n        name: monster.name,\n        documentName: monster.name,\n      };\n    });\n\n  return Promise.all(results);\n}\n\nasync function getSpellMap() {\n  // ddb://spells\n  // mm 2176\n  const spellCompendiumLabel = await game.settings.get(\"ddb-importer\", \"entity-spell-compendium\");\n  const spellCompendium = await game.packs.find((pack) => pack.collection === spellCompendiumLabel);\n  const spellIndices = [\"name\", \"flags.ddbimporter.definitionId\"];\n  const spellIndex = await spellCompendium.getIndex({ fields: spellIndices });\n\n  const results = spellIndex\n    .filter((spell) => spell.flags?.ddbimporter?.definitionId)\n    .map((spell) => {\n      return {\n        id: spell.flags.ddbimporter.definitionId,\n        _id: spell._id,\n        compendium: spellCompendiumLabel,\n        name: spell.name,\n        documentName: spell.name,\n      };\n    });\n\n  return Promise.all(results);\n}\n\nasync function getItemMap() {\n  // ddb://magicitems\n  const itemCompendiumLabel = await game.settings.get(\"ddb-importer\", \"entity-item-compendium\");\n  const itemCompendium = await game.packs.find((pack) => pack.collection === itemCompendiumLabel);\n  const itemIndices = [\"name\", \"flags.ddbimporter.definitionId\"];\n  const itemIndex = await itemCompendium.getIndex({ fields: itemIndices });\n\n  const results = itemIndex\n    .filter((item) => item.flags?.ddbimporter?.definitionId)\n    .map((item) => {\n      return {\n        id: item.flags.ddbimporter.definitionId,\n        _id: item._id,\n        compendium: itemCompendiumLabel,\n        name: item.name,\n        documentName: item.name,\n      };\n    });\n\n  return Promise.all(results);\n}\n\nconst ATTACK_ACTION_MAP = {\n  \"Opportunity Attack\": {\n    hint: \"Opportunity Attacks\",\n    page: \"Making an Attack\"\n  },\n  Grapple: {\n    hint: \"Grappling\",\n    page: \"Making an Attack\"\n  },\n  Shove: {\n    hint: \"Shoving a Creature\",\n    page: \"Making an Attack\"\n  },\n  \"Two-Weapon Fighting\": {\n    hint: \"Two-Weapon Fighting\",\n    page: \"Making an Attack\"\n  },\n  \"Interact with an Object\": {\n    hint: \"Use an Object\",\n    page: \"Actions in Combat\",\n  },\n};\n\nexport async function generateAdventureConfig(full = false, cobalt = true, fullPageMap = false, legacy = false) {\n  const result = {\n    schemaVersion: CONFIG.DDBI.schemaVersion,\n    debug: false,\n    observeAll: false,\n    version: game.modules.get(\"ddb-importer\").version,\n    lookups: {\n      monsters: [],\n      items: [],\n      spells: [],\n      skills: [],\n      senses: [],\n      conditions: [],\n      actions: [],\n      weaponproperties: [],\n      vehicles: [],\n      rule: [],\n    },\n    fullPageMap: [],\n  };\n\n  if (cobalt) {\n    result.cobalt = getCobalt();\n    result.campaignId = DDBCampaigns.getCampaignId();\n  }\n\n  // @Compendium[${compendiumLabel}.${featureMatch._id}]{${feature.name}}\n\n  if (full) {\n    result.lookups.monsters = await getMonsterMap();\n    result.lookups.spells = await getSpellMap();\n    result.lookups.items = await getItemMap();\n  }\n\n  // vehicles\n  if (!DDBProxy.isCustom() && cobalt) {\n    const vehicleData = await getVehicleData();\n\n    result.lookups.vehicles = vehicleData.map((v) => {\n      return {\n        id: v.id,\n        url: v.url,\n        name: v.name,\n      };\n    });\n  }\n\n  if (legacy) {\n    const rulesCompendium = \"dnd5e.rules\";\n    const srdCompendium = CompendiumHelper.getCompendium(rulesCompendium);\n    if (!srdCompendium) return result;\n\n    const srdIndex = await srdCompendium.getIndex();\n    const srdDocuments = await srdCompendium.getDocuments();\n    result.index = srdIndex;\n\n    const skillEntryDocument = srdDocuments.find((d) => d.name === \"Chapter 7: Using Ability Scores\");\n    if (skillEntryDocument) {\n      result.lookups.skills = CONFIG.DDB.abilitySkills.map((skill) => {\n        const skillEntryPage = skillEntryDocument.pages.find((p) => p.name === \"Using Each Ability\");\n        const stat = CONFIG.DDB.stats.find((s) => s.id === skill.stat);\n        const headerLink = `${stat.name} Checks`;\n        return {\n          id: skill.id,\n          _id: skillEntryDocument._id,\n          name: skill.name,\n          compendium: rulesCompendium,\n          documentName: skillEntryDocument.name,\n          pageId: skillEntryPage._id,\n          headerLink,\n        };\n      });\n    }\n\n    const senseEntryDocument = srdDocuments.find((d) => d.name === \"Appendix D: Senses and Speeds\");\n    if (senseEntryDocument) {\n      result.lookups.senses = CONFIG.DDB.senses\n        .filter((sense) => senseEntryDocument.pages.some((p) => p.name === sense.name))\n        .map((sense) => {\n          const senseEntryPage = senseEntryDocument.pages.find((p) => p.name === sense.name);\n          return {\n            id: sense.id,\n            _id: senseEntryDocument._id,\n            name: sense.name,\n            compendium: rulesCompendium,\n            documentName: senseEntryDocument.name,\n            pageId: senseEntryPage._id,\n            headerLink: null,\n          };\n        });\n    }\n\n    const conditionEntryDocument = srdDocuments.find((d) => d.name === \"Appendix A: Conditions\");\n    if (conditionEntryDocument) {\n      result.lookups.conditions = CONFIG.DDB.conditions\n        .filter((condition) => conditionEntryDocument.pages.some((p) => p.name.trim() === condition.definition.name.trim()))\n        .map((condition) => {\n          const conditionEntryPage = conditionEntryDocument.pages.find((p) => p.name.trim() === condition.definition.name.trim());\n          return {\n            id: condition.definition.id,\n            _id: conditionEntryDocument.id,\n            name: condition.definition.name,\n            compendium: rulesCompendium,\n            slug: condition.definition.slug,\n            documentName: conditionEntryDocument.name,\n            pageId: conditionEntryPage._id,\n            headerLink: null,\n          };\n        });\n    }\n\n    const actionEntryDocument = srdDocuments.find((d) => d.name === \"Chapter 9: Combat\");\n    if (actionEntryDocument) {\n      const actionEntryPage = actionEntryDocument.pages.find((p) => p.name === \"Actions in Combat\");\n      CONFIG.DDB.basicActions.forEach((action) => {\n        if (ATTACK_ACTION_MAP[action.name]) {\n          const attackEntryPage = actionEntryDocument.pages.find((p) => p.name === ATTACK_ACTION_MAP[action.name].page);\n          result.lookups.actions.push({\n            id: action.id,\n            _id: actionEntryDocument._id,\n            name: action.name,\n            compendium: rulesCompendium,\n            documentName: actionEntryDocument.name,\n            pageId: attackEntryPage._id,\n            headerLink: ATTACK_ACTION_MAP[action.name].hint,\n          });\n        } else if (action.id < 100) {\n          result.lookups.actions.push({\n            id: action.id,\n            _id: actionEntryDocument.id,\n            name: action.name,\n            compendium: rulesCompendium,\n            documentName: actionEntryDocument.name,\n            pageId: actionEntryPage._id,\n            headerLink: action.name,\n          });\n        }\n      });\n    }\n\n    const equipmentDocument = srdDocuments.find((d) => d.name === \"Chapter 5: Equipment\");\n    if (equipmentDocument) {\n      const weaponPropertiesPage = equipmentDocument.pages.find((p) => p.name === \"Weapons\");\n      result.lookups.weaponproperties = CONFIG.DDB.weaponProperties.map((prop) => {\n        return {\n          id: prop.id,\n          _id: equipmentDocument._id,\n          name: prop.name,\n          compendium: rulesCompendium,\n          documentName: equipmentDocument.name,\n          pageId: weaponPropertiesPage._id,\n          headerLink: \"Weapon Properties\",\n        };\n      });\n    }\n\n    if (fullPageMap) {\n      srdDocuments.forEach((document) => {\n        document.pages.forEach((page) => {\n          result.fullPageMap.push({\n            id: null,\n            _id: document.id,\n            name: page.name,\n            compendium: rulesCompendium,\n            documentName: document.name,\n            pageId: page._id,\n            headerLink: null,\n          });\n        });\n      });\n    }\n  }\n\n  return result;\n\n}\n\nexport async function downloadAdventureConfig() {\n  const fullConfig = game.settings.get(\"ddb-importer\", \"adventure-muncher-full-config\");\n  const result = await generateAdventureConfig(fullConfig);\n  FileHelper.download(JSON.stringify(result, null, 4), `adventure-config.json`, \"application/json\");\n  return result;\n}\n","import logger from \"../../logger.js\";\nimport { parseTags } from \"../../lib/DDBReferenceLinker.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBItemImporter from \"../../lib/DDBItemImporter.js\";\n\nconst FEAT_TEMPLATE = {\n  \"name\": \"\",\n  \"type\": \"feat\",\n  \"system\": {\n    \"description\": {\n      \"value\": \"\",\n      \"chat\": \"\",\n    },\n    \"type\": {\n      \"value\": \"feat\",\n    },\n    \"source\": \"\",\n  },\n  \"sort\": 2600000,\n  \"flags\": {\n    \"ddbimporter\": {\n      \"type\": \"feat\",\n    },\n    \"obsidian\": {\n      \"source\": {\n        \"type\": \"feat\"\n      }\n    },\n  },\n  \"img\": null\n};\n\nfunction buildBase(data) {\n  let result = foundry.utils.duplicate(FEAT_TEMPLATE);\n\n  result.name = data.name;\n  result.system.description.value += `${data.description}\\n\\n`;\n  result.system.description.chat += `${data.snippet}\\n\\n`;\n\n  result.flags.ddbimporter = {\n    featId: data.id,\n    version: CONFIG.DDBI.version,\n  };\n\n  result.flags.ddbimporter['prerequisites'] = data.prerequisites;\n  if (data.prerequisites.length > 0) {\n    const requirements = data.prerequisites.map((requirement) => requirement.description);\n    result.system.requirements = requirements.join(\", \");\n    result.system.description.value += `<h3>Requirements</h3>\\n\\n${requirements.join(\"\\n\\n\")}\\n\\n`;\n  }\n\n  result.system.source = DDBHelper.parseSource(data);\n\n  result.system.description.value = parseTags(result.system.description.value);\n\n  return result;\n}\n\n\nasync function buildFeat(feat,) {\n  let result = buildBase(feat);\n\n  return result;\n}\n\n\nexport async function getFeats(data) {\n  logger.debug(\"get feats started\");\n  const updateBool = game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\");\n\n  let feats = [];\n\n  data.forEach((feat) => {\n    logger.debug(`${feat.name} feat parsing started...`);\n    const parsedFeat = buildFeat(feat);\n    feats.push(parsedFeat);\n  });\n\n  const itemHandler = await DDBItemImporter.buildHandler(\"feats\", feats, updateBool, { chrisPremades: true });\n  return itemHandler.documents;\n}\n","import logger from \"../logger.js\";\nimport CompendiumHelper from \"../lib/CompendiumHelper.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport DDBMuncher from \"../apps/DDBMuncher.js\";\nimport SETTINGS from \"../settings.js\";\nimport utils from \"../lib/utils.js\";\nimport Iconizer from \"../lib/Iconizer.js\";\nimport DDBItemImporter from \"../lib/DDBItemImporter.js\";\n\n// check items to see if retaining item, img or resources\nasync function existingItemRetentionCheck(currentItems, newItems, checkId = true) {\n  const returnItems = [];\n\n  await newItems.forEach((item) => {\n    const existingItem = currentItems.find((owned) => {\n      const simpleMatch\n        = item.name === owned.name\n        && item.type === owned.type\n        && item.system.activation?.type === owned.system.activation?.type\n        && ((checkId && item.flags?.ddbimporter?.id === owned.flags?.ddbimporter?.id) || !checkId);\n\n      return simpleMatch;\n    });\n\n    if (existingItem) {\n      if (existingItem.flags.ddbimporter?.ignoreItemImport) {\n        returnItems.push(foundry.utils.duplicate(existingItem));\n      } else {\n        item[\"_id\"] = existingItem.id;\n        if (foundry.utils.getProperty(existingItem, \"flags.ddbimporter.ignoreIcon\") === true) {\n          item.img = existingItem.img;\n          foundry.utils.setProperty(item, \"flags.ddbimporter.ignoreIcon\", true);\n        }\n        if (foundry.utils.getProperty(existingItem, \"flags.ddbimporter.retainResourceConsumption\")) {\n          item.system.consume = existingItem.system.consume;\n          foundry.utils.setProperty(item, \"flags.ddbimporter.retainResourceConsumption\", true);\n          if (foundry.utils.hasProperty(existingItem, \"flags.link-item-resource-5e\")) {\n            foundry.utils.setProperty(item, \"flags.link-item-resource-5e\", existingItem.flags[\"link-item-resource-5e\"]);\n          }\n        } else if (foundry.utils.getProperty(item, \"system.consume.target\")\n          && foundry.utils.getProperty(item, \"system.recharge.value\")) {\n          item.system.consume.target = existingItem.id;\n        }\n\n        if (!item.effects\n          || (item.effects && item.effects.length == 0 && existingItem.effects && existingItem.effects.length > 0)\n        ) {\n          item.effects = foundry.utils.duplicate(existingItem.getEmbeddedCollection(\"ActiveEffect\"));\n        }\n\n        returnItems.push(item);\n      }\n    } else {\n      returnItems.push(item);\n    }\n  });\n\n  logger.debug(\"Finished retaining items\");\n  return returnItems;\n}\n\n\nasync function addNPCToCompendium(npc, type = \"monster\") {\n  const itemImporter = new DDBItemImporter(type, []);\n  if (itemImporter.compendium) {\n    const npcBasic = (await itemImporter.addCompendiumFolderIds([foundry.utils.duplicate(npc)]))[0];\n\n    let compendiumNPC;\n    if (foundry.utils.hasProperty(npc, \"_id\") && itemImporter.compendium.index.has(npc._id)) {\n      if (game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-existing\")) {\n        const existingNPC = await itemImporter.compendium.getDocument(npc._id);\n\n        if (foundry.utils.hasProperty(npcBasic, \"prototypeToken.flags.tagger.tags\")\n          && foundry.utils.hasProperty(existingNPC, \"prototypeToken.flags.tagger.tags\")\n        ) {\n          const newTags = [...new Set(npcBasic.prototypeToken.flags.tagger.tags, existingNPC.prototypeToken.flags.tagger.tags)];\n          foundry.utils.setProperty(existingNPC, \"prototypeToken.flags.tagger.tags\", newTags);\n        }\n\n        const existing3dModel = foundry.utils.getProperty(existingNPC.prototypeToken, \"flags.levels-3d-preview.model3d\");\n        if (existing3dModel && existing3dModel.trim() !== \"\") {\n          foundry.utils.setProperty(npcBasic.prototypeToken, \"flags.levels-3d-preview.model3d\", existing3dModel);\n        }\n\n        const monsterTaggedItems = npcBasic.items.map((item) => {\n          foundry.utils.setProperty(item, \"flags.ddbimporter.parentId\", npc._id);\n          return item;\n        });\n        const existingItems = existingNPC.getEmbeddedCollection(\"Item\");\n        npcBasic.items = await existingItemRetentionCheck(existingItems, monsterTaggedItems, false);\n\n        logger.debug(\"NPC Update Data\", foundry.utils.duplicate(npcBasic));\n        await existingNPC.deleteEmbeddedDocuments(\"Item\", [], { deleteAll: true });\n        await existingNPC.deleteEmbeddedDocuments(\"ActiveEffect\", [], { deleteAll: true });\n        // compendiumNPC = await existingNPC.update(npcBasic, { pack: compendium.collection, recursive: false, render: false, keepId: true });\n        compendiumNPC = await existingNPC.update(npcBasic, { pack: itemImporter.compendium.collection, render: false, keepId: true });\n        if (!compendiumNPC) {\n          logger.debug(\"No changes made to base character\", npcBasic);\n          compendiumNPC = existingNPC;\n        }\n      }\n    } else {\n      // create the new npc\n      logger.debug(`Creating NPC actor ${npcBasic.name}`);\n      const options = {\n        displaySheet: false,\n        pack: itemImporter.compendium.collection,\n        keepId: true,\n      };\n      logger.debug(\"NPC New Data\", foundry.utils.duplicate(npcBasic));\n      compendiumNPC = await Actor.create(npcBasic, options);\n    }\n\n  } else {\n    logger.error(\"Error opening compendium, check your settings\");\n  }\n  return npc;\n}\n\n// export async function addNPCDDBId(npc, type = \"monster\") {\n//   let npcBasic = foundry.utils.duplicate(npc);\n//   const compendium = CompendiumHelper.getCompendiumType(type, false);\n//   if (compendium) {\n//     // unlock the compendium for update/create\n//     compendium.configure({ locked: false });\n//     const monsterIndexFields = [\"name\", \"flags.ddbimporter.id\"];\n\n//     const index = await compendium.getIndex({ fields: monsterIndexFields });\n//     const npcMatch = index.contents.find((entity) =>\n//       !foundry.utils.hasProperty(entity, \"flags.ddbimporter.id\")\n//       && entity.name.toLowerCase() === npcBasic.name.toLowerCase()\n//     );\n\n//     if (npcMatch) {\n//       if (game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-existing\")) {\n//         const existingNPC = await compendium.getDocument(npcMatch._id);\n//         const updateDDBData = {\n//           _id: npcMatch._id,\n//           \"flags.ddbimporter.id\": npcBasic.flags.ddbimporter.id,\n//         };\n//         logger.debug(\"NPCId Update Data\", foundry.utils.duplicate(updateDDBData));\n//         await existingNPC.update(updateDDBData);\n//       }\n//     }\n//   } else {\n//     logger.error(\"Error opening compendium, check your settings\");\n//   }\n// }\n\n\n// eslint-disable-next-line complexity, no-unused-vars\nexport async function getNPCImage(npcData, { type = \"monster\", forceUpdate = false, forceUseFullToken = false,\n  forceUseTokenAvatar = false, disableAutoTokenizeOverride = false } = {}\n) {\n  // check to see if we have munched flags to work on\n  if (!foundry.utils.hasProperty(npcData, \"flags.monsterMunch.img\")) {\n    return npcData;\n  }\n\n  const updateImages = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-images\");\n  if (!forceUpdate && !updateImages && npcData.img !== CONST.DEFAULT_TOKEN) {\n    return npcData;\n  }\n\n  const isStock = npcData.flags.monsterMunch.isStockImg;\n  const useAvatarAsToken = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-full-token-image\") || forceUseFullToken;\n  const useTokenAsAvatar = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-token-avatar-image\") || forceUseTokenAvatar;\n\n  let ddbAvatarUrl = useTokenAsAvatar\n    ? foundry.utils.getProperty(npcData, \"flags.monsterMunch.tokenImg\")\n    : foundry.utils.getProperty(npcData, \"flags.monsterMunch.img\");\n  let ddbTokenUrl = useAvatarAsToken\n    ? foundry.utils.getProperty(npcData, \"flags.monsterMunch.img\")\n    : foundry.utils.getProperty(npcData, \"flags.monsterMunch.tokenImg\");\n\n  if (!ddbAvatarUrl && ddbTokenUrl) ddbAvatarUrl = ddbTokenUrl;\n  if (!ddbTokenUrl && ddbAvatarUrl) ddbTokenUrl = ddbAvatarUrl;\n\n  const hasAvatarProcessedAlready = CONFIG.DDBI.KNOWN.AVATAR_LOOKUPS.get(ddbAvatarUrl);\n  const hasTokenProcessedAlready = CONFIG.DDBI.KNOWN.TOKEN_LOOKUPS.get(ddbTokenUrl);\n\n  const npcType = type.startsWith(\"vehicle\")\n    ? \"vehicle\"\n    : npcData.system.details.type.value\n      ?? (npcData.system.details.type.custom && npcData.system.details.type.custom !== \"\"\n        ? npcData.system.details.type.custom\n        : \"unknown\");\n  const genericNPCName = utils.referenceNameString(npcType);\n  const npcName = utils.referenceNameString(npcData.name);\n\n  const targetDirectory = game.settings.get(SETTINGS.MODULE_ID, \"other-image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n  const subType = foundry.utils.getProperty(npcData, \"system.details.type.value\") ?? \"other\";\n  const useDeepPaths = game.settings.get(SETTINGS.MODULE_ID, \"use-deep-file-paths\");\n\n  if (ddbAvatarUrl && foundry.utils.getProperty(npcData, \"flags.monsterMunch.imgSet\") !== true) {\n    if (hasAvatarProcessedAlready) {\n      npcData.img = CONFIG.DDBI.KNOWN.AVATAR_LOOKUPS.get(ddbAvatarUrl);\n    } else {\n      const ext = ddbAvatarUrl.split(\".\").pop().split(/#|\\?|&/)[0];\n      const genericNpc = ddbAvatarUrl.endsWith(npcType + \".\" + ext) || isStock;\n      const name = genericNpc ? genericNPCName : npcName;\n      const nameType = genericNpc ? \"npc-generic\" : \"npc\";\n      const imageNamePrefix = useDeepPaths ? \"\" : nameType;\n      const pathPostfix = useDeepPaths ? `/monster/avatar/${subType}` : \"\";\n      const downloadOptions = { type: nameType, name, targetDirectory, pathPostfix, imageNamePrefix, force: forceUpdate || updateImages };\n      // eslint-disable-next-line require-atomic-updates\n      npcData.img = await FileHelper.getImagePath(ddbAvatarUrl, downloadOptions);\n    }\n  }\n\n  if (ddbTokenUrl && foundry.utils.getProperty(npcData, \"flags.monsterMunch.tokenImgSet\") !== true) {\n    if (hasTokenProcessedAlready) {\n      npcData.prototypeToken.texture.src = CONFIG.DDBI.KNOWN.TOKEN_LOOKUPS.get(ddbTokenUrl);\n    } else {\n      const tokenExt = ddbTokenUrl.split(\".\").pop().split(/#|\\?|&/)[0];\n      const genericNpc = ddbTokenUrl.endsWith(npcType + \".\" + tokenExt) || isStock;\n      const name = genericNpc ? genericNPCName : npcName;\n      const nameType = genericNpc ? \"npc-generic-token\" : \"npc-token\";\n      const imageNamePrefix = useDeepPaths ? \"\" : nameType;\n      const pathPostfix = useDeepPaths ? `/monster/token/${subType}` : \"\";\n      // Token images always have to be downloaded.\n      const downloadOptions = {\n        type: nameType,\n        name, download: true,\n        remoteImages: false,\n        force: forceUpdate || updateImages,\n        imageNamePrefix,\n        pathPostfix,\n        targetDirectory\n      };\n      // eslint-disable-next-line require-atomic-updates\n      npcData.prototypeToken.texture.src = await FileHelper.getImagePath(ddbTokenUrl, downloadOptions);\n    }\n  }\n\n  // check avatar, if not use token image\n  // eslint-disable-next-line require-atomic-updates\n  if (!npcData.img && npcData.prototypeToken.texture.src) npcData.img = npcData.prototypeToken.texture.src;\n\n  // final check if image comes back as null\n  // eslint-disable-next-line require-atomic-updates\n  if (npcData.img === null) npcData.img = CONST.DEFAULT_TOKEN;\n  // eslint-disable-next-line require-atomic-updates\n  if (npcData.prototypeToken.texture.src === null) npcData.prototypeToken.texture.src = CONST.DEFAULT_TOKEN;\n\n  // do we now want to tokenize that?\n  const useTokenizer = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-tokenize\")\n    && !disableAutoTokenizeOverride\n    && game.modules.get(\"vtta-tokenizer\")?.active;\n  // we don't tokenize if this path was already looked up, as it will already be done\n  if (useTokenizer && !hasTokenProcessedAlready) {\n    const compendiumLabel = CompendiumHelper.getCompendiumLabel(type);\n    const tokenizerName = isStock\n      ? npcType\n      : npcData.name;\n    const autoOptions = { name: tokenizerName, nameSuffix: `-${compendiumLabel}`, updateActor: false };\n    // eslint-disable-next-line require-atomic-updates\n    npcData.prototypeToken.texture.src = await window.Tokenizer.autoToken(npcData, autoOptions);\n    logger.debug(`Generated tokenizer image at ${npcData.prototypeToken.texture.src}`);\n  }\n\n  if (!hasAvatarProcessedAlready) CONFIG.DDBI.KNOWN.AVATAR_LOOKUPS.set(ddbAvatarUrl, npcData.img);\n  if (!hasTokenProcessedAlready) CONFIG.DDBI.KNOWN.TOKEN_LOOKUPS.set(ddbTokenUrl, npcData.prototypeToken.texture.src);\n\n  return npcData;\n}\n\nasync function swapItems(data) {\n  const swap = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-items\");\n\n  if (swap) {\n    logger.debug(\"Replacing items...\");\n    // console.info(data.items);\n    const getItemOptions = {\n      monsterMatch: true,\n    };\n    const updatedItems = await DDBItemImporter.getCompendiumItems(data.items, \"inventory\", getItemOptions);\n    const itemsToRemove = updatedItems.map((item) => {\n      logger.debug(`${item.name} to ${item.flags.ddbimporter.originalItemName}`);\n      return { name: item.flags.ddbimporter.originalItemName, type: item.type };\n    });\n    logger.debug(\"Swapping items\", itemsToRemove);\n    // console.warn(itemsToRemove);\n    const lessUpdatedItems = data.items.filter((item) =>\n      !itemsToRemove.some((target) => item.name === target.name && item.type === target.type)\n    );\n    // console.log(lessUpdatedItems);\n    const newItems = lessUpdatedItems.concat(updatedItems);\n    // console.error(newItems);\n    // eslint-disable-next-line require-atomic-updates\n    data.items = newItems;\n\n  }\n}\n\nasync function linkResourcesConsumption(actor) {\n  if (actor.items.some((item) => item.system.recharge?.value)) {\n    logger.debug(`Resource linking for ${actor.name}`);\n    actor.items.forEach((item) => {\n      if (item.system?.recharge?.value) {\n        const itemID = foundry.utils.randomID(16);\n        item._id = itemID;\n        if (item.type === \"weapon\") {\n          item.type = \"feat\";\n          delete item.system.type.value;\n          item.system.type = {\n            value: \"monster\",\n            subtype: \"\",\n          };\n        }\n        item.system.consume = {\n          type: \"charges\",\n          target: itemID,\n          amount: null,\n        };\n      }\n    });\n  }\n  return actor;\n}\n\n// async function buildNPC(data, srdIconLibrary, iconMap) {\nexport async function buildNPC(data, type = \"monster\", temporary = true, update = false, handleBuild = false) {\n  logger.debug(\"Importing Images\");\n  await getNPCImage(data, { type });\n  logger.debug(\"Checking Items\");\n  await swapItems(data);\n\n  logger.debug(\"Importing Icons\");\n  // eslint-disable-next-line require-atomic-updates\n  data.items = await Iconizer.updateIcons(data.items, false, true, data.name);\n  data = Iconizer.addActorEffectIcons(data);\n  if (![\"monster\", \"summons\"].includes(type)) data = await linkResourcesConsumption(data);\n\n  if (handleBuild) {\n    // create the new npc\n    logger.debug(\"Creating NPC actor\");\n    if (update) {\n      const npc = game.actors.get(data._id);\n      await npc.deleteEmbeddedDocuments(\"Item\", [], { deleteAll: true });\n      await Actor.updateDocuments([data]);\n      return npc;\n    } else {\n      const options = {\n        temporary,\n        displaySheet: false,\n      };\n      const npc = await Actor.create(data, options);\n      // temporary\n      //   ? new Actor.implementation(data, options)\n      //   : await Actor.create(data, options);\n      return npc;\n    }\n\n  } else {\n    return data;\n  }\n\n}\n\nasync function parseNPC(data, type) {\n  const buildNpc = await buildNPC(data, type);\n  logger.info(`Processing ${type} ${buildNpc.name} for the compendium`);\n  const compendiumNPC = await addNPCToCompendium(buildNpc, type);\n  return compendiumNPC;\n}\n\nexport function addNPC(data, type) {\n  return new Promise((resolve, reject) => {\n    parseNPC(data, type)\n      .then((npc) => {\n        resolve(npc);\n      })\n      .catch((error) => {\n        logger.error(`error parsing NPC type ${type}: ${error} ${data.name}`);\n        logger.error(error.stack);\n        reject(error);\n      });\n  });\n}\n\nexport async function useSRDMonsterImages(monsters) {\n  // eslint-disable-next-line require-atomic-updates\n  if (game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-srd-monster-images\")) {\n    const srdImageLibrary = await Iconizer.getSRDImageLibrary();\n    DDBMuncher.munchNote(`Updating SRD Monster Images`, true);\n\n    monsters.forEach((monster) => {\n      logger.debug(`Checking ${monster.name} for srd images`);\n      const nameMatch = srdImageLibrary.find((m) => m.name === monster.name && m.type === \"npc\");\n      if (nameMatch) {\n        logger.debug(`Updating monster ${monster.name} to srd images`, nameMatch);\n        const compendiumName = SETTINGS.SRD_COMPENDIUMS.find((c) => c.type == \"monsters\").name;\n        const moduleArt = game.dnd5e.moduleArt.map.get(`Compendium.${compendiumName}.${nameMatch._id}`);\n        logger.debug(`Updating monster ${monster.name} to srd images`, { nameMatch, moduleArt });\n        monster.prototypeToken.texture.scaleY = nameMatch.prototypeToken.texture.scaleY;\n        monster.prototypeToken.texture.scaleX = nameMatch.prototypeToken.texture.scaleX;\n        if (moduleArt?.actor && nameMatch.actor !== \"\" && !moduleArt.actor.includes(\"mystery-man\")) {\n          monster.img = moduleArt.actor;\n          foundry.utils.setProperty(monster, \"flags.monsterMunch.imgSet\", true);\n        } else if (nameMatch.img && nameMatch.img !== \"\" && !nameMatch.img.includes(\"mystery-man\")) {\n          monster.img = nameMatch.img;\n          foundry.utils.setProperty(monster, \"flags.monsterMunch.imgSet\", true);\n        }\n        if (moduleArt?.token && !foundry.utils.hasProperty(moduleArt, \"token.texture.src\")) {\n          monster.prototypeToken.texture.src = moduleArt.token;\n        } else if (moduleArt?.token?.texture?.src\n          && moduleArt.token.texture.src !== \"\"\n          && !moduleArt.token.texture.src.includes(\"mystery-man\")\n        ) {\n          monster.prototypeToken.texture.src = moduleArt.token.texture.src;\n          foundry.utils.setProperty(monster, \"flags.monsterMunch.tokenImgSet\", true);\n          if (moduleArt.token.texture.scaleY) monster.prototypeToken.texture.scaleY = moduleArt.token.texture.scaleY;\n          if (moduleArt.token.texture.scaleX) monster.prototypeToken.texture.scaleX = moduleArt.token.texture.scaleX;\n        } else if (nameMatch.prototypeToken?.texture?.src\n          && nameMatch.prototypeToken.texture.src !== \"\"\n          && !nameMatch.prototypeToken.texture.src.includes(\"mystery-man\")\n        ) {\n          foundry.utils.setProperty(monster, \"flags.monsterMunch.tokenImgSet\", true);\n          monster.prototypeToken.texture.src = nameMatch.prototypeToken.texture.src;\n        }\n      }\n    });\n  }\n\n  return monsters;\n}\n\nexport async function generateIconMap(monsters) {\n  let promises = [];\n\n  const srdIcons = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-srd-icons\");\n  // eslint-disable-next-line require-atomic-updates\n  if (srdIcons) {\n    const srdImageLibrary = await Iconizer.getSRDImageLibrary();\n    DDBMuncher.munchNote(`Updating SRD Icons`, true);\n    let itemMap = [];\n\n    monsters.forEach((monster) => {\n      DDBMuncher.munchNote(`Processing ${monster.name}`);\n      promises.push(\n        Iconizer.copySRDIcons(monster.items, srdImageLibrary, itemMap).then((items) => {\n          monster.items = items;\n        })\n      );\n    });\n  }\n\n  return Promise.all(promises);\n}\n\nexport function copyExistingMonsterImages(monsters, existingMonsters) {\n  const updated = monsters.map((monster) => {\n    const existing = existingMonsters.find((m) => monster.name === m.name);\n    if (existing) {\n      monster.img = existing.img;\n      for (const key of Object.keys(monster.prototypeToken)) {\n        if (![\"sight\", \"detectionModes\", \"flags\"].includes(key) && foundry.utils.hasProperty(existing.prototypeToken, key)) {\n          monster.prototypeToken[key] = foundry.utils.deepClone(existing.prototypeToken[key]);\n        }\n      }\n      return monster;\n    } else {\n      return monster;\n    }\n  });\n  return updated;\n}\n","// Main module class\nimport DDBMuncher from \"../apps/DDBMuncher.js\";\nimport utils from \"../lib/utils.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport DDBCampaigns from \"../lib/DDBCampaigns.js\";\nimport logger from \"../logger.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\nimport PatreonHelper from \"../lib/PatreonHelper.js\";\nimport DDBCharacter from \"../parser/DDBCharacter.js\";\nimport { addVision5eStubs } from \"../effects/vision5e.js\";\nimport DDBMacros from \"../effects/DDBMacros.js\";\nimport Iconizer from \"../lib/Iconizer.js\";\nimport DDBItemImporter from \"../lib/DDBItemImporter.js\";\nimport ExternalAutomations from \"../effects/external/ExternalAutomations.js\";\n\nasync function getCharacterInventory(items) {\n  return items.map((item) => {\n    return {\n      chargesUsed: 0,\n      definitionId: 0,\n      definitionTypeId: 0,\n      displayAsAttack: null,\n      entityTypeId: 0,\n      equipped: false,\n      id: 0,\n      isAttuned: false,\n      quantity: item.bundleSize ? item.bundleSize : 1,\n      definition: item,\n    };\n  });\n}\n\nasync function generateImportItems(items) {\n  const mockCharacter = {\n    system: utils.getTemplate(\"character\"),\n    type: \"character\",\n    name: \"\",\n    flags: {\n      ddbimporter: {\n        compendium: true,\n        dndbeyond: {\n          effectAbilities: [],\n          totalLevels: 0,\n          proficiencies: [],\n          proficienciesIncludingEffects: [],\n          characterValues: [],\n        },\n      },\n    },\n  };\n  const mockDDB = {\n    character: {\n      classes: [],\n      race: {\n        racialTraits: [],\n      },\n      characterValues: [],\n      inventory: items,\n      customItems: null,\n      options: {\n        class: [],\n        race: [],\n        feat: [],\n      },\n      modifiers: {\n        race: [],\n        class: [],\n        background: [],\n        feat: [],\n        item: [],\n        condition: [],\n      },\n      feats: [],\n    }\n  };\n  let itemSpells = []; // here we need to parse each available spell and build a mock spell parser\n  const ddbCharacter = new DDBCharacter(mockDDB);\n  ddbCharacter.raw.character = mockCharacter;\n  ddbCharacter.source = {\n    ddb: mockDDB\n  };\n  ddbCharacter.raw.itemSpells = [];\n  const inventory = await ddbCharacter.getInventory();\n  const results = {\n    items: inventory,\n    itemSpellNames: itemSpells, // this needs to be a list of spells to find\n  };\n  return results;\n}\n\nfunction getItemData(sourceFilter) {\n  const cobaltCookie = getCobalt();\n  const campaignId = DDBCampaigns.getCampaignId();\n  const parsingApi = DDBProxy.getProxy();\n  const betaKey = PatreonHelper.getPatreonKey();\n  const body = { cobalt: cobaltCookie, campaignId: campaignId, betaKey: betaKey };\n  const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n  const enableSources = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-source-filter\");\n  const useGenerics = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-generic-items\");\n  const sources = enableSources\n    ? game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-muncher-sources\").flat()\n    : [];\n\n  return new Promise((resolve, reject) => {\n    fetch(`${parsingApi}/proxy/items`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body), // body data type must match \"Content-Type\" header\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (debugJson) {\n          FileHelper.download(JSON.stringify(data), `items-raw.json`, \"application/json\");\n        }\n        if (!data.success) {\n          DDBMuncher.munchNote(`Failure: ${data.message}`);\n          reject(data.message);\n        }\n        return data;\n      })\n      .then((data) => {\n        const genericsFilteredData = data.data.filter((item) => item.canBeAddedToInventory || useGenerics);\n        if (sources.length == 0 || !sourceFilter) return genericsFilteredData;\n        return genericsFilteredData.filter((item) =>\n          item.sources.some((source) => sources.includes(source.sourceId))\n        );\n      })\n      .then((data) => {\n        if (sources.length > 0) return data;\n        if (game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-item-homebrew-only\")) {\n          return data.filter((item) => item.isHomebrew);\n        } else if (!game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-item-homebrew\")) {\n          return data.filter((item) => !item.isHomebrew);\n        } else {\n          return data;\n        }\n      })\n      .then((data) => getCharacterInventory(data))\n      .then((items) => generateImportItems(items))\n      .then((data) => resolve(data))\n      .catch((error) => reject(error));\n  });\n}\n\nasync function addMagicItemSpells(items, spells, updateBool) {\n  if (spells.length === 0) return;\n  const itemHandler = new DDBItemImporter(\"itemspells\", spells);\n  await itemHandler.init();\n  const itemSpells = await itemHandler.updateCompendium(updateBool);\n  // scan the inventory for each item with spells and copy the imported data over\n  items.forEach((item) => {\n    if (item.flags.magicitems.spells) {\n      for (let [i, spell] of Object.entries(item.flags.magicitems.spells)) {\n        const itemSpell = itemSpells.find((item) => item.name === spell.name);\n        if (itemSpell) {\n          for (const [key, value] of Object.entries(itemSpell)) {\n            item.flags.magicitems.spells[i][key] = value;\n          }\n        }\n      }\n    }\n  });\n}\n\nexport async function parseItems(ids = null, deleteBeforeUpdate = null) {\n  const updateBool = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-existing\");\n  const magicItemsInstalled = !!game.modules.get(\"magicitems\");\n  const uploadDirectory = game.settings.get(SETTINGS.MODULE_ID, \"other-image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n\n  // to speed up file checking we pregenerate existing files now.\n  logger.info(\"Checking for existing files...\");\n  await FileHelper.generateCurrentFiles(uploadDirectory);\n  logger.info(\"Check complete, getting ItemData.\");\n\n  await DDBMuncher.generateCompendiumFolders(\"items\");\n\n  if (!CONFIG.DDBI.EFFECT_CONFIG.MODULES.configured) {\n    // eslint-disable-next-line require-atomic-updates\n    CONFIG.DDBI.EFFECT_CONFIG.MODULES.configured = await DDBMacros.configureDependencies();\n  }\n\n  DDBMuncher.munchNote(\"Downloading item data..\");\n\n  // disable source filter if ids provided\n  const sourceFilter = !(ids !== null && ids.length > 0);\n  const results = await getItemData(sourceFilter);\n  let items = results.items;\n\n  DDBMuncher.munchNote(\"Parsing item data..\");\n\n  // Items Spell addition is currently not done, parsing out spells needs to be addded\n  // let itemSpells = results.value.itemSpells;\n  let itemSpells = null;\n\n  // store all spells in the folder specific for Dynamic Items\n  if (magicItemsInstalled && itemSpells && Array.isArray(itemSpells)) {\n    await addMagicItemSpells(items, itemSpells, updateBool);\n  }\n\n  await Iconizer.preFetchDDBIconImages();\n\n  const itemHandler = new DDBItemImporter(\"items\", items, { deleteBeforeUpdate });\n  await itemHandler.init();\n  await itemHandler.srdFiddling();\n  await itemHandler.iconAdditions();\n  const filteredItems = (ids !== null && ids.length > 0)\n    ? itemHandler.documents.filter((s) => s.flags?.ddbimporter?.definitionId && ids.includes(String(s.flags.ddbimporter.definitionId)))\n    : itemHandler.documents;\n  const vision5eItems = addVision5eStubs(filteredItems);\n  itemHandler.documents = await ExternalAutomations.applyChrisPremadeEffects({ documents: vision5eItems, compendiumItem: true });\n\n  const finalCount = itemHandler.documents.length;\n  DDBMuncher.munchNote(`Importing ${finalCount} items!`, true);\n  logger.time(\"Item Import Time\");\n\n  const updateResults = await itemHandler.updateCompendium(updateBool);\n  const updatePromiseResults = await Promise.all(updateResults);\n\n  logger.debug({ finalItems: itemHandler.documents, updateResults, updatePromiseResults });\n  DDBMuncher.munchNote(\"\");\n  logger.timeEnd(\"Item Import Time\");\n  return updateResults;\n}\n\n\n","\nimport DICTIONARY from \"../dictionary.js\";\nimport CompendiumHelper from \"../lib/CompendiumHelper.js\";\nimport logger from \"../logger.js\";\n\n// Function to calculate the new price\nexport async function calculatePrice(rarity, consumable = false) {\n  if (!DICTIONARY.equipment.priceFormulas[rarity]) return null;\n  const roll = new Roll(DICTIONARY.equipment.priceFormulas[rarity]);\n  await roll.evaluate({ async: true });\n  return consumable ? parseInt(roll.total / 2) : roll.total;\n}\n\n// Function to update item prices\nexport async function updateItemPrices({ keepExistingNonDDBPrices = true, keepExistingDDBPrices = true, compendiumName = null } = {}) {\n  const packName = compendiumName ?? (await CompendiumHelper.getCompendiumLabel(\"equipment\"));\n  const pack = CompendiumHelper.getCompendium(packName);\n  pack.configure({ locked: false });\n\n  if (!pack) {\n    logger.error(\"Compendium not found:\", packName);\n    return [];\n  }\n\n  const items = (await pack.getIndex({\n    fields: [\n      \"name\",\n      \"type\",\n      \"system.rarity\",\n      \"system.price.value\",\n      \"flags.ddbimporter.price\",\n    ],\n  })).filter((i) => {\n    const rarity = i.system.rarity;\n    if (!(rarity in DICTIONARY.equipment.priceFormulas)) {\n      logger.info(`No update needed for ${i.name}, item has no rarity`);\n      return false;\n    }\n    const gpPrice = i.system.price.value;\n    const noGpValue = (gpPrice === undefined || gpPrice === null || gpPrice === 0);\n\n    if (noGpValue) return true;\n    const existingDDBPrice = foundry.utils.getProperty(i, \"flags.ddbimporter.price.xgte\");\n    // console.warn(`checking ${i.name}`, { existingDDBPrice, keepExistingDDBPrices, keepExistingNonDDBPrices, i });\n    if (!keepExistingDDBPrices && existingDDBPrice) return true;\n    if (!keepExistingNonDDBPrices && !existingDDBPrice) return true;\n    logger.info(`No update needed for ${i.name}`);\n    return false;\n  });\n\n  const updates = [];\n\n  // const items = await pack.getDocuments();\n\n  for (let item of items) {\n    const rarity = item.system.rarity;\n    const gpPrice = item.system.price.value;\n    const isConsumable = item.type === \"consumable\";\n\n    logger.info(`Processing ${item.name}: Rarity - ${rarity}, Price - ${gpPrice}, Consumable - ${isConsumable}`);\n\n    const newPrice = keepExistingDDBPrices && foundry.utils.hasProperty(item, \"flags.ddbimporter.price.value\")\n      ? foundry.utils.getProperty(item, \"flags.ddbimporter.price.value\")\n      : await calculatePrice(rarity, isConsumable);\n    if (newPrice !== null) {\n      logger.info(`Adding update of GP price of ${item.name} (Rarity: ${rarity}) to ${newPrice} gp`);\n      updates.push({\n        _id: item._id,\n        \"system.price.value\": newPrice,\n        \"system.price.denomination\": \"gp\",\n        \"flags.ddbimporter.price\": { xgte: true, value: newPrice },\n      });\n    }\n  }\n\n  await Item.updateDocuments(updates, { pack: packName });\n\n  ui.notifications.info(`Attempted to update prices for ${updates.length} items.`);\n  return items;\n}\n","// Import parsing functions\nimport { fixSpells } from \"./special.js\";\nimport { parseSpell } from \"./parseSpell.js\";\n\nexport async function getSpells(spells) {\n  let items = await Promise.all(spells\n    .filter((spell) => spell.definition)\n    .filter((spell) => {\n      // remove archived material\n      if (spell.definition.sources && spell.definition.sources.some((source) => source.sourceId === 39)) {\n        return false;\n      } else {\n        return true;\n      }\n    })\n    .map(async (spell) => {\n      spell.flags = {\n        ddbimporter: {\n          generic: true,\n          dndbeyond: {\n            lookup: \"generic\",\n            lookupName: \"generic\",\n            level: spell.castAtLevel,\n            castAtLevel: spell.castAtLevel,\n          },\n        },\n      };\n\n      return parseSpell(spell, null);\n    }));\n\n  if (items) {\n    await fixSpells(null, items);\n  }\n\n  return items;\n}\n","// Main module class\nimport DDBMuncher from \"../apps/DDBMuncher.js\";\nimport { getSpells } from \"../parser/spells/getGenericSpells.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport logger from \"../logger.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport DDBCampaigns from \"../lib/DDBCampaigns.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\nimport { addVision5eStubs } from \"../effects/vision5e.js\";\nimport PatreonHelper from \"../lib/PatreonHelper.js\";\nimport DDBMacros from \"../effects/DDBMacros.js\";\nimport Iconizer from \"../lib/Iconizer.js\";\nimport DDBItemImporter from \"../lib/DDBItemImporter.js\";\nimport utils from \"../lib/utils.js\";\nimport ExternalAutomations from \"../effects/external/ExternalAutomations.js\";\n\nfunction getSpellData(className, sourceFilter) {\n  const cobaltCookie = getCobalt();\n  const campaignId = DDBCampaigns.getCampaignId();\n  const parsingApi = DDBProxy.getProxy();\n  const betaKey = PatreonHelper.getPatreonKey();\n  const body = { cobalt: cobaltCookie, campaignId: campaignId, betaKey: betaKey, className: className };\n  const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n  const enableSources = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-source-filter\");\n  const sources = enableSources\n    ? game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-muncher-sources\").flat()\n    : [];\n\n  return new Promise((resolve, reject) => {\n    fetch(`${parsingApi}/proxy/class/spells`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body), // body data type must match \"Content-Type\" header\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (debugJson) {\n          FileHelper.download(JSON.stringify(data), `spells-raw.json`, \"application/json\");\n        }\n        if (!data.success) {\n          DDBMuncher.munchNote(`Failure: ${data.message}`);\n          reject(data.message);\n        }\n        return data;\n      })\n      .then((data) => {\n        if (sources.length == 0 || !sourceFilter) return data.data;\n        return data.data.filter((spell) =>\n          spell.definition.sources.some((source) => sources.includes(source.sourceId))\n        );\n      })\n      .then((data) => {\n        if (sources.length > 0) return data;\n        if (game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-spell-homebrew-only\")) {\n          return data.filter((spell) => spell.definition.isHomebrew);\n        } else if (!game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-spell-homebrew\")) {\n          return data.filter((spell) => !spell.definition.isHomebrew);\n        } else {\n          return data;\n        }\n      })\n      .then((data) => resolve(data))\n      .catch((error) => {\n        logger.warn(error);\n        reject(error);\n      });\n  });\n}\n\nexport async function parseSpells(ids = null, deleteBeforeUpdate = null) {\n  const updateBool = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-existing\");\n  const uploadDirectory = game.settings.get(SETTINGS.MODULE_ID, \"other-image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n\n  // to speed up file checking we pregenerate existing files now.\n  await FileHelper.generateCurrentFiles(uploadDirectory);\n  await DDBMuncher.generateCompendiumFolders(\"spells\");\n\n  if (!CONFIG.DDBI.EFFECT_CONFIG.MODULES.configured) {\n    // eslint-disable-next-line require-atomic-updates\n    CONFIG.DDBI.EFFECT_CONFIG.MODULES.configured = await DDBMacros.configureDependencies();\n  }\n\n\n  DDBMuncher.munchNote(\"Downloading spell data..\");\n\n  // disable source filter if ids provided\n  const sourceFilter = !(ids !== null && ids.length > 0);\n  const results = await Promise.allSettled([\n    getSpellData(\"Cleric\", sourceFilter),\n    getSpellData(\"Druid\", sourceFilter),\n    getSpellData(\"Sorcerer\", sourceFilter),\n    getSpellData(\"Warlock\", sourceFilter),\n    getSpellData(\"Wizard\", sourceFilter),\n    getSpellData(\"Paladin\", sourceFilter),\n    getSpellData(\"Ranger\", sourceFilter),\n    getSpellData(\"Bard\", sourceFilter),\n    getSpellData(\"Graviturgy\", sourceFilter),\n    getSpellData(\"Chronurgy\", sourceFilter),\n    getSpellData(\"Artificer\", sourceFilter),\n  ]);\n\n  DDBMuncher.munchNote(\"Parsing spell data.\");\n\n  const filteredResults = results\n    .filter((r) => r.status === \"fulfilled\")\n    .map((r) => r.value).flat().flat()\n    .filter((v, i, a) => a.findIndex((t) => t.definition.name === v.definition.name) === i);\n\n  const rawSpells = await getSpells(filteredResults);\n\n  const spells = rawSpells\n    .filter((spell) => spell?.name)\n    .map((spell) => {\n      spell.name = utils.nameString(spell.name);\n      return spell;\n    });\n\n  if (results.some((r) => r.status === \"rejected\")) {\n    DDBMuncher.munchNote(\"Failed to parse some spells, see the developer console (F12) for details.\");\n    logger.error(\"Failed spell parsing\", results);\n  }\n\n  await Iconizer.preFetchDDBIconImages();\n\n  const uniqueSpells = spells.filter((v, i, a) => a.findIndex((t) => t.name === v.name) === i);\n  const itemHandler = new DDBItemImporter(\"spells\", uniqueSpells, { deleteBeforeUpdate });\n  await itemHandler.init();\n  await itemHandler.srdFiddling();\n  await itemHandler.iconAdditions();\n  const filteredSpells = (ids !== null && ids.length > 0)\n    ? itemHandler.documents.filter((s) => s.flags?.ddbimporter?.definitionId && ids.includes(String(s.flags.ddbimporter.definitionId)))\n    : itemHandler.documents;\n  const visionSpells = addVision5eStubs(filteredSpells);\n  itemHandler.documents = await ExternalAutomations.applyChrisPremadeEffects({ documents: visionSpells, compendiumItem: true });\n\n  const finalCount = itemHandler.documents.length;\n  DDBMuncher.munchNote(`Importing ${finalCount} spells...`, true);\n  logger.time(\"Spell Import Time\");\n  const updateResults = await itemHandler.updateCompendium(updateBool);\n  const updatePromiseResults = await Promise.all(updateResults);\n\n  logger.debug({ finalSpells: itemHandler.documents, updateResults, updatePromiseResults });\n  DDBMuncher.munchNote(\"\");\n  logger.timeEnd(\"Spell Import Time\");\n  return updateResults;\n}\n\n\n","import logger from \"../logger.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport CompendiumHelper from \"../lib/CompendiumHelper.js\";\nimport DDBMuncher from \"../apps/DDBMuncher.js\";\nimport { getNPCImage } from \"./importMonster.js\";\nimport DDBMonsterFactory from \"../parser/DDBMonsterFactory.js\";\nimport DDBItemImporter from \"../lib/DDBItemImporter.js\";\n\nlet totalTargets = 0;\nlet count = 0;\n\nasync function updateActorsWithActor(targetActors, sourceActor) {\n  let results = [];\n  count++;\n\n  for (let targetActor of targetActors) {\n    DDBMuncher.munchNote(`Updating ${count}/${totalTargets} world monsters`);\n    logger.debug(`Updating ${count}/${totalTargets} world monsters`, targetActor);\n    const monsterItems = sourceActor.items.toObject().map((item) => {\n      delete item._id;\n      return item;\n    });\n    const actorUpdate = foundry.utils.duplicate(sourceActor);\n    // pop items in later\n    delete actorUpdate.items;\n\n\n    const updateImages = game.settings.get(\"ddb-importer\", \"munching-policy-update-world-monster-update-images\");\n    if (!updateImages) {\n      actorUpdate.img = targetActor.img;\n      actorUpdate.prototypeToken.texture.src = targetActor.prototypeToken.texture.src;\n      actorUpdate.prototypeToken.scale = targetActor.prototypeToken.scale;\n      actorUpdate.prototypeToken.randomImg = targetActor.prototypeToken.randomImg;\n      actorUpdate.prototypeToken.mirrorX = targetActor.prototypeToken.mirrorX;\n      actorUpdate.prototypeToken.mirrorY = targetActor.prototypeToken.mirrorY;\n      actorUpdate.prototypeToken.lockRotation = targetActor.prototypeToken.lockRotation;\n      actorUpdate.prototypeToken.rotation = targetActor.prototypeToken.rotation;\n      actorUpdate.prototypeToken.alpha = targetActor.prototypeToken.alpha;\n      actorUpdate.prototypeToken.lightAlpha = targetActor.prototypeToken.lightAlpha;\n      actorUpdate.prototypeToken.lightAnimation = targetActor.prototypeToken.lightAnimation;\n      actorUpdate.prototypeToken.tint = targetActor.prototypeToken.tint;\n      actorUpdate.prototypeToken.lightColor = targetActor.prototypeToken.lightColor;\n    }\n\n    const retainBiography = game.settings.get(\"ddb-importer\", \"munching-policy-update-world-monster-retain-biography\");\n    if (retainBiography) {\n      actorUpdate.system.details.biography = targetActor.system.details.biography;\n    }\n\n    actorUpdate._id = targetActor.id;\n    if (targetActor.folder) actorUpdate.folder = targetActor.folder._id;\n    actorUpdate.sort = targetActor.sort;\n    actorUpdate.ownership = targetActor.ownership;\n    DDBItemImporter.copySupportedItemFlags(targetActor, actorUpdate);\n    await targetActor.deleteEmbeddedDocuments(\"Item\", [], { deleteAll: true });\n    await targetActor.update(actorUpdate);\n    // console.warn(\"afterdelete\", foundry.utils.duplicate(targetActor));\n    await targetActor.createEmbeddedDocuments(\"Item\", monsterItems);\n    // console.warn(\"after create\", foundry.utils.duplicate(targetActor));\n\n  };\n\n  return Promise.all(results);\n}\n\nexport async function updateWorldMonsters() {\n  let results = [];\n  // get ddb monsters compendium\n  const monsterCompendiumLabel = CompendiumHelper.getCompendiumLabel(\"monster\");\n  const monsterCompendium = CompendiumHelper.getCompendium(monsterCompendiumLabel);\n\n  if (monsterCompendium) {\n    const monsterIndices = [\"name\", \"flags.ddbimporter.id\"];\n    const index = await monsterCompendium.getIndex({ fields: monsterIndices });\n    totalTargets = game.actors.filter((a) => a.type === \"npc\" && foundry.utils.hasProperty(a, \"flags.ddbimporter.id\")).length;\n    count = 0;\n    DDBMuncher.munchNote(`Updating ${count}/${totalTargets} world monsters`);\n    logger.debug(`Checking ${totalTargets} world monsters`);\n\n    for (const [key, value] of index.entries()) {\n\n      const worldMatches = game.actors.filter((actor) =>\n        actor.flags?.ddbimporter?.id\n        && actor.name === value.name\n        && actor.flags.ddbimporter.id == value.flags?.ddbimporter?.id\n      );\n\n      if (worldMatches.length > 0) {\n        DDBMuncher.munchNote(`Found ${value.name} world monster`, true);\n        logger.debug(`Matched ${value.name} (${key})`);\n        const monster = await monsterCompendium.getDocument(value._id);\n        let updatedActors = await updateActorsWithActor(worldMatches, monster, count);\n        results.push(updatedActors);\n      }\n    }\n    DDBMuncher.munchNote(`Finished updating ${totalTargets} world monsters`);\n    DDBMuncher.munchNote(\"\", true);\n\n  } else {\n    logger.error(\"Error opening compendium, check your settings\");\n  }\n  return results;\n}\n\nexport async function resetCompendiumActorImages(compendiumName = null, type = \"monster\") {\n  const monsterCompendiumLabel = compendiumName ? compendiumName : CompendiumHelper.getCompendiumLabel(type);\n  const monsterCompendium = CompendiumHelper.getCompendium(monsterCompendiumLabel);\n  const fields = [\"name\", \"flags.monsterMunch\", \"system.details.type.value\", \"img\", \"prototypeToken.texture.src\"];\n  const index = await monsterCompendium.getIndex({ fields });\n\n  const otherDirectory = game.settings.get(\"ddb-importer\", \"other-image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n  await FileHelper.generateCurrentFiles(otherDirectory);\n\n  const updates = await Promise.all(index\n    .filter((i) => i.name !== \"#[CF_tempEntity]\")\n    .map(async (i) => {\n      const options = { forceUpdate: true, disableAutoTokenizeOverride: true, type };\n      const update = await getNPCImage(foundry.utils.duplicate(i), options);\n      logger.info(`Resetting ${i.name}`, update);\n      return update;\n    }));\n\n  const results = await Actor.updateDocuments(updates, { pack: monsterCompendiumLabel });\n  logger.debug(\"Reset results\", results);\n  return results;\n}\n\nexport async function parseCritters(ids = null) {\n  const monsterFactory = new DDBMonsterFactory();\n  const parsedExtras = await monsterFactory.processIntoCompendium(ids);\n  return parsedExtras;\n}\n","export async function newVehicle(name) {\n  const options = {\n    temporary: true,\n    displaySheet: false,\n  };\n  const vehicleClass = await Actor.create({ name, type: \"vehicle\" }, options);\n  let vehicle = vehicleClass.toObject();\n  const flags = {\n    dnd5e: {},\n    monsterMunch: {},\n    ddbimporter: {\n      dndbeyond: {},\n    },\n  };\n  foundry.utils.setProperty(vehicle, \"flags\", flags);\n  return vehicle;\n};\n","import DICTIONARY from \"../../dictionary.js\";\n\nexport function getDamageImmunities(ddb) {\n  const config = CONFIG.DDB.damageTypes;\n\n  let values = [];\n  let custom = [];\n\n  const damageTypes = DICTIONARY.actions.damageType.filter((d) => d.name !== null).map((d) => d.name);\n\n  ddb.damageImmunities.forEach((adj) => {\n    const adjustment = config.find((cadj) => adj === cadj.id);\n    if (adjustment && damageTypes.includes(adjustment.name.toLowerCase())) {\n      values.push(adjustment.name.toLowerCase());\n    } else if (adjustment && adjustment.slug === \"bludgeoning-piercing-and-slashing-from-nonmagical-attacks\") {\n      values.push(\"physical\");\n    } else if (adjustment) {\n      const midiQolInstalled = game.modules.get(\"midi-qol\")?.active;\n      if (midiQolInstalled) {\n        if (adjustment.name.toLowerCase().includes(\"silvered\")) {\n          values.push(\"silver\");\n        } else if (adjustment.name.toLowerCase().includes(\"adamantine\")) {\n          values.push(\"adamant\");\n        } else if (adjustment.slug === \"damage-from-spells\") {\n          values.push(\"spell\");\n        } else {\n          custom.push(adjustment.name);\n        }\n      } else {\n        custom.push(adjustment.name);\n      }\n    }\n  });\n\n  const adjustments = {\n    value: values,\n    custom: custom.join(\"; \"),\n  };\n\n  return adjustments;\n}\n\nexport function getConditionImmunities(ddb) {\n  const config = CONFIG.DDB.conditions.map((condition) => {\n    return {\n      id: condition.definition.id,\n      name: condition.definition.name,\n      type: condition.definition.type,\n      slug: condition.definition.slug,\n    };\n  });\n\n  let values = [];\n  let custom = [];\n\n  ddb.conditionImmunities.forEach((adj) => {\n    const adjustment = config.find((cadj) => adj === cadj.id);\n    const valueAdjustment = DICTIONARY.conditions.find((condition) => condition.label.toLowerCase() == adjustment.name.toLowerCase());\n    if (adjustment && valueAdjustment) {\n      values.push(valueAdjustment.foundry);\n    } else if (adjustment) {\n      custom.push(adjustment.name);\n    }\n  });\n\n  const adjustments = {\n    value: values,\n    custom: custom.join(\"; \"),\n  };\n\n  return adjustments;\n}\n","export const ABILITIES = [\n  { id: 1, value: \"str\", long: \"strength\" },\n  { id: 2, value: \"dex\", long: \"dexterity\" },\n  { id: 3, value: \"con\", long: \"constitution\" },\n  { id: 4, value: \"int\", long: \"intelligence\" },\n  { id: 5, value: \"wis\", long: \"wisdom\" },\n  { id: 6, value: \"cha\", long: \"charisma\" },\n];\n\n//     \"abilities\": {\n// \"str\": {\n//   \"value\": 27,\n//   \"proficient\": 0,\n//   \"min\": 3,\n//   \"mod\": 8,\n//   \"save\": 8,\n//   \"prof\": 0,\n//   \"saveBonus\": 0,\n//   \"checkBonus\": 0,\n//   \"dc\": 23\n// },\n// \"dex\": {\n//   \"value\": 14,\n//   \"proficient\": 1,\n//   \"min\": 3,\n//   \"mod\": 2,\n//   \"save\": 9,\n//   \"prof\": 7,\n//   \"saveBonus\": 0,\n//   \"checkBonus\": 0,\n//   \"dc\": 17\n// },\n/**\n * Retrieves character abilities, including proficiency on saving throws\n * @param {obj} ddb JSON Import\n * @param {obj} CONFIG.DDB config\n */\nexport function getAbilities(abilities, ddb) {\n  // go through every ability\n  ABILITIES.forEach((ability) => {\n    const value = ddb.stats.find((stat) => stat.id === ability.id)?.value || 10;\n    const mod = value === 0\n      ? -5\n      : CONFIG.DDB.statModifiers.find((s) => s.value == value).modifier;\n\n    abilities[ability.value]['value'] = value;\n    abilities[ability.value]['proficient'] = 0;\n    abilities[ability.value]['mod'] = mod;\n\n  });\n\n  return abilities;\n}\n\n\nexport function getAbilityMods(ddb) {\n  let abilities = {};\n\n  ABILITIES.forEach((ability) => {\n    const value = ddb.stats.find((stat) => stat.id === ability.id)?.value || 10;\n    const mod = value === 0\n      ? -5\n      : CONFIG.DDB.statModifiers.find((s) => s.value == value).modifier;\n\n    abilities[ability.value] = mod;\n  });\n\n  return abilities;\n\n}\n","import logger from '../../logger.js';\n\nconst SIZES = [\n  { name: \"Tiny\", value: \"tiny\", size: 0.5 },\n  { name: \"Small\", value: \"sm\", size: 0.8 },\n  { name: \"Medium\", value: \"med\", size: 1 },\n  { name: \"Large\", value: \"lg\", size: 2 },\n  { name: \"Huge\", value: \"huge\", size: 3 },\n  { name: \"Gargantuan\", value: \"grg\", size: 4 },\n];\n\nfunction getSizeFromId(sizeId) {\n  const size = CONFIG.DDB.creatureSizes.find((s) => s.id == sizeId).name;\n  const sizeData = SIZES.find((s) => size == s.name);\n\n  if (!sizeData) {\n    logger.warn(`No size found, using medium`, size);\n    return { name: \"Medium\", value: \"med\", size: 1 };\n  }\n  return sizeData;\n}\n\nexport function getSize (ddb) {\n  const sizeData = getSizeFromId(ddb.sizeId);\n  const token = {\n    scale: sizeData.size >= 1 ? 1 : sizeData.size,\n    value: sizeData.size >= 1 ? sizeData.size : 1,\n  };\n\n  const data = {\n    value: sizeData.value,\n    token: token,\n  };\n\n  return data;\n\n}\n","export function getCapacity(ddb) {\n  let capacity = {\n    creature: \"\",\n    cargo: null,\n  };\n\n  if (ddb.cargoCapacity) {\n    capacity.cargo = ddb.cargoCapacity;\n  }\n\n  if (ddb.creatureCapacity && ddb.creatureCapacity.length > 0) {\n    const capacityStrings = ddb.creatureCapacity.map((c) => {\n      const size = c.sizeId\n        ? `${CONFIG.DDB.creatureSizes.find((s) => s.id == c.sizeId).name.toLowerCase()} `\n        : \"\";\n\n      return `${c.capacity} ${size}${c.type}`;\n    });\n    capacity.creature = capacityStrings.join(\", \");\n  }\n\n  return capacity;\n}\n","export const FLIGHT_IDS = [\n  \"7\",\n  \"8\",\n];\n\nconst MOVEMENT_DICT = {\n  \"land\": \"walk\",\n  \"water\": \"swim\",\n  \"air\": \"fly\",\n  \"magical\": \"Magical\",\n};\n\nexport function getMovement(ddb, configurations, movement) {\n\n  // is it travel pace?\n  if (configurations.ETP) {\n    movement[\"units\"] = \"mi\";\n    const travelPaceMilesPerHour = ddb.travelPace / 5280;\n    if (FLIGHT_IDS.includes(ddb.id) || configurations.DT === \"spelljammer\") {\n      movement[\"fly\"] = travelPaceMilesPerHour;\n    } else {\n      movement[\"swim\"] = travelPaceMilesPerHour;\n    }\n  } else {\n    const primaryComponent = ddb.components.find((c) => c.isPrimaryComponent);\n    if (primaryComponent && primaryComponent.speeds && primaryComponent.speeds.length > 0) {\n      movement[\"units\"] = \"ft\";\n      const type = MOVEMENT_DICT[primaryComponent.speeds[0].type];\n      movement[type] = primaryComponent.speeds[0].modes[0].value;\n    }\n\n  }\n\n  return movement;\n}\n","// import logger from '../../../logger.js';\nimport utils from '../../../lib/utils.js';\n\nexport function newComponent(name, type) {\n  // logger.debug(\"Generating new component:\", { name, type });\n  let feat = {\n    name: name,\n    type: type,\n    system: utils.getTemplate(type),\n    flags: {\n      ddbimporter: {\n        dndbeyond: {\n        },\n      },\n    },\n  };\n  return feat;\n};\n","import { newComponent } from \"./templates/component.js\";\nimport DICTIONARY from \"../../dictionary.js\";\nimport logger from \"../../logger.js\";\nimport { parseTags } from \"../../lib/DDBReferenceLinker.js\";\n\nconst TYPE_MAPPING = {\n  hull: \"equipment\",\n  helm: \"equipment\",\n  weapon: \"weapon\",\n  movement: \"equipment\",\n  control: \"equipment\",\n  // \"crew\" action: feat\n  // \"action\", action: feat\n  feature: \"feat\",\n  // \"loot\": loot\n};\n\nfunction getActivation(action, crew = false) {\n  const actionType = DICTIONARY.actions.activationTypes.find((type) => type.id === action.activation?.activationType);\n  const activation = {\n    type: crew ? \"crew\" : actionType ? actionType.value : \"action\",\n    cost: action.activation?.activationTime || 1,\n    condition: \"\",\n  };\n  return activation;\n}\n\nfunction getLimitedUse(action) {\n  if (\n    action.limitedUse\n    && (action.limitedUse.maxUses)\n  ) {\n    const resetType = DICTIONARY.resets.find((type) => type.id === action.limitedUse.resetType);\n    let maxUses = (action.limitedUse.maxUses && action.limitedUse.maxUses !== -1) ? action.limitedUse.maxUses : 0;\n\n    const finalMaxUses = (maxUses) ? parseInt(maxUses) : null;\n\n    return {\n      value: (finalMaxUses !== null && finalMaxUses != 0) ? maxUses - action.limitedUse.numberUsed : null,\n      max: (finalMaxUses != 0) ? finalMaxUses : null,\n      per: resetType ? resetType.value : \"\",\n    };\n  } else {\n    return {\n      value: null,\n      max: null,\n      per: \"\",\n    };\n  }\n}\n\nfunction calculateRange(action, weapon) {\n  if (action.range && action.range.aoeType && action.range.aoeSize) {\n    weapon.system.range = { value: null, units: \"self\", long: \"\" };\n    weapon.system.target = {\n      value: action.range.aoeSize,\n      type: DICTIONARY.actions.aoeType.find((type) => type.id === action.range.aoeType)?.value,\n      units: \"ft\",\n    };\n  } else if (action.range && action.range.range) {\n    weapon.system.range = {\n      value: action.range.range,\n      units: \"ft\",\n      long: action.range.longRange || \"\",\n    };\n  } else {\n    weapon.system.range = { value: 5, units: \"ft\", long: \"\" };\n  }\n  return weapon;\n}\n\n\nfunction getSaveAbility(description) {\n  const save = description.match(/DC ([0-9]+) (.*?) saving throw|\\(save DC ([0-9]+)\\)/);\n  if (save) {\n    return save[2] ? save[2].toLowerCase().substr(0, 3) : \"\";\n  } else {\n    return \"\";\n  }\n}\n\nfunction getActionType(action) {\n  let actionType = \"rwak\";\n  // lets see if we have a save stat for things like Dragon born Breath Weapon\n  if (typeof action.saveStatId === \"number\" || action.fixedSaveDc) {\n    actionType = \"save\";\n  } else if (action.actionType === 1) {\n    if (action.attackTypeRange === 2) {\n      actionType = \"rwak\";\n    } else {\n      actionType = \"mwak\";\n    }\n  } else if (action.rangeId && action.rangeId === 1) {\n    actionType = \"mwak\";\n  } else if (action.rangeId && action.rangeId === 2) {\n    actionType = \"rwak\";\n  } else {\n    actionType = \"other\";\n  }\n  return actionType;\n}\n\n\nfunction getWeaponProperties(action, weapon) {\n  if (action.name) weapon.name += `: ${action.name}`;\n  weapon.system.description.value += `\\n${action.description}`;\n\n  if (action.fixedToHit !== null) {\n    weapon.system.attack.bonus = `${action.fixedToHit}`;\n  }\n\n  weapon.system.type.value = \"siege\";\n  weapon.system.target = {\n    \"value\": 1,\n    \"width\": null,\n    \"units\": \"\",\n    \"type\": \"creature\"\n  };\n  if (Number.isInteger(action.numberOfTargets)) weapon.system.target.value = action.numberOfTargets;\n\n  const damageType = DICTIONARY.actions.damageType.find((type) => type.id === action.damageTypeId).name;\n\n  if (action.dice?.diceString) weapon.system.damage.parts = [[action.dice.diceString, damageType]];\n\n  if (action.fixedSaveDc) {\n    const saveAbility = (action.saveStatId)\n      ? DICTIONARY.character.abilities.find((stat) => stat.id === action.saveStatId).value\n      : getSaveAbility(action.description);\n    weapon.system.save = {\n      ability: saveAbility,\n      dc: Number.parseInt(action.fixedSaveDc),\n      scaling: \"flat\",\n    };\n  }\n\n  weapon.system.equipped = true;\n  weapon.system.actionType = getActionType(action);\n  weapon.system.uses = getLimitedUse(action);\n  weapon.system.activation = getActivation(action, weapon.system.activation.type === \"crew\");\n  weapon = calculateRange(action, weapon);\n\n  return weapon;\n\n}\n\n// eslint-disable-next-line complexity\nfunction buildComponents(ddb, configurations, component) {\n  const results = [];\n  const types = component.definition.types.map((t) => t.type);\n  const item = foundry.utils.duplicate(newComponent(component.definition.name, TYPE_MAPPING[types[0]]));\n\n  if (types[0] === \"equipment\") {\n    foundry.utils.setProperty(item, \"data.armor.type\", \"vehicle\");\n  }\n\n  if (component.description) item.system.description.value = parseTags(component.description);\n\n  item.system.quantity = component.count;\n\n  item.system.armor = {\n    value: null,\n    type: \"vehicle\",\n    dex: null\n  };\n  item.system.hp = {\n    value: null,\n    max: null,\n    dt: null,\n    conditions: \"\"\n  };\n\n  if (component.groupType === \"action-station\") {\n    item.system.activation.type = \"crew\";\n    switch (component.definition.coverType) {\n      case \"full\":\n        item.system.cover = 1;\n        break;\n      case \"half\":\n        item.system.cover = 0.5;\n        break;\n      case \"three-quarters\":\n        item.system.cover = 0.75;\n        break;\n      default:\n        item.system.cover = undefined;\n        break;\n    }\n\n  } else if (component.definition.groupType === \"component\") {\n\n    if (component.definition.speeds && component.definition.speeds.length > 0) {\n      item.system.speed = {\n        value: component.definition.speeds[0].modes[0].value,\n        conditions: component.definition.speeds[0].modes[0].description\n          ? component.definition.speeds[0].modes[0].description\n          : \"\",\n      };\n      if (component.definition.speeds[0].modes.length > 1) {\n        const speedConditions = [];\n        for (let i = 1; i < component.definition.speeds[0].modes.length; i++) {\n          const speedValue = component.definition.speeds[0].modes[i].value;\n          const speedCondition = component.definition.speeds[0].modes[i].description\n            ? component.definition.speeds[0].modes[i].description\n            : \"\";\n          const speedRestriction = component.definition.speeds[0].modes[i].restrictionsText\n            ? component.definition.speeds[0].modes[i].restrictionsText\n            : \"\";\n          speedConditions.push(`${speedValue} ${speedCondition}${speedRestriction}`);\n        }\n\n        const speedAdjustment = component.definition.types.find((t) => t.type === \"movement\");\n        if (speedAdjustment && speedAdjustment.adjustments && speedAdjustment.adjustments.length > 0) {\n          speedAdjustment.adjustments.filter((a) => a.type === \"speed\").forEach((a) => {\n            a.values.forEach((v) => {\n              speedConditions.push(`-${v.perDamageValue}ft speed per ${v.perDamageTaken} damage taken`);\n            });\n          });\n        }\n        if (speedConditions.length > 0) {\n          item.system.speed.conditions += speedConditions.join(\"; \");\n        }\n      }\n    }\n\n    if (Number.isInteger(component.definition.armorClass)) {\n      item.system.armor = {\n        value: parseInt(component.definition.armorClass),\n        type: \"vehicle\",\n        dex: null\n      };\n    }\n\n    if (Number.isInteger(component.definition.hitPoints)) {\n      item.system.hp = {\n        value: parseInt(component.definition.hitPoints),\n        max: parseInt(component.definition.hitPoints),\n        dt: null,\n        conditions: \"\"\n      };\n      if (component.definition.damageThreshold) {\n        item.system.hp.dt = component.definition.damageThreshold;\n      }\n    }\n  }\n\n  if (types.includes(\"weapon\") && component.definition.actions.length > 0) {\n    logger.debug(\"processing weapon\", component);\n    component.definition.actions.forEach((action) => {\n      const actionItem = getWeaponProperties(action, foundry.utils.duplicate(item));\n      logger.debug(\"action item\", actionItem);\n      results.push(actionItem);\n    });\n  } else {\n    results.push(item);\n  }\n\n  return results;\n\n}\n\nexport function processComponents(ddb, configurations) {\n  const components = ddb.components.sort((c) => c.displayOrder);\n\n  const componentCount = {};\n  const uniqueComponents = [];\n  components.forEach((component) => {\n    const key = component.definitionKey;\n    const count = componentCount[key] || 0;\n    if (count === 0) uniqueComponents.push(component);\n    componentCount[key] = count + 1;\n  });\n\n\n  const componentItems = uniqueComponents\n    .filter((f) => f.definition.name)\n    .map((component) => {\n      component.count = componentCount[component.definitionKey];\n      const builtItems = buildComponents(ddb, configurations, component);\n      return builtItems;\n    })\n    .flat();\n\n  const featureItems = ddb.features\n    .filter((f) => f.name)\n    .map((feature) => {\n      foundry.utils.setProperty(feature, \"definition.types\", [{ type: \"feature\" }]);\n      foundry.utils.setProperty(feature, \"definition.name\", feature.name);\n      const builtItems = buildComponents(ddb, configurations, feature);\n      return builtItems;\n    })\n    .flat();\n\n  return featureItems.concat(componentItems);\n}\n","export const ACTION_THRESHOLDS = [\n  {\n    id: \"7\",\n    thresholds: {\n      0: 1,\n      1: 10,\n      2: 20,\n    },\n  },\n  {\n    id: \"11\",\n    thresholds: {\n      0: null,\n      1: null,\n      2: null,\n    },\n  },\n  {\n    id: \"9\",\n    thresholds: {\n      0: null,\n      1: null,\n      2: null,\n    },\n  },\n  {\n    id: \"1\",\n    thresholds: {\n      0: 3,\n      1: 20,\n      2: 40,\n    },\n  },\n  {\n    id: \"2\",\n    thresholds: {\n      0: 1,\n      1: null,\n      2: 2,\n    },\n  },\n  {\n    id: \"3\",\n    thresholds: {\n      0: 20,\n      1: null,\n      2: 40,\n    },\n  },\n  {\n    id: \"8\",\n    thresholds: {\n      0: 1,\n      1: null,\n      2: 1,\n    },\n  },\n  {\n    id: \"4\",\n    thresholds: {\n      0: 1,\n      1: null,\n      2: 2,\n    },\n  },\n  {\n    id: \"5\",\n    thresholds: {\n      0: 3,\n      1: 10,\n      2: 20,\n    },\n  },\n  {\n    id: \"12\",\n    thresholds: {\n      0: null,\n      1: null,\n      2: null,\n    },\n  },\n  {\n    id: \"10\",\n    thresholds: {\n      0: null,\n      1: null,\n      2: null,\n    },\n  },\n  {\n    id: \"6\",\n    thresholds: {\n      0: 3,\n      1: 10,\n      2: 20,\n    },\n  },\n];\n","import logger from '../../logger.js';\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport CompendiumHelper from \"../../lib/CompendiumHelper.js\";\n\nimport { newVehicle } from './templates/vehicle.js';\nimport { getDamageImmunities, getConditionImmunities } from \"./conditions.js\";\nimport { getAbilities, getAbilityMods } from \"./abilities.js\";\nimport { getSize } from \"./size.js\";\nimport { getCapacity } from './capacity.js';\nimport { FLIGHT_IDS, getMovement } from './movement.js';\nimport { processComponents } from './components.js';\nimport { ACTION_THRESHOLDS } from './threshold.js';\nimport { parseTags } from '../../lib/DDBReferenceLinker.js';\n\n// eslint-disable-next-line complexity\nasync function parseVehicle(ddb, extra = {}) {\n\n  logger.debug(\"Parsing vehicle\", { extra });\n  let vehicle = foundry.utils.duplicate(await newVehicle(ddb.name));\n  const configurations = {};\n  ddb.configurations.forEach((c) => {\n    configurations[c.key] = c.value;\n  });\n\n  let img = ddb.largeAvatarUrl;\n  // foundry doesn't support gifs\n  if (img && img.match(/.gif$/)) {\n    img = null;\n  }\n  vehicle.prototypeToken.name = ddb.name;\n  vehicle.flags.monsterMunch = {\n    url: ddb.url,\n    img: (img) ? img : ddb.avatarUrl,\n    tokenImg: ddb.avatarUrl,\n  };\n  vehicle.flags.ddbimporter = {\n    id: ddb.id,\n    version: CONFIG.DDBI.version,\n    configurations,\n  };\n\n  // const removedHitPoints = ddb.removedHitPoints ? ddb.removedHitPoints : 0;\n  // const temporaryHitPoints = ddb.temporaryHitPoints ? ddb.removedHitPoints : 0;\n\n  // abilities\n  vehicle.system.abilities = getAbilities(vehicle.system.abilities, ddb);\n\n  // Conditions\n  vehicle.system.traits.di = getDamageImmunities(ddb);\n  vehicle.system.traits.ci = getConditionImmunities(ddb);\n\n  // size\n  const size = getSize(ddb);\n  vehicle.system.traits.size = size.value;\n  vehicle.prototypeToken.width = size.token.value;\n  vehicle.prototypeToken.height = size.token.value;\n  vehicle.prototypeToken.scale = size.token.scale;\n\n  vehicle.system.attributes.capacity = getCapacity(ddb);\n\n  if (configurations.ST === \"dimension\") {\n    vehicle.system.traits.dimensions = `(${ddb.length} ft. by ${ddb.width} ft.)`;\n  }\n  if (configurations.ST === \"weight\") {\n    vehicle.system.traits.dimensions = `(${ddb.weight} lb.)`;\n  }\n\n  const movement = foundry.utils.duplicate(vehicle.system.attributes.movement);\n  vehicle.system.attributes.movement = getMovement(ddb, configurations, movement);\n\n  const primaryComponent = ddb.components.find((c) => c.isPrimaryComponent);\n  // // ac\n  // if we are using actor level HP apply\n  if (!configurations.ECCR && primaryComponent) {\n    vehicle.system.attributes.hp.value = primaryComponent.definition.hitPoints;\n    vehicle.system.attributes.hp.max = primaryComponent.definition.hitPoints;\n    if (!configurations.ECMT && Number.isInteger(primaryComponent.definition.mishapThreshold)) {\n      vehicle.system.attributes.hp.mt = primaryComponent.definition.mishapThreshold;\n    }\n    if (!configurations.ECDT && Number.isInteger(primaryComponent.definition.damageThreshold)) {\n      vehicle.system.attributes.hp.dt = primaryComponent.definition.damageThreshold;\n    }\n  }\n\n  // if we are using actor level AC apply\n  if (configurations.PCMT === \"vehicle\" && primaryComponent) {\n    const mods = getAbilityMods(ddb);\n    if (configurations.DT === \"spelljammer\") {\n      vehicle.system.attributes.ac.motionless = primaryComponent.definition.armorClassDescription;\n      vehicle.system.attributes.ac.flat = primaryComponent.definition.armorClass;\n    } else {\n      vehicle.system.attributes.ac.motionless = primaryComponent.definition.armorClass;\n      vehicle.system.attributes.ac.flat = primaryComponent.definition.armorClass + mods[\"dex\"];\n    }\n  }\n\n  vehicle.system.vehicleType = FLIGHT_IDS.includes(ddb.id) || configurations.DT === \"spelljammer\"\n    ? \"air\"\n    : configurations.DT === \"ship\"\n      ? \"water\"\n      : \"land\";\n\n  vehicle.items = processComponents(ddb, configurations);\n\n  // No 5e support for vehicles yet:\n  // fuel data\n\n  // details\n  vehicle.system.details.source = DDBHelper.parseSource(ddb);\n  vehicle.system.details.biography.value = parseTags(ddb.description);\n\n  if (configurations.EAS) {\n    vehicle.system.attributes.actions.stations = true;\n  }\n\n  if (ddb.actionsText) {\n    vehicle.system.details.biography.value += `<h2>Actions</h2>\\n<p>${ddb.actionsText}</p>`;\n    const componentActionSummaries = ddb.componentActionSummaries.map((feature) => {\n      return `<h3>${feature.name}</h3>\\n<p>${feature.description}</p>`;\n    }).join('\\n');\n    vehicle.system.details.biography.value += `\\n<p>${componentActionSummaries}</p>`;\n\n    const actionsRegex = /On its turn(?:,*) the (?:.*?) can take (\\d+) action/g;\n    const actionsMatch = ddb.actionsText.match(actionsRegex);\n    const numberOfActions = actionsMatch ? parseInt(actionsMatch[1]) : 1;\n\n    vehicle.system.attributes.actions.value = numberOfActions;\n    const actionThreshold = ACTION_THRESHOLDS.find((t) => t.id === ddb.id);\n    vehicle.system.attributes.actions.thresholds = actionThreshold ? actionThreshold.thresholds : [];\n\n  } else if (ddb.features.length > 0) {\n    const featuresText = ddb.features.map((feature) => {\n      return `<h3>${feature.name}</h3>\\n<p>${feature.description}</p>`;\n    }).join('\\n');\n    vehicle.system.details.biography.value += `<h2>Features</h2>\\n<p>${featuresText}</p>`;\n  }\n\n  vehicle = await CompendiumHelper.existingActorCheck(\"vehicle\", vehicle);\n\n  return vehicle;\n}\n\n\nexport async function parseVehicles(ddbData, extra = false) {\n\n  let foundryActors = [];\n  let failedVehicleNames = [];\n\n  ddbData.forEach((vehicle) => {\n    try {\n      logger.debug(`Attempting to parse ${vehicle.name}`);\n      const foundryActor = parseVehicle(vehicle, extra);\n      foundryActors.push(foundryActor);\n    } catch (err) {\n      logger.error(`Failed parsing ${vehicle.name}`);\n      logger.error(err);\n      logger.error(err.stack);\n      failedVehicleNames.push(vehicle.name);\n    }\n  });\n\n  const result = {\n    actors: await Promise.all(foundryActors),\n    failedVehicleNames,\n  };\n\n  return result;\n}\n","import logger from \"../logger.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport DDBMuncher from \"../apps/DDBMuncher.js\";\nimport {\n  addNPC,\n  generateIconMap,\n  copyExistingMonsterImages,\n} from \"./importMonster.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport DDBCampaigns from \"../lib/DDBCampaigns.js\";\nimport { parseVehicles } from \"../parser/vehicle/vehicle.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\nimport PatreonHelper from \"../lib/PatreonHelper.js\";\nimport { DDBCompendiumFolders } from \"../lib/DDBCompendiumFolders.js\";\nimport DDBItemImporter from \"../lib/DDBItemImporter.js\";\nimport { createDDBCompendium } from \"../hooks/ready/checkCompendiums.js\";\n\n/**\n *\n * @returns {Promise<Array<JSON>>} A promise that resolves to an array of JSON vehicles from DDB\n */\nexport function getVehicleData(ids) {\n  const cobaltCookie = getCobalt();\n  const betaKey = PatreonHelper.getPatreonKey();\n  const parsingApi = DDBProxy.getProxy();\n\n  const campaignId = DDBCampaigns.getCampaignId();\n  const body = { cobalt: cobaltCookie, campaignId: campaignId, betaKey: betaKey };\n\n  if (ids && ids.length > 0) {\n    body.ids = [...new Set(ids)];\n  } else {\n    const searchFilter = $(\"#monster-munch-filter\")[0];\n    const searchTerm = searchFilter?.value || \"\";\n    const enableSources = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-source-filter\");\n    const sources = enableSources\n      ? game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-muncher-sources\").flat()\n      : [];\n    body.sources = sources;\n    body.search = searchTerm;\n    body.homebrew = body.sources.length > 0 ? false : game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-homebrew\");\n    body.homebrewOnly = body.sources.length > 0 ? false : game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-homebrew-only\");\n    body.searchTerm = encodeURIComponent(searchTerm);\n    body.exactMatch = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-exact-match\");\n    body.excludeLegacy = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-exclude-legacy\");\n  }\n\n  const url = ids && ids.length > 0\n    ? `${parsingApi}/proxy/vehicles/ids`\n    : `${parsingApi}/proxy/vehicles`;\n\n  const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n  return new Promise((resolve, reject) => {\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (debugJson) {\n          FileHelper.download(JSON.stringify(data), `vehicles-raw.json`, \"application/json\");\n        }\n        if (!data.success) {\n          DDBMuncher.munchNote(`Failure: ${data.message}`);\n          reject(data.message);\n        }\n        return data;\n      })\n      .then((data) => resolve(data.data))\n      .catch((error) => reject(error));\n  });\n}\n\n/**\n *\n * @param {*} ddbData json data from DDB\n * @returns array of vehicles processed to Foundry\n */\nasync function processVehicleData(ddbData) {\n  DDBMuncher.munchNote(`Retrieved ${ddbData.length} vehicles, starting parse...`, true, false);\n  logger.info(`Retrieved ${ddbData.length} vehicles`);\n  const parsedVehicles = await parseVehicles(ddbData);\n\n  DDBMuncher.munchNote(\n    `Parsed ${parsedVehicles.actors.length} vehicles, failed ${parsedVehicles.failedVehicleNames.length} vehicles`,\n    false,\n    true\n  );\n  logger.info(`Parsed ${parsedVehicles.actors.length} vehicles, failed ${parsedVehicles.failedVehicleNames.length} vehicles`);\n  if (parsedVehicles.failedVehicleNames && parsedVehicles.failedVehicleNames.length !== 0) {\n    logger.error(`Failed to parse`, parsedVehicles.failedVehicleNames);\n  }\n  return parsedVehicles.actors;\n}\n\n\nexport async function parseTransports(ids = null) {\n  const compData = SETTINGS.COMPENDIUMS.find((c) => c.title === \"Vehicles\");\n  await createDDBCompendium(compData);\n\n  foundry.utils.setProperty(CONFIG.DDBI, \"MUNCHER.TEMPORARY\", {});\n  const updateBool = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-existing\");\n  const updateImages = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-images\");\n  const uploadDirectory = game.settings.get(SETTINGS.MODULE_ID, \"other-image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n\n  // to speed up file checking we pregenerate existing files now.\n  logger.info(\"Checking for existing files...\");\n  DDBMuncher.munchNote(`Checking existing image files...`);\n  await FileHelper.generateCurrentFiles(uploadDirectory);\n  logger.info(\"Check complete getting vehicle data...\");\n  DDBMuncher.munchNote(`Getting vehicle data from DDB...`);\n  let vehicleJSON = await getVehicleData(ids);\n  let vehicles = await processVehicleData(vehicleJSON);\n\n  const vehicleHandler = new DDBItemImporter(\"vehicles\", vehicles);\n  await vehicleHandler.init();\n\n  if (!updateBool || !updateImages) {\n    DDBMuncher.munchNote(`Calculating which vehicles to update...`, true);\n    const existingVehicles = await DDBItemImporter.getCompendiumItems(vehicles, \"vehicles\", { keepDDBId: true });\n    const existingVehiclesTotal = existingVehicles.length + 1;\n    if (!updateBool) {\n      logger.debug(\"Removing existing vehicles from import list\");\n      logger.debug(`Matched ${existingVehiclesTotal}`);\n      DDBMuncher.munchNote(`Removing ${existingVehiclesTotal} from update...`);\n      vehicleHandler.removeItems(existingVehicles);\n    }\n    if (!updateImages) {\n      logger.debug(\"Copying vehicle images across...\");\n      DDBMuncher.munchNote(`Copying images for ${existingVehiclesTotal} vehicles...`);\n      vehicles = copyExistingMonsterImages(vehicles, existingVehicles);\n    }\n  }\n  DDBMuncher.munchNote(\"\");\n  DDBMuncher.munchNote(`Fiddling with the SRD data...`, true);\n  await vehicleHandler.srdFiddling();\n  await vehicleHandler.iconAdditions();\n\n  DDBMuncher.munchNote(`Generating Icon Map..`, true);\n  await generateIconMap(vehicleHandler.documents);\n\n  // Compendium folders not yet in use for Vehicles\n  const compendiumFolders = new DDBCompendiumFolders(\"vehicles\");\n  DDBMuncher.munchNote(`Checking compendium folders..`, true);\n  await compendiumFolders.loadCompendium(\"vehicles\");\n  DDBMuncher.munchNote(\"\", true);\n\n  let vehiclesParsed = [];\n  let currentVehicle = 1;\n  const vehicleCount = vehicleHandler.documents.length;\n  DDBMuncher.munchNote(`Preparing to wax ${vehicleCount} vehicles!`, true);\n  for (const vehicle of vehicleHandler.documents) {\n    DDBMuncher.munchNote(`[${currentVehicle}/${vehicleCount}] Importing ${vehicle.name}`, false, true);\n    logger.debug(`Importing/second parse of ${vehicle.name} data`);\n    const munched = await addNPC(vehicle, \"vehicle\");\n    vehiclesParsed.push(munched);\n    currentVehicle += 1;\n  }\n  logger.debug(\"Vehicles Parsed\", vehiclesParsed);\n  DDBMuncher.munchNote(\"\", false, true);\n  foundry.utils.setProperty(CONFIG.DDBI, \"MUNCHER.TEMPORARY\", {});\n\n  if (ids !== null) {\n    return Promise.all(vehiclesParsed);\n  }\n  return vehicleCount;\n}\n","/* eslint-disable no-continue */\nimport utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\n\n// Import parsing functions\nimport { getLookups } from \"./metadata.js\";\nimport { parseSpell } from \"./parseSpell.js\";\nimport { getSpellCastingAbility, hasSpellCastingAbility, convertSpellCastingAbilityId } from \"./ability.js\";\nimport logger from \"../../logger.js\";\nimport { fixSpells } from \"./special.js\";\n\nexport default class CharacterSpellFactory {\n\n  constructor(ddbCharacter) {\n    this.ddbCharacter = ddbCharacter;\n    this.ddb = ddbCharacter.source.ddb;\n    this.character = ddbCharacter.raw.character;\n\n    this.items = [];\n\n    this.proficiencyModifier = this.character.system.attributes.prof;\n    this.lookups = getLookups(this.ddb.character);\n\n    logger.debug(\"Character spell lookups\", this.lookups);\n    this.characterAbilities = this.character.flags.ddbimporter.dndbeyond.effectAbilities;\n\n    this.healingBoost = DDBHelper.filterBaseModifiers(this.ddb, \"bonus\", { subType: \"spell-group-healing\" }).reduce((a, b) => a + b.value, 0);\n\n    this.spellCounts = {\n\n    };\n  }\n\n  _getSpellCount(name) {\n    if (!this.spellCounts[name]) {\n      this.spellCounts[name] = 0;\n    }\n    return ++this.spellCounts[name];\n  }\n\n  async getClassSpells() {\n    for (const playerClass of this.ddb.character.classSpells) {\n      const classInfo = this.ddb.character.classes.find((cls) => cls.id === playerClass.characterClassId);\n      const spellCastingAbility = getSpellCastingAbility(classInfo);\n      const abilityModifier = utils.calculateModifier(this.characterAbilities[spellCastingAbility].value);\n\n      logger.debug(\"Spell parsing, class info\", classInfo);\n\n      const cantripBoost\n        = DDBHelper.getChosenClassModifiers(this.ddb).filter(\n          (mod) =>\n            mod.type === \"bonus\"\n            && mod.subType === `${classInfo.definition.name.toLowerCase()}-cantrip-damage`\n            && (mod.restriction === null || mod.restriction === \"\")\n        ).length > 0;\n\n      // parse spells chosen as spellcasting (playerClass.spells)\n      for (const spell of playerClass.spells) {\n        if (!spell.definition) continue;\n        // add some data for the parsing of the spells into the data structure\n        spell.flags = {\n          ddbimporter: {\n            dndbeyond: {\n              lookup: \"classSpell\",\n              class: classInfo.definition.name,\n              level: classInfo.level,\n              characterClassId: playerClass.characterClassId,\n              spellLevel: spell.definition.level,\n              // spellSlots: character.system.spells,\n              ability: spellCastingAbility,\n              mod: abilityModifier,\n              dc: 8 + this.proficiencyModifier + abilityModifier,\n              cantripBoost: cantripBoost,\n              overrideDC: false,\n              id: spell.id,\n              entityTypeId: spell.entityTypeId,\n              healingBoost: this.healingBoost,\n              usesSpellSlot: spell.usesSpellSlot,\n              forceMaterial: classInfo.definition.name === \"Artificer\",\n            },\n          },\n          \"spell-class-filter-for-5e\": {\n            parentClass: classInfo.definition.name.toLowerCase(),\n          },\n          \"tidy5e-sheet-kgar\": {\n            parentClass: classInfo.definition.name.toLowerCase(),\n          },\n          // \"spellbook-assistant-manager\": {\n          //   class: classInfo.definition.name.toLowerCase(),\n          // }\n        };\n\n        // Check for duplicate spells, normally domain ones\n        // We will import spells from a different class that are the same though\n        // as they may come from with different spell casting mods\n        const parsedSpell = await parseSpell(spell, this.character, { namePostfix: `${this._getSpellCount(spell.definition.name)}` });\n        foundry.utils.setProperty(parsedSpell, \"system.sourceClass\", classInfo.definition.name.toLowerCase());\n        const duplicateSpell = this.items.findIndex(\n          (existingSpell) => {\n            const existingName = (existingSpell.flags.ddbimporter.originalName ? existingSpell.flags.ddbimporter.originalName : existingSpell.name);\n            const parsedName = (parsedSpell.flags.ddbimporter.originalName ? parsedSpell.flags.ddbimporter.originalName : parsedSpell.name);\n            // some spells come from different classes but end up having the same ddb id\n            const classIdMatch = (classInfo.definition.name === existingSpell.flags.ddbimporter.dndbeyond.class || spell.id === existingSpell.flags.ddbimporter.dndbeyond.id);\n            return existingName === parsedName && classIdMatch;\n          });\n        const duplicateItem = this.items[duplicateSpell];\n        if (!duplicateItem) {\n          this.items.push(parsedSpell);\n        } else if (spell.alwaysPrepared || parsedSpell.system.preparation.mode === \"always\"\n          || (spell.alwaysPrepared === duplicateItem.alwaysPrepared && parsedSpell.system.preparation.mode === duplicateItem.system.preparation.mode && parsedSpell.prepared && !duplicateItem.prepared)) {\n          // if our new spell is always known we overwrite!\n          // it's probably domain\n          this.items[duplicateSpell] = parsedSpell;\n        } else {\n          // we'll emit a console message if it doesn't match this case for future debugging\n          logger.info(`Duplicate Spell ${spell.definition.name} detected in class ${classInfo.definition.name}.`);\n        }\n      }\n    }\n\n  }\n\n  async getSpecialClassSpells() {\n    for (const spell of this.ddb.character.spells.class) {\n      if (!spell.definition) continue;\n      // If the spell has an ability attached, use that\n      let spellCastingAbility = undefined;\n      const featureId = DDBHelper.determineActualFeatureId(this.ddb, spell.componentId);\n      const classInfo = this.lookups.classFeature.find((clsFeature) => clsFeature.id == featureId);\n\n      logger.debug(\"Class spell parsing, class info\", classInfo);\n      // Sometimes there are spells here which don't have an class Info\n      // this seems to be part of the optional tasha's rules, lets not parse for now\n      // as ddb implementation is not yet finished\n      // / options.class.[].definition.id\n      if (!classInfo) {\n        logger.warn(`Unable to add ${spell.definition.name}`);\n      }\n      if (!classInfo) continue;\n      let klass = DDBHelper.getClassFromOptionID(this.ddb, spell.componentId);\n\n      if (!klass) klass = DDBHelper.findClassByFeatureId(this.ddb, spell.componentId);\n\n      logger.debug(\"Class spell, class found?\", klass);\n\n      if (hasSpellCastingAbility(spell.spellCastingAbilityId)) {\n        spellCastingAbility = convertSpellCastingAbilityId(spell.spellCastingAbilityId);\n      } else if (klass) {\n        spellCastingAbility = getSpellCastingAbility(klass);\n        // force these spells to always be prepared\n        spell.alwaysPrepared = true;\n      } else {\n        // if there is no ability on spell, we default to wis\n        spellCastingAbility = \"wis\";\n      }\n\n      const abilityModifier = utils.calculateModifier(this.characterAbilities[spellCastingAbility].value);\n\n      // add some data for the parsing of the spells into the data structure\n      spell.flags = {\n        ddbimporter: {\n          dndbeyond: {\n            class: (klass) ? klass.definition.name : undefined,\n            lookup: \"classFeature\",\n            lookupName: classInfo.name,\n            lookupId: classInfo.id,\n            level: this.character.flags.ddbimporter.dndbeyond.totalLevels,\n            ability: spellCastingAbility,\n            mod: abilityModifier,\n            dc: 8 + this.proficiencyModifier + abilityModifier,\n            overrideDC: false,\n            id: spell.id,\n            entityTypeId: spell.entityTypeId,\n            healingBoost: this.healingBoost,\n            usesSpellSlot: spell.usesSpellSlot,\n            forceMaterial: klass?.definition?.name === \"Artificer\",\n          },\n        },\n        \"tidy5e-sheet-kgar\": {\n          parentClass: (klass) ? klass.definition.name : undefined,\n        },\n      };\n\n      // Check for duplicate spells, normally domain ones\n      // We will import spells from a different class that are the same though\n      // as they may come from with different spell casting mods\n      const duplicateSpell = this.items.findIndex(\n        (existingSpell) =>\n          (existingSpell.flags.ddbimporter.originalName ? existingSpell.flags.ddbimporter.originalName : existingSpell.name) === spell.definition.name\n          && klass\n          && klass.definition.name === existingSpell.flags.ddbimporter.dndbeyond.class\n          && spell.usesSpellSlot && existingSpell.flags.ddbimporter.dndbeyond.usesSpellSlot\n      );\n      if (!this.items[duplicateSpell]) {\n        const parsedSpell = await parseSpell(spell, this.character, { namePostfix: `${this._getSpellCount(spell.definition.name)}` });\n        if (spell.flags.ddbimporter.dndbeyond.class) foundry.utils.setProperty(parsedSpell, \"system.sourceClass\", spell.flags.ddbimporter.dndbeyond.class.toLowerCase());\n        this.items.push(parsedSpell);\n      } else if (spell.alwaysPrepared) {\n        // if our new spell is always known we overwrite!\n        // it's probably domain\n        const parsedSpell = await parseSpell(spell, this.character, { namePostfix: `${this._getSpellCount(spell.definition.name)}` });\n        if (spell.flags.ddbimporter.dndbeyond.class) foundry.utils.setProperty(parsedSpell, \"system.sourceClass\", spell.flags.ddbimporter.dndbeyond.class.toLowerCase());\n        this.items[duplicateSpell] = parsedSpell;\n      } else {\n        // we'll emit a console message if it doesn't match this case for future debugging\n        logger.info(`Duplicate Spell ${spell.definition.name} detected in class ${classInfo.name}.`);\n      }\n    }\n  }\n\n  async handleGrantedSpells(spell, type) {\n    if (spell.limitedUse && spell.definition.level !== 0) {\n      const dups = this.ddb.character.spells[type].filter((otherSpell) => otherSpell.definition.name === spell.definition.name).length > 1;\n      const duplicateSpell = this.items.findIndex(\n        (existingSpell) =>\n          (existingSpell.flags.ddbimporter.originalName ? existingSpell.flags.ddbimporter.originalName : existingSpell.name) === spell.definition.name\n          && existingSpell.flags.ddbimporter.dndbeyond.usesSpellSlot\n      );\n      if (!dups && !this.items[duplicateSpell]) {\n        // also parse spell as non-limited use\n        let unlimitedSpell = foundry.utils.duplicate(spell);\n        unlimitedSpell.limitedUse = null;\n        unlimitedSpell.usesSpellSlot = true;\n        unlimitedSpell.alwaysPrepared = true;\n        unlimitedSpell.flags.ddbimporter.dndbeyond.usesSpellSlot = true;\n        unlimitedSpell.flags.ddbimporter.dndbeyond.granted = true;\n        unlimitedSpell.flags.ddbimporter.dndbeyond.lookup = type;\n        delete unlimitedSpell.id;\n        delete unlimitedSpell.flags.ddbimporter.dndbeyond.id;\n        const parsedSpell = await parseSpell(unlimitedSpell, this.character, { namePostfix: `${this._getSpellCount(unlimitedSpell.definition.name)}` });\n        this.items.push(parsedSpell);\n      }\n    }\n  }\n\n  async getRaceSpells() {\n    for (const spell of this.ddb.character.spells.race) {\n      if (!spell.definition)\n        continue;\n      // for race spells the spell spellCastingAbilityId is on the spell\n      // if there is no ability on spell, we default to wis\n      let spellCastingAbility = \"wis\";\n      if (hasSpellCastingAbility(spell.spellCastingAbilityId)) {\n        spellCastingAbility = convertSpellCastingAbilityId(spell.spellCastingAbilityId);\n      }\n\n      const abilityModifier = utils.calculateModifier(this.characterAbilities[spellCastingAbility].value);\n\n      let raceInfo = this.lookups.race.find((rc) => rc.id === spell.componentId);\n\n      if (!raceInfo) {\n        // for some reason we haven't matched the race option id with the spell\n        // this happens with at least the SCAG optional spells casting half elf\n        raceInfo = {\n          name: \"Racial spell\",\n          id: spell.componentId,\n        };\n      }\n\n      // add some data for the parsing of the spells into the data structure\n      spell.flags = {\n        ddbimporter: {\n          dndbeyond: {\n            lookup: \"race\",\n            lookupName: raceInfo.name,\n            lookupId: raceInfo.id,\n            race: this.ddb.character.race.fullName,\n            level: spell.castAtLevel,\n            ability: spellCastingAbility,\n            mod: abilityModifier,\n            dc: 8 + this.proficiencyModifier + abilityModifier,\n            overrideDC: false,\n            id: spell.id,\n            entityTypeId: spell.entityTypeId,\n            healingBoost: this.healingBoost,\n            usesSpellSlot: spell.usesSpellSlot,\n          },\n        },\n      };\n\n      this.handleGrantedSpells(spell, \"race\");\n      const parsedSpell = await parseSpell(spell, this.character, { namePostfix: `${this._getSpellCount(spell.definition.name)}` });\n      this.items.push(parsedSpell);\n    }\n  }\n\n  async getFeatSpells() {\n    for (const spell of this.ddb.character.spells.feat) {\n      if (!spell.definition)\n        continue;\n      // If the spell has an ability attached, use that\n      // if there is no ability on spell, we default to wis\n      let spellCastingAbility = \"wis\";\n      if (hasSpellCastingAbility(spell.spellCastingAbilityId)) {\n        spellCastingAbility = convertSpellCastingAbilityId(spell.spellCastingAbilityId);\n      }\n\n      const abilityModifier = utils.calculateModifier(this.characterAbilities[spellCastingAbility].value);\n\n      let featInfo = this.lookups.feat.find((ft) => ft.id === spell.componentId);\n\n      if (!featInfo) {\n        // for some reason we haven't matched the feat option id with the spell\n        // we fiddle the result\n        featInfo = {\n          name: \"Feat option spell\",\n          id: spell.componentId,\n        };\n      }\n\n      // add some data for the parsing of the spells into the data structure\n      spell.flags = {\n        ddbimporter: {\n          dndbeyond: {\n            lookup: \"feat\",\n            lookupName: featInfo.name,\n            lookupId: featInfo.id,\n            level: spell.castAtLevel,\n            ability: spellCastingAbility,\n            mod: abilityModifier,\n            dc: 8 + this.proficiencyModifier + abilityModifier,\n            overrideDC: false,\n            id: spell.id,\n            entityTypeId: spell.entityTypeId,\n            healingBoost: this.healingBoost,\n            usesSpellSlot: spell.usesSpellSlot,\n          },\n        },\n      };\n\n      this.handleGrantedSpells(spell, \"feat\");\n      const parsedSpell = await parseSpell(spell, this.character, { namePostfix: `${this._getSpellCount(spell.definition.name)}` });\n      this.items.push(parsedSpell);\n    }\n  }\n\n  async getBackgroundSpells() {\n    if (!this.ddb.character.spells.background) this.ddb.character.spells.background = [];\n    for (const spell of this.ddb.character.spells.background) {\n      if (!spell.definition)\n        continue;\n      // If the spell has an ability attached, use that\n      // if there is no ability on spell, we default to wis\n      let spellCastingAbility = \"wis\";\n      if (hasSpellCastingAbility(spell.spellCastingAbilityId)) {\n        spellCastingAbility = convertSpellCastingAbilityId(spell.spellCastingAbilityId);\n      }\n\n      const abilityModifier = utils.calculateModifier(this.characterAbilities[spellCastingAbility].value);\n\n      // add some data for the parsing of the spells into the data structure\n      spell.flags = {\n        ddbimporter: {\n          dndbeyond: {\n            lookup: \"background\",\n            lookupName: \"Background\",\n            level: spell.castAtLevel,\n            ability: spellCastingAbility,\n            mod: abilityModifier,\n            dc: 8 + this.proficiencyModifier + abilityModifier,\n            overrideDC: false,\n            id: spell.id,\n            entityTypeId: spell.entityTypeId,\n            healingBoost: this.healingBoost,\n            usesSpellSlot: spell.usesSpellSlot,\n          },\n        },\n      };\n\n      this.handleGrantedSpells(spell, \"background\");\n      const parsedSpell = await parseSpell(spell, this.character, { namePostfix: `${this._getSpellCount(spell.definition.name)}` });\n      this.items.push(parsedSpell);\n    }\n  }\n\n  async getCharacterSpells() {\n    // each class has an entry here, each entry has spells\n    // we loop through each class and process\n    await this.getClassSpells();\n\n    // Parse any spells granted by class features, such as Barbarian Totem\n    await this.getSpecialClassSpells();\n\n    // Race spells are handled slightly differently\n    await this.getRaceSpells();\n\n    // feat spells are handled slightly differently\n    await this.getFeatSpells();\n\n    // background spells are handled slightly differently\n    await this.getBackgroundSpells();\n\n    await fixSpells(this.ddb, this.items);\n\n    return this.items.sort((a, b) => a.name.localeCompare(b.name));\n  }\n}\n","import logger from '../../logger.js';\nimport DICTIONARY from '../../dictionary.js';\nimport utils from '../../lib/utils.js';\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport CompendiumHelper from '../../lib/CompendiumHelper.js';\nimport { getSpellCastingAbility } from \"../spells/ability.js\";\nimport parseTemplateString from \"../../lib/DDBTemplateStrings.js\";\nimport AdvancementHelper from '../advancements/AdvancementHelper.js';\nimport SETTINGS from '../../settings.js';\n\n\nexport default class DDBClass {\n\n  static SPECIAL_ADVANCEMENTS = {};\n\n  static PROFICIENCY_FEATURES = [\n    \"Proficiencies\",\n    \"Primal Knowledge\",\n    \"Master of Intrigue\",\n    \"Implements of Mercy\",\n    \"Bonus Proficiencies\",\n    \"Otherworldly Glamour\",\n    \"Survivalist\",\n    \"Training in War and Song\",\n    \"Blessings of Knowledge\",\n    \"Elegant Courtier\", // this is a you get a thing or otherwise choose from two others\n  ];\n\n  static EXPERTISE_FEATURES = [\n    \"Expertise\",\n    \"Canny\",\n    \"Deft Explorer\",\n    \"Survivalist\",\n    \"Blessings of Knowledge\",\n    // \"Tool Expertise\", // revisit,this doesn't work the same way\n  ];\n\n  static PROFICIENCY_OR_EXPERTISE_FEATURES = [\n    \"Mystical Erudition\",\n    \"Mystical Erudition (Additional)\",\n  ];\n\n  static LANGUAGE_FEATURES = [\n    \"Proficiencies\",\n    \"Primal Knowledge\",\n    \"Master of Intrigue\",\n    \"Thieves' Cant\",\n    \"Druidic\",\n    \"Giant's Power\",\n    \"Blessings of Knowledge\",\n    \"Mystical Erudition\",\n    \"Draconic Disciple\",\n    \"Tongue of Dragons\",\n    \"Wind Speaker\",\n    \"Master of Intrigue\",\n    \"Favored Enemy\",\n    \"Deft Explorer\",\n    \"Canny\",\n    \"Draconic Gift\",\n    \"Speech of the Woods\",\n  ];\n\n  // you gain proficiency in one of the following skills of your choice: Animal Handling, History, Insight, Performance, or Persuasion. Alternatively, you learn one language of your choice.\n  static LANGUAGE_OR_SKILL_FEATURE = [\n    \"Bonus Proficiency\",\n  ];\n\n  static TOOL_FEATURES = [\n    \"Proficiencies\",\n    \"Tool Proficiency\",\n    \"Tools of the Trade\",\n    \"Student of War\",\n    \"Gunsmith\",\n    \"Implements of Mercy\",\n    \"Master of Intrigue\",\n  ];\n\n  static ARMOR_FEATURES = [\n    \"Proficiencies\",\n    \"Tools of the Trade\",\n    \"Training in War and Song\",\n  ];\n\n  static WEAPON_FEATURES = [\n    \"Proficiencies\",\n    \"Firearm Proficiency\",\n    \"Training in War and Song\",\n  ];\n\n  static CONDITION_FEATURES = [\n    \"Inured to Undeath\",\n    \"Elemental Gift\",\n    \"Thought Shield\",\n    \"Necrotic Husk\",\n    \"Radiant Soul\",\n    \"Oceanic Soul\",\n    \"Fathomless Soul\",\n    \"Psychic Defenses\",\n    \"Heart of the Storm\",\n    \"Wind Soul\",\n    \"Beguiling Defenses\",\n    \"Emissary of Redemption\",\n    \"Aura of Warding\",\n    \"Supernatural Resistance\",\n    \"Guarded Mind\",\n    \"Soul of the Forge\",\n    \"Avatar of Battle\",\n    \"Saint of Forge and Fire\",\n    \"Divine Health\",\n    \"Purity of Body\",\n    \"Storm Soul\",\n    // \"Desert\",\n    // \"Sea\",\n    // \"Tundra\"\n    \"Chemical Mastery\",\n    \"Poison Resilience\",\n    \"Poison Immunity\",\n    \"Constructed Resilience\",\n    \"Natural Resilience\",\n    \"Mechanical Nature\",\n    \"Acid Resistance\",\n    \"Necrotic Resistance\",\n    \"Mountain Born\",\n    \"Fire Resistance\",\n    \"Psychic Resilience\",\n    \"Gnomish Magic Resistance\",\n    \"Dwarven Resilience\",\n    \"Lightning Resistance\",\n    \"Celestial Resistance\",\n    \"Draconic Resistance\",\n    \"Hellish Resistance\",\n    \"Magic Resistance\",\n  ];\n\n  _generateSource() {\n    const classSource = DDBHelper.parseSource(this.ddbClassDefinition);\n    this.data.system.source = classSource;\n  }\n\n  _fleshOutCommonDataStub() {\n    this.data.system.identifier = utils.referenceNameString(this.ddbClassDefinition.name.toLowerCase());\n    this._determineClassFeatures();\n\n    this._proficiencyFeatureIds = this.classFeatures\n      .filter((feature) => DDBClass.PROFICIENCY_FEATURES.includes(utils.nameString(feature.name)))\n      .map((feature) => feature.id);\n    this._proficiencyFeatures = this.classFeatures\n      .filter((feature) => this._proficiencyFeatureIds.includes(feature.id));\n\n    this._expertiseFeatureIds = this.classFeatures\n      .filter((feature) => DDBClass.EXPERTISE_FEATURES.includes(utils.nameString(feature.name)))\n      .map((feature) => feature.id);\n    this._expertiseFeatures = this.classFeatures\n      .filter((feature) => this._expertiseFeatureIds.includes(feature.id));\n\n    this._languageFeatureIds = this.classFeatures\n      .filter((feature) => DDBClass.LANGUAGE_FEATURES.includes(utils.nameString(feature.name)))\n      .map((feature) => feature.id);\n    this._languageFeatures = this.classFeatures\n      .filter((feature) => this._languageFeatureIds.includes(feature.id));\n\n    this._toolFeatureIds = this.classFeatures\n      .filter((feature) => DDBClass.TOOL_FEATURES.includes(utils.nameString(feature.name)))\n      .map((feature) => feature.id);\n    this._toolFeatures = this.classFeatures\n      .filter((feature) => this._toolFeatureIds.includes(feature.id));\n\n    this._armorFeatureIds = this.classFeatures\n      .filter((feature) => DDBClass.ARMOR_FEATURES.includes(utils.nameString(feature.name)))\n      .map((feature) => feature.id);\n    this._armorFeatures = this.classFeatures\n      .filter((feature) => DDBClass.ARMOR_FEATURES.includes(utils.nameString(feature.name)));\n\n    this._weaponFeatureIds = this.classFeatures\n      .filter((feature) => DDBClass.WEAPON_FEATURES.includes(utils.nameString(feature.name)))\n      .map((feature) => feature.id);\n    this._weaponFeatures = this.classFeatures\n      .filter((feature) => DDBClass.WEAPON_FEATURES.includes(utils.nameString(feature.name)));\n\n    this._languageOrSkillFeatureIds = this.classFeatures.concat(this._languageFeatures)\n      .filter((feature) => DDBClass.LANGUAGE_OR_SKILL_FEATURE.includes(utils.nameString(feature.name)))\n      .map((feature) => feature.id);\n    this._languageOrSkillFeatures = this.classFeatures\n      .filter((feature) => DDBClass.LANGUAGE_OR_SKILL_FEATURE.includes(utils.nameString(feature.name)));\n\n    this._conditionFeatureIds = this.classFeatures\n      .filter((feature) => DDBClass.CONDITION_FEATURES.includes(utils.nameString(feature.name)))\n      .map((feature) => feature.id);\n    this._conditionFeatures = this.classFeatures\n      .filter((feature) => DDBClass.CONDITION_FEATURES.includes(utils.nameString(feature.name)));\n\n    this._generateSource();\n  }\n\n  _generateDataStub() {\n    this.data = {\n      _id: foundry.utils.randomID(),\n      name: this.ddbClass.definition.name,\n      type: \"class\",\n      system: utils.getTemplate(\"class\"),\n      flags: {\n        ddbimporter: {\n          id: this.ddbClass.id,\n          definitionId: this.ddbClass.definition.id,\n          entityTypeId: this.ddbClass.entityTypeId,\n          type: \"class\",\n          isStartingClass: this.ddbClass.isStartingClass,\n          ddbImg: this.ddbClass.definition.portraitAvatarUrl,\n        },\n        obsidian: {\n          source: {\n            type: \"class\",\n            text: this.ddbClass.definition.name,\n          }\n        },\n      },\n      img: null,\n    };\n  }\n\n  _generateSpellCastingProgression() {\n    if (this.ddbClassDefinition.canCastSpells) {\n      const spellProgression = DICTIONARY.spell.progression.find((cls) => cls.name === this.ddbClass.definition.name);\n      const spellCastingAbility = getSpellCastingAbility(this.ddbClass, this._isSubClass, this._isSubClass);\n      if (spellProgression) {\n        this.data.system.spellcasting = {\n          progression: spellProgression.value,\n          ability: spellCastingAbility,\n        };\n      }\n      const spellSlotDivisor = this.ddbClassDefinition.spellRules?.multiClassSpellSlotDivisor\n        ? this.ddbClassDefinition.spellRules.multiClassSpellSlotDivisor\n        : undefined;\n      this.data.flags.ddbimporter.spellSlotDivisor = spellSlotDivisor;\n      this.data.flags.ddbimporter.spellCastingAbility = spellCastingAbility;\n    }\n  }\n\n  async _buildCompendiumIndex(type, indexFilter = {}) {\n    if (Object.keys(indexFilter).length > 0) this._indexFilter[type] = indexFilter;\n    await this._compendiums[type].getIndex(this._indexFilter[type]);\n  }\n\n  // async init() {\n  //   await this._buildCompendiumIndex(\"features\");\n  //   // await this._buildCompendiumIndex(\"class\");\n  //   // await this._buildCompendiumIndex(\"subclasses\");\n  // }\n\n  async _generateDescriptionStub(character) {\n    this.data.system.description.value = \"<h1>Description</h1>\";\n    this.data.system.description.value += this.ddbClass.definition.description;\n    // this excludes the subclass features\n    this.data.system.description.value += await this._buildClassFeaturesDescription();\n    // not all classes have equipment descriptions\n    if (this.ddbClass.definition.equipmentDescription && !this._isSubClass) {\n      // eslint-disable-next-line require-atomic-updates\n      this.data.system.description.value += `<h1>Starting Equipment</h1>\\n${this.ddbClass.definition.equipmentDescription}\\n\\n`;\n    }\n\n    if (character) {\n      this.data.system.description.value = parseTemplateString(\n        this.ddbData,\n        character,\n        this.data.system.description.value,\n        this.data\n      ).text;\n    }\n  }\n\n  constructor(ddbData, classId, { noMods = false } = {}) {\n    this._indexFilter = {\n      features: {\n        fields: [\n          \"name\",\n          \"flags.ddbimporter.classId\",\n          \"flags.ddbimporter.class\",\n          \"flags.ddbimporter.subClass\",\n          \"flags.ddbimporter.parentClassId\",\n          \"flags.ddbimporter.featureName\",\n        ]\n      },\n      feats: {\n        fields: [\n          \"name\",\n          \"flags.ddbimporter\",\n        ]\n      },\n      class: {},\n      subclasses: {},\n    };\n\n    // setup ddb source\n    this.ddbData = ddbData;\n    this.ddbClass = ddbData.character.classes.find((c) => c.definition.id === classId);\n    this.ddbClassDefinition = this.ddbClass.definition;\n\n    // quick helpers\n    this.classFeatureIds = this.ddbClass.definition.classFeatures.map((f) => f.id);\n    this.subClassFeatureIds = this.ddbClass.subclassDefinition && this.ddbClass.subclassDefinition.name\n      ? this.ddbClass.classFeatures\n        .filter((f) => f.definition.classId === this.ddbClass.subclassDefinition.id)\n        .map((f) => f.definition.id)\n      : [];\n\n    // compendium\n    this._compendiums = {\n      features: CompendiumHelper.getCompendiumType(\"classfeatures\"),\n      feats: CompendiumHelper.getCompendiumType(\"feats\"),\n      // class: CompendiumHelper.getCompendiumType(\"class\"),\n      // subclasses: CompendiumHelper.getCompendiumType(\"subclasses\"),\n    };\n    // this._compendiumFeaturesLabel = CompendiumHelper.getCompendiumLabel(\"features\");\n\n    this._advancementMatches = {\n      features: {},\n    };\n\n    this._isSubClass = false;\n    this._generateDataStub();\n\n    this.options = {\n      noMods,\n    };\n\n    this.dictionary = DICTIONARY.character.class.find((c) => c.name === this.ddbClassDefinition.name);\n\n    this.advancementHelper = new AdvancementHelper({\n      ddbData,\n      type: \"class\",\n      noMods: this.options.noMods,\n    });\n\n    this.SPECIAL_ADVANCEMENTS = DDBClass.SPECIAL_ADVANCEMENTS;\n\n  }\n\n  // this excludes any class/sub class features\n  _determineClassFeatures() {\n    this._excludedFeatureIds = this._isSubClass\n      ? this.classFeatureIds\n      : this.subClassFeatureIds;\n\n    this.classFeatures = this.getClassFeatures(this._excludedFeatureIds);\n  }\n\n  isMartialArtist() {\n    return this.classFeatures.some((feature) => feature.name === \"Martial Arts\");\n  }\n\n  /**\n   * Retrieves the class features, excluding the ones specified by their IDs.\n   *\n   * @param {Array} excludedIds - An array of IDs of class features to exclude (default: [])\n   * @return {Array} An array of class features\n   */\n  getClassFeatures(excludedIds = []) {\n    const excludedFeatures = this.ddbData.character.optionalClassFeatures\n      .filter((f) => f.affectedClassFeatureId)\n      .map((f) => f.affectedClassFeatureId);\n\n    const optionFeatures = this.ddbData.classOptions\n      ? this.ddbData.classOptions\n        .filter((feature) => feature.classId === this.ddbClassDefinition.id && !excludedIds.includes(feature.id))\n      : [];\n\n    const classFeatures = this.ddbClass.classFeatures\n      .filter((feature) =>\n        !excludedFeatures.includes(feature.definition.id)\n        && !excludedIds.includes(feature.definition.id)\n        && feature.definition.classId === this.ddbClassDefinition.id\n      )\n      .map((feature) => feature.definition);\n\n    return classFeatures.concat(optionFeatures)\n      .sort((a, b) => a.displayOrder - b.displayOrder)\n      .sort((a, b) => a.requiredLevel - b.requiredLevel);\n  }\n\n  /**\n   * Finds a match in the compendium features for the given feature.\n   *\n   * @param {Object} feature - The feature to find a match for.\n   * @return {Object|undefined} - The matched feature, or undefined if no match is found.\n   */\n  getFeatureCompendiumMatch(feature) {\n    return this._compendiums.features.index.find((match) =>\n      ((foundry.utils.hasProperty(match, \"flags.ddbimporter.featureName\") && feature.name.trim().toLowerCase() == match.flags.ddbimporter.featureName.trim().toLowerCase())\n        || (!foundry.utils.hasProperty(match, \"flags.ddbimporter.featureName\")\n          && (feature.name.trim().toLowerCase() == match.name.trim().toLowerCase()\n          || `${feature.name} (${this.ddbClassDefinition.name})`.trim().toLowerCase() == match.name.trim().toLowerCase()))\n      )\n      && foundry.utils.hasProperty(match, \"flags.ddbimporter\")\n      && (match.flags.ddbimporter.class == this.ddbClassDefinition.name\n        || match.flags.ddbimporter.parentClassId == this.ddbClassDefinition.id\n        || match.flags.ddbimporter.classId == this.ddbClassDefinition.id)\n    );\n  }\n\n  getFeatCompendiumMatch(featName) {\n    const smallName = featName.trim().toLowerCase();\n    return this._compendiums.feats.index.find((match) =>\n      ((foundry.utils.hasProperty(match, \"flags.ddbimporter.featureName\")\n        && smallName == match.flags.ddbimporter.featureName.trim().toLowerCase())\n        || (!foundry.utils.hasProperty(match, \"flags.ddbimporter.featureName\")\n          && (smallName == match.name.trim().toLowerCase()\n          || smallName.split(\":\")[0].trim() == match.name.trim().toLowerCase()))\n      )\n    );\n  }\n\n  async _buildClassFeaturesDescription() {\n    logger.debug(`Parsing ${this.ddbClassDefinition.name} features`);\n    let description = \"<h1>Class Features</h1>\\n\\n\";\n    let classFeatures = [];\n\n    this.classFeatures.forEach((feature) => {\n      const classFeaturesAdded = classFeatures.some((f) => f === feature.name);\n\n      if (!classFeaturesAdded && !this._excludedFeatureIds.includes(feature.id)) {\n        const featureMatch = this.getFeatureCompendiumMatch(feature);\n        if (featureMatch) {\n          const title = (featureMatch)\n            ? `<p><b>@UUID[${featureMatch.uuid}]{${feature.name}}</b></p>`\n            : `<p><b>${feature.name}</b></p>`;\n          description += `${title}\\n${feature.description}\\n\\n`;\n        }\n        classFeatures.push(feature.name);\n      }\n    });\n\n    return description;\n  }\n\n  _generateHitDice() {\n    this.data.system.hitDice = `d${this.ddbClass.definition.hitDice}`;\n    this.data.system.hitDiceUsed = this.ddbClass.hitDiceUsed;\n  }\n\n  _setClassLevel() {\n    this.data.system.levels = this.ddbClass.level;\n  }\n\n  // ADVANCEMENT FUNCTIONS\n\n  // don't generate feature advancements for these features\n  static EXCLUDED_FEATURE_ADVANCEMENTS = [\n    \"Ability Score Improvement\",\n    \"Expertise\",\n    \"Bonus Proficiencies\",\n    \"Bonus Proficiency\",\n    \"Tool Proficiency\",\n\n    \"Speed\",\n    \"Size\",\n    \"Feat\",\n    \"Languages\",\n    \"Hit Points\",\n    \"Proficiencies\",\n\n    // tashas\n    \"Primal Knowledge\",\n    \"Martial Versatility\",\n  ];\n\n  async _generateFeatureAdvancements() {\n    logger.debug(`Parsing ${this.ddbClass.definition.name} features for advancement`);\n\n    const advancements = [];\n    this.classFeatures\n      .filter((feature) => !DDBClass.EXCLUDED_FEATURE_ADVANCEMENTS.includes(feature.name))\n      .forEach((feature) => {\n        const featureMatch = this.getFeatureCompendiumMatch(feature);\n\n        if (featureMatch) {\n          const levelAdvancement = advancements.findIndex((advancement) => advancement.level === feature.requiredLevel);\n\n          if (levelAdvancement == -1) {\n            const advancement = new game.dnd5e.documents.advancement.ItemGrantAdvancement();\n            this._advancementMatches.features[advancement._id] = {};\n            this._advancementMatches.features[advancement._id][featureMatch.name] = featureMatch.uuid;\n\n            const update = {\n              configuration: {\n                items: [{ uuid: featureMatch.uuid }]\n              },\n              value: {},\n              level: feature.requiredLevel,\n              title: \"Features\",\n              icon: \"\",\n              classRestriction: \"\"\n            };\n            advancement.updateSource(update);\n            advancements.push(advancement.toObject());\n          } else {\n            advancements[levelAdvancement].configuration.items.push({ uuid: featureMatch.uuid });\n            this._advancementMatches.features[advancements[levelAdvancement]._id][featureMatch.name] = featureMatch.uuid;\n          }\n        }\n      });\n\n    // TO DO: for choice features such as fighting styles:\n\n    // {\n    //   \"type\": \"ItemChoice\",\n    //   \"configuration\": {\n    //     \"hint\": \"Choose one of the following options. You can’t take a Fighting Style option more than once, even if you later get to choose again.\",\n    //     \"choices\": {\n    //       \"2\": 1\n    //     },\n    //     \"allowDrops\": true,\n    //     \"type\": \"feat\",\n    //     \"pool\": [\n    //       \"Compendium.dnd5e.classfeatures.8YwPFv3UAPjWVDNf\",\n    //       \"Compendium.dnd5e.classfeatures.zSlV0O2rQMdoq6pB\",\n    //       \"Compendium.dnd5e.classfeatures.hCop9uJrWhF1QPb4\",\n    //       \"Compendium.dnd5e.classfeatures.mHcSjcHJ8oZu3hkb\"\n    //     ],\n    //     \"spell\": {\n    //       \"ability\": \"\",\n    //       \"preparation\": \"\",\n    //       \"uses\": {\n    //         \"max\": \"\",\n    //         \"per\": \"\"\n    //       }\n    //     },\n    //     \"restriction\": {\n    //       \"type\": \"class\",\n    //       \"subtype\": \"fightingStyle\",\n    //       \"level\": \"\"\n    //     }\n    //   },\n    //   \"value\": {},\n    //   \"title\": \"Fighting Style\",\n    //   \"icon\": \"systems/dnd5e/icons/svg/item-choice.svg\",\n    //   \"_id\": \"ih8WlydEZdg3rCPh\"\n    // },\n\n    this.data.system.advancement = this.data.system.advancement.concat(advancements);\n  }\n\n  _generateScaleValueAdvancementsFromFeatures() {\n    let specialFeatures = [];\n    const advancements = this.classFeatures\n      .filter((feature) => feature.levelScales?.length > 0)\n      .map((feature) => {\n        let advancement = AdvancementHelper.generateScaleValueAdvancement(feature);\n        const specialLookup = this.SPECIAL_ADVANCEMENTS[advancement.title];\n        if (specialLookup) {\n          if (specialLookup.additionalAdvancements) {\n            specialLookup.additionalFunctions.forEach((fn) => {\n              specialFeatures.push(fn(advancement));\n            });\n          }\n          if (specialLookup.fixFunction) advancement = specialLookup.fixFunction(advancement);\n        }\n        return advancement;\n      });\n\n    this.data.system.advancement = this.data.system.advancement.concat(advancements, specialFeatures);\n  }\n\n  _generateHTMLSaveAdvancement() {\n    const advancements = [];\n    // FUTURE ENHANCEMENT FOR BULK: Add what to do if no mods supplied\n    this.data.system.advancement = this.data.system.advancement.concat(advancements);\n  }\n\n  _generateSaveAdvancement(feature, availableToMulticlass, level) {\n    const modFilters = {\n      includeExcludedEffects: true,\n      classId: this.ddbClassDefinition.id,\n      exactLevel: level,\n      availableToMulticlass,\n      useUnfilteredModifiers: true,\n      filterOnFeatureIds: [feature.id],\n    };\n    const mods = DDBHelper.getChosenClassModifiers(this.ddbData, modFilters);\n\n\n    return AdvancementHelper.getSaveAdvancement(mods, availableToMulticlass, level);\n\n  }\n\n  _generateSaveAdvancements() {\n    if (this.options.noMods) {\n      this._generateHTMLSaveAdvancement();\n      return;\n    }\n    const advancements = [];\n    for (let i = 0; i <= 20; i++) {\n      [true, false].forEach((availableToMulticlass) => {\n        if (!availableToMulticlass && i > 1) return;\n        const proficiencyFeatures = this._proficiencyFeatures.filter((f) => f.requiredLevel === i);\n\n        for (const proficiencyFeature of proficiencyFeatures) {\n          const advancement = this._generateSaveAdvancement(proficiencyFeature, availableToMulticlass, i);\n          if (advancement) advancements.push(advancement.toObject());\n        }\n      });\n    }\n\n    this.data.system.advancement = this.data.system.advancement.concat(advancements);\n  }\n\n  _generateSkillAdvancement(feature, availableToMulticlass, i) {\n    const modFilters = {\n      includeExcludedEffects: true,\n      classId: this.ddbClassDefinition.id,\n      exactLevel: i,\n      availableToMulticlass: availableToMulticlass === false ? null : true,\n      useUnfilteredModifiers: true,\n      filterOnFeatureIds: [feature.id],\n    };\n    const mods = this.options.noMods ? [] : DDBHelper.getChosenClassModifiers(this.ddbData, modFilters);\n    const skillExplicitMods = mods.filter((mod) =>\n      mod.type === \"proficiency\"\n      && DICTIONARY.character.skills.map((s) => s.subType).includes(mod.subType)\n    );\n    const filterModOptions = { subType: `choose-a-${this.ddbClassDefinition.name.toLowerCase()}-skill` };\n    const skillChooseMods = DDBHelper.filterModifiers(mods, \"proficiency\", filterModOptions);\n    const skillMods = skillChooseMods.concat(skillExplicitMods);\n\n    return this.advancementHelper.getSkillAdvancement(skillMods, feature, availableToMulticlass, i);\n  }\n\n  _generateSkillAdvancements() {\n    const advancements = [];\n\n    for (let i = 0; i <= 20; i++) {\n      [true, false].forEach((availableToMulticlass) => {\n        if ((!availableToMulticlass && i > 1)) return;\n        if (this._isSubClass && !availableToMulticlass) return;\n        const skillFeatures = this._proficiencyFeatures.filter((f) => f.requiredLevel === i);\n\n        for (const feature of skillFeatures) {\n          const baseProficiency = feature.name === \"Proficiencies\";\n          if (availableToMulticlass\n            && baseProficiency\n            && this.dictionary.multiclassSkill === 0\n          // eslint-disable-next-line no-continue\n          ) continue;\n          const advancement = this._generateSkillAdvancement(feature, availableToMulticlass, i);\n          if (advancement) advancements.push(advancement.toObject());\n        }\n      });\n    }\n\n    this.data.system.advancement = this.data.system.advancement.concat(advancements);\n  }\n\n  _generateLanguageAdvancement(feature, level) {\n    const modFilters = {\n      includeExcludedEffects: true,\n      classId: this.ddbClassDefinition.id,\n      exactLevel: level,\n      useUnfilteredModifiers: true,\n      filterOnFeatureIds: [feature.id],\n    };\n    const mods = this.options.noMods ? [] : DDBHelper.getChosenClassModifiers(this.ddbData, modFilters);\n\n    return this.advancementHelper.getLanguageAdvancement(mods, feature, level);\n  }\n\n  _generateLanguageAdvancements() {\n    const advancements = [];\n\n    for (let i = 0; i <= 20; i++) {\n      const languageFeatures = this._languageFeatures.filter((f) => f.requiredLevel === i);\n\n      for (const feature of languageFeatures) {\n        const advancement = this._generateLanguageAdvancement(feature, i);\n        if (advancement) advancements.push(advancement.toObject());\n      }\n    }\n\n    this.data.system.advancement = this.data.system.advancement.concat(advancements);\n  }\n\n  _generateSkillOrLanguageAdvancements() {\n    const advancements = [];\n\n    for (let i = 0; i <= 20; i++) {\n      const skillFeatures = this._languageOrSkillFeatures.filter((f) => f.requiredLevel === i);\n\n      for (const feature of skillFeatures) {\n        const skillAdvancement = this._generateSkillAdvancement(feature, true, i);\n        const languageAdvancement = this._generateLanguageAdvancement(feature, i);\n        // console.warn(`SkillOrLanguageAdvancements`, {\n        //   i,\n        //   feature,\n        //   skillAdvancement,\n        //   languageAdvancement,\n        // });\n        if (skillAdvancement && languageAdvancement && skillAdvancement.configuration.choices.length > 0) {\n          const advancement = skillAdvancement.toObject();\n          advancement.configuration.choices[0].pool.push(...languageAdvancement.toObject().configuration.choices[0].pool);\n          advancements.push(advancement);\n        } else {\n          logger.error(`Failed Skill or Lanugage Advancement Generation`, {\n            i,\n            feature,\n            skillAdvancement,\n            languageAdvancement,\n          });\n        }\n      }\n    }\n\n    this.data.system.advancement = this.data.system.advancement.concat(advancements);\n  }\n\n  _generateToolAdvancement(feature, level) {\n    const modFilters = {\n      includeExcludedEffects: true,\n      classId: this.ddbClassDefinition.id,\n      exactLevel: level,\n      useUnfilteredModifiers: true,\n      filterOnFeatureIds: [feature.id],\n    };\n    const mods = this.options.noMods ? [] : DDBHelper.getChosenClassModifiers(this.ddbData, modFilters);\n    return this.advancementHelper.getToolAdvancement(mods, feature, level);\n  }\n\n  _generateToolAdvancements() {\n    const advancements = [];\n\n    for (let i = 0; i <= 20; i++) {\n      const toolFeatures = this._toolFeatures.filter((f) => f.requiredLevel === i);\n\n      for (const feature of toolFeatures) {\n        const advancement = this._generateToolAdvancement(feature, i);\n        if (advancement) advancements.push(advancement.toObject());\n      }\n    }\n\n    this.data.system.advancement = this.data.system.advancement.concat(advancements);\n  }\n\n  _generateArmorAdvancement(feature, availableToMulticlass, level) {\n    const modFilters = {\n      includeExcludedEffects: true,\n      classId: this.ddbClassDefinition.id,\n      exactLevel: level,\n      availableToMulticlass: availableToMulticlass === false ? null : true,\n      useUnfilteredModifiers: true,\n      filterOnFeatureIds: [feature.id],\n    };\n    const mods = this.options.noMods ? [] : DDBHelper.getChosenClassModifiers(this.ddbData, modFilters);\n    return this.advancementHelper.getArmorAdvancement(mods, feature, availableToMulticlass, level);\n  }\n\n  _generateArmorAdvancements() {\n    const advancements = [];\n\n    for (let i = 0; i <= 20; i++) {\n      [true, false].forEach((availableToMulticlass) => {\n        if ((!availableToMulticlass && i > 1)) return;\n        if (this._isSubClass && !availableToMulticlass) return;\n        const armorFeatures = this._armorFeatures.filter((f) => f.requiredLevel === i);\n\n        for (const feature of armorFeatures) {\n          const advancement = this._generateArmorAdvancement(feature, availableToMulticlass, i);\n          if (advancement) advancements.push(advancement.toObject());\n        }\n      });\n    }\n\n    this.data.system.advancement = this.data.system.advancement.concat(advancements);\n  }\n\n  _generateWeaponAdvancement(feature, level) {\n    const modFilters = {\n      includeExcludedEffects: true,\n      classId: this.ddbClassDefinition.id,\n      exactLevel: level,\n      useUnfilteredModifiers: true,\n      filterOnFeatureIds: [feature.id],\n    };\n    const mods = this.options.noMods ? [] : DDBHelper.getChosenClassModifiers(this.ddbData, modFilters);\n    return this.advancementHelper.getWeaponAdvancement(mods, feature, level);\n  }\n\n  _generateWeaponAdvancements() {\n    const advancements = [];\n\n    for (let i = 0; i <= 20; i++) {\n      const weaponFeatures = this._weaponFeatures.filter((f) => f.requiredLevel === i);\n\n      for (const feature of weaponFeatures) {\n        const advancement = this._generateWeaponAdvancement(feature, i);\n        if (advancement) advancements.push(advancement.toObject());\n      }\n    }\n\n    this.data.system.advancement = this.data.system.advancement.concat(advancements);\n  }\n\n  _generateExpertiseAdvancements() {\n    const advancements = [];\n\n    for (let i = 0; i <= 20; i++) {\n      const expertiseFeature = this._expertiseFeatures.find((f) => f.requiredLevel === i);\n      // eslint-disable-next-line no-continue\n      if (!expertiseFeature) continue;\n\n      const advancement = this.advancementHelper.getExpertiseAdvancement(expertiseFeature, i);\n      if (advancement) advancements.push(advancement.toObject());\n    }\n\n    this.data.system.advancement = this.data.system.advancement.concat(advancements);\n  }\n\n  _generateConditionAdvancement(feature, level) {\n    const modFilters = {\n      includeExcludedEffects: true,\n      classId: this.ddbClassDefinition.id,\n      exactLevel: level,\n      useUnfilteredModifiers: true,\n      filterOnFeatureIds: [feature.id],\n    };\n    const mods = this.options.noMods ? [] : DDBHelper.getChosenClassModifiers(this.ddbData, modFilters);\n\n    return this.advancementHelper.getConditionAdvancement(mods, feature, level);\n  }\n\n  _generateConditionAdvancements() {\n    const advancements = [];\n\n    for (let i = 0; i <= 20; i++) {\n      const conditionAdvancements = this._conditionFeatures.filter((f) => f.requiredLevel === i);\n      for (const feature of conditionAdvancements) {\n        const advancement = this._generateConditionAdvancement(feature, i);\n        if (advancement) advancements.push(advancement.toObject());\n      }\n    }\n\n    this.data.system.advancement = this.data.system.advancement.concat(advancements);\n  }\n\n  _generateHPAdvancement(character) {\n    // const value = \"value\": {\n    //   \"1\": \"max\",\n    //   \"2\": \"avg\"\n    // },\n    const value = {};\n\n    const rolledHP = foundry.utils.getProperty(character, \"flags.ddbimporter.rolledHP\") ?? false;\n    const startingClass = foundry.utils.getProperty(this.data, \"flags.ddbimporter.isStartingClass\") === true;\n    const useMaxHP = game.settings.get(\"ddb-importer\", \"character-update-policy-use-hp-max-for-rolled-hp\");\n    if (rolledHP && !useMaxHP) {\n      const baseHP = foundry.utils.getProperty(character, \"flags.ddbimporter.baseHitPoints\");\n      const totalLevels = foundry.utils.getProperty(character, \"flags.ddbimporter.dndbeyond.totalLevels\");\n      const hpPerLevel = Math.floor(baseHP / totalLevels);\n      const leftOvers = Math.floor(baseHP % totalLevels);\n\n      for (let i = 1; i <= this.data.system.levels; i++) {\n        value[`${i}`] = i === 1 && startingClass ? (hpPerLevel + leftOvers) : hpPerLevel;\n      }\n    } else {\n      for (let i = 1; i <= this.data.system.levels; i++) {\n        value[`${i}`] = i === 1 && startingClass ? \"max\" : \"avg\";\n      }\n    };\n\n    const advancement = new game.dnd5e.documents.advancement.HitPointsAdvancement();\n    advancement.updateSource({ value });\n    this.data.system.advancement.push(advancement.toObject());\n  }\n\n\n  async _addFoundryAdvancements() {\n    for (const packId of SETTINGS.FOUNDRY_COMPENDIUM_MAP[\"classes\"]) {\n      const pack = CompendiumHelper.getCompendium(packId, false);\n      if (!pack) continue;\n      await pack.getIndex();\n      const klassMatch = pack.index.find((k) =>\n        k.name === this.ddbClassDefinition.name\n        && k.type === \"class\"\n      );\n      if (!klassMatch) continue;\n      const foundryKlass = await pack.getDocument(klassMatch._id);\n      const scaleAdvancements = foundryKlass.system.advancement.filter((foundryA) =>\n        foundryA.type === \"ScaleValue\"\n        && !this.data.system.advancement.some((ddbA) => ddbA.configuration.identifier === foundryA.configuration.identifier)\n      ).map((advancement) => {\n        return advancement.toObject();\n      });\n      this.data.system.advancement.push(...scaleAdvancements);\n      return;\n    }\n  }\n\n  _generateAbilityScoreAdvancement() {\n    const advancements = [];\n\n    for (let i = 0; i <= 20; i++) {\n      const abilityAdvancementFeature = this.classFeatures.find((f) => f.name === \"Ability Score Improvement\" && f.requiredLevel === i);\n\n      // eslint-disable-next-line no-continue\n      if (!abilityAdvancementFeature) continue;\n      const advancement = new game.dnd5e.documents.advancement.AbilityScoreImprovementAdvancement();\n      advancement.updateSource({ configuration: { points: 2 }, level: i, value: { type: \"asi\" } });\n\n      // if advancement has taken ability improvements\n      const modFilters = {\n        includeExcludedEffects: true,\n        classId: this.ddbClassDefinition.id,\n        exactLevel: i,\n        useUnfilteredModifiers: true,\n      };\n      const mods = DDBHelper.getChosenClassModifiers(this.ddbData, modFilters);\n\n      const assignments = {};\n      DICTIONARY.character.abilities.forEach((ability) => {\n        const count = DDBHelper.filterModifiers(mods, \"bonus\", { subType: `${ability.long}-score` }).length;\n        if (count > 0) assignments[ability.value] = count;\n      });\n\n      // create a leveled advancement\n      if (Object.keys(assignments).length > 0) {\n        advancement.updateSource({\n          value: {\n            assignments,\n          },\n        });\n      } else if (abilityAdvancementFeature.requiredLevel <= this.ddbClass.level) {\n        // feat id selection happens later once features have been generated\n        // \"type\": \"feat\",\n        // \"feat\": {\n        //   \"vu8kJ2iTCEiGQ1mv\": \"Compendium.world.ddb-test2-ddb-feats.Item.3mfeQMT6Fh1VRubU\"\n        // }\n        advancement.updateSource({\n          value: {\n            type: \"feat\",\n            feat: {\n            },\n          },\n        });\n        // abilityAdvancementFeature.id: 313\n        // abilityAdvancementFeature.entityTypeId: 12168134\n        const featChoice = this.ddbData.character.feats.find((f) =>\n          f.componentId == abilityAdvancementFeature.id\n          && f.componentTypeId == abilityAdvancementFeature.entityTypeId\n        );\n        const featureMatch = featChoice ? this.getFeatCompendiumMatch(featChoice.definition.name) : null;\n        if (featureMatch) {\n          this._advancementMatches.features[advancement._id] = {};\n          this._advancementMatches.features[advancement._id][featureMatch.name] = featureMatch.uuid;\n        } else {\n          logger.info(\"Missing asi feat linking match for\", { abilityAdvancementFeature, featChoice, this: this });\n        }\n\n      }\n\n      advancements.push(advancement.toObject());\n    }\n\n    this.data.system.advancement = this.data.system.advancement.concat(advancements);\n  }\n\n  _generateWealth() {\n    const diceString = this.ddbClassDefinition.wealthDice.diceString;\n    const diceMultiplier = this.ddbClassDefinition.wealthDice.diceMultiplier;\n    this.data.system.wealth = diceMultiplier && diceString\n      ? `${diceString}*${diceMultiplier}`\n      : \"\";\n  }\n\n  async _copyFoundryEquipment() {\n    for (const packId of SETTINGS.FOUNDRY_COMPENDIUM_MAP[\"classes\"]) {\n      const pack = CompendiumHelper.getCompendium(packId, false);\n      if (!pack) continue;\n      await pack.getIndex();\n      const klassMatch = pack.index.find((k) =>\n        k.name === this.ddbClassDefinition.name\n        && k.type === \"class\"\n      );\n      if (!klassMatch) continue;\n      const foundryKlass = await pack.getDocument(klassMatch._id);\n      const startingEquipment = foundry.utils.duplicate(foundryKlass.system.startingEquipment);\n      this.data.system.startingEquipment = startingEquipment;\n      return;\n    }\n  }\n\n  async _generateCommonAdvancements() {\n    this._generateScaleValueAdvancementsFromFeatures();\n    await this._generateFeatureAdvancements();\n    this._generateSaveAdvancements();\n    this._generateSkillAdvancements();\n    this._generateExpertiseAdvancements();\n    this._generateLanguageAdvancements();\n    this._generateToolAdvancements();\n    this._generateArmorAdvancements();\n    this._generateWeaponAdvancements();\n    // FUTURE: Equipment? (for backgrounds), needs better handling in Foundry\n    this._generateSkillOrLanguageAdvancements();\n    this._generateConditionAdvancements();\n    this._generateSpellCastingProgression();\n    // FUTURE: choice options such as fighting styles, this requires improved feature parsing\n    await this._addFoundryAdvancements();\n  }\n\n  // fixes\n  // eslint-disable-next-line class-methods-use-this, no-empty-function\n  _fixes() {\n    // Currently empty but stubbed for DDBSubClass\n  }\n\n\n  // GENERATE CLASS\n\n  async generateFromCharacter(character) {\n    await this._buildCompendiumIndex(\"features\");\n    this._setClassLevel();\n    this._fleshOutCommonDataStub();\n\n    // these are class specific\n    this._generateHPAdvancement(character);\n    await this._generateCommonAdvancements();\n    this._generateHitDice();\n    this._generateAbilityScoreAdvancement();\n    this._generateWealth();\n    this._copyFoundryEquipment();\n\n    // finally a description\n    await this._generateDescriptionStub(character);\n\n    this._fixes();\n  }\n\n}\n","import utils from '../../lib/utils.js';\nimport AdvancementHelper from '../advancements/AdvancementHelper.js';\nimport DDBClass from './DDBClass.js';\n\nexport default class DDBSubClass extends DDBClass {\n\n  // these are advancement helpers\n  static SPECIAL_ADVANCEMENTS = {\n    \"Combat Superiority\": {\n      fix: true,\n      fixFunction: AdvancementHelper.renameTotal,\n      additionalAdvancements: true,\n      additionalFunctions: [AdvancementHelper.addAdditionalUses, AdvancementHelper.addSingularDie],\n    },\n    \"Rune Carver\": {\n      fix: true,\n      fixFunction: AdvancementHelper.renameTotal,\n      additionalAdvancements: false,\n      additionalFunctions: [],\n    },\n  };\n\n  _fleshOutCommonDataStub() {\n    super._fleshOutCommonDataStub();\n    // add parent class identifier\n    this.data.system.classIdentifier = utils.referenceNameString(this.ddbClass.definition.name.toLowerCase());\n\n  }\n\n  _generateDataStub() {\n    this.data = {\n      _id: foundry.utils.randomID(),\n      name: this.ddbClass.subclassDefinition.name,\n      type: \"subclass\",\n      system: utils.getTemplate(\"subclass\"),\n      flags: {\n        ddbimporter: {\n          subclassDefinitionId: this.ddbClass.id,\n          id: this.ddbClass.subclassDefinition.id,\n          type: \"class\",\n          ddbImg: this.ddbClass.subclassDefinition.portraitAvatarUrl ?? this.ddbClass.definition.portraitAvatarUrl,\n        },\n        obsidian: {\n          source: {\n            type: \"class\",\n            text: this.ddbClass.subclassDefinition.name,\n          }\n        },\n      },\n      img: null,\n    };\n  }\n\n  constructor(ddb, classId) {\n    super(ddb, classId);\n\n    this.ddbClassDefinition = this.ddbClass.subclassDefinition;\n    this._isSubClass = true;\n    this.SPECIAL_ADVANCEMENTS = DDBSubClass.SPECIAL_ADVANCEMENTS;\n  }\n\n\n  _fixes() {\n    if (this.data.name.startsWith(\"Order of the Profane Soul\")) {\n      this.data.name = \"Order of the Profane Soul\";\n      const slotsScaleValue = {\n        _id: foundry.utils.randomID(),\n        type: \"ScaleValue\",\n        configuration: {\n          distance: { units: \"\" },\n          identifier: `pact-slots`,\n          type: \"number\",\n          scale: {\n            3: {\n              value: 1,\n            },\n            6: {\n              value: 2,\n            },\n          },\n        },\n        value: {},\n        title: `Pact Slots`,\n        icon: null,\n      };\n\n      const levelScaleValue = {\n        _id: foundry.utils.randomID(),\n        type: \"ScaleValue\",\n        configuration: {\n          distance: { units: \"\" },\n          identifier: `pact-level`,\n          type: \"number\",\n          scale: {\n            3: {\n              value: 1,\n            },\n            7: {\n              value: 2,\n            },\n            13: {\n              value: 3,\n            },\n          },\n        },\n        value: {},\n        title: `Pact Level`,\n        icon: null,\n      };\n\n      this.data.system.advancement.push(slotsScaleValue, levelScaleValue);\n    } else if (this.data.name.startsWith(\"Path of the Storm Herald\")) {\n      const desert = {\n        _id: foundry.utils.randomID(),\n        type: \"ScaleValue\",\n        configuration: {\n          distance: { units: \"\" },\n          identifier: `storm-aura-desert`,\n          type: \"number\",\n          scale: {\n            3: {\n              value: 2,\n            },\n            5: {\n              value: 3,\n            },\n            10: {\n              value: 4,\n            },\n            15: {\n              value: 5,\n            },\n            20: {\n              value: 6,\n            },\n          },\n        },\n        value: {},\n        title: `Storm Aura Desert`,\n        icon: null,\n      };\n\n      const sea = {\n        _id: foundry.utils.randomID(),\n        type: \"ScaleValue\",\n        configuration: {\n          distance: { units: \"\" },\n          identifier: `storm-aura-sea`,\n          type: \"dice\",\n          scale: {\n            3: {\n              number: 1,\n              faces: 6,\n            },\n            10: {\n              number: 2,\n              faces: 6,\n            },\n            15: {\n              number: 3,\n              faces: 6,\n            },\n            20: {\n              number: 4,\n              faces: 6,\n            },\n          },\n        },\n        value: {},\n        title: `Storm Aura Sea`,\n        icon: null,\n      };\n\n      const tundra = {\n        _id: foundry.utils.randomID(),\n        type: \"ScaleValue\",\n        configuration: {\n          distance: { units: \"\" },\n          identifier: `storm-aura-tundra`,\n          type: \"number\",\n          scale: {\n            3: {\n              value: 2,\n            },\n            5: {\n              value: 3,\n            },\n            10: {\n              value: 4,\n            },\n            15: {\n              value: 5,\n            },\n            20: {\n              value: 6,\n            },\n          },\n        },\n        value: {},\n        title: `Storm Aura Tundra`,\n        icon: null,\n      };\n\n      this.data.system.advancement.push(desert, sea, tundra);\n    }\n  }\n\n  async generateFromCharacter(character) {\n    await this._buildCompendiumIndex(\"features\");\n    this._fleshOutCommonDataStub();\n    await this._generateCommonAdvancements();\n    await this._generateDescriptionStub(character);\n    this._fixes();\n  }\n\n}\n","import DDBClass from \"./DDBClass.js\";\nimport logger from '../../logger.js';\nimport DDBSubClass from \"./DDBSubClass.js\";\n\nexport default class CharacterClassFactory {\n\n  constructor(ddbCharacter) {\n    this.ddbCharacter = ddbCharacter;\n    this.character = this.ddbCharacter.raw.character;\n    this.source = this.ddbCharacter.source.ddb;\n    this.ddbClasses = {\n    };\n  }\n\n  async processCharacter() {\n    const documents = [];\n    for (const characterClass of this.source.character.classes) {\n      const ddbClass = new DDBClass(this.source, characterClass.definition.id);\n      await ddbClass.generateFromCharacter(this.character);\n      this.ddbClasses[ddbClass.data.name] = ddbClass;\n      documents.push(foundry.utils.deepClone(ddbClass.data));\n\n      if (characterClass.subclassDefinition && characterClass.subclassDefinition.name) {\n        const ddbSubClass = new DDBSubClass(this.source, characterClass.definition.id);\n        await ddbSubClass.generateFromCharacter(this.character);\n        this.ddbClasses[ddbSubClass.data.name] = ddbSubClass;\n        documents.push(foundry.utils.deepClone(ddbSubClass.data));\n      }\n    }\n\n    logger.debug(`Processed ${documents.length} classes`, { documents });\n    this.ddbCharacter.updateItemIds(documents);\n\n    return documents;\n  }\n\n  #itemGrantLink(ddbClass, klass, advancementIndex) {\n    // \"added\": {\n    //   \"TlT20Gh1RofymIDY\": \"Compendium.dnd5e.classfeatures.Item.u4NLajXETJhJU31v\",\n    //   \"2PZlmOVkOn2TbR1O\": \"Compendium.dnd5e.classfeatures.Item.hpLNiGq7y67d2EHA\"\n    // }\n    const advancement = klass.system.advancement[advancementIndex];\n    const aData = ddbClass._advancementMatches.features[advancement._id];\n    const added = {};\n\n    if (!aData || !advancement) {\n      logger.warn(`Advancement for ${klass.name} (idx ${advancementIndex}) missing required data for linking`, {\n        advancement,\n        aData,\n        klass,\n        ddbClass,\n      });\n      return;\n    }\n    for (const [advancementFeatureName, uuid] of Object.entries(aData)) {\n      logger.debug(`Advancement ${advancement._id} searching for Feature ${advancementFeatureName} (${uuid})`, {\n        a: advancement,\n        ddbClass,\n        advancementFeatureName,\n        uuid,\n      });\n\n      const characterFeature = this.ddbCharacter.getDataFeature(advancementFeatureName, { hints: [klass.name] });\n      if (characterFeature) {\n        logger.debug(`Advancement ${advancement._id} found Feature ${advancementFeatureName} (${uuid})`);\n        added[characterFeature._id] = uuid;\n        foundry.utils.setProperty(characterFeature, \"flags.dnd5e.sourceId\", uuid);\n        foundry.utils.setProperty(characterFeature, \"flags.dnd5e.advancementOrigin\", `${klass._id}.${advancement._id}`);\n      }\n    }\n\n    if (Object.keys(added).length > 0) {\n      advancement.value = {\n        added,\n      };\n      klass.system.advancement[advancementIndex] = advancement;\n    }\n  }\n\n  #abilityScoreFeatLink(ddbClass, klass, advancementIndex) {\n    // \"value\": {\n    //   \"type\": \"feat\",\n    //   \"feat\": {\n    //     \"B09QLNujzaGh6zt7\": \"Compendium.world.ddb-test2-ddb-feats.Item.cHie2wNgxBG9m62F\"\n    //   }\n    // }\n    const advancement = klass.system.advancement[advancementIndex];\n    const aData = ddbClass._advancementMatches.features[advancement._id];\n    const feats = {};\n\n    if (!aData || !advancement) {\n      logger.warn(`Advancement for ${klass.name} (idx ${advancementIndex}) missing required data for linking`, {\n        advancement,\n        aData,\n        klass,\n        ddbClass,\n      });\n      return;\n    }\n\n    for (const [advancementFeatureName, uuid] of Object.entries(aData)) {\n      logger.debug(`Ability Score Advancement ${advancement._id} searching for Feat ${advancementFeatureName} (${uuid})`, {\n        a: advancement,\n        ddbClass,\n        advancementFeatureName,\n        uuid,\n      });\n\n      const characterFeature = this.ddbCharacter.getDataFeature(advancementFeatureName, { hints: [klass.name] });\n      if (characterFeature) {\n        logger.debug(`Ability Score Advancement ${advancement._id} found Feat ${advancementFeatureName} (${uuid})`);\n        feats[characterFeature._id] = uuid;\n        foundry.utils.setProperty(characterFeature, \"flags.dnd5e.sourceId\", uuid);\n        foundry.utils.setProperty(characterFeature, \"flags.dnd5e.advancementOrigin\", `${klass._id}.${advancement._id}`);\n      }\n    }\n\n    if (Object.keys(feats).length > 0) {\n      // eslint-disable-next-line require-atomic-updates\n      klass.system.advancement[advancementIndex].value = {\n        type: \"feat\",\n        feat: feats,\n      };\n    }\n  }\n\n  linkFeatures() {\n    logger.debug(\"Linking Advancements to Features\", {\n      CharacterClassFactory: this,\n    });\n    for (const klass of this.ddbCharacter.data.classes) {\n      const ddbClass = this.ddbClasses[klass.name];\n      logger.debug(\"Linking Advancements to Features for Class\", {\n        klass,\n        ddbClass,\n      });\n\n      for (let idx = 0; idx < klass.system.advancement.length; idx++) {\n        const a = klass.system.advancement[idx];\n        if (a.type === \"ItemGrant\" && a.level <= ddbClass.ddbClass.level) {\n          this.#itemGrantLink(ddbClass, klass, idx);\n        } else if (a.type === \"AbilityScoreImprovement\" && a.value.type === \"feat\") {\n          this.#abilityScoreFeatLink(ddbClass, klass, idx);\n        }\n      }\n      logger.debug(`Processed ${klass.name} class advancements`, klass.system.advancement);\n    };\n  }\n}\n","import DDBHelper from \"../../lib/DDBHelper.js\";\nimport utils from \"../../lib/utils.js\";\nimport logger from \"../../logger.js\";\nimport DDBFeature from \"./DDBFeature.js\";\n\n\nexport default class DDBChoiceFeature extends DDBFeature {\n\n  _prepare() {\n    this._levelScale = null;\n    this._levelScales = null;\n    this._limitedUse = null;\n    this._classOption = null;\n\n    this._classFeatureComponent = DDBHelper.findComponentByComponentId(this.ddbData, this.ddbDefinition.id);\n\n    if (!this._classFeatureComponent) {\n      this._classOption = [\n        this.ddbData.character.options.race,\n        this.ddbData.character.options.class,\n        this.ddbData.character.options.feat,\n      ]\n        .flat()\n        .find((option) => option.definition.id === this.ddbDefinition.componentId);\n      if (this._classOption) {\n        this._classFeatureComponent = DDBHelper.findComponentByComponentId(this.ddbData, this._classOption.componentId);\n      }\n    }\n\n    if (this._classFeatureComponent) {\n      this._levelScale = this._classFeatureComponent.levelScale;\n      this._levelScales = this._classFeatureComponent.definition?.levelScales;\n      this._limitedUse = this._classFeatureComponent.definition?.limitedUse;\n      // I don't think I actually use these\n      // foundry.utils.setProperty(this.data.flags, \"ddbimporter.dndbeyond.levelScale\", this._levelScale);\n      // foundry.utils.setProperty(this.data.flags, \"ddbimporter.dndbeyond.levelScales\", this._levelScales);\n      // foundry.utils.setProperty(this.data.flags, \"ddbimporter.dndbeyond.limitedUse\", this._limitedUse);\n    }\n\n  }\n\n\n  build(choice) {\n    try {\n      this._generateSystemType();\n\n      logger.debug(`Adding choice ${choice.label}`);\n\n      if (this.data.name === choice.label) {\n        this._generateSystemSubType();\n        return;\n      }\n\n      this.data.name = choice.label\n        ? choice.label.startsWith(this.data.name.trim())\n          ? choice.label\n          : `${this.data.name}: ${choice.label}`\n        : this.data.name;\n      this.data.name = utils.nameString(this.data.name);\n      const namePointRegex = /(.*) \\((\\d) points?\\)/i;\n      const nameMatch = this.data.name.match(namePointRegex);\n      if (nameMatch) {\n        this.data.name = nameMatch[1];\n        this._resourceCharges = Number.parseInt(nameMatch[2]);\n      }\n      this._generateSystemSubType();\n\n      // get description for chris premades\n      this._generateDescription(true);\n      foundry.utils.setProperty(this.data, \"flags.ddbimporter.initialFeature\", foundry.utils.deepClone(this.data.system.description));\n\n      if (choice.wasOption && choice.description) {\n        this.ddbDefinition.description = choice.description;\n        this.ddbDefinition.snippet = choice.snippet ? choice.snippet : \"\";\n      } else {\n        if (this.ddbDefinition.description) {\n          this.ddbDefinition.description = choice.description\n            ? this.ddbDefinition.description + \"<h3>\" + choice.label + \"</h3>\" + choice.description\n            : this.ddbDefinition.description;\n        }\n        if (this.ddbDefinition.snippet) {\n          this.ddbDefinition.snippet = choice.description\n            ? this.ddbDefinition.snippet + \"<h3>\" + choice.label + \"</h3>\" + choice.description\n            : this.ddbDefinition.snippet;\n        }\n      }\n      // add these flags in so they can be used by the description parser\n      foundry.utils.setProperty(this.ddbDefinition, \"flags.ddbimporter.dndbeyond.choice\", choice);\n\n      this._generateActivation();\n      this._generateResourceConsumption();\n      this._generateDescription(false);\n      this.data.flags.ddbimporter.dndbeyond.choice = {\n        label: choice.label,\n        choiceId: choice.choiceId,\n        componentId: choice.componentId,\n        componentTypeId: choice.componentTypeId,\n        parentChoiceId: choice.parentChoiceId,\n        subType: choice.subType,\n        wasOption: choice.wasOption,\n        entityTypeId: choice.entityTypeId,\n        type: choice.type,\n      };\n\n      this.data._id = foundry.utils.randomID();\n      this._addEffects(choice, this.type);\n\n    } catch (err) {\n      logger.warn(\n        `Unable to Generate Choice Action: ${this.name}, please log a bug report. Err: ${err.message}`,\n        \"extension\"\n      );\n      logger.error(\"Error\", err);\n    }\n  }\n\n  static buildChoiceFeatures(ddbFeature) {\n    logger.debug(`Processing Choice Features ${ddbFeature._choices.map((c) => c.label).join(\",\")}`, {\n      choices: ddbFeature._choices,\n      feature: ddbFeature,\n    });\n    const features = [];\n    ddbFeature._choices.forEach((choice) => {\n      const choiceFeature = new DDBChoiceFeature({\n        ddbData: ddbFeature.ddbData,\n        ddbDefinition: foundry.utils.deepClone(ddbFeature.ddbDefinition),\n        type: ddbFeature.type,\n        rawCharacter: ddbFeature.rawCharacter,\n      });\n      choiceFeature.build(choice);\n      logger.debug(`DDBChoiceFeature.buildChoiceFeatures: ${choiceFeature.ddbDefinition.name}`, {\n        choiceFeature,\n        choice,\n        ddbFeature,\n      });\n      features.push(choiceFeature.data);\n    });\n    return features;\n  }\n\n}\n","import logger from \"../../logger.js\";\nimport DDBChoiceFeature from \"./DDBChoiceFeature.js\";\nimport DDBFeature from \"./DDBFeature.js\";\nimport DDBFeatures from \"./DDBFeatures.js\";\n\n\nexport default class DDBClassFeatures {\n\n  constructor({ ddbData, rawCharacter = null } = {}) {\n    this.ddbData = ddbData;\n    this.rawCharacter = rawCharacter;\n    this.data = [];\n\n    this.featureList = {\n      class: [],\n      subClass: [],\n    };\n    this.data = [];\n    this._processed = [];\n\n    this.excludedFeatures = this.ddbData.character.optionalClassFeatures\n      .filter((f) => f.affectedClassFeatureId)\n      .map((f) => f.affectedClassFeatureId);\n  }\n\n  _getFeatures(featureDefinition, type, source, filterByLevel = true) {\n    const feature = new DDBFeature({\n      ddbData: this.ddbData,\n      ddbDefinition: featureDefinition,\n      rawCharacter: this.rawCharacter,\n      type,\n      source,\n    });\n    feature.build();\n    const allowedByLevel = !filterByLevel || (filterByLevel && feature.hasRequiredLevel);\n\n    logger.debug(`DDBClassFeatures._getFeatures: ${feature.ddbDefinition.name}`, {\n      featureDefinition,\n      feature,\n      this: this,\n    });\n\n    if (!allowedByLevel) return [];\n    if (feature.isChoiceFeature) {\n      return DDBChoiceFeature.buildChoiceFeatures(feature);\n    } else {\n      return [feature.data];\n    }\n  }\n\n\n  _generateClassFeatures(klass) {\n\n    const className = klass.definition.name;\n    const classFeatureIds = klass.definition.classFeatures.map((f) => f.id);\n\n    const classFeatures = klass.classFeatures.filter(\n      (feat) =>\n        classFeatureIds.includes(feat.definition.id)\n        && DDBFeatures.includedFeatureNameCheck(feat.definition.name)\n        && feat.definition.requiredLevel <= klass.level\n    );\n\n    const classFeatureList = classFeatures\n      .filter((feat) => !this.excludedFeatures.includes(feat.definition.id))\n      .map((feat) => {\n        let items = this._getFeatures(feat, \"class\", className);\n        return items.map((item) => {\n          item.flags.ddbimporter.dndbeyond.class = className;\n          foundry.utils.setProperty(item.flags, \"ddbimporter.class\", klass.definition.name);\n          foundry.utils.setProperty(item.flags, \"ddbimporter.classId\", klass.definition.id);\n          // const subClass = foundry.utils.getProperty(klass, \"subclassDefinition\");\n          // foundry.utils.setProperty(item.flags, \"ddbimporter.subclass\", subClass?.name);\n          // foundry.utils.setProperty(item.flags, \"ddbimporter.subclassId\", subClass?.id);\n          item.flags.obsidian.source.text = className;\n          // add feature to all features list\n          this.featureList.class.push(foundry.utils.duplicate(item));\n          return item;\n        });\n      })\n      .flat()\n      .sort((a, b) => {\n        return a.flags.ddbimporter.dndbeyond.displayOrder - b.flags.ddbimporter.dndbeyond.displayOrder;\n      });\n\n    classFeatureList.forEach((item) => {\n      // have we already processed an identical item?\n      if (!DDBFeatures.isDuplicateFeature(this._processed, item)) {\n        const existingFeature = DDBFeatures.getNameMatchedFeature(this.data, item);\n        const duplicateFeature = DDBFeatures.isDuplicateFeature(this.data, item);\n        if (existingFeature && !duplicateFeature) {\n          const levelAdjustment = `<h3>${className}: Level ${item.flags.ddbimporter.dndbeyond.requiredLevel}</h3>${item.system.description.value}`;\n          existingFeature.system.description.value += levelAdjustment;\n          existingFeature.effects.push(...item.effects);\n        } else if (!existingFeature) {\n          this.data.push(item);\n        }\n      }\n    });\n    this._processed.push(...this.featureList.class, ...classFeatureList);\n  }\n\n  _generateSubClassFeatures(klass) {\n    const subClassFeatureIds = klass.classFeatures\n      .filter((f) => f.definition.classId === klass.subclassDefinition.id)\n      .map((f) => f.definition.id);\n\n    const className = klass.definition.name;\n    const subClassName = `${className} : ${klass.subclassDefinition.name}`;\n\n    let subClassItems = [];\n\n    const subClassFeatures = klass.classFeatures.filter(\n      (feat) =>\n        subClassFeatureIds.includes(feat.definition.id)\n        && DDBFeatures.includedFeatureNameCheck(feat.definition.name)\n        && feat.definition.requiredLevel <= klass.level\n        && !this.excludedFeatures.includes(feat.definition.id)\n    );\n\n    const subClassFeatureList = subClassFeatures\n      .map((feat) => {\n        let items = this._getFeatures(feat, \"class\", subClassName);\n        return items.map((item) => {\n          item.flags.ddbimporter.dndbeyond.class = subClassName;\n          item.flags.obsidian.source.text = className;\n          foundry.utils.setProperty(item.flags, \"ddbimporter.class\", klass.definition.name);\n          foundry.utils.setProperty(item.flags, \"ddbimporter.classId\", klass.definition.id);\n          const subClass = foundry.utils.getProperty(klass, \"subclassDefinition\");\n          foundry.utils.setProperty(item.flags, \"ddbimporter.subclass\", subClass?.name);\n          foundry.utils.setProperty(item.flags, \"ddbimporter.subclassId\", subClass?.id);\n          // add feature to all features list\n          this.featureList.subClass.push(foundry.utils.duplicate(item));\n          return item;\n        });\n      })\n      .flat()\n      .sort((a, b) => {\n        return a.flags.ddbimporter.dndbeyond.displayOrder - b.flags.ddbimporter.dndbeyond.displayOrder;\n      });\n\n    // parse out duplicate features from class features\n    subClassFeatureList.forEach((item) => {\n      if (!DDBFeatures.isDuplicateFeature(this.featureList.class, item)) {\n        const existingFeature = DDBFeatures.getNameMatchedFeature(subClassItems, item);\n        const duplicateFeature = DDBFeatures.isDuplicateFeature(subClassItems, item);\n        if (existingFeature && !duplicateFeature) {\n          const levelAdjustment = `<h3>${subClassName}: At Level ${item.flags.ddbimporter.dndbeyond.requiredLevel}</h3>${item.system.description.value}`;\n          existingFeature.system.description.value += levelAdjustment;\n        } else if (!existingFeature) {\n          subClassItems.push(item);\n        }\n      }\n    });\n    // add features to list to indicate processed\n    this._processed.push(...this.featureList.subClass, ...subClassFeatureList);\n\n    // now we take the unique subclass features and add to class\n    subClassItems.forEach((item) => {\n      const existingFeature = DDBFeatures.getNameMatchedFeature(this.data, item);\n      const duplicateFeature = DDBFeatures.isDuplicateFeature(this.data, item);\n      if (existingFeature && !duplicateFeature) {\n        const levelAdjustment = `<h3>${subClassName}: At Level ${item.flags.ddbimporter.dndbeyond.requiredLevel}</h3>${item.system.description.value}`;\n        existingFeature.system.description.value += levelAdjustment;\n      } else if (!existingFeature) {\n        this.data.push(item);\n      }\n    });\n\n  }\n\n  build() {\n\n    // subclass features can often be duplicates of class features.\n    this.ddbData.character.classes.forEach((klass) => {\n      logger.debug(`Processing class features for ${klass.definition.name}`);\n      this._generateClassFeatures(klass);\n      // subclasses\n      if (klass.subclassDefinition && klass.subclassDefinition.classFeatures) {\n        logger.debug(`Processing subclass features for ${klass.subclassDefinition.name}`);\n        this._generateSubClassFeatures(klass);\n      }\n      logger.debug(`ddbClassFeatures for ${klass.definition.name}`, { ddbClassFeatures: this });\n    });\n    // return this.data;\n  }\n\n}\n","import DDBHelper from \"../../lib/DDBHelper.js\";\nimport utils from \"../../lib/utils.js\";\nimport logger from \"../../logger.js\";\nimport SETTINGS from \"../../settings.js\";\nimport DDBChoiceFeature from \"./DDBChoiceFeature.js\";\nimport DDBClassFeatures from \"./DDBClassFeatures.js\";\nimport DDBFeature from \"./DDBFeature.js\";\nimport { addExtraEffects, fixFeatures } from \"./fixes.js\";\n\n\nexport default class DDBFeatures {\n\n  constructor({ ddbCharacter, ddbData, rawCharacter = null } = {}) {\n    this.ddbCharacter = ddbCharacter;\n    this.ddbData = ddbData;\n    this.rawCharacter = rawCharacter;\n\n\n    this.excludedOriginFeatures = this.ddbData.character.optionalOrigins\n      .filter((f) => f.affectedRacialTraitId)\n      .map((f) => f.affectedRacialTraitId);\n\n    this.parsed = [];\n\n    this.data = [];\n  }\n\n  static LEGACY_SKIPPED_FEATURES = [\n    \"Hit Points\",\n    \"Languages\",\n    \"Bonus Proficiency\",\n    \"Bonus Proficiencies\",\n    \"Speed\",\n    \"Skills\",\n    \"Feat\",\n    \"Primal Knowledge\",\n    \"Creature Type\",\n  ];\n\n  static TASHA_VERSATILE = [\n    \"Martial Versatility\",\n    \"Bardic Versatility\",\n    \"Cantrip Versatility\",\n    \"Sorcerous Versatility\",\n    \"Eldritch Versatility\",\n  ];\n\n  static SKIPPED_FEATURES = [\n    \"Expertise\",\n    \"Darkvision\",\n  ];\n\n  static isDuplicateFeature(items, item) {\n    return items.some((dup) => dup.name === item.name && dup.system.description.value === item.system.description.value);\n  }\n\n  static getNameMatchedFeature(items, item) {\n    return items.find((dup) => dup.name === item.name && item.flags.ddbimporter.type === dup.flags.ddbimporter.type);\n  }\n\n  static includedFeatureNameCheck(featName) {\n    const includeTashaVersatile = game.settings.get(SETTINGS.MODULE_ID, \"character-update-include-versatile-features\");\n\n    const nameAllowed = !featName.startsWith(\"Proficiencies\")\n      && !featName.startsWith(\"Ability Score\")\n      && !featName.startsWith(\"Size\")\n      // && !featName.startsWith(\"Skills\")\n      && (includeTashaVersatile || (!includeTashaVersatile && !DDBFeatures.TASHA_VERSATILE.includes(featName)))\n      && !DDBFeatures.LEGACY_SKIPPED_FEATURES.includes(featName)\n      && !DDBFeatures.SKIPPED_FEATURES.includes(featName);\n\n    return nameAllowed;\n  }\n\n  async getFeaturesFromDefinition(featDefinition, type) {\n    const source = DDBHelper.parseSource(featDefinition);\n    const ddbFeature = new DDBFeature({\n      ddbData: this.ddbData,\n      ddbDefinition: featDefinition,\n      rawCharacter: this.rawCharacter,\n      type,\n      source,\n    });\n\n    ddbFeature.build();\n    logger.debug(`DDBFeatures.getFeaturesFromDefinition: ${ddbFeature.ddbDefinition.name}`, {\n      ddbFeature,\n      featDefinition,\n      this: this,\n    });\n    // only background features get advancements for now\n    if (type === \"background\") {\n      await ddbFeature.generateAdvancements();\n      await ddbFeature.buildBackgroundFeatAdvancements();\n    }\n    if (ddbFeature.isChoiceFeature) {\n      return DDBChoiceFeature.buildChoiceFeatures(ddbFeature);\n    } else {\n      return [ddbFeature.data];\n    }\n  }\n\n  async _buildRacialTraits() {\n    logger.debug(\"Parsing racial traits\");\n    const traits = this.ddbData.character.race.racialTraits\n      .filter(\n        (trait) => DDBFeatures.includedFeatureNameCheck(trait.definition.name)\n          && !trait.definition.hideInSheet\n          && !this.excludedOriginFeatures.includes(trait.definition.id)\n      );\n\n    for (const feat of traits) {\n      const features = await this.getFeaturesFromDefinition(feat, \"race\");\n      features.forEach((item) => {\n        const existingFeature = DDBFeatures.getNameMatchedFeature(this.parsed, item);\n        const duplicateFeature = DDBFeatures.isDuplicateFeature(this.parsed, item);\n        if (existingFeature && !duplicateFeature) {\n          existingFeature.system.description.value += `<h3>Racial Trait Addition</h3>${item.system.description.value}`;\n        } else if (!existingFeature) {\n          this.parsed.push(item);\n        }\n      });\n    };\n  }\n\n  async _buildOptionalClassFeatures({ requireLevel = true } = {}) {\n    // optional class features\n    logger.debug(\"Parsing optional class features\");\n    if (this.ddbData.classOptions) {\n      const options = this.ddbData.classOptions\n        .filter((feat) => {\n          if (!requireLevel || !foundry.utils.hasProperty(feat, \"requiredLevel\")) return true;\n          const requiredLevel = foundry.utils.getProperty(feat, \"requiredLevel\");\n          const klass = this.ddbData.character.classes.find((cls) => cls.definition.id === feat.classId\n            || cls.subclassDefinition?.id === feat.classId);\n          if (!klass) {\n            logger.info(`Unable to determine class for optional feature ${feat.name}, you might not have a suitable subclass`, { feat, this: this, requiredLevel });\n            return false;\n          }\n          return klass.level >= requiredLevel;\n        })\n        .filter((feat) => DDBFeatures.includedFeatureNameCheck(feat.name));\n      for (const feat of options) {\n        logger.debug(`Parsing Optional Feature ${feat.name}`);\n        const feats = await this.getFeaturesFromDefinition(feat, \"class\");\n        this.parsed.push(...feats);\n      };\n    }\n  }\n\n  async _buildClassFeatures() {\n    logger.debug(\"Parsing class and subclass features\");\n    this._ddbClassFeatures = new DDBClassFeatures({\n      ddbData: this.ddbData,\n      rawCharacter: this.rawCharacter,\n    });\n    this._ddbClassFeatures.build();\n    await this._buildOptionalClassFeatures();\n\n    logger.debug(\"ddbClassFeatures._buildClassFeatures\", {\n      ddbClassFeature: this._ddbClassFeatures,\n      this: this,\n    });\n\n    // now we loop over class features and add to list, removing any that match racial traits, e.g. Darkvision\n    logger.debug(\"Removing matching traits\");\n    this._ddbClassFeatures.data\n      .forEach((item) => {\n        const existingFeature = DDBFeatures.getNameMatchedFeature(this.parsed, item);\n        const duplicateFeature = DDBFeatures.isDuplicateFeature(this.parsed, item);\n        if (existingFeature && !duplicateFeature) {\n          const klassAdjustment = `<h3>${item.flags.ddbimporter.dndbeyond.class}</h3>${item.system.description.value}`;\n          existingFeature.system.description.value += klassAdjustment;\n        } else if (!existingFeature) {\n          this.parsed.push(item);\n        }\n      });\n  }\n\n  async _addFeats() {\n    // add feats\n    logger.debug(\"Parsing feats\");\n    for (const feat of this.ddbData.character.feats) {\n      const feats = await this.getFeaturesFromDefinition(feat, \"feat\");\n      this.parsed.push(...feats);\n    };\n  }\n\n  async _addBackground() {\n    logger.debug(\"Parsing background\");\n    const backgroundFeature = this.ddbCharacter.getBackgroundData();\n    const backgroundFeats = await this.getFeaturesFromDefinition(backgroundFeature, \"background\");\n    this.parsed.push(...backgroundFeats);\n  }\n\n  _setLevelScales() {\n    this.parsed.forEach((feature) => {\n      const featureName = utils.referenceNameString(feature.name).toLowerCase();\n      const scaleKlass = this.ddbCharacter.raw.classes.find((klass) =>\n        klass.system.advancement\n          .some((advancement) => advancement.type === \"ScaleValue\"\n            && advancement.configuration.identifier === featureName\n          ));\n\n      if (scaleKlass) {\n        const identifier = utils.referenceNameString(scaleKlass.system.identifier).toLowerCase();\n        if (foundry.utils.hasProperty(feature, \"system.damage.parts\") && feature.system.damage.parts.length > 0) {\n          feature.system.damage.parts[0][0] = `@scale.${identifier}.${featureName}`;\n        } else {\n          foundry.utils.setProperty(feature, \"system.damage.parts\", [[`@scale.${identifier}.${featureName}`]]);\n        }\n      }\n    });\n  }\n\n  fixAcEffects() {\n    for (const feature of this.parsed) {\n      logger.debug(`Checking ${feature.name} for AC effects`);\n      for (const effect of (feature.effects ?? [])) {\n        if (\n          ![\"Natural\", \"Unarmored Defense\", \"Custom\", \"Unarmored\"].includes(this.ddbCharacter.armor.results.maxType)\n          && (\n            (effect.changes.length === 2\n            && effect.changes.some((change) => change.key === \"system.attributes.ac.formula\")\n            && effect.changes.some((change) => change.key === \"system.attributes.ac.calc\"))\n            || (effect.changes.length === 1\n              && effect.changes.some((change) => change.key === \"system.attributes.ac.calc\"))\n          )\n        ) {\n          effect.disabled = true;\n        }\n      }\n    }\n  }\n\n  async build() {\n    await this._buildRacialTraits();\n    await this._buildClassFeatures();\n    await this._addFeats();\n    await this._addBackground();\n\n    this._setLevelScales();\n\n    await fixFeatures(this.parsed);\n    this.fixAcEffects();\n    this.data = await addExtraEffects(this.ddbData, this.parsed, this.rawCharacter);\n  }\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport logger from \"../../logger.js\";\nimport DDBAction from \"./DDBAction.js\";\nimport DDBAttackAction from \"./DDBAttackAction.js\";\nimport DDBFeatures from \"./DDBFeatures.js\";\nimport { addExtraEffects, fixFeatures } from \"./fixes.js\";\n\nexport default class CharacterFeatureFactory {\n\n  constructor(ddbCharacter) {\n    this.ddbCharacter = ddbCharacter;\n    this.ddbData = ddbCharacter.source.ddb;\n    this.rawCharacter = ddbCharacter.raw.character;\n\n    this.parsed = {\n      actions: [],\n      features: [],\n    };\n\n    this.processed = {\n      actions: [],\n      features: [],\n    };\n\n    this.data = [];\n  }\n\n\n  _getCustomActions(displayedAsAttack) {\n    const customActions = this.ddbData.character.customActions\n      .filter((action) => action.displayAsAttack === displayedAsAttack)\n      .map((action) => {\n        action.dice = {\n          diceString: action.diceCount && action.diceType ? `${action.diceCount}d${action.diceType}` : null,\n          fixedValue: action.fixedValue,\n        };\n\n        const range = {\n          aoeType: action.aoeType,\n          aoeSize: action.aoeSize,\n          range: action.range,\n          long: action.longRange,\n        };\n        action.range = range;\n\n        if (action.statId) action.abilityModifierStatId = action.statId;\n\n        action.activation = {\n          activationTime: action.activationTime,\n          activationType: action.activationType,\n        };\n\n        action.isCustomAction = true;\n\n        return action;\n      });\n\n    return customActions;\n  }\n\n\n  /**\n   * Everyone has an Unarmed Strike\n   */\n  getUnarmedStrike(overrides = {}) {\n    const unarmedStrikeMock = CONFIG.DDB.naturalActions[0];\n    unarmedStrikeMock.displayAsAttack = true;\n    const strikeMock = Object.assign(unarmedStrikeMock, overrides);\n\n    const unarmedStrikeAction = new DDBAttackAction({ ddbData: this.ddbData, ddbDefinition: strikeMock, rawCharacter: this.rawCharacter });\n    unarmedStrikeAction.build();\n\n    // console.warn(`unarmedStrikeAction for Unarmed strike`, unarmedStrikeAction);\n    return unarmedStrikeAction.data;\n  }\n\n  _generateUnarmedStrikeAction(overrides = {}) {\n    this.parsed.actions.push(this.getUnarmedStrike(overrides));\n  }\n\n\n  _generateAttackActions() {\n    const attackActions = [\n      // do class options here have a class id, needed for optional class features\n      this.ddbData.character.actions.class\n        .filter((action) => DDBHelper.findClassByFeatureId(this.ddbData, action.componentId))\n        .map((t) => {\n          t.actionSource = \"class\";\n          return t;\n        }),\n      this.ddbData.character.actions.race.map((t) => {\n        t.actionSource = \"race\";\n        return t;\n      }),\n      this.ddbData.character.actions.feat.map((t) => {\n        t.actionSource = \"feat\";\n        return t;\n      }),\n      this._getCustomActions(true),\n    ]\n      .flat()\n      .filter((action) => DDBHelper.displayAsAttack(this.ddbData, action, this.rawCharacter))\n      .map((action) => {\n        const ddbAttackAction = new DDBAttackAction({ ddbData: this.ddbData, ddbDefinition: action, rawCharacter: this.rawCharacter, type: action.actionSource });\n        ddbAttackAction.build();\n\n        // console.warn(`ddbAttackAction for ${action.name}`, ddbAttackAction);\n        return ddbAttackAction.data;\n      });\n    logger.debug(\"attack actions\", attackActions);\n    this.parsed.actions = this.parsed.actions.concat(attackActions);\n  }\n\n\n  actionParsed(actionName) {\n    // const attacksAsFeatures = game.settings.get(\"ddb-importer\", \"character-update-policy-use-actions-as-features\");\n    const exists = this.parsed.actions.some((attack) => attack.name === actionName);\n    return exists;\n    // return attacksAsFeatures && exists;\n  }\n\n  _generateOtherActions() {\n    const otherActions = [\n      // do class options here have a class id, needed for optional class features\n      this.ddbData.character.actions.class.filter((action) => DDBHelper.findClassByFeatureId(this.ddbData, action.componentId)),\n      this.ddbData.character.actions.race,\n      this.ddbData.character.actions.feat,\n      this._getCustomActions(false),\n    ]\n      .flat()\n      .filter((action) => action.name && action.name !== \"\")\n      .filter(\n        (action) => {\n          const name = DDBHelper.getName(this.ddbData, action, this.rawCharacter);\n          // const displayAsAttack = DDBHelper.displayAsAttack(this.ddbData, action, this.rawCharacter);\n          // lets grab other actions and add, make sure we don't get attack based ones that haven't parsed\n          return !this.actionParsed(name);\n        }\n      )\n      .map((action) => {\n        logger.debug(`Getting Other Action ${action.name}`);\n\n        const ddbAction = new DDBAction({ ddbData: this.ddbData, ddbDefinition: action, rawCharacter: this.rawCharacter });\n        ddbAction.build();\n        // console.warn(`ddbAction for ${action.name}`, ddbAction);\n\n        return ddbAction.data;\n      });\n\n    logger.debug(\"other actions\", otherActions);\n    this.parsed.actions = this.parsed.actions.concat(otherActions);\n  }\n\n  async processActions() {\n    this._generateAttackActions();\n    this._generateUnarmedStrikeAction();\n    this._generateOtherActions();\n\n    this.processed.actions = foundry.utils.duplicate(this.parsed.actions);\n\n    this.processed.actions.sort().sort((a, b) => {\n      if (!a.system.activation.activationType) {\n        return 1;\n      } else if (!b.system.activation.activationType) {\n        return -1;\n      } else {\n        const aActionTypeID = DICTIONARY.actions.activationTypes.find(\n          (type) => type.value === a.system.activation.activationType\n        ).id;\n        const bActionTypeID = DICTIONARY.actions.activationTypes.find(\n          (type) => type.value === b.system.activation.activationType\n        ).id;\n        if (aActionTypeID > bActionTypeID) {\n          return 1;\n        } else if (aActionTypeID < bActionTypeID) {\n          return -1;\n        } else {\n          return 0;\n        }\n      }\n    });\n\n    await fixFeatures(this.processed.actions);\n    this.processed.actions = await addExtraEffects(this.ddbData, this.processed.actions, this.rawCharacter);\n    this.updateIds(\"actions\");\n    this.data.push(...this.processed.actions);\n  }\n\n  updateIds(type) {\n    this.ddbCharacter.updateItemIds(this.processed[type]);\n  }\n\n  async processFeatures() {\n    const ddbFeatures = new DDBFeatures({\n      ddbCharacter: this.ddbCharacter,\n      ddbData: this.ddbData,\n      rawCharacter: this.rawCharacter,\n    });\n\n    await ddbFeatures.build();\n    this.processed.features = ddbFeatures.data;\n    this.updateIds(\"features\");\n    this.data.push(...ddbFeatures.data);\n  }\n\n  #itemGrantLink(feature, advancementIndex) {\n    // \"added\": {\n    //   \"TlT20Gh1RofymIDY\": \"Compendium.dnd5e.classfeatures.Item.u4NLajXETJhJU31v\",\n    //   \"2PZlmOVkOn2TbR1O\": \"Compendium.dnd5e.classfeatures.Item.hpLNiGq7y67d2EHA\"\n    // }\n    const linkingData = foundry.utils.getProperty(feature, \"flags.ddbimporter.advancementLink\");\n    const advancement = feature.system.advancement[advancementIndex];\n    const dataLink = linkingData.find((d) => d._id === advancement._id);\n\n    if (!dataLink || !linkingData || !advancement) {\n      logger.warn(`Advancement for ${feature.name} (idx ${advancementIndex}) missing required data for linking`, {\n        advancement,\n        linkingData,\n        dataLink,\n      });\n      return;\n    }\n\n    const added = {};\n    for (const [advancementFeatureName, uuid] of Object.entries(dataLink.features)) {\n      logger.debug(`Advancement ${advancement._id} searching for Feature ${advancementFeatureName} (${uuid})`, {\n        advancement,\n        advancementFeatureName,\n        uuid,\n      });\n\n      const characterFeature = this.ddbCharacter.getDataFeature(advancementFeatureName);\n      if (characterFeature) {\n        logger.debug(`Advancement ${advancement._id} found Feature ${advancementFeatureName} (${uuid})`);\n        added[characterFeature._id] = uuid;\n        foundry.utils.setProperty(characterFeature, \"flags.dnd5e.sourceId\", uuid);\n        foundry.utils.setProperty(characterFeature, \"flags.dnd5e.advancementOrigin\", `${feature._id}.${advancement._id}`);\n      }\n    }\n\n    if (Object.keys(added).length > 0) {\n      advancement.value = {\n        added,\n      };\n      feature.system.advancement[advancementIndex] = advancement;\n    }\n  }\n\n  #addGenericAdvancementOrigins(types = [\"actions\", \"features\"]) {\n    for (const type of types) {\n      for (const feature of this.ddbCharacter.data[type]) {\n        // eslint-disable-next-line no-continue\n        if (foundry.utils.hasProperty(feature, \"flags.dnd5e.advancementOrigin\")) continue;\n        const typeFlag = foundry.utils.getProperty(feature, \"flags.ddbimporter.type\");\n        if (typeFlag == \"race\" && foundry.utils.hasProperty(this.ddbCharacter, \"data.race._id\")) {\n          foundry.utils.setProperty(feature, \"flags.dnd5e.advancementOrigin\", `${this.ddbCharacter.data.race._id}`);\n        } else if (typeFlag === \"background\") {\n          const background = this.ddbCharacter.data.features.find((b) => b.type === \"background\");\n          if (background) {\n            foundry.utils.setProperty(feature, \"flags.dnd5e.advancementOrigin\", `${background._id}`);\n          }\n        } else if (typeFlag === \"class\" && foundry.utils.hasProperty(feature, \"flags.ddbimporter.class\")) {\n          const klass = this.ddbCharacter.data.classes.find((k) => k.name === foundry.utils.getProperty(feature, \"flags.ddbimporter.class\"));\n          if (klass) {\n            foundry.utils.setProperty(feature, \"flags.dnd5e.advancementOrigin\", `${klass._id}`);\n          }\n        }\n      }\n    }\n  }\n\n  linkFeatures(types = [\"actions\", \"features\"]) {\n    logger.debug(\"Linking Feature Factory Advancements to Features\", {\n      CharacterFeatureFactory: this,\n      types,\n    });\n    for (const type of types) {\n      for (const feature of this.ddbCharacter.data[type]) {\n        const linkingData = foundry.utils.getProperty(feature, \"flags.ddbimporter.advancementLink\");\n        if (linkingData) {\n          logger.debug(\"Linking Advancements to Features\", {\n            feature,\n            linkingData,\n          });\n          for (let idx = 0; idx < feature.system.advancement.length; idx++) {\n            const a = feature.system.advancement[idx];\n            const dataLink = linkingData.find((d) => d._id === a._id);\n            // eslint-disable-next-line max-depth\n            if (a.type === \"ItemGrant\" && dataLink) {\n              this.#itemGrantLink(feature, idx);\n            }\n          }\n        }\n      }\n    }\n    this.#addGenericAdvancementOrigins(types);\n  }\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport { addSimpleConditionEffect, baseEnchantmentEffect, generateEffects } from \"../../effects/effects.js\";\n// import CompendiumHelper from \"../../lib/CompendiumHelper.js\";\nimport { DDBCompendiumFolders } from \"../../lib/DDBCompendiumFolders.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBItemImporter from \"../../lib/DDBItemImporter.js\";\nimport { parseDamageRolls, parseTags } from \"../../lib/DDBReferenceLinker.js\";\nimport utils from \"../../lib/utils.js\";\nimport logger from \"../../logger.js\";\nimport DDBAction from \"./DDBAction.js\";\nimport DDBAttackAction from \"./DDBAttackAction.js\";\nimport { addExtraEffects } from \"./fixes.js\";\n\nexport class DDBInfusion {\n\n  _init() {\n    logger.debug(`Generating Infusion Feature ${this.ddbInfusion.name}`);\n  }\n\n  _generateDataStub() {\n\n    this.data = {\n      _id: utils.namedIDStub(this.name, { postfix: this.nameIdPostfix }),\n      name: utils.nameString(`Infusion: ${this.name}`),\n      type: this.documentType,\n      system: utils.getTemplate(this.documentType),\n      effects: [],\n      flags: {\n        ddbimporter: {\n          id: this.ddbInfusion.id,\n          infusionId: this.ddbInfusion.id,\n          class: \"Artificer\",\n          infusionFeature: true,\n          type: this.tagType,\n          dndbeyond: {\n            defintionKey: this.ddbInfusion.definitionKey,\n            requiredLevel: this.ddbInfusion.level,\n            modifierType: this.ddbInfusion.modifierDataType,\n            type: this.ddbInfusion.type,\n            requiresAttunement: this.ddbInfusion.requiresAttunement,\n            allowDuplicates: this.ddbInfusion.allowDuplicates,\n          },\n        },\n      }\n    };\n\n    this.requiredLevel = null;\n    const requiredLevel = foundry.utils.getProperty(this.ddbInfusion, \"level\");\n    if (Number.isInteger(Number.parseInt(requiredLevel))) {\n      this.data.system.prerequisites = {\n        level: Number.parseInt(requiredLevel),\n      };\n      this.requiredLevel = Number.parseInt(requiredLevel);\n    }\n\n    this.data.system.consume = {\n      type: \"charges\",\n      target: \"\",\n      amount: \"1\",\n      scale: false,\n    };\n    this.data.system.enchantment = {\n      items: {\n        max: \"\",\n        period: \"\",\n      },\n      restrictions: {\n        type: \"\",\n        allowMagical: false\n      },\n      classIdentifier: \"\",\n    };\n    this.data.system.source = DDBHelper.parseSource(this.ddbInfusion);\n    this.data.system.activation.type = \"none\";\n    if (this.requiredLevel && this.requiredLevel > 1) {\n      this.data.system.requirements = ` ${utils.ordinalSuffixOf(this.requiredLevel)}-level Artificer`;\n    }\n  }\n\n  constructor({ ddbData, ddbInfusion, documentType = \"feat\", rawCharacter = null, noMods = false, addToCompendium = true, nameIdPostfix = null } = {}) {\n    this.ddbData = ddbData;\n    this.rawCharacter = rawCharacter;\n    this.ddbInfusion = ddbInfusion;\n    this.name = utils.nameString(this.ddbInfusion.name);\n    this.type = \"feat\";\n    this.isAction = false;\n    this.documentType = documentType;\n    this.tagType = \"infusion\";\n    this.data = {};\n    this.actions = [];\n    this.grantedItems = [];\n    this.noMods = noMods;\n    this.idNames = [];\n    this.compendium = null;\n    this.snippet = \"\";\n    this._init();\n    this._generateDataStub();\n    this.addToCompendium = addToCompendium;\n    this.nameIdPostfix = nameIdPostfix;\n  }\n\n  _buildDescription() {\n    this.snippet = this.ddbInfusion.snippet ? this.ddbInfusion.snippet : \"\";\n    const chatAdd = game.settings.get(\"ddb-importer\", \"add-description-to-chat\");\n    const itemText = foundry.utils.getProperty(this.ddbInfusion, \"itemRuleData.text\");\n    const prerequisitesHeader = this.requiredLevel && this.requiredLevel > 1\n      ? `<p><i>Prerequisites: ${utils.ordinalSuffixOf(this.requiredLevel)}-level Artificer</i></p>`\n      : \"\";\n    const itemHeader = itemText\n      ? `<p><i>Item: ${itemText}</i></p>`\n      : \"\";\n\n    const valueDamageText = parseDamageRolls({ text: this.ddbInfusion.description, document: this.data, actor: null });\n    const chatDamageText = chatAdd ? parseDamageRolls({ text: this.snippet, document: this.data, actor: null }) : \"\";\n    this.data.system.description = {\n      value: parseTags(prerequisitesHeader + itemHeader + valueDamageText),\n      chat: chatAdd ? parseTags(chatDamageText) : \"\",\n    };\n  }\n\n  _generateSystemType() {\n    foundry.utils.setProperty(this.data, \"system.type.value\", \"enchantment\");\n    foundry.utils.setProperty(this.data, \"system.type.subtype\", \"artificerInfusion\");\n  }\n\n  _generateEnchantmentType() {\n    if (this.ddbInfusion.type === \"replicate\") {\n      foundry.utils.setProperty(this.data, \"system.enchantment.restrictions.allowMagical\", true);\n    }\n    let type = \"\";\n    const itemRule = foundry.utils.getProperty(this.ddbInfusion, \"itemRuleData.text\");\n    if (!itemRule) return;\n    if (itemRule.includes(\"weapon\")) type = \"weapon\";\n    else if (itemRule.includes(\"armor\")) type = \"equipment\";\n    else if (itemRule.includes(\"shield\")) type = \"equipment\";\n    else if (itemRule.includes(\"gem\")) type = \"loot\";\n    // tool, equipment, consumable, loot, container, weapon\n    foundry.utils.setProperty(this.data, \"system.enchantment.restrictions.type\", type);\n  }\n\n  _generateActionType() {\n    if ([\"augment\", \"replicate\"].includes(this.ddbInfusion.type)) {\n      this.data.system.actionType = \"ench\";\n    } else if (this.ddbInfusion.type === \"creature\") {\n      this.data.system.actionType = \"summon\";\n      this.data.system.activation = {\n        type: \"action\",\n        cost: 1,\n      };\n    }\n  }\n\n  async compendiumInit() {\n    this.compendiumFolders = new DDBCompendiumFolders(\"features\");\n    await this.compendiumFolders.loadCompendium(\"features\");\n  }\n\n  async addInfusionsToCompendium(documents) {\n    const featureHandlerOptions = {\n      chrisPremades: false,\n      deleteBeforeUpdate: false,\n      removeSRDDuplicates: false,\n      filterDuplicates: false,\n      matchFlags: [\"infusionId\"],\n      useCompendiumFolders: true,\n    };\n\n    logger.debug(`Creating infusion compendium feature`, {\n      documents,\n      featureHandlerOptions,\n      addToCompendium: this.addToCompendium,\n      this: this,\n    });\n    const featureHandler = this.addToCompendium\n      ? await DDBItemImporter.buildHandler(\"features\", documents, true, featureHandlerOptions)\n      : new DDBItemImporter(\"features\", documents, featureHandlerOptions);\n    await featureHandler.buildIndex({\n      fields: [\n        \"name\",\n        \"flags.ddbimporter.classId\",\n        \"flags.ddbimporter.class\",\n        \"flags.ddbimporter.subClass\",\n        \"flags.ddbimporter.parentClassId\",\n        \"flags.ddbimporter.featureName\",\n        \"flags.ddbimporter.infusionId\",\n      ],\n    });\n    const compendiumFeatures = await featureHandler.compendiumIndex.filter((i) =>\n      featureHandler.documents.some((orig) => i.name === orig.name)\n    );\n    return compendiumFeatures;\n  }\n\n  _buildActions() {\n    // build actions fomr this.ddbInfusion.actions\n    // for example radiant weapon reaction\n    if (!this.ddbInfusion.actions) return;\n\n    for (const actionData of this.ddbInfusion.actions) {\n      // const itemLookup = ddb.infusions.item.find((mapping) => mapping.definitionKey === infusionDetail.definitionKey);\n      if (!actionData.name) {\n        const activationType = foundry.utils.getProperty(actionData, \"activation.activationType\");\n        const postfix = [3, 4].includes(activationType)\n          ? ` (${utils.capitalize(DICTIONARY.actions.activationTypes.find((a) => a.id === activationType).value)})`\n          : \"\";\n        actionData.name = `${this.name}${postfix}`;\n      }\n      const action = DDBHelper.displayAsAttack(this.ddbData, actionData, this.rawCharacter)\n        ? new DDBAttackAction({ ddbData: this.ddbData, ddbDefinition: actionData, rawCharacter: this.rawCharacter, type: actionData.actionSource })\n        : new DDBAction({ ddbData: this.ddbData, ddbDefinition: actionData, rawCharacter: this.rawCharacter });\n      action.build();\n      foundry.utils.setProperty(action.data, \"flags.ddbimporter.class\", \"Artificer\");\n      foundry.utils.setProperty(action.data, \"flags.ddbimporter.infusionFeature\", true);\n      foundry.utils.setProperty(action.data, \"flags.ddbimporter.infusionId\", actionData.id);\n      action._id = utils.namedIDStub(actionData.name);\n      this.actions.push(action.data);\n    }\n    logger.debug(`Generated Infusions Actions`, this.actions);\n  }\n\n  async _addActionsToEffects() {\n    if (this.actions.length === 0) return;\n    const cItems = await this.addInfusionsToCompendium(this.actions);\n    if (cItems.length === 0) return;\n\n    const descriptions = this.ddbInfusion.actions.map((i) => `[[/item ${i.name}]]`);\n\n    const uuids = cItems.map((i) => i.uuid);\n    this.data.effects.forEach((e) => {\n      if (e.flags.ddbimporter?.infusion) e.flags.dnd5e.enchantment.riders.item.push(...uuids);\n      e.changes.push({\n        key: \"system.description.value\",\n        mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n        value: `<hr> <br><h2>Infusion Actions</h2><p> ${descriptions.join(\", \")} </p>`,\n      });\n    });\n  }\n\n  _specials() {\n    // handle special cases\n    // e.g. radiant weapon blindness effect\n\n    switch (this.name) {\n      // example\n      case \"Radiant Weapon\": {\n        break;\n      }\n      // case \"Spell-Refueling Ring\": {\n      //   const macroText = `<br><p>[[/ddbifunc functionName=\"spellRefuelingRing\" functionType=\"item\"]]{Spell Refueling Macro}</div></p>`;\n      //   this.data.system.description.value += macroText;\n      //   if (this.data.system.description.chat !== \"\") this.data.system.description.chat += macroText;\n      //   break;\n      // }\n      // no default\n    }\n\n\n    for (let action of this.actions) {\n      const name = foundry.utils.getProperty(action, \"flags.ddbimporter.originalName\") ?? action.name;\n      switch (name) {\n        case \"Radiant Weapon (Reaction)\": {\n          action = addSimpleConditionEffect(action, \"Blinded\", { transfer: false });\n          break;\n        }\n        case \"Spell-Refueling Ring (Reaction)\": {\n          const macroText = `<br><p>[[/ddbifunc functionName=\"spellRefuelingRing\" functionType=\"item\"]]{Spell Refueling Macro}</div></p>`;\n          action.system.description.value += macroText;\n          if (action.system.description.chat !== \"\") this.data.system.description.chat += macroText;\n          break;\n        }\n        // no default\n      }\n    }\n\n  }\n\n  _getEnchantmentEffect(modifierData, { useModifierLabelName = false, useOrigin = false } = {}) {\n    const label = modifierData.name ?? this.name;\n    const foundryItem = foundry.utils.deepClone(this.data);\n    foundryItem.effects = [];\n    const effect = baseEnchantmentEffect(foundryItem, label, {\n      origin: useOrigin ? `Item.${this.data._id}` : null,\n    });\n    effect.flags.ddbimporter.infusion = true;\n    const modifiers = foundry.utils.deepClone(modifierData.modifiers) ?? [];\n    const modifierItem = {\n      definition: {\n        name: this.name,\n        grantedModifiers: modifiers.filter((mod) =>\n          !(mod.type === \"bonus\" && mod.subType === \"armor-class\")\n          && !(mod.type === \"bonus\" && mod.subType === \"magic\")\n        ),\n      },\n    };\n\n    const mockItem = generateEffects({\n      ddb: this.ddbData,\n      character: this.rawCharacter,\n      ddbItem: modifierItem,\n      foundryItem,\n      isCompendiumItem: this.noMods,\n      type: \"infusion\",\n      description: this.snippet,\n    });\n    if (mockItem.effects.length > 0) effect.changes = mockItem.effects.map((e) => e.changes).flat(1);\n\n    effect.changes.push(...this._getMagicBonusChanges(modifiers));\n\n    if (this.ddbInfusion.requiresAttunement) {\n      effect.changes.push({\n        key: \"system.attunement\",\n        mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n        value: \"required\",\n      });\n    }\n\n    const nameLabel = this.ddbInfusion.type === \"replicate\"\n      ? `: Replicated [Infusion]`\n      : `: ${useModifierLabelName ? label : this.name} [Infusion]`;\n    effect.changes.push(\n      {\n        key: \"name\",\n        mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n        value: nameLabel,\n        priority: 20,\n      }\n    );\n    return effect;\n  }\n\n  _generateEnchantmentStubEffect() {\n    const useModifierLabelName = [\"damage-type-choice\"].includes(this.ddbInfusion.modifierDataType);\n    const effect = this._getEnchantmentEffect([], {\n      useModifierLabelName,\n    });\n    this.data.effects.push(effect);\n  }\n\n  _addDescriptionToEffect(effect) {\n    effect.changes.push({\n      key: \"system.description.value\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: `<hr> <br> ${this.ddbInfusion.description}`,\n    });\n  }\n\n  _generateEnchantmentEffects() {\n    const useModifierLabelName = [\"damage-type-choice\"].includes(this.ddbInfusion.modifierDataType);\n    for (const [index, effectData] of this.ddbInfusion.modifierData.entries()) {\n      const effect = this._getEnchantmentEffect(effectData, {\n        useModifierLabelName,\n      });\n\n      switch (this.ddbInfusion.modifierDataType) {\n        case \"class-level\": {\n          const minLevel = effectData.value;\n          const maxLevel = index < this.ddbInfusion.modifierData.length - 1\n            ? (this.ddbInfusion.modifierData[index + 1].value ?? null)\n            : null;\n          const level = {\n            min: minLevel,\n            max: maxLevel,\n          };\n          foundry.utils.setProperty(effect, \"flags.dnd5e.enchantment.level\", level);\n          effect.description = this.ddbInfusion.snippet;\n          this._addDescriptionToEffect(effect);\n          break;\n        }\n        case \"granted\": {\n          effect.description = this.ddbInfusion.snippet;\n          this._addDescriptionToEffect(effect);\n          break;\n        }\n        case \"damage-type-choice\": {\n          effect.description = this.ddbInfusion.snippet;\n          this._addDescriptionToEffect(effect);\n          break;\n        }\n        default: {\n          this._addDescriptionToEffect(effect);\n          logger.debug(`Infusion ${this.name} has no additional config`);\n        }\n      }\n\n      this.data.effects.push(effect);\n    }\n\n  }\n\n  _getMagicBonusChanges(modifiers) {\n    const filteredModifiers = DDBHelper.filterModifiersOld(modifiers, \"bonus\", \"magic\");\n    const magicBonus = DDBHelper.getModifierSum(filteredModifiers, this.rawCharacter);\n\n    const acFilteredModifiers = DDBHelper.filterModifiersOld(modifiers, \"bonus\", \"armor-class\");\n    const acMagicalBonus = DDBHelper.getModifierSum(acFilteredModifiers, this.rawCharacter);\n\n    const changes = [];\n    if (magicBonus && magicBonus !== 0 && magicBonus !== \"\") {\n      changes.push(\n        {\n          key: \"system.magicalBonus\",\n          mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n          value: magicBonus,\n          priority: 20,\n        },\n      );\n    }\n    if (acMagicalBonus && acMagicalBonus !== 0 && acMagicalBonus !== \"\") {\n      changes.push(\n        {\n          key: \"system.armor.magicalBonus\",\n          mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n          value: acMagicalBonus,\n          priority: 20,\n        },\n      );\n    }\n\n    // all items infused become magical\n    changes.push({\n      key: \"system.properties\",\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: \"mgc\",\n      priority: 20,\n    });\n    return changes;\n  }\n\n  _generateEnchantments() {\n    if ((this.data.system.actionType !== \"ench\")) return;\n\n    this._generateEnchantmentEffects();\n\n    switch (this.ddbInfusion.modifierDataType) {\n      case \"granted\":\n      default: {\n        if (this.data.effects.length === 0) this._generateEnchantmentStubEffect();\n      }\n    }\n  }\n\n  async _addExtraEffects() {\n    this.data = await addExtraEffects(this.ddbData, [this.data], this.rawCharacter)[0];\n    this.actions = await addExtraEffects(this.ddbData, this.actions, this.rawCharacter);\n  }\n\n  // _generateSummons() {\n  //   // summons are generated elsewhere and linked to the feature, not handled her.\n  // }\n\n  async build() {\n    await this.compendiumInit();\n    this._generateSystemType();\n    this._generateEnchantmentType();\n    this._generateActionType();\n    this._buildDescription();\n    this._generateEnchantments();\n    this._buildActions();\n    this._specials();\n    // await this._addExtraEffects();\n    await this._addActionsToEffects();\n\n    await this.addInfusionsToCompendium([this.data]);\n\n    logger.debug(`DDBInfusions for ${this.name}`, {\n      data: foundry.utils.deepClone(this.data),\n      actions: foundry.utils.deepClone(this.actions),\n      this: this,\n    });\n  }\n\n}\n","import DDBHelper from \"../../lib/DDBHelper.js\";\nimport utils from \"../../lib/utils.js\";\nimport logger from \"../../logger.js\";\nimport { DDBInfusion } from \"./DDBInfusion.js\";\n\nexport class DDBInfusionFactory {\n\n  constructor(ddbCharacter) {\n    this.ddbCharacter = ddbCharacter;\n    this.ddbData = ddbCharacter.source.ddb;\n    this.rawCharacter = ddbCharacter.raw.character;\n\n    this.processed = {\n      actions: [],\n      infusions: [],\n    };\n\n    this.infusionCount = {\n\n    };\n  }\n\n\n  _getInfusionCount(name) {\n    if (!this.infusionCount[name]) {\n      this.infusionCount[name] = 0;\n    }\n    return ++this.infusionCount[name];\n  }\n\n  updateIds(type) {\n    this.ddbCharacter.updateItemIds(this.processed[type]);\n  }\n\n  async processInfusions() {\n    logger.debug(\"Parsing infusions\");\n    for (const infusion of (foundry.utils.getProperty(this.ddbData, \"infusions.infusions.definitionData\") ?? [])) {\n      const infusionNum = Number.parseInt(this._getInfusionCount(infusion.name));\n      const addToCompendium = infusionNum === 1;\n      // console.warn(`Infusion ${infusionNum}: ${infusion.name}`, {\n      //   addToCompendium,\n      // });\n      const ddbInfusion = new DDBInfusion({\n        ddbData: this.ddbData,\n        ddbInfusion: infusion,\n        rawCharacter: this.rawCharacter,\n        nameIdPostfix: infusionNum > 1 ? infusionNum : null,\n        addToCompendium,\n      });\n      await ddbInfusion.build();\n      logger.debug(`DDBInfusion: ${ddbInfusion.ddbInfusion.name}`, {\n        ddbInfusion,\n        infusion,\n        this: this,\n      });\n      this.processed.infusions.push(ddbInfusion.data);\n      this.processed.actions.push(...ddbInfusion.actions);\n    }\n    this.updateIds(\"infusions\");\n    this.updateIds(\"actions\");\n  }\n\n\n  _getInfusionItemMap(item) {\n    const infusionDetails = foundry.utils.getProperty(this.ddbData, \"infusions\");\n    if (!infusionDetails?.item) return undefined;\n    return infusionDetails.item.find((mapping) =>\n      mapping.itemId === item.flags.ddbimporter.definitionId\n      && mapping.inventoryMappingId === item.flags.ddbimporter.id\n      && mapping.itemTypeId === item.flags.ddbimporter.definitionEntityTypeId\n    );\n  }\n\n\n  // adjust this to find the imported infusions\n  _getInfusionDetail(definitionKey) {\n    if (!this.ddbData.infusions?.infusions?.definitionData) return undefined;\n    return this.ddbData.infusions.infusions.definitionData.find(\n      (infusion) => infusion.definitionKey === definitionKey\n    );\n  }\n\n  addInfusionsToItem(foundryItem, ddbItem) {\n    // get item mapping\n    const infusionItemMap = this.getInfusionItemMap(foundryItem);\n    foundryItem.flags.infusions = { maps: [], applied: [], infused: false };\n    // sometimes ddb keeps dead infusions around - notably homonculus\n    const infusionDetail = infusionItemMap\n      ? this._getInfusionDetail(this.ddbData, infusionItemMap.definitionKey)\n      : undefined;\n\n    if (infusionItemMap && infusionDetail) {\n      logger.debug(`Infusion detected for ${foundryItem.name}`);\n\n      // add infusion flags\n      foundryItem.flags.infusions.infused = true;\n\n      // set magic properties\n      utils.addToProperties(foundryItem.system.properties, \"mgc\");\n\n      // adjust name for infused item\n      if (!foundryItem.name.includes(\"[Infusion]\")) foundryItem.name += \" [Infusion]\";\n      // if item is loot, lets move it to equipment/trinket so effects will apply\n      if (foundryItem.type === \"loot\") {\n        foundryItem.type = \"equipment\";\n        foundryItem.system.armor = {\n          type: \"trinket\",\n          value: 10,\n          dex: null,\n        };\n        // infusions will over ride the can equip status, so just check for equipped\n        foundryItem.system.equipped = ddbItem.equipped;\n      }\n\n      // TO DO: move this effect to the enchantment item\n      // check to see if we need to fiddle attack modifiers on infused weapons\n      if (foundryItem.type === \"weapon\") {\n        const intSwap = DDBHelper.filterBaseModifiers(this.ddbData, \"bonus\", {\n          subType: \"magic-item-attack-with-intelligence\",\n        }).length > 0;\n        if (intSwap) {\n          const characterAbilities = this.raw.character.flags.ddbimporter.dndbeyond.effectAbilities;\n          const mockAbility = foundry.utils.getProperty(foundryItem, \"flags.ddbimporter.dndbeyond.ability\");\n          if (characterAbilities.int.value > characterAbilities[mockAbility].value) {\n            foundryItem.system.ability = \"int\";\n          }\n        }\n      }\n\n    } else if (infusionItemMap && !infusionDetail) {\n      logger.warn(`${foundryItem.name} marked as infused but no infusion info found`);\n    }\n    return foundryItem;\n\n  }\n\n\n}\n","import CharacterSpellFactory from \"./spells/CharacterSpellFactory.js\";\nimport logger from \"../logger.js\";\nimport DDBMacros from \"../effects/DDBMacros.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport DDBCampaigns from \"../lib/DDBCampaigns.js\";\nimport { importCacheLoad } from \"../lib/DDBReferenceLinker.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\nimport SETTINGS from \"../settings.js\";\nimport { addVision5eStubs } from \"../effects/vision5e.js\";\nimport { fixCharacterLevels } from \"./character/filterModifiers.js\";\nimport CharacterClassFactory from \"./classes/CharacterClassFactory.js\";\nimport CharacterFeatureFactory from \"./features/CharacterFeatureFactory.js\";\nimport utils from \"../lib/utils.js\";\nimport CompendiumHelper from \"../lib/CompendiumHelper.js\";\nimport DDBHelper from \"../lib/DDBHelper.js\";\nimport { DDBInfusionFactory } from \"./features/DDBInfusionFactory.js\";\n\n\nexport default class DDBCharacter {\n  constructor({ currentActor = null, characterId = null, selectResources = true, enableCompanions = false } = {}) {\n    // the actor the data will be imported into/currently exists\n    this.currentActor = currentActor;\n    this.currentActorId = currentActor?.id;\n    // DDBCharacter ID\n    this.characterId = characterId;\n    // show resource selection prompt?\n    this.selectResources = selectResources;\n    this.resourceChoices = currentActor && foundry.utils.hasProperty(currentActor, \"flags.ddbimporter.resources.type\")\n      ? foundry.utils.getProperty(currentActor, \"flags.ddbimporter.resources\")\n      : {\n        ask: game.settings.get(SETTINGS.MODULE_ID, \"show-resource-chooser-default\"),\n        type: \"remove\",\n        primary: \"\",\n        secondary: \"\",\n        tertiary: \"\",\n      };\n    this.resources = [];\n    // raw data received from DDB\n    this.source = null;\n    // this is the raw items processed before filtering\n    this.raw = {};\n    // the data to act on following initial parse\n    this.data = {};\n\n    // Character data\n    this.abilities = {\n      overrides: {},\n      core: {},\n      withEffects: {},\n    };\n    this.spellSlots = {};\n    this.totalLevels = 0;\n    this.companionFactories = [];\n    this.enableCompanions = enableCompanions;\n\n    this._currency = {\n      pp: 0,\n      gp: 0,\n      ep: 0,\n      sp: 0,\n      cp: 0,\n    };\n\n    this._itemCurrency = {\n      pp: 0,\n      gp: 0,\n      ep: 0,\n      sp: 0,\n      cp: 0,\n    };\n\n    this.itemCompendium = CompendiumHelper.getCompendiumType(\"inventory\");\n    this.spellCompendium = CompendiumHelper.getCompendiumType(\"spell\");\n\n    this.armor = {};\n\n  }\n\n  /**\n   * Retrieves the character ID from a given URL, which can be one of the following:\n   * - regular character sheet\n   * - public sharing link\n   * - direct link to the endpoint already\n   * @returns {string|null} DDB CharacterId\n   * @param {String} url\n   */\n  static getCharacterId(url) {\n    const ddbNamePattern = /(?:https?:\\/\\/)?(?:www\\.)?(?:dndbeyond\\.com|ddb\\.ac)(?:\\/profile\\/.+)?\\/characters\\/(\\d+)\\/?/;\n    const matches = url.match(ddbNamePattern);\n    return matches ? matches[1] : null;\n  }\n\n  /**\n   * Creates the Character Endpoint URL from a given character ID\n   * @returns {string|null} The API endpoint\n   */\n  getCharacterAPIEndpoint() {\n    return this.characterId !== null ? `https://character-service.dndbeyond.com/character/v5/character/${this.characterId}` : null;\n  }\n\n\n  /**\n   * Loads and parses character in the proxy\n   * This will return an object containing the character, and items separated into arrays relating to their types\n   * Additional processing is required after this step.\n   * @param {String} syncId\n   * @param {String} localCobaltPostFix\n   * @returns {Object} Parsed Character Data and DDB data\n   */\n\n  async getCharacterData({ syncId = undefined, localCobaltPostFix = \"\" } = {}) {\n    const cobaltCookie = getCobalt(localCobaltPostFix);\n    const parsingApi = DDBProxy.getProxy();\n    const betaKey = game.settings.get(\"ddb-importer\", \"beta-key\");\n    const campaignId = DDBCampaigns.getCampaignId();\n    const proxyCampaignId = campaignId === \"\" ? null : campaignId;\n    let body = {\n      cobalt: cobaltCookie,\n      betaKey, characterId: this.characterId,\n      campaignId: proxyCampaignId,\n      filterModifiers: false,\n    };\n    if (syncId) {\n      body[\"updateId\"] = syncId;\n    }\n\n    try {\n      const response = await fetch(`${parsingApi}/proxy/v5/character`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        redirect: \"follow\", // manual, *follow, error\n        body: JSON.stringify(body), // body data type must match \"Content-Type\" header\n      });\n      this.source = await response.json();\n      if (!this.source.success) return;\n\n      this.source.ddb = fixCharacterLevels(this.source.ddb);\n\n      // load some required content\n      await importCacheLoad();\n\n      logger.debug(\"DDB Data to parse:\", foundry.utils.duplicate(this.source.ddb));\n      logger.debug(\"currentActorId\", this.currentActorId);\n      try {\n        // this parses the json and sets the results as this.data\n        await this._parseCharacter();\n        logger.debug(\"finalParsedData\", foundry.utils.duplicate({ source: this.source, data: foundry.utils.deepClone(this.data) }));\n      } catch (error) {\n        if (game.settings.get(\"ddb-importer\", \"debug-json\")) {\n          FileHelper.download(JSON.stringify(this.source), `${this.characterId}-raw.json`, \"application/json\");\n        }\n        throw error;\n      }\n    } catch (error) {\n      logger.error(\"JSON Fetch and Parse Error\");\n      logger.error(error);\n      logger.error(error.stack);\n      throw error;\n    }\n  }\n\n  /**\n   * Removes duplicate features/actions based on import preferences\n   */\n  _filterActionFeatures() {\n    const actionAndFeature = game.settings.get(\"ddb-importer\", \"character-update-policy-use-action-and-feature\");\n\n    this.data.actions = this.raw.actions.map((action) => {\n      const featureMatch = this.raw.features.find((feature) => feature.name === action.name\n        && foundry.utils.getProperty(feature, \"flags.ddbimporter.type\") === foundry.utils.getProperty(action, \"flags.ddbimporter.type\"));\n      if (featureMatch) {\n        // console.warn(`Removing duplicate feature ${featureMatch.name} from action ${action.name}`, {\n        //   action,\n        //   feature: featureMatch,\n        // });\n        if (action.system.description.value === \"\") {\n          action.system.description.value = featureMatch.system.description.value;\n        }\n\n        if (action.system.description.chat === \"\") {\n          action.system.description.chat = featureMatch.system.description.chat;\n        }\n\n        if (action.effects && action.effects.length === 0\n          && featureMatch.effects && featureMatch.effects.length > 0\n        ) {\n\n          action.effects = featureMatch.effects;\n          const newFlags = foundry.utils.duplicate(featureMatch.flags);\n\n          delete newFlags.ddbimporter;\n          foundry.utils.mergeObject(action.flags, newFlags, { overwrite: true, insertKeys: true, insertValues: true });\n        }\n      }\n      return action;\n    });\n\n    this.data.features = this.raw.features\n      .filter((feature) =>\n        actionAndFeature\n        || !this.data.actions.some((action) =>\n          action.name.trim().toLowerCase() === feature.name.trim().toLowerCase()\n          && foundry.utils.getProperty(action, \"flags.ddbimporter.isCustomAction\") !== true\n          && foundry.utils.getProperty(feature, \"flags.ddbimporter.type\") === foundry.utils.getProperty(action, \"flags.ddbimporter.type\")\n        )\n      )\n      .map((feature) => {\n        const actionMatch = actionAndFeature && this.data.actions.some((action) => feature.name === action.name);\n        if (actionMatch) feature.effects = [];\n        return feature;\n      });\n\n  }\n\n  /**\n   * Parses the collected Character JSON data into various foundry features.\n   * Additional steps are needed after this based on the settings in the character import, but this will give the \"raw\" items\n   *\n   * @returns Object containing various parsed Foundry features\n   *\n   */\n  async _parseCharacter() {\n    try {\n      // prefetch compendium indexes for lookups\n      await this.itemCompendium.getIndex();\n      await this.spellCompendium.getIndex();\n\n      if (game.settings.get(\"ddb-importer\", \"character-update-policy-add-spell-effects\")) await DDBMacros.createWorldMacros();\n      logger.debug(\"Starting core character parse\", { thisDDB: this.source.ddb });\n      await this._generateCharacter();\n      if (this.selectResources) {\n        logger.debug(\"Character resources\");\n        await this.resourceSelectionDialog();\n      }\n\n      logger.debug(\"Character parse complete\");\n      await this._generateRace();\n      logger.debug(\"Race parse complete\");\n      this._classParser = new CharacterClassFactory(this);\n      this.raw.classes = await this._classParser.processCharacter();\n      logger.debug(\"Classes parse complete\");\n      this._characterFeatureFactory = new CharacterFeatureFactory(this);\n      await this._characterFeatureFactory.processFeatures();\n      this.raw.features = this._characterFeatureFactory.processed.features;\n      logger.debug(\"Feature parse complete\");\n      logger.debug(\"Parsing infusions\");\n      this._infusionFactory = new DDBInfusionFactory(this);\n      await this._infusionFactory.processInfusions();\n      this.raw.features.push(...this._infusionFactory.processed.infusions);\n      logger.debug(\"Infusion parse complete\");\n      this._spellParser = new CharacterSpellFactory(this);\n      this.raw.spells = await this._spellParser.getCharacterSpells();\n      logger.debug(\"Character Spells parse complete\");\n      await this._characterFeatureFactory.processActions();\n      this.raw.actions = this._characterFeatureFactory.processed.actions;\n      logger.debug(\"Action parse complete\");\n      await this._generateInventory();\n      logger.debug(\"Inventory generation complete\");\n\n      this.data = foundry.utils.deepClone({\n        character: this.raw.character,\n        features: this.raw.features,\n        race: this.raw.race,\n        classes: this.raw.classes,\n        inventory: this.raw.inventory,\n        spells: this.raw.spells,\n        actions: this.raw.actions,\n        itemSpells: this.raw.itemSpells,\n      });\n\n      this._filterActionFeatures();\n\n      this._classParser.linkFeatures();\n      this._ddbRace.linkFeatures(this);\n      this._characterFeatureFactory.linkFeatures();\n\n      // this adds extras like a Divine Smite spell to this.data\n      this._addSpecialAdditions();\n\n      // find supported companion blocks\n      if (this.enableCompanions && game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-create-companions\")) {\n        await this.generateCompanions();\n      }\n\n      this._addVision5eEffects();\n      this._linkItemsToContainers();\n\n    } catch (error) {\n      logger.error(error);\n      logger.error(\"Error during parse:\", error.message);\n      throw (error);\n    }\n  }\n\n  getDataFeature(featureName, { featureTypes = [\"actions\", \"features\"], hints = [] } = {}) {\n    for (const featureType of featureTypes) {\n      const index = this.data[featureType].findIndex((f) => {\n        const isCustomAction = f.flags.ddbimporter?.isCustomAction ?? false;\n        if (isCustomAction) return false;\n        const name = f.flags.ddbimporter?.originalName ?? f.name;\n        for (const hint of hints) {\n          if (utils.nameString(`${name} (${hint})`) === utils.nameString(featureName)) return true;\n        }\n        return utils.nameString(name) === utils.nameString(featureName);\n      });\n      if (index !== -1) {\n        logger.debug(`Found ${featureType} : ${featureName}`);\n        return this.data[featureType][index];\n      }\n    }\n    return undefined;\n  }\n\n  async disableDynamicUpdates() {\n    this.currentActor.flags.ddbimporter.activeUpdate = false;\n    const activeUpdateData = { flags: { ddbimporter: { activeUpdate: false } } };\n    await this.currentActor.update(activeUpdateData);\n  }\n\n  async enableDynamicUpdates() {\n    this.currentActor.flags.ddbimporter.activeUpdate = true;\n    const activeUpdateData = { flags: { ddbimporter: { activeUpdate: true } } };\n    await this.currentActor.update(activeUpdateData);\n  }\n\n  async updateDynamicUpdates(state) {\n    this.currentActor.flags.ddbimporter.activeUpdate = state;\n    const activeUpdateData = { flags: { ddbimporter: { activeUpdate: state } } };\n    await this.currentActor.update(activeUpdateData);\n  }\n\n  getCurrentDynamicUpdateState() {\n    const activeUpdateState = this.currentActor.flags?.ddbimporter?.activeUpdate\n      ? this.currentActor.flags.ddbimporter.activeUpdate\n      : false;\n    return activeUpdateState;\n  }\n\n  async setActiveSyncSpellsFlag(state) {\n    this.currentActor.flags.ddbimporter.activeSyncSpells = state;\n    const activeUpdateData = { flags: { ddbimporter: { activeSyncSpells: state } } };\n    await this.currentActor.update(activeUpdateData);\n  }\n\n  _addVision5eEffects() {\n    this.data.inventory = addVision5eStubs(this.data.inventory);\n    this.data.spells = addVision5eStubs(this.data.spells);\n    this.data.features = addVision5eStubs(this.data.features);\n    this.data.actions = addVision5eStubs(this.data.actions);\n  }\n\n  isMartialArtist() {\n    return this.source.ddb.character.classes.some((cls) =>\n      cls.classFeatures.some((feature) => feature.definition.name === \"Martial Arts\")\n    );\n  }\n\n  updateItemIds(items) {\n    if (!this.currentActor) return items;\n    const possibleFeatures = this.currentActor.getEmbeddedCollection(\"Item\");\n    const matchedFeatures = [];\n    items.forEach((item) => {\n      const itemMatch = DDBHelper.findMatchedDDBItem(item, possibleFeatures, matchedFeatures);\n      if (itemMatch) {\n        item._id = itemMatch._id;\n        matchedFeatures.push(itemMatch);\n      }\n    });\n    return items;\n  }\n\n  _linkItemsToContainers() {\n    const containerItems = this.data.inventory\n      .filter((item) =>\n        item.type === \"container\"\n        && foundry.utils.hasProperty(item, \"flags.ddbimporter.id\")\n        && foundry.utils.hasProperty(item, \"flags.ddbimporter.containerEntityId\")\n        && parseInt(item.flags.ddbimporter.containerEntityId) === parseInt(this.source.ddb.character.id)\n        && !foundry.utils.getProperty(item, \"flags.ddbimporter.ignoreItemImport\")\n      );\n\n    this.data.inventory.forEach((item) => {\n      if (foundry.utils.hasProperty(item, \"flags.ddbimporter.containerEntityId\")\n        && parseInt(item.flags.ddbimporter.containerEntityId) !== parseInt(this.source.ddb.character.id)\n      ) {\n        const containerItem = containerItems.find((container) =>\n          parseInt(container.flags.ddbimporter.id) === parseInt(item.flags.ddbimporter.containerEntityId)\n        );\n        if (containerItem) {\n          foundry.utils.setProperty(item, \"system.container\", containerItem._id);\n        }\n      }\n    });\n  }\n\n}\n","import logger from \"../logger.js\";\nimport DDBMonsterFactory from \"./DDBMonsterFactory.js\";\nimport { getAbilityMods } from \"./monster/helpers.js\";\nimport DICTIONARY from \"../dictionary.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBCompanionFactory from \"./companions/DDBCompanionFactory.js\";\nimport FolderHelper from \"../lib/FolderHelper.js\";\n\nfunction getCustomValue(ddbCharacter, typeId, valueId, valueTypeId) {\n  const characterValues = ddbCharacter.characterValues;\n  const customValue = characterValues.find(\n    (value) => value.valueId == valueId && value.valueTypeId == valueTypeId && value.typeId == typeId\n  );\n\n  if (customValue) {\n    return customValue.value;\n  }\n  return null;\n}\n\nfunction generateBeastCompanionEffects(extra, characterProficiencyBonus) {\n  // beast master get to add proficiency bonus to current attacks, damage, ac\n  // and saving throws and skills it is proficient in.\n  // extra.system.details.cr = actor.system.flags.ddbimporter.dndbeyond.totalLevels;\n\n  let effect = {\n    changes: [\n      {\n        key: \"data.bonuses.rwak.attack\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: `+${characterProficiencyBonus}`,\n        priority: 20,\n      },\n      {\n        key: \"data.bonuses.rwak.damage\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: `+${characterProficiencyBonus}`,\n        priority: 20,\n      },\n      {\n        key: \"data.bonuses.mwak.attack\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: `+${characterProficiencyBonus}`,\n        priority: 20,\n      },\n      {\n        key: \"data.bonuses.mwak.damage\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: `+${characterProficiencyBonus}`,\n        priority: 20,\n      },\n    ],\n    duration: {\n      seconds: null,\n      startTime: null,\n      rounds: null,\n      turns: null,\n      startRound: null,\n      startTurn: null,\n    },\n    tint: \"\",\n    disabled: false,\n    selectedKey: [],\n  };\n  effect.name = \"Beast Companion Effects\";\n  DICTIONARY.character.abilities.filter((ability) => extra.system.abilities[ability.value].proficient >= 1).forEach((ability) => {\n    const boost = {\n      key: `data.abilities.${ability.value}.save`,\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: characterProficiencyBonus,\n      priority: 20,\n    };\n    effect.selectedKey.push(`data.abilities.${ability.value}.save`);\n    effect.changes.push(boost);\n  });\n  DICTIONARY.character.skills.filter((skill) => extra.system.skills[skill.name].prof >= 1).forEach((skill) => {\n    const boost = {\n      key: `data.skills.${skill.name}.mod`,\n      mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n      value: characterProficiencyBonus,\n      priority: 20,\n    };\n    effect.selectedKey.push(`data.skills.${skill.name}.mod`);\n    effect.changes.push(boost);\n  });\n  extra.effects = [effect];\n  return extra;\n}\n\nfunction generateArtificerDamageEffect(actor, extra) {\n  // artificer uses the actors spell attack bonus, so is a bit trickier\n  // we remove damage bonus later, and will also have to calculate additional attack bonus for each attack\n  extra.system.details.cr = actor.flags.ddbimporter.dndbeyond.totalLevels;\n\n  let effect = {\n    changes: [\n      {\n        key: \"data.bonuses.rwak.damage\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: \"+ @prof\",\n        priority: 20,\n      },\n      {\n        key: \"data.bonuses.mwak.damage\",\n        mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM,\n        value: \"+ @prof\",\n        priority: 20,\n      },\n    ],\n    duration: {\n      seconds: null,\n      startTime: null,\n      rounds: null,\n      turns: null,\n      startRound: null,\n      startTurn: null,\n    },\n    tint: \"\",\n    disabled: false,\n    selectedKey: [],\n  };\n  effect.name = \"Artificer Extra Effects\";\n  extra.effects = [effect];\n  return extra;\n}\n\nconst creatureGroupMatrix = [\n  {\n    id: 1,\n    name: \"Wildshape\",\n    animation: \"fourelements\",\n  },\n  {\n    id: 2,\n    name: \"Familiar\",\n    animation: \"magic1\",\n  },\n  {\n    id: 3,\n    name: \"Beast Companion\",\n    animation: \"fourelements\",\n  },\n  {\n    id: 4,\n    name: \"Mount\",\n    animation: \"heart\",\n  },\n  {\n    id: 5,\n    name: \"Pet\",\n    animation: \"heart\",\n  },\n  {\n    id: 6,\n    name: \"Summoned\",\n    animation: \"magic1\",\n  },\n  {\n    id: 7,\n    name: \"Misc\",\n    animation: \"magic1\",\n  },\n  {\n    id: 10,\n    name: \"Battle Smith Defender\",\n    animation: \"energy1\",\n  },\n  {\n    id: 11,\n    name: \"Sidekick\",\n    animation: \"energy1\",\n  },\n  {\n    id: 12,\n    name: \"Infusion\",\n    animation: \"energy1\",\n  },\n];\n\nfunction getCreatureAnimationType(name, creatureGroup) {\n  // \"fire\":\n  // \"air\":\n  // \"lightning\":\n  // \"water\":\n  // \"energy1\":\n  // \"magic1\":\n  // \"heart\":\n  // \"music\":\n  // \"fourelements\":\n  const checkName = name.toLowerCase();\n  let animation = \"magic1\";\n  switch (name) {\n    case checkName.includes(\"flame\"):\n    case checkName.includes(\"fire\"):\n      animation = \"fire\";\n      break;\n    case checkName.includes(\"air\"):\n    case checkName.includes(\"wind\"):\n      animation = \"air\";\n      break;\n    case checkName.includes(\"lightning\"):\n    case checkName.includes(\"thunder\"):\n      animation = \"lightning\";\n      break;\n    case checkName.includes(\"water\"):\n    case checkName.includes(\"aqua\"):\n      animation = \"water\";\n      break;\n    case checkName.includes(\"energy\"):\n    case checkName.includes(\"construct\"):\n      animation = \"energy1\";\n      break;\n    case checkName.includes(\"magic\"):\n    case checkName.includes(\"arcane\"):\n      animation = \"magic1\";\n      break;\n    default: {\n      const match = creatureGroupMatrix.find((group) => group.id === creatureGroup.id);\n      if (match) {\n        animation = match.animation;\n      }\n    }\n  }\n\n  return animation;\n}\n\nfunction setExtraMunchDefaults() {\n  let munchSettings = [];\n\n  SETTINGS.MUNCH_DEFAULTS.forEach((setting) => {\n    logger.debug(`Loading extras munch settings ${setting.name}`);\n    setting[\"chosen\"] = game.settings.get(\"ddb-importer\", setting.name);\n    munchSettings.push(setting);\n  });\n\n  munchSettings.forEach((setting) => {\n    game.settings.set(\"ddb-importer\", setting.name, setting.needed);\n  });\n\n  return munchSettings;\n\n}\n\nfunction revertExtraMunchDefaults(munchSettings) {\n  munchSettings.forEach((setting) => {\n    logger.debug(`Returning ${setting.name} to ${setting.chosen}`);\n    game.settings.set(\"ddb-importer\", setting.name, setting.chosen);\n  });\n}\n\nfunction addOwnerSkillProficiencies(ddbCharacter, mock) {\n  let newSkills = [];\n  const proficiencyBonus = CONFIG.DDB.challengeRatings.find(\n    (cr) => cr.id == mock.challengeRatingId\n  ).proficiencyBonus;\n\n  DICTIONARY.character.skills.forEach((skill) => {\n    const existingSkill = mock.skills.find((mockSkill) => skill.valueId === mockSkill.skillId);\n    const characterProficient = ddbCharacter.data.character.system.skills[skill.name].value;\n    const ability = DICTIONARY.character.abilities.find((ab) => ab.value === skill.ability);\n    const stat = mock.stats.find((stat) => stat.statId === ability.id).value || 10;\n    const mod = CONFIG.DDB.statModifiers.find((s) => s.value == stat).modifier;\n\n    if (existingSkill && characterProficient === 2) {\n      const doubleProf = proficiencyBonus * 2;\n      newSkills.push({\n        skillId: skill.valueId,\n        value: mod + doubleProf,\n        additionalBonus: null,\n      });\n    } else if (existingSkill) {\n      newSkills.push(existingSkill);\n    } else if (characterProficient === 1) {\n      newSkills.push({\n        skillId: skill.valueId,\n        value: mod + proficiencyBonus,\n        additionalBonus: null,\n      });\n    }\n  });\n  mock.skills = newSkills;\n\n  return mock;\n}\n\nfunction addOwnerSaveProficiencies(ddbCharacter, mock) {\n// add owner save profs\n  let newSaves = [];\n  DICTIONARY.character.abilities.forEach((ability) => {\n    const existingProficient = mock.savingThrows.find((stat) => stat.statId === ability.id) ? 1 : 0;\n    const characterProficient = ddbCharacter.abilities.withEffects[ability.value].proficient;\n\n    if (existingProficient || characterProficient) {\n      const bonus = {\n        bonusModifier: null,\n        statId: ability.id,\n      };\n      newSaves.push(bonus);\n    }\n  });\n  mock.savingThrows = newSaves;\n  return mock;\n}\n\nfunction addAverageHitPoints(ddbCharacterData, actor, creature, mock) {\n  // hp\n  const hpMaxChange = getCustomValue(ddbCharacterData, 43, creature.id, creature.entityTypeId);\n  if (hpMaxChange) mock.averageHitPoints = hpMaxChange;\n\n  // assume this is beast master\n  if (mock.creatureFlags.includes(\"HPLM\")) {\n    const ranger = ddbCharacterData.classes.find((klass) => klass.definition.id === 5);\n    const level = ranger ? ranger.level : 0;\n    mock.averageHitPoints = Math.max(mock.averageHitPoints, 4 * level);\n  }\n\n  // homunculus servant\n  // Max Hit Points Base Artificer Level\n  if (mock.creatureFlags.includes(\"MHPBAL\")) {\n    const artificer = ddbCharacterData.classes.find((klass) => klass.definition.name === \"Artificer\");\n    if (artificer) {\n      mock.averageHitPoints = parseInt(artificer.level);\n      foundry.utils.setProperty(mock, \"hitPointDice.diceCount\", artificer.level);\n      foundry.utils.setProperty(mock, \"hitPointDice.diceString\", `${artificer.level}d${mock.hitPointDice.diceValue}`);\n    }\n  }\n\n  if (mock.creatureFlags.includes(\"AHM\")) {\n    const artificer = ddbCharacterData.classes.find((klass) => klass.definition.name === \"Artificer\");\n    if (artificer) {\n      mock.averageHitPoints = parseInt(5 * artificer.level);\n    }\n  }\n\n  // Max Hit Points Add Int Modifier\n  if (mock.creatureFlags.includes(\"MHPAIM\")) {\n    mock.averageHitPoints += parseInt(actor.system.abilities.int.mod);\n  }\n\n  // Max Hit Points Add Monster CON Modifier\n  if (mock.creatureFlags.includes(\"MHPAMCM\")) {\n    const monsterConModifier = getAbilityMods(mock, CONFIG.DDB);\n    mock.averageHitPoints += parseInt(monsterConModifier.con);\n  }\n\n  return mock;\n}\n\nfunction addCreatureStats(mock, actor) {\n  const creatureStats = mock.stats.filter((stat) => !mock.creatureGroup.ownerStats.includes(stat.statId));\n  const characterStats = mock.stats\n    .filter((stat) => mock.creatureGroup.ownerStats.includes(stat.statId))\n    .map((stat) => {\n      const value = actor.system.abilities[DICTIONARY.character.abilities.find((a) => a.id === stat.statId).value].value;\n      return { name: null, statId: stat.statId, value: value };\n    });\n\n  mock.stats = creatureStats.concat(characterStats);\n  return mock;\n}\n\nfunction addCreatureFlags(creature, mock) {\n  const creatureGroup = CONFIG.DDB.creatureGroups.find((group) => group.id == creature.groupId);\n  let creatureFlags = creatureGroup.flags;\n\n  if (creature.definition.name === \"Homunculus Servant\") {\n    // Max Hit Points Add Monster CON Modifier\n    // Max Hit Points Add Int Modifier\n    // Max Hit Points Base Artificer Level\n    // Attack Rolls Add Proficiency Bonus\n    // Proficient Skills Add Proficiency Bonus\n    creatureFlags = creatureFlags.concat([\"MHPAMCM\", \"MHPAIM\", \"MHPBAL\", \"ARPB\", \"PSPB\"]);\n  }\n  mock.creatureFlags = creatureFlags;\n  mock.creatureGroupId = creature.groupId;\n  mock.creatureGroup = creatureGroup;\n\n  return mock;\n\n}\n\nfunction transformExtraToMonsterData(ddbCharacter, actor, creature) {\n  let ddbCharacterData = ddbCharacter.source.ddb.character;\n  logger.debug(\"Extra data\", creature);\n  let mock = foundry.utils.duplicate(creature.definition);\n  mock.id = creature.id;\n  mock.entityTypeId = creature.entityTypeId;\n  mock = addCreatureFlags(creature, mock);\n\n  if (creature.name) mock.name = creature.name;\n\n  // creature group\n  mock.automatedEvcoationAnimation = getCreatureAnimationType(mock.name, mock.creatureGroup);\n\n  // size\n  const sizeChange = getCustomValue(ddbCharacterData, 46, creature.id, creature.entityTypeId);\n  if (sizeChange) mock.sizeId = sizeChange;\n\n  // hp\n  mock = addAverageHitPoints(ddbCharacterData, actor, creature, mock);\n  mock.removedHitPoints = creature.removedHitPoints;\n  mock.temporaryHitPoints = creature.temporaryHitPoints;\n\n  // creature type\n  const typeChange = getCustomValue(ddbCharacterData, 44, creature.id, creature.entityTypeId);\n  if (typeChange) mock.typeId = typeChange;\n\n  // ac\n  const acChange = getCustomValue(ddbCharacterData, 42, creature.id, creature.entityTypeId);\n  if (acChange) mock.armorClass = acChange;\n\n  // alignment\n  const alignmentChange = getCustomValue(ddbCharacterData, 45, creature.id, creature.entityTypeId);\n  if (alignmentChange) mock.alignmentId = alignmentChange;\n\n  // notes\n  const extraNotes = getCustomValue(ddbCharacterData, 47, creature.id, creature.entityTypeId);\n  if (extraNotes) mock.characteristicsDescription += `\\n\\n${extraNotes}`;\n\n  // stats\n  mock = addCreatureStats(mock, actor);\n\n  // ownership the same as actor\n  mock.ownership = actor.ownership;\n\n  if (mock.creatureGroup.description !== \"\") {\n    mock.characteristicsDescription = `${mock.creatureGroup.description}\\n\\n${mock.characteristicsDescription}`;\n  }\n\n  if (mock.creatureGroup.specialQualityTitle) {\n    mock.specialTraitsDescription = `${mock.specialTraitsDescription} <p><em><strong>${mock.creatureGroup.specialQualityTitle}.</strong></em> ${mock.creatureGroup.specialQualityText}</p>`;\n  }\n\n  // Armor Add Proficiency Bonus\n  if (mock.creatureFlags.includes(\"ACPB\")) {\n    mock.armorClass += actor.system.attributes.prof;\n  }\n\n  // Evaluate Owner Skill Proficiencies\n  if (mock.creatureFlags.includes(\"EOSKP\")) {\n    mock = addOwnerSkillProficiencies(ddbCharacter, mock);\n  }\n\n  // Evaluate Owner Save Proficiencies\n  if (mock.creatureFlags.includes(\"EOSVP\")) {\n    mock = addOwnerSaveProficiencies(ddbCharacter, mock);\n  }\n\n  // Cannot Use Legendary Actions\n  if (mock.creatureFlags.includes(\"CULGA\")) {\n    mock.isLegendary = false;\n    mock.legendaryActionsDescription = \"\";\n  }\n\n  // Cannot Use Lair Actions\n  if (mock.creatureFlags.includes(\"CULRA\")) {\n    mock.hasLair = false;\n    mock.lairDescription = \"\";\n  }\n\n  logger.debug(\"mock creature\", mock);\n  return mock;\n\n}\n\nfunction enhanceParsedExtra(actor, extra) {\n  const damageDiceExpression = /(\\d*d\\d+\\s*\\+*\\s*)+/;\n  const characterProficiencyBonus = actor.system.attributes.prof;\n  const artificerBonusGroup = [10, 12];\n\n  if (\n    extra.flags?.ddbimporter?.creatureFlags?.includes(\"ARPB\") // Attack Rolls Add Proficiency Bonus\n    && extra.flags?.ddbimporter?.creatureFlags?.includes(\"PSPB\") // Proficient Skills Add Proficiency Bonus\n  ) {\n    if (extra.flags?.ddbimporter?.creatureGroupId === 3) {\n      extra = generateBeastCompanionEffects(extra, characterProficiencyBonus);\n    } else if (artificerBonusGroup.includes(extra.flags?.ddbimporter?.creatureGroupId)) {\n      // artificer uses the actors spell attack bonus, so is a bit trickier\n      // we remove damage bonus later, and will also have to calculate additional attack bonus for each attack\n      extra = generateArtificerDamageEffect(actor, extra, characterProficiencyBonus);\n    } else {\n      // who knows!\n      extra.system.details.cr = actor.flags.ddbimporter.dndbeyond.totalLevels;\n    }\n  }\n\n  if (\n    // Damage Rolls Add Proficiency Bonus\n    (extra.flags?.ddbimporter?.creatureFlags?.includes(\"DRPB\") && extra.flags?.ddbimporter?.creatureGroupId !== 3)\n    // is this a artificer infusion? the infusion call actually adds this creature group, but we don't fetch that yet.\n    || extra.flags?.ddbimporter?.creatureGroupId === 12\n  ) {\n    extra.items = extra.items.map((item) => {\n      if (item.type === \"weapon\") {\n        let characterAbility;\n\n        item.system.damage.parts = item.system.damage.parts.map((part) => {\n          const match = part[0].match(damageDiceExpression);\n          if (match) {\n            let dice = match[0];\n            // the artificer creatures have the initial prof built in, lets replace it\n            if (artificerBonusGroup.includes(extra.flags?.ddbimporter?.creatureGroupId)) {\n              characterAbility = \"int\";\n              dice = match[1].trim().endsWith(\"+\") ? match[1].trim().slice(0, -1) : match[1];\n            }\n            part[0] = `${dice.trim()}`;\n          }\n\n          return part;\n        });\n\n        if (characterAbility) {\n          const ability = item.system.ability;\n          const mod = parseInt(extra.system.abilities[ability].mod);\n          const characterMod = parseInt(actor.system.abilities[characterAbility].mod);\n          // eslint-disable-next-line no-eval\n          const globalMod = parseInt(eval(actor.system.bonuses.rsak.attack || 0));\n          item.system.attack.bonus = characterMod + globalMod - mod;\n        }\n      }\n      return item;\n    });\n  }\n\n  return extra;\n}\n\nexport async function generateCharacterExtras(html, ddbCharacter, actor) {\n  const munchSettings = setExtraMunchDefaults();\n\n  try {\n    logger.debug(\"ddbCharacter\", ddbCharacter);\n    if (ddbCharacter.source.ddb.character.creatures.length === 0) return;\n\n    const folder = await FolderHelper.getOrCreateFolder(actor.folder, \"Actor\", `[Extras] ${actor.name}`);\n\n    const extractedCreatures = ddbCharacter.source.ddb.character.creatures\n      .map((creature) => transformExtraToMonsterData(ddbCharacter, actor, creature))\n      .map((creature) => {\n        creature.folder = folder.id;\n        return creature;\n      });\n\n    logger.debug(\"Extracted creatures\", foundry.utils.duplicate(extractedCreatures));\n    const monsterFactory = new DDBMonsterFactory({ ddbData: extractedCreatures, extra: true });\n    const parsedExtras = await monsterFactory.parse();\n    logger.debug(\"Parsed Extras:\", foundry.utils.duplicate(parsedExtras.actors));\n\n    const enhancedExtras = parsedExtras.actors.map((extra) => enhanceParsedExtra(actor, extra));\n    logger.debug(\"Enhanced Parsed Extras:\", foundry.utils.duplicate(enhancedExtras));\n\n    const ddbCompanionFactory = new DDBCompanionFactory(\"\", { actor, data: enhancedExtras, noCompendiums: true });\n    await ddbCompanionFactory.init();\n    await ddbCompanionFactory.updateOrCreateCompanions({ folderOverride: folder });\n\n  } catch (err) {\n    logger.error(\"Failure parsing extra\", err);\n    logger.error(err.stack);\n  } finally {\n    revertExtraMunchDefaults(munchSettings);\n  }\n}\n","// these are non-compliant monsters that currently don't meet parsing requirements\n// these are temporary work arounds till parsing is fixed.\nexport function specialCases(monster) {\n  switch (monster.name) {\n    case \"Reduced-threat Aboleth\":\n    case \"Aboleth\": {\n      monster.items.forEach(function (item, index) {\n        if (item.name === \"Tentacle\") {\n          this[index].system.formula = item.system.damage.parts[1][0];\n          this[index].system.damage.parts.splice(1, 1);\n        }\n      }, monster.items);\n      break;\n    }\n    case \"Clay Golem\": {\n      monster.items.forEach(function (item, index) {\n        if (item.name.startsWith(\"Haste\")) {\n          this[index].system.activation.type = \"action\";\n        }\n      }, monster.items);\n      break;\n    }\n    case \"Dullahan\": {\n      monster.items.forEach(function (item, index) {\n        if (item.name === \"Battleaxe\") {\n          this[index].system.damage.versatile += \" + 2d10[necrotic]\";\n          this[index].system.damage.parts.push([\"2d10[necrotic]\", \"necrotic\"]);\n        } else if (item.name === \"Coordinated Assault\") {\n          this[index].system.activation.type = \"legendary\";\n          this[index].system.consume = {\n            type: \"attribute\",\n            target: \"resources.legact.value\",\n            amount: 1,\n          };\n          this[index].system.activation.cost = 1;\n        } else if (item.name.startsWith(\"Headless Wail\")) {\n          this[index].system.activation.cost = 2;\n          this[index].system.activation.type = \"legendary\";\n          this[index].system.consume = {\n            type: \"attribute\",\n            target: \"resources.legact.value\",\n            amount: 2,\n          };\n        }\n      }, monster.items);\n      break;\n    }\n    case \"Duergar Warlord\": {\n      monster.items.forEach(function (item, index) {\n        if (item.name === \"Psychic-Attuned Hammer\") {\n          this[index].system.damage.parts.push([\"1d10[psychic]\", \"psychic\"]);\n        }\n      }, monster.items);\n      break;\n    }\n    case \"Autumn Eladrin (Legacy)\":\n    case \"Autumn Eladrin\": {\n      monster.items.forEach(function (item, index) {\n        if (item.name.startsWith(\"Cure Wounds\")) {\n          this[index].system.damage.parts[0][0] = \"5d8[healing] + @mod\";\n        }\n      }, monster.items);\n      break;\n    }\n    // flumph tendrils have weird syntax for damage over time.\n    case \"Flumph\": {\n      monster.items.forEach(function (item, index) {\n        if (item.name === \"Tendrils\") {\n          if (item.system.damage.parts.length > 2) {\n            this[index].system.formula = item.system.damage.parts[2][0];\n            this[index].system.damage.parts.splice(2, 1);\n          }\n          this[index].system.save.ability = \"\";\n        }\n      }, monster.items);\n      break;\n    }\n    case \"Living Blade of Disaster\": {\n      monster.items.forEach(function (item, index) {\n        if (item.name === \"Force Blade\") {\n          this[index].system.critical.threshold = 18;\n          this[index].system.critical.damage = \"8d12\";\n          this[index].system.damage.parts.splice(1, 1);\n\n        } else if (item.name === \"Preemptive Strike\" && game.modules.get(\"midi-qol\")?.active) {\n          this[index].system.activation.type = \"reactionmanual\";\n        }\n      }, monster.items);\n      break;\n    }\n    case \"Nilbog (Legacy)\":\n    case \"Nilbog\": {\n      monster.items.forEach(function (item, index) {\n        if (item.name === \"Reversal of Fortune\") {\n          this[index].system.actionType = \"heal\";\n        }\n      }, monster.items);\n      break;\n    }\n    case \"Nosferatu\": {\n      monster.items.forEach(function (item, index) {\n        if (item.name === \"Bite\") {\n          this[index].system.damage.versatile = `${item.system.damage.parts[0][0]} + ${item.system.damage.parts[2][0]}`;\n          this[index].system.damage.parts.splice(2, 1);\n        }\n      }, monster.items);\n      break;\n    }\n    // no default\n  }\n\n  switch (monster.system.details.type.value) {\n    case \"dragon\": {\n      monster.items.forEach(function (item, index) {\n        if (item.name === \"Frightful Presence\") {\n          this[index].system.duration = {\n            value: \"1\",\n            units: \"minute\",\n          };\n          this[index].system.range.value = 120;\n          this[index].system.range.units = \"self\";\n          this[index].system.target = {\n            value: 120,\n            width: null,\n            units: \"\",\n            type: \"enemy\",\n          };\n        }\n      }, monster.items);\n      break;\n    }\n    // no default\n  }\n\n  monster.items.forEach(function (item, index) {\n    if (item.name.startsWith(\"Sneak Attack\")) {\n      this[index].system.uses = {\n        \"value\": null,\n        \"max\": \"\",\n        \"per\": null,\n        \"recovery\": \"\"\n      };\n    } else if (item.name.startsWith(\"Soothing Word\")) {\n      this[index].system.target = {\n        value: 1,\n        width: null,\n        units: \"\",\n        type: \"creature\",\n      };\n    }\n  }, monster.items);\n\n  const magicWeapons = monster.items.some((item) => item.name === \"Magic Weapons\");\n  if (magicWeapons) {\n    monster.items.forEach(function (item, index) {\n      if (item.type === \"weapon\") {\n        this[index].system.properties.mgc = true;\n      }\n    }, monster.items);\n  }\n\n  return monster;\n}\n","\n\nimport { newNPC } from \"./monster/templates/monster.js\";\nimport { specialCases } from \"./monster/special.js\";\nimport { monsterFeatureEffectAdjustment, transferEffectsToActor } from \"../effects/specialMonsters.js\";\n\nimport logger from '../logger.js';\nimport CompendiumHelper from \"../lib/CompendiumHelper.js\";\nimport DDBMonsterFeatureFactory from \"./monster/features/DDBMonsterFeatureFactory.js\";\nimport SETTINGS from \"../settings.js\";\n\nimport FileHelper from \"../lib/FileHelper.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\nimport PatreonHelper from \"../lib/PatreonHelper.js\";\nimport { addVision5eStubs } from \"../effects/vision5e.js\";\nimport utils from \"../lib/utils.js\";\nimport ExternalAutomations from \"../effects/external/ExternalAutomations.js\";\n\nexport default class DDBMonster {\n\n  setProperty(name, value) {\n    if (this.overrides[\"name\"]) {\n      this[name] = this.overrides[\"name\"];\n    } else {\n      this[name] = value;\n    }\n  }\n\n  constructor(ddbObject = null, { existingNpc = null, extra = false, useItemAC = true,\n    legacyName = true, addMonsterEffects = false, addChrisPremades = false } = {}, overrides = {}\n  ) {\n    this.source = ddbObject;\n\n    // processing options\n    this.extra = extra;\n    this.npc = existingNpc;\n    this.useItemAC = useItemAC;\n    this.legacyName = legacyName;\n    this.addMonsterEffects = addMonsterEffects;\n    this.addChrisPremades = addChrisPremades;\n\n    // some of this data can be overwritten, useful for mangling new actions\n    this.overrides = overrides;\n\n    // used by extra processing\n    this.removedHitPoints = this.setProperty(\"removedHitPoints\", (this.source?.removedHitPoints ?? 0));\n    this.temporaryHitPoints = this.setProperty(\"temporaryHitPoints\", (this.source?.temporaryHitPoints ?? 0));\n\n    this.characterDescription = \"\";\n    this.unexpectedDescription = null;\n\n    // processing info\n    this.name = overrides[\"name\"] ?? (existingNpc ? existingNpc.name : null);\n    this.abilities = null;\n    this.proficiencyBonus = null;\n    this.cr = 0;\n    this.typeName = \"\";\n    this.items = [];\n    this.img = null;\n    if (existingNpc) {\n      this.proficiencyBonus = this.setProperty(\"proficiencyBonus\", existingNpc.system.attributes.prof);\n      this.cr = this.setProperty(\"cr\", existingNpc.system.details.cr);\n      this.abilities = this.setProperty(\"abilities\", existingNpc.system.abilities);\n      this.items = foundry.utils.duplicate(existingNpc.items);\n      this.img = existingNpc.img;\n    }\n    this.stockImage = false;\n\n    this.featureFactory = new DDBMonsterFeatureFactory({ ddbMonster: this });\n  }\n\n  static STOCK_TYPE_IMAGES = [\n    \"https://www.dndbeyond.com/avatars/4675/664/636747837303835953.jpeg\",\n    \"https://www.dndbeyond.com/avatars/4675/665/636747837392078487.jpeg\",\n    \"https://www.dndbeyond.com/avatars/4675/666/636747837434463638.jpeg\",\n    \"https://www.dndbeyond.com/avatars/4675/667/636747837482013331.jpeg\",\n    \"https://www.dndbeyond.com/avatars/4675/668/636747837521115242.jpeg\",\n    \"https://www.dndbeyond.com/avatars/4675/669/636747837569942785.jpeg\",\n    \"https://www.dndbeyond.com/avatars/4675/671/636747837638112910.jpeg\",\n    \"https://www.dndbeyond.com/avatars/4675/672/636747837699453839.jpeg\",\n    \"https://www.dndbeyond.com/avatars/4675/674/636747837751071918.jpeg\",\n    \"https://www.dndbeyond.com/avatars/4675/675/636747837794884984.jpeg\",\n    \"https://www.dndbeyond.com/avatars/4675/676/636747837839875603.jpeg\",\n    \"https://www.dndbeyond.com/avatars/4675/678/636747837893364274.jpeg\",\n    \"https://www.dndbeyond.com/avatars/4675/679/636747837952193011.jpeg\",\n    \"https://www.dndbeyond.com/avatars/4675/680/636747837998336262.jpeg\",\n  ];\n\n  _calculateImage() {\n    if (this.source) {\n      this.img = (this.source.basicAvatarUrl) ? this.source.basicAvatarUrl : this.source.largeAvatarUrl;\n      // foundry doesn't support gifs\n      if (this.img && this.img.match(/.gif$/)) {\n        this.img = null;\n      }\n      if (DDBMonster.STOCK_TYPE_IMAGES.includes(this.source.avatarUrl)) {\n        this.stockImage = true;\n      }\n    } else {\n      this.img = null;\n    }\n  }\n\n  _generateFlags() {\n    this.npc.flags.monsterMunch = {\n      url: this.source.url,\n      img: (this.img) ? this.img : this.source.avatarUrl,\n      tokenImg: this.source.avatarUrl,\n      isStockImg: DDBMonster.STOCK_TYPE_IMAGES.includes(this.source.avatarUrl),\n    };\n    this.npc.flags.ddbimporter = {\n      id: this.source.id,\n      entityTypeId: this.source.entityTypeId,\n      // creatureGroup: monster.creatureGroup ? monster.creatureGroup : null,\n      creatureGroupId: this.source.creatureGroupId ? this.source.creatureGroupId : null,\n      creatureFlags: this.source.creatureFlags ? this.source.creatureFlags : [],\n      automatedEvcoationAnimation: this.source.automatedEvcoationAnimation ? this.source.automatedEvcoationAnimation : undefined,\n      version: CONFIG.DDBI.version,\n      isLegacy: this.source.isLegacy,\n    };\n  }\n\n\n  async fetchMonsterSourceFromDDB(id) {\n    if (!id && Number.isInteger(id) && Number.isInteger(Number.parseInt(id))) {\n      throw new Error(\"Please provide a monster ID (number) to fetch\");\n    }\n    const cobaltCookie = getCobalt();\n    const betaKey = PatreonHelper.getPatreonKey();\n    const parsingApi = DDBProxy.getProxy();\n\n    const body = {\n      cobalt: cobaltCookie,\n      betaKey: betaKey,\n      ids: [Number.parseInt(id)],\n    };\n\n    const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n    return new Promise((resolve, reject) => {\n      fetch(`${parsingApi}/proxy/monsters/ids`, {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body), // body data type must match \"Content-Type\" header\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          if (!data.success) {\n            logger.error(`API Failure:`, data.message);\n            reject(data.message);\n          }\n          if (debugJson) {\n            FileHelper.download(JSON.stringify(data), `monsters-raw.json`, \"application/json\");\n          }\n          return data;\n        })\n        .then((data) => {\n          logger.info(`Retrieved monster`, { monster: data.data });\n          this.source = data.data[0];\n          return data.data[0];\n        })\n        .catch((error) => reject(error));\n    });\n  }\n\n  _generateTaggerFlags() {\n    // if (!CONFIG.DDBI.tagger) return;\n    const tags = [\n      \"dndbeyond\",\n      \"ddb-importer\",\n    ];\n\n    const type = this.npc.system.details.type.value;\n    const customType = this.npc.system.details.type.custom;\n    const subType = this.npc.system.details.type.custom;\n    for (const tagElement of [type, customType, subType]) {\n      if (utils.isString(tagElement) && tagElement.trim() !== \"\") {\n        tags.push(tagElement);\n      }\n    }\n\n    foundry.utils.setProperty(this.npc.prototypeToken, \"flags.tagger.tags\", tags);\n  }\n\n  _generate3DModels() {\n    if (!game.canvas3D?.CONFIG?.UI?.TokenBrowser) return;\n    const matches = game.canvas3D.CONFIG.UI.TokenBrowser.findByName(this.name.replace(\"(Legacy)\", \"\").trim());\n    if (matches && matches.length > 0) {\n      foundry.utils.setProperty(this.npc.prototypeToken, \"flags.levels-3d-preview.model3d\", matches[0].output);\n    }\n  }\n\n  async parse() {\n    if (!this.name) this.name = this.source.name;\n    this.npc = foundry.utils.duplicate(await newNPC(this.name, this.source.id));\n    this._calculateImage();\n\n    this.npc.prototypeToken.name = this.name;\n    this._generateFlags();\n\n\n    this.proficiencyBonus = CONFIG.DDB.challengeRatings.find((cr) => cr.id == this.source.challengeRatingId).proficiencyBonus;\n    this.npc.system.attributes.prof = this.proficiencyBonus;\n    this._generateAbilities();\n\n    // skills are different with extras, because DDB\n    if (utils.isString(this.source.skillsHtml) && this.source.skillsHtml.trim() !== \"\") {\n      this._generateSkillsHTML();\n    } else {\n      this._generateSkills();\n    }\n\n    // Senses needed for actor and token\n    this._generateSenses();\n    this._generateTokenSenses();\n\n    this._generateDamageImmunities();\n    this._generateDamageResistances();\n    this._generateDamageVulnerabilities();\n    this._generateConditionImmunities();\n    this._generateSize();\n    this._generateLanguages();\n    this._generateHitPoints();\n    this._generateMovement();\n    await this._generateAC();\n\n    this.cr = CONFIG.DDB.challengeRatings.find((cr) => cr.id == this.source.challengeRatingId);\n    this._generateType();\n\n    const alignment = CONFIG.DDB.alignments.find((c) => this.source.alignmentId == c.id);\n    this.npc.system.details.alignment = alignment ? alignment.name : \"\";\n    this.npc.system.details.cr = this.cr.value;\n    this.npc.system.details.xp = { value: this.cr.xp };\n\n    this._generateSource();\n    this._generateEnvironments();\n    this.npc.system.details.biography.value = this.source.characteristicsDescription;\n\n    await this._generateFeatures();\n\n    // Spellcasting\n    this._generateSpells();\n    await this.addSpells();\n\n    const badItems = this.items.filter((i) => i.name === \"\" || !i.name);\n    if (badItems.length > 0) {\n      logger.error(`${this.source.name} - ${badItems.length} items have no name.`, badItems);\n      this.items = this.items.filter((i) => i.name && i.name !== \"\");\n    }\n\n    this.items = addVision5eStubs(this.items);\n    this.npc.items = this.items;\n\n    if (this.legacyName) {\n      if (this.source.isLegacy) {\n        this.npc.name += \" (Legacy)\";\n        this.npc.prototypeToken.name += \" (Legacy)\";\n      }\n    }\n\n    this.npc = await CompendiumHelper.existingActorCheck(\"monster\", this.npc);\n    this.npc = specialCases(this.npc);\n\n    this.npc = await monsterFeatureEffectAdjustment(this, this.addMonsterEffects);\n\n    if (this.addChrisPremades) {\n      for (let item of this.npc.items) {\n        await ExternalAutomations.applyChrisPremadeEffect({\n          document: item,\n          type: \"monsterfeature\",\n          folderName: this.npc.name,\n          isMonster: true\n        });\n      }\n    }\n    this.npc = transferEffectsToActor(this.npc);\n\n    this._generateTaggerFlags();\n    this._generate3DModels();\n\n    logger.debug(`Generated ${this.name}`, this);\n    return this.npc;\n\n  }\n\n}\n","import logger from \"../logger.js\";\nimport DDBMonster from \"./DDBMonster.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\nimport PatreonHelper from \"../lib/PatreonHelper.js\";\nimport SETTINGS from \"../settings.js\";\nimport { DDBCompendiumFolders } from \"../lib/DDBCompendiumFolders.js\";\n\n// targets for migration\nimport {\n  addNPC,\n  generateIconMap,\n  copyExistingMonsterImages,\n  useSRDMonsterImages\n} from \"../muncher/importMonster.js\";\nimport Iconizer from \"../lib/Iconizer.js\";\nimport DDBItemImporter from \"../lib/DDBItemImporter.js\";\n\nexport default class DDBMonsterFactory {\n\n  static #noteStub(note, nameField = false, monsterNote = false) {\n    logger.info(note, { nameField, monsterNote });\n  }\n\n  static defaultFetchOptions(ids, searchTerm = null) {\n    const searchFilter = $(\"#monster-munch-filter\")[0];\n    const finalSearchTerm = searchTerm ?? (searchFilter?.value ?? \"\");\n    const enableSources = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-use-source-filter\");\n    const sources = enableSources\n      ? game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-muncher-sources\").flat()\n      : [];\n    const homebrew = sources.length > 0\n      ? false\n      : game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-homebrew\");\n    const homebrewOnly = sources.length > 0\n      ? false\n      : game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-homebrew-only\");\n    const exactMatch = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-exact-match\");\n    const excludeLegacy = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-exclude-legacy\");\n\n    const options = {\n      ids,\n      searchTerm: finalSearchTerm.trim(),\n      sources,\n      homebrew,\n      homebrewOnly,\n      exactMatch,\n      excludeLegacy,\n    };\n    logger.debug(\"Generated monster fetch options\", options);\n    return options;\n  }\n\n  constructor ({ ddbData = null, extra = false, munchNote = null, type = \"monsters\", forceUpdate = null } = {}) {\n    this.extra = extra;\n    this.npcs = [];\n    this.source = ddbData;\n    this.munchNote = munchNote ?? DDBMonsterFactory.#noteStub;\n    this.type = type;\n    this.compendiumFolders = new DDBCompendiumFolders(type);\n    this.update = forceUpdate ?? game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-existing\");\n  }\n\n  /**\n   * Fetch monsters from DDB\n   * @param {*} ids limit monsters fetched to specific ids\n   * @returns\n   */\n  async fetchDDBMonsterSourceData({ ids = [], searchTerm = \"\", sources = [], homebrew = false,\n    homebrewOnly = false, exactMatch = false, excludeLegacy = false }\n  ) {\n    const cobaltCookie = getCobalt();\n    const betaKey = PatreonHelper.getPatreonKey();\n    const parsingApi = DDBProxy.getProxy();\n\n    const body = {\n      cobalt: cobaltCookie,\n      betaKey: betaKey,\n    };\n\n    if (ids && !Array.isArray(ids)) {\n      ids = [ids];\n    }\n\n    if (ids && ids.length > 0) {\n      body.ids = [...new Set(ids)];\n    } else {\n      body.sources = sources;\n      body.search = searchTerm;\n      body.homebrew = homebrew;\n      body.homebrewOnly = homebrewOnly;\n      body.searchTerm = encodeURIComponent(searchTerm);\n      body.exactMatch = exactMatch;\n      body.excludeLegacy = excludeLegacy;\n    }\n\n    const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n    const url = ids && ids.length > 0\n      ? `${parsingApi}/proxy/monsters/ids`\n      : `${parsingApi}/proxy/monster`;\n\n    return new Promise((resolve, reject) => {\n      fetch(url, {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body), // body data type must match \"Content-Type\" header\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          if (!data.success) {\n            this.munchNote(`API Failure: ${data.message}`);\n            logger.error(`API Failure:`, data.message);\n            reject(data.message);\n          }\n          if (debugJson) {\n            FileHelper.download(JSON.stringify(data), `monsters-raw.json`, \"application/json\");\n          }\n          return data;\n        })\n        .then((data) => {\n          this.munchNote(`Retrieved ${data.data.length + 1} monsters, starting parse...`, true, false);\n          logger.info(`Retrieved ${data.data.length + 1} monsters`);\n          this.source = data.data;\n          resolve(this.source);\n        })\n        .catch((error) => reject(error));\n    });\n  }\n\n  /**\n   * Processes the downloaded (or provided) DDB Source data for monsters and generates actors\n   * Use this.fetchDDBMonsterSourceData() if you need to get monster data from ddb\n   * @returns\n   */\n  async parse() {\n    let foundryActors = [];\n    let failedMonsterNames = [];\n\n    const useItemAC = game.settings.get(\"ddb-importer\", \"munching-policy-monster-use-item-ac\");\n    const legacyName = game.settings.get(\"ddb-importer\", \"munching-policy-legacy-postfix\");\n    const addMonsterEffects = game.settings.get(\"ddb-importer\", \"munching-policy-add-monster-effects\");\n    const addChrisPremades = game.settings.get(\"ddb-importer\", \"munching-policy-use-chris-premades\");\n\n    const totalMonsters = this.source.length + 1;\n    let i = 1;\n    logger.time(\"Monster Parsing\");\n    for (const monster of this.source) {\n      const name = `${monster.name}${monster.isLegacy ? \" legacy\" : \"\"}`;\n      try {\n        this.munchNote(`Parsing ${i}/${totalMonsters} (${name})`, false, true);\n        i++;\n        logger.debug(`Attempting to parse ${i}/${totalMonsters} ${monster.name}`);\n        logger.time(`Monster Parse ${name}`);\n        const ddbMonster = new DDBMonster(monster, { extra: this.extra, useItemAC, legacyName, addMonsterEffects, addChrisPremades });\n        await ddbMonster.parse();\n        foundryActors.push(foundry.utils.duplicate(ddbMonster.npc));\n        logger.timeEnd(`Monster Parse ${name}`);\n      } catch (err) {\n        logger.error(`Failed parsing ${name}`);\n        logger.error(err);\n        logger.error(err.stack);\n        failedMonsterNames.push(name);\n      }\n    }\n\n    const result = {\n      actors: await Promise.all(foundryActors),\n      failedMonsterNames: failedMonsterNames,\n    };\n\n    logger.timeEnd(\"Monster Parsing\");\n\n    this.munchNote(\n      `Parsed ${result.actors.length} monsters, failed ${result.failedMonsterNames.length} monsters`,\n      false,\n      true\n    );\n    logger.info(`Parsed ${result.actors.length} monsters, failed ${result.failedMonsterNames.length} monsters`);\n    if (result.failedMonsterNames && result.failedMonsterNames.length !== 0) {\n      logger.error(`Failed to parse`, result.failedMonsterNames);\n    }\n\n    this.npcs = result.actors;\n    return result;\n  }\n\n  /**\n   * Downloads, parses, prepares\n   */\n  async createMonsterDocuments(ids = null) {\n    logger.time(\"Monster Process Time\");\n    const updateBool = this.update;\n    const updateImages = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-images\");\n    const uploadDirectory = game.settings.get(SETTINGS.MODULE_ID, \"other-image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n\n    // to speed up file checking we pregenerate existing files now.\n    logger.info(\"Checking for existing files...\");\n    this.munchNote(`Checking existing image files...`);\n    CONFIG.DDBI.KNOWN.TOKEN_LOOKUPS.clear();\n    CONFIG.DDBI.KNOWN.AVATAR_LOOKUPS.clear();\n    await Iconizer.preFetchDDBIconImages();\n    await FileHelper.generateCurrentFiles(uploadDirectory);\n    await FileHelper.generateCurrentFiles(\"[data] modules/ddb-importer/data\");\n\n    if (game.canvas3D?.CONFIG?.UI) {\n      // generate 3d model cache\n      await game.canvas3D.CONFIG.UI.TokenBrowser.preloadData();\n    }\n\n    logger.info(\"Check complete getting monster data...\");\n    this.munchNote(`Getting monster data from DDB...`);\n    await this.fetchDDBMonsterSourceData(DDBMonsterFactory.defaultFetchOptions(ids));\n    this.munchNote(\"\");\n    const monsterResults = await this.parse();\n\n    const itemHandler = new DDBItemImporter(this.type, monsterResults.actors);\n    await itemHandler.init();\n\n    logger.debug(\"Item Importer Loaded\");\n    if (!updateBool || !updateImages) {\n      this.munchNote(`Calculating which monsters to update...`, true);\n      const existingMonsters = await itemHandler.loadPassedItemsFromCompendium(itemHandler.documents, \"npc\", { keepDDBId: true });\n      const existingMonstersTotal = existingMonsters.length + 1;\n      if (!updateBool) {\n        logger.debug(\"Removing existing monsters from import list\");\n        logger.debug(`Matched ${existingMonstersTotal}`);\n        this.munchNote(`Removing ${existingMonstersTotal} from update...`);\n        itemHandler.removeItems(existingMonsters, true);\n      }\n      if (!updateImages) {\n        logger.debug(\"Copying monster images across...\");\n        this.munchNote(`Copying images for ${existingMonstersTotal} monsters...`);\n        itemHandler.documents = copyExistingMonsterImages(itemHandler.documents, existingMonsters);\n      }\n    }\n    this.munchNote(\"\");\n    this.munchNote(`Fiddling with the SRD data...`, true);\n    await itemHandler.srdFiddling();\n    await itemHandler.iconAdditions();\n    this.munchNote(`Generating Icon Map..`, true);\n    await generateIconMap(itemHandler.documents);\n    await useSRDMonsterImages(itemHandler.documents);\n\n    logger.timeEnd(\"Monster Process Time\");\n    logger.debug(\"Monster Document Generation\", {\n      ids,\n      itemHandler,\n    });\n\n    return itemHandler.documents;\n\n  }\n\n  /**\n   * Downloads, parses and imports monsters into a compendium\n   */\n  async processIntoCompendium(ids = null) {\n    logger.time(\"Monster Import Time\");\n\n    const documents = await this.createMonsterDocuments(ids);\n\n    this.munchNote(`Checking compendium folders..`, true);\n    await this.compendiumFolders.loadCompendium(\"monsters\");\n    this.munchNote(\"\", true);\n\n    let monstersParsed = [];\n    let currentMonster = 1;\n    const monsterCount = documents.length;\n    this.munchNote(`Preparing dinner for ${monsterCount} monsters!`, true);\n    for (const monster of documents) {\n      this.munchNote(`[${currentMonster}/${monsterCount}] Importing ${monster.name} to compendium`, false, true);\n      logger.debug(`Preparing ${monster.name} data for import`);\n      const munched = await addNPC(monster, \"monster\");\n      monstersParsed.push(munched);\n      currentMonster += 1;\n    }\n    logger.debug(\"Monsters Parsed\", monstersParsed);\n    this.munchNote(\"\", false, true);\n\n    logger.timeEnd(\"Monster Import Time\");\n    if (ids !== null) {\n      return Promise.all(monstersParsed);\n    }\n    return monsterCount;\n  }\n}\n","import DICTIONARY from '../../dictionary.js';\nimport { getGenericConditionAffectData } from '../../effects/effects.js';\nimport DDBHelper from '../../lib/DDBHelper.js';\nimport utils from '../../lib/utils.js';\nimport logger from '../../logger.js';\n\nfunction htmlToText(html) {\n  // keep html brakes and tabs\n  return html.replace(/<\\/td>/g, \"\\n\")\n    .replace(/<\\/table>/g, \"\\n\")\n    .replace(/<\\/tr>/g, \"\\n\")\n    .replace(/<\\/p>/g, \"\\n\")\n    .replace(/<\\/div>/g, \"\\n\")\n    .replace(/<\\/h>/g, \"\\n\")\n    .replace(/<br>/g, \"\\n\")\n    .replace(/<br( )*\\/>/g, \"\\n\")\n    .replace(/<[A-Za-z/][^<>]*>/g, \"\");\n}\n\nexport default class AdvancementHelper {\n\n  constructor({ ddbData, type, dictionary = null, noMods = false }) {\n    this.ddbData = ddbData;\n    this.type = type;\n    this.noMods = noMods;\n    this.dictionary = dictionary;\n  }\n\n  static stripDescription(description) {\n    const descriptionReplaced = description\n      .replaceAll(/<br \\/>(?:\\s*)*/g, \"<br />\\n\")\n      .replaceAll(/<\\/p>(?:\\s*)*/g, \"</p>\\n\")\n      .replaceAll(/<\\/dt>(?:\\s*)*<dt>/g, \"</dt>\\n<dt>\");\n    // console.warn(descriptionReplaced);\n    return htmlToText(descriptionReplaced);\n    // return utils.stripHtml(descriptionReplaced, true);\n  }\n\n\n  getSkillChoicesFromOptions(feature, level, proficiencyFeatures = []) {\n    const skillsChosen = new Set();\n    const skillChoices = new Set();\n\n    const choiceDefinitions = this.ddbData.character.choices.choiceDefinitions;\n\n    this.ddbData.character.choices[this.type].filter((choice) =>\n      // check all features\n      ((feature === null && proficiencyFeatures.some((f) => f.id === choice.componentId && f.requiredLevel === level))\n      // check specific feature\n       || (feature && feature.id === choice.componentId && feature.requiredLevel === level))\n      && choice.subType === 1\n      && choice.type === 2\n    ).forEach((choice) => {\n      const optionChoice = choiceDefinitions.find((selection) => selection.id === `${choice.componentTypeId}-${choice.type}`);\n      if (!optionChoice) return;\n      const option = optionChoice.options.find((option) => option.id === choice.optionValue);\n      if (!option) return;\n      const smallChosen = DICTIONARY.character.skills.find((skill) => skill.label === option.label);\n      if (smallChosen) skillsChosen.add(smallChosen.name);\n      const optionNames = optionChoice.options.filter((option) =>\n        DICTIONARY.character.skills.some((skill) => skill.label === option.label)\n        && choice.optionIds.includes(option.id)\n      ).map((option) =>\n        DICTIONARY.character.skills.find((skill) => skill.label === option.label).name\n      );\n      optionNames.forEach((skill) => {\n        skillChoices.add(skill);\n      });\n    });\n\n    return {\n      chosen: Array.from(skillsChosen),\n      choices: Array.from(skillChoices),\n    };\n  }\n\n  getToolChoicesFromOptions(feature, level) {\n    const toolsChosen = new Set();\n    const toolChoices = new Set();\n\n    const choiceDefinitions = this.ddbData.character.choices.choiceDefinitions;\n\n    this.ddbData.character.choices[this.type].filter((choice) =>\n      feature.id === choice.componentId\n      && feature.requiredLevel === level\n      && choice.subType === 1\n      && choice.type === 2\n    ).forEach((choice) => {\n      const optionChoice = choiceDefinitions.find((selection) => selection.id === `${choice.componentTypeId}-${choice.type}`);\n      if (!optionChoice) return;\n      const option = optionChoice.options.find((option) => option.id === choice.optionValue);\n      if (!option) return;\n      const smallChosen = DICTIONARY.character.proficiencies.find((prof) => prof.type === \"Tool\" && prof.name === option.label);\n      if (smallChosen) {\n        const toolStub = smallChosen.toolType === \"\"\n          ? smallChosen.baseTool\n          : `${smallChosen.toolType}:${smallChosen.baseTool}`;\n        toolsChosen.add(toolStub);\n      }\n      const optionNames = optionChoice.options\n        .filter((option) =>\n          DICTIONARY.character.proficiencies.some((prof) => prof.type === \"Tool\" && prof.name === option.label)\n          && choice.optionIds.includes(option.id)\n        )\n        .map((option) =>\n          DICTIONARY.character.proficiencies.find((prof) => prof.type === \"Tool\" && prof.name === option.label)\n        );\n      optionNames.forEach((tool) => {\n        const toolStub = tool.toolType === \"\"\n          ? tool.baseTool\n          : `${tool.toolType}:${tool.baseTool}`;\n        toolChoices.add(toolStub);\n      });\n    });\n\n    return {\n      chosen: Array.from(toolsChosen),\n      choices: Array.from(toolChoices),\n    };\n  }\n\n  getLanguageChoicesFromOptions(feature, level) {\n    const languagesChosen = new Set();\n    const languageChoices = new Set();\n\n    const choiceDefinitions = this.ddbData.character.choices.choiceDefinitions;\n\n    this.ddbData.character.choices[this.type].filter((choice) =>\n      feature.id === choice.componentId\n      && feature.requiredLevel === level\n      && choice.subType === 3\n      && choice.type === 2\n    ).forEach((choice) => {\n      const optionChoice = choiceDefinitions.find((selection) => selection.id === `${choice.componentTypeId}-${choice.type}`);\n      if (!optionChoice) return;\n      const option = optionChoice.options.find((option) => option.id === choice.optionValue);\n      if (!option) return;\n      const smallChosen = DICTIONARY.character.languages.find((lang) => lang.name === option.label);\n      if (smallChosen) languagesChosen.add(smallChosen.value);\n      const optionNames = optionChoice.options.filter((option) =>\n        DICTIONARY.character.languages.find((lang) => lang.name === option.label)\n        && choice.optionIds.includes(option.id)\n      ).map((option) =>\n        DICTIONARY.character.languages.find((lang) => lang.name === option.label).value\n      );\n      optionNames.forEach((skill) => {\n        languageChoices.add(skill);\n      });\n    });\n\n    return {\n      chosen: Array.from(languagesChosen),\n      choices: Array.from(languageChoices),\n    };\n  }\n\n  getChoicesFromOptions(feature, type, level) {\n    const chosen = new Set();\n    const choices = new Set();\n\n    const choiceDefinitions = this.ddbData.character.choices.choiceDefinitions;\n\n    this.ddbData.character.choices[this.type].filter((choice) => {\n      return feature.id === choice.componentId\n        && feature.requiredLevel === level\n        && choice.subType === 1\n        && choice.type === 2;\n    }).forEach((choice) => {\n      const optionChoice = choiceDefinitions.find((selection) => selection.id === `${choice.componentTypeId}-${choice.type}`);\n      if (!optionChoice) return;\n      const option = optionChoice.options.find((option) => option.id === choice.optionValue);\n      if (!option) return;\n      const smallChosen = DICTIONARY.character.proficiencies.find((prof) => prof.type === type && prof.name === option.label);\n      if (smallChosen) {\n        const stub = smallChosen.advancement === \"\"\n          ? smallChosen.foundryValue\n          : `${smallChosen.advancement}:${smallChosen.foundryValue}`;\n        chosen.add(stub);\n      }\n      const optionNames = optionChoice.options\n        .filter((option) =>\n          DICTIONARY.character.proficiencies.some((prof) => prof.type === type && prof.name === option.label)\n          && choice.optionIds.includes(option.id)\n        )\n        .map((option) =>\n          DICTIONARY.character.proficiencies.find((prof) => prof.type === type && prof.name === option.label)\n        );\n      optionNames.forEach((prof) => {\n        const stub = prof.advancement === \"\"\n          ? prof.foundryValue\n          : `${prof.advancement}:${prof.foundryValue}`;\n        choices.add(stub);\n      });\n    });\n\n    return {\n      chosen: Array.from(chosen),\n      choices: Array.from(choices),\n    };\n  }\n\n  getExpertiseChoicesFromOptions(feature, level) {\n    const skillsChosen = new Set();\n    const skillChoices = new Set();\n    const toolsChosen = new Set();\n    const toolChoices = new Set();\n\n    const choiceDefinitions = this.ddbData.character.choices.choiceDefinitions;\n\n    this.ddbData.character.choices[this.type].filter((choice) =>\n      feature.id === choice.componentId\n      && feature.requiredLevel === level\n      && choice.subType === 2\n      && choice.type === 2\n    ).forEach((choice) => {\n      const optionChoice = choiceDefinitions.find((selection) => selection.id === `${choice.componentTypeId}-${choice.type}`);\n      if (!optionChoice) return;\n      const option = optionChoice.options.find((option) => option.id === choice.optionValue);\n      if (!option) return;\n      const smallChosenSkill = DICTIONARY.character.skills.find((skill) => skill.label === option.label);\n      if (smallChosenSkill) skillsChosen.add(smallChosenSkill.name);\n      const smallChosenTool = DICTIONARY.character.proficiencies.find((p) => p.type === \"Tool\" && p.name === option.label);\n      if (smallChosenTool) toolsChosen.add(smallChosenTool.baseTool);\n\n      const skillOptionNames = optionChoice.options.filter((option) =>\n        DICTIONARY.character.skills.some((skill) => skill.label === option.label)\n        && choice.optionIds.includes(option.id)\n      ).map((option) =>\n        DICTIONARY.character.skills.find((skill) => skill.label === option.label).name\n      );\n      skillOptionNames.forEach((skill) => {\n        skillChoices.add(skill);\n      });\n\n      const toolOptionNames = optionChoice.options.filter((option) =>\n        DICTIONARY.character.proficiencies.find((p) => p.type === \"Tool\" && p.name === option.label)\n        && choice.optionIds.includes(option.id)\n      ).map((option) =>\n        DICTIONARY.character.proficiencies.find((p) => p.type === \"Tool\" && p.name === option.label).baseTool\n      );\n      toolOptionNames.forEach((tool) => {\n        toolChoices.add(tool);\n      });\n    });\n\n    return {\n      skills: {\n        chosen: Array.from(skillsChosen),\n        choices: Array.from(skillChoices),\n      },\n      tools: {\n        chosen: Array.from(toolsChosen),\n        choices: Array.from(toolChoices),\n      },\n    };\n  }\n\n  static advancementUpdate(advancement, { pool = [], chosen = [], count = 0, grants = [] } = {}) {\n    if (grants.length > 0) {\n      advancement.updateSource({\n        configuration: {\n          grants,\n        }\n      });\n    }\n    if (pool.length > 0) {\n      advancement.updateSource({\n        configuration: {\n          choices: [{\n            count: count === 0 ? undefined : count,\n            pool,\n          }],\n        }\n      });\n    }\n\n    if (chosen.length > 0) {\n      advancement.updateSource({\n        value: {\n          chosen,\n        },\n      });\n    }\n  }\n\n  static getSaveAdvancement(mods, availableToMulticlass, level) {\n    const updates = DICTIONARY.character.abilities\n      .filter((ability) => {\n        return DDBHelper.filterModifiers(mods, \"proficiency\", { subType: `${ability.long}-saving-throws` }).length > 0;\n      })\n      .map((ability) => `saves:${ability.value}`);\n\n    if (updates.length === 0) return null;\n\n    const advancement = new game.dnd5e.documents.advancement.TraitAdvancement();\n    advancement.updateSource({\n      classRestriction: level > 1 ? \"\" : availableToMulticlass ? \"secondary\" : \"primary\",\n      configuration: {\n        grants: updates,\n        allowReplacements: false,\n      },\n      level: level,\n    });\n\n    // add selection\n    if (updates.length > 0) {\n      advancement.updateSource({\n        value: {\n          chosen: updates,\n        },\n      });\n    }\n\n    return advancement;\n\n  }\n\n  getSkillAdvancement(mods, feature, availableToMulticlass, level) {\n    const baseProficiency = feature.name === \"Proficiencies\";\n    const skillsFromMods = mods\n      .filter((mod) =>\n        DICTIONARY.character.skills.find((s) => s.label === mod.friendlySubtypeName)\n      )\n      .map((mod) =>\n        DICTIONARY.character.skills.find((s) => s.label === mod.friendlySubtypeName).name\n      );\n\n    const advancement = new game.dnd5e.documents.advancement.TraitAdvancement();\n\n    const parsedSkills = AdvancementHelper.parseHTMLSkills(feature.description);\n    const chosenSkills = this.noMods\n      ? { chosen: [], choices: [] }\n      : this.getSkillChoicesFromOptions(feature, level);\n\n    const count = this.noMods || parsedSkills.number > 0 || parsedSkills.grants.length > 0\n      ? parsedSkills.number\n      : baseProficiency && availableToMulticlass\n        ? this.dictionary.multiclassSkill\n        : mods.length;\n\n    // console.warn(`Parsing skill advancement for level ${level}`, {\n    //   availableToMulticlass,\n    //   level,\n    //   feature,\n    //   mods,\n    //   parsedSkills,\n    //   chosenSkills,\n    //   count,\n    //   skillsFromMods,\n    // });\n\n    if (count === 0 && parsedSkills.grants.length === 0) return null;\n\n    const classRestriction = availableToMulticlass === undefined\n      ? undefined\n      : level > 1 ? \"\" : availableToMulticlass ? \"secondary\" : \"primary\";\n\n    const title = feature.name !== \"Proficiencies\" && !feature.name.startsWith(\"Background:\")\n      ? feature.name\n      : \"Skills\";\n\n    advancement.updateSource({\n      title,\n      classRestriction,\n      configuration: {\n        allowReplacements: true,\n      },\n      level,\n    });\n\n    const pool = this.noMods || parsedSkills.choices.length > 0 || parsedSkills.grants.length > 0\n      ? parsedSkills.choices.map((skill) => `skills:${skill}`)\n      : skillsFromMods.map((choice) => `skills:${choice}`);\n\n    const chosen = this.noMods || chosenSkills.chosen.length > 0\n      ? chosenSkills.chosen.map((choice) => `skills:${choice}`)\n        .concat(parsedSkills.grants.map((grant) => `skills:${grant}`))\n      : skillsFromMods.map((choice) => `skills:${choice}`);\n\n    AdvancementHelper.advancementUpdate(advancement, {\n      pool,\n      chosen,\n      count,\n      grants: parsedSkills.grants.map((grant) => `skills:${grant}`),\n    });\n\n    return advancement;\n  }\n\n\n  getLanguageAdvancement(mods, feature, level) {\n    const languagesMods = DDBHelper.filterModifiers(mods, \"language\");\n\n    const advancement = new game.dnd5e.documents.advancement.TraitAdvancement();\n\n    const parsedLanguages = AdvancementHelper.parseHTMLLanguages(feature.description);\n    const chosenLanguages = this.noMods\n      ? { chosen: [], choices: [] }\n      : this.getLanguageChoicesFromOptions(feature, level);\n\n    const languagesFromMods = languagesMods\n      .filter((mod) => DICTIONARY.character.languages.find((lang) => lang.name === mod.friendlySubtypeName))\n      .map((mod) => {\n        const language = DICTIONARY.character.languages.find((lang) => lang.name === mod.friendlySubtypeName);\n        return language.advancement ? `${language.advancement}:${language.value}` : language.value;\n      });\n\n    const count = this.noMods || parsedLanguages.number > 0 || parsedLanguages.grants.length > 0\n      ? parsedLanguages.number !== 0\n        ? parsedLanguages.number\n        : 1\n      : languagesMods.length;\n\n    // console.warn(`Languages`, {\n    //   i: level,\n    //   languageFeature: feature,\n    //   mods,\n    //   languagesMods,\n    //   parsedLanguages,\n    //   chosenLanguages,\n    //   languagesFromMods,\n    //   languageCount: count,\n    // });\n\n    if (count === 0 && parsedLanguages.grants.length === 0) return null;\n\n    const pool = this.noMods || parsedLanguages.choices.length > 0 || parsedLanguages.grants.length > 0\n      ? parsedLanguages.choices.map((choice) => `languages:${choice}`)\n      : languagesFromMods.map((choice) => `languages:${choice}`);\n\n    const chosen = this.noMods || chosenLanguages.chosen.length > 0\n      ? chosenLanguages.chosen.map((choice) => `languages:${choice}`)\n        .concat(parsedLanguages.grants.map((grant) => `languages:${grant}`))\n      : languagesFromMods.map((choice) => `languages:${choice}`);\n\n    advancement.updateSource({\n      title: feature.name !== \"Proficiencies\" && !feature.name.startsWith(\"Background:\") ? feature.name : \"Languages\",\n      configuration: {\n        allowReplacements: true,\n      },\n      level: level,\n    });\n\n    AdvancementHelper.advancementUpdate(advancement, {\n      pool,\n      chosen,\n      count: count,\n      grants: parsedLanguages.grants.map((grant) => `languages:${grant}`),\n    });\n\n    return advancement;\n  }\n\n  getToolAdvancement(mods, feature, level) {\n    const proficiencyMods = DDBHelper.filterModifiers(mods, \"proficiency\");\n    const toolMods = proficiencyMods\n      .filter((mod) =>\n        DICTIONARY.character.proficiencies\n          .some((prof) => prof.type === \"Tool\" && prof.name === mod.friendlySubtypeName)\n      );\n\n    const advancement = new game.dnd5e.documents.advancement.TraitAdvancement();\n\n    const parsedTools = AdvancementHelper.parseHTMLTools(feature.description);\n    const chosenTools = this.noMods\n      ? { chosen: [], choices: [] }\n      : this.getToolChoicesFromOptions(feature, level);\n\n    const toolsFromMods = toolMods.map((mod) => {\n      const tool = DICTIONARY.character.proficiencies\n        .find((prof) => prof.type === \"Tool\" && prof.name === mod.friendlySubtypeName);\n      return tool.toolType === \"\"\n        ? tool.baseTool\n        : `${tool.toolType}:${tool.baseTool}`;\n    });\n\n    const count = this.noMods || parsedTools.number > 0 || parsedTools.grants.length > 0\n      ? parsedTools.number > 0\n        ? parsedTools.number\n        : 1\n      : toolMods.length;\n\n    // console.warn(`Tools`, {\n    //   level,\n    //   feature,\n    //   mods,\n    //   proficiencyMods,\n    //   toolMods,\n    //   parsedTools,\n    //   chosenTools,\n    //   toolsFromMods,\n    //   count,\n    // });\n\n    if (count === 0 && parsedTools.grants.length === 0) return null;\n\n    const pool = this.noMods || parsedTools.choices.length > 0 || parsedTools.grants.length > 0\n      ? parsedTools.choices.map((choice) => `tool:${choice}`)\n      : toolsFromMods.map((choice) => `tool:${choice}`);\n\n\n    const chosen = this.noMods || chosenTools.chosen.length > 0\n      ? chosenTools.chosen.map((choice) => `tool:${choice}`)\n        .concat(parsedTools.grants.map((grant) => `tool:${grant}`))\n      : toolsFromMods.map((choice) => `tool:${choice}`);\n\n    advancement.updateSource({\n      title: feature.name !== \"Proficiencies\" && !feature.name.startsWith(\"Background:\") ? feature.name : \"Tool Proficiencies\",\n      configuration: {\n        allowReplacements: true,\n      },\n      level: level,\n    });\n\n    // console.warn(\"tools\", {\n    //   pool,\n    //   chosen,\n    //   count,\n    //   grants: parsedTools.grants.map((grant) => `tool:${grant}`),\n    // });\n\n    AdvancementHelper.advancementUpdate(advancement, {\n      pool,\n      chosen,\n      count,\n      grants: parsedTools.grants.map((grant) => `tool:${grant}`),\n    });\n\n    return advancement;\n  }\n\n  getArmorAdvancement(mods, feature, availableToMulticlass, level) {\n    const proficiencyMods = DDBHelper.filterModifiers(mods, \"proficiency\");\n    const armorMods = proficiencyMods\n      .filter((mod) =>\n        DICTIONARY.character.proficiencies\n          .some((prof) => prof.type === \"Armor\" && prof.name === mod.friendlySubtypeName)\n      );\n\n    const advancement = new game.dnd5e.documents.advancement.TraitAdvancement();\n\n    const parsedArmors = AdvancementHelper.parseHTMLArmorProficiencies(feature.description);\n    const chosenArmors = this.noMods\n      ? { chosen: [], choices: [] }\n      : this.getChoicesFromOptions(feature, \"Armor\", level);\n\n    const armorsFromMods = armorMods.map((mod) => {\n      const armor = DICTIONARY.character.proficiencies\n        .find((prof) => prof.type === \"Armor\" && prof.name === mod.friendlySubtypeName);\n      return armor.advancement === \"\"\n        ? armor.foundryValue\n        : `${armor.advancement}:${armor.foundryValue}`;\n    });\n\n    const count = this.noMods || parsedArmors.number > 0 || parsedArmors.grants.length > 0\n      ? parsedArmors.number > 0\n        ? parsedArmors.number\n        : 1\n      : armorMods.length;\n\n    // console.warn(`Armor`, {\n    //   level,\n    //   feature,\n    //   mods,\n    //   proficiencyMods,\n    //   toolMods: armorMods,\n    //   parsedArmors,\n    //   chosenArmors,\n    //   armorsFromMods,\n    //   count,\n    // });\n\n    if (count === 0 && parsedArmors.grants.length === 0) return null;\n\n    const classRestriction = availableToMulticlass === undefined\n      ? undefined\n      : level > 1 ? \"\" : availableToMulticlass ? \"secondary\" : \"primary\";\n\n    const pool = this.noMods || parsedArmors.choices.length > 0 || parsedArmors.grants.length > 0\n      ? parsedArmors.choices.map((choice) => `armor:${choice}`)\n      : armorsFromMods.map((choice) => `armor:${choice}`);\n\n    const chosen = this.noMods || chosenArmors.chosen.length > 0\n      ? chosenArmors.chosen.map((choice) => `armor:${choice}`)\n        .concat(parsedArmors.grants.map((grant) => `armor:${grant}`))\n      : armorsFromMods.map((choice) => `armor:${choice}`);\n\n    advancement.updateSource({\n      title: feature.name !== \"Proficiencies\" && !feature.name.startsWith(\"Background:\") ? feature.name : \"Armor Proficiencies\",\n      classRestriction,\n      configuration: {\n        allowReplacements: false,\n      },\n      level: level,\n    });\n\n    // console.warn(\"tools\", {\n    //   pool,\n    //   chosen,\n    //   count,\n    //   grants: parsedTools.grants.map((grant) => `tool:${grant}`),\n    // });\n\n    AdvancementHelper.advancementUpdate(advancement, {\n      pool,\n      chosen,\n      count,\n      grants: parsedArmors.grants.map((grant) => `armor:${grant}`),\n    });\n\n    return advancement;\n  }\n\n  getWeaponAdvancement(mods, feature, level) {\n    const proficiencyMods = DDBHelper.filterModifiers(mods, \"proficiency\");\n    const weaponMods = proficiencyMods\n      .filter((mod) =>\n        DICTIONARY.character.proficiencies\n          .some((prof) => prof.type === \"Weapon\" && prof.name === mod.friendlySubtypeName)\n      );\n\n    const advancement = new game.dnd5e.documents.advancement.TraitAdvancement();\n\n    const parsedWeapons = AdvancementHelper.parseHTMLWeaponProficiencies(feature.description);\n    const chosenWeapons = this.noMods\n      ? { chosen: [], choices: [] }\n      : this.getChoicesFromOptions(feature, \"Weapon\", level);\n\n    const weaponsFromMods = weaponMods.map((mod) => {\n      const weapon = DICTIONARY.character.proficiencies\n        .find((prof) => prof.type === \"Weapon\" && prof.name === mod.friendlySubtypeName);\n      return weapon.advancement === \"\"\n        ? weapon.foundryValue\n        : `${weapon.advancement}:${weapon.foundryValue}`;\n    });\n\n    const count = this.noMods || parsedWeapons.number > 0 || parsedWeapons.grants.length > 0\n      ? parsedWeapons.number > 0\n        ? parsedWeapons.number\n        : 1\n      : weaponMods.length;\n\n    // console.warn(`Weapon`, {\n    //   level,\n    //   feature,\n    //   mods,\n    //   proficiencyMods,\n    //   armorMods: weaponMods,\n    //   parsedArmors: parsedWeapons,\n    //   chosenArmors: chosenWeapons,\n    //   armorsFromMods: weaponsFromMods,\n    //   count,\n    // });\n\n    if (count === 0 && parsedWeapons.grants.length === 0) return null;\n\n    const pool = this.noMods || parsedWeapons.choices.length > 0 || parsedWeapons.grants.length > 0\n      ? parsedWeapons.choices.map((choice) => `weapon:${choice}`)\n      : weaponsFromMods.map((choice) => `weapon:${choice}`);\n\n\n    const chosen = this.noMods || chosenWeapons.chosen.length > 0\n      ? chosenWeapons.chosen.map((choice) => `weapon:${choice}`)\n        .concat(parsedWeapons.grants.map((grant) => `weapon:${grant}`))\n      : weaponsFromMods.map((choice) => `weapon:${choice}`);\n\n    advancement.updateSource({\n      title: feature.name !== \"Proficiencies\" && !feature.name.startsWith(\"Background:\") ? feature.name : \"Weapon Proficiencies\",\n      configuration: {\n        allowReplacements: false,\n      },\n      level: level,\n    });\n\n    // console.warn(\"weapons\", {\n    //   pool,\n    //   chosen,\n    //   count,\n    //   grants: parsedWeapons.grants.map((grant) => `weapon:${grant}`),\n    // });\n\n    AdvancementHelper.advancementUpdate(advancement, {\n      pool,\n      chosen,\n      count,\n      grants: parsedWeapons.grants.map((grant) => `weapon:${grant}`),\n    });\n\n    return advancement;\n  }\n\n  getExpertiseAdvancement(feature, level) {\n    const advancement = new game.dnd5e.documents.advancement.TraitAdvancement();\n    const expertiseOptions = this.noMods\n      ? { chosen: [], choices: [] }\n      : this.getExpertiseChoicesFromOptions(feature, level);\n\n    // add HTML Parsing to improve this at a later date\n\n    const pool = feature.name === \"Survivalist\"\n      ? [\"skills:prc\", \"skills:nat\"]\n      : feature.name === \"Expertise\"\n        ? [\"skills:*\", \"tool:thief\"]\n        : [\"skills:*\"];\n\n    const grants = feature.name === \"Survivalist\"\n      ? pool\n      : [];\n\n    const count = feature.name === \"Survivalist\"\n      ? 0\n      : expertiseOptions.length > 0\n        ? expertiseOptions.length\n        : 2;\n\n    advancement.updateSource({\n      title: feature.name === \"Survivalist\" ? `${feature.name} (Expertise)` : `${feature.name}`,\n      configuration: {\n        allowReplacements: false,\n        mode: \"expertise\",\n      },\n      level: level,\n    });\n\n    const chosenSkills = expertiseOptions.skills.chosen.map((skill) => `skills:${skill}`);\n    const chosenTools = expertiseOptions.tools.chosen.map((tool) => `tool:${tool}`);\n    const chosen = [].concat(chosenSkills, chosenTools, grants);\n\n    AdvancementHelper.advancementUpdate(advancement, {\n      chosen,\n      pool,\n      count,\n      grants,\n    });\n\n    return advancement;\n\n  }\n\n  static CONDITION_ID_MAPPING = {\n    1: \"dr\",\n    2: \"di\",\n    3: \"dv\",\n    4: \"ci\",\n  };\n\n  getConditionAdvancement(mods, feature, level) {\n    const conditionsFromMods = [];\n    [\"resistance\", \"immunity\", \"vulnerability\", \"immunity\"].forEach((condition, i) => {\n      const proficiencyMods = DDBHelper.filterModifiers(mods, condition, { restriction: null });\n      const conditionId = i + 1;\n      const conditionData = getGenericConditionAffectData(proficiencyMods, condition, conditionId, true);\n      const conditionValues = new Set(conditionData.map((result) => `${AdvancementHelper.CONDITION_ID_MAPPING[conditionId]}:${result.value}`));\n      // console.warn(\"Individual Parse\", {\n      //   proficiencyMods,\n      //   condition,\n      //   conditionId,\n      //   conditionData,\n      //   conditionValues,\n      // });\n      conditionsFromMods.push(...conditionValues);\n    });\n\n    const advancement = new game.dnd5e.documents.advancement.TraitAdvancement();\n\n    const parsedConditions = AdvancementHelper.parseHTMLConditions(feature.description);\n\n    const count = this.noMods || parsedConditions.number > 0 || parsedConditions.grants.length > 0\n      ? parsedConditions.number > 0\n        ? parsedConditions.number\n        : 1\n      : conditionsFromMods.length;\n\n    // console.warn(`Conditions`, {\n    //   level,\n    //   feature,\n    //   mods,\n    //   conditionsFromMods,\n    //   parsedConditions,\n    //   count,\n    // });\n\n    if (count === 0 && parsedConditions.grants.length === 0) return null;\n\n    const pool = this.noMods || parsedConditions.choices.length > 0 || parsedConditions.grants.length > 0\n      ? parsedConditions.choices.map((choice) => choice)\n      : conditionsFromMods.map((choice) => choice);\n\n    const chosen = this.noMods\n      ? parsedConditions.grants.map((grant) => grant)\n      : conditionsFromMods.map((choice) => choice);\n\n    advancement.updateSource({\n      title: feature.name !== \"Proficiencies\" && !feature.name.startsWith(\"Background:\") ? feature.name : \"\",\n      configuration: {\n        allowReplacements: false,\n        hint: parsedConditions.hint,\n      },\n      level: level,\n    });\n\n    // console.warn(\"conditions\", {\n    //   pool,\n    //   chosen,\n    //   count,\n    //   grants: parsedConditions.grants.map((grant) => grant),\n    // });\n\n    AdvancementHelper.advancementUpdate(advancement, {\n      pool,\n      chosen,\n      count,\n      grants: parsedConditions.grants.map((grant) => grant),\n    });\n\n    return advancement;\n  }\n\n  // Feats with multichoices\n  // You gain proficiency in any combination of three skills or tools of your choice.\n\n  static convertToSingularDie(advancement) {\n    advancement.title += ` (Die)`;\n    for (const key of Object.keys(advancement.configuration.scale)) {\n      advancement.configuration.scale[key].n = 1;\n    }\n    return advancement;\n  }\n\n  static renameTotal(advancement) {\n    advancement.title += ` (Total)`;\n    return advancement;\n  }\n\n  static addAdditionalUses(advancement) {\n    const adv = new game.dnd5e.documents.advancement.ScaleValueAdvancement();\n    const update = {\n      configuration: {\n        identifier: `${advancement.configuration.identifier}-uses`,\n        type: \"number\",\n        scale: {},\n      },\n      title: `${advancement.title} (Uses)`,\n    };\n\n    for (const [key, value] of Object.entries(advancement.configuration.scale)) {\n      // console.warn(\"key\", {key, value});\n      update.configuration.scale[key] = {\n        value: value.number,\n      };\n    }\n    adv.updateSource(update);\n\n    return adv.toObject();\n  }\n\n  static addSingularDie(advancement) {\n    const scaleValue = AdvancementHelper.convertToSingularDie(foundry.utils.duplicate(advancement));\n\n    scaleValue._id = foundry.utils.randomID();\n    scaleValue.configuration.identifier = `${advancement.configuration.identifier}-die`;\n\n    return scaleValue;\n  }\n\n  static generateScaleValueAdvancement(feature) {\n    // distance, number, dice, anything\n    let type = \"string\";\n    const die = feature.levelScales[0]?.dice\n      ? feature.levelScales[0]?.dice\n      : feature.levelScales[0]?.die\n        ? feature.levelScales[0]?.die\n        : undefined;\n\n    if (die?.diceString && (!die.fixedValue || die.fixedValue === \"\")) {\n      type = \"dice\";\n    } else if (feature.levelScales[0].fixedValue\n      && feature.levelScales[0].fixedValue !== \"\"\n      && Number.isInteger(feature.levelScales[0].fixedValue)\n    ) {\n      type = \"number\";\n    }\n\n    const advancement = new game.dnd5e.documents.advancement.ScaleValueAdvancement();\n\n    const update = {\n      configuration: {\n        identifier: utils.referenceNameString(feature.name).toLowerCase(),\n        type,\n        scale: {},\n      },\n      value: {},\n      title: feature.name,\n    };\n\n    feature.levelScales.forEach((scale) => {\n      const die = scale.dice ? scale.dice : scale.die ? scale.die : undefined;\n      if (type === \"dice\") {\n        update.configuration.scale[scale.level] = {\n          n: die.diceCount,\n          die: die.diceValue,\n        };\n      } else if (type === \"number\") {\n        update.configuration.scale[scale.level] = {\n          value: scale.fixedValue,\n        };\n      } else {\n        let value = (die.diceString && die.diceString !== \"\")\n          ? die.diceString\n          : \"\";\n        if (die.fixedValue && die.fixedValue !== \"\") {\n          value += ` + ${die.fixedValue}`;\n        }\n        if (value === \"\") {\n          value = scale.description;\n        }\n        update.configuration.scale[scale.level] = {\n          value,\n        };\n      }\n    });\n\n    advancement.updateSource(update);\n\n    return advancement.toObject();\n  }\n\n  static parseHTMLSaves(description) {\n    const results = [];\n\n    const textDescription = AdvancementHelper.stripDescription(description);\n\n    // get class saves\n    const savingText = textDescription.toLowerCase().split(\"saving throws:\").pop().split(\"\\n\")[0].split(\"The\")[0].split(\".\")[0].split(\"skills:\")[0].trim();\n    const saveRegex = /(.*)(?:$|The|\\.$|\\w+:)/im;\n    const saveMatch = savingText.match(saveRegex);\n\n    if (saveMatch) {\n      const saveNames = saveMatch[1].replace(' and ', ',').split(',').map((ab) => ab.trim());\n      const saves = saveNames\n        .filter((name) => DICTIONARY.character.abilities.some((ab) => ab.long.toLowerCase() === name.toLowerCase()))\n        .map((name) => {\n          const dictAbility = DICTIONARY.character.abilities.find((ab) => ab.long.toLowerCase() === name.toLowerCase());\n          return dictAbility.value;\n        });\n      results.push(...saves);\n    }\n    return results;\n  }\n\n  static parseHTMLSkills(description) {\n    const parsedSkills = {\n      choices: [],\n      grants: [],\n      number: 0,\n      allowReplacements: true,\n    };\n    const textDescription = AdvancementHelper.stripDescription(description).replace(/\\s/g, \" \");\n\n    // Choose any three e.g. bard\n    const anySkillRegex = /Skills:\\sChoose any (\\w+)(.*)($|\\.$|\\w+:)/im;\n    const anyMatch = textDescription.match(anySkillRegex);\n\n    if (anyMatch) {\n      // const skills = DICTIONARY.character.skills.map((skill) => skill.name);\n      const numberSkills = DICTIONARY.numbers.find((num) => anyMatch[1].toLowerCase() === num.natural);\n      // eslint-disable-next-line require-atomic-updates\n      parsedSkills.number = numberSkills ? numberSkills.num : 2;\n      parsedSkills.choices = [\"*\"];\n      return parsedSkills;\n    }\n\n    // Skill Proficiencies: Nature, Survival\n    const backgroundSkillRegex = /Skill Proficiencies:\\s(.*?)($|\\.$|\\w+:)/im;\n    const backgroundMatch = textDescription.match(backgroundSkillRegex);\n\n    if (backgroundMatch) {\n      const skills = backgroundMatch[1].replace(\" and \", \",\").split(\",\").map((skill) => skill.trim());\n      skills.forEach((grant) => {\n        const dictSkill = DICTIONARY.character.skills\n          .find((skill) => skill.label.toLowerCase() === grant.toLowerCase().split(\" \")[0]);\n        if (dictSkill) parsedSkills.grants.push(dictSkill.name);\n      });\n      return parsedSkills;\n    }\n\n    // most other class profs\n    // Skills: Choose two from Arcana, Animal Handling, Insight, Medicine, Nature, Perception, Religion, and Survival\n    const skillText = textDescription.toLowerCase().split(\"skills:\").pop().split(\"\\n\")[0].split(\"the\")[0].split(\".\")[0].trim();\n    const skillRegex = /choose (\\w+)(?:\\sskills)* from (.*)($|The|\\.|\\w+:)/im;\n    const skillMatch = skillText.match(skillRegex);\n\n    // common feature choice\n    // you gain proficiency in one of the following skills of your choice: Deception, Performance, or Persuasion.\n    // you gain proficiency with two of the following skills of your choice: Deception, Insight, Intimidation\n    const oneOffRegex = /you gain proficiency (?:in|with) (\\w+) of the following skills of your choice:\\s(.*?)(\\.|$)/im;\n    const oneOffMatch = textDescription.match(oneOffRegex);\n\n    // You also become proficient in your choice of two of the following skills: Arcana, History, Nature, or Religion.\n    const twoRegex = /also become proficient in your choice of (\\w+) of the following skills:\\s(.*?)(\\.|$)/im;\n    const twoMatch = textDescription.match(twoRegex);\n\n    if (skillMatch || oneOffMatch || twoMatch) {\n      const match = skillMatch ?? oneOffMatch ?? twoMatch;\n      const skillNames = match[2].replace(' and ', ',').replace(\" or \", \" \").split(',').map((skill) => skill.trim());\n      const skills = skillNames\n        .filter((name) => DICTIONARY.character.skills.some((skill) => skill.label.toLowerCase() === name.toLowerCase()))\n        .map((name) => {\n          const dictSkill = DICTIONARY.character.skills.find((skill) => skill.label.toLowerCase() === name.toLowerCase());\n          return dictSkill.name;\n        });\n      const numberSkills = DICTIONARY.numbers.find((num) => match[1].toLowerCase() === num.natural);\n      parsedSkills.number = numberSkills ? numberSkills.num : 2;\n      parsedSkills.choices = skills;\n      return parsedSkills;\n    }\n\n    // no more matches, return.\n    if (!textDescription.includes(\"proficiency\")) return parsedSkills;\n\n    // You gain proficiency in one skill of your choice.\n    // You gain proficiency in an additional skill or learn a new language of your choice.\n    // You gain one skill proficiency of your choice, one tool proficiency of your choice, and fluency in one language of your choice.\n    const additionalMatchRegex = /You gain (?:one skill proficiency of your choice|proficiency in (?:an additional skill|one skill of your choice))/im;\n    const additionalMatch = textDescription.match(additionalMatchRegex);\n\n    if (additionalMatch) {\n      parsedSkills.number = 1;\n      parsedSkills.choices = [\"*\"];\n      return parsedSkills;\n    }\n\n    // You gain proficiency in the Intimidation skill.\n    // You gain proficiency in the Insight and Medicine skills, and you\n    // you gain proficiency in the Performance skill if you don’t already have it.\n    const explicitSkillGrantRegex = /You gain proficiency in the (.*) skill( if you don’t already have it)?/i;\n    const explicitSkillGrantMatch = textDescription.match(explicitSkillGrantRegex);\n\n    if (explicitSkillGrantMatch) {\n      const skills = explicitSkillGrantMatch[1].replace(\" and \", \",\").split(\",\").map((skill) => skill.trim());\n      skills.forEach((grant) => {\n        const dictSkill = DICTIONARY.character.skills\n          .find((skill) => skill.label.toLowerCase() === grant.toLowerCase());\n        if (dictSkill) parsedSkills.grants.push(dictSkill.name);\n      });\n      return parsedSkills;\n    }\n\n    // not matches, so return empty parsed set\n    return parsedSkills;\n  }\n\n  static parseHTMLLanguages(description) {\n    const parsedLanguages = {\n      grants: [],\n      choices: [],\n      number: 0,\n    };\n    const textDescription = AdvancementHelper.stripDescription(description);\n\n    // Background languages\n    const languagesRegex = /Languages:\\s(.*?)($|\\.$|\\w+:)/im;\n    const languagesMatch = textDescription.match(languagesRegex);\n\n    // Languages: Giant and one other language of your choice\n    // Languages: Any one of your choice\n    // Languages: one of your choice\n    // Languages: One of your choice of Elvish, Gnomish, Goblin, or Sylvan\n    // Languages: Two of your choice\n    if (languagesMatch) {\n      const choiceRegexComplex = /(?:(\\w+)?(?: and))?\\s?(?:(\\w+)(?: other language)*)\\sof\\syour\\schoice(?: of (.*))*/im;\n      const complexMatch = languagesMatch[1].match(choiceRegexComplex);\n      if (complexMatch) {\n        if (complexMatch[1]) {\n          const dictMatch = DICTIONARY.character.languages.find((l) =>\n            l.name.toLowerCase() === complexMatch[1].split(\" \")[0].toLowerCase().trim()\n          );\n          if (dictMatch) {\n            const language = dictMatch.advancement ? `${dictMatch.advancement}:${dictMatch.value}` : dictMatch.value;\n            parsedLanguages.grants.push(language);\n          }\n        }\n        if (complexMatch[2]) {\n          const number = DICTIONARY.numbers.find((num) => complexMatch[2].toLowerCase().trim() === num.natural);\n          parsedLanguages.number = number ? number.num : 1;\n          if (complexMatch[3]) {\n            const languages = complexMatch[3].replace(\" or \", \",\").split(\",\").map((skill) => skill.trim());\n            languages.forEach((choice) => {\n              const dictMatch = DICTIONARY.character.languages.find((l) =>\n                l.name.toLowerCase() === choice.toLowerCase().split(\" \")[0]\n              );\n              if (dictMatch) {\n                const language = dictMatch.advancement ? `${dictMatch.advancement}:${dictMatch.value}` : dictMatch.value;\n                parsedLanguages.choices.push(language);\n              }\n            });\n          } else {\n            parsedLanguages.choices = [\"*\"];\n          }\n        }\n        return parsedLanguages;\n      }\n\n      // Languages: Choose one of Draconic, Goblin, or Vedalken\n      const choiceOfRegex = /choose (\\w+)(?: of (.*))*/im;\n      const simpleChoice = textDescription.match(choiceOfRegex);\n      if (simpleChoice) {\n        const number = DICTIONARY.numbers.find((num) => simpleChoice[1].toLowerCase().trim() === num.natural);\n        parsedLanguages.number = number ? number.num : 1;\n        if (simpleChoice[2]) {\n          const languages = simpleChoice[2].replace(\" or \", \",\").split(\",\").map((skill) => skill.trim());\n          languages.forEach((choice) => {\n            const dictMatch = DICTIONARY.character.languages.find((l) =>\n              l.name.toLowerCase() === choice.toLowerCase().split(\" \")[0]\n            );\n            // console.warn(\"lang check\", {\n            //   simple: simpleChoice[2],\n            //   choice,\n            //   languages,\n            //   matchVal: choice.toLowerCase().split(\" \")[0],\n            //   dictMatch,\n            // });\n            if (dictMatch) {\n              const language = dictMatch.advancement ? `${dictMatch.advancement}:${dictMatch.value}` : dictMatch.value;\n              parsedLanguages.choices.push(language);\n            }\n          });\n        } else {\n          parsedLanguages.choices = [\"*\"];\n        }\n\n        return parsedLanguages;\n      }\n\n      // Languages: Draconic or Elven\n      parsedLanguages.number = 1;\n      if (languagesMatch[1]) {\n        const languages = languagesMatch[1].replace(\" or \", \",\").split(\",\").map((skill) => skill.trim());\n        languages.forEach((choice) => {\n          const dictMatch = DICTIONARY.character.languages.find((l) => l.name.toLowerCase() === choice.toLowerCase());\n          if (dictMatch) {\n            const language = dictMatch.advancement ? `${dictMatch.advancement}:${dictMatch.value}` : dictMatch.value;\n            parsedLanguages.choices.push(language);\n          }\n        });\n        return parsedLanguages;\n      }\n    }\n\n    // you learn one language of your choice.\n    // You also learn two languages of your choice.\n    // You gain proficiency in an additional skill or learn a new language of your choice.\n    // learn one language of your choice that is spoken by your\n    const ofYourChoiceRegex = /learn (\\w+?|a new) language(?:s)? of your choice/im;\n    const ofYourChoiceMatch = textDescription.match(ofYourChoiceRegex);\n\n    if (ofYourChoiceMatch) {\n      const number = DICTIONARY.numbers.find((num) => ofYourChoiceMatch[1].toLowerCase() === num.natural);\n      parsedLanguages.number = number ? number.num : 2;\n      parsedLanguages.choices = [\"*\"];\n      return parsedLanguages;\n    }\n\n    // You can speak, read, and write Common and Dwarvish.\n    // You can speak, read, and write Common and Elvish.\n    // You can speak, read, and write Common and one extra language of your choice\n    // Your character can speak, read, and write Common and one other language that\n    // You learn to speak, read, and write Sylvan.\n    // You gain proficiency with smith’s tools, and you learn to speak, read, and write Giant.\n    const speakReadAndWriteRegex = /speak, read, and write (.*?)(?:\\.|$)/im;\n    const speakReadAndWriteMatch = textDescription.match(speakReadAndWriteRegex);\n\n    if (speakReadAndWriteMatch) {\n      const languages = speakReadAndWriteMatch[1].replace(\" and \", \",\").split(\",\").map((skill) => skill.trim());\n      parsedLanguages.number = 0;\n      languages.forEach((grant) => {\n        if (grant.includes(\"other language\") || grant.includes(\"of your choice\")) {\n          parsedLanguages.number++;\n          parsedLanguages.choices = [\"*\"];\n        } else {\n          const dictMatch = DICTIONARY.character.languages.find((l) => l.name.toLowerCase() === grant.toLowerCase());\n          if (dictMatch) {\n            const language = dictMatch.advancement ? `${dictMatch.advancement}:${dictMatch.value}` : dictMatch.value;\n            parsedLanguages.grants = [language];\n          }\n        }\n\n      });\n      return parsedLanguages;\n    }\n\n    // You gain one skill proficiency of your choice, one tool proficiency of your choice, and fluency in one language of your choice.\n    const featMatchRegex = /fluency in (\\w+) language(?:s)? of your choice/i;\n    const featMatch = textDescription.match(featMatchRegex);\n\n    if (featMatch) {\n      const number = DICTIONARY.numbers.find((num) => featMatch[1].toLowerCase() === num.natural);\n      parsedLanguages.number = number ? number.num : 1;\n      parsedLanguages.number = 1;\n      parsedLanguages.choices = [\"*\"];\n      return parsedLanguages;\n    }\n\n    return parsedLanguages;\n  }\n\n  static TOOL_GROUPS = {\n    \"musical instrument\": \"music\",\n    \"gaming set\": \"game\",\n    \"artisan's tools\": \"art\",\n    \"vehicle\": \"vehicle\",\n  };\n\n  static getToolGroup(text) {\n    for (const [key, value] of Object.entries(AdvancementHelper.TOOL_GROUPS)) {\n      if (utils.nameString(text).toLowerCase().includes(key)) return value;\n    }\n    return null;\n  }\n\n  static getDictionaryTool(name) {\n    const directMatch = DICTIONARY.character.proficiencies.find((tool) =>\n      tool.type === \"Tool\"\n      && tool.name.toLowerCase() === utils.nameString(name).toLowerCase()\n    );\n    if (directMatch) return directMatch;\n\n    const dictionaryTools = DICTIONARY.character.proficiencies.filter((tool) => tool.type === \"Tool\");\n    for (const tool of dictionaryTools) {\n      if (utils.nameString(name).toLowerCase().includes(tool.name.toLowerCase())) return tool;\n    }\n    return null;\n  }\n\n  static getToolAdvancementValue(text) {\n    const match = AdvancementHelper.getDictionaryTool(text);\n    if (match) {\n      const stub = match.toolType === \"\"\n        ? match.baseTool\n        : `${match.toolType}:${match.baseTool}`;\n      return stub;\n    }\n    return null;\n  }\n\n  // eslint-disable-next-line complexity\n  static parseHTMLTools(description) {\n    const parsedTools = {\n      choices: [],\n      grants: [],\n      number: 0,\n    };\n\n    const textDescription = AdvancementHelper.stripDescription(description);\n\n    // Tools: None\n    if (textDescription.includes(\"Tools: None\")) return parsedTools;\n\n    // Tools: Choose one type of artisan’s tools or one musical instrument\n    const anyToolsRegex = /^Tools:\\sChoose (\\w+) type of (.*)($|\\.|\\w+:)/im;\n    const anyMatch = textDescription.match(anyToolsRegex);\n    // Tools: Three musical instruments of your choice\n    const anyToolsRegex2 = /^Tools:\\s(\\w+)\\s(.*) of your choice($|\\.|\\w+:)/im;\n    const anyMatch2 = textDescription.match(anyToolsRegex2);\n\n    if (anyMatch || anyMatch2) {\n      const match = anyMatch ?? anyMatch2;\n      // const skills = DICTIONARY.character.skills.map((skill) => skill.name);\n      const numberTools = DICTIONARY.numbers.find((num) => match[1].toLowerCase() === num.natural);\n      parsedTools.number = numberTools ? numberTools.num : 2;\n      const toolArray = match[2].split(\" or \");\n      for (const toolString of toolArray) {\n        const toolGroup = AdvancementHelper.getToolGroup(toolString);\n        if (toolGroup) {\n          parsedTools.choices.push(`${toolGroup}:*`);\n        } else {\n          logger.error(`Could not find tool group for ${toolString}, please log an issue`);\n        }\n      }\n      return parsedTools;\n    }\n\n    // Tools: Thieves' tools, tinker's tools, one type of artisan's tools of your choice\n    // Tools: Herbalism kit\n    // Tool Proficiencies: Disguise Kit, one type of Gaming Set or Musical Instrument\n    const toolGrantsRegex = /^(?:Tools|Tool Proficiencies):\\s(.*?)($|\\.|\\w+:)/im;\n    const toolGrantsMatch = textDescription.match(toolGrantsRegex);\n\n    const toolChoiceRegex = /(\\w+) type of (.*)($|\\.|\\w+:)/i;\n    if (toolGrantsMatch) {\n      const grantsArray = toolGrantsMatch[1].split(\",\").map((grant) => grant.trim());\n      for (const toolString of grantsArray) {\n        const toolChoiceMatch = toolString.match(toolChoiceRegex);\n        if (toolChoiceMatch) {\n          const numberTools = DICTIONARY.numbers.find((num) => toolChoiceMatch[1].toLowerCase() === num.natural);\n          parsedTools.number = numberTools ? numberTools.num : 1;\n          toolChoiceMatch[2].split(\" or \").forEach((toolGroupMatch) => {\n            const toolGroup = AdvancementHelper.getToolGroup(toolGroupMatch.trim());\n            if (toolGroup) {\n              parsedTools.choices.push(`${toolGroup}:*`);\n            }\n          });\n        } else {\n          const stub = AdvancementHelper.getToolAdvancementValue(toolString);\n          if (stub) {\n            parsedTools.grants.push(stub);\n          }\n        }\n      }\n      return parsedTools;\n    }\n\n    // no more matches, return.\n    if (!textDescription.includes(\"proficiency\")) return parsedTools;\n\n\n    // You gain proficiency with alchemist’s supplies. If you already have this proficiency, you gain proficiency with one other type of artisan’s tools of your choice.\n    // You also gain proficiency with smith’s tools.\n    // You gain proficiency with woodcarver’s tools.\n    // you gain proficiency with heavy armor and smith’s tools\n    // you gain proficiency with one type of artisan’s tools of your choice.\n    // You gain proficiency with smith’s tools, and you learn to speak, read, and write Giant.\n    // and you gain proficiency with the herbalism kit.\n    // You also gain proficiency with brewer’s supplies if you don’t already have it.\n    // you gain proficiency with the disguise kit and the poisoner’s kit.\n    // you gain proficiency with the disguise kit, the forgery kit, and one gaming set of your choice.\n    // you gain proficiency with Tinker’s Tools\n\n    const additionalMatchRegex = /You gain proficiency with (.*?)($|\\.|\\w+:)/im;\n    const additionalMatch = textDescription.match(additionalMatchRegex);\n\n    if (additionalMatch) {\n      const additionalMatches = additionalMatch[2].replace(\" and \", \",\").split(\",\").map((skill) => skill.trim());\n      for (const match of additionalMatches) {\n        const toolChoiceRegex = /(\\w+) (.*?) of your choice($|\\.|\\w+:)/i;\n        const choiceMatch = textDescription.match(toolChoiceRegex);\n        if (choiceMatch) {\n          const numberTools = DICTIONARY.numbers.find((num) => choiceMatch[1].toLowerCase() === num.natural);\n          parsedTools.number = numberTools ? numberTools.num : 1;\n          const toolGroup = AdvancementHelper.getToolGroup(choiceMatch[2]);\n          if (toolGroup) {\n            parsedTools.choices.push(`${toolGroup}:*`);\n          }\n        } else {\n          const stub = AdvancementHelper.getToolAdvancementValue(match);\n          if (stub) {\n            parsedTools.grants.push(stub);\n          }\n        }\n      }\n\n      return parsedTools;\n    }\n\n    // You gain one skill proficiency of your choice, one tool proficiency of your choice, and fluency in one language of your choice.\n    const featMatchRegex = /(\\w*) tool proficiency of your choice/i;\n    const featMatch = textDescription.match(featMatchRegex);\n\n    if (featMatch) {\n      parsedTools.number = 1;\n      parsedTools.choices = [\"*\"];\n      return parsedTools;\n    }\n\n    return parsedTools;\n  }\n\n  static ARMOR_GROUPS = DICTIONARY.character.proficiencies\n    .filter((prof) => prof.type === \"Armor\" && foundry.utils.hasProperty(prof, \"foundryValue\") && prof.advancement === \"\")\n    .reduce((acc, prof) => {\n      acc[prof.name.toLowerCase()] = prof.foundryValue;\n      return acc;\n    }, {});\n\n  static getArmorGroup(text) {\n    for (const [key, value] of Object.entries(AdvancementHelper.ARMOR_GROUPS)) {\n      if (utils.nameString(text).toLowerCase().includes(key)) return value;\n    }\n    return null;\n  }\n\n  static getDictionaryArmor(name) {\n    const directMatch = DICTIONARY.character.proficiencies.find((prof) =>\n      prof.type === \"Armor\" && foundry.utils.hasProperty(prof, \"foundryValue\")\n      && prof.name.toLowerCase() === utils.nameString(name).toLowerCase()\n    );\n    if (directMatch) return directMatch;\n\n    const dictionaryProfs = DICTIONARY.character.proficiencies.filter((prof) =>\n      prof.type === \"Armor\" && foundry.utils.hasProperty(prof, \"foundryValue\")\n    );\n    for (const prof of dictionaryProfs) {\n      if (utils.nameString(name).toLowerCase().includes(prof.name.toLowerCase())) return prof;\n    }\n    return null;\n  }\n\n  static getArmorAdvancementValue(text) {\n    const match = AdvancementHelper.getDictionaryArmor(text);\n    if (match) {\n      const stub = match.advancement === \"\"\n        ? match.foundryValue\n        : `${match.advancement}:${match.foundryValue}`;\n      return stub;\n    }\n    return null;\n  }\n\n  static parseHTMLArmorProficiencies(description) {\n    const parsedArmorProficiencies = {\n      choices: [],\n      grants: [],\n      number: 0,\n    };\n    const textDescription = AdvancementHelper.stripDescription(description);\n\n    // Armor: None\n    if (textDescription.includes(\"Armor: None\")) return parsedArmorProficiencies;\n\n    // Armor: Light armor, medium armor, shields\n    // Armor: Light armor, medium armor, shields\n    // Armor: All armor, shields\n    const grantsRegex = /^Armor:\\s(.*?)($|\\.|\\w+:)/im;\n    const grantsMatch = textDescription.match(grantsRegex);\n\n    if (grantsMatch) {\n      const grantsArray = grantsMatch[1].split(\",\").map((grant) => grant.trim());\n      for (const grant of grantsArray) {\n        const stub = AdvancementHelper.getArmorAdvancementValue(grant);\n        if (stub === \"all\") {\n          parsedArmorProficiencies.grants.push(\"lgt\", \"med\", \"hvy\");\n        } else if (stub) {\n          parsedArmorProficiencies.grants.push(stub);\n        }\n      }\n      return parsedArmorProficiencies;\n    }\n\n    // no more matches, return.\n    if (!textDescription.includes(\"proficiency\")) return parsedArmorProficiencies;\n\n    // You gain proficiency with heavy armor.\n    // you gain proficiency with heavy armor and smith’s tools\n    // You gain proficiency with light armor, and you gain proficiency with one type of one-handed melee weapon of your choice.\n\n    const additionalMatchRegex = /You gain proficiency with (.*?)($|\\.|\\w+:)/im;\n    const additionalMatch = textDescription.match(additionalMatchRegex);\n\n    if (additionalMatch) {\n      const additionalMatches = additionalMatch[2].replace(\" and \", \",\").split(\",\").map((m) => m.trim());\n      for (const grant of additionalMatches) {\n        const stub = AdvancementHelper.getArmorAdvancementValue(grant);\n        if (stub) {\n          parsedArmorProficiencies.grants.push(stub);\n        }\n      }\n    }\n\n    return parsedArmorProficiencies;\n  }\n\n  static WEAPON_GROUPS = DICTIONARY.character.proficiencies\n    .filter((prof) =>\n      prof.type === \"Weapon\"\n      && foundry.utils.getProperty(prof, \"foundryValue\") !== \"\"\n      && prof.advancement === \"\"\n    )\n    .reduce((acc, prof) => {\n      acc[prof.name.toLowerCase()] = prof.foundryValue;\n      return acc;\n    }, {});\n\n  static getWeaponGroup(text) {\n    for (const [key, value] of Object.entries(AdvancementHelper.WEAPON_GROUPS)) {\n      if (utils.nameString(text).toLowerCase().includes(key)) return value;\n    }\n    return null;\n  }\n\n  static getDictionaryWeapon(name) {\n    const match = DICTIONARY.character.proficiencies.find((prof) =>\n      prof.type === \"Weapon\"\n      && foundry.utils.getProperty(prof, \"foundryValue\") !== \"\"\n      && (prof.name.toLowerCase() === utils.nameString(name).toLowerCase()\n        || `${prof.name.toLowerCase()}s` === utils.nameString(name).toLowerCase()\n        || `the ${prof.name.toLowerCase()}` === utils.nameString(name).toLowerCase())\n    );\n    if (match) return match;\n    return null;\n  }\n\n  static getWeaponAdvancementValue(text) {\n    const match = AdvancementHelper.getDictionaryWeapon(text);\n    if (match) {\n      const stub = match.advancement === \"\"\n        ? match.foundryValue\n        : `${match.advancement}:${match.foundryValue}`;\n      return stub;\n    }\n    return null;\n  }\n\n  // eslint-disable-next-line complexity\n  static parseHTMLWeaponProficiencies(description) {\n    const parsedWeaponsProficiencies = {\n      choices: [],\n      grants: [],\n      number: 0,\n    };\n\n\n    const textDescription = AdvancementHelper.stripDescription(description);\n\n    // Weapons: None\n    if (textDescription.includes(\"Weapons: None\")) return parsedWeaponsProficiencies;\n\n    // Weapons: Simple weapons, martial weapons\n    // Weapons: Simple weapons\n    // Weapons: Simple weapons, hand crossbows, longswords, rapiers, shortswords\n    const weaponGrantsRegex = /^Weapons:\\s(.*?)($|\\.|\\w+:)/im;\n    const weaponGrantsMatch = textDescription.match(weaponGrantsRegex);\n\n    const weaponChoiceRegex = /(\\w+) type of (.*)($|\\.|\\w+:)/i;\n    if (weaponGrantsMatch) {\n      const grantsArray = weaponGrantsMatch[1].split(\",\").map((grant) => grant.trim());\n      for (const toolString of grantsArray) {\n        const weaponChoiceMatch = toolString.match(weaponChoiceRegex);\n        if (weaponChoiceMatch) {\n          const number = DICTIONARY.numbers.find((num) => weaponChoiceMatch[1].toLowerCase() === num.natural);\n          parsedWeaponsProficiencies.number = number ? number.num : 1;\n          const group = AdvancementHelper.getWeaponGroup(weaponChoiceMatch[2]);\n          if (group) {\n            parsedWeaponsProficiencies.choices.push(`${group}:*`);\n          }\n        } else {\n          const stub = AdvancementHelper.getWeaponAdvancementValue(toolString);\n          if (stub) {\n            parsedWeaponsProficiencies.grants.push(stub);\n          }\n        }\n      }\n      return parsedWeaponsProficiencies;\n    }\n\n    // no more matches, return.\n    if (!textDescription.includes(\"proficiency\")) return parsedWeaponsProficiencies;\n\n    // you gain proficiency with medium armor and the scimitar.\n    // You gain proficiency with martial weapons.\n    // At 1st level, you gain proficiency with martial weapons and heavy armor.\n    // You gain proficiency with light armor, and you gain proficiency with one type of one-handed melee weapon of your choice.\n    // You gain proficiency with four weapons of your choice. Each one must be a simple or a martial weapon.\n    const additionalMatchRegex = /You gain proficiency with (.*?)($|\\.|\\w+:)/im;\n    const additionalMatch = textDescription.match(additionalMatchRegex);\n\n    if (additionalMatch) {\n      const additionalMatches = additionalMatch[2].replace(\" and \", \",\").split(\",\").map((skill) => skill.trim());\n      for (const match of additionalMatches) {\n        const toolChoiceRegex = /(\\w+) (.*?) of your choice($|\\.|\\w+:)/i;\n        const choiceMatch = textDescription.match(toolChoiceRegex);\n        if (choiceMatch) {\n          const numberTools = DICTIONARY.numbers.find((num) => choiceMatch[1].toLowerCase() === num.natural);\n          parsedWeaponsProficiencies.number = numberTools ? numberTools.num : 1;\n          const toolGroup = AdvancementHelper.getWeaponGroup(choiceMatch[2]);\n          if (toolGroup) {\n            parsedWeaponsProficiencies.choices.push(`${toolGroup}:*`);\n            // eslint-disable-next-line max-depth\n          } else if (choiceMatch[2].toLowerCase().includes(\"one-handed melee weapon\")) {\n            const weapons = DICTIONARY.character.proficiencies.filter((prof) =>\n              prof.type === \"Weapon\"\n              && foundry.utils.getProperty(prof, \"foundryValue\") !== \"\"\n              && foundry.utils.getProperty(prof, \"properties.two\") !== true\n              && foundry.utils.getProperty(prof, \"melee\") === true\n            ).map((prof) => {\n              const stub = prof.advancement === \"\"\n                ? prof.foundryValue\n                : `${prof.advancement}:${prof.foundryValue}`;\n              return stub;\n            });\n            parsedWeaponsProficiencies.choices.push(...weapons);\n          } else {\n            logger.warn(`unknown weapon group choices ${choiceMatch[2]}`);\n          }\n        } else {\n          const stub = AdvancementHelper.getWeaponAdvancementValue(match);\n          if (stub) {\n            parsedWeaponsProficiencies.grants.push(stub);\n          }\n        }\n      }\n\n      return parsedWeaponsProficiencies;\n    }\n\n    // Choose two types of weapons to be your kensei weapons: one melee weapon and one ranged weapon.\n    const kenseiRegex = /Choose two types of weapons to be your kensei weapons/im;\n    if (kenseiRegex.test(textDescription)) {\n      parsedWeaponsProficiencies.number = 2;\n      const weapons = DICTIONARY.character.proficiencies.filter((prof) =>\n        prof.type === \"Weapon\"\n        && foundry.utils.getProperty(prof, \"foundryValue\") !== \"\"\n        && foundry.utils.getProperty(prof, \"properties.spc\") !== true\n        && (foundry.utils.getProperty(prof, \"properties.hvy\") !== true || prof.name === \"Longbow\")\n      ).map((prof) => {\n        const stub = prof.advancement === \"\"\n          ? prof.foundryValue\n          : `${prof.advancement}:${prof.foundryValue}`;\n        return stub;\n      });\n      parsedWeaponsProficiencies.choices.push(...weapons);\n    }\n\n    return parsedWeaponsProficiencies;\n  }\n\n  // static parseHTMLExpertises(description) {\n  //   const parsedExpertises = {\n  //     choices: [],\n  //     grants: [],\n  //     number: 2,\n  //   };\n\n  //   const dom = utils.htmlToDocumentFragment(description);\n\n  //   // At 1st level, choose two of your skill proficiencies, or one of your skill proficiencies and your proficiency with thieves’ tools. Your proficiency bonus is doubled for any ability check you make that uses either of the chosen proficiencies.\n  //   // At 6th level, you can choose two more of your proficiencies (in skills or with thieves’ tools) to gain this benefit.\n  //   // At 3rd level, choose two of your skill proficiencies. Your proficiency bonus is doubled for any ability check you make that uses either of the chosen proficiencies.\n  //   // At 6th level, choose two more of your skill proficiencies, or one more of your skill proficiencies and your proficiency with thieves’ tools. Your proficiency bonus is doubled for any ability check you make that uses either of the chosen proficiencies.\n  // // Choose one skill in which you have proficiency. You gain expertise with that skill,\n  // Your proficiency bonus is doubled for any check you make with the chosen skills.\n\n  // parse expertises\n\n  //   return parsedExpertises;\n  // }\n\n  static CONDITION_MAPPING = {\n    \"resistance\": \"dr\",\n    \"immunity\": \"di\",\n    \"immune\": \"di\",\n    \"vulnerability\": \"dv\",\n    // \"condition\": \"ci\",\n  };\n\n  // eslint-disable-next-line complexity\n  static parseHTMLConditions(description) {\n    const grants = new Set();\n    const choices = new Set();\n    const parsedConditions = {\n      choices: [],\n      grants: [],\n      number: 0,\n      hint: \"\",\n    };\n\n    const textDescription = AdvancementHelper.stripDescription(description).toLowerCase();\n\n    // quick and dirty damage matches, 90 % of use cases\n    const isObviousDamage = textDescription.includes(\"damage\");\n    const adjustedText = textDescription.replaceAll(\" damage\", \"\");\n\n    if (isObviousDamage) {\n      // You have resistance to psychic damage\n      // You have resistance to necrotic damage and radiant damage.\n      // you gain resistance to lightning and thunder damage\n      // You gain immunity to fire damage.\n      // you gain immunity to lightning and thunder damage.\n      // You also have resistance to psychic damage\n      // and you have resistance to poison damage.\n      // You have resistance to poison damage and immunity to disease, and you have advantage on saving throws against being paralyzed or poisoned.\n      // you gain resistance to bludgeoning, piercing, and slashing damage from nonmagical attacks.\n      // the paladin gains resistance to bludgeoning, piercing, and slashing damage from nonmagical weapons.\n      // You gain resistance to acid damage and poison damage,\n      // You also have resistance to poison damage.\n      // You are immune to poison damage and the poisoned condition.\n      // You have resistance to acid and poison damage, and you have advantage on saving throws against being poisoned.\n      const damageRegex = /(?:you|the paladin) (?:also have|have|gains*|are) ([^advantage].*) to (.*?)($|\\.|and you have advantage|\\w+:)/im;\n      const damageMatch = adjustedText.match(damageRegex);\n      if (damageMatch) {\n        const additionalMatches = damageMatch[2]\n          .replace(\" and \", \",\").split(\",\")\n          .map((dmg) => dmg.trim().toLowerCase());\n        for (const match of additionalMatches) {\n          const conditionKind = damageMatch[1].toLowerCase().trim();\n          const damageMapping = DICTIONARY.character.damageAdjustments.find((a) =>\n            a.kind === conditionKind // only match the kind\n            && a.type !== 4 // don't include conditions\n            && match === a.name.toLowerCase()\n          );\n          if (damageMapping) {\n            const type = AdvancementHelper.CONDITION_MAPPING[conditionKind];\n            const valueData = foundry.utils.hasProperty(damageMapping, \"foundryValues\")\n              ? foundry.utils.getProperty(damageMapping, \"foundryValues\")\n              : foundry.utils.hasProperty(damageMapping, \"foundryValue\")\n                ? { value: damageMapping.foundryValue }\n                : undefined;\n            // eslint-disable-next-line max-depth, no-continue\n            if (!valueData) continue;\n            const midiValues = game.modules.get(\"midi-qol\")?.active && valueData.midiValues\n              ? valueData.midiValues\n              : [];\n            const mappingValueArray = midiValues.concat(valueData.value).map((value) => value.toLowerCase());\n            mappingValueArray.forEach((value) => {\n              if (type) grants.add(`${type}:${value}`);\n              if (type === \"di\" && value === \"poison\") {\n                grants.add(\"ci:poisoned\");\n              }\n            });\n          }\n        }\n      }\n    }\n\n    const isImmunity = textDescription.includes(\"immunity\") || textDescription.includes(\"immune\");\n    // You have resistance to poison damage and immunity to disease,\n    // You are immune to being charmed,\n    // you makes you immune to disease.\n    // you makes you immune to disease and poison.\n    // and you are immune to the poisoned condition.\n    // You are immune to poison damage and the poisoned condition.\n    // You are immune to disease.\n    if (isImmunity) {\n      const immuneRegex = /(?:you have|and|you are|makes you) (?:immune|immunity) to (.*?)($|\\.|and you have advantage|\\w+:)/im;\n      const immuneMatch = textDescription.match(immuneRegex);\n      if (immuneMatch) {\n        let addPoisonDI = false;\n        const additionalMatches = immuneMatch[1]\n          .replace(\" and \", \",\")\n          .split(\",\")\n          .map((dmg) => {\n            const result = dmg.trim().toLowerCase();\n            if (dmg === \"poison\") {\n              addPoisonDI = true;\n              return \"poisoned\";\n            } else if (dmg === \"disease\") return \"diseased\";\n            else return result;\n          });\n        for (const match of additionalMatches) {\n          const conditionMapping = DICTIONARY.character.damageAdjustments.find((a) =>\n            a.kind === \"immunity\" // only match the immunity kind\n            && a.type === 4 // dont include damage adjustments\n            && match === a.name.toLowerCase()\n          );\n          if (conditionMapping) {\n            grants.add(`ci:${conditionMapping.foundryValue}`);\n            // eslint-disable-next-line max-depth\n            if (addPoisonDI && conditionMapping.foundryValue === \"poisoned\") grants.add(\"di:poison\");\n          }\n        }\n      }\n\n    }\n\n    // These are special types\n    // You have resistance to the damage type associated with your * Ancestry.\n    const dragonMatch = textDescription.match(/resistance to the damage type associated with your (\\w*) Ancestry/mi);\n    if (dragonMatch) {\n      parsedConditions.count = 1;\n      parsedConditions.hint = textDescription;\n      switch (dragonMatch[1].toLowerCase()) {\n        case \"metallic\": {\n          [\"fire\", \"lightning\", \"acid\", \"cold\"].forEach((dr) => {\n            if (textDescription.includes(dr)) {\n              choices.add(`dr:${dr}`);\n            }\n          });\n          break;\n        }\n        case \"chromatic\": {\n          [\"acid\", \"lightning\", \"poison\", \"fire\", \"cold\"].forEach((dr) => {\n            if (textDescription.includes(dr)) {\n              choices.add(`dr:${dr}`);\n            }\n          });\n          break;\n        }\n        case \"gem\": {\n          [\"force\", \"radiant\", \"psychic\", \"thunder\", \"necrotic\"].forEach((dr) => {\n            if (textDescription.includes(dr)) {\n              choices.add(`dr:${dr}`);\n            }\n          });\n          break;\n        }\n        default: {\n          [\"acid\", \"lightning\", \"poison\", \"fire\", \"acid\", \"cold\"].forEach((dr) => {\n            if (textDescription.includes(dr)) {\n              choices.add(`dr:${dr}`);\n            }\n          });\n          break;\n        }\n      }\n    }\n\n    // You now have resistance to a damage type determined by your patron’s kind:\n    if (textDescription.includes(\"resistance to a damage type determined by your patron’s kind:\")) {\n      parsedConditions.count = 1;\n      parsedConditions.hint = textDescription;\n      [\"bludgeoning\", \"thunder\", \"fire\", \"cold\"].forEach((dr) => {\n        if (textDescription.includes(dr)) {\n          choices.add(`dr:${dr}`);\n        }\n      });\n    }\n\n    // You have resistance to all damage dealt by other creatures (their attacks, spells, and other effects).\n    if (textDescription.includes(\"resistance to all damage dealt by other creatures\")) {\n      grants.add(\"dr:all\");\n      Object.keys(CONFIG.DND5E.damageTypes).forEach((dr) => {\n        grants.add(`dr:${dr}`);\n      });\n    }\n\n    // NOT IMPLEMENTED: Foundry doesn't support these kind of things they are not really condition resistances etc\n    // and you have advantage on saving throws against being poisoned.\n    // You and friendly creatures within 10 feet of you have resistance to damage from spells.\n    // You have advantage on Intelligence, Wisdom, and Charisma saving throws against spells.\n    // You have advantage on saving throws you make to avoid or end the poisoned condition on yourself.\n    // You have advantage on saving throws against spells and other magical effects.\n    // and you have advantage on saving throws against being paralyzed or poisoned.\n\n    parsedConditions.grants = Array.from(grants);\n    parsedConditions.choices = Array.from(choices);\n    return parsedConditions;\n  }\n\n  // static parseHTMLEquipment(description) {\n  //   const parsedEquipment = {\n  //     choices: [],\n  //     grants: [],\n  //     number: 0,\n  //   };\n  //   const textDescription = AdvancementHelper.stripDescription(description);\n\n  //   // You start with the following equipment, in addition to the equipment granted by your background:\n  //   // any two simple weapons of your choice\n  //   // a light crossbow and 20 bolts\n  //   // your choice of studded leather armor or scale mail\n  //   // thieves’ tools and a dungeoneer’s pack\n\n  //   // You start with the following equipment, in addition to the equipment granted by your background:\n\n  //   // (a) a greataxe or (b) any martial melee weapon\n  //   // (a) two handaxes or (b) any simple weapon\n  //   // An explorer’s pack and four javelins\n\n  //   // parse equipment here\n\n  //   return parsedEquipment;\n  // }\n\n\n  // static getEquipmentAdvancement(parts) {\n\n  // }\n\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype.getBackgroundName = function getBackgroundName() {\n  if (this.source.ddb.character.background.hasCustomBackground === false) {\n    if (this.source.ddb.character.background.definition !== null) {\n      return this.source.ddb.character.background.definition.name || \"\";\n    } else {\n      return \"\";\n    }\n  } else {\n    return this.source.ddb.character.background.customBackground.name || \"\";\n  }\n};\n\nDDBCharacter.prototype._generateTrait = function _generateTrait() {\n  this.raw.character.system.details.trait = this.source.ddb.character.traits.personalityTraits ?? \"\";\n};\n\nDDBCharacter.prototype._generateIdeal = function _generateIdeal() {\n  this.raw.character.system.details.ideal = this.source.ddb.character.traits.ideals ?? \"\";\n};\n\nDDBCharacter.prototype._generateBond = function _generateBond() {\n  this.raw.character.system.details.bond = this.source.ddb.character.traits.bonds ?? \"\";\n};\n\nDDBCharacter.prototype._generateFlaw = function _generateFlaw() {\n  this.raw.character.system.details.flaw = this.source.ddb.character.traits.flaws ?? \"\";\n};\n\nDDBCharacter.prototype.getCharacteristics = function getCharacteristics() {\n  let characteristicBlurb = \"\";\n  if (this.source.ddb.character.gender) characteristicBlurb += `Gender: ${this.source.ddb.character.gender}\\n`;\n  if (this.source.ddb.character.eyes) characteristicBlurb += `Eyes: ${this.source.ddb.character.eyes}\\n`;\n  if (this.source.ddb.character.height) characteristicBlurb += `Height: ${this.source.ddb.character.height}\\n`;\n  if (this.source.ddb.character.faith) characteristicBlurb += `Faith: ${this.source.ddb.character.faith}\\n`;\n  if (this.source.ddb.character.hair) characteristicBlurb += `Hair: ${this.source.ddb.character.hair}\\n`;\n  if (this.source.ddb.character.skin) characteristicBlurb += `Skin: ${this.source.ddb.character.skin}\\n`;\n  if (this.source.ddb.character.age) characteristicBlurb += `Age: ${this.source.ddb.character.age}\\n`;\n  if (this.source.ddb.character.weight) characteristicBlurb += `Weight: ${this.source.ddb.character.weight}\\n`;\n  return characteristicBlurb;\n};\n\nDDBCharacter.prototype._generateAppearance = function _generateAppearance() {\n  let result = this.getCharacteristics();\n  if (result && result !== \"\") result += \"\\n\";\n  if (this.source.ddb.character.traits.appearance) result += this.source.ddb.character.traits.appearance;\n  this.raw.character.system.details.appearance = result ?? \"\";\n};\n\n/**\n * Gets the character's alignment\n * Defaults to Neutral, if not set in DDB\n * @todo: returns .name right now, should switch to .value once the DND5E options are fully implemented\n */\nDDBCharacter.prototype._generateAlignment = function _generateAlignment() {\n  const alignmentID = this.source.ddb.character.alignmentId || 5;\n  const alignment = DICTIONARY.character.alignments.find((alignment) => alignment.id === alignmentID);\n  if (alignment) this.raw.character.system.details.alignment = alignment.name;\n};\n\nfunction getBackgroundTemplate() {\n  return {\n    name: \"Background\",\n    description: \"\",\n    id: null,\n    entityTypeId: null,\n    featuresId: null,\n    featuresEntityTypeId: null,\n    characteristicsId: null,\n    characteristicsEntityTypeId: null,\n    definition: {\n      name: \"Background\",\n      description: \"\",\n      id: null,\n      entityTypeId: null,\n    },\n  };\n}\n\nexport function generateBackground(bg) {\n  let result = getBackgroundTemplate();\n\n  // console.warn(bg)\n\n  if (bg.id) result.id = bg.id;\n  if (bg.entityTypeId) result.entityTypeId = bg.entityTypeId;\n\n  if (bg.name) {\n    result.name = `Background: ${bg.name}`;\n    result.description = `<h1>Background: ${bg.name}</h1>`;\n  }\n\n  if (bg.description) {\n    result.description += `<p>${bg.description}</p>`;\n  } else if (bg.shortDescription) {\n    result.description += bg.shortDescription.replace(\"\\r\\n\", \"\");\n  }\n  if (bg.definition) result.definition = bg.definition;\n  if (bg.sources) result.definition.sources = bg.sources;\n\n  if (bg.isHomebrew === true) {\n    if (bg.featuresBackground) {\n      result.description += `<h2>${bg.featuresBackground.name}</h2>`;\n      result.description += bg.featuresBackground.shortDescription.replace(\"\\r\\n\", \"\");\n      result.description += `<h3>${bg.featuresBackground.featureName}</h3>`;\n      result.description += bg.featuresBackground.featureDescription.replace(\"\\r\\n\", \"\");\n      result.featuresId = bg.featuresBackground.id;\n      result.id = bg.featuresBackground.id;\n      result.featuresEntityTypeId = bg.featuresBackground.entityTypeId;\n      result.definition = bg.featuresBackground;\n    }\n    if (\n      bg.characteristicsBackground\n      && bg.featuresBackground\n      && bg.featuresBackground.entityTypeId != bg.characteristicsBackground.entityTypeId\n    ) {\n      result.description += `<h2>${bg.characteristicsBackground.name}</h2>`;\n      result.description += bg.characteristicsBackground.shortDescription.replace(\"\\r\\n\", \"\");\n      result.description += `<h3>${bg.characteristicsBackground.featureName}</h3>`;\n      result.description += bg.characteristicsBackground.featureDescription.replace(\"\\r\\n\", \"\");\n      result.characteristicsId = bg.characteristicsBackground.id;\n      result.characteristicsEntityTypeId = bg.characteristicsBackground.entityTypeId;\n    }\n  }\n\n  if (bg.featureName) {\n    result.description += `<h2>${bg.featureName}</h2>`;\n    result.description += bg.featureDescription.replace(\"\\r\\n\", \"\");\n  }\n  if (bg.spellListIds) result.spellListIds = bg.spellListIds;\n\n  // update definition\n  result.definition.name = result.name;\n  result.description = utils.replaceHtmlSpaces(result.description);\n  result.definition.description = result.description;\n  result.definition.id = result.id;\n  result.definition.spellListIds = result.spellListIds;\n  return result;\n}\n\nDDBCharacter.prototype.getBackgroundData = function getBackgroundData() {\n  let bg = null;\n  if (this.source.ddb.character.background.hasCustomBackground === true) {\n    bg = this.source.ddb.character.background.customBackground;\n    bg.isHomebrew = true;\n  } else if (this.source.ddb.character.background.definition !== null) {\n    bg = this.source.ddb.character.background.definition;\n  } else {\n    bg = this.source.ddb.character.background.customBackground;\n    let result = getBackgroundTemplate();\n    if (bg.id) {\n      result.id = bg.id;\n      result.definition.id = bg.id;\n    }\n    if (bg.entityTypeId) {\n      result.entityTypeId = bg.entityTypeId;\n      result.definition.entityTypeId = bg.entityTypeId;\n    }\n    return result;\n  }\n\n  return generateBackground(bg);\n};\n\nDDBCharacter.prototype._generateBiography = function _generateBiography() {\n  const backstory = this.source.ddb.character.notes.backstory\n    ? \"<h1>Backstory</h1><p>\" + this.source.ddb.character.notes.backstory + \"</p>\"\n    : \"\";\n\n  this.raw.character.system.details.biography = {\n    public: backstory,\n    value: backstory,\n  };\n};\n\nDDBCharacter.prototype._generateDescription = function _generateDescription() {\n  this.raw.character.system.details[\"gender\"] = this.source.ddb.character.gender || \"\";\n  this.raw.character.system.details[\"age\"] = this.source.ddb.character.age || \"\";\n  this.raw.character.system.details[\"height\"] = this.source.ddb.character.height || \"\";\n  this.raw.character.system.details[\"weight\"] = this.source.ddb.character.weight || \"\";\n  this.raw.character.system.details[\"eyes\"] = this.source.ddb.character.eyes || \"\";\n  this.raw.character.system.details[\"skin\"] = this.source.ddb.character.skin || \"\";\n  this.raw.character.system.details[\"hair\"] = this.source.ddb.character.hair || \"\";\n};\n","import logger from \"../../logger.js\";\n\n/**\n * UTILITY\n * Returns a string representation of friendlyTypename and friendlySubtypeName for an obj[]\n * @param {object[]} arr array of objects\n */\nfunction extractInfo(arr) {\n  return arr.map((e) => `${e.friendlyTypeName} (${e.friendlySubtypeName})`);\n}\n\n/**\n * Extracts basic character information\n * @param {object} data Character JSON\n * returns information about the classes this character chose, including\n * - {string} name\n * - {number} level\n * - {boolean} isStartingClass\n * - {object[]} modifiers (empty, will be filled later)\n * }\n */\nfunction getClassInfo(data) {\n  return data.classes.map((cls) => {\n    return {\n      name:\n        cls.subclassDefinition && cls.subclassDefinition.name\n          ? `${cls.definition.name} (${cls.subclassDefinition.name})`\n          : cls.definition.name,\n      level: cls.level,\n      isStartingClass: cls.isStartingClass,\n      modifiers: [],\n    };\n  });\n}\n\n/**\n * Gets all class features up to a certain class level\n * @param {obj} cls character.classes[] entry\n * @param {*} classLevel level requirement up to which the class features should be extracted\n */\nexport function getClassFeatures(cls, classLevel = 20) {\n  if (\n    cls.subclassDefinition\n    && cls.subclassDefinition.classFeatures\n    && Array.isArray(cls.subclassDefinition.classFeatures)\n  ) {\n    const subclassFeatures = cls.subclassDefinition.classFeatures.map((subclassFeature) => {\n      subclassFeature.className = cls.definition.name;\n      subclassFeature.subclassName = cls.subclassDefinition.name;\n      return subclassFeature;\n    });\n    const result = cls.classFeatures\n      .map((feature) => {\n        const f = feature.definition;\n        f.className = cls.definition.name;\n        f.subclassName = null;\n        return f;\n      })\n      .concat(subclassFeatures)\n      .filter((classFeature) => classFeature.requiredLevel <= classLevel)\n      .sort((a, b) => a.requiredLevel - b.requiredLevel);\n    return result;\n  } else {\n    const result = cls.classFeatures\n      .map((feature) => {\n        const f = feature.definition;\n        f.className = cls.definition.name;\n        f.subclassName = null;\n        return f;\n      })\n      .filter((classFeature) => classFeature.requiredLevel <= classLevel)\n      .sort((a, b) => a.requiredLevel - b.requiredLevel);\n    return result;\n  }\n}\n\n\n/**\n * Checks if a given class is the starting class of this character\n * @param {object} data character data\n * @param {string} className name of the class to check\n * @returns {boolean} true of the class is a starting class, false otherwise\n */\nfunction isStartingClass(data, className) {\n  return data.classes.find((cls) => cls.definition.name === className && cls.isStartingClass);\n}\n\n/**\n * Gets all class modifiers for a given character\n * This filters out all modifiers that do not have an entry in the class features passed in\n * For multiclassing characters, it checks if the given class is the starting class or a multiclass,\n *    then the `.availableToMulticlass` is queried if this modifier is enabled or not\n * @param {obj} cls character.classes[] entry\n * @param {*} classLevel level requirement up to which the class features should be extracted\n */\nfunction getClassModifiers(data, classFeatures, isStartingClass = false) {\n  const modifiers = data.modifiers.class.filter((classModifier) => {\n    // check the class from which this modifier came\n    const feature = classFeatures.find((feature) => feature.id === classModifier.componentId);\n    if (feature !== undefined) {\n      const isFeatureAvailable = classModifier.availableToMulticlass ? true : isStartingClass;\n      logger.debug(\n        `${isFeatureAvailable ? \"  [  AVAIL]\" : \"  [UNAVAIL]\"} Modifier found: ${classModifier.friendlyTypeName} (${\n          classModifier.friendlySubtypeName\n        })`\n      );\n      return isFeatureAvailable;\n    }\n    return false;\n  });\n\n  return modifiers;\n}\n\nexport function getAllClassFeatures(data) {\n  return data.classes\n    .map((cls) => {\n      return getClassFeatures(cls, cls.level);\n    })\n    .flat();\n}\n\nfunction getClassOptionModifiers(data) {\n  const classFeatures = getAllClassFeatures(data);\n\n  const modifiers = data.modifiers.class.filter((classModifier) => {\n    const componentId = classModifier.componentId;\n    const feature = classFeatures.find((feature) => feature.id === componentId);\n\n    if (feature === undefined) {\n      logger.debug(`Modifier found: ${classModifier.friendlyTypeName} (${classModifier.friendlySubtypeName})`);\n      return true;\n    }\n    return false;\n  });\n\n  return modifiers;\n}\n\n/**\n * Filters the modifiers with the utility functions above\n * @param {object} data character data\n * @returns {[object[]]} an array containing an array of filtered modifiers, grouped by class\n */\nfunction filterModifiers(data, classInfo) {\n  // get the classFeatures for all classes\n  data.classes.forEach((cls, index) => {\n    const features = getClassFeatures(cls, cls.level);\n    classInfo[index].modifiers = getClassModifiers(data, features, isStartingClass(data, cls.definition.name));\n  });\n  return classInfo;\n}\n\nexport function fixCharacterLevels(data) {\n  data.unfilteredModifiers = foundry.utils.deepClone(data.character.modifiers);\n  const classInfo = getClassInfo(data.character);\n  const filteredClassInfo = filterModifiers(data.character, classInfo);\n  let classModifiers = getClassOptionModifiers(data.character, classInfo);\n\n  filteredClassInfo.forEach((cls) => {\n    logger.debug(`${cls.isStartingClass ? \"Starting Class\" : \"Multiclass\"}: [lvl${cls.level}] ${cls.name} `);\n    logger.debug(\n      extractInfo(cls.modifiers)\n        .map((s) => `    ${s}`)\n        .join(\"\\n\")\n    );\n    classModifiers = classModifiers.concat(cls.modifiers);\n  });\n  data.character.modifiers.class = classModifiers;\n  return data;\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport DDBProxy from \"../../lib/DDBProxy.js\";\nimport PatreonHelper from \"../../lib/PatreonHelper.js\";\nimport logger from \"../../logger.js\";\nimport DDBMonster from \"../DDBMonster.js\";\nimport DDBMonsterFactory from \"../DDBMonsterFactory.js\";\nimport DDBMonsterFeatureFactory from \"../monster/features/DDBMonsterFeatureFactory.js\";\nimport { newNPC } from \"../monster/templates/monster.js\";\n\nexport default class DDBCompanion {\n\n  constructor(block, options = {}) {\n    // console.warn(\"DDBCompanion\", { block });\n    this.options = options;\n    this.block = block;\n    this.blockDatas = this.block.querySelectorAll(\"p.Stat-Block-Styles_Stat-Block-Data\");\n    this.npc = null;\n    this.data = {};\n    this.parsed = false;\n    this.type = this.options.type;\n\n    this.useItemAC = false; // game.settings.get(\"ddb-importer\", \"munching-policy-monster-use-item-ac\");\n    this.legacyName = false; // game.settings.get(\"ddb-importer\", \"munching-policy-legacy-postfix\");\n    this.addMonsterEffects = true; // game.settings.get(\"ddb-importer\", \"munching-policy-add-monster-effects\");\n    this.removeSplitCreatureActions = true;\n    this.removeCreatureOnlyNames = true;\n    this.addChrisPremades = true;\n\n    this.summons = {\n      match: {\n        proficiency: false,\n        attacks: false,\n        saves: false,\n      },\n      bonuses: {\n        ac: \"\",\n        hp: \"\",\n        attackDamage: \"\",\n        saveDamage: \"\",\n        healing: \"\",\n      },\n      profiles: [],\n      prompt: true,\n    };\n  }\n\n  static async addEnrichedImageData(document) {\n    const tier = PatreonHelper.getPatreonTier();\n    const tiers = PatreonHelper.calculateAccessMatrix(tier);\n    if (!tiers.all || DDBProxy.isCustom()) return document;\n    const name = document.name;\n    // this endpoint is not supported in custom proxies\n    if (!CONFIG.DDBI.EXTRA_IMAGES) {\n      const path = \"/proxy/enriched/actor/images\";\n      const parsingApi = DDBProxy.getProxy();\n      const response = await fetch(`${parsingApi}${path}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        }\n      });\n\n      const j = await response.json();\n      if (!j.success) return document;\n      foundry.utils.setProperty(CONFIG, \"DDBI.EXTRA_IMAGES\", j.data);\n    }\n\n    if (!foundry.utils.hasProperty(CONFIG, \"DDBI.EXTRA_IMAGES.summons\")) return document;\n    const data = CONFIG.DDBI.EXTRA_IMAGES.summons[name]\n      ?? CONFIG.DDBI.EXTRA_IMAGES.summons[name.split(\"(\")[0].trim()];\n\n    if (!data) return document;\n\n    if (data.monsterIDs && data.monsterIDs.length > 0) {\n      const monsterFactory = new DDBMonsterFactory({ type: \"summons\" });\n\n      await monsterFactory.fetchDDBMonsterSourceData(DDBMonsterFactory.defaultFetchOptions(data.monsterIDs));\n\n      for (const monsterSource of monsterFactory.source) {\n        const img = monsterSource.basicAvatarUrl ?? monsterSource.largeAvatarUrl ?? monsterSource.avatarUrl;\n        const tokenImg = monsterSource.avatarUrl;\n        foundry.utils.setProperty(document, \"flags.monsterMunch.tokenImg\", tokenImg);\n        foundry.utils.setProperty(document, \"flags.monsterMunch.img\", img);\n        return document;\n      }\n    }\n    if (data.actor) {\n      foundry.utils.setProperty(document, \"flags.monsterMunch.img\", data.actor);\n    }\n    if (data.token) {\n      foundry.utils.setProperty(document, \"flags.monsterMunch.tokenImg\", data.token);\n    }\n\n    // future enhancement loop through the downloaded compendium monsters for image\n    return document;\n  }\n\n  #generateAbilities() {\n    const abilityNodes = this.block.querySelector(\"div.stat-block-ability-scores\");\n\n    abilityNodes.querySelectorAll(\"div.stat-block-ability-scores-stat\").forEach((aNode) => {\n      const ability = aNode.querySelector(\"div.stat-block-ability-scores-heading\").innerText.toLowerCase();\n\n      const getFallbackAbility = () => {\n        const clone = aNode.querySelector(\"div.stat-block-ability-scores-data\").cloneNode(true);\n        clone.getElementsByTagName(\"span\")[0].innerHTML = \"\";\n        return clone.innerText.trim();\n      };\n\n      const abilityScore = aNode.querySelector(\"span.stat-block-ability-scores-score\")?.innerText\n        ?? getFallbackAbility();\n\n      const value = Number.parseInt(abilityScore);\n      const mod = CONFIG.DDB.statModifiers.find((s) => s.value == value).modifier;\n\n      this.npc.system.abilities[ability]['value'] = value;\n      this.npc.system.abilities[ability]['mod'] = mod;\n    });\n  }\n\n  getBlockData(type) {\n    const block = Array.from(this.blockDatas).find((el) => {\n      const elementName = el.innerText.trim();\n      const elementStartsWith = elementName.startsWith(type);\n      const isOnly = elementName.toLowerCase().includes(\"only\")\n        ? elementName.toLowerCase().includes(this.options.subType.toLowerCase())\n        : true;\n      return elementStartsWith && isOnly;\n    });\n    if (!block) return undefined;\n\n    const header = block.getElementsByTagName(\"strong\")[0].innerText.toLowerCase();\n    if (header.includes(\"only\") && !header.includes(this.options.subType.toLowerCase())) {\n      return undefined;\n    }\n\n    const clone = block.cloneNode(true);\n    clone.getElementsByTagName(\"strong\")[0].innerHTML = \"\";\n    return clone.innerText.trim();\n  }\n\n  // savings throws\n  #generateSavingThrows() {\n    const saveString = this.getBlockData(\"Saving Throws\");\n    if (!saveString) return;\n\n    const saves = saveString.split(\",\");\n\n    saves.forEach((save) => {\n      const ability = save.trim().split(\" \")[0].toLowerCase();\n      if (save.includes(\"plus PB\") || save.includes(\"+ PB\")) {\n        this.npc.system.abilities[ability]['proficient'] = 1;\n      }\n    });\n  }\n\n  #generateArmorClass() {\n    const acString = this.getBlockData(\"Armor Class\");\n    if (!acString) return;\n\n    const ac = Number.parseInt(acString.split(\",\")[0]);\n\n    if (Number.isInteger(ac)) {\n      this.npc.system.attributes.ac = {\n        flat: ac,\n        calc: \"natural\",\n        formula: \"\",\n      };\n\n      if (acString.includes(\"plus PB\") || acString.includes(\"+ PB\")) {\n        this.summons.bonuses.ac = \"@prof\";\n      } else if (acString.includes(\"+ the level of the spell\")) {\n        this.summons.bonuses.ac = \"@item.level\";\n      }\n    }\n  }\n\n  #generateProficiencyBonus() {\n    const profString = this.block.querySelector(\"p.Stat-Block-Styles_Stat-Block-Data-Last\")\n      ?? this.getBlockData(\"Challenge\");\n\n    if (profString && profString.innerText.includes(\"equals your bonus\")) {\n      this.summons.match.proficiency = true;\n    }\n  }\n\n\n  #getBaseHitPoints(hpString) {\n    const baseString = this.options.subType && hpString.includes(\" or \")\n      ? hpString.split(\"or\").find((s) => s.toLowerCase().includes(this.options.subType.toLowerCase()))\n      : hpString.trim();\n\n    const hpFind = baseString.trim().match(/(\\d*)/);\n    const hpInt = Number.parseInt(hpFind);\n    return Number.isInteger(hpInt) ? hpInt : 0;\n  }\n\n  #generateHitPoints() {\n    const hpString = this.getBlockData(\"Hit Points\");\n    if (!hpString) return;\n\n    const hpInt = this.#getBaseHitPoints(hpString);\n    this.npc.system.attributes.hp.max = hpInt;\n    this.npc.system.attributes.hp.value = hpInt;\n\n    // conditions\n    // 5 + five times your druid level\n    // 5 + five times your ranger level (the beast has a number of Hit Dice [d8s] equal to your ranger level)\n    // 1 + your Intelligence modifier + your artificer level (the homunculus has a number of Hit Dice [d4s] equal to your artificer level)\n    // 40 + 15 for each spell level above 4th\n    // 20 (Air only) or 30 (Land and Water only) + 5 for each spell level above 2nd\n    // 50 (Demon only) or 40 (Devil only) or 60 (Yugoloth only) + 15 for each spell level above 6th\n    // 30 (Ghostly and Putrid only) or 20 (Skeletal only) + 10 for each spell level above 3rd\n\n    // additional summon points\n    const hpAdjustments = [];\n    const modMatch = hpString.match(/\\+ your (\\w+) modifier/);\n\n    if (modMatch) hpAdjustments.push(`@abilities.${modMatch[1].toLowerCase().substring(0, 3)}.mod`);\n\n    // class level\n    const klassMultiMatch = hpString.match(/\\+ (\\w+)?( times? )?your (\\w+) level/);\n    if (klassMultiMatch) {\n      const klass = klassMultiMatch[3].trim().toLowerCase();\n      const multiplier = klassMultiMatch[1]\n        ? DICTIONARY.numbers.find((d) => d.natural === klassMultiMatch[1].trim().toLowerCase()).num\n        : null;\n      const multiplierString = multiplier ? ` * ${multiplier}` : \"\";\n      hpAdjustments.push(`(@classes.${klass}.levels${multiplierString})`);\n    }\n\n    // spell level\n    const spellLevelMatch = hpString.match(/\\+ (\\d+) for each spell level above (\\d)/);\n    if (spellLevelMatch) {\n      hpAdjustments.push(`(${spellLevelMatch[1]} * (@item.level - ${spellLevelMatch[2]}))`);\n    }\n\n    if (hpAdjustments.length > 0) {\n      this.summons.bonuses.hp = hpAdjustments.join(\" + \");\n    }\n\n  }\n\n  #generateHitDie() {\n    // (the beast has a number of Hit Dice [d8s] equal to your ranger level)\n    // (the homunculus has a number of Hit Dice [d4s] equal to your artificer level)\n    const hpString = this.getBlockData(\"Hit Points\");\n    if (!hpString || !hpString.includes(\"number of Hit Dice\")) return;\n\n    const hitDice = hpString.match(/Hit Dice \\[d(\\d)s\\] equal to your (\\w+) level/);\n    if (hitDice) {\n      const hitDiceAdjustment = {\n        \"key\": \"system.attributes.hp.formula\",\n        \"value\": `(@classes.${hitDice[2]}.levels)[d${hitDice[1]}]`\n      };\n      this.npc.flags.ddbimporter.summons.changes.push(hitDiceAdjustment);\n    }\n  }\n\n  #generateSkills() {\n    const skillString = this.getBlockData(\"Skills\");\n    if (!skillString) return;\n    //  \"History + 12, Perception +0 plus PB &times; 2\"\n    const skillsMaps = skillString.split(\",\").filter((str) => str != '').map((str) => {\n      const skillMatch = str.trim().match(/(\\w+ *\\w* *\\w*)(?: *)([+-])(?: *)(\\d+) *(plus PB)? *(&times;|x|times)? *(\\d*)?/);\n      let result = {};\n      if (skillMatch) {\n        result = {\n          name: skillMatch[1].trim(),\n          value: skillMatch[2] + skillMatch[3],\n          proficient: skillMatch[4] !== undefined,\n          expertise: Number.isInteger(skillMatch[5]?.trim()),\n          pbMultiplier: skillMatch[5],\n        };\n        logger.debug(`Found skill for companion ${this.npc.name}`, result);\n      } else {\n        logger.error(`Skill Parsing failed for ${this.npc.name}`);\n        logger.debug(skillString);\n        logger.debug(str);\n        logger.debug(skillMatch);\n      }\n      return result;\n    });\n\n    const keys = Object.keys(this.npc.system.skills);\n    const validSkills = DICTIONARY.character.skills.map((skill) => skill.name);\n    keys\n      .filter((key) => validSkills.includes(key))\n      .forEach((key) => {\n        let skill = this.npc.system.skills[key];\n        const lookupSkill = DICTIONARY.character.skills.find((s) => s.name == key);\n        const skillData = skillsMaps.find((skl) => skl.name == lookupSkill.label);\n\n        if (skillData) {\n          skill.value = skillData.expertise ? 2 : skillData.proficient ? 1 : 0;\n          const ability = this.npc.system.abilities[skill.ability];\n          if (parseInt(ability.mod) !== parseInt(skillData.value.trim())) {\n            skill.bonuses.check = parseInt(skillData.value.trim()) - parseInt(ability.mod);\n            skill.bonuses.passive = parseInt(skillData.value.trim()) - parseInt(ability.mod);\n          }\n\n          this.npc.system.skills[key] = skill;\n        }\n\n      });\n  }\n\n  #generateSize() {\n    const data = this.block.querySelector(\"p.Stat-Block-Styles_Stat-Block-Metadata\").innerHTML;\n\n    if (!data) return;\n    const size = data.split(\" \")[0];\n    const sizeData = DICTIONARY.sizes.find((s) => size.toLowerCase() == s.name.toLowerCase())\n      ?? { name: \"Medium\", value: \"med\", size: 1 };\n\n    this.npc.system.traits.size = sizeData.value;\n    this.npc.prototypeToken.width = sizeData.size >= 1 ? sizeData.size : 1;\n    this.npc.prototypeToken.height = sizeData.size >= 1 ? sizeData.size : 1;\n    this.npc.prototypeToken.scale = sizeData.size >= 1 ? 1 : sizeData.size;\n  }\n\n  #generateType() {\n    const data = this.block.querySelector(\"p.Stat-Block-Styles_Stat-Block-Metadata\").innerHTML;\n    if (!data) return;\n    const typeName = data.split(\",\")[0].split(\" \").pop().toLowerCase();\n\n    if (CONFIG.DND5E.creatureTypes[typeName]) {\n      this.npc.system.details.type.value = typeName;\n    } else {\n      this.npc.system.details.type.value = \"Unknown\";\n    }\n  }\n\n  #generateAlignment() {\n    const data = this.block.querySelector(\"p.Stat-Block-Styles_Stat-Block-Metadata\").innerHTML;\n    if (!data) return;\n    const alignment = data.split(\",\").pop().toLowerCase().trim();\n\n    if (alignment && alignment !== \"\") this.npc.system.details.alignment = alignment;\n  }\n\n  static getDamageAdjustments(data) {\n    const values = [];\n    const custom = [];\n    const bypasses = [];\n    const damageTypes = DICTIONARY.actions.damageType.filter((d) => d.name !== null).map((d) => d.name);\n\n    data.forEach((adj) => {\n      if (damageTypes.includes(adj.toLowerCase())) {\n        values.push(adj.toLowerCase());\n      } else if (adj.includes(\"physical\")) {\n        values.push(\"bludgeoning\", \"piercing\", \"slashing\");\n        bypasses.push(\"mgc\");\n      } else {\n        custom.push(adj);\n      }\n    });\n\n    const adjustments = {\n      value: values,\n      bypasses,\n      custom: custom.join(\"; \"),\n    };\n\n    return adjustments;\n  }\n\n  filterDamageConditions(data) {\n    const onlyFiltered = data.split(/[;,]/).filter((state) => {\n      if (state.includes(\"only\")) {\n        if (state.toLowerCase().includes(this.options.subType.toLowerCase())) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return true;\n      }\n    });\n\n    const conditions = [];\n\n    onlyFiltered.forEach((state) => {\n      const results = state\n        .split(\"and\")\n        .map((s) => {\n          if (s.includes(\"determined by the\")) {\n            return this.options.subType.toLowerCase();\n          } else {\n            return s.split(\"(\")[0].trim().toLowerCase();\n          }\n        });\n      conditions.push(...results);\n    });\n\n    return conditions;\n  }\n\n  // Damage Resistances acid (Water only); lightning and thunder (Air only); piercing and slashing (Earth only)\n  // Damage Immunities poison; fire (Fire only)\n  // Damage Immunities necrotic, poison\n  // Condition Immunities exhaustion, frightened, paralyzed, poisoned\n  #generateImmunities() {\n    const data = this.getBlockData(\"Damage Immunities\");\n    if (!data) return;\n\n    this.npc.system.traits.di = DDBCompanion.getDamageAdjustments(this.filterDamageConditions(data));\n  }\n\n  #generateResistances() {\n    const data = this.getBlockData(\"Damage Resistances\");\n    if (!data) return;\n\n    this.npc.system.traits.dr = DDBCompanion.getDamageAdjustments(this.filterDamageConditions(data));\n  }\n\n  #generateVulnerabilities() {\n    const data = this.getBlockData(\"Damage Vulnerabilities\");\n    if (!data) return;\n\n    this.npc.system.traits.dv = DDBCompanion.getDamageAdjustments(this.filterDamageConditions(data));\n  }\n\n  // Condition Immunities exhaustion, frightened, paralyzed, poisoned\n  #generateConditions() {\n    const data = this.getBlockData(\"Condition Immunities\");\n    if (!data) return;\n\n    let values = [];\n    let custom = [];\n\n    data.split(\",\").forEach((adj) => {\n      const valueAdjustment = DICTIONARY.conditions.find((condition) => condition.label.toLowerCase() == adj.trim().toLowerCase());\n      if (valueAdjustment) {\n        values.push(valueAdjustment.foundry);\n      } else {\n        custom.push(adj);\n      }\n    });\n\n    // Condition Immunities charmed, exhaustion, frightened, incapacitated, paralyzed, petrified, poisoned\n    this.npc.system.traits.ci = {\n      value: values,\n      custom: custom.join(\"; \"),\n    };\n  }\n\n  #generateSenses() {\n    const data = this.getBlockData(\"Senses\");\n    if (!data) return;\n\n    // darkvision 60 ft., passive Perception 10 + (PB &times; 2)\n    // darkvision 60 ft., passive Perception 10 + (PB × 2)\n\n    data.split(\",\").forEach((sense) => {\n      const match = sense.match(/(darkvision|blindsight|tremorsense|truesight)\\s+(\\d+)/i);\n\n      if (match) {\n        const value = parseInt(match[2]);\n        this.npc.system.attributes.senses[\"units\"] = \"ft\";\n        this.npc.system.attributes.senses[match[1].toLowerCase()] = value;\n\n        const senseType = DICTIONARY.senseMap()[match[1].toLowerCase()];\n\n        if (value > 0 && value > this.npc.prototypeToken.sight.range && foundry.utils.hasProperty(CONFIG.Canvas.visionModes, senseType)) {\n          foundry.utils.setProperty(this.npc.prototypeToken.sight, \"visionMode\", senseType);\n          foundry.utils.setProperty(this.npc.prototypeToken.sight, \"range\", value);\n          this.npc.prototypeToken.sight = foundry.utils.mergeObject(this.npc.prototypeToken.sight, CONFIG.Canvas.visionModes[senseType].vision.defaults);\n        }\n        if (value > 0 && foundry.utils.hasProperty(DICTIONARY.detectionMap, match[1].toLowerCase())) {\n          const detectionMode = {\n            id: DICTIONARY.detectionMap[match[1].toLowerCase()],\n            range: value,\n            enabled: true,\n          };\n\n          // only add duplicate modes if they don't exist\n          if (!this.npc.prototypeToken.detectionModes.some((mode) => mode.id === detectionMode.id)) {\n            this.npc.prototypeToken.detectionModes.push(detectionMode);\n          }\n        }\n      }\n    });\n  }\n\n  #generateLanguages() {\n    const data = this.getBlockData(\"Languages\");\n    if (!data) return;\n\n    // loop back to add small chance they have non-custom language support\n    this.npc.system.traits.languages.custom = data;\n  }\n\n  #generateSpeed() {\n    const data = this.getBlockData(\"Speed\");\n    if (!data) return;\n\n    // 30 ft.; fly 40 ft. (hover) (Ghostly only)\n    // 40 ft.; climb 40 ft. (Demon only); fly 60 ft. (Devil only)\n    // 30 ft., fly 40 ft.\n\n    const onlyFiltered = data.split(/[;,]/).filter((speed) => {\n      if (speed.includes(\"only\")) {\n        if (speed.toLowerCase().includes(this.options.subType.toLowerCase())) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return true;\n      }\n    });\n\n    const speeds = [];\n    onlyFiltered.forEach((state) => {\n      const results = state\n        .split(\"and\")\n        .map((s) => {\n          return s.trim().toLowerCase();\n        });\n      speeds.push(...results);\n    });\n\n    speeds.forEach((speed) => {\n      const match = speed.match(/(\\w+ )*(\\d+)/i);\n      if (match) {\n        const type = match[1]?.trim() ?? \"walk\";\n        this.npc.system.attributes.movement[type] = parseInt(match[2]);\n        if (speed.includes(\"hover\")) this.npc.system.attributes.movement[\"hover\"] = true;\n      }\n    });\n  }\n\n\n  async getFeature(text, type) {\n    const options = { extra: true, useItemAC: this.useItemAC, legacyName: this.legacyName, addMonsterEffects: this.addMonsterEffects, addChrisPremades: this.addChrisPremades };\n    const ddbMonster = new DDBMonster(null, options);\n    ddbMonster.name = this.name;\n    ddbMonster.npc = foundry.utils.duplicate(this.npc);\n    ddbMonster.abilities = ddbMonster.npc.system.abilities;\n    ddbMonster.proficiencyBonus = 0;\n    const featureFactory = new DDBMonsterFeatureFactory({ ddbMonster, hideDescription: false, updateExisting: false });\n    await featureFactory.generateActions(text, type);\n    logger.debug(\"Generating companion feature\", { text, type, featureFactory });\n    const toHitRegex = /(your spell attack modifier to hit)/i;\n    if (toHitRegex.test(text)) {\n      this.summons.match.attacks = true;\n    }\n    const spellSaveRegex = /(against your spell save DC)/i;\n    if (spellSaveRegex.test(text)) {\n      this.summons.match.saves = true;\n    }\n    return featureFactory.getFeatures(type);\n  }\n\n\n  async #processFeatureElement(element, featType) {\n    let next = element.nextElementSibling;\n\n    if (!next) return { next, featType };\n\n    switch (next.innerText.trim().toLowerCase()) {\n      case \"action\":\n      case \"actions\":\n        logger.debug(\"Companion parsing switching to actions\");\n        return { next, featType: \"action\" };\n      case \"reaction\":\n      case \"reactions\":\n        logger.debug(\"Companion parsing switching to reactions\");\n        return { next, featType: \"reaction\" };\n      case \"bonus actions\":\n      case \"bonus\":\n      case \"bonus action\":\n        logger.debug(\"Companion parsing switching to bonus actions\");\n        return { next, featType: \"bonus\" };\n      // no default\n    }\n\n    const features = await this.getFeature(next.outerHTML, featType);\n    features.forEach((feature) => {\n      if (this.removeSplitCreatureActions && feature.name.toLowerCase().includes(\"only\")\n        && feature.name.toLowerCase().includes(this.options.subType.toLowerCase())\n      ) {\n        if (this.removeCreatureOnlyNames) feature.name = feature.name.split(\"only\")[0].split(\"(\")[0].trim();\n        this.npc.items.push(feature);\n      } else if (!this.removeSplitCreatureActions || !feature.name.toLowerCase().includes(\"only\")) {\n        this.npc.items.push(feature);\n      }\n      if (foundry.utils.getProperty(feature, \"flags.ddbimporter.levelBonus\")) {\n        this.summons.bonuses.attackDamage = \"@item.level\";\n        this.summons.bonuses.saveDamage = \"@item.level\";\n      }\n    });\n    return { next, featType };\n  }\n\n  async #generateFeatures() {\n\n    const data = this.block.querySelector(\"p.Stat-Block-Styles_Stat-Block-Data-Last\");\n    if (!data) {\n      logger.error(`Unable to parse ${this.npc.name} features and actions`, { this: this });\n      return;\n    }\n\n    let now = data;\n    let featType = \"special\";\n    while (now !== null) {\n      const result = await this.#processFeatureElement(now, featType);\n      now = result.next;\n      featType = result.featType;\n    }\n  }\n\n  // #extraFeatures() {\n  // if (this.name === \"Drake Companion\") {\n  //   this.npc.flags[\"arbron-summoner\"].config.actorChanges.push(\n  //     {\n  //       \"key\": \"system.traits.size\",\n  //       \"value\": `@classes.ranger.levels > 6 ? \"med\" : \"${sizeData.value}\"`,\n  //     },\n  //     {\n  //       \"key\": \"prototypeToken.width\",\n  //       \"value\": `@classes.ranger.levels > 6 ? 1 : ${this.npc.prototypeToken.width}`,\n  //     },\n  //     {\n  //       \"key\": \"prototypeToken.height\",\n  //       \"value\": `@classes.ranger.levels > 6 ? 1 : ${this.npc.prototypeToken.height}`,\n  //     },\n  //     {\n  //       \"key\": \"prototypeToken.scale\",\n  //       \"value\": `@classes.ranger.levels > 6 ? 1 : ${this.npc.prototypeToken.scale}`,\n  //     },\n  //   );\n  // }\n  // }\n\n  async parse() {\n    // console.warn(\"PARSE COMPANION\", { block: this.block, aThis: this });\n    const name = this.options.name ?? this.block.querySelector(\"p.Stat-Block-Styles_Stat-Block-Title\").innerHTML;\n    const namePostfix = this.options.subType\n      ? `(${this.options.subType})`\n      : \"\";\n\n    if (!name) return;\n    this.name = name;\n    logger.debug(`Beginning companion parse for ${name}`, { name, block: this.block });\n\n    const actorName = `${name} ${namePostfix}`.trim();\n    this.npc = await newNPC(actorName);\n    foundry.utils.setProperty(this.npc, \"flags.ddbimporter.companion.modifiers\", {});\n    this.npc.prototypeToken.name = actorName;\n\n    foundry.utils.setProperty(this.npc, \"flags.ddbimporter.summons.changes\", []);\n    foundry.utils.setProperty(this.npc, \"flags.ddbimporter.summons.name\", `${name}`);\n    foundry.utils.setProperty(this.npc, \"flags.ddbimporter.id\", `companion-${actorName}`);\n    foundry.utils.setProperty(this.npc, \"flags.ddbimporter.entityTypeId\", `companion-${this.type}`);\n\n    this.#generateSize();\n    this.#generateType();\n    this.#generateAbilities();\n    this.#generateSavingThrows();\n    this.#generateArmorClass();\n    this.#generateProficiencyBonus();\n    this.#generateHitPoints();\n    this.#generateHitDie();\n    this.#generateSkills();\n    this.#generateImmunities();\n    this.#generateResistances();\n    this.#generateVulnerabilities();\n    this.#generateConditions();\n    this.#generateAlignment();\n    this.#generateSenses();\n    this.#generateLanguages();\n    this.#generateSpeed();\n    await this.#generateFeatures();\n\n    // make friendly\n    foundry.utils.setProperty(this.npc, \"prototypeToken.disposition\", 1);\n\n    const data = await DDBCompanion.addEnrichedImageData(foundry.utils.duplicate(this.npc));\n\n    this.data = data;\n    this.parsed = true;\n\n    logger.debug(`Finished companion parse for ${name}`, { name, block: this.block, data: this.data, npc: this.npc });\n  }\n\n}\n","import FolderHelper from \"../../lib/FolderHelper.js\";\nimport utils from \"../../lib/utils.js\";\nimport logger from \"../../logger.js\";\nimport DDBItemImporter from \"../../lib/DDBItemImporter.js\";\nimport { buildNPC, copyExistingMonsterImages, generateIconMap } from \"../../muncher/importMonster.js\";\nimport DDBCompanion from \"./DDBCompanion.js\";\nimport { isEqual } from \"../../../vendor/lowdash/isequal.js\";\nimport DDBSummonsManager from \"./DDBSummonsManager.js\";\n\nexport default class DDBCompanionFactory {\n\n  constructor(html, options = {}) {\n    // console.warn(\"html\", html);\n    this.options = options;\n    this.html = html;\n    this.doc = new DOMParser().parseFromString(html.replaceAll(\"\\n\", \"\"), 'text/html');\n    this.companions = [];\n    this.actor = this.options.actor;\n    this.folderIds = new Set();\n    this.updateCompanions = true; //  game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\");\n    this.updateImages = false; // game.settings.get(\"ddb-importer\", \"munching-policy-update-images\");\n    this.results = {\n      created: [],\n      updated: [],\n    };\n    this.originDocument = options.originDocument;\n    this.summons = null;\n    this.badSummons = false;\n    this.noCompendiums = options.noCompendiums ?? false;\n    this.indexFilter = { fields: [\n      \"name\",\n      \"flags.ddbimporter.compendiumId\",\n      \"flags.ddbimporter.id\",\n      \"flags.ddbimporter.summons\",\n    ] };\n    this.summonsManager = new DDBSummonsManager();\n    this.itemHandler = null;\n  }\n\n  async init() {\n    await this.summonsManager.init();\n    this.itemHandler = this.summonsManager.itemHandler;\n  }\n\n  get data() {\n    return this.options.data ?? this.companions.map((c) => c.data);\n  }\n\n  static MULTI = {\n    \"Aberrant Spirit\": [\"Slaad\", \"Beholderkin\", \"Star Spawn\"],\n    \"Bestial Spirit\": [\"Air\", \"Land\", \"Water\"],\n    \"Celestial Spirit\": [\"Avenger\", \"Defender\"],\n    \"Construct Spirit\": [\"Clay\", \"Metal\", \"Stone\"],\n    \"Elemental Spirit\": [\"Air\", \"Earth\", \"Fire\", \"Water\"],\n    \"Fey Spirit\": [\"Fuming\", \"Mirthful\", \"Tricksy\"],\n    \"Fiendish Spirit\": [\"Demon\", \"Devil\", \"Yugoloth\"],\n    \"Shadow Spirit\": [\"Fury\", \"Despair\", \"Fear\"],\n    \"Undead Spirit\": [\"Ghostly\", \"Putrid\", \"Skeletal\"],\n    \"Drake Companion\": [\"Acid\", \"Cold\", \"Fire\", \"Lightning\", \"Poison\"],\n    \"Draconic Spirit\": [\"Chromatic\", \"Gem\", \"Metallic\"],\n    // \"Primal Companion\": [\"Beast of the Land\", \"Beast of the Sea\", \"Beast of the Sky\"],\n  };\n\n  async #buildCompanion(block, options = {}) {\n    logger.debug(\"Beginning companion parse\", { block });\n    const ddbCompanion = new DDBCompanion(block, foundry.utils.mergeObject(options, { type: this.options.type }));\n    await ddbCompanion.parse();\n    if (ddbCompanion.parsed) {\n      this.companions.push(ddbCompanion);\n      const companionSummons = foundry.utils.deepClone(ddbCompanion.summons);\n      const existingSummons = this.summons\n        ? foundry.utils.deepClone(this.summons)\n        : null;\n      const summonMatch = isEqual(existingSummons, existingSummons);\n      if (this.summons === null) {\n        this.summons = foundry.utils.deepClone(ddbCompanion.summons);\n      } else if (!summonMatch) {\n        logger.error(\"Companion has different summons\", {\n          existingSummons,\n          companionSummons,\n          factory: this,\n          ddbCompanion,\n          equal: isEqual(existingSummons, existingSummons),\n          summonMatch,\n        });\n        this.badSummons = false;\n      }\n\n    }\n  }\n\n  async parse() {\n\n    await this.init();\n\n    // console.warn(this.doc);\n    const statBlockDivs = this.doc.querySelectorAll(\"div.stat-block-background, div.stat-block-finder, div.basic-text-frame\");\n\n    // console.warn(\"statblkc divs\", { statBlockDivs, athis: this });\n    for (const block of statBlockDivs) {\n      const name = block\n        .querySelector(\"p.Stat-Block-Styles_Stat-Block-Title\")\n        .textContent\n        .trim()\n        .toLowerCase()\n        .split(/\\s/)\n        .map((w) => utils.capitalize(w.trim()))\n        .join(\" \");\n\n      // console.warn(\"Processing Companion\", { name, block });\n      if (name && name in DDBCompanionFactory.MULTI) {\n        for (const subType of DDBCompanionFactory.MULTI[name]) {\n          await this.#buildCompanion(block, { name, subType });\n        }\n      } else {\n        await this.#buildCompanion(block, { name, subType: null });\n      }\n\n    }\n\n    return this.data;\n  }\n\n  async #generateCompanionFolders(rootFolderName = \"DDB Companions\") {\n    const rootFolder = await FolderHelper.getOrCreateFolder(null, \"Actor\", rootFolderName);\n    for (const companion of this.companions) {\n      const folder = await FolderHelper.getOrCreateFolder(rootFolder, \"Actor\", utils.capitalize(companion.type ?? \"other\"));\n      companion.data.folder = folder._id;\n      this.folderIds.add(folder._id);\n    }\n  }\n\n  async getExistingCompendiumCompanions() {\n    await this.itemHandler.buildIndex(this.indexFilter);\n\n    const existingCompanions = await Promise.all(this.itemHandler.compendiumIndex\n      .filter((companion) => foundry.utils.hasProperty(companion, \"flags.ddbimporter.id\")\n        && this.companions.some((c) => foundry.utils.getProperty(c, \"data.flags.ddbimporter.id\") === companion.flags.ddbimporter.id)\n      )\n      .map(async (companion) => this.itemHandler.compendium.getDocument(companion._id))\n    );\n\n    return existingCompanions;\n  }\n\n  async getExistingWorldCompanions({ folderOverride = null, rootFolderNameOverride = undefined, limitToFactory = false } = {}) {\n    if (game.user.isGM && !this.noCompendiums) return [];\n    if (!folderOverride) await this.#generateCompanionFolders(rootFolderNameOverride);\n\n    const companionNames = limitToFactory ? this.data.map((c) => c.name) : [];\n    logger.debug(\"Matched companion names\", companionNames);\n\n    const existingCompanions = await game.actors.contents\n      .filter((companion) => foundry.utils.hasProperty(companion, \"folder.id\")\n        && ((!folderOverride && this.folderIds.has(companion.folder.id))\n          || folderOverride?.id === companion.folder.id)\n        && (!limitToFactory || (limitToFactory && companionNames.includes(companion.name)))\n      )\n      .map((companion) => companion);\n    return existingCompanions;\n  }\n\n  static async addToWorld(companion, update) {\n    const results = [];\n    if (!game.user.can(\"ITEM_CREATE\")) return results;\n    const npc = await buildNPC(companion, \"monster\", false, update, true);\n    results.push(npc);\n    return results;\n  }\n\n  async #updateCompanions(companions, existingCompanions) {\n    const updateCompanions = companions.filter((companion) =>\n      existingCompanions.some(\n        (exist) =>\n          exist.flags?.ddbimporter?.id === companion.flags.ddbimporter.id\n          && companion.flags?.ddbimporter?.entityTypeId === companion.flags.ddbimporter.entityTypeId\n      ));\n\n    const results = [];\n\n    for (const companion of updateCompanions) {\n      const existingCompanion = await existingCompanions.find((exist) =>\n        exist.flags?.ddbimporter?.id === companion.flags.ddbimporter.id\n        && companion.flags?.ddbimporter?.entityTypeId === companion.flags.ddbimporter.entityTypeId\n      );\n      companion.folder = existingCompanion.folder?.id;\n      companion._id = existingCompanion._id;\n      logger.info(`Updating companion ${companion.name}`);\n      DDBItemImporter.copySupportedItemFlags(existingCompanion, companion);\n      const npc = game.user.isGM && !this.noCompendiums\n        ? await this.summonsManager.addToCompendium(companion)\n        : await DDBCompanionFactory.addToWorld(companion, true);\n      results.push(npc);\n    }\n\n    return results;\n  }\n\n  async #createCompanions(companions, existingCompanions, folderId) {\n    if (!game.user.can(\"ITEM_CREATE\")) {\n      ui.notifications.warn(`User is unable to create world items, and cannot create companions`);\n      return [];\n    }\n    const newCompanions = companions.filter((companion) =>\n      !existingCompanions.some(\n        (exist) =>\n          exist.flags?.ddbimporter?.id === companion.flags.ddbimporter.id\n          && companion.flags?.ddbimporter?.entityTypeId === companion.flags.ddbimporter.entityTypeId\n      ));\n\n    const results = [];\n    for (const companion of newCompanions) {\n      logger.info(`Creating Companion ${companion.name}`);\n      logger.debug(`Companion data:`, {\n        companion,\n        folderId,\n      });\n\n      if (folderId) companion.folder = folderId;\n      const importedCompanion = game.user.isGM && !this.noCompendiums\n        ? await this.summonsManager.addToCompendium(companion)\n        : await DDBCompanionFactory.addToWorld(companion, false);\n      results.push(importedCompanion);\n    }\n    return results;\n  }\n\n  async updateOrCreateCompanions({ folderOverride = null, rootFolderNameOverride = undefined } = {}) {\n    const existingCompanions = game.user.isGM\n      ? await this.getExistingCompendiumCompanions()\n      : await this.getExistingWorldCompanions({ folderOverride, rootFolderNameOverride });\n\n    let companionData = this.data;\n\n    if (!this.updateCompanions || !this.updateImages) {\n      if (!this.updateImages) {\n        logger.debug(\"Copying monster images across...\");\n        companionData = copyExistingMonsterImages(companionData, existingCompanions);\n      }\n    }\n\n    this.itemHandler.documents = companionData;\n    await this.itemHandler.srdFiddling();\n    await this.itemHandler.iconAdditions();\n\n    await generateIconMap(this.itemHandler.documents);\n\n    if (this.updateCompanions) {\n      this.results.updated = await this.#updateCompanions(this.itemHandler.documents, existingCompanions);\n    }\n    this.results.created = await this.#createCompanions(this.itemHandler.documents, existingCompanions, folderOverride?.id);\n\n  }\n\n\n  static COMPANION_REMAP = {\n    \"Artificer Infusions\": \"Infusion: Homunculus Servant\",\n  };\n\n  async addCompanionsToDocuments(otherDocuments) {\n    const summonActors = game.user.isGM\n      ? await this.getExistingCompendiumCompanions()\n      : await this.getExistingWorldCompanions({ limitToFactory: true });\n    const profiles = summonActors\n      .map((actor) => {\n        return {\n          _id: actor._id,\n          name: actor.name,\n          uuid: actor.uuid,\n          count: null,\n        };\n      });\n    if (this.originDocument) {\n      const alternativeDocument = DDBCompanionFactory.COMPANION_REMAP[this.originDocument.name];\n      const updateDocument = alternativeDocument\n        ? (otherDocuments.find((s) =>\n          s.name === alternativeDocument || s.flags.ddbimporter?.originalName === alternativeDocument\n        ) ?? this.originDocument)\n        : this.originDocument;\n\n      logger.debug(\"Companion Data Load\", {\n        originDocument: updateDocument,\n        profiles,\n        worldActors: summonActors,\n        factory: this,\n        summons: this.summons,\n      });\n      foundry.utils.setProperty(updateDocument, \"system.summons\", foundry.utils.deepClone(this.summons));\n      foundry.utils.setProperty(updateDocument, \"system.summons.profiles\", profiles);\n      foundry.utils.setProperty(updateDocument, \"system.actionType\", \"summ\");\n    }\n  }\n\n}\n","import { DDBCompendiumFolders } from \"../../lib/DDBCompendiumFolders.js\";\nimport DDBItemImporter from \"../../lib/DDBItemImporter.js\";\nimport utils from \"../../lib/utils.js\";\nimport logger from \"../../logger.js\";\nimport { addNPC } from \"../../muncher/importMonster.js\";\n\nconst SUMMONS_ACTOR_STUB = {\n  \"type\": \"npc\",\n  \"system\": {\n    \"abilities\": {\n      \"str\": {\n        \"value\": 100,\n      },\n      \"dex\": {\n        \"value\": 100,\n      },\n      \"con\": {\n        \"value\": 100,\n      },\n      \"int\": {\n        \"value\": 100,\n      },\n      \"wis\": {\n        \"value\": 100,\n      },\n      \"cha\": {\n        \"value\": 100,\n      }\n    },\n    \"attributes\": {\n      \"movement\": {\n        \"burrow\": null,\n        \"climb\": null,\n        \"fly\": null,\n        \"swim\": null,\n        \"walk\": null,\n        \"units\": null,\n        \"hover\": true\n      },\n      \"ac\": {\n        \"flat\": 1000,\n        \"calc\": \"flat\"\n      },\n      \"hp\": {\n        \"value\": 1000,\n        \"max\": 1000,\n        \"temp\": 0,\n        \"tempmax\": 0,\n        \"bonuses\": {}\n      },\n    },\n    \"traits\": {\n      \"size\": \"tiny\",\n    },\n  },\n  \"items\": [],\n  \"effects\": [],\n  \"folder\": null,\n  \"prototypeToken\": {\n    \"actorLink\": false,\n    \"appendNumber\": true,\n    \"prependAdjective\": false,\n    \"width\": 0.5,\n    \"height\": 0.5,\n    \"texture\": {\n      \"anchorX\": 0.5,\n      \"anchorY\": 0.5,\n      \"offsetX\": 0,\n      \"offsetY\": 0,\n      \"fit\": \"contain\",\n      \"scaleX\": 1,\n      \"scaleY\": 1,\n      \"rotation\": 0,\n      \"tint\": \"#ffffff\",\n      \"alphaThreshold\": 0.75\n    },\n    \"hexagonalShape\": 0,\n    \"lockRotation\": false,\n    \"rotation\": 0,\n    \"alpha\": 1,\n    \"disposition\": CONST.TOKEN_DISPOSITIONS.SECRET,\n    \"displayBars\": 0,\n    \"bar1\": {\n      \"attribute\": null\n    },\n    \"bar2\": {\n      \"attribute\": null\n    },\n    \"ring\": {\n      \"enabled\": false,\n    },\n    \"randomImg\": false,\n  },\n};\n\nconst DANCING_LIGHTS_BASE = {\n  \"name\": \"Dancing Lights\",\n  \"img\": \"modules/ddb-importer/img/jb2a/DancingLights_01_Yellow_Thumb.webp\",\n  \"system\": {\n    \"attributes\": {\n      \"movement\": {\n        \"fly\": 60,\n      },\n    },\n  },\n\n  \"prototypeToken\": {\n    \"name\": \"Dancing Lights\",\n    \"width\": 0.5,\n    \"height\": 0.5,\n    \"texture\": {\n      \"src\": \"modules/ddb-importer/img/jb2a/DancingLights_01_Yellow_200x200.webm\",\n    },\n    \"light\": {\n      \"negative\": false,\n      \"priority\": 0,\n      \"alpha\": 0.5,\n      \"angle\": 360,\n      \"bright\": 0,\n      \"color\": null,\n      \"coloration\": 1,\n      \"dim\": 10,\n      \"attenuation\": 0.5,\n      \"luminosity\": 0.5,\n      \"saturation\": 0,\n      \"contrast\": 0,\n      \"shadows\": 0,\n      \"animation\": {\n        \"type\": \"torch\",\n        \"speed\": 3,\n        \"intensity\": 3,\n        \"reverse\": false\n      },\n      \"darkness\": {\n        \"min\": 0,\n        \"max\": 1\n      }\n    },\n  },\n};\n\n\nasync function getSRDActors() {\n  const results = {};\n  const pack = game.packs.get(\"dnd5e.monsters\");\n  if (!pack) return results;\n\n  const jb2aMod = game.modules.get('jb2a_patreon')?.active\n    ? \"jb2a_patreon\"\n    : \"JB2A_DnD5e\";\n\n  const arcaneHand = await pack.getDocument(\"iHj5Tkm6HRgXuaWP\");\n  if (arcaneHand) {\n    results[\"ArcaneHandRed\"] = {\n      name: \"Arcane Hand (Red)\",\n      version: \"1\",\n      required: null,\n      isJB2A: true,\n      needsJB2A: false,\n      folderName: \"Arcane Hand\",\n      data: foundry.utils.mergeObject(arcaneHand.toObject(), {\n        \"name\": \"Arcane Hand (Red)\",\n        \"prototypeToken.texture.src\": \"modules/ddb-importer/img/jb2a/ArcaneHand_Human_01_Idle_Red_400x400.webm\",\n        \"img\": \"modules/ddb-importer/img/jb2a/ArcaneHand_Human_01_Idle_Red_Thumb.webp\",\n      }),\n    };\n    results[\"ArcaneHandPurple\"] = {\n      name: \"Arcane Hand (Purple)\",\n      version: \"1\",\n      required: null,\n      isJB2A: true,\n      needsJB2A: true,\n      folderName: \"Arcane Hand\",\n      data: foundry.utils.mergeObject(arcaneHand.toObject(), {\n        \"name\": \"Arcane Hand (Purple)\",\n        \"prototypeToken.texture.src\": `modules/${jb2aMod}/Library/5th_Level/Arcane_Hand/ArcaneHand_Human_01_Idle_Purple_400x400.webm`,\n        \"img\": `modules/${jb2aMod}/Library/5th_Level/Arcane_Hand/ArcaneHand_Human_01_Idle_Purple_Thumb.webp`,\n      }),\n    };\n    results[\"ArcaneHandGreen\"] = {\n      name: \"Arcane Hand (Green)\",\n      version: \"1\",\n      required: null,\n      isJB2A: true,\n      needsJB2A: true,\n      folderName: \"Arcane Hand\",\n      data: foundry.utils.mergeObject(arcaneHand.toObject(), {\n        \"name\": \"Arcane Hand (Green)\",\n        \"prototypeToken.texture.src\": `modules/${jb2aMod}/Library/5th_Level/Arcane_Hand/ArcaneHand_Human_01_Idle_Green_400x400.webm`,\n        \"img\": `modules/${jb2aMod}/Library/5th_Level/Arcane_Hand/ArcaneHand_Human_01_Idle_Green_Thumb.webp`,\n      }),\n    };\n    results[\"ArcaneHandBlue\"] = {\n      name: \"Arcane Hand (Blue)\",\n      version: \"1\",\n      required: null,\n      isJB2A: true,\n      needsJB2A: true,\n      folderName: \"Arcane Hand\",\n      data: foundry.utils.mergeObject(arcaneHand.toObject(), {\n        \"name\": \"Arcane Hand (Blue)\",\n        \"prototypeToken.texture.src\": `modules/${jb2aMod}/Library/5th_Level/Arcane_Hand/ArcaneHand_Human_01_Idle_Blue_400x400.webm`,\n        \"img\": `modules/${jb2aMod}/Library/5th_Level/Arcane_Hand/ArcaneHand_Human_01_Idle_Blue_Thumb.webp`,\n      }),\n    };\n    results[\"ArcaneHandRock\"] = {\n      name: \"Arcane Hand (Rock)\",\n      version: \"1\",\n      required: null,\n      isJB2A: true,\n      needsJB2A: true,\n      needsJB2APatreon: true,\n      folderName: \"Arcane Hand\",\n      data: foundry.utils.mergeObject(arcaneHand.toObject(), {\n        \"name\": \"Arcane Hand (Rock)\",\n        \"prototypeToken.texture.src\": `modules/${jb2aMod}/Library/5th_Level/Arcane_Hand/ArcaneHand_Human_01_Idle_Rock01_400x400.webm`,\n        \"img\": `modules/${jb2aMod}/Library/5th_Level/Arcane_Hand/ArcaneHand_Human_01_Idle_Rock01_Thumb.webp`,\n      }),\n    };\n    results[\"ArcaneHandRainbow\"] = {\n      name: \"Arcane Hand (Rainbow)\",\n      version: \"1\",\n      required: null,\n      isJB2A: true,\n      needsJB2A: true,\n      needsJB2APatreon: true,\n      folderName: \"Arcane Hand\",\n      data: foundry.utils.mergeObject(arcaneHand.toObject(), {\n        \"name\": \"Arcane Hand (Rainbow)\",\n        \"prototypeToken.texture.src\": `modules/${jb2aMod}/Library/5th_Level/Arcane_Hand/ArcaneHand_Human_01_Idle_Rainbow_400x400.webm`,\n        \"img\": `modules/${jb2aMod}/Library/5th_Level/Arcane_Hand/ArcaneHand_Human_01_Idle_Rainbow_Thumb.webp`,\n      }),\n    };\n  }\n\n  const arcaneSword = await pack.getDocument(\"Tac7eq0AXJco0nml\");\n  if (arcaneHand) {\n    results[\"ArcaneSwordSpectralGreen\"] = {\n      name: \"Arcane Sword (Spectral Green)\",\n      version: \"1\",\n      required: null,\n      isJB2A: true,\n      needsJB2A: false,\n      folderName: \"Arcane Sword\",\n      data: foundry.utils.mergeObject(arcaneSword.toObject(), {\n        \"name\": \"Arcane Sword (Spectral Green)\",\n        \"prototypeToken.texture.src\": \"modules/ddb-importer/img/jb2a/SpiritualWeapon_Shortsword01_02_Spectral_Green_400x400.webm\",\n        \"img\": \"modules/ddb-importer/img/jb2a/SpiritualWeapon_Shortsword01_02_Spectral_Green_Thumb.webp\",\n      }),\n    };\n\n    results[\"ArcaneSwordAstralBlue\"] = {\n      name: \"Arcane Sword (Astral Blue)\",\n      version: \"1\",\n      required: null,\n      isJB2A: true,\n      needsJB2A: true,\n      needsJB2APatreon: true,\n      folderName: \"Arcane Sword\",\n      data: foundry.utils.mergeObject(arcaneSword.toObject(), {\n        \"name\": \"Arcane Sword (Astral Blue)\",\n        \"prototypeToken.texture.src\": `modules/${jb2aMod}/Library/2nd_Level/Spiritual_Weapon/SpiritualWeapon_Shortsword01_01_Astral_Blue_400x400.webm`,\n        \"img\": `modules/${jb2aMod}/Library/2nd_Level/Spiritual_Weapon/SpiritualWeapon_Shortsword01_01_Astral_Blue_Thumb.webp`,\n      }),\n    };\n  }\n\n  return results;\n}\n\nasync function getSummonActors() {\n  const jb2aMod = game.modules.get('jb2a_patreon')?.active\n    ? \"jb2a_patreon\"\n    : \"JB2A_DnD5e\";\n\n  const dancingLightsBase = foundry.utils.mergeObject(foundry.utils.deepClone(SUMMONS_ACTOR_STUB), foundry.utils.deepClone(DANCING_LIGHTS_BASE));\n  const localActors = {\n    ArcaneEye: {\n      name: \"Arcane Eye\",\n      version: \"1\",\n      required: null,\n      isJB2A: true,\n      needsJB2A: false,\n      folderName: \"Arcane Eye\",\n      data: foundry.utils.mergeObject(foundry.utils.deepClone(SUMMONS_ACTOR_STUB), {\n        \"name\": \"Arcane Eye\",\n        \"prototypeToken.name\": \"Arcane Eye\",\n        \"prototypeToken.texture.src\": \"modules/ddb-importer/img/jb2a/Marker_01_Regular_BlueYellow_400x400.webm\",\n        \"img\": \"modules/ddb-importer/img/jb2a/Marker_01_Regular_BlueYellow_Thumb.webp\",\n        \"system\": {\n          \"attributes\": {\n            \"movement\": {\n              \"fly\": 30,\n            },\n          },\n        },\n        \"effects\": [\n          (await ActiveEffect.implementation.fromStatusEffect(\"invisible\")).toObject(),\n        ],\n      }),\n    },\n    DancingLightsYellow: {\n      name: \"Dancing Lights (Yellow)\",\n      version: \"1\",\n      required: null,\n      isJB2A: true,\n      needsJB2A: false,\n      folderName: \"Dancing Lights\",\n      data: foundry.utils.mergeObject(foundry.utils.deepClone(dancingLightsBase), {\n        \"name\": \"Dancing Lights (Yellow)\",\n        \"prototypeToken.texture.src\": \"modules/ddb-importer/img/jb2a/DancingLights_01_Yellow_200x200.webm\",\n        \"prototypeToken.light\": {\n          \"color\": \"#ffed7a\",\n          \"alpha\": 0.25,\n        },\n        \"img\": \"modules/ddb-importer/img/jb2a/DancingLights_01_Yellow_Thumb.webp\",\n      }),\n    },\n    DancingLightsGreen: {\n      name: \"Dancing Lights (Green)\",\n      version: \"1\",\n      required: null,\n      isJB2A: true,\n      needsJB2A: true,\n      folderName: \"Dancing Lights\",\n      data: foundry.utils.mergeObject(foundry.utils.deepClone(dancingLightsBase), {\n        \"name\": \"Dancing Lights (Green)\",\n        \"prototypeToken.texture.src\": `modules/${jb2aMod}/Library/Cantrip/Dancing_Lights/DancingLights_01_Green_200x200.webm`,\n        \"prototypeToken.light\": {\n          \"color\": \"#a7ff7a\",\n          \"alpha\": 0.25,\n        },\n        \"img\": `modules/${jb2aMod}/Library/Cantrip/Dancing_Lights/DancingLights_01_Green_Thumb.webp`,\n      }),\n    },\n    DancingLightsBlueTeal: {\n      name: \"Dancing Lights (Blue Teal)\",\n      version: \"1\",\n      required: null,\n      isJB2A: true,\n      needsJB2A: true,\n      folderName: \"Dancing Lights\",\n      data: foundry.utils.mergeObject(foundry.utils.deepClone(dancingLightsBase), {\n        \"name\": \"Dancing Lights (Blue Teal)\",\n        \"prototypeToken.texture.src\": `modules/${jb2aMod}/Library/Cantrip/Dancing_Lights/DancingLights_01_BlueTeal_200x200.webm`,\n        \"prototypeToken.light\": {\n          \"color\": \"#80ffff\",\n          \"alpha\": 0.25,\n        },\n        \"img\": `modules/${jb2aMod}/Library/Cantrip/Dancing_Lights/DancingLights_01_BlueTeal_Thumb.webp`,\n      }),\n    },\n    DancingLightsBlueYellow: {\n      name: \"Dancing Lights (Blue Yellow)\",\n      version: \"1\",\n      required: null,\n      isJB2A: true,\n      needsJB2A: true,\n      folderName: \"Dancing Lights\",\n      data: foundry.utils.mergeObject(foundry.utils.deepClone(dancingLightsBase), {\n        \"name\": \"Dancing Lights (Blue Yellow)\",\n        \"prototypeToken.texture.src\": `modules/${jb2aMod}/Library/Cantrip/Dancing_Lights/DancingLights_01_BlueYellow_200x200.webm`,\n        \"prototypeToken.light\": {\n          \"color\": \"#c1e6e6\",\n          \"alpha\": 0.25,\n        },\n        \"img\": `modules/${jb2aMod}/Library/Cantrip/Dancing_Lights/DancingLights_01_BlueYellow_Thumb.webp`,\n      }),\n    },\n    DancingLightsPink: {\n      name: \"Dancing Lights (Pink)\",\n      version: \"1\",\n      required: null,\n      isJB2A: true,\n      needsJB2A: true,\n      folderName: \"Dancing Lights\",\n      data: foundry.utils.mergeObject(foundry.utils.deepClone(dancingLightsBase), {\n        \"name\": \"Dancing Lights (Pink)\",\n        \"prototypeToken.texture.src\": `modules/${jb2aMod}/Library/Cantrip/Dancing_Lights/DancingLights_01_Pink_200x200.webm`,\n        \"prototypeToken.light\": {\n          \"color\": \"#f080ff\",\n          \"alpha\": 0.25,\n        },\n        \"img\": `modules/${jb2aMod}/Library/Cantrip/Dancing_Lights/DancingLights_01_Pink_Thumb.webp`,\n      }),\n    },\n    DancingLightsPurpleGreen: {\n      name: \"Dancing Lights (Purple Green)\",\n      version: \"1\",\n      required: null,\n      isJB2A: true,\n      needsJB2A: true,\n      folderName: \"Dancing Lights\",\n      data: foundry.utils.mergeObject(foundry.utils.deepClone(dancingLightsBase), {\n        \"name\": \"Dancing Lights (Purple Green)\",\n        \"prototypeToken.texture.src\": `modules/${jb2aMod}/Library/Cantrip/Dancing_Lights/DancingLights_01_PurpleGreen_200x200.webm`,\n        \"prototypeToken.light\": {\n          \"color\": \"#a66bff\",\n          \"alpha\": 0.25,\n        },\n        \"img\": `modules/${jb2aMod}/Library/Cantrip/Dancing_Lights/DancingLights_01_PurpleGreen_Thumb.webp`,\n      }),\n    },\n    DancingLightsRed: {\n      name: \"Dancing Lights (Red)\",\n      version: \"1\",\n      required: null,\n      isJB2A: true,\n      needsJB2A: true,\n      folderName: \"Dancing Lights\",\n      data: foundry.utils.mergeObject(foundry.utils.deepClone(dancingLightsBase), {\n        \"name\": \"Dancing Lights (Red)\",\n        \"prototypeToken.texture.src\": `modules/${jb2aMod}/Library/Cantrip/Dancing_Lights/DancingLights_01_Red_200x200.webm`,\n        \"prototypeToken.light\": {\n          \"color\": \"#ff817a\",\n          \"alpha\": 0.25,\n        },\n        \"img\": `modules/${jb2aMod}/Library/Cantrip/Dancing_Lights/DancingLights_01_Red_Thumb.webp`,\n      }),\n    },\n    MageHandRed: {\n      name: \"Mage Hand (Red)\",\n      version: \"1\",\n      required: null,\n      isJB2A: true,\n      needsJB2A: false,\n      folderName: \"Mage Hand\",\n      data: foundry.utils.mergeObject(foundry.utils.deepClone(SUMMONS_ACTOR_STUB), {\n        \"name\": \"Mage Hand (Red)\",\n        \"prototypeToken.name\": \"Mage Hand\",\n        \"prototypeToken.texture.src\": \"modules/ddb-importer/img/jb2a/ArcaneHand_Human_01_Idle_Red_400x400.webm\",\n        \"img\": \"modules/ddb-importer/img/jb2a/ArcaneHand_Human_01_Idle_Red_Thumb.webp\",\n        \"system\": {\n          \"attributes\": {\n            \"movement\": {\n              \"fly\": 30,\n            },\n          },\n        },\n      }),\n    },\n    MageHandPurple: {\n      name: \"Mage Hand (Purple)\",\n      version: \"1\",\n      required: null,\n      isJB2A: true,\n      needsJB2A: true,\n      folderName: \"Mage Hand\",\n      data: foundry.utils.mergeObject(foundry.utils.deepClone(SUMMONS_ACTOR_STUB), {\n        \"name\": \"Mage Hand (Purple)\",\n        \"prototypeToken.name\": \"Mage Hand\",\n        \"prototypeToken.texture.src\": `modules/${jb2aMod}/Library/5th_Level/Arcane_Hand/ArcaneHand_Human_01_Idle_Purple_400x400.webm`,\n        \"img\": `modules/${jb2aMod}/Library/5th_Level/Arcane_Hand/ArcaneHand_Human_01_Idle_Purple_Thumb.webp`,\n        \"system\": {\n          \"attributes\": {\n            \"movement\": {\n              \"fly\": 30,\n            },\n          },\n        },\n      }),\n    },\n    MageHandGreen: {\n      name: \"Mage Hand (Green)\",\n      version: \"1\",\n      required: null,\n      isJB2A: true,\n      needsJB2A: true,\n      folderName: \"Mage Hand\",\n      data: foundry.utils.mergeObject(foundry.utils.deepClone(SUMMONS_ACTOR_STUB), {\n        \"name\": \"Mage Hand (Green)\",\n        \"prototypeToken.name\": \"Mage Hand\",\n        \"prototypeToken.texture.src\": `modules/${jb2aMod}/Library/5th_Level/Arcane_Hand/ArcaneHand_Human_01_Idle_Green_400x400.webm`,\n        \"img\": `modules/${jb2aMod}/Library/5th_Level/Arcane_Hand/ArcaneHand_Human_01_Idle_Green_Thumb.webp`,\n        \"system\": {\n          \"attributes\": {\n            \"movement\": {\n              \"fly\": 30,\n            },\n          },\n        },\n      }),\n    },\n    MageHandBlue: {\n      name: \"Mage Hand (Blue)\",\n      version: \"1\",\n      required: null,\n      isJB2A: true,\n      needsJB2A: true,\n      folderName: \"Mage Hand\",\n      data: foundry.utils.mergeObject(foundry.utils.deepClone(SUMMONS_ACTOR_STUB), {\n        \"name\": \"Mage Hand (Blue)\",\n        \"prototypeToken.name\": \"Mage Hand\",\n        \"prototypeToken.texture.src\": `modules/${jb2aMod}/Library/5th_Level/Arcane_Hand/ArcaneHand_Human_01_Idle_Blue_400x400.webm`,\n        \"img\": `modules/${jb2aMod}/Library/5th_Level/Arcane_Hand/ArcaneHand_Human_01_Idle_Blue_Thumb.webp`,\n        \"system\": {\n          \"attributes\": {\n            \"movement\": {\n              \"fly\": 30,\n            },\n          },\n        },\n      }),\n    },\n    MageHandRock: {\n      name: \"Mage Hand (Rock)\",\n      version: \"1\",\n      required: null,\n      isJB2A: true,\n      needsJB2A: true,\n      needsJB2APatreon: true,\n      folderName: \"Mage Hand\",\n      data: foundry.utils.mergeObject(foundry.utils.deepClone(SUMMONS_ACTOR_STUB), {\n        \"name\": \"Mage Hand (Rock)\",\n        \"prototypeToken.name\": \"Mage Hand\",\n        \"prototypeToken.texture.src\": `modules/${jb2aMod}/Library/5th_Level/Arcane_Hand/ArcaneHand_Human_01_Idle_Rock01_400x400.webm`,\n        \"img\": `modules/${jb2aMod}/Library/5th_Level/Arcane_Hand/ArcaneHand_Human_01_Idle_Rock01_Thumb.webp`,\n        \"system\": {\n          \"attributes\": {\n            \"movement\": {\n              \"fly\": 30,\n            },\n          },\n        },\n      }),\n    },\n    MageHandRainbow: {\n      name: \"Mage Hand (Rainbow)\",\n      version: \"1\",\n      required: null,\n      isJB2A: true,\n      needsJB2A: true,\n      needsJB2APatreon: true,\n      folderName: \"Mage Hand\",\n      data: foundry.utils.mergeObject(foundry.utils.deepClone(SUMMONS_ACTOR_STUB), {\n        \"name\": \"Mage Hand (Rainbow)\",\n        \"prototypeToken.name\": \"Mage Hand\",\n        \"prototypeToken.texture.src\": `modules/${jb2aMod}/Library/5th_Level/Arcane_Hand/ArcaneHand_Human_01_Idle_Rainbow_400x400.webm`,\n        \"img\": `modules/${jb2aMod}/Library/5th_Level/Arcane_Hand/ArcaneHand_Human_01_Idle_Rainbow_Thumb.webp`,\n        \"system\": {\n          \"attributes\": {\n            \"movement\": {\n              \"fly\": 30,\n            },\n          },\n        },\n      }),\n    },\n  };\n\n  const srdActors = await getSRDActors();\n  return foundry.utils.mergeObject(srdActors, localActors);\n}\n\nconst JB2A_LICENSE = `<p>The assets in this actor are kindly provided by JB2A and are licensed by <a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0\">Attribution-NonCommercial-ShareAlike 4.0 International</a>.</p>\n<p>Check them out at <a href=\"https://jb2a.com\">https://jb2a.com</a> they have a free and patreon supported Foundry module providing wonderful animations and assets for a variety of situations.</p>\n<p>You can learn more about their Foundry modules <a href=\"https://jb2a.com/home/install-instructions/\">here</a>.</p>`;\n\n\nexport default class DDBSummonsManager {\n\n  constructor() {\n    this.indexFilter = { fields: [\n      \"name\",\n      \"flags.ddbimporter.compendiumId\",\n      \"flags.ddbimporter.id\",\n      \"flags.ddbimporter.summons\",\n    ] };\n    this.itemHandler = null;\n  }\n\n  async init() {\n    this.compendiumFolders = new DDBCompendiumFolders(\"summons\");\n    await this.compendiumFolders.loadCompendium(\"summons\");\n\n    this.itemHandler = new DDBItemImporter(\"summons\", [], {\n      indexFilter: this.indexFilter,\n    });\n    await this.itemHandler.init();\n  }\n\n  async addToCompendium(companion) {\n    const results = [];\n    if (!game.user.isGM) return results;\n    const compendiumCompanion = foundry.utils.deepClone(companion);\n    delete compendiumCompanion.folder;\n    const folderName = this.compendiumFolders.getSummonFolderName(compendiumCompanion);\n    const folder = await this.compendiumFolders.createSummonsFolder(folderName.name);\n    compendiumCompanion.folder = folder._id;\n    const npc = await addNPC(compendiumCompanion, \"summons\");\n    results.push(npc);\n    return results;\n  }\n\n  static async generateFixedSummons() {\n    if (!game.user.isGM) return;\n    const manager = new DDBSummonsManager();\n    await manager.init();\n    logger.debug(\"Generating Fixed summons\");\n\n    const generatedSummonedActors = await getSummonActors();\n    for (const [key, value] of Object.entries(generatedSummonedActors)) {\n      // check for JB2A modules\n      if (value.needsJB2A\n        && !game.modules.get('jb2a_patreon')?.active\n        && !game.modules.get('JB2A_DnD5e')?.active\n      ) continue;\n      if (value.needsJB2APatreon && !game.modules.get('jb2a_patreon')?.active) continue;\n      const existingSummons = manager.itemHandler.compendium.index.find((i) =>\n        i.flags?.ddbimporter?.summons?.summonsKey === key\n      );\n\n      if (existingSummons && existingSummons.flags.ddbimporter.summons.version >= value.version) continue;\n\n      // set summons data\n      const companion = foundry.utils.deepClone(value.data);\n      foundry.utils.setProperty(companion, \"flags.ddbimporter.summons\", {\n        summonsKey: key,\n        version: value.version,\n        folder: value.folderName,\n      });\n      companion._id = utils.namedIDStub(value.name, { prefix: \"ddbSum\" });\n\n      if (value.isJB2A) {\n        foundry.utils.setProperty(companion, \"system.details.biography\", {\n          value: JB2A_LICENSE,\n          public: JB2A_LICENSE,\n        });\n      }\n\n      logger.debug(`Creating ${key}`, companion);\n\n      await manager.addToCompendium(companion);\n    }\n  }\n\n\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport utils from \"../../lib/utils.js\";\nimport logger from \"../../logger.js\";\nimport SETTINGS from \"../../settings.js\";\nimport DDBBaseFeature from \"./DDBBaseFeature.js\";\n\n\nexport default class DDBAction extends DDBBaseFeature {\n\n  static LEVEL_SCALE_EXCLUSION = [\n    \"Fire Rune\",\n    \"Cloud Rune\",\n    \"Stone Rune\",\n    \"Frost Rune\",\n    \"Hill Rune\",\n    \"Storm Rune\",\n    \"Drake Companion: Summon\",\n    \"Drake Companion: Command\",\n    \"Drake Companion\",\n  ];\n\n  static LEVEL_SCALE_INFUSIONS = [\n    \"Unarmed Strike\",\n    \"Arms of the Astral Self (WIS)\",\n    \"Arms of the Astral Self (DEX)\",\n    \"Arms of the Astral Self (DEX/STR)\",\n    \"Body of the Astral Self\",\n    \"Starry Form: Archer\",\n    \"Sneak Attack\",\n  ];\n\n  _init() {\n    this.isAction = true;\n    logger.debug(`Generating Action ${this.ddbDefinition.name}`);\n  }\n\n  _prepare() {\n    if (this.ddbDefinition.infusionFlags) {\n      foundry.utils.setProperty(this.data, \"flags.infusions\", this.ddbDefinition.infusionFlags);\n    }\n\n    this._actionType = {\n      class: this.ddbData.character.actions.class\n        .filter((ddbAction) => DDBHelper.findClassByFeatureId(this.ddbData, ddbAction.componentId))\n        .find((ddbAction) => {\n          const name = DDBHelper.getName(this.ddbData, ddbAction, this.rawCharacter);\n          return name === this.data.name;\n        }),\n      race: this.ddbData.character.actions.race\n        .some((ddbAction) => {\n          const name = DDBHelper.getName(this.ddbData, ddbAction, this.rawCharacter);\n          return name === this.data.name;\n        }),\n      feat: this.ddbData.character.actions.feat\n        .some((ddbAction) => {\n          const name = DDBHelper.getName(this.ddbData, ddbAction, this.rawCharacter);\n          return name === this.data.name;\n        }),\n    };\n  }\n\n  displayAsAttack() {\n    const customDisplay = this.rawCharacter\n      ? DDBHelper.getCustomValueFromCharacter(this.ddbDefinition, this.rawCharacter, 16)\n      : DDBHelper.getCustomValue(this.ddbDefinition, this.ddbData, 16);\n    if (typeof customDisplay == \"boolean\") {\n      return customDisplay;\n    } else if (foundry.utils.hasProperty(this.ddbDefinition, \"displayAsAttack\")) {\n      return this.ddbDefinition.displayAsAttack;\n    } else {\n      return false;\n    }\n  }\n\n  build() {\n    try {\n      this._generateSystemType();\n      this._generateSystemSubType();\n      this._generateActivation();\n      this._generateDescription();\n      this._generateLimitedUse();\n      this._generateResourceConsumption();\n      this._generateRange();\n      this._generateAttackType();\n\n      if (this.data.system.damage.parts.length === 0) {\n        logger.debug(\"Running level scale parser\");\n        this._generateLevelScaleDice();\n      }\n\n      this._generateFlagHints();\n      this._generateResourceFlags();\n\n      this._addEffects();\n      this._addCustomValues();\n    } catch (err) {\n      logger.warn(\n        `Unable to Generate Action: ${this.name}, please log a bug report. Err: ${err.message}`,\n        \"extension\"\n      );\n      logger.error(\"Error\", err);\n    }\n  }\n\n  _generateSystemType(typeNudge = null) {\n    // if (this.documentType === \"weapon\") return;\n    if (this.ddbData.character.actions.class.some((a) =>\n      a.name === this.ddbDefinition.name\n      || (foundry.utils.hasProperty(a, \"definition.name\") && a.definition.name === this.ddbDefinition.name)\n    )) {\n      this.data.system.type.value = \"class\";\n    } else if (this.ddbData.character.actions.race.some((a) =>\n      a.name === this.ddbDefinition.name\n      || (foundry.utils.hasProperty(a, \"definition.name\") && a.definition.name === this.ddbDefinition.name)\n    )) {\n      this.data.system.type.value = \"race\";\n    } else if (this.ddbData.character.actions.feat.some((a) =>\n      a.name === this.ddbDefinition.name\n      || (foundry.utils.hasProperty(a, \"definition.name\") && a.definition.name === this.ddbDefinition.name)\n    )) {\n      this.data.system.type.value = \"feat\";\n    } else if (typeNudge) {\n      this.data.system.type.value = typeNudge;\n      foundry.utils.setProperty(this.data, \"flags.ddbimporter.type\", typeNudge);\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  _generateDamage() {\n    const damageType = this.ddbDefinition.damageTypeId\n      ? DICTIONARY.actions.damageType.find((type) => type.id === this.ddbDefinition.damageTypeId).name\n      : null;\n\n    // when the action type is not set to melee or ranged we don't apply the mod to damage\n    const meleeOrRangedAction = this.ddbDefinition.attackTypeRange || this.ddbDefinition.rangeId;\n    const modBonus = (this.ddbDefinition.statId || this.ddbDefinition.abilityModifierStatId) && !this.ddbDefinition.isOffhand && meleeOrRangedAction ? \" + @mod\" : \"\";\n    const die = this.ddbDefinition.dice ? this.ddbDefinition.dice : this.ddbDefinition.die ? this.ddbDefinition.die : undefined;\n    // const fixedBonus = die?.fixedValue ? ` + ${die.fixedValue}` : \"\";\n    const fixedBonus = die?.fixedValue\n      ? (this.ddbDefinition.snippet ?? this.ddbDefinition.description ?? \"\").includes(\"{{proficiency#signed}}\")\n        ? \" + @prof\"\n        : ` + ${die.fixedValue}`\n      : \"\";\n    const globalDamageHints = game.settings.get(SETTINGS.MODULE_ID, \"use-damage-hints\");\n    const scaleValueLink = DDBHelper.getScaleValueString(this.ddbData, this.ddbDefinition).value;\n    const excludedScale = DDBAction.LEVEL_SCALE_EXCLUSION.includes(this.data.name);\n    const useScaleValueLink = !excludedScale && scaleValueLink && scaleValueLink !== \"{{scalevalue-unknown}}\";\n\n    if (die || useScaleValueLink) {\n      const damageTag = (globalDamageHints && damageType) ? `[${damageType}]` : \"\";\n      if (useScaleValueLink) {\n        this.data.system.damage = {\n          parts: [[`${scaleValueLink}${damageTag}${modBonus}${fixedBonus}`, damageType]],\n          versatile: \"\",\n        };\n      } else if (die.diceString) {\n        const profBonus = CONFIG.DDB.levelProficiencyBonuses.find((b) => b.level === this.ddbData.character.classes.reduce((p, c) => p + c.level, 0))?.bonus;\n        const replaceProf = this.ddbDefinition.snippet?.includes(\"{{proficiency#signed}}\")\n          && Number.parseInt(die.fixedValue) === Number.parseInt(profBonus);\n        const diceString = replaceProf\n          ? die.diceString.replace(`+ ${profBonus}`, \"\")\n          : die.diceString;\n        const mods = replaceProf ? `${modBonus} + @prof` : modBonus;\n        const damageString = utils.parseDiceString(diceString, mods, damageTag).diceString;\n        this.data.system.damage = {\n          parts: [[damageString, damageType]],\n          versatile: \"\",\n        };\n      } else if (fixedBonus) {\n        this.data.system.damage = {\n          parts: [[fixedBonus + modBonus, damageType]],\n          versatile: \"\",\n        };\n      }\n    }\n  }\n\n  _generateSaveAttack() {\n    this.data.system.actionType = \"save\";\n    this._generateDamage();\n\n    const fixedDC = this.ddbDefinition.fixedSaveDc ? this.ddbDefinition.fixedSaveDc : null;\n    const scaling = fixedDC ? \"flat\" : (this.ddbDefinition.abilityModifierStatId) ? DICTIONARY.character.abilities.find((stat) => stat.id === this.ddbDefinition.abilityModifierStatId).value : \"spell\";\n\n    const saveAbility = (this.ddbDefinition.saveStatId)\n      ? DICTIONARY.character.abilities.find((stat) => stat.id === this.ddbDefinition.saveStatId).value\n      : \"\";\n\n    this.data.system.save = {\n      ability: saveAbility,\n      dc: fixedDC,\n      scaling: scaling,\n    };\n    if (this.ddbDefinition.abilityModifierStatId) {\n      this.data.system.ability = DICTIONARY.character.abilities.find((stat) => stat.id === this.ddbDefinition.abilityModifierStatId).value;\n    }\n  }\n\n  _generateMartialArtsDamage() {\n    const damageType = DICTIONARY.actions.damageType.find((type) => type.id === this.ddbDefinition.damageTypeId).name;\n    const globalDamageHints = game.settings.get(\"ddb-importer\", \"use-damage-hints\");\n\n    let damageBonus = DDBHelper.filterBaseModifiers(this.ddbData, \"damage\", { subType: \"unarmed-attacks\" }).reduce((prev, cur) => prev + cur.value, 0);\n    if (damageBonus === 0) {\n      damageBonus = \"\";\n    } else {\n      damageBonus = ` + ${damageBonus}`;\n    }\n    const actionDie = this.ddbDefinition.dice ? this.ddbDefinition.dice : this.ddbDefinition.die ? this.ddbDefinition.die : undefined;\n\n    // are we dealing with martial arts?\n    if (this.isMartialArtist()) {\n      const dies = this.ddbData.character.classes\n        .filter((klass) => this.isMartialArtist(klass))\n        .map((klass) => {\n          const feature = klass.classFeatures.find((feature) => feature.definition.name === \"Martial Arts\");\n          const levelScaleDie = feature?.levelScale?.dice ? feature.levelScale.dice : feature?.levelScale.die ? feature.levelScale.die : undefined;\n\n          if (levelScaleDie?.diceString) {\n\n            const scaleValueLink = DDBHelper.getScaleValueLink(this.ddbData, feature);\n            const scaleString = scaleValueLink && scaleValueLink !== \"{{scalevalue-unknown}}\"\n              ? scaleValueLink\n              : levelScaleDie.diceString;\n\n            if (actionDie?.diceValue > levelScaleDie.diceValue) {\n              return actionDie.diceString;\n            }\n            return scaleString;\n          } else if (actionDie !== null && actionDie !== undefined) {\n            // On some races bite is considered a martial art, damage\n            // is different and on the action itself\n            return actionDie.diceString;\n          } else {\n            return \"1\";\n          }\n        });\n      const die = dies.length > 0 ? dies[0] : \"\";\n      const damageTag = (globalDamageHints && damageType) ? `[${damageType}]` : \"\";\n      const damageString = die.includes(\"@\")\n        ? `${die}${damageTag}${damageBonus} + @mod`\n        : utils.parseDiceString(die, `${damageBonus} + @mod`, damageTag).diceString;\n\n      // set the weapon damage\n      this.data.system.damage = {\n        parts: [[damageString, damageType]],\n        versatile: \"\",\n      };\n    } else if (actionDie !== null && actionDie !== undefined) {\n      // The Lizardfolk jaws have a different base damage, its' detailed in\n      // dice so lets capture that for actions if it exists\n      const damageTag = (globalDamageHints && damageType) ? `[${damageType}]` : \"\";\n      const damageString = utils.parseDiceString(actionDie.diceString, `${damageBonus} + @mod`, damageTag).diceString;\n      this.data.system.damage = {\n        parts: [[damageString, damageType]],\n        versatile: \"\",\n      };\n    } else {\n      // default to basics\n      this.data.system.damage = {\n        parts: [[`1${damageBonus} + @mod`, damageType]],\n        versatile: \"\",\n      };\n    }\n  }\n\n  _calculateActionAttackAbilities() {\n    let defaultAbility = this.ddbDefinition.abilityModifierStatId\n      ? DICTIONARY.character.abilities.find(\n        (stat) => stat.id === this.ddbDefinition.abilityModifierStatId\n      ).value\n      : \"\";\n\n    if (this.ddbDefinition.abilityModifierStatId\n      && !([1, 2].includes(this.ddbDefinition.abilityModifierStatId) && this.ddbDefinition.isMartialArts)\n    ) {\n      this.data.system.ability = defaultAbility;\n    } else if (this.ddbDefinition.isMartialArts) {\n      this.data.system.ability\n        = this.ddbDefinition.isMartialArts && this.isMartialArtist()\n          ? this.rawCharacter.flags.ddbimporter.dndbeyond.effectAbilities.dex.value >= this.rawCharacter.flags.ddbimporter.dndbeyond.effectAbilities.str.value\n            ? \"dex\"\n            : \"str\"\n          : defaultAbility !== \"\" ? defaultAbility : \"str\";\n    } else {\n      this.data.system.ability = \"\";\n    }\n    if (this.ddbDefinition.isMartialArts) {\n      this._generateMartialArtsDamage();\n      this.data.system.attack.bonus = DDBHelper.filterBaseModifiers(this.ddbData, \"bonus\", { subType: \"unarmed-attacks\" }).reduce((prev, cur) => prev + cur.value, 0);\n    } else {\n      this._generateDamage();\n    }\n    return this.data;\n  }\n\n\n  _generateAttackType() {\n    // lets see if we have a save stat for things like Dragon born Breath Weapon\n    if (typeof this.ddbDefinition.saveStatId === \"number\") {\n      this._generateSaveAttack();\n    } else if (this.ddbDefinition.actionType === 1) {\n      if (this.ddbDefinition.attackTypeRange === 2) {\n        this.data.system.actionType = \"rwak\";\n      } else {\n        this.data.system.actionType = \"mwak\";\n      }\n      this._calculateActionAttackAbilities();\n    } else {\n      if (this.ddbDefinition.rangeId && this.ddbDefinition.rangeId === 1) {\n        this.data.system.actionType = \"mwak\";\n      } else if (this.ddbDefinition.rangeId && this.ddbDefinition.rangeId === 2) {\n        this.data.system.actionType = \"rwak\";\n      } else {\n        this.data.system.actionType = \"other\";\n      }\n      this._calculateActionAttackAbilities();\n    }\n  }\n\n  /**\n   * Some features have actions that use dice and mods that are defined on the character class feature\n   * this attempts to parse out the damage dice and any ability modifier.\n   * This relies on the parsing of templateStrings for the ability modifier detection.\n   */\n  _generateLevelScaleDice(useScale = true) {\n    if (useScale) return;\n    const excludedScale = DDBAction.LEVEL_SCALE_EXCLUSION.includes(this.ddbDefinition.name);\n    const parts = this.ddbData.character.classes\n      .filter((cls) => cls.classFeatures.some((feature) =>\n        feature.definition.id == this.ddbDefinition.componentId\n        && feature.definition.entityTypeId == this.ddbDefinition.componentTypeId\n        && feature.levelScale?.dice?.diceString\n      ))\n      .map((cls) => {\n        const feature = cls.classFeatures.find((feature) =>\n          feature.definition.id == this.ddbDefinition.componentId\n          && feature.definition.entityTypeId == this.ddbDefinition.componentTypeId\n        );\n        const parsedString = this.rawCharacter.flags.ddbimporter.dndbeyond.templateStrings.find((templateString) =>\n          templateString.id == this.ddbDefinition.id\n          && templateString.entityTypeId == this.ddbDefinition.entityTypeId\n        );\n        const die = feature.levelScale.dice ? feature.levelScale.dice : feature.levelScale.die ? feature.levelScale.die : undefined;\n        const scaleValueLink = DDBHelper.getScaleValueString(this.ddbData, this.ddbDefinition).value;\n        let part = useScale && !excludedScale && scaleValueLink && scaleValueLink !== \"{{scalevalue-unknown}}\"\n          ? scaleValueLink\n          : die.diceString;\n        if (parsedString) {\n          const modifier = parsedString.definitions.find((definition) => definition.type === \"modifier\");\n          if (modifier) {\n            this.data.system.ability = modifier.subType;\n            part = `${part} + @mod`;\n          }\n        }\n        return [part, \"\"];\n      });\n\n    if (parts.length > 0 && useScale) {\n      this.data.system.damage.parts = parts;\n    } else if (parts.length > 0 && !DDBAction.LEVEL_SCALE_INFUSIONS.includes(this.ddbDefinition.name)) {\n      const combinedParts = foundry.utils.hasProperty(this.data, \"data.damage.parts\") && this.data.system.damage.parts.length > 0\n        ? this.data.system.damage.parts.concat(parts)\n        : parts;\n      this.data.system.damage = {\n        parts: combinedParts,\n        versatile: \"\",\n      };\n    }\n  }\n\n  _generateWeaponType() {\n    if (this.documentType === \"weapon\") {\n      const entry = DICTIONARY.actions.attackTypes.find((type) => type.attackSubtype === this.ddbDefinition.attackSubtype);\n      const range = DICTIONARY.weapon.weaponRange.find((type) => type.attackType === this.ddbDefinition.attackTypeRange);\n      this.data.system.type.value = entry\n        ? entry.value\n        : range\n          ? `simple${range.value}`\n          : \"simpleM\";\n    }\n  }\n\n  _generateProperties() {\n\n    const kiEmpowered = this.ddbData.character.classes\n      // is a martial artist\n      .some((cls) =>\n        cls.classFeatures.some((feature) =>\n          feature.definition.name === \"Ki-Empowered Strikes\"\n          && cls.level >= feature.definition.requiredLevel\n        ));\n\n    if (kiEmpowered && foundry.utils.getProperty(this.data, \"flags.ddbimporter.originalName\") == \"Unarmed Strike\") {\n      utils.addToProperties(this.data.system.properties, \"mgc\");\n    }\n\n  }\n\n  _generateFlagHints() {\n    // obsidian and klass names (used in effect enrichment)\n    if (this._actionType.class) {\n      const klass = DDBHelper.findClassByFeatureId(this.ddbData, this._actionType.class.componentId);\n      foundry.utils.setProperty(this.data.flags, \"obsidian.source.type\", \"class\");\n      foundry.utils.setProperty(this.data.flags, \"ddbimporter.type\", \"class\");\n      foundry.utils.setProperty(this.data.flags, \"obsidian.source.text\", klass.definition.name);\n      foundry.utils.setProperty(this.data.flags, \"ddbimporter.class\", klass.definition.name);\n      foundry.utils.setProperty(this.data.flags, \"ddbimporter.classId\", klass.definition.id);\n      const subKlass = DDBHelper.findSubClassByFeatureId(this.ddbData, this._actionType.class.componentId);\n      const subClass = foundry.utils.getProperty(subKlass, \"subclassDefinition\");\n      foundry.utils.setProperty(this.data.flags, \"ddbimporter.subclass\", subClass?.name);\n      foundry.utils.setProperty(this.data.flags, \"ddbimporter.subclassId\", subClass?.id);\n    } else if (this._actionType.race) {\n      foundry.utils.setProperty(this.data.flags, \"obsidian.source.type\", \"race\");\n      foundry.utils.setProperty(this.data.flags, \"ddbimporter.type\", \"race\");\n    } else if (this._actionType.feat) {\n      foundry.utils.setProperty(this.data.flags, \"obsidian.source.type\", \"feat\");\n      foundry.utils.setProperty(this.data.flags, \"ddbimporter.type\", \"feat\");\n    }\n\n    // scaling details\n    const klassActionComponent = DDBHelper.findComponentByComponentId(this.ddbData, this.ddbDefinition.id)\n      ?? DDBHelper.findComponentByComponentId(this.ddbData, this.ddbDefinition.componentId);\n    if (klassActionComponent) {\n      foundry.utils.setProperty(this.data.flags, \"ddbimporter.dndbeyond.levelScale\", klassActionComponent.levelScale);\n      foundry.utils.setProperty(this.data.flags, \"ddbimporter.dndbeyond.levelScales\", klassActionComponent.definition?.levelScales);\n      foundry.utils.setProperty(this.data.flags, \"ddbimporter.dndbeyond.limitedUse\", klassActionComponent.definition?.limitedUse);\n    }\n  }\n\n}\n","import logger from \"../../logger.js\";\nimport DDBAction from \"./DDBAction.js\";\n\n\nexport default class DDBAttackAction extends DDBAction {\n\n  static FORCE_WEAPON_FEATURES = [\n    \"Unarmed Strike\",\n    \"Psychic Blades: Attack (DEX)\",\n    \"Psychic Blades: Attack (STR)\",\n    \"Psychic Blades: Bonus Attack (DEX)\",\n    \"Psychic Blades: Bonus Attack (STR)\",\n    \"Thunder Gauntlets\",\n    \"Lightning Launcher\",\n    \"Guardian Armor: Thunder Gauntlets\",\n    \"Guardian Armor: Thunder Gauntlets (STR)\",\n    \"Infiltrator Armor: Lightning Launcher\",\n    \"Infiltrator Armor: Lightning Launcher (DEX)\",\n    \"Arms of the Astral Self (WIS)\",\n    \"Arms of the Astral Self (DEX/STR)\",\n  ];\n\n  _init() {\n    this.isAction = true;\n    this.documentType = DDBAttackAction.FORCE_WEAPON_FEATURES.includes(this.ddbDefinition.name)\n      ? \"weapon\"\n      : \"feat\";\n    logger.debug(`Generating Attack Action ${this.ddbDefinition.name}`);\n  }\n\n  build() {\n    try {\n      if (this.ddbData.isMartialArts) {\n        foundry.utils.setProperty(this.data, \"flags.ddbimporter.dndbeyond.type\", \"Martial Arts\");\n      };\n      this.data.system.proficient = this.ddbDefinition.isProficient ? 1 : 0;\n      this._generateDescription();\n      this.data.system.equipped = true;\n      this.data.system.rarity = \"\";\n      this.data.system.identified = true;\n      this._generateActivation();\n      this._generateRange();\n      this._generateAttackType();\n      this._generateWeaponType();\n      this._generateLimitedUse();\n      this._generateResourceConsumption();\n      this._generateProperties();\n      this._generateSystemType(this.type);\n      this._generateSystemSubType();\n\n      if ([\"line\", \"cone\"].includes(this.data.system.target?.type)) {\n        foundry.utils.setProperty(this.data, \"system.duration.units\", \"inst\");\n      }\n\n      this._generateFlagHints();\n      this._generateResourceFlags();\n      this._addEffects();\n      this._generateLevelScaleDice();\n\n      this._addCustomValues();\n\n    } catch (err) {\n      logger.warn(\n        `Unable to Generate Attack Action: ${this.name}, please log a bug report. Err: ${err.message}`,\n        \"extension\"\n      );\n      logger.error(\"Error\", err);\n    }\n  }\n\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport utils from \"../../lib/utils.js\";\nimport logger from \"../../logger.js\";\nimport parseTemplateString from \"../../lib/DDBTemplateStrings.js\";\nimport { generateEffects } from \"../../effects/effects.js\";\nimport DDBSimpleMacro from \"../../effects/DDBSimpleMacro.js\";\n\n\nexport default class DDBBaseFeature {\n\n  _init() {\n    logger.debug(`Generating Base Feature ${this.ddbDefinition.name}`);\n  }\n\n  _generateDataStub() {\n    this.data = {\n      _id: foundry.utils.randomID(),\n      name: DDBHelper.getName(this.ddbData, this.ddbDefinition, this.rawCharacter),\n      type: this.documentType,\n      system: utils.getTemplate(this.documentType),\n      flags: {\n        ddbimporter: {\n          id: this.ddbDefinition.id,\n          entityTypeId: this.ddbDefinition.entityTypeId,\n          action: this.isAction,\n          componentId: this.ddbDefinition.componentId,\n          componentTypeId: this.ddbDefinition.componentTypeId,\n          originalName: this.originalName,\n          type: this.tagType,\n          isCustomAction: this.ddbDefinition.isCustomAction,\n        },\n        infusions: { infused: false },\n        obsidian: {\n          source: {\n            type: this.tagType,\n          },\n        }\n      },\n    };\n  }\n\n  _prepare() {\n    if (this.ddbDefinition.infusionFlags) {\n      foundry.utils.setProperty(this.data, \"flags.infusions\", this.ddbDefinition.infusionFlags);\n    }\n  }\n\n  constructor({ ddbData, ddbDefinition, type, source, documentType = \"feat\", rawCharacter = null, noMods = false } = {}) {\n    this.ddbData = ddbData;\n    this.rawCharacter = rawCharacter;\n    this.ddbFeature = ddbDefinition;\n    this.ddbDefinition = ddbDefinition.definition ?? ddbDefinition;\n    this.name = utils.nameString(this.ddbDefinition.name);\n    this.originalName = this.ddbData\n      ? DDBHelper.getName(this.ddbData, this.ddbDefinition, this.rawCharacter, false)\n      : this.ddbDefinition.name;\n    this.type = type;\n    this.source = source;\n    this.isAction = false;\n    this.documentType = documentType;\n    this.tagType = \"other\";\n    this.data = {};\n    this.noMods = noMods;\n    this._init();\n    this.snippet = \"\";\n    this.description = \"\";\n    this._resourceCharges = null;\n\n    // this._attacksAsFeatures = game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-use-actions-as-features\");\n\n    this._generateDataStub();\n\n    // Grim Hollow puts points in names. WHY\n    const namePointRegex = /(.*) \\((\\d) points?\\)/i;\n    const nameMatch = this.name.match(namePointRegex);\n    if (nameMatch) {\n      this.data.name = nameMatch[1];\n      this._resourceCharges = Number.parseInt(nameMatch[2]);\n    }\n\n    this._prepare();\n    this.data.system.source = this.source;\n  }\n\n\n  static _getParsedAction(description) {\n    // foundry doesn't support mythic actions pre 1.6\n    const actionAction = description.match(/(?:as|spend|use) (?:a|an|your) action/ig);\n    if (actionAction) return \"action\";\n    const bonusAction = description.match(/(?:as|use|spend) (?:a|an|your) bonus action/ig);\n    if (bonusAction) return \"bonus\";\n    const reAction = description.match(/(?:as|use|spend) (?:a|an|your) reaction/ig);\n    if (reAction) return \"reaction\";\n\n    return undefined;\n  }\n\n  _generateParsedActivation() {\n    const description = this.ddbDefinition.description && this.ddbDefinition.description !== \"\"\n      ? this.ddbDefinition.description\n      : this.ddbDefinition.snippet && this.ddbDefinition.snippet !== \"\"\n        ? this.ddbDefinition.snippet\n        : null;\n\n    // console.warn(`Generating Parsed Activation for ${this.name}`, {description});\n\n    if (!description) return;\n    const actionType = DDBBaseFeature._getParsedAction(description);\n    if (!actionType) return;\n    logger.debug(`Parsed manual activation type: ${actionType} for ${this.name}`);\n    this.data.system.activation = {\n      type: actionType,\n      cost: 1,\n      condition: \"\",\n    };\n  }\n\n  _generateActivation() {\n    // console.warn(`Generating Activation for ${this.name}`);\n    if (!this.ddbDefinition.activation) {\n      this._generateParsedActivation();\n      return;\n    }\n    const actionType = DICTIONARY.actions.activationTypes\n      .find((type) => type.id === this.ddbDefinition.activation.activationType);\n    if (!actionType) {\n      this._generateParsedActivation();\n      return;\n    }\n\n    this.data.system.activation = {\n      type: actionType.value,\n      cost: this.ddbDefinition.activation.activationTime || 1,\n      condition: \"\",\n    };\n  }\n\n  _getClassFeatureDescription() {\n    if (!this.ddbData) return \"\";\n    const componentId = this.ddbDefinition.componentId;\n    const componentTypeId = this.ddbDefinition.componentTypeId;\n\n    const findFeatureKlass = this.ddbData.character.classes\n      .find((cls) => cls.classFeatures.find((feature) =>\n        feature.definition.id == componentId\n        && feature.definition.entityTypeId == componentTypeId\n      ));\n\n    if (findFeatureKlass) {\n      const feature = findFeatureKlass.classFeatures\n        .find((feature) =>\n          feature.definition.id == componentId\n          && feature.definition.entityTypeId == componentTypeId\n        );\n      if (feature) {\n        return parseTemplateString(this.ddbData, this.rawCharacter, feature.definition.description, this.ddbFeature).text;\n      }\n    }\n    return \"\";\n  }\n\n\n  _getRaceFeatureDescription() {\n    const componentId = this.ddbDefinition.componentId;\n    const componentTypeId = this.ddbDefinition.componentTypeId;\n\n    const feature = this.ddbData.character.race.racialTraits\n      .find((trait) =>\n        trait.definition.id == componentId\n        && trait.definition.entityTypeId == componentTypeId\n      );\n\n    if (feature) {\n      return parseTemplateString(this.ddbData, this.rawCharacter, feature.definition.description, this.ddbFeature).text;\n    }\n    return \"\";\n\n  }\n\n  static buildFullDescription(main, summary, title) {\n    let result = \"\";\n\n    if (summary && !utils.stringKindaEqual(main, summary) && summary.trim() !== \"\" && main.trim() !== \"\") {\n      result += summary.trim();\n      result += `<br>\n  <details>\n    <summary>\n      ${title ? title : \"More Details\"}\n    </summary>\n    <p>\n      ${main.trim()}\n    </p>\n  </details>`;\n    } else if (main.trim() === \"\") {\n      result += summary.trim();\n    } else {\n      result += main.trim();\n    }\n\n    return result;\n  }\n\n  _generateDescription(forceFull = false) {\n    // for now none actions probably always want the full text\n    const useFullSetting = game.settings.get(\"ddb-importer\", \"character-update-policy-use-full-description\");\n    const useFull = forceFull || useFullSetting;\n    const chatAdd = game.settings.get(\"ddb-importer\", \"add-description-to-chat\");\n\n    this.snippet = this.ddbDefinition.snippet && this.ddbDefinition.snippet !== \"\"\n      ? parseTemplateString(this.ddbData, this.rawCharacter, this.ddbDefinition.snippet, this.ddbFeature).text\n      : \"\";\n    const rawSnippet = this.ddbDefinition.snippet\n      ? this.snippet\n      : \"\";\n\n    this.description = this.ddbDefinition.description && this.ddbDefinition.description !== \"\"\n      ? parseTemplateString(this.ddbData, this.rawCharacter, this.ddbDefinition.description, this.ddbFeature).text\n      : this.type === \"race\"\n        ? this._getRaceFeatureDescription()\n        : this._getClassFeatureDescription();\n\n    const macroHelper = DDBSimpleMacro.getDescriptionAddition(this.originalName, \"feat\");\n    if (!chatAdd) {\n      const snippet = utils.stringKindaEqual(this.description, rawSnippet) ? \"\" : rawSnippet;\n      const fullDescription = DDBBaseFeature.buildFullDescription(this.description, snippet);\n      const value = !useFull && snippet.trim() !== \"\" ? snippet : fullDescription;\n\n      this.data.system.description = {\n        value: value + macroHelper,\n        chat: chatAdd ? snippet + macroHelper : \"\",\n      };\n    } else {\n      const snippet = this.description !== \"\" && utils.stringKindaEqual(this.description, rawSnippet) ? \"\" : rawSnippet;\n\n      this.data.system.description = {\n        value: this.description,\n        chat: snippet + macroHelper,\n      };\n    }\n\n  }\n\n  // eslint-disable-next-line complexity\n  _generateLimitedUse() {\n    if (\n      this.ddbDefinition.limitedUse\n      && (this.ddbDefinition.limitedUse.maxUses || this.ddbDefinition.limitedUse.statModifierUsesId || this.ddbDefinition.limitedUse.useProficiencyBonus)\n    ) {\n      const resetType = DICTIONARY.resets.find((type) => type.id === this.ddbDefinition.limitedUse.resetType);\n      let maxUses = (this.ddbDefinition.limitedUse.maxUses && this.ddbDefinition.limitedUse.maxUses !== -1) ? this.ddbDefinition.limitedUse.maxUses : 0;\n      let intMaxUses = maxUses;\n      const statModifierUsesId = foundry.utils.getProperty(this.ddbDefinition, \"limitedUse.statModifierUsesId\");\n      if (statModifierUsesId) {\n        const ability = DICTIONARY.character.abilities.find((ability) => ability.id === statModifierUsesId).value;\n\n        if (maxUses === 0) {\n          maxUses = `@abilities.${ability}.mod`;\n          intMaxUses = this.rawCharacter.flags.ddbimporter.dndbeyond.effectAbilities[ability].mod;\n        } else {\n          switch (this.ddbDefinition.limitedUse.operator) {\n            case 2:\n              maxUses = `${maxUses} * @abilities.${ability}.mod`;\n              intMaxUses *= this.rawCharacter.flags.ddbimporter.dndbeyond.effectAbilities[ability].mod;\n              break;\n            case 1:\n            default:\n              maxUses = `${maxUses} + @abilities.${ability}.mod`;\n              intMaxUses += this.rawCharacter.flags.ddbimporter.dndbeyond.effectAbilities[ability].mod;\n          }\n        }\n      }\n\n      const useProficiencyBonus = foundry.utils.getProperty(this.ddbDefinition, \"limitedUse.useProficiencyBonus\");\n      if (useProficiencyBonus) {\n        if (maxUses === 0) {\n          maxUses = `@prof`;\n          intMaxUses = this.rawCharacter.flags.ddbimporter.dndbeyond.profBonus;\n        } else {\n          switch (this.ddbDefinition.limitedUse.proficiencyBonusOperator) {\n            case 2:\n              maxUses = `${maxUses} * @prof`;\n              intMaxUses *= this.rawCharacter.flags.ddbimporter.dndbeyond.profBonus;\n              break;\n            case 1:\n            default:\n              maxUses = `${maxUses} + @prof`;\n              intMaxUses += this.rawCharacter.flags.ddbimporter.dndbeyond.profBonus;\n          }\n        }\n      }\n\n      const finalMaxUses = (maxUses)\n        ? Number.isInteger(maxUses)\n          ? parseInt(maxUses)\n          : maxUses\n        : null;\n\n      intMaxUses = Number.isInteger(intMaxUses) ? parseInt(intMaxUses) : null;\n\n      this.data.system.uses = {\n        value: (intMaxUses !== null && intMaxUses != 0) ? intMaxUses - this.ddbDefinition.limitedUse.numberUsed : null,\n        max: (finalMaxUses != 0) ? finalMaxUses : null,\n        per: resetType ? resetType.value : \"\",\n      };\n    }\n  }\n\n  _generateResourceConsumption() {\n    if (!this.rawCharacter) return;\n\n    Object.keys(this.rawCharacter.system.resources).forEach((resource) => {\n      const detail = this.rawCharacter.system.resources[resource];\n      if (this.ddbDefinition.name === detail.label) {\n        this.data.system.consume = {\n          type: \"attribute\",\n          target: `resources.${resource}.value`,\n          amount: 1,\n        };\n      }\n    });\n\n    const kiPointRegex = /(?:spend|expend) (\\d) ki point/;\n    const match = this.data.system.description.value.match(kiPointRegex);\n    if (match) {\n      foundry.utils.setProperty(this.data, \"system.consume.amount\", match[1]);\n    } else if (this._resourceCharges !== null) {\n      foundry.utils.setProperty(this.data, \"system.consume.amount\", this._resourceCharges);\n    }\n\n  }\n\n  _generateRange() {\n    if (this.ddbDefinition.range && this.ddbDefinition.range.aoeType && this.ddbDefinition.range.aoeSize) {\n      this.data.system.range = { value: null, units: \"self\", long: \"\" };\n      this.data.system.target = {\n        value: this.ddbDefinition.range.aoeSize,\n        type: DICTIONARY.actions.aoeType.find((type) => type.id === this.ddbDefinition.range.aoeType)?.value,\n        units: \"ft\",\n      };\n    } else if (this.ddbDefinition.range && this.ddbDefinition.range.range) {\n      this.data.system.range = {\n        value: this.ddbDefinition.range.range,\n        units: \"ft\",\n        long: this.ddbDefinition.range.long || \"\",\n      };\n    } else {\n      this.data.system.range = { value: 5, units: \"ft\", long: \"\" };\n    }\n  }\n\n  isMartialArtist(klass = null) {\n    if (klass) {\n      return klass.classFeatures.some((feature) => feature.definition.name === \"Martial Arts\");\n    } else {\n      return this.ddbData.character.classes.some((k) => k.classFeatures.some((feature) => feature.definition.name === \"Martial Arts\"));\n    }\n\n  }\n\n  _generateResourceFlags() {\n    const linkItems = game.modules.get(\"link-item-resource-5e\")?.active;\n    const resourceType = foundry.utils.getProperty(this.rawCharacter, \"flags.ddbimporter.resources.type\");\n    if (resourceType !== \"disable\" && linkItems) {\n      const hasResourceLink = foundry.utils.getProperty(this.data.flags, \"link-item-resource-5e.resource-link\");\n      Object.keys(this.rawCharacter.system.resources).forEach((resource) => {\n        const detail = this.rawCharacter.system.resources[resource];\n        if (this.ddbDefinition.name === detail.label) {\n          foundry.utils.setProperty(this.data.flags, \"link-item-resource-5e.resource-link\", resource);\n          this.rawCharacter.system.resources[resource] = { value: 0, max: 0, sr: false, lr: false, label: \"\" };\n        } else if (hasResourceLink === resource) {\n          foundry.utils.setProperty(this.data.flags, \"link-item-resource-5e.resource-link\", undefined);\n        }\n      });\n    }\n  }\n\n  _getFeatModifierItem(choice, type) {\n    if (this.ddbDefinition.grantedModifiers) return this.ddbDefinition;\n    let modifierItem = foundry.utils.duplicate(this.ddbDefinition);\n    const modifiers = [\n      DDBHelper.getChosenClassModifiers(this.ddbData, { includeExcludedEffects: true, effectOnly: true }),\n      DDBHelper.getModifiers(this.ddbData, \"race\", true, true),\n      DDBHelper.getModifiers(this.ddbData, \"background\", true, true),\n      DDBHelper.getModifiers(this.ddbData, \"feat\", true, true),\n    ].flat();\n\n    if (!modifierItem.definition) modifierItem.definition = {};\n    modifierItem.definition.grantedModifiers = modifiers.filter((mod) => {\n      if (mod.componentId === this.ddbDefinition?.id && mod.componentTypeId === this.ddbDefinition?.entityTypeId)\n        return true;\n      if (choice && this.ddbData.character.options[type]?.length > 0) {\n        // if it is a choice option, try and see if the mod matches\n        const choiceMatch = this.ddbData.character.options[type].some(\n          (option) =>\n            // id match\n            choice.componentId == option.componentId // the choice id matches the option componentID\n            && option.definition.id == mod.componentId // option id and mod id match\n            && (choice.componentTypeId == option.componentTypeId // either the choice componenttype and optiontype match or\n              || choice.componentTypeId == option.definition.entityTypeId) // the choice componentID matches the option definition entitytypeid\n            && option.definition.entityTypeId == mod.componentTypeId // mod componentId matches option entity type id\n            && choice.id == mod.componentId // choice id and mod id match\n        );\n        // console.log(`choiceMatch ${choiceMatch}`);\n        if (choiceMatch) return true;\n      } else if (choice) {\n        // && choice.parentChoiceId\n        const choiceIdSplit = choice.choiceId.split(\"-\").pop();\n        if (mod.id == choiceIdSplit) return true;\n      }\n\n      if (mod.componentId === this.ddbDefinition.id) {\n        if (type === \"class\") {\n          // logger.log(\"Class check - feature effect parsing\");\n          const classFeatureMatch = this.ddbData.character.classes.some((klass) =>\n            klass.classFeatures.some(\n              (f) => f.definition.entityTypeId == mod.componentTypeId && f.definition.id == this.ddbDefinition.id\n            )\n          );\n          if (classFeatureMatch) return true;\n        } else if (type === \"feat\") {\n          const featMatch = this.ddbData.character.feats.some(\n            (f) => f.definition.entityTypeId == mod.componentTypeId && f.definition.id == this.ddbDefinition.id\n          );\n          if (featMatch) return true;\n        } else if (type === \"race\") {\n          const traitMatch = this.ddbData.character.race.racialTraits.some(\n            (t) =>\n              t.definition.entityTypeId == mod.componentTypeId\n              && t.definition.id == mod.componentId\n              && t.definition.id == this.ddbDefinition.id\n          );\n          if (traitMatch) return true;\n        }\n      }\n      return false;\n    });\n    // console.warn(\"Modifier Item\", modifierItem);\n    return modifierItem;\n  }\n\n  _addEffects(choice, type) {\n    // can we apply any auto-generated effects to this feature\n    const compendiumItem = this.rawCharacter.flags.ddbimporter.compendium;\n    const modifierItem = this._getFeatModifierItem(choice, type);\n    this.data = generateEffects({\n      ddb: this.ddbData,\n      character: this.rawCharacter,\n      ddbItem: modifierItem,\n      foundryItem: this.data,\n      isCompendiumItem: compendiumItem,\n      type: \"feat\",\n      description: this.snippet !== \"\" ? this.snippet : this.description,\n    });\n  }\n\n\n  _addCustomValues() {\n    DDBHelper.addCustomValues(this.ddbData, this.data);\n  }\n\n  _generateSystemSubType() {\n    if (this.type === \"class\") {\n      let subType = null;\n      if (this.data.name.startsWith(\"Ki:\")) subType = \"Ki\";\n      // many ki abilities do not start with ki\n      else if (this.data.name.startsWith(\"Channel Divinity:\")) subType = \"channelDivinity\";\n      else if (this.data.name.startsWith(\"Artificer Infusion:\")) subType = \"artificerInfusion\";\n      else if (this.data.name.startsWith(\"Invocation:\")) subType = \"eldritchInvocation\";\n      else if (this.data.name.startsWith(\"Fighting Style:\")) subType = \"fightingStyle\";\n      else if (this.data.name.startsWith(\"Battle Master Maneuver:\")) subType = \"maneuver\";\n      else if (this.data.name.startsWith(\"Metamagic:\")) subType = \"metamagic\";\n      else if (this.data.name.startsWith(\"Pact of the\")) subType = \"pact\";\n      else if (this.data.name.startsWith(\"Rune Carver:\")) subType = \"rune\";\n      else if (this.data.name.startsWith(\"Psionic Power:\")) subType = \"psionicPower\";\n      else if (this.data.name.startsWith(\"Hunter's Prey:\")) subType = \"huntersPrey\";\n      else if (this.data.name.startsWith(\"Defensive Tactics:\")) subType = \"defensiveTactic\";\n      else if (this.data.name.startsWith(\"Superior Hunter's Defense:\")) subType = \"superiorHuntersDefense\";\n      else if (this.data.name.startsWith(\"Arcane Shot Options:\")) subType = \"arcaneShot\";\n      else if (this.data.name.startsWith(\"Elemental Disciplines:\")) subType = \"elementalDiscipline\";\n      // missing: Arcane Shot : arcaneShot\n      // missing: multiattack\n\n      if (subType) foundry.utils.setProperty(this.data, \"system.type.subtype\", subType);\n    }\n  }\n\n  _generateSystemType() {\n    foundry.utils.setProperty(this.data, \"system.type.value\", this.type);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  build() {\n    // override this feature\n    return false;\n  }\n\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport CompendiumHelper from \"../../lib/CompendiumHelper.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport utils from \"../../lib/utils.js\";\nimport logger from \"../../logger.js\";\nimport AdvancementHelper from \"../advancements/AdvancementHelper.js\";\nimport DDBAttackAction from \"./DDBAttackAction.js\";\nimport DDBBaseFeature from \"./DDBBaseFeature.js\";\n\n\nexport default class DDBFeature extends DDBBaseFeature {\n\n  static FORCE_UNARMED = [\n    \"Trunk\",\n    \"Claws\",\n  ];\n\n  static DOC_TYPE = {\n    class: \"feat\", // class feature\n    subclass: \"feat\", // subclass feature\n    race: \"feat\",\n    background: \"background\",\n    feat: \"feat\",\n  };\n\n  _init() {\n    this.documentType = DDBFeature.DOC_TYPE[this.type];\n    this.tagType = this.type;\n    logger.debug(`Generating Feature ${this.ddbDefinition.name}`);\n    this._class = this.noMods\n      ? null\n      : this.ddbData.character.classes.find((klass) =>\n        (this.ddbDefinition.classId\n          && (klass.definition.id === this.ddbDefinition.classId || klass.subclassDefinition?.id === this.ddbDefinition.classId))\n        || (this.ddbDefinition.className && klass.definition.name === this.ddbDefinition.className\n          && ((!this.ddbDefinition.subclassName || this.ddbDefinition.subclassName === \"\")\n            || (this.ddbDefinition.subclassName && klass.subclassDefinition?.name === this.ddbDefinition.subclassName))\n        )\n      );\n    this._choices = this.noMods ? [] : DDBHelper.getChoices(this.ddbData, this.type, this.ddbDefinition);\n    this.isChoiceFeature = this._choices.length > 0;\n    this.include = !this.isChoiceFeature;\n    this.hasRequiredLevel = !this._class || (this._class && this._class.level >= this.ddbDefinition.requiredLevel);\n\n    this.advancementHelper = new AdvancementHelper({\n      ddbData: this.ddbData,\n      type: this.type,\n      noMods: this.noMods,\n    });\n  }\n\n  _generateDataStub() {\n    this.data = {\n      _id: foundry.utils.randomID(),\n      name: utils.nameString(this.ddbDefinition.name),\n      type: this.documentType,\n      system: utils.getTemplate(this.documentType),\n      flags: {\n        ddbimporter: {\n          id: this.ddbDefinition.id,\n          type: this.tagType,\n          entityTypeId: this.ddbDefinition.entityTypeId,\n          dndbeyond: {\n            requiredLevel: this.ddbDefinition.requiredLevel,\n            displayOrder: this.ddbDefinition.displayOrder,\n            featureType: this.ddbDefinition.featureType,\n            classId: this.ddbDefinition.classId,\n            entityId: this.ddbDefinition.entityId,\n            entityRaceId: this.ddbDefinition.entityRaceId,\n            entityType: this.ddbDefinition.entityType,\n          },\n        },\n        obsidian: {\n          source: {\n            type: this.tagType,\n          },\n        },\n      }\n    };\n\n    const requiredLevel = foundry.utils.getProperty(this.ddbDefinition, \"requiredLevel\");\n    if (Number.isInteger(Number.parseInt(requiredLevel))) {\n      this.data.system.prerequisites = {\n        level: Number.parseInt(requiredLevel),\n      };\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  _prepare() {\n    // override this feature\n  }\n\n  _buildUnarmed() {\n    const override = {\n      name: this.data.name,\n      description: this.ddbDefinition.description,\n      snippet: this.ddbDefinition.snippet,\n      id: this.ddbDefinition.id,\n      entityTypeId: this.ddbDefinition.entityTypeId,\n      componentId: this.ddbDefinition.componentId,\n      componentTypeId: this.ddbDefinition.componentTypeId,\n    };\n\n    const unarmedStrikeMock = foundry.utils.deepClone(CONFIG.DDB.naturalActions[0]);\n    unarmedStrikeMock.displayAsAttack = true;\n    const strikeMock = Object.assign(unarmedStrikeMock, override);\n\n    const ddbAttackAction = new DDBAttackAction({\n      ddbData: this.ddbData,\n      ddbDefinition: strikeMock,\n      rawCharacter: this.rawCharacter,\n      type: this.type,\n      documentType: \"weapon\",\n    });\n    ddbAttackAction.build();\n\n    this.data = ddbAttackAction.data;\n  }\n\n  _buildBasic() {\n    this._generateSystemType();\n    this._generateSystemSubType();\n\n    // this._generateLimitedUse();\n    // this._generateRange();\n    // this._generateResourceConsumption();\n    // this._generateActivation();\n    // this._generateLevelScaleDice();\n\n    this.data.system.source = DDBHelper.parseSource(this.ddbDefinition);\n\n    this._generateDescription(true);\n    this._addEffects(undefined, this.type);\n\n    // this._generateFlagHints();\n    // this._generateResourceFlags();\n    // this._addCustomValues();\n  }\n\n  async _generateFeatureAdvancements() {\n    // STUB\n    logger.info(`Generating feature advancements for ${this.ddbDefinition.name} are not yet supported`);\n  }\n\n  _addAdvancement(advancement) {\n    if (!advancement) return;\n    const advancementData = advancement.toObject();\n    if (\n      advancementData.configuration.choices.length !== 0\n      || advancementData.configuration.grants.length !== 0\n      || (advancementData.value && Object.keys(advancementData.value).length !== 0)\n    ) {\n      // console.warn(advancementData)\n      // console.warn(\"ADVANCEMENT\", {\n      //   advancement,\n      //   advancementData,\n      //   choicebool: advancementData.configuration.choices.length !== 0,\n      //   grantbool: advancementData.configuration.grants.length !== 0,\n      //   valuebool: (advancementData.value && Object.keys(advancementData.value).length !== 0),\n      // });\n      this.data.system.advancement.push(advancementData);\n    }\n  }\n\n  _generateSkillAdvancements() {\n    const mods = this.advancementHelper.noMods\n      ? []\n      : DDBHelper.getModifiers(this.ddbData, this.type);\n    const skillExplicitMods = mods.filter((mod) =>\n      mod.type === \"proficiency\"\n      && DICTIONARY.character.skills.map((s) => s.subType).includes(mod.subType)\n    );\n    const advancement = this.advancementHelper.getSkillAdvancement(skillExplicitMods, this.ddbDefinition, undefined, 0);\n    this._addAdvancement(advancement);\n  }\n\n  _generateLanguageAdvancements() {\n    const mods = this.advancementHelper.noMods\n      ? []\n      : DDBHelper.getModifiers(this.ddbData, this.type);\n\n    const advancement = this.advancementHelper.getLanguageAdvancement(mods, this.ddbDefinition, 0);\n    this._addAdvancement(advancement);\n  }\n\n  _generateToolAdvancements() {\n    const mods = this.advancementHelper.noMods\n      ? []\n      : DDBHelper.getModifiers(this.ddbData, this.type);\n    const advancement = this.advancementHelper.getToolAdvancement(mods, this.ddbDefinition, 0);\n    this._addAdvancement(advancement);\n  }\n\n  _generateSkillOrLanguageAdvancements() {\n    // STUB\n    logger.info(`Generating skill or language advancements for ${this.ddbDefinition.name} are not yet supported`);\n  }\n\n  async generateAdvancements() {\n    await this._generateFeatureAdvancements();\n    this._generateSkillAdvancements();\n    this._generateLanguageAdvancements();\n    this._generateToolAdvancements();\n    // FUTURE: Equipment?  needs better handling in Foundry\n    this._generateSkillOrLanguageAdvancements();\n  }\n\n  async buildBackgroundFeatAdvancements(extraFeatIds = []) {\n    const characterFeatIds = foundry.utils.getProperty(this.ddbData, \"character.background.definition.featList.featIds\") ?? [];\n    const featIds = extraFeatIds.concat(characterFeatIds);\n    if (featIds.length === 0) return;\n\n    const advancement = new game.dnd5e.documents.advancement.ItemGrantAdvancement();\n    const indexFilter = {\n      fields: [\n        \"name\",\n        \"flags.ddbimporter.featId\",\n      ],\n    };\n    const compendium = CompendiumHelper.getCompendiumType(\"feats\");\n    await compendium.getIndex(indexFilter);\n\n    const feats = compendium.index.filter((f) => featIds.includes(foundry.utils.getProperty(f, \"flags.ddbimporter.featId\")));\n\n    advancement.updateSource({\n      configuration: {\n        items: feats.map((f) => {\n          return { uuid: f.uuid };\n        }),\n      },\n      title: \"Feat\",\n    });\n    this.data.system.advancement.push(advancement.toObject());\n\n    const advancementLinkData = foundry.utils.getProperty(this.data, \"flags.ddbimporter.advancementLink\") ?? [];\n    const advancementData = {\n      _id: advancement._id,\n      features: {}\n    };\n    advancementData[advancement._id] = {};\n    feats.forEach((f) => {\n      advancementData.features[f.name] = f.uuid;\n    });\n    advancementLinkData.push(advancementData);\n    foundry.utils.setProperty(this.data, \"flags.ddbimporter.advancementLink\", advancementLinkData);\n  }\n\n  _buildBackground() {\n    try {\n      this._generateSystemType();\n      this._generateSystemSubType();\n\n      this.data.system.source = DDBHelper.parseSource(this.ddbDefinition);\n\n      logger.debug(`Found background ${this.ddbDefinition.name}`);\n      logger.debug(`Found ${this._choices.map((c) => c.label).join(\",\")}`);\n\n      this._generateDescription(true);\n      this.data.system.description.value += `<h3>Proficiencies</h3><ul>`;\n      this._choices.forEach((choice) => {\n        this._addEffects(choice, this.type);\n        this.data.system.description.value += `<li>${choice.label}</li>`;\n      });\n      this.data.system.description.value += `</ul>`;\n      this.data.img = \"icons/skills/trades/academics-book-study-purple.webp\";\n      this.data.name = this.data.name.split(\"Background: \").pop();\n\n    } catch (err) {\n      logger.warn(\n        `Unable to Generate Background Feature: ${this.name}, please log a bug report. Err: ${err.message}`,\n        \"extension\"\n      );\n      logger.error(\"Error\", err);\n    }\n  }\n\n\n  build() {\n    try {\n      if (DDBFeature.FORCE_UNARMED.includes(this.data.name)) {\n        this._buildUnarmed();\n      } else if (this.type === \"background\") {\n        // work around till background parsing support advancements\n        this.isChoiceFeature = false;\n        this._buildBackground();\n      } else if (this.isChoiceFeature) {\n        logger.debug(`${this.name} has multiple choices and you  need to pass this instance to DDBChoiceFeature`);\n        //  DDBChoiceFeature.buildChoiceFeatures(this);\n      } else {\n        this._buildBasic();\n      }\n    } catch (err) {\n      logger.warn(\n        `Unable to Generate Basic Feature: ${this.name}, please log a bug report. Err: ${err.message}`,\n        \"extension\"\n      );\n      logger.error(\"Error\", err);\n    }\n  }\n\n}\n","import { generateTable } from \"../../lib/DDBTable.js\";\nimport { featureEffectAdjustment } from \"../../effects/specialFeats.js\";\n\n/**\n * Some features we need to fix up or massage because they are modified\n * in interesting ways\n * @param {*} ddb\n * @param {*} features\n */\n// eslint-disable-next-line complexity\nexport async function fixFeatures(features) {\n  for (let feature of features) {\n    const name = foundry.utils.getProperty(feature, \"flags.ddbimporter.originalName\") ?? feature.name;\n    // eslint-disable-next-line no-continue\n    if (foundry.utils.getProperty(feature, \"flags.ddbimporter.isCustomAction\") === true) continue;\n    switch (name) {\n      case \"Action Surge\": {\n        feature.system.damage = { parts: [], versatile: \"\", value: \"\" };\n        break;\n      }\n      case \"Arcane Propulsion Armor Gauntlet\": {\n        feature.system.damage.parts[0][0] += \" + @mod\";\n        break;\n      }\n      case \"Arms of the Astral Self: Summon\": {\n        feature.system.target.type = \"enemy\";\n        feature.system.target.units = \"all\";\n        feature.system.range.value = 10;\n        feature.system.range.units = \"ft\";\n        break;\n      }\n      case \"Arms of the Astral Self (DEX/STR)\": {\n        feature.system.properties.push(\"fin\");\n        feature.system.ability = \"\";\n        break;\n      }\n      case \"Bardic Inspiration\": {\n        feature.system.actionType = \"util\";\n        feature.system.duration = {\n          value: 10,\n          units: \"minute\",\n        };\n        feature.system.target = {\n          value: 1,\n          width: null,\n          units: \"\",\n          type: \"creature\",\n        };\n        feature.system.range.value = 60;\n        feature.system.range.units = \"ft\";\n        break;\n      }\n      case \"Blessed Healer\": {\n        feature.system.activation.type = \"special\";\n        feature.system.activation.cost = null;\n        feature.system.actionType = \"heal\";\n        feature.system[\"target\"][\"type\"] = \"self\";\n        feature.system.range = { value: null, units: \"self\", long: null };\n        feature.system.uses = { value: null, max: \"0\", per: \"\", type: \"\" };\n        break;\n      }\n      case \"Celestial Revelation\": {\n        feature.system.activation.type = \"\";\n        feature.system.actionType = \"\";\n        feature.system.uses = {\n          value: null,\n          max: null,\n          per: \"\",\n        };\n        break;\n      }\n      case \"Channel Divinity: Radiance of the Dawn\":\n        feature.system.damage = {\n          parts: [[\"2d10[radiant] + @classes.cleric.levels\", \"radiant\"]],\n          versatile: \"\",\n          value: \"\",\n        };\n        break;\n      case \"Channel Divinity: Sacred Weapon\":\n        feature.system[\"target\"][\"type\"] = \"self\";\n        feature.system.duration = {\n          value: 1,\n          units: \"minute\",\n        };\n        break;\n      case \"Daunting Roar\": {\n        feature.system.target = {\n          value: 10,\n          units: \"ft\",\n          type: \"radius\",\n        };\n        feature.system.range.units = \"self\";\n        break;\n      }\n      case \"Dark One’s Blessing\":\n      case \"Dark One's Blessing\": {\n        feature.system.damage = { parts: [[\"@classes.warlock.level + @mod\", \"temphp\"]], versatile: \"\", value: \"\" };\n        feature.system.actionType = \"heal\";\n        feature.system.ability = \"cha\";\n        feature.system.target.type = \"self\";\n        feature.system.range.units = \"self\";\n        feature.system.activation.condition = \"Reduce a hostile creature to 0 HP\";\n        break;\n      }\n      case \"Deflect Missiles\": {\n        feature.system.damage = { parts: [[\"1d10 + @mod + @classes.monk.levels\"]], versatile: \"\", value: \"\" };\n        break;\n      }\n      case \"Divine Intervention\":\n        feature.system.damage = { parts: [[\"1d100\", \"\"]], versatile: \"\", value: \"\" };\n        feature.system.actionType = \"other\";\n        break;\n      case \"Draconic Resilience\": {\n        if (feature.effects.length === 1) {\n          const toKeepChanges = feature.effects[0].changes.filter((change) => !change.key.includes(\"system.attributes.ac\"));\n          feature.effects[0].changes = [\n            ...toKeepChanges,\n            {\n              key: \"system.attributes.ac.calc\",\n              value: \"draconic\",\n              mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n              priority: 15,\n            },\n          ];\n        }\n        break;\n      }\n      case \"Eldritch Cannon: Force Ballista\":\n        feature.system.target.value = 1;\n        feature.system.target.type = \"creature\";\n        feature.system.range.value = 120;\n        feature.system.range.units = \"ft\";\n        feature.system.ability = \"int\";\n        feature.system.actionType = \"rsak\";\n        feature.system.chatFlavor = \"On hit pushed 5 ft away.\";\n        feature.system.damage = { parts: [[\"2d8[force]\", \"force\"]], versatile: \"\", value: \"\" };\n        break;\n      case \"Eldritch Cannon: Flamethrower\":\n        feature.system.damage = { parts: [[\"2d8[fire]\", \"fire\"]], versatile: \"\", value: \"\" };\n        break;\n      case \"Eldritch Cannon: Protector\":\n        feature.system.target.units = \"any\";\n        feature.system.target.type = \"ally\";\n        feature.system.range.value = 10;\n        feature.system.ability = \"int\";\n        feature.system.actionType = \"heal\";\n        feature.system.damage = { parts: [[\"1d8 + @mod\", \"temphp\"]], versatile: \"\", value: \"\" };\n        break;\n      case \"Extra Attack\": {\n        feature.system.activation = { type: \"\", cost: 0, condition: \"\" };\n        feature.system.actionType = \"\";\n        feature.system.range.value = null;\n        break;\n      }\n      case \"Fighting Style: Interception\":\n        feature.system.damage = { parts: [[\"1d10 + @prof\", \"\"]], versatile: \"\", value: \"\" };\n        feature.system.target.type = \"self\";\n        feature.system.range.units = \"self\";\n        break;\n      case \"Form of the Beast: Tail (reaction)\":\n        feature.system.actionType = \"other\";\n        feature.system.target.type = \"self\";\n        feature.system.range.units = \"self\";\n        break;\n      case \"Guardian Armor: Defensive Field\": {\n        feature.system.damage = { parts: [[\"@classes.artificer.levels\", \"temphp\"]], versatile: \"\", value: \"\" };\n        feature.system.target.type = \"self\";\n        feature.system.range.units = \"self\";\n        feature.system.actionType = \"heal\";\n        break;\n      }\n      case \"Genie's Vessel: Genie's Wrath (Dao)\": {\n        feature.system.activation.type = \"special\";\n        feature.system.target.value = 1;\n        feature.system.target.type = \"creature\";\n        feature.system.range.units = \"spec\";\n        feature.system.actionType = \"util\";\n        feature.system.duration.units = \"inst\";\n        feature.system.damage = { parts: [[\"@prof\", \"bludgeoning\"]], versatile: \"\", value: \"\" };\n        break;\n      }\n      case \"Giant's Might\": {\n        feature.system[\"target\"][\"type\"] = \"self\";\n        feature.system.range = { value: null, units: \"self\", long: null };\n        feature.system.duration = {\n          value: 1,\n          units: \"minute\",\n        };\n        break;\n      }\n      case \"Ghostly Gaze\": {\n        feature.system.duration = {\n          value: 1,\n          units: \"minute\",\n        };\n        break;\n      }\n      case \"Hand of Healing\": {\n        feature.system.actionType = \"heal\";\n        break;\n      }\n      case \"Harness Divine Power\": {\n        feature.system.damage = { parts: [], versatile: \"\", value: \"\" };\n        break;\n      }\n      case \"Healing Hands\": {\n        feature.system.damage = {\n          parts: [[\"@details.level[healing]\", \"healing\"]],\n          versatile: \"\",\n          value: \"\",\n        };\n        feature.system.actionType = \"heal\";\n        feature.system.target.type = \"creature\";\n        feature.system.range = {\n          type: \"touch\",\n          value: null,\n          long: null,\n          units: \"touch\"\n        };\n        break;\n      }\n      case \"Healing Light\": {\n        feature.system.actionType = \"heal\";\n        feature.system.damage = { parts: [[\"1d6\", \"healing\"]], versatile: \"\", value: \"\" };\n        break;\n      }\n      case \"Hold Breath\": {\n        feature.system.duration = { value: 1, units: \"hour\" };\n        feature.system[\"target\"][\"type\"] = \"self\";\n        feature.system.range = { value: null, units: \"self\", long: null };\n        break;\n      }\n      case \"Hound of Ill Omen\": {\n        feature.system.consume.amount = 3;\n        break;\n      }\n      case \"Intimidating Presence\": {\n        feature.system.duration = { value: 2, units: \"turns\" };\n        feature.system.target.value = 1;\n        feature.system.target.type = \"creature\";\n        feature.system.range = { value: 30, units: \"ft\", long: null };\n        feature.system.actionType = \"save\";\n        feature.system.save.ability = \"wis\";\n        feature.system.save.scaling = \"cha\";\n        break;\n      }\n      case \"Hypnotic Gaze\": {\n        feature.system.uses = {\n          value: null,\n          max: null,\n          per: \"\",\n        };\n        break;\n      }\n      case \"Lay on Hands\": {\n        feature.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n        feature.system.range = {\n          type: \"touch\",\n          value: null,\n          long: null,\n          units: \"touch\"\n        };\n        feature.system.target.value = 1;\n        feature.system.target.type = \"creature\";\n        feature.system.actionType = \"other\";\n        feature.system.duration.units = \"inst\";\n        feature.system.consume.amount = 0;\n        feature.system.uses.prompt = false;\n        break;\n      }\n      case \"Mantle of Inspiration\": {\n        feature.system.damage.parts[0][1] = \"temphp\";\n        break;\n      }\n      case \"Metamagic - Heightened Spell\": {\n        feature.system.consume.amount = 3;\n        break;\n      }\n      case \"Metamagic - Quickened Spell\": {\n        feature.system.consume.amount = 2;\n        break;\n      }\n      case \"Mind Link Response\": {\n        feature.system.target.value = 1;\n        feature.system.target.type = \"creature\";\n        feature.system.duration = { value: 1, units: \"hour\" };\n        feature.system.range.units = \"spec\";\n        break;\n      }\n      case \"Momentary Stasis\": {\n        feature.system.actionType = \"save\";\n        feature.system.save.ability = \"con\";\n        break;\n      }\n      case \"Polearm Master - Bonus Attack\": {\n        feature.system.actionType = \"mwak\";\n        feature.system.range = { value: 10, long: null, units: \"ft\" };\n        break;\n      }\n      case \"Psionic Power: Recovery\": {\n        feature.system.damage = { parts: [], versatile: \"\", value: \"\" };\n        foundry.utils.setProperty(feature, \"system.consume.amount\", -1);\n        break;\n      }\n      case \"Psychic Blades: Attack (DEX)\":\n      case \"Psychic Blades: Attack (STR)\":\n      case \"Psychic Blades: Bonus Attack (DEX)\":\n      case \"Psychic Blades: Bonus Attack (STR)\":\n      case \"Psychic Blades: Bonus Attack\":\n      case \"Psychic Blades: Attack\": {\n        feature.system.actionType = \"mwak\";\n        feature.system.properties.push(\"fin\");\n        feature.system.properties.push(\"thr\");\n        break;\n      }\n      case \"Quickened Healing\": {\n        feature.system.actionType = \"heal\";\n        feature.system.target.type = \"self\";\n        feature.system.range.units = \"self\";\n        feature.system.damage.parts[0][0] += \" + @prof[healing]\";\n        feature.system.damage.parts[0][1] = \"healing\";\n        break;\n      }\n      case \"Celestial Revelation (Radiant Soul)\":\n      case \"Radiant Soul\": {\n        if (foundry.utils.getProperty(feature, \"flags.ddbimporter.type\") == \"race\") {\n          feature.system.uses = {\n            value: 1,\n            max: 1,\n            per: \"lr\",\n          };\n        } else if (foundry.utils.getProperty(feature, \"flags.ddbimporter.type\") == \"class\") {\n          feature.system.activation.type = \"special\";\n        }\n        break;\n      }\n      case \"Rage\": {\n        feature.system.duration = {\n          value: 1,\n          units: \"minute\",\n        };\n        break;\n      }\n      case \"Raging Storm: Desert\": {\n        feature.system.duration.units = \"inst\";\n        feature.system.target.value = 1;\n        feature.system.target.type = \"creature\";\n        feature.system.range.value = 10;\n        feature.system.damage.parts = [[\"floor(@classes.barbarian.levels / 2)\", \"fire\"]];\n        feature.system.save.scaling = \"con\";\n        break;\n      }\n      case \"Raging Storm: Sea\": {\n        feature.system.activation = { type: \"special\", cost: 0, condition: \"\" };\n        feature.system.duration.units = \"perm\";\n        feature.system.target.value = 1;\n        feature.system.target.type = \"creature\";\n        feature.system.range = { value: null, long: null, units: \"\" };\n        feature.system.save.scaling = \"con\";\n        break;\n      }\n      case \"Raging Storm: Tundra\": {\n        feature.system.activation = { type: \"special\", cost: 0, condition: \"\" };\n        feature.system.actionType = \"save\";\n        feature.system.save = { ability: \"str\", dc: null, scaling: \"con\" };\n        feature.system.duration.units = \"perm\";\n        feature.system.target.value = 1;\n        feature.system.target.type = \"creature\";\n        feature.system.range.value = 10;\n        break;\n      }\n      case \"Second Wind\":\n        feature.system.damage = {\n          parts: [[\"1d10[healing] + @classes.fighter.levels\", \"healing\"]],\n          versatile: \"\",\n          value: \"\",\n        };\n        feature.system.actionType = \"heal\";\n        feature.system.target.type = \"self\";\n        feature.system.range.units = \"self\";\n        break;\n      case \"Storm Aura: Desert\": {\n        feature.system.target = { value: 10, units: \"ft\", type: \"creature\" };\n        feature.system.range = { value: null, long: null, units: \"spec\" };\n        feature.system.duration.units = \"inst\";\n        feature.system.damage.parts = [[\"@scale.path-of-the-storm-herald.storm-aura-desert\", \"fire\"]];\n        break;\n      }\n      case \"Storm Aura: Sea\": {\n        feature.system.target = { value: 1, units: \"\", type: \"creature\" };\n        feature.system.range = { value: 10, long: null, units: \"ft\" };\n        feature.system.duration.units = \"inst\";\n        feature.system.damage.parts = [[\"@scale.path-of-the-storm-herald.storm-aura-sea\", \"lightning\"]];\n        break;\n      }\n      case \"Storm Aura: Tundra\": {\n        feature.system.actionType = \"heal\";\n        feature.system.target = { value: 10, units: \"ft\", type: \"ally\" };\n        feature.system.range = { value: null, long: null, units: \"self\" };\n        feature.system.duration.units = \"inst\";\n        feature.system.damage.parts = [[\"@scale.path-of-the-storm-herald.storm-aura-tundra\", \"temphp\"]];\n        break;\n      }\n      case \"Shifting\": {\n        feature.system.actionType = \"heal\";\n        feature.system.target.type = \"self\";\n        feature.system.range = { value: null, long: null, units: \"self\" };\n        feature.system.duration.units = \"inst\";\n        feature.system.ability = \"con\";\n        feature.system.actionType = \"heal\";\n        feature.system.damage = { parts: [[\"@details.level + max(1,@mod)\", \"temphp\"]], versatile: \"\", value: \"\" };\n        break;\n      }\n      case \"Shift\": {\n        feature.system.actionType = \"heal\";\n        feature.system.target.type = \"self\";\n        feature.system.range = { value: null, long: null, units: \"self\" };\n        feature.system.duration = {\n          value: 1,\n          units: \"minute\",\n        };\n        feature.system.ability = \"con\";\n        feature.system.actionType = \"heal\";\n        feature.system.damage = { parts: [[\"2 * @prof\", \"temphp\"]], versatile: \"\", value: \"\" };\n        break;\n      }\n      case \"Sneak Attack\": {\n        if (!foundry.utils.getProperty(feature, \"flags.ddbimporter.action\")) {\n          feature.system.actionType = \"other\";\n          feature.system.activation = { type: \"special\", cost: 0, condition: \"\" };\n        }\n        break;\n      }\n      case \"Song of Rest\": {\n        feature.system.activation = { type: \"hour\", cost: 1, condition: \"\" };\n        feature.system.actionType = \"heal\";\n        feature.system.target.type = \"creature\";\n        feature.system.range = { value: null, long: null, units: \"spec\" };\n        feature.system.damage.parts[0][1] = \"healing\";\n        foundry.utils.setProperty(feature, \"flags.midiProperties.magicdam\", true);\n        foundry.utils.setProperty(feature, \"flags.midiProperties.magiceffect\", true);\n        break;\n      }\n      case \"Surprise Attack\":\n        feature.system.damage = { parts: [[\"2d6\", \"\"]], versatile: \"\", value: \"\" };\n        feature.system.activation.type = \"special\";\n        break;\n      case \"Starry Form: Archer\":\n        feature.system.actionType = \"rsak\";\n        feature.system.target.value = 1;\n        feature.system.target.type = \"creature\";\n        feature.system.range.units = \"ft\";\n        feature.system.consume = { type: \"\", target: \"\", amount: null };\n        break;\n      case \"Starry Form: Chalice\":\n        feature.system.damage.parts[0][1] = \"healing\";\n        feature.system.actionType = \"heal\";\n        feature.system.target.value = 1;\n        feature.system.target.type = \"ally\";\n        feature.system.range.value = 30;\n        feature.system.range.units = \"ft\";\n        feature.system.activation.type = \"special\";\n        feature.system.consume = { type: \"\", target: \"\", amount: null };\n        break;\n      case \"Starry Form: Dragon\":\n        break;\n      case \"Stone's Endurance\":\n      case \"Stone’s Endurance\":\n        feature.system.damage = { parts: [[\"1d12 + @mod\", \"\"]], versatile: \"\", value: \"\" };\n        feature.system.actionType = \"other\";\n        feature.system.ability = \"con\";\n        feature.system.target.type = \"self\";\n        feature.system.range.units = \"self\";\n        feature.system.consume = { type: \"\", target: \"\", amount: null };\n        break;\n      case \"Stunning Strike\":\n        feature.system.actionType = \"save\";\n        feature.system.save = { ability: \"con\", dc: null, scaling: \"wis\" };\n        feature.system.target = { value: null, width: null, units: \"touch\", type: \"creature\" };\n        feature.system.range.units = \"ft\";\n        break;\n      case \"Superiority Dice\": {\n        foundry.utils.setProperty(feature.system, \"damage.parts\", [[\"@scale.battle-master.combat-superiority-die\"]]);\n        break;\n      }\n      case \"Summon Wildfire Spirit\": {\n        foundry.utils.setProperty(document, \"system.target.value\", 1);\n        foundry.utils.setProperty(document, \"system.target.type\", \"space\");\n        foundry.utils.setProperty(document, \"system.range.units\", \"ft\");\n        foundry.utils.setProperty(document, \"system.range.value\", 30);\n        foundry.utils.setProperty(document, \"system.duration\", {\n          value: 1,\n          units: \"hour\",\n        });\n        feature.system.damage = { parts: [[\"2d6\", \"fire\"]], versatile: \"\", value: \"\" };\n        feature.system.ability = \"wis\";\n        feature.system.save = { ability: \"dex\", dc: null, scaling: \"spell\" };\n        break;\n      }\n      case \"Unarmored Defense\": {\n        if (feature.effects.length === 1) {\n          const klass = foundry.utils.getProperty(feature, \"flags.ddbimporter.class\");\n          if (klass == \"Barbarian\") {\n            feature.effects[0].changes = [\n              {\n                key: \"system.attributes.ac.calc\",\n                value: \"unarmoredBarb\",\n                mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n                priority: 15,\n              },\n            ];\n          } else if (klass === \"Monk\") {\n            feature.effects[0].changes = [\n              {\n                key: \"system.attributes.ac.calc\",\n                value: \"unarmoredMonk\",\n                mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n                priority: 15,\n              },\n            ];\n          }\n        }\n        break;\n      }\n      case \"Wrath of the Storm\": {\n        feature.system.damage = { parts: [[\"2d8\", \"lightning\"]], versatile: \"\", value: \"\" };\n        break;\n      }\n      // no default\n    }\n\n    if (name.endsWith(\" Breath Weapon\") && feature.system.target?.type === \"line\") {\n      feature.system.target.value = 30;\n    } else if (name.endsWith(\"[Infusion] Spell-Refueling Ring\")) {\n      feature.system.activation.type = \"action\";\n    }\n    const tableDescription = await generateTable(feature.name, feature.system.description.value, true, feature.type);\n    feature.system.description.value = tableDescription;\n    const chatAdd = game.settings.get(\"ddb-importer\", \"add-description-to-chat\");\n    if (chatAdd && feature.system.description.chat !== \"\") {\n      feature.system.description.chat = await generateTable(feature.name, feature.system.description.chat, true, feature.type);\n    }\n  }\n}\n\nexport async function addExtraEffects(ddb, documents, character) {\n  const compendiumItem = character.flags.ddbimporter.compendium;\n  const addCharacterEffects = compendiumItem\n    ? game.settings.get(\"ddb-importer\", \"munching-policy-add-effects\")\n    : game.settings.get(\"ddb-importer\", \"character-update-policy-add-character-effects\");\n\n  const results = await Promise.all(documents.map((document) => {\n    return featureEffectAdjustment(ddb, character, document, addCharacterEffects);\n  }));\n  return results;\n\n}\n","// import DICTIONARY from \"../../dictionary.js\";\n// import logger from \"../../logger.js\";\n\nfunction prepItem(item) {\n  if (item.name.startsWith(\"Potion of\")) {\n    if (!item.system.duration) item.system.duration = { units: \"\", value: null };\n    if (!item.system.target) item.system.target = { value: null, width: null, units: \"\", type: \"creature\" };\n    if (!item.system.range) item.system.range = { value: null, long: null, units: \"\", type: \"touch\" };\n  } else if (item.name.startsWith(\"Vicious\")) {\n    foundry.utils.setProperty(item, \"system.critical\", { damage: \"+ 7\", threshold: null });\n  }\n}\n\nfunction tattoos(item) {\n  if (!item.name.toLowerCase().includes(\"tattoo\")) return;\n  const name = item.flags.ddbimporter?.originalName ?? item.name;\n  if (name.startsWith(\"Absorbing\")) {\n    item.system.uses = { value: 1, max: 1, per: \"charges\", autoDestroy: false, autoUse: true };\n    // foundry.utils.setProperty(item, \"flags.ddbimporter.effectLabelOverride\", `${item.name}`);\n    item.effects.map((effect) => {\n      effect.name = item.name;\n      return item;\n    });\n    item.system.activation.type = \"reaction\";\n    item.system.activation.cost = 1;\n    item.system.activation.condition = `When you take ${name.split(',').pop().trim().toLowerCase()} damage`;\n    item.system.actionType = \"heal\";\n    item.system.target = {\n      value: null,\n      width: null,\n      units: \"\",\n      type: \"self\",\n    };\n  } else if (name.includes(\"Blood Fury\")) {\n    item.system.activation.type = \"special\";\n    item.system.actionType = \"util\";\n  }\n\n}\n\n/**\n * Some items we need to fix up or massage because they are modified\n * in interesting ways\n * @param {*} ddb\n * @param {*} items\n */\nexport function fixItems(items) {\n  // eslint-disable-next-line complexity\n  items.forEach((item) => {\n    prepItem(item);\n    tattoos(item);\n    const name = item.flags.ddbimporter?.originalName ?? item.name;\n    switch (name) {\n      case \"Waterskin\":\n        item.system.activation.type = \"special\";\n        item.system.uses = { value: 4, max: 4, per: \"charges\", autoDestroy: false, autoUse: true };\n        break;\n      case \"Potion of Healing\":\n        item.system.damage = { parts: [[\"2d4 + 2\", \"healing\"]], versatile: \"\", value: \"\" };\n        item.system.uses = { value: 1, max: 1, per: \"charges\", autoDestroy: true, autoUse: true };\n        item.system[\"duration\"][\"value\"] = 0;\n        item.system.actionType = \"heal\";\n        item.system[\"target\"][\"type\"] = \"creature\";\n        item.system[\"range\"][\"type\"] = \"touch\";\n        break;\n      case \"Potion of Healing (Greater)\":\n      case \"Potion of Greater Healing\":\n        item.system.damage = { parts: [[\"4d4 + 4\", \"healing\"]], versatile: \"\", value: \"\" };\n        item.system.uses = { value: 1, max: 1, per: \"charges\", autoDestroy: true, autoUse: true };\n        item.system[\"duration\"][\"value\"] = 0;\n        item.system.actionType = \"heal\";\n        item.system[\"target\"][\"type\"] = \"creature\";\n        item.system[\"range\"][\"type\"] = \"touch\";\n        item.flags[\"ddbimporter\"][\"dndbeyond\"][\"alternativeNames\"] = [\"Potion of Greater Healing\"];\n        break;\n      case \"Potion of Healing (Superior)\":\n      case \"Potion of Superior Healing\":\n        item.system.damage = { parts: [[\"8d4 + 8\", \"healing\"]], versatile: \"\", value: \"\" };\n        item.system.uses = { value: 1, max: 1, per: \"charges\", autoDestroy: true, autoUse: true };\n        item.system[\"duration\"][\"value\"] = 0;\n        item.system.actionType = \"heal\";\n        item.system[\"target\"][\"type\"] = \"creature\";\n        item.system[\"range\"][\"type\"] = \"touch\";\n        item.flags[\"ddbimporter\"][\"dndbeyond\"][\"alternativeNames\"] = [\n          \"Potion of Superior Healing\",\n          \"potion of superior healing\",\n        ];\n        break;\n      case \"Potion of Healing (Supreme)\":\n      case \"Potion of Supreme Healing\":\n        item.system.damage = { parts: [[\"10d4 + 20\", \"healing\"]], versatile: \"\", value: \"\" };\n        item.system.uses = { value: 1, max: 1, per: \"charges\", autoDestroy: true, autoUse: true };\n        item.system[\"duration\"][\"value\"] = 0;\n        item.system.actionType = \"heal\";\n        item.system[\"target\"][\"type\"] = \"creature\";\n        item.system[\"range\"][\"type\"] = \"touch\";\n        item.flags[\"ddbimporter\"][\"dndbeyond\"][\"alternativeNames\"] = [\"Potion of Supreme Healing\"];\n        break;\n      case \"Iron Bands of Binding\":\n        item.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n        item.system.uses = { value: 1, max: \"1\", per: \"day\" };\n        item.system.range = { value: 60, long: null, units: \"ft\" };\n        item.system.ability = \"dex\";\n        item.system.actionType = \"rwak\";\n        item.system.save = { ability: \"str\", dc: 20, scaling: \"flat\" };\n        item.system.target = { value: 1, width: null, units: \"any\", type: \"creature\" };\n        break;\n      case \"Far Realm Shard\": {\n        item.system.activation.type = \"special\";\n        item.system.actionType = \"save\";\n        item.system.damage = { parts: [[\"3d6[psychic]\", \"psychic\"]], versatile: \"\", value: \"\" };\n        item.system.save = {\n          ability: \"cha\",\n          dc: null,\n          scaling: \"spell\",\n        };\n        break;\n      }\n      case \"Acid (vial)\": {\n        item.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n        item.system.target = { value: 1, width: null, units: \"any\", type: \"creature\" };\n        item.system.range = { value: 20, long: null, units: \"ft\" };\n        item.system.ability = \"dex\";\n        item.system.actionType = \"rwak\";\n        item.system.chatFlavor = \"improvised weapon\";\n        item.system.damage = { parts: [[\"2d6[acid]\", \"acid\"]], versatile: \"\", value: \"\" };\n        break;\n      }\n      case \"Bead of Force\": {\n        item.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n        item.system.target = { value: 10, width: null, units: \"ft\", type: \"radius\" };\n        item.system.range = { value: 60, long: null, units: \"ft\" };\n        item.system.ability = \"dex\";\n        item.system.duration = { units: \"minute\", value: 1 };\n        item.system.uses = { value: 1, max: \"1\", per: \"\" };\n        item.system.actionType = \"rwak\";\n        item.system.chatFlavor = \"improvised weapon\";\n        item.system.damage = { parts: [[\"5d4[force]\", \"force\"]], versatile: \"\", value: \"\" };\n        item.system.save = {\n          ability: \"dex\",\n          dc: 15,\n          scaling: \"flat\",\n        };\n        break;\n      }\n      case \"Alchemist's Fire (flask)\":\n      case \"Alchemist's Fire\": {\n        item.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n        item.system.target = { value: 1, width: null, units: \"any\", type: \"creature\" };\n        item.system.range = { value: 20, long: null, units: \"ft\" };\n        item.system.ability = \"dex\";\n        item.system.actionType = \"rwak\";\n        item.system.chatFlavor = \"improvised weapon\";\n        item.system.damage = { parts: [[\"1d4[fire]\", \"fire\"]], versatile: \"\", value: \"\" };\n        item.system.save = {\n          ability: \"dex\",\n          dc: 10,\n          scaling: \"flat\",\n        };\n        break;\n      }\n      case \"Bomb\": {\n        item.type = \"consumable\";\n        item.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n        item.system.target = { value: 5, width: null, units: \"ft\", type: \"radius\" };\n        item.system.range = { value: 60, long: null, units: \"ft\" };\n        item.system.ability = \"dex\";\n        item.system.actionType = \"rwak\";\n        item.system.chatFlavor = \"improvised weapon\";\n        item.system.damage = { parts: [[\"3d6[fire]\", \"fire\"]], versatile: \"\", value: \"\" };\n        item.system.save = {\n          ability: \"dex\",\n          dc: 12,\n          scaling: \"flat\",\n        };\n        break;\n      }\n      case \"Canaith Mandolin\": {\n        foundry.utils.setProperty(item, \"flags.magicitems.charges\", \"1\");\n        foundry.utils.setProperty(item, \"flags.magicitems.chargeType\", \"c2\");\n        foundry.utils.setProperty(item, \"flags.magicitems.recharge\", \"1\");\n        foundry.utils.setProperty(item, \"flags.magicitems.rechargeType\", \"t1\");\n        break;\n      }\n      case \"Grenade, Fragmentation\": {\n        item.type = \"consumable\";\n        item.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n        item.system.target = { value: 20, width: null, units: \"ft\", type: \"radius\" };\n        item.system.range = { value: 60, long: null, units: \"ft\" };\n        item.system.ability = \"dex\";\n        item.system.actionType = \"rwak\";\n        item.system.chatFlavor = \"improvised weapon\";\n        item.system.damage = { parts: [[\"5d6[piercing]\", \"piercing\"]], versatile: \"\", value: \"\" };\n        item.system.save = {\n          ability: \"dex\",\n          dc: 15,\n          scaling: \"flat\",\n        };\n        break;\n      }\n      case \"Healer's Kit\": {\n        item.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n        item.system.target = { value: 1, width: null, units: \"any\", type: \"creature\" };\n        item.system.range = { value: 20, long: null, units: \"ft\" };\n        item.system.uses = { value: 10, max: \"10\", per: \"charge\" };\n        foundry.utils.setProperty(item, \"flags.ddbimporter.retainResourceConsumption\", true);\n        break;\n      }\n      case \"Wand of Fireballs\": {\n        if (!game.modules.get(\"magicitems\")?.active\n          && !game.modules.get(\"magic-items-2\")?.active\n          && !game.modules.get(\"items-with-spells-5e\")?.active\n        ) {\n          item.system.damage = { parts: [[\"8d6\", \"fire\"]], versatile: \"1d6\", value: \"\" };\n          item.system.save = {\n            ability: \"dex\",\n            dc: 15,\n            scaling: \"flat\",\n          };\n          item.system.range = { value: 150, long: null, units: \"ft\" };\n          item.system.target = { value: 20, width: null, units: \"ft\", type: \"sphere\" };\n          item.system.uses.per = \"charges\";\n        }\n        break;\n      }\n      case \"Wand of Magic Missiles\": {\n        if (!game.modules.get(\"magicitems\")?.active\n          && !game.modules.get(\"magic-items-2\")?.active\n          && !game.modules.get(\"items-with-spells-5e\")?.active\n        ) {\n          item.system.damage = { parts: [[\"3d4 + 3\", \"force\"]], versatile: \"1d4 + 1\", value: \"\" };\n          item.system.range = { value: 120, long: null, units: \"ft\" };\n        }\n        break;\n      }\n      // no default\n    }\n  });\n}\n","import utils from \"../../../lib/utils.js\";\nimport logger from \"../../../logger.js\";\nimport DICTIONARY from \"../../../dictionary.js\";\nimport { generateTable } from \"../../../lib/DDBTable.js\";\nimport SETTINGS from \"../../../settings.js\";\nimport { parseDamageRolls, parseTags } from \"../../../lib/DDBReferenceLinker.js\";\n\nexport default class DDBMonsterFeature {\n\n  #generateAdjustedName() {\n    this.originalName = `${this.name}`;\n    if (!this.stripName) return;\n    const regex = /(.*)\\s*\\((:?costs? \\d actions|Recharges after a (Short or Long|Long) Rest|(?!Spell;|Psionics;).*\\d\\/day|recharge \\d ?- ?\\d|Recharge \\d)\\)/i;\n    const nameMatch = this.name.replace(/[–-–−]/g, \"-\").match(regex);\n    if (nameMatch) {\n      this.feature.name = nameMatch[1].trim();\n      this.nameSplit = nameMatch[2];\n    } else {\n      const regex2 = /(.*)\\s*\\((.*); (:?costs \\d actions|Recharges after a (Short or Long|Long) Rest|(?!Spell;|Psionics;).*\\d\\/day|recharge \\d-\\d|Recharge \\d)\\)/i;\n      const nameMatch2 = this.name.replace(/[–-–−]/g, \"-\").match(regex2);\n      if (nameMatch2) {\n        this.feature.name = `${nameMatch2[1].trim()} (${nameMatch2[2].trim()})`;\n        this.nameSplit = nameMatch2[3];\n      }\n    }\n  }\n\n  createBaseFeature() {\n    this.feature = {\n      _id: foundry.utils.randomID(),\n      name: this.name,\n      type: this.templateType,\n      system: utils.getTemplate(this.templateType),\n      effects: [],\n      flags: {\n        ddbimporter: {\n          levelBonus: false,\n          dndbeyond: {\n          },\n        },\n        monsterMunch: {\n          titleHTML: this.titleHTML,\n          fullName: this.fullName,\n          actionCopy: this.actionCopy,\n          type: this.type,\n        }\n      },\n    };\n    // these templates not good\n    this.feature.system.duration.value = \"\";\n    this.feature.system.requirements = \"\";\n    this.levelBonus = false;\n  }\n\n  // prepare the html in this.html for a parse, runs some checks and pregen to calculate values\n  prepare() {\n    this.strippedHtml = utils.stripHtml(`${this.html}`).trim();\n\n    const matches = this.strippedHtml.match(\n      /(Melee|Ranged|Melee\\s+or\\s+Ranged)\\s+(|Weapon|Spell)\\s*Attack:\\s*([+-]\\d+|your (?:\\w+\\s*)*)\\s+(plus PB\\s|\\+ PB\\s)?to\\s+hit/i\n    );\n\n    const healingRegex = /(regains|regain)\\s+?(?:([0-9]+))?(?: *\\(?([0-9]*d[0-9]+(?:\\s*[-+]\\s*[0-9]+)??)\\)?)?\\s+hit\\s+points/i;\n    const healingMatch = healingRegex.test(this.strippedHtml);\n\n    // set calc flags\n    this.isAttack = matches ? matches[1] !== undefined : false;\n    this.pbToAttack = matches ? matches[4] !== undefined : false;\n    this.weaponAttack = matches\n      ? (matches[2].toLowerCase() === \"weapon\" || matches[2] === \"\")\n      : false;\n    this.spellAttack = matches ? matches[2].toLowerCase() === \"spell\" : false;\n    this.meleeAttack = matches ? matches[1].indexOf(\"Melee\") !== -1 : false;\n    this.rangedAttack = matches ? matches[1].indexOf(\"Ranged\") !== -1 : false;\n    this.healingAction = healingMatch;\n    this.toHit = matches\n      ? Number.isInteger(parseInt(matches[3]))\n        ? parseInt(matches[3])\n        : 0\n      : 0;\n    this.isRecharge = this.#matchRecharge();\n    this.templateType = this.isAttack && this.isRecharge === null ? \"weapon\" : \"feat\";\n    this.yourSpellAttackModToHit = matches ? matches[3]?.startsWith(\"your spell\") : false;\n\n    if (!this.feature) this.createBaseFeature();\n    this.#generateAdjustedName();\n\n    // if not attack set to a monster type action\n    if (!this.isAttack) foundry.utils.setProperty(this.feature, \"system.type.value\", \"monster\");\n\n  }\n\n  constructor(name, { ddbMonster, html, type, titleHTML, fullName, actionCopy, updateExisting, hideDescription } = {}) {\n\n    this.name = name.trim();\n    this.ddbMonster = ddbMonster;\n    this.type = type;\n    this.html = html ?? \"\";\n    this.titleHTML = titleHTML ?? undefined;\n    this.fullName = fullName ?? this.name;\n    this.actionCopy = actionCopy ?? false;\n\n    this.hideDescription = hideDescription ?? game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-hide-description\");\n    this.updateExisting = updateExisting ?? game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-update-existing\");\n    this.stripName = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-strip-name\");\n\n    this.prepare();\n\n    // copy source details from parent\n    if (this.ddbMonster) this.feature.system.source = this.ddbMonster.npc.system.details.source;\n\n    this.actionInfo = {\n      baseItem: null,\n      baseTool: null,\n      damage: {\n        parts: [],\n        versatile: \"\"\n      },\n      formula: \"\",\n      damageSave: {\n        dc: null,\n        ability: null\n      },\n      target: {\n        \"value\": null,\n        \"width\": null,\n        \"units\": \"\",\n        \"type\": \"\"\n      },\n      duration: {\n        \"value\": \"\",\n        \"units\": \"inst\"\n      },\n      extraAttackBonus: 0,\n      baseAbility: null,\n      proficient: false,\n      properties: {\n        \"amm\": false,\n        \"fin\": false,\n        \"fir\": false,\n        \"foc\": false,\n        \"hvy\": false,\n        \"lgt\": false,\n        \"lod\": false,\n        \"rch\": false,\n        \"rel\": false,\n        \"ret\": false,\n        \"spc\": false,\n        \"thr\": false,\n        \"two\": false,\n        \"ver\": false,\n        \"mgc\": false\n      },\n      reach: \"\",\n      range: {\n        value: null,\n        long: null,\n        units: \"\",\n      },\n      recharge: { value: null, charged: true },\n      activation: {\n        type: \"\",\n        cost: null,\n        condition: \"\"\n      },\n      save: {\n        dc: null,\n        ability: \"\",\n        scaling: \"flat\",\n      },\n      uses: {\n        value: null,\n        max: \"\",\n        per: null,\n        recovery: \"\",\n      },\n    };\n\n  }\n\n  damageModReplace(text, damageType) {\n    let result;\n    const globalDamageHints = game.settings.get(\"ddb-importer\", \"use-damage-hints\");\n    const damageHint = globalDamageHints && damageType ? `[${damageType}]` : \"\";\n    const diceParse = utils.parseDiceString(text, null, damageHint);\n    if (this.actionInfo.baseAbility) {\n      const baseAbilityMod = this.ddbMonster.abilities[this.actionInfo.baseAbility].mod;\n      const bonusMod = (diceParse.bonus && diceParse.bonus !== 0) ? diceParse.bonus - baseAbilityMod : \"\";\n      const useMod = (diceParse.bonus && diceParse.bonus !== 0) ? \" + @mod \" : \"\";\n      const reParse = utils.diceStringResultBuild(diceParse.diceMap, diceParse.dice, bonusMod, useMod, damageHint);\n      result = reParse.diceString;\n    } else {\n      result = diceParse.diceString;\n    }\n\n    return result;\n  }\n\n  // eslint-disable-next-line complexity\n  generateExtendedDamageInfo() {\n    const hitIndex = this.strippedHtml.indexOf(\"Hit:\");\n    let hit = (hitIndex > 0) ? this.strippedHtml.slice(hitIndex) : `${this.strippedHtml}`;\n    hit = hit.split(\"At the end of each\")[0].split(\"At the start of each\")[0];\n    hit = hit.replace(/[–-–−]/g, \"-\");\n    // console.warn(hit);\n    // Using match with global modifier then map to regular match because RegExp.matchAll isn't available on every browser\n    // eslint-disable-next-line no-useless-escape\n    const damageExpression = new RegExp(/((?:takes|saving throw or take\\s+)|(?:[\\w]*\\s+))(?:([0-9]+))?(?:\\s*\\(?([0-9]*d[0-9]+(?:\\s*[-+]\\s*(?:[0-9]+|PB|the spell[’']s level))*(?:\\s+plus [^\\)]+)?)\\)?)?\\s*([\\w ]*?)\\s*damage(?: when used with | if (?:used|wielded) with )?(\\s?two hands|\\s?at the start of|\\son a failed save)?/gi);\n\n    const matches = [...hit.matchAll(damageExpression)];\n    const regainExpression = new RegExp(/(regains|regain)\\s+?(?:([0-9]+))?(?: *\\(?([0-9]*d[0-9]+(?:\\s*[-+]\\s*[0-9]+)??)\\)?)?\\s+hit\\s+points/);\n    const regainMatch = hit.match(regainExpression);\n\n    logger.debug(`${this.name} Damage matches`, { hit, matches, regainMatch });\n    let versatile = false;\n    for (const dmg of matches) {\n      let other = false;\n      let thisVersatile = false;\n      let thisOther = false;\n      if (dmg[1] == \"DC \" || dmg[4] == \"hit points by this\") {\n        continue; // eslint-disable-line no-continue\n      }\n      // check for versatile\n      if (dmg[1] == \"or \" || dmg[5] == \"two hands\") {\n        versatile = true;\n      }\n      // check for other\n      if (dmg[5] && dmg[5].trim() == \"at the start of\") other = true;\n      const profBonus = dmg[3]?.includes(\" + PB\") || dmg[3]?.includes(\" plus PB\") ? \"@prof\" : \"\";\n      const levelBonus = dmg[3] && (/the spell[’']s level/i).test(dmg[3]); // ? \"@item.level\" : \"\";\n      if (levelBonus) {\n        this.levelBonus = true;\n        foundry.utils.setProperty(this, \"flags.ddbimporter.levelBonus\", true);\n      }\n      const damage = profBonus !== \"\" || levelBonus\n        ? `${dmg[2]}${dmg[3].replace(\" + PB\", \"\").replace(\" plus PB\", \"\").replace(\" + the spell’s level\", \"\").replace(\" + the spell's level\", \"\")}`\n        : dmg[3] ?? dmg[2];\n\n      // Make sure we did match a damage\n      if (damage) {\n        const includesDiceRegExp = /[0-9]*d[0-9]+/;\n        const includesDice = includesDiceRegExp.test(damage);\n        const parsedDiceDamage = (this.actionInfo && includesDice)\n          ? this.damageModReplace(damage.replace(\"plus\", \"+\"), dmg[4])\n          : damage.replace(\"plus\", \"+\");\n\n        const finalDamage = [parsedDiceDamage, profBonus].filter((t) => t !== \"\").join(\" + \");\n\n        // if this is a save based attack, and multiple damage entries, we assume any entry beyond the first is going into\n        // versatile for damage\n        // ignore if dmg[1] is and as it likely indicates the whole thing is a save\n        if ((((dmg[5] ?? \"\").trim() == \"on a failed save\" && (dmg[1] ?? \"\").trim() !== \"and\")\n            || (dmg[1] && dmg[1].includes(\"saving throw\")))\n          && this.actionInfo.damage.parts.length >= 1\n        ) {\n          other = true;\n          thisOther = true;\n        }\n        // assumption here is that there is just one field added to versatile. this is going to be rare.\n        if (other) {\n          if (this.actionInfo.formula == \"\") this.actionInfo.formula = finalDamage;\n          else this.actionInfo.formula += ` + ${finalDamage}`;\n\n          if (!thisOther && dmg[1].trim() == \"plus\") {\n            this.actionInfo.damage.versatile += ` + ${finalDamage}`;\n            this.actionInfo.damage.parts.push([finalDamage, dmg[4]]);\n          }\n        } else if (versatile) {\n          if (this.actionInfo.damage.versatile == \"\") this.actionInfo.damage.versatile = finalDamage;\n          // so things like the duergar mind master have oddity where we might want to use a different thing\n          // } else {\n          //   result.damage.versatile += ` + ${finalDamage}`;\n          // }\n          if (!thisVersatile && dmg[1].trim() == \"plus\") {\n            this.actionInfo.damage.versatile += ` + ${finalDamage}`;\n            this.actionInfo.damage.parts.push([finalDamage, dmg[4]]);\n          }\n        } else {\n          this.actionInfo.damage.parts.push([finalDamage, dmg[4]]);\n        }\n      }\n    }\n\n    if (regainMatch) {\n      const globalDamageHints = game.settings.get(\"ddb-importer\", \"use-damage-hints\");\n      const damageHint = globalDamageHints ? `[healing]` : \"\";\n      const damageValue = regainMatch[3] ? regainMatch[3] : regainMatch[2];\n      this.actionInfo.damage.parts.push([utils.parseDiceString(damageValue, null, damageHint).diceString, 'healing']);\n      this.feature.system.actionType = \"heal\";\n    }\n\n    const save = hit.match(/DC ([0-9]+) (.*?) saving throw|\\(save DC ([0-9]+)\\)/);\n    if (save) {\n      this.actionInfo.damageSave.dc = save[1];\n      this.actionInfo.damageSave.ability = save[2] ? save[2].toLowerCase().substr(0, 3) : \"\";\n    } else {\n      const escape = hit.match(/escape DC ([0-9]+)/);\n      if (escape) {\n        this.actionInfo.damageSave.dc = escape[1];\n        this.actionInfo.damageSave.ability = \"Escape\";\n      }\n    }\n  }\n\n  getAction() {\n    let action = this.type;\n    // foundry doesn't support mythic actions pre 1.6\n    if (this.type === \"mythic\") action = \"mythic\";\n    if (this.type === \"villain\") action = \"special\";\n    const actionAction = this.strippedHtml.toLowerCase().match(/as (a|an) action/);\n    const bonusAction = this.strippedHtml.toLowerCase().match(/as a bonus action/);\n    const reAction = this.strippedHtml.toLowerCase().match(/as a reaction/);\n    // e.g. mephit death\n    const specialDie = this.strippedHtml.toLowerCase().match(/dies/);\n    if (bonusAction) {\n      action = \"bonus\";\n    } else if (reAction) {\n      action = \"reaction\";\n    } else if (specialDie) {\n      action = \"special\";\n    } else if (actionAction) {\n      action = \"action\";\n    }\n    return action;\n  }\n\n  getUses(name = false) {\n    let uses = {\n      value: null,\n      max: \"\",\n      per: null,\n      recovery: \"\",\n    };\n\n    const usesSearch = name ? /(\\d+)\\/(\\w+)\\)/ : /\\((\\d+)\\/(\\w+)\\)/;\n    const matchString = name\n      ? this.titleHTML\n        ? this.titleHTML\n        : this.name\n      : this.strippedHtml;\n    const usesMatch = matchString.match(usesSearch);\n    // console.log(usesMatch);\n    if (usesMatch && usesMatch[2].toLowerCase() !== \"turn\") {\n      uses.value = Number.parseInt(usesMatch[1]);\n      uses.max = usesMatch[1];\n      uses.per = \"day\";\n      const perMatch = DICTIONARY.monsters.resets.find((reset) => reset.id === usesMatch[2]);\n      if (perMatch) uses.per = perMatch.value;\n    } else {\n      const shortLongRegex = (/Recharges after a (Short or Long|Long) Rest/i);\n      const rechargeMatch = matchString.match(shortLongRegex);\n      if (rechargeMatch) {\n        uses.per = rechargeMatch[1] === \"Long\" ? \"lr\" : \"sr\";\n        uses.value = 1;\n        uses.max = 1;\n      }\n    }\n\n    return uses;\n  }\n\n  #matchRecharge() {\n    const matches = this.fullName.toLowerCase().match(/(?:\\(|; )recharge ([0-9––−-]+)\\)/);\n    return matches;\n  }\n\n  getRecharge() {\n    const matches = this.isRecharge;\n    if (matches) {\n      const value = matches[1].replace(/[––−-]/, \"-\").split(\"-\").shift();\n      return {\n        value: parseInt(value),\n        charged: true\n      };\n    }\n\n    return {\n      value: null,\n      charged: false\n    };\n  }\n\n  getActivation() {\n    const matches = this.strippedHtml.match(/\\(costs ([0-9]+) actions\\)/i);\n    if (matches) return parseInt(matches[1]);\n    const nameMatch = this.name.match(/\\(costs ([0-9]+) actions\\)/i);\n    if (nameMatch) return parseInt(nameMatch[1]);\n    return null;\n  }\n\n  getFeatSave() {\n    const saveSearch = /DC (\\d+) (\\w+) (saving throw|check)/i;\n    const match = this.strippedHtml.match(saveSearch);\n    if (match) {\n      this.actionInfo.save.dc = parseInt(match[1]);\n      this.actionInfo.save.ability = match[2].toLowerCase().substr(0, 3);\n      this.actionInfo.save.scaling = \"flat\";\n    } else {\n      const saveSelfSearch = /(\\w+) saving throw against your spell save DC/i;\n      const selfMatch = this.strippedHtml.match(saveSelfSearch);\n      if (selfMatch) {\n        this.feature.system.actionType = \"save\";\n        this.actionInfo.save.dc = 10;\n        this.actionInfo.save.ability = selfMatch[1].toLowerCase().substr(0, 3);\n        this.actionInfo.save.scaling = \"flat\";\n      }\n    }\n\n    const halfSaveSearch = /or half as much damage on a successful one/i;\n    const halfMatch = this.strippedHtml.match(halfSaveSearch);\n    if (halfMatch) {\n      if (this.isAttack) {\n        foundry.utils.setProperty(this.feature, \"flags.midiProperties.otherSaveDamage\", \"halfdam\");\n      } else {\n        // foundry.utils.setProperty(this.feature, \"flags.midiProperties.halfdam\", true);\n        foundry.utils.setProperty(this.feature, \"flags.midiProperties.saveDamage\", \"halfdam\");\n      }\n    }\n\n    return this.actionInfo.save;\n  }\n\n  getReach() {\n    const reachSearch = /reach\\s*(\\s*\\d+\\s*)\\s*ft/;\n    const match = this.strippedHtml.match(reachSearch);\n    if (match) {\n      return match[1];\n    }\n    return \"\";\n  }\n\n  getRange() {\n    let range = {\n      value: null,\n      long: null,\n      units: \"\",\n    };\n\n    const rangeSearch1 = /range\\s*(\\d+)\\s*\\/\\s*(\\d+)\\s*ft/;\n    const rangeSearch2 = /range\\s*(\\d+)\\s*ft[.]*\\s*\\/\\s*(\\d+)\\s*ft/;\n    const rangeSearch3 = /range\\s*(\\d+)\\s*(:?ft|feet)/;\n    const reachSearch = /reach\\s*(\\d+)\\s*(:?ft|feet)/;\n    const withinSearch = /within\\s*(\\d+)\\s*(:?ft|feet)/;\n\n    const matches1 = this.strippedHtml.match(rangeSearch1);\n    const matches2 = this.strippedHtml.match(rangeSearch2);\n    const matches3 = this.strippedHtml.match(rangeSearch3);\n    const reachMatch = this.strippedHtml.match(reachSearch);\n    const withinMatch = this.strippedHtml.match(withinSearch);\n\n    if (matches1) {\n      range.value = parseInt(matches1[1]);\n      range.long = parseInt(matches1[2]);\n      range.units = \"ft\";\n    } else if (matches2) {\n      range.value = parseInt(matches2[1]);\n      range.long = parseInt(matches2[2]);\n      range.units = \"ft\";\n    } else if (matches3) {\n      range.value = parseInt(matches3[1]);\n      range.units = \"ft\";\n    } else if (reachMatch) {\n      range.value = parseInt(reachMatch[1]);\n      range.units = \"ft\";\n    } else if (withinMatch) {\n      range.value = parseInt(withinMatch[1]);\n      range.units = \"ft\";\n    }\n\n    return range;\n  }\n\n  checkAbility(abilitiesToCheck) {\n    let result = {\n      success: false,\n      ability: null,\n      proficient: null\n    };\n\n    for (const ability of abilitiesToCheck) {\n      if (this.toHit == this.ddbMonster.proficiencyBonus + this.ddbMonster.abilities[ability].mod) {\n        result.success = true;\n        result.ability = ability;\n        result.proficient = true;\n        break;\n      } else if (result.toHit == this.ddbMonster.abilities[ability].mod) {\n        result.success = true;\n        result.ability = ability;\n        result.proficient = false;\n        break;\n      }\n    }\n\n    return result;\n  }\n\n  checkAbilities(abilitiesToCheck, negatives = false) {\n    const results = abilitiesToCheck.map((ability) => {\n      let result = {\n        success: false,\n        ability,\n        proficient: null,\n        bonus: 0\n      };\n      if (this.toHit > this.ddbMonster.proficiencyBonus + this.ddbMonster.abilities[ability].mod) {\n        result.success = true;\n        result.proficient = true;\n        result.bonus = this.toHit - this.ddbMonster.proficiencyBonus - this.ddbMonster.abilities[ability].mod;\n      } else if (result.toHit > this.ddbMonster.abilities[ability].mod) {\n        result.success = true;\n        result.proficient = false;\n        result.bonus = this.toHit - this.ddbMonster.abilities[ability].mod;\n      } else if (negatives) {\n        result.success = true;\n        result.proficient = false;\n        result.bonus = this.toHit - this.ddbMonster.abilities[ability].mod;\n      }\n      return result;\n    });\n\n    return results;\n  }\n\n  // eslint-disable-next-line complexity\n  generateWeaponAttackInfo() {\n    const abilities = [\"str\", \"dex\", \"int\", \"wis\", \"cha\", \"con\"];\n    let initialAbilities = [];\n    let weaponAbilities = [\"str\", \"dex\"];\n    let spellAbilities = [\"cha\", \"wis\", \"int\"];\n\n    const lookup = DICTIONARY.monsters.weapons.find((weapon) => this.name.startsWith(weapon.name));\n    // we have a weapon name match so we can infer a bit more\n    if (lookup) {\n      for (const [key, value] of Object.entries(lookup.properties)) {\n        // logger.info(`${key}: ${value}`);\n        this.actionInfo.properties[key] = value;\n      }\n      const versatileWeapon = this.actionInfo.properties.ver && this.ddbMonster.abilities['dex'].mod > this.ddbMonster.abilities['str'].mod;\n      if (versatileWeapon || lookup.actionType == \"rwak\") {\n        weaponAbilities = [\"dex\"];\n      } else if (lookup.actionType == \"mwak\") {\n        weaponAbilities = [\"str\"];\n      }\n      this.actionInfo.weaponType = lookup.weaponType;\n    } else if (this.meleeAttack) {\n      this.actionInfo.weaponType = \"simpleM\";\n    } else if (this.rangedAttack) {\n      this.actionInfo.weaponType = \"simpleR\";\n    }\n\n    if (this.strippedHtml.includes(\"is a magic weapon attack\")) {\n      this.actionInfo.properties[\"mgc\"] = true;\n      foundry.utils.setProperty(this.feature, \"flags.midiProperties.magicdam\", true);\n    }\n\n    if (this.spellAttack) {\n      initialAbilities = spellAbilities;\n    } else if (this.weaponAttack) {\n      initialAbilities = weaponAbilities;\n    } else {\n      initialAbilities = abilities;\n    }\n\n    // force companions to null and proficient\n    if (this.yourSpellAttackModToHit) {\n      this.actionInfo.baseAbility = null;\n      this.actionInfo.proficient = true;\n    } else if (this.weaponAttack || this.spellAttack) {\n      // check most likely initial attacks - str and dex based weapon, mental for spell\n      const checkInitialAbilities = this.checkAbility(initialAbilities);\n      if (checkInitialAbilities.success) {\n        this.actionInfo.baseAbility = checkInitialAbilities.ability;\n        this.actionInfo.proficient = checkInitialAbilities.proficient;\n      }\n\n      // okay lets see if its one of the others then!\n      if (!this.actionInfo.baseAbility) {\n        const checkAllAbilities = this.checkAbility(abilities);\n        if (checkAllAbilities.success) {\n          this.actionInfo.baseAbility = checkAllAbilities.ability;\n          this.actionInfo.proficient = checkAllAbilities.proficient;\n        }\n      }\n\n      // okay, some oddity, maybe magic bonus, lets calculate one!\n      // we are going to assume it's dex or str based.\n      if (!this.actionInfo.baseAbility) {\n        const magicAbilities = this.checkAbilities(initialAbilities);\n\n        const filteredAbilities = magicAbilities.filter((ab) => ab.success == true).sort((a, b) => {\n          if (a.proficient == !b.proficient) return -1;\n          if (b.proficient == !a.proficient) return 1;\n          if (a.proficient == b.proficient) {\n            if (a.bonus > b.bonus) return 1;\n            if (b.bonus > a.bonus) return -1;\n          }\n          return 0;\n        });\n\n        // fine lets use the first hit\n        if (filteredAbilities.length >= 1 && filteredAbilities[0].success) {\n          this.actionInfo.baseAbility = filteredAbilities[0].ability;\n          this.actionInfo.proficient = filteredAbilities[0].proficient;\n          this.actionInfo.extraAttackBonus = filteredAbilities[0].bonus;\n        }\n      }\n\n      // negative mods!\n      if (!this.actionInfo.baseAbility) {\n        logger.info(`Negative ability parse for ${this.ddbMonster.npc.name}, to hit ${this.toHit} with ${this.name}`);\n\n        const magicAbilities = this.checkAbilities(initialAbilities, true);\n\n        const filteredAbilities = magicAbilities.filter((ab) => ab.success == true).sort((a, b) => {\n          if (a.proficient == !b.proficient) return -1;\n          if (b.proficient == !a.proficient) return 1;\n          if (a.proficient == b.proficient) {\n            if (a.bonus < b.bonus) return 1;\n            if (b.bonus < a.bonus) return -1;\n          }\n          return 0;\n        });\n        logger.debug(\"Filtered abilities\", { filteredAbilities, html: this.strippedHtml });\n        // fine lets use the first hit\n        if (filteredAbilities.length >= 1 && filteredAbilities[0].success) {\n          this.actionInfo.baseAbility = filteredAbilities[0].ability;\n          this.actionInfo.proficient = filteredAbilities[0].proficient;\n          this.actionInfo.extraAttackBonus = filteredAbilities[0].bonus;\n        } else {\n          logger.error(\"Unable to calculate attack!\", { filteredAbilities, html: this.strippedHtml, ddbFeature: this });\n        }\n      }\n    }\n  }\n\n  getTarget() {\n    let target = {\n      value: null,\n      width: null,\n      units: \"\",\n      type: \"\"\n    };\n\n    // 90-foot line that is 10 feet wide\n    // in a 90-foot cone\n    const matchText = this.strippedHtml.replace(/[­––−-]/gu, \"-\").replace(/-+/g, \"-\");\n    // console.warn(matchText);\n    const lineSearch = /(\\d+)-foot line|line that is (\\d+) feet/;\n    const coneSearch = /(\\d+)-foot cone/;\n    const cubeSearch = /(\\d+)-foot cube/;\n    const sphereSearch = /(\\d+)-foot-radius sphere/;\n\n    const coneMatch = matchText.match(coneSearch);\n    const lineMatch = matchText.match(lineSearch);\n    const cubeMatch = matchText.match(cubeSearch);\n    const sphereMatch = matchText.match(sphereSearch);\n\n    if (coneMatch) {\n      target.value = parseInt(coneMatch[1]);\n      target.units = \"ft\";\n      target.type = \"cone\";\n    } else if (lineMatch) {\n      target.value = parseInt(lineMatch[1] ?? lineMatch[2]);\n      target.units = \"ft\";\n      target.type = \"line\";\n    } else if (cubeMatch) {\n      target.value = parseInt(cubeMatch[1]);\n      target.units = \"ft\";\n      target.type = \"cube\";\n    } else if (sphereMatch) {\n      target.value = parseInt(sphereMatch[1]);\n      target.units = \"ft\";\n      target.type = \"sphere\";\n    }\n\n    if (target.type === \"\" && this.healingAction) {\n      target.type = \"self\";\n    }\n\n    return target;\n  }\n\n  #getHiddenDescription() {\n    const nameChoice = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-hide-description-choice\");\n    const hideItemName = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-hide-item-name\");\n    let actorDescriptor = `[[lookup @name]]`;\n\n    if (nameChoice === \"TYPE\") {\n      actorDescriptor = `[[lookup @details.type.config.label]]`;\n    } else if (nameChoice === \"MONSTER\") {\n      actorDescriptor = \"Monster\";\n    } else if (nameChoice === \"NPC\") {\n      actorDescriptor = \"NPC\";\n    }\n\n    let description = `<section class=\"secret\">\\n${this.html}`;\n    if ([\"rwak\", \"mwak\"].includes(this.feature.system.actionType)) {\n      const featureName = hideItemName ? \"\" : ` with its [[lookup @item.name]]`;\n      description += `\\n</section>\\nThe ${actorDescriptor} attacks${featureName}.`;\n    } else if ([\"rsak\", \"msak\"].includes(this.feature.system.actionType)) {\n      const featureName = hideItemName ? \"a spell\" : \"[[lookup @item.name]]\";\n      description += `\\n</section>\\nThe ${actorDescriptor} casts ${featureName}.`;\n    } else if ([\"save\"].includes(this.feature.system.actionType)) {\n      const featureName = hideItemName ? \"a feature\" : \"[[lookup @item.name]]\";\n      description += `\\n</section>\\nThe ${actorDescriptor} uses ${featureName} and a save is required.`;\n    } else {\n      description += `\\n</section>\\nThe ${actorDescriptor} uses ${hideItemName ? \"a feature\" : \"[[lookup @item.name]]\"}.`;\n    }\n    return description;\n  }\n\n  async #generateDescription() {\n    let description = this.hideDescription ? this.#getHiddenDescription() : `${this.html}`;\n    description = description.replaceAll(\"<em><strong></strong></em>\", \"\");\n    description = parseDamageRolls({ text: description, document: this.feature, actor: this.ddbMonster.npc });\n    // description = parseToHitRoll({ text: description, document: this.feature });\n    description = parseTags(description);\n    this.feature.system.description.value = await generateTable(this.ddbMonster.npc.name, description, this.updateExisting);\n    this.feature.system.description.value = `<div class=\"ddb\">\n${this.feature.system.description.value}\n</div>`;\n  }\n\n  #buildAction() {\n    if (Number.isInteger(this.actionInfo.activation)) {\n      this.feature.system.activation.cost = this.actionInfo.activation;\n      this.feature.system.consume.amount = this.actionInfo.activation;\n    } else {\n      this.feature.system.activation.cost = 1;\n    }\n    this.feature.system.activation.type = this.getAction();\n\n    this.feature.system.recharge = this.actionInfo.recharge;\n    this.feature.system.save = this.actionInfo.save;\n    // assumption - if we have parsed a save dc set action type to save\n    if (this.feature.system.save.dc && !this.isAttack) {\n      this.feature.system.actionType = \"save\";\n    }\n\n    this.feature.system.damage = this.actionInfo.damage;\n    this.feature.system.formula = this.actionInfo.formula;\n    for (const [key, value] of Object.entries(this.actionInfo.properties)) {\n      if (value) this.feature.system.properties.push(key);\n    }\n    this.feature.system.proficient = this.actionInfo.proficient;\n    this.feature.system.ability = this.actionInfo.baseAbility;\n    this.feature.system.attack.bonus = `${this.actionInfo.extraAttackBonus}`;\n\n    if (this.weaponAttack) {\n      if (this.templateType !== \"feat\") {\n        this.feature.system.type.value = this.actionInfo.weaponType;\n        this.feature.system.equipped = true;\n      }\n      // console.log(actionInfo.weaponAttack);\n      // console.log(actionInfo.meleeAttack);\n      // console.log(actionInfo.rangedAttack);\n      if (this.meleeAttack) {\n        this.feature.system.actionType = \"mwak\";\n      } else if (this.rangedAttack) {\n        this.feature.system.actionType = \"rwak\";\n      }\n    } else if (this.spellAttack) {\n      if (this.meleeAttack) {\n        this.feature.system.actionType = \"msak\";\n      } else if (this.rangedAttack) {\n        this.feature.system.actionType = \"rsak\";\n      } else {\n        this.feature.system.actionType = \"save\";\n      }\n      if (this.templateType === \"feat\") {\n        this.feature.system.equipped = true;\n      }\n      foundry.utils.setProperty(this.feature, \"flags.midiProperties.magicdam\", true);\n      foundry.utils.setProperty(this.feature, \"flags.midiProperties.magiceffect\", true);\n      this.feature.system.properties.mgc = true;\n    } else if (this.actionInfo.save.dc) {\n      this.feature.system.actionType = \"save\";\n    }\n\n    this.feature.system.range = this.actionInfo.range;\n    this.feature.system.target = this.actionInfo.target;\n    this.feature.system.duration = this.actionInfo.duration;\n    this.feature.system.uses = this.actionInfo.uses;\n\n    if (this.name.includes(\"/Day\")) {\n      this.feature.system.uses = this.getUses(true);\n    }\n\n    return this.feature;\n  }\n\n  #buildLair() {\n    if (this.feature.name.trim() === \"Lair Actions\") {\n      this.feature.system.activation.cost = 1;\n    }\n    return this.feature;\n  }\n\n  #buildLegendary() {\n    // for the legendary actions feature itself we don't want to do most processing\n    if (this.name === \"Legendary Actions\") {\n      this.feature.system.activation.type = \"\";\n      return;\n    }\n\n    this.feature.system.activation.type = \"legendary\";\n\n    this.feature.system.consume = {\n      type: \"attribute\",\n      target: \"resources.legact.value\",\n      amount: 1\n    };\n\n    if (Number.isInteger(this.actionInfo.activation)) {\n      this.feature.system.activation.cost = this.actionInfo.activation;\n      this.feature.system.consume.amount = this.actionInfo.activation;\n    } else {\n      this.feature.system.activation.cost = 1;\n    }\n\n    // only attempt to update these if we don't parse an action\n    // most legendary actions are just do x thing, where thing is an existing action\n    // these have been copied from the existing actions so we don't change\n    if (!this.feature.flags.monsterMunch.actionCopy) {\n      this.feature.system.recharge = this.actionInfo.recharge;\n      this.feature.system.save = this.actionInfo.save;\n      // assumption - if we have parsed a save dc set action type to save\n      if (this.feature.system.save.dc) {\n        this.feature.system.actionType = \"save\";\n      // action.type = \"weapon\";\n      }\n      this.feature.system.range = this.actionInfo.range;\n      this.feature.system.target = this.actionInfo.target;\n      this.feature.system.damage = this.actionInfo.damage;\n\n      if (!this.feature.system.actionType && !this.isAttack && this.feature.system.damage.parts.length > 0) {\n        this.feature.system.actionType = \"other\";\n      }\n    }\n\n  }\n\n  #buildSpecial() {\n    this.feature.system.activation.type = this.getAction();\n    if (Number.isInteger(this.actionInfo.activation)) {\n      this.feature.system.activation.cost = this.actionInfo.activation;\n      this.feature.system.consume.amount = this.actionInfo.activation;\n    } else if (this.feature.system.activation.type !== \"\") {\n      this.feature.system.activation.cost = 1;\n    }\n\n    this.feature.system.uses = this.actionInfo.uses;\n    this.feature.system.recharge = this.actionInfo.recharge;\n    this.feature.system.save = this.actionInfo.save;\n    this.feature.system.target = this.actionInfo.target;\n    // assumption - if we have parsed a save dc set action type to save\n    if (this.feature.system.save.dc) {\n      this.feature.system.actionType = \"save\";\n    }\n    this.feature.system.damage = this.actionInfo.damage;\n    // assumption - if the action type is not set but there is damage, the action type is other\n    if (!this.feature.system.actionType && this.feature.system.damage.parts.length != 0) {\n      this.feature.system.actionType = \"other\";\n    }\n\n    // legendary resistance check\n    const resistanceMatch = this.name.match(/Legendary Resistance \\((\\d+)\\/Day/i);\n    if (resistanceMatch) {\n      this.feature.system.activation.type = \"special\";\n      this.feature.system.activation.cost = null;\n      this.feature.system.consume = {\n        type: \"attribute\",\n        target: \"resources.legres.value\",\n        amount: 1\n      };\n    }\n\n    // if this special action has nothing to do, then we remove the activation type\n    if (this.feature.system.actionType === null\n      && (this.feature.system.uses.value === null || this.feature.system.uses.value === 0)\n      && this.feature.system.recharge.value === null\n    ) {\n      this.feature.system.activation = {\n        cost: null,\n        type: \"\",\n        condition: \"\",\n      };\n    }\n  }\n\n  #buildVillain() {\n    this.feature.system.activation.type = this.getAction();\n\n    if (this.name !== \"Villain Actions\") {\n      this.feature.system.uses = {\n        value: 1,\n        max: \"1\",\n        per: \"sr\",\n        recovery: \"\",\n      };\n    }\n\n    this.feature.system.save = this.actionInfo.save;\n    this.feature.system.target = this.actionInfo.target;\n    // assumption - if we have parsed a save dc set action type to save\n    if (this.feature.system.save.dc) {\n      this.feature.system.actionType = \"save\";\n    }\n    this.feature.system.damage = this.actionInfo.damage;\n    // assumption - if the action type is not set but there is damage, the action type is other\n    if (!this.feature.system.actionType && this.feature.system.damage.parts.length != 0) {\n      this.feature.system.actionType = \"other\";\n    }\n\n  }\n\n  #generateActionInfo() {\n    if (this.weaponAttack || this.spellAttack) {\n      this.generateWeaponAttackInfo();\n    }\n    this.generateExtendedDamageInfo();\n\n    this.actionInfo.reach = this.getReach();\n    this.actionInfo.range = this.getRange();\n    // On hindsight, reach is a weapon property, and probably shouldn't be present on most features\n    // it gets copied over to weapons elsewhere.\n    // if (this.actionInfo.reach != \"\" && Number.parseInt(this.actionInfo.reach) > 5) {\n    //   this.actionInfo.properties.rch = true;\n    // }\n    this.actionInfo.recharge = this.getRecharge();\n    this.actionInfo.activation = this.getActivation();\n    this.actionInfo.save = this.getFeatSave();\n    this.actionInfo.target = this.getTarget();\n    this.actionInfo.uses = this.getUses();\n  }\n\n  #linkResourcesConsumption() {\n    logger.debug(`Resource linking for ${this.name}`);\n\n    if (foundry.utils.getProperty(this.feature, \"system.recharge.value\")) {\n      foundry.utils.setProperty(this.feature, \"system.consume.type\", \"charges\");\n      foundry.utils.setProperty(this.feature, \"system.consume.target\", this.feature._id);\n      foundry.utils.setProperty(this.feature, \"system.consume.amount\", null);\n    }\n  }\n\n  async parse() {\n    this.#generateActionInfo();\n    switch (this.type) {\n      case \"action\":\n      case \"mythic\":\n      case \"reaction\":\n      case \"bonus\":\n        this.#buildAction();\n        break;\n      case \"lair\":\n        this.#buildLair();\n        break;\n      case \"legendary\":\n        this.#buildLegendary();\n        break;\n      case \"villain\":\n        this.#buildVillain();\n        break;\n      case \"special\":\n        this.#buildSpecial();\n        break;\n      default:\n        logger.error(`Unknown action parsing type ${this.type}`, { DDBFeature: this });\n        throw new Error(`Unknown action parsing type ${this.type}`);\n    }\n\n    foundry.utils.setProperty(this.feature, \"flags.monsterMunch.actionInfo.damage\", this.actionInfo.damage);\n    foundry.utils.setProperty(this.feature, \"flags.monsterMunch.actionInfo.baseAbility\", this.actionInfo.baseAbility);\n    foundry.utils.setProperty(this.feature, \"flags.monsterMunch.actionInfo.toHit\", this.toHit);\n    foundry.utils.setProperty(this.feature, \"flags.monsterMunch.actionInfo.baseAbility\", this.actionInfo.baseAbility);\n    foundry.utils.setProperty(this.feature, \"flags.monsterMunch.actionInfo.proficient\", this.actionInfo.proficient);\n    foundry.utils.setProperty(this.feature, \"flags.monsterMunch.actionInfo.extraAttackBonus\", this.actionInfo.extraAttackBonus);\n\n    await this.#generateDescription();\n    this.#linkResourcesConsumption();\n\n    logger.debug(`Parsed Feature ${this.name} for ${this.ddbMonster.name}`, { feature: this });\n\n  }\n\n}\n","import utils from \"../../../lib/utils.js\";\nimport logger from \"../../../logger.js\";\nimport DDBMonsterFeature from \"./DDBMonsterFeature.js\";\n\nexport default class DDBMonsterFeatureFactory {\n\n  // some monsters now have [rollable] tags - if these exist we need to parse them out\n  // in the future we may be able to use them, but not consistent yet\n  static replaceRollable(text) {\n    const rollableRegex = new RegExp(/(\\[rollable\\])([^;]*);(.*)(\\[\\/rollable\\])/g);\n    return text.replaceAll(rollableRegex, \"$2\");\n  }\n\n  constructor({ ddbMonster, hideDescription, updateExisting } = {}) {\n    this.ddbMonster = ddbMonster;\n\n    this.hideDescription = hideDescription;\n    this.updateExisting = updateExisting;\n\n    this.featureBlocks = {\n      action: [],\n      reaction: [],\n      bonus: [],\n      mythic: [],\n      lair: [],\n      legendary: [],\n      special: [],\n      villain: [],\n    };\n\n    this.features = {\n      action: [],\n      reaction: [],\n      bonus: [],\n      mythic: [],\n      lair: [],\n      legendary: [],\n      special: [],\n      villain: [],\n    };\n\n    this.characterDescription = {\n      action: \"\",\n      reaction: \"\",\n      bonus: \"\",\n      mythic: \"\",\n      lair: \"\",\n      legendary: \"\",\n      special: \"\",\n      villain: \"\",\n      unexpected: null,\n    };\n\n    this.html = {\n      action: \"\",\n      reaction: \"\",\n      bonus: \"\",\n      mythic: \"\",\n      lair: \"\",\n      legendary: \"\",\n      special: \"\",\n      villain: \"\",\n    };\n\n    this.resources = {\n      legendary: {\n        value: 3,\n        max: 3\n      },\n      lair: {\n        value: false,\n        initiative: null\n      },\n      resistance: {\n        value: 0,\n        max: 0\n      },\n    };\n\n    this.resistance = {};\n  }\n\n  getFeatures(type) {\n    return this.features[type].map((feature) => foundry.utils.deepClone(feature.feature));\n  }\n\n  get actions() {\n    return this.getFeatures(\"action\");\n  }\n\n  get reactions() {\n    return this.getFeatures(\"reaction\");\n  }\n\n  get bonus() {\n    return this.getFeatures(\"bonus\");\n  }\n\n  get mythic() {\n    return this.getFeatures(\"mythic\");\n  }\n\n  get lair() {\n    return this.getFeatures(\"lair\");\n  }\n\n  get legendary() {\n    return this.getFeatures(\"legendary\");\n  }\n\n  get special() {\n    return this.getFeatures(\"special\");\n  }\n\n  get villain() {\n    return this.getFeatures(\"villain\");\n  }\n\n  #buildDom(type) {\n    const dom = utils.htmlToDocumentFragment(this.html[type]);\n    dom.childNodes.forEach((node) => {\n      if (node.textContent == \"\\n\" || node.textContent == \"\\r\\n\") {\n        dom.removeChild(node);\n      }\n    });\n    return dom;\n  }\n\n  static EM_STRONG_EXCEPTIONS = [\n    \"Yeenoghu\",\n  ];\n\n  #generateActionActions(type) {\n    let splitActions1 = this.html[type].split(\"<h3>Roleplaying Information</h3>\");\n    if (splitActions1.length > 1) {\n      this.characterDescription[type] = `<h3>Roleplaying Information</h3>${splitActions1[1]}`;\n    }\n    const splitActions2 = splitActions1[0].split(\"<h3>Villain Actions</h3>\");\n    if (splitActions2.length > 1) {\n      this.html.villain = splitActions2[1];\n    }\n\n    this.html[type] = splitActions2[0];\n\n    let dom = this.#buildDom(type);\n\n    // build out skeleton actions\n    dom.querySelectorAll(\"p\").forEach((node) => {\n      const pDom = utils.htmlToDocumentFragment(node.outerHTML);\n      const query = pDom.querySelector(\"em strong\") ?? pDom.querySelector(\"strong em\");\n      if (!query) return;\n      let name = query.textContent.trim().replace(/\\./g, '');\n      name = DDBMonsterFeatureFactory.splitName(name, node.textContent);\n      const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type, titleHTML: query.outerHTML, fullName: query.textContent } };\n      this.featureBlocks[type].push(action);\n    });\n\n    // there is inconsistent formatting\n    if (this.featureBlocks[type].length == 0) {\n      dom.querySelectorAll(\"p\").forEach((node) => {\n        const pDom = utils.htmlToDocumentFragment(node.outerHTML);\n        const query = pDom.querySelector(\"strong\");\n        if (!query) return;\n        let name = query.textContent.trim().replace(/\\./g, '');\n        name = DDBMonsterFeatureFactory.splitName(name, node.textContent);\n        const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type, titleHTML: query.outerHTML, fullName: query.textContent } };\n        this.featureBlocks[type].push(action);\n      });\n    }\n\n    // there is inconsistent formatting\n    if (this.featureBlocks[type].length == 0) {\n      dom.querySelectorAll(\"p\").forEach((node) => {\n        const pDom = utils.htmlToDocumentFragment(node.outerHTML);\n        const query = pDom.querySelector(\"b\");\n        if (!query) return;\n        let name = query.textContent.trim().replace(/\\./g, '');\n        name = DDBMonsterFeatureFactory.splitName(name, node.textContent);\n        const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type, titleHTML: query.outerHTML, fullName: query.textContent } };\n        this.featureBlocks[type].push(action);\n      });\n    }\n\n\n    // there is inconsistent formatting\n    if (this.featureBlocks[type].length == 0) {\n      dom.querySelectorAll(\"p\").forEach((node) => {\n        const pDom = utils.htmlToDocumentFragment(node.outerHTML);\n        const title = pDom.textContent.split('.')[0];\n        const name = title.trim();\n        if (name && name.length > 0) {\n          const titleHTML = pDom.outerHTML ? pDom.outerHTML.split('.')[0] : undefined;\n          const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type, titleHTML } };\n          this.featureBlocks[type].push(action);\n        }\n      });\n    }\n\n    // homebrew fun\n    if (this.featureBlocks[type].length == 0) {\n      dom.querySelectorAll(\"div\").forEach((node) => {\n        const pDom = utils.htmlToDocumentFragment(node.outerHTML);\n        const title = pDom.textContent.split('.')[0];\n        const name = title.trim();\n        if (name && name.length > 0) {\n          const titleHTML = pDom.outerHTML ? pDom.outerHTML.split('.')[0] : undefined;\n          const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type, titleHTML } };\n          this.featureBlocks[type].push(action);\n        }\n      });\n    }\n\n    let action = this.featureBlocks[type][0];\n\n    dom.childNodes.forEach((node) => {\n      const nodeContextSplit = node.textContent.split('.');\n      const nodeName = nodeContextSplit[0].trim();\n      const longNodeName = (nodeContextSplit.length > 2 && nodeContextSplit[1].trim().startsWith('('))\n        ? `${nodeName} ${nodeContextSplit[1].trim()}`\n        : nodeName;\n      let switchAction = this.featureBlocks[type].find((act) => nodeName === act.name || longNodeName === act.name);\n\n      if (!switchAction) {\n        switchAction = this.featureBlocks[type].find((act) =>\n          act.options?.fullName\n          && node.textContent.startsWith(act.options.fullName)\n        );\n      }\n      let startFlag = false;\n      if (switchAction) {\n        action = switchAction;\n        if (action.options.html === \"\") {\n          startFlag = true;\n        }\n      }\n\n      if (!action) return;\n\n      if (node.outerHTML) {\n        let outerHTML = `${node.outerHTML}`;\n        if (switchAction && startFlag) {\n          const replaceName = foundry.utils.getProperty(action, \"fullName\") ?? nodeName;\n          outerHTML = outerHTML.replace(replaceName, \"\");\n          const titleDom = utils.htmlToDocumentFragment(outerHTML);\n          if (titleDom.textContent.startsWith(\".\")) outerHTML = outerHTML.replace(\".\", \"\");\n        }\n        action.options.html += outerHTML;\n      }\n    });\n  }\n\n  #generateLairActions(type = \"lair\") {\n    let dom = this.#buildDom(type);\n\n    const defaultAction = { name: \"Lair Actions\", options: { html: \"\", ddbMonster: this.ddbMonster, type } };\n    this.featureBlocks[type].push(defaultAction);\n\n    dom.querySelectorAll(\"h4\").forEach((node) => {\n      const name = node.textContent.trim();\n      if (name !== \"\") {\n        const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type } };\n        if (node.textContent == \"Lair Actions\" || node.textContent == \"\") {\n          return;\n        }\n        this.featureBlocks[type].push(action);\n      }\n    });\n\n    dom.querySelectorAll(\"h3\").forEach((node) => {\n      const name = node.textContent.trim();\n      if (name !== \"\") {\n        const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type } };\n        if (node.textContent == \"Lair Actions\" || action.name == \"\") {\n          return;\n        }\n        this.featureBlocks[type].push(action);\n      }\n    });\n\n    let actionType = \"Lair Actions\";\n    let action = this.featureBlocks[type].find((act) => act.name == actionType);\n\n    if (!action) {\n      action = this.featureBlocks[type][0];\n    }\n\n    dom.childNodes.forEach((node) => {\n      // const switchAction = dynamicActions.find((act) => act.name == node.textContent);\n      const nodeName = node.textContent.split('.')[0].trim();\n      const switchAction = this.featureBlocks[type].find((act) => nodeName === act.name);\n      let startFlag = false;\n      if (switchAction) {\n        actionType = node.textContent;\n        action = switchAction;\n        if (action.options.html === \"\") startFlag = true;\n      }\n      if (node.outerHTML) {\n        let outerHTML = node.outerHTML;\n        if (switchAction && startFlag) {\n          outerHTML = outerHTML.replace(`${nodeName}.`, \"\");\n        }\n        action.options.html += outerHTML;\n      }\n\n      const initiativeMatch = node.textContent.match(/initiative count (\\d+)/);\n      if (initiativeMatch) {\n        this.resources.lair = {\n          value: true,\n          initiative: parseInt(initiativeMatch[1]),\n        };\n      }\n    });\n  }\n\n  #generateLegendaryActions(type) {\n    let dom = this.#buildDom(type);\n\n    // Base feat\n    const feat = { name: \"Legendary Actions\", options: { html: \"\", ddbMonster: this.ddbMonster, type, actionCopy: false } };\n    feat.options.html = `${this.html[type]}`;\n    this.featureBlocks[type].push(feat);\n\n\n    // build out skeleton actions\n    dom.querySelectorAll(\"strong\").forEach((node) => {\n      const name = node.textContent.trim().replace(/\\.$/, '').trim();\n      const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type, actionCopy: false } };\n\n      const actionMatch = this.features[\"action\"].concat(\n        this.features.reaction,\n        this.features.reaction,\n        this.features.bonus,\n      ).find((mstAction) =>\n        name == mstAction.name\n        || name == `${mstAction.name} Attack`\n        || name == `${mstAction.name}`.split('(', 1)[0].trim()\n        || name == `${mstAction.name} Attack`.split('(', 1)[0].trim()\n      );\n\n      if (actionMatch) {\n        const dupFeature = new DDBMonsterFeature(name, { ddbMonster: this.ddbMonster, html: actionMatch.html, type, actionCopy: true });\n        dupFeature.feature = foundry.utils.duplicate(actionMatch.feature);\n        dupFeature.feature._id = foundry.utils.randomID();\n        dupFeature.feature.name = action.name; // fix up name to make sure things like Attack are included\n        this.features[type].push(dupFeature);\n        action.options.actionCopy = true;\n      }\n      this.featureBlocks[type].push(action);\n\n    });\n\n    let action = this.featureBlocks[type].find((act) => act.name == \"Legendary Actions\");\n\n    dom.childNodes\n      .forEach((node) => {\n      // check for action numbers\n      // can take 3 legendary actions\n        let startFlag = false;\n        const actionMatch = node.textContent.match(/can take (d+) legendary actions/);\n        if (actionMatch) {\n          this.resource.legendary.value = parseInt(actionMatch[1]);\n          this.resource.legendary.max = parseInt(actionMatch[1]);\n        }\n\n        const nodeName = node.textContent.split('.')[0].trim();\n        const switchAction = this.featureBlocks[type].find((act) => nodeName === act.name);\n        if (action.name !== \"Legendary Actions\" || switchAction) {\n\n          if (switchAction) {\n            action = switchAction;\n            if (action.options.html === \"\") {\n              startFlag = true;\n            }\n          }\n\n          if (action.options.actionCopy) return;\n          if (node.outerHTML) {\n            let outerHTML = node.outerHTML;\n            if (switchAction && startFlag) {\n              outerHTML = outerHTML.replace(`${nodeName}.`, \"\");\n            }\n            action.options.html += outerHTML;\n          }\n        }\n      });\n  }\n\n  #generateVillainActions(type = \"villain\") {\n    let dom = this.#buildDom(type);\n\n    // Base feat\n    const feat = { name: \"Villain Actions\", options: { html: \"\", ddbMonster: this.ddbMonster, type, actionCopy: false } };\n    feat.options.html = `${this.html[type]}`;\n    this.featureBlocks[type].push(feat);\n\n    // build out skeleton actions\n    dom.querySelectorAll(\"strong\").forEach((node) => {\n      const name = node.textContent.trim().replace(/\\.$/, '').trim();\n      const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type, actionCopy: false } };\n\n      this.featureBlocks[type].push(action);\n    });\n\n    let action = this.featureBlocks[type].find((act) => act.name == \"Villain Actions\");\n\n    dom.childNodes\n      .forEach((node) => {\n        let startFlag = false;\n\n        const nameRegex = /^Action (.)+?[.!?]/;\n        const actionMatch = node.textContent.match(nameRegex);\n        const nodeName = actionMatch ? actionMatch[0].split('.')[0].trim() : node.textContent.split('.')[0].trim();\n        const switchAction = this.featureBlocks[type].find((act) => nodeName === act.name);\n\n        if (action.name !== \"Villain Actions\" || switchAction) {\n\n          if (switchAction) {\n            action = switchAction;\n            if (action.options.html === \"\") {\n              startFlag = true;\n            }\n          }\n\n          if (node.outerHTML) {\n            let outerHTML = node.outerHTML;\n            if (switchAction && startFlag) {\n              outerHTML = outerHTML.replace(`${nodeName}.`, \"\").replace(`${nodeName}`, \"\");\n            }\n            action.options.html += outerHTML;\n          }\n        }\n      });\n  }\n\n  static splitName(name, nodeText) {\n    if (!name.includes(\"Spell;\") && !name.includes(\"Psionics;\") && !name.includes(\"Mythic Trait;\")) {\n      const split = name.split(\";\");\n      if (split.length > 1 && split[0].includes(\"(\") && !split[0].includes(\")\")) {\n        return name.trim();\n      } else if (split.length > 1) {\n        return split.pop().trim();\n      } else {\n        return name.trim();\n      }\n    } else if (name.includes(\"Spell;\")) {\n      return nodeText.trim().split(\".\")[0];\n    } else {\n      return name.trim();\n    }\n  }\n\n  #generateSpecialActions(type) {\n    let splitActions = this.html[type].split(\"<h3>Roleplaying Information</h3>\");\n    if (splitActions.length > 1) {\n      this.characterDescription[type] = `<h3>Roleplaying Information</h3>${splitActions[1]}`;\n    }\n\n    this.html[type] = splitActions[0];\n    let dom = this.#buildDom(type);\n\n    // build out skeleton actions\n    dom.querySelectorAll(\"p\").forEach((node) => {\n      const pDom = utils.htmlToDocumentFragment(node.outerHTML);\n      const query = pDom.querySelector(\"em\");\n      if (!query) return;\n      let name = query.textContent.trim().replace(/\\./g, '');\n      name = DDBMonsterFeatureFactory.splitName(name, node.textContent);\n      if (name) {\n        const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type, titleHTML: query.outerHTML, fullName: query.textContent } };\n        this.featureBlocks[type].push(action);\n      }\n    });\n\n    if (this.featureBlocks[type].length == 0) {\n      dom.querySelectorAll(\"p\").forEach((node) => {\n        const pDom = utils.htmlToDocumentFragment(node.outerHTML);\n        const query = pDom.querySelector(\"strong\");\n        if (!query) return;\n        let name = query.textContent.trim().replace(/\\./g, '');\n        name = DDBMonsterFeatureFactory.splitName(name, node.textContent);\n        if (name) {\n          const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type, titleHTML: query.outerHTML, fullName: query.textContent } };\n          this.featureBlocks[type].push(action);\n        }\n      });\n    }\n\n    if (this.featureBlocks[type].length == 0) {\n      dom.querySelectorAll(\"em\").forEach((node) => {\n        const name = node.textContent.trim().replace(/\\.$/, '').trim();\n        if (name) {\n          const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type, titleHTML: node.outerHTML, fullName: node.textContent } };\n          this.featureBlocks[type].push(action);\n        }\n      });\n    }\n\n    if (this.featureBlocks[type].length == 0) {\n      dom.querySelectorAll(\"strong\").forEach((node) => {\n        const name = node.textContent.trim().replace(/\\.$/, '').trim();\n        if (name) {\n          const action = { name, options: { html: \"\", ddbMonster: this.ddbMonster, type, titleHTML: node.outerHTML, fullName: node.textContent } };\n          this.featureBlocks[type].push(action);\n        }\n      });\n    }\n\n    if (this.featureBlocks[type].length == 0) {\n      const action = { name: \"Special Traits\", options: { html: \"\", ddbMonster: this.ddbMonster, type } };\n      this.featureBlocks[type].push(action);\n    }\n\n    if (this.featureBlocks[type].length === 0) return;\n\n    let action = this.featureBlocks[type][0];\n\n    dom.childNodes.forEach((node) => {\n      const nodeName = node.textContent.split('.')[0].trim();\n      let switchAction = this.featureBlocks[type].find((act) => nodeName === act.name);\n      if (action.name.includes(\"; Recharges after a Short or Long Rest\")) action.name = action.name.replace(\"; Recharges after a Short or Long Rest\", \"\");\n      if (action.name.includes(\"; Recharges after a Long Rest\")) action.name = action.name.replace(\"; Recharges after a Long Rest\", \"\");\n      if (!switchAction) {\n        switchAction = this.featureBlocks[type].find((act) => node.textContent.startsWith(act.options.fullName));\n      }\n      let startFlag = false;\n      if (switchAction) {\n        action = switchAction;\n        if (action.options.html === \"\") {\n          startFlag = true;\n        }\n      }\n\n      if (node.outerHTML) {\n        let outerHTML = node.outerHTML;\n        if (switchAction && startFlag) {\n          if (action.options.fullName) {\n            outerHTML = outerHTML.replace(action.fullName, \"\");\n          } else {\n            outerHTML = outerHTML.replace(nodeName, \"\");\n          }\n        }\n        const titleDom = utils.htmlToDocumentFragment(outerHTML);\n        if (titleDom.textContent.startsWith(\". \")) outerHTML = outerHTML.replace(\". \", \"\");\n        action.options.html += outerHTML;\n      }\n\n      const resistanceMatch = node.textContent.match(/Legendary Resistance \\((\\d+)\\/Day/i);\n      if (resistanceMatch) {\n        this.resources.resistance.value = parseInt(resistanceMatch[1]);\n        this.resources.resistance.max = parseInt(resistanceMatch[1]);\n      }\n    });\n  }\n\n  // possible regular types:\n  // action, reaction, bonus, mythic\n  // this.ddbMonster.source.actionsDescription\n  // this.ddbMonster.source.reactionsDescription\n  // this.ddbMonster.source.bonusActionsDescription\n  // this.ddbMonster.source.mythicActionsDescription\n\n  async generateActions(html, type = \"action\") {\n    if (!html || html.trim() == \"\") return;\n\n    this.html[type] = DDBMonsterFeatureFactory.replaceRollable(utils.replaceHtmlSpaces(`${html}`))\n      .replace(/<\\/strong> <strong>/g, \"\")\n      .replace(/<\\/strong><strong>/g, \"\")\n      .replace(/<strong>\\.<\\/strong>/g, \".\")\n      .replace(/<em>\\.<\\/em>/g, \".\")\n      .replace(/&shy;/g, \"\");\n\n    switch (type) {\n      case \"action\":\n      case \"bonus\":\n      case \"mythic\":\n      case \"reaction\":\n        this.#generateActionActions(type);\n        break;\n      case \"lair\":\n        this.#generateLairActions(type);\n        break;\n      case \"legendary\":\n        this.#generateLegendaryActions(type);\n        break;\n      case \"special\":\n        this.#generateSpecialActions(type);\n        break;\n      case \"villain\":\n        this.#generateVillainActions(type);\n        break;\n      default:\n        logger.error(`Unknown action parsing type ${this.type}`, { DDBFeatureFactory: this });\n        throw new Error(`Unknown action parsing type ${this.type}`);\n    }\n\n    // some features are duplicated and we parse these first\n    for (const feature of this.features[type]) {\n      await feature.parse();\n    }\n\n    // parse remaining feature blocks\n    for (const feature of this.featureBlocks[type].filter((feature) => !feature.options.actionCopy)) {\n      feature.options[\"hideDescription\"] = this.hideDescription;\n      feature.options[\"updateExisting\"] = this.updateExisting;\n      const ddbFeature = new DDBMonsterFeature(feature.name, feature.options);\n      await ddbFeature.parse();\n      this.features[type].push(ddbFeature);\n    }\n  }\n\n}\n\n","import DICTIONARY from \"../../dictionary.js\";\n\nexport function getAbilityMods(monster) {\n  let abilities = {};\n\n  DICTIONARY.character.abilities.forEach((ability) => {\n    const value = monster.stats.find((stat) => stat.statId === ability.id).value || 0;\n    const mod = CONFIG.DDB.statModifiers.find((s) => s.value == value).modifier;\n    abilities[ability.value] = mod;\n  });\n\n  return abilities;\n\n}\n","import utils from \"../../../lib/utils.js\";\n\nexport async function newNPC(name, ddbId = null) {\n  const options = {\n    temporary: true,\n    displaySheet: false,\n  };\n  const npcClass = await Actor.create({ name, type: \"npc\" }, options);\n  let npc = npcClass.toObject();\n  npc._id = ddbId === null\n    ? foundry.utils.randomID()\n    : utils.namedIDStub(npc.name, { postfix: ddbId });\n  const flags = {\n    dnd5e: {},\n    monsterMunch: {},\n    ddbimporter: {\n      compendiumId: npc._id,\n      dndbeyond: {},\n    },\n  };\n  foundry.utils.setProperty(npc, \"flags\", flags);\n  // delete npc._id;\n  return npc;\n};\n","import { parseTags } from \"../../lib/DDBReferenceLinker.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport CompendiumHelper from \"../../lib/CompendiumHelper.js\";\nimport FileHelper from \"../../lib/FileHelper.js\";\nimport SETTINGS from \"../../settings.js\";\nimport utils from \"../../lib/utils.js\";\nimport logger from \"../../logger.js\";\nimport DICTIONARY from \"../../dictionary.js\";\nimport AdvancementHelper from \"../advancements/AdvancementHelper.js\";\n\n\nexport default class DDBRace {\n\n  static getGroupName(ids, baseRaceName) {\n    const ddbGroup = CONFIG.DDB.raceGroups.find((r) => ids.includes(r.id));\n    if (ddbGroup) {\n      return ddbGroup.name;\n    }\n    const lowercaseName = baseRaceName.toLowerCase().trim();\n    if ((lowercaseName.includes(\"elf\") && !lowercaseName.includes(\"half\")) || [\"eladrin\"].includes(lowercaseName)) {\n      return \"Elf\";\n    }\n    if ([\"githzerai\", \"githyanki\"].includes(lowercaseName)) return \"Gith\";\n    if (lowercaseName.includes(\"genasi\")) return \"Genasi\";\n    if (lowercaseName.includes(\"gnome\")) return \"Gnome\";\n    if (lowercaseName.includes(\"human\")) return \"Human\";\n    if (lowercaseName.includes(\"yuan-ti\")) return \"Yuan-ti\";\n    return baseRaceName;\n  }\n\n  _generateDataStub() {\n    this.data = {\n      _id: foundry.utils.randomID(),\n      name: \"\",\n      type: \"race\",\n      system: utils.getTemplate(\"race\"),\n      flags: {\n        ddbimporter: {\n          type: \"race\",\n        },\n        obsidian: {\n          source: {\n            type: \"race\"\n          },\n        },\n      },\n      img: null,\n    };\n  }\n\n  #fixups() {\n    // fixup\n    if (this.race.baseName === \"Harengon\") {\n      this.race.sizeId = 10;\n    }\n  }\n\n  constructor(ddbData, race, compendiumRacialTraits, noMods = false) {\n    this.ddbData = ddbData;\n    this.race = race;\n    this.#fixups();\n    this.compendiumRacialTraits = compendiumRacialTraits;\n    this._generateDataStub();\n    this.type = \"humanoid\";\n    this._compendiumLabel = CompendiumHelper.getCompendiumLabel(\"traits\");\n\n    this.data.name = (this.race.fullName) ? utils.nameString(this.race.fullName) : utils.nameString(this.race.name);\n    this.data.system.description.value += `${this.race.description}\\n\\n`;\n\n    this.fullName = this.race.fullName;\n    this.isLegacy = this.race.isLegacy;\n    this.baseRaceName = this.race.baseRaceName;\n    this.groupName = DDBRace.getGroupName(this.race.groupIds, this.baseRaceName);\n    this.isSubRace = this.race.isSubRace || this.groupName !== this.raceName;\n\n    this.data.flags.ddbimporter = {\n      type: \"race\",\n      entityRaceId: this.race.entityRaceId,\n      version: CONFIG.DDBI.version,\n      sourceId: this.race.sources.length > 0 ? [0].sourceId : -1, // is homebrew\n      baseName: this.race.baseName,\n      baseRaceId: this.race.baseRaceId,\n      baseRaceName: this.race.baseRaceName,\n      fullName: this.race.fullName,\n      fullRaceName: this.race.fullName,\n      subRaceShortName: this.race.subRaceShortName,\n      isHomebrew: this.race.isHomebrew,\n      isLegacy: this.race.isLegacy,\n      isSubRace: this.isSubRace,\n      moreDetailsUrl: this.race.moreDetailsUrl,\n      featIds: this.race.featIds,\n      groupIds: this.race.groupIds,\n      groupName: this.groupName,\n    };\n\n    if (this.race.moreDetailsUrl) {\n      this.data.flags.ddbimporter['moreDetailsUrl'] = this.race.moreDetailsUrl;\n    }\n\n    this.data.system.source = DDBHelper.parseSource(this.race);\n\n    if (this.race.isSubRace && this.race.baseRaceName) this.data.system.requirements = this.race.baseRaceName;\n    const legacyName = game.settings.get(\"ddb-importer\", \"munching-policy-legacy-postfix\");\n    if (legacyName && this.race.isLegacy) {\n      this.data.name += \" (Legacy)\";\n    }\n\n    this.#addWeightSpeeds();\n    this.#addSizeAdvancement();\n\n    this.abilityAdvancement = new game.dnd5e.documents.advancement.AbilityScoreImprovementAdvancement();\n\n    this.noMods = noMods || ddbData === null;\n\n    this.advancementHelper = new AdvancementHelper({\n      ddbData: this.ddbData,\n      type: \"race\",\n      noMods: this.noMods,\n    });\n\n    this.featLink = {\n      advancementId: null,\n      name: null,\n      uuid: null,\n    };\n  }\n\n  async _generateRaceImage() {\n    let avatarUrl;\n    let largeAvatarUrl;\n    let portraitAvatarUrl;\n\n    const targetDirectory = game.settings.get(SETTINGS.MODULE_ID, \"other-image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n    const useDeepPaths = game.settings.get(SETTINGS.MODULE_ID, \"use-deep-file-paths\");\n\n    if (this.race.portraitAvatarUrl) {\n      const imageNamePrefix = useDeepPaths ? \"\" : \"race-portrait\";\n      const pathPostfix = useDeepPaths ? `/race/portrait` : \"\";\n      const downloadOptions = { type: \"race-portrait\", name: this.race.fullName, targetDirectory, imageNamePrefix, pathPostfix };\n      portraitAvatarUrl = await FileHelper.getImagePath(this.race.portraitAvatarUrl, downloadOptions);\n      this.data.img = portraitAvatarUrl;\n      this.data.flags.ddbimporter['portraitAvatarUrl'] = this.race.portraitAvatarUrl;\n    }\n\n    if (this.race.avatarUrl) {\n      const imageNamePrefix = useDeepPaths ? \"\" : \"race-avatar\";\n      const pathPostfix = useDeepPaths ? `/race/avatar` : \"\";\n      const downloadOptions = { type: \"race-avatar\", name: this.race.fullName, targetDirectory, imageNamePrefix, pathPostfix };\n      avatarUrl = await FileHelper.getImagePath(this.race.avatarUrl, downloadOptions);\n      this.data.flags.ddbimporter['avatarUrl'] = this.race.avatarUrl;\n      if (!this.data.img) {\n        this.data.img = avatarUrl;\n      }\n    }\n\n    if (this.race.largeAvatarUrl) {\n      const imageNamePrefix = useDeepPaths ? \"\" : \"race-large\";\n      const pathPostfix = useDeepPaths ? `/race/large` : \"\";\n      const downloadOptions = { type: \"race-large\", name: this.race.fullName, targetDirectory, imageNamePrefix, pathPostfix };\n      largeAvatarUrl = await FileHelper.getImagePath(this.race.largeAvatarUrl, downloadOptions);\n      // eslint-disable-next-line require-atomic-updates\n      this.data.flags.ddbimporter['largeAvatarUrl'] = this.race.largeAvatarUrl;\n      if (!this.data.img) {\n        this.data.img = largeAvatarUrl;\n      }\n    }\n\n    const image = (avatarUrl) ? `<img src=\"${avatarUrl}\">\\n\\n` : (largeAvatarUrl) ? `<img src=\"${largeAvatarUrl}\">\\n\\n` : \"\";\n    this.data.system.description.value += image;\n    return image;\n  }\n\n  #typeCheck(trait) {\n    if (trait.name.trim() !== \"Creature Type\") return;\n    const typeRegex = /You are a (\\S*)\\./i;\n    const typeMatch = trait.description.match(typeRegex);\n    if (typeMatch) {\n      logger.debug(`Explicit type detected: ${typeMatch[1]}`, typeMatch);\n      this.type = typeMatch[1].toLowerCase();\n    }\n  }\n\n  #addFeatureDescription(trait) {\n    const featureMatch = this.compendiumRacialTraits.find((match) =>\n      foundry.utils.hasProperty(match, \"flags.ddbimporter.baseName\") && foundry.utils.hasProperty(match, \"flags.ddbimporter.entityRaceId\")\n      && utils.nameString(trait.name) === utils.nameString(match.flags.ddbimporter.baseName)\n      && match.flags.ddbimporter.entityRaceId === trait.entityRaceId\n    );\n    const title = (featureMatch) ? `<p><b>@Compendium[${this._compendiumLabel}.${featureMatch._id}]{${trait.name}}</b></p>` : `<p><b>${trait.name}</b></p>`;\n    this.data.system.description.value += `${title}\\n${trait.description}\\n\\n`;\n  }\n\n  #addWeightSpeeds() {\n    if (this.race.weightSpeeds?.normal) {\n      this.data.system.movement = {\n        burrow: this.race.weightSpeeds.normal.burrow ?? 0,\n        climb: this.race.weightSpeeds.normal.climb ?? 0,\n        fly: this.race.weightSpeeds.normal.fly ?? 0,\n        swim: this.race.weightSpeeds.normal.swim ?? 0,\n        walk: this.race.weightSpeeds.normal.walk ?? 0,\n        units: \"ft\",\n        hover: false,\n      };\n    }\n  }\n\n  #addSizeAdvancement() {\n    const advancement = new game.dnd5e.documents.advancement.SizeAdvancement();\n\n    const ddbSizeData = CONFIG.DDB.creatureSizes.find((s) => s.id === this.race.sizeId);\n    if (ddbSizeData.id === 10) {\n      advancement.updateSource({ configuration: { sizes: [\"med\", \"sm\"] } });\n    } else if (ddbSizeData !== 4) {\n      const size = DICTIONARY.character.actorSizes.find((s) => s.id === this.race.sizeId);\n      advancement.updateSource({ configuration: { sizes: [size.value] } });\n    }\n\n    this.data.system.advancement.push(advancement.toObject());\n  }\n\n  #flightCheck(trait) {\n    if (trait.name.trim() === \"Flight\" && foundry.utils.getProperty(this.race, \"weightSpeeds.normal.fly\") === 0) {\n      const typeRegex = /you have a flying speed equal to your walking speed/i;\n      const flightMatch = trait.description.match(typeRegex);\n      if (flightMatch) {\n        logger.debug(`Missing flight detected: ${flightMatch[1]}`, flightMatch);\n        this.data.system.movement.fly = this.data.system.movement.walk;\n      }\n    }\n  }\n\n  #addAbilityScoreAdvancement(trait) {\n    if (![\"Ability Score Increase\", \"Ability Score Increases\"].includes(trait.name.trim())) return;\n    const pointMatchRegex = /Your ability scores each increase by 1|or increase three different scores by 1/i;\n    if (pointMatchRegex.test(trait.description)) {\n      this.abilityAdvancement.configuration.points = 3;\n      this.abilityAdvancement.updateSource({ configuration: { points: 3 } });\n    } else {\n      // Your Intelligence score increases by 2, and your Wisdom score increases by 1.\n      // Your Wisdom score increases by 2, and your Constitution score increases by 1.\n      // Your Strength score increases by 1.\n      // Your Constitution score increases by 2.\n      // Your Charisma score increases by 2, and          two other ability scores of your choice increase by 1.\n      // Your Charisma score increases by 2. In addition, one other ability score of your choice increases by 1.\n      // Your Constitution score increases by 2, and      one other ability score of your choice increases by 1.\n\n      const update = this.abilityAdvancement.configuration.toObject();\n      const fixedRegex = /Your (\\w+) score increases by (\\d)/i;\n      const fixedMatch = trait.description.match(fixedRegex);\n      if (fixedMatch) {\n        const ability = DICTIONARY.character.abilities.find((a) => a.long === fixedMatch[1].toLowerCase());\n        if (ability) {\n          update.fixed[ability.value] = parseInt(fixedMatch[2]);\n        }\n      }\n\n      const extraFixedRegex = /and your (\\w+) score increases by (\\d)/i;\n      const extraFixedMatch = trait.description.match(extraFixedRegex);\n      if (extraFixedMatch) {\n        const ability = DICTIONARY.character.abilities.find((a) => a.long === extraFixedMatch[1].toLowerCase());\n        if (ability) {\n          update.fixed[ability.value] = parseInt(extraFixedMatch[2]);\n        }\n      }\n      const wildCardRegex = /(\\w+) other ability score of your choice increases by (\\d)/i;\n      const wildCardMatch = trait.description.match(wildCardRegex);\n      if (wildCardMatch) {\n        const numb = DICTIONARY.numbers.find((n) => n.natural === wildCardMatch[1].toLowerCase());\n        const value = parseInt(wildCardMatch[2]);\n        if (numb && Number.isInteger(value)) {\n          update.points = (update.points ?? 0) + (value * numb.num);\n          update.cap = Math.max(value, (update.cap ?? 0));\n        }\n      }\n\n      this.abilityAdvancement.updateSource({ configuration: update });\n    }\n  }\n\n  #generateAbilityAdvancement() {\n    this.race.racialTraits.forEach((t) => {\n      const trait = t.definition;\n      if (![\"Ability Score Increase\", \"Ability Score Increases\"].includes(trait.name.trim())) return;\n      this.#addAbilityScoreAdvancement(trait);\n    });\n    this.data.system.advancement.push(this.abilityAdvancement.toObject());\n  }\n\n  // skills, e.g. variant human\n  #generateSkillAdvancement(trait) {\n    if (![\"Skills\"].includes(trait.name.trim())) return;\n\n    const mods = this.advancementHelper.noMods\n      ? []\n      : DDBHelper.getModifiers(this.ddbData, \"race\");\n    const skillExplicitMods = mods.filter((mod) =>\n      mod.type === \"proficiency\"\n      && DICTIONARY.character.skills.map((s) => s.subType).includes(mod.subType)\n    );\n    const advancement = this.advancementHelper.getSkillAdvancement(skillExplicitMods, trait, undefined, 0);\n\n    if (advancement) this.data.system.advancement.push(advancement.toObject());\n  }\n\n  #generateLanguageAdvancement(trait) {\n    if (![\"Languages\"].includes(trait.name.trim())) return;\n\n    const mods = this.advancementHelper.noMods\n      ? []\n      : DDBHelper.getModifiers(this.ddbData, \"race\");\n\n    const advancement = this.advancementHelper.getLanguageAdvancement(mods, trait, 0);\n    if (advancement) this.data.system.advancement.push(advancement.toObject());\n  }\n\n  #geneateToolAdvancement(trait) {\n    if (![\"Tools\"].includes(trait.name.trim())) return;\n\n    const mods = this.advancementHelper.noMods\n      ? []\n      : DDBHelper.getModifiers(this.ddbData, \"race\");\n\n    const advancement = this.advancementHelper.getToolAdvancement(mods, trait, 0);\n    if (advancement) this.data.system.advancement.push(advancement.toObject());\n  }\n\n  async #generateFeatAdvancement(trait) {\n    if (![\"Feats\", \"Feat\"].includes(trait.name.trim())) return;\n\n    const advancement = new game.dnd5e.documents.advancement.ItemChoiceAdvancement();\n\n    const compendium = CompendiumHelper.getCompendiumType(\"feats\");\n    const index = await compendium.getIndex();\n\n    advancement.updateSource({\n      title: \"Feat\",\n      configuration: {\n        allowDrops: true,\n        pool: index.map((i) => i.uuid),\n        choices: {\n          \"0\": 1,\n        },\n        restriction: {\n          type: \"feat\"\n        },\n      },\n    });\n\n    this.data.system.advancement.push(advancement.toObject());\n\n    const feat = this.ddbData?.character?.feats?.find((f) =>\n      f.componentId === trait.id\n      && f.componentTypeId === trait.entityTypeId\n    );\n    if (!feat) {\n      logger.warn(`Unable to link advancement to feat`, { advancement, trait, this: this });\n      return;\n    };\n    const featMatch = index.find((i) => i.name === feat.definition.name);\n    if (!featMatch) {\n      logger.warn(`Unable to link advancement to feat ${feat.definition.name}, this is probably because the feats have not been munched to the compendium`, { feat });\n      return;\n    }\n\n    this.featLink.advancementId = advancement._id;\n    this.featLink.name = feat.definition.name;\n    this.featLink.uuid = featMatch.uuid;\n\n    // this update is done later, once everything is built\n    // we just add the hints to the feat here\n    // const update = {\n    //   value: {\n    //     added: {\n    //       \"0\": {\n    //         // \"IRs6OOXQk3AvK3GW\": \"Compendium.world.ddb-test2-ddb-feats.Item.cHie2wNgxBG9m62F\"\n    //       },\n    //     },\n    //   },\n    // };\n\n    // advancement.updateSource(update);\n\n\n  }\n\n\n  linkFeatures(ddbCharacter) {\n    logger.debug(\"Linking Advancements to Feats for Race\", {\n      DDBRace: this,\n      ddbCharacter,\n    });\n\n    ddbCharacter.data.race.system.advancement.forEach((a, idx, advancements) => {\n      if (a.type === \"ItemChoice\") {\n        const addedFeats = {};\n\n        for (const type of [\"actions\", \"features\"]) {\n          for (const feat of ddbCharacter.data[type]) {\n            const isMatch = feat.type === \"feat\"\n              && feat.system.type.value === \"feat\"\n              && feat.flags.ddbimporter.type === \"feat\"\n              && feat.name.startsWith(this.featLink.name);\n\n            // eslint-disable-next-line no-continue\n            if (!isMatch) continue;\n\n            logger.debug(`Advancement Race ${a._id} found Feature ${feat.name} (${this.featLink.uuid})`);\n            addedFeats[feat._id] = this.featLink.uuid;\n            foundry.utils.setProperty(feat, \"flags.dnd5e.sourceId\", this.featLink.uuid);\n            foundry.utils.setProperty(feat, \"flags.dnd5e.advancementOrigin\", `${this.data._id}.${a._id}`);\n          }\n\n\n          if (Object.keys(addedFeats).length > 0) {\n            const added = {\n              \"0\": addedFeats,\n              // {\n              //   \"IRs6OOXQk3AvK3GW\": \"Compendium.world.ddb-test2-ddb-feats.Item.cHie2wNgxBG9m62F\"\n              // },\n            };\n\n            a.value = {\n              added,\n            };\n            advancements[idx] = a;\n          }\n        }\n      }\n    });\n    logger.debug(\"Processed race advancements\", ddbCharacter.data.race.system.advancement);\n\n  }\n\n  #generateHTMLSenses() {\n    const textDescription = AdvancementHelper.stripDescription(this.data.system.description.value);\n\n    // You can see in dim light within 60 feet of you as if it were bright light, and in darkness as if it were dim light\n    // You can see in dim light within 120 feet of you as if it were bright light and in darkness as if it were dim light.\n    const darkVisionRegex = /you can see in dim light within (\\d+) feet of you as if it were bright light/im;\n    const darkVisionMatch = textDescription.match(darkVisionRegex);\n\n    if (darkVisionMatch) {\n      this.data.system.senses.darkvision = parseInt(darkVisionMatch[1]);\n    }\n\n  }\n\n  #generateSenses() {\n    if (this.noMods) {\n      this.#generateHTMLSenses();\n      return;\n    }\n    for (const senseName in this.data.system.senses) {\n      const basicOptions = {\n        subType: senseName,\n      };\n      DDBHelper.filterModifiers((this.ddbData?.character?.modifiers?.race ?? []), \"set-base\", basicOptions).forEach((sense) => {\n        if (Number.isInteger(sense.value) && sense.value > this.data.system.senses[senseName]) {\n          this.data.system.senses[senseName] = parseInt(sense.value);\n        }\n      });\n    }\n  }\n\n  async build() {\n    try {\n      await this._generateRaceImage();\n    } catch (e) {\n      logger.error(\"Error generating race image, probably because you don't have permission to browse the host file system.\", { e });\n    }\n\n\n    this.race.racialTraits.forEach((t) => {\n      const trait = t.definition;\n      this.#addFeatureDescription(trait);\n      this.#typeCheck(trait);\n      this.#flightCheck(trait);\n\n      this.#generateSkillAdvancement(trait);\n      this.#generateLanguageAdvancement(trait);\n      this.#geneateToolAdvancement(trait);\n      this.#generateFeatAdvancement(trait);\n      // FUTURE, spells (at various levels, when supported)\n    });\n\n    this.#generateAbilityAdvancement();\n    this.#generateSenses();\n\n    // set final type\n    foundry.utils.setProperty(this.data, \"system.type.value\", this.type);\n\n    // finally a tag parse to update the description\n    this.data.system.description.value = parseTags(this.data.system.description.value);\n\n    logger.debug(\"Race generated\", { DDBRace: this });\n  }\n\n  static async getRacialTraitsLookup(racialTraits, fail = true) {\n    const compendium = CompendiumHelper.getCompendiumType(\"traits\", fail);\n    if (compendium) {\n      const flags = [\"name\", \"flags.ddbimporter.entityRaceId\", \"flags.ddbimporter.baseName\"];\n      const index = await compendium.getIndex({ fields: flags });\n      const traitIndex = await index.filter((i) => racialTraits.some((orig) => i.name === orig.name));\n      return traitIndex;\n    } else {\n      return [];\n    }\n  }\n\n}\n\n","import DICTIONARY from \"../../dictionary.js\";\n\n// is there a spell casting ability?\nexport function hasSpellCastingAbility(spellCastingAbilityId) {\n  return DICTIONARY.character.abilities.find((ability) => ability.id === spellCastingAbilityId) !== undefined;\n}\n\n// convert spellcasting ability id to string used by foundry\nexport function convertSpellCastingAbilityId(spellCastingAbilityId) {\n  return DICTIONARY.character.abilities.find((ability) => ability.id === spellCastingAbilityId).value;\n}\n\n// search through classinfo and determine spellcasting ability\nexport function getSpellCastingAbility(classInfo, checkSubclass = true, onlySubclass = false) {\n  let spellCastingAbility = undefined;\n  if (!onlySubclass && hasSpellCastingAbility(classInfo.definition.spellCastingAbilityId)) {\n    spellCastingAbility = convertSpellCastingAbilityId(classInfo.definition.spellCastingAbilityId);\n  } else if (\n    checkSubclass\n    && classInfo.subclassDefinition\n    && hasSpellCastingAbility(classInfo.subclassDefinition.spellCastingAbilityId)\n  ) {\n    // e.g. Arcane Trickster has spellcasting ID granted here\n    spellCastingAbility = convertSpellCastingAbilityId(classInfo.subclassDefinition.spellCastingAbilityId);\n  } else {\n    // special cases: No spellcaster, but can cast spells like totem barbarian, default to wis\n    spellCastingAbility = \"wis\";\n  }\n  return spellCastingAbility;\n}\n","/**\n * Generates some meta data for a character to use to determine what to do\n * with a spell.\n * We use this like a quick lookup table\n * @param {*} character\n */\nexport function getLookups(character) {\n  // racialTraits\n  let lookups = {\n    race: [],\n    feat: [],\n    class: [],\n    classFeature: [],\n    item: [],\n  };\n  character.race.racialTraits.forEach((trait) => {\n    lookups.race.push({\n      id: trait.definition.id,\n      name: trait.definition.name,\n    });\n  });\n\n  character.classes.forEach((playerClass) => {\n    lookups.class.push({\n      id: playerClass.definition.id,\n      name: playerClass.definition.name,\n    });\n\n    if (playerClass.subclassDefinition) {\n      lookups.class.push({\n        id: playerClass.subclassDefinition.id,\n        name: playerClass.subclassDefinition.name,\n      });\n    }\n\n    if (playerClass.classFeatures) {\n      playerClass.classFeatures.forEach((trait) => {\n        lookups.classFeature.push({\n          id: trait.definition.id,\n          name: trait.definition.name,\n          classId: trait.definition.classId,\n          componentId: trait.definition.componentId,\n        });\n      });\n    }\n  });\n\n  character.options.class.forEach((trait) => {\n    lookups.classFeature.push({\n      id: trait.definition.id,\n      name: trait.definition.name,\n      componentId: trait.componentId,\n    });\n  });\n\n  character.feats.forEach((trait) => {\n    lookups.feat.push({\n      id: trait.definition.id,\n      name: trait.definition.name,\n      componentId: trait.componentId,\n    });\n  });\n\n  character.inventory.forEach((trait) => {\n    lookups.item.push({\n      id: trait.definition.id,\n      name: trait.definition.name,\n      limitedUse: trait.limitedUse,\n      equipped: trait.equipped,\n      isAttuned: trait.isAttuned,\n      canAttune: trait.definition.canAttune,\n      canEquip: trait.definition.canEquip,\n    });\n  });\n\n  return lookups;\n}\n","export function getComponents (data) {\n  const properties = [];\n\n  if (data.definition.components.includes(1)) properties.push(\"vocal\");\n  if (data.definition.components.includes(2)) properties.push(\"somatic\");\n  if (data.definition.components.includes(3)\n    || foundry.utils.getProperty(data, \"flags.ddbimporter.dndbeyond.forceMaterial\")\n  ) {\n    properties.push(\"material\");\n  }\n  if (data.definition.ritual) properties.push(\"ritual\");\n  if (data.definition.concentration) properties.push(\"concentration\");\n  return {\n    value: data.definition.componentsDescription,\n    vocal: data.definition.components.includes(1),\n    somatic: data.definition.components.includes(2),\n    material: data.definition.components.includes(3) || foundry.utils.getProperty(data, \"flags.ddbimporter.dndbeyond.forceMaterial\"),\n    ritual: data.definition.ritual,\n    concentration: data.definition.concentration,\n    properties,\n  };\n}\n\nexport function getMaterials(data) {\n  // this is mainly guessing\n  if (data.definition.componentsDescription && data.definition.componentsDescription.length > 0) {\n    let cost = 0;\n    let matches = data.definition.componentsDescription.toLowerCase().match(/([\\d.,]+)\\s*gp/);\n    if (matches) {\n      cost = parseInt(matches[1].replace(/,|\\./g, \"\"));\n    }\n\n    return {\n      value: data.definition.componentsDescription,\n      consumed: data.definition.componentsDescription.toLowerCase().indexOf(\"consume\") !== -1,\n      cost: cost,\n      supply: 0,\n    };\n  } else {\n    return {\n      value: \"\",\n      consumed: false,\n      cost: 0,\n      supply: 0,\n    };\n  }\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport utils from \"../../lib/utils.js\";\n\n\nfunction classSpell(data, result) {\n  const classPrepMode = utils.findByProperty(\n    DICTIONARY.spell.preparationModes,\n    \"name\",\n    data.flags.ddbimporter.dndbeyond.class\n  );\n\n  if (data.restriction === \"As Ritual Only\" || data.castOnlyAsRitual || data.ritualCastingType !== null) {\n    result.mode = \"ritual\";\n    result.prepared = false;\n  } else if (!data.usesSpellSlot && data.definition.level !== 0) {\n    // some class features such as druid circle of stars grants x uses of a spell\n    // at the lowest level. for these we add as an innate.\n    result.mode = \"innate\";\n  } else if (data.alwaysPrepared) {\n    result.mode = \"always\";\n  } else if (result.mode && classPrepMode) {\n    result.mode = classPrepMode.value;\n  }\n  // Warlocks should use Pact spells\n  // but lets mark level 0 as regular spells so they show up as cantrips\n  if (result.mode === \"pact\" && data.definition.level === 0) {\n    result.mode = \"prepared\";\n    result.prepared = true;\n  } else if (result.mode === \"pact\" && game.settings.get(\"ddb-importer\", \"pact-spells-prepared\")) {\n    result.prepared = true;\n  }\n  return result;\n}\n\n/**\n * Retrieves the spell preparation mode, depending on the location this spell came from\n *\n */\nexport function getSpellPreparationMode(data) {\n  // default values\n  let result = {\n    mode: \"prepared\",\n    // If always prepared mark as such, if not then check to see if prepared\n    prepared: data.alwaysPrepared || data.prepared,\n  };\n\n  // handle classSpells\n  const featureClass = data.flags.ddbimporter.dndbeyond.lookup === \"classFeature\"\n    && data.flags.ddbimporter.dndbeyond.class;\n\n  if (data.flags.ddbimporter.dndbeyond.lookup === \"classSpell\" || featureClass) {\n    result = classSpell(data, result);\n  } else if (data.flags.ddbimporter.dndbeyond.lookup === \"race\" && data.definition.level !== 0) {\n    // set race spells as innate\n    result.mode = \"innate\";\n    if (data.usesSpellSlot) {\n      // some racial spells allow the spell to also be added to spell lists\n      result.mode = \"always\";\n    }\n  } else if (\n    // Warlock Mystic Arcanum are passed in as Features\n    data.flags.ddbimporter.dndbeyond.lookupName.startsWith(\"Mystic Arcanum\")\n  ) {\n    // these have limited uses (set with getUses())\n    result.mode = \"pact\";\n    result.prepared = false;\n  } else if (data.flags.ddbimporter.dndbeyond.lookup === \"item \" && data.definition.level !== 0) {\n    result.mode = \"prepared\";\n    result.prepared = false;\n  } else {\n    // If spell doesn't use a spell slot and is not a cantrip, mark as always preped\n    let always = !data.usesSpellSlot && data.definition.level !== 0;\n    let ritaulOnly = data.ritualCastingType !== null || data.castOnlyAsRitual; // e.g. Book of ancient secrets & totem barb\n    if (always && ritaulOnly) {\n      // in this case we want the spell to appear in the spell list unprepared\n      result.mode = \"ritual\";\n      result.prepared = false;\n    } else if (always) {\n      // these spells are always prepared, and have a limited use that's\n      // picked up by getUses() later\n      // this was changed to \"atwill\"\n      result.mode = \"atwill\";\n    }\n    if (data.flags.ddbimporter.dndbeyond.lookup === \"classFeature\") {\n      if (data.alwaysPrepared) {\n        result.mode = \"always\";\n      }\n    }\n  }\n\n  return result;\n}\n","import DICTIONARY from \"../../dictionary.js\";\n\nconst DEFAULT_USE = {\n  value: null,\n  max: null,\n  per: \"\",\n};\n\n/**\n * Get the reset condition of the spell, if uses restricted\n * @param {*} data Spell data\n * @param {*} character Character data\n */\nexport function getUses(data, character) {\n  // we check this, as things like items have useage attached to the item, not spell\n  const limitedUse = foundry.utils.getProperty(data, \"flags.ddbimporter.dndbeyond.limitedUse\") ?? data.limitedUse;\n\n  if (!limitedUse) return DEFAULT_USE;\n  const resetType = DICTIONARY.resets.find((reset) => reset.id == limitedUse.resetType);\n  if (!resetType) return DEFAULT_USE;\n\n  if (limitedUse.maxUses || limitedUse.statModifierUsesId || limitedUse.useProficiencyBonus) {\n    let maxUses = (limitedUse.maxUses && limitedUse.maxUses !== -1) ? limitedUse.maxUses : 0;\n\n    if (limitedUse.statModifierUsesId) {\n      const ability = DICTIONARY.character.abilities.find(\n        (ability) => ability.id === limitedUse.statModifierUsesId\n      ).value;\n\n      switch (limitedUse.operator) {\n        case 2: {\n          maxUses *= character.flags.ddbimporter.dndbeyond.effectAbilities[ability].mod;\n          break;\n        }\n        case 1:\n        default:\n          maxUses += character.flags.ddbimporter.dndbeyond.effectAbilities[ability].mod;\n      }\n    }\n\n    if (limitedUse.useProficiencyBonus) {\n      switch (limitedUse.proficiencyBonusOperator) {\n        case 2: {\n          maxUses *= character.system.attributes.prof;\n          break;\n        }\n        case 1:\n        default:\n          maxUses += character.system.attributes.prof;\n      }\n    }\n\n    const finalMaxUses = (maxUses) ? parseInt(maxUses) : null;\n\n    return {\n      value: (finalMaxUses !== null && finalMaxUses != 0) ? maxUses - limitedUse.numberUsed : null,\n      max: (finalMaxUses != 0) ? finalMaxUses : null,\n      per: resetType ? resetType.value : \"\",\n    };\n  } else {\n    return DEFAULT_USE;\n  }\n}\n","import DICTIONARY from \"../../dictionary.js\";\n\n/**\n * Gets the activation information of this spell\n */\nexport function getActivation(data) {\n  // for newer override spells, activation is at higher level\n  const activation = data.activation ? data.activation : data.definition.activation;\n  const activationType = DICTIONARY.spell.activationTypes.find(\n    (type) => type.activationType === activation.activationType\n  );\n  if (activationType && activation.activationTime) {\n    return {\n      type: activationType.value,\n      cost: activation.activationTime,\n      condition: data.definition.castingTimeDescription || \"\",\n    };\n  } else {\n    return {\n      type: \"action\",\n      cost: 1,\n      condition: data.definition.castingTimeDescription || \"\",\n    };\n  }\n}\n","/**\n * Retrieves the spell duration\n */\nexport function getDuration(data) {\n  if (data.definition.duration) {\n    let units = \"\";\n    if (data.definition.duration.durationUnit !== null) {\n      units = data.definition.duration.durationUnit.toLowerCase();\n    } else {\n      units = data.definition.duration.durationType.toLowerCase().substring(0, 4);\n    }\n    return {\n      value: data.definition.duration.durationInterval || \"\",\n      units: units,\n    };\n  } else {\n    return {};\n  }\n}\n","import DICTIONARY from \"../../dictionary.js\";\n\n/**\n * Does the spell target creatures?\n * @param {*} data\n */\nlet doesTargetCreature = (data) => {\n  const creature = /You touch a creature|You touch a willing creature|affecting one creature|creature you touch|a creature you|creature( that)? you can see|interrupt a creature|would strike a creature|creature of your choice|creature or object within range|cause a creature|creature must be within range/gi;\n  const creaturesRange = /(humanoid|monster|creature|target)(s)? (or loose object )?(of your choice )?(that )?(you can see )?within range/gi;\n  return data.definition.description.match(creature) || data.definition.description.match(creaturesRange);\n};\n\n/**\n * Get Target Values\n * Uses regex magic to try and determine the number of creatures affected\n * @param {*} data\n */\nlet getTargetValues = (data) => {\n  const numCreatures = /(?!At Higher Levels.*)(\\w*) (falling )?(willing )?(creature|target|monster|celestial|fiend|fey|corpse(s)? of|humanoid)(?!.*you have animated)/gim;\n  const targets = [...data.definition.description.matchAll(numCreatures)];\n  const targetValues = targets\n    .filter((target) => {\n      const matches = DICTIONARY.numbers.filter((n) => n.natural === target[1].toLowerCase());\n      return Array.isArray(matches) && !!matches.length;\n    })\n    .map((target) => DICTIONARY.numbers.find((n) => n.natural === target[1].toLowerCase()).num);\n\n  if (Array.isArray(targetValues) && !!targetValues.length) {\n    return Math.max(...targetValues);\n  } else {\n    return null;\n  }\n};\n\n/**\n * Spell targets\n */\n// eslint-disable-next-line complexity\nexport function getTarget(data) {\n  const result = {\n    value: null,\n    units: null,\n    type: null,\n    width: null,\n  };\n\n  // if spell is an AOE effect get some details\n  if (data.definition.range.aoeType && data.definition.range.aoeValue) {\n    result.value = parseInt(data.definition.range.aoeValue);\n    result.type = data.definition.range.aoeType.toLowerCase();\n    result.units = \"ft\";\n    return result;\n  }\n\n  // does the spell target a creature?\n  const creatures = doesTargetCreature(data);\n\n  if (creatures) {\n    result.value = getTargetValues(data);\n  }\n\n  const rangeValue = foundry.utils.getProperty(data, \"definition.range.rangeValue\");\n\n  switch (data.definition.range.origin) {\n    case \"Touch\":\n      if (creatures) {\n        result.units = \"1\";\n        result.type = \"creature\";\n      }\n      break;\n    case \"Self\": {\n      const dmgSpell = data.definition.modifiers.some((mod) => mod.type === \"damage\");\n      if (dmgSpell && rangeValue) {\n        result.value = rangeValue;\n        result.units = \"ft\";\n        result.type = \"radius\";\n      } else if (dmgSpell) {\n        result.type = \"creature\";\n      } else {\n        result.type = \"self\";\n      }\n      break;\n    }\n    case \"None\":\n      result.type = \"none\";\n      break;\n    case \"Ranged\":\n      if (creatures) result.type = \"creature\";\n      break;\n    case \"Feet\":\n      if (creatures) result.type = \"creature\";\n      break;\n    case \"Miles\":\n      if (creatures) result.type = \"creature\";\n      break;\n    case \"Sight\":\n    case \"Special\":\n      result.units = \"special\";\n      break;\n    case \"Any\":\n      result.units = \"any\";\n      break;\n    case undefined:\n      result.type = null;\n      break;\n    // no default\n  }\n\n  // wall type spell?\n  if (data.definition.name.includes(\"Wall\")) {\n    result.type = \"wall\";\n    result.units = \"ft\";\n\n    if (data.definition.description.includes(\"ten 10-foot-\")) {\n      result.value = 100;\n    } else {\n      const wallReg = new RegExp(/ (\\d*) feet long/);\n      const matches = data.definition.description.match(wallReg);\n      if (matches) {\n        result.value = parseInt(matches[1]);\n      }\n    }\n    const thickReg = new RegExp(/ (\\d*) foot (thick|wide)/);\n    const thickMatch = data.definition.description.match(thickReg);\n    if (thickMatch && thickMatch[1] > 5) {\n      result.width = parseInt(thickMatch[1]);\n    }\n  }\n\n  return result;\n}\n","/** Spell range */\nexport function getRange(data) {\n  // else lets try and fill in some target details\n  let value = data.definition.range.rangeValue ? data.definition.range.rangeValue : null;\n  let units = \"ft\";\n  let long = null;\n\n  switch (data.definition.range.origin) {\n    case \"Touch\":\n      value = null;\n      units = \"touch\";\n      break;\n    case \"Self\":\n      value = null;\n      units = \"self\";\n      break;\n    case \"None\":\n      units = \"none\";\n      break;\n    case \"Ranged\":\n      units = \"ft\";\n      break;\n    case \"Feet\":\n      units = \"ft\";\n      break;\n    case \"Miles\":\n      units = \"ml\";\n      break;\n    case \"Sight\":\n    case \"Special\":\n      units = \"special\";\n      break;\n    case \"Any\":\n      units = \"any\";\n      break;\n    case undefined:\n      units = null;\n      break;\n    // no default\n  }\n\n  return {\n    value: value,\n    long: long,\n    units: units,\n  };\n}\n","export function getActionType(data) {\n  if (data.definition.requiresSavingThrow && !data.definition.requiresAttackRoll) {\n    return \"save\";\n  }\n\n  if (\n    data.definition.tags.includes(\"Damage\")\n    && data.definition.range.rangeValue\n    && data.definition.range.rangeValue > 0\n  ) {\n    return \"rsak\";\n  }\n\n  if (data.definition.tags.includes(\"Damage\")) {\n    return \"msak\";\n  }\n\n  if (data.definition.tags.includes(\"Healing\")) {\n    return \"heal\";\n  }\n\n  if (data.definition.tags.includes(\"Buff\")) {\n    return \"util\";\n  }\n\n  return \"other\";\n}\n","import utils from \"../../lib/utils.js\";\n\nlet getAlternativeFormula = (data) => {\n  // this might be specificially for Toll the Dead only, but it's better than nothing\n\n  let description = data.definition.description;\n  let match = description.match(/instead[\\w\\s]+(\\d+d\\d+) (\\w+) damage/);\n  if (match) {\n    return match[1];\n  } else {\n    return \"\";\n  }\n};\n\nexport function getDamage(data, spell) {\n  let result = {\n    parts: [],\n    versatile: \"\",\n  };\n  let chatFlavor = [];\n\n  const globalDamageHints = game.settings.get(\"ddb-importer\", \"use-damage-hints\");\n  const spellEffects = foundry.utils.getProperty(data, \"flags.ddbimporter.addSpellEffects\");\n  const damageRestrictionHints = game.settings.get(\"ddb-importer\", \"add-damage-restrictions-to-hints\") && !spellEffects;\n  const hintOrRestriction = globalDamageHints || damageRestrictionHints;\n\n  // damage\n  const attacks = data.definition.modifiers.filter((mod) => mod.type === \"damage\");\n  if (attacks.length !== 0) {\n    const cantripBoost = data.definition.level === 0 && !!data.flags.ddbimporter.dndbeyond.cantripBoost;\n    attacks.forEach((attack) => {\n      const restrictionText = attack.restriction && attack.restriction !== \"\" ? attack.restriction : \"\";\n      const restriction = damageRestrictionHints && restrictionText !== \"\" ? restrictionText : \"\";\n      const damageHintText = attack.subType || \"\";\n      if (!damageRestrictionHints && restrictionText !== \"\") {\n        const damageText = attack.die.diceString ? `${attack.die.diceString} - ` : \"\";\n        chatFlavor.push(`[${damageText}${damageHintText}] ${restrictionText}`);\n      }\n      const hintAndRestriction = globalDamageHints && restriction !== \"\" ? \" - \" : \"\";\n      const damageHint = globalDamageHints ? damageHintText : \"\";\n      const damageTag = hintOrRestriction ? `[${damageHint}${hintAndRestriction}${restriction}]` : \"\";\n      const addMod = attack.usePrimaryStat || cantripBoost ? \" + @mod\" : \"\";\n      let diceString = utils.parseDiceString(attack.die.diceString, addMod, damageTag).diceString;\n      if (diceString && diceString.trim() !== \"\" && diceString.trim() !== \"null\") result.parts.push([diceString, attack.subType]);\n    });\n\n    // This is probably just for Toll the dead.\n    const alternativeFormula = getAlternativeFormula(data);\n    result.versatile = cantripBoost && alternativeFormula && alternativeFormula != \"\" ? `${alternativeFormula} + @mod` : alternativeFormula;\n  }\n\n  // healing\n  const heals = data.definition.modifiers.filter((mod) => mod.type === \"bonus\" && mod.subType === \"hit-points\");\n  if (heals.length !== 0) {\n    const healingBonus = (spell.flags.ddbimporter.dndbeyond.healingBoost) ? ` + ${spell.flags.ddbimporter.dndbeyond.healingBoost} + @item.level` : \"\";\n    heals.forEach((heal) => {\n      const restrictionText = heal.restriction && heal.restriction !== \"\" ? heal.restriction : \"\";\n      const restriction = damageRestrictionHints && restrictionText !== \"\" ? restrictionText : \"\";\n      if (!damageRestrictionHints && restrictionText !== \"\") {\n        const damageText = heal.die.diceString ? `${heal.die.diceString} - ` : \"\";\n        chatFlavor.push(`[${damageText}healing] ${restrictionText}`);\n      }\n      const hintAndRestriction = globalDamageHints && restriction !== \"\" ? \" - \" : \"\";\n      const damageHint = globalDamageHints ? \"healing\" : \"\";\n      const damageTag = hintOrRestriction ? `[${damageHint}${hintAndRestriction}${restriction}]` : \"\";\n      const healValue = (heal.die.diceString) ? `${heal.die.diceString}${damageTag}` : heal.die.fixedValue;\n      const diceString = heal.usePrimaryStat\n        ? `${healValue} + @mod${healingBonus}`\n        : `${healValue}${healingBonus}`;\n      if (diceString && diceString.trim() !== \"\" && diceString.trim() !== \"null\") result.parts.push([diceString, \"healing\"]);\n    });\n  }\n\n  return [result, chatFlavor.join(\", \")];\n}\n","import DICTIONARY from \"../../dictionary.js\";\n\nexport function getSave(data) {\n  if (data.definition.requiresSavingThrow && data.definition.saveDcAbilityId) {\n    const saveAbility = DICTIONARY.character.abilities.find((ability) => ability.id === data.definition.saveDcAbilityId)\n      .value;\n    if (data.overrideSaveDc) {\n      return {\n        ability: saveAbility,\n        dc: data.overrideSaveDc,\n        scaling: \"flat\",\n      };\n    } else {\n      return {\n        ability: saveAbility,\n        dc: null,\n        scaling: \"spell\",\n      };\n    }\n  } else {\n    return {\n      ability: \"\",\n      dc: null,\n    };\n  }\n}\n","import logger from \"../../logger.js\";\n\n/**\n * Get the scaling type for a spell mod\n * This is complex logic and is broken out to help simplify\n * @param {*} name\n * @param {*} mod\n */\nlet getScaleType = (name, data, mod) => {\n  // scaleTypes:\n  // SPELLSCALE - typical spells that scale\n  // SPELLLEVEL - these spells have benefits that come in at particular levels e.g. bestow curse, hex. typically  duration changes\n  // CHARACTERLEVEL - typical cantrip based levelling, some expections (eldritch blast)\n  let scaleType = null;\n  const modScaleType = mod.atHigherLevels.scaleType ? mod.atHigherLevels.scaleType : data.definition.scaleType;\n  const isHigherLevelDefinitions\n    = mod.atHigherLevels.higherLevelDefinitions\n    && Array.isArray(mod.atHigherLevels.higherLevelDefinitions)\n    && mod.atHigherLevels.higherLevelDefinitions.length >= 1;\n\n  if (isHigherLevelDefinitions && modScaleType === \"spellscale\") {\n    const definition = mod.atHigherLevels.higherLevelDefinitions[0];\n    if (definition) {\n      scaleType = modScaleType;\n    } else {\n      logger.warn(\"No spell definition found for \" + name);\n    }\n  } else if (modScaleType === \"spellscale\") {\n    // lets handle cases where there is a spellscale type but no damage\n    // increase/ higherleveldefinitins e.g. chain lighting\n    // these type of spells typically increase targets so we set the\n    // scaling to null as we don't want to increase damage when upcast.\n    // this also deals with cases like Ice Knife where the upscale damage\n    // is in one of the two mods provided.\n    // we are capturing this else because we don't want to trigger\n    // an update to scaleType or a warning.\n  } else if (modScaleType === \"characterlevel\") {\n    // lets handle odd cantrips like Eldritch Blast\n    // (in fact this might be the only case)\n    if (mod.atHigherLevels.higherLevelDefinitions.length === 0) {\n      // if this array is empty it does not contain levelling information\n      // the only case found is Eldritch Blast.\n      // this does have some info around multiple beams in\n      // data.atHigherLevels but we ignore this. we will set the scaling\n      // to null as each beam is best modelled by \"casting\" the cantrip again/\n      // pressing the attack/damage buttons in FVTT\n      scaleType = null;\n    } else {\n      scaleType = modScaleType;\n    }\n  } else if (modScaleType === \"spelllevel\") {\n    // spells that have particular level associated benefits\n    // these seem to be duration increases or target increases for\n    // the most part we can't handle these in FVTT right now (we could\n    // in theory create a new spell at a higher level).\n    // some duration upcasting (like bestow curse) affects concentration\n    // for now we will do nothing with these spells.\n    // examples include: hex, shadowblade, magic weapon, bestow curse\n    scaleType = modScaleType;\n  } else {\n    logger.warn(`${name} parse failed: `, modScaleType);\n    scaleType = modScaleType; // if this is new/unknow will use default\n  }\n\n  return scaleType;\n};\n\nexport function getSpellScaling(data) {\n  let baseDamage = \"\";\n  let scaleDamage = \"\";\n  let scaleType = null; // defaults to null, so will be picked up as a None scaling spell.\n\n  // spell scaling\n  if (data.definition.canCastAtHigherLevel) {\n    // iterate over each spell modifier\n    data.definition.modifiers\n      .filter((mod) => mod.type === \"damage\" || (mod.type === \"bonus\" && mod.subType === \"hit-points\"))\n      // eslint-disable-next-line complexity\n      .forEach((mod) => {\n        // if the modifier has a die for damage, lets use the string or fixed value\n        // for the base damage\n        if (mod && mod.die) {\n          if (mod.die.diceString !== null) {\n            baseDamage = mod.die.diceString;\n          }\n\n          if (mod.die.fixedValue !== null && baseDamage === \"\") {\n            baseDamage = mod.die.fixedValue;\n          }\n        }\n\n        // defines some details about higher level casting\n        if (mod.atHigherLevels) {\n          // scaleTypes:\n          // SPELLSCALE - typical spells that scale\n          // SPELLLEVEL - these spells have benefits that come in at particular levels e.g. bestow curse, hex. typically  duration changes\n          // CHARACTERLEVEL - typical cantrip based levelling, some expections (eldritch blast)\n\n          // mod.atHigherLevels.higherLevelDefinitions contains info about the\n          // spells damage die at higher levels, but we can't use this for cantrips as\n          // FVTT use a formula to work out the scaling (ddb has a fixed value structure)\n          const isHigherLevelDefinitions\n            = mod.atHigherLevels.higherLevelDefinitions\n            && Array.isArray(mod.atHigherLevels.higherLevelDefinitions)\n            && mod.atHigherLevels.higherLevelDefinitions.length >= 1;\n\n          // lets handle normal spell leveling first\n          const modScaleType = mod.atHigherLevels.scaleType ? mod.atHigherLevels.scaleType : data.definition.scaleType;\n          if (isHigherLevelDefinitions && modScaleType === \"spellscale\") {\n            const definition = mod.atHigherLevels.higherLevelDefinitions[0];\n            if (definition) {\n              const die = definition.dice ? definition.dice : definition.die ? definition.die : undefined;\n              const modScaleDamage\n                = die?.diceString // if dice string\n                  ? die.diceString // use dice string\n                  : die?.fixedValue // else if fixed value\n                    ? die.fixedValue // use fixed value\n                    : definition.value; // else use value\n\n              // some spells have multiple scaling damage (e.g. Wall of Ice,\n              // Glyph of warding, Acid Arrow, Arcane Hand, Dragon's Breath,\n              // Chromatic Orb, Absorb Elements, Storm Sphere, Spirit Guardians)\n              // it's hard to model most of these in FVTT, and for some it makes\n              // no difference. so...\n              // lets optimistically use the highest\n              // assumptions: these are going to be dice strings, and we don't care\n              // about dice value, just number of dice\n              const diceFormula = /(\\d*)d\\d*/;\n              const existingMatch = diceFormula.exec(scaleDamage);\n              const modMatch = diceFormula.exec(modScaleDamage);\n\n              const modMatchValue = modMatch\n                ? modMatch.length > 1 ? modMatch[1] : modMatch[0]\n                : undefined;\n\n              if (!existingMatch && !modMatch) {\n                scaleDamage = modScaleDamage;\n              } else if (!existingMatch || modMatchValue > existingMatch[1]) {\n                scaleDamage = modScaleDamage;\n              }\n            } else {\n              logger.warn(\"No definition found for \" + data.definition.name);\n            }\n          } else if (isHigherLevelDefinitions && modScaleType === \"characterlevel\") {\n            // cantrip support, important to set to a fixed value if using abilities like potent spellcasting\n            scaleDamage = baseDamage;\n          }\n\n          scaleType = getScaleType(data.definition.name, data, mod);\n        }\n      });\n  }\n\n  switch (scaleType) {\n    case \"characterlevel\":\n      return {\n        mode: \"cantrip\",\n        formula: scaleDamage,\n      };\n    case \"spellscale\":\n      return {\n        mode: \"level\",\n        formula: scaleDamage,\n      };\n    case \"spelllevel\":\n    case null:\n      return {\n        mode: \"none\",\n        formula: \"\",\n      };\n    default:\n      return {\n        mode: \"level\",\n        formula: \"\",\n      };\n  }\n}\n","import utils from \"../../lib/utils.js\";\n\nfunction getCustomName(data, character) {\n  if (!character || (character && !foundry.utils.hasProperty(character, \"flags.ddbimporter.dndbeyond.characterValues\"))) return null;\n  const characterValues = character.flags.ddbimporter.dndbeyond.characterValues;\n  const customValue = characterValues.filter((value) => value.valueId == data.id && value.valueTypeId == data.entityTypeId);\n\n  if (customValue) {\n    const customName = customValue.find((value) => value.typeId == 8);\n\n    if (customName) {\n      data.name = customName.vale;\n      return customName.value;\n    }\n    if (customName) return customName.value;\n  }\n  return null;\n}\n\n\nexport function getName(data, character) {\n  // spell name\n  const customName = getCustomName(data, character);\n  if (customName) {\n    return utils.nameString(customName);\n  } else if (data.flags.ddbimporter.dndbeyond.nameOverride !== undefined) {\n    return utils.nameString(data.flags.ddbimporter.dndbeyond.nameOverride);\n  } else {\n    return utils.nameString(data.definition.name);\n  }\n}\n","import utils from \"../../lib/utils.js\";\nimport DICTIONARY from \"../../dictionary.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\n\n// Import parsing functions\nimport { getMaterials, getComponents } from \"./components.js\";\nimport { getSpellPreparationMode } from \"./prepartion.js\";\nimport { getUses } from \"./uses.js\";\nimport { getActivation } from \"./activation.js\";\nimport { getDuration } from \"./duration.js\";\nimport { getTarget } from \"./target.js\";\nimport { getRange } from \"./range.js\";\nimport { getActionType } from \"./action.js\";\nimport { getDamage } from \"./damage.js\";\nimport { getSave } from \"./save.js\";\nimport { getSpellScaling } from \"./scaling.js\";\nimport { generateTable } from \"../../lib/DDBTable.js\";\nimport { spellEffectAdjustment } from \"../../effects/specialSpells.js\";\nimport { getName } from \"./name.js\";\nimport { parseTags } from \"../../lib/DDBReferenceLinker.js\";\nimport SETTINGS from \"../../settings.js\";\nimport DDBCompanionFactory from \"../companions/DDBCompanionFactory.js\";\nimport logger from \"../../logger.js\";\n\nexport async function parseSpell(data, character, { namePostfix = null } = {}) {\n  const name = getName(data, character);\n  let spell = {\n    _id: utils.namedIDStub(name, { postfix: namePostfix }),\n    type: \"spell\",\n    system: utils.getTemplate(\"spell\"),\n    name: name,\n    flags: {\n      ddbimporter: {\n        id: data.id,\n        definitionId: data.definition.id,\n        entityTypeId: data.entityTypeId,\n        dndbeyond: data.flags.ddbimporter.dndbeyond,\n        originalName: utils.nameString(data.definition.name),\n        sources: data.definition.sources,\n        tags: data.definition.tags,\n        version: CONFIG.DDBI.version,\n      },\n      \"midi-qol\": {\n        removeAttackDamageButtons: \"default\",\n      },\n      midiProperties: {\n        confirmTargets: \"default\",\n        magicdam: true,\n        magiceffect: true,\n      },\n      // \"spellbook-assistant-manager\": data.flags[\"spellbook-assistant-manager\"],\n      \"spell-class-filter-for-5e\": data.flags[\"spell-class-filter-for-5e\"],\n      \"tidy5e-sheet-kgar\": data.flags[\"tidy5e-sheet-kgar\"],\n    },\n  };\n\n  const isGeneric = foundry.utils.getProperty(data, \"flags.ddbimporter.generic\");\n  const addSpellEffects = isGeneric\n    ? game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-add-spell-effects\")\n    : game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-add-spell-effects\");\n  foundry.utils.setProperty(data, \"flags.ddbimporter.addSpellEffects\", addSpellEffects);\n\n  // spell level\n  spell.system.level = data.definition.level;\n\n  // get the spell school\n  const school = DICTIONARY.spell.schools.find((s) => s.name === data.definition.school.toLowerCase());\n  spell.system.school = (school) ? school.id : null;\n\n  /**\n   * Gets the necessary spell components VSM + material\n   */\n  spell.system.properties = getComponents(data)?.properties ?? [];\n  spell.system.materials = getMaterials(data);\n  spell.system.preparation = getSpellPreparationMode(data);\n\n  const updateExisting = data.flags.ddbimporter.generic\n    ? game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\")\n    : false;\n  // eslint-disable-next-line require-atomic-updates\n  data.definition.description = await generateTable(spell.name, data.definition.description, updateExisting);\n\n  spell.system.description = {\n    value: parseTags(data.definition.description),\n    chat: \"\",\n  };\n\n  spell.system.source = DDBHelper.parseSource(data.definition);\n  spell.system.activation = getActivation(data);\n  spell.system.duration = getDuration(data);\n  spell.system.target = getTarget(data);\n  spell.system.range = getRange(data);\n  spell.system.actionType = getActionType(data);\n  const [damage, chatFlavor] = getDamage(data, spell);\n  spell.system.damage = damage;\n  spell.system.chatFlavor = chatFlavor;\n  spell.system.save = getSave(data);\n  spell.system.scaling = getSpellScaling(data);\n  spell.system.uses = getUses(data, character);\n  spell.system.consume.target = \"\";\n\n  // attach the spell ability id to the spell data so VTT always uses the\n  // correct one, useful if multi-classing and spells have different\n  // casting abilities\n  if (character && character.system.attributes.spellcasting !== data.flags.ddbimporter.dndbeyond.ability) {\n    spell.system.ability = data.flags.ddbimporter.dndbeyond.ability;\n    if (spell.system.save.scaling == \"spell\") {\n      spell.system.save.scaling = data.flags.ddbimporter.dndbeyond.ability;\n    }\n  }\n  if (spell.system.ability === null) spell.system.ability = \"\";\n\n  await spellEffectAdjustment(spell, addSpellEffects);\n  foundry.utils.setProperty(spell, \"flags.ddbimporter.effectsApplied\", true);\n\n  if (isGeneric || game.settings.get(SETTINGS.MODULE_ID, \"character-update-policy-create-companions\")) {\n    if (SETTINGS.COMPANIONS.COMPANION_SPELLS.includes(data.definition.name)) {\n      const ddbCompanionFactory = new DDBCompanionFactory(data.definition.description, {\n        type: \"spell\",\n        originDocument: spell,\n      });\n      await ddbCompanionFactory.parse();\n      await ddbCompanionFactory.updateOrCreateCompanions();\n      await ddbCompanionFactory.addCompanionsToDocuments([]);\n\n      logger.debug(`parsed companions for ${spell.name}`, {\n        factory: ddbCompanionFactory,\n        parsed: ddbCompanionFactory.companions,\n      });\n    }\n\n  }\n\n  return spell;\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport logger from \"../../logger.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport CompendiumHelper from \"../../lib/CompendiumHelper.js\";\n\nlet getEldritchInvocations = (ddb) => {\n  let damage = \"\";\n  let range = 0;\n\n  const eldritchBlastMods = DDBHelper.filterBaseModifiers(ddb, \"eldritch-blast\").filter((modifier) => modifier.isGranted);\n\n  eldritchBlastMods.forEach((mod) => {\n    switch (mod.subType) {\n      case \"bonus-damage\": {\n        // almost certainly CHA :D\n        const abilityModifierLookup = DICTIONARY.character.abilities.find((ability) => ability.id === mod.statId);\n        if (abilityModifierLookup) {\n          if (damage !== \"\") damage += \" + \";\n          damage += `@abilities.${abilityModifierLookup.value}.mod`;\n        } else if (mod.fixedValue) {\n          if (damage !== \"\") damage += \" + \";\n          damage += `${mod.fixedValue}`;\n        }\n        break;\n      }\n      case \"bonus-range\":\n        range = mod.value;\n        break;\n      default:\n        logger.warn(`Not yet able to process ${mod.subType}, please raise an issue.`);\n    }\n  });\n\n  return {\n    damage: damage,\n    range: range,\n  };\n};\n\nfunction getRangeAdjustmentMultiplier(ddb) {\n  const rangeAdjustmentMods = DDBHelper.filterBaseModifiers(ddb, \"bonus\", { subType: \"spell-attack-range-multiplier\" }).filter((modifier) => modifier.isGranted);\n\n  const multiplier = rangeAdjustmentMods.reduce((current, mod) => {\n    if (Number.isInteger(mod.fixedValue) && mod.fixedValue > current) {\n      current = mod.fixedValue;\n    } else if (Number.isInteger(mod.value) && mod.value > current) {\n      current = mod.value;\n    }\n    return current;\n  }, 1);\n\n  return multiplier;\n}\n\nfunction adjustRange(multiplier, spell) {\n  if (spell.system.actionType === \"rsak\" && Number.isInteger(spell.system.range?.value)) {\n    foundry.utils.setProperty(spell, \"system.range.value\", spell.system.range.value * multiplier);\n  }\n  return spell;\n}\n\nconst CR_DATA = {\n  \"Conjure Animals\": {\n    profiles: [\n      {\n        \"count\": \"1 * min(3, floor((@item.level - 1) / 2))\",\n        \"cr\": \"2\",\n        \"types\": [\"beast\"],\n      },\n      {\n        \"count\": \"2 * min(3, floor((@item.level - 1) / 2))\",\n        \"cr\": \"1\",\n        \"types\": [\"beast\"],\n      },\n      {\n        \"count\": \"4 * min(3, floor((@item.level - 1) / 2))\",\n        \"cr\": \"0.5\",\n        \"types\": [\"beast\"],\n      },\n      {\n        \"count\": \"8 * min(3, floor((@item.level - 1) / 2))\",\n        \"cr\": \"0.25\",\n        \"types\": [\"beast\"],\n      }\n    ],\n    creatureTypes: [\"beast\"],\n  },\n  \"Conjure Celestial\": {\n    profiles: [\n      {\n        \"count\": \"1\",\n        \"cr\": \"4\",\n        \"level\": {\n          \"min\": null,\n          \"max\": 8\n        },\n        \"types\": [\"celestial\"],\n      },\n      {\n        \"count\": \"1\",\n        \"cr\": \"5\",\n        \"level\": {\n          \"min\": 9,\n          \"max\": null,\n        },\n        \"types\": [\"celestial\"],\n      }\n    ],\n    creatureTypes: [],\n  },\n  \"Conjure Elemental\": {\n    profiles: [\n      {\n        \"count\": \"1\",\n        \"cr\": \"@item.level\",\n        \"types\": [\"elemental\"],\n      }\n    ],\n    creatureTypes: [\"elemental\"],\n  },\n  \"Conjure Fey\": {\n    profiles: [\n      {\n        \"count\": \"1\",\n        \"cr\": \"@item.level\",\n        \"types\": [\"fey\"],\n      }\n    ],\n    creatureTypes: [\"fey\"],\n  },\n  \"Conjure Minor Elementals\": {\n    profiles: [\n      {\n        \"count\": \"1 * min(3, floor((@item.level - 2) / 2))\",\n        \"cr\": \"2\",\n        \"types\": [\"elemental\"],\n      },\n      {\n        \"count\": \"2 * min(3, floor((@item.level - 2) / 2))\",\n        \"cr\": \"1\",\n        \"types\": [\"elemental\"],\n      },\n      {\n        \"count\": \"4 * min(3, floor((@item.level - 2) / 2))\",\n        \"cr\": \"0.5\",\n        \"types\": [\"elemental\"],\n      },\n      {\n        \"count\": \"8 * min(3, floor((@item.level - 2) / 2))\",\n        \"cr\": \"0.25\",\n        \"types\": [\"elemental\"],\n      }\n    ],\n    creatureTypes: [],\n  },\n  \"Conjure Woodland Beings\": {\n    profiles: [\n      {\n        \"count\": \"1 * min(3, floor((@item.level - 2) / 2))\",\n        \"cr\": \"2\",\n        \"types\": [\"fey\"],\n      },\n      {\n        \"count\": \"2 * min(3, floor((@item.level - 2) / 2))\",\n        \"cr\": \"1\",\n        \"types\": [\"fey\"],\n      },\n      {\n        \"count\": \"4 * min(3, floor((@item.level - 2) / 2))\",\n        \"cr\": \"0.5\",\n        \"types\": [\"fey\"],\n      },\n      {\n        \"count\": \"8 * min(3, floor((@item.level - 2) / 2))\",\n        \"cr\": \"0.25\",\n        \"types\": [\"fey\"],\n      },\n    ],\n    creatureTypes: [\"fey\"],\n  },\n  \"Summon Greater Demon\": {\n    profiles: [\n      {\n        \"count\": \"1\",\n        \"cr\": \"@item.level + 1\",\n        \"types\": [\"fiend\"],\n      }\n    ],\n    creatureTypes: [],\n  },\n  \"Summon Lesser Demons\": {\n    profiles: [\n      {\n        \"count\": \"2 * min(3, floor((@item.level - 2) / 2))\",\n        \"cr\": \"1\",\n        \"types\": [\"fiend\"],\n      },\n      {\n        \"count\": \"4 * min(3, floor((@item.level - 2) / 2))\",\n        \"cr\": \"0.5\",\n        \"types\": [\"fiend\"],\n      },\n      {\n        \"count\": \"8 * min(3, floor((@item.level - 2) / 2))\",\n        \"cr\": \"0.25\",\n        \"types\": [\"fiend\"],\n      },\n    ],\n    creatureTypes: [],\n  },\n  \"Infernal Calling\": {\n    profiles: [\n      {\n        \"count\": \"1\",\n        \"cr\": \"@item.level + 1\",\n        \"types\": [\"fiend\"],\n      }\n    ],\n    creatureTypes: [],\n  }\n};\n\nasync function addCRSummoning(documents) {\n  if (game.release.generation < 12) return documents;\n  logger.debug(`Checking spells for cr summoning..`);\n  for (const spell of documents) {\n    const name = spell.flags.ddbimporter?.originalName ?? spell.name;\n    switch (name) {\n      case \"Conjure Animals\":\n      case \"Conjure Celestial\":\n      case \"Conjure Elemental\":\n      case \"Conjure Fey\":\n      case \"Conjure Minor Elementals\":\n      case \"Conjure Woodland Beings\":\n      case \"Summon Greater Demon\":\n      case \"Infernal Calling\":\n      case \"Summon Lesser Demons\": {\n        spell.system.actionType = \"summ\";\n        spell.system.summons = {\n          prompt: true,\n          mode: \"cr\",\n          profiles: CR_DATA[name].profiles,\n          creatureTypes: CR_DATA[name].creatureTypes,\n        };\n        break;\n      }\n      // no default\n    }\n  };\n\n  return documents;\n}\n\nasync function findFamiliar(spell) {\n  const ddbCompendium = CompendiumHelper.getCompendiumType(\"monster\", false);\n  await ddbCompendium?.getIndex();\n\n  spell.system.actionType = \"summ\";\n  spell.system.summons = {\n    \"prompt\": true,\n    \"creatureTypes\": [\n      \"celestial\",\n      \"fey\",\n      \"fiend\"\n    ],\n    \"profiles\": [\n      {\n        \"name\": \"Bat\",\n        \"uuid\": ddbCompendium?.index.find((i) => i.name === \"Bat\")?.uuid ?? \"Compendium.dnd5e.monsters.Actor.qav2dvMIUiMQCCsy\",\n      },\n      {\n        \"name\": \"Cat\",\n        \"uuid\": ddbCompendium?.index.find((i) => i.name === \"Cat\")?.uuid ?? \"Compendium.dnd5e.monsters.Actor.hIf83RD3ZVW4Egfi\",\n      },\n      {\n        \"name\": \"Crab\",\n        \"uuid\": ddbCompendium?.index.find((i) => i.name === \"Crab\")?.uuid ?? \"Compendium.dnd5e.monsters.Actor.8RgUhb31VvjUNZU1\",\n      },\n      {\n        \"name\": \"Fish\",\n        \"uuid\": ddbCompendium?.index.find((i) => i.name === \"Quipper\")?.uuid ?? \"Compendium.dnd5e.monsters.Actor.nkyCGJ9wXeAZkyyz\",\n      },\n      {\n        \"name\": \"Frog\",\n        \"uuid\": ddbCompendium?.index.find((i) => i.name === \"Frog\")?.uuid ?? \"Compendium.dnd5e.monsters.Actor.EZgiprHXA2D7Uyb3\",\n      },\n      {\n        \"name\": \"Hawk\",\n        \"uuid\": ddbCompendium?.index.find((i) => i.name === \"Hawk\")?.uuid ?? \"Compendium.dnd5e.monsters.Actor.fnkPNfIpS62LqOu4\",\n      },\n      {\n        \"name\": \"Lizard\",\n        \"uuid\": ddbCompendium?.index.find((i) => i.name === \"Lizard\")?.uuid ?? \"Compendium.dnd5e.monsters.Actor.I2x01hzOjVN4NUjf\",\n      },\n      {\n        \"name\": \"Octopus\",\n        \"uuid\": ddbCompendium?.index.find((i) => i.name === \"Octopus\")?.uuid ?? \"Compendium.dnd5e.monsters.Actor.3UUNbGiG2Yf1ZPxM\",\n      },\n      {\n        \"name\": \"Owl\",\n        \"uuid\": ddbCompendium?.index.find((i) => i.name === \"Owl\")?.uuid ?? \"Compendium.dnd5e.monsters.Actor.d0prpsGSAorDadec\",\n      },\n      {\n        \"name\": \"Poisonous Snake\",\n        \"uuid\": ddbCompendium?.index.find((i) => i.name === \"Poisonous Snake\")?.uuid ?? \"Compendium.dnd5e.monsters.Actor.D5rwVIxmfFrdyyxT\",\n      },\n      {\n        \"name\": \"Rat\",\n        \"uuid\": ddbCompendium?.index.find((i) => i.name === \"Rat\")?.uuid ?? \"Compendium.dnd5e.monsters.Actor.pozQUPTnLZW8epox\",\n      },\n      {\n        \"name\": \"Raven\",\n        \"uuid\": ddbCompendium?.index.find((i) => i.name === \"Raven\")?.uuid ?? \"Compendium.dnd5e.monsters.Actor.LPdX5YLlwci0NDZx\",\n      },\n      {\n        \"name\": \"Sea Horse\",\n        \"uuid\": ddbCompendium?.index.find((i) => i.name === \"Sea Horse\")?.uuid ?? \"Compendium.dnd5e.monsters.Actor.FWSDiq9SZsdiBAa8\",\n      },\n      {\n        \"name\": \"Spider\",\n        \"uuid\": ddbCompendium?.index.find((i) => i.name === \"Spider\")?.uuid ?? \"Compendium.dnd5e.monsters.Actor.28gU50HtG8Kp7uIz\",\n      },\n      {\n        \"name\": \"Weasel\",\n        \"uuid\": ddbCompendium?.index.find((i) => i.name === \"Weasel\")?.uuid ?? \"Compendium.dnd5e.monsters.Actor.WOdeacKCYVhgLDuN\",\n      }\n    ],\n    \"creatureSizes\": [],\n    \"match\": {\n      \"attacks\": false,\n      \"proficiency\": false,\n      \"saves\": false\n    },\n    \"mode\": \"\"\n  };\n  return spell;\n}\n\n/**\n * Some spells we need to fix up or massage because they are modified\n * in interesting ways\n * @param {*} ddb\n * @param {*} documents\n */\n/* eslint-disable complexity */\nexport async function fixSpells(ddb, documents) {\n  // because the effect parsing happens before this, we need to fix some of the spell changes here\n  const usingEffects = ddb === null\n    ? game.settings.get(\"ddb-importer\", \"munching-policy-add-spell-effects\")\n    : game.settings.get(\"ddb-importer\", \"character-update-policy-add-spell-effects\");\n\n  const rangeMultiplier = ddb ? getRangeAdjustmentMultiplier(ddb) : 1;\n\n  for (let spell of documents) {\n    const name = spell.flags.ddbimporter?.originalName ?? spell.name;\n    logger.debug(`Checking spell ${name} for corrections...`);\n    switch (name) {\n      case \"Melf's Acid Arrow\":\n      case \"Acid Arrow\": {\n        if (spell.system.damage?.parts.length > 1) {\n          const baseDamage = foundry.utils.duplicate(spell.system.damage.parts[0]);\n          const otherDamage = foundry.utils.duplicate(spell.system.damage.parts[1]);\n          spell.system.damage.parts = [baseDamage];\n          spell.system.formula = otherDamage[0];\n        }\n        break;\n      }\n      case \"Aid\": {\n        spell.system.scaling = { mode: \"level\", formula: \"(@item.level - 2) * 5\" };\n        break;\n      }\n      case \"Armor of Agathys\": {\n        spell.system.actionType = \"util\";\n        spell.system.target.type = \"self\";\n        spell.system.damage.parts[0] = [\"5\", \"temphp\"];\n        spell.system.scaling = { mode: \"level\", formula: \"((@item.level - 1) * 5)\" };\n        break;\n      }\n      case \"Arms of Hadar\": {\n        spell.system.target.type = \"special\";\n        break;\n      }\n      case \"Absorb Elements\":\n        if (!usingEffects) {\n          spell.system.damage = { parts: [[\"1d6\", \"\"]], versatile: \"\", value: \"\" };\n          spell.system.target[\"value\"] = 1;\n        }\n        spell.system.chatFlavor = \"Uses the damage type of the triggered attack: Acid, Cold, Fire, Lightning, or Poison.\";\n        break;\n      case \"Booming Blade\":\n        if (!usingEffects) {\n          spell.system.damage = { parts: [[\"0\", \"thunder\"]], versatile: \"1d8\", value: \"\" };\n        }\n        spell.system.scaling = { mode: \"cantrip\", formula: \"1d8\" };\n        spell.system.actionType = \"other\";\n        spell.system.target.type = \"creature\";\n        spell.system.target.value = 1;\n        spell.system.target.units = \"\";\n        break;\n      case \"Bones of the Earth\": {\n        spell.system.target.value = 2.5;\n        break;\n      }\n      case \"Catapult\": {\n        foundry.utils.setProperty(spell, \"flags.midiProperties.nodam\", true);\n        break;\n      }\n      case \"Call Lightning\": {\n        if (usingEffects) {\n          spell.system.damage = { parts: [], versatile: \"\", value: \"\" };\n          spell.system.save.ability = \"\";\n        }\n        break;\n      }\n      // dnd beyond lists a damage for each type\n      case \"Chaos Bolt\":\n        spell.system.damage = { parts: [[\"2d8\", \"\"], [\"1d6\", \"\"]], versatile: \"\", value: \"\", };\n        break;\n      // dnd beyond lists a damage for each type\n      case \"Chromatic Orb\":\n        spell.system.damage = { parts: [[\"3d8\", \"\"]], versatile: \"\", value: \"\" };\n        spell.system.chatFlavor = \"Choose from Acid, Cold, Fire, Lightning, Poison, Thunder, or Acid\";\n        break;\n      case \"Color Spray\": {\n        if (!usingEffects) {\n          spell.system.damage = { parts: [[\"6d10\", \"\"]], versatile: \"\", value: \"\" };\n        }\n        spell.system.scaling = { mode: \"level\", formula: \"2d10\" };\n        break;\n      }\n      case \"Control Weather\": {\n        spell.system.target.type = \"self\";\n        spell.system.range = { value: 5, units: \"mi\", long: null };\n        break;\n      }\n      case \"Cloud of Daggers\":\n        spell.system.actionType = \"other\";\n        break;\n      case \"Darkvision\": {\n        spell.system.target.type = \"creature\";\n        break;\n      }\n      case \"Divine Favor\": {\n        spell.system.actionType = \"util\";\n        spell.system.target.type = \"self\";\n        break;\n      }\n      case \"Dragon's Breath\":\n        spell.system.damage = { parts: [[\"3d6\", \"\"]], versatile: \"\", value: \"\" };\n        spell.system.chatFlavor = \"Choose one of Acid, Cold, Fire, Lightning, or Poison.\";\n        break;\n      // Eldritch Blast is a special little kitten and has some fun Eldritch\n      // Invocations which can adjust it.\n      case \"Eldritch Blast\": {\n        if (!ddb) break;\n        const eldritchBlastMods = getEldritchInvocations(ddb);\n        if (eldritchBlastMods[\"damage\"] && eldritchBlastMods[\"damage\"] !== \"\") {\n          spell.system.damage.parts[0][0] += \" + \" + eldritchBlastMods[\"damage\"];\n        }\n        spell.system.range.value += eldritchBlastMods[\"range\"];\n        break;\n      }\n      case \"False Life\": {\n        spell.system.actionType = \"heal\";\n        spell.system.target.type = \"self\";\n        spell.system.damage.parts[0] = [\"1d4 + 4\", \"temphp\"];\n        spell.system.scaling = { mode: \"level\", formula: \"(@item.level - 1) * 5\" };\n        break;\n      }\n      case \"Find Familiar\": {\n        await findFamiliar(spell);\n        break;\n      }\n      case \"Guidance\": {\n        spell.system.target = { value: 1, units: \"\", type: \"creature\" };\n        break;\n      }\n      case \"Green-Flame Blade\":\n        if (!usingEffects) {\n          spell.system.damage = { parts: [[\"0\", \"fire\"]], versatile: \"@mod\", value: \"\" };\n        }\n        spell.system.scaling = { mode: \"cantrip\", formula: \"1d8\" };\n        spell.system.actionType = \"other\";\n        spell.system.target.type = \"creature\";\n        spell.system.target.value = 1;\n        spell.system.target.units = \"\";\n        break;\n      case \"Gust of Wind\":\n        spell.system.target = { value: 60, units: \"ft\", type: \"line\", width: 10 };\n        break;\n      case \"Goodberry\":\n        spell.system.damage = { parts: [[\"1\", \"healing\"]], versatile: \"\", value: \"\" };\n        break;\n      case \"Heat Metal\":\n        spell.system.actionType = \"save\";\n        break;\n      case \"Hex\": {\n        spell.system.actionType = \"other\";\n        if (usingEffects) {\n          spell.system.damage = { parts: [], versatile: \"\", value: \"\" };\n        }\n        break;\n      }\n      case \"Heroe's Feast\":\n      case \"Heroe’s Feast\":\n      case \"Heroes Feast\": {\n        spell.system.duration = { value: 1, units: \"day\" };\n        break;\n      }\n      case \"Heroism\": {\n        spell.system.damage.parts[0] = [\"@mod\", \"temphp\"];\n        break;\n      }\n      case \"Hunter's Mark\":\n      case \"Hunter’s Mark\": {\n        spell.system.actionType = \"other\";\n        if (usingEffects) {\n          spell.system.damage = { parts: [], versatile: \"\", value: \"\" };\n        } else {\n          spell.system.damage = { parts: [[\"1d6\", \"\"]], versatile: \"\", value: \"\" };\n        }\n        break;\n      }\n      case \"Ice Storm\":\n        spell.system.damage.parts[0][0] = \"(@item.level - 2)d8[bludgeoning]\";\n        spell.system.scaling = { mode: \"\", formula: \"\" };\n        break;\n      case \"Flaming Sphere\":\n        spell.system.target[\"value\"] = 2.5;\n        break;\n      case \"Light\": {\n        spell.system.target = { value: 1, width: null, units: \"\", type: \"object\" };\n        break;\n      }\n      case \"Magic Missile\":\n        spell.system.actionType = \"other\";\n        break;\n      case \"Produce Flame\":\n        spell.system.range = { value: 30, units: \"ft\", long: null };\n        break;\n      case \"Primal Savagery\":\n        spell.system.target = { value: 1, width: null, units: \"\", type: \"creature\" };\n        spell.system.range = { value: 5, units: \"ft\", long: null };\n        break;\n      case \"Pyrotechnics\":\n        spell.system.target[\"value\"] = 15;\n        break;\n      case \"Protection from Energy\": {\n        spell.system.target.type = \"creature\";\n        break;\n      }\n      case \"Ray of Enfeeblement\":\n        spell.system.actionType = \"rsak\";\n        break;\n      case \"Shadow of Moil\":\n        spell.system.actionType = \"other\";\n        break;\n      case \"Searing Smite\": {\n        if (spell.system.damage.parts.length > 1) {\n          spell.system.formula = spell.system.damage.parts[1][0];\n          spell.system.damage.parts = [spell.system.damage.parts[0]];\n        }\n        spell.system.scaling = { mode: \"level\", formula: \"1d6\" };\n        break;\n      }\n      case \"Spirit Guardians\": {\n        if (!ddb) break;\n        const radiantAlignments = [1, 2, 3, 4, 5, 6, 10, 14];\n        const necroticAlignments = [7, 8, 9, 11];\n        if (radiantAlignments.includes(ddb.character.alignmentId)) {\n          foundry.utils.setProperty(spell, \"flags.ddbimporter.damageType\", \"radiant\");\n          spell.system.damage = { parts: [[\"3d8\", \"radiant\"]], versatile: \"\", value: \"\" };\n        } else if (necroticAlignments.includes(ddb.character.alignmentId)) {\n          foundry.utils.setProperty(spell, \"flags.ddbimporter.damageType\", \"necrotic\");\n          spell.system.damage = { parts: [[\"3d8\", \"necrotic\"]], versatile: \"\", value: \"\" };\n        }\n        break;\n      }\n      case \"Spiritual Weapon\":\n      case \"Spirit Shroud\": {\n        spell.system.damage.parts = [[\"(floor(@item.level / 2))d8 + @mod\"][\"radiant\"]];\n        spell.system.scaling = { mode: \"none\", formula: \"\" };\n        // spell.system.scaling = { mode: \"level\", formula: \"(floor((@item.level - 1)/2))d8\" };\n        break;\n      }\n      case \"Spike Growth\": {\n        spell.system.actionType = \"other\";\n        break;\n      }\n      case \"Sleep\": {\n        if (!usingEffects) {\n          spell.system.damage = { parts: [[\"5d8\", \"\"]], versatile: \"\", value: \"\" };\n        }\n        spell.system.scaling = { mode: \"level\", formula: \"2d8\" };\n        break;\n      }\n      case \"Tidal Wave\":\n        spell.system.target = {\n          \"value\": \"30\",\n          \"units\": \"ft\",\n          \"type\": \"line\",\n          \"width\": 10,\n          \"prompt\": true\n        };\n        break;\n      case \"Thorn Whip\": {\n        spell.system.actionType = \"msak\";\n        break;\n      }\n      // The target/range input data are incorrect on some AOE spells centred\n      // on self.\n      // Range is self with an AoE target of 15 ft cube\n      // i.e. affects all creatures within 5 ft of caster\n      case \"Thunderclap\":\n      case \"Word of Radiance\":\n        spell.system.range = { value: null, units: \"spec\", long: null };\n        spell.system.target = { value: 15, units: \"ft\", type: \"cube\" };\n        break;\n      case \"Thunder Step\":\n        spell.system.range = { value: null, units: \"spec\", long: null };\n        break;\n      case \"Toll the Dead\":\n        spell.system.scaling = { mode: \"cantrip\", formula: \"\" };\n        break;\n      case \"Vitriolic Sphere\": {\n        spell.system.scaling = { mode: \"level\", formula: \"2d4\" };\n        break;\n      }\n      // no default\n    }\n\n    if (rangeMultiplier != 1) {\n      spell = adjustRange(rangeMultiplier, spell);\n    }\n    if (ddb) DDBHelper.addCustomValues(ddb, spell);\n  };\n\n  await addCRSummoning(documents);\n}\n/* eslint-enable complexity */\n","import { DirectoryPicker } from \"./lib/DirectoryPicker.js\";\nimport DICTIONARY from \"./dictionary.js\";\nimport PatreonHelper from \"./lib/PatreonHelper.js\";\n\nconst COMPENDIUMS = [\n  {\n    title: \"Backgrounds\",\n    setting: \"entity-background-compendium\",\n    type: \"Item\",\n    image: \"https://media.dndbeyond.com/mega-menu/86797d176a398d9f2f05b75b2f54b6dd.jpg\",\n    auto: true,\n    types: [\"feat\"],\n  },\n  {\n    title: \"Classes\",\n    setting: \"entity-class-compendium\",\n    type: \"Item\",\n    image: \"https://media.dndbeyond.com/mega-menu/b778ff3ca3f18e5f75ad4b348615cab5.jpg\",\n    auto: true,\n    types: [\"class\"],\n  },\n  {\n    title: \"Subclasses\",\n    setting: \"entity-subclass-compendium\",\n    type: \"Item\",\n    image: \"https://media.dndbeyond.com/mega-menu/b778ff3ca3f18e5f75ad4b348615cab5.jpg\",\n    auto: true,\n    types: [\"subclass\"],\n  },\n  {\n    title: \"Class Features\",\n    setting: \"entity-feature-compendium\",\n    type: \"Item\",\n    image: \"https://media.dndbeyond.com/mega-menu/b778ff3ca3f18e5f75ad4b348615cab5.jpg\",\n    auto: true,\n    types: [\"feat\", \"weapon\"],\n  },\n  {\n    title: \"Feats\",\n    setting: \"entity-feat-compendium\",\n    type: \"Item\",\n    image: \"https://media.dndbeyond.com/mega-menu/a69ab5bf67b03308893b582dbef700e9.jpg\",\n    auto: true,\n    types: [\"feat\"],\n  },\n  {\n    title: \"Items\",\n    setting: \"entity-item-compendium\",\n    type: \"Item\",\n    image: \"https://media.dndbeyond.com/mega-menu/c06b79eae8ee234d1cea4688e117152b.jpg\",\n    auto: true,\n    types: [\n      \"weapon\",\n      \"equipment\",\n      \"consumable\",\n      \"tool\",\n      \"loot\",\n      \"feat\",\n      \"container\",\n    ],\n  },\n  {\n    title: \"Monsters\",\n    setting: \"entity-monster-compendium\",\n    type: \"Actor\",\n    image: \"https://media.dndbeyond.com/mega-menu/36ee49066331fc36e3b37147d123463a.jpg\",\n    auto: true,\n    types: [\"npc\"],\n  },\n  {\n    title: \"Vehicles\",\n    setting: \"entity-vehicle-compendium\",\n    type: \"Actor\",\n    image: \"https://media.dndbeyond.com/mega-menu/e95485e82519aa807da5011d42b8c9d3.jpg\",\n    auto: true,\n    types: [\"npc\", \"vehicle\"],\n  },\n  {\n    title: \"Races\",\n    setting: \"entity-race-compendium\",\n    type: \"Item\",\n    image: \"https://media.dndbeyond.com/mega-menu/bfe65858aaa13919ce3d86d938bcb05b.jpg\",\n    auto: true,\n    types: [\"race\"],\n  },\n  {\n    title: \"Racial Traits\",\n    setting: \"entity-trait-compendium\",\n    type: \"Item\",\n    image: \"https://media.dndbeyond.com/mega-menu/bfe65858aaa13919ce3d86d938bcb05b.jpg\",\n    auto: true,\n    types: [\"race\", \"feat\"],\n  },\n  {\n    title: \"Spells\",\n    setting: \"entity-spell-compendium\",\n    type: \"Item\",\n    image: \"https://media.dndbeyond.com/mega-menu/8894f93deeca83cdf0a6df3f36ffb52e.jpg\",\n    auto: true,\n    types: [\"spell\"],\n  },\n  {\n    title: \"Tables\",\n    setting: \"entity-table-compendium\",\n    type: \"RollTable\",\n    image: \"https://media.dndbeyond.com/mega-menu/f1a2343aee786f21827daf763c60d30f.jpg\",\n    auto: true,\n    types: [],\n  },\n  {\n    title: \"Override\",\n    setting: \"entity-override-compendium\",\n    type: \"Item\",\n    image: \"https://media.dndbeyond.com/mega-menu/e116466f43544117a34ed5f642c680f7.jpg\",\n    auto: true,\n    types: [\n      \"weapon\",\n      \"equipment\",\n      \"consumable\",\n      \"tool\",\n      \"loot\",\n      \"feat\",\n      \"container\",\n      \"spell\",\n      \"feat\",\n      \"class\",\n      \"subclass\",\n    ],\n  },\n  {\n    title: \"Adventures\",\n    setting: \"entity-adventure-compendium\",\n    type: \"Adventure\",\n    image: \"https://media.dndbeyond.com/mega-menu/4af3d4c196428ab0809cf71d332d540d.png\",\n    auto: false,\n    types: [],\n  },\n  {\n    title: \"Journals\",\n    setting: \"entity-journal-compendium\",\n    type: \"JournalEntry\",\n    image: \"https://media.dndbeyond.com/mega-menu/4af3d4c196428ab0809cf71d332d540d.png\",\n    auto: false,\n    types: [],\n  },\n  {\n    title: \"Summons\",\n    setting: \"entity-summons-compendium\",\n    type: \"Actor\",\n    image: \"https://media.dndbeyond.com/mega-menu/4af3d4c196428ab0809cf71d332d540d.png\",\n    auto: true,\n    types: [\"npc\"],\n  },\n];\n\nconst SRD_COMPENDIUM_LOOKUPS = [\n  { type: \"inventory\", name: \"dnd5e.items\" },\n  { type: \"spells\", name: \"dnd5e.spells\" },\n  { type: \"features\", name: \"dnd5e.classfeatures\" },\n  { type: \"races\", name: \"dnd5e.races\" },\n  { type: \"traits\", name: \"dnd5e.races\" },\n  { type: \"features\", name: \"dnd5e.classfeatures\" },\n  { type: \"feat\", name: \"dnd5e.classfeatures\" },\n  { type: \"feats\", name: \"dnd5e.classfeatures\" },\n  { type: \"classes\", name: \"dnd5e.classes\" },\n  { type: \"subclasses\", name: \"dnd5e.subclasses\" },\n  { type: \"weapon\", name: \"dnd5e.items\" },\n  { type: \"consumable\", name: \"dnd5e.items\" },\n  { type: \"tool\", name: \"dnd5e.items\" },\n  { type: \"loot\", name: \"dnd5e.items\" },\n  { type: \"container\", name: \"dnd5e.items\" },\n  { type: \"spell\", name: \"dnd5e.spells\" },\n  { type: \"equipment\", name: \"dnd5e.items\" },\n  { type: \"monsters\", name: \"dnd5e.monsters\" },\n  { type: \"monsterfeatures\", name: \"dnd5e.monsterfeatures\" },\n  { type: \"backgrounds\", name: \"dnd5e.backgrounds\" },\n];\n\nconst FOUNDRY_COMPENDIUM_MAP = {\n  \"classes\": [\n    \"dnd5e.classes\",\n    \"dnd-tashas-cauldron.tcoe-character-options\",\n  ],\n  \"spells\": [\n    \"dnd5e.spells\",\n  ],\n  \"items\": [\n    \"dnd5e.items\",\n    \"dnd-tashas-cauldron.tcoe-magic-items\",\n  ],\n};\n\nconst SUPPORTED_FLAG_GROUPS = [\n  \"advancedspelleffects\",\n  \"arbron-summoner\",\n  \"autoanimations\",\n  \"automated-evocations\",\n  \"automated-polymorpher\",\n  \"boomingBladeChoice\",\n  \"cf\",\n  \"dae\",\n  \"enhancedcombathud\",\n  \"favtab\",\n  \"forien-unidentified-items\",\n  \"gm-notes\",\n  \"gng\",\n  \"greenFlameBladeChoice\",\n  \"GritNGlory\",\n  \"inventory-plus\",\n  \"itemacro\",\n  \"itemmacro\",\n  \"levels-3d-preview\",\n  \"maestro\",\n  \"mess\",\n  \"midi-qol\",\n  \"obsidian\",\n  \"siftoolkit\",\n  \"spell-class-filter-for-5e\",\n  \"tidy5e-sheet-kgar\",\n  \"spellbook-assistant-manager\",\n  \"tagger\",\n  \"tidy5e-sheet\",\n];\n\nconst EFFECTS_IGNORE_FLAG_GROUPS = [\n  \"dae\",\n  \"midi-qol\",\n  \"itemacro\",\n  \"itemmacro\",\n];\n\nconst GAME_FOLDER_LOOKUPS = [\n  {\n    type: \"itemSpells\",\n    folder: \"magic-item-spells\",\n    itemType: \"spell\",\n  },\n  {\n    type: \"magicItems\",\n    folder: \"magic-items\",\n    itemType: \"item\",\n  },\n  {\n    type: \"spells\",\n    folder: \"spell\",\n    itemType: \"spell\",\n  },\n  {\n    type: \"monsters\",\n    folder: \"npc\",\n    itemType: \"actor\",\n  },\n];\n\nconst COMPENDIUM_REMOVE_FLAGS = [\n  \"flags.ddbimporter.overrideId\",\n  \"flags.ddbimporter.ignoreItemImport\",\n  \"flags.ddbimporter.retainResourceConsumption\",\n  \"flags.ddbimporter.ignoreIcon\",\n];\n\nconst URLS = {\n  BASE: \"ddb.mrprimate.co.uk\",\n  PROXY: \"https://proxy.ddb.mrprimate.co.uk\",\n  CORS: \"https://images.ddb.mrprimate.co.uk/\",\n  DYNAMIC: \"https://dynamic.ddb.mrprimate.co.uk\",\n};\n\nconst MUNCH_DEFAULTS = [\n  { name: \"munching-policy-update-existing\", needed: true },\n  { name: \"munching-policy-use-srd\", needed: false },\n  { name: \"munching-policy-use-inbuilt-icons\", needed: true },\n  { name: \"munching-policy-use-srd-icons\", needed: false },\n  { name: \"munching-policy-use-srd-monster-images\", needed: false },\n  { name: \"munching-policy-download-images\", needed: true },\n  { name: \"munching-policy-remote-images\", needed: false },\n  { name: \"munching-policy-hide-description\", needed: false },\n  { name: \"munching-policy-monster-items\", needed: false },\n  { name: \"munching-policy-update-images\", needed: false },\n];\n\nconst FILTER_SECTIONS = [\"classes\", \"race\", \"features\", \"actions\", \"inventory\", \"spells\"];\n\nconst COMPANION_SPELLS = [\n  \"Summon Aberration\",\n  \"Summon Beast\",\n  \"Summon Celestial\",\n  \"Summon Construct\",\n  \"Summon Elemental\",\n  \"Summon Fey\",\n  \"Summon Fiend\",\n  \"Summon Shadowspawn\",\n  \"Summon Undead\",\n  \"Summon Draconic Spirit\",\n  // \"Spirit of Death\",\n];\nconst COMPANION_FEATURES = [\n  \"Steel Defender\",\n  \"Artificer Infusions\",\n  \"Summon Wildfire Spirit\",\n  // \"Primal Companion\",\n  \"Drake Companion\",\n  \"Drake Companion: Summon\",\n];\nconst COMPANION_OPTIONS = {\n  \"Primal Companion\": [\n    \"Beast of the Land\",\n    \"Beast of the Sea\",\n    \"Beast of the Sky\",\n  ],\n};\n\nconst DISABLE_FOUNDRY_UPGRADE = {\n  applyFeatures: false,\n  addFeatures: false,\n  promptAddFeatures: false,\n};\n\n// reference to the D&D Beyond popup\nconst POPUPS = {\n  json: null,\n  web: null,\n};\n\nconst MODULE_ID = \"ddb-importer\";\n\nfunction activeUpdate() {\n  const tiers = PatreonHelper.calculateAccessMatrix(PatreonHelper.getPatreonTier());\n  const available = tiers.god || tiers.undying || tiers.experimentalMid;\n  if (!available) return false;\n  const dynamicSync = game.settings.get(MODULE_ID, \"dynamic-sync\");\n  const updateUser = game.settings.get(MODULE_ID, \"dynamic-sync-user\");\n  const gmSyncUser = game.user.isGM && game.user.id == updateUser;\n  return dynamicSync && gmSyncUser;\n}\n\nconst SETTINGS = {\n  MODULE_ID: \"ddb-importer\",\n  FLAG_NAME: \"ddbimporter\",\n  MODULE_NAME: \"D&D Beyond Importer\",\n  DICTIONARY,\n  COMPENDIUMS: COMPENDIUMS,\n  SRD_COMPENDIUMS: SRD_COMPENDIUM_LOOKUPS,\n  FOUNDRY_COMPENDIUM_MAP,\n  EFFECTS_IGNORE_FLAG_GROUPS,\n  SUPPORTED_FLAG_GROUPS,\n  GAME_FOLDER_LOOKUPS,\n  COMPENDIUM_REMOVE_FLAGS,\n  ADVENTURE_FLAG: \"isDDBAdventure\",\n  ADVENTURE_CSS: \"ddbAdventure\",\n  COMPANIONS: {\n    COMPANION_FEATURES,\n    COMPANION_SPELLS,\n    COMPANION_OPTIONS,\n  },\n  URLS,\n  POPUPS,\n  DISABLE_FOUNDRY_UPGRADE,\n  FILTER_SECTIONS,\n  MUNCH_DEFAULTS,\n  DEFAULT_SETTINGS: {\n    // these settigs are loaded during renderSidebarTab\n    EARLY: {\n      \"log-level\": {\n        name: \"ddb-importer.settings.log-level.name\",\n        hint: \"ddb-importer.settings.log-level.hint\",\n        scope: \"world\",\n        config: true,\n        type: String,\n        choices: {\n          DEBUG: \"DEBUG\",\n          INFO: \"INFO\",\n          WARN: \"WARN\",\n          ERR: \"ERROR \",\n          OFF: \"OFF\",\n        },\n        default: \"INFO\",\n      },\n      \"show-munch-top\": {\n        name: \"ddb-importer.settings.show-munch-top.name\",\n        hint: \"ddb-importer.settings.show-munch-top.hint\",\n        scope: \"world\",\n        config: true,\n        type: Boolean,\n        default: true,\n      },\n      \"patreon-tier\": {\n        scope: \"world\",\n        config: false,\n        type: String,\n        default: null,\n      },\n      \"custom-proxy\": {\n        name: \"ddb-importer.settings.custom-proxy.name\",\n        hint: \"ddb-importer.settings.custom-proxy.hint\",\n        scope: \"world\",\n        config: false,\n        type: Boolean,\n        default: false,\n        requiresReload: true,\n      },\n      \"encounter-muncher-enabled\": {\n        scope: \"world\",\n        config: false,\n        type: Boolean,\n        default: true,\n        requiresReload: true,\n      },\n      \"developer-mode\": {\n        scope: \"world\",\n        config: false,\n        type: Boolean,\n        default: false,\n      },\n      \"add-ddb-languages\": {\n        name: \"ddb-importer.settings.add-ddb-languages.name\",\n        hint: \"ddb-importer.settings.add-ddb-languages.hint\",\n        scope: \"world\",\n        config: true,\n        type: Boolean,\n        default: true,\n      },\n    },\n    // ready settings\n    READY: {\n      // settings for settings management\n      SETTINGS: {\n        \"auto-create-compendium\": {\n          type: Boolean,\n          default: true,\n        },\n      },\n      COMPENDIUMS: Object.fromEntries(\n        COMPENDIUMS.map((comp) => [comp.setting, {\n          name: comp.title,\n          type: String,\n          default: `DDB ${comp.title}`,\n        }])\n      ),\n      // dir locations\n      DIRECTORIES: {\n        \"image-upload-directory\": {\n          name: \"ddb-importer.settings.image-upload-directory.name\",\n          hint: \"ddb-importer.settings.image-upload-directory.hint\",\n          type: DirectoryPicker.Directory,\n          default: \"[data] ddb-images/characters\",\n        },\n        \"other-image-upload-directory\": {\n          name: \"ddb-importer.settings.other-image-upload-directory.name\",\n          hint: \"ddb-importer.settings.other-image-upload-directory.hint\",\n          type: DirectoryPicker.Directory,\n          default: \"[data] ddb-images/other\",\n        },\n        \"frame-image-upload-directory\": {\n          name: \"ddb-importer.settings.frame-image-upload-directory.name\",\n          hint: \"ddb-importer.settings.frame-image-upload-directory.hint\",\n          type: DirectoryPicker.Directory,\n          default: \"[data] ddb-images/frames\",\n        },\n        \"adventure-import-path\": {\n          name: \"ddb-importer.settings.adventure-import-path.name\",\n          hint: \"ddb-importer.settings.adventure-import-path.hint\",\n          default: \"[data] adventures/import\",\n          type: DirectoryPicker.Directory,\n        },\n        \"adventure-upload-path\": {\n          name: \"ddb-importer.settings.adventure-upload-path.name\",\n          hint: \"ddb-importer.settings.adventure-upload-path.hint\",\n          default: \"[data] ddb-images/adventures\",\n          type: DirectoryPicker.Directory,\n        },\n        \"adventure-misc-path\": {\n          name: \"ddb-importer.settings.adventure-misc-path.name\",\n          hint: \"ddb-importer.settings.adventure-misc-path.hint\",\n          default: \"[data] ddb-images/adventures/misc\",\n          type: DirectoryPicker.Directory,\n        },\n      },\n      UI: {\n        \"monster-link-title\": {\n          name: \"ddb-importer.settings.monster-link-title.name\",\n          hint: \"ddb-importer.settings.monster-link-title.hint\",\n          config: true,\n          type: Boolean,\n          default: true,\n        },\n        \"character-link-title\": {\n          name: \"ddb-importer.settings.character-link-title.name\",\n          hint: \"ddb-importer.settings.character-link-title.hint\",\n          config: true,\n          type: Boolean,\n          default: false,\n        },\n        \"link-title-colour-white\": {\n          name: \"ddb-importer.settings.link-title-colour-white.name\",\n          hint: \"ddb-importer.settings.link-title-colour-white.hint\",\n          config: true,\n          type: Boolean,\n          default: false,\n        },\n        \"show-munch-top\": {\n          name: \"ddb-importer.settings.show-munch-top.name\",\n          hint: \"ddb-importer.settings.show-munch-top.hint\",\n          config: true,\n          type: Boolean,\n          default: true,\n        },\n        \"show-image-to-players\": {\n          name: \"ddb-importer.settings.show-image-to-players.name\",\n          hint: \"ddb-importer.settings.show-image-to-players.hint\",\n          config: true,\n          type: Boolean,\n          default: true,\n        },\n        \"show-read-alouds-button\": {\n          name: \"ddb-importer.settings.show-read-alouds-button.name\",\n          hint: \"ddb-importer.settings.show-read-alouds-button.hint\",\n          config: true,\n          type: Boolean,\n          default: true,\n        },\n      },\n      PERMISSIONS: {\n        \"restrict-to-trusted\": {\n          name: \"ddb-importer.settings.restrict-to-trusted.name\",\n          hint: \"ddb-importer.settings.restrict-to-trusted.hint\",\n          config: true,\n          type: Boolean,\n          default: false,\n        },\n        \"allow-all-sync\": {\n          name: \"ddb-importer.settings.allow-all-sync.name\",\n          hint: \"ddb-importer.settings.allow-all-sync.hint\",\n          config: true,\n          type: Boolean,\n          default: false,\n        },\n      },\n      PARSING: {\n        \"show-resource-chooser-default\": {\n          name: \"ddb-importer.settings.show-resource-chooser-default.name\",\n          hint: \"ddb-importer.settings.show-resource-chooser-default.hint\",\n          config: true,\n          type: Boolean,\n          default: false,\n        },\n        \"use-full-source\": {\n          name: \"ddb-importer.settings.use-full-source.name\",\n          hint: \"ddb-importer.settings.use-full-source.hint\",\n          config: true,\n          type: Boolean,\n          default: true,\n        },\n        \"use-damage-hints\": {\n          name: \"ddb-importer.settings.use-damage-hints.name\",\n          hint: \"ddb-importer.settings.use-damage-hints.hint\",\n          config: true,\n          type: Boolean,\n          default: true,\n        },\n        \"add-damage-restrictions-to-hints\": {\n          name: \"ddb-importer.settings.add-damage-restrictions-to-hints.name\",\n          hint: \"ddb-importer.settings.add-damage-restrictions-to-hints.hint\",\n          config: true,\n          type: Boolean,\n          default: true,\n        },\n        \"embed-macros\": {\n          name: \"ddb-importer.settings.embed-macros.name\",\n          hint: \"ddb-importer.settings.embed-macros.hint\",\n          config: true,\n          type: Boolean,\n          default: true,\n        },\n        \"no-item-macros\": {\n          name: \"ddb-importer.settings.no-item-macros.name\",\n          hint: \"ddb-importer.settings.no-item-macros.hint\",\n          config: true,\n          type: Boolean,\n          default: false,\n        },\n        \"add-description-to-chat\": {\n          name: \"ddb-importer.settings.add-description-to-chat.name\",\n          hint: \"ddb-importer.settings.add-description-to-chat.hint\",\n          type: Boolean,\n          default: false,\n        },\n        \"use-loose-srd-reference-matching\": {\n          name: \"ddb-importer.settings.use-loose-srd-reference-matching.name\",\n          hint: \"ddb-importer.settings.use-loose-srd-reference-matching.hint\",\n          config: true,\n          type: Boolean,\n          default: true,\n        },\n        \"use-super-loose-srd-reference-matching\": {\n          // name: \"ddb-importer.settings.use-super-loose-srd-reference-matching.name\",\n          // hint: \"ddb-importer.settings.use-super-loose-srd-reference-matching.hint\",\n          config: false,\n          type: Boolean,\n          default: false,\n        },\n        \"append-chris-premade-effect-description\": {\n          name: \"ddb-importer.settings.append-chris-premade-effect-description.name\",\n          hint: \"ddb-importer.settings.append-chris-premade-effect-description.hint\",\n          config: true,\n          type: Boolean,\n          default: false,\n        }\n      },\n      // ????\n      MISC: {\n        \"use-webp\": {\n          name: \"ddb-importer.settings.use-webp.name\",\n          hint: \"ddb-importer.settings.use-webp.hint\",\n          type: Boolean,\n          default: false,\n        },\n        \"webp-quality\": {\n          name: \"ddb-importer.settings.webp-quality.name\",\n          hint: \"ddb-importer.settings.webp-quality.hint\",\n          type: Number,\n          default: 0.9,\n        },\n        \"settings-call-muncher\": {\n          type: Boolean,\n          default: false,\n        },\n        \"update-check\": {\n          name: \"ddb-importer.settings.update-check.name\",\n          config: true,\n          type: Boolean,\n          default: true,\n        },\n        \"use-deep-file-paths\": {\n          name: \"ddb-importer.settings.use-deep-file-paths.name\",\n          hint: \"ddb-importer.settings.use-deep-file-paths.hint\",\n          type: Boolean,\n          default: false,\n          // requiresReload: true,\n        },\n      },\n      // character settings\n      CHARACTER: {\n        IMPORT: {\n          \"character-update-policy-use-hp-max-for-rolled-hp\": {\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-create-companions\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"pact-spells-prepared\": {\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-add-character-effects\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-add-item-effects\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-add-spell-effects\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-use-existing\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-ignore-non-ddb-items\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-use-override\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-use-srd\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-name\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-hp\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-hit-die\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-class\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-feat\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-weapon\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-equipment\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-bio\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-xp\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-spell-use\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-languages\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-import-extras\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-inventory\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-currency\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-spell\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-image\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-use-ddb-spell-icons\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-use-ddb-generic-item-icons\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-use-ddb-item-icons\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-use-inbuilt-icons\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-use-srd-icons\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-use-full-description\": {\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"character-update-policy-use-action-and-feature\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          // \"character-update-policy-use-actions-as-features\": {\n          //   scope: \"player\",\n          //   type: Boolean,\n          //   default: true,\n          // },\n          \"character-update-policy-dae-effect-copy\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-active-effect-copy\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-active-effect-character-copy\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-policy-use-chris-premades\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"character-update-include-versatile-features\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n        },\n        SYNC: {\n          \"sync-policy-currency\": {\n            name: \"ddb-importer.settings.sync-policy-currency.name\",\n            hint: \"ddb-importer.settings.sync-policy-currency.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"sync-policy-hitpoints\": {\n            name: \"ddb-importer.settings.sync-policy-hitpoints.name\",\n            hint: \"ddb-importer.settings.sync-policy-hitpoints.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"sync-policy-hitdice\": {\n            name: \"ddb-importer.settings.sync-policy-hitdice.name\",\n            hint: \"ddb-importer.settings.sync-policy-hitdice.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"sync-policy-action-use\": {\n            name: \"ddb-importer.settings.sync-policy-action-use.name\",\n            hint: \"ddb-importer.settings.sync-policy-action-use.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"sync-policy-inspiration\": {\n            name: \"ddb-importer.settings.sync-policy-inspiration.name\",\n            hint: \"ddb-importer.settings.sync-policy-inspiration.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"sync-policy-condition\": {\n            name: \"ddb-importer.settings.sync-policy-condition.name\",\n            hint: \"ddb-importer.settings.sync-policy-condition.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"sync-policy-deathsaves\": {\n            name: \"ddb-importer.settings.sync-policy-deathsaves.name\",\n            hint: \"ddb-importer.settings.sync-policy-deathsaves.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"sync-policy-spells-prepared\": {\n            name: \"ddb-importer.settings.sync-policy-spells-prepared.name\",\n            hint: \"ddb-importer.settings.sync-policy-spells-prepared.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"sync-policy-spells-slots\": {\n            name: \"ddb-importer.settings.sync-policy-spells-slots.name\",\n            hint: \"ddb-importer.settings.sync-policy-spells-slots.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"sync-policy-spells-sync\": {\n            name: \"ddb-importer.settings.sync-policy-spells-sync.name\",\n            hint: \"ddb-importer.settings.sync-policy-spells-sync.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"sync-policy-equipment\": {\n            name: \"ddb-importer.settings.sync-policy-equipment.name\",\n            hint: \"ddb-importer.settings.sync-policy-equipment.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n          \"sync-policy-xp\": {\n            name: \"ddb-importer.settings.sync-policy-xp.name\",\n            hint: \"ddb-importer.settings.sync-policy-xp.hint\",\n            scope: \"player\",\n            type: Boolean,\n            default: true,\n          },\n        },\n        DYNAMIC_SYNC: {\n          \"dynamic-sync-policy-currency\": {\n            type: Boolean,\n            default: true,\n          },\n          \"dynamic-sync-policy-hitpoints\": {\n            type: Boolean,\n            default: true,\n          },\n          \"dynamic-sync-policy-hitdice\": {\n            type: Boolean,\n            default: true,\n          },\n          \"dynamic-sync-policy-action-use\": {\n            type: Boolean,\n            default: true,\n          },\n          \"dynamic-sync-policy-inspiration\": {\n            type: Boolean,\n            default: true,\n          },\n          \"dynamic-sync-policy-condition\": {\n            type: Boolean,\n            default: true,\n          },\n          \"dynamic-sync-policy-deathsaves\": {\n            type: Boolean,\n            default: true,\n          },\n          \"dynamic-sync-policy-spells-prepared\": {\n            type: Boolean,\n            default: true,\n          },\n          \"dynamic-sync-policy-spells-slots\": {\n            type: Boolean,\n            default: true,\n          },\n          \"dynamic-sync-policy-spells-sync\": {\n            type: Boolean,\n            default: true,\n          },\n          \"dynamic-sync-policy-equipment\": {\n            type: Boolean,\n            default: true,\n          },\n          \"dynamic-sync-policy-xp\": {\n            type: Boolean,\n            default: true,\n          },\n        },\n      },\n      // muncher settings\n      MUNCHER: {\n        COMPENDIUM_FOLDERS: {\n          \"top-level-compendium-folder\": {\n            name: \"ddb-importer.settings.top-level-compendium-folder.name\",\n            hint: \"ddb-importer.settings.top-level-compendium-folder.hint\",\n            config: true,\n            type: Boolean,\n            default: true,\n          },\n          \"munching-selection-compendium-folders-monster\": {\n            name: \"ddb-importer.settings.munching-selection-compendium-folders-monster.name\",\n            hint: \"ddb-importer.settings.munching-selection-compendium-folders-monster.hint\",\n            config: true,\n            type: String,\n            choices: {\n              TYPE: \"Creature type, e.g. Undead\",\n              CR: \"Challenge Rating\",\n              ALPHA: \"Alphabetical\",\n            },\n            default: \"TYPE\",\n          },\n          \"munching-selection-compendium-folders-spell\": {\n            name: \"ddb-importer.settings.munching-selection-compendium-folders-spell.name\",\n            hint: \"ddb-importer.settings.munching-selection-compendium-folders-spell.hint\",\n            config: true,\n            type: String,\n            choices: {\n              SCHOOL: \"School of Magic\",\n              LEVEL: \"Level\",\n            },\n            default: \"SCHOOL\",\n          },\n          \"munching-selection-compendium-folders-item\": {\n            name: \"ddb-importer.settings.munching-selection-compendium-folders-item.name\",\n            hint: \"ddb-importer.settings.munching-selection-compendium-folders-item.hint\",\n            config: true,\n            type: String,\n            choices: {\n              TYPE: \"Item Type\",\n              RARITY: \"Rarity\",\n            },\n            default: \"TYPE\",\n          },\n        },\n        ADVENTURE: {\n          \"adventure-policy-all-scenes\": {\n            type: Boolean,\n            default: true,\n          },\n          \"adventure-policy-all-actors-into-world\": {\n            type: Boolean,\n            default: false,\n          },\n          \"adventure-policy-journal-world-actors\": {\n            type: Boolean,\n            default: false,\n          },\n          \"adventure-policy-add-to-compendiums\": {\n            type: Boolean,\n            default: false,\n          },\n        },\n        MUNCH: {\n          \"munching-policy-update-existing\": {\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-delete-during-update\": {\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-use-srd\": {\n            scope: \"player\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-exclude-legacy\": {\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-legacy-postfix\": {\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-use-srd-icons\": {\n            name: \"ddb-importer.settings.munching-policy-use-srd-icons.name\",\n            hint: \"ddb-importer.settings.munching-policy-use-srd-icons.hint\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-use-inbuilt-icons\": {\n            name: \"ddb-importer.settings.munching-policy-use-inbuilt-icons.name\",\n            hint: \"ddb-importer.settings.munching-policy-use-inbuilt-icons.hint\",\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-use-ddb-item-icons\": {\n            name: \"ddb-importer.settings.munching-policy-use-ddb-item-icons.name\",\n            hint: \"ddb-importer.settings.munching-policy-use-ddb-item-icons.hint\",\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-use-ddb-spell-icons\": {\n            name: \"ddb-importer.settings.munching-policy-use-ddb-spell-icons.name\",\n            hint: \"ddb-importer.settings.munching-policy-use-ddb-spell-icons.hint\",\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-use-ddb-generic-item-icons\": {\n            name: \"ddb-importer.settings.munching-policy-use-ddb-generic-item-icons.name\",\n            hint: \"ddb-importer.settings.munching-policy-use-ddb-generic-item-icons.hint\",\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-use-full-token-image\": {\n            name: \"ddb-importer.settings.munching-policy-use-full-token-image.name\",\n            hint: \"ddb-importer.settings.munching-policy-use-full-token-image.hint\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-use-token-avatar-image\": {\n            name: \"ddb-importer.settings.munching-policy-use-token-avatar-image.name\",\n            hint: \"ddb-importer.settings.munching-policy-use-token-avatar-image.hint\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-remote-images\": {\n            name: \"ddb-importer.settings.munching-policy-remote-images.name\",\n            hint: \"ddb-importer.settings.munching-policy-remote-images.hint\",\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-add-effects\": {\n            name: \"ddb-importer.settings.munching-policy-add-effects.name\",\n            hint: \"ddb-importer.settings.munching-policy-add-effects.hint\",\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-add-spell-effects\": {\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-add-monster-effects\": {\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-download-images\": {\n            name: \"ddb-importer.settings.munching-policy-download-images.name\",\n            hint: \"ddb-importer.settings.munching-policy-download-images.hint\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-use-chris-premades\": {\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-hide-description\": {\n            name: \"ddb-importer.settings.munching-policy-hide-description.name\",\n            hint: \"ddb-importer.settings.munching-policy-hide-description.hint\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-hide-item-name\": {\n            name: \"ddb-importer.settings.munching-policy-hide-item-name.name\",\n            hint: \"ddb-importer.settings.munching-policy-hide-item-name.hint\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-hide-description-choice\": {\n            name: \"ddb-importer.settings.munching-policy-hide-description-choice.name\",\n            hint: \"ddb-importer.settings.munching-policy-hide-description-choice.hint\",\n            type: String,\n            choices: {\n              NAME: \"Monster's name e.g. Goblin\",\n              TYPE: \"Monster's type e.g. Abomination\",\n              MONSTER: `The word \"Monster\"`,\n              NPC: `The word \"NPC\"`,\n            },\n            default: \"NAME\",\n          },\n          \"munching-policy-monster-items\": {\n            name: \"ddb-importer.settings.munching-policy-monster-items.name\",\n            hint: \"ddb-importer.settings.munching-policy-monster-items.hint\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-monster-homebrew\": {\n            name: \"ddb-importer.settings.munching-policy-monster-homebrew.name\",\n            hint: \"ddb-importer.settings.munching-policy-monster-homebrew.hint\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-monster-homebrew-only\": {\n            name: \"ddb-importer.settings.munching-policy-monster-homebrew-only.name\",\n            hint: \"ddb-importer.settings.munching-policy-monster-homebrew-only.hint\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-monster-tokenize\": {\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-use-srd-monster-images\": {\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-update-images\": {\n            name: \"ddb-importer.settings.munching-policy-update-images.name\",\n            hint: \"ddb-importer.settings.munching-policy-update-images.hint\",\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-monster-exact-match\": {\n            name: \"ddb-importer.settings.munching-policy-monster-match.name\",\n            hint: \"ddb-importer.settings.munching-policy-monster-match.hint\",\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-size-flat-scale\": {\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-use-source-filter\": {\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-muncher-sources\": {\n            type: Array,\n            default: [],\n          },\n          \"munching-policy-monster-use-item-ac\": {\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-monster-retain-biography\": {\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-monster-set-legendary-resource-bar\": {\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-update-world-monster-update-images\": {\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-update-world-monster-retain-biography\": {\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-monster-strip-name\": {\n            type: Boolean,\n            default: true,\n          },\n          \"munching-policy-item-homebrew\": {\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-item-homebrew-only\": {\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-spell-homebrew\": {\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-spell-homebrew-only\": {\n            type: Boolean,\n            default: false,\n          },\n          \"munching-policy-use-generic-items\": {\n            type: Boolean,\n            default: false,\n          }\n        },\n        ENCOUNTER: {\n          \"encounter-import-policy-create-scene\": {\n            type: Boolean,\n            default: true,\n          },\n          \"encounter-import-policy-existing-scene\": {\n            type: Boolean,\n            default: false,\n          },\n          \"encounter-import-policy-missing-characters\": {\n            type: Boolean,\n            default: true,\n          },\n          \"encounter-import-policy-missing-monsters\": {\n            type: Boolean,\n            default: true,\n          },\n          \"encounter-import-policy-create-journal\": {\n            type: Boolean,\n            default: true,\n          },\n          \"encounter-import-policy-roll-monster-initiative\": {\n            type: Boolean,\n            default: false,\n          },\n          \"encounter-import-policy-use-ddb-save\": {\n            type: Boolean,\n            default: false,\n          },\n        },\n      },\n      DYNAMIC_SYNC: {\n        \"dynamic-sync\": {\n          type: Boolean,\n          default: false,\n          requiresReload: true,\n        },\n        \"dynamic-sync-user\": {\n          type: String,\n          default: \"\",\n          requiresReload: true,\n        },\n      },\n      PROXY: {\n        \"api-endpoint\": {\n          type: String,\n          default: \"http://localhost:3000\",\n          requiresReload: true,\n        },\n        \"cors-endpoint\": {\n          type: String,\n          default: URLS.CORS,\n          requiresReload: true,\n        },\n        \"dynamic-api-endpoint\": {\n          type: String,\n          default: URLS.DYNAMIC,\n          requiresReload: true,\n        },\n        \"cors-encode\": {\n          type: Boolean,\n          default: false,\n        },\n        \"cors-strip-protocol\": {\n          type: Boolean,\n          default: true,\n        },\n        \"cors-path-prefix\": {\n          type: String,\n          default: \"ddb/\",\n        },\n        \"beta-key\": {\n          type: String,\n          default: \"\",\n        },\n        \"patreon-user\": {\n          type: String,\n          default: null,\n        },\n        \"cobalt-cookie\": {\n          name: \"ddb-importer.settings.cobalt-cookie.name\",\n          hint: \"ddb-importer.settings.cobalt-cookie.hint\",\n          type: String,\n          default: \"\",\n        },\n        \"cobalt-cookie-local\": {\n          name: \"ddb-importer.settings.cobalt-cookie-local.name\",\n          hint: \"ddb-importer.settings.cobalt-cookie-local.hint\",\n          type: Boolean,\n          default: true,\n        },\n        \"campaign-id\": {\n          name: \"ddb-importer.settings.campaign-id.name\",\n          hint: \"ddb-importer.settings.campaign-id.hint\",\n          type: String,\n          default: \"\",\n        },\n      },\n      // dev settings\n      DEV: {\n        \"add-features-to-compendiums\": {\n          type: Boolean,\n          default: false,\n        },\n        \"update-add-features-to-compendiums\": {\n          type: Boolean,\n          default: false,\n        },\n        \"allow-scene-download\": {\n          type: Boolean,\n          default: false,\n        },\n        \"allow-third-party-scene-download\": {\n          type: Boolean,\n          default: false,\n        },\n        \"third-party-scenes-partial\": {\n          type: Boolean,\n          default: false,\n        },\n        \"third-party-scenes-notes-merged\": {\n          type: Boolean,\n          default: true,\n        },\n        \"allow-note-generation\": {\n          type: Boolean,\n          default: false,\n        },\n        \"debug-json\": {\n          scope: \"player\",\n          type: Boolean,\n          default: false,\n        },\n        \"adventure-muncher-full-config\": {\n          type: Boolean,\n          default: false,\n        },\n      },\n    },\n  },\n  APPLY_GLOBAL_DEFAULTS(settings) {\n    for (const [name, data] of Object.entries(settings)) {\n      settings[name] = foundry.utils.mergeObject({ scope: \"world\", config: false }, data);\n    }\n    return settings;\n  },\n  GET_DEFAULT_SETTINGS(early = false) {\n    const clone = foundry.utils.deepClone(SETTINGS.DEFAULT_SETTINGS);\n    const defaultLocationSource = !early && typeof ForgeVTT !== \"undefined\" && ForgeVTT?.usingTheForge\n      ? \"[forgevtt]\"\n      : \"[data]\";\n\n    for (const [name, data] of Object.entries(clone.READY.DIRECTORIES)) {\n      clone.READY.DIRECTORIES[name].default = data.default.replace(\"[data]\", defaultLocationSource);\n    }\n    let defaultSettings = early\n      ? clone.EARLY\n      : {\n        ...clone.READY.DEV,\n        ...clone.READY.SETTINGS,\n        ...clone.READY.PROXY,\n        ...clone.READY.COMPENDIUMS,\n        ...clone.READY.DIRECTORIES,\n        ...clone.READY.UI,\n        ...clone.READY.PERMISSIONS,\n        ...clone.READY.PARSING,\n        ...clone.READY.MISC,\n        ...clone.READY.CHARACTER.IMPORT,\n        ...clone.READY.CHARACTER.SYNC,\n        ...clone.READY.DYNAMIC_SYNC,\n        ...clone.READY.CHARACTER.DYNAMIC_SYNC,\n        ...clone.READY.MUNCHER.COMPENDIUM_FOLDERS,\n        ...clone.READY.MUNCHER.ADVENTURE,\n        ...clone.READY.MUNCHER.MUNCH,\n        ...clone.READY.MUNCHER.ENCOUNTER,\n      };\n\n    return SETTINGS.APPLY_GLOBAL_DEFAULTS(defaultSettings);\n  },\n  STATUS: {\n    activeUpdate,\n  },\n};\n\nexport default SETTINGS;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for comparison styles. */\nvar UNORDERED_COMPARE_FLAG = 1,\n    PARTIAL_COMPARE_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values ? values.length : 0;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {boolean} [bitmask] The bitmask of comparison flags.\n *  The bitmask may be composed of the following flags:\n *     1 - Unordered comparison\n *     2 - Partial comparison\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, customizer, bitmask, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = arrayTag,\n      othTag = arrayTag;\n\n  if (!objIsArr) {\n    objTag = getTag(object);\n    objTag = objTag == argsTag ? objectTag : objTag;\n  }\n  if (!othIsArr) {\n    othTag = getTag(other);\n    othTag = othTag == argsTag ? objectTag : othTag;\n  }\n  var objIsObj = objTag == objectTag && !isHostObject(object),\n      othIsObj = othTag == objectTag && !isHostObject(other),\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)\n      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);\n  }\n  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, equalFunc, customizer, bitmask, stack) {\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!seen.has(othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {\n              return seen.add(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, customizer, bitmask, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= UNORDERED_COMPARE_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, equalFunc, customizer, bitmask, stack) {\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n      objProps = keys(object),\n      objLength = objProps.length,\n      othProps = keys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are **not** supported.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nexport function isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.hmd = (module) => {\n\tmodule = Object.create(module);\n\tif (!module.children) module.children = [];\n\tObject.defineProperty(module, 'exports', {\n\t\tenumerable: true,\n\t\tset: () => {\n\t\t\tthrow new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);\n\t\t}\n\t});\n\treturn module;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import DICTIONARY from \"../../dictionary.js\";\nimport DDBMonster from \"../DDBMonster.js\";\n\n//     \"abilities\": {\n// \"str\": {\n//   \"value\": 27,\n//   \"proficient\": 0,\n//   \"min\": 3,\n//   \"mod\": 8,\n//   \"save\": 8,\n//   \"prof\": 0,\n//   \"saveBonus\": 0,\n//   \"checkBonus\": 0,\n//   \"dc\": 23\n// },\n// \"dex\": {\n//   \"value\": 14,\n//   \"proficient\": 1,\n//   \"min\": 3,\n//   \"mod\": 2,\n//   \"save\": 9,\n//   \"prof\": 7,\n//   \"saveBonus\": 0,\n//   \"checkBonus\": 0,\n//   \"dc\": 17\n// },\n/**\n * Retrieves character abilities, including proficiency on saving throws\n */\nDDBMonster.prototype._generateAbilities = function _generateAbilities() {\n  // go through every ability\n  DICTIONARY.character.abilities.forEach((ability) => {\n    const value = this.source.stats.find((stat) => stat.statId === ability.id).value || 0;\n    const proficient = this.source.savingThrows.find((stat) => stat.statId === ability.id) ? 1 : 0;\n    const proficiencyBonus = CONFIG.DDB.challengeRatings.find((cr) => cr.id == this.source.challengeRatingId).proficiencyBonus;\n    const mod = CONFIG.DDB.statModifiers.find((s) => s.value == value).modifier;\n\n    this.npc.system.abilities[ability.value]['value'] = value;\n    this.npc.system.abilities[ability.value]['proficient'] = proficient;\n    this.npc.system.abilities[ability.value]['mod'] = mod;\n\n    if (proficient) {\n      this.npc.system.abilities[ability.value]['prof'] = proficiencyBonus;\n      this.npc.system.abilities[ability.value]['saveBonus'] = this.source.savingThrows.find((stat) => stat.statId === ability.id).bonusModifier || 0;\n      this.npc.system.abilities[ability.value]['save'] = mod + proficiencyBonus + this.npc.system.abilities[ability.value]['saveBonus'];\n    }\n\n    this.npc.system.abilities[ability.value]['dc'] = mod + proficiencyBonus + 8;\n  });\n\n  this.abilities = this.npc.system.abilities;\n};\n","import logger from \"../../logger.js\";\nimport DDBMonster from \"../DDBMonster.js\";\nimport DDBItemImporter from \"../../lib/DDBItemImporter.js\";\n\nDDBMonster.prototype.BAD_AC_MONSTERS = [\n  \"arkhan the cruel\"\n];\n\nDDBMonster.prototype._generateAC = async function _generateAC() {\n\n  const ac = {\n    \"flat\": this.source.armorClass,\n    \"calc\": \"\",\n    \"formula\": \"\",\n    \"label\": this.source.armorClassDescription ? this.source.armorClassDescription.replace(\"(\", \"\").replace(\")\", \"\") : \"\",\n  };\n\n  let flatAC = true;\n\n  const stat = this.source.stats.find((stat) => stat.statId === 2).value || 10;\n  const dexBonus = CONFIG.DDB.statModifiers.find((s) => s.value == stat).modifier;\n\n  let acItems = [];\n\n  const lowerDescription = this.source.armorClassDescription\n    ? this.source.armorClassDescription.toLowerCase()\n    : \"\";\n  const descriptionItems = this.source.armorClassDescription\n    ? lowerDescription.replace(\"(\", \"\").replace(\")\", \"\")\n      .split(\";\")[0]\n      .split(\",\").map((item) => item.trim())\n    : [];\n\n  // arkhan the cruel has Armor Class 23 (obsidian flint dragon plate, shield)\n\n  // archmage 12 (15 with mage armor)\n\n  // Jarlaxle Baenre 24 (+3 leather armor, Suave Defense)\n  // Suave Defense. While Jarlaxle is wearing light or no armor and wielding no shield, his AC includes his Charisma modifier.\n\n  // Eternal flame guardian 17 (breastplate, shield; 15 while using a crossbow)\n\n  let itemsToCheck = [];\n  if (descriptionItems.length > 0) {\n    descriptionItems.forEach((item) => {\n      if (item == \"natural\" || item == \"natural armor\") {\n        ac.calc = \"natural\";\n        flatAC = false;\n\n        if (lowerDescription.includes(\"shield\")) ac.flat = parseInt(ac.flat) - 2;\n        if (lowerDescription.includes(\"ring of protection\")) ac.flat = parseInt(ac.flat) - 1;\n        if (lowerDescription.includes(\"cloak of protection\")) ac.flat = parseInt(ac.flat) - 1;\n        if (lowerDescription.includes(\"+1\") || lowerDescription.includes(\"+ 1\")) ac.flat = parseInt(ac.flat) - 1;\n        if (lowerDescription.includes(\"+2\") || lowerDescription.includes(\"+ 2\")) ac.flat = parseInt(ac.flat) - 2;\n        if (lowerDescription.includes(\"+3\") || lowerDescription.includes(\"+ 3\")) ac.flat = parseInt(ac.flat) - 3;\n      } else if (!item.includes(\"with mage armor\")) {\n        item = item.replace(\"leather armor\", \"leather\").replace(\"hide armor\", \"hide\").replace(\"plate mail\", \"plate\");\n        if (item.startsWith(\"+\")) {\n          const bonusRegex = /(\\+\\d+)(?:\\s+)(.*)/;\n          const matches = item.match(bonusRegex);\n          if (matches) {\n            item = `${matches[2]}, ${matches[1]}`;\n          }\n        }\n        // const type = item.includes(\"ring\") || item.includes(\"cloak\") ? \"trinket\" : \"equipment\";\n        const itemsToIgnore = this.addMonsterEffects ? [\"suave defense\"] : [];\n        if (!itemsToIgnore.includes(item)) {\n          itemsToCheck.push({ name: item, type: \"equipment\", flags: {}, system: { equipped: true } });\n        }\n      };\n    });\n  }\n\n  logger.debug(\"Checking for items\", itemsToCheck);\n  const unAttunedItems = await DDBItemImporter.getCompendiumItems(itemsToCheck, \"inventory\", { monsterMatch: true });\n  const attunedItems = unAttunedItems.map((item) => {\n    if (item.system.attunement === 1) item.system.attunement = 2;\n    return item;\n  });\n\n  logger.debug(\"Found items\", { unAttunedItems, attunedItems });\n  const allItemsMatched = attunedItems.length > 0 && attunedItems.length == itemsToCheck.length;\n  const badACMonster = this.BAD_AC_MONSTERS.includes(this.source.name.toLowerCase());\n\n  if (allItemsMatched && this.useItemAC && ac.calc !== \"natural\" && !badACMonster) {\n    ac.flat = null;\n    ac.calc = \"default\";\n    ac.formula = \"\";\n    flatAC = false;\n  } else if ((!this.useItemAC && ac.calc !== \"natural\") || attunedItems.length === 0) {\n    // default monsters with no ac equipment to natural\n    ac.calc = \"natural\";\n    flatAC = false;\n  }\n\n  this.ac = {\n    ac,\n    flatAC,\n    acItems,\n    dexBonus,\n    ddbItems: this.useItemAC ? attunedItems : [], // only add items if we are told too\n    attunedItems,\n    allItemsMatched,\n    badACMonster,\n  };\n\n  logger.debug(`${this.source.name} ac calcs`, this.ac);\n  this.npc.system.attributes.ac = ac;\n  this.npc.flags.ddbimporter.flatAC = flatAC;\n  if (this.useItemAC) this.items.push(...attunedItems);\n\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport DDBMonster from \"../DDBMonster.js\";\n\nDDBMonster.prototype.getAdjustmentsConfig = function getAdjustmentsConfig(type) {\n  const damageAdjustments = CONFIG.DDB.damageAdjustments;\n\n  switch (type) {\n    case \"resistances\":\n      return damageAdjustments.filter((adj) => adj.type == 1);\n    case \"immunities\":\n      return damageAdjustments.filter((adj) => adj.type == 2);\n    case \"vulnerabilities\":\n      return damageAdjustments.filter((adj) => adj.type == 3);\n    case \"conditions\":\n      return CONFIG.DDB.conditions.map((condition) => {\n        return {\n          id: condition.definition.id,\n          name: condition.definition.name,\n          type: condition.definition.type,\n          slug: condition.definition.slug,\n        };\n      });\n    default:\n      return null;\n  }\n};\n\nDDBMonster.prototype.getDamageAdjustments = function getDamageAdjustments(type) {\n  const config = this.getAdjustmentsConfig(type);\n  let values = new Set();\n  let custom = [];\n  let bypass = new Set();\n  const midiQolInstalled = game.modules.get(\"midi-qol\")?.active;\n\n  this.source.damageAdjustments.forEach((adj) => {\n    const adjustment = config.find((cadj) => adj === cadj.id);\n    if (!adjustment) return;\n    const ddbValue = DICTIONARY.character.damageAdjustments.find((d) => d.id === adjustment.id);\n    if (ddbValue?.foundryValues) {\n      if (ddbValue.foundryValues.value.length > 0) ddbValue.foundryValues.value.forEach(values.add, values);\n      if (ddbValue.foundryValues.bypass.length > 0) ddbValue.foundryValues.bypass.forEach(bypass.add, bypass);\n      if (midiQolInstalled && ddbValue.midiValues) {\n        values.add(ddbValue.midiValues);\n      }\n    } else {\n      custom.push(adjustment.name);\n    }\n\n    if (midiQolInstalled) {\n      if (adjustment.slug.toLowerCase().includes(\"bludgeoning-piercing-and-slashing-from-nonmagical\")) values.add(\"physical\");\n      if (adjustment.slug.toLowerCase().includes(\"silvered\")) values.add(\"silver\");\n      if (adjustment.slug.toLowerCase().includes(\"adamantine\")) values.add(\"adamant\");\n      // if (adjustment.slug.toLowerCase().includes(\"magic\")) values.add(\"magic\");\n      // if (adjustment.slug.toLowerCase().includes(\"nonmagical\")) values.add(\"non-magic\");\n    }\n  });\n\n  const adjustments = {\n    value: Array.from(values),\n    bypasses: Array.from(bypass),\n    custom: custom.join(\"; \"),\n  };\n\n  return adjustments;\n};\n\nDDBMonster.prototype._generateDamageImmunities = function _generateDamageImmunities() {\n  this.npc.system.traits.di = this.getDamageAdjustments(\"immunities\");\n};\n\nDDBMonster.prototype._generateDamageResistances = function _generateDamageResistances() {\n  this.npc.system.traits.dr = this.getDamageAdjustments(\"resistances\");\n};\n\nDDBMonster.prototype._generateDamageVulnerabilities = function _generateDamageVulnerabilities() {\n  this.npc.system.traits.dv = this.getDamageAdjustments(\"vulnerabilities\");\n};\n\nDDBMonster.prototype._generateConditionImmunities = function _generateConditionImmunities() {\n  const config = this.getAdjustmentsConfig(\"conditions\");\n\n  let values = new Set();\n  let custom = [];\n\n  this.source.conditionImmunities.forEach((adj) => {\n    const adjustment = config.find((cadj) => adj === cadj.id);\n    const valueAdjustment = DICTIONARY.conditions.find((condition) => condition.label.toLowerCase() == adjustment.name.toLowerCase());\n    if (adjustment && valueAdjustment) {\n      values.add(valueAdjustment.foundry);\n    } else if (adjustment) {\n      custom.push(adjustment.name);\n    }\n  });\n\n  this.npc.system.traits.ci = {\n    value: Array.from(values),\n    custom: custom.join(\"; \"),\n  };\n\n};\n","// \"creatureSizes\": [{\n//   \"id\": 2,\n//   \"entityTypeId\": 127108918,\n//   \"name\": \"Tiny\",\n//   \"weightType\": 1\n// }, {\n\n\n//   \"traits\": {\n//     \"size\": \"grg\",\n\n\n//     \"sizeId\": 7,\n\nimport DICTIONARY from '../../dictionary.js';\nimport logger from '../../logger.js';\nimport SETTINGS from '../../settings.js';\nimport DDBMonster from \"../DDBMonster.js\";\n\nDDBMonster.prototype.getSizeFromId = function getSizeFromId(sizeId) {\n  const size = CONFIG.DDB.creatureSizes.find((s) => s.id == sizeId).name;\n  const sizeData = DICTIONARY.sizes.find((s) => size == s.name);\n\n  if (!sizeData) {\n    logger.warn(`No size found for, using medium`, size);\n    return { name: \"Medium\", value: \"med\", size: 1 };\n  }\n  return sizeData;\n};\n\nDDBMonster.prototype._generateSize = function _generateSize () {\n  const sizeData = this.getSizeFromId(this.source.sizeId);\n  const flatScale = game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-size-flat-scale\");\n  const token = {\n    scale: flatScale ? 1 : (sizeData.size >= 1 ? 1 : sizeData.size),\n    value: flatScale ? sizeData.size : (sizeData.size >= 1 ? sizeData.size : 1),\n  };\n\n  this.npc.system.traits.size = sizeData.value;\n  this.npc.prototypeToken.width = token.value;\n  this.npc.prototypeToken.height = token.value;\n  this.npc.prototypeToken.texture.scaleX = token.scale;\n  this.npc.prototypeToken.texture.scaleY = token.scale;\n\n};\n","import DDBMonster from \"../DDBMonster.js\";\n\n//   \"value\": \"\",\n//   \"subtype\": \"\",\n//   \"swarm\": {\n//     \"isSwarm\": false,\n//     \"size\": \"\"\n//   },\n//   \"custom\": \"\"\n\n\nDDBMonster.prototype._generateType = function _generateType() {\n\n  if (this.source.swarm) {\n    // result.swarm.isSwarm = true;\n    // result.swarm.size = getSizeFromId(monster.swarm.sizeId).value;\n    this.npc.system.details.type.swarm = this.getSizeFromId(this.source.swarm.sizeId).value;\n  }\n\n  const type = CONFIG.DDB.monsterTypes.find((c) => this.source.typeId == c.id);\n  if (!type) {\n    this.npc.system.details.type.custom = \"Unknown\";\n    this.typeName = \"Unknown Monster\";\n  } else {\n    this.typeName = type.name;\n    const typeName = type.name.toLowerCase();\n\n    if (CONFIG.DND5E.creatureTypes[typeName]) this.npc.system.details.type.value = typeName;\n  }\n\n  this.npc.system.details.type.subtype = CONFIG.DDB.monsterSubTypes\n    .filter((c) => this.source.subTypes.includes(c.id))\n    .map((c) => c.name)\n    .join(\", \");\n\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport utils from \"../../lib/utils.js\";\nimport logger from \"../../logger.js\";\nimport DDBMonster from \"../DDBMonster.js\";\n\n// skills: [\n//   { skillId: 5, value: 9, additionalBonus: null },\n//   { skillId: 14, value: 9, additionalBonus: null }\n// ],\n\n// \"skills\": [{\n//   \"skillId\": 7, # History\n//   \"value\": 8,\n//   \"additionalBonus\": null\n// }, {\n//   \"skillId\": 14, # Perception\n//   \"value\": 6,\n//   \"additionalBonus\": null\n// }],\n\n// \"ste\": {\n//   \"value\": 1,\n//   \"ability\": \"dex\",\n//   \"bonus\": 0,\n//   \"mod\": 2,\n//   \"passive\": 19,\n//   \"prof\": 7,\n//   \"total\": 9\n// },\nDDBMonster.prototype._generateSkills = function _generateSkills () {\n  const proficiencyBonus = CONFIG.DDB.challengeRatings.find((cr) => cr.id == this.source.challengeRatingId).proficiencyBonus;\n  const validSkills = DICTIONARY.character.skills.map((skill) => skill.name);\n\n  const keys = Object.keys(this.npc.system.skills);\n  keys\n    .filter((key) => validSkills.includes(key))\n    .forEach((key) => {\n      let skill = this.npc.system.skills[key];\n      const ability = DICTIONARY.character.abilities.find((ab) => ab.value === skill.ability);\n      const stat = this.source.stats.find((stat) => stat.statId === ability.id).value || 10;\n      const mod = CONFIG.DDB.statModifiers.find((s) => s.value == stat).modifier;\n      const lookupSkill = DICTIONARY.character.skills.find((s) => s.name == key);\n      const monsterSkill = this.source.skills.find((s) => s.skillId == lookupSkill.valueId);\n\n      this.npc.system.skills[key].mod = mod;\n\n      const calculatedScore = proficiencyBonus + mod;\n\n      if (monsterSkill) {\n        this.npc.system.skills[key].value = 1;\n        this.npc.system.skills[key].prof = proficiencyBonus;\n        this.npc.system.skills[key].bonus = monsterSkill.additionalBonus || 0;\n      }\n\n      this.npc.system.skills[key].total = calculatedScore;\n      this.npc.system.skills[key].passive = 10 + calculatedScore;\n\n      if (monsterSkill && monsterSkill.value != calculatedScore) {\n        if (monsterSkill.value == calculatedScore + proficiencyBonus) {\n          this.npc.system.skills[key].passive += proficiencyBonus;\n          this.npc.system.skills[key].value = 2;\n          this.npc.system.skills[key].total += proficiencyBonus;\n          this.npc.system.skills[key].prof += proficiencyBonus;\n          this.npc.system.skills[key].bonus = 0;\n        } else if (monsterSkill.value > calculatedScore + proficiencyBonus) {\n          this.npc.system.skills[key].passive += proficiencyBonus;\n          this.npc.system.skills[key].value = 2;\n          this.npc.system.skills[key].total += proficiencyBonus;\n          this.npc.system.skills[key].prof += proficiencyBonus;\n        }\n      }\n\n    });\n\n  return this.npc.system.skills;\n};\n\n\nDDBMonster.prototype._generateSkillsHTML = function _generateSkillsHTML () {\n  const proficiencyBonus = CONFIG.DDB.challengeRatings.find((cr) => cr.id == this.source.challengeRatingId).proficiencyBonus;\n  //  \"skillsHtml\": \"History + 12, Perception + 10\"\n  const skillsHTML = utils.stripHtml(this.source.skillsHtml).split(',');\n  const skillsMaps = skillsHTML.filter((str) => str != '').map((str) => {\n    const skillMatch = str.match(/(\\w+\\s*\\w*\\s*\\w*)(?:\\s*)([+-])(?:\\s*)(\\d+)/);\n    let result = {};\n    if (skillMatch) {\n      result = {\n        name: skillMatch[1].trim(),\n        value: skillMatch[2] + skillMatch[3],\n      };\n    } else {\n      logger.error(`Skill Parsing failed for ${this.source.name}`);\n      logger.debug(skillsHTML);\n      logger.debug(str);\n      logger.debug(skillMatch);\n    }\n    return result;\n  });\n\n  const keys = Object.keys(this.npc.system.skills);\n  const validSkills = DICTIONARY.character.skills.map((skill) => skill.name);\n  keys\n    .filter((key) => validSkills.includes(key))\n    .forEach((key) => {\n      let skill = this.npc.system.skills[key];\n      const ability = DICTIONARY.character.abilities.find((ab) => ab.value === skill.ability);\n      const stat = this.source.stats.find((stat) => stat.statId === ability.id).value || 10;\n      const mod = CONFIG.DDB.statModifiers.find((s) => s.value == stat).modifier;\n      const lookupSkill = DICTIONARY.character.skills.find((s) => s.name == key);\n      const monsterSkill = this.source.skills.find((s) => s.skillId == lookupSkill.valueId);\n\n      this.npc.system.skills[key].mod = mod;\n\n      if (monsterSkill) {\n        this.npc.system.skills[key].value = 1;\n        this.npc.system.skills[key].prof = proficiencyBonus;\n        this.npc.system.skills[key].bonus = monsterSkill.additionalBonus || 0;\n      }\n      const calculatedScore = this.npc.system.skills[key].prof + mod + this.npc.system.skills[key].bonus;\n      this.npc.system.skills[key].total = calculatedScore;\n      this.npc.system.skills[key].passive = 10 + calculatedScore;\n\n      const htmlSkill = skillsMaps.find((skl) => skl.name == lookupSkill.label);\n\n      if (htmlSkill) {\n        if (htmlSkill.value > calculatedScore) {\n          this.npc.system.skills[key].passive += proficiencyBonus;\n          this.npc.system.skills[key].value = 2;\n          this.npc.system.skills[key].total += proficiencyBonus;\n          this.npc.system.skills[key].prof += proficiencyBonus;\n        }\n      }\n\n    });\n\n  return this.npc.system.skills;\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport DDBMonster from \"../DDBMonster.js\";\n\nDDBMonster.prototype.getTextSenses = function getTextSenses() {\n  return this.source.sensesHtml;\n};\n\n//   \"senses\": [{\n//   \"id\": 1,\n//   \"entityTypeId\": 668550506,\n//   \"name\": \"Blindsight\"\n// }, {\n//   \"id\": 2,\n//   \"entityTypeId\": 668550506,\n//   \"name\": \"Darkvision\"\n// }, {\n//   \"id\": 3,\n//   \"entityTypeId\": 668550506,\n//   \"name\": \"Tremorsense\"\n// }, {\n//   \"id\": 4,\n//   \"entityTypeId\": 668550506,\n//   \"name\": \"Truesight\"\n// }, {\n//   \"id\": 5,\n//   \"entityTypeId\": 668550506,\n//   \"name\": \"Unknown\"\n// }],\n\nDDBMonster.prototype._generateTokenSenses = function _generateTokenSenses() {\n  const senseLookup = CONFIG.DDB.senses;\n\n  this.source.senses.forEach((sense) => {\n    const senseMatch = senseLookup.find((l) => l.id == sense.senseId);\n    if (senseMatch && sense.notes) {\n      const senseType = DICTIONARY.senseMap()[senseMatch.name.toLowerCase()];\n      const rangeMatch = sense.notes.trim().match(/^(\\d+)/);\n      const blindBeyondMatch = sense.notes.trim().match(/blind beyond this radius/i);\n      const vision5eInstalled = game.modules.get(\"vision-5e\")?.active ?? false;\n      if (rangeMatch) {\n        const value = parseInt(rangeMatch[1]);\n        if (value > 0 && value > this.npc.prototypeToken.sight.range && foundry.utils.hasProperty(CONFIG.Canvas.visionModes, senseType)) {\n          foundry.utils.setProperty(this.npc.prototypeToken.sight, \"visionMode\", senseType);\n          foundry.utils.setProperty(this.npc.prototypeToken.sight, \"range\", value);\n          this.npc.prototypeToken.sight = foundry.utils.mergeObject(this.npc.prototypeToken.sight, CONFIG.Canvas.visionModes[senseType].vision.defaults);\n        }\n        if (value > 0 && foundry.utils.hasProperty(DICTIONARY.detectionMap, senseMatch.name.toLowerCase())) {\n          const detectionMode = {\n            id: DICTIONARY.detectionMap[senseMatch.name.toLowerCase()],\n            range: value,\n            enabled: true,\n          };\n          // only add duplicate modes if they don't exist\n          // don't add if vision 5e is installed, as it can handle these detection modes.\n          if (!vision5eInstalled && !this.npc.prototypeToken.detectionModes.some((mode) => mode.id === detectionMode.id)) {\n            this.npc.prototypeToken.detectionModes.push(detectionMode);\n          }\n        }\n        // add these modes if supported by vision 5e\n        if (vision5eInstalled && blindBeyondMatch) {\n          this.npc.prototypeToken.detectionModes.push(\n            {\n              \"id\": \"lightPerception\",\n              \"range\": value,\n              \"enabled\": true\n            }\n          );\n        }\n      }\n    }\n  });\n};\n\n\nDDBMonster.prototype._generateSenses = function _generateSenses() {\n  let senses = {\n    darkvision: 0,\n    blindsight: 0,\n    tremorsense: 0,\n    truesight: 0,\n    units: \"ft\",\n    special: \"\"\n  };\n  const senseLookup = CONFIG.DDB.senses;\n\n  this.source.senses.forEach((sense) => {\n    const senseMatch = senseLookup.find((l) => l.id == sense.senseId);\n    if (senseMatch && sense.notes && senseMatch.name.toLowerCase() in senses) {\n      const rangeMatch = sense.notes.trim().match(/^(\\d+)/);\n      if (rangeMatch) {\n        senses[senseMatch.name.toLowerCase()] = parseInt(rangeMatch[1]);\n      } else {\n        senses.special += `${senseMatch.name}: ${sense.notes}; `;\n      }\n    } else {\n      senses.special += `${senseMatch.name}: ${sense.notes}; `;\n    }\n  });\n\n  this.npc.system.attributes.senses = senses;\n\n};\n\n// \"senses\": [\n//   {\n//       \"senseId\": 1,\n//       \"notes\": \"60 ft.\"\n//   },\n//   {\n//       \"senseId\": 2,\n//       \"notes\": \"120 ft.\"\n//   }\n// ],\n\n// \"senses\": [{\n//   \"senseId\": 1,\n//   \"notes\": \" 60 ft. (blind beyond this radius)\"\n// }],\n\n","import DDBMonster from \"../DDBMonster.js\";\n\nDDBMonster.prototype._generateEnvironments = function _generateEnvironments() {\n  this.npc.system.details.environment = this.source.environments.filter((env) =>\n    CONFIG.DDB.environments.some((c) => env == c.id)\n  ).map((env) => {\n    return CONFIG.DDB.environments.find((c) => env == c.id).name;\n  }).join(\", \");\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport DDBMonster from \"../DDBMonster.js\";\n\n//      \"languages\": {\n//   \"value\": [\n//     \"common\",\n//     \"draconic\"\n//   ],\n//   \"custom\": \"\"\n// },\n\nDDBMonster.prototype._generateLanguages = function _generateLanguages () {\n  const config = CONFIG.DDB.languages;\n\n  let values = [];\n  let custom = [];\n\n  this.source.languages.forEach((lng) => {\n    const language = config.find((cfg) => lng.languageId == cfg.id);\n    const foundryLanguage = DICTIONARY.character.languages.find((lang) => lang.name == language.name);\n    if (foundryLanguage && lng.notes == '') {\n      values.push(foundryLanguage.value);\n    } else if (language) {\n      const notes = (lng.notes !== '') ? ` ${lng.notes}` : \"\";\n      custom.push(language.name + notes);\n    }\n  });\n\n  if (this.source.languageNote && !this.source.languageNote.includes(\"--\")) custom.push(this.source.languageNote);\n\n  this.npc.system.traits.languages = {\n    value: values,\n    custom: custom.join(\"; \"),\n  };\n};\n","import DDBMonster from \"../DDBMonster.js\";\n\n// \"hp\": {\n//   \"value\": 367,\n//   \"min\": 0,\n//   \"max\": 367,\n//   \"temp\": 0,\n//   \"tempmax\": 0,\n//   \"formula\": \"21d20 + 147\"\n// },\n\n// \"hitPointDice\": {\n//   \"diceCount\": 21,\n//   \"diceValue\": 20,\n//   \"diceMultiplier\": 0,\n//   \"fixedValue\": 147,\n//   \"diceString\": \"21d20 + 147\"\n// },\n\nDDBMonster.prototype._generateHitPoints = function _generateHitPoints () {\n  this.npc.system.attributes.hp = {\n    value: this.source.averageHitPoints - (this.removedHitPoints ?? 0),\n    min: 0,\n    max: this.source.averageHitPoints,\n    temp: this.temporaryHitPoints ?? 0,\n    tempmax: 0,\n    formula: this.source.hitPointDice.diceString,\n  };\n};\n","import DDBMonster from \"../DDBMonster.js\";\n\n// \"movements\": [\n//   {\n//     \"movementId\": 1,\n//     \"speed\": 40,\n//     \"notes\": null\n// },\n// {\n//     \"movementId\": 4,\n//     \"speed\": 80,\n//     \"notes\": null\n// },\n// {\n//     \"movementId\": 5,\n//     \"speed\": 40,\n//     \"notes\": null\n// }\n// ],\n\n// \"speed\": {\n//   \"value\": \"40 ft.\",\n//   \"special\": \"Fly 80 ft., Swim 40 ft.\"\n// },\nDDBMonster.prototype._generateMovement = function () {\n  let special = [];\n\n  this.npc.system.attributes.movement.units = \"ft\";\n\n  this.source.movements.forEach((monsterMovement) => {\n    const movement = CONFIG.DDB.movements.find((mv) => mv.id == monsterMovement.movementId);\n    this.npc.system.attributes.movement[movement.name.toLowerCase()] = monsterMovement.speed;\n\n    if (monsterMovement.notes && monsterMovement.notes.toLowerCase().includes('hover')) {\n      this.npc.system.attributes.movement.hover = true;\n    }\n\n    if (monsterMovement.notes?.trim() !== \"\") {\n      const specialMovement = `${monsterMovement.speed}ft ${movement.description} (${monsterMovement.notes})`;\n      special.push(specialMovement);\n    }\n  });\n\n  this.movement = {\n    movement: this.npc.system.attributes.movement,\n    special,\n  };\n\n};\n","import DDBMonster from \"../DDBMonster.js\";\n\nDDBMonster.prototype._generateSource = function _generateSource() {\n  const fullSource = game.settings.get(\"ddb-importer\", \"use-full-source\");\n  const sourceObject = CONFIG.DDB.sources.find((cnf) => cnf.id == this.source.sourceId);\n  const sourceBook = (sourceObject)\n    ? (fullSource) ? sourceObject.description : sourceObject.name\n    : \"Homebrew\";\n  this.npc.system.details.source = {\n    book: sourceBook,\n    page: this.source.sourcePageNumber,\n    custom: \"\",\n    license: \"\",\n  };\n};\n","import logger from \"../../logger.js\";\nimport SETTINGS from \"../../settings.js\";\nimport DDBMonster from \"../DDBMonster.js\";\n\n// extracts various attacks and features (not spells)\n// generates and extra descriptions found in these fields\n// feature parsing is handled in a separate class, the DDBFeatureFactory\n// that class breaks down the html into possible actions which it passes to the\n// DDBFeature class which tries to parse the feature for details\nDDBMonster.prototype._generateFeatures = async function () {\n\n  await this.featureFactory.generateActions(this.source.actionsDescription, \"action\");\n\n  if (this.source.hasLair && this.source.lairDescription != \"\") {\n    await this.featureFactory.generateActions(this.source.lairDescription, \"lair\");\n    this.npc.system.resources[\"lair\"] = this.featureFactory.resources[\"lair\"];\n  }\n\n  if (this.source.legendaryActionsDescription != \"\") {\n    await this.featureFactory.generateActions(this.source.legendaryActionsDescription, \"legendary\");\n    this.npc.system.resources[\"legact\"] = this.featureFactory.resources[\"legendary\"];\n    if (game.settings.get(SETTINGS.MODULE_ID, \"munching-policy-monster-set-legendary-resource-bar\")) {\n      this.npc.prototypeToken.bar2 = { attribute: \"resources.legact\" };\n    }\n  }\n\n  if (this.source.specialTraitsDescription != \"\") {\n    await this.featureFactory.generateActions(this.source.specialTraitsDescription, \"special\");\n    this.npc.system.resources[\"legres\"] = this.featureFactory.resources[\"resistance\"];\n  }\n\n  await this.featureFactory.generateActions(this.source.reactionsDescription, \"reaction\");\n  await this.featureFactory.generateActions(this.source.bonusActionsDescription, \"bonus\");\n  await this.featureFactory.generateActions(this.source.mythicActionsDescription, \"mythic\");\n  // special MCDM actions\n  await this.featureFactory.generateActions(`${this.featureFactory.html.villain}`, \"villain\");\n\n  this.items.push(\n    ...this.featureFactory.actions,\n    ...this.featureFactory.lair,\n    ...this.featureFactory.legendary,\n    ...this.featureFactory.special,\n    ...this.featureFactory.reactions,\n    ...this.featureFactory.bonus,\n    ...this.featureFactory.mythic,\n    ...this.featureFactory.villain,\n  );\n\n  // add any actor descriptions found in action blocks into the biography\n  if (this.featureFactory.characterDescription.unexpected) {\n    logger.warn(`Unexpected description for ${this.source.name}`, { description: this.featureFactory.characterDescription });\n  }\n  this.characterDescription += this.featureFactory.characterDescription.action;\n  this.characterDescription += this.featureFactory.characterDescription.reaction;\n  this.characterDescription += this.featureFactory.characterDescription.special;\n  this.npc.system.details.biography.value += this.characterDescription;\n};\n","import { getAbilityMods } from \"./helpers.js\";\nimport logger from '../../logger.js';\nimport CompendiumHelper from \"../../lib/CompendiumHelper.js\";\nimport SETTINGS from \"../../settings.js\";\nimport DDBMonster from \"../DDBMonster.js\";\nimport DICTIONARY from \"../../dictionary.js\";\nimport utils from \"../../lib/utils.js\";\n\n\nDDBMonster.prototype.getSpellcasting = function(text) {\n  let spellcasting = \"\";\n  const abilitySearch = /((?:spellcasting ability) (?:is|uses|using) (\\w+)| (\\w+)(?: as \\w+ spellcasting ability))/;\n  const match = text.match(abilitySearch);\n  if (match) {\n    const abilityMatch = match[2] || match[3];\n    spellcasting = abilityMatch.toLowerCase().substr(0, 3);\n  }\n  return spellcasting;\n};\n\nDDBMonster.prototype._generateSpellcasting = function(text) {\n  let spellcasting = this.getSpellcasting(text);\n  this.spellcasting.spellcasting = spellcasting;\n  this.npc.system.attributes.spellcasting = spellcasting;\n};\n\nDDBMonster.prototype._generateSpellLevel = function(text) {\n  let spellLevel = 0;\n  const levelSearch = /is (?:a|an) (\\d+)(?:th|nd|rd|st)(?:-| )level spellcaster/;\n  const match = text.match(levelSearch);\n  if (match) {\n    spellLevel = parseInt(match[1]);\n  }\n  this.spellcasting.spellLevel = spellLevel;\n  this.npc.system.attributes.spellLevel = spellLevel;\n  this.npc.system.details.spellLevel = spellLevel;\n};\n\nDDBMonster.prototype._generateSpelldc = function(text) {\n  let dc = 10;\n  const dcSearch = \"spell\\\\s+save\\\\s+DC\\\\s*(\\\\d+)(?:,|\\\\)|\\\\s)\";\n  const match = text.match(dcSearch);\n  // console.log(\"£££££\")\n  // console.log(match);\n  if (match) {\n    dc = parseInt(match[1]);\n  }\n  this.spellcasting.spelldc = dc;\n  this.npc.system.attributes.spelldc = dc;\n};\n\nDDBMonster.prototype._generateSpellAttackBonus = function(text) {\n  let spellAttackBonus = 0;\n  const dcSearch = \"([+-]\\\\d+)\\\\s+to\\\\s+hit\\\\s+with\\\\s+spell\\\\s+attacks\";\n  const match = text.match(dcSearch);\n  if (match) {\n    const toHit = match[1];\n    const proficiencyBonus = CONFIG.DDB.challengeRatings.find((cr) => cr.id == this.source.challengeRatingId).proficiencyBonus;\n    const abilities = getAbilityMods(this.source);\n    const castingAbility = this.getSpellcasting(text);\n    spellAttackBonus = toHit - proficiencyBonus - abilities[castingAbility];\n  }\n  this.spellcasting.spellAttackBonus = spellAttackBonus;\n};\n\n\nDDBMonster.prototype.parseOutInnateSpells = function(text) {\n  // handle innate style spells here\n  // 3/day each: charm person (as 5th-level spell), color spray, detect thoughts, hold person (as 3rd-level spell)\n  // console.log(text);\n  const innateSearch = /^(\\d+)\\/(\\w+)(?:\\s+each)?:\\s+(.*$)/;\n  const innateMatch = text.match(innateSearch);\n  // console.log(innateMatch);\n  if (innateMatch) {\n    const spellArray = innateMatch[3].split(\",\").map((spell) => spell.trim());\n    spellArray.forEach((spell) => {\n      this.spellList.innate.push({ name: spell, type: innateMatch[2], value: innateMatch[1], innate: this.spellList.innateMatch });\n    });\n  }\n\n  // At will: dancing lights\n  const atWillSearch = /^At (?:Will|will):\\s+(.*$)/;\n  const atWillMatch = text.match(atWillSearch);\n  if (atWillMatch) {\n    const spellArray = atWillMatch[1].split(\",\").map((spell) => spell.trim());\n    spellArray.forEach((spell) => {\n      if (this.spellList.innateMatch) {\n        this.spellList.innate.push({ name: spell, type: \"atwill\", value: null, innate: this.spellList.innateMatch });\n      } else {\n        this.spellList.atwill.push(spell);\n      }\n\n    });\n  }\n\n  // last ditch attempt, mephits have some weird formating\n  if (!innateMatch && !atWillMatch) {\n    const mephitMatch = text.match(/(\\d+)\\/(\\w+)(?:.*)?cast (.*),/);\n    if (mephitMatch) {\n      const spell = mephitMatch[3].trim();\n      this.spellList.innate.push({ name: spell, type: mephitMatch[2], value: mephitMatch[1], innate: this.spellList.innateMatch });\n    }\n  }\n};\n\n\n// e.g. The archmage can cast disguise self and invisibility at will and has the following wizard spells prepared:\nDDBMonster.prototype.parseAdditionalAtWillSpells = function(text) {\n  const atWillSearch = /can cast (.*?) at will/;\n  const atWillMatch = text.match(atWillSearch);\n  let atWillSpells = [];\n  if (atWillMatch) {\n    atWillSpells = atWillMatch[1].replace(\" and\", \",\").split(\",\").map((spell) => spell.split('(', 1)[0].trim());\n  }\n\n  this.spellList.atwill.push(...atWillSpells);\n};\n\n\n/**\n * First pass at breaking out spells to cast\n * @param text spell text block\n * @returns\n */\n// eslint-disable-next-line complexity\nDDBMonster.prototype.parseOutSpells = function(text, { pactText = null } = {}) {\n  // console.log(text);\n  const spellLevelSearch = /^(Cantrip|\\d)(?:st|th|nd|rd)?(?:\\s*(?:Level|level))?(?:s)?\\s+\\((at will|at-will|\\d)\\s*(?:slot|slots)?\\):\\s+(.*$)/;\n  const match = text.match(spellLevelSearch);\n\n  const warlockLevelSearch = /^1st–(\\d)(?:st|th|nd|rd)\\s+level\\s+\\((\\d)\\s+(\\d)(?:st|th|nd|rd)?\\s*(?:Level|level|-level)\\s*(?:slot|slots)?\\):\\s+(.*$)/;\n  const warlockMatch = text.match(warlockLevelSearch);\n\n  const otherWarlockSearch = /^(\\d)\\s*(?:st|th|nd|rd)?\\s*(?:Level|level|-level):\\s+(.*$)/i;\n  const otherWarlockMatch = text.match(otherWarlockSearch);\n\n  const pactSearchRegex = /has\\s(\\w*)\\s(\\d)(?:st|th|nd|rd)\\s*(?:level|-level)\\s+spell\\s+slot/i;\n  const pactTextSlotsMatch = (otherWarlockMatch && pactText) ? pactText.match(pactSearchRegex) : null;\n\n  // console.warn(\"info\", {\n  //   match,\n  //   warlockMatch,\n  //   otherWarlockMatch,\n  //   pactTextSlotsMatch,\n  //   expression: !match && (!warlockMatch || !pactTextSlotsMatch),\n  //   expression2: !match && !warlockMatch && !pactTextSlotsMatch,\n  //   warlock: !(warlockMatch || pactTextSlotsMatch),\n  //   expression3: !match && !(warlockMatch || pactTextSlotsMatch),\n  // });\n\n  if (!match && !(warlockMatch || pactTextSlotsMatch)) {\n    this.parseOutInnateSpells(text);\n    return;\n  }\n\n  const spellLevel = (match) ? match[1] : 'pact';\n  const slots = (match)\n    ? match[2]\n    : (warlockMatch)\n      ? warlockMatch[2]\n      : DICTIONARY.numbers.find((n) => n.natural === pactTextSlotsMatch[1])?.num;\n  const spellMatches = (match)\n    ? match[3]\n    : (warlockMatch)\n      ? warlockMatch[4]\n      : otherWarlockMatch[2];\n\n  // console.warn(\"Processing spells\", {\n  //   spellLevel,\n  //   slots,\n  //   spellMatches,\n  // });\n  if (Number.isInteger(parseInt(spellLevel)) && Number.isInteger(parseInt(slots))) {\n    logger.debug(\"Spell level parsing\");\n    this.npc.system.spells[`spell${spellLevel}`]['value'] = parseInt(slots);\n    this.npc.system.spells[`spell${spellLevel}`]['max'] = slots ?? \"\";\n    this.npc.system.spells[`spell${spellLevel}`]['override'] = parseInt(slots) ?? null;\n    const spellArray = spellMatches.split(\",\").map((spell) => spell.trim());\n    this.spellList.class.push(...spellArray);\n  } else if (spellLevel === 'pact' && Number.isInteger(parseInt(slots))) {\n    logger.debug(\"Spell pact parsing\");\n    this.npc.system.spells[spellLevel]['value'] = parseInt(slots);\n    this.npc.system.spells[spellLevel]['max'] = slots ?? \"\";\n    this.npc.system.spells[spellLevel]['override'] = parseInt(slots) ?? null;\n    this.npc.system.spells[spellLevel]['level'] = warlockMatch ? warlockMatch[3] : pactTextSlotsMatch[2];\n    const spellArray = spellMatches.split(\",\").map((spell) => spell.trim());\n    this.spellList.pact.push(...spellArray);\n  } else if ([\"at will\", \"at-will\"].includes(slots)) {\n    logger.debug(\"Spell at-will parsing\");\n    // at will spells\n    const spellArray = spellMatches.replace(/\\*/g, '').split(\",\").map((spell) => spell.trim());\n    this.spellList.atwill.push(...spellArray);\n  }\n\n};\n\n\nfunction splitEdgeCase(spell) {\n  let result = {\n    name: spell,\n    edge: null,\n  };\n\n  const splitSpell = spell.split(\"(\");\n  if (splitSpell.length > 1) {\n    result.name = splitSpell[0].trim();\n    result.edge = splitSpell[1].split(\")\")[0].trim();\n  }\n\n  return result;\n}\n\nDDBMonster.prototype._generateSpellEdgeCases = function() {\n  [\"pact\", \"class\", \"atwill\"].forEach((spellType) => {\n    this.spellList[spellType].forEach((spellName) => {\n      const edgeCheck = splitEdgeCase(`${spellName}`);\n      if (edgeCheck.edge) {\n        const edgeEntry = {\n          name: edgeCheck.name,\n          type: spellType,\n          edge: edgeCheck.edge,\n        };\n        this.spellList.edgeCases.push(edgeEntry);\n      }\n      spellName = edgeCheck.name;\n    });\n  });\n\n  // innate\n  this.spellList.innate.forEach((spellMap) => {\n    const edgeCheck = splitEdgeCase(spellMap.name);\n    spellMap.name = edgeCheck.name;\n    if (edgeCheck.edge) {\n      const edgeEntry = {\n        name: edgeCheck.name,\n        type: \"innate\",\n        edge: edgeCheck.edge,\n      };\n      this.spellList.edgeCases.push(edgeEntry);\n    }\n  });\n};\n\n\n// <p><em><strong>Innate Spellcasting.</strong></em> The oblex&rsquo;s innate spellcasting ability is Intelligence (spell save DC 15). It can innately cast the following spells, requiring no components:</p>\\r\\n<p>3/day each: charm person (as 5th-level spell), color spray, detect thoughts, hold person (as 3rd-level spell)</p>\n\nDDBMonster.prototype._generateSpells = function() {\n\n  this.spellcasting = {\n    spelldc: 10,\n    spellcasting: \"\", // ability associated\n    spellLevel: 0,\n    spellAttackBonus: 0,\n  };\n  this.spellList = {\n    class: [],\n    pact: [],\n    atwill: [],\n    // {name: \"\", type: \"srt/lng/day\", value: 0} // check these values\n    innate: [],\n    edgeCases: [], // map { name: \"\", type: \"\", edge: \"\" }\n    material: true,\n    innateMatch: false,\n  };\n\n  // some monsters have poor spell formating, reported and might be able to remove in future\n  // https://www.dndbeyond.com/forums/d-d-beyond-general/bugs-support/91228-sir-godfrey-gwilyms-spell-statblock\n  const possibleSpellSources = this.source.specialTraitsDescription + this.source.actionsDescription;\n  let specialTraits = possibleSpellSources.replace(/<br \\/>/g, \"</p><p>\");\n\n  const dom = utils.htmlToDocumentFragment(specialTraits);\n\n  dom.childNodes.forEach((node) => {\n    if (node.textContent == \"\\n\") {\n      dom.removeChild(node);\n    }\n  });\n\n  const pactText = specialTraits.includes(\"knows the following warlock spells\")\n    ? specialTraits\n    : null;\n\n  dom.childNodes.forEach((node) => {\n    const spellText = utils.nameString(node.textContent);\n    const trimmedText = spellText.trim();\n\n    const spellCastingRegEx = new RegExp(/^Spellcasting/);\n    const innateSpellCastingRegEx = new RegExp(/^Innate Spellcasting/);\n    const spellcastingMatch = spellCastingRegEx.test(trimmedText);\n    const innateSpellcastingMatch = innateSpellCastingRegEx.test(trimmedText);\n\n    if (spellcastingMatch || innateSpellcastingMatch) {\n      this._generateSpellcasting(spellText);\n      this._generateSpelldc(spellText);\n      this._generateSpellLevel(spellText);\n      this._generateSpellAttackBonus(spellText);\n    }\n\n    const noMaterialSearch = new RegExp(/no material component|no component/);\n    const noMaterialMatch = noMaterialSearch.test(trimmedText);\n\n    if (noMaterialMatch) {\n      this.spellList.material = false;\n    }\n\n    // lets see if the spell block is innate\n    if (innateSpellcastingMatch) {\n      this.spellList.innateMatch = true;\n    } else if (spellcastingMatch) {\n      this.spellList.innateMatch = false;\n    }\n\n    this.parseOutSpells(spellText, { pactText });\n    this.parseAdditionalAtWillSpells(spellText);\n  });\n\n  this._generateSpellEdgeCases();\n\n  logger.debug(\"Parsed spell list\", this.spellList);\n\n  // this.spellcasting = {\n  //   spelldc,\n  //   spellcasting,\n  //   spellLevel,\n  //   spells,\n  //   spellList,\n  //   spellAttackBonus,\n  // };\n\n  this.npc.flags.monsterMunch['spellList'] = this.spellList;\n\n};\n\n/**\n *\n * @param {[items]} spells Array of Strings or items\n */\nDDBMonster.prototype.retrieveCompendiumSpells = async function(spells) {\n  const compendiumName = await game.settings.get(SETTINGS.MODULE_ID, \"entity-spell-compendium\");\n  const compendiumItems = await CompendiumHelper.retrieveMatchingCompendiumItems(spells, compendiumName);\n  const itemData = compendiumItems.map((i) => {\n    let spell = i.toObject();\n    delete spell._id;\n    return spell;\n  });\n\n  return itemData;\n};\n\nDDBMonster.prototype.getSpellEdgeCase = function(spell, type, spellList) {\n  const edgeCases = spellList.edgeCases;\n  const edgeCase = edgeCases.find((edge) => edge.name.toLowerCase() === spell.name.toLowerCase() && edge.type === type);\n\n  if (edgeCase) {\n    logger.debug(`Spell edge case for ${spell.name}`);\n    switch (edgeCase.edge.toLowerCase()) {\n      case \"self\":\n      case \"self only\":\n        spell.system.target.type = \"self\";\n        logger.debug(\"spell target changed to self\");\n        break;\n      // no default\n    }\n    spell.name = `${spell.name} (${edgeCase.edge})`;\n    spell.system.description.value = `<p><b>Special Notes: ${edgeCase.edgeDescription ?? edgeCase.edge}.</b></p>\\n\\n${spell.system.description.value}`;\n\n    if (spell.system.description.chat !== \"\") {\n      spell.system.description.chat = `<p><b>Special Notes: ${edgeCase.edgeDescription ?? edgeCase.edge}.</b></p>\\n\\n${spell.system.description.chat}`;\n    }\n\n    const diceSearch = /(\\d+)d(\\d+)/;\n    const diceMatch = edgeCase.edge.match(diceSearch);\n    if (diceMatch) {\n      if (spell.system.damage.parts[0] && spell.system.damage.parts[0][0]) {\n        spell.system.damage.parts[0][0] = diceMatch[0];\n      } else if (spell.system.damage.parts[0]) {\n        spell.system.damage.parts[0] = [diceMatch[0]];\n      } else {\n        spell.system.damage.parts = [[diceMatch[0]]];\n      }\n    }\n\n    // save DC 12\n    const saveSearch = /save DC (\\d+)/;\n    const saveMatch = edgeCase.edge.match(saveSearch);\n    if (saveMatch) {\n      spell.system.save.dc = parseInt(saveMatch[1]);\n      spell.system.save.scaling = \"flat\";\n    }\n\n  }\n\n  // remove material components?\n  if (!spellList.material) {\n    spell.system.materials = {\n      value: \"\",\n      consumed: false,\n      cost: 0,\n      supply: 0\n    };\n    spell.system.properties = utils.removeFromProperties(spell.system.properties, \"material\");\n  }\n\n};\n\n// temporary spell hints\n// these covercurrent gaps in teh parser, or blocks that are impossible to parse\nDDBMonster.prototype._addSpellHints = function() {\n  switch (this.name) {\n    case \"Faerie Dragon (Younger)\":\n    case \" Faerie Dragon (Younger)\": {\n      this.spellList.innate = [\n        { name: \"Dancing Lights\", type: \"day\", edge: \"Red\", value: 1, edgeDescription: \"Available to Red, Orange, Yellow\" },\n        { name: \"Mage Hand\", type: \"day\", edge: \"Red\", value: 1, edgeDescription: \"Available to Red, Orange, Yellow\" },\n        { name: \"Minor Illusion\", type: \"day\", edge: \"Red\", value: 1, edgeDescription: \"Available to Red, Orange, Yellow\" },\n        { name: \"Color Spray\", type: \"day\", edge: \"Orange\", value: 1, edgeDescription: \"Available to Orange, Yellow\" },\n        { name: \"Mirror Image\", type: \"day\", edge: \"Yellow\", value: 1, edgeDescription: \"Available to Yellow\" },\n      ];\n      this.spellList.edgeCases = foundry.utils.deepClone(this.spellList.innate).map((s) => {\n        s.type = \"innate\";\n        return s;\n      });\n      this.spellList.material = false;\n      break;\n    }\n    case \"Faerie Dragon (Older)\":\n    case \" Faerie Dragon (Older)\":\n    case \"Otto\": {\n      this.spellList.innate = [\n        { name: \"Dancing Lights\", type: \"day\", edge: \"Red\", value: 1, edgeDescription: \"Available to Red, Orange, Yellow, Green, Blue, Indigo and Violet\" },\n        { name: \"Mage Hand\", type: \"day\", edge: \"Red\", value: 1, edgeDescription: \"Available to Red, Orange, Yellow, Green, Blue, Indigo and Violet\" },\n        { name: \"Minor Illusion\", type: \"day\", edge: \"Red\", value: 1, edgeDescription: \"Available to Red, Orange, Yellow, Green, Blue, Indigo and Violet\" },\n        { name: \"Color Spray\", type: \"day\", edge: \"Orange\", value: 1, edgeDescription: \"Available to Orange, Yellow, Green, Blue, Indigo and Violet\" },\n        { name: \"Mirror Image\", type: \"day\", edge: \"Yellow\", value: 1, edgeDescription: \"Available to Yellow, Green, Blue, Indigo and Violet\" },\n        { name: \"Suggestion\", type: \"day\", edge: \"Green\", value: 1, edgeDescription: \"Available to Green, Blue, Indigo and Violet\" },\n        { name: \"Major Image\", type: \"day\", edge: \"Blue\", value: 1, edgeDescription: \"Available to Blue, Indigo and Violet\" },\n        { name: \"Hallucinatory Terrain\", type: \"day\", edge: \"Indigo\", value: 1, edgeDescription: \"Available to Indigo and Violet\" },\n        { name: \"Polymorph\", type: \"day\", edge: \"Violet\", value: 1, edgeDescription: \"Available to Indigo\" },\n      ];\n      this.spellList.edgeCases = foundry.utils.deepClone(this.spellList.innate).map((s) => {\n        s.type = \"innate\";\n        return s;\n      });\n      this.spellList.material = false;\n      break;\n    }\n    case \"Fathomer\": {\n      //   this.spellList.pact = [\n      //     { name: \"armor of agathys\", type: \"\" },\n      //     { name: \"expeditious retreat\", type: \"\" },\n      //     { name: \"hex\", type: \"\" },\n      //     { name: \"invisibility\", type: \"\" },\n      //     { name: \"vampiric touch\", type: \"\" },\n      // ];\n      this.spellList.atwill.push(\"Mage Armor\");\n      break;\n    }\n    case \"Hypnos Magen\": {\n      this.spellList.atwill = [\"Suggestion\"];\n      this.spellList.material = false;\n      this.spellcasting.spellcasting = \"int\";\n      break;\n    }\n    case \"Puppeteer Parasite\": {\n      this.spellList.innate = [{ name: \"Suggestion\", type: \"day\", value: 1 }];\n      this.spellList.material = false;\n      break;\n    }\n    case \"Sephek Kaltro\": {\n      this.spellList.innate = [{ name: \"Misty Step\", type: \"day\", value: 3 }];\n      this.spellList.material = false;\n      break;\n    }\n    // case \"Priest of Osybus (Deathly)\": {\n    //   this.spellList.innate = [{ name: \"Circle of Death\", type: \"charge\", value: 1, recharge: \"5\" }];\n    //   break;\n    // }\n    // no default\n  }\n};\n\nDDBMonster.prototype.addSpells = async function() {\n  this._addSpellHints();\n  // check to see if we have munched flags to work on\n  if (!this.spellList) return;\n\n  logger.debug(`Adding Spell List`, this.spellList);\n  const atWill = this.spellList.atwill;\n  const klass = this.spellList.class;\n  const innate = this.spellList.innate;\n  const pact = this.spellList.pact;\n\n  if (atWill.length !== 0) {\n    logger.debug(\"Retrieving at Will spells:\", atWill);\n    let spells = await this.retrieveCompendiumSpells(atWill);\n    spells = spells.filter((spell) => spell !== null).map((spell) => {\n      if (spell.system.level == 0) {\n        spell.system.preparation = {\n          mode: \"prepared\",\n          prepared: false,\n        };\n      } else {\n        spell.system.preparation = {\n          mode: \"atwill\",\n          prepared: false,\n        };\n        spell.system.uses = {\n          value: null,\n          max: \"\",\n          per: null,\n          recovery: \"\",\n        };\n      }\n      this.getSpellEdgeCase(spell, \"atwill\", this.spellList);\n      return spell;\n    });\n    this.items.push(...spells);\n  }\n\n  // class spells\n  if (klass.length !== 0) {\n    logger.debug(\"Retrieving class spells:\", klass);\n    let spells = await this.retrieveCompendiumSpells(klass);\n    spells = spells.filter((spell) => spell !== null).map((spell) => {\n      spell.system.preparation = {\n        mode: \"prepared\",\n        prepared: true,\n      };\n      this.getSpellEdgeCase(spell, \"class\", this.spellList);\n      return spell;\n    });\n    this.items.push(...spells);\n  }\n\n  // pact spells\n  if (pact.length !== 0) {\n    logger.debug(\"Retrieving pact spells:\", pact);\n    let spells = await this.retrieveCompendiumSpells(pact);\n    spells = spells.filter((spell) => spell !== null).map((spell) => {\n      spell.system.preparation = {\n        mode: \"pact\",\n        prepared: true,\n      };\n      this.getSpellEdgeCase(spell, \"pact\", this.spellList);\n      return spell;\n    });\n    this.items.push(...spells);\n  }\n\n  // innate spells\n  if (innate.length !== 0) {\n    // innate:\n    // {name: \"\", type: \"srt/lng/day\", value: 0}\n    logger.debug(\"Retrieving innate spells:\", innate);\n    const spells = await this.retrieveCompendiumSpells(innate);\n    const innateSpells = spells.filter((spell) => spell !== null)\n      .map((spell) => {\n        const spellInfo = innate.find((w) => w.name.toLowerCase() == spell.name.toLowerCase());\n        if (spellInfo) {\n          const isAtWill = foundry.utils.hasProperty(spellInfo, \"innate\") && !spellInfo.innate;\n          if (spell.system.level == 0) {\n            spell.system.preparation = {\n              mode: \"prepared\",\n              prepared: false,\n            };\n          } else {\n            spell.system.preparation = {\n              mode: isAtWill ? \"atwill\" : \"innate\",\n              prepared: !isAtWill,\n            };\n          }\n          if (isAtWill && spellInfo.type === \"atwill\") {\n            spell.system.uses = {\n              value: null,\n              max: \"\",\n              per: null,\n              recovery: \"\",\n            };\n          } else {\n            const perLookup = DICTIONARY.resets.find((d) => d.id == spellInfo.type);\n            const per = spellInfo.type === \"atwill\"\n              ? null\n              : (perLookup && perLookup.type)\n                ? perLookup.type\n                : \"day\";\n            spell.system.uses = {\n              value: parseInt(spellInfo.value),\n              max: spellInfo.value ?? \"\",\n              per,\n              recovery: \"\",\n            };\n          }\n          this.getSpellEdgeCase(spell, \"innate\", this.spellList);\n        }\n        return spell;\n      });\n    this.items.push(...innateSpells);\n  }\n};\n","import utils from \"../../lib/utils.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n// import { fixCharacterLevels } from \"./filterModifiers.js\";\n\nDDBCharacter.prototype._newPCSkeleton = async function _newPCSkeleton() {\n  const name = (this.source.ddb.character.name === \"\") ? \"Hero With No Name\" : this.source.ddb.character.name;\n\n  this.raw.character = {\n    system: utils.getTemplate(\"character\"),\n    type: \"character\",\n    effects: [],\n    name: name,\n    // items: [],  // modified to check inventory analysis on update\n    flags: {\n      ddbimporter: {\n        compendium: false,\n        acEffects: [],\n        baseAC: 10,\n        dndbeyond: {\n          totalLevels: null,\n          proficiencies: null,\n          proficienciesIncludingEffects: null,\n          roUrl: this.source.ddb.character.readonlyUrl,\n          characterValues: this.source.ddb.character.characterValues,\n          templateStrings: [],\n          campaign: this.source.ddb.character.campaign,\n        },\n      },\n    },\n  };\n\n  // generate a prototype token\n  this._generateToken();\n\n  return this.raw.character;\n};\n\nDDBCharacter.prototype._generateCharacter = async function _generateCharacter() {\n  // *************************************\n  // PARSING THE CHARACTER\n  // **************************************\n  //\n  // ddb = fixCharacterLevels(ddb);\n\n  // build skeleton this.raw.character\n  await this._newPCSkeleton();\n\n  this.totalLevels = this.source.ddb.character.classes.reduce((prev, cur) => prev + cur.level, 0);\n  this.raw.character.flags.ddbimporter.dndbeyond.totalLevels = this.totalLevels;\n  // prettier-ignore\n  this.profBonus = Math.ceil(1 + (0.25 * this.totalLevels));\n  this.raw.character.flags.ddbimporter.dndbeyond.profBonus = this.profBonus;\n  this._generateProficiencies();\n\n  // proficiency\n  this.raw.character.system.attributes.prof = this.profBonus;\n\n  // Get supported 5e feats and abilities\n  // We do this first so we can check for them later\n  this._setSpecialTraitFlags();\n\n  this._generateAbilities();\n  this._generateHitDice();\n  this._generateDeathSaves();\n  this._generateExhaustion();\n  this.raw.character.system.attributes.inspiration = this.source.ddb.character.inspiration;\n  this._generateArmorClass();\n  this._generateHitPoints();\n  this._generateInitiative();\n  this._generateSpeed();\n  this._generateSenses();\n  this._generateSpellCasting();\n  this._generateSpellDC();\n  // resources\n  this._generateResources();\n  this._generateMaxPreparedSpells();\n  this.raw.character.system.details.xp.value = this.source.ddb.character.currentXp;\n  this._generateTrait();\n  this._generateIdeal();\n  this._generateFlaw();\n  this._generateBond();\n  this._generateAppearance();\n  this._generateDescription();\n  this._generateAlignment();\n  this._generateBiography();\n  this._generateSize();\n  // immunities, resistances, vuls and condition immunities\n  this._generateConditions();\n  this._generateCurrency();\n  await this._generateSkills();\n  this._generateSpellSlots();\n\n  // Extra global bonuses\n  this._generateBonusAbilities();\n  this._generateBonusSpellAttacks();\n  this._generateBonusSpellDC();\n  this._generateBonusWeaponAttacks();\n};\n\n","import logger from \"../../logger.js\";\nimport DICTIONARY from \"../../dictionary.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype._generateToken = function _generateToken() {\n  try {\n    // Default to the most basic token setup.\n    // everything else can be handled by the user / Token Mold\n    const existingData = foundry.utils.deepClone(this.currentActor.prototypeToken);\n    let tokenData = foundry.utils.mergeObject(existingData, {\n      actorLink: true,\n      name: this.source.ddb.character.name,\n      sight: {\n        enabled: true,\n        range: 0,\n        visionMode: \"basic\",\n      },\n      detectionModes: [],\n    });\n    const senses = this.getSenses();\n    // darkvision: 0,\n    // blindsight: 0,\n    // tremorsense: 0,\n    // truesight: 0,\n\n    for (const [key, value] of Object.entries(senses)) {\n      if (value > 0 && value > tokenData.sight.range && foundry.utils.hasProperty(DICTIONARY.senseMap(), key)) {\n        const visionMode = DICTIONARY.senseMap()[key];\n        foundry.utils.setProperty(tokenData, \"sight.visionMode\", visionMode);\n        foundry.utils.setProperty(tokenData, \"sight.range\", value);\n        tokenData.sight = foundry.utils.mergeObject(tokenData.sight, CONFIG.Canvas.visionModes[visionMode].vision.defaults);\n      }\n      if (!game.modules.get(\"vision-5e\")?.active\n        && value > 0\n        && foundry.utils.hasProperty(DICTIONARY.detectionMap, key)\n      ) {\n        const detectionMode = {\n          id: DICTIONARY.detectionMap[key],\n          range: value,\n          enabled: true,\n        };\n\n        // only add duplicate modes if they don't exist\n        if (!tokenData.detectionModes.some((mode) => mode.id === detectionMode.id)) {\n          tokenData.detectionModes.push(detectionMode);\n        }\n      }\n    }\n\n    // devilsight? we set the vision mode back to basic\n    const devilSight = senses.special.includes(\"You can see normally in darkness\");\n    if (devilSight && game.modules.get(\"vision-5e\")?.active) {\n      foundry.utils.setProperty(tokenData, \"sight.visionMode\", \"devilsSight\");\n      tokenData.sight = foundry.utils.mergeObject(tokenData.sight, CONFIG.Canvas.visionModes.devilsSight.vision.defaults);\n    } else if (devilSight) {\n      foundry.utils.setProperty(tokenData, \"sight.visionMode\", \"basic\");\n      tokenData.sight = foundry.utils.mergeObject(tokenData.sight, CONFIG.Canvas.visionModes.basic.vision.defaults);\n    }\n\n    this.raw.character.prototypeToken = tokenData;\n  } catch (err) {\n    logger.error(err);\n    logger.error(err.stack);\n    throw new Error(\"Please update your D&D 5e system to a newer version\");\n  }\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport logger from \"../../logger.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\nimport { generateFixedACEffect, generateBonusACEffect } from \"../../effects/acEffects.js\";\nimport { getAllClassFeatures } from \"./filterModifiers.js\";\n\n/**\n * This excludes shields\n */\nDDBCharacter.prototype.isArmored = function isArmored() {\n  return (\n    this.source.ddb.character.inventory.filter(\n      (item) => item.equipped && item.definition.armorClass && item.definition.armorTypeId !== 4\n    ).length >= 1\n  );\n};\n\n/**\n * This excludes shields\n */\nDDBCharacter.prototype.isUnArmored = function isUnArmored() {\n  return !this.isArmored();\n};\n\nfunction getMinimumBaseAC(modifiers) {\n  let hasBaseArmor = modifiers.filter(\n    (modifier) => modifier.type === \"set\" && modifier.subType === \"minimum-base-armor\" && modifier.isGranted\n  );\n  let baseAC = [];\n  hasBaseArmor.forEach((base) => {\n    baseAC.push(base.value);\n  });\n  return baseAC;\n}\n\nfunction getBaseArmor(ac, armorType, name = \"Racial\", formula = null) {\n  return {\n    definition: {\n      name: `Base Armor - ${name}`,\n      type: armorType,\n      armorClass: ac,\n      armorTypeId: DICTIONARY.equipment.armorType.find((id) => id.name === armorType)?.id ?? 0,\n      grantedModifiers: [],\n      canAttune: false,\n      filterType: \"Armor\",\n      formula,\n    },\n    isAttuned: false,\n  };\n}\n\nfunction getEquippedAC(equippedGear) {\n  return equippedGear.reduce((prev, item) => {\n    let ac = 0;\n    // regular armor\n    if (item.definition.armorClass) {\n      ac += item.definition.armorClass;\n    }\n\n    // magical armor\n    const itemEffects = item.equipped && item.definition.filterType !== \"Armor\";\n\n    if (!itemEffects && item.definition.grantedModifiers) {\n      let isAvailable = false;\n      // does an item need attuning\n      if (item.definition.canAttune === true) {\n        if (item.isAttuned === true) {\n          isAvailable = true;\n        }\n      } else {\n        isAvailable = true;\n      }\n\n      if (isAvailable) {\n        item.definition.grantedModifiers.forEach((modifier) => {\n          if (modifier.type === \"bonus\" && modifier.subType === \"armor-class\") {\n            // add this to armor AC\n            ac += modifier.value;\n          }\n        });\n      }\n    }\n    return prev + ac;\n  }, 0);\n}\n\n// returns an array of ac values from provided array of modifiers\nfunction getUnarmoredAC(modifiers, character) {\n  let unarmoredACValues = [];\n  let isUnarmored = modifiers.filter(\n    (modifier) => modifier.type === \"set\" && modifier.subType === \"unarmored-armor-class\" && modifier.isGranted\n  );\n  // if (isUnarmored.length === 0) {\n  //   // Some items will have an unarmoured bonus, but won't set a base, so if we are in this\n  //   // situation, we add a default base ac\n  //   isUnarmored.push({\n  //     statId: 2,\n  //     value: 0,\n  //   });\n  // }\n\n  const ignoreDex = modifiers.some((modifier) => modifier.type === \"ignore\" && modifier.subType === \"unarmored-dex-ac-bonus\");\n\n  const maxUnamoredDexMods = modifiers.filter(\n    (modifier) => modifier.type === \"set\" && modifier.subType === \"ac-max-dex-modifier\" && modifier.isGranted\n  ).map((mods) => mods.value);\n  const maxUnamoredDexMod = ignoreDex ? 0 : Math.min(...maxUnamoredDexMods, 20);\n\n  // console.log(`Max Dex: ${maxUnamoredDexMod}`);\n  const characterAbilities = character.flags.ddbimporter.dndbeyond.effectAbilities;\n\n  isUnarmored.forEach((unarmored) => {\n    let unarmoredACValue = 10;\n    // +DEX\n    // for a case of setting unarmoured ac, the dex won't detract\n    unarmoredACValue += Math.max(0, Math.min(characterAbilities.dex.mod, maxUnamoredDexMod));\n    // +WIS or +CON, if monk or barbarian, draconic resilience === null\n\n    // console.log(`Unarmoured AC Value: ${unarmoredACValue}`);\n    // console.log(unarmored);\n\n    if (unarmored.statId !== null) {\n      let ability = DICTIONARY.character.abilities.find((ability) => ability.id === unarmored.statId);\n      unarmoredACValue += characterAbilities[ability.value].mod;\n    }\n    if (unarmored.value) unarmoredACValue += unarmored.value;\n    unarmoredACValues.push(unarmoredACValue);\n  });\n  // console.warn(unarmoredACValues);\n  return unarmoredACValues;\n}\n\nfunction getDualWieldAC(data, modifiers) {\n  const dualWielding = data.character.characterValues.some((cv) => {\n    const equipped = data.character.inventory.some((item) => item.equipped && item.id == cv.valueId);\n    const dualWielding = cv.typeId === 18;\n    return equipped && dualWielding;\n  });\n  let dualWieldBonus = 0;\n\n  if (dualWielding) {\n    DDBHelper.filterModifiersOld(modifiers, \"bonus\", \"dual-wield-armor-class\", [\"\", null], true).forEach((bonus) => {\n      dualWieldBonus += bonus.value;\n    });\n  }\n\n  return dualWieldBonus;\n}\n\n// To Do: Rework AC functions as class functions to help reduce complexity in calculation.\n// eslint-disable-next-line complexity\nfunction calculateACOptions(data, character, calculatedArmor) {\n  const characterAbilities = character.flags.ddbimporter.dndbeyond.effectAbilities;\n  let actorBase = 10 + characterAbilities.dex.mod;\n  // generated AC effects\n  let effects = [];\n  // array to assemble possible AC values\n  let armorClassValues = [];\n  // max holders\n  let maxType = \"Unarmored\";\n  let maxValue = actorBase;\n  let maxData = {};\n\n  // the presumption here is that you can only wear a shield and a single\n  // additional 'armor' piece. in DDB it's possible to equip multiple armor\n  // types and it works out the best AC for you\n  // we also want to handle unarmored for monks etc.\n  // we might have multiple shields \"equipped\" by accident, so work out\n  // the best one\n  for (let armor = 0; armor < calculatedArmor.armors.length; armor++) {\n    // getEquippedAC fetches any magical AC boost on the items passed\n    let armorAC = getEquippedAC([calculatedArmor.armors[armor]]);\n    let shieldMod = 0;\n\n    if (calculatedArmor.shields.length !== 0) {\n      let maxAC = armorAC;\n      for (let shield = 0; shield < calculatedArmor.shields.length; shield++) {\n        const combinedAC = getEquippedAC([calculatedArmor.armors[armor], calculatedArmor.shields[shield]]);\n        if (combinedAC > maxAC) {\n          shieldMod = combinedAC - armorAC;\n          maxAC = combinedAC;\n        }\n      }\n      armorAC = maxAC;\n    }\n\n    // Determine final AC values based on AC Type\n    // Light Armor: AC + DEX\n    // Medium Armor: AC + DEX (max 2)\n    // Heavy Armor: AC only\n    // Unarmored Defense: Dex mod already included in calculation\n\n    // sometimes the type field can be blank in DDB\n    if (!calculatedArmor.armors[armor].definition.type || calculatedArmor.armors[armor].definition.type === \"\") {\n      const armourTypeId = calculatedArmor.armors[armor].definition.armorTypeId;\n      const acType = DICTIONARY.equipment.armorType.find((a) => a.id === armourTypeId);\n      if (acType) calculatedArmor.armors[armor].definition.type = acType.name;\n    }\n    let effect = null;\n    let acValue;\n\n    switch (calculatedArmor.armors[armor].definition.type) {\n      case \"Natural Armor\": {\n        let acCalc = 0;\n        // Tortles don't get to add an unarmored ac bonus for their shell\n        const ignoreUnarmouredACBonus = DDBHelper.filterBaseModifiers(data, \"ignore\", { subType: \"unarmored-dex-ac-bonus\" });\n        if (ignoreUnarmouredACBonus) {\n          acCalc = armorAC + calculatedArmor.miscACBonus;\n          // console.log(armorAC);\n          // console.log(gearAC);\n          // console.log(miscACBonus);\n        } else {\n          acCalc = armorAC + calculatedArmor.miscACBonus + calculatedArmor.unarmoredACBonus;\n        }\n        acValue = {\n          name: calculatedArmor.armors[armor].definition.name,\n          value: acCalc + calculatedArmor.gearAC,\n          type: \"Natural\",\n          acCalc,\n          shieldMod,\n          calculatedArmor,\n        };\n        if (acCalc > actorBase) actorBase = acCalc - shieldMod;\n        effect = generateFixedACEffect(acValue.value, `AC ${calculatedArmor.armors[armor].definition.name} (Natural): ${acValue.value}`, true);\n        break;\n      }\n      case \"Unarmored Defense\": {\n        const acCalc = armorAC + calculatedArmor.miscACBonus + calculatedArmor.unarmoredACBonus;\n        acValue = {\n          name: calculatedArmor.armors[armor].definition.name,\n          value: acCalc + calculatedArmor.gearAC,\n          type: \"Unarmored Defense\",\n          acCalc,\n          shieldMod,\n          calculatedArmor,\n        };\n        if (acCalc > actorBase) actorBase = acCalc - shieldMod;\n        effect = generateFixedACEffect(acValue.value, `AC ${calculatedArmor.armors[armor].definition.name} (Unarmored Defense): ${acValue.value}`);\n        break;\n      }\n      case \"Unarmored\": {\n        const base = armorAC + calculatedArmor.miscACBonus + calculatedArmor.unarmoredACBonus;\n        const acCalc = base + characterAbilities.dex.mod;\n        acValue = {\n          name: calculatedArmor.armors[armor].definition.name,\n          value: acCalc + calculatedArmor.gearAC,\n          type: \"Unarmored\",\n          acCalc,\n          shieldMod,\n          calculatedArmor,\n        };\n        if (acCalc > actorBase) actorBase = acCalc - shieldMod;\n        effect = generateFixedACEffect(`${acValue.value} + @abilities.dex.mod`, `AC ${calculatedArmor.armors[armor].definition.name} (Unarmored): ${acValue.value}`, true, 15);\n        break;\n      }\n      case \"Heavy Armor\": {\n        const acCalc = armorAC + calculatedArmor.gearAC + calculatedArmor.miscACBonus;\n        acValue = {\n          name: calculatedArmor.armors[armor].definition.name,\n          value: acCalc,\n          type: \"Heavy\",\n          acCalc,\n          shieldMod,\n          calculatedArmor,\n        };\n        effect = generateFixedACEffect(acValue.value, `AC ${calculatedArmor.armors[armor].definition.name} (Heavy): ${acValue.value}`);\n        break;\n      }\n      case \"Medium Armor\": {\n        const maxDexMedium = Math.max(\n          ...DDBHelper.filterBaseModifiers(data, \"set\", { subType: \"ac-max-dex-armored-modifier\", includeExcludedEffects: true }).map((mod) => mod.value),\n          // ...DDBHelper.filterBaseModifiers(data, \"set\", { subType: \"ac-max-dex-modifier\", includeExcludedEffects: true }).map((mod) => mod.value),\n          2,\n        );\n        const acCalc = armorAC + calculatedArmor.gearAC + calculatedArmor.miscACBonus;\n        acValue = {\n          name: calculatedArmor.armors[armor].definition.name,\n          value: acCalc + Math.min(maxDexMedium, characterAbilities.dex.mod),\n          type: \"Medium\",\n          acCalc,\n          shieldMod,\n          calculatedArmor,\n        };\n        effect = generateFixedACEffect(`${acCalc} + {@abilities.dex.mod, ${maxDexMedium}}kl`, `AC ${calculatedArmor.armors[armor].definition.name} (Medium): ${acValue.value}`);\n        break;\n      }\n      case \"Light Armor\": {\n        const acCalc = armorAC + calculatedArmor.gearAC + calculatedArmor.miscACBonus;\n        acValue = {\n          name: calculatedArmor.armors[armor].definition.name,\n          value: acCalc + characterAbilities.dex.mod,\n          type: \"Light\",\n          acCalc,\n          shieldMod,\n          calculatedArmor,\n        };\n        effect = generateFixedACEffect(`${acCalc} + @abilities.dex.mod`, `AC ${calculatedArmor.armors[armor].definition.name} (Light): ${acValue.value}`);\n        break;\n      }\n      case \"Custom\": {\n        const acCalc = armorAC + calculatedArmor.gearAC + calculatedArmor.miscACBonus;\n        acValue = {\n          name: calculatedArmor.armors[armor].definition.name,\n          value: acCalc,\n          type: \"Custom\",\n          acCalc,\n          shieldMod,\n          formula: calculatedArmor.armors[armor].definition.formula,\n          calculatedArmor,\n        };\n        effect = generateFixedACEffect(acValue.formula, `AC ${acValue.name}: ${acValue.value}`, false, 22);\n        break;\n      }\n      default: {\n        const acCalc = armorAC + calculatedArmor.gearAC + calculatedArmor.miscACBonus;\n        acValue = {\n          name: calculatedArmor.armors[armor].definition.name,\n          value: acCalc + characterAbilities.dex.mod,\n          type: \"Other\",\n          acCalc,\n          shieldMod,\n          calculatedArmor,\n        };\n        effect = generateFixedACEffect(`${acCalc} + @abilities.dex.mod`, `AC ${calculatedArmor.armors[armor].definition.name}: ${acValue.value}`, false, 22);\n        break;\n      }\n    }\n    if (effect) {\n      effect.flags.ddbimporter.itemId = calculatedArmor.armors[armor].id;\n      effect.flags.ddbimporter.entityTypeId = calculatedArmor.armors[armor].entityTypeId;\n      effects.push(effect);\n    }\n    armorClassValues.push(acValue);\n    if (acValue.value > maxValue || (acValue.value === \"Unarmored Defense\" && acValue.value >= maxValue)) {\n      maxType = acValue.type;\n      maxValue = acValue.value;\n      maxData = foundry.utils.deepClone(acValue);\n    }\n  }\n\n  logger.debug(\"Final AC Choices:\", armorClassValues);\n  return {\n    actorBase,\n    armorClassValues,\n    effects,\n    maxType,\n    maxValue,\n    maxData,\n  };\n}\n\n\nDDBCharacter.prototype._generateOverrideArmorClass = function _generateOverrideArmorClass(overRideAC) {\n  const overRideEffect = generateFixedACEffect(overRideAC.value, `AC Override: ${overRideAC.value}`);\n\n  this.raw.character.system.attributes.ac = {\n    flat: overRideAC.value,\n    calc: \"flat\",\n    formula: \"\",\n  };\n  this.raw.character.effects = this.raw.character.effects.concat(overRideEffect);\n  this.raw.character.flags.ddbimporter.acEffects = [overRideEffect];\n  this.raw.character.flags.ddbimporter.baseAC = overRideAC.value;\n  this.raw.character.flags.ddbimporter.autoAC = foundry.utils.deepClone(this.raw.character.system.attributes.ac);\n  this.raw.character.flags.ddbimporter.overrideAC = {\n    flat: overRideAC.value,\n    calc: \"flat\",\n    formula: \"\",\n  };\n  this.raw.character.flags.ddbimporter.fixedAC = {\n    type: \"Number\",\n    label: \"Armor Class\",\n    value: overRideAC.value,\n  };\n\n  this.armor.results = {\n    maxValue: overRideAC.value,\n    maxType: \"override\",\n    // actorBase,\n    // armorClassValues,\n    // effects,\n    // maxType,\n    // maxValue,\n    // maxData,\n  };\n};\n\n\nDDBCharacter.prototype._generateArmorClass = function _generateArmorClass() {\n  const overRideAC = this.source.ddb.character.characterValues.find((val) => val.typeId === 1);\n\n  if (overRideAC) {\n    this._generateOverrideArmorClass(overRideAC);\n    return;\n  }\n\n  // get a list of equipped armor\n  // we make a distinction so we can loop over armor\n  this.armor.equippedArmor = this.source.ddb.character.inventory.filter(\n    (item) => item.equipped && item.definition.filterType === \"Armor\"\n  );\n  this.armor.baseAC = 10;\n  // for things like fighters fighting style\n  this.armor.miscACBonus = 0;\n  this.armor.bonusEffects = [];\n  // lets get equipped gear\n  this.armor.equippedGear = this.source.ddb.character.inventory.filter(\n    (item) => item.equipped && item.definition.filterType !== \"Armor\"\n  );\n  this.armor.unarmoredACBonus = DDBHelper\n    .filterBaseModifiers(this.source.ddb, \"bonus\", { subType: \"unarmored-armor-class\" })\n    .reduce((prev, cur) => prev + cur.value, 0);\n\n  // lets get the AC for all our non-armored gear, we'll add this later\n  this.armor.gearAC = getEquippedAC(this.armor.equippedGear);\n\n  // While not wearing armor, lets see if we have special abilities\n  if (this.isUnArmored()) {\n    // unarmored abilities from Class/Race?\n    const unarmoredSources = [\n      DDBHelper.getChosenClassModifiers(this.source.ddb),\n      this.source.ddb.character.modifiers.race,\n      this.source.ddb.character.modifiers.feat,\n      DDBHelper.getActiveItemModifiers(this.source.ddb, true),\n    ];\n    unarmoredSources.forEach((modifiers) => {\n      const unarmoredAC = Math.max(getUnarmoredAC(modifiers, this.raw.character));\n      if (unarmoredAC) {\n        // we add this as an armored type so we can get magical item bonuses\n        // e.g. ring of protection\n        this.armor.equippedArmor.push(getBaseArmor(unarmoredAC, \"Unarmored Defense\", \"Unarmored defense\"));\n      }\n    });\n  } else {\n    // check for things like fighters fighting style defense\n    const armorBonusSources = [DDBHelper.getChosenClassModifiers(this.source.ddb), this.source.ddb.character.modifiers.race].flat();\n    const armoredBonuses = armorBonusSources.filter(\n      (modifier) => modifier.subType === \"armored-armor-class\" && modifier.isGranted\n    );\n    const effect = generateBonusACEffect(armoredBonuses, \"AC: Armored Misc Bonuses\", \"armored-armor-class\", null);\n    if (effect.changes.length > 0) this.armor.bonusEffects.push(effect);\n  }\n\n  // Generic AC bonuses like Warforfed Integrated Protection\n  // item modifiers are loaded by ac calcs\n  this.armor.miscModifiers = [\n    DDBHelper.getChosenClassModifiers(this.source.ddb),\n    DDBHelper.getModifiers(this.source.ddb, \"race\"),\n    DDBHelper.getModifiers(this.source.ddb, \"background\"),\n    DDBHelper.getModifiers(this.source.ddb, \"feat\")\n  ];\n\n  DDBHelper.filterModifiersOld(this.armor.miscModifiers, \"bonus\", \"armor-class\", [\"\", null], true).forEach((bonus) => {\n    const component = DDBHelper.findComponentByComponentId(this.source.ddb, bonus.componentId);\n    const name = component ? component.definition?.name ?? component.name : `AC: Misc (${bonus.friendlySubtypeName})`;\n    const effect = generateBonusACEffect([bonus], name, \"armor-class\", null);\n    if (effect.changes.length > 0) this.armor.bonusEffects.push(effect);\n  });\n\n  this.source.ddb.character.characterValues.filter((value) =>\n    (value.typeId === 3 || value.typeId === 2)\n    && value.value !== 0\n  ).forEach((custom) => {\n    const name = custom.notes && custom.notes.trim() !== \"\" ? custom.notes : \"AC: Custom Bonus\";\n    const effect = generateBonusACEffect([], name, \"custom\", null);\n    if (custom.value && ((Number.isInteger(custom.value) && Number.parseInt(custom.value) !== 0) || `${custom.value}`.trim() !== \"\")) {\n      effect.changes.push({\n        key: \"system.attributes.ac.bonus\",\n        value: `+ ${custom.value}`,\n        mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n        priority: 30,\n      });\n    }\n    if (effect.changes.length > 0) this.armor.bonusEffects.push(effect);\n  });\n\n  this.armor.miscACBonus += getDualWieldAC(this.source.ddb, this.armor.miscModifiers);\n\n  // Each racial armor appears to be slightly different!\n  // We care about Tortles and Lizardfolk here as they can use shields, but their\n  // modifier is set differently\n  switch (this.source.ddb.character.race.fullName) {\n    case \"Lizardfolk\":\n      this.armor.baseAC = Math.max(getUnarmoredAC(this.source.ddb.character.modifiers.race, this.raw.character));\n      this.armor.equippedArmor.push(\n        getBaseArmor(this.armor.baseAC, \"Natural Armor\", this.source.ddb.character.race.fullName)\n      );\n      break;\n    case \"Autognome\":\n    case \"Thri-kreen\":\n    case \"Loxodon\":\n    case \"Tortle\":\n      this.armor.baseAC = Math.max(\n        getMinimumBaseAC(this.source.ddb.character.modifiers.race, this.raw.character),\n        getUnarmoredAC(this.source.ddb.character.modifiers.race, this.raw.character)\n      );\n      this.armor.equippedArmor.push(\n        getBaseArmor(this.armor.baseAC, \"Natural Armor\", this.source.ddb.character.race.fullName)\n      );\n      break;\n    default:\n      this.armor.equippedArmor.push(getBaseArmor(this.armor.baseAC, \"Unarmored\"));\n  }\n\n  if (this.source.ddb.character.feats.some((f) => f.definition.name === \"Dragon Hide\")) {\n    this.armor.baseAC = Math.max(getUnarmoredAC(this.source.ddb.character.modifiers.feat, this.raw.character));\n    this.armor.equippedArmor.push(getBaseArmor(this.armor.baseAC, \"Custom\", \"Dragon Hide\", \"13 + @abilities.dex.mod\"));\n  }\n\n  this.armor.shields = this.armor.equippedArmor.filter((shield) => shield.definition.armorTypeId === 4);\n  this.armor.armors = this.armor.equippedArmor.filter((armour) => armour.definition.armorTypeId !== 4);\n\n  logger.debug(\"Calculated GearAC: \" + this.armor.gearAC);\n  logger.debug(\"Unarmoured AC Bonus:\" + this.armor.unarmoredACBonus);\n  logger.debug(\"Calculated MiscACBonus: \" + this.armor.miscACBonus);\n  logger.debug(\"Equipped AC Options: \", this.armor.equippedArmor);\n  logger.debug(\"Armors: \", this.armor.armors);\n  logger.debug(\"Shields: \", this.armor.shields);\n\n  this.armor.calculatedArmor = {\n    gearAC: this.armor.gearAC,\n    unarmoredACBonus: this.armor.unarmoredACBonus,\n    miscACBonus: this.armor.miscACBonus,\n    equippedArmor: this.armor.equippedArmor,\n    armors: this.armor.armors,\n    shields: this.armor.shields,\n  };\n  this.armor.results = calculateACOptions(this.source.ddb, this.raw.character, this.armor.calculatedArmor);\n\n  logger.debug(\"Calculated AC Results:\", {\n    calculatedArmor: this.armor.calculatedArmor,\n    results: this.armor.results,\n  });\n  // get the max AC we can use from our various computed values\n  // const max = Math.max(...results.armorClassValues.map((type) => type.value));\n\n  //\n  // DND5E.armorClasses = {\n  //   \"default\": {\n\n\n  // const draconic = ddb.classes[0].classFeatures[1].definition\n  const classFeatures = getAllClassFeatures(this.source.ddb.character);\n  logger.debug(\"Class features\", classFeatures);\n\n  let calc = \"default\";\n  let flat = null;\n  let formula = \"\";\n  if (classFeatures.some((kf) =>\n    kf.className === \"Sorcerer\"\n    && kf.subclassName === \"Draconic Bloodline\"\n    && kf.name === \"Draconic Resilience\"\n  )) calc = \"draconic\";\n\n  if (classFeatures.some((kf) =>\n    kf.className === \"Monk\"\n    && kf.subclassName === null\n    && kf.name === \"Unarmored Defense\"\n  )) calc = \"unarmoredMonk\";\n\n  if (classFeatures.some((kf) =>\n    kf.className === \"Barbarian\"\n    && kf.subclassName === null\n    && kf.name === \"Unarmored Defense\"\n  )) calc = \"unarmoredBarb\";\n\n  if (this.armor.results.maxType === \"Natural\") {\n    calc = \"natural\";\n    flat = this.armor.results.actorBase;\n  }\n\n  if (this.armor.results.maxType === \"Custom\") {\n    calc = \"custom\";\n    formula = this.armor.results.maxData.formula;\n  }\n\n  logger.debug(\"AC Results:\", {\n    fixed: {\n      type: \"Number\",\n      label: \"Armor Class\",\n      value: this.armor.results.maxValue,\n    },\n    base: this.armor.results.actorBase,\n    effects: this.armor.results.effects,\n    bonusEffects: this.armor.bonusEffects,\n    override: {\n      flat: this.armor.results.maxValue,\n      calc: \"flat\",\n      formula: \"\",\n    },\n    auto: {\n      flat,\n      calc,\n      formula,\n    },\n  });\n\n  // this.raw.character.system.attributes.ac = {\n  //   flat,\n  //   calc,\n  //   formula,\n  // };\n\n  this.raw.character.effects = this.raw.character.effects.concat(this.armor.bonusEffects);\n\n  this.raw.character.flags.ddbimporter.acEffects = this.armor.results.effects;\n  this.raw.character.flags.ddbimporter.baseAC = this.armor.results.actorBase;\n  this.raw.character.flags.ddbimporter.autoAC = foundry.utils.deepClone(this.raw.character.system.attributes.ac);\n  this.raw.character.flags.ddbimporter.overrideAC = {\n    flat: this.armor.results.maxValue,\n    calc: \"flat\",\n    formula: \"\",\n  };\n\n};\n","import DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype._setSpecialTraitFlags = function _setSpecialTraitFlags() {\n  this.raw.character.flags.dnd5e = {\n    powerfulBuild: false,\n    savageAttacks: false,\n    elvenAccuracy: false,\n    halflingLucky: false,\n    initiativeAdv: false,\n    initiativeAlert: false,\n    jackOfAllTrades: false,\n    weaponCriticalThreshold: 20,\n    observantFeat: false,\n    remarkableAthlete: false,\n    reliableTalent: false,\n    diamondSoul: false,\n    meleeCriticalDamageDice: 0,\n    wildMagic: false,\n    spellSniper: false,\n    tavernBrawlerFeat: false,\n  };\n\n  // powerful build/equine build\n  this.raw.character.flags.dnd5e.powerfulBuild = this.source.ddb.character.race.racialTraits.some((trait) =>\n    [\"Equine Build\", \"Powerful Build, Hippo Build\", \"Little Giant\"].includes(trait.definition.name)\n  );\n\n  // tavern brawler feat\n  this.raw.character.flags.dnd5e.tavernBrawlerFeat = this.source.ddb.character.feats.some(\n    (trait) => trait.definition.name === \"Tavern Brawler\"\n  );\n\n  // savage attacks\n  const savageAttacks = this.source.ddb.character.race.racialTraits.some(\n    (trait) => trait.definition.name === \"Savage Attacks\"\n  );\n  this.raw.character.flags.dnd5e.savageAttacks = savageAttacks;\n  if (savageAttacks) this.raw.character.flags.dnd5e.meleeCriticalDamageDice += 1;\n\n  // halfling lucky\n  this.raw.character.flags.dnd5e.halflingLucky = this.source.ddb.character.race.racialTraits.some(\n    (trait) => trait.definition.name === \"Lucky\"\n  );\n\n  // elven accuracy\n  this.raw.character.flags.dnd5e.elvenAccuracy = this.source.ddb.character.feats.some(\n    (feat) => feat.definition.name === \"Elven Accuracy\"\n  );\n\n  // alert feat\n  this.raw.character.flags.dnd5e.initiativeAlert = this.source.ddb.character.feats.some(\n    (feat) => feat.definition.name === \"Alert\"\n  );\n\n  // advantage on initiative\n  this.raw.character.flags.dnd5e.initiativeAdv\n    = DDBHelper.filterBaseModifiers(this.source.ddb, \"advantage\", { subType: \"initiative\" }).length > 0;\n\n  // initiative half prof\n  this.raw.character.flags.dnd5e.initiativeHalfProf\n    = DDBHelper.filterBaseModifiers(this.source.ddb, \"half-proficiency\", { subType: \"initiative\" }).length > 0;\n\n  // observant\n  // we now just add this to the skill\n  // this.raw.character.flags.dnd5e.observantFeat = this.source.ddb.character.feats.some(\n  //   (feat) => feat.definition.name === \"Observant\"\n  // );\n\n  // weapon critical threshold\n  // fighter improved crit\n  // remarkable athlete\n  this.source.ddb.character.classes.forEach((cls) => {\n    if (cls.subclassDefinition) {\n      // Improved Critical\n      const improvedCritical = cls.subclassDefinition.classFeatures.some(\n        (feature) => feature.name === \"Improved Critical\" && cls.level >= feature.requiredLevel\n      );\n      const superiorCritical = cls.subclassDefinition.classFeatures.some(\n        (feature) => feature.name === \"Superior Critical\" && cls.level >= feature.requiredLevel\n      );\n\n      if (superiorCritical) {\n        this.raw.character.flags.dnd5e.weaponCriticalThreshold = 18;\n      } else if (improvedCritical && this.raw.character.flags.dnd5e.weaponCriticalThreshold > 19) {\n        this.raw.character.flags.dnd5e.weaponCriticalThreshold = 19;\n      }\n\n      // Remarkable Athlete\n      this.raw.character.flags.dnd5e.remarkableAthlete = cls.subclassDefinition.classFeatures.some(\n        (feature) => feature.name === \"Remarkable Athlete\" && cls.level >= feature.requiredLevel\n      );\n\n      // wild magic surge for 5e Helpers\n      this.raw.character.flags.dnd5e.wildMagic = cls.subclassDefinition.classFeatures.some(\n        (feature) => feature.name === \"Wild Magic Surge\" && cls.level >= feature.requiredLevel\n      );\n    }\n\n    // Brutal Critical\n    this.raw.character.flags.dnd5e.meleeCriticalDamageDice += cls.definition.classFeatures.filter(\n      (feature) => feature.name === \"Brutal Critical\" && cls.level >= feature.requiredLevel\n    ).length;\n\n    // Diamond Soul\n    this.raw.character.flags.dnd5e.diamondSoul = cls.definition.classFeatures.some(\n      (feature) => feature.name === \"Diamond Soul\" && cls.level >= feature.requiredLevel\n    );\n\n    // Jack of All Trades\n    this.raw.character.flags.dnd5e.jackOfAllTrades = cls.definition.classFeatures.some(\n      (feature) => feature.name === \"Jack of All Trades\" && cls.level >= feature.requiredLevel\n    );\n\n    // Reliable Talent\n    this.raw.character.flags.dnd5e.reliableTalent = cls.definition.classFeatures.some(\n      (feature) => feature.name === \"Reliable Talent\" && cls.level >= feature.requiredLevel\n    );\n  });\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype._isHalfProficiencyRoundedUp = function _isHalfProficiencyRoundedUp(skill, modifiers = null) {\n  const longAbility = DICTIONARY.character.abilities\n    .filter((ability) => skill.ability === ability.value)\n    .map((ability) => ability.long)[0];\n\n  const roundUp = (modifiers)\n    ? DDBHelper.filterModifiersOld(modifiers, \"half-proficiency-round-up\", `${longAbility}-ability-checks`)\n    : DDBHelper.filterBaseModifiers(this.source?.ddb, \"half-proficiency-round-up\", { subType: `${longAbility}-ability-checks`, includeExcludedEffects: true });\n  return Array.isArray(roundUp) && roundUp.length;\n};\n\nDDBCharacter.prototype._getCustomProficiencies = function _getCustomProficiencies(type) {\n  const profGroup = CONFIG.DDB.proficiencyGroups.find((group) => group.label == type);\n  const profCharacterValues = this.source.ddb.character.characterValues.filter(\n    (value) =>\n      profGroup.customAdjustments.includes(parseInt(value.typeId))\n      && profGroup.entityTypeIds.includes(parseInt(value.valueTypeId))\n      && value.value == 3\n  );\n  const customProfs = CONFIG.DDB[type.toLowerCase()]\n    .filter((prof) => profCharacterValues.some((value) => value.valueId == prof.id))\n    .map((prof) => prof.name);\n\n  return customProfs;\n};\n\nDDBCharacter.prototype._getCoreProficiencies = function _getCoreProficiencies(includeItemEffects = false) {\n  return DDBHelper\n    .filterBaseModifiers(this.source.ddb, \"proficiency\", { restriction: null, includeExcludedEffects: includeItemEffects })\n    .map((proficiency) => {\n      return { name: proficiency.friendlySubtypeName };\n    });\n};\n\n\nDDBCharacter.prototype.getArmorProficiencies = function getArmorProficiencies(proficiencyArray) {\n  const values = new Set();\n  const custom = [];\n\n  // lookup the characters's proficiencies in the DICT\n  const allProficiencies = DICTIONARY.character.proficiencies.filter((prof) => prof.type === \"Armor\" && foundry.utils.hasProperty(prof, \"foundryValue\"));\n\n  const processArmorProficiency = (prof) => {\n    if (prof.name === \"Light Armor\") values.add(\"lgt\");\n    else if (prof.name === \"Medium Armor\") values.add(\"med\");\n    else if (prof.name === \"Heavy Armor\") values.add(\"hvy\");\n    else if (prof.name === \"Shields\") values.add(\"shl\");\n    else {\n      const entry = allProficiencies.find((p) => p.name === prof.name);\n      if (entry) values.add(entry.foundryValue);\n    }\n  };\n  proficiencyArray.forEach((prof) => {\n    processArmorProficiency(prof);\n  });\n\n  if (this.source?.ddb) {\n    // load custom proficiencies in characterValues\n    const customProfs = this._getCustomProficiencies(\"Armor\");\n    customProfs.forEach((prof) => {\n      processArmorProficiency({ name: prof });\n    });\n  }\n  return {\n    value: [...values],\n    custom: [...new Set(custom)].join(\";\"),\n  };\n};\n\n//\n// DND5E.toolProficiencies = {\n// \"art\": \"Artisan's Tools\",\n// \"disg\": \"Disguise Kit\",\n// \"forg\": \"Forgery Kit\",\n// \"game\": \"Gaming Set\",\n// \"herb\": \"Herbalism Kit\",\n// \"music\": \"Musical Instrument\",\n// \"navg\": \"Navigator's Tools\",\n// \"pois\": \"Poisoner's Kit\",\n// \"thief\": \"Thieves' Tools\",\n// \"vehicle\": \"Vehicle (Land or Water)\"\n// };\n//\nDDBCharacter.prototype.getToolProficiencies = function getToolProficiencies(proficiencyArray) {\n  const results = {};\n\n  // lookup the characters's proficiencies in the DICT\n  const allToolProficiencies = DICTIONARY.character.proficiencies\n    .filter((prof) => prof.type === \"Tool\");\n\n  const mods = this.source?.ddb ? DDBHelper.getAllModifiers(this.source.ddb, { includeExcludedEffects: true }) : [];\n\n  const toolExpertise = this.source?.ddb\n    ? this.source.ddb.character.classes.some((cls) =>\n      cls.classFeatures.some((feature) => feature.definition.name === \"Tool Expertise\" && cls.level >= feature.definition.requiredLevel)\n    )\n      ? 2\n      : 1\n    : 1;\n\n  proficiencyArray.forEach((prof) => {\n    const profMatch = allToolProficiencies.find((allProf) => allProf.name === prof.name);\n    if (profMatch && profMatch.baseTool) {\n      const modifiers = mods\n        .filter((modifier) => modifier.friendlySubtypeName === profMatch.name)\n        .map((mod) => mod.type);\n\n      const defaultAbility = profMatch?.ability ?? \"dex\";\n\n      const halfProficiency = this.source?.ddb\n        ? DDBHelper.getChosenClassModifiers(this.source.ddb).find(\n          (modifier) =>\n            // Jack of All trades/half-rounded down\n            (modifier.type === \"half-proficiency\" && modifier.subType === \"ability-checks\")\n            // e.g. champion for specific ability checks\n            || this._isHalfProficiencyRoundedUp({ ability: defaultAbility })\n        ) !== undefined\n          ? 0.5\n          : 0\n        : 0;\n\n      const proficient = modifiers.includes(\"expertise\") ? 2 : modifiers.includes(\"proficiency\") ? toolExpertise : halfProficiency;\n\n      results[profMatch.baseTool] = {\n        value: proficient,\n        ability: profMatch.ability,\n        bonuses: {\n          check: \"\"\n        }\n      };\n    }\n  });\n\n  return results;\n\n  // tools no longer support easily modifiable custom tools, see\n  // https://github.com/foundryvtt/dnd5e/issues/2372\n  // use toolIds\n  // if (this.source?.ddb) {\n  //   // Custom proficiencies!\n  //   this.source.ddb.character.customProficiencies.forEach((proficiency) => {\n  //     if (proficiency.type === 2) {\n  //       // type 2 is TOOL, 1 is SKILL, 3 is LANGUAGE\n  //       processToolProficiency(proficiency);\n  //     }\n  //   });\n\n  //   // load custom proficiencies in characterValues\n  //   const customProfs = this._getCustomProficiencies(\"Tools\");\n  //   for (const prof of customProfs) {\n  //     processToolProficiency({ name: prof });\n  //   }\n  // }\n\n};\n\nDDBCharacter.prototype.getWeaponProficiencies = function getWeaponProficiencies(proficiencyArray) {\n  const values = new Set();\n  const custom = [];\n\n  // lookup the characters's proficiencies in the DICT\n  const allProficiencies = DICTIONARY.character.proficiencies.filter((prof) => prof.type === \"Weapon\");\n\n  const processWeaponProficiency = (prof) => {\n    if (prof.name === \"Simple Weapons\") {\n      values.add(\"sim\");\n    } else if (prof.name === \"Martial Weapons\") {\n      values.add(\"mar\");\n    } else {\n      const systemWeaponIds = CONFIG.DND5E.weaponIds;\n      const dnd5eNameArray = prof.name.toLowerCase().split(\",\");\n      const dnd5eName = dnd5eNameArray.length === 2\n        ? `${dnd5eNameArray[1].trim()}${dnd5eNameArray[0].trim()}`\n        : prof.name.toLowerCase();\n      if (systemWeaponIds && dnd5eName in systemWeaponIds) {\n        values.add(dnd5eName);\n      } else if (allProficiencies.some((p) => p.name === prof.name) && !custom.includes(prof.name)) {\n        custom.push(prof.name);\n      }\n    }\n  };\n\n  proficiencyArray.forEach((prof) => {\n    processWeaponProficiency(prof);\n  });\n\n  if (this.source?.ddb) {\n    // load custom proficiencies in characterValues\n    const customProfs = this._getCustomProficiencies(\"Weapons\");\n    customProfs.forEach((prof) => {\n      processWeaponProficiency({ name: prof });\n    });\n  }\n\n  return {\n    value: Array.from(values),\n    custom: [...new Set(custom)].join(\"; \"),\n  };\n};\n\nDDBCharacter.prototype.getLanguagesFromModifiers = function getLanguagesFromModifiers(modifiers) {\n  const languages = new Set();\n  const custom = new Set();\n\n  modifiers\n    .filter((mod) => mod.type === \"language\")\n    .forEach((language) => {\n      const result = DICTIONARY.character.languages.find((lang) => lang.name === language.friendlySubtypeName);\n      if (result) {\n        languages.add(result.value);\n      } else if (language.friendlySubtypeName !== \"Choose a Language\") {\n        custom.add(language.friendlySubtypeName);\n      }\n    });\n\n  if (this.source?.ddb) {\n    this.source.ddb.character.customProficiencies.forEach((proficiency) => {\n      if (proficiency.type === 3) {\n        // type 3 is LANGUAGE, 1 is SKILL, 2 is TOOL\n        const result = DICTIONARY.character.languages.find((lang) => lang.name === proficiency.name);\n        if (result) {\n          languages.add(result.value);\n        } else {\n          custom.add(proficiency.name);\n        }\n      }\n    });\n\n    // load custom proficiencies in characterValues\n    const customProfs = this._getCustomProficiencies(\"Languages\");\n    for (const prof of customProfs) {\n      const result = DICTIONARY.character.languages.find((lang) => lang.name === prof);\n      if (result) {\n        languages.add(result.value);\n      } else {\n        custom.add(prof);\n      }\n    }\n  }\n\n  return {\n    value: Array.from(languages),\n    custom: Array.from(custom).map((entry) => utils.capitalize(entry)).join(\";\"),\n  };\n};\n\nDDBCharacter.prototype._generateLanguages = function _generateLanguages() {\n  const modifiers = DDBHelper.filterBaseModifiers(this.source.ddb, \"language\");\n  this.raw.character.system.traits.languages = this.getLanguagesFromModifiers(modifiers);\n};\n\nDDBCharacter.prototype._generateProficiencies = function _generateProficiencies() {\n  const customProficiencies = [\n    ...this._getCustomProficiencies(\"Armor\"),\n    ...this._getCustomProficiencies(\"Tools\"),\n    ...this._getCustomProficiencies(\"Weapons\"),\n    ...this._getCustomProficiencies(\"Languages\"),\n  ].map((proficiency) => {\n    return { name: proficiency };\n  });\n\n  this.proficiencies = this._getCoreProficiencies(false).concat(customProficiencies);\n  this.proficienciesIncludingEffects = this._getCoreProficiencies(true).concat(customProficiencies);\n\n  this.raw.character.flags.ddbimporter.dndbeyond.proficiencies = this.proficiencies;\n  this.raw.character.flags.ddbimporter.dndbeyond.proficienciesIncludingEffects = this.proficienciesIncludingEffects;\n\n  this.raw.character.system.traits.weaponProf = this.getWeaponProficiencies(this.proficiencies);\n  this.raw.character.system.traits.armorProf = this.getArmorProficiencies(this.proficiencies);\n  this.raw.character.system.tools = this.getToolProficiencies(this.proficiencies);\n  this._generateLanguages();\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport { generateBaseSkillEffect } from \"../../effects/effects.js\";\nimport logger from \"../../logger.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype.getSkillProficiency = function getSkillProficiency (skill, modifiers = null) {\n  if (!modifiers) {\n    modifiers = DDBHelper.getAllModifiers(this.source.ddb, { includeExcludedEffects: true });\n  }\n\n  const skillMatches = modifiers\n    .filter((modifier) => modifier.friendlySubtypeName === skill.label)\n    .map((mod) => mod.type);\n\n  const halfProficiency = modifiers.find(\n    (modifier) =>\n    // Jack of All trades/half-rounded down\n      (modifier.type === \"half-proficiency\" && modifier.subType === \"ability-checks\")\n        // e.g. champion for specific ability checks\n        || this._isHalfProficiencyRoundedUp(skill, modifiers)\n  ) !== undefined\n    ? 0.5\n    : 0;\n\n  const proficient = skillMatches.includes(\"expertise\") ? 2 : skillMatches.includes(\"proficiency\") ? 1 : halfProficiency;\n\n  return proficient;\n};\n\nDDBCharacter.prototype.getCustomSkillProficiency = function getCustomSkillProficiency(skill) {\n  // Overwrite the proficient value with any custom set over rides\n  if (this.source.ddb.character.characterValues) {\n    const customProficiency = this.source.ddb.character.characterValues.find(\n      (value) => value.typeId === 26 && value.valueId == skill.valueId && value.value\n    );\n    if (customProficiency) {\n      return DICTIONARY.character.customSkillProficiencies.find((prof) => prof.value === customProficiency.value)\n        .proficient;\n    }\n  }\n  return undefined;\n};\n\nDDBCharacter.prototype.getCustomSkillAbility = function getCustomSkillAbility(skill) {\n  // Overwrite the proficient value with any custom set over rides\n  let mod;\n  if (this.source.ddb.character.characterValues) {\n    const customAbility = this.source.ddb.character.characterValues.find(\n      (value) => value.typeId === 27 && value.valueId == skill.valueId\n    );\n    if (customAbility) {\n      const ability = DICTIONARY.character.abilities.find((ability) => ability.id == customAbility.value);\n      if (ability)\n        mod = ability.value;\n    }\n  }\n  return mod;\n};\n\nDDBCharacter.prototype.getCustomSkillBonus = function getCustomSkillBonus(skill) {\n  // Get any custom skill bonuses\n  if (this.source.ddb.character.characterValues) {\n    const customBonus = this.source.ddb.character.characterValues.filter(\n      (value) => (value.typeId == 24 || value.typeId == 25) && value.valueId == skill.valueId\n    ).reduce((total, bonus) => {\n      return total + bonus.value;\n    }, 0);\n\n    if (customBonus) {\n      return customBonus;\n    }\n  }\n  return 0;\n};\n\nDDBCharacter.prototype._setSpecialSkills = function _setSpecialSkills() {\n  this.source.ddb.character.classes.forEach((klass) => {\n    if (klass.subclassDefinition) {\n      const silverTongue = klass.subclassDefinition.classFeatures.some(\n        (feature) => feature.name === \"Silver Tongue\" && klass.level >= feature.requiredLevel\n      );\n      if (silverTongue) {\n        this.raw.character.system.skills[\"per\"].roll.min = 10;\n        this.raw.character.system.skills[\"dec\"].roll.min = 10;\n      }\n    }\n  });\n};\n\nDDBCharacter.prototype._generateCustomSkills = async function _generateCustomSkills() {\n  if (!game.modules.get(\"dnd5e-custom-skills\")?.active) return;\n  const version = game.modules.get(\"dnd5e-custom-skills\")?.version;\n  const newEnough = foundry.utils.isNewerVersion(version, \"1.1.2\");\n  if (!newEnough) return;\n\n  const customSkillData = this.source.ddb.character.customProficiencies\n    .filter((prof) => prof.type === 1 && Number.isInteger(prof.statId))\n    .map((prof) => {\n      const ability = DICTIONARY.character.abilities.find((ability) => ability.id == prof.statId);\n      return {\n        ability: ability.value,\n        label: prof.name,\n        proficiencyLevel: prof.proficiencyLevel,\n        miscBonus: prof.miscBonus,\n        magicBonus: prof.magicBonus,\n        override: prof.override,\n      };\n    });\n\n  const skillData = {};\n\n  for (let i = 0; i < customSkillData.length; i++) {\n    skillData[i] = customSkillData[i];\n  }\n\n  const customSkills = await window.dnd5eCustomSkills(\"add\", { skills: skillData });\n\n  for (const [key, value] of Object.entries(customSkills.skills.list)) {\n    if (value.applied || value.applied === 1) {\n      const customSkillMatch = customSkillData.find((customSkill) => customSkill.label === value.label);\n      if (customSkillMatch) {\n        logger.debug(`Adding custom skill ${value.label}`, { key, value, customSkillMatch });\n        const prof = DICTIONARY.character.customSkillProficiencies.find((proficiency) =>\n          proficiency.value === customSkillMatch.proficiencyLevel\n        ).proficient;\n        const miscBonus = customSkillMatch.miscBonus && customSkillMatch.miscBonus !== \"\" && customSkillMatch.miscBonus !== 0\n          ? `+ ${customSkillMatch.miscBonus}`\n          : \"\";\n        const magicBonus = customSkillMatch.magicBonus && customSkillMatch.magicBonus !== \"\" && customSkillMatch.magicBonus !== 0\n          ? ` + ${customSkillMatch.magicBonus}`\n          : \"\";\n        if (customSkillMatch) {\n          const checkBonus = (miscBonus + magicBonus).trim();\n          this.raw.character.system.skills[key] = {\n            ability: value.ability,\n            value: prof,\n            bonuses: {\n              \"check\": `${parseInt(checkBonus) === 0 ? \"\" : checkBonus}`,\n              \"passive\": \"\",\n            },\n            roll: {\n              min: null,\n              max: null,\n              mode: 0\n            },\n          };\n        }\n      }\n    }\n  }\n};\n\nDDBCharacter.prototype._generateSkills = async function _generateSkills() {\n  const addEffects = game.modules.get(\"dae\")?.active;\n\n  if (!addEffects) this.raw.character.flags['skill-customization-5e'] = {};\n  DICTIONARY.character.skills.forEach((skill) => {\n    const customProficient = this.getCustomSkillProficiency(skill);\n    // we use !== undefined because the return value could be 0, which is falsey\n    const proficient = customProficient !== undefined ? customProficient : this.getSkillProficiency(skill);\n\n    // Skill bonuses\n    const skillModifierBonus = DDBHelper\n      .filterBaseModifiers(this.source.ddb, \"bonus\", { subType: skill.subType })\n      .map((skl) => skl.value)\n      .reduce((a, b) => a + b, 0) ?? \"\";\n    const passiveBonus = DDBHelper\n      .filterBaseModifiers(this.source.ddb, \"bonus\", { subType: `passive-${skill.subType}` })\n      .map((skl) => skl.value)\n      .reduce((a, b) => a + b, 0) ?? \"\";\n    const customSkillBonus = this.getCustomSkillBonus(skill);\n    const skillBonus = skillModifierBonus + customSkillBonus;\n    const customAbility = this.getCustomSkillAbility(skill);\n    const ability = customAbility !== undefined ? customAbility : skill.ability;\n\n    // custom skill ability over ride effects\n    if (customAbility) {\n      const label = \"Skill Ability Changes\";\n      const change = {\n        key: `system.skills.${skill.name}.ability`,\n        mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE,\n        value: `${customAbility}`,\n        priority: \"20\"\n      };\n\n      const changeIndex = this.raw.character.effects.findIndex((effect) => effect.name === label);\n      if (changeIndex >= 0) {\n        this.raw.character.effects[changeIndex].changes.push(change);\n      } else {\n        let skillEffect = generateBaseSkillEffect(this.source.ddb.character.id, label);\n        skillEffect.changes.push(change);\n        this.raw.character.effects.push(skillEffect);\n      }\n    }\n\n    this.raw.character.system.skills[skill.name] = {\n      value: proficient,\n      ability: ability,\n      bonuses: {\n        check: `${parseInt(skillBonus) === 0 ? \"\" : skillBonus}`,\n        passive: `${parseInt(passiveBonus) === 0 ? \"\" : passiveBonus}`,\n      },\n      roll: {\n        min: null,\n        max: null,\n        mode: 0\n      },\n    };\n  });\n\n  await this._generateCustomSkills();\n  this._setSpecialSkills();\n\n};\n","import DICTIONARY from \"../../dictionary.js\";\n// import logger from \"../../logger.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype._generateAbilitiesOverrides = function _generateAbilitiesOverrides() {\n  DICTIONARY.character.abilities.forEach((ability) => {\n    this.abilities.overrides[ability.value]\n      = this.source.ddb.character.overrideStats.find((stat) => stat.id === ability.id).value || 0;\n  });\n  this.raw.character.flags.ddbimporter.dndbeyond.abilityOverrides = this.abilities.overrides;\n};\n\nDDBCharacter.prototype._getCustomSaveProficiency = function _getCustomSaveProficiency(ability) {\n  // Overwrite the proficient value with any custom set over rides\n  if (this.source.ddb.character.characterValues) {\n    const customProficiency = this.source.ddb.character.characterValues.find(\n      (value) => value.typeId === 41 && value.valueId == ability.id && value.value\n    );\n    if (customProficiency) {\n      if (customProficiency.value === 1) {\n        return 0;\n      }\n      // Foundry does not support half proficiencies or expertise here\n      return 1;\n    }\n  }\n  return undefined;\n};\n\nDDBCharacter.prototype._getCustomSaveBonus = function _getCustomSaveBonus(ability) {\n  // Get any custom skill bonuses\n  if (this.source.ddb.character.characterValues) {\n    const customBonus = this.source.ddb.character.characterValues\n      .filter((value) => (value.typeId == 40 || value.typeId == 39) && value.valueId == ability.id)\n      .reduce((total, bonus) => {\n        return total + bonus.value;\n      }, 0);\n\n    if (customBonus) {\n      return customBonus;\n    }\n  }\n  return 0;\n};\n\n/**\n * Retrieves character abilities, including proficiency on saving throws\n * @param {obj} includeExcludedEffects Include effects from dae added items?\n */\nDDBCharacter.prototype._getAbilities = function _getAbilities(includeExcludedEffects = false) {\n  let result = {};\n  DICTIONARY.character.abilities.forEach((ability) => {\n    result[ability.value] = {\n      value: 0,\n      min: 3,\n      max: 20,\n      proficient: 0,\n    };\n\n    const stat = this.source.ddb.character.stats.find((stat) => stat.id === ability.id).value || 0;\n    const abilityScoreMaxBonus = DDBHelper\n      .filterBaseModifiers(this.source.ddb, \"bonus\", { subType: \"ability-score-maximum\", restriction: [\"\", null], includeExcludedEffects })\n      .filter((mod) => mod.statId === ability.id)\n      .reduce((prev, cur) => prev + cur.value, 0);\n    const bonusStatRestrictions = [\n      null,\n      \"\",\n      \"+2 to score maximum\",\n      \"+4 to score maximum\",\n      \"+2 to maximum score\",\n      \"+4 to maximum score\",\n      \"Can't be an Ability Score you already increased with this trait.\",\n    ];\n    const bonus = DDBHelper\n      .filterBaseModifiers(this.source.ddb, \"bonus\", { subType: `${ability.long}-score`, restriction: bonusStatRestrictions, includeExcludedEffects })\n      .filter((mod) => mod.entityId === ability.id)\n      .reduce((prev, cur) => prev + cur.value, 0);\n    const setAbilities = DDBHelper\n      .filterBaseModifiers(this.source.ddb, \"set\", { subType: `${ability.long}-score`, restriction: [null, \"\", \"if not already higher\"], includeExcludedEffects })\n      .map((mod) => mod.value);\n    const modRestrictions = [\"Your maximum is now \", \"Maximum of \"];\n    const cappedBonusExp = new RegExp(`(?:${modRestrictions.join(\"|\")})(\\\\d*)`);\n    const cappedBonus = DDBHelper\n      .filterBaseModifiers(this.source.ddb, \"bonus\", { subType: `${ability.long}-score`, restriction: false, includeExcludedEffects })\n      .filter(\n        (mod) =>\n          mod.entityId === ability.id\n          && mod.restriction\n          && modRestrictions.some((m) => mod.restriction.startsWith(m))\n      )\n      .reduce(\n        (prev, cur) => {\n          const restricted = cur.restriction ? cappedBonusExp.exec(cur.restriction) : undefined;\n          const max = restricted ? restricted[1] : 20;\n          return {\n            value: prev.value + cur.value,\n            cap: Math.max(prev.cap, max),\n          };\n        },\n        { value: 0, cap: 20 + abilityScoreMaxBonus }\n      );\n    // applied regardless of cap\n    const bonusStat = this.source.ddb.character.bonusStats.find((stat) => stat.id === ability.id).value || 0;\n    // over rides all other calculations if present\n    const overrideStat = this.source.ddb.character.overrideStats.find((stat) => stat.id === ability.id).value || 0;\n\n    const setAbility = Math.max(...[0, ...setAbilities]);\n    const calculatedStat = stat + bonus + cappedBonus.value;\n    // bonus gets added regardlesss of normal caps\n    const maxAdjustedStat = Math.min(cappedBonus.cap, calculatedStat) + bonusStat;\n    // some items will set the ability score if lower\n    const setAbilityState = maxAdjustedStat > setAbility ? maxAdjustedStat : setAbility;\n    // Is there a hard over ride?\n    const overRiddenStat = overrideStat === 0 ? setAbilityState : overrideStat;\n    const customProficiency = this._getCustomSaveProficiency(ability);\n\n    const proficient = customProficiency\n      ? customProficiency\n      : DDBHelper.filterBaseModifiers(this.source.ddb, \"proficiency\", { subType: `${ability.long}-saving-throws`, includeExcludedEffects }).length > 0\n        ? 1\n        : 0;\n\n    // update value, mod and proficiency\n    result[ability.value].value = overRiddenStat;\n    result[ability.value].mod = utils.calculateModifier(result[ability.value].value);\n    result[ability.value].proficient = proficient;\n    result[ability.value].max = Math.max(cappedBonus.cap, overRiddenStat);\n  });\n\n  return result;\n};\n\nDDBCharacter.prototype._getAbilitiesBonuses = function (includeExcludedEffects = false) {\n\n  let result = {};\n  DICTIONARY.character.abilities.forEach((ability) => {\n    result[ability.value] = {\n      bonuses: {\n        check: \"\",\n        save: \"\",\n        checkMinimum: null,\n        saveMinimum: null,\n      },\n    };\n\n    const checkBonusModifiers = DDBHelper\n      .filterBaseModifiers(this.source.ddb, \"bonus\", { subType: `${ability.long}-ability-checks`, includeExcludedEffects });\n    const checkBonus = DDBHelper.getModifierSum(checkBonusModifiers, this.raw.character);\n    if (checkBonus && checkBonus !== \"\") {\n      result[ability.value].bonuses.check = `+ ${checkBonus}`;\n    }\n\n    const saveBonusModifiers = DDBHelper\n      .filterBaseModifiers(this.source.ddb, \"bonus\", { subType: `${ability.long}-saving-throws`, includeExcludedEffects });\n    const modifiersSaveBonus = DDBHelper.getModifierSum(saveBonusModifiers, this.raw.character);\n    const customSaveBonus = this._getCustomSaveBonus(ability);\n\n    if (modifiersSaveBonus && modifiersSaveBonus !== \"\" && parseInt(modifiersSaveBonus)) {\n      if (customSaveBonus) {\n        const totalSave = parseInt(customSaveBonus) + parseInt(modifiersSaveBonus);\n        // console.warn(\"totalSave\", totalSave);\n        result[ability.value].bonuses.save = `+ ${totalSave}`;\n      } else {\n        result[ability.value].bonuses.save = `+ ${modifiersSaveBonus}`;\n      }\n    } else if (modifiersSaveBonus && modifiersSaveBonus !== \"\") {\n      if (customSaveBonus) {\n        result[ability.value].bonuses.save = `+ ${modifiersSaveBonus} + ${customSaveBonus}`;\n      } else {\n        result[ability.value].bonuses.save = `+ ${modifiersSaveBonus}`;\n      }\n    } else if (customSaveBonus) {\n      result[ability.value].bonuses.save = `+ ${customSaveBonus}`;\n    }\n  });\n\n  return result;\n};\n\n/**\n * Retrieves character abilities, including proficiency on saving throws\n * @param {obj} includeExcludedEffects Include effects from dae added items?\n */\nDDBCharacter.prototype._generateBaseAbilities = function (includeExcludedEffects = false) {\n  this.raw.character.system.abilities = this._getAbilities(includeExcludedEffects);\n};\n\n\n/**\n * Generates character abilities, including proficiency on saving throws\n */\nDDBCharacter.prototype._generateAbilities = function _generateAbilities() {\n  // go through every ability\n\n  // we need to populate some base abilities to work out bonuses\n  this._generateBaseAbilities(false);\n\n  this.abilities.core = foundry.utils.mergeObject(this._getAbilities(false), this._getAbilitiesBonuses(false));\n  this.abilities.withEffects = foundry.utils.mergeObject(this._getAbilities(true), this._getAbilitiesBonuses(true));\n  this.raw.character.system.abilities = this.abilities.core;\n  this.raw.character.flags.ddbimporter.dndbeyond.effectAbilities = this.abilities.withEffects;\n\n  this._generateAbilitiesOverrides();\n\n};\n","import DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype._generateHitPoints = function _generateHitPoints() {\n  const constitutionHP = this.raw.character.flags.ddbimporter.dndbeyond.effectAbilities.con.mod * this.raw.character.flags.ddbimporter.dndbeyond.totalLevels;\n  const baseHitPoints = this.source.ddb.character.baseHitPoints || 0;\n  const tempMaxHitPoints = this.source.ddb.character.bonusHitPoints || 0;\n  const overrideHitPoints = this.source.ddb.character.overrideHitPoints || 0;\n  const removedHitPoints = this.source.ddb.character.removedHitPoints || 0;\n  const temporaryHitPoints = this.source.ddb.character.temporaryHitPoints || 0;\n\n  // get allvalues hit points features\n  const bonusHitPointFeatures = DDBHelper.filterBaseModifiers(this.source.ddb, \"bonus\", { subType: \"hit-points-per-level\" });\n  const bonusHitPointFeaturesWithEffects = DDBHelper.filterBaseModifiers(this.source.ddb, \"bonus\", { subType: \"hit-points-per-level\", includeExcludedEffects: true });\n\n  // get their\n  const bonusHitPointValues = bonusHitPointFeatures.map((bonus) => {\n    const cls = DDBHelper.findClassByFeatureId(this.source.ddb, bonus.componentId);\n    if (cls) {\n      return cls.level * bonus.value;\n    } else {\n      return this.raw.character.flags.ddbimporter.dndbeyond.totalLevels * bonus.value;\n    }\n  });\n\n  const bonusHitPointValuesWithEffects = bonusHitPointFeaturesWithEffects.map((bonus) => {\n    const cls = DDBHelper.findClassByFeatureId(this.source.ddb, bonus.componentId);\n    if (cls) {\n      return cls.level * bonus.value;\n    } else {\n      return this.raw.character.flags.ddbimporter.dndbeyond.totalLevels * bonus.value;\n    }\n  });\n\n  // sum up the bonus HP per class level\n  const totalBonusHitPoints = bonusHitPointValues.reduce((prev, cur) => prev + cur, 0);\n  const totalBonusHPWithEffects = bonusHitPointValuesWithEffects.reduce((prev, cur) => prev + cur, 0);\n\n  const bonusPerLevelValue = bonusHitPointFeatures.map((bonus) => {\n    const cls = DDBHelper.findClassByFeatureId(this.source.ddb, bonus.componentId);\n    // console.warn(\"cls hp\", { bonus, cls});\n    if (!cls) {\n      return bonus.value;\n    } else {\n      return 0;\n    }\n  }).reduce((prev, cur) => prev + cur, 0);\n\n  // const bonusHPEffectDiff = totalBonusHPWithEffects - totalBonusHitPoints - bonusPerLevelValue;\n  const overallBonus = totalBonusHitPoints - (bonusPerLevelValue * this.raw.character.flags.ddbimporter.dndbeyond.totalLevels);\n\n  const maxHitPoints = overrideHitPoints === 0\n    ? constitutionHP + baseHitPoints + totalBonusHPWithEffects\n    : overrideHitPoints;\n\n  const rolledHP = foundry.utils.getProperty(this.source, \"ddb.character.preferences.hitPointType\") === 2;\n\n  // console.warn(\"hp data\", {\n  //   bonusHitPointValues,\n  //   bonusHitPointValuesWithEffects,\n  //   totalBonusHPWithEffects,\n  //   totalBonusHitPoints,\n  //   bonusPerLevelValue,\n  //   overallBonus,\n  //   maxHitPoints,\n  //   rolledHP,\n  // });\n\n  this.raw.character.system.attributes.hp = {\n    value: maxHitPoints + tempMaxHitPoints - removedHitPoints,\n    max: overrideHitPoints !== 0\n      ? overrideHitPoints\n      : rolledHP && game.settings.get(\"ddb-importer\", \"character-update-policy-use-hp-max-for-rolled-hp\")\n        ? maxHitPoints\n        : null,\n    temp: temporaryHitPoints ?? 0,\n    tempmax: tempMaxHitPoints ?? 0,\n    bonuses: {\n      level: bonusPerLevelValue !== 0 ? bonusPerLevelValue : \"\",\n      overall: overallBonus !== 0 ? overallBonus : \"\",\n    },\n  };\n\n  this.raw.character.flags.ddbimporter.rolledHP = rolledHP;\n  this.raw.character.flags.ddbimporter.baseHitPoints = baseHitPoints;\n\n  // \"hp\": {\n  //   \"value\": 23,\n  //   \"max\": null,\n  //   \"temp\": null,\n  //   \"tempmax\": null,\n  //   \"bonuses\": {\n  //     \"level\": \"1\",\n  //     \"overall\": \"2\"\n  //   }\n  // },\n};\n\nDDBCharacter.prototype._generateHitDice = function _generateHitDice() {\n  const used = this.source.ddb.character.classes.reduce((prev, cls) => prev + cls.hitDiceUsed, 0);\n  const total = this.source.ddb.character.classes.reduce((prev, cls) => prev + cls.level, 0);\n  this.raw.character.system.attributes.hd = total - used;\n};\n","import DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype._generateInitiative = function _generateInitiative() {\n  const initMods = DDBHelper.filterBaseModifiers(this.source.ddb, \"bonus\", { subType: \"initiative\" });\n  // const initiativeBonus = DDBHelper.getModifierSum(initMods, this.raw.character);\n\n  let initiativeBonus = DDBHelper.getValueFromModifiers(initMods, \"initiative\", \"initiative\", \"bonus\");\n\n  // if (initiativeBonus && this.raw.character.flags.dnd5e.initiativeAlert) {\n  //   if (initiativeBonus.includes(\"+ 5\")) {\n  //     initiativeBonus = initiativeBonus.replace(\"+ 5\", \"\");\n  //   } else if ([5].includes(Number.parseInt(initiativeBonus))) {\n  //     initiativeBonus = \"\";\n  //   }\n  // }\n  if (Number.parseInt(initiativeBonus) === 0) {\n    initiativeBonus = \"\";\n  }\n\n  // If we have the alert Feat set, lets sub 5 so it's correct\n  this.raw.character.system.attributes.init = {\n    ability: \"dex\",\n    bonus: initiativeBonus ?? \"\",\n  };\n\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport { getGenericConditionAffectData } from \"../../effects/effects.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport logger from \"../../logger.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype._generateDeathSaves = function _generateDeathSaves () {\n  this.raw.character.system.attributes.death = {\n    success: this.source.ddb.character.deathSaves.successCount || 0,\n    failure: this.source.ddb.character.deathSaves.failCount || 0,\n  };\n};\n\nDDBCharacter.prototype._generateExhaustion = function _generateExhaustion() {\n  const condition = this.source.ddb.character.conditions.find((condition) => parseInt(condition.id) === 4);\n  this.raw.character.system.attributes.exhaustion = condition\n    ? parseInt(condition.level)\n    : 0;\n};\n\nDDBCharacter.prototype.getCharacterGenericConditionAffectData = function getCharacterGenericConditionAffectData(condition, typeId) {\n\n  const modifiers = DDBHelper.filterBaseModifiers(this.source.ddb, condition);\n  const standardResults = getGenericConditionAffectData(modifiers, condition, typeId);\n\n  const customResults = this.source.ddb.character.customDefenseAdjustments\n    .filter((adjustment) => adjustment.type === (typeId === 4 ? 1 : 2))\n    .map((adjustment) => {\n      const entry = DICTIONARY.character.damageAdjustments.find((type) =>\n        type.id === adjustment.adjustmentId\n        && type.type === typeId\n      );\n      if (!entry) return undefined;\n      const valueData = foundry.utils.hasProperty(entry, \"foundryValues\")\n        ? foundry.utils.getProperty(entry, \"foundryValues\")\n        : foundry.utils.hasProperty(entry, \"foundryValue\")\n          ? { value: entry.foundryValue }\n          : undefined;\n      return valueData;\n    })\n    .filter((adjustment) => adjustment !== undefined);\n\n  const results = customResults.concat(standardResults).map((result) => {\n    if (game.modules.get(\"midi-qol\")?.active && result.midiValues) {\n      return {\n        value: result.value.concat(result.midiValues),\n        bypass: result.bypass,\n      };\n    } else {\n      return result;\n    }\n  });\n\n  logger.debug(`Condition generation: ${condition}, typeId: ${typeId}`, {\n    modifiers,\n    standardResults,\n    customResults,\n    results,\n    customDefenseAdjustments: this.source.ddb.character.customDefenseAdjustments,\n  });\n\n  return {\n    custom: \"\",\n    value: [...new Set(results.map((result) => result.value).flat())],\n    bypasses: [...new Set(results.map((result) => result.bypass).flat())],\n  };\n};\n\nDDBCharacter.prototype._generateConditions = function _generateConditions() {\n  this.raw.character.system.traits.di = this.getCharacterGenericConditionAffectData(\"immunity\", 2);\n  this.raw.character.system.traits.dr = this.getCharacterGenericConditionAffectData(\"resistance\", 1);\n  this.raw.character.system.traits.dv = this.getCharacterGenericConditionAffectData(\"vulnerability\", 3);\n  this.raw.character.system.traits.ci = this.getCharacterGenericConditionAffectData(\"immunity\", 4);\n};\n","import DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype._generateCurrency = function _generateCurrency() {\n  this.raw.character.system.currency = {\n    pp: this.source.ddb.character.currencies.pp,\n    gp: this.source.ddb.character.currencies.gp,\n    ep: this.source.ddb.character.currencies.ep,\n    sp: this.source.ddb.character.currencies.sp,\n    cp: this.source.ddb.character.currencies.cp,\n  };\n\n  this._currency = foundry.utils.deepClone(this.raw.character.system.currency);\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype.getSenses = function getSenses({ includeEffects = false } = {}) {\n  let senses = {\n    darkvision: 0,\n    blindsight: 0,\n    tremorsense: 0,\n    truesight: 0,\n    units: \"ft\",\n    special: \"\"\n  };\n\n  // custom senses\n  if (this.source.ddb.character.customSenses) {\n    this.source.ddb.character.customSenses\n      .filter((sense) => sense.distance)\n      .forEach((sense) => {\n        const s = DICTIONARY.character.senses.find((s) => s.id === sense.senseId);\n        if (s && sense.distance && Number.isInteger(sense.distance)) {\n          senses[s.name.toLowerCase()] = parseInt(sense.distance);\n        } else {\n          senses.special += `${sense.distance}; `;\n        }\n      });\n  }\n\n  // Base senses\n  for (const senseName in senses) {\n    const basicOptions = { subType: senseName, includeExcludedEffects: includeEffects };\n    DDBHelper.filterBaseModifiers(this.source.ddb, \"set-base\", basicOptions).forEach((sense) => {\n      if (Number.isInteger(sense.value) && sense.value > senses[senseName]) {\n        senses[senseName] = parseInt(sense.value);\n      }\n    });\n  }\n\n  // Devils Sight gives bright light to 120 foot instead of normal darkvision\n  const devilsSightFilters = {\n    subType: \"darkvision\",\n    restriction: [\n      \"You can see normally in darkness, both magical and nonmagical\",\n    ],\n    includeExcludedEffects: includeEffects,\n  };\n  DDBHelper\n    .filterBaseModifiers(this.source.ddb, \"set-base\", devilsSightFilters)\n    .forEach((sense) => {\n      if (Number.isInteger(sense.value) && sense.value > senses['darkvision']) {\n        senses['darkvision'] = parseInt(sense.value);\n        senses.special += \"You can see normally in darkness, both magical and nonmagical.\";\n      }\n    });\n\n  // Magical bonuses and additional, e.g. Gloom Stalker\n  const magicalBonusFilters = {\n    subType: \"darkvision\",\n    restriction: [\"\", null, \"plus 60 feet if wearer already has Darkvision\"],\n    includeExcludedEffects: includeEffects,\n  };\n  DDBHelper\n    .filterBaseModifiers(this.source.ddb, \"sense\", magicalBonusFilters)\n    .forEach((mod) => {\n      const hasSense = mod.subType in senses;\n      if (hasSense && mod.value && Number.isInteger(mod.value)) {\n        senses[mod.subType] += parseInt(mod.value);\n      } else {\n        senses.special += ` ${mod.value},`;\n      }\n    });\n\n  return senses;\n\n};\n\nDDBCharacter.prototype._generateSenses = function _generateSenses() {\n  this.raw.character.system.attributes.senses = this.getSenses();\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype._generateSpeed = function _generateSpeed() {\n\n  // For all processing, we take into account the regular movement types of this character\n  let movementTypes = {};\n  let setToWalking = {};\n  for (const type in this.source.ddb.character.race.weightSpeeds.normal) {\n    // if (data.character.race.weightSpeeds.normal[type] !== 0) {\n    movementTypes[type] = this.source.ddb.character.race.weightSpeeds.normal[type];\n    setToWalking[type] = false;\n    // }\n  }\n\n\n  // get bonus speed mods\n  let restriction = [\"\", null, \"unless your speed is already higher\"];\n  // Check for equipped Heavy Armor\n  const wearingHeavy = this.source.ddb.character.inventory.some((item) => item.equipped && item.definition.type === \"Heavy Armor\");\n  // Accounts for Barbarian Class Feature - Fast Movement\n  if (!wearingHeavy) restriction.push(\"while you aren’t wearing heavy armor\");\n\n  // build base speeds\n  for (let type in movementTypes) {\n    // is there a 'inntate-speed-[type]ing' race/class modifier?\n    const innateType = DICTIONARY.character.speeds.find((s) => s.type === type).innate;\n    let innateSpeeds = this.source.ddb.character.modifiers.race.filter(\n      (modifier) => modifier.type === \"set\" && modifier.subType === `innate-speed-${innateType}`\n    );\n    let base = movementTypes[type];\n\n    innateSpeeds.forEach((speed) => {\n      // take the highest value\n      if (speed.value === null && speed.modifierSubTypeId == 182 && speed.modifierTypeId == 9) {\n        setToWalking[type] = true;\n      } else if (speed.value > base) {\n        base = speed.value;\n      }\n    });\n\n    // overwrite the (perhaps) changed value\n    movementTypes[type] = base;\n  }\n\n  const bonusSpeed = DDBHelper\n    .filterBaseModifiers(this.source.ddb, \"bonus\", { subType: \"speed\", restriction })\n    .reduce((speed, feat) => speed + feat.value, 0);\n\n  // speed bonuses\n  for (let type in movementTypes) {\n    let innateBonus = DDBHelper\n      .filterBaseModifiers(this.source.ddb, \"bonus\", { subType: `speed-${type}ing`, restriction })\n      .reduce((speed, feat) => speed + feat.value, 0);\n\n    // overwrite the (perhaps) changed value\n    if (movementTypes[type] !== 0) movementTypes[type] += bonusSpeed + innateBonus;\n  }\n\n  // unarmored movement for barbarians and monks\n  if (this.isUnArmored()) {\n    DDBHelper.getChosenClassModifiers(this.source.ddb)\n      .filter((modifier) => modifier.type === \"bonus\" && modifier.subType === \"unarmored-movement\")\n      .forEach((bonusSpeed) => {\n        for (let type in movementTypes) {\n          if (movementTypes[type] !== 0) movementTypes[type] += bonusSpeed.value;\n        }\n      });\n  }\n\n  // new ranger deft explorer sets speeds, leaves value null, use walking\n  for (let type in movementTypes) {\n    const innateType = DICTIONARY.character.speeds.find((s) => s.type === type).innate;\n    // is there a 'inntate-speed-[type]ing' race/class modifier?\n    let innateSpeeds = DDBHelper\n      .filterBaseModifiers(this.source.ddb, \"set\", { subType: `innate-speed-${innateType}`, restriction });\n    let base = movementTypes[type];\n\n    innateSpeeds.forEach((speed) => {\n      // take the highest value\n      if (speed.value > base) {\n        base = speed.value;\n      } else if (!speed.value && movementTypes['walk']) {\n        base = movementTypes['walk'];\n      }\n    });\n\n    // overwrite the (perhaps) changed value\n    movementTypes[type] = base;\n  }\n\n\n  // is there a custom seed over-ride?\n  if (this.source.ddb.character.customSpeeds) {\n    this.source.ddb.character.customSpeeds.forEach((speed) => {\n      const type = DICTIONARY.character.speeds.find((s) => s.id === speed.movementId).type;\n      if (speed.distance) {\n        movementTypes[type] = speed.distance;\n      }\n    });\n  }\n\n  for (let type in setToWalking) {\n    if (setToWalking[type] && movementTypes[\"walk\"] > movementTypes[type]) {\n      movementTypes[type] = movementTypes[\"walk\"];\n    }\n  }\n\n  this.raw.character.system.attributes.movement = {\n    burrow: movementTypes['burrow'] || 0,\n    climb: movementTypes['climb'] || 0,\n    fly: movementTypes['fly'] || 0,\n    swim: movementTypes['swim'] || 0,\n    walk: movementTypes['walk'] || 0,\n    units: \"ft\",\n    hover: false,\n  };\n\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype._generateSize = function _generateSize() {\n  const sizeMods = DDBHelper.filterModifiersOld(this.source.ddb.character.modifiers.race, \"size\");\n  const size = (sizeMods.length > 0)\n    ? DICTIONARY.character.actorSizes.find((size) => sizeMods.some((mod) => mod.subType === size.name.toLowerCase()))\n    : DICTIONARY.character.actorSizes.find((size) =>\n      size.name === this.source.ddb.character.race.size\n      || size.id === this.source.ddb.character.race.sizeId);\n\n  this.raw.character.system.traits.size = size ? size.value : \"med\";\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\n\n// convert spellcasting ability id to string used by foundry\nfunction convertSpellCastingAbilityId(spellCastingAbilityId) {\n  return DICTIONARY.character.abilities.find((ability) => ability.id === spellCastingAbilityId)?.value;\n};\n\nfunction getSpellCastingAbility(klass) {\n  const subClassAbilityId = foundry.utils.getProperty(klass, \"subclassDefinition.spellCastingAbilityId\");\n  const subClassAbility = subClassAbilityId ? convertSpellCastingAbilityId(subClassAbilityId) : undefined;\n  if (subClassAbility) return subClassAbility;\n\n  const classAbilityId = foundry.utils.getProperty(klass, \"definition.spellCastingAbilityId\");\n  const classAbility = classAbilityId ? convertSpellCastingAbilityId(classAbilityId) : undefined;\n\n  if (classAbility) return classAbility;\n\n  return undefined;\n}\n\nDDBCharacter.prototype._generateSpellCasting = function _generateSpellCasting() {\n  let result = [];\n  this.source.ddb.character.classSpells.forEach((playerClass) => {\n    let classInfo = this.source.ddb.character.classes.find((cls) => cls.id === playerClass.characterClassId);\n    const spellCastingAbility = getSpellCastingAbility(classInfo);\n    if (spellCastingAbility !== undefined) {\n      const characterAbilities = this.raw.character.flags.ddbimporter.dndbeyond.effectAbilities;\n      let abilityModifier = utils.calculateModifier(characterAbilities[spellCastingAbility].value);\n      result.push({ label: spellCastingAbility, value: abilityModifier });\n    }\n  });\n  // we need to decide on one spellcasting ability, so we take the one with the highest modifier\n  if (result.length === 0) {\n    this.raw.character.system.attributes.spellcasting = \"\";\n  } else {\n    this.raw.character.system.attributes.spellcasting = result\n      .sort((a, b) => {\n        if (a.value > b.value) return -1;\n        if (a.value < b.value) return 1;\n        return 0;\n      })\n      .map((entry) => entry.label)[0];\n  }\n};\n\nDDBCharacter.prototype._generateSpellDC = function _generateSpellDC() {\n  if (this.raw.character.system.attributes.spellcasting === \"\") {\n    this.raw.character.system.attributes.spelldc = 10;\n  } else {\n    const characterAbilities = this.raw.character.flags.ddbimporter.dndbeyond.effectAbilities;\n    const dc = 8 + characterAbilities[this.raw.character.system.attributes.spellcasting].mod + this.raw.character.system.attributes.prof;\n    this.raw.character.system.attributes.spelldc = dc;\n  }\n};\n\nDDBCharacter.prototype.getCasterInfo = function getCasterInfo() {\n  return this.source.ddb.character.classes\n    .filter((cls) => {\n      return cls.definition.canCastSpells || (cls.subclassDefinition && cls.subclassDefinition.canCastSpells);\n    })\n    .map((cls) => {\n      // the class total level\n      let casterLevel = cls.level;\n      // class name\n      const name = cls.definition.name;\n\n      // get the casting level if the character is a multiclassed spellcaster\n      if (cls.definition.spellRules && cls.definition.spellRules.multiClassSpellSlotDivisor) {\n        casterLevel = Math.floor(casterLevel / cls.definition.spellRules.multiClassSpellSlotDivisor);\n      } else {\n        casterLevel = 0;\n      }\n      // Blood hunters are weird\n      if ([\"Blood Hunter\"].includes(name)) {\n        casterLevel = cls.level;\n      }\n\n      const cantrips\n        = cls.definition.spellRules\n        && cls.definition.spellRules.levelCantripsKnownMaxes\n        && Array.isArray(cls.definition.spellRules.levelCantripsKnownMaxes)\n          ? cls.definition.spellRules.levelCantripsKnownMaxes[casterLevel + 1]\n          : 0;\n\n      if ([\"Warlock\", \"Blood Hunter\"].includes(name)) {\n        // pact casting doesn't count towards multiclass spells casting\n        // we still add an entry to get cantrip info\n        const levelSpellSlots = cls.definition.spellRules.levelSpellSlots[casterLevel];\n        const maxLevel = levelSpellSlots.indexOf(Math.max(...levelSpellSlots)) + 1;\n        const maxSlots = Math.max(...levelSpellSlots);\n        const currentSlots = this.source.ddb.character.pactMagic.find((pact) => pact.level === maxLevel).used;\n        if ([\"Blood Hunter\"].includes(name)) {\n          this.spellSlots.pact = { value: maxSlots - currentSlots, max: maxSlots, override: maxSlots };\n        } else {\n          this.spellSlots.pact = { value: maxSlots - currentSlots, max: maxSlots };\n        }\n        return {\n          name,\n          casterLevel: 0,\n          slots: cls.definition.spellRules.levelSpellSlots[0],\n          cantrips,\n        };\n      } else {\n        return {\n          name,\n          casterLevel,\n          slots: cls.definition.spellRules.levelSpellSlots[cls.level],\n          cantrips,\n        };\n      }\n    });\n};\n\nDDBCharacter.prototype._generateSpellSlots = function _generateSpellSlots() {\n  // get the caster information from all classes and subclasses\n  const casterInfo = this.getCasterInfo();\n\n  let result = null;\n  if (casterInfo.length !== 1) {\n    const multiClassSpellSlots = [\n      [0, 0, 0, 0, 0, 0, 0, 0, 0], // 0\n      [2, 0, 0, 0, 0, 0, 0, 0, 0], // 1\n      [3, 0, 0, 0, 0, 0, 0, 0, 0], // 2\n      [4, 2, 0, 0, 0, 0, 0, 0, 0], // 3\n      [4, 3, 0, 0, 0, 0, 0, 0, 0], // 4\n      [4, 3, 2, 0, 0, 0, 0, 0, 0], // 5\n      [4, 3, 3, 0, 0, 0, 0, 0, 0], // 6\n      [4, 3, 3, 1, 0, 0, 0, 0, 0], // 7\n      [4, 3, 3, 2, 0, 0, 0, 0, 0], // 8\n      [4, 3, 3, 3, 1, 0, 0, 0, 0], // 9\n      [4, 3, 3, 3, 2, 0, 0, 0, 0], // 10\n      [4, 3, 3, 3, 2, 1, 0, 0, 0], // 11\n      [4, 3, 3, 3, 2, 1, 0, 0, 0], // 12\n      [4, 3, 3, 3, 2, 1, 1, 0, 0], // 13\n      [4, 3, 3, 3, 2, 1, 1, 0, 0], // 14\n      [4, 3, 3, 3, 2, 1, 1, 1, 0], // 15\n      [4, 3, 3, 3, 2, 1, 1, 1, 0], // 16\n      [4, 3, 3, 3, 2, 1, 1, 1, 1], // 17\n      [4, 3, 3, 3, 3, 1, 1, 1, 1], // 18\n      [4, 3, 3, 3, 3, 2, 1, 1, 1], // 19\n      [4, 3, 3, 3, 3, 2, 2, 1, 1], // 20\n    ];\n    const casterLevelTotal = casterInfo.reduce((prev, cur) => prev + cur.casterLevel, 0);\n    const cantripsTotal = casterInfo.reduce((prev, cur) => prev + cur.cantrips, 0);\n    result = [cantripsTotal, ...multiClassSpellSlots[casterLevelTotal]];\n  } else {\n    result = [casterInfo[0].cantrips, ...casterInfo[0].slots];\n  }\n\n  for (let i = 1; i < result.length; i++) {\n    const currentSlots = this.source.ddb.character.spellSlots.filter((slot) => slot.level === i).map((slot) => slot.used) || 0;\n    this.spellSlots[\"spell\" + i] = {\n      value: (result[i] - currentSlots) ?? 0,\n      max: result[i] ?? 0,\n    };\n  }\n  this.raw.character.system.spells = this.spellSlots;\n};\n\nDDBCharacter.prototype._generateMaxPreparedSpells = function _generateMaxPreparedSpells() {\n  let max = 0;\n\n  this.source.ddb.character.classes\n    .filter((klass) => {\n      return (klass.definition.canCastSpells || (klass.subclassDefinition?.canCastSpells));\n    })\n    .forEach((klass) => {\n      const spellCastingAbility = getSpellCastingAbility(klass);\n      if (spellCastingAbility !== undefined) {\n        const characterAbilities = this.raw.character.flags.ddbimporter.dndbeyond.effectAbilities;\n        const abilityModifier = utils.calculateModifier(characterAbilities[spellCastingAbility].value);\n        if (klass.definition.spellPrepareType === 1 || klass.subclassDefinition?.spellPrepareType === 1) {\n          max += abilityModifier + klass.level;\n        } else if (klass.definition.spellPrepareType === 2 || klass.subclassDefinition?.spellPrepareType === 2) {\n          max += abilityModifier + Math.floor(klass.level / 2);\n        }\n\n      }\n    });\n\n  this.raw.character.system.details.maxPreparedSpells = max;\n  foundry.utils.setProperty(this.raw.character, \"flags.tidy5e-sheet.maxPreparedSpells\", max);\n  foundry.utils.setProperty(this.raw.character, \"flags.tidy5e-sheet-kgar.maxPreparedSpells\", max);\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\nimport DDBRace from \"../race/DDBRace.js\";\n\nDDBCharacter.prototype._generateRace = async function _generateRace() {\n  const traits = this.source.ddb.character.race.racialTraits.map((r) => r.definition);\n  const compendiumRacialTraits = await DDBRace.getRacialTraitsLookup(traits, false);\n  this._ddbRace = new DDBRace(this.source.ddb, this.source.ddb.character.race, compendiumRacialTraits);\n  await this._ddbRace.build();\n  this.raw.race = (this.updateItemIds([this._ddbRace.data]))[0];\n  delete this.raw.race.sort;\n\n  // update character race value with race type\n  foundry.utils.setProperty(this.raw.character, \"system.details.type.value\", this.raw.race.type);\n\n  // console.warn(\"Race Advancement\", JSON.parse(JSON.stringify(this.raw.race.system.advancement)));\n  this.raw.race.system.advancement.forEach((a) => {\n    switch (a.type) {\n      case \"AbilityScoreImprovement\": {\n        a.value = {\n          type: \"asi\",\n          assignments: {},\n        };\n        DICTIONARY.character.abilities.forEach((ability) => {\n          const bonus = DDBHelper\n            .filterModifiersOld(this.source.ddb.character.modifiers.race, \"bonus\", `${ability.long}-score`, [null, \"\"])\n            .filter((mod) => mod.entityId === ability.id)\n            .reduce((prev, cur) => prev + cur.value, 0);\n          a.value.assignments[ability.value] = bonus;\n        });\n        break;\n      }\n      case \"Size\": {\n        const modSize = DDBHelper.filterModifiersOld(this.source.ddb.character.modifiers.race, \"size\");\n        const size = a.configuration.sizes.length === 1\n          ? a.configuration.sizes[0]\n          : modSize && modSize.length === 1\n            ? DICTIONARY.character.actorSizes.find((s) => modSize.subType === s.name.toLowerCase())?.value ?? `${this.raw.character.system.traits.size}`\n            : `${this.raw.character.system.traits.size}`;\n        a.value = {\n          size,\n        };\n        break;\n      }\n      // no default\n    }\n  });\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport logger from \"../../logger.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\nDDBCharacter.prototype.resourceList = function resourceList() {\n  const resources = [this.source.ddb.character.actions.race, this.source.ddb.character.actions.class, this.source.ddb.character.actions.feat]\n    .flat()\n    .filter((action) =>\n      action.limitedUse\n        && (action.limitedUse.maxUses || action.limitedUse.statModifierUsesId || action.limitedUse.useProficiencyBonus)\n        && ![\"Hypnotic Gaze\"].includes(action.name));\n\n  return resources;\n};\n\nDDBCharacter.prototype.getSortedByUsedResourceList = function getSortedByUsedResourceList() {\n  // get all resources\n  const allResources = this.resourceList();\n  const resources = allResources\n    .map((action) => {\n      let maxUses = (action.limitedUse.maxUses && action.limitedUse.maxUses !== -1) ? action.limitedUse.maxUses : 0;\n\n      if (action.limitedUse.statModifierUsesId) {\n        const ability = DICTIONARY.character.abilities.find(\n          (ability) => ability.id === action.limitedUse.statModifierUsesId\n        ).value;\n\n        switch (action.limitedUse.operator) {\n          case 2: {\n            maxUses *= this.raw.character.flags.ddbimporter.dndbeyond.effectAbilities[ability].mod;\n            break;\n          }\n          case 1:\n          default:\n            maxUses += this.raw.character.flags.ddbimporter.dndbeyond.effectAbilities[ability].mod;\n        }\n      }\n\n      if (action.limitedUse.useProficiencyBonus) {\n        switch (action.limitedUse.proficiencyBonusOperator) {\n          case 2: {\n            maxUses *= this.raw.character.system.attributes.prof;\n            break;\n          }\n          case 1:\n          default:\n            maxUses += this.raw.character.system.attributes.prof;\n        }\n      }\n\n      return {\n        label: action.name,\n        value: maxUses - action.limitedUse.numberUsed,\n        max: maxUses,\n        sr: action.limitedUse.resetType === 1,\n        lr: action.limitedUse.resetType === 1 || action.limitedUse.resetType === 2 || action.limitedUse.resetType === 3,\n      };\n    })\n    // sort by maxUses, I guess one wants to track the most uses first, because it's used more often\n    .sort((a, b) => {\n      if (a.max > b.max) return -1;\n      if (a.max < b.max) return 1;\n      return 0;\n    });\n  return resources;\n};\n\nconst sheetResources = [\n  \"primary\",\n  \"secondary\",\n  \"tertiary\",\n  \"fourth\",\n  \"fifth\",\n  \"sixth\",\n  \"seventh\",\n  \"eighth\",\n  \"ninth\",\n  \"tenth\",\n  \"eleventh\",\n  \"twelfth\",\n  \"thirteenth\",\n  \"fourteenth\",\n  \"fifteenth\",\n  \"sixteenth\",\n  \"seventeenth\",\n  \"eighteenth\",\n  \"nineteenth\",\n  \"twentieth\",\n];\n\nDDBCharacter.prototype._generateResources = function _generateResources(numberOfResources = 3) {\n  // get all resources\n  const allResources = this.getSortedByUsedResourceList();\n\n  let result = {};\n\n  switch (this.resourceChoices.type) {\n    case \"custom\": {\n      for (let i = 0; i < sheetResources.length && i < numberOfResources; i++) {\n        const resourceLookupName = this.resourceChoices[sheetResources[i]];\n\n        const resource = resourceLookupName && resourceLookupName !== \"\"\n          ? allResources.find((r) => r.label === resourceLookupName)\n          : { value: 0, max: 0, sr: false, lr: false, label: \"\" };\n        result[sheetResources[i]] = resource || { value: 0, max: 0, sr: false, lr: false, label: \"\" };\n      };\n      break;\n    }\n    case \"disable\": {\n      for (let i = 0; i < sheetResources.length && i < numberOfResources; i++) {\n        result[sheetResources[i]] = { value: 0, max: 0, sr: false, lr: false, label: \"\" };\n      };\n      break;\n    }\n    case \"remove\": {\n      for (let i = 0; i < sheetResources.length && i < numberOfResources; i++) {\n        result[sheetResources[i]] = { value: 0, max: 0, sr: false, lr: false, label: \"\" };\n      };\n      break;\n    }\n    default: {\n      const usedResources = allResources.slice(0, numberOfResources);\n      for (let i = 0; i < sheetResources.length && i < numberOfResources; i++) {\n        const resource = usedResources.length > i ? usedResources[i] : { value: 0, max: 0, sr: false, lr: false, label: \"\" };\n        result[sheetResources[i]] = resource;\n      };\n      break;\n    }\n  }\n\n  this.resources = result;\n  foundry.utils.setProperty(this.raw.character, \"flags.ddbimporter.resources\", this.resourceChoices);\n  foundry.utils.setProperty(this.raw.character, \"system.resources\", result);\n};\n\nDDBCharacter.prototype.getResourceList = function getResourceList() {\n  return this.getSortedByUsedResourceList();\n};\n\nDDBCharacter.prototype._generateResourceSelectionFromForm = function _generateResourceSelectionFromForm(formData, type) {\n  const primary = formData.find((r) => r.name === \"primary-select\" && r.value !== \"\");\n  const secondary = formData.find((r) => r.name === \"secondary-select\" && r.value !== \"\");\n  const tertiary = formData.find((r) => r.name === \"tertiary-select\" && r.value !== \"\");\n  const ask = formData.find((r) => r.name === \"ask-resources\")?.value === \"on\";\n\n  const resourceSelection = {\n    type: type,\n    primary: type === \"custom\" && primary ? primary.value : \"\",\n    secondary: type === \"custom\" && secondary ? secondary.value : \"\",\n    tertiary: type === \"custom\" && tertiary ? tertiary.value : \"\",\n    ask: type === \"remove\" ? false : ask,\n  };\n\n  this.resourceChoices = resourceSelection;\n};\n\nDDBCharacter.prototype.setDefaultResources = function setDefaultResources(sortedResources) {\n  if (sortedResources.length >= 1) {\n    this.resourceChoices.primary = sortedResources[0].label;\n  }\n  if (sortedResources.length >= 2) {\n    this.resourceChoices.secondary = sortedResources[1].label;\n  }\n  if (sortedResources.length >= 3) {\n    this.resourceChoices.tertiary = sortedResources[2].label;\n  }\n};\n\n// this.source.ddb, this.raw.character\nDDBCharacter.prototype.resourceSelectionDialog = async function resourceSelectionDialog() {\n  return new Promise((resolve) => {\n    const sortedResources = this.getSortedByUsedResourceList();\n\n    if (this.resourceChoices.type === \"default\") {\n      this.setDefaultResources(sortedResources);\n    }\n\n    if (this.resourceChoices.ask || !foundry.utils.hasProperty(this.resourceChoices, \"ask\")) {\n      const resources = sortedResources.map((resource) => {\n        let resourceArray = [];\n        if (resource.sr) resourceArray.push(\"SR\");\n        if (resource.lr) resourceArray.push(\"LR\");\n        if (!resource.sr && !resource.lr) resourceArray.push(\"Other\");\n        resource.resetString = resourceArray.join(\", \");\n        switch (resource.label) {\n          case this.resourceChoices.primary:\n            resource.primary = true;\n            break;\n          case this.resourceChoices.secondary:\n            resource.secondary = true;\n            break;\n          case this.resourceChoices.tertiary:\n            resource.tertiary = true;\n            break;\n          // no default\n        }\n        return resource;\n      });\n\n      const dialog = new Dialog({\n        title: `Choose Resources for ${this.raw.character.name}`,\n        content: {\n          \"resources\": resources,\n          \"character\": this.raw.character.name,\n          \"img\": this.source.ddb.character.decorations?.avatarUrl\n            ? this.source.ddb.character.decorations.avatarUrl\n            : CONST.DEFAULT_TOKEN,\n          \"cssClass\": \"character-resource-selection sheet\"\n        },\n        buttons: {\n          default: {\n            // icon: '<i class=\"fas fa-list-ol\"></i>',\n            // label: \"Auto\",\n            callback: async () => {\n              const formData = $('.character-resource-selection').serializeArray();\n              this._generateResourceSelectionFromForm(formData, \"default\");\n              this.setDefaultResources(sortedResources);\n              this._generateResources();\n              resolve(this.raw.character);\n            }\n          },\n          custom: {\n            // icon: '<i class=\"fas fa-sort\"></i>',\n            // label: \"Custom\",\n            callback: async () => {\n              const formData = $('.character-resource-selection').serializeArray();\n              this._generateResourceSelectionFromForm(formData, \"custom\");\n              resolve(this.raw.character);\n            }\n          },\n          disable: {\n            callback: async () => {\n              const formData = $('.character-resource-selection').serializeArray();\n              this._generateResourceSelectionFromForm(formData, \"disable\");\n              this._generateResources();\n              resolve(this.raw.character);\n            }\n          },\n          remove: {\n            callback: async () => {\n              const formData = $('.character-resource-selection').serializeArray();\n              this._generateResourceSelectionFromForm(formData, \"remove\");\n              this._generateResources();\n              resolve(this.raw.character);\n            }\n          },\n        },\n        default: \"default\",\n        close: () => resolve(this.raw.character),\n      },\n      {\n        width: 400,\n        classes: [\"dialog\", \"character-resource-selection\"],\n        template: \"modules/ddb-importer/handlebars/resources.hbs\",\n      });\n      dialog.render(true);\n    } else {\n      this._generateResources();\n      resolve(this.raw.character);\n    }\n  });\n};\n\nconst resourceFeatureLinkMap = {\n  \"Channel Divinity\": [\"Channel Divinity:\"],\n  \"Superiority Dice\": [\"Manoeuvres:\", \"Maneuvers:\"],\n  \"Sorcery Points\": [\"Metamagic - \", \"Metamagic:\", \"Hound of Ill Omen\"],\n  \"Bardic Inspiration\": [\n    \"Mote of Potential\", \"Unsettling Words\", \"Mantle of Inspiration\",\n    \"Cutting Words\", \"Peerless Skill\", \"Tales from Beyond\", \"Blade Flourish\",\n    \"Defensive Flourish\", \"Slashing Flourish\", \"Mobile Flourish\",\n    \"Psychic Blades\",\n  ],\n  \"Wild Shape\": [\"Symbiotic Entity\", \"Starry Form\", \"Wild Companion\", \"Summon Wildfire Spirit\"],\n  \"Grit Points\": [\n    \"Trick Shots:\", \"Bullying Shot\", \"Dazing Shot\", \"Deadeye Shot\", \"Disarming Shot\",\n    \"Forceful Shot\", \"Piercing Shot\", \"Violent Shot\", \"Winging Shot\",\n  ],\n  \"Adept Marksman\": [\n    \"Trick Shots:\", \"Bullying Shot\", \"Deadeye Shot\", \"Disarming Shot\", \"Piercing Shot\", \"Rapid Repair\",\n    \"Dazing Shot\", \"Forceful Shot\", \"Winging Shot\", \"Violent Shot\"\n  ],\n  \"Psionic Power: Psionic Energy\": [\n    \"Psionic Power: Psionic Strike\", \"Psionic Power: Protective Field\", \"Guarded Mind\",\n    \"Psionic Power: Psi-Bolstered Knack\", \"Soul Blades: Homing Strikes\", \"Soul Blades: Psychic Teleportation\",\n    \"Psionic Power: Recovery\",\n  ],\n  \"Ki Points\": [\n    \"Ki-Fueled Attack\", \"Flurry of Blows\", \"Patient Defense\", \"Step of the Wind\",\n    \"Deflect Missiles Attack\", \"Arms of the Astral Self: Summon\", \"Stunning Strike\",\n    \"Empty Body\", \"Diamond Soul\", \"Visage of the Astral Self\", \"Quickened Healing\",\n    \"Focused Aim\", \"Sharpen the Blade\", \"Deft Strike\", \"Shadow Arts\",\n    \"Extort Truth\", \"Mind of Mercury\", \"Debilitating Barrage\", \"Tipsy Sway\",\n    \"Drunkard’s Luck\", \"Drunkard's Luck\", \"Touch of the Long Death\",\n    \"Quivering Palm\", \"Radiant Sun Bolt\", \"Searing Arc Strike\",\n    \"Breath of Winter\", \"Clench of the North Wind\", \"Eternal Mountain Defense\",\n    \"Fangs of the Fire Snake\", \"Fist of Four Thunders\", \"Fist of Unbroken Air\",\n    \"Flames of the Phoenix\", \"Gong of the Summit\", \"Mist Stance\",\n    \"Ride the Wind\", \"River of Hungry Flame\", \"Rush of the Gale Spirits\",\n    \"Shape the Flowing River\", \"Sweeping Cinder Strike\", \"Water Whip\",\n    \"Wave of Rolling Earth\", \"Hand of Healing\", \"Hand of Harm\", \"Hand of Ultimate Mercy\",\n  ],\n  \"Infuse Item\": [\"Infusion:\"],\n  // \"Lay on Hands Pool\": [\"Lay on Hands\"],\n  \"Maneuver Points\": [\n    \"Carrion Raven Martial Maneuvers:\", \"Slippery Otter: Activate\", \"Blade Breaker Maneuvers:\"\n  ],\n  \"Jinx Points\": [\"Misfortunes:\", \"Curse Caster\"]\n};\n\nconst chargeTypeMap = {\n  \"Lay on Hands\": {\n    \"type\": \"none\",\n  },\n};\n\nconst resourceSpellLinkMap = {\n  \"Ki Points\": [\n    { name: \"Astral Projection\", cost: 8, lookupName: \"Empty Body\" },\n    { name: \"Darkness\", cost: 2, lookupName: \"Shadow Arts\" },\n    { name: \"Darkvision\", cost: 2, lookupName: \"Shadow Arts\" },\n    { name: \"Pass Without Trace\", cost: 2, lookupName: \"Shadow Arts\" },\n    { name: \"Silence\", cost: 2, lookupName: \"Shadow Arts\" },\n    { name: \"Burning Hands\", cost: 2, lookupName: \"Searing Arc Strike\" },\n    { name: \"Cone of Cold\", cost: 6, lookupName: \"Breath of Winter\" },\n    { name: \"Hold Person\", cost: 3, lookupName: \"Clench of the North Wind\" },\n    { name: \"Stoneskin\", cost: 5, lookupName: \"Eternal Mountain Defense\" },\n    { name: \"Thunderwave\", cost: 2, lookupName: \"Fist of Four Thunders\" },\n    { name: \"Fireball\", cost: 4, lookupName: \"Flames of the Phoenix\" },\n    { name: \"Shatter\", cost: 3, lookupName: \"Gong of the Summit\" },\n    { name: \"Gaseous Form\", cost: 4, lookupName: \"Mist Stance\" },\n    { name: \"Fly\", cost: 4, lookupName: \"Ride the Wind\" },\n    { name: \"Wall of Fire\", cost: 5, lookupName: \"River of Hungry Flame\" },\n    { name: \"Gust of Wind\", cost: 2, lookupName: \"Rush of the Gale Spirits\" },\n    { name: \"Burning Hands\", cost: 2, lookupName: \"Sweeping Cinder Strike\" },\n    { name: \"Wall of Stone\", cost: 6, lookupName: \"Wave of Rolling Earth\" },\n  ],\n  \"Maneuver Points\": [\n    { name: \"Polymorph\", cost: 8, lookupName: \"Bestial Transformation (8 points)\" },\n  ],\n};\n\nconst notReplace = {\n  \"Starry Form\": [\"Starry Form: Archer\", \"Starry Form: Chalice\", \"Starry Form: Dragon\"],\n};\n\n\nDDBCharacter.prototype.fixItemSpellResources = async function fixItemSpellResources() {\n  const possibleItems = this.currentActor.items.toObject();\n  let toUpdate = [];\n\n  for (const spell of possibleItems) {\n    if (spell.type !== \"spell\") continue;\n    if (!foundry.utils.getProperty(spell, \"flags.ddbimporter.isItemCharge\")) continue;\n    if (foundry.utils.getProperty(spell, \"flags.ddbimporter.dndbeyond.lookup\") !== \"item\") continue;\n    const spellLookupId = foundry.utils.getProperty(spell, \"flags.ddbimporter.dndbeyond.lookupId\");\n    if (!spellLookupId) continue;\n    const parentDoc = possibleItems.find((item) =>\n      spellLookupId === item.flags?.ddbimporter?.definitionId\n    );\n    if (!parentDoc) continue;\n    toUpdate.push({\n      _id: spell._id,\n      \"system.consume.target\": parentDoc._id,\n      \"system.uses.prompt\": false,\n    });\n  }\n\n  logger.debug(\"itemSpellsToUpdate\", toUpdate);\n\n  const results = await this.currentActor.updateEmbeddedDocuments(\"Item\", toUpdate);\n  logger.debug(\"itemSpellsToUpdate results\", results);\n\n};\n\n\nDDBCharacter.prototype.autoLinkResources = async function autoLinkResources() {\n  // loop over resourceFeatureLinkMap\n  const possibleItems = this.currentActor.items.toObject();\n  let toUpdate = [];\n\n  for (const [resourceDocName, consumingDocs] of Object.entries(resourceFeatureLinkMap)) {\n    logger.debug(`Generic Resource Linking: Checking ${resourceDocName}`, consumingDocs);\n    const parent = possibleItems.find((doc) => {\n      const name = doc.flags.ddbimporter?.originalName ?? doc.name;\n      return name === resourceDocName;\n    });\n\n    if (parent) {\n      logger.debug(\"parent\", parent);\n      consumingDocs.forEach((consumingDocName) => {\n        logger.debug(`Checking ${consumingDocName}`);\n        const children = possibleItems.filter((doc) => {\n          const name = doc.flags.ddbimporter?.originalName ?? doc.name;\n          const dontReplace = notReplace[consumingDocName]?.includes(name);\n          return name.startsWith(consumingDocName) && !dontReplace;\n        });\n\n        if (children) {\n          logger.debug(`Found children`, children);\n          children.forEach((child) => {\n            if (foundry.utils.getProperty(child, \"flags.ddbimporter.retainResourceConsumption\")) return;\n            logger.debug(\"child\", child);\n            const update = {\n              _id: child._id\n            };\n            const charge = foundry.utils.getProperty(child, \"system.consume.amount\") ?? 1;\n            foundry.utils.setProperty(update, \"system.consume\", {\n              type: chargeTypeMap[consumingDocName]?.type ?? \"charges\",\n              target: parent._id,\n              amount: charge,\n            });\n            toUpdate.push(update);\n          });\n        }\n      });\n    }\n  }\n\n  for (const [key, values] of Object.entries(resourceSpellLinkMap)) {\n    logger.debug(`Resource Spells: Checking ${key}`, values);\n    const parent = possibleItems.find((doc) => {\n      const name = doc.flags.ddbimporter?.originalName ?? doc.name;\n      return name === key;\n    });\n    if (parent) {\n      logger.debug(\"parent\", parent);\n      values.forEach((value) => {\n        logger.debug(`Checking ${value.name}`, value);\n        const child = possibleItems.find((doc) => {\n          const name = doc.flags.ddbimporter?.originalName ?? doc.name;\n          const lookupName = doc.flags.ddbimporter?.dndbeyond?.lookupName ?? \"NO_LOOKUP_NAME\";\n          return name === value.name && value.lookupName === lookupName;\n        });\n\n        if (child) {\n          if (foundry.utils.getProperty(child, \"flags.ddbimporter.retainResourceConsumption\")) return;\n          logger.debug(\"child\", child);\n          const update = {\n            _id: child._id\n          };\n          foundry.utils.setProperty(update, \"system.consume\", {\n            type: \"charges\",\n            target: parent._id,\n            amount: value.cost,\n          });\n          toUpdate.push(update);\n        }\n      });\n    }\n  }\n\n  logger.debug(\"toUpdate\", toUpdate);\n\n  const results = await this.currentActor.updateEmbeddedDocuments(\"Item\", toUpdate);\n  logger.debug(\"resource Update results\", results);\n};\n","/* eslint-disable no-continue */\nimport utils from \"../../lib/utils.js\";\n\n// Import parsing functions\nimport { getLookups } from \"./metadata.js\";\nimport { fixSpells } from \"./special.js\";\nimport { parseSpell } from \"./parseSpell.js\";\nimport { hasSpellCastingAbility, convertSpellCastingAbilityId } from \"./ability.js\";\n\n\nfunction getSpellCount(dict, name) {\n  if (!dict[name]) {\n    dict[name] = 0;\n  }\n  return ++dict[name];\n}\n\nexport async function getItemSpells(ddb, character) {\n  let items = [];\n  const proficiencyModifier = character.system.attributes.prof;\n  const lookups = getLookups(ddb.character);\n\n  const spellCountDict = {};\n\n  // feat spells are handled slightly differently\n  for (const spell of ddb.character.spells.item) {\n    if (!spell.definition) continue;\n\n    const itemInfo = lookups.item.find((it) => it.id === spell.componentId);\n    if (!itemInfo) continue;\n\n    const active\n      = (!itemInfo.canEquip && !itemInfo.canAttune) // if item just gives a thing\n      || itemInfo.isAttuned // if it is attuned (assume equipped)\n      || (!itemInfo.canAttune && itemInfo.equipped); // can't attune but is equipped\n    // for item spells the spell dc is often on the item spell\n    let spellDC = 8;\n    if (spell.overrideSaveDc) {\n      spellDC = spell.overrideSaveDc;\n    } else if (spell.spellCastingAbilityId) {\n      // If the spell has an ability attached, use that\n      // if there is no ability on spell, we default to wis\n      let spellCastingAbility = \"wis\";\n      if (hasSpellCastingAbility(spell.spellCastingAbilityId)) {\n        spellCastingAbility = convertSpellCastingAbilityId(spell.spellCastingAbilityId);\n      }\n\n      const abilityModifier = utils.calculateModifier(character.flags.ddbimporter.dndbeyond.effectAbilities[spellCastingAbility].value);\n      spellDC = 8 + proficiencyModifier + abilityModifier;\n    } else {\n      spellDC = null;\n    }\n\n    // add some data for the parsing of the spells into the data structure\n    spell.flags = {\n      ddbimporter: {\n        dndbeyond: {\n          lookup: \"item\",\n          lookupName: itemInfo.name,\n          lookupId: itemInfo.id,\n          level: spell.castAtLevel,\n          dc: spellDC,\n          limitedUse: itemInfo.limitedUse,\n          nameOverride: `${spell.definition.name} (${itemInfo.name})`,\n          overrideDC: !!spell.overrideSaveDc,\n          spellLimitedUse: spell.limitedUse,\n          castAtLevel: spell.castAtLevel,\n          active: active,\n        },\n      },\n    };\n    const namePostfix = `It${getSpellCount(spellCountDict, spell.definition.name)}`;\n    items.push(await parseSpell(spell, character, { namePostfix: namePostfix }));\n  }\n\n  if (items) {\n    await fixSpells(ddb, items);\n  }\n\n  return items;\n}\n","import DDBCharacter from \"../DDBCharacter.js\";\nimport { getItemSpells } from \"../spells/getItemSpells.js\";\nimport logger from \"../../logger.js\";\n\nDDBCharacter.prototype._generateInventory = async function _generateInventory() {\n  this.raw.itemSpells = await getItemSpells(this.source.ddb, this.raw.character);\n  logger.debug(\"Item Spells parse complete\");\n  this.raw.inventory = await this.getInventory();\n  logger.debug(\"Inventory parse complete\");\n};\n","import DDBHelper from \"../../lib/DDBHelper.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\n\n/**\n * Gets global bonuses to attacks and damage\n * Supply a list of maps that have the fvtt tyoe and ddb sub type, e,g,\n * { fvttType: \"attack\", ddbSubType: \"magic\" }\n  {\n    \"attack\": \"\",\n    \"damage\": \"\",\n  },\n * @param {*} lookupTable\n */\nDDBCharacter.prototype.getGlobalBonusAttackModifiers = function(lookupTable) {\n  let result = {\n    attack: \"\",\n    damage: \"\",\n  };\n  const diceFormula = /\\d*d\\d*/;\n\n  let lookupResults = {\n    attack: {\n      sum: 0,\n      diceString: \"\",\n    },\n    damage: {\n      sum: 0,\n      diceString: \"\",\n    },\n  };\n\n  lookupTable.forEach((b) => {\n    const lookupResult = DDBHelper.getModifierSum(DDBHelper.filterBaseModifiers(this.source.ddb, \"bonus\", { subType: b.ddbSubType }), this.raw.character);\n    const lookupMatch = diceFormula.test(lookupResult);\n\n    // if a match then a dice string\n    if (lookupMatch || !Number.isInteger(parseInt(lookupResult))) {\n      lookupResults[b.fvttType].diceString += lookupResult === \"\" ? lookupResult : \" + \" + lookupResult;\n    } else {\n      lookupResults[b.fvttType].sum += parseInt(lookupResult);\n    }\n  });\n\n  // loop through outputs from lookups and build a response\n  [\"attack\", \"damage\"].forEach((fvttType) => {\n    if (lookupResults[fvttType].diceString === \"\") {\n      if (lookupResults[fvttType].sum !== 0) {\n        result[fvttType] = `${lookupResults[fvttType].sum}`;\n      }\n    } else {\n      result[fvttType] = lookupResults[fvttType].diceString;\n      if (lookupResults[fvttType].sum !== 0) {\n        result[fvttType] += \" + \" + lookupResults[fvttType].sum;\n      }\n    }\n  });\n\n  return result;\n};\n\n/**\n * Gets global bonuses to spell attacks and damage\n * Most likely from items such as wand of the warmage\n * supply type as 'ranged' or 'melee'\n  {\n    \"attack\": \"\",\n    \"damage\": \"\",\n  },\n * @param {*} type\n */\nDDBCharacter.prototype.getBonusSpellAttacks = function(type) {\n  // I haven't found any matching global spell damage boosting mods in ddb\n  const bonusLookups = [\n    { fvttType: \"attack\", ddbSubType: \"spell-attacks\" },\n    { fvttType: \"attack\", ddbSubType: `${type}-spell-attacks` },\n    { fvttType: \"attack\", ddbSubType: \"warlock-spell-attacks\" },\n  ];\n\n  return this.getGlobalBonusAttackModifiers(bonusLookups);\n};\n\nDDBCharacter.prototype._generateBonusSpellAttacks = function() {\n  this.raw.character.system.bonuses.rsak = this.getBonusSpellAttacks(\"ranged\");\n  this.raw.character.system.bonuses.msak = this.getBonusSpellAttacks(\"melee\");\n};\n\n\n/**\n * Gets global bonuses to weapon attacks and damage\n * Most likely from items such as wand of the warmage\n * supply type as 'ranged' or 'melee'\n  {\n    \"attack\": \"\",\n    \"damage\": \"\",\n  },\n * @param {*} type\n */\nDDBCharacter.prototype.getBonusWeaponAttacks = function(type) {\n  // global melee damage is not a ddb type, in that it's likely to be\n  // type specific. The only class one I know of is the Paladin Improved Smite\n  // which will be handled in the weapon import later.\n  const bonusLookups = [\n    { fvttType: \"attack\", ddbSubType: `${type}-attacks` },\n    { fvttType: \"attack\", ddbSubType: \"weapon-attacks\" },\n    { fvttType: \"attack\", ddbSubType: `${type}-weapon-attacks` },\n  ];\n\n  return this.getGlobalBonusAttackModifiers(bonusLookups);\n};\n\nDDBCharacter.prototype._generateBonusWeaponAttacks = function() {\n  this.raw.character.system.bonuses.mwak = this.getBonusWeaponAttacks(\"melee\");\n  this.raw.character.system.bonuses.rwak = this.getBonusWeaponAttacks(\"ranged\");\n};\n\n/**\n * Gets global bonuses to ability checks, saves and skills\n * These can come from Paladin auras or items etc\n  \"abilities\": {\n    \"check\": \"\",\n    \"save\": \"\",\n    \"skill\": \"\"\n  },\n * @param {*} this.raw.character\n */\nDDBCharacter.prototype._generateBonusAbilities = function() {\n  let result = {\n    \"check\": \"\",\n    \"save\": \"\",\n    \"skill\": \"\",\n  };\n  const bonusLookup = [\n    { fvttType: \"check\", ddbSubType: \"ability-checks\" },\n    { fvttType: \"save\", ddbSubType: \"saving-throws\" },\n    { fvttType: \"skill\", ddbSubType: \"skill-checks\" },\n  ];\n\n  bonusLookup.forEach((b) => {\n    const mods = DDBHelper.filterBaseModifiers(this.source.ddb, \"bonus\", { subType: b.ddbSubType });\n    const bonus = DDBHelper.getModifierSum(mods, this.raw.character);\n    if (bonus !== 0 && bonus !== \"\") result[b.fvttType] = `+ ${bonus}`.trim().replace(/\\+\\s*\\+/, \"+\");\n  });\n  this.raw.character.system.bonuses.abilities = result;\n};\n\nDDBCharacter.prototype._generateBonusSpellDC = function() {\n  let result = {\n    \"dc\": \"\",\n  };\n  const bonusLookup = [\n    { fvttType: \"dc\", ddbSubType: \"spell-save-dc\" },\n    { fvttType: \"dc\", ddbSubType: \"warlock-spell-save-dc\" },\n  ];\n\n  const bonus = bonusLookup.map((b) => {\n    return DDBHelper.getModifierSum(DDBHelper.filterBaseModifiers(this.source.ddb, \"bonus\", { subType: b.ddbSubType }), this.raw.character);\n  })\n    .filter((b) => b && b !== 0 && String(b).trim() !== \"\")\n    .reduce((previous, current) => {\n      return previous !== \"\" ? [previous, current].join(\" + \") : current;\n    }, \"\");\n\n  if (bonus && String(bonus).trim() !== \"\") {\n    result[\"dc\"] = bonus;\n  }\n\n  this.raw.character.system.bonuses.spell = result;\n};\n","// import DICTIONARY from '../dictionary.js';\nimport utils from \"../../../lib/utils.js\";\nimport DDBHelper from \"../../../lib/DDBHelper.js\";\n\nexport function getDivineSmiteSpell(feature) {\n  const restriction = \"Against undead or fiends\";\n\n  const damageTagInfo = DDBHelper.getDamageTag({ subType: \"radiant\", restriction: \"\" });\n  const regularDamage = utils.parseDiceString(\"2d8\", \"\", damageTagInfo.damageTag).diceString;\n  const extraDamageTagInfo = DDBHelper.getDamageTag({ subType: \"radiant\", restriction });\n  const extraDamage = utils.parseDiceString(\"1d8\", \"\", extraDamageTagInfo.damageTag).diceString;\n\n  let result = {\n    flags: {\n      ddbimporter: {\n        ignoreItemUpdate: true,\n      },\n    },\n    midiProperties: {\n      critOther: true,\n      magicdam: true,\n      magiceffect: true,\n    },\n    \"midi-qol\": {\n      otherCondition: `[\"fiend\", \"undead\"].includes(raceOrType)`,\n    },\n    name: \"Divine Smite\",\n    type: \"spell\",\n    img: \"icons/skills/melee/weapons-crossed-swords-yellow-teal.webp\",\n    system: {\n      description: {\n        value: feature.system.description.value,\n        chat: \"\",\n      },\n      source: \"PHB PG. 85\",\n      activation: {\n        type: \"special\",\n        cost: null,\n        condition: \"\",\n      },\n      duration: {\n        value: null,\n        units: \"\",\n      },\n      target: {\n        value: 1,\n        units: \"\",\n        type: \"enemy\",\n      },\n      range: {\n        value: null,\n        long: null,\n        units: \"\",\n      },\n      uses: {\n        value: 0,\n        max: 0,\n        per: \"\",\n      },\n      consume: {\n        type: \"\",\n        target: \"\",\n        amount: null,\n      },\n      ability: \"\",\n      actionType: \"other\",\n      attack: {\n        bonus: 0,\n      },\n      chatFlavor: \"\",\n      critical: null,\n      damage: {\n        parts: [\n          [`${regularDamage}`, \"radiant\"],\n        ],\n        versatile: \"\",\n      },\n      formula: \"\",\n      save: {\n        ability: \"\",\n        dc: null,\n        scaling: \"spell\",\n      },\n      level: 1,\n      school: \"\",\n      properties: [\"mgc\"],\n      materials: {\n        value: \"\",\n        consumed: false,\n        cost: 0,\n        supply: 0,\n      },\n      preparation: {\n        mode: \"always\",\n        prepared: true,\n      },\n      scaling: {\n        mode: \"level\",\n        formula: \"1d8\",\n      },\n    },\n  };\n\n  result.system.formula = `${regularDamage} + ${extraDamage}`;\n  result.system.chatFlavor = `Use Other damage ${restriction.toLowerCase()}`;\n  if (game.modules.get(\"midi-qol\")?.active) {\n    // result.system.activation.condition = `[\"undead\", \"fiend\"].includes(\"@raceOrType\")`;\n    foundry.utils.setProperty(document, \"flags.midi-qol.effectCondition\", `[\"undead\", \"fiend\"].includes(\"@raceOrType\")`);\n  }\n\n  return result;\n}\n\n","import DDBCharacter from \"../DDBCharacter.js\";\nimport { getDivineSmiteSpell } from \"./additions/divineSmite.js\";\n\nDDBCharacter.prototype._addSpecialAdditions = function _addSpecialAdditions() {\n  const checkList = this.data.features.concat(this.data.actions);\n  const divineSmite = checkList.find((f) => f.name === \"Divine Smite\" && f.type === \"feat\");\n  if (divineSmite) {\n    this.data.spells.push(getDivineSmiteSpell(divineSmite));\n  }\n\n  const feyAncestry = checkList.find((f) => f.name === \"Fey Ancestry\" && f.type === \"feat\");\n  if (feyAncestry && (foundry.utils.getProperty(feyAncestry, \"system.description.value\") ?? \"\").includes(\"sleep\")) {\n    const ci = [\"Sleep\"];\n    if (this.data.character.system.traits.ci.custom && this.data.character.system.traits.ci.custom.trim() !== \"\")\n      ci.push(this.data.character.system.traits.ci.custom);\n    this.data.character.system.traits.ci.custom = ci.join(\";\");\n  }\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport { parseDamageRolls, parseTags } from \"../../lib/DDBReferenceLinker.js\";\n\nexport function getDescription(data, document) {\n  const chatSnippet = data.definition.snippet ? data.definition.snippet : \"\";\n  const chatAdd = game.settings.get(\"ddb-importer\", \"add-description-to-chat\");\n\n  const attunementText = data.definition.canAttune && data.definition.attunementDescription && data.definition.attunementDescription !== \"\"\n    ? `<div class=\"item-attunement\"><i>(Requires attunement by a ${data.definition.attunementDescription})</i></div>`\n    : \"\";\n\n  const valueDamageText = parseDamageRolls({ text: data.definition.description, document, actor: null });\n  const chatDamageText = chatAdd ? parseDamageRolls({ text: chatSnippet, document, actor: null }) : \"\";\n  return {\n    value: parseTags(attunementText + valueDamageText),\n    chat: chatAdd ? parseTags(chatDamageText) : \"\",\n  };\n}\n\nexport function getCurrency(data) {\n  return {\n    cp: data.currency?.cp ?? 0,\n    sp: data.currency?.sp ?? 0,\n    ep: data.currency?.ep ?? 0,\n    gp: data.currency?.gp ?? 0,\n    pp: data.currency?.pp ?? 0,\n  };\n}\n\nexport function getPrice(data) {\n  const value = data.definition.cost ? Number.parseFloat(data.definition.cost) : 0;\n  const price = {\n    \"value\": Number.isInteger(value) ? value : (value * 10),\n    \"denomination\": Number.isInteger(value) ? \"gp\" : \"sp\"\n  };\n\n  return price;\n}\n\nexport function getItemRarity(data) {\n  const tmpRarity = data.definition.rarity;\n  const isMundaneItem = data.definition?.rarity === \"Common\" && !data.definition.magic;\n  const rarity = data.definition.rarity && !isMundaneItem\n    ? tmpRarity.charAt(0).toLowerCase() + tmpRarity.slice(1).replace(/\\s/g, \"\")\n    : \"\";\n  return rarity;\n}\n\n/**\n * Checks if the character can attune to an item and if yes, if he is attuned to it.\n */\nexport function getAttuned(data) {\n  if (data.definition.canAttune !== undefined && data.definition.canAttune === true) {\n    return data.isAttuned;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Checks if the character can equip an item and if yes, if he is has it currently equipped.\n */\nexport function getEquipped(data) {\n  if (data.definition.canEquip !== undefined && data.definition.canEquip === true) {\n    return data.equipped;\n  } else {\n    return false;\n  }\n}\n\nexport function getRechargeFormula(description, maxCharges) {\n  if (description === \"\" || !description) {\n    return `${maxCharges}`;\n  }\n\n  let chargeMatchFormula = /regains (\\dd\\d* \\+ \\d) expended charges/i;\n  let chargeMatchFixed = /regains (\\d*) /i;\n  let chargeMatchLastDitch = /(\\dd\\d* \\+ \\d)/i;\n  let chargeNextDawn = /can't be used this way again until the next/i;\n\n  let matchFormula = chargeMatchFormula.exec(description);\n  let matchFixed = chargeMatchFixed.exec(description);\n  let matchLastDitch = chargeMatchLastDitch.exec(description);\n\n  let match = maxCharges;\n  if (matchFormula && matchFormula[1]) {\n    match = matchFormula[1];\n  } else if (matchFixed && matchFixed[1]) {\n    match = matchFixed[1];\n  } else if (matchLastDitch && matchLastDitch[1]) {\n    match = matchLastDitch[1];\n  } else if (description.search(chargeNextDawn) !== -1) {\n    match = maxCharges;\n  }\n\n  return `${match}`;\n}\n\n/**\n * Gets Limited uses information, if any\n * uses: { value: 0, max: 0, per: null }\n */\nexport function getUses(data, prompt = false) {\n  if (data.limitedUse !== undefined && data.limitedUse !== null && data.limitedUse.resetTypeDescription !== null) {\n    let resetType = DICTIONARY.resets.find((reset) => reset.id == data.limitedUse.resetType);\n\n    const recovery = getRechargeFormula(data.limitedUse.resetTypeDescription, data.limitedUse.maxUses);\n    return {\n      max: data.limitedUse.maxUses,\n      value: data.limitedUse.numberUsed\n        ? data.limitedUse.maxUses - data.limitedUse.numberUsed\n        : data.limitedUse.maxUses,\n      per: resetType ? resetType.value : \"\",\n      description: data.limitedUse.resetTypeDescription,\n      recovery,\n      prompt,\n    };\n  } else {\n    return { value: 0, max: 0, per: null, prompt };\n  }\n}\n\nexport function getConsumableUses(data) {\n  if (data.limitedUse) {\n    let uses = getUses(data, true);\n    if (uses.per === \"\") uses.per = \"charges\";\n    uses.autoDestroy = true;\n    return uses;\n  } else {\n    // default\n    return { value: 1, max: 1, per: \"charges\", autoUse: false, autoDestroy: true };\n  }\n}\n\n/**\n * Checks the proficiency of the character with this specific weapon\n * @param {obj} data Item data\n * @param {string} weaponType The DND5E weaponType\n * @param {array} proficiencies The character's proficiencies as an array of `{ name: 'PROFICIENCYNAME' }` objects\n */\nexport function getWeaponProficient(data, weaponType, proficiencies) {\n  // if it's a simple weapon and the character is proficient in simple weapons:\n  if (\n    proficiencies.some((proficiency) => proficiency.name === \"Simple Weapons\")\n    && weaponType.indexOf(\"simple\") !== -1\n  ) {\n    return true;\n  } else if (\n    proficiencies.some((proficiency) => proficiency.name === \"Martial Weapons\")\n    && weaponType.indexOf(\"martial\") !== -1\n  ) {\n    return true;\n  } else {\n    const proficient = proficiencies.some((proficiency) => proficiency.name.toLowerCase() === data.definition.type.toLowerCase());\n    if (proficient) return proficient;\n  }\n  return null;\n};\n\n/**\n * Searches for a magical attack bonus granted by this weapon\n * @param {obj} data item data\n */\nexport function getMagicalBonus(data, returnZero = false) {\n  const boni = data.definition.grantedModifiers.filter(\n    (mod) => mod.type === \"bonus\" && mod.subType === \"magic\" && mod.value && mod.value !== 0\n  );\n  const bonus = boni.reduce((prev, cur) => prev + cur.value, 0);\n  return bonus === 0 && !returnZero ? \"\" : bonus;\n}\n\nexport function getAttunement(item) {\n  if (item.isAttuned || item.definition.canAttune) {\n    if (item.definition.name.startsWith(\"Spell Gem\")) {\n      return \"optional\";\n    }\n    return \"required\";\n  } else {\n    return \"\";\n  }\n}\n\n/**\n * Retrieves the base item and tool type based on the provided data definition.\n *\n * @param {Object} data - The data definition object\n * @return {Object} An object containing the base item and tool type\n */\nexport function getBaseItem(data) {\n  let baseItem;\n  let toolType;\n\n  if (data.definition.filterType === \"Weapon\") {\n    baseItem = data.definition.type.toLowerCase().split(\",\").reverse().join(\"\").replace(/\\s/g, \"\");\n  } else if (data.definition.filterType === \"Armor\" && data.definition.baseArmorName) {\n    baseItem = data.definition.baseArmorName.toLowerCase().split(\",\").reverse().join(\"\").replace(/\\s/g, \"\");\n  } else if (data.definition.filterType === \"Other Gear\"\n    && ((data.definition.gearTypeId === 1 && data.definition.subType === \"Tool\")\n      || (data.definition.gearTypeId === 11))) {\n    const toolProficiencies = DICTIONARY.character.proficiencies\n      .filter((prof) => prof.type === \"Tool\")\n      .map((prof) => {\n        return prof;\n      });\n\n    const baseTool = toolProficiencies.find((allProf) => allProf.name.toLowerCase() === data.definition.name.toLowerCase());\n    if (baseTool && baseTool.baseTool) {\n      baseItem = baseTool.baseTool;\n      toolType = baseTool.toolType;\n    }\n  } else if (data.definition.filterType === \"Staff\") {\n    baseItem = \"quarterstaff\";\n  }\n\n\n  return { baseItem, toolType };\n}\n\nexport function getQuantity(data) {\n  return data.definition.quantity\n    ? data.definition.quantity\n    : data.quantity\n      ? data.quantity\n      : 1;\n}\n\nexport function getSingleItemWeight(data) {\n  const bundleSize = data.definition?.bundleSize ? data.definition.bundleSize : 1;\n  const totalWeight = data.definition?.weight ? data.definition.weight : 0;\n  const weight = totalWeight / bundleSize;\n  return {\n    value: weight,\n    units: \"lb\"\n  };\n}\n\nexport function getWeightless(data) {\n  return data.definition.weightMultiplier === 0;\n}\n\nexport function getCapacity(data) {\n\n  const capacity = (data.definition.capacityWeight !== null)\n    ? {\n      \"type\": \"weight\",\n      \"value\": data.definition.capacityWeight,\n    }\n    : {};\n\n  return capacity;\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport logger from \"../../logger.js\";\nimport { getUses, getRechargeFormula } from \"./common.js\";\n\nconst MAGICITEMS = {\n  DAILY: \"r1\",\n  SHORT_REST: \"r4\",\n  LONG_REST: \"r5\",\n  CHARGE_TYPE_WHOLE_ITEM: \"c1\",\n  CHARGE_TYPE_PER_SPELL: \"c2\",\n  NUMERIC_RECHARGE: \"t1\",\n  FORMULA_RECHARGE: \"t2\",\n  DestroyCheckAlways: \"d1\",\n  DestroyCheck1D20: \"d2\",\n};\n\n// const ITEM_CONSUME_CORRECTIONS = {\n//   \"Staff of Defense\": 1,\n// };\n\nfunction getPerSpell(useDescription, itemDescription) {\n  if (useDescription === \"\") {\n    // some times 1 use per day items, like circlet of blasting have nothing in\n    // the limited use description, fall back to this\n    let limitedUse = /can't be used this way again until the next|can’t be used to cast that spell again until the next/i;\n    if (itemDescription.replace(\"’\", \"'\").search(limitedUse) !== -1) {\n      return true;\n    }\n    return false;\n  }\n\n  let perSpell = /each ([A-z]*|\\n*) per/i;\n  let match = perSpell.exec(useDescription);\n  if (match) {\n    match = DICTIONARY.magicitems.nums.find((num) => num.id == match[1]).value;\n  } else {\n    match = false;\n  }\n  return match;\n}\n\nfunction checkDestroy(description) {\n  let destroy = /expend the .* last charge/i;\n  if (description.search(destroy) !== -1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction checkD20Destroy(description) {\n  let destroy = /roll a d20.*destroyed/i;\n  if (description.search(destroy) !== -1) {\n    return MAGICITEMS.DestroyCheck1D20;\n  } else {\n    return MAGICITEMS.DestroyCheckAlways;\n  }\n}\n\n// returns the default magicitem flags\nfunction buildMagicItemSpell(chargeType, itemSpell) {\n  let consumption = chargeType == MAGICITEMS.CHARGE_TYPE_PER_SPELL ? 1 : itemSpell.system.level;\n  let castLevel = itemSpell.system.level;\n  let upcast = itemSpell.system.level;\n\n  // Do we have charge use data on spell?\n  if (itemSpell.flags.ddbimporter.dndbeyond.spellLimitedUse) {\n    const limitedUse = itemSpell.flags.ddbimporter.dndbeyond.spellLimitedUse;\n\n    if (\n      chargeType == MAGICITEMS.CHARGE_TYPE_WHOLE_ITEM\n      && !!limitedUse.minNumberConsumed\n      && itemSpell.system.level !== 0\n    ) {\n      consumption = limitedUse.minNumberConsumed;\n      if (limitedUse.maxNumberConsumed) {\n        upcast = itemSpell.system.level - limitedUse.minNumberConsumed + limitedUse.maxNumberConsumed;\n      }\n    }\n\n    if (itemSpell.flags.ddbimporter.dndbeyond.castAtLevel) {\n      castLevel = itemSpell.flags.ddbimporter.dndbeyond.castAtLevel;\n    }\n  }\n  const spellName = foundry.utils.hasProperty(itemSpell, \"flags.ddbimporter.originalName\")\n    ? itemSpell.flags.ddbimporter.originalName\n    : itemSpell.name;\n\n  return {\n    id: \"\",\n    name: spellName,\n    img: \"\",\n    pack: \"\",\n    baseLevel: itemSpell.system.level,\n    level: castLevel,\n    consumption,\n    upcast,\n    upcastCost: 1,\n  };\n}\n\nfunction getMagicItemSpells(itemId, chargeType, itemSpells) {\n  let spells = {};\n\n  for (let spellIndex = 0, i = 0; i < itemSpells.length; i++) {\n    if (itemSpells[i].flags.ddbimporter.dndbeyond.lookupId === itemId) {\n      spells[spellIndex] = buildMagicItemSpell(chargeType, itemSpells[i]);\n      spellIndex++;\n    }\n  }\n\n  return spells;\n}\n\nfunction createDefaultMagicItemFlags() {\n  return {\n    enabled: true,\n    charges: 0,\n    chargeType: MAGICITEMS.CHARGE_TYPE_WHOLE_ITEM, // c1 charge whole item, c2 charge per spells\n    rechargeable: false,\n    recharge: \"0\", // recharge amount/formula\n    rechargeType: MAGICITEMS.FORMULA_RECHARGE, // t1 fixed amount, t2 formula\n    rechargeUnit: \"\", // r1 daily, r2 dawn, r3 sunset, r4vshort rest, r5 long rest\n    destroy: false, // destroy on depleted?\n    destroyCheck: MAGICITEMS.DestroyCheckAlways, // d1 always, 1d20\n    spells: {},\n    feats: {},\n    tables: {},\n    equipped: true,\n    attuned: false,\n    destroyFlavorText: game.modules.get(\"magicitems\")?.active\n      ? game.i18n.localize(\"MAGICITEMS.MagicItemDestroy\")\n      : \"reaches 0 charges: it crumbles into ashes and is destroyed.\",\n    sorting: \"l\"\n  };\n}\n\nfunction capitalize(word) {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n}\n\nfunction getMagicItemResetType(description) {\n  let resetType = null;\n\n  const chargeMatchFormula = /expended charges (?:\\w+|each day) at (\\w+)/i;\n  const usedAgainFormula = /(?:until|when) you (?:take|finish) a (short|long|short or long) rest/i;\n  const chargeNextDawnFormula = /can't be used this way again until the next (dawn|dusk)/i;\n\n  const chargeMatch = chargeMatchFormula.exec(description);\n  const untilMatch = usedAgainFormula.exec(description);\n  const dawnMatch = chargeNextDawnFormula.exec(description);\n\n  if (chargeMatch && chargeMatch[1] && [\"dawn\", \"dusk\"].includes(chargeMatch[1].toLowerCase())) {\n    resetType = chargeMatch[1].toLowerCase();\n  } else if (chargeMatch && chargeMatch[1] && [\"sunset\"].includes(chargeMatch[1].toLowerCase())) {\n    resetType = \"dusk\";\n  } else if (dawnMatch && dawnMatch[1]) {\n    resetType = capitalize(dawnMatch[1].toLowerCase());\n  } else if (chargeMatch && chargeMatch[1]) {\n    resetType = \"day\";\n  } else if (untilMatch && untilMatch[1]) {\n    switch (untilMatch[1]) {\n      case \"short or long\":\n        resetType = \"sr\";\n        break;\n      default:\n        resetType = capitalize(`${untilMatch[1]}Rest`);\n    }\n  }\n\n  // console.warn(\"reset type\", {\n  //   chargeMatch,\n  //   untilMatch,\n  //   dawnMatch,\n  //   description,\n  //   resetType,\n  // });\n\n  return resetType;\n}\n\n//\n// Attempts to parse information from ddb about items to build a magicitems\n// compatible set of metadata.\n//\n// https://gitlab.com/riccisi/foundryvtt-magic-items/\n//\n// Wand of Entangle Target example\n//\n// flags\": {\n// \"magicitems\": {\n//       \"enabled\": true,\n//       \"charges\": \"7\",\n//       \"chargeType\": \"c1\",\n//       \"destroy\": true,\n//       \"destroyCheck\": \"d1\",\n//       \"rechargeable\": true,\n//       \"recharge\": \"1d6+1\",\n//       \"rechargeType\": \"t2\",\n//       \"rechargeUnit\": \"r2\",\n//       \"spells\": {\n//           \"0\": {\n//               \"id\": \"af8QUpphSZMoi2yb\",\n//               \"name\": \"Entangle\",\n//               \"pack\": \"world.spellsdndbeyond\",\n//               \"img\": \"iconizer/Spell_Nature_StrangleVines.png\",\n//               \"baseLevel\": \"1\",\n//               \"level\": \"1\",\n//               \"consumption\": \"1\",\n//               \"upcast\": \"1\",\n//               \"upcastCost\": \"1\"\n//           }\n//       }\n// \"feats\": {},\n// \"tables\": {},\n// \"equipped\": true,\n// \"attuned\": true,\n// \"destroyFlavorText\": \"reaches 0 charges: it crumbles into ashes and is destroyed.\",\n// \"sorting\": \"l\"\n\n// }\nfunction parseMagicItemsModule(data, itemSpells, isCompendiumItem) {\n  // this builds metadata for the magicitems module to use\n  // https://gitlab.com/riccisi/foundryvtt-magic-items/\n\n  if (data.definition.magic) {\n    // default magicitem data\n    let magicItem = createDefaultMagicItemFlags();\n    magicItem.equipped = data.definition.canEquip;\n\n    const resetType = getMagicItemResetType(data.definition.description);\n\n    if (isCompendiumItem) {\n      const maxUses = /has (\\d*) charges/i;\n      const maxUsesMatches = maxUses.exec(data.definition.description);\n      const limitedUse = {\n        maxUses: (maxUsesMatches && maxUsesMatches[1]) ? maxUsesMatches[1] : null,\n        numberUsed: 0,\n        resetType,\n        resetTypeDescription: data.definition.description,\n      };\n\n      if (limitedUse.maxUses || limitedUse.resetType) data.limitedUse = limitedUse;\n    }\n\n    if (data.limitedUse) {\n      // if the item is x per spell\n      const perSpell = getPerSpell(data.limitedUse.resetTypeDescription, data.definition.description);\n      if (perSpell) {\n        magicItem.charges = 1;\n        magicItem.recharge = `1`;\n        magicItem.rechargeUnit = MAGICITEMS.DAILY;\n        magicItem.rechargeable = true;\n        magicItem.rechargeType = MAGICITEMS.NUMERIC_RECHARGE;\n        magicItem.chargeType = MAGICITEMS.CHARGE_TYPE_PER_SPELL;\n      } else {\n        magicItem.charges = data.limitedUse.maxUses;\n        magicItem.recharge = getRechargeFormula(data.limitedUse.resetTypeDescription, magicItem.charges);\n\n        if (data.limitedUse.resetType) {\n          magicItem.rechargeUnit = DICTIONARY.magicitems.rechargeUnits.find(\n            (reset) => reset.id == data.limitedUse.resetType\n          )?.value ?? \"\";\n        } else {\n          magicItem.rechargeUnit = DICTIONARY.magicitems.rechargeUnits.find(\n            (reset) => reset.id == resetType\n          )?.value ?? \"\";\n        }\n        magicItem.rechargeable = true;\n      }\n\n      magicItem.destroy = checkDestroy(data.limitedUse.resetTypeDescription);\n      magicItem.destroyCheck = checkD20Destroy(data.limitedUse.resetTypeDescription);\n    }\n\n    magicItem.spells = getMagicItemSpells(data.definition.id, magicItem.chargeType, itemSpells);\n\n    return magicItem;\n  } else {\n    return {\n      enabled: false,\n    };\n  }\n}\n\nfunction parseItemsWithSpellsModule(item, data, itemSpells, isCompendiumItem) {\n\n  if (isCompendiumItem) {\n    logger.debug(\"Non character item magic item additions are not supported\");\n  }\n\n  const thisItemSpells = itemSpells.filter((spell) =>\n    spell.flags.ddbimporter.dndbeyond.lookup === \"item\"\n    && spell.flags.ddbimporter.dndbeyond.lookupId === item.flags.ddbimporter.definitionId\n  );\n\n  if (thisItemSpells.length === 0) return item;\n\n  const perSpell = getPerSpell(data.limitedUse?.resetTypeDescription ?? \"\", data.definition.description);\n\n  if (!perSpell && foundry.utils.getProperty(item, \"system.uses.value\") === null) {\n    item.system.uses = getUses(data);\n  }\n\n  const iSpells = thisItemSpells.map((itemSpell) => {\n    const isPerSpell = Number.isInteger(perSpell);\n    const chargeType = isPerSpell\n      ? MAGICITEMS.CHARGE_TYPE_PER_SPELL\n      : MAGICITEMS.CHARGE_TYPE_WHOLE_ITEM;\n\n    // c1 charge whole item, c2 charge per spells\n    const spellData = buildMagicItemSpell(chargeType, itemSpell);\n\n    const resetType = data.limitedUse?.resetType\n      ? DICTIONARY.resets.find((reset) =>\n        reset.id == data.limitedUse.resetType\n      )?.value ?? undefined\n      : undefined;\n\n    const uses = isPerSpell\n      ? { max: spellData.charges, per: resetType ?? \"\" }\n      : { max: \"\", per: \"\" };\n    const consume = isPerSpell\n      ? { amount: null }\n      : { amount: spellData.consumption };\n\n    const save = foundry.utils.getProperty(itemSpell, \"flags.ddbimporter.dndbeyond.overrideDC\")\n      ? { scaling: \"flat\", dc: itemSpell.flags.ddbimporter.dndbeyond?.dc }\n      : { scaling: \"spell\" };\n    const preparation = isPerSpell\n      ? { mode: \"atwill\" }\n      : undefined;\n\n    return {\n      uuid: \"\",\n      changes: {\n        system: {\n          level: Number.parseInt(spellData.level),\n          uses,\n          consume,\n          save,\n          preparation,\n        },\n      },\n      flags: {\n        ddbimporter: {\n          spellName: spellData.name,\n        },\n        // \"items-with-spells-5e\": {\n        //   \"parent-item\": \"\",\n        // },\n      },\n    };\n  });\n\n  item.flags[\"items-with-spells-5e\"] = {\n    \"item-spells\": iSpells,\n  };\n  return item;\n}\n\nexport function basicMagicItem(item, data, itemSpells, isCompendiumItem) {\n  if (!data.definition.magic) return item;\n\n  if (isCompendiumItem) {\n    const maxUses = /has (\\d*) charges/i;\n    const maxUsesMatches = maxUses.exec(data.definition.description);\n    const limitedUse = {\n      maxUses: (maxUsesMatches && maxUsesMatches[1]) ? maxUsesMatches[1] : null,\n      numberUsed: 0,\n      resetType: getMagicItemResetType(data.definition.description),\n      resetTypeDescription: data.definition.description,\n    };\n\n    if (limitedUse.maxUses) {\n      foundry.utils.setProperty(item, \"system.uses.value\", parseInt(limitedUse.maxUses));\n      foundry.utils.setProperty(item, \"system.uses.max\", `${limitedUse.maxUses}`);\n      foundry.utils.setProperty(item, \"system.uses.per\", (limitedUse.resetType ?? \"charges\"));\n\n      const recharge = getRechargeFormula(data.definition.description, limitedUse.maxUses);\n      foundry.utils.setProperty(item, \"system.uses.recovery\", recharge);\n    }\n    return item;\n  }\n\n\n  // if the item is x per spell\n  const isPerSpell = data.limitedUse\n    ? getPerSpell(data.limitedUse.resetTypeDescription, data.definition.description)\n    : false;\n\n  const chargeType = isPerSpell\n    ? MAGICITEMS.CHARGE_TYPE_PER_SPELL\n    : MAGICITEMS.CHARGE_TYPE_WHOLE_ITEM;\n\n  itemSpells.forEach((spell) => {\n    const isItemSpell = spell.flags.ddbimporter.dndbeyond.lookup === \"item\"\n      && spell.flags.ddbimporter.dndbeyond.lookupId === item.flags.ddbimporter.definitionId;\n    if (isItemSpell) {\n      logger.debug(`Adding spell ${spell.name} to item ${item.name}`);\n      const spellData = buildMagicItemSpell(chargeType, spell);\n\n      const resetType = data.limitedUse?.resetType\n        ? DICTIONARY.resets.find((reset) =>\n          reset.id == data.limitedUse.resetType\n        )?.value ?? undefined\n        : undefined;\n\n      const uses = isPerSpell\n        ? { max: spellData.charges, per: resetType ?? \"\" }\n        : { max: \"\", per: \"\" };\n      const consume = isPerSpell\n        ? { amount: null }\n        : {\n          amount: spellData.consumption,\n          type: \"charges\",\n          target: item._id,\n        };\n\n      foundry.utils.setProperty(spell, \"flags.ddbimporter.isItemCharge\", !isPerSpell);\n\n      const save = foundry.utils.getProperty(spell, \"flags.ddbimporter.dndbeyond.overrideDC\")\n        ? { scaling: \"flat\", dc: spell.flags.ddbimporter.dndbeyond?.dc }\n        : { scaling: \"spell\" };\n\n      // console.warn(\"Setting Magic Item Properties for Spell\", {\n      //   level: spellData.level,\n      //   uses,\n      //   consume,\n      //   save,\n      // });\n\n      foundry.utils.setProperty(spell, \"system.level\", Number.parseInt(spellData.level));\n      foundry.utils.setProperty(spell, \"system.uses\", uses);\n      foundry.utils.setProperty(spell, \"system.consume\", consume);\n      foundry.utils.setProperty(spell, \"system.save\", save);\n    }\n\n  });\n\n  return item;\n}\n\nexport function parseMagicItem(item, data, itemSpells, isCompendiumItem = false) {\n  if (game.modules.get(\"magicitems\")?.active || game.modules.get(\"magic-items-2\")?.active) {\n    item.flags.magicitems = parseMagicItemsModule(data, itemSpells, !isCompendiumItem, true);\n  } else if (game.modules.get(\"items-with-spells-5e\")?.active) {\n    item = parseItemsWithSpellsModule(item, data, itemSpells, !isCompendiumItem);\n  } else {\n    logger.debug(`$Item.name} Parsing basic magic item data`, {\n      item: foundry.utils.deepClone(item),\n      data,\n      itemSpells,\n      isCompendiumItem,\n    });\n    item = basicMagicItem(item, data, itemSpells, isCompendiumItem);\n\n    const uses = foundry.utils.getProperty(item, \"system.uses.value\");\n    const activation = foundry.utils.getProperty(item, \"system.activation.type\");\n\n    if (activation === \"\" && uses > 0) {\n      item.system.activation.type = \"special\";\n    }\n  }\n\n  // console.warn(`Parsed ${item.name}`, {\n  //   item: deepClone(item),\n  //   itemSpells: deepClone(itemSpells),\n  // });\n\n  return item;\n}\n","import DDBHelper from \"../../lib/DDBHelper.js\";\nimport logger from \"../../logger.js\";\n\n\nfunction getInfusionItemMap(ddb, item) {\n  if (!ddb.infusions?.item) return undefined;\n  return ddb.infusions.item.find((mapping) =>\n    mapping.itemId === item.flags.ddbimporter.definitionId\n    && mapping.inventoryMappingId === item.flags.ddbimporter.id\n    && mapping.itemTypeId === item.flags.ddbimporter.definitionEntityTypeId\n  );\n}\n\nfunction getInfusionDetail(ddb, definitionKey) {\n  if (!ddb.infusions?.infusions?.definitionData) return undefined;\n  return ddb.infusions.infusions.definitionData.find(\n    (infusion) => infusion.definitionKey === definitionKey\n  );\n}\n\nexport function parseInfusion(ddb, character, foundryItem, ddbItem) {\n  // get item mapping\n  const infusionItemMap = getInfusionItemMap(ddb, foundryItem);\n  foundryItem.flags.infusions = { maps: [], applied: [], infused: false };\n\n  const infusionDetail = infusionItemMap\n    ? getInfusionDetail(ddb, infusionItemMap.definitionKey)\n    : undefined;\n\n  if (infusionItemMap && infusionDetail) {\n    logger.debug(`Infusion detected for ${foundryItem.name}`);\n\n    // add infusion flags\n    foundryItem.flags.infusions.infused = true;\n\n    // if item is loot, lets move it to equipment/trinket so effects will apply\n    if (foundryItem.type === \"loot\") {\n      foundryItem.type = \"equipment\";\n      foundryItem.system.armor = {\n        type: \"trinket\",\n        value: 10,\n        dex: null,\n      };\n      // infusions will over ride the can equip status, so just check for equipped\n      foundryItem.system.equipped = ddbItem.equipped;\n    }\n\n    // check to see if we need to fiddle attack modifiers on infused weapons\n    // this still needs to be moved to an enchantment effect\n    if (foundryItem.type === \"weapon\") {\n      const intSwap = DDBHelper.filterBaseModifiers(ddb, \"bonus\", { subType: \"magic-item-attack-with-intelligence\" }).length > 0;\n      if (intSwap) {\n        const characterAbilities = character.flags.ddbimporter.dndbeyond.effectAbilities;\n        const mockAbility = foundry.utils.getProperty(foundryItem, \"flags.ddbimporter.dndbeyond.ability\");\n        if (characterAbilities.int.value > characterAbilities[mockAbility].value) {\n          foundryItem.system.ability = \"int\";\n        }\n      }\n    }\n  } else if (infusionItemMap && !infusionDetail) {\n    logger.warn(`${foundryItem.name} marked as infused but no infusion info found`);\n  }\n  return foundryItem;\n\n}\n\n\nexport async function createInfusedItems(ddb, actor) {\n  if (!ddb.infusions?.item || !ddb.infusions?.infusions?.definitionData) return;\n\n  const rollData = actor.getRollData();\n\n  for (const item of actor.getEmbeddedCollection(\"Item\")) {\n\n    const infusedItem = ddb.infusions.item.find((mapping) =>\n      mapping.itemId === item.flags?.ddbimporter?.definitionId\n      && mapping.inventoryMappingId === item.flags?.ddbimporter?.id\n      && mapping.itemTypeId === item.flags?.ddbimporter?.definitionEntityTypeId\n    );\n    if (infusedItem) {\n      // add infused item effect\n      const infusionFeature = actor.items.find((i) =>\n        foundry.utils.getProperty(i, \"flags.ddbimporter.dndbeyond.defintionKey\") === infusedItem.definitionKey\n      );\n      if (infusionFeature) {\n        const infusionEffectCount = infusionFeature.effects.size;\n        const infusionEffects = infusionFeature.getEmbeddedCollection(\"ActiveEffect\")\n          .filter((e) => {\n            const enchantment = foundry.utils.getProperty(e, \"flags.dnd5e.type\") === \"enchantment\";\n            if (!enchantment) return false;\n            if (infusionEffectCount === 1) return true;\n            const enchantmentLevel = foundry.utils.getProperty(e, \"flags.dnd5e.enchantment.level\");\n            const appropriateLevel = (rollData.classes.artificer?.levels ?? 0) >= enchantmentLevel.min\n              && ((rollData.classes.artificer?.levels ?? 0) <= enchantmentLevel.max || enchantmentLevel.max === null);\n            return appropriateLevel;\n          });\n        if (infusionEffects) {\n          // eslint-disable-next-line max-depth\n          for (const infusionEffect of infusionEffects) {\n            const effectData = infusionEffect.toObject();\n            effectData.origin = infusionFeature.uuid;\n            const applied = await ActiveEffect.create(effectData, {\n              parent: item,\n              keepOrigin: true,\n            });\n            logger.debug(`Applied infusion effect from ${infusionFeature.name} to ${item.name}`, {\n              effect: effectData,\n              applied,\n            });\n          }\n        }\n      }\n    }\n  }\n\n}\n","import {\n  baseItemEffect,\n} from \"./effects.js\";\n\nimport DDBMacros from \"./DDBMacros.js\";\n\nasync function woundingWeaponEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n\n  effect.transfer = false;\n  effect.flags.dae.macroRepeat = \"startEveryTurn\";\n  effect.flags.dae.stackable = \"count\";\n  effect.flags.dae.transfer = false;\n  effect.duration = {\n    startTime: null,\n    seconds: null,\n    rounds: 400,\n    turns: null,\n    startRound: null,\n    startTurn: null,\n  };\n\n  await DDBMacros.setItemMacroFlag(document, \"item\", \"wounding.js\");\n  effect.changes.push(DDBMacros.generateMacroChange({ macroType: \"item\", macroName: \"wounding.js\" }));\n  document.effects.push(effect);\n\n  return document;\n}\n\nasync function lifeStealingEffect(document) {\n  let effect = baseItemEffect(document, document.name);\n  await DDBMacros.setItemMacroFlag(document, \"item\", \"lifeStealing.js\");\n  DDBMacros.setMidiOnUseMacroFlag(document, \"item\", \"lifeStealing.js\", [\"postActiveEffects\"]);\n  document.effects.push(effect);\n  return document;\n}\n\nconst RESTRICTION_MAPPINGS = [\n  {\n    // name: \"Extra Critical\",\n    ddb: [\"20 on the Attack Roll\"],\n    restriction: `@workflow.diceRoll === 20`,\n  },\n  {\n    name: \"of Life Stealing\",\n    ddb: [\"20 on the Attack Roll, Not Construct or Undead\"],\n    restriction: `@workflow.diceRoll === 20 && !([\"construct\", \"undead\"].includes(\"@raceOrType\"))`,\n    effect: true,\n    effectFunction: lifeStealingEffect,\n  },\n  {\n    name: \"Bloodaxe\",\n    ddb: [\"to creatures that aren’t constructs or undead\"],\n    restriction: `!([\"construct\", \"undead\"].includes(\"@raceOrType\"))`,\n  },\n  {\n    // name: \"Plants\",\n    ddb: [\"against a plant (an ordinary plant or a creature with the Plant type) or a wooden object that isn’t being worn or carried\"],\n    restriction: `[\"plant\"].includes(\"@raceOrType\")`\n  },\n  //  \"Javelin of Lightning\"\n  {\n    name: \"Javelin of Lightning\",\n    ddb: [\"On Hit or DC 13 Dexterity Save for Half Damage\"],\n    restriction: ``,\n    save: true,\n    macro: true,\n  },\n  {\n    name: \"Zariel\",\n    ddb: [\"3d10 radiant if you’re wielding the weapon with two hands\"],\n    restriction: ``,\n  },\n  {\n    // name: \"Undead\",\n    ddb: [\n      \"Against Undead Targets\",\n      \"Against undead targets.\",\n      \"(Against undead)\",\n      \"An undead creature hit by the weapon takes an extra 1d8 radiant damage.\"\n    ],\n    restriction: `[\"undead\"].includes(\"@raceOrType\")`,\n  },\n  {\n    // name: \"Dragon\",\n    ddb: [\"When you hit a dragon with this weapon\"],\n    restriction: `[\"dragon\"].includes(\"@raceOrType\")`,\n  },\n  {\n    name: \"of Wounding\",\n    ddb: [\"Per Wound, DC 15 Constitution Save Ends Effect\"],\n    restriction: \"\",\n    effect: true,\n    effectFunction: woundingWeaponEffect,\n  },\n  {\n    name: \"Markovia\",\n    ddb: [\"Against Fiends or Undead\", \"Against a fiend or an undead\"],\n    restriction: `[\"fiend\", \"undead\"].includes(\"@raceOrType\")`,\n  },\n  {\n    name: \"Riteknife\",\n    ddb: [\"For each soul imprisoned in the dagger\"],\n    restriction: `false`,\n  },\n  {\n    name: \"Oathbow\",\n    ddb: [\"Against Sworn Enemy\"],\n    restriction: `false`,\n  },\n  {\n    name: \"Matalotok\",\n    ddb: [\"30-foot-radius sphere\"],\n    restriction: `false`,\n  },\n  {\n    name: \"Mastix\",\n    ddb: [\"regain hit points equal to half the amount of necrotic damage dealt\"],\n    restriction: \"\",\n    macro: true,\n  },\n  {\n    name: \"Mace of Disruption\",\n    ddb: [\"Special\"],\n    nameMatch: \"Mace of Disruption\",\n    restriction: `[\"fiend\", \"undead\"].includes(\"@raceOrType\")`,\n  },\n  {\n    name: \"Gurt\",\n    ddb: [\"plus an extra 2d12 slashing damage if the target is human\"],\n    restriction: `[\"human\"].includes(\"@raceOrType\")`,\n  },\n  {\n    name: \"Grovelthrash\",\n    ddb: [\"If you do, you take 1d6 psychic damage\"],\n    restriction: `false`,\n  },\n  {\n    // name: \"Giants\",\n    ddb: [\"Against Giants\"],\n    restriction: `[\"giant\"].includes(\"@raceOrType\")`,\n  },\n  {\n    name: \"Flame Tongue\",\n    ddb: [\"While Flaming\"],\n    restriction: \"\",\n    removeOther: true,\n    damageParts: [[\"2d6[fire]\", \"fire\"]],\n    replaceFlavor: \"Extra damage only whilst flaming\",\n  },\n  {\n    name: \"Dwarven Thrower\",\n    ddb: [\"On hit with a ranged attack against Giants\", \"When Thrown (+2d8 against Giants)\"],\n    restriction: `[\"giant\"].includes(\"@raceOrType\")`,\n  },\n  {\n    name: \"Dragon's Wrath\",\n    ddb: [\n      \"On a hit, the weapon deals an extra damage of the type dealt by the dragon’s breath weapon. (Wakened)\",\n      \"On a hit, the weapon deals an extra damage of the type dealt by the dragon’s breath weapon. (Stirring)\",\n      \"On a hit, the weapon deals an extra damage of the type dealt by the dragon’s breath weapon. (Ascendant)\",\n\n    ],\n    restriction: ``,\n  },\n  {\n    name: \"Dagger of Venom\",\n    ddb: [\"DC 15 Constitution Save Negates\"],\n    restriction: `false`,\n  },\n  {\n    name: \"Yagas Pestle\",\n    ddb: [\"Per Charge (Max 3)\"],\n    restriction: `false`,\n  },\n];\n\nexport async function addRestrictionFlags(document, addEffects) {\n\n  const restrictions = foundry.utils.getProperty(document, \"flags.ddbimporter.dndbeyond.restrictions\");\n  if (!restrictions || restrictions.length == 0) return document;\n  const name = document.flags.ddbimporter?.originalName ?? document.name;\n\n  const nameMatch = RESTRICTION_MAPPINGS.find((r) => {\n    return r.name && name.toLowerCase()[0].includes(r.name.toLowerCase());\n  });\n  const restriction = nameMatch\n    ? nameMatch\n    : RESTRICTION_MAPPINGS.find((r) => {\n      return r.ddb.map((m) => m.toLowerCase())[0].includes(restrictions[0].toLowerCase());\n    });\n\n  if (restriction) {\n    if (restriction.removeOther) {\n      foundry.utils.setProperty(document, \"system.formula\", \"\");\n    }\n    if (restriction.replaceFlavor) {\n      foundry.utils.setProperty(document, \"system.chatFlavor\", restriction.replaceFlavor);\n    }\n    if (restriction.damageParts) {\n      document.system.damage.parts.push(...restriction.damageParts);\n    }\n\n    if (!game.modules.get(\"midi-qol\")?.active || !addEffects) return document;\n\n    let restrictionText = restriction.restriction;\n\n    if (document.system.attunement > 0 && ![\"\", \"false\"].includes(restriction.restriction)) {\n      restrictionText += ` && @item.attunement !== 1`;\n    }\n    // foundry.utils.setProperty(document, \"system.activation.condition\", restrictionText);\n    foundry.utils.setProperty(document, \"flags.midi-qol.effectCondition\", restrictionText);\n\n    if (restriction.effectRestrictionActivation) {\n      foundry.utils.setProperty(document, \"flags.midi-qol.effectActivation\", true);\n    }\n\n    if (restriction.effect) {\n      document = await restriction.effectFunction(document);\n    }\n  }\n\n  // effects needed for:\n  // mace of disruption\n  // oathbow\n  // sharpness - needs light effect\n  // sunswords\n  // \"Javelin of Lightning\"\n  // dwarven thrower\n  // axe of dwarfish lords\n\n  return document;\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport { getItemRarity, getEquipped, getUses, getWeaponProficient, getMagicalBonus, getSingleItemWeight, getQuantity, getDescription } from \"./common.js\";\n\n/**\n * Gets the DND5E weapontype (simpleM, martialR etc.) as string\n * Supported Types only: Simple/Martial Melee/Ranged and Ammunition (Firearms in D&DBeyond)\n * @param {obj} data item data\n */\nfunction getWeaponType(data) {\n  const type = DICTIONARY.weapon.weaponType.find(\n    (type) => type.categoryId === data.definition.categoryId\n  );\n  const range = DICTIONARY.weapon.weaponRange.find(\n    (type) => type.attackType === data.definition.attackType\n  );\n\n  if (type && range) {\n    return `${type.value}${range.value}`;\n  } else {\n    return \"simpleM\";\n  }\n}\n\n/**\n * Gets the weapons's properties (Finesse, Reach, Heavy etc.)\n * @param {obj} data Item data\n */\nfunction getProperties(data) {\n  return DICTIONARY.weapon.properties\n    .filter((property) => {\n      // if it is a weapon property\n      if (data.definition.properties\n        && Array.isArray(data.definition.properties)\n        && data.definition.properties.some((prop) => prop.name === property.name)\n      ) {\n        return true;\n      }\n      // if it is a granted property\n      if (data.definition.grantedModifiers\n        && Array.isArray(data.definition.grantedModifiers)\n        && data.definition.grantedModifiers.some((prop) =>\n          prop.type === \"weapon-property\"\n          && prop.friendlySubtypeName === property.name\n        )\n      ) {\n        return true;\n      }\n      // else not a property\n      return false;\n    })\n    .map((property) => property.value);\n}\n\n/**\n * Gets the range(s) of a given weapon\n */\nfunction getRange(data, weaponProperties) {\n  // range: { value: null, long: null, units: '' },\n  // sometimes reach weapons have their range set as 5. it's not clear why.\n  const shortRange = data.definition.range ? data.definition.range : 5;\n  const reach = weaponProperties.includes(\"rch\") && data.definition.range == 5 ? 5 : 0;\n  return {\n    value: shortRange + reach,\n    long: (data.definition.longRange && data.definition.longRange != data.definition.range)\n      ? data.definition.longRange + reach\n      : \"\",\n    units: \"ft\",\n  };\n};\n\n/**\n * Gets the ability which the to hit modifier is baed on\n * Melee: STR\n * Ranged: DEX\n * Finesse: STR || DEX\n * Thrown: STR, unless Finesse, then STR || DEX\n * @param {obj} data item data\n * @param {obj} weaponProperties weapon properties\n * @param {obj} weaponRange weapon range information\n * @param {obj} abilities character abilities (scores)\n */\nfunction getAbility(weaponProperties, weaponRange) {\n  // finesse weapons can choose freely, so we choose the higher one\n  if (weaponProperties.includes(\"fin\")) {\n    return null;\n  }\n\n  // thrown, but not finesse weapon: STR\n  if (weaponProperties.includes(\"thr\")) {\n    return \"str\";\n  }\n\n  // if it's a ranged weapon, and not a reach weapon (long = 10 (?))\n  if (weaponRange.long > 5 && !weaponProperties.includes(\"rch\")) {\n    return \"dex\";\n  }\n  // the default is STR\n  return null;\n}\n\n/**\n * Searches for a magical attack bonus granted by this weapon\n * @param {obj} data item data\n * @param {obj} flags\n */\nfunction getWeaponMagicalBonus(data, flags, returnZero = false) {\n  const bonus = getMagicalBonus(data, returnZero);\n  if (flags.classFeatures.includes(\"Improved Pact Weapon\") && bonus === 0) {\n    return 1;\n  } else {\n    return bonus;\n  }\n};\n\n/**\n *\n * @param {obj} data item data\n * @param {obj} flags\n * /* damage: { parts: [], versatile: '' }, * /\n */\nfunction getDamage(data, flags) {\n  // const magicalDamageBonus = getWeaponMagicalBonus(data, flags, true);\n  // we can safely make these assumptions about GWF and Dueling because the\n  // flags are only added for melee attacks\n  const greatWeaponFighting = flags.classFeatures.includes(\"greatWeaponFighting\") ? \"r<=2\" : \"\";\n  const offHand = flags.classFeatures.includes(\"OffHand\");\n  const twoWeapon = flags.classFeatures.includes(\"Two-Weapon Fighting\");\n  const twoHanded = data.definition.properties.find((property) => property.name === \"Two-Handed\");\n  const mod = (offHand && !twoWeapon) ? \"\" : \" + @mod\";\n\n  const baseDamageTagData = DDBHelper.getDamageTagForItem(data);\n  const damageTag = baseDamageTagData.damageTag;\n  const damageType = baseDamageTagData.damageType;\n\n  const versatile = data.definition.properties\n    .filter((property) => property.name === \"Versatile\")\n    .map((versatile) => {\n      if (versatile && versatile.notes) {\n        return (\n          utils.parseDiceString(versatile.notes, null, damageTag, greatWeaponFighting).diceString + mod\n        );\n      } else {\n        return \"\";\n      }\n    })[0];\n\n  let parts = [];\n\n  // if we have greatweapon fighting style and this is two handed, add the roll tweak\n  // else if we have duelling we add the bonus here (assumption- if you have dueling\n  // you're going to use it! (DDB also makes this assumption))\n  const fightingStyleDiceMod = twoHanded ? greatWeaponFighting : \"\";\n\n  // if we are a martial artist and the weapon is eligable we may need to use a bigger dice type.\n  // this martial arts die info is addedd to the weapon flags before parse weapon is called\n  const martialArtsDie = flags.martialArtsDie;\n\n  if (Number.isInteger(data.definition.fixedDamage)) {\n    parts.push([\n      utils.parseDiceString(data.definition.fixedDamage, `${mod}`, damageTag, fightingStyleDiceMod)\n        .diceString,\n      damageType,\n    ]);\n  } else if (data.definition.damage && data.definition.damage.diceString && damageType) {\n    let diceString = data.definition.damage.diceString;\n    if (martialArtsDie.diceValue && data.definition.damage.diceValue && martialArtsDie.diceValue > data.definition.damage.diceValue) {\n      diceString = martialArtsDie.diceString;\n    }\n\n    // if there is a magical damage bonus, it probably should only be included into the first damage part.\n    parts.push([\n      utils.parseDiceString(diceString, `${mod}`, damageTag, fightingStyleDiceMod)\n        .diceString,\n      damageType,\n    ]);\n  }\n\n  // additional damage parts with no restrictions\n  data.definition.grantedModifiers\n    .filter((mod) => mod.type === \"damage\" && (!mod.restriction || mod.restriction === \"\"))\n    .forEach((mod) => {\n      const die = mod.dice ? mod.dice : mod.die ? mod.die : undefined;\n      const damagePart = die ? die.diceString : mod.value;\n      if (damagePart) {\n        const subDamageTagData = DDBHelper.getDamageTagForMod(mod);\n        const damageParsed = utils.parseDiceString(damagePart, \"\", subDamageTagData.damageTag).diceString;\n        parts.push([`${damageParsed}`, subDamageTagData.damageType]);\n      }\n    });\n\n\n  let chatFlavors = [];\n  let otherFormulas = [];\n  let restrictions = [];\n  // loop over restricted damage types\n  // we do this so we can either break this out for midi users\n  data.definition.grantedModifiers\n    .filter((mod) => mod.type === \"damage\" && mod.restriction && mod.restriction !== \"\")\n    .forEach((mod) => {\n      const die = mod.dice ? mod.dice : mod.die ? mod.die : undefined;\n      const damagePart = die ? die.diceString : `${mod.value}`;\n      if (damagePart) {\n        const subDamageTagData = DDBHelper.getDamageTagForMod(mod);\n        const damageParsed = utils.parseDiceString(damagePart, \"\", subDamageTagData.damageTag).diceString;\n        restrictions.push(mod.restriction);\n        otherFormulas.push(damageParsed);\n        chatFlavors.push(`[${damagePart}] ${mod.restriction}`);\n      }\n    });\n\n  const otherFormula = otherFormulas.join(\" + \");\n  const chatFlavor = chatFlavors.length === 0 ? \"\" : `Roll Other damage: ${chatFlavors.join(\", \")}`;\n\n  // add damage modifiers from other sources like improved divine smite\n  if (flags.damage.parts) {\n    flags.damage.parts.forEach((part) => {\n      parts.push(part);\n    });\n  }\n\n  const result = {\n    parts,\n    versatile,\n  };\n\n  return [result, otherFormula, chatFlavor, restrictions];\n}\n\nfunction getActionType(data) {\n  if (data.definition.attackType === 1) {\n    return \"mwak\";\n  } else {\n    return \"rwak\";\n  }\n}\n\nexport default function parseWeapon(data, character, flags) {\n  let weapon = {\n    _id: foundry.utils.randomID(),\n    name: data.definition.name,\n    type: \"weapon\",\n    system: utils.getTemplate(\"weapon\"),\n    flags: {\n      ddbimporter: {\n        dndbeyond: {\n          type: data.definition.type,\n          damage: flags.damage,\n          classFeatures: flags.classFeatures,\n        },\n      },\n    },\n  };\n\n  const characterAbilities = character.flags.ddbimporter.dndbeyond.effectAbilities;\n  const characterProficiencies = character.flags.ddbimporter.dndbeyond.proficienciesIncludingEffects;\n\n  weapon.system.type.value = getWeaponType(data);\n  weapon.system.properties = getProperties(data);\n\n  const proficientFeatures = [\"pactWeapon\", \"kensaiWeapon\"];\n  if (flags.classFeatures.some((feat) => proficientFeatures.includes(feat))) {\n    weapon.system.proficient = true;\n  } else {\n    weapon.system.proficient = getWeaponProficient(data, weapon.system.type.value, characterProficiencies);\n  }\n\n  weapon.system.description = getDescription(data, weapon);\n  weapon.system.source = DDBHelper.parseSource(data.definition);\n  weapon.system.quantity = getQuantity(data);\n  weapon.system.weight = getSingleItemWeight(data);\n  weapon.system.equipped = getEquipped(data);\n  weapon.system.rarity = getItemRarity(data);\n  weapon.system.identified = true;\n  weapon.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n  if (flags.classFeatures.includes(\"OffHand\")) weapon.system.activation.type = \"bonus\";\n\n  weapon.system.range = getRange(data, weapon.system.properties);\n  weapon.system.uses = getUses(data, false);\n  // force weapons to always not use prompt\n  weapon.system.uses.prompt = false;\n  weapon.system.ability = \"\";\n  const ability = getAbility(weapon.system.properties, weapon.system.range);\n  const mockAbility = ability === null\n    ? weapon.system.properties.includes(\"fin\") ? \"dex\" : \"str\"\n    : ability;\n\n  // warlocks can use cha for their Hex weapon\n  if (flags.classFeatures.includes(\"hexWarrior\")) {\n    if (characterAbilities.cha.value >= characterAbilities[mockAbility].value) {\n      weapon.system.ability = \"cha\";\n    }\n  }\n  // kensai monks\n  if (flags.classFeatures.includes(\"kensaiWeapon\") || flags.classFeatures.includes(\"monkWeapon\")) {\n    if (characterAbilities.dex.value >= characterAbilities[mockAbility].value) {\n      weapon.system.ability = \"dex\";\n    }\n  }\n  if (flags.magicItemAttackInt && (data.definition.magic || weapon.system.properties.includes(\"mgc\"))) {\n    if (characterAbilities.int.value > characterAbilities[mockAbility].value) {\n      weapon.system.ability = \"int\";\n    }\n  }\n  const setAbility = weapon.system.ability && weapon.system.ability !== \"\"\n    ? weapon.system.ability\n    : mockAbility;\n  foundry.utils.setProperty(weapon, \"flags.ddbimporter.dndbeyond.ability\", setAbility);\n\n  weapon.system.actionType = getActionType(data);\n  const magicalBonus = getWeaponMagicalBonus(data, flags, true);\n\n  if (magicalBonus > 0) {\n    weapon.system.magicalBonus = magicalBonus;\n    weapon.system.properties = utils.addToProperties(weapon.system.properties, \"mgc\");\n  }\n\n  [\n    weapon.system.damage,\n    weapon.system.formula,\n    weapon.system.chatFlavor,\n    weapon.flags.ddbimporter.dndbeyond.restrictions,\n  ] = getDamage(data, flags);\n\n\n  return weapon;\n}\n","import utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport { getItemRarity, getEquipped, getMagicalBonus, getSingleItemWeight, getQuantity, getDescription } from \"./common.js\";\n\n/**\n * Gets the range(s) of a given weapon\n */\nfunction getRange(data) {\n  // range: { value: null, long: null, units: '' },\n  return {\n    value: data.definition.range ? data.definition.range : null,\n    long: data.definition.longRange ? data.definition.longRange : null,\n    units: (data.definition.range || data.definition.range) ? \"ft.\" : \"\",\n  };\n}\n\n/**\n *\n * @param {obj} data item data\n * @param {obj} weaponProperties weapon properties\n * /* damage: { parts: [], versatile: '' }, * /\n */\nlet getDamage = (data, magicalDamageBonus) => {\n  let parts = [];\n\n  // first damage part\n  // blowguns and other weapons rely on ammunition that provides the damage parts\n  if (data.definition.damage && data.definition.damage.diceString && data.definition.damageType) {\n    // if there is a magical damage bonus, it probably should only be included into the first damage part.\n    parts.push([\n      utils.parseDiceString(data.definition.damage.diceString + `+${magicalDamageBonus}`).diceString,\n      data.definition.damageType.toLowerCase(),\n    ]);\n  }\n\n  // additional damage parts\n  // Note: For the time being, restricted additional bonus parts are not included in the damage\n  //       The Saving Throw Freature within Foundry is not fully implemented yet, to this will/might change\n  data.definition.grantedModifiers\n    .filter((mod) => mod.type === \"damage\" && mod.restriction && mod.restriction.length === 0)\n    .forEach((mod) => {\n      const die = mod.dice ? mod.dice : mod.die ? mod.die : undefined;\n      if (die) {\n        parts.push([die.diceString, mod.subType]);\n      } else if (mod.value) {\n        parts.push([mod.value, mod.subType]);\n      }\n    });\n\n  let result = {\n    // label: utils.parseDiceString(parts.map(part => part[0]).join(' + ')).diceString,\n    parts: parts,\n    versatile: \"\",\n  };\n\n  return result;\n};\n\nexport default function parseAmmunition(data, itemType) {\n  /**\n   * MAIN parseWeapon\n   */\n  let template = utils.getTemplate(\"consumable\");\n  let ammunition = {\n    _id: foundry.utils.randomID(),\n    name: data.definition.name,\n    type: \"consumable\",\n    system: template,\n    flags: {\n      ddbimporter: {\n        dndbeyond: {\n          type: itemType,\n        },\n      },\n    },\n  };\n\n  ammunition.system.description = getDescription(data, ammunition);\n  ammunition.system.source = DDBHelper.parseSource(data.definition);\n  ammunition.system.properties = [];\n  ammunition.system.quantity = getQuantity(data);\n  ammunition.system.weight = getSingleItemWeight(data);\n  ammunition.system.equipped = getEquipped(data);\n  ammunition.system.rarity = getItemRarity(data);\n  ammunition.system.identified = true;\n  ammunition.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n  ammunition.system.range = getRange(data);\n  ammunition.system.ability = \"\";\n  ammunition.system.actionType = \"rwak\";\n  const magicalBonus = getMagicalBonus(data, true);\n  if (magicalBonus > 0) {\n    ammunition.system.properties.push(\"mgc\");\n    ammunition.system.magicalBonus = magicalBonus;\n  }\n  ammunition.system.damage = getDamage(data);\n  ammunition.system.type.value = \"ammo\";\n\n  return ammunition;\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport { getItemRarity, getEquipped, getWeaponProficient, getMagicalBonus, getSingleItemWeight, getQuantity, getDescription, getUses } from \"./common.js\";\n\n/**\n * Gets the DND5E weapontype (simpleM, martialR etc.) as string\n * Supported Types only: Simple/Martial Melee/Ranged and Ammunition (Firearms in D&DBeyond)\n * @param {obj} data item data\n */\nfunction getWeaponType(data) {\n  const weaponBehavior = data.definition.weaponBehaviors[0];\n  const type = DICTIONARY.weapon.weaponType.find((type) => type.categoryId === weaponBehavior.categoryId);\n  const range = DICTIONARY.weapon.weaponRange.find((type) => type.attackType === weaponBehavior.attackType);\n\n  if (type && range) {\n    return `${type.value}${range.value}`;\n  } else {\n    return \"simpleM\";\n  }\n}\n\n/**\n * Gets the weapons's properties (Finesse, Reach, Heavy etc.)\n * @param {obj} data Item data\n */\nfunction getProperties(data) {\n  let weaponBehavior = data.definition.weaponBehaviors[0];\n  if (!weaponBehavior.properties || !Array.isArray(weaponBehavior.properties)) return [];\n  let result = {};\n  DICTIONARY.weapon.properties.forEach((property) => {\n    if (weaponBehavior.properties && Array.isArray(weaponBehavior.properties)) {\n      result[property.value] = weaponBehavior.properties.find((prop) => prop.name === property.name) !== undefined;\n    }\n  });\n\n  result = DICTIONARY.weapon.properties.filter((p) =>\n    weaponBehavior.properties.find((prop) => prop.name === p.name) !== undefined\n  ).map((p) => p.value);\n  return result;\n}\n\n\n/**\n * Gets the range(s) of a given weapon\n */\nfunction getRange(data) {\n  // range: { value: null, long: null, units: '' },\n  let weaponBehavior = data.definition.weaponBehaviors[0];\n  return {\n    value: weaponBehavior.range ? weaponBehavior.range : 5,\n    long: weaponBehavior.longRange ? weaponBehavior.longRange : 5,\n    units: \"ft.\",\n  };\n}\n\n/**\n * Gets the ability which the to hit modifier is baed on\n * Melee: STR\n * Ranged: DEX\n * Finesse: STR || DEX\n * Thrown: STR, unless Finesse, then STR || DEX\n * @param {obj} weaponProperties weapon properties\n * @param {obj} weaponRange weapon range information\n * @param {obj} abilities character abilities (scores)\n */\nfunction getAbility(weaponProperties, weaponRange, abilities) {\n  // finesse weapons can choose freely, so we choose the higher one\n  if (weaponProperties.fin) {\n    return abilities.str.value > abilities.dex.value ? \"str\" : \"dex\";\n  }\n\n  // thrown, but not finesse weapon: STR\n  if (weaponProperties.thr) {\n    return \"str\";\n  }\n\n  // if it's a ranged weapon, and hot a reach weapon (long = 10 (?))\n  if (weaponRange.long !== 5 && !weaponProperties.rch) {\n    return \"dex\";\n  }\n\n  // the default is STR\n  return \"str\";\n}\n\n/**\n *\n * @param {obj} data item data\n * @param {obj} weaponProperties weapon properties\n * /* damage: { parts: [], versatile: '' }, * /\n */\nfunction getDamage(data, magicalDamageBonus) {\n  let weaponBehavior = data.definition.weaponBehaviors[0];\n  let versatile = weaponBehavior.properties.find((property) => property.name === \"Versatile\");\n  if (versatile && versatile.notes) {\n    versatile = utils.parseDiceString(versatile.notes + `+${magicalDamageBonus}`).diceString;\n  } else {\n    versatile = \"\";\n  }\n\n  let parts = [];\n\n  // first damage part\n  // blowguns and other weapons rely on ammunition that provides the damage parts\n  if (weaponBehavior.damage && weaponBehavior.damage.diceString && weaponBehavior.damageType) {\n    const diceString = utils.parseDiceString(weaponBehavior.damage.diceString + `+${magicalDamageBonus}`).diceString;\n\n    parts.push([\n      `${diceString} +@mod`,\n      weaponBehavior.damageType.toLowerCase(),\n    ]);\n  }\n\n  // additional damage parts\n  data.definition.grantedModifiers\n    .filter((mod) => mod.type === \"damage\")\n    .forEach((mod) => {\n      const die = mod.dice\n        ? mod.dice\n        : mod.die\n          ? mod.die\n          : undefined;\n      if (die?.diceString) {\n        parts.push([die.diceString, mod.subType]);\n      } else if (mod.value) {\n        parts.push([`${mod.value}`, mod.subType]);\n      }\n    });\n\n  let result = {\n    // label: utils.parseDiceString(parts.map(part => part[0]).join(' + ')).diceString,\n    parts: parts,\n    versatile: versatile,\n  };\n\n  return result;\n}\n\nexport default function parseStaff(data, character) {\n  let template = utils.getTemplate(\"weapon\");\n  let staff = {\n    _id: foundry.utils.randomID(),\n    name: data.definition.name,\n    type: \"weapon\",\n    system: template,\n    flags: {\n      ddbimporter: {\n        dndbeyond: {\n          type: data.definition.type,\n        },\n      },\n    },\n  };\n\n  staff.system.type.value = getWeaponType(data);\n  staff.system.properties = getProperties(data);\n  staff.system.proficient = getWeaponProficient(data, staff.system.type.value, character.flags.ddbimporter.dndbeyond.proficienciesIncludingEffects);\n  staff.system.description = getDescription(data, staff);\n  staff.system.source = DDBHelper.parseSource(data.definition);\n  staff.system.quantity = getQuantity(data);\n  staff.system.weight = getSingleItemWeight(data);\n  staff.system.equipped = getEquipped(data);\n  staff.system.rarity = getItemRarity(data);\n  staff.system.identified = true;\n  staff.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n  staff.system.range = getRange(data);\n  staff.system.ability = getAbility(staff.system.properties, staff.system.range, character.flags.ddbimporter.dndbeyond.effectAbilities);\n  staff.system.actionType = staff.system.range.long === 5 ? \"mwak\" : \"rwak\";\n  staff.system.attack.bonus = getMagicalBonus(data);\n  staff.system.damage = getDamage(data, getMagicalBonus(data, true));\n\n  if (!game.modules.get(\"magicitems\")?.active && !game.modules.get(\"items-with-spells-5e\")?.active) {\n    staff.system.uses = getUses(data);\n  }\n\n  return staff;\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport { getItemRarity, getEquipped, getUses, getSingleItemWeight, getQuantity, getDescription, getBaseItem } from \"./common.js\";\n\n\n/**\n * Get the armor type, armor class, and max dex modifier based on the provided data, character, and flags.\n *\n * @param {Object} data - The data object containing armor information.\n * @param {Object} character - The character object.\n * @param {Object} flags - The flags object for additional options.\n * @return {Object} An object containing the armor type, combined armor class, and max dex modifier.\n */\nfunction getArmorType(data, character, flags) {\n  // get the generic armor type\n  const nameEntry = DICTIONARY.equipment.armorType.find((type) => type.name === data.definition.type);\n  const idEntry = DICTIONARY.equipment.armorType.find((type) => type.id === data.definition.armorTypeId);\n\n  // get the armor class\n  const baseArmorClass = data.definition.armorClass;\n  const bonusArmorClass = data.definition.grantedModifiers.reduce((prev, cur) => {\n    if (cur.type === \"bonus\" && cur.subType === \"armor-class\" && Number.isInteger(cur.value)) {\n      return prev + cur.value;\n    } else {\n      return prev;\n    }\n  }, 0);\n\n  // console.warn(\"datadefinition\",data.definition)\n  // console.warn(\"baseArmorClass\",baseArmorClass)\n  // console.warn(\"bonusArmorClass\",bonusArmorClass)\n\n  // get the max dex modifier (Medium Armor: 2, Heavy: 0)\n  let maxDexModifier;\n  const armorType = nameEntry !== undefined\n    ? nameEntry.value\n    : idEntry !== undefined\n      ? idEntry.value\n      : \"medium\";\n\n  switch (armorType) {\n    case \"heavy\":\n      maxDexModifier = 0;\n      break;\n    case \"medium\":\n      maxDexModifier = flags.maxMediumArmorDex ?? 2;\n      break;\n    default:\n      maxDexModifier = null;\n      break;\n  }\n\n  const itemDexMaxAdjustment = DDBHelper.getModifierSum(DDBHelper.filterModifiersOld(data.definition.grantedModifiers, \"set\", \"ac-max-dex-modifier\"), character);\n  if (maxDexModifier !== null && Number.isInteger(itemDexMaxAdjustment) && itemDexMaxAdjustment > maxDexModifier) {\n    maxDexModifier = itemDexMaxAdjustment;\n  }\n\n  return {\n    type: armorType,\n    value: baseArmorClass + bonusArmorClass,\n    dex: maxDexModifier,\n  };\n}\n\n/**\n * Gets the strength requirement to wear this armor, if any\n * @param {obj} data Item data\n */\nfunction getStrength(data) {\n  return data.definition.strengthRequirement ?? 0; // in future null might be permitted again\n}\n\n/**\n * Wearing this armor can give a disadvantage on stealth checks\n */\nfunction getStealthPenalty(data) {\n  return data.definition.stealthCheck === 2;\n}\n\n/**\n * Checks the proficiency of the character with this specific weapon\n * @param {obj} data Item data\n * @param {array} proficiencies The character's proficiencies as an array of `{ name: 'PROFICIENCYNAME' }` objects\n */\nfunction getProficient(data, proficiencies) {\n  // Proficiency in armor category (Light Armor, Shield)\n  if (proficiencies.some((proficiency) => proficiency.name === data.definition.type)) return true;\n  // Specific proficiency\n  if (proficiencies.some((proficiency) => proficiency.name === data.definition.baseArmorName)) return true;\n  return null;\n}\n\nfunction getMagicalArmorBonus(data) {\n  const boni = data.definition.grantedModifiers.filter(\n    (mod) => mod.type === \"bonus\" && mod.subType === \"armor-class\" && mod.value && mod.value !== 0\n  );\n  const bonus = boni.reduce((prev, cur) => prev + cur.value, 0);\n  return bonus;\n}\n\nexport default function parseArmor(data, character, flags) {\n  let armor = {\n    _id: foundry.utils.randomID(),\n    name: data.definition.name,\n    type: \"equipment\",\n    system: utils.getTemplate(\"armor\"),\n    flags: {\n      ddbimporter: {\n        dndbeyond: {\n          type: data.definition.type,\n        },\n      },\n    },\n  };\n\n  const armorType = getArmorType(data, character, flags);\n\n  const magicBonus = getMagicalArmorBonus(data);\n\n  armor.system.armor.value = armorType.value - magicBonus;\n  if (magicBonus > 0) {\n    armor.system.armor.magicalBonus = magicBonus;\n    armor.system.properties.push(\"mgc\");\n  }\n  armor.system.armor.dex = armorType.dex;\n  armor.system.type.value = armorType.type;\n  armor.system.type.baseItem = getBaseItem(data).baseItem;\n  armor.system.strength = getStrength(data);\n  if (getStealthPenalty(data)) armor.system.properties.push(\"stealthDisadvantage\");\n  const proficiencies = foundry.utils.getProperty(character, \"flags.ddbimporter.dndbeyond.proficienciesIncludingEffects\") ?? [];\n  armor.system.proficient = getProficient(data, proficiencies);\n  armor.system.description = getDescription(data, armor);\n  armor.system.source = DDBHelper.parseSource(data.definition);\n  armor.system.quantity = getQuantity(data);\n  armor.system.weight = getSingleItemWeight(data);\n  armor.system.equipped = getEquipped(data);\n  armor.system.rarity = getItemRarity(data);\n  armor.system.identified = true;\n  armor.system.uses = getUses(data);\n\n  if (!armor.name.toLowerCase().includes(\"armor\")) {\n    foundry.utils.setProperty(armor, \"flags.ddbimporter.dndbeyond.alternativeNames\", [`${armor.name} Armor`]);\n  }\n\n  return armor;\n}\n","import utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport {\n  getItemRarity,\n  getEquipped,\n  getUses,\n  getSingleItemWeight,\n  getQuantity,\n  getDescription,\n  getCapacity,\n  getCurrency,\n  getWeightless,\n} from \"./common.js\";\n\n\nfunction getSavingThrow(description) {\n  const save = description.match(/DC ([0-9]+) (.*?) saving throw|\\(save DC ([0-9]+)\\)/);\n  if (save && save[2]) {\n    return {\n      dc: save[1],\n      ability: save[2].toLowerCase().substr(0, 3),\n    };\n  } else {\n    return null;\n  }\n}\n\n\nfunction getActivation(description) {\n\n  let action = \"\";\n  const actionRegex = /(bonus) action|(reaction)|as (?:an|a) (action)/i;\n\n  const match = description.match(actionRegex);\n  if (match) {\n    if (match[1]) action = \"bonus\";\n    else if (match[2]) action = \"reaction\";\n    else if (match[3]) action = \"action\";\n  }\n\n  return {\n    type: action,\n    cost: action ? 1 : null,\n    condition: \"\",\n  };\n}\n\n/**\n *\n * @param {obj} ddbData item data\n * /* damage: { parts: [], versatile: '' }, * /\n */\nfunction getDamage(ddbData) {\n  const parts = [];\n\n  // additional damage parts\n  ddbData.definition.grantedModifiers\n    .filter((mod) => mod.type === \"damage\" && CONFIG.DND5E.damageTypes[mod.subType])\n    .forEach((mod) => {\n      const die = mod.dice\n        ? mod.dice\n        : mod.die\n          ? mod.die\n          : undefined;\n      if (die?.diceString) {\n        parts.push([die.diceString, mod.subType]);\n      } else if (mod.value) {\n        parts.push([`${mod.value}`, mod.subType]);\n      }\n    });\n\n  const result = {\n    parts,\n    versatile: \"\",\n  };\n\n  return result;\n}\n\n// eslint-disable-next-line complexity\nexport default function parseWonderous(ddbData, { ddbTypeOverride = null, armorType = \"trinket\" } = {}) {\n  const isContainer = ddbData.definition.isContainer;\n  const isClothingTag = ddbData.definition.tags.includes('Outerwear')\n    || ddbData.definition.tags.includes('Footwear')\n    || ddbData.definition.tags.includes('Clothing');\n  const tashasInstalled = game.modules.get(\"dnd-tashas-cauldron\")?.active;\n  const isTattoo = ddbData.definition.name.toLowerCase().includes(\"tattoo\");\n  const tattooType = tashasInstalled && isTattoo;\n\n  ddbTypeOverride = isTattoo\n    ? \"Tattoo\"\n    : isClothingTag && !isContainer ? \"Clothing\" : ddbTypeOverride;\n\n  const type = tattooType\n    ? \"dnd-tashas-cauldron.tattoo\"\n    : isContainer ? \"container\" : \"equipment\";\n  /**\n   * MAIN parseEquipment\n   */\n  let item = {\n    _id: foundry.utils.randomID(),\n    name: ddbData.definition.name,\n    type,\n    system: utils.getTemplate(type),\n    flags: {\n      ddbimporter: {\n        dndbeyond: {\n          type: ddbTypeOverride ?? ddbData.definition.type,\n        },\n      },\n    },\n  };\n\n  if (isContainer) {\n    if (ddbData.currency) item.system.currency = getCurrency(ddbData);\n    if (getWeightless(ddbData)) {\n      item.system.properties = utils.addToProperties(item.system.properties, \"weightlessContents\");\n    }\n  } else if (tattooType) {\n    item.system.type.value = ddbData.definition.name.toLowerCase().includes(\"spellwrought\")\n      ? \"spellwrought\"\n      : \"permanent\";\n    utils.addToProperties(item.system.properties, \"mgc\");\n  } else {\n    //\n    // \"armor\": {\n    // \"type\": \"trinket\",\n    // \"value\": 10,\n    // \"dex\": null\n    // }\n    item.system.armor = {\n      value: null,\n      dex: null,\n    };\n\n    item.system.type.value = isClothingTag && !isContainer ? \"clothing\" : armorType;\n\n    /* \"strength\": 0 */\n    item.system.strength = 0;\n\n    /* \"stealth\": false,*/\n    utils.removeFromProperties(item.system.properties, \"stealthDisadvantage\");\n    item.system.proficient = null;\n  }\n\n  item.system.description = getDescription(ddbData, item);\n  item.system.source = DDBHelper.parseSource(ddbData.definition);\n  item.system.quantity = getQuantity(ddbData);\n  item.system.weight = getSingleItemWeight(ddbData);\n  item.system.equipped = getEquipped(ddbData);\n  item.system.rarity = getItemRarity(ddbData);\n  item.system.identified = true;\n  item.system.uses = getUses(ddbData, true);\n  if (!isTattoo) item.system.capacity = getCapacity(ddbData);\n\n  item.system.activation = getActivation(ddbData.definition.description);\n\n  if (foundry.utils.hasProperty(item, \"system.damage\")) {\n    item.system.damage = getDamage(ddbData);\n\n    if (item.system.damage.parts.length > 0) {\n      const saveDetails = getSavingThrow(ddbData.definition.description);\n      if (saveDetails) {\n        item.system.actionType = \"save\";\n        item.system.save = { ability: saveDetails.ability, dc: saveDetails.dc, scaling: \"flat\" };\n      } else {\n        item.system.actionType = \"util\";\n      }\n      // console.warn(`Added damage to ${item.name}`, { item, damage: item.system.damage });\n    }\n    if (item.system.activation.value === \"\") item.system.activation.value = \"special\";\n  }\n\n\n  return item;\n}\n","import DICTIONARY from \"../../dictionary.js\";\nimport utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport { getItemRarity, getEquipped, getUses, getSingleItemWeight, getQuantity, getDescription } from \"./common.js\";\n\nfunction isHalfProficiencyRoundedUp(data, ab) {\n  const longAbility = DICTIONARY.character.abilities\n    .filter((ability) => ab === ability.value)\n    .map((ability) => ability.long)[0];\n  const roundUp = DDBHelper.filterBaseModifiers(data, \"half-proficiency-round-up\", { subType: `${longAbility}-ability-checks` });\n  return Array.isArray(roundUp) && roundUp.length;\n}\n\nfunction getProficiency(data, toolName, ability) {\n  const mods = DDBHelper.getAllModifiers(data, { includeExcludedEffects: true });\n  const modifiers = mods\n    .filter((modifier) => modifier.friendlySubtypeName === toolName)\n    .map((mod) => mod.type);\n\n  const toolExpertise = data.character?.classes\n    ? data.character.classes.some((cls) =>\n      cls.classFeatures.some((feature) => feature.definition.name === \"Tool Expertise\" && cls.level >= feature.definition.requiredLevel)\n    )\n      ? 2\n      : 1\n    : 1;\n\n  const halfProficiency\n    = DDBHelper.getChosenClassModifiers(data).find(\n      (modifier) =>\n        // Jack of All trades/half-rounded down\n        (modifier.type === \"half-proficiency\" && modifier.subType === \"ability-checks\")\n        // e.g. champion for specific ability checks\n        || isHalfProficiencyRoundedUp(data, ability)\n    ) !== undefined\n      ? 0.5\n      : 0;\n\n  const proficient = modifiers.includes(\"expertise\")\n    ? 2\n    : modifiers.includes(\"proficiency\")\n      ? toolExpertise\n      : halfProficiency;\n\n  return proficient;\n}\n\nexport default function parseTool(ddb, data, itemType) {\n  /**\n   * MAIN parseTool\n   */\n  let tool = {\n    _id: foundry.utils.randomID(),\n    name: data.definition.name,\n    type: \"tool\",\n    system: utils.getTemplate(\"tool\"),\n    flags: {\n      ddbimporter: {\n        dndbeyond: {\n          type: itemType,\n        },\n      },\n    },\n  };\n\n  const defaultAbility = DICTIONARY.character.proficiencies.find((prof) => prof.name === tool.name);\n\n  tool.system.ability = defaultAbility?.ability ?? \"dex\";\n  tool.system.description = getDescription(data, tool);\n  tool.system.proficient = (ddb) ? getProficiency(ddb, tool.name, tool.system.ability) : 0;\n  tool.system.source = DDBHelper.parseSource(data.definition);\n  tool.system.quantity = getQuantity(data);\n  tool.system.weight = getSingleItemWeight(data);\n  tool.system.equipped = getEquipped(data);\n  tool.system.rarity = getItemRarity(data);\n  tool.system.identified = true;\n  tool.system.uses = getUses(data);\n\n  return tool;\n}\n","import utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport { getItemRarity, getEquipped, getConsumableUses, getSingleItemWeight, getQuantity, getDescription } from \"./common.js\";\n\n\nexport function getActionType(data) {\n  if (data.definition.tags.includes(\"Healing\")) {\n    return \"heal\";\n  } else if (data.definition.tags.includes(\"Damage\")) {\n    // ranged spell attack. This is a good guess\n    return \"rsak\";\n  } else {\n    return \"other\";\n  }\n}\n\nexport function getDamage(data, actionType) {\n  let damage = { parts: [], versatile: \"\" };\n  // is this a damage potion\n  switch (actionType) {\n    case \"heal\": {\n      // healing potion\n      // we only get the first matching modifier\n      const healingModifier = data.definition.grantedModifiers.find(\n        (mod) => mod.type === \"bonus\" && mod.subType === \"hit-points\"\n      );\n      if (healingModifier) {\n        const healingDie = healingModifier.dice\n          ? healingModifier.dice\n          : healingModifier.die\n            ? healingModifier.die\n            : undefined;\n        if (healingDie?.diceString) {\n          damage.parts = [[healingDie.diceString + \"[healing] \", \"healing\"]];\n        } else if (healingModifier.fixedValue) {\n          damage.parts = [[healingModifier.fixedValue + \"[healing] \", \"healing\"]];\n        }\n      }\n      break;\n    }\n    case \"rsak\": {\n      // damage potion\n      const damageModifier = data.definition.grantedModifiers.find((mod) =>\n        mod.type === \"damage\" && (mod.dice || mod.die)\n      );\n      if (damageModifier) {\n        const damageDie = damageModifier.dice\n          ? damageModifier.dice\n          : damageModifier.die\n            ? damageModifier.die\n            : undefined;\n        if (damageDie?.diceString) {\n          damage.parts = [[damageDie.diceString + `[${damageModifier.subType}] `, damageModifier.subType]];\n        } else if (damageModifier.fixedValue) {\n          damage.parts = [[damageModifier.fixedValue + `[${damageModifier.subType}] `, damageModifier.subType]];\n        }\n      }\n      break;\n    }\n    // no default\n  }\n  return damage;\n}\n\nexport function getDuration(data) {\n  let duration = {\n    value: null,\n    units: \"\",\n  };\n\n  if (data.definition.duration) {\n    if (data.definition.duration.durationUnit !== null) {\n      duration.units = data.definition.duration.durationUnit.toLowerCase();\n    } else {\n      duration.units = data.definition.duration.durationType.toLowerCase().substring(0, 4);\n    }\n    if (data.definition.duration.durationInterval) duration.value = data.definition.duration.durationInterval;\n  } else {\n    const durationArray = [\n      { foundryUnit: \"day\", descriptionMatches: [\"day\", \"days\"] },\n      { foundryUnit: \"hour\", descriptionMatches: [\"hour\", \"hours\"] },\n      { foundryUnit: \"inst\", descriptionMatches: [\"instant\", \"instantaneous\"] },\n      { foundryUnit: \"minute\", descriptionMatches: [\"minute\", \"minutes\"] },\n      { foundryUnit: \"month\", descriptionMatches: [\"month\", \"months\"] },\n      { foundryUnit: \"perm\", descriptionMatches: [\"permanent\"] },\n      { foundryUnit: \"round\", descriptionMatches: [\"round\", \"rounds\"] },\n      // { foundryUnit: \"spec\", descriptionMatches: [null] },\n      { foundryUnit: \"turn\", descriptionMatches: [\"turn\", \"turns\"] },\n      { foundryUnit: \"year\", descriptionMatches: [\"year\", \"years\"] },\n    ];\n    // attempt to parse duration\n    const descriptionUnits = durationArray.map((unit) => unit.descriptionMatches).flat().join(\"|\");\n    const durationExpression = new RegExp(`(\\\\d*)(?:\\\\s)(${descriptionUnits})`);\n    const durationMatch = data.definition.description.match(durationExpression);\n\n    if (durationMatch) {\n      duration.units = durationArray.find((duration) => duration.descriptionMatches.includes(durationMatch[2])).foundryUnit;\n      duration.value = durationMatch[1];\n    }\n  }\n  return duration;\n}\n\n\nexport default function parseConsumable(ddbItem, { consumableTypeOverride = null, ddbTypeOverride = null } = {}) {\n  let item = {\n    _id: foundry.utils.randomID(),\n    name: ddbItem.definition.name,\n    type: \"consumable\",\n    system: utils.getTemplate(\"consumable\"),\n    flags: {\n      ddbimporter: {\n        dndbeyond: {\n          type: ddbTypeOverride ?? ddbItem.definition.type,\n        },\n      },\n    },\n  };\n\n  item.system.type.value = consumableTypeOverride?.toLowerCase() ?? ddbItem.definition.filterType.toLowerCase();\n  item.system.uses = getConsumableUses(ddbItem);\n  item.system.description = getDescription(ddbItem, item);\n  item.system.source = DDBHelper.parseSource(ddbItem.definition);\n  item.system.quantity = getQuantity(ddbItem);\n  item.system.weight = getSingleItemWeight(ddbItem);\n  item.system.equipped = getEquipped(ddbItem);\n  item.system.rarity = getItemRarity(ddbItem);\n  item.system.identified = true;\n  item.system.activation = { type: \"action\", cost: 1, condition: \"\" };\n  item.system.duration = getDuration(ddbItem);\n  item.system.actionType = getActionType(ddbItem);\n\n  if (item.system.type.value === \"potion\") {\n    item.system.damage = getDamage(ddbItem, getActionType(ddbItem));\n  } else if (item.system.type.value === \"wand\") {\n    item.system.properties.push(\"mgc\");\n  }\n\n  return item;\n}\n","import utils from \"../../lib/utils.js\";\nimport DDBHelper from \"../../lib/DDBHelper.js\";\nimport { getItemRarity, getEquipped, getConsumableUses, getSingleItemWeight, getQuantity, getDescription, getCapacity, getPrice, getCurrency, getWeightless } from \"./common.js\";\nimport DICTIONARY from \"../../dictionary.js\";\n\n\nconst LOOT_ITEM = [\n  \"Abacus\",\n  \"Barding\",\n  \"Basic Fishing Equipment\",\n  \"Bedroll\",\n  \"Bell\",\n  \"Bit and Bridle\",\n  \"Blanket\",\n  \"Block and Tackle\",\n  \"Book\",\n  \"Magnifying Glass\",\n  \"Scale, Merchant's\",\n  \"Signet Ring\",\n  \"String\",\n];\n\nconst LOOT_TYPES = {\n  \"Gemstone\": \"gem\",\n  \"Gem\": \"gem\",\n  \"Art Object\": \"art\",\n  \"Art\": \"art\",\n  \"Material\": \"material\",\n  \"Resource\": \"resource\",\n  \"Treasure\": \"treasure\",\n  \"Adventuring Gear\": \"gear\",\n  \"Junk\": \"junk\",\n};\n\nfunction getItemType(data, typeHint) {\n  let result = {\n    type: \"loot\"\n  };\n\n  if (data.definition.isContainer\n    || [\"Mount\", \"Vehicle\"].includes(data.definition.subType)\n    || [\"Vehicle\", \"Mount\"].includes(typeHint)\n  ) {\n    return {\n      type: \"container\",\n    };\n  } else if (data.definition.name.startsWith(\"Lantern,\")\n    || [\"Lamp\", \"Healer's Kit\"].includes(data.definition.name)\n  ) {\n    return {\n      type: \"consumable\",\n      consumableType: \"trinket\",\n    };\n  } else if ([\"Waterskin\"].includes(data.definition.name)) {\n    return {\n      type: \"consumable\",\n      consumableType: \"food\",\n    };\n  } else if (data.definition.name.startsWith(\"Spell Scroll:\")) {\n    return {\n      type: \"consumable\",\n      consumableType: \"scroll\",\n    };\n  }\n\n  const itemTypes = data.definition.tags && Array.isArray(data.definition.tags)\n    ? [data.definition.type.toLowerCase(), ...data.definition.tags.map((t) => t.toLowerCase())]\n    : [data.definition.type.toLowerCase()];\n\n  let itemType = itemTypes\n    .map((itemType) => {\n      if (itemType === \"container\") return \"container\";\n      if (itemType === \"consumable\") return \"consumable\";\n      return DICTIONARY.types.full.find((t) => t.indexOf(itemType) !== -1 || itemType.indexOf(t) !== -1);\n    })\n    .reduce(\n      (itemType, currentType) => (currentType !== undefined && itemType === undefined ? currentType : itemType),\n      undefined\n    );\n\n  if (!itemType && data.definition.type === \"Gear\"\n    && [\"Adventuring Gear\"].includes(data.definition.subType)\n    && !LOOT_ITEM.includes(data.definition.name)\n  ) {\n    // && data.definition.subType === \"Adventuring Gear\"\n    // && data.definition.tags.includes('Utility')\n    // && ((data.definition.tags.includes('Damage')\n    // && data.definition.tags.includes('Combat'))\n    // || data.definition.tags.includes('Healing'));\n    itemType = \"consumable\";\n  }\n\n  if (itemType) {\n    result.type = itemType;\n    if (itemType === \"consumable\") {\n      if (data.definition.name.includes('vial') || data.definition.name.includes('flask')) {\n        result.consumableType = \"potion\";\n      } else if (data.definition.name.startsWith(\"Ration\")) {\n        result.consumableType = \"food\";\n      } else {\n        result.consumableType = \"trinket\";\n      }\n    }\n  }\n\n  return result;\n}\n\nexport default function parseLoot(data, itemType) {\n  const type = getItemType(data, itemType);\n\n  let loot = {\n    _id: foundry.utils.randomID(),\n    name: data.definition.name,\n    type: type.type,\n    system: utils.getTemplate(type.type),\n    flags: {\n      ddbimporter: {\n        dndbeyond: {\n          type: itemType,\n        },\n      },\n    },\n  };\n\n  if (type.consumableType) {\n    loot.system.type.value = type.consumableType;\n    loot.system.uses = getConsumableUses(data);\n  }\n  loot.system.description = getDescription(data, loot);\n  loot.system.source = DDBHelper.parseSource(data.definition);\n  loot.system.quantity = getQuantity(data);\n  loot.system.weight = getSingleItemWeight(data);\n  loot.system.equipped = getEquipped(data);\n  loot.system.rarity = getItemRarity(data);\n  loot.system.identified = true;\n  loot.system.price = getPrice(data);\n\n  if (type.type === \"loot\") {\n    const lookup = LOOT_TYPES[itemType];\n    if (lookup) foundry.utils.setProperty(loot, \"system.type.value\", lookup);\n  } else if (type.type === \"container\") {\n    loot.system.capacity = getCapacity(data);\n    if (data.currency) loot.system.currency = getCurrency(data);\n    if (getWeightless(data)) {\n      loot.system.properties = utils.addToProperties(loot.system.properties, \"weightlessContents\");\n    }\n  }\n  return loot;\n}\n","import utils from \"../../lib/utils.js\";\nimport { getItemRarity, getEquipped, getSingleItemWeight, getQuantity, getPrice } from \"./common.js\";\n\nexport default function parseCustomItem(data) {\n  const type = data.definition.name.startsWith(\"Spell Scroll:\") ? \"consumable\" : \"loot\";\n  let customItem = {\n    name: data.definition.name,\n    type,\n    system: utils.getTemplate(type),\n    flags: {\n      ddbimporter: {\n        id: data.id,\n        custom: true,\n        dndbeyond: {\n          type: \"Custom Item\",\n        },\n      },\n    },\n  };\n\n  if (data.definition.name.startsWith(\"Spell Scroll:\")) {\n    customItem.type = \"consumable\";\n    customItem.system.type.value = \"scroll\";\n  }\n\n  let description = data.definition.description && data.definition.description !== \"null\"\n    ? data.definition.description\n    : \"\";\n  description = data.definition.notes\n    ? description + `<p><blockquote>${data.definition.notes}</blockquote></p>`\n    : description;\n\n  const chatAdd = game.settings.get(\"ddb-importer\", \"add-description-to-chat\");\n  customItem.system.description = {\n    value: description,\n    chat: chatAdd ? description : \"\",\n  };\n\n  customItem.system.source = \"Custom item\";\n  customItem.system.quantity = getQuantity(data);\n  customItem.system.weight = getSingleItemWeight(data);\n  customItem.system.price = getPrice(data);\n  customItem.system.equipped = getEquipped(data);\n  customItem.system.identified = true;\n  customItem.system.rarity = getItemRarity(data);\n\n  return customItem;\n}\n","import DDBHelper from \"../../lib/DDBHelper.js\";\nimport DICTIONARY from \"../../dictionary.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\nimport logger from \"../../logger.js\";\n\n// magic items support\nimport { parseMagicItem } from \"./magicify.js\";\n\nimport { fixItems } from \"./special.js\";\n\n// effects support\nimport { generateEffects } from \"../../effects/effects.js\";\nimport { parseInfusion } from \"./infusions.js\";\nimport { addRestrictionFlags } from \"../../effects/restrictions.js\";\nimport { midiItemEffects } from \"../../effects/specialEquipment.js\";\n\n// tables\nimport { generateTable } from \"../../lib/DDBTable.js\";\n\nimport parseWeapon from \"./weapon.js\";\nimport parseAmmunition from \"./ammunition.js\";\nimport parseStaff from \"./staves.js\";\nimport parseArmor from \"./armor.js\";\nimport parseWonderous from \"./wonderous.js\";\nimport parseTool from \"./tool.js\";\nimport parseConsumable from \"./consumable.js\";\nimport parseLoot from \"./loot.js\";\nimport parseCustomItem from \"./custom.js\";\n\nimport { getAttunement, getBaseItem, getPrice } from \"./common.js\";\nimport utils from \"../../lib/utils.js\";\n\nconst CLOTHING_ITEMS = [\n  \"Helm\",\n  \"Boots\",\n  \"Snowshoes\",\n  \"Vestments\",\n  \"Saddle, Exotic\",\n  \"Saddle, Military\",\n  \"Saddle, Pack\",\n  \"Saddle, Riding\",\n];\n\nconst EQUIPMENT_TRINKET = [\n  \"Canoe\",\n  \"Censer\",\n  \"Crowbar\",\n  \"Grenade Launcher\",\n  \"Hammer\",\n  \"Hammer, Sledge\",\n  \"Hourglass\",\n  \"Ladder (10 foot)\",\n  \"Mess Kit\",\n  \"Mirror, Steel\",\n  \"Pick, Miner's\",\n  \"Pole (10-foot)\",\n  \"Shovel\",\n  \"Signal Whistle\",\n  \"Small Knife\",\n  \"Spellbook\",\n  \"Spyglass\",\n  \"Tent, Two-Person\",\n  \"Whetstone\",\n];\n\nfunction getItemFromGearTypeIdOne(ddb, ddbItem) {\n  let item = {};\n\n  switch (ddbItem.definition.subType) {\n    case \"Potion\":\n      item = parseConsumable(ddbItem, { consumableTypeOverride: \"potion\", ddbTypeOverride: ddbItem.definition.subType });\n      break;\n    case \"Tool\":\n      item = parseTool(ddb, ddbItem, ddbItem.definition.subType);\n      break;\n    case \"Ammunition\":\n      item = parseAmmunition(ddbItem, ddbItem.definition.subType);\n      break;\n    case \"Arcane Focus\":\n    case \"Holy Symbol\":\n    case \"Druidic Focus\":\n      item = parseWonderous(ddbItem, { ddbTypeOverride: ddbItem.definition.subType });\n      break;\n    case \"Mount\":\n      item = parseLoot(ddbItem, \"Mount\");\n      break;\n    case \"Vehicle\":\n      item = parseLoot(ddbItem, \"Vehicle\");\n      break;\n    default: {\n      const isContainerTag = ddbItem.definition.tags.includes('Container');\n      const isOuterwearTag = ddbItem.definition.tags.includes('Outerwear')\n        || ddbItem.definition.tags.includes('Footwear');\n      if ((!ddbItem.definition.isContainer && isOuterwearTag && !isContainerTag)\n        || CLOTHING_ITEMS.includes(ddbItem.definition.name)\n      ) {\n        item = parseWonderous(ddbItem, { ddbTypeOverride: \"Clothing\", armorType: \"clothing\" });\n      } else if (EQUIPMENT_TRINKET.includes(ddbItem.definition.name)) {\n        item = parseWonderous(ddbItem, { ddbTypeOverride: ddbItem.definition.subType });\n      } else {\n        item = parseLoot(ddbItem, ddbItem.definition.subType);\n      }\n    }\n  }\n  return item;\n}\n\nfunction fallbackParse(ddb, ddbItem) {\n  if (ddbItem.definition.name.includes(\" Ring\")) {\n    return parseWonderous(ddbItem, { ddbTypeOverride: \"Ring\" });\n  } else if (ddbItem.definition.subType) {\n    return parseLoot(ddbItem, ddbItem.definition.subType);\n  } else {\n    return parseLoot(ddbItem, \"Miscellaneous\");\n  }\n}\n\nfunction otherGear(ddb, ddbItem) {\n  let item = {};\n\n  switch (ddbItem.definition.gearTypeId) {\n    case 1:\n      item = getItemFromGearTypeIdOne(ddb, ddbItem);\n      break;\n    case 4:\n      item = parseLoot(ddbItem, \"Mount\");\n      break;\n    case 5:\n      item = parseConsumable(ddbItem, { consumableTypeOverride: \"potion\", ddbTypeOverride: \"Poison\" });\n      break;\n    case 6:\n      item = parseConsumable(ddbItem, { consumableTypeOverride: \"potion\", ddbTypeOverride: \"Potion\" });\n      break;\n    case 11:\n      item = parseTool(ddb, ddbItem, \"Tool\");\n      break;\n    case 12:\n    case 17:\n    case 19:\n      item = parseLoot(ddbItem, \"Vehicle\");\n      break;\n    case 16:\n      item = parseLoot(ddbItem, \"Equipment Pack\");\n      break;\n    case 18:\n      // Change to parseGemstone (consummable) ?\n      item = parseLoot(ddbItem, \"Gemstone\");\n      break;\n    default:\n      item = fallbackParse(ddb, ddbItem);\n      logger.warn(\"Other Gear type missing from \" + ddbItem.definition.name, ddbItem);\n  }\n  return item;\n}\n\nfunction addExtraDDBFlags(ddbItem, item) {\n  item.flags.ddbimporter['id'] = ddbItem.id;\n  item.flags.ddbimporter['entityTypeId'] = ddbItem.entityTypeId;\n\n  if (ddbItem.definition.avatarUrl) item.flags.ddbimporter.dndbeyond['avatarUrl'] = ddbItem.definition.avatarUrl.split('?')[0];\n  if (ddbItem.definition.largeAvatarUrl) item.flags.ddbimporter.dndbeyond['largeAvatarUrl'] = ddbItem.definition.largeAvatarUrl.split('?')[0];\n  if (ddbItem.definition.filterType) {\n    const filter = DICTIONARY.items.find((i) => i.filterType === ddbItem.definition.filterType);\n    if (filter) item.flags.ddbimporter.dndbeyond['filterType'] = filter.filterType;\n  }\n\n  // container info\n  if (ddbItem.containerEntityId) foundry.utils.setProperty(item, \"flags.ddbimporter.containerEntityId\", ddbItem.containerEntityId);\n  if (ddbItem.containerEntityTypeId) foundry.utils.setProperty(item, \"flags.ddbimporter.containerEntityTypeId\", ddbItem.containerEntityTypeId);\n\n  foundry.utils.setProperty(item, \"flags.ddbimporter.dndbeyond.isConsumable\", ddbItem.definition.isConsumable);\n  foundry.utils.setProperty(item, \"flags.ddbimporter.dndbeyond.isContainer\", ddbItem.definition.isContainer);\n  foundry.utils.setProperty(item, \"flags.ddbimporter.dndbeyond.isCustomItem\", ddbItem.definition.isCustomItem);\n  foundry.utils.setProperty(item, \"flags.ddbimporter.dndbeyond.isHomebrew\", ddbItem.definition.isHomebrew);\n  foundry.utils.setProperty(item, \"flags.ddbimporter.dndbeyond.isMonkWeapon\", ddbItem.definition.isMonkWeapon);\n  foundry.utils.setProperty(item, \"flags.ddbimporter.dndbeyond.isPack\", ddbItem.definition.isPack);\n  foundry.utils.setProperty(item, \"flags.ddbimporter.dndbeyond.levelInfusionGranted\", ddbItem.definition.levelInfusionGranted);\n\n  return item;\n}\n\nfunction enrichFlags(ddbItem, item) {\n  if (ddbItem.definition?.entityTypeId) item.flags.ddbimporter['definitionEntityTypeId'] = ddbItem.definition.entityTypeId;\n  if (ddbItem.definition?.id) item.flags.ddbimporter['definitionId'] = ddbItem.definition.id;\n  if (ddbItem.entityTypeId) item.flags.ddbimporter['entityTypeId'] = ddbItem.entityTypeId;\n  if (ddbItem.id) item.flags.ddbimporter['id'] = ddbItem.id;\n  if (ddbItem.definition?.tags) item.flags.ddbimporter.dndbeyond['tags'] = ddbItem.definition.tags;\n  if (ddbItem.definition?.sources) item.flags.ddbimporter.dndbeyond['sources'] = ddbItem.definition.sources;\n  if (ddbItem.definition?.stackable) item.flags.ddbimporter.dndbeyond['stackable'] = ddbItem.definition.stackable;\n}\n\n// the filter type \"Other Gear\" represents the equipment while the other filters represents the magic items in ddb\nfunction parseItem(ddb, ddbItem, character, flags) {\n  try {\n    // is it a weapon?\n    let item = {};\n    const name = ddbItem.definition.name;\n    if (ddbItem.definition.filterType) {\n      switch (ddbItem.definition.filterType) {\n        case \"Weapon\": {\n          if (ddbItem.definition.type === \"Ammunition\" || ddbItem.definition.subType === \"Ammunition\") {\n            item = parseAmmunition(ddbItem, \"Ammunition\");\n          } else {\n            item = parseWeapon(ddbItem, character, flags);\n          }\n          break;\n        }\n        case \"Armor\":\n          item = parseArmor(ddbItem, character, flags);\n          break;\n        case \"Ring\":\n        case \"Wondrous item\": {\n          if ([\n            \"bead of\",\n            \"dust of\",\n            \"elemental gem\",\n          ].some((consumablePrefix) => name.toLowerCase().startsWith(consumablePrefix.toLowerCase()))) {\n            item = parseConsumable(ddbItem, { consumableTypeOverride: \"trinket\", ddbTypeOverride: ddbItem.definition.type });\n          } else {\n            item = parseWonderous(ddbItem);\n          }\n          break;\n        }\n        case \"Scroll\":\n        case \"Wand\":\n        case \"Rod\":\n          item = parseConsumable(ddbItem);\n          break;\n        case \"Staff\":\n          item = parseStaff(ddbItem, character);\n          break;\n        case \"Potion\":\n          item = parseConsumable(ddbItem, { consumableTypeOverride: \"potion\", ddbTypeOverride: ddbItem.definition.type });\n          break;\n        case \"Other Gear\":\n          item = otherGear(ddb, ddbItem);\n          break;\n        default:\n          logger.warn(\"Item filterType not implemented for \" + ddbItem.definition.name, ddbItem);\n          break;\n      }\n    } else {\n      // try parsing it as a custom item\n      item = parseCustomItem(ddbItem);\n    }\n    const baseItem = getBaseItem(ddbItem);\n    if (baseItem.baseItem) foundry.utils.setProperty(item, \"system.type.baseItem\", baseItem.baseItem);\n    if (baseItem.toolType) foundry.utils.setProperty(item, \"system.type.value\", baseItem.toolType);\n    item.system.attuned = ddbItem.isAttuned;\n    item.system.attunement = getAttunement(ddbItem);\n    item.system.price = getPrice(ddbItem);\n    if (ddbItem.definition.magic) item.system.properties = utils.addToProperties(item.system.properties, \"mgc\");\n\n    item = addExtraDDBFlags(ddbItem, item);\n    item = DDBHelper.addCustomValues(ddb, item);\n    enrichFlags(ddbItem, item);\n\n    return item;\n  } catch (err) {\n    logger.warn(\n      `Unable to parse item: ${ddbItem.definition.name}, ${ddbItem.definition.type}/${ddbItem.definition.filterType}. ${err.message}`,\n      ddbItem\n    );\n    logger.error(err.stack);\n    return { // return empty strut\n      name: ddbItem.definition.name,\n      flags: {\n        ddbimporter: {\n          dndbeyond: {\n          },\n        },\n      },\n    };\n  }\n}\n\n\n/**\n * We get extra damage to a weapon attack here, for example Improved\n * Divine Smite\n * @param {*} data\n * @param {*} restrictions (array)\n */\nfunction getExtraDamage(ddb, restrictions) {\n  return DDBHelper.filterBaseModifiers(ddb, \"damage\", { restriction: restrictions }).map((mod) => {\n    const die = mod.dice ? mod.dice : mod.die ? mod.die : undefined;\n    if (die) {\n      return [die.diceString, mod.subType];\n    } else if (mod.value) {\n      return [mod.value, mod.subType];\n    } else {\n      return [null, null];\n    }\n  });\n}\n\nfunction isMartialArtists(classes) {\n  return classes.some((cls) => cls.classFeatures.some((feature) => feature.definition.name === \"Martial Arts\"));\n}\n\nfunction getWarlockFeatures(ddb, weapon) {\n  // Some features, notably hexblade abilities we scrape out here\n  const warlockFeatures = ddb.character.characterValues\n    .filter(\n      (characterValue) =>\n        characterValue.value\n        && characterValue.valueId == weapon.id\n        && DICTIONARY.character.characterValuesLookup.some(\n          (entry) => entry.typeId == characterValue.typeId\n        )\n    )\n    .map(\n      (characterValue) =>\n        DICTIONARY.character.characterValuesLookup.find(\n          (entry) => entry.typeId == characterValue.typeId\n        ).name\n    );\n\n  // Any Pact Weapon Features\n  const pactFeatures = ddb.character.options.class\n    .filter(\n      (option) =>\n        warlockFeatures.includes(\"pactWeapon\")\n        && option.definition.name\n        && DICTIONARY.character.pactFeatures.includes(option.definition.name)\n    )\n    .map((option) => option.definition.name);\n\n  const features = warlockFeatures.concat(pactFeatures);\n  return features;\n}\n\nfunction getMonkFeatures(ddb, weapon) {\n  const kenseiWeapon = DDBHelper.getChosenClassModifiers(ddb).some((mod) =>\n    mod.friendlySubtypeName === weapon.definition.type\n    && mod.type === \"kensei\"\n  );\n\n  const monkWeapon = DDBHelper.getChosenClassModifiers(ddb).some((mod) =>\n    mod.friendlySubtypeName === weapon.definition.type\n    && mod.type == \"monk-weapon\"\n  ) || (weapon.definition.isMonkWeapon && isMartialArtists(ddb.character.classes));\n\n  let features = [];\n\n  if (kenseiWeapon) features.push(\"kenseiWeapon\");\n  if (monkWeapon) features.push(\"monkWeapon\");\n\n  return features;\n}\n\n\nfunction getMartialArtsDie(ddb) {\n  let result = {\n    diceCount: null,\n    diceMultiplier: null,\n    diceString: null,\n    diceValue: null,\n    fixedValue: null,\n  };\n\n  const die = ddb.character.classes\n    // is a martial artist\n    .filter((cls) => cls.classFeatures.some((feature) => feature.definition.name === \"Martial Arts\"))\n    // get class features\n    .map((cls) => cls.classFeatures)\n    .flat()\n    // filter relevant features, those that are martial arts and have a levelscaling hd\n    .filter((feature) => feature.definition.name === \"Martial Arts\" && feature.levelScale && feature.levelScale.dice)\n    // get this dice object\n    .map((feature) => feature.levelScale.dice);\n\n  if (die && die.length > 0) {\n    result = die[0];\n  }\n\n  return result;\n\n}\n\nfunction getClassFeatures(ddb, weapon) {\n  const warlockFeatures = getWarlockFeatures(ddb, weapon);\n  const monkFeatures = getMonkFeatures(ddb, weapon);\n  return warlockFeatures.concat(monkFeatures);\n}\n\nDDBCharacter.prototype.getItemFlags = function getItemFlags(ddbItem) {\n  const ddb = this.source.ddb;\n  const character = this.raw.character;\n  let flags = {\n    damage: {\n      parts: [],\n    },\n    // Some features, notably hexblade abilities we scrape out here\n    classFeatures: getClassFeatures(ddb, ddbItem),\n    martialArtsDie: getMartialArtsDie(ddb),\n    maxMediumArmorDex: Math.max(\n      ...DDBHelper.filterBaseModifiers(ddb, \"set\", { subType: \"ac-max-dex-armored-modifier\", includeExcludedEffects: true }).map((mod) => mod.value),\n      ...DDBHelper.filterModifiersOld(ddbItem.definition?.grantedModifiers ?? ddbItem.grantedModifiers ?? [], \"set\", \"ac-max-dex-armored-modifier\", [\"\", null], true).map((mod) => mod.value),\n      ...DDBHelper.filterModifiersOld(ddbItem.definition?.grantedModifiers ?? ddbItem.grantedModifiers ?? [], \"set\", \"ac-max-dex-modifier\", [\"\", null], true).map((mod) => mod.value),\n      2,\n    ),\n    magicItemAttackInt: DDBHelper.filterBaseModifiers(ddb, \"bonus\", { subType: \"magic-item-attack-with-intelligence\" }).length > 0,\n  };\n\n  if (flags.classFeatures.includes(\"Lifedrinker\")) {\n    flags.damage.parts.push([\"@abilities.cha.mod\", \"necrotic\"]);\n  }\n\n  // for melee attacks get extras\n  if (ddbItem.definition.attackType === 1) {\n    // get improved divine smite etc for melee attacks\n    const extraDamage = getExtraDamage(ddb, [\"Melee Weapon Attacks\"]);\n\n    if (!!extraDamage.length > 0) {\n      flags.damage.parts = flags.damage.parts.concat(extraDamage);\n    }\n    // do we have great weapon fighting?\n    if (DDBHelper.hasChosenCharacterOption(ddb, \"Great Weapon Fighting\")) {\n      flags.classFeatures.push(\"greatWeaponFighting\");\n    }\n    // do we have two weapon fighting style?\n    if (DDBHelper.hasChosenCharacterOption(ddb, \"Two-Weapon Fighting\")) {\n      flags.classFeatures.push(\"Two-Weapon Fighting\");\n    }\n    if (DDBHelper.getCustomValueFromCharacter(ddbItem, character, 18)) {\n      flags.classFeatures.push(\"OffHand\");\n    }\n  }\n  // ranged fighting style is added as a global modifier elsewhere\n  // as is defensive style\n\n  logger.debug(`Flags for ${ddbItem.name ?? ddbItem.definition.name}`, { ddbItem, flags });\n\n  return flags;\n};\n\n// TO DO: revisit to break up item parsing\n// eslint-disable-next-line complexity\nDDBCharacter.prototype.getInventory = async function getInventory() {\n\n  let items = [];\n  // first, check custom name, price or weight\n  this.source.ddb.character.characterValues.forEach((cv) => {\n    // try to find a matching item based on the characterValues (an array of custom adjustements to different parts of the character)\n    let item = this.source.ddb.character.inventory.find((item) => item.id === cv.valueId);\n    if (item) {\n      // check if this property is in the list of supported ones, based on our DICT\n      let property = DICTIONARY.item.characterValues.find((entry) => entry.typeId === cv.typeId);\n      // overwrite the name, weight or price with the custom value\n      if (property && cv.value.length !== 0) item.definition[property.value] = cv.value;\n    }\n  });\n\n  // now parse all items\n  const isCompendiumItem = foundry.utils.getProperty(this.raw.character, \"flags.ddbimporter.compendium\") ?? false;\n  const addAutomationEffects = (isCompendiumItem)\n    ? game.settings.get(\"ddb-importer\", \"munching-policy-add-effects\")\n    : game.settings.get(\"ddb-importer\", \"character-update-policy-add-item-effects\");\n\n  for (let ddbItem of this.source.ddb.character.inventory) {\n    const originalName = ddbItem.definition.name;\n    const adjustedName = DDBHelper.getName(this.source.ddb, ddbItem, this.raw.character);\n    const flags = this.getItemFlags(ddbItem);\n    foundry.utils.setProperty(ddbItem, \"isCompendiumItem\", isCompendiumItem);\n\n    const updateExisting = isCompendiumItem\n      ? game.settings.get(\"ddb-importer\", \"munching-policy-update-existing\")\n      : false;\n    ddbItem.definition.description = await generateTable(adjustedName, ddbItem.definition.description, updateExisting);\n\n    let item = Object.assign({}, parseItem(this.source.ddb, ddbItem, this.raw.character, flags));\n\n    if (item) {\n      item.name = adjustedName;\n      item = parseMagicItem(item, ddbItem, this.raw.itemSpells, isCompendiumItem);\n      item.flags.ddbimporter.originalName = originalName;\n      item.flags.ddbimporter.version = CONFIG.DDBI.version;\n      if (!item.effects) item.effects = [];\n      if (!item.name || item.name === \"\") item.name = \"Item\";\n\n      // if (addEffects) {\n      item = generateEffects({\n        ddb: this.source.ddb,\n        character: this.raw.character,\n        ddbItem,\n        foundryItem: item,\n        isCompendiumItem,\n        type: \"item\",\n        description: item.system.description.chat !== \"\"\n          ? item.system.description.chat\n          : item.system.description.value,\n      });\n      // } else if (item.type === \"equipment\") {\n      //   if (foundry.utils.hasProperty(item, \"system.armor.type\") && [\"trinket\", \"clothing\"].includes(item.system.armor.type)) {\n      //     item = generateBaseACItemEffect(this.source.ddb, this.raw.character, ddbItem, item, isCompendiumItem);\n      //   }\n      // } else {\n      //   item = generateBaseACItemEffect(this.source.ddb, this.raw.character, ddbItem, item, isCompendiumItem);\n      // }\n      item = await addRestrictionFlags(item, addAutomationEffects);\n\n      if (!isCompendiumItem) item = parseInfusion(this.source.ddb, this.raw.character, item, ddbItem, isCompendiumItem);\n      if (addAutomationEffects) item = await midiItemEffects(item);\n      // item = await getIcon(item, ddbItem);\n\n      items.push(item);\n    }\n  }\n\n  fixItems(items);\n  this.updateItemIds(items);\n  return items;\n};\n","import logger from \"../../logger.js\";\nimport SETTINGS from \"../../settings.js\";\nimport DDBCharacter from \"../DDBCharacter.js\";\nimport DDBCompanionFactory from \"./DDBCompanionFactory.js\";\n\n\nDDBCharacter.prototype.getClassFeature = function(name) {\n  const klass = this.source.ddb.character.classes\n    .find((k) => k.classFeatures.some((f) => f.definition.name == name));\n  return klass?.classFeatures?.find((f) => f.definition.name == name);\n};\n\n\nDDBCharacter.prototype._parseCompanion = async function(html, type, originDocument) {\n  const ddbCompanionFactory = new DDBCompanionFactory(html, { type, originDocument });\n  await ddbCompanionFactory.parse();\n  this.companionFactories.push(ddbCompanionFactory);\n};\n\nDDBCharacter.prototype._importCompanions = async function() {\n  for (const factory of this.companionFactories) {\n    await factory.updateOrCreateCompanions();\n  }\n};\n\nDDBCharacter.prototype._getCompanionFeature = async function(featureName) {\n  const feature = this.data.features.concat(this.data.actions).find((s) =>\n    s.name === featureName || s.flags.ddbimporter?.originalName === featureName\n  );\n  if (!feature) return;\n  const ddbFeature = this.getClassFeature(featureName);\n  if (!ddbFeature) return;\n  await this._parseCompanion(ddbFeature.definition.description, \"feature\", feature);\n};\n\nDDBCharacter.prototype._getCompanionOption = async function(parentFeature, childName) {\n  const feature = this.data.features.concat(this.data.actions).find((s) =>\n    s.name === parentFeature\n    || s.flags.ddbimporter?.originalName === parentFeature\n    || s.name === `${parentFeature}: ${childName}`\n    || s.flags.ddbimporter?.originalName === `${parentFeature}: ${childName}`\n  );\n  if (!feature) return;\n  const ddbOption = this.source.ddb.character.options.class.find((o) => o.definition.name == childName);\n  if (!ddbOption) return;\n  await this._parseCompanion(ddbOption.definition.description, \"feature\", feature);\n};\n\nDDBCharacter.prototype.generateCompanions = async function() {\n  for (const name of SETTINGS.COMPANIONS.COMPANION_FEATURES) {\n    await this._getCompanionFeature(name);\n  }\n  // spells now munched during spell munch\n  for (const [parentFeature, childNames] of Object.entries(SETTINGS.COMPANIONS.COMPANION_OPTIONS)) {\n    for (const name of childNames) {\n      await this._getCompanionOption(parentFeature, name);\n    }\n  }\n\n  await this._importCompanions();\n\n  this.companions = this.companionFactories.map((factory) => factory.companions);\n\n  logger.debug(\"parsed companions\", {\n    factories: this.companionFactories,\n    parsed: this.companions,\n  });\n\n  for (const factory of this.companionFactories) {\n    await factory.addCompanionsToDocuments(this.data.features.concat(this.data.actions));\n  }\n\n  // different types of companion\n  // ranger beast companions, classic and new\n  // ranger drake warden\n  // ranger other?\n  // artificer steel defender\n  // artificer homunculus\n  // new summon spells\n  // classic summons (not handled here)\n  // druid circle of fire companion\n\n};\n\n","// monster parser\nimport \"./DDBMonster.js\";\n// load files with extensions here. this will add the functions to the class\nimport \"./monster/abilities.js\";\nimport \"./monster/ac.js\";\nimport \"./monster/conditions.js\";\nimport \"./monster/size.js\";\nimport \"./monster/type.js\";\nimport \"./monster/skills.js\";\nimport \"./monster/senses.js\";\nimport \"./monster/environments.js\";\nimport \"./monster/languages.js\";\nimport \"./monster/hp.js\";\nimport \"./monster/movement.js\";\nimport \"./monster/source.js\";\nimport \"./monster/features.js\";\nimport \"./monster/spells.js\";\n\n// character parser\nimport \"./DDBCharacter.js\";\n// load files with extensions here. this will add the functions to the class\nimport \"./character/index.js\";\nimport \"./character/token.js\";\nimport \"./character/ac.js\";\nimport \"./character/specialTraits.js\";\nimport \"./character/proficiencies.js\";\nimport \"./character/skills.js\";\nimport \"./character/abilities.js\";\nimport \"./character/hp.js\";\nimport \"./character/initiative.js\";\nimport \"./character/effects.js\";\nimport \"./character/currency.js\";\nimport \"./character/senses.js\";\nimport \"./character/speed.js\";\nimport \"./character/bio.js\";\nimport \"./character/size.js\";\nimport \"./character/spellCasting.js\";\nimport \"./character/race.js\";\nimport \"./character/resources.js\";\nimport \"./character/inventory.js\";\nimport \"./character/globalBonuses.js\";\n\nimport \"./special/character.js\";\n\nimport \"./item/index.js\";\n\nimport \"./companions/companions.js\";\n","import \"../../parser/extendParsers.js\";\n","import DICTIONARY from \"../../dictionary.js\";\nimport DDBEffectHelper from \"../../effects/DDBEffectHelper.js\";\nimport logger from \"../../logger.js\";\n\nexport function getCondition(conditionDDBName) {\n  return DICTIONARY.conditions.find((condition) => condition.label === conditionDDBName);\n}\n\nexport function getActorConditionStates(actor, ddb, keepLocal = false) {\n  const conditions = DICTIONARY.conditions\n    .filter((condition) => Number.isInteger(condition.ddbId)) // only ddb conditions\n    .map((condition) => {\n      const conditionApplied = DDBEffectHelper.getConditionEffectAppliedAndActive(condition.label, actor);\n      const ddbCondition = ddb.character.conditions.some((conditionState) =>\n        conditionState.id === condition.ddbId\n        && conditionState.level === condition.levelId\n      );\n      condition.ddbCondition = ddbCondition;\n      condition.applied = conditionApplied !== undefined;\n      condition.conditionApplied = conditionApplied;\n      condition.needsAdd = ddbCondition && !conditionApplied;\n      condition.needsRemove = !ddbCondition && conditionApplied && !keepLocal;\n      condition.needsUpdate = (ddbCondition && !conditionApplied) || (!ddbCondition && conditionApplied && !keepLocal);\n      return condition;\n    });\n  return conditions;\n}\n\n/**\n * Set conditions\n * @param {*} ddb\n * @param {*} actor\n */\nexport async function setConditions(actor, ddb, keepLocal = false) {\n  const conditionStates = getActorConditionStates(actor, ddb, keepLocal);\n  // console.warn(conditionStates);\n  logger.debug(`Condition states for ${actor.name}`, conditionStates);\n\n  // remove conditions first\n  for (const condition of conditionStates.filter((c) => c.needsRemove)) {\n    logger.debug(`removing ${condition.label}`, { condition });\n    const existing = actor.document?.effects?.get(game.dnd5e.utils.staticID(`dnd5e${condition.foundry}`));\n    if (existing) await existing.delete();\n    if (condition.foundry === \"exhaustion\") {\n      logger.debug(\"Removing exhaustion\", condition.levelId);\n      await actor.update({ \"system.attributes.exhaustion\": 0 });\n    }\n  }\n  for (const condition of conditionStates.filter((c) => c.needsAdd)) {\n    logger.debug(`adding ${condition.label}`, { condition });\n    const effect = await ActiveEffect.implementation.fromStatusEffect(condition.foundry);\n    effect.updateSource({ \"flags.dnd5e.exhaustionLevel\": condition.levelId });\n    const effectData = effect.toObject();\n    // console.warn(\"effect\", {effect, effectData});\n    // await ActiveEffect.implementation.create(effectData, { parent: actor.document, keepId: true });\n    await actor.createEmbeddedDocuments(\"ActiveEffect\", [effectData], { keepId: true });\n    if (condition.foundry === \"exhaustion\") {\n      logger.debug(\"Updating actor exhaustion\", condition.levelId);\n      await actor.update({ \"system.attributes.exhaustion\": condition.levelId });\n    }\n  }\n}\n","import logger from \"../logger.js\";\nimport utils from \"../lib/utils.js\";\nimport CompendiumHelper from \"../lib/CompendiumHelper.js\";\nimport DICTIONARY from \"../dictionary.js\";\nimport SETTINGS from \"../settings.js\";\nimport { isEqual } from \"../../vendor/lowdash/isequal.js\";\nimport DDBCampaigns from \"../lib/DDBCampaigns.js\";\nimport { getCobalt, checkCobalt } from \"../lib/Secrets.js\";\nimport { getActorConditionStates, getCondition } from \"../parser/special/conditions.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\nimport DDBCharacter from \"../parser/DDBCharacter.js\";\nimport PatreonHelper from \"../lib/PatreonHelper.js\";\nimport NameMatcher from \"../lib/NameMatcher.js\";\n\nfunction getContainerItems(actor) {\n  return actor.items\n    .filter((item) =>\n      foundry.utils.hasProperty(item, \"flags.ddbimporter.id\")\n      && foundry.utils.hasProperty(item, \"flags.ddbimporter.containerEntityId\")\n      && item.flags.ddbimporter.containerEntityId === parseInt(actor.flags.ddbimporter.dndbeyond.characterId)\n      && !item.flags.ddbimporter?.ignoreItemImport\n      && !item.system.container\n    );\n}\n\nfunction getItemRollData(actor, itemId) {\n  const item = actor.items.get(itemId);\n  const rollData = item.getRollData();\n  return {\n    item,\n    rollData,\n  };\n}\n\nfunction setContainerDetails(actor, item, containerItems = null) {\n  const characterId = actor.flags.ddbimporter.dndbeyond.characterId;\n  const ddbContainers = containerItems ?? getContainerItems(actor);\n\n  const containerItem = item.system.container\n    ? ddbContainers.find((container) => container._id === item.system.container)\n    : null;\n\n  if (containerItem) {\n    const containerId = foundry.utils.getProperty(containerItem, \"flags.ddbimporter.id\");\n    const containerEntityTypeId = foundry.utils.getProperty(containerItem, \"flags.ddbimporter.entityTypeId\");\n    foundry.utils.setProperty(item, \"flags.ddbimporter.containerEntityId\", containerId);\n    foundry.utils.setProperty(item, \"flags.ddbimporter.containerEntityTypeId\", containerEntityTypeId);\n  } else {\n    // set the container entity id to the id of the character, if the character is the \"container\"\n    foundry.utils.setProperty(item, \"flags.ddbimporter.containerEntityId\", parseInt(characterId));\n  }\n\n  return item;\n}\n\nfunction getFoundryItems(actor) {\n  const ddbContainers = getContainerItems(actor);\n\n  const actorItems = foundry.utils.duplicate(actor.items)\n    .filter((item) => !(item.flags.ddbimporter?.ignoreItemUpdate ?? false))\n    .map((rawItem) => {\n      const item = getItemRollData(actor, rawItem._id).item;\n      return setContainerDetails(actor, item, ddbContainers);\n    });\n  // don't return update ignored items\n  return actorItems;\n}\n\nfunction getCustomItemDescription(text) {\n  return utils.stripHtml(text).substring(0, 2055);\n}\n\nasync function getUpdateItemIndex() {\n  if (foundry.utils.hasProperty(CONFIG, \"DDBI.update.itemIndex\")) return foundry.utils.getProperty(CONFIG, \"DDBI.update.itemIndex\");\n  const compendium = await CompendiumHelper.getCompendiumType(\"item\", false);\n\n  const indexFields = [\n    \"name\",\n    \"type\",\n    \"flags.ddbimporter.definitionId\",\n    \"flags.ddbimporter.definitionEntityTypeId\",\n  ];\n  // eslint-disable-next-line require-atomic-updates\n  const itemIndex = await compendium.getIndex({ fields: indexFields });\n  foundry.utils.setProperty(CONFIG, \"DDBI.update.itemIndex\", itemIndex);\n\n  return itemIndex;\n}\n\nasync function getCompendiumItemInfo(item) {\n  const index = await getUpdateItemIndex();\n  const match = NameMatcher.looseItemNameMatch(item, index, true, false, true);\n  return match;\n}\n\n// flavor is just useful for debugging\nasync function updateCharacterCall(actor, path, bodyContent, flavor) {\n  const characterId = actor.flags.ddbimporter.dndbeyond.characterId;\n  const cobaltCookie = getCobalt(actor.id);\n  const dynamicSync = SETTINGS.STATUS.activeUpdate();\n  const parsingApi = dynamicSync\n    ? DDBProxy.getDynamicProxy()\n    : DDBProxy.getProxy();\n  const useCharacterKey = foundry.utils.getProperty(actor, \"flags.ddbimporter.useLocalPatreonKey\") ?? false;\n  const betaKey = PatreonHelper.getPatreonKey(useCharacterKey);\n  const campaignId = DDBCampaigns.getCampaignId();\n  const proxyCampaignId = campaignId === \"\" ? null : campaignId;\n  const coreBody = {\n    cobalt: cobaltCookie,\n    betaKey,\n    characterId,\n    campaignId: proxyCampaignId,\n    dynamicSync,\n    customApiVersion: 5.1,\n  };\n  const body = { ...coreBody, ...bodyContent };\n\n  const url = dynamicSync\n    ? `${parsingApi}/dynamic/update/${path}`\n    : `${parsingApi}/proxy/update/${path}`;\n\n  logger.debug(\"Update info:\", {\n    url,\n    path,\n    characterId,\n    bodyContent,\n    dynamicSync,\n    flavor,\n  });\n\n  return new Promise((resolve, reject) => {\n    fetch(url, {\n      method: \"POST\",\n      cache: \"no-cache\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body), // body data type must match \"Content-Type\" header\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (!data.success) {\n          const errorData = {\n            url,\n            path,\n            errorData: data,\n            bodyContent,\n            characterId,\n            dynamicSync,\n            flavor,\n          };\n          logger.error(`Update failed for ${actor.name}:`, errorData);\n          ui.notifications.error(`Update failed: (${actor.name}) ${data.message} (see console log (F12) for more details)`);\n          resolve(data);\n        }\n        logger.debug(`${path} updated, response`, data);\n        return data;\n      })\n      .then((data) => resolve(data))\n      .catch((error) => {\n        const errorData = {\n          error,\n          bodyContent,\n          characterId,\n          dynamicSync,\n        };\n        logger.error(`Setting ${path} failed`, errorData);\n        logger.error(error.stack);\n        reject(error);\n      });\n  });\n}\n\nasync function updateDDBSpellSlotsPact(actor) {\n  return new Promise((resolve) => {\n    let spellSlotPackData = {\n      spellslots: {},\n      pact: true,\n    };\n    spellSlotPackData.spellslots[`level${actor.system.spells.pact.level}`] = actor.system.spells.pact.value;\n    const spellPactSlots = updateCharacterCall(actor, \"spell/slots\", spellSlotPackData, \"Pact Spell Slots\");\n    resolve(spellPactSlots);\n  });\n}\n\nasync function spellSlotsPact(actor, ddbCharacter) {\n  return new Promise((resolve) => {\n    if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-spells-slots\")) resolve();\n    if (\n      actor.system.spells.pact.max > 0\n      && ddbCharacter.data.character.system.spells.pact.value !== actor.system.spells.pact.value\n    ) {\n      resolve(updateDDBSpellSlotsPact(actor));\n    } else {\n      resolve();\n    }\n  });\n}\n\nasync function updateDynamicDDBSpellSlots(actor, update) {\n  return new Promise((resolve) => {\n    let spellSlotData = { spellslots: {}, update: false };\n    for (let i = 1; i <= 9; i++) {\n      let spellData = actor.system.spells[`spell${i}`];\n      if (spellData.max > 0 && update.system.spells[`spell${i}`]) {\n        const used = spellData.max - spellData.value;\n        spellSlotData.spellslots[`level${i}`] = used;\n        spellSlotData[\"update\"] = true;\n      }\n    }\n    if (spellSlotData[\"update\"]) {\n      resolve(updateCharacterCall(actor, \"spells/slots\", spellSlotData, \"Spell slots\"));\n    } else {\n      resolve();\n    }\n  });\n}\n\nasync function spellSlots(actor, ddbCharacter) {\n  return new Promise((resolve) => {\n    if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-spells-slots\")) resolve();\n\n    let spellSlotData = { spellslots: {}, update: false };\n    for (let i = 1; i <= 9; i++) {\n      let spellData = actor.system.spells[`spell${i}`];\n      if (spellData.max > 0 && ddbCharacter.data.character.system.spells[`spell${i}`].value !== spellData.value) {\n        const used = spellData.max - spellData.value;\n        spellSlotData.spellslots[`level${i}`] = used;\n        spellSlotData[\"update\"] = true;\n      }\n    }\n    if (spellSlotData[\"update\"]) {\n      resolve(updateCharacterCall(actor, \"spells/slots\", spellSlotData, \"Spell slots\"));\n    } else {\n      resolve();\n    }\n  });\n}\n\nasync function updateDDBCurrency(actor) {\n  return new Promise((resolve) => {\n    const value = {\n      pp: Number.isInteger(actor.system.currency.pp) ? actor.system.currency.pp : 0,\n      gp: Number.isInteger(actor.system.currency.gp) ? actor.system.currency.gp : 0,\n      ep: Number.isInteger(actor.system.currency.ep) ? actor.system.currency.ep : 0,\n      sp: Number.isInteger(actor.system.currency.sp) ? actor.system.currency.sp : 0,\n      cp: Number.isInteger(actor.system.currency.cp) ? actor.system.currency.cp : 0,\n    };\n\n    resolve(updateCharacterCall(actor, \"currency\", value, \"Currency\"));\n\n  });\n}\n\nasync function currency(actor, ddbCharacter) {\n  return new Promise((resolve) => {\n    if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-currency\")) resolve();\n\n    const value = {\n      pp: Number.isInteger(actor.system.currency.pp) ? actor.system.currency.pp : 0,\n      gp: Number.isInteger(actor.system.currency.gp) ? actor.system.currency.gp : 0,\n      ep: Number.isInteger(actor.system.currency.ep) ? actor.system.currency.ep : 0,\n      sp: Number.isInteger(actor.system.currency.sp) ? actor.system.currency.sp : 0,\n      cp: Number.isInteger(actor.system.currency.cp) ? actor.system.currency.cp : 0,\n    };\n\n    const same = isEqual(ddbCharacter._currency, value);\n\n    if (!same) {\n      resolve(updateCharacterCall(actor, \"currency\", value));\n    } else {\n      resolve();\n    }\n\n  });\n}\n\n// async function itemCurrencyUpdate(actor, foundryItem, type, value) {\n//   return new Promise((resolve) => {\n//     const currency = {\n//       amount: value,\n//       characterId: actor.flags.ddbimporter.dndbeyond.characterId,\n//       destinationEntityId: foundryItem.id,\n//       destinationEntityTypeId: foundryItem.entityTypeId,\n//     };\n//     resolve(updateCharacterCall(actor, `currency/individual`, { type, currency }, `Currency - ${type}`));\n//   });\n// }\n\n// async function itemCurrency(actor, ddbItem, foundryItem) {\n//   if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-currency\")) return [];\n//   if (!game.modules.get(\"itemcollection\")?.active) return [];\n//   if (!foundry.utils.hasProperty(foundryItem, \"system.currency\")) return [];\n\n//   const promises = [];\n\n//   [\"pp\", \"gp\", \"ep\", \"sp\", \"cp\"].forEach((type) => {\n//     const same = isEqual(foundryItem.system.currency[type], ddbItem.currency[type]);\n//     if (!same) {\n//       promises.push(itemCurrencyUpdate(actor, foundryItem, type, foundryItem.system.currency[type]));\n//     }\n//   });\n\n//   return Promise.all(promises);\n// }\n\nasync function updateDDBXP(actor) {\n  return new Promise((resolve) => {\n    resolve(updateCharacterCall(actor, \"xp\", { currentXp: actor.system.details.xp.value ?? 0 }, \"XP\"));\n  });\n}\n\nasync function xp(actor, ddbCharacter) {\n  return new Promise((resolve) => {\n    if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-xp\")) resolve();\n    const same = ddbCharacter.data.character.system.details.xp.value === actor.system.details.xp.value;\n\n    if (!same) {\n      resolve(updateDDBXP(actor));\n    } else {\n      resolve();\n    }\n  });\n}\n\nasync function updateDDBHitPoints(actor) {\n  return new Promise((resolve) => {\n    const temporaryHitPoints = actor.system.attributes.hp.temp ?? 0;\n    const bonusHitPoints = actor.system.attributes.hp.tempmax ?? 0;\n    const removedHitPoints = (actor.system.attributes.hp.max + bonusHitPoints) - (actor.system.attributes.hp.value ?? 0);\n    const hitPointData = {\n      removedHitPoints,\n      temporaryHitPoints,\n    };\n    resolve(updateCharacterCall(actor, \"hitpoints\", hitPointData, \"HP\"));\n  });\n}\n\nasync function updateTempMaxDDBHitPoints(actor) {\n  return new Promise((resolve) => {\n\n    const bonusHitPoints = {\n      bonusHitPoints: actor.system.attributes.hp.tempmax ?? 0,\n    };\n    resolve(updateCharacterCall(actor, \"hpbonus\", bonusHitPoints, \"HPBonus\"));\n  });\n}\n\n\nasync function hitPoints(actor, ddbCharacter) {\n  if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-hitpoints\")) return [];\n  let promises = [];\n  const same\n    = ddbCharacter.data.character.system.attributes.hp.value === (actor.system.attributes.hp.value ?? 0)\n    && (ddbCharacter.data.character.system.attributes.hp.temp ?? 0) === (actor.system.attributes.hp.temp ?? 0);\n\n  if (!same) {\n    promises.push(updateDDBHitPoints(actor));\n  }\n\n  const hpSame = ddbCharacter.data.character.system.attributes.hp.tempmax === (actor.system.attributes.hp.tempmax ?? 0);\n\n  if (!hpSame) {\n    promises.push(updateTempMaxDDBHitPoints(actor));\n  }\n\n  return Promise.all(promises);\n}\n\nasync function updateDDBInspiration(actor) {\n  return new Promise((resolve) => {\n    const inspiration = updateCharacterCall(actor, \"inspiration\", {\n      inspiration: actor.system.attributes.inspiration,\n    }, \"Inspiration\");\n    resolve(inspiration);\n  });\n}\n\nasync function inspiration(actor, ddbCharacter) {\n  return new Promise((resolve) => {\n    if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-inspiration\")) resolve();\n    const same = ddbCharacter.data.character.system.attributes.inspiration === actor.system.attributes.inspiration;\n\n    if (!same) {\n      resolve(updateDDBInspiration(actor));\n    } else {\n      resolve();\n    }\n  });\n}\n\nasync function updateDDBExhaustion(actor) {\n  return new Promise((resolve) => {\n    let exhaustionData = {\n      conditionId: 4,\n      addCondition: false,\n    };\n    if (actor.system.attributes.exhaustion !== 0) {\n      exhaustionData[\"level\"] = actor.system.attributes.exhaustion;\n      exhaustionData[\"totalHP\"] = actor.system.attributes.hp.max;\n      exhaustionData[\"addCondition\"] = true;\n    }\n    resolve(updateCharacterCall(actor, \"condition\", exhaustionData, \"Exhaustion\"));\n  });\n}\n\n\nasync function exhaustion(actor, ddbCharacter) {\n  return new Promise((resolve) => {\n    if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-condition\")) resolve();\n    const same = ddbCharacter.data.character.system.attributes.exhaustion === actor.system.attributes.exhaustion;\n\n    if (!same) {\n      resolve(updateDDBExhaustion(actor));\n    } else {\n      resolve();\n    }\n\n  });\n}\n\nasync function updateDDBCondition(actor, condition) {\n  return new Promise((resolve) => {\n    const conditionData = {\n      conditionId: condition.ddbId,\n      addCondition: condition.applied,\n      level: null,\n      totalHP: actor.system.attributes.hp.max,\n    };\n\n    resolve(updateCharacterCall(actor, \"condition\", conditionData, { condition }));\n  });\n}\n\nasync function conditions(actor, ddbCharacter) {\n  return new Promise((resolve) => {\n    if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-condition\")) resolve([]);\n    const conditions = getActorConditionStates(actor, ddbCharacter.source.ddb);\n    let results = [];\n    conditions.forEach((condition) => {\n      // exhaustion handled separately\n      if (condition.needsUpdate && condition.ddbId !== 4) {\n        results.push(updateDDBCondition(actor, condition));\n      }\n    });\n    resolve(results);\n  });\n}\n\nasync function updateDDBDeathSaves(actor) {\n  return new Promise((resolve) => {\n    const deathSaveData = {\n      failCount: actor.system.attributes.death.failure ?? 0,\n      successCount: actor.system.attributes.death.success ?? 0,\n    };\n    resolve(updateCharacterCall(actor, \"deathsaves\", deathSaveData, \"Death Saves\"));\n  });\n}\n\nasync function deathSaves(actor, ddbCharacter) {\n  return new Promise((resolve) => {\n    if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-deathsaves\")) resolve();\n    const same = isEqual(ddbCharacter.data.character.system.attributes.death, actor.system.attributes.death);\n\n    if (!same) {\n      resolve(updateDDBDeathSaves(actor));\n    } else {\n      resolve();\n    }\n  });\n}\n\nasync function updateDDBHitDice(actor, klass, update) {\n  return new Promise((resolve) => {\n    if (klass.flags?.ddbimporter?.id) {\n      let hitDiceData = {\n        classHitDiceUsed: {},\n        resetMaxHpModifier: false,\n      };\n      hitDiceData.classHitDiceUsed[klass.flags.ddbimporter.id] = update.system.hitDiceUsed;\n      resolve(updateCharacterCall(actor, \"hitdice\", { shortRest: hitDiceData }, \"Hit Dice\"));\n    } else {\n      resolve();\n    }\n  });\n}\n\nasync function hitDice(actor, ddbCharacter) {\n  return new Promise((resolve) => {\n    if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-hitdice\")) resolve();\n\n    const ddbClasses = ddbCharacter.data.classes;\n\n    const klasses = actor.items.filter(\n      (item) => item.type === \"class\" && item.flags.ddbimporter.id && item.flags.ddbimporter.definitionId\n    );\n\n    let hitDiceData = {\n      classHitDiceUsed: {},\n      resetMaxHpModifier: false,\n    };\n\n    klasses.forEach((klass) => {\n      const classMatch = ddbClasses.find((ddbClass) => ddbClass.flags.ddbimporter.id === klass.flags.ddbimporter.id);\n      if (classMatch && classMatch.system.hitDiceUsed !== klass.system.hitDiceUsed) {\n        hitDiceData.classHitDiceUsed[klass.flags.ddbimporter.id] = klass.system.hitDiceUsed;\n      }\n    });\n\n    const same = isEqual({}, hitDiceData.classHitDiceUsed);\n    if (!same) {\n      resolve(updateCharacterCall(actor, \"hitdice\", { shortRest: hitDiceData }));\n    }\n\n    resolve();\n  });\n}\n\nasync function updateSpellsPrepared(actor, spellPreparedData) {\n  return new Promise((resolve) => {\n    resolve(updateCharacterCall(actor, \"spell/prepare\", spellPreparedData, \"Spells Prepared\"));\n  });\n}\n\nasync function updateDDBSpellsPrepared(actor, spells) {\n  let promises = [];\n\n  const preparedSpells = spells.filter((spell) =>\n    spell.type === \"spell\"\n    && spell.system.preparation?.mode === \"prepared\"\n    && spell.flags.ddbimporter?.dndbeyond?.characterClassId\n    && !spell.flags.ddbimporter.dndbeyond.granted\n  ).map((spell) => {\n    let spellPreparedData = {\n      spellInfo: {\n        spellId: spell.flags.ddbimporter.definitionId,\n        characterClassId: spell.flags.ddbimporter.dndbeyond.characterClassId,\n        entityTypeId: spell.flags.ddbimporter.entityTypeId,\n        id: spell.flags.ddbimporter.id,\n        prepared: spell.system.preparation.prepared === true,\n      }\n    };\n    logger.debug(`Updating spell prepared state for ${spell.name} to ${spellPreparedData.spellInfo.prepared}`);\n    return spellPreparedData;\n  });\n\n  preparedSpells.forEach((spellPreparedData) => {\n    promises.push(updateSpellsPrepared(actor, spellPreparedData));\n  });\n\n  return Promise.all(promises);\n}\n\nasync function spellsPrepared(actor, ddbCharacter) {\n  if (!game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-spells-prepared\")) return [];\n  const ddbSpells = ddbCharacter.data.spells;\n\n  const preparedSpells = actor.items.filter((item) => {\n    const spellMatch = ddbSpells.find((s) =>\n      s.name === item.name\n      && item.system.preparation?.mode === \"prepared\"\n      && item.flags.ddbimporter?.dndbeyond?.characterClassId\n      && item.flags.ddbimporter?.dndbeyond?.characterClassId === s.flags.ddbimporter?.dndbeyond?.characterClassId\n    );\n    if (!spellMatch) return false;\n    const select = item.type === \"spell\"\n      && item.system.preparation?.mode === \"prepared\"\n      && item.system.preparation.prepared !== spellMatch.system.preparation?.prepared;\n    return spellMatch && select;\n  });\n\n  const results = updateDDBSpellsPrepared(actor, preparedSpells);\n\n  return results;\n}\n\nasync function updateItemsWithDDBInfo(itemsToAdd) {\n  return Promise.all(itemsToAdd.map(async (item) => {\n    if (!item.flags.ddbimporter?.definitionId && !item.flags.ddbimporter?.definitionEntityTypeId) {\n      const ddbCompendiumMatch = await getCompendiumItemInfo(item);\n      logger.debug(`Found item`, ddbCompendiumMatch);\n      if (ddbCompendiumMatch\n        && ddbCompendiumMatch.flags?.ddbimporter?.definitionId\n        && ddbCompendiumMatch.flags?.ddbimporter?.definitionEntityTypeId\n      ) {\n        logger.debug(`Adding ${item.name} from DDB compendium match:`, ddbCompendiumMatch);\n        foundry.utils.setProperty(item, \"flags.ddbimporter.definitionId\", ddbCompendiumMatch.flags.ddbimporter.definitionId);\n        foundry.utils.setProperty(item, \"flags.ddbimporter.definitionEntityTypeId\", ddbCompendiumMatch.flags.ddbimporter.definitionEntityTypeId);\n        foundry.utils.setProperty(item, \"name\", ddbCompendiumMatch.name);\n        foundry.utils.setProperty(item, \"type\", ddbCompendiumMatch.type);\n      }\n    }\n    return item;\n  }));\n}\n\nfunction getValidContainer(actor, containerEntityId) {\n  if (!containerEntityId) return undefined;\n  if (parseInt(containerEntityId) === parseInt(actor.flags.ddbimporter.dndbeyond.characterId)) return true;\n  const containers = actor.items.filter((i) => foundry.utils.getProperty(i, \"flags.ddbimporter.dndbeyond.isContainer\") === true);\n  return containers.find((c) => parseInt(foundry.utils.getProperty(c, \"flags.ddbimporter.id\")) === parseInt(containerEntityId));\n}\n\nfunction generateItemsToAdd(actor, itemsToAdd) {\n  const results = {\n    items: [],\n    toAdd: [],\n    custom: [],\n  };\n\n  const characterId = parseInt(actor.flags.ddbimporter.dndbeyond.characterId);\n\n  for (let i = 0; i < itemsToAdd.length; i++) {\n    let item = itemsToAdd[i];\n    if (item.flags.ddbimporter?.definitionId && item.flags.ddbimporter?.definitionEntityTypeId) {\n      const containerItem = getValidContainer(actor, foundry.utils.hasProperty(item, \"flags.ddbimporter.containerEntityId\"));\n      const containerEntityId = containerItem\n        ? parseInt(foundry.utils.getProperty(containerItem, \"flags.ddbimporter.id\"))\n        : characterId;\n      const containerEntityTypeId = containerItem && containerEntityId !== characterId\n        ? parseInt(foundry.utils.getProperty(containerItem, \"flags.ddbimporter.entityTypeId\"))\n        : parseInt(\"1581111423\");\n      results.toAdd.push({\n        containerEntityId,\n        containerEntityTypeId,\n        entityId: parseInt(item.flags.ddbimporter.definitionId),\n        entityTypeId: parseInt(item.flags.ddbimporter.definitionEntityTypeId),\n        quantity: parseInt(item.system.quantity),\n      });\n    } else {\n      results.custom.push(item);\n    }\n    results.items.push(item);\n  }\n  return results;\n}\n\nasync function deleteDDBCustomItems(actor, itemsToDelete) {\n  return new Promise((resolve) => {\n    let customItemResults = [];\n    for (let i = 0; i < itemsToDelete.length; i++) {\n      const item = itemsToDelete[i];\n      const customData = {\n        itemState: \"DELETE\",\n        customValues: {\n          characterId: parseInt(actor.flags.ddbimporter.dndbeyond.characterId),\n          id: item.flags.ddbimporter.definitionId,\n          mappingId: item.flags.ddbimporter.id,\n          partyId: null,\n        }\n      };\n      if (foundry.utils.getProperty(customData, \"customValues.id\") !== undefined\n        && foundry.utils.getProperty(customData, \"customValues.mappingId\") !== undefined\n      ) {\n        const result = updateCharacterCall(actor, \"custom/item\", customData, { name: item.name }).then((data) => {\n          foundry.utils.setProperty(item, \"flags.ddbimporter.delete\", data);\n          foundry.utils.setProperty(item, \"flags.ddbimporter.custom\", true);\n          foundry.utils.setProperty(item, \"flags.ddbimporter.dndbeyond.isCustomItem\", true);\n          return item;\n        });\n        customItemResults.push(result);\n      } else {\n        logger.error(`Custom item ${item.name} is missing metadata, please manually update and re-import`);\n        ui.notifications.error(`Custom item ${item.name} is missing metadata, please manually update and re-import`);\n      }\n    }\n\n    resolve(customItemResults);\n  });\n}\n\nasync function addDDBCustomItems(actor, itemsToAdd) {\n  let customItemResults = [];\n  for (let i = 0; i < itemsToAdd.length; i++) {\n    const item = itemsToAdd[i];\n    const containerEntityId = foundry.utils.hasProperty(item, \"flags.ddbimporter.containerEntityId\")\n      ? parseInt(item.flags.ddbimporter.containerEntityId)\n      : parseInt(actor.flags.ddbimporter.dndbeyond.characterId);\n    const containerEntityTypeId = foundry.utils.hasProperty(item, \"flags.ddbimporter.containerEntityTypeId\")\n      ? parseInt(item.flags.ddbimporter.containerEntityTypeId)\n      : parseInt(\"1581111423\");\n    const customData = {\n      itemState: \"NEW\",\n      customValues: {\n        characterId: parseInt(actor.flags.ddbimporter.dndbeyond.characterId),\n        containerEntityId,\n        containerEntityTypeId,\n        name: item.name,\n        description: getCustomItemDescription(item.system.description.value),\n        quantity: parseInt(item.system.quantity),\n        cost: null,\n        weight: Number.isInteger(item.system.weight) ? parseInt(item.system.weight) : 0,\n      }\n    };\n    const result = updateCharacterCall(actor, \"custom/item\", customData, { name: item.name }).then((data) => {\n      foundry.utils.setProperty(item, \"flags.ddbimporter.id\", data.data.addItems[0].id);\n      foundry.utils.setProperty(item, \"flags.ddbimporter.custom\", true);\n      foundry.utils.setProperty(item, \"flags.ddbimporter.ddbCustomAdded\", true);\n      foundry.utils.setProperty(item, \"flags.ddbimporter.dndbeyond.isCustomItem\", true);\n      foundry.utils.setProperty(item, \"flags.ddbimporter.definitionId\", data.data.addItems[0].definition.id);\n      foundry.utils.setProperty(item, \"flags.ddbimporter.containerEntityId\", data.data.addItems[0].definition.containerEntityId);\n      foundry.utils.setProperty(item, \"flags.ddbimporter.containerEntityTypeId\", data.data.addItems[0].definition.containerEntityTypeId);\n      return item;\n    });\n    customItemResults.push(result);\n  }\n\n  return Promise.all(customItemResults);\n}\n\nasync function addDDBEquipment(actor, itemsToAdd) {\n  const ddbEnrichedItems = await updateItemsWithDDBInfo(itemsToAdd);\n  const generatedItemsToAddData = generateItemsToAdd(actor, ddbEnrichedItems);\n\n  const addDebugData = generatedItemsToAddData.items.map((i) => {\n    return {\n      name: i.name,\n      definitionId: i.flags.ddbimporter.definitionId,\n      definitionEntityTypeId: i.flags.ddbimporter.definitionEntityTypeId,\n      containerEntityId: i.flags.ddbimporter.containerEntityId,\n      containerEntityTypeId: i.flags.ddbimporter.containerEntityTypeId,\n      entityTypeId: i.flags.ddbimporter.entityTypeId,\n    };\n  });\n\n  logger.debug(`Generated items data`, generatedItemsToAddData);\n  logger.debug(`Generated items data light`, addDebugData);\n\n  const addItemData = {\n    equipment: generatedItemsToAddData.toAdd,\n  };\n\n  const customItems = await addDDBCustomItems(actor, generatedItemsToAddData.custom);\n  logger.debug(\"Adding custom items:\", customItems);\n\n  try {\n    const customItemResults = await actor.updateEmbeddedDocuments(\"Item\", customItems);\n    logger.debug(\"customItemResults\", customItemResults);\n  } catch (err) {\n    logger.error(`Unable to update character with equipment, got the error:`, err);\n    logger.error(err.stack);\n    logger.error(`Update payload:`, customItems);\n  }\n\n  if (addItemData.equipment.length > 0) {\n    const itemResults = await updateCharacterCall(actor, \"equipment/add\", addItemData, \"Adding equipment\");\n    try {\n      const itemUpdates = itemResults.data.addItems\n        .filter((addedItem) => ddbEnrichedItems.some((i) =>\n          i.flags.ddbimporter\n          && i.flags.ddbimporter.definitionId === addedItem.definition.id\n          && i.flags.ddbimporter.definitionEntityTypeId === addedItem.definition.entityTypeId\n        ))\n        .map((addedItem) => {\n          let updatedItem = ddbEnrichedItems.find((i) =>\n            i.flags.ddbimporter\n            && i.flags.ddbimporter.definitionId === addedItem.definition.id\n            && i.flags.ddbimporter.definitionEntityTypeId === addedItem.definition.entityTypeId\n          );\n          foundry.utils.setProperty(updatedItem, \"flags.ddbimporter.id\", addedItem.id);\n          foundry.utils.setProperty(updatedItem, \"flags.ddbimporter.containerEntityId\", addedItem.containerEntityId);\n          foundry.utils.setProperty(updatedItem, \"flags.ddbimporter.containerEntityTypeId\", addedItem.containerEntityTypeId);\n          return updatedItem;\n        });\n\n      logger.debug(\"Character item updates:\", itemUpdates);\n      logger.debug(\"Character custom item updates:\", customItems);\n\n      try {\n        if (itemUpdates.length > 0) await actor.updateEmbeddedDocuments(\"Item\", itemUpdates);\n        if (customItems.length > 0) await actor.updateEmbeddedDocuments(\"Item\", customItems);\n      } catch (err) {\n        logger.error(`Unable to update character with equipment, got the error:`, err);\n        logger.error(`Update payload:`, itemUpdates);\n        logger.error(`Update custom payload:`, customItems);\n        logger.error(\"Update Item Information:\", addDebugData);\n      }\n\n    } catch (err) {\n      logger.error(`Unable to filter updated equipment, got the error:`, err);\n      logger.error(`itemsToAdd`, itemsToAdd);\n      logger.error(`ddbEnrichedItems`, ddbEnrichedItems);\n      logger.error(`equipmentToAdd`, generatedItemsToAddData);\n      logger.error(`itemResults`, itemResults);\n      logger.error(`customItems`, customItems);\n      logger.error(\"Update Item Information:\", addDebugData);\n    }\n\n    return itemResults;\n  } else {\n    return [];\n  }\n}\n\nasync function addEquipment(actor, ddbCharacter) {\n  const syncItemReady = actor.flags.ddbimporter?.syncItemReady;\n  if (syncItemReady && !game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-equipment\")) return [];\n  const ddbItems = ddbCharacter.data.inventory;\n\n  const items = getFoundryItems(actor);\n  const itemsToAdd = items.filter((item) =>\n    !(item.flags.ddbimporter?.action ?? false)\n    && item.system.quantity !== 0\n    && DICTIONARY.types.inventory.includes(item.type)\n    && !item.flags.ddbimporter?.custom\n    && (!item.flags.ddbimporter?.id\n    || !ddbItems.some((s) => s.flags.ddbimporter?.id === item.flags.ddbimporter?.id && s.type === item.type))\n  );\n\n  return addDDBEquipment(actor, itemsToAdd);\n}\n\n\n// updates custom names on regular items\nasync function updateDDBCustomNames(actor, items) {\n  let promises = [];\n\n  items.forEach((item) => {\n    const customData = {\n      customValues: {\n        characterId: parseInt(actor.flags.ddbimporter.dndbeyond.characterId),\n        contextId: null,\n        contextTypeId: null,\n        notes: null,\n        typeId: 8,\n        value: item.name.replaceAll(\"[Infusion]\", \"\").trim(),\n        valueId: `${item.flags.ddbimporter.id}`,\n        valueTypeId: `${item.flags.ddbimporter.entityTypeId}`,\n      }\n    };\n    // custom name on standard equipment\n    promises.push(updateCharacterCall(actor, \"equipment/custom\", customData, \"Updating custom names\"));\n  });\n\n  return Promise.all(promises);\n\n}\n\n// updates names of items and actions\nasync function updateCustomNames(actor, ddbCharacter) {\n  const syncItemReady = actor.flags.ddbimporter?.syncItemReady;\n  if (syncItemReady && !game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-equipment\")) return [];\n  const ddbItems = ddbCharacter.data.inventory;\n\n  const foundryItems = getFoundryItems(actor);\n\n  const itemsToName = foundryItems.filter((item) =>\n    item.system.quantity !== 0\n    && (DICTIONARY.types.inventory.includes(item.type) || item.flags.ddbimporter?.action)\n    && item.flags.ddbimporter?.id\n    && ddbItems.some((ddbItem) =>\n      ddbItem.flags.ddbimporter?.id === item.flags.ddbimporter.id\n      && ddbItem.type === item.type\n      && ddbItem.name.replaceAll(\"[Infusion]\", \"\").trim() !== item.name.replaceAll(\"[Infusion]\", \"\").trim()\n    )\n  );\n\n  return updateDDBCustomNames(actor, itemsToName);\n}\n\nasync function removeDDBEquipment(actor, itemsToRemove) {\n  let promises = [];\n\n  itemsToRemove.forEach((item) => {\n    if (item.flags?.ddbimporter?.id) {\n      logger.debug(`Removing item ${item.name}`);\n      if (item.flags?.ddbimporter?.custom) {\n        promises.push(deleteDDBCustomItems(actor, [item]));\n      } else {\n        promises.push(updateCharacterCall(actor, \"equipment/remove\", { itemId: parseInt(item.flags.ddbimporter.id) }, \"Removing equipment\"));\n      }\n    }\n  });\n\n  return Promise.all(promises);\n}\n\nasync function removeEquipment(actor, ddbCharacter) {\n  const syncItemReady = actor.flags.ddbimporter?.syncItemReady;\n  if (syncItemReady && !game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-equipment\")) return [];\n  const ddbItems = ddbCharacter.data.inventory;\n\n  const items = getFoundryItems(actor);\n  const itemsToRemove = ddbItems.filter((item) =>\n    (!items.some((s) => (item.flags.ddbimporter?.id === s.flags.ddbimporter?.id && s.type === item.type) && !s.flags.ddbimporter?.action)\n    || items.some((s) => (item.flags.ddbimporter?.id === s.flags.ddbimporter?.id && s.type === item.type) && !s.flags.ddbimporter?.action && s.system.quantity == 0))\n    && DICTIONARY.types.inventory.includes(item.type)\n    && item.flags.ddbimporter?.id\n  );\n\n  return removeDDBEquipment(actor, itemsToRemove);\n}\n\nasync function updateDDBEquipmentStatus(actor, updateItemDetails, ddbItems) {\n  const itemsToEquip = updateItemDetails.itemsToEquip || [];\n  const itemsToAttune = updateItemDetails.itemsToAttune || [];\n  const itemsToCharge = updateItemDetails.itemsToCharge || [];\n  const itemsToQuantity = updateItemDetails.itemsToQuantity || [];\n  const itemsToName = updateItemDetails.itemsToName || [];\n  const customItems = updateItemDetails.customItems || [];\n  const itemsToMove = updateItemDetails.itemsToMove || [];\n  const currencyItems = updateItemDetails.itemsToCurrency || [];\n\n  let promises = [];\n\n  itemsToMove.forEach((item) => {\n    const itemData = {\n      itemId: item.flags.ddbimporter.id,\n      containerEntityId: item.flags.ddbimporter.containerEntityId,\n      containerEntityTypeId: item.flags.ddbimporter.containerEntityTypeId,\n    };\n    promises.push(updateCharacterCall(actor, \"equipment/move\", itemData, { name: item.name }));\n  });\n  itemsToEquip.forEach((item) => {\n    const itemData = { itemId: item.flags.ddbimporter.id, value: item.system.equipped };\n    promises.push(updateCharacterCall(actor, \"equipment/equipped\", itemData, { name: item.name }));\n  });\n  itemsToAttune.forEach((item) => {\n    // console.warn(item)\n    const itemData = { itemId: item.flags.ddbimporter.id, value: item.system.attuned };\n    promises.push(updateCharacterCall(actor, \"equipment/attuned\", itemData, { name: item.name }));\n  });\n  itemsToCharge.forEach((rawItem) => {\n    const item = getItemRollData(actor, rawItem._id).item;\n    const itemData = {\n      itemId: item.flags.ddbimporter.id,\n      charges: Math.max(0, parseInt(item.system.uses.max) - parseInt(item.system.uses.value)),\n    };\n    if (Number.isInteger(itemData.charges)) {\n      promises.push(updateCharacterCall(actor, \"equipment/charges\", itemData, { name: item.name }));\n    }\n  });\n  itemsToQuantity.forEach((item) => {\n    const itemData = {\n      itemId: item.flags.ddbimporter.id,\n      quantity: parseInt(item.system.quantity),\n    };\n    promises.push(updateCharacterCall(actor, \"equipment/quantity\", itemData, { name: item.name }));\n  });\n  itemsToName.forEach((item) => {\n    // historically items may not have this metadata\n    const entityTypeId = item.flags?.ddbimporter?.entityTypeId\n      ? item.flags.ddbimporter.entityTypeId\n      : ddbItems.find((dItem) => dItem.id === item.flags.ddbimporter.id).entityTypeId;\n    const customData = {\n      customValues: {\n        characterId: parseInt(actor.flags.ddbimporter.dndbeyond.characterId),\n        contextId: null,\n        contextTypeId: null,\n        notes: null,\n        typeId: 8,\n        value: item.name.replaceAll(\"[Infusion]\", \"\").trim(),\n        valueId: `${item.flags.ddbimporter.id}`,\n        valueTypeId: `${entityTypeId}`,\n      }\n    };\n    const flavor = { detail: \"Updating Name\", name: item.name, originalName: item.flags?.ddbimporter?.originalName };\n    promises.push(updateCharacterCall(actor, \"equipment/custom\", customData, flavor));\n  });\n\n  for (const item of currencyItems) {\n    // eslint-disable-next-line no-continue\n    if (!foundry.utils.hasProperty(item, \"system.currency.gp\")) continue;\n    const ddbItem = ddbItems.find((dItem) =>\n      item.flags.ddbimporter.id === dItem.id\n    );\n    // eslint-disable-next-line no-continue\n    if (ddbItem && !foundry.utils.hasProperty(ddbItem, \"currency.gp\")) continue;\n    [\"pp\", \"gp\", \"ep\", \"sp\", \"cp\"].forEach((t) => {\n      if (item.system.currency[t] !== ddbItem.currency[t]) {\n        const currency = {\n          amount: item.system.currency[t],\n          characterId: parseInt(actor.flags.ddbimporter.dndbeyond.characterId),\n          destinationEntityId: item.flags.ddbimporter.id,\n          destinationEntityTypeId: item.flags.ddbimporter.entityTypeId,\n        };\n        const type = DICTIONARY.currency[t];\n        promises.push(updateCharacterCall(actor, `currency/individual`, { type, currency }, `Currency - ${t}`));\n      }\n    });\n  }\n\n  customItems\n    .filter((item) => {\n      const isValid = foundry.utils.getProperty(item, \"flags.ddbimporter.id\") !== undefined\n       && foundry.utils.getProperty(item, \"flags.ddbimporter.definitionId\") !== undefined;\n      if (!isValid) {\n        logger.error(`Custom item ${item.name} is missing metadata, please manually update and re-import`);\n        ui.notifications.error(`Custom item ${item.name} is missing metadata, please manually update and re-import`);\n      }\n      return isValid;\n    })\n    .forEach((item) => {\n      const customData = {\n        itemState: \"UPDATE\",\n        customValues: {\n          characterId: parseInt(actor.flags.ddbimporter.dndbeyond.characterId),\n          id: item.flags.ddbimporter.definitionId,\n          mappingId: item.flags.ddbimporter.id,\n          name: item.name,\n          description: getCustomItemDescription(item.system.description.value),\n          // revist these need to be ints\n          // weight: `${item.data.weight}`,\n          // cost: item.data.price.value,\n          cost: null,\n          weight: Number.isInteger(item.system.weight) ? parseInt(item.system.weight) : 0,\n          quantity: parseInt(item.system.quantity),\n        }\n      };\n      promises.push(updateCharacterCall(actor, \"custom/item\", customData, \"Updating Custom Item\"));\n    });\n\n  return Promise.all(promises);\n}\n\n\nasync function equipmentStatus(actor, ddbCharacter, addEquipmentResults) {\n  const syncItemReady = actor.flags.ddbimporter?.syncItemReady;\n  if (syncItemReady && !game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-equipment\")) return [];\n  // reload the actor following potential updates to equipment\n  let ddbItems = ddbCharacter.source.ddb.character.inventory;\n  let customDDBItems = ddbCharacter.source.ddb.character.customItems;\n  if (addEquipmentResults?.system) {\n    actor = game.actors.get(actor.id);\n    ddbItems = ddbItems.concat(addEquipmentResults.system.addItems);\n  }\n\n  const foundryItems = getFoundryItems(actor);\n\n  const itemsToEquip = foundryItems.filter((item) =>\n    foundry.utils.hasProperty(item, \"system.equipped\")\n    && foundry.utils.hasProperty(item, \"flags.ddbimporter.id\")\n    && !foundry.utils.getProperty(item, \"flags.ddbimporter.action\")\n    && !foundry.utils.getProperty(item, \"flags.ddbimporter.custom\")\n    && ddbItems.some((dItem) =>\n      foundry.utils.getProperty(item, \"flags.ddbimporter.id\") === dItem.id\n      && item.system.equipped !== dItem.equipped\n    )\n  );\n  const itemsToAttune = foundryItems.filter((item) =>\n    [\"optional\", \"required\"].includes(foundry.utils.getProperty(item, \"system.attunement\"))\n    && foundry.utils.hasProperty(item, \"flags.ddbimporter.id\")\n    && !foundry.utils.getProperty(item, \"flags.ddbimporter.action\")\n    && !foundry.utils.getProperty(item, \"flags.ddbimporter.custom\")\n    && ddbItems.some((dItem) =>\n      foundry.utils.getProperty(item, \"flags.ddbimporter.id\") === dItem.id\n      && item.system.attuned !== dItem.isAttuned\n    )\n  );\n  const itemsToCharge = foundryItems.filter((rawItem) => {\n    const item = getItemRollData(actor, rawItem._id).item;\n    return foundry.utils.hasProperty(item, \"system.uses\")\n    && foundry.utils.hasProperty(item, \"flags.ddbimporter.id\")\n    && !foundry.utils.getProperty(item, \"flags.ddbimporter.action\")\n    && !foundry.utils.getProperty(item, \"flags.ddbimporter.custom\")\n    && ddbItems.some((dItem) =>\n      foundry.utils.getProperty(item, \"flags.ddbimporter.id\") === dItem.id\n      && Number.isInteger(parseInt(item.system.uses?.max)) && Number.isInteger(parseInt(dItem.limitedUse?.numberUsed))\n      && ((parseInt(item.system.uses.max) - parseInt(item.system.uses.value)) !== dItem.limitedUse.numberUsed)\n    );\n  });\n  const itemsToQuantity = foundryItems.filter((item) =>\n    foundry.utils.hasProperty(item, \"system.quantity\")\n    && item.system.quantity !== 0\n    && !foundry.utils.getProperty(item, \"system.armor.type\")\n    && ((item.type !== \"weapon\" && item.type !== \"armor\") || foundry.utils.getProperty(item, \"flags.ddbimporter.dndbeyond.stackable\"))\n    && foundry.utils.hasProperty(item, \"flags.ddbimporter.id\")\n    && !foundry.utils.getProperty(item, \"flags.ddbimporter.action\")\n    && !foundry.utils.getProperty(item, \"flags.ddbimporter.custom\")\n    && ddbItems.some((dItem) =>\n      foundry.utils.getProperty(item, \"flags.ddbimporter.id\") === dItem.id\n      && item.system.quantity !== dItem.quantity\n    )\n  );\n  // this is for items that have been added and might have a different name\n  const itemsToName = foundryItems.filter((item) =>\n    foundry.utils.hasProperty(item, \"flags.ddbimporter.id\")\n    && item.system?.quantity !== 0\n    && !foundry.utils.getProperty(item, \"flags.ddbimporter.custom\")\n    && ddbItems.some((dItem) =>\n      item.flags.ddbimporter.originalName === dItem.definition.name\n      && item.flags.ddbimporter.originalName !== item.name.replaceAll(\"[Infusion]\", \"\").trim()\n      && foundry.utils.getProperty(item, \"flags.ddbimporter.id\") === dItem.id\n      && item.name.replaceAll(\"[Infusion]\", \"\").trim() !== dItem.definition.name\n    )\n  );\n\n  // update.name || update.data?.description || update.data?.weight || update.data?.price || update.data?.quantity\n  const customItems = foundryItems.filter((item) =>\n    foundry.utils.hasProperty(item, \"flags.ddbimporter.id\")\n    && item.system?.quantity !== 0\n    && (foundry.utils.getProperty(item, \"flags.ddbimporter.custom\") === true || foundry.utils.getProperty(item, \"flags.ddbimporter.isCustom\") === true)\n    && customDDBItems.some((dItem) => dItem.id === item.flags.ddbimporter.id\n      && (\n        item.name !== dItem.name\n        || getCustomItemDescription(item.system.description.value) != dItem.description\n        || (foundry.utils.hasProperty(item, \"system.quantity\") && item.system.quantity != dItem.quantity)\n        || (foundry.utils.hasProperty(item, \"system.weight\") && item.system.weight != dItem.weight)\n        //  ||\n        // item.data.price != dItem.cost\n      )\n    )\n  );\n\n  const itemsToMove = foundryItems.filter((item) =>\n    foundry.utils.hasProperty(item, \"flags.ddbimporter.id\")\n    && !foundry.utils.getProperty(item, \"flags.ddbimporter.action\")\n    && foundry.utils.hasProperty(item, \"flags.ddbimporter.containerEntityId\")\n    && ddbItems.some((dItem) =>\n      item.flags.ddbimporter.id === dItem.id\n      && parseInt(item.flags.ddbimporter.containerEntityId) !== parseInt(dItem.containerEntityId)\n    ));\n\n  const itemsToCurrency = game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-currency\")\n    ? foundryItems.filter((item) =>\n      foundry.utils.hasProperty(item, \"flags.ddbimporter.id\")\n      && foundry.utils.hasProperty(item, \"flags.ddbimporter.entityTypeId\")\n      && !foundry.utils.getProperty(item, \"flags.ddbimporter.action\")\n      && !foundry.utils.getProperty(item, \"flags.ddbimporter.custom\")\n      && foundry.utils.hasProperty(item, \"system.currency.gp\")\n      && ddbItems.some((dItem) =>\n        item.flags.ddbimporter.id === dItem.id\n        && !isEqual(dItem.currency, item.system.currency)\n      ))\n    : [];\n\n  const itemsToUpdate = {\n    itemsToEquip,\n    itemsToAttune,\n    itemsToCharge,\n    itemsToQuantity,\n    itemsToName,\n    customItems,\n    itemsToMove,\n    itemsToCurrency,\n  };\n\n  logger.debug(\"Calling DDB Item Update with\", {\n    actor,\n    itemsToUpdate,\n    ddbItems\n  });\n\n  return updateDDBEquipmentStatus(actor, itemsToUpdate, ddbItems);\n\n}\n\nasync function updateActionUseStatus(actor, actionData, actionName) {\n  return new Promise((resolve) => {\n    resolve(updateCharacterCall(actor, \"action/use\", actionData, `Action Use for ${actionName}`));\n  });\n}\n\nasync function updateDDBActionUseStatus(actor, actions) {\n  let promises = [];\n  actions.forEach((rawAction) => {\n    const action = getItemRollData(actor, rawAction._id).item;\n    const actionData = {\n      actionId: action.flags.ddbimporter.id,\n      entityTypeId: action.flags.ddbimporter.entityTypeId,\n      uses: Math.max(0, parseInt(action.system.uses.max) - parseInt(action.system.uses.value)),\n    };\n    promises.push(updateActionUseStatus(actor, actionData, action.name));\n  });\n  return Promise.all(promises);\n}\n\nasync function actionUseStatus(actor, ddbCharacter) {\n  const syncActionReady = actor.flags.ddbimporter?.syncActionReady;\n  if (syncActionReady && !game.settings.get(SETTINGS.MODULE_ID, \"sync-policy-action-use\")) return [];\n\n  let ddbActions = ddbCharacter.data.actions;\n\n  const foundryItems = getFoundryItems(actor);\n\n  const actionsToChange = foundryItems.filter((item) =>\n    (item.flags.ddbimporter?.action || item.type === \"feat\")\n    && item.flags.ddbimporter?.id && item.flags.ddbimporter?.entityTypeId\n    && ddbActions.some((dItem) =>\n      item.flags.ddbimporter.id === dItem.flags.ddbimporter.id\n      && item.flags.ddbimporter.entityTypeId === dItem.flags.ddbimporter.entityTypeId\n      && item.name === dItem.name && item.type === dItem.type\n      && Number.isInteger(parseInt(item.system.uses?.value))\n      && Number.parseInt(item.system.uses.value) !== Number.parseInt(dItem.system.uses.value)\n    )\n  );\n  const actionChanges = updateDDBActionUseStatus(actor, actionsToChange);\n\n  return actionChanges;\n}\n\nexport async function updateDDBCharacter(actor) {\n  const cobaltCheck = await checkCobalt(actor.id);\n\n  if (cobaltCheck.success) {\n    logger.debug(`Cobalt checked`);\n  } else {\n    logger.error(`Cobalt cookie expired, please reset`);\n    logger.error(cobaltCheck.message);\n    throw cobaltCheck.message;\n  }\n\n  const characterId = actor.flags.ddbimporter.dndbeyond.characterId;\n  const syncId = actor.flags[\"ddb-importer\"]?.syncId ? actor.flags[\"ddb-importer\"].syncId + 1 : 0;\n\n  const ddbCharacterOptions = {\n    currentActor: actor,\n    characterId,\n    selectResources: false,\n    enableCompanions: false,\n  };\n  const getOptions = {\n    syncId,\n    localCobaltPostFix: actor.id,\n  };\n  const ddbCharacter = new DDBCharacter(ddbCharacterOptions);\n  const activeUpdateState = ddbCharacter.getCurrentDynamicUpdateState();\n  await ddbCharacter.disableDynamicUpdates();\n  await ddbCharacter.getCharacterData(getOptions);\n\n  if (!ddbCharacter.source.ddb.character.canEdit) {\n    logger.debug(\"Update DDB\", { ddbCharacter, source: ddbCharacter.source });\n    throw new Error(\"User is not allowed to edit character on D&D Beyond.\");\n  }\n\n  logger.debug(\"Current actor:\", foundry.utils.duplicate(actor));\n  logger.debug(\"DDB Parsed data:\", { data: ddbCharacter.data, source: ddbCharacter.source });\n\n  let singlePromises = []\n    .concat(\n      currency(actor, ddbCharacter),\n      hitDice(actor, ddbCharacter),\n      spellSlots(actor, ddbCharacter),\n      spellSlotsPact(actor, ddbCharacter),\n      inspiration(actor, ddbCharacter),\n      exhaustion(actor, ddbCharacter),\n      deathSaves(actor, ddbCharacter),\n      xp(actor, ddbCharacter),\n    ).flat();\n\n  const singleResults = await Promise.all(singlePromises);\n  const hpResults = await hitPoints(actor, ddbCharacter);\n  const spellsPreparedResults = await spellsPrepared(actor, ddbCharacter);\n  const actionStatusResults = await actionUseStatus(actor, ddbCharacter);\n  const nameUpdateResults = await updateCustomNames(actor, ddbCharacter);\n  const addEquipmentResults = await addEquipment(actor, ddbCharacter);\n  const removeEquipmentResults = await removeEquipment(actor, ddbCharacter);\n  const equipmentStatusResults = await equipmentStatus(actor, ddbCharacter, addEquipmentResults);\n  const conditionResults = await conditions(actor, ddbCharacter);\n  // if a known/choice spellcaster\n  // and new spell/ spells removed\n  // for each spell add or remove, e.g.\n  // const spellsData = {\n  //   characterClassId: 52134801,\n  //   spellId: 2019,\n  //   id: 136157,\n  //   entityTypeId: 435869154,\n  //   remove: true,\n  // };\n  // const spellSlots = updateCharacterCall(actor, \"spells\", spellsData);\n  // promises.push(spellSlots);\n\n  actor.setFlag(\"ddb-importer\", \"syncId\", syncId);\n  await ddbCharacter.setActiveSyncSpellsFlag(true);\n\n  // we can now process item attunements and uses (not yet done)\n\n  const results = singleResults.concat(\n    hpResults,\n    nameUpdateResults,\n    addEquipmentResults,\n    spellsPreparedResults,\n    removeEquipmentResults,\n    equipmentStatusResults,\n    actionStatusResults,\n    conditionResults,\n  ).filter((result) => result !== undefined);\n\n  logger.debug(\"Update results\", results);\n  await ddbCharacter.updateDynamicUpdates(activeUpdateState);\n\n  return results;\n}\n\n// Called when characters are updated\n// will dynamically sync status back to DDB\nasync function activeUpdateActor(actor, update) {\n  // eslint-disable-next-line complexity\n  return new Promise((resolve) => {\n\n    const promises = [];\n\n    const actorActiveUpdate = actor.flags.ddbimporter?.activeUpdate;\n\n    if (actorActiveUpdate) {\n      const syncHP = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-hitpoints\");\n      const syncCurrency = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-currency\");\n      const syncSpellSlots = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-spells-slots\");\n      const syncInspiration = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-inspiration\");\n      const syncConditions = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-condition\");\n      const syncDeathSaves = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-deathsaves\");\n      const syncXP = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-xp\");\n\n\n      if (syncHP && (update.system?.attributes?.hp?.value\n        || update.system?.attributes?.hp?.temp)\n      ) {\n        logger.debug(\"Updating DDB Hitpoints...\");\n        promises.push(updateDDBHitPoints(actor));\n      }\n      if (syncHP && update.system?.attributes?.hp?.tempmax) {\n        logger.debug(\"Updating DDB Bonus Hitpoints...\");\n        promises.push(updateTempMaxDDBHitPoints(actor));\n      }\n      if (syncCurrency && update.system?.currency) {\n        logger.debug(\"Updating DDB Currency...\");\n        promises.push(updateDDBCurrency(actor));\n      }\n      if (syncSpellSlots && update.system?.spells) {\n        const spellKeys = Object.keys(update.system.spells);\n        if (spellKeys.includes(\"pact\")) {\n          logger.debug(\"Updating DDB SpellSlots Pack...\");\n          promises.push(updateDDBSpellSlotsPact(actor));\n        }\n        const spellLevelKeys = [\"spell1\", \"spell2\", \"spell3\", \"spell4\", \"spell5\", \"spell6\", \"spell7\", \"spell8\", \"spell9\"];\n        const foundSpells = spellKeys.some((spellKey) => spellLevelKeys.includes(spellKey));\n        if (foundSpells) {\n          logger.debug(\"Updating DDB SpellSlots...\");\n          promises.push(updateDynamicDDBSpellSlots(actor, update));\n        }\n      }\n      if (syncInspiration\n        && (update.system?.attributes?.inspiration === true || update.system?.attributes?.inspiration === false)\n      ) {\n        logger.debug(\"Updating DDB Inspiration...\");\n        promises.push(updateDDBInspiration(actor));\n      }\n      if (syncConditions && update.system?.attributes?.exhaustion) {\n        logger.debug(\"Updating DDB Exhaustion...\");\n        promises.push(updateDDBExhaustion(actor));\n      }\n      if (syncDeathSaves && update.system?.attributes?.death) {\n        logger.debug(\"Updating DDB DeathSaves...\");\n        promises.push(updateDDBDeathSaves(actor));\n      }\n      if (syncXP && update.system?.attributes?.xp) {\n        logger.debug(\"Updating DDB XP...\");\n        promises.push(updateDDBXP(actor));\n      }\n    }\n    resolve(promises);\n\n  });\n}\n\nconst DISABLE_FOUNDRY_UPGRADE = {\n  applyFeatures: false,\n  addFeatures: false,\n  promptAddFeatures: false,\n};\n\n// eslint-disable-next-line complexity\nasync function generateDynamicItemChange(actor, document, update) {\n  const updateItemDetails = {\n    itemsToEquip: [],\n    itemsToAttune: [],\n    itemsToCharge: [],\n    itemsToQuantity: [],\n    itemsToName: [],\n    customItems: [],\n    itemsToMove: [],\n  };\n\n  // console.warn(\"Document\", document);\n  // console.warn(\"ItemUpdate\", update);\n\n  if (foundry.utils.getProperty(document, \"flags.ddbimporter.custom\") === true || foundry.utils.getProperty(document, \"flags.ddbimporter.isCustom\") === true) {\n    if (update.name || update.system?.description || update.system?.weight || update.system?.price || update.system?.quantity) {\n      updateItemDetails.customItems.push(foundry.utils.duplicate(document));\n    }\n  } else {\n    if (update.system?.uses) {\n      updateItemDetails.itemsToCharge.push(foundry.utils.duplicate(document));\n    }\n    if (update.system?.attuned) {\n      updateItemDetails.itemsToAttune.push(foundry.utils.duplicate(document));\n    }\n    if (update.system?.quantity) {\n      // if its a weapon or armor we actually need to push a new one\n      if (!document.flags.ddbimporter?.dndbeyond?.stackable && update.system.quantity > 1) {\n        // Some items are not stackable on DDB\n\n        await document.update({ system: { quantity: 1 } });\n        let newDocument = foundry.utils.duplicate(document.toObject());\n        delete newDocument._id;\n        delete newDocument.flags.ddbimporter.id;\n\n        let results = [];\n        for (let i = 1; i < update.system.quantity; i++) {\n          logger.debug(`Adding item # ${i}`);\n          let newDoc = await actor.createEmbeddedDocuments(\"Item\", [newDocument], DISABLE_FOUNDRY_UPGRADE);\n          results.push(newDoc);\n          // new doc/item push to ddb handled by the add item hook\n        }\n        return results;\n      } else {\n        updateItemDetails.itemsToQuantity.push(foundry.utils.duplicate(document));\n      }\n    }\n    if (update.system?.equipped) {\n      updateItemDetails.itemsToEquip.push(foundry.utils.duplicate(document));\n    }\n    if (update.name) {\n      updateItemDetails.itemsToName.push(foundry.utils.duplicate(document));\n    }\n    if (update.system?.container) {\n      const containerisedDocument = foundry.utils.duplicate(document);\n      setContainerDetails(actor, containerisedDocument);\n      updateItemDetails.itemsToMove.push(containerisedDocument);\n    }\n    if (update.system?.currency) {\n      updateItemDetails.itemsToCurrency.push(foundry.utils.duplicate(document));\n    }\n  }\n\n  logger.debug(\"UpdateItemDetails\", updateItemDetails);\n\n  return updateDDBEquipmentStatus(actor, updateItemDetails, []);\n\n}\n\nasync function updateSpellPrep(actor, document) {\n  return new Promise((resolve) => {\n    const spellSyncFlag = actor.flags.ddbimporter?.activeSyncSpells;\n    if (spellSyncFlag) {\n      logger.debug(\"Updating DDB SpellsPrepared...\");\n      // get spells class\n      const klassName = document.flags.ddbimporter?.dndbeyond?.class;\n      const klass = actor.items.find((item) => item.name === klassName && item.type === \"class\");\n      if (klass) {\n        resolve(updateDDBSpellsPrepared(actor, [document]));\n      } else {\n        resolve([]);\n      }\n    } else {\n      logger.warn(\"Unable to sync spell prep status until character is imported or updated to DDB\");\n      resolve([]);\n    }\n  });\n}\n\n// Called when characters items are updated\n// will dynamically sync status back to DDB\nasync function activeUpdateUpdateItem(document, update) {\n  // eslint-disable-next-line complexity\n  return new Promise((resolve) => {\n\n    // we check to see if this is actually an embedded item\n    const parentActor = document.parent;\n    const actorActiveUpdate = parentActor && parentActor.flags.ddbimporter?.activeUpdate;\n    const ignore = foundry.utils.getProperty(document, \"flags.ddbimporter.ignoreItemUpdate\") ?? false;\n\n    if (!parentActor || !actorActiveUpdate || ignore) {\n      resolve([]);\n    } else {\n      logger.debug(\"Preparing to sync item change to DDB...\");\n      const action = document.flags.ddbimporter?.action || document.type === \"feat\";\n      const syncEquipment = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-equipment\");\n      const syncActionUse = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-action-use\");\n      const syncHD = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-hitdice\");\n      const syncSpellsPrepared = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-spells-prepared\");\n      const isDDBItem = document.flags.ddbimporter?.id;\n      const customItem = document.flags.ddbimporter?.custom || false;\n\n      const customNameAllowed = DICTIONARY.types.inventory.includes(document.type) || document.flags.ddbimporter?.action;\n      if (!customItem && update.name && customNameAllowed) {\n        updateDDBCustomNames(parentActor, [document.toObject()]);\n      }\n\n      logger.debug(\"active update item details\", { action, syncActionUse, isDDBItem });\n      // is this a DDB action, or do we treat this as an item?\n      if (action && syncActionUse && isDDBItem) {\n        if (update.system?.uses) {\n          logger.debug(\"Updating action uses\", update);\n          updateDDBActionUseStatus(parentActor, [foundry.utils.duplicate(document)]);\n        } else {\n          resolve([]);\n        }\n      } else if (document.type === \"class\" && syncHD && update.system?.hitDiceUsed) {\n        logger.debug(\"Updating hitdice on DDB\");\n        resolve(updateDDBHitDice(parentActor, document, update));\n      } else if (document.type === \"spell\" && syncSpellsPrepared\n        && update.system?.preparation && document.system.preparation.mode === \"prepared\"\n      ) {\n        logger.debug(\"Updating DDB SpellsPrepared...\");\n        updateSpellPrep(parentActor, document).then((results) => {\n          logger.debug(\"Spell prep results\", results);\n          const failures = results.find((result) => result.success !== true);\n          const ddbCharacterOptions = {\n            currentActor: parentActor,\n            characterId: undefined,\n            selectResources: false\n          };\n          // when update is refactored to a class, change this\n          const ddbCharacter = new DDBCharacter(ddbCharacterOptions);\n          if (failures) ddbCharacter.setActiveSyncSpellsFlag(false);\n          resolve(results);\n        });\n      } else if (syncEquipment && !action) {\n        resolve(generateDynamicItemChange(parentActor, document, update));\n      }\n    }\n  });\n}\n\n\n// Called when characters items are added/deleted\n// will dynamically sync status back to DDB\nasync function activeUpdateAddOrDeleteItem(document, state) {\n  return new Promise((resolve) => {\n    let promises = [];\n\n    const syncEquipment = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-equipment\");\n    // we check to see if this is actually an embedded item\n    const parentActor = document.parent;\n    const actorActiveUpdate = parentActor && foundry.utils.getProperty(parentActor, \"flags.ddbimporter.activeUpdate\");\n    const ignore = foundry.utils.getProperty(document, \"flags.ddbimporter.ignoreItemUpdate\") ?? false;\n\n    if (parentActor && actorActiveUpdate && syncEquipment && !ignore) {\n      logger.debug(`Checking to see if ${state.toLowerCase()} can be added to DDB...`);\n      const action = document.flags.ddbimporter?.action || [\"feat\", \"class\", \"subclass\", \"spell\", \"background\", \"race\"].includes(document.type);\n      if (!action) {\n        logger.debug(`Attempting to ${state.toLowerCase()} new Item`, document);\n\n        switch (state) {\n          case \"CREATE\": {\n            // const characterId = parseInt(parentActor.flags.ddbimporter.dndbeyond.characterId);\n            // const containerId = document.flags?.ddbimporter?.containerEntityId;\n            // if (Number.isInteger(containerId) && characterId != parseInt(containerId)) {\n            //   // update item container\n            //   logger.debug(`Moving item from container`, document);\n            //   document.update({\n            //     \"flags.ddbimporter.containerEntityId\": characterId,\n            //   });\n            //   const itemData = {\n            //     itemId: parseInt(document.flags.ddbimporter.id),\n            //     containerEntityId: characterId,\n            //     containerEntityTypeId: 1581111423,\n            //   };\n            //   const flavor = { summary: \"Moving item to character\", name: document.name, containerId: foundry.utils.duplicate(containerId) };\n            //   promises.push(updateCharacterCall(parentActor, \"equipment/move\", itemData, flavor));\n            // } else {\n            logger.debug(`Creating item`, document);\n            promises.push(addDDBEquipment(parentActor, [document.toObject()]));\n            // }\n            break;\n          }\n          case \"DELETE\": {\n            // const collectionItems = getItemCollectionItems(parentActor);\n            // const collectionItemDDBIds = collectionItems\n            //   .filter((item) => foundry.utils.hasProperty(item, \"flags.ddbimporter.id\"))\n            //   .map((item) => item.flags.ddbimporter.id);\n            // if (foundry.utils.hasProperty(document, \"flags.ddbimporter.id\")\n            //   && collectionItemDDBIds.includes(document.flags.ddbimporter.id)\n            // ) {\n            //   // we don't have to handle deletes as the item collection move is handled above\n            //   logger.debug(`Moving item to container`, document);\n            // } else {\n            logger.debug(`Deleting item`, document);\n            promises.push(removeDDBEquipment(parentActor, [document.toObject()]));\n            // }\n            // break;\n          }\n          // no default\n        }\n      }\n    }\n    resolve(promises);\n  });\n}\n\n// called when effects are added/deleted/updated\nasync function activeUpdateEffectTrigger(document, state) {\n  return new Promise((resolve) => {\n    let promises = [];\n\n    const syncConditions = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-policy-condition\");\n    // we check to see if this is actually an embedded item\n    const parentActor = document.parent;\n    const actorActiveUpdate = parentActor && parentActor.flags.ddbimporter?.activeUpdate;\n\n    if (parentActor && actorActiveUpdate && syncConditions) {\n      logger.debug(`Preparing to ${state.toLowerCase()} condition on DDB...`);\n      // is it a condition?\n      // is it a suitable type?\n      const condition = getCondition(document.system?.name ?? document.system?.label);\n      // exhaustion is a special case, but also a condition effect, handled by character update\n      const notExhaustion = condition ? condition.ddbId !== 4 : false;\n\n      if (condition && notExhaustion) {\n        logger.debug(`Attempting to ${state.toLowerCase()} Condition`, document);\n        switch (state) {\n          case \"CREATE\":\n            condition.applied = true;\n            promises.push(updateDDBCondition(parentActor, condition));\n            break;\n          case \"UPDATE\":\n            condition.applied = !document.system.disabled;\n            promises.push(updateDDBCondition(parentActor, condition));\n            break;\n          case \"DELETE\":\n            condition.applied = false;\n            promises.push(updateDDBCondition(parentActor, condition));\n            break;\n          // no default\n        }\n      }\n    }\n    resolve(promises);\n  });\n}\n\nexport function activateUpdateHooks() {\n  // check to make sure we can sync back, currently only works for 1 gm user\n  if (SETTINGS.STATUS.activeUpdate()) {\n    Hooks.on(\"updateActor\", activeUpdateActor);\n    Hooks.on(\"updateItem\", activeUpdateUpdateItem);\n    Hooks.on(\"createItem\", (document) => activeUpdateAddOrDeleteItem(document, \"CREATE\"));\n    Hooks.on(\"deleteItem\", (document) => activeUpdateAddOrDeleteItem(document, \"DELETE\"));\n    Hooks.on(\"createActiveEffect\", (document) => activeUpdateEffectTrigger(document, \"CREATE\"));\n    Hooks.on(\"updateActiveEffect\", (document) => activeUpdateEffectTrigger(document, \"UPDATE\"));\n    Hooks.on(\"deleteActiveEffect\", (document) => activeUpdateEffectTrigger(document, \"DELETE\"));\n  }\n}\n","import DDBMuncher from \"../apps/DDBMuncher.js\";\nimport { getCobalt, setCobalt, checkCobalt } from \"../lib/Secrets.js\";\nimport SETTINGS from \"../settings.js\";\n\nexport default class DDBCookie extends FormApplication {\n\n  constructor(options, actor = null, localCobalt = false) {\n    super(options);\n    this.localCobalt = localCobalt;\n    this.actor = actor;\n  }\n\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.id = \"ddb-importer-cobalt-change\";\n    options.template = \"modules/ddb-importer/handlebars/cobalt.hbs\";\n    options.width = 500;\n    return options;\n  }\n\n  get title() { // eslint-disable-line class-methods-use-this\n    // improve localisation\n    // game.i18n.localize(\"\")\n    return \"DDB Importer Cobalt Cookie\";\n  }\n\n  /** @override */\n  async getData() {\n    const keyPostFix = this.localCobalt && this.actor ? this.actor.id : null;\n    const cobalt = getCobalt(keyPostFix);\n    const cobaltStatus = cobalt == \"\" ? { success: true } : await checkCobalt();\n    const expired = !cobaltStatus.success;\n\n    return {\n      expired: expired,\n      cobaltCookie: cobalt,\n      localCobalt: this.localCobalt && this.actor,\n      actor: this.actor,\n    };\n  }\n\n  /** @override */\n  async _updateObject(event, formData) {\n    event.preventDefault();\n    const keyPostFix = this.localCobalt && this.actor ? this.actor.id : null;\n    await setCobalt(formData['cobalt-cookie'], keyPostFix);\n\n    const cobaltStatus = await checkCobalt();\n    if (!cobaltStatus.success) {\n      new DDBCookie().render(true);\n    } else {\n      const callMuncher = game.settings.get(SETTINGS.MODULE_ID, \"settings-call-muncher\");\n\n      if (callMuncher) {\n        game.settings.set(SETTINGS.MODULE_ID, \"settings-call-muncher\", false);\n        new DDBMuncher().render(true);\n      }\n    }\n  }\n}\n","import PatreonHelper from \"../lib/PatreonHelper.js\";\nimport DDBMuncher from \"./DDBMuncher.js\";\nimport SETTINGS from \"../settings.js\";\n\nexport class DDBKeyChange extends FormApplication {\n\n  constructor({ local = false, success = null } = {}, options = {}) {\n    options.template = local\n      ? \"modules/ddb-importer/handlebars/local-key.hbs\"\n      : \"modules/ddb-importer/handlebars/key-change.hbs\";\n    super({}, options);\n    this.local = local;\n    this.success = success;\n  }\n\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      id: \"ddb-importer-key-change\",\n      // template: \"modules/ddb-importer/handlebars/key-change.hbs\",\n      width: 500,\n    });\n  }\n\n  get title() { // eslint-disable-line class-methods-use-this\n    // improve localisation\n    // game.i18n.localize(\"\")\n    return this.local ? \"DDB Importer Local Key\" : \"DDB Importer Key Change\";\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n    html.find(\"#patreon-button\").click(async (event) => {\n      event.preventDefault();\n      PatreonHelper.linkToPatreon();\n    });\n  }\n\n  /** @override */\n  async getData() { // eslint-disable-line class-methods-use-this\n    const key = PatreonHelper.getPatreonKey(this.local);\n    const setupConfig = {\n      \"beta-key\": key ?? \"\",\n    };\n    const patreonUser = key && key !== \"\"\n      ? PatreonHelper.getPatreonUser(this.local)\n      : \"\";\n\n    const newKey = key === null || !key || key === \"\";\n    const check = newKey\n      ? { success: true, message: \"\" }\n      : await PatreonHelper.getPatreonValidity(key);\n\n    return {\n      success: (check && check.success) ? check.success : false,\n      message: (check && check.message) ? check.message : \"Unable to check patreon key status\",\n      setupConfig: setupConfig,\n      patreonLinked: patreonUser && patreonUser != \"\",\n      patreonUser: patreonUser ?? \"\",\n      local: this.local,\n    };\n  }\n\n  /** @override */\n  // eslint-disable-next-line no-unused-vars\n  async _updateObject(event, formData) { // eslint-disable-line class-methods-use-this\n    event.preventDefault();\n    const currentKey = PatreonHelper.getPatreonKey(this.local);\n    if (currentKey !== formData['beta-key']) {\n      await PatreonHelper.setPatreonKey(formData['beta-key'], this.local);\n      await PatreonHelper.setPatreonTier(this.local);\n      if (this.success) {\n        this.success();\n      }\n    }\n\n    const callMuncher = game.settings.get(SETTINGS.MODULE_ID, \"settings-call-muncher\");\n\n    if (callMuncher) {\n      game.settings.set(SETTINGS.MODULE_ID, \"settings-call-muncher\", false);\n      new DDBMuncher().render(true);\n    }\n\n  }\n}\n\nexport async function isValidKey() {\n  let validKey = false;\n\n  const key = PatreonHelper.getPatreonKey();\n  if (key === \"\") {\n    validKey = true;\n  } else {\n    const check = await PatreonHelper.getPatreonValidity(key);\n    if (check.success && check.data) {\n      validKey = true;\n    } else {\n      validKey = false;\n      game.settings.set(SETTINGS.MODULE_ID, \"settings-call-muncher\", true);\n      new DDBKeyChange().render(true);\n    }\n  }\n  return validKey;\n}\n","import DICTIONARY from \"../dictionary.js\";\nimport { generateOverrideChange } from \"./effects.js\";\n\nfunction buildBaseOverrideEffect(label) {\n  let effect = {\n    changes: [],\n    duration: {\n      seconds: null,\n      startTime: null,\n      rounds: null,\n      turns: null,\n      startRound: null,\n      startTurn: null,\n    },\n    origin: \"Ability.Override\",\n    tint: \"\",\n    disabled: false,\n    transfer: true,\n    selectedKey: [],\n    img: \"icons/svg/anchor.svg\",\n    flags: {\n      dae: { transfer: true },\n      ddbimporter: { disabled: false, itemId: null, entityTypeId: null }\n    },\n  };\n  effect.name = label;\n  return effect;\n}\n\n\nexport function abilityOverrideEffects(overrides) {\n  let effects = buildBaseOverrideEffect(\"Ability Overrides\");\n\n  DICTIONARY.character.abilities.forEach((ability) => {\n    if (overrides[ability.value] === 0) return;\n    effects.changes.push(generateOverrideChange(overrides[ability.value], 50, `system.abilities.${ability.value}.value`));\n  });\n\n  return effects;\n}\n","import FolderHelper from \"../../lib/FolderHelper.js\";\nimport Iconizer from \"../../lib/Iconizer.js\";\nimport logger from \"../../logger.js\";\nimport DDBItemImporter from \"../../lib/DDBItemImporter.js\";\n\nasync function getCompendiumItemSpells(spells) {\n  const getItemsOptions = {\n    looseMatch: true,\n    keepId: true,\n    deleteCompendiumId: false,\n  };\n  const itemImporter = new DDBItemImporter(\"spell\", spells);\n  await itemImporter.init();\n  const compendiumSpells = await itemImporter.loadPassedItemsFromCompendium(spells, getItemsOptions);\n  itemImporter.removeItems(compendiumSpells);\n  const srdSpells = await itemImporter.getSRDCompendiumItems(true, true);\n  const foundSpells = compendiumSpells.concat(srdSpells);\n\n  const itemSpells = foundSpells.map((result) => {\n    return {\n      magicItem: {\n        _id: result._id,\n        id: result._id,\n        pack: result.flags.ddbimporter.pack,\n        img: result.img,\n        name: result.name,\n        flatDc: result.flags.ddbimporter.dndbeyond?.overrideDC,\n        dc: result.flags.ddbimporter.dndbeyond?.dc,\n      },\n      _id: result._id,\n      name: result.name,\n      compendium: true,\n    };\n  });\n\n  return [foundSpells, itemSpells];\n}\n\n/**\n * This adds magic item spells to an item, by looking in compendium or from a world.\n */\nexport async function addMagicItemSpells(input) {\n  // check for existing spells in spell compendium & srdCompendium\n  const [compendiumSpells, compendiumItemSpells] = await getCompendiumItemSpells(input.itemSpells);\n  // if spells not found create world version\n  const itemImporter = new DDBItemImporter(\"spell\", input.itemSpells);\n  itemImporter.removeItems(compendiumSpells);\n  const remainingSpells = {\n    itemSpells: await Iconizer.updateMagicItemImages(itemImporter.documents),\n  };\n  const worldSpells = remainingSpells.length > 0\n    ? await FolderHelper.updateFolderItems(\"itemSpells\", remainingSpells)\n    : [];\n  const itemSpells = worldSpells.concat(compendiumItemSpells);\n\n  logger.debug(\"itemSpells fetched\", itemSpells);\n\n  // scan the inventory for each item with spells and copy the imported data over\n  input.inventory.forEach((item) => {\n    logger.debug(\"replacing spells for item\", item);\n    const magicItemsSpells = foundry.utils.getProperty(item, \"flags.magicitems.spells\");\n    if (magicItemsSpells) {\n      logger.debug(\"item.flags.magicitems.spells\", magicItemsSpells);\n      for (let [i, spell] of Object.entries(magicItemsSpells)) {\n        const itemSpell = itemSpells.find((iSpell) => iSpell.name === spell.name\n          && (iSpell.compendium || iSpell.magicItem.subFolder === item.name)\n        );\n        if (itemSpell) {\n          for (const [key, value] of Object.entries(itemSpell.magicItem)) {\n            item.flags.magicitems.spells[i][key] = value;\n          }\n        } else if (!game.user.can(\"ITEM_CREATE\")) {\n          ui.notifications.warn(`Magic Item ${item.name} cannot be enriched because of lacking player permissions`);\n        } else {\n          ui.notifications.warn(`Magic Item ${item.name}: cannot add spell ${spell.name}`);\n        }\n      }\n    }\n    // {\n    //   magicItem: {\n    //     _id: result._id,\n    //     id: result._id,\n    //     pack: result.flags.ddbimporter.pack,\n    //     img: result.img,\n    //     name: result.name,\n    //     flatDc: result.flags.ddbimporter.dndbeyond?.overrideDC,\n    //     dc: result.flags.ddbimporter.dndbeyond?.dc,\n    //   },\n    //   _id: result._id,\n    //   name: result.name,\n    //   compendium: true,\n    // };\n    const itemsWithSpells = foundry.utils.getProperty(item, \"flags.items-with-spells-5e.item-spells\");\n    if (itemsWithSpells) {\n      logger.debug(\"item.flags.items-with-spells-5e.item-spells\", item.flags[\"items-with-spells-5e\"][\"item-spells\"]);\n      itemsWithSpells.forEach((spellData, i) => {\n        const itemSpell = itemSpells.find((iSpell) => iSpell.name === spellData.flags.ddbimporter.spellName\n          && (iSpell.compendium || iSpell.magicItem.subFolder === item.name)\n        );\n        if (itemSpell) {\n          item.flags[\"items-with-spells-5e\"][\"item-spells\"][i].uuid = `Compendium.${itemSpell.magicItem.pack}.${itemSpell._id}`;\n          if (item._id) {\n            foundry.utils.setProperty(item.flags[\"items-with-spells-5e\"][\"item-spells\"][i], \"flags.items-with-spells-5e.item-spells.parent-item\", item._id);\n          }\n        } else if (!game.user.can(\"ITEM_CREATE\")) {\n          ui.notifications.warn(`Magic Item ${item.name} cannot be enriched because of lacking player permissions`);\n        } else {\n          ui.notifications.warn(`Magic Item ${item.name}: cannot add spell ${spellData.name}`);\n        }\n      });\n    }\n  });\n}\n","import utils from \"../lib/utils.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport CompendiumHelper from \"../lib/CompendiumHelper.js\";\nimport MuncherSettings from \"../lib/MuncherSettings.js\";\nimport PatreonHelper from \"../lib/PatreonHelper.js\";\nimport logger from \"../logger.js\";\nimport DDBCharacter from \"../parser/DDBCharacter.js\";\nimport Iconizer from \"../lib/Iconizer.js\";\nimport { updateDDBCharacter } from \"../updater/character.js\";\nimport { generateCharacterExtras } from \"../parser/DDBExtras.js\";\nimport DICTIONARY from \"../dictionary.js\";\nimport { getCobalt, isLocalCobalt, deleteLocalCobalt } from \"../lib/Secrets.js\";\nimport DDBCookie from \"../apps/DDBCookie.js\";\nimport { DDBKeyChange } from \"../apps/DDBKeyChange.js\";\nimport { abilityOverrideEffects } from \"../effects/abilityOverrides.js\";\nimport { setConditions } from \"../parser/special/conditions.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBMacros from \"../effects/DDBMacros.js\";\nimport DDBItemImporter from \"../lib/DDBItemImporter.js\";\nimport { addMagicItemSpells } from \"../parser/item/itemSpells.js\";\nimport DDBHelper from \"../lib/DDBHelper.js\";\nimport ExternalAutomations from \"../effects/external/ExternalAutomations.js\";\nimport { createInfusedItems } from \"../parser/item/infusions.js\";\n\nexport default class DDBCharacterManager extends FormApplication {\n  constructor(options, actor, ddbCharacter = null) {\n    super(options);\n    this.actor = game.actors.get(actor._id);\n    this.migrateMetadata();\n    this.actorOriginal = foundry.utils.duplicate(this.actor);\n    logger.debug(\"Current Actor (Original):\", this.actorOriginal);\n    this.result = {};\n    this.nonMatchedItemIds = [];\n    this.settings = {};\n    this.ddbCharacter = ddbCharacter;\n  }\n\n  migrateMetadata() {\n    if (this.actor.flags?.ddbimporter?.dndbeyond) {\n      const url = this.actor.flags.ddbimporter.dndbeyond.url;\n\n      if (url && !this.actor.flags.ddbimporter.characterId) {\n        const characterId = DDBCharacter.getCharacterId(url);\n        if (characterId) {\n          this.actor.flags.ddbimporter.dndbeyond.characterId = characterId;\n          this.actor.flags.ddbimporter.dndbeyond.url = url;\n        } else {\n          // clear the url, because it's malformed anyway\n          this.actor.flags.ddbimporter.dndbeyond.url = null;\n        }\n      }\n    }\n  }\n\n  static renderPopup(type, url) {\n    if (SETTINGS.POPUPS[type] && !SETTINGS.POPUPS[type].close) {\n      SETTINGS.POPUPS[type].focus();\n      SETTINGS.POPUPS[type].location.href = url;\n    } else {\n      const ratio = window.innerWidth / window.innerHeight;\n      const width = Math.round(window.innerWidth * 0.5);\n      const height = Math.round(window.innerWidth * 0.5 * ratio);\n      SETTINGS.POPUPS[type] = window.open(\n        url,\n        \"ddb_sheet_popup\",\n        `resizeable,scrollbars,location=no,width=${width},height=${height},toolbar=1`\n      );\n    }\n    return true;\n  }\n\n  /**\n   * Define default options\n   */\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.title = game.i18n.localize(\"ddb-importer.module-name\");\n    options.template = \"modules/ddb-importer/handlebars/character.hbs\";\n    options.width = 900;\n    options.height = \"auto\";\n    options.classes = [\"ddbimporter\", \"sheet\"];\n    options.tabs = [{ navSelector: \".tabs\", contentSelector: \"form\", initial: \"import\" }];\n\n    return options;\n  }\n\n  showCurrentTask(title, message = null, isError = false) {\n    let element = $(this.html).find(\".task-name\");\n    element.html(`<h2 ${isError ? \" style='color:red'\" : \"\"}>${title}</h2>${message ? `<p>${message}</p>` : \"\"}`);\n    $(this.html).parent().parent().css(\"height\", \"auto\");\n  }\n\n  static getCharacterUpdatePolicyTypes(invert = false) {\n    let itemTypes = [\"background\", \"race\"];\n\n    if (invert) {\n      if (!game.settings.get(\"ddb-importer\", \"character-update-policy-class\")) {\n        itemTypes.push(\"class\");\n        itemTypes.push(\"subclass\");\n      }\n      if (!game.settings.get(\"ddb-importer\", \"character-update-policy-feat\")) itemTypes.push(\"feat\");\n      if (!game.settings.get(\"ddb-importer\", \"character-update-policy-weapon\")) itemTypes.push(\"weapon\");\n      if (!game.settings.get(\"ddb-importer\", \"character-update-policy-equipment\"))\n        itemTypes = itemTypes.concat(DICTIONARY.types.equipment);\n      if (!game.settings.get(\"ddb-importer\", \"character-update-policy-spell\")) itemTypes.push(\"spell\");\n    } else {\n      if (game.settings.get(\"ddb-importer\", \"character-update-policy-class\")) {\n        itemTypes.push(\"class\");\n        itemTypes.push(\"subclass\");\n      }\n      if (game.settings.get(\"ddb-importer\", \"character-update-policy-feat\")) itemTypes.push(\"feat\");\n      if (game.settings.get(\"ddb-importer\", \"character-update-policy-weapon\")) itemTypes.push(\"weapon\");\n      if (game.settings.get(\"ddb-importer\", \"character-update-policy-equipment\"))\n        itemTypes = itemTypes.concat(DICTIONARY.types.equipment);\n      if (game.settings.get(\"ddb-importer\", \"character-update-policy-spell\")) itemTypes.push(\"spell\");\n    }\n    return itemTypes;\n  }\n\n  /**\n   * Returns a combined array of all items to process, filtered by the user's selection on what to skip and what to include\n   * @param {object} result object containing all character items sectioned as individual properties\n   * @param {array[string]} sections an array of object properties which should be filtered\n   */\n  filterItemsByUserSelection(invert = false) {\n    let items = [];\n    const validItemTypes = DDBCharacterManager.getCharacterUpdatePolicyTypes(invert);\n\n    for (const section of SETTINGS.FILTER_SECTIONS) {\n      items = items.concat(this.result[section]).filter((item) => validItemTypes.includes(item.type));\n    }\n    return items;\n  }\n\n  filterActorItemsByUserSelection(invert = false) {\n    const validItemTypes = DDBCharacterManager.getCharacterUpdatePolicyTypes(invert);\n\n    const items = this.actorOriginal.items.filter((item) => validItemTypes.includes(item.type));\n\n    return items;\n  }\n\n  /**\n   * Loops through a characters items and updates flags\n   * @param {*} items\n   */\n  async copySupportedCharacterItemFlags(items) {\n    items.forEach((item) => {\n      const originalItem = this.actorOriginal.items.find(\n        (originalItem) => item.name === originalItem.name && item.type === originalItem.type\n      );\n      if (originalItem) {\n        DDBItemImporter.copySupportedItemFlags(originalItem, item);\n      }\n    });\n  }\n\n  copyExistingJournalNotes() {\n    if (!this.actorOriginal) return;\n    const journalFields = [\n      \"notes1name\",\n      \"notes2name\",\n      \"notes3name\",\n      \"notes4name\",\n      \"notes1\",\n      \"notes2\",\n      \"notes3\",\n      \"notes4\",\n      \"notes\",\n    ];\n    journalFields.forEach((field) => {\n      if (this.actorOriginal.system.details[field]) {\n        this.actor.system.details[field] = this.actorOriginal.system.details[field];\n      }\n    });\n  }\n\n  async copyCharacterItemEffects(items) {\n    return new Promise((resolve) => {\n      resolve(\n        items.map((item) => {\n          const originalItem = this.actorOriginal.items.find((originalItem) =>\n            item.name === originalItem.name\n            && item.type === originalItem.type\n            && item.flags?.ddbimporter?.id === originalItem.flags?.ddbimporter?.id\n          );\n          if (originalItem) {\n            if (!item.effects) item.effects = [];\n            if (originalItem.effects) {\n              logger.info(`Copying Effects for ${originalItem.name}`);\n              item.effects = originalItem.effects.map((m) => {\n                delete m._id;\n                return m;\n              });\n            }\n          }\n          return item;\n        })\n      );\n    });\n  }\n\n  /**\n   * Removes items\n   * @param {*} items\n   * @param {*} itemsToRemove\n   */\n  static async removeItems(items, itemsToRemove) {\n    return new Promise((resolve) => {\n      resolve(\n        items.filter(\n          (item) =>\n            !itemsToRemove.some((originalItem) => {\n              const originalNameMatch = originalItem.flags?.ddbimporter?.originalItemName\n                ? originalItem.flags.ddbimporter.originalItemName === item.name\n                : false;\n              const nameMatch = item.name === originalItem.name || originalNameMatch;\n              return nameMatch && item.type === originalItem.type;\n            })\n        )\n      );\n    });\n  }\n\n  /**\n   * Deletes items from the inventory bases on which sections a user wants to update\n   * Possible sections:\n   * - class\n   * - feat\n   * - weapon\n   * - equipment\n   * - inventory: consumable, loot, tool and container\n   * - spell\n   */\n  async clearItemsByUserSelection(excludedList = []) {\n    const includedItems = DDBCharacterManager.getCharacterUpdatePolicyTypes();\n    // collect all items belonging to one of those inventory item categories\n    const ownedItems = this.actor.getEmbeddedCollection(\"Item\");\n    const toRemove = ownedItems\n      .filter(\n        (item) =>\n          includedItems.includes(item.type)\n          && !excludedList.some((excluded) => excluded._id === item.id)\n          && !this.nonMatchedItemIds.includes(item.id)\n      )\n      .filter((item) => !item.flags.ddbimporter?.ignoreItemImport)\n      .map((item) => item.id);\n\n    logger.debug(\"Removing the following character items\", toRemove);\n    if (toRemove.length > 0) {\n      await this.actor.deleteEmbeddedDocuments(\"Item\", toRemove, {\n        itemsWithSpells5e: { alsoDeleteChildSpells: false }\n      });\n    }\n    return toRemove;\n  }\n\n  async updateImage() {\n    const data = this.ddbCharacter.source.ddb;\n    logger.debug(\"Checking if image needs updating\");\n    // updating the image?\n    let imagePath = this.actor.img;\n    const decorations = data.character.decorations;\n    const userHasPermission = !(game.settings.get(\"ddb-importer\", \"restrict-to-trusted\") && !game.user.isTrusted);\n    if (\n      userHasPermission\n      && decorations?.avatarUrl\n      && decorations.avatarUrl !== \"\"\n      && (!imagePath || imagePath.includes(\"mystery-man\") || this.settings.updatePolicyImage)\n    ) {\n      this.showCurrentTask(\"Uploading avatar image\");\n      const filename = utils.referenceNameString(`${data.character.id}-${data.character.name}`);\n\n      const uploadDirectory = game.settings.get(\"ddb-importer\", \"image-upload-directory\").replace(/^\\/|\\/$/g, \"\");\n      imagePath = await FileHelper.uploadRemoteImage(decorations.avatarUrl, uploadDirectory, filename);\n      this.result.character.img = imagePath;\n      if (decorations?.frameAvatarUrl && decorations.frameAvatarUrl !== \"\") {\n        const framePath = await FileHelper.uploadRemoteImage(decorations.frameAvatarUrl, uploadDirectory, `frame-${filename}`);\n        this.result.character.flags.ddbimporter[\"framePath\"] = framePath;\n      }\n    } else {\n      this.result.character.img = this.actor.img;\n    }\n\n    if (this.actorOriginal.prototypeToken.texture.src.includes(\"mystery-man\")) {\n      foundry.utils.setProperty(this.result.character, \"prototypeToken.texture.src\", this.result.character.img);\n    } else if (foundry.utils.hasProperty(this.actorOriginal, \"prototypeToken.texture.src\")) {\n      foundry.utils.setProperty(this.result.character, \"prototypeToken.texture.src\", this.actorOriginal.prototypeToken.texture.src);\n    }\n  }\n\n\n  static async itemsMunched() {\n    const itemCompendium = await CompendiumHelper.getCompendiumType(\"item\", false);\n    const itemsMunched = itemCompendium ? (await itemCompendium.index.size) !== 0 : false;\n    return itemsMunched;\n  }\n\n  /* -------------------------------------------- */\n\n  async getData() {\n    // loads settings for actor\n    this.importSettings = MuncherSettings.getCharacterImportSettings();\n    const useLocalPatreonKey = this.actor.flags?.ddbimporter?.useLocalPatreonKey;\n\n    const characterId = this.actor.flags?.ddbimporter?.dndbeyond?.characterId;\n    this.dmSyncEnabled = characterId && this.importSettings.tiers.all;\n    this.activateListenersplayerSyncEnabled = characterId && useLocalPatreonKey;\n    const syncEnabled = characterId && (this.importSettings.tiers.all || useLocalPatreonKey);\n\n    const trustedUsersOnly = game.settings.get(\"ddb-importer\", \"restrict-to-trusted\");\n    const allowAllSync = game.settings.get(\"ddb-importer\", \"allow-all-sync\");\n    const syncOnly = trustedUsersOnly && allowAllSync && !game.user.isTrusted;\n\n    const localCobalt = isLocalCobalt(this.actor.id);\n    const cobaltCookie = getCobalt(this.actor.id);\n    const cobaltSet = localCobalt && cobaltCookie && cobaltCookie != \"\";\n\n    const dynamicSync = game.settings.get(\"ddb-importer\", \"dynamic-sync\");\n    const updateUser = game.settings.get(\"ddb-importer\", \"dynamic-sync-user\");\n    const gmSyncUser = game.user.isGM && game.user.id == updateUser;\n    const dynamicUpdateAllowed = dynamicSync && gmSyncUser && this.importSettings.tiers.experimentalMid;\n    const dynamicUpdateStatus = this.actor.flags?.ddbimporter?.activeUpdate;\n    const resourceSelection = !foundry.utils.hasProperty(this.actor, \"flags.ddbimporter.resources.ask\")\n      || foundry.utils.getProperty(this.actor, \"flags.ddbimporter.resources.ask\") === true;\n\n    const itemCompendium = await CompendiumHelper.getCompendiumType(\"item\", false);\n    this.itemsMunched = itemCompendium ? (await itemCompendium.index.size) !== 0 : false;\n\n    this.actorSettings = {\n      actor: this.actor,\n      localCobalt: localCobalt,\n      cobaltSet: cobaltSet,\n      syncEnabled: syncEnabled && this.itemsMunched,\n      importAllowed: !syncOnly,\n      itemsMunched: this.itemsMunched,\n      dynamicUpdateAllowed,\n      dynamicUpdateStatus,\n      resourceSelection,\n      useLocalPatreonKey: useLocalPatreonKey && this.itemsMunched,\n    };\n\n    return foundry.utils.mergeObject(this.importSettings, this.actorSettings);\n  }\n\n  /* -------------------------------------------- */\n\n  activateListeners(html) {\n    super.activateListeners(html);\n    // watch the change of the import-policy-selector checkboxes\n    $(html)\n      .find(\n        [\n          '.import-policy input[type=\"checkbox\"]',\n          '.advanced-import-config input[type=\"checkbox\"]',\n          '.effect-policy input[type=\"checkbox\"]',\n          '.effect-import-config input[type=\"checkbox\"]',\n          '.extras-import-config input[type=\"checkbox\"]',\n          '.import-config input[type=\"checkbox\"]',\n        ].join(\",\")\n      )\n      .on(\"change\", (event) => {\n        this.html = html;\n        MuncherSettings.updateActorSettings(html, event);\n      });\n\n    $(html)\n      .find(\"#default-effects\")\n      .on(\"click\", async (event) => {\n        event.preventDefault();\n        MuncherSettings.setRecommendedCharacterActiveEffectSettings(html);\n      });\n\n    $(html)\n      .find(['.resource-selection input[type=\"checkbox\"]'].join(\",\"))\n      .on(\"change\", async (event) => {\n        const updateData = { flags: { ddbimporter: { resources: { ask: event.currentTarget.checked } } } };\n        await this.actor.update(updateData);\n      });\n\n    $(html)\n      .find('.sync-policy input[type=\"checkbox\"]')\n      .on(\"change\", (event) => {\n        game.settings.set(\n          \"ddb-importer\",\n          \"sync-policy-\" + event.currentTarget.dataset.section,\n          event.currentTarget.checked\n        );\n      });\n\n    $(html)\n      .find(\"#dndbeyond-character-dynamic-update\")\n      .on(\"change\", async (event) => {\n        const activeUpdateData = { flags: { ddbimporter: { activeUpdate: event.currentTarget.checked } } };\n        await this.actor.update(activeUpdateData);\n      });\n\n    $(html)\n      .find(\"#dndbeyond-character-import-start\")\n      .on(\"click\", async (event) => {\n        // retrieve the character data from the proxy\n        event.preventDefault();\n        this.html = html;\n\n        try {\n          $(html).find(\"#dndbeyond-character-import-start\").prop(\"disabled\", true);\n          this.showCurrentTask(\"Getting Character data\");\n          const characterId = this.actor.flags.ddbimporter.dndbeyond.characterId;\n          const ddbCharacterOptions = {\n            currentActor: this.actor,\n            characterId,\n            selectResources: true,\n            enableCompanions: true,\n          };\n          const getOptions = {\n            syncId: null,\n            localCobaltPostFix: this.actor.id,\n          };\n          this.ddbCharacter = new DDBCharacter(ddbCharacterOptions);\n          await this.ddbCharacter.getCharacterData(getOptions);\n          logger.debug(\"import.js getCharacterData result\", this.ddbCharacter);\n          if (game.settings.get(\"ddb-importer\", \"debug-json\")) {\n            FileHelper.download(JSON.stringify(this.ddbCharacter.source), `${characterId}.json`, \"application/json\");\n          }\n          if (this.ddbCharacter.source?.success) {\n            // begin parsing the character data\n            await this.processCharacterData();\n            this.showCurrentTask(\"Loading Character data\", \"Done.\", false);\n            logger.debug(\"Character Load complete\", { ddbCharacter: this.ddbCharacter, result: this.result, actor: this.actor, actorOriginal: this.actorOriginal });\n            this.close();\n          } else {\n            this.showCurrentTask(this.ddbCharacter.source.message, null, true);\n            return false;\n          }\n        } catch (error) {\n          switch (error.message) {\n            case \"ImportFailure\":\n              logger.error(\"Failure\", { ddbCharacter: this.ddbCharacter, result: this.result });\n              break;\n            case \"Forbidden\":\n              this.showCurrentTask(\"Error retrieving Character: \" + error, error, true);\n              break;\n            default:\n              logger.error(error);\n              logger.error(error.stack);\n              this.showCurrentTask(\"Error processing Character: \" + error, error, true);\n              logger.error(\"Failure\", { ddbCharacter: this.ddbCharacter, result: this.result });\n              break;\n          }\n          return false;\n        }\n\n        $(html).find(\"#dndbeyond-character-import-start\").prop(\"disabled\", false);\n        return true;\n      });\n\n    $(html)\n      .find(\"#dndbeyond-character-update\")\n      .on(\"click\", async () => {\n        this.html = html;\n        try {\n          $(html).find(\"#dndbeyond-character-update\").prop(\"disabled\", true);\n          await updateDDBCharacter(this.actor).then((result) => {\n            const updateNotes = result\n              .flat()\n              .filter((r) => r !== undefined)\n              .map((r) => r.message)\n              .join(\" \");\n            logger.debug(updateNotes);\n            this.showCurrentTask(\"Update complete\", updateNotes);\n            $(html).find(\"#dndbeyond-character-update\").prop(\"disabled\", false);\n          });\n        } catch (error) {\n          logger.error(error);\n          logger.error(error.stack);\n          this.showCurrentTask(\"Error updating character\", error, true);\n        }\n      });\n\n    $(html)\n      .find(\"#delete-local-cobalt\")\n      .on(\"click\", async () => {\n        this.html = html;\n        try {\n          deleteLocalCobalt(this.actor.id);\n          $(html).find(\"#delete-local-cobalt\").prop(\"disabled\", true);\n          $(html).find(\"#set-local-cobalt\").text(\"Add Cobalt Cookie\");\n        } catch (error) {\n          logger.error(error);\n          logger.error(error.stack);\n          this.showCurrentTask(\"Error deleting local cookie\", error, true);\n        }\n      });\n\n    $(html)\n      .find(\"#set-local-cobalt\")\n      .on(\"click\", async () => {\n        this.html = html;\n        try {\n          new DDBCookie({}, this.actor, true).render(true);\n          $(html).find(\"#delete-local-cobalt\").prop(\"disabled\", false);\n          $(html).find(\"#set-local-cobalt\").text(\"Update Cobalt Cookie\");\n        } catch (error) {\n          logger.error(error);\n          logger.error(error.stack);\n          this.showCurrentTask(\"Error setting local cookie\", error, true);\n        }\n      });\n\n    $(html)\n      .find(\"#delete-local-patreon-key\")\n      .on(\"click\", async () => {\n        this.html = html;\n        try {\n          await PatreonHelper.setPatreonKey(null, true);\n          await this.actor.update({ flags: { ddbimporter: { useLocalPatreonKey: false } } });\n          $(html).find(\"#delete-local-patreon-key\").prop(\"disabled\", true);\n          $(html).find(\"#set-local-patreon-key\").text(\"Add Patreon Key\");\n          if (!this.dmSyncEnabled) {\n            $(html).find(\"#dndbeyond-character-update\").prop(\"disabled\", true);\n            $(html).find(\"#dndbeyond-character-update\").text(\"D&D Beyond Update Available to Patreon Supporters\");\n          }\n        } catch (error) {\n          logger.error(error);\n          logger.error(error.stack);\n          this.showCurrentTask(\"Error deleting local cookie\", error, true);\n        }\n      });\n\n    $(html)\n      .find(\"#set-local-patreon-key\")\n      .on(\"click\", async () => {\n        this.html = html;\n        const updateActorState = async () => {\n          await this.actor.update({ flags: { ddbimporter: { useLocalPatreonKey: true } } });\n          $(html).find(\"#delete-local-patreon-key\").prop(\"disabled\", false);\n          $(html).find(\"#set-local-patreon-key\").text(\"Update Patreon Key\");\n          if (this.itemsMunched) {\n            $(html).find(\"#dndbeyond-character-update\").prop(\"disabled\", false);\n            $(html).find(\"#dndbeyond-character-update\").text(\"Update D&D Beyond with changes\");\n          } else {\n            $(html).find(\"#dndbeyond-character-update\").text(\"Your DM needs to import D&D Beyond items and spells into the DDB compendiums first.\");\n          }\n        };\n        try {\n          const existingKey = await PatreonHelper.getPatreonKey(true);\n          if (!this.actor.flags.ddbimporter?.useLocalPatreonKey && existingKey && existingKey !== \"\") {\n            await updateActorState();\n          } else {\n            new DDBKeyChange({\n              local: true,\n              success: updateActorState,\n            }).render(true);\n          }\n        } catch (error) {\n          logger.error(error);\n          logger.error(error.stack);\n          this.showCurrentTask(\"Error setting local patreon key\", error, true);\n        }\n      });\n\n    $(html)\n      .find(\"#dndbeyond-character-extras-start\")\n      .on(\"click\", async () => {\n        this.html = html;\n        try {\n          $(html).find(\"#dndbeyond-character-extras-start\").prop(\"disabled\", true);\n          this.showCurrentTask(\"Fetching character data\");\n          const characterId = this.actor.flags.ddbimporter.dndbeyond.characterId;\n          const ddbCharacterOptions = {\n            currentActor: this.actor,\n            ddb: null,\n            characterId,\n            selectResources: false\n          };\n          const getOptions = {\n            syncId: null,\n            localCobaltPostFix: this.actor.id,\n          };\n          this.ddbCharacter = new DDBCharacter(ddbCharacterOptions);\n          await this.ddbCharacter.getCharacterData(getOptions);\n          logger.debug(\"import.js getCharacterData result\", this.ddbCharacter);\n          const debugJson = game.settings.get(\"ddb-importer\", \"debug-json\");\n          if (debugJson) {\n            FileHelper.download(JSON.stringify(this.ddbCharacter.source), `${characterId}.json`, \"application/json\");\n          }\n          if (this.ddbCharacter.source?.success) {\n            await generateCharacterExtras(html, this.ddbCharacter, this.actor);\n            this.showCurrentTask(\"Loading Extras\", \"Done.\", false);\n            $(html).find(\"#dndbeyond-character-extras-start\").prop(\"disabled\", true);\n            this.close();\n          } else {\n            this.showCurrentTask(this.ddbCharacter.source.message, null, true);\n            return false;\n          }\n        } catch (error) {\n          switch (error.message) {\n            case \"ImportFailure\":\n              logger.error(\"Failure\");\n              break;\n            case \"Forbidden\":\n              this.showCurrentTask(\"Error retrieving Character: \" + error, error, true);\n              break;\n            default:\n              logger.error(error);\n              logger.error(error.stack);\n              this.showCurrentTask(\"Error processing Character: \" + error, error, true);\n              break;\n          }\n          return false;\n        }\n        return true;\n      });\n\n    $(html)\n      .find(\"input[name=dndbeyond-url]\")\n      .on(\"input\", async (event) => {\n        this.html = html;\n        let URL = event.target.value;\n        const characterId = DDBCharacter.getCharacterId(URL);\n\n        if (characterId) {\n          $(html)\n            .find(\".dndbeyond-url-status i\")\n            .replaceWith('<i class=\"fas fa-check-circle\" style=\"color: green\"></i>');\n          $(html).find(\"span.dndbeyond-character-id\").text(characterId);\n          $(html).find(\"#dndbeyond-character-import-start\").prop(\"disabled\", false);\n          $(html).find(\"#open-dndbeyond-url\").prop(\"disabled\", false);\n\n          this.showCurrentTask(\"Saving reference\");\n          await this.actor.update({\n            \"flags.ddbimporter.dndbeyond\": {\n              url: URL,\n              characterId,\n            },\n          });\n          this.showCurrentTask(\"Status\");\n        } else {\n          this.showCurrentTask(\"URL format incorrect\", \"That seems not to be the URL we expected...\", true);\n          $(html)\n            .find(\".dndbeyond-url-status i\")\n            .replaceWith('<i class=\"fas fa-exclamation-triangle\" style=\"color:red\"></i>');\n        }\n      });\n\n    $(html)\n      .find(\"#open-dndbeyond-url\")\n      .on(\"click\", () => {\n        this.html = html;\n        try {\n          const characterUrl = this.actor.flags.ddbimporter.dndbeyond.url;\n          DDBCharacterManager.renderPopup(\"json\", characterUrl);\n        } catch (error) {\n          this.showCurrentTask(\"Error opening JSON URL\", error, true);\n        }\n      });\n  }\n\n  async enrichCharacterItems(items) {\n    const useInbuiltIcons = game.settings.get(\"ddb-importer\", \"character-update-policy-use-inbuilt-icons\");\n    const useSRDCompendiumItems = game.settings.get(\"ddb-importer\", \"character-update-policy-use-srd\");\n    const useSRDCompendiumIcons = game.settings.get(\"ddb-importer\", \"character-update-policy-use-srd-icons\");\n    const ddbSpellIcons = game.settings.get(\"ddb-importer\", \"character-update-policy-use-ddb-spell-icons\");\n    const ddbItemIcons = game.settings.get(\"ddb-importer\", \"character-update-policy-use-ddb-item-icons\");\n    const ddbGenericItemIcons = game.settings.get(\"ddb-importer\", \"character-update-policy-use-ddb-generic-item-icons\");\n\n    await Iconizer.preFetchDDBIconImages();\n\n    // if we still have items to add, add them\n    if (items.length > 0) {\n      this.showCurrentTask(\"Copying existing data flags\");\n      await this.copySupportedCharacterItemFlags(items);\n\n      if (ddbItemIcons) {\n        this.showCurrentTask(\"Fetching DDB Inventory Images\");\n        items = await Iconizer.getDDBEquipmentIcons(items, true);\n      }\n\n      if (useInbuiltIcons) {\n        this.showCurrentTask(\"Adding Inbuilt Icons\");\n        items = await Iconizer.getDDBHintImages(\"class\", items);\n        items = await Iconizer.getDDBHintImages(\"subclass\", items);\n        items = await Iconizer.copyInbuiltIcons(items);\n      }\n\n      if (useSRDCompendiumIcons && !useSRDCompendiumItems) {\n        this.showCurrentTask(\"Adding SRD Icons\");\n        items = await Iconizer.copySRDIcons(items);\n      }\n\n      if (ddbSpellIcons) {\n        this.showCurrentTask(\"Fetching DDB Spell School Images\");\n        items = await Iconizer.getDDBSpellSchoolIcons(items, true);\n      }\n\n      if (ddbGenericItemIcons) {\n        this.showCurrentTask(\"Fetching DDB Generic Item Images\");\n        items = await Iconizer.getDDBGenericItemIcons(items, true);\n      }\n\n      if (this.settings.activeEffectCopy) {\n        this.showCurrentTask(\"Copying Item Active Effects\");\n        items = await this.copyCharacterItemEffects(items);\n      }\n\n      items = await Iconizer.addItemEffectIcons(items);\n      items = await Iconizer.retainExistingIcons(items);\n    }\n\n    items = items.map((item) => {\n      if (!item.effects) item.effects = [];\n      if (foundry.utils.hasProperty(item, \"system.description.value\")) {\n        item.system.description.value = `<div class=\"ddb\">\n${item.system.description.value}\n</div>`;\n        item.system.description.chat = item.system.description.chat.trim() !== \"\"\n          ? `<div class=\"ddb\">\n${item.system.description.chat}\n</div>`\n          : \"\";\n      }\n      return item;\n    });\n\n    return Promise.all(items);\n  }\n\n  async createCharacterItems(items, keepIds) {\n    const options = foundry.utils.duplicate(SETTINGS.DISABLE_FOUNDRY_UPGRADE);\n    if (keepIds) options[\"keepId\"] = true;\n\n    // we have to break these out into class and non-class because of\n    // https://gitlab.com/foundrynet/foundryvtt/-/issues/5312\n    const klassItems = items.filter((item) => [\"class\", \"subclass\"].includes(item.type));\n    const nonKlassItems = items.filter((item) => ![\"class\", \"subclass\"].includes(item.type));\n\n    if (klassItems.length > 0) {\n      logger.debug(`Adding the following class items, keep Ids? ${keepIds}`, { options, items: foundry.utils.duplicate(klassItems) });\n      await this.actor.createEmbeddedDocuments(\"Item\", klassItems, options);\n    }\n    if (nonKlassItems.length > 0) {\n      logger.debug(`Adding the following non-class items, keep Ids? ${keepIds}`, { options, items: foundry.utils.duplicate(nonKlassItems) });\n      await this.actor.createEmbeddedDocuments(\"Item\", nonKlassItems, options);\n    }\n  }\n\n  async importCharacterItems(items, keepIds = false) {\n    if (items.length > 0) {\n      this.showCurrentTask(\"Adding items to character\");\n\n      const newItems = items.filter((i) => !i._id || i._id === null || i._id === undefined);\n      const updateItems = items.filter((i) => i._id && i._id !== null && i._id !== undefined);\n\n      await this.createCharacterItems(newItems, false);\n      await this.createCharacterItems(updateItems, keepIds);\n    }\n  }\n\n  async keepNonDDBItems(ddbItems) {\n    const lastImportId = foundry.utils.getProperty(this.actorOriginal, \"flags.ddbimporter.importId\");\n    if (this.settings.ignoreNonDDBItems) {\n      const items = this.actor.getEmbeddedCollection(\"Item\");\n      await items.forEach((item) => {\n        const ddbMatchedItem = ddbItems.some((ddbItem) =>\n          item.name === ddbItem.name\n          && item.type === ddbItem.type\n          && item.flags?.ddbimporter?.id === ddbItem.flags?.ddbimporter?.id\n        );\n        if (!ddbMatchedItem) {\n          // if item not replaced by compendium swap or\n          if (item.flags?.ddbimporter?.importId !== lastImportId) {\n            this.nonMatchedItemIds.push(item.id);\n          }\n        }\n      });\n    }\n  }\n\n  static async getIndividualOverrideItems(overrideItems) {\n    const label = CompendiumHelper.getCompendiumLabel(\"custom\");\n    const compendium = CompendiumHelper.getCompendium(label);\n\n    const compendiumItems = await Promise.all(overrideItems\n      .filter((item) => foundry.utils.hasProperty(item, \"flags.ddbimporter.overrideId\") && compendium.index.has(item.flags.ddbimporter.overrideId))\n      .map(async (item) => {\n        const compendiumItem = foundry.utils.duplicate(await compendium.getDocument(item.flags.ddbimporter.overrideId));\n        foundry.utils.setProperty(compendiumItem, \"flags.ddbimporter.pack\", `${compendium.metadata.id}`);\n        if (foundry.utils.hasProperty(item, \"flags.ddbimporter.overrideItem\")) {\n          foundry.utils.setProperty(compendiumItem, \"flags.ddbimporter.overrideItem\", item.flags.ddbimporter.overrideItem);\n        } else {\n          foundry.utils.setProperty(compendiumItem, \"flags.ddbimporter.overrideItem\", {\n            name: item.name,\n            type: item.type,\n            ddbId: item.flags.ddbimporter?.id\n          });\n        }\n\n        return compendiumItem;\n      }));\n\n    const matchingOptions = {\n      looseMatch: false,\n      monster: false,\n      keepId: true,\n      keepDDBId: true,\n      overrideId: true,\n      linkItemFlags: true,\n    };\n    const remappedItems = await DDBItemImporter.updateMatchingItems(overrideItems, compendiumItems, matchingOptions);\n\n    return remappedItems;\n  }\n\n  static restoreDDBMatchedFlags(existingItem, item) {\n    const ddbItemFlags = foundry.utils.getProperty(existingItem, \"flags.ddbimporter\");\n    logger.debug(`Item flags for ${ddbItemFlags}`, ddbItemFlags);\n    // we retain some flags that might change the nature of the import for this item\n    // these flags are used elsewhere\n    [\n      \"ignoreItemForChrisPremades\",\n      \"ignoreItemImport\",\n      \"ignoreItemUpdate\",\n      \"overrideId\",\n      \"overrideItem\",\n      \"ddbCustomAdded\",\n    ].forEach((flag) => {\n      if (foundry.utils.hasProperty(ddbItemFlags, flag)) {\n        logger.debug(`Overriding ${flag} for ${item.name} to ${ddbItemFlags[flag]}`);\n        foundry.utils.setProperty(item, `flags.ddbimporter.${flag}`, ddbItemFlags[flag]);\n      }\n    });\n    // some items get ignored completly, if so we don't match these\n    if (!foundry.utils.getProperty(ddbItemFlags, \"ignoreItemImport\") ?? false) {\n      logger.debug(`Updating ${item.name} with id`);\n      item[\"_id\"] = existingItem[\"id\"];\n      if (foundry.utils.getProperty(ddbItemFlags, \"ignoreIcon\") ?? false) {\n        logger.debug(`Retaining icons for ${item.name}`);\n        item.flags.ddbimporter.matchedImg = existingItem.img;\n        item.flags.ddbimporter.ignoreIcon = true;\n      }\n      if (foundry.utils.getProperty(ddbItemFlags, \"retainResourceConsumption\") ?? false) {\n        logger.debug(`Retaining resources for ${item.name}`);\n        item.system.consume = foundry.utils.deepClone(existingItem.system.consume);\n        item.flags.ddbimporter.retainResourceConsumption = true;\n        if (foundry.utils.hasProperty(existingItem, \"flags.link-item-resource-5e\") ?? false) {\n          foundry.utils.setProperty(item, \"flags.link-item-resource-5e\", existingItem.flags[\"link-item-resource-5e\"]);\n        }\n      }\n    }\n    if (foundry.utils.getProperty(ddbItemFlags, \"ddbCustomAdded\") ?? false) {\n      item.system = existingItem.system;\n      item.type = existingItem.type;\n    }\n    return item;\n  }\n\n  // checks for existing items, and depending on options will keep or replace with imported item\n  async mergeExistingItems(items) {\n    if (this.actorOriginal.flags.ddbimporter) {\n      const ownedItems = this.actor.getEmbeddedCollection(\"Item\");\n\n      let nonMatchedItems = [];\n      let matchedItems = [];\n\n      for (let item of items) {\n        let existingItem = DDBHelper.findMatchedDDBItem(item, ownedItems, matchedItems);\n        // let existingItem = ownedItems.find((owned) => {\n        //   // have we already matched against this id? lets not double dip\n        //   const existingMatch = matchedItems.find((matched) => {\n        //     return foundry.utils.getProperty(owned, \"flags.ddbimporter.id\") === foundry.utils.getProperty(matched, \"flags.ddbimporter.id\");\n        //   });\n        //   if (existingMatch) return false;\n        //   // the simple match\n        //   const simpleMatch\n        //     = item.name === owned.name\n        //     && item.type === owned.type\n        //     && item.flags?.ddbimporter?.id === owned.flags?.ddbimporter?.id;\n        //   // account for choices in ddb\n        //   const isChoice\n        //     = foundry.utils.hasProperty(item, \"flags.ddbimporter.dndbeyond.choice.choiceId\")\n        //     && foundry.utils.hasProperty(owned, \"flags.ddbimporter.dndbeyond.choice.choiceId\");\n        //   const choiceMatch = isChoice\n        //     ? item.flags.ddbimporter.dndbeyond.choice.choiceId\n        //       === owned.flags.ddbimporter.dndbeyond.choice.choiceId\n        //     : true;\n        //   // force an override\n        //   const overrideDetails = foundry.utils.getProperty(owned, \"flags.ddbimporter.overrideItem\");\n        //   const overrideMatch\n        //     = overrideDetails\n        //     && item.name === overrideDetails.name\n        //     && item.type === overrideDetails.type\n        //     && item.flags?.ddbimporter?.id === overrideDetails.ddbId;\n\n        //   return (simpleMatch && choiceMatch) || overrideMatch;\n        // });\n\n        logger.debug(`Checking ${item.name} for existing match`, existingItem);\n\n        if (existingItem) {\n          // we use flags on the item to determine if we keep various properties\n          // NOW IS THE TIME!\n          item = DDBCharacterManager.restoreDDBMatchedFlags(existingItem, item);\n          // we can now determine if we are going to ignore this item or not,\n          // this effectively filters out the items we don't want and they don't\n          // get returned from this function\n          const ignoreItemImport = foundry.utils.getProperty(item, \"flags.ddbimporter.ignoreItemImport\") ?? false;\n          if (!ignoreItemImport) {\n            logger.debug(`Importing matched item ${item.name}`);\n            matchedItems.push(item);\n          }\n        } else {\n          nonMatchedItems.push(item);\n        }\n      }\n\n      logger.debug(\"Finished retaining items\");\n      return nonMatchedItems.concat(matchedItems);\n    } else {\n      return items;\n    }\n  }\n\n  async fetchCharacterItems() {\n    const magicItemsInstalled = game.modules.get(\"magicitems\")?.active || game.modules.get(\"magic-items-2\")?.active;\n    const itemsWithSpellsInstalled = game.modules.get(\"items-with-spells-5e\")?.active;\n    // items for actor\n    let items = [];\n\n    // process spells for magic items\n    if ((magicItemsInstalled || itemsWithSpellsInstalled) && Array.isArray(this.result.itemSpells)) {\n      this.showCurrentTask(\"Preparing magicitem spells\");\n      logger.debug(\"Preparing magicitem spells\");\n      await addMagicItemSpells(this.result);\n    }\n\n    logger.debug(\"Calculating items to create and update...\");\n    this.showCurrentTask(\"Calculating items to create and update...\");\n    items = this.filterItemsByUserSelection();\n\n    logger.debug(\"Checking existing items for details...\");\n    this.showCurrentTask(\"Checking existing items for details...\");\n\n    items = await this.mergeExistingItems(items);\n    await this.keepNonDDBItems(items);\n\n    logger.debug(\"Removing found items...\");\n    this.showCurrentTask(\"Clearing items for recreation...\");\n    await this.clearItemsByUserSelection();\n\n    // If there is no magicitems module fall back to importing the magic\n    // item spells as normal spells fo the character\n    if (!magicItemsInstalled && !itemsWithSpellsInstalled) {\n      logger.debug(\"No magic items module(s) found, adding spells to sheet.\");\n      items.push(\n        this.result.itemSpells.filter((item) => {\n          const active = item.flags.ddbimporter.dndbeyond && item.flags.ddbimporter.dndbeyond.active === true;\n          if (!active) logger.warn(`Missing active flag on item spell ${item.name}`);\n          return active;\n        })\n      );\n      items = items.flat();\n    }\n    logger.debug(\"Finished item fetch\");\n    return items;\n  }\n\n  async processCharacterItems(items) {\n    let compendiumItems = [];\n    let srdCompendiumItems = [];\n    let overrideCompendiumItems = [];\n    let individualCompendiumItems = [];\n\n    // First we do items that are individually marked as override\n    const individualOverrideItems = items.filter((item) => {\n      const overrideId = foundry.utils.getProperty(item, \"flags.ddbimporter.overrideId\");\n      return overrideId !== undefined && overrideId !== \"NONE\";\n    });\n\n    if (individualOverrideItems.length > 0) {\n      const individualOverrideCompendiumItems = await DDBCharacterManager.getIndividualOverrideItems(individualOverrideItems);\n      individualCompendiumItems = individualOverrideCompendiumItems;\n      // remove existing items from those to be imported\n      logger.info(\"Removing matching Override compendium items\");\n      items = await DDBCharacterManager.removeItems(items, individualCompendiumItems);\n    }\n\n    /**\n     * First choice is override compendium\n     */\n    if (this.settings.useOverrideCompendiumItems) {\n      logger.info(\"Removing matching Override compendium items\");\n      const compendiumOverrideItems = await DDBItemImporter.getCompendiumItems(items, \"custom\", { linkItemFlags: true });\n      overrideCompendiumItems = compendiumOverrideItems;\n      // remove existing items from those to be imported\n      items = await DDBCharacterManager.removeItems(items, overrideCompendiumItems);\n    }\n\n    /**\n     * If SRD is selected, we prefer this\n     */\n    if (this.settings.useSRDCompendiumItems) {\n      logger.info(\"Removing compendium items\");\n      const featureManager = new DDBItemImporter(\"features\", items);\n      const inventoryManager = new DDBItemImporter(\"inventory\", items);\n      const spellManager = new DDBItemImporter(\"spells\", items);\n\n      await featureManager.init();\n      await inventoryManager.init();\n      await spellManager.init();\n\n      const compendiumFeatureItems = await featureManager.getSRDCompendiumItems();\n      const compendiumInventoryItems = await inventoryManager.getSRDCompendiumItems();\n      const compendiumSpellItems = await spellManager.getSRDCompendiumItems();\n\n      srdCompendiumItems = compendiumItems.concat(\n        compendiumInventoryItems,\n        compendiumSpellItems,\n        compendiumFeatureItems\n      );\n      // remove existing items from those to be imported\n      items = await DDBCharacterManager.removeItems(items, srdCompendiumItems);\n    }\n\n    if (this.settings.useExistingCompendiumItems) {\n      logger.info(\"Removing compendium items\");\n      const compendiumFeatureItems = await DDBItemImporter.getCompendiumItems(items, \"features\");\n      const compendiumInventoryItems = await DDBItemImporter.getCompendiumItems(items, \"inventory\");\n      const compendiumSpellItems = await DDBItemImporter.getCompendiumItems(items, \"spells\");\n      const compendiumClassItems = await DDBItemImporter.getCompendiumItems(items, \"classes\");\n      const compendiumSubClassItems = await DDBItemImporter.getCompendiumItems(items, \"subclasses\");\n      const compendiumRaceItems = await DDBItemImporter.getCompendiumItems(items, \"races\");\n      const compendiumTraitsItems = await DDBItemImporter.getCompendiumItems(items, \"traits\");\n      const compendiumBackgroundsItems = await DDBItemImporter.getCompendiumItems(items, \"backgrounds\");\n\n      compendiumItems = compendiumItems.concat(\n        compendiumInventoryItems,\n        compendiumSpellItems,\n        compendiumFeatureItems,\n        compendiumClassItems,\n        compendiumSubClassItems,\n        compendiumRaceItems,\n        compendiumTraitsItems,\n        compendiumBackgroundsItems,\n      );\n      // remove existing items from those to be imported\n      items = await DDBCharacterManager.removeItems(items, compendiumItems);\n    }\n\n    // import remaining items to character\n    if (items.length > 0) {\n      this.showCurrentTask(\"Adding DDB generated items\");\n      logger.debug(`Adding DDB generated items...`, items);\n      items = await this.enrichCharacterItems(items);\n      await this.importCharacterItems(items, true);\n    }\n\n    // now import any compendium items that we matched\n    if (this.settings.useExistingCompendiumItems) {\n      this.showCurrentTask(\"Adding DDB compendium items\");\n      logger.info(\"Adding DDB compendium items:\", compendiumItems);\n      await this.createCharacterItems(compendiumItems, false);\n    }\n\n    if (this.settings.useSRDCompendiumItems) {\n      this.showCurrentTask(\"Adding SRD compendium items\");\n      logger.info(\"Adding SRD compendium items:\", srdCompendiumItems);\n      await this.createCharacterItems(srdCompendiumItems, false);\n    }\n\n    if (this.settings.useOverrideCompendiumItems) {\n      this.showCurrentTask(\"Adding Override compendium items\");\n      logger.info(\"Adding Override compendium items:\", overrideCompendiumItems);\n      await this.createCharacterItems(overrideCompendiumItems, false);\n    }\n\n    if (individualCompendiumItems.length > 0) {\n      this.showCurrentTask(\"Adding Individual Override compendium items\");\n      logger.info(\"Adding Individual Override compendium items:\", individualCompendiumItems);\n      await this.createCharacterItems(individualCompendiumItems, false);\n    }\n\n    logger.debug(\"Finished importing items\");\n  }\n\n  async preActiveEffects() {\n    this.effectBackup = foundry.utils.duplicate(this.actor.effects);\n    for (const e of this.effectBackup) {\n      if (e.origin?.includes(\".Item.\")) {\n        const parent = await fromUuid(e.origin);\n        logger.debug(\"Effect Backup flags\", { e, parent });\n        if (parent) foundry.utils.setProperty(e, \"flags.ddbimporter.type\", parent.type);\n      }\n    }\n    await this.actor.deleteEmbeddedDocuments(\"ActiveEffect\", [], { deleteAll: true });\n  }\n\n  async processActiveEffects() {\n    logger.debug(\"Removing active effects\");\n\n    // remove current active effects\n    const excludedItems = this.filterActorItemsByUserSelection(true);\n    const ignoredItemIds = this.actorOriginal.items\n      .filter((item) =>\n        item.effects\n        && item.effects.length > 0\n        && (item.flags.ddbimporter?.ignoreItemImport\n          || excludedItems.some((ei) => ei._id === item._id)\n          || this.nonMatchedItemIds.includes(item._id)\n        )\n      )\n      .map((item) => item._id);\n\n    const itemEffects = this.effectBackup.filter((ae) =>\n      ae.origin?.includes(\".Item.\")\n    );\n    const ignoredEffects = this.effectBackup.filter((ae) =>\n      ignoredItemIds.includes(ae.origin?.split(\".\").slice(-1)[0])\n    );\n    const coreStatusEffects = this.effectBackup.filter((ae) => {\n      const isStatus = ae.statuses.length > 0;\n      const itemEffect = ae.origin?.includes(\".Item.\");\n      return isStatus && !itemEffect;\n    });\n    // effects on the character that are not from items, or corestatuses\n    // nor added by ddb importer\n    const charEffects = this.effectBackup.filter((ae) =>\n      !ignoredItemIds.some((id) => ae._id === id)\n      && !ae.flags.ddbimporter?.characterEffect\n      && !ae.statuses.length > 0\n      && !ae.origin?.includes(\".Item.\")\n    );\n    // effects that are added by the ddb importer that are not item effects\n    const ddbGeneratedCharEffects = this.effectBackup.filter((ae) =>\n      !ae.origin?.includes(\".Item.\") && ae.flags.ddbimporter?.characterEffect\n    );\n\n    const spellEffects = [];\n    for (const e of itemEffects) {\n      const isOther = coreStatusEffects.some((ae) => ae._id === e._id)\n        || charEffects.some((ae) => ae._id === e._id)\n        || ddbGeneratedCharEffects.some((ae) => ae._id === e._id);\n      if (!isOther && foundry.utils.getProperty(e, \"flags.ddbimporter.type\") === \"spell\") {\n        spellEffects.push(e);\n      }\n    }\n\n    const remainingEffects = this.effectBackup\n      .filter((e) =>\n        // remove existing active item effects\n        !itemEffects.map((ae) => ae._id).includes(e._id)\n        // clear down ddb generated character effects such as skill bonuses\n        && !ddbGeneratedCharEffects.map((ae) => ae._id).includes(e._id)\n        // ignored effects always remain\n        && !ignoredEffects.map((ae) => ae._id).includes(e._id)\n        // clear down char effects\n        && !charEffects.map((ae) => ae._id).includes(e._id)\n        // clear down status effects\n        && !coreStatusEffects.map((ae) => ae._id).includes(e._id)\n        // ignore spell effects\n        && !spellEffects.map((ae) => ae._id).includes(e._id)\n      );\n\n    logger.debug(\"Effect Removal Results\", {\n      ignoredItemIds, itemEffects, ignoredEffects, charEffects, coreStatusEffects, spellEffects,\n      ddbGeneratedCharEffects, remainingEffects, backupEffects: this.effectBackup,\n    });\n\n    // are we trying to retain existing effects?\n    if (this.settings.activeEffectCopy) {\n      // add retained character effects to result\n      const effects = ignoredEffects.concat(charEffects, coreStatusEffects, spellEffects, remainingEffects);\n      this.result.character.effects = this.result.character.effects.concat(effects);\n    } else {\n      this.result.character.effects = this.result.character.effects.concat(ignoredEffects);\n    }\n  }\n\n  fixUpCharacterEffects() {\n    // if (!CONFIG.ActiveEffect.legacyTransferral) return;\n    let abilityOverrides = abilityOverrideEffects(this.result.character.flags.ddbimporter.dndbeyond.abilityOverrides);\n    if (abilityOverrides.changes.length > 0) {\n      this.result.character.effects = this.result.character.effects.concat(abilityOverrides);\n    }\n    this.result.character.effects = this.result.character.effects.filter((e) => e !== undefined);\n    this.result.character.effects.forEach((effect) => {\n      const origins = [\"Ability.Override\", \"AC\", `Actor.${this.actor.flags.ddbimporter.dndbeyond.characterId}`];\n      if (origins.includes(effect.origin)) {\n        effect.origin = `Actor.${this.actor.id}`;\n      }\n    });\n  }\n\n  async addImportIdToItems() {\n    const importId = this.importId;\n    function addImportId(items) {\n      return items.map((item) => {\n        foundry.utils.setProperty(item, \"flags.ddbimporter.importId\", importId);\n        return item;\n      });\n    }\n    this.result.actions = addImportId(this.result.actions);\n    this.result.classes = addImportId(this.result.classes);\n    this.result.features = addImportId(this.result.features);\n    this.result.inventory = addImportId(this.result.inventory);\n    this.result.itemSpells = addImportId(this.result.itemSpells);\n    this.result.spells = addImportId(this.result.spells);\n  }\n\n  async resetActor() {\n    await this.actor.deleteEmbeddedDocuments(\"Item\", [], {\n      deleteAll: true,\n      itemsWithSpells5e: { alsoDeleteChildSpells: false },\n    });\n    await this.actor.deleteEmbeddedDocuments(\"ActiveEffect\", [], { deleteAll: true });\n    await this.actor.update(this.actorOriginal, { recursive: true, keepId: true });\n  }\n\n  getSettings() {\n    this.settings = {\n      updatePolicyName: game.settings.get(\"ddb-importer\", \"character-update-policy-name\"),\n      updatePolicyHP: game.settings.get(\"ddb-importer\", \"character-update-policy-hp\"),\n      updatePolicyHitDie: game.settings.get(\"ddb-importer\", \"character-update-policy-hit-die\"),\n      updatePolicyCurrency: game.settings.get(\"ddb-importer\", \"character-update-policy-currency\"),\n      updatePolicyBio: game.settings.get(\"ddb-importer\", \"character-update-policy-bio\"),\n      updatePolicyXP: game.settings.get(\"ddb-importer\", \"character-update-policy-xp\"),\n      updatePolicySpellUse: game.settings.get(\"ddb-importer\", \"character-update-policy-spell-use\"),\n      updatePolicyLanguages: game.settings.get(\"ddb-importer\", \"character-update-policy-languages\"),\n      updatePolicyImage: game.settings.get(\"ddb-importer\", \"character-update-policy-image\"),\n      activeEffectCopy: game.settings.get(\"ddb-importer\", \"character-update-policy-active-effect-copy\"),\n      // daeEffectCopy: game.settings.get(\"ddb-importer\", \"character-update-policy-dae-effect-copy\"),\n      // addItemEffects: game.settings.get(\"ddb-importer\", \"character-update-policy-add-item-effects\"),\n      addCharacterEffects: game.settings.get(\"ddb-importer\", \"character-update-policy-add-character-effects\"),\n      ignoreNonDDBItems: game.settings.get(\"ddb-importer\", \"character-update-policy-ignore-non-ddb-items\"),\n      useExistingCompendiumItems: game.settings.get(\"ddb-importer\", \"character-update-policy-use-existing\"),\n      useSRDCompendiumItems: game.settings.get(\"ddb-importer\", \"character-update-policy-use-srd\"),\n      useOverrideCompendiumItems: game.settings.get(\"ddb-importer\", \"character-update-policy-use-override\"),\n      useChrisPremades: game.settings.get(\"ddb-importer\", \"character-update-policy-use-chris-premades\")\n        && (game.modules.get(\"chris-premades\")?.active ?? false),\n    };\n  }\n\n  async processCharacterData() {\n    this.getSettings();\n    if (!CONFIG.DDBI.EFFECT_CONFIG.MODULES.configured) {\n      // eslint-disable-next-line require-atomic-updates\n      CONFIG.DDBI.EFFECT_CONFIG.MODULES.configured = await DDBMacros.configureDependencies();\n    }\n    this.result = foundry.utils.deepClone(this.ddbCharacter.data);\n\n    // disable active sync\n    const activeUpdateState = this.ddbCharacter.getCurrentDynamicUpdateState();\n    await this.ddbCharacter.disableDynamicUpdates();\n\n    try {\n      this.importId = foundry.utils.randomID();\n      foundry.utils.setProperty(this.result.character, \"flags.ddbimporter.importId\", this.importId);\n      await this.addImportIdToItems();\n\n      // handle active effects\n      this.showCurrentTask(\"Calculating Active Effect Changes\");\n      this.fixUpCharacterEffects();\n      await this.preActiveEffects();\n      // we need to process the items first to find out if we are ignoring any effects\n      let items = await this.fetchCharacterItems();\n      await this.processActiveEffects();\n\n      // update image\n      await this.updateImage();\n\n      // manage updates of basic character data more intelligently\n      // revert some data if update not wanted\n      if (!this.settings.updatePolicyName) {\n        this.result.character.name = this.actorOriginal.name;\n        this.result.character.prototypeToken.name = this.actorOriginal.prototypeToken.name;\n      }\n      if (!this.settings.updatePolicyHP) {\n        this.result.character.system.attributes.hp = this.actorOriginal.system.attributes.hp;\n      }\n      if (!this.settings.updatePolicyXP) {\n        this.result.character.system.details.xp = this.actorOriginal.system.details.xp;\n      }\n      if (!this.settings.updatePolicyHitDie) {\n        this.result.character.system.attributes.hd = this.actorOriginal.system.attributes.hd;\n        this.result.classes = this.result.classes.map((klass) => {\n          const originalKlass = this.actorOriginal.items.find(\n            (original) => original.name === klass.name && original.type === \"class\"\n          );\n          if (originalKlass) {\n            klass.system.hitDiceUsed = originalKlass.system.hitDiceUsed;\n          }\n          return klass;\n        });\n      }\n      if (!this.settings.updatePolicyCurrency) {\n        this.result.character.system.currency = this.actorOriginal.system.currency;\n      }\n      if (!this.settings.updatePolicyBio) {\n        const bioUpdates = [\"alignment\", \"appearance\", \"background\", \"biography\", \"bond\", \"flaw\", \"ideal\", \"trait\"];\n        bioUpdates.forEach((option) => {\n          this.result.character.system.details[option] = this.actorOriginal.system.details[option];\n        });\n      }\n      if (!this.settings.updatePolicySpellUse) {\n        this.result.character.system.spells = this.actorOriginal.system.spells;\n      }\n      if (!this.settings.updatePolicyLanguages) {\n        this.result.character.system.traits.languages = this.actorOriginal.system.traits.languages;\n      }\n      // if resource mode is in disable and not asking, then we use the previous resources\n      const resourceFlags = foundry.utils.getProperty(this.result.character, \"flags.ddbimporter.resources\");\n      if (resourceFlags.type === \"disable\") {\n        this.result.character.system.resources = foundry.utils.duplicate(this.actorOriginal.system.resources);\n      }\n\n      // flag as having items ids\n      this.result.character.flags.ddbimporter[\"syncItemReady\"] = true;\n      this.result.character.flags.ddbimporter[\"syncActionReady\"] = true;\n      this.result.character.flags.ddbimporter[\"activeUpdate\"] = false;\n      this.result.character.flags.ddbimporter[\"activeSyncSpells\"] = true;\n      // remove unneeded flags (used for character parsing)\n      this.result.character.flags.ddbimporter.dndbeyond[\"templateStrings\"] = null;\n      this.result.character.flags.ddbimporter.dndbeyond[\"characterValues\"] = null;\n      this.result.character.flags.ddbimporter.dndbeyond[\"proficiencies\"] = null;\n      this.result.character.flags.ddbimporter.dndbeyond[\"proficienciesIncludingEffects\"] = null;\n      this.result.character.flags.ddbimporter.dndbeyond[\"effectAbilities\"] = null;\n      this.result.character.flags.ddbimporter.dndbeyond[\"abilityOverrides\"] = null;\n      foundry.utils.setProperty(this.result.character.flags, \"ddb-importer.version\", CONFIG.DDBI.version);\n\n      if (this.actorOriginal.flags.dnd5e?.wildMagic === true) {\n        this.result.character.flags.dnd5e[\"wildMagic\"] = true;\n      }\n\n      // midi fixes\n      const actorOnUseMacroName = foundry.utils.getProperty(this.result.character, \"flags.midi-qol.onUseMacroName\");\n      if (!actorOnUseMacroName || actorOnUseMacroName === \"\") {\n        foundry.utils.setProperty(this.result.character, \"flags.midi-qol.onUseMacroName\", \"[postActiveEffects]\");\n      }\n\n      // basic import\n      this.showCurrentTask(\"Updating core character information\");\n      logger.debug(\"Character data importing: \", this.result.character);\n      await this.actor.update(this.result.character);\n\n      // copy existing journal notes\n      this.copyExistingJournalNotes();\n\n      // items import\n      await this.processCharacterItems(items);\n\n      if (this.settings.activeEffectCopy) {\n        // find effects with a matching name that existed on previous actor\n        // and that have a different active state and activate them\n        const targetEffects = this.actor.effects.filter((ae) => {\n          const previousEffectDiff = this.actorOriginal.effects.find(\n            (oae) => oae.name === ae.name && oae.disabled !== ae.disabled\n          );\n          if (previousEffectDiff) return true;\n          return false;\n        });\n        const updatedEffects = targetEffects.map((ae) => {\n          return { _id: ae._id, disabled: !ae.disabled };\n        });\n        await this.actor.updateEmbeddedDocuments(\"ActiveEffect\", updatedEffects);\n      }\n\n      const favorites = foundry.utils.deepClone(this.actorOriginal.system.favorites ?? []);\n      if (favorites.length > 0) {\n        await this.actor.update({ system: { favorites } });\n      }\n\n      // add infusions to actors items\n      await createInfusedItems(this.ddbCharacter.source.ddb, this.actor);\n\n      await this.ddbCharacter.autoLinkResources();\n      await this.ddbCharacter.fixItemSpellResources();\n\n      if (this.settings.useChrisPremades) {\n        await ExternalAutomations.addChrisEffectsToActorDocuments(this.actor);\n      }\n      await setConditions(this.actor, this.ddbCharacter.source.ddb, this.settings.activeEffectCopy);\n\n    } catch (error) {\n      logger.error(\"Error importing character: \", { error, ddbCharacter: this.ddbCharacter, result: this.result });\n      logger.error(error.stack);\n      this.showCurrentTask(\"Error importing character, attempting rolling back, see console (F12) for details.\", error, true);\n      await this.resetActor();\n      throw new Error(\"ImportFailure\");\n    } finally {\n      await this.ddbCharacter.updateDynamicUpdates(activeUpdateState);\n      this.actor.render();\n    }\n  }\n}\n\nexport async function importCharacter(actor, html) {\n  try {\n    const actorData = actor.toObject();\n    const characterId = actorData.flags.ddbimporter.dndbeyond.characterId;\n\n    const ddbCharacterOptions = {\n      currentActor: actor,\n      characterId,\n      selectResources: true\n    };\n    const getOptions = {\n      syncId: null,\n      localCobaltPostFix: actorData._id,\n    };\n    const ddbCharacter = new DDBCharacter(ddbCharacterOptions);\n    await ddbCharacter.getCharacterData(getOptions);\n\n    logger.debug(\"import.js importCharacter getCharacterData result\", ddbCharacter.source);\n    if (game.settings.get(\"ddb-importer\", \"debug-json\")) {\n      FileHelper.download(JSON.stringify(ddbCharacter.source), `${characterId}.json`, \"application/json\");\n    }\n    if (ddbCharacter.source.success) {\n      // begin parsing the character data\n      const importer = new DDBCharacterManager(DDBCharacterManager.defaultOptions, actorData, ddbCharacter);\n      importer.html = html ? html : utils.htmlToDoc(\"\");\n      await importer.processCharacterData();\n      importer.showCurrentTask(\"Loading Character data\", \"Done.\", false);\n      logger.info(\"Loading Character data\");\n      return true;\n    } else {\n      logger.error(\"Error Loading Character data\", { message: ddbCharacter.source.message, ddbCharacter });\n      return false;\n    }\n  } catch (error) {\n    switch (error.message) {\n      case \"ImportFailure\":\n        logger.error(\"Failure\");\n        break;\n      case \"Forbidden\":\n        logger.error(\"Error retrieving Character: \", error);\n        break;\n      default:\n        logger.error(\"Error processing Character: \", error);\n        logger.error(error.stack);\n        break;\n    }\n    return false;\n  }\n}\n\nexport async function importCharacterById(characterId, html) {\n  const actor = await Actor.create({\n    name: \"New Actor\",\n    type: \"character\",\n    flags: {\n      ddbimporter: {\n        dndbeyond: {\n          characterId: characterId,\n          url: `https://www.dndbeyond.com/characters/${characterId}`,\n        },\n      },\n    },\n  });\n\n  const result = await importCharacter(actor, html);\n  return result;\n}\n","\nimport logger from \"../logger.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\nimport { getCobalt } from \"../lib/Secrets.js\";\nimport DDBCampaigns from \"../lib/DDBCampaigns.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\nimport DDBEncounterMunch from \"../apps/DDBEncounterMunch.js\";\nimport PatreonHelper from \"../lib/PatreonHelper.js\";\n\nexport default class DDBEncounters {\n\n  constructor() {\n    this.encounters = [];\n  }\n\n  static DIFFICULTY_LEVELS = [\n    { id: null, name: \"No challenge\", color: \"grey\" },\n    { id: 1, name: \"Easy\", color: \"green\" },\n    { id: 2, name: \"Medium\", color: \"brown\" },\n    { id: 3, name: \"Hard\", color: \"orange\" },\n    { id: 4, name: \"Deadly\", color: \"red\" },\n  ];\n\n  static async getEncounterData() {\n    const cobaltCookie = getCobalt();\n    const betaKey = PatreonHelper.getPatreonKey();\n    const parsingApi = DDBProxy.getProxy();\n    const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n    const body = {\n      cobalt: cobaltCookie,\n      betaKey: betaKey,\n    };\n\n    return new Promise((resolve, reject) => {\n      fetch(`${parsingApi}/proxy/encounters`, {\n        method: \"POST\",\n        mode: \"cors\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body), // body data type must match \"Content-Type\" header\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          if (!data.success) {\n            DDBEncounterMunch.munchNote(`API Failure: ${data.message}`);\n            reject(data.message);\n          }\n          if (debugJson) {\n            FileHelper.download(JSON.stringify(data), `encounters-raw.json`, \"application/json\");\n          }\n          return data;\n        })\n        .then((data) => {\n          DDBEncounterMunch.munchNote(`Retrieved ${data.data.length} encounters, starting parse...`, true, false);\n          logger.info(`Retrieved ${data.data.length} encounters`);\n          resolve(data.data);\n        })\n        .catch((error) => reject(error));\n    });\n  }\n\n  async parseEncounters() {\n    this.encounters = await DDBEncounters.getEncounterData();\n    logger.debug(\"Fetched encounters\", this.encounters);\n    DDBEncounterMunch.munchNote(`Fetched Available DDB Encounters`);\n    DDBEncounterMunch.munchNote(\"\");\n    return this.encounters;\n  }\n\n  async filterEncounters(campaignId) {\n    const campaigns = await DDBCampaigns.getAvailableCampaigns();\n    const campaignIds = campaigns.map((c) => c.id);\n    const allEncounters = this.encounters.length !== 0 ? this.encounters : await this.parseEncounters();\n\n    logger.debug(`${allEncounters.length} encounters`, allEncounters);\n    logger.debug(\"CampaignIds\", campaignIds);\n    if (!campaignId || campaignId === \"\" || !campaignIds.includes(parseInt(campaignId))) return allEncounters;\n    logger.debug(`CampaignId to find ${campaignId}`, { allEncounters, campaignId });\n    const filteredEncounters = allEncounters.filter((encounter) => encounter.campaign?.id == campaignId);\n    logger.debug(`${filteredEncounters.length} filtered encounters`, filteredEncounters);\n    return filteredEncounters;\n  }\n}\n","import logger from \"../logger.js\";\nimport CompendiumHelper from \"../lib/CompendiumHelper.js\";\nimport PatreonHelper from \"../lib/PatreonHelper.js\";\nimport MuncherSettings from \"../lib/MuncherSettings.js\";\nimport DDBCampaigns from \"../lib/DDBCampaigns.js\";\nimport { importCharacterById } from \"./DDBCharacterManager.js\";\nimport SETTINGS from \"../settings.js\";\nimport DDBEncounters from \"../parser/DDBEncounters.js\";\nimport DDBMonsterFactory from \"../parser/DDBMonsterFactory.js\";\nimport FolderHelper from \"../lib/FolderHelper.js\";\nimport utils from \"../lib/utils.js\";\n\nexport default class DDBEncounterMunch extends Application {\n\n  constructor(options = {}) {\n    super(options);\n    this.encounter = {};\n    this.img = \"\";\n    this.sceneId = \"\";\n    this.journal = undefined;\n    this.combat = undefined;\n    this.tokens = [];\n    this.folders = {};\n    this.ddbEncounters = new DDBEncounters();\n  }\n\n  static SCENE_IMG = [\n    { name: \"Bar\", img: \"modules/ddb-importer/img/encounters/bar.webp\" },\n    { name: \"Cobbles\", img: \"modules/ddb-importer/img/encounters/cobbles.webp\" },\n    { name: \"Dungeon\", img: \"modules/ddb-importer/img/encounters/dungeon.png\" },\n    { name: \"Grass\", img: \"modules/ddb-importer/img/encounters/grass.webp\" },\n    { name: \"Snow\", img: \"modules/ddb-importer/img/encounters/snow.webp\" },\n    { name: \"Stone\", img: \"modules/ddb-importer/img/encounters/stone.webp\" },\n    { name: \"Void\", img: \"modules/ddb-importer/img/encounters/void.webp\" },\n  ];\n\n  /**\n   * Display information when Munching\n   * @param {*} note\n   * @param {*} nameField\n   * @param {*} monsterNote\n   */\n  static munchNote(note, nameField = false, monsterNote = false) {\n    if (nameField) {\n      $(\"#munching-task-name\").text(note);\n      $(\"#ddb-importer-monsters\").css(\"height\", \"auto\");\n    } else if (monsterNote) {\n      $(\"#munching-task-monster\").text(note);\n      $(\"#ddb-importer-monsters\").css(\"height\", \"auto\");\n    } else {\n      $(\"#munching-task-notes\").text(note);\n      $(\"#ddb-importer-monsters\").css(\"height\", \"auto\");\n    }\n  }\n\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.baseApplication = \"DDBEncounterMuncher\";\n    options.id = \"ddb-importer-encounters\";\n    options.template = \"modules/ddb-importer/handlebars/encounters.hbs\";\n    options.resizable = false;\n    options.height = \"auto\";\n    options.width = 800;\n    options.title = \"MrPrimate's DDB Encounter Muncher\";\n    options.classes = [\"ddb-muncher\", \"sheet\"];\n    options.tabs = [{ navSelector: \".tabs\", contentSelector: \"div\", initial: \"settings\" }];\n    return options;\n  }\n\n  async parseEncounter(id) {\n    logger.debug(`Looking for Encounter \"${id}\"`);\n    if (this.ddbEncounters.encounters.length === 0) return this.encounter;\n    const monsterPack = CompendiumHelper.getCompendiumType(\"monster\", false);\n    await monsterPack.getIndex({ fields: [\"name\", \"flags.ddbimporter.id\"] });\n\n    const encounter = this.ddbEncounters.encounters.find((e) => e.id == id.trim());\n\n    let goodMonsterIds = [];\n    let missingMonsterIds = [];\n    logger.debug(\"Parsing encounter\", encounter);\n    encounter.monsters.forEach((monster) => {\n      const id = monster.id;\n      const monsterInPack = monsterPack.index.find((f) => f.flags?.ddbimporter?.id == id);\n      if (monsterInPack) {\n        goodMonsterIds.push({ ddbId: id, name: monsterInPack.name, id: monsterInPack._id, quantity: monster.quantity });\n      } else {\n        missingMonsterIds.push({ ddbId: id, quantity: monster.quantity });\n      }\n    });\n\n    let goodCharacterData = [];\n    let missingCharacterData = [];\n    encounter.players\n      .filter((character) => !character.hidden)\n      .forEach((character) => {\n        const characterInGame = game.actors.find(\n          (actor) =>\n            actor.flags?.ddbimporter?.dndbeyond?.characterId\n            && actor.flags.ddbimporter.dndbeyond.characterId == character.id\n        );\n        if (characterInGame) {\n          goodCharacterData.push({ id: characterInGame.id, name: characterInGame.name, ddbId: character.id });\n        } else {\n          missingCharacterData.push({ ddbId: character.id, name: character.name });\n        }\n      });\n\n    const difficulty = DDBEncounters.DIFFICULTY_LEVELS.find((level) => level.id == encounter.difficulty);\n\n    this.encounter = {\n      id,\n      name: encounter.name,\n      inProgress: encounter.inProgress,\n      turnNum: encounter.turnNum,\n      roundNum: encounter.roundNum,\n      difficulty,\n      description: encounter.description,\n      rewards: encounter.rewards,\n      summary: encounter.flavorText,\n      campaign: encounter.campaign,\n      monsters: encounter.monsters,\n      characters: encounter.players,\n      goodMonsterIds,\n      missingMonsterIds,\n      goodCharacterData,\n      missingCharacterData,\n      missingMonsters: missingMonsterIds.length !== 0,\n      missingCharacters: missingCharacterData.length !== 0,\n    };\n\n    this.folders = {};\n\n    logger.debug(\"Current encounter\", this.encounter);\n\n    return this.encounter;\n  }\n\n  resetEncounter(html) {\n    const nameHtml = html.find(\"#ddb-encounter-name\");\n    const summaryHtml = html.find(\"#ddb-encounter-summary\");\n    const charactersHtml = html.find(\"#ddb-encounter-characters\");\n    const monstersHtml = html.find(\"#ddb-encounter-monsters\");\n    const difficultyHtml = html.find(\"#ddb-encounter-difficulty\");\n    const rewardsHtml = html.find(\"#ddb-encounter-rewards\");\n    const progressHtml = html.find(\"#ddb-encounter-progress\");\n\n    nameHtml[0].innerHTML = `<p id=\"ddb-encounter-name\"><i class='fas fa-question'></i> <b>Encounter:</b></p>`;\n    summaryHtml[0].innerHTML = `<p id=\"ddb-encounter-summary\"><i class='fas fa-question'></i> <b>Summary:</b></p>`;\n    charactersHtml[0].innerHTML = `<p id=\"ddb-encounter-characters\"><i class='fas fa-question'></i> <b>Characters:</b></p>`;\n    monstersHtml[0].innerHTML = `<p id=\"ddb-encounter-monsters\"><i class='fas fa-question'></i> <b>Monsters:</b></p>`;\n    difficultyHtml[0].innerHTML = `<p id=\"ddb-encounter-difficulty\"><i class='fas fa-question'></i> <b>Difficulty:</b></p>`;\n    rewardsHtml[0].innerHTML = `<p id=\"ddb-encounter-rewards\"><i class='fas fa-question'></i> <b>Rewards:</b></p>`;\n    progressHtml[0].innerHTML = `<p id=\"ddb-encounter-progress\"><i class='fas fa-question'></i> <b>In Progress:</b></p>`;\n\n    $(\"#ddb-importer-encounters\").css(\"height\", \"auto\");\n    $(\"#encounter-button\").prop(\"disabled\", true);\n    $(\"#encounter-button\").prop(\"innerText\", \"Import Encounter\");\n    $(\"#encounter-import-policy-use-ddb-save\").prop(\"disabled\", true);\n    this.encounter = {};\n    this.journal = undefined;\n    this.combat = undefined;\n    this.tokens = [];\n  }\n\n  async importMonsters() {\n    const importMonsters = game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-missing-monsters\");\n\n    if (importMonsters && this.encounter.missingMonsters && this.encounter.missingMonsterIds.length > 0) {\n      logger.debug(\"Importing missing monsters from DDB\");\n      const monsterFactory = new DDBMonsterFactory({ munchNote: DDBEncounterMunch.munchNote });\n      await monsterFactory.processIntoCompendium(this.encounter.missingMonsterIds.map((monster) => monster.ddbId));\n      logger.debug(\"Finised Importing missing monsters from DDB\");\n    }\n\n    const monsterPack = CompendiumHelper.getCompendiumType(\"monster\", false);\n    await monsterPack.getIndex({ fields: [\"name\", \"flags.ddbimporter.id\"] });\n    const compendiumName = CompendiumHelper.getCompendiumLabel(\"monster\");\n\n    let monstersToAddToWorld = [];\n    this.encounter.monsterData = [];\n    this.encounter.worldMonsters = [];\n    let journalMonsterInfo = new Map();\n    this.encounter.monsters.forEach((monster) => {\n      const id = monster.id;\n      const monsterInPack = monsterPack.index.find((f) => f.flags?.ddbimporter?.id == id);\n      if (monsterInPack) {\n        let monsterData = {\n          ddbId: id,\n          name: monsterInPack.name,\n          id: monsterInPack._id,\n          quantity: monster.quantity,\n          journalLink: `@Compendium[${compendiumName}.${monsterInPack._id}]{${monsterInPack.name}}`,\n        };\n        if (journalMonsterInfo.has(monsterData.ddbId)) {\n          monsterData = journalMonsterInfo.get(monsterData.ddbId);\n          monsterData.quantity += monster.quantity;\n        }\n        journalMonsterInfo.set(monsterData.ddbId, monsterData);\n\n        for (let i = 0; i < monster.quantity; i++) {\n          let addData = foundry.utils.deepClone(monsterData);\n          addData.quantity = 1;\n          addData.uniqueId = monster.uniqueId;\n          addData.initiative = monster.initiative;\n          addData.currentHitPoints = monster.currentHitPoints;\n          addData.maximumHitPoints = monster.maximumHitPoints;\n          addData.temporaryHitPoints = monster.temporaryHitPoints;\n          addData.ddbName = monster.name ? monster.name : monsterInPack.name;\n          monstersToAddToWorld.push(addData);\n        }\n      }\n    });\n    this.encounter.monsterData = Object.values(journalMonsterInfo);\n\n    const encounterMonsterFolder = await FolderHelper.getFolder(\n      \"npc\",\n      this.encounter.name,\n      \"D&D Beyond Encounters\",\n      \"#6f0006\",\n      \"#98020a\",\n      false\n    );\n\n    logger.debug(\"Trying to import monsters from compendium\", monstersToAddToWorld);\n    await utils.asyncForEach(monstersToAddToWorld, async (actor) => {\n      let worldActor = game.actors.find(\n        (a) => a.folder?.id == encounterMonsterFolder.id && a.flags?.ddbimporter?.id == actor.ddbId\n      );\n      if (!worldActor) {\n        logger.info(\n          `Importing monster ${actor.name} with DDB ID ${actor.ddbId} from ${monsterPack.metadata.name} with id ${actor.id}`\n        );\n        try {\n          worldActor = await game.actors.importFromCompendium(monsterPack, actor.id, {\n            folder: encounterMonsterFolder.id,\n          });\n        } catch (err) {\n          logger.error(err);\n          logger.warn(`Unable to import actor ${actor.name} with id ${actor.id} from DDB Compendium`);\n          logger.debug(\n            `Failed on: game.actors.importFromCompendium(monsterCompendium, \"${actor.id}\", { folder: \"${encounterMonsterFolder.id}\" });`\n          );\n        }\n      }\n      this.encounter.worldMonsters.push(foundry.utils.mergeObject(actor, { id: worldActor.id }));\n    });\n\n    return new Promise((resolve) => {\n      resolve(this.encounter.worldMonsters);\n    });\n  }\n\n  async importCharacters(html) {\n    const importCharacters = game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-missing-characters\");\n    if (importCharacters && this.encounter.missingCharacters) {\n      await utils.asyncForEach(this.encounter.missingCharacterData, async (character) => {\n        await importCharacterById(character.ddbId, html);\n      });\n    }\n  }\n\n  async createJournalEntry() {\n    logger.debug(`Creating journal entry`);\n    const journal = {\n      name: this.encounter.name,\n      flags: {\n        ddbimporter: {\n          encounterId: this.encounter.id,\n        },\n      },\n    };\n\n    const importJournal = game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-create-journal\");\n    if (importJournal) {\n      const journalFolder = await FolderHelper.getFolder(\n        \"journal\",\n        this.encounter.name,\n        \"D&D Beyond Encounters\",\n        \"#6f0006\",\n        \"#98020a\",\n        false\n      );\n      journal.folder = journalFolder.id;\n      journal.content = `<h1>${this.encounter.name}</h1>`;\n      if (this.encounter.summary && this.encounter.summary != \"\") {\n        journal.content += `<h2>Summary</h2>${this.encounter.summary}`;\n      }\n      if (this.encounter.monsterData && this.encounter.monsterData.length > 0) {\n        journal.content += `<h2>Monsters</h2><ul>`;\n        this.encounter.monsterData.forEach((monster) => {\n          journal.content += `<li><p>${monster.journalLink} x${monster.quantity}</p></li>`;\n        });\n        journal.content += `</ul>`;\n      }\n      if (this.encounter.difficulty && this.encounter.difficulty != \"\") {\n        journal.content += `<h2>Difficulty: <span style=\"color: ${this.encounter.difficulty.color}\">${this.encounter.difficulty.name}</span></h3>`;\n      }\n      if (this.encounter.description && this.encounter.description != \"\") {\n        journal.content += `<h2>Description</h2>${this.encounter.description}`;\n      }\n      if (this.encounter.rewards && this.encounter.rewards != \"\") {\n        journal.content += `<h2>Rewards</h2>${this.encounter.rewards}`;\n      }\n\n      let worldJournal = game.journal.find(\n        (a) => a.folder == journalFolder.id && a.flags?.ddbimporter?.encounterId == this.encounter.id\n      );\n      if (!worldJournal) {\n        logger.info(`Importing journal ${journal.name}`);\n        try {\n          worldJournal = await JournalEntry.create(journal);\n        } catch (err) {\n          logger.error(err);\n          logger.warn(`Unable to create journal ${journal.name}`);\n        }\n      } else {\n        logger.info(`Updating journal ${journal.name}`);\n        journal._id = worldJournal.id;\n        await worldJournal.update(journal);\n      }\n      this.journal = worldJournal;\n    }\n\n    return new Promise((resolve) => {\n      resolve(journal);\n    });\n  }\n\n\n  async createNewScene() {\n    this.folders[\"scene\"] = await FolderHelper.getFolder(\n      \"scene\",\n      this.encounter.name,\n      \"D&D Beyond Encounters\",\n      \"#6f0006\",\n      \"#98020a\",\n      false\n    );\n\n    let sceneData = {\n      name: this.encounter.name,\n      flags: {\n        ddbimporter: {\n          encounterId: this.encounter.id,\n          encounters: true,\n        },\n      },\n      width: 1000,\n      height: 1000,\n      grid: {\n        type: 1,\n        size: 100,\n        distance: 5,\n        units: \"ft\",\n      },\n      padding: 0.25,\n      initial: {\n        x: 500,\n        y: 500,\n        scale: 0.57,\n      },\n      img: this.img,\n      tokenVision: false,\n      fogExploration: false,\n      folder: this.folders[\"scene\"].id,\n    };\n\n    return sceneData;\n\n  }\n\n  // eslint-disable-next-line complexity\n  async createScene() {\n    const importDDBIScene = game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-create-scene\");\n    const useExistingScene = game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-existing-scene\");\n\n    if (!importDDBIScene && !useExistingScene) return undefined;\n\n    let sceneData;\n    let worldScene;\n\n    if (importDDBIScene) {\n      logger.debug(`Creating scene for encounter \"${this.encounter.name}\"\"`);\n      sceneData = await this.createNewScene();\n    } else if (useExistingScene) {\n      worldScene = game.scenes.find((s) => s.id == this.sceneId);\n      if (worldScene) {\n        sceneData = worldScene.toObject();\n        logger.debug(`Using existing scene \"${worldScene.name}\" for encounter \"${this.encounter.name}\"\"`, { worldScene, sceneData });\n      } else {\n        logger.warn(`Unable to find scene ${this.sceneId}, creating a new scene `);\n        throw new Error(`Unable to find scene ${this.sceneId}, creating a new scene `);\n      }\n      this.scene = worldScene;\n    }\n\n    if (sceneData) {\n      let tokenData = [];\n      const useDDBSave\n        = this.encounter.inProgress && game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-use-ddb-save\");\n      const xSquares = sceneData.width / sceneData.grid.size;\n      const ySquares = sceneData.height / sceneData.grid.size;\n      const midSquareOffset = sceneData.grid.size / 2;\n      const widthPaddingOffset = sceneData.width * sceneData.padding;\n      const heightPaddingOffset = sceneData.height * sceneData.padding;\n      const xPCOffset = sceneData.grid.size * (xSquares - 1);\n      const xStartPixelMonster = widthPaddingOffset + midSquareOffset;\n      const xStartPixelPC = xStartPixelMonster + xPCOffset;\n      const yStartPixel = heightPaddingOffset + midSquareOffset;\n      let characterCount = 0;\n      this.encounter.characters\n        .filter((character) => !character.hidden)\n        .forEach(async (character) => {\n          logger.info(`Generating token ${character.name} for ${this.encounter.name}`);\n          const characterInGame = game.actors.find(\n            (actor) =>\n              actor.flags?.ddbimporter?.dndbeyond?.characterId\n              && actor.flags.ddbimporter.dndbeyond.characterId == character.id\n          );\n          if (characterInGame) {\n            const onScene = useExistingScene && worldScene.tokens\n              .some((t) => t.actor.flags?.ddbimporter?.id == character.id && t.actor.type == \"character\");\n\n            if (!onScene) {\n              const linkedToken = foundry.utils.duplicate(await characterInGame.getTokenDocument());\n              if (useDDBSave) {\n                foundry.utils.setProperty(linkedToken, \"flags.ddbimporter.dndbeyond.initiative\", character.initiative);\n              }\n              foundry.utils.setProperty(linkedToken, `delta.flags.ddbimporter.encounters`, true);\n              foundry.utils.setProperty(linkedToken, `delta.flags.ddbimporter.encounterId`, this.encounter.id);\n              linkedToken.x = xStartPixelPC;\n              const yOffsetChange = characterCount * sceneData.grid.size;\n              linkedToken.y = yStartPixel + yOffsetChange;\n              tokenData.push(linkedToken);\n              characterCount++;\n            }\n          }\n        });\n\n      let monsterDepth = 0;\n      let monsterRows = 0;\n      let rowMonsterWidth = 1;\n      for (const worldMonster of this.encounter.worldMonsters) {\n        logger.info(`Generating token ${worldMonster.ddbName} (${worldMonster.name}) for ${this.encounter.name}`);\n        const monster = game.actors.get(worldMonster.id);\n        const linkedToken = foundry.utils.duplicate(await monster.getTokenDocument());\n        if (monsterDepth + linkedToken.height > ySquares) {\n          monsterDepth = 0;\n          monsterRows += rowMonsterWidth;\n          rowMonsterWidth = 1;\n        }\n\n        foundry.utils.setProperty(linkedToken, \"name\", worldMonster.ddbName);\n        foundry.utils.setProperty(linkedToken, `delta.name`, worldMonster.ddbName);\n        foundry.utils.setProperty(linkedToken, \"flags.ddbimporter.dndbeyond.uniqueId\", worldMonster.uniqueId);\n        foundry.utils.setProperty(linkedToken, \"flags.ddbimporter.encounterId\", this.encounter.id);\n        foundry.utils.setProperty(linkedToken, `delta.flags.ddbimporter.dndbeyond.uniqueId`, worldMonster.uniqueId);\n        foundry.utils.setProperty(linkedToken, `delta.flags.ddbimporter.encounters`, true);\n        foundry.utils.setProperty(linkedToken, `delta.flags.ddbimporter.encounterId`, this.encounter.id);\n        const xOffsetChange = sceneData.grid.size * monsterRows;\n        const yOffsetChange = monsterDepth * sceneData.grid.size;\n        linkedToken.x = xStartPixelMonster + xOffsetChange;\n        linkedToken.y = yStartPixel + yOffsetChange;\n        if (useDDBSave) {\n          foundry.utils.setProperty(linkedToken, \"flags.ddbimporter.dndbeyond.initiative\", worldMonster.initiative);\n          // if no hp changes have been made on a monster on ddb it says 0 here\n          if (worldMonster.maximumHitPoints !== 0) {\n            foundry.utils.setProperty(linkedToken, `delta.system.attributes.hp.max`, worldMonster.maximumHitPoints);\n            foundry.utils.setProperty(\n              linkedToken,\n              `delta.system.attributes.hp.value`,\n              worldMonster.currentHitPoints + worldMonster.temporaryHitPoints\n            );\n          }\n        }\n\n        tokenData.push(linkedToken);\n        monsterDepth += linkedToken.height;\n        if (linkedToken.width > rowMonsterWidth) rowMonsterWidth = linkedToken.width;\n      }\n\n      if (this.journal?.id) sceneData.journal = this.journal.id;\n\n      if (importDDBIScene) {\n        worldScene = game.scenes.find(\n          (a) => a.folder == this.folders[\"scene\"].id\n          && a.flags?.ddbimporter?.encounterId == this.encounter.id\n        );\n      }\n\n      if (worldScene) {\n        logger.info(`Updating scene ${sceneData.name}`);\n        const existingCombats = game.combats.filter((c) =>\n          c.scene?.id == worldScene.id\n          && c.flags?.ddbimporter?.encounterId == this.encounter.id\n        );\n        await Combat.deleteDocuments(existingCombats.map((c) => c.id));\n        if (importDDBIScene) {\n          logger.info(`Updating DDBI scene ${sceneData.name}`);\n          sceneData._id = worldScene.id;\n          await worldScene.deleteEmbeddedDocuments(\"Token\", [], { deleteAll: true });\n          await worldScene.update(foundry.utils.mergeObject(worldScene.toObject(), sceneData));\n        } else if (useExistingScene) {\n          logger.info(`Checking existing scene ${sceneData.name} for encounter monsters`);\n          const existingSceneMonsterIds = worldScene.tokens\n            .filter((t) => t.flags?.ddbimporter?.encounterId == this.encounter.id && t.actor.type == \"npc\")\n            .map((t) => t.id);\n          await worldScene.deleteEmbeddedDocuments(\"Token\", existingSceneMonsterIds);\n        }\n      } else if (importDDBIScene) {\n        logger.info(`Importing scene ${sceneData.name}`);\n        try {\n          // eslint-disable-next-line require-atomic-updates\n          worldScene = await Scene.create(sceneData);\n        } catch (err) {\n          logger.error(err);\n          logger.warn(`Unable to create scene ${sceneData.name}`);\n        }\n      }\n\n      const thumbData = await worldScene.createThumbnail();\n      const thumbScene = worldScene.toObject();\n      thumbScene[\"thumb\"] = thumbData.thumb;\n\n      logger.debug(\"Creating tokenens on scene\", tokenData);\n      // eslint-disable-next-line require-atomic-updates\n      worldScene = await worldScene.update(thumbScene, { keepId: true });\n\n      await worldScene.createEmbeddedDocuments(\"Token\", tokenData);\n\n      this.scene = worldScene;\n    }\n    logger.debug(\"Scene created\", this.scene);\n\n    this.scene.render();\n\n    return this.scene;\n  }\n\n  async createCombatEncounter() {\n    const importCombat = game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-create-scene\")\n      || game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-existing-scene\");\n\n    if (!importCombat) return undefined;\n    logger.debug(`Creating combat for encounter ${this.encounter.name}`);\n\n    const useDDBSave\n      = this.encounter.inProgress && game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-use-ddb-save\");\n\n    await this.scene.view();\n    const flags = {\n      \"ddbimporter.encounterId\": this.encounter.id,\n    };\n    this.combat = await Combat.create({ scene: this.scene.id, flags: flags });\n    await this.combat.activate();\n\n    let toCreate = [];\n    const tokens = canvas.tokens.placeables\n      .filter((t) => t.document.flags?.ddbimporter?.encounterId == this.encounter.id || t.actor.type == \"character\");\n    if (tokens.length) {\n      tokens.forEach((t) => {\n        let combatant = { tokenId: t.id, actorId: t.document.actorId, hidden: t.document.hidden };\n        if (useDDBSave && t.document.flags.ddbimporter?.dndbeyond?.initiative)\n          combatant.initiative = t.document.flags.ddbimporter.dndbeyond.initiative;\n        if (!t.inCombat) toCreate.push(combatant);\n      });\n      const combatants = await this.combat.createEmbeddedDocuments(\"Combatant\", toCreate);\n\n      const rollMonsterInitiative = game.settings.get(\n        \"ddb-importer\",\n        \"encounter-import-policy-roll-monster-initiative\"\n      );\n      combatants\n        .filter((c) => rollMonsterInitiative && c.actor.type === \"npc\" && c.initiative === null)\n        .forEach(async (c) => {\n          if (c.initiative === null) await this.combat.rollInitiative(c.id);\n        });\n    }\n\n    return this.combat;\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n\n    $(html)\n      .find(\n        ['.munching-generic-config input[type=\"checkbox\"]', '.munching-monster-config input[type=\"checkbox\"]'].join(\",\")\n      )\n      .on(\"change\", (event) => {\n        MuncherSettings.updateMuncherSettings(html, event);\n      });\n\n    $(html)\n      .find(\n        [\n          '.import-policy input[type=\"checkbox\"]',\n          '.advanced-import-config input[type=\"checkbox\"]',\n          '.effect-policy input[type=\"checkbox\"]',\n          '.effect-import-config input[type=\"checkbox\"]',\n          '.extras-import-config input[type=\"checkbox\"]',\n          '.import-config input[type=\"checkbox\"]',\n        ].join(\",\")\n      )\n      .on(\"change\", (event) => {\n        MuncherSettings.updateActorSettings(html, event);\n      });\n\n    $(html)\n      .find(\"#default-effects\")\n      .on(\"click\", async (event) => {\n        event.preventDefault();\n        MuncherSettings.setRecommendedCharacterActiveEffectSettings(html);\n      });\n\n    $(html)\n      .find('.sync-policy input[type=\"checkbox\"]')\n      .on(\"change\", (event) => {\n        game.settings.set(\n          \"ddb-importer\",\n          \"sync-policy-\" + event.currentTarget.dataset.section,\n          event.currentTarget.checked\n        );\n      });\n\n    $(html)\n      .find('.encounter-config input[type=\"checkbox\"]')\n      .on(\"change\", (event) => {\n        switch (event.currentTarget.dataset.section) {\n          case \"create-scene\": {\n            game.settings.set(SETTINGS.MODULE_ID, \"encounter-import-policy-existing-scene\", false);\n            if (event.currentTarget.checked) $(\"#encounter-scene-select\").prop(\"disabled\", true);\n            $(\"#encounter-scene-img-select\").prop(\"disabled\", !event.currentTarget.checked);\n            $(\"#encounter-import-policy-existing-scene\").prop('checked', false);\n            break;\n          }\n          case \"existing-scene\": {\n            game.settings.set(SETTINGS.MODULE_ID, \"encounter-import-policy-create-scene\", false);\n            if (event.currentTarget.checked) $(\"#encounter-scene-img-select\").prop(\"disabled\", true);\n            $(\"#encounter-scene-select\").prop(\"disabled\", !event.currentTarget.checked);\n            $(\"#encounter-import-policy-create-scene\").prop('checked', false);\n            break;\n          }\n          // no default\n        };\n        game.settings.set(\n          \"ddb-importer\",\n          \"encounter-import-policy-\" + event.currentTarget.dataset.section,\n          event.currentTarget.checked\n        );\n      });\n\n    // img change\n    html.find(\"#encounter-scene-img-select\").on(\"change\", async () => {\n      const imgSelect = html.find(\"#encounter-scene-img-select\");\n      this.img = imgSelect[0].selectedOptions[0] ? imgSelect[0].selectedOptions[0].value : \"\";\n    });\n\n    html.find(\"#encounter-scene-select\").on(\"change\", async () => {\n      const imgSelect = html.find(\"#encounter-scene-select\");\n      this.sceneId = imgSelect[0].selectedOptions[0] ? imgSelect[0].selectedOptions[0].value : \"\";\n    });\n\n    // filter campaigns\n    html.find(\"#encounter-campaign-select\").on(\"change\", async () => {\n      const campaignSelection = html.find(\"#encounter-campaign-select\");\n      // get selected campaign from html selection\n      const campaignId = campaignSelection[0].selectedOptions[0]\n        ? campaignSelection[0].selectedOptions[0].value\n        : undefined;\n      const encounters = await this.ddbEncounters.filterEncounters(campaignId);\n      const campaignSelected = campaignId && campaignId !== \"\";\n      let encounterList = `<option value=\"\">Select encounter:</option>`;\n      encounters.forEach((encounter) => {\n        encounterList += `<option value=\"${encounter.id}\">${encounter.name}${\n          campaignSelected || !encounter.campaign ? \"\" : ` (${encounter.campaign.name})`\n        }</option>\\n`;\n      });\n      const list = html.find(\"#encounter-select\");\n      list[0].innerHTML = encounterList;\n      this.resetEncounter(html);\n    });\n\n    // encounter change\n    html.find(\"#encounter-select\").on(\"change\", async () => {\n      this.resetEncounter(html);\n      const encounterSelection = html.find(\"#encounter-select\");\n      const encounterId = encounterSelection[0].selectedOptions[0]\n        ? encounterSelection[0].selectedOptions[0].value\n        : undefined;\n\n      const encounter = await this.parseEncounter(encounterId);\n      // console.warn(encounter);\n\n      const nameHtml = html.find(\"#ddb-encounter-name\");\n      const summaryHtml = html.find(\"#ddb-encounter-summary\");\n      const charactersHtml = html.find(\"#ddb-encounter-characters\");\n      const monstersHtml = html.find(\"#ddb-encounter-monsters\");\n      const difficultyHtml = html.find(\"#ddb-encounter-difficulty\");\n      const rewardsHtml = html.find(\"#ddb-encounter-rewards\");\n      const progressHtml = html.find(\"#ddb-encounter-progress\");\n\n      const missingCharacters = encounter.missingCharacters\n        ? `fa-times-circle' style='color: red`\n        : `fa-check-circle' style='color: green`;\n      const missingMonsters = encounter.missingMonsters\n        ? `fa-times-circle' style='color: red`\n        : `fa-check-circle' style='color: green`;\n\n      const goodCharacters = encounter.goodCharacterData.map((character) => `${character.name}`).join(\", \");\n      const goodMonsters = encounter.goodMonsterIds.map((monster) => `${monster.name}`).join(\", \");\n      const neededCharactersHTML = encounter.missingCharacters\n        ? ` <span style=\"color: red\"> Missing ${\n          encounter.missingCharacterData.length\n        }: ${encounter.missingCharacterData.map((character) => character.name).join(\", \")}</span>`\n        : \"\";\n      const neededMonstersHTML = encounter.missingMonsters\n        ? ` <span style=\"color: red\"> Missing ${\n          encounter.missingMonsterIds.length\n        }. DDB Id's: ${encounter.missingMonsterIds.map((monster) => monster.ddbId).join(\", \")}</span>`\n        : \"\";\n\n      nameHtml[0].innerHTML = `<i class='fas fa-check-circle' style='color: green'></i> <b>Encounter:</b> ${encounter.name}`;\n      if (encounter.summary && encounter.summary.trim() !== \"\") {\n        summaryHtml[0].innerHTML = `<i class='fas fa-check-circle' style='color: green'></i> <b>Summary:</b> ${encounter.summary}`;\n      }\n      if (encounter.goodCharacterData.length > 0 || encounter.missingCharacterData.length > 0) {\n        charactersHtml[0].innerHTML = `<i class='fas ${missingCharacters}'></i> <b>Characters:</b> ${goodCharacters}${neededCharactersHTML}`;\n      }\n      if (encounter.goodMonsterIds.length > 0 || encounter.missingMonsterIds.length > 0) {\n        monstersHtml[0].innerHTML = `<i class='fas ${missingMonsters}'></i> <b>Monsters:</b> ${goodMonsters}${neededMonstersHTML}`;\n      }\n      difficultyHtml[0].innerHTML = `<i class='fas fa-check-circle' style='color: green'></i> <b>Difficulty:</b> <span style=\"color: ${encounter.difficulty.color}\">${encounter.difficulty.name}</span>`;\n      if (encounter.rewards && encounter.rewards.trim() !== \"\") {\n        rewardsHtml[0].innerHTML = `<i class='fas fa-check-circle' style='color: green'></i> <b>Rewards:</b> ${encounter.rewards}`;\n      }\n\n      progressHtml[0].innerHTML = encounter.inProgress\n        ? `<i class='fas fa-times-circle' style='color: red'></i> <b>In Progress:</b> <span style=\"color: red\"> Encounter in progress on <a href=\"https://www.dndbeyond.com/combat-tracker/${this.encounter.id}\">D&D Beyond!</a></span>`\n        : `<i class='fas fa-check-circle' style='color: green'></i> <b>In Progress:</b> No`;\n\n      $(\"#encounter-import-policy-use-ddb-save\").prop(\"disabled\", !encounter.inProgress);\n      $(\"#ddb-importer-encounters\").css(\"height\", \"auto\");\n      $(\"#encounter-button\").prop(\"disabled\", false);\n    });\n\n    // import encounter\n    html.find(\"#encounter-button\").click(async (event) => {\n      event.preventDefault();\n      $(\"#encounter-button\").prop(\"disabled\", true);\n      $(\"#encounter-button\").prop(\"innerText\", \"Munching...\");\n\n      await this.importMonsters();\n      await this.importCharacters(html);\n      await this.createJournalEntry();\n      const scene = await this.createScene();\n      if (scene) {\n        logger.info(`Scene ${scene.id} created`);\n        await this.createCombatEncounter();\n      };\n\n      // to do:\n      // adjust monsters hp?\n      // add initiative if combat in progress?\n      // - extra import?\n      // - attempt to find magic items and add them to the world?\n\n      $(\"#encounter-button\").prop(\"innerText\", \"Encounter Munched\");\n      const campaignFluff\n        = this.encounter.campaign?.name && this.encounter.campaign.name.trim() !== \"\" ? ` of ${this.encounter.name}` : \"\";\n      ui.notifications.warn(`Prepare to battle heroes${campaignFluff}, your doom awaits in ${this.encounter.name}!`);\n    });\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async getData() {\n    const tier = PatreonHelper.getPatreonTier();\n    const tiers = PatreonHelper.calculateAccessMatrix(tier);\n    const availableCampaigns = await DDBCampaigns.getAvailableCampaigns();\n    const availableEncounters = await this.ddbEncounters.filterEncounters();\n\n    const characterSettings = MuncherSettings.getCharacterImportSettings();\n    const muncherSettings = MuncherSettings.getMuncherSettings(false);\n\n    const importSettings = foundry.utils.mergeObject(characterSettings, muncherSettings);\n\n    const encounterConfig = [\n      {\n        name: \"missing-characters\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-missing-characters\"),\n        enabled: true,\n        description: \"Import missing characters?\",\n      },\n      {\n        name: \"missing-monsters\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-missing-monsters\"),\n        enabled: true,\n        description: \"Import missing monsters?\",\n      },\n      {\n        name: \"create-journal\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-create-journal\"),\n        enabled: true,\n        description: \"Create encounter journal entry?\",\n      },\n      {\n        name: \"use-ddb-save\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-use-ddb-save\"),\n        enabled: false,\n        description: \"Use save information from Encounter (HP for monsters and initiative for all)?\",\n      },\n      {\n        name: \"create-scene\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-create-scene\"),\n        enabled: true,\n        description: \"Create/update a scene to use, and add available characters and NPC's?\",\n      },\n      {\n        name: \"existing-scene\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-existing-scene\"),\n        enabled: true,\n        description: \"Use an existing scene?\",\n      },\n    ];\n\n    const scenes = game.scenes.filter((scene) => !scene.flags?.ddbimporter?.encounters)\n      .map((scene) => {\n        const folderName = scene.folder ? `[${scene.folder.name}] ` : \"\";\n        const s = {\n          name: `${folderName}${scene.name}`,\n          id: scene.id,\n        };\n        return s;\n      })\n      .sort((a, b) => a.name.localeCompare(b.name));\n\n    const encounterSettings = {\n      tiers,\n      availableCampaigns,\n      availableEncounters,\n      encounterConfig,\n      sceneImg: DDBEncounterMunch.SCENE_IMG,\n      scenes,\n      createSceneSelect: game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-create-scene\"),\n      existingSceneSelect: game.settings.get(SETTINGS.MODULE_ID, \"encounter-import-policy-existing-scene\"),\n    };\n\n    const data = foundry.utils.mergeObject(importSettings, encounterSettings);\n    logger.debug(\"Encounter muncher form data\", data);\n\n    return data;\n  }\n}\n","\nimport logger from \"../logger.js\";\nimport CompendiumHelper from \"./CompendiumHelper.js\";\n\nexport default class OriginFixer {\n\n  static ORIGIN_RE = /(.*)Actor\\.([^.]+)(.*)$/g;\n\n  // Some old DDB Actor parsings would add bad origins here\n  static COMPENDIUM_ORIGIN_RE = /Compendium\\.(.*)(?:Actor|null)\\.([^.]+)(.*)$/g;\n\n  static TOKEN_ORIGIN_RE = /(Scene.[^.]+.Token.[^.]+.Actor\\.[^.]+)(.*)$/g;\n\n  static _getEffectOrigin(effect, actorUuid, compendium = false) {\n    if (compendium) {\n      return effect.origin.replace(OriginFixer.COMPENDIUM_ORIGIN_RE, `${actorUuid}.$2$3`);\n    } else if (effect.origin.match(OriginFixer.TOKEN_ORIGIN_RE)) {\n      return effect.origin.replace(OriginFixer.TOKEN_ORIGIN_RE, `${actorUuid}$2`);\n    } else {\n      return effect.origin.replace(OriginFixer.ORIGIN_RE, `${actorUuid}$3`);\n    }\n  }\n\n  static async updateActorEffects(actor, compendiumOnly = false) {\n    if (!actor) return;\n    const newEffects = [];\n    const actorUuid = actor.uuid.replace(\"..\", \".\");\n    let changesMade = false;\n\n    for (const effect of actor.effects) {\n      const newEffect = effect.toObject();\n      const isDDBMonsterCompendium = effect.origin?.startsWith(`Compendium.${CompendiumHelper.getCompendiumLabel(\"monsters\")}.`);\n      const matchRe = compendiumOnly || isDDBMonsterCompendium ? OriginFixer.COMPENDIUM_ORIGIN_RE : OriginFixer.ORIGIN_RE;\n      if (typeof effect.origin === \"string\"\n        && effect.origin.match(matchRe)\n        && (!effect.origin.startsWith(\"Compendium\") || isDDBMonsterCompendium)\n      ) {\n        const testOrigin = OriginFixer._getEffectOrigin(effect, actorUuid, (compendiumOnly || isDDBMonsterCompendium));\n        const originLoaded = await fromUuid(testOrigin);\n        if (originLoaded && testOrigin !== effect.origin) {\n          changesMade = true;\n          logger.debug(`${actor.name} effect ${effect.name} origin ${effect.origin} -> ${testOrigin} ${actorUuid}`);\n          newEffect.origin = testOrigin;\n        }\n      }\n      newEffects.push(newEffect);\n    }\n    if (changesMade) {\n      logger.debug(`Replacing effects on actor ${actor.name} [${actorUuid}]`, newEffects);\n      await actor.updateEmbeddedDocuments(\"ActiveEffect\", newEffects);\n    }\n  }\n\n  static async fixActorOrigins(actor) {\n    await OriginFixer.updateActorEffects(actor);\n  }\n\n  static async fixTokenOrigins(tokenOrTokenDocument) {\n    if (!tokenOrTokenDocument.actor) return;\n    await OriginFixer.updateActorEffects(tokenOrTokenDocument.actor);\n  }\n\n  static async fixActorOriginsForAllActors() {\n    for (const actor of game.actors) {\n      await OriginFixer.updateActorEffects(actor);\n    }\n  }\n\n  static async fixTokenOriginsForScene(scene) {\n    for (const token of scene.tokens) {\n      await OriginFixer.updateActorEffects(token.actor);\n    }\n  }\n\n  static async fixTokenOriginsForActiveScene() {\n    await OriginFixer.fixTokenOriginsForScene(game.scenes.active);\n  }\n\n  static async fixTokenOriginsForAllScenes() {\n    for (const scene of game.scenes) {\n      await OriginFixer.fixTokenOriginsForScene(scene);\n    }\n  }\n\n}\n","// for exports\nimport DDBMonster from \"./parser/DDBMonster.js\";\nimport DDBMonsterFactory from \"./parser/DDBMonsterFactory.js\";\nimport { parseSpells } from \"./muncher/spells.js\";\nimport { parseItems } from \"./muncher/items.js\";\nimport { parseTransports } from \"./muncher/vehicles.js\";\nimport { updateWorldMonsters, resetCompendiumActorImages, parseCritters } from \"./muncher/tools.js\";\nimport DDBEncounterMunch from \"./apps/DDBEncounterMunch.js\";\nimport DDBEncounters from \"./parser/DDBEncounters.js\";\nimport { generateAdventureConfig, downloadAdventureConfig } from \"./muncher/adventure.js\";\nimport { updateDDBCharacter } from \"./updater/character.js\";\nimport DDBCharacterManager, { importCharacter, importCharacterById } from \"./apps/DDBCharacterManager.js\";\nimport { checkCobalt } from \"./lib/Secrets.js\";\n// import { base64Check } from \"./lib/base64Check.js\";\nimport { getFeats } from \"./muncher/feats/feats.js\";\nimport DDBMacros from \"./effects/DDBMacros.js\";\nimport Iconizer from \"./lib/Iconizer.js\";\nimport { importCacheLoad } from \"./lib/DDBReferenceLinker.js\";\nimport { getNPCImage } from \"./muncher/importMonster.js\";\nimport PatreonHelper from \"./lib/PatreonHelper.js\";\nimport CompendiumHelper from \"./lib/CompendiumHelper.js\";\nimport FileHelper from \"./lib/FileHelper.js\";\nimport { DirectoryPicker } from \"./lib/DirectoryPicker.js\";\nimport MuncherSettings from \"./lib/MuncherSettings.js\";\nimport DDBProxy from \"./lib/DDBProxy.js\";\nimport DDBCompanion from \"./parser/companions/DDBCompanion.js\";\nimport { DDBCompendiumFolders } from \"./lib/DDBCompendiumFolders.js\";\nimport DDBCompanionFactory from \"./parser/companions/DDBCompanionFactory.js\";\nimport SETTINGS from \"./settings.js\";\nimport DICTIONARY from \"./dictionary.js\";\nimport logger from \"./logger.js\";\nimport NameMatcher from \"./lib/NameMatcher.js\";\nimport OriginFixer from \"./lib/OriginFixer.js\";\nimport DDBEffectHelper from \"./effects/DDBEffectHelper.js\";\nimport DDBItemImporter from \"./lib/DDBItemImporter.js\";\nimport DialogHelper from \"./lib/DialogHelper.js\";\nimport utils from \"./lib/utils.js\";\nimport DDBHelper from \"./lib/DDBHelper.js\";\nimport { calculatePrice, updateItemPrices } from \"./muncher/prices.js\";\nimport DDBCampaigns from \"./lib/DDBCampaigns.js\";\nimport ChrisPremadesHelper from \"./effects/external/ChrisPremadesHelper.js\";\nimport ExternalAutomations from \"./effects/external/ExternalAutomations.js\";\nimport DDBSimpleMacro from \"./effects/DDBSimpleMacro.js\";\nimport DDBSummonsManager from \"./parser/companions/DDBSummonsManager.js\";\n\nfunction resetSecrets() {\n  game.settings.set(\"ddb-importer\", \"cobalt-cookie-local\", false);\n  game.settings.set(\"ddb-importer\", \"cobalt-cookie\", \"\");\n  game.settings.set(\"ddb-importer\", \"campaign-id\", \"\");\n}\n\n// eslint-disable-next-line no-unused-vars\nfunction migrateAllCompendiums(value, key, map) {\n  if (!value.locked) game.dnd5e.migrations.migrateCompendium(value);\n}\n\nfunction migrateCompendiums() {\n  const compendiumNames = CompendiumHelper.getCompendiumNames();\n  game.packs.filter((pack) => compendiumNames.includes(pack.collection)).forEach(migrateAllCompendiums);\n}\n\nfunction debugStart() {\n  CONFIG.debug.ddbimporter.record = true;\n}\n\nfunction debugStop() {\n  CONFIG.debug.ddbimporter.download();\n}\n\nfunction testFunction(testName) {\n  logger.debug(`generating test function: ${testName}`, testName);\n  const print = (...params) => {\n    logger.warn(`test function \"${testName}\" called with params`, { params });\n  };\n  return print;\n}\n\nfunction simpleTest(...params) {\n  logger.warn(`running simple test with params`, { params });\n}\n\nasync function updateFoundryCharacters() {\n  for (const actor of game.actors.values()) {\n    const ddbImported = 'ddbimporter' in actor.flags;\n    if (ddbImported && actor.type === \"character\") {\n      logger.info(`Updating ${actor.name} to DDB`);\n      await importCharacter(actor);\n    }\n  }\n}\n\nasync function updateDDBCharacters() {\n  for (const actor of game.actors.values()) {\n    const ddbImported = 'ddbimporter' in actor.flags;\n    if (ddbImported && actor.type === \"character\") {\n      logger.info(`Updating ${actor.name} to DDB`);\n      await updateDDBCharacter(actor);\n    }\n  }\n}\n\nexport function registerApi() {\n  const API = {\n    migrateCompendiums,\n    compendiums: {\n      migrateCompendiums,\n      DDBCompendiumFolders,\n      getCompendiumLabel: CompendiumHelper.getCompendiumLabel,\n      getCompendiumType: CompendiumHelper.getCompendiumType,\n      getCompendiumNames: CompendiumHelper.getCompendiumNames,\n      deleteDefaultCompendiums: CompendiumHelper.deleteDefaultCompendiums,\n    },\n    patreon: {\n      checkPatreon: PatreonHelper.checkPatreon,\n      getPatreonTier: PatreonHelper.getPatreonTier,\n      getPatreonUser: PatreonHelper.getPatreonUser,\n      calculateAccessMatrix: PatreonHelper.calculateAccessMatrix,\n      setPatreonTier: PatreonHelper.setPatreonTier,\n      fetchPatreonTier: PatreonHelper.fetchPatreonTier,\n      getPatreonValidity: PatreonHelper.getPatreonValidity,\n    },\n    lib: {\n      ChrisPremadesHelper,\n      CompendiumHelper,\n      DDBCampaigns,\n      DDBCharacterManager,\n      DDBCompanion,\n      DDBCompanionFactory,\n      DDBCompendiumFolders,\n      DDBSimpleMacro,\n      DDBEffectHelper,\n      DDBEncounterMunch,\n      DDBEncounters,\n      DDBHelper,\n      DDBItemImporter,\n      DDBMacros,\n      DDBMonster,\n      DDBMonsterFactory,\n      DDBProxy,\n      DDBSummonsManager,\n      DialogHelper,\n      DirectoryPicker,\n      FileHelper,\n      MuncherSettings,\n      NameMatcher,\n      OriginFixer,\n    },\n    settings: {\n      muncherSettings: MuncherSettings.getMuncherSettings,\n      characterSettings: MuncherSettings.getCharacterImportSettings,\n    },\n\n    // base64Check: base64Check,\n    checkCobalt,\n    resetProxy: DDBProxy.resetProxy,\n    resetSecrets,\n\n    generateAdventureConfig,\n    downloadAdventureConfig,\n\n    importCharacter, // imports an actor\n    importCharacterById, // imports and actor by id\n    updateDDBCharacter, // updates an actor back to ddb\n\n    // bulk update\n    updateAllPCs: {\n      foundry: updateFoundryCharacters,\n      ddb: updateDDBCharacters,\n    },\n\n    parse: {\n      monsters: parseCritters,\n      vehicles: parseTransports,\n      feats: getFeats,\n      items: parseItems,\n      spells: parseSpells,\n    },\n\n    prices: {\n      generateXgtePrices: updateItemPrices,\n      calculateXgtePrice: calculatePrice,\n    },\n\n    updateWorldMonsters,\n\n    getIconPath: Iconizer.iconPath,\n    iconPath: Iconizer.iconPath,\n    generateIcon: Iconizer.generateIcon,\n\n    importCacheLoad,\n    getNPCImage,\n    resetCompendiumActorImages,\n\n    generateItemMacroFlag: DDBMacros.generateItemMacroFlag,\n    EffectHelper: DDBEffectHelper,\n    DialogHelper,\n    effects: {\n      helpers: DDBEffectHelper,\n      ChrisPremadesHelper,\n      addChrisEffectsToActorDocuments: ExternalAutomations.addChrisEffectsToActorDocuments,\n      addDDBIEffectsToActorDocuments: DDBEffectHelper.addDDBIEffectsToActorDocuments,\n      addDDBIEffectToDocument: DDBEffectHelper.addDDBIEffectToDocument,\n      // these are now in DDBEffectHelper, wrapped here for historical reasons\n      addSaveAdvantageToTarget: DDBEffectHelper.addSaveAdvantageToTarget,\n      attachSequencerFileToTemplate: DDBEffectHelper.attachSequencerFileToTemplate,\n      checkCollision: DDBEffectHelper.checkCollision,\n      checkJB2a: DDBEffectHelper.checkJB2a,\n      checkTargetInRange: DDBEffectHelper.checkTargetInRange,\n      configureCustomAAForCondition: DDBEffectHelper.configureCustomAAForCondition,\n      findContainedTokensInTemplate: DDBEffectHelper.findContainedTokensInTemplate,\n      findEffect: DDBEffectHelper.findEffect,\n      findEffects: DDBEffectHelper.findEffects,\n      getCantripDice: DDBEffectHelper.getCantripDice,\n      getHighestAbility: DDBEffectHelper.getHighestAbility,\n      getRemainingDuration: DDBEffectHelper.getRemainingDuration,\n      isRangedWeaponAttack: DDBEffectHelper.isRangedWeaponAttack,\n      requirementsSatisfied: DDBEffectHelper.requirementsSatisfied,\n      selectTargetsWithinX: DDBEffectHelper.selectTargetsWithinX,\n      wait: DDBEffectHelper.wait,\n    },\n    executeDDBMacro: DDBMacros.executeDDBMacro,\n    // macro tools\n    macros: {\n      createMacro: DDBMacros.createMacro,\n      executeMacro: DDBMacros.executeDDBMacro,\n      getMacroFunction: DDBMacros.getMacroFunction,\n      loadMacroFile: DDBMacros.loadMacroFile,\n      macros: DDBMacros.MACROS,\n      getMacro: DDBMacros.getMacro,\n      executeSimpleMacro: DDBSimpleMacro.execute\n    },\n    chris: {\n      generateEffect: ExternalAutomations.applyChrisPremadeEffect,\n      generateEffects: ExternalAutomations.applyChrisPremadeEffects,\n      adjustActor: ExternalAutomations.addChrisEffectsToActorDocuments,\n    },\n    debug: {\n      start: debugStart,\n      stop: debugStop,\n      test: testFunction,\n      simpleTest: simpleTest,\n      utils,\n    },\n    DICTIONARY,\n  };\n\n  globalThis['DDBImporter'] = API;\n  game.modules.get(SETTINGS.MODULE_ID).api = API;\n  game.modules.get(SETTINGS.MODULE_ID).DICTIONARY = DICTIONARY;\n}\n","\nexport function chatHooks() {\n  Hooks.on(\"renderChatMessage\", (message, html) => {\n    const chatImg = html.find(\"img.ddbimporter-chat-image\");\n    chatImg.click((event) => {\n      event.preventDefault();\n      event.stopPropagation();\n      new ImagePopout($(chatImg).attr(\"src\"), { shareable: true }).render(true);\n    });\n  });\n}\n","import SETTINGS from \"../settings.js\";\n\n\nexport class DDBAdventureImporter extends AdventureImporter {\n\n  constructor(adventure, options) {\n    super(adventure, options);\n    this.options.classes.push(SETTINGS.ADVENTURE_CSS);\n    this.importOptions = {};\n  }\n\n  /** @inheritDoc */\n  async getData() {\n    return foundry.utils.mergeObject(await super.getData(), {\n      importOptions: this.importOptions || {}\n    });\n  }\n\n  /** @inheritDoc */\n  async _renderInner(data) {\n    const html = await super._renderInner(data);\n\n    let options = `<section class=\"import-form\"><h2>Importer Options</h2>`;\n    for (const [name, option] of Object.entries(this.importOptions)) {\n      options += `<div class=\"form-group\">\n        <label class=\"checkbox\">\n            <input type=\"checkbox\" name=\"${name}\" title=\"${option.label}\" ${option.default ? \"checked\" : \"\"}/>\n            ${option.label}\n        </label>\n    </div>`;\n    }\n    options += `</section>`;\n\n    html.find(\".adventure-contents\").append(options);\n    return html;\n  }\n\n  /** @inheritDoc */\n  async importContent(toCreate, toUpdate, documentCount) {\n    const importResult = await super.importContent(toCreate, toUpdate, documentCount);\n    for (let [name, option] of Object.entries(this.importOptions || {})) {\n      if (option.handler) {\n        await option.handler(this.document, option, this.submitOptions[name]);\n      }\n    }\n    return importResult;\n  }\n\n}\n","import { DDBAdventureImporter } from \"../../apps/DDBAdventureImporter.js\";\nimport SETTINGS from \"../../settings.js\";\n\nexport default function () {\n  DocumentSheetConfig.registerSheet(Adventure, SETTINGS.MODULE_ID, DDBAdventureImporter, {\n    label: \"DDB Adventure Importer\"\n  });\n\n  // Hooks.on(\"renderJournalSheet\", (app, html) => {\n  //   const journal = app.document;\n  //   if (journal.getFlag(SETTINGS.FLAG_NAME, SETTINGS.ADVENTURE_FLAG)) html[0].classList.add(SETTINGS.ADVENTURE_CSS);\n  // });\n\n  // Hooks.on(\"renderJournalPageSheet\", (app, html) => {\n  //   const journal = app.document.parent;\n  //   if (journal.getFlag(SETTINGS.FLAG_NAME, SETTINGS.ADVENTURE_FLAG)) html[0].classList.add(SETTINGS.ADVENTURE_CSS);\n  // });\n\n}\n","import { DirectoryPicker } from \"../lib/DirectoryPicker.js\";\nimport PatreonHelper from \"../lib/PatreonHelper.js\";\nimport DDBCampaigns from \"../lib/DDBCampaigns.js\";\nimport DDBMuncher from \"./DDBMuncher.js\";\nimport { getCobalt, setCobalt, moveCobaltToLocal, moveCobaltToSettings, checkCobalt } from \"../lib/Secrets.js\";\nimport logger from \"../logger.js\";\nimport SETTINGS from \"../settings.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\n\n// eslint-disable-next-line no-unused-vars\nHooks.on(\"renderma\", (app, html, user) => {\n  DirectoryPicker.processHtml(html);\n});\n\nexport default class DDBSetup extends FormApplication {\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.id = \"ddb-importer-settings\";\n    options.template = \"modules/ddb-importer/handlebars/settings.hbs\";\n    options.width = 500;\n    return options;\n  }\n\n  static isSetupComplete(needsCobalt = true) {\n    const uploadDir = game.settings.get(SETTINGS.MODULE_ID, \"image-upload-directory\");\n    const dataDirSet = !FileHelper.BAD_DIRS.includes(uploadDir);\n    const cobalt = getCobalt() != \"\";\n    const setupComplete = dataDirSet && (cobalt || !needsCobalt);\n    return setupComplete;\n  }\n\n  get title() { // eslint-disable-line class-methods-use-this\n    // improve localisation\n    // game.i18n.localize(\"\")\n    return \"DDB Importer Settings\";\n  }\n\n  /** @override */\n  async getData() { // eslint-disable-line class-methods-use-this\n    const cobalt = getCobalt();\n    const isCobalt = cobalt !== \"\";\n    const cobaltStatus = await checkCobalt(\"\", cobalt);\n    const cobaltLocal = game.settings.get(SETTINGS.MODULE_ID, \"cobalt-cookie-local\");\n    const key = PatreonHelper.getPatreonKey();\n    const hasKey = key !== \"\";\n    const campaignId = DDBCampaigns.getCampaignId();\n    const tier = PatreonHelper.getPatreonTier();\n    const patreonUser = game.settings.get(SETTINGS.MODULE_ID, \"patreon-user\");\n    const validKeyObject = hasKey ? (await PatreonHelper.getPatreonValidity(key)) : false;\n    const validKey = validKeyObject && validKeyObject.success && validKeyObject.data;\n    const availableCampaigns = isCobalt && cobaltStatus.success ? await DDBCampaigns.getAvailableCampaigns() : [];\n\n    this.campaignFallback = false;\n\n    availableCampaigns.forEach((campaign) => {\n      const selected = campaign.id == campaignId;\n      campaign.selected = selected;\n    });\n\n    const setupConfig = {\n      \"cobalt-cookie\": cobalt,\n      \"available-campaigns\": availableCampaigns,\n      \"campaign-id\": campaignId,\n      \"beta-key\": key,\n    };\n\n    const setupComplete = isCobalt;\n\n    return {\n      campaignId,\n      cobalt: isCobalt,\n      cobaltLocal,\n      setupConfig,\n      setupComplete,\n      tier,\n      patreonLinked: patreonUser && patreonUser != \"\",\n      patreonUser,\n      validKey,\n    };\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n    html.find(\"#patreon-button\").click(async (event) => {\n      event.preventDefault();\n      PatreonHelper.linkToPatreon();\n    });\n    html.find(\"#campaign-button\").click(async (event) => {\n      event.preventDefault();\n      const cookie = html.find(\"#cobalt-cookie-input\");\n      const cookieStatus = await DDBSetup.checkCobaltCookie(cookie[0].value);\n      if (!cookieStatus.success) return;\n      const campaigns = await DDBCampaigns.refreshCampaigns(cookie[0].value);\n      const list = html.find(\"#campaign-select\");\n      let campaignList = `<option value=\"\">Select campaign:</option>`;\n      if (!campaigns || (Array.isArray(campaigns) && campaigns.length === 0)) {\n        this.campaignFallback = true;\n        const fallback = html.find(\"#ddb-campaign-fallback\");\n        list[0].classList.add(\"ddbimporter-none\");\n        fallback[0].classList.remove(\"ddbimporter-none\");\n        logger.warn(\"Unable to fetch campaigns\", campaigns);\n      } else {\n        if (Array.isArray(campaigns) && campaigns.length > 0) {\n          campaigns.forEach((campaign) => {\n            campaignList += `<option value=\"${campaign.id}\">${campaign.name} (${campaign.dmUsername}) - ${campaign.id}</option>\\n`;\n          });\n        }\n\n        list[0].innerHTML = campaignList;\n      }\n\n    });\n    html.find(\"#check-cobalt-button\").click(async (event) => {\n      event.preventDefault();\n      const cookie = html.find(\"#cobalt-cookie-input\");\n      if (cookie[0].value === undefined) throw new Error(\"undefined\");\n      const cobaltStatus = await checkCobalt(\"\", cookie[0].value);\n      const button = html.find(\"#check-cobalt-button\");\n      if (cobaltStatus.success) {\n        button[0].innerHTML = \"Check Cobalt Cookie - Success!\";\n      } else {\n        button[0].innerHTML = \"Check Cobalt Cookie - Failure!\";\n      }\n    });\n\n\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  static async checkCobaltCookie(value) {\n    const cookieStatus = await checkCobalt(\"\", value);\n    if (value !== \"\" && !cookieStatus.success) {\n      $('#munching-task-setup').text(`Your Cobalt Cookie is invalid, please check that you pasted the right information.`);\n      $('#ddb-importer-settings').css(\"height\", \"auto\");\n      throw new Error(`Your Cobalt Cookie is invalid, please check that you pasted the right information.`);\n    }\n    return cookieStatus;\n  }\n\n  static async setCobaltCookie(value, local) {\n    await DDBSetup.checkCobaltCookie(value);\n    await setCobalt(value);\n    await game.settings.set(SETTINGS.MODULE_ID, \"cobalt-cookie-local\", local);\n    const runCookieMigrate = local != game.settings.get(SETTINGS.MODULE_ID, \"cobalt-cookie-local\");\n    if (runCookieMigrate && local) {\n      moveCobaltToLocal();\n    } else if (runCookieMigrate && !local) {\n      moveCobaltToSettings();\n    }\n  }\n\n  /** @override */\n  async _updateObject(event, formData) { // eslint-disable-line class-methods-use-this\n    event.preventDefault();\n    const campaignSelect = formData['campaign-select'];\n    const fallbackCampaign = formData['campaign-fallback'];\n    const campaignId = this.campaignFallback && fallbackCampaign && fallbackCampaign !== \"\"\n      ? (fallbackCampaign ?? \"\")\n      : campaignSelect == 0\n        ? \"\"\n        : campaignSelect;\n    const cobaltCookie = formData['cobalt-cookie'];\n    const cobaltCookieLocal = formData['cobalt-cookie-local'];\n    const currentKey = PatreonHelper.getPatreonKey();\n\n    if (currentKey !== formData['beta-key']) {\n      await PatreonHelper.setPatreonKey(formData['beta-key']);\n      await PatreonHelper.setPatreonTier();\n    }\n\n    await game.settings.set(SETTINGS.MODULE_ID, \"campaign-id\", campaignId);\n    await DDBSetup.setCobaltCookie(cobaltCookie, cobaltCookieLocal);\n\n    const callMuncher = game.settings.get(SETTINGS.MODULE_ID, \"settings-call-muncher\");\n\n    if (callMuncher && cobaltCookie === \"\") {\n      $('#munching-task-setup').text(`To use Muncher you need to set a Cobalt Cookie value!`);\n      $('#ddb-importer-settings').css(\"height\", \"auto\");\n      throw new Error(`To use Muncher you need to set a Cobalt Cookie value!`);\n    } else if (callMuncher) {\n      game.settings.set(SETTINGS.MODULE_ID, \"settings-call-muncher\", false);\n      new DDBMuncher().render(true);\n    }\n  }\n}\n","import DICTIONARY from \"../dictionary.js\";\nimport logger from \"../logger.js\";\n\nexport class DDBAdventureFlags extends FormApplication {\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.title = \"DDB Adventure Imported Flags\";\n    options.template = \"modules/ddb-importer/handlebars/flag-details.hbs\";\n    options.classes = [\"ddb-importer-flags\", \"sheet\"];\n    options.width = 800;\n    return options;\n  }\n\n  /** @override */\n  async getData() { // eslint-disable-line class-methods-use-this\n    // console.warn(this);\n    // console.warn(this.object);\n    const item = this.object;\n\n    let flags = {};\n\n    const flagGroups = [\"ddb\", \"ddbimporter\", \"monsterMunch\", \"ddb-importer\"];\n    const ignoredSubFlagGroups = [\"ddbimporter.acEffects\", \"ddbimporter.autoAC\"];\n\n    function generateFlagLookup(flagData, flagName, flagGroupName) {\n      logger.debug(`FlagName ${flagName}, flagGroupName ${flagGroupName}`, flagData);\n      for (const flagKey in flagData) {\n        logger.debug(\"flagkey\", flagKey);\n        const flagValue = (flagKey === \"userData\") ? flagData[flagKey][\"userDisplayName\"] : flagData[flagKey];\n        const flagGroupSubName = `${flagGroupName}.${flagKey}`;\n        if (typeof flagValue === \"object\" && !ignoredSubFlagGroups.includes(flagGroupName) && !Array.isArray(flagValue)) {\n          logger.info(`recursive generateFlag call for ${flagName}`);\n          generateFlagLookup(flagValue, flagKey, flagGroupSubName);\n        } else if (!ignoredSubFlagGroups.includes(flagGroupName) && !ignoredSubFlagGroups.includes(flagGroupSubName)) {\n          if (!flags[flagGroupName]) flags[flagGroupName] = [];\n          flags[flagGroupName].push({\n            key: flagKey,\n            value: Array.isArray(flagValue) ? JSON.stringify(flagValue) : flagValue,\n          });\n        }\n      }\n    };\n\n    flagGroups.forEach((flagGroup) => {\n      logger.debug(`Flag group ${flagGroup}`, item.flags);\n      generateFlagLookup(item.flags[flagGroup], flagGroup, flagGroup);\n    });\n\n    const result = {\n      name: item.name,\n      flags,\n      monster: {\n        isMonster: this.object.type == \"npc\",\n        flags: [\n          {\n            name: \"keepItems\",\n            description: \"Keep this monsters item configuration for Adventure Muncher\",\n            isChecked: item.flags?.ddbimporter?.keepItems ?? false,\n          },\n          {\n            name: \"keepToken\",\n            description: \"Keep token? (The image needs to be manually set in the export data)\",\n            isChecked: item.flags?.ddbimporter?.keepToken ?? false,\n          },\n          {\n            name: \"keepAvatar\",\n            description: \"Keep avatar?  (The image needs to be manually set in the export data)\",\n            isChecked: item.flags?.ddbimporter?.keepAvatar ?? false,\n          },\n        ]\n      },\n      item: {\n        isItem: DICTIONARY.types.monster.includes(this.object.type) || this.object.type === \"spell\",\n        flags: [\n          {\n            name: \"customItem\",\n            description: \"Keep this custom item\",\n            isChecked: item.flags?.ddbimporter?.customItem ?? false,\n          }\n        ]\n      },\n    };\n\n    if (item.link) result[\"link\"] = item.link;\n    if (flags.bookCode && flags.slug) result[\"ddbLink\"] = `https://www.dndbeyond.com/${flags.bookCode}/${flags.slug}`;\n\n    logger.debug(\"flags\", flags);\n    return result;\n  }\n\n\n  activateListeners(html) {\n    super.activateListeners(html);\n    // watch the change of the import-policy-selector checkboxes\n    $(html)\n      .find(\n        [\n          '.flag-policy input[type=\"checkbox\"]',\n        ].join(\",\")\n      )\n      .on(\"change\", async (event) => {\n        const selection = event.currentTarget.dataset.section;\n        const checked = event.currentTarget.checked;\n        logger.debug(`Updating flag-policy for ${this.object.name}, ${selection} to ${checked}`);\n\n        await this.object.update({\n          flags: {\n            \"ddbimporter\": {\n              [selection]: checked\n            }\n          }\n        });\n      });\n  }\n}\n","import DDBCharacterManager from \"../../apps/DDBCharacterManager.js\";\nimport logger from \"../../logger.js\";\nimport DDBSetup from \"../../apps/DDBSetup.js\";\nimport { DDBAdventureFlags } from \"../../apps/DDBAdventureFlags.js\";\n\nconst API_ENDPOINT = \"https://character-service.dndbeyond.com/character/v5/character/\";\n// reference to the D&D Beyond popup\nconst POPUPS = {\n  json: null,\n  web: null,\n};\nconst renderPopup = (type, url) => {\n  if (POPUPS[type] && !POPUPS[type].close) {\n    POPUPS[type].focus();\n    POPUPS[type].location.href = url;\n  } else {\n    const ratio = window.innerWidth / window.innerHeight;\n    const width = Math.round(window.innerWidth * 0.5);\n    const height = Math.round(window.innerWidth * 0.5 * ratio);\n    POPUPS[type] = window.open(\n      url,\n      \"ddb_sheet_popup\",\n      `resizeable,scrollbars,location=no,width=${width},height=${height},toolbar=1`\n    );\n  }\n  return true;\n};\n\nfunction getCharacterButton(document, actor) {\n\n  const characterLink = game.settings.get(\"ddb-importer\", \"character-link-title\");\n  const whiteTitle = (game.settings.get(\"ddb-importer\", \"link-title-colour-white\")) ? \" white\" : \"\";\n  const buttonText = characterLink\n    ? `<a class=\"ddb-open-url\" title=\"DDB Importer\"><i class=\"fab fa-d-and-d-beyond${whiteTitle}\"></i></a>`\n    : '<button type=\"button\" id=\"ddbImporterButton\" class=\"inactive\"><i class=\"fab fa-d-and-d-beyond\"></button>';\n\n  let url = foundry.utils.hasProperty(document, \"flags.ddbimporter.dndbeyond.url\")\n    ? document.flags.ddbimporter.dndbeyond.url\n    : null;\n\n  let jsonURL = foundry.utils.hasProperty(document, \"flags.ddbimporter.dndbeyond.json\")\n    ? document.flags.ddbimporter.dndbeyond.json\n    : null;\n\n  let button = $(buttonText);\n  if (!characterLink && (!url || url.trim() === \"\")) button.removeClass(\"inactive\");\n\n  button.click((event) => {\n    if (event.shiftKey && (event.ctrlKey || event.metaKey)) {\n      new DDBAdventureFlags(document, {}).render(true);\n    } else if (event.shiftKey) {\n      event.preventDefault();\n      return renderPopup(\"web\", url);\n    } else if (event.altKey && jsonURL) {\n      event.preventDefault();\n      return renderPopup(\"json\", jsonURL);\n    } else if (event.altKey && !jsonURL) {\n      // get the character ID\n      const characterId = url.split(\"/\").pop();\n      if (characterId) {\n        event.preventDefault();\n        return renderPopup(\"json\", API_ENDPOINT + characterId);\n      }\n    } else if ((!event.shiftKey && !event.ctrlKey && !event.altKey) || url === null) {\n      const setupComplete = DDBSetup.isSetupComplete(false);\n\n      if (setupComplete) {\n        const characterImport = new DDBCharacterManager(DDBCharacterManager.defaultOptions, actor);\n        characterImport.render(true);\n      } else {\n        new DDBSetup().render(true);\n      }\n\n      return true;\n    }\n\n    return false;\n  });\n\n  return button;\n}\n\nfunction getNPCButton(document) {\n  const monsterLink = game.settings.get(\"ddb-importer\", \"monster-link-title\");\n  const whiteTitle = (game.settings.get(\"ddb-importer\", \"link-title-colour-white\")) ? \" white\" : \"\";\n\n  let url = document.flags.monsterMunch.url;\n\n  let button = monsterLink\n    ? $(`<a class=\"ddb-open-url\" title=\"D&D Beyond\"><i class=\"fab fa-d-and-d-beyond${whiteTitle}\"></i></a>`)\n    : $('<button type=\"button\" id=\"ddbImporterButton\"><i class=\"fab fa-d-and-d-beyond\"></button>');\n\n  // eslint-disable-next-line no-unused-vars\n  button.click((event) => {\n    if (event.shiftKey && (event.ctrlKey || event.metaKey)) {\n      new DDBAdventureFlags(document, {}).render(true);\n    } else {\n      logger.debug(`Clicked for url ${url}`);\n      renderPopup(\"web\", url);\n    }\n  });\n\n  return button;\n}\n\nexport function tidySheets() {\n  const api = game.modules.get('tidy5e-sheet-kgar')?.api ?? game.modules.get('tidy5e-sheet')?.api;\n  if (!api) return;\n\n  api.registerCharacterContent(\n    new api.models.HtmlContent({\n      html: `<div class=\"ddbCharacterName\"></div>`,\n      injectParams: {\n        selector: `[data-tidy-sheet-part=\"name-header-row\"]`,\n        position: \"afterbegin\",\n      },\n      enabled: (data) => {\n        const trustedUsersOnly = game.settings.get(\"ddb-importer\", \"restrict-to-trusted\");\n        const allowAllSync = game.settings.get(\"ddb-importer\", \"allow-all-sync\");\n        const titleLink = game.settings.get(\"ddb-importer\", \"character-link-title\");\n        const onlyTrustedUser = !allowAllSync && trustedUsersOnly && !game.user.isTrusted;\n        return (data.owner || onlyTrustedUser) && !titleLink;\n      },\n      onRender: (params) => {\n        const $ddbCharacterName = $(params.element).find(\".ddbCharacterName\");\n        const button = getCharacterButton(params.app.document, params.data.actor);\n        $ddbCharacterName.append(button);\n      },\n    })\n  );\n\n  // api.registerNpcContent(\n  //   new api.models.HtmlContent({\n  //     html: `<div class=\"ddbCharacterName\"></div>`,\n  //     injectParams: {\n  //       selector: `[data-tidy-sheet-part=\"name-header-row\"]`,\n  //       position: \"afterbegin\",\n  //     },\n  //     enabled: (params) => {\n  //       return foundry.utils.hasProperty(params, \"app.document.flags.monsterMunch.url\");\n  //     },\n  //     onRender: (params) => {\n  //       const $ddbCharacterName = $(params.element).find(\".ddbCharacterName\");\n  //       const button = getCharacterButton(params.app.document, params.data.actor);\n  //       $ddbCharacterName.append(button);\n  //     },\n  //   })\n  // );\n}\n\nexport default function () {\n  /**\n   * Character sheets\n   */\n  const pcSheetNames = Object.values(CONFIG.Actor.sheetClasses.character)\n    .map((sheetClass) => sheetClass.cls)\n    .map((sheet) => sheet.name);\n\n  const trustedUsersOnly = game.settings.get(\"ddb-importer\", \"restrict-to-trusted\");\n  const allowAllSync = game.settings.get(\"ddb-importer\", \"allow-all-sync\");\n  const characterLink = game.settings.get(\"ddb-importer\", \"character-link-title\");\n  const monsterLink = game.settings.get(\"ddb-importer\", \"monster-link-title\");\n\n  // const buttonText = characterLink\n  //   ? `<a class=\"ddb-open-url\" title=\"DDB Importer\"><i class=\"fab fa-d-and-d-beyond${whiteTitle}\"></i></a>`\n  //   : '<button type=\"button\" id=\"ddbImporterButton\" class=\"inactive\"><i class=\"fab fa-d-and-d-beyond\"></button>';\n\n  tidySheets();\n  pcSheetNames.forEach((sheetName) => {\n    Hooks.on(\"render\" + sheetName, (app, html, data) => {\n      // only for GMs or the owner of this character\n      if (!data.owner || !data.actor || (!allowAllSync && trustedUsersOnly && !game.user.isTrusted)) return;\n      if ($(html).find(\"#ddbImporterButton\").length > 0) return;\n\n      const button = getCharacterButton(app.document, data.actor);\n\n      if (characterLink) {\n        html.closest('.app').find('.ddb-open-url').remove();\n        let titleElement = html.closest('.app').find('.window-title');\n        if (!app._minimized) button.insertAfter(titleElement);\n      } else {\n        let wrap = $('<div class=\"ddbCharacterName\"></div>');\n        $(html).find(\"input[name='name']\").wrap(wrap);\n        $(html).find(\"input[name='name']\").parent().prepend(button);\n      }\n    });\n  });\n\n\n  /**\n   * NPC sheets\n   */\n  const npcSheetNames = Object.values(CONFIG.Actor.sheetClasses.npc)\n    .map((sheetClass) => sheetClass.cls)\n    .map((sheet) => sheet.name);\n\n  npcSheetNames.forEach((sheetName) => {\n    Hooks.on(\"render\" + sheetName, (app, html, data) => {\n      // only for GMs or the owner of this npc\n      if (!data.owner || !data.actor) return;\n      if (!app.document.flags?.monsterMunch?.url) return;\n      if ($(html).find(\"#ddbImporterButton\").length > 0) return;\n\n      let button = getNPCButton(app.document);\n\n      if (monsterLink) {\n        html.closest('.app').find('.ddb-open-url').remove();\n        let titleElement = html.closest('.app').find('.window-title');\n        if (!app._minimized) button.insertAfter(titleElement);\n      } else {\n        let wrap = $('<div class=\"ddbCharacterName\"></div>');\n        $(html).find(\"input[name='name']\").wrap(wrap);\n        $(html).find(\"input[name='name']\").parent().prepend(button);\n      }\n    });\n  });\n}\n","import SETTINGS from \"../settings.js\";\nimport DDBProxy from \"../lib/DDBProxy.js\";\n\n\nexport class DDBProxySetup extends FormApplication {\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.id = \"ddb-importer-proxy\";\n    options.template = \"modules/ddb-importer/handlebars/ddbProxySetup.hbs\";\n    options.width = 500;\n    return options;\n  }\n\n  get title() { // eslint-disable-line class-methods-use-this\n    return game.i18n.localize(`${SETTINGS.MODULE_ID}.Dialogs.DDBProxy.AppTitle`);\n  }\n\n  /** @override */\n  async getData() { // eslint-disable-line class-methods-use-this\n    const useCustomProxy = DDBProxy.isCustom();\n    const defaultAddress = SETTINGS.URLS.PROXY;\n    const proxyAddress = game.settings.get(SETTINGS.MODULE_ID, \"api-endpoint\");\n\n    return {\n      useCustomProxy,\n      proxyAddress,\n      defaultAddress,\n    };\n  }\n\n  /** @override */\n  async _updateObject(event, formData) { // eslint-disable-line class-methods-use-this\n    event.preventDefault();\n\n    const useCustomProxy = formData['custom-proxy'];\n    const proxyAddress = formData['api-endpoint'];\n\n    await game.settings.set(SETTINGS.MODULE_ID, \"custom-proxy\", useCustomProxy);\n    await game.settings.set(SETTINGS.MODULE_ID, \"api-endpoint\", proxyAddress);\n  }\n}\n","import PatreonHelper from \"../lib/PatreonHelper.js\";\nimport logger from \"../logger.js\";\nimport SETTINGS from \"../settings.js\";\n\nexport default class DDBDynamicUpdateSetup extends FormApplication {\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.id = \"ddb-importer-settings-dynamic-updates\";\n    options.template = \"modules/ddb-importer/handlebars/dynamic-updates.hbs\";\n    options.width = 500;\n    return options;\n  }\n\n  static getGMUsers() {\n    const updateUser = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-user\");\n\n    const gmUsers = game.users\n      .filter((user) => user.isGM)\n      .reduce((choices, user) => {\n        choices.push({\n          userId: user.id,\n          userName: user.name,\n          selected: user.id === updateUser,\n        });\n        return choices;\n      }, []);\n\n    return gmUsers;\n  }\n\n  get title() { // eslint-disable-line class-methods-use-this\n    // improve localisation\n    // game.i18n.localize(\"\")\n    return \"DDB Importer Dynamic Update Settings\";\n  }\n\n  /** @override */\n  async getData() { // eslint-disable-line class-methods-use-this\n    const tier = PatreonHelper.getPatreonTier();\n    const tiers = PatreonHelper.calculateAccessMatrix(tier);\n    const enabled = tiers.experimentalMid;\n\n    const policySettings = Object.keys(SETTINGS.DEFAULT_SETTINGS.READY.CHARACTER.DYNAMIC_SYNC)\n      .map((key) => {\n        return {\n          name: key,\n          isChecked: enabled && game.settings.get(SETTINGS.MODULE_ID, key),\n          description: game.i18n.localize(`${SETTINGS.MODULE_ID}.settings.dynamic-sync.${key}`),\n          enabled,\n        };\n      });\n    const settings = [\n      {\n        name: \"dynamic-sync\",\n        isChecked: enabled && game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync\"),\n        description: game.i18n.localize(`${SETTINGS.MODULE_ID}.settings.dynamic-sync.dynamic-sync`),\n        enabled,\n      },\n    ].concat(policySettings);\n    const gmUsers = DDBDynamicUpdateSetup.getGMUsers();\n\n    return {\n      settings,\n      gmUsers,\n    };\n  }\n\n  /** @override */\n  // eslint-disable-next-line class-methods-use-this\n  async _updateObject(event, formData) {\n    event.preventDefault();\n    const initial = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync\");\n    for (const [key, value] of Object.entries(formData)) {\n      await game.settings.set(SETTINGS.MODULE_ID, key, value);\n    }\n    const post = game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync\");\n\n    if (initial != post) {\n      logger.warn(\"RELOADING!\");\n      foundry.utils.debounce(window.location.reload(), 100);\n    }\n  }\n}\n","import SETTINGS from \"../settings.js\";\n\nexport default class DDBCompendiumSetup extends FormApplication {\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.id = \"ddb-importer-settings-compendium\";\n    options.template = \"modules/ddb-importer/handlebars/compendium.hbs\";\n    options.width = 500;\n    return options;\n  }\n\n  static getCompendiumLookups(type, selected) {\n    const excludedCompendiumPackages = [\n      \"dnd5e\",\n      \"dae\",\n      \"midiqol\",\n      \"magicitems\",\n      \"midi-srd\",\n      \"dae-srd\",\n      \"midi-qol\",\n      \"magic-items-2\",\n      \"chris-premades\",\n      \"ATL\",\n      \"ActiveAuras\",\n      \"token-attacher\",\n    ];\n\n    const selections = game.packs\n      .filter((pack) =>\n        pack.documentName === type\n      && !excludedCompendiumPackages.includes(pack.metadata.packageName)\n      )\n      .reduce((choices, pack) => {\n        choices[pack.collection] = {\n          label: `[${pack.metadata.packageName}] ${pack.metadata.label}`,\n          selected: pack.collection === selected,\n        };\n        return choices;\n      }, {});\n\n    return selections;\n  }\n\n  get title() { // eslint-disable-line class-methods-use-this\n    // improve localisation\n    // game.i18n.localize(\"\")\n    return \"DDB Importer Compendium Settings\";\n  }\n\n  /** @override */\n  async getData() { // eslint-disable-line class-methods-use-this\n    const settings = [\n      {\n        name: \"auto-create-compendium\",\n        isChecked: game.settings.get(SETTINGS.MODULE_ID, \"auto-create-compendium\"),\n        description: \"Create default compendiums if missing?\",\n        enabled: true,\n      },\n    ];\n\n    const compendiums = SETTINGS.COMPENDIUMS.map((comp) => ({\n      setting: comp.setting,\n      name: comp.title,\n      current: game.settings.get(SETTINGS.MODULE_ID, comp.setting),\n      compendiums: DDBCompendiumSetup.getCompendiumLookups(comp.type, game.settings.get(SETTINGS.MODULE_ID, comp.setting)),\n      auto: comp.auto,\n    }));\n\n    return {\n      settings,\n      compendiums,\n    };\n  }\n\n  /** @override */\n  // eslint-disable-next-line no-unused-vars\n  async _updateObject(event, formData) { // eslint-disable-line class-methods-use-this\n    event.preventDefault();\n    for (const [key, value] of Object.entries(formData)) {\n      game.settings.set(SETTINGS.MODULE_ID, key, value);\n    }\n  }\n}\n","import { DirectoryPicker } from \"../lib/DirectoryPicker.js\";\nimport logger from \"../logger.js\";\nimport SETTINGS from \"../settings.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\n\nexport default class DDBLocationSetup extends FormApplication {\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.id = \"ddb-importer-folders\";\n    options.template = \"modules/ddb-importer/handlebars/filePaths.hbs\";\n    options.width = 500;\n    return options;\n  }\n\n  get title() { // eslint-disable-line class-methods-use-this\n    // improve localisation\n    // game.i18n.localize(\"\")\n    return \"DDB Importer Location Settings\";\n  }\n\n  // in foundry v10 we no longer get read only form elements back\n  /** @override */\n  _getSubmitData(updateData = {}) {\n    let data = super._getSubmitData(updateData);\n\n    for (const element of this.form.elements) {\n      if (element.readOnly) {\n        const name = element.name;\n        const field = this.form.elements[name];\n        foundry.utils.setProperty(data, name, field.value);\n      }\n    }\n\n    return data;\n  }\n\n  /** @override */\n  async getData() { // eslint-disable-line class-methods-use-this\n    this.useWebP = game.settings.get(SETTINGS.MODULE_ID, \"use-webp\");\n    this.useDeepFilePaths = game.settings.get(SETTINGS.MODULE_ID, \"use-deep-file-paths\");\n    const directories = [];\n\n    for (const [key, value] of Object.entries(SETTINGS.DEFAULT_SETTINGS.READY.DIRECTORIES)) {\n      directories.push({\n        key,\n        value: game.settings.get(SETTINGS.MODULE_ID, key),\n        name: game.i18n.localize(value.name),\n        description: game.i18n.localize(value.hint),\n      });\n    }\n\n    return {\n      directories,\n      useWebP: this.useWebP,\n      useDeepFilePaths: this.useDeepFilePaths,\n    };\n  }\n\n  /** @override */\n  async _updateObject(event, formData) { // eslint-disable-line class-methods-use-this\n    event.preventDefault();\n\n    const useWebP = formData['image-use-webp'];\n    const useDeepFilePaths = formData['image-use-deep-file-paths'];\n\n    if (this.useWebP !== useWebP) await game.settings.set(SETTINGS.MODULE_ID, \"use-webp\", useWebP);\n    if (this.useDeepFilePaths !== useDeepFilePaths) {\n      await game.settings.set(SETTINGS.MODULE_ID, \"use-deep-file-paths\", useDeepFilePaths);\n    }\n\n    const directoryStatus = [];\n\n    for (const key of Object.keys(SETTINGS.DEFAULT_SETTINGS.READY.DIRECTORIES)) {\n      const value = formData[key];\n      await game.settings.set(SETTINGS.MODULE_ID, key, value);\n      directoryStatus.push({\n        key,\n        value,\n        isBad: FileHelper.BAD_DIRS.includes(value),\n        isValid: await DirectoryPicker.verifyPath(DirectoryPicker.parse(value)),\n      });\n    }\n\n    if (directoryStatus.some((dir) => dir.isBad)) {\n      $('#munching-folder-setup').text(`Please set the image upload directory(s) to something other than the root.`);\n      $('#ddb-importer-folders').css(\"height\", \"auto\");\n      logger.error(\"Error setting Image directory\", {\n        directoryStatus,\n      });\n      throw new Error(`Please set the image upload directory to something other than the root.`);\n    } else if (directoryStatus.some((dir) => !dir.isValid)) {\n      $('#munching-folder-setup').text(`Directory Validation Failed.`);\n      $('#ddb-importer-folders').css(\"height\", \"auto\");\n      logger.error(\"Error validating Image directory\", {\n        directoryStatus,\n      });\n      throw new Error(`Directory Validation Failed.`);\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-vars\nHooks.on(\"renderDDBLocationSetup\", (app, html, user) => {\n  DirectoryPicker.processHtml(html);\n});\n","import DICTIONARY from \"../../dictionary.js\";\nimport { DDBProxySetup } from \"../../apps/DDBProxySetup.js\";\nimport { DirectoryPicker } from \"../../lib/DirectoryPicker.js\";\nimport DDBDynamicUpdateSetup from \"../../apps/DDBDynamicUpdateSetup.js\";\nimport DDBSetup from \"../../apps/DDBSetup.js\";\nimport DDBCompendiumSetup from \"../../apps/DDBCompendiumSetup.js\";\nimport DDBLocationSetup from \"../../apps/DDBLocationSetup.js\";\nimport SETTINGS from \"../../settings.js\";\nimport FileHelper from \"../../lib/FileHelper.js\";\n\nfoundry.utils.setProperty(CONFIG, \"DDBI\", {\n  module: \"DDB Importer\",\n  schemaVersion: 5.0,\n  DICTIONARY: DICTIONARY,\n  ADVENTURE: {},\n  MACROS: {\n    spell: {},\n    gm: {},\n    item: {},\n    feat: {},\n  },\n  KNOWN: {\n    CHECKED_DIRS: new Set(),\n    FILES: new Set(),\n    DIRS: new Set(),\n    LOOKUPS: new Map(),\n    TOKEN_LOOKUPS: new Map(),\n    AVATAR_LOOKUPS: new Map(),\n    FORGE: {\n      TARGET_URL_PREFIX: {},\n      TARGETS: {},\n    },\n  },\n  ICONS: {},\n  TABLES: {},\n  SRD_LOAD: {\n    mapLoaded: false,\n    iconMap: {},\n    packsLoaded: {},\n    packs: {},\n  },\n  DEV: {\n    enabled: false,\n    clippy: {},\n    tableInUse: false,\n  },\n  EFFECT_CONFIG: {\n    MODULES: {\n      installedModules: null,\n      configured: false,\n    },\n  },\n  POPUPS: {\n    json: null,\n    web: null,\n  },\n});\n\nasync function resetSettings() {\n  for (const [name, data] of Object.entries(SETTINGS.GET_DEFAULT_SETTINGS())) {\n    await game.settings.set(SETTINGS.MODULE_ID, name, data.default);\n  }\n  for (const [name, data] of Object.entries(SETTINGS.GET_DEFAULT_SETTINGS(true))) {\n    await game.settings.set(SETTINGS.MODULE_ID, name, data.default);\n  }\n  window.location.reload();\n}\n\nclass ResetSettingsDialog extends FormApplication {\n  constructor(...args) {\n    super(...args);\n    // eslint-disable-next-line no-constructor-return\n    return new Dialog({\n      title: game.i18n.localize(`${SETTINGS.MODULE_ID}.Dialogs.ResetSettings.Title`),\n      content: `<p class=\"${SETTINGS.MODULE_ID}-dialog-important\">${game.i18n.localize(\n        `${SETTINGS.MODULE_ID}.Dialogs.ResetSettings.Content`\n      )}</p>`,\n      buttons: {\n        confirm: {\n          icon: '<i class=\"fas fa-check\"></i>',\n          label: game.i18n.localize(`${SETTINGS.MODULE_ID}.Dialogs.ResetSettings.Confirm`),\n          callback: () => {\n            resetSettings();\n          },\n        },\n        cancel: {\n          icon: '<i class=\"fas fa-times\"></i>',\n          label: game.i18n.localize(`${SETTINGS.MODULE_ID}.Dialogs.ResetSettings.Cancel`),\n        },\n      },\n      default: \"cancel\",\n    });\n  }\n}\n\nasync function createFolderPaths() {\n  if (game.user.isGM) {\n    const characterUploads = game.settings.get(SETTINGS.MODULE_ID, \"image-upload-directory\");\n    DirectoryPicker.verifyPath(DirectoryPicker.parse(characterUploads));\n\n    const otherUploads = game.settings.get(SETTINGS.MODULE_ID, \"other-image-upload-directory\");\n    if (!(await FileHelper.doesDirExist(otherUploads))) {\n      await game.settings.set(SETTINGS.MODULE_ID, \"use-deep-file-paths\", true);\n    }\n    DirectoryPicker.verifyPath(DirectoryPicker.parse(otherUploads));\n\n\n    const frameUploads = game.settings.get(SETTINGS.MODULE_ID, \"frame-image-upload-directory\");\n    DirectoryPicker.verifyPath(DirectoryPicker.parse(frameUploads));\n\n    const adventureUploads = game.settings.get(SETTINGS.MODULE_ID, \"adventure-upload-path\");\n    DirectoryPicker.verifyPath(DirectoryPicker.parse(adventureUploads));\n\n    const iconUploads = game.settings.get(SETTINGS.MODULE_ID, \"adventure-misc-path\");\n    DirectoryPicker.verifyPath(DirectoryPicker.parse(iconUploads));\n  }\n}\n\nexport default async function () {\n\n  game.settings.registerMenu(SETTINGS.MODULE_ID, 'setupMenu', {\n    name: `${SETTINGS.MODULE_ID}.settings.setup.name`,\n    label: `${SETTINGS.MODULE_ID}.settings.setup.name`,\n    hint: `${SETTINGS.MODULE_ID}.settings.setup.hint`,\n    icon: 'fas fa-wrench',\n    type: DDBSetup,\n    restricted: true\n  });\n\n  game.settings.registerMenu(SETTINGS.MODULE_ID, 'compendiumMenu', {\n    name: `${SETTINGS.MODULE_ID}.settings.compendium-setup.name`,\n    label: `${SETTINGS.MODULE_ID}.settings.compendium-setup.name`,\n    hint: `${SETTINGS.MODULE_ID}.settings.compendium-setup.hint`,\n    icon: 'fas fa-wrench',\n    type: DDBCompendiumSetup,\n    restricted: true\n  });\n\n  game.settings.registerMenu(SETTINGS.MODULE_ID, 'folderMenu', {\n    name: `${SETTINGS.MODULE_ID}.settings.folder-setup.name`,\n    label: `${SETTINGS.MODULE_ID}.settings.folder-setup.name`,\n    hint: `${SETTINGS.MODULE_ID}.settings.folder-setup.hint`,\n    icon: 'fas fa-wrench',\n    type: DDBLocationSetup,\n    restricted: true\n  });\n\n  game.settings.registerMenu(SETTINGS.MODULE_ID, 'dynamicUpdateMenu', {\n    name: `${SETTINGS.MODULE_ID}.settings.dynamic-update-setup.name`,\n    label: `${SETTINGS.MODULE_ID}.settings.dynamic-update-setup.name`,\n    hint: `${SETTINGS.MODULE_ID}.settings.dynamic-update-setup.hint`,\n    icon: 'fas fa-wrench',\n    type: DDBDynamicUpdateSetup,\n    restricted: true,\n  });\n\n  for (const [name, data] of Object.entries(SETTINGS.GET_DEFAULT_SETTINGS())) {\n    game.settings.register(SETTINGS.MODULE_ID, name, data);\n  }\n\n  // SETTING TWEAKS AND MIGRATIONS\n  await createFolderPaths();\n\n  if (game.user.isGM && game.settings.get(SETTINGS.MODULE_ID, \"cobalt-cookie-local\")\n    && game.settings.get(SETTINGS.MODULE_ID, \"cobalt-cookie\") != \"\") {\n    game.settings.set(SETTINGS.MODULE_ID, \"cobalt-cookie-local\", false);\n  }\n\n  if (game.settings.get(SETTINGS.MODULE_ID, \"dynamic-sync-user\") === \"\" && game.user.isGM) {\n    game.settings.set(SETTINGS.MODULE_ID, \"dynamic-sync-user\", game.user.id);\n  }\n\n  // reset settings\n  game.settings.registerMenu(SETTINGS.MODULE_ID, \"resetToDefaults\", {\n    name: `${SETTINGS.MODULE_ID}.Dialogs.ResetSettings.Title`,\n    label: `${SETTINGS.MODULE_ID}.Dialogs.ResetSettings.Label`,\n    hint: `${SETTINGS.MODULE_ID}.Dialogs.ResetSettings.Hint`,\n    icon: \"fas fa-refresh\",\n    type: ResetSettingsDialog,\n    restricted: true,\n  });\n\n  // reset settings\n  game.settings.registerMenu(SETTINGS.MODULE_ID, \"ddbProxy\", {\n    name: `${SETTINGS.MODULE_ID}.Dialogs.DDBProxy.Title`,\n    label: `${SETTINGS.MODULE_ID}.Dialogs.DDBProxy.Label`,\n    hint: `${SETTINGS.MODULE_ID}.Dialogs.DDBProxy.Hint`,\n    icon: \"fas fa-ethernet\",\n    type: DDBProxySetup,\n    restricted: true,\n  });\n\n\n  if (game.settings.get(SETTINGS.MODULE_ID, \"developer-mode\")) {\n    CONFIG.DDBI.DEV.enabled = true;\n  }\n\n}\n","import CompendiumHelper from \"../lib/CompendiumHelper.js\";\n\nexport class DDBItemConfig extends FormApplication {\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.title = \"DDB Owned Item Config\";\n    options.template = \"modules/ddb-importer/handlebars/item-config.hbs\";\n    options.classes = [\"ddbimporter\", \"sheet\"];\n    options.width = 500;\n    return options;\n  }\n\n  /** @override */\n  async getData() { // eslint-disable-line class-methods-use-this\n    // console.warn(this);\n    // console.warn(this.object);\n    let item = this.object;\n\n    const icon = item.flags.ddbimporter?.ignoreIcon;\n    const itemImport = item.flags.ddbimporter?.ignoreItemImport;\n    const resource = item.flags.ddbimporter?.retainResourceConsumption;\n    const chris = item.flags.ddbimporter?.ignoreItemForChrisPremades;\n    const ignoreItemUpdate = item.flags.ddbimporter?.ignoreItemUpdate;\n    const overrideId = item.flags.ddbimporter?.overrideId;\n\n    const settings = [\n      {\n        name: \"ignoreItemImport\",\n        isChecked: itemImport,\n        description: \"Ignore this item when importing the character (implies all other settings here).\",\n      },\n      {\n        name: \"ignoreItemUpdate\",\n        isChecked: ignoreItemUpdate,\n        description: \"Ignore this item when when updating the character back to DDB?\",\n      },\n      {\n        name: \"ignoreItemForChrisPremades\",\n        isChecked: chris,\n        description: \"Ignore this item when replacing Active Effects with those from Chris's Premades module.\",\n      },\n      {\n        name: \"ignoreIcon\",\n        isChecked: icon,\n        description: \"Ignore icon updates.\",\n      },\n      {\n        name: \"retainResourceConsumption\",\n        isChecked: resource,\n        description: \"Retain Resource Consumption linking.\",\n      },\n    ];\n\n    const overrides = {\n      \"NONE\": {\n        label: `None`,\n        selected: true\n      }\n    };\n\n    const label = CompendiumHelper.getCompendiumLabel(\"custom\");\n    const compendium = CompendiumHelper.getCompendium(label);\n    const index = await compendium.getIndex();\n\n    index.forEach((item) => {\n      overrides[item._id] = {\n        label: `${item.name} (${item.type})`,\n        selected: false,\n      };\n    });\n\n    const selectedOverrideId = overrideId ?? \"NONE\";\n    if (overrideId && overrides[selectedOverrideId]) {\n      overrides[selectedOverrideId].selected = true;\n    }\n\n    const result = {\n      name: item.name,\n      img: item.img,\n      character: this.object.actor.name,\n      settings,\n      overrides,\n    };\n\n    return result;\n  }\n\n  get id() {\n    const actor = this.object;\n    let id = `ddb-actor-${actor.id}`;\n    return id;\n  }\n\n  /** @override */\n  // eslint-disable-next-line no-unused-vars\n  async _updateObject(event, formData) {\n    event.preventDefault();\n\n    let item = {\n      _id: this.object._id,\n      flags: this.object.flags,\n    };\n\n    if (!item.flags.ddbimporter) item.flags.ddbimporter = {};\n    item.flags.ddbimporter['overrideId'] = formData['override'];\n    item.flags.ddbimporter['ignoreIcon'] = formData['ignoreIcon'];\n    item.flags.ddbimporter['ignoreItemImport'] = formData['ignoreItemImport'];\n    item.flags.ddbimporter['ignoreItemForChrisPremades'] = formData['ignoreItemForChrisPremades'];\n    item.flags.ddbimporter['retainResourceConsumption'] = formData['retainResourceConsumption'];\n    item.flags.ddbimporter['ignoreItemUpdate'] = formData['ignoreItemUpdate'];\n\n    this.object.actor.updateEmbeddedDocuments(\"Item\", [item]);\n\n  }\n}\n","import { DDBItemConfig } from \"../../apps/DDBItemConfig.js\";\nimport { DDBAdventureFlags } from \"../../apps/DDBAdventureFlags.js\";\n\nfunction initItemSheetHook(app, html) {\n  if (!app.document.isOwned) return;\n  // console.error(app.entity);\n  // console.log(data);\n  const title = `DDB Importer Item Config`;\n  const whiteTitle = (game.settings.get(\"ddb-importer\", \"link-title-colour-white\")) ? \" white\" : \"\";\n  let button = $(`<a class=\"open-item-ddb-importer\" title=\"${title}\"><i class=\"fab fa-d-and-d-beyond${whiteTitle}\"></i></a>`);\n  button.click((event) => {\n    if (event.shiftKey && (event.ctrlKey || event.metaKey)) {\n      new DDBAdventureFlags(app.document, {}).render(true);\n    } else {\n      new DDBItemConfig(app.document, {}).render(true);\n    }\n  });\n  html.closest('.app').find('.open-item-ddb-importer').remove();\n  let titleElement = html.closest('.app').find('.window-title');\n  button.insertAfter(titleElement);\n}\n\nexport function itemSheets() {\n  Hooks.on('renderItemSheet', initItemSheetHook);\n}\n\n","import utils from \"../../lib/utils.js\";\nimport logger from \"../../logger.js\";\n\nconst MODULE_TITLE = \"DDB Importer\";\nconst MODULE_NAME = \"ddb-importer\";\nconst MODULE_AUTHOR = \"MrPrimate\";\nconst _GITHUB_API_LATEST = `https://api.github.com/repos/${MODULE_AUTHOR}/${MODULE_NAME}/releases/latest`;\nconst _GITHUB_MODULE_JSON_LATEST = `https://raw.githubusercontent.com/${MODULE_AUTHOR}/${MODULE_NAME}/master/module-template.json`;\nconst MINIMUM_5E_VERSION = \"3.0.0\";\nconst PREVIOUS_VERSION = \"3.7.17\";\n\n// eslint-disable-next-line consistent-return\nasync function getLatestModuleVersion() {\n  try {\n    const { tag_name: latestVersion, prerelease } = await $.getJSON(_GITHUB_API_LATEST);\n    return { latestVersion, prerelease };\n  } catch (error) {\n    logger.error(error);\n  }\n}\n\n// eslint-disable-next-line consistent-return\nasync function getCompatibility() {\n  try {\n    const { compatibility, relationships } = await $.getJSON(_GITHUB_MODULE_JSON_LATEST);\n    return { minimumCoreVersion: compatibility.minimum, minimumSystemVersion: relationships.systems[0].compatibility.minimum };\n  } catch (error) {\n    logger.error(error);\n  }\n}\n\nexport default async () => {\n  const moduleInfo = game.modules.get(MODULE_NAME);\n  const installedVersion = moduleInfo.version;\n  foundry.utils.setProperty(CONFIG, \"DDBI.version\", installedVersion);\n  try {\n    if (!game.user.isGM) return;\n    const compatibleMinimumSystem = utils.versionCompare(game.data.system.version, MINIMUM_5E_VERSION) >= 0;\n\n    if (!compatibleMinimumSystem) {\n      ui.notifications.error(`${MODULE_TITLE} requires 5e system v${MINIMUM_5E_VERSION} to run correctly. Please update your 5e version, or roll DDB Importer back to version ${PREVIOUS_VERSION}.`, { permanent: true });\n      return;\n    }\n\n    // check version number only for GMs\n    const coreCheck = game.settings.get(\"ddb-importer\", \"update-check\");\n    if (!coreCheck) return;\n    const { minimumCoreVersion, minimumSystemVersion } = await getCompatibility();\n    const { latestVersion, prerelease: preRelease } = await getLatestModuleVersion();\n\n    const newModuleVersion = utils.versionCompare(latestVersion, installedVersion) === 1;\n    const compatibleSystem = utils.versionCompare(game.version, minimumSystemVersion) >= 0;\n    const compatibleMinimumCore = utils.versionCompare(game.version, minimumCoreVersion) >= 0;\n\n    const needToUpdate = newModuleVersion && compatibleSystem && compatibleMinimumCore;\n\n    logger.debug(\"Module Update data\", {\n      newModuleVersion,\n      compatibleSystem,\n      compatibleMinimumCore,\n      needToUpdate,\n      minimumCoreVersion,\n      minimumSystemVersion\n    });\n\n    if (preRelease) logger.debug(`Prerelease of ${MODULE_TITLE} detected`);\n\n    if (needToUpdate) {\n      let text = $(\n        `<h2>${MODULE_TITLE} Update!</h2><p>A new <b>${MODULE_NAME}</b> version is available. Please update to <b>v${latestVersion}</b> if you are experiencing issues and before reporting a bug.</p>`\n      );\n      game.modules.get(\"ddb-importer\").api?.notification.show(text, null);\n    }\n  } catch (error) {\n    logger.warn(error);\n    game.modules.get(\"ddb-importer\").api?.notification.show(`Could not retrieve latest ${MODULE_NAME} version`);\n  }\n};\n","export const fallbackDDBConfig = {\n  armor: [\n    {\n      id: 3,\n      entityTypeId: 701257905,\n      name: \"Studded Leather\",\n      categoryId: 1,\n    },\n    {\n      id: 6,\n      entityTypeId: 701257905,\n      name: \"Scale Mail\",\n      categoryId: 2,\n    },\n    {\n      id: 8,\n      entityTypeId: 701257905,\n      name: \"Shield\",\n      categoryId: 4,\n    },\n    {\n      id: 9,\n      entityTypeId: 701257905,\n      name: \"Padded\",\n      categoryId: 1,\n    },\n    {\n      id: 10,\n      entityTypeId: 701257905,\n      name: \"Leather\",\n      categoryId: 1,\n    },\n    {\n      id: 11,\n      entityTypeId: 701257905,\n      name: \"Hide\",\n      categoryId: 2,\n    },\n    {\n      id: 12,\n      entityTypeId: 701257905,\n      name: \"Chain Shirt\",\n      categoryId: 2,\n    },\n    {\n      id: 13,\n      entityTypeId: 701257905,\n      name: \"Breastplate\",\n      categoryId: 2,\n    },\n    {\n      id: 14,\n      entityTypeId: 701257905,\n      name: \"Half Plate\",\n      categoryId: 2,\n    },\n    {\n      id: 15,\n      entityTypeId: 701257905,\n      name: \"Ring Mail\",\n      categoryId: 3,\n    },\n    {\n      id: 16,\n      entityTypeId: 701257905,\n      name: \"Chain Mail\",\n      categoryId: 3,\n    },\n    {\n      id: 17,\n      entityTypeId: 701257905,\n      name: \"Splint\",\n      categoryId: 3,\n    },\n    {\n      id: 18,\n      entityTypeId: 701257905,\n      name: \"Plate\",\n      categoryId: 3,\n    },\n    {\n      id: 19,\n      entityTypeId: 701257905,\n      name: \"Spiked Armor\",\n      categoryId: 2,\n    },\n    {\n      id: 20,\n      entityTypeId: 701257905,\n      name: \"Pride Silk Outfit\",\n      categoryId: 1,\n    },\n  ],\n  tools: [\n    {\n      id: 102,\n      name: \"Alchemist's Supplies\",\n    },\n    {\n      id: 103,\n      name: \"Brewer's Supplies\",\n    },\n    {\n      id: 104,\n      name: \"Calligrapher's Supplies\",\n    },\n    {\n      id: 105,\n      name: \"Carpenter's Tools\",\n    },\n    {\n      id: 106,\n      name: \"Cartographer's Tools\",\n    },\n    {\n      id: 107,\n      name: \"Cobbler's Tools\",\n    },\n    {\n      id: 108,\n      name: \"Cook's Utensils\",\n    },\n    {\n      id: 109,\n      name: \"Glassblower's Tools\",\n    },\n    {\n      id: 110,\n      name: \"Jeweler's Tools\",\n    },\n    {\n      id: 111,\n      name: \"Leatherworker's Tools\",\n    },\n    {\n      id: 112,\n      name: \"Mason's Tools\",\n    },\n    {\n      id: 113,\n      name: \"Painter's Supplies\",\n    },\n    {\n      id: 114,\n      name: \"Potter's Tools\",\n    },\n    {\n      id: 115,\n      name: \"Smith's Tools\",\n    },\n    {\n      id: 116,\n      name: \"Tinker's Tools\",\n    },\n    {\n      id: 117,\n      name: \"Weaver's Tools\",\n    },\n    {\n      id: 118,\n      name: \"Woodcarver's Tools\",\n    },\n    {\n      id: 119,\n      name: \"Disguise Kit\",\n    },\n    {\n      id: 120,\n      name: \"Forgery Kit\",\n    },\n    {\n      id: 121,\n      name: \"Dice Set\",\n    },\n    {\n      id: 122,\n      name: \"Playing Card Set\",\n    },\n    {\n      id: 123,\n      name: \"Herbalism Kit\",\n    },\n    {\n      id: 124,\n      name: \"Navigator's Tools\",\n    },\n    {\n      id: 125,\n      name: \"Poisoner's Kit\",\n    },\n    {\n      id: 126,\n      name: \"Thieves' Tools\",\n    },\n    {\n      id: 127,\n      name: \"Bagpipes\",\n    },\n    {\n      id: 128,\n      name: \"Drum\",\n    },\n    {\n      id: 129,\n      name: \"Dulcimer\",\n    },\n    {\n      id: 130,\n      name: \"Flute\",\n    },\n    {\n      id: 131,\n      name: \"Lute\",\n    },\n    {\n      id: 132,\n      name: \"Horn\",\n    },\n    {\n      id: 133,\n      name: \"Pan Flute\",\n    },\n    {\n      id: 134,\n      name: \"Shawm\",\n    },\n    {\n      id: 135,\n      name: \"Lyre\",\n    },\n    {\n      id: 136,\n      name: \"Viol\",\n    },\n    {\n      id: 189,\n      name: \"Three-Dragon Ante Set\",\n    },\n    {\n      id: 190,\n      name: \"Dragonchess Set\",\n    },\n    {\n      id: 232,\n      name: \"Birdpipes\",\n    },\n    {\n      id: 233,\n      name: \"Glaur\",\n    },\n    {\n      id: 234,\n      name: \"Hand Drum\",\n    },\n    {\n      id: 235,\n      name: \"Longhorn\",\n    },\n    {\n      id: 236,\n      name: \"Songhorn\",\n    },\n    {\n      id: 237,\n      name: \"Tantan\",\n    },\n    {\n      id: 238,\n      name: \"Thelarr\",\n    },\n    {\n      id: 239,\n      name: \"Tocken\",\n    },\n    {\n      id: 240,\n      name: \"Wargong\",\n    },\n    {\n      id: 241,\n      name: \"Yarting\",\n    },\n    {\n      id: 242,\n      name: \"Zulkoon\",\n    },\n    {\n      id: 301,\n      name: \"Whistle-Stick\",\n    },\n  ],\n  weapons: [\n    {\n      id: 1,\n      entityTypeId: 1782728300,\n      name: \"Crossbow, Hand\",\n      categoryId: 2,\n    },\n    {\n      id: 2,\n      entityTypeId: 1782728300,\n      name: \"Glaive\",\n      categoryId: 2,\n    },\n    {\n      id: 3,\n      entityTypeId: 1782728300,\n      name: \"Dagger\",\n      categoryId: 1,\n    },\n    {\n      id: 4,\n      entityTypeId: 1782728300,\n      name: \"Longsword\",\n      categoryId: 2,\n    },\n    {\n      id: 5,\n      entityTypeId: 1782728300,\n      name: \"Club\",\n      categoryId: 1,\n    },\n    {\n      id: 6,\n      entityTypeId: 1782728300,\n      name: \"Greatclub\",\n      categoryId: 1,\n    },\n    {\n      id: 7,\n      entityTypeId: 1782728300,\n      name: \"Handaxe\",\n      categoryId: 1,\n    },\n    {\n      id: 8,\n      entityTypeId: 1782728300,\n      name: \"Javelin\",\n      categoryId: 1,\n    },\n    {\n      id: 10,\n      entityTypeId: 1782728300,\n      name: \"Light Hammer\",\n      categoryId: 1,\n    },\n    {\n      id: 11,\n      entityTypeId: 1782728300,\n      name: \"Mace\",\n      categoryId: 1,\n    },\n    {\n      id: 12,\n      entityTypeId: 1782728300,\n      name: \"Quarterstaff\",\n      categoryId: 1,\n    },\n    {\n      id: 13,\n      entityTypeId: 1782728300,\n      name: \"Sickle\",\n      categoryId: 1,\n    },\n    {\n      id: 14,\n      entityTypeId: 1782728300,\n      name: \"Spear\",\n      categoryId: 1,\n    },\n    {\n      id: 15,\n      entityTypeId: 1782728300,\n      name: \"Crossbow, Light\",\n      categoryId: 1,\n    },\n    {\n      id: 16,\n      entityTypeId: 1782728300,\n      name: \"Dart\",\n      categoryId: 1,\n    },\n    {\n      id: 17,\n      entityTypeId: 1782728300,\n      name: \"Shortbow\",\n      categoryId: 1,\n    },\n    {\n      id: 18,\n      entityTypeId: 1782728300,\n      name: \"Sling\",\n      categoryId: 1,\n    },\n    {\n      id: 19,\n      entityTypeId: 1782728300,\n      name: \"Battleaxe\",\n      categoryId: 2,\n    },\n    {\n      id: 20,\n      entityTypeId: 1782728300,\n      name: \"Flail\",\n      categoryId: 2,\n    },\n    {\n      id: 21,\n      entityTypeId: 1782728300,\n      name: \"Greataxe\",\n      categoryId: 2,\n    },\n    {\n      id: 22,\n      entityTypeId: 1782728300,\n      name: \"Greatsword\",\n      categoryId: 2,\n    },\n    {\n      id: 23,\n      entityTypeId: 1782728300,\n      name: \"Halberd\",\n      categoryId: 2,\n    },\n    {\n      id: 24,\n      entityTypeId: 1782728300,\n      name: \"Lance\",\n      categoryId: 2,\n    },\n    {\n      id: 25,\n      entityTypeId: 1782728300,\n      name: \"Maul\",\n      categoryId: 2,\n    },\n    {\n      id: 26,\n      entityTypeId: 1782728300,\n      name: \"Morningstar\",\n      categoryId: 2,\n    },\n    {\n      id: 27,\n      entityTypeId: 1782728300,\n      name: \"Pike\",\n      categoryId: 2,\n    },\n    {\n      id: 28,\n      entityTypeId: 1782728300,\n      name: \"Rapier\",\n      categoryId: 2,\n    },\n    {\n      id: 29,\n      entityTypeId: 1782728300,\n      name: \"Scimitar\",\n      categoryId: 2,\n    },\n    {\n      id: 30,\n      entityTypeId: 1782728300,\n      name: \"Shortsword\",\n      categoryId: 2,\n    },\n    {\n      id: 31,\n      entityTypeId: 1782728300,\n      name: \"Trident\",\n      categoryId: 2,\n    },\n    {\n      id: 32,\n      entityTypeId: 1782728300,\n      name: \"War Pick\",\n      categoryId: 2,\n    },\n    {\n      id: 33,\n      entityTypeId: 1782728300,\n      name: \"Warhammer\",\n      categoryId: 2,\n    },\n    {\n      id: 34,\n      entityTypeId: 1782728300,\n      name: \"Whip\",\n      categoryId: 2,\n    },\n    {\n      id: 35,\n      entityTypeId: 1782728300,\n      name: \"Blowgun\",\n      categoryId: 2,\n    },\n    {\n      id: 36,\n      entityTypeId: 1782728300,\n      name: \"Crossbow, Heavy\",\n      categoryId: 2,\n    },\n    {\n      id: 37,\n      entityTypeId: 1782728300,\n      name: \"Longbow\",\n      categoryId: 2,\n    },\n    {\n      id: 38,\n      entityTypeId: 1782728300,\n      name: \"Net\",\n      categoryId: 2,\n    },\n    {\n      id: 40,\n      entityTypeId: 1782728300,\n      name: \"Boomerang\",\n      categoryId: 1,\n    },\n    {\n      id: 41,\n      entityTypeId: 1782728300,\n      name: \"Yklwa\",\n      categoryId: 1,\n    },\n    {\n      id: 42,\n      entityTypeId: 1782728300,\n      name: \"Pistol\",\n      categoryId: 3,\n    },\n    {\n      id: 43,\n      entityTypeId: 1782728300,\n      name: \"Musket\",\n      categoryId: 3,\n    },\n    {\n      id: 44,\n      entityTypeId: 1782728300,\n      name: \"Pistol, Automatic\",\n      categoryId: 3,\n    },\n    {\n      id: 45,\n      entityTypeId: 1782728300,\n      name: \"Revolver\",\n      categoryId: 3,\n    },\n    {\n      id: 46,\n      entityTypeId: 1782728300,\n      name: \"Rifle, Hunting\",\n      categoryId: 3,\n    },\n    {\n      id: 47,\n      entityTypeId: 1782728300,\n      name: \"Rifle, Automatic\",\n      categoryId: 3,\n    },\n    {\n      id: 48,\n      entityTypeId: 1782728300,\n      name: \"Shotgun\",\n      categoryId: 3,\n    },\n    {\n      id: 49,\n      entityTypeId: 1782728300,\n      name: \"Laser Pistol\",\n      categoryId: 3,\n    },\n    {\n      id: 50,\n      entityTypeId: 1782728300,\n      name: \"Antimatter Rifle\",\n      categoryId: 3,\n    },\n    {\n      id: 51,\n      entityTypeId: 1782728300,\n      name: \"Laser Rifle\",\n      categoryId: 3,\n    },\n    {\n      id: 52,\n      entityTypeId: 1782728300,\n      name: \"Palm Pistol (Exandria)\",\n      categoryId: 3,\n    },\n    {\n      id: 53,\n      entityTypeId: 1782728300,\n      name: \"Pepperbox (Exandria)\",\n      categoryId: 3,\n    },\n    {\n      id: 54,\n      entityTypeId: 1782728300,\n      name: \"Pistol (Exandria)\",\n      categoryId: 3,\n    },\n    {\n      id: 55,\n      entityTypeId: 1782728300,\n      name: \"Blunderbuss (Exandria)\",\n      categoryId: 3,\n    },\n    {\n      id: 56,\n      entityTypeId: 1782728300,\n      name: \"Bad News (Exandria)\",\n      categoryId: 3,\n    },\n    {\n      id: 57,\n      entityTypeId: 1782728300,\n      name: \"Hand Mortar (Exandria)\",\n      categoryId: 3,\n    },\n    {\n      id: 58,\n      entityTypeId: 1782728300,\n      name: \"Musket (Exandria)\",\n      categoryId: 3,\n    },\n    {\n      id: 59,\n      entityTypeId: 1782728300,\n      name: \"Double-Bladed Scimitar\",\n      categoryId: 2,\n    },\n  ],\n  languages: [\n    { id: 1, name: \"Common\" },\n    { id: 2, name: \"Dwarvish\" },\n    { id: 3, name: \"Elvish\" },\n    { id: 4, name: \"Giant\" },\n    { id: 5, name: \"Gnomish\" },\n    { id: 6, name: \"Goblin\" },\n    { id: 7, name: \"Halfling\" },\n    { id: 8, name: \"Orc\" },\n    { id: 9, name: \"Abyssal\" },\n    { id: 10, name: \"Celestial\" },\n    { id: 11, name: \"Draconic\" },\n    { id: 12, name: \"Deep Speech\" },\n    { id: 13, name: \"Infernal\" },\n    { id: 14, name: \"Primordial\" },\n    { id: 15, name: \"Sylvan\" },\n    { id: 16, name: \"Undercommon\" },\n    { id: 18, name: \"Telepathy\" },\n    { id: 19, name: \"Aquan\" },\n    { id: 20, name: \"Auran\" },\n    { id: 21, name: \"Ignan\" },\n    { id: 22, name: \"Terran\" },\n    { id: 23, name: \"Druidic\" },\n    { id: 24, name: \"Giant Eagle\" },\n    { id: 25, name: \"Giant Elk\" },\n    { id: 26, name: \"Giant Owl\" },\n    { id: 27, name: \"Gnoll\" },\n    { id: 28, name: \"Otyugh\" },\n    { id: 29, name: \"Sahuagin\" },\n    { id: 30, name: \"Sphinx\" },\n    { id: 31, name: \"Winter Wolf\" },\n    { id: 32, name: \"Worg\" },\n    { id: 33, name: \"Blink Dog\" },\n    { id: 34, name: \"Yeti\" },\n    { id: 35, name: \"All\" },\n    { id: 36, name: \"Aarakocra\" },\n    { id: 37, name: \"Slaad\" },\n    { id: 38, name: \"Bullywug\" },\n    { id: 39, name: \"Gith\" },\n    { id: 40, name: \"Grell\" },\n    { id: 41, name: \"Hook Horror\" },\n    { id: 42, name: \"Modron\" },\n    { id: 43, name: \"Thri-kreen\" },\n    { id: 44, name: \"Troglodyte\" },\n    { id: 45, name: \"Umber Hulk\" },\n    { id: 46, name: \"Thieves' Cant\" },\n    { id: 47, name: \"Grung\" },\n    { id: 48, name: \"Tlincalli\" },\n    { id: 49, name: \"Vegepygmy\" },\n    { id: 50, name: \"Yikaria\" },\n    { id: 51, name: \"Bothii\" },\n    { id: 52, name: \"Ixitxachitl\" },\n    { id: 53, name: \"Thayan\" },\n    { id: 54, name: \"Netherese\" },\n    { id: 55, name: \"Ice Toad\" },\n    { id: 56, name: \"Olman\" },\n    { id: 57, name: \"Quori\" },\n    { id: 58, name: \"Minotaur\" },\n    { id: 59, name: \"Loxodon\" },\n    { id: 60, name: \"Kraul\" },\n    { id: 61, name: \"Vedalken\" },\n    { id: 62, name: \"Daelkyr\" },\n    { id: 64, name: \"Riedran\" },\n    { id: 66, name: \"Zemnian\" },\n    { id: 67, name: \"Marquesian\" },\n    { id: 68, name: \"Naush\" },\n    { id: 69, name: \"Leonin\" },\n    { id: 70, name: \"Grippli\" },\n    { id: 71, name: \"Skitterwidget\" },\n    { id: 72, name: \"Ziklight\" },\n    { id: 73, name: \"Kruthik\" },\n    { id: 74, name: \"Citlanés\" },\n    { id: 75, name: \"Djaynaian\" },\n    { id: 76, name: \"Godstongue\" },\n    { id: 77, name: \"Halri\" },\n    { id: 78, name: \"Maynah\" },\n    { id: 79, name: \"N’warian\" },\n    { id: 80, name: \"Quirapu\" },\n    { id: 81, name: \"Sensan\" },\n    { id: 82, name: \"Shankhi\" },\n    { id: 83, name: \"Tletlahtolli\" },\n    { id: 84, name: \"Xingyu\" },\n    { id: 85, name: \"Zabaani\" },\n    { id: 86, name: \"Dohwar\" },\n    { id: 87, name: \"Hadozee\" },\n    { id: 88, name: \"Aartuk\" },\n    { id: 89, name: \"Abanasinian\" },\n    { id: 90, name: \"Ergot\" },\n    { id: 91, name: \"Istarian\" },\n    { id: 92, name: \"Kenderspeak\" },\n    { id: 93, name: \"Kharolian\" },\n    { id: 94, name: \"Khur\" },\n    { id: 95, name: \"Kothian\" },\n    { id: 96, name: \"Nerakese\" },\n    { id: 97, name: \"Nordmaarian\" },\n    { id: 98, name: \"Ogre\" },\n    { id: 99, name: \"Solamnic\" },\n    { id: 100, name: \"Thieves’ Cant\" },\n    { id: 101, name: \"Demodand\" },\n    { id: 102, name: \"Birdfolk\" },\n    { id: 103, name: \"Cervan\" },\n    { id: 104, name: \"Feather Speech\" },\n    { id: 105, name: \"Hedge\" },\n    { id: 106, name: \"Jerbeen\" },\n    { id: 107, name: \"Mapach\" },\n    { id: 108, name: \"Vulpin\" },\n    {\n      id: 109,\n      name: \"Darakhul\",\n    },\n    {\n      id: 110,\n      name: \"Derro\",\n    },\n    {\n      id: 111,\n      name: \"Eonic\",\n    },\n    {\n      id: 112,\n      name: \"Erina\",\n    },\n    {\n      id: 113,\n      name: \"Lemurfolk\",\n    },\n    {\n      id: 114,\n      name: \" Loxodan\",\n    },\n    {\n      id: 115,\n      name: \"Millitaur\",\n    },\n    {\n      id: 116,\n      name: \"Ravenfolk\",\n    },\n    {\n      id: 117,\n      name: \"Tosculi\",\n    },\n    {\n      id: 118,\n      name: \"Trollkin\",\n    },\n    {\n      id: 119,\n      name: \"Umbral\",\n    },\n    {\n      id: 120,\n      name: \"Void Speech\",\n    },\n    {\n      id: 121,\n      name: \"Angulotl\",\n    },\n    {\n      id: 122,\n      name: \"Kuran’zoi\",\n    },\n    {\n      id: 123,\n      name: \"Gibberling\",\n    },\n    {\n      id: 124,\n      name: \"Huginn's Speech\",\n    },\n    {\n      id: 125,\n      name: \"Northern Tongue\",\n    },\n  ],\n  restoreTypes: [\n    { id: 1, name: \"Full\", description: \"Restore life with full HP\" },\n    { id: 2, name: \"OneHP\", description: \"Restore life with 1 HP\" },\n  ],\n  raceGroups: [\n    { id: 1, name: \"Human\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/819/636620994416798583.jpeg\" },\n    { id: 2, name: \"Half-Orc\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/817/636620994330373054.jpeg\" },\n    { id: 3, name: \"Elf\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/807/636620993866733375.jpeg\" },\n    { id: 4, name: \"Aarakocra\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/802/636620993394513358.jpeg\" },\n    { id: 5, name: \"Tiefling\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/825/636620994695575306.jpeg\" },\n    { id: 6, name: \"Dwarf\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/806/636620993762055484.jpeg\" },\n    { id: 7, name: \"Halfling\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/816/636620994265008086.jpeg\" },\n    { id: 8, name: \"Dragonborn\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/805/636620993696690483.jpeg\" },\n    { id: 9, name: \"Gnome\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/811/636620994035528201.jpeg\" },\n    { id: 10, name: \"Half-Elf\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/814/636620994184198696.jpeg\" },\n    { id: 11, name: \"Goliath\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/813/636620994135369890.jpeg\" },\n    { id: 12, name: \"Genasi\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/809/636620993978899042.jpeg\" },\n    { id: 13, name: \"Aasimar\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/803/636620993510579220.jpeg\" },\n    { id: 14, name: \"Firbolg\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/808/636620993924142291.jpeg\" },\n    { id: 15, name: \"Kenku\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/820/636620994458763373.jpeg\" },\n    { id: 16, name: \"Lizardfolk\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/822/636620994561880989.jpeg\" },\n    { id: 17, name: \"Tabaxi\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/824/636620994652518517.jpeg\" },\n    { id: 18, name: \"Triton\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/827/636620994792452860.jpeg\" },\n    { id: 19, name: \"Bugbear\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/804/636620993577660502.jpeg\" },\n    { id: 20, name: \"Goblin\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/812/636620994081080899.jpeg\" },\n    { id: 21, name: \"Hobgoblin\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/818/636620994370309752.jpeg\" },\n    { id: 22, name: \"Kobold\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/821/636620994500727959.jpeg\" },\n    { id: 23, name: \"Orc\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/823/636620994608993950.jpeg\" },\n    {\n      id: 24,\n      name: \"Yuan-ti Pureblood\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/316/828/636620994846117422.jpeg\",\n    },\n    { id: 25, name: \"Tortle\", avatarUrl: \"https://www.dndbeyond.com/avatars/316/826/636620994747056231.jpeg\" },\n    { id: 27, name: \"Gith\", avatarUrl: \"https://www.dndbeyond.com/avatars/318/759/636621911421792248.jpeg\" },\n    { id: 28, name: \"Warforged\", avatarUrl: \"https://www.dndbeyond.com/avatars/2490/554/636680421772857650.jpeg\" },\n    { id: 29, name: \"Shifter\", avatarUrl: \"https://www.dndbeyond.com/avatars/2490/562/636680421866916694.jpeg\" },\n    { id: 30, name: \"Draconic Races\", avatarUrl: null },\n    { id: 31, name: \"Lineages\", avatarUrl: null },\n  ],\n  spellRangeTypes: [\n    { id: 1, name: \"Self\" },\n    { id: 2, name: \"Touch\" },\n    { id: 3, name: \"Ranged\" },\n    { id: 4, name: \"Sight\" },\n    { id: 9, name: \"Unlimited\" },\n  ],\n  adjustmentDataTypes: [\n    { id: 1, name: \"Integer\" },\n    { id: 2, name: \"Decimal\" },\n    { id: 3, name: \"String\" },\n    { id: 4, name: \"Boolean\" },\n  ],\n  coverTypes: [\n    { type: \"half\", name: \"Half\" },\n    { type: \"three-quarters\", name: \"Three-Quarters\" },\n    { type: \"full\", name: \"Full\" },\n  ],\n  spellConditionTypes: [\n    { id: 1, name: \"Apply\" },\n    { id: 2, name: \"Remove\" },\n    { id: 3, name: \"Suppress\" },\n  ],\n  rangeTypes: [\n    { id: 1, name: \"Melee\" },\n    { id: 2, name: \"Ranged\" },\n  ],\n  damageTypes: [\n    { id: 1, name: \"Bludgeoning\" },\n    { id: 2, name: \"Piercing\" },\n    { id: 3, name: \"Slashing\" },\n    { id: 4, name: \"Necrotic\" },\n    { id: 5, name: \"Acid\" },\n    { id: 6, name: \"Cold\" },\n    { id: 7, name: \"Fire\" },\n    { id: 8, name: \"Lightning\" },\n    { id: 9, name: \"Thunder\" },\n    { id: 10, name: \"Poison\" },\n    { id: 11, name: \"Psychic\" },\n    { id: 12, name: \"Radiant\" },\n    { id: 13, name: \"Force\" },\n  ],\n  privacyTypes: [\n    { id: 1, name: \"Private\" },\n    { id: 2, name: \"CampaignOnly\" },\n    { id: 3, name: \"Public\" },\n  ],\n  sharingTypes: [\n    { id: 1, name: \"Full\" },\n    { id: 2, name: \"Limited\" },\n    { id: 3, name: \"StatBlock\" },\n  ],\n  abilityScoreDisplayTypes: [\n    { id: 1, name: \"ScoresTop\" },\n    { id: 2, name: \"ModifiersTop\" },\n  ],\n  stealthCheckTypes: [\n    { id: 1, name: \"None\" },\n    { id: 2, name: \"Disadvantage\" },\n  ],\n  conditionTypes: [\n    { id: 1, name: \"Standard\" },\n    { id: 2, name: \"Special\" },\n  ],\n  operators: [\n    { id: 1, name: \"Addition\" },\n    { id: 2, name: \"Multiplication\" },\n  ],\n  monsterSubTypes: [\n    { id: 1, name: \"aarakocra\" },\n    { id: 2, name: \"gnome\" },\n    { id: 3, name: \"gnoll\" },\n    { id: 4, name: \"grimlock\" },\n    { id: 5, name: \"any race\" },\n    { id: 6, name: \"elf\" },\n    { id: 7, name: \"tortle\" },\n    { id: 8, name: \"yugoloth\" },\n    { id: 9, name: \"demon\" },\n    { id: 10, name: \"devil\" },\n    { id: 11, name: \"shapechanger\" },\n    { id: 12, name: \"nagpa\" },\n    { id: 13, name: \"meazel\" },\n    { id: 14, name: \"inevitable\" },\n    { id: 15, name: \"gith\" },\n    { id: 16, name: \"dwarf\" },\n    { id: 17, name: \"derro\" },\n    { id: 18, name: \"kuo-toa\" },\n    { id: 19, name: \"titan\" },\n    { id: 20, name: \"yuan-ti\" },\n    { id: 21, name: \"xvart\" },\n    { id: 22, name: \"orc\" },\n    { id: 23, name: \"goblinoid\" },\n    { id: 24, name: \"kobold\" },\n    { id: 25, name: \"grung\" },\n    { id: 26, name: \"kenku\" },\n    { id: 27, name: \"firenewt\" },\n    { id: 28, name: \"troglodyte\" },\n    { id: 29, name: \"thri-kreen\" },\n    { id: 30, name: \"sahuagin\" },\n    { id: 31, name: \"quaggoth\" },\n    { id: 32, name: \"merfolk\" },\n    { id: 33, name: \"human\" },\n    { id: 34, name: \"lizardfolk\" },\n    { id: 35, name: \"cloud giant\" },\n    { id: 36, name: \"fire giant\" },\n    { id: 37, name: \"frost giant\" },\n    { id: 38, name: \"hill giant\" },\n    { id: 39, name: \"stone giant\" },\n    { id: 40, name: \"storm giant\" },\n    { id: 41, name: \"bullywug\" },\n    { id: 42, name: \"saurial\" },\n    { id: 43, name: \"tabaxi\" },\n    { id: 44, name: \"half-elf\" },\n    { id: 45, name: \"half-dragon\" },\n    { id: 46, name: \"simic hybrid\" },\n    { id: 47, name: \"angel\" },\n    { id: 48, name: \"kraul\" },\n    { id: 49, name: \"tiefling\" },\n    { id: 50, name: \"half-orc\" },\n    { id: 51, name: \"halfling\" },\n    { id: 52, name: \"locathah\" },\n    { id: 53, name: \"triton\" },\n    { id: 54, name: \"dragonborn\" },\n    { id: 55, name: \"warforged\" },\n    { id: 56, name: \"water genasi\" },\n    { id: 57, name: \"fire genasi\" },\n    { id: 58, name: \"earth genasi\" },\n    { id: 59, name: \"air genasi\" },\n    { id: 60, name: \"changeling\" },\n    { id: 61, name: \"kalashtar\" },\n    { id: 62, name: \"shifter\" },\n    { id: 63, name: \"blindheim\" },\n    { id: 64, name: \"dire corby\" },\n    { id: 65, name: \"jermlaine\" },\n    { id: 66, name: \"goliath\" },\n    { id: 67, name: \"Giff\" },\n    { id: 68, name: \"Skulk\" },\n    { id: 69, name: \"Leonin\" },\n    { id: 70, name: \"grippli\" },\n    { id: 71, name: \"mongrelfolk\" },\n    { id: 72, name: \"Harengon\" },\n    { id: 73, name: \"Hag\" },\n    { id: 74, name: \"Wizard\" },\n    { id: 75, name: \"Sorcerer\" },\n    { id: 76, name: \"Warlock\" },\n    { id: 77, name: \"Cleric\" },\n    { id: 78, name: \"Shadar-Kai\" },\n    { id: 79, name: \"Paladin\" },\n    { id: 80, name: \"Gem\" },\n    { id: 81, name: \"Metallic\" },\n    { id: 82, name: \"Chromatic\" },\n    { id: 83, name: \"High-Elf\" },\n    { id: 84, name: \"half-black dragon\" },\n    { id: 85, name: \"Druid\" },\n    { id: 89, name: \"Bard\" },\n    { id: 90, name: \"shield dwarf\" },\n    { id: 91, name: \"Ranger\" },\n    { id: 92, name: \"Goblin\" },\n    { id: 93, name: \"Drow\" },\n    { id: 94, name: \"Ogre\" },\n    { id: 95, name: \"Monk\" },\n    {\n      id: 96,\n      name: \"Mind Flayer\",\n    },\n    {\n      id: 97,\n      name: \"Cattle\",\n    },\n    {\n      id: 98,\n      name: \"Dinosaur\",\n    },\n    {\n      id: 99,\n      name: \"Beholder\",\n    },\n    {\n      id: 100,\n      name: \"Myconid\",\n    },\n    {\n      id: 101,\n      name: \"Kender\",\n    },\n    {\n      id: 102,\n      name: \"Adult Chromatic\",\n    },\n    {\n      id: 103,\n      name: \"Unicorn\",\n    },\n    {\n      id: 104,\n      name: \"half-blue dragon\",\n    },\n    {\n      id: 105,\n      name: \"Archfey\",\n    },\n    {\n      id: 106,\n      name: \"any\",\n    },\n    {\n      id: 107,\n      name: \"half-giant\",\n    },\n    {\n      id: 108,\n      name: \"brown bear\",\n    },\n    {\n      id: 109,\n      name: \"Young Gem\",\n    },\n    {\n      id: 110,\n      name: \"Minotaur\",\n    },\n    {\n      id: 111,\n      name: \"Medusa\",\n    },\n    {\n      id: 112,\n      name: \"Moonstone\",\n    },\n  ],\n  creatureGroupFlags: [\n    { id: 1, name: \"Armor Add Proficiency Bonus\", key: \"ACPB\", value: null, valueContextId: null },\n    { id: 2, name: \"Attack Rolls Add Proficiency Bonus\", key: \"ARPB\", value: null, valueContextId: null },\n    { id: 3, name: \"Damage Rolls Add Proficiency Bonus\", key: \"DRPB\", value: null, valueContextId: null },\n    { id: 4, name: \"Proficient Skills Add Proficiency Bonus\", key: \"PSPB\", value: null, valueContextId: null },\n    { id: 5, name: \"Proficient Saving Throws Add Proficiency Bonus\", key: \"STPB\", value: null, valueContextId: null },\n    { id: 6, name: \"Max Hit Points Level Multiplier Option\", key: \"HPLM\", value: 4, valueContextId: 5 },\n    { id: 7, name: \"Evaluate Owner Skill Proficiencies\", key: \"EOSKP\", value: null, valueContextId: null },\n    { id: 8, name: \"Evaluate Owner Save Proficiencies\", key: \"EOSVP\", value: null, valueContextId: null },\n    { id: 9, name: \"Cannot Be Swarm\", key: \"CBS\", value: null, valueContextId: null },\n    { id: 10, name: \"Cannot Use Legendary Actions\", key: \"CULGA\", value: null, valueContextId: null },\n    { id: 11, name: \"Cannot Use Lair Actions\", key: \"CULRA\", value: null, valueContextId: null },\n    { id: 12, name: \"Evaluate_Updated_Passive_Perception\", key: \"EUPP\", value: null, valueContextId: null },\n    { id: 13, name: \"Evaluate Owner Passive Perception\", key: \"EOPP\", value: null, valueContextId: null },\n    { id: 14, name: \"Artificer HP Multiplier\", key: \"AHM\", value: 5, valueContextId: 252717 },\n    { id: 15, name: \"Max Hit Points Add Int Modifier\", key: \"MHPAIM\", value: null, valueContextId: 4 },\n    { id: 16, name: \"Max Hit Points Add Monster CON Modifier\", key: \"MHPAMCM\", value: null, valueContextId: 3 },\n    { id: 17, name: \"Use Challenge Rating As Level\", key: \"UCRAL\", value: null, valueContextId: null },\n    { id: 18, name: \"Max Hit Points Base Artificer Level\", key: \"MHPBAL\", value: null, valueContextId: 252717 },\n  ],\n  monsterTypes: [\n    {\n      pluralizedName: \"aberrations\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/665/636747837392078487.jpeg\",\n      id: 1,\n      name: \"Aberration\",\n      description:\n        \"Aberrations are utterly alien beings. Many of them have innate magical abilities drawn from the creature's alien mind rather than the mystical forces of the world. The quintessential aberrations are aboleths, and slaadi. \",\n    },\n    {\n      pluralizedName: \"beasts\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/664/636747837303835953.jpeg\",\n      id: 2,\n      name: \"Beast\",\n      description:\n        \"Beasts are nonhumanoid creatures that are a natural part of the fantasy ecology. Some of them have magical powers, but most are unintelligent and lack any society or language. Beasts include all varieties of ordinary animals, dinosaurs, and giant versions of animals. \",\n    },\n    {\n      pluralizedName: \"celestials\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/666/636747837434463638.jpeg\",\n      id: 3,\n      name: \"Celestial\",\n      description:\n        \"Celestials are creatures native to the Upper Planes. Many of them are the servants of deities, employed as messengers or agents in the mortal realm and throughout the planes. Celestials are good by nature, so the exceptional celestial who strays from a good alignment is a horrifying rarity. \",\n    },\n    {\n      pluralizedName: \"constructs\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/667/636747837482013331.jpeg\",\n      id: 4,\n      name: \"Construct\",\n      description:\n        \"Constructs include angels, couatls, and pegasi. Constructs are made, not born. Some are programmed by their creators to follow a simple set of instructions, while others are imbued with sentience and capable of independent thought. Golems are the iconic constructs. Many creatures native to the outer plane of Mechanus, such as modrons, are constructs shaped from the raw material of the plane by the will of more powerful creatures. \",\n    },\n    {\n      pluralizedName: \"dragons\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/668/636747837521115242.jpeg\",\n      id: 6,\n      name: \"Dragon\",\n      description:\n        \"Dragons are large reptilian creatures of ancient origin and tremendous power. True dragons, including the good metallic dragons and the evil chromatic dragons, are highly intelligent and have innate magic. Also in this category are creatures distantly related to true dragons, but less powerful, less intelligent, and less magical, such as wyverns and pseudodragons. \",\n    },\n    {\n      pluralizedName: \"elementals\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/669/636747837569942785.jpeg\",\n      id: 7,\n      name: \"Elemental\",\n      description:\n        \"Elementals are creatures native to the elemental planes. Some creatures of this type are little more than animate masses of their respective elements, including the creatures simply called elementals. Others have biological forms infused with elemental energy. The races of genies, including djinn and efreet, form the most important civilizations on the elemental planes. Other elemental creatures include azers, invisible stalkers, and water weirds. \",\n    },\n    {\n      pluralizedName: \"fey\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/671/636747837638112910.jpeg\",\n      id: 8,\n      name: \"Fey\",\n      description:\n        \"Fey are magical creatures closely tied to the forces of nature. They dwell in twilight groves and misty forests. In some worlds, they are closely tied to the Feywild, also called the Plane of Faerie. Some are also found in the Outer Planes, particularly the planes of Arborea and the Beastlands. Fey include dryads, pixies, and satyrs. \",\n    },\n    {\n      pluralizedName: \"fiends\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/672/636747837699453839.jpeg\",\n      id: 9,\n      name: \"Fiend\",\n      description:\n        \"Fiends are creatures of wickedness that are native to the Lower Planes. A few are the servants of deities, but many more labor under the leadership of archdevils and demon princes. Evil priests and mages sometimes summon fiends to the material world to do their bidding. If an evil celestial is a rarity, a good fiend is almost inconceivable. Fiends include demons, devils, hell hounds, rakshasas, and yugoloths.\",\n    },\n    {\n      pluralizedName: \"giants\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/674/636747837751071918.jpeg\",\n      id: 10,\n      name: \"Giant\",\n      description:\n        \"Giants tower over humans and their kind. They are humanlike in shape, though some have multiple heads (ettins) or deformities (fomorians). The six varieties of true giant are hill giants, stone giants, frost giants, fire giants, cloud giants, and storm giants. Besides these, creatures such as ogres and trolls are giants. \",\n    },\n    {\n      pluralizedName: \"humanoids\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/675/636747837794884984.jpeg\",\n      id: 11,\n      name: \"Humanoid\",\n      description:\n        \"Humanoids are the main peoples of a fantasy gaming world, both civilized and savage, including humans and a tremendous variety of other species. They have language and culture, few if any innate magical abilities (though most humanoids can learn spellcasting), and a bipedal form. The most common humanoid races are the ones most suitable as player characters: humans, dwarves, elves, and halflings. Almost as numerous but far more savage and brutal, and almost uniformly evil, are the races of goblinoids (goblins, hobgoblins, and bugbears), orcs, gnolls, lizardfolk, and kobolds. \",\n    },\n    {\n      pluralizedName: \"monstrosities\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/676/636747837839875603.jpeg\",\n      id: 13,\n      name: \"Monstrosity\",\n      description:\n        \"Monstrosities are monsters in the strictest sense--frightening creatures that are not ordinary, not truly natural, and almost never benign. Some are the results of magical experimentation gone awry (such as owlbears), and others are the product of terrible curses (including minotaurs). They defy categorization, and in some sense serve as a catch-all category for creatures that don't fit into any other type.\",\n    },\n    {\n      pluralizedName: \"oozes\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/678/636747837893364274.jpeg\",\n      id: 14,\n      name: \"Ooze\",\n      description:\n        \"Oozes are gelatinous creatures that rarely have a fixed shape. They are mostly subterranean, dwelling in caves and dungeons and feeding on refuse, carrion, or creatures unlucky enough to get in their way. Black puddings and gelatinous cubes are among the most recognizable oozes. \",\n    },\n    {\n      pluralizedName: \"plants\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/679/636747837952193011.jpeg\",\n      id: 15,\n      name: \"Plant\",\n      description:\n        \"Plants in this context are vegetable creatures, not ordinary flora. Most of them are ambulatory, and some are carnivorous. The quintessential plants are the shambling mound and the treant. Fungal creatures such as the gas spore and the myconid also fall into this category. \",\n    },\n    {\n      pluralizedName: \"undead\",\n      avatarUrl: \"https://www.dndbeyond.com/avatars/4675/680/636747837998336262.jpeg\",\n      id: 16,\n      name: \"Undead\",\n      description:\n        \"Undead are once-living creatures brought to a horrifying state of undeath through the practice of necromantic magic or some unholy curse. Undead include walking corpses, such as vampires and zombies, as well as bodiless spirits, such as ghosts and specters.\\n\\n\",\n    },\n  ],\n  challengeRatings: [\n    { id: 1, value: 0.0, proficiencyBonus: 2, xp: 10 },\n    { id: 2, value: 0.125, proficiencyBonus: 2, xp: 25 },\n    { id: 3, value: 0.25, proficiencyBonus: 2, xp: 50 },\n    { id: 4, value: 0.5, proficiencyBonus: 2, xp: 100 },\n    { id: 5, value: 1.0, proficiencyBonus: 2, xp: 200 },\n    { id: 6, value: 2.0, proficiencyBonus: 2, xp: 450 },\n    { id: 7, value: 3.0, proficiencyBonus: 2, xp: 700 },\n    { id: 8, value: 4.0, proficiencyBonus: 2, xp: 1100 },\n    { id: 9, value: 5.0, proficiencyBonus: 3, xp: 1800 },\n    { id: 10, value: 6.0, proficiencyBonus: 3, xp: 2300 },\n    { id: 11, value: 7.0, proficiencyBonus: 3, xp: 2900 },\n    { id: 12, value: 8.0, proficiencyBonus: 3, xp: 3900 },\n    { id: 13, value: 9.0, proficiencyBonus: 4, xp: 5000 },\n    { id: 14, value: 10.0, proficiencyBonus: 4, xp: 5900 },\n    { id: 15, value: 11.0, proficiencyBonus: 4, xp: 7200 },\n    { id: 16, value: 12.0, proficiencyBonus: 4, xp: 8400 },\n    { id: 17, value: 13.0, proficiencyBonus: 5, xp: 10000 },\n    { id: 18, value: 14.0, proficiencyBonus: 5, xp: 11500 },\n    { id: 19, value: 15.0, proficiencyBonus: 5, xp: 13000 },\n    { id: 20, value: 16.0, proficiencyBonus: 5, xp: 15000 },\n    { id: 21, value: 17.0, proficiencyBonus: 6, xp: 18000 },\n    { id: 22, value: 18.0, proficiencyBonus: 6, xp: 20000 },\n    { id: 23, value: 19.0, proficiencyBonus: 6, xp: 22000 },\n    { id: 24, value: 20.0, proficiencyBonus: 6, xp: 25000 },\n    { id: 25, value: 21.0, proficiencyBonus: 7, xp: 33000 },\n    { id: 26, value: 22.0, proficiencyBonus: 7, xp: 41000 },\n    { id: 27, value: 23.0, proficiencyBonus: 7, xp: 50000 },\n    { id: 29, value: 24.0, proficiencyBonus: 7, xp: 62000 },\n    { id: 30, value: 25.0, proficiencyBonus: 8, xp: 75000 },\n    { id: 31, value: 26.0, proficiencyBonus: 8, xp: 90000 },\n    { id: 32, value: 27.0, proficiencyBonus: 8, xp: 105000 },\n    { id: 33, value: 28.0, proficiencyBonus: 8, xp: 120000 },\n    { id: 34, value: 29.0, proficiencyBonus: 9, xp: 135000 },\n    { id: 35, value: 30.0, proficiencyBonus: 9, xp: 155000 },\n  ],\n  creatureGroups: [\n    {\n      id: 1,\n      name: \"Wild Shape\",\n      categoryId: 2,\n      enabledByDefault: false,\n      allowDuplicates: true,\n      allowCombat: true,\n      isPrimary: true,\n      isMisc: false,\n      specialQualityTitle: \"Wild Shape\",\n      specialQualityText:\n        \"You can stay in a beast shape for a number of hours equal to half your druid level (rounded down). You then revert to your normal form unless you expend another use of this feature. You can revert to your normal form earlier by using a bonus action on your turn. You automatically revert if you fall unconscious, drop to 0 hit points, or die.\",\n      flags: [\"EOSKP\", \"EOSVP\", \"CBS\", \"CULGA\", \"CULRA\", \"EUPP\", \"EOPP\"],\n      monsterTypes: [],\n      ownerStats: [4, 5, 6],\n      description:\n        \"<p>You can use your action to magically assume the shape of a beast (or sometimes another creature) that you have seen before.</p>\",\n      actionSnippet:\n        \"<p><strong><em>Revert Form.</em></strong> You can revert to your normal form by using a bonus action on your turn.</p>\",\n    },\n    {\n      id: 2,\n      name: \"Familiar\",\n      categoryId: 1,\n      enabledByDefault: true,\n      allowDuplicates: true,\n      allowCombat: false,\n      isPrimary: true,\n      isMisc: false,\n      specialQualityTitle: \"Familiar\",\n      specialQualityText:\n        \"In combat, a familiar rolls its own initiative and acts on its own turn. A familiar can't attack, but it can take other actions as normal. When a familiar drops to 0 hit points, it disappears, leaving behind no physical form.\",\n      flags: [],\n      monsterTypes: [3, 8, 9],\n      ownerStats: [],\n      description:\n        \"<p>You gain the service of a familiar, a spirit that takes an animal (or sometimes another creature) form you choose.</p>\",\n      actionSnippet:\n        \"<p><strong><em>Attack Restriction.</em></strong> A familiar can't attack, but it can take other actions as normal.</p>\",\n    },\n    {\n      id: 3,\n      name: \"Beast Companion\",\n      categoryId: 1,\n      enabledByDefault: false,\n      allowDuplicates: true,\n      allowCombat: true,\n      isPrimary: true,\n      isMisc: false,\n      specialQualityTitle: \"Ranger's Companion\",\n      specialQualityText:\n        \"The beast obeys your commands as best as it can. It takes its turn on your initiative. On your turn, you can verbally command the beast where to move (no action required by you). You can use your action to verbally command it to take the Attack, Dash, Disengage, or Help action. If you don't issue a command, the beast takes the Dodge action. Once you have the Extra Attack feature, you can make one weapon attack yourself when you command the beast to take the Attack action.\\n\\nIf you are incapacitated or absent, the beast acts on its own, focusing on protecting you and itself. The beast never requires your command to use its reaction, such as when making an opportunity attack.\",\n      flags: [\"ACPB\", \"ARPB\", \"DRPB\", \"PSPB\", \"STPB\", \"HPLM\", \"EUPP\"],\n      monsterTypes: [],\n      ownerStats: [],\n      description:\n        \"<p>You gain a beast companion that accompanies you on your adventures and is trained to fight alongside you.</p>\",\n      actionSnippet:\n        \"<p><strong><em>Beast Master Bonus.</em></strong> The companion gains an additional bonus to attack and damage rolls equal to the ranger's proficiency bonus (not included in the attack descriptions below).</p>\",\n    },\n    {\n      id: 4,\n      name: \"Mount\",\n      categoryId: 1,\n      enabledByDefault: true,\n      allowDuplicates: true,\n      allowCombat: true,\n      isPrimary: false,\n      isMisc: false,\n      specialQualityTitle: null,\n      specialQualityText: null,\n      flags: [],\n      monsterTypes: [],\n      ownerStats: [],\n      description:\n        \"<p>A good mount can help you move more quickly through the wilderness, but its primary purpose is to carry the gear that would otherwise slow you down.</p>\",\n      actionSnippet: null,\n    },\n    {\n      id: 5,\n      name: \"Pet\",\n      categoryId: 1,\n      enabledByDefault: true,\n      allowDuplicates: true,\n      allowCombat: true,\n      isPrimary: false,\n      isMisc: false,\n      specialQualityTitle: null,\n      specialQualityText: null,\n      flags: [],\n      monsterTypes: [],\n      ownerStats: [],\n      description:\n        \"<p>Allows you to display a creature special to you, such as a <em>figurine of wondrous power</em>.</p>\",\n      actionSnippet: null,\n    },\n    {\n      id: 6,\n      name: \"Summoned\",\n      categoryId: 1,\n      enabledByDefault: true,\n      allowDuplicates: true,\n      allowCombat: true,\n      isPrimary: false,\n      isMisc: false,\n      specialQualityTitle: null,\n      specialQualityText: null,\n      flags: [],\n      monsterTypes: [],\n      ownerStats: [],\n      description:\n        \"<p>Allows you to display stat block references to summoned creatures from spells such as <em>conjure woodland beings</em>.</p>\",\n      actionSnippet: null,\n    },\n    {\n      id: 7,\n      name: \"Misc\",\n      categoryId: 3,\n      enabledByDefault: true,\n      allowDuplicates: true,\n      allowCombat: true,\n      isPrimary: false,\n      isMisc: true,\n      specialQualityTitle: null,\n      specialQualityText: null,\n      flags: [],\n      monsterTypes: [],\n      ownerStats: [],\n      description: \"<p>Allows you to display any other type of monster or NPC stat block.</p>\",\n      actionSnippet: null,\n    },\n    {\n      id: 10,\n      name: \"Battle Smith Defender\",\n      categoryId: 3,\n      enabledByDefault: false,\n      allowDuplicates: true,\n      allowCombat: true,\n      isPrimary: true,\n      isMisc: false,\n      specialQualityTitle: null,\n      specialQualityText: null,\n      flags: [\"ARPB\", \"DRPB\", \"PSPB\", \"AHM\", \"MHPAIM\", \"MHPAMCM\"],\n      monsterTypes: [],\n      ownerStats: [],\n      description:\n        \"<p>The tinkering you have done in your free time has borne you a faithful companion, an iron defender.</p>\",\n      actionSnippet: null,\n    },\n    {\n      id: 11,\n      name: \"Sidekick\",\n      categoryId: 3,\n      enabledByDefault: true,\n      allowDuplicates: true,\n      allowCombat: true,\n      isPrimary: true,\n      isMisc: false,\n      specialQualityTitle: null,\n      specialQualityText: null,\n      flags: [\"UCRAL\"],\n      monsterTypes: [],\n      ownerStats: [],\n      description:\n        \"<p>On your adventures, the DM might reveal that you’ve befriended a special character called a sidekick, who joins your party.</p><p>The DM will either tell you which type of sidekick to use or let you choose one. It’s up to you and the DM to decide who controls the sidekick in play.</p>\",\n      actionSnippet: null,\n    },\n    {\n      id: 12,\n      name: \"Infusion\",\n      categoryId: 3,\n      enabledByDefault: false,\n      allowDuplicates: true,\n      allowCombat: true,\n      isPrimary: true,\n      isMisc: true,\n      specialQualityTitle: null,\n      specialQualityText: null,\n      flags: [],\n      monsterTypes: [],\n      ownerStats: [],\n      description: \"<p>You learn intricate methods for magically creating a creature that serves you.</p>\",\n      actionSnippet: null,\n    },\n  ],\n  creatureGroupCategories: [\n    { id: 1, name: \"Companion\" },\n    { id: 2, name: \"Shapechange\" },\n    { id: 3, name: \"Other\" },\n  ],\n  environments: [\n    { id: 1, name: \"Arctic\" },\n    { id: 2, name: \"Coastal\" },\n    { id: 3, name: \"Desert\" },\n    { id: 4, name: \"Forest\" },\n    { id: 5, name: \"Grassland\" },\n    { id: 6, name: \"Hill\" },\n    { id: 7, name: \"Mountain\" },\n    { id: 8, name: \"Swamp\" },\n    { id: 9, name: \"Underdark\" },\n    { id: 10, name: \"Underwater\" },\n    { id: 11, name: \"Urban\" },\n  ],\n  armorTypes: [\n    { id: 1, name: \"Light Armor\" },\n    { id: 2, name: \"Medium Armor\" },\n    { id: 3, name: \"Heavy Armor\" },\n    { id: 4, name: \"Shield\" },\n  ],\n  gearTypes: [\n    { id: 1, name: \"Adventuring Gear\" },\n    { id: 2, name: \"Armor\" },\n    { id: 3, name: \"Artifact\" },\n    { id: 4, name: \"Mount\" },\n    { id: 5, name: \"Poison\" },\n    { id: 6, name: \"Potion\" },\n    { id: 7, name: \"Ring\" },\n    { id: 8, name: \"Rod\" },\n    { id: 9, name: \"Scroll\" },\n    { id: 10, name: \"Staff\" },\n    { id: 11, name: \"Tool\" },\n    { id: 12, name: \"Vehicle (Land)\" },\n    { id: 13, name: \"Wand\" },\n    { id: 14, name: \"Weapon\" },\n    { id: 15, name: \"Wondrous Item\" },\n    { id: 16, name: \"Equipment Pack\" },\n    { id: 17, name: \"Vehicle (Water)\" },\n    { id: 18, name: \"Gemstone\" },\n  ],\n  naturalActions: [\n    {\n      id: 1,\n      entityTypeId: 1120657896,\n      limitedUse: null,\n      name: \"Unarmed Strike\",\n      description:\n        \"Instead of using a weapon to make a melee weapon attack, you can use an unarmed strike: a punch, kick, head-butt, or similar forceful blow (none of which count as weapons). On a hit, an unarmed strike deals bludgeoning damage equal to 1 + your Strength modifier. You are proficient with your unarmed strikes.\",\n      snippet:\n        \"You can punch, kick, head-butt, or use a similar forceful blow and deal bludgeoning damage equal to 1 + STR modifier\",\n      abilityModifierStatId: 1,\n      onMissDescription: null,\n      saveFailDescription: null,\n      saveSuccessDescription: null,\n      saveStatId: null,\n      fixedSaveDc: null,\n      attackTypeRange: 1,\n      actionType: 1,\n      attackSubtype: 3,\n      dice: null,\n      value: 1,\n      damageTypeId: 1,\n      isMartialArts: true,\n      isProficient: true,\n      spellRangeType: null,\n      displayAsAttack: null,\n      range: null,\n      activation: { activationTime: 1, activationType: 1 },\n      attackCustomData: {\n        name: null,\n        notes: null,\n        damageBonus: null,\n        toHitBonus: null,\n        toHit: null,\n        isOffhand: null,\n        isSilver: null,\n        isAdamantine: null,\n        isProficient: null,\n        saveDcBonus: null,\n        saveDc: null,\n        weight: null,\n        displayAsAttack: null,\n        cost: null,\n      },\n      componentId: 0,\n      componentTypeId: 0,\n    },\n  ],\n  adjustmentTypes: [\n    {\n      id: 2,\n      name: \"Additional Magic Bonus\",\n      dataType: 1,\n      constraints: [\n        { id: 1, name: \"Minimum\", value: -10 },\n        { id: 2, name: \"Maximum\", value: 10 },\n      ],\n    },\n    {\n      id: 3,\n      name: \"Additional Misc Bonus\",\n      dataType: 1,\n      constraints: [\n        { id: 1, name: \"Minimum\", value: -10 },\n        { id: 2, name: \"Maximum\", value: 10 },\n      ],\n    },\n    { id: 32, name: \"Armor Proficiency Level\", dataType: 1, constraints: [] },\n    { id: 49, name: \"Capacity Override\", dataType: 3, constraints: [] },\n    { id: 50, name: \"Capacity Weight Override\", dataType: 2, constraints: [] },\n    { id: 19, name: \"Cost Override\", dataType: 2, constraints: [] },\n    {\n      id: 42,\n      name: \"Creature AC\",\n      dataType: 1,\n      constraints: [\n        { id: 1, name: \"Minimum\", value: 1 },\n        { id: 2, name: \"Maximum\", value: 999 },\n      ],\n    },\n    { id: 45, name: \"Creature Alignment\", dataType: 1, constraints: [] },\n    {\n      id: 43,\n      name: \"Creature Hit Points\",\n      dataType: 1,\n      constraints: [\n        { id: 1, name: \"Minimum\", value: 1 },\n        { id: 2, name: \"Maximum\", value: 999 },\n      ],\n    },\n    { id: 47, name: \"Creature Notes\", dataType: 3, constraints: [] },\n    { id: 46, name: \"Creature Size\", dataType: 1, constraints: [] },\n    { id: 44, name: \"Creature Type Override\", dataType: 1, constraints: [] },\n    { id: 31, name: \"Dice Count Override\", dataType: 1, constraints: [] },\n    { id: 30, name: \"Dice Type Override\", dataType: 1, constraints: [] },\n    { id: 16, name: \"Display As Attack\", dataType: 4, constraints: [] },\n    { id: 18, name: \"Dual Wield\", dataType: 4, constraints: [] },\n    { id: 10, name: \"Fixed Value Bonus\", dataType: 1, constraints: [] },\n    { id: 11, name: \"Fixed Value Override\", dataType: 1, constraints: [] },\n    { id: 21, name: \"Is Adamantine\", dataType: 4, constraints: [] },\n    { id: 48, name: \"Is Dedicated Weapon\", dataType: 4, constraints: [] },\n    { id: 29, name: \"Is Hexblade\", dataType: 4, constraints: [] },\n    { id: 28, name: \"Is Pact Weapon\", dataType: 4, constraints: [] },\n    { id: 17, name: \"Is Proficient\", dataType: 4, constraints: [] },\n    { id: 20, name: \"Is Silver\", dataType: 4, constraints: [] },\n    { id: 35, name: \"Language Proficiency Level\", dataType: 1, constraints: [] },\n    { id: 37, name: \"Movement Override\", dataType: 1, constraints: [] },\n    { id: 8, name: \"Name Override\", dataType: 3, constraints: [] },\n    { id: 9, name: \"Notes\", dataType: 3, constraints: [] },\n    {\n      id: 1,\n      name: \"Override AC\",\n      dataType: 1,\n      constraints: [\n        { id: 1, name: \"Minimum\", value: 0 },\n        { id: 2, name: \"Maximum\", value: 2000000000 },\n      ],\n    },\n    {\n      id: 4,\n      name: \"Override Base Armor + DEX\",\n      dataType: 1,\n      constraints: [\n        { id: 1, name: \"Minimum\", value: 0 },\n        { id: 2, name: \"Maximum\", value: 2000000000 },\n      ],\n    },\n    {\n      id: 7,\n      name: \"Override Passive Insight\",\n      dataType: 1,\n      constraints: [\n        { id: 1, name: \"Minimum\", value: 0 },\n        { id: 2, name: \"Maximum\", value: 2000000000 },\n      ],\n    },\n    {\n      id: 6,\n      name: \"Override Passive Investigation\",\n      dataType: 1,\n      constraints: [\n        { id: 1, name: \"Minimum\", value: 0 },\n        { id: 2, name: \"Maximum\", value: 2000000000 },\n      ],\n    },\n    {\n      id: 5,\n      name: \"Override Passive Perception\",\n      dataType: 1,\n      constraints: [\n        { id: 1, name: \"Minimum\", value: 0 },\n        { id: 2, name: \"Maximum\", value: 2000000000 },\n      ],\n    },\n    { id: 14, name: \"Save DC Bonus\", dataType: 1, constraints: [] },\n    { id: 15, name: \"Save DC Override\", dataType: 1, constraints: [] },\n    { id: 40, name: \"Saving Throw Magic Bonus\", dataType: 1, constraints: [] },\n    { id: 39, name: \"Saving Throw Misc Bonus\", dataType: 1, constraints: [] },\n    { id: 38, name: \"Saving Throw Override\", dataType: 1, constraints: [] },\n    { id: 41, name: \"Saving Throw Proficiency Level\", dataType: 1, constraints: [] },\n    { id: 36, name: \"Sense Override\", dataType: 1, constraints: [] },\n    { id: 25, name: \"Skill Magic Bonus\", dataType: 1, constraints: [] },\n    { id: 24, name: \"Skill Misc Bonus\", dataType: 1, constraints: [] },\n    { id: 23, name: \"Skill Override\", dataType: 1, constraints: [] },\n    { id: 26, name: \"Skill Proficiency Level\", dataType: 1, constraints: [] },\n    { id: 27, name: \"Skill Stat Override\", dataType: 1, constraints: [] },\n    { id: 12, name: \"To Hit Bonus\", dataType: 1, constraints: [] },\n    { id: 13, name: \"To Hit Override\", dataType: 1, constraints: [] },\n    { id: 34, name: \"Tool Proficiency Level\", dataType: 1, constraints: [] },\n    { id: 33, name: \"Weapon Proficiency Level\", dataType: 1, constraints: [] },\n    { id: 22, name: \"Weight Override\", dataType: 2, constraints: [] },\n  ],\n  weaponCategories: [\n    { id: 1, entityTypeId: 660121713, name: \"Simple\" },\n    { id: 2, entityTypeId: 660121713, name: \"Martial\" },\n    { id: 3, entityTypeId: 660121713, name: \"Firearms\" },\n  ],\n  spellComponents: [\n    {\n      id: 1,\n      name: \"Verbal\",\n      shortName: \"V\",\n      description:\n        \"Most spells require the chanting of mystic words. The words themselves aren't the source of the spell's power; rather, the particular combination of sounds, with specific pitch and resonance, sets the threads of magic in motion. Thus, a character who is gagged or in an area of silence, such as one created by the silence spell, can't cast a spell with a verbal component.\\n\\n\",\n    },\n    {\n      id: 2,\n      name: \"Somatic\",\n      shortName: \"S\",\n      description:\n        \"Spellcasting gestures might include a forceful gesticulation or an intricate set of gestures. If a spell requires a somatic component, the caster must have free use of at least one hand to perform these gestures.\\n\\n\",\n    },\n    {\n      id: 3,\n      name: \"Material\",\n      shortName: \"M\",\n      description:\n        \"Casting some spells requires particular objects, specified in parentheses in the component entry. A character can use a component pouch or a spellcasting focus (found in “Equipment”) in place of the components specified for a spell. But if a cost is indicated for a component, a character must have that specific component before he or she can cast the spell. \\nIf a spell states that a material component is consumed by the spell, the caster must provide this component for each casting of the spell. A spellcaster must have a hand free to access a spell's material components--or to hold a spellcasting focus--but it can be the same hand that he or she uses to perform somatic components.\\n\\n\",\n    },\n    {\n      id: 4,\n      name: \"Royalty\",\n      shortName: \"R\",\n      description:\n        \"To cast a spell that employs a royalty component (including using a spell scroll or other magic item that stores such a spell), a caster must have sufficient funds on their person. The cost of the casting is set by the caster who creates the spell, but is typically 1 gp per spell slot level. When the spell is cast, the royalty is magically transported to a coffer or other object designated by the creating spellcaster. This payment is made whether the caster using the spell is aware of the royalty component or not. If the caster does not have sufficient funds, the spell is not lost but it cannot be cast.\\n\\nThough many casters have tried to circumvent the royalty component, none have ever fully succeeded. However, it is said that a character can attempt a DC 15 Intelligence (Arcana) check while casting a spell with a royalty component. With a successful check, the payment is taken from a random creature within 10 feet of the caster, without that creature’s knowledge.\",\n    },\n  ],\n  activationTypes: [\n    { id: 1, name: \"Action\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 2, name: \"No Action\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 3, name: \"Bonus Action\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 4, name: \"Reaction\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 6, name: \"Minute\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 7, name: \"Hour\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 8, name: \"Special\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n  ],\n  basicActions: [\n    {\n      id: 1,\n      name: \"Attack\",\n      description:\n        '<p>The most common action to take in combat is the Attack action, whether you are swinging a sword, firing an arrow from a bow, or brawling with your fists.</p>\\n<p>With this action, you make one melee or ranged attack. See the \"Making an Attack\" section for the rules that govern attacks.</p>\\n<p>Certain features, such as the Extra Attack feature of the fighter, allow you to make more than one attack with this action.</p>',\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 2,\n      name: \"Cast a Spell\",\n      description:\n        \"<p>Spellcasters such as wizards and clerics, as well as many monsters, have access to spells and can use them to great effect in combat. Each spell has a casting time, which specifies whether the caster must use an action, a reaction, minutes, or even hours to cast the spell. Casting a spell is, therefore, not necessarily an action. Most spells do have a casting time of 1 action, so a spellcaster often uses his or her action in combat to cast such a spell.</p>\",\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 4,\n      name: \"Dash\",\n      description:\n        \"<p>When you take the Dash action, you gain extra movement for the current turn. The increase equals your speed, after applying any modifiers. With a speed of 30 feet, for example, you can move up to 60 feet on your turn if you dash.</p>\\n<p>Any increase or decrease to your speed changes this additional movement by the same amount. If your speed of 30 feet is reduced to 15 feet, for instance, you can move up to 30 feet this turn if you dash.</p>\",\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 5,\n      name: \"Disengage\",\n      description:\n        \"<p>If you take the Disengage action, your movement doesn't provoke opportunity attacks for the rest of the turn.</p>\",\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 6,\n      name: \"Dodge\",\n      description:\n        \"<p>When you take the Dodge action, you focus entirely on avoiding attacks. Until the start of your next turn, any attack roll made against you has disadvantage if you can see the attacker, and you make Dexterity saving throws with advantage. You lose this benefit if you are incapacitated or if your speed drops to 0.</p>\",\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 7,\n      name: \"Help\",\n      description:\n        \"<p>You can lend your aid to another creature in the completion of a task. When you take the Help action, the creature you aid gains advantage on the next ability check it makes to perform the task you are helping with, provided that it makes the check before the start of your next turn.</p>\\n<p>Alternatively, you can aid a friendly creature in attacking a creature within 5 feet of you. You feint, distract the target, or in some other way team up to make your ally's attack more effective. If your ally attacks the target before your next turn, the first attack roll is made with advantage.</p>\",\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 8,\n      name: \"Hide\",\n      description:\n        '<p>When you take the Hide action, you make a Dexterity (Stealth) check in an attempt to hide, following the rules for hiding. If you succeed, you gain certain benefits, as described in the \"Unseen Attackers and Targets\" section later in this chapter.</p>',\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 9,\n      name: \"Ready\",\n      description:\n        '<p>Sometimes you want to get the jump on a foe or wait for a particular circumstance before you act. To do so, you can take the Ready action on your turn, which lets you act using your reaction before the start of your next turn.</p>\\n<p>First, you decide what perceivable circumstance will trigger your reaction. Then, you choose the action you will take in response to that trigger, or you choose to move up to your speed in response to it. Examples include \"If the cultist steps on the trapdoor, I\\'ll pull the lever that opens it,\" and \"If the goblin steps next to me, I move away.\"</p>\\n<p>When the trigger occurs, you can either take your reaction right after the trigger finishes or ignore the trigger. Remember that you can take only one reaction per round.</p>\\n<p>When you ready a spell, you cast it as normal but hold its energy, which you release with your reaction when the trigger occurs. To be readied, a spell must have a casting time of 1 action, and holding onto the spell\\'s magic requires concentration. If your concentration is broken, the spell dissipates without taking effect. For example, if you are concentrating on the <strong>web</strong> spell and ready <strong>magic missile</strong>, your <strong>web</strong> spell ends, and if you take damage before you release <strong>magic missile</strong> with your reaction, your concentration might be broken.</p>',\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 10,\n      name: \"Search\",\n      description:\n        \"<p>When you take the Search action, you devote your attention to finding something. Depending on the nature of your search, the GM might have you make a Wisdom (Perception) check or an Intelligence (Investigation) check.</p>\",\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 11,\n      name: \"Use an Object\",\n      description:\n        \"<p>You normally interact with an object while doing something else, such as when you draw a sword as part of an attack. When an object requires your action for its use, you take the Use an Object action. This action is also useful when you want to interact with more than one object on your turn.</p>\",\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 1001,\n      name: \"Opportunity Attack\",\n      description:\n        \"<p>You can make an opportunity attack when a hostile creature that you can see moves out of your reach. To make the opportunity attack, you use your reaction to make one melee attack against the provoking creature. The attack occurs right before the creature leaves your reach</p><p></p>\",\n      activation: { activationTime: null, activationType: 4 },\n    },\n    {\n      id: 1002,\n      name: \"Grapple\",\n      description:\n        \"<p>When you want to grab a creature or wrestle with it, you can use the Attack action to make a special melee attack, a grapple. If you're able to make multiple attacks with the Attack action, this attack replaces one of them.</p>\\n<p>The target of your grapple must be no more than one size larger than you and must be within your reach. Using at least one free hand, you try to seize the target by making a grapple check instead of an attack roll: a Strength (Athletics) check contested by the target's Strength (Athletics) or Dexterity (Acrobatics) check (the target chooses the ability to use). If you succeed, you subject the target to the grappled condition. The condition specifies the things that end it, and you can release the target whenever you like (no action required).</p>\\n<p><strong>Escaping a Grapple.</strong> A grappled creature can use its action to escape. To do so, it must succeed on a Strength (Athletics) or Dexterity (Acrobatics) check contested by your Strength (Athletics) check.</p>\\n<p><strong>Moving a Grappled Creature.</strong> When you move, you can drag or carry the grappled creature with you, but your speed is halved, unless the creature is two or more sizes smaller than you.</p>\",\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 1003,\n      name: \"Shove\",\n      description:\n        \"<p>Using the Attack action, you can make a special melee attack to shove a creature, either to knock it prone or push it away from you. If you're able to make multiple attacks with the Attack action, this attack replaces one of them.</p>\\n<p>The target must be no more than one size larger than you and must be within your reach. Instead of making an attack roll, you make a Strength (Athletics) check contested by the target's Strength (Athletics) or Dexterity (Acrobatics) check (the target chooses the ability to use). You succeed automatically if the target is incapacitated. If you succeed, you either knock the target prone or push it 5 feet away from you.</p>\",\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 1004,\n      name: \"Improvise\",\n      description:\n        \"<p>Your character can do things not covered by the actions in this chapter, such as breaking down doors, intimidating enemies, sensing weaknesses in magical defenses, or calling for a parley with a foe. The only limits to the actions you can attempt are your imagination and your character's ability scores. See the descriptions of the ability scores in chapter 7 for inspiration as you improvise.</p>\\n<p>When you describe an action not detailed elsewhere in the rules, the DM tells you whether that action is possible and what kind of roll you need to make, if any, to determine success or failure.</p>\",\n      activation: { activationTime: null, activationType: 1 },\n    },\n    {\n      id: 1005,\n      name: \"Two-Weapon Fighting\",\n      description:\n        \"<p>When you take the Attack action and attack with a light melee weapon that you're holding in one hand, you can use a bonus action to attack with a different light melee weapon that you're holding in the other hand. You don't add your ability modifier to the damage of the bonus attack, unless that modifier is negative.</p>\\n<p>If either weapon has the thrown property, you can throw the weapon, instead of making a melee attack with it.</p>\",\n      activation: { activationTime: null, activationType: 3 },\n    },\n    {\n      id: 1006,\n      name: \"Interact with an Object\",\n      description:\n        \"<p>Here are a few examples of the sorts of thing you can do in tandem with your movement and action:</p>\\n<ul>\\n<li>draw or sheathe a sword</li>\\n<li>open or close a door</li>\\n<li>withdraw a potion from your backpack</li>\\n<li>pick up a dropped axe</li>\\n<li>take a bauble from a table</li>\\n<li>remove a ring from your finger</li>\\n<li>stuff some food into your mouth</li>\\n<li>plant a banner in the ground</li>\\n<li>fish a few coins from your belt pouch</li>\\n<li>drink all the ale in a flagon</li>\\n<li>throw a lever or a switch</li>\\n<li>pull a torch from a sconce</li>\\n<li>take a book from a shelf you can reach</li>\\n<li>extinguish a small flame</li>\\n<li>don a mask</li>\\n<li>pull the hood of your cloak up and over your head</li>\\n<li>put your ear to a door</li>\\n<li>kick a small stone</li>\\n<li>turn a key in a lock</li>\\n<li>tap the floor with a 10-foot pole</li>\\n<li>hand an item to another character</li>\\n</ul>\",\n      activation: { activationTime: null, activationType: 8 },\n    },\n  ],\n  rules: [\n    {\n      id: 34,\n      name: \"Race\",\n      description:\n        \"Your choice of race affects many different aspects of your character. It establishes fundamental qualities that exist throughout your character’s adventuring career. When making this decision, keep in mind the kind of character you want to play. For example, a halfling could be a good choice for a sneaky rogue, a dwarf makes a tough warrior, and an elf can be a master of arcane magic.\",\n    },\n    {\n      id: 35,\n      name: \"Class\",\n      description:\n        \"Class is the primary definition of what your character can do. It’s more than a profession; it’s your character’s calling. Class shapes the way you think about the world and interact with it and your relationship with other people and powers in the multiverse. A fighter, for example, might view the world in pragmatic terms of strategy and maneuvering, and see herself as just a pawn in a much larger game. A cleric, by contrast, might see himself as a willing servant in a god’s unfolding plan or a conflict brewing among various deities. While the fighter has contacts in a mercenary company or army, the cleric might know a number of priests, paladins, and devotees who share his faith.\",\n    },\n    {\n      id: 36,\n      name: \"Level\",\n      description:\n        \"Starting off at 1st level marks your character’s entry into the adventuring life. As your character goes on adventures and overcomes challenges, he or she gains experience, represented by experience points. A character who reaches a specified experience point total advances in capability. This advancement is called gaining a level.\",\n    },\n    {\n      id: 37,\n      name: \"Experience Points\",\n      description:\n        \"As your character goes on adventures and overcomes challenges, he or she gains experience, represented by experience points. A character who reaches a specified experience point total advances in capability. This advancement is called gaining a level.\",\n    },\n    {\n      id: 38,\n      name: \"Hit Points\",\n      description:\n        \"Hit points represent a combination of physical and mental durability, the will to live, and luck. Creatures with more hit points are more difficult to kill. Those with fewer hit points are more fragile. \\n\\nA creature's current hit points (usually just called hit points) can be any number from the creature's hit point maximum down to 0. This number changes frequently as a creature takes damage or receives healing. \\n\\nWhenever a creature takes damage, that damage is subtracted from its hit points. The loss of hit points has no effect on a creature's capabilities until the creature drops to 0 hit points.\",\n    },\n    {\n      id: 39,\n      name: \"Hit Dice\",\n      description:\n        \"Your hit points are determined by your Hit Dice (short for Hit Point Dice).\\n\\nAt 1st level, your character has 1 Hit Die, and the die type is determined by your class. You start with hit points equal to the highest roll of that die, as indicated in your class description. (You also add your Constitution modifier.)\",\n    },\n    {\n      id: 40,\n      name: \"Proficiency Bonus\",\n      description:\n        '<p>Characters have a proficiency bonus determined by level, as detailed in <a href=\"https://www.dndbeyond.com/compendium/rules/phb/step-by-step-characters\">chapter 1</a>. Monsters also have this bonus, which is incorporated in their stat blocks. The bonus is used in the rules on ability checks, saving throws, and attack rolls.</p>\\n<p>Your proficiency bonus can’t be added to a single die roll or other number more than once. For example, if two different rules say you can add your proficiency bonus to a Wisdom saving throw, you nevertheless add the bonus only once when you make the save.</p>\\n<p>Occasionally, your proficiency bonus might be multiplied or divided (doubled or halved, for example) before you apply it. For example, the rogue’s Expertise feature doubles the proficiency bonus for certain ability checks. If a circumstance suggests that your proficiency bonus applies more than once to the same roll, you still add it only once and multiply or divide it only once.</p>\\n<p>By the same token, if a feature or effect allows you to multiply your proficiency bonus when making an ability check that wouldn’t normally benefit from your proficiency bonus, you still don’t add the bonus to the check. For that check your proficiency bonus is 0, given the fact that multiplying 0 by any number is still 0. For instance, if you lack proficiency in the History skill, you gain no benefit from a feature that lets you double your proficiency bonus when you make Intelligence (History) checks.</p>\\n<p>In general, you don’t multiply your proficiency bonus for attack rolls or saving throws. If a feature or effect allows you to do so, these same rules apply.</p>',\n    },\n    {\n      id: 41,\n      name: \"Ability Scores\",\n      description:\n        \"Each of a creature's abilities has a score, a number that defines the magnitude of that ability. An ability score is not just a measure of innate capabilities, but also encompasses a creature's training and competence in activities related to that ability. \\n\\nA score of 10 or 11 is the normal human average, but adventurers and many monsters are a cut above average in most abilities. A score of 18 is the highest that a person usually reaches. Adventurers can have scores as high as 20, and monsters and divine beings can have scores as high as 30. \\n\\nEach ability also has a modifier, derived from the score and ranging from -5 (for an ability score of 1) to +10 (for a score of 30). The Ability Scores and Modifiers table notes the ability modifiers for the range of possible ability scores, from 1 to 30.\",\n    },\n    {\n      id: 42,\n      name: \"Alignment\",\n      description:\n        \"A typical creature in the game world has an alignment, which broadly describes its moral and personal attitudes. Alignment is a combination of two factors: one identifies morality (good, evil, or neutral), and the other describes attitudes toward society and order (lawful, chaotic, or neutral). Thus, nine distinct alignments define the possible combinations.\",\n    },\n    {\n      id: 43,\n      name: \"Lawful Good\",\n      description:\n        \"Lawful good (LG) creatures can be counted on to do the right thing as expected by society. Gold dragons, paladins, and most dwarves are lawful good.\",\n    },\n    {\n      id: 44,\n      name: \"Neutral Good\",\n      description:\n        \"Neutral good (NG) folk do the best they can to help others according to their needs. Many celestials, some cloud giants, and most gnomes are neutral good.\",\n    },\n    {\n      id: 45,\n      name: \"Chaotic Good\",\n      description:\n        \"Chaotic good (CG) creatures act as their conscience directs, with little regard for what others expect. Copper dragons, many elves, and unicorns are chaotic good.\",\n    },\n    {\n      id: 46,\n      name: \"Neutral\",\n      description:\n        \"Neutral (N) is the alignment of those who prefer to steer clear of moral questions and don’t take sides, doing what seems best at the time. Lizardfolk, most druids, and many humans are neutral.\",\n    },\n    {\n      id: 47,\n      name: \"Lawful Evil\",\n      description:\n        \"Lawful evil (LE) creatures methodically take what they want, within the limits of a code of tradition, loyalty, or order. Devils, blue dragons, and hobgoblins are lawful evil.\",\n    },\n    {\n      id: 48,\n      name: \"Neutral Evil\",\n      description:\n        \"Neutral evil (NE) is the alignment of those who do whatever they can get away with, without compassion or qualms. Many drow, some cloud giants, and goblins are neutral evil.\",\n    },\n    {\n      id: 49,\n      name: \"Chaotic Evil\",\n      description:\n        \"Chaotic evil (CE) creatures act with arbitrary violence, spurred by their greed, hatred, or bloodlust. Demons, red dragons, and orcs are chaotic evil.\",\n    },\n    {\n      id: 50,\n      name: \"Lawful Neutral\",\n      description:\n        \"Lawful neutral (LN) individuals act in accordance with law, tradition, or personal codes. Many monks and some wizards are lawful neutral.\",\n    },\n    {\n      id: 51,\n      name: \"Chaotic Neutral\",\n      description:\n        \"Chaotic neutral (CN) creatures follow their whims, holding their personal freedom above all else. Many barbarians and rogues, and some bards, are chaotic neutral.\",\n    },\n    {\n      id: 52,\n      name: \"Background\",\n      description:\n        \"Every story has a beginning. Your character’s background reveals where you came from, how you became an adventurer, and your place in the world. Your fighter might have been a courageous knight or a grizzled soldier. Your wizard could have been a sage or an artisan. Your rogue might have gotten by as a guild thief or commanded audiences as a jester.\",\n    },\n    {\n      id: 53,\n      name: \"Personality Traits\",\n      description:\n        \"Personality traits are small, simple ways to help you set your character apart from every other character. Your personality traits should tell you something interesting and fun about your character. They should be self-descriptions that are specific about what makes your character stand out.\\n\\nPersonality traits might describe the things your character likes, his or her past accomplishments, things your character dislikes or fears, your character’s self-attitude or mannerisms, or the influence of his or her ability scores.\",\n    },\n    {\n      id: 54,\n      name: \"Bonds\",\n      description:\n        \"Bonds represent a character’s connections to people, places, and events in the world. They tie you to things from your background. They might inspire you to heights of heroism, or lead you to act against your own best interests if they are threatened. They can work very much like ideals, driving a character’s motivations and goals. \\n\\nBonds might answer any of these questions: Whom do you care most about? To what place do you feel a special connection? What is your most treasured possession?\",\n    },\n    {\n      id: 55,\n      name: \"Ideals\",\n      description:\n        \"Your ideals are the things that you believe in most strongly, the fundamental moral and ethical principles that compel you to act as you do. Ideals encompass everything from your life goals to your core belief system. \\n\\nIdeals might answer any of these questions: What are the principles that you will never betray? What would prompt you to make sacrifices? What drives you to act and guides your goals and ambitions? What is the single most important thing you strive for?\",\n    },\n    {\n      id: 56,\n      name: \"Flaws\",\n      description:\n        \"Your character’s flaw represents some vice, compulsion, fear, or weakness—in particular, anything that someone else could exploit to bring you to ruin or cause you to act against your best interests. More significant than negative personality traits, a flaw might answer any of these questions: What enrages you? What’s the one person, concept, or event that you are terrified of? What are your vices?\",\n    },\n    {\n      id: 57,\n      name: \"Armor Class\",\n      description:\n        \"Your Armor Class (AC) represents how well your character avoids being wounded in battle. Things that contribute to your AC include the armor you wear, the shield you carry, and your Dexterity modifier. Not all characters wear armor or carry shields, however. \\n\\nWithout armor or a shield, your character’s AC equals 10 + his or her Dexterity modifier. If your character wears armor, carries a shield, or both, calculate your AC using the rules in the Equipment section. Record your AC on your character sheet.\",\n    },\n    {\n      id: 58,\n      name: \"Acid Damage\",\n      description:\n        \"The corrosive spray of an adult black dragon's breath and the dissolving enzymes secreted by a black pudding deal acid damage.\",\n    },\n    {\n      id: 59,\n      name: \"Bludgeoning Damage\",\n      description: \"Blunt force attacks--hammers, falling, constriction, and the like--deal bludgeoning damage.\",\n    },\n    {\n      id: 60,\n      name: \"Cold Damage\",\n      description:\n        \"The infernal chill radiating from an ice devil's spear and the frigid blast of a young white dragon's breath deal cold damage.\",\n    },\n    {\n      id: 61,\n      name: \"Fire Damage\",\n      description: \"Ancient red dragons breathe fire, and many spells conjure flames to deal fire damage.\",\n    },\n    {\n      id: 62,\n      name: \"Force Damage\",\n      description:\n        \"Force is pure magical energy focused into a damaging form. Most effects that deal force damage are spells, including magic missile and spiritual weapon.\",\n    },\n    {\n      id: 63,\n      name: \"Lightning Damage\",\n      description: \"A lightning bolt spell and a blue dragon wyrmling's breath deal lightning damage.\",\n    },\n    {\n      id: 64,\n      name: \"Necrotic Damage\",\n      description:\n        \"Necrotic damage, dealt by certain undead and a spell such as chill touch, withers matter and even the soul.\",\n    },\n    {\n      id: 65,\n      name: \"Piercing Damage\",\n      description: \"Puncturing and impaling attacks, including spears and monsters' bites, deal piercing damage.\",\n    },\n    {\n      id: 66,\n      name: \"Poison Damage\",\n      description: \"Venomous stings and the toxic gas of an adult green dragon's breath deal poison damage.\",\n    },\n    { id: 67, name: \"Psychic Damage\", description: \"Mental abilities such as a psionic blast deal psychic damage.\" },\n    {\n      id: 68,\n      name: \"Radiant Damage\",\n      description:\n        \"Radiant damage, dealt by a cleric's flame strike spell or an angel's smiting weapon, sears the flesh like fire and overloads the spirit with power.\",\n    },\n    { id: 69, name: \"Slashing Damage\", description: \"Swords, axes, and monsters' claws deal slashing damage.\" },\n    {\n      id: 70,\n      name: \"Thunder Damage\",\n      description: \"A concussive burst of sound, such as the effect of the thunderwave spell, deals thunder damage.\",\n    },\n    {\n      id: 71,\n      name: \"Critical Hits\",\n      description:\n        \"When you score a critical hit, you get to roll extra dice for the attack's damage against the target. Roll all of the attack's damage dice twice and add them together. Then add any relevant modifiers as normal. To speed up play, you can roll all the damage dice at once.\",\n    },\n    {\n      id: 72,\n      name: \"Damage Resistance\",\n      description:\n        \"Some creatures and objects are exceedingly difficult to hurt with certain types of damage.\\n\\nIf a creature or an object has resistance to a damage type, damage of that type is halved against it.\\n\\nResistance is applied after all other modifiers to damage. For example, a creature has resistance to bludgeoning damage and is hit by an attack that deals 25 bludgeoning damage. The creature is also within a magical aura that reduces all damage by 5. The 25 damage is first reduced by 5 and then halved, so the creature takes 10 damage.\\n\\nMultiple instances of resistance that affect the same damage type count as only one instance. For example, if a creature has resistance to fire damage as well as resistance to all nonmagical damage, the damage of a nonmagical fire is reduced by half against the creature, not reduced by three-quarters.\",\n    },\n    {\n      id: 73,\n      name: \"Damage Vulnerability\",\n      description:\n        \"Some creatures and objects are unusually easy to hurt with certain types of damage. \\n\\nIf a creature or an object has vulnerability to a damage type, damage of that type is doubled against it. \\n\\nMultiple instances of vulnerability that affect the same damage type count as only one instance.\",\n    },\n    {\n      id: 74,\n      name: \"Instant Death\",\n      description:\n        \"Massive damage can kill you instantly. When damage reduces you to 0 hit points and there is damage remaining, you die if the remaining damage equals or exceeds your hit point maximum. \\n\\nFor example, a cleric with a maximum of 12 hit points currently has 6 hit points. If she takes 18 damage from an attack, she is reduced to 0 hit points, but 12 damage remains. Because the remaining damage equals her hit point maximum, the cleric dies.\",\n    },\n    {\n      id: 75,\n      name: \"Death Saving Throws\",\n      description:\n        \"Whenever you start your turn with 0 hit points, you must make a special saving throw, called a death saving throw, to determine whether you creep closer to death or hang onto life. Unlike other saving throws, this one isn't tied to any ability score. You are in the hands of fate now, aided only by spells and features that improve your chances of succeeding on a saving throw. \\n\\nRoll a d20. If the roll is 10 or higher, you succeed. Otherwise, you fail. A success or failure has no effect by itself. On your third success, you become stable (see below). On your third failure, you die. The successes and failures don't need to be consecutive; keep track of both until you collect three of a kind. The number of both is reset to zero when you regain any hit points or become stable.\",\n    },\n    {\n      id: 76,\n      name: \"Temporary Hit Points\",\n      description:\n        \"Some spells and special abilities confer temporary hit points to a creature. Temporary hit points aren't actual hit points; they are a buffer against damage, a pool of hit points that protect you from injury. \\n\\nWhen you have temporary hit points and take damage, the temporary hit points are lost first, and any leftover damage carries over to your normal hit points. For example, if you have 5 temporary hit points and take 7 damage, you lose the temporary hit points and then take 2 damage. \\n\\nBecause temporary hit points are separate from your actual hit points, they can exceed your hit point maximum. A character can, therefore, be at full hit points and receive temporary hit points.\",\n    },\n    {\n      id: 77,\n      name: \"Saving Throws\",\n      description:\n        \"<p>A saving throw — also called a save — represents an attempt to resist a spell, a trap, a poison, a disease, or a similar threat. You don’t normally decide to make a saving throw; you are forced to make one because your character or monster is at risk of harm.</p>\\n<p>To make a saving throw, roll a d20 and add the appropriate ability modifier. For example, you use your Dexterity modifier for a Dexterity saving throw.</p>\\n<p>A saving throw can be modified by a situational bonus or penalty and can be affected by advantage and disadvantage, as determined by the DM.</p>\\n<p>Each class gives proficiency in at least two saving throws. The wizard, for example, is proficient in Intelligence saves. As with skill proficiencies, proficiency in a saving throw lets a character add his or her proficiency bonus to saving throws made using a particular ability score. Some monsters have saving throw proficiencies as well.</p>\\n<p>The Difficulty Class for a saving throw is determined by the effect that causes it. For example, the DC for a saving throw allowed by a spell is determined by the caster’s spellcasting ability and proficiency bonus.</p>\\n<p>The result of a successful or failed saving throw is also detailed in the effect that allows the save. Usually, a successful save means that a creature suffers no harm, or reduced harm, from an effect.</p>\",\n    },\n    {\n      id: 78,\n      name: \"Senses (Passive Checks)\",\n      description:\n        '<h3 id=\"PassiveChecks\">Passive Checks</h3>\\n<p>A passive check is a special kind of ability check that doesn\\'t involve any die rolls. Such a check can represent the average result for a task done repeatedly, such as searching for secret doors over and over again, or can be used when the DM wants to secretly determine whether the characters succeed at something without rolling dice, such as noticing a hidden monster.</p>\\n<p>Here\\'s how to determine a character\\'s total for a passive check:</p>\\n<p><strong>10 + all modifiers that normally apply to the check</strong></p>\\n<p>If the character has advantage on the check, add 5. For disadvantage, subtract 5. The game refers to a passive check total as a <strong>score</strong>.</p>\\n<p>For example, if a 1st-level character has a Wisdom of 15 and proficiency in Perception, he or she has a passive Wisdom (Perception) score of 14.</p>\\n<p>The rules on hiding in the “<a href=\"https://www.dndbeyond.com/compendium/rules/phb/using-ability-scores#Dexterity\">Dexterity</a>” section below rely on passive checks, as do the exploration rules in chapter 8, “<a href=\"https://www.dndbeyond.com/compendium/rules/phb/adventuring\">Adventuring</a><span class=\"No-Break\">.”</span></p>',\n    },\n    {\n      id: 79,\n      name: \"Initiative\",\n      description:\n        \"<p>Initiative determines the order of turns during combat. When combat starts, every participant makes a Dexterity check to determine their place in the initiative order. The DM makes one roll for an entire group of identical creatures, so each member of the group acts at the same time.</p>\\n<p>The DM ranks the combatants in order from the one with the highest Dexterity check total to the one with the lowest. This is the order (called the initiative order) in which they act during each round. The initiative order remains the same from round to round.</p>\\n<p>If a tie occurs, the DM decides the order among tied DM-controlled creatures, and the players decide the order among their tied characters. The DM can decide the order if the tie is between a monster and a player character. Optionally, the DM can have the tied characters and monsters each roll a d20 to determine the order, highest roll going first.</p>\",\n    },\n    {\n      id: 80,\n      name: \"Inspiration\",\n      description:\n        '<p>Inspiration is a rule the game master can use to reward you for playing your character in a way that’s true to his or her personality traits, ideal, bond, and flaw. By using inspiration, you can draw on your personality trait of compassion for the downtrodden to give you an edge in negotiating with the Beggar Prince. Or inspiration can let you call on your bond to the defense of your home village to push past the effect of a spell that has been laid on you.</p>\\n<h3 id=\"GainingInspiration\">Gaining Inspiration</h3>\\n<p>Your DM can choose to give you inspiration for a variety of reasons. Typically, DMs award it when you play out your personality traits, give in to the drawbacks presented by a flaw or bond, and otherwise portray your character in a compelling way. Your DM will tell you how you can earn inspiration in the game.</p>\\n<p>You either have inspiration or you don’t - you can’t stockpile multiple “inspirations” for later use.</p>\\n<h3 id=\"UsingInspiration\">Using Inspiration</h3>\\n<p>If you have inspiration, you can expend it when you make an attack roll, saving throw, or ability check. Spending your inspiration gives you advantage on that roll.</p>\\n<p>Additionally, if you have inspiration, you can reward another player for good roleplaying, clever thinking, or simply doing something exciting in the game. When another player character does something that really contributes to the story in a fun and interesting way, you can give up your inspiration to give that character inspiration.</p>',\n    },\n    {\n      id: 81,\n      name: \"Speed\",\n      description:\n        '<p>Every character has a speed, which is the distance in feet that the character can walk in 1 round. This number assumes short bursts of energetic movement in the midst of a life-threatening situation.</p>\\n<p>While climbing or swimming, each foot of movement costs 1 extra foot (2 extra feet in difficult terrain), unless a creature has a climbing or swimming speed. At the DM’s option, climbing a slippery vertical surface or one with few handholds requires a successful Strength (<span class=\"error\"></span>Athletics<span class=\"error\"></span>) check. Similarly, gaining any distance in rough water might require a successful Strength (<span class=\"error\"></span>Athletics<span class=\"error\"></span>) check.</p>\\n<p>Your Strength determines how far you can jump.</p>\\n<p><b>Long Jump.</b>&nbsp;When you make a long jump, you cover a number of feet up to your Strength score if you move at least 10 feet on foot immediately before the jump. When you make a standing long jump, you can leap only half that distance. Either way, each foot you clear on the jump costs a foot of movement.</p>\\n<p>This rule assumes that the height of your jump doesn\\'t matter, such as a jump across a stream or chasm. At your DM\\'s option, you must succeed on a DC 10 Strength (Athletics) check to clear a low obstacle (no taller than a quarter of the jump\\'s distance), such as a hedge or low wall. Otherwise, you hit it.</p>\\n<p>When you land in difficult terrain, you must succeed on a DC 10 Dexterity (Acrobatics) check to land on your feet. Otherwise, you land prone.</p>\\n<p><b>High Jump.</b>&nbsp;When you make a high jump, you leap into the air a number of feet equal to 3 + your Strength modifier (minimum of 0 feet) if you move at least 10 feet on foot immediately before the jump. When you make a standing high jump, you can jump only half that distance. Either way, each foot you clear on the jump costs a foot of movement. In some circumstances, your DM might allow you to make a Strength (Athletics) check to jump higher than you normally can.</p>\\n<p>You can extend your arms half your height above yourself during the jump. Thus, you can reach above you a distance equal to the height of the jump plus 1 1/2 times your height.</p>',\n    },\n    {\n      id: 82,\n      name: \"Senses\",\n      description:\n        \"<p><b>Passive Checks</b><br>A passive check is a special kind of ability check that doesn't involve any die rolls. Such a check can represent the average result for a task done repeatedly, such as searching for secret doors over and over again, or can be used when the DM wants to secretly determine whether the characters succeed at something without rolling dice, such as noticing a hidden monster.</p>\\n<p>Special senses are described below.</p>\\n<p><b>Blindsight</b><br>A monster with blindsight can perceive its surroundings without relying on sight, within a specific radius.</p>\\n<p>Creatures without eyes, such as grimlocks and gray oozes, typically have this special sense, as do creatures with echolocation or heightened senses, such as bats and true dragons.</p>\\n<p>If a monster is naturally blind, it has a parenthetical note to this effect, indicating that the radius of its blindsight defines the maximum range of its perception.</p>\\n<p><b>Darkvision</b><br>A monster with darkvision can see in the dark within a specific radius. The monster can see in dim light within the radius as if it were bright light, and in darkness as if it were dim light. The monster can't discern color in darkness, only shades of gray. Many creatures that live underground have this special sense.</p>\\n<p><b>Tremorsense</b><br>A monster with tremorsense can detect and pinpoint the origin of vibrations within a specific radius, provided that the monster and the source of the vibrations are in contact with the same ground or substance.</p>\\n<p>Tremorsense can't be used to detect flying or incorporeal creatures. Many burrowing creatures, such as ankhegs, have this special sense.</p>\\n<p><b>Truesight</b><br>A monster with truesight can, out to a specific range, see in normal and magical darkness, see invisible creatures and objects, automatically detect visual illusions and succeed on saving throws against them, and perceive the original form of a shapechanger or a creature that is transformed by magic. Furthermore, the monster can see into the Ethereal Plane within the same range.</p>\",\n    },\n    {\n      id: 83,\n      name: \"Half Cover\",\n      description:\n        \"A target with half cover has a +2 bonus to AC and Dexterity saving throws. A target has half cover if an obstacle blocks at least half of its body. The obstacle might be a low wall, a large piece of furniture, a narrow tree trunk, or a creature, whether that creature is an enemy or a friend.\",\n    },\n    {\n      id: 84,\n      name: \"Three-Quarters Cover\",\n      description:\n        \"A target with three-quarters cover has a +5 bonus to AC and Dexterity saving throws. A target has three-quarters cover if about three-quarters of it is covered by an obstacle. The obstacle might be a portcullis, an arrow slit, or a thick tree trunk.\",\n    },\n    {\n      id: 85,\n      name: \"Total Cover\",\n      description:\n        \"A target with total cover cannot be targeted directly by an attack or a spell, although some spells can reach such a target by including it in an area of effect. A target has total cover if it is completely concealed by an obstacle.\",\n    },\n    {\n      id: 86,\n      name: \"Difficult Terrain\",\n      description:\n        \"You move at half speed in difficult terrain--moving 1 foot in difficult terrain costs 2 feet of speed--so you can cover only half the normal distance in a minute, an hour, or a day.\",\n    },\n    {\n      id: 87,\n      name: \"Falling\",\n      description:\n        \"A fall from a great height is one of the most common hazards facing an adventurer. At the end of a fall, a creature takes 1d6 bludgeoning damage for every 10 feet it fell, to a maximum of 20d6. The creature lands prone, unless it avoids taking damage from the fall.\",\n    },\n    {\n      id: 88,\n      name: \"Suffocating\",\n      description:\n        \"A creature can hold its breath for a number of minutes equal to 1 + its Constitution modifier (minimum of 30 seconds). When a creature runs out of breath or is choking, it can survive for a number of rounds equal to its Constitution modifier (minimum of 1 round). At the start of its next turn, it drops to 0 hit points and is dying, and it cannot regain hit points or be stabilized until it can breathe again.\",\n    },\n    {\n      id: 89,\n      name: \"Lightly Obscured\",\n      description:\n        \"In a lightly obscured area, such as dim light, patchy fog, or moderate foliage, creatures have disadvantage on Wisdom (Perception) checks that rely on sight.\",\n    },\n    {\n      id: 90,\n      name: \"Heavily Obscured\",\n      description:\n        \"A heavily obscured area--such as darkness, opaque fog, or dense foliage--blocks vision entirely. A creature effectively suffers from the blinded condition when trying to see something in that area.\",\n    },\n    {\n      id: 91,\n      name: \"Climbing Swimming Crawling\",\n      description:\n        \"Each foot of movement costs 1 extra foot (2 extra feet in difficult terrain) when you’re climbing, swimming, or crawling. You ignore this extra cost if you have a climbing speed and use it to climb or a swimming speed and use it to swim. At the DM’s option, climbing a slippery vertical surface or one with few handholds requires a successful Strength (Athletics) check. Similarly, gaining any distance in rough water might require a successful Strength (Athletics) check.\",\n    },\n    {\n      id: 92,\n      name: \"Surprise\",\n      description:\n        \"If you are surprised, you cannot move or take an action on your first turn of the combat, and you cannot take a reaction until that turn ends. A member of a group can be surprised even if the other members are not.\",\n    },\n    {\n      id: 93,\n      name: \"Flying\",\n      description:\n        \"Flying creatures enjoy many benefits of mobility, but they must also deal with the danger of falling. If a flying creature is knocked prone, has its speed reduced to 0, or is otherwise deprived of the ability to move, the creature falls, unless it has the ability to hover or it is being held aloft by magic, such as by the fly spell.\",\n    },\n    {\n      id: 94,\n      name: \"Underwater\",\n      description:\n        \"When making a melee weapon attack, a creature that does not have a swimming speed (either natural or granted by magic) has disadvantage on the attack roll unless the weapon is a dagger, javelin, shortsword, spear, or trident. A ranged weapon attack automatically misses a target beyond the weapon's normal range. Even against a target within normal range, the attack roll has disadvantage unless the weapon is a crossbow, a net, or a weapon that is thrown like a javelin (including a spear, trident, or dart). Creatures and objects that are fully immersed in water have resistance to fire damage.\",\n    },\n    {\n      id: 96,\n      name: \"Advantage\",\n      description:\n        \"Sometimes a special ability or spell tells you that you have advantage or disadvantage on an ability check, a saving throw, or an attack roll. When that happens, you roll a second d20 when you make the roll. Use the higher of the two rolls if you have advantage.\",\n    },\n    {\n      id: 98,\n      name: \"Disadvantage\",\n      description:\n        \"Sometimes a special ability or spell tells you that you have advantage or disadvantage on an ability check, a saving throw, or an attack roll. When that happens, you roll a second d20 when you make the roll. Use the lower roll if you have disadvantage.\",\n    },\n  ],\n  additionalLevelTypes: [\n    { id: 1, name: \"Additional Targets\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 3, name: \"Extended Duration\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 9, name: \"Extended Area\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    {\n      id: 11,\n      name: \"Additional Creatures\",\n      prerequisite: null,\n      description: \"\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    { id: 12, name: \"Special\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 15, name: \"Additional Points\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 16, name: \"Additional Count\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 17, name: \"Extended Range\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n  ],\n  weaponProperties: [\n    {\n      id: 1,\n      name: \"Ammunition\",\n      prerequisite: null,\n      description:\n        'You can use a weapon that has the ammunition property to make a ranged attack only if you have ammunition to fire from the weapon. Each time you attack with the weapon, you expend one piece of ammunition. Drawing the ammunition from a quiver, case, or other container is part of the attack (you need a free hand to load a one-handed weapon). At the end of the battle, you can recover half your expended ammunition by taking a minute to search the battlefield. \\nIf you use a weapon that has the ammunition property to make a melee attack, you treat the weapon as an improvised weapon (see \"Improvised Weapons\" later in the section). A sling must be loaded to deal any damage when used in this way. ',\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 2,\n      name: \"Finesse\",\n      prerequisite: null,\n      description:\n        \"When making an attack with a finesse weapon, you use your choice of your Strength or Dexterity modifier for the attack and damage rolls. You must use the same modifier for both rolls. \",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 3,\n      name: \"Heavy\",\n      prerequisite: null,\n      description:\n        \"Creatures that are Small or Tiny have disadvantage on attack rolls with heavy weapons. A heavy weapon's size and bulk make it too large for a Small or Tiny creature to use effectively.\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 4,\n      name: \"Light\",\n      prerequisite: null,\n      description:\n        \"A light weapon is small and easy to handle, making it ideal for use when fighting with two weapons. \",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 5,\n      name: \"Loading\",\n      prerequisite: null,\n      description:\n        \"Because of the time required to load this weapon, you can fire only one piece of ammunition from it when you use an action, bonus action, or reaction to fire it, regardless of the number of attacks you can normally make. \",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 7,\n      name: \"Range\",\n      prerequisite: null,\n      description:\n        \"A weapon that can be used to make a ranged attack has a range in parentheses after the ammunition or thrown property. The range lists two numbers. The first is the weapon's normal range in feet, and the second indicates the weapon's long range. When attacking a target beyond normal range, you have disadvantage on the attack roll. You can't attack a target beyond the weapon's long range. \",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 8,\n      name: \"Reach\",\n      prerequisite: null,\n      description:\n        \"This weapon adds 5 feet to your reach when you attack with it, as well as when determining your reach for opportunity attacks with it. \",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 9,\n      name: \"Special\",\n      prerequisite: null,\n      description:\n        \"A weapon with the special property has unusual rules governing its use, explained in the weapon's description .\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 10,\n      name: \"Thrown\",\n      prerequisite: null,\n      description:\n        \"If a weapon has the thrown property, you can throw the weapon to make a ranged attack. If the weapon is a melee weapon, you use the same ability modifier for that attack roll and damage roll that you would use for a melee attack with the weapon. For example, if you throw a handaxe, you use your Strength, but if you throw a dagger, you can use either your Strength or your Dexterity, since the dagger has the finesse property. \",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 11,\n      name: \"Two-Handed\",\n      prerequisite: null,\n      description: \"This weapon requires two hands when you attack with it. \",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 12,\n      name: \"Versatile\",\n      prerequisite: null,\n      description:\n        \"This weapon can be used with one or two hands. A damage value in parentheses appears with the property--the damage when the weapon is used with two hands to make a melee attack.\\n\\n\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 13,\n      name: \"Ammunition (Firearms)\",\n      prerequisite: null,\n      description:\n        \"The ammunition of a firearm is destroyed upon use. Renaissance and modern firearms use bullets. Futuristic firearms are powered by a special type of ammunition called energy cells. An energy cell contains enough power for all the shots its firearm can make.\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 14,\n      name: \"Burst Fire\",\n      prerequisite: null,\n      description:\n        \"A weapon that has the burst fire property can make a normal single-target attack, or it can spray a 10-foot-cube area within normal range with shots. Each creature in the area must succeed on a DC 15 Dexterity saving throw or take the weapon’s normal damage. This action uses ten pieces of ammunition.\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 15,\n      name: \"Reload\",\n      prerequisite: null,\n      description:\n        \"A limited number of shots can be made with a weapon that has the reload property. A character must then reload it using an action or a bonus action (the character’s choice).\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    { id: 16, name: \"Misfire\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 17, name: \"Explosive\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n  ],\n  aoeTypes: [\n    {\n      id: 1,\n      name: \"Cone\",\n      prerequisite: null,\n      description:\n        \"A cone extends in a direction you choose from its point of origin. A cone's width at a given point along its length is equal to that point's distance from the point of origin. A cone's area of effect specifies its maximum length. \\nA cone's point of origin is not included in the cone's area of effect, unless you decide otherwise.\\n\\n\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 2,\n      name: \"Cube\",\n      prerequisite: null,\n      description:\n        \"You select a cube's point of origin, which lies anywhere on a face of the cubic effect. The cube's size is expressed as the length of each side. \\nA cube's point of origin is not included in the cube's area of effect, unless you decide otherwise.\\n\\n\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 3,\n      name: \"Cylinder\",\n      prerequisite: null,\n      description:\n        \"A cylinder's point of origin is the center of a circle of a particular radius, as given in the spell description. The circle must either be on the ground or at the height of the spell effect. The energy in a cylinder expands in straight lines from the point of origin to the perimeter of the circle, forming the base of the cylinder. The spell's effect then shoots up from the base or down from the top, to a distance equal to the height of the cylinder. \\nA cylinder's point of origin is included in the cylinder's area of effect.\\n\\n\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 4,\n      name: \"Line\",\n      prerequisite: null,\n      description:\n        \"A line extends from its point of origin in a straight path up to its length and covers an area defined by its width. \\nA line's point of origin is not included in the line's area of effect, unless you decide otherwise.\\n\\n\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    {\n      id: 5,\n      name: \"Sphere\",\n      prerequisite: null,\n      description:\n        \"You select a sphere's point of origin, and the sphere extends outward from that point. The sphere's size is expressed as a radius in feet that extends from the point. \\nA sphere's point of origin is included in the sphere's area of effect.\\n\\n\",\n      requiredLevel: null,\n      displayOrder: null,\n    },\n    { id: 9, name: \"Square\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n    { id: 13, name: \"Square Feet\", prerequisite: null, description: \"\", requiredLevel: null, displayOrder: null },\n  ],\n  lifestyles: [\n    {\n      id: 1,\n      name: \"Wretched\",\n      description:\n        \"You live in inhumane conditions. With no place to call home, you shelter wherever you can, sneaking into barns, huddling in old crates, and relying on the good graces of people better off than you. A wretched lifestyle presents abundant dangers. Violence, disease, and hunger follow you wherever you go. Other wretched people covet your armor, weapons, and adventuring gear, which represent a fortune by their standards. You are beneath the notice of most people. \",\n      cost: \"-\",\n    },\n    {\n      id: 3,\n      name: \"Squalid\",\n      description:\n        \"You live in a leaky stable, a mud-floored hut just outside town, or a vermin-infested boarding house in the worst part of town. You have shelter from the elements, but you live in a desperate and often violent environment, in places rife with disease, hunger, and misfortune. You are beneath the notice of most people, and you have few legal protections. Most people at this lifestyle level have suffered some terrible setback. They might be disturbed, marked as exiles, or suffer from disease. \",\n      cost: \"1SP\",\n    },\n    {\n      id: 4,\n      name: \"Poor\",\n      description:\n        \"A poor lifestyle means going without the comforts available in a stable community. Simple food and lodgings, threadbare clothing, and unpredictable conditions result in a sufficient, though probably unpleasant, experience. Your accommodations might be a room in a flophouse or in the common room above a tavern. You benefit from some legal protections, but you still have to contend with violence, crime, and disease. People at this lifestyle level tend to be unskilled laborers, costermongers, peddlers, thieves, mercenaries, and other disreputable types. \",\n      cost: \"2SP\",\n    },\n    {\n      id: 5,\n      name: \"Modest\",\n      description:\n        \"A modest lifestyle keeps you out of the slums and ensures that you can maintain your equipment. You live in an older part of town, renting a room in a boarding house, inn, or temple. You don't go hungry or thirsty, and your living conditions are clean, if simple. Ordinary people living modest lifestyles include soldiers with families, laborers, students, priests, hedge wizards, and the like.\",\n      cost: \"1GP\",\n    },\n    {\n      id: 6,\n      name: \"Comfortable\",\n      description:\n        \"Choosing a comfortable lifestyle means that you can afford nicer clothing and can easily maintain your equipment. You live in a small cottage in a middle-class neighborhood or in a private room at a fine inn. You associate with merchants, skilled tradespeople, and military officers. \",\n      cost: \"2GP\",\n    },\n    {\n      id: 7,\n      name: \"Wealthy\",\n      description:\n        \"Choosing a wealthy lifestyle means living a life of luxury, though you might not have achieved the social status associated with the old money of nobility or royalty. You live a lifestyle comparable to that of a highly successful merchant, a favored servant of the royalty, or the owner of a few small businesses. You have respectable lodgings, usually a spacious home in a good part of town or a comfortable suite at a fine inn. You likely have a small staff of servants. \",\n      cost: \"4GP\",\n    },\n    {\n      id: 8,\n      name: \"Aristocratic\",\n      description:\n        \"You live a life of plenty and comfort. You move in circles populated by the most powerful people in the community. You have excellent lodgings, perhaps a townhouse in the nicest part of town or rooms in the finest inn. You dine at the best restaurants, retain the most skilled and fashionable tailor, and have servants attending to your every need. You receive invitations to the social gatherings of the rich and powerful, and spend evenings in the company of politicians, guild leaders, high priests, and nobility. You must also contend with the highest levels of deceit and treachery. The wealthier you are, the greater the chance you will be drawn into political intrigue as a pawn or participant.\\n\\n\",\n      cost: \"10GP minimum\",\n    },\n  ],\n  conditions: [\n    {\n      definition: {\n        id: 1,\n        entityTypeId: 1737492944,\n        name: \"Blinded\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>A blinded creature can't see and automatically fails any ability check that requires sight.</li>\\n<li>Attack rolls against the creature have advantage, and the creature's attack rolls have disadvantage.</li>\\n</ul>\",\n        slug: \"blinded\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 2,\n        entityTypeId: 1737492944,\n        name: \"Charmed\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>A charmed creature can't attack the charmer or target the charmer with harmful abilities or magical effects.</li>\\n<li>The charmer has advantage on any ability check to interact socially with the creature.</li>\\n</ul>\",\n        slug: \"charmed\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 3,\n        entityTypeId: 1737492944,\n        name: \"Deafened\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>A deafened creature can't hear and automatically fails any ability check that requires hearing.</li>\\n</ul>\",\n        slug: \"deafened\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 4,\n        entityTypeId: 1737492944,\n        name: \"Exhaustion\",\n        type: 2,\n        description:\n          '<p>Some special abilities and environmental hazards, such as starvation and the long-term effects of freezing or scorching temperatures, can lead to a special condition called exhaustion. Exhaustion is measured in six levels. An effect can give a creature one or more levels of exhaustion, as specified in the effect\\'s description.</p>\\n<table class=\"exhaustion-levels\">\\n<thead>\\n<tr>\\n<th class=\"exhaustionlevel\">Level</th>\\n<th>Effect</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>1</td>\\n<td style=\"text-align: left\">Disadvantage on ability checks</td>\\n</tr>\\n<tr>\\n<td>2</td>\\n<td style=\"text-align: left\">Speed halved</td>\\n</tr>\\n<tr>\\n<td>3</td>\\n<td style=\"text-align: left\">Disadvantage on attack rolls and saving throws</td>\\n</tr>\\n<tr>\\n<td>4</td>\\n<td style=\"text-align: left\">Hit point maximum halved</td>\\n</tr>\\n<tr>\\n<td>5</td>\\n<td style=\"text-align: left\">Speed reduced to 0</td>\\n</tr>\\n<tr>\\n<td>6</td>\\n<td style=\"text-align: left\">Death</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>If an already exhausted creature suffers another effect that causes exhaustion, its current level of exhaustion increases by the amount specified in the effect\\'s description.</p>\\n<p>A creature suffers the effect of its current level of exhaustion as well as all lower levels. For example, a creature suffering level 2 exhaustion has its speed halved and has disadvantage on ability checks.</p>\\n<p>An effect that removes exhaustion reduces its level as specified in the effect\\'s description, with all exhaustion effects ending if a creature\\'s exhaustion level is reduced below 1. <br> Finishing a long rest reduces a creature\\'s exhaustion level by 1, provided that the creature has also ingested some food and drink.</p>',\n        slug: \"exhaustion\",\n        levels: [\n          { definition: { id: 1, entityTypeId: 2064013312, level: 1, effect: \"Disadvantage on ability checks\" } },\n          { definition: { id: 2, entityTypeId: 2064013312, level: 2, effect: \"Speed halved\" } },\n          {\n            definition: {\n              id: 3,\n              entityTypeId: 2064013312,\n              level: 3,\n              effect: \"Disadvantage on attack rolls and saving throws\",\n            },\n          },\n          { definition: { id: 4, entityTypeId: 2064013312, level: 4, effect: \"Hit point maximum halved\" } },\n          { definition: { id: 5, entityTypeId: 2064013312, level: 5, effect: \"Speed reduced to 0\" } },\n          { definition: { id: 6, entityTypeId: 2064013312, level: 6, effect: \"Death\" } },\n        ],\n      },\n    },\n    {\n      definition: {\n        id: 5,\n        entityTypeId: 1737492944,\n        name: \"Frightened\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>A frightened creature has disadvantage on ability checks and attack rolls while the source of its fear is within line of sight.</li>\\n<li>The creature can't willingly move closer to the source of its fear.</li>\\n</ul>\",\n        slug: \"frightened\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 6,\n        entityTypeId: 1737492944,\n        name: \"Grappled\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>A grappled creature's speed becomes 0, and it can't benefit from any bonus to its speed.</li>\\n<li>The condition ends if the grappler is incapacitated (see the condition).</li>\\n<li>The condition also ends if an effect removes the grappled creature from the reach of the grappler or grappling effect, such as when a creature is hurled away by the <strong>thunder-wave</strong> spell.</li>\\n</ul>\",\n        slug: \"grappled\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 7,\n        entityTypeId: 1737492944,\n        name: \"Incapacitated\",\n        type: 1,\n        description: \"<ul>\\n<li>An incapacitated creature can't take actions or reactions.</li>\\n</ul>\",\n        slug: \"incapacitated\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 8,\n        entityTypeId: 1737492944,\n        name: \"Invisible\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>An invisible creature is impossible to see without the aid of magic or a special sense. For the purpose of hiding, the creature is heavily obscured. The creature's location can be detected by any noise it makes or any tracks it leaves.</li>\\n<li>Attack rolls against the creature have disadvantage, and the creature's attack rolls have advantage.</li>\\n</ul>\",\n        slug: \"invisible\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 9,\n        entityTypeId: 1737492944,\n        name: \"Paralyzed\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>A paralyzed creature is incapacitated (see the condition) and can't move or speak.</li>\\n<li>The creature automatically fails Strength and Dexterity saving throws. Attack rolls against the creature have advantage.</li>\\n<li>Any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature.</li>\\n</ul>\",\n        slug: \"paralyzed\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 10,\n        entityTypeId: 1737492944,\n        name: \"Petrified\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>A petrified creature is transformed, along with any nonmagical object it is wearing or carrying, into a solid inanimate substance (usually stone). Its weight increases by a factor of ten, and it ceases aging.</li>\\n<li>The creature is incapacitated (see the condition), can't move or speak, and is unaware of its surroundings.</li>\\n<li>Attack rolls against the creature have advantage.</li>\\n<li>The creature automatically fails Strength and Dexterity saving throws.</li>\\n<li>The creature has resistance to all damage.</li>\\n<li>The creature is immune to poison and disease, although a poison or disease already in its system is suspended, not neutralized.</li>\\n</ul>\",\n        slug: \"petrified\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 11,\n        entityTypeId: 1737492944,\n        name: \"Poisoned\",\n        type: 1,\n        description: \"<ul>\\n<li>A poisoned creature has disadvantage on attack rolls and ability checks.</li>\\n</ul>\",\n        slug: \"poisoned\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 12,\n        entityTypeId: 1737492944,\n        name: \"Prone\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>A prone creature's only movement option is to crawl, unless it stands up and thereby ends the condition.</li>\\n<li>The creature has disadvantage on attack rolls.</li>\\n<li>An attack roll against the creature has advantage if the attacker is within 5 feet of the creature. Otherwise, the attack roll has disadvantage.</li>\\n</ul>\",\n        slug: \"prone\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 13,\n        entityTypeId: 1737492944,\n        name: \"Restrained\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>A restrained creature's speed becomes 0, and it can't benefit from any bonus to its speed.</li>\\n<li>Attack rolls against the creature have advantage, and the creature's attack rolls have disadvantage.</li>\\n<li>The creature has disadvantage on Dexterity saving throws.</li>\\n</ul>\",\n        slug: \"restrained\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 14,\n        entityTypeId: 1737492944,\n        name: \"Stunned\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>A stunned creature is incapacitated (see the condition), can't move, and can speak only falteringly.</li>\\n<li>The creature automatically fails Strength and Dexterity saving throws.</li>\\n<li>Attack rolls against the creature have advantage.</li>\\n</ul>\",\n        slug: \"stunned\",\n        levels: [],\n      },\n    },\n    {\n      definition: {\n        id: 15,\n        entityTypeId: 1737492944,\n        name: \"Unconscious\",\n        type: 1,\n        description:\n          \"<ul>\\n<li>An unconscious creature is incapacitated (see the condition), can't move or speak, and is unaware of its surroundings</li>\\n<li>The creature drops whatever it's holding and falls prone.</li>\\n<li>The creature automatically fails Strength and Dexterity saving throws.</li>\\n<li>Attack rolls against the creature have advantage.</li>\\n<li>Any attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature.</li>\\n</ul>\",\n        slug: \"unconscious\",\n        levels: [],\n      },\n    },\n  ],\n  damageAdjustments: [\n    { id: 1, name: \"Bludgeoning\", type: 1, slug: \"bludgeoning\", isMulti: false, displayOrder: 2 },\n    { id: 2, name: \"Piercing\", type: 1, slug: \"piercing\", isMulti: false, displayOrder: 8 },\n    { id: 3, name: \"Slashing\", type: 1, slug: \"slashing\", isMulti: false, displayOrder: 12 },\n    { id: 4, name: \"Lightning\", type: 1, slug: \"lightning\", isMulti: false, displayOrder: 6 },\n    { id: 5, name: \"Thunder\", type: 1, slug: \"thunder\", isMulti: false, displayOrder: 13 },\n    { id: 6, name: \"Poison\", type: 1, slug: \"poison\", isMulti: false, displayOrder: 9 },\n    { id: 7, name: \"Cold\", type: 1, slug: \"cold\", isMulti: false, displayOrder: 3 },\n    { id: 8, name: \"Radiant\", type: 1, slug: \"radiant\", isMulti: false, displayOrder: 11 },\n    { id: 9, name: \"Fire\", type: 1, slug: \"fire\", isMulti: false, displayOrder: 4 },\n    { id: 10, name: \"Necrotic\", type: 1, slug: \"necrotic\", isMulti: false, displayOrder: 7 },\n    { id: 11, name: \"Acid\", type: 1, slug: \"acid\", isMulti: false, displayOrder: 1 },\n    { id: 12, name: \"Psychic\", type: 1, slug: \"psychic\", isMulti: false, displayOrder: 10 },\n    {\n      id: 13,\n      name: \"Bludgeoning, Piercing, and Slashing from Nonmagical Attacks\",\n      type: 1,\n      slug: \"bludgeoning-piercing-and-slashing-from-nonmagical-attacks\",\n      isMulti: true,\n      displayOrder: 14,\n    },\n    {\n      id: 14,\n      name: \"Bludgeoning, Piercing, and Slashing from Nonmagical Attacks that aren't Silvered\",\n      type: 1,\n      slug: \"bludgeoning-piercing-and-slashing-from-nonmagical-attacks-that-arent-silvered\",\n      isMulti: true,\n      displayOrder: 15,\n    },\n    {\n      id: 15,\n      name: \"Bludgeoning, Piercing, and Slashing from Nonmagical Attacks that aren't Adamantine\",\n      type: 1,\n      slug: \"bludgeoning-piercing-and-slashing-from-nonmagical-attacks-that-arent-adamantine\",\n      isMulti: true,\n      displayOrder: 16,\n    },\n    {\n      id: 16,\n      name: \"Piercing and Slashing from Nonmagical Attacks that aren't Adamantine\",\n      type: 1,\n      slug: \"piercing-and-slashing-from-nonmagical-attacks-that-arent-adamantine\",\n      isMulti: true,\n      displayOrder: 17,\n    },\n    { id: 17, name: \"Bludgeoning\", type: 2, slug: \"bludgeoning\", isMulti: false, displayOrder: 2 },\n    { id: 18, name: \"Piercing\", type: 2, slug: \"piercing\", isMulti: false, displayOrder: 8 },\n    { id: 19, name: \"Slashing\", type: 2, slug: \"slashing\", isMulti: false, displayOrder: 12 },\n    { id: 20, name: \"Lightning\", type: 2, slug: \"lightning\", isMulti: false, displayOrder: 6 },\n    { id: 21, name: \"Thunder\", type: 2, slug: \"thunder\", isMulti: false, displayOrder: 13 },\n    { id: 22, name: \"Poison\", type: 2, slug: \"poison\", isMulti: false, displayOrder: 9 },\n    { id: 23, name: \"Cold\", type: 2, slug: \"cold\", isMulti: false, displayOrder: 3 },\n    { id: 24, name: \"Radiant\", type: 2, slug: \"radiant\", isMulti: false, displayOrder: 11 },\n    { id: 25, name: \"Fire\", type: 2, slug: \"fire\", isMulti: false, displayOrder: 4 },\n    { id: 26, name: \"Necrotic\", type: 2, slug: \"necrotic\", isMulti: false, displayOrder: 7 },\n    { id: 27, name: \"Acid\", type: 2, slug: \"acid\", isMulti: false, displayOrder: 1 },\n    { id: 28, name: \"Psychic\", type: 2, slug: \"psychic\", isMulti: false, displayOrder: 10 },\n    {\n      id: 29,\n      name: \"Bludgeoning, Piercing, and Slashing from Nonmagical Attacks\",\n      type: 2,\n      slug: \"bludgeoning-piercing-and-slashing-from-nonmagical-attacks\",\n      isMulti: true,\n      displayOrder: 14,\n    },\n    {\n      id: 30,\n      name: \"Bludgeoning, Piercing, and Slashing from Nonmagical Attacks that aren't Silvered\",\n      type: 2,\n      slug: \"bludgeoning-piercing-and-slashing-from-nonmagical\",\n      isMulti: true,\n      displayOrder: 16,\n    },\n    {\n      id: 31,\n      name: \"Bludgeoning, Piercing, and Slashing from Nonmagical Attacks that aren't Adamantine\",\n      type: 2,\n      slug: \"bludgeoning-piercing-and-slashing-from-nonmagical\",\n      isMulti: true,\n      displayOrder: 15,\n    },\n    {\n      id: 32,\n      name: \"Piercing and Slashing from Nonmagical Attacks that aren't Adamantine\",\n      type: 2,\n      slug: \"piercing-and-slashing-from-nonmagical-attacks-that\",\n      isMulti: true,\n      displayOrder: 17,\n    },\n    { id: 33, name: \"Bludgeoning\", type: 3, slug: \"bludgeoning\", isMulti: false, displayOrder: 2 },\n    { id: 34, name: \"Piercing\", type: 3, slug: \"piercing\", isMulti: false, displayOrder: 8 },\n    { id: 35, name: \"Slashing\", type: 3, slug: \"slashing\", isMulti: false, displayOrder: 12 },\n    { id: 36, name: \"Lightning\", type: 3, slug: \"lightning\", isMulti: false, displayOrder: 6 },\n    { id: 37, name: \"Thunder\", type: 3, slug: \"thunder\", isMulti: false, displayOrder: 13 },\n    { id: 38, name: \"Poison\", type: 3, slug: \"poison\", isMulti: false, displayOrder: 9 },\n    { id: 39, name: \"Cold\", type: 3, slug: \"cold\", isMulti: false, displayOrder: 3 },\n    { id: 40, name: \"Radiant\", type: 3, slug: \"radiant\", isMulti: false, displayOrder: 11 },\n    { id: 41, name: \"Fire\", type: 3, slug: \"fire\", isMulti: false, displayOrder: 4 },\n    { id: 42, name: \"Necrotic\", type: 3, slug: \"necrotic\", isMulti: false, displayOrder: 7 },\n    { id: 43, name: \"Acid\", type: 3, slug: \"acid\", isMulti: false, displayOrder: 1 },\n    { id: 44, name: \"Psychic\", type: 3, slug: \"psychic\", isMulti: false, displayOrder: 10 },\n    {\n      id: 45,\n      name: \"Piercing from Magic Weapons Wielded by Good Creatures\",\n      type: 3,\n      slug: \"piercing-from-magic-weapons-wielded-by-good\",\n      isMulti: true,\n      displayOrder: 14,\n    },\n    {\n      id: 46,\n      name: \"Bludgeoning, Piercing, and Slashing from Magic Weapons\",\n      type: 1,\n      slug: \"bludgeoning-piercing-and-slashing-from-magic-weapons\",\n      isMulti: true,\n      displayOrder: 18,\n    },\n    { id: 47, name: \"Force\", type: 1, slug: \"force\", isMulti: false, displayOrder: 5 },\n    { id: 48, name: \"Force\", type: 2, slug: \"force\", isMulti: false, displayOrder: 5 },\n    { id: 49, name: \"Force\", type: 3, slug: \"force\", isMulti: false, displayOrder: 5 },\n    {\n      id: 50,\n      name: \"Bludgeoning, Piercing, and Slashing from Nonmagical Attacks while in Dim Light or Darkness\",\n      type: 1,\n      slug: \"bludgeoning-piercing-and-slashing-from-nonmagical-attacks-while-in-dim-light-or-darkness\",\n      isMulti: true,\n      displayOrder: 19,\n    },\n    { id: 51, name: \"Ranged Attacks\", type: 1, slug: \"ranged-attacks\", isMulti: false, displayOrder: 20 },\n    { id: 52, name: \"Damage Dealt By Traps\", type: 1, slug: \"damage-dealt-by-traps\", isMulti: false, displayOrder: 21 },\n    { id: 53, name: \"All\", type: 1, slug: \"all\", isMulti: true, displayOrder: 22 },\n    {\n      id: 54,\n      name: \"Bludgeoning from non magical attacks\",\n      type: 1,\n      slug: \"bludgeoning-from-non-magical-attacks\",\n      isMulti: false,\n      displayOrder: 23,\n    },\n    {\n      id: 55,\n      name: \"Bludgeoning, Piercing, and Slashing from Metal Weapons\",\n      type: 2,\n      slug: \"slashing-from-metal-weapons\",\n      isMulti: true,\n      displayOrder: 18,\n    },\n    {\n      id: 56,\n      name: \"Bludgeoning, Piercing, and Slashing while in Dim Light or Darkness\",\n      type: 1,\n      slug: \"bludgeoning-piercing-and-slashing-while-in-dim-or-light-darkness\",\n      isMulti: true,\n      displayOrder: 24,\n    },\n    { id: 57, name: \"Damage from Spells\", type: 1, slug: \"damage-from-spells\", isMulti: false, displayOrder: 25 },\n    {\n      id: 60,\n      name: \"Bludgeoning, Piercing, and Slashing from Nonmagical Attacks that aren't Adamantine or Silvered\",\n      type: 2,\n      slug: \"bludgeoning-piercing-and-slashing-from-nonmagical-attacks-that-arent-adamantine-or-silvered\",\n      isMulti: true,\n      displayOrder: 19,\n    },\n    {\n      id: 61,\n      name: \"Nonmagical Bludgeoning, Piercing, and Slashing (from Stoneskin)\",\n      type: 1,\n      slug: \"nonmagical-bludgeoning-piercing-and-slashing-from-stoneskin\",\n      isMulti: true,\n      displayOrder: 27,\n    },\n    {\n      id: 62,\n      name: \"All damage but Force, Radiant, and Psychic\",\n      type: 1,\n      slug: \"all-damage-but-force-radiant-and-psychic\",\n      isMulti: true,\n      displayOrder: 29,\n    },\n    {\n      id: 63,\n      name: \"Petrified (Aberrant Armor Only)\",\n      type: 2,\n      slug: \"petrified-aberrant-armor-only\",\n      isMulti: false,\n      displayOrder: 28,\n    },\n    {\n      id: 64,\n      name: \"Slashing from a Vorpal Sword\",\n      type: 3,\n      slug: \"slashing-from-a-vorpal-sword\",\n      isMulti: false,\n      displayOrder: 30,\n    },\n    {\n      id: 65,\n      name: \"Damage of the type matching the animated breath's form (acid, cold, fire, lightning, or poison)\",\n      type: 1,\n      slug: \"damage-of-the-type-matching-the-animated-breaths-form-acid-cold-fire-lightning-or-poison\",\n      isMulti: false,\n      displayOrder: 31,\n    },\n    {\n      id: 66,\n      name: \"Psychic (granted by Ruidium Armor)\",\n      type: 1,\n      slug: \"psychic-granted-by-ruidium-armor\",\n      isMulti: false,\n      displayOrder: 32,\n    },\n    {\n      id: 67,\n      name: \"Bludgeoning, Piercing, and Slashing that is Nonmagical\",\n      type: 2,\n      slug: \"bludgeoning-piercing-and-slashing-that-is-nonmagical\",\n      isMulti: true,\n      displayOrder: 29,\n    },\n    {\n      id: 68,\n      name: \"One of the following: acid, cold, fire, lightning, or poison\",\n      type: 1,\n      slug: \"one-of-the-following-acid-cold-fire-lightning-or\",\n      isMulti: false,\n      displayOrder: 33,\n    },\n    {\n      id: 69,\n      name: \"Lightning (granted by darksteel greataxe)\",\n      type: 1,\n      slug: \"lightning-granted-by-darksteel-greataxe\",\n      isMulti: false,\n      displayOrder: 34,\n    },\n    {\n      id: 70,\n      name: \"Slashing and Piercing from Nonmagical Attacks\",\n      type: 1,\n      slug: \"slashing-and-piercing-from-nonmagical-attacks\",\n      isMulti: true,\n      displayOrder: 17,\n    },\n    {\n      id: 83,\n      name: \"Bludgeoning, Piercing, and Slashing from Mundane Attacks\",\n      type: 1,\n      slug: \"bludgeoning-piercing-and-slashing-from-mundane\",\n      isMulti: true,\n      displayOrder: 36,\n    },\n    {\n      id: 84,\n      name: \"Bludgeoning damage from falling\",\n      type: 2,\n      slug: \"bludgeoning-damage-from-falling\",\n      isMulti: false,\n      displayOrder: 37,\n    },\n    {\n      id: 85,\n      name: \"Bludgeoning, Piercing, and Slashing from Mundane Attacks\",\n      type: 2,\n      slug: \"bludgeoning-piercing-and-slashing-from-mundane\",\n      isMulti: true,\n      displayOrder: 36,\n    },\n  ],\n  statModifiers: [\n    { value: 1, modifier: -5 },\n    { value: 2, modifier: -4 },\n    { value: 3, modifier: -4 },\n    { value: 4, modifier: -3 },\n    { value: 5, modifier: -3 },\n    { value: 6, modifier: -2 },\n    { value: 7, modifier: -2 },\n    { value: 8, modifier: -1 },\n    { value: 9, modifier: -1 },\n    { value: 10, modifier: 0 },\n    { value: 11, modifier: 0 },\n    { value: 12, modifier: 1 },\n    { value: 13, modifier: 1 },\n    { value: 14, modifier: 2 },\n    { value: 15, modifier: 2 },\n    { value: 16, modifier: 3 },\n    { value: 17, modifier: 3 },\n    { value: 18, modifier: 4 },\n    { value: 19, modifier: 4 },\n    { value: 20, modifier: 5 },\n    { value: 21, modifier: 5 },\n    { value: 22, modifier: 6 },\n    { value: 23, modifier: 6 },\n    { value: 24, modifier: 7 },\n    { value: 25, modifier: 7 },\n    { value: 26, modifier: 8 },\n    { value: 27, modifier: 8 },\n    { value: 28, modifier: 9 },\n    { value: 29, modifier: 9 },\n    { value: 30, modifier: 10 },\n  ],\n  alignments: [\n    {\n      id: 1,\n      name: \"Lawful Good\",\n      description:\n        \"Lawful good (LG) creatures can be counted on to do the right thing as expected by society. Gold dragons, paladins, and most dwarves are lawful good.\",\n      availableToCharacter: true,\n    },\n    {\n      id: 2,\n      name: \"Neutral Good\",\n      description:\n        \"Neutral good (NG) folk do the best they can to help others according to their needs. Many celestials, some cloud giants, and most gnomes are neutral good.\",\n      availableToCharacter: true,\n    },\n    {\n      id: 3,\n      name: \"Chaotic Good\",\n      description:\n        \"Chaotic good (CG) creatures act as their conscience directs, with little regard for what others expect. Copper dragons, many elves, and unicorns are chaotic good.\",\n      availableToCharacter: true,\n    },\n    {\n      id: 4,\n      name: \"Lawful Neutral\",\n      description:\n        \"Lawful neutral (LN) individuals act in accordance with law, tradition, or personal codes. Many monks and some wizards are lawful neutral.\",\n      availableToCharacter: true,\n    },\n    {\n      id: 5,\n      name: \"Neutral\",\n      description:\n        \"Neutral (N) is the alignment of those who prefer to steer clear of moral questions and don't take sides, doing what seems best at the time. Lizardfolk, most druids, and many humans are neutral.\",\n      availableToCharacter: true,\n    },\n    {\n      id: 6,\n      name: \"Chaotic Neutral\",\n      description:\n        \"Chaotic neutral (CN) creatures follow their whims, holding their personal freedom above all else. Many barbarians and rogues, and some bards, are chaotic neutral.\",\n      availableToCharacter: true,\n    },\n    {\n      id: 7,\n      name: \"Lawful Evil\",\n      description:\n        \"Lawful evil (LE) creatures methodically take what they want, within the limits of a code of tradition, loyalty, or order. Devils, blue dragons, and hobgoblins are lawful evil.\",\n      availableToCharacter: true,\n    },\n    {\n      id: 8,\n      name: \"Neutral Evil\",\n      description:\n        \"Neutral evil (NE) is the alignment of those who do whatever they can get away with, without compassion or qualms. Many drow, some cloud giants, and goblins are neutral evil.\",\n      availableToCharacter: true,\n    },\n    {\n      id: 9,\n      name: \"Chaotic Evil\",\n      description:\n        \"Chaotic evil (CE) creatures act with arbitrary violence, spurred by their greed, hatred, or bloodlust. Demons, red dragons, and orcs are chaotic evil.\",\n      availableToCharacter: true,\n    },\n    { id: 10, name: \"Unaligned\", description: null, availableToCharacter: false },\n    { id: 11, name: \"Any Alignment\", description: \"Any Alignment\", availableToCharacter: false },\n    { id: 13, name: \"Any Evil Alignment\", description: \"Any Evil Alignment\", availableToCharacter: false },\n    { id: 14, name: \"Any Good Alignment\", description: \"Any Good Alignment\", availableToCharacter: false },\n    { id: 15, name: \"Any Chaotic Alignment\", description: \"Any Chaotic Alignment\", availableToCharacter: false },\n    { id: 16, name: \"Any Lawful Alignment\", description: \"Any Lawful Alignment\", availableToCharacter: false },\n    { id: 18, name: \"Any Non-Good Alignment\", description: \"Any Non-Good Alignment\", availableToCharacter: false },\n    { id: 19, name: \"Any Non-Lawful Alignment\", description: \"Any Non-Lawful Alignment\", availableToCharacter: false },\n    {\n      id: 20,\n      name: \"Typically Chaotic Neutral\",\n      description: \"Typically Chaotic Neutral\",\n      availableToCharacter: false,\n    },\n    { id: 21, name: \"Typically Neutral Good\", description: \"Typically Neutral Good\", availableToCharacter: false },\n    { id: 22, name: \"Typically Lawful Good\", description: \"Typically Lawful Good\", availableToCharacter: false },\n    { id: 23, name: \"Typically Chaotic Evil\", description: \"Typically Chaotic Evil\", availableToCharacter: false },\n    { id: 24, name: \"Typically Neutral Evil\", description: \"Typically Neutral Evil\", availableToCharacter: false },\n    { id: 25, name: \"Typically Chaotic Good\", description: \"Typically Chaotic Good\", availableToCharacter: false },\n    { id: 26, name: \"Typically Neutral\", description: \"Typically Neutral\", availableToCharacter: false },\n    { id: 27, name: \"Typically Lawful Evil\", description: \"Typically Lawful Evil\", availableToCharacter: false },\n    { id: 28, name: \"Typically Lawful Neutral\", description: \"Typically Lawful Neutral\", availableToCharacter: false },\n  ],\n  sources: [\n    {\n      id: 1,\n      name: \"BR\",\n      description: \"Basic Rules\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10434/136/637248073409717512.jpeg\",\n      sourceURL: \"sources/basic-rules\",\n    },\n    {\n      id: 2,\n      name: \"PHB\",\n      description: \"Player's Handbook\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10435/389/637248131811862290.jpeg\",\n      sourceURL: \"sources/phb\",\n    },\n    {\n      id: 3,\n      name: \"DMG\",\n      description: \"Dungeon Master's Guide\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10367/593/637245347063211867.jpeg\",\n      sourceURL: \"sources/dmg\",\n    },\n    {\n      id: 4,\n      name: \"EE\",\n      description: \"Elemental Evil Player's Companion\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/\",\n      sourceURL: \"\",\n    },\n    {\n      id: 5,\n      name: \"MM\",\n      description: \"Monster Manual\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10434/816/637248105832999293.jpeg\",\n      sourceURL: \"sources/mm\",\n    },\n    {\n      id: 6,\n      name: \"CoS\",\n      description: \"Curse of Strahd\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10349/296/637244603965977140.jpeg\",\n      sourceURL: \"sources/cos\",\n    },\n    {\n      id: 7,\n      name: \"HotDQ\",\n      description: \"Hoard of the Dragon Queen\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10432/68/637247937818392417.jpeg\",\n      sourceURL: \"sources/hotdq\",\n    },\n    {\n      id: 8,\n      name: \"LMoP\",\n      description: \"Lost Mine of Phandelver\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10434/616/637248096401764265.jpeg\",\n      sourceURL: \"sources/lmop\",\n    },\n    {\n      id: 9,\n      name: \"OotA\",\n      description: \"Out of the Abyss\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/19/735/636383500945700817.jpeg\",\n      sourceURL: \"sources/oota\",\n    },\n    {\n      id: 10,\n      name: \"PotA\",\n      description: \"Princes of the Apocalypse\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10435/524/637248137744435932.jpeg\",\n      sourceURL: \"sources/pota\",\n    },\n    {\n      id: 11,\n      name: \"RoT\",\n      description: \"Rise of Tiamat\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10435/605/637248141604547323.jpeg\",\n      sourceURL: \"sources/rot\",\n    },\n    {\n      id: 12,\n      name: \"SKT\",\n      description: \"Storm King's Thunder\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/19/740/636383501361665378.jpeg\",\n      sourceURL: \"sources/skt\",\n    },\n    {\n      id: 13,\n      name: \"SCAG\",\n      description: \"Sword Coast Adventurer's Guide\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10435/793/637248149475504723.jpeg\",\n      sourceURL: \"sources/scag\",\n    },\n    {\n      id: 14,\n      name: \"TftYP\",\n      description: \"Tales from the Yawning Portal\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10449/177/637248652153094716.jpeg\",\n      sourceURL: \"sources/tftyp\",\n    },\n    {\n      id: 15,\n      name: \"VGtM\",\n      description: \"Volo's Guide to Monsters\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10449/464/637248679743732719.jpeg\",\n      sourceURL: \"sources/vgtm\",\n    },\n    {\n      id: 16,\n      name: \"TSC\",\n      description: \"The Sunless Citadel\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10449/402/637248674372576676.jpeg\",\n      sourceURL: \"sources/tftyp/a1\",\n    },\n    {\n      id: 17,\n      name: \"TFoF\",\n      description: \"The Forge of Fury\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10436/4/637248156999902689.jpeg\",\n      sourceURL: \"sources/tftyp/a2\",\n    },\n    {\n      id: 18,\n      name: \"THSoT\",\n      description: \"The Hidden Shrine of Tamoachan\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10449/236/637248657347161458.jpeg\",\n      sourceURL: \"sources/tftyp/a3\",\n    },\n    {\n      id: 19,\n      name: \"WPM\",\n      description: \"White Plume Mountain\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10449/751/637248705560259195.jpeg\",\n      sourceURL: \"sources/tftyp/a4\",\n    },\n    {\n      id: 20,\n      name: \"DiT\",\n      description: \"Dead in Thay\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10434/246/637248079254127234.jpeg\",\n      sourceURL: \"sources/tftyp/a5\",\n    },\n    {\n      id: 21,\n      name: \"AtG\",\n      description: \"Against the Giants\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10433/315/637248029897296032.jpeg\",\n      sourceURL: \"sources/tftyp/a6\",\n    },\n    {\n      id: 22,\n      name: \"ToH\",\n      description: \"Tomb of Horrors\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10449/371/637248671854035769.jpeg\",\n      sourceURL: \"sources/tftyp/a7\",\n    },\n    {\n      id: 25,\n      name: \"ToA\",\n      description: \"Tomb of Annihilation\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10449/339/637248669136195626.jpeg\",\n      sourceURL: \"sources/toa\",\n    },\n    {\n      id: 26,\n      name: \"CoSCO\",\n      description: \"Curse of Strahd: Character Options\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10349/289/637244603748885696.jpeg\",\n      sourceURL: \"\",\n    },\n    {\n      id: 27,\n      name: \"XGtE\",\n      description: \"Xanathar's Guide to Everything\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10449/803/637248709455777906.jpeg\",\n      sourceURL: \"sources/xgte\",\n    },\n    {\n      id: 28,\n      name: \"TTP\",\n      description: \"The Tortle Package\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/39/300/636411199124473334.png\",\n      sourceURL: \"sources/ttp\",\n    },\n    {\n      id: 29,\n      name: \"UA\",\n      description: \"Unearthed Arcana\",\n      sourceCategoryId: 3,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/100/464/636506973225556542.png\",\n      sourceURL: \"\",\n    },\n    {\n      id: 31,\n      name: \"CR\",\n      description: \"Critical Role\",\n      sourceCategoryId: 2,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/\",\n      sourceURL: \"\",\n    },\n    {\n      id: 33,\n      name: \"MToF\",\n      description: \"Mordenkainen’s Tome of Foes\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10434/949/637248111148617766.jpeg\",\n      sourceURL: \"sources/mtof\",\n    },\n    {\n      id: 34,\n      name: \"DDIA-MORD\",\n      description: \"Rrakkma\",\n      sourceCategoryId: 12,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/319/345/636622116959280867.jpeg\",\n      sourceURL: \"sources/ddia-mord\",\n    },\n    {\n      id: 35,\n      name: \"WDH\",\n      description: \"Waterdeep: Dragon Heist\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/343/499/636632335939805190.jpeg\",\n      sourceURL: \"sources/wdh\",\n    },\n    {\n      id: 36,\n      name: \"WDotMM\",\n      description: \"Waterdeep: Dungeon of the Mad Mage\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10449/493/637248684031810278.jpeg\",\n      sourceURL: \"sources/wdotmm\",\n    },\n    {\n      id: 37,\n      name: \"WGtE\",\n      description: \"Wayfinder's Guide to Eberron\",\n      sourceCategoryId: 8,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10449/715/637248702538222765.jpeg\",\n      sourceURL: \"sources/wgte\",\n    },\n    {\n      id: 38,\n      name: \"GGtR\",\n      description: \"Guildmasters' Guide to Ravnica\",\n      sourceCategoryId: 7,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10369/823/637245482341163840.jpeg\",\n      sourceURL: \"sources/ggtr\",\n    },\n    {\n      id: 40,\n      name: \"LLoK\",\n      description: \"Lost Laboratory of Kwalish\",\n      sourceCategoryId: 12,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10434/498/637248091075319276.jpeg\",\n      sourceURL: \"sources/llok\",\n    },\n    {\n      id: 41,\n      name: \"DoIP\",\n      description: \"Dragon of Icespire Peak\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10350/957/637244676648122088.jpeg\",\n      sourceURL: \"sources/doip\",\n    },\n    {\n      id: 42,\n      name: \"TMR\",\n      description: \"Tactical Maps Reincarnated\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/5336/630/636850745475942698.jpeg\",\n      sourceURL: \"\",\n    },\n    {\n      id: 43,\n      name: \"GoS\",\n      description: \"Ghosts of Saltmarsh\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10370/66/637245493047936420.jpeg\",\n      sourceURL: \"sources/gos\",\n    },\n    {\n      id: 44,\n      name: \"AI\",\n      description: \"Acquisitions Incorporated\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10350/905/637244674570907870.jpeg\",\n      sourceURL: \"sources/ai\",\n    },\n    {\n      id: 47,\n      name: \"HftT\",\n      description: \"Hunt for the Thessalhydra\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10432/12/637247932786703735.jpeg\",\n      sourceURL: \"sources/hftt\",\n    },\n    {\n      id: 48,\n      name: \"BGDiA\",\n      description: \"Baldur's Gate: Descent into Avernus\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10350/927/637244675832719441.jpeg\",\n      sourceURL: \"sources/bgdia\",\n    },\n    {\n      id: 49,\n      name: \"ERftLW\",\n      description: \"Eberron: Rising from the Last War\",\n      sourceCategoryId: 8,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10368/6/637245381196842264.jpeg\",\n      sourceURL: \"sources/erftlw\",\n    },\n    {\n      id: 50,\n      name: \"SLW\",\n      description: \"Storm Lord’s Wrath\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10350/964/637244676927254855.jpeg\",\n      sourceURL: \"sources/slw\",\n    },\n    {\n      id: 51,\n      name: \"SDW\",\n      description: \"Sleeping Dragon’s Wake\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10350/959/637244676820916158.jpeg\",\n      sourceURL: \"sources/sdw\",\n    },\n    {\n      id: 52,\n      name: \"DC\",\n      description: \"Divine Contention\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10350/951/637244676535367295.jpeg\",\n      sourceURL: \"sources/dc\",\n    },\n    {\n      id: 53,\n      name: \"SAC\",\n      description: \"Sage Advice Compendium\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10435/702/637248145947271474.jpeg\",\n      sourceURL: \"sources/sac\",\n    },\n    {\n      id: 54,\n      name: \"DDvRaM\",\n      description: \"Dungeons &amp; Dragons vs. Rick and Morty\",\n      sourceCategoryId: 10,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10367/229/637245316031917098.jpeg\",\n      sourceURL: \"sources/ddvram\",\n    },\n    {\n      id: 55,\n      name: \"LR\",\n      description: \"Locathah Rising\",\n      sourceCategoryId: 12,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10434/650/637248098360957592.jpeg\",\n      sourceURL: \"sources/lr\",\n    },\n    {\n      id: 56,\n      name: \"IMR\",\n      description: \"Infernal Machine Rebuild\",\n      sourceCategoryId: 12,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10434/395/637248086063224834.jpeg\",\n      sourceURL: \"sources/imr\",\n    },\n    {\n      id: 57,\n      name: \"MFFV1\",\n      description: \"Mordenkainen's Fiendish Folio Volume 1\",\n      sourceCategoryId: 12,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10434/743/637248102793792401.jpeg\",\n      sourceURL: \"sources/mffv1\",\n    },\n    {\n      id: 58,\n      name: \"SD\",\n      description: \"Sapphire Dragon\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10435/899/637248153278056972.jpeg\",\n      sourceURL: \"\",\n    },\n    {\n      id: 59,\n      name: \"EGtW\",\n      description: \"Explorer's Guide to Wildemount\",\n      sourceCategoryId: 2,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10367/769/637245363413951140.jpeg\",\n      sourceURL: \"sources/egtw\",\n    },\n    {\n      id: 60,\n      name: \"OGA\",\n      description: \"One Grung Above\",\n      sourceCategoryId: 12,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10435/68/637248116464990081.jpeg\",\n      sourceURL: \"sources/oga\",\n    },\n    {\n      id: 61,\n      name: \"MOoT\",\n      description: \"Mythic Odysseys of Theros\",\n      sourceCategoryId: 7,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/10434/885/637248108609488365.jpeg\",\n      sourceURL: \"sources/moot\",\n    },\n    {\n      id: 62,\n      name: \"WA\",\n      description: \"Frozen Sick\",\n      sourceCategoryId: 2,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/9193/755/637200909525723425.jpeg\",\n      sourceURL: \"sources/wa\",\n    },\n    {\n      id: 66,\n      name: \"IDRotF\",\n      description: \"Icewind Dale: Rime of the Frostmaiden\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/11095/550/637278965847502335.jpeg\",\n      sourceURL: \"sources/idrotf\",\n    },\n    {\n      id: 67,\n      name: \"TCoE\",\n      description: \"Tasha’s Cauldron of Everything\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/13665/613/637400361423035085.jpeg\",\n      sourceURL: \"sources/tcoe\",\n    },\n    {\n      id: 68,\n      name: \"CM\",\n      description: \"Candlekeep Mysteries\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/14917/783/637456355214291364.jpeg\",\n      sourceURL: \"sources/cm\",\n    },\n    {\n      id: 69,\n      name: \"VRGtR\",\n      description: \"Van Richten’s Guide to Ravenloft\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/15973/81/637496917952314322.jpeg\",\n      sourceURL: \"sources/vrgtr\",\n    },\n    {\n      id: 79,\n      name: \"TWBtW\",\n      description: \"The Wild Beyond the Witchlight\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/18223/997/637587419509160992.jpeg\",\n      sourceURL: \"sources/twbtw\",\n    },\n    {\n      id: 80,\n      name: \"SACoC\",\n      description: \"Strixhaven: A Curriculum of Chaos\",\n      sourceCategoryId: 7,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/18228/52/637587668398315568.jpeg\",\n      sourceURL: \"sources/sacoc\",\n    },\n    {\n      id: 81,\n      name: \"FToD\",\n      description: \"Fizban's Treasury of Dragons\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/19075/983/637620380256293999.jpeg\",\n      sourceURL: \"sources/ftod\",\n    },\n    {\n      id: 83,\n      name: \"CotN\",\n      description: \"Critical Role: Call of the Netherdeep\",\n      sourceCategoryId: 2,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/20906/943/637695655261542821.jpeg\",\n      sourceURL: \"sources/cotn\",\n    },\n    {\n      id: 85,\n      name: \"MotM\",\n      description: \"Mordenkainen Presents: Monsters of the Multiverse\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/22937/354/637776964748720726.jpeg\",\n      sourceURL: \"sources/motm\",\n    },\n    {\n      id: 87,\n      name: \"JttRC\",\n      description: \"Journeys through the Radiant Citadel\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/24454/511/637830510509865265.jpeg\",\n      sourceURL: \"sources/jttrc\",\n    },\n    {\n      id: 89,\n      name: \"MCv1\",\n      description: \"Monstrous Compendium Volume One: Spelljammer Creatures\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/25098/972/637854763136224645.jpeg\",\n      sourceURL: \"sources/mcv1\",\n    },\n    {\n      id: 90,\n      name: \"SAiS\",\n      description: \"Spelljammer: Adventures in Space\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/25228/876/637859890823057854.jpeg\",\n      sourceURL: \"sources/sais\",\n    },\n    {\n      id: 91,\n      name: \"TVD\",\n      description: \"The Vecna Dossier\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/26305/340/637901114717317528.jpeg\",\n      sourceURL: \"sources/tvd\",\n    },\n    {\n      id: 92,\n      name: \"TRC\",\n      description: \"The Radiant Citadel\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/26479/568/637907273106559243.jpeg\",\n      sourceURL: \"sources/trc\",\n    },\n    {\n      id: 93,\n      name: \"SJA\",\n      description: \"Spelljammer Academy\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/26848/192/637920417931102595.jpeg\",\n      sourceURL: \"sources/sja\",\n    },\n    {\n      id: 94,\n      name: \"DoSI\",\n      description: \"Dragons of Stormwreck Isle\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/26865/226/637921086362458107.jpeg\",\n      sourceURL: \"sources/dosi\",\n    },\n    {\n      id: 95,\n      name: \"SotDQ\",\n      description: \"Dragonlance: Shadow of the Dragon Queen\",\n      sourceCategoryId: 14,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/27777/666/637951679601337771.jpeg\",\n      sourceURL: \"sources/sotdq\",\n    },\n    {\n      id: 101,\n      name: \"MCv2\",\n      description: \"Monstrous Compendium Volume Two: Dragonlance Creatures\",\n      sourceCategoryId: 14,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/30591/814/638054153540284547.jpeg\",\n      sourceURL: \"sources/mcv2\",\n    },\n    {\n      id: 102,\n      name: \"ToD\",\n      description: \"Tyranny of Dragons\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/31000/357/638070661674299942.jpeg\",\n      sourceURL: \"sources/tod\",\n    },\n    {\n      id: 103,\n      name: \"KftGV\",\n      description: \"Keys from the Golden Vault\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/31000/595/638070671792143197.jpeg\",\n      sourceURL: \"sources/kftgv\",\n    },\n    {\n      id: 104,\n      name: \"TG\",\n      description: \"Thieves’ Gallery\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/32269/153/638120143799885947.jpeg\",\n      sourceURL: \"sources/tg\",\n    },\n    {\n      id: 105,\n      name: \"P13\",\n      description: \"Prisoner 13\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/31678/948/638097617627683009.jpeg\",\n      sourceURL: \"sources/p13\",\n    },\n    {\n      id: 109,\n      name: \"TBoMT\",\n      description: \"The Book of Many Things \",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/34541/95/638205353415863412.jpeg\",\n      sourceURL: \"sources/tbomt\",\n    },\n    {\n      id: 110,\n      name: \"GotG\",\n      description: \"Bigby Presents: Glory of the Giants\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/33889/811/638179362850507516.jpeg\",\n      sourceURL: \"sources/gotg\",\n    },\n    {\n      id: 111,\n      name: \"LMI\",\n      description: \"Legendary Magic Items\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/32967/633/638146612553084319.jpeg\",\n      sourceURL: \"sources/lmi\",\n    },\n    {\n      id: 112,\n      name: \"MPMv1\",\n      description: \"Misplaced Monsters: Volume One\",\n      sourceCategoryId: 12,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/33375/579/638161401159084318.jpeg\",\n      sourceURL: \"sources/mpmv1\",\n    },\n    {\n      id: 113,\n      name: \"PBTSO\",\n      description: \"Phandelver and Below: The Shattered Obelisk\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/35214/280/638233891719898500.jpeg\",\n      sourceURL: \"sources/pbtso\",\n    },\n    {\n      id: 114,\n      name: \"PAitM\",\n      description: \"Planescape: Adventures in the Multiverse\",\n      sourceCategoryId: 17,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/33644/785/638170881547396926.jpeg\",\n      sourceURL: \"sources/paitm\",\n    },\n    {\n      id: 115,\n      name: \"MCv3\",\n      description: \"Monstrous Compendium Volume 3: Minecraft Creatures\",\n      sourceCategoryId: 15,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/33103/791/638151695270317390.jpeg\",\n      sourceURL: \"sources/mcv3\",\n    },\n    {\n      id: 116,\n      name: \"DoD\",\n      description: \"Domains of Delight: A Feywild Accessory\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/33298/313/638158863440629290.jpeg\",\n      sourceURL: \"sources/dod\",\n    },\n    {\n      id: 121,\n      name: \"GotSF\",\n      description: \"Giants of the Star Forge\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/36103/73/638271109629954129.jpeg\",\n      sourceURL: \"sources/gotsf\",\n    },\n    {\n      id: 122,\n      name: \"BGG\",\n      description: \"Baldur’s Gate Gazetteer\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/35728/82/638254794193165644.jpeg\",\n      sourceURL: \"sources/bgg\",\n    },\n    {\n      id: 123,\n      name: \"TCSR\",\n      description: \"Tal’dorei Campaign Setting Reborn\",\n      sourceCategoryId: 2,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/36235/402/638277146643998518.jpeg\",\n      sourceURL: \"sources/tcsr\",\n    },\n    {\n      id: 124,\n      name: \"MCv4\",\n      description: \"Monstrous Compendium Vol. 4: Eldraine Creatures\",\n      sourceCategoryId: 7,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/36797/447/638301391860014579.jpeg\",\n      sourceURL: \"sources/mcv4\",\n    },\n    {\n      id: 125,\n      name: \"AATM\",\n      description: \"Adventure Atlas: The Mortuary\",\n      sourceCategoryId: 17,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/36921/396/638306623652011464.jpeg\",\n      sourceURL: \"sources/aatm\",\n    },\n    {\n      id: 126,\n      name: \"LKE\",\n      description: \"Lightning Keep\",\n      sourceCategoryId: 15,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/36974/217/638309001082198146.jpeg\",\n      sourceURL: \"sources/lke\",\n    },\n    {\n      id: 128,\n      name: \"ItSI\",\n      description: \"Intro to Stormwreck Isle\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/37224/332/638319433931865291.jpeg\",\n      sourceURL: \"sources/itsi\",\n    },\n    {\n      id: 129,\n      name: \"HFSCM\",\n      description: \"Heroes’ Feast: Saving the Children’s Menu \",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/37957/430/638350488745211592.jpeg\",\n      sourceURL: \"sources/hfscm\",\n    },\n    {\n      id: 130,\n      name: \"LoE\",\n      description: \"Lairs of Etharis\",\n      sourceCategoryId: 18,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/38227/385/638361857871304044.jpeg\",\n      sourceURL: \"sources/loe\",\n    },\n    {\n      id: 131,\n      name: \"DoDR\",\n      description: \"Dungeons of Drakkenheim\",\n      sourceCategoryId: 19,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/38226/811/638361838185130525.jpeg\",\n      sourceURL: \"sources/dodr\",\n    },\n    {\n      id: 132,\n      name: \"VEoR\",\n      description: \"Vecna: Eve of Ruin\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/39768/808/638427681488703113.jpeg\",\n      sourceURL: \"sources/veor\",\n    },\n    {\n      id: 133,\n      name: \"HCS\",\n      description: \"Humblewood Campaign Setting\",\n      sourceCategoryId: 20,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/39695/377/638425036767623471.jpeg\",\n      sourceURL: \"sources/hcs\",\n    },\n    {\n      id: 135,\n      name: \"VNEE\",\n      description: \"Vecna: Nest of the Eldritch Eye\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/40687/843/638465408127994219.jpeg\",\n      sourceURL: \"sources/vnee\",\n    },\n    {\n      id: 136,\n      name: \"DiLCT\",\n      description: \"Descent into the Lost Caverns of Tsojcanth\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/40132/872/638442415700463413.jpeg\",\n      sourceURL: \"sources/dilct\",\n    },\n    {\n      id: 137,\n      name: \"QftIS\",\n      description: \"Quests from the Infinite Staircase\",\n      sourceCategoryId: 1,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/40544/16/638459335923192808.jpeg\",\n      sourceURL: \"sources/qftis\",\n    },\n    {\n      id: 139,\n      name: \"ToB1\",\n      description: \"Tome of Beasts 1\",\n      sourceCategoryId: 21,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/40544/209/638459347386150459.jpeg\",\n      sourceURL: \"sources/tob1\",\n    },\n    {\n      id: 140,\n      name: \"FMRP\",\n      description: \"Flee Mortals: Rule Primer\",\n      sourceCategoryId: 22,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/41760/824/638512293338393278.jpeg\",\n      sourceURL: \"sources/fmrp\",\n    },\n    {\n      id: 142,\n      name: \"FM\",\n      description: \"Flee, Mortals!\",\n      sourceCategoryId: 22,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/41757/185/638512177128217264.jpeg\",\n      sourceURL: \"sources/fm\",\n    },\n    {\n      id: 143,\n      name: \"WEL\",\n      description: \"Where Evil Lives\",\n      sourceCategoryId: 22,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/41757/270/638512180375164348.jpeg\",\n      sourceURL: \"sources/wel\",\n    },\n    {\n      id: 150,\n      name: \"GHPP\",\n      description: \"Grim Hollow: Player Pack\",\n      sourceCategoryId: 18,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/42333/528/638537169036542469.jpeg\",\n      sourceURL: \"sources/ghpp\",\n    },\n    {\n      id: 151,\n      name: \"BoET\",\n      description: \"Book of Ebon Tides\",\n      sourceCategoryId: 21,\n      isReleased: true,\n      avatarURL: \"https://www.dndbeyond.com/avatars/42930/371/638563983452341674.jpeg\",\n      sourceURL: \"sources/dnd/boet\",\n    },\n  ],\n  levelProficiencyBonuses: [\n    { level: 1, bonus: 2 },\n    { level: 2, bonus: 2 },\n    { level: 3, bonus: 2 },\n    { level: 4, bonus: 2 },\n    { level: 5, bonus: 3 },\n    { level: 6, bonus: 3 },\n    { level: 7, bonus: 3 },\n    { level: 8, bonus: 3 },\n    { level: 9, bonus: 4 },\n    { level: 10, bonus: 4 },\n    { level: 11, bonus: 4 },\n    { level: 12, bonus: 4 },\n    { level: 13, bonus: 5 },\n    { level: 14, bonus: 5 },\n    { level: 15, bonus: 5 },\n    { level: 16, bonus: 5 },\n    { level: 17, bonus: 6 },\n    { level: 18, bonus: 6 },\n    { level: 19, bonus: 6 },\n    { level: 20, bonus: 6 },\n  ],\n  levelExperiencePoints: [\n    0, 300, 900, 2700, 6500, 14000, 23000, 34000, 48000, 64000, 85000, 100000, 120000, 140000, 165000, 195000, 225000,\n    265000, 305000, 355000,\n  ],\n  diceValues: [4, 6, 8, 10, 12, 20],\n  stats: [\n    {\n      id: 1,\n      entityTypeId: 1472902489,\n      key: \"STR\",\n      name: \"Strength\",\n      compendiumText:\n        '<p>Strength measures bodily power, athletic training, and the extent to which you can exert raw physical force.</p>\\n<h4 id=\"StrengthChecks\">Strength Checks</h4>\\n<p>A Strength check can model any attempt to lift, push, pull, or break something, to force your body through a space, or to otherwise apply brute force to a situation. The Athletics skill reflects aptitude in certain kinds of Strength checks.</p>\\n<h5 id=\"Athletics\">Athletics</h5>\\n<p>Your Strength (Athletics) check covers difficult situations you encounter while climbing, jumping, or swimming. Examples include the following activities:</p>\\n<ul>\\n<li>You attempt to climb a sheer or slippery cliff, avoid hazards while scaling a wall, or cling to a surface while something is trying to knock you off.</li>\\n<li>You try to jump an unusually long distance or pull off a stunt midjump.</li>\\n<li>You struggle to swim or stay afloat in treacherous currents, storm-tossed waves, or areas of thick seaweed. Or another creature tries to push or pull you underwater or otherwise interfere with your swimming.</li>\\n</ul>\\n<h5 id=\"OtherStrengthChecks\">Other Strength Checks</h5>\\n<p>The DM might also call for a Strength check when you try to accomplish tasks like the following:</p>\\n<ul>\\n<li>Force open a stuck, locked, or barred door</li>\\n<li>Break free of bonds</li>\\n<li>Push through a tunnel that is too small</li>\\n<li>Hang on to a wagon while being dragged behind it</li>\\n<li>Tip over a statue</li>\\n<li>Keep a boulder from rolling</li>\\n</ul>\\n<h4 id=\"AttackRollsandDamage\">Attack Rolls and Damage</h4>\\n<p>You add your Strength modifier to your attack roll and your damage roll when attacking with a melee weapon such as a mace, a battleaxe, or a javelin. You use melee weapons to make melee attacks in hand-to-hand combat, and some of them can be thrown to make a ranged attack.</p>\\n<h4 id=\"LiftingandCarrying\">Lifting and Carrying</h4>\\n<p>Your Strength score determines the amount of weight you can bear. The following terms define what you can lift or carry.</p>\\n<p><strong>Carrying Capacity.</strong> Your carrying capacity is your Strength score multiplied by 15. This is the weight (in pounds) that you can carry, which is high enough that most characters don\\'t usually have to worry about it.</p>\\n<p><strong>Push, Drag, or Lift.</strong> You can push, drag, or lift a weight in pounds up to twice your carrying capacity (or 30 times your Strength score). While pushing or dragging weight in excess of your carrying capacity, your speed drops to 5 feet.</p>\\n<p><strong>Size and Strength.</strong> Larger creatures can bear more weight, whereas Tiny creatures can carry less. For each size category above Medium, double the creature\\'s carrying capacity and the amount it can push, drag, or lift. For a Tiny creature, halve these weights.</p>\\n<h4 id=\"VariantEncumbrance\">Variant: Encumbrance</h4>\\n<p>The rules for lifting and carrying are intentionally simple. Here is a variant if you are looking for more detailed rules for determining how a character is hindered by the weight of equipment. When you use this variant, ignore the Strength column of the Armor table in <a href=\"https://www.dndbeyond.com/compendium/rules/phb/equipment#ArmorandShields\">chapter 5</a>.</p>\\n<p>If you carry weight in excess of 5 times your Strength score, you are <strong>encumbered</strong>, which means your speed drops by 10 feet.</p>\\n<p>If you carry weight in excess of 10 times your Strength score, up to your maximum carrying capacity, you are instead <strong>heavily encumbered</strong>, which means your speed drops by 20 feet and you have disadvantage on ability checks, attack rolls, and saving throws that use Strength, Dexterity, or Constitution.</p>',\n    },\n    {\n      id: 2,\n      entityTypeId: 1472902489,\n      key: \"DEX\",\n      name: \"Dexterity\",\n      compendiumText:\n        '<p>Dexterity measures agility, reflexes, and balance.</p>\\n<h4 id=\"DexterityChecks\">Dexterity Checks</h4>\\n<p>A Dexterity check can model any attempt to move nimbly, quickly, or quietly, or to keep from falling on tricky footing. The Acrobatics, Sleight of Hand, and Stealth skills reflect aptitude in certain kinds of Dexterity checks.</p>\\n<h5 id=\"Acrobatics\">Acrobatics</h5>\\n<p>Your Dexterity (Acrobatics) check covers your attempt to stay on your feet in a tricky situation, such as when you\\'re trying to run across a sheet of ice, balance on a tightrope, or stay upright on a rocking ship\\'s deck. The DM might also call for a Dexterity (Acrobatics) check to see if you can perform acrobatic stunts, including dives, rolls, somersaults, and flips.</p>\\n<h5 id=\"SleightofHand\">Sleight of Hand</h5>\\n<p>Whenever you attempt an act of legerdemain or manual trickery, such as planting something on someone else or concealing an object on your person, make a Dexterity (Sleight of Hand) check. The DM might also call for a Dexterity (Sleight of Hand) check to determine whether you can lift a coin purse off another person or slip something out of another person\\'s pocket.</p>\\n<h5 id=\"Stealth\">Stealth</h5>\\n<p>Make a Dexterity (Stealth) check when you attempt to conceal yourself from enemies, slink past guards, slip away without being noticed, or sneak up on someone without being seen or heard.</p>\\n<h5 id=\"OtherDexterityChecks\">Other Dexterity Checks</h5>\\n<p>The DM might call for a Dexterity check when you try to accomplish tasks like the following:</p>\\n<ul>\\n<li>Control a heavily laden cart on a steep descent</li>\\n<li>Steer a chariot around a tight turn</li>\\n<li>Pick a lock</li>\\n<li>Disable a trap</li>\\n<li>Securely tie up a prisoner</li>\\n<li>Wriggle free of bonds</li>\\n<li>Play a stringed instrument</li>\\n<li>Craft a small or detailed object</li>\\n</ul>\\n<h4 id=\"AttackRollsandDamage\">Attack Rolls and Damage</h4>\\n<p>You add your Dexterity modifier to your attack roll and your damage roll when attacking with a ranged weapon, such as a sling or a longbow. You can also add your Dexterity modifier to your attack roll and your damage roll when attacking with a melee weapon that has the finesse property, such as a dagger or a rapier.</p>\\n<h4 id=\"ArmorClass\">Armor Class</h4>\\n<p>Depending on the armor you wear, you might add some or all of your Dexterity modifier to your Armor Class, as described in chapter 5, \"<a href=\"https://www.dndbeyond.com/compendium/rules/phb/equipment#ArmorandShields\">Equipment</a>.\"</p>\\n<h4 id=\"Initiative\">Initiative</h4>\\n<p>At the beginning of every combat, you roll initiative by making a Dexterity check. Initiative determines the order of creatures\\' turns in combat, as described in chapter 9, \"<a href=\"https://www.dndbeyond.com/compendium/rules/phb/combat#Initiative\">Combat</a>.\"</p>\\n<blockquote>\\n<p><strong>HIDING</strong></p>\\n<p>The DM decides when circumstances are appropriate for hiding. When you try to hide, make a Dexterity (Stealth) check. Until you are discovered or you stop hiding, that check\\'s total is contested by the Wisdom (Perception) check of any creature that actively searches for signs of your presence.</p>\\n<p>You can\\'t hide from a creature that can see you clearly, and you give away your position if you make noise, such as shouting a warning or knocking over a vase. An invisible creature can always try to hide. Signs of its passage might still be noticed, and it does have to stay quiet.</p>\\n<p>In combat, most creatures stay alert for signs of danger all around, so if you come out of hiding and approach a creature, it usually sees you. However, under certain circumstances, the DM might allow you to stay hidden as you approach a creature that is distracted, allowing you to gain advantage on an attack roll before you are seen.</p>\\n<p><strong>Passive Perception.</strong> When you hide, there\\'s a chance someone will notice you even if they aren\\'t searching. To determine whether such a creature notices you, the DM compares your Dexterity (Stealth) check with that creature\\'s passive Wisdom (Perception) score, which equals 10 + the creature\\'s Wisdom modifier, as well as any other bonuses or penalties. If the creature has advantage, add 5. For disadvantage, subtract 5.</p>\\n<p>For example, if a 1st-level character (with a proficiency bonus of +2) has a Wisdom of 15 (a +2 modifier) and proficiency in Perception, he or she has a passive Wisdom (Perception) of 14.</p>\\n<p><strong>What Can You See?</strong> One of the main factors in determining whether you can find a hidden creature or object is how well you can see in an area, which might be <strong>lightly</strong> or <strong>heavily obscured&nbsp;</strong>as explained in chapter 8, “<a href=\"https://www.dndbeyond.com/compendium/rules/phb/adventuring#VisionandLight\">Adventuring</a>.”</p>\\n</blockquote>',\n    },\n    {\n      id: 3,\n      entityTypeId: 1472902489,\n      key: \"CON\",\n      name: \"Constitution\",\n      compendiumText:\n        '<p>Constitution measures health, stamina, and vital force.</p>\\n<h4 id=\"ConstitutionChecks\">Constitution Checks</h4>\\n<p>Constitution checks are uncommon, and no skills apply to Constitution checks, because the endurance this ability represents is largely passive rather than involving a specific effort on the part of a character or monster. A Constitution check can model your attempt to push beyond normal limits, however.</p>\\n<p>The DM might call for a Constitution check when you try to accomplish tasks like the following:</p>\\n<ul>\\n<li>Hold your breath</li>\\n<li>March or labor for hours without rest</li>\\n<li>Go without sleep</li>\\n<li>Survive without food or water</li>\\n<li>Quaff an entire stein of ale in one go</li>\\n</ul>\\n<h4 id=\"HitPoints\">Hit Points</h4>\\n<p>Your Constitution modifier contributes to your hit points. Typically, you add your Constitution modifier to each Hit Die you roll for your hit points.</p>\\n<p>If your Constitution modifier changes, your hit point maximum changes as well, as though you had the new modifier from 1st level. For example, if you raise your Constitution score when you reach 4th level and your Constitution modifier increases from +1 to +2, you adjust your hit point maximum as though the modifier had always been +2. So you add 3 hit points for your first three levels, and then roll your hit points for 4th level using your new modifier. Or if you\\'re 7th level and some effect lowers your Constitution score so as to reduce your Constitution modifier by 1, your hit point maximum is reduced by 7.</p>',\n    },\n    {\n      id: 4,\n      entityTypeId: 1472902489,\n      key: \"INT\",\n      name: \"Intelligence\",\n      compendiumText:\n        '<p>Intelligence measures mental acuity, accuracy of recall, and the ability to reason.</p>\\n<h4 id=\"IntelligenceChecks\">Intelligence Checks</h4>\\n<p>An Intelligence check comes into play when you need to draw on logic, education, memory, or deductive reasoning. The Arcana, History, Investigation, Nature, and Religion skills reflect aptitude in certain kinds of Intelligence checks.</p>\\n<h5 id=\"Arcana\">Arcana</h5>\\n<p>Your Intelligence (Arcana) check measures your ability to recall lore about spells, magic items, eldritch symbols, magical traditions, the planes of existence, and the inhabitants of those planes.</p>\\n<h5 id=\"History\">History</h5>\\n<p>Your Intelligence (History) check measures your ability to recall lore about historical events, legendary people, ancient kingdoms, past disputes, recent wars, and lost civilizations.</p>\\n<h5 id=\"Investigation\">Investigation</h5>\\n<p>When you look around for clues and make deductions based on those clues, you make an Intelligence (Investigation) check. You might deduce the location of a hidden object, discern from the appearance of a wound what kind of weapon dealt it, or determine the weakest point in a tunnel that could cause it to collapse. Poring through ancient scrolls in search of a hidden fragment of knowledge might also call for an Intelligence (Investigation) check.</p>\\n<h5 id=\"Nature\">Nature</h5>\\n<p>Your Intelligence (Nature) check measures your ability to recall lore about terrain, plants and animals, the weather, and natural cycles.</p>\\n<h5 id=\"Religion\">Religion</h5>\\n<p>Your Intelligence (Religion) check measures your ability to recall lore about deities, rites and prayers, religious hierarchies, holy symbols, and the practices of secret cults.</p>\\n<h5 id=\"OtherIntelligenceChecks\">Other Intelligence Checks</h5>\\n<p>The DM might call for an Intelligence check when you try to accomplish tasks like the following:</p>\\n<ul>\\n<li>Communicate with a creature without using words</li>\\n<li>Estimate the value of a precious item</li>\\n<li>Pull together a disguise to pass as a city guard</li>\\n<li>Forge a document</li>\\n<li>Recall lore about a craft or trade</li>\\n<li>Win a game of skill</li>\\n</ul>\\n<h4 id=\"SpellcastingAbility\">Spellcasting Ability</h4>\\n<p>Wizards use Intelligence as their spellcasting ability, which helps determine the saving throw DCs of spells they cast.</p>',\n    },\n    {\n      id: 5,\n      entityTypeId: 1472902489,\n      key: \"WIS\",\n      name: \"Wisdom\",\n      compendiumText:\n        '<p>Wisdom reflects how attuned you are to the world around you and represents perceptiveness and intuition.</p>\\n<h4 id=\"WisdomChecks\">Wisdom Checks</h4>\\n<p>A Wisdom check might reflect an effort to read body language, understand someone’s feelings, notice things about the environment, or care for an injured person. The Animal Handling, Insight, Medicine, Perception, and Survival skills reflect aptitude in certain kinds of Wisdom checks.</p>\\n<h5 id=\"AnimalHandling\">Animal Handling</h5>\\n<p>When there is any question whether you can calm down a domesticated animal, keep a mount from getting spooked, or intuit an animal’s intentions, the DM might call for a Wisdom (Animal Handling) check. You also make a Wisdom (Animal Handling) check to control your mount when you attempt a risky maneuver.</p>\\n<h5 id=\"Insight\">Insight</h5>\\n<p>Your Wisdom (Insight) check decides whether you can determine the true intentions of a creature, such as when searching out a lie or predicting someone’s next move. Doing so involves gleaning clues from body language, speech habits, and changes in mannerisms.</p>\\n<h5 id=\"Medicine\">Medicine</h5>\\n<p>A Wisdom (Medicine) check lets you try to stabilize a dying companion or diagnose an illness.</p>\\n<h5 id=\"Perception\">Perception</h5>\\n<p>Your Wisdom (Perception) check lets you spot, hear, or otherwise detect the presence of something. It measures your general awareness of your surroundings and the keenness of your senses. For example, you might try to hear a conversation through a closed door, eavesdrop under an open window, or hear monsters moving stealthily in the forest. Or you might try to spot things that are obscured or easy to miss, whether they are orcs lying in ambush on a road, thugs hiding in the shadows of an alley, or candlelight under a closed secret door.</p>\\n<aside>\\n<blockquote>\\n<p id=\"finding-a-hidden-object\"><strong>FINDING A HIDDEN OBJECT</strong></p>\\n<p>When your character searches for a hidden object such as a secret door or a trap, the DM typically asks you to make a Wisdom (Perception) check. Such a check can be used to find hidden details or other information and clues that you might otherwise overlook.</p>\\n<p>In most cases, you need to describe where you are looking in order for the DM to determine your chance of success. For example, a key is hidden beneath a set of folded clothes in the top drawer of a bureau. If you tell the DM that you pace around the room, looking at the walls and furniture for clues, you have no chance of finding the key, regardless of your Wisdom (Perception) check result. You would have to specify that you were opening the drawers or searching the bureau in order to have any chance of success.</p>\\n</blockquote>\\n</aside>\\n<h5 id=\"Survival\">Survival</h5>\\n<p>The DM might ask you to make a Wisdom (Survival) check to follow tracks, hunt wild game, guide your group through frozen wastelands, identify signs that owlbears live nearby, predict the weather, or avoid quicksand and other natural hazards.</p>\\n<h5 id=\"OtherWisdomChecks\">Other Wisdom Checks</h5>\\n<p>The DM might call for a Wisdom check when you try to accomplish tasks like the following:</p>\\n<ul>\\n<li>Get a gut feeling about what course of action to follow</li>\\n<li>Discern whether a seemingly dead or living creature is undead</li>\\n</ul>\\n<h4 id=\"SpellcastingAbility\">Spellcasting Ability</h4>\\n<p>Clerics, druids, and rangers use Wisdom as their spellcasting ability, which helps determine the saving throw DCs of spells they cast.</p>',\n    },\n    {\n      id: 6,\n      entityTypeId: 1472902489,\n      key: \"CHA\",\n      name: \"Charisma\",\n      compendiumText:\n        '<p>Charisma measures your ability to interact effectively with others. It includes such factors as confidence and eloquence, and it can represent a charming or commanding personality.</p>\\n<h4 id=\"CharismaChecks\">Charisma Checks</h4>\\n<p>A Charisma check might arise when you try to influence or entertain others, when you try to make an impression or tell a convincing lie, or when you are navigating a tricky social situation. The Deception, Intimidation, Performance, and Persuasion skills reflect aptitude in certain kinds of Charisma checks.</p>\\n<h5 id=\"Deception\">Deception</h5>\\n<p>Your Charisma (Deception) check determines whether you can convincingly hide the truth, either verbally or through your actions. This deception can encompass everything from misleading others through ambiguity to telling outright lies. Typical situations include trying to fast-talk a guard, con a merchant, earn money through gambling, pass yourself off in a disguise, dull someone\\'s suspicions with false assurances, or maintain a straight face while telling a blatant lie.</p>\\n<h5 id=\"Intimidation\">Intimidation</h5>\\n<p>When you attempt to influence someone through overt threats, hostile actions, and physical violence, the DM might ask you to make a Charisma (Intimidation) check. Examples include trying to pry information out of a prisoner, convincing street thugs to back down from a confrontation, or using the edge of a broken bottle to convince a sneering vizier to reconsider a decision.</p>\\n<h5 id=\"Performance\">Performance</h5>\\n<p>Your Charisma (Performance) check determines how well you can delight an audience with music, dance, acting, storytelling, or some other form of entertainment.</p>\\n<h5 id=\"Persuasion\">Persuasion</h5>\\n<p>When you attempt to influence someone or a group of people with tact, social graces, or good nature, the DM might ask you to make a Charisma (Persuasion) check. Typically, you use persuasion when acting in good faith, to foster friendships, make cordial requests, or exhibit proper etiquette. Examples of persuading others include convincing a chamberlain to let your party see the king, negotiating peace between warring tribes, or inspiring a crowd of townsfolk.</p>\\n<h5 id=\"OtherCharismaChecks\">Other Charisma Checks</h5>\\n<p>The DM might call for a Charisma check when you try to accomplish tasks like the following:</p>\\n<ul>\\n<li>Find the best person to talk to for news, rumors, and gossip</li>\\n<li>Blend into a crowd to get the sense of key topics of conversation</li>\\n</ul>\\n<h4 id=\"SpellcastingAbility\">Spellcasting Ability</h4>\\n<p>Bards, paladins, sorcerers, and warlocks use Charisma as their spellcasting ability, which helps determine the saving throw DCs of spells they cast.</p>',\n    },\n  ],\n  currencyData: [\n    { id: 1, name: \"PP\", conversionFromGp: 10.0, weight: 0.02 },\n    { id: 2, name: \"GP\", conversionFromGp: 1.0, weight: 0.02 },\n    { id: 3, name: \"EP\", conversionFromGp: 0.5, weight: 0.02 },\n    { id: 4, name: \"SP\", conversionFromGp: 0.1, weight: 0.02 },\n    { id: 5, name: \"CP\", conversionFromGp: 0.01, weight: 0.02 },\n  ],\n  classConfigurations: [\n    {\n      id: 357975,\n      name: \"Blood Hunter\",\n      primaryAbilities: [],\n      spellRules: {\n        multiClassSpellSlotDivisor: 3,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: false,\n        levelCantripsKnownMaxes: [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n        levelSpellKnownMaxes: [0, 0, 0, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 11],\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [1, 0, 0, 0, 0, 0, 0, 0, 0],\n          [1, 0, 0, 0, 0, 0, 0, 0, 0],\n          [1, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 2, 0, 0, 0, 0, 0],\n          [0, 0, 0, 2, 0, 0, 0, 0, 0],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Intelligence 13\",\n          prerequisiteMappings: [\n            {\n              id: 146776,\n              entityId: 4,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"intelligence\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Intelligence\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 117,\n      name: \"Blood Hunter (archived)\",\n      primaryAbilities: [],\n      spellRules: {\n        multiClassSpellSlotDivisor: 3,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: false,\n        levelCantripsKnownMaxes: [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n        levelSpellKnownMaxes: [0, 0, 0, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 11],\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [1, 0, 0, 0, 0, 0, 0, 0, 0],\n          [1, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 2, 0, 0, 0, 0, 0],\n          [0, 0, 0, 2, 0, 0, 0, 0, 0],\n        ],\n      },\n      prerequisites: [],\n    },\n    {\n      id: 1,\n      name: \"Bard\",\n      primaryAbilities: [6],\n      spellRules: {\n        multiClassSpellSlotDivisor: 1,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: true,\n        levelCantripsKnownMaxes: [0, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n        levelSpellKnownMaxes: [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 15, 16, 18, 19, 19, 20, 22, 22, 22],\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 1],\n          [4, 3, 3, 3, 3, 1, 1, 1, 1],\n          [4, 3, 3, 3, 3, 2, 1, 1, 1],\n          [4, 3, 3, 3, 3, 2, 2, 1, 1],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Charisma 13\",\n          prerequisiteMappings: [\n            {\n              id: 10356,\n              entityId: 6,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"charisma\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Charisma\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 2,\n      name: \"Cleric\",\n      primaryAbilities: [5],\n      spellRules: {\n        multiClassSpellSlotDivisor: 1,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: true,\n        levelCantripsKnownMaxes: [0, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n        levelSpellKnownMaxes: null,\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 1],\n          [4, 3, 3, 3, 3, 1, 1, 1, 1],\n          [4, 3, 3, 3, 3, 2, 1, 1, 1],\n          [4, 3, 3, 3, 3, 2, 2, 1, 1],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Wisdom 13\",\n          prerequisiteMappings: [\n            {\n              id: 10357,\n              entityId: 5,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"wisdom\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Wisdom\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 3,\n      name: \"Druid\",\n      primaryAbilities: [5],\n      spellRules: {\n        multiClassSpellSlotDivisor: 1,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: true,\n        levelCantripsKnownMaxes: [0, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n        levelSpellKnownMaxes: null,\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 1],\n          [4, 3, 3, 3, 3, 1, 1, 1, 1],\n          [4, 3, 3, 3, 3, 2, 1, 1, 1],\n          [4, 3, 3, 3, 3, 2, 2, 1, 1],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Wisdom 13\",\n          prerequisiteMappings: [\n            {\n              id: 10358,\n              entityId: 5,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"wisdom\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Wisdom\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 4,\n      name: \"Paladin\",\n      primaryAbilities: [6],\n      spellRules: {\n        multiClassSpellSlotDivisor: 2,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: false,\n        levelCantripsKnownMaxes: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        levelSpellKnownMaxes: null,\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Strength 13 and Charisma 13\",\n          prerequisiteMappings: [\n            {\n              id: 10359,\n              entityId: 1,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"strength\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Strength\",\n            },\n            {\n              id: 10360,\n              entityId: 6,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"charisma\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Charisma\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 5,\n      name: \"Ranger\",\n      primaryAbilities: [5],\n      spellRules: {\n        multiClassSpellSlotDivisor: 2,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: false,\n        levelCantripsKnownMaxes: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        levelSpellKnownMaxes: [0, 0, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11],\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Dexterity 13 and Wisdom 13\",\n          prerequisiteMappings: [\n            {\n              id: 10361,\n              entityId: 2,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"dexterity\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Dexterity\",\n            },\n            {\n              id: 10362,\n              entityId: 5,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"wisdom\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Wisdom\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 6,\n      name: \"Sorcerer\",\n      primaryAbilities: [6],\n      spellRules: {\n        multiClassSpellSlotDivisor: 1,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: false,\n        levelCantripsKnownMaxes: [0, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n        levelSpellKnownMaxes: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15],\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 1],\n          [4, 3, 3, 3, 3, 1, 1, 1, 1],\n          [4, 3, 3, 3, 3, 2, 1, 1, 1],\n          [4, 3, 3, 3, 3, 2, 2, 1, 1],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Charisma 13\",\n          prerequisiteMappings: [\n            {\n              id: 10363,\n              entityId: 6,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"charisma\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Charisma\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 7,\n      name: \"Warlock\",\n      primaryAbilities: [6],\n      spellRules: {\n        multiClassSpellSlotDivisor: 1,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: false,\n        levelCantripsKnownMaxes: [0, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n        levelSpellKnownMaxes: [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15],\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [1, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 2, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 2, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 2, 0, 0, 0, 0, 0],\n          [0, 0, 0, 2, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 2, 0, 0, 0, 0],\n          [0, 0, 0, 0, 2, 0, 0, 0, 0],\n          [0, 0, 0, 0, 3, 0, 0, 0, 0],\n          [0, 0, 0, 0, 3, 0, 0, 0, 0],\n          [0, 0, 0, 0, 3, 0, 0, 0, 0],\n          [0, 0, 0, 0, 3, 0, 0, 0, 0],\n          [0, 0, 0, 0, 3, 0, 0, 0, 0],\n          [0, 0, 0, 0, 3, 0, 0, 0, 0],\n          [0, 0, 0, 0, 4, 0, 0, 0, 0],\n          [0, 0, 0, 0, 4, 0, 0, 0, 0],\n          [0, 0, 0, 0, 4, 0, 0, 0, 0],\n          [0, 0, 0, 0, 4, 0, 0, 0, 0],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Charisma 13\",\n          prerequisiteMappings: [\n            {\n              id: 10364,\n              entityId: 6,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"charisma\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Charisma\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 8,\n      name: \"Wizard\",\n      primaryAbilities: [4],\n      spellRules: {\n        multiClassSpellSlotDivisor: 1,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: true,\n        levelCantripsKnownMaxes: [0, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n        levelSpellKnownMaxes: null,\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 0, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 0, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 0],\n          [4, 3, 3, 3, 2, 1, 1, 1, 1],\n          [4, 3, 3, 3, 3, 1, 1, 1, 1],\n          [4, 3, 3, 3, 3, 2, 1, 1, 1],\n          [4, 3, 3, 3, 3, 2, 2, 1, 1],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Intelligence 13\",\n          prerequisiteMappings: [\n            {\n              id: 10365,\n              entityId: 4,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"intelligence\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Intelligence\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 9,\n      name: \"Barbarian\",\n      primaryAbilities: [1],\n      spellRules: {\n        multiClassSpellSlotDivisor: 3,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: false,\n        levelCantripsKnownMaxes: [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n        levelSpellKnownMaxes: [0, 0, 0, 3, 4, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 11, 12, 13],\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Strength 13\",\n          prerequisiteMappings: [\n            {\n              id: 10366,\n              entityId: 1,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"strength\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Strength\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 10,\n      name: \"Fighter\",\n      primaryAbilities: [1, 2],\n      spellRules: {\n        multiClassSpellSlotDivisor: 3,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: false,\n        levelCantripsKnownMaxes: [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n        levelSpellKnownMaxes: [0, 0, 0, 3, 4, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 11, 12, 13],\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Strength 13\",\n          prerequisiteMappings: [\n            {\n              id: 10367,\n              entityId: 1,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"strength\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Strength\",\n            },\n          ],\n        },\n        {\n          description: \"or Dexterity 13\",\n          prerequisiteMappings: [\n            {\n              id: 10368,\n              entityId: 2,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"dexterity\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Dexterity\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 11,\n      name: \"Monk\",\n      primaryAbilities: [5],\n      spellRules: {\n        multiClassSpellSlotDivisor: 3,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: false,\n        levelCantripsKnownMaxes: [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n        levelSpellKnownMaxes: [0, 0, 0, 3, 4, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 11, 12, 13],\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Dexterity 13 and Wisdom 13\",\n          prerequisiteMappings: [\n            {\n              id: 10369,\n              entityId: 2,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"dexterity\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Dexterity\",\n            },\n            {\n              id: 10370,\n              entityId: 5,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"wisdom\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Wisdom\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 12,\n      name: \"Rogue\",\n      primaryAbilities: [2],\n      spellRules: {\n        multiClassSpellSlotDivisor: 3,\n        multiClassSpellSlotRounding: 1,\n        isRitualSpellCaster: false,\n        levelCantripsKnownMaxes: [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n        levelSpellKnownMaxes: [0, 0, 0, 3, 4, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 11, 11, 12, 13],\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Dexterity 13\",\n          prerequisiteMappings: [\n            {\n              id: 10371,\n              entityId: 2,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"dexterity\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Dexterity\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 124727,\n      name: \"Artificer (UA)\",\n      primaryAbilities: [4],\n      spellRules: {\n        multiClassSpellSlotDivisor: 2,\n        multiClassSpellSlotRounding: 2,\n        isRitualSpellCaster: true,\n        levelCantripsKnownMaxes: [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4],\n        levelSpellKnownMaxes: null,\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Intelligence 13\",\n          prerequisiteMappings: [\n            {\n              id: 32395,\n              entityId: 4,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"intelligence\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Intelligence\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 252717,\n      name: \"Artificer\",\n      primaryAbilities: [4],\n      spellRules: {\n        multiClassSpellSlotDivisor: 2,\n        multiClassSpellSlotRounding: 2,\n        isRitualSpellCaster: true,\n        levelCantripsKnownMaxes: [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4],\n        levelSpellKnownMaxes: null,\n        levelSpellSlots: [\n          [0, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [2, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [3, 0, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 2, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 0, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 2, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 0, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 1, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 2, 0, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 1, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n          [4, 3, 3, 3, 2, 0, 0, 0, 0],\n        ],\n      },\n      prerequisites: [\n        {\n          description: \"Intelligence 13\",\n          prerequisiteMappings: [\n            {\n              id: 74766,\n              entityId: 4,\n              entityTypeId: 1472902489,\n              type: \"ability-score\",\n              subType: \"intelligence\",\n              value: 13,\n              friendlyTypeName: \"Ability Score\",\n              friendlySubTypeName: \"Intelligence\",\n            },\n          ],\n        },\n      ],\n    },\n  ],\n  abilitySkills: [\n    {\n      id: 2,\n      entityTypeId: 1958004211,\n      stat: 1,\n      name: \"Athletics\",\n      description:\n        \"<p>Your Strength (Athletics) check covers difficult situations you encounter while climbing, jumping, or swimming. Examples include the following activities:</p>\\n<ul>\\n<li>You attempt to climb a sheer or slippery cliff, avoid hazards while scaling a wall, or cling to a surface while something is trying to knock you off.</li>\\n<li>You try to jump an unusually long distance or pull off a stunt midjump.</li>\\n<li>You struggle to swim or stay afloat in treacherous currents, storm-tossed waves, or areas of thick seaweed. Or another creature tries to push or pull you underwater or otherwise interfere with your swimming.</li>\\n</ul>\",\n    },\n    {\n      id: 3,\n      entityTypeId: 1958004211,\n      stat: 2,\n      name: \"Acrobatics\",\n      description:\n        \"<p>Your Dexterity (Acrobatics) check covers your attempt to stay on your feet in a tricky situation, such as when you're trying to run across a sheet of ice, balance on a tightrope, or stay upright on a rocking ship's deck. The GM might also call for a Dexterity (Acrobatics) check to see if you can perform acrobatic stunts, including dives, rolls, somersaults, and flips.</p>\",\n    },\n    {\n      id: 4,\n      entityTypeId: 1958004211,\n      stat: 2,\n      name: \"Sleight of Hand\",\n      description:\n        \"<p>Whenever you attempt an act of legerdemain or manual trickery, such as planting something on someone else or concealing an object on your person, make a Dexterity (Sleight of Hand) check. The GM might also call for a Dexterity (Sleight of Hand) check to determine whether you can lift a coin purse off another person or slip something out of another person's pocket.</p>\\n\",\n    },\n    {\n      id: 5,\n      entityTypeId: 1958004211,\n      stat: 2,\n      name: \"Stealth\",\n      description:\n        \"<p>Make a Dexterity (Stealth) check when you attempt to conceal yourself from enemies, slink past guards, slip away without being noticed, or sneak up on someone without being seen or heard.</p>\",\n    },\n    {\n      id: 6,\n      entityTypeId: 1958004211,\n      stat: 4,\n      name: \"Arcana\",\n      description:\n        \"<p>Your Intelligence (Arcana) check measures your ability to recall lore about spells, magic items, eldritch symbols, magical traditions, the planes of existence, and the inhabitants of those planes.</p>\",\n    },\n    {\n      id: 7,\n      entityTypeId: 1958004211,\n      stat: 4,\n      name: \"History\",\n      description:\n        \"<p>Your Intelligence (History) check measures your ability to recall lore about historical events, legendary people, ancient kingdoms, past disputes, recent wars, and lost civilizations.</p>\",\n    },\n    {\n      id: 8,\n      entityTypeId: 1958004211,\n      stat: 4,\n      name: \"Investigation\",\n      description:\n        \"<p>When you look around for clues and make deductions based on those clues, you make an Intelligence (Investigation) check. You might deduce the location of a hidden object, discern from the appearance of a wound what kind of weapon dealt it, or determine the weakest point in a tunnel that could cause it to collapse. Poring through ancient scrolls in search of a hidden fragment of knowledge might also call for an Intelligence (Investigation) check.</p>\\n\",\n    },\n    {\n      id: 9,\n      entityTypeId: 1958004211,\n      stat: 4,\n      name: \"Nature\",\n      description:\n        \"<p>Your Intelligence (Nature) check measures your ability to recall lore about terrain, plants and animals, the weather, and natural cycles.</p>\",\n    },\n    {\n      id: 10,\n      entityTypeId: 1958004211,\n      stat: 4,\n      name: \"Religion\",\n      description:\n        \"<p>Your Intelligence (Religion) check measures your ability to recall lore about deities, rites and prayers, religious hierarchies, holy symbols, and the practices of secret cults.</p>\",\n    },\n    {\n      id: 11,\n      entityTypeId: 1958004211,\n      stat: 5,\n      name: \"Animal Handling\",\n      description:\n        \"<p>When there is any question whether you can calm down a domesticated animal, keep a mount from getting spooked, or intuit an animal’s intentions, the GM might call for a Wisdom (Animal Handling) check. You also make a Wisdom (Animal Handling) check to control your mount when you attempt a risky maneuver.</p>\",\n    },\n    {\n      id: 12,\n      entityTypeId: 1958004211,\n      stat: 5,\n      name: \"Insight\",\n      description:\n        \"<p>Your Wisdom (Insight) check decides whether you can determine the true intentions of a creature, such as when searching out a lie or predicting someone’s next move. Doing so involves gleaning clues from body language, speech habits, and changes in mannerisms.</p>\\n\",\n    },\n    {\n      id: 13,\n      entityTypeId: 1958004211,\n      stat: 5,\n      name: \"Medicine\",\n      description:\n        \"<p>A Wisdom (Medicine) check lets you try to stabilize a dying companion or diagnose an illness.</p>\",\n    },\n    {\n      id: 14,\n      entityTypeId: 1958004211,\n      stat: 5,\n      name: \"Perception\",\n      description:\n        \"<p>Your Wisdom (Perception) check lets you spot, hear, or otherwise detect the presence of something. It measures your general awareness of your surroundings and the keenness of your senses. For example, you might try to hear a conversation through a closed door, eavesdrop under an open window, or hear monsters moving stealthily in the forest. Or you might try to spot things that are obscured or easy to miss, whether they are orcs lying in ambush on a road, thugs hiding in the shadows of an alley, or candlelight under a closed secret door.</p>\\n\",\n    },\n    {\n      id: 15,\n      entityTypeId: 1958004211,\n      stat: 5,\n      name: \"Survival\",\n      description:\n        \"<p>The GM might ask you to make a Wisdom (Survival) check to follow tracks, hunt wild game, guide your group through frozen wastelands, identify signs that owlbears live nearby, predict the weather, or avoid quicksand and other natural hazards.</p>\",\n    },\n    {\n      id: 16,\n      entityTypeId: 1958004211,\n      stat: 6,\n      name: \"Deception\",\n      description:\n        \"<p>Your Charisma (Deception) check determines whether you can convincingly hide the truth, either verbally or through your actions. This deception can encompass everything from misleading others through ambiguity to telling outright lies. Typical situations include trying to fast-talk a guard, con a merchant, earn money through gambling, pass yourself off in a disguise, dull someone's suspicions with false assurances, or maintain a straight face while telling a blatant lie.</p>\\n\",\n    },\n    {\n      id: 17,\n      entityTypeId: 1958004211,\n      stat: 6,\n      name: \"Intimidation\",\n      description:\n        \"<p>When you attempt to influence someone through overt threats, hostile actions, and physical violence, the GM might ask you to make a Charisma (Intimidation) check. Examples include trying to pry information out of a prisoner, convincing street thugs to back down from a confrontation, or using the edge of a broken bottle to convince a sneering vizier to reconsider a decision.</p>\\n\",\n    },\n    {\n      id: 18,\n      entityTypeId: 1958004211,\n      stat: 6,\n      name: \"Performance\",\n      description:\n        \"<p>Your Charisma (Performance) check determines how well you can delight an audience with music, dance, acting, storytelling, or some other form of entertainment.</p>\",\n    },\n    {\n      id: 19,\n      entityTypeId: 1958004211,\n      stat: 6,\n      name: \"Persuasion\",\n      description:\n        \"<p>When you attempt to influence someone or a group of people with tact, social graces, or good nature, the GM might ask you to make a Charisma (Persuasion) check. Typically, you use persuasion when acting in good faith, to foster friendships, make cordial requests, or exhibit proper etiquette. Examples of persuading others include convincing a chamberlain to let your party see the king, negotiating peace between warring tribes, or inspiring a crowd of townsfolk.</p>\\n\",\n    },\n  ],\n  senses: [\n    { id: 1, entityTypeId: 668550506, name: \"Blindsight\" },\n    { id: 2, entityTypeId: 668550506, name: \"Darkvision\" },\n    { id: 3, entityTypeId: 668550506, name: \"Tremorsense\" },\n    { id: 4, entityTypeId: 668550506, name: \"Truesight\" },\n    { id: 5, entityTypeId: 668550506, name: \"Unknown\" },\n  ],\n  creatureSizes: [\n    { id: 2, entityTypeId: 127108918, name: \"Tiny\", weightType: 1 },\n    { id: 3, entityTypeId: 127108918, name: \"Small\", weightType: 2 },\n    { id: 4, entityTypeId: 127108918, name: \"Medium\", weightType: 2 },\n    { id: 5, entityTypeId: 127108918, name: \"Large\", weightType: 3 },\n    { id: 6, entityTypeId: 127108918, name: \"Huge\", weightType: 3 },\n    { id: 7, entityTypeId: 127108918, name: \"Gargantuan\", weightType: 3 },\n    { id: 10, entityTypeId: 127108918, name: \"Medium or Small\", weightType: 2 },\n  ],\n  limitedUseResetTypes: [\n    { id: 1, name: \"Short Rest\" },\n    { id: 2, name: \"Long Rest\" },\n    { id: 3, name: \"Dawn\" },\n    { id: 4, name: \"Other\" },\n  ],\n  sourceCategories: [\n    {\n      id: 1,\n      name: \"Core D&amp;D\",\n      description: null,\n      isHideable: false,\n      isEnabledByDefault: true,\n      isToggleable: false,\n      avatarUrl: \"\",\n    },\n    {\n      id: 2,\n      name: \"Critical Role\",\n      description: null,\n      isHideable: true,\n      isEnabledByDefault: false,\n      isToggleable: true,\n      avatarUrl: \"https://www.dndbeyond.com/avatars/105/174/636512853628516966.png\",\n    },\n    {\n      id: 3,\n      name: \"Playtest\",\n      description:\n        '<p><span style=\"color: rgba(255, 0, 0, 1)\"><strong>THIS IS UNOFFICIAL MATERIAL</strong></span></p>\\n<p>The material here is presented for playtesting and to spark your imagination. These game mechanics are in draft form, usable in your campaign but not refined by&nbsp;full game design and editing. They aren’t officially part of the game and aren’t permitted in D&amp;D Adventurers League events.</p>\\n<p>If this material is made official, it will be refined based on your feedback, and then it will appear in a D&amp;D product that you can unlock on DDB.</p>\\n<p>If this material is not made official, it will be removed from D&amp;D Beyond following the playtest period and you will need to replace it with another option.</p>',\n      isHideable: true,\n      isEnabledByDefault: false,\n      isToggleable: false,\n      avatarUrl: \"https://www.dndbeyond.com/avatars/110/171/636516074887091041.png\",\n    },\n    {\n      id: 6,\n      name: \"D&amp;D Beyond\",\n      description: \"<p>D&amp;D Beyond</p>\",\n      isHideable: false,\n      isEnabledByDefault: false,\n      isToggleable: false,\n      avatarUrl: \"\",\n    },\n    {\n      id: 7,\n      name: \"Magic: The Gathering\",\n      description: \"<p>Magic: The Gathering content for fifth edition Dungeons &amp; Dragons</p>\",\n      isHideable: false,\n      isEnabledByDefault: true,\n      isToggleable: true,\n      avatarUrl: \"\",\n    },\n    {\n      id: 8,\n      name: \"Eberron\",\n      description: \"<p>The Eberron campaign setting for&nbsp;fifth edition Dungeons &amp; Dragons</p>\",\n      isHideable: false,\n      isEnabledByDefault: true,\n      isToggleable: true,\n      avatarUrl: \"https://www.dndbeyond.com/avatars/2588/861/636681435608150525.png\",\n    },\n    {\n      id: 9,\n      name: \"Archived\",\n      description: \"<p>The Graveyard</p>\",\n      isHideable: false,\n      isEnabledByDefault: false,\n      isToggleable: false,\n      avatarUrl: \"\",\n    },\n    {\n      id: 10,\n      name: \"Rick and Morty\",\n      description: \"<p>Source category for Rick and Morty products.</p>\",\n      isHideable: true,\n      isEnabledByDefault: false,\n      isToggleable: true,\n      avatarUrl: \"\",\n    },\n    {\n      id: 11,\n      name: \"Runeterra\",\n      description:\n        '<p><span style=\"color: rgba(255, 0, 0, 1)\"><strong>THIS IS UNOFFICIAL MATERIAL</strong></span></p>\\n<p>These game mechanics are usable in your campaign if your DM allows them but not refined by final game design and editing. They aren’t officially part of the Dungeons &amp; Dragons game and aren’t permitted in D&amp;D Adventurers League events unless otherwise stated.</p>',\n      isHideable: false,\n      isEnabledByDefault: false,\n      isToggleable: false,\n      avatarUrl: \"https://www.dndbeyond.com/avatars/11008/904/637274855809570341.png\",\n    },\n    {\n      id: 12,\n      name: \"Noncore D&amp;D\",\n      description:\n        '<p><span style=\"color: rgba(255, 0, 0, 1)\"><strong>THIS IS NONCORE D&amp;D MATERIAL</strong></span></p>\\n<p>These game mechanics are usable in your campaign if your DM allows them but not refined by final game design and editing.</p>',\n      isHideable: false,\n      isEnabledByDefault: false,\n      isToggleable: true,\n      avatarUrl: \"\",\n    },\n    {\n      id: 13,\n      name: \"Adventurers League\",\n      description: \"<p>Adventurers League content for fifth edition Dungeons &amp; Dragons</p>\",\n      isHideable: false,\n      isEnabledByDefault: false,\n      isToggleable: false,\n      avatarUrl: \"\",\n    },\n  ],\n  movements: [\n    { id: 1, name: \"Walk\", description: \"Walking\" },\n    { id: 2, name: \"Burrow\", description: \"Burrowing\" },\n    { id: 3, name: \"Climb\", description: \"Climbing\" },\n    { id: 4, name: \"Fly\", description: \"Flying\" },\n    { id: 5, name: \"Swim\", description: \"Swimming\" },\n  ],\n  multiClassSpellSlots: [\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [2, 0, 0, 0, 0, 0, 0, 0, 0],\n    [3, 0, 0, 0, 0, 0, 0, 0, 0],\n    [4, 2, 0, 0, 0, 0, 0, 0, 0],\n    [4, 3, 0, 0, 0, 0, 0, 0, 0],\n    [4, 3, 2, 0, 0, 0, 0, 0, 0],\n    [4, 3, 3, 0, 0, 0, 0, 0, 0],\n    [4, 3, 3, 1, 0, 0, 0, 0, 0],\n    [4, 3, 3, 2, 0, 0, 0, 0, 0],\n    [4, 3, 3, 3, 1, 0, 0, 0, 0],\n    [4, 3, 3, 3, 2, 0, 0, 0, 0],\n    [4, 3, 3, 3, 2, 1, 0, 0, 0],\n    [4, 3, 3, 3, 2, 1, 0, 0, 0],\n    [4, 3, 3, 3, 2, 1, 1, 0, 0],\n    [4, 3, 3, 3, 2, 1, 1, 0, 0],\n    [4, 3, 3, 3, 2, 1, 1, 1, 0],\n    [4, 3, 3, 3, 2, 1, 1, 1, 0],\n    [4, 3, 3, 3, 2, 1, 1, 1, 1],\n    [4, 3, 3, 3, 3, 1, 1, 1, 1],\n    [4, 3, 3, 3, 3, 2, 1, 1, 1],\n    [4, 3, 3, 3, 3, 2, 2, 1, 1],\n  ],\n  pactMagicMultiClassSpellSlots: [\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [1, 0, 0, 0, 0, 0, 0, 0, 0],\n    [2, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 2, 0, 0, 0, 0, 0, 0, 0],\n    [0, 2, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 2, 0, 0, 0, 0, 0, 0],\n    [0, 0, 2, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 2, 0, 0, 0, 0, 0],\n    [0, 0, 0, 2, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 2, 0, 0, 0, 0],\n    [0, 0, 0, 0, 2, 0, 0, 0, 0],\n    [0, 0, 0, 0, 3, 0, 0, 0, 0],\n    [0, 0, 0, 0, 3, 0, 0, 0, 0],\n    [0, 0, 0, 0, 3, 0, 0, 0, 0],\n    [0, 0, 0, 0, 3, 0, 0, 0, 0],\n    [0, 0, 0, 0, 3, 0, 0, 0, 0],\n    [0, 0, 0, 0, 3, 0, 0, 0, 0],\n    [0, 0, 0, 0, 4, 0, 0, 0, 0],\n    [0, 0, 0, 0, 4, 0, 0, 0, 0],\n    [0, 0, 0, 0, 4, 0, 0, 0, 0],\n    [0, 0, 0, 0, 4, 0, 0, 0, 0],\n  ],\n  proficiencyGroups: [\n    { label: \"Armor\", customProficiencyGroup: 4, customAdjustments: [32], entityTypeIds: [701257905, 174869515] },\n    { label: \"Weapons\", customProficiencyGroup: 5, customAdjustments: [33], entityTypeIds: [1782728300, 660121713] },\n    { label: \"Tools\", customProficiencyGroup: 2, customAdjustments: [34], entityTypeIds: [2103445194, 1452973421] },\n    { label: \"Languages\", customProficiencyGroup: 3, customAdjustments: [35], entityTypeIds: [906033267] },\n  ],\n  vehicleConfiguration: null,\n};\n","import DICTIONARY from \"../../dictionary.js\";\nimport utils from \"../../lib/utils.js\";\nimport SETTINGS from \"../../settings.js\";\n\nfunction addLanguages() {\n  if (game.settings.get(SETTINGS.MODULE_ID, \"add-ddb-languages\")) {\n    const ddbRaw = foundry.utils.getProperty(CONFIG, \"DDB.languages\");\n    if (!ddbRaw) return;\n\n    const ddbFiltered = [...new Set(ddbRaw\n      .map((lang) => utils.nameString(lang.name))\n      .filter((lang) =>\n        !DICTIONARY.character.languages.some((l) => l.name === lang)\n        && ![\"All\"].includes(lang)\n      ))];\n\n    CONFIG.DND5E.languages.ddb = {\n      label: \"D&D Beyond\",\n      children: {\n      }\n    };\n    ddbFiltered.forEach((lang) => {\n      const stub = utils.normalizeString(lang);\n      CONFIG.DND5E.languages.ddb.children[stub] = lang;\n      DICTIONARY.character.languages.push({\n        name: lang,\n        value: stub,\n        advancement: \"ddb\",\n      });\n    });\n  }\n}\n\nexport default function addDDBConfig() {\n  addLanguages();\n}\n","import logger from \"../../logger.js\";\nimport { fallbackDDBConfig } from \"./fallbackConfig.js\";\nimport FileHelper from \"../../lib/FileHelper.js\";\nimport SETTINGS from \"../../settings.js\";\nimport DDBProxy from \"../../lib/DDBProxy.js\";\nimport addDDBConfig from \"./addDDBConfig.js\";\n\nfunction directConfig() {\n  $.getJSON(\"https://www.dndbeyond.com/api/config/json\")\n    .then((config) => {\n      if (config && config.sources) {\n        foundry.utils.setProperty(CONFIG, \"DDB\", config);\n        logger.info(\"Loaded DDB live config\");\n      }\n      return config;\n    })\n    .catch((err) => {\n      logger.warn(\"Failed to load DDB config, caught error using fallback.\", err);\n      return err;\n    })\n    .always(() => {\n      if (!CONFIG.DDB?.sources) {\n        foundry.utils.setProperty(CONFIG, \"DDB\", fallbackDDBConfig);\n        logger.warn(\"Failed to load DDB config, using fallback.\");\n      } else {\n        logger.info(\"A DDB config was loaded\");\n      }\n      logger.debug(\"DDB_CONFIG\", CONFIG.DDB);\n    });\n}\n\nfunction proxyConfig() {\n  const parsingApi = DDBProxy.getProxy();\n  const debugJson = game.settings.get(SETTINGS.MODULE_ID, \"debug-json\");\n\n  const url = `${parsingApi}/proxy/api/config/json`;\n  return new Promise((resolve, reject) => {\n    fetch(url, {\n      method: \"GET\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (!data.success) {\n          logger.error(`API Failure: ${data.message}`);\n          foundry.utils.setProperty(CONFIG, \"DDB\", fallbackDDBConfig);\n          reject(data.message);\n        }\n        if (debugJson) {\n          FileHelper.download(JSON.stringify(data), `config-raw.json`, \"application/json\");\n        }\n        return data;\n      })\n      .then((data) => {\n        if (data.success) {\n          logger.info(`Retrieved DDB CONFIG DATA via proxy`);\n          foundry.utils.setProperty(CONFIG, \"DDB\", data.data);\n        }\n        logger.debug(\"DDB_CONFIG\", CONFIG.DDB);\n        resolve(data.data);\n      })\n      .catch((error) => reject(error));\n  });\n}\n\nexport function loadDDBConfig() {\n  if (!foundry.utils.hasProperty(CONFIG, \"DDB\")) {\n    foundry.utils.setProperty(CONFIG, \"DDB\", fallbackDDBConfig);\n    if (foundry.utils.getProperty(CONFIG, \"DEBUG.DDBI.DIRECT_CONFIG\")) {\n      if ((/electron/i).test(navigator.userAgent)) {\n        logger.info(\"Electron detected using DDB Config stub\");\n        logger.debug(\"DDB_CONFIG\", CONFIG.DDB);\n      } else {\n        logger.info(\"Loaded default DDB config, checking for live config access.\");\n        directConfig().then(() => {\n          addDDBConfig();\n        });\n      }\n    } else {\n      proxyConfig().then(() => {\n        addDDBConfig();\n      });\n    }\n  }\n}\n","import logger from \"../../logger.js\";\nimport utils from \"../../lib/utils.js\";\n\nfunction getOptions(page, current) {\n  let options = \"<option></option>\";\n  if (page?.toc) {\n    for (const section of Object.values(page.toc)) {\n      options += `<option value=\"${section.slug}\"${section.slug === current ? \" selected\" : \"\"}>${section.text}</option>`;\n    }\n  }\n  return options;\n}\n\nfunction addSlugField(element, slug, document) {\n  const titleInput = element.querySelector(\"input[name='text']\");\n  const slugHTML = `<div class=\"form-group\">\n  <label>Jump to HTML Slug</label>\n  <div class=\"form-fields\">\n      <select name=\"slug\" >${getOptions(document.page, slug)}</select>\n  </div>\n</div>`;\n\n  const div = utils.htmlToElement(slugHTML);\n  titleInput.parentNode.parentNode.parentNode.insertBefore(div, titleInput.parentNode.parentNode.nextSibling.nextSibling);\n}\n\nfunction setSlugProperties(doc, slug, label) {\n  foundry.utils.setProperty(doc, \"flags.anchor.slug\", slug);\n  foundry.utils.setProperty(doc, \"flags.ddb.slugLink\", slug);\n  foundry.utils.setProperty(doc, \"flags.ddb.labelName\", label);\n  return doc;\n}\n\nfunction getSlug(doc) {\n  return doc.flags.ddb?.slugLink\n      ?? doc.flags.anchor?.slug\n      ?? \"\";\n}\n\nfunction updateNotePage(noteConfig, slug) {\n  const journalId = noteConfig.form.elements.entryId?.value;\n  const pageId = noteConfig.form.elements.pageId?.value;\n  const journal = game.journal.get(journalId);\n  const page = journal?.pages.get(pageId);\n  noteConfig.form.elements[\"slug\"].innerHTML = getOptions(page, slug);\n}\n\nexport function anchorInjection() {\n  // don't load if similar modules present\n  if (game.modules.get(\"jal\")?.active) {\n    logger.warn(\"Anchor injection already loaded from JAL.\");\n    return;\n  }\n\n  Hooks.on(\"activateNote\", (note, options) => {\n    const slug = getSlug(note.document);\n    if (slug) {\n      logger.debug(\"Injecting note anchor\", slug);\n      options[\"anchor\"] = slug;\n    }\n  });\n\n  // when we render a note we add the anchor links box\n  Hooks.on(\"renderNoteConfig\", (noteConfig, html, data) => {\n    const slug = getSlug(noteConfig.document);\n    if (!noteConfig.element[0].querySelector(\"input[name='slug']\")) {\n      addSlugField(noteConfig.element[0], slug, data.document);\n      if (!noteConfig._minimized) {\n        const pos = noteConfig.position;\n        pos.height = 'auto';\n        noteConfig.setPosition(pos);\n      }\n    }\n    noteConfig.element[0].style.height = \"auto\";\n    const isExistingNote = noteConfig.document.id !== null;\n\n    html.find(\"select[name='entryId']\").change(() => updateNotePage(noteConfig, slug));\n    html.find(\"select[name='pageId']\").change(() => updateNotePage(noteConfig, slug));\n\n    if (isExistingNote) {\n      const closeHookId = Hooks.on(\"closeDocumentSheet\", async (documentSheet, html) => {\n        if (!(documentSheet instanceof NoteConfig)) return;\n        if (noteConfig.document.id !== documentSheet.document.id) return;\n        Hooks.off(\"closeNoteConfig\", closeHookId);\n        const slugInput = html[0].querySelector(\"select[name='slug']\");\n        const selectedSlug = slugInput?.value;\n        if (selectedSlug && selectedSlug.trim() !== \"\" && selectedSlug !== documentSheet.document.flags.ddb?.slugLink) {\n          const update = setSlugProperties({ _id: documentSheet.document.id }, selectedSlug, documentSheet.document.label);\n          await canvas.scene.updateEmbeddedDocuments(\"Note\", [update]);\n        }\n      });\n    }\n  });\n\n  // handle new notes, we just inject the slug properties into the source from the sheet data\n  Hooks.on(\"preCreateNote\", (note, data) => {\n    if (data.slug) {\n      const flagData = setSlugProperties(foundry.utils.deepClone(note), data.slug, data.text);\n      note.updateSource({ flags: flagData.flags });\n    };\n  });\n\n  Hooks.on(\"dropCanvasData\", (_, dropData) => {\n    if (dropData.type !== \"JournalEntryPage\" && !dropData.anchor?.slug) return;\n\n    // when we create from the side bar we fill in the input label name to match\n    // the anchor name and set the slug value to the anchor slug\n    Hooks.once(\"renderNoteConfig\", (noteConfig, _html, app) => {\n      const titleInput = noteConfig.element[0].querySelector(\"input[name='text']\");\n      titleInput.setAttribute('value', dropData.anchor.name);\n      if (dropData.anchor.slug) {\n        titleInput.setAttribute('value', dropData.anchor.name);\n        updateNotePage(noteConfig, dropData.anchor.slug);\n      } else {\n        titleInput.setAttribute('value', app.label);\n      }\n    });\n  });\n}\n","\nimport OriginFixer from \"../../lib/OriginFixer.js\";\n\nasync function createActorHook(actor, options, user) {\n  // Can't do this in preCreate because the actor id doesn't exist yet.\n  if (options.keepId) return;\n  if (game.user?.id !== user) return;\n  if (game.modules.get(\"dnd5e-scriptlets\")?.active && game.settings.get(\"dnd5e-scriptlets\", \"UpdateCreatedOrigins\")) {\n    await OriginFixer.updateActorEffects(actor, true);\n  } else {\n    await OriginFixer.updateActorEffects(actor);\n  }\n}\n\nasync function createTokenHook(tokenDocument, options, user) {\n  if (options.keepId) return;\n  if (game.user.id !== user) return;\n  if (game.modules.get(\"dnd5e-scriptlets\")?.active && game.settings.get(\"dnd5e-scriptlets\", \"UpdateCreatedOrigins\")) {\n    await OriginFixer.updateActorEffects(tokenDocument.actor, true);\n  } else {\n    await OriginFixer.updateActorEffects(tokenDocument.actor);\n  }\n}\n\nexport function setupUpdateCreatedOrigins() {\n  Hooks.on(\"createActor\", createActorHook);\n  Hooks.on(\"createToken\", createTokenHook);\n}\n","// import logger from \"../logger.js\";\nimport DDBMacros from \"./DDBMacros.js\";\n\n\nexport default class DDBEffectHooks {\n\n  // eslint-disable-next-line no-unused-vars\n  static ddbMacro(actor, change, ..._params) {\n    const scope = { actor, token: null };\n    const data = JSON.parse(change.value);\n\n    DDBMacros.executeDDBMacro(data.type, data.name, scope);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  static processCustomApplyEffectHooks(actor, change, current, delta, changes) {\n    // eslint-disable-next-line no-useless-return\n    if (change.mode !== CONST.ACTIVE_EFFECT_MODES.CUSTOM) return;\n\n  }\n\n  static loadHooks() {\n    // special effect functions\n    Hooks.on(\"applyActiveEffect\", DDBEffectHooks.processCustomApplyEffectHooks);\n  }\n\n}\n","import SETTINGS from \"../../settings.js\";\n\nexport function earlySettings() {\n  for (const [name, data] of Object.entries(SETTINGS.GET_DEFAULT_SETTINGS(true))) {\n    game.settings.register(SETTINGS.MODULE_ID, name, data);\n  }\n}\n","import DDBMuncher from \"../../apps/DDBMuncher.js\";\nimport DDBCookie from \"../../apps/DDBCookie.js\";\nimport DDBSetup from \"../../apps/DDBSetup.js\";\nimport { checkCobalt } from \"../../lib/Secrets.js\";\nimport { isValidKey } from \"../../apps/DDBKeyChange.js\";\n\nexport function addMuncher(app, html) {\n  if (app.options.id == \"compendium\" && game.user.isGM) {\n    let button = $(\"<div class='header-actions action-buttons flexrow'><button class='ddb-muncher'><i class='fas fa-pastafarianism'></i> DDB Muncher</button></div>\");\n\n    button.click(async () => {\n      ui.notifications.info(\"Checking your DDB details - this might take a few seconds!\");\n      const setupComplete = DDBSetup.isSetupComplete();\n\n      if (setupComplete) {\n        const cobaltStatus = await checkCobalt();\n        if (cobaltStatus.success) {\n          let validKey = await isValidKey();\n          if (validKey) {\n            new DDBMuncher().render(true);\n          }\n        } else {\n          new DDBCookie().render(true);\n        }\n      } else {\n        game.settings.set(\"ddb-importer\", \"settings-call-muncher\", true);\n        new DDBSetup().render(true);\n      }\n    });\n\n    const top = game.settings.get(\"ddb-importer\", \"show-munch-top\");\n    if (top) {\n      $(html).find(\".directory-header\").append(button);\n    } else {\n      $(html).find(\".directory-footer\").append(button);\n    }\n  }\n}\n","import DDBEncounterMunch from \"../../apps/DDBEncounterMunch.js\";\nimport DDBCookie from \"../../apps/DDBCookie.js\";\nimport DDBSetup from \"../../apps/DDBSetup.js\";\nimport { isValidKey } from \"../../apps/DDBKeyChange.js\";\nimport { checkCobalt } from \"../../lib/Secrets.js\";\nimport PatreonHelper from \"../../lib/PatreonHelper.js\";\nimport logger from \"../../logger.js\";\n\n\nexport function addEncounterMuncher (app, html) {\n  const tier = PatreonHelper.getPatreonTier();\n  const tiers = PatreonHelper.calculateAccessMatrix(tier);\n  const enabled = game.settings.get(\"ddb-importer\", \"encounter-muncher-enabled\");\n\n  const scenesTab = app.options.id == \"scenes\" || app.id === \"scenes\";\n\n  if (enabled && scenesTab && game.user.isGM && tiers.supporter) {\n    let button = $(\"<div class='header-actions action-buttons flexrow'><button class='ddb-muncher' id='ddb-encounter-munch-open'><i class='fas fa-dungeon'></i> DDB Encounter Muncher</button></div>\");\n\n    const actualButton = button.find('#ddb-encounter-munch-open');\n    actualButton.click(async () => {\n      actualButton.prop('disabled', true);\n      ui.notifications.info(\"Fetching your DDB Encounter Information, this might take a few seconds!\");\n      try {\n        const setupComplete = DDBSetup.isSetupComplete();\n\n        if (setupComplete) {\n          const cobaltStatus = await checkCobalt();\n          if (cobaltStatus.success) {\n            let validKey = await isValidKey();\n            if (validKey) {\n              new DDBEncounterMunch().render(true);\n            }\n          } else {\n            actualButton.prop('disabled', false);\n            new DDBCookie().render(true);\n          }\n        } else {\n          actualButton.prop('disabled', false);\n          new DDBSetup().render(true);\n        }\n\n        const hookId = Hooks.on(\"closeApplication\", (app) => {\n          if (app instanceof DDBEncounterMunch) {\n            actualButton.prop('disabled', false);\n            Hooks.off(\"closeApplication\", hookId);\n          }\n        });\n      } catch (e) {\n        logger.error(e);\n        actualButton.prop('disabled', false);\n      }\n    });\n\n    const top = game.settings.get(\"ddb-importer\", \"show-munch-top\");\n    if (top) {\n      $(html).find(\".directory-header\").prepend(button);\n    } else {\n      $(html).find(\".directory-footer\").append(button);\n    }\n  }\n}\n","import logger from \"../../logger.js\";\n\n/**\n * This is a stripped down socketlib like implementation\n *  for some unique circumstances where confusion arises when using\n * with DAE GM Macros\n *\n * This is a MIT license and the inspiration is https://github.com/manuelVo/foundryvtt-socketlib/\n */\n\nexport class DDBSocket {\n\n  constructor() {\n    this.functions = new Map();\n    this.requests = new Map();\n    this.name = \"module.ddb-importer\";\n\n    game.socket.on(this.name, this._received.bind(this));\n  }\n\n  register(name, f) {\n    this.functions.set(name, f);\n  }\n\n  static isExecutingGM() {\n    if (!game.user.isGM) return false;\n    const online = game.users.filter((u) => u.isGM && u.active);\n    // run as lowest ranking online GM\n    return !online.some((u) => u.id < game.user.id);\n  }\n\n  #getFunction(func) {\n    if (func instanceof Function) {\n      for (const [key, value] of this.functions.entries()) {\n        if (value === func) return [key, func];\n      }\n      throw new Error(`Function '${func.name}' has not been registered with DDB Importer Socket`);\n    } else {\n      const fn = this.functions.get(func);\n      if (fn) return [func, fn];\n      throw new Error(`No DDB socket function with the name '${func}' has been registered.`);\n    }\n  }\n\n  async _receiveRequest(message, senderId) {\n    const { functionName, args, recipient, id } = message;\n    if (recipient instanceof Array) {\n      if (!recipient.includes(game.userId)) return;\n    } else {\n      switch (recipient) {\n        case \"GM\":\n        case \"gm\":\n          if (!DDBSocket.isExecutingGM()) return;\n          break;\n        default:\n          logger.error(\n            `Unknown recipient '${recipient}' when trying to execute '${functionName}' for 'DDB Importer internal socket handler.`\n          );\n          return;\n      }\n    }\n\n    const [name, func] = this.#getFunction(functionName);\n    const socketData = { userId: senderId };\n\n    try {\n      const result = await func.call({ socketData }, ...args);\n      game.socket.emit(this.name, { id, result, type: \"RESULT\" });\n    } catch (e) {\n      logger.error(`An exception occurred while executing ddb macro function '${name}'.`, { name, func });\n      game.socket.emit(this.name, { id, type: \"EXCEPTION\", userId: game.userId });\n      throw e;\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  _receiveResponse(message, _senderId) {\n    const { id, result, type } = message;\n    const request = this.requests.get(id);\n    if (!request) return;\n    switch (type) {\n      case \"RESULT\":\n        request.resolve(result);\n        break;\n      case \"EXCEPTION\":\n        request.reject(\n          new Error(`An exception occurred during remote execution of DDB function '${request.functionName}'. Please see ${game.users.get(message.userId).name}'s error console for details.`)\n        );\n        break;\n      default:\n        request.reject(\n          new Error(`Unknown result type '${type}' for DDB function '${request.functionName}'. Catastrophic error.`)\n        );\n        break;\n    }\n    this.requests.delete(id);\n  }\n\n  _received(message, senderId) {\n    if ([\"REQUEST\"].includes(message.type)) {\n      this._receiveRequest(message, senderId);\n    } else {\n      this._receiveResponse(message, senderId);\n    }\n  }\n\n  _sendRequest(functionName, args, recipient) {\n    const message = {\n      functionName,\n      args,\n      recipient,\n      type: \"REQUEST\",\n      id: foundry.utils.randomID(),\n    };\n    const promise = new Promise((resolve, reject) =>\n      this.requests.set(message.id, { functionName, resolve, reject, recipient })\n    );\n    game.socket.emit(this.name, message);\n    return promise;\n  }\n\n  static _executeLocal(func, ...args) {\n    const socketData = { userId: game.userId };\n    return func.call({ socketData }, ...args);\n  }\n\n  async executeAsGM(functionName, ...args) {\n    const [name, func] = this.#getFunction(functionName);\n    if (game.user.isGM) {\n      return DDBSocket._executeLocal(func, ...args);\n    } else {\n      if (!game.users.find((u) => u.isGM && u.active)) {\n        throw new Error(`Could not execute DDB function '${name}' (${func.name}) as GM, because no GM is connected.`);\n      }\n      return this._sendRequest(name, args, \"GM\");\n    }\n  }\n\n  async executeAsUser(functionName, userId, ...args) {\n    const [name, func] = this.#getFunction(functionName);\n    if (userId === game.userId) return DDBSocket._executeLocal(func, ...args);\n    const user = game.users.get(userId);\n    if (!user) throw new Error(`No user with id '${userId}' exists.`);\n    if (!user.active) throw new Error(`User '${user.name}' (${userId}) is not online.`);\n    return this._sendRequest(name, args, [userId]);\n  }\n\n}\n\nexport function setupSockets() {\n  const socket = new DDBSocket();\n  socket.register(\"simpleButtonDialog\", DDBImporter.lib.DialogHelper.buttonDialog);\n  socket.register(\"chooserDialog\", DDBImporter.lib.DialogHelper.ChooserDialog.Ask);\n  socket.register(\"ddbMacro\", DDBImporter.lib.DDBMacros.executeDDBMacro);\n  socket.register(\"ddbMacroFunction\", DDBImporter.lib.DDBSimpleMacro.execute);\n  socket.register(\"ddbSimpleMacro\", DDBImporter.lib.DDBSimpleMacro.execute);\n  socket.register(\"addCondition\", DDBImporter.lib.DDBEffectHelper.addCondition);\n  socket.register(\"removeCondition\", DDBImporter.lib.DDBEffectHelper.removeCondition);\n\n  globalThis.DDBImporter.socket = socket;\n}\n","export function linkTables(type, html) {\n\n  // if journal\n  let content;\n  let findString;\n  switch (type) {\n    case \"journal\":\n      content = $(html).find(`div[data-edit=\"content\"]`);\n      findString = \"a.content-link[data-entity='RollTable']\";\n      break;\n    case \"item\": {\n      const tableCompendium = game.settings.get(\"ddb-importer\", \"entity-table-compendium\");\n      content = $(html).find(`div[data-edit=\"data.description.value\"]`);\n      findString = `a.content-link[data-pack='${tableCompendium}']`;\n      break;\n    }\n    // no default\n  }\n\n\n  // Add a direct roll button into DDB-imported rolltables\n  $(content)\n    .find(findString)\n    .each(async (_, link) => {\n      const data = $(link).data();\n      const pack = game.packs.get(data.pack);\n\n      const table = pack\n        ? await pack.getDocument(data.id)\n        : game.tables.get(data.id);\n\n      if (table?.flags?.ddb?.contentChunkId || pack) {\n        const button = $(\n          `<a title=\"Click: Roll | Shift-Click: Self Roll\" class=\"ddbimporter roll\"><i class=\"fas fa-dice-d20\"></i>  Roll!</a>`\n        );\n\n        $(link).after(button);\n        $(button).on(\"click\", async (event) => {\n          event.preventDefault();\n          const rollMode = event.shiftKey ? \"selfroll\" : \"roll\";\n\n          // fix: Table description is undefined\n          if (!table.description) table.description = table.name;\n\n          const draw = await table.roll();\n\n          draw.results = draw.results.map((result) => {\n            if (!result.img)\n              result.img = \"icons/svg/d20-highlight.svg\";\n            return result;\n          });\n\n          await table.toMessage(draw.results, {\n            roll: draw.roll,\n            messageOptions: {\n              speaker: game.user.name,\n              rollMode: rollMode,\n            },\n          });\n\n        });\n      }\n    });\n}\n","import DDBHelper from \"../../lib/DDBHelper.js\";\nimport FolderHelper from \"../../lib/FolderHelper.js\";\n\nexport function imageToChat(src) {\n  const content = `<img class=\"ddbimporter-chat-image\" data-src=\"${src}\" src=\"${src}\">`;\n\n  ChatMessage.create({\n    content,\n  });\n}\n\nasync function getJournal(bookCode) {\n  const folder = await FolderHelper.getFolder(\"journal\", \"\", \"Player Handouts\", \"#515fc8\", \"#515fc8\", false);\n  const journalName = bookCode\n    ? DDBHelper.getBookName(bookCode)\n    : \"Handout Pages\";\n  const existingJournal = game.journal.find((journal) =>\n    journal.name === journalName && journal.folder.id === folder.id\n  );\n  if (existingJournal) {\n    return existingJournal;\n  } else {\n    const journal = await JournalEntry.create(\n      {\n        name: journalName,\n        folder: folder.id,\n        ownership: {\n          default: CONST.DOCUMENT_OWNERSHIP_LEVELS.OBSERVER,\n        },\n        flags: {\n          ddb: {\n            bookCode,\n          },\n        },\n      },\n      {\n        displaySheet: false,\n      }\n    );\n    return journal;\n  }\n}\n\nasync function createPage(journal, name, type, content) {\n  const page = {\n    _id: foundry.utils.randomID(),\n    name,\n    type,\n    text: {},\n    title: {\n      show: true,\n    },\n    ownership: {\n      default: CONST.DOCUMENT_OWNERSHIP_LEVELS.OBSERVER,\n    }\n  };\n  switch (type) {\n    case \"image\": {\n      page.title.show = true;\n      page.src = content;\n      break;\n    }\n    case \"text\":\n    default: {\n      page.text.content = content;\n    }\n  }\n\n  await JournalEntryPage.create(page, { parent: journal, keepId: true, displaySheet: false });\n  return journal.pages.find((jp) => page._id === jp._id);\n}\n\nexport async function createAndShowPlayerHandout(name, content, type, bookCode) {\n\n  const journal = await getJournal(bookCode);\n\n  const existingPage = journal.pages.find((page) => {\n    const nameCheck = page.name === name;\n    const typeCheck = type === \"image\"\n      ? page.src === content\n      : type === \"text\"\n        ? page.text?.content === content\n        : true;\n    return nameCheck && typeCheck;\n  });\n\n  const page = existingPage\n    ? existingPage\n    : await createPage(journal, name, type, content);\n\n  Journal.showDialog(page);\n}\n","import utils from \"../../lib/utils.js\";\nimport { createAndShowPlayerHandout, imageToChat } from \"./shared.js\";\n\nexport function linkImages(html, data) {\n  if (!game.user.isGM) return;\n  const displayImages = game.settings.get(\"ddb-importer\", \"show-image-to-players\");\n  // does this functionality exist from anther module?\n  const funcExists = !displayImages || game.modules.get(\"token-hud-art-button\")?.active;\n\n  if (funcExists) return;\n\n  // mark all images\n  $(html)\n    .find('img')\n    .each((index, element) => {\n      const showPlayersButton = $(\"<a class='ddbimporter-show-image'><i class='fas fa-eye'></i>&nbsp;Show Players Image</a>\");\n      const toChatButton = $(\"<a class='ddbimporter-to-chat'><i class='fas fa-comment'></i>&nbsp;To Chat</a>\");\n\n      $(element).wrap(\"<div class='ddbimporter-image-container'></div>\");\n      // show the button on mouseenter of the image\n      $(element)\n        .parent()\n        .mouseenter(function addHover() {\n          // eslint-disable-next-line no-invalid-this\n          $(this).append(showPlayersButton);\n          $(showPlayersButton).click((event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            const src = $(element).attr(\"src\");\n            Dialog.confirm({\n              title: \"Would you like to create a handout for the image?\",\n              content: \"<p>Create a player viewable handout? (No will show the image only)</p>\",\n              yes: async () => {\n                const name = await utils.namePrompt(\"What would you like to call the Handout?\");\n                if (name && name !== \"\") {\n                  const bookCode = data.flags?.ddb?.bookCode;\n                  createAndShowPlayerHandout(name, src, \"image\", bookCode);\n                }\n              },\n              no: () => {\n                const popOut = new ImagePopout(src, { shareable: true });\n                popOut.shareImage();\n              },\n              defaultYes: true\n            });\n          });\n          // eslint-disable-next-line no-invalid-this\n          $(this).append(toChatButton);\n          $(toChatButton).click((event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            imageToChat($(element).attr(\"src\"));\n          });\n        });\n      $(element)\n        .parent()\n        .mouseleave(function removeHover() {\n          // eslint-disable-next-line no-invalid-this\n          $(this).find(\"a.ddbimporter-show-image, a.ddbimporter-to-chat\").remove();\n        });\n    });\n}\n","import logger from \"../../logger.js\";\n\nfunction copyToClipboard(text) {\n  logger.debug(\"Copy block\", text);\n  let dummy = document.createElement(\"textarea\");\n  document.body.appendChild(dummy);\n  dummy.value = text;\n  dummy.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(dummy);\n}\n\nfunction getNoteButton(name, type) {\n  return $(\n    `<a id='ddb-note-${name}' class='ddb-button'><i class='fas fa-clipboard-check'></i>&nbsp;Copy ${type} ${name} </a>`\n  );\n}\n\nfunction getTableButton() {\n  return $(\n    `<a id='ddb-table-name' class='ddb-button'><i class='fas fa-clipboard-check'></i>&nbsp;Copy table details </a>`\n  );\n}\n\nfunction buildNotes(html, data) {\n  if (!game.user.isGM) return;\n  const allow = game.settings.get(\"ddb-importer\", \"allow-note-generation\");\n  if (!allow) return;\n\n  // mark all headers\n  $(html)\n    .find(\"h1, h2, h3, h4, h5, figure, p\")\n    .each((index, element) => {\n      $(element).wrap(\"<div class='ddbimporter-note-container'></div>\");\n      // show the button on mouseenter\n      $(element)\n        .parent()\n        .mouseenter(function Hovering() {\n          if (CONFIG.DDBI.DEV.tableInUse) return;\n          const tagName = $(element).prop(\"tagName\");\n          const showStartButton = $(this).append(getNoteButton(\"start\", tagName));\n          const showEndButton = $(this).append(getNoteButton(\"end\", tagName));\n          $(showStartButton).click((e) => {\n            if (e.target.id === \"ddb-note-start\") {\n              CONFIG.DDBI.DEV.clippy = {\n                ddbId: data.document.flags.ddb.ddbId,\n                cobaltId: data.document.flags.ddb.cobaltId,\n                parentId: data.document.flags.ddb.parentId,\n                splitTag: tagName.toLowerCase(),\n                slug: data.document.flags.ddb.slug,\n                tagIdFirst: $(element).prop(\"id\"),\n                contentChunkIdStart: $(element).attr(\"data-content-chunk-id\"),\n                tagIdLast: \"\",\n                contentChunkIdStop: \"EOF\",\n                sceneName: data.document.name,\n              };\n              copyToClipboard(JSON.stringify(CONFIG.DDBI.DEV.clippy, null, 2));\n            }\n          });\n          $(showEndButton).click((e) => {\n            if (e.target.id === \"ddb-note-end\") {\n              CONFIG.DDBI.DEV.clippy.tagIdLast = $(element).prop(\"id\");\n              CONFIG.DDBI.DEV.clippy.contentChunkIdStop = $(element).attr(\"data-content-chunk-id\");\n              copyToClipboard(JSON.stringify(CONFIG.DDBI.DEV.clippy, null, 2));\n            }\n          });\n        });\n      $(element)\n        .parent()\n        .mouseleave(function Unhovering() {\n          $(this).find(\"#ddb-note-start\").remove();\n          $(this).find(\"#ddb-note-end\").remove();\n        });\n    });\n\n  // mark all headers\n  $(html)\n    .find(\"table\")\n    .each((index, element) => {\n      $(element).wrap(\"<div class='ddbimporter-table-container'></div>\");\n      // show the button on mouseenter\n      $(element)\n        .parent()\n        .mouseenter(function Hovering() {\n          CONFIG.DDBI.DEV.tableInUse = true;\n          const showButton = $(this).append(getTableButton());\n          $(showButton).click((e) => {\n            if (e.target.id === \"ddb-table-name\") {\n              CONFIG.DDBI.DEV.clippy = {\n                ddbId: data.flags.ddb.ddbId,\n                cobaltId: data.flags.ddb.cobaltId,\n                parentId: data.flags.ddb.parentId,\n                slug: data.flags.ddb.slug,\n                tagIdFirst: $(element).prop(\"id\"),\n                contentChunkId: $(element).attr(\"data-content-chunk-id\"),\n                sceneName: data.name,\n                tableName: \"\",\n              };\n              copyToClipboard(JSON.stringify(CONFIG.DDBI.DEV.clippy, null, 2));\n            }\n          });\n        });\n      $(element)\n        .parent()\n        .mouseleave(function Unhovering() {\n          $(this).find(\"#ddb-table-name\").remove();\n          CONFIG.DDBI.DEV.tableInUse = false;\n        });\n    });\n}\n\nexport default buildNotes;\n","import { DDBAdventureFlags } from \"../../apps/DDBAdventureFlags.js\";\nimport buildNotes from \"./buildNotes.js\";\n\nconst POPUPS = {\n  json: null,\n  web: null,\n};\nconst renderPopup = (type, url) => {\n  if (POPUPS[type] && !POPUPS[type].close) {\n    POPUPS[type].focus();\n    POPUPS[type].location.href = url;\n  } else {\n    const ratio = window.innerWidth / window.innerHeight;\n    const width = Math.round(window.innerWidth * 0.5);\n    const height = Math.round(window.innerWidth * 0.5 * ratio);\n    POPUPS[type] = window.open(\n      url,\n      \"ddb_sheet_popup\",\n      `resizeable,scrollbars,location=no,width=${width},height=${height},toolbar=1`\n    );\n  }\n  return true;\n};\n\nfunction adventureFlags(app, html, data) {\n  if (!app.document.flags.ddb) return;\n  let journalContent = html.closest('.app').find('section.journal-page-content');\n  journalContent.addClass(\"ddb\");\n\n  if (!game.user.isGM) return;\n  const existingLink = html.closest('.app').find('.open-adventure-ddb-importer');\n  if (existingLink.length > 0) return;\n\n  const title = `Go to DDB`;\n  const whiteTitle = (game.settings.get(\"ddb-importer\", \"link-title-colour-white\")) ? \" white\" : \"\";\n  let button = $(`<a class=\"open-adventure-ddb-importer\" title=\"${title}\"><i class=\"fab fa-d-and-d-beyond${whiteTitle}\"></i></a>`);\n  button.click((event) => {\n    if (event.shiftKey && event.ctrlKey) {\n      new DDBAdventureFlags(app.document, {}).render(true);\n    } else {\n      event.preventDefault();\n      const flags = app.document.flags.ddb;\n      const bookSource = CONFIG.DDB.sources.find((book) => flags.bookCode.toLowerCase() === book.name.toLowerCase());\n      return renderPopup(\"web\", `https://www.dndbeyond.com/${bookSource.sourceURL}/${flags.slug}`);\n    }\n    return true;\n  });\n\n  let titleElement = html.closest('.app').find('.window-title');\n  button.insertAfter(titleElement);\n  buildNotes(html, data);\n\n}\n\n\nexport default adventureFlags;\n","import utils from \"../../lib/utils.js\";\nimport { createAndShowPlayerHandout } from \"./shared.js\";\n\nexport function showReadAlouds(html, data) {\n  if (!game.user.isGM) return;\n  const displayImages = game.settings.get(\"ddb-importer\", \"show-read-alouds-button\");\n  if (!displayImages) return;\n\n  // mark all read alouds\n  $(html)\n    .find(\"aside, blockquote, .read-aloud-text, .read-aloud, .adventure-read-aloud-text, .ddb-blockquote\")\n    .each((index, element) => {\n      const showPlayersJournalButton = $(\"<a class='ddbimporter-show-image'><i class='fas fa-book-open'></i>&nbsp;Create and Show Handout</a>\");\n      const toChatButton = $(\"<a class='ddbimporter-to-chat'><i class='fas fa-comment '></i>&nbsp;To Chat</a>\");\n\n      $(element).wrap(\"<div class='ddbimporter-image-container'></div>\");\n      // show the button on mouseenter of the image\n      $(element)\n        .parent()\n        .mouseenter(function addHover() {\n          // eslint-disable-next-line no-invalid-this\n          $(this).append(showPlayersJournalButton);\n          $(showPlayersJournalButton).click(async (event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            const name = await utils.namePrompt(\"What would you like to call the Handout?\");\n            if (name && name !== \"\") {\n              const bookCode = data.data?.flags?.ddb?.bookCode;\n              createAndShowPlayerHandout(name, element.outerHTML, \"text\", bookCode);\n            }\n          });\n          // eslint-disable-next-line no-invalid-this\n          $(this).append(toChatButton);\n          $(toChatButton).click((event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            ChatMessage.create({ content: element.outerHTML });\n          });\n        });\n      $(element)\n        .parent()\n        .mouseleave(function removeHover() {\n          // eslint-disable-next-line no-invalid-this\n          $(this).find(\"a.ddbimporter-show-image, a.ddbimporter-to-chat\").remove();\n        });\n    });\n}\n","/**\n * Shows notifcations and hints to the user\n */\nconst MARGIN = 10;\n\nconst registerNotifications = () => {\n  // register the notification global object\n\n  if ($(\"#ddbimporter-notifications\").length === 0) {\n    $(\"body\").append(`<div id=\"ddbimporter-notifications\"></div>`);\n  }\n  if ($(\"#ddbimporter-hints\").length === 0) {\n    $(\"body\").append(`<div id=\"ddbimporter-hints\"></div>`);\n  }\n\n  game.modules.get(\"ddb-importer\").api.notification = {\n    clear: () => {\n      $(\"#ddbimporter-notifications div\").fadeOut(200, () => {\n        $(\"#ddbimporter-notifications\").empty();\n      });\n    },\n    show: (message, timeout = 4000) => {\n      $(\"#ddbimporter-notifications\").css(\"left\", $(\"#players\").css(\"left\"));\n      // prettier-ignore\n      $(\"#ddbimporter-notifications\").css(\"bottom\", $(\"#players\").height() + (2 * MARGIN));\n\n      let note = $(`<div style=\"display: none\"></div>`).append(message);\n      $(\"#ddbimporter-notifications\").append(note);\n      $(note).fadeIn(200);\n\n      if (timeout)\n        setTimeout(() => {\n          $(note).fadeOut(200, () => {\n            $(note).remove();\n          });\n        }, timeout);\n      else\n        $(note).append('<p style=\"text-align: center; color: #7e7e7e; margin: 0px;\"><small>Click to close</small>');\n\n      $(note).on(\"click\", () => {\n        $(note).fadeOut(200, () => {\n          $(note).remove();\n        });\n      });\n    },\n  };\n  game.modules.get(\"ddb-importer\").api.hint = {\n    clear: () => {\n      $(\"#ddbimporter-hints div\").hide(200, () => {\n        $(\"#ddbimporter-hints\").empty();\n      });\n    },\n    show: (message, options = {}) => {\n      return new Promise((resolve) => {\n        $(\"#ddbimporter-hints\").css(\"width\", options.width ? options.width : 300);\n\n        // construct the note\n        let note = $(`<div style=\"display: none\"></div>`);\n        $(note).append(message);\n        $(note).append('<div class=\"buttons\"></div>');\n        $(\"#ddbimporter-hints\").append(note);\n        $(note).fadeIn(200);\n\n        if (!options.align) options.align = options.element ? \"RIGHT\" : \"CENTER\";\n\n        let anchor = {\n          width: 0,\n          height: 0,\n          top: Math.round(window.innerHeight / 2),\n          left: Math.round(window.innerWidth / 2),\n        };\n\n        if (options.element) {\n          anchor = Object.assign(\n            { width: $(options.element).width(), height: $(options.element).height() },\n            $(options.element).offset()\n          );\n        }\n        const noteInfo = Object.assign(\n          { width: $(\"#ddbimporter-hints\").width(), height: $(\"#ddbimporter-hints\").height() },\n          $(\"#ddbimporter-hints\").position()\n        );\n\n        switch (options.align) {\n          case \"RIGHT\":\n            $(\"#ddbimporter-hints\").css(\"top\", anchor.top);\n            $(\"#ddbimporter-hints\").css(\"left\", anchor.left + anchor.width + MARGIN);\n            break;\n          case \"LEFT\":\n            $(\"#ddbimporter-hints\").css(\"top\", anchor.top);\n            $(\"#ddbimporter-hints\").css(\"left\", anchor.left - noteInfo.width - MARGIN);\n            break;\n          case \"TOP\":\n            $(\"#ddbimporter-hints\").css(\"top\", anchor.top - noteInfo.height - MARGIN);\n            $(\"#ddbimporter-hints\").css(\"left\", anchor.left);\n            break;\n          case \"BOTTOM\":\n            $(\"#ddbimporter-hints\").css(\"top\", anchor.top + anchor.height + MARGIN);\n            $(\"#ddbimporter-hints\").css(\"left\", anchor.left);\n            break;\n\n          default:\n            // eslint-disable-next-line no-mixed-operators\n            $(\"#ddbimporter-hints\").css(\"top\", anchor.top - Math.round(noteInfo.height / 2));\n            // eslint-disable-next-line no-mixed-operators\n            $(\"#ddbimporter-hints\").css(\"left\", anchor.left - Math.round(noteInfo.width / 2));\n        }\n\n        if (options.buttons) {\n          for (let name of options.buttons) {\n            let btn = $(\"<button>\" + name + \"</button>\");\n            $(\"div.buttons\", note).append(btn);\n            $(btn).on(\"click\", () => {\n              $(note).fadeOut(100, () => {\n                $(note).remove();\n                resolve(name);\n              });\n            });\n          }\n        }\n        if (options.hide) {\n          $(options.hide.selector).on(options.hide.event, () => {\n            $(note).fadeOut(100, () => {\n              $(note).remove();\n              resolve(true);\n            });\n          });\n        }\n      });\n    },\n  };\n};\n\nexport default registerNotifications;\n","/* eslint-disable no-continue */\n\nimport DDBSimpleMacro from \"../../effects/DDBSimpleMacro.js\";\nimport logger from \"../../logger.js\";\n\n/**\n * Parse a roll string into a configuration object.\n * @param {string} match  Matched configuration string.\n * @returns {object}\n */\nfunction parseConfig(match) {\n  const config = { _config: match, values: [] };\n  for (const part of match.match(/(?:[^\\s\"]+|\"[^\"]*\")+/g)) {\n    if (!part) continue;\n    const [key, value] = part.split(\"=\");\n    const valueLower = value?.toLowerCase();\n    if (value === undefined) config.values.push(key.replace(/(^\"|\"$)/g, \"\"));\n    else if ([\"true\", \"false\"].includes(valueLower)) config[key] = valueLower === \"true\";\n    else if (Number.isNumeric(value)) config[key] = Number(value);\n    else config[key] = value.replace(/(^\"|\"$)/g, \"\");\n  }\n  return config;\n}\n\n/**\n * Add a dataset object to the provided element.\n * @param {HTMLElement} element  Element to modify.\n * @param {object} dataset       Data properties to add.\n * @private\n */\nfunction _addDataset(element, dataset) {\n  for (const [key, value] of Object.entries(dataset)) {\n    if (!key.startsWith(\"_\") && (key !== \"values\") && value) element.dataset[key] = value;\n  }\n}\n\n/* -------------------------------------------- */\n\n/**\n * Create a rollable link.\n * @param {string} label    Label to display.\n * @param {object} dataset  Data that will be added to the link for the rolling method.\n * @returns {HTMLElement}\n */\nfunction createFunctionLink(label, dataset) {\n  const span = document.createElement(\"span\");\n  span.classList.add(\"roll-link\");\n  _addDataset(span, dataset);\n\n  // Add main link\n  const link = document.createElement(\"a\");\n  link.dataset.action = \"roll\";\n  link.innerHTML = `<i class=\"fa-solid fa-wand\"></i>${label}`;\n  span.insertAdjacentElement(\"afterbegin\", link);\n\n  return span;\n}\n\n\nasync function enrichFunction(config, label, options) {\n  // console.warn(\"ENRICHER DEGUG\", {\n  //   config,\n  //   label,\n  //   options,\n  // });\n\n  if (!config.functionName || !config.functionType) return \"\";\n\n  const dataset = {\n    type: \"ddbfunction\",\n    functionName: config.functionName,\n    functionType: config.functionType,\n    functionParams: config.functionParams ?? null,\n  };\n\n  let foundItem;\n\n  const foundActor = options.relativeTo instanceof Item\n    ? options.relativeTo.parent\n    : options.relativeTo instanceof Actor ? options.relativeTo : null;\n\n  // If config is an Item ID\n  if (config.itemName && (/^\\w{16}$/).test(config.itemName) && foundActor) foundItem = foundActor.items.get(config.itemName);\n\n  // If config is a relative UUID\n  if (config.itemName?.startsWith(\".\")) {\n    try {\n      foundItem = await fromUuid(config.itemName, { relative: options.relativeTo });\n    } catch {\n      return null;\n    }\n  }\n\n  if (foundItem) {\n    if (!label) label = foundItem.name;\n    dataset.rollItemUuid = foundItem.uuid;\n    return createFunctionLink(label, dataset);\n  }\n\n  // if itemName is provided, use that as the relative item\n  dataset.rollItemActor = foundActor?.uuid;\n  if (!label) label = `DDB Macro`;\n  if (config.itemName) {\n    dataset.rollItemName = config.itemName;\n    return createFunctionLink(label, dataset);\n  }\n\n  // Finally, use relative item\n  dataset.rollItemUuid = options.relativeTo.uuid;\n  return createFunctionLink(label, dataset);\n}\n\n/**\n * Run the macro from the enricher\n * @param {RegExpMatchArray} match       The regular expression match result.\n * @param {EnrichmentOptions} options    Options provided to customize text enrichment.\n * @returns {Promise<HTMLElement|null>}  An HTML element to insert in place of the matched text or null to\n *                                       indicate that no replacement should be made.\n */\nasync function macroEnricher(match, options) {\n  let { type, config, label } = match.groups;\n  config = parseConfig(config);\n  config._input = match[0];\n  switch (type.toLowerCase()) {\n    case \"dbbfunc\":\n    case \"dbbifunc\":\n    case \"ddbfunc\":\n    case \"ddbifunc\":\n      return enrichFunction(config, label, options);\n    // no default\n  }\n  return null;\n}\n\n/**\n * Perform the provided function call.\n * @param {Event} event  The click event triggering the action.\n * @returns {Promise}\n */\nasync function runFunction(event) {\n  const target = event.target.closest('.roll-link, [data-action=\"rollRequest\"], [data-action=\"concentration\"]');\n  if (!target) return;\n  event.stopPropagation();\n\n  const { functionName, functionParams, functionType, rollItemActor, rollItemUuid, type, rollItemName } = target.dataset;\n\n  if (type !== \"ddbfunction\") return;\n\n  const action = event.target.closest(\"a\")?.dataset.action ?? \"roll\";\n\n  if (action !== \"roll\") return;\n\n  target.disabled = true;\n\n  const actor = rollItemActor ? await fromUuid(rollItemActor) : null;\n\n  try {\n    const ids = {\n      effect: null,\n      actor: rollItemActor,\n      token: actor?.isOwner ? canvas.tokens.controlled[0]?.document?.uuid : null,\n      item: rollItemUuid,\n      origin: rollItemUuid,\n    };\n    const context = {};\n    const scope = {\n      rollItemName,\n      functionParams,\n      rollItemActor,\n      rollItemUuid,\n    };\n\n    logger.debug(`Calling DDBSimpleMacro execution`, {\n      functionType,\n      functionName,\n      context,\n      ids,\n      functionParams,\n      scope,\n    });\n\n\n    await DDBSimpleMacro.execute(functionType, functionName, context, ids, scope);\n  } finally {\n    target.disabled = false;\n  }\n}\n\nexport function registerCustomEnrichers() {\n  CONFIG.TextEditor.enrichers.push(\n    {\n      pattern:\n        /\\[\\[\\/(?<type>ddbifunc) (?<config>[^\\]]+)]](?:{(?<label>[^}]+)})?/gi,\n      enricher: macroEnricher,\n    },\n  );\n\n  document.body.addEventListener(\"click\", runFunction);\n}\n","import \"./hooks/init/extendClasses.js\";\nimport logger, { setupLogger } from \"./logger.js\";\n\n// init hooks\nimport { registerApi } from \"./api.js\";\nimport { chatHooks } from \"./hooks/init/chatHooks.js\";\nimport adventureImporter from \"./hooks/init/adventureImporter.js\";\n\n// ready hooks\nimport registerSheets from \"./hooks/ready/registerSheets.js\";\nimport checkCompendiums from \"./hooks/ready/checkCompendiums.js\";\nimport registerGameSettings from \"./hooks/ready/registerGameSettings.js\";\nimport { itemSheets } from \"./hooks/ready/items.js\";\nimport checkVersion from \"./hooks/ready/checkVersion.js\";\nimport { loadDDBConfig } from \"./hooks/ready/ddbConfig.js\";\nimport { anchorInjection } from \"./hooks/ready/anchorInjection.js\";\nimport { setupUpdateCreatedOrigins } from \"./hooks/ready/originFixing.js\";\nimport DDBEffectHooks from \"./effects/DDBEffectHooks.js\";\n\n// monster muncher\nimport { earlySettings } from \"./hooks/renderMuncher/earlySettings.js\";\nimport { addMuncher } from \"./hooks/renderMuncher/addMuncher.js\";\nimport { addEncounterMuncher } from \"./hooks/renderMuncher/addEncounterMuncher.js\";\n\n// socket messaging\nimport { setupSockets } from \"./hooks/socket/sockets.js\";\n\n// image hooks\nimport { linkTables } from \"./hooks/renderJournalSheet/linkTables.js\";\nimport { linkImages } from \"./hooks/renderJournalSheet/linkImages.js\";\nimport adventureFlags from \"./hooks/renderJournalSheet/adventure.js\";\nimport { showReadAlouds } from \"./hooks/renderJournalSheet/linkReadAlouds.js\";\n\nimport registerNotifications from \"./lib/Notification.js\";\n\nimport { activateUpdateHooks } from \"./updater/character.js\";\nimport { registerCustomEnrichers } from \"./hooks/ready/enrichers.js\";\nimport DDBSummonsManager from \"./parser/companions/DDBSummonsManager.js\";\n\n\n// foundry is initializing\nexport function init() {\n  earlySettings();\n  setupLogger();\n  registerApi();\n  chatHooks();\n  adventureImporter();\n  logger.info(\"Init complete\");\n  DDBEffectHooks.loadHooks();\n  registerCustomEnrichers();\n}\n\n// foundry is ready\nexport async function onceReady() {\n  // register the game settings\n  await registerGameSettings();\n\n  // check for valid compendiums\n  checkCompendiums().then(() => {\n    DDBSummonsManager.generateFixedSummons();\n  });\n\n  // notificaitons\n  registerNotifications();\n  loadDDBConfig();\n\n  // delay the startup just a tiny little bit\n  setTimeout(() => {\n    checkVersion();\n    // register the D&DBeyond Button on the character sheets\n    registerSheets();\n    itemSheets();\n    setupUpdateCreatedOrigins();\n    activateUpdateHooks();\n  }, 500);\n\n  anchorInjection();\n  logger.info(\"OnceReady complete\");\n}\n\nexport function onReady() {\n  setupSockets();\n}\n\nexport function renderSidebarTab(app, html) {\n  addEncounterMuncher(app, html);\n  addMuncher(app, html);\n}\n\nexport function renderItemSheet(sheet, html) {\n  linkTables(\"item\", html);\n  // link images disabled un v10\n  // linkImages(html);\n}\n\nexport function renderJournalSheet(sheet, html, data) {\n  if (data.cssClass !== \"editable\") {\n    linkTables(\"journal\", html);\n    linkImages(html, data);\n    showReadAlouds(html, data);\n  }\n  adventureFlags(sheet, html, data);\n}\n","import DDBSources from \"./DDBSources.js\";\nimport logger from \"../logger.js\";\nimport FileHelper from \"../lib/FileHelper.js\";\n\n/**\n   * Extracts all notes that have been placed by ddb-importer\n   * Creates the expected data structure for the database by\n   * getting the real label from the appropriate Journal Entry\n   * @param {Scene} scene The scene to extract the notes from\n  */\nfunction getNotes(scene, bookCode) {\n  // get all notes in the Journal related to this scene\n  const relatedJournalEntries = game.journal.filter((journal) =>\n    journal.flags.ddb?.bookCode && journal.flags.ddb.bookCode === bookCode\n  );\n\n  // get all notes placed on the map\n  const journalNotes = scene.notes\n    // the user might have placed a note, unless it is based on an imported Journal Entry, we will not carry\n    // that one over\n    .filter((note) => relatedJournalEntries.some((journal) => journal.id === note.entryId))\n    .map((note) => {\n      const journal = relatedJournalEntries.find((journal) => journal.id === note.entryId);\n      const page = note.pageId\n        ? journal.pages.find((page) => page._id === note.pageId)\n        : journal;\n      const index = parseInt(journal.flags.ddb.ddbId);\n      // removed un-needed userdata\n      const pageFlags = page.flags.ddb;\n      const noteFlags = note.flags.ddb;\n      const flags = foundry.utils.duplicate(pageFlags);\n      foundry.utils.mergeObject(flags, noteFlags, { overwrite: true, insertKeys: true, insertValues: true });\n      if (flags?.userData) delete flags.userData;\n      const label = flags?.labelName && flags.labelName.trim() !== \"\"\n        ? flags.labelName\n        : noteFlags?.slugLink && noteFlags.slugLink.trim() !== \"\"\n          ? note.text\n          : page.name;\n\n      logger.warn(\"note details\", {\n        note,\n        page,\n        icon: note.texture.src,\n        journal,\n        flags,\n        pageFlags,\n        noteFlags,\n        label,\n      });\n\n      return {\n        index,\n        pageId: page._id,\n        texture: note.texture,\n        label,\n        flags: {\n          ddb: flags,\n        },\n        iconSize: note.iconSize,\n        iconTint: note.iconTint,\n        textColor: note.textColor,\n        textAnchor: note.textAnchor,\n        x: note.x,\n        y: note.y,\n      };\n    })\n    .reduce((notes, note) => {\n      const idx = notes.find((n) => n.index === note.index && n.pageId === note.pageId && note.label === n.label);\n      if (idx) {\n        idx.positions.push({ x: note.x, y: note.y });\n      } else {\n        const n = {\n          label: note.label,\n          texture: note.texture,\n          flags: note.flags,\n          index: note.index,\n          iconSize: note.iconSize,\n          iconTint: note.iconTint,\n          textColor: note.textColor,\n          textAnchor: note.textAnchor,\n          positions: [{ x: note.x, y: note.y }]\n        };\n        notes.push(n);\n      }\n      return notes;\n    }, [])\n    .sort((a, b) => {\n      return a.index - b.index;\n    });\n\n  const unLinkedNotes = scene.notes\n    .filter((note) => !note.entryId)\n    .map((note) => ({\n      label: note.text,\n      texture: note.texture,\n      flags: { ddb: {\n        noLink: true,\n      } },\n      iconSize: note.iconSize,\n      iconTint: note.iconTint,\n      textColor: note.textColor,\n      textAnchor: note.textAnchor,\n      positions: [{ x: note.x, y: note.y }]\n    }));\n\n  const notes = journalNotes.concat(unLinkedNotes)\n    .map((note) => ({\n      label: note.label,\n      flags: note.flags,\n      texture: note.texture,\n      positions: note.positions,\n      iconSize: note.iconSize,\n      iconTint: note.iconTint,\n      textColor: note.textColor,\n      textAnchor: note.textAnchor,\n    }));\n\n  return notes;\n}\n\n/**\n * Prepares the scene data for download\n * @param {Scene} scene\n */\nexport function collectSceneData(scene, bookCode) {\n  const notes = getNotes(scene, bookCode);\n\n  const data = {\n    flags: scene.flags,\n    background: foundry.utils.deepClone(scene.background),\n    name: scene.name,\n    navName: scene.navName,\n    // dimensions\n    width: scene.width,\n    height: scene.height,\n    // grid\n    grid: scene.grid,\n    padding: scene.padding,\n    // initial\n    initial: scene.initial,\n    // customization\n    backgroundColor: scene.backgroundColor,\n    walls: scene.walls.map((wall) => {\n      const w = wall.toObject();\n      delete w._id;\n      return w;\n    }),\n    //\n    drawings: scene.drawings,\n    weather: scene.weather,\n    // lights\n    darkness: scene.darkness,\n    tokenVision: scene.tokenVision,\n    globalLight: scene.globalLight,\n    globalLightThreshold: scene.globalLightThreshold,\n    lights: scene.lights.map((light) => {\n      const l = light.toObject();\n      delete l._id;\n      return l;\n    }),\n  };\n\n  delete data.background.src;\n\n  if (!data.flags.ddb) data.flags.ddb = {};\n  data.flags.ddb.foundryVersion = game.version;\n\n  if (data.flags.ddb.tokens) delete data.flags.ddb.tokens;\n  data.flags.ddb.tokens = scene.tokens\n    .filter((token) => !token.actorLink)\n    .map((token) => {\n      let result = {\n        _id: token._id,\n        name: token.name,\n        width: token.width,\n        height: token.height,\n        scale: token.scale,\n        x: token.x,\n        y: token.y,\n        disposition: token.disposition,\n        flags: token.flags,\n        actorLink: false,\n        bar1: { attribute: \"attributes.hp\" },\n        effects: [],\n        elevation: token.elevation,\n        hidden: token.hidden,\n        tint: token.tint,\n        actorData: token.delta.toObject(),\n        light: token.light,\n      };\n\n      // the token actor flags here help us match up actors using the DDB ID\n      if (token.actor) {\n        if (token.actor.flags.ddbimporter) {\n          result.flags.ddbActorFlags = token.actor.flags.ddbimporter;\n          result.flags.ddbActorFlags.name = token.actor.prototypeToken?.name ? token.actor.prototypeToken.name : token.actor.name;\n        }\n      }\n      if (foundry.utils.hasProperty(token, \"token.actorData.flags\")) delete token.actorData.flags[\"token-action-hud-core\"];\n      delete token.flags[\"token-action-hud-core\"];\n      delete token.flags[\"simbuls-cover-calculator\"];\n      delete token.flags[\"monks-enhanced-journal\"];\n      delete token.flags[\"monks-tokenbar\"];\n      delete token.flags[\"tagger\"];\n      delete token.flags[\"monks-combat-marker\"];\n      delete token.flags[\"image-hover\"];\n      delete token.flags[\"elevation-drag-ruler\"];\n\n      return result;\n    });\n\n\n  // removed un-needed userdata\n  if (data.flags.ddb?.userData) delete data.flags.ddb.userData;\n\n  data.flags.ddb.notes = notes;\n  data.flags.ddb.img = `assets/${scene.background.src.split(\"assets/\").pop()}`;\n\n  if (!data.flags.ddbimporter) data.flags.ddbimporter = {};\n  data.flags.ddbimporter['version'] = game.modules.get(\"ddb-importer\").version;\n\n  return data;\n}\n\nfunction getCompendiumScenes(compendiumCollection, selectedId = null, selectedName = null) {\n  let scenes = [];\n  const compendium = game.packs.find((pack) => pack.collection === compendiumCollection);\n  if (compendium) {\n    compendium.index.forEach((scene) => {\n      const option = {\n        _id: scene._id,\n        name: scene.name,\n        selected: (selectedId && selectedId == scene._id) || (selectedName && selectedName.trim().includes(scene.name)),\n      };\n      scenes.push(option);\n    });\n  }\n\n  return scenes;\n}\n\nconst ddbFlags = [\"ddb\", \"ddbimporter\"];\nconst allowedFlags = [\"stairways\", \"perfect-vision\", \"dynamic-illumination\"];\n\nexport class SceneEnhancerExport extends Application {\n\n  // eslint-disable-next-line complexity\n  constructor(scene) {\n    super();\n    this.sceneSet = false;\n    this.compendiumBookSet = false;\n    this.downloadBookSet = false;\n\n    this.scene = scene;\n    const sceneExportFlags = this.scene.flags.ddbimporter?.export;\n    const lastCompendium = localStorage.getItem(\"ddb-last-compendium\");\n    const lastBook = localStorage.getItem(\"ddb-last-book\");\n\n    this.description = sceneExportFlags?.description || \"\";\n    this.url = sceneExportFlags?.url || \"\";\n    this.compendium = sceneExportFlags?.compendium ?? lastCompendium;\n    this.compendiumSceneId = sceneExportFlags?.scene;\n    this.bookCode = this.scene.flags?.ddb?.bookCode.toLowerCase() ?? lastBook;\n    this.compendiumScenes = this.compendium ? getCompendiumScenes(this.compendium, this.compendiumSceneId, this.scene.name) : [];\n\n    if (this.compendiumScenes && this.compendiumScenes.some((s) => s.selected === true)) this.sceneSet = true;\n\n    this.compendiums = game.packs\n      .filter((pack) => pack.metadata?.type === \"Scene\")\n      .map((pack) => {\n        if (this.compendium && this.compendium === pack.collection) pack.selected = true;\n        else pack.selected = false;\n        return pack;\n      })\n      .sort((a, b) => a.metadata.label.localeCompare(b.metadata.label));\n\n    const selectedBooks = this.bookCode\n      ? CONFIG.DDB.sources.filter((s) => s.name.toLowerCase() === this.bookCode).map((s) => s.id)\n      : [];\n    this.books = DDBSources.getSourcesLookups(selectedBooks).map((b) => {\n      if (b.selected) {\n        this.compendiumBookSet = true;\n        this.downloadBookSet = true;\n      }\n      return {\n        code: b.acronym.toLowerCase(),\n        name: b.label,\n        selected: b.selected,\n      };\n    }).sort((a, b) => a.name.localeCompare(b.name));\n\n    this.exportOptionsCompendium = {\n      actors: sceneExportFlags?.actors !== undefined ? sceneExportFlags.actors : true,\n      notes: sceneExportFlags?.notes !== undefined ? sceneExportFlags.notes : true,\n      lights: sceneExportFlags?.lights !== undefined ? sceneExportFlags.lights : false,\n      walls: sceneExportFlags?.walls !== undefined ? sceneExportFlags.walls : false,\n      drawings: sceneExportFlags?.drawings !== undefined ? sceneExportFlags.drawings : false,\n      config: sceneExportFlags?.config !== undefined ? sceneExportFlags.config : false,\n    };\n    this.exportOptionsDownload = {\n      actors: sceneExportFlags?.actors !== undefined ? sceneExportFlags.actors : true,\n      notes: sceneExportFlags?.notes !== undefined ? sceneExportFlags.notes : true,\n      lights: sceneExportFlags?.lights !== undefined ? sceneExportFlags.lights : true,\n      walls: sceneExportFlags?.walls !== undefined ? sceneExportFlags.walls : true,\n      drawings: sceneExportFlags?.drawings !== undefined ? sceneExportFlags.drawings : true,\n      config: sceneExportFlags?.config !== undefined ? sceneExportFlags.config : true,\n    };\n    this.compendiumDisabled = !this.sceneSet || !this.compendiumBookSet;\n    this.downloadDisabled = !this.downloadBookSet || this.url === \"\" || !this.url.startsWith(\"http\");\n  }\n\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.baseApplication = \"SceneEnhancerExport\";\n    options.id = \"ddb-importer-scene-enhancer\";\n    options.template = \"modules/ddb-importer/handlebars/enhance-export.hbs\";\n    options.width = 500;\n    options.resizable = false;\n    options.height = \"auto\";\n    options.classes = [\"ddb-muncher\", \"sheet\"];\n    options.tabs = [{ navSelector: \".tabs\", contentSelector: \"div\", initial: \"compendium\" }];\n    return options;\n  }\n\n  get title() {\n    return `DDB Importer Scene Enhancer Exporter: ${this.scene.name}`;\n  }\n\n  /** @override */\n  getData() {\n    let templateData = {\n      sceneName: this.scene.name,\n      compendiums: this.compendiums,\n      compendiumScenes: this.compendiumScenes,\n      description: this.description,\n      books: this.books,\n      url: this.url,\n      exportOptionsCompendium: this.exportOptionsCompendium,\n      exportOptionsDownload: this.exportOptionsDownload,\n      compendiumDisabled: this.compendiumDisabled,\n      downloadDisabled: this.downloadDisabled,\n    };\n\n    return templateData;\n  }\n\n  checkState() {\n    if (this.sceneSet && this.compendiumBookSet) {\n      this.compendiumDisabled = false;\n      $(\"#compendium-button\").prop(\"disabled\", false);\n    } else {\n      $(\"#compendium-button\").prop(\"disabled\", true);\n    }\n    if (this.downloadBookSet && this.url !== \"\" && this.url.startsWith(\"http\")) {\n      this.downloadDisabled = false;\n      $(\"#download-button\").prop(\"disabled\", false);\n    } else {\n      $(\"#download-button\").prop(\"disabled\", true);\n    }\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n    $(\"#ddb-importer-scene-enhancer\").css(\"height\", \"auto\");\n\n    html.find('#compendium-form').submit(async (event) => {\n      const form = document.querySelector('#compendium-form');\n      const data = Object.fromEntries(new FormData(form).entries());\n      this.buttonClick(event, data);\n    });\n\n    html.find('#download-form').submit(async (event) => {\n      const form = document.querySelector('#download-form');\n      const data = Object.fromEntries(new FormData(form).entries());\n      this.buttonClick(event, data);\n    });\n\n    html.find(\"#select-compendium\").on(\"change\", async () => {\n      const compendiumSelection = html.find(\"#select-compendium\");\n\n      // get selected campaign from html selection\n      const compendiumCollection = compendiumSelection[0].selectedOptions[0]\n        ? compendiumSelection[0].selectedOptions[0].value\n        : undefined;\n\n      let sceneList = \"\";\n\n      if (compendiumCollection && compendiumCollection !== \"\") {\n        const scenes = getCompendiumScenes(compendiumCollection);\n        sceneList = `<option value=\"\">Select...</option>`;\n        scenes.forEach((scene) => {\n          const selected = scene.selected ? \" selected\" : \"\";\n          sceneList += `<option value=\"${scene._id}\"${selected}>${scene.name}</option>`;\n        });\n      }\n      const sceneSelection = html.find(\"#select-scene\");\n      sceneSelection[0].innerHTML = sceneList;\n    });\n\n    html.find(\"#select-scene\").on(\"change\", async () => {\n      const sceneSelection = html.find(\"#select-scene\");\n      const scene = sceneSelection[0].selectedOptions[0]\n        ? sceneSelection[0].selectedOptions[0].value\n        : undefined;\n      this.sceneSet = scene && scene !== \"\";\n      this.checkState();\n    });\n\n    html.find(\"#select-book-compendium\").on(\"change\", async () => {\n      const bookSelection = html.find(\"#select-book-compendium\");\n      const book = bookSelection[0].selectedOptions[0]\n        ? bookSelection[0].selectedOptions[0].value\n        : undefined;\n      this.compendiumBookSet = book && book !== \"\";\n      this.checkState();\n    });\n\n    html.find(\"#select-book-download\").on(\"change\", async () => {\n      const bookSelection = html.find(\"#select-book-download\");\n      const book = bookSelection[0].selectedOptions[0]\n        ? bookSelection[0].selectedOptions[0].value\n        : undefined;\n      this.downloadBookSet = book && book !== \"\";\n      this.checkState();\n    });\n\n    html.find(\"#download-url\").on(\"change\", async () => {\n      const bookSelection = html.find(\"#download-url\");\n      const url = bookSelection[0].value;\n      if (url && url !== \"\" && url.startsWith(\"http\")) {\n        this.url = url;\n      }\n      this.checkState();\n    });\n\n  }\n\n\n  async buttonClick(event, formData) { // eslint-disable-line class-methods-use-this\n    event.preventDefault();\n\n    let sceneFlags = foundry.utils.duplicate(this.scene.flags);\n\n    if (!sceneFlags.ddb) sceneFlags.ddb = {};\n    if (!sceneFlags.ddbimporter) sceneFlags.ddbimporter = {};\n    if (!sceneFlags.ddbimporter.export) sceneFlags.ddbimporter.export = {};\n\n    sceneFlags.ddb[\"bookCode\"] = formData[\"select-book\"];\n    localStorage.setItem(\"ddb-last-book\", formData[\"select-book\"]);\n    sceneFlags.ddbimporter.export['description'] = formData[\"description\"];\n    sceneFlags.ddbimporter.export['actors'] = formData[\"export-actors\"] == \"on\";\n    sceneFlags.ddbimporter.export['notes'] = formData[\"export-notes\"] == \"on\";\n    sceneFlags.ddbimporter.export['lights'] = formData[\"export-lights\"] == \"on\";\n    sceneFlags.ddbimporter.export['walls'] = formData[\"export-walls\"] == \"on\";\n    sceneFlags.ddbimporter.export['drawings'] = formData[\"export-drawings\"] == \"on\";\n    sceneFlags.ddbimporter.export['config'] = formData[\"export-config\"] == \"on\";\n\n    if (formData[\"download-url\"]) {\n      sceneFlags.ddbimporter.export['url'] = formData[\"download-url\"];\n    } else {\n      sceneFlags.ddbimporter.export['compendium'] = formData[\"select-compendium\"];\n      localStorage.setItem(\"ddb-last-compendium\", formData[\"select-compendium\"]);\n      sceneFlags.ddbimporter.export['scene'] = formData[\"select-scene\"];\n    }\n\n    await this.scene.update({ flags: sceneFlags });\n\n    let sceneData = collectSceneData(this.scene, formData[\"select-book\"]);\n\n    Object.keys(sceneData.flags).forEach((flag) => {\n      if (!allowedFlags.includes(flag) && !ddbFlags.includes(flag)) delete sceneData.flags[flag];\n    });\n\n    if (formData[\"export-actors\"] !== \"on\") delete sceneData.flags.ddb.tokens;\n    if (formData[\"export-notes\"] !== \"on\") delete sceneData.flags.ddb.notes;\n    if (formData[\"export-lights\"] !== \"on\") delete sceneData.lights;\n    if (formData[\"export-walls\"] !== \"on\") delete sceneData.walls;\n    if (formData[\"export-drawings\"] !== \"on\") delete sceneData.drawings;\n    if (formData[\"export-config\"] !== \"on\") {\n      delete sceneData.navName;\n      delete sceneData.width;\n      delete sceneData.height;\n      delete sceneData.grid;\n      delete sceneData.gridDistance;\n      delete sceneData.gridType;\n      delete sceneData.gridUnits;\n      delete sceneData.shiftX;\n      delete sceneData.shiftY;\n      delete sceneData.padding;\n      delete sceneData.weather;\n      delete sceneData.darkness;\n      delete sceneData.tokenVision;\n      delete sceneData.globalLight;\n      delete sceneData.globalLightThreshold;\n      delete sceneData.backgroundColor;\n      delete sceneData.initial;\n      Object.keys(sceneData.flags).forEach((flag) => {\n        if (!ddbFlags.includes(flag)) delete sceneData.flags[flag];\n      });\n    }\n\n    logger.debug(sceneData);\n    const name = sceneData.name.replace(/[^a-z0-9_-]/gi, '').toLowerCase();\n    const sceneRef = `ddb-enhanced-scene-${name}`;\n    FileHelper.download(JSON.stringify(sceneData, null, 4), `${sceneRef}.json`, \"application/json\");\n\n    this.close();\n  }\n}\n\n","// import utils from \"../../lib/utils.js\";\nimport FileHelper from \"../../lib/FileHelper.js\";\nimport { collectSceneData, SceneEnhancerExport } from \"../../apps/SceneEnhancerExport.js\";\n\nfunction getSceneId(li) {\n  return $(li).attr(\"data-document-id\")\n    ? $(li).attr(\"data-document-id\")\n    : $(li).attr(\"data-scene-id\")\n      ? $(li).attr(\"data-scene-id\")\n      : $(li).attr(\"data-entity-id\");\n}\n\nexport default function (html, contextOptions) {\n  contextOptions.push({\n    name: \"ddb-importer.scenes.download\",\n    callback: (li) => {\n      const scene = game.scenes.get(getSceneId(li));\n      const data = collectSceneData(scene, scene.flags.ddb.bookCode);\n      const bookCode = `${scene.flags.ddb.bookCode}-${scene.flags.ddb.ddbId}`;\n      const cobaltId = scene.flags.ddb?.cobaltId ? `-${scene.flags.ddb.cobaltId}` : \"\";\n      const parentId = scene.flags.ddb?.parentId ? `-${scene.flags.ddb.parentId}` : \"\";\n      const contentChunkId = scene.flags.ddb?.contentChunkId ? `-${scene.flags.ddb.contentChunkId}` : \"\";\n      const name = scene.name.replace(/[^a-z0-9_-]/gi, '').toLowerCase();\n      const sceneRef = `${bookCode}${cobaltId}${parentId}${contentChunkId}-${name}`;\n      return FileHelper.download(JSON.stringify(data, null, 4), `${sceneRef}-scene.json`, \"application/json\");\n    },\n    condition: (li) => {\n      const scene = game.scenes.get(getSceneId(li));\n      const sceneDownload = game.settings.get(\"ddb-importer\", \"allow-scene-download\");\n      const allowDownload = game.user.isGM && sceneDownload && scene.flags.ddb?.ddbId;\n      return allowDownload;\n    },\n    icon: '<i class=\"fas fa-share-alt\"></i>',\n  });\n\n  contextOptions.push({\n    name: \"ddb-importer.scenes.third-party-download\",\n    callback: (li) => {\n      const scene = game.scenes.get(getSceneId(li));\n      new SceneEnhancerExport(scene).render(true);\n    },\n    condition: (li) => {\n      const scene = game.scenes.get(getSceneId(li));\n      const sceneDownload = game.settings.get(\"ddb-importer\", \"allow-third-party-scene-download\");\n      const allowDownload = game.user.isGM && sceneDownload && !scene.flags.ddb?.ddbId;\n      return allowDownload;\n    },\n    icon: '<i class=\"fas fa-share-alt\"></i>',\n  });\n}\n","import {\n  init,\n  onReady,\n  onceReady,\n  renderSidebarTab,\n  renderItemSheet,\n  renderJournalSheet,\n} from \"./hooks.js\";\nimport extendSceneNavigationContext from \"./hooks/navigationContext/extendSceneNavigationContext.js\";\n\n// register hooks\nHooks.once(\"init\", init);\nHooks.once(\"ready\", onceReady);\nHooks.on(\"ready\", onReady);\nHooks.on(\"renderSidebarTab\", renderSidebarTab);\nHooks.on(\"renderJournalPageSheet\", renderJournalSheet);\nHooks.on(\"renderItemSheet\", renderItemSheet);\nHooks.on(\"getSceneNavigationContext\", extendSceneNavigationContext);\nHooks.on(\"getSceneDirectoryEntryContext\", extendSceneNavigationContext);\n\n// console.warn(\"SILENT MODE FOR DEBUG\");\n// const includeRgx = new RegExp(\"/module/ddb-importer/\");\n// CONFIG.compatibility.includePatterns.push(includeRgx);\n"],"names":[],"sourceRoot":""}