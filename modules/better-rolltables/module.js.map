{"version":3,"file":"module.js","sources":["../../src/scripts/constants/settings.js","../../src/scripts/constants/constants.js","../../src/scripts/lib/Logger.js","../../src/scripts/lib/retrieve-helpers.js","../../src/scripts/apps/compendium-to-rolltable/compendium-to-rollTable-dialog.js","../../src/scripts/lib/lib.js","../../src/scripts/core/utils.js","../../src/scripts/lib/compendiums-helpers.js","../../src/scripts/lib/item-piles-helpers.js","../../src/scripts/tables/better/brt-helper.js","../../src/scripts/apps/compendium-to-rolltable/compendium-to-rollTable-dialog-special-harvest-.js","../../src/scripts/apps/compendium-to-rolltable/compendium-to-rollTable-helpers.js","../../src/scripts/apps/roll-from-compendium-as-rolltable/roll-from-compendium-as-rolltable-helpers.js","../../src/scripts/tables/loot/loot-chat-card.js","../../src/scripts/tables/story/story-bool-condition.js","../../src/scripts/tables/story/story-builder.js","../../src/scripts/tables/story/story-helpers.js","../../src/scripts/tables/story/story-chat-card.js","../../src/scripts/tables/harvest/harvest-chat-card.js","../../src/scripts/socket.js","../../src/scripts/tables/better/brt-chat-card.js","../../src/scripts/tables/harvest/harvest-helpers.js","../../src/scripts/core/brt-table.js","../../src/scripts/core/brt-table-results.js","../../src/scripts/better-tables.js","../../src/scripts/apps/rolltable-to-actor/rolltable-to-actor-helpers.js","../../src/scripts/tables/loot/loot-helpers.js","../../src/scripts/apps/actor-list/brt-actor-list.js","../../src/scripts/API.js","../../src/scripts/settings.js","../../src/scripts/core/brt-result-editor.js","../../src/scripts/tables/better/brt-rolltable-config.js","../../src/scripts/tables/loot/loot-rolltable-config.js","../../src/scripts/tables/story/story-rolltable-config.js","../../src/scripts/tables/harvest/harvest-rolltable-config.js","../../src/scripts/hooks/init.js","../../src/module.js"],"sourcesContent":["// import { SYSTEMS } from \"../systems\";\n\nconst SETTINGS = {\n    // Client settings\n\n    // Module Settings\n\n    SPELL_COMPENDIUM_KEY: \"default-spell-compendium\",\n    // LOOT_SHEET_TO_USE_KEY: \"loot-sheet-to-use\",\n    SHOW_REROLL_BUTTONS: \"show-reroll-buttons\",\n    SHOW_OPEN_BUTTONS: \"show-open-buttons\",\n    // USE_CONDENSED_BETTERROLL: \"use-condensed-betterroll\",\n    ADD_ROLL_IN_COMPENDIUM_CONTEXTMENU: \"add-roll-on-compendium-contextmenu\",\n    ADD_ROLL_IN_ROLLTABLE_CONTEXTMENU: \"add-roll-on-rolltable-contextmenu\",\n    SHOW_WARNING_BEFORE_REROLL: \"show-warning-before-reroll\",\n    STICK_ROLLTABLE_HEADER: \"stick-rolltable-header\",\n    ROLL_TABLE_FROM_JOURNAL: \"roll-table-from-journal\",\n    // ENABLE_OLD_BEHAVIOR: \"enableOldBehavior\",\n\n    // Loot\n    // SHOW_CURRENCY_SHARE_BUTTON: \"show-currency-share-button\",\n    // ALWAYS_SHOW_GENERATED_LOOT_AS_MESSAGE: \"always-show-generated-loot-as-message\",\n\n    // Harvest\n    // ALWAYS_SHOW_GENERATED_HARVEST_AS_MESSAGE: \"always-show-generated-harvest-as-message\",\n\n    TAGS: {\n        USE: \"use-tags\",\n        DEFAULTS: \"tag-defaults\",\n    },\n\n    // Style settings\n\n    /*\n    // System Settings\n    DEFAULT_ACTOR_NPC_TYPE: \"systemDefaultActorNpcType\",\n    DEFAULT_LOOT_SHEET: \"systemDefaultLootSheet\",\n    DEFAULT_SPELL_COMPENDIUM: \"systemDefaultSpellCompendium\",\n    QUANTITY_PROPERTY_PATH: \"systemQuantityPropertyPath\",\n    WEIGHT_PROPERTY_PATH: \"systemWeightPropertyPath\",\n    PRICE_PROPERTY_PATH: \"systemPricePropertyPath\",\n    SPELL_LEVEL_PATH: \"systemSpellLevelPath\",\n    ITEM_LOOT_TYPE: \"systemItemLootType\",\n    SCROLL_REGEX: \"systemScrollRegex\",\n    MATCH_ATTRIBUTES_BLACKLIST: \"systemMatchAttributesBlacklist\",\n\n    // Hidden settings\n    SYSTEM_FOUND: \"systemFound\",\n    SYSTEM_NOT_FOUND_WARNING_SHOWN: \"systemNotFoundWarningShown\",\n    SYSTEM_VERSION: \"systemVersion\",\n    \n    GET_DEFAULT() {\n        return foundry.utils.deepClone(SETTINGS.DEFAULTS());\n    },\n\n    GET_SYSTEM_DEFAULTS() {\n        return Object.fromEntries(\n            Object.entries(SETTINGS.GET_DEFAULT()).filter((entry) => {\n                return entry[1].system;\n            }),\n        );\n    },\n\n    DEFAULTS: () => ({\n        [SETTINGS.DEFAULT_ACTOR_NPC_TYPE]: {\n            scope: \"world\",\n            config: false,\n            system: true,\n            type: String,\n            default: SYSTEMS.DATA.DEFAULT_ACTOR_NPC_TYPE,\n        },\n        [SETTINGS.DEFAULT_LOOT_SHEET]: {\n            scope: \"world\",\n            config: false,\n            system: true,\n            type: String,\n            default: SYSTEMS.DATA.DEFAULT_LOOT_SHEET,\n        },\n        [SETTINGS.DEFAULT_SPELL_COMPENDIUM]: {\n            scope: \"world\",\n            config: false,\n            system: true,\n            type: String,\n            default: SYSTEMS.DATA.DEFAULT_SPELL_COMPENDIUM,\n        },\n        [SETTINGS.QUANTITY_PROPERTY_PATH]: {\n            scope: \"world\",\n            config: false,\n            system: true,\n            type: String,\n            default: SYSTEMS.DATA.QUANTITY_PROPERTY_PATH,\n        },\n        [SETTINGS.WEIGHT_PROPERTY_PATH]: {\n            scope: \"world\",\n            config: false,\n            system: true,\n            type: String,\n            default: SYSTEMS.DATA.WEIGHT_PROPERTY_PATH,\n        },\n        [SETTINGS.PRICE_PROPERTY_PATH]: {\n            scope: \"world\",\n            config: false,\n            system: true,\n            type: String,\n            default: SYSTEMS.DATA.PRICE_PROPERTY_PATH,\n        },\n        [SETTINGS.SPELL_LEVEL_PATH]: {\n            scope: \"world\",\n            config: false,\n            system: true,\n            type: String,\n            default: SYSTEMS.DATA.SPELL_LEVEL_PATH,\n        },\n        [SETTINGS.ITEM_LOOT_TYPE]: {\n            scope: \"world\",\n            config: false,\n            system: true,\n            type: String,\n            default: SYSTEMS.DATA.ITEM_LOOT_TYPE,\n        },\n        [SETTINGS.SCROLL_REGEX]: {\n            scope: \"world\",\n            config: false,\n            system: true,\n            type: String,\n            default: SYSTEMS.DATA.SCROLL_REGEX,\n        },\n        [SETTINGS.MATCH_ATTRIBUTES_BLACKLIST]: {\n            scope: \"world\",\n            config: false,\n            system: true,\n            type: String,\n            default: SYSTEMS.DATA.MATCH_ATTRIBUTES_BLACKLIST,\n        },\n    }),\n    */\n};\n\nexport default SETTINGS;\n","import SETTINGS from \"./settings\";\n\nexport const CONSTANTS = {\n    MODULE_ID: \"better-rolltables\",\n    PATH: \"modules/better-rolltables\",\n    TYPES: [\"none\", \"better\", \"loot\", \"harvest\", \"story\"],\n    PRE_RESULT_TEXT_ROLL: \"/roll \",\n    PRE_RESULT_TEXT_ROLLED: \"Rolled: \",\n    PRE_RESULT_TEXT_CURRENCY: \"/currency \",\n    FLAGS: {\n        LOOT: \"loot\",\n        BETTER: \"better\",\n        LOOT_CURRENCY: \"loot.currency\",\n        LOOT_SHARED: \"loot.shared\",\n        // saved data keys (used e.g. in the rolltableEntity.data.flags)\n        TABLE_TYPE_KEY: \"table-type\",\n        GENERIC_AMOUNT_KEY: \"loot-amount-key\",\n        GENERIC_SHOW_HIDDEN_RESULT_ON_CHAT: \"brt-show-hidden-result-on-chat\",\n        GENERIC_DISTINCT_RESULT: \"brt-distinct-result\",\n        GENERIC_DISTINCT_RESULT_KEEP_ROLLING: \"brt-distinct-result-keep-rolling\",\n        GENERIC_USE_PERCENTAGE: \"brt-use-percentage\",\n        GENERIC_SOURCE_VALUE_KEY: \"brt-source-value\",\n\n        GENERIC_RESULT_UUID: \"brt-result-uuid\",\n        GENERIC_RESULT_CUSTOM_NAME: \"brt-result-custom-name\",\n        GENERIC_RESULT_ORIGINAL_NAME: \"brt-result-original-name\",\n        GENERIC_RESULT_CUSTOM_ICON: \"brt-result-custom-icon\",\n        GENERIC_RESULT_ORIGINAL_ICON: \"brt-result-original-icon\",\n        GENERIC_RESULT_HIDDEN_TABLE: \"brt-hidden-table\",\n        GENERIC_RESULT_SHOW_HIDDEN_RESULT_ON_CHAT: \"brt-show-hidden-result-on-chat\",\n        GENERIC_RESULT_PERCENTAGE_LOW_VALUE: \"brt-percentage-low-value\",\n        GENERIC_RESULT_PERCENTAGE_HIGH_VALUE: \"brt-percentage-high-value\",\n        GENERIC_RESULT_JOURNAL_PAGE_UUID: \"brt-result-journal-page-uuid\",\n\n        GENERIC_RESULT_CUSTOM_QUANTITY: \"brt-result-custom-quantity\",\n        GENERIC_RESULT_ORIGINAL_QUANTITY: \"brt-result-original-quantity\",\n\n        // TODO\n        // GENERIC_RESULT_CUSTOM_PRICE: \"brt-result-custom-price\",\n        // GENERIC_RESULT_ORIGINAL_PRICE: \"brt-result-original-price\",\n\n        LOOT_CURRENCY_STRING_KEY: \"table-currency-string\",\n        LOOT_AMOUNT_KEY: \"loot-amount-key\",\n        LOOT_ACTOR_NAME_KEY: \"loot-actor-name\",\n\n        HARVEST: \"harvest\",\n        HARVEST_AMOUNT_KEY: \"loot-amount-key\",\n        HARVEST_ACTOR_NAME_KEY: \"loot-actor-name\",\n        HARVEST_USE_DYNAMIC_DC: \"brt-use-dynamic-dc\",\n\n        HARVEST_DC_VALUE_KEY: \"brt-dc-value\",\n        HARVEST_SKILL_VALUE_KEY: \"brt-skill-value\",\n        HARVEST_RESULT_DYNAMIC_DC_VALUE: \"brt-result-dynamic-dc-value\",\n\n        // /** @deprecated used on the old html view */\n        // RESULTS_FORMULA_KEY: \"brt-result-formula\",\n        /** @deprecated it should be replaced in favor of GENERIC_RESULT_CUSTOM_QUANTITY */\n        RESULTS_FORMULA_KEY_FORMULA: \"brt-result-formula.formula\",\n        HIDDEN_TABLE: \"brt-hidden-table\",\n\n        ACTOR_LIST: {\n            ROLL_TABLES_LIST: \"brt-actor-list-roll-table-list\",\n            CURRENCIES: \"brt-actor-list-currencies\",\n            // TYPE: \"brt-actor-list-type\"\n        },\n    },\n\n    // different type of table type the mod will support. none will basically keep the basic rolltable functionality\n    TABLE_TYPE_NONE: \"none\",\n    TABLE_TYPE_BETTER: \"better\",\n    TABLE_TYPE_LOOT: \"loot\",\n    TABLE_TYPE_HARVEST: \"harvest\",\n    TABLE_TYPE_STORY: \"story\",\n    // DEFAULT_HIDDEN_RESULT_IMAGE: \"modules/better-rolltables/assets/artwork/unidentified-result.webp\",\n    // DEFAULT_HIDDEN_RESULT_TEXT: \"???\",\n\n    // SETTINGS\n    SPELL_COMPENDIUM_KEY: SETTINGS.SPELL_COMPENDIUM_KEY,\n    // LOOT_SHEET_TO_USE_KEY: SETTINGS.LOOT_SHEET_TO_USE_KEY,\n    SHOW_REROLL_BUTTONS: SETTINGS.SHOW_REROLL_BUTTONS,\n    SHOW_OPEN_BUTTONS: SETTINGS.SHOW_OPEN_BUTTONS,\n    // USE_CONDENSED_BETTERROLL: SETTINGS.USE_CONDENSED_BETTERROLL,\n    ADD_ROLL_IN_COMPENDIUM_CONTEXTMENU: SETTINGS.ADD_ROLL_IN_COMPENDIUM_CONTEXTMENU,\n    ADD_ROLL_IN_ROLLTABLE_CONTEXTMENU: SETTINGS.ADD_ROLL_IN_ROLLTABLE_CONTEXTMENU,\n    SHOW_WARNING_BEFORE_REROLL: SETTINGS.SHOW_WARNING_BEFORE_REROLL,\n    STICK_ROLLTABLE_HEADER: SETTINGS.STICK_ROLLTABLE_HEADER,\n    ROLL_TABLE_FROM_JOURNAL: SETTINGS.ROLL_TABLE_FROM_JOURNAL,\n\n    // Loot\n    // SHOW_CURRENCY_SHARE_BUTTON: SETTINGS.SHOW_CURRENCY_SHARE_BUTTON,\n    // ALWAYS_SHOW_GENERATED_LOOT_AS_MESSAGE: SETTINGS.ALWAYS_SHOW_GENERATED_LOOT_AS_MESSAGE,\n\n    // Harvest\n    // ALWAYS_SHOW_GENERATED_HARVEST_AS_MESSAGE: SETTINGS.ALWAYS_SHOW_GENERATED_HARVEST_AS_MESSAGE,\n\n    TAGS: {\n        USE: SETTINGS.TAGS.USE,\n        DEFAULTS: SETTINGS.TAGS.DEFAULTS,\n    },\n    // this are setted on registerSettings\n    // QUANTITY_PROPERTY_PATH: null,\n    // WEIGHT_PROPERTY_PATH: null,\n    // PRICE_PROPERTY_PATH: null,\n    // SPELL_LEVEL_PATH: null,\n    // ITEM_LOOT_TYPE: null,\n    // SCROLL_REGEX: null,\n};\n","import { CONSTANTS } from \"../constants/constants\";\n\n// ================================\n// Logger utility\n// ================================\nexport default class Logger {\n    static get DEBUG() {\n        return (\n            game.settings.get(CONSTANTS.MODULE_ID, \"debug\") ||\n            game.modules.get(\"_dev-mode\")?.api?.getPackageDebugValue(CONSTANTS.MODULE_ID, \"boolean\")\n        );\n    }\n    // export let debugEnabled = 0;\n    // 0 = none, warnings = 1, debug = 2, all = 3\n\n    static debug(msg, ...args) {\n        try {\n            if (\n                game.settings.get(CONSTANTS.MODULE_ID, \"debug\") ||\n                game.modules.get(\"_dev-mode\")?.api?.getPackageDebugValue(CONSTANTS.MODULE_ID, \"boolean\")\n            ) {\n                console.log(`DEBUG | ${CONSTANTS.MODULE_ID} | ${msg}`, ...args);\n            }\n        } catch (e) {\n            console.error(e.message);\n        }\n        return msg;\n    }\n\n    static logObject(...args) {\n        return this.log(\"\", args);\n    }\n\n    static log(message, ...args) {\n        try {\n            message = `${CONSTANTS.MODULE_ID} | ${message}`;\n            console.log(message.replace(\"<br>\", \"\\n\"), ...args);\n        } catch (e) {\n            console.error(e.message);\n        }\n        return message;\n    }\n\n    static notify(message, ...args) {\n        try {\n            message = `${CONSTANTS.MODULE_ID} | ${message}`;\n            ui.notifications?.notify(message);\n            console.log(message.replace(\"<br>\", \"\\n\"), ...args);\n        } catch (e) {\n            console.error(e.message);\n        }\n        return message;\n    }\n\n    static info(info, notify = false, ...args) {\n        try {\n            info = `${CONSTANTS.MODULE_ID} | ${info}`;\n            if (notify) {\n                ui.notifications?.info(info);\n            }\n            console.log(info.replace(\"<br>\", \"\\n\"), ...args);\n        } catch (e) {\n            console.error(e.message);\n        }\n        return info;\n    }\n\n    static warn(warning, notify = false, ...args) {\n        try {\n            warning = `${CONSTANTS.MODULE_ID} | ${warning}`;\n            if (notify) {\n                ui.notifications?.warn(warning);\n            }\n            console.warn(warning.replace(\"<br>\", \"\\n\"), ...args);\n        } catch (e) {\n            console.error(e.message);\n        }\n        return warning;\n    }\n\n    static errorObject(...args) {\n        return this.error(\"\", false, args);\n    }\n\n    static error(error, notify = true, ...args) {\n        try {\n            error = `${CONSTANTS.MODULE_ID} | ${error}`;\n            if (notify) {\n                ui.notifications?.error(error);\n            }\n            console.error(error.replace(\"<br>\", \"\\n\"), ...args);\n        } catch (e) {\n            console.error(e.message);\n        }\n        return new Error(error.replace(\"<br>\", \"\\n\"));\n    }\n\n    static errorPermanent(error, notify = true, ...args) {\n        try {\n            error = `${CONSTANTS.MODULE_ID} | ${error}`;\n            if (notify) {\n                ui.notifications?.error(error, {\n                    permanent: true,\n                });\n            }\n            console.error(error.replace(\"<br>\", \"\\n\"), ...args);\n        } catch (e) {\n            console.error(e.message);\n        }\n        return new Error(error.replace(\"<br>\", \"\\n\"));\n    }\n\n    static timelog(message) {\n        this.warn(Date.now(), message);\n    }\n\n    static i18n = (key) => {\n        return game.i18n.localize(key)?.trim();\n    };\n\n    static i18nFormat = (key, data = {}) => {\n        return game.i18n.format(key, data)?.trim();\n    };\n\n    // setDebugLevel = (debugText): void => {\n    //   debugEnabled = { none: 0, warn: 1, debug: 2, all: 3 }[debugText] || 0;\n    //   // 0 = none, warnings = 1, debug = 2, all = 3\n    //   if (debugEnabled >= 3) CONFIG.debug.hooks = true;\n    // };\n\n    static dialogWarning(message, icon = \"fas fa-exclamation-triangle\") {\n        return `<p class=\"${CONSTANTS.MODULE_ID}-dialog\">\n        <i style=\"font-size:3rem;\" class=\"${icon}\"></i><br><br>\n        <strong style=\"font-size:1.2rem;\">${CONSTANTS.MODULE_ID}</strong>\n        <br><br>${message}\n    </p>`;\n    }\n}\n","import Logger from \"./Logger.js\";\n\nexport class RetrieveHelpers {\n    /**\n     *\n     * @param {options}\n     * @param {string} [options.documentName]\n     * @param {string} [options.documentId]\n     * @param {(\"User\"|\"Folder\"|\"Actor\"|\"Item\"|\"Scene\"|\"Combat\"|\"JournalEntry\"|\"Macro\"|\"Playlist\"|\"RollTable\"|\"Cards\"|\"ChatMessage\"|\"Setting\"|\"FogExploration\")} [options.collection]\n     * @param {string} [options.documentPack]\n     * @param {boolean} [options.ignoreError=false]\n     */\n    static retrieveUuid({ documentName, documentId, documentCollectionType, documentPack, ignoreError = false }) {\n        let uuid = null;\n        if (documentCollectionType || pack === \"world\") {\n            const collection = game.collections.get(documentCollectionType);\n            if (!collection) {\n                // DO NOTHING\n                Logger.warn(`Cannot retrieve collection for ${collection}`);\n            } else {\n                // Get the original document, if the name still matches - take no action\n                const original = documentId ? collection.get(documentId) : null;\n                if (original) {\n                    if (documentName) {\n                        if (original.name !== documentName) {\n                            // DO NOTHING\n                        } else {\n                            return original.uuid;\n                        }\n                    } else {\n                        return original.uuid;\n                    }\n                }\n                // Otherwise, find the document by ID or name (ID preferred)\n                const doc = collection.find((e) => e.id === documentId || e.name === documentName) || null;\n                if (doc) {\n                    return doc.uuid;\n                }\n            }\n        }\n        if (documentPack) {\n            const pack = RetrieveHelpers.getCompendiumCollectionSync(documentPack, ignoreError);\n            if (!pack) {\n                // DO NOTHING\n                Logger.warn(`Cannot retrieve pack for ${documentPack}`);\n            } else {\n                // Get the original entry, if the name still matches - take no action\n                const original = documentId ? pack.index.get(documentId) : null;\n                if (original) {\n                    if (documentName) {\n                        if (original.name !== documentName) {\n                            // DO NOTHING\n                        } else {\n                            return original.uuid;\n                        }\n                    } else {\n                        return original.uuid;\n                    }\n                }\n\n                // Otherwise, find the document by ID or name (ID preferred)\n                const doc = pack.index.find((i) => i._id === documentId || i.name === documentName) || null;\n                if (doc) {\n                    return doc.uuid;\n                }\n            }\n        }\n        return uuid;\n    }\n\n    static getDocument(target) {\n        if (RetrieveHelpers.stringIsUuid(target)) {\n            target = fromUuidSync(target);\n        }\n        return target?.document ?? target;\n    }\n\n    static stringIsUuid(inId) {\n        const valid = typeof inId === \"string\" && (inId.match(/\\./g) || []).length && !inId.endsWith(\".\");\n        if (valid) {\n            return !!fromUuidSync(inId);\n        } else {\n            return false;\n        }\n    }\n\n    static getUuid(target) {\n        if (RetrieveHelpers.stringIsUuid(target)) {\n            return target;\n        }\n        const document = getDocument(target);\n        return document?.uuid ?? false;\n    }\n\n    static getCompendiumCollectionSync(target, ignoreError = false, ignoreName = true) {\n        let targetTmp = target;\n        if (!targetTmp) {\n            throw Logger.error(`CompendiumCollection is undefined`, true, targetTmp);\n        }\n        if (targetTmp instanceof CompendiumCollection) {\n            return targetTmp;\n        }\n        // This is just a patch for compatibility with others modules\n        if (targetTmp.document) {\n            targetTmp = targetTmp.document;\n        }\n        if (targetTmp.uuid) {\n            targetTmp = targetTmp.uuid;\n        }\n\n        if (targetTmp instanceof CompendiumCollection) {\n            return targetTmp;\n        }\n        if (RetrieveHelpers.stringIsUuid(targetTmp)) {\n            targetTmp = fromUuidSync(targetTmp);\n        } else {\n            if (game.packs.get(targetTmp)) {\n                targetTmp = game.packs.get(targetTmp);\n            } else if (!ignoreName && game.packs.getName(targetTmp)) {\n                targetTmp = game.packs.getName(targetTmp);\n            }\n        }\n        // }\n        if (!targetTmp) {\n            if (ignoreError) {\n                Logger.warn(`CompendiumCollection is not found`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`CompendiumCollection is not found`, true, targetTmp);\n            }\n        }\n        // Type checking\n        if (!(targetTmp instanceof CompendiumCollection)) {\n            if (ignoreError) {\n                Logger.warn(`Invalid CompendiumCollection`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Invalid CompendiumCollection`, true, targetTmp);\n            }\n        }\n        return targetTmp;\n    }\n\n    static async getCompendiumCollectionAsync(target, ignoreError = false, ignoreName = true) {\n        let targetTmp = target;\n        if (!targetTmp) {\n            throw Logger.error(`CompendiumCollection is undefined`, true, targetTmp);\n        }\n        if (targetTmp instanceof CompendiumCollection) {\n            return targetTmp;\n        }\n        // This is just a patch for compatibility with others modules\n        if (targetTmp.document) {\n            targetTmp = targetTmp.document;\n        }\n        if (targetTmp.uuid) {\n            targetTmp = targetTmp.uuid;\n        }\n\n        if (targetTmp instanceof CompendiumCollection) {\n            return targetTmp;\n        }\n        if (RetrieveHelpers.stringIsUuid(targetTmp)) {\n            targetTmp = await fromUuid(targetTmp);\n        } else {\n            if (game.packs.get(targetTmp)) {\n                targetTmp = game.packs.get(targetTmp);\n            } else if (!ignoreName && game.packs.getName(targetTmp)) {\n                targetTmp = game.packs.getName(targetTmp);\n            }\n        }\n        if (!targetTmp) {\n            if (ignoreError) {\n                Logger.warn(`CompendiumCollection is not found`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`CompendiumCollection is not found`, true, targetTmp);\n            }\n        }\n        // Type checking\n        if (!(targetTmp instanceof CompendiumCollection)) {\n            if (ignoreError) {\n                Logger.warn(`Invalid CompendiumCollection`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Invalid CompendiumCollection`, true, targetTmp);\n            }\n        }\n        return targetTmp;\n    }\n\n    static getUserSync(target, ignoreError = false, ignoreName = true) {\n        let targetTmp = target;\n        if (!targetTmp) {\n            throw Logger.error(`User is undefined`, true, targetTmp);\n        }\n        if (targetTmp instanceof User) {\n            return targetTmp;\n        }\n        // This is just a patch for compatibility with others modules\n        if (targetTmp.document) {\n            targetTmp = targetTmp.document;\n        }\n        if (targetTmp.uuid) {\n            targetTmp = targetTmp.uuid;\n        }\n\n        if (targetTmp instanceof User) {\n            return targetTmp;\n        }\n        if (RetrieveHelpers.stringIsUuid(targetTmp)) {\n            targetTmp = fromUuidSync(targetTmp);\n        } else {\n            if (game.users.get(targetTmp)) {\n                targetTmp = game.users.get(targetTmp);\n            } else if (!ignoreName && game.users.getName(targetTmp)) {\n                targetTmp = game.users.getName(targetTmp);\n            }\n        }\n        if (!targetTmp) {\n            if (ignoreError) {\n                Logger.warn(`User is not found`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`User is not found`, true, targetTmp);\n            }\n        }\n        // Type checking\n        // if (!(targetTmp instanceof User)) {\n        //   if (ignoreError) {\n        //     Logger.warn(`Invalid User`, false, targetTmp);\n        //     return;\n        //   } else {\n        //     throw Logger.error(`Invalid User`, true, targetTmp);\n        //   }\n        // }\n        return targetTmp;\n    }\n\n    static getActorSync(target, ignoreError = false, ignoreName = true) {\n        let targetTmp = target;\n        if (!targetTmp) {\n            throw Logger.error(`Actor is undefined`, true, targetTmp);\n        }\n        if (targetTmp instanceof Actor) {\n            return targetTmp;\n        }\n        // This is just a patch for compatibility with others modules\n        if (targetTmp.document) {\n            targetTmp = targetTmp.document;\n        }\n        if (targetTmp.uuid) {\n            targetTmp = targetTmp.uuid;\n        }\n\n        if (targetTmp instanceof Actor) {\n            return targetTmp;\n        }\n        if (RetrieveHelpers.stringIsUuid(targetTmp)) {\n            targetTmp = fromUuidSync(targetTmp);\n        } else {\n            if (game.actors.get(targetTmp)) {\n                targetTmp = game.actors.get(targetTmp);\n            } else if (!ignoreName && game.actors.getName(targetTmp)) {\n                targetTmp = game.actors.getName(targetTmp);\n            }\n        }\n        if (!targetTmp) {\n            if (ignoreError) {\n                Logger.warn(`Actor is not found`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Actor is not found`, true, targetTmp);\n            }\n        }\n        // Type checking\n        // if (!(targetTmp instanceof Actor)) {\n        //   if (ignoreError) {\n        //     Logger.warn(`Invalid Actor`, false, targetTmp);\n        //     return;\n        //   } else {\n        //     throw Logger.error(`Invalid Actor`, true, targetTmp);\n        //   }\n        // }\n        return targetTmp;\n    }\n\n    static async getActorAsync(target, ignoreError = false, ignoreName = true) {\n        let targetTmp = target;\n        if (!targetTmp) {\n            throw Logger.error(`Actor is undefined`, true, targetTmp);\n        }\n        if (targetTmp instanceof Actor) {\n            return targetTmp;\n        }\n        // This is just a patch for compatibility with others modules\n        if (targetTmp.document) {\n            targetTmp = targetTmp.document;\n        }\n        if (targetTmp.uuid) {\n            targetTmp = targetTmp.uuid;\n        }\n\n        if (targetTmp instanceof Actor) {\n            return targetTmp;\n        }\n        if (RetrieveHelpers.stringIsUuid(targetTmp)) {\n            targetTmp = await fromUuid(targetTmp);\n        } else {\n            if (game.actors.get(targetTmp)) {\n                targetTmp = game.actors.get(targetTmp);\n            } else if (!ignoreName && game.actors.getName(targetTmp)) {\n                targetTmp = game.actors.getName(targetTmp);\n            }\n        }\n        if (!targetTmp) {\n            if (ignoreError) {\n                Logger.warn(`Actor is not found`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Actor is not found`, true, targetTmp);\n            }\n        }\n        // Type checking\n        if (!(targetTmp instanceof Actor)) {\n            if (ignoreError) {\n                Logger.warn(`Invalid Actor`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Invalid Actor`, true, targetTmp);\n            }\n        }\n        return targetTmp;\n    }\n\n    static getJournalSync(target, ignoreError = false, ignoreName = true) {\n        let targetTmp = target;\n        if (!targetTmp) {\n            throw Logger.error(`Journal is undefined`, true, targetTmp);\n        }\n        if (targetTmp instanceof Journal) {\n            return targetTmp;\n        }\n        // This is just a patch for compatibility with others modules\n        if (targetTmp.document) {\n            targetTmp = targetTmp.document;\n        }\n        if (targetTmp.uuid) {\n            targetTmp = targetTmp.uuid;\n        }\n\n        if (targetTmp instanceof Journal) {\n            return targetTmp;\n        }\n        if (RetrieveHelpers.stringIsUuid(targetTmp)) {\n            targetTmp = fromUuidSync(targetTmp);\n        } else {\n            if (game.journal.get(targetTmp)) {\n                targetTmp = game.journal.get(targetTmp);\n            } else if (!ignoreName && game.journal.getName(targetTmp)) {\n                targetTmp = game.journal.getName(targetTmp);\n            }\n        }\n        if (!targetTmp) {\n            if (ignoreError) {\n                Logger.warn(`Journal is not found`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Journal is not found`, true, targetTmp);\n            }\n        }\n        // Type checking\n        // if (!(targetTmp instanceof Journal)) {\n        //   if (ignoreError) {\n        //     Logger.warn(`Invalid Journal`, false, targetTmp);\n        //     return;\n        //   } else {\n        //     throw Logger.error(`Invalid Journal`, true, targetTmp);\n        //   }\n        // }\n        return targetTmp;\n    }\n\n    static async getJournalAsync(target, ignoreError = false, ignoreName = true) {\n        let targetTmp = target;\n        if (!targetTmp) {\n            throw Logger.error(`Journal is undefined`, true, targetTmp);\n        }\n        if (targetTmp instanceof Journal) {\n            return targetTmp;\n        }\n        // This is just a patch for compatibility with others modules\n        if (targetTmp.document) {\n            targetTmp = targetTmp.document;\n        }\n        if (targetTmp.uuid) {\n            targetTmp = targetTmp.uuid;\n        }\n\n        if (targetTmp instanceof Journal) {\n            return targetTmp;\n        }\n        if (RetrieveHelpers.stringIsUuid(targetTmp)) {\n            targetTmp = await fromUuid(targetTmp);\n        } else {\n            if (game.journal.get(targetTmp)) {\n                targetTmp = game.journal.get(targetTmp);\n            } else if (!ignoreName && game.journal.getName(targetTmp)) {\n                targetTmp = game.journal.getName(targetTmp);\n            }\n        }\n        if (!targetTmp) {\n            if (ignoreError) {\n                Logger.warn(`Journal is not found`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Journal is not found`, true, targetTmp);\n            }\n        }\n        // Type checking\n        if (!(targetTmp instanceof Journal)) {\n            if (ignoreError) {\n                Logger.warn(`Invalid Journal`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Invalid Journal`, true, targetTmp);\n            }\n        }\n        return targetTmp;\n    }\n\n    static getMacroSync(target, ignoreError = false, ignoreName = true) {\n        let targetTmp = target;\n        if (!targetTmp) {\n            throw Logger.error(`Macro is undefined`, true, targetTmp);\n        }\n        if (targetTmp instanceof Macro) {\n            return targetTmp;\n        }\n        // This is just a patch for compatibility with others modules\n        if (targetTmp.document) {\n            targetTmp = targetTmp.document;\n        }\n        if (targetTmp.uuid) {\n            targetTmp = targetTmp.uuid;\n        }\n\n        if (targetTmp instanceof Macro) {\n            return targetTmp;\n        }\n        if (RetrieveHelpers.stringIsUuid(targetTmp)) {\n            targetTmp = fromUuidSync(targetTmp);\n        } else {\n            if (game.macros.get(targetTmp)) {\n                targetTmp = game.macros.get(targetTmp);\n            } else if (!ignoreName && game.macros.getName(targetTmp)) {\n                targetTmp = game.macros.getName(targetTmp);\n            }\n        }\n        if (!targetTmp) {\n            if (ignoreError) {\n                Logger.warn(`Macro is not found`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Macro is not found`, true, targetTmp);\n            }\n        }\n        // Type checking\n        // if (!(targetTmp instanceof Macro)) {\n        //   if (ignoreError) {\n        //     Logger.warn(`Invalid Macro`, false, targetTmp);\n        //     return;\n        //   } else {\n        //     throw Logger.error(`Invalid Macro`, true, targetTmp);\n        //   }\n        // }\n        return targetTmp;\n    }\n\n    static async getMacroAsync(target, ignoreError = false, ignoreName = true) {\n        let targetTmp = target;\n        if (!targetTmp) {\n            throw Logger.error(`Macro is undefined`, true, targetTmp);\n        }\n        if (targetTmp instanceof Macro) {\n            return targetTmp;\n        }\n        // This is just a patch for compatibility with others modules\n        if (targetTmp.document) {\n            targetTmp = targetTmp.document;\n        }\n        if (targetTmp.uuid) {\n            targetTmp = targetTmp.uuid;\n        }\n\n        if (targetTmp instanceof Macro) {\n            return targetTmp;\n        }\n        if (RetrieveHelpers.stringIsUuid(targetTmp)) {\n            targetTmp = await fromUuid(targetTmp);\n        } else {\n            if (game.macros.get(targetTmp)) {\n                targetTmp = game.macros.get(targetTmp);\n            } else if (!ignoreName && game.macros.getName(targetTmp)) {\n                targetTmp = game.macros.getName(targetTmp);\n            }\n        }\n        if (!targetTmp) {\n            if (ignoreError) {\n                Logger.warn(`Macro is not found`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Macro is not found`, true, targetTmp);\n            }\n        }\n        // Type checking\n        if (!(targetTmp instanceof Macro)) {\n            if (ignoreError) {\n                Logger.warn(`Invalid Macro`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Invalid Macro`, true, targetTmp);\n            }\n        }\n        return targetTmp;\n    }\n\n    static getSceneSync(target, ignoreError = false, ignoreName = true) {\n        let targetTmp = target;\n        if (!targetTmp) {\n            throw Logger.error(`Scene is undefined`, true, targetTmp);\n        }\n        if (targetTmp instanceof Scene) {\n            return targetTmp;\n        }\n        // This is just a patch for compatibility with others modules\n        if (targetTmp.document) {\n            targetTmp = targetTmp.document;\n        }\n        if (targetTmp.uuid) {\n            targetTmp = targetTmp.uuid;\n        }\n\n        if (targetTmp instanceof Scene) {\n            return targetTmp;\n        }\n        if (RetrieveHelpers.stringIsUuid(targetTmp)) {\n            targetTmp = fromUuidSync(targetTmp);\n        } else {\n            if (game.scenes.get(targetTmp)) {\n                targetTmp = game.scenes.get(targetTmp);\n            } else if (!ignoreName && game.scenes.getName(targetTmp)) {\n                targetTmp = game.scenes.getName(targetTmp);\n            }\n        }\n        if (!targetTmp) {\n            if (ignoreError) {\n                Logger.warn(`Scene is not found`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Scene is not found`, true, targetTmp);\n            }\n        }\n        // Type checking\n        // if (!(targetTmp instanceof Scene)) {\n        //   if (ignoreError) {\n        //     Logger.warn(`Invalid Scene`, false, targetTmp);\n        //     return;\n        //   } else {\n        //     throw Logger.error(`Invalid Scene`, true, targetTmp);\n        //   }\n        // }\n        return targetTmp;\n    }\n\n    static async getSceneAsync(target, ignoreError = false, ignoreName = true) {\n        let targetTmp = target;\n        if (!targetTmp) {\n            throw Logger.error(`Scene is undefined`, true, targetTmp);\n        }\n        if (targetTmp instanceof Scene) {\n            return targetTmp;\n        }\n        // This is just a patch for compatibility with others modules\n        if (targetTmp.document) {\n            targetTmp = targetTmp.document;\n        }\n        if (targetTmp.uuid) {\n            targetTmp = targetTmp.uuid;\n        }\n\n        if (targetTmp instanceof Scene) {\n            return targetTmp;\n        }\n        if (RetrieveHelpers.stringIsUuid(targetTmp)) {\n            targetTmp = await fromUuid(targetTmp);\n        } else {\n            if (game.scenes.get(targetTmp)) {\n                targetTmp = game.scenes.get(targetTmp);\n            } else if (!ignoreName && game.scenes.getName(targetTmp)) {\n                targetTmp = game.scenes.getName(targetTmp);\n            }\n        }\n        if (!targetTmp) {\n            if (ignoreError) {\n                Logger.warn(`Scene is not found`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Scene is not found`, true, targetTmp);\n            }\n        }\n        // Type checking\n        if (!(targetTmp instanceof Scene)) {\n            if (ignoreError) {\n                Logger.warn(`Invalid Scene`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Invalid Scene`, true, targetTmp);\n            }\n        }\n        return targetTmp;\n    }\n\n    static getItemSync(target, ignoreError = false, ignoreName = true) {\n        let targetTmp = target;\n        if (!targetTmp) {\n            throw Logger.error(`Item is undefined`, true, targetTmp);\n        }\n        if (targetTmp instanceof Item) {\n            return targetTmp;\n        }\n        // This is just a patch for compatibility with others modules\n        if (targetTmp.document) {\n            targetTmp = targetTmp.document;\n        }\n        if (targetTmp.uuid) {\n            targetTmp = targetTmp.uuid;\n        }\n\n        if (targetTmp instanceof Item) {\n            return targetTmp;\n        }\n        if (RetrieveHelpers.stringIsUuid(targetTmp)) {\n            targetTmp = fromUuidSync(targetTmp);\n        } else {\n            if (game.items.get(targetTmp)) {\n                targetTmp = game.items.get(targetTmp);\n            } else if (!ignoreName && game.items.getName(targetTmp)) {\n                targetTmp = game.items.getName(targetTmp);\n            }\n        }\n        if (!targetTmp) {\n            if (ignoreError) {\n                Logger.warn(`Item is not found`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Item is not found`, true, targetTmp);\n            }\n        }\n        // Type checking\n        // if (!(targetTmp instanceof Item)) {\n        //   if (ignoreError) {\n        //     Logger.warn(`Invalid Item`, false, targetTmp);\n        //     return;\n        //   } else {\n        //     throw Logger.error(`Invalid Item`, true, targetTmp);\n        //   }\n        // }\n        return targetTmp;\n    }\n\n    static async getItemAsync(target, ignoreError = false, ignoreName = true) {\n        let targetTmp = target;\n        if (!targetTmp) {\n            throw Logger.error(`Item is undefined`, true, targetTmp);\n        }\n        if (targetTmp instanceof Item) {\n            return targetTmp;\n        }\n        // This is just a patch for compatibility with others modules\n        if (targetTmp.document) {\n            targetTmp = targetTmp.document;\n        }\n        if (targetTmp.uuid) {\n            targetTmp = targetTmp.uuid;\n        }\n\n        if (targetTmp instanceof Item) {\n            return targetTmp;\n        }\n        if (RetrieveHelpers.stringIsUuid(targetTmp)) {\n            targetTmp = await fromUuid(targetTmp);\n        } else {\n            if (game.items.get(targetTmp)) {\n                targetTmp = game.items.get(targetTmp);\n            } else if (!ignoreName && game.items.getName(targetTmp)) {\n                targetTmp = game.items.getName(targetTmp);\n            }\n        }\n        if (!targetTmp) {\n            if (ignoreError) {\n                Logger.warn(`Item is not found`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Item is not found`, true, targetTmp);\n            }\n        }\n        // Type checking\n        if (!(targetTmp instanceof Item)) {\n            if (ignoreError) {\n                Logger.warn(`Invalid Item`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Invalid Item`, true, targetTmp);\n            }\n        }\n        return targetTmp;\n    }\n\n    static getPlaylistSoundPathSync(target, ignoreError = false, ignoreName = true) {\n        let targetTmp = target;\n        if (!targetTmp) {\n            throw Logger.error(`PlaylistSound is undefined`, true, targetTmp);\n        }\n        if (targetTmp instanceof PlaylistSound) {\n            return targetTmp.path;\n        }\n        // This is just a patch for compatibility with others modules\n        if (targetTmp.document) {\n            targetTmp = targetTmp.document;\n        }\n        if (targetTmp.uuid) {\n            targetTmp = targetTmp.uuid;\n        }\n\n        if (targetTmp instanceof PlaylistSound) {\n            return targetTmp;\n        }\n        if (typeof targetTmp === \"string\" || targetTmp instanceof String) {\n            return targetTmp;\n        }\n        if (RetrieveHelpers.stringIsUuid(targetTmp)) {\n            targetTmp = fromUuidSync(targetTmp);\n        } else {\n            targetTmp = game.playlists.contents\n                .flatMap((playlist) => playlist.sounds.contents)\n                .find((playlistSound) => {\n                    return playlistSound.id === targetTmp || playlistSound.name === targetTmp;\n                });\n        }\n        if (!targetTmp) {\n            if (ignoreError) {\n                Logger.warn(`PlaylistSound is not found`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`PlaylistSound is not found`, true, targetTmp);\n            }\n        }\n        // Type checking\n        // if (!(targetTmp instanceof PlaylistSound)) {\n        //   if (ignoreError) {\n        //     Logger.warn(`Invalid PlaylistSound`, false, targetTmp);\n        //     return;\n        //   } else {\n        //     throw Logger.error(`Invalid PlaylistSound`, true, targetTmp);\n        //   }\n        // }\n        return targetTmp.path;\n    }\n\n    static async getPlaylistSoundPathAsync(target, ignoreError = false, ignoreName = true) {\n        let targetTmp = target;\n        if (!targetTmp) {\n            throw Logger.error(`PlaylistSound is undefined`, true, targetTmp);\n        }\n        if (targetTmp instanceof PlaylistSound) {\n            return targetTmp.path;\n        }\n        // This is just a patch for compatibility with others modules\n        if (targetTmp.document) {\n            targetTmp = targetTmp.document;\n        }\n        if (targetTmp.uuid) {\n            targetTmp = targetTmp.uuid;\n        }\n\n        if (targetTmp instanceof PlaylistSound) {\n            return targetTmp;\n        }\n        if (typeof targetTmp === \"string\" || targetTmp instanceof String) {\n            return targetTmp;\n        }\n        if (RetrieveHelpers.stringIsUuid(targetTmp)) {\n            targetTmp = await fromUuid(targetTmp);\n        } else {\n            targetTmp = game.playlists.contents\n                .flatMap((playlist) => playlist.sounds.contents)\n                .find((playlistSound) => {\n                    return playlistSound.id === targetTmp || playlistSound.name === targetTmp;\n                });\n        }\n        if (!targetTmp) {\n            if (ignoreError) {\n                Logger.warn(`PlaylistSound is not found`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`PlaylistSound is not found`, true, targetTmp);\n            }\n        }\n        // Type checking\n        if (!(targetTmp instanceof PlaylistSound)) {\n            if (ignoreError) {\n                Logger.warn(`Invalid PlaylistSound`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Invalid PlaylistSound`, true, targetTmp);\n            }\n        }\n        return targetTmp.path;\n    }\n\n    static getTokenSync(target, ignoreError = false, ignoreName = true) {\n        let targetTmp = target;\n        if (!targetTmp) {\n            throw Logger.error(`Token is undefined`, true, targetTmp);\n        }\n        if (targetTmp instanceof Token) {\n            return targetTmp;\n        }\n        if (targetTmp instanceof TokenDocument) {\n            targetTmp = targetTmp?.object ?? targetTmp;\n            return targetTmp;\n        }\n        if (targetTmp instanceof Actor) {\n            if (targetTmp.token) {\n                targetTmp = canvas.tokens.get(targetTmp.token);\n            } else {\n                targetTmp = targetTmp.prototypeToken;\n            }\n            if (!targetTmp) {\n                if (ignoreError) {\n                    Logger.warn(`Token is not found`, false, targetTmp);\n                    return;\n                } else {\n                    throw Logger.error(`Token is not found`, true, targetTmp);\n                }\n            }\n            return targetTmp;\n        }\n        // This is just a patch for compatibility with others modules\n        if (targetTmp.document) {\n            targetTmp = targetTmp.document;\n        }\n        if (targetTmp.uuid) {\n            targetTmp = targetTmp.uuid;\n        }\n        if (targetTmp instanceof Token) {\n            return targetTmp;\n        }\n        if (RetrieveHelpers.stringIsUuid(targetTmp)) {\n            targetTmp = fromUuidSync(targetTmp);\n        } else {\n            targetTmp = canvas.tokens?.placeables.find((t) => {\n                return t.id === target;\n            });\n            if (!ignoreName) {\n                targetTmp = canvas.tokens?.placeables.find((t) => {\n                    return t.name === target;\n                });\n            }\n        }\n        if (!targetTmp) {\n            if (ignoreError) {\n                Logger.warn(`Token is not found`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Token is not found`, true, targetTmp);\n            }\n        }\n        targetTmp = targetTmp?.token ?? targetTmp;\n        if (targetTmp instanceof TokenDocument) {\n            targetTmp = targetTmp?.object ?? targetTmp;\n        }\n        // Type checking\n        // if (!(targetTmp instanceof Token)) {\n        //   if (ignoreError) {\n        //     Logger.warn(`Invalid Token`, false, targetTmp);\n        //     return;\n        //   } else {\n        //     throw Logger.error(`Invalid Token`, true, targetTmp);\n        //   }\n        // }\n        return targetTmp;\n    }\n\n    static getRollTableSync(target, ignoreError = false, ignoreName = true) {\n        let targetTmp = target;\n        if (!targetTmp) {\n            throw Logger.error(`RollTable is undefined`, true, targetTmp);\n        }\n        if (targetTmp instanceof RollTable) {\n            return targetTmp;\n        }\n        // This is just a patch for compatibility with others modules\n        if (targetTmp.document) {\n            targetTmp = targetTmp.document;\n        }\n        if (targetTmp.uuid) {\n            targetTmp = targetTmp.uuid;\n        }\n\n        if (targetTmp instanceof RollTable) {\n            return targetTmp;\n        }\n        if (RetrieveHelpers.stringIsUuid(targetTmp)) {\n            targetTmp = fromUuidSync(targetTmp);\n        } else {\n            if (game.tables.get(targetTmp)) {\n                targetTmp = game.tables.get(targetTmp);\n            } else if (!ignoreName && game.tables.getName(targetTmp)) {\n                targetTmp = game.tables.getName(targetTmp);\n            }\n        }\n\n        if (!targetTmp) {\n            if (ignoreError) {\n                Logger.warn(`RollTable is not found`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`RollTable is not found`, true, targetTmp);\n            }\n        }\n        // Type checking\n        // if (!(targetTmp instanceof RollTable)) {\n        //   if (ignoreError) {\n        //     Logger.warn(`Invalid RollTable`, false, targetTmp);\n        //     return;\n        //   } else {\n        //     throw Logger.error(`Invalid RollTable`, true, targetTmp);\n        //   }\n        // }\n        return targetTmp;\n    }\n\n    static async getRollTableAsync(target, ignoreError = false, ignoreName = true) {\n        let targetTmp = target;\n        if (!targetTmp) {\n            throw Logger.error(`RollTable is undefined`, true, targetTmp);\n        }\n        if (targetTmp instanceof RollTable) {\n            return targetTmp;\n        }\n        // This is just a patch for compatibility with others modules\n        if (targetTmp.document) {\n            targetTmp = targetTmp.document;\n        }\n        if (targetTmp.uuid) {\n            targetTmp = targetTmp.uuid;\n        }\n\n        if (targetTmp instanceof RollTable) {\n            return targetTmp;\n        }\n        if (RetrieveHelpers.stringIsUuid(targetTmp)) {\n            targetTmp = await fromUuid(targetTmp);\n        } else {\n            if (game.tables.get(targetTmp)) {\n                targetTmp = game.tables.get(targetTmp);\n            } else if (!ignoreName && game.tables.getName(targetTmp)) {\n                targetTmp = game.tables.getName(targetTmp);\n            }\n        }\n\n        if (!targetTmp) {\n            if (ignoreError) {\n                Logger.warn(`RollTable is not found`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`RollTable is not found`, true, targetTmp);\n            }\n        }\n        // Type checking\n        if (!(targetTmp instanceof RollTable)) {\n            if (ignoreError) {\n                Logger.warn(`Invalid RollTable`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Invalid RollTable`, true, targetTmp);\n            }\n        }\n        return targetTmp;\n    }\n\n    static async getFolderAsync(target, ignoreError = false, ignoreName = true) {\n        let targetTmp = target;\n        if (!targetTmp) {\n            throw Logger.error(`Folder is undefined`, true, targetTmp);\n        }\n        if (targetTmp instanceof Folder) {\n            return targetTmp;\n        }\n        // This is just a patch for compatibility with others modules\n        if (targetTmp.document) {\n            targetTmp = targetTmp.document;\n        }\n        if (targetTmp.uuid) {\n            targetTmp = targetTmp.uuid;\n        }\n\n        if (targetTmp instanceof Folder) {\n            return targetTmp;\n        }\n        if (RetrieveHelpers.stringIsUuid(targetTmp)) {\n            targetTmp = await fromUuid(targetTmp);\n        } else {\n            if (game.folders.get(targetTmp)) {\n                targetTmp = game.folders.get(targetTmp);\n            } else if (!ignoreName && game.folders.getName(targetTmp)) {\n                targetTmp = game.folders.getName(targetTmp);\n            }\n        }\n        if (!targetTmp) {\n            if (ignoreError) {\n                Logger.warn(`Folder is not found`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Folder is not found`, true, targetTmp);\n            }\n        }\n        // Type checking\n        if (!(targetTmp instanceof Folder)) {\n            if (ignoreError) {\n                Logger.warn(`Invalid Folder`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Invalid Folder`, true, targetTmp);\n            }\n        }\n        return targetTmp;\n    }\n\n    static getFolderSync(target, ignoreError = false, ignoreName = true) {\n        let targetTmp = target;\n        if (!targetTmp) {\n            throw Logger.error(`Folder is undefined`, true, targetTmp);\n        }\n        if (targetTmp instanceof Folder) {\n            return targetTmp;\n        }\n        // This is just a patch for compatibility with others modules\n        if (targetTmp.document) {\n            targetTmp = targetTmp.document;\n        }\n        if (targetTmp.uuid) {\n            targetTmp = targetTmp.uuid;\n        }\n\n        if (targetTmp instanceof Folder) {\n            return targetTmp;\n        }\n        if (RetrieveHelpers.stringIsUuid(targetTmp)) {\n            targetTmp = fromUuidSync(targetTmp);\n        } else {\n            if (game.folders.get(targetTmp)) {\n                targetTmp = game.folders.get(targetTmp);\n            } else if (!ignoreName && game.folders.getName(targetTmp)) {\n                targetTmp = game.folders.getName(targetTmp);\n            }\n        }\n        if (!targetTmp) {\n            if (ignoreError) {\n                Logger.warn(`Folder is not found`, false, targetTmp);\n                return;\n            } else {\n                throw Logger.error(`Folder is not found`, true, targetTmp);\n            }\n        }\n        // Type checking\n        // if (!(targetTmp instanceof Folder)) {\n        //   if (ignoreError) {\n        //     Logger.warn(`Invalid Folder`, false, targetTmp);\n        //     return;\n        //   } else {\n        //     throw Logger.error(`Invalid Folder`, true, targetTmp);\n        //   }\n        // }\n        return targetTmp;\n    }\n}\n","import { CONSTANTS } from \"../../constants/constants\";\nimport Logger from \"../../lib/Logger\";\nimport { RetrieveHelpers } from \"../../lib/retrieve-helpers\";\n\n/**\n * @href https://gist.github.com/crazycalya/0cd20cd12b1a344d21302a794cb229ff\n * @href https://gist.github.com/p4535992/3151778781055a6f68281a0bfd8da1a2\n * @href https://www.reddit.com/r/FoundryVTT/comments/11lbjln/converting_a_compendium_into_a_rollable_table/\n */\nexport class CompendiumToRollTableDialog extends Dialog {\n    constructor(allCompendiums, itemTypes, { weightPredicate = null } = {}) {\n        // let allCompendiums = await game.packs.contents;\n        let compendiumsLength = allCompendiums.length;\n        // let itemTypes = await game.documentTypes.Item.sort();\n        let itemTypesLength = itemTypes.length;\n        let thisSystem = game.system.id;\n\n        let windowWidth = 656;\n\n        let compendiumSelect = ``;\n\n        if (allCompendiums.length >= 1) {\n            for (let i = 0; i < compendiumsLength; i++) {\n                compendiumSelect += `<option value=\"${allCompendiums[i].metadata.id}\">${allCompendiums[i].metadata.label}</option>`;\n            }\n            compendiumSelect = `<select name=\"compendiumSelect\" style=\"width: 8em;\">${compendiumSelect}</select>`;\n        } else {\n            compendiumSelect = `<input type=\"text\" value=\"${allCompendiums[0].metadata.id}\" readonly=true name=\"compendiumSelect\" style=\"width: 8em;\">${allCompendiums[0].metadata.id}</input>`;\n        }\n\n        function capitalize(string) {\n            if (typeof string === \"string\") return string[0].toUpperCase() + string.substring(1);\n            return string;\n        }\n\n        let itemTypeSelect = ``;\n        for (let i = 0; i < itemTypesLength; i++) {\n            itemTypeSelect += `\n            <div class=\"form-group has-boxes\">\n                <label>${capitalize(itemTypes[i])}</label>\n                <div class=\"form-fields\">\n                    <input type=\"checkbox\" value=\"${itemTypes[i]}\" class=\"itemTypeCheckbox\">\n                </div>\n            </div>\n            `;\n        }\n        // TODO TO PUT ON SYSTEM MANAGEMENT CHECK OUT THE LEVEL PATH PROPERTY\n        let spellLevel = [];\n        switch (thisSystem) {\n            case \"dnd5e\": {\n                spellLevel = [`cantrip`, `1st`, `2nd`, `3rd`, `4th`, `5th`, `6th`, `7th`, `8th`, `9th`];\n                break;\n            }\n            case \"sfrpg\": {\n                for (let i = 0; i < 7; i++) {\n                    spellLevel.push(i);\n                }\n                break;\n            }\n        }\n\n        let spellLevelLength = spellLevel.length;\n        let spellLevelSelect = ``;\n        for (let i = 0; i < spellLevelLength; i++) {\n            spellLevelSelect += `\n            <div class=\"form-group has-boxes\">\n                <label>${capitalize(spellLevel[i])}</label>\n                <div class=\"form-fields\">\n                    <input type=\"checkbox\" value=\"${[i]}\" class=\"spellLevelCheckbox\">\n                </div>\n            </div>\n            `;\n        }\n\n        // TODO TO PUT ON SYSTEM MANAGEMENT CHECK OUT THE LEVEL PATH PROPERTY\n        let itemRarity = [];\n        let itemRaritySelect = ``;\n        switch (thisSystem) {\n            case \"sfrpg\": {\n                for (let i = 0; i < 22; i++) {\n                    itemRarity.push(i);\n                }\n                break;\n            }\n            case \"dnd5e\": {\n                itemRarity = [\"common\", \"uncommon\", \"rare\", \"veryRare\", \"legendary\", \"artifact\"]; // TODO add CONFIG\n                itemRaritySelect = `\n                    <div class=\"form-group has-boxes\">\n                        <label>None</label>\n                        <div class=\"form-fields\">\n                            <input type=\"checkbox\" value=\"\" class=\"itemRarityCheckbox\">\n                        </div>\n                    </div>\n                    `;\n                break;\n            }\n            default: {\n                // TODO do something ?\n            }\n        }\n\n        let itemRarityLength = itemRarity.length;\n        for (let i = 0; i < itemRarityLength; i++) {\n            itemRaritySelect += `\n            <div class=\"form-group has-boxes\">\n                <label>${capitalize(itemRarity[i])}</label>\n                <div class=\"form-fields\">\n                    <input type=\"checkbox\" value=\"${itemRarity[i]}\" class=\"itemRarityCheckbox\">\n                </div>\n            </div>\n            `;\n        }\n\n        let content = `\n            <div>\n                <form>\n                    <div class=\"form-group\">\n                        <label>Compendium:</label>\n                        <div class=\"form-fields\">\n                        ${compendiumSelect}\n                        </div>\n                    </div>\n                    <hr>\n                    <button id=\"toggleAll\" type=\"button\">Toggle All</button>\n                    <input type=\"checkbox\" id=\"filterTypes\">Item Type</input>\n                    <div id=\"itemTypeFilters\" class=\"grid-container\" style=\"display: none; font-size: 80%;\">\n                        ${itemTypeSelect}\n                    </div>\n                    <br>\n                    <input type=\"checkbox\" id=\"filterSpells\">Spell Level</input>\n                    <div id=\"spellLevelFilters\" style=\"display: none; font-size: 80%; grid-template-columns: repeat(auto-fit, minmax(80px, 1fr)); gap: 2px 8px;\">\n                        ${spellLevelSelect}\n                    </div>\n                    <br>\n                    <input type=\"checkbox\" id=\"filterRarity\">Rarity</input>\n                    <div id=\"rarityFilters\" style=\"display: none; font-size: 80%; grid-template-columns: repeat(auto-fit, minmax(80px, 1fr)); gap: 2px 8px;\">\n                        ${itemRaritySelect}\n                    </div>\n                    <hr>\n                    <div id=\"nameFilters\">\n                        <button id=\"addNameFilter\" type=\"button\">Add Name Filter</button>\n                    </div>\n                    <hr>\n                    <div id=\"customFilters\">\n                        <button id=\"addCustomFilter\" type=\"button\">Add Custom Filter</button>\n                    </div>\n                    <hr>\n                </form>\n            </div>`;\n\n        let styles = `\n            <style>\n                .has-boxes{\n                    border: 1px solid #000000;\n                    border-radius: 3px;\n                    padding: 3px;\n                    display: flex;\n                    flex-direction: column;\n                }\n                .has-boxes label {\n                    white-space: nowrap;\n                    text-overflow: clip;\n                    width: 100%;\n                }\n                .has-boxes .form-fields {\n                    display: flex;\n                    flex-direction: column;\n                }\n                .grid-container {\n                    display: grid;\n                    grid-template-columns: repeat(3, 1fr);\n                    gap: 4px 8px;\n                  }\n            </style>`;\n\n        super(\n            {\n                title: \"Compendium to Rolltable\",\n                content: content + styles,\n                buttons: {\n                    proceed: {\n                        icon: \"<i class='fas fa-check'></i>\",\n                        label: \"OK\",\n                        callback: async (html) => {\n                            let selected = html.find('select[name=\"compendiumSelect\"]').val();\n                            let filterTypes = html.find(\"#filterTypes\").prop(\"checked\");\n                            let selectedItems = filterTypes\n                                ? Array.from(html[0].querySelectorAll(\".itemTypeCheckbox:checked\")).map(\n                                      (checkbox) => checkbox.value,\n                                  )\n                                : itemTypes;\n                            let filterSpells = html.find(\"#filterSpells\").prop(\"checked\");\n                            let selectedSpellLevels = filterSpells\n                                ? Array.from(html[0].querySelectorAll(\".spellLevelCheckbox:checked\")).map((checkbox) =>\n                                      parseInt(checkbox.value),\n                                  )\n                                : Array.from({ length: 10 }, (_, i) => i);\n                            let filterRarity = html.find(\"#filterRarity\").prop(\"checked\");\n                            let selectedRarities = filterRarity\n                                ? Array.from(html[0].querySelectorAll(\".itemRarityCheckbox:checked\")).map(\n                                      (checkbox) => checkbox.value,\n                                  )\n                                : itemRarity;\n                            let nameFilterSections = html.find(\".nameFilterSection\");\n                            let nameFilters = nameFilterSections\n                                .map(function () {\n                                    return {\n                                        filterName: $(this).find(\".filterName\").val().trim(),\n                                        filterNameExclude: $(this).find(\".filterNameExclude\").prop(\"checked\"),\n                                    };\n                                })\n                                .get();\n                            let customFilterSections = html.find(\".customFilterSection\");\n                            let customFilters = customFilterSections\n                                .map(function () {\n                                    return {\n                                        filterPath: $(this).find(\".filterPath\").val().trim(),\n                                        filterRequirements: $(this)\n                                            .find(\".filterRequirements\")\n                                            .val()\n                                            .trim()\n                                            .split(\",\")\n                                            .map((req) => req.trim()),\n                                    };\n                                })\n                                .get();\n\n                            const myPack = await RetrieveHelpers.getCompendiumCollectionAsync(selected, false, false);\n                            let compendium = myPack;\n\n                            let msg = {\n                                name: compendium.metadata.label,\n                                title: compendium.title ?? compendium.metadata.name,\n                            };\n\n                            Logger.info(\n                                game.i18n.format(`${CONSTANTS.MODULE_ID}.api.msg.startRolltableGeneration`, msg),\n                                true,\n                            );\n                            const document = await this.fromCompendium(\n                                customFilters,\n                                nameFilters,\n                                selectedItems,\n                                selectedSpellLevels,\n                                filterRarity,\n                                selectedRarities,\n                                weightPredicate,\n                                compendium,\n                            );\n                            Logger.info(\n                                game.i18n.format(`${CONSTANTS.MODULE_ID}.api.msg.rolltableGenerationFinished`, msg),\n                                true,\n                            );\n                            return document;\n                        },\n                        height: 40,\n                    },\n                    cancel: {\n                        icon: \"<i class='fas fa-times'></i>\",\n                        label: \"Cancel\",\n                        callback: () => {},\n                        height: 40,\n                    },\n                },\n                default: \"cancel\",\n            },\n            {\n                width: windowWidth,\n                resizable: true,\n            },\n        );\n    }\n\n    activateListeners(html) {\n        // // TODO Implement a filter to only display relevant item types per compendium. Should uncheck and hide irrelevant options.\n        // html.find('select[name=\"compendiumSelect\"]').on('change', async (e) => {\n        //     let selectedOptionValue = $(e.currentTarget).val();\n        //     let selectedOptionName = html.find(`option[value=\"${selectedOptionValue}\"]`).val();\n        //     let thisPack = await RetrieveHelpers.getCompendiumCollectionAsync(selectedOptionName, false, false);\n\n        //     // Get all of the \"type\" properties within the pack and save it to an array\n        //     let types = await thisPack.getIndex().then(index => {\n        //         return [...new Set(index.map(i => i.type))]; // extract the \"type\" property from each object, create a set of unique values, and convert the set back to an array\n        //     });\n\n        //     Logger.log(types)\n        // });\n\n        html.find(\"#toggleAll\").on(\"click\", async () => {\n            let itemTypeCheckboxes = html.find(\".itemTypeCheckbox\");\n            let spellLevelCheckboxes = html.find(\".spellLevelCheckbox\");\n            let itemRarityCheckboxes = html.find(\".itemRarityCheckbox\");\n            let allCheckboxes = itemTypeCheckboxes.add(spellLevelCheckboxes).add(itemRarityCheckboxes);\n\n            let shouldCheckAll = allCheckboxes.toArray().some((checkbox) => !checkbox.checked);\n\n            allCheckboxes.prop(\"checked\", shouldCheckAll);\n        });\n\n        html.find(\"#filterTypes\").on(\"change\", (e) => {\n            let isChecked = e.target.checked;\n            if (isChecked) {\n                html.find(\"#itemTypeFilters\").css(\"display\", \"grid\");\n            } else {\n                html.find(\"#itemTypeFilters\").css(\"display\", \"none\");\n            }\n        });\n\n        html.find(\"#filterSpells\").on(\"change\", (e) => {\n            let isChecked = e.target.checked;\n            if (isChecked) {\n                html.find(\"#spellLevelFilters\").css(\"display\", \"grid\");\n            } else {\n                html.find(\"#spellLevelFilters\").css(\"display\", \"none\");\n            }\n        });\n\n        html.find(\"#filterRarity\").on(\"change\", (e) => {\n            let isChecked = e.target.checked;\n            if (isChecked) {\n                html.find(\"#rarityFilters\").css(\"display\", \"grid\");\n            } else {\n                html.find(\"#rarityFilters\").css(\"display\", \"none\");\n            }\n        });\n\n        html.find(\"#addCustomFilter\").on(\"click\", () => {\n            const customFilterSection = this.createCustomFilterSection();\n            html.find(\"#customFilters\").append(customFilterSection);\n        });\n\n        html.find(\"#addNameFilter\").on(\"click\", () => {\n            const nameFilterSection = this.createNameFilterSection();\n            html.find(\"#nameFilters\").append(nameFilterSection);\n        });\n\n        super.activateListeners(html);\n    }\n\n    /* ======================================== */\n\n    // capitalize(string) {\n    //   if (typeof string === \"string\") return string[0].toUpperCase() + string.substring(1);\n    //   return string;\n    // }\n\n    getValueByPath(obj, path) {\n        let parts = path.split(\".\");\n        let current = obj;\n\n        for (let part of parts) {\n            if (current[part] !== undefined) {\n                current = current[part];\n            } else {\n                return undefined;\n            }\n        }\n        return current;\n    }\n\n    createCustomFilterSection() {\n        const section = document.createElement(\"div\");\n        section.className = \"customFilterSection\";\n        section.innerHTML = `\n            <hr>\n            <div class=\"form-group\">\n                <label>Path:</label>\n                <div class=\"form-fields\">\n                    <input type=\"text\" class=\"filterPath\" placeholder=\"system.baseItem\"></input>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label>Requirements:</label>\n                <div class=\"form-fields\">\n                    <input type=\"text\" class=\"filterRequirements\" placeholder=\"battleaxe, longbow\"></input>\n                </div>\n            </div>`;\n        return section;\n    }\n\n    createNameFilterSection() {\n        const section = document.createElement(\"div\");\n        section.className = \"nameFilterSection\";\n        section.innerHTML = `\n            <hr>\n            <div class=\"form-group\">\n                <label>Name Contains:</label>\n                <div class=\"form-fields\">\n                    <input type=\"text\" class=\"filterName\" placeholder=\"arrow\"></input>\n                </div>\n                <input type=\"checkbox\" class=\"filterNameExclude\">Exclude</input>\n            </div>`;\n        return section;\n    }\n\n    caseInsensitiveIncludes(needle, haystack) {\n        return haystack.toLowerCase().includes(needle.toLowerCase());\n    }\n\n    async fromCompendiumSimple(compendium, options = {}) {\n        // Ported from Foundry's existing RollTable.fromFolder()\n        const results = await compendium.index.map((e, i) => {\n            Logger.log(\"Compendium Item:\");\n            Logger.log(e);\n            Logger.log(\"Compendium Index:\");\n            Logger.log(i);\n            return {\n                text: e.name,\n                type: CONST.TABLE_RESULT_TYPES.COMPENDIUM,\n                collection: compendium.type,\n                resultId: e.id ? e.id : e._id,\n                img: e.thumbnail || e.img || CONFIG.RollTable.resultIcon,\n                weight: 1,\n                range: [i + 1, i + 1],\n                documentCollection: `${compendium.metadata.packageName}.${compendium.metadata.name}`,\n                drawn: false,\n            };\n        });\n        return await this.createCompendiumFromData(compendium.metadata.label, results, `1d${results.length}`, options);\n    }\n\n    async fromCompendium(\n        customFilters,\n        nameFilters,\n        selectedItems,\n        selectedSpellLevels,\n        filterRarity,\n        selectedRarities,\n        weightPredicate,\n        compendium,\n        options = {},\n    ) {\n        // Ported from Foundry's existing RollTable.fromFolder()\n        const entries = await compendium.getDocuments();\n        // const entries = compendium.contents;\n        const filteredEntries = entries.filter((entry) => {\n            let customFiltersValid = customFilters.every(({ filterPath, filterRequirements }) => {\n                let filterPathValue = this.getValueByPath(entry, filterPath);\n                let filterPathValid =\n                    filterPath.length === 0 ||\n                    (filterRequirements.length > 0 &&\n                        filterPathValue !== undefined &&\n                        filterRequirements.map(String).includes(String(filterPathValue)));\n                return filterPathValid;\n            });\n\n            let nameFilterValid = nameFilters.every(({ filterName, filterNameExclude }) => {\n                return (\n                    filterName.length === 0 ||\n                    (filterNameExclude\n                        ? !this.caseInsensitiveIncludes(filterName, entry.name)\n                        : this.caseInsensitiveIncludes(filterName, entry.name))\n                );\n            });\n\n            let itemTypeValid = selectedItems.includes(entry.type);\n            let spellLevelValid =\n                (entry.system.type !== \"spell\" && entry.type !== \"spell\") ||\n                selectedSpellLevels.includes(entry.system.level);\n            let rarityValid = !filterRarity || (entry.system.rarity && selectedRarities.includes(entry.system.rarity));\n\n            return customFiltersValid && nameFilterValid && itemTypeValid && spellLevelValid && rarityValid;\n        });\n\n        if (filteredEntries.length === 0) {\n            return Logger.error(\"No valid items within compendium for selected filters.\", true);\n        }\n        const results = filteredEntries.map((entry, i) => {\n            Logger.debug(\"Compendium Item:\");\n            Logger.debug(entry);\n            Logger.debug(\"Compendium Index:\");\n            Logger.debug(i);\n\n            return {\n                text: entry.name,\n                type: CONST.TABLE_RESULT_TYPES.COMPENDIUM,\n                collection: compendium.type,\n                resultId: entry.id,\n                img: entry.thumbnail || entry.img || CONFIG.RollTable.resultIcon,\n                weight: weightPredicate ? weightPredicate(item) : 1,\n                range: [i + 1, i + 1],\n                documentCollection: `${compendium.metadata.packageName}.${compendium.metadata.name}`,\n                drawn: false,\n            };\n        });\n\n        // const results = await compendium.index.map((e, i) => {\n        //         Logger.debug(\"Compendium Item:\");\n        //         Logger.debug(entry);\n        //         Logger.debug(\"Compendium Index:\");\n        //         Logger.debug(i);\n        //     return {\n        //         text: e.name,\n        //         type: CONST.TABLE_RESULT_TYPES.COMPENDIUM,,\n        //         collection: compendium.type,\n        //         resultId: e.id ? e.id : e._id,\n        //         img: e.thumbnail || e.img || CONFIG.RollTable.resultIcon,\n        //         weight: 1,\n        //         range: [i + 1, i + 1],\n        //         documentCollection: `${compendium.metadata.packageName}.${compendium.metadata.name}`,\n        //         drawn: false\n        //     };\n        // });\n\n        // options.renderSheet = options.renderSheet ?? true;\n        // return await RollTable.create({\n        //     name: compendium.metadata.label + \" RollTable\",\n        //     description: `A random table created from the contents of the ${compendium.metadata.label} compendium.`,\n        //     results: results,\n        //     formula: `1d${results.length}`\n        // }, options);\n\n        return await this.createCompendiumFromData(compendium.metadata.label, results, `1d${results.length}`, options);\n    }\n\n    async createCompendiumFromData(compendiumName, results, formula, options = {}) {\n        options.renderSheet = options.renderSheet ?? true;\n        const documents = [];\n        const document = await RollTable.create(\n            {\n                name: compendiumName + \" RollTable\",\n                description: `A random table created from the contents of the ${compendiumName} compendium.`,\n                results: results,\n                formula: formula ?? `1d${results.length}`,\n            },\n            options,\n        );\n        documents.push(document);\n        return documents;\n    }\n}\n","import { CONSTANTS } from \"../constants/constants\";\nimport { BRTBetterHelpers } from \"../tables/better/brt-helper\";\nimport Logger from \"./Logger\";\n\n// =========================================================================================\n\n/**\n * Here is a little function that checks the validity of both types of regexes, strings or patterns\n * The user will be able to test both 'test' and '/test/g'.\n * let a = validateRegex(\"/test/i\");\n * let b = new RegExp(\"/test/i\");\n * let s = \"teSt\";\n * let t1 = a.test(s); // true\n * let t2 = b.test(s); // false\n * @href https://stackoverflow.com/questions/17250815/how-to-check-if-the-input-string-is-a-valid-regular-expression\n * @param {string} stringToCheck The string passed to check\n * @param {string} [pattern=\"\"] The regular expression to use on the string passed.\n * @param {boolean} [enableExactMatch=false] Enable Exact Match.\n * @param {boolean} [enableAnySuffixMatch=false] Enable Any Suffix Match.\n * @returns {boolean} The regular expression match the string passed.\n */\nexport function testWithRegex(stringToCheck, pattern = \"\", enableExactMatch = false, enableAnySuffixMatch = false) {\n    if (!pattern) {\n        return false;\n    }\n    if (enableExactMatch) {\n        let t2 = stringToCheck?.toLowerCase()?.trim() === pattern?.toLowerCase()?.trim();\n        if (t2) {\n            Logger.debug(`testWithRegex | Regex found with enableExactMatch ${stringToCheck} === ${pattern}`, false);\n        }\n        return t2;\n    }\n\n    let stringToCheckTmp = stringToCheck?.toLowerCase()?.trim();\n    let patternTmp = pattern?.toLowerCase()?.trim();\n    if (enableAnySuffixMatch && !patternTmp.endsWith(`(.*?)`)) {\n        patternTmp = `^${patternTmp}(.*?)$`;\n    } else {\n        patternTmp = `^${patternTmp}$`;\n    }\n    try {\n        let t1 = new RegExp(patternTmp).test(stringToCheckTmp); // stringToCheck.match(patternTmp);\n        if (t1) {\n            Logger.debug(`testWithRegex | Regex found ${stringToCheck} <=> ${pattern}`, false);\n        }\n        return t1;\n    } catch (e) {\n        Logger.error(`testWithRegex | Regex error ${stringToCheck} <=> ${pattern}`, false, e);\n        return false;\n    }\n}\n\nexport function isEmptyObject(obj) {\n    // because Object.keys(new Date()).length === 0;\n    // we have to do some additional check\n    if (obj === null || obj === undefined) {\n        return true;\n    }\n    if (isRealNumber(obj)) {\n        return false;\n    }\n    if (obj instanceof Object && Object.keys(obj).length === 0) {\n        return true;\n    }\n    if (obj instanceof Array && obj.length === 0) {\n        return true;\n    }\n    if (obj && Object.keys(obj).length === 0) {\n        return true;\n    }\n    return false;\n}\n\nexport function isRealNumber(inNumber) {\n    return !isNaN(inNumber) && typeof inNumber === \"number\" && isFinite(inNumber);\n}\n\nexport function isRealBoolean(inBoolean) {\n    return String(inBoolean) === \"true\" || String(inBoolean) === \"false\";\n}\n\nexport function isRealBooleanOrElseNull(inBoolean) {\n    return isRealBoolean(inBoolean) ? inBoolean : null;\n}\n\nexport function getSubstring(string, char1, char2) {\n    return string.slice(string.indexOf(char1) + 1, string.lastIndexOf(char2));\n}\n\n/**\n * Parses the given object as an array.\n * If the object is a string, it splits it by commas and returns an array.\n * If the object is already an array, it returns the same array.\n * If the object is neither a string nor an array, it wraps it in an array and returns it.\n * @param {string|Array|any} obj - The object to be parsed as an array.\n * @returns {Array} - The parsed array.\n */\nexport function parseAsArray(obj) {\n    if (!obj) {\n        return [];\n    }\n    let arr = [];\n    if (typeof obj === \"string\" || obj instanceof String) {\n        arr = obj.split(\",\");\n    } else if (obj.constructor === Array) {\n        arr = obj;\n    } else {\n        arr = [obj];\n    }\n    return arr;\n}\n\n/**\n * Normalize the roll mode found by the pattern.\n * @param {String} mode the mode found by the pattern\n * @returns the corresponding value from `CONST.DICE_ROLL_MODES`\n */\nexport function getRollMode(mode) {\n    switch (mode) {\n        case \"r\":\n        case \"roll\": {\n            return \"roll\";\n        }\n        case \"pr\":\n        case \"publicroll\": {\n            return \"publicroll\";\n        }\n        case \"gmr\":\n        case \"gmroll\": {\n            return \"gmroll\";\n        }\n        case \"br\":\n        case \"broll\":\n        case \"blindroll\": {\n            return \"blindroll\";\n        }\n        case \"sr\":\n        case \"selfroll\": {\n            return \"selfroll\";\n        }\n    }\n}\n\n/**\n * Utility method to convert the element to a number\n * @param {number|string} elementToConvertToNumber\n * @returns {Promise<number>} The number representation of the element\n */\nexport async function tryToConvertToNumber(elementToConvertToNumber) {\n    if (elementToConvertToNumber) {\n        if (isRealNumber(elementToConvertToNumber)) {\n            // DO NOTHING\n        } else if (String(elementToConvertToNumber) === \"0\") {\n            elementToConvertToNumber = 0;\n        } else {\n            let elementI = null;\n            try {\n                elementI = Number(elementToConvertToNumber);\n            } catch (e) {}\n            if (elementI && isRealNumber(elementI)) {\n                elementToConvertToNumber = elementI;\n            } else {\n                elementToConvertToNumber = await BRTBetterHelpers.tryRoll(elementToConvertToNumber, 0);\n            }\n        }\n    } else {\n        elementToConvertToNumber = 0;\n    }\n    return elementToConvertToNumber;\n}\n\n/**\n * Utility method to convert the element to a number\n * @param {number|string} elementToConvertToNumber\n * @returns {number} The number representation of the element\n */\nexport function tryToConvertToNumberSync(elementToConvertToNumber) {\n    if (elementToConvertToNumber) {\n        if (isRealNumber(elementToConvertToNumber)) {\n            // DO NOTHING\n        } else if (String(elementToConvertToNumber) === \"0\") {\n            elementToConvertToNumber = 0;\n        } else {\n            let elementI = null;\n            try {\n                elementI = Number(elementToConvertToNumber);\n            } catch (e) {}\n            if (elementI && isRealNumber(elementI)) {\n                elementToConvertToNumber = elementI;\n            } else {\n                elementToConvertToNumber = BRTBetterHelpers.tryRollSync(elementToConvertToNumber, 0);\n            }\n        }\n    } else {\n        elementToConvertToNumber = 0;\n    }\n    return elementToConvertToNumber;\n}\n","import { BRTBetterHelpers } from \"../tables/better/brt-helper\";\nimport { CONSTANTS } from \"../constants/constants\";\nimport { getRollMode, isRealBoolean, isRealBooleanOrElseNull, isRealNumber, parseAsArray } from \"../lib/lib\";\nimport SETTINGS from \"../constants/settings\";\nimport Logger from \"../lib/Logger\";\nimport { RetrieveHelpers } from \"../lib/retrieve-helpers\";\n\nexport class BRTUtils {\n    static addRollModeToChatData(chatData, rollMode) {\n        rollMode = rollMode ?? game.settings.get(\"core\", \"rollMode\");\n        if (String(getProperty(chatData, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HIDDEN_TABLE}`)) === \"true\") {\n            rollMode = \"gmroll\";\n        }\n\n        switch (rollMode) {\n            case \"blindroll\":\n                chatData.blind = true;\n            // no break needed, if so please change this comment ?\n\n            case \"gmroll\":\n                chatData.whisper = [game.users.find((u) => u.isGM).id];\n                break;\n            case \"selfroll\":\n                chatData.whisper = [game.userId];\n                break;\n        }\n    }\n\n    /**\n     *\n     * @param {string} compendiumName\n     * @param {string} entityName\n     *\n     * @returns {Item}\n     */\n    static async findInCompendiumByName(compendiumName, entityName) {\n        const myPack = await RetrieveHelpers.getCompendiumCollectionAsync(compendiumName, true, false);\n        const compendium = myPack;\n        if (compendium) {\n            const entry = compendium.index.getName(entityName);\n            if (entry) {\n                return await compendium.getDocument(entry._id);\n            }\n        } else {\n            switch (compendiumName) {\n                case \"RollTable\":\n                    return game.tables.getName(entityName);\n                case \"Actor\":\n                    return game.actors.getName(entityName);\n                case \"Item\":\n                    return game.items.getName(entityName);\n                case \"JournalEntry\":\n                    return game.journal.getName(entityName);\n                case \"Playlist\":\n                    return game.playlists.getName(entityName);\n                case \"Scene\":\n                    return game.scenes.getName(entityName);\n                case \"Macro\":\n                    return game.macros.getName(entityName);\n                case \"Card\":\n                    return game.cards.getName(entityName);\n            }\n        }\n    }\n\n    static async findInCompendiumById(compendiumName, entityId) {\n        const myPack = await RetrieveHelpers.getCompendiumCollectionAsync(compendiumName, false, false);\n        return await myPack?.getDocument(entityId);\n    }\n\n    static separateIdComendiumName(stringWithComendium) {\n        const split = stringWithComendium.split(\".\");\n        const nameOrId = split.pop().trim();\n        const compendiumName = split.join(\".\").trim();\n        return {\n            nameOrId: nameOrId,\n            compendiumName: compendiumName,\n        };\n    }\n\n    /**\n     *\n     * @param {TableResult} result reference to item\n     * @returns {object|boolean} item from compendium\n     */\n    static async getItemFromCompendium(result) {\n        let nameEntry = getProperty(\n            result,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_ORIGINAL_NAME}`,\n        )\n            ? getProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_ORIGINAL_NAME}`)\n            : result.text;\n        return BRTUtils.findInCompendiumByName(result.collection, nameEntry);\n    }\n\n    /**\n     *\n     * @param {object} compendium reference to compendium to roll\n     * @returns {object} item from compendium\n     */\n    static async getRandomItemFromCompendium(compendium) {\n        const myPack = await RetrieveHelpers.getCompendiumCollectionAsync(compendium, true, false);\n        const pack = myPack;\n        if (!pack) {\n            return;\n        }\n        const size = pack.index.size;\n        if (size === 0) {\n            Logger.warn(`Compendium ${pack.title} is empty.`, true);\n            return;\n        }\n        const randonIndex = Math.floor(Math.random() * size);\n        const randomItem = pack.index.contents[randonIndex];\n        return pack.getDocument(randomItem._id);\n    }\n\n    static getIconByEntityType(entityType) {\n        switch (entityType) {\n            case \"RollTable\":\n                return \"fa-th-list\";\n            case \"Actor\":\n                return \"fa-user\";\n            case \"Item\":\n                return \"fa-suitcase\";\n            case \"JournalEntry\":\n                return \"fa-book-open\";\n            case \"Playlist\":\n                return \"fa-music\";\n            case \"Scene\":\n                return \"fa-map\";\n            case \"Macro\":\n                return \"fa-terminal\";\n            default:\n                return \"\";\n        }\n    }\n\n    /**\n     *\n     * @param {RollTable} tableEntity\n     * @param {Object} options\n     * @param {Roll|string} options.roll An optional pre-configured Roll instance which defines the dice roll to use\n     * @param {boolean} options.recursive Allow drawing recursively from inner RollTable results\n     * @param {boolean} options.displayChat Whether to automatically display the results in chat\n     * @param {number} options.rollsAmount\n     * @param {number} options.dc\n     * @param {string} options.skill\n     * @param {boolean} options.isTokenActor\n     * @param {boolean} options.stackSame\n     * @param {string} options.customRoll\n     * @param {number} options.itemLimit\n     * @param {string} options.rollMode\n     * @param {string} options.distinct\n     * @param {string} options.distinctKeepRolling\n     * @param {string} options.rollAsTableType\n     * @returns {Promise<{rollsAmount: number, dc: number, skill: string, isTokenActor: boolean, stackSame: boolean, customRoll: string, itemLimit: number, rollMode: string, distinct: boolean, distinctKeepRolling: string; rollAsTableType:string;}>},\n     */\n    static async updateOptions(tableEntity, options = {}) {\n        let newOptions = {};\n        if (!options) {\n            options = {};\n        }\n\n        let rollsAmount = undefined;\n        if (options?.rollsAmount) {\n            if (isRealNumber(options?.rollsAmount)) {\n                rollsAmount = options?.rollsAmount;\n            } else {\n                rollsAmount = await BRTBetterHelpers.tryRoll(options?.rollsAmount);\n            }\n        } else {\n            rollsAmount = await BRTBetterHelpers.rollsAmount(tableEntity);\n        }\n\n        newOptions.rollsAmount = rollsAmount;\n\n        let dc =\n            options?.dc ||\n            getProperty(tableEntity, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HARVEST_DC_VALUE_KEY}`) ||\n            undefined;\n\n        if (dc) {\n            if (isRealNumber(dc)) {\n                // DO NOTHING\n            } else if (String(dc) === \"0\") {\n                dc = 0;\n            } else {\n                let dcI = null;\n                try {\n                    dcI = Number(dc);\n                } catch (e) {}\n                if (dcI && isRealNumber(dcI)) {\n                    dc = dcI;\n                } else {\n                    dc = await BRTBetterHelpers.tryRoll(dc);\n                }\n            }\n        }\n        newOptions.dc = dc;\n\n        newOptions.skill =\n            options?.skill ||\n            getProperty(tableEntity, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HARVEST_SKILL_VALUE_KEY}`) ||\n            undefined;\n\n        newOptions.skills = parseAsArray(newOptions.skill);\n\n        newOptions.isTokenActor = isRealBoolean(options?.isTokenActor)\n            ? String(options?.isTokenActor) === \"true\"\n                ? true\n                : false\n            : false;\n\n        newOptions.stackSame = isRealBoolean(options?.stackSame)\n            ? String(options?.stackSame) === \"true\"\n                ? true\n                : false\n            : true;\n\n        let customRole = options?.customRole ? options.customRole : undefined;\n        if (!customRole) {\n            customRole = options?.customRoll ? options.customRoll : undefined;\n        }\n        newOptions.customRoll = customRole;\n\n        newOptions.itemLimit = options?.itemLimit && isRealNumber(options.itemLimit) ? Number(options.itemLimit) : 0;\n\n        let rollMode = options?.rollMode ?? null;\n        if (\n            String(getProperty(tableEntity, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HIDDEN_TABLE}`)) === \"true\"\n        ) {\n            rollMode = \"gmroll\";\n        }\n        newOptions.rollMode = getRollMode(rollMode);\n\n        let distinct = isRealBooleanOrElseNull(options?.distinct);\n        if (distinct === null) {\n            distinct = isRealBooleanOrElseNull(\n                getProperty(tableEntity, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_DISTINCT_RESULT}`),\n            );\n        }\n        if (distinct === null) {\n            distinct = undefined;\n        }\n\n        newOptions.distinct = isRealBoolean(distinct) ? (String(distinct) === \"true\" ? true : false) : false;\n\n        let distinctKeepRolling = isRealBooleanOrElseNull(options?.distinctKeepRolling);\n        if (distinctKeepRolling === null) {\n            distinctKeepRolling = isRealBooleanOrElseNull(\n                getProperty(\n                    tableEntity,\n                    `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_DISTINCT_RESULT_KEEP_ROLLING}`,\n                ),\n            );\n        }\n        if (distinctKeepRolling === null) {\n            distinctKeepRolling = undefined;\n        }\n\n        newOptions.distinctKeepRolling = isRealBoolean(distinctKeepRolling)\n            ? String(distinctKeepRolling) === \"true\"\n                ? true\n                : false\n            : false;\n\n        newOptions.resetTable = isRealBoolean(options?.resetTable)\n            ? String(options?.resetTable) === \"true\"\n                ? true\n                : false\n            : true;\n\n        newOptions.normalizeTable = isRealBoolean(options?.normalizeTable)\n            ? String(options?.normalizeTable) === \"true\"\n                ? true\n                : false\n            : false;\n\n        newOptions.displayChat = isRealBoolean(options?.displayChat)\n            ? String(options?.displayChat) === \"true\"\n                ? true\n                : false\n            : true;\n\n        let usePercentage = isRealBooleanOrElseNull(options?.usePercentage);\n        if (usePercentage === null) {\n            usePercentage = isRealBooleanOrElseNull(\n                getProperty(tableEntity, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_USE_PERCENTAGE}`),\n            );\n        }\n        if (usePercentage === null) {\n            usePercentage = undefined;\n        }\n\n        newOptions.usePercentage = isRealBoolean(usePercentage)\n            ? String(usePercentage) === \"true\"\n                ? true\n                : false\n            : false;\n\n        let useDynamicDc = isRealBooleanOrElseNull(options?.useDynamicDc);\n        if (useDynamicDc === null) {\n            useDynamicDc = isRealBooleanOrElseNull(\n                getProperty(tableEntity, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HARVEST_USE_DYNAMIC_DC}`),\n            );\n        }\n        if (useDynamicDc === null) {\n            useDynamicDc = undefined;\n        }\n\n        newOptions.useDynamicDc = isRealBoolean(useDynamicDc)\n            ? String(useDynamicDc) === \"true\"\n                ? true\n                : false\n            : false;\n\n        newOptions.recursive = isRealBoolean(options.recursive)\n            ? String(options.recursive) === \"true\"\n                ? true\n                : false\n            : true;\n        newOptions.roll = options.roll ? String(options.roll) : null;\n\n        let brtTypeToCheck = BRTUtils.retrieveBRTType(tableEntity, options?.rollAsTableType);\n        if (!CONSTANTS.TYPES.includes(brtTypeToCheck)) {\n            brtTypeToCheck = null;\n        }\n        if (brtTypeToCheck === \"none\") {\n            brtTypeToCheck = null;\n        }\n        newOptions.rollAsTableType = brtTypeToCheck;\n\n        newOptions.rollAsTableTypeAllTheTables = isRealBoolean(options.rollAsTableTypeAllTheTables)\n            ? String(options.rollAsTableTypeAllTheTables) === \"true\"\n                ? true\n                : false\n            : false;\n\n        return newOptions;\n    }\n\n    /**\n     * @deprecated try to not use this anymore\n     * @param {*} itemsData\n     * @param {*} itemEntity\n     * @param {*} itemData\n     * @param {*} isHidden\n     * @returns\n     */\n    static async addToItemData(itemsData, itemEntity, itemData = {}, isHidden = false) {\n        const existingItem = itemsData.find((i) => i.item.id === itemEntity.id);\n        const quantity = getProperty(itemData, game.itempiles.API.ITEM_QUANTITY_ATTRIBUTE) || 1; // getProperty(itemData, SETTINGS.QUANTITY_PROPERTY_PATH) || 1;\n        // const weight = getProperty(itemData, SETTINGS.WEIGHT_PROPERTY_PATH) || 0;\n\n        if (existingItem) {\n            existingItem.quantity = existingItem.quantity + quantity;\n            // existingItem.weight = existingItem.weight +weight;\n        } else {\n            // we will scale down the font size if an item name is too long\n            const fontSize = Math.max(60, 100 - Math.max(0, (itemEntity.name || itemEntity.text).length - 27) * 2);\n\n            let type = undefined;\n            if (itemEntity.isText) {\n                type = CONST.TABLE_RESULT_TYPES.TEXT;\n            } else if (itemEntity.pack) {\n                type = CONST.TABLE_RESULT_TYPES.COMPENDIUM;\n            } else {\n                type = CONST.TABLE_RESULT_TYPES.DOCUMENT;\n            }\n\n            // let resultDoc = await BRTBetterHelpers.retrieveDocumentFromResult(itemEntity);\n            let resultDoc = itemEntity;\n\n            itemsData.push({\n                documentName: resultDoc.documentName,\n                compendiumName: resultDoc.pack,\n                type: type,\n                item: {\n                    id: resultDoc.id,\n                    _id: resultDoc.id,\n                    name: resultDoc.name,\n                    img: resultDoc.img ?? resultDoc.src ?? `icons/svg/d20-highlight.svg`,\n                    text: resultDoc.text ?? resultDoc.name ?? \"\",\n                    uuid: resultDoc?.uuid ?? \"\",\n                    isHidden: isHidden,\n                },\n                quantity: quantity,\n                // weight: weight,\n                fontSize: fontSize,\n            });\n        }\n\n        return itemsData;\n    }\n\n    static isTableResultText(result) {\n        return result?.type === CONST.TABLE_RESULT_TYPES.TEXT;\n    }\n\n    static isTableResultDocument(result) {\n        return result?.type === CONST.TABLE_RESULT_TYPES.DOCUMENT;\n    }\n\n    static isTableResultCompendium(result) {\n        return result?.type === CONST.TABLE_RESULT_TYPES.COMPENDIUM;\n    }\n\n    static retrieveBRTType(tableEntity, rollAsTableType = null, returnFlag = false) {\n        let brtTypeToCheck = rollAsTableType\n            ? rollAsTableType\n            : getProperty(tableEntity, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.TABLE_TYPE_KEY}`);\n        if (returnFlag) {\n            return brtTypeToCheck;\n        }\n        if (!CONSTANTS.TYPES.includes(brtTypeToCheck)) {\n            brtTypeToCheck = null;\n        }\n        if (brtTypeToCheck === \"none\") {\n            brtTypeToCheck = null;\n        }\n        return brtTypeToCheck;\n    }\n\n    static retrieveBRTRollAmount(tableEntity, rollAmount = null) {\n        let brtRollAmountToCheck = rollAmount\n            ? rollAmount\n            : getProperty(tableEntity, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_AMOUNT_KEY}`);\n        if (!brtRollAmountToCheck && tableEntity.quantity) {\n            brtRollAmountToCheck = tableEntity.quantity;\n        }\n        return brtRollAmountToCheck;\n    }\n\n    /**\n     * @href https://github.com/krbz999/simple-loot-list/blob/main/module/module.mjs\n     * @param {RollTable|string|UUID} tableEntity\n     * @returns {Promise<Item[]>}\n     */\n    static async extractItemsFromRollTAble(tableEntity) {\n        const table = await RetrieveHelpers.getRollTableAsync(tableEntity);\n        const TYPES = CONST.TABLE_RESULT_TYPES;\n        // Must have valid results embedded.\n        const uuids = table.results\n            .filter((result) => {\n                return [TYPES.DOCUMENT, TYPES.COMPENDIUM].includes(result.type) && !!result.documentCollection;\n            })\n            .map((result) => {\n                if (result.type === TYPES.DOCUMENT) {\n                    return `${result.documentCollection}.${result.documentId}`;\n                }\n                return `Compendium.${result.documentCollection}.Item.${result.documentId}`;\n            });\n\n        if (!uuids.length) {\n            Logger.warn(Logger.i18nFormat(`${CONSTANTS.MODULE_ID}.label.WarningEmptyDocument`, {}), true);\n            return false;\n        }\n\n        // Get the items and check validity.\n        const promises = uuids.map((uuid) => fromUuid(uuid));\n        const resolved = await Promise.all(promises);\n        const items = resolved; // TODO FILTER BY TYPE ??? .filter(r => this.validRollTableTypes.has(r?.type));\n\n        if (!items.length) {\n            Logger.warn(Logger.i18nFormat(`${CONSTANTS.MODULE_ID}.label.WarningEmptyDocument`, {}), true);\n            return false;\n        }\n\n        return items;\n    }\n}\n","import { CONSTANTS } from \"../constants/constants\";\nimport Logger from \"./Logger\";\nimport { RetrieveHelpers } from \"./retrieve-helpers\";\n\nexport default class CompendiumsHelpers {\n    /**\n     * Define the allowed Document types which may be dynamically linked in chat\n     * @type {string[]}\n     */\n    static DOCUMENT_LINK_TYPES = [\n        \"Actor\",\n        \"Cards\",\n        \"Item\",\n        \"Scene\",\n        \"JournalEntry\",\n        \"Macro\",\n        \"RollTable\",\n        \"PlaylistSound\",\n    ];\n\n    static PACK_ID_ITEM = `world.${CONSTANTS.MODULE_ID}-backup-do-not-delete-item`;\n\n    static COMPENDIUM_CACHE = {};\n\n    static async initializeCompendiumCache() {\n        // Hooks.on(\"updateItem\", async (document) => {\n        //     if (!document?.pack || !document?.pack.startsWith(CompendiumsHelpers.PACK_ID_ITEM)) {\n        //         return;\n        //     }\n        //     COMPENDIUM_CACHE[document.uuid] = document.toObject();\n        // });\n        // const pack = game.packs.get(CompendiumsHelpers.PACK_ID_ITEM);\n        // if (pack) {\n        //     for (const index of pack.index) {\n        //         const item = await pack.getDocument(index._id);\n        //         COMPENDIUM_CACHE[item.uuid] = item.toObject();\n        //     }\n        // }\n        //\n        // setTimeout(async () => {\n        //     await updateCache();\n        //     Hooks.on(\"updateCompendium\", updateCache);\n        // }, 250);\n    }\n\n    static async getCompendiumAsync(packId) {\n        if (!packId) {\n            throw Logger.error(`No packId is been passed`);\n        }\n        let compendium = await RetrieveHelpers.getCompendiumCollectionAsync(packId, true, false);\n        return compendium;\n        // return game.packs.get(packId);\n    }\n\n    static async getCompendiumSync(packId) {\n        if (!packId) {\n            throw Logger.error(`No packId is been passed`);\n        }\n        let compendium = await RetrieveHelpers.getCompendiumCollectionSync(packId, false, false);\n        return compendium;\n        // return game.packs.get(packId);\n    }\n\n    static async getDocumentCompendiumAsync(packId, options = { name: \"\", type: \"\", id: \"\", uuid: \"\" }) {\n        if (!packId) {\n            throw Logger.error(`No packId is been passed`);\n        }\n        let compendium = await RetrieveHelpers.getCompendiumCollectionAsync(packId, false, false);\n        const { name, type, id, uuid } = options;\n        const document = (await compendium?.getDocuments()).find((compendiumDocument) => {\n            let isFound = true;\n            if (isFound && type) {\n                isFound = compendiumDocument.type === type;\n            }\n            if (isFound && name) {\n                isFound = compendiumDocument.name === name;\n            }\n            if (isFound && id) {\n                isFound = compendiumDocument.id === id || compendiumDocument._id === id;\n            }\n            if (isFound && uuid) {\n                isFound = compendiumDocument.uuid === uuid;\n            }\n            return isFound;\n        });\n        return document;\n    }\n\n    static getDocumentCompendiumSync(packId, options = { name: \"\", type: \"\", id: \"\", uuid: \"\" }) {\n        if (!packId) {\n            throw Logger.error(`No packId is been passed`);\n        }\n        let compendium = RetrieveHelpers.getCompendiumCollectionSync(packId, true, false);\n        const { name, type, id, uuid } = options;\n        const document = compendium.index.find((compendiumDocument) => {\n            let isFound = true;\n            if (isFound && type) {\n                isFound = compendiumDocument.type === type;\n            }\n            if (isFound && name) {\n                isFound = compendiumDocument.name === name;\n            }\n            if (isFound && id) {\n                isFound = compendiumDocument.id === id || compendiumDocument._id === id;\n            }\n            if (isFound && uuid) {\n                isFound = compendiumDocument.uuid === uuid;\n            }\n            return isFound;\n        });\n        return document;\n    }\n\n    static async addDocumentsToCompendium(packId, documents) {\n        if (!packId) {\n            throw Logger.error(`No packId is been passed`);\n        }\n        const documentsMapAdded = new Map();\n        for (const documentToAdd of documents) {\n            if (documentToAdd.type === \"Actor\") {\n                const list = documentsMapAdded.get(\"Actor\", documentToAdd) || [];\n                list.push(documentToAdd);\n                documentsMapAdded.set(\"Actor\", list);\n            } else if (documentToAdd.type === \"Cards\") {\n                const list = documentsMapAdded.get(\"Cards\", documentToAdd) || [];\n                list.push(documentToAdd);\n                documentsMapAdded.set(\"Cards\", list);\n            } else if (documentToAdd.type === \"Item\") {\n                const list = documentsMapAdded.get(\"Item\", documentToAdd) || [];\n                list.push(documentToAdd);\n                documentsMapAdded.set(\"Item\", list);\n            } else if (documentToAdd.type === \"Scene\") {\n                const list = documentsMapAdded.get(\"Scene\", documentToAdd) || [];\n                list.push(documentToAdd);\n                documentsMapAdded.set(\"Scene\", list);\n            } else if (documentToAdd.type === \"JournalEntry\") {\n                const list = documentsMapAdded.get(\"JournalEntry\", documentToAdd) || [];\n                list.push(documentToAdd);\n                documentsMapAdded.set(\"JournalEntry\", list);\n            } else if (documentToAdd.type === \"Macro\") {\n                const list = documentsMapAdded.get(\"Macro\", documentToAdd) || [];\n                list.push(documentToAdd);\n                documentsMapAdded.set(\"Macro\", list);\n            } else if (documentToAdd.type === \"RollTable\") {\n                const list = documentsMapAdded.get(\"RollTable\", documentToAdd) || [];\n                list.push(documentToAdd);\n                documentsMapAdded.set(\"RollTable\", list);\n            } else if (documentToAdd.type === \"PlaylistSound\") {\n                const list = documentsMapAdded.get(\"PlaylistSound\", documentToAdd) || [];\n                list.push(documentToAdd);\n                documentsMapAdded.set(\"PlaylistSound\", list);\n            } else {\n                throw Logger.error(`This document type ${documentToAdd?.type} is not supported`, false, documentToAdd);\n            }\n        }\n\n        for (let [documentType, documents] of documentsMapAdded) {\n            Logger.log(`Add documents ${documentType} to ${packId}:`, documents);\n            if (documentType === \"Actor\") {\n                Actor.createDocuments(documents, { pack: packId });\n            } else if (documentType === \"Cards\") {\n                Cards.createDocuments(documents, { pack: packId });\n            } else if (documentType === \"Item\") {\n                Item.createDocuments(documents, { pack: packId });\n            } else if (documentType === \"Scene\") {\n                Scene.createDocuments(documents, { pack: packId });\n            } else if (documentType === \"JournalEntry\") {\n                JournalEntry.createDocuments(documents, { pack: packId });\n            } else if (documentType === \"Macro\") {\n                Macro.createDocuments(documents, { pack: packId });\n            } else if (documentType === \"RollTable\") {\n                RollTable.createDocuments(documents, { pack: packId });\n            } else if (documentType === \"PlaylistSound\") {\n                PlaylistSound.createDocuments(documents, { pack: packId });\n            } else {\n                throw Logger.error(`This document type ${documentType} is not supported`, false);\n            }\n        }\n        return documentsMapAdded;\n    }\n\n    static async findSimilarDocumentInCompendiumAsync(packId, documentReference) {\n        if (!packId) {\n            throw Logger.error(`No packId is been passed`);\n        }\n        const uuid = RetrieveHelpers.getUuid(documentReference);\n        if (!uuid) {\n            Logger.warn(`Cannot find document with '${documentReference}'`);\n            return;\n        }\n        const documentToFind = await fromUuid(uuid);\n        const pack = await CompendiumsHelpers.getCompendiumAsync(packId);\n        const document = game.packs.get(packId).index.find((compendiumDocument) => {\n            return compendiumDocument.name === documentToFind.name && compendiumDocument.type === documentToFind.type;\n        });\n        return document?._id ? pack.getDocument(document._id) : false;\n    }\n\n    static getDocumentFromCache(uuid) {\n        return COMPENDIUM_CACHE[uuid] ?? false;\n    }\n\n    static async findOrCreateDocumentInCompendium(packId, documentData) {\n        if (!packId) {\n            throw Logger.error(`No packId is been passed`);\n        }\n        let compendiumToCheck = await CompendiumsHelpers.findSimilarDocumentInCompendiumAsync(packId, documentData);\n        if (!compendiumToCheck) {\n            compendiumToCheck = (await CompendiumsHelpers.addDocumentsToCompendium(packId, [documentData]))[0];\n        }\n        COMPENDIUM_CACHE[compendiumToCheck.uuid] = documentData;\n        return compendiumToCheck;\n    }\n\n    static findSimilarDocumentInCompendiumSync(packId, documentToFind) {\n        if (!packId) {\n            throw Logger.error(`No packId is been passed`);\n        }\n        let document =\n            Object.values(COMPENDIUM_CACHE).find((compendiumToCheck) => {\n                return compendiumToCheck.name === documentToFind.name && compendiumToCheck.type === documentToFind.type;\n            }) ?? false;\n        if (!document) {\n            document = CompendiumsHelpers.getDocumentCompendiumSync(packId, documentToFind.name, documentToFind.type);\n        }\n        return document;\n    }\n\n    // =================================\n    // ADDITIONAL METHODS\n    // =================================\n}\n","import Logger from \"./Logger\";\nimport { RetrieveHelpers } from \"./retrieve-helpers\";\n\nexport default class ItemPilesHelpers {\n    static FLAGS = {\n        VERSION: `flags.item-piles.version`,\n        PILE: `flags.item-piles.data`,\n        ITEM: `flags.item-piles.item`,\n        NO_VERSION: `flags.item-piles.-=version`,\n        NO_PILE: `flags.item-piles.-=data`,\n        NO_ITEM: `flags.item-piles.-=item`,\n        LOG: `flags.item-piles.log`,\n        SHARING: `flags.item-piles.sharing`,\n        PUBLIC_TRADE_ID: `flags.item-piles.publicTradeId`,\n        TRADE_USERS: `flags.item-piles.tradeUsers`,\n        TEMPORARY_ITEM: `flags.item-piles.temporary_item`,\n        CUSTOM_CATEGORY: `flags.item-piles.item.customCategory`,\n    };\n\n    // ===================\n    // CURRENCIES HELPERS\n    // ===================\n\n    /**\n     * Turns a string of currencies into an array containing the data and quantities for each currency\n     *\n     * @returns {{primary: boolean, name: string, data: Object, img: string, abbreviation: string, exchange: number}[]} An array of object containing the data name and abbreviation for each currency\n     */\n    static retrieveCurrenciesRegistered() {\n        const dic = [];\n        const currenciesPrimary = game.itempiles.API.CURRENCIES;\n        for (let c of currenciesPrimary) {\n            dic.push({\n                primary: currency.primary,\n                name: currency.name,\n                data: currency.data,\n                img: currency.img,\n                abbreviation: currency.abbreviation,\n                exchange: currency.exchange,\n            });\n        }\n        const currenciesSecondary = game.itempiles.API.SECONDARY_CURRENCIES;\n        for (let c of currenciesSecondary) {\n            dic.push({\n                primary: currency.primary,\n                name: currency.name,\n                data: currency.data,\n                img: currency.img,\n                abbreviation: currency.abbreviation.toLowerCase().replace(\"{#}\", \"\").trim(),\n                exchange: currency.exchange,\n            });\n        }\n        return dic;\n    }\n\n    // /**\n    //  *\n    //  * @param {Actor} actor\n    //  * @param {string} currencyAbbreviation\n    //  * @returns {number}\n    //  */\n    // static retrieveCurrency(actor, currencyAbbreviation) {\n    //     // TODO\n    //     return game.itempiles.API.getActorCurrencies(target, options);\n    // }\n\n    /**\n     * Turns a string of currencies into an array containing the data and quantities for each currency\n     *\n     * @param {string} currenciesS                               A string of currencies to convert (eg, \"5gp 25sp\")\n     *\n     * @returns {Array<Record<string,number>>}                                 An array of object containing the data and quantity for each currency\n     */\n    static retrieveCurrenciesSimpleFromString(currenciesS) {\n        const c = ItemPilesHelpers.generateCurrenciesStringFromString(currenciesS);\n        if (!c) {\n            return \"\";\n        }\n        const arr = game.itempiles.API.getCurrenciesFromString(c);\n        const currencies = {};\n        for (const cc of arr) {\n            const abbreviation = cc.abbreviation.toLowerCase().replace(\"{#}\", \"\").trim();\n            currencies[abbreviation] = (cc.roll ? cc.roll.total : cc.quantity) ?? 0;\n        }\n        return currencies;\n    }\n\n    /**\n     * Turns a string of currencies into an array containing the data and quantities for each currency\n     *\n     * @param {string|object} currencies                               A string of currencies to convert (eg, \"5gp 25sp\")\n     *\n     * @returns {string}                                 A string of currencies to convert (eg, \"5gp 25sp\")\n     */\n    static generateCurrenciesStringFromString(currenciesS) {\n        if (!currenciesS) {\n            return \"\";\n        }\n\n        if (typeof currenciesS === \"string\" || currenciesS instanceof String) {\n            let currenciesSTmp = currenciesS;\n            // Convert old brt format 100*1d6[gp],4d4+4[sp] to 100*1d6gp 4d4+4sp\n            currenciesSTmp = currenciesSTmp.replaceAll(\"[\", \"\");\n            currenciesSTmp = currenciesSTmp.replaceAll(\"]\", \"\");\n            currenciesSTmp = currenciesSTmp.replaceAll(\",\", \" \");\n            // Convert old harvester [[/r 5d6]]{Copper} and [[/r 1d6*100]]{Electrum}[[/r 2d6*10]]{Gold}\n            currenciesSTmp = currenciesSTmp.replaceAll(/{Copper}/gi, \"cp\");\n            currenciesSTmp = currenciesSTmp.replaceAll(/{Silver}/gi, \"sp\");\n            currenciesSTmp = currenciesSTmp.replaceAll(/{Electrum}/gi, \"ep\");\n            currenciesSTmp = currenciesSTmp.replaceAll(/{Gold}/gi, \"gp\");\n            currenciesSTmp = currenciesSTmp.replaceAll(/{Platinum}/gi, \"pp\");\n            currenciesSTmp = currenciesSTmp.replaceAll(\"/r\", \"\");\n            // Convert old brt loot currency formula {(2d8+1)*10[cp], 6d8+3 [sp]}\n            currenciesSTmp = currenciesSTmp.replaceAll(\"}\", \"\");\n            currenciesSTmp = currenciesSTmp.replaceAll(\"{\", \"\");\n            // Remove html code base\n            currenciesSTmp = currenciesSTmp.replaceAll(\"</p>\", \"\");\n            currenciesSTmp = currenciesSTmp.replaceAll(\"<p>\", \"\");\n            return currenciesSTmp.trim();\n        }\n        // Convert old brt currency data {gp: 3, cp: 2}\n        else if (\n            (typeof currenciesS === \"object\" || currenciesS instanceof Object) &&\n            Object.keys(currenciesS)?.length > 0\n        ) {\n            let currenciesSTmp = \"\";\n            for (const currencyKey of Object.keys(currenciesS)) {\n                currenciesSTmp = currenciesSTmp + \" \" + currenciesS[currencyKey] + currencyKey;\n            }\n            return currenciesSTmp.trim();\n        } else {\n            Logger.error(`Cannot parse this currencies`, currenciesS);\n            return \"\";\n        }\n    }\n\n    /**\n     *\n     * @param {Actor|Token|TokenDocument} actorOrToken The actor or token to update\n     * @param {Object[]|string} currencies - The array of currencies to pass to the actor\n     * @param {string} currencies[].cost - The currency cost can be a number or a roll formula.\n     * @param {string} currencies[].abbreviation - The currency abbreviation e.g. GP, SP.\n     */\n    static async addCurrencies(actorOrToken, currencies) {\n        Logger.debug(\"addCurrencies | Currencies:\", currencies);\n        if (typeof currencies === \"string\" || currencies instanceof String) {\n            if (!currencies) {\n                return;\n            }\n            await game.itempiles.API.addCurrencies(actorOrToken, currencies);\n        } else {\n            if (ItemPilesHelpers._isEmptyObject(currencies)) {\n                return;\n            }\n            // TODO waiting for item piles to fix this const currencyS = game.itempiles.API.getStringFromCurrencies(currencies);\n            const currenciesForItemPiles = [];\n            for (const currency of currencies) {\n                if (currency.cost && currency.abbreviation) {\n                    const currencyForItemPilesS = (Math.abs(Number(currency.cost)) + currency.abbreviation).trim();\n                    Logger.debug(\"addCurrencies | Currency for Item Piles:\", currencyForItemPilesS);\n                    currenciesForItemPiles.push(currencyForItemPilesS);\n                }\n            }\n            Logger.debug(\"addCurrencies | Currencies for Item Piles:\", currenciesForItemPiles);\n            const currenciesForItemPilesS = currenciesForItemPiles.join(\" \");\n            Logger.debug(\"addCurrencies | Currencies string for Item Piles:\" + currenciesForItemPilesS);\n            await game.itempiles.API.addCurrencies(actorOrToken, currenciesForItemPilesS);\n        }\n    }\n\n    /**\n     *\n     * @param {Actor|Token|TokenDocument} actorOrToken The actor or token to update\n     * @param {Object[]|string} currencies - The array of currencies to pass to the actor\n     * @param {string} currencies[].cost - The currency cost can be a number or a roll formula.\n     * @param {string} currencies[].abbreviation - The currency abbreviation e.g. GP, SP.\n     * @returns {void}\n     */\n    static async removeCurrencies(actorOrToken, currencies) {\n        Logger.debug(\"removeCurrencies | Currencies:\", currencies);\n        if (typeof currencies === \"string\" || currencies instanceof String) {\n            if (!currencies) {\n                return;\n            }\n            await game.itempiles.API.removeCurrencies(actorOrToken, currencies);\n        } else {\n            if (ItemPilesHelpers._isEmptyObject(currencies)) {\n                return;\n            }\n            // TODO waiting for item piles to fix this const currencyS = game.itempiles.API.getStringFromCurrencies(currencies);\n            const currenciesForItemPiles = [];\n            for (const currency of currencies) {\n                if (currency.cost && currency.abbreviation) {\n                    const currencyForItemPilesS = (Math.abs(Number(currency.cost)) + currency.abbreviation).trim();\n                    Logger.debug(\"removeCurrencies | Currency for Item Piles:\", currencyForItemPilesS);\n                    currenciesForItemPiles.push(currencyForItemPilesS);\n                }\n            }\n            Logger.debug(\"removeCurrencies | Currencies for Item Piles:\", currenciesForItemPiles);\n            const currenciesForItemPilesS = currenciesForItemPiles.join(\" \");\n            Logger.debug(\"removeCurrencies | Currencies string for Item Piles:\" + currenciesForItemPilesS);\n            await game.itempiles.API.removeCurrencies(actorOrToken, currenciesForItemPilesS);\n        }\n    }\n\n    /**\n     *\n     * @param {Actor|Token|TokenDocument} actorOrToken The actor or token to update\n     * @param {Object[]} currencies - The array of currencies to pass to the actor\n     * @param {string} currencies[].cost - The currency cost can be a number or a roll formula.\n     * @param {string} currencies[].abbreviation - The currency abbreviation e.g. GP, SP.\n     */\n    static async updateCurrencies(actorOrToken, currencies) {\n        Logger.debug(\"updateCurrencies | Currencies:\", currencies);\n        if (typeof currencies === \"string\" || currencies instanceof String) {\n            if (!currencies) {\n                return;\n            }\n            await game.itempiles.API.updateCurrencies(actorOrToken, currencies);\n        } else {\n            if (ItemPilesHelpers._isEmptyObject(currencies)) {\n                return;\n            }\n            // TODO waiting for item piles to fix this const currencyS = game.itempiles.API.getStringFromCurrencies(currencies);\n            const currenciesForItemPiles = [];\n            for (const currency of currencies) {\n                if (currency.cost && currency.abbreviation) {\n                    const currencyForItemPilesS = (Math.abs(Number(currency.cost)) + currency.abbreviation).trim();\n                    Logger.debug(\"updateCurrencies | Currency for Item Piles:\", currencyForItemPilesS);\n                    currenciesForItemPiles.push(currencyForItemPilesS);\n                }\n            }\n            Logger.debug(\"updateCurrencies | Currencies for Item Piles:\", currenciesForItemPiles);\n            const currenciesForItemPilesS = currenciesForItemPiles.join(\" \");\n            Logger.debug(\"updateCurrencies | Currencies string for Item Piles:\" + currenciesForItemPilesS);\n            await game.itempiles.API.updateCurrencies(actorOrToken, currenciesForItemPilesS);\n        }\n    }\n\n    /**\n     *\n     * @param {Actor|Token|TokenDocument} actorOrToken The actor or token to update\n     * @param {Object[]} currencies - The array of currencies to pass to the actor\n     * @param {string} currencies[].cost - The currency cost can be a number or a roll formula.\n     * @param {string} currencies[].abbreviation - The currency abbreviation e.g. GP, SP.\n     * @returns {boolean} The actor or token has enough money\n     */\n    static hasEnoughCurrencies(actorOrToken, currencies) {\n        Logger.debug(\"hasEnoughCurrencies | Currencies:\", currencies);\n        if (typeof currencies === \"string\" || currencies instanceof String) {\n            if (!currencies) {\n                return;\n            }\n            const currencyInfo = game.itempiles.API.getPaymentData(currencies, { target: actorOrToken });\n            return currencyInfo.canBuy;\n        } else {\n            if (ItemPilesHelpers._isEmptyObject(currencies)) {\n                return;\n            }\n            // TODO waiting for item piles to fix this const currencyS = game.itempiles.API.getStringFromCurrencies(currencies);\n            const currenciesForItemPiles = [];\n            for (const currency of currencies) {\n                if (currency.cost && currency.abbreviation) {\n                    const currencyForItemPilesS = (Math.abs(Number(currency.cost)) + currency.abbreviation).trim();\n                    Logger.debug(\"hasEnoughCurrencies | Currency for Item Piles:\", currencyForItemPilesS);\n                    currenciesForItemPiles.push(currencyForItemPilesS);\n                }\n            }\n            Logger.debug(\"hasEnoughCurrencies | Currencies for Item Piles:\", currenciesForItemPiles);\n            const currenciesForItemPilesS = currenciesForItemPiles.join(\" \");\n            Logger.debug(\"hasEnoughCurrencies | Currencies string for Item Piles:\" + currenciesForItemPilesS);\n            const currencyInfo = game.itempiles.API.getPaymentData(currenciesForItemPilesS, { target: actorOrToken });\n            return currencyInfo.canBuy;\n        }\n    }\n\n    // ===================\n    // LOOT HELPERS\n    // ===================\n\n    /**\n     * Adds item to an actor, increasing item quantities if matches were found\n     *\n     * @param {Actor/TokenDocument/Token} actorOrToken            The target to add an item to\n     * @param {Array} itemsToAdd                                  An array of objects, with the key \"item\" being an item object or an Item class (the foundry class), with an optional key of \"quantity\" being the amount of the item to add\n     * @param {object} options                                    Options to pass to the function\n     * @param {boolean} [options.removeExistingActorItems=false]  Whether to remove the actor's existing items before adding the new ones\n     * @param {boolean} [options.skipVaultLogging=false]          Whether to skip logging this action to the target actor if it is a vault\n     * @param {string/boolean} [options.interactionId=false]      The interaction ID of this action\n     *\n     * @returns {Promise<array>}                                  An array of objects, each containing the item that was added or updated, and the quantity that was added\n     */\n    static async addItems(\n        actorOrToken,\n        itemsToAdd,\n        options = {\n            removeExistingActorItems: false,\n            skipVaultLogging: false,\n            interactionId: false,\n            mergeSimilarItems: true,\n        },\n    ) {\n        const newOptions = foundry.utils.mergeObject(\n            {\n                removeExistingActorItems: false,\n                skipVaultLogging: false,\n                interactionId: false,\n                mergeSimilarItems: true,\n            },\n            options,\n        );\n\n        if (newOptions.removeExistingActorItems && actorOrToken instanceof Actor) {\n            Logger.error(\n                `Sorry i don't trust you i will not let you destroy some actor, you can use the 'removeExistingActorItems' options only with tokens`,\n            );\n            return [];\n        }\n\n        const itemsData = await game.itempiles.API.addItems(actorOrToken, itemsToAdd, {\n            mergeSimilarItems: newOptions.mergeSimilarItems, // NOT SUPPORTED ANYMORE FROM ITEM PILES TO REMOVE IN THE FUTURE\n            removeExistingActorItems: newOptions.removeExistingActorItems,\n            skipVaultLogging: newOptions.skipVaultLogging,\n            interactionId: newOptions.interactionId,\n        });\n        Logger.debug(`addItems | Added ${itemsToAdd.length} items to ${actorOrToken.name}`, itemsData);\n        return itemsData;\n    }\n\n    /**\n     * Rolls on a table of items and collates them to be able to be added to actors and such\n     * @href https://fantasycomputer.works/FoundryVTT-ItemPiles/#/sample-macros?id=populate-loot-via-table\n     * @param {string/Actor/Token}                                  The name, ID, UUID, or the actor itself, or an array of such\n     * @param {TableResult[]} tableResults                          The tables results\n     * @param {object} options                                      Options to pass to the function\n     * @param {string/number} [options.timesToRoll=\"1\"]             The number of times to roll on the tables, which can be a roll formula\n     * @param {boolean} [options.resetTable=true]                   Whether to reset the table before rolling it\n     * @param {boolean} [options.normalizeTable=true]               Whether to normalize the table before rolling it\n     * @param {boolean} [options.displayChat=false]                 Whether to display the rolls to the chat\n     * @param {object} [options.rollData={}]                        Data to inject into the roll formula\n     * @param {Actor/string/boolean} [options.targetActor=false]    The target actor to add the items to, or the UUID of an actor\n     * @param {boolean} [options.removeExistingActorItems=false]    Whether to clear the target actor's items before adding the ones rolled\n     * @param {boolean/string} [options.customCategory=false]       Whether to apply a custom category to the items rolled\n     *\n     * @returns {Promise<Array<Item>>}                              An array of object containing the item data and their quantity\n     */\n    static async populateActorOrTokenViaTableResults(targetActor, tableResults, options = {}) {\n        const newOptions = foundry.utils.mergeObject(\n            {\n                formula: \"\",\n                timesToRoll: \"1\",\n                resetTable: true,\n                normalizeTable: false,\n                displayChat: false,\n                rollData: {},\n                targetActor: false,\n                removeExistingActorItems: false,\n                customCategory: false,\n            },\n            options,\n        );\n\n        // TODO Why did wasp do this ??\n        // if (newOptions.resetTable && table.uuid.startsWith(\"Compendium\")) {\n        //   newOptions.resetTable = false;\n        // }\n        // const tableResultsStacked = ItemPilesHelpers.stackTableResults(tableResults);\n\n        const itemsToAdd = await ItemPilesHelpers._convertResultsToStackedItems(tableResults);\n        let items = [];\n        if (targetActor) {\n            items = await ItemPilesHelpers.addItems(targetActor, itemsToAdd, {\n                removeExistingActorItems: newOptions.removeExistingActorItems,\n            });\n        }\n\n        return items;\n    }\n\n    /**\n     * Rolls on a table of items and collates them to be able to be added to actors and such\n     * @href https://fantasycomputer.works/FoundryVTT-ItemPiles/#/sample-macros?id=populate-loot-via-table\n     * @param {string/Actor/Token}                                  The name, ID, UUID, or the actor itself, or an array of such\n     * @param {string/RollTable} tableReference                     The name, ID, UUID, or the table itself, or an array of such\n     * @param {object} options                                      Options to pass to the function\n     * @param {string/number} [options.timesToRoll=\"1\"]             The number of times to roll on the tables, which can be a roll formula\n     * @param {boolean} [options.resetTable=true]                   Whether to reset the table before rolling it\n     * @param {boolean} [options.normalizeTable=true]               Whether to normalize the table before rolling it\n     * @param {boolean} [options.displayChat=false]                 Whether to display the rolls to the chat\n     * @param {object} [options.rollData={}]                        Data to inject into the roll formula\n     * @param {Actor/string/boolean} [options.targetActor=false]    The target actor to add the items to, or the UUID of an actor\n     * @param {boolean} [options.removeExistingActorItems=false]    Whether to clear the target actor's items before adding the ones rolled\n     * @param {boolean/string} [options.customCategory=false]       Whether to apply a custom category to the items rolled\n     *\n     * @returns {Promise<Array<Item>>}                              An array of object containing the item data and their quantity\n     */\n    static async rollItemTable(targetActor, tableReference, options = {}) {\n        return await ItemPilesHelpers.populateActorOrTokenViaTable(targetActor, tableReference, options);\n    }\n\n    /**\n     * Rolls on a table of items and collates them to be able to be added to actors and such\n     * @href https://fantasycomputer.works/FoundryVTT-ItemPiles/#/sample-macros?id=populate-loot-via-table\n     * @param {string/Actor/Token}                                  The name, ID, UUID, or the actor itself, or an array of such\n     * @param {string/RollTable} tableReference                     The name, ID, UUID, or the table itself, or an array of such\n     * @param {object} options                                      Options to pass to the function\n     * @param {string/number} [options.timesToRoll=\"1\"]             The number of times to roll on the tables, which can be a roll formula\n     * @param {boolean} [options.resetTable=true]                   Whether to reset the table before rolling it\n     * @param {boolean} [options.normalizeTable=true]               Whether to normalize the table before rolling it\n     * @param {boolean} [options.displayChat=false]                 Whether to display the rolls to the chat\n     * @param {object} [options.rollData={}]                        Data to inject into the roll formula\n     * @param {Actor/string/boolean} [options.targetActor=false]    The target actor to add the items to, or the UUID of an actor\n     * @param {boolean} [options.removeExistingActorItems=false]    Whether to clear the target actor's items before adding the ones rolled\n     * @param {boolean/string} [options.customCategory=false]       Whether to apply a custom category to the items rolled\n     *\n     * @returns {Promise<Array<Item>>}                              An array of object containing the item data and their quantity\n     */\n    static async populateActorOrTokenViaTable(targetActor, tableReference, options = {}) {\n        const table = await RetrieveHelpers.getRollTableAsync(tableReference);\n        const newOptions = foundry.utils.mergeObject(\n            {\n                timesToRoll: \"1\",\n                resetTable: true,\n                normalizeTable: false,\n                displayChat: false,\n                rollData: {},\n                targetActor: false,\n                removeExistingActorItems: false,\n                customCategory: false,\n            },\n            options,\n        );\n\n        if (!(typeof newOptions.timesToRoll === \"string\" || typeof newOptions.timesToRoll === \"number\")) {\n            throw Logger.error(`populateActorOrTokenViaTable | timesToRoll must be of type string or number`);\n        }\n\n        if (typeof newOptions.rollData !== \"object\") {\n            throw Logger.error(`populateActorOrTokenViaTable | rollData must be of type object`);\n        }\n\n        if (typeof newOptions.removeExistingActorItems !== \"boolean\") {\n            throw Logger.error(`populateActorOrTokenViaTable | removeExistingActorItems of type boolean`);\n        }\n\n        // TODO Why did wasp do this ??\n        if (newOptions.resetTable && table.uuid.startsWith(\"Compendium\")) {\n            newOptions.resetTable = false;\n        }\n\n        // START MOD 4535992\n        /*\n    let items = await ItemPilesHelpers.rollTable({\n      tableUuid: table,\n      formula: timesToRoll,\n      normalizeTable: normalizeTable,\n      resetTable: resetTable,\n      displayChat,\n      rollData,\n      customCategory,\n    });\n    if (targetActor) {\n        const itemsToAdd = items.map((item) => {\n            const actualItem = item.item.toObject();\n            return Utilities.setItemQuantity(actualItem, item.quantity);\n        });\n        items = await this._addItems(targetActor, itemsToAdd, userId, { removeExistingActorItems });\n    }\n    */\n        let itemsToAdd = await ItemPilesHelpers.rollTable(table, newOptions);\n        let items = [];\n        // END MOD 4535992\n\n        if (targetActor) {\n            items = await ItemPilesHelpers.addItems(targetActor, itemsToAdd, {\n                removeExistingActorItems: newOptions.removeExistingActorItems,\n            });\n        }\n\n        return items;\n    }\n\n    /**\n     * @returns {Promise<ItemData[]>} Item Data Array.  An array of objects, each containing the item that was added or updated, and the quantity that was added\n     */\n    static async retrieveItemsDataFromRollTable(table, options) {\n        return await ItemPilesHelpers.rollTable(table, options);\n    }\n\n    /**\n     * @href https://github.com/fantasycalendar/FoundryVTT-ItemPiles/blob/master/src/helpers/pile-utilities.js#L1885\n     * @param {RollTable|string} tableReference\n     * @param {Object} options\n     * @returns {Promise<ItemData[]>} Item Data Array\n     */\n    static async rollTable(tableReference, options) {\n        const table = await RetrieveHelpers.getRollTableAsync(tableReference);\n\n        const formula = table.formula;\n        const resetTable = !!options.resetTable; // true;\n        const normalizeTable = !!options.normalizeTable; // false;\n        const displayChat = options.displayChat;\n        const rollData = options.roll;\n        const customCategory = !!options.customCategory; // false\n        const recursive = !!options.recursive; // true\n\n        if (!options.formula) {\n            options.formula = table.formula;\n        }\n\n        //const table = await fromUuid(tableUuid);\n\n        if (!table.uuid.startsWith(\"Compendium\")) {\n            if (resetTable) {\n                await table.reset();\n            }\n\n            if (normalizeTable) {\n                await table.update({\n                    results: table.results.map((result) => ({\n                        _id: result.id,\n                        weight: result.range[1] - (result.range[0] - 1),\n                    })),\n                });\n                await table.normalize();\n            }\n        }\n\n        // START MOD 4535992\n        /*\n        const roll = new Roll(formula.toString(), rollData).evaluate({ async: false });\n        if (roll.total <= 0) {\n        return [];\n        }\n        let results = [];\n        if (game.modules.get(\"better-rolltables\")?.active) {\n            results = (await game.modules.get(\"better-rolltables\").api.roll(table)).itemsData.map(result => ({\n                documentCollection: result.documentCollection,\n                documentId: result.documentId,\n                text: result.text || result.name,\n                img: result.img,\n                quantity: 1\n            }));\n        } else {\n            results = (await table.drawMany(roll.total, { displayChat, recursive: true })).results;\n        }\n        */\n        options.displayChat = false;\n        const results = await game.modules.get(\"better-rolltables\").api.betterTableRoll(table, options);\n        // END MOD 4535992\n\n        // const rolledItems = [];\n        // for (const rollData of results) {\n        //   let rolledQuantity = rollData?.quantity ?? 1;\n        //   let item;\n        //   if (rollData.documentCollection === \"Item\") {\n        //     item = game.items.get(rollData.documentId);\n        //   } else {\n        //     const compendium = game.packs.get(rollData.documentCollection);\n        //     if (compendium) {\n        //       item = await compendium.getDocument(rollData.documentId);\n        //     }\n        //   }\n        //   if (item instanceof RollTable) {\n        //     Logger.error(\n        //       `'item instanceof RollTable', It shouldn't never go here something go wrong with the code please contact the brt developer`\n        //     );\n        //     rolledItems.push(\n        //       ...(await ItemPilesHelpers.rollTable({ tableUuid: item.uuid, resetTable, normalizeTable, displayChat }))\n        //     );\n        //   } else if (item instanceof Item) {\n        //     const quantity = Math.max(ItemPilesHelpers.getItemQuantity(item) * rolledQuantity, 1);\n        //     rolledItems.push({\n        //       ...rollData,\n        //       item,\n        //       quantity,\n        //     });\n        //   }\n        // }\n\n        // const items = [];\n        // rolledItems.forEach((newItem) => {\n        //   // MOD 4535992\n        //   const existingItem = ItemPilesHelpers.findSimilarItem(items, newItem);\n        //   //  const existingItem = items.find((item) => item.documentId === newItem.documentId);\n        //   if (existingItem) {\n        //     existingItem.quantity += Math.max(newItem.quantity, 1);\n        //   } else {\n        //     setProperty(newItem, ItemPilesHelpers.FLAGS.ITEM, getProperty(newItem.item, ItemPilesHelpers.FLAGS.ITEM));\n        //     if (\n        //       game.itempiles.API.QUANTITY_FOR_PRICE_ATTRIBUTE &&\n        //       !getProperty(newItem, game.itempiles.API.QUANTITY_FOR_PRICE_ATTRIBUTE)\n        //     ) {\n        //       setProperty(\n        //         newItem,\n        //         game.itempiles.API.QUANTITY_FOR_PRICE_ATTRIBUTE,\n        //         ItemPilesHelpers.getItemQuantity(newItem.item)\n        //       );\n        //     }\n        //     if (customCategory) {\n        //       setProperty(newItem, ItemPilesHelpers.FLAGS.CUSTOM_CATEGORY, customCategory);\n        //     }\n        //     items.push({\n        //       ...newItem,\n        //     });\n        //   }\n        // });\n\n        // const itemsRetrieved = items.map((item) => {\n        //   const itemData = item.item instanceof Item ? item.item.toObject() : item.item;\n        //   const actualItem = itemData; // item.item.toObject();\n        //   return ItemPilesHelpers.setItemQuantity(actualItem, item.quantity);\n        // });\n\n        // return itemsRetrieved;\n        const itemsRetrieved = await ItemPilesHelpers._convertResultsToStackedItems(results, options);\n        return itemsRetrieved;\n    }\n\n    static async _convertResultsToStackedItems(results, options = {}) {\n        // const formula = options.formula;\n        const resetTable = !!options.resetTable; // true;\n        const normalizeTable = !!options.normalizeTable; // false;\n        const displayChat = options.displayChat;\n        const rollData = options.roll;\n        const customCategory = !!options.customCategory; // false\n        const recursive = !!options.recursive; // true\n\n        const rolledItems = [];\n        for (const rollData of results) {\n            // START MOD 4535992\n            /*\n            let rolledQuantity = rollData?.quantity ?? 1;\n            let item;\n            if (rollData.documentCollection === \"Item\") {\n            item = game.items.get(rollData.documentId);\n            } else {\n            const compendium = game.packs.get(rollData.documentCollection);\n            if (compendium) {\n                item = await compendium.getDocument(rollData.documentId);\n            }\n            }\n            if (item instanceof RollTable) {\n            Logger.error(\n                `'item instanceof RollTable', It shouldn't never go here something go wrong with the code please contact the brt developer`\n            );\n            rolledItems.push(\n                ...(await ItemPilesHelpers.rollTable({ tableUuid: item.uuid, resetTable, normalizeTable, displayChat }))\n            );\n            } else if (item instanceof Item) {\n            const quantity = Math.max(ItemPilesHelpers.getItemQuantity(item) * rolledQuantity, 1);\n            rolledItems.push({\n                ...rollData,\n                item,\n                quantity,\n            });\n            }\n            */\n            // TODO find a better way for do this, BRT already manage the one quantity behaviour\n            // let rolledQuantity = rollData?.quantity ?? 1;\n            let rolledQuantity = 1;\n            const itemTmp = await game.modules.get(\"better-rolltables\").api.resultToItemData(rollData);\n            if (!itemTmp) {\n                Logger.debug(\n                    `The result '${rollData.name + \"|\" + rollData.documentId}' is not a valid link anymore`,\n                    true,\n                );\n                continue;\n            }\n            if (itemTmp instanceof RollTable) {\n                Logger.error(\n                    `'itemTmp instanceof RollTable', It shouldn't never go here something go wrong with the code please contact the brt developer`,\n                );\n                rolledItems.push(\n                    ...(await ItemPilesHelpers.rollTable({\n                        tableUuid: itemTmp.uuid,\n                        resetTable: resetTable,\n                        normalizeTable: normalizeTable,\n                        displayChat: displayChat,\n                    })),\n                );\n            } else {\n                const quantity = Math.max(ItemPilesHelpers.getItemQuantity(itemTmp) * rolledQuantity, 1);\n                rolledItems.push({\n                    ...rollData,\n                    item: itemTmp,\n                    quantity: quantity,\n                });\n            }\n            // END MOD 4535992\n        }\n\n        const items = [];\n        rolledItems.forEach((newItem) => {\n            // MOD 4535992\n            const existingItem = ItemPilesHelpers.findSimilarItem(items, newItem);\n            //  const existingItem = items.find((item) => item.documentId === newItem.documentId);\n            if (existingItem) {\n                existingItem.quantity += Math.max(newItem.quantity, 1);\n            } else {\n                setProperty(\n                    newItem,\n                    ItemPilesHelpers.FLAGS.ITEM,\n                    getProperty(newItem.item, ItemPilesHelpers.FLAGS.ITEM),\n                );\n                if (\n                    game.itempiles.API.QUANTITY_FOR_PRICE_ATTRIBUTE &&\n                    !getProperty(newItem, game.itempiles.API.QUANTITY_FOR_PRICE_ATTRIBUTE)\n                ) {\n                    setProperty(\n                        newItem,\n                        game.itempiles.API.QUANTITY_FOR_PRICE_ATTRIBUTE,\n                        ItemPilesHelpers.getItemQuantity(newItem.item),\n                    );\n                }\n                if (customCategory) {\n                    setProperty(newItem, ItemPilesHelpers.FLAGS.CUSTOM_CATEGORY, customCategory);\n                }\n                items.push({\n                    ...newItem,\n                });\n            }\n        });\n\n        const itemsRetrieved = items.map((item) => {\n            const itemData = item.item instanceof Item ? item.item.toObject() : item.item;\n            const actualItem = itemData; // item.item.toObject();\n            return ItemPilesHelpers.setItemQuantity(actualItem, item.quantity);\n        });\n\n        return itemsRetrieved;\n    }\n\n    /**\n     * Returns a given item's quantity\n     *\n     * @param {Item/Object} item\n     * @returns {number}\n     */\n    static getItemQuantity(item) {\n        const itemData = item instanceof Item ? item.toObject() : item;\n        return Number(getProperty(itemData, game.itempiles.API.ITEM_QUANTITY_ATTRIBUTE) ?? 0);\n    }\n\n    /**\n     * Returns whether an item has the quantity property\n     *\n     * @param {Item/Object} item\n     * @returns {Boolean}\n     */\n    static hasItemQuantity(item) {\n        const itemData = item instanceof Item ? item.toObject() : item;\n        return hasProperty(itemData, game.itempiles.API.ITEM_QUANTITY_ATTRIBUTE);\n    }\n\n    /**\n     * Returns a given item's quantity\n     *\n     * @param {Object} itemData\n     * @param {Number} quantity\n     * @param {Boolean} requiresExistingQuantity\n     * @returns {Object}\n     */\n    static setItemQuantity(item, quantity, requiresExistingQuantity = false) {\n        const itemData = item instanceof Item ? item.toObject() : item;\n        // if (!requiresExistingQuantity || ItemPilesHelpers.getItemTypesThatCanStack().has(itemData.type) || ItemPilesHelpers.hasItemQuantity(itemData)) {\n        if (!requiresExistingQuantity || ItemPilesHelpers.hasItemQuantity(itemData)) {\n            setProperty(itemData, game.itempiles.API.ITEM_QUANTITY_ATTRIBUTE, quantity);\n        }\n        return itemData;\n    }\n\n    /**\n     * Returns a given item's cost/price\n     *\n     * @param {Item/Object} item\n     * @returns {number}\n     */\n    static getItemCost(item) {\n        const itemData = item instanceof Item ? item.toObject() : item;\n        return getProperty(itemData, game.itempiles.API.ITEM_PRICE_ATTRIBUTE) ?? 0;\n    }\n\n    /**\n     * Returns whether an item has the cost/price property\n     *\n     * @param {Item/Object} item\n     * @returns {Boolean}\n     */\n    static hasItemCost(item) {\n        const itemData = item instanceof Item ? item.toObject() : item;\n        return hasProperty(itemData, game.itempiles.API.ITEM_PRICE_ATTRIBUTE);\n    }\n\n    /**\n     * Returns a given item's cost/price\n     *\n     * @param {Object} itemData\n     * @param {Number} cost\n     * @param {Boolean} requiresExistingCost\n     * @returns {Object}\n     */\n    static setItemCost(item, cost, requiresExistingCost = false) {\n        const itemData = item instanceof Item ? item.toObject() : item;\n        if (!requiresExistingCost || ItemPilesHelpers.hasItemCost(itemData)) {\n            setProperty(itemData, game.itempiles.API.ITEM_PRICE_ATTRIBUTE, cost);\n        }\n        return itemData;\n    }\n\n    /**\n     * Find and retrieves an item in a list of items\n     *\n     * @param {Array<Item|Object>} items\n     * @param {Item|Object} findItem\n     * @param {object} options\n     * @param {boolean} returnOne\n     * @returns {*}\n     */\n    static findSimilarItem(itemsToSearch, itemToFind, { returnOne = true } = {}) {\n        return game.itempiles.API.findSimilarItem(itemsToSearch, itemToFind, {\n            returnOne: returnOne,\n        });\n    }\n\n    // ==============================\n    // ADDITIONAL HELPER\n    // =============================\n\n    static stackTableResults(rolledResult) {\n        const resultsStacked = [];\n        rolledResult.forEach((newResult) => {\n            let isResultHidden = getProperty(newResult, `flags.better-rolltables.brt-hidden-table`) || false;\n            // MOD 4535992\n            //const existingItem = resultsStacked.find((item) => ItemPilesHelpers.findSimilarItem(item, newResult));\n            const existingItem = resultsStacked.find((r) => {\n                // Merge by hidden property\n                let isResultHidden2 = getProperty(r, `flags.better-rolltables.brt-hidden-table`) || false;\n                // MOD 4535992\n                if (r.documentId && newResult.documentId) {\n                    return r.documentId === newResult.documentId && isResultHidden === isResultHidden2;\n                } else {\n                    return r._id === newResult._id && isResultHidden === isResultHidden2;\n                }\n            });\n            if (!ItemPilesHelpers._isRealNumber(newResult.quantity)) {\n                newResult.quantity = 1;\n            }\n            if (existingItem) {\n                existingItem.quantity += Math.max(newResult.quantity, 1);\n            } else {\n                resultsStacked.push({\n                    ...newResult,\n                });\n            }\n        });\n\n        return resultsStacked;\n    }\n\n    /**\n     * Converts the provided token to a item piles lootable sheet check out the documentation from the itempiles page\n     * @href https://fantasycomputer.works/FoundryVTT-ItemPiles/#/api?id=turntokensintoitempiles\n     * @href https://github.com/trioderegion/fvtt-macros/blob/master/honeybadger-macros/tokens/single-loot-pile.js#L77\n     * @param {Array<Token|TokenDocument} tokensTarget\n     * @param {object} options\tobject\tOptions to pass to the function\n     * @param {boolean} [options.untouchedImage=\"\"] little utility for lazy people apply a default image\n     * @param {boolean} [options.applyDefaultLight=false] little utility for lazy people apply a default light\n     * @param {boolean} [options.addCurrency=false] Add some random currency\n     * @param {boolean} [options.isSinglePile=false] little utility it need 'warpgate' module installed and active for merge all the token items in one big item piles\n     * @param {boolean} [options.deleteTokens=false] only if singlePile is true it will delete all tokens\n     * @param {boolean} [options.warpgatePermanent=false] Set the warpgate mutate setting to permanent\n     * @param {object} tokenSettings Overriding settings that will update the tokens settings\n     * @param {object} pileSettings Overriding settings to be put on the item piles’ settings - see pile flag defaults\n     * @returns {Promise<string[]>} The uuids of the targets after they were turned into item piles\n     */\n    static async convertTokensToItemPiles(\n        tokensTarget,\n        options = {\n            applyDefaultLight: false,\n            untouchedImage: \"\",\n            isSinglePile: false,\n            deleteTokens: false,\n            addCurrency: false,\n            warpgatePermanent: false,\n        },\n        tokenSettings = { rotation: 0 },\n        pileSettings = {\n            openedImage: \"\",\n            emptyImage: \"\",\n            type: game.itempiles.pile_types.CONTAINER,\n            deleteWhenEmpty: false,\n            activePlayers: true,\n            closed: true,\n        },\n    ) {\n        options = foundry.utils.mergeObject(\n            {\n                applyDefaultLight: false,\n                untouchedImage: \"\",\n                isSinglePile: false,\n                deleteTokens: false,\n                addCurrency: false,\n                warpgatePermanent: false,\n            },\n            options,\n        );\n\n        tokenSettings = foundry.utils.mergeObject({ rotation: 0 }, tokenSettings);\n\n        pileSettings = foundry.utils.mergeObject(\n            {\n                openedImage: \"\",\n                emptyImage: \"\",\n                type: game.itempiles.pile_types.CONTAINER,\n                deleteWhenEmpty: false,\n                activePlayers: true,\n                closed: true,\n            },\n            pileSettings,\n        );\n\n        const tokens = Array.isArray(tokensTarget) ? tokensTarget : [tokensTarget];\n        const token = tokens[0];\n        const { applyDefaultLight, untouchedImage, addCurrency, isSinglePile, deleteTokens, warpgatePermanent } =\n            options;\n\n        if (applyDefaultLight) {\n            let light = {\n                dim: 0.2,\n                bright: 0.2,\n                luminosity: 0,\n                alpha: 1,\n                color: \"#ad8800\",\n                coloration: 6,\n                animation: {\n                    // type:\"sunburst\",\n                    type: \"radialrainbow\",\n                    speed: 3,\n                    intensity: 10,\n                },\n            };\n            foundry.utils.mergeObject(tokenSettings, { light: light });\n        }\n\n        if (game.modules.get(\"warpgate\")?.active && isSinglePile) {\n            let activeEffectUpdates = token.actor.effects.reduce((acc, curr) => {\n                acc[curr.data.label] = warpgate.CONST.DELETE;\n                return acc;\n            }, {});\n\n            let updates = {\n                token: {\n                    \"texture.src\": untouchedImage ? untouchedImage : token.img,\n                    name: `Pile of ${token.name}`,\n                },\n                actor: {\n                    // system: { currency: token.actor?.system?.currency ?? { gp: 0, sp: 0, cp: 0 } },\n                    name: `Pile of ${token.name}`,\n                },\n                embedded: {\n                    ActiveEffect: activeEffectUpdates ? activeEffectUpdates : null,\n                    Item: {},\n                },\n            };\n\n            //map the update data\n            const singlePile = tokens.reduce((acc, tok) => {\n                if (tok.id === token.id) {\n                    return acc;\n                }\n                // get their items\n                const items = tok.actor.items.reduce((acc, item) => {\n                    if (ItemPilesHelpers._shouldBeLoot(item)) {\n                        const itemData = item instanceof Item ? item.toObject() : item;\n                        acc[randomID()] = itemData;\n                    }\n                    return acc;\n                }, {});\n\n                foundry.utils.mergeObject(acc.embedded.Item, items);\n\n                if (addCurrency) {\n                    // TODO BETTER MAYBE WITH BRT ??\n                    /*\n                    // Adjust as needed -- this very loosely approximates individual treasure by CR\n                    const exponent = 0.15 * (getProperty(tok.actor, \"system.details.cr\") ?? 0);\n                    let gold = Math.round(0.6 * 10 * (10 ** exponent));\n\n                    // ensure it can devide evenly across all looting players (convienence)\n                    gold = gold + (numPlayers) - (gold % Math.max(numPlayers, 1)) ?? 0;\n\n                    // split a random percentage to silver (no more than half)\n                    const silverPct = Math.random()/2;\n                    const convertedGold = Math.floor(gold * silverPct);\n                    let silver = convertedGold * 10;\n                    gold -= convertedGold\n\n                    // split a random percentage to copper (no more than half silver)\n                    const cprPct = Math.random()/2;\n                    const convertedSilver = Math.floor(silver * cprPct);\n                    let copper = convertedSilver * 10;\n                    silver -= convertedSilver\n\n                    // Add onto any currency the actor may already have\n                    gold += acc.actor.system.currency.gp + getProperty(tok.actor, 'system.currency.gp') ?? 0\n                    silver += acc.actor.system.currency.sp + getProperty(tok.actor, 'system.currency.sp') ?? 0\n                    copper += acc.actor.system.currency.cp + getProperty(tok.actor, 'system.currency.cp') ?? 0\n\n                    acc.actor.system.currency = {gp: gold, sp: silver, cp: copper};\n                    */\n                }\n\n                return acc;\n            }, updates);\n\n            if (deleteTokens) {\n                const toDelete = tokens.filter((t) => t.id !== token.id).map((t) => t.id);\n                await canvas.scene.deleteEmbeddedDocuments(\"Token\", toDelete);\n            }\n\n            await warpgate.mutate(\n                token.document,\n                singlePile,\n                {},\n                { permanent: warpgatePermanent, comparisonKeys: { ActiveEffect: \"label\", Item: \"id\" } },\n            );\n\n            const newTargets = await game.itempiles.API.turnTokensIntoItemPiles([token], {\n                pileSettings: pileSettings,\n                tokenSettings: tokenSettings,\n            });\n            return newTargets;\n        } else if (isSinglePile) {\n            Logger.warn(`You select the \"single pile\" feature but the module 'warpgate' is not installed`, true);\n            return [];\n        } else {\n            const newTargets = await game.itempiles.API.turnTokensIntoItemPiles(tokens, {\n                pileSettings: pileSettings,\n                tokenSettings: tokenSettings,\n            });\n            return newTargets;\n        }\n    }\n\n    /**\n     * Converts the provided token to a item piles lootable sheet check out the documentation from the itempiles page\n     * @href https://fantasycomputer.works/FoundryVTT-ItemPiles/#/api?id=turntokensintoitempiles\n     * @href https://github.com/trioderegion/fvtt-macros/blob/master/honeybadger-macros/tokens/single-loot-pile.js#L77\n     * @param {Token|TokenDocument} tokenTarget\n     * @param {object} options\tobject\tOptions to pass to the function\n     * @param {boolean} [options.untouchedImage=\"\"] little utility for lazy people apply a default image\n     * @param {boolean} [options.applyDefaultLight=false] little utility for lazy people apply a default light\n     * @param {boolean} [options.addCurrency=false] Add some random currency\n     * @param {object} tokenSettings Overriding settings that will update the tokens settings\n     * @param {object} pileSettings Overriding settings to be put on the item piles’ settings - see pile flag defaults\n     * @returns {Promise<string[]>} The uuids of the targets after they were turned into item piles\n     */\n    static async convertTokenToItemPilesContainer(\n        tokenTarget,\n        options = {\n            applyDefaultLight: false,\n            untouchedImage: \"\",\n            addCurrency: false,\n        },\n        tokenSettings = { rotation: 0 },\n        pileSettings = {\n            openedImage: \"\",\n            emptyImage: \"\",\n            type: game.itempiles.pile_types.CONTAINER,\n            deleteWhenEmpty: false,\n            activePlayers: true,\n            closed: true,\n        },\n    ) {\n        // if (ItemPilesHelpers.isValidItemPile(tokenTarget)) {\n        //     Logger.warn(`The targeted token is already a item piles`, false, tokenTarget);\n        //     return [tokenTarget];\n        // }\n\n        options = foundry.utils.mergeObject(\n            {\n                applyDefaultLight: false,\n                untouchedImage: \"\",\n                addCurrency: false,\n            },\n            options,\n        );\n\n        tokenSettings = foundry.utils.mergeObject({ rotation: 0 }, tokenSettings);\n\n        pileSettings = foundry.utils.mergeObject(\n            {\n                openedImage: \"\",\n                emptyImage: \"\",\n                type: game.itempiles.pile_types.CONTAINER,\n                deleteWhenEmpty: false,\n                activePlayers: true,\n                closed: true,\n            },\n            pileSettings,\n        );\n\n        const tokens = [tokenTarget];\n        const { applyDefaultLight, untouchedImage, addCurrency } = options;\n\n        if (applyDefaultLight) {\n            let light = {\n                dim: 0.2,\n                bright: 0.2,\n                luminosity: 0,\n                alpha: 1,\n                color: \"#ad8800\",\n                coloration: 6,\n                animation: {\n                    // type:\"sunburst\",\n                    type: \"radialrainbow\",\n                    speed: 3,\n                    intensity: 10,\n                },\n            };\n            foundry.utils.mergeObject(tokenSettings, { light: light });\n        }\n\n        // await warpgate.mutate(\n        //     tokenTarget,\n        //     {},\n        //     {},\n        //     { permanent: warpgatePermanent },\n        // ); // TODO NOT WORK...\n\n        const newTargets = await game.itempiles.API.turnTokensIntoItemPiles(tokens, {\n            pileSettings: pileSettings,\n            tokenSettings: tokenSettings,\n        });\n        return newTargets;\n    }\n\n    /**\n     * Whether an item pile is locked. If it is not enabled or not a container, it is always false.\n     *\n     * @param {Token/TokenDocument} target\n     * @param {Object/boolean} [data=false] data existing flags data to use\n     * @return {boolean}\n     */\n    static isItemPileLocked(target, data = false) {\n        return game.itempiles.API.isItemPileLocked(target, data);\n    }\n\n    /**\n     * Whether an item pile is closed. If it is not enabled or not a container, it is always false.\n     *\n     * @param {Token/TokenDocument} target\n     * @param {Object/boolean} [data=false] data existing flags data to use\n     * @return {boolean}\n     */\n    static isItemPileClosed(target, data = false) {\n        return game.itempiles.API.isItemPileClosed(target, data);\n    }\n\n    /**\n     * Whether an item pile is a valid item pile. If it is not enabled, it is always false.\n     *\n     * @param {Token/TokenDocument} target\n     * @param {Object/boolean} [data=false] data existing flags data to use\n     * @return {boolean}\n     */\n    static isValidItemPile(target, data = false) {\n        return game.itempiles.API.isValidItemPile(target, data);\n    }\n\n    /**\n     * Whether an item pile is a regular item pile. If it is not enabled, it is always false.\n     *\n     * @param {Token/TokenDocument} target\n     * @param {Object/boolean} [data=false] data existing flags data to use\n     * @return {boolean}\n     */\n    static isRegularItemPile(target, data = false) {\n        return game.itempiles.API.isRegularItemPile(target, data);\n    }\n\n    /**\n     * Whether an item pile is a container. If it is not enabled, it is always false.\n     *\n     * @param {Token/TokenDocument} target\n     * @param {Object/boolean} [data=false] data existing flags data to use\n     * @return {boolean}\n     */\n    static isItemPileContainer(target, data = false) {\n        return game.itempiles.API.isItemPileContainer(target, data);\n    }\n\n    /**\n     * Whether an item pile is a lootable. If it is not enabled, it is always false.\n     *\n     * @param {Token/TokenDocument} target\n     * @param {Object/boolean} [data=false] data existing flags data to use\n     * @return {boolean}\n     */\n    static isItemPileLootable(target, data = false) {\n        return game.itempiles.API.isItemPileLootable(target, data);\n    }\n\n    /**\n     * Whether an item pile is a vault. If it is not enabled, it is always false.\n     *\n     * @param {Token/TokenDocument} target\n     * @param {Object/boolean} [data=false] data existing flags data to use\n     * @return {boolean}\n     */\n    static isItemPileVault(target, data = false) {\n        return game.itempiles.API.isItemPileVault(target, data);\n    }\n\n    /**\n     * Whether an item pile is a merchant. If it is not enabled, it is always false.\n     *\n     * @param {Token/TokenDocument} target\n     * @param {Object/boolean} [data=false] data existing flags data to use\n     * @return {boolean}\n     */\n    static isItemPileMerchant(target, data = false) {\n        return game.itempiles.API.isItemPileMerchant(target, data);\n    }\n\n    /**\n     * Whether an item pile is a merchant. If it is not enabled, it is always false.\n     *\n     * @param {Token/TokenDocument} target\n     * @param {Object/boolean} [data=false] data existing flags data to use\n     * @return {boolean}\n     */\n    static isItemPileAuctioneer(target, data = false) {\n        return game.itempiles.API.isItemPileAuctioneer(target, data);\n    }\n\n    /**\n     * Whether an item pile is empty pile. If it is not enabled, it is always false.\n     *\n     * @param {Token/TokenDocument} target\n     * @return {boolean}\n     */\n    static isItemPileEmpty(target) {\n        return game.itempiles.API.isItemPileEmpty(target);\n    }\n    /**\n     * Whether an item pile is stackable. If it is not enabled, it is always false.\n     *\n     * @param {Item} target\n     * @return {boolean}\n     */\n    static isItemStackable(target) {\n        return game.itempiles.API.canItemStack(target);\n    }\n\n    /**\n     * Unlink the token\n     * @param {Token/TokenDocument/string} token\n     */\n    static async unlinkToken(token) {\n        const tokenTarget = RetrieveHelpers.getTokenSync(token);\n        if (tokenTarget instanceof Token) {\n            await tokenTarget.document.update({ actorLink: false });\n        } else if (tokenTarget instanceof TokenDocument) {\n            await tokenTarget.update({ actorLink: false });\n        } else {\n            Logger.log(`Cannot unlink this token ?`, tokenTarget);\n        }\n    }\n\n    /**\n     * Unlink actor\n     * @param {Token/TokenDocument/string} token\n     */\n    static async unlinkActor(actor) {\n        const actorTarget = await RetrieveHelpers.getActorAsync(actor);\n        const isNowLinked = actorTarget.prototypeToken.actorLink;\n        if (isNowLinked) {\n            actorTarget.update({ \"token.actorLink\": false });\n        } else {\n            Logger.log(`Cannot unlink this actor ?`, actorTarget);\n        }\n    }\n\n    /**\n     * Link actor\n     * @param {Token/TokenDocument/string} token\n     */\n    static async linkActor(actor) {\n        const actorTarget = await RetrieveHelpers.getActorAsync(actor);\n        const isNowLinked = actorTarget.prototypeToken.actorLink;\n        if (!isNowLinked) {\n            actorTarget.update({ \"token.actorLink\": true });\n        } else {\n            Logger.log(`Cannot link this actor ?`, actorTarget);\n        }\n    }\n\n    // ======================================\n    // PRIVATE METHODS\n    // ========================================\n\n    /**\n     * It is recommended to add the following filter to Item Pile's default filter: system.weaponType | natural. Which will filter out the natural weapons found on many creatures. Alternatively, define the `shouldBeLoot` filter function\n     * @param {Item5e} item\n     * @returns {boolean}\n     */\n    static _shouldBeLoot(item) {\n        // TODO\n        return game.itempiles.API.canItemStack(item);\n    }\n\n    static _isEmptyObject(obj) {\n        // because Object.keys(new Date()).length === 0;\n        // we have to do some additional check\n        if (obj === null || obj === undefined) {\n            return true;\n        }\n        if (ItemPilesHelpers._isRealNumber(obj)) {\n            return false;\n        }\n        if (obj instanceof Object && Object.keys(obj).length === 0) {\n            return true;\n        }\n        if (obj instanceof Array && obj.length === 0) {\n            return true;\n        }\n        if (obj && Object.keys(obj).length === 0) {\n            return true;\n        }\n        return false;\n    }\n\n    static _isRealNumber(inNumber) {\n        return !isNaN(inNumber) && typeof inNumber === \"number\" && isFinite(inNumber);\n    }\n}\n","import { CONSTANTS } from \"../../constants/constants.js\";\nimport { BRTUtils } from \"../../core/utils.js\";\nimport Logger from \"../../lib/Logger.js\";\nimport CompendiumsHelpers from \"../../lib/compendiums-helpers.js\";\nimport ItemPilesHelpers from \"../../lib/item-piles-helpers.js\";\nimport { RetrieveHelpers } from \"../../lib/retrieve-helpers.js\";\n\nexport class BRTBetterHelpers {\n    /**\n     * when dropping a link entity on a rolltable if the drop is a tableResult, we assign the dropped entity to that result table.\n     * If the drop happens in another part of the tableview we create a new table result\n     * @param {event} event\n     * @param {RollTable} table the rolltable the event is called on\n     */\n    static async dropEventOnTable(event, table) {\n        // Logger.log(\"EVENT \", event);\n        try {\n            JSON.parse(event.dataTransfer.getData(\"text/plain\"));\n        } catch (err) {\n            Logger.error(`no entity dropped`, false, err);\n            return;\n        }\n\n        const targetName = event.target.name;\n\n        let resultIndex = -1;\n        /** dropping on a table result line the target will be results.2.type, results.2.collection, results.2.text */\n        const isString = targetName && typeof targetName.startsWith === \"function\";\n\n        /** brt.x.formula is the input text field added by brt to have 1 formula added per table row */\n        if (isString && (targetName.startsWith(\"results.\") || targetName.startsWith(\"brt.\"))) {\n            const splitString = targetName.split(\".\");\n            if (splitString.length > 1) {\n                resultIndex = Number(splitString[1]);\n            }\n        }\n\n        const resultTableData = {};\n        if (resultIndex >= 0) {\n            resultTableData._id = table.results[resultIndex]._id;\n        }\n\n        if (resultTableData._id) {\n            table.updateEmbeddedDocuments(\"TableResult\", [resultTableData]);\n        } else {\n            /** create a new embedded entity if we dropped the entity on the sheet but not on a specific result */\n            const lastTableResult = table.results[table.results.length - 1];\n            if (lastTableResult) {\n                const rangeLenght = lastTableResult.range[1] - lastTableResult.range[0];\n                resultTableData.weight = lastTableResult.weight;\n                resultTableData.range = [lastTableResult.range[1], lastTableResult.range[1] + rangeLenght];\n            } else {\n                resultTableData.weight = 1;\n                resultTableData.range = [1, 1];\n            }\n            table.createEmbeddedDocuments(\"TableResult\", [resultTableData]);\n        }\n    }\n\n    static async tryRoll(rollFormula, defaultValue = 1) {\n        try {\n            const qtFormula = String(rollFormula);\n            if (qtFormula == null || qtFormula === \"\" || qtFormula === \"1\") {\n                return 1;\n            } else {\n                try {\n                    const qt = (await new Roll(qtFormula).roll({ async: true })).total || defaultValue;\n                    return qt;\n                } catch (e) {\n                    Logger.debug(e.message, false, e);\n                    const qtRoll = Roll.create(qtFormula);\n                    const qt = (await qtRoll.evaluate({ async: true })).total || defaultValue;\n                    return qt;\n                }\n            }\n        } catch (e) {\n            Logger.error(e.message, false, e);\n            return defaultValue;\n        }\n    }\n\n    static tryRollSync(rollFormula, defaultValue = 1) {\n        try {\n            const qtFormula = String(rollFormula);\n            if (qtFormula == null || qtFormula === \"\" || qtFormula === \"1\") {\n                return 1;\n            } else {\n                try {\n                    const qt = new Roll(qtFormula).roll({ async: false }).total || defaultValue;\n                    return qt;\n                } catch (e) {\n                    Logger.debug(e.message, false, e);\n                    const qtRoll = Roll.create(qtFormula);\n                    const qt = qtRoll.evaluate({ async: false }).total || defaultValue;\n                    return qt;\n                }\n            }\n        } catch (e) {\n            Logger.error(e.message, false, e);\n            return defaultValue;\n        }\n    }\n\n    /**\n     * we can provide a formula on how many times we roll on the table.\n     * @deprecated maybe to remove they are all use the same flag property ?\n     * @returns {Number} how many times to roll on this table\n     */\n    static async rollsAmount(table) {\n        const brtTypeToCheck = BRTUtils.retrieveBRTType(table);\n        if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_BETTER) {\n            const rollFormula = table.getFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.GENERIC_AMOUNT_KEY);\n            return await BRTBetterHelpers.tryRoll(rollFormula);\n        } else if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_LOOT) {\n            const rollFormula = table.getFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.LOOT_AMOUNT_KEY);\n            return await BRTBetterHelpers.tryRoll(rollFormula);\n        } else if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_HARVEST) {\n            const rollFormula = table.getFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.HARVEST_AMOUNT_KEY);\n            return await BRTBetterHelpers.tryRoll(rollFormula);\n        } else {\n            const rollFormula = table.getFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.GENERIC_AMOUNT_KEY);\n            return await BRTBetterHelpers.tryRoll(rollFormula);\n        }\n    }\n\n    static async retrieveDocumentFromResultOnlyUuid(result, throwError) {\n        return BRTBetterHelpers.retrieveDocumentFromResult(result, throwError, true);\n    }\n\n    static async retrieveDocumentFromResult(result, throwError, onlyUuid = false) {\n        let findDocument = null;\n        let docUuid = getProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_UUID}`);\n        if (docUuid) {\n            if (onlyUuid) {\n                findDocument = fromUuidSync(docUuid);\n            } else {\n                findDocument = await fromUuid(docUuid);\n            }\n        }\n        if (!findDocument) {\n            if (result.type === CONST.TABLE_RESULT_TYPES.COMPENDIUM) {\n                // Compendium.world.prodottifiniti.Item.cGvOfBMe8XQjL8ra\n                let compendium = await RetrieveHelpers.getCompendiumCollectionAsync(\n                    result.documentCollection,\n                    true,\n                    false,\n                );\n                if (!compendium) {\n                    if (throwError) {\n                        throw Logger.error(`Compendium ${result.documentCollection} was not found`);\n                    } else {\n                        Logger.warn(`Compendium ${result.documentCollection} was not found`);\n                        return null;\n                    }\n                }\n                if (onlyUuid) {\n                    //findDocument = compendium?.contents.find((m) => m.id === `${result.documentId}`);\n                    findDocument = CompendiumsHelpers.getDocumentCompendiumSync(compendium.metadata.id, {\n                        id: result.documentId,\n                    });\n                } else {\n                    // findDocument = (await compendium?.getDocuments()).find((m) => m.id === `${result.documentId}`);\n                    findDocument = await CompendiumsHelpers.getDocumentCompendiumAsync(compendium.metadata.id, {\n                        id: result.documentId,\n                    });\n                }\n\n                if (!findDocument) {\n                    if (throwError) {\n                        throw Logger.error(\n                            `The \"${result.documentId}\" document was not found in Compendium ${result.documentCollection}`,\n                        );\n                    } else {\n                        Logger.warn(\n                            `The \"${result.documentId}\" document was not found in Compendium ${result.documentCollection}`,\n                        );\n                        return null;\n                    }\n                }\n            } else if (result.type === CONST.TABLE_RESULT_TYPES.DOCUMENT) {\n                let collection = game.collections.get(result.documentCollection);\n                if (!collection) {\n                    if (throwError) {\n                        throw Logger.error(`Collection ${result.documentCollection} was not found`);\n                    } else {\n                        Logger.warn(`Collection ${result.documentCollection} was not found`);\n                        return null;\n                    }\n                }\n                if (collection) {\n                    if (onlyUuid) {\n                        findDocument = collection.contents.find((m) => m.id === `${result.documentId}`);\n                    } else {\n                        findDocument = collection.contents.find((m) => m.id === `${result.documentId}`);\n                        // findDocument = (await collection.getDocuments()).find((m) => m.id === `${result.documentId}`);\n                    }\n                    // let findDocument = compendium.contents.find((m) => m.id === `${result.documentId}`);\n                    if (!findDocument) {\n                        if (throwError) {\n                            throw Logger.error(\n                                `The \"${result.documentId}\" document was not found in collection ${result.documentCollection}`,\n                            );\n                        } else {\n                            Logger.warn(\n                                `The \"${result.documentId}\" document was not found in collection ${result.documentCollection}`,\n                            );\n                            return null;\n                        }\n                    }\n                } else {\n                    findDocument = fromUuid(`${result.documentName}.${result.documentId}`); // Actor.KjoEEN077oSC4WG4\n                    if (!findDocument) {\n                        if (throwError) {\n                            throw Logger.error(\n                                `The \"${result.documentId}\" document was not found in collection ${result.documentName}.${result.documentId}`,\n                            );\n                        } else {\n                            Logger.warn(\n                                `The \"${result.documentId}\" document was not found in collection ${result.documentName}.${result.documentId}`,\n                            );\n                            return null;\n                        }\n                    }\n                }\n            }\n        }\n        if (!findDocument) {\n            Logger.debug(\n                `The uuid can be retrieved only from result type '${CONST.TABLE_RESULT_TYPES.COMPENDIUM}' or '${CONST.TABLE_RESULT_TYPES.DOCUMENT}'`,\n            );\n            findDocument = null;\n        }\n        return findDocument;\n    }\n\n    static async updateTableResult(resultToUpdate) {\n        let isUpdate = false;\n        // , noFlag = false\n        let result = resultToUpdate instanceof TableResult ? resultToUpdate.toObject(false) : resultToUpdate;\n        result.isText = result.type === CONST.TABLE_RESULT_TYPES.TEXT;\n        result.isDocument = result.type === CONST.TABLE_RESULT_TYPES.DOCUMENT;\n        result.isCompendium = result.type === CONST.TABLE_RESULT_TYPES.COMPENDIUM;\n        result.img = result.icon || result.img || CONFIG.RollTable.resultIcon;\n        result.text = TextEditor.decodeHTML(result.text);\n\n        result.innerText = result.text || \"\";\n        // Remove html code base\n        result.innerText = result.innerText.replaceAll(\"</p>\", \"\");\n        result.innerText = result.innerText.replaceAll(\"<p>\", \"\");\n        result.innerText = result.innerText.trim();\n\n        result.html = result.text;\n        result.textOriginal = result.text;\n        result.uuid = resultToUpdate.uuid ?? \"\";\n        const resultDoc = await BRTBetterHelpers.retrieveDocumentFromResultOnlyUuid(result, false);\n        result.uuidDoc = resultDoc?.uuid ?? \"\";\n        result.isStackable = false;\n\n        // grab the formula\n        // result.qtFormula = getProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.}`;\n        const currentUuid = getProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_UUID}`);\n        const currentOriginalName = getProperty(\n            result,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_ORIGINAL_NAME}`,\n        );\n        const currentCustomName = getProperty(\n            result,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_NAME}`,\n        );\n        const currentOriginalIcon = getProperty(\n            result,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_ORIGINAL_ICON}`,\n        );\n        const currentCustomIcon = getProperty(\n            result,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON}`,\n        );\n        const currentOriginalQuantity = getProperty(\n            result,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_ORIGINAL_QUANTITY}`,\n        );\n        const currentCustomQuantity = getProperty(\n            result,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_QUANTITY}`,\n        );\n\n        const currentCustomQuantityOLD = getProperty(\n            result,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.RESULTS_FORMULA_KEY_FORMULA}`,\n        );\n\n        if (result.isDocument || result.isCompendium) {\n            if (result.uuidDoc && (!currentUuid || currentUuid !== result.uuidDoc)) {\n                setProperty(\n                    result,\n                    `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_UUID}`,\n                    result.uuidDoc,\n                );\n                isUpdate = true;\n            }\n            // Little patch for old value\n            if (currentCustomQuantityOLD && !currentCustomQuantity) {\n                setProperty(\n                    result,\n                    `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_QUANTITY}`,\n                    currentCustomQuantityOLD,\n                );\n                setProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.RESULTS_FORMULA_KEY_FORMULA}`, \"\");\n            }\n\n            if (\n                result.quantity &&\n                currentOriginalQuantity !== result.quantity &&\n                currentCustomQuantity &&\n                currentCustomQuantity !== result.quantity\n            ) {\n                setProperty(\n                    result,\n                    `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_ORIGINAL_QUANTITY}`,\n                    result.quantity,\n                );\n                isUpdate = true;\n            }\n            // TODO DISABLED FOR NOW WE USE THE LOGIC 1:1 INSTEAD N:1 FOR NOW\n            /*\n      if (result.quantity && !currentCustomQuantity) {\n        setProperty(\n          result,\n          `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_QUANTITY}`,\n          result.quantity\n        );\n        // if (noFlag) {\n        //   setProperty(\n        //     result,\n        //     `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_QUANTITY}`,\n        //     result.quantity\n        //   );\n        // } else {\n        //   await result.setFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_QUANTITY, result.quantity);\n        // }\n        isUpdate = true;\n      }\n      */\n            if (result.documentCollection === \"JournalEntry\") {\n                if (result.uuidDoc) {\n                    result.isJournal = true;\n                    const journalEntry = await fromUuid(result.uuidDoc);\n                    if (journalEntry?.pages.size > 0) {\n                        const sortedArray = journalEntry.pages.contents.sort((a, b) => a.sort - b.sort);\n                        const journalPages = [];\n                        journalPages.push({\n                            uuid: \"\",\n                            name: \"\",\n                        });\n                        for (const page of sortedArray) {\n                            journalPages.push({\n                                uuid: page.uuid,\n                                name: page.name,\n                            });\n                        }\n                        result.journalPages = journalPages;\n                    } else {\n                        result.journalPages = [];\n                    }\n                }\n            }\n\n            // Try to check if item is stackable\n            if (result.uuidDoc) {\n                let resultDocType = null;\n                if (resultDoc?.documentName) {\n                    resultDocType = resultDoc?.documentName;\n                } else if (resultDoc.pack && game.packs.get(resultDoc.pack)) {\n                    resultDocType = game.packs.get(resultDoc.pack)?.documentClass?.documentName;\n                } else if (resultDoc.documentCollection && game.packs.get(resultDoc.documentCollection)) {\n                    resultDocType = game.packs.get(resultDoc.documentCollection)?.documentClass?.documentName;\n                } else if (resultDoc.documentCollection) {\n                    resultDocType = resultDoc.documentCollection;\n                }\n\n                if (resultDocType === \"Item\" || result.uuidDoc.includes(\"Item.\")) {\n                    //  && ItemPilesHelpers.isStackable(resultDoc)\n                    result.isStackable = true;\n                } else if (resultDocType === \"Actor\" || result.uuidDoc.includes(\"Actor.\")) {\n                    result.isStackable = true;\n                } else if (resultDocType === \"RollTable\" || result.uuidDoc.includes(\"RollTable.\")) {\n                    result.isStackable = true;\n                }\n            } else {\n                // TODO to many problem but the logic was right ?\n                // result.drawn = true;\n            }\n        }\n\n        if (\n            result.text &&\n            currentOriginalName !== result.text &&\n            currentCustomName &&\n            currentCustomName !== result.text\n        ) {\n            setProperty(\n                result,\n                `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_ORIGINAL_NAME}`,\n                result.text,\n            );\n            isUpdate = true;\n        }\n        if (result.text && !currentCustomName) {\n            setProperty(\n                result,\n                `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_NAME}`,\n                result.text,\n            );\n            isUpdate = true;\n        }\n\n        if (result.img && currentOriginalIcon !== result.img && currentCustomIcon && currentCustomIcon !== result.img) {\n            setProperty(\n                result,\n                `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_ORIGINAL_ICON}`,\n                result.img,\n            );\n            isUpdate = true;\n        }\n        if (result.img && !currentCustomIcon) {\n            setProperty(\n                result,\n                `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON}`,\n                result.img,\n            );\n            isUpdate = true;\n        }\n\n        // Try to update the original result image\n        if (!result.img || result.img === CONFIG.RollTable.resultIcon) {\n            result.img = currentCustomIcon || resultDoc?.img || CONFIG.RollTable.resultIcon;\n        }\n\n        return {\n            result: result,\n            isUpdate: isUpdate,\n        };\n    }\n\n    static async retrieveAvailableRange(table) {\n        // Ensure that at least one non-drawn result remains\n        let available = table.results.filter((r) => !r.drawn);\n        if (!available.length) {\n            Logger.warn(game.i18n.localize(\"TABLE.NoAvailableResults\"), true);\n            return { roll, results };\n        }\n\n        const brtTypeToCheck = BRTUtils.retrieveBRTType(table);\n\n        const useDynamicDcOnTable = getProperty(\n            table,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HARVEST_USE_DYNAMIC_DC}`,\n        );\n        if (useDynamicDcOnTable && brtTypeToCheck === CONSTANTS.TABLE_TYPE_HARVEST) {\n            const availableTmp = [];\n            for (const a of available) {\n                const dynamicDcFormula = getProperty(\n                    a,\n                    `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HARVEST_RESULT_DYNAMIC_DC_VALUE}`,\n                );\n                if (dynamicDcFormula) {\n                    const dynamicDcValue = BRTHarvestHelpers.prepareValueDynamicDcSync(dynamicDcFormula);\n                    const brtAvailable = foundry.utils.deepClone(a);\n                    setProperty(\n                        brtAvailable,\n                        `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HARVEST_RESULT_DYNAMIC_DC_VALUE}`,\n                        dynamicDcValue,\n                    );\n                    availableTmp.push(brtAvailable);\n                } else {\n                    availableTmp.push(a);\n                }\n            }\n            available = availableTmp;\n        }\n\n        // // Ensure that results are available within the minimum/maximum range\n        // const minRoll = (await roll.reroll({ minimize: true, async: true })).total;\n        // const maxRoll = (await roll.reroll({ maximize: true, async: true })).total;\n        const availableRange = available.reduce(\n            (range, result) => {\n                const r = result.range;\n                if (!range[0] || r[0] < range[0]) range[0] = r[0];\n                if (!range[1] || r[1] > range[1]) range[1] = r[1];\n                return range;\n            },\n            [null, null],\n        );\n        return availableRange;\n    }\n}\n","import { CONSTANTS } from \"../../constants/constants.js\";\nimport { BRTBetterHelpers } from \"../../tables/better/brt-helper.js\";\nimport { getSubstring } from \"../../lib/lib.js\";\nimport { CompendiumToRollTableDialog } from \"./compendium-to-rollTable-dialog.js\";\nimport Logger from \"../../lib/Logger.js\";\nimport ItemPilesHelpers from \"../../lib/item-piles-helpers.js\";\n\n/**\n * @href https://gist.github.com/crazycalya/0cd20cd12b1a344d21302a794cb229ff\n * @href https://gist.github.com/p4535992/3151778781055a6f68281a0bfd8da1a2\n * @href https://www.reddit.com/r/FoundryVTT/comments/11lbjln/converting_a_compendium_into_a_rollable_table/\n */\nexport class CompendiumToRollTableSpecialHarvestDialog {\n    constructor(allCompendiums, itemTypes) {\n        // super(allCompendiums, itemTypes);\n        let compendium = allCompendiums[0];\n\n        let msg = {\n            name: compendium.metadata.label,\n            title: compendium.title ?? compendium.metadata.name,\n        };\n\n        Logger.info(game.i18n.format(`${CONSTANTS.MODULE_ID}.api.msg.startRolltableGeneration`, msg), true);\n        const document = this.fromCompendium(compendium);\n        Logger.info(game.i18n.format(`${CONSTANTS.MODULE_ID}.api.msg.rolltableGenerationFinished`, msg), true);\n        return document;\n    }\n\n    /**\n     * Group an array of objects by a specified property.\n     * @param {Array<T>} array - The array of objects to group.\n     * @param {string} property - The property to group the objects by.\n     * @returns {Object} An object where the keys are the unique values of the specified property and the values are arrays of objects with that property value.\n     * @template T\n     *\n     * @example\n     * const arr = [{type:\"A\"}, {type:\"A\"}, {type:\"B\"}];\n     * const result = groupBy(arr, \"type\");\n     * console.log(result); // Output: { A: [{type: \"A\"}, {type: \"A\"}], B: [{type: \"B\"}] }\n     */\n    _groupBy(arr, property) {\n        return arr.reduce(function (memo, x) {\n            if (!memo[getProperty(x, property)]) {\n                memo[getProperty(x, property)] = [];\n            }\n            memo[getProperty(x, property)].push(x);\n            return memo;\n        }, {});\n    }\n\n    _convertToSkillDenomination(skillValue) {\n        if (!skillValue) {\n            return \"\";\n        }\n        const skillValueToCheck = String(skillValue).toLowerCase().trim();\n\n        const r = this.skillMap.get(skillValueToCheck);\n        return r;\n    }\n\n    _containsNumbers(str) {\n        return /\\d/.test(str);\n    }\n\n    /**\n     * @override\n     * @param {*} customFilters\n     * @param {*} nameFilters\n     * @param {*} selectedItems\n     * @param {*} selectedSpellLevels\n     * @param {*} selectedRarities\n     * @param {*} weightPredicate\n     * @param {*} compendium\n     * @param {*} options\n     * @returns\n     */\n    async fromCompendium(compendium, options = {}) {\n        // Ported from Foundry's existing RollTable.fromFolder()\n        // const results = Promise.all(await compendium.index.map(async (es, i) => {\n        const results = await Promise.all(\n            // compendium.contents.map(async (es, i) => {\n            compendium.index.contents.map(async (es, i) => {\n                Logger.log(\"Compendium Item:\" + es);\n                Logger.log(\"Compendium Index:\" + i);\n                const e = await fromUuid(es.uuid);\n                const dcValue = getProperty(e, `system.description.chat`);\n                const skillValue = getProperty(e, `system.description.unidentified`);\n                const sourceValue = getProperty(e, `system.source`);\n\n                const skillDenom = this._convertToSkillDenomination(skillValue) ?? skillValue;\n\n                let nameTmp = e.name;\n                let has1d = false;\n                if (nameTmp.includes(\"1d\")) {\n                    nameTmp = nameTmp.replace(\"1d\", \"\");\n                    has1d = true;\n                }\n                let num = 1;\n                let newName = TextEditor.decodeHTML(e.name);\n                if (this._containsNumbers(nameTmp)) {\n                    let numStr = nameTmp.match(/\\d+/)[0]; //nameTmp.replace(/\\D/g, \"\");\n                    num = has1d ? \"1d\" + parseInt(numStr) : String(parseInt(numStr));\n                    if (num <= 0) {\n                        num = 1;\n                    }\n                    let stringToCheck = getSubstring(newName, \"(\", \")\");\n                    stringToCheck = stringToCheck.replace(/[0-9]/g, \"\");\n                    stringToCheck = stringToCheck.replace(\" x\", \"\");\n                    stringToCheck = stringToCheck.replace(\"x \", \"\");\n                    stringToCheck = stringToCheck ?? \"\";\n\n                    let arrNames = newName.replace(numStr, \"\").split(\"(\");\n                    if (arrNames.length > 0) {\n                        newName = arrNames?.length > 0 ? arrNames[0] : nameTmp;\n                    }\n                    // newName = newName.replace(\"(\", \"\");\n                    // newName = newName.replace(\")\", \"\");\n                    newName = newName.trim() + \" \" + stringToCheck.trim();\n                    newName = newName.replace(\"scales\", \"scale\"); // scales\n                    newName = newName.replace(\"Scales\", \"Scale\"); // scales\n                    newName = newName.replace(\"plates\", \"plate\"); // plates\n                    newName = newName.replace(\"Plates\", \"Plate\"); // plates\n                    newName = newName.replace(\"vials\", \"vial\"); // vials\n                    newName = newName.replace(\"Vials\", \"Vial\"); // vials\n                    newName = newName.replace(\"sacks\", \"sack\"); // sacks\n                    newName = newName.replace(\"Sacks\", \"Sack\"); // sacks\n                    newName = newName.replace(\"fins\", \"fin\"); //\n                    newName = newName.replace(\"Fins\", \"Fin\"); //\n                    newName = newName.replace(\"claws\", \"claw\"); //\n                    newName = newName.replace(\"Claws\", \"Claw\"); //\n                    newName = newName.replace(\" x\", \"\");\n                    newName = newName.trim();\n                }\n\n                // https://foundryvtt.com/api/v8/data.TableResultData.html\n                // _id\tstring The _id which uniquely identifies this TableResult embedded document\n                // type\tstring\t<optional> A result sub-type from CONST.TABLE_RESULT_TYPES (COMPENDIUM: 2, DOCUMENT: 1, TEXT: 0)\n                // text\tstring\t<optional> The text which describes the table result\n                // img\tstring\t<optional> An image file url that represents the table result\n                // collection\tstring\t<optional> A named collection from which this result is drawn\n                // resultId\tstring\t<optional> The _id of a Document within the collection this result references\n                // weight\tnumber\t<optional> The probabilistic weight of this result relative to other results\n                // range\tArray.<number>\t<optional> A length 2 array of ascending integers which defines the range of dice roll totals which produce this drawn result\n                // drawn\tboolean\t<optional> false Has this result already been drawn (without replacement)\n                // flags\tobject\t<optional> {} An object of optional key/value flags\n                return {\n                    text: e.name,\n                    type: CONST.TABLE_RESULT_TYPES.COMPENDIUM,\n                    collection: compendium.type,\n                    resultId: e.id ? e.id : e._id,\n                    img: e.thumbnail || e.img || CONFIG.RollTable.resultIcon,\n                    weight: 1,\n                    range: [i + 1, i + 1],\n                    documentCollection: `${compendium.metadata.packageName}.${compendium.metadata.name}`,\n                    drawn: false,\n                    flags: {\n                        [`${CONSTANTS.MODULE_ID}`]: {\n                            // [`${CONSTANTS.FLAGS.RESULTS_FORMULA_KEY_FORMULA}`]: String(num) ?? \"1\",\n                            [`${CONSTANTS.FLAGS.HARVEST_DC_VALUE_KEY}`]: String(dcValue) ?? \"0\",\n                            [`${CONSTANTS.FLAGS.HARVEST_SKILL_VALUE_KEY}`]: skillDenom ?? \"\",\n                            [`${CONSTANTS.FLAGS.GENERIC_SOURCE_VALUE_KEY}`]: sourceValue ?? \"\",\n                            [`${CONSTANTS.FLAGS.GENERIC_RESULT_UUID}`]: es.uuid ?? \"\",\n                            [`${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_NAME}`]: newName ?? \"\",\n                            [`${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON}`]: \"\",\n                            [`${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_QUANTITY}`]: String(num) ?? \"1\",\n                            [`${CONSTANTS.FLAGS.GENERIC_RESULT_ORIGINAL_NAME}`]: e.name ?? \"\",\n                            [`${CONSTANTS.FLAGS.GENERIC_RESULT_ORIGINAL_ICON}`]: e.img ?? \"\",\n                            [`${CONSTANTS.FLAGS.GENERIC_RESULT_ORIGINAL_QUANTITY}`]:\n                                ItemPilesHelpers.getItemQuantity(e) ?? 1,\n                        },\n                    },\n                };\n            }),\n        );\n\n        return await this.createCompendiumFromData(compendium.metadata.label, results, `1d${results.length}`, options);\n    }\n\n    /**\n     * @override\n     * @param {*} compendiumName\n     * @param {*} results\n     * @param {*} formula\n     * @param {*} options\n     */\n    async createCompendiumFromData(compendiumName, results, formula, options = {}) {\n        const resultsGroupedBySystemOrigin = this._groupBy(\n            results,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_SOURCE_VALUE_KEY}`,\n        );\n        const documents = [];\n\n        for (const [key, values] of Object.entries(resultsGroupedBySystemOrigin)) {\n            // For table not make sense in this case\n            let firstDcValue = 0;\n            let firstSkillDenom =\n                values?.length > 0\n                    ? getProperty(values[0], `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HARVEST_SKILL_VALUE_KEY}`)\n                    : \"\";\n            let amount = values.length <= 0 ? values.length + 1 : values.length;\n            //options.renderSheet = options.renderSheet ?? true;\n            const document = await RollTable.create(\n                {\n                    name: \"Better Harvester | \" + key + \" RollTable\",\n                    description: `Rolltable created from the '${compendiumName}' compendium filter for the system source value '${key}'.`,\n                    results: values,\n                    formula: `1d${amount}`,\n                    flags: {\n                        [`${CONSTANTS.MODULE_ID}`]: {\n                            [`${CONSTANTS.FLAGS.TABLE_TYPE_KEY}`]: CONSTANTS.TABLE_TYPE_HARVEST,\n                            [`${CONSTANTS.FLAGS.HARVEST_DC_VALUE_KEY}`]: String(firstDcValue) ?? \"0\",\n                            [`${CONSTANTS.FLAGS.HARVEST_SKILL_VALUE_KEY}`]: firstSkillDenom ?? \"\",\n                            [`${CONSTANTS.FLAGS.GENERIC_SOURCE_VALUE_KEY}`]: key ?? \"\",\n                            [`${CONSTANTS.FLAGS.GENERIC_DISTINCT_RESULT}`]: true,\n                            [`${CONSTANTS.FLAGS.GENERIC_DISTINCT_RESULT_KEEP_ROLLING}`]: false,\n                            [`${CONSTANTS.FLAGS.GENERIC_AMOUNT_KEY}`]: amount ?? 1,\n                        },\n                    },\n                    img: \"icons/svg/pawprint.svg\",\n                },\n                options,\n            );\n            await document.normalize();\n            documents.push(document);\n        }\n        return documents;\n    }\n\n    skillMap = new Map([\n        [\"acrobatics\", \"acr\"],\n        [\"animal handling\", \"ani\"],\n        [\"arcana\", \"arc\"],\n        [\"athletics\", \"ath\"],\n        [\"deception\", \"dec\"],\n        [\"history\", \"his\"],\n        [\"insight\", \"ins\"],\n        [\"investigation\", \"inv\"],\n        [\"intimidation\", \"itm\"],\n        [\"medicine\", \"med\"],\n        [\"nature\", \"nat\"],\n        [\"persuasion\", \"per\"],\n        [\"perception\", \"prc\"],\n        [\"performance\", \"prf\"],\n        [\"religion\", \"rel\"],\n        [\"sleight of Hand\", \"slt\"],\n        [\"stealth\", \"ste\"],\n        [\"survival\", \"sur\"],\n    ]);\n}\n","import { CONSTANTS } from \"../../constants/constants\";\nimport Logger from \"../../lib/Logger\";\nimport { RetrieveHelpers } from \"../../lib/retrieve-helpers\";\nimport { CompendiumToRollTableDialog } from \"./compendium-to-rollTable-dialog\";\nimport { CompendiumToRollTableSpecialHarvestDialog } from \"./compendium-to-rollTable-dialog-special-harvest-\";\n\n/**\n * @href https://gist.github.com/crazycalya/0cd20cd12b1a344d21302a794cb229ff\n * @href https://gist.github.com/p4535992/3151778781055a6f68281a0bfd8da1a2\n * @href https://www.reddit.com/r/FoundryVTT/comments/11lbjln/converting_a_compendium_into_a_rollable_table/\n */\nexport class CompendiumToRollTableHelpers {\n    /**\n     * Tested to work with FoundryVTT V11, direct compatibility with DnD5e & SFRPG. Thorough testing still required.\n     */\n    static async compendiumToRollTableWithDialog(compendiumName, { weightPredicate = null } = {}) {\n        let allCompendiums = [];\n        if (compendiumName) {\n            const myPack = await RetrieveHelpers.getCompendiumCollectionAsync(compendiumName, true, false);\n            if (!myPack) {\n                Logger.warn(`No compendium found with id '${compendiumName}'`, true);\n                return;\n            }\n            allCompendiums = [myPack];\n        } else {\n            allCompendiums = await game.packs.contents;\n        }\n        let itemTypes = await game.documentTypes.Item.sort();\n        const documents = new CompendiumToRollTableDialog(allCompendiums, itemTypes, {\n            weightPredicate: weightPredicate,\n        }).render(true);\n        return documents;\n    }\n\n    /**\n     * Tested to work with FoundryVTT V11, direct compatibility with DnD5e & SFRPG. Thorough testing still required.\n     */\n    static async compendiumToRollTableWithDialogSpecialCaseHarvester({ weightPredicate = null } = {}) {\n        if (!game.modules.get(\"harvester\")?.active) {\n            Logger.warn(`You must activate the module 'harvester'`, true);\n            return;\n        }\n        const myPack = await RetrieveHelpers.getCompendiumCollectionAsync(\"harvester.harvest\", false, false);\n        let allCompendiums = [myPack];\n        let itemTypes = await game.documentTypes.Item.sort();\n        const documents = new CompendiumToRollTableSpecialHarvestDialog(\n            allCompendiums,\n            itemTypes,\n            ({ weightPredicate = null } = {}),\n        );\n        return documents;\n    }\n\n    static async compendiumToRollTable(compendiumName, tableName, { weightPredicate = null } = {}) {\n        const myPack = await RetrieveHelpers.getCompendiumCollectionAsync(compendiumName, true, false);\n        const compendium = myPack;\n        if (!compendium) {\n            Logger.warn(\n                game.i18n.format(`${CONSTANTS.MODULE_ID}.api.msg.compendiumNotFound`, { name: compendiumName }),\n                true,\n            );\n            return;\n        }\n\n        let msg = {\n            name: compendiumName,\n            tableName: tableName,\n            title: compendium.title ?? compendium.metadata.name,\n            compendiumSize: (await compendium.getIndex()).size,\n        };\n\n        if (!msg.compendiumSize) {\n            Logger.warn(game.i18n.format(`${CONSTANTS.MODULE_ID}.api.msg.compendiumEmpty`, msg), true);\n            return;\n        }\n\n        Logger.info(game.i18n.format(`${CONSTANTS.MODULE_ID}.api.msg.startRolltableGeneration`, msg), true);\n\n        const document = compendium\n            .getDocuments()\n            .then((compendiumItems) => {\n                return compendiumItems.map((item) => ({\n                    type: CONST.TABLE_RESULT_TYPES.COMPENDIUM,\n                    collection: compendiumName,\n                    text: item.name,\n                    img: item.thumbnail || item.img || CONFIG.RollTable.resultIcon,\n                    weight: weightPredicate ? weightPredicate(item) : 1,\n                    range: [1, 1],\n                }));\n            })\n            .then((results) =>\n                RollTable.create({\n                    name: tableName,\n                    results: results.filter((x) => x.weight !== 0), // remove empty results due to null weight\n                }),\n            )\n            .then((rolltable) => {\n                rolltable.normalize();\n                Logger.info(game.i18n.format(`${CONSTANTS.MODULE_ID}.api.msg.rolltableGenerationFinished`, msg), true);\n                return rolltable;\n            });\n        return document;\n    }\n}\n","import { CONSTANTS } from \"../../constants/constants\";\nimport { BRTUtils } from \"../../core/utils\";\nimport Logger from \"../../lib/Logger\";\n\nexport class RollFromCompendiumAsRollTableHelpers {\n    /**\n     *\n     * @param {String} compendium ID of the compendium to roll\n     */\n    static async rollCompendiumAsRollTable(compendium = null, hideChatMessage) {\n        if (!game.user.isGM) {\n            Logger.warn(`Only gm can roll directly from compendium`, true);\n            return;\n        }\n        if (!compendium) {\n            Logger.warn(`No reference to a compendium is been passed`, true);\n            return;\n        }\n\n        // Get random item from compendium\n        const item = await BRTUtils.getRandomItemFromCompendium(compendium);\n\n        // prepare card data\n        const fontSize = Math.max(60, 100 - Math.max(0, item.name.length - 27) * 2);\n        const chatCardData = {\n            id: \"\",\n            compendium: compendium,\n            itemsData: [{ item: item, quantity: 1, fontSize: fontSize, type: 2 }],\n        };\n        const cardHtml = await renderTemplate(\n            `modules/${CONSTANTS.MODULE_ID}/templates/card/loot-chat-card.hbs`,\n            chatCardData,\n        );\n        let chatData = {\n            flavor: `Rolled from compendium ${item.pack}`,\n            sound: \"sounds/dice.wav\",\n            user: game.user.id,\n            content: cardHtml,\n        };\n\n        if (!hideChatMessage) {\n            ChatMessage.create(chatData);\n        }\n        return chatData;\n    }\n}\n","import { CONSTANTS } from \"../../constants/constants.js\";\nimport { BRTUtils } from \"../../core/utils.js\";\nimport { BRTBetterHelpers } from \"../better/brt-helper.js\";\nimport { RollTableToActorHelpers } from \"../../apps/rolltable-to-actor/rolltable-to-actor-helpers.js\";\nimport Logger from \"../../lib/Logger.js\";\nimport ItemPilesHelpers from \"../../lib/item-piles-helpers.js\";\nimport { getRollMode } from \"../../lib/lib.js\";\n\n/**\n * create a chat card based on the content of the object LootData\n */\nexport class LootChatCard {\n    /**\n     * @param {object} betterResults\n     * @param {object} currencyData\n     */\n    constructor(betterResults, currencyData, rollMode, roll) {\n        this.betterResults = betterResults;\n        this.currencyData = currencyData;\n        this.rollMode = getRollMode(rollMode);\n        this.roll = roll;\n        this.itemsData = [];\n        this.itemsDataGM = [];\n        this.numberOfDraws = 0;\n        this.atLeastOneRollIsHidden = false;\n        for (const result of this.betterResults) {\n            if (getProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_HIDDEN_TABLE}`)) {\n                this.atLeastOneRollIsHidden = true;\n                break;\n            }\n        }\n    }\n\n    async findOrCreateItems() {\n        // we will scale down the font size if an item name is too long\n        // TODO transfer this property on the better result data ?\n        for (const result of ItemPilesHelpers.stackTableResults(this.betterResults)) {\n            this.numberOfDraws++;\n            const quantity = result.quantity;\n            let type = undefined;\n            if (result.isText || result.type === CONST.TABLE_RESULT_TYPES.TEXT) {\n                type = CONST.TABLE_RESULT_TYPES.TEXT;\n            } else if (result.pack || result.type === CONST.TABLE_RESULT_TYPES.COMPENDIUM) {\n                type = CONST.TABLE_RESULT_TYPES.COMPENDIUM;\n            } else if (result.documentCollection || result.type === CONST.TABLE_RESULT_TYPES.DOCUMENT) {\n                type = CONST.TABLE_RESULT_TYPES.DOCUMENT;\n            } else {\n                throw Logger.error(`No vaid type is been found for this result`, true, result);\n            }\n\n            let customResultNameHidden = undefined;\n            let customResultImgHidden = undefined;\n\n            let customResultName = undefined;\n            if (hasProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_NAME}`)) {\n                customResultName =\n                    getProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_NAME}`) ||\n                    \"\";\n            }\n\n            let customResultImg = undefined;\n            if (hasProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON}`)) {\n                customResultImg =\n                    getProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON}`) ||\n                    \"\";\n            }\n            let isResultHidden = false;\n            if (hasProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_HIDDEN_TABLE}`)) {\n                // if (\n                //     !getProperty(\n                //         result,\n                //         `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_SHOW_HIDDEN_RESULT_ON_CHAT}`,\n                //     )\n                // ) {\n                //     continue;\n                // }\n                // customResultNameHidden = CONSTANTS.DEFAULT_HIDDEN_RESULT_TEXT;\n                // customResultImgHidden = CONSTANTS.DEFAULT_HIDDEN_RESULT_IMAGE;\n                isResultHidden =\n                    getProperty(\n                        result,\n                        `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_HIDDEN_TABLE}`,\n                    ) || false;\n            }\n            const entityUuid = getProperty(\n                result,\n                `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_UUID}`,\n            );\n            let itemEntity = await fromUuid(entityUuid);\n\n            const fontSize = itemEntity\n                ? Math.max(60, 100 - Math.max(0, (customResultName || itemEntity.name || result.text).length - 27) * 2)\n                : Math.max(60, 100 - Math.max(0, (result.name || result.text).length - 27) * 2);\n\n            if (result.type === CONST.TABLE_RESULT_TYPES.TEXT || !itemEntity) {\n                Logger.debug(`Cannot find document with '${entityUuid}'`);\n                this.itemsDataGM.push({\n                    id: result.text,\n                    text: customResultName ?? result.text ?? result.name,\n                    img: customResultImg ?? result.icon ?? result.img ?? result.src ?? `icons/svg/d20-highlight.svg`,\n                    isText: true,\n                    documentName: result.documentName,\n                    compendiumName: result.pack,\n                    type: type,\n                    item: {\n                        id: result.id,\n                        _id: result.id,\n                        name: customResultName ?? result.text ?? result.name,\n                        img:\n                            customResultImg ?? result.icon ?? result.img ?? result.src ?? `icons/svg/d20-highlight.svg`,\n                        text: customResultName ?? result.text ?? result.name,\n                        uuid: \"\",\n                        isHidden: false,\n                        quantity: quantity,\n                        // weight: weight,\n                        fontSize: fontSize,\n                    },\n                    isHidden: false,\n                    quantity: quantity,\n                    // weight: weight,\n                    fontSize: fontSize,\n                });\n                if (\n                    !getProperty(\n                        result,\n                        `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_SHOW_HIDDEN_RESULT_ON_CHAT}`,\n                    ) &&\n                    getProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_HIDDEN_TABLE}`)\n                ) {\n                    continue;\n                }\n                if (isResultHidden) {\n                    this.itemsData.push({\n                        id: result.text,\n                        text: customResultNameHidden ?? result.text ?? result.name,\n                        img:\n                            customResultImgHidden ??\n                            result.icon ??\n                            result.img ??\n                            result.src ??\n                            `icons/svg/d20-highlight.svg`,\n                        isText: true,\n                        documentName: result.documentName,\n                        compendiumName: result.pack,\n                        type: type,\n                        item: {\n                            id: result.id,\n                            _id: result.id,\n                            name: customResultNameHidden ?? result.text ?? result.name,\n                            img:\n                                customResultImgHidden ??\n                                result.icon ??\n                                result.img ??\n                                result.src ??\n                                `icons/svg/d20-highlight.svg`,\n                            text: customResultNameHidden ?? result.text ?? result.name,\n                            uuid: \"\",\n                            isHidden: isResultHidden,\n                            quantity: quantity,\n                            // weight: weight,\n                            fontSize: fontSize,\n                        },\n                        isHidden: isResultHidden,\n                        quantity: quantity,\n                        // weight: weight,\n                        fontSize: fontSize,\n                    });\n                } else {\n                    this.itemsData.push({\n                        id: result.text,\n                        text: customResultName ?? result.text ?? result.name,\n                        img:\n                            customResultImg ?? result.icon ?? result.img ?? result.src ?? `icons/svg/d20-highlight.svg`,\n                        isText: true,\n                        documentName: result.documentName,\n                        compendiumName: result.pack,\n                        type: type,\n                        item: {\n                            id: result.id,\n                            _id: result.id,\n                            name: customResultName ?? result.text ?? result.name,\n                            img:\n                                customResultImg ??\n                                result.icon ??\n                                result.img ??\n                                result.src ??\n                                `icons/svg/d20-highlight.svg`,\n                            text: customResultName ?? result.text ?? result.name,\n                            uuid: \"\",\n                            isHidden: isResultHidden,\n                            quantity: quantity,\n                            // weight: weight,\n                            fontSize: fontSize,\n                        },\n                        isHidden: isResultHidden,\n                        quantity: quantity,\n                        // weight: weight,\n                        fontSize: fontSize,\n                    });\n                }\n\n                continue;\n            }\n\n            const itemFolder = await this.getBRTFolder();\n            if (itemFolder) {\n                itemEntity.folder = itemFolder.id;\n            } else {\n                Logger.debug(`No folder tables found with name 'Better RollTable | Better Items'`);\n            }\n\n            if (customResultName && customResultName !== itemEntity.name) {\n                setProperty(itemEntity, `name`, customResultName);\n            }\n            if (customResultImg && customResultImg !== itemEntity.img) {\n                setProperty(itemEntity, `img`, customResultImg);\n            }\n\n            let isJournal = itemEntity instanceof JournalEntry;\n            let docJournalPageUuid = getProperty(\n                result,\n                `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_JOURNAL_PAGE_UUID}`,\n            );\n            if (isJournal && docJournalPageUuid) {\n                itemEntity = await fromUuid(docJournalPageUuid);\n            }\n            this.itemsDataGM.push({\n                id: result.text,\n                text: customResultName ?? result.text ?? result.name,\n                img: customResultImg ?? result.icon ?? result.img ?? result.src ?? `icons/svg/d20-highlight.svg`,\n                isText: false,\n                documentName: itemEntity.documentName,\n                compendiumName: itemEntity.pack,\n                type: type,\n                item: {\n                    id: itemEntity.id,\n                    _id: itemEntity.id,\n                    name: itemEntity.name,\n                    img: itemEntity.img ?? itemEntity.src ?? `icons/svg/d20-highlight.svg`,\n                    text: itemEntity.text ?? itemEntity.name ?? \"\",\n                    uuid: itemEntity?.uuid ?? \"\",\n                    isHidden: false,\n                    quantity: quantity,\n                    // weight: weight,\n                    fontSize: fontSize,\n                },\n                isHidden: false,\n                quantity: quantity,\n                // weight: weight,\n                fontSize: fontSize,\n            });\n\n            if (isResultHidden) {\n                if (\n                    !getProperty(\n                        result,\n                        `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_SHOW_HIDDEN_RESULT_ON_CHAT}`,\n                    )\n                ) {\n                    continue;\n                }\n            }\n\n            if (customResultNameHidden && customResultNameHidden !== itemEntity.name) {\n                setProperty(itemEntity, `name`, customResultNameHidden);\n            }\n            if (customResultImgHidden && customResultImgHidden !== itemEntity.img) {\n                setProperty(itemEntity, `img`, customResultImgHidden);\n            }\n            setProperty(\n                itemEntity,\n                `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_HIDDEN_TABLE}`,\n                isResultHidden,\n            );\n\n            if (isResultHidden) {\n                this.itemsData.push({\n                    id: result.text,\n                    text: customResultNameHidden ?? result.text ?? result.name,\n                    img:\n                        customResultImgHidden ??\n                        result.icon ??\n                        result.img ??\n                        result.src ??\n                        `icons/svg/d20-highlight.svg`,\n                    isText: false,\n                    documentName: itemEntity.documentName,\n                    compendiumName: itemEntity.pack,\n                    type: type,\n                    item: {\n                        id: itemEntity.id,\n                        _id: itemEntity.id,\n                        name: itemEntity.name,\n                        img: itemEntity.img ?? itemEntity.src ?? `icons/svg/d20-highlight.svg`,\n                        text: itemEntity.text ?? itemEntity.name ?? \"\",\n                        uuid: itemEntity?.uuid ?? \"\",\n                        isHidden: isResultHidden,\n                        quantity: quantity,\n                        // weight: weight,\n                        fontSize: fontSize,\n                    },\n                    isHidden: isResultHidden,\n                    quantity: quantity,\n                    // weight: weight,\n                    fontSize: fontSize,\n                });\n            } else {\n                this.itemsData.push({\n                    id: result.text,\n                    text: customResultName ?? result.text ?? result.name,\n                    img: customResultImg ?? result.icon ?? result.img ?? result.src ?? `icons/svg/d20-highlight.svg`,\n                    isText: false,\n                    documentName: itemEntity.documentName,\n                    compendiumName: itemEntity.pack,\n                    type: type,\n                    item: {\n                        id: itemEntity.id,\n                        _id: itemEntity.id,\n                        name: itemEntity.name,\n                        img: itemEntity.img ?? itemEntity.src ?? `icons/svg/d20-highlight.svg`,\n                        text: itemEntity.text ?? itemEntity.name ?? \"\",\n                        uuid: itemEntity?.uuid ?? \"\",\n                        isHidden: isResultHidden,\n                        quantity: quantity,\n                        // weight: weight,\n                        fontSize: fontSize,\n                    },\n                    isHidden: isResultHidden,\n                    quantity: quantity,\n                    // weight: weight,\n                    fontSize: fontSize,\n                });\n            }\n\n            /*\n            // TODO ???\n            setProperty(itemData, \"permission.default\", CONST.DOCUMENT_PERMISSION_LEVELS.OBSERVER);\n            let newItem = await Item.create(itemData);\n            */\n        }\n    }\n\n    async renderMessage(data) {\n        return renderTemplate(`modules/${CONSTANTS.MODULE_ID}/templates/card/loot-chat-card.hbs`, data);\n    }\n\n    async getBRTFolder() {\n        if (!this.historyFolder) {\n            let historyFolder = game.folders.getName(\"Better RollTable | Loot Items\");\n            if (!historyFolder) {\n                historyFolder = await Folder.create({\n                    name: \"Better RollTable | Loot Items\",\n                    parent: null,\n                    type: \"Item\",\n                });\n            }\n            this.historyFolder = historyFolder;\n        }\n        return this.historyFolder;\n    }\n\n    async prepareCharCart(table) {\n        // await this.findOrCreateItems();\n\n        const htmlDescription = await TextEditor.enrichHTML(table.description, {\n            async: true,\n            secrets: table.isOwner,\n            documents: true,\n        });\n\n        const rollHTML = null; // TODO ? table.displayRoll && this.roll ? await this.roll.render() : null;\n\n        let flavorString;\n        if (this.numberOfDraws > 1) {\n            flavorString = game.i18n.format(`${CONSTANTS.MODULE_ID}.DrawResultPlural`, {\n                amount: this.numberOfDraws,\n                name: table.name,\n            });\n        } else if (this.numberOfDraws > 0) {\n            flavorString = game.i18n.format(`${CONSTANTS.MODULE_ID}.DrawResultSingular`, {\n                amount: this.numberOfDraws,\n                name: table.name,\n            });\n        } else {\n            flavorString = game.i18n.format(`${CONSTANTS.MODULE_ID}.DrawResultZero`, {\n                name: table.name,\n            });\n        }\n\n        const chatCardData = {\n            rollHTML: rollHTML,\n            tableData: table,\n            htmlDescription: htmlDescription,\n            // gmTitleLabel: Logger.i18n(`${CONSTANTS.MODULE_ID}.label.tableTextGmTitleLabel`),\n            itemsData: this.itemsData,\n            currency: this.currencyData,\n            compendium: table.pack,\n            id: table.id,\n            users: game.users\n                .filter((user) => !user.isGM && user.character)\n                .map((user) => ({\n                    id: user.id,\n                    name: user.character.name,\n                    img: user.character.token?.img || user.avatar,\n                })),\n        };\n\n        const cardHtml = await this.renderMessage(chatCardData);\n\n        const chatData = {\n            flavor: flavorString,\n            sound: \"sounds/dice.wav\",\n            user: game.user._id,\n            content: cardHtml,\n            flags: {\n                [`${CONSTANTS.MODULE_ID}`]: {\n                    [`${CONSTANTS.FLAGS.LOOT}`]: chatCardData,\n                },\n            },\n        };\n        return chatData;\n    }\n\n    async prepareCharCartGM(table) {\n        // await this.findOrCreateItems();\n\n        const htmlDescription = await TextEditor.enrichHTML(table.description, {\n            async: true,\n            secrets: table.isOwner,\n            documents: true,\n        });\n\n        const rollHTML = null; // TODO ? table.displayRoll && this.roll ? await this.roll.render() : null;\n\n        let flavorString;\n        if (this.numberOfDraws > 1) {\n            flavorString = game.i18n.format(`${CONSTANTS.MODULE_ID}.DrawResultPlural`, {\n                amount: this.numberOfDraws,\n                name: table.name,\n            });\n        } else if (this.numberOfDraws > 0) {\n            flavorString = game.i18n.format(`${CONSTANTS.MODULE_ID}.DrawResultSingular`, {\n                amount: this.numberOfDraws,\n                name: table.name,\n            });\n        } else {\n            flavorString = game.i18n.format(`${CONSTANTS.MODULE_ID}.DrawResultZero`, {\n                name: table.name,\n            });\n        }\n\n        const chatCardData = {\n            rollHTML: rollHTML,\n            tableData: table,\n            htmlDescription: htmlDescription,\n            gmTitleLabel: Logger.i18n(`${CONSTANTS.MODULE_ID}.label.tableTextGmTitleLabel`),\n            itemsData: this.itemsDataGM,\n            currency: this.currencyData,\n            compendium: table.pack,\n            id: table.id,\n            users: game.users\n                .filter((user) => user.isGM && user.character)\n                .map((user) => ({\n                    id: user.id,\n                    name: user.character.name,\n                    img: user.character.token?.img || user.avatar,\n                })),\n        };\n\n        const cardHtml = await this.renderMessage(chatCardData);\n\n        const chatData = {\n            flavor: flavorString,\n            sound: \"sounds/dice.wav\",\n            user: game.user._id,\n            content: cardHtml,\n            flags: {\n                [`${CONSTANTS.MODULE_ID}`]: {\n                    [`${CONSTANTS.FLAGS.LOOT}`]: chatCardData,\n                },\n            },\n        };\n        return chatData;\n    }\n\n    async createChatCard(table) {\n        if (!game.user.isGM) {\n            if (this.atLeastOneRollIsHidden || this.rollMode === \"gmroll\") {\n                await betterRolltablesSocket.executeAsGM(\n                    \"invokeGenericChatCardCreateArr\",\n                    table.uuid,\n                    this.betterResults,\n                    this.rollMode,\n                    this.roll,\n                    false,\n                    CONSTANTS.TABLE_TYPE_LOOT,\n                );\n            } else {\n                await this.findOrCreateItems();\n                const chatData = await this.prepareCharCart(table);\n                BRTUtils.addRollModeToChatData(chatData, this.rollMode);\n                ChatMessage.create(chatData);\n            }\n        } else {\n            // IF IS GM\n            const isShowHiddenResultOnChat = getProperty(\n                table,\n                `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_SHOW_HIDDEN_RESULT_ON_CHAT}`,\n            );\n            await this.findOrCreateItems();\n\n            if (this.itemsData?.length > 0) {\n                const chatData = await this.prepareCharCart(table);\n                if (!isShowHiddenResultOnChat) {\n                    BRTUtils.addRollModeToChatData(chatData, this.rollMode);\n                }\n                ChatMessage.create(chatData);\n            }\n\n            if (this.atLeastOneRollIsHidden) {\n                const chatDataGM = await this.prepareCharCartGM(table);\n                BRTUtils.addRollModeToChatData(chatDataGM, \"gmroll\");\n                ChatMessage.create(chatDataGM);\n            }\n        }\n    }\n}\n","/*\ngender == \"male\" AND race == \"human\" OR x != \"bla\"\n\nS:: = Expression\nExpression:: = SubExpression\n             | SubExpression ' AND ' Expression\n             | SubExpression ' OR ' Expression\nSubExpression:: = Definition '==' Value\n                | Definition '!=' Value\nDefinition:: = [a-zA-Z]\nValue:: = '\"' [a-zA-Z] '\"'\n*/\n\nexport class StoryBoolCondition {\n    evaluate() {\n        return true;\n    }\n}\n","import { StoryBoolCondition } from \"./story-bool-condition.js\";\nimport { BRTUtils } from \"../../core/utils.js\";\nimport { CONSTANTS } from \"../../constants/constants.js\";\nimport { BetterRollTable } from \"../../core/brt-table.js\";\nimport Logger from \"../../lib/Logger.js\";\nimport { RetrieveHelpers } from \"../../lib/retrieve-helpers.js\";\n\nexport class StoryBuilder {\n    constructor(tableEntity) {\n        let brtTable = new BetterRollTable(tableEntity, {});\n        this.table = brtTable;\n        /** the story tokens with the respective values, either pulled from a rolltable or rolled with a formula */\n        this._storyTokens = {};\n        /** string containing the story, to be replaced with the tokens */\n        this._story = \"\";\n        /** a story part that will only be showned to the GM */\n        this._storyGm = \"\";\n    }\n\n    /**\n     * Draw story from entity\n     *\n     */\n    async drawStory() {\n        await this.table.initialize();\n        const draw = await this.table.drawMany(1, { displayChat: false });\n\n        let journalContent, errorString;\n\n        for (const entry of draw.results) {\n            /** entity type 1 is when an entity in the world is linked */\n            if (entry.type === CONST.TABLE_RESULT_TYPES.DOCUMENT && entry.documentCollection === \"JournalEntry\") {\n                const storyJournal = game.journal.get(entry.documentId);\n                if (storyJournal) {\n                    const pages = [...storyJournal.pages];\n                    journalContent = pages[0].text.content?.replaceAll(\"</p>\", \"</p>\\n\");\n                } else {\n                    errorString = `Journal Entry ${entry.name} not found inside your world`;\n                }\n            } else if (entry.type === CONST.TABLE_RESULT_TYPES.COMPENDIUM) {\n                /** entity type 2 is when an entity inside a compendium is linked */\n                let nameEntry = getProperty(\n                    entry,\n                    `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_ORIGINAL_NAME}`,\n                )\n                    ? getProperty(entry, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_ORIGINAL_NAME}`)\n                    : entry.text;\n                const entity = await BRTUtils.findInCompendiumByName(entry.documentCollection, nameEntry);\n                if (!entity) {\n                    errorString = `entity ${entry.text} not found in compendium ${entry.documentCollection}`;\n                } else if (entity.documentCollection === \"JournalEntry\") {\n                    const pages = [...entity.pages];\n                    journalContent = pages[0].text.content?.replaceAll(\"</p>\", \"</p>\\n\");\n                } else {\n                    errorString = \"Only Journal entries are supported in the story generation as table results\";\n                }\n            } else {\n                errorString = \"Only Journal entries are supported in the story generation as table results\";\n            }\n\n            if (journalContent) {\n                await this._parseStoryDefinition(journalContent);\n            }\n\n            if (errorString) {\n                Logger.error(errorString, true);\n            }\n        }\n        // Logger.log(\"this._storyTokens \", this._storyTokens);\n        // Logger.log(\"story \", this._story);\n    }\n\n    /**\n     *\n     * @param {string} storyDefinition\n     */\n    async _parseStoryDefinition(storyDefinition) {\n        const PARSE_MODE = {\n            NONE: 0,\n            DEFINITION: 1,\n            STORY: 2,\n            STORYGM: 3,\n        };\n\n        /** remove html spaces and replacing with a space */\n        storyDefinition = storyDefinition.replace(/(&nbsp;|<br>)+/g, \" \");\n        //splt the content by lines\n        let lines = storyDefinition.split(/\\r\\n|\\r|\\n/);\n        //remove empty lines\n        lines = lines.filter((line) => {\n            let lineTmp = line;\n            return lineTmp?.replaceAll(\"<p>\", \"\")?.replaceAll(\"</p>\", \"\").trim().length > 0;\n        });\n\n        let parseMode = PARSE_MODE.DEFINITION;\n\n        for (const line of lines) {\n            // Logger.log(\"LINE \", line);\n            const sectionMatch = /.*#([a-zA-Z]+)/.exec(line);\n            if (sectionMatch) {\n                switch (sectionMatch[1].toLowerCase()) {\n                    case \"story\":\n                        parseMode = PARSE_MODE.STORY;\n                        break;\n                    case \"storygm\":\n                        parseMode = PARSE_MODE.STORYGM;\n                        break;\n                    case \"definition\":\n                        parseMode = PARSE_MODE.DEFINITION;\n                        break;\n                }\n            } else {\n                if (parseMode === PARSE_MODE.STORY) {\n                    this._story += line;\n                } else if (parseMode === PARSE_MODE.STORYGM) {\n                    this._storyGm += line;\n                } else if (parseMode === PARSE_MODE.DEFINITION) {\n                    const matches = /\\s*<p>(.+)\\sas\\s(.+)<\\/p>/i.exec(line);\n                    if (matches) {\n                        await this._processDefinition(matches[1], matches[2]);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {*} defValue\n     * @param {string} definitionName\n     * @returns\n     */\n    async _processDefinition(defValue, definitionName) {\n        // Logger.log(\"value \", defValue);\n\n        const match = /{ *([^}]*?) *}/.exec(definitionName);\n        if (!match) {\n            Logger.error(\n                `definition error, ${definitionName} is malformed. After keyword AS we expect a name in brackets {}`,\n                true,\n            );\n            return;\n        }\n        const definition = match[1];\n        if (hasProperty(this._storyTokens, definition)) {\n            Logger.log(`definition ${definition} is already defined, skipping line`);\n            return;\n        }\n\n        // Logger.log(\"definition \", definition);\n        const regexIF = /IF\\s*\\((.+)\\)/;\n        const ifMatch = regexIF.exec(defValue);\n        let conditionMet = true;\n        if (ifMatch) {\n            const storyCondition = new StoryBoolCondition(defValue);\n            conditionMet = storyCondition.evaluate();\n        }\n\n        if (!conditionMet) {\n            return;\n        }\n        const regexTable = /\\s*@(RollTable|Compendium)\\[ *([^\\]]*?) *\\]/;\n        const tableMatch = regexTable.exec(defValue);\n        let valueResult;\n        /** there is a table definition on the left of the AS */\n        if (tableMatch) {\n            /** if it's a compendium the match is 'tablename.id' if it's a rolltable the match is directly the id */\n\n            const out = BRTUtils.separateIdComendiumName(tableMatch[2]);\n            const tableId = out.nameOrId;\n            const compendiumName = out.compendiumName;\n            let table;\n            if (compendiumName) {\n                table = await BRTUtils.findInCompendiumById(compendiumName, tableId);\n            } else {\n                table = RetrieveHelpers.getRollTableSync(tableId, true);\n            }\n\n            if (!table) {\n                Logger.error(\n                    `table with id ${tableId} not found in the world, check the generation journal for broken links`,\n                    true,\n                );\n                return;\n            }\n            let draw = await table.drawMany(1, { displayChat: false });\n            if (!draw) {\n                await table.resetResults();\n                draw = await table.drawMany(1, { displayChat: false });\n            }\n\n            if (draw.results.length !== 1) {\n                Logger.error(\n                    `0 or more than 1 result was drawn from table ${table.name}, only 1 result is supported check your table config`,\n                    true,\n                );\n                return;\n            }\n\n            const tableResult = draw.results[0];\n            if (tableResult.type !== 0) {\n                Logger.warn(`only text result from table are supported at the moment, check table ${table.name}`, true);\n            }\n            valueResult = tableResult.text;\n        } else {\n            const regexRoll = /\\s*\\[\\[ *([^\\]]*?) *\\]\\]/;\n            /** if no table match, lets check for a formula */\n            const rollMatch = regexRoll.exec(defValue);\n            if (rollMatch) {\n                const rollFormula = rollMatch[1];\n                try {\n                    valueResult = new Roll(rollFormula).roll({ async: false }).total || 0;\n                } catch (e) {\n                    Logger.error(e.message, false, e);\n                    valueResult = 0;\n                }\n            } else {\n                Logger.error(\n                    \"on the left side of the AS in a story definition a rolltable or rollformula must be provided\",\n                    true,\n                );\n            }\n        }\n\n        if (valueResult) {\n            setProperty(this._storyTokens, definition, valueResult);\n        }\n    }\n\n    getGeneratedStory() {\n        return this._generateStory(this._story);\n    }\n\n    getGeneratedStoryGM() {\n        return this._generateStory(this._storyGm);\n    }\n\n    /**\n     * @param {*} story\n     * @returns {string}\n     */\n    _generateStory(story) {\n        if (!story) {\n            Logger.warn(`No story is been passed in th correct format`, true);\n            return story;\n        }\n        const regex = /{ *([^}]*?) *}/g;\n        let replacedStory = story;\n        let matches;\n\n        while ((matches = regex.exec(story)) != null) {\n            const value = getProperty(this._storyTokens, matches[1]);\n            if (!value) {\n                Logger.error(`cannot find a value for token ${matches[1]} in #story definition`, true);\n                continue;\n            }\n            replacedStory = replacedStory.replace(matches[0], value);\n        }\n        return replacedStory;\n    }\n}\n","import { BRTUtils } from \"../../core/utils.js\";\nimport { StoryBuilder } from \"./story-builder\";\nimport { StoryChatCard } from \"./story-chat-card.js\";\n\nexport class BRTStoryHelpers {\n    static async getStoryResults(tableEntity) {\n        const storyBuilder = new StoryBuilder(tableEntity);\n        await storyBuilder.drawStory();\n        const storyHtml = storyBuilder.getGeneratedStory();\n        const storyGMHtml = storyBuilder.getGeneratedStoryGM();\n        return { storyHtml, storyGMHtml };\n    }\n\n    static async generateChatStory(tableEntity) {\n        const storyBuilder = new StoryBuilder(tableEntity);\n        await storyBuilder.drawStory();\n        const storyHtml = storyBuilder.getGeneratedStory();\n        const storyGMHtml = storyBuilder.getGeneratedStoryGM();\n        // const storyChat = new StoryChatCard(tableEntity);\n        // storyChat.createChatCardByText(storyHtml);\n        // storyChat.createChatCardByText(storyGMHtml, { gmOnly: true });\n        this.createChatCardByText(tableEntity, storyHtml);\n        this.createChatCardByText(tableEntity, storyGMHtml, { gmOnly: true });\n    }\n\n    static async generateContentHtmlStory(tableEntity) {\n        const storyBuilder = new StoryBuilder(tableEntity);\n        await storyBuilder.drawStory();\n        const storyHtml = storyBuilder.getGeneratedStory();\n        return storyHtml;\n    }\n\n    static async generateContentGMHtmlStory(tableEntity) {\n        const storyBuilder = new StoryBuilder(tableEntity);\n        await storyBuilder.drawStory();\n        const storyGMHtml = storyBuilder.getGeneratedStoryGM();\n        return storyGMHtml;\n    }\n\n    /**\n     * Create a chat card to display the story string\n     * @param {string} story the html string of the story to display in chat\n     * @param {Object} options set of options, if gmOnly = true then the card will be set to shown only to GM regardless of the chat preferences\n     */\n    static createChatCardByText(tableEntity, story, options = {}) {\n        if (!story) {\n            return;\n        }\n        // quickfix for textselection of stories\n        story = '<div class=\"story-text-selectable\">' + story + \"</div>\";\n\n        const chatData = {\n            flavor: tableEntity.name,\n            sound: \"sounds/dice.wav\",\n            user: game.user._id,\n            content: story,\n        };\n        if (options.gmOnly) {\n            chatData.whisper = [game.users.find((u) => u.isGM).id];\n        } else {\n            BRTUtils.addRollModeToChatData(chatData);\n        }\n\n        ChatMessage.create(chatData);\n    }\n}\n","import { BRTUtils } from \"../../core/utils\";\nimport { getRollMode } from \"../../lib/lib\";\nimport { BRTStoryHelpers } from \"./story-helpers\";\n\nexport class StoryChatCard {\n    /**\n     * @param {object} betterResults\n     * @param {object} currencyData\n     */\n    constructor(betterResults, rollMode, roll) {\n        this.betterResults = betterResults;\n        this.rollMode = getRollMode(rollMode);\n        this.roll = roll;\n    }\n\n    /**\n     * Create a chat card to display the story string\n     * @param {string} story the html string of the story to display in chat\n     * @param {Object} options set of options, if gmOnly = true then the card will be set to shown only to GM regardless of the chat preferences\n     */\n    async createChatCard(table, options = {}) {\n        let story = null;\n        if (options.gmOnly) {\n            story = await BRTStoryHelpers.generateContentGMHtmlStory(table);\n        } else {\n            story = await BRTStoryHelpers.generateContentHtmlStory(table);\n        }\n        // quickfix for textselection of stories\n        story = '<div class=\"better-rolltables-story-text-selectable\">' + story + \"</div>\";\n\n        const rollHTML = null; // TODO ? table.displayRoll && this.roll ? await this.roll.render() : null;\n\n        const chatData = {\n            rollHTML: rollHTML,\n            flavor: table.name,\n            sound: \"sounds/dice.wav\",\n            user: game.user._id,\n            content: story,\n        };\n\n        if (options.gmOnly) {\n            chatData.whisper = [game.users.find((u) => u.isGM).id];\n        } else {\n            BRTUtils.addRollModeToChatData(chatData);\n        }\n\n        ChatMessage.create(chatData);\n    }\n}\n","import { CONSTANTS } from \"../../constants/constants.js\";\nimport { BRTUtils } from \"../../core/utils.js\";\nimport { BRTBetterHelpers } from \"../better/brt-helper.js\";\nimport { RollTableToActorHelpers } from \"../../apps/rolltable-to-actor/rolltable-to-actor-helpers.js\";\nimport Logger from \"../../lib/Logger.js\";\nimport ItemPilesHelpers from \"../../lib/item-piles-helpers.js\";\nimport { getRollMode } from \"../../lib/lib.js\";\n\n/**\n * create a chat card based on the content of the object HarvestData\n */\nexport class HarvestChatCard {\n    /**\n     * @param {object} betterResults\n     */\n    constructor(betterResults, rollMode, roll) {\n        this.betterResults = betterResults;\n        this.rollMode = getRollMode(rollMode);\n        this.roll = roll;\n        this.itemsData = [];\n        this.itemsDataGM = [];\n        this.numberOfDraws = 0;\n        this.atLeastOneRollIsHidden = false;\n        for (const result of this.betterResults) {\n            if (getProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_HIDDEN_TABLE}`)) {\n                this.atLeastOneRollIsHidden = true;\n                break;\n            }\n        }\n    }\n\n    async findOrCreateItems() {\n        // we will scale down the font size if an item name is too long\n        // TODO transfer this property on the better result data ?\n        for (const result of ItemPilesHelpers.stackTableResults(this.betterResults)) {\n            this.numberOfDraws++;\n            const quantity = result.quantity;\n            let type = undefined;\n            if (result.isText || result.type === CONST.TABLE_RESULT_TYPES.TEXT) {\n                type = CONST.TABLE_RESULT_TYPES.TEXT;\n            } else if (result.pack || result.type === CONST.TABLE_RESULT_TYPES.COMPENDIUM) {\n                type = CONST.TABLE_RESULT_TYPES.COMPENDIUM;\n            } else if (result.documentCollection || result.type === CONST.TABLE_RESULT_TYPES.DOCUMENT) {\n                type = CONST.TABLE_RESULT_TYPES.DOCUMENT;\n            } else {\n                throw Logger.error(`No vaid type is been found for this result`, true, result);\n            }\n\n            let customResultNameHidden = undefined;\n            let customResultImgHidden = undefined;\n\n            let customResultName = undefined;\n            if (hasProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_NAME}`)) {\n                customResultName =\n                    getProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_NAME}`) ||\n                    \"\";\n            }\n\n            let customResultImg = undefined;\n            if (hasProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON}`)) {\n                customResultImg =\n                    getProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON}`) ||\n                    \"\";\n            }\n            let isResultHidden = false;\n            if (hasProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_HIDDEN_TABLE}`)) {\n                // if (\n                //     !getProperty(\n                //         result,\n                //         `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_SHOW_HIDDEN_RESULT_ON_CHAT}`,\n                //     )\n                // ) {\n                //     continue;\n                // }\n                // customResultNameHidden = CONSTANTS.DEFAULT_HIDDEN_RESULT_TEXT;\n                // customResultImgHidden = CONSTANTS.DEFAULT_HIDDEN_RESULT_IMAGE;\n                isResultHidden =\n                    getProperty(\n                        result,\n                        `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_HIDDEN_TABLE}`,\n                    ) || false;\n            }\n            const entityUuid = getProperty(\n                result,\n                `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_UUID}`,\n            );\n            let itemEntity = await fromUuid(entityUuid);\n\n            const fontSize = itemEntity\n                ? Math.max(60, 100 - Math.max(0, (customResultName || itemEntity.name || result.text).length - 27) * 2)\n                : Math.max(60, 100 - Math.max(0, (result.name || result.text).length - 27) * 2);\n\n            if (result.type === CONST.TABLE_RESULT_TYPES.TEXT || !itemEntity) {\n                Logger.debug(`Cannot find document with '${entityUuid}'`);\n                this.itemsDataGM.push({\n                    id: result.text,\n                    text: customResultName ?? result.text ?? result.name,\n                    img: customResultImg ?? result.icon ?? result.img ?? result.src ?? `icons/svg/d20-highlight.svg`,\n                    isText: true,\n                    documentName: result.documentName,\n                    compendiumName: result.pack,\n                    type: type,\n                    item: {\n                        id: result.id,\n                        _id: result.id,\n                        name: customResultName ?? result.text ?? result.name,\n                        img:\n                            customResultImg ?? result.icon ?? result.img ?? result.src ?? `icons/svg/d20-highlight.svg`,\n                        text: customResultName ?? result.text ?? result.name,\n                        uuid: \"\",\n                        isHidden: false,\n                        quantity: quantity,\n                        // weight: weight,\n                        fontSize: fontSize,\n                    },\n                    isHidden: false,\n                    quantity: quantity,\n                    // weight: weight,\n                    fontSize: fontSize,\n                });\n                if (\n                    !getProperty(\n                        result,\n                        `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_SHOW_HIDDEN_RESULT_ON_CHAT}`,\n                    ) &&\n                    getProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_HIDDEN_TABLE}`)\n                ) {\n                    continue;\n                }\n                if (isResultHidden) {\n                    this.itemsData.push({\n                        id: result.text,\n                        text: customResultNameHidden ?? result.text ?? result.name,\n                        img:\n                            customResultImgHidden ??\n                            result.icon ??\n                            result.img ??\n                            result.src ??\n                            `icons/svg/d20-highlight.svg`,\n                        isText: true,\n                        documentName: result.documentName,\n                        compendiumName: result.pack,\n                        type: type,\n                        item: {\n                            id: result.id,\n                            _id: result.id,\n                            name: customResultNameHidden ?? result.text ?? result.name,\n                            img:\n                                customResultImgHidden ??\n                                result.icon ??\n                                result.img ??\n                                result.src ??\n                                `icons/svg/d20-highlight.svg`,\n                            text: customResultNameHidden ?? result.text ?? result.name,\n                            uuid: \"\",\n                            isHidden: isResultHidden,\n                            quantity: quantity,\n                            // weight: weight,\n                            fontSize: fontSize,\n                        },\n                        isHidden: isResultHidden,\n                        quantity: quantity,\n                        // weight: weight,\n                        fontSize: fontSize,\n                    });\n                } else {\n                    this.itemsData.push({\n                        id: result.text,\n                        text: customResultName ?? result.text ?? result.name,\n                        img:\n                            customResultImg ?? result.icon ?? result.img ?? result.src ?? `icons/svg/d20-highlight.svg`,\n                        isText: true,\n                        documentName: result.documentName,\n                        compendiumName: result.pack,\n                        type: type,\n                        item: {\n                            id: result.id,\n                            _id: result.id,\n                            name: customResultName ?? result.text ?? result.name,\n                            img:\n                                customResultImg ??\n                                result.icon ??\n                                result.img ??\n                                result.src ??\n                                `icons/svg/d20-highlight.svg`,\n                            text: customResultName ?? result.text ?? result.name,\n                            uuid: \"\",\n                            isHidden: isResultHidden,\n                            quantity: quantity,\n                            // weight: weight,\n                            fontSize: fontSize,\n                        },\n                        isHidden: isResultHidden,\n                        quantity: quantity,\n                        // weight: weight,\n                        fontSize: fontSize,\n                    });\n                }\n\n                continue;\n            }\n\n            const itemFolder = await this.getBRTFolder();\n            if (itemFolder) {\n                itemEntity.folder = itemFolder.id;\n            } else {\n                Logger.debug(`No folder tables found with name 'Better RollTable | Better Items'`);\n            }\n\n            if (customResultName && customResultName !== itemEntity.name) {\n                setProperty(itemEntity, `name`, customResultName);\n            }\n            if (customResultImg && customResultImg !== itemEntity.img) {\n                setProperty(itemEntity, `img`, customResultImg);\n            }\n\n            let isJournal = itemEntity instanceof JournalEntry;\n            let docJournalPageUuid = getProperty(\n                result,\n                `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_JOURNAL_PAGE_UUID}`,\n            );\n            if (isJournal && docJournalPageUuid) {\n                itemEntity = await fromUuid(docJournalPageUuid);\n            }\n            this.itemsDataGM.push({\n                id: result.text,\n                text: customResultName ?? result.text ?? result.name,\n                img: customResultImg ?? result.icon ?? result.img ?? result.src ?? `icons/svg/d20-highlight.svg`,\n                isText: false,\n                documentName: itemEntity.documentName,\n                compendiumName: itemEntity.pack,\n                type: type,\n                item: {\n                    id: itemEntity.id,\n                    _id: itemEntity.id,\n                    name: itemEntity.name,\n                    img: itemEntity.img ?? itemEntity.src ?? `icons/svg/d20-highlight.svg`,\n                    text: itemEntity.text ?? itemEntity.name ?? \"\",\n                    uuid: itemEntity?.uuid ?? \"\",\n                    isHidden: false,\n                    quantity: quantity,\n                    // weight: weight,\n                    fontSize: fontSize,\n                },\n                isHidden: false,\n                quantity: quantity,\n                // weight: weight,\n                fontSize: fontSize,\n            });\n\n            if (isResultHidden) {\n                if (\n                    !getProperty(\n                        result,\n                        `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_SHOW_HIDDEN_RESULT_ON_CHAT}`,\n                    )\n                ) {\n                    continue;\n                }\n            }\n\n            if (customResultNameHidden && customResultNameHidden !== itemEntity.name) {\n                setProperty(itemEntity, `name`, customResultNameHidden);\n            }\n            if (customResultImgHidden && customResultImgHidden !== itemEntity.img) {\n                setProperty(itemEntity, `img`, customResultImgHidden);\n            }\n            setProperty(\n                itemEntity,\n                `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_HIDDEN_TABLE}`,\n                isResultHidden,\n            );\n\n            if (isResultHidden) {\n                this.itemsData.push({\n                    id: result.text,\n                    text: customResultNameHidden ?? result.text ?? result.name,\n                    img:\n                        customResultImgHidden ??\n                        result.icon ??\n                        result.img ??\n                        result.src ??\n                        `icons/svg/d20-highlight.svg`,\n                    isText: false,\n                    documentName: itemEntity.documentName,\n                    compendiumName: itemEntity.pack,\n                    type: type,\n                    item: {\n                        id: itemEntity.id,\n                        _id: itemEntity.id,\n                        name: itemEntity.name,\n                        img: itemEntity.img ?? itemEntity.src ?? `icons/svg/d20-highlight.svg`,\n                        text: itemEntity.text ?? itemEntity.name ?? \"\",\n                        uuid: itemEntity?.uuid ?? \"\",\n                        isHidden: isResultHidden,\n                        quantity: quantity,\n                        // weight: weight,\n                        fontSize: fontSize,\n                    },\n                    isHidden: isResultHidden,\n                    quantity: quantity,\n                    // weight: weight,\n                    fontSize: fontSize,\n                });\n            } else {\n                this.itemsData.push({\n                    id: result.text,\n                    text: customResultName ?? result.text ?? result.name,\n                    img: customResultImg ?? result.icon ?? result.img ?? result.src ?? `icons/svg/d20-highlight.svg`,\n                    isText: false,\n                    documentName: itemEntity.documentName,\n                    compendiumName: itemEntity.pack,\n                    type: type,\n                    item: {\n                        id: itemEntity.id,\n                        _id: itemEntity.id,\n                        name: itemEntity.name,\n                        img: itemEntity.img ?? itemEntity.src ?? `icons/svg/d20-highlight.svg`,\n                        text: itemEntity.text ?? itemEntity.name ?? \"\",\n                        uuid: itemEntity?.uuid ?? \"\",\n                        isHidden: isResultHidden,\n                        quantity: quantity,\n                        // weight: weight,\n                        fontSize: fontSize,\n                    },\n                    isHidden: isResultHidden,\n                    quantity: quantity,\n                    // weight: weight,\n                    fontSize: fontSize,\n                });\n            }\n\n            /*\n            // TODO ???\n            setProperty(itemData, \"permission.default\", CONST.DOCUMENT_PERMISSION_LEVELS.OBSERVER);\n            let newItem = await Item.create(itemData);\n            */\n        }\n    }\n\n    async renderMessage(data) {\n        return renderTemplate(`modules/${CONSTANTS.MODULE_ID}/templates/card/harvest-chat-card.hbs`, data);\n    }\n\n    async getBRTFolder() {\n        if (!this.historyFolder) {\n            let historyFolder = game.folders.getName(\"Better RollTable | Harvest Items\");\n            if (!historyFolder) {\n                historyFolder = await Folder.create({\n                    name: \"Better RollTable | Harvest Items\",\n                    parent: null,\n                    type: \"Item\",\n                });\n            }\n            this.historyFolder = historyFolder;\n        }\n        return this.historyFolder;\n    }\n\n    async prepareCharCart(table) {\n        // await this.findOrCreateItems();\n\n        const htmlDescription = await TextEditor.enrichHTML(table.description, {\n            async: true,\n            secrets: table.isOwner,\n            documents: true,\n        });\n\n        const rollHTML = null; // TODO ? table.displayRoll && this.roll ? await this.roll.render() : null;\n\n        let flavorString;\n        if (this.numberOfDraws > 1) {\n            flavorString = game.i18n.format(`${CONSTANTS.MODULE_ID}.DrawResultPlural`, {\n                amount: this.numberOfDraws,\n                name: table.name,\n            });\n        } else if (this.numberOfDraws > 0) {\n            flavorString = game.i18n.format(`${CONSTANTS.MODULE_ID}.DrawResultSingular`, {\n                amount: this.numberOfDraws,\n                name: table.name,\n            });\n        } else {\n            flavorString = game.i18n.format(`${CONSTANTS.MODULE_ID}.DrawResultZero`, {\n                name: table.name,\n            });\n        }\n\n        const chatCardData = {\n            rollHTML: rollHTML,\n            tableData: table,\n            htmlDescription: htmlDescription,\n            // gmTitleLabel: Logger.i18n(`${CONSTANTS.MODULE_ID}.label.tableTextGmTitleLabel`),\n            itemsData: this.itemsData,\n            compendium: table,\n            id: table.id,\n            users: game.users\n                .filter((user) => !user.isGM && user.character)\n                .map((user) => ({\n                    id: user.id,\n                    name: user.character.name,\n                    img: user.character.token?.img || user.avatar,\n                })),\n        };\n\n        const cardHtml = await this.renderMessage(chatCardData);\n\n        const chatData = {\n            flavor: flavorString,\n            sound: \"sounds/dice.wav\",\n            user: game.user._id,\n            content: cardHtml,\n            flags: {\n                [`${CONSTANTS.MODULE_ID}`]: {\n                    [`${CONSTANTS.FLAGS.HARVEST}`]: chatCardData,\n                },\n            },\n        };\n        return chatData;\n    }\n\n    async prepareCharCartGM(table) {\n        // await this.findOrCreateItems();\n\n        const htmlDescription = await TextEditor.enrichHTML(table.description, {\n            async: true,\n            secrets: table.isOwner,\n            documents: true,\n        });\n\n        const rollHTML = null; // TODO ? table.displayRoll && this.roll ? await this.roll.render() : null;\n\n        let flavorString;\n        if (this.numberOfDraws > 1) {\n            flavorString = game.i18n.format(`${CONSTANTS.MODULE_ID}.DrawResultPlural`, {\n                amount: this.numberOfDraws,\n                name: table.name,\n            });\n        } else if (this.numberOfDraws > 0) {\n            flavorString = game.i18n.format(`${CONSTANTS.MODULE_ID}.DrawResultSingular`, {\n                amount: this.numberOfDraws,\n                name: table.name,\n            });\n        } else {\n            flavorString = game.i18n.format(`${CONSTANTS.MODULE_ID}.DrawResultZero`, {\n                name: table.name,\n            });\n        }\n\n        const chatCardData = {\n            rollHTML: rollHTML,\n            tableData: table,\n            htmlDescription: htmlDescription,\n            gmTitleLabel: Logger.i18n(`${CONSTANTS.MODULE_ID}.label.tableTextGmTitleLabel`),\n            itemsData: this.itemsDataGM,\n            compendium: table,\n            id: table.id,\n            users: game.users\n                .filter((user) => user.isGM && user.character)\n                .map((user) => ({\n                    id: user.id,\n                    name: user.character.name,\n                    img: user.character.token?.img || user.avatar,\n                })),\n        };\n\n        const cardHtml = await this.renderMessage(chatCardData);\n\n        const chatData = {\n            flavor: flavorString,\n            sound: \"sounds/dice.wav\",\n            user: game.user._id,\n            content: cardHtml,\n            flags: {\n                [`${CONSTANTS.MODULE_ID}`]: {\n                    [`${CONSTANTS.FLAGS.HARVEST}`]: chatCardData,\n                },\n            },\n        };\n        return chatData;\n    }\n\n    async createChatCard(table) {\n        if (!game.user.isGM) {\n            if (this.atLeastOneRollIsHidden || this.rollMode === \"gmroll\") {\n                await betterRolltablesSocket.executeAsGM(\n                    \"invokeGenericChatCardCreateArr\",\n                    table.uuid,\n                    this.betterResults,\n                    this.rollMode,\n                    this.roll,\n                    false,\n                    CONSTANTS.TABLE_TYPE_HARVEST,\n                );\n            } else {\n                await this.findOrCreateItems();\n                const chatData = await this.prepareCharCart(table);\n                BRTUtils.addRollModeToChatData(chatData, this.rollMode);\n                ChatMessage.create(chatData);\n            }\n        } else {\n            // IF IS GM\n            const isShowHiddenResultOnChat = getProperty(\n                table,\n                `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_SHOW_HIDDEN_RESULT_ON_CHAT}`,\n            );\n            await this.findOrCreateItems();\n\n            if (this.itemsData?.length > 0) {\n                const chatData = await this.prepareCharCart(table);\n                if (!isShowHiddenResultOnChat) {\n                    BRTUtils.addRollModeToChatData(chatData, this.rollMode);\n                }\n                ChatMessage.create(chatData);\n            }\n\n            if (this.atLeastOneRollIsHidden) {\n                const chatDataGM = await this.prepareCharCartGM(table);\n                BRTUtils.addRollModeToChatData(chatDataGM, \"gmroll\");\n                ChatMessage.create(chatDataGM);\n            }\n        }\n    }\n}\n","import API from \"./API.js\";\nimport { CONSTANTS } from \"./constants/constants.js\";\n\nexport let betterRolltablesSocket;\nexport function registerSocket() {\n    //Logger.debug(\"Registered betterRolltablesSocket\");\n    if (betterRolltablesSocket) {\n        return betterRolltablesSocket;\n    }\n\n    betterRolltablesSocket = socketlib.registerModule(CONSTANTS.MODULE_ID);\n    /**\n     * Automated EvocationsVariant sockets\n     */\n    betterRolltablesSocket.register(\"invokeGenericChatCardCreateArr\", (...args) =>\n        API.invokeGenericChatCardCreateArr(...args),\n    );\n    // betterRolltablesSocket.register(\"invokeBetterChatCardCreateArr\", (...args) =>\n    //   API.invokeBetterChatCardCreateArr(...args)\n    // );\n    // betterRolltablesSocket.register(\"invokeLootChatCardCreateArr\", (...args) => API.invokeLootChatCardCreateArr(...args));\n    // betterRolltablesSocket.register(\"invokeStoryChatCardCreateArr\", (...args) =>\n    //   API.invokeStoryChatCardCreateArr(...args)\n    // );\n    // betterRolltablesSocket.register(\"invokeHarvestChatCardCreateArr\", (...args) =>\n    //   API.invokeHarvestChatCardCreateArr(...args)\n    // );\n    betterRolltablesSocket.register(\"invokeBetterTableRollArr\", (...args) => API.invokeBetterTableRollArr(...args));\n\n    // Basic\n    game.modules.get(CONSTANTS.MODULE_ID).socket = betterRolltablesSocket;\n    return betterRolltablesSocket;\n}\n","import { CONSTANTS } from \"../../constants/constants.js\";\nimport { BRTUtils } from \"../../core/utils.js\";\nimport { BRTBetterHelpers } from \"./brt-helper.js\";\nimport { RollTableToActorHelpers } from \"../../apps/rolltable-to-actor/rolltable-to-actor-helpers.js\";\nimport { betterRolltablesSocket } from \"../../socket.js\";\nimport Logger from \"../../lib/Logger.js\";\nimport ItemPilesHelpers from \"../../lib/item-piles-helpers.js\";\nimport { getRollMode } from \"../../lib/lib.js\";\n\n/**\n * create a chat card based on the content of the object LootData\n */\nexport class BetterChatCard {\n    /**\n     * @param {object} betterResults\n     */\n    constructor(betterResults, rollMode, roll) {\n        this.betterResults = betterResults;\n        this.rollMode = getRollMode(rollMode);\n        this.roll = roll;\n        this.itemsData = [];\n        this.itemsDataGM = [];\n        this.numberOfDraws = 0;\n        this.atLeastOneRollIsHidden = false;\n        for (const result of this.betterResults) {\n            if (getProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_HIDDEN_TABLE}`)) {\n                this.atLeastOneRollIsHidden = true;\n                break;\n            }\n        }\n    }\n\n    async findOrCreateItems() {\n        // we will scale down the font size if an item name is too long\n        // TODO transfer this property on the better result data ?\n        for (const result of ItemPilesHelpers.stackTableResults(this.betterResults)) {\n            this.numberOfDraws++;\n            const quantity = result.quantity || 1;\n            let type = undefined;\n            if (result.isText || result.type === CONST.TABLE_RESULT_TYPES.TEXT) {\n                type = CONST.TABLE_RESULT_TYPES.TEXT;\n            } else if (result.pack || result.type === CONST.TABLE_RESULT_TYPES.COMPENDIUM) {\n                type = CONST.TABLE_RESULT_TYPES.COMPENDIUM;\n            } else if (result.documentCollection || result.type === CONST.TABLE_RESULT_TYPES.DOCUMENT) {\n                type = CONST.TABLE_RESULT_TYPES.DOCUMENT;\n            } else {\n                throw Logger.error(`No vaid type is been found for this result`, true, result);\n            }\n\n            let customResultNameHidden = undefined;\n            let customResultImgHidden = undefined;\n\n            let customResultName = undefined;\n            if (hasProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_NAME}`)) {\n                customResultName =\n                    getProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_NAME}`) ||\n                    \"\";\n            }\n\n            let customResultImg = undefined;\n            if (hasProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON}`)) {\n                customResultImg =\n                    getProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON}`) ||\n                    \"\";\n            }\n            let isResultHidden = false;\n            if (hasProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_HIDDEN_TABLE}`)) {\n                // if (\n                //     !getProperty(\n                //         result,\n                //         `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_SHOW_HIDDEN_RESULT_ON_CHAT}`,\n                //     )\n                // ) {\n                //     continue;\n                // }\n                // customResultNameHidden = CONSTANTS.DEFAULT_HIDDEN_RESULT_TEXT;\n                // customResultImgHidden = CONSTANTS.DEFAULT_HIDDEN_RESULT_IMAGE;\n                isResultHidden =\n                    getProperty(\n                        result,\n                        `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_HIDDEN_TABLE}`,\n                    ) || false;\n            }\n            const entityUuid = getProperty(\n                result,\n                `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_UUID}`,\n            );\n            let itemEntity = await fromUuid(entityUuid);\n\n            const fontSize = itemEntity\n                ? Math.max(60, 100 - Math.max(0, (customResultName || itemEntity.name || result.text).length - 27) * 2)\n                : Math.max(60, 100 - Math.max(0, (result.name || result.text).length - 27) * 2);\n\n            if (result.type === CONST.TABLE_RESULT_TYPES.TEXT || !itemEntity) {\n                Logger.debug(`Cannot find document with '${entityUuid}'`);\n                this.itemsDataGM.push({\n                    id: result.text,\n                    text: customResultName ?? result.text ?? result.name,\n                    img: customResultImg ?? result.icon ?? result.img ?? result.src ?? `icons/svg/d20-highlight.svg`,\n                    isText: true,\n                    documentName: result.documentName,\n                    compendiumName: result.pack,\n                    type: type,\n                    item: {\n                        id: result.id,\n                        _id: result.id,\n                        name: customResultName ?? result.text ?? result.name,\n                        img:\n                            customResultImg ?? result.icon ?? result.img ?? result.src ?? `icons/svg/d20-highlight.svg`,\n                        text: customResultName ?? result.text ?? result.name,\n                        uuid: \"\",\n                        isHidden: false,\n                        quantity: quantity,\n                        // weight: weight,\n                        fontSize: fontSize,\n                    },\n                    isHidden: false,\n                    quantity: quantity,\n                    // weight: weight,\n                    fontSize: fontSize,\n                });\n                if (\n                    !getProperty(\n                        result,\n                        `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_SHOW_HIDDEN_RESULT_ON_CHAT}`,\n                    ) &&\n                    getProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_HIDDEN_TABLE}`)\n                ) {\n                    continue;\n                }\n                if (isResultHidden) {\n                    this.itemsData.push({\n                        id: result.text,\n                        text: customResultNameHidden ?? result.text ?? result.name,\n                        img:\n                            customResultImgHidden ??\n                            result.icon ??\n                            result.img ??\n                            result.src ??\n                            `icons/svg/d20-highlight.svg`,\n                        isText: true,\n                        documentName: result.documentName,\n                        compendiumName: result.pack,\n                        type: type,\n                        item: {\n                            id: result.id,\n                            _id: result.id,\n                            name: customResultNameHidden ?? result.text ?? result.name,\n                            img:\n                                customResultImgHidden ??\n                                result.icon ??\n                                result.img ??\n                                result.src ??\n                                `icons/svg/d20-highlight.svg`,\n                            text: customResultNameHidden ?? result.text ?? result.name,\n                            uuid: \"\",\n                            isHidden: isResultHidden,\n                            quantity: quantity,\n                            // weight: weight,\n                            fontSize: fontSize,\n                        },\n                        isHidden: isResultHidden,\n                        quantity: quantity,\n                        // weight: weight,\n                        fontSize: fontSize,\n                    });\n                } else {\n                    this.itemsData.push({\n                        id: result.text,\n                        text: customResultName ?? result.text ?? result.name,\n                        img:\n                            customResultImg ?? result.icon ?? result.img ?? result.src ?? `icons/svg/d20-highlight.svg`,\n                        isText: true,\n                        documentName: result.documentName,\n                        compendiumName: result.pack,\n                        type: type,\n                        item: {\n                            id: result.id,\n                            _id: result.id,\n                            name: customResultName ?? result.text ?? result.name,\n                            img:\n                                customResultImg ??\n                                result.icon ??\n                                result.img ??\n                                result.src ??\n                                `icons/svg/d20-highlight.svg`,\n                            text: customResultName ?? result.text ?? result.name,\n                            uuid: \"\",\n                            isHidden: isResultHidden,\n                            quantity: quantity,\n                            // weight: weight,\n                            fontSize: fontSize,\n                        },\n                        isHidden: isResultHidden,\n                        quantity: quantity,\n                        // weight: weight,\n                        fontSize: fontSize,\n                    });\n                }\n\n                continue;\n            }\n\n            const itemFolder = await this.getBRTFolder();\n            if (itemFolder) {\n                itemEntity.folder = itemFolder.id;\n            } else {\n                Logger.debug(`No folder tables found with name 'Better RollTable | Better Items'`);\n            }\n\n            if (customResultName && customResultName !== itemEntity.name) {\n                setProperty(itemEntity, `name`, customResultName);\n            }\n            if (customResultImg && customResultImg !== itemEntity.img) {\n                setProperty(itemEntity, `img`, customResultImg);\n            }\n\n            let isJournal = itemEntity instanceof JournalEntry;\n            let docJournalPageUuid = getProperty(\n                result,\n                `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_JOURNAL_PAGE_UUID}`,\n            );\n            if (isJournal && docJournalPageUuid) {\n                itemEntity = await fromUuid(docJournalPageUuid);\n            }\n            this.itemsDataGM.push({\n                id: result.text,\n                text: customResultName ?? result.text ?? result.name,\n                img: customResultImg ?? result.icon ?? result.img ?? result.src ?? `icons/svg/d20-highlight.svg`,\n                isText: false,\n                documentName: itemEntity.documentName,\n                compendiumName: itemEntity.pack,\n                type: type,\n                item: {\n                    id: itemEntity.id,\n                    _id: itemEntity.id,\n                    name: itemEntity.name,\n                    img: itemEntity.img ?? itemEntity.src ?? `icons/svg/d20-highlight.svg`,\n                    text: itemEntity.text ?? itemEntity.name ?? \"\",\n                    uuid: itemEntity?.uuid ?? \"\",\n                    isHidden: false,\n                    quantity: quantity,\n                    // weight: weight,\n                    fontSize: fontSize,\n                },\n                isHidden: false,\n                quantity: quantity,\n                // weight: weight,\n                fontSize: fontSize,\n            });\n\n            if (isResultHidden) {\n                if (\n                    !getProperty(\n                        result,\n                        `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_SHOW_HIDDEN_RESULT_ON_CHAT}`,\n                    )\n                ) {\n                    continue;\n                }\n            }\n\n            if (customResultNameHidden && customResultNameHidden !== itemEntity.name) {\n                setProperty(itemEntity, `name`, customResultNameHidden);\n            }\n            if (customResultImgHidden && customResultImgHidden !== itemEntity.img) {\n                setProperty(itemEntity, `img`, customResultImgHidden);\n            }\n            setProperty(\n                itemEntity,\n                `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_HIDDEN_TABLE}`,\n                isResultHidden,\n            );\n\n            if (isResultHidden) {\n                this.itemsData.push({\n                    id: result.text,\n                    text: customResultNameHidden ?? result.text ?? result.name,\n                    img:\n                        customResultImgHidden ??\n                        result.icon ??\n                        result.img ??\n                        result.src ??\n                        `icons/svg/d20-highlight.svg`,\n                    isText: false,\n                    documentName: itemEntity.documentName,\n                    compendiumName: itemEntity.pack,\n                    type: type,\n                    item: {\n                        id: itemEntity.id,\n                        _id: itemEntity.id,\n                        name: itemEntity.name,\n                        img: itemEntity.img ?? itemEntity.src ?? `icons/svg/d20-highlight.svg`,\n                        text: itemEntity.text ?? itemEntity.name ?? \"\",\n                        uuid: itemEntity?.uuid ?? \"\",\n                        isHidden: isResultHidden,\n                        quantity: quantity,\n                        // weight: weight,\n                        fontSize: fontSize,\n                    },\n                    isHidden: isResultHidden,\n                    quantity: quantity,\n                    // weight: weight,\n                    fontSize: fontSize,\n                });\n            } else {\n                this.itemsData.push({\n                    id: result.text,\n                    text: customResultName ?? result.text ?? result.name,\n                    img: customResultImg ?? result.icon ?? result.img ?? result.src ?? `icons/svg/d20-highlight.svg`,\n                    isText: false,\n                    documentName: itemEntity.documentName,\n                    compendiumName: itemEntity.pack,\n                    type: type,\n                    item: {\n                        id: itemEntity.id,\n                        _id: itemEntity.id,\n                        name: itemEntity.name,\n                        img: itemEntity.img ?? itemEntity.src ?? `icons/svg/d20-highlight.svg`,\n                        text: itemEntity.text ?? itemEntity.name ?? \"\",\n                        uuid: itemEntity?.uuid ?? \"\",\n                        isHidden: isResultHidden,\n                        quantity: quantity,\n                        // weight: weight,\n                        fontSize: fontSize,\n                    },\n                    isHidden: isResultHidden,\n                    quantity: quantity,\n                    // weight: weight,\n                    fontSize: fontSize,\n                });\n            }\n\n            /*\n            // TODO ???\n            setProperty(itemData, \"permission.default\", CONST.DOCUMENT_PERMISSION_LEVELS.OBSERVER);\n            let newItem = await Item.create(itemData);\n            */\n        }\n    }\n\n    async renderMessage(data) {\n        return renderTemplate(`modules/${CONSTANTS.MODULE_ID}/templates/card/better-chat-card.hbs`, data);\n    }\n\n    async getBRTFolder() {\n        if (!this.historyFolder) {\n            let historyFolder = game.folders.getName(\"Better RollTable | Better Items\");\n            if (!historyFolder) {\n                historyFolder = await Folder.create({\n                    name: \"Better RollTable | Better Items\",\n                    parent: null,\n                    type: \"Item\",\n                });\n            }\n            this.historyFolder = historyFolder;\n        }\n        return this.historyFolder;\n    }\n\n    async prepareCharCart(table) {\n        // await this.findOrCreateItems();\n\n        const htmlDescription = await TextEditor.enrichHTML(table.description, {\n            async: true,\n            secrets: table.isOwner,\n            documents: true,\n        });\n\n        const rollHTML = null; // TODO ? table.displayRoll && this.roll ? await this.roll.render() : null;\n\n        let flavorString;\n        if (this.numberOfDraws > 1) {\n            flavorString = game.i18n.format(`${CONSTANTS.MODULE_ID}.DrawResultPlural`, {\n                amount: this.numberOfDraws,\n                name: table.name,\n            });\n        } else if (this.numberOfDraws > 0) {\n            flavorString = game.i18n.format(`${CONSTANTS.MODULE_ID}.DrawResultSingular`, {\n                amount: this.numberOfDraws,\n                name: table.name,\n            });\n        } else {\n            flavorString = game.i18n.format(`${CONSTANTS.MODULE_ID}.DrawResultZero`, {\n                name: table.name,\n            });\n        }\n\n        const chatCardData = {\n            rollHTML: rollHTML,\n            tableData: table,\n            htmlDescription: htmlDescription,\n            // gmTitleLabel: Logger.i18n(`${CONSTANTS.MODULE_ID}.label.tableTextGmTitleLabel`),\n            itemsData: this.itemsData,\n            compendium: table.pack,\n            id: table.id,\n            users: game.users\n                .filter((user) => !user.isGM && user.character)\n                .map((user) => ({\n                    id: user.id,\n                    name: user.character.name,\n                    img: user.character.token?.img || user.avatar,\n                })),\n        };\n\n        const cardHtml = await this.renderMessage(chatCardData);\n\n        const chatData = {\n            flavor: flavorString,\n            sound: \"sounds/dice.wav\",\n            user: game.user._id,\n            content: cardHtml,\n            flags: {\n                [`${CONSTANTS.MODULE_ID}`]: {\n                    [`${CONSTANTS.FLAGS.BETTER}`]: chatCardData,\n                },\n            },\n        };\n        return chatData;\n    }\n\n    async prepareCharCartGM(table) {\n        // await this.findOrCreateItems();\n\n        const htmlDescription = await TextEditor.enrichHTML(table.description, {\n            async: true,\n            secrets: table.isOwner,\n            documents: true,\n        });\n\n        const rollHTML = null; // TODO ? table.displayRoll && this.roll ? await this.roll.render() : null;\n\n        let flavorString;\n        if (this.numberOfDraws > 1) {\n            flavorString = game.i18n.format(`${CONSTANTS.MODULE_ID}.DrawResultPlural`, {\n                amount: this.numberOfDraws,\n                name: table.name,\n            });\n        } else if (this.numberOfDraws > 0) {\n            flavorString = game.i18n.format(`${CONSTANTS.MODULE_ID}.DrawResultSingular`, {\n                amount: this.numberOfDraws,\n                name: table.name,\n            });\n        } else {\n            flavorString = game.i18n.format(`${CONSTANTS.MODULE_ID}.DrawResultZero`, {\n                name: table.name,\n            });\n        }\n\n        const chatCardData = {\n            rollHTML: rollHTML,\n            tableData: table,\n            htmlDescription: htmlDescription,\n            gmTitleLabel: Logger.i18n(`${CONSTANTS.MODULE_ID}.label.tableTextGmTitleLabel`),\n            itemsData: this.itemsDataGM,\n            compendium: table.pack,\n            id: table.id,\n            users: game.users\n                .filter((user) => user.isGM && user.character)\n                .map((user) => ({\n                    id: user.id,\n                    name: user.character.name,\n                    img: user.character.token?.img || user.avatar,\n                })),\n        };\n\n        const cardHtml = await this.renderMessage(chatCardData);\n\n        const chatData = {\n            flavor: flavorString,\n            sound: \"sounds/dice.wav\",\n            user: game.user._id,\n            content: cardHtml,\n            flags: {\n                [`${CONSTANTS.MODULE_ID}`]: {\n                    [`${CONSTANTS.FLAGS.BETTER}`]: chatCardData,\n                },\n            },\n        };\n        return chatData;\n    }\n\n    async createChatCard(table) {\n        if (!game.user.isGM) {\n            if (this.atLeastOneRollIsHidden || this.rollMode === \"gmroll\") {\n                await betterRolltablesSocket.executeAsGM(\n                    \"invokeGenericChatCardCreateArr\",\n                    table.uuid,\n                    this.betterResults,\n                    this.rollMode,\n                    this.roll,\n                    false,\n                    CONSTANTS.TABLE_TYPE_BETTER,\n                );\n            } else {\n                await this.findOrCreateItems();\n                const chatData = await this.prepareCharCart(table);\n                BRTUtils.addRollModeToChatData(chatData, this.rollMode);\n                ChatMessage.create(chatData);\n            }\n        } else {\n            // IF IS GM\n            const isShowHiddenResultOnChat = getProperty(\n                table,\n                `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_SHOW_HIDDEN_RESULT_ON_CHAT}`,\n            );\n            await this.findOrCreateItems();\n\n            if (this.itemsData?.length > 0) {\n                const chatData = await this.prepareCharCart(table);\n                if (!isShowHiddenResultOnChat) {\n                    BRTUtils.addRollModeToChatData(chatData, this.rollMode);\n                }\n                ChatMessage.create(chatData);\n            }\n\n            if (this.atLeastOneRollIsHidden) {\n                const chatDataGM = await this.prepareCharCartGM(table);\n                BRTUtils.addRollModeToChatData(chatDataGM, \"gmroll\");\n                ChatMessage.create(chatDataGM);\n            }\n        }\n    }\n}\n","import { RollTableToActorHelpers } from \"../../apps/rolltable-to-actor/rolltable-to-actor-helpers\";\nimport { CONSTANTS } from \"../../constants/constants\";\nimport { BRTBetterHelpers } from \"../better/brt-helper\";\nimport { BetterResults } from \"../../core/brt-table-results\";\nimport { HarvestChatCard } from \"./harvest-chat-card\";\nimport { BRTUtils } from \"../../core/utils\";\nimport { BetterRollTable } from \"../../core/brt-table\";\nimport SETTINGS from \"../../constants/settings\";\nimport Logger from \"../../lib/Logger\";\nimport ItemPilesHelpers from \"../../lib/item-piles-helpers\";\nimport {\n    isRealBoolean,\n    isRealNumber,\n    parseAsArray,\n    tryToConvertToNumber,\n    tryToConvertToNumberSync,\n} from \"../../lib/lib\";\nimport { RetrieveHelpers } from \"../../lib/retrieve-helpers\";\n\nexport class BRTHarvestHelpers {\n    /**\n     * Roll a table an add the resulting harvest to a given token.\n     *\n     * @param {RollTable} tableEntity\n     * @param {TokenDocument} token\n     * @param {options} object\n     * @returns\n     */\n    static async addHarvestToSelectedToken(tableEntity, token = null, options = {}) {\n        let tokenstack = [];\n        if (null == token && canvas.tokens.controlled.length === 0) {\n            return Logger.error(\"Please select a token first\");\n        } else {\n            tokenstack = token ? (token.constructor === Array ? token : [token]) : canvas.tokens.controlled;\n        }\n        Logger.info(\"Harvest generation started.\");\n\n        const brtTable = new BetterRollTable(tableEntity, options);\n        await brtTable.initialize();\n\n        for (const token of tokenstack) {\n            Logger.info(`Harvest generation started on token '${token.name}'`, true);\n            /*\n            await ItemPilesHelpers.populateActorOrTokenViaTable(token, tableEntity, options);\n\n            const currencyString = tableEntity.getFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.LOOT_CURRENCY_STRING_KEY);\n            const currencyData = ItemPilesHelpers.generateCurrenciesStringFromString(currencyString);\n            await ItemPilesHelpers.addCurrencies(token, currencyData);\n            */\n\n            const resultsBrt = await brtTable.betterRoll();\n            const rollMode = brtTable.rollMode;\n            const roll = brtTable.mainRoll;\n\n            const results = resultsBrt?.results;\n            const br = new BetterResults(\n                tableEntity,\n                results,\n                options?.stackResultsWithBRTLogic,\n                options?.rollAsTableType,\n            );\n            const betterResults = await br.buildResults();\n\n            await ItemPilesHelpers.populateActorOrTokenViaTableResults(token, results);\n\n            Logger.info(`Harvest generation ended on token '${token.name}'`, true);\n\n            if (isRealBoolean(options.displayChat)) {\n                if (!options.displayChat) {\n                    continue;\n                }\n            }\n\n            const harvestChatCard = new HarvestChatCard(betterResults, rollMode, roll);\n            await harvestChatCard.createChatCard(tableEntity);\n        }\n        Logger.info(\"Harvest generation complete.\");\n        return;\n    }\n\n    /**\n     *\n     * @param {*} tableEntity\n     */\n    static async generateHarvest(tableEntity, options = {}) {\n        const brtTable = new BetterRollTable(tableEntity, options);\n        await brtTable.initialize();\n\n        const resultsBrt = await brtTable.betterRoll();\n\n        const isTokenActor = brtTable.options?.isTokenActor;\n        const stackSame = brtTable.options?.stackSame;\n        const itemLimit = brtTable.options?.itemLimit;\n\n        const rollMode = brtTable.rollMode;\n        const roll = brtTable.mainRoll;\n\n        const results = resultsBrt?.results;\n        const br = new BetterResults(tableEntity, results, options?.stackResultsWithBRTLogic, options?.rollAsTableType);\n        const betterResults = await br.buildResults();\n\n        const actor = await BRTHarvestHelpers.createActor(tableEntity);\n        // await RollTableToActorHelpers.addItemsToActorOld(actor, betterResults, stackSame, itemLimit);\n        await ItemPilesHelpers.populateActorOrTokenViaTableResults(actor, results);\n\n        // if (game.settings.get(CONSTANTS.MODULE_ID, CONSTANTS.ALWAYS_SHOW_GENERATED_HARVEST_AS_MESSAGE)) {\n        if (isRealBoolean(options.displayChat)) {\n            if (!options.displayChat) {\n                return;\n            }\n        }\n\n        const harvestChatCard = new HarvestChatCard(betterResults, rollMode, roll);\n        await harvestChatCard.createChatCard(tableEntity);\n        // }\n    }\n\n    static async generateChatHarvest(tableEntity, options = {}) {\n        const brtTable = new BetterRollTable(tableEntity, options);\n        await brtTable.initialize();\n        const resultsBrt = await brtTable.betterRoll();\n\n        const rollMode = brtTable.rollMode;\n        const roll = brtTable.mainRoll;\n        const results = resultsBrt?.results;\n\n        const br = new BetterResults(tableEntity, results, options?.stackResultsWithBRTLogic, options?.rollAsTableType);\n        const betterResults = await br.buildResults();\n\n        const harvestChatCard = new HarvestChatCard(betterResults, rollMode, roll);\n\n        await harvestChatCard.createChatCard(tableEntity);\n    }\n\n    static async createActor(table, overrideName = undefined) {\n        const actorName = overrideName || table.getFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.HARVEST_ACTOR_NAME_KEY);\n        let actor = game.actors.getName(actorName);\n        if (!actor) {\n            actor = await Actor.create({\n                name: actorName || \"New Harvest\",\n                type: game.itempiles.API.ACTOR_CLASS_TYPE, // game.settings.get(CONSTANTS.MODULE_ID, SETTINGS.DEFAULT_ACTOR_NPC_TYPE),\n                img: `modules/${CONSTANTS.MODULE_ID}/assets/artwork/chest.webp`,\n                sort: 12000,\n                token: { actorLink: true },\n            });\n        }\n\n        return actor;\n    }\n\n    /**\n     *\n     * @param {string} dynamicDcValue\n     * @param {number} dc\n     * @param {string} skill\n     * @returns {boolean}\n     */\n    static calculateDynamicDcSync(dynamicDcValue, dc, skill) {\n        if (!isRealNumber(dc) || parseInt(dc) <= 0) {\n            return false;\n        }\n        if (!skill) {\n            return false;\n        }\n        const mapDynamicDc = BRTHarvestHelpers.prepareMapDynamicDcSync(dynamicDcValue);\n        if (!mapDynamicDc.has(skill.trim())) {\n            return false;\n        }\n        if (mapDynamicDc.get(skill.trim()) <= parseInt(dc)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     *\n     * @param {string} dynamicDcValue\n     * @returns {Map<string,string>}\n     */\n    static prepareMapDynamicDcSync(dynamicDcValue) {\n        const dynamicDcValues = parseAsArray(dynamicDcValue);\n        const mapDynamicDc = new Map();\n        for (const entry of dynamicDcValues) {\n            if (!entry || !entry.includes(\"=\")) {\n                continue;\n            }\n            const ss = entry.split(\"=\");\n            const skillEntry = ss[0].trim();\n            const dcEntry = ss[1].trim();\n            mapDynamicDc.set(skillEntry, BRTBetterHelpers.tryRollSync(dcEntry));\n        }\n        return mapDynamicDc;\n    }\n\n    /**\n     *\n     * @param {string} dynamicDcValue\n     * @returns {string} A joiner string of value X=10,Y=20\n     */\n    static prepareValueDynamicDcSync(dynamicDcValue) {\n        const mapDynamicDc = BRTHarvestHelpers.prepareMapDynamicDcSync(dynamicDcValue);\n        let asStrings = [];\n        for (let [key, value] of mapDynamicDc.entries()) {\n            asStrings.push(`${key}=${value}`);\n        }\n        return asStrings.join(\",\").trim();\n    }\n\n    /**\n     * Utility method to retrieve the minimal dc value present on the table\n     * @param {RollTable|string|UUID} tableEntity\n     * @returns {Promise<number>} The minimal dc founded or 0 otherwise\n     */\n    static async retrieveMinDCOnTable(tableEntity) {\n        const table = await RetrieveHelpers.getRollTableAsync(tableEntity);\n        const dcs = [];\n        let results = table.results?.contents || [];\n\n        // const brtTypeToCheck = BRTUtils.retrieveBRTType(tableEntity);\n\n        const useDynamicDcOnTable = getProperty(\n            table,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HARVEST_USE_DYNAMIC_DC}`,\n        );\n        for (const r of results) {\n            if (\n                useDynamicDcOnTable\n                // && brtTypeToCheck === CONSTANTS.TABLE_TYPE_HARVEST\n            ) {\n                const dynamicDcValue = getProperty(\n                    r,\n                    `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HARVEST_RESULT_DYNAMIC_DC_VALUE}`,\n                );\n                if (dynamicDcValue) {\n                    const mapDynamicDc = BRTHarvestHelpers.prepareMapDynamicDcSync(dynamicDcValue);\n                    for (const dcValue of mapDynamicDc.values()) {\n                        dcs.push(await tryToConvertToNumber(dcValue));\n                    }\n                }\n            } else {\n                const dcValue = getProperty(r, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HARVEST_DC_VALUE_KEY}`);\n                dcs.push(await tryToConvertToNumber(dcValue));\n            }\n        }\n        const minimalDC = Math.min(...dcs);\n        return minimalDC;\n    }\n\n    /**\n     * Utility method to retrieve the minimal dc value present on the table\n     * @param {RollTable|string|UUID} tableEntity\n     * @returns {number} The minimal dc founded or 0 otherwise\n     */\n    static retrieveMinDCOnTableSync(tableEntity) {\n        const table = RetrieveHelpers.getRollTableSync(tableEntity);\n        const dcs = [];\n        let results = table.results?.contents || [];\n\n        // const brtTypeToCheck = BRTUtils.retrieveBRTType(tableEntity);\n\n        const useDynamicDcOnTable = getProperty(\n            table,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HARVEST_USE_DYNAMIC_DC}`,\n        );\n        for (const r of results) {\n            if (\n                useDynamicDcOnTable\n                // && brtTypeToCheck === CONSTANTS.TABLE_TYPE_HARVEST\n            ) {\n                const dynamicDcValue = getProperty(\n                    r,\n                    `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HARVEST_RESULT_DYNAMIC_DC_VALUE}`,\n                );\n                if (dynamicDcValue) {\n                    const mapDynamicDc = BRTHarvestHelpers.prepareMapDynamicDcSync(dynamicDcValue);\n                    for (const dcValue of mapDynamicDc.values()) {\n                        dcs.push(tryToConvertToNumberSync(dcValue));\n                    }\n                }\n            } else {\n                const dcValue = getProperty(r, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HARVEST_DC_VALUE_KEY}`);\n                dcs.push(tryToConvertToNumberSync(dcValue));\n            }\n        }\n        const minimalDC = Math.min(...dcs);\n        return minimalDC;\n    }\n}\n","import { CONSTANTS } from \"../constants/constants.js\";\nimport { isRealNumber, tryToConvertToNumber, tryToConvertToNumberSync } from \"../lib/lib.js\";\nimport { BRTBetterHelpers } from \"../tables/better/brt-helper.js\";\nimport { BRTUtils } from \"./utils.js\";\nimport { LootChatCard } from \"../tables/loot/loot-chat-card.js\";\nimport { StoryChatCard } from \"../tables/story/story-chat-card.js\";\nimport { HarvestChatCard } from \"../tables/harvest/harvest-chat-card.js\";\nimport { BetterChatCard } from \"../tables/better/brt-chat-card.js\";\nimport Logger from \"../lib/Logger.js\";\nimport { RetrieveHelpers } from \"../lib/retrieve-helpers.js\";\nimport { BRTHarvestHelpers } from \"../tables/harvest/harvest-helpers.js\";\n\nexport class BetterRollTable {\n    // extends RollTable {\n\n    get rollMode() {\n        return this.options.rollMode;\n    }\n\n    constructor(table, options) {\n        this.table = table;\n        this.options = mergeObject(\n            {\n                roll: null,\n                results: [],\n                recursive: true,\n                displayChat: false,\n                rollMode: null,\n                _depth: 0,\n            },\n            options,\n        );\n        this.mainRoll = undefined;\n        this.blackListForDistinct = [];\n        this.rollAsTableType = this.options.rollAsTableType\n            ? this.options.rollAsTableType\n            : this.table.getFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.TABLE_TYPE_KEY);\n        this.options.rollAsTableType = this.rollAsTableType;\n    }\n\n    async initialize() {\n        let optionsTmp = await BRTUtils.updateOptions(this.table, this.options);\n        this.options = mergeObject(\n            {\n                roll: null,\n                results: [],\n                recursive: true,\n                displayChat: false,\n                rollMode: null,\n                _depth: 0,\n            },\n            optionsTmp,\n        );\n        this.mainRoll = undefined;\n        this.tableUuid = this.table.uuid;\n        if (!this.tableUuid.startsWith(\"Compendium\")) {\n            if (this.options.resetTable) {\n                await this.table.reset();\n            }\n\n            if (this.options.normalizeTable) {\n                await this.table.update({\n                    results: this.table.results.map((result) => ({\n                        _id: result.id,\n                        weight: result.range[1] - (result.range[0] - 1),\n                    })),\n                });\n                await this.table.normalize();\n            }\n        }\n        this.rollAsTableType = this.options.rollAsTableType\n            ? this.options.rollAsTableType\n            : this.table.getFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.TABLE_TYPE_KEY);\n        this.options.rollAsTableType = this.rollAsTableType;\n    }\n\n    /* -------------------------------------------- */\n    /*  Methods                                     */\n    /* -------------------------------------------- */\n\n    /**\n     * Display a result drawn from a RollTable in the Chat Log along.\n     * Optionally also display the Roll which produced the result and configure aspects of the displayed messages.\n     *\n     * @param {TableResult[]} results         An Array of one or more TableResult Documents which were drawn and should\n     *                                        be displayed.\n     * @param {object} [options={}]           Additional options which modify message creation\n     * @param {Roll} [options.roll]                 An optional Roll instance which produced the drawn results\n     * @param {Object} [options.messageData={}]     Additional data which customizes the created messages\n     * @param {Object} [options.messageOptions={}]  Additional options which customize the created messages\n     */\n    async toMessage(results, { roll = null, messageData = {}, messageOptions = {} } = {}) {\n        const speaker = ChatMessage.getSpeaker();\n\n        // Construct chat data\n        const flavorKey = `TABLE.DrawFlavor${results.length > 1 ? \"Plural\" : \"\"}`;\n        messageData = foundry.utils.mergeObject(\n            {\n                flavor: game.i18n.format(flavorKey, { number: results.length, name: this.table.name }),\n                user: game.user.id,\n                speaker: speaker,\n                type: roll ? CONST.CHAT_MESSAGE_TYPES.ROLL : CONST.CHAT_MESSAGE_TYPES.OTHER,\n                roll: roll,\n                sound: roll ? CONFIG.sounds.dice : null,\n                flags: { \"core.RollTable\": this.table.id },\n            },\n            messageData,\n        );\n\n        // // Render the chat card which combines the dice roll with the drawn results\n        // // messageData.content = await renderTemplate(CONFIG.RollTable.resultTemplate, {\n        // messageData.content = await renderTemplate(`modules/${CONSTANTS.MODULE_ID}/templates/card/better-chat-card.hbs`, {\n        //   description: await TextEditor.enrichHTML(this.table.description, { documents: true, async: true }),\n        //   results: results.map((result) => {\n        //     const r = result.toObject(false);\n        //     r.text = result.getChatText();\n        //     r.icon = result.icon ?? result.img ?? result.src ?? `icons/svg/d20-highlight.svg`;\n        //     return r;\n        //   }),\n        //   rollHTML: this.table.displayRoll && roll ? await roll.render() : null,\n        //   table: this.table,\n        // });\n\n        // // Create the chat message\n        // return ChatMessage.implementation.create(messageData, messageOptions);\n        // const rollHTML = this.table.displayRoll && roll ? await roll.render() : null;\n        let betterResults = results.map((result) => {\n            if (result instanceof TableResult) {\n                const r = result.toObject(false);\n                r.text = result.getChatText();\n                r.icon = result.icon ?? result.img ?? result.src ?? `icons/svg/d20-highlight.svg`;\n                return r;\n            } else {\n                const r = result;\n                r.icon = result.icon ?? result.img ?? result.src ?? `icons/svg/d20-highlight.svg`;\n                return r;\n            }\n        });\n\n        if (this.rollAsTableType === CONSTANTS.TABLE_TYPE_BETTER) {\n            const betterChatCard = new BetterChatCard(betterResults, this.rollMode, roll);\n            await betterChatCard.createChatCard(this.table);\n        } else if (this.rollAsTableType === CONSTANTS.TABLE_TYPE_LOOT) {\n            const currencyData = br.getCurrencyData();\n            const lootChatCard = new LootChatCard(betterResults, currencyData, this.rollMode, roll);\n            await lootChatCard.createChatCard(this.table);\n        } else if (this.rollAsTableType === CONSTANTS.TABLE_TYPE_STORY) {\n            const storyChatCard = new StoryChatCard(betterResults, this.rollMode, roll);\n            await storyChatCard.createChatCard(this.table);\n        } else if (this.rollAsTableType === CONSTANTS.TABLE_TYPE_HARVEST) {\n            const harvestChatCard = new HarvestChatCard(betterResults, this.rollMode, roll);\n            await harvestChatCard.createChatCard(this.table);\n        } else {\n            // Render the chat card which combines the dice roll with the drawn results\n            messageData.content = await renderTemplate(CONFIG.RollTable.resultTemplate, {\n                // messageData.content = await renderTemplate(`modules/${CONSTANTS.MODULE_ID}/templates/card/better-chat-card.hbs`, {\n                description: await TextEditor.enrichHTML(this.table.description, { documents: true, async: true }),\n                results: results.map((result) => {\n                    if (result instanceof TableResult) {\n                        const r = result.toObject(false);\n                        r.text = result.getChatText();\n                        r.icon = result.icon ?? result.img ?? result.src ?? `icons/svg/d20-highlight.svg`;\n                        return r;\n                    } else {\n                        const r = result;\n                        r.icon = result.icon ?? result.img ?? result.src ?? `icons/svg/d20-highlight.svg`;\n                        return r;\n                    }\n                }),\n                rollHTML: this.table.displayRoll && roll ? await roll.render() : null,\n                table: this.table,\n            });\n\n            // Create the chat message\n            return ChatMessage.implementation.create(messageData, messageOptions);\n        }\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Draw a result from the RollTable based on the table formula or a provided Roll instance\n     * @param {object} [options={}]         Optional arguments which customize the draw behavior\n     * @param {Roll} [options.roll]                   An existing Roll instance to use for drawing from the table\n     * @param {boolean} [options.recursive=true]      Allow drawing recursively from inner RollTable results\n     * @param {TableResult[]} [options.results]       One or more table results which have been drawn\n     * @param {boolean} [options.displayChat=true]    Whether to automatically display the results in chat\n     * @param {string} [options.rollMode]             The chat roll mode to use when displaying the result\n     * @returns {Promise<{RollTableDraw}>}  A Promise which resolves to an object containing the executed roll and the\n     *                                      produced results.\n     */\n    async draw({ roll, recursive = true, results = [], displayChat = true, rollMode } = {}) {\n        const draw = await this.table.draw({ roll, recursive, results, displayChat: false, rollMode });\n\n        let newResults = [];\n        for (let i = 0; i < draw.results.length; i++) {\n            const r = draw.results[i];\n\n            let formulaAmount = \"\";\n            if (hasProperty(r, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_QUANTITY}`)) {\n                formulaAmount =\n                    getProperty(r, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_QUANTITY}`) ||\n                    \"\";\n            }\n            if (\n                !formulaAmount &&\n                getProperty(r, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.RESULTS_FORMULA_KEY_FORMULA}`)\n            ) {\n                formulaAmount =\n                    getProperty(r, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.RESULTS_FORMULA_KEY_FORMULA}`) || \"\";\n            }\n            if (r.type === CONST.TABLE_RESULT_TYPES.TEXT) {\n                formulaAmount = \"\";\n            }\n            const qtFormula = await BRTBetterHelpers.tryRoll(formulaAmount);\n\n            if (qtFormula == null || qtFormula === \"\" || qtFormula === \"1\") {\n                newResults.push(r);\n            } else {\n                const qtRoll = Roll.create(qtFormula);\n                const qt = (await qtRoll.evaluate({ async: true })).total;\n                Logger.log(qt);\n                newResults = newResults.concat(Array(qt).fill(r));\n            }\n        }\n        draw.results = newResults;\n\n        Logger.log(draw);\n\n        // Forward drawn results to create chat messages\n        if (displayChat) {\n            await this.toMessage(draw.results, {\n                roll: roll,\n                messageOptions: { rollMode },\n            });\n        }\n        Logger.log(`Draw results:`, false, draw.results);\n        return draw;\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Draw multiple results from a RollTable, constructing a final synthetic Roll as a dice pool of inner rolls.\n     * @param {number} number               The number of results to draw\n     * @param {object} [options={}]         Optional arguments which customize the draw\n     * @param {Roll} [options.roll]                   An optional pre-configured Roll instance which defines the dice roll to use\n     * @param {boolean} [options.recursive=true]      Allow drawing recursively from inner RollTable results\n     * @param {boolean} [options.displayChat=true]    Automatically display the drawn results in chat? Default is true\n     * @param {string} [options.rollMode]             Customize the roll mode used to display the drawn results\n     * @returns {Promise<{RollTableDraw}>}  The drawn results\n     */\n    async drawMany(number, { roll = null, recursive = true, displayChat = false, rollMode = null, _depth = 0 } = {}) {\n        let results = [];\n        let updates = [];\n        const rolls = [];\n\n        // Roll the requested number of times, marking results as drawn\n        for (let n = 0; n < number; n++) {\n            let draw = await this.roll({ roll, recursive, _depth });\n            if (draw.results.length) {\n                rolls.push(draw.roll);\n                results = results.concat(draw.results);\n            } else break;\n\n            // Mark results as drawn, if replacement is not used, and we are not in a Compendium pack\n            if (!this.table.replacement && !this.table.pack) {\n                updates = updates.concat(\n                    draw.results.map((r) => {\n                        r.drawn = true;\n                        return { _id: r.id, drawn: true };\n                    }),\n                );\n            }\n        }\n\n        // Construct a Roll object using the constructed pool\n        const pool = PoolTerm.fromRolls(rolls);\n        roll = Roll.defaultImplementation.fromTerms([pool]);\n\n        // Commit updates to child results\n        if (updates.length) {\n            await this.table.updateEmbeddedDocuments(\"TableResult\", updates, { diff: false });\n        }\n\n        // PATCH SET FLAG FOR HIDDEN RESULT\n        const isTableHidden = getProperty(this.table, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HIDDEN_TABLE}`);\n        const isShowHiddenResultOnChat = getProperty(\n            this.table,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_SHOW_HIDDEN_RESULT_ON_CHAT}`,\n        );\n        results.map((r) => {\n            if (\n                isTableHidden ||\n                String(\n                    getProperty(r, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_HIDDEN_TABLE}`),\n                ) === \"true\"\n            ) {\n                setProperty(r, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_HIDDEN_TABLE}`, true);\n            } else {\n                setProperty(r, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_HIDDEN_TABLE}`, false);\n            }\n            if (\n                isShowHiddenResultOnChat ||\n                String(\n                    getProperty(\n                        r,\n                        `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_SHOW_HIDDEN_RESULT_ON_CHAT}`,\n                    ),\n                ) === \"true\"\n            ) {\n                setProperty(\n                    r,\n                    `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_SHOW_HIDDEN_RESULT_ON_CHAT}`,\n                    true,\n                );\n            } else {\n                setProperty(\n                    r,\n                    `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_SHOW_HIDDEN_RESULT_ON_CHAT}`,\n                    false,\n                );\n            }\n            return r;\n        });\n\n        // Forward drawn results to create chat messages\n        if (displayChat && results.length) {\n            await this.toMessage(results, {\n                roll: roll,\n                messageOptions: { rollMode },\n            });\n        }\n\n        // Return the Roll and the array of results\n        return { roll, results };\n    }\n\n    /* -------------------------------------------- */\n\n    // /**\n    //  * Normalize the probabilities of rolling each item in the RollTable based on their assigned weights\n    //  * @returns {Promise<RollTable>}\n    //  */\n    // async normalize() {\n    //   let totalWeight = 0;\n    //   let counter = 1;\n    //   const updates = [];\n    //   for (let result of this.table.results) {\n    //     const w = result.weight ?? 1;\n    //     totalWeight += w;\n    //     updates.push({ _id: result.id, range: [counter, counter + w - 1] });\n    //     counter = counter + w;\n    //   }\n    //   return this.table.update({ results: updates, formula: `1d${totalWeight}` });\n    // }\n\n    /* -------------------------------------------- */\n\n    // /**\n    //  * Reset the state of the RollTable to return any drawn items to the table\n    //  * @returns {Promise<RollTable>}\n    //  */\n    // async resetResults() {\n    //   const updates = this.table.results.map((result) => ({ _id: result.id, drawn: false }));\n    //   return this.table.updateEmbeddedDocuments(\"TableResult\", updates, { diff: false });\n    // }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Evaluate a RollTable by rolling its formula and retrieving a drawn result.\n     *\n     * Note that this function only performs the roll and identifies the result, the RollTable#draw function should be\n     * called to formalize the draw from the table.\n     *\n     * @param {object} [options={}]       Options which modify rolling behavior\n     * @param {Roll} [options.roll]                   An alternative dice Roll to use instead of the default table formula\n     * @param {boolean} [options.recursive=true]   If a RollTable document is drawn as a result, recursively roll it\n     * @param {number} [options._depth]            An internal flag used to track recursion depth\n     * @returns {Promise<RollTableDraw>}  The Roll and results drawn by that Roll\n     *\n     * @example Draw results using the default table formula\n     * ```js\n     * const defaultResults = await table.roll();\n     * ```\n     *\n     * @example Draw results using a custom roll formula\n     * ```js\n     * const roll = new Roll(\"1d20 + @abilities.wis.mod\", actor.getRollData());\n     * const customResults = await table.roll({roll});\n     * ```\n     */\n    async roll({ roll, recursive = true, _depth = 0 } = {}) {\n        // Prevent excessive recursion\n        if (_depth > 5) {\n            throw Logger.error(\n                `Maximum recursion depth exceeded when attempting to draw from RollTable ${this.table.id}`,\n            );\n        }\n\n        // If there is no formula, automatically calculate an even distribution\n        if (!this.table.formula) {\n            await this.table.normalize();\n        }\n\n        // Reference the provided roll formula\n        // roll = roll instanceof Roll ? roll : Roll.create(this.table.formula);\n        let results = [];\n\n        // // Ensure that at least one non-drawn result remains\n        // const available = this.table.results.filter((r) => !r.drawn);\n        // if (!available.length) {\n        //   Logger.warn(game.i18n.localize(\"TABLE.NoAvailableResults\"), true);\n        //   return { roll, results };\n        // }\n\n        if (this.options.usePercentage) {\n            // Reference the provided roll formula\n            roll = Roll.create(`1d1000`);\n\n            // Ensure that at least one non-drawn result remains\n            let available = this.table.results.filter((r) => !r.drawn);\n            if (!available.length) {\n                Logger.warn(game.i18n.localize(\"TABLE.NoAvailableResults\"), true);\n                return { roll, results };\n            }\n\n            const useDynamicDcOnTable = getProperty(\n                this.table,\n                `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HARVEST_USE_DYNAMIC_DC}`,\n            );\n            if (useDynamicDcOnTable && this.options.rollAsTableType === CONSTANTS.TABLE_TYPE_HARVEST) {\n                const availableTmp = [];\n                for (const a of available) {\n                    const dynamicDcFormula = getProperty(\n                        a,\n                        `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HARVEST_RESULT_DYNAMIC_DC_VALUE}`,\n                    );\n                    if (dynamicDcFormula) {\n                        const dynamicDcValue = BRTHarvestHelpers.prepareValueDynamicDcSync(dynamicDcFormula);\n                        const brtAvailable = foundry.utils.deepClone(a);\n                        setProperty(\n                            brtAvailable,\n                            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HARVEST_RESULT_DYNAMIC_DC_VALUE}`,\n                            dynamicDcValue,\n                        );\n                        availableTmp.push(brtAvailable);\n                    } else {\n                        availableTmp.push(a);\n                    }\n                }\n                available = availableTmp;\n            }\n\n            // Ensure that results are available within the minimum/maximum range\n            const minRoll = 10;\n            const maxRoll = 1000;\n            const availableRange = available.reduce(\n                (range, result) => {\n                    const percentageValueLFlag =\n                        getProperty(\n                            result,\n                            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_PERCENTAGE_LOW_VALUE}`,\n                        ) ?? null;\n                    let percentageValueLTmp = isRealNumber(percentageValueLFlag) ? percentageValueLFlag : 0;\n                    percentageValueLTmp = percentageValueLTmp * 10;\n\n                    const percentageValueHFlag =\n                        getProperty(\n                            result,\n                            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_PERCENTAGE_HIGH_VALUE}`,\n                        ) ?? null;\n                    let percentageValueHTmp = isRealNumber(percentageValueHFlag) ? percentageValueHFlag : 100;\n                    percentageValueHTmp = percentageValueHTmp * 10;\n\n                    const r = [percentageValueLTmp, percentageValueHTmp];\n                    if (!range[0] || r[0] < range[0]) range[0] = r[0];\n                    if (!range[1] || r[1] > range[1]) range[1] = r[1];\n                    return range;\n                },\n                [null, null],\n            );\n            if (availableRange[0] > maxRoll || availableRange[1] < minRoll) {\n                // Logger.warn(\"No results can possibly be drawn from this table and formula.\", true);\n                return { roll, results };\n            }\n\n            roll = await roll.reroll({ async: true });\n            // results = this.getResultsForRoll(roll.total);\n            let resultsTmp = this.getResultsForRoll(roll.total);\n            if (resultsTmp?.length > 0) {\n                let resultTmp = resultsTmp[Math.floor(Math.random() * resultsTmp.length)];\n                results = [resultTmp];\n            }\n        } else {\n            if (this.options.roll) {\n                roll = this.options.roll instanceof Roll ? this.options.roll : Roll.create(this.options.roll);\n            }\n            // Reference the provided roll formula\n            roll = roll instanceof Roll ? roll : Roll.create(this.table.formula);\n\n            // Ensure that at least one non-drawn result remains\n            let available = this.table.results.filter((r) => !r.drawn);\n            if (!available.length) {\n                Logger.warn(game.i18n.localize(\"TABLE.NoAvailableResults\"), true);\n                return { roll, results };\n            }\n\n            const useDynamicDcOnTable = getProperty(\n                this.table,\n                `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HARVEST_USE_DYNAMIC_DC}`,\n            );\n            if (useDynamicDcOnTable && this.options.rollAsTableType === CONSTANTS.TABLE_TYPE_HARVEST) {\n                const availableTmp = [];\n                for (const a of available) {\n                    const dynamicDcFormula = getProperty(\n                        a,\n                        `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HARVEST_RESULT_DYNAMIC_DC_VALUE}`,\n                    );\n                    if (dynamicDcFormula) {\n                        const dynamicDcValue = BRTHarvestHelpers.prepareValueDynamicDcSync(dynamicDcFormula);\n                        const brtAvailable = foundry.utils.deepClone(a);\n                        setProperty(\n                            brtAvailable,\n                            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HARVEST_RESULT_DYNAMIC_DC_VALUE}`,\n                            dynamicDcValue,\n                        );\n                        availableTmp.push(brtAvailable);\n                    } else {\n                        availableTmp.push(a);\n                    }\n                }\n                available = availableTmp;\n            }\n\n            // Ensure that results are available within the minimum/maximum range\n            let minRoll = (await roll.reroll({ minimize: true, async: true })).total;\n            let maxRoll = (await roll.reroll({ maximize: true, async: true })).total;\n            let availableRange = available.reduce(\n                (range, result) => {\n                    const r = result.range;\n                    if (!range[0] || r[0] < range[0]) range[0] = r[0];\n                    if (!range[1] || r[1] > range[1]) range[1] = r[1];\n                    return range;\n                },\n                [null, null],\n            );\n            if (availableRange[0] > maxRoll || availableRange[1] < minRoll) {\n                if (game.settings.get(CONSTANTS.MODULE_ID, \"forceNormalizeIfNoResultAreDrawn\")) {\n                    await this.table.reset();\n                    await this.table.update({\n                        results: this.table.results.map((result) => ({\n                            _id: result.id,\n                            weight: result.range[1] - (result.range[0] - 1),\n                        })),\n                    });\n                    await this.table.normalize();\n                    roll = Roll.create(this.table.formula);\n                    minRoll = (await roll.reroll({ minimize: true, async: true })).total;\n                    maxRoll = (await roll.reroll({ maximize: true, async: true })).total;\n\n                    availableRange = await BRTBetterHelpers.retrieveAvailableRange(this.table);\n                    if (availableRange[0] > maxRoll || availableRange[1] < minRoll) {\n                        Logger.error(\n                            \"Sorry i tried everything ! No results can possibly be drawn from this table and formula.\",\n                            true,\n                            this.table,\n                        );\n                        return { roll, results };\n                    }\n                } else {\n                    Logger.warn(\"No results can possibly be drawn from this table and formula.\", true, this.table);\n                    return { roll, results };\n                }\n            }\n\n            // Continue rolling until one or more results are recovered\n            let iter = 0;\n            while (!results.length) {\n                if (iter >= 10000) {\n                    // START PATCH DISTINCT VALUES\n                    const isTableDistinct = getProperty(\n                        this.table,\n                        `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_DISTINCT_RESULT}`,\n                    );\n                    const isTableDistinctKeepRolling = getProperty(\n                        this.table,\n                        `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_DISTINCT_RESULT_KEEP_ROLLING}`,\n                    );\n                    if (isTableDistinct && !isTableDistinctKeepRolling) {\n                        // Failed to draw an available entry from Table ${this.table.name}, maximum iteration reached, but is ok because is under the 'distinct' behavior\n                    } else {\n                        Logger.error(\n                            `Failed to draw an available entry from Table ${this.table.name}, maximum iteration reached`,\n                            true,\n                        );\n                    }\n                    // END PATCH\n                    // Logger.error(\n                    //   `Failed to draw an available entry from Table ${this.table.name}, maximum iteration reached`, true\n                    // );\n                    break;\n                }\n                roll = await roll.reroll({ async: true });\n                results = this.getResultsForRoll(roll.total);\n                iter++;\n            }\n        }\n\n        // Draw results recursively from any inner Roll Tables\n        if (recursive) {\n            let inner = [];\n            for (let result of results) {\n                let formulaAmount = \"\";\n                if (\n                    hasProperty(\n                        result,\n                        `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_QUANTITY}`,\n                    )\n                ) {\n                    formulaAmount =\n                        getProperty(\n                            result,\n                            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_QUANTITY}`,\n                        ) || \"\";\n                }\n                if (\n                    !formulaAmount &&\n                    getProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.RESULTS_FORMULA_KEY_FORMULA}`)\n                ) {\n                    formulaAmount =\n                        getProperty(\n                            result,\n                            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.RESULTS_FORMULA_KEY_FORMULA}`,\n                        ) || \"\";\n                }\n\n                if (result.type === CONST.TABLE_RESULT_TYPES.TEXT) {\n                    formulaAmount = \"\";\n                }\n                const resultAmount = await BRTBetterHelpers.tryRoll(formulaAmount);\n\n                let pack;\n                let documentName;\n                if (result.type === CONST.TABLE_RESULT_TYPES.DOCUMENT) {\n                    documentName = result.documentCollection;\n                } else if (result.type === CONST.TABLE_RESULT_TYPES.COMPENDIUM) {\n                    pack = await RetrieveHelpers.getCompendiumCollectionAsync(result.documentCollection, false, false);\n                    documentName = pack?.documentName;\n                }\n                if (documentName === \"RollTable\") {\n                    const id = result.documentId;\n                    const innerTable = pack ? await pack.getDocument(id) : RetrieveHelpers.getRollTableSync(id, true);\n                    if (innerTable) {\n                        const innerOptions = this.options;\n                        innerOptions.rollAsTableType = this.options.rollAsTableTypeAllTheTables\n                            ? innerOptions.rollAsTableType\n                            : undefined; // ONLY THE FIRST LEVEL TABLE USE THIS RIGHT\n                        const brtInnerTable = new BetterRollTable(innerTable, innerOptions);\n                        await brtInnerTable.initialize();\n                        const innerRoll = await brtInnerTable.drawMany(resultAmount, {\n                            roll: formulaAmount,\n                            recursive: true,\n                            displayChat: false,\n                            rollMode: \"gmroll\",\n                            _depth: _depth + 1,\n                        });\n                        inner = inner.concat(innerRoll.results);\n                    }\n                } else {\n                    inner.push(result);\n                }\n            }\n            results = inner;\n        }\n\n        // Return the Roll and the results\n        return { roll, results };\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Get an Array of valid results for a given rolled total\n     * @param {number} value    The rolled value\n     * @returns {TableResult[]} An Array of results\n     */\n    getResultsForRoll(value) {\n        // return this.table.results.filter((r) => !r.drawn && Number.between(value, ...r.range));\n        let dc = tryToConvertToNumberSync(this.options.dc || undefined);\n        let skills = this.options.skills || undefined;\n\n        //  let resultsUpdate = this.table.results.filter((r) => !r.drawn && Number.between(value, ...r.range));\n        // START PATCH USE PERCENTAGE\n        let resultsUpdate = [];\n        if (this.options.usePercentage) {\n            resultsUpdate = this.table.results.filter((r) => {\n                const percentageValueLFlag =\n                    getProperty(\n                        r,\n                        `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_PERCENTAGE_LOW_VALUE}`,\n                    ) ?? null;\n                let percentageValueLTmp = isRealNumber(percentageValueLFlag) ? percentageValueLFlag : 0;\n                percentageValueLTmp = percentageValueLTmp * 10;\n\n                const percentageValueHFlag =\n                    getProperty(\n                        r,\n                        `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_PERCENTAGE_HIGH_VALUE}`,\n                    ) ?? null;\n                let percentageValueHTmp = isRealNumber(percentageValueHFlag) ? percentageValueHFlag : 100;\n                percentageValueHTmp = percentageValueHTmp * 10;\n                return !r.drawn && Number.between(value, percentageValueLTmp, percentageValueHTmp, true);\n            });\n        } else {\n            resultsUpdate = this.table.results.filter((r) => {\n                return !r.drawn && Number.between(value, ...r.range);\n            });\n        }\n\n        if (this.options.rollAsTableType === CONSTANTS.TABLE_TYPE_HARVEST) {\n            if (dc < BRTHarvestHelpers.retrieveMinDCOnTableSync(this.table)) {\n                // Logger.info(`The rolled DC '${dc}' is not enough for any result on the rollTable '${this.table.name}'`);\n                return [];\n            }\n\n            if (this.options.useDynamicDc) {\n                // Filter by dc\n                if (isRealNumber(dc) && parseInt(dc) > 0) {\n                    resultsUpdate = resultsUpdate.filter((r) => {\n                        return BRTHarvestHelpers.calculateDynamicDcSync(\n                            getProperty(\n                                r,\n                                `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HARVEST_RESULT_DYNAMIC_DC_VALUE}`,\n                            ),\n                            parseInt(dc),\n                            skill,\n                        );\n                    });\n                }\n            } else {\n                // Filter by dc\n                if (isRealNumber(dc) && parseInt(dc) > 0) {\n                    resultsUpdate = resultsUpdate.filter((r) => {\n                        return (\n                            getProperty(r, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HARVEST_DC_VALUE_KEY}`) <=\n                            parseInt(dc)\n                        );\n                    });\n                }\n                // Filter by skill\n                if (skills?.length > 0) {\n                    resultsUpdate = resultsUpdate.filter((r) => {\n                        return skills.includes(\n                            getProperty(r, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.HARVEST_SKILL_VALUE_KEY}`),\n                        );\n                    });\n                }\n            }\n        }\n\n        // START PATCH DISTINCT VALUES\n        const isTableDistinct = getProperty(\n            this.table,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_DISTINCT_RESULT}`,\n        );\n        const isTableDistinctKeepRolling = getProperty(\n            this.table,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_DISTINCT_RESULT_KEEP_ROLLING}`,\n        );\n\n        const available = this.table.results.filter((r) => !r.drawn);\n\n        if (isTableDistinct) {\n            resultsUpdate = resultsUpdate.filter((r) => {\n                const blackId = this.table.uuid + \"|\" + r.id;\n                if (this.blackListForDistinct.includes(blackId)) {\n                    if (this.blackListForDistinct.length >= available.length) {\n                        if (isTableDistinctKeepRolling) {\n                            return true;\n                        }\n                    }\n                    return false;\n                } else {\n                    this.blackListForDistinct.push(blackId);\n                    return true;\n                }\n            });\n        }\n        // END PATCH\n\n        return resultsUpdate;\n    }\n\n    /* -------------------------------------------- */\n    /*  Event Handlers                              */\n    /* -------------------------------------------- */\n\n    // /** @inheritdoc */\n    // _onCreateDescendantDocuments(parent, collection, documents, data, options, userId) {\n    //   this.table.table._onCreateDescendantDocuments(parent, collection, documents, data, options, userId);\n    //   if (options.render !== false) this.table.collection.render();\n    // }\n\n    /* -------------------------------------------- */\n\n    // /** @inheritdoc */\n    // _onDeleteDescendantDocuments(parent, collection, documents, ids, options, userId) {\n    //   this.table.table._onDeleteDescendantDocuments(parent, collection, documents, ids, options, userId);\n    //   if (options.render !== false) this.table.collection.render();\n    // }\n\n    /* -------------------------------------------- */\n    /*  Importing and Exporting                     */\n    /* -------------------------------------------- */\n\n    // /** @override */\n    // toCompendium(pack, options = {}) {\n    //   const data = this.table.toCompendium(pack, options);\n    //   if (options.clearState) {\n    //     for (let r of data.results) {\n    //       r.drawn = false;\n    //     }\n    //   }\n    //   return data;\n    // }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Create a new RollTable document using all of the Documents from a specific Folder as new results.\n     * @param {Folder} folder       The Folder document from which to create a roll table\n     * @param {object} options      Additional options passed to the RollTable.create method\n     * @returns {Promise<RollTable>}\n     */\n    static async fromFolder(folder, options = {}) {\n        const results = folder.contents.map((e, i) => {\n            return {\n                text: e.name,\n                type: folder.pack ? CONST.TABLE_RESULT_TYPES.COMPENDIUM : CONST.TABLE_RESULT_TYPES.DOCUMENT,\n                documentCollection: folder.pack ? folder.pack : folder.type,\n                documentId: e.id,\n                img: e.thumbnail || e.img,\n                weight: 1,\n                range: [i + 1, i + 1],\n                drawn: false,\n            };\n        });\n        options.renderSheet = options.renderSheet ?? true;\n        return this.create(\n            {\n                name: folder.name,\n                description: `A random table created from the contents of the ${folder.name} Folder.`,\n                results: results,\n                formula: `1d${results.length}`,\n            },\n            options,\n        );\n    }\n\n    /* -------------------------------------------- */\n    /*  Methods BRT                                   */\n    /* -------------------------------------------- */\n\n    /**\n     * @param {number} rollsAmount               The number of results to draw\n     *\n     * @returns {Promise<RollTableDraw>}  The Roll and results drawn by that Roll\n     */\n    async betterRoll(rollsAmount = null) {\n        const amount = rollsAmount\n            ? await BRTBetterHelpers.tryRoll(rollsAmount)\n            : this.options?.customRoll ?? this.options?.rollsAmount;\n\n        this.mainRoll = undefined;\n        // TODO add this setting to the API ??? (DONE ?)\n        const firstResults = {\n            roll: this.options.roll,\n            recursive: this.options.recursive,\n            displayChat: this.options.displayChat,\n            _depth: 0,\n        };\n        let resultsBrt = await this.rollManyOnTable(amount, firstResults);\n        // Patch add uuid to every each result for better module compatibility\n        let resultsTmp = [];\n        for (const r of resultsBrt?.results ?? []) {\n            let rTmp = r;\n            if (rTmp.type !== CONST.TABLE_RESULT_TYPES.TEXT) {\n                let rDoc = await BRTBetterHelpers.retrieveDocumentFromResultOnlyUuid(r, false);\n                if (!rDoc || !rDoc.uuid) {\n                    Logger.warn(`Cannot find document for result`, false, r);\n                    if (!rDoc) {\n                        rDoc = {};\n                    }\n                }\n                if (\n                    !getProperty(rTmp, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_UUID}`) &&\n                    rDoc.uuid\n                ) {\n                    setProperty(\n                        rTmp,\n                        `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_UUID}`,\n                        rDoc.uuid ?? \"\",\n                    );\n                }\n            }\n            resultsTmp.push(rTmp);\n        }\n        if (resultsTmp.length === 0) {\n            Logger.warn(\n                `No results are be drawn with this table and with these options`,\n                true,\n                this.table,\n                this.options,\n            );\n        }\n\n        this.results = resultsTmp;\n        return {\n            roll: this.mainRoll,\n            results: this.results,\n        };\n    }\n\n    /**\n     *\n     * @param {array} results\n     */\n    async createChatCard(results, rollMode = null) {\n        let msgData = { roll: this.mainRoll, messageData: {} };\n        let rollModeToUse = rollMode ? rollMode : this.options.rollMode;\n        BRTUtils.addRollModeToChatData(msgData.messageData, rollModeToUse);\n        await this.toMessage(results, msgData);\n    }\n\n    /**\n     * Draw multiple results from a RollTable, constructing a final synthetic Roll as a dice pool of inner rolls.\n     * @param {amount} amount               The number of results to draw\n     * @param {object} [options={}]         Optional arguments which customize the draw\n     * @param {Roll} [options.roll]                   An optional pre-configured Roll instance which defines the dice roll to use\n     * @param {boolean} [options.recursive=true]      Allow drawing recursively from inner RollTable results\n     * @param {boolean} [options.displayChat=false]    Automatically display the drawn results in chat? Default is false for brt (is true on standard)\n     * @param {number} [options._depth]  The rolls amount value\n     *\n     * @returns {Promise<RollTableDraw>}  The Roll and results drawn by that Roll\n     */\n    async rollManyOnTable(amount, { roll = null, recursive = true, displayChat = false, _depth = 0 } = {}) {\n        let options = mergeObject(this.options, {\n            roll: roll,\n            recursive: recursive,\n            displayChat: displayChat,\n            _depth: _depth,\n        });\n\n        const maxRecursions = 5;\n        // Prevent infinite recursion\n        if (_depth > maxRecursions) {\n            let msg = game.i18n.format(`${CONSTANTS.MODULE_ID}.Strings.Warnings.MaxRecursion`, {\n                maxRecursions: maxRecursions,\n                tableId: this.table.id,\n            });\n            throw Logger.error(msg);\n        }\n\n        let drawnResults = [];\n\n        while (amount > 0) {\n            // let resultToDraw = amount;\n            // if we draw without replacement we need to reset the table once all entries are drawn\n            if (!this.table.replacement) {\n                const resultsLeft = this.table.results.reduce(function (n, r) {\n                    return n + !r.drawn;\n                }, 0);\n\n                if (resultsLeft === 0) {\n                    await this.table.resetResults();\n                    continue;\n                }\n\n                // resultToDraw = Math.min(resultsLeft, amount);\n            }\n\n            if (!this.table.formula) {\n                let msg = game.i18n.format(`${CONSTANTS.MODULE_ID}.RollTable.NoFormula`, {\n                    name: this.table.name,\n                });\n                Logger.error(msg, true);\n                return;\n            }\n\n            let draw = {};\n            if (this.options.usePercentage) {\n                // TODO understand why there is this behaviour with the percentage feature\n                draw = await this.drawMany(1, {\n                    roll: roll,\n                    recursive: recursive,\n                    displayChat: false,\n                    rollMode: \"gmroll\",\n                });\n            } else {\n                // TODO it should be 1 instead of amount ? why i have done this ? i do not remember...\n                draw = await this.drawMany(1, {\n                    roll: roll,\n                    recursive: recursive,\n                    displayChat: false,\n                    rollMode: \"gmroll\",\n                });\n            }\n\n            if (!this.mainRoll) {\n                this.mainRoll = draw.roll;\n            }\n\n            for (const entry of draw.results) {\n                let formulaAmount = \"\";\n                if (\n                    hasProperty(entry, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_QUANTITY}`)\n                ) {\n                    formulaAmount =\n                        getProperty(\n                            entry,\n                            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_QUANTITY}`,\n                        ) || \"\";\n                }\n                if (\n                    !formulaAmount &&\n                    getProperty(entry, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.RESULTS_FORMULA_KEY_FORMULA}`)\n                ) {\n                    formulaAmount =\n                        getProperty(\n                            entry,\n                            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.RESULTS_FORMULA_KEY_FORMULA}`,\n                        ) || \"\";\n                }\n\n                if (entry.type === CONST.TABLE_RESULT_TYPES.TEXT) {\n                    formulaAmount = \"\";\n                }\n                const entryAmount = await BRTBetterHelpers.tryRoll(formulaAmount);\n\n                let innerTable;\n                if (entry.type === CONST.TABLE_RESULT_TYPES.DOCUMENT && entry.documentCollection === \"RollTable\") {\n                    innerTable = RetrieveHelpers.getRollTableSync(entry.documentId, true);\n                } else if (entry.type === CONST.TABLE_RESULT_TYPES.COMPENDIUM) {\n                    const entityInCompendium = await BRTUtils.findInCompendiumByName(\n                        entry.documentCollection,\n                        entry.text,\n                    );\n                    if (entityInCompendium !== undefined && entityInCompendium.documentName === \"RollTable\") {\n                        innerTable = entityInCompendium;\n                    }\n                }\n\n                if (innerTable) {\n                    const innerOptions = options;\n                    innerOptions.rollAsTableType = options.rollAsTableTypeAllTheTables\n                        ? innerOptions.rollAsTableType\n                        : undefined; // ONLY THE FIRST LEVEL TABLE USE THIS RIGHT\n                    const innerBrtTable = new BetterRollTable(innerTable, innerOptions);\n                    await innerBrtTable.initialize();\n                    const innerResults = await innerBrtTable.rollManyOnTable(entryAmount, {\n                        roll: roll,\n                        recursive: recursive,\n                        displayChat: false,\n                        _depth: _depth + 1,\n                    });\n                    drawnResults = drawnResults.concat(innerResults);\n                } else {\n                    drawnResults = drawnResults.concat(Array(entryAmount).fill(entry));\n                }\n            }\n            if (this.options.usePercentage) {\n                if (draw.results?.length > 0) {\n                    amount = amount - draw.results?.length;\n                } else {\n                    amount = amount - 1;\n                }\n            } else {\n                // amount = amount - resultToDraw ?? 1;\n                amount = amount - 1;\n            }\n        }\n\n        let resultsTmp = [];\n\n        for (const r of drawnResults ?? []) {\n            let rTmp = r;\n            if (rTmp.type !== CONST.TABLE_RESULT_TYPES.TEXT) {\n                // Patch add uuid to every each result for better module compatibility\n                let rDoc = await BRTBetterHelpers.retrieveDocumentFromResultOnlyUuid(r, false);\n                if (!rDoc || !rDoc.uuid) {\n                    Logger.warn(`Cannot find document for result`, false, r);\n                    if (!rDoc) {\n                        rDoc = {};\n                    }\n                }\n                if (\n                    !getProperty(rTmp, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_UUID}`) &&\n                    rDoc.uuid\n                ) {\n                    setProperty(\n                        rTmp,\n                        `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_UUID}`,\n                        rDoc.uuid ?? \"\",\n                    );\n                }\n                setProperty(\n                    rTmp,\n                    `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_ORIGINAL_NAME}`,\n                    r.text,\n                );\n                if (\n                    getProperty(rTmp, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_NAME}`) &&\n                    getProperty(rTmp, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_NAME}`) !==\n                        r.text\n                ) {\n                    // setProperty(\n                    //   rTmp,\n                    //   `text`,\n                    //   getProperty(rTmp, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_NAME}`)\n                    // );\n                    // setProperty(rTmp, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_NAME}`, rTmp.text);\n                }\n                setProperty(\n                    rTmp,\n                    `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_ORIGINAL_ICON}`,\n                    r.icon,\n                );\n                if (\n                    getProperty(rTmp, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON}`) &&\n                    getProperty(rTmp, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON}`) !==\n                        r.icon\n                ) {\n                    // setProperty(\n                    //   rTmp,\n                    //   `icon`,\n                    //   getProperty(rTmp, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON}`)\n                    // );\n                    // setProperty(rTmp, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON}`, rTmp.icon);\n                }\n            }\n\n            // REMOVED 2024-03-03\n            // if (\n            //   getProperty(rTmp, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON}`) &&\n            //   getProperty(rTmp, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON}`) !== r.icon\n            // ) {\n            //   // setProperty(\n            //   //   rTmp,\n            //   //   `icon`,\n            //   //   getProperty(rTmp, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON}`)\n            //   // );\n            //   // setProperty(rTmp,`flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON}`, rTmp.icon);\n            // }\n\n            resultsTmp.push(rTmp);\n        }\n\n        return {\n            roll: this.mainRoll,\n            results: resultsTmp,\n        };\n    }\n\n    // /**\n    //  * Evaluate a RollTable by rolling its formula and retrieving a drawn result.\n    //  *\n    //  * Note that this function only performs the roll and identifies the result, the RollTable#draw function should be\n    //  * called to formalize the draw from the table.\n    //  *\n    //  * @param {object} [options={}]       Options which modify rolling behavior\n    //  * @param {Roll} [options.roll]                   An alternative dice Roll to use instead of the default table formula\n    //  * @param {boolean} [options.recursive=true]   If a RollTable document is drawn as a result, recursively roll it\n    //  * @param {number} [options._depth]            An internal flag used to track recursion depth\n    //  *\n    //  * @returns {Promise<RollTableDraw>}  The Roll and results drawn by that Roll\n    //  *\n    //  * @example Draw results using the default table formula\n    //  * ```js\n    //  * const defaultResults = await table.roll();\n    //  * ```\n    //  *\n    //  * @example Draw results using a custom roll formula\n    //  * ```js\n    //  * const roll = new Roll(\"1d20 + @abilities.wis.mod\", actor.getRollData());\n    //  * const customResults = await table.roll({roll});\n    //  * ```\n    //  */\n    // async roll({ roll = null, recursive = true, displayChat = false, _depth = 0 } = {}) {\n    //   let resultsBrt = await this.rollManyOnTable(1, { roll, recursive, displayChat, _depth });\n    //   // Patch add uuid to every each result for better module compatibility\n    //   let resultsTmp = [];\n    //   for (const r of resultsBrt?.results ?? []) {\n    //     let rTmp = r;\n    //     if (rTmp.type !== CONST.TABLE_RESULT_TYPES.TEXT) {\n    //       let rDoc = await BRTBetterHelpers.retrieveDocumentFromResultOnlyUuid(r, false);\n    //      if(!rDoc || !rDoc.uuid) {\n    //        Logger.warn(`Cannot find document for result`, false, r);\n    //        if(!rDoc) {\n    //          rDoc = {};\n    //        }\n    //      }\n    //       if (!getProperty(rTmp, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_UUID}`) && rDoc.uuid) {\n    //         setProperty(rTmp, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_UUID}`, rDoc.uuid ?? \"\");\n    //       }\n    //     }\n    //     resultsTmp.push(rTmp);\n    //   }\n    //   return {\n    //     roll: resultsBrt.roll,\n    //     results: resultsTmp,\n    //   };\n    // }\n}\n","import { CONSTANTS } from \"../constants/constants.js\";\nimport { BRTBetterHelpers } from \"../tables/better/brt-helper.js\";\nimport { BRTUtils } from \"./utils.js\";\nimport { BetterRollTable } from \"./brt-table.js\";\nimport { isEmptyObject, isRealBoolean } from \"../lib/lib.js\";\nimport Logger from \"../lib/Logger.js\";\nimport ItemPilesHelpers from \"../lib/item-piles-helpers.js\";\nimport { RetrieveHelpers } from \"../lib/retrieve-helpers.js\";\n\nexport class BetterResults {\n    constructor(table, tableResults, stackResults, rollAsTableType) {\n        this.results = [];\n        this.currencyData = {}; // cp: 0, ep: 0, gp: 0, pp: 0, sp: 0 };\n        this.table = table;\n        this.tableResults = tableResults;\n        this.stackResults = isRealBoolean(stackResults) ? (String(stackResults) === \"true\" ? true : false) : false;\n        this.rollAsTableType = BRTUtils.retrieveBRTType(table, rollAsTableType);\n    }\n\n    /**\n     *\n     * @returns {Promise<TableResult[]>}\n     */\n    async buildResults() {\n        // START PATCH 2024-03-02\n        // this.currencyData = await this._generateCurrency(currencyString);\n        const currencyString = this.table.getFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.LOOT_CURRENCY_STRING_KEY);\n        this.currencyData = ItemPilesHelpers.retrieveCurrenciesSimpleFromString(currencyString);\n        // END PATCH 2024-03-02\n        // START PATCH 2024-03-02\n        /*\n    for (let i = 0; i < this.tableResults?.length; i++) {\n      const betterResults = await this._parseResult(this.tableResults[i]);\n      // if a inner table is rolled, the result returned is undefined but the array this.tableResult is extended with the new results\n      for (const r of betterResults) {\n        this.results.push(r);\n      }\n    }\n    */\n        const brtTypeToCheck = BRTUtils.retrieveBRTType(this.table, this.rollAsTableType);\n\n        for (const r of this.tableResults) {\n            const betterResult = await BRTBetterHelpers.updateTableResult(r);\n\n            // ====================\n            // BETTER Special cases\n            // =====================\n            if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_BETTER) {\n                if (\n                    betterResult.result.isText &&\n                    betterResult.result.innerText?.startsWith(CONSTANTS.PRE_RESULT_TEXT_ROLL)\n                ) {\n                    betterResult.result.text =\n                        CONSTANTS.PRE_RESULT_TEXT_ROLLED +\n                        (await BRTBetterHelpers.tryRoll(\n                            betterResult.result.innerText?.replaceAll(CONSTANTS.PRE_RESULT_TEXT_ROLL, \"\").trim(),\n                        ));\n                    // betterResult.result.html = betterResult.result.text;\n                } else if (\n                    betterResult.result.isText &&\n                    betterResult.result.innerText?.startsWith(CONSTANTS.PRE_RESULT_TEXT_CURRENCY)\n                ) {\n                    betterResult.result.text = betterResult.result.innerText\n                        ?.replaceAll(CONSTANTS.PRE_RESULT_TEXT_CURRENCY, \"\")\n                        .trim();\n                    // betterResult.result.html = betterResult.result.text;\n                    const currencyDataToAddS = betterResult.result.innerText\n                        ?.replaceAll(CONSTANTS.PRE_RESULT_TEXT_CURRENCY, \"\")\n                        .trim();\n                    const currencyDataToAdd = ItemPilesHelpers.retrieveCurrenciesSimpleFromString(currencyDataToAddS);\n                    for (const currencyKey of Object.keys(currencyDataToAdd)) {\n                        if (this.currencyData[currencyKey]) {\n                            this.currencyData[currencyKey] =\n                                this.currencyData[currencyKey] +\n                                (await BRTBetterHelpers.tryRoll(String(currencyDataToAdd[currencyKey])));\n                        } else {\n                            this.currencyData[currencyKey] = await BRTBetterHelpers.tryRoll(\n                                String(currencyDataToAdd[currencyKey]),\n                            );\n                        }\n                    }\n                }\n            }\n            // ====================\n            // LOOT Special cases\n            // =====================\n            else if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_LOOT) {\n                //\n                if (\n                    betterResult.result.isText &&\n                    betterResult.result.innerText?.startsWith(CONSTANTS.PRE_RESULT_TEXT_ROLL)\n                ) {\n                    betterResult.result.text =\n                        CONSTANTS.PRE_RESULT_TEXT_ROLLED +\n                        (await BRTBetterHelpers.tryRoll(\n                            betterResult.result.innerText?.replaceAll(CONSTANTS.PRE_RESULT_TEXT_ROLL, \"\").trim(),\n                        ));\n                    // betterResult.result.html = betterResult.result.text;\n                } else if (\n                    betterResult.result.isText &&\n                    betterResult.result.innerText?.startsWith(CONSTANTS.PRE_RESULT_TEXT_CURRENCY)\n                ) {\n                    betterResult.result.text = betterResult.result.innerText\n                        ?.replaceAll(CONSTANTS.PRE_RESULT_TEXT_CURRENCY, \"\")\n                        .trim();\n                    // betterResult.result.html = betterResult.result.text;\n                    const currencyDataToAddS = betterResult.result.innerText\n                        ?.replaceAll(CONSTANTS.PRE_RESULT_TEXT_CURRENCY, \"\")\n                        .trim();\n                    const currencyDataToAdd = ItemPilesHelpers.retrieveCurrenciesSimpleFromString(currencyDataToAddS);\n                    for (const currencyKey of Object.keys(currencyDataToAdd)) {\n                        if (this.currencyData[currencyKey]) {\n                            this.currencyData[currencyKey] =\n                                this.currencyData[currencyKey] +\n                                (await BRTBetterHelpers.tryRoll(String(currencyDataToAdd[currencyKey])));\n                        } else {\n                            this.currencyData[currencyKey] = await BRTBetterHelpers.tryRoll(\n                                String(currencyDataToAdd[currencyKey]),\n                            );\n                        }\n                    }\n                } else if (betterResult.result.isText) {\n                    const currencyDataToAddS = betterResult.result.text;\n                    const currencyDataToAdd = ItemPilesHelpers.retrieveCurrenciesSimpleFromString(currencyDataToAddS);\n                    for (const currencyKey of Object.keys(currencyDataToAdd)) {\n                        if (this.currencyData[currencyKey]) {\n                            this.currencyData[currencyKey] =\n                                this.currencyData[currencyKey] +\n                                (await BRTBetterHelpers.tryRoll(String(currencyDataToAdd[currencyKey])));\n                        } else {\n                            this.currencyData[currencyKey] = await BRTBetterHelpers.tryRoll(\n                                String(currencyDataToAdd[currencyKey]),\n                            );\n                        }\n                    }\n                }\n            }\n            // ====================\n            // STORY Special cases\n            // =====================\n            else if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_STORY) {\n                if (\n                    betterResult.result.isText &&\n                    betterResult.result.innerText?.startsWith(CONSTANTS.PRE_RESULT_TEXT_ROLL)\n                ) {\n                    betterResult.result.text =\n                        CONSTANTS.PRE_RESULT_TEXT_ROLLED +\n                        (await BRTBetterHelpers.tryRoll(\n                            betterResult.result.innerText?.replaceAll(CONSTANTS.PRE_RESULT_TEXT_ROLL, \"\").trim(),\n                        ));\n                    // betterResult.result.html = betterResult.result.text;\n                } else if (\n                    betterResult.result.isText &&\n                    betterResult.result.innerText?.startsWith(CONSTANTS.PRE_RESULT_TEXT_CURRENCY)\n                ) {\n                    betterResult.result.text = betterResult.result.innerText\n                        ?.replaceAll(CONSTANTS.PRE_RESULT_TEXT_CURRENCY, \"\")\n                        .trim();\n                    // betterResult.result.html = betterResult.result.text;\n                    const currencyDataToAddS = betterResult.result.innerText\n                        ?.replaceAll(CONSTANTS.PRE_RESULT_TEXT_CURRENCY, \"\")\n                        .trim();\n                    const currencyDataToAdd = ItemPilesHelpers.retrieveCurrenciesSimpleFromString(currencyDataToAddS);\n                    for (const currencyKey of Object.keys(currencyDataToAdd)) {\n                        if (this.currencyData[currencyKey]) {\n                            this.currencyData[currencyKey] =\n                                this.currencyData[currencyKey] +\n                                (await BRTBetterHelpers.tryRoll(String(currencyDataToAdd[currencyKey])));\n                        } else {\n                            this.currencyData[currencyKey] = await BRTBetterHelpers.tryRoll(\n                                String(currencyDataToAdd[currencyKey]),\n                            );\n                        }\n                    }\n                }\n            }\n            // ====================\n            // HARVEST Special cases\n            // =====================\n            else if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_HARVEST) {\n                if (\n                    betterResult.result.isText &&\n                    betterResult.result.innerText?.startsWith(CONSTANTS.PRE_RESULT_TEXT_ROLL)\n                ) {\n                    betterResult.result.text =\n                        CONSTANTS.PRE_RESULT_TEXT_ROLLED +\n                        (await BRTBetterHelpers.tryRoll(\n                            betterResult.result.innerText?.replaceAll(CONSTANTS.PRE_RESULT_TEXT_ROLL, \"\").trim(),\n                        ));\n                    // betterResult.result.html = betterResult.result.text;\n                } else if (\n                    betterResult.result.isText &&\n                    betterResult.result.innerText?.startsWith(CONSTANTS.PRE_RESULT_TEXT_CURRENCY)\n                ) {\n                    betterResult.result.text = betterResult.result.innerText\n                        ?.replaceAll(CONSTANTS.PRE_RESULT_TEXT_CURRENCY, \"\")\n                        .trim();\n                    // betterResult.result.html = betterResult.result.text;\n                    const currencyDataToAddS = betterResult.result.innerText\n                        ?.replaceAll(CONSTANTS.PRE_RESULT_TEXT_CURRENCY, \"\")\n                        .trim();\n                    const currencyDataToAdd = ItemPilesHelpers.retrieveCurrenciesSimpleFromString(currencyDataToAddS);\n                    for (const currencyKey of Object.keys(currencyDataToAdd)) {\n                        if (this.currencyData[currencyKey]) {\n                            this.currencyData[currencyKey] =\n                                this.currencyData[currencyKey] +\n                                (await BRTBetterHelpers.tryRoll(String(currencyDataToAdd[currencyKey])));\n                        } else {\n                            this.currencyData[currencyKey] = await BRTBetterHelpers.tryRoll(\n                                String(currencyDataToAdd[currencyKey]),\n                            );\n                        }\n                    }\n                }\n            }\n\n            // Little trick to merge my data with the standard table result object of foundry\n            delete betterResult.result.uuid;\n            delete betterResult.result._id;\n            const br = mergeObject(r, betterResult.result);\n            this.results.push(br);\n        }\n\n        // Option to stack results\n        if (this.stackResults) {\n            this.results = ItemPilesHelpers.stackTableResults(this.results);\n        }\n\n        // END PATCH 2024-03-02\n        return this.results;\n    }\n\n    getResults() {\n        return this.results;\n    }\n\n    getCurrencyData() {\n        return this.currencyData;\n    }\n\n    // /**\n    //  * @deprecated not used anymore there is a method on the loot helpers now ?\n    //  * @param {*} result\n    //  * @returns\n    //  */\n    // async _parseResult(result) {\n    //     let betterResults = [];\n    //     if (result.type === CONST.TABLE_RESULT_TYPES.TEXT) {\n    //         const textResults = result.text.split(\"|\");\n\n    //         for (let t of textResults) {\n    //             // if the text is a currency, we process that first\n    //             t = await this._processTextAsCurrency(t);\n    //             t = await this._rollInlineDice(t);\n\n    //\n    //             const regex = /(\\s*[^\\[@]*)@*(\\w+)*\\[([\\w.,*+-\\/\\(\\)]+)\\]/g;\n    //             let textString = t;\n    //             const commands = [];\n    //             let table;\n    //             const betterResult = mergeObject({}, result.toObject(false));\n    //             let matches;\n\n    //             while ((matches = regex.exec(t)) !== null) {\n    //                 // matches[1] is undefined in case we are matching [tablename]\n    //                 // if we are matching @command[string] then matches[2] is the command and [3] is the arg inside []\n    //                 // Logger.log(`match 0: ${matches[0]}, 1: ${matches[1]}, 2: ${matches[2]}, 3: ${matches[3]}`);\n    //                 if (matches[1] !== undefined && matches[1].trim() !== \"\") {\n    //                     textString = matches[1];\n    //                 }\n    //                 // textString = matches[1] || textString; //the first match is the text outside [], a rollformula\n    //                 const commandName = matches[2];\n    //                 const innerTableName = matches[3];\n\n    //                 if (!commandName && innerTableName) {\n    //                     const out = BRTUtils.separateIdComendiumName(innerTableName);\n    //                     const tableName = out.nameOrId;\n    //                     const tableCompendiumName = out.compendiumName;\n\n    //                     if (tableCompendiumName) {\n    //                         table = await BRTUtils.findInCompendiumByName(tableCompendiumName, tableName);\n    //                     } else {\n    //                         table = RetrieveHelpers.getRollTableSync(tableName, true, false);\n    //                     }\n\n    //                     if (!table) {\n    //                         msg = game.i18n.format(NotTableByNameInPack, {\n    //                             tableName: tableName,\n    //                             packName: tableCompendiumName,\n    //                         });\n    //                         Logger.warn(msg, true);\n    //                     }\n    //                     break;\n    //                 } else if (commandName) {\n    //                     commands.push({\n    //                         command: commandName.toLowerCase(),\n    //                         arg: matches[3],\n    //                     });\n    //                     if (commandName.toLowerCase() === \"compendium\") {\n    //                         betterResult.collection = matches[3];\n    //                     }\n    //                 }\n    //             }\n\n    //             // if a table definition is found, the textString is the rollFormula to be rolled on that table\n    //             if (table) {\n    //                 const numberRolls = await BRTBetterHelpers.tryRoll(textString);\n    //                 const options = {\n    //                     rollsAmount: numberRolls,\n    //                 };\n    //                 const innerBrtTable = new BetterRollTable(table, options);\n    //                 await innerBrtTable.initialize();\n    //                 const innerResultsBrt = await innerBrtTable.betterRoll();\n\n    //                 const innerResults = innerResultsBrt?.results;\n\n    //                 // this.tableResults = this.tableResults.concat(innerResults);\n    //                 betterResults = betterResults.concat(innerResults);\n    //             } else if (textString) {\n    //                 // if no table definition is found, the textString is the item name\n    //                 Logger.log(`results text ${textString.trim()} and commands ${commands}`);\n    //                 betterResult.img =\n    //                     result.thumbnail ??\n    //                     result.img ??\n    //                     CONFIG.RollTable.resultIcon ??\n    //                     result.src ??\n    //                     `icons/svg/d20-black.svg`;\n    //                 betterResult.text = textString.trim();\n    //                 // if there is command, then it's not a pure text but a generated item\n    //                 if (!commands || commands.length === 0) {\n    //                     betterResult.type = CONST.TABLE_RESULT_TYPES.TEXT;\n    //                 }\n    //                 betterResult.commands = commands;\n\n    //                 // PATCH 2023-10-04\n    //                 if (isEmptyObject(betterResult.flags)) {\n    //                     betterResult.flags = {};\n    //                 }\n    //                 mergeObject(betterResult.flags, result.flags);\n\n    //                 betterResults.push(betterResult);\n    //             }\n    //         }\n    //     } else {\n    //         const betterResult = mergeObject({}, result.toObject(false));\n    //         betterResult.img =\n    //             result.thumbnail || result.img || CONFIG.RollTable.resultIcon || `icons/svg/d20-black.svg`;\n    //         betterResult.collection = result.documentCollection;\n    //         betterResult.text = result.text;\n\n    //         // PATCH 2023-10-04\n    //         if (isEmptyObject(betterResult.flags)) {\n    //             betterResult.flags = {};\n    //         }\n    //         mergeObject(betterResult.flags, result.flags);\n\n    //         betterResults.push(betterResult);\n    //     }\n\n    //     return betterResults;\n    // }\n\n    /**\n     * @deprecated not used anymore there is a method on the loot helpers now ?\n     * @param {String} tableText\n     * @returns\n     */\n    async _processTextAsCurrency(tableText) {\n        const regex = /{([^}]+)}/g;\n        let matches;\n\n        while ((matches = regex.exec(tableText)) != null) {\n            this._addCurrency(await this._generateCurrency(matches[1]));\n        }\n\n        return tableText.replace(regex, \"\");\n    }\n\n    /**\n     * Add given currency to existing currency\n     * @deprecated not used anymore there is a method on the loot helpers now ?\n     * @param {array} currencyData\n     */\n    _addCurrency(currencyData) {\n        for (const key in currencyData) {\n            this.currencyData[key] = (this.currencyData[key] || 0) + currencyData[key];\n        }\n    }\n\n    /**\n     * @deprecated not used anymore there is a method on the loot helpers now ?\n     * @param {string} tableText\n     * @returns\n     */\n    async _rollInlineDice(tableText) {\n        const regex = /\\[{2}(\\w*[^\\]])\\]{2}/g;\n        let matches;\n        while ((matches = regex.exec(tableText)) != null) {\n            tableText = tableText.replace(matches[0], await BRTBetterHelpers.tryRoll(matches[1]));\n        }\n\n        return tableText;\n    }\n\n    /**\n     * Check given string and parse it against a regex to generate currency array\n     * @deprecated not used anymore there is a method on the loot helpers now ?\n     * @param {String} currencyString\n     *\n     * @returns\n     */\n    async _generateCurrency(currencyString) {\n        const currenciesToAdd = {};\n        if (currencyString) {\n            const currenciesPieces = currencyString.split(\",\");\n            for (const currency of currenciesPieces) {\n                const match = /(.*)\\[(.*?)\\]/g.exec(currency); // capturing 2 groups, the formula and then the currency symbol in brakets []\n                if (!match || match.length < 3) {\n                    let msg = game.i18n.format(`${CONSTANTS.MODULE_ID}.Strings.Warnings.CurrencyFormat`, {\n                        currencyString: currency,\n                    });\n                    Logger.warn(msg, true);\n                    continue;\n                }\n                const rollFormula = match[1];\n                const currencyString = match[2];\n                const amount = await BRTBetterHelpers.tryRoll(rollFormula);\n\n                currenciesToAdd[currencyString] = (currenciesToAdd[currencyString] || 0) + amount;\n            }\n        }\n        return currenciesToAdd;\n    }\n}\n","import { LootChatCard } from \"./tables/loot/loot-chat-card.js\";\nimport { BetterResults } from \"./core/brt-table-results.js\";\nimport { BRTUtils } from \"./core/utils.js\";\nimport API from \"./API.js\";\nimport { CONSTANTS } from \"./constants/constants.js\";\nimport { isEmptyObject, isRealBoolean, isRealBooleanOrElseNull } from \"./lib/lib.js\";\nimport { HarvestChatCard } from \"./tables/harvest/harvest-chat-card.js\";\nimport { StoryChatCard } from \"./tables/story/story-chat-card.js\";\nimport { BetterChatCard } from \"./tables/better/brt-chat-card.js\";\nimport { BetterRollTable } from \"./core/brt-table.js\";\nimport Logger from \"./lib/Logger.js\";\nimport { RetrieveHelpers } from \"./lib/retrieve-helpers.js\";\n\nexport class BetterTables {\n    constructor() {\n        // this._spellCache = undefined;\n    }\n\n    // /**\n    //  * Get spells in cache for\n    //  * @returns {*}\n    //  */\n    // getSpellCache() {\n    //   return this._spellCache;\n    // }\n\n    /**\n     *\n     * @param {*} tableEntity\n     */\n    async generateLoot(tableEntity, options = {}) {\n        return await API.generateLoot(tableEntity, options);\n    }\n\n    /**\n     * Roll a table an add the resulting loot to a given token.\n     *\n     * @param {RollTable} tableEntity\n     * @param {TokenDocument} token\n     * @param {options} object\n     * @returns\n     */\n    async addLootToSelectedToken(tableEntity, token = null, options = {}) {\n        return await API.addLootToSelectedToken(tableEntity, token, options);\n    }\n\n    async generateChatLoot(tableEntity, options = {}) {\n        return await API.generateChatLoot(tableEntity, options);\n    }\n\n    async getStoryResults(tableEntity) {\n        return await API.getStoryResults(tableEntity);\n    }\n\n    async generateChatStory(tableEntity) {\n        return await API.generateChatStory(tableEntity);\n    }\n\n    /**\n     * @param {*} tableEntity\n     * @param {*} options\n     * @returns {Promise<TableResult[]>}\n     */\n    async getBetterTableResults(tableEntity, options = {}) {\n        const brtTable = new BetterRollTable(tableEntity, options);\n        await brtTable.initialize();\n        const resultBrt = await brtTable.betterRoll();\n\n        const results = resultBrt?.results;\n\n        const br = new BetterResults(tableEntity, results, options?.stackResultsWithBRTLogic, options?.rollAsTableType);\n        const betterResults = await br.buildResults();\n\n        return betterResults;\n    }\n\n    /**\n     * @param {*} tableEntity\n     * @param {*} options\n     * @returns {Promise<TableResult[]>}\n     */\n    async betterTableRoll(tableEntity, options = {}) {\n        const brtTable = new BetterRollTable(tableEntity, options);\n        await brtTable.initialize();\n        const resultBrt = await brtTable.betterRoll();\n\n        const results = resultBrt?.results;\n\n        const br = new BetterResults(tableEntity, results, options?.stackResultsWithBRTLogic, options?.rollAsTableType);\n        const betterResults = await br.buildResults();\n\n        let rollMode = brtTable.rollMode;\n        let roll = brtTable.mainRoll;\n\n        if (isRealBoolean(options.displayChat) && !options.displayChat) {\n            return betterResults;\n        }\n\n        const brtTypeToCheck = BRTUtils.retrieveBRTType(tableEntity, options?.rollAsTableType);\n\n        if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_BETTER) {\n            const betterChatCard = new BetterChatCard(betterResults, rollMode, roll);\n            await betterChatCard.createChatCard(tableEntity);\n        } else if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_LOOT) {\n            const currencyData = br.getCurrencyData();\n            const lootChatCard = new LootChatCard(betterResults, currencyData, rollMode, roll);\n            await lootChatCard.createChatCard(tableEntity);\n        } else if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_STORY) {\n            const storyChatCard = new StoryChatCard(betterResults, rollMode, roll);\n            await storyChatCard.createChatCard(tableEntity);\n        } else if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_HARVEST) {\n            const harvestChatCard = new HarvestChatCard(betterResults, rollMode, roll);\n            await harvestChatCard.createChatCard(tableEntity);\n        } else {\n            await brtTable.createChatCard(betterResults, rollMode, roll);\n        }\n        return betterResults;\n    }\n\n    /**\n     * @param {RollTable|string|UUID} tableEntity\n     * @param {object} options\n     * @returns {Promise<{results:TableResult[], currenciesData:Record<string,number}>}\n     */\n    async betterTableRollV2(tableEntity, options = {}) {\n        const brtTable = new BetterRollTable(tableEntity, options);\n        await brtTable.initialize();\n        const resultBrt = await brtTable.betterRoll();\n\n        const results = resultBrt?.results;\n\n        const br = new BetterResults(tableEntity, results, options?.stackResultsWithBRTLogic, options?.rollAsTableType);\n        const betterResults = await br.buildResults();\n\n        let rollMode = brtTable.rollMode;\n        let roll = brtTable.mainRoll;\n\n        if (isRealBoolean(options.displayChat) && !options.displayChat) {\n            return {\n                results: betterResults,\n                currenciesData: br.currencyData,\n            };\n        }\n\n        const brtTypeToCheck = BRTUtils.retrieveBRTType(tableEntity, options?.rollAsTableType);\n\n        if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_BETTER) {\n            const betterChatCard = new BetterChatCard(betterResults, rollMode, roll);\n            await betterChatCard.createChatCard(tableEntity);\n        } else if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_LOOT) {\n            const currencyData = br.getCurrencyData();\n            const lootChatCard = new LootChatCard(betterResults, currencyData, rollMode, roll);\n            await lootChatCard.createChatCard(tableEntity);\n        } else if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_STORY) {\n            const storyChatCard = new StoryChatCard(betterResults, rollMode, roll);\n            await storyChatCard.createChatCard(tableEntity);\n        } else if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_HARVEST) {\n            const harvestChatCard = new HarvestChatCard(betterResults, rollMode, roll);\n            await harvestChatCard.createChatCard(tableEntity);\n        } else {\n            await brtTable.createChatCard(betterResults, rollMode, roll);\n        }\n        return {\n            results: betterResults,\n            currenciesData: br.currencyData,\n        };\n    }\n\n    /**\n     * @deprecated TO REMOVE\n     * @param {RollTable} tableEntity rolltable to generate content from\n     * @returns {Promise<{flavor: *, sound: string, user: *, content: *}>}\n     */\n    async rollOld(tableEntity, options = {}) {\n        // const data = await BetterTables.prepareCardData(tableEntity, options);\n        const brtTable = new BetterRollTable(tableEntity, options);\n        await brtTable.initialize();\n        const resultBrt = await brtTable.betterRoll();\n\n        const results = resultBrt?.results;\n\n        let rollMode = options?.rollMode || brtTable.rollMode || null;\n        let roll = options?.roll || brtTable.mainRoll || null;\n\n        const br = new BetterResults(tableEntity, results, options?.stackResultsWithBRTLogic, options?.rollAsTableType);\n        const betterResults = await br.buildResults();\n\n        if (isRealBoolean(options.displayChat)) {\n            if (!options.displayChat) {\n                return betterResults;\n            }\n        }\n\n        const brtTypeToCheck = BRTUtils.retrieveBRTType(tableEntity, options?.rollAsTableType);\n\n        if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_BETTER) {\n            const betterChatCard = new BetterChatCard(betterResults, rollMode, roll);\n            await betterChatCard.findOrCreateItems();\n            await betterChatCard.prepareCharCart(tableEntity);\n        } else if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_LOOT) {\n            const currencyData = br.getCurrencyData();\n            const lootChatCard = new LootChatCard(betterResults, currencyData, rollMode, roll);\n            await lootChatCard.findOrCreateItems();\n            await lootChatCard.prepareCharCart(tableEntity);\n        } else if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_STORY) {\n            const storyChatCard = new StoryChatCard(betterResults, rollMode, roll);\n            await storyChatCard.prepareCharCart(tableEntity);\n        } else if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_HARVEST) {\n            const harvestChatCard = new HarvestChatCard(betterResults, rollMode, roll);\n            await harvestChatCard.findOrCreateItems();\n            await harvestChatCard.prepareCharCart(tableEntity);\n        }\n        return betterResults;\n    }\n\n    /**\n     * @param {RollTable} tableEntity rolltable to generate content from\n     * @returns {Promise<TableResult[]>}\n     */\n    async roll(tableEntity, options = {}) {\n        return await API.roll(tableEntity, options);\n    }\n\n    /**\n     * Create a new RollTable by extracting entries from a compendium.\n     *\n     * @param {string} tableName the name of the table entity that will be created\n     * @param {string} compendiumName the name of the compendium to use for the table generation\n     * @param {function(Document)} weightPredicate a function that returns a weight (number) that will be used\n     * for the tableResult weight for that given entity. returning 0 will exclude the entity from appearing in the table\n     *\n     * @deprecated use api.createRolltableFromCompendium instead\n     */\n\n    async createTableFromCompendium(tableName, compendiumName, { weightPredicate = null } = {}) {\n        return await API.createTableFromCompendium(tableName, compendiumName, { weightPredicate });\n    }\n\n    // /**\n    //  * Update spell cache used for random spell scroll generation\n    //  *\n    //  * @returns {Promise<void>}\n    //  */\n    // async updateSpellCache(pack) {\n    //   if (game.user.isGM) {\n    //     const defaultPack = game.settings.get(CONSTANTS.MODULE_ID, CONSTANTS.SPELL_COMPENDIUM_KEY),\n    //       spellCompendium = await RetrieveHelpers.getCompendiumCollectionAsync(defaultPack);\n\n    //     if ((!pack && spellCompendium) || pack === defaultPack) {\n    //       const spellCompendiumIndex = await spellCompendium.getIndex({\n    //         fields: [SETTINGS.SPELL_LEVEL_PATH, \"img\"],\n    //       });\n    //       this._spellCache = spellCompendiumIndex\n    //         .filter((entry) => entry.type === \"spell\")\n    //         .map((i) => mergeObject(i, { collection: spellCompendium.collection }));\n    //     } else {\n    //       Logger.error(`Spell cache could not be initialized/updated.`);\n    //     }\n    //   }\n    // }\n\n    createLink(item) {\n        if (!item) {\n            return undefined;\n        }\n        if (!item.type || item.type > 0) {\n            const id = item.id;\n            const uuid = item.uuid;\n            const text = item.name || item.text;\n            const entity = item.documentName;\n            const pack = item.pack || game.collections.get(item.collectionName)?.documentName || \"\";\n            const packPart = pack !== \"\" ? `data-pack=\"${pack}\"` : \"\";\n            const icon = BRTUtils.getIconByEntityType(entity);\n            return `<a class=\"content-link\" draggable=\"true\" ${packPart} data-entity=\"${entity}\" data-id=\"${id}\" data-uuid=\"${uuid}\"><i class=\"fas ${icon}\"></i>${text}</a>`;\n        }\n\n        return item.text;\n    }\n\n    /* =================================== */\n    /* STATIC METHODS */\n    /* =================================== */\n\n    /**\n     *\n     * @param {HTMLElement} html\n     * @param {Array} options\n     */\n    static async enhanceCompendiumContextMenu(html, options) {\n        if (game.user.isGM) {\n            options.push({\n                name: Logger.i18n(`${CONSTANTS.MODULE_ID}.api.msg.generateRolltableFromCompendium`),\n                icon: '<i class=\"fas fa-th-list\"></i>',\n                callback: (li) => {\n                    API.createRolltableFromCompendium(li.data(\"pack\"));\n                },\n            });\n\n            options.push({\n                name: Logger.i18n(`${CONSTANTS.MODULE_ID}.api.msg.generateRolltableFromCompendiumWithFilters`),\n                icon: '<i class=\"fa-solid fa-arrows-split-up-and-left\"></i>',\n                callback: (li) => {\n                    API.compendiumToRollTableWithDialog(li.data(\"pack\"));\n                },\n            });\n\n            if (game.settings.get(CONSTANTS.MODULE_ID, CONSTANTS.ADD_ROLL_IN_COMPENDIUM_CONTEXTMENU)) {\n                options.push({\n                    name: Logger.i18n(`${CONSTANTS.MODULE_ID}.api.msg.rollCompendiumAsRolltable`),\n                    icon: '<i class=\"fa-solid fa-dice\"></i>',\n                    callback: (li) => {\n                        API.rollCompendiumAsRolltable(li.data(\"pack\"));\n                    },\n                });\n            }\n        }\n    }\n\n    /**\n     * Add a roll option in context menu of rolltables\n     * @param {HTMLElement} html\n     * @param {Array} options\n     */\n    static async enhanceRolltableContextMenu(html, options) {\n        if (game.user.isGM && game.settings.get(CONSTANTS.MODULE_ID, CONSTANTS.ADD_ROLL_IN_ROLLTABLE_CONTEXTMENU)) {\n            options.unshift({\n                name: \"Roll table (BRT)\",\n                icon: '<i class=\"fa-solid fa-dice\"></i>',\n                callback: (li) => {\n                    BetterTables.menuCallBackRollTable(li.data(\"documentId\"));\n                },\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {String} rolltableId ID of the rolltable to roll\n     */\n    static async menuCallBackRollTable(rolltableId) {\n        const rolltable = RetrieveHelpers.getRollTableSync(rolltableId);\n        await API.betterTableRoll(rolltable);\n    }\n\n    /**\n     * Create card content from compendium content\n     *\n     * @param {String} compendium compendium name\n     *\n     * @returns {Promise<{flavor: string, sound: string, user: *, content: *}>}\n     *\n     * @deprecated use api.rollCompendiumAsRolltable instead\n     */\n    static async rollCompendiumAsRolltable(compendium) {\n        API.rollCompendiumAsRolltable(compendium);\n    }\n\n    static async _renderMessage(message) {\n        const dataMessageLoot = getProperty(message, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.LOOT}`) || {};\n        if (!dataMessageLoot.compendium) {\n            dataMessageLoot.compendium = \"\";\n        }\n        if (!dataMessageLoot.id) {\n            dataMessageLoot.id = \"\";\n        }\n        const cardHtml = await renderTemplate(\n            `modules/${CONSTANTS.MODULE_ID}/templates/card/loot-chat-card.hbs`,\n            dataMessageLoot, //message.flags.betterTables.loot\n        );\n        message.content = cardHtml;\n        return message;\n        /*\n    return {\n      flavor: message.data.flavor,\n      sound: message.data.sound,\n      user: message.data.user,\n      content: cardHtml,\n      flags: {\n        better-rolltables: {\n          loot: data\n        }\n      }\n    }\n    */\n    }\n\n    /**\n     *\n     * @param {String} compendium ID of the compendium to roll\n     */\n    static async menuCallBackRollCompendium(compendium) {\n        const chatData = await API.rollCompendiumAsRolltable(compendium);\n        ChatMessage.create(chatData);\n    }\n\n    /**\n     * Create card content from rolltable\n     * @param {RollTable} tableEntity rolltable to generate content from\n     * @returns {TableResult[]}\n     */\n    static async prepareCardData(tableEntity, options = {}) {\n        const brtTable = new BetterRollTable(tableEntity, options);\n        await brtTable.initialize();\n        const resultBrt = await brtTable.betterRoll();\n\n        const results = resultBrt?.results;\n\n        let rollMode = options?.rollMode || brtTable.rollMode || null;\n        let roll = options?.roll || brtTable.mainRoll || null;\n\n        const br = new BetterResults(tableEntity, results, options?.stackResultsWithBRTLogic, options?.rollAsTableType);\n        const betterResults = await br.buildResults();\n\n        if (isRealBoolean(options.displayChat)) {\n            if (!options.displayChat) {\n                return betterResults;\n            }\n        }\n\n        const brtTypeToCheck = BRTUtils.retrieveBRTType(tableEntity, options?.rollAsTableType);\n\n        let chatData = null;\n        if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_BETTER) {\n            const betterChatCard = new BetterChatCard(betterResults, rollMode, roll);\n            await betterChatCard.findOrCreateItems();\n            chatData = await betterChatCard.prepareCharCart(tableEntity);\n        } else if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_LOOT) {\n            const currencyData = br.getCurrencyData();\n            const lootChatCard = new LootChatCard(betterResults, currencyData, rollMode, roll);\n            await lootChatCard.findOrCreateItems();\n            chatData = await lootChatCard.prepareCharCart(tableEntity);\n        } else if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_STORY) {\n            const storyChatCard = new StoryChatCard(betterResults, rollMode, roll);\n            // await storyChatCard.findOrCreateItems();\n            chatData = await storyChatCard.prepareCharCart(tableEntity);\n        } else if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_HARVEST) {\n            const harvestChatCard = new HarvestChatCard(betterResults, rollMode, roll);\n            await harvestChatCard.findOrCreateItems();\n            chatData = await harvestChatCard.prepareCharCart(tableEntity);\n        }\n\n        return chatData;\n    }\n\n    static async _toggleCurrenciesShareSection(message, html) {\n        const section = html[0].querySelector(`section.${CONSTANTS.MODULE_ID}-share-currencies`);\n        section.classList.toggle(`${CONSTANTS.MODULE_ID}-hidden`);\n        // await BetterTables.updateChatMessage(message, html, {\"force\":true});\n    }\n\n    static async _addButtonsToMessage(message, html) {\n        const tableDrawNode = $(html).find(\".table-draw\");\n        const id = $(tableDrawNode).data(\"id\");\n        const pack = $(tableDrawNode).data(\"pack\");\n        if (!id && !pack) {\n            return;\n        }\n        if (game.settings.get(CONSTANTS.MODULE_ID, CONSTANTS.SHOW_REROLL_BUTTONS)) {\n            // reroll button\n            const rerollButton = $(\n                `<a class=\"better-rolltables-roll-table-reroll-button\" title=\"${game.i18n.localize(\n                    `${CONSTANTS.MODULE_ID}.DrawReroll`,\n                )}\">`,\n            ).append(\"<i class='fas fa-dice-d20'></i>\");\n            rerollButton.click(async () => {\n                let rolltable;\n                if (pack && id) {\n                    const myPack = await RetrieveHelpers.getCompendiumCollectionAsync(pack, true, false);\n                    rolltable = await myPack?.getDocument(id);\n                } else {\n                    rolltable = RetrieveHelpers.getRollTableSync(id, true);\n                }\n                if (rolltable) {\n                    const chatData = await BetterTables.prepareCardData(rolltable);\n                    const cardContent = chatData.content;\n                    const cardFlags = chatData.flags;\n                    await BetterTables.updateChatMessage(message, cardContent, {\n                        flags: cardFlags,\n                    });\n                } else {\n                    Logger.warn(`No rollTable find with reference pack = '${pack}' and id = '${id}'`, true);\n                }\n            });\n            $(html).find(\".message-delete\").before(rerollButton);\n        }\n\n        // if (\n        //     game.settings.get(CONSTANTS.MODULE_ID, CONSTANTS.SHOW_CURRENCY_SHARE_BUTTON) &&\n        //     getProperty(message, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.LOOT_CURRENCY}`) && // message.flags?.betterTables?.loot.currency &&\n        //     Object.keys(getProperty(message, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.LOOT_CURRENCY}`)).length >\n        //         0 // message.flags.betterTables.loot.currency)\n        // ) {\n        //     // Currency share button\n        //     const currencyShareButton = $(\n        //         `<a class=\"better-rolltables-roll-table-share-currencies\" title=\"${game.i18n.localize(\n        //             `${CONSTANTS.MODULE_ID}.Buttons.Currency.Share`,\n        //         )}\">`,\n        //     ).append(\"<i class='fas fa-coins'></i>\");\n        //     currencyShareButton.click(async () => BetterTables._toggleCurrenciesShareSection(message, html));\n        //     $(html).find(\".message-delete\").before(currencyShareButton);\n        //     const shareButton = html[0].querySelector(`button.${CONSTANTS.MODULE_ID}-share-currencies-button`);\n        //     shareButton.addEventListener(\"click\", async (event) => {\n        //         await BetterTables._shareCurrenciesToPlayers(message, html);\n        //     });\n        // }\n\n        if (game.settings.get(CONSTANTS.MODULE_ID, CONSTANTS.SHOW_OPEN_BUTTONS)) {\n            // Open link\n            let document;\n            if (pack && id) {\n                const myPack = await RetrieveHelpers.getCompendiumCollectionAsync(pack, true, false);\n                document = await myPack?.getDocument(id);\n            } else {\n                document = RetrieveHelpers.getRollTableSync(id, true);\n            }\n            if (document) {\n                const openLink = $(\n                    `<a class=\"better-rolltables-roll-table-open-table\" title=\"${game.i18n.localize(\n                        `${CONSTANTS.MODULE_ID}.OpenRolltable`,\n                    )}\">`,\n                ).append(\"<i class='fas fa-th-list'></i>\");\n                if (id) openLink.data(\"id\", id);\n                if (pack) openLink.data(\"pack\", pack);\n                openLink.click(async () => document.sheet.render(true));\n                $(html).find(\".message-delete\").before(openLink);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {ChatMessage} message\n     * @param {HTMLElement} html\n     * @returns {Promise<undefined>}\n     * @private\n     */\n    static async _shareCurrenciesToPlayers(message, html) {\n        await BetterTables._toggleCurrenciesShareSection(message, html);\n        const usersId = Array.from(\n            html[0].querySelector(`section.${CONSTANTS.MODULE_ID}-share-currencies`)?.querySelectorAll(\"input:checked\"),\n        ).map((x) => x.dataset.userId);\n        if (!usersId) return undefined;\n\n        const currenciesToShare = getProperty(message, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.LOOT_CURRENCY}`); //message.flags.betterTables.loot.currency;\n        const usersCount = usersId.length;\n        const share = Object.keys(currenciesToShare)\n            .map((x) => ({ [x]: Math.floor(currenciesToShare[x] / usersCount) }))\n            .reduce((a, b) => Object.assign(a, b), {});\n\n        for (const userId of usersId) {\n            const user = game.users.get(userId);\n            const currency = user.character.system.currency;\n            for (let key of Object.keys(currency)) {\n                const increment = share[key] || 0;\n                if (increment > 0) {\n                    currency[key] += increment;\n                }\n            }\n            await user.character.update({ currency: currency });\n        }\n        const newMessage = await BetterTables._renderMessage(\n            mergeObject(message, { [`flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.LOOT_SHARED}`]: true }), //\"flags.betterTables.loot.shared\"\n        );\n        await BetterTables.updateChatMessage(message, newMessage);\n    }\n\n    static async _addRollButtonsToEntityLink(html) {\n        if (game.settings.get(CONSTANTS.MODULE_ID, CONSTANTS.ROLL_TABLE_FROM_JOURNAL)) {\n            // handling rolltables imported in campaign\n            $(html)\n                .find(\"a.content-link[data-entity='RollTable']\")\n                .each(async (index, link) => {\n                    const id = $(link).data(\"id\");\n                    const uuid = $(link).data(\"uuid\");\n                    const rolltable = await RetrieveHelpers.getRollTableAsync(uuid);\n                    if (rolltable) {\n                        const rollNode = $(\n                            `<a class=\"better-rolltables-roll-table-roll-link\" title=\"${game.i18n.localize(\n                                `${CONSTANTS.MODULE_ID}.DrawReroll`,\n                            )}\"><i class=\"fas fa-dice-d20\"></i></a>`,\n                        ).click(async () => {\n                            await API.betterTableRoll(rolltable);\n                        });\n                        $(link).after(rollNode);\n                    } else {\n                        Logger.warn(`No rolltable found for reference '${uuid}'`);\n                    }\n                });\n\n            // handling rolltables in compendiums\n            $(html)\n                .find(\"a.content-link[data-pack]\")\n                .each(async (index, link) => {\n                    const packName = $(link).data(\"pack\");\n                    const myPack = await RetrieveHelpers.getCompendiumCollectionAsync(packName, true, false);\n                    const pack = myPack;\n                    if (!pack) {\n                        return;\n                    }\n                    const id = $(link).data(\"id\");\n                    const document = await pack.getDocument(id);\n                    if (!document || document.documentName !== \"RollTable\") return;\n\n                    const rollNode = $(\n                        `<a class=\"better-rolltables-roll-table-roll-link\" title=\"${game.i18n.localize(\n                            `${CONSTANTS.MODULE_ID}.DrawReroll`,\n                        )}\"><i class=\"fas fa-dice-d20\"></i></a>`,\n                    ).click(async () => {\n                        await API.generateChatLoot(document);\n                    });\n                    $(link).after(rollNode);\n                });\n        }\n    }\n\n    /**\n     * Handle Reroll buttons on cards\n     * @param {ChatMessage} message newly created message\n     * @param {Object} html message content\n     * @returns {Promise<void>}\n     */\n    static async handleChatMessageButtons(message, html) {\n        if (game.user.isGM) {\n            BetterTables._addButtonsToMessage(message, html);\n            BetterTables._addRollButtonsToEntityLink(html);\n        }\n    }\n\n    /**\n     * Update a message with a new content\n     * @param {ChatMessage} message message to update\n     * @param {ChatMessage} content new HTML content of message\n     * @param {Object} options\n     * @returns {Promise<void>}\n     */\n    static async updateChatMessage(message, content, options = {}) {\n        if (game.user.isGM) {\n            if (!options.force && game.settings.get(CONSTANTS.MODULE_ID, CONSTANTS.SHOW_WARNING_BEFORE_REROLL)) {\n                Dialog.confirm({\n                    title: game.i18n.localize(`${CONSTANTS.MODULE_ID}.Settings.RerollWarning.Title`),\n                    content: game.i18n.localize(`${CONSTANTS.MODULE_ID}.Settings.RerollWarning.Description`),\n                    yes: () => {\n                        BetterTables.updateChatMessage(message, content, { force: true, flags: options.flags });\n                    },\n                    defaultYes: false,\n                });\n            } else {\n                message.update({\n                    content: content,\n                    flags: options.flags || {},\n                    timestamp: Date.now(),\n                });\n            }\n        }\n    }\n\n    /**\n     * @deprecated TODO other modules do this ?\n     */\n    static handleDropRollTableSheetData(rollTable, rollTableSheet, json) {\n        if (json.event === \"sort\") {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @deprecated TODO other modules do this ?\n     */\n    static async handleRolltableLink(sheet, html) {\n        if (game.user.isGM && game.settings.get(CONSTANTS.MODULE_ID, CONSTANTS.ROLL_TABLE_FROM_JOURNAL)) {\n            // handling rolltables imported in campaign\n            $(html)\n                .find(\"a.content-link[data-uuid^='RollTable']\")\n                .each((index, link) => {\n                    const id = $(link).data(\"id\");\n                    const rolltable = RetrieveHelpers.getRollTableSync(id);\n\n                    const rollNode = $(\n                        `<a class=\"better-rolltables-roll-table-roll-link\" title=\"${game.i18n.localize(\n                            `${CONSTANTS.MODULE_ID}.DrawReroll`,\n                        )}\"><i class=\"fas fa-dice-d20\"></i></a>`,\n                    ).click(async () => {\n                        await API.generateChatLoot(rolltable);\n                    });\n                    $(link).after(rollNode);\n                });\n\n            // handling rolltables in compendiums\n            $(html)\n                .find(\"a.content-link[data-pack]\")\n                .each(async (index, link) => {\n                    const packName = $(link).data(\"pack\");\n                    const myPack = await RetrieveHelpers.getCompendiumCollectionAsync(packName, true, false);\n                    const pack = myPack;\n                    if (!pack) {\n                        return;\n                    }\n                    const id = $(link).data(\"id\");\n                    const document = await pack.getDocument(id);\n                    if (!document || document.documentName !== \"RollTable\") return;\n\n                    const rollNode = $(\n                        `<a class=\"better-rolltables-roll-table-roll-link\" title=\"${game.i18n.localize(\n                            `${CONSTANTS.MODULE_ID}.DrawReroll`,\n                        )}\"><i class=\"fas fa-dice-d20\"></i></a>`,\n                    ).click(async () => {\n                        await API.generateChatLoot(document);\n                    });\n                    $(link).after(rollNode);\n                });\n        }\n    }\n\n    static async checkRenderDefaultRollTableConfig(rollTableConfig, html, rollTable) {\n        if (rollTableConfig.object.sheet.template !== \"templates/sheets/roll-table-config.html\") {\n            /*\n      if (rollTableConfig.isEditable) {\n        let atLeastOneIsUpdated = false;\n        const resultsToUpdate = await Promise.all(\n          rollTableConfig.object.results.map(async (result) => {\n            const obj = await BRTBetterHelpers.updateTableResult(result);\n            if (\n              obj?.result &&\n              obj.isUpdate &&\n              !isEmptyObject(getProperty(obj.result, `flags.${CONSTANTS.MODULE_ID}`))\n            ) {\n              let resultToUpdate = result.toObject(false);\n              if (!resultToUpdate.flags) {\n                resultToUpdate.flags = {};\n              }\n              if (!resultToUpdate.flags[CONSTANTS.MODULE_ID]) {\n                resultToUpdate.flags[CONSTANTS.MODULE_ID] = {};\n              }\n              mergeObject(\n                resultToUpdate.flags[CONSTANTS.MODULE_ID],\n                getProperty(obj.result, `flags.${CONSTANTS.MODULE_ID}`)\n              );\n              atLeastOneIsUpdated = true;\n              return resultToUpdate;\n            }\n          })\n        );\n        if (atLeastOneIsUpdated) {\n          //Logger.info(`Try to Update the rolltable`, false, rollTableConfig.object);\n          // This little trick seem to refresh the config\n          if(isEmptyObject(API.cacheBrtRender)){\n            API.cacheBrtRender = {};\n          }\n          if(!API.cacheBrtRender[rollTableConfig.object.id]) {\n            Logger.info(`Update the rolltable`, false, rollTableConfig.object);\n            await rollTableConfig.object.updateEmbeddedDocuments(\"TableResult\", resultsToUpdate);\n            API.cacheBrtRender[rollTableConfig.object.id] = true;\n          }\n        }\n      }\n      */\n            // Force a update\n            // if(rollTableConfig.rendered) {\n            //     Logger.log(`checkRenderDefaultRollTableConfig | ${rollTableConfig.object.name}`);\n            //     await rollTableConfig.object.update(rollTableConfig.object.toObject(), {\n            //         diff: false,\n            //         pack: null,\n            //         parent: null,\n            //         recursive: false,\n            //     });\n            // }\n        } else {\n            Logger.debug(`Set table type to null for default sheet rolltable config`);\n            // If the flas is not null\n            if (!rollTableConfig.object.getFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.TABLE_TYPE_KEY)) {\n                await rollTableConfig.object.setFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.TABLE_TYPE_KEY, null);\n            }\n        }\n    }\n}\n","import API from \"../../API\";\nimport { BetterTables } from \"../../better-tables\";\nimport { CONSTANTS } from \"../../constants/constants\";\nimport SETTINGS from \"../../constants/settings\";\nimport { BRTBetterHelpers } from \"../../tables/better/brt-helper\";\nimport { BRTUtils } from \"../../core/utils\";\nimport Logger from \"../../lib/Logger\";\nimport { RetrieveHelpers } from \"../../lib/retrieve-helpers\";\nimport ItemPilesHelpers from \"../../lib/item-piles-helpers\";\n\nexport class RollTableToActorHelpers {\n    /**\n     *\n     * @param {RollTable} table\n     * @param {Object} options\n     * @returns {Promise<ItemData[]>} Item Data Array.  An array of objects, each containing the item that was added or updated, and the quantity that was added\n     */\n    static async retrieveItemsDataFromRollTableResult(table, options = {}) {\n        let itemsData = await ItemPilesHelpers.retrieveItemsDataFromRollTable(table, options);\n        /*\n    let brt = new BetterTables();\n    const results = await brt.getBetterTableResults(table, options);\n    let itemsData = await RollTableToActorHelpers.resultsToItemsData(results);\n    if (itemsData.length === 0) {\n      return;\n    }\n    itemsData = RollTableToActorHelpers.preStackItems(itemsData);\n    */\n        return itemsData;\n    }\n\n    static async retrieveItemsDataFromRollTableResultSpecialHarvester(table, options = {}) {\n        let itemsData = await ItemPilesHelpers.retrieveItemsDataFromRollTable(table, options);\n        /*\n    let brt = new BetterTables();\n    const results = await brt.getBetterTableResults(table, options);\n    let itemsData = await RollTableToActorHelpers.resultsToItemsData(results);\n    if (itemsData.length === 0) {\n      return;\n    }\n    itemsData = RollTableToActorHelpers.preStackItemsSpecialHarvester(itemsData);\n    */\n        return itemsData;\n    }\n\n    static async addRollTableItemsToActor(table, actor, options = {}) {\n        const itemsData = ItemPilesHelpers.populateActorOrTokenViaTable(actor, table, {\n            targetActor: actor,\n            removeExistingActorItems: false,\n        });\n        /*\n    let brt = new BetterTables();\n    const results = await brt.getBetterTableResults(table, options);\n    const itemsData = await RollTableToActorHelpers.resultsToItemsData(results);\n    const actorWithItems = await RollTableToActorHelpers.addItemsToActor(actor, itemsData);\n    */\n        // Notify the user of items added\n        /*\n    let itemNames = itemsData\n      .map((i) => {\n        const itemStackAttribute = game.itempiles.API.ITEM_QUANTITY_ATTRIBUTE; // game.settings.get(CONSTANTS.MODULE_ID, SETTINGS.QUANTITY_PROPERTY_PATH);\n        if (!itemStackAttribute) {\n          return i.name;\n        }\n        // const stack = parseInt(getProperty(i.system, itemStackAttribute));\n        const stack = parseInt(getProperty(i, itemStackAttribute));\n        if (stack <= 1) {\n          return i.name;\n        }\n        return `${stack} ${i.name}`;\n      })\n      .join(\", \");\n    const actorNames = controlledActors.map((a) => a.name).join(\", \");\n    const infoStr = RollTableToActorHelpers._stringInject(Logger.i18n(`${CONSTANTS.MODULE_ID}.label.importSuccess`), [\n      itemNames,\n      actorNames,\n    ]);\n    */\n        Logger.info(Logger.i18n(`${CONSTANTS.MODULE_ID}.label.importSuccess`), true);\n        const items = itemsData;\n        return items;\n    }\n\n    /**\n     * Add rolltable results to actor\n     * @deprecated to remove we use item piles now\n     * @param {Token} token\n     * @param {TableResult[]} results\n     * @param {boolean} stackSame\n     * @param {boolean} isTokenActor - is the token already the token actor?\n     * @param {number} customLimit\n     * @return {void} array of item data\n     */\n    static async addResultsToControlledTokens(token, results, stackSame = true, isTokenActor = false, customLimit = 0) {\n        // Grab the items\n        let itemsData = await RollTableToActorHelpers.resultsToItemsData(results);\n        if (itemsData.length === 0) {\n            return;\n        }\n        itemsData = RollTableToActorHelpers.preStackItems(itemsData);\n        // Grab the actors\n        const tokenstack = token ? (token.constructor === Array ? token : [token]) : canvas.tokens.controlled;\n        const controlledActors = tokenstack.map((t) => t.actor).filter((a) => a.isOwner);\n        if (controlledActors.length === 0) {\n            Logger.warn(`No actors founded on the token passed`, true);\n            return;\n        }\n        // Add the items\n        for (const actor of controlledActors) {\n            //await RollTableToActorHelpers.addItemsToActor(actor, itemsData, stackSame, customLimit);\n            await ItemPilesHelpers.addItems(actor, itemsData);\n        }\n\n        // Notify the user of items added\n        /*\n    let itemNames = itemsData\n      .map((i) => {\n        const itemStackAttribute = game.itempiles.API.ITEM_QUANTITY_ATTRIBUTE; // game.settings.get(CONSTANTS.MODULE_ID, SETTINGS.QUANTITY_PROPERTY_PATH);\n        if (!itemStackAttribute) {\n          return i.name;\n        }\n        // const stack = parseInt(getProperty(i.system, itemStackAttribute));\n        const stack = parseInt(getProperty(i, itemStackAttribute));\n        if (stack <= 1) {\n          return i.name;\n        }\n        return `${stack} ${i.name}`;\n      })\n      .join(\", \");\n    const actorNames = controlledActors.map((a) => a.name).join(\", \");\n    const infoStr = RollTableToActorHelpers._stringInject(Logger.i18n(`${CONSTANTS.MODULE_ID}.label.importSuccess`), [\n      itemNames,\n      actorNames,\n    ]);\n    Logger.info(infoStr, true);\n    */\n        Logger.info(Logger.i18n(`${CONSTANTS.MODULE_ID}.label.importSuccess`), true);\n        const items = itemsData;\n        return items;\n    }\n\n    /**\n     * @deprecated to remove we use item piles now\n     * @param {*} str\n     * @param {*} arr\n     * @returns\n     */\n    static _stringInject(str, arr) {\n        if (typeof str !== \"string\" || !(arr instanceof Array)) {\n            return false;\n        }\n\n        return str.replace(/({\\d})/g, function (i) {\n            return arr[i.replace(/{/, \"\").replace(/}/, \"\")];\n        });\n    }\n\n    /**\n     * Converts a list of results into a list of item data\n     * @param {TableResult[]} results\n     * @return {Promise<{Object[]}>} array of item data\n     */\n    static async resultsToItemsData(results) {\n        const itemsData = [];\n        for (const r of results) {\n            const itemTmp = await RollTableToActorHelpers.resultToItemData(r);\n            if (itemTmp) {\n                itemsData.push(itemTmp);\n            }\n        }\n        return itemsData;\n    }\n\n    /**\n     * Converts a result into a item data\n     * @param {TableResult} r\n     * @return {Promise<{ItemData}>} item data\n     */\n    static async resultToItemData(r) {\n        let document = null;\n        if (!r.documentId || r.type === CONST.TABLE_RESULT_TYPES.TEXT) {\n            if (getProperty(r, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_UUID}`)) {\n                document = await fromUuid(\n                    getProperty(r, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_UUID}`),\n                );\n            }\n            if (!document) {\n                return null;\n            }\n        }\n        // if (result.documentCollection === \"Item\") {\n        //   existingItem = game.items.get(result.documentId);\n        // } else {\n        //   const compendium = game.packs.get(result.documentCollection);\n        //   if (compendium) {\n        //     existingItem = await compendium.getDocument(result.documentId);\n        //   }\n        // }\n        // NOTE: The formulaAmount calculation is already done on the betterRoll Method\n        if (getProperty(r, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_UUID}`)) {\n            document = await fromUuid(\n                getProperty(r, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_UUID}`),\n            );\n            if (!document) {\n                try {\n                    const collection =\n                        game.collections.get(r.documentCollection) ??\n                        (await RetrieveHelpers.getCompendiumCollectionAsync(r.documentCollection, true, false));\n                    document = (await collection?.get(r.documentId)) ?? (await collection?.getDocument(r.documentId));\n                } catch (e) {\n                    // DO NOTHING\n                }\n            }\n        } else {\n            try {\n                const collection =\n                    game.collections.get(r.documentCollection) ??\n                    (await RetrieveHelpers.getCompendiumCollectionAsync(r.documentCollection, true, false));\n                document = (await collection?.get(r.documentId)) ?? (await collection?.getDocument(r.documentId));\n            } catch (e) {\n                // DO NOTHING\n            }\n        }\n\n        // Maybe i can remove these double checks...\n        // Try first to load item from compendium\n        if (!document && r.collection) {\n            document = await BRTUtils.getItemFromCompendium(r);\n        }\n        // Try first to load item from item list\n        if (!document) {\n            // if an item with this name exist we load that item data, otherwise we create a new one\n            document = game.items.getName(r.text);\n        }\n\n        if (!document) {\n            Logger.error(`Cannot find document for result`, false, r);\n            return null;\n        }\n\n        // const itemConversions = {\n        //     Actor: {\n        //         name: `${r.text} Portrait`,\n        //         img: document?.img || \"icons/svg/mystery-man.svg\",\n        //         price: new Roll(\"1d20 + 10\").roll({ async: false }).total || 1, // TODO MAKE MORE RANDOM\n        //         type: game.itempiles.API.ITEM_CLASS_LOOT_TYPE,\n        //     },\n        //     Scene: {\n        //         name: `Map of ${document?.name}`,\n        //         img: document?.thumb || \"icons/svg/direction.svg\",\n        //         price: new Roll(\"1d20 + 10\").roll({ async: false }).total || 1, // TODO MAKE MORE RANDOM\n        //         type: game.itempiles.API.ITEM_CLASS_LOOT_TYPE,\n        //     },\n        // };\n\n        // if (!(document instanceof Item)) {\n        //     // const defaultType = Item.TYPES[0]; // TODO add on item piles default item type like actor\n        //     Logger.debug(`You cannot create itemData from this result probably is not a item`, r);\n        //     return null;\n        // }\n\n        let itemTmp = null;\n        let customName = getProperty(r, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_NAME}`);\n        let customImage = getProperty(r, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON}`);\n\n        if (document instanceof Item) {\n            itemTmp = document.toObject();\n            itemTmp.uuid = document.uuid;\n        } else if (document instanceof Actor && game.itempiles.API.ITEM_CLASS_LOOT_TYPE) {\n            Logger.debug(`The Table Result is not a item but a Actor`, false, r);\n            itemTmp = {};\n            itemTmp.name = `${r.text || document?.name} Portrait`;\n            itemTmp.img = document?.img || \"icons/svg/mystery-man.svg\";\n            itemTmp.type = game.itempiles.API.ITEM_CLASS_LOOT_TYPE;\n            ItemPilesHelpers.setItemCost(itemTmp, await BRTBetterHelpers.tryRoll(\"1d20 +10\", 1)); // TODO MAKE MORE RANDOM\n            ItemPilesHelpers.setItemQuantity(itemTmp, 1);\n\n            customName = `${customName || itemTmp.name} Portrait`;\n        } else if (document instanceof Scene && game.itempiles.API.ITEM_CLASS_LOOT_TYPE) {\n            Logger.debug(`The Table Result is not a item but a Scene`, false, r);\n            itemTmp = {};\n            itemTmp.name = `Map of ${r.text || document?.name}`;\n            itemTmp.img = document?.thumb || document?.img || \"icons/svg/direction.svg\";\n            itemTmp.type = game.itempiles.API.ITEM_CLASS_LOOT_TYPE;\n            ItemPilesHelpers.setItemCost(itemTmp, await BRTBetterHelpers.tryRoll(\"1d20 +10\", 1)); // TODO MAKE MORE RANDOM\n            ItemPilesHelpers.setItemQuantity(itemTmp, 1);\n\n            customName = `Map of ${customName || itemTmp.name}`;\n        } else {\n            Logger.debug(`The Table Result is not a item`, false, r);\n            return null;\n        }\n\n        // Update with custom name if present\n        // Set up custom name\n        setProperty(r, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_ORIGINAL_NAME}`, itemTmp.name);\n        if (!customName) {\n            setProperty(r, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_NAME}`, itemTmp.name);\n        } else {\n            setProperty(itemTmp, `name`, customName);\n        }\n        // Set up custom icon\n        setProperty(r, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_ORIGINAL_ICON}`, itemTmp.img);\n        if (!customImage) {\n            setProperty(r, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON}`, itemTmp.img);\n        } else {\n            setProperty(itemTmp, `img`, customImage);\n        }\n        // Set up custom quantity (ty item piles)\n        // TODO DISABLED FOR NOW WE USE THE LOGIC 1:1 INSTEAD N:1 FOR NOW\n        /*\n\n        let customQuantity = getProperty(r, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_QUANTITY}`);\n\n      if (!customQuantity) {\n        setProperty(\n          r,\n          `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_QUANTITY}`,\n          ItemPilesHelpers.getItemQuantity(itemTmp)\n        );\n      } else {\n        setProperty(\n          itemTmp,\n          `quantity`,\n          customQuantity\n        );\n      }\n      */\n        // Merge flags brt to item data\n        if (!getProperty(itemTmp, `flags.${CONSTANTS.MODULE_ID}`)) {\n            setProperty(itemTmp, `flags.${CONSTANTS.MODULE_ID}`, {});\n        }\n        mergeObject(itemTmp.flags[CONSTANTS.MODULE_ID], getProperty(r, `flags.${CONSTANTS.MODULE_ID}`));\n        // itemsData.push(itemTmp);\n        return itemTmp;\n    }\n\n    /**\n     * Preemptively stacks all items in the itemsData, if possible\n     * @deprecated remain for the special case of the harvester module harvester\n     * @param itemsData\n     * @return {*[]|*}\n     */\n    static preStackItems(itemsData) {\n        return RollTableToActorHelpers._preStackItemsImpl(itemsData, false, false, false);\n    }\n\n    /**\n     * Preemptively stacks all items in the itemsData, if possible\n     * @deprecated remain for the special case of the harvester module harvester\n     * @param itemsData\n     * @return {*[]|*}\n     */\n    static preStackItemsSpecialHarvester(itemsData) {\n        return RollTableToActorHelpers._preStackItemsImpl(itemsData, false, true, true);\n    }\n\n    /**\n     * Preemptively stacks all items in the itemsData, if possible\n     * @deprecated remain for the special case of the harvester module harvester\n     * @param itemsData\n     * @return {*[]|*}\n     */\n    static _preStackItemsImpl(itemsData, ignoreQuantity = false, ignorePrice = false, ignoreWeight = false) {\n        const stackAttribute = game.itempiles.API.ITEM_QUANTITY_ATTRIBUTE; // game.settings.get(CONSTANTS.MODULE_ID, SETTINGS.QUANTITY_PROPERTY_PATH);\n        const priceAttribute = game.itempiles.API.ITEM_PRICE_ATTRIBUTE; // game.settings.get(CONSTANTS.MODULE_ID, SETTINGS.PRICE_PROPERTY_PATH);\n        // const weightAttribute = game.settings.get(CONSTANTS.MODULE_ID, SETTINGS.WEIGHT_PROPERTY_PATH);\n        if (!stackAttribute) {\n            return itemsData;\n        }\n        const stackedItemsData = [];\n        for (const item of itemsData) {\n            // const match = stackedItemsData.find((i) => {\n            //   return RollTableToActorHelpers.itemMatches(i, item);\n            // });\n            const match = ItemPilesHelpers.findSimilarItem(stackedItemsData, item);\n            if (!match) {\n                stackedItemsData.push(item);\n            } else {\n                // const newStack = getProperty(match.system, stackAttribute) + (getProperty(item.system, stackAttribute) ?? 1);\n                // setProperty(match, `system.${stackAttribute}`, newStack);\n                if (!ignoreQuantity) {\n                    const newStack = getProperty(match, stackAttribute) + (getProperty(item, stackAttribute) ?? 1);\n                    setProperty(match, `${stackAttribute}`, newStack);\n                }\n                if (!ignorePrice) {\n                    const newPriceValue =\n                        (getProperty(match, priceAttribute)?.value ?? 0) +\n                        (getProperty(item, priceAttribute)?.value ?? 0);\n                    const newPrice = {\n                        denomination: getProperty(item, priceAttribute)?.denomination,\n                        value: newPriceValue,\n                    };\n                    setProperty(match, `${priceAttribute}`, newPrice);\n                }\n                // if (!ignoreWeight) {\n                //   const newWeight = getProperty(match, weightAttribute) + (getProperty(item, weightAttribute) ?? 1);\n                //   setProperty(match, `${weightAttribute}`, newWeight);\n                // }\n            }\n        }\n        return stackedItemsData;\n    }\n\n    /**\n     * Adds the Items item to an actor, stacking them if possible\n     * @param {Actor} actor\n     * @param {Object[]} itemsData\n     * @param {boolean} stackSame\n     * @param {number} customLimit\n     * @returns {Promise<itemsData>}\n     */\n    static async addItemsToActor(actor, itemsData, stackSame = true, customLimit = 0) {\n        const stackAttribute = game.itempiles.API.ITEM_QUANTITY_ATTRIBUTE; // game.settings.get(CONSTANTS.MODULE_ID, SETTINGS.QUANTITY_PROPERTY_PATH);\n        const priceAttribute = game.itempiles.API.ITEM_PRICE_ATTRIBUTE; // game.settings.get(CONSTANTS.MODULE_ID, SETTINGS.PRICE_PROPERTY_PATH);\n        // const weightAttribute = game.settings.get(CONSTANTS.MODULE_ID, SETTINGS.WEIGHT_PROPERTY_PATH);\n        if (!stackAttribute) {\n            return Item.create(itemsData, { parent: actor });\n        }\n        const items = [];\n        for (const item of itemsData) {\n            if (stackSame) {\n                const match = actor.getEmbeddedCollection(\"Item\").find((i) => {\n                    return RollTableToActorHelpers.itemMatches(i, item);\n                });\n                if (match) {\n                    // const newStack = getProperty(match.system, stackAttribute) + (getProperty(item.system, stackAttribute) ?? 1);\n                    const newStack = getProperty(match, stackAttribute) + (getProperty(item, stackAttribute) ?? 1);\n                    const newPriceValue =\n                        (getProperty(match, priceAttribute)?.value ?? 0) +\n                        (getProperty(item, priceAttribute)?.value ?? 0);\n                    const newPrice = {\n                        denomination: getProperty(item, priceAttribute)?.denomination,\n                        value: newPriceValue,\n                    };\n                    // const newWeight = getProperty(match, weightAttribute) + (getProperty(item, weightAttribute) ?? 0);\n\n                    const newQty = RollTableToActorHelpers._handleLimitedQuantity(\n                        newStack,\n                        getProperty(item, stackAttribute),\n                        customLimit,\n                    );\n\n                    await match.update({\n                        [`${stackAttribute}`]: newQty,\n                        [`${priceAttribute}`]: newPrice,\n                        // [`${weightAttribute}`]: newWeight,\n                    });\n                } else {\n                    const i = await Item.create(itemsData, { parent: actor });\n                    items.push(i);\n                }\n            } else {\n                const i = await Item.create(itemsData, { parent: actor });\n                items.push(i);\n            }\n        }\n        return items;\n    }\n\n    static itemMatches(charItem, tableItem) {\n        if (charItem.name !== tableItem.name) {\n            return false;\n        }\n\n        const matchAttributesBlacklist = game.settings.get(CONSTANTS.MODULE_ID, SETTINGS.MATCH_ATTRIBUTES_BLACKLIST);\n\n        const flattenChar = flattenObject(charItem.system);\n        const flattenTable = flattenObject(tableItem.system);\n\n        for (const k of Object.keys(tableItem)) {\n            if (flattenChar[k] == null || flattenTable[k] == null) {\n                continue;\n            }\n            const isBlacklisted = matchAttributesBlacklist.find((b) => k.startsWith(b));\n            if (isBlacklisted != null) {\n                continue;\n            }\n            if (flattenChar[k] !== flattenTable[k]) {\n                Logger.log(flattenChar[k], k);\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // /**\n    //  * Interesting but not necessary there are other modules for this\n    //  * Hooks.on('renderItemSheet', (_app, element, _options) => injectRightClickContentLink(element));\n    //  * Hooks.on('renderActorSheet', (_app, element, _options) => injectRightClickContentLink(element));\n    //  * @param {*} appElement\n    //  */\n    // static async injectRightClickContentLink(appElement) {\n    //   const contentLinks = appElement.find('.content-link[data-type=\"RollTable\"]');\n    //   contentLinks.mousedown(async (ev) => {\n    //     if (ev.which !== 3) return;\n    //     const tableUuid = ev.currentTarget.dataset.uuid;\n    //     if (!tableUuid) return;\n    //     const tableDocument = await fromUuid(tableUuid);\n    //     const roll = await tableDocument.roll();\n    //     await tableDocument?.draw({\n    //       roll: roll.roll,\n    //       results: roll.results,\n    //       rollMode: game.settings.get(\"core\", \"rollMode\"),\n    //     });\n    //   });\n    // }\n\n    /**\n     *\n     * @param {Actor} actor to which to add items to\n     * @param {TableResult[]} results\n     * @param {boolean} stackSame if true add quantity to an existing item of same name in the current actor\n     * @param {number} customLimit\n     *\n     * @returns {object[]} items\n     */\n    static async addResultsToActor(actor, results, stackSame = true, customLimit = 0) {\n        // Grab the items\n        let itemsData = await RollTableToActorHelpers.resultsToItemsData(results);\n        if (itemsData.length === 0) {\n            return;\n        }\n        itemsData = RollTableToActorHelpers.preStackItems(itemsData);\n        const items = await RollTableToActorHelpers.addItemsToActor(actor, itemsData, stackSame, customLimit);\n        return items;\n    }\n\n    /**\n     * @deprecated\n     * @param {Actor} actor to which to add items to\n     * @param {TableResult[]} results\n     * @param {boolean} stackSame if true add quantity to an existing item of same name in the current actor\n     * @param {number} customLimit\n     *\n     * @returns {object[]} items\n     */\n    static async addItemsToActorOld(actor, results, stackSame = true, customLimit = 0) {\n        // const items = [];\n        // for (const item of results) {\n        //   const newItem = await RollTableToActorHelpers._createItem(item, actor, stackSame, customLimit);\n        //   items.push(newItem);\n        // }\n        // return items;\n        const items = await RollTableToActorHelpers.addResultsToActor(actor, results, stackSame, customLimit);\n        return items;\n    }\n\n    /**\n     * @deprecated very old method\n     * @param {token} token\n     * @param {TableResult[]} results\n     * @param {boolean} stackSame\n     * @param {boolean} isTokenActor - is the token already the token actor?\n     * @param {number} customLimit\n     *\n     * @returns {object[]} items\n     */\n    static async addItemsToTokenOld(token, results, stackSame = true, isTokenActor = false, customLimit = 0) {\n        // const items = [];\n        // for (const item of results) {\n        //   // Create the item making sure to pass the token actor and not the base actor\n        //   const targetActor = isTokenActor ? token : token.actor;\n        //   const newItem = await RollTableToActorHelpers._createItem(item, targetActor, stackSame, customLimit);\n        //   items.push(newItem);\n        // }\n        const items = await RollTableToActorHelpers.addResultsToControlledTokens(\n            token,\n            results,\n            stackSame,\n            isTokenActor,\n            customLimit,\n        );\n        return items;\n    }\n\n    // /**\n    //  * @deprecated not used anymore\n    //  * @param {TableResult} result representation\n    //  * @param {Actor} actor to which to add items to\n    //  * @param {boolean} stackSame if true add quantity to an existing item of same name in the current actor\n    //  * @param {number} customLimit\n    //  * @returns {Item} the create Item (foundry item)\n    //  */\n    // static async _createItem(result, actor, stackSame = true, customLimit = 0) {\n    //     const newItemData = await RollTableToActorHelpers.buildItemData(result);\n    //     const priceAttribute = game.itempiles.API.ITEM_PRICE_ATTRIBUTE; // SETTINGS.PRICE_PROPERTY_PATH\n    //     const itemPrice = getProperty(newItemData, priceAttribute) || 0;\n    //     const embeddedItems = [...actor.getEmbeddedCollection(\"Item\").values()];\n    //     const originalItem = embeddedItems.find(\n    //         (i) => i.name === newItemData.name && itemPrice === getProperty(i, priceAttribute),\n    //     );\n\n    //     /** if the item is already owned by the actor (same name and same PRICE) */\n    //     if (originalItem && stackSame) {\n    //         /** add quantity to existing item */\n\n    //         const stackAttribute = game.itempiles.API.ITEM_QUANTITY_ATTRIBUTE; // game.settings.get(CONSTANTS.MODULE_ID, SETTINGS.QUANTITY_PROPERTY_PATH);\n    //         const priceAttribute = game.itempiles.API.ITEM_PRICE_ATTRIBUTE; // game.settings.get(CONSTANTS.MODULE_ID, SETTINGS.PRICE_PROPERTY_PATH);\n    //         // const weightAttribute = game.settings.get(CONSTANTS.MODULE_ID, SETTINGS.WEIGHT_PROPERTY_PATH);\n\n    //         const newItemQty = getProperty(newItemData, stackAttribute) || 1;\n    //         const originalQty = getProperty(originalItem, stackAttribute) || 1;\n    //         const updateItem = { _id: originalItem.id };\n    //         const newQty = RollTableToActorHelpers._handleLimitedQuantity(newItemQty, originalQty, customLimit);\n\n    //         if (newQty != newItemQty) {\n    //             setProperty(updateItem, stackAttribute, newQty);\n\n    //             const newPriceValue =\n    //                 (getProperty(originalItem, priceAttribute)?.value ?? 0) +\n    //                 (getProperty(newItemData, priceAttribute)?.value ?? 0);\n    //             const newPrice = {\n    //                 denomination: getProperty(item, priceAttribute)?.denomination,\n    //                 value: newPriceValue,\n    //             };\n    //             setProperty(updateItem, `${priceAttribute}`, newPrice);\n\n    //             // const newWeight = getProperty(originalItem, weightAttribute) + (getProperty(newItemData, weightAttribute) ?? 1);\n    //             // setProperty(updateItem, `${weightAttribute}`, newWeight);\n\n    //             await actor.updateEmbeddedDocuments(\"Item\", [updateItem]);\n    //         }\n    //         return actor.items.get(originalItem.id);\n    //     } else {\n    //         /** we create a new item if we don't own already */\n    //         return await actor.createEmbeddedDocuments(\"Item\", [newItemData]);\n    //     }\n    // }\n\n    /**\n     *\n     * @param {number} currentQty Quantity of item we want to add\n     * @param {number} originalQty Quantity of the originalItem already in posession\n     * @param {number} customLimit A custom Limit\n     * @returns\n     */\n    static _handleLimitedQuantity(currentQty, originalQty, customLimit = 0) {\n        const newQty = Number(originalQty) + Number(currentQty);\n\n        if (customLimit > 0) {\n            // limit is bigger or equal to newQty\n            if (Number(customLimit) >= Number(newQty)) {\n                return newQty;\n            }\n            //limit was reached, we stick to that limit\n            return customLimit;\n        }\n\n        //we don't care for the limit\n        return newQty;\n    }\n\n    // /**\n    //  * @deprecated we use instead RollTableToActorHelpers.resultToItemData(result)\n    //  * @param {TableResult} result\n    //  * @returns\n    //  */\n    // static async buildItemData(result) {\n    //     /*\n    // // PATCH 2023-10-04\n    // let customResultName = undefined;\n    // let customResultImg = undefined;\n    // if (getProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_NAME}`)) {\n    //   customResultName = getProperty(\n    //     result,\n    //     `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_NAME}`\n    //   );\n    // }\n\n    // if (getProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON}`)) {\n    //   customResultImg = getProperty(\n    //     result,\n    //     `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON}`\n    //   );\n    // }\n\n    // let existingItem = undefined;\n\n    // let docUuid = getProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_UUID}`);\n    // if (docUuid) {\n    //   existingItem = await fromUuid(docUuid);\n    // }\n\n    // if (result.documentCollection === \"Item\") {\n    //   existingItem = game.items.get(result.documentId);\n    // } else {\n    //   const compendium = game.packs.get(result.documentCollection);\n    //   if (compendium) {\n    //     existingItem = await compendium.getDocument(result.documentId);\n    //   }\n    // }\n\n    // // Try first to load item from compendium\n    // if (!existingItem && result.collection) {\n    //   existingItem = await BRTUtils.getItemFromCompendium(result);\n    // }\n\n    // // Try first to load item from item list\n    // if (!existingItem) {\n    //   // if an item with this name exist we load that item data, otherwise we create a new one\n    //   existingItem = game.items.getName(result.text);\n    // }\n\n    // if (!existingItem) {\n    //   Logger.error(`Cannot find document for result`, false, result);\n    //   return null;\n    // }\n\n    // let itemData = duplicate(existingItem);\n\n    // if (customResultName) {\n    //   itemData.name = customResultName;\n    // }\n    // if (customResultImg) {\n    //   itemData.img = customResultImg;\n    // }\n\n    // if(!itemData.type) {\n    //    itemData.type = CONSTANTS.ITEM_LOOT_TYPE;\n    // }\n\n    // const itemConversions = {\n    //   Actor: {\n    //     text: customResultName ? `${customResultName} Portrait` : `${result.text} Portrait`,\n    //     img: customResultImg || existingItem?.img || \"icons/svg/mystery-man.svg\",\n    //     price: new Roll(\"1d20 + 10\").roll({ async: false }).total || 1,\n    //   },\n    //   Scene: {\n    //     text: customResultName ? `Map of ${customResultName}` : `Map of ${existingItem?.name}`,\n    //     img: customResultImg || existingItem?.thumb || \"icons/svg/direction.svg\",\n    //     price: new Roll(\"1d20 + 10\").roll({ async: false }).total || 1,\n    //   },\n    // };\n\n    // const convert = itemConversions[existingItem?.documentName] ?? false;\n    // //  Create item from text since the item does not exist\n    // const createNewItem = !existingItem || convert;\n\n    // if (createNewItem) {\n    //   const name = convert ? convert?.text : result.text;\n    //   const type = CONSTANTS.ITEM_LOOT_TYPE;\n    //   const img = convert ? convert?.img : result.img;\n    //   const price = convert ? convert?.price : result.price || 0;\n\n    //   itemData = {\n    //     name: name,\n    //     type: type,\n    //     img: img, // \"icons/svg/mystery-man.svg\"\n    //     system: {\n    //       price: price,\n    //     },\n    //   };\n    // }\n\n    // if (Object.getOwnPropertyDescriptor(result, \"commands\") && result.commands) {\n    //   itemData = RollTableToActorHelpers._applyCommandToItemData(itemData, result.commands);\n    // }\n\n    // if (!itemData) {\n    //   return;\n    // }\n    // */\n    //     const itemData = RollTableToActorHelpers.resultToItemData(result);\n    //     return itemData;\n    // }\n\n    /**\n     *\n     * @param {object} itemData\n     * @param {object[]} commands\n     * @returns {object} itemData\n     */\n    static _applyCommandToItemData(itemData, commands) {\n        for (const cmd of commands) {\n            // TODO check the type of command, that is a command to be rolled and a valid command\n            let rolledValue;\n            try {\n                rolledValue = new Roll(cmd.arg).roll({ async: false }).total;\n            } catch (e) {\n                Logger.error(e.message, false, e);\n                continue;\n            }\n            setProperty(itemData, `system.${cmd.command.toLowerCase()}`, rolledValue);\n        }\n        return itemData;\n    }\n\n    /** MANIPULATOR */\n\n    // /**\n    //  *\n    //  * @param {number} level\n    //  *\n    //  * @returns {Item}\n    //  */\n    // static async _getRandomSpell(level) {\n    //   const spells = API.betterTables\n    //       .getSpellCache()\n    //       .filter((spell) => getProperty(spell, CONSTANTS.SPELL_LEVEL_PATH) === level),\n    //     spell = spells[Math.floor(Math.random() * spells.length)];\n    //   return BRTUtils.findInCompendiumById(spell.collection, spell._id);\n    // }\n\n    // /**\n    //  *\n    //  * @param {*} itemData\n    //  *\n    //  * @returns\n    //  */\n    // static async preItemCreationDataManipulation(itemData) {\n    //   const match = CONSTANTS.SCROLL_REGEX.exec(itemData.name);\n\n    //   itemData = duplicate(itemData);\n\n    //   if (!match) {\n    //     return itemData;\n    //   }\n\n    //   // If it is a scroll then open the compendium\n    //   const level = match[1].toLowerCase() === \"cantrip\" ? 0 : parseInt(match[1]);\n    //   const itemEntity = await RollTableToActorHelpers._getRandomSpell(level);\n\n    //   if (!itemEntity) {\n    //     Logger.warn(\n    //       ` | No spell of level ${level} found in compendium  ${itemEntity.collection} `, true\n    //     );\n    //     return itemData;\n    //   }\n\n    //   const itemLink = `@Compendium[${itemEntity.pack}.${itemEntity._id}]`;\n    //   // make the name shorter by removing some text\n    //   itemData.name = itemData.name.replace(/^(Spell\\s)/, \"\");\n    //   itemData.name = itemData.name.replace(/(Cantrip\\sLevel)/, \"Cantrip\");\n    //   itemData.name += ` (${itemEntity.name})`;\n    //   itemData.system.description.value =\n    //     \"<blockquote>\" +\n    //     itemLink +\n    //     \"<br />\" +\n    //     itemEntity.system.description.value +\n    //     \"<hr />\" +\n    //     itemData.system.description.value +\n    //     \"</blockquote>\";\n    //   return itemData;\n    // }\n}\n","import { RollTableToActorHelpers } from \"../../apps/rolltable-to-actor/rolltable-to-actor-helpers\";\nimport { CONSTANTS } from \"../../constants/constants\";\nimport { BRTBetterHelpers } from \"../better/brt-helper\";\nimport { BetterResults } from \"../../core/brt-table-results\";\nimport { LootChatCard } from \"./loot-chat-card\";\nimport { BRTUtils } from \"../../core/utils\";\nimport { BetterRollTable } from \"../../core/brt-table\";\nimport SETTINGS from \"../../constants/settings\";\nimport Logger from \"../../lib/Logger\";\nimport ItemPilesHelpers from \"../../lib/item-piles-helpers\";\nimport { isRealBoolean } from \"../../lib/lib\";\n\nexport class BRTLootHelpers {\n    /**\n     * Roll a table an add the resulting loot to a given token.\n     *\n     * @param {RollTable} tableEntity\n     * @param {TokenDocument} token\n     * @param {options} object\n     * @returns\n     */\n    static async addLootToSelectedToken(tableEntity, token = null, options = {}) {\n        let tokenstack = [];\n        if (null == token && canvas.tokens.controlled.length === 0) {\n            return Logger.error(\"Please select a token first\", true);\n        } else {\n            tokenstack = token ? (token.constructor === Array ? token : [token]) : canvas.tokens.controlled;\n        }\n        Logger.info(\"Loot generation started.\", true);\n\n        const brtTable = new BetterRollTable(tableEntity, options);\n        await brtTable.initialize();\n\n        for (const token of tokenstack) {\n            Logger.info(`Loot generation started on token '${token.name}'`, true);\n            /*\n            await ItemPilesHelpers.populateActorOrTokenViaTable(token, tableEntity, options);\n\n            const currencyString = tableEntity.getFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.LOOT_CURRENCY_STRING_KEY);\n            const currencyDataForItemPiles = ItemPilesHelpers.generateCurrenciesStringFromString(currencyString);\n            await ItemPilesHelpers.addCurrencies(token, currencyDataForItemPiles);\n            */\n            const resultsBrt = await brtTable.betterRoll();\n\n            const rollMode = brtTable.rollMode;\n            const roll = brtTable.mainRoll;\n            const results = resultsBrt?.results;\n\n            const br = new BetterResults(\n                tableEntity,\n                results,\n                options?.stackResultsWithBRTLogic,\n                options?.rollAsTableType,\n            );\n            const betterResults = await br.buildResults();\n            const currencyData = br.getCurrencyData();\n\n            const currencyDataForItemPiles = ItemPilesHelpers.generateCurrenciesStringFromString(currencyData);\n\n            await ItemPilesHelpers.addCurrencies(token, currencyDataForItemPiles);\n            await ItemPilesHelpers.populateActorOrTokenViaTableResults(token, results);\n\n            Logger.info(`Loot generation ended on token '${token.name}'`, true);\n\n            if (isRealBoolean(options.displayChat)) {\n                if (!options.displayChat) {\n                    continue;\n                }\n            }\n\n            const lootChatCard = new LootChatCard(betterResults, currencyData, rollMode, roll);\n            await lootChatCard.createChatCard(tableEntity);\n        }\n        Logger.info(\"Loot generation complete.\", true);\n        return;\n    }\n\n    /**\n     *\n     * @param {*} tableEntity\n     */\n    static async generateLoot(tableEntity, options = {}) {\n        const brtTable = new BetterRollTable(tableEntity, options);\n        await brtTable.initialize();\n\n        const resultsBrt = await brtTable.betterRoll();\n\n        const rollMode = brtTable.rollMode;\n        const roll = brtTable.mainRoll;\n        const results = resultsBrt?.results;\n\n        const br = new BetterResults(tableEntity, results, options?.stackResultsWithBRTLogic, options?.rollAsTableType);\n        const betterResults = await br.buildResults();\n        const currencyData = br.getCurrencyData();\n        /*\n    const isTokenActor = brtTable.options?.isTokenActor;\n    const stackSame = brtTable.options?.stackSame;\n    const itemLimit = brtTable.options?.itemLimit;\n    const actor = await BRTLootHelpers.createActor(tableEntity);\n    await BRTLootHelpers.addCurrenciesToActor(actor, currencyData);\n    await RollTableToActorHelpers.addItemsToActorOld(actor, betterResults, stackSame, itemLimit);\n    */\n        const actor = await BRTLootHelpers.createActor(tableEntity);\n        // const currencyString = tableEntity.getFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.LOOT_CURRENCY_STRING_KEY);\n        const currencyDataForItemPiles = ItemPilesHelpers.generateCurrenciesStringFromString(currencyData);\n\n        await ItemPilesHelpers.addCurrencies(actor, currencyDataForItemPiles);\n        await ItemPilesHelpers.populateActorOrTokenViaTableResults(actor, results);\n\n        // if (game.settings.get(CONSTANTS.MODULE_ID, CONSTANTS.ALWAYS_SHOW_GENERATED_LOOT_AS_MESSAGE)) {\n        if (isRealBoolean(options.displayChat)) {\n            if (!options.displayChat) {\n                return;\n            }\n        }\n\n        const lootChatCard = new LootChatCard(betterResults, currencyData, rollMode, roll);\n        await lootChatCard.createChatCard(tableEntity);\n        // }\n    }\n\n    static async generateChatLoot(tableEntity, options = {}) {\n        const brtTable = new BetterRollTable(tableEntity, options);\n        await brtTable.initialize();\n        const resultsBrt = await brtTable.betterRoll();\n\n        const rollMode = brtTable.rollMode;\n        const roll = brtTable.mainRoll;\n        const results = resultsBrt?.results;\n\n        const br = new BetterResults(tableEntity, results, options?.stackResultsWithBRTLogic, options?.rollAsTableType);\n        const betterResults = await br.buildResults();\n        const currencyData = br.getCurrencyData();\n\n        const lootChatCard = new LootChatCard(betterResults, currencyData, rollMode, roll);\n\n        await lootChatCard.createChatCard(tableEntity);\n    }\n\n    // /**\n    //  * @deprecated to remove we use item piles now\n    //  * @param {*} actor\n    //  * @param {*} lootCurrency\n    //  */\n    // static async addCurrenciesToActor(actor, lootCurrency) {\n    //   const currencyData = duplicate(actor.system.currency);\n    //   // const lootCurrency = this.currencyData;\n\n    //   for (const key in lootCurrency) {\n    //     if (Object.getOwnPropertyDescriptor(currencyData, key)) {\n    //       const amount = Number(currencyData[key].value || 0) + Number(lootCurrency[key]);\n    //       currencyData[key] = amount.toString();\n    //     }\n    //   }\n    //   await actor.update({ \"system.currency\": currencyData });\n    // }\n\n    // /**\n    //  * @deprecated not used anymore\n    //  * @param {Token|Actor} token\n    //  * @param {Object} currencyData\n    //  * @param {Boolean} is the token passed as the token actor instead?\n    //  */\n    // static async addCurrenciesToToken(token, lootCurrency, isTokenActor = false) {\n    //   // needed for base key set in the event that a token has no currency properties\n    //   const currencyDataInitial = { cp: 0, ep: 0, gp: 0, pp: 0, sp: 0 };\n    //   let currencyData = currencyDataInitial;\n\n    //   if (isTokenActor) {\n    //     currencyData = duplicate(token.system.currency);\n    //   } else if (token.actor.system.currency) {\n    //     currencyData = duplicate(token.actor.system.currency);\n    //   }\n\n    //   // const lootCurrency = currencyData;\n\n    //   for (const key in currencyDataInitial) {\n    //     const amount = Number(currencyData[key] || 0) + Number(lootCurrency[key] || 0);\n    //     currencyData[key] = amount;\n    //   }\n\n    //   if (isTokenActor) {\n    //     // @type {Actor}\n    //     return await token.update({ \"system.currency\": currencyData });\n    //   } else {\n    //     return await token.actor.update({ \"system.currency\": currencyData });\n    //   }\n    // }\n\n    static async createActor(table, overrideName = undefined) {\n        const actorName = overrideName || table.getFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.LOOT_ACTOR_NAME_KEY);\n        let actor = game.actors.getName(actorName);\n        if (!actor) {\n            actor = await Actor.create({\n                name: actorName || \"New Loot\",\n                type: game.itempiles.API.ACTOR_CLASS_TYPE, // game.settings.get(CONSTANTS.MODULE_ID, SETTINGS.DEFAULT_ACTOR_NPC_TYPE),\n                img: `modules/${CONSTANTS.MODULE_ID}/assets/artwork/chest.webp`,\n                sort: 12000,\n                token: { actorLink: true },\n            });\n        }\n\n        // const lootSheet = game.settings.get(CONSTANTS.MODULE_ID, CONSTANTS.LOOT_SHEET_TO_USE_KEY);\n        // if (lootSheet in CONFIG.Actor.sheetClasses.npc) {\n        //   await actor.setFlag(\"core\", \"sheetClass\", lootSheet);\n        // }\n        return actor;\n    }\n\n    // /**\n    //  *\n    //  * @param {TableResult} result\n    //  * @returns {Array<{value:number,denom:string}>} currency extracted to insert on the actor\n    //  */\n    // static async retrieveLootFromTextLootRoll(result) {\n    //   var rollMap = formatLootRoll(result.text);\n\n    //   let currencyDataCalculate = [];\n    //   for (let [key, value] of rollMap) {\n    //     // var roll = new Roll(value);\n    //     // var rollResult = roll.roll({async: false});\n    //     var rollResult = await BRTBetterHelpers.tryRoll(value);\n    //     currencyDataCalculate.push({\n    //       value: rollResult,\n    //       denom: key\n    //     })\n    //   }\n    //   return currencyDataCalculate;\n    // }\n\n    // static formatLootRoll(resultText)\n    // {\n    //   let rollTableResult = resultText.replace(/(\\[\\[\\/r\\s)?(\\]\\])?(\\}$)?/g,\"\").split(\"}\");\n    //   let returnMap = new Map();\n\n    //   for(let i = 0; i < rollTableResult.length; i++)\n    //   {\n    //     let extractedRoll = rollTableResult[i].split(\"{\");\n    //     returnMap.set(extractedRoll[1], extractedRoll[0]);\n    //   }\n    //   return returnMap;\n    // }\n}\n","import { CONSTANTS } from \"../../constants/constants.js\";\nimport Logger from \"../../lib/Logger.js\";\nimport ItemPilesHelpers from \"../../lib/item-piles-helpers.js\";\nimport { RetrieveHelpers } from \"../../lib/retrieve-helpers.js\";\nimport API from \"../../API.js\";\nimport { BRTUtils } from \"../../core/utils.js\";\n\nexport default class BRTActorList extends FormApplication {\n    static initializeActorList(app, array) {\n        if (!game.user.isGM) {\n            return;\n        }\n        const listButton = {\n            class: CONSTANTS.MODULE_ID,\n            icon: \"fa-solid fa-table-rows\",\n            onclick: async () => new BRTActorList(app.document).render(true),\n            label: game.i18n.localize(`${CONSTANTS.MODULE_ID}.label.HeaderActorList`),\n        };\n        const isChar2 = app.constructor.name === \"ActorSheet5eCharacter2\";\n        if (!isChar2 && !game.settings.get(CONSTANTS.MODULE_ID, \"headerActorListLabel\")) {\n            delete listButton.label;\n        }\n        array.unshift(listButton);\n    }\n\n    constructor(actor, options = {}) {\n        super(actor, options);\n        this.actor = actor;\n        this.clone = actor.clone({}, { keepId: true });\n    }\n\n    /** @override */\n    get title() {\n        return game.i18n.format(`${CONSTANTS.MODULE_ID}.label.TitleActorList`, { name: this.actor.name });\n    }\n\n    /** @override */\n    get id() {\n        return `${CONSTANTS.MODULE_ID}-${this.actor.uuid.replaceAll(\".\", \"-\")}`;\n    }\n\n    /** @override */\n    static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: [CONSTANTS.MODULE_ID],\n            template: `modules/${CONSTANTS.MODULE_ID}/templates/sheet/brt-actor-config-list.hbs`,\n            dragDrop: [{ dropSelector: \"[data-action='drop']\" }],\n            scrollY: [\".roll-table-list\"],\n            width: 550,\n            height: \"auto\",\n        });\n    }\n\n    /**\n     * Get the roll table types that can have quantity and type.\n     * @returns {Set<string>}     The valid roll table types.\n     */\n    static get validRollTableTypes() {\n        return new Set(CONSTANTS.TYPES);\n    }\n\n    get validRollTableTypes() {\n        return this.constructor.validRollTableTypes;\n    }\n\n    /** @override */\n    async getData(options = {}) {\n        const currencies = this._gatherCurrencies();\n\n        const rollTableList = this._gatherTables()\n            .reduce((acc, data) => {\n                const rollTable = RetrieveHelpers.getRollTableSync(data.uuid); // fromUuidSync(data.uuid ?? \"\");\n                if (rollTable) {\n                    acc.push({ ...data, name: rollTable.name, img: rollTable.img });\n                }\n                return acc;\n            }, [])\n            .sort((a, b) => a.name.localeCompare(b.name));\n\n        /*\n    const currs = this._gatherCurrencies();\n    const currencies = currs.map((c) => {\n        return {\n            key: c.abbreviation,\n            value: ItemPilesHelpers.retrieveCurrency(this.actor, c.abbreviation) ?? 0,\n            label: c.name\n        };\n    });\n    */\n        return {\n            rollTableList: rollTableList,\n            currencies: currencies,\n            brtTypes: CONSTANTS.TYPES,\n        };\n    }\n\n    // /** @override */\n    // async _onChangeInput(event) {\n    //     if (event.currentTarget.closest(\"[data-currencies]\")?.dataset?.currencies) {\n    //         // const currencies = event.currentTarget.closest(\"[data-currencies]\").value;\n    //         // this.clone.updateSource({[`flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.ACTOR_LIST.CURRENCIES}`]: currencies});\n    //         const data = this._getSubmitData();\n    //         this.clone.updateSource(data);\n    //     } else {\n    //         const uuid = event.currentTarget.closest(\"[data-uuid]\").dataset.uuid;\n    //         const quantity = event.currentTarget.closest(\"[data-quantity]\").dataset.quantity;\n    //         const brtType= event.currentTarget.closest(\"[data-brtType]\").dataset.brtType;\n    //         this._updateQuantity(uuid, quantity, brtType);\n    //     }\n    //     return this.render();\n    // }\n\n    /**\n     * Get an object of update data used to update the form's target object\n     * @param {object} updateData     Additional data that should be merged with the form data\n     * @returns {object}               The prepared update data\n     * @protected\n     * @override\n     */\n    _getSubmitData(updateData = {}) {\n        let dataTmp = super._getSubmitData(updateData);\n        dataTmp = foundry.utils.expandObject(dataTmp);\n\n        let currencies = foundry.utils.getProperty(\n            dataTmp,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.ACTOR_LIST.CURRENCIES}`,\n        );\n\n        let rollTableListToPatch = foundry.utils.getProperty(\n            dataTmp,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.ACTOR_LIST.ROLL_TABLES_LIST}`,\n        );\n\n        const rollTableList = [];\n        if (rollTableListToPatch) {\n            for (const [key, value] of Object.entries(rollTableListToPatch)) {\n                rollTableList.push(value);\n            }\n        }\n        this.clone.updateSource({\n            [`flags.${CONSTANTS.MODULE_ID}`]: {\n                [`${CONSTANTS.FLAGS.ACTOR_LIST.CURRENCIES}`]: currencies,\n                [`${CONSTANTS.FLAGS.ACTOR_LIST.ROLL_TABLES_LIST}`]: rollTableList,\n            },\n        });\n\n        foundry.utils.setProperty(dataTmp, `flags.${CONSTANTS.MODULE_ID}`, {});\n        foundry.utils.setProperty(\n            dataTmp,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.ACTOR_LIST.ROLL_TABLES_LIST}`,\n            rollTableList,\n        );\n        foundry.utils.setProperty(\n            dataTmp,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.ACTOR_LIST.CURRENCIES}`,\n            currencies,\n        );\n\n        dataTmp = foundry.utils.flattenObject(dataTmp);\n\n        return dataTmp;\n    }\n\n    /** @override */\n    async _onDrop(event) {\n        event.stopPropagation();\n        event.target.closest(\"[data-action='drop']\").classList.remove(\"drag-over\");\n        const data = TextEditor.getDragEventData(event);\n        const rollTables = await this._validateDrops(data);\n        if (!rollTables) {\n            return;\n        }\n        for (const rollTable of rollTables) {\n            const uuid = rollTable.uuid;\n            const name = rollTable.name;\n            this._updateQuantity(\n                uuid,\n                BRTUtils.retrieveBRTRollAmount(rollTable) || \"1\",\n                BRTUtils.retrieveBRTType(rollTable),\n            );\n        }\n        Logger.info(\n            Logger.i18nFormat(`${CONSTANTS.MODULE_ID}.label.WarningAddedRollTables`, {\n                amount: rollTables.length,\n                name: this.clone.name,\n            }),\n            true,\n        );\n        return this.render();\n    }\n\n    /**\n     * Update the quantity of an existing roll table on the list.\n     * @param {string} uuid           The uuid of the roll table to update. Add it if not found.\n     * @param {string} [quantity]     A specific value to set it to, otherwise add 1.\n     * @param {string} [brtType]\n     * @returns {void}\n     */\n    _updateQuantity(uuid, quantity = null, brtType = null) {\n        const list = this._gatherTables();\n        const existing = list.find((e) => e.uuid === uuid);\n        if (existing) {\n            existing.quantity = quantity ? quantity : existing.quantity;\n            existing.brtType = brtType ? brtType : existing.brtType;\n        } else {\n            list.push({\n                quantity: quantity ? quantity : \"1\",\n                brtType: brtType ? brtType : \"none\",\n                uuid: uuid,\n            });\n        }\n        this.clone.updateSource({\n            [`flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.ACTOR_LIST.ROLL_TABLES_LIST}`]: list,\n        });\n    }\n\n    /** @override */\n    async _onDragOver(event) {\n        event.target.closest(\"[data-action='drop']\")?.classList.add(\"drag-over\");\n    }\n\n    /** @override */\n    async _updateObject() {\n        const update = this.clone.flags[CONSTANTS.MODULE_ID];\n        return this.actor.update({ [`flags.${CONSTANTS.MODULE_ID}`]: update });\n    }\n\n    /** @override */\n    activateListeners(html) {\n        super.activateListeners(html);\n        html[0].querySelectorAll(\"[data-action]\").forEach((n) => {\n            switch (n.dataset.action) {\n                case \"delete\":\n                    n.addEventListener(\"click\", this._onClickRollTableDelete.bind(this));\n                    break;\n                case \"render\":\n                    n.addEventListener(\"click\", this._onClickRollTableName.bind(this));\n                    break;\n                case \"drop\":\n                    n.addEventListener(\"dragleave\", this._onDragLeaveBox.bind(this));\n                    break;\n                case \"clear\":\n                    n.addEventListener(\"click\", this._onClickClear.bind(this));\n                    break;\n                case \"grant\":\n                    n.addEventListener(\"click\", this._onClickGrant.bind(this));\n                    break;\n            }\n        });\n        html[0].querySelectorAll(\"input[type=text]\").forEach((n) => {\n            n.addEventListener(\"focus\", (event) => event.currentTarget.select());\n        });\n    }\n\n    /**\n     * Grant the loot and currency list to the targeted token's actor.\n     * @param {PointerEvent} event      The initiating click event.\n     * @returns {Promise<void>}\n     */\n    async _onClickGrant(event) {\n        const rollTablesArrayBase = this._gatherTables();\n        const currencies = this._gatherCurrencies();\n        const target = game.user.targets.first()?.actor;\n        if (!target) {\n            Logger.warn(Logger.i18nFormat(`${CONSTANTS.MODULE_ID}.label.WarningNoTarget`, {}), true);\n            return;\n        }\n\n        const data = target.getRollData();\n\n        const rollTables = [];\n        const rollTableArray = await Promise.all(\n            rollTablesArrayBase.map(async ({ quantity, brtType, uuid }) => {\n                const rollTable = await RetrieveHelpers.getRollTableAsync(uuid);\n                return {\n                    quantity: quantity,\n                    brtType: brtType,\n                    uuid: uuid,\n                    rollTable: rollTable,\n                };\n            }),\n        );\n\n        /*\n    const rollTablesUpdates = [];\n    const update = {};\n    let created = 0;\n    const rollTableArray = await Promise.all(rollTablesArrayBase.map(async ({quantity, uuid}) => {\n       const rollTable = await RetrieveHelpers.getRollTableAsync(uuid);\n       return [quantity, uuid, rollTable];\n    }));\n    for (const [quantity, uuid, rollTable] of rollTableArray) {\n      if (!rollTable) {\n        Logger.warn(Logger.i18nFormat(`${CONSTANTS.MODULE_ID}.label.WarningRollTableNotFound`,{uuid:uuid}),true);\n        continue;\n      }\n      const {total} = await new Roll(quantity, data).evaluate();\n      const rollTableData = await RetrieveHelpers.getRollTableAsync(rollTable);\n      rollTableData.system.quantity = Math.max(1, total);\n      if (rollTableData.system.attunement > 1) {\n        rollTableData.system.attunement = 1;\n      }\n      delete rollTableData.system.equipped;\n\n      const existing = target.items.find(item => item.flags.core?.sourceId === uuid);\n      if (existing && [\"loot\", \"consumable\"].includes(existing.type)) {\n        rollTablesUpdates.push({_id: existing.id, \"system.quantity\": existing.system.quantity + rollTableData.system.quantity})\n      } else rollTables.push(rollTableData);\n      created += rollTableData.system.quantity;\n    }\n    for (const [key, value] of Object.entries(currencies)) {\n      try {\n        const {total} = await new Roll(value, data).evaluate();\n        update[`system.currency.${key}`] = target.system.currency[key] + Math.max(0, total);\n      } catch (err) {\n        console.warn(err);\n      }\n    }\n    */\n\n        /**\n         * A hook that is called before updates are performed.\n         * @param {Actor} target               The target to receive currencies and roll tables.\n         * @param {RollTable[]} rollTables     The roll table data for new roll tables to be created.\n         */\n        Hooks.callAll(`${CONSTANTS.MODULE_ID}.preGrantRollTables`, target, rollTableArray);\n\n        /*\n    await target.update(update);\n    await target.updateEmbeddedDocuments(\"Item\", rollTablesUpdates);\n    await target.createEmbeddedDocuments(\"Item\", rollTables);\n    Logger.info(Logger.i18nFormat(`${CONSTANTS.MODULE_ID}.label.WarningCreatedRollTables`, {amount: created, name: target.name}), true);\n    */\n\n        for (const rollTableElement of rollTableArray) {\n            await API.addRollTableItemsToActor({\n                table: rollTableElement.uuid,\n                actor: target,\n                options: {\n                    rollsAmount: rollTableElement.quantity,\n                    rollAsTableType: rollTableElement.brtType,\n                },\n            });\n        }\n\n        await ItemPilesHelpers.addCurrencies(target, currencies);\n\n        /**\n         * A hook that is called after updates are performed.\n         * @param {Actor} target               The target to receive currencies and roll tables.\n         * @param {RollTable[]} rollTables     The roll table data for new roll tables to be created.\n         */\n        Hooks.callAll(`${CONSTANTS.MODULE_ID}.grantRollTables`, target, rollTables);\n    }\n\n    /**\n     * Remove all roll tables on the sheet. This does not stick unless saved.\n     * @param {PointerEvent} event      The initiating click event.\n     * @returns {BRTActorList}\n     */\n    _onClickClear(event) {\n        this.clone.updateSource({\n            [`flags.${CONSTANTS.MODULE_ID}`]: {\n                [`${CONSTANTS.FLAGS.ACTOR_LIST.ROLL_TABLES_LIST}`]: [],\n                [`${CONSTANTS.FLAGS.ACTOR_LIST.CURRENCIES}`]: \"\",\n            },\n        });\n        return this.render();\n    }\n\n    /**\n     * Remove a single roll table on the sheet. This does not stick unless saved.\n     * @param {PointerEvent} event      The initiating click event.\n     * @returns {BRTActorList}\n     */\n    _onClickRollTableDelete(event) {\n        const uuid = event.currentTarget.closest(\"[data-uuid]\").dataset.uuid;\n        const list = this._gatherTables();\n        list.findSplice((i) => i.uuid === uuid);\n        this.clone.updateSource({\n            [`flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.ACTOR_LIST.ROLL_TABLES_LIST}`]: list,\n        });\n        return this.render();\n    }\n\n    /**\n     * Render an roll table sheet by clicking its name.\n     * @param {PointerEvent} event        The initiating click event.\n     * @returns {Promise<ItemSheet>}      The rendered roll table sheet.\n     */\n    async _onClickRollTableName(event) {\n        const rollTable = await fromUuid(event.currentTarget.closest(\"[data-uuid]\").dataset.uuid);\n        return rollTable.sheet.render(true);\n    }\n\n    /**\n     * Remove the 'active' class from the drop area when left.\n     * @param {DragEvent} event      The initiating drag event.\n     * @returns {void}\n     */\n    _onDragLeaveBox(event) {\n        event.currentTarget.classList.remove(\"drag-over\");\n    }\n\n    /**\n     * Read all roll tables on the sheet.\n     * @returns {{uuid:string; quantity:number; brtType:string}[]}      An array of objects with quantity, uuid, and name.\n     */\n    _gatherTables() {\n        return (\n            foundry.utils.getProperty(\n                this.clone,\n                `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.ACTOR_LIST.ROLL_TABLES_LIST}`,\n            ) ?? []\n        );\n    }\n\n    /**\n     * Read all currencies on the sheet.\n     * @returns {string} An object with the currency keys and value (string).\n     */\n    _gatherCurrencies() {\n        const curr =\n            foundry.utils.getProperty(\n                this.clone,\n                `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.ACTOR_LIST.CURRENCIES}`,\n            ) ?? \"\";\n        /*\n    for (const k in curr) {\n        const currencies = ItemPilesHelpers.retrieveCurrenciesRegistered();\n        if (!(k in currencies)) {\n            delete curr[k];\n        }\n    }\n    */\n        return curr ? String(curr) : null;\n    }\n\n    /**\n     * Validate the dropped document and return an array of valid roll tables from it.\n     * If a single valid roll table, return it in an array.\n     * If a folder with at least 1 valid roll table in it, return that array.\n     * If a rolltable with at least 1 valid roll table in it, return that array.\n     * If a compendium with at least 1 valid roll table in it, return that array.\n     * If no valid roll tables, returns false.\n     * @param {object} data                     The dropped data object.\n     * @returns {Promise<RollTable[]|boolean>}     The array of valid roll tables, or false if none found.\n     */\n    async _validateDrops(data) {\n        const isFolder = data.type === \"Folder\";\n        // const isItem = data.type === \"Item\";\n        const isTable = data.type === \"RollTable\";\n        const isPack = data.type === \"Compendium\";\n\n        // if (!isFolder && !isItem && !isTable && !isPack) {\n        if (!isFolder && !isTable && !isPack) {\n            Logger.warn(Logger.i18nFormat(`${CONSTANTS.MODULE_ID}.label.WarningInvalidDocument`, {}), true);\n            return false;\n        }\n\n        // Case 1: Single roll table dropped.\n        // if (isItem) {\n        //     return this._dropSingleRollTable(data);\n        // }\n        // Case 2: Folder of roll tables dropped.\n        if (isFolder) {\n            return await this._dropFolder(data);\n        }\n        // Case 3: RollTable dropped.\n        if (isTable) {\n            return await this._dropRollTable(data);\n        }\n        // Case 4: Compendium dropped.\n        if (isPack) {\n            return await this._dropPack(data);\n        }\n    }\n\n    /**\n     * Validate a single dropped roll table.\n     * @param {object} data                     The dropped roll table's data.\n     * @returns {Promise<RollTable[]|boolean>}     The single dropped roll table in an array, or false if invalid.\n     */\n    async _dropSingleRollTable(data) {\n        const rollTable = await RetrieveHelpers.getRollTableAsync(data.uuid);\n\n        /* TODO\n    // Owned roll tables are not allowed.\n    if (rollTable.parent instanceof Actor) {\n      Logger.warn(Logger.i18nFormat(`${CONSTANTS.MODULE_ID}.label.WarningActorRollTAble`,{}), true);\n      return false;\n    }\n\n    // Must be a valid roll table type.\n    if (!this.validRollTableTypes.has(BRTUtils.retrieveBRTType(rollTable))) {\n      Logger.warn(Logger.i18nFormat(`${CONSTANTS.MODULE_ID}.label.WarningActorRollTable`,{brtType: BRTUtils.retrieveBRTType(rollTable)}), true);\n      return false;\n    }\n    */\n\n        return [rollTable];\n    }\n\n    /**\n     * Validate a folder of roll tables.\n     * @param {object} data                     The dropped folder's data.\n     * @returns {Promise<RollTable[]|boolean>}     The array of valid roll tables, or false if none found.\n     */\n    async _dropFolder(data) {\n        const folder = await fromUuid(data.uuid);\n        // Must be a folder of roll tables.\n        if (folder.type !== \"RollTable\") {\n            Logger.warn(Logger.i18nFormat(`${CONSTANTS.MODULE_ID}.label.WarningInvalidDocument`, {}), true);\n            return false;\n        }\n\n        /* TODO\n    // Must have at least one valid roll table.\n    const rollTables = folder.contents.filter(rollTable => {\n      return this.validRollTableTypes.has(BRTUtils. rollTable.type);\n    });\n    */\n        const rollTables = folder.contents;\n\n        if (!rollTables.length) {\n            Logger.warn(Logger.i18nFormat(`${CONSTANTS.MODULE_ID}.label.WarningEmptyDocument`, {}), true);\n            return false;\n        }\n\n        return rollTables;\n    }\n\n    /**\n     * Validate a dropped rolltable.\n     * @param {object} data                     The dropped table's data.\n     * @returns {Promise<RollTable[]|boolean>}     The array of valid roll tables, or false if none found.\n     */\n    async _dropRollTable(data) {\n        // Checkout the extract items from rolltbale utility method on BRTUtils\n        return await this._dropSingleRollTable(data);\n    }\n\n    /**\n     * Validate a dropped compendium.\n     * @param {object} data                   The dropped pack's data.\n     * @returns {Promise<RollTable[]|boolean>}     The array of valid roll tables, or false if none found.\n     */\n    async _dropPack(data) {\n        const pack = RetrieveHelpers.getCompendiumCollectionSync(data.id); // game.packs.get(data.id);\n        if (pack.metadata.type !== \"RollTable\") {\n            Logger.warn(Logger.i18nFormat(`${CONSTANTS.MODULE_ID}.label.WarningInvalidDocument`, {}), true);\n            return false;\n        }\n        /*\n    const index = await pack.getIndex({fields: [\"system.quantity\"]});\n    const rollTables = index.reduce((acc, rollTable) => {\n      if (!this.validRollTableTypes.has(rollTable.type)) {\n        return acc;\n      }\n      return acc.concat([{...rollTable, quantity: rollTable.system.quantity}]);\n    }, []);\n    */\n        const index = await pack.getIndex();\n        const rollTables = index.reduce((acc, rollTable) => {\n            return acc.concat([\n                {\n                    ...rollTable,\n                    quantity: BRTUtils.retrieveBRTRollAmount(rollTable) || \"1\",\n                    brtType: BRTUtils.retrieveBRTType(rollTable),\n                },\n            ]);\n        }, []);\n        if (!rollTables.length) {\n            Logger.warn(Logger.i18nFormat(`${CONSTANTS.MODULE_ID}.label.WarningEmptyDocument`, {}), true);\n            return false;\n        }\n        return rollTables;\n    }\n\n    // =========================================================\n    // STATIC\n    // =======================================================\n\n    /**\n     * Method to add some rolltables to the actor list\n     * @param {Actor|UUID|string} actor\n     * @param {RollTable|Folder|CompendiumCollection} data\n     * @param {Object} [options={}]\n     * @returns {Promise<RollTable[]>}\n     */\n    static async addRollTablesToActorList(actor, data, options = {}) {\n        let dataTmp = null;\n        if (!dataTmp) {\n            dataTmp = await RetrieveHelpers.getRollTableAsync(data, true);\n        }\n        if (!dataTmp) {\n            dataTmp = await RetrieveHelpers.getFolderAsync(data, true);\n        }\n        if (!dataTmp) {\n            dataTmp = await RetrieveHelpers.getCompendiumCollectionAsync(data, true);\n        }\n        const isFolder = dataTmp instanceof Folder;\n        const isTable = dataTmp instanceof RollTable;\n        const isPack = dataTmp instanceof CompendiumCollection;\n\n        let rollTables = null;\n\n        // if (!isFolder && !isItem && !isTable && !isPack) {\n        if (!isFolder && !isTable && !isPack) {\n            Logger.warn(Logger.i18nFormat(`${CONSTANTS.MODULE_ID}.label.WarningInvalidDocument`, {}), true);\n            return false;\n        }\n\n        // Case 2: Folder of roll tables dropped.\n        if (isFolder) {\n            const folder = await RetrieveHelpers.getFolderAsync(dataTmp);\n            // Must be a folder of roll tables.\n            if (folder.type !== \"RollTable\") {\n                Logger.warn(Logger.i18nFormat(`${CONSTANTS.MODULE_ID}.label.WarningInvalidDocument`, {}), true);\n                return false;\n            }\n            rollTables = folder.contents;\n        }\n        // Case 3: RollTable dropped.\n        if (isTable) {\n            const rollTable = await RetrieveHelpers.getRollTableAsync(dataTmp);\n            rollTables = [rollTable];\n        }\n        // Case 4: Compendium dropped.\n        if (isPack) {\n            const pack = await RetrieveHelpers.getCompendiumCollectionAsync(dataTmp); // game.packs.get(data.id);\n            if (pack.metadata.type !== \"RollTable\") {\n                Logger.warn(Logger.i18nFormat(`${CONSTANTS.MODULE_ID}.label.WarningInvalidDocument`, {}), true);\n                return false;\n            }\n\n            const index = await pack.getIndex();\n            rollTables = index.reduce((acc, rollTable) => {\n                return acc.concat([\n                    {\n                        ...rollTable,\n                        quantity: BRTUtils.retrieveBRTRollAmount(rollTable) || \"1\",\n                        brtType: BRTUtils.retrieveBRTType(rollTable),\n                    },\n                ]);\n            }, []);\n        }\n\n        if (!rollTables?.length) {\n            Logger.warn(Logger.i18nFormat(`${CONSTANTS.MODULE_ID}.label.WarningEmptyDocument`, {}), true);\n            return false;\n        }\n\n        for (const rollTable of rollTables) {\n            const uuid = rollTable.uuid;\n            const name = rollTable.name;\n\n            const quantity = BRTUtils.retrieveBRTRollAmount(rollTable) || \"1\";\n            const brtType = BRTUtils.retrieveBRTType(rollTable);\n\n            const list =\n                foundry.utils.getProperty(\n                    actor,\n                    `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.ACTOR_LIST.ROLL_TABLES_LIST}`,\n                ) ?? [];\n\n            const existing = list.find((e) => e.uuid === uuid);\n            if (existing) {\n                existing.quantity = quantity ? quantity : existing.quantity;\n                existing.brtType = brtType ? brtType : existing.brtType;\n            } else {\n                list.push({\n                    quantity: quantity ? quantity : \"1\",\n                    brtType: brtType ? brtType : \"none\",\n                    uuid: uuid,\n                });\n            }\n            await actor.update({\n                [`flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.ACTOR_LIST.ROLL_TABLES_LIST}`]: list,\n            });\n        }\n        Logger.info(\n            Logger.i18nFormat(`${CONSTANTS.MODULE_ID}.label.WarningAddedRollTables`, {\n                amount: rollTables.length,\n                name: actor.name,\n            }),\n            true,\n        );\n        return rollTables;\n    }\n\n    /**\n     * Method to add some rolltables to the actor list\n     * @param {Actor|UUID|string} actor\n     * @param {('none'|'better'|'loot'|'harvest'|'story')[]} brtTypes\n     * @returns {Promise<{rollTableList:{rollTable:RollTable;options:{rollsAmount:string;rollAsTableType:string;}}[];currencies:string}>}\n     */\n    static async retrieveActorList(actor, brtTypes) {\n        const list =\n            foundry.utils.getProperty(\n                actor,\n                `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.ACTOR_LIST.ROLL_TABLES_LIST}`,\n            ) ?? [];\n        const curr =\n            foundry.utils.getProperty(actor, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.ACTOR_LIST.CURRENCIES}`) ??\n            \"\";\n\n        let listTmp = [];\n        if (brtTypes?.length > 0) {\n            listTmp = list.filter((rl) => {\n                const brtType = rl.brtType; //BRTUtils.retrieveBRTType(rl, false, true);\n                return brtType && brtTypes.includes(brtType);\n            });\n        } else {\n            listTmp = list;\n        }\n\n        const rollTableArray = await Promise.all(\n            listTmp.map(async ({ quantity, brtType, uuid }) => {\n                const rollTable = await RetrieveHelpers.getRollTableAsync(uuid);\n                return {\n                    rollTable: rollTable,\n                    options: {\n                        rollsAmount: quantity,\n                        rollAsTableType: brtType,\n                    },\n                };\n            }),\n        );\n\n        return {\n            rollTableList: rollTableArray,\n            currencies: curr,\n        };\n    }\n}\n","import { CompendiumToRollTableHelpers } from \"./apps/compendium-to-rolltable/compendium-to-rollTable-helpers.js\";\nimport { RollFromCompendiumAsRollTableHelpers } from \"./apps/roll-from-compendium-as-rolltable/roll-from-compendium-as-rolltable-helpers.js\";\nimport { BRTLootHelpers } from \"./tables/loot/loot-helpers.js\";\nimport { BRTStoryHelpers } from \"./tables/story/story-helpers.js\";\nimport { BetterTables } from \"./better-tables.js\";\nimport { CONSTANTS } from \"./constants/constants.js\";\nimport { RollTableToActorHelpers } from \"./apps/rolltable-to-actor/rolltable-to-actor-helpers.js\";\nimport { BRTHarvestHelpers } from \"./tables/harvest/harvest-helpers.js\";\nimport { BetterChatCard } from \"./tables/better/brt-chat-card.js\";\nimport { BetterResults } from \"./core/brt-table-results.js\";\nimport { LootChatCard } from \"./tables/loot/loot-chat-card.js\";\nimport { HarvestChatCard } from \"./tables/harvest/harvest-chat-card.js\";\nimport { StoryChatCard } from \"./tables/story/story-chat-card.js\";\nimport { betterRolltablesSocket } from \"./socket.js\";\nimport { isRealBoolean, parseAsArray } from \"./lib/lib.js\";\nimport { BetterRollTable } from \"./core/brt-table.js\";\nimport Logger from \"./lib/Logger.js\";\nimport ItemPilesHelpers from \"./lib/item-piles-helpers.js\";\nimport { RetrieveHelpers } from \"./lib/retrieve-helpers.js\";\nimport { BRTUtils } from \"./core/utils.js\";\nimport BRTActorList from \"./apps/actor-list/brt-actor-list.js\";\n\n/**\n * Create a new API class and export it as default\n */\nconst API = {\n    /**\n     *  Support object for retrocompatbility\n     */\n    betterTables: new BetterTables(),\n\n    /**\n     * Get better rolltable tags from settings\n     *\n     */\n    getTags() {\n        return game.settings.get(CONSTANTS.MODULE_ID, CONSTANTS.TAGS.USE);\n    },\n\n    /**\n     * @deprecated remains for retro compatibility for anyone used this ?\n     * @param {RollTable} tableEntity rolltable to generate content from\n     * @returns {Promise<{flavor: *, sound: string, user: *, content: *}>}\n     */\n    async rollOld(tableEntity, options = {}) {\n        if (!tableEntity) {\n            Logger.warn(`roll | No reference to a rollTable is been passed`, true);\n            return;\n        }\n\n        return await this.betterTables.roll(tableEntity, options);\n    },\n\n    /**\n     * @deprecated remains for retro compatibility with Item Piles\n     * @param {RollTable|string|UUID} tableEntity rolltable to generate content from\n     * @returns {Promise<{flavor: *, sound: string, user: *, content: *}>}\n     */\n    async roll(tableEntity, options = {}) {\n        if (!tableEntity) {\n            Logger.warn(`roll | No reference to a rollTable is been passed`, true);\n            return;\n        }\n        const table = await RetrieveHelpers.getRollTableAsync(tableEntity);\n        const brtTable = new BetterRollTable(table, options);\n        await brtTable.initialize();\n        const resultBrt = await brtTable.betterRoll();\n\n        const results = resultBrt?.results;\n\n        let rollMode = options?.rollMode || brtTable.rollMode || null;\n        let roll = options?.roll || brtTable.mainRoll || null;\n\n        const br = new BetterResults(table, results, options?.stackResultsWithBRTLogic);\n        const betterResults = await br.buildResults();\n\n        const data = {};\n        setProperty(data, `itemsData`, betterResults);\n        return data;\n    },\n\n    /**\n     *\n     * @param {RollTable|string|UUID} tableEntity\n     * @param {Object} options\n     * @param {Roll|string} [options.roll] An optional pre-configured Roll instance which defines the dice roll to use\n     * @param {boolean} [options.recursive=true] Allow drawing recursively from inner RollTable results\n     * @param {boolean} [options.displayChat=true] Whether to automatically display the results in chat\n     * @param {('blindroll'|'gmroll'|'selfroll')} [options.rollMode=null] The chat roll mode to use when displaying the result\n     * @param {string|number} [options.rollsAmount=1]  The rolls amount value\n     * @param {string|number} [options.dc=null]  The dc value\n     * @param {string} [options.skill=null]  The skill denomination. If there is a \",\" in the skill string. , it will be treated as an array of skills for example \"nat,arc\" implies that the roll result will be compared as both a nat (nat) and arcane (arc) roll\n     * @param {boolean} [options.distinct=false] if checked the same result is not selected more than once indifferently from the number of 'Amount Roll'\n     * @param {boolean} [options.distinctKeepRolling=false] if 'Distinct result' is checked and 'Amount Rolls' > of the numbers of the result, keep rolling as a normal 'Roll +' behavior\n     * @param {boolean} [options.usePercentage=false] Use the % mechanism instead of the default formula+range behavior\n     * @param {boolean} [options.stackResultsWithBRTLogic=false] if enabled the table results are stacked with the BRT logic like the module item-piles a new 'quantity' property is been added to the table result data to check how much the single result is been stacked\n     * @param {('none'|'better'|'loot'|'harvest'|'story')} [options.rollAsTableType=null] Roll the rolltable as a specific BRT Roll Table type. Very useful for not duplicate the same rolltable for different usage. If not set the current BRT Roll Table types is used as usual.\n     * @param {boolean} [options.rollAsTableTypeAllTheTables] This setting make sense only when you use the parameter 'rollAsTableType'. If true it will treat all the inner tables (or child tables if you prefer) with the same type used on 'rollAsTableType'. Bu default is false.\n     * @returns {Promise<TableResult[]>}\n     */\n    async betterTableRoll(tableEntity, options = {}) {\n        if (!tableEntity) {\n            Logger.warn(`betterTableRoll | No reference to a rollTable is been passed`, true);\n            return;\n        }\n        const table = await RetrieveHelpers.getRollTableAsync(tableEntity);\n        return await this.betterTables.betterTableRoll(table, options);\n        // TODO\n        // if(game.user.isGM) {\n        //   return await this.betterTables.betterTableRoll(tableEntity, options);\n        // } else {\n        //   return await betterRolltablesSocket.executeAsGM(\n        // \t\t\"invokeBetterTableRollArr\",\n        // \t\ttableEntity.uuid,\n        // \t\toptions\n        // \t);\n        // }\n    },\n\n    /**\n     *\n     * @param {RollTable|string|UUID} tableEntity\n     * @param {Object} options\n     * @param {Roll|string} [options.roll] An optional pre-configured Roll instance which defines the dice roll to use\n     * @param {boolean} [options.recursive=true] Allow drawing recursively from inner RollTable results\n     * @param {boolean} [options.displayChat=true] Whether to automatically display the results in chat\n     * @param {('blindroll'|'gmroll'|'selfroll')} [options.rollMode=null] The chat roll mode to use when displaying the result\n     * @param {string|number} [options.rollsAmount=1]  The rolls amount value\n     * @param {string|number} [options.dc=null]  The dc value\n     * @param {string} [options.skill=null]  The skill denomination. If there is a \",\" in the skill string. , it will be treated as an array of skills for example \"nat,arc\" implies that the roll result will be compared as both a nat (nat) and arcane (arc) roll\n     * @param {boolean} [options.distinct=false] if checked the same result is not selected more than once indifferently from the number of 'Amount Roll'\n     * @param {boolean} [options.distinctKeepRolling=false] if 'Distinct result' is checked and 'Amount Rolls' > of the numbers of the result, keep rolling as a normal 'Roll +' behavior\n     * @param {boolean} [options.usePercentage=false] Use the % mechanism instead of the default formula+range behavior\n     * @param {boolean} [options.stackResultsWithBRTLogic=false] if enabled the table results are stacked with the BRT logic like the module item-piles a new 'quantity' property is been added to the table result data to check how much the single result is been stacked\n     * @param {('none'|'better'|'loot'|'harvest'|'story')} [options.rollAsTableType=null] Roll the rolltable as a specific BRT Roll Table type. Very useful for not duplicate the same rolltable for different usage. If not set the current BRT Roll Table types is used as usual.\n     * @param {boolean} [options.rollAsTableTypeAllTheTables] This setting make sense only when you use the parameter 'rollAsTableType'. If true it will treat all the inner tables (or child tables if you prefer) with the same type used on 'rollAsTableType'. Bu default is false.\n     * @returns {Promise<{results:TableResult[],currenciesData:Record<string,number>}>}\n     */\n    async betterTableRollV2(tableEntity, options = {}) {\n        if (!tableEntity) {\n            Logger.warn(`betterTableRollV2 | No reference to a rollTable is been passed`, true);\n            return;\n        }\n        const table = await RetrieveHelpers.getRollTableAsync(tableEntity);\n        return await this.betterTables.betterTableRollV2(table, options);\n        // TODO\n        // if(game.user.isGM) {\n        //   return await this.betterTables.betterTableRoll(tableEntity, options);\n        // } else {\n        //   return await betterRolltablesSocket.executeAsGM(\n        // \t\t\"invokeBetterTableRollArr\",\n        // \t\ttableEntity.uuid,\n        // \t\toptions\n        // \t);\n        // }\n    },\n\n    // async updateSpellCache(pack = null) {\n    //   return await this.betterTables.updateSpellCache(pack);\n    // },\n\n    /**\n     *\n     * @param {String} compendium ID of the compendium to roll\n     * @returns {Promise<{flavor: string; sound: string; user: object; content: object;} | undefined}\n     */\n    async rollCompendiumAsRolltable(compendium = null, hideChatMessage) {\n        if (!compendium) {\n            Logger.warn(`rollCompendiumAsRolltable | No reference to a compendium is been passed`, true);\n            return;\n        }\n        return await RollFromCompendiumAsRollTableHelpers.rollCompendiumAsRollTable(compendium, hideChatMessage);\n    },\n\n    /**\n     * @module BetterRolltables.API.createRolltableFromCompendium\n     *\n     * @description Create a new RollTable by extracting entries from a compendium.\n     *\n     * @version 1.0.1\n     * @since 1.8.7\n     *\n     * @param {string} compendiumName the name of the compendium to use for the table generation\n     * @param {string} tableName the name of the table entity that will be created\n     * @param {function(Document)} weightPredicate a function that returns a weight (number) that will be used\n     * for the tableResult weight for that given entity. returning 0 will exclude the entity from appearing in the table\n     *\n     * @returns {Promise<Document>} the table entity that was created\n     */\n    async createRolltableFromCompendium(\n        compendiumName,\n        tableName = compendiumName + \" RollTable\",\n        { weightPredicate = null } = {},\n    ) {\n        if (!compendiumName) {\n            Logger.warn(`createRolltableFromCompendium | No reference to a compendiumName is been passed`, true);\n            return;\n        }\n        return await CompendiumToRollTableHelpers.compendiumToRollTable(\n            compendiumName,\n            tableName ?? compendiumName + \" RollTable\",\n            { weightPredicate },\n        );\n    },\n\n    /**\n     * @description Create a new RollTable by extracting entries from a compendium.\n     * @param {string} compendiumName the name of the compendium to use for the table generation\n     * @param {string} tableName the name of the table entity that will be created\n     * @param {function(Document)} weightPredicate a function that returns a weight (number) that will be used\n     * for the tableResult weight for that given entity. returning 0 will exclude the entity from appearing in the table\n     *\n     * @returns {Promise<Document>} the table entity that was created\n     */\n    async createTableFromCompendium(\n        compendiumName,\n        tableName = compendiumName + \" RollTable\",\n        { weightPredicate = null } = {},\n    ) {\n        if (!compendiumName) {\n            Logger.warn(`createTableFromCompendium | No reference to a compendiumName is been passed`, true);\n            return;\n        }\n        return await CompendiumToRollTableHelpers.compendiumToRollTable(\n            compendiumName,\n            tableName ?? compendiumName + \" RollTable\",\n            { weightPredicate },\n        );\n    },\n\n    /* ================================================ */\n    /* LOOT */\n    /* ================================================ */\n\n    /**\n     * Roll a table an add the resulting loot to a given token.\n     *\n     * @param {RollTable} tableEntity\n     * @param {TokenDocument} token\n     * @param {Object} options\n     * @param {Roll|string} [options.roll] An optional pre-configured Roll instance which defines the dice roll to use\n     * @param {boolean} [options.recursive=true] Allow drawing recursively from inner RollTable results\n     * @param {boolean} [options.displayChat=true] Whether to automatically display the results in chat\n     * @param {('blindroll'|'gmroll'|'selfroll')} [options.rollMode=null] The chat roll mode to use when displaying the result\n     * @param {string|number} [options.rollsAmount=1]  The rolls amount value\n     * @param {string|number} [options.dc=null]  The dc value\n     * @param {string} [options.skill=null]  The skill denomination. If there is a \",\" in the skill string. , it will be treated as an array of skills for example \"nat,arc\" implies that the roll result will be compared as both a nat (nat) and arcane (arc) roll\n     * @param {boolean} [options.distinct=false] if checked the same result is not selected more than once indifferently from the number of 'Amount Roll'\n     * @param {boolean} [options.distinctKeepRolling=false] if 'Distinct result' is checked and 'Amount Rolls' > of the numbers of the result, keep rolling as a normal 'Roll +' behavior\n     * @param {boolean} [options.usePercentage=false] Use the % mechanism instead of the default formula+range behavior\n     * @param {boolean} [options.stackResultsWithBRTLogic=false] if enabled the table results are stacked with the BRT logic like the module item-piles a new 'quantity' property is been added to the table result data to check how much the single result is been stacked\n     * @param {('none'|'better'|'loot'|'harvest'|'story')} [options.rollAsTableType=null] Roll the rolltable as a specific BRT Roll Table type. Very useful for not duplicate the same rolltable for different usage. If not set the current BRT Roll Table types is used as usual.\n     * @param {boolean} [options.rollAsTableTypeAllTheTables] This setting make sense only when you use the parameter 'rollAsTableType'. If true it will treat all the inner tables (or child tables if you prefer) with the same type used on 'rollAsTableType'. Bu default is false.\n     * @returns {Promise<void>}\n     */\n    async addLootToSelectedToken(tableEntity, token = null, options = {}) {\n        if (!tableEntity) {\n            Logger.warn(`addLootToSelectedToken | No reference to a RollTable is been passed`, true);\n            return;\n        }\n        return await BRTLootHelpers.addLootToSelectedToken(tableEntity, token, options);\n    },\n\n    /**\n     *\n     * @param {RollTable} tableEntity\n     * @param {Object} options\n     * @param {Roll|string} [options.roll] An optional pre-configured Roll instance which defines the dice roll to use\n     * @param {boolean} [options.recursive=true] Allow drawing recursively from inner RollTable results\n     * @param {boolean} [options.displayChat=true] Whether to automatically display the results in chat\n     * @param {('blindroll'|'gmroll'|'selfroll')} [options.rollMode=null] The chat roll mode to use when displaying the result\n     * @param {string|number} [options.rollsAmount=1]  The rolls amount value\n     * @param {string|number} [options.dc=null]  The dc value\n     * @param {string} [options.skill=null]  The skill denomination. If there is a \",\" in the skill string. , it will be treated as an array of skills for example \"nat,arc\" implies that the roll result will be compared as both a nat (nat) and arcane (arc) roll\n     * @param {boolean} [options.distinct=false] if checked the same result is not selected more than once indifferently from the number of 'Amount Roll'\n     * @param {boolean} [options.distinctKeepRolling=false] if 'Distinct result' is checked and 'Amount Rolls' > of the numbers of the result, keep rolling as a normal 'Roll +' behavior\n     * @param {boolean} [options.usePercentage=false] Use the % mechanism instead of the default formula+range behavior\n     * @param {boolean} [options.stackResultsWithBRTLogic=false] if enabled the table results are stacked with the BRT logic like the module item-piles a new 'quantity' property is been added to the table result data to check how much the single result is been stacked\n     * @param {('none'|'better'|'loot'|'harvest'|'story')} [options.rollAsTableType=null] Roll the rolltable as a specific BRT Roll Table type. Very useful for not duplicate the same rolltable for different usage. If not set the current BRT Roll Table types is used as usual.\n     * @param {boolean} [options.rollAsTableTypeAllTheTables] This setting make sense only when you use the parameter 'rollAsTableType'. If true it will treat all the inner tables (or child tables if you prefer) with the same type used on 'rollAsTableType'. Bu default is false.\n     * @returns {Promise<void>}\n     */\n    async generateLoot(tableEntity, options = {}) {\n        if (!tableEntity) {\n            Logger.warn(`generateLoot | No reference to a RollTable is been passed`, true);\n            return;\n        }\n        return await BRTLootHelpers.generateLoot(tableEntity, options);\n    },\n\n    /**\n     *\n     * @param {RollTable} tableEntity\n     * @param {Object} options\n     * @param {Roll|string} [options.roll] An optional pre-configured Roll instance which defines the dice roll to use\n     * @param {boolean} [options.recursive=true] Allow drawing recursively from inner RollTable results\n     * @param {boolean} [options.displayChat=true] Whether to automatically display the results in chat\n     * @param {('blindroll'|'gmroll'|'selfroll')} [options.rollMode=null] The chat roll mode to use when displaying the result\n     * @param {string|number} [options.rollsAmount=1]  The rolls amount value\n     * @param {string|number} [options.dc=null]  The dc value\n     * @param {string} [options.skill=null]  The skill denomination. If there is a \",\" in the skill string. , it will be treated as an array of skills for example \"nat,arc\" implies that the roll result will be compared as both a nat (nat) and arcane (arc) roll\n     * @param {boolean} [options.distinct=false] if checked the same result is not selected more than once indifferently from the number of 'Amount Roll'\n     * @param {boolean} [options.distinctKeepRolling=false] if 'Distinct result' is checked and 'Amount Rolls' > of the numbers of the result, keep rolling as a normal 'Roll +' behavior\n     * @param {boolean} [options.usePercentage=false] Use the % mechanism instead of the default formula+range behavior\n     * @param {boolean} [options.stackResultsWithBRTLogic=false] if enabled the table results are stacked with the BRT logic like the module item-piles a new 'quantity' property is been added to the table result data to check how much the single result is been stacked\n     * @param {('none'|'better'|'loot'|'harvest'|'story')} [options.rollAsTableType=null] Roll the rolltable as a specific BRT Roll Table type. Very useful for not duplicate the same rolltable for different usage. If not set the current BRT Roll Table types is used as usual.\n     * @param {boolean} [options.rollAsTableTypeAllTheTables] This setting make sense only when you use the parameter 'rollAsTableType'. If true it will treat all the inner tables (or child tables if you prefer) with the same type used on 'rollAsTableType'. Bu default is false.\n     * @returns {Promise<void>}\n     */\n    async generateLootOnSelectedToken(tableEntity, options = {}) {\n        if (!tableEntity) {\n            Logger.warn(`generateLootOnSelectedToken | No reference to a RollTable is been passed`, true);\n            return;\n        }\n        return await BRTLootHelpers.addLootToSelectedToken(tableEntity, null, options);\n    },\n\n    /**\n     *\n     * @param {RollTable} tableEntity\n     * @param {Object} options\n     * @param {Roll|string} [options.roll] An optional pre-configured Roll instance which defines the dice roll to use\n     * @param {boolean} [options.recursive=true] Allow drawing recursively from inner RollTable results\n     * @param {boolean} [options.displayChat=true] Whether to automatically display the results in chat\n     * @param {('blindroll'|'gmroll'|'selfroll')} [options.rollMode=null] The chat roll mode to use when displaying the result\n     * @param {string|number} [options.rollsAmount=1]  The rolls amount value\n     * @param {string|number} [options.dc=null]  The dc value\n     * @param {string} [options.skill=null]  The skill denomination. If there is a \",\" in the skill string. , it will be treated as an array of skills for example \"nat,arc\" implies that the roll result will be compared as both a nat (nat) and arcane (arc) roll\n     * @param {boolean} [options.distinct=false] if checked the same result is not selected more than once indifferently from the number of 'Amount Roll'\n     * @param {boolean} [options.distinctKeepRolling=false] if 'Distinct result' is checked and 'Amount Rolls' > of the numbers of the result, keep rolling as a normal 'Roll +' behavior\n     * @param {boolean} [options.usePercentage=false] Use the % mechanism instead of the default formula+range behavior\n     * @param {boolean} [options.stackResultsWithBRTLogic=false] if enabled the table results are stacked with the BRT logic like the module item-piles a new 'quantity' property is been added to the table result data to check how much the single result is been stacked\n     * @param {('none'|'better'|'loot'|'harvest'|'story')} [options.rollAsTableType=null] Roll the rolltable as a specific BRT Roll Table type. Very useful for not duplicate the same rolltable for different usage. If not set the current BRT Roll Table types is used as usual.\n     * @param {boolean} [options.rollAsTableTypeAllTheTables] This setting make sense only when you use the parameter 'rollAsTableType'. If true it will treat all the inner tables (or child tables if you prefer) with the same type used on 'rollAsTableType'. Bu default is false.\n     * @returns {Promise<void>}\n     */\n    async generateChatLoot(tableEntity, options = {}) {\n        if (!tableEntity) {\n            Logger.warn(`generateChatLoot | No reference to a RollTable is been passed`, true);\n            return;\n        }\n        return await BRTLootHelpers.generateChatLoot(tableEntity, options);\n    },\n\n    /* ================================================ */\n    /* HARVEST */\n    /* ================================================ */\n\n    /**\n     *\n     * @param {RollTable} tableEntity\n     * @param {Object} options\n     * @param {Roll|string} [options.roll] An optional pre-configured Roll instance which defines the dice roll to use\n     * @param {boolean} [options.recursive=true] Allow drawing recursively from inner RollTable results\n     * @param {boolean} [options.displayChat=true] Whether to automatically display the results in chat\n     * @param {('blindroll'|'gmroll'|'selfroll')} [options.rollMode=null] The chat roll mode to use when displaying the result\n     * @param {string|number} [options.rollsAmount=1]  The rolls amount value\n     * @param {string|number} [options.dc=null]  The dc value\n     * @param {string} [options.skill=null]  The skill denomination. If there is a \",\" in the skill string. , it will be treated as an array of skills for example \"nat,arc\" implies that the roll result will be compared as both a nat (nat) and arcane (arc) roll\n     * @param {boolean} [options.distinct=false] if checked the same result is not selected more than once indifferently from the number of 'Amount Roll'\n     * @param {boolean} [options.distinctKeepRolling=false] if 'Distinct result' is checked and 'Amount Rolls' > of the numbers of the result, keep rolling as a normal 'Roll +' behavior\n     * @param {boolean} [options.usePercentage=false] Use the % mechanism instead of the default formula+range behavior\n     * @param {boolean} [options.stackResultsWithBRTLogic=false] if enabled the table results are stacked with the BRT logic like the module item-piles a new 'quantity' property is been added to the table result data to check how much the single result is been stacked\n     * @param {('none'|'better'|'loot'|'harvest'|'story')} [options.rollAsTableType=null] Roll the rolltable as a specific BRT Roll Table type. Very useful for not duplicate the same rolltable for different usage. If not set the current BRT Roll Table types is used as usual.\n     * @param {boolean} [options.rollAsTableTypeAllTheTables] This setting make sense only when you use the parameter 'rollAsTableType'. If true it will treat all the inner tables (or child tables if you prefer) with the same type used on 'rollAsTableType'. Bu default is false.\n     * @returns {Promise<void>}\n     */\n    async generateHarvest(tableEntity, options = {}) {\n        if (!tableEntity) {\n            Logger.warn(`generateHarvest | No reference to a RollTable is been passed`, true);\n            return;\n        }\n        return await BRTHarvestHelpers.generateHarvest(tableEntity, options);\n    },\n\n    /**\n     *\n     * @param {RollTable} tableEntity\n     * @param {Object} options\n     * @param {Roll|string} [options.roll] An optional pre-configured Roll instance which defines the dice roll to use\n     * @param {boolean} [options.recursive=true] Allow drawing recursively from inner RollTable results\n     * @param {boolean} [options.displayChat=true] Whether to automatically display the results in chat\n     * @param {('blindroll'|'gmroll'|'selfroll')} [options.rollMode=null] The chat roll mode to use when displaying the result\n     * @param {string|number} [options.rollsAmount=1]  The rolls amount value\n     * @param {string|number} [options.dc=null]  The dc value\n     * @param {string} [options.skill=null]  The skill denomination. If there is a \",\" in the skill string. , it will be treated as an array of skills for example \"nat,arc\" implies that the roll result will be compared as both a nat (nat) and arcane (arc) roll\n     * @param {boolean} [options.distinct=false] if checked the same result is not selected more than once indifferently from the number of 'Amount Roll'\n     * @param {boolean} [options.distinctKeepRolling=false] if 'Distinct result' is checked and 'Amount Rolls' > of the numbers of the result, keep rolling as a normal 'Roll +' behavior\n     * @param {boolean} [options.usePercentage=false] Use the % mechanism instead of the default formula+range behavior\n     * @param {boolean} [options.stackResultsWithBRTLogic=false] if enabled the table results are stacked with the BRT logic like the module item-piles a new 'quantity' property is been added to the table result data to check how much the single result is been stacked\n     * @param {('none'|'better'|'loot'|'harvest'|'story')} [options.rollAsTableType=null] Roll the rolltable as a specific BRT Roll Table type. Very useful for not duplicate the same rolltable for different usage. If not set the current BRT Roll Table types is used as usual.\n     * @param {boolean} [options.rollAsTableTypeAllTheTables] This setting make sense only when you use the parameter 'rollAsTableType'. If true it will treat all the inner tables (or child tables if you prefer) with the same type used on 'rollAsTableType'. Bu default is false.\n     * @returns {Promise<void>}\n     */\n    async generateHarvestOnSelectedToken(tableEntity, options = {}) {\n        if (!tableEntity) {\n            Logger.warn(`generateHarvestOnSelectedToken | No reference to a RollTable is been passed`, true);\n            return;\n        }\n        return await BRTHarvestHelpers.addHarvestToSelectedToken(tableEntity, null, options);\n    },\n\n    /**\n     *\n     * @param {RollTable} tableEntity\n     * @param {Object} options\n     * @param {Roll|string} [options.roll] An optional pre-configured Roll instance which defines the dice roll to use\n     * @param {boolean} [options.recursive=true] Allow drawing recursively from inner RollTable results\n     * @param {boolean} [options.displayChat=true] Whether to automatically display the results in chat\n     * @param {('blindroll'|'gmroll'|'selfroll')} [options.rollMode=null] The chat roll mode to use when displaying the result\n     * @param {string|number} [options.rollsAmount=1]  The rolls amount value\n     * @param {string|number} [options.dc=null]  The dc value\n     * @param {string} [options.skill=null]  The skill denomination. If there is a \",\" in the skill string. , it will be treated as an array of skills for example \"nat,arc\" implies that the roll result will be compared as both a nat (nat) and arcane (arc) roll\n     * @param {boolean} [options.distinct=false] if checked the same result is not selected more than once indifferently from the number of 'Amount Roll'\n     * @param {boolean} [options.distinctKeepRolling=false] if 'Distinct result' is checked and 'Amount Rolls' > of the numbers of the result, keep rolling as a normal 'Roll +' behavior\n     * @param {boolean} [options.usePercentage=false] Use the % mechanism instead of the default formula+range behavior\n     * @param {boolean} [options.stackResultsWithBRTLogic=false] if enabled the table results are stacked with the BRT logic like the module item-piles a new 'quantity' property is been added to the table result data to check how much the single result is been stacked\n     * @param {('none'|'better'|'loot'|'harvest'|'story')} [options.rollAsTableType=null] Roll the rolltable as a specific BRT Roll Table type. Very useful for not duplicate the same rolltable for different usage. If not set the current BRT Roll Table types is used as usual.\n     * @param {boolean} [options.rollAsTableTypeAllTheTables] This setting make sense only when you use the parameter 'rollAsTableType'. If true it will treat all the inner tables (or child tables if you prefer) with the same type used on 'rollAsTableType'. Bu default is false.\n     * @returns {Promise<void>}\n     */\n    async generateChatHarvest(tableEntity, options = {}) {\n        if (!tableEntity) {\n            Logger.warn(`generateChatHarvest | No reference to a RollTable is been passed`, true);\n            return;\n        }\n        return await BRTHarvestHelpers.generateChatHarvest(tableEntity, options);\n    },\n\n    /**\n     * Utility method to retrieve the minimal dc value present on the table\n     * @module game.modules.get('better-rolltables').api.retrieveMinDCOnTable(table);\n     * @param {RollTable|string|UUID} tableEntity\n     * @returns {Promise<number>} The minimal dc founded or 0 otherwise\n     */\n    async retrieveMinDCOnTable(tableEntity) {\n        if (!tableEntity) {\n            Logger.warn(`retrieveMinDCOnTable | No reference to a RollTable is been passed`, true);\n            return;\n        }\n        const minDC = await BRTHarvestHelpers.retrieveMinDCOnTable(tableEntity);\n        return minDC;\n    },\n\n    /* ================================================ */\n    /* STORY */\n    /* ================================================ */\n\n    /**\n     * Get story results\n     * @param {RollTable} tableEntity\n     * @returns {Promise<{ string, string }>}\n     */\n    async getStoryResults(tableEntity) {\n        if (!tableEntity) {\n            Logger.warn(`getStoryResults | No reference to a RollTable is been passed`, true);\n            return;\n        }\n        return await BRTStoryHelpers.getStoryResults(tableEntity);\n    },\n\n    /**\n     * Get story results\n     * @param {RollTable} tableEntity\n     * @returns {Promise<void>}\n     */\n    async generateChatStory(tableEntity) {\n        if (!tableEntity) {\n            Logger.warn(`generateChatStory | No reference to a RollTable is been passed`, true);\n            return;\n        }\n        return await BRTStoryHelpers.generateChatStory(tableEntity);\n    },\n\n    /* ======================================================== */\n    /* NEW API INTEGRATION */\n    /* ======================================================== */\n\n    async compendiumToRollTableWithDialog(compendiumName = null, { weightPredicate = null } = {}) {\n        if (!compendiumName) {\n            Logger.warn(`compendiumToRollTableWithDialog | No reference to a compendiumName is been passed`, true);\n            return;\n        }\n        return await CompendiumToRollTableHelpers.compendiumToRollTableWithDialog(compendiumName, { weightPredicate });\n    },\n\n    async compendiumToRollTableWithDialogSpecialCaseHarvester() {\n        return await CompendiumToRollTableHelpers.compendiumToRollTableWithDialogSpecialCaseHarvester();\n    },\n\n    /**\n     * @module game.modules.get('better-rolltables').api.createRollTableFromCompendium\n     * @description Create a new RollTable by extracting entries from a compendium.\n     * @param {string} compendiumName the name of the compendium to use for the table generation\n     * @param {string} tableName the name of the table entity that will be created\n     * @param {function(Document)} weightPredicate a function that returns a weight (number) that will be used\n     * for the tableResult weight for that given entity. returning 0 will exclude the entity from appearing in the table\n     *\n     * @returns {Promise<Document>} the table entity that was created\n     */\n    async createRollTableFromCompendium(inAttributes) {\n        // if (!Array.isArray(inAttributes)) {\n        //   throw Logger.error(\"createRollTableFromCompendium | inAttributes must be of type array\");\n        // }\n        // const [uuidOrItem] = inAttributes;\n        if (typeof inAttributes !== \"object\") {\n            throw Logger.error(\"createRollTableFromCompendium | inAttributes must be of type object\");\n        }\n\n        const compendiumName = inAttributes.compendiumName;\n        const tableName = inAttributes.tableName ?? compendiumName + \" RollTable\";\n        const weightPredicate = inAttributes.weightPredicate;\n        if (!compendiumName) {\n            Logger.warn(`createRollTableFromCompendium | No reference to a compendiumName is been passed`, true);\n            return;\n        }\n        return await CompendiumToRollTableHelpers.compendiumToRollTable(compendiumName, tableName, { weightPredicate });\n    },\n\n    /**\n     *\n     * @param {String} compendium ID of the compendium to roll\n     * @returns {Promise<{flavor: string; sound: string; user: object; content: object;} | undefined}\n     */\n    async rollCompendiumAsRollTable(inAttributes) {\n        // if (!Array.isArray(inAttributes)) {\n        //   throw Logger.error(\"rollCompendiumAsRollTable | inAttributes must be of type array\");\n        // }\n        // const [uuidOrItem] = inAttributes;\n        if (typeof inAttributes !== \"object\") {\n            throw Logger.error(\"rollCompendiumAsRollTable | inAttributes must be of type object\");\n        }\n        const compendium = inAttributes.compendium;\n        const hideChatMessage = inAttributes.hideChatMessage;\n        if (!compendium) {\n            Logger.warn(`rollCompendiumAsRollTable | No reference to a compendium is been passed`, true);\n            return;\n        }\n        const obj = await RollFromCompendiumAsRollTableHelpers.rollCompendiumAsRollTable(compendium, hideChatMessage);\n        return obj;\n    },\n\n    async addRollTableItemsToActor(inAttributes) {\n        // if (!Array.isArray(inAttributes)) {\n        //   throw Logger.error(\"rollCompendiumAsRollTable | inAttributes must be of type array\");\n        // }\n        // const [uuidOrItem] = inAttributes;\n        if (typeof inAttributes !== \"object\") {\n            throw Logger.error(\"rollCompendiumAsRollTable | inAttributes must be of type object\");\n        }\n        const table = inAttributes.table;\n        const actor = inAttributes.actor;\n        const options = inAttributes.options;\n        const actorWithItems = await RollTableToActorHelpers.addRollTableItemsToActor(table, actor, options);\n        return actorWithItems ?? [];\n    },\n\n    /**\n     *\n     * @param {Object} inAttributes\n     * @returns {Promise<ItemData[]>} Item Data Array.  An array of objects, each containing the item that was added or updated, and the quantity that was added\n     */\n    async retrieveItemsDataFromRollTableResult(inAttributes) {\n        // if (!Array.isArray(inAttributes)) {\n        //   throw Logger.error(\"rollCompendiumAsRollTable | inAttributes must be of type array\");\n        // }\n        // const [uuidOrItem] = inAttributes;\n        if (typeof inAttributes !== \"object\") {\n            throw Logger.error(\"rollCompendiumAsRollTable | inAttributes must be of type object\");\n        }\n        const table = inAttributes.table;\n        const options = inAttributes.options;\n        const itemsDataToReturn = await RollTableToActorHelpers.retrieveItemsDataFromRollTableResult(table, options);\n        return itemsDataToReturn ?? [];\n    },\n\n    async retrieveItemsDataFromRollTableResultSpecialHarvester(inAttributes) {\n        // if (!Array.isArray(inAttributes)) {\n        //   throw Logger.error(\"rollCompendiumAsRollTable | inAttributes must be of type array\");\n        // }\n        // const [uuidOrItem] = inAttributes;\n        if (typeof inAttributes !== \"object\") {\n            throw Logger.error(\"rollCompendiumAsRollTable | inAttributes must be of type object\");\n        }\n        const table = inAttributes.table;\n        const options = inAttributes.options;\n        const itemsDataToReturn = await RollTableToActorHelpers.retrieveItemsDataFromRollTableResultSpecialHarvester(\n            table,\n            options,\n        );\n        return itemsDataToReturn ?? [];\n    },\n\n    /**\n     * Converts the provided token to a item piles lootable sheet check out the documentation from the itempiles page\n     * @href https://fantasycomputer.works/FoundryVTT-ItemPiles/#/api?id=turntokensintoitempiles\n     * @href https://github.com/trioderegion/fvtt-macros/blob/master/honeybadger-macros/tokens/single-loot-pile.js#L77\n     * @param {Array<Token|TokenDocument} actorOrTokenTarget\n     * @param {object} options\tobject\tOptions to pass to the function\n     * @param {boolean} options.applyDefaultImage little utility for lazy people apply a default image\n     * @param {boolean} options.applyDefaultLight little utility for lazy people apply a default light\n     * @param {boolean} options.isSinglePile little utility it need 'warpgate' module installed and active for merge all the token items in one big item piles\n     * @param {boolean} options.deleteTokens only if singlePile is true it will delete all tokens\n     * @param {object} tokenSettings Overriding settings that will update the tokens settings\n     * @param {object} pileSettings Overriding settings to be put on the item piles’ settings - see pile flag defaults\n     * @returns {Promise<Array>} The uuids of the targets after they were turned into item piles\n     */\n    async convertTokensToItemPiles(\n        tokens,\n        options = {\n            applyDefaultLight: true,\n            untouchedImage: \"\",\n            isSinglePile: false,\n            deleteTokens: false,\n            addCurrency: false,\n        },\n        tokenSettings = { rotation: 0 },\n        pileSettings = {\n            openedImage: \"\",\n            emptyImage: \"\",\n            type: game.itempiles.pile_types.CONTAINER,\n            deleteWhenEmpty: false,\n            activePlayers: true,\n            closed: true,\n        },\n    ) {\n        let tokensTmp = tokens || [];\n        if (tokensTmp?.length <= 0) {\n            tokensTmp = canvas.tokens.controlled;\n        }\n        if (tokensTmp?.length > 0) {\n            return await ItemPilesHelpers.convertTokensToItemPiles(tokensTmp, options, tokenSettings, pileSettings);\n        } else {\n            Logger.warn(`No tokens are selected`, true);\n        }\n    },\n\n    /**\n     * Converts the provided token to a item piles lootable sheet check out the documentation from the itempiles page\n     * @href https://fantasycomputer.works/FoundryVTT-ItemPiles/#/api?id=turntokensintoitempiles\n     * @href https://github.com/trioderegion/fvtt-macros/blob/master/honeybadger-macros/tokens/single-loot-pile.js#L77\n     * @param {Array<Token|TokenDocument} actorOrTokenTarget\n     * @param {boolean} deleteTokens only if singlePile is true it will delete all tokens\n     * @returns {Promise<Array>} The uuids of the targets after they were turned into item piles\n     */\n    async convertTokensToSingleItemPile(tokens, deleteTokens = false) {\n        let tokensTmp = tokens || [];\n        if (tokensTmp?.length <= 0) {\n            tokensTmp = canvas.tokens.controlled;\n        }\n        if (tokensTmp?.length > 0) {\n            const options = {\n                applyDefaultLight: true,\n                untouchedImage: \"\",\n                isSinglePile: true,\n                deleteTokens: deleteTokens,\n                addCurrency: false,\n            };\n            return await ItemPilesHelpers.convertTokensToItemPiles(tokensTmp, options);\n        } else {\n            Logger.warn(`No tokens are selected`, true);\n        }\n    },\n\n    /**\n     * Rolls on a table of items and collates them to be able to be added to actors and such\n     * @href https://fantasycomputer.works/FoundryVTT-ItemPiles/#/sample-macros?id=populate-loot-via-table\n     * @param {string/Actor/Token}                                  The name, ID, UUID, or the actor itself, or an array of such\n     * @param {string/RollTable} tableReference                     The name, ID, UUID, or the table itself, or an array of such\n     * @param {object} options                                      Options to pass to the function\n     * @param {string/number} [options.timesToRoll=\"1\"]             The number of times to roll on the tables, which can be a roll formula\n     * @param {boolean} [options.resetTable=true]                   Whether to reset the table before rolling it\n     * @param {boolean} [options.normalizeTable=false]               Whether to normalize the table before rolling it\n     * @param {boolean} [options.displayChat=false]                 Whether to display the rolls to the chat\n     * @param {object} [options.rollData={}]                        Data to inject into the roll formula\n     * @param {Actor/string/boolean} [options.targetActor=false]    The target actor to add the items to, or the UUID of an actor\n     * @param {boolean} [options.removeExistingActorItems=false]    Whether to clear the target actor's items before adding the ones rolled\n     * @param {boolean/string} [options.customCategory=false]       Whether to apply a custom category to the items rolled\n     *\n     * @returns {Promise<Array<Item>>}                              An array of object containing the item data and their quantity\n     */\n    async rollItemTable(targetActor, tableReference, options = {}) {\n        return await ItemPilesHelpers.rollItemTable(targetActor, tableReference, options);\n    },\n\n    /**\n     * Covert a Table Result Data to Item Data\n     * NOTE: text,actor and scene are treated in different ways...)\n     * @param {TableResult} tableResult Table result data to convert\n     * @return {Promise<{ItemData}>} item data retrieve fro the current Table result Data\n     */\n    async resultToItemData(tableResult) {\n        return await RollTableToActorHelpers.resultToItemData(tableResult);\n    },\n\n    // ===============================\n    // SOCKET UTILITY\n    // ================================\n\n    /**\n     *\n     * @param {RollTable} tableEntity\n     * @param {Object} options\n     * @param {Roll|string} [options.roll] An optional pre-configured Roll instance which defines the dice roll to use\n     * @param {boolean} [options.recursive=true] Allow drawing recursively from inner RollTable results\n     * @param {boolean} [options.displayChat=true] Whether to automatically display the results in chat\n     * @param {('blindroll'|'gmroll'|'selfroll')} [options.rollMode=null] The chat roll mode to use when displaying the result\n     * @param {string|number} [options.rollsAmount=1]  The rolls amount value\n     * @param {string|number} [options.dc=null]  The dc value\n     * @param {string} [options.skill=null]  The skill denomination. If there is a \",\" in the skill string. , it will be treated as an array of skills for example \"nat,arc\" implies that the roll result will be compared as both a nat (nat) and arcane (arc) roll\n     * @param {boolean} [options.distinct=false] if checked the same result is not selected more than once indifferently from the number of 'Amount Roll'\n     * @param {boolean} [options.distinctKeepRolling=false] if 'Distinct result' is checked and 'Amount Rolls' > of the numbers of the result, keep rolling as a normal 'Roll +' behavior\n     * @param {boolean} [options.usePercentage=false] Use the % mechanism instead of the default formula+range behavior\n     * @param {boolean} [options.stackResultsWithBRTLogic=false] if enabled the table results are stacked with the BRT logic like the module item-piles a new 'quantity' property is been added to the table result data to check how much the single result is been stacked\n     * @param {('none'|'better'|'loot'|'harvest'|'story')} [options.rollAsTableType=null] Roll the rolltable as a specific BRT Roll Table type. Very useful for not duplicate the same rolltable for different usage. If not set the current BRT Roll Table types is used as usual.\n     * @param {boolean} [options.rollAsTableTypeAllTheTables] This setting make sense only when you use the parameter 'rollAsTableType'. If true it will treat all the inner tables (or child tables if you prefer) with the same type used on 'rollAsTableType'. Bu default is false.\n     * @returns {Promise<TableResult[]>}\n     */\n    async invokeBetterTableRollArr(...inAttributes) {\n        if (!Array.isArray(inAttributes)) {\n            throw Logger.error(\"invokeBetterTableRollArr | inAttributes must be of type array\");\n        }\n        const [tableReferenceUuid, options] = inAttributes;\n        const tableEntity = await fromUuid(tableReferenceUuid);\n        return await this.betterTables.betterTableRoll(tableEntity, options);\n    },\n\n    async invokeGenericChatCardCreateArr(...inAttributes) {\n        if (!Array.isArray(inAttributes)) {\n            throw Logger.error(\"invokeGenericTableRollArr | inAttributes must be of type array\");\n        }\n\n        const [tableReferenceUuid, results, rollMode, roll, stackResultsWithBRTLogic, rollAsTableType] = inAttributes;\n        const tableEntity = await fromUuid(tableReferenceUuid);\n\n        const br = new BetterResults(tableEntity, results, stackResultsWithBRTLogic, rollAsTableType); // NOTE: Stack is always false here\n        const betterResults = await br.buildResults();\n\n        const brtTypeToCheck = BRTUtils.retrieveBRTType(tableEntity, options?.rollAsTableType);\n\n        if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_BETTER) {\n            const betterChatCard = new BetterChatCard(betterResults, rollMode, roll);\n            await betterChatCard.createChatCard(tableEntity);\n        } else if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_LOOT) {\n            const currencyData = br.getCurrencyData();\n            const lootChatCard = new LootChatCard(betterResults, currencyData, rollMode, roll);\n            await lootChatCard.createChatCard(tableEntity);\n        } else if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_STORY) {\n            const storyChatCard = new StoryChatCard(betterResults, rollMode, roll);\n            await storyChatCard.createChatCard(tableEntity);\n        } else if (brtTypeToCheck === CONSTANTS.TABLE_TYPE_HARVEST) {\n            const harvestChatCard = new HarvestChatCard(betterResults, rollMode, roll);\n            await harvestChatCard.createChatCard(tableEntity);\n        } else {\n            await brtTable.createChatCard(results, rollMode, roll);\n        }\n    },\n\n    // ===================================================\n    // ACTOR LIST API\n    // =====================================================\n\n    /**\n     * Method to add some rolltables to the actor list\n     * @param {Actor|UUID|string} actor\n     * @param {UUID|string} data Can be a RollTable a Folder aCompendiumCollection reference\n     * @param {Object} [options={}]\n     * @returns {Promise<RollTable[]>}\n     */\n    async addRollTablesToActorList(actor, data, options = {}) {\n        const actorTmp = await RetrieveHelpers.getActorAsync(actor);\n        // if (typeof data !== \"string\") {\n        //     throw Logger.error(\"addRollTablesToActorList | data must be of type string\");\n        // }\n        // const dataTmp = await fromUuid(data);\n        return await BRTActorList.addRollTablesToActorList(actorTmp, dataTmp, options);\n    },\n\n    /**\n     * Method to add some rolltables to the actor list\n     * @param {Actor|UUID|string} actor\n     * @param {Object} [options={}]\n     * @param {('none'|'better'|'loot'|'harvest'|'story')[]} [options.brtTypes=null]\n     * @returns {Promise<{rollTableList:{rollTable:RollTable;options:{rollsAmount:string;rollAsTableType:string;}}[];currencies:string}>}\n     */\n    async retrieveActorList(actor, options) {\n        const brtTypes = parseAsArray(options.brtTypes);\n        const actorTmp = await RetrieveHelpers.getActorAsync(actor);\n        return await BRTActorList.retrieveActorList(actorTmp, brtTypes);\n    },\n\n    /**\n     *\n     * @param {Actor|UUID|string} actor\n     * @param {Object} [options={}]\n     * @param {('none'|'better'|'loot'|'harvest'|'story')[]} [options.brtTypes=null]\n     * @returns {Promise<ItemData[]>} Item Data Array.  An array of objects, each containing the item that was added or updated, and the quantity that was added\n     */\n    async retrieveItemsDataFromRollTableResultActorList(actor, options) {\n        const brtTypes = parseAsArray(options.brtTypes);\n        const actorTmp = await RetrieveHelpers.getActorAsync(actor);\n        const brtActorList = await this.retrieveActorList(actorTmp, {\n            brtTypes: brtTypes,\n        });\n        const rolltableList = brtActorList.rollTableList;\n\n        const itemsDataToReturnTotal = [];\n\n        for (const rollTableElement of rolltableList) {\n            const table = rollTableElement.rollTable;\n            const options = rollTableElement.options;\n            const itemsDataToReturn = await this.retrieveItemsDataFromRollTableResult({\n                table: table,\n                options: options,\n            });\n            itemsDataToReturnTotal.push(itemsDataToReturn ?? []);\n        }\n        return itemsDataToReturnTotal;\n    },\n};\n\nexport default API;\n","import { CONSTANTS } from \"./constants/constants\";\nimport SETTINGS from \"./constants/settings\";\n// import { BetterRolltableSettingsConfig } from \"./core/settingsConfig\";\nimport Logger from \"./lib/Logger\";\n// import { SYSTEMS } from \"./systems\";\n\nexport const WORLD = \"world\";\nexport const GROUP_DEFAULT = \"defaults\";\nexport const GROUP_UI = \"UI\";\nexport const GROUP_LOOT = \"Loot\";\nexport const GROUP_HARVEST = \"Harvest\";\nexport const GROUP_TAGS = \"Tags\";\n\n// /**\n//  * Register the game settings during InitHook required by contextmenues\n//  */\n// function _registerSettingsDuringInit() {\n//   game.settings.register(CONSTANTS.MODULE_ID, CONSTANTS.ADD_ROLL_IN_COMPENDIUM_CONTEXTMENU, {\n//     name: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.AddRollInCompediumContextMenu.Title`),\n//     hint: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.AddRollInCompediumContextMenu.Description`),\n//     scope: WORLD,\n//     group: GROUP_UI,\n//     config: false,\n//     default: false,\n//     type: Boolean,\n//   });\n//   game.settings.register(CONSTANTS.MODULE_ID, CONSTANTS.ADD_ROLL_IN_ROLLTABLE_CONTEXTMENU, {\n//     name: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.AddRollInRolltableContextMenu.Title`),\n//     hint: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.AddRollInRolltableContextMenu.Description`),\n//     scope: WORLD,\n//     group: GROUP_UI,\n//     config: false,\n//     default: false,\n//     type: Boolean,\n//   });\n// }\n\nexport function registerSettings() {\n    /*\n    for (let [name, data] of Object.entries(SETTINGS.GET_DEFAULT())) {\n        game.settings.register(CONSTANTS.MODULE_ID, name, data);\n    }\n\n    let defaultSpellCompendium = SYSTEMS.DATA.DEFAULT_SPELL_COMPENDIUM;\n    let defaultActorNpcType = SYSTEMS.DATA.DEFAULT_ACTOR_NPC_TYPE;\n    let defaultLootSheet = SYSTEMS.DATA.DEFAULT_LOOT_SHEET;\n    CONSTANTS.QUANTITY_PROPERTY_PATH = SYSTEMS.DATA.QUANTITY_PROPERTY_PATH;\n    CONSTANTS.WEIGHT_PROPERTY_PATH = SYSTEMS.DATA.WEIGHT_PROPERTY_PATH;\n    CONSTANTS.PRICE_PROPERTY_PATH = SYSTEMS.DATA.PRICE_PROPERTY_PATH;\n    CONSTANTS.SPELL_LEVEL_PATH = SYSTEMS.DATA.SPELL_LEVEL_PATH;\n    CONSTANTS.ITEM_LOOT_TYPE = SYSTEMS.DATA.ITEM_LOOT_TYPE;\n    CONSTANTS.SCROLL_REGEX = SYSTEMS.DATA.SCROLL_REGEX;\n    */\n\n    /* RIMOSSO 2024-03-22\n    game.settings.registerMenu(CONSTANTS.MODULE_ID, \"helpersOptions\", {\n        name: Logger.i18n(\"User Interface Integration\"),\n        label: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.Module.AdvancedSettings.Title`),\n        icon: \"fas fa-user-cog\",\n        type: BetterRolltableSettingsConfig,\n        restricted: true,\n    });\n    */\n\n    game.settings.register(CONSTANTS.MODULE_ID, CONSTANTS.ADD_ROLL_IN_COMPENDIUM_CONTEXTMENU, {\n        name: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.AddRollInCompediumContextMenu.Title`),\n        hint: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.AddRollInCompediumContextMenu.Description`),\n        scope: WORLD,\n        group: GROUP_UI,\n        config: true,\n        default: false,\n        type: Boolean,\n    });\n    game.settings.register(CONSTANTS.MODULE_ID, CONSTANTS.ADD_ROLL_IN_ROLLTABLE_CONTEXTMENU, {\n        name: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.AddRollInRolltableContextMenu.Title`),\n        hint: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.AddRollInRolltableContextMenu.Description`),\n        scope: WORLD,\n        group: GROUP_UI,\n        config: true,\n        default: false,\n        type: Boolean,\n    });\n\n    // User Interface Integration\n\n    // game.settings.register(CONSTANTS.MODULE_ID, CONSTANTS.USE_CONDENSED_BETTERROLL, {\n    //     name: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.UseCondensedBetterRoll.Title`),\n    //     hint: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.UseCondensedBetterRoll.Description`),\n    //     scope: WORLD,\n    //     group: GROUP_UI,\n    //     config: true,\n    //     default: false,\n    //     type: Boolean,\n    // });\n\n    game.settings.register(CONSTANTS.MODULE_ID, CONSTANTS.SHOW_REROLL_BUTTONS, {\n        name: Logger.i18n(`${CONSTANTS.MODULE_ID}.Buttons.Reroll.Title`),\n        hint: Logger.i18n(`${CONSTANTS.MODULE_ID}.Buttons.Reroll.Description`),\n        scope: WORLD,\n        group: GROUP_UI,\n        config: true,\n        default: false,\n        type: Boolean,\n    });\n\n    game.settings.register(CONSTANTS.MODULE_ID, CONSTANTS.SHOW_WARNING_BEFORE_REROLL, {\n        name: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.ShowWarningBeforeReroll.Title`),\n        hint: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.ShowWarningBeforeReroll.Description`),\n        scope: WORLD,\n        group: GROUP_UI,\n        config: true,\n        default: false,\n        type: Boolean,\n    });\n\n    game.settings.register(CONSTANTS.MODULE_ID, CONSTANTS.SHOW_OPEN_BUTTONS, {\n        name: Logger.i18n(`${CONSTANTS.MODULE_ID}.Buttons.Open.Title`),\n        hint: Logger.i18n(`${CONSTANTS.MODULE_ID}.Buttons.Open.Description`),\n        scope: WORLD,\n        group: GROUP_UI,\n        config: true,\n        default: false,\n        type: Boolean,\n    });\n\n    // TODO DEPRECATED IN FAVOR OF OTHER MODUELS ??\n\n    game.settings.register(CONSTANTS.MODULE_ID, CONSTANTS.ROLL_TABLE_FROM_JOURNAL, {\n        name: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.RollTableFromJournal.Title`),\n        hint: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.RollTableFromJournal.Description`),\n        scope: WORLD,\n        group: GROUP_UI,\n        config: false,\n        default: false,\n        type: Boolean,\n    });\n\n    // TAGS\n\n    game.settings.register(CONSTANTS.MODULE_ID, CONSTANTS.TAGS.USE, {\n        name: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.Tags.Use.Title`),\n        hint: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.Tags.Use.Description`),\n        scope: WORLD,\n        group: GROUP_TAGS,\n        config: false,\n        default: true,\n        type: Boolean,\n    });\n\n    game.settings.register(CONSTANTS.MODULE_ID, CONSTANTS.TAGS.DEFAULTS, {\n        name: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.Tags.Defaults.Title`),\n        hint: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.Tags.Defaults.Description`),\n        scope: WORLD,\n        group: GROUP_TAGS,\n        config: false,\n        default: {},\n        type: Object,\n    });\n\n    // Loot / Merchant specific\n\n    // game.settings.register(CONSTANTS.MODULE_ID, CONSTANTS.SHOW_CURRENCY_SHARE_BUTTON, {\n    //     name: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.ShareCurrencyButton.Title`),\n    //     hint: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.ShareCurrencyButton.Description`),\n    //     scope: WORLD,\n    //     group: GROUP_LOOT,\n    //     config: false,\n    //     default: false,\n    //     type: Boolean,\n    // });\n\n    // game.settings.register(CONSTANTS.MODULE_ID, CONSTANTS.ALWAYS_SHOW_GENERATED_LOOT_AS_MESSAGE, {\n    //     name: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.AlwaysShowGeneratedLootAsMessage.Title`),\n    //     hint: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.AlwaysShowGeneratedLootAsMessage.Description`),\n    //     scope: WORLD,\n    //     group: GROUP_LOOT,\n    //     config: false,\n    //     default: false,\n    //     type: Boolean,\n    // });\n\n    // Harvest specific\n\n    // game.settings.register(CONSTANTS.MODULE_ID, CONSTANTS.ALWAYS_SHOW_GENERATED_HARVEST_AS_MESSAGE, {\n    //     name: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.AlwaysShowGeneratedHarvestAsMessage.Title`),\n    //     hint: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.AlwaysShowGeneratedHarvestAsMessage.Description`),\n    //     scope: WORLD,\n    //     group: GROUP_HARVEST,\n    //     config: false,\n    //     default: false,\n    //     type: Boolean,\n    // });\n\n    game.settings.register(CONSTANTS.MODULE_ID, \"forceNormalizeIfNoResultAreDrawn\", {\n        name: `${CONSTANTS.MODULE_ID}.Settings.forceNormalizeIfNoResultAreDrawn.name`,\n        hint: `${CONSTANTS.MODULE_ID}.Settings.forceNormalizeIfNoResultAreDrawn.hint`,\n        scope: \"world\",\n        config: true,\n        default: false,\n        type: Boolean,\n    });\n\n    game.settings.register(CONSTANTS.MODULE_ID, \"headerActorListLabel\", {\n        name: `${CONSTANTS.MODULE_ID}.Settings.headerActorListLabel.name`,\n        hint: `${CONSTANTS.MODULE_ID}.Settings.headerActorListLabel.hint`,\n        scope: \"world\",\n        config: true,\n        type: Boolean,\n        default: true,\n    });\n\n    // =====================================================================\n\n    game.settings.register(CONSTANTS.MODULE_ID, \"debug\", {\n        name: `${CONSTANTS.MODULE_ID}.Settings.debug.name`,\n        hint: `${CONSTANTS.MODULE_ID}.Settings.debug.hint`,\n        scope: \"client\",\n        config: true,\n        default: false,\n        type: Boolean,\n    });\n\n    // ========================================================================\n}\n\n// /**\n//  *\n//  */\n// function _registerTagsSettings() {\n//   game.settings.register(CONSTANTS.MODULE_ID, CONSTANTS.TAGS.USE, {\n//     name: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.Tags.Use.Title`),\n//     hint: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.Tags.Use.Description`),\n//     scope: WORLD,\n//     group: GROUP_TAGS,\n//     config: false,\n//     default: true,\n//     type: Boolean,\n//   });\n\n//   game.settings.register(CONSTANTS.MODULE_ID, CONSTANTS.TAGS.DEFAULTS, {\n//     name: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.Tags.Defaults.Title`),\n//     hint: Logger.i18n(`${CONSTANTS.MODULE_ID}.Settings.Tags.Defaults.Description`),\n//     scope: WORLD,\n//     group: GROUP_TAGS,\n//     config: false,\n//     default: {},\n//     type: Object,\n//   });\n// }\n/*\nexport async function applyDefaultSettings() {\n    const settings = SETTINGS.GET_SYSTEM_DEFAULTS();\n    for (const [name, data] of Object.entries(settings)) {\n        await game.settings.set(Constants.MODULE_ID, name, data.default);\n    }\n    await game.settings.set(Constants.MODULE_ID, SETTINGS.SYSTEM_VERSION, SYSTEMS.DATA.VERSION);\n}\n\nexport function applySystemSpecificStyles(data = false) {\n    // TODO ?\n}\n\nexport async function checkSystem() {\n    if (!SYSTEMS.HAS_SYSTEM_SUPPORT) {\n        if (game.settings.get(Constants.MODULE_ID, SETTINGS.SYSTEM_NOT_FOUND_WARNING_SHOWN)) return;\n\n        let settingsValid = true;\n        for (const [name, data] of Object.entries(SETTINGS.GET_DEFAULT())) {\n            settingsValid =\n                settingsValid && game.settings.get(Constants.MODULE_ID, name).length !== new data.type().length;\n        }\n\n        if (settingsValid) return;\n\n        new Dialog({\n            title: game.i18n.localize(`${Constants.MODULE_ID}.Dialog.systemfound.title`),\n            content: Logger.warn(game.i18n.localize(`${Constants.MODULE_ID}.Dialog.systemfound.content`), true),\n            buttons: {\n                confirm: {\n                    icon: '<i class=\"fas fa-check\"></i>',\n                    label: game.i18n.localize(`${Constants.MODULE_ID}.Dialog.systemfound.confirm`),\n                    callback: () => {\n                        applyDefaultSettings();\n                    },\n                },\n                cancel: {\n                    icon: '<i class=\"fas fa-times\"></i>',\n                    label: game.i18n.localize(\"No\"),\n                },\n            },\n            default: \"cancel\",\n        }).render(true);\n\n        return game.settings.set(Constants.MODULE_ID, SETTINGS.SYSTEM_NOT_FOUND_WARNING_SHOWN, true);\n    }\n\n    if (game.settings.get(Constants.MODULE_ID, SETTINGS.SYSTEM_FOUND) || SYSTEMS.DATA.INTEGRATION) {\n        const currentVersion = game.settings.get(Constants.MODULE_ID, SETTINGS.SYSTEM_VERSION);\n        const newVersion = SYSTEMS.DATA.VERSION;\n        Logger.debug(`Comparing system version - Current: ${currentVersion} - New: ${newVersion}`);\n        if (foundry.utils.isNewerVersion(newVersion, currentVersion)) {\n            Logger.debug(`Applying system settings for ${game.system.title}`);\n            await applyDefaultSettings();\n        }\n        return;\n    }\n\n    await game.settings.set(Constants.MODULE_ID, SETTINGS.SYSTEM_FOUND, true);\n\n    if (game.settings.get(Constants.MODULE_ID, SETTINGS.SYSTEM_NOT_FOUND_WARNING_SHOWN)) {\n        dialogWarning(game.i18n.localize(`${Constants.MODULE_ID}.Dialog.nosystemfound.content`));\n    }\n\n    return applyDefaultSettings();\n}\n*/\n","import { CONSTANTS } from \"../constants/constants\";\n\nexport class RichResultEdit extends DocumentSheet {\n    /**\n     * @param {TableResult} result\n     */\n    constructor(result, options) {\n        super(result, options);\n        this.options.id = `richedit-${result.uuid}`;\n        this.options.title = game.i18n.format(`${CONSTANTS.MODULE_ID}.label.RichEdit.Title`, {\n            table: result.parent.name,\n            result: result.id,\n        });\n\n        this.resolve = options.resolve;\n\n        result.parent.apps[this.appId] = this;\n    }\n\n    get template() {\n        return `modules/${CONSTANTS.MODULE_ID}/templates/sheet/brt-result-editor.hbs`;\n    }\n\n    static get defaultOptions() {\n        const _default = super.defaultOptions;\n        return {\n            ..._default,\n            classes: [..._default.classes, `${CONSTANTS.MODULE_ID}-rolltable-result-richedit`],\n            width: 540,\n            height: 360,\n            resizable: true,\n            submitOnChange: true,\n            closeOnSubmit: true,\n            submitOnClose: false,\n        };\n    }\n\n    async getData() {\n        const context = super.getData();\n        context.result = this.document;\n        return context;\n    }\n\n    close(options) {\n        delete this.document.parent.apps[this.appId];\n\n        super.close(options);\n        this.resolve(this.result);\n    }\n\n    _updateObject(event, formData) {\n        this.object.update(formData);\n        this.close();\n    }\n\n    static open(result) {\n        return new Promise((resolve) => new RichResultEdit(result, { resolve }).render(true, { focus: true }));\n    }\n}\n","import API from \"../../API.js\";\nimport { CONSTANTS } from \"../../constants/constants.js\";\nimport { BRTBetterHelpers } from \"./brt-helper.js\";\nimport { RichResultEdit } from \"../../core/brt-result-editor.js\";\nimport Logger from \"../../lib/Logger.js\";\nimport { BRTUtils } from \"../../core/utils.js\";\n\n/**\n * The Application responsible for displaying and editing a single RollTable document.\n * @param {RollTable} table                 The RollTable document being configured\n * @param {DocumentSheetOptions} [options]  Additional application configuration options\n */\nexport class BetterRollTableBetterConfig extends RollTableConfig {\n    /** @inheritdoc */\n    static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: [\"sheet\", \"roll-table-config\", `${CONSTANTS.MODULE_ID}-roll-table-config`],\n            template: `modules/${CONSTANTS.MODULE_ID}/templates/sheet/brt-roll-table-config.hbs`,\n            width: 1000,\n            height: \"auto\",\n            closeOnSubmit: false,\n            viewPermission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OBSERVER,\n            // scrollY: [\"table.table-results\"],\n            // dragDrop: [{ dragSelector: null, dropSelector: null }],\n            dragDrop: [\n                // { dragSelector: null, dropSelector: null },\n                {\n                    dragSelector: \"section.results .table-results .table-result\",\n                    dropSelector: \"section.results .table-results\",\n                },\n            ],\n            scrollY: [\".table-results\"],\n            resizable: true,\n        });\n    }\n\n    /* -------------------------------------------- */\n\n    //  /** @inheritdoc */\n    //  get title() {\n    //    return `${game.i18n.localize(\"TABLE.SheetTitle\")}: ${this.document.name}`;\n    //  }\n\n    /* -------------------------------------------- */\n\n    /**\n     * @override\n     */\n    async getData(options = {}) {\n        const context = await super.getData(options);\n        context.descriptionHTML = await TextEditor.enrichHTML(this.object.description, {\n            async: true,\n            secrets: this.object.isOwner,\n        });\n        const results = await Promise.all(\n            this.document.results.map(async (result) => {\n                const obj = await BRTBetterHelpers.updateTableResult(result);\n                if (obj?.result) {\n                    return obj.result;\n                }\n            }),\n        );\n        results.sort((a, b) => a.range[0] - b.range[0]);\n\n        // Merge data and return;\n        let brtData = foundry.utils.mergeObject(context, {\n            results: results,\n            resultTypes: Object.entries(CONST.TABLE_RESULT_TYPES).reduce((obj, v) => {\n                obj[v[1]] = v[0].titleCase();\n                return obj;\n            }, {}),\n            documentTypes: CONST.COMPENDIUM_DOCUMENT_TYPES,\n            compendiumPacks: Array.from(game.packs.keys()),\n        });\n\n        const brtTypeToCheck = BRTUtils.retrieveBRTType(this.document);\n\n        // Set brt type\n        if (brtTypeToCheck !== CONSTANTS.TABLE_TYPE_BETTER) {\n            await this.document.setFlag(\n                CONSTANTS.MODULE_ID,\n                CONSTANTS.FLAGS.TABLE_TYPE_KEY,\n                CONSTANTS.TABLE_TYPE_BETTER,\n            );\n        }\n        brtData.usePercentage = this.document.getFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.GENERIC_USE_PERCENTAGE);\n        brtData.useDynamicDc = false;\n        brtData.tableType = CONSTANTS.TABLE_TYPE_BETTER;\n        brtData.textType =\n            Logger.i18n(`${CONSTANTS.MODULE_ID}.${\"TypePrefixLabel\"}`) +\n            \" \" +\n            Logger.i18n(`${CONSTANTS.MODULE_ID}.${\"TypeLabel\"}`) +\n            \"\";\n\n        brtData = foundry.utils.mergeObject(brtData, duplicate(this.document.flags));\n        brtData.disabled = !this.isEditable;\n        brtData.uuid = this.document.uuid;\n        brtData.owner = this.document.isOwner;\n        // TODO\n        // brtData.enrichedDescription = await TextEditor.enrichHTML(context.data.description, { async: true });\n\n        this.canRoll = this.document.ownership[game.user.id]\n            ? this.document.ownership[game.user.id] === CONST.DOCUMENT_PERMISSION_LEVELS.OWNER ||\n              this.document.ownership[game.user.id] === CONST.DOCUMENT_PERMISSION_LEVELS.OBSERVER\n            : this.isEditable;\n\n        return brtData;\n    }\n\n    /* -------------------------------------------- */\n    /*  Event Listeners and Handlers                */\n    /* -------------------------------------------- */\n\n    /**\n     * @param {JQuery} jq\n     */\n    activateListeners(jq) {\n        super.activateListeners(jq);\n\n        const html = jq[0];\n\n        if (this.canRoll) {\n            // html.querySelector(\".better-rolltables-roll-better\").addEventListener(\n            //     \"click\",\n            //     this._onBetterRollTablesRoll.bind(this),\n            // );\n            html.querySelectorAll(\".better-rolltables-roll-better\").forEach((el) => {\n                el.disabled = false;\n                el.addEventListener(\"click\", this._onBetterRollTablesRoll.bind(this));\n            });\n        }\n\n        // The below options require an editable sheet\n        if (!this.isEditable) {\n            return;\n        }\n\n        // Save the sheet on refresh of the table\n        // html\n        //   .querySelector(\"button.refresh\")\n        //   .addEventListener(\"click\", this._onRefreshTable.bind(this));\n\n        // Re-normalize Table Entries\n        html.querySelector(\".normalize-weights\").addEventListener(\"click\", this._onNormalizeWeights.bind(this));\n\n        // Edit a Image\n        // html.find(\"img[data-edit]\").on(\"click\", this._onEditImage.bind(this));\n        // html.querySelectorAll(\"img[data-edit]\").forEach((el) =>\n        //     el.addEventListener(\"click\", this._onEditImage.bind(this)),\n        // );\n\n        // Edit a Result\n        html.querySelectorAll(\"a.edit-result\").forEach((el) =>\n            el.addEventListener(\"click\", this._onEditResult.bind(this)),\n        );\n        html.querySelectorAll(\"a.rich-edit-result\").forEach((el) =>\n            el.addEventListener(\"click\", this._openRichEditor.bind(this)),\n        );\n\n        // Modify Page Id\n        let selectPages = html.querySelector(\".result-details .result-details-journal-page-id\");\n        selectPages?.addEventListener(\"change\", this._onChangeResultJournalPageId.bind(this));\n\n        // TODO\n        // html.querySelector(\".toggle-editor\").addEventListener(\"click\", (ev) => this._toggleSimpleEditor(ev, html));\n\n        // sortable(html.querySelector(\".table-results\"));\n    }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Handle creating a TableResult in the RollTable document\n    //    * @param {MouseEvent} event        The originating mouse event\n    //    * @param {object} [resultData]     An optional object of result data to use\n    //    * @returns {Promise}\n    //    * @private\n    //    */\n    //   async _onCreateResult(event, resultData={}) {\n    //     event.preventDefault();\n\n    //     // Save any pending changes\n    //     await this._onSubmit(event);\n\n    //     // Get existing results\n    //     const results = Array.from(this.document.results.values());\n    //     let last = results[results.length - 1];\n\n    //     // Get weight and range data\n    //     let weight = last ? (last.weight || 1) : 1;\n    //     let totalWeight = results.reduce((t, r) => t + r.weight, 0) || 1;\n    //     let minRoll = results.length ? Math.min(...results.map(r => r.range[0])) : 0;\n    //     let maxRoll = results.length ? Math.max(...results.map(r => r.range[1])) : 0;\n\n    //     // Determine new starting range\n    //     const spread = maxRoll - minRoll + 1;\n    //     const perW = Math.round(spread / totalWeight);\n    //     const range = [maxRoll + 1, maxRoll + Math.max(1, weight * perW)];\n\n    //     // Create the new Result\n    //     resultData = foundry.utils.mergeObject({\n    //       type: last ? last.type : CONST.TABLE_RESULT_TYPES.TEXT,\n    //       documentCollection: last ? last.documentCollection : null,\n    //       weight: weight,\n    //       range: range,\n    //       drawn: false\n    //     }, resultData);\n    //     return this.document.createEmbeddedDocuments(\"TableResult\", [resultData]);\n    //   }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Submit the entire form when a table result type is changed, in case there are other active changes\n    //    * @param {Event} event\n    //    * @private\n    //    */\n    //   _onChangeResultType(event) {\n    //     event.preventDefault();\n    //     const rt = CONST.TABLE_RESULT_TYPES;\n    //     const select = event.target;\n    //     const value = parseInt(select.value);\n    //     const resultKey = select.name.replace(\".type\", \"\");\n    //     let documentCollection = \"\";\n    //     if ( value === rt.DOCUMENT ) documentCollection = \"Actor\";\n    //     else if ( value === rt.COMPENDIUM ) documentCollection = game.packs.keys().next().value;\n    //     const updateData = {[resultKey]: {documentCollection, documentId: null}};\n    //     return this._onSubmit(event, {updateData});\n    //   }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Handle deleting a TableResult from the RollTable document\n     * @param {MouseEvent} event        The originating click event\n     * @returns {Promise<TableResult>}   The deleted TableResult document\n     * @private\n     */\n    async _onDeleteResult(event) {\n        event.preventDefault();\n        await this._onSubmit(event);\n        const li = event.currentTarget.closest(\".table-result\");\n        const result = this.object.results.get(li.dataset.resultId);\n        return result.delete();\n    }\n\n    /* -------------------------------------------- */\n\n    /** @inheritdoc */\n    async _onDrop(event) {\n        const json = TextEditor.getDragEventData(event);\n        if (json.event === \"sort\") {\n            const eel = event.target;\n            const el = eel.dataset.resultId ? eel : eel.closest(\".table-result[data-result-id]\");\n            if (!el) {\n                Logger.warn(\"Drop target not found.\", true);\n                return;\n            }\n            return this.reorderIndex(event, json.result, el.dataset.resultId);\n        } else {\n            if (json.type === \"JournalEntryPage\") {\n                const journalPage = await fromUuid(json.uuid);\n\n                const data = await fromUuid(journalPage.parent.uuid);\n                data.type = data.documentName;\n                const allowed = Hooks.call(\"dropRollTableSheetData\", this.document, this, data);\n                if (allowed === false) return;\n\n                // Get the dropped document\n                if (!CONST.DOCUMENT_TYPES.includes(data.type)) return;\n                //const cls = getDocumentClass(data.type);\n                //const document = await cls.fromDropData(data);\n                const document = data;\n                if (!document || document.isEmbedded) return;\n\n                // Delegate to the onCreate handler\n                const isCompendium = !!document.compendium;\n                return await this._onCreateResult(event, {\n                    type: isCompendium ? CONST.TABLE_RESULT_TYPES.COMPENDIUM : CONST.TABLE_RESULT_TYPES.DOCUMENT,\n                    documentCollection: isCompendium ? document.pack : document.documentName,\n                    text: document.name,\n                    documentId: document.id,\n                    img: document.img || null,\n                    flags: {\n                        [`${CONSTANTS.MODULE_ID}`]: {\n                            [`${CONSTANTS.FLAGS.GENERIC_RESULT_JOURNAL_PAGE_UUID}`]: json.uuid,\n                        },\n                    },\n                });\n            } else {\n                return super._onDrop(event);\n            }\n        }\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Handle changing the actor profile image by opening a FilePicker\n     * @param {Event} event\n     * @private\n     */\n    _onEditImage(event) {\n        const img = event.currentTarget;\n        const isHeader = img.dataset.edit === \"img\";\n        let current = this.document.img;\n        if (!isHeader) {\n            const li = img.closest(\".table-result\");\n            const result = this.document.results.get(li.dataset.resultId);\n            // MOD 4535992 removed we want to customize the image\n            // if (result.type !== CONST.TABLE_RESULT_TYPES.TEXT) return;\n            current = result.img;\n        }\n        const fp = new FilePicker({\n            type: \"image\",\n            current: current,\n            callback: async (path) => {\n                // MOD 4535992 make async\n                img.src = path;\n                // START MOD 4535992 added we want to customize the image\n                const resultImage = img.closest(\".result-image\");\n                let resultImageInputs = resultImage.querySelectorAll(\"input\");\n                let inputCustomIcon = resultImageInputs[0].value || \"\";\n                if (inputCustomIcon !== path) {\n                    resultImageInputs[0].value = path;\n                }\n                // const resultDocUuid = getProperty(\n                //     result,\n                //     `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_UUID}`,\n                // );\n                // const resultDoc = await fromUuid(resultDocUuid);\n                // await result.setFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON, path);\n                // END MOD 4535992 added we want to customize the image\n                return this._onSubmit(event);\n            },\n            top: this.position.top + 40,\n            left: this.position.left + 10,\n        });\n        return fp.browse();\n    }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Handle a button click to re-normalize dice result ranges across all RollTable results\n    //    * @param {Event} event\n    //    * @private\n    //    */\n    //   async _onNormalizeResults(event) {\n    //     event.preventDefault();\n    //     if ( !this.rendered || this._submitting) return false;\n\n    //     // Save any pending changes\n    //     await this._onSubmit(event);\n\n    //     // Normalize the RollTable\n    //     return this.document.normalize();\n    //   }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Handle toggling the drawn status of the result in the table\n    //    * @param {Event} event\n    //    * @private\n    //    */\n    //   _onLockResult(event) {\n    //     event.preventDefault();\n    //     const tableResult = event.currentTarget.closest(\".table-result\");\n    //     const result = this.document.results.get(tableResult.dataset.resultId);\n    //     return result.update({drawn: !result.drawn});\n    //   }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Reset the Table to it's original composition with all options unlocked\n    //    * @param {Event} event\n    //    * @private\n    //    */\n    //   _onResetTable(event) {\n    //     event.preventDefault();\n    //     return this.document.resetResults();\n    //   }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Handle drawing a result from the RollTable\n     * @param {Event} event\n     * @private\n     */\n    async _onRollTable(event) {\n        // event.preventDefault();\n        // await this.submit({preventClose: true, preventRender: true});\n        // event.currentTarget.disabled = true;\n        // let tableRoll = await this.document.roll();\n        // const draws = this.document.getResultsForRoll(tableRoll.roll.total);\n        // if ( draws.length ) {\n        //   if (game.settings.get(\"core\", \"animateRollTable\")) await this._animateRoll(draws);\n        //   await this.document.draw(tableRoll);\n        // }\n        // event.currentTarget.disabled = false;\n        return await super._onRollTable(event);\n    }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Configure the update object workflow for the Roll Table configuration sheet\n    //    * Additional logic is needed here to reconstruct the results array from the editable fields on the sheet\n    //    * @param {Event} event            The form submission event\n    //    * @param {Object} formData        The validated FormData translated into an Object for submission\n    //    * @returns {Promise}\n    //    * @private\n    //    */\n    //   async _updateObject(event, formData) {\n    //     // Expand the data to update the results array\n    //     const expanded = foundry.utils.expandObject(formData);\n    //     expanded.results = expanded.hasOwnProperty(\"results\") ? Object.values(expanded.results) : [];\n    //     for (let r of expanded.results) {\n    //       r.range = [r.rangeL, r.rangeH];\n    //       switch (r.type) {\n\n    //         // Document results\n    //         case CONST.TABLE_RESULT_TYPES.DOCUMENT:\n    //           const collection = game.collections.get(r.documentCollection);\n    //           if (!collection) continue;\n\n    //           // Get the original document, if the name still matches - take no action\n    //           const original = r.documentId ? collection.get(r.documentId) : null;\n    //           if (original && (original.name === r.text)) continue;\n\n    //           // Otherwise, find the document by ID or name (ID preferred)\n    //           const doc = collection.find(e => (e.id === r.text) || (e.name === r.text)) || null;\n    //           r.documentId = doc?.id ?? null;\n    //           r.text = doc?.name ?? null;\n    //           r.img = doc?.img ?? null;\n    //           r.img = doc?.thumb || doc?.img || null;\n    //           break;\n\n    //         // Compendium results\n    //         case CONST.TABLE_RESULT_TYPES.COMPENDIUM:\n    //           const pack = await getCompendiumCollectionAsync(result.documentCollection, true, false);\n    //           if (pack) {\n\n    //             // Get the original entry, if the name still matches - take no action\n    //             const original = pack.index.get(r.documentId) || null;\n    //             if (original && (original.name === r.text)) continue;\n\n    //             // Otherwise, find the document by ID or name (ID preferred)\n    //             const doc = pack.index.find(i => (i._id === r.text) || (i.name === r.text)) || null;\n    //             r.documentId = doc?._id || null;\n    //             r.text = doc?.name || null;\n    //             r.img = doc?.thumb || doc?.img || null;\n    //           }\n    //           break;\n\n    //         // Plain text results\n    //         default:\n    //           r.type = 0;\n    //           r.documentCollection = null;\n    //           r.documentId = null;\n    //       }\n    //     }\n\n    //     // Update the object\n    //     return this.document.update(expanded, {diff: false, recursive: false});\n    //   }\n\n    /* -------------------------------------------- */\n\n    /**\n     * MOD Modified copy of core _animateRoll to ensure it does not constantly break with the changed layout.\n     * Display a roulette style animation when a Roll Table result is drawn from the sheet\n     * @param {TableResult[]} results     An Array of drawn table results to highlight\n     * @returns {Promise}                  A Promise which resolves once the animation is complete\n     * @protected\n     */\n    async _animateRoll(results) {\n        // Get the list of results and their indices\n        const tableResults = this.element[0].querySelector(\".table-results > tbody\"); // MOD \".table-results\" instead \".table-results > tbody\"\n        const drawnIds = new Set(results.map((r) => r.id));\n        const drawnItems = Array.from(tableResults.children).filter((item) => drawnIds.has(item.dataset.resultId));\n\n        // Set the animation timing\n        const nResults = this.object.results.size;\n        const maxTime = 2000;\n        let animTime = 50;\n        let animOffset = Math.round(tableResults.offsetHeight / (tableResults.children[1].offsetHeight * 2)); // MOD [1] instead [0]\n        const nLoops = Math.min(Math.ceil(maxTime / (animTime * nResults)), 4);\n        if (nLoops === 1) animTime = maxTime / nResults;\n\n        // Animate the roulette\n        await this._animateRoulette(tableResults, drawnIds, nLoops, animTime, animOffset);\n\n        // Flash the results\n        const flashes = drawnItems.map((li) => this._flashResult(li));\n        return Promise.all(flashes);\n    }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Animate a \"roulette\" through the table until arriving at the final loop and a drawn result\n    //    * @param {HTMLOListElement} ol     The list element being iterated\n    //    * @param {Set<string>} drawnIds    The result IDs which have already been drawn\n    //    * @param {number} nLoops           The number of times to loop through the animation\n    //    * @param {number} animTime         The desired animation time in milliseconds\n    //    * @param {number} animOffset       The desired pixel offset of the result within the list\n    //    * @returns {Promise}               A Promise that resolves once the animation is complete\n    //    * @protected\n    //    */\n    //   async _animateRoulette(ol, drawnIds, nLoops, animTime, animOffset) {\n    //     let loop = 0;\n    //     let idx = 0;\n    //     let item = null;\n    //     return new Promise(resolve => {\n    //       let animId = setInterval(() => {\n    //         if (idx === 0) loop++;\n    //         if (item) item.classList.remove(\"roulette\");\n\n    //         // Scroll to the next item\n    //         item = ol.children[idx];\n    //         ol.scrollTop = (idx - animOffset) * item.offsetHeight;\n\n    //         // If we are on the final loop\n    //         if ( (loop === nLoops) && drawnIds.has(item.dataset.resultId) ) {\n    //           clearInterval(animId);\n    //           return resolve();\n    //         }\n\n    //         // Continue the roulette and cycle the index\n    //         item.classList.add(\"roulette\");\n    //         idx = idx < ol.children.length - 1 ? idx + 1 : 0;\n    //       }, animTime);\n    //     });\n    //   }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Display a flashing animation on the selected result to emphasize the draw\n    //    * @param {HTMLElement} item      The HTML &lt;li> item of the winning result\n    //    * @returns {Promise}              A Promise that resolves once the animation is complete\n    //    * @protected\n    //    */\n    //   async _flashResult(item) {\n    //     return new Promise(resolve => {\n    //       let count = 0;\n    //       let animId = setInterval(() => {\n    //         if (count % 2) item.classList.remove(\"roulette\");\n    //         else item.classList.add(\"roulette\");\n    //         if (count === 7) {\n    //           clearInterval(animId);\n    //           resolve();\n    //         }\n    //         count++;\n    //       }, 50);\n    //     });\n    //   }\n\n    /* ============================================== */\n\n    /**\n     * @param {DragEvent} event\n     */\n    _onDragStart(event) {\n        const eel = event.target;\n        const el = eel.dataset.resultId ? eel : eel.closest(\".table-result[data-result-id]\");\n        event.dataTransfer?.setData(\n            \"text/plain\",\n            JSON.stringify({ event: \"sort\", index: el.dataset.index, result: el.dataset.resultId }),\n        );\n    }\n\n    /**\n     * @param {String} source Source ID\n     * @param {String} target Target ID\n     */\n    async reorderIndex(event, source, target) {\n        if (!this.rendered || this._submitting) return false;\n        // Save any pending changes\n        await this._onSubmit(event);\n\n        // Normalize weights just in case\n        /** @type {Object[]} */\n        const results = this.document.results.map((result) => result.toObject(false));\n        results.sort((a, b) => a.range[0] - b.range[0]);\n\n        const sourceIx = results.findIndex((r) => r._id === source),\n            targetIx = results.findIndex((r) => r._id === target);\n\n        if (sourceIx == targetIx) {\n            Logger.warn(\"Can't move result onto itself.\", true);\n            return;\n        }\n\n        // Move result\n        const [moved] = results.splice(sourceIx, 1);\n        results.splice(targetIx, 0, moved);\n\n        // Update weight\n        results.forEach((r) => (r.weight = r.range[1] - (r.range[0] - 1)));\n        let totalWeight = 1;\n        const updates = [];\n        for (const result of results) {\n            const w = result.weight;\n            updates.push({ _id: result._id, weight: w, range: [totalWeight, totalWeight + w - 1] });\n            totalWeight = totalWeight + w;\n        }\n        return this.document.updateEmbeddedDocuments(\"TableResult\", updates);\n    }\n\n    /**\n     * Sets weights based on ranges\n     * @param {Event} event\n     */\n    async _onNormalizeWeights(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (!this.rendered || this._submitting) return false;\n\n        // Save any pending changes\n        await this._onSubmit(event);\n\n        const results = this.document.results.map((result) => result.toObject(false));\n\n        const updates = results.map((r) => ({ _id: r._id, weight: r.range[1] - (r.range[0] - 1) }));\n\n        return this.document.updateEmbeddedDocuments(\"TableResult\", updates);\n    }\n\n    /**\n     * @param {Event} event\n     */\n    async _openRichEditor(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Save any pending changes\n        await this._onSubmit(event);\n\n        const parent = event.target.closest(\".table-result[data-result-id]\");\n        const id = parent.dataset.resultId;\n        const result = this.document.results.get(id);\n\n        const uuid = `richedit-${result.uuid}`;\n        const old = Object.values(ui.windows).find((app) => app.options.id === uuid);\n        if (old) return old.render(true, { focus: true });\n\n        const update = await RichResultEdit.open(result);\n    }\n\n    /**\n     * @param {Event} event\n     */\n    _toggleSimpleEditor(event, html) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const simpleEditor = document.createElement(\"textarea\");\n        simpleEditor.name = \"description\";\n        simpleEditor.innerHTML = this.object.description;\n        const editor = html.querySelector(\".description-editor\");\n        editor?.replaceChildren(simpleEditor);\n        this.editors = {}; // Bust rich edit\n    }\n\n    _getSubmitData(updateData) {\n        const data = super._getSubmitData(updateData);\n        // HACK: Zero description caused by ProseMirror\n        if (data.description == \"<p></p>\") data.description = \"\";\n        return data;\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Handle toggling the drawn status of the result in the table\n     * @param {Event} event\n     * @private\n     */\n    async _onEditResult(event) {\n        event.preventDefault();\n        const tableResult = event.currentTarget.closest(\".table-result\");\n        const result = this.document.results.get(tableResult.dataset.resultId);\n        let findDocument = await BRTBetterHelpers.retrieveDocumentFromResult(result, true);\n\n        let isJournal = findDocument instanceof JournalEntry;\n        let docJournalPageUuid = getProperty(\n            result,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_JOURNAL_PAGE_UUID}`,\n        );\n        if (isJournal && docJournalPageUuid) {\n            findDocument = await fromUuid(docJournalPageUuid);\n        }\n\n        if (findDocument) {\n            findDocument.sheet.render(true);\n        } else {\n            Logger.warn(`No document is been found to edit`, true);\n        }\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Handle drawing a result from the RollTable\n     * @param {Event} event\n     * @private\n     */\n    async _onBetterRollTablesRoll(event) {\n        event.preventDefault();\n        await this.submit({ preventClose: true, preventRender: true });\n        if (event.currentTarget) {\n            event.currentTarget.disabled = true;\n        } else {\n            event.target.disabled = true;\n        }\n\n        const brtTypeToCheck = BRTUtils.retrieveBRTType(this.document);\n\n        // Set brt type\n        if (brtTypeToCheck !== CONSTANTS.TABLE_TYPE_BETTER) {\n            await this.document.setFlag(\n                CONSTANTS.MODULE_ID,\n                CONSTANTS.FLAGS.TABLE_TYPE_KEY,\n                CONSTANTS.TABLE_TYPE_BETTER,\n            );\n        }\n        const tableEntity = this.document;\n        await API.betterTableRoll(tableEntity);\n        if (event.currentTarget) {\n            event.currentTarget.disabled = false;\n        } else {\n            event.target.disabled = false;\n        }\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Submit the entire form when a table result type is changed, in case there are other active changes\n     * @param {Event} event\n     * @private\n     */\n    async _onChangeResultJournalPageId(event) {\n        event.preventDefault();\n        const select = event.target;\n        const value = select.value;\n        const resultKey = select.name;\n        const tableResult = event.currentTarget.closest(\".table-result\");\n        const result = this.document.results.get(tableResult.dataset.resultId);\n\n        setProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_JOURNAL_PAGE_UUID}`, value);\n        // Save any pending changes\n        await this._onSubmit(event);\n\n        await result.update({\n            flags: {\n                [`${CONSTANTS.MODULE_ID}`]: {\n                    [`${CONSTANTS.FLAGS.GENERIC_RESULT_JOURNAL_PAGE_UUID}`]: value ?? \"\",\n                },\n            },\n        });\n    }\n\n    /* -------------------------------------------- */\n}\n","import API from \"../../API\";\nimport { CONSTANTS } from \"../../constants/constants\";\nimport { BRTBetterHelpers } from \"../better/brt-helper\";\nimport { RichResultEdit } from \"../../core/brt-result-editor\";\nimport { BetterRollTableBetterConfig } from \"../better/brt-rolltable-config\";\nimport Logger from \"../../lib/Logger\";\nimport { BRTUtils } from \"../../core/utils\";\n\n/**\n * The Application responsible for displaying and editing a single RollTable document.\n * @param {RollTable} table                 The RollTable document being configured\n * @param {DocumentSheetOptions} [options]  Additional application configuration options\n */\nexport class BetterRollTableLootConfig extends RollTableConfig {\n    /** @inheritdoc */\n    static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: [\"sheet\", \"roll-table-config\", `${CONSTANTS.MODULE_ID}-roll-table-config`],\n            template: `modules/${CONSTANTS.MODULE_ID}/templates/sheet/brt-roll-table-config.hbs`,\n            width: 1000,\n            height: \"auto\",\n            closeOnSubmit: false,\n            viewPermission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OBSERVER,\n            // scrollY: [\"table.table-results\"],\n            // dragDrop: [{ dragSelector: null, dropSelector: null }],\n            dragDrop: [\n                // { dragSelector: null, dropSelector: null },\n                {\n                    dragSelector: \"section.results .table-results .table-result\",\n                    dropSelector: \"section.results .table-results\",\n                },\n            ],\n            scrollY: [\".table-results\"],\n            resizable: true,\n        });\n    }\n\n    /* -------------------------------------------- */\n\n    //  /** @inheritdoc */\n    //  get title() {\n    //    return `${game.i18n.localize(\"TABLE.SheetTitle\")}: ${this.document.name}`;\n    //  }\n\n    /* -------------------------------------------- */\n\n    /**\n     * @override\n     */\n    async getData(options = {}) {\n        const context = await super.getData(options);\n        context.descriptionHTML = await TextEditor.enrichHTML(this.object.description, {\n            async: true,\n            secrets: this.object.isOwner,\n        });\n        const results = await Promise.all(\n            this.document.results.map(async (result) => {\n                const obj = await BRTBetterHelpers.updateTableResult(result);\n                if (obj?.result) {\n                    return obj.result;\n                }\n            }),\n        );\n        results.sort((a, b) => a.range[0] - b.range[0]);\n\n        // Merge data and return;\n        let brtData = foundry.utils.mergeObject(context, {\n            results: results,\n            resultTypes: Object.entries(CONST.TABLE_RESULT_TYPES).reduce((obj, v) => {\n                obj[v[1]] = v[0].titleCase();\n                return obj;\n            }, {}),\n            documentTypes: CONST.COMPENDIUM_DOCUMENT_TYPES,\n            compendiumPacks: Array.from(game.packs.keys()),\n        });\n\n        const brtTypeToCheck = BRTUtils.retrieveBRTType(this.document);\n\n        // Set brt type\n        if (brtTypeToCheck !== CONSTANTS.TABLE_TYPE_LOOT) {\n            await this.document.setFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.TABLE_TYPE_KEY, CONSTANTS.TABLE_TYPE_LOOT);\n        }\n        brtData.usePercentage = this.document.getFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.GENERIC_USE_PERCENTAGE);\n        brtData.useDynamicDc = false;\n        brtData.tableType = CONSTANTS.TABLE_TYPE_LOOT;\n        brtData.textType =\n            Logger.i18n(`${CONSTANTS.MODULE_ID}.${\"TypePrefixLabel\"}`) +\n            \" \" +\n            Logger.i18n(`${CONSTANTS.MODULE_ID}.${\"TypeLoot\"}`) +\n            \"\";\n\n        brtData = foundry.utils.mergeObject(brtData, duplicate(this.document.flags));\n        brtData.disabled = !this.isEditable;\n        brtData.uuid = this.document.uuid;\n        brtData.owner = this.document.isOwner;\n        // TODO\n        // brtData.enrichedDescription = await TextEditor.enrichHTML(context.data.description, { async: true });\n\n        this.canRoll = this.document.ownership[game.user.id]\n            ? this.document.ownership[game.user.id] === CONST.DOCUMENT_PERMISSION_LEVELS.OWNER ||\n              this.document.ownership[game.user.id] === CONST.DOCUMENT_PERMISSION_LEVELS.OBSERVER\n            : this.isEditable;\n\n        return brtData;\n    }\n\n    /* -------------------------------------------- */\n    /*  Event Listeners and Handlers                */\n    /* -------------------------------------------- */\n\n    /**\n     * @param {JQuery} jq\n     */\n    activateListeners(jq) {\n        super.activateListeners(jq);\n\n        const html = jq[0];\n\n        if (this.canRoll) {\n            // html.querySelector(\".better-rolltables-roll-loot\").addEventListener(\n            //     \"click\",\n            //     this._onBetterRollTablesRoll.bind(this),\n            // );\n            html.querySelectorAll(\".better-rolltables-roll-loot\").forEach((el) => {\n                el.disabled = false;\n                el.addEventListener(\"click\", this._onBetterRollTablesRoll.bind(this));\n            });\n        }\n\n        // The below options require an editable sheet\n        if (!this.isEditable) {\n            return;\n        }\n\n        // Save the sheet on refresh of the table\n        // html\n        //   .querySelector(\"button.refresh\")\n        //   .addEventListener(\"click\", this._onRefreshTable.bind(this));\n\n        // Re-normalize Table Entries\n        html.querySelector(\".normalize-weights\").addEventListener(\"click\", this._onNormalizeWeights.bind(this));\n\n        // Edit a Image\n        // html.find(\"img[data-edit]\").on(\"click\", this._onEditImage.bind(this));\n        // html.querySelectorAll(\"img[data-edit]\").forEach((el) =>\n        //     el.addEventListener(\"click\", this._onEditImage.bind(this)),\n        // );\n\n        // Edit a Result\n        html.querySelectorAll(\"a.edit-result\").forEach((el) =>\n            el.addEventListener(\"click\", this._onEditResult.bind(this)),\n        );\n        html.querySelectorAll(\"a.rich-edit-result\").forEach((el) =>\n            el.addEventListener(\"click\", this._openRichEditor.bind(this)),\n        );\n\n        // Modify Page Id\n        let selectPages = html.querySelector(\".result-details .result-details-journal-page-id\");\n        selectPages?.addEventListener(\"change\", this._onChangeResultJournalPageId.bind(this));\n\n        // TODO\n        // html.querySelector(\".toggle-editor\").addEventListener(\"click\", (ev) => this._toggleSimpleEditor(ev, html));\n\n        // TIPO SPECIFICO\n        html.querySelectorAll(\"#BRT-gen-loot\").forEach((el) =>\n            el.addEventListener(\"click\", this._onBetterRollTablesGenerateLoot.bind(this)),\n        );\n        html.querySelectorAll(\"#BRT-gen-loot-token\").forEach((el) =>\n            el.addEventListener(\"click\", this._onBetterRollTablesGenerateLootToken.bind(this)),\n        );\n    }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Handle creating a TableResult in the RollTable document\n    //    * @param {MouseEvent} event        The originating mouse event\n    //    * @param {object} [resultData]     An optional object of result data to use\n    //    * @returns {Promise}\n    //    * @private\n    //    */\n    //   async _onCreateResult(event, resultData={}) {\n    //     event.preventDefault();\n\n    //     // Save any pending changes\n    //     await this._onSubmit(event);\n\n    //     // Get existing results\n    //     const results = Array.from(this.document.results.values());\n    //     let last = results[results.length - 1];\n\n    //     // Get weight and range data\n    //     let weight = last ? (last.weight || 1) : 1;\n    //     let totalWeight = results.reduce((t, r) => t + r.weight, 0) || 1;\n    //     let minRoll = results.length ? Math.min(...results.map(r => r.range[0])) : 0;\n    //     let maxRoll = results.length ? Math.max(...results.map(r => r.range[1])) : 0;\n\n    //     // Determine new starting range\n    //     const spread = maxRoll - minRoll + 1;\n    //     const perW = Math.round(spread / totalWeight);\n    //     const range = [maxRoll + 1, maxRoll + Math.max(1, weight * perW)];\n\n    //     // Create the new Result\n    //     resultData = foundry.utils.mergeObject({\n    //       type: last ? last.type : CONST.TABLE_RESULT_TYPES.TEXT,\n    //       documentCollection: last ? last.documentCollection : null,\n    //       weight: weight,\n    //       range: range,\n    //       drawn: false\n    //     }, resultData);\n    //     return this.document.createEmbeddedDocuments(\"TableResult\", [resultData]);\n    //   }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Submit the entire form when a table result type is changed, in case there are other active changes\n    //    * @param {Event} event\n    //    * @private\n    //    */\n    //   _onChangeResultType(event) {\n    //     event.preventDefault();\n    //     const rt = CONST.TABLE_RESULT_TYPES;\n    //     const select = event.target;\n    //     const value = parseInt(select.value);\n    //     const resultKey = select.name.replace(\".type\", \"\");\n    //     let documentCollection = \"\";\n    //     if ( value === rt.DOCUMENT ) documentCollection = \"Actor\";\n    //     else if ( value === rt.COMPENDIUM ) documentCollection = game.packs.keys().next().value;\n    //     const updateData = {[resultKey]: {documentCollection, documentId: null}};\n    //     return this._onSubmit(event, {updateData});\n    //   }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Handle deleting a TableResult from the RollTable document\n     * @param {MouseEvent} event        The originating click event\n     * @returns {Promise<TableResult>}   The deleted TableResult document\n     * @private\n     */\n    async _onDeleteResult(event) {\n        event.preventDefault();\n        await this._onSubmit(event);\n        const li = event.currentTarget.closest(\".table-result\");\n        const result = this.object.results.get(li.dataset.resultId);\n        return result.delete();\n    }\n\n    /* -------------------------------------------- */\n\n    /** @inheritdoc */\n    async _onDrop(event) {\n        const json = TextEditor.getDragEventData(event);\n        if (json.event === \"sort\") {\n            const eel = event.target;\n            const el = eel.dataset.resultId ? eel : eel.closest(\".table-result[data-result-id]\");\n            if (!el) {\n                Logger.warn(\"Drop target not found.\", true);\n                return;\n            }\n            return this.reorderIndex(event, json.result, el.dataset.resultId);\n        } else {\n            if (json.type === \"JournalEntryPage\") {\n                const journalPage = await fromUuid(json.uuid);\n\n                const data = await fromUuid(journalPage.parent.uuid);\n                data.type = data.documentName;\n                const allowed = Hooks.call(\"dropRollTableSheetData\", this.document, this, data);\n                if (allowed === false) return;\n\n                // Get the dropped document\n                if (!CONST.DOCUMENT_TYPES.includes(data.type)) return;\n                //const cls = getDocumentClass(data.type);\n                //const document = await cls.fromDropData(data);\n                const document = data;\n                if (!document || document.isEmbedded) return;\n\n                // Delegate to the onCreate handler\n                const isCompendium = !!document.compendium;\n                return await this._onCreateResult(event, {\n                    type: isCompendium ? CONST.TABLE_RESULT_TYPES.COMPENDIUM : CONST.TABLE_RESULT_TYPES.DOCUMENT,\n                    documentCollection: isCompendium ? document.pack : document.documentName,\n                    text: document.name,\n                    documentId: document.id,\n                    img: document.img || null,\n                    flags: {\n                        [`${CONSTANTS.MODULE_ID}`]: {\n                            [`${CONSTANTS.FLAGS.GENERIC_RESULT_JOURNAL_PAGE_UUID}`]: json.uuid,\n                        },\n                    },\n                });\n            } else {\n                return super._onDrop(event);\n            }\n        }\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Handle changing the actor profile image by opening a FilePicker\n     * @param {Event} event\n     * @private\n     */\n    _onEditImage(event) {\n        const img = event.currentTarget;\n        const isHeader = img.dataset.edit === \"img\";\n        let current = this.document.img;\n        if (!isHeader) {\n            const li = img.closest(\".table-result\");\n            const result = this.document.results.get(li.dataset.resultId);\n            // MOD 4535992 removed we want to customize the image\n            // if (result.type !== CONST.TABLE_RESULT_TYPES.TEXT) return;\n            current = result.img;\n        }\n        const fp = new FilePicker({\n            type: \"image\",\n            current: current,\n            callback: async (path) => {\n                // MOD 4535992 make async\n                img.src = path;\n                // START MOD 4535992 added we want to customize the image\n                const resultImage = img.closest(\".result-image\");\n                let resultImageInputs = resultImage.querySelectorAll(\"input\");\n                let inputCustomIcon = resultImageInputs[0].value || \"\";\n                if (inputCustomIcon !== path) {\n                    resultImageInputs[0].value = path;\n                }\n                // const resultDocUuid = getProperty(\n                //     result,\n                //     `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_UUID}`,\n                // );\n                // const resultDoc = await fromUuid(resultDocUuid);\n                // await result.setFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON, path);\n                // END MOD 4535992 added we want to customize the image\n                return this._onSubmit(event);\n            },\n            top: this.position.top + 40,\n            left: this.position.left + 10,\n        });\n        return fp.browse();\n    }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Handle a button click to re-normalize dice result ranges across all RollTable results\n    //    * @param {Event} event\n    //    * @private\n    //    */\n    //   async _onNormalizeResults(event) {\n    //     event.preventDefault();\n    //     if ( !this.rendered || this._submitting) return false;\n\n    //     // Save any pending changes\n    //     await this._onSubmit(event);\n\n    //     // Normalize the RollTable\n    //     return this.document.normalize();\n    //   }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Handle toggling the drawn status of the result in the table\n    //    * @param {Event} event\n    //    * @private\n    //    */\n    //   _onLockResult(event) {\n    //     event.preventDefault();\n    //     const tableResult = event.currentTarget.closest(\".table-result\");\n    //     const result = this.document.results.get(tableResult.dataset.resultId);\n    //     return result.update({drawn: !result.drawn});\n    //   }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Reset the Table to it's original composition with all options unlocked\n    //    * @param {Event} event\n    //    * @private\n    //    */\n    //   _onResetTable(event) {\n    //     event.preventDefault();\n    //     return this.document.resetResults();\n    //   }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Handle drawing a result from the RollTable\n     * @param {Event} event\n     * @private\n     */\n    async _onRollTable(event) {\n        // event.preventDefault();\n        // await this.submit({preventClose: true, preventRender: true});\n        // event.currentTarget.disabled = true;\n        // let tableRoll = await this.document.roll();\n        // const draws = this.document.getResultsForRoll(tableRoll.roll.total);\n        // if ( draws.length ) {\n        //   if (game.settings.get(\"core\", \"animateRollTable\")) await this._animateRoll(draws);\n        //   await this.document.draw(tableRoll);\n        // }\n        // event.currentTarget.disabled = false;\n        return await super._onRollTable(event);\n    }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Configure the update object workflow for the Roll Table configuration sheet\n    //    * Additional logic is needed here to reconstruct the results array from the editable fields on the sheet\n    //    * @param {Event} event            The form submission event\n    //    * @param {Object} formData        The validated FormData translated into an Object for submission\n    //    * @returns {Promise}\n    //    * @private\n    //    */\n    //   async _updateObject(event, formData) {\n    //     // Expand the data to update the results array\n    //     const expanded = foundry.utils.expandObject(formData);\n    //     expanded.results = expanded.hasOwnProperty(\"results\") ? Object.values(expanded.results) : [];\n    //     for (let r of expanded.results) {\n    //       r.range = [r.rangeL, r.rangeH];\n    //       switch (r.type) {\n\n    //         // Document results\n    //         case CONST.TABLE_RESULT_TYPES.DOCUMENT:\n    //           const collection = game.collections.get(r.documentCollection);\n    //           if (!collection) continue;\n\n    //           // Get the original document, if the name still matches - take no action\n    //           const original = r.documentId ? collection.get(r.documentId) : null;\n    //           if (original && (original.name === r.text)) continue;\n\n    //           // Otherwise, find the document by ID or name (ID preferred)\n    //           const doc = collection.find(e => (e.id === r.text) || (e.name === r.text)) || null;\n    //           r.documentId = doc?.id ?? null;\n    //           r.text = doc?.name ?? null;\n    //           r.img = doc?.img ?? null;\n    //           r.img = doc?.thumb || doc?.img || null;\n    //           break;\n\n    //         // Compendium results\n    //         case CONST.TABLE_RESULT_TYPES.COMPENDIUM:\n    //           const pack = await getCompendiumCollectionAsync(r.documentCollection, true, false);\n    //           if (pack) {\n\n    //             // Get the original entry, if the name still matches - take no action\n    //             const original = pack.index.get(r.documentId) || null;\n    //             if (original && (original.name === r.text)) continue;\n\n    //             // Otherwise, find the document by ID or name (ID preferred)\n    //             const doc = pack.index.find(i => (i._id === r.text) || (i.name === r.text)) || null;\n    //             r.documentId = doc?._id || null;\n    //             r.text = doc?.name || null;\n    //             r.img = doc?.thumb || doc?.img || null;\n    //           }\n    //           break;\n\n    //         // Plain text results\n    //         default:\n    //           r.type = 0;\n    //           r.documentCollection = null;\n    //           r.documentId = null;\n    //       }\n    //     }\n\n    //     // Update the object\n    //     return this.document.update(expanded, {diff: false, recursive: false});\n    //   }\n\n    /* -------------------------------------------- */\n\n    /**\n     * MOD Modified copy of core _animateRoll to ensure it does not constantly break with the changed layout.\n     * Display a roulette style animation when a Roll Table result is drawn from the sheet\n     * @param {TableResult[]} results     An Array of drawn table results to highlight\n     * @returns {Promise}                  A Promise which resolves once the animation is complete\n     * @protected\n     */\n    async _animateRoll(results) {\n        // Get the list of results and their indices\n        const tableResults = this.element[0].querySelector(\".table-results > tbody\"); // MOD \".table-results\" instead \".table-results > tbody\"\n        const drawnIds = new Set(results.map((r) => r.id));\n        const drawnItems = Array.from(tableResults.children).filter((item) => drawnIds.has(item.dataset.resultId));\n\n        // Set the animation timing\n        const nResults = this.object.results.size;\n        const maxTime = 2000;\n        let animTime = 50;\n        let animOffset = Math.round(tableResults.offsetHeight / (tableResults.children[1].offsetHeight * 2)); // MOD [1] instead [0]\n        const nLoops = Math.min(Math.ceil(maxTime / (animTime * nResults)), 4);\n        if (nLoops === 1) animTime = maxTime / nResults;\n\n        // Animate the roulette\n        await this._animateRoulette(tableResults, drawnIds, nLoops, animTime, animOffset);\n\n        // Flash the results\n        const flashes = drawnItems.map((li) => this._flashResult(li));\n        return Promise.all(flashes);\n    }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Animate a \"roulette\" through the table until arriving at the final loop and a drawn result\n    //    * @param {HTMLOListElement} ol     The list element being iterated\n    //    * @param {Set<string>} drawnIds    The result IDs which have already been drawn\n    //    * @param {number} nLoops           The number of times to loop through the animation\n    //    * @param {number} animTime         The desired animation time in milliseconds\n    //    * @param {number} animOffset       The desired pixel offset of the result within the list\n    //    * @returns {Promise}               A Promise that resolves once the animation is complete\n    //    * @protected\n    //    */\n    //   async _animateRoulette(ol, drawnIds, nLoops, animTime, animOffset) {\n    //     let loop = 0;\n    //     let idx = 0;\n    //     let item = null;\n    //     return new Promise(resolve => {\n    //       let animId = setInterval(() => {\n    //         if (idx === 0) loop++;\n    //         if (item) item.classList.remove(\"roulette\");\n\n    //         // Scroll to the next item\n    //         item = ol.children[idx];\n    //         ol.scrollTop = (idx - animOffset) * item.offsetHeight;\n\n    //         // If we are on the final loop\n    //         if ( (loop === nLoops) && drawnIds.has(item.dataset.resultId) ) {\n    //           clearInterval(animId);\n    //           return resolve();\n    //         }\n\n    //         // Continue the roulette and cycle the index\n    //         item.classList.add(\"roulette\");\n    //         idx = idx < ol.children.length - 1 ? idx + 1 : 0;\n    //       }, animTime);\n    //     });\n    //   }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Display a flashing animation on the selected result to emphasize the draw\n    //    * @param {HTMLElement} item      The HTML &lt;li> item of the winning result\n    //    * @returns {Promise}              A Promise that resolves once the animation is complete\n    //    * @protected\n    //    */\n    //   async _flashResult(item) {\n    //     return new Promise(resolve => {\n    //       let count = 0;\n    //       let animId = setInterval(() => {\n    //         if (count % 2) item.classList.remove(\"roulette\");\n    //         else item.classList.add(\"roulette\");\n    //         if (count === 7) {\n    //           clearInterval(animId);\n    //           resolve();\n    //         }\n    //         count++;\n    //       }, 50);\n    //     });\n    //   }\n\n    /* ============================================== */\n\n    /**\n     * @param {DragEvent} event\n     */\n    _onDragStart(event) {\n        const eel = event.target;\n        const el = eel.dataset.resultId ? eel : eel.closest(\".table-result[data-result-id]\");\n        event.dataTransfer?.setData(\n            \"text/plain\",\n            JSON.stringify({ event: \"sort\", index: el.dataset.index, result: el.dataset.resultId }),\n        );\n    }\n\n    /**\n     * @param {String} source Source ID\n     * @param {String} target Target ID\n     */\n    async reorderIndex(event, source, target) {\n        if (!this.rendered || this._submitting) return false;\n        // Save any pending changes\n        await this._onSubmit(event);\n\n        // Normalize weights just in case\n        /** @type {Object[]} */\n        const results = this.document.results.map((result) => result.toObject(false));\n        results.sort((a, b) => a.range[0] - b.range[0]);\n\n        const sourceIx = results.findIndex((r) => r._id === source),\n            targetIx = results.findIndex((r) => r._id === target);\n\n        if (sourceIx == targetIx) {\n            Logger.warn(\"Can't move result onto itself.\", true);\n            return;\n        }\n\n        // Move result\n        const [moved] = results.splice(sourceIx, 1);\n        results.splice(targetIx, 0, moved);\n\n        // Update weight\n        results.forEach((r) => (r.weight = r.range[1] - (r.range[0] - 1)));\n        let totalWeight = 1;\n        const updates = [];\n        for (const result of results) {\n            const w = result.weight;\n            updates.push({ _id: result._id, weight: w, range: [totalWeight, totalWeight + w - 1] });\n            totalWeight = totalWeight + w;\n        }\n        return this.document.updateEmbeddedDocuments(\"TableResult\", updates);\n    }\n\n    /**\n     * Sets weights based on ranges\n     * @param {Event} event\n     */\n    async _onNormalizeWeights(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (!this.rendered || this._submitting) return false;\n\n        // Save any pending changes\n        await this._onSubmit(event);\n\n        const results = this.document.results.map((result) => result.toObject(false));\n\n        const updates = results.map((r) => ({ _id: r._id, weight: r.range[1] - (r.range[0] - 1) }));\n\n        return this.document.updateEmbeddedDocuments(\"TableResult\", updates);\n    }\n\n    /**\n     * @param {Event} event\n     */\n    async _openRichEditor(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Save any pending changes\n        await this._onSubmit(event);\n\n        const parent = event.target.closest(\".table-result[data-result-id]\");\n        const id = parent.dataset.resultId;\n        const result = this.document.results.get(id);\n\n        const uuid = `richedit-${result.uuid}`;\n        const old = Object.values(ui.windows).find((app) => app.options.id === uuid);\n        if (old) return old.render(true, { focus: true });\n\n        const update = await RichResultEdit.open(result);\n    }\n\n    /**\n     * @param {Event} event\n     */\n    _toggleSimpleEditor(event, html) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const simpleEditor = document.createElement(\"textarea\");\n        simpleEditor.name = \"description\";\n        simpleEditor.innerHTML = this.object.description;\n        const editor = html.querySelector(\".description-editor\");\n        editor?.replaceChildren(simpleEditor);\n        this.editors = {}; // Bust rich edit\n    }\n\n    _getSubmitData(updateData) {\n        const data = super._getSubmitData(updateData);\n        // HACK: Zero description caused by ProseMirror\n        if (data.description == \"<p></p>\") data.description = \"\";\n        return data;\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Handle toggling the drawn status of the result in the table\n     * @param {Event} event\n     * @private\n     */\n    async _onEditResult(event) {\n        event.preventDefault();\n        const tableResult = event.currentTarget.closest(\".table-result\");\n        const result = this.document.results.get(tableResult.dataset.resultId);\n        let findDocument = await BRTBetterHelpers.retrieveDocumentFromResult(result, true);\n\n        let isJournal = findDocument instanceof JournalEntry;\n        let docJournalPageUuid = getProperty(\n            result,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_JOURNAL_PAGE_UUID}`,\n        );\n        if (isJournal && docJournalPageUuid) {\n            findDocument = await fromUuid(docJournalPageUuid);\n        }\n\n        if (findDocument) {\n            findDocument.sheet.render(true);\n        } else {\n            Logger.warn(`No document is been found to edit`, true);\n        }\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Handle drawing a result from the RollTable\n     * @param {Event} event\n     * @private\n     */\n    async _onBetterRollTablesRoll(event) {\n        event.preventDefault();\n        await this.submit({ preventClose: true, preventRender: true });\n        if (event.currentTarget) {\n            event.currentTarget.disabled = true;\n        } else {\n            event.target.disabled = true;\n        }\n\n        const brtTypeToCheck = BRTUtils.retrieveBRTType(this.document);\n\n        // Set brt type\n        if (brtTypeToCheck !== CONSTANTS.TABLE_TYPE_LOOT) {\n            await this.document.setFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.TABLE_TYPE_KEY, CONSTANTS.TABLE_TYPE_LOOT);\n        }\n        const tableEntity = this.document;\n        await API.generateChatLoot(tableEntity);\n        if (event.currentTarget) {\n            event.currentTarget.disabled = false;\n        } else {\n            event.target.disabled = false;\n        }\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Handle drawing a result from the RollTable\n     * @param {Event} event\n     * @private\n     */\n    async _onBetterRollTablesGenerateLoot(event) {\n        event.preventDefault();\n        await this.submit({ preventClose: true, preventRender: true });\n        if (event.currentTarget) {\n            event.currentTarget.disabled = true;\n        } else {\n            event.target.disabled = true;\n        }\n\n        const brtTypeToCheck = BRTUtils.retrieveBRTType(this.document);\n\n        // Set brt type\n        if (brtTypeToCheck !== CONSTANTS.TABLE_TYPE_LOOT) {\n            await this.document.setFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.TABLE_TYPE_KEY, CONSTANTS.TABLE_TYPE_LOOT);\n        }\n        const tableEntity = this.document;\n        await API.generateLoot(tableEntity);\n        if (event.currentTarget) {\n            event.currentTarget.disabled = false;\n        } else {\n            event.target.disabled = false;\n        }\n    }\n\n    /**\n     * Handle drawing a result from the RollTable\n     * @param {Event} event\n     * @private\n     */\n    async _onBetterRollTablesGenerateLootToken(event) {\n        event.preventDefault();\n        await this.submit({ preventClose: true, preventRender: true });\n        if (event.currentTarget) {\n            event.currentTarget.disabled = true;\n        } else {\n            event.target.disabled = true;\n        }\n\n        const brtTypeToCheck = BRTUtils.retrieveBRTType(this.document);\n\n        // Set brt type\n        if (brtTypeToCheck !== CONSTANTS.TABLE_TYPE_LOOT) {\n            await this.document.setFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.TABLE_TYPE_KEY, CONSTANTS.TABLE_TYPE_LOOT);\n        }\n        const tableEntity = this.document;\n        await API.generateLootOnSelectedToken(tableEntity);\n        if (event.currentTarget) {\n            event.currentTarget.disabled = false;\n        } else {\n            event.target.disabled = false;\n        }\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Submit the entire form when a table result type is changed, in case there are other active changes\n     * @param {Event} event\n     * @private\n     */\n    async _onChangeResultJournalPageId(event) {\n        event.preventDefault();\n        const select = event.target;\n        const value = select.value;\n        const resultKey = select.name;\n        const tableResult = event.currentTarget.closest(\".table-result\");\n        const result = this.document.results.get(tableResult.dataset.resultId);\n\n        setProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_JOURNAL_PAGE_UUID}`, value);\n        // Save any pending changes\n        await this._onSubmit(event);\n\n        await result.update({\n            flags: {\n                [`${CONSTANTS.MODULE_ID}`]: {\n                    [`${CONSTANTS.FLAGS.GENERIC_RESULT_JOURNAL_PAGE_UUID}`]: value ?? \"\",\n                },\n            },\n        });\n    }\n\n    /* -------------------------------------------- */\n}\n","import API from \"../../API\";\nimport { CONSTANTS } from \"../../constants/constants\";\nimport { BRTBetterHelpers } from \"../better/brt-helper\";\nimport { RichResultEdit } from \"../../core/brt-result-editor\";\nimport { BetterRollTableBetterConfig } from \"../better/brt-rolltable-config\";\nimport Logger from \"../../lib/Logger\";\nimport { BRTUtils } from \"../../core/utils\";\n\n/**\n * The Application responsible for displaying and editing a single RollTable document.\n * @param {RollTable} table                 The RollTable document being configured\n * @param {DocumentSheetOptions} [options]  Additional application configuration options\n */\nexport class BetterRollTableStoryConfig extends RollTableConfig {\n    /** @inheritdoc */\n    static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: [\"sheet\", \"roll-table-config\", `${CONSTANTS.MODULE_ID}-roll-table-config`],\n            template: `modules/${CONSTANTS.MODULE_ID}/templates/sheet/brt-roll-table-config.hbs`,\n            width: 1000,\n            height: \"auto\",\n            closeOnSubmit: false,\n            viewPermission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OBSERVER,\n            // scrollY: [\"table.table-results\"],\n            // dragDrop: [{ dragSelector: null, dropSelector: null }],\n            dragDrop: [\n                // { dragSelector: null, dropSelector: null },\n                {\n                    dragSelector: \"section.results .table-results .table-result\",\n                    dropSelector: \"section.results .table-results\",\n                },\n            ],\n            scrollY: [\".table-results\"],\n            resizable: true,\n        });\n    }\n\n    /* -------------------------------------------- */\n\n    //  /** @inheritdoc */\n    //  get title() {\n    //    return `${game.i18n.localize(\"TABLE.SheetTitle\")}: ${this.document.name}`;\n    //  }\n\n    /* -------------------------------------------- */\n\n    /**\n     * @override\n     */\n    async getData(options = {}) {\n        const context = await super.getData(options);\n        context.descriptionHTML = await TextEditor.enrichHTML(this.object.description, {\n            async: true,\n            secrets: this.object.isOwner,\n        });\n        const results = await Promise.all(\n            this.document.results.map(async (result) => {\n                const obj = await BRTBetterHelpers.updateTableResult(result);\n                if (obj?.result) {\n                    return obj.result;\n                }\n            }),\n        );\n        results.sort((a, b) => a.range[0] - b.range[0]);\n\n        // Merge data and return;\n        let brtData = foundry.utils.mergeObject(context, {\n            results: results,\n            resultTypes: Object.entries(CONST.TABLE_RESULT_TYPES).reduce((obj, v) => {\n                obj[v[1]] = v[0].titleCase();\n                return obj;\n            }, {}),\n            documentTypes: CONST.COMPENDIUM_DOCUMENT_TYPES,\n            compendiumPacks: Array.from(game.packs.keys()),\n        });\n\n        const brtTypeToCheck = BRTUtils.retrieveBRTType(this.document);\n\n        // Set brt type\n        if (brtTypeToCheck !== CONSTANTS.TABLE_TYPE_STORY) {\n            await this.document.setFlag(\n                CONSTANTS.MODULE_ID,\n                CONSTANTS.FLAGS.TABLE_TYPE_KEY,\n                CONSTANTS.TABLE_TYPE_STORY,\n            );\n        }\n        brtData.usePercentage = this.document.getFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.GENERIC_USE_PERCENTAGE);\n        brtData.useDynamicDc = false;\n        brtData.tableType = CONSTANTS.TABLE_TYPE_STORY;\n        brtData.textType =\n            Logger.i18n(`${CONSTANTS.MODULE_ID}.${\"TypePrefixLabel\"}`) +\n            \" \" +\n            Logger.i18n(`${CONSTANTS.MODULE_ID}.${\"TypeStory\"}`) +\n            \"\";\n\n        brtData = foundry.utils.mergeObject(brtData, duplicate(this.document.flags));\n        brtData.disabled = !this.isEditable;\n        brtData.uuid = this.document.uuid;\n        brtData.owner = this.document.isOwner;\n        // TODO\n        // brtData.enrichedDescription = await TextEditor.enrichHTML(context.data.description, { async: true });\n\n        this.canRoll = this.document.ownership[game.user.id]\n            ? this.document.ownership[game.user.id] === CONST.DOCUMENT_PERMISSION_LEVELS.OWNER ||\n              this.document.ownership[game.user.id] === CONST.DOCUMENT_PERMISSION_LEVELS.OBSERVER\n            : this.isEditable;\n\n        return brtData;\n    }\n\n    /* -------------------------------------------- */\n    /*  Event Listeners and Handlers                */\n    /* -------------------------------------------- */\n\n    /**\n     * @param {JQuery} jq\n     */\n    activateListeners(jq) {\n        super.activateListeners(jq);\n\n        const html = jq[0];\n\n        if (this.canRoll) {\n            // html.querySelector(\".better-rolltables-roll-story\").addEventListener(\n            //     \"click\",\n            //     this._onBetterRollTablesRoll.bind(this),\n            // );\n            html.querySelectorAll(\".better-rolltables-roll-story\").forEach((el) => {\n                el.disabled = false;\n                el.addEventListener(\"click\", this._onBetterRollTablesRoll.bind(this));\n            });\n        }\n\n        // The below options require an editable sheet\n        if (!this.isEditable) {\n            return;\n        }\n\n        // Save the sheet on refresh of the table\n        // html\n        //   .querySelector(\"button.refresh\")\n        //   .addEventListener(\"click\", this._onRefreshTable.bind(this));\n\n        // Re-normalize Table Entries\n        html.querySelector(\".normalize-weights\").addEventListener(\"click\", this._onNormalizeWeights.bind(this));\n\n        html.querySelectorAll(\".rich-edit-result\").forEach((el) =>\n            el.addEventListener(\"click\", this._openRichEditor.bind(this)),\n        );\n\n        // Edit a Image\n        // html.find(\"img[data-edit]\").on(\"click\", this._onEditImage.bind(this));\n        // html.querySelectorAll(\"img[data-edit]\").forEach((el) =>\n        //     el.addEventListener(\"click\", this._onEditImage.bind(this)),\n        // );\n\n        // Edit a Result\n        html.querySelectorAll(\"a.edit-result\").forEach((el) =>\n            el.addEventListener(\"click\", this._onEditResult.bind(this)),\n        );\n        html.querySelectorAll(\"a.rich-edit-result\").forEach((el) =>\n            el.addEventListener(\"click\", this._openRichEditor.bind(this)),\n        );\n\n        // Modify Page Id\n        let selectPages = html.querySelector(\".result-details .result-details-journal-page-id\");\n        selectPages?.addEventListener(\"change\", this._onChangeResultJournalPageId.bind(this));\n\n        // TODO\n        // html.querySelector(\".toggle-editor\").addEventListener(\"click\", (ev) => this._toggleSimpleEditor(ev, html));\n    }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Handle creating a TableResult in the RollTable document\n    //    * @param {MouseEvent} event        The originating mouse event\n    //    * @param {object} [resultData]     An optional object of result data to use\n    //    * @returns {Promise}\n    //    * @private\n    //    */\n    //   async _onCreateResult(event, resultData={}) {\n    //     event.preventDefault();\n\n    //     // Save any pending changes\n    //     await this._onSubmit(event);\n\n    //     // Get existing results\n    //     const results = Array.from(this.document.results.values());\n    //     let last = results[results.length - 1];\n\n    //     // Get weight and range data\n    //     let weight = last ? (last.weight || 1) : 1;\n    //     let totalWeight = results.reduce((t, r) => t + r.weight, 0) || 1;\n    //     let minRoll = results.length ? Math.min(...results.map(r => r.range[0])) : 0;\n    //     let maxRoll = results.length ? Math.max(...results.map(r => r.range[1])) : 0;\n\n    //     // Determine new starting range\n    //     const spread = maxRoll - minRoll + 1;\n    //     const perW = Math.round(spread / totalWeight);\n    //     const range = [maxRoll + 1, maxRoll + Math.max(1, weight * perW)];\n\n    //     // Create the new Result\n    //     resultData = foundry.utils.mergeObject({\n    //       type: last ? last.type : CONST.TABLE_RESULT_TYPES.TEXT,\n    //       documentCollection: last ? last.documentCollection : null,\n    //       weight: weight,\n    //       range: range,\n    //       drawn: false\n    //     }, resultData);\n    //     return this.document.createEmbeddedDocuments(\"TableResult\", [resultData]);\n    //   }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Submit the entire form when a table result type is changed, in case there are other active changes\n    //    * @param {Event} event\n    //    * @private\n    //    */\n    //   _onChangeResultType(event) {\n    //     event.preventDefault();\n    //     const rt = CONST.TABLE_RESULT_TYPES;\n    //     const select = event.target;\n    //     const value = parseInt(select.value);\n    //     const resultKey = select.name.replace(\".type\", \"\");\n    //     let documentCollection = \"\";\n    //     if ( value === rt.DOCUMENT ) documentCollection = \"Actor\";\n    //     else if ( value === rt.COMPENDIUM ) documentCollection = game.packs.keys().next().value;\n    //     const updateData = {[resultKey]: {documentCollection, documentId: null}};\n    //     return this._onSubmit(event, {updateData});\n    //   }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Handle deleting a TableResult from the RollTable document\n     * @param {MouseEvent} event        The originating click event\n     * @returns {Promise<TableResult>}   The deleted TableResult document\n     * @private\n     */\n    async _onDeleteResult(event) {\n        event.preventDefault();\n        await this._onSubmit(event);\n        const li = event.currentTarget.closest(\".table-result\");\n        const result = this.object.results.get(li.dataset.resultId);\n        return result.delete();\n    }\n\n    /* -------------------------------------------- */\n\n    /** @inheritdoc */\n    async _onDrop(event) {\n        const json = TextEditor.getDragEventData(event);\n        if (json.event === \"sort\") {\n            const eel = event.target;\n            const el = eel.dataset.resultId ? eel : eel.closest(\".table-result[data-result-id]\");\n            if (!el) {\n                Logger.warn(\"Drop target not found.\", true);\n                return;\n            }\n            return this.reorderIndex(event, json.result, el.dataset.resultId);\n        } else {\n            if (json.type === \"JournalEntryPage\") {\n                const journalPage = await fromUuid(json.uuid);\n\n                const data = await fromUuid(journalPage.parent.uuid);\n                data.type = data.documentName;\n                const allowed = Hooks.call(\"dropRollTableSheetData\", this.document, this, data);\n                if (allowed === false) return;\n\n                // Get the dropped document\n                if (!CONST.DOCUMENT_TYPES.includes(data.type)) return;\n                //const cls = getDocumentClass(data.type);\n                //const document = await cls.fromDropData(data);\n                const document = data;\n                if (!document || document.isEmbedded) return;\n\n                // Delegate to the onCreate handler\n                const isCompendium = !!document.compendium;\n                return await this._onCreateResult(event, {\n                    type: isCompendium ? CONST.TABLE_RESULT_TYPES.COMPENDIUM : CONST.TABLE_RESULT_TYPES.DOCUMENT,\n                    documentCollection: isCompendium ? document.pack : document.documentName,\n                    text: document.name,\n                    documentId: document.id,\n                    img: document.img || null,\n                    flags: {\n                        [`${CONSTANTS.MODULE_ID}`]: {\n                            [`${CONSTANTS.FLAGS.GENERIC_RESULT_JOURNAL_PAGE_UUID}`]: json.uuid,\n                        },\n                    },\n                });\n            } else {\n                return super._onDrop(event);\n            }\n        }\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Handle changing the actor profile image by opening a FilePicker\n     * @param {Event} event\n     * @private\n     */\n    _onEditImage(event) {\n        const img = event.currentTarget;\n        const isHeader = img.dataset.edit === \"img\";\n        let current = this.document.img;\n        if (!isHeader) {\n            const li = img.closest(\".table-result\");\n            const result = this.document.results.get(li.dataset.resultId);\n            // MOD 4535992 removed we want to customize the image\n            // if (result.type !== CONST.TABLE_RESULT_TYPES.TEXT) return;\n            current = result.img;\n        }\n        const fp = new FilePicker({\n            type: \"image\",\n            current: current,\n            callback: async (path) => {\n                // MOD 4535992 make async\n                img.src = path;\n                // START MOD 4535992 added we want to customize the image\n                const resultImage = img.closest(\".result-image\");\n                let resultImageInputs = resultImage.querySelectorAll(\"input\");\n                let inputCustomIcon = resultImageInputs[0].value || \"\";\n                if (inputCustomIcon !== path) {\n                    resultImageInputs[0].value = path;\n                }\n                // const resultDocUuid = getProperty(\n                //     result,\n                //     `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_UUID}`,\n                // );\n                // const resultDoc = await fromUuid(resultDocUuid);\n                // await result.setFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON, path);\n                // END MOD 4535992 added we want to customize the image\n                return this._onSubmit(event);\n            },\n            top: this.position.top + 40,\n            left: this.position.left + 10,\n        });\n        return fp.browse();\n    }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Handle a button click to re-normalize dice result ranges across all RollTable results\n    //    * @param {Event} event\n    //    * @private\n    //    */\n    //   async _onNormalizeResults(event) {\n    //     event.preventDefault();\n    //     if ( !this.rendered || this._submitting) return false;\n\n    //     // Save any pending changes\n    //     await this._onSubmit(event);\n\n    //     // Normalize the RollTable\n    //     return this.document.normalize();\n    //   }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Handle toggling the drawn status of the result in the table\n    //    * @param {Event} event\n    //    * @private\n    //    */\n    //   _onLockResult(event) {\n    //     event.preventDefault();\n    //     const tableResult = event.currentTarget.closest(\".table-result\");\n    //     const result = this.document.results.get(tableResult.dataset.resultId);\n    //     return result.update({drawn: !result.drawn});\n    //   }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Reset the Table to it's original composition with all options unlocked\n    //    * @param {Event} event\n    //    * @private\n    //    */\n    //   _onResetTable(event) {\n    //     event.preventDefault();\n    //     return this.document.resetResults();\n    //   }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Handle drawing a result from the RollTable\n     * @param {Event} event\n     * @private\n     */\n    async _onRollTable(event) {\n        // event.preventDefault();\n        // await this.submit({preventClose: true, preventRender: true});\n        // event.currentTarget.disabled = true;\n        // let tableRoll = await this.document.roll();\n        // const draws = this.document.getResultsForRoll(tableRoll.roll.total);\n        // if ( draws.length ) {\n        //   if (game.settings.get(\"core\", \"animateRollTable\")) await this._animateRoll(draws);\n        //   await this.document.draw(tableRoll);\n        // }\n        // event.currentTarget.disabled = false;\n        return await super._onRollTable(event);\n    }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Configure the update object workflow for the Roll Table configuration sheet\n    //    * Additional logic is needed here to reconstruct the results array from the editable fields on the sheet\n    //    * @param {Event} event            The form submission event\n    //    * @param {Object} formData        The validated FormData translated into an Object for submission\n    //    * @returns {Promise}\n    //    * @private\n    //    */\n    //   async _updateObject(event, formData) {\n    //     // Expand the data to update the results array\n    //     const expanded = foundry.utils.expandObject(formData);\n    //     expanded.results = expanded.hasOwnProperty(\"results\") ? Object.values(expanded.results) : [];\n    //     for (let r of expanded.results) {\n    //       r.range = [r.rangeL, r.rangeH];\n    //       switch (r.type) {\n\n    //         // Document results\n    //         case CONST.TABLE_RESULT_TYPES.DOCUMENT:\n    //           const collection = game.collections.get(r.documentCollection);\n    //           if (!collection) continue;\n\n    //           // Get the original document, if the name still matches - take no action\n    //           const original = r.documentId ? collection.get(r.documentId) : null;\n    //           if (original && (original.name === r.text)) continue;\n\n    //           // Otherwise, find the document by ID or name (ID preferred)\n    //           const doc = collection.find(e => (e.id === r.text) || (e.name === r.text)) || null;\n    //           r.documentId = doc?.id ?? null;\n    //           r.text = doc?.name ?? null;\n    //           r.img = doc?.img ?? null;\n    //           r.img = doc?.thumb || doc?.img || null;\n    //           break;\n\n    //         // Compendium results\n    //         case CONST.TABLE_RESULT_TYPES.COMPENDIUM:\n    //           const pack = await getCompendiumCollectionAsync(r.documentCollection, true, false);\n    //           if (pack) {\n\n    //             // Get the original entry, if the name still matches - take no action\n    //             const original = pack.index.get(r.documentId) || null;\n    //             if (original && (original.name === r.text)) continue;\n\n    //             // Otherwise, find the document by ID or name (ID preferred)\n    //             const doc = pack.index.find(i => (i._id === r.text) || (i.name === r.text)) || null;\n    //             r.documentId = doc?._id || null;\n    //             r.text = doc?.name || null;\n    //             r.img = doc?.thumb || doc?.img || null;\n    //           }\n    //           break;\n\n    //         // Plain text results\n    //         default:\n    //           r.type = 0;\n    //           r.documentCollection = null;\n    //           r.documentId = null;\n    //       }\n    //     }\n\n    //     // Update the object\n    //     return this.document.update(expanded, {diff: false, recursive: false});\n    //   }\n\n    /* -------------------------------------------- */\n\n    /**\n     * MOD Modified copy of core _animateRoll to ensure it does not constantly break with the changed layout.\n     * Display a roulette style animation when a Roll Table result is drawn from the sheet\n     * @param {TableResult[]} results     An Array of drawn table results to highlight\n     * @returns {Promise}                  A Promise which resolves once the animation is complete\n     * @protected\n     */\n    async _animateRoll(results) {\n        // Get the list of results and their indices\n        const tableResults = this.element[0].querySelector(\".table-results > tbody\"); // MOD \".table-results\" instead \".table-results > tbody\"\n        const drawnIds = new Set(results.map((r) => r.id));\n        const drawnItems = Array.from(tableResults.children).filter((item) => drawnIds.has(item.dataset.resultId));\n\n        // Set the animation timing\n        const nResults = this.object.results.size;\n        const maxTime = 2000;\n        let animTime = 50;\n        let animOffset = Math.round(tableResults.offsetHeight / (tableResults.children[1].offsetHeight * 2)); // MOD [1] instead [0]\n        const nLoops = Math.min(Math.ceil(maxTime / (animTime * nResults)), 4);\n        if (nLoops === 1) animTime = maxTime / nResults;\n\n        // Animate the roulette\n        await this._animateRoulette(tableResults, drawnIds, nLoops, animTime, animOffset);\n\n        // Flash the results\n        const flashes = drawnItems.map((li) => this._flashResult(li));\n        return Promise.all(flashes);\n    }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Animate a \"roulette\" through the table until arriving at the final loop and a drawn result\n    //    * @param {HTMLOListElement} ol     The list element being iterated\n    //    * @param {Set<string>} drawnIds    The result IDs which have already been drawn\n    //    * @param {number} nLoops           The number of times to loop through the animation\n    //    * @param {number} animTime         The desired animation time in milliseconds\n    //    * @param {number} animOffset       The desired pixel offset of the result within the list\n    //    * @returns {Promise}               A Promise that resolves once the animation is complete\n    //    * @protected\n    //    */\n    //   async _animateRoulette(ol, drawnIds, nLoops, animTime, animOffset) {\n    //     let loop = 0;\n    //     let idx = 0;\n    //     let item = null;\n    //     return new Promise(resolve => {\n    //       let animId = setInterval(() => {\n    //         if (idx === 0) loop++;\n    //         if (item) item.classList.remove(\"roulette\");\n\n    //         // Scroll to the next item\n    //         item = ol.children[idx];\n    //         ol.scrollTop = (idx - animOffset) * item.offsetHeight;\n\n    //         // If we are on the final loop\n    //         if ( (loop === nLoops) && drawnIds.has(item.dataset.resultId) ) {\n    //           clearInterval(animId);\n    //           return resolve();\n    //         }\n\n    //         // Continue the roulette and cycle the index\n    //         item.classList.add(\"roulette\");\n    //         idx = idx < ol.children.length - 1 ? idx + 1 : 0;\n    //       }, animTime);\n    //     });\n    //   }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Display a flashing animation on the selected result to emphasize the draw\n    //    * @param {HTMLElement} item      The HTML &lt;li> item of the winning result\n    //    * @returns {Promise}              A Promise that resolves once the animation is complete\n    //    * @protected\n    //    */\n    //   async _flashResult(item) {\n    //     return new Promise(resolve => {\n    //       let count = 0;\n    //       let animId = setInterval(() => {\n    //         if (count % 2) item.classList.remove(\"roulette\");\n    //         else item.classList.add(\"roulette\");\n    //         if (count === 7) {\n    //           clearInterval(animId);\n    //           resolve();\n    //         }\n    //         count++;\n    //       }, 50);\n    //     });\n    //   }\n\n    /* ============================================== */\n\n    /**\n     * @param {DragEvent} event\n     */\n    _onDragStart(event) {\n        const eel = event.target;\n        const el = eel.dataset.resultId ? eel : eel.closest(\".table-result[data-result-id]\");\n        event.dataTransfer?.setData(\n            \"text/plain\",\n            JSON.stringify({ event: \"sort\", index: el.dataset.index, result: el.dataset.resultId }),\n        );\n    }\n\n    /**\n     * @param {String} source Source ID\n     * @param {String} target Target ID\n     */\n    async reorderIndex(event, source, target) {\n        if (!this.rendered || this._submitting) return false;\n        // Save any pending changes\n        await this._onSubmit(event);\n\n        // Normalize weights just in case\n        /** @type {Object[]} */\n        const results = this.document.results.map((result) => result.toObject(false));\n        results.sort((a, b) => a.range[0] - b.range[0]);\n\n        const sourceIx = results.findIndex((r) => r._id === source),\n            targetIx = results.findIndex((r) => r._id === target);\n\n        if (sourceIx == targetIx) {\n            Logger.warn(\"Can't move result onto itself.\", true);\n            return;\n        }\n\n        // Move result\n        const [moved] = results.splice(sourceIx, 1);\n        results.splice(targetIx, 0, moved);\n\n        // Update weight\n        results.forEach((r) => (r.weight = r.range[1] - (r.range[0] - 1)));\n        let totalWeight = 1;\n        const updates = [];\n        for (const result of results) {\n            const w = result.weight;\n            updates.push({ _id: result._id, weight: w, range: [totalWeight, totalWeight + w - 1] });\n            totalWeight = totalWeight + w;\n        }\n        return this.document.updateEmbeddedDocuments(\"TableResult\", updates);\n    }\n\n    /**\n     * Sets weights based on ranges\n     * @param {Event} event\n     */\n    async _onNormalizeWeights(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (!this.rendered || this._submitting) return false;\n\n        // Save any pending changes\n        await this._onSubmit(event);\n\n        const results = this.document.results.map((result) => result.toObject(false));\n\n        const updates = results.map((r) => ({ _id: r._id, weight: r.range[1] - (r.range[0] - 1) }));\n\n        return this.document.updateEmbeddedDocuments(\"TableResult\", updates);\n    }\n\n    /**\n     * @param {Event} event\n     */\n    async _openRichEditor(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Save any pending changes\n        await this._onSubmit(event);\n\n        const parent = event.target.closest(\".table-result[data-result-id]\");\n        const id = parent.dataset.resultId;\n        const result = this.document.results.get(id);\n\n        const uuid = `richedit-${result.uuid}`;\n        const old = Object.values(ui.windows).find((app) => app.options.id === uuid);\n        if (old) return old.render(true, { focus: true });\n\n        const update = await RichResultEdit.open(result);\n    }\n\n    /**\n     * @param {Event} event\n     */\n    _toggleSimpleEditor(event, html) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const simpleEditor = document.createElement(\"textarea\");\n        simpleEditor.name = \"description\";\n        simpleEditor.innerHTML = this.object.description;\n        const editor = html.querySelector(\".description-editor\");\n        editor?.replaceChildren(simpleEditor);\n        this.editors = {}; // Bust rich edit\n    }\n\n    _getSubmitData(updateData) {\n        const data = super._getSubmitData(updateData);\n        // HACK: Zero description caused by ProseMirror\n        if (data.description == \"<p></p>\") data.description = \"\";\n        return data;\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Handle toggling the drawn status of the result in the table\n     * @param {Event} event\n     * @private\n     */\n    async _onEditResult(event) {\n        event.preventDefault();\n        const tableResult = event.currentTarget.closest(\".table-result\");\n        const result = this.document.results.get(tableResult.dataset.resultId);\n        let findDocument = await BRTBetterHelpers.retrieveDocumentFromResult(result, true);\n\n        let isJournal = findDocument instanceof JournalEntry;\n        let docJournalPageUuid = getProperty(\n            result,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_JOURNAL_PAGE_UUID}`,\n        );\n        if (isJournal && docJournalPageUuid) {\n            findDocument = await fromUuid(docJournalPageUuid);\n        }\n\n        if (findDocument) {\n            findDocument.sheet.render(true);\n        } else {\n            Logger.warn(`No document is been found to edit`, true);\n        }\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Handle drawing a result from the RollTable\n     * @param {Event} event\n     * @private\n     */\n    async _onBetterRollTablesRoll(event) {\n        event.preventDefault();\n        await this.submit({ preventClose: true, preventRender: true });\n        if (event.currentTarget) {\n            event.currentTarget.disabled = true;\n        } else {\n            event.target.disabled = true;\n        }\n\n        const brtTypeToCheck = BRTUtils.retrieveBRTType(this.document);\n\n        // Set brt type\n        if (brtTypeToCheck !== CONSTANTS.TABLE_TYPE_STORY) {\n            await this.document.setFlag(\n                CONSTANTS.MODULE_ID,\n                CONSTANTS.FLAGS.TABLE_TYPE_KEY,\n                CONSTANTS.TABLE_TYPE_STORY,\n            );\n        }\n        const tableEntity = this.document;\n        await API.generateChatStory(tableEntity);\n        if (event.currentTarget) {\n            event.currentTarget.disabled = false;\n        } else {\n            event.target.disabled = false;\n        }\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Submit the entire form when a table result type is changed, in case there are other active changes\n     * @param {Event} event\n     * @private\n     */\n    async _onChangeResultJournalPageId(event) {\n        event.preventDefault();\n        const select = event.target;\n        const value = select.value;\n        const resultKey = select.name;\n        const tableResult = event.currentTarget.closest(\".table-result\");\n        const result = this.document.results.get(tableResult.dataset.resultId);\n\n        setProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_JOURNAL_PAGE_UUID}`, value);\n        // Save any pending changes\n        await this._onSubmit(event);\n\n        await result.update({\n            flags: {\n                [`${CONSTANTS.MODULE_ID}`]: {\n                    [`${CONSTANTS.FLAGS.GENERIC_RESULT_JOURNAL_PAGE_UUID}`]: value ?? \"\",\n                },\n            },\n        });\n    }\n\n    /* -------------------------------------------- */\n}\n","import API from \"../../API\";\nimport { CONSTANTS } from \"../../constants/constants\";\nimport { BRTBetterHelpers } from \"../better/brt-helper\";\nimport { RichResultEdit } from \"../../core/brt-result-editor\";\nimport { BetterRollTableBetterConfig } from \"../better/brt-rolltable-config\";\nimport Logger from \"../../lib/Logger\";\nimport { BRTUtils } from \"../../core/utils\";\n\n/**\n * The Application responsible for displaying and editing a single RollTable document.\n * @param {RollTable} table                 The RollTable document being configured\n * @param {DocumentSheetOptions} [options]  Additional application configuration options\n */\nexport class BetterRollTableHarvestConfig extends RollTableConfig {\n    /** @inheritdoc */\n    static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: [\"sheet\", \"roll-table-config\", `${CONSTANTS.MODULE_ID}-roll-table-config`],\n            template: `modules/${CONSTANTS.MODULE_ID}/templates/sheet/brt-roll-table-config.hbs`,\n            width: 1000,\n            height: \"auto\",\n            closeOnSubmit: false,\n            viewPermission: CONST.DOCUMENT_OWNERSHIP_LEVELS.OBSERVER,\n            // scrollY: [\"table.table-results\"],\n            // dragDrop: [{ dragSelector: null, dropSelector: null }],\n            dragDrop: [\n                // { dragSelector: null, dropSelector: null },\n                {\n                    dragSelector: \"section.results .table-results .table-result\",\n                    dropSelector: \"section.results .table-results\",\n                },\n            ],\n            scrollY: [\".table-results\"],\n            resizable: true,\n        });\n    }\n\n    /* -------------------------------------------- */\n\n    //  /** @inheritdoc */\n    //  get title() {\n    //    return `${game.i18n.localize(\"TABLE.SheetTitle\")}: ${this.document.name}`;\n    //  }\n\n    /* -------------------------------------------- */\n\n    /**\n     * @override\n     */\n    async getData(options = {}) {\n        const context = await super.getData(options);\n        context.descriptionHTML = await TextEditor.enrichHTML(this.object.description, {\n            async: true,\n            secrets: this.object.isOwner,\n        });\n        const results = await Promise.all(\n            this.document.results.map(async (result) => {\n                const obj = await BRTBetterHelpers.updateTableResult(result);\n                if (obj?.result) {\n                    return obj.result;\n                }\n            }),\n        );\n        results.sort((a, b) => a.range[0] - b.range[0]);\n\n        // Merge data and return;\n        let brtData = foundry.utils.mergeObject(context, {\n            results: results,\n            resultTypes: Object.entries(CONST.TABLE_RESULT_TYPES).reduce((obj, v) => {\n                obj[v[1]] = v[0].titleCase();\n                return obj;\n            }, {}),\n            documentTypes: CONST.COMPENDIUM_DOCUMENT_TYPES,\n            compendiumPacks: Array.from(game.packs.keys()),\n        });\n\n        const brtTypeToCheck = BRTUtils.retrieveBRTType(this.document);\n\n        // Set brt type\n        if (brtTypeToCheck !== CONSTANTS.TABLE_TYPE_HARVEST) {\n            await this.document.setFlag(\n                CONSTANTS.MODULE_ID,\n                CONSTANTS.FLAGS.TABLE_TYPE_KEY,\n                CONSTANTS.TABLE_TYPE_HARVEST,\n            );\n        }\n        brtData.usePercentage = this.document.getFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.GENERIC_USE_PERCENTAGE);\n        brtData.useDynamicDc = this.document.getFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.HARVEST_USE_DYNAMIC_DC);\n        brtData.tableType = CONSTANTS.TABLE_TYPE_HARVEST;\n        brtData.textType =\n            Logger.i18n(`${CONSTANTS.MODULE_ID}.${\"TypePrefixLabel\"}`) +\n            \" \" +\n            Logger.i18n(`${CONSTANTS.MODULE_ID}.${\"TypeHarvest\"}`) +\n            \"\";\n\n        brtData = foundry.utils.mergeObject(brtData, duplicate(this.document.flags));\n        brtData.disabled = !this.isEditable;\n        brtData.uuid = this.document.uuid;\n        brtData.owner = this.document.isOwner;\n        // TODO\n        // brtData.enrichedDescription = await TextEditor.enrichHTML(context.data.description, { async: true });\n\n        this.canRoll = this.document.ownership[game.user.id]\n            ? this.document.ownership[game.user.id] === CONST.DOCUMENT_PERMISSION_LEVELS.OWNER ||\n              this.document.ownership[game.user.id] === CONST.DOCUMENT_PERMISSION_LEVELS.OBSERVER\n            : this.isEditable;\n\n        return brtData;\n    }\n\n    /* -------------------------------------------- */\n    /*  Event Listeners and Handlers                */\n    /* -------------------------------------------- */\n\n    /**\n     * @param {JQuery} jq\n     */\n    activateListeners(jq) {\n        super.activateListeners(jq);\n\n        const html = jq[0];\n\n        if (this.canRoll) {\n            // html.querySelector(\".better-rolltables-roll-harvest\").addEventListener(\n            //     \"click\",\n            //     this._onBetterRollTablesRoll.bind(this),\n            // );\n            html.querySelectorAll(\".better-rolltables-roll-harvest\").forEach((el) => {\n                el.disabled = false;\n                el.addEventListener(\"click\", this._onBetterRollTablesRoll.bind(this));\n            });\n        }\n\n        // The below options require an editable sheet\n        if (!this.isEditable) {\n            return;\n        }\n\n        // Save the sheet on refresh of the table\n        // html\n        //   .querySelector(\"button.refresh\")\n        //   .addEventListener(\"click\", this._onRefreshTable.bind(this));\n\n        // Re-normalize Table Entries\n        html.querySelector(\".normalize-weights\").addEventListener(\"click\", this._onNormalizeWeights.bind(this));\n\n        // Edit a Image\n        // html.find(\"img[data-edit]\").on(\"click\", this._onEditImage.bind(this));\n        // html.querySelectorAll(\"img[data-edit]\").forEach((el) =>\n        //     el.addEventListener(\"click\", this._onEditImage.bind(this)),\n        // );\n\n        // Edit a Result\n        html.querySelectorAll(\"a.edit-result\").forEach((el) =>\n            el.addEventListener(\"click\", this._onEditResult.bind(this)),\n        );\n        html.querySelectorAll(\"a.rich-edit-result\").forEach((el) =>\n            el.addEventListener(\"click\", this._openRichEditor.bind(this)),\n        );\n\n        // Modify Page Id\n        let selectPages = html.querySelector(\".result-details .result-details-journal-page-id\");\n        selectPages?.addEventListener(\"change\", this._onChangeResultJournalPageId.bind(this));\n\n        // TODO\n        // html.querySelector(\".toggle-editor\").addEventListener(\"click\", (ev) => this._toggleSimpleEditor(ev, html));\n\n        // TIPO SPECIFICO\n        html.querySelectorAll(\"#BRT-gen-harvest\").forEach((el) =>\n            el.addEventListener(\"click\", this._onBetterRollTablesGenerateHarvest.bind(this)),\n        );\n        html.querySelectorAll(\"#BRT-gen-harvest-token\").forEach((el) =>\n            el.addEventListener(\"click\", this._onBetterRollTablesGenerateHarvestToken.bind(this)),\n        );\n    }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Handle creating a TableResult in the RollTable document\n    //    * @param {MouseEvent} event        The originating mouse event\n    //    * @param {object} [resultData]     An optional object of result data to use\n    //    * @returns {Promise}\n    //    * @private\n    //    */\n    //   async _onCreateResult(event, resultData={}) {\n    //     event.preventDefault();\n\n    //     // Save any pending changes\n    //     await this._onSubmit(event);\n\n    //     // Get existing results\n    //     const results = Array.from(this.document.results.values());\n    //     let last = results[results.length - 1];\n\n    //     // Get weight and range data\n    //     let weight = last ? (last.weight || 1) : 1;\n    //     let totalWeight = results.reduce((t, r) => t + r.weight, 0) || 1;\n    //     let minRoll = results.length ? Math.min(...results.map(r => r.range[0])) : 0;\n    //     let maxRoll = results.length ? Math.max(...results.map(r => r.range[1])) : 0;\n\n    //     // Determine new starting range\n    //     const spread = maxRoll - minRoll + 1;\n    //     const perW = Math.round(spread / totalWeight);\n    //     const range = [maxRoll + 1, maxRoll + Math.max(1, weight * perW)];\n\n    //     // Create the new Result\n    //     resultData = foundry.utils.mergeObject({\n    //       type: last ? last.type : CONST.TABLE_RESULT_TYPES.TEXT,\n    //       documentCollection: last ? last.documentCollection : null,\n    //       weight: weight,\n    //       range: range,\n    //       drawn: false\n    //     }, resultData);\n    //     return this.document.createEmbeddedDocuments(\"TableResult\", [resultData]);\n    //   }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Submit the entire form when a table result type is changed, in case there are other active changes\n    //    * @param {Event} event\n    //    * @private\n    //    */\n    //   _onChangeResultType(event) {\n    //     event.preventDefault();\n    //     const rt = CONST.TABLE_RESULT_TYPES;\n    //     const select = event.target;\n    //     const value = parseInt(select.value);\n    //     const resultKey = select.name.replace(\".type\", \"\");\n    //     let documentCollection = \"\";\n    //     if ( value === rt.DOCUMENT ) documentCollection = \"Actor\";\n    //     else if ( value === rt.COMPENDIUM ) documentCollection = game.packs.keys().next().value;\n    //     const updateData = {[resultKey]: {documentCollection, documentId: null}};\n    //     return this._onSubmit(event, {updateData});\n    //   }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Handle deleting a TableResult from the RollTable document\n     * @param {MouseEvent} event        The originating click event\n     * @returns {Promise<TableResult>}   The deleted TableResult document\n     * @private\n     */\n    async _onDeleteResult(event) {\n        event.preventDefault();\n        await this._onSubmit(event);\n        const li = event.currentTarget.closest(\".table-result\");\n        const result = this.object.results.get(li.dataset.resultId);\n        return result.delete();\n    }\n\n    /* -------------------------------------------- */\n\n    /** @inheritdoc */\n    async _onDrop(event) {\n        const json = TextEditor.getDragEventData(event);\n        if (json.event === \"sort\") {\n            const eel = event.target;\n            const el = eel.dataset.resultId ? eel : eel.closest(\".table-result[data-result-id]\");\n            if (!el) {\n                Logger.warn(\"Drop target not found.\", true);\n                return;\n            }\n            return this.reorderIndex(event, json.result, el.dataset.resultId);\n        } else {\n            if (json.type === \"JournalEntryPage\") {\n                const journalPage = await fromUuid(json.uuid);\n\n                const data = await fromUuid(journalPage.parent.uuid);\n                data.type = data.documentName;\n                const allowed = Hooks.call(\"dropRollTableSheetData\", this.document, this, data);\n                if (allowed === false) return;\n\n                // Get the dropped document\n                if (!CONST.DOCUMENT_TYPES.includes(data.type)) return;\n                //const cls = getDocumentClass(data.type);\n                //const document = await cls.fromDropData(data);\n                const document = data;\n                if (!document || document.isEmbedded) return;\n\n                // Delegate to the onCreate handler\n                const isCompendium = !!document.compendium;\n                return await this._onCreateResult(event, {\n                    type: isCompendium ? CONST.TABLE_RESULT_TYPES.COMPENDIUM : CONST.TABLE_RESULT_TYPES.DOCUMENT,\n                    documentCollection: isCompendium ? document.pack : document.documentName,\n                    text: document.name,\n                    documentId: document.id,\n                    img: document.img || null,\n                    flags: {\n                        [`${CONSTANTS.MODULE_ID}`]: {\n                            [`${CONSTANTS.FLAGS.GENERIC_RESULT_JOURNAL_PAGE_UUID}`]: json.uuid,\n                        },\n                    },\n                });\n            } else {\n                return super._onDrop(event);\n            }\n        }\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Handle changing the actor profile image by opening a FilePicker\n     * @param {Event} event\n     * @private\n     */\n    _onEditImage(event) {\n        const img = event.currentTarget;\n        const isHeader = img.dataset.edit === \"img\";\n        let current = this.document.img;\n        if (!isHeader) {\n            const li = img.closest(\".table-result\");\n            const result = this.document.results.get(li.dataset.resultId);\n            // MOD 4535992 removed we want to customize the image\n            // if (result.type !== CONST.TABLE_RESULT_TYPES.TEXT) return;\n            current = result.img;\n        }\n        const fp = new FilePicker({\n            type: \"image\",\n            current: current,\n            callback: async (path) => {\n                // MOD 4535992 make async\n                img.src = path;\n                // START MOD 4535992 added we want to customize the image\n                const resultImage = img.closest(\".result-image\");\n                let resultImageInputs = resultImage.querySelectorAll(\"input\");\n                let inputCustomIcon = resultImageInputs[0].value || \"\";\n                if (inputCustomIcon !== path) {\n                    resultImageInputs[0].value = path;\n                }\n                // const resultDocUuid = getProperty(\n                //     result,\n                //     `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_UUID}`,\n                // );\n                // const resultDoc = await fromUuid(resultDocUuid);\n                // await result.setFlag(CONSTANTS.MODULE_ID, CONSTANTS.FLAGS.GENERIC_RESULT_CUSTOM_ICON, path);\n                // END MOD 4535992 added we want to customize the image\n                return this._onSubmit(event);\n            },\n            top: this.position.top + 40,\n            left: this.position.left + 10,\n        });\n        return fp.browse();\n    }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Handle a button click to re-normalize dice result ranges across all RollTable results\n    //    * @param {Event} event\n    //    * @private\n    //    */\n    //   async _onNormalizeResults(event) {\n    //     event.preventDefault();\n    //     if ( !this.rendered || this._submitting) return false;\n\n    //     // Save any pending changes\n    //     await this._onSubmit(event);\n\n    //     // Normalize the RollTable\n    //     return this.document.normalize();\n    //   }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Handle toggling the drawn status of the result in the table\n    //    * @param {Event} event\n    //    * @private\n    //    */\n    //   _onLockResult(event) {\n    //     event.preventDefault();\n    //     const tableResult = event.currentTarget.closest(\".table-result\");\n    //     const result = this.document.results.get(tableResult.dataset.resultId);\n    //     return result.update({drawn: !result.drawn});\n    //   }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Reset the Table to it's original composition with all options unlocked\n    //    * @param {Event} event\n    //    * @private\n    //    */\n    //   _onResetTable(event) {\n    //     event.preventDefault();\n    //     return this.document.resetResults();\n    //   }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Handle drawing a result from the RollTable\n     * @param {Event} event\n     * @private\n     */\n    async _onRollTable(event) {\n        // event.preventDefault();\n        // await this.submit({preventClose: true, preventRender: true});\n        // event.currentTarget.disabled = true;\n        // let tableRoll = await this.document.roll();\n        // const draws = this.document.getResultsForRoll(tableRoll.roll.total);\n        // if ( draws.length ) {\n        //   if (game.settings.get(\"core\", \"animateRollTable\")) await this._animateRoll(draws);\n        //   await this.document.draw(tableRoll);\n        // }\n        // event.currentTarget.disabled = false;\n        return await super._onRollTable(event);\n    }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Configure the update object workflow for the Roll Table configuration sheet\n    //    * Additional logic is needed here to reconstruct the results array from the editable fields on the sheet\n    //    * @param {Event} event            The form submission event\n    //    * @param {Object} formData        The validated FormData translated into an Object for submission\n    //    * @returns {Promise}\n    //    * @private\n    //    */\n    //   async _updateObject(event, formData) {\n    //     // Expand the data to update the results array\n    //     const expanded = foundry.utils.expandObject(formData);\n    //     expanded.results = expanded.hasOwnProperty(\"results\") ? Object.values(expanded.results) : [];\n    //     for (let r of expanded.results) {\n    //       r.range = [r.rangeL, r.rangeH];\n    //       switch (r.type) {\n\n    //         // Document results\n    //         case CONST.TABLE_RESULT_TYPES.DOCUMENT:\n    //           const collection = game.collections.get(r.documentCollection);\n    //           if (!collection) continue;\n\n    //           // Get the original document, if the name still matches - take no action\n    //           const original = r.documentId ? collection.get(r.documentId) : null;\n    //           if (original && (original.name === r.text)) continue;\n\n    //           // Otherwise, find the document by ID or name (ID preferred)\n    //           const doc = collection.find(e => (e.id === r.text) || (e.name === r.text)) || null;\n    //           r.documentId = doc?.id ?? null;\n    //           r.text = doc?.name ?? null;\n    //           r.img = doc?.img ?? null;\n    //           r.img = doc?.thumb || doc?.img || null;\n    //           break;\n\n    //         // Compendium results\n    //         case CONST.TABLE_RESULT_TYPES.COMPENDIUM:\n    //           const pack = await getCompendiumCollectionAsync(r.documentCollection, true, false);\n    //           if (pack) {\n\n    //             // Get the original entry, if the name still matches - take no action\n    //             const original = pack.index.get(r.documentId) || null;\n    //             if (original && (original.name === r.text)) continue;\n\n    //             // Otherwise, find the document by ID or name (ID preferred)\n    //             const doc = pack.index.find(i => (i._id === r.text) || (i.name === r.text)) || null;\n    //             r.documentId = doc?._id || null;\n    //             r.text = doc?.name || null;\n    //             r.img = doc?.thumb || doc?.img || null;\n    //           }\n    //           break;\n\n    //         // Plain text results\n    //         default:\n    //           r.type = 0;\n    //           r.documentCollection = null;\n    //           r.documentId = null;\n    //       }\n    //     }\n\n    //     // Update the object\n    //     return this.document.update(expanded, {diff: false, recursive: false});\n    //   }\n\n    /* -------------------------------------------- */\n\n    /**\n     * MOD Modified copy of core _animateRoll to ensure it does not constantly break with the changed layout.\n     * Display a roulette style animation when a Roll Table result is drawn from the sheet\n     * @param {TableResult[]} results     An Array of drawn table results to highlight\n     * @returns {Promise}                  A Promise which resolves once the animation is complete\n     * @protected\n     */\n    async _animateRoll(results) {\n        // Get the list of results and their indices\n        const tableResults = this.element[0].querySelector(\".table-results > tbody\"); // MOD \".table-results\" instead \".table-results > tbody\"\n        const drawnIds = new Set(results.map((r) => r.id));\n        const drawnItems = Array.from(tableResults.children).filter((item) => drawnIds.has(item.dataset.resultId));\n\n        // Set the animation timing\n        const nResults = this.object.results.size;\n        const maxTime = 2000;\n        let animTime = 50;\n        let animOffset = Math.round(tableResults.offsetHeight / (tableResults.children[1].offsetHeight * 2)); // MOD [1] instead [0]\n        const nLoops = Math.min(Math.ceil(maxTime / (animTime * nResults)), 4);\n        if (nLoops === 1) animTime = maxTime / nResults;\n\n        // Animate the roulette\n        await this._animateRoulette(tableResults, drawnIds, nLoops, animTime, animOffset);\n\n        // Flash the results\n        const flashes = drawnItems.map((li) => this._flashResult(li));\n        return Promise.all(flashes);\n    }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Animate a \"roulette\" through the table until arriving at the final loop and a drawn result\n    //    * @param {HTMLOListElement} ol     The list element being iterated\n    //    * @param {Set<string>} drawnIds    The result IDs which have already been drawn\n    //    * @param {number} nLoops           The number of times to loop through the animation\n    //    * @param {number} animTime         The desired animation time in milliseconds\n    //    * @param {number} animOffset       The desired pixel offset of the result within the list\n    //    * @returns {Promise}               A Promise that resolves once the animation is complete\n    //    * @protected\n    //    */\n    //   async _animateRoulette(ol, drawnIds, nLoops, animTime, animOffset) {\n    //     let loop = 0;\n    //     let idx = 0;\n    //     let item = null;\n    //     return new Promise(resolve => {\n    //       let animId = setInterval(() => {\n    //         if (idx === 0) loop++;\n    //         if (item) item.classList.remove(\"roulette\");\n\n    //         // Scroll to the next item\n    //         item = ol.children[idx];\n    //         ol.scrollTop = (idx - animOffset) * item.offsetHeight;\n\n    //         // If we are on the final loop\n    //         if ( (loop === nLoops) && drawnIds.has(item.dataset.resultId) ) {\n    //           clearInterval(animId);\n    //           return resolve();\n    //         }\n\n    //         // Continue the roulette and cycle the index\n    //         item.classList.add(\"roulette\");\n    //         idx = idx < ol.children.length - 1 ? idx + 1 : 0;\n    //       }, animTime);\n    //     });\n    //   }\n\n    /* -------------------------------------------- */\n\n    //   /**\n    //    * Display a flashing animation on the selected result to emphasize the draw\n    //    * @param {HTMLElement} item      The HTML &lt;li> item of the winning result\n    //    * @returns {Promise}              A Promise that resolves once the animation is complete\n    //    * @protected\n    //    */\n    //   async _flashResult(item) {\n    //     return new Promise(resolve => {\n    //       let count = 0;\n    //       let animId = setInterval(() => {\n    //         if (count % 2) item.classList.remove(\"roulette\");\n    //         else item.classList.add(\"roulette\");\n    //         if (count === 7) {\n    //           clearInterval(animId);\n    //           resolve();\n    //         }\n    //         count++;\n    //       }, 50);\n    //     });\n    //   }\n\n    /* ============================================== */\n\n    /**\n     * @param {DragEvent} event\n     */\n    _onDragStart(event) {\n        const eel = event.target;\n        const el = eel.dataset.resultId ? eel : eel.closest(\".table-result[data-result-id]\");\n        event.dataTransfer?.setData(\n            \"text/plain\",\n            JSON.stringify({ event: \"sort\", index: el.dataset.index, result: el.dataset.resultId }),\n        );\n    }\n\n    /**\n     * @param {String} source Source ID\n     * @param {String} target Target ID\n     */\n    async reorderIndex(event, source, target) {\n        if (!this.rendered || this._submitting) return false;\n        // Save any pending changes\n        await this._onSubmit(event);\n\n        // Normalize weights just in case\n        /** @type {Object[]} */\n        const results = this.document.results.map((result) => result.toObject(false));\n        results.sort((a, b) => a.range[0] - b.range[0]);\n\n        const sourceIx = results.findIndex((r) => r._id === source),\n            targetIx = results.findIndex((r) => r._id === target);\n\n        if (sourceIx == targetIx) {\n            Logger.warn(\"Can't move result onto itself.\", true);\n            return;\n        }\n\n        // Move result\n        const [moved] = results.splice(sourceIx, 1);\n        results.splice(targetIx, 0, moved);\n\n        // Update weight\n        results.forEach((r) => (r.weight = r.range[1] - (r.range[0] - 1)));\n        let totalWeight = 1;\n        const updates = [];\n        for (const result of results) {\n            const w = result.weight;\n            updates.push({ _id: result._id, weight: w, range: [totalWeight, totalWeight + w - 1] });\n            totalWeight = totalWeight + w;\n        }\n        return this.document.updateEmbeddedDocuments(\"TableResult\", updates);\n    }\n\n    /**\n     * Sets weights based on ranges\n     * @param {Event} event\n     */\n    async _onNormalizeWeights(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (!this.rendered || this._submitting) return false;\n\n        // Save any pending changes\n        await this._onSubmit(event);\n\n        const results = this.document.results.map((result) => result.toObject(false));\n\n        const updates = results.map((r) => ({ _id: r._id, weight: r.range[1] - (r.range[0] - 1) }));\n\n        return this.document.updateEmbeddedDocuments(\"TableResult\", updates);\n    }\n\n    /**\n     * @param {Event} event\n     */\n    async _openRichEditor(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Save any pending changes\n        await this._onSubmit(event);\n\n        const parent = event.target.closest(\".table-result[data-result-id]\");\n        const id = parent.dataset.resultId;\n        const result = this.document.results.get(id);\n\n        const uuid = `richedit-${result.uuid}`;\n        const old = Object.values(ui.windows).find((app) => app.options.id === uuid);\n        if (old) return old.render(true, { focus: true });\n\n        const update = await RichResultEdit.open(result);\n    }\n\n    /**\n     * @param {Event} event\n     */\n    _toggleSimpleEditor(event, html) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const simpleEditor = document.createElement(\"textarea\");\n        simpleEditor.name = \"description\";\n        simpleEditor.innerHTML = this.object.description;\n        const editor = html.querySelector(\".description-editor\");\n        editor?.replaceChildren(simpleEditor);\n        this.editors = {}; // Bust rich edit\n    }\n\n    _getSubmitData(updateData) {\n        const data = super._getSubmitData(updateData);\n        // HACK: Zero description caused by ProseMirror\n        if (data.description == \"<p></p>\") data.description = \"\";\n        return data;\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Handle toggling the drawn status of the result in the table\n     * @param {Event} event\n     * @private\n     */\n    async _onEditResult(event) {\n        event.preventDefault();\n        const tableResult = event.currentTarget.closest(\".table-result\");\n        const result = this.document.results.get(tableResult.dataset.resultId);\n        let findDocument = await BRTBetterHelpers.retrieveDocumentFromResult(result, true);\n\n        let isJournal = findDocument instanceof JournalEntry;\n        let docJournalPageUuid = getProperty(\n            result,\n            `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_JOURNAL_PAGE_UUID}`,\n        );\n        if (isJournal && docJournalPageUuid) {\n            findDocument = await fromUuid(docJournalPageUuid);\n        }\n\n        if (findDocument) {\n            findDocument.sheet.render(true);\n        } else {\n            Logger.warn(`No document is been found to edit`, true);\n        }\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Handle drawing a result from the RollTable\n     * @param {Event} event\n     * @private\n     */\n    async _onBetterRollTablesRoll(event) {\n        event.preventDefault();\n        await this.submit({ preventClose: true, preventRender: true });\n        if (event.currentTarget) {\n            event.currentTarget.disabled = true;\n        } else {\n            event.target.disabled = true;\n        }\n\n        const brtTypeToCheck = BRTUtils.retrieveBRTType(this.document);\n\n        // Set brt type\n        if (brtTypeToCheck !== CONSTANTS.TABLE_TYPE_HARVEST) {\n            await this.document.setFlag(\n                CONSTANTS.MODULE_ID,\n                CONSTANTS.FLAGS.TABLE_TYPE_KEY,\n                CONSTANTS.TABLE_TYPE_HARVEST,\n            );\n        }\n        const tableEntity = this.document;\n        await API.generateChatHarvest(tableEntity);\n        if (event.currentTarget) {\n            event.currentTarget.disabled = false;\n        } else {\n            event.target.disabled = false;\n        }\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Handle drawing a result from the RollTable\n     * @param {Event} event\n     * @private\n     */\n    async _onBetterRollTablesGenerateHarvest(event) {\n        event.preventDefault();\n        await this.submit({ preventClose: true, preventRender: true });\n        if (event.currentTarget) {\n            event.currentTarget.disabled = true;\n        } else {\n            event.target.disabled = true;\n        }\n\n        const brtTypeToCheck = BRTUtils.retrieveBRTType(this.document);\n        // Set brt type\n        if (brtTypeToCheck !== CONSTANTS.TABLE_TYPE_HARVEST) {\n            await this.document.setFlag(\n                CONSTANTS.MODULE_ID,\n                CONSTANTS.FLAGS.TABLE_TYPE_KEY,\n                CONSTANTS.TABLE_TYPE_HARVEST,\n            );\n        }\n        const tableEntity = this.document;\n        await API.generateHarvest(tableEntity);\n        if (event.currentTarget) {\n            event.currentTarget.disabled = false;\n        } else {\n            event.target.disabled = false;\n        }\n    }\n\n    /**\n     * Handle drawing a result from the RollTable\n     * @param {Event} event\n     * @private\n     */\n    async _onBetterRollTablesGenerateHarvestToken(event) {\n        event.preventDefault();\n        await this.submit({ preventClose: true, preventRender: true });\n        if (event.currentTarget) {\n            event.currentTarget.disabled = true;\n        } else {\n            event.target.disabled = true;\n        }\n\n        const brtTypeToCheck = BRTUtils.retrieveBRTType(this.document);\n\n        // Set brt type\n        if (brtTypeToCheck !== CONSTANTS.TABLE_TYPE_HARVEST) {\n            await this.document.setFlag(\n                CONSTANTS.MODULE_ID,\n                CONSTANTS.FLAGS.TABLE_TYPE_KEY,\n                CONSTANTS.TABLE_TYPE_HARVEST,\n            );\n        }\n        const tableEntity = this.document;\n        await API.generateHarvestOnSelectedToken(tableEntity);\n        if (event.currentTarget) {\n            event.currentTarget.disabled = false;\n        } else {\n            event.target.disabled = false;\n        }\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Submit the entire form when a table result type is changed, in case there are other active changes\n     * @param {Event} event\n     * @private\n     */\n    async _onChangeResultJournalPageId(event) {\n        event.preventDefault();\n        const select = event.target;\n        const value = select.value;\n        const resultKey = select.name;\n        const tableResult = event.currentTarget.closest(\".table-result\");\n        const result = this.document.results.get(tableResult.dataset.resultId);\n\n        setProperty(result, `flags.${CONSTANTS.MODULE_ID}.${CONSTANTS.FLAGS.GENERIC_RESULT_JOURNAL_PAGE_UUID}`, value);\n        // Save any pending changes\n        await this._onSubmit(event);\n\n        await result.update({\n            flags: {\n                [`${CONSTANTS.MODULE_ID}`]: {\n                    [`${CONSTANTS.FLAGS.GENERIC_RESULT_JOURNAL_PAGE_UUID}`]: value ?? \"\",\n                },\n            },\n        });\n    }\n\n    /* -------------------------------------------- */\n}\n","import API from \"../API.js\";\nimport { CONSTANTS } from \"../constants/constants.js\";\nimport { BetterTables } from \"../better-tables.js\";\nimport { BRTUtils } from \"../core/utils.js\";\nimport { registerSettings } from \"../settings.js\";\nimport { BetterRollTableBetterConfig } from \"../tables/better/brt-rolltable-config.js\";\nimport SETTINGS from \"../constants/settings.js\";\nimport { BetterRollTableLootConfig } from \"../tables/loot/loot-rolltable-config.js\";\nimport { BetterRollTableStoryConfig } from \"../tables/story/story-rolltable-config.js\";\nimport { BetterRollTableHarvestConfig } from \"../tables/harvest/harvest-rolltable-config.js\";\nimport { isEmptyObject } from \"../lib/lib.js\";\nimport CompendiumsHelpers from \"../lib/compendiums-helpers.js\";\nimport BRTActorList from \"../apps/actor-list/brt-actor-list.js\";\n\n/**\n * @module BetterRollTables.BetterRolltableHooks\n * @typicalname BetterRolltableHooks\n *\n * @version 1.0.0\n *\n */\nclass BetterRolltableHooks {\n    // /**\n    //  * Hooks on game hooks and attaches methods\n    //  */\n    // static init() {\n    //   Hooks.once(\"init\", BetterRolltableHooks.foundryInit);\n    //   Hooks.once(\"ready\", BetterRolltableHooks.foundryReady);\n    //   Hooks.once(\"aipSetup\", BetterRolltableHooks.onAIPSetup);\n    //   Hooks.once(\"devModeReady\", BetterRolltableHooks.onDevModeReady);\n    //   Hooks.once(\"setup\", BetterRolltableHooks.foundrySetup);\n    // }\n\n    static foundrySetup() {\n        game.modules.get(CONSTANTS.MODULE_ID).api = API;\n\n        // For retrocompatibility only...\n        // game.betterTables\n        game.betterTables = game.modules.get(CONSTANTS.MODULE_ID).api.betterTables;\n\n        // game.modules.get(CONSTANTS.MODULE_ID).public.API;\n        game.modules.get(CONSTANTS.MODULE_ID).public = {\n            API: game.modules.get(CONSTANTS.MODULE_ID).api,\n        };\n\n        // Freeze the public API so it can't be modified.\n        Object.freeze(game.modules.get(CONSTANTS.MODULE_ID).public);\n    }\n\n    static async foundryReady() {\n        // const moduleSettings = new Settings();\n        // moduleSettings.registerSettings();\n\n        // if (game.settings.get(CONSTANTS.MODULE_ID, SETTINGS.ENABLE_OLD_BEHAVIOR)) {\n        //   Hooks.on(\"renderRollTableConfig\", BetterRT.enhanceRollTableView);\n        // }\n        Hooks.on(\"renderRollTableConfig\", BetterTables.checkRenderDefaultRollTableConfig);\n        Hooks.on(\"renderChatMessage\", BetterTables.handleChatMessageButtons);\n\n        // TODO OTHER MODULES DO THIS\n        // Hooks.on(\"renderJournalPageSheet\", BetterTables.handleRolltableLink);\n        // Hooks.on(\"renderItemSheet\", BetterTables.handleRolltableLink);\n        // Hooks.on(\"dropRollTableSheetData\", BetterTables.handleDropRollTableSheetData);\n\n        // Handlebars.registerHelper(\"brt-ifequals\", function (arg1, arg2, options) {\n        //   return arg1 == arg2 ? options.fn(this) : options.inverse(this);\n        // });\n\n        // https://stackoverflow.com/questions/47681668/handlebars-if-else-if-else-with-string-equality-function\n        // Handlebars.registerHelper(\"brt-eq\", function () {\n        //   const args = Array.prototype.slice.call(arguments, 0, -1);\n        //   return args.every(function (expression) {\n        //       return args[0] === expression;\n        //   });\n        // });\n\n        /** Register Handlebar helpers **/\n        /** checks if the first argument is equal to any of the subsequent arguments */\n        Handlebars.registerHelper(\"ifcontain\", function () {\n            const options = arguments[arguments.length - 1];\n            for (let i = 1; i < arguments.length - 1; i++) {\n                if (arguments[0] === arguments[i]) {\n                    return options.fn(this);\n                }\n            }\n            return options.inverse(this);\n        });\n\n        // Handlebars.registerHelper(\"brt-ifEquals\", function (arg1, arg2, options) {\n        //   return arg1 == arg2 ? options.fn(this) : options.inverse(this);\n        // });\n\n        /** checks if the first argument is greater than the second argument */\n        Handlebars.registerHelper(\"ifgt\", function (a, b, options) {\n            return a > b ? options.fn(this) : options.inverse(this);\n        });\n\n        // Handlebars.registerHelper(\"brt-ifeq\", function (a, b, options) {\n        //   return a == b ? options.fn(this) : options.inverse(this);\n        // });\n\n        // Handlebars.registerHelper(\"brt-uneq\", function (a, b, options) {\n        //   return a != b ? options.fn(this) : options.inverse(this);\n        // });\n\n        /** return fas icon based on document name */\n        Handlebars.registerHelper(\"entity-icon\", function (documentName) {\n            return BRTUtils.getIconByEntityType(documentName);\n        });\n\n        Handlebars.registerHelper(\"format-currencies\", function (currenciesData) {\n            let currencyString = \"\";\n            for (const key in currenciesData) {\n                if (currencyString !== \"\") currencyString += \", \";\n                currencyString += `${currenciesData[key]}${key}`;\n            }\n            return currencyString;\n        });\n\n        Handlebars.registerHelper(\"switch\", function (value, options) {\n            this.switch_value = value;\n            return options.fn(this);\n        });\n\n        Handlebars.registerHelper(\"brt-isEmpty\", function (value, options) {\n            // return value === undefined ||\n            //   value === null ||\n            //   (value instanceof Object && Object.keys(value).length === 0) ||\n            //   (value instanceof Array && value.length === 0)\n            //   ? options.fn(this)\n            //   : options.inverse(this);\n            return isEmptyObject(value) || value === \"\" ? options.fn(this) : options.inverse(this);\n        });\n\n        Handlebars.registerHelper(\"brt-unlessEmpty\", function (value, options) {\n            // return value !== undefined &&\n            //   value !== null &&\n            //   ((value instanceof Object && Object.keys(value).length > 0) || (value instanceof Array && value.length > 0))\n            //   ? options.fn(this)\n            //   : options.inverse(this);\n            return !isEmptyObject(value) && value !== \"\" ? options.fn(this) : options.inverse(this);\n        });\n\n        Handlebars.registerHelper(\"case\", function (value, options) {\n            if (value == this.switch_value) {\n                return options.fn(this);\n            }\n        });\n\n        // await API.updateSpellCache();\n        CompendiumsHelpers.initializeCompendiumCache();\n    }\n\n    static foundryInit() {\n        registerSettings();\n\n        Hooks.on(\"getCompendiumDirectoryEntryContext\", BetterTables.enhanceCompendiumContextMenu);\n        Hooks.on(\"getRollTableDirectoryEntryContext\", BetterTables.enhanceRolltableContextMenu);\n        Hooks.once(\"aipSetup\", BetterRolltableHooks.onAIPSetup);\n\n        Hooks.on(\"getActorSheetHeaderButtons\", (app, array, options) => {\n            BRTActorList.initializeActorList(app, array);\n        });\n\n        // WE DON'T NEED THIS WITH BRT WE ALREADY OVERRRIDE THE ROLL MODE\n        // libWrapper.register(CONSTANTS.MODULE_ID, \"RollTable.prototype.draw\", BetterTables.rolltableDrawHandler, \"MIXED\");\n\n        RollTables.registerSheet(CONSTANTS.MODULE_ID, BetterRollTableBetterConfig, {\n            label: \"BRT - Better Rolltable\",\n            makeDefault: false,\n        });\n        RollTables.registerSheet(CONSTANTS.MODULE_ID, BetterRollTableLootConfig, {\n            label: \"BRT - Loot Rolltable\",\n            makeDefault: false,\n        });\n        RollTables.registerSheet(CONSTANTS.MODULE_ID, BetterRollTableStoryConfig, {\n            label: \"BRT - Story Rolltable\",\n            makeDefault: false,\n        });\n        RollTables.registerSheet(CONSTANTS.MODULE_ID, BetterRollTableHarvestConfig, {\n            label: \"BRT - Harvest Rolltable\",\n            makeDefault: false,\n        });\n    }\n\n    /**\n     * Register with AIP\n     *\n     * Register fields with autocomplete inline properties\n     */\n    static async onAIPSetup() {\n        const autocompleteInlinePropertiesApi = game.modules.get(\"autocomplete-inline-properties\").API;\n        const DATA_MODE = autocompleteInlinePropertiesApi.CONST.DATA_MODE;\n\n        // AIP\n        // Define the config for our package\n        const config = {\n            packageName: CONSTANTS.MODULE_ID,\n            sheetClasses: [\n                {\n                    name: \"RolltableConfig\", // this _must_ be the class name of the `Application` you want it to apply to\n                    fieldConfigs: [\n                        {\n                            selector: `.tags .tagger input`,\n                            showButton: true,\n                            allowHotkey: true,\n                            dataMode: DATA_MODE.OWNING_ACTOR_DATA,\n                        },\n                    ],\n                },\n            ],\n        };\n\n        // Add our config\n        autocompleteInlinePropertiesApi.PACKAGE_CONFIG.push(config);\n    }\n\n    //   static onDevModeReady({ registerPackageDebugFlag }) {\n    //     registerPackageDebugFlag(CONSTANTS.MODULE_ID);\n    //   }\n}\n\nexport { BetterRolltableHooks };\n","import { CONSTANTS } from \"./scripts/constants/constants.js\";\nimport { BetterRolltableHooks } from \"./scripts/hooks/init.js\";\nimport Logger from \"./scripts/lib/Logger.js\";\nimport { registerSocket } from \"./scripts/socket.js\";\n\n//   BetterRolltableHooks.init();\n\n/* ------------------------------------ */\n/* Initialize module */\n/* ------------------------------------ */\nHooks.once(\"init\", async () => {\n    // Logger.log(`${CONSTANTS.MODULE_ID} | Initializing ${CONSTANTS.MODULE_ID}`);\n\n    // Register custom module settings\n    //   registerSettings();\n    //   initHooks();\n\n    BetterRolltableHooks.foundryInit();\n\n    // Preload Handlebars templates\n    // await preloadTemplates();\n});\n\n/* ------------------------------------ */\n/* Setup module */\n/* ------------------------------------ */\nHooks.once(\"setup\", () => {\n    // Do anything after initialization but before ready\n    //   setupHooks();\n    BetterRolltableHooks.foundrySetup();\n});\n\n/* ------------------------------------ */\n/* When ready */\n/* ------------------------------------ */\nHooks.once(\"ready\", async () => {\n    setTimeout(() => {\n        if (game.user.isGM) {\n            // Do anything once the module is ready\n            // if (!game.modules.get('lib-wrapper')?.active && game.user?.isGM) {\n            //   let word = 'install and activate';\n            //   if (game.modules.get('lib-wrapper')) word = 'activate';\n            //   throw Logger.error(`Requires the 'libWrapper' module. Please ${word} it.`);\n            // }\n            if (!game.modules.get(\"socketlib\")?.active && game.user?.isGM) {\n                let word = \"install and activate\";\n                if (game.modules.get(\"socketlib\")) word = \"activate\";\n                throw Logger.error(`Requires the 'socketlib' module. Please ${word} it.`);\n            }\n            if (!game.modules.get(\"item-piles\")?.active && game.user?.isGM) {\n                let word = \"install and activate\";\n                if (game.modules.get(\"item-piles\")) word = \"activate\";\n                throw Logger.error(`Requires the 'item-piles' module. Please ${word} it.`);\n            }\n        }\n        //   ReadyHooks();\n        BetterRolltableHooks.foundryReady();\n    }, 100);\n});\n\n/* ------------------------------------ */\n/* Other Hooks */\n/* ------------------------------------ */\n\nHooks.once(\"devModeReady\", ({ registerPackageDebugFlag }) => {\n    registerPackageDebugFlag(CONSTANTS.MODULE_ID);\n});\n\nHooks.once(\"socketlib.ready\", () => {\n    registerSocket();\n});\n"],"names":["pack","document","options","results","documents","currency","item","acc","roll","brtTable","betterRolltablesSocket","API","token","br","skill","BRTHarvestHelpers","currencyString","dataTmp"],"mappings":";;;;;;;AAAA;AAEA,MAAM,WAAW;AAAA;AAAA;AAAA,EAKb,sBAAsB;AAAA;AAAA,EAEtB,qBAAqB;AAAA,EACrB,mBAAmB;AAAA;AAAA,EAEnB,oCAAoC;AAAA,EACpC,mCAAmC;AAAA,EACnC,4BAA4B;AAAA,EAC5B,wBAAwB;AAAA,EACxB,yBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUzB,MAAM;AAAA,IACF,KAAK;AAAA,IACL,UAAU;AAAA,EACbtIO,MAAM,YAAY;AAAA,EACrB,WAAW;AAAA,EACX,MAAM;AAAA,EACN,OAAO,CAAC,QAAQ,UAAU,QAAQ,WAAW,OAAO;AAAA,EACpD,sBAAsB;AAAA,EACtB,wBAAwB;AAAA,EACxB,0BAA0B;AAAA,EAC1B,OAAO;AAAA,IACH,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,eAAe;AAAA,IACf,aAAa;AAAA;AAAA,IAEb,gBAAgB;AAAA,IAChB,oBAAoB;AAAA,IACpB,oCAAoC;AAAA,IACpC,yBAAyB;AAAA,IACzB,sCAAsC;AAAA,IACtC,wBAAwB;AAAA,IACxB,0BAA0B;AAAA,IAE1B,qBAAqB;AAAA,IACrB,4BAA4B;AAAA,IAC5B,8BAA8B;AAAA,IAC9B,4BAA4B;AAAA,IAC5B,8BAA8B;AAAA,IAC9B,6BAA6B;AAAA,IAC7B,2CAA2C;AAAA,IAC3C,qCAAqC;AAAA,IACrC,sCAAsC;AAAA,IACtC,kCAAkC;AAAA,IAElC,gCAAgC;AAAA,IAChC,kCAAkC;AAAA;AAAA;AAAA;AAAA,IAMlC,0BAA0B;AAAA,IAC1B,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,IAErB,SAAS;AAAA,IACT,oBAAoB;AAAA,IACpB,wBAAwB;AAAA,IACxB,wBAAwB;AAAA,IAExB,sBAAsB;AAAA,IACtB,yBAAyB;AAAA,IACzB,iCAAiC;AAAA;AAAA;AAAA;AAAA,IAKjC,6BAA6B;AAAA,IAC7B,cAAc;AAAA,IAEd,YAAY;AAAA,MACR,kBAAkB;AAAA,MAClB,YAAY;AAAA;AAAA,IAEf;AAAA,EACJ;AAAA;AAAA,EAGD,iBAAiB;AAAA,EACjB,mBAAmB;AAAA,EACnB,iBAAiB;AAAA,EACjB,oBAAoB;AAAA,EACpB,kBAAkB;AAAA;AAAA;AAAA;AAAA,EAKlB,sBAAsB,SAAS;AAAA;AAAA,EAE/B,qBAAqB,SAAS;AAAA,EAC9B,mBAAmB,SAAS;AAAA;AAAA,EAE5B,oCAAoC,SAAS;AAAA,EAC7C,mCAAmC,SAAS;AAAA,EAC5C,4BAA4B,SAAS;AAAA,EACrC,wBAAwB,SAAS;AAAA,EACjC,yBAAyB,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASlC,MAAM;AAAA,IACF,KAAK,SAAS,KAAK;AAAA,IACnB,UAAU,SAAS,KAAK;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQL;ACrGe,MAAM,UAAN,MAAM,QAAO;AAAA,EACxB,WAAW,QAAQ;AACf,WACI,KAAK,SAAS,IAAI,UAAU,WAAW,OAAO,KAC9C,KAAK,QAAQ,IAAI,WAAW,GAAG,KAAK,qBAAqB,UAAU,WAAW,SAAS;AAAA,EAE9F;AAAA;AAAA;AAAA,EAID,OAAO,MAAM,QAAQ,MAAM;AACvB,QAAI;AACA,UACI,KAAK,SAAS,IAAI,UAAU,WAAW,OAAO,KAC9C,KAAK,QAAQ,IAAI,WAAW,GAAG,KAAK,qBAAqB,UAAU,WAAW,SAAS,GACzF;AACE,gBAAQ,IAAI,WAAW,UAAU,SAAS,MAAM,GAAG,IAAI,GAAG,IAAI;AAAA,MACjE;AAAA,IACJ,SAAQ,GAAG;AACR,cAAQ,MAAM,EAAE,OAAO;AAAA,IAC1B;AACD,WAAO;AAAA,EACV;AAAA,EAED,OAAO,aAAa,MAAM;AACtB,WAAO,KAAK,IAAI,IAAI,IAAI;AAAA,EAC3B;AAAA,EAED,OAAO,IAAI,YAAY,MAAM;AACzB,QAAI;AACA,gBAAU,GAAG,UAAU,SAAS,MAAM,OAAO;AAC7C,cAAQ,IAAI,QAAQ,QAAQ,QAAQ,IAAI,GAAG,GAAG,IAAI;AAAA,IACrD,SAAQ,GAAG;AACR,cAAQ,MAAM,EAAE,OAAO;AAAA,IAC1B;AACD,WAAO;AAAA,EACV;AAAA,EAED,OAAO,OAAO,YAAY,MAAM;AAC5B,QAAI;AACA,gBAAU,GAAG,UAAU,SAAS,MAAM,OAAO;AAC7C,SAAG,eAAe,OAAO,OAAO;AAChC,cAAQ,IAAI,QAAQ,QAAQ,QAAQ,IAAI,GAAG,GAAG,IAAI;AAAA,IACrD,SAAQ,GAAG;AACR,cAAQ,MAAM,EAAE,OAAO;AAAA,IAC1B;AACD,WAAO;AAAA,EACV;AAAA,EAED,OAAO,KAAK,MAAM,SAAS,UAAU,MAAM;AACvC,QAAI;AACA,aAAO,GAAG,UAAU,SAAS,MAAM,IAAI;AACvC,UAAI,QAAQ;AACR,WAAG,eAAe,KAAK,IAAI;AAAA,MAC9B;AACD,cAAQ,IAAI,KAAK,QAAQ,QAAQ,IAAI,GAAG,GAAG,IAAI;AAAA,IAClD,SAAQ,GAAG;AACR,cAAQ,MAAM,EAAE,OAAO;AAAA,IAC1B;AACD,WAAO;AAAA,EACV;AAAA,EAED,OAAO,KAAK,SAAS,SAAS,UAAU,MAAM;AAC1C,QAAI;AACA,gBAAU,GAAG,UAAU,SAAS,MAAM,OAAO;AAC7C,UAAI,QAAQ;AACR,WAAG,eAAe,KAAK,OAAO;AAAA,MACjC;AACD,cAAQ,KAAK,QAAQ,QAAQ,QAAQ,IAAI,GAAG,GAAG,IAAI;AAAA,IACtD,SAAQ,GAAG;AACR,cAAQ,MAAM,EAAE,OAAO;AAAA,IAC1B;AACD,WAAO;AAAA,EACV;AAAA,EAED,OAAO,eAAe,MAAM;AACxB,WAAO,KAAK,MAAM,IAAI,OAAO,IAAI;AAAA,EACpC;AAAA,EAED,OAAO,MAAM,OAAO,SAAS,SAAS,MAAM;AACxC,QAAI;AACA,cAAQ,GAAG,UAAU,SAAS,MAAM,KAAK;AACzC,UAAI,QAAQ;AACR,WAAG,eAAe,MAAM,KAAK;AAAA,MAChC;AACD,cAAQ,MAAM,MAAM,QAAQ,QAAQ,IAAI,GAAG,GAAG,IAAI;AAAA,IACrD,SAAQ,GAAG;AACR,cAAQ,MAAM,EAAE,OAAO;AAAA,IAC1B;AACD,WAAO,IAAI,MAAM,MAAM,QAAQ,QAAQ,IAAI,CAAC;AAAA,EAC/C;AAAA,EAED,OAAO,eAAe,OAAO,SAAS,SAAS,MAAM;AACjD,QAAI;AACA,cAAQ,GAAG,UAAU,SAAS,MAAM,KAAK;AACzC,UAAI,QAAQ;AACR,WAAG,eAAe,MAAM,OAAO;AAAA,UAC3B,WAAW;AAAA,QAC/B,CAAiB;AAAA,MACJ;AACD,cAAQ,MAAM,MAAM,QAAQ,QAAQ,IAAI,GAAG,GAAG,IAAI;AAAA,IACrD,SAAQ,GAAG;AACR,cAAQ,MAAM,EAAE,OAAO;AAAA,IAC1B;AACD,WAAO,IAAI,MAAM,MAAM,QAAQ,QAAQ,IAAI,CAAC;AAAA,EAC/C;AAAA,EAED,OAAO,QAAQ,SAAS;AACpB,SAAK,KAAK,KAAK,IAAK,GAAE,OAAO;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBD,OAAO,cAAc,SAAS,OAAO,+BAA+B;AAChE,WAAO,aAAa,UAAU,SAAS;AAAA,4CACH,IAAI;AAAA,4CACJ,UAAU,SAAS;AAAA,kBAC7C,OAAO;AAAA;AAAA,EAEpB;AACL;AApI4B;AA+GxB,cA/GiB,SA+GV,QAAO,CAAC,QAAQ;AACnB,SAAO,KAAK,KAAK,SAAS,GAAG,GAAG,KAAI;AAC5C;AAEI,cAnHiB,SAmHV,cAAa,CAAC,KAAK,OAAO,CAAA,MAAO;AACpC,SAAO,KAAK,KAAK,OAAO,KAAK,IAAI,GAAG;AAC5C;AArHe,IAAM,SAAN;ACHR,MAAM,mBAAN,MAAM,iBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUzB,OAAO,aAAa,EAAE,cAAc,YAAY,wBAAwB,cAAc,cAAc,SAAS;AACzG,QAAI,OAAO;AACX,QAAI,0BAA0B,SAAS,SAAS;AAC5C,YAAM,aAAa,KAAK,YAAY,IAAI,sBAAsB;AAC9D,UAAI,CAAC,YAAY;AAEb,eAAO,KAAK,kCAAkC,UAAU,EAAE;AAAA,MAC1E,OAAmB;AAEH,cAAM,WAAW,aAAa,WAAW,IAAI,UAAU,IAAI;AAC3D,YAAI,UAAU;AACV,cAAI,cAAc;AACd,gBAAI,SAAS,SAAS;AAAc;AAAA,iBAE7B;AACH,qBAAO,SAAS;AAAA,YACnB;AAAA,UACzB,OAA2B;AACH,mBAAO,SAAS;AAAA,UACnB;AAAA,QACJ;AAED,cAAM,MAAM,WAAW,KAAK,CAAC,MAAM,EAAE,OAAO,cAAc,EAAE,SAAS,YAAY,KAAK;AACtF,YAAI,KAAK;AACL,iBAAO,IAAI;AAAA,QACd;AAAA,MACJ;AAAA,IACJ;AACD,QAAI,cAAc;AACd,YAAMA,QAAO,iBAAgB,4BAA4B,cAAc,WAAW;AAClF,UAAI,CAACA,OAAM;AAEP,eAAO,KAAK,4BAA4B,YAAY,EAAE;AAAA,MACtE,OAAmB;AAEH,cAAM,WAAW,aAAaA,MAAK,MAAM,IAAI,UAAU,IAAI;AAC3D,YAAI,UAAU;AACV,cAAI,cAAc;AACd,gBAAI,SAAS,SAAS;AAAc;AAAA,iBAE7B;AACH,qBAAO,SAAS;AAAA,YACnB;AAAA,UACzB,OAA2B;AACH,mBAAO,SAAS;AAAA,UACnB;AAAA,QACJ;AAGD,cAAM,MAAMA,MAAK,MAAM,KAAK,CAAC,MAAM,EAAE,QAAQ,cAAc,EAAE,SAAS,YAAY,KAAK;AACvF,YAAI,KAAK;AACL,iBAAO,IAAI;AAAA,QACd;AAAA,MACJ;AAAA,IACJ;AACD,WAAO;AAAA,EACV;AAAA,EAED,OAAO,YAAY,QAAQ;AACvB,QAAI,iBAAgB,aAAa,MAAM,GAAG;AACtC,eAAS,aAAa,MAAM;AAAA,IAC/B;AACD,WAAO,QAAQ,YAAY;AAAA,EAC9B;AAAA,EAED,OAAO,aAAa,MAAM;AACtB,UAAM,QAAQ,OAAO,SAAS,aAAa,KAAK,MAAM,KAAK,KAAK,CAAA,GAAI,UAAU,CAAC,KAAK,SAAS,GAAG;AAChG,QAAI,OAAO;AACP,aAAO,CAAC,CAAC,aAAa,IAAI;AAAA,IACtC,OAAe;AACH,aAAO;AAAA,IACV;AAAA,EACJ;AAAA,EAED,OAAO,QAAQ,QAAQ;AACnB,QAAI,iBAAgB,aAAa,MAAM,GAAG;AACtC,aAAO;AAAA,IACV;AACD,UAAMC,YAAW,YAAY,MAAM;AACnC,WAAOA,WAAU,QAAQ;AAAA,EAC5B;AAAA,EAED,OAAO,4BAA4B,QAAQ,cAAc,OAAO,aAAa,MAAM;AAC/E,QAAI,YAAY;AAChB,QAAI,CAAC,WAAW;AACZ,YAAM,OAAO,MAAM,qCAAqC,MAAM,SAAS;AAAA,IAC1E;AACD,QAAI,qBAAqB,sBAAsB;AAC3C,aAAO;AAAA,IACV;AAED,QAAI,UAAU,UAAU;AACpB,kBAAY,UAAU;AAAA,IACzB;AACD,QAAI,UAAU,MAAM;AAChB,kBAAY,UAAU;AAAA,IACzB;AAED,QAAI,qBAAqB,sBAAsB;AAC3C,aAAO;AAAA,IACV;AACD,QAAI,iBAAgB,aAAa,SAAS,GAAG;AACzC,kBAAY,aAAa,SAAS;AAAA,IAC9C,OAAe;AACH,UAAI,KAAK,MAAM,IAAI,SAAS,GAAG;AAC3B,oBAAY,KAAK,MAAM,IAAI,SAAS;AAAA,MACpD,WAAuB,CAAC,cAAc,KAAK,MAAM,QAAQ,SAAS,GAAG;AACrD,oBAAY,KAAK,MAAM,QAAQ,SAAS;AAAA,MAC3C;AAAA,IACJ;AAED,QAAI,CAAC,WAAW;AACZ,UAAI,aAAa;AACb,eAAO,KAAK,qCAAqC,OAAO,SAAS;AACjE;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,qCAAqC,MAAM,SAAS;AAAA,MAC1E;AAAA,IACJ;AAED,QAAI,EAAE,qBAAqB,uBAAuB;AAC9C,UAAI,aAAa;AACb,eAAO,KAAK,gCAAgC,OAAO,SAAS;AAC5D;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,gCAAgC,MAAM,SAAS;AAAA,MACrE;AAAA,IACJ;AACD,WAAO;AAAA,EACV;AAAA,EAED,aAAa,6BAA6B,QAAQ,cAAc,OAAO,aAAa,MAAM;AACtF,QAAI,YAAY;AAChB,QAAI,CAAC,WAAW;AACZ,YAAM,OAAO,MAAM,qCAAqC,MAAM,SAAS;AAAA,IAC1E;AACD,QAAI,qBAAqB,sBAAsB;AAC3C,aAAO;AAAA,IACV;AAED,QAAI,UAAU,UAAU;AACpB,kBAAY,UAAU;AAAA,IACzB;AACD,QAAI,UAAU,MAAM;AAChB,kBAAY,UAAU;AAAA,IACzB;AAED,QAAI,qBAAqB,sBAAsB;AAC3C,aAAO;AAAA,IACV;AACD,QAAI,iBAAgB,aAAa,SAAS,GAAG;AACzC,kBAAY,MAAM,SAAS,SAAS;AAAA,IAChD,OAAe;AACH,UAAI,KAAK,MAAM,IAAI,SAAS,GAAG;AAC3B,oBAAY,KAAK,MAAM,IAAI,SAAS;AAAA,MACpD,WAAuB,CAAC,cAAc,KAAK,MAAM,QAAQ,SAAS,GAAG;AACrD,oBAAY,KAAK,MAAM,QAAQ,SAAS;AAAA,MAC3C;AAAA,IACJ;AACD,QAAI,CAAC,WAAW;AACZ,UAAI,aAAa;AACb,eAAO,KAAK,qCAAqC,OAAO,SAAS;AACjE;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,qCAAqC,MAAM,SAAS;AAAA,MAC1E;AAAA,IACJ;AAED,QAAI,EAAE,qBAAqB,uBAAuB;AAC9C,UAAI,aAAa;AACb,eAAO,KAAK,gCAAgC,OAAO,SAAS;AAC5D;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,gCAAgC,MAAM,SAAS;AAAA,MACrE;AAAA,IACJ;AACD,WAAO;AAAA,EACV;AAAA,EAED,OAAO,YAAY,QAAQ,cAAc,OAAO,aAAa,MAAM;AAC/D,QAAI,YAAY;AAChB,QAAI,CAAC,WAAW;AACZ,YAAM,OAAO,MAAM,qBAAqB,MAAM,SAAS;AAAA,IAC1D;AACD,QAAI,qBAAqB,MAAM;AAC3B,aAAO;AAAA,IACV;AAED,QAAI,UAAU,UAAU;AACpB,kBAAY,UAAU;AAAA,IACzB;AACD,QAAI,UAAU,MAAM;AAChB,kBAAY,UAAU;AAAA,IACzB;AAED,QAAI,qBAAqB,MAAM;AAC3B,aAAO;AAAA,IACV;AACD,QAAI,iBAAgB,aAAa,SAAS,GAAG;AACzC,kBAAY,aAAa,SAAS;AAAA,IAC9C,OAAe;AACH,UAAI,KAAK,MAAM,IAAI,SAAS,GAAG;AAC3B,oBAAY,KAAK,MAAM,IAAI,SAAS;AAAA,MACpD,WAAuB,CAAC,cAAc,KAAK,MAAM,QAAQ,SAAS,GAAG;AACrD,oBAAY,KAAK,MAAM,QAAQ,SAAS;AAAA,MAC3C;AAAA,IACJ;AACD,QAAI,CAAC,WAAW;AACZ,UAAI,aAAa;AACb,eAAO,KAAK,qBAAqB,OAAO,SAAS;AACjD;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,qBAAqB,MAAM,SAAS;AAAA,MAC1D;AAAA,IACJ;AAUD,WAAO;AAAA,EACV;AAAA,EAED,OAAO,aAAa,QAAQ,cAAc,OAAO,aAAa,MAAM;AAChE,QAAI,YAAY;AAChB,QAAI,CAAC,WAAW;AACZ,YAAM,OAAO,MAAM,sBAAsB,MAAM,SAAS;AAAA,IAC3D;AACD,QAAI,qBAAqB,OAAO;AAC5B,aAAO;AAAA,IACV;AAED,QAAI,UAAU,UAAU;AACpB,kBAAY,UAAU;AAAA,IACzB;AACD,QAAI,UAAU,MAAM;AAChB,kBAAY,UAAU;AAAA,IACzB;AAED,QAAI,qBAAqB,OAAO;AAC5B,aAAO;AAAA,IACV;AACD,QAAI,iBAAgB,aAAa,SAAS,GAAG;AACzC,kBAAY,aAAa,SAAS;AAAA,IAC9C,OAAe;AACH,UAAI,KAAK,OAAO,IAAI,SAAS,GAAG;AAC5B,oBAAY,KAAK,OAAO,IAAI,SAAS;AAAA,MACrD,WAAuB,CAAC,cAAc,KAAK,OAAO,QAAQ,SAAS,GAAG;AACtD,oBAAY,KAAK,OAAO,QAAQ,SAAS;AAAA,MAC5C;AAAA,IACJ;AACD,QAAI,CAAC,WAAW;AACZ,UAAI,aAAa;AACb,eAAO,KAAK,sBAAsB,OAAO,SAAS;AAClD;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,sBAAsB,MAAM,SAAS;AAAA,MAC3D;AAAA,IACJ;AAUD,WAAO;AAAA,EACV;AAAA,EAED,aAAa,cAAc,QAAQ,cAAc,OAAO,aAAa,MAAM;AACvE,QAAI,YAAY;AAChB,QAAI,CAAC,WAAW;AACZ,YAAM,OAAO,MAAM,sBAAsB,MAAM,SAAS;AAAA,IAC3D;AACD,QAAI,qBAAqB,OAAO;AAC5B,aAAO;AAAA,IACV;AAED,QAAI,UAAU,UAAU;AACpB,kBAAY,UAAU;AAAA,IACzB;AACD,QAAI,UAAU,MAAM;AAChB,kBAAY,UAAU;AAAA,IACzB;AAED,QAAI,qBAAqB,OAAO;AAC5B,aAAO;AAAA,IACV;AACD,QAAI,iBAAgB,aAAa,SAAS,GAAG;AACzC,kBAAY,MAAM,SAAS,SAAS;AAAA,IAChD,OAAe;AACH,UAAI,KAAK,OAAO,IAAI,SAAS,GAAG;AAC5B,oBAAY,KAAK,OAAO,IAAI,SAAS;AAAA,MACrD,WAAuB,CAAC,cAAc,KAAK,OAAO,QAAQ,SAAS,GAAG;AACtD,oBAAY,KAAK,OAAO,QAAQ,SAAS;AAAA,MAC5C;AAAA,IACJ;AACD,QAAI,CAAC,WAAW;AACZ,UAAI,aAAa;AACb,eAAO,KAAK,sBAAsB,OAAO,SAAS;AAClD;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,sBAAsB,MAAM,SAAS;AAAA,MAC3D;AAAA,IACJ;AAED,QAAI,EAAE,qBAAqB,QAAQ;AAC/B,UAAI,aAAa;AACb,eAAO,KAAK,iBAAiB,OAAO,SAAS;AAC7C;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,iBAAiB,MAAM,SAAS;AAAA,MACtD;AAAA,IACJ;AACD,WAAO;AAAA,EACV;AAAA,EAED,OAAO,eAAe,QAAQ,cAAc,OAAO,aAAa,MAAM;AAClE,QAAI,YAAY;AAChB,QAAI,CAAC,WAAW;AACZ,YAAM,OAAO,MAAM,wBAAwB,MAAM,SAAS;AAAA,IAC7D;AACD,QAAI,qBAAqB,SAAS;AAC9B,aAAO;AAAA,IACV;AAED,QAAI,UAAU,UAAU;AACpB,kBAAY,UAAU;AAAA,IACzB;AACD,QAAI,UAAU,MAAM;AAChB,kBAAY,UAAU;AAAA,IACzB;AAED,QAAI,qBAAqB,SAAS;AAC9B,aAAO;AAAA,IACV;AACD,QAAI,iBAAgB,aAAa,SAAS,GAAG;AACzC,kBAAY,aAAa,SAAS;AAAA,IAC9C,OAAe;AACH,UAAI,KAAK,QAAQ,IAAI,SAAS,GAAG;AAC7B,oBAAY,KAAK,QAAQ,IAAI,SAAS;AAAA,MACtD,WAAuB,CAAC,cAAc,KAAK,QAAQ,QAAQ,SAAS,GAAG;AACvD,oBAAY,KAAK,QAAQ,QAAQ,SAAS;AAAA,MAC7C;AAAA,IACJ;AACD,QAAI,CAAC,WAAW;AACZ,UAAI,aAAa;AACb,eAAO,KAAK,wBAAwB,OAAO,SAAS;AACpD;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,wBAAwB,MAAM,SAAS;AAAA,MAC7D;AAAA,IACJ;AAUD,WAAO;AAAA,EACV;AAAA,EAED,aAAa,gBAAgB,QAAQ,cAAc,OAAO,aAAa,MAAM;AACzE,QAAI,YAAY;AAChB,QAAI,CAAC,WAAW;AACZ,YAAM,OAAO,MAAM,wBAAwB,MAAM,SAAS;AAAA,IAC7D;AACD,QAAI,qBAAqB,SAAS;AAC9B,aAAO;AAAA,IACV;AAED,QAAI,UAAU,UAAU;AACpB,kBAAY,UAAU;AAAA,IACzB;AACD,QAAI,UAAU,MAAM;AAChB,kBAAY,UAAU;AAAA,IACzB;AAED,QAAI,qBAAqB,SAAS;AAC9B,aAAO;AAAA,IACV;AACD,QAAI,iBAAgB,aAAa,SAAS,GAAG;AACzC,kBAAY,MAAM,SAAS,SAAS;AAAA,IAChD,OAAe;AACH,UAAI,KAAK,QAAQ,IAAI,SAAS,GAAG;AAC7B,oBAAY,KAAK,QAAQ,IAAI,SAAS;AAAA,MACtD,WAAuB,CAAC,cAAc,KAAK,QAAQ,QAAQ,SAAS,GAAG;AACvD,oBAAY,KAAK,QAAQ,QAAQ,SAAS;AAAA,MAC7C;AAAA,IACJ;AACD,QAAI,CAAC,WAAW;AACZ,UAAI,aAAa;AACb,eAAO,KAAK,wBAAwB,OAAO,SAAS;AACpD;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,wBAAwB,MAAM,SAAS;AAAA,MAC7D;AAAA,IACJ;AAED,QAAI,EAAE,qBAAqB,UAAU;AACjC,UAAI,aAAa;AACb,eAAO,KAAK,mBAAmB,OAAO,SAAS;AAC/C;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,mBAAmB,MAAM,SAAS;AAAA,MACxD;AAAA,IACJ;AACD,WAAO;AAAA,EACV;AAAA,EAED,OAAO,aAAa,QAAQ,cAAc,OAAO,aAAa,MAAM;AAChE,QAAI,YAAY;AAChB,QAAI,CAAC,WAAW;AACZ,YAAM,OAAO,MAAM,sBAAsB,MAAM,SAAS;AAAA,IAC3D;AACD,QAAI,qBAAqB,OAAO;AAC5B,aAAO;AAAA,IACV;AAED,QAAI,UAAU,UAAU;AACpB,kBAAY,UAAU;AAAA,IACzB;AACD,QAAI,UAAU,MAAM;AAChB,kBAAY,UAAU;AAAA,IACzB;AAED,QAAI,qBAAqB,OAAO;AAC5B,aAAO;AAAA,IACV;AACD,QAAI,iBAAgB,aAAa,SAAS,GAAG;AACzC,kBAAY,aAAa,SAAS;AAAA,IAC9C,OAAe;AACH,UAAI,KAAK,OAAO,IAAI,SAAS,GAAG;AAC5B,oBAAY,KAAK,OAAO,IAAI,SAAS;AAAA,MACrD,WAAuB,CAAC,cAAc,KAAK,OAAO,QAAQ,SAAS,GAAG;AACtD,oBAAY,KAAK,OAAO,QAAQ,SAAS;AAAA,MAC5C;AAAA,IACJ;AACD,QAAI,CAAC,WAAW;AACZ,UAAI,aAAa;AACb,eAAO,KAAK,sBAAsB,OAAO,SAAS;AAClD;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,sBAAsB,MAAM,SAAS;AAAA,MAC3D;AAAA,IACJ;AAUD,WAAO;AAAA,EACV;AAAA,EAED,aAAa,cAAc,QAAQ,cAAc,OAAO,aAAa,MAAM;AACvE,QAAI,YAAY;AAChB,QAAI,CAAC,WAAW;AACZ,YAAM,OAAO,MAAM,sBAAsB,MAAM,SAAS;AAAA,IAC3D;AACD,QAAI,qBAAqB,OAAO;AAC5B,aAAO;AAAA,IACV;AAED,QAAI,UAAU,UAAU;AACpB,kBAAY,UAAU;AAAA,IACzB;AACD,QAAI,UAAU,MAAM;AAChB,kBAAY,UAAU;AAAA,IACzB;AAED,QAAI,qBAAqB,OAAO;AAC5B,aAAO;AAAA,IACV;AACD,QAAI,iBAAgB,aAAa,SAAS,GAAG;AACzC,kBAAY,MAAM,SAAS,SAAS;AAAA,IAChD,OAAe;AACH,UAAI,KAAK,OAAO,IAAI,SAAS,GAAG;AAC5B,oBAAY,KAAK,OAAO,IAAI,SAAS;AAAA,MACrD,WAAuB,CAAC,cAAc,KAAK,OAAO,QAAQ,SAAS,GAAG;AACtD,oBAAY,KAAK,OAAO,QAAQ,SAAS;AAAA,MAC5C;AAAA,IACJ;AACD,QAAI,CAAC,WAAW;AACZ,UAAI,aAAa;AACb,eAAO,KAAK,sBAAsB,OAAO,SAAS;AAClD;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,sBAAsB,MAAM,SAAS;AAAA,MAC3D;AAAA,IACJ;AAED,QAAI,EAAE,qBAAqB,QAAQ;AAC/B,UAAI,aAAa;AACb,eAAO,KAAK,iBAAiB,OAAO,SAAS;AAC7C;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,iBAAiB,MAAM,SAAS;AAAA,MACtD;AAAA,IACJ;AACD,WAAO;AAAA,EACV;AAAA,EAED,OAAO,aAAa,QAAQ,cAAc,OAAO,aAAa,MAAM;AAChE,QAAI,YAAY;AAChB,QAAI,CAAC,WAAW;AACZ,YAAM,OAAO,MAAM,sBAAsB,MAAM,SAAS;AAAA,IAC3D;AACD,QAAI,qBAAqB,OAAO;AAC5B,aAAO;AAAA,IACV;AAED,QAAI,UAAU,UAAU;AACpB,kBAAY,UAAU;AAAA,IACzB;AACD,QAAI,UAAU,MAAM;AAChB,kBAAY,UAAU;AAAA,IACzB;AAED,QAAI,qBAAqB,OAAO;AAC5B,aAAO;AAAA,IACV;AACD,QAAI,iBAAgB,aAAa,SAAS,GAAG;AACzC,kBAAY,aAAa,SAAS;AAAA,IAC9C,OAAe;AACH,UAAI,KAAK,OAAO,IAAI,SAAS,GAAG;AAC5B,oBAAY,KAAK,OAAO,IAAI,SAAS;AAAA,MACrD,WAAuB,CAAC,cAAc,KAAK,OAAO,QAAQ,SAAS,GAAG;AACtD,oBAAY,KAAK,OAAO,QAAQ,SAAS;AAAA,MAC5C;AAAA,IACJ;AACD,QAAI,CAAC,WAAW;AACZ,UAAI,aAAa;AACb,eAAO,KAAK,sBAAsB,OAAO,SAAS;AAClD;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,sBAAsB,MAAM,SAAS;AAAA,MAC3D;AAAA,IACJ;AAUD,WAAO;AAAA,EACV;AAAA,EAED,aAAa,cAAc,QAAQ,cAAc,OAAO,aAAa,MAAM;AACvE,QAAI,YAAY;AAChB,QAAI,CAAC,WAAW;AACZ,YAAM,OAAO,MAAM,sBAAsB,MAAM,SAAS;AAAA,IAC3D;AACD,QAAI,qBAAqB,OAAO;AAC5B,aAAO;AAAA,IACV;AAED,QAAI,UAAU,UAAU;AACpB,kBAAY,UAAU;AAAA,IACzB;AACD,QAAI,UAAU,MAAM;AAChB,kBAAY,UAAU;AAAA,IACzB;AAED,QAAI,qBAAqB,OAAO;AAC5B,aAAO;AAAA,IACV;AACD,QAAI,iBAAgB,aAAa,SAAS,GAAG;AACzC,kBAAY,MAAM,SAAS,SAAS;AAAA,IAChD,OAAe;AACH,UAAI,KAAK,OAAO,IAAI,SAAS,GAAG;AAC5B,oBAAY,KAAK,OAAO,IAAI,SAAS;AAAA,MACrD,WAAuB,CAAC,cAAc,KAAK,OAAO,QAAQ,SAAS,GAAG;AACtD,oBAAY,KAAK,OAAO,QAAQ,SAAS;AAAA,MAC5C;AAAA,IACJ;AACD,QAAI,CAAC,WAAW;AACZ,UAAI,aAAa;AACb,eAAO,KAAK,sBAAsB,OAAO,SAAS;AAClD;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,sBAAsB,MAAM,SAAS;AAAA,MAC3D;AAAA,IACJ;AAED,QAAI,EAAE,qBAAqB,QAAQ;AAC/B,UAAI,aAAa;AACb,eAAO,KAAK,iBAAiB,OAAO,SAAS;AAC7C;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,iBAAiB,MAAM,SAAS;AAAA,MACtD;AAAA,IACJ;AACD,WAAO;AAAA,EACV;AAAA,EAED,OAAO,YAAY,QAAQ,cAAc,OAAO,aAAa,MAAM;AAC/D,QAAI,YAAY;AAChB,QAAI,CAAC,WAAW;AACZ,YAAM,OAAO,MAAM,qBAAqB,MAAM,SAAS;AAAA,IAC1D;AACD,QAAI,qBAAqB,MAAM;AAC3B,aAAO;AAAA,IACV;AAED,QAAI,UAAU,UAAU;AACpB,kBAAY,UAAU;AAAA,IACzB;AACD,QAAI,UAAU,MAAM;AAChB,kBAAY,UAAU;AAAA,IACzB;AAED,QAAI,qBAAqB,MAAM;AAC3B,aAAO;AAAA,IACV;AACD,QAAI,iBAAgB,aAAa,SAAS,GAAG;AACzC,kBAAY,aAAa,SAAS;AAAA,IAC9C,OAAe;AACH,UAAI,KAAK,MAAM,IAAI,SAAS,GAAG;AAC3B,oBAAY,KAAK,MAAM,IAAI,SAAS;AAAA,MACpD,WAAuB,CAAC,cAAc,KAAK,MAAM,QAAQ,SAAS,GAAG;AACrD,oBAAY,KAAK,MAAM,QAAQ,SAAS;AAAA,MAC3C;AAAA,IACJ;AACD,QAAI,CAAC,WAAW;AACZ,UAAI,aAAa;AACb,eAAO,KAAK,qBAAqB,OAAO,SAAS;AACjD;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,qBAAqB,MAAM,SAAS;AAAA,MAC1D;AAAA,IACJ;AAUD,WAAO;AAAA,EACV;AAAA,EAED,aAAa,aAAa,QAAQ,cAAc,OAAO,aAAa,MAAM;AACtE,QAAI,YAAY;AAChB,QAAI,CAAC,WAAW;AACZ,YAAM,OAAO,MAAM,qBAAqB,MAAM,SAAS;AAAA,IAC1D;AACD,QAAI,qBAAqB,MAAM;AAC3B,aAAO;AAAA,IACV;AAED,QAAI,UAAU,UAAU;AACpB,kBAAY,UAAU;AAAA,IACzB;AACD,QAAI,UAAU,MAAM;AAChB,kBAAY,UAAU;AAAA,IACzB;AAED,QAAI,qBAAqB,MAAM;AAC3B,aAAO;AAAA,IACV;AACD,QAAI,iBAAgB,aAAa,SAAS,GAAG;AACzC,kBAAY,MAAM,SAAS,SAAS;AAAA,IAChD,OAAe;AACH,UAAI,KAAK,MAAM,IAAI,SAAS,GAAG;AAC3B,oBAAY,KAAK,MAAM,IAAI,SAAS;AAAA,MACpD,WAAuB,CAAC,cAAc,KAAK,MAAM,QAAQ,SAAS,GAAG;AACrD,oBAAY,KAAK,MAAM,QAAQ,SAAS;AAAA,MAC3C;AAAA,IACJ;AACD,QAAI,CAAC,WAAW;AACZ,UAAI,aAAa;AACb,eAAO,KAAK,qBAAqB,OAAO,SAAS;AACjD;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,qBAAqB,MAAM,SAAS;AAAA,MAC1D;AAAA,IACJ;AAED,QAAI,EAAE,qBAAqB,OAAO;AAC9B,UAAI,aAAa;AACb,eAAO,KAAK,gBAAgB,OAAO,SAAS;AAC5C;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,gBAAgB,MAAM,SAAS;AAAA,MACrD;AAAA,IACJ;AACD,WAAO;AAAA,EACV;AAAA,EAED,OAAO,yBAAyB,QAAQ,cAAc,OAAO,aAAa,MAAM;AAC5E,QAAI,YAAY;AAChB,QAAI,CAAC,WAAW;AACZ,YAAM,OAAO,MAAM,8BAA8B,MAAM,SAAS;AAAA,IACnE;AACD,QAAI,qBAAqB,eAAe;AACpC,aAAO,UAAU;AAAA,IACpB;AAED,QAAI,UAAU,UAAU;AACpB,kBAAY,UAAU;AAAA,IACzB;AACD,QAAI,UAAU,MAAM;AAChB,kBAAY,UAAU;AAAA,IACzB;AAED,QAAI,qBAAqB,eAAe;AACpC,aAAO;AAAA,IACV;AACD,QAAI,OAAO,cAAc,YAAY,qBAAqB,QAAQ;AAC9D,aAAO;AAAA,IACV;AACD,QAAI,iBAAgB,aAAa,SAAS,GAAG;AACzC,kBAAY,aAAa,SAAS;AAAA,IAC9C,OAAe;AACH,kBAAY,KAAK,UAAU,SACtB,QAAQ,CAAC,aAAa,SAAS,OAAO,QAAQ,EAC9C,KAAK,CAAC,kBAAkB;AACrB,eAAO,cAAc,OAAO,aAAa,cAAc,SAAS;AAAA,MACpF,CAAiB;AAAA,IACR;AACD,QAAI,CAAC,WAAW;AACZ,UAAI,aAAa;AACb,eAAO,KAAK,8BAA8B,OAAO,SAAS;AAC1D;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,8BAA8B,MAAM,SAAS;AAAA,MACnE;AAAA,IACJ;AAUD,WAAO,UAAU;AAAA,EACpB;AAAA,EAED,aAAa,0BAA0B,QAAQ,cAAc,OAAO,aAAa,MAAM;AACnF,QAAI,YAAY;AAChB,QAAI,CAAC,WAAW;AACZ,YAAM,OAAO,MAAM,8BAA8B,MAAM,SAAS;AAAA,IACnE;AACD,QAAI,qBAAqB,eAAe;AACpC,aAAO,UAAU;AAAA,IACpB;AAED,QAAI,UAAU,UAAU;AACpB,kBAAY,UAAU;AAAA,IACzB;AACD,QAAI,UAAU,MAAM;AAChB,kBAAY,UAAU;AAAA,IACzB;AAED,QAAI,qBAAqB,eAAe;AACpC,aAAO;AAAA,IACV;AACD,QAAI,OAAO,cAAc,YAAY,qBAAqB,QAAQ;AAC9D,aAAO;AAAA,IACV;AACD,QAAI,iBAAgB,aAAa,SAAS,GAAG;AACzC,kBAAY,MAAM,SAAS,SAAS;AAAA,IAChD,OAAe;AACH,kBAAY,KAAK,UAAU,SACtB,QAAQ,CAAC,aAAa,SAAS,OAAO,QAAQ,EAC9C,KAAK,CAAC,kBAAkB;AACrB,eAAO,cAAc,OAAO,aAAa,cAAc,SAAS;AAAA,MACpF,CAAiB;AAAA,IACR;AACD,QAAI,CAAC,WAAW;AACZ,UAAI,aAAa;AACb,eAAO,KAAK,8BAA8B,OAAO,SAAS;AAC1D;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,8BAA8B,MAAM,SAAS;AAAA,MACnE;AAAA,IACJ;AAED,QAAI,EAAE,qBAAqB,gBAAgB;AACvC,UAAI,aAAa;AACb,eAAO,KAAK,yBAAyB,OAAO,SAAS;AACrD;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,yBAAyB,MAAM,SAAS;AAAA,MAC9D;AAAA,IACJ;AACD,WAAO,UAAU;AAAA,EACpB;AAAA,EAED,OAAO,aAAa,QAAQ,cAAc,OAAO,aAAa,MAAM;AAChE,QAAI,YAAY;AAChB,QAAI,CAAC,WAAW;AACZ,YAAM,OAAO,MAAM,sBAAsB,MAAM,SAAS;AAAA,IAC3D;AACD,QAAI,qBAAqB,OAAO;AAC5B,aAAO;AAAA,IACV;AACD,QAAI,qBAAqB,eAAe;AACpC,kBAAY,WAAW,UAAU;AACjC,aAAO;AAAA,IACV;AACD,QAAI,qBAAqB,OAAO;AAC5B,UAAI,UAAU,OAAO;AACjB,oBAAY,OAAO,OAAO,IAAI,UAAU,KAAK;AAAA,MAC7D,OAAmB;AACH,oBAAY,UAAU;AAAA,MACzB;AACD,UAAI,CAAC,WAAW;AACZ,YAAI,aAAa;AACb,iBAAO,KAAK,sBAAsB,OAAO,SAAS;AAClD;AAAA,QACpB,OAAuB;AACH,gBAAM,OAAO,MAAM,sBAAsB,MAAM,SAAS;AAAA,QAC3D;AAAA,MACJ;AACD,aAAO;AAAA,IACV;AAED,QAAI,UAAU,UAAU;AACpB,kBAAY,UAAU;AAAA,IACzB;AACD,QAAI,UAAU,MAAM;AAChB,kBAAY,UAAU;AAAA,IACzB;AACD,QAAI,qBAAqB,OAAO;AAC5B,aAAO;AAAA,IACV;AACD,QAAI,iBAAgB,aAAa,SAAS,GAAG;AACzC,kBAAY,aAAa,SAAS;AAAA,IAC9C,OAAe;AACH,kBAAY,OAAO,QAAQ,WAAW,KAAK,CAAC,MAAM;AAC9C,eAAO,EAAE,OAAO;AAAA,MAChC,CAAa;AACD,UAAI,CAAC,YAAY;AACb,oBAAY,OAAO,QAAQ,WAAW,KAAK,CAAC,MAAM;AAC9C,iBAAO,EAAE,SAAS;AAAA,QACtC,CAAiB;AAAA,MACJ;AAAA,IACJ;AACD,QAAI,CAAC,WAAW;AACZ,UAAI,aAAa;AACb,eAAO,KAAK,sBAAsB,OAAO,SAAS;AAClD;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,sBAAsB,MAAM,SAAS;AAAA,MAC3D;AAAA,IACJ;AACD,gBAAY,WAAW,SAAS;AAChC,QAAI,qBAAqB,eAAe;AACpC,kBAAY,WAAW,UAAU;AAAA,IACpC;AAUD,WAAO;AAAA,EACV;AAAA,EAED,OAAO,iBAAiB,QAAQ,cAAc,OAAO,aAAa,MAAM;AACpE,QAAI,YAAY;AAChB,QAAI,CAAC,WAAW;AACZ,YAAM,OAAO,MAAM,0BAA0B,MAAM,SAAS;AAAA,IAC/D;AACD,QAAI,qBAAqB,WAAW;AAChC,aAAO;AAAA,IACV;AAED,QAAI,UAAU,UAAU;AACpB,kBAAY,UAAU;AAAA,IACzB;AACD,QAAI,UAAU,MAAM;AAChB,kBAAY,UAAU;AAAA,IACzB;AAED,QAAI,qBAAqB,WAAW;AAChC,aAAO;AAAA,IACV;AACD,QAAI,iBAAgB,aAAa,SAAS,GAAG;AACzC,kBAAY,aAAa,SAAS;AAAA,IAC9C,OAAe;AACH,UAAI,KAAK,OAAO,IAAI,SAAS,GAAG;AAC5B,oBAAY,KAAK,OAAO,IAAI,SAAS;AAAA,MACrD,WAAuB,CAAC,cAAc,KAAK,OAAO,QAAQ,SAAS,GAAG;AACtD,oBAAY,KAAK,OAAO,QAAQ,SAAS;AAAA,MAC5C;AAAA,IACJ;AAED,QAAI,CAAC,WAAW;AACZ,UAAI,aAAa;AACb,eAAO,KAAK,0BAA0B,OAAO,SAAS;AACtD;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,0BAA0B,MAAM,SAAS;AAAA,MAC/D;AAAA,IACJ;AAUD,WAAO;AAAA,EACV;AAAA,EAED,aAAa,kBAAkB,QAAQ,cAAc,OAAO,aAAa,MAAM;AAC3E,QAAI,YAAY;AAChB,QAAI,CAAC,WAAW;AACZ,YAAM,OAAO,MAAM,0BAA0B,MAAM,SAAS;AAAA,IAC/D;AACD,QAAI,qBAAqB,WAAW;AAChC,aAAO;AAAA,IACV;AAED,QAAI,UAAU,UAAU;AACpB,kBAAY,UAAU;AAAA,IACzB;AACD,QAAI,UAAU,MAAM;AAChB,kBAAY,UAAU;AAAA,IACzB;AAED,QAAI,qBAAqB,WAAW;AAChC,aAAO;AAAA,IACV;AACD,QAAI,iBAAgB,aAAa,SAAS,GAAG;AACzC,kBAAY,MAAM,SAAS,SAAS;AAAA,IAChD,OAAe;AACH,UAAI,KAAK,OAAO,IAAI,SAAS,GAAG;AAC5B,oBAAY,KAAK,OAAO,IAAI,SAAS;AAAA,MACrD,WAAuB,CAAC,cAAc,KAAK,OAAO,QAAQ,SAAS,GAAG;AACtD,oBAAY,KAAK,OAAO,QAAQ,SAAS;AAAA,MAC5C;AAAA,IACJ;AAED,QAAI,CAAC,WAAW;AACZ,UAAI,aAAa;AACb,eAAO,KAAK,0BAA0B,OAAO,SAAS;AACtD;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,0BAA0B,MAAM,SAAS;AAAA,MAC/D;AAAA,IACJ;AAED,QAAI,EAAE,qBAAqB,YAAY;AACnC,UAAI,aAAa;AACb,eAAO,KAAK,qBAAqB,OAAO,SAAS;AACjD;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,qBAAqB,MAAM,SAAS;AAAA,MAC1D;AAAA,IACJ;AACD,WAAO;AAAA,EACV;AAAA,EAED,aAAa,eAAe,QAAQ,cAAc,OAAO,aAAa,MAAM;AACxE,QAAI,YAAY;AAChB,QAAI,CAAC,WAAW;AACZ,YAAM,OAAO,MAAM,uBAAuB,MAAM,SAAS;AAAA,IAC5D;AACD,QAAI,qBAAqB,QAAQ;AAC7B,aAAO;AAAA,IACV;AAED,QAAI,UAAU,UAAU;AACpB,kBAAY,UAAU;AAAA,IACzB;AACD,QAAI,UAAU,MAAM;AAChB,kBAAY,UAAU;AAAA,IACzB;AAED,QAAI,qBAAqB,QAAQ;AAC7B,aAAO;AAAA,IACV;AACD,QAAI,iBAAgB,aAAa,SAAS,GAAG;AACzC,kBAAY,MAAM,SAAS,SAAS;AAAA,IAChD,OAAe;AACH,UAAI,KAAK,QAAQ,IAAI,SAAS,GAAG;AAC7B,oBAAY,KAAK,QAAQ,IAAI,SAAS;AAAA,MACtD,WAAuB,CAAC,cAAc,KAAK,QAAQ,QAAQ,SAAS,GAAG;AACvD,oBAAY,KAAK,QAAQ,QAAQ,SAAS;AAAA,MAC7C;AAAA,IACJ;AACD,QAAI,CAAC,WAAW;AACZ,UAAI,aAAa;AACb,eAAO,KAAK,uBAAuB,OAAO,SAAS;AACnD;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,uBAAuB,MAAM,SAAS;AAAA,MAC5D;AAAA,IACJ;AAED,QAAI,EAAE,qBAAqB,SAAS;AAChC,UAAI,aAAa;AACb,eAAO,KAAK,kBAAkB,OAAO,SAAS;AAC9C;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,kBAAkB,MAAM,SAAS;AAAA,MACvD;AAAA,IACJ;AACD,WAAO;AAAA,EACV;AAAA,EAED,OAAO,cAAc,QAAQ,cAAc,OAAO,aAAa,MAAM;AACjE,QAAI,YAAY;AAChB,QAAI,CAAC,WAAW;AACZ,YAAM,OAAO,MAAM,uBAAuB,MAAM,SAAS;AAAA,IAC5D;AACD,QAAI,qBAAqB,QAAQ;AAC7B,aAAO;AAAA,IACV;AAED,QAAI,UAAU,UAAU;AACpB,kBAAY,UAAU;AAAA,IACzB;AACD,QAAI,UAAU,MAAM;AAChB,kBAAY,UAAU;AAAA,IACzB;AAED,QAAI,qBAAqB,QAAQ;AAC7B,aAAO;AAAA,IACV;AACD,QAAI,iBAAgB,aAAa,SAAS,GAAG;AACzC,kBAAY,aAAa,SAAS;AAAA,IAC9C,OAAe;AACH,UAAI,KAAK,QAAQ,IAAI,SAAS,GAAG;AAC7B,oBAAY,KAAK,QAAQ,IAAI,SAAS;AAAA,MACtD,WAAuB,CAAC,cAAc,KAAK,QAAQ,QAAQ,SAAS,GAAG;AACvD,oBAAY,KAAK,QAAQ,QAAQ,SAAS;AAAA,MAC7C;AAAA,IACJ;AACD,QAAI,CAAC,WAAW;AACZ,UAAI,aAAa;AACb,eAAO,KAAK,uBAAuB,OAAO,SAAS;AACnD;AAAA,MAChB,OAAmB;AACH,cAAM,OAAO,MAAM,uBAAuB,MAAM,SAAS;AAAA,MAC5D;AAAA,IACJ;AAUD,WAAO;AAAA,EACV;AACL;AA9jC6B;AAAtB,IAAM,kBAAN;ACOA,MAAM,+BAAN,MAAM,qCAAoC,OAAO;AAAA,EACpD,YAAY,gBAAgB,WAAW,EAAE,kBAAkB,KAAM,IAAG,IAAI;AAEpE,QAAI,oBAAoB,eAAe;AAEvC,QAAI,kBAAkB,UAAU;AAChC,QAAI,aAAa,KAAK,OAAO;AAE7B,QAAI,cAAc;AAElB,QAAI,mBAAmB;AAEvB,QAAI,eAAe,UAAU,GAAG;AAC5B,eAAS,IAAI,GAAG,IAAI,mBAAmB,KAAK;AACxC,4BAAoB,kBAAkB,eAAe,CAAC,EAAE,SAAS,EAAE,KAAK,eAAe,CAAC,EAAE,SAAS,KAAK;AAAA,MAC3G;AACD,yBAAmB,uDAAuD,gBAAgB;AAAA,IACtG,OAAe;AACH,yBAAmB,6BAA6B,eAAe,CAAC,EAAE,SAAS,EAAE,+DAA+D,eAAe,CAAC,EAAE,SAAS,EAAE;AAAA,IAC5K;AAED,aAAS,WAAW,QAAQ;AACxB,UAAI,OAAO,WAAW;AAAU,eAAO,OAAO,CAAC,EAAE,gBAAgB,OAAO,UAAU,CAAC;AACnF,aAAO;AAAA,IACV;AAHQ;AAKT,QAAI,iBAAiB;AACrB,aAAS,IAAI,GAAG,IAAI,iBAAiB,KAAK;AACtC,wBAAkB;AAAA;AAAA,yBAEL,WAAW,UAAU,CAAC,CAAC,CAAC;AAAA;AAAA,oDAEG,UAAU,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,IAIvD;AAED,QAAI,aAAa,CAAA;AACjB,YAAQ,YAAU;AAAA,MACd,KAAK,SAAS;AACV,qBAAa,CAAC,WAAW,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,KAAK;AACtF;AAAA,MACH;AAAA,MACD,KAAK,SAAS;AACV,iBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,qBAAW,KAAK,CAAC;AAAA,QACpB;AACD;AAAA,MACH;AAAA,IACJ;AAED,QAAI,mBAAmB,WAAW;AAClC,QAAI,mBAAmB;AACvB,aAAS,IAAI,GAAG,IAAI,kBAAkB,KAAK;AACvC,0BAAoB;AAAA;AAAA,yBAEP,WAAW,WAAW,CAAC,CAAC,CAAC;AAAA;AAAA,oDAEE,CAAC,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,IAI9C;AAGD,QAAI,aAAa,CAAA;AACjB,QAAI,mBAAmB;AACvB,YAAQ,YAAU;AAAA,MACd,KAAK,SAAS;AACV,iBAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AACzB,qBAAW,KAAK,CAAC;AAAA,QACpB;AACD;AAAA,MACH;AAAA,MACD,KAAK,SAAS;AACV,qBAAa,CAAC,UAAU,YAAY,QAAQ,YAAY,aAAa,UAAU;AAC/E,2BAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQnB;AAAA,MACH;AAAA,IAIJ;AAED,QAAI,mBAAmB,WAAW;AAClC,aAAS,IAAI,GAAG,IAAI,kBAAkB,KAAK;AACvC,0BAAoB;AAAA;AAAA,yBAEP,WAAW,WAAW,CAAC,CAAC,CAAC;AAAA;AAAA,oDAEE,WAAW,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,IAIxD;AAED,QAAI,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAMI,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAOhB,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,0BAKd,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAKhB,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAclC,QAAI,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBb;AAAA,MACI;AAAA,QACI,OAAO;AAAA,QACP,SAAS,UAAU;AAAA,QACnB,SAAS;AAAA,UACL,SAAS;AAAA,YACL,MAAM;AAAA,YACN,OAAO;AAAA,YACP,UAAU,OAAO,SAAS;AACtB,kBAAI,WAAW,KAAK,KAAK,iCAAiC,EAAE,IAAG;AAC/D,kBAAI,cAAc,KAAK,KAAK,cAAc,EAAE,KAAK,SAAS;AAC1D,kBAAI,gBAAgB,cACd,MAAM,KAAK,KAAK,CAAC,EAAE,iBAAiB,2BAA2B,CAAC,EAAE;AAAA,gBAC9D,CAAC,aAAa,SAAS;AAAA,cAC1B,IACD;AACN,kBAAI,eAAe,KAAK,KAAK,eAAe,EAAE,KAAK,SAAS;AAC5D,kBAAI,sBAAsB,eACpB,MAAM,KAAK,KAAK,CAAC,EAAE,iBAAiB,6BAA6B,CAAC,EAAE;AAAA,gBAAI,CAAC,aACrE,SAAS,SAAS,KAAK;AAAA,cAC1B,IACD,MAAM,KAAK,EAAE,QAAQ,GAAI,GAAE,CAAC,GAAG,MAAM,CAAC;AAC5C,kBAAI,eAAe,KAAK,KAAK,eAAe,EAAE,KAAK,SAAS;AAC5D,kBAAI,mBAAmB,eACjB,MAAM,KAAK,KAAK,CAAC,EAAE,iBAAiB,6BAA6B,CAAC,EAAE;AAAA,gBAChE,CAAC,aAAa,SAAS;AAAA,cAC1B,IACD;AACN,kBAAI,qBAAqB,KAAK,KAAK,oBAAoB;AACvD,kBAAI,cAAc,mBACb,IAAI,WAAY;AACb,uBAAO;AAAA,kBACH,YAAY,EAAE,IAAI,EAAE,KAAK,aAAa,EAAE,IAAK,EAAC,KAAM;AAAA,kBACpD,mBAAmB,EAAE,IAAI,EAAE,KAAK,oBAAoB,EAAE,KAAK,SAAS;AAAA,gBAC5G;AAAA,cACA,CAAiC,EACA;AACL,kBAAI,uBAAuB,KAAK,KAAK,sBAAsB;AAC3D,kBAAI,gBAAgB,qBACf,IAAI,WAAY;AACb,uBAAO;AAAA,kBACH,YAAY,EAAE,IAAI,EAAE,KAAK,aAAa,EAAE,IAAK,EAAC,KAAM;AAAA,kBACpD,oBAAoB,EAAE,IAAI,EACrB,KAAK,qBAAqB,EAC1B,IAAK,EACL,KAAM,EACN,MAAM,GAAG,EACT,IAAI,CAAC,QAAQ,IAAI,KAAI,CAAE;AAAA,gBACpE;AAAA,cACA,CAAiC,EACA;AAEL,oBAAM,SAAS,MAAM,gBAAgB,6BAA6B,UAAU,OAAO,KAAK;AACxF,kBAAI,aAAa;AAEjB,kBAAI,MAAM;AAAA,gBACN,MAAM,WAAW,SAAS;AAAA,gBAC1B,OAAO,WAAW,SAAS,WAAW,SAAS;AAAA,cAC/E;AAE4B,qBAAO;AAAA,gBACH,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,qCAAqC,GAAG;AAAA,gBAC/E;AAAA,cAChC;AAC4B,oBAAMA,YAAW,MAAM,KAAK;AAAA,gBACxB;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,cAChC;AAC4B,qBAAO;AAAA,gBACH,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,wCAAwC,GAAG;AAAA,gBAClF;AAAA,cAChC;AAC4B,qBAAOA;AAAA,YACV;AAAA,YACD,QAAQ;AAAA,UACX;AAAA,UACD,QAAQ;AAAA,YACJ,MAAM;AAAA,YACN,OAAO;AAAA,YACP,UAAU,MAAM;AAAA,YAAE;AAAA,YAClB,QAAQ;AAAA,UACX;AAAA,QACJ;AAAA,QACD,SAAS;AAAA,MACZ;AAAA,MACD;AAAA,QACI,OAAO;AAAA,QACP,WAAW;AAAA,MACd;AAAA,IACb;AAAA,EACK;AAAA,EAED,kBAAkB,MAAM;AAepB,SAAK,KAAK,YAAY,EAAE,GAAG,SAAS,YAAY;AAC5C,UAAI,qBAAqB,KAAK,KAAK,mBAAmB;AACtD,UAAI,uBAAuB,KAAK,KAAK,qBAAqB;AAC1D,UAAI,uBAAuB,KAAK,KAAK,qBAAqB;AAC1D,UAAI,gBAAgB,mBAAmB,IAAI,oBAAoB,EAAE,IAAI,oBAAoB;AAEzF,UAAI,iBAAiB,cAAc,UAAU,KAAK,CAAC,aAAa,CAAC,SAAS,OAAO;AAEjF,oBAAc,KAAK,WAAW,cAAc;AAAA,IACxD,CAAS;AAED,SAAK,KAAK,cAAc,EAAE,GAAG,UAAU,CAAC,MAAM;AAC1C,UAAI,YAAY,EAAE,OAAO;AACzB,UAAI,WAAW;AACX,aAAK,KAAK,kBAAkB,EAAE,IAAI,WAAW,MAAM;AAAA,MACnE,OAAmB;AACH,aAAK,KAAK,kBAAkB,EAAE,IAAI,WAAW,MAAM;AAAA,MACtD;AAAA,IACb,CAAS;AAED,SAAK,KAAK,eAAe,EAAE,GAAG,UAAU,CAAC,MAAM;AAC3C,UAAI,YAAY,EAAE,OAAO;AACzB,UAAI,WAAW;AACX,aAAK,KAAK,oBAAoB,EAAE,IAAI,WAAW,MAAM;AAAA,MACrE,OAAmB;AACH,aAAK,KAAK,oBAAoB,EAAE,IAAI,WAAW,MAAM;AAAA,MACxD;AAAA,IACb,CAAS;AAED,SAAK,KAAK,eAAe,EAAE,GAAG,UAAU,CAAC,MAAM;AAC3C,UAAI,YAAY,EAAE,OAAO;AACzB,UAAI,WAAW;AACX,aAAK,KAAK,gBAAgB,EAAE,IAAI,WAAW,MAAM;AAAA,MACjE,OAAmB;AACH,aAAK,KAAK,gBAAgB,EAAE,IAAI,WAAW,MAAM;AAAA,MACpD;AAAA,IACb,CAAS;AAED,SAAK,KAAK,kBAAkB,EAAE,GAAG,SAAS,MAAM;AAC5C,YAAM,sBAAsB,KAAK;AACjC,WAAK,KAAK,gBAAgB,EAAE,OAAO,mBAAmB;AAAA,IAClE,CAAS;AAED,SAAK,KAAK,gBAAgB,EAAE,GAAG,SAAS,MAAM;AAC1C,YAAM,oBAAoB,KAAK;AAC/B,WAAK,KAAK,cAAc,EAAE,OAAO,iBAAiB;AAAA,IAC9D,CAAS;AAED,UAAM,kBAAkB,IAAI;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,eAAe,KAAK,MAAM;AACtB,QAAI,QAAQ,KAAK,MAAM,GAAG;AAC1B,QAAI,UAAU;AAEd,aAAS,QAAQ,OAAO;AACpB,UAAI,QAAQ,IAAI,MAAM,QAAW;AAC7B,kBAAU,QAAQ,IAAI;AAAA,MACtC,OAAmB;AACH,eAAO;AAAA,MACV;AAAA,IACJ;AACD,WAAO;AAAA,EACV;AAAA,EAED,4BAA4B;AACxB,UAAM,UAAU,SAAS,cAAc,KAAK;AAC5C,YAAQ,YAAY;AACpB,YAAQ,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcpB,WAAO;AAAA,EACV;AAAA,EAED,0BAA0B;AACtB,UAAM,UAAU,SAAS,cAAc,KAAK;AAC5C,YAAQ,YAAY;AACpB,YAAQ,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASpB,WAAO;AAAA,EACV;AAAA,EAED,wBAAwB,QAAQ,UAAU;AACtC,WAAO,SAAS,YAAa,EAAC,SAAS,OAAO,YAAW,CAAE;AAAA,EAC9D;AAAA,EAED,MAAM,qBAAqB,YAAYC,WAAU,IAAI;AAEjD,UAAMC,WAAU,MAAM,WAAW,MAAM,IAAI,CAAC,GAAG,MAAM;AACjD,aAAO,IAAI,kBAAkB;AAC7B,aAAO,IAAI,CAAC;AACZ,aAAO,IAAI,mBAAmB;AAC9B,aAAO,IAAI,CAAC;AACZ,aAAO;AAAA,QACH,MAAM,EAAE;AAAA,QACR,MAAM,MAAM,mBAAmB;AAAA,QAC/B,YAAY,WAAW;AAAA,QACvB,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE;AAAA,QAC1B,KAAK,EAAE,aAAa,EAAE,OAAO,OAAO,UAAU;AAAA,QAC9C,QAAQ;AAAA,QACR,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;AAAA,QACpB,oBAAoB,GAAG,WAAW,SAAS,WAAW,IAAI,WAAW,SAAS,IAAI;AAAA,QAClF,OAAO;AAAA,MACvB;AAAA,IACA,CAAS;AACD,WAAO,MAAM,KAAK,yBAAyB,WAAW,SAAS,OAAOA,UAAS,KAAKA,SAAQ,MAAM,IAAID,QAAO;AAAA,EAChH;AAAA,EAED,MAAM,eACF,eACA,aACA,eACA,qBACA,cACA,kBACA,iBACA,YACAA,WAAU,CAAE,GACd;AAEE,UAAM,UAAU,MAAM,WAAW;AAEjC,UAAM,kBAAkB,QAAQ,OAAO,CAAC,UAAU;AAC9C,UAAI,qBAAqB,cAAc,MAAM,CAAC,EAAE,YAAY,yBAAyB;AACjF,YAAI,kBAAkB,KAAK,eAAe,OAAO,UAAU;AAC3D,YAAI,kBACA,WAAW,WAAW,KACrB,mBAAmB,SAAS,KACzB,oBAAoB,UACpB,mBAAmB,IAAI,MAAM,EAAE,SAAS,OAAO,eAAe,CAAC;AACvE,eAAO;AAAA,MACvB,CAAa;AAED,UAAI,kBAAkB,YAAY,MAAM,CAAC,EAAE,YAAY,wBAAwB;AAC3E,eACI,WAAW,WAAW,MACrB,oBACK,CAAC,KAAK,wBAAwB,YAAY,MAAM,IAAI,IACpD,KAAK,wBAAwB,YAAY,MAAM,IAAI;AAAA,MAE7E,CAAa;AAED,UAAI,gBAAgB,cAAc,SAAS,MAAM,IAAI;AACrD,UAAI,kBACC,MAAM,OAAO,SAAS,WAAW,MAAM,SAAS,WACjD,oBAAoB,SAAS,MAAM,OAAO,KAAK;AACnD,UAAI,cAAc,CAAC,gBAAiB,MAAM,OAAO,UAAU,iBAAiB,SAAS,MAAM,OAAO,MAAM;AAExG,aAAO,sBAAsB,mBAAmB,iBAAiB,mBAAmB;AAAA,IAChG,CAAS;AAED,QAAI,gBAAgB,WAAW,GAAG;AAC9B,aAAO,OAAO,MAAM,0DAA0D,IAAI;AAAA,IACrF;AACD,UAAMC,WAAU,gBAAgB,IAAI,CAAC,OAAO,MAAM;AAC9C,aAAO,MAAM,kBAAkB;AAC/B,aAAO,MAAM,KAAK;AAClB,aAAO,MAAM,mBAAmB;AAChC,aAAO,MAAM,CAAC;AAEd,aAAO;AAAA,QACH,MAAM,MAAM;AAAA,QACZ,MAAM,MAAM,mBAAmB;AAAA,QAC/B,YAAY,WAAW;AAAA,QACvB,UAAU,MAAM;AAAA,QAChB,KAAK,MAAM,aAAa,MAAM,OAAO,OAAO,UAAU;AAAA,QACtD,QAAQ,kBAAkB,gBAAgB,IAAI,IAAI;AAAA,QAClD,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;AAAA,QACpB,oBAAoB,GAAG,WAAW,SAAS,WAAW,IAAI,WAAW,SAAS,IAAI;AAAA,QAClF,OAAO;AAAA,MACvB;AAAA,IACA,CAAS;AA4BD,WAAO,MAAM,KAAK,yBAAyB,WAAW,SAAS,OAAOA,UAAS,KAAKA,SAAQ,MAAM,IAAID,QAAO;AAAA,EAChH;AAAA,EAED,MAAM,yBAAyB,gBAAgBC,UAAS,SAASD,WAAU,CAAA,GAAI;AAC3E,IAAAA,SAAQ,cAAcA,SAAQ,eAAe;AAC7C,UAAM,YAAY,CAAA;AAClB,UAAMD,YAAW,MAAM,UAAU;AAAA,MAC7B;AAAA,QACI,MAAM,iBAAiB;AAAA,QACvB,aAAa,mDAAmD,cAAc;AAAA,QAC9E,SAASE;AAAA,QACT,SAAS,WAAW,KAAKA,SAAQ,MAAM;AAAA,MAC1C;AAAA,MACDD;AAAA,IACZ;AACQ,cAAU,KAAKD,SAAQ;AACvB,WAAO;AAAA,EACV;AACL;AAzgBwD;AAAjD,IAAM,8BAAN;AC2CA,SAAS,cAAc,KAAK;AAG/B,MAAI,QAAQ,QAAQ,QAAQ,QAAW;AACnC,WAAO;AAAA,EACV;AACD,MAAI,aAAa,GAAG,GAAG;AACnB,WAAO;AAAA,EACV;AACD,MAAI,eAAe,UAAU,OAAO,KAAK,GAAG,EAAE,WAAW,GAAG;AACxD,WAAO;AAAA,EACV;AACD,MAAI,eAAe,SAAS,IAAI,WAAW,GAAG;AAC1C,WAAO;AAAA,EACV;AACD,MAAI,OAAO,OAAO,KAAK,GAAG,EAAE,WAAW,GAAG;AACtC,WAAO;AAAA,EACV;AACD,SAAO;AACX;AAnBgB;AAqBT,SAAS,aAAa,UAAU;AACnC,SAAO,CAAC,MAAM,QAAQ,KAAK,OAAO,aAAa,YAAY,SAAS,QAAQ;AAChF;AAFgB;AAIT,SAAS,cAAc,WAAW;AACrC,SAAO,OAAO,SAAS,MAAM,UAAU,OAAO,SAAS,MAAM;AACjE;AAFgB;AAIT,SAAS,wBAAwB,WAAW;AAC/C,SAAO,cAAc,SAAS,IAAI,YAAY;AAClD;AAFgB;AAIT,SAAS,aAAa,QAAQ,OAAO,OAAO;AAC/C,SAAO,OAAO,MAAM,OAAO,QAAQ,KAAK,IAAI,GAAG,OAAO,YAAY,KAAK,CAAC;AAC5E;AAFgB;AAYT,SAAS,aAAa,KAAK;AAC9B,MAAI,CAAC,KAAK;AACN,WAAO;EACV;AACD,MAAI,MAAM,CAAA;AACV,MAAI,OAAO,QAAQ,YAAY,eAAe,QAAQ;AAClD,UAAM,IAAI,MAAM,GAAG;AAAA,EAC3B,WAAe,IAAI,gBAAgB,OAAO;AAClC,UAAM;AAAA,EACd,OAAW;AACH,UAAM,CAAC,GAAG;AAAA,EACb;AACD,SAAO;AACX;AAbgB;AAoBT,SAAS,YAAY,MAAM;AAC9B,UAAQ,MAAI;AAAA,IACR,KAAK;AAAA,IACL,KAAK,QAAQ;AACT,aAAO;AAAA,IACV;AAAA,IACD,KAAK;AAAA,IACL,KAAK,cAAc;AACf,aAAO;AAAA,IACV;AAAA,IACD,KAAK;AAAA,IACL,KAAK,UAAU;AACX,aAAO;AAAA,IACV;AAAA,IACD,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK,aAAa;AACd,aAAO;AAAA,IACV;AAAA,IACD,KAAK;AAAA,IACL,KAAK,YAAY;AACb,aAAO;AAAA,IACV;AAAA,EACJ;AACL;AAxBgB;AA+BT,eAAe,qBAAqB,0BAA0B;AACjE,MAAI,0BAA0B;AAC1B,QAAI,aAAa,wBAAwB;AAAG;AAAA,aAEjC,OAAO,wBAAwB,MAAM,KAAK;AACjD,iCAA2B;AAAA,IACvC,OAAe;AACH,UAAI,WAAW;AACf,UAAI;AACA,mBAAW,OAAO,wBAAwB;AAAA,MAC1D,SAAqB,GAAG;AAAA,MAAE;AACd,UAAI,YAAY,aAAa,QAAQ,GAAG;AACpC,mCAA2B;AAAA,MAC3C,OAAmB;AACH,mCAA2B,MAAM,iBAAiB,QAAQ,0BAA0B,CAAC;AAAA,MACxF;AAAA,IACJ;AAAA,EACT,OAAW;AACH,+BAA2B;AAAA,EAC9B;AACD,SAAO;AACX;AArBsB;AA4Bf,SAAS,yBAAyB,0BAA0B;AAC/D,MAAI,0BAA0B;AAC1B,QAAI,aAAa,wBAAwB;AAAG;AAAA,aAEjC,OAAO,wBAAwB,MAAM,KAAK;AACjD,iCAA2B;AAAA,IACvC,OAAe;AACH,UAAI,WAAW;AACf,UAAI;AACA,mBAAW,OAAO,wBAAwB;AAAA,MAC1D,SAAqB,GAAG;AAAA,MAAE;AACd,UAAI,YAAY,aAAa,QAAQ,GAAG;AACpC,mCAA2B;AAAA,MAC3C,OAAmB;AACH,mCAA2B,iBAAiB,YAAY,0BAA0B,CAAC;AAAA,MACtF;AAAA,IACJ;AAAA,EACT,OAAW;AACH,+BAA2B;AAAA,EAC9B;AACD,SAAO;AACX;AArBgB;ACzKT,MAAM,YAAN,MAAM,UAAS;AAAA,EAClB,OAAO,sBAAsB,UAAU,UAAU;AAC7C,eAAW,YAAY,KAAK,SAAS,IAAI,QAAQ,UAAU;AAC3D,QAAI,OAAO,YAAY,UAAU,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,YAAY,EAAE,CAAC,MAAM,QAAQ;AAC1G,iBAAW;AAAA,IACd;AAED,YAAQ,UAAQ;AAAA,MACZ,KAAK;AACD,iBAAS,QAAQ;AAAA,MAGrB,KAAK;AACD,iBAAS,UAAU,CAAC,KAAK,MAAM,KAAK,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;AACrD;AAAA,MACJ,KAAK;AACD,iBAAS,UAAU,CAAC,KAAK,MAAM;AAC/B;AAAA,IACP;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,aAAa,uBAAuB,gBAAgB,YAAY;AAC5D,UAAM,SAAS,MAAM,gBAAgB,6BAA6B,gBAAgB,MAAM,KAAK;AAC7F,UAAM,aAAa;AACnB,QAAI,YAAY;AACZ,YAAM,QAAQ,WAAW,MAAM,QAAQ,UAAU;AACjD,UAAI,OAAO;AACP,eAAO,MAAM,WAAW,YAAY,MAAM,GAAG;AAAA,MAChD;AAAA,IACb,OAAe;AACH,cAAQ,gBAAc;AAAA,QAClB,KAAK;AACD,iBAAO,KAAK,OAAO,QAAQ,UAAU;AAAA,QACzC,KAAK;AACD,iBAAO,KAAK,OAAO,QAAQ,UAAU;AAAA,QACzC,KAAK;AACD,iBAAO,KAAK,MAAM,QAAQ,UAAU;AAAA,QACxC,KAAK;AACD,iBAAO,KAAK,QAAQ,QAAQ,UAAU;AAAA,QAC1C,KAAK;AACD,iBAAO,KAAK,UAAU,QAAQ,UAAU;AAAA,QAC5C,KAAK;AACD,iBAAO,KAAK,OAAO,QAAQ,UAAU;AAAA,QACzC,KAAK;AACD,iBAAO,KAAK,OAAO,QAAQ,UAAU;AAAA,QACzC,KAAK;AACD,iBAAO,KAAK,MAAM,QAAQ,UAAU;AAAA,MAC3C;AAAA,IACJ;AAAA,EACJ;AAAA,EAED,aAAa,qBAAqB,gBAAgB,UAAU;AACxD,UAAM,SAAS,MAAM,gBAAgB,6BAA6B,gBAAgB,OAAO,KAAK;AAC9F,WAAO,MAAM,QAAQ,YAAY,QAAQ;AAAA,EAC5C;AAAA,EAED,OAAO,wBAAwB,qBAAqB;AAChD,UAAM,QAAQ,oBAAoB,MAAM,GAAG;AAC3C,UAAM,WAAW,MAAM,IAAK,EAAC,KAAI;AACjC,UAAM,iBAAiB,MAAM,KAAK,GAAG,EAAE,KAAI;AAC3C,WAAO;AAAA,MACH;AAAA,MACA;AAAA,IACZ;AAAA,EACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,aAAa,sBAAsB,QAAQ;AACvC,QAAI,YAAY;AAAA,MACZ;AAAA,MACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,4BAA4B;AAAA,IAC/E,IACK,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,4BAA4B,EAAE,IAClG,OAAO;AACb,WAAO,UAAS,uBAAuB,OAAO,YAAY,SAAS;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,aAAa,4BAA4B,YAAY;AACjD,UAAM,SAAS,MAAM,gBAAgB,6BAA6B,YAAY,MAAM,KAAK;AACzF,UAAMD,QAAO;AACb,QAAI,CAACA,OAAM;AACP;AAAA,IACH;AACD,UAAM,OAAOA,MAAK,MAAM;AACxB,QAAI,SAAS,GAAG;AACZ,aAAO,KAAK,cAAcA,MAAK,KAAK,cAAc,IAAI;AACtD;AAAA,IACH;AACD,UAAM,cAAc,KAAK,MAAM,KAAK,OAAM,IAAK,IAAI;AACnD,UAAM,aAAaA,MAAK,MAAM,SAAS,WAAW;AAClD,WAAOA,MAAK,YAAY,WAAW,GAAG;AAAA,EACzC;AAAA,EAED,OAAO,oBAAoB,YAAY;AACnC,YAAQ,YAAU;AAAA,MACd,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX;AACI,eAAO;AAAA,IACd;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBD,aAAa,cAAc,aAAaE,WAAU,IAAI;AAClD,QAAI,aAAa,CAAA;AACjB,QAAI,CAACA,UAAS;AACV,MAAAA,WAAU,CAAA;AAAA,IACb;AAED,QAAI,cAAc;AAClB,QAAIA,UAAS,aAAa;AACtB,UAAI,aAAaA,UAAS,WAAW,GAAG;AACpC,sBAAcA,UAAS;AAAA,MACvC,OAAmB;AACH,sBAAc,MAAM,iBAAiB,QAAQA,UAAS,WAAW;AAAA,MACpE;AAAA,IACb,OAAe;AACH,oBAAc,MAAM,iBAAiB,YAAY,WAAW;AAAA,IAC/D;AAED,eAAW,cAAc;AAEzB,QAAI,KACAA,UAAS,MACT,YAAY,aAAa,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,oBAAoB,EAAE,KAC/F;AAEJ,QAAI,IAAI;AACJ,UAAI,aAAa,EAAE;AAAG;AAAA,eAEX,OAAO,EAAE,MAAM,KAAK;AAC3B,aAAK;AAAA,MACrB,OAAmB;AACH,YAAI,MAAM;AACV,YAAI;AACA,gBAAM,OAAO,EAAE;AAAA,QACnC,SAAyB,GAAG;AAAA,QAAE;AACd,YAAI,OAAO,aAAa,GAAG,GAAG;AAC1B,eAAK;AAAA,QACzB,OAAuB;AACH,eAAK,MAAM,iBAAiB,QAAQ,EAAE;AAAA,QACzC;AAAA,MACJ;AAAA,IACJ;AACD,eAAW,KAAK;AAEhB,eAAW,QACPA,UAAS,SACT,YAAY,aAAa,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,uBAAuB,EAAE,KAClG;AAEJ,eAAW,SAAS,aAAa,WAAW,KAAK;AAEjD,eAAW,eAAe,cAAcA,UAAS,YAAY,IACvD,OAAOA,UAAS,YAAY,MAAM,SAC9B,OACA,QACJ;AAEN,eAAW,YAAY,cAAcA,UAAS,SAAS,IACjD,OAAOA,UAAS,SAAS,MAAM,SAC3B,OACA,QACJ;AAEN,QAAI,aAAaA,UAAS,aAAaA,SAAQ,aAAa;AAC5D,QAAI,CAAC,YAAY;AACb,mBAAaA,UAAS,aAAaA,SAAQ,aAAa;AAAA,IAC3D;AACD,eAAW,aAAa;AAExB,eAAW,YAAYA,UAAS,aAAa,aAAaA,SAAQ,SAAS,IAAI,OAAOA,SAAQ,SAAS,IAAI;AAE3G,QAAI,WAAWA,UAAS,YAAY;AACpC,QACI,OAAO,YAAY,aAAa,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,YAAY,EAAE,CAAC,MAAM,QACvG;AACE,iBAAW;AAAA,IACd;AACD,eAAW,WAAW,YAAY,QAAQ;AAE1C,QAAI,WAAW,wBAAwBA,UAAS,QAAQ;AACxD,QAAI,aAAa,MAAM;AACnB,iBAAW;AAAA,QACP,YAAY,aAAa,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,uBAAuB,EAAE;AAAA,MAClH;AAAA,IACS;AACD,QAAI,aAAa,MAAM;AACnB,iBAAW;AAAA,IACd;AAED,eAAW,WAAW,cAAc,QAAQ,IAAK,OAAO,QAAQ,MAAM,SAAS,OAAO,QAAS;AAE/F,QAAI,sBAAsB,wBAAwBA,UAAS,mBAAmB;AAC9E,QAAI,wBAAwB,MAAM;AAC9B,4BAAsB;AAAA,QAClB;AAAA,UACI;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,oCAAoC;AAAA,QACvF;AAAA,MACjB;AAAA,IACS;AACD,QAAI,wBAAwB,MAAM;AAC9B,4BAAsB;AAAA,IACzB;AAED,eAAW,sBAAsB,cAAc,mBAAmB,IAC5D,OAAO,mBAAmB,MAAM,SAC5B,OACA,QACJ;AAEN,eAAW,aAAa,cAAcA,UAAS,UAAU,IACnD,OAAOA,UAAS,UAAU,MAAM,SAC5B,OACA,QACJ;AAEN,eAAW,iBAAiB,cAAcA,UAAS,cAAc,IAC3D,OAAOA,UAAS,cAAc,MAAM,SAChC,OACA,QACJ;AAEN,eAAW,cAAc,cAAcA,UAAS,WAAW,IACrD,OAAOA,UAAS,WAAW,MAAM,SAC7B,OACA,QACJ;AAEN,QAAI,gBAAgB,wBAAwBA,UAAS,aAAa;AAClE,QAAI,kBAAkB,MAAM;AACxB,sBAAgB;AAAA,QACZ,YAAY,aAAa,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,sBAAsB,EAAE;AAAA,MACjH;AAAA,IACS;AACD,QAAI,kBAAkB,MAAM;AACxB,sBAAgB;AAAA,IACnB;AAED,eAAW,gBAAgB,cAAc,aAAa,IAChD,OAAO,aAAa,MAAM,SACtB,OACA,QACJ;AAEN,QAAI,eAAe,wBAAwBA,UAAS,YAAY;AAChE,QAAI,iBAAiB,MAAM;AACvB,qBAAe;AAAA,QACX,YAAY,aAAa,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,sBAAsB,EAAE;AAAA,MACjH;AAAA,IACS;AACD,QAAI,iBAAiB,MAAM;AACvB,qBAAe;AAAA,IAClB;AAED,eAAW,eAAe,cAAc,YAAY,IAC9C,OAAO,YAAY,MAAM,SACrB,OACA,QACJ;AAEN,eAAW,YAAY,cAAcA,SAAQ,SAAS,IAChD,OAAOA,SAAQ,SAAS,MAAM,SAC1B,OACA,QACJ;AACN,eAAW,OAAOA,SAAQ,OAAO,OAAOA,SAAQ,IAAI,IAAI;AAExD,QAAI,iBAAiB,UAAS,gBAAgB,aAAaA,UAAS,eAAe;AACnF,QAAI,CAAC,UAAU,MAAM,SAAS,cAAc,GAAG;AAC3C,uBAAiB;AAAA,IACpB;AACD,QAAI,mBAAmB,QAAQ;AAC3B,uBAAiB;AAAA,IACpB;AACD,eAAW,kBAAkB;AAE7B,eAAW,8BAA8B,cAAcA,SAAQ,2BAA2B,IACpF,OAAOA,SAAQ,2BAA2B,MAAM,SAC5C,OACA,QACJ;AAEN,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUD,aAAa,cAAc,WAAW,YAAY,WAAW,CAAE,GAAE,WAAW,OAAO;AAC/E,UAAM,eAAe,UAAU,KAAK,CAAC,MAAM,EAAE,KAAK,OAAO,WAAW,EAAE;AACtE,UAAM,WAAW,YAAY,UAAU,KAAK,UAAU,IAAI,uBAAuB,KAAK;AAGtF,QAAI,cAAc;AACd,mBAAa,WAAW,aAAa,WAAW;AAAA,IAE5D,OAAe;AAEH,YAAM,WAAW,KAAK,IAAI,IAAI,MAAM,KAAK,IAAI,IAAI,WAAW,QAAQ,WAAW,MAAM,SAAS,EAAE,IAAI,CAAC;AAErG,UAAI,OAAO;AACX,UAAI,WAAW,QAAQ;AACnB,eAAO,MAAM,mBAAmB;AAAA,MAChD,WAAuB,WAAW,MAAM;AACxB,eAAO,MAAM,mBAAmB;AAAA,MAChD,OAAmB;AACH,eAAO,MAAM,mBAAmB;AAAA,MACnC;AAGD,UAAI,YAAY;AAEhB,gBAAU,KAAK;AAAA,QACX,cAAc,UAAU;AAAA,QACxB,gBAAgB,UAAU;AAAA,QAC1B;AAAA,QACA,MAAM;AAAA,UACF,IAAI,UAAU;AAAA,UACd,KAAK,UAAU;AAAA,UACf,MAAM,UAAU;AAAA,UAChB,KAAK,UAAU,OAAO,UAAU,OAAO;AAAA,UACvC,MAAM,UAAU,QAAQ,UAAU,QAAQ;AAAA,UAC1C,MAAM,WAAW,QAAQ;AAAA,UACzB;AAAA,QACH;AAAA,QACD;AAAA;AAAA,QAEA;AAAA,MAChB,CAAa;AAAA,IACJ;AAED,WAAO;AAAA,EACV;AAAA,EAED,OAAO,kBAAkB,QAAQ;AAC7B,WAAO,QAAQ,SAAS,MAAM,mBAAmB;AAAA,EACpD;AAAA,EAED,OAAO,sBAAsB,QAAQ;AACjC,WAAO,QAAQ,SAAS,MAAM,mBAAmB;AAAA,EACpD;AAAA,EAED,OAAO,wBAAwB,QAAQ;AACnC,WAAO,QAAQ,SAAS,MAAM,mBAAmB;AAAA,EACpD;AAAA,EAED,OAAO,gBAAgB,aAAa,kBAAkB,MAAM,aAAa,OAAO;AAC5E,QAAI,iBAAiB,kBACf,kBACA,YAAY,aAAa,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,cAAc,EAAE;AAC/F,QAAI,YAAY;AACZ,aAAO;AAAA,IACV;AACD,QAAI,CAAC,UAAU,MAAM,SAAS,cAAc,GAAG;AAC3C,uBAAiB;AAAA,IACpB;AACD,QAAI,mBAAmB,QAAQ;AAC3B,uBAAiB;AAAA,IACpB;AACD,WAAO;AAAA,EACV;AAAA,EAED,OAAO,sBAAsB,aAAa,aAAa,MAAM;AACzD,QAAI,uBAAuB,aACrB,aACA,YAAY,aAAa,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,kBAAkB,EAAE;AACnG,QAAI,CAAC,wBAAwB,YAAY,UAAU;AAC/C,6BAAuB,YAAY;AAAA,IACtC;AACD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,aAAa,0BAA0B,aAAa;AAChD,UAAM,QAAQ,MAAM,gBAAgB,kBAAkB,WAAW;AACjE,UAAM,QAAQ,MAAM;AAEpB,UAAM,QAAQ,MAAM,QACf,OAAO,CAAC,WAAW;AAChB,aAAO,CAAC,MAAM,UAAU,MAAM,UAAU,EAAE,SAAS,OAAO,IAAI,KAAK,CAAC,CAAC,OAAO;AAAA,IAC5F,CAAa,EACA,IAAI,CAAC,WAAW;AACb,UAAI,OAAO,SAAS,MAAM,UAAU;AAChC,eAAO,GAAG,OAAO,kBAAkB,IAAI,OAAO,UAAU;AAAA,MAC3D;AACD,aAAO,cAAc,OAAO,kBAAkB,SAAS,OAAO,UAAU;AAAA,IACxF,CAAa;AAEL,QAAI,CAAC,MAAM,QAAQ;AACf,aAAO,KAAK,OAAO,WAAW,GAAG,UAAU,SAAS,+BAA+B,EAAE,GAAG,IAAI;AAC5F,aAAO;AAAA,IACV;AAGD,UAAM,WAAW,MAAM,IAAI,CAAC,SAAS,SAAS,IAAI,CAAC;AACnD,UAAM,WAAW,MAAM,QAAQ,IAAI,QAAQ;AAC3C,UAAM,QAAQ;AAEd,QAAI,CAAC,MAAM,QAAQ;AACf,aAAO,KAAK,OAAO,WAAW,GAAG,UAAU,SAAS,+BAA+B,EAAE,GAAG,IAAI;AAC5F,aAAO;AAAA,IACV;AAED,WAAO;AAAA,EACV;AACL;AA/csB;AAAf,IAAM,WAAN;ACHQ,MAAM,sBAAN,MAAM,oBAAmB;AAAA,EAoBpC,aAAa,4BAA4B;AAAA,EAmBxC;AAAA,EAED,aAAa,mBAAmB,QAAQ;AACpC,QAAI,CAAC,QAAQ;AACT,YAAM,OAAO,MAAM,0BAA0B;AAAA,IAChD;AACD,QAAI,aAAa,MAAM,gBAAgB,6BAA6B,QAAQ,MAAM,KAAK;AACvF,WAAO;AAAA,EAEV;AAAA,EAED,aAAa,kBAAkB,QAAQ;AACnC,QAAI,CAAC,QAAQ;AACT,YAAM,OAAO,MAAM,0BAA0B;AAAA,IAChD;AACD,QAAI,aAAa,MAAM,gBAAgB,4BAA4B,QAAQ,OAAO,KAAK;AACvF,WAAO;AAAA,EAEV;AAAA,EAED,aAAa,2BAA2B,QAAQA,WAAU,EAAE,MAAM,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,GAAE,GAAI;AAChG,QAAI,CAAC,QAAQ;AACT,YAAM,OAAO,MAAM,0BAA0B;AAAA,IAChD;AACD,QAAI,aAAa,MAAM,gBAAgB,6BAA6B,QAAQ,OAAO,KAAK;AACxF,UAAM,EAAE,MAAM,MAAM,IAAI,KAAI,IAAKA;AACjC,UAAMD,aAAY,MAAM,YAAY,aAAY,GAAI,KAAK,CAAC,uBAAuB;AAC7E,UAAI,UAAU;AACd,UAAI,WAAW,MAAM;AACjB,kBAAU,mBAAmB,SAAS;AAAA,MACzC;AACD,UAAI,WAAW,MAAM;AACjB,kBAAU,mBAAmB,SAAS;AAAA,MACzC;AACD,UAAI,WAAW,IAAI;AACf,kBAAU,mBAAmB,OAAO,MAAM,mBAAmB,QAAQ;AAAA,MACxE;AACD,UAAI,WAAW,MAAM;AACjB,kBAAU,mBAAmB,SAAS;AAAA,MACzC;AACD,aAAO;AAAA,IACnB,CAAS;AACD,WAAOA;AAAA,EACV;AAAA,EAED,OAAO,0BAA0B,QAAQC,WAAU,EAAE,MAAM,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,GAAE,GAAI;AACzF,QAAI,CAAC,QAAQ;AACT,YAAM,OAAO,MAAM,0BAA0B;AAAA,IAChD;AACD,QAAI,aAAa,gBAAgB,4BAA4B,QAAQ,MAAM,KAAK;AAChF,UAAM,EAAE,MAAM,MAAM,IAAI,KAAI,IAAKA;AACjC,UAAMD,YAAW,WAAW,MAAM,KAAK,CAAC,uBAAuB;AAC3D,UAAI,UAAU;AACd,UAAI,WAAW,MAAM;AACjB,kBAAU,mBAAmB,SAAS;AAAA,MACzC;AACD,UAAI,WAAW,MAAM;AACjB,kBAAU,mBAAmB,SAAS;AAAA,MACzC;AACD,UAAI,WAAW,IAAI;AACf,kBAAU,mBAAmB,OAAO,MAAM,mBAAmB,QAAQ;AAAA,MACxE;AACD,UAAI,WAAW,MAAM;AACjB,kBAAU,mBAAmB,SAAS;AAAA,MACzC;AACD,aAAO;AAAA,IACnB,CAAS;AACD,WAAOA;AAAA,EACV;AAAA,EAED,aAAa,yBAAyB,QAAQ,WAAW;AACrD,QAAI,CAAC,QAAQ;AACT,YAAM,OAAO,MAAM,0BAA0B;AAAA,IAChD;AACD,UAAM,oBAAoB,oBAAI;AAC9B,eAAW,iBAAiB,WAAW;AACnC,UAAI,cAAc,SAAS,SAAS;AAChC,cAAM,OAAO,kBAAkB,IAAI,SAAS,aAAa,KAAK;AAC9D,aAAK,KAAK,aAAa;AACvB,0BAAkB,IAAI,SAAS,IAAI;AAAA,MACnD,WAAuB,cAAc,SAAS,SAAS;AACvC,cAAM,OAAO,kBAAkB,IAAI,SAAS,aAAa,KAAK;AAC9D,aAAK,KAAK,aAAa;AACvB,0BAAkB,IAAI,SAAS,IAAI;AAAA,MACnD,WAAuB,cAAc,SAAS,QAAQ;AACtC,cAAM,OAAO,kBAAkB,IAAI,QAAQ,aAAa,KAAK;AAC7D,aAAK,KAAK,aAAa;AACvB,0BAAkB,IAAI,QAAQ,IAAI;AAAA,MAClD,WAAuB,cAAc,SAAS,SAAS;AACvC,cAAM,OAAO,kBAAkB,IAAI,SAAS,aAAa,KAAK;AAC9D,aAAK,KAAK,aAAa;AACvB,0BAAkB,IAAI,SAAS,IAAI;AAAA,MACnD,WAAuB,cAAc,SAAS,gBAAgB;AAC9C,cAAM,OAAO,kBAAkB,IAAI,gBAAgB,aAAa,KAAK;AACrE,aAAK,KAAK,aAAa;AACvB,0BAAkB,IAAI,gBAAgB,IAAI;AAAA,MAC1D,WAAuB,cAAc,SAAS,SAAS;AACvC,cAAM,OAAO,kBAAkB,IAAI,SAAS,aAAa,KAAK;AAC9D,aAAK,KAAK,aAAa;AACvB,0BAAkB,IAAI,SAAS,IAAI;AAAA,MACnD,WAAuB,cAAc,SAAS,aAAa;AAC3C,cAAM,OAAO,kBAAkB,IAAI,aAAa,aAAa,KAAK;AAClE,aAAK,KAAK,aAAa;AACvB,0BAAkB,IAAI,aAAa,IAAI;AAAA,MACvD,WAAuB,cAAc,SAAS,iBAAiB;AAC/C,cAAM,OAAO,kBAAkB,IAAI,iBAAiB,aAAa,KAAK;AACtE,aAAK,KAAK,aAAa;AACvB,0BAAkB,IAAI,iBAAiB,IAAI;AAAA,MAC3D,OAAmB;AACH,cAAM,OAAO,MAAM,sBAAsB,eAAe,IAAI,qBAAqB,OAAO,aAAa;AAAA,MACxG;AAAA,IACJ;AAED,aAAS,CAAC,cAAcG,UAAS,KAAK,mBAAmB;AACrD,aAAO,IAAI,iBAAiB,YAAY,OAAO,MAAM,KAAKA,UAAS;AACnE,UAAI,iBAAiB,SAAS;AAC1B,cAAM,gBAAgBA,YAAW,EAAE,MAAM,OAAQ,CAAA;AAAA,MACjE,WAAuB,iBAAiB,SAAS;AACjC,cAAM,gBAAgBA,YAAW,EAAE,MAAM,OAAQ,CAAA;AAAA,MACjE,WAAuB,iBAAiB,QAAQ;AAChC,aAAK,gBAAgBA,YAAW,EAAE,MAAM,OAAQ,CAAA;AAAA,MAChE,WAAuB,iBAAiB,SAAS;AACjC,cAAM,gBAAgBA,YAAW,EAAE,MAAM,OAAQ,CAAA;AAAA,MACjE,WAAuB,iBAAiB,gBAAgB;AACxC,qBAAa,gBAAgBA,YAAW,EAAE,MAAM,OAAQ,CAAA;AAAA,MACxE,WAAuB,iBAAiB,SAAS;AACjC,cAAM,gBAAgBA,YAAW,EAAE,MAAM,OAAQ,CAAA;AAAA,MACjE,WAAuB,iBAAiB,aAAa;AACrC,kBAAU,gBAAgBA,YAAW,EAAE,MAAM,OAAQ,CAAA;AAAA,MACrE,WAAuB,iBAAiB,iBAAiB;AACzC,sBAAc,gBAAgBA,YAAW,EAAE,MAAM,OAAQ,CAAA;AAAA,MACzE,OAAmB;AACH,cAAM,OAAO,MAAM,sBAAsB,YAAY,qBAAqB,KAAK;AAAA,MAClF;AAAA,IACJ;AACD,WAAO;AAAA,EACV;AAAA,EAED,aAAa,qCAAqC,QAAQ,mBAAmB;AACzE,QAAI,CAAC,QAAQ;AACT,YAAM,OAAO,MAAM,0BAA0B;AAAA,IAChD;AACD,UAAM,OAAO,gBAAgB,QAAQ,iBAAiB;AACtD,QAAI,CAAC,MAAM;AACP,aAAO,KAAK,8BAA8B,iBAAiB,GAAG;AAC9D;AAAA,IACH;AACD,UAAM,iBAAiB,MAAM,SAAS,IAAI;AAC1C,UAAMJ,QAAO,MAAM,oBAAmB,mBAAmB,MAAM;AAC/D,UAAMC,YAAW,KAAK,MAAM,IAAI,MAAM,EAAE,MAAM,KAAK,CAAC,uBAAuB;AACvE,aAAO,mBAAmB,SAAS,eAAe,QAAQ,mBAAmB,SAAS,eAAe;AAAA,IACjH,CAAS;AACD,WAAOA,WAAU,MAAMD,MAAK,YAAYC,UAAS,GAAG,IAAI;AAAA,EAC3D;AAAA,EAED,OAAO,qBAAqB,MAAM;AAC9B,WAAO,iBAAiB,IAAI,KAAK;AAAA,EACpC;AAAA,EAED,aAAa,iCAAiC,QAAQ,cAAc;AAChE,QAAI,CAAC,QAAQ;AACT,YAAM,OAAO,MAAM,0BAA0B;AAAA,IAChD;AACD,QAAI,oBAAoB,MAAM,oBAAmB,qCAAqC,QAAQ,YAAY;AAC1G,QAAI,CAAC,mBAAmB;AACpB,2BAAqB,MAAM,oBAAmB,yBAAyB,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC;AAAA,IACpG;AACD,qBAAiB,kBAAkB,IAAI,IAAI;AAC3C,WAAO;AAAA,EACV;AAAA,EAED,OAAO,oCAAoC,QAAQ,gBAAgB;AAC/D,QAAI,CAAC,QAAQ;AACT,YAAM,OAAO,MAAM,0BAA0B;AAAA,IAChD;AACD,QAAIA,YACA,OAAO,OAAO,gBAAgB,EAAE,KAAK,CAAC,sBAAsB;AACxD,aAAO,kBAAkB,SAAS,eAAe,QAAQ,kBAAkB,SAAS,eAAe;AAAA,IACtG,CAAA,KAAK;AACV,QAAI,CAACA,WAAU;AACX,MAAAA,YAAW,oBAAmB,0BAA0B,QAAQ,eAAe,MAAM,eAAe,IAAI;AAAA,IAC3G;AACD,WAAOA;AAAA,EACV;AAAA;AAAA;AAAA;AAKL;AAnOwC;AAAA;AAAA;AAAA;AAAA;AAKpC,cALiB,qBAKV,uBAAsB;AAAA,EACzB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACR;AAEI,cAhBiB,qBAgBV,gBAAe,SAAS,UAAU,SAAS;AAElD,cAlBiB,qBAkBV,oBAAmB,CAAA;AAlBf,IAAM,qBAAN;ACDA,MAAM,oBAAN,MAAM,kBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyBlC,OAAO,+BAA+B;AAClC,UAAM,MAAM,CAAA;AACZ,UAAM,oBAAoB,KAAK,UAAU,IAAI;AAC7C,aAAS,KAAK,mBAAmB;AAC7B,UAAI,KAAK;AAAA,QACL,SAAS,SAAS;AAAA,QAClB,MAAM,SAAS;AAAA,QACf,MAAM,SAAS;AAAA,QACf,KAAK,SAAS;AAAA,QACd,cAAc,SAAS;AAAA,QACvB,UAAU,SAAS;AAAA,MACnC,CAAa;AAAA,IACJ;AACD,UAAM,sBAAsB,KAAK,UAAU,IAAI;AAC/C,aAAS,KAAK,qBAAqB;AAC/B,UAAI,KAAK;AAAA,QACL,SAAS,SAAS;AAAA,QAClB,MAAM,SAAS;AAAA,QACf,MAAM,SAAS;AAAA,QACf,KAAK,SAAS;AAAA,QACd,cAAc,SAAS,aAAa,YAAW,EAAG,QAAQ,OAAO,EAAE,EAAE,KAAM;AAAA,QAC3E,UAAU,SAAS;AAAA,MACnC,CAAa;AAAA,IACJ;AACD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBD,OAAO,mCAAmC,aAAa;AACnD,UAAM,IAAI,kBAAiB,mCAAmC,WAAW;AACzE,QAAI,CAAC,GAAG;AACJ,aAAO;AAAA,IACV;AACD,UAAM,MAAM,KAAK,UAAU,IAAI,wBAAwB,CAAC;AACxD,UAAM,aAAa,CAAA;AACnB,eAAW,MAAM,KAAK;AAClB,YAAM,eAAe,GAAG,aAAa,YAAW,EAAG,QAAQ,OAAO,EAAE,EAAE;AACtE,iBAAW,YAAY,KAAK,GAAG,OAAO,GAAG,KAAK,QAAQ,GAAG,aAAa;AAAA,IACzE;AACD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,OAAO,mCAAmC,aAAa;AACnD,QAAI,CAAC,aAAa;AACd,aAAO;AAAA,IACV;AAED,QAAI,OAAO,gBAAgB,YAAY,uBAAuB,QAAQ;AAClE,UAAI,iBAAiB;AAErB,uBAAiB,eAAe,WAAW,KAAK,EAAE;AAClD,uBAAiB,eAAe,WAAW,KAAK,EAAE;AAClD,uBAAiB,eAAe,WAAW,KAAK,GAAG;AAEnD,uBAAiB,eAAe,WAAW,cAAc,IAAI;AAC7D,uBAAiB,eAAe,WAAW,cAAc,IAAI;AAC7D,uBAAiB,eAAe,WAAW,gBAAgB,IAAI;AAC/D,uBAAiB,eAAe,WAAW,YAAY,IAAI;AAC3D,uBAAiB,eAAe,WAAW,gBAAgB,IAAI;AAC/D,uBAAiB,eAAe,WAAW,MAAM,EAAE;AAEnD,uBAAiB,eAAe,WAAW,KAAK,EAAE;AAClD,uBAAiB,eAAe,WAAW,KAAK,EAAE;AAElD,uBAAiB,eAAe,WAAW,QAAQ,EAAE;AACrD,uBAAiB,eAAe,WAAW,OAAO,EAAE;AACpD,aAAO,eAAe;IACzB,YAGI,OAAO,gBAAgB,YAAY,uBAAuB,WAC3D,OAAO,KAAK,WAAW,GAAG,SAAS,GACrC;AACE,UAAI,iBAAiB;AACrB,iBAAW,eAAe,OAAO,KAAK,WAAW,GAAG;AAChD,yBAAiB,iBAAiB,MAAM,YAAY,WAAW,IAAI;AAAA,MACtE;AACD,aAAO,eAAe;IAClC,OAAe;AACH,aAAO,MAAM,gCAAgC,WAAW;AACxD,aAAO;AAAA,IACV;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,aAAa,cAAc,cAAc,YAAY;AACjD,WAAO,MAAM,+BAA+B,UAAU;AACtD,QAAI,OAAO,eAAe,YAAY,sBAAsB,QAAQ;AAChE,UAAI,CAAC,YAAY;AACb;AAAA,MACH;AACD,YAAM,KAAK,UAAU,IAAI,cAAc,cAAc,UAAU;AAAA,IAC3E,OAAe;AACH,UAAI,kBAAiB,eAAe,UAAU,GAAG;AAC7C;AAAA,MACH;AAED,YAAM,yBAAyB,CAAA;AAC/B,iBAAWI,aAAY,YAAY;AAC/B,YAAIA,UAAS,QAAQA,UAAS,cAAc;AACxC,gBAAM,yBAAyB,KAAK,IAAI,OAAOA,UAAS,IAAI,CAAC,IAAIA,UAAS,cAAc,KAAI;AAC5F,iBAAO,MAAM,4CAA4C,qBAAqB;AAC9E,iCAAuB,KAAK,qBAAqB;AAAA,QACpD;AAAA,MACJ;AACD,aAAO,MAAM,8CAA8C,sBAAsB;AACjF,YAAM,0BAA0B,uBAAuB,KAAK,GAAG;AAC/D,aAAO,MAAM,sDAAsD,uBAAuB;AAC1F,YAAM,KAAK,UAAU,IAAI,cAAc,cAAc,uBAAuB;AAAA,IAC/E;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUD,aAAa,iBAAiB,cAAc,YAAY;AACpD,WAAO,MAAM,kCAAkC,UAAU;AACzD,QAAI,OAAO,eAAe,YAAY,sBAAsB,QAAQ;AAChE,UAAI,CAAC,YAAY;AACb;AAAA,MACH;AACD,YAAM,KAAK,UAAU,IAAI,iBAAiB,cAAc,UAAU;AAAA,IAC9E,OAAe;AACH,UAAI,kBAAiB,eAAe,UAAU,GAAG;AAC7C;AAAA,MACH;AAED,YAAM,yBAAyB,CAAA;AAC/B,iBAAWA,aAAY,YAAY;AAC/B,YAAIA,UAAS,QAAQA,UAAS,cAAc;AACxC,gBAAM,yBAAyB,KAAK,IAAI,OAAOA,UAAS,IAAI,CAAC,IAAIA,UAAS,cAAc,KAAI;AAC5F,iBAAO,MAAM,+CAA+C,qBAAqB;AACjF,iCAAuB,KAAK,qBAAqB;AAAA,QACpD;AAAA,MACJ;AACD,aAAO,MAAM,iDAAiD,sBAAsB;AACpF,YAAM,0BAA0B,uBAAuB,KAAK,GAAG;AAC/D,aAAO,MAAM,yDAAyD,uBAAuB;AAC7F,YAAM,KAAK,UAAU,IAAI,iBAAiB,cAAc,uBAAuB;AAAA,IAClF;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,aAAa,iBAAiB,cAAc,YAAY;AACpD,WAAO,MAAM,kCAAkC,UAAU;AACzD,QAAI,OAAO,eAAe,YAAY,sBAAsB,QAAQ;AAChE,UAAI,CAAC,YAAY;AACb;AAAA,MACH;AACD,YAAM,KAAK,UAAU,IAAI,iBAAiB,cAAc,UAAU;AAAA,IAC9E,OAAe;AACH,UAAI,kBAAiB,eAAe,UAAU,GAAG;AAC7C;AAAA,MACH;AAED,YAAM,yBAAyB,CAAA;AAC/B,iBAAWA,aAAY,YAAY;AAC/B,YAAIA,UAAS,QAAQA,UAAS,cAAc;AACxC,gBAAM,yBAAyB,KAAK,IAAI,OAAOA,UAAS,IAAI,CAAC,IAAIA,UAAS,cAAc,KAAI;AAC5F,iBAAO,MAAM,+CAA+C,qBAAqB;AACjF,iCAAuB,KAAK,qBAAqB;AAAA,QACpD;AAAA,MACJ;AACD,aAAO,MAAM,iDAAiD,sBAAsB;AACpF,YAAM,0BAA0B,uBAAuB,KAAK,GAAG;AAC/D,aAAO,MAAM,yDAAyD,uBAAuB;AAC7F,YAAM,KAAK,UAAU,IAAI,iBAAiB,cAAc,uBAAuB;AAAA,IAClF;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUD,OAAO,oBAAoB,cAAc,YAAY;AACjD,WAAO,MAAM,qCAAqC,UAAU;AAC5D,QAAI,OAAO,eAAe,YAAY,sBAAsB,QAAQ;AAChE,UAAI,CAAC,YAAY;AACb;AAAA,MACH;AACD,YAAM,eAAe,KAAK,UAAU,IAAI,eAAe,YAAY,EAAE,QAAQ,aAAY,CAAE;AAC3F,aAAO,aAAa;AAAA,IAChC,OAAe;AACH,UAAI,kBAAiB,eAAe,UAAU,GAAG;AAC7C;AAAA,MACH;AAED,YAAM,yBAAyB,CAAA;AAC/B,iBAAWA,aAAY,YAAY;AAC/B,YAAIA,UAAS,QAAQA,UAAS,cAAc;AACxC,gBAAM,yBAAyB,KAAK,IAAI,OAAOA,UAAS,IAAI,CAAC,IAAIA,UAAS,cAAc,KAAI;AAC5F,iBAAO,MAAM,kDAAkD,qBAAqB;AACpF,iCAAuB,KAAK,qBAAqB;AAAA,QACpD;AAAA,MACJ;AACD,aAAO,MAAM,oDAAoD,sBAAsB;AACvF,YAAM,0BAA0B,uBAAuB,KAAK,GAAG;AAC/D,aAAO,MAAM,4DAA4D,uBAAuB;AAChG,YAAM,eAAe,KAAK,UAAU,IAAI,eAAe,yBAAyB,EAAE,QAAQ,aAAY,CAAE;AACxG,aAAO,aAAa;AAAA,IACvB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBD,aAAa,SACT,cACA,YACAH,WAAU;AAAA,IACN,0BAA0B;AAAA,IAC1B,kBAAkB;AAAA,IAClB,eAAe;AAAA,IACf,mBAAmB;AAAA,EACtB,GACH;AACE,UAAM,aAAa,QAAQ,MAAM;AAAA,MAC7B;AAAA,QACI,0BAA0B;AAAA,QAC1B,kBAAkB;AAAA,QAClB,eAAe;AAAA,QACf,mBAAmB;AAAA,MACtB;AAAA,MACDA;AAAA,IACZ;AAEQ,QAAI,WAAW,4BAA4B,wBAAwB,OAAO;AACtE,aAAO;AAAA,QACH;AAAA,MAChB;AACY,aAAO;IACV;AAED,UAAM,YAAY,MAAM,KAAK,UAAU,IAAI,SAAS,cAAc,YAAY;AAAA,MAC1E,mBAAmB,WAAW;AAAA;AAAA,MAC9B,0BAA0B,WAAW;AAAA,MACrC,kBAAkB,WAAW;AAAA,MAC7B,eAAe,WAAW;AAAA,IACtC,CAAS;AACD,WAAO,MAAM,oBAAoB,WAAW,MAAM,aAAa,aAAa,IAAI,IAAI,SAAS;AAC7F,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBD,aAAa,oCAAoC,aAAa,cAAcA,WAAU,CAAA,GAAI;AACtF,UAAM,aAAa,QAAQ,MAAM;AAAA,MAC7B;AAAA,QACI,SAAS;AAAA,QACT,aAAa;AAAA,QACb,YAAY;AAAA,QACZ,gBAAgB;AAAA,QAChB,aAAa;AAAA,QACb,UAAU,CAAE;AAAA,QACZ,aAAa;AAAA,QACb,0BAA0B;AAAA,QAC1B,gBAAgB;AAAA,MACnB;AAAA,MACDA;AAAA,IACZ;AAQQ,UAAM,aAAa,MAAM,kBAAiB,8BAA8B,YAAY;AACpF,QAAI,QAAQ,CAAA;AACZ,QAAI,aAAa;AACb,cAAQ,MAAM,kBAAiB,SAAS,aAAa,YAAY;AAAA,QAC7D,0BAA0B,WAAW;AAAA,MACrD,CAAa;AAAA,IACJ;AAED,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBD,aAAa,cAAc,aAAa,gBAAgBA,WAAU,CAAA,GAAI;AAClE,WAAO,MAAM,kBAAiB,6BAA6B,aAAa,gBAAgBA,QAAO;AAAA,EAClG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBD,aAAa,6BAA6B,aAAa,gBAAgBA,WAAU,CAAA,GAAI;AACjF,UAAM,QAAQ,MAAM,gBAAgB,kBAAkB,cAAc;AACpE,UAAM,aAAa,QAAQ,MAAM;AAAA,MAC7B;AAAA,QACI,aAAa;AAAA,QACb,YAAY;AAAA,QACZ,gBAAgB;AAAA,QAChB,aAAa;AAAA,QACb,UAAU,CAAE;AAAA,QACZ,aAAa;AAAA,QACb,0BAA0B;AAAA,QAC1B,gBAAgB;AAAA,MACnB;AAAA,MACDA;AAAA,IACZ;AAEQ,QAAI,EAAE,OAAO,WAAW,gBAAgB,YAAY,OAAO,WAAW,gBAAgB,WAAW;AAC7F,YAAM,OAAO,MAAM,6EAA6E;AAAA,IACnG;AAED,QAAI,OAAO,WAAW,aAAa,UAAU;AACzC,YAAM,OAAO,MAAM,gEAAgE;AAAA,IACtF;AAED,QAAI,OAAO,WAAW,6BAA6B,WAAW;AAC1D,YAAM,OAAO,MAAM,yEAAyE;AAAA,IAC/F;AAGD,QAAI,WAAW,cAAc,MAAM,KAAK,WAAW,YAAY,GAAG;AAC9D,iBAAW,aAAa;AAAA,IAC3B;AAqBD,QAAI,aAAa,MAAM,kBAAiB,UAAU,OAAO,UAAU;AACnE,QAAI,QAAQ,CAAA;AAGZ,QAAI,aAAa;AACb,cAAQ,MAAM,kBAAiB,SAAS,aAAa,YAAY;AAAA,QAC7D,0BAA0B,WAAW;AAAA,MACrD,CAAa;AAAA,IACJ;AAED,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA,EAKD,aAAa,+BAA+B,OAAOA,UAAS;AACxD,WAAO,MAAM,kBAAiB,UAAU,OAAOA,QAAO;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,aAAa,UAAU,gBAAgBA,UAAS;AAC5C,UAAM,QAAQ,MAAM,gBAAgB,kBAAkB,cAAc;AAEpD,UAAM;AACtB,UAAM,aAAa,CAAC,CAACA,SAAQ;AAC7B,UAAM,iBAAiB,CAAC,CAACA,SAAQ;AACb,IAAAA,SAAQ;AACX,IAAAA,SAAQ;AACF,KAAC,CAACA,SAAQ;AACf,KAAC,CAACA,SAAQ;AAE5B,QAAI,CAACA,SAAQ,SAAS;AAClB,MAAAA,SAAQ,UAAU,MAAM;AAAA,IAC3B;AAID,QAAI,CAAC,MAAM,KAAK,WAAW,YAAY,GAAG;AACtC,UAAI,YAAY;AACZ,cAAM,MAAM;MACf;AAED,UAAI,gBAAgB;AAChB,cAAM,MAAM,OAAO;AAAA,UACf,SAAS,MAAM,QAAQ,IAAI,CAAC,YAAY;AAAA,YACpC,KAAK,OAAO;AAAA,YACZ,QAAQ,OAAO,MAAM,CAAC,KAAK,OAAO,MAAM,CAAC,IAAI;AAAA,UACrE,EAAsB;AAAA,QACtB,CAAiB;AACD,cAAM,MAAM;MACf;AAAA,IACJ;AAqBD,IAAAA,SAAQ,cAAc;AACtB,UAAMC,WAAU,MAAM,KAAK,QAAQ,IAAI,mBAAmB,EAAE,IAAI,gBAAgB,OAAOD,QAAO;AAmE9F,UAAM,iBAAiB,MAAM,kBAAiB,8BAA8BC,UAASD,QAAO;AAC5F,WAAO;AAAA,EACV;AAAA,EAED,aAAa,8BAA8BC,UAASD,WAAU,IAAI;AAE9D,UAAM,aAAa,CAAC,CAACA,SAAQ;AAC7B,UAAM,iBAAiB,CAAC,CAACA,SAAQ;AACjC,UAAM,cAAcA,SAAQ;AACX,IAAAA,SAAQ;AACzB,UAAM,iBAAiB,CAAC,CAACA,SAAQ;AACf,KAAC,CAACA,SAAQ;AAE5B,UAAM,cAAc,CAAA;AACpB,eAAW,YAAYC,UAAS;AA+B5B,UAAI,iBAAiB;AACrB,YAAM,UAAU,MAAM,KAAK,QAAQ,IAAI,mBAAmB,EAAE,IAAI,iBAAiB,QAAQ;AACzF,UAAI,CAAC,SAAS;AACV,eAAO;AAAA,UACH,eAAe,SAAS,OAAO,MAAM,SAAS,UAAU;AAAA,UACxD;AAAA,QACpB;AACgB;AAAA,MACH;AACD,UAAI,mBAAmB,WAAW;AAC9B,eAAO;AAAA,UACH;AAAA,QACpB;AACgB,oBAAY;AAAA,UACR,GAAI,MAAM,kBAAiB,UAAU;AAAA,YACjC,WAAW,QAAQ;AAAA,YACnB;AAAA,YACA;AAAA,YACA;AAAA,UACxB,CAAqB;AAAA,QACrB;AAAA,MACA,OAAmB;AACH,cAAM,WAAW,KAAK,IAAI,kBAAiB,gBAAgB,OAAO,IAAI,gBAAgB,CAAC;AACvF,oBAAY,KAAK;AAAA,UACb,GAAG;AAAA,UACH,MAAM;AAAA,UACN;AAAA,QACpB,CAAiB;AAAA,MACJ;AAAA,IAEJ;AAED,UAAM,QAAQ,CAAA;AACd,gBAAY,QAAQ,CAAC,YAAY;AAE7B,YAAM,eAAe,kBAAiB,gBAAgB,OAAO,OAAO;AAEpE,UAAI,cAAc;AACd,qBAAa,YAAY,KAAK,IAAI,QAAQ,UAAU,CAAC;AAAA,MACrE,OAAmB;AACH;AAAA,UACI;AAAA,UACA,kBAAiB,MAAM;AAAA,UACvB,YAAY,QAAQ,MAAM,kBAAiB,MAAM,IAAI;AAAA,QACzE;AACgB,YACI,KAAK,UAAU,IAAI,gCACnB,CAAC,YAAY,SAAS,KAAK,UAAU,IAAI,4BAA4B,GACvE;AACE;AAAA,YACI;AAAA,YACA,KAAK,UAAU,IAAI;AAAA,YACnB,kBAAiB,gBAAgB,QAAQ,IAAI;AAAA,UACrE;AAAA,QACiB;AACD,YAAI,gBAAgB;AAChB,sBAAY,SAAS,kBAAiB,MAAM,iBAAiB,cAAc;AAAA,QAC9E;AACD,cAAM,KAAK;AAAA,UACP,GAAG;AAAA,QACvB,CAAiB;AAAA,MACJ;AAAA,IACb,CAAS;AAED,UAAM,iBAAiB,MAAM,IAAI,CAACG,UAAS;AACvC,YAAM,WAAWA,MAAK,gBAAgB,OAAOA,MAAK,KAAK,SAAQ,IAAKA,MAAK;AACzE,YAAM,aAAa;AACnB,aAAO,kBAAiB,gBAAgB,YAAYA,MAAK,QAAQ;AAAA,IAC7E,CAAS;AAED,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,OAAO,gBAAgBA,OAAM;AACzB,UAAM,WAAWA,iBAAgB,OAAOA,MAAK,SAAU,IAAGA;AAC1D,WAAO,OAAO,YAAY,UAAU,KAAK,UAAU,IAAI,uBAAuB,KAAK,CAAC;AAAA,EACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,OAAO,gBAAgBA,OAAM;AACzB,UAAM,WAAWA,iBAAgB,OAAOA,MAAK,SAAU,IAAGA;AAC1D,WAAO,YAAY,UAAU,KAAK,UAAU,IAAI,uBAAuB;AAAA,EAC1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUD,OAAO,gBAAgBA,OAAM,UAAU,2BAA2B,OAAO;AACrE,UAAM,WAAWA,iBAAgB,OAAOA,MAAK,SAAU,IAAGA;AAE1D,QAAI,CAAC,4BAA4B,kBAAiB,gBAAgB,QAAQ,GAAG;AACzE,kBAAY,UAAU,KAAK,UAAU,IAAI,yBAAyB,QAAQ;AAAA,IAC7E;AACD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,OAAO,YAAYA,OAAM;AACrB,UAAM,WAAWA,iBAAgB,OAAOA,MAAK,SAAU,IAAGA;AAC1D,WAAO,YAAY,UAAU,KAAK,UAAU,IAAI,oBAAoB,KAAK;AAAA,EAC5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,OAAO,YAAYA,OAAM;AACrB,UAAM,WAAWA,iBAAgB,OAAOA,MAAK,SAAU,IAAGA;AAC1D,WAAO,YAAY,UAAU,KAAK,UAAU,IAAI,oBAAoB;AAAA,EACvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUD,OAAO,YAAYA,OAAM,MAAM,uBAAuB,OAAO;AACzD,UAAM,WAAWA,iBAAgB,OAAOA,MAAK,SAAU,IAAGA;AAC1D,QAAI,CAAC,wBAAwB,kBAAiB,YAAY,QAAQ,GAAG;AACjE,kBAAY,UAAU,KAAK,UAAU,IAAI,sBAAsB,IAAI;AAAA,IACtE;AACD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWD,OAAO,gBAAgB,eAAe,YAAY,EAAE,YAAY,KAAM,IAAG,IAAI;AACzE,WAAO,KAAK,UAAU,IAAI,gBAAgB,eAAe,YAAY;AAAA,MACjE;AAAA,IACZ,CAAS;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAMD,OAAO,kBAAkB,cAAc;AACnC,UAAM,iBAAiB,CAAA;AACvB,iBAAa,QAAQ,CAAC,cAAc;AAChC,UAAI,iBAAiB,YAAY,WAAW,0CAA0C,KAAK;AAG3F,YAAM,eAAe,eAAe,KAAK,CAAC,MAAM;AAE5C,YAAI,kBAAkB,YAAY,GAAG,0CAA0C,KAAK;AAEpF,YAAI,EAAE,cAAc,UAAU,YAAY;AACtC,iBAAO,EAAE,eAAe,UAAU,cAAc,mBAAmB;AAAA,QACvF,OAAuB;AACH,iBAAO,EAAE,QAAQ,UAAU,OAAO,mBAAmB;AAAA,QACxD;AAAA,MACjB,CAAa;AACD,UAAI,CAAC,kBAAiB,cAAc,UAAU,QAAQ,GAAG;AACrD,kBAAU,WAAW;AAAA,MACxB;AACD,UAAI,cAAc;AACd,qBAAa,YAAY,KAAK,IAAI,UAAU,UAAU,CAAC;AAAA,MACvE,OAAmB;AACH,uBAAe,KAAK;AAAA,UAChB,GAAG;AAAA,QACvB,CAAiB;AAAA,MACJ;AAAA,IACb,CAAS;AAED,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBD,aAAa,yBACT,cACAJ,WAAU;AAAA,IACN,mBAAmB;AAAA,IACnB,gBAAgB;AAAA,IAChB,cAAc;AAAA,IACd,cAAc;AAAA,IACd,aAAa;AAAA,IACb,mBAAmB;AAAA,EACtB,GACD,gBAAgB,EAAE,UAAU,EAAG,GAC/B,eAAe;AAAA,IACX,aAAa;AAAA,IACb,YAAY;AAAA,IACZ,MAAM,KAAK,UAAU,WAAW;AAAA,IAChC,iBAAiB;AAAA,IACjB,eAAe;AAAA,IACf,QAAQ;AAAA,EACX,GACH;AACE,IAAAA,WAAU,QAAQ,MAAM;AAAA,MACpB;AAAA,QACI,mBAAmB;AAAA,QACnB,gBAAgB;AAAA,QAChB,cAAc;AAAA,QACd,cAAc;AAAA,QACd,aAAa;AAAA,QACb,mBAAmB;AAAA,MACtB;AAAA,MACDA;AAAA,IACZ;AAEQ,oBAAgB,QAAQ,MAAM,YAAY,EAAE,UAAU,EAAC,GAAI,aAAa;AAExE,mBAAe,QAAQ,MAAM;AAAA,MACzB;AAAA,QACI,aAAa;AAAA,QACb,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU,WAAW;AAAA,QAChC,iBAAiB;AAAA,QACjB,eAAe;AAAA,QACf,QAAQ;AAAA,MACX;AAAA,MACD;AAAA,IACZ;AAEQ,UAAM,SAAS,MAAM,QAAQ,YAAY,IAAI,eAAe,CAAC,YAAY;AACzE,UAAM,QAAQ,OAAO,CAAC;AACtB,UAAM,EAAE,mBAAmB,gBAAgB,aAAa,cAAc,cAAc,kBAAmB,IACnGA;AAEJ,QAAI,mBAAmB;AACnB,UAAI,QAAQ;AAAA,QACR,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,YAAY;AAAA,QACZ,OAAO;AAAA,QACP,OAAO;AAAA,QACP,YAAY;AAAA,QACZ,WAAW;AAAA;AAAA,UAEP,MAAM;AAAA,UACN,OAAO;AAAA,UACP,WAAW;AAAA,QACd;AAAA,MACjB;AACY,cAAQ,MAAM,YAAY,eAAe,EAAE,MAAY,CAAE;AAAA,IAC5D;AAED,QAAI,KAAK,QAAQ,IAAI,UAAU,GAAG,UAAU,cAAc;AACtD,UAAI,sBAAsB,MAAM,MAAM,QAAQ,OAAO,CAAC,KAAK,SAAS;AAChE,YAAI,KAAK,KAAK,KAAK,IAAI,SAAS,MAAM;AACtC,eAAO;AAAA,MACV,GAAE,CAAE,CAAA;AAEL,UAAI,UAAU;AAAA,QACV,OAAO;AAAA,UACH,eAAe,iBAAiB,iBAAiB,MAAM;AAAA,UACvD,MAAM,WAAW,MAAM,IAAI;AAAA,QAC9B;AAAA,QACD,OAAO;AAAA;AAAA,UAEH,MAAM,WAAW,MAAM,IAAI;AAAA,QAC9B;AAAA,QACD,UAAU;AAAA,UACN,cAAc,sBAAsB,sBAAsB;AAAA,UAC1D,MAAM,CAAE;AAAA,QACX;AAAA,MACjB;AAGY,YAAM,aAAa,OAAO,OAAO,CAAC,KAAK,QAAQ;AAC3C,YAAI,IAAI,OAAO,MAAM,IAAI;AACrB,iBAAO;AAAA,QACV;AAED,cAAM,QAAQ,IAAI,MAAM,MAAM,OAAO,CAACK,MAAKD,UAAS;AAChD,cAAI,kBAAiB,cAAcA,KAAI,GAAG;AACtC,kBAAM,WAAWA,iBAAgB,OAAOA,MAAK,SAAU,IAAGA;AAC1D,YAAAC,KAAI,UAAU,IAAI;AAAA,UACrB;AACD,iBAAOA;AAAA,QACV,GAAE,CAAE,CAAA;AAEL,gBAAQ,MAAM,YAAY,IAAI,SAAS,MAAM,KAAK;AAiClD,eAAO;AAAA,MACV,GAAE,OAAO;AAEV,UAAI,cAAc;AACd,cAAM,WAAW,OAAO,OAAO,CAAC,MAAM,EAAE,OAAO,MAAM,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,EAAE;AACxE,cAAM,OAAO,MAAM,wBAAwB,SAAS,QAAQ;AAAA,MAC/D;AAED,YAAM,SAAS;AAAA,QACX,MAAM;AAAA,QACN;AAAA,QACA,CAAE;AAAA,QACF,EAAE,WAAW,mBAAmB,gBAAgB,EAAE,cAAc,SAAS,MAAM,OAAQ;AAAA,MACvG;AAEY,YAAM,aAAa,MAAM,KAAK,UAAU,IAAI,wBAAwB,CAAC,KAAK,GAAG;AAAA,QACzE;AAAA,QACA;AAAA,MAChB,CAAa;AACD,aAAO;AAAA,IACV,WAAU,cAAc;AACrB,aAAO,KAAK,mFAAmF,IAAI;AACnG,aAAO;IACnB,OAAe;AACH,YAAM,aAAa,MAAM,KAAK,UAAU,IAAI,wBAAwB,QAAQ;AAAA,QACxE;AAAA,QACA;AAAA,MAChB,CAAa;AACD,aAAO;AAAA,IACV;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeD,aAAa,iCACT,aACAL,WAAU;AAAA,IACN,mBAAmB;AAAA,IACnB,gBAAgB;AAAA,IAChB,aAAa;AAAA,EAChB,GACD,gBAAgB,EAAE,UAAU,EAAG,GAC/B,eAAe;AAAA,IACX,aAAa;AAAA,IACb,YAAY;AAAA,IACZ,MAAM,KAAK,UAAU,WAAW;AAAA,IAChC,iBAAiB;AAAA,IACjB,eAAe;AAAA,IACf,QAAQ;AAAA,EACX,GACH;AAME,IAAAA,WAAU,QAAQ,MAAM;AAAA,MACpB;AAAA,QACI,mBAAmB;AAAA,QACnB,gBAAgB;AAAA,QAChB,aAAa;AAAA,MAChB;AAAA,MACDA;AAAA,IACZ;AAEQ,oBAAgB,QAAQ,MAAM,YAAY,EAAE,UAAU,EAAC,GAAI,aAAa;AAExE,mBAAe,QAAQ,MAAM;AAAA,MACzB;AAAA,QACI,aAAa;AAAA,QACb,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU,WAAW;AAAA,QAChC,iBAAiB;AAAA,QACjB,eAAe;AAAA,QACf,QAAQ;AAAA,MACX;AAAA,MACD;AAAA,IACZ;AAEQ,UAAM,SAAS,CAAC,WAAW;AAC3B,UAAM,EAAE,mBAAmB,gBAAgB,YAAW,IAAKA;AAE3D,QAAI,mBAAmB;AACnB,UAAI,QAAQ;AAAA,QACR,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,YAAY;AAAA,QACZ,OAAO;AAAA,QACP,OAAO;AAAA,QACP,YAAY;AAAA,QACZ,WAAW;AAAA;AAAA,UAEP,MAAM;AAAA,UACN,OAAO;AAAA,UACP,WAAW;AAAA,QACd;AAAA,MACjB;AACY,cAAQ,MAAM,YAAY,eAAe,EAAE,MAAY,CAAE;AAAA,IAC5D;AASD,UAAM,aAAa,MAAM,KAAK,UAAU,IAAI,wBAAwB,QAAQ;AAAA,MACxE;AAAA,MACA;AAAA,IACZ,CAAS;AACD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,OAAO,iBAAiB,QAAQ,OAAO,OAAO;AAC1C,WAAO,KAAK,UAAU,IAAI,iBAAiB,QAAQ,IAAI;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,OAAO,iBAAiB,QAAQ,OAAO,OAAO;AAC1C,WAAO,KAAK,UAAU,IAAI,iBAAiB,QAAQ,IAAI;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,OAAO,gBAAgB,QAAQ,OAAO,OAAO;AACzC,WAAO,KAAK,UAAU,IAAI,gBAAgB,QAAQ,IAAI;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,OAAO,kBAAkB,QAAQ,OAAO,OAAO;AAC3C,WAAO,KAAK,UAAU,IAAI,kBAAkB,QAAQ,IAAI;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,OAAO,oBAAoB,QAAQ,OAAO,OAAO;AAC7C,WAAO,KAAK,UAAU,IAAI,oBAAoB,QAAQ,IAAI;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,OAAO,mBAAmB,QAAQ,OAAO,OAAO;AAC5C,WAAO,KAAK,UAAU,IAAI,mBAAmB,QAAQ,IAAI;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,OAAO,gBAAgB,QAAQ,OAAO,OAAO;AACzC,WAAO,KAAK,UAAU,IAAI,gBAAgB,QAAQ,IAAI;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,OAAO,mBAAmB,QAAQ,OAAO,OAAO;AAC5C,WAAO,KAAK,UAAU,IAAI,mBAAmB,QAAQ,IAAI;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,OAAO,qBAAqB,QAAQ,OAAO,OAAO;AAC9C,WAAO,KAAK,UAAU,IAAI,qBAAqB,QAAQ,IAAI;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,OAAO,gBAAgB,QAAQ;AAC3B,WAAO,KAAK,UAAU,IAAI,gBAAgB,MAAM;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,OAAO,gBAAgB,QAAQ;AAC3B,WAAO,KAAK,UAAU,IAAI,aAAa,MAAM;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,aAAa,YAAY,OAAO;AAC5B,UAAM,cAAc,gBAAgB,aAAa,KAAK;AACtD,QAAI,uBAAuB,OAAO;AAC9B,YAAM,YAAY,SAAS,OAAO,EAAE,WAAW,MAAK,CAAE;AAAA,IAClE,WAAmB,uBAAuB,eAAe;AAC7C,YAAM,YAAY,OAAO,EAAE,WAAW,MAAO,CAAA;AAAA,IACzD,OAAe;AACH,aAAO,IAAI,8BAA8B,WAAW;AAAA,IACvD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,aAAa,YAAY,OAAO;AAC5B,UAAM,cAAc,MAAM,gBAAgB,cAAc,KAAK;AAC7D,UAAM,cAAc,YAAY,eAAe;AAC/C,QAAI,aAAa;AACb,kBAAY,OAAO,EAAE,mBAAmB,MAAO,CAAA;AAAA,IAC3D,OAAe;AACH,aAAO,IAAI,8BAA8B,WAAW;AAAA,IACvD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,aAAa,UAAU,OAAO;AAC1B,UAAM,cAAc,MAAM,gBAAgB,cAAc,KAAK;AAC7D,UAAM,cAAc,YAAY,eAAe;AAC/C,QAAI,CAAC,aAAa;AACd,kBAAY,OAAO,EAAE,mBAAmB,KAAM,CAAA;AAAA,IAC1D,OAAe;AACH,aAAO,IAAI,4BAA4B,WAAW;AAAA,IACrD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWD,OAAO,cAAcI,OAAM;AAEvB,WAAO,KAAK,UAAU,IAAI,aAAaA,KAAI;AAAA,EAC9C;AAAA,EAED,OAAO,eAAe,KAAK;AAGvB,QAAI,QAAQ,QAAQ,QAAQ,QAAW;AACnC,aAAO;AAAA,IACV;AACD,QAAI,kBAAiB,cAAc,GAAG,GAAG;AACrC,aAAO;AAAA,IACV;AACD,QAAI,eAAe,UAAU,OAAO,KAAK,GAAG,EAAE,WAAW,GAAG;AACxD,aAAO;AAAA,IACV;AACD,QAAI,eAAe,SAAS,IAAI,WAAW,GAAG;AAC1C,aAAO;AAAA,IACV;AACD,QAAI,OAAO,OAAO,KAAK,GAAG,EAAE,WAAW,GAAG;AACtC,aAAO;AAAA,IACV;AACD,WAAO;AAAA,EACV;AAAA,EAED,OAAO,cAAc,UAAU;AAC3B,WAAO,CAAC,MAAM,QAAQ,KAAK,OAAO,aAAa,YAAY,SAAS,QAAQ;AAAA,EAC/E;AACL;AAtzCsC;AAClC,cADiB,mBACV,SAAQ;AAAA,EACX,SAAS;AAAA,EACT,MAAM;AAAA,EACN,MAAM;AAAA,EACN,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,SAAS;AAAA,EACT,KAAK;AAAA,EACL,SAAS;AAAA,EACT,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,gBAAgB;AAAA,EAChB,iBAAiB;AACzB;AAde,IAAM,mBAAN;ACIR,MAAM,oBAAN,MAAM,kBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO1B,aAAa,iBAAiB,OAAO,OAAO;AAExC,QAAI;AACA,WAAK,MAAM,MAAM,aAAa,QAAQ,YAAY,CAAC;AAAA,IACtD,SAAQ,KAAK;AACV,aAAO,MAAM,qBAAqB,OAAO,GAAG;AAC5C;AAAA,IACH;AAED,UAAM,aAAa,MAAM,OAAO;AAEhC,QAAI,cAAc;AAElB,UAAM,WAAW,cAAc,OAAO,WAAW,eAAe;AAGhE,QAAI,aAAa,WAAW,WAAW,UAAU,KAAK,WAAW,WAAW,MAAM,IAAI;AAClF,YAAM,cAAc,WAAW,MAAM,GAAG;AACxC,UAAI,YAAY,SAAS,GAAG;AACxB,sBAAc,OAAO,YAAY,CAAC,CAAC;AAAA,MACtC;AAAA,IACJ;AAED,UAAM,kBAAkB,CAAA;AACxB,QAAI,eAAe,GAAG;AAClB,sBAAgB,MAAM,MAAM,QAAQ,WAAW,EAAE;AAAA,IACpD;AAED,QAAI,gBAAgB,KAAK;AACrB,YAAM,wBAAwB,eAAe,CAAC,eAAe,CAAC;AAAA,IAC1E,OAAe;AAEH,YAAM,kBAAkB,MAAM,QAAQ,MAAM,QAAQ,SAAS,CAAC;AAC9D,UAAI,iBAAiB;AACjB,cAAM,cAAc,gBAAgB,MAAM,CAAC,IAAI,gBAAgB,MAAM,CAAC;AACtE,wBAAgB,SAAS,gBAAgB;AACzC,wBAAgB,QAAQ,CAAC,gBAAgB,MAAM,CAAC,GAAG,gBAAgB,MAAM,CAAC,IAAI,WAAW;AAAA,MACzG,OAAmB;AACH,wBAAgB,SAAS;AACzB,wBAAgB,QAAQ,CAAC,GAAG,CAAC;AAAA,MAChC;AACD,YAAM,wBAAwB,eAAe,CAAC,eAAe,CAAC;AAAA,IACjE;AAAA,EACJ;AAAA,EAED,aAAa,QAAQ,aAAa,eAAe,GAAG;AAChD,QAAI;AACA,YAAM,YAAY,OAAO,WAAW;AACpC,UAAI,aAAa,QAAQ,cAAc,MAAM,cAAc,KAAK;AAC5D,eAAO;AAAA,MACvB,OAAmB;AACH,YAAI;AACA,gBAAM,MAAM,MAAM,IAAI,KAAK,SAAS,EAAE,KAAK,EAAE,OAAO,KAAI,CAAE,GAAG,SAAS;AACtE,iBAAO;AAAA,QACV,SAAQ,GAAG;AACR,iBAAO,MAAM,EAAE,SAAS,OAAO,CAAC;AAChC,gBAAM,SAAS,KAAK,OAAO,SAAS;AACpC,gBAAM,MAAM,MAAM,OAAO,SAAS,EAAE,OAAO,KAAM,CAAA,GAAG,SAAS;AAC7D,iBAAO;AAAA,QACV;AAAA,MACJ;AAAA,IACJ,SAAQ,GAAG;AACR,aAAO,MAAM,EAAE,SAAS,OAAO,CAAC;AAChC,aAAO;AAAA,IACV;AAAA,EACJ;AAAA,EAED,OAAO,YAAY,aAAa,eAAe,GAAG;AAC9C,QAAI;AACA,YAAM,YAAY,OAAO,WAAW;AACpC,UAAI,aAAa,QAAQ,cAAc,MAAM,cAAc,KAAK;AAC5D,eAAO;AAAA,MACvB,OAAmB;AACH,YAAI;AACA,gBAAM,KAAK,IAAI,KAAK,SAAS,EAAE,KAAK,EAAE,OAAO,MAAK,CAAE,EAAE,SAAS;AAC/D,iBAAO;AAAA,QACV,SAAQ,GAAG;AACR,iBAAO,MAAM,EAAE,SAAS,OAAO,CAAC;AAChC,gBAAM,SAAS,KAAK,OAAO,SAAS;AACpC,gBAAM,KAAK,OAAO,SAAS,EAAE,OAAO,MAAO,CAAA,EAAE,SAAS;AACtD,iBAAO;AAAA,QACV;AAAA,MACJ;AAAA,IACJ,SAAQ,GAAG;AACR,aAAO,MAAM,EAAE,SAAS,OAAO,CAAC;AAChC,aAAO;AAAA,IACV;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,aAAa,YAAY,OAAO;AAC5B,UAAM,iBAAiB,SAAS,gBAAgB,KAAK;AACrD,QAAI,mBAAmB,UAAU,mBAAmB;AAChD,YAAM,cAAc,MAAM,QAAQ,UAAU,WAAW,UAAU,MAAM,kBAAkB;AACzF,aAAO,MAAM,kBAAiB,QAAQ,WAAW;AAAA,IAC7D,WAAmB,mBAAmB,UAAU,iBAAiB;AACrD,YAAM,cAAc,MAAM,QAAQ,UAAU,WAAW,UAAU,MAAM,eAAe;AACtF,aAAO,MAAM,kBAAiB,QAAQ,WAAW;AAAA,IAC7D,WAAmB,mBAAmB,UAAU,oBAAoB;AACxD,YAAM,cAAc,MAAM,QAAQ,UAAU,WAAW,UAAU,MAAM,kBAAkB;AACzF,aAAO,MAAM,kBAAiB,QAAQ,WAAW;AAAA,IAC7D,OAAe;AACH,YAAM,cAAc,MAAM,QAAQ,UAAU,WAAW,UAAU,MAAM,kBAAkB;AACzF,aAAO,MAAM,kBAAiB,QAAQ,WAAW;AAAA,IACpD;AAAA,EACJ;AAAA,EAED,aAAa,mCAAmC,QAAQ,YAAY;AAChE,WAAO,kBAAiB,2BAA2B,QAAQ,YAAY,IAAI;AAAA,EAC9E;AAAA,EAED,aAAa,2BAA2B,QAAQ,YAAY,WAAW,OAAO;AAC1E,QAAI,eAAe;AACnB,QAAI,UAAU,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,mBAAmB,EAAE;AACvG,QAAI,SAAS;AACT,UAAI,UAAU;AACV,uBAAe,aAAa,OAAO;AAAA,MACnD,OAAmB;AACH,uBAAe,MAAM,SAAS,OAAO;AAAA,MACxC;AAAA,IACJ;AACD,QAAI,CAAC,cAAc;AACf,UAAI,OAAO,SAAS,MAAM,mBAAmB,YAAY;AAErD,YAAI,aAAa,MAAM,gBAAgB;AAAA,UACnC,OAAO;AAAA,UACP;AAAA,UACA;AAAA,QACpB;AACgB,YAAI,CAAC,YAAY;AACb,cAAI,YAAY;AACZ,kBAAM,OAAO,MAAM,cAAc,OAAO,kBAAkB,gBAAgB;AAAA,UAClG,OAA2B;AACH,mBAAO,KAAK,cAAc,OAAO,kBAAkB,gBAAgB;AACnE,mBAAO;AAAA,UACV;AAAA,QACJ;AACD,YAAI,UAAU;AAEV,yBAAe,mBAAmB,0BAA0B,WAAW,SAAS,IAAI;AAAA,YAChF,IAAI,OAAO;AAAA,UACnC,CAAqB;AAAA,QACrB,OAAuB;AAEH,yBAAe,MAAM,mBAAmB,2BAA2B,WAAW,SAAS,IAAI;AAAA,YACvF,IAAI,OAAO;AAAA,UACnC,CAAqB;AAAA,QACJ;AAED,YAAI,CAAC,cAAc;AACf,cAAI,YAAY;AACZ,kBAAM,OAAO;AAAA,cACT,QAAQ,OAAO,UAAU,0CAA0C,OAAO,kBAAkB;AAAA,YACxH;AAAA,UACA,OAA2B;AACH,mBAAO;AAAA,cACH,QAAQ,OAAO,UAAU,0CAA0C,OAAO,kBAAkB;AAAA,YACxH;AACwB,mBAAO;AAAA,UACV;AAAA,QACJ;AAAA,MACJ,WAAU,OAAO,SAAS,MAAM,mBAAmB,UAAU;AAC1D,YAAI,aAAa,KAAK,YAAY,IAAI,OAAO,kBAAkB;AAC/D,YAAI,CAAC,YAAY;AACb,cAAI,YAAY;AACZ,kBAAM,OAAO,MAAM,cAAc,OAAO,kBAAkB,gBAAgB;AAAA,UAClG,OAA2B;AACH,mBAAO,KAAK,cAAc,OAAO,kBAAkB,gBAAgB;AACnE,mBAAO;AAAA,UACV;AAAA,QACJ;AACD,YAAI,YAAY;AACZ,cAAI,UAAU;AACV,2BAAe,WAAW,SAAS,KAAK,CAAC,MAAM,EAAE,OAAO,GAAG,OAAO,UAAU,EAAE;AAAA,UACtG,OAA2B;AACH,2BAAe,WAAW,SAAS,KAAK,CAAC,MAAM,EAAE,OAAO,GAAG,OAAO,UAAU,EAAE;AAAA,UAEjF;AAED,cAAI,CAAC,cAAc;AACf,gBAAI,YAAY;AACZ,oBAAM,OAAO;AAAA,gBACT,QAAQ,OAAO,UAAU,0CAA0C,OAAO,kBAAkB;AAAA,cAC5H;AAAA,YACA,OAA+B;AACH,qBAAO;AAAA,gBACH,QAAQ,OAAO,UAAU,0CAA0C,OAAO,kBAAkB;AAAA,cAC5H;AAC4B,qBAAO;AAAA,YACV;AAAA,UACJ;AAAA,QACrB,OAAuB;AACH,yBAAe,SAAS,GAAG,OAAO,YAAY,IAAI,OAAO,UAAU,EAAE;AACrE,cAAI,CAAC,cAAc;AACf,gBAAI,YAAY;AACZ,oBAAM,OAAO;AAAA,gBACT,QAAQ,OAAO,UAAU,0CAA0C,OAAO,YAAY,IAAI,OAAO,UAAU;AAAA,cAC3I;AAAA,YACA,OAA+B;AACH,qBAAO;AAAA,gBACH,QAAQ,OAAO,UAAU,0CAA0C,OAAO,YAAY,IAAI,OAAO,UAAU;AAAA,cAC3I;AAC4B,qBAAO;AAAA,YACV;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACD,QAAI,CAAC,cAAc;AACf,aAAO;AAAA,QACH,oDAAoD,MAAM,mBAAmB,UAAU,SAAS,MAAM,mBAAmB,QAAQ;AAAA,MACjJ;AACY,qBAAe;AAAA,IAClB;AACD,WAAO;AAAA,EACV;AAAA,EAED,aAAa,kBAAkB,gBAAgB;AAC3C,QAAI,WAAW;AAEf,QAAI,SAAS,0BAA0B,cAAc,eAAe,SAAS,KAAK,IAAI;AACtF,WAAO,SAAS,OAAO,SAAS,MAAM,mBAAmB;AACzD,WAAO,aAAa,OAAO,SAAS,MAAM,mBAAmB;AAC7D,WAAO,eAAe,OAAO,SAAS,MAAM,mBAAmB;AAC/D,WAAO,MAAM,OAAO,QAAQ,OAAO,OAAO,OAAO,UAAU;AAC3D,WAAO,OAAO,WAAW,WAAW,OAAO,IAAI;AAE/C,WAAO,YAAY,OAAO,QAAQ;AAElC,WAAO,YAAY,OAAO,UAAU,WAAW,QAAQ,EAAE;AACzD,WAAO,YAAY,OAAO,UAAU,WAAW,OAAO,EAAE;AACxD,WAAO,YAAY,OAAO,UAAU,KAAI;AAExC,WAAO,OAAO,OAAO;AACrB,WAAO,eAAe,OAAO;AAC7B,WAAO,OAAO,eAAe,QAAQ;AACrC,UAAM,YAAY,MAAM,kBAAiB,mCAAmC,QAAQ,KAAK;AACzF,WAAO,UAAU,WAAW,QAAQ;AACpC,WAAO,cAAc;AAIrB,UAAM,cAAc,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,mBAAmB,EAAE;AAC7G,UAAM,sBAAsB;AAAA,MACxB;AAAA,MACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,4BAA4B;AAAA,IACxF;AACQ,UAAM,oBAAoB;AAAA,MACtB;AAAA,MACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B;AAAA,IACtF;AACQ,UAAM,sBAAsB;AAAA,MACxB;AAAA,MACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,4BAA4B;AAAA,IACxF;AACQ,UAAM,oBAAoB;AAAA,MACtB;AAAA,MACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B;AAAA,IACtF;AACQ,UAAM,0BAA0B;AAAA,MAC5B;AAAA,MACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,gCAAgC;AAAA,IAC5F;AACQ,UAAM,wBAAwB;AAAA,MAC1B;AAAA,MACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,8BAA8B;AAAA,IAC1F;AAEQ,UAAM,2BAA2B;AAAA,MAC7B;AAAA,MACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B;AAAA,IACvF;AAEQ,QAAI,OAAO,cAAc,OAAO,cAAc;AAC1C,UAAI,OAAO,YAAY,CAAC,eAAe,gBAAgB,OAAO,UAAU;AACpE;AAAA,UACI;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,mBAAmB;AAAA,UACnE,OAAO;AAAA,QAC3B;AACgB,mBAAW;AAAA,MACd;AAED,UAAI,4BAA4B,CAAC,uBAAuB;AACpD;AAAA,UACI;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,8BAA8B;AAAA,UAC9E;AAAA,QACpB;AACgB,oBAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B,IAAI,EAAE;AAAA,MACxG;AAED,UACI,OAAO,YACP,4BAA4B,OAAO,YACnC,yBACA,0BAA0B,OAAO,UACnC;AACE;AAAA,UACI;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,gCAAgC;AAAA,UAChF,OAAO;AAAA,QAC3B;AACgB,mBAAW;AAAA,MACd;AAqBD,UAAI,OAAO,uBAAuB,gBAAgB;AAC9C,YAAI,OAAO,SAAS;AAChB,iBAAO,YAAY;AACnB,gBAAM,eAAe,MAAM,SAAS,OAAO,OAAO;AAClD,cAAI,cAAc,MAAM,OAAO,GAAG;AAC9B,kBAAM,cAAc,aAAa,MAAM,SAAS,KAAK,CAAC,GAAG,MAAM,EAAE,OAAO,EAAE,IAAI;AAC9E,kBAAM,eAAe,CAAA;AACrB,yBAAa,KAAK;AAAA,cACd,MAAM;AAAA,cACN,MAAM;AAAA,YAClC,CAAyB;AACD,uBAAW,QAAQ,aAAa;AAC5B,2BAAa,KAAK;AAAA,gBACd,MAAM,KAAK;AAAA,gBACX,MAAM,KAAK;AAAA,cAC3C,CAA6B;AAAA,YACJ;AACD,mBAAO,eAAe;AAAA,UAC9C,OAA2B;AACH,mBAAO,eAAe;UACzB;AAAA,QACJ;AAAA,MACJ;AAGD,UAAI,OAAO,SAAS;AAChB,YAAI,gBAAgB;AACpB,YAAI,WAAW,cAAc;AACzB,0BAAgB,WAAW;AAAA,QAC/C,WAA2B,UAAU,QAAQ,KAAK,MAAM,IAAI,UAAU,IAAI,GAAG;AACzD,0BAAgB,KAAK,MAAM,IAAI,UAAU,IAAI,GAAG,eAAe;AAAA,QACnF,WAA2B,UAAU,sBAAsB,KAAK,MAAM,IAAI,UAAU,kBAAkB,GAAG;AACrF,0BAAgB,KAAK,MAAM,IAAI,UAAU,kBAAkB,GAAG,eAAe;AAAA,QACjG,WAA2B,UAAU,oBAAoB;AACrC,0BAAgB,UAAU;AAAA,QAC7B;AAED,YAAI,kBAAkB,UAAU,OAAO,QAAQ,SAAS,OAAO,GAAG;AAE9D,iBAAO,cAAc;AAAA,QACzC,WAA2B,kBAAkB,WAAW,OAAO,QAAQ,SAAS,QAAQ,GAAG;AACvE,iBAAO,cAAc;AAAA,QACzC,WAA2B,kBAAkB,eAAe,OAAO,QAAQ,SAAS,YAAY,GAAG;AAC/E,iBAAO,cAAc;AAAA,QACxB;AAAA,MAIJ;AAAA,IACJ;AAED,QACI,OAAO,QACP,wBAAwB,OAAO,QAC/B,qBACA,sBAAsB,OAAO,MAC/B;AACE;AAAA,QACI;AAAA,QACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,4BAA4B;AAAA,QAC5E,OAAO;AAAA,MACvB;AACY,iBAAW;AAAA,IACd;AACD,QAAI,OAAO,QAAQ,CAAC,mBAAmB;AACnC;AAAA,QACI;AAAA,QACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B;AAAA,QAC1E,OAAO;AAAA,MACvB;AACY,iBAAW;AAAA,IACd;AAED,QAAI,OAAO,OAAO,wBAAwB,OAAO,OAAO,qBAAqB,sBAAsB,OAAO,KAAK;AAC3G;AAAA,QACI;AAAA,QACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,4BAA4B;AAAA,QAC5E,OAAO;AAAA,MACvB;AACY,iBAAW;AAAA,IACd;AACD,QAAI,OAAO,OAAO,CAAC,mBAAmB;AAClC;AAAA,QACI;AAAA,QACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B;AAAA,QAC1E,OAAO;AAAA,MACvB;AACY,iBAAW;AAAA,IACd;AAGD,QAAI,CAAC,OAAO,OAAO,OAAO,QAAQ,OAAO,UAAU,YAAY;AAC3D,aAAO,MAAM,qBAAqB,WAAW,OAAO,OAAO,UAAU;AAAA,IACxE;AAED,WAAO;AAAA,MACH;AAAA,MACA;AAAA,IACZ;AAAA,EACK;AAAA,EAED,aAAa,uBAAuB,OAAO;AAEvC,QAAI,YAAY,MAAM,QAAQ,OAAO,CAAC,MAAM,CAAC,EAAE,KAAK;AACpD,QAAI,CAAC,UAAU,QAAQ;AACnB,aAAO,KAAK,KAAK,KAAK,SAAS,0BAA0B,GAAG,IAAI;AAChE,aAAO,EAAE,MAAM;IAClB;AAED,UAAM,iBAAiB,SAAS,gBAAgB,KAAK;AAErD,UAAM,sBAAsB;AAAA,MACxB;AAAA,MACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,sBAAsB;AAAA,IAClF;AACQ,QAAI,uBAAuB,mBAAmB,UAAU,oBAAoB;AACxE,YAAM,eAAe,CAAA;AACrB,iBAAW,KAAK,WAAW;AACvB,cAAM,mBAAmB;AAAA,UACrB;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,+BAA+B;AAAA,QACnG;AACgB,YAAI,kBAAkB;AAClB,gBAAM,iBAAiB,kBAAkB,0BAA0B,gBAAgB;AACnF,gBAAM,eAAe,QAAQ,MAAM,UAAU,CAAC;AAC9C;AAAA,YACI;AAAA,YACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,+BAA+B;AAAA,YAC/E;AAAA,UACxB;AACoB,uBAAa,KAAK,YAAY;AAAA,QAClD,OAAuB;AACH,uBAAa,KAAK,CAAC;AAAA,QACtB;AAAA,MACJ;AACD,kBAAY;AAAA,IACf;AAKD,UAAM,iBAAiB,UAAU;AAAA,MAC7B,CAAC,OAAO,WAAW;AACf,cAAM,IAAI,OAAO;AACjB,YAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,IAAI,MAAM,CAAC;AAAG,gBAAM,CAAC,IAAI,EAAE,CAAC;AAChD,YAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,IAAI,MAAM,CAAC;AAAG,gBAAM,CAAC,IAAI,EAAE,CAAC;AAChD,eAAO;AAAA,MACV;AAAA,MACD,CAAC,MAAM,IAAI;AAAA,IACvB;AACQ,WAAO;AAAA,EACV;AACL;AAxe8B;AAAvB,IAAM,mBAAN;ACKA,MAAM,6CAAN,MAAM,2CAA0C;AAAA,EACnD,YAAY,gBAAgB,WAAW;AAEnC,QAAI,aAAa,eAAe,CAAC;AAEjC,QAAI,MAAM;AAAA,MACN,MAAM,WAAW,SAAS;AAAA,MAC1B,OAAO,WAAW,SAAS,WAAW,SAAS;AAAA,IAC3D;AAEQ,WAAO,KAAK,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,qCAAqC,GAAG,GAAG,IAAI;AAClG,UAAML,YAAW,KAAK,eAAe,UAAU;AAC/C,WAAO,KAAK,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,wCAAwC,GAAG,GAAG,IAAI;AACrG,WAAOA;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcD,SAAS,KAAK,UAAU;AACpB,WAAO,IAAI,OAAO,SAAU,MAAM,GAAG;AACjC,UAAI,CAAC,KAAK,YAAY,GAAG,QAAQ,CAAC,GAAG;AACjC,aAAK,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAA;AAAA,MACpC;AACD,WAAK,YAAY,GAAG,QAAQ,CAAC,EAAE,KAAK,CAAC;AACrC,aAAO;AAAA,IACV,GAAE,CAAE,CAAA;AAAA,EACR;AAAA,EAED,4BAA4B,YAAY;AACpC,QAAI,CAAC,YAAY;AACb,aAAO;AAAA,IACV;AACD,UAAM,oBAAoB,OAAO,UAAU,EAAE,YAAW,EAAG;AAE3D,UAAM,IAAI,KAAK,SAAS,IAAI,iBAAiB;AAC7C,WAAO;AAAA,EACV;AAAA,EAED,iBAAiB,KAAK;AAClB,WAAO,KAAK,KAAK,GAAG;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcD,MAAM,eAAe,YAAYC,WAAU,IAAI;AAG3C,UAAMC,WAAU,MAAM,QAAQ;AAAA;AAAA,MAE1B,WAAW,MAAM,SAAS,IAAI,OAAO,IAAI,MAAM;AAC3C,eAAO,IAAI,qBAAqB,EAAE;AAClC,eAAO,IAAI,sBAAsB,CAAC;AAClC,cAAM,IAAI,MAAM,SAAS,GAAG,IAAI;AAChC,cAAM,UAAU,YAAY,GAAG,yBAAyB;AACxD,cAAM,aAAa,YAAY,GAAG,iCAAiC;AACnE,cAAM,cAAc,YAAY,GAAG,eAAe;AAElD,cAAM,aAAa,KAAK,4BAA4B,UAAU,KAAK;AAEnE,YAAI,UAAU,EAAE;AAChB,YAAI,QAAQ;AACZ,YAAI,QAAQ,SAAS,IAAI,GAAG;AACxB,oBAAU,QAAQ,QAAQ,MAAM,EAAE;AAClC,kBAAQ;AAAA,QACX;AACD,YAAI,MAAM;AACV,YAAI,UAAU,WAAW,WAAW,EAAE,IAAI;AAC1C,YAAI,KAAK,iBAAiB,OAAO,GAAG;AAChC,cAAI,SAAS,QAAQ,MAAM,KAAK,EAAE,CAAC;AACnC,gBAAM,QAAQ,OAAO,SAAS,MAAM,IAAI,OAAO,SAAS,MAAM,CAAC;AAC/D,cAAI,OAAO,GAAG;AACV,kBAAM;AAAA,UACT;AACD,cAAI,gBAAgB,aAAa,SAAS,KAAK,GAAG;AAClD,0BAAgB,cAAc,QAAQ,UAAU,EAAE;AAClD,0BAAgB,cAAc,QAAQ,MAAM,EAAE;AAC9C,0BAAgB,cAAc,QAAQ,MAAM,EAAE;AAC9C,0BAAgB,iBAAiB;AAEjC,cAAI,WAAW,QAAQ,QAAQ,QAAQ,EAAE,EAAE,MAAM,GAAG;AACpD,cAAI,SAAS,SAAS,GAAG;AACrB,sBAAU,UAAU,SAAS,IAAI,SAAS,CAAC,IAAI;AAAA,UAClD;AAGD,oBAAU,QAAQ,KAAI,IAAK,MAAM,cAAc;AAC/C,oBAAU,QAAQ,QAAQ,UAAU,OAAO;AAC3C,oBAAU,QAAQ,QAAQ,UAAU,OAAO;AAC3C,oBAAU,QAAQ,QAAQ,UAAU,OAAO;AAC3C,oBAAU,QAAQ,QAAQ,UAAU,OAAO;AAC3C,oBAAU,QAAQ,QAAQ,SAAS,MAAM;AACzC,oBAAU,QAAQ,QAAQ,SAAS,MAAM;AACzC,oBAAU,QAAQ,QAAQ,SAAS,MAAM;AACzC,oBAAU,QAAQ,QAAQ,SAAS,MAAM;AACzC,oBAAU,QAAQ,QAAQ,QAAQ,KAAK;AACvC,oBAAU,QAAQ,QAAQ,QAAQ,KAAK;AACvC,oBAAU,QAAQ,QAAQ,SAAS,MAAM;AACzC,oBAAU,QAAQ,QAAQ,SAAS,MAAM;AACzC,oBAAU,QAAQ,QAAQ,MAAM,EAAE;AAClC,oBAAU,QAAQ;QACrB;AAaD,eAAO;AAAA,UACH,MAAM,EAAE;AAAA,UACR,MAAM,MAAM,mBAAmB;AAAA,UAC/B,YAAY,WAAW;AAAA,UACvB,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE;AAAA,UAC1B,KAAK,EAAE,aAAa,EAAE,OAAO,OAAO,UAAU;AAAA,UAC9C,QAAQ;AAAA,UACR,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;AAAA,UACpB,oBAAoB,GAAG,WAAW,SAAS,WAAW,IAAI,WAAW,SAAS,IAAI;AAAA,UAClF,OAAO;AAAA,UACP,OAAO;AAAA,YACH,CAAC,GAAG,UAAU,SAAS,EAAE,GAAG;AAAA;AAAA,cAExB,CAAC,GAAG,UAAU,MAAM,oBAAoB,EAAE,GAAG,OAAO,OAAO,KAAK;AAAA,cAChE,CAAC,GAAG,UAAU,MAAM,uBAAuB,EAAE,GAAG,cAAc;AAAA,cAC9D,CAAC,GAAG,UAAU,MAAM,wBAAwB,EAAE,GAAG,eAAe;AAAA,cAChE,CAAC,GAAG,UAAU,MAAM,mBAAmB,EAAE,GAAG,GAAG,QAAQ;AAAA,cACvD,CAAC,GAAG,UAAU,MAAM,0BAA0B,EAAE,GAAG,WAAW;AAAA,cAC9D,CAAC,GAAG,UAAU,MAAM,0BAA0B,EAAE,GAAG;AAAA,cACnD,CAAC,GAAG,UAAU,MAAM,8BAA8B,EAAE,GAAG,OAAO,GAAG,KAAK;AAAA,cACtE,CAAC,GAAG,UAAU,MAAM,4BAA4B,EAAE,GAAG,EAAE,QAAQ;AAAA,cAC/D,CAAC,GAAG,UAAU,MAAM,4BAA4B,EAAE,GAAG,EAAE,OAAO;AAAA,cAC9D,CAAC,GAAG,UAAU,MAAM,gCAAgC,EAAE,GAClD,iBAAiB,gBAAgB,CAAC,KAAK;AAAA,YAC9C;AAAA,UACJ;AAAA,QACrB;AAAA,MACA,CAAa;AAAA,IACb;AAEQ,WAAO,MAAM,KAAK,yBAAyB,WAAW,SAAS,OAAOA,UAAS,KAAKA,SAAQ,MAAM,IAAID,QAAO;AAAA,EAChH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,MAAM,yBAAyB,gBAAgBC,UAAS,SAASD,WAAU,CAAA,GAAI;AAC3E,UAAM,+BAA+B,KAAK;AAAA,MACtCC;AAAA,MACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,wBAAwB;AAAA,IACpF;AACQ,UAAM,YAAY,CAAA;AAElB,eAAW,CAAC,KAAK,MAAM,KAAK,OAAO,QAAQ,4BAA4B,GAAG;AAEtE,UAAI,eAAe;AACnB,UAAI,kBACA,QAAQ,SAAS,IACX,YAAY,OAAO,CAAC,GAAG,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,uBAAuB,EAAE,IAChG;AACV,UAAI,SAAS,OAAO,UAAU,IAAI,OAAO,SAAS,IAAI,OAAO;AAE7D,YAAMF,YAAW,MAAM,UAAU;AAAA,QAC7B;AAAA,UACI,MAAM,wBAAwB,MAAM;AAAA,UACpC,aAAa,+BAA+B,cAAc,oDAAoD,GAAG;AAAA,UACjH,SAAS;AAAA,UACT,SAAS,KAAK,MAAM;AAAA,UACpB,OAAO;AAAA,YACH,CAAC,GAAG,UAAU,SAAS,EAAE,GAAG;AAAA,cACxB,CAAC,GAAG,UAAU,MAAM,cAAc,EAAE,GAAG,UAAU;AAAA,cACjD,CAAC,GAAG,UAAU,MAAM,oBAAoB,EAAE,GAAG,OAAO,YAAY,KAAK;AAAA,cACrE,CAAC,GAAG,UAAU,MAAM,uBAAuB,EAAE,GAAG,mBAAmB;AAAA,cACnE,CAAC,GAAG,UAAU,MAAM,wBAAwB,EAAE,GAAG,OAAO;AAAA,cACxD,CAAC,GAAG,UAAU,MAAM,uBAAuB,EAAE,GAAG;AAAA,cAChD,CAAC,GAAG,UAAU,MAAM,oCAAoC,EAAE,GAAG;AAAA,cAC7D,CAAC,GAAG,UAAU,MAAM,kBAAkB,EAAE,GAAG,UAAU;AAAA,YACxD;AAAA,UACJ;AAAA,UACD,KAAK;AAAA,QACR;AAAA,QACDC;AAAA,MAChB;AACY,YAAMD,UAAS;AACf,gBAAU,KAAKA,SAAQ;AAAA,IAC1B;AACD,WAAO;AAAA,EACV;AAAA,EAED,WAAW,oBAAI,IAAI;AAAA,IACf,CAAC,cAAc,KAAK;AAAA,IACpB,CAAC,mBAAmB,KAAK;AAAA,IACzB,CAAC,UAAU,KAAK;AAAA,IAChB,CAAC,aAAa,KAAK;AAAA,IACnB,CAAC,aAAa,KAAK;AAAA,IACnB,CAAC,WAAW,KAAK;AAAA,IACjB,CAAC,WAAW,KAAK;AAAA,IACjB,CAAC,iBAAiB,KAAK;AAAA,IACvB,CAAC,gBAAgB,KAAK;AAAA,IACtB,CAAC,YAAY,KAAK;AAAA,IAClB,CAAC,UAAU,KAAK;AAAA,IAChB,CAAC,cAAc,KAAK;AAAA,IACpB,CAAC,cAAc,KAAK;AAAA,IACpB,CAAC,eAAe,KAAK;AAAA,IACrB,CAAC,YAAY,KAAK;AAAA,IAClB,CAAC,mBAAmB,KAAK;AAAA,IACzB,CAAC,WAAW,KAAK;AAAA,IACjB,CAAC,YAAY,KAAK;AAAA,EAC1B,CAAK;AACL;AA5OuD;AAAhD,IAAM,4CAAN;ACDA,MAAM,gCAAN,MAAM,8BAA6B;AAAA;AAAA;AAAA;AAAA,EAItC,aAAa,gCAAgC,gBAAgB,EAAE,kBAAkB,KAAI,IAAK,CAAA,GAAI;AAC1F,QAAI,iBAAiB,CAAA;AACrB,QAAI,gBAAgB;AAChB,YAAM,SAAS,MAAM,gBAAgB,6BAA6B,gBAAgB,MAAM,KAAK;AAC7F,UAAI,CAAC,QAAQ;AACT,eAAO,KAAK,gCAAgC,cAAc,KAAK,IAAI;AACnE;AAAA,MACH;AACD,uBAAiB,CAAC,MAAM;AAAA,IACpC,OAAe;AACH,uBAAiB,MAAM,KAAK,MAAM;AAAA,IACrC;AACD,QAAI,YAAY,MAAM,KAAK,cAAc,KAAK,KAAI;AAClD,UAAM,YAAY,IAAI,4BAA4B,gBAAgB,WAAW;AAAA,MACzE;AAAA,IACZ,CAAS,EAAE,OAAO,IAAI;AACd,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA,EAKD,aAAa,oDAAoD,EAAE,kBAAkB,KAAI,IAAK,CAAA,GAAI;AAC9F,QAAI,CAAC,KAAK,QAAQ,IAAI,WAAW,GAAG,QAAQ;AACxC,aAAO,KAAK,4CAA4C,IAAI;AAC5D;AAAA,IACH;AACD,UAAM,SAAS,MAAM,gBAAgB,6BAA6B,qBAAqB,OAAO,KAAK;AACnG,QAAI,iBAAiB,CAAC,MAAM;AAC5B,QAAI,YAAY,MAAM,KAAK,cAAc,KAAK,KAAI;AAClD,UAAM,YAAY,IAAI;AAAA,MAClB;AAAA,MACA;AAAA,MACC,EAAE,kBAAkB,KAAI,IAAK,CAAE;AAAA,IAC5C;AACQ,WAAO;AAAA,EACV;AAAA,EAED,aAAa,sBAAsB,gBAAgB,WAAW,EAAE,kBAAkB,KAAM,IAAG,IAAI;AAC3F,UAAM,SAAS,MAAM,gBAAgB,6BAA6B,gBAAgB,MAAM,KAAK;AAC7F,UAAM,aAAa;AACnB,QAAI,CAAC,YAAY;AACb,aAAO;AAAA,QACH,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,+BAA+B,EAAE,MAAM,gBAAgB;AAAA,QAC9F;AAAA,MAChB;AACY;AAAA,IACH;AAED,QAAI,MAAM;AAAA,MACN,MAAM;AAAA,MACN;AAAA,MACA,OAAO,WAAW,SAAS,WAAW,SAAS;AAAA,MAC/C,iBAAiB,MAAM,WAAW,SAAU,GAAE;AAAA,IAC1D;AAEQ,QAAI,CAAC,IAAI,gBAAgB;AACrB,aAAO,KAAK,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,4BAA4B,GAAG,GAAG,IAAI;AACzF;AAAA,IACH;AAED,WAAO,KAAK,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,qCAAqC,GAAG,GAAG,IAAI;AAElG,UAAMA,YAAW,WACZ,aAAc,EACd,KAAK,CAAC,oBAAoB;AACvB,aAAO,gBAAgB,IAAI,CAACK,WAAU;AAAA,QAClC,MAAM,MAAM,mBAAmB;AAAA,QAC/B,YAAY;AAAA,QACZ,MAAMA,MAAK;AAAA,QACX,KAAKA,MAAK,aAAaA,MAAK,OAAO,OAAO,UAAU;AAAA,QACpD,QAAQ,kBAAkB,gBAAgBA,KAAI,IAAI;AAAA,QAClD,OAAO,CAAC,GAAG,CAAC;AAAA,MACf,EAAC;AAAA,IAClB,CAAa,EACA;AAAA,MAAK,CAACH,aACH,UAAU,OAAO;AAAA,QACb,MAAM;AAAA,QACN,SAASA,SAAQ,OAAO,CAAC,MAAM,EAAE,WAAW,CAAC;AAAA;AAAA,MACjE,CAAiB;AAAA,IACJ,EACA,KAAK,CAAC,cAAc;AACjB,gBAAU,UAAS;AACnB,aAAO,KAAK,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,wCAAwC,GAAG,GAAG,IAAI;AACrG,aAAO;AAAA,IACvB,CAAa;AACL,WAAOF;AAAA,EACV;AACL;AA5F0C;AAAnC,IAAM,+BAAN;ACPA,MAAM,wCAAN,MAAM,sCAAqC;AAAA;AAAA;AAAA;AAAA;AAAA,EAK9C,aAAa,0BAA0B,aAAa,MAAM,iBAAiB;AACvE,QAAI,CAAC,KAAK,KAAK,MAAM;AACjB,aAAO,KAAK,6CAA6C,IAAI;AAC7D;AAAA,IACH;AACD,QAAI,CAAC,YAAY;AACb,aAAO,KAAK,+CAA+C,IAAI;AAC/D;AAAA,IACH;AAGD,UAAMK,QAAO,MAAM,SAAS,4BAA4B,UAAU;AAGlE,UAAM,WAAW,KAAK,IAAI,IAAI,MAAM,KAAK,IAAI,GAAGA,MAAK,KAAK,SAAS,EAAE,IAAI,CAAC;AAC1E,UAAM,eAAe;AAAA,MACjB,IAAI;AAAA,MACJ;AAAA,MACA,WAAW,CAAC,EAAE,MAAMA,OAAM,UAAU,GAAG,UAAoB,MAAM,GAAG;AAAA,IAChF;AACQ,UAAM,WAAW,MAAM;AAAA,MACnB,WAAW,UAAU,SAAS;AAAA,MAC9B;AAAA,IACZ;AACQ,QAAI,WAAW;AAAA,MACX,QAAQ,0BAA0BA,MAAK,IAAI;AAAA,MAC3C,OAAO;AAAA,MACP,MAAM,KAAK,KAAK;AAAA,MAChB,SAAS;AAAA,IACrB;AAEQ,QAAI,CAAC,iBAAiB;AAClB,kBAAY,OAAO,QAAQ;AAAA,IAC9B;AACD,WAAO;AAAA,EACV;AACL;AAzCkD;AAA3C,IAAM,uCAAN;ACOA,MAAM,gBAAN,MAAM,cAAa;AAAA;AAAA;AAAA;AAAA;AAAA,EAKtB,YAAY,eAAe,cAAc,UAAUE,OAAM;AACrD,SAAK,gBAAgB;AACrB,SAAK,eAAe;AACpB,SAAK,WAAW,YAAY,QAAQ;AACpC,SAAK,OAAOA;AACZ,SAAK,YAAY;AACjB,SAAK,cAAc;AACnB,SAAK,gBAAgB;AACrB,SAAK,yBAAyB;AAC9B,eAAW,UAAU,KAAK,eAAe;AACrC,UAAI,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B,EAAE,GAAG;AACpG,aAAK,yBAAyB;AAC9B;AAAA,MACH;AAAA,IACJ;AAAA,EACJ;AAAA,EAED,MAAM,oBAAoB;AAGtB,eAAW,UAAU,iBAAiB,kBAAkB,KAAK,aAAa,GAAG;AACzE,WAAK;AACL,YAAM,WAAW,OAAO;AACxB,UAAI,OAAO;AACX,UAAI,OAAO,UAAU,OAAO,SAAS,MAAM,mBAAmB,MAAM;AAChE,eAAO,MAAM,mBAAmB;AAAA,MAChD,WAAuB,OAAO,QAAQ,OAAO,SAAS,MAAM,mBAAmB,YAAY;AAC3E,eAAO,MAAM,mBAAmB;AAAA,MAChD,WAAuB,OAAO,sBAAsB,OAAO,SAAS,MAAM,mBAAmB,UAAU;AACvF,eAAO,MAAM,mBAAmB;AAAA,MAChD,OAAmB;AACH,cAAM,OAAO,MAAM,8CAA8C,MAAM,MAAM;AAAA,MAChF;AAKD,UAAI,mBAAmB;AACvB,UAAI,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B,EAAE,GAAG;AACnG,2BACI,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B,EAAE,KAChG;AAAA,MACP;AAED,UAAI,kBAAkB;AACtB,UAAI,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B,EAAE,GAAG;AACnG,0BACI,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B,EAAE,KAChG;AAAA,MACP;AACD,UAAI,iBAAiB;AACrB,UAAI,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B,EAAE,GAAG;AAWpG,yBACI;AAAA,UACI;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B;AAAA,QAC9E,KAAI;AAAA,MACZ;AACD,YAAM,aAAa;AAAA,QACf;AAAA,QACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,mBAAmB;AAAA,MACnF;AACY,UAAI,aAAa,MAAM,SAAS,UAAU;AAE1C,YAAM,WAAW,aACX,KAAK,IAAI,IAAI,MAAM,KAAK,IAAI,IAAI,oBAAoB,WAAW,QAAQ,OAAO,MAAM,SAAS,EAAE,IAAI,CAAC,IACpG,KAAK,IAAI,IAAI,MAAM,KAAK,IAAI,IAAI,OAAO,QAAQ,OAAO,MAAM,SAAS,EAAE,IAAI,CAAC;AAElF,UAAI,OAAO,SAAS,MAAM,mBAAmB,QAAQ,CAAC,YAAY;AAC9D,eAAO,MAAM,8BAA8B,UAAU,GAAG;AACxD,aAAK,YAAY,KAAK;AAAA,UAClB,IAAI,OAAO;AAAA,UACX,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,UAChD,KAAK,mBAAmB,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO;AAAA,UACnE,QAAQ;AAAA,UACR,cAAc,OAAO;AAAA,UACrB,gBAAgB,OAAO;AAAA,UACvB;AAAA,UACA,MAAM;AAAA,YACF,IAAI,OAAO;AAAA,YACX,KAAK,OAAO;AAAA,YACZ,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,YAChD,KACI,mBAAmB,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO;AAAA,YAClE,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,YAChD,MAAM;AAAA,YACN,UAAU;AAAA,YACV;AAAA;AAAA,YAEA;AAAA,UACH;AAAA,UACD,UAAU;AAAA,UACV;AAAA;AAAA,UAEA;AAAA,QACpB,CAAiB;AACD,YACI,CAAC;AAAA,UACG;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,yCAAyC;AAAA,QAC5F,KACD,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B,EAAE,GACnG;AACE;AAAA,QACH;AACD,YAAI,gBAAgB;AAChB,eAAK,UAAU,KAAK;AAAA,YAChB,IAAI,OAAO;AAAA,YACX,MAAgC,OAAO,QAAQ,OAAO;AAAA,YACtD,KAEI,OAAO,QACP,OAAO,OACP,OAAO,OACP;AAAA,YACJ,QAAQ;AAAA,YACR,cAAc,OAAO;AAAA,YACrB,gBAAgB,OAAO;AAAA,YACvB;AAAA,YACA,MAAM;AAAA,cACF,IAAI,OAAO;AAAA,cACX,KAAK,OAAO;AAAA,cACZ,MAAgC,OAAO,QAAQ,OAAO;AAAA,cACtD,KAEI,OAAO,QACP,OAAO,OACP,OAAO,OACP;AAAA,cACJ,MAAgC,OAAO,QAAQ,OAAO;AAAA,cACtD,MAAM;AAAA,cACN,UAAU;AAAA,cACV;AAAA;AAAA,cAEA;AAAA,YACH;AAAA,YACD,UAAU;AAAA,YACV;AAAA;AAAA,YAEA;AAAA,UACxB,CAAqB;AAAA,QACrB,OAAuB;AACH,eAAK,UAAU,KAAK;AAAA,YAChB,IAAI,OAAO;AAAA,YACX,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,YAChD,KACI,mBAAmB,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO;AAAA,YAClE,QAAQ;AAAA,YACR,cAAc,OAAO;AAAA,YACrB,gBAAgB,OAAO;AAAA,YACvB;AAAA,YACA,MAAM;AAAA,cACF,IAAI,OAAO;AAAA,cACX,KAAK,OAAO;AAAA,cACZ,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,cAChD,KACI,mBACA,OAAO,QACP,OAAO,OACP,OAAO,OACP;AAAA,cACJ,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,cAChD,MAAM;AAAA,cACN,UAAU;AAAA,cACV;AAAA;AAAA,cAEA;AAAA,YACH;AAAA,YACD,UAAU;AAAA,YACV;AAAA;AAAA,YAEA;AAAA,UACxB,CAAqB;AAAA,QACJ;AAED;AAAA,MACH;AAED,YAAM,aAAa,MAAM,KAAK;AAC9B,UAAI,YAAY;AACZ,mBAAW,SAAS,WAAW;AAAA,MAC/C,OAAmB;AACH,eAAO,MAAM,oEAAoE;AAAA,MACpF;AAED,UAAI,oBAAoB,qBAAqB,WAAW,MAAM;AAC1D,oBAAY,YAAY,QAAQ,gBAAgB;AAAA,MACnD;AACD,UAAI,mBAAmB,oBAAoB,WAAW,KAAK;AACvD,oBAAY,YAAY,OAAO,eAAe;AAAA,MACjD;AAED,UAAI,YAAY,sBAAsB;AACtC,UAAI,qBAAqB;AAAA,QACrB;AAAA,QACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,gCAAgC;AAAA,MAChG;AACY,UAAI,aAAa,oBAAoB;AACjC,qBAAa,MAAM,SAAS,kBAAkB;AAAA,MACjD;AACD,WAAK,YAAY,KAAK;AAAA,QAClB,IAAI,OAAO;AAAA,QACX,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,QAChD,KAAK,mBAAmB,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO;AAAA,QACnE,QAAQ;AAAA,QACR,cAAc,WAAW;AAAA,QACzB,gBAAgB,WAAW;AAAA,QAC3B;AAAA,QACA,MAAM;AAAA,UACF,IAAI,WAAW;AAAA,UACf,KAAK,WAAW;AAAA,UAChB,MAAM,WAAW;AAAA,UACjB,KAAK,WAAW,OAAO,WAAW,OAAO;AAAA,UACzC,MAAM,WAAW,QAAQ,WAAW,QAAQ;AAAA,UAC5C,MAAM,YAAY,QAAQ;AAAA,UAC1B,UAAU;AAAA,UACV;AAAA;AAAA,UAEA;AAAA,QACH;AAAA,QACD,UAAU;AAAA,QACV;AAAA;AAAA,QAEA;AAAA,MAChB,CAAa;AAED,UAAI,gBAAgB;AAChB,YACI,CAAC;AAAA,UACG;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,yCAAyC;AAAA,QAC5F,GACH;AACE;AAAA,QACH;AAAA,MACJ;AAQD;AAAA,QACI;AAAA,QACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B;AAAA,QAC3E;AAAA,MAChB;AAEY,UAAI,gBAAgB;AAChB,aAAK,UAAU,KAAK;AAAA,UAChB,IAAI,OAAO;AAAA,UACX,MAAgC,OAAO,QAAQ,OAAO;AAAA,UACtD,KAEI,OAAO,QACP,OAAO,OACP,OAAO,OACP;AAAA,UACJ,QAAQ;AAAA,UACR,cAAc,WAAW;AAAA,UACzB,gBAAgB,WAAW;AAAA,UAC3B;AAAA,UACA,MAAM;AAAA,YACF,IAAI,WAAW;AAAA,YACf,KAAK,WAAW;AAAA,YAChB,MAAM,WAAW;AAAA,YACjB,KAAK,WAAW,OAAO,WAAW,OAAO;AAAA,YACzC,MAAM,WAAW,QAAQ,WAAW,QAAQ;AAAA,YAC5C,MAAM,YAAY,QAAQ;AAAA,YAC1B,UAAU;AAAA,YACV;AAAA;AAAA,YAEA;AAAA,UACH;AAAA,UACD,UAAU;AAAA,UACV;AAAA;AAAA,UAEA;AAAA,QACpB,CAAiB;AAAA,MACjB,OAAmB;AACH,aAAK,UAAU,KAAK;AAAA,UAChB,IAAI,OAAO;AAAA,UACX,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,UAChD,KAAK,mBAAmB,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO;AAAA,UACnE,QAAQ;AAAA,UACR,cAAc,WAAW;AAAA,UACzB,gBAAgB,WAAW;AAAA,UAC3B;AAAA,UACA,MAAM;AAAA,YACF,IAAI,WAAW;AAAA,YACf,KAAK,WAAW;AAAA,YAChB,MAAM,WAAW;AAAA,YACjB,KAAK,WAAW,OAAO,WAAW,OAAO;AAAA,YACzC,MAAM,WAAW,QAAQ,WAAW,QAAQ;AAAA,YAC5C,MAAM,YAAY,QAAQ;AAAA,YAC1B,UAAU;AAAA,YACV;AAAA;AAAA,YAEA;AAAA,UACH;AAAA,UACD,UAAU;AAAA,UACV;AAAA;AAAA,UAEA;AAAA,QACpB,CAAiB;AAAA,MACJ;AAAA,IAOJ;AAAA,EACJ;AAAA,EAED,MAAM,cAAc,MAAM;AACtB,WAAO,eAAe,WAAW,UAAU,SAAS,sCAAsC,IAAI;AAAA,EACjG;AAAA,EAED,MAAM,eAAe;AACjB,QAAI,CAAC,KAAK,eAAe;AACrB,UAAI,gBAAgB,KAAK,QAAQ,QAAQ,+BAA+B;AACxE,UAAI,CAAC,eAAe;AAChB,wBAAgB,MAAM,OAAO,OAAO;AAAA,UAChC,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,MAAM;AAAA,QAC1B,CAAiB;AAAA,MACJ;AACD,WAAK,gBAAgB;AAAA,IACxB;AACD,WAAO,KAAK;AAAA,EACf;AAAA,EAED,MAAM,gBAAgB,OAAO;AAGzB,UAAM,kBAAkB,MAAM,WAAW,WAAW,MAAM,aAAa;AAAA,MACnE,OAAO;AAAA,MACP,SAAS,MAAM;AAAA,MACf,WAAW;AAAA,IACvB,CAAS;AAED,UAAM,WAAW;AAEjB,QAAI;AACJ,QAAI,KAAK,gBAAgB,GAAG;AACxB,qBAAe,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,qBAAqB;AAAA,QACvE,QAAQ,KAAK;AAAA,QACb,MAAM,MAAM;AAAA,MAC5B,CAAa;AAAA,IACb,WAAmB,KAAK,gBAAgB,GAAG;AAC/B,qBAAe,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,uBAAuB;AAAA,QACzE,QAAQ,KAAK;AAAA,QACb,MAAM,MAAM;AAAA,MAC5B,CAAa;AAAA,IACb,OAAe;AACH,qBAAe,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,mBAAmB;AAAA,QACrE,MAAM,MAAM;AAAA,MAC5B,CAAa;AAAA,IACJ;AAED,UAAM,eAAe;AAAA,MACjB;AAAA,MACA,WAAW;AAAA,MACX;AAAA;AAAA,MAEA,WAAW,KAAK;AAAA,MAChB,UAAU,KAAK;AAAA,MACf,YAAY,MAAM;AAAA,MAClB,IAAI,MAAM;AAAA,MACV,OAAO,KAAK,MACP,OAAO,CAAC,SAAS,CAAC,KAAK,QAAQ,KAAK,SAAS,EAC7C,IAAI,CAAC,UAAU;AAAA,QACZ,IAAI,KAAK;AAAA,QACT,MAAM,KAAK,UAAU;AAAA,QACrB,KAAK,KAAK,UAAU,OAAO,OAAO,KAAK;AAAA,MAC3D,EAAkB;AAAA,IAClB;AAEQ,UAAM,WAAW,MAAM,KAAK,cAAc,YAAY;AAEtD,UAAM,WAAW;AAAA,MACb,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,MAAM,KAAK,KAAK;AAAA,MAChB,SAAS;AAAA,MACT,OAAO;AAAA,QACH,CAAC,GAAG,UAAU,SAAS,EAAE,GAAG;AAAA,UACxB,CAAC,GAAG,UAAU,MAAM,IAAI,EAAE,GAAG;AAAA,QAChC;AAAA,MACJ;AAAA,IACb;AACQ,WAAO;AAAA,EACV;AAAA,EAED,MAAM,kBAAkB,OAAO;AAG3B,UAAM,kBAAkB,MAAM,WAAW,WAAW,MAAM,aAAa;AAAA,MACnE,OAAO;AAAA,MACP,SAAS,MAAM;AAAA,MACf,WAAW;AAAA,IACvB,CAAS;AAED,UAAM,WAAW;AAEjB,QAAI;AACJ,QAAI,KAAK,gBAAgB,GAAG;AACxB,qBAAe,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,qBAAqB;AAAA,QACvE,QAAQ,KAAK;AAAA,QACb,MAAM,MAAM;AAAA,MAC5B,CAAa;AAAA,IACb,WAAmB,KAAK,gBAAgB,GAAG;AAC/B,qBAAe,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,uBAAuB;AAAA,QACzE,QAAQ,KAAK;AAAA,QACb,MAAM,MAAM;AAAA,MAC5B,CAAa;AAAA,IACb,OAAe;AACH,qBAAe,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,mBAAmB;AAAA,QACrE,MAAM,MAAM;AAAA,MAC5B,CAAa;AAAA,IACJ;AAED,UAAM,eAAe;AAAA,MACjB;AAAA,MACA,WAAW;AAAA,MACX;AAAA,MACA,cAAc,OAAO,KAAK,GAAG,UAAU,SAAS,8BAA8B;AAAA,MAC9E,WAAW,KAAK;AAAA,MAChB,UAAU,KAAK;AAAA,MACf,YAAY,MAAM;AAAA,MAClB,IAAI,MAAM;AAAA,MACV,OAAO,KAAK,MACP,OAAO,CAAC,SAAS,KAAK,QAAQ,KAAK,SAAS,EAC5C,IAAI,CAAC,UAAU;AAAA,QACZ,IAAI,KAAK;AAAA,QACT,MAAM,KAAK,UAAU;AAAA,QACrB,KAAK,KAAK,UAAU,OAAO,OAAO,KAAK;AAAA,MAC3D,EAAkB;AAAA,IAClB;AAEQ,UAAM,WAAW,MAAM,KAAK,cAAc,YAAY;AAEtD,UAAM,WAAW;AAAA,MACb,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,MAAM,KAAK,KAAK;AAAA,MAChB,SAAS;AAAA,MACT,OAAO;AAAA,QACH,CAAC,GAAG,UAAU,SAAS,EAAE,GAAG;AAAA,UACxB,CAAC,GAAG,UAAU,MAAM,IAAI,EAAE,GAAG;AAAA,QAChC;AAAA,MACJ;AAAA,IACb;AACQ,WAAO;AAAA,EACV;AAAA,EAED,MAAM,eAAe,OAAO;AACxB,QAAI,CAAC,KAAK,KAAK,MAAM;AACjB,UAAI,KAAK,0BAA0B,KAAK,aAAa,UAAU;AAC3D,cAAM,uBAAuB;AAAA,UACzB;AAAA,UACA,MAAM;AAAA,UACN,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL;AAAA,UACA,UAAU;AAAA,QAC9B;AAAA,MACA,OAAmB;AACH,cAAM,KAAK;AACX,cAAM,WAAW,MAAM,KAAK,gBAAgB,KAAK;AACjD,iBAAS,sBAAsB,UAAU,KAAK,QAAQ;AACtD,oBAAY,OAAO,QAAQ;AAAA,MAC9B;AAAA,IACb,OAAe;AAEH,YAAM,2BAA2B;AAAA,QAC7B;AAAA,QACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,kCAAkC;AAAA,MAClG;AACY,YAAM,KAAK;AAEX,UAAI,KAAK,WAAW,SAAS,GAAG;AAC5B,cAAM,WAAW,MAAM,KAAK,gBAAgB,KAAK;AACjD,YAAI,CAAC,0BAA0B;AAC3B,mBAAS,sBAAsB,UAAU,KAAK,QAAQ;AAAA,QACzD;AACD,oBAAY,OAAO,QAAQ;AAAA,MAC9B;AAED,UAAI,KAAK,wBAAwB;AAC7B,cAAM,aAAa,MAAM,KAAK,kBAAkB,KAAK;AACrD,iBAAS,sBAAsB,YAAY,QAAQ;AACnD,oBAAY,OAAO,UAAU;AAAA,MAChC;AAAA,IACJ;AAAA,EACJ;AACL;AAngB0B;AAAnB,IAAM,eAAN;ACEA,MAAM,sBAAN,MAAM,oBAAmB;AAAA,EAC5B,WAAW;AACP,WAAO;AAAA,EACV;AACL;AAJgC;AAAzB,IAAM,qBAAN;ACNA,MAAM,gBAAN,MAAM,cAAa;AAAA,EACtB,YAAY,aAAa;AACrB,QAAIC,YAAW,IAAI,gBAAgB,aAAa,CAAE,CAAA;AAClD,SAAK,QAAQA;AAEb,SAAK,eAAe;AAEpB,SAAK,SAAS;AAEd,SAAK,WAAW;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,MAAM,YAAY;AACd,UAAM,KAAK,MAAM;AACjB,UAAM,OAAO,MAAM,KAAK,MAAM,SAAS,GAAG,EAAE,aAAa,MAAK,CAAE;AAEhE,QAAI,gBAAgB;AAEpB,eAAW,SAAS,KAAK,SAAS;AAE9B,UAAI,MAAM,SAAS,MAAM,mBAAmB,YAAY,MAAM,uBAAuB,gBAAgB;AACjG,cAAM,eAAe,KAAK,QAAQ,IAAI,MAAM,UAAU;AACtD,YAAI,cAAc;AACd,gBAAM,QAAQ,CAAC,GAAG,aAAa,KAAK;AACpC,2BAAiB,MAAM,CAAC,EAAE,KAAK,SAAS,WAAW,QAAQ,QAAQ;AAAA,QACvF,OAAuB;AACH,wBAAc,iBAAiB,MAAM,IAAI;AAAA,QAC5C;AAAA,MACJ,WAAU,MAAM,SAAS,MAAM,mBAAmB,YAAY;AAE3D,YAAI,YAAY;AAAA,UACZ;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,4BAA4B;AAAA,QAC/E,IACK,YAAY,OAAO,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,4BAA4B,EAAE,IACjG,MAAM;AACZ,cAAM,SAAS,MAAM,SAAS,uBAAuB,MAAM,oBAAoB,SAAS;AACxF,YAAI,CAAC,QAAQ;AACT,wBAAc,UAAU,MAAM,IAAI,4BAA4B,MAAM,kBAAkB;AAAA,QAC1G,WAA2B,OAAO,uBAAuB,gBAAgB;AACrD,gBAAM,QAAQ,CAAC,GAAG,OAAO,KAAK;AAC9B,2BAAiB,MAAM,CAAC,EAAE,KAAK,SAAS,WAAW,QAAQ,QAAQ;AAAA,QACvF,OAAuB;AACH,wBAAc;AAAA,QACjB;AAAA,MACjB,OAAmB;AACH,sBAAc;AAAA,MACjB;AAED,UAAI,gBAAgB;AAChB,cAAM,KAAK,sBAAsB,cAAc;AAAA,MAClD;AAED,UAAI,aAAa;AACb,eAAO,MAAM,aAAa,IAAI;AAAA,MACjC;AAAA,IACJ;AAAA,EAGJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,MAAM,sBAAsB,iBAAiB;AACzC,UAAM,aAAa;AAAA,MACf,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,OAAO;AAAA,MACP,SAAS;AAAA,IACrB;AAGQ,sBAAkB,gBAAgB,QAAQ,mBAAmB,GAAG;AAEhE,QAAI,QAAQ,gBAAgB,MAAM,YAAY;AAE9C,YAAQ,MAAM,OAAO,CAAC,SAAS;AAC3B,UAAI,UAAU;AACd,aAAO,SAAS,WAAW,OAAO,EAAE,GAAG,WAAW,QAAQ,EAAE,EAAE,OAAO,SAAS;AAAA,IAC1F,CAAS;AAED,QAAI,YAAY,WAAW;AAE3B,eAAW,QAAQ,OAAO;AAEtB,YAAM,eAAe,iBAAiB,KAAK,IAAI;AAC/C,UAAI,cAAc;AACd,gBAAQ,aAAa,CAAC,EAAE,YAAa,GAAA;AAAA,UACjC,KAAK;AACD,wBAAY,WAAW;AACvB;AAAA,UACJ,KAAK;AACD,wBAAY,WAAW;AACvB;AAAA,UACJ,KAAK;AACD,wBAAY,WAAW;AACvB;AAAA,QACP;AAAA,MACjB,OAAmB;AACH,YAAI,cAAc,WAAW,OAAO;AAChC,eAAK,UAAU;AAAA,QACnC,WAA2B,cAAc,WAAW,SAAS;AACzC,eAAK,YAAY;AAAA,QACrC,WAA2B,cAAc,WAAW,YAAY;AAC5C,gBAAM,UAAU,6BAA6B,KAAK,IAAI;AACtD,cAAI,SAAS;AACT,kBAAM,KAAK,mBAAmB,QAAQ,CAAC,GAAG,QAAQ,CAAC,CAAC;AAAA,UACvD;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,MAAM,mBAAmB,UAAU,gBAAgB;AAG/C,UAAM,QAAQ,iBAAiB,KAAK,cAAc;AAClD,QAAI,CAAC,OAAO;AACR,aAAO;AAAA,QACH,qBAAqB,cAAc;AAAA,QACnC;AAAA,MAChB;AACY;AAAA,IACH;AACD,UAAM,aAAa,MAAM,CAAC;AAC1B,QAAI,YAAY,KAAK,cAAc,UAAU,GAAG;AAC5C,aAAO,IAAI,cAAc,UAAU,oCAAoC;AACvE;AAAA,IACH;AAGD,UAAM,UAAU;AAChB,UAAM,UAAU,QAAQ,KAAK,QAAQ;AACrC,QAAI,eAAe;AACnB,QAAI,SAAS;AACT,YAAM,iBAAiB,IAAI,mBAAmB,QAAQ;AACtD,qBAAe,eAAe;IACjC;AAED,QAAI,CAAC,cAAc;AACf;AAAA,IACH;AACD,UAAM,aAAa;AACnB,UAAM,aAAa,WAAW,KAAK,QAAQ;AAC3C,QAAI;AAEJ,QAAI,YAAY;AAGZ,YAAM,MAAM,SAAS,wBAAwB,WAAW,CAAC,CAAC;AAC1D,YAAM,UAAU,IAAI;AACpB,YAAM,iBAAiB,IAAI;AAC3B,UAAI;AACJ,UAAI,gBAAgB;AAChB,gBAAQ,MAAM,SAAS,qBAAqB,gBAAgB,OAAO;AAAA,MACnF,OAAmB;AACH,gBAAQ,gBAAgB,iBAAiB,SAAS,IAAI;AAAA,MACzD;AAED,UAAI,CAAC,OAAO;AACR,eAAO;AAAA,UACH,iBAAiB,OAAO;AAAA,UACxB;AAAA,QACpB;AACgB;AAAA,MACH;AACD,UAAI,OAAO,MAAM,MAAM,SAAS,GAAG,EAAE,aAAa,MAAK,CAAE;AACzD,UAAI,CAAC,MAAM;AACP,cAAM,MAAM;AACZ,eAAO,MAAM,MAAM,SAAS,GAAG,EAAE,aAAa,MAAK,CAAE;AAAA,MACxD;AAED,UAAI,KAAK,QAAQ,WAAW,GAAG;AAC3B,eAAO;AAAA,UACH,gDAAgD,MAAM,IAAI;AAAA,UAC1D;AAAA,QACpB;AACgB;AAAA,MACH;AAED,YAAM,cAAc,KAAK,QAAQ,CAAC;AAClC,UAAI,YAAY,SAAS,GAAG;AACxB,eAAO,KAAK,wEAAwE,MAAM,IAAI,IAAI,IAAI;AAAA,MACzG;AACD,oBAAc,YAAY;AAAA,IACtC,OAAe;AACH,YAAM,YAAY;AAElB,YAAM,YAAY,UAAU,KAAK,QAAQ;AACzC,UAAI,WAAW;AACX,cAAM,cAAc,UAAU,CAAC;AAC/B,YAAI;AACA,wBAAc,IAAI,KAAK,WAAW,EAAE,KAAK,EAAE,OAAO,MAAO,CAAA,EAAE,SAAS;AAAA,QACvE,SAAQ,GAAG;AACR,iBAAO,MAAM,EAAE,SAAS,OAAO,CAAC;AAChC,wBAAc;AAAA,QACjB;AAAA,MACjB,OAAmB;AACH,eAAO;AAAA,UACH;AAAA,UACA;AAAA,QACpB;AAAA,MACa;AAAA,IACJ;AAED,QAAI,aAAa;AACb,kBAAY,KAAK,cAAc,YAAY,WAAW;AAAA,IACzD;AAAA,EACJ;AAAA,EAED,oBAAoB;AAChB,WAAO,KAAK,eAAe,KAAK,MAAM;AAAA,EACzC;AAAA,EAED,sBAAsB;AAClB,WAAO,KAAK,eAAe,KAAK,QAAQ;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,eAAe,OAAO;AAClB,QAAI,CAAC,OAAO;AACR,aAAO,KAAK,gDAAgD,IAAI;AAChE,aAAO;AAAA,IACV;AACD,UAAM,QAAQ;AACd,QAAI,gBAAgB;AACpB,QAAI;AAEJ,YAAQ,UAAU,MAAM,KAAK,KAAK,MAAM,MAAM;AAC1C,YAAM,QAAQ,YAAY,KAAK,cAAc,QAAQ,CAAC,CAAC;AACvD,UAAI,CAAC,OAAO;AACR,eAAO,MAAM,iCAAiC,QAAQ,CAAC,CAAC,yBAAyB,IAAI;AACrF;AAAA,MACH;AACD,sBAAgB,cAAc,QAAQ,QAAQ,CAAC,GAAG,KAAK;AAAA,IAC1D;AACD,WAAO;AAAA,EACV;AACL;AA7P0B;AAAnB,IAAM,eAAN;ACHA,MAAM,mBAAN,MAAM,iBAAgB;AAAA,EACzB,aAAa,gBAAgB,aAAa;AACtC,UAAM,eAAe,IAAI,aAAa,WAAW;AACjD,UAAM,aAAa;AACnB,UAAM,YAAY,aAAa;AAC/B,UAAM,cAAc,aAAa;AACjC,WAAO,EAAE,WAAW;EACvB;AAAA,EAED,aAAa,kBAAkB,aAAa;AACxC,UAAM,eAAe,IAAI,aAAa,WAAW;AACjD,UAAM,aAAa;AACnB,UAAM,YAAY,aAAa;AAC/B,UAAM,cAAc,aAAa;AAIjC,SAAK,qBAAqB,aAAa,SAAS;AAChD,SAAK,qBAAqB,aAAa,aAAa,EAAE,QAAQ,KAAI,CAAE;AAAA,EACvE;AAAA,EAED,aAAa,yBAAyB,aAAa;AAC/C,UAAM,eAAe,IAAI,aAAa,WAAW;AACjD,UAAM,aAAa;AACnB,UAAM,YAAY,aAAa;AAC/B,WAAO;AAAA,EACV;AAAA,EAED,aAAa,2BAA2B,aAAa;AACjD,UAAM,eAAe,IAAI,aAAa,WAAW;AACjD,UAAM,aAAa;AACnB,UAAM,cAAc,aAAa;AACjC,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,OAAO,qBAAqB,aAAa,OAAOP,WAAU,CAAA,GAAI;AAC1D,QAAI,CAAC,OAAO;AACR;AAAA,IACH;AAED,YAAQ,wCAAwC,QAAQ;AAExD,UAAM,WAAW;AAAA,MACb,QAAQ,YAAY;AAAA,MACpB,OAAO;AAAA,MACP,MAAM,KAAK,KAAK;AAAA,MAChB,SAAS;AAAA,IACrB;AACQ,QAAIA,SAAQ,QAAQ;AAChB,eAAS,UAAU,CAAC,KAAK,MAAM,KAAK,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;AAAA,IACjE,OAAe;AACH,eAAS,sBAAsB,QAAQ;AAAA,IAC1C;AAED,gBAAY,OAAO,QAAQ;AAAA,EAC9B;AACL;AA7D6B;AAAtB,IAAM,kBAAN;ACAA,MAAM,iBAAN,MAAM,eAAc;AAAA;AAAA;AAAA;AAAA;AAAA,EAKvB,YAAY,eAAe,UAAUM,OAAM;AACvC,SAAK,gBAAgB;AACrB,SAAK,WAAW,YAAY,QAAQ;AACpC,SAAK,OAAOA;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,eAAe,OAAON,WAAU,IAAI;AACtC,QAAI,QAAQ;AACZ,QAAIA,SAAQ,QAAQ;AAChB,cAAQ,MAAM,gBAAgB,2BAA2B,KAAK;AAAA,IAC1E,OAAe;AACH,cAAQ,MAAM,gBAAgB,yBAAyB,KAAK;AAAA,IAC/D;AAED,YAAQ,0DAA0D,QAAQ;AAE1E,UAAM,WAAW;AAEjB,UAAM,WAAW;AAAA,MACb;AAAA,MACA,QAAQ,MAAM;AAAA,MACd,OAAO;AAAA,MACP,MAAM,KAAK,KAAK;AAAA,MAChB,SAAS;AAAA,IACrB;AAEQ,QAAIA,SAAQ,QAAQ;AAChB,eAAS,UAAU,CAAC,KAAK,MAAM,KAAK,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;AAAA,IACjE,OAAe;AACH,eAAS,sBAAsB,QAAQ;AAAA,IAC1C;AAED,gBAAY,OAAO,QAAQ;AAAA,EAC9B;AACL;AA5C2B;AAApB,IAAM,gBAAN;ACOA,MAAM,mBAAN,MAAM,iBAAgB;AAAA;AAAA;AAAA;AAAA,EAIzB,YAAY,eAAe,UAAUM,OAAM;AACvC,SAAK,gBAAgB;AACrB,SAAK,WAAW,YAAY,QAAQ;AACpC,SAAK,OAAOA;AACZ,SAAK,YAAY;AACjB,SAAK,cAAc;AACnB,SAAK,gBAAgB;AACrB,SAAK,yBAAyB;AAC9B,eAAW,UAAU,KAAK,eAAe;AACrC,UAAI,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B,EAAE,GAAG;AACpG,aAAK,yBAAyB;AAC9B;AAAA,MACH;AAAA,IACJ;AAAA,EACJ;AAAA,EAED,MAAM,oBAAoB;AAGtB,eAAW,UAAU,iBAAiB,kBAAkB,KAAK,aAAa,GAAG;AACzE,WAAK;AACL,YAAM,WAAW,OAAO;AACxB,UAAI,OAAO;AACX,UAAI,OAAO,UAAU,OAAO,SAAS,MAAM,mBAAmB,MAAM;AAChE,eAAO,MAAM,mBAAmB;AAAA,MAChD,WAAuB,OAAO,QAAQ,OAAO,SAAS,MAAM,mBAAmB,YAAY;AAC3E,eAAO,MAAM,mBAAmB;AAAA,MAChD,WAAuB,OAAO,sBAAsB,OAAO,SAAS,MAAM,mBAAmB,UAAU;AACvF,eAAO,MAAM,mBAAmB;AAAA,MAChD,OAAmB;AACH,cAAM,OAAO,MAAM,8CAA8C,MAAM,MAAM;AAAA,MAChF;AAKD,UAAI,mBAAmB;AACvB,UAAI,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B,EAAE,GAAG;AACnG,2BACI,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B,EAAE,KAChG;AAAA,MACP;AAED,UAAI,kBAAkB;AACtB,UAAI,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B,EAAE,GAAG;AACnG,0BACI,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B,EAAE,KAChG;AAAA,MACP;AACD,UAAI,iBAAiB;AACrB,UAAI,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B,EAAE,GAAG;AAWpG,yBACI;AAAA,UACI;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B;AAAA,QAC9E,KAAI;AAAA,MACZ;AACD,YAAM,aAAa;AAAA,QACf;AAAA,QACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,mBAAmB;AAAA,MACnF;AACY,UAAI,aAAa,MAAM,SAAS,UAAU;AAE1C,YAAM,WAAW,aACX,KAAK,IAAI,IAAI,MAAM,KAAK,IAAI,IAAI,oBAAoB,WAAW,QAAQ,OAAO,MAAM,SAAS,EAAE,IAAI,CAAC,IACpG,KAAK,IAAI,IAAI,MAAM,KAAK,IAAI,IAAI,OAAO,QAAQ,OAAO,MAAM,SAAS,EAAE,IAAI,CAAC;AAElF,UAAI,OAAO,SAAS,MAAM,mBAAmB,QAAQ,CAAC,YAAY;AAC9D,eAAO,MAAM,8BAA8B,UAAU,GAAG;AACxD,aAAK,YAAY,KAAK;AAAA,UAClB,IAAI,OAAO;AAAA,UACX,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,UAChD,KAAK,mBAAmB,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO;AAAA,UACnE,QAAQ;AAAA,UACR,cAAc,OAAO;AAAA,UACrB,gBAAgB,OAAO;AAAA,UACvB;AAAA,UACA,MAAM;AAAA,YACF,IAAI,OAAO;AAAA,YACX,KAAK,OAAO;AAAA,YACZ,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,YAChD,KACI,mBAAmB,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO;AAAA,YAClE,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,YAChD,MAAM;AAAA,YACN,UAAU;AAAA,YACV;AAAA;AAAA,YAEA;AAAA,UACH;AAAA,UACD,UAAU;AAAA,UACV;AAAA;AAAA,UAEA;AAAA,QACpB,CAAiB;AACD,YACI,CAAC;AAAA,UACG;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,yCAAyC;AAAA,QAC5F,KACD,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B,EAAE,GACnG;AACE;AAAA,QACH;AACD,YAAI,gBAAgB;AAChB,eAAK,UAAU,KAAK;AAAA,YAChB,IAAI,OAAO;AAAA,YACX,MAAgC,OAAO,QAAQ,OAAO;AAAA,YACtD,KAEI,OAAO,QACP,OAAO,OACP,OAAO,OACP;AAAA,YACJ,QAAQ;AAAA,YACR,cAAc,OAAO;AAAA,YACrB,gBAAgB,OAAO;AAAA,YACvB;AAAA,YACA,MAAM;AAAA,cACF,IAAI,OAAO;AAAA,cACX,KAAK,OAAO;AAAA,cACZ,MAAgC,OAAO,QAAQ,OAAO;AAAA,cACtD,KAEI,OAAO,QACP,OAAO,OACP,OAAO,OACP;AAAA,cACJ,MAAgC,OAAO,QAAQ,OAAO;AAAA,cACtD,MAAM;AAAA,cACN,UAAU;AAAA,cACV;AAAA;AAAA,cAEA;AAAA,YACH;AAAA,YACD,UAAU;AAAA,YACV;AAAA;AAAA,YAEA;AAAA,UACxB,CAAqB;AAAA,QACrB,OAAuB;AACH,eAAK,UAAU,KAAK;AAAA,YAChB,IAAI,OAAO;AAAA,YACX,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,YAChD,KACI,mBAAmB,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO;AAAA,YAClE,QAAQ;AAAA,YACR,cAAc,OAAO;AAAA,YACrB,gBAAgB,OAAO;AAAA,YACvB;AAAA,YACA,MAAM;AAAA,cACF,IAAI,OAAO;AAAA,cACX,KAAK,OAAO;AAAA,cACZ,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,cAChD,KACI,mBACA,OAAO,QACP,OAAO,OACP,OAAO,OACP;AAAA,cACJ,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,cAChD,MAAM;AAAA,cACN,UAAU;AAAA,cACV;AAAA;AAAA,cAEA;AAAA,YACH;AAAA,YACD,UAAU;AAAA,YACV;AAAA;AAAA,YAEA;AAAA,UACxB,CAAqB;AAAA,QACJ;AAED;AAAA,MACH;AAED,YAAM,aAAa,MAAM,KAAK;AAC9B,UAAI,YAAY;AACZ,mBAAW,SAAS,WAAW;AAAA,MAC/C,OAAmB;AACH,eAAO,MAAM,oEAAoE;AAAA,MACpF;AAED,UAAI,oBAAoB,qBAAqB,WAAW,MAAM;AAC1D,oBAAY,YAAY,QAAQ,gBAAgB;AAAA,MACnD;AACD,UAAI,mBAAmB,oBAAoB,WAAW,KAAK;AACvD,oBAAY,YAAY,OAAO,eAAe;AAAA,MACjD;AAED,UAAI,YAAY,sBAAsB;AACtC,UAAI,qBAAqB;AAAA,QACrB;AAAA,QACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,gCAAgC;AAAA,MAChG;AACY,UAAI,aAAa,oBAAoB;AACjC,qBAAa,MAAM,SAAS,kBAAkB;AAAA,MACjD;AACD,WAAK,YAAY,KAAK;AAAA,QAClB,IAAI,OAAO;AAAA,QACX,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,QAChD,KAAK,mBAAmB,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO;AAAA,QACnE,QAAQ;AAAA,QACR,cAAc,WAAW;AAAA,QACzB,gBAAgB,WAAW;AAAA,QAC3B;AAAA,QACA,MAAM;AAAA,UACF,IAAI,WAAW;AAAA,UACf,KAAK,WAAW;AAAA,UAChB,MAAM,WAAW;AAAA,UACjB,KAAK,WAAW,OAAO,WAAW,OAAO;AAAA,UACzC,MAAM,WAAW,QAAQ,WAAW,QAAQ;AAAA,UAC5C,MAAM,YAAY,QAAQ;AAAA,UAC1B,UAAU;AAAA,UACV;AAAA;AAAA,UAEA;AAAA,QACH;AAAA,QACD,UAAU;AAAA,QACV;AAAA;AAAA,QAEA;AAAA,MAChB,CAAa;AAED,UAAI,gBAAgB;AAChB,YACI,CAAC;AAAA,UACG;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,yCAAyC;AAAA,QAC5F,GACH;AACE;AAAA,QACH;AAAA,MACJ;AAQD;AAAA,QACI;AAAA,QACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B;AAAA,QAC3E;AAAA,MAChB;AAEY,UAAI,gBAAgB;AAChB,aAAK,UAAU,KAAK;AAAA,UAChB,IAAI,OAAO;AAAA,UACX,MAAgC,OAAO,QAAQ,OAAO;AAAA,UACtD,KAEI,OAAO,QACP,OAAO,OACP,OAAO,OACP;AAAA,UACJ,QAAQ;AAAA,UACR,cAAc,WAAW;AAAA,UACzB,gBAAgB,WAAW;AAAA,UAC3B;AAAA,UACA,MAAM;AAAA,YACF,IAAI,WAAW;AAAA,YACf,KAAK,WAAW;AAAA,YAChB,MAAM,WAAW;AAAA,YACjB,KAAK,WAAW,OAAO,WAAW,OAAO;AAAA,YACzC,MAAM,WAAW,QAAQ,WAAW,QAAQ;AAAA,YAC5C,MAAM,YAAY,QAAQ;AAAA,YAC1B,UAAU;AAAA,YACV;AAAA;AAAA,YAEA;AAAA,UACH;AAAA,UACD,UAAU;AAAA,UACV;AAAA;AAAA,UAEA;AAAA,QACpB,CAAiB;AAAA,MACjB,OAAmB;AACH,aAAK,UAAU,KAAK;AAAA,UAChB,IAAI,OAAO;AAAA,UACX,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,UAChD,KAAK,mBAAmB,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO;AAAA,UACnE,QAAQ;AAAA,UACR,cAAc,WAAW;AAAA,UACzB,gBAAgB,WAAW;AAAA,UAC3B;AAAA,UACA,MAAM;AAAA,YACF,IAAI,WAAW;AAAA,YACf,KAAK,WAAW;AAAA,YAChB,MAAM,WAAW;AAAA,YACjB,KAAK,WAAW,OAAO,WAAW,OAAO;AAAA,YACzC,MAAM,WAAW,QAAQ,WAAW,QAAQ;AAAA,YAC5C,MAAM,YAAY,QAAQ;AAAA,YAC1B,UAAU;AAAA,YACV;AAAA;AAAA,YAEA;AAAA,UACH;AAAA,UACD,UAAU;AAAA,UACV;AAAA;AAAA,UAEA;AAAA,QACpB,CAAiB;AAAA,MACJ;AAAA,IAOJ;AAAA,EACJ;AAAA,EAED,MAAM,cAAc,MAAM;AACtB,WAAO,eAAe,WAAW,UAAU,SAAS,yCAAyC,IAAI;AAAA,EACpG;AAAA,EAED,MAAM,eAAe;AACjB,QAAI,CAAC,KAAK,eAAe;AACrB,UAAI,gBAAgB,KAAK,QAAQ,QAAQ,kCAAkC;AAC3E,UAAI,CAAC,eAAe;AAChB,wBAAgB,MAAM,OAAO,OAAO;AAAA,UAChC,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,MAAM;AAAA,QAC1B,CAAiB;AAAA,MACJ;AACD,WAAK,gBAAgB;AAAA,IACxB;AACD,WAAO,KAAK;AAAA,EACf;AAAA,EAED,MAAM,gBAAgB,OAAO;AAGzB,UAAM,kBAAkB,MAAM,WAAW,WAAW,MAAM,aAAa;AAAA,MACnE,OAAO;AAAA,MACP,SAAS,MAAM;AAAA,MACf,WAAW;AAAA,IACvB,CAAS;AAED,UAAM,WAAW;AAEjB,QAAI;AACJ,QAAI,KAAK,gBAAgB,GAAG;AACxB,qBAAe,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,qBAAqB;AAAA,QACvE,QAAQ,KAAK;AAAA,QACb,MAAM,MAAM;AAAA,MAC5B,CAAa;AAAA,IACb,WAAmB,KAAK,gBAAgB,GAAG;AAC/B,qBAAe,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,uBAAuB;AAAA,QACzE,QAAQ,KAAK;AAAA,QACb,MAAM,MAAM;AAAA,MAC5B,CAAa;AAAA,IACb,OAAe;AACH,qBAAe,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,mBAAmB;AAAA,QACrE,MAAM,MAAM;AAAA,MAC5B,CAAa;AAAA,IACJ;AAED,UAAM,eAAe;AAAA,MACjB;AAAA,MACA,WAAW;AAAA,MACX;AAAA;AAAA,MAEA,WAAW,KAAK;AAAA,MAChB,YAAY;AAAA,MACZ,IAAI,MAAM;AAAA,MACV,OAAO,KAAK,MACP,OAAO,CAAC,SAAS,CAAC,KAAK,QAAQ,KAAK,SAAS,EAC7C,IAAI,CAAC,UAAU;AAAA,QACZ,IAAI,KAAK;AAAA,QACT,MAAM,KAAK,UAAU;AAAA,QACrB,KAAK,KAAK,UAAU,OAAO,OAAO,KAAK;AAAA,MAC3D,EAAkB;AAAA,IAClB;AAEQ,UAAM,WAAW,MAAM,KAAK,cAAc,YAAY;AAEtD,UAAM,WAAW;AAAA,MACb,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,MAAM,KAAK,KAAK;AAAA,MAChB,SAAS;AAAA,MACT,OAAO;AAAA,QACH,CAAC,GAAG,UAAU,SAAS,EAAE,GAAG;AAAA,UACxB,CAAC,GAAG,UAAU,MAAM,OAAO,EAAE,GAAG;AAAA,QACnC;AAAA,MACJ;AAAA,IACb;AACQ,WAAO;AAAA,EACV;AAAA,EAED,MAAM,kBAAkB,OAAO;AAG3B,UAAM,kBAAkB,MAAM,WAAW,WAAW,MAAM,aAAa;AAAA,MACnE,OAAO;AAAA,MACP,SAAS,MAAM;AAAA,MACf,WAAW;AAAA,IACvB,CAAS;AAED,UAAM,WAAW;AAEjB,QAAI;AACJ,QAAI,KAAK,gBAAgB,GAAG;AACxB,qBAAe,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,qBAAqB;AAAA,QACvE,QAAQ,KAAK;AAAA,QACb,MAAM,MAAM;AAAA,MAC5B,CAAa;AAAA,IACb,WAAmB,KAAK,gBAAgB,GAAG;AAC/B,qBAAe,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,uBAAuB;AAAA,QACzE,QAAQ,KAAK;AAAA,QACb,MAAM,MAAM;AAAA,MAC5B,CAAa;AAAA,IACb,OAAe;AACH,qBAAe,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,mBAAmB;AAAA,QACrE,MAAM,MAAM;AAAA,MAC5B,CAAa;AAAA,IACJ;AAED,UAAM,eAAe;AAAA,MACjB;AAAA,MACA,WAAW;AAAA,MACX;AAAA,MACA,cAAc,OAAO,KAAK,GAAG,UAAU,SAAS,8BAA8B;AAAA,MAC9E,WAAW,KAAK;AAAA,MAChB,YAAY;AAAA,MACZ,IAAI,MAAM;AAAA,MACV,OAAO,KAAK,MACP,OAAO,CAAC,SAAS,KAAK,QAAQ,KAAK,SAAS,EAC5C,IAAI,CAAC,UAAU;AAAA,QACZ,IAAI,KAAK;AAAA,QACT,MAAM,KAAK,UAAU;AAAA,QACrB,KAAK,KAAK,UAAU,OAAO,OAAO,KAAK;AAAA,MAC3D,EAAkB;AAAA,IAClB;AAEQ,UAAM,WAAW,MAAM,KAAK,cAAc,YAAY;AAEtD,UAAM,WAAW;AAAA,MACb,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,MAAM,KAAK,KAAK;AAAA,MAChB,SAAS;AAAA,MACT,OAAO;AAAA,QACH,CAAC,GAAG,UAAU,SAAS,EAAE,GAAG;AAAA,UACxB,CAAC,GAAG,UAAU,MAAM,OAAO,EAAE,GAAG;AAAA,QACnC;AAAA,MACJ;AAAA,IACb;AACQ,WAAO;AAAA,EACV;AAAA,EAED,MAAM,eAAe,OAAO;AACxB,QAAI,CAAC,KAAK,KAAK,MAAM;AACjB,UAAI,KAAK,0BAA0B,KAAK,aAAa,UAAU;AAC3D,cAAM,uBAAuB;AAAA,UACzB;AAAA,UACA,MAAM;AAAA,UACN,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL;AAAA,UACA,UAAU;AAAA,QAC9B;AAAA,MACA,OAAmB;AACH,cAAM,KAAK;AACX,cAAM,WAAW,MAAM,KAAK,gBAAgB,KAAK;AACjD,iBAAS,sBAAsB,UAAU,KAAK,QAAQ;AACtD,oBAAY,OAAO,QAAQ;AAAA,MAC9B;AAAA,IACb,OAAe;AAEH,YAAM,2BAA2B;AAAA,QAC7B;AAAA,QACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,kCAAkC;AAAA,MAClG;AACY,YAAM,KAAK;AAEX,UAAI,KAAK,WAAW,SAAS,GAAG;AAC5B,cAAM,WAAW,MAAM,KAAK,gBAAgB,KAAK;AACjD,YAAI,CAAC,0BAA0B;AAC3B,mBAAS,sBAAsB,UAAU,KAAK,QAAQ;AAAA,QACzD;AACD,oBAAY,OAAO,QAAQ;AAAA,MAC9B;AAED,UAAI,KAAK,wBAAwB;AAC7B,cAAM,aAAa,MAAM,KAAK,kBAAkB,KAAK;AACrD,iBAAS,sBAAsB,YAAY,QAAQ;AACnD,oBAAY,OAAO,UAAU;AAAA,MAChC;AAAA,IACJ;AAAA,EACJ;AACL;AA/f6B;AAAtB,IAAM,kBAAN;ACRA,IAAIE;AACJ,SAAS,iBAAiB;AAE7B,MAAIA,0BAAwB;AACxB,WAAOA;AAAAA,EACV;AAEDA,6BAAyB,UAAU,eAAe,UAAU,SAAS;AAIrEA,2BAAuB;AAAA,IAAS;AAAA,IAAkC,IAAI,SAClEC,MAAI,+BAA+B,GAAG,IAAI;AAAA,EAClD;AAWID,2BAAuB,SAAS,4BAA4B,IAAI,SAASC,MAAI,yBAAyB,GAAG,IAAI,CAAC;AAG9G,OAAK,QAAQ,IAAI,UAAU,SAAS,EAAE,SAASD;AAC/C,SAAOA;AACX;AA5BgB;ACQT,MAAM,kBAAN,MAAM,gBAAe;AAAA;AAAA;AAAA;AAAA,EAIxB,YAAY,eAAe,UAAUF,OAAM;AACvC,SAAK,gBAAgB;AACrB,SAAK,WAAW,YAAY,QAAQ;AACpC,SAAK,OAAOA;AACZ,SAAK,YAAY;AACjB,SAAK,cAAc;AACnB,SAAK,gBAAgB;AACrB,SAAK,yBAAyB;AAC9B,eAAW,UAAU,KAAK,eAAe;AACrC,UAAI,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B,EAAE,GAAG;AACpG,aAAK,yBAAyB;AAC9B;AAAA,MACH;AAAA,IACJ;AAAA,EACJ;AAAA,EAED,MAAM,oBAAoB;AAGtB,eAAW,UAAU,iBAAiB,kBAAkB,KAAK,aAAa,GAAG;AACzE,WAAK;AACL,YAAM,WAAW,OAAO,YAAY;AACpC,UAAI,OAAO;AACX,UAAI,OAAO,UAAU,OAAO,SAAS,MAAM,mBAAmB,MAAM;AAChE,eAAO,MAAM,mBAAmB;AAAA,MAChD,WAAuB,OAAO,QAAQ,OAAO,SAAS,MAAM,mBAAmB,YAAY;AAC3E,eAAO,MAAM,mBAAmB;AAAA,MAChD,WAAuB,OAAO,sBAAsB,OAAO,SAAS,MAAM,mBAAmB,UAAU;AACvF,eAAO,MAAM,mBAAmB;AAAA,MAChD,OAAmB;AACH,cAAM,OAAO,MAAM,8CAA8C,MAAM,MAAM;AAAA,MAChF;AAKD,UAAI,mBAAmB;AACvB,UAAI,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B,EAAE,GAAG;AACnG,2BACI,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B,EAAE,KAChG;AAAA,MACP;AAED,UAAI,kBAAkB;AACtB,UAAI,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B,EAAE,GAAG;AACnG,0BACI,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B,EAAE,KAChG;AAAA,MACP;AACD,UAAI,iBAAiB;AACrB,UAAI,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B,EAAE,GAAG;AAWpG,yBACI;AAAA,UACI;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B;AAAA,QAC9E,KAAI;AAAA,MACZ;AACD,YAAM,aAAa;AAAA,QACf;AAAA,QACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,mBAAmB;AAAA,MACnF;AACY,UAAI,aAAa,MAAM,SAAS,UAAU;AAE1C,YAAM,WAAW,aACX,KAAK,IAAI,IAAI,MAAM,KAAK,IAAI,IAAI,oBAAoB,WAAW,QAAQ,OAAO,MAAM,SAAS,EAAE,IAAI,CAAC,IACpG,KAAK,IAAI,IAAI,MAAM,KAAK,IAAI,IAAI,OAAO,QAAQ,OAAO,MAAM,SAAS,EAAE,IAAI,CAAC;AAElF,UAAI,OAAO,SAAS,MAAM,mBAAmB,QAAQ,CAAC,YAAY;AAC9D,eAAO,MAAM,8BAA8B,UAAU,GAAG;AACxD,aAAK,YAAY,KAAK;AAAA,UAClB,IAAI,OAAO;AAAA,UACX,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,UAChD,KAAK,mBAAmB,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO;AAAA,UACnE,QAAQ;AAAA,UACR,cAAc,OAAO;AAAA,UACrB,gBAAgB,OAAO;AAAA,UACvB;AAAA,UACA,MAAM;AAAA,YACF,IAAI,OAAO;AAAA,YACX,KAAK,OAAO;AAAA,YACZ,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,YAChD,KACI,mBAAmB,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO;AAAA,YAClE,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,YAChD,MAAM;AAAA,YACN,UAAU;AAAA,YACV;AAAA;AAAA,YAEA;AAAA,UACH;AAAA,UACD,UAAU;AAAA,UACV;AAAA;AAAA,UAEA;AAAA,QACpB,CAAiB;AACD,YACI,CAAC;AAAA,UACG;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,yCAAyC;AAAA,QAC5F,KACD,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B,EAAE,GACnG;AACE;AAAA,QACH;AACD,YAAI,gBAAgB;AAChB,eAAK,UAAU,KAAK;AAAA,YAChB,IAAI,OAAO;AAAA,YACX,MAAgC,OAAO,QAAQ,OAAO;AAAA,YACtD,KAEI,OAAO,QACP,OAAO,OACP,OAAO,OACP;AAAA,YACJ,QAAQ;AAAA,YACR,cAAc,OAAO;AAAA,YACrB,gBAAgB,OAAO;AAAA,YACvB;AAAA,YACA,MAAM;AAAA,cACF,IAAI,OAAO;AAAA,cACX,KAAK,OAAO;AAAA,cACZ,MAAgC,OAAO,QAAQ,OAAO;AAAA,cACtD,KAEI,OAAO,QACP,OAAO,OACP,OAAO,OACP;AAAA,cACJ,MAAgC,OAAO,QAAQ,OAAO;AAAA,cACtD,MAAM;AAAA,cACN,UAAU;AAAA,cACV;AAAA;AAAA,cAEA;AAAA,YACH;AAAA,YACD,UAAU;AAAA,YACV;AAAA;AAAA,YAEA;AAAA,UACxB,CAAqB;AAAA,QACrB,OAAuB;AACH,eAAK,UAAU,KAAK;AAAA,YAChB,IAAI,OAAO;AAAA,YACX,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,YAChD,KACI,mBAAmB,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO;AAAA,YAClE,QAAQ;AAAA,YACR,cAAc,OAAO;AAAA,YACrB,gBAAgB,OAAO;AAAA,YACvB;AAAA,YACA,MAAM;AAAA,cACF,IAAI,OAAO;AAAA,cACX,KAAK,OAAO;AAAA,cACZ,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,cAChD,KACI,mBACA,OAAO,QACP,OAAO,OACP,OAAO,OACP;AAAA,cACJ,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,cAChD,MAAM;AAAA,cACN,UAAU;AAAA,cACV;AAAA;AAAA,cAEA;AAAA,YACH;AAAA,YACD,UAAU;AAAA,YACV;AAAA;AAAA,YAEA;AAAA,UACxB,CAAqB;AAAA,QACJ;AAED;AAAA,MACH;AAED,YAAM,aAAa,MAAM,KAAK;AAC9B,UAAI,YAAY;AACZ,mBAAW,SAAS,WAAW;AAAA,MAC/C,OAAmB;AACH,eAAO,MAAM,oEAAoE;AAAA,MACpF;AAED,UAAI,oBAAoB,qBAAqB,WAAW,MAAM;AAC1D,oBAAY,YAAY,QAAQ,gBAAgB;AAAA,MACnD;AACD,UAAI,mBAAmB,oBAAoB,WAAW,KAAK;AACvD,oBAAY,YAAY,OAAO,eAAe;AAAA,MACjD;AAED,UAAI,YAAY,sBAAsB;AACtC,UAAI,qBAAqB;AAAA,QACrB;AAAA,QACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,gCAAgC;AAAA,MAChG;AACY,UAAI,aAAa,oBAAoB;AACjC,qBAAa,MAAM,SAAS,kBAAkB;AAAA,MACjD;AACD,WAAK,YAAY,KAAK;AAAA,QAClB,IAAI,OAAO;AAAA,QACX,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,QAChD,KAAK,mBAAmB,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO;AAAA,QACnE,QAAQ;AAAA,QACR,cAAc,WAAW;AAAA,QACzB,gBAAgB,WAAW;AAAA,QAC3B;AAAA,QACA,MAAM;AAAA,UACF,IAAI,WAAW;AAAA,UACf,KAAK,WAAW;AAAA,UAChB,MAAM,WAAW;AAAA,UACjB,KAAK,WAAW,OAAO,WAAW,OAAO;AAAA,UACzC,MAAM,WAAW,QAAQ,WAAW,QAAQ;AAAA,UAC5C,MAAM,YAAY,QAAQ;AAAA,UAC1B,UAAU;AAAA,UACV;AAAA;AAAA,UAEA;AAAA,QACH;AAAA,QACD,UAAU;AAAA,QACV;AAAA;AAAA,QAEA;AAAA,MAChB,CAAa;AAED,UAAI,gBAAgB;AAChB,YACI,CAAC;AAAA,UACG;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,yCAAyC;AAAA,QAC5F,GACH;AACE;AAAA,QACH;AAAA,MACJ;AAQD;AAAA,QACI;AAAA,QACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B;AAAA,QAC3E;AAAA,MAChB;AAEY,UAAI,gBAAgB;AAChB,aAAK,UAAU,KAAK;AAAA,UAChB,IAAI,OAAO;AAAA,UACX,MAAgC,OAAO,QAAQ,OAAO;AAAA,UACtD,KAEI,OAAO,QACP,OAAO,OACP,OAAO,OACP;AAAA,UACJ,QAAQ;AAAA,UACR,cAAc,WAAW;AAAA,UACzB,gBAAgB,WAAW;AAAA,UAC3B;AAAA,UACA,MAAM;AAAA,YACF,IAAI,WAAW;AAAA,YACf,KAAK,WAAW;AAAA,YAChB,MAAM,WAAW;AAAA,YACjB,KAAK,WAAW,OAAO,WAAW,OAAO;AAAA,YACzC,MAAM,WAAW,QAAQ,WAAW,QAAQ;AAAA,YAC5C,MAAM,YAAY,QAAQ;AAAA,YAC1B,UAAU;AAAA,YACV;AAAA;AAAA,YAEA;AAAA,UACH;AAAA,UACD,UAAU;AAAA,UACV;AAAA;AAAA,UAEA;AAAA,QACpB,CAAiB;AAAA,MACjB,OAAmB;AACH,aAAK,UAAU,KAAK;AAAA,UAChB,IAAI,OAAO;AAAA,UACX,MAAM,oBAAoB,OAAO,QAAQ,OAAO;AAAA,UAChD,KAAK,mBAAmB,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO;AAAA,UACnE,QAAQ;AAAA,UACR,cAAc,WAAW;AAAA,UACzB,gBAAgB,WAAW;AAAA,UAC3B;AAAA,UACA,MAAM;AAAA,YACF,IAAI,WAAW;AAAA,YACf,KAAK,WAAW;AAAA,YAChB,MAAM,WAAW;AAAA,YACjB,KAAK,WAAW,OAAO,WAAW,OAAO;AAAA,YACzC,MAAM,WAAW,QAAQ,WAAW,QAAQ;AAAA,YAC5C,MAAM,YAAY,QAAQ;AAAA,YAC1B,UAAU;AAAA,YACV;AAAA;AAAA,YAEA;AAAA,UACH;AAAA,UACD,UAAU;AAAA,UACV;AAAA;AAAA,UAEA;AAAA,QACpB,CAAiB;AAAA,MACJ;AAAA,IAOJ;AAAA,EACJ;AAAA,EAED,MAAM,cAAc,MAAM;AACtB,WAAO,eAAe,WAAW,UAAU,SAAS,wCAAwC,IAAI;AAAA,EACnG;AAAA,EAED,MAAM,eAAe;AACjB,QAAI,CAAC,KAAK,eAAe;AACrB,UAAI,gBAAgB,KAAK,QAAQ,QAAQ,iCAAiC;AAC1E,UAAI,CAAC,eAAe;AAChB,wBAAgB,MAAM,OAAO,OAAO;AAAA,UAChC,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,MAAM;AAAA,QAC1B,CAAiB;AAAA,MACJ;AACD,WAAK,gBAAgB;AAAA,IACxB;AACD,WAAO,KAAK;AAAA,EACf;AAAA,EAED,MAAM,gBAAgB,OAAO;AAGzB,UAAM,kBAAkB,MAAM,WAAW,WAAW,MAAM,aAAa;AAAA,MACnE,OAAO;AAAA,MACP,SAAS,MAAM;AAAA,MACf,WAAW;AAAA,IACvB,CAAS;AAED,UAAM,WAAW;AAEjB,QAAI;AACJ,QAAI,KAAK,gBAAgB,GAAG;AACxB,qBAAe,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,qBAAqB;AAAA,QACvE,QAAQ,KAAK;AAAA,QACb,MAAM,MAAM;AAAA,MAC5B,CAAa;AAAA,IACb,WAAmB,KAAK,gBAAgB,GAAG;AAC/B,qBAAe,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,uBAAuB;AAAA,QACzE,QAAQ,KAAK;AAAA,QACb,MAAM,MAAM;AAAA,MAC5B,CAAa;AAAA,IACb,OAAe;AACH,qBAAe,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,mBAAmB;AAAA,QACrE,MAAM,MAAM;AAAA,MAC5B,CAAa;AAAA,IACJ;AAED,UAAM,eAAe;AAAA,MACjB;AAAA,MACA,WAAW;AAAA,MACX;AAAA;AAAA,MAEA,WAAW,KAAK;AAAA,MAChB,YAAY,MAAM;AAAA,MAClB,IAAI,MAAM;AAAA,MACV,OAAO,KAAK,MACP,OAAO,CAAC,SAAS,CAAC,KAAK,QAAQ,KAAK,SAAS,EAC7C,IAAI,CAAC,UAAU;AAAA,QACZ,IAAI,KAAK;AAAA,QACT,MAAM,KAAK,UAAU;AAAA,QACrB,KAAK,KAAK,UAAU,OAAO,OAAO,KAAK;AAAA,MAC3D,EAAkB;AAAA,IAClB;AAEQ,UAAM,WAAW,MAAM,KAAK,cAAc,YAAY;AAEtD,UAAM,WAAW;AAAA,MACb,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,MAAM,KAAK,KAAK;AAAA,MAChB,SAAS;AAAA,MACT,OAAO;AAAA,QACH,CAAC,GAAG,UAAU,SAAS,EAAE,GAAG;AAAA,UACxB,CAAC,GAAG,UAAU,MAAM,MAAM,EAAE,GAAG;AAAA,QAClC;AAAA,MACJ;AAAA,IACb;AACQ,WAAO;AAAA,EACV;AAAA,EAED,MAAM,kBAAkB,OAAO;AAG3B,UAAM,kBAAkB,MAAM,WAAW,WAAW,MAAM,aAAa;AAAA,MACnE,OAAO;AAAA,MACP,SAAS,MAAM;AAAA,MACf,WAAW;AAAA,IACvB,CAAS;AAED,UAAM,WAAW;AAEjB,QAAI;AACJ,QAAI,KAAK,gBAAgB,GAAG;AACxB,qBAAe,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,qBAAqB;AAAA,QACvE,QAAQ,KAAK;AAAA,QACb,MAAM,MAAM;AAAA,MAC5B,CAAa;AAAA,IACb,WAAmB,KAAK,gBAAgB,GAAG;AAC/B,qBAAe,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,uBAAuB;AAAA,QACzE,QAAQ,KAAK;AAAA,QACb,MAAM,MAAM;AAAA,MAC5B,CAAa;AAAA,IACb,OAAe;AACH,qBAAe,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,mBAAmB;AAAA,QACrE,MAAM,MAAM;AAAA,MAC5B,CAAa;AAAA,IACJ;AAED,UAAM,eAAe;AAAA,MACjB;AAAA,MACA,WAAW;AAAA,MACX;AAAA,MACA,cAAc,OAAO,KAAK,GAAG,UAAU,SAAS,8BAA8B;AAAA,MAC9E,WAAW,KAAK;AAAA,MAChB,YAAY,MAAM;AAAA,MAClB,IAAI,MAAM;AAAA,MACV,OAAO,KAAK,MACP,OAAO,CAAC,SAAS,KAAK,QAAQ,KAAK,SAAS,EAC5C,IAAI,CAAC,UAAU;AAAA,QACZ,IAAI,KAAK;AAAA,QACT,MAAM,KAAK,UAAU;AAAA,QACrB,KAAK,KAAK,UAAU,OAAO,OAAO,KAAK;AAAA,MAC3D,EAAkB;AAAA,IAClB;AAEQ,UAAM,WAAW,MAAM,KAAK,cAAc,YAAY;AAEtD,UAAM,WAAW;AAAA,MACb,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,MAAM,KAAK,KAAK;AAAA,MAChB,SAAS;AAAA,MACT,OAAO;AAAA,QACH,CAAC,GAAG,UAAU,SAAS,EAAE,GAAG;AAAA,UACxB,CAAC,GAAG,UAAU,MAAM,MAAM,EAAE,GAAG;AAAA,QAClC;AAAA,MACJ;AAAA,IACb;AACQ,WAAO;AAAA,EACV;AAAA,EAED,MAAM,eAAe,OAAO;AACxB,QAAI,CAAC,KAAK,KAAK,MAAM;AACjB,UAAI,KAAK,0BAA0B,KAAK,aAAa,UAAU;AAC3D,cAAME,yBAAuB;AAAA,UACzB;AAAA,UACA,MAAM;AAAA,UACN,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL;AAAA,UACA,UAAU;AAAA,QAC9B;AAAA,MACA,OAAmB;AACH,cAAM,KAAK;AACX,cAAM,WAAW,MAAM,KAAK,gBAAgB,KAAK;AACjD,iBAAS,sBAAsB,UAAU,KAAK,QAAQ;AACtD,oBAAY,OAAO,QAAQ;AAAA,MAC9B;AAAA,IACb,OAAe;AAEH,YAAM,2BAA2B;AAAA,QAC7B;AAAA,QACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,kCAAkC;AAAA,MAClG;AACY,YAAM,KAAK;AAEX,UAAI,KAAK,WAAW,SAAS,GAAG;AAC5B,cAAM,WAAW,MAAM,KAAK,gBAAgB,KAAK;AACjD,YAAI,CAAC,0BAA0B;AAC3B,mBAAS,sBAAsB,UAAU,KAAK,QAAQ;AAAA,QACzD;AACD,oBAAY,OAAO,QAAQ;AAAA,MAC9B;AAED,UAAI,KAAK,wBAAwB;AAC7B,cAAM,aAAa,MAAM,KAAK,kBAAkB,KAAK;AACrD,iBAAS,sBAAsB,YAAY,QAAQ;AACnD,oBAAY,OAAO,UAAU;AAAA,MAChC;AAAA,IACJ;AAAA,EACJ;AACL;AA/f4B;AAArB,IAAM,iBAAN;ACOA,IAAA,uBAAA,WAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAS3B,aAAa,0BAA0B,aAAa,QAAQ,MAAMR,WAAU,CAAA,GAAI;AAC5E,QAAI,aAAa,CAAA;AACjB,QAAI,QAAQ,SAAS,OAAO,OAAO,WAAW,WAAW,GAAG;AACxD,aAAO,OAAO,MAAM,6BAA6B;AAAA,IAC7D,OAAe;AACH,mBAAa,QAAS,MAAM,gBAAgB,QAAQ,QAAQ,CAAC,KAAK,IAAK,OAAO,OAAO;AAAA,IACxF;AACD,WAAO,KAAK,6BAA6B;AAEzC,UAAMO,YAAW,IAAI,gBAAgB,aAAaP,QAAO;AACzD,UAAMO,UAAS;AAEf,eAAWG,UAAS,YAAY;AAC5B,aAAO,KAAK,wCAAwCA,OAAM,IAAI,KAAK,IAAI;AASvE,YAAM,aAAa,MAAMH,UAAS;AAClC,YAAM,WAAWA,UAAS;AAC1B,YAAMD,QAAOC,UAAS;AAEtB,YAAMN,WAAU,YAAY;AAC5B,YAAMU,MAAK,IAAI;AAAA,QACX;AAAA,QACAV;AAAA,QACAD,UAAS;AAAA,QACTA,UAAS;AAAA,MACzB;AACY,YAAM,gBAAgB,MAAMW,IAAG;AAE/B,YAAM,iBAAiB,oCAAoCD,QAAOT,QAAO;AAEzE,aAAO,KAAK,sCAAsCS,OAAM,IAAI,KAAK,IAAI;AAErE,UAAI,cAAcV,SAAQ,WAAW,GAAG;AACpC,YAAI,CAACA,SAAQ,aAAa;AACtB;AAAA,QACH;AAAA,MACJ;AAED,YAAM,kBAAkB,IAAI,gBAAgB,eAAe,UAAUM,KAAI;AACzE,YAAM,gBAAgB,eAAe,WAAW;AAAA,IACnD;AACD,WAAO,KAAK,8BAA8B;AAC1C;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,aAAa,gBAAgB,aAAaN,WAAU,IAAI;AACpD,UAAMO,YAAW,IAAI,gBAAgB,aAAaP,QAAO;AACzD,UAAMO,UAAS;AAEf,UAAM,aAAa,MAAMA,UAAS;AAEb,IAAAA,UAAS,SAAS;AACrB,IAAAA,UAAS,SAAS;AAClB,IAAAA,UAAS,SAAS;AAEpC,UAAM,WAAWA,UAAS;AAC1B,UAAMD,QAAOC,UAAS;AAEtB,UAAMN,WAAU,YAAY;AAC5B,UAAMU,MAAK,IAAI,cAAc,aAAaV,UAASD,UAAS,0BAA0BA,UAAS,eAAe;AAC9G,UAAM,gBAAgB,MAAMW,IAAG;AAE/B,UAAM,QAAQ,MAAM,GAAkB,YAAY,WAAW;AAE7D,UAAM,iBAAiB,oCAAoC,OAAOV,QAAO;AAGzE,QAAI,cAAcD,SAAQ,WAAW,GAAG;AACpC,UAAI,CAACA,SAAQ,aAAa;AACtB;AAAA,MACH;AAAA,IACJ;AAED,UAAM,kBAAkB,IAAI,gBAAgB,eAAe,UAAUM,KAAI;AACzE,UAAM,gBAAgB,eAAe,WAAW;AAAA,EAEnD;AAAA,EAED,aAAa,oBAAoB,aAAaN,WAAU,IAAI;AACxD,UAAMO,YAAW,IAAI,gBAAgB,aAAaP,QAAO;AACzD,UAAMO,UAAS;AACf,UAAM,aAAa,MAAMA,UAAS;AAElC,UAAM,WAAWA,UAAS;AAC1B,UAAMD,QAAOC,UAAS;AACtB,UAAMN,WAAU,YAAY;AAE5B,UAAMU,MAAK,IAAI,cAAc,aAAaV,UAASD,UAAS,0BAA0BA,UAAS,eAAe;AAC9G,UAAM,gBAAgB,MAAMW,IAAG;AAE/B,UAAM,kBAAkB,IAAI,gBAAgB,eAAe,UAAUL,KAAI;AAEzE,UAAM,gBAAgB,eAAe,WAAW;AAAA,EACnD;AAAA,EAED,aAAa,YAAY,OAAO,eAAe,QAAW;AACtD,UAAM,YAAY,gBAAgB,MAAM,QAAQ,UAAU,WAAW,UAAU,MAAM,sBAAsB;AAC3G,QAAI,QAAQ,KAAK,OAAO,QAAQ,SAAS;AACzC,QAAI,CAAC,OAAO;AACR,cAAQ,MAAM,MAAM,OAAO;AAAA,QACvB,MAAM,aAAa;AAAA,QACnB,MAAM,KAAK,UAAU,IAAI;AAAA;AAAA,QACzB,KAAK,WAAW,UAAU,SAAS;AAAA,QACnC,MAAM;AAAA,QACN,OAAO,EAAE,WAAW,KAAM;AAAA,MAC1C,CAAa;AAAA,IACJ;AAED,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,OAAO,uBAAuB,gBAAgB,IAAIM,QAAO;AACrD,QAAI,CAAC,aAAa,EAAE,KAAK,SAAS,EAAE,KAAK,GAAG;AACxC,aAAO;AAAA,IACV;AACD,QAAI,CAACA,QAAO;AACR,aAAO;AAAA,IACV;AACD,UAAM,eAAe,GAAkB,wBAAwB,cAAc;AAC7E,QAAI,CAAC,aAAa,IAAIA,OAAM,KAAM,CAAA,GAAG;AACjC,aAAO;AAAA,IACV;AACD,QAAI,aAAa,IAAIA,OAAM,KAAI,CAAE,KAAK,SAAS,EAAE,GAAG;AAChD,aAAO;AAAA,IACnB,OAAe;AACH,aAAO;AAAA,IACV;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,OAAO,wBAAwB,gBAAgB;AAC3C,UAAM,kBAAkB,aAAa,cAAc;AACnD,UAAM,eAAe,oBAAI;AACzB,eAAW,SAAS,iBAAiB;AACjC,UAAI,CAAC,SAAS,CAAC,MAAM,SAAS,GAAG,GAAG;AAChC;AAAA,MACH;AACD,YAAM,KAAK,MAAM,MAAM,GAAG;AAC1B,YAAM,aAAa,GAAG,CAAC,EAAE,KAAI;AAC7B,YAAM,UAAU,GAAG,CAAC,EAAE,KAAI;AAC1B,mBAAa,IAAI,YAAY,iBAAiB,YAAY,OAAO,CAAC;AAAA,IACrE;AACD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,OAAO,0BAA0B,gBAAgB;AAC7C,UAAM,eAAe,GAAkB,wBAAwB,cAAc;AAC7E,QAAI,YAAY,CAAA;AAChB,aAAS,CAAC,KAAK,KAAK,KAAK,aAAa,QAAO,GAAI;AAC7C,gBAAU,KAAK,GAAG,GAAG,IAAI,KAAK,EAAE;AAAA,IACnC;AACD,WAAO,UAAU,KAAK,GAAG,EAAE,KAAI;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,aAAa,qBAAqB,aAAa;AAC3C,UAAM,QAAQ,MAAM,gBAAgB,kBAAkB,WAAW;AACjE,UAAM,MAAM,CAAA;AACZ,QAAIX,WAAU,MAAM,SAAS,YAAY,CAAA;AAIzC,UAAM,sBAAsB;AAAA,MACxB;AAAA,MACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,sBAAsB;AAAA,IAClF;AACQ,eAAW,KAAKA,UAAS;AACrB,UACI,qBAEF;AACE,cAAM,iBAAiB;AAAA,UACnB;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,+BAA+B;AAAA,QACnG;AACgB,YAAI,gBAAgB;AAChB,gBAAM,eAAe,GAAkB,wBAAwB,cAAc;AAC7E,qBAAW,WAAW,aAAa,UAAU;AACzC,gBAAI,KAAK,MAAM,qBAAqB,OAAO,CAAC;AAAA,UAC/C;AAAA,QACJ;AAAA,MACjB,OAAmB;AACH,cAAM,UAAU,YAAY,GAAG,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,oBAAoB,EAAE;AACrG,YAAI,KAAK,MAAM,qBAAqB,OAAO,CAAC;AAAA,MAC/C;AAAA,IACJ;AACD,UAAM,YAAY,KAAK,IAAI,GAAG,GAAG;AACjC,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,OAAO,yBAAyB,aAAa;AACzC,UAAM,QAAQ,gBAAgB,iBAAiB,WAAW;AAC1D,UAAM,MAAM,CAAA;AACZ,QAAIA,WAAU,MAAM,SAAS,YAAY,CAAA;AAIzC,UAAM,sBAAsB;AAAA,MACxB;AAAA,MACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,sBAAsB;AAAA,IAClF;AACQ,eAAW,KAAKA,UAAS;AACrB,UACI,qBAEF;AACE,cAAM,iBAAiB;AAAA,UACnB;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,+BAA+B;AAAA,QACnG;AACgB,YAAI,gBAAgB;AAChB,gBAAM,eAAe,GAAkB,wBAAwB,cAAc;AAC7E,qBAAW,WAAW,aAAa,UAAU;AACzC,gBAAI,KAAK,yBAAyB,OAAO,CAAC;AAAA,UAC7C;AAAA,QACJ;AAAA,MACjB,OAAmB;AACH,cAAM,UAAU,YAAY,GAAG,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,oBAAoB,EAAE;AACrG,YAAI,KAAK,yBAAyB,OAAO,CAAC;AAAA,MAC7C;AAAA,IACJ;AACD,UAAM,YAAY,KAAK,IAAI,GAAG,GAAG;AACjC,WAAO;AAAA,EACV;AACL,GA7Q+B,iCAAxB;ACPA,MAAM,mBAAN,MAAM,iBAAgB;AAAA;AAAA,EAGzB,IAAI,WAAW;AACX,WAAO,KAAK,QAAQ;AAAA,EACvB;AAAA,EAED,YAAY,OAAOD,UAAS;AACxB,SAAK,QAAQ;AACb,SAAK,UAAU;AAAA,MACX;AAAA,QACI,MAAM;AAAA,QACN,SAAS,CAAE;AAAA,QACX,WAAW;AAAA,QACX,aAAa;AAAA,QACb,UAAU;AAAA,QACV,QAAQ;AAAA,MACX;AAAA,MACDA;AAAA,IACZ;AACQ,SAAK,WAAW;AAChB,SAAK,uBAAuB;AAC5B,SAAK,kBAAkB,KAAK,QAAQ,kBAC9B,KAAK,QAAQ,kBACb,KAAK,MAAM,QAAQ,UAAU,WAAW,UAAU,MAAM,cAAc;AAC5E,SAAK,QAAQ,kBAAkB,KAAK;AAAA,EACvC;AAAA,EAED,MAAM,aAAa;AACf,QAAI,aAAa,MAAM,SAAS,cAAc,KAAK,OAAO,KAAK,OAAO;AACtE,SAAK,UAAU;AAAA,MACX;AAAA,QACI,MAAM;AAAA,QACN,SAAS,CAAE;AAAA,QACX,WAAW;AAAA,QACX,aAAa;AAAA,QACb,UAAU;AAAA,QACV,QAAQ;AAAA,MACX;AAAA,MACD;AAAA,IACZ;AACQ,SAAK,WAAW;AAChB,SAAK,YAAY,KAAK,MAAM;AAC5B,QAAI,CAAC,KAAK,UAAU,WAAW,YAAY,GAAG;AAC1C,UAAI,KAAK,QAAQ,YAAY;AACzB,cAAM,KAAK,MAAM;MACpB;AAED,UAAI,KAAK,QAAQ,gBAAgB;AAC7B,cAAM,KAAK,MAAM,OAAO;AAAA,UACpB,SAAS,KAAK,MAAM,QAAQ,IAAI,CAAC,YAAY;AAAA,YACzC,KAAK,OAAO;AAAA,YACZ,QAAQ,OAAO,MAAM,CAAC,KAAK,OAAO,MAAM,CAAC,IAAI;AAAA,UACrE,EAAsB;AAAA,QACtB,CAAiB;AACD,cAAM,KAAK,MAAM;MACpB;AAAA,IACJ;AACD,SAAK,kBAAkB,KAAK,QAAQ,kBAC9B,KAAK,QAAQ,kBACb,KAAK,MAAM,QAAQ,UAAU,WAAW,UAAU,MAAM,cAAc;AAC5E,SAAK,QAAQ,kBAAkB,KAAK;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBD,MAAM,UAAUC,UAAS,EAAE,MAAAK,QAAO,MAAM,cAAc,CAAA,GAAI,iBAAiB,GAAI,IAAG,IAAI;AAClF,UAAM,UAAU,YAAY;AAG5B,UAAM,YAAY,mBAAmBL,SAAQ,SAAS,IAAI,WAAW,EAAE;AACvE,kBAAc,QAAQ,MAAM;AAAA,MACxB;AAAA,QACI,QAAQ,KAAK,KAAK,OAAO,WAAW,EAAE,QAAQA,SAAQ,QAAQ,MAAM,KAAK,MAAM,KAAI,CAAE;AAAA,QACrF,MAAM,KAAK,KAAK;AAAA,QAChB;AAAA,QACA,MAAMK,QAAO,MAAM,mBAAmB,OAAO,MAAM,mBAAmB;AAAA,QACtE,MAAMA;AAAA,QACN,OAAOA,QAAO,OAAO,OAAO,OAAO;AAAA,QACnC,OAAO,EAAE,kBAAkB,KAAK,MAAM,GAAI;AAAA,MAC7C;AAAA,MACD;AAAA,IACZ;AAmBQ,QAAI,gBAAgBL,SAAQ,IAAI,CAAC,WAAW;AACxC,UAAI,kBAAkB,aAAa;AAC/B,cAAM,IAAI,OAAO,SAAS,KAAK;AAC/B,UAAE,OAAO,OAAO;AAChB,UAAE,OAAO,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO;AACpD,eAAO;AAAA,MACvB,OAAmB;AACH,cAAM,IAAI;AACV,UAAE,OAAO,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO;AACpD,eAAO;AAAA,MACV;AAAA,IACb,CAAS;AAED,QAAI,KAAK,oBAAoB,UAAU,mBAAmB;AACtD,YAAM,iBAAiB,IAAI,eAAe,eAAe,KAAK,UAAUK,KAAI;AAC5E,YAAM,eAAe,eAAe,KAAK,KAAK;AAAA,IACjD,WAAU,KAAK,oBAAoB,UAAU,iBAAiB;AAC3D,YAAM,eAAe,GAAG;AACxB,YAAM,eAAe,IAAI,aAAa,eAAe,cAAc,KAAK,UAAUA,KAAI;AACtF,YAAM,aAAa,eAAe,KAAK,KAAK;AAAA,IAC/C,WAAU,KAAK,oBAAoB,UAAU,kBAAkB;AAC5D,YAAM,gBAAgB,IAAI,cAAc,eAAe,KAAK,UAAUA,KAAI;AAC1E,YAAM,cAAc,eAAe,KAAK,KAAK;AAAA,IAChD,WAAU,KAAK,oBAAoB,UAAU,oBAAoB;AAC9D,YAAM,kBAAkB,IAAI,gBAAgB,eAAe,KAAK,UAAUA,KAAI;AAC9E,YAAM,gBAAgB,eAAe,KAAK,KAAK;AAAA,IAC3D,OAAe;AAEH,kBAAY,UAAU,MAAM,eAAe,OAAO,UAAU,gBAAgB;AAAA;AAAA,QAExE,aAAa,MAAM,WAAW,WAAW,KAAK,MAAM,aAAa,EAAE,WAAW,MAAM,OAAO,KAAI,CAAE;AAAA,QACjG,SAASL,SAAQ,IAAI,CAAC,WAAW;AAC7B,cAAI,kBAAkB,aAAa;AAC/B,kBAAM,IAAI,OAAO,SAAS,KAAK;AAC/B,cAAE,OAAO,OAAO;AAChB,cAAE,OAAO,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO;AACpD,mBAAO;AAAA,UAC/B,OAA2B;AACH,kBAAM,IAAI;AACV,cAAE,OAAO,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO;AACpD,mBAAO;AAAA,UACV;AAAA,QACrB,CAAiB;AAAA,QACD,UAAU,KAAK,MAAM,eAAeK,QAAO,MAAMA,MAAK,OAAM,IAAK;AAAA,QACjE,OAAO,KAAK;AAAA,MAC5B,CAAa;AAGD,aAAO,YAAY,eAAe,OAAO,aAAa,cAAc;AAAA,IACvE;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeD,MAAM,KAAK,EAAE,MAAAA,OAAM,YAAY,MAAM,SAAAL,WAAU,CAAE,GAAE,cAAc,MAAM,SAAQ,IAAK,CAAA,GAAI;AACpF,UAAM,OAAO,MAAM,KAAK,MAAM,KAAK,EAAE,MAAAK,OAAM,WAAW,SAAAL,UAAS,aAAa,OAAO,SAAU,CAAA;AAE7F,QAAI,aAAa,CAAA;AACjB,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC1C,YAAM,IAAI,KAAK,QAAQ,CAAC;AAExB,UAAI,gBAAgB;AACpB,UAAI,YAAY,GAAG,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,8BAA8B,EAAE,GAAG;AAClG,wBACI,YAAY,GAAG,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,8BAA8B,EAAE,KAC/F;AAAA,MACP;AACD,UACI,CAAC,iBACD,YAAY,GAAG,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B,EAAE,GAC9F;AACE,wBACI,YAAY,GAAG,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B,EAAE,KAAK;AAAA,MACxG;AACD,UAAI,EAAE,SAAS,MAAM,mBAAmB,MAAM;AAC1C,wBAAgB;AAAA,MACnB;AACD,YAAM,YAAY,MAAM,iBAAiB,QAAQ,aAAa;AAE9D,UAAI,aAAa,QAAQ,cAAc,MAAM,cAAc,KAAK;AAC5D,mBAAW,KAAK,CAAC;AAAA,MACjC,OAAmB;AACH,cAAM,SAAS,KAAK,OAAO,SAAS;AACpC,cAAM,MAAM,MAAM,OAAO,SAAS,EAAE,OAAO,MAAM,GAAG;AACpD,eAAO,IAAI,EAAE;AACb,qBAAa,WAAW,OAAO,MAAM,EAAE,EAAE,KAAK,CAAC,CAAC;AAAA,MACnD;AAAA,IACJ;AACD,SAAK,UAAU;AAEf,WAAO,IAAI,IAAI;AAGf,QAAI,aAAa;AACb,YAAM,KAAK,UAAU,KAAK,SAAS;AAAA,QAC/B,MAAMK;AAAA,QACN,gBAAgB,EAAE,SAAU;AAAA,MAC5C,CAAa;AAAA,IACJ;AACD,WAAO,IAAI,iBAAiB,OAAO,KAAK,OAAO;AAC/C,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcD,MAAM,SAAS,QAAQ,EAAE,MAAAA,QAAO,MAAM,YAAY,MAAM,cAAc,OAAO,WAAW,MAAM,SAAS,EAAC,IAAK,CAAA,GAAI;AAC7G,QAAIL,WAAU,CAAA;AACd,QAAI,UAAU,CAAA;AACd,UAAM,QAAQ,CAAA;AAGd,aAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC7B,UAAI,OAAO,MAAM,KAAK,KAAK,EAAE,MAAAK,OAAM,WAAW,OAAM,CAAE;AACtD,UAAI,KAAK,QAAQ,QAAQ;AACrB,cAAM,KAAK,KAAK,IAAI;AACpB,QAAAL,WAAUA,SAAQ,OAAO,KAAK,OAAO;AAAA,MACrD;AAAmB;AAGP,UAAI,CAAC,KAAK,MAAM,eAAe,CAAC,KAAK,MAAM,MAAM;AAC7C,kBAAU,QAAQ;AAAA,UACd,KAAK,QAAQ,IAAI,CAAC,MAAM;AACpB,cAAE,QAAQ;AACV,mBAAO,EAAE,KAAK,EAAE,IAAI,OAAO,KAAI;AAAA,UACvD,CAAqB;AAAA,QACrB;AAAA,MACa;AAAA,IACJ;AAGD,UAAM,OAAO,SAAS,UAAU,KAAK;AACrC,IAAAK,QAAO,KAAK,sBAAsB,UAAU,CAAC,IAAI,CAAC;AAGlD,QAAI,QAAQ,QAAQ;AAChB,YAAM,KAAK,MAAM,wBAAwB,eAAe,SAAS,EAAE,MAAM,MAAK,CAAE;AAAA,IACnF;AAGD,UAAM,gBAAgB,YAAY,KAAK,OAAO,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,YAAY,EAAE;AAC5G,UAAM,2BAA2B;AAAA,MAC7B,KAAK;AAAA,MACL,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,kCAAkC;AAAA,IAC9F;AACQ,IAAAL,SAAQ,IAAI,CAAC,MAAM;AACf,UACI,iBACA;AAAA,QACI,YAAY,GAAG,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B,EAAE;AAAA,MAChH,MAAsB,QACR;AACE,oBAAY,GAAG,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B,IAAI,IAAI;AAAA,MAClH,OAAmB;AACH,oBAAY,GAAG,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B,IAAI,KAAK;AAAA,MACtG;AACD,UACI,4BACA;AAAA,QACI;AAAA,UACI;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,yCAAyC;AAAA,QAC5F;AAAA,MACrB,MAAsB,QACR;AACE;AAAA,UACI;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,yCAAyC;AAAA,UACzF;AAAA,QACpB;AAAA,MACA,OAAmB;AACH;AAAA,UACI;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,yCAAyC;AAAA,UACzF;AAAA,QACpB;AAAA,MACa;AACD,aAAO;AAAA,IACnB,CAAS;AAGD,QAAI,eAAeA,SAAQ,QAAQ;AAC/B,YAAM,KAAK,UAAUA,UAAS;AAAA,QAC1B,MAAMK;AAAA,QACN,gBAAgB,EAAE,SAAU;AAAA,MAC5C,CAAa;AAAA,IACJ;AAGD,WAAO,EAAE,MAAAA,OAAM,SAAAL;EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyDD,MAAM,KAAK,EAAE,MAAAK,OAAM,YAAY,MAAM,SAAS,EAAG,IAAG,IAAI;AAEpD,QAAI,SAAS,GAAG;AACZ,YAAM,OAAO;AAAA,QACT,2EAA2E,KAAK,MAAM,EAAE;AAAA,MACxG;AAAA,IACS;AAGD,QAAI,CAAC,KAAK,MAAM,SAAS;AACrB,YAAM,KAAK,MAAM;IACpB;AAID,QAAIL,WAAU,CAAA;AASd,QAAI,KAAK,QAAQ,eAAe;AAE5B,MAAAK,QAAO,KAAK,OAAO,QAAQ;AAG3B,UAAI,YAAY,KAAK,MAAM,QAAQ,OAAO,CAAC,MAAM,CAAC,EAAE,KAAK;AACzD,UAAI,CAAC,UAAU,QAAQ;AACnB,eAAO,KAAK,KAAK,KAAK,SAAS,0BAA0B,GAAG,IAAI;AAChE,eAAO,EAAE,MAAAA,OAAM,SAAAL;MAClB;AAED,YAAM,sBAAsB;AAAA,QACxB,KAAK;AAAA,QACL,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,sBAAsB;AAAA,MACtF;AACY,UAAI,uBAAuB,KAAK,QAAQ,oBAAoB,UAAU,oBAAoB;AACtF,cAAM,eAAe,CAAA;AACrB,mBAAW,KAAK,WAAW;AACvB,gBAAM,mBAAmB;AAAA,YACrB;AAAA,YACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,+BAA+B;AAAA,UACvG;AACoB,cAAI,kBAAkB;AAClB,kBAAM,iBAAiBY,oBAAkB,0BAA0B,gBAAgB;AACnF,kBAAM,eAAe,QAAQ,MAAM,UAAU,CAAC;AAC9C;AAAA,cACI;AAAA,cACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,+BAA+B;AAAA,cAC/E;AAAA,YAC5B;AACwB,yBAAa,KAAK,YAAY;AAAA,UACtD,OAA2B;AACH,yBAAa,KAAK,CAAC;AAAA,UACtB;AAAA,QACJ;AACD,oBAAY;AAAA,MACf;AAGD,YAAM,UAAU;AAChB,YAAM,UAAU;AAChB,YAAM,iBAAiB,UAAU;AAAA,QAC7B,CAAC,OAAO,WAAW;AACf,gBAAM,uBACF;AAAA,YACI;AAAA,YACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,mCAAmC;AAAA,UACtF,KAAI;AACT,cAAI,sBAAsB,aAAa,oBAAoB,IAAI,uBAAuB;AACtF,gCAAsB,sBAAsB;AAE5C,gBAAM,uBACF;AAAA,YACI;AAAA,YACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,oCAAoC;AAAA,UACvF,KAAI;AACT,cAAI,sBAAsB,aAAa,oBAAoB,IAAI,uBAAuB;AACtF,gCAAsB,sBAAsB;AAE5C,gBAAM,IAAI,CAAC,qBAAqB,mBAAmB;AACnD,cAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,IAAI,MAAM,CAAC;AAAG,kBAAM,CAAC,IAAI,EAAE,CAAC;AAChD,cAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,IAAI,MAAM,CAAC;AAAG,kBAAM,CAAC,IAAI,EAAE,CAAC;AAChD,iBAAO;AAAA,QACV;AAAA,QACD,CAAC,MAAM,IAAI;AAAA,MAC3B;AACY,UAAI,eAAe,CAAC,IAAI,WAAW,eAAe,CAAC,IAAI,SAAS;AAE5D,eAAO,EAAE,MAAAP,OAAM,SAAAL;MAClB;AAED,MAAAK,QAAO,MAAMA,MAAK,OAAO,EAAE,OAAO,KAAI,CAAE;AAExC,UAAI,aAAa,KAAK,kBAAkBA,MAAK,KAAK;AAClD,UAAI,YAAY,SAAS,GAAG;AACxB,YAAI,YAAY,WAAW,KAAK,MAAM,KAAK,WAAW,WAAW,MAAM,CAAC;AACxE,QAAAL,WAAU,CAAC,SAAS;AAAA,MACvB;AAAA,IACb,OAAe;AACH,UAAI,KAAK,QAAQ,MAAM;AACnB,QAAAK,QAAO,KAAK,QAAQ,gBAAgB,OAAO,KAAK,QAAQ,OAAO,KAAK,OAAO,KAAK,QAAQ,IAAI;AAAA,MAC/F;AAED,MAAAA,QAAOA,iBAAgB,OAAOA,QAAO,KAAK,OAAO,KAAK,MAAM,OAAO;AAGnE,UAAI,YAAY,KAAK,MAAM,QAAQ,OAAO,CAAC,MAAM,CAAC,EAAE,KAAK;AACzD,UAAI,CAAC,UAAU,QAAQ;AACnB,eAAO,KAAK,KAAK,KAAK,SAAS,0BAA0B,GAAG,IAAI;AAChE,eAAO,EAAE,MAAAA,OAAM,SAAAL;MAClB;AAED,YAAM,sBAAsB;AAAA,QACxB,KAAK;AAAA,QACL,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,sBAAsB;AAAA,MACtF;AACY,UAAI,uBAAuB,KAAK,QAAQ,oBAAoB,UAAU,oBAAoB;AACtF,cAAM,eAAe,CAAA;AACrB,mBAAW,KAAK,WAAW;AACvB,gBAAM,mBAAmB;AAAA,YACrB;AAAA,YACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,+BAA+B;AAAA,UACvG;AACoB,cAAI,kBAAkB;AAClB,kBAAM,iBAAiBY,oBAAkB,0BAA0B,gBAAgB;AACnF,kBAAM,eAAe,QAAQ,MAAM,UAAU,CAAC;AAC9C;AAAA,cACI;AAAA,cACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,+BAA+B;AAAA,cAC/E;AAAA,YAC5B;AACwB,yBAAa,KAAK,YAAY;AAAA,UACtD,OAA2B;AACH,yBAAa,KAAK,CAAC;AAAA,UACtB;AAAA,QACJ;AACD,oBAAY;AAAA,MACf;AAGD,UAAI,WAAW,MAAMP,MAAK,OAAO,EAAE,UAAU,MAAM,OAAO,KAAM,CAAA,GAAG;AACnE,UAAI,WAAW,MAAMA,MAAK,OAAO,EAAE,UAAU,MAAM,OAAO,KAAM,CAAA,GAAG;AACnE,UAAI,iBAAiB,UAAU;AAAA,QAC3B,CAAC,OAAO,WAAW;AACf,gBAAM,IAAI,OAAO;AACjB,cAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,IAAI,MAAM,CAAC;AAAG,kBAAM,CAAC,IAAI,EAAE,CAAC;AAChD,cAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,IAAI,MAAM,CAAC;AAAG,kBAAM,CAAC,IAAI,EAAE,CAAC;AAChD,iBAAO;AAAA,QACV;AAAA,QACD,CAAC,MAAM,IAAI;AAAA,MAC3B;AACY,UAAI,eAAe,CAAC,IAAI,WAAW,eAAe,CAAC,IAAI,SAAS;AAC5D,YAAI,KAAK,SAAS,IAAI,UAAU,WAAW,kCAAkC,GAAG;AAC5E,gBAAM,KAAK,MAAM;AACjB,gBAAM,KAAK,MAAM,OAAO;AAAA,YACpB,SAAS,KAAK,MAAM,QAAQ,IAAI,CAAC,YAAY;AAAA,cACzC,KAAK,OAAO;AAAA,cACZ,QAAQ,OAAO,MAAM,CAAC,KAAK,OAAO,MAAM,CAAC,IAAI;AAAA,YACzE,EAA0B;AAAA,UAC1B,CAAqB;AACD,gBAAM,KAAK,MAAM;AACjB,UAAAA,QAAO,KAAK,OAAO,KAAK,MAAM,OAAO;AACrC,qBAAW,MAAMA,MAAK,OAAO,EAAE,UAAU,MAAM,OAAO,MAAM,GAAG;AAC/D,qBAAW,MAAMA,MAAK,OAAO,EAAE,UAAU,MAAM,OAAO,MAAM,GAAG;AAE/D,2BAAiB,MAAM,iBAAiB,uBAAuB,KAAK,KAAK;AACzE,cAAI,eAAe,CAAC,IAAI,WAAW,eAAe,CAAC,IAAI,SAAS;AAC5D,mBAAO;AAAA,cACH;AAAA,cACA;AAAA,cACA,KAAK;AAAA,YACjC;AACwB,mBAAO,EAAE,MAAAA,OAAM,SAAAL;UAClB;AAAA,QACrB,OAAuB;AACH,iBAAO,KAAK,iEAAiE,MAAM,KAAK,KAAK;AAC7F,iBAAO,EAAE,MAAAK,OAAM,SAAAL;QAClB;AAAA,MACJ;AAGD,UAAI,OAAO;AACX,aAAO,CAACA,SAAQ,QAAQ;AACpB,YAAI,QAAQ,KAAO;AAEf,gBAAM,kBAAkB;AAAA,YACpB,KAAK;AAAA,YACL,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,uBAAuB;AAAA,UAC/F;AACoB,gBAAM,6BAA6B;AAAA,YAC/B,KAAK;AAAA,YACL,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,oCAAoC;AAAA,UAC5G;AACoB,cAAI,mBAAmB,CAAC;AAA4B;AAAA,eAE7C;AACH,mBAAO;AAAA,cACH,gDAAgD,KAAK,MAAM,IAAI;AAAA,cAC/D;AAAA,YAC5B;AAAA,UACqB;AAKD;AAAA,QACH;AACD,QAAAK,QAAO,MAAMA,MAAK,OAAO,EAAE,OAAO,KAAI,CAAE;AACxC,QAAAL,WAAU,KAAK,kBAAkBK,MAAK,KAAK;AAC3C;AAAA,MACH;AAAA,IACJ;AAGD,QAAI,WAAW;AACX,UAAI,QAAQ,CAAA;AACZ,eAAS,UAAUL,UAAS;AACxB,YAAI,gBAAgB;AACpB,YACI;AAAA,UACI;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,8BAA8B;AAAA,QACjF,GACH;AACE,0BACI;AAAA,YACI;AAAA,YACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,8BAA8B;AAAA,UACjF,KAAI;AAAA,QACZ;AACD,YACI,CAAC,iBACD,YAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B,EAAE,GACnG;AACE,0BACI;AAAA,YACI;AAAA,YACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B;AAAA,UAC9E,KAAI;AAAA,QACZ;AAED,YAAI,OAAO,SAAS,MAAM,mBAAmB,MAAM;AAC/C,0BAAgB;AAAA,QACnB;AACD,cAAM,eAAe,MAAM,iBAAiB,QAAQ,aAAa;AAEjE,YAAIH;AACJ,YAAI;AACJ,YAAI,OAAO,SAAS,MAAM,mBAAmB,UAAU;AACnD,yBAAe,OAAO;AAAA,QACzB,WAAU,OAAO,SAAS,MAAM,mBAAmB,YAAY;AAC5D,UAAAA,QAAO,MAAM,gBAAgB,6BAA6B,OAAO,oBAAoB,OAAO,KAAK;AACjG,yBAAeA,OAAM;AAAA,QACxB;AACD,YAAI,iBAAiB,aAAa;AAC9B,gBAAM,KAAK,OAAO;AAClB,gBAAM,aAAaA,QAAO,MAAMA,MAAK,YAAY,EAAE,IAAI,gBAAgB,iBAAiB,IAAI,IAAI;AAChG,cAAI,YAAY;AACZ,kBAAM,eAAe,KAAK;AAC1B,yBAAa,kBAAkB,KAAK,QAAQ,8BACtC,aAAa,kBACb;AACN,kBAAM,gBAAgB,IAAI,iBAAgB,YAAY,YAAY;AAClE,kBAAM,cAAc;AACpB,kBAAM,YAAY,MAAM,cAAc,SAAS,cAAc;AAAA,cACzD,MAAM;AAAA,cACN,WAAW;AAAA,cACX,aAAa;AAAA,cACb,UAAU;AAAA,cACV,QAAQ,SAAS;AAAA,YAC7C,CAAyB;AACD,oBAAQ,MAAM,OAAO,UAAU,OAAO;AAAA,UACzC;AAAA,QACrB,OAAuB;AACH,gBAAM,KAAK,MAAM;AAAA,QACpB;AAAA,MACJ;AACD,MAAAG,WAAU;AAAA,IACb;AAGD,WAAO,EAAE,MAAAK,OAAM,SAAAL;EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,kBAAkB,OAAO;AAErB,QAAI,KAAK,yBAAyB,KAAK,QAAQ,MAAM,MAAS;AAC9D,QAAI,SAAS,KAAK,QAAQ,UAAU;AAIpC,QAAI,gBAAgB,CAAA;AACpB,QAAI,KAAK,QAAQ,eAAe;AAC5B,sBAAgB,KAAK,MAAM,QAAQ,OAAO,CAAC,MAAM;AAC7C,cAAM,uBACF;AAAA,UACI;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,mCAAmC;AAAA,QACtF,KAAI;AACT,YAAI,sBAAsB,aAAa,oBAAoB,IAAI,uBAAuB;AACtF,8BAAsB,sBAAsB;AAE5C,cAAM,uBACF;AAAA,UACI;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,oCAAoC;AAAA,QACvF,KAAI;AACT,YAAI,sBAAsB,aAAa,oBAAoB,IAAI,uBAAuB;AACtF,8BAAsB,sBAAsB;AAC5C,eAAO,CAAC,EAAE,SAAS,OAAO,QAAQ,OAAO,qBAAqB,qBAAqB,IAAI;AAAA,MACvG,CAAa;AAAA,IACb,OAAe;AACH,sBAAgB,KAAK,MAAM,QAAQ,OAAO,CAAC,MAAM;AAC7C,eAAO,CAAC,EAAE,SAAS,OAAO,QAAQ,OAAO,GAAG,EAAE,KAAK;AAAA,MACnE,CAAa;AAAA,IACJ;AAED,QAAI,KAAK,QAAQ,oBAAoB,UAAU,oBAAoB;AAC/D,UAAI,KAAKY,oBAAkB,yBAAyB,KAAK,KAAK,GAAG;AAE7D,eAAO;MACV;AAED,UAAI,KAAK,QAAQ,cAAc;AAE3B,YAAI,aAAa,EAAE,KAAK,SAAS,EAAE,IAAI,GAAG;AACtC,0BAAgB,cAAc,OAAO,CAAC,MAAM;AACxC,mBAAOA,oBAAkB;AAAA,cACrB;AAAA,gBACI;AAAA,gBACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,+BAA+B;AAAA,cAClF;AAAA,cACD,SAAS,EAAE;AAAA,cACX;AAAA,YAC5B;AAAA,UACA,CAAqB;AAAA,QACJ;AAAA,MACjB,OAAmB;AAEH,YAAI,aAAa,EAAE,KAAK,SAAS,EAAE,IAAI,GAAG;AACtC,0BAAgB,cAAc,OAAO,CAAC,MAAM;AACxC,mBACI,YAAY,GAAG,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,oBAAoB,EAAE,KACrF,SAAS,EAAE;AAAA,UAEvC,CAAqB;AAAA,QACJ;AAED,YAAI,QAAQ,SAAS,GAAG;AACpB,0BAAgB,cAAc,OAAO,CAAC,MAAM;AACxC,mBAAO,OAAO;AAAA,cACV,YAAY,GAAG,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,uBAAuB,EAAE;AAAA,YACpH;AAAA,UACA,CAAqB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAGD,UAAM,kBAAkB;AAAA,MACpB,KAAK;AAAA,MACL,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,uBAAuB;AAAA,IACnF;AACQ,UAAM,6BAA6B;AAAA,MAC/B,KAAK;AAAA,MACL,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,oCAAoC;AAAA,IAChG;AAEQ,UAAM,YAAY,KAAK,MAAM,QAAQ,OAAO,CAAC,MAAM,CAAC,EAAE,KAAK;AAE3D,QAAI,iBAAiB;AACjB,sBAAgB,cAAc,OAAO,CAAC,MAAM;AACxC,cAAM,UAAU,KAAK,MAAM,OAAO,MAAM,EAAE;AAC1C,YAAI,KAAK,qBAAqB,SAAS,OAAO,GAAG;AAC7C,cAAI,KAAK,qBAAqB,UAAU,UAAU,QAAQ;AACtD,gBAAI,4BAA4B;AAC5B,qBAAO;AAAA,YACV;AAAA,UACJ;AACD,iBAAO;AAAA,QAC3B,OAAuB;AACH,eAAK,qBAAqB,KAAK,OAAO;AACtC,iBAAO;AAAA,QACV;AAAA,MACjB,CAAa;AAAA,IACJ;AAGD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2CD,aAAa,WAAW,QAAQb,WAAU,IAAI;AAC1C,UAAMC,WAAU,OAAO,SAAS,IAAI,CAAC,GAAG,MAAM;AAC1C,aAAO;AAAA,QACH,MAAM,EAAE;AAAA,QACR,MAAM,OAAO,OAAO,MAAM,mBAAmB,aAAa,MAAM,mBAAmB;AAAA,QACnF,oBAAoB,OAAO,OAAO,OAAO,OAAO,OAAO;AAAA,QACvD,YAAY,EAAE;AAAA,QACd,KAAK,EAAE,aAAa,EAAE;AAAA,QACtB,QAAQ;AAAA,QACR,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;AAAA,QACpB,OAAO;AAAA,MACvB;AAAA,IACA,CAAS;AACD,IAAAD,SAAQ,cAAcA,SAAQ,eAAe;AAC7C,WAAO,KAAK;AAAA,MACR;AAAA,QACI,MAAM,OAAO;AAAA,QACb,aAAa,mDAAmD,OAAO,IAAI;AAAA,QAC3E,SAASC;AAAA,QACT,SAAS,KAAKA,SAAQ,MAAM;AAAA,MAC/B;AAAA,MACDD;AAAA,IACZ;AAAA,EACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWD,MAAM,WAAW,cAAc,MAAM;AACjC,UAAM,SAAS,cACT,MAAM,iBAAiB,QAAQ,WAAW,IAC1C,KAAK,SAAS,cAAc,KAAK,SAAS;AAEhD,SAAK,WAAW;AAEhB,UAAM,eAAe;AAAA,MACjB,MAAM,KAAK,QAAQ;AAAA,MACnB,WAAW,KAAK,QAAQ;AAAA,MACxB,aAAa,KAAK,QAAQ;AAAA,MAC1B,QAAQ;AAAA,IACpB;AACQ,QAAI,aAAa,MAAM,KAAK,gBAAgB,QAAQ,YAAY;AAEhE,QAAI,aAAa,CAAA;AACjB,eAAW,KAAK,YAAY,WAAW,CAAA,GAAI;AACvC,UAAI,OAAO;AACX,UAAI,KAAK,SAAS,MAAM,mBAAmB,MAAM;AAC7C,YAAI,OAAO,MAAM,iBAAiB,mCAAmC,GAAG,KAAK;AAC7E,YAAI,CAAC,QAAQ,CAAC,KAAK,MAAM;AACrB,iBAAO,KAAK,mCAAmC,OAAO,CAAC;AACvD,cAAI,CAAC,MAAM;AACP,mBAAO,CAAA;AAAA,UACV;AAAA,QACJ;AACD,YACI,CAAC,YAAY,MAAM,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,mBAAmB,EAAE,KACxF,KAAK,MACP;AACE;AAAA,YACI;AAAA,YACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,mBAAmB;AAAA,YACnE,KAAK,QAAQ;AAAA,UACrC;AAAA,QACiB;AAAA,MACJ;AACD,iBAAW,KAAK,IAAI;AAAA,IACvB;AACD,QAAI,WAAW,WAAW,GAAG;AACzB,aAAO;AAAA,QACH;AAAA,QACA;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,MACrB;AAAA,IACS;AAED,SAAK,UAAU;AACf,WAAO;AAAA,MACH,MAAM,KAAK;AAAA,MACX,SAAS,KAAK;AAAA,IAC1B;AAAA,EACK;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,MAAM,eAAeC,UAAS,WAAW,MAAM;AAC3C,QAAI,UAAU,EAAE,MAAM,KAAK,UAAU,aAAa,CAAA;AAClD,QAAI,gBAAgB,WAAW,WAAW,KAAK,QAAQ;AACvD,aAAS,sBAAsB,QAAQ,aAAa,aAAa;AACjE,UAAM,KAAK,UAAUA,UAAS,OAAO;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaD,MAAM,gBAAgB,QAAQ,EAAE,MAAAK,QAAO,MAAM,YAAY,MAAM,cAAc,OAAO,SAAS,EAAC,IAAK,CAAA,GAAI;AACnG,QAAIN,WAAU,YAAY,KAAK,SAAS;AAAA,MACpC,MAAMM;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,IACZ,CAAS;AAED,UAAM,gBAAgB;AAEtB,QAAI,SAAS,eAAe;AACxB,UAAI,MAAM,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,kCAAkC;AAAA,QAC/E;AAAA,QACA,SAAS,KAAK,MAAM;AAAA,MACpC,CAAa;AACD,YAAM,OAAO,MAAM,GAAG;AAAA,IACzB;AAED,QAAI,eAAe,CAAA;AAEnB,WAAO,SAAS,GAAG;AAGf,UAAI,CAAC,KAAK,MAAM,aAAa;AACzB,cAAM,cAAc,KAAK,MAAM,QAAQ,OAAO,SAAU,GAAG,GAAG;AAC1D,iBAAO,IAAI,CAAC,EAAE;AAAA,QACjB,GAAE,CAAC;AAEJ,YAAI,gBAAgB,GAAG;AACnB,gBAAM,KAAK,MAAM;AACjB;AAAA,QACH;AAAA,MAGJ;AAED,UAAI,CAAC,KAAK,MAAM,SAAS;AACrB,YAAI,MAAM,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,wBAAwB;AAAA,UACrE,MAAM,KAAK,MAAM;AAAA,QACrC,CAAiB;AACD,eAAO,MAAM,KAAK,IAAI;AACtB;AAAA,MACH;AAED,UAAI,OAAO,CAAA;AACX,UAAI,KAAK,QAAQ,eAAe;AAE5B,eAAO,MAAM,KAAK,SAAS,GAAG;AAAA,UAC1B,MAAMA;AAAA,UACN;AAAA,UACA,aAAa;AAAA,UACb,UAAU;AAAA,QAC9B,CAAiB;AAAA,MACjB,OAAmB;AAEH,eAAO,MAAM,KAAK,SAAS,GAAG;AAAA,UAC1B,MAAMA;AAAA,UACN;AAAA,UACA,aAAa;AAAA,UACb,UAAU;AAAA,QAC9B,CAAiB;AAAA,MACJ;AAED,UAAI,CAAC,KAAK,UAAU;AAChB,aAAK,WAAW,KAAK;AAAA,MACxB;AAED,iBAAW,SAAS,KAAK,SAAS;AAC9B,YAAI,gBAAgB;AACpB,YACI,YAAY,OAAO,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,8BAA8B,EAAE,GACrG;AACE,0BACI;AAAA,YACI;AAAA,YACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,8BAA8B;AAAA,UACjF,KAAI;AAAA,QACZ;AACD,YACI,CAAC,iBACD,YAAY,OAAO,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B,EAAE,GAClG;AACE,0BACI;AAAA,YACI;AAAA,YACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,2BAA2B;AAAA,UAC9E,KAAI;AAAA,QACZ;AAED,YAAI,MAAM,SAAS,MAAM,mBAAmB,MAAM;AAC9C,0BAAgB;AAAA,QACnB;AACD,cAAM,cAAc,MAAM,iBAAiB,QAAQ,aAAa;AAEhE,YAAI;AACJ,YAAI,MAAM,SAAS,MAAM,mBAAmB,YAAY,MAAM,uBAAuB,aAAa;AAC9F,uBAAa,gBAAgB,iBAAiB,MAAM,YAAY,IAAI;AAAA,QACvE,WAAU,MAAM,SAAS,MAAM,mBAAmB,YAAY;AAC3D,gBAAM,qBAAqB,MAAM,SAAS;AAAA,YACtC,MAAM;AAAA,YACN,MAAM;AAAA,UAC9B;AACoB,cAAI,uBAAuB,UAAa,mBAAmB,iBAAiB,aAAa;AACrF,yBAAa;AAAA,UAChB;AAAA,QACJ;AAED,YAAI,YAAY;AACZ,gBAAM,eAAeN;AACrB,uBAAa,kBAAkBA,SAAQ,8BACjC,aAAa,kBACb;AACN,gBAAM,gBAAgB,IAAI,iBAAgB,YAAY,YAAY;AAClE,gBAAM,cAAc;AACpB,gBAAM,eAAe,MAAM,cAAc,gBAAgB,aAAa;AAAA,YAClE,MAAMM;AAAA,YACN;AAAA,YACA,aAAa;AAAA,YACb,QAAQ,SAAS;AAAA,UACzC,CAAqB;AACD,yBAAe,aAAa,OAAO,YAAY;AAAA,QACnE,OAAuB;AACH,yBAAe,aAAa,OAAO,MAAM,WAAW,EAAE,KAAK,KAAK,CAAC;AAAA,QACpE;AAAA,MACJ;AACD,UAAI,KAAK,QAAQ,eAAe;AAC5B,YAAI,KAAK,SAAS,SAAS,GAAG;AAC1B,mBAAS,SAAS,KAAK,SAAS;AAAA,QACpD,OAAuB;AACH,mBAAS,SAAS;AAAA,QACrB;AAAA,MACjB,OAAmB;AAEH,iBAAS,SAAS;AAAA,MACrB;AAAA,IACJ;AAED,QAAI,aAAa,CAAA;AAEjB,eAAW,KAAK,gBAAgB,IAAI;AAChC,UAAI,OAAO;AACX,UAAI,KAAK,SAAS,MAAM,mBAAmB,MAAM;AAE7C,YAAI,OAAO,MAAM,iBAAiB,mCAAmC,GAAG,KAAK;AAC7E,YAAI,CAAC,QAAQ,CAAC,KAAK,MAAM;AACrB,iBAAO,KAAK,mCAAmC,OAAO,CAAC;AACvD,cAAI,CAAC,MAAM;AACP,mBAAO,CAAA;AAAA,UACV;AAAA,QACJ;AACD,YACI,CAAC,YAAY,MAAM,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,mBAAmB,EAAE,KACxF,KAAK,MACP;AACE;AAAA,YACI;AAAA,YACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,mBAAmB;AAAA,YACnE,KAAK,QAAQ;AAAA,UACrC;AAAA,QACiB;AACD;AAAA,UACI;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,4BAA4B;AAAA,UAC5E,EAAE;AAAA,QACtB;AACgB,YACI,YAAY,MAAM,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B,EAAE,KAC9F,YAAY,MAAM,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B,EAAE,MAC1F,EAAE;AACR;AAQF;AAAA,UACI;AAAA,UACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,4BAA4B;AAAA,UAC5E,EAAE;AAAA,QACtB;AACgB,YACI,YAAY,MAAM,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B,EAAE,KAC9F,YAAY,MAAM,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B,EAAE,MAC1F,EAAE;AACR;AAAA,MAQL;AAeD,iBAAW,KAAK,IAAI;AAAA,IACvB;AAED,WAAO;AAAA,MACH,MAAM,KAAK;AAAA,MACX,SAAS;AAAA,IACrB;AAAA,EACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmDL;AAlrC6B;AAAtB,IAAM,kBAAN;ACHA,MAAM,iBAAN,MAAM,eAAc;AAAA,EACvB,YAAY,OAAO,cAAc,cAAc,iBAAiB;AAC5D,SAAK,UAAU;AACf,SAAK,eAAe;AACpB,SAAK,QAAQ;AACb,SAAK,eAAe;AACpB,SAAK,eAAe,cAAc,YAAY,IAAK,OAAO,YAAY,MAAM,SAAS,OAAO,QAAS;AACrG,SAAK,kBAAkB,SAAS,gBAAgB,OAAO,eAAe;AAAA,EACzE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,MAAM,eAAe;AAGjB,UAAM,iBAAiB,KAAK,MAAM,QAAQ,UAAU,WAAW,UAAU,MAAM,wBAAwB;AACvG,SAAK,eAAe,iBAAiB,mCAAmC,cAAc;AAYtF,UAAM,iBAAiB,SAAS,gBAAgB,KAAK,OAAO,KAAK,eAAe;AAEhF,eAAW,KAAK,KAAK,cAAc;AAC/B,YAAM,eAAe,MAAM,iBAAiB,kBAAkB,CAAC;AAK/D,UAAI,mBAAmB,UAAU,mBAAmB;AAChD,YACI,aAAa,OAAO,UACpB,aAAa,OAAO,WAAW,WAAW,UAAU,oBAAoB,GAC1E;AACE,uBAAa,OAAO,OAChB,UAAU,yBACT,MAAM,iBAAiB;AAAA,YACpB,aAAa,OAAO,WAAW,WAAW,UAAU,sBAAsB,EAAE,EAAE,KAAM;AAAA,UAChH;AAAA,QAEA,WACoB,aAAa,OAAO,UACpB,aAAa,OAAO,WAAW,WAAW,UAAU,wBAAwB,GAC9E;AACE,uBAAa,OAAO,OAAO,aAAa,OAAO,WACzC,WAAW,UAAU,0BAA0B,EAAE,EAClD;AAEL,gBAAM,qBAAqB,aAAa,OAAO,WACzC,WAAW,UAAU,0BAA0B,EAAE,EAClD;AACL,gBAAM,oBAAoB,iBAAiB,mCAAmC,kBAAkB;AAChG,qBAAW,eAAe,OAAO,KAAK,iBAAiB,GAAG;AACtD,gBAAI,KAAK,aAAa,WAAW,GAAG;AAChC,mBAAK,aAAa,WAAW,IACzB,KAAK,aAAa,WAAW,IAC5B,MAAM,iBAAiB,QAAQ,OAAO,kBAAkB,WAAW,CAAC,CAAC;AAAA,YACtG,OAA+B;AACH,mBAAK,aAAa,WAAW,IAAI,MAAM,iBAAiB;AAAA,gBACpD,OAAO,kBAAkB,WAAW,CAAC;AAAA,cACrE;AAAA,YACyB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,WAIQ,mBAAmB,UAAU,iBAAiB;AAEnD,YACI,aAAa,OAAO,UACpB,aAAa,OAAO,WAAW,WAAW,UAAU,oBAAoB,GAC1E;AACE,uBAAa,OAAO,OAChB,UAAU,yBACT,MAAM,iBAAiB;AAAA,YACpB,aAAa,OAAO,WAAW,WAAW,UAAU,sBAAsB,EAAE,EAAE,KAAM;AAAA,UAChH;AAAA,QAEA,WACoB,aAAa,OAAO,UACpB,aAAa,OAAO,WAAW,WAAW,UAAU,wBAAwB,GAC9E;AACE,uBAAa,OAAO,OAAO,aAAa,OAAO,WACzC,WAAW,UAAU,0BAA0B,EAAE,EAClD;AAEL,gBAAM,qBAAqB,aAAa,OAAO,WACzC,WAAW,UAAU,0BAA0B,EAAE,EAClD;AACL,gBAAM,oBAAoB,iBAAiB,mCAAmC,kBAAkB;AAChG,qBAAW,eAAe,OAAO,KAAK,iBAAiB,GAAG;AACtD,gBAAI,KAAK,aAAa,WAAW,GAAG;AAChC,mBAAK,aAAa,WAAW,IACzB,KAAK,aAAa,WAAW,IAC5B,MAAM,iBAAiB,QAAQ,OAAO,kBAAkB,WAAW,CAAC,CAAC;AAAA,YACtG,OAA+B;AACH,mBAAK,aAAa,WAAW,IAAI,MAAM,iBAAiB;AAAA,gBACpD,OAAO,kBAAkB,WAAW,CAAC;AAAA,cACrE;AAAA,YACyB;AAAA,UACJ;AAAA,QACrB,WAA2B,aAAa,OAAO,QAAQ;AACnC,gBAAM,qBAAqB,aAAa,OAAO;AAC/C,gBAAM,oBAAoB,iBAAiB,mCAAmC,kBAAkB;AAChG,qBAAW,eAAe,OAAO,KAAK,iBAAiB,GAAG;AACtD,gBAAI,KAAK,aAAa,WAAW,GAAG;AAChC,mBAAK,aAAa,WAAW,IACzB,KAAK,aAAa,WAAW,IAC5B,MAAM,iBAAiB,QAAQ,OAAO,kBAAkB,WAAW,CAAC,CAAC;AAAA,YACtG,OAA+B;AACH,mBAAK,aAAa,WAAW,IAAI,MAAM,iBAAiB;AAAA,gBACpD,OAAO,kBAAkB,WAAW,CAAC;AAAA,cACrE;AAAA,YACyB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,WAIQ,mBAAmB,UAAU,kBAAkB;AACpD,YACI,aAAa,OAAO,UACpB,aAAa,OAAO,WAAW,WAAW,UAAU,oBAAoB,GAC1E;AACE,uBAAa,OAAO,OAChB,UAAU,yBACT,MAAM,iBAAiB;AAAA,YACpB,aAAa,OAAO,WAAW,WAAW,UAAU,sBAAsB,EAAE,EAAE,KAAM;AAAA,UAChH;AAAA,QAEA,WACoB,aAAa,OAAO,UACpB,aAAa,OAAO,WAAW,WAAW,UAAU,wBAAwB,GAC9E;AACE,uBAAa,OAAO,OAAO,aAAa,OAAO,WACzC,WAAW,UAAU,0BAA0B,EAAE,EAClD;AAEL,gBAAM,qBAAqB,aAAa,OAAO,WACzC,WAAW,UAAU,0BAA0B,EAAE,EAClD;AACL,gBAAM,oBAAoB,iBAAiB,mCAAmC,kBAAkB;AAChG,qBAAW,eAAe,OAAO,KAAK,iBAAiB,GAAG;AACtD,gBAAI,KAAK,aAAa,WAAW,GAAG;AAChC,mBAAK,aAAa,WAAW,IACzB,KAAK,aAAa,WAAW,IAC5B,MAAM,iBAAiB,QAAQ,OAAO,kBAAkB,WAAW,CAAC,CAAC;AAAA,YACtG,OAA+B;AACH,mBAAK,aAAa,WAAW,IAAI,MAAM,iBAAiB;AAAA,gBACpD,OAAO,kBAAkB,WAAW,CAAC;AAAA,cACrE;AAAA,YACyB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,WAIQ,mBAAmB,UAAU,oBAAoB;AACtD,YACI,aAAa,OAAO,UACpB,aAAa,OAAO,WAAW,WAAW,UAAU,oBAAoB,GAC1E;AACE,uBAAa,OAAO,OAChB,UAAU,yBACT,MAAM,iBAAiB;AAAA,YACpB,aAAa,OAAO,WAAW,WAAW,UAAU,sBAAsB,EAAE,EAAE,KAAM;AAAA,UAChH;AAAA,QAEA,WACoB,aAAa,OAAO,UACpB,aAAa,OAAO,WAAW,WAAW,UAAU,wBAAwB,GAC9E;AACE,uBAAa,OAAO,OAAO,aAAa,OAAO,WACzC,WAAW,UAAU,0BAA0B,EAAE,EAClD;AAEL,gBAAM,qBAAqB,aAAa,OAAO,WACzC,WAAW,UAAU,0BAA0B,EAAE,EAClD;AACL,gBAAM,oBAAoB,iBAAiB,mCAAmC,kBAAkB;AAChG,qBAAW,eAAe,OAAO,KAAK,iBAAiB,GAAG;AACtD,gBAAI,KAAK,aAAa,WAAW,GAAG;AAChC,mBAAK,aAAa,WAAW,IACzB,KAAK,aAAa,WAAW,IAC5B,MAAM,iBAAiB,QAAQ,OAAO,kBAAkB,WAAW,CAAC,CAAC;AAAA,YACtG,OAA+B;AACH,mBAAK,aAAa,WAAW,IAAI,MAAM,iBAAiB;AAAA,gBACpD,OAAO,kBAAkB,WAAW,CAAC;AAAA,cACrE;AAAA,YACyB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAGD,aAAO,aAAa,OAAO;AAC3B,aAAO,aAAa,OAAO;AAC3B,YAAMK,MAAK,YAAY,GAAG,aAAa,MAAM;AAC7C,WAAK,QAAQ,KAAKA,GAAE;AAAA,IACvB;AAGD,QAAI,KAAK,cAAc;AACnB,WAAK,UAAU,iBAAiB,kBAAkB,KAAK,OAAO;AAAA,IACjE;AAGD,WAAO,KAAK;AAAA,EACf;AAAA,EAED,aAAa;AACT,WAAO,KAAK;AAAA,EACf;AAAA,EAED,kBAAkB;AACd,WAAO,KAAK;AAAA,EACfiID,MAAM,uBAAuB,WAAW;AACpC,UAAM,QAAQ;AACd,QAAI;AAEJ,YAAQ,UAAU,MAAM,KAAK,SAAS,MAAM,MAAM;AAC9C,WAAK,aAAa,MAAM,KAAK,kBAAkB,QAAQ,CAAC,CAAC,CAAC;AAAA,IAC7D;AAED,WAAO,UAAU,QAAQ,OAAO,EAAE;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,aAAa,cAAc;AACvB,eAAW,OAAO,cAAc;AAC5B,WAAK,aAAa,GAAG,KAAK,KAAK,aAAa,GAAG,KAAK,KAAK,aAAa,GAAG;AAAA,IAC5E;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,gBAAgB,WAAW;AAC7B,UAAM,QAAQ;AACd,QAAI;AACJ,YAAQ,UAAU,MAAM,KAAK,SAAS,MAAM,MAAM;AAC9C,kBAAY,UAAU,QAAQ,QAAQ,CAAC,GAAG,MAAM,iBAAiB,QAAQ,QAAQ,CAAC,CAAC,CAAC;AAAA,IACvF;AAED,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,MAAM,kBAAkB,gBAAgB;AACpC,UAAM,kBAAkB,CAAA;AACxB,QAAI,gBAAgB;AAChB,YAAM,mBAAmB,eAAe,MAAM,GAAG;AACjD,iBAAWR,aAAY,kBAAkB;AACrC,cAAM,QAAQ,iBAAiB,KAAKA,SAAQ;AAC5C,YAAI,CAAC,SAAS,MAAM,SAAS,GAAG;AAC5B,cAAI,MAAM,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,oCAAoC;AAAA,YACjF,gBAAgBA;AAAA,UACxC,CAAqB;AACD,iBAAO,KAAK,KAAK,IAAI;AACrB;AAAA,QACH;AACD,cAAM,cAAc,MAAM,CAAC;AAC3B,cAAMW,kBAAiB,MAAM,CAAC;AAC9B,cAAM,SAAS,MAAM,iBAAiB,QAAQ,WAAW;AAEzD,wBAAgBA,eAAc,KAAK,gBAAgBA,eAAc,KAAK,KAAK;AAAA,MAC9E;AAAA,IACJ;AACD,WAAO;AAAA,EACV;AACL;AAxa2B;AAApB,IAAM,gBAAN;ACIA,MAAM,gBAAN,MAAM,cAAa;AAAA,EACtB,cAAc;AAAA,EAEb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcD,MAAM,aAAa,aAAad,WAAU,IAAI;AAC1C,WAAO,MAAMS,MAAI,aAAa,aAAaT,QAAO;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUD,MAAM,uBAAuB,aAAa,QAAQ,MAAMA,WAAU,CAAA,GAAI;AAClE,WAAO,MAAMS,MAAI,uBAAuB,aAAa,OAAOT,QAAO;AAAA,EACtE;AAAA,EAED,MAAM,iBAAiB,aAAaA,WAAU,IAAI;AAC9C,WAAO,MAAMS,MAAI,iBAAiB,aAAaT,QAAO;AAAA,EACzD;AAAA,EAED,MAAM,gBAAgB,aAAa;AAC/B,WAAO,MAAMS,MAAI,gBAAgB,WAAW;AAAA,EAC/C;AAAA,EAED,MAAM,kBAAkB,aAAa;AACjC,WAAO,MAAMA,MAAI,kBAAkB,WAAW;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,sBAAsB,aAAaT,WAAU,IAAI;AACnD,UAAMO,YAAW,IAAI,gBAAgB,aAAaP,QAAO;AACzD,UAAMO,UAAS;AACf,UAAM,YAAY,MAAMA,UAAS;AAEjC,UAAMN,WAAU,WAAW;AAE3B,UAAMU,MAAK,IAAI,cAAc,aAAaV,UAASD,UAAS,0BAA0BA,UAAS,eAAe;AAC9G,UAAM,gBAAgB,MAAMW,IAAG;AAE/B,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,gBAAgB,aAAaX,WAAU,IAAI;AAC7C,UAAMO,YAAW,IAAI,gBAAgB,aAAaP,QAAO;AACzD,UAAMO,UAAS;AACf,UAAM,YAAY,MAAMA,UAAS;AAEjC,UAAMN,WAAU,WAAW;AAE3B,UAAMU,MAAK,IAAI,cAAc,aAAaV,UAASD,UAAS,0BAA0BA,UAAS,eAAe;AAC9G,UAAM,gBAAgB,MAAMW,IAAG;AAE/B,QAAI,WAAWJ,UAAS;AACxB,QAAID,QAAOC,UAAS;AAEpB,QAAI,cAAcP,SAAQ,WAAW,KAAK,CAACA,SAAQ,aAAa;AAC5D,aAAO;AAAA,IACV;AAED,UAAM,iBAAiB,SAAS,gBAAgB,aAAaA,UAAS,eAAe;AAErF,QAAI,mBAAmB,UAAU,mBAAmB;AAChD,YAAM,iBAAiB,IAAI,eAAe,eAAe,UAAUM,KAAI;AACvE,YAAM,eAAe,eAAe,WAAW;AAAA,IAC3D,WAAmB,mBAAmB,UAAU,iBAAiB;AACrD,YAAM,eAAeK,IAAG;AACxB,YAAM,eAAe,IAAI,aAAa,eAAe,cAAc,UAAUL,KAAI;AACjF,YAAM,aAAa,eAAe,WAAW;AAAA,IACzD,WAAmB,mBAAmB,UAAU,kBAAkB;AACtD,YAAM,gBAAgB,IAAI,cAAc,eAAe,UAAUA,KAAI;AACrE,YAAM,cAAc,eAAe,WAAW;AAAA,IAC1D,WAAmB,mBAAmB,UAAU,oBAAoB;AACxD,YAAM,kBAAkB,IAAI,gBAAgB,eAAe,UAAUA,KAAI;AACzE,YAAM,gBAAgB,eAAe,WAAW;AAAA,IAC5D,OAAe;AACH,YAAMC,UAAS,eAAe,eAAe,UAAUD,KAAI;AAAA,IAC9D;AACD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,kBAAkB,aAAaN,WAAU,IAAI;AAC/C,UAAMO,YAAW,IAAI,gBAAgB,aAAaP,QAAO;AACzD,UAAMO,UAAS;AACf,UAAM,YAAY,MAAMA,UAAS;AAEjC,UAAMN,WAAU,WAAW;AAE3B,UAAMU,MAAK,IAAI,cAAc,aAAaV,UAASD,UAAS,0BAA0BA,UAAS,eAAe;AAC9G,UAAM,gBAAgB,MAAMW,IAAG;AAE/B,QAAI,WAAWJ,UAAS;AACxB,QAAID,QAAOC,UAAS;AAEpB,QAAI,cAAcP,SAAQ,WAAW,KAAK,CAACA,SAAQ,aAAa;AAC5D,aAAO;AAAA,QACH,SAAS;AAAA,QACT,gBAAgBW,IAAG;AAAA,MACnC;AAAA,IACS;AAED,UAAM,iBAAiB,SAAS,gBAAgB,aAAaX,UAAS,eAAe;AAErF,QAAI,mBAAmB,UAAU,mBAAmB;AAChD,YAAM,iBAAiB,IAAI,eAAe,eAAe,UAAUM,KAAI;AACvE,YAAM,eAAe,eAAe,WAAW;AAAA,IAC3D,WAAmB,mBAAmB,UAAU,iBAAiB;AACrD,YAAM,eAAeK,IAAG;AACxB,YAAM,eAAe,IAAI,aAAa,eAAe,cAAc,UAAUL,KAAI;AACjF,YAAM,aAAa,eAAe,WAAW;AAAA,IACzD,WAAmB,mBAAmB,UAAU,kBAAkB;AACtD,YAAM,gBAAgB,IAAI,cAAc,eAAe,UAAUA,KAAI;AACrE,YAAM,cAAc,eAAe,WAAW;AAAA,IAC1D,WAAmB,mBAAmB,UAAU,oBAAoB;AACxD,YAAM,kBAAkB,IAAI,gBAAgB,eAAe,UAAUA,KAAI;AACzE,YAAM,gBAAgB,eAAe,WAAW;AAAA,IAC5D,OAAe;AACH,YAAMC,UAAS,eAAe,eAAe,UAAUD,KAAI;AAAA,IAC9D;AACD,WAAO;AAAA,MACH,SAAS;AAAA,MACT,gBAAgBK,IAAG;AAAA,IAC/B;AAAA,EACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,QAAQ,aAAaX,WAAU,IAAI;AAErC,UAAMO,YAAW,IAAI,gBAAgB,aAAaP,QAAO;AACzD,UAAMO,UAAS;AACf,UAAM,YAAY,MAAMA,UAAS;AAEjC,UAAMN,WAAU,WAAW;AAE3B,QAAI,WAAWD,UAAS,YAAYO,UAAS,YAAY;AACzD,QAAID,QAAON,UAAS,QAAQO,UAAS,YAAY;AAEjD,UAAMI,MAAK,IAAI,cAAc,aAAaV,UAASD,UAAS,0BAA0BA,UAAS,eAAe;AAC9G,UAAM,gBAAgB,MAAMW,IAAG;AAE/B,QAAI,cAAcX,SAAQ,WAAW,GAAG;AACpC,UAAI,CAACA,SAAQ,aAAa;AACtB,eAAO;AAAA,MACV;AAAA,IACJ;AAED,UAAM,iBAAiB,SAAS,gBAAgB,aAAaA,UAAS,eAAe;AAErF,QAAI,mBAAmB,UAAU,mBAAmB;AAChD,YAAM,iBAAiB,IAAI,eAAe,eAAe,UAAUM,KAAI;AACvE,YAAM,eAAe;AACrB,YAAM,eAAe,gBAAgB,WAAW;AAAA,IAC5D,WAAmB,mBAAmB,UAAU,iBAAiB;AACrD,YAAM,eAAeK,IAAG;AACxB,YAAM,eAAe,IAAI,aAAa,eAAe,cAAc,UAAUL,KAAI;AACjF,YAAM,aAAa;AACnB,YAAM,aAAa,gBAAgB,WAAW;AAAA,IAC1D,WAAmB,mBAAmB,UAAU,kBAAkB;AACtD,YAAM,gBAAgB,IAAI,cAAc,eAAe,UAAUA,KAAI;AACrE,YAAM,cAAc,gBAAgB,WAAW;AAAA,IAC3D,WAAmB,mBAAmB,UAAU,oBAAoB;AACxD,YAAM,kBAAkB,IAAI,gBAAgB,eAAe,UAAUA,KAAI;AACzE,YAAM,gBAAgB;AACtB,YAAM,gBAAgB,gBAAgB,WAAW;AAAA,IACpD;AACD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,MAAM,KAAK,aAAaN,WAAU,IAAI;AAClC,WAAO,MAAMS,MAAI,KAAK,aAAaT,QAAO;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaD,MAAM,0BAA0B,WAAW,gBAAgB,EAAE,kBAAkB,KAAM,IAAG,IAAI;AACxF,WAAO,MAAMS,MAAI,0BAA0B,WAAW,gBAAgB,EAAE,gBAAe,CAAE;AAAA,EAC5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyBD,WAAWL,OAAM;AACb,QAAI,CAACA,OAAM;AACP,aAAO;AAAA,IACV;AACD,QAAI,CAACA,MAAK,QAAQA,MAAK,OAAO,GAAG;AAC7B,YAAM,KAAKA,MAAK;AAChB,YAAM,OAAOA,MAAK;AAClB,YAAM,OAAOA,MAAK,QAAQA,MAAK;AAC/B,YAAM,SAASA,MAAK;AACpB,YAAMN,QAAOM,MAAK,QAAQ,KAAK,YAAY,IAAIA,MAAK,cAAc,GAAG,gBAAgB;AACrF,YAAM,WAAWN,UAAS,KAAK,cAAcA,KAAI,MAAM;AACvD,YAAM,OAAO,SAAS,oBAAoB,MAAM;AAChD,aAAO,4CAA4C,QAAQ,iBAAiB,MAAM,cAAc,EAAE,gBAAgB,IAAI,mBAAmB,IAAI,SAAS,IAAI;AAAA,IAC7J;AAED,WAAOM,MAAK;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWD,aAAa,6BAA6B,MAAMJ,UAAS;AACrD,QAAI,KAAK,KAAK,MAAM;AAChB,MAAAA,SAAQ,KAAK;AAAA,QACT,MAAM,OAAO,KAAK,GAAG,UAAU,SAAS,0CAA0C;AAAA,QAClF,MAAM;AAAA,QACN,UAAU,CAAC,OAAO;AACdS,gBAAI,8BAA8B,GAAG,KAAK,MAAM,CAAC;AAAA,QACpD;AAAA,MACjB,CAAa;AAED,MAAAT,SAAQ,KAAK;AAAA,QACT,MAAM,OAAO,KAAK,GAAG,UAAU,SAAS,qDAAqD;AAAA,QAC7F,MAAM;AAAA,QACN,UAAU,CAAC,OAAO;AACdS,gBAAI,gCAAgC,GAAG,KAAK,MAAM,CAAC;AAAA,QACtD;AAAA,MACjB,CAAa;AAED,UAAI,KAAK,SAAS,IAAI,UAAU,WAAW,UAAU,kCAAkC,GAAG;AACtF,QAAAT,SAAQ,KAAK;AAAA,UACT,MAAM,OAAO,KAAK,GAAG,UAAU,SAAS,oCAAoC;AAAA,UAC5E,MAAM;AAAA,UACN,UAAU,CAAC,OAAO;AACdS,kBAAI,0BAA0B,GAAG,KAAK,MAAM,CAAC;AAAA,UAChD;AAAA,QACrB,CAAiB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,aAAa,4BAA4B,MAAMT,UAAS;AACpD,QAAI,KAAK,KAAK,QAAQ,KAAK,SAAS,IAAI,UAAU,WAAW,UAAU,iCAAiC,GAAG;AACvG,MAAAA,SAAQ,QAAQ;AAAA,QACZ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,UAAU,CAAC,OAAO;AACd,wBAAa,sBAAsB,GAAG,KAAK,YAAY,CAAC;AAAA,QAC3D;AAAA,MACjB,CAAa;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,aAAa,sBAAsB,aAAa;AAC5C,UAAM,YAAY,gBAAgB,iBAAiB,WAAW;AAC9D,UAAMS,MAAI,gBAAgB,SAAS;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWD,aAAa,0BAA0B,YAAY;AAC/CA,UAAI,0BAA0B,UAAU;AAAA,EAC3C;AAAA,EAED,aAAa,eAAe,SAAS;AACjC,UAAM,kBAAkB,YAAY,SAAS,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,IAAI,EAAE,KAAK,CAAA;AACxG,QAAI,CAAC,gBAAgB,YAAY;AAC7B,sBAAgB,aAAa;AAAA,IAChC;AACD,QAAI,CAAC,gBAAgB,IAAI;AACrB,sBAAgB,KAAK;AAAA,IACxB;AACD,UAAM,WAAW,MAAM;AAAA,MACnB,WAAW,UAAU,SAAS;AAAA,MAC9B;AAAA;AAAA,IACZ;AACQ,YAAQ,UAAU;AAClB,WAAO;AAAA,EAcV;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,aAAa,2BAA2B,YAAY;AAChD,UAAM,WAAW,MAAMA,MAAI,0BAA0B,UAAU;AAC/D,gBAAY,OAAO,QAAQ;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,aAAa,gBAAgB,aAAaT,WAAU,IAAI;AACpD,UAAMO,YAAW,IAAI,gBAAgB,aAAaP,QAAO;AACzD,UAAMO,UAAS;AACf,UAAM,YAAY,MAAMA,UAAS;AAEjC,UAAMN,WAAU,WAAW;AAE3B,QAAI,WAAWD,UAAS,YAAYO,UAAS,YAAY;AACzD,QAAID,QAAON,UAAS,QAAQO,UAAS,YAAY;AAEjD,UAAMI,MAAK,IAAI,cAAc,aAAaV,UAASD,UAAS,0BAA0BA,UAAS,eAAe;AAC9G,UAAM,gBAAgB,MAAMW,IAAG;AAE/B,QAAI,cAAcX,SAAQ,WAAW,GAAG;AACpC,UAAI,CAACA,SAAQ,aAAa;AACtB,eAAO;AAAA,MACV;AAAA,IACJ;AAED,UAAM,iBAAiB,SAAS,gBAAgB,aAAaA,UAAS,eAAe;AAErF,QAAI,WAAW;AACf,QAAI,mBAAmB,UAAU,mBAAmB;AAChD,YAAM,iBAAiB,IAAI,eAAe,eAAe,UAAUM,KAAI;AACvE,YAAM,eAAe;AACrB,iBAAW,MAAM,eAAe,gBAAgB,WAAW;AAAA,IACvE,WAAmB,mBAAmB,UAAU,iBAAiB;AACrD,YAAM,eAAeK,IAAG;AACxB,YAAM,eAAe,IAAI,aAAa,eAAe,cAAc,UAAUL,KAAI;AACjF,YAAM,aAAa;AACnB,iBAAW,MAAM,aAAa,gBAAgB,WAAW;AAAA,IACrE,WAAmB,mBAAmB,UAAU,kBAAkB;AACtD,YAAM,gBAAgB,IAAI,cAAc,eAAe,UAAUA,KAAI;AAErE,iBAAW,MAAM,cAAc,gBAAgB,WAAW;AAAA,IACtE,WAAmB,mBAAmB,UAAU,oBAAoB;AACxD,YAAM,kBAAkB,IAAI,gBAAgB,eAAe,UAAUA,KAAI;AACzE,YAAM,gBAAgB;AACtB,iBAAW,MAAM,gBAAgB,gBAAgB,WAAW;AAAA,IAC/D;AAED,WAAO;AAAA,EACV;AAAA,EAED,aAAa,8BAA8B,SAAS,MAAM;AACtD,UAAM,UAAU,KAAK,CAAC,EAAE,cAAc,WAAW,UAAU,SAAS,mBAAmB;AACvF,YAAQ,UAAU,OAAO,GAAG,UAAU,SAAS,SAAS;AAAA,EAE3D;AAAA,EAED,aAAa,qBAAqB,SAAS,MAAM;AAC7C,UAAM,gBAAgB,EAAE,IAAI,EAAE,KAAK,aAAa;AAChD,UAAM,KAAK,EAAE,aAAa,EAAE,KAAK,IAAI;AACrC,UAAMR,QAAO,EAAE,aAAa,EAAE,KAAK,MAAM;AACzC,QAAI,CAAC,MAAM,CAACA,OAAM;AACd;AAAA,IACH;AACD,QAAI,KAAK,SAAS,IAAI,UAAU,WAAW,UAAU,mBAAmB,GAAG;AAEvE,YAAM,eAAe;AAAA,QACjB,gEAAgE,KAAK,KAAK;AAAA,UACtE,GAAG,UAAU,SAAS;AAAA,QACzB,CAAA;AAAA,MACjB,EAAc,OAAO,iCAAiC;AAC1C,mBAAa,MAAM,YAAY;AAC3B,YAAI;AACJ,YAAIA,SAAQ,IAAI;AACZ,gBAAM,SAAS,MAAM,gBAAgB,6BAA6BA,OAAM,MAAM,KAAK;AACnF,sBAAY,MAAM,QAAQ,YAAY,EAAE;AAAA,QAC5D,OAAuB;AACH,sBAAY,gBAAgB,iBAAiB,IAAI,IAAI;AAAA,QACxD;AACD,YAAI,WAAW;AACX,gBAAM,WAAW,MAAM,cAAa,gBAAgB,SAAS;AAC7D,gBAAM,cAAc,SAAS;AAC7B,gBAAM,YAAY,SAAS;AAC3B,gBAAM,cAAa,kBAAkB,SAAS,aAAa;AAAA,YACvD,OAAO;AAAA,UAC/B,CAAqB;AAAA,QACrB,OAAuB;AACH,iBAAO,KAAK,4CAA4CA,KAAI,eAAe,EAAE,KAAK,IAAI;AAAA,QACzF;AAAA,MACjB,CAAa;AACD,QAAE,IAAI,EAAE,KAAK,iBAAiB,EAAE,OAAO,YAAY;AAAA,IACtD;AAsBD,QAAI,KAAK,SAAS,IAAI,UAAU,WAAW,UAAU,iBAAiB,GAAG;AAErE,UAAIC;AACJ,UAAID,SAAQ,IAAI;AACZ,cAAM,SAAS,MAAM,gBAAgB,6BAA6BA,OAAM,MAAM,KAAK;AACnF,QAAAC,YAAW,MAAM,QAAQ,YAAY,EAAE;AAAA,MACvD,OAAmB;AACH,QAAAA,YAAW,gBAAgB,iBAAiB,IAAI,IAAI;AAAA,MACvD;AACD,UAAIA,WAAU;AACV,cAAM,WAAW;AAAA,UACb,6DAA6D,KAAK,KAAK;AAAA,YACnE,GAAG,UAAU,SAAS;AAAA,UACzB,CAAA;AAAA,QACrB,EAAkB,OAAO,gCAAgC;AACzC,YAAI;AAAI,mBAAS,KAAK,MAAM,EAAE;AAC9B,YAAID;AAAM,mBAAS,KAAK,QAAQA,KAAI;AACpC,iBAAS,MAAM,YAAYC,UAAS,MAAM,OAAO,IAAI,CAAC;AACtD,UAAE,IAAI,EAAE,KAAK,iBAAiB,EAAE,OAAO,QAAQ;AAAA,MAClD;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,aAAa,0BAA0B,SAAS,MAAM;AAClD,UAAM,cAAa,8BAA8B,SAAS,IAAI;AAC9D,UAAM,UAAU,MAAM;AAAA,MAClB,KAAK,CAAC,EAAE,cAAc,WAAW,UAAU,SAAS,mBAAmB,GAAG,iBAAiB,eAAe;AAAA,IACtH,EAAU,IAAI,CAAC,MAAM,EAAE,QAAQ,MAAM;AAC7B,QAAI,CAAC;AAAS,aAAO;AAErB,UAAM,oBAAoB,YAAY,SAAS,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,aAAa,EAAE;AAC9G,UAAM,aAAa,QAAQ;AAC3B,UAAM,QAAQ,OAAO,KAAK,iBAAiB,EACtC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,KAAK,MAAM,kBAAkB,CAAC,IAAI,UAAU,EAAG,EAAC,EACnE,OAAO,CAAC,GAAG,MAAM,OAAO,OAAO,GAAG,CAAC,GAAG,CAAA,CAAE;AAE7C,eAAW,UAAU,SAAS;AAC1B,YAAM,OAAO,KAAK,MAAM,IAAI,MAAM;AAClC,YAAMI,YAAW,KAAK,UAAU,OAAO;AACvC,eAAS,OAAO,OAAO,KAAKA,SAAQ,GAAG;AACnC,cAAM,YAAY,MAAM,GAAG,KAAK;AAChC,YAAI,YAAY,GAAG;AACf,UAAAA,UAAS,GAAG,KAAK;AAAA,QACpB;AAAA,MACJ;AACD,YAAM,KAAK,UAAU,OAAO,EAAE,UAAUA,UAAQ,CAAE;AAAA,IACrD;AACD,UAAM,aAAa,MAAM,cAAa;AAAA,MAClC,YAAY,SAAS,EAAE,CAAC,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,WAAW,EAAE,GAAG,KAAI,CAAE;AAAA;AAAA,IAC1G;AACQ,UAAM,cAAa,kBAAkB,SAAS,UAAU;AAAA,EAC3D;AAAA,EAED,aAAa,4BAA4B,MAAM;AAC3C,QAAI,KAAK,SAAS,IAAI,UAAU,WAAW,UAAU,uBAAuB,GAAG;AAE3E,QAAE,IAAI,EACD,KAAK,yCAAyC,EAC9C,KAAK,OAAO,OAAO,SAAS;AACd,UAAE,IAAI,EAAE,KAAK,IAAI;AAC5B,cAAM,OAAO,EAAE,IAAI,EAAE,KAAK,MAAM;AAChC,cAAM,YAAY,MAAM,gBAAgB,kBAAkB,IAAI;AAC9D,YAAI,WAAW;AACX,gBAAM,WAAW;AAAA,YACb,4DAA4D,KAAK,KAAK;AAAA,cAClE,GAAG,UAAU,SAAS;AAAA,YACzB,CAAA;AAAA,UACJ,EAAC,MAAM,YAAY;AAChB,kBAAMM,MAAI,gBAAgB,SAAS;AAAA,UAC/D,CAAyB;AACD,YAAE,IAAI,EAAE,MAAM,QAAQ;AAAA,QAC9C,OAA2B;AACH,iBAAO,KAAK,qCAAqC,IAAI,GAAG;AAAA,QAC3D;AAAA,MACrB,CAAiB;AAGL,QAAE,IAAI,EACD,KAAK,2BAA2B,EAChC,KAAK,OAAO,OAAO,SAAS;AACzB,cAAM,WAAW,EAAE,IAAI,EAAE,KAAK,MAAM;AACpC,cAAM,SAAS,MAAM,gBAAgB,6BAA6B,UAAU,MAAM,KAAK;AACvF,cAAMX,QAAO;AACb,YAAI,CAACA,OAAM;AACP;AAAA,QACH;AACD,cAAM,KAAK,EAAE,IAAI,EAAE,KAAK,IAAI;AAC5B,cAAMC,YAAW,MAAMD,MAAK,YAAY,EAAE;AAC1C,YAAI,CAACC,aAAYA,UAAS,iBAAiB;AAAa;AAExD,cAAM,WAAW;AAAA,UACb,4DAA4D,KAAK,KAAK;AAAA,YAClE,GAAG,UAAU,SAAS;AAAA,UACzB,CAAA;AAAA,QACJ,EAAC,MAAM,YAAY;AAChB,gBAAMU,MAAI,iBAAiBV,SAAQ;AAAA,QAC3D,CAAqB;AACD,UAAE,IAAI,EAAE,MAAM,QAAQ;AAAA,MAC1C,CAAiB;AAAA,IACR;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,aAAa,yBAAyB,SAAS,MAAM;AACjD,QAAI,KAAK,KAAK,MAAM;AAChB,oBAAa,qBAAqB,SAAS,IAAI;AAC/C,oBAAa,4BAA4B,IAAI;AAAA,IAChD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,aAAa,kBAAkB,SAAS,SAASC,WAAU,CAAA,GAAI;AAC3D,QAAI,KAAK,KAAK,MAAM;AAChB,UAAI,CAACA,SAAQ,SAAS,KAAK,SAAS,IAAI,UAAU,WAAW,UAAU,0BAA0B,GAAG;AAChG,eAAO,QAAQ;AAAA,UACX,OAAO,KAAK,KAAK,SAAS,GAAG,UAAU,SAAS,+BAA+B;AAAA,UAC/E,SAAS,KAAK,KAAK,SAAS,GAAG,UAAU,SAAS,qCAAqC;AAAA,UACvF,KAAK,MAAM;AACP,0BAAa,kBAAkB,SAAS,SAAS,EAAE,OAAO,MAAM,OAAOA,SAAQ,MAAK,CAAE;AAAA,UACzF;AAAA,UACD,YAAY;AAAA,QAChC,CAAiB;AAAA,MACjB,OAAmB;AACH,gBAAQ,OAAO;AAAA,UACX;AAAA,UACA,OAAOA,SAAQ,SAAS,CAAE;AAAA,UAC1B,WAAW,KAAK,IAAK;AAAA,QACzC,CAAiB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKD,OAAO,6BAA6B,WAAW,gBAAgB,MAAM;AACjE,QAAI,KAAK,UAAU,QAAQ;AACvB,aAAO;AAAA,IACnB,OAAe;AACH,aAAO;AAAA,IACV;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKD,aAAa,oBAAoB,OAAO,MAAM;AAC1C,QAAI,KAAK,KAAK,QAAQ,KAAK,SAAS,IAAI,UAAU,WAAW,UAAU,uBAAuB,GAAG;AAE7F,QAAE,IAAI,EACD,KAAK,wCAAwC,EAC7C,KAAK,CAAC,OAAO,SAAS;AACnB,cAAM,KAAK,EAAE,IAAI,EAAE,KAAK,IAAI;AAC5B,cAAM,YAAY,gBAAgB,iBAAiB,EAAE;AAErD,cAAM,WAAW;AAAA,UACb,4DAA4D,KAAK,KAAK;AAAA,YAClE,GAAG,UAAU,SAAS;AAAA,UACzB,CAAA;AAAA,QACJ,EAAC,MAAM,YAAY;AAChB,gBAAMS,MAAI,iBAAiB,SAAS;AAAA,QAC5D,CAAqB;AACD,UAAE,IAAI,EAAE,MAAM,QAAQ;AAAA,MAC1C,CAAiB;AAGL,QAAE,IAAI,EACD,KAAK,2BAA2B,EAChC,KAAK,OAAO,OAAO,SAAS;AACzB,cAAM,WAAW,EAAE,IAAI,EAAE,KAAK,MAAM;AACpC,cAAM,SAAS,MAAM,gBAAgB,6BAA6B,UAAU,MAAM,KAAK;AACvF,cAAMX,QAAO;AACb,YAAI,CAACA,OAAM;AACP;AAAA,QACH;AACD,cAAM,KAAK,EAAE,IAAI,EAAE,KAAK,IAAI;AAC5B,cAAMC,YAAW,MAAMD,MAAK,YAAY,EAAE;AAC1C,YAAI,CAACC,aAAYA,UAAS,iBAAiB;AAAa;AAExD,cAAM,WAAW;AAAA,UACb,4DAA4D,KAAK,KAAK;AAAA,YAClE,GAAG,UAAU,SAAS;AAAA,UACzB,CAAA;AAAA,QACJ,EAAC,MAAM,YAAY;AAChB,gBAAMU,MAAI,iBAAiBV,SAAQ;AAAA,QAC3D,CAAqB;AACD,UAAE,IAAI,EAAE,MAAM,QAAQ;AAAA,MAC1C,CAAiB;AAAA,IACR;AAAA,EACJ;AAAA,EAED,aAAa,kCAAkC,iBAAiB,MAAM,WAAW;AAC7E,QAAI,gBAAgB,OAAO,MAAM,aAAa;AAA2C;AAAA,SAoDlF;AACH,aAAO,MAAM,2DAA2D;AAExE,UAAI,CAAC,gBAAgB,OAAO,QAAQ,UAAU,WAAW,UAAU,MAAM,cAAc,GAAG;AACtF,cAAM,gBAAgB,OAAO,QAAQ,UAAU,WAAW,UAAU,MAAM,gBAAgB,IAAI;AAAA,MACjG;AAAA,IACJ;AAAA,EACJ;AACL;AA3vB0B;AAAnB,IAAM,eAAN;ACHA,MAAM,2BAAN,MAAM,yBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOjC,aAAa,qCAAqC,OAAOC,WAAU,IAAI;AACnE,QAAI,YAAY,MAAM,iBAAiB,+BAA+B,OAAOA,QAAO;AAUpF,WAAO;AAAA,EACV;AAAA,EAED,aAAa,qDAAqD,OAAOA,WAAU,IAAI;AACnF,QAAI,YAAY,MAAM,iBAAiB,+BAA+B,OAAOA,QAAO;AAUpF,WAAO;AAAA,EACV;AAAA,EAED,aAAa,yBAAyB,OAAO,OAAOA,WAAU,CAAA,GAAI;AAC9D,UAAM,YAAY,iBAAiB,6BAA6B,OAAO,OAAO;AAAA,MAC1E,aAAa;AAAA,MACb,0BAA0B;AAAA,IACtC,CAAS;AA6BD,WAAO,KAAK,OAAO,KAAK,GAAG,UAAU,SAAS,sBAAsB,GAAG,IAAI;AAC3E,UAAM,QAAQ;AACd,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYD,aAAa,6BAA6B,OAAOC,UAAS,YAAY,MAAM,eAAe,OAAO,cAAc,GAAG;AAE/G,QAAI,YAAY,MAAM,yBAAwB,mBAAmBA,QAAO;AACxE,QAAI,UAAU,WAAW,GAAG;AACxB;AAAA,IACH;AACD,gBAAY,yBAAwB,cAAc,SAAS;AAE3D,UAAM,aAAa,QAAS,MAAM,gBAAgB,QAAQ,QAAQ,CAAC,KAAK,IAAK,OAAO,OAAO;AAC3F,UAAM,mBAAmB,WAAW,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO;AAC/E,QAAI,iBAAiB,WAAW,GAAG;AAC/B,aAAO,KAAK,yCAAyC,IAAI;AACzD;AAAA,IACH;AAED,eAAW,SAAS,kBAAkB;AAElC,YAAM,iBAAiB,SAAS,OAAO,SAAS;AAAA,IACnD;AAyBD,WAAO,KAAK,OAAO,KAAK,GAAG,UAAU,SAAS,sBAAsB,GAAG,IAAI;AAC3E,UAAM,QAAQ;AACd,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,OAAO,cAAc,KAAK,KAAK;AAC3B,QAAI,OAAO,QAAQ,YAAY,EAAE,eAAe,QAAQ;AACpD,aAAO;AAAA,IACV;AAED,WAAO,IAAI,QAAQ,WAAW,SAAU,GAAG;AACvC,aAAO,IAAI,EAAE,QAAQ,KAAK,EAAE,EAAE,QAAQ,KAAK,EAAE,CAAC;AAAA,IAC1D,CAAS;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,aAAa,mBAAmBA,UAAS;AACrC,UAAM,YAAY,CAAA;AAClB,eAAW,KAAKA,UAAS;AACrB,YAAM,UAAU,MAAM,yBAAwB,iBAAiB,CAAC;AAChE,UAAI,SAAS;AACT,kBAAU,KAAK,OAAO;AAAA,MACzB;AAAA,IACJ;AACD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,aAAa,iBAAiB,GAAG;AAC7B,QAAIF,YAAW;AACf,QAAI,CAAC,EAAE,cAAc,EAAE,SAAS,MAAM,mBAAmB,MAAM;AAC3D,UAAI,YAAY,GAAG,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,mBAAmB,EAAE,GAAG;AACvF,QAAAA,YAAW,MAAM;AAAA,UACb,YAAY,GAAG,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,mBAAmB,EAAE;AAAA,QACxG;AAAA,MACa;AACD,UAAI,CAACA,WAAU;AACX,eAAO;AAAA,MACV;AAAA,IACJ;AAUD,QAAI,YAAY,GAAG,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,mBAAmB,EAAE,GAAG;AACvF,MAAAA,YAAW,MAAM;AAAA,QACb,YAAY,GAAG,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,mBAAmB,EAAE;AAAA,MACpG;AACY,UAAI,CAACA,WAAU;AACX,YAAI;AACA,gBAAM,aACF,KAAK,YAAY,IAAI,EAAE,kBAAkB,KACxC,MAAM,gBAAgB,6BAA6B,EAAE,oBAAoB,MAAM,KAAK;AACzF,UAAAA,YAAY,MAAM,YAAY,IAAI,EAAE,UAAU,KAAO,MAAM,YAAY,YAAY,EAAE,UAAU;AAAA,QAClG,SAAQ,GAAG;AAAA,QAEX;AAAA,MACJ;AAAA,IACb,OAAe;AACH,UAAI;AACA,cAAM,aACF,KAAK,YAAY,IAAI,EAAE,kBAAkB,KACxC,MAAM,gBAAgB,6BAA6B,EAAE,oBAAoB,MAAM,KAAK;AACzF,QAAAA,YAAY,MAAM,YAAY,IAAI,EAAE,UAAU,KAAO,MAAM,YAAY,YAAY,EAAE,UAAU;AAAA,MAClG,SAAQ,GAAG;AAAA,MAEX;AAAA,IACJ;AAID,QAAI,CAACA,aAAY,EAAE,YAAY;AAC3B,MAAAA,YAAW,MAAM,SAAS,sBAAsB,CAAC;AAAA,IACpD;AAED,QAAI,CAACA,WAAU;AAEX,MAAAA,YAAW,KAAK,MAAM,QAAQ,EAAE,IAAI;AAAA,IACvC;AAED,QAAI,CAACA,WAAU;AACX,aAAO,MAAM,mCAAmC,OAAO,CAAC;AACxD,aAAO;AAAA,IACV;AAuBD,QAAI,UAAU;AACd,QAAI,aAAa,YAAY,GAAG,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B,EAAE;AAC5G,QAAI,cAAc,YAAY,GAAG,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B,EAAE;AAE7G,QAAIA,qBAAoB,MAAM;AAC1B,gBAAUA,UAAS;AACnB,cAAQ,OAAOA,UAAS;AAAA,IACpC,WAAmBA,qBAAoB,SAAS,KAAK,UAAU,IAAI,sBAAsB;AAC7E,aAAO,MAAM,8CAA8C,OAAO,CAAC;AACnE,gBAAU,CAAA;AACV,cAAQ,OAAO,GAAG,EAAE,QAAQA,WAAU,IAAI;AAC1C,cAAQ,MAAMA,WAAU,OAAO;AAC/B,cAAQ,OAAO,KAAK,UAAU,IAAI;AAClC,uBAAiB,YAAY,SAAS,MAAM,iBAAiB,QAAQ,YAAY,CAAC,CAAC;AACnF,uBAAiB,gBAAgB,SAAS,CAAC;AAE3C,mBAAa,GAAG,cAAc,QAAQ,IAAI;AAAA,IACtD,WAAmBA,qBAAoB,SAAS,KAAK,UAAU,IAAI,sBAAsB;AAC7E,aAAO,MAAM,8CAA8C,OAAO,CAAC;AACnE,gBAAU,CAAA;AACV,cAAQ,OAAO,UAAU,EAAE,QAAQA,WAAU,IAAI;AACjD,cAAQ,MAAMA,WAAU,SAASA,WAAU,OAAO;AAClD,cAAQ,OAAO,KAAK,UAAU,IAAI;AAClC,uBAAiB,YAAY,SAAS,MAAM,iBAAiB,QAAQ,YAAY,CAAC,CAAC;AACnF,uBAAiB,gBAAgB,SAAS,CAAC;AAE3C,mBAAa,UAAU,cAAc,QAAQ,IAAI;AAAA,IAC7D,OAAe;AACH,aAAO,MAAM,kCAAkC,OAAO,CAAC;AACvD,aAAO;AAAA,IACV;AAID,gBAAY,GAAG,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,4BAA4B,IAAI,QAAQ,IAAI;AAC3G,QAAI,CAAC,YAAY;AACb,kBAAY,GAAG,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B,IAAI,QAAQ,IAAI;AAAA,IACrH,OAAe;AACH,kBAAY,SAAS,QAAQ,UAAU;AAAA,IAC1C;AAED,gBAAY,GAAG,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,4BAA4B,IAAI,QAAQ,GAAG;AAC1G,QAAI,CAAC,aAAa;AACd,kBAAY,GAAG,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,0BAA0B,IAAI,QAAQ,GAAG;AAAA,IACpH,OAAe;AACH,kBAAY,SAAS,OAAO,WAAW;AAAA,IAC1C;AAsBD,QAAI,CAAC,YAAY,SAAS,SAAS,UAAU,SAAS,EAAE,GAAG;AACvD,kBAAY,SAAS,SAAS,UAAU,SAAS,IAAI,CAAA,CAAE;AAAA,IAC1D;AACD,gBAAY,QAAQ,MAAM,UAAU,SAAS,GAAG,YAAY,GAAG,SAAS,UAAU,SAAS,EAAE,CAAC;AAE9F,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,OAAO,cAAc,WAAW;AAC5B,WAAO,yBAAwB,mBAAmB,WAAW,OAAO,OAAO,KAAK;AAAA,EACnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,OAAO,8BAA8B,WAAW;AAC5C,WAAO,yBAAwB,mBAAmB,WAAW,OAAO,MAAM,IAAI;AAAA,EACjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,OAAO,mBAAmB,WAAW,iBAAiB,OAAO,cAAc,OAAO,eAAe,OAAO;AACpG,UAAM,iBAAiB,KAAK,UAAU,IAAI;AAC1C,UAAM,iBAAiB,KAAK,UAAU,IAAI;AAE1C,QAAI,CAAC,gBAAgB;AACjB,aAAO;AAAA,IACV;AACD,UAAM,mBAAmB,CAAA;AACzB,eAAWK,SAAQ,WAAW;AAI1B,YAAM,QAAQ,iBAAiB,gBAAgB,kBAAkBA,KAAI;AACrE,UAAI,CAAC,OAAO;AACR,yBAAiB,KAAKA,KAAI;AAAA,MAC1C,OAAmB;AAGH,YAAI,CAAC,gBAAgB;AACjB,gBAAM,WAAW,YAAY,OAAO,cAAc,KAAK,YAAYA,OAAM,cAAc,KAAK;AAC5F,sBAAY,OAAO,GAAG,cAAc,IAAI,QAAQ;AAAA,QACnD;AACD,YAAI,CAAC,aAAa;AACd,gBAAM,iBACD,YAAY,OAAO,cAAc,GAAG,SAAS,MAC7C,YAAYA,OAAM,cAAc,GAAG,SAAS;AACjD,gBAAM,WAAW;AAAA,YACb,cAAc,YAAYA,OAAM,cAAc,GAAG;AAAA,YACjD,OAAO;AAAA,UAC/B;AACoB,sBAAY,OAAO,GAAG,cAAc,IAAI,QAAQ;AAAA,QACnD;AAAA,MAKJ;AAAA,IACJ;AACD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUD,aAAa,gBAAgB,OAAO,WAAW,YAAY,MAAM,cAAc,GAAG;AAC9E,UAAM,iBAAiB,KAAK,UAAU,IAAI;AAC1C,UAAM,iBAAiB,KAAK,UAAU,IAAI;AAE1C,QAAI,CAAC,gBAAgB;AACjB,aAAO,KAAK,OAAO,WAAW,EAAE,QAAQ,MAAK,CAAE;AAAA,IAClD;AACD,UAAM,QAAQ,CAAA;AACd,eAAWA,SAAQ,WAAW;AAC1B,UAAI,WAAW;AACX,cAAM,QAAQ,MAAM,sBAAsB,MAAM,EAAE,KAAK,CAAC,MAAM;AAC1D,iBAAO,yBAAwB,YAAY,GAAGA,KAAI;AAAA,QACtE,CAAiB;AACD,YAAI,OAAO;AAEP,gBAAM,WAAW,YAAY,OAAO,cAAc,KAAK,YAAYA,OAAM,cAAc,KAAK;AAC5F,gBAAM,iBACD,YAAY,OAAO,cAAc,GAAG,SAAS,MAC7C,YAAYA,OAAM,cAAc,GAAG,SAAS;AACjD,gBAAM,WAAW;AAAA,YACb,cAAc,YAAYA,OAAM,cAAc,GAAG;AAAA,YACjD,OAAO;AAAA,UAC/B;AAGoB,gBAAM,SAAS,yBAAwB;AAAA,YACnC;AAAA,YACA,YAAYA,OAAM,cAAc;AAAA,YAChC;AAAA,UACxB;AAEoB,gBAAM,MAAM,OAAO;AAAA,YACf,CAAC,GAAG,cAAc,EAAE,GAAG;AAAA,YACvB,CAAC,GAAG,cAAc,EAAE,GAAG;AAAA;AAAA,UAE/C,CAAqB;AAAA,QACrB,OAAuB;AACH,gBAAM,IAAI,MAAM,KAAK,OAAO,WAAW,EAAE,QAAQ,MAAK,CAAE;AACxD,gBAAM,KAAK,CAAC;AAAA,QACf;AAAA,MACjB,OAAmB;AACH,cAAM,IAAI,MAAM,KAAK,OAAO,WAAW,EAAE,QAAQ,MAAK,CAAE;AACxD,cAAM,KAAK,CAAC;AAAA,MACf;AAAA,IACJ;AACD,WAAO;AAAA,EACV;AAAA,EAED,OAAO,YAAY,UAAU,WAAW;AACpC,QAAI,SAAS,SAAS,UAAU,MAAM;AAClC,aAAO;AAAA,IACV;AAED,UAAM,2BAA2B,KAAK,SAAS,IAAI,UAAU,WAAW,SAAS,0BAA0B;AAE3G,UAAM,cAAc,cAAc,SAAS,MAAM;AACjD,UAAM,eAAe,cAAc,UAAU,MAAM;AAEnD,eAAW,KAAK,OAAO,KAAK,SAAS,GAAG;AACpC,UAAI,YAAY,CAAC,KAAK,QAAQ,aAAa,CAAC,KAAK,MAAM;AACnD;AAAA,MACH;AACD,YAAM,gBAAgB,yBAAyB,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;AAC1E,UAAI,iBAAiB,MAAM;AACvB;AAAA,MACH;AACD,UAAI,YAAY,CAAC,MAAM,aAAa,CAAC,GAAG;AACpC,eAAO,IAAI,YAAY,CAAC,GAAG,CAAC;AAC5B,eAAO;AAAA,MACV;AAAA,IACJ;AACD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiCD,aAAa,kBAAkB,OAAOH,UAAS,YAAY,MAAM,cAAc,GAAG;AAE9E,QAAI,YAAY,MAAM,yBAAwB,mBAAmBA,QAAO;AACxE,QAAI,UAAU,WAAW,GAAG;AACxB;AAAA,IACH;AACD,gBAAY,yBAAwB,cAAc,SAAS;AAC3D,UAAM,QAAQ,MAAM,yBAAwB,gBAAgB,OAAO,WAAW,WAAW,WAAW;AACpG,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWD,aAAa,mBAAmB,OAAOA,UAAS,YAAY,MAAM,cAAc,GAAG;AAO/E,UAAM,QAAQ,MAAM,yBAAwB,kBAAkB,OAAOA,UAAS,WAAW,WAAW;AACpG,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYD,aAAa,mBAAmB,OAAOA,UAAS,YAAY,MAAM,eAAe,OAAO,cAAc,GAAG;AAQrG,UAAM,QAAQ,MAAM,yBAAwB;AAAA,MACxC;AAAA,MACAA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACZ;AACQ,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+DD,OAAO,uBAAuB,YAAY,aAAa,cAAc,GAAG;AACpE,UAAM,SAAS,OAAO,WAAW,IAAI,OAAO,UAAU;AAEtD,QAAI,cAAc,GAAG;AAEjB,UAAI,OAAO,WAAW,KAAK,OAAO,MAAM,GAAG;AACvC,eAAO;AAAA,MACV;AAED,awBAAwB,UAAU,UAAU;AAC/C,eAAW,OAAO,UAAU;AAExB,UAAI;AACJ,UAAI;AACA,sBAAc,IAAI,KAAK,IAAI,GAAG,EAAE,KAAK,EAAE,OAAO,OAAO,EAAE;AAAA,MAC1D,SAAQ,GAAG;AACR,eAAO,MAAM,EAAE,SAAS,OAAO,CAAC;AAChC;AAAA,MACH;AACD,kBAAY,UAAU,UAAU,IAAI,QAAQ,YAAa,CAAA,IAAI,WAAW;AAAA,IAC3E;AACD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2DL;AAn0BqC;AAA9B,IAAM,0BAAN;ACEA,MAAM,kBAAN,MAAM,gBAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASxB,aAAa,uBAAuB,aAAa,QAAQ,MAAMD,WAAU,CAAA,GAAI;AACzE,QAAI,aAAa,CAAA;AACjB,QAAI,QAAQ,SAAS,OAAO,OAAO,WAAW,WAAW,GAAG;AACxD,aAAO,OAAO,MAAM,+BAA+B,IAAI;AAAA,IACnE,OAAe;AACH,mBAAa,QAAS,MAAM,gBAAgB,QAAQ,QAAQ,CAAC,KAAK,IAAK,OAAO,OAAO;AAAA,IACxF;AACD,WAAO,KAAK,4BAA4B,IAAI;AAE5C,UAAMO,YAAW,IAAI,gBAAgB,aAAaP,QAAO;AACzD,UAAMO,UAAS;AAEf,eAAWG,UAAS,YAAY;AAC5B,aAAO,KAAK,qCAAqCA,OAAM,IAAI,KAAK,IAAI;AAQpE,YAAM,aAAa,MAAMH,UAAS;AAElC,YAAM,WAAWA,UAAS;AAC1B,YAAMD,QAAOC,UAAS;AACtB,YAAMN,WAAU,YAAY;AAE5B,YAAMU,MAAK,IAAI;AAAA,QACX;AAAA,QACAV;AAAA,QACAD,UAAS;AAAA,QACTA,UAAS;AAAA,MACzB;AACY,YAAM,gBAAgB,MAAMW,IAAG;AAC/B,YAAM,eAAeA,IAAG;AAExB,YAAM,2BAA2B,iBAAiB,mCAAmC,YAAY;AAEjG,YAAM,iBAAiB,cAAcD,QAAO,wBAAwB;AACpE,YAAM,iBAAiB,oCAAoCA,QAAOT,QAAO;AAEzE,aAAO,KAAK,mCAAmCS,OAAM,IAAI,KAAK,IAAI;AAElE,UAAI,cAAcV,SAAQ,WAAW,GAAG;AACpC,YAAI,CAACA,SAAQ,aAAa;AACtB;AAAA,QACH;AAAA,MACJ;AAED,YAAM,eAAe,IAAI,aAAa,eAAe,cAAc,UAAUM,KAAI;AACjF,YAAM,aAAa,eAAe,WAAW;AAAA,IAChD;AACD,WAAO,KAAK,6BAA6B,IAAI;AAC7C;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,aAAa,aAAa,aAAaN,WAAU,IAAI;AACjD,UAAMO,YAAW,IAAI,gBAAgB,aAAaP,QAAO;AACzD,UAAMO,UAAS;AAEf,UAAM,aAAa,MAAMA,UAAS;AAElC,UAAM,WAAWA,UAAS;AAC1B,UAAMD,QAAOC,UAAS;AACtB,UAAMN,WAAU,YAAY;AAE5B,UAAMU,MAAK,IAAI,cAAc,aAAaV,UAASD,UAAS,0BAA0BA,UAAS,eAAe;AAC9G,UAAM,gBAAgB,MAAMW,IAAG;AAC/B,UAAM,eAAeA,IAAG;AASxB,UAAM,QAAQ,MAAM,gBAAe,YAAY,WAAW;AAE1D,UAAM,2BAA2B,iBAAiB,mCAAmC,YAAY;AAEjG,UAAM,iBAAiB,cAAc,OAAO,wBAAwB;AACpE,UAAM,iBAAiB,oCAAoC,OAAOV,QAAO;AAGzE,QAAI,cAAcD,SAAQ,WAAW,GAAG;AACpC,UAAI,CAACA,SAAQ,aAAa;AACtB;AAAA,MACH;AAAA,IACJ;AAED,UAAM,eAAe,IAAI,aAAa,eAAe,cAAc,UAAUM,KAAI;AACjF,UAAM,aAAa,eAAe,WAAW;AAAA,EAEhD;AAAA,EAED,aAAa,iBAAiB,aAAaN,WAAU,IAAI;AACrD,UAAMO,YAAW,IAAI,gBAAgB,aAAaP,QAAO;AACzD,UAAMO,UAAS;AACf,UAAM,aAAa,MAAMA,UAAS;AAElC,UAAM,WAAWA,UAAS;AAC1B,UAAMD,QAAOC,UAAS;AACtB,UAAMN,WAAU,YAAY;AAE5B,UAAMU,MAAK,IAAI,cAAc,aAAaV,UAASD,UAAS,0BAA0BA,UAAS,eAAe;AAC9G,UAAM,gBAAgB,MAAMW,IAAG;AAC/B,UAAM,eAAeA,IAAG;AAExB,UAAM,eAAe,IAAI,aAAa,eAAe,cAAc,UAAUL,KAAI;AAEjF,UAAM,aAAa,eAAe,WAAW;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoDD,aAAa,YAAY,OAAO,eAAe,QAAW;AACtD,UAAM,YAAY,gBAAgB,MAAM,QAAQ,UAAU,WAAW,UAAU,MAAM,mBAAmB;AACxG,QAAI,QAAQ,KAAK,OAAO,QAAQ,SAAS;AACzC,QAAI,CAAC,OAAO;AACR,cAAQ,MAAM,MAAM,OAAO;AAAA,QACvB,MAAM,aAAa;AAAA,QACnB,MAAM,KAAK,UAAU,IAAI;AAAA;AAAA,QACzB,KAAK,WAAW,UAAU,SAAS;AAAA,QACnC,MAAM;AAAA,QACN,OAAO,EAAE,WAAW,KAAM;AAAA,MAC1C,CAAa;AAAA,IACJ;AAMD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCL;AAtO4B;AAArB,IAAM,iBAAN;ACLQ,MAAM,gBAAN,MAAM,sBAAqB,gBAAgB;AAAA,EACtD,OAAO,oBAAoB,KAAK,OAAO;AACnC,QAAI,CAAC,KAAK,KAAK,MAAM;AACjB;AAAA,IACH;AACD,UAAM,aAAa;AAAA,MACf,OAAO,UAAU;AAAA,MACjB,MAAM;AAAA,MACN,SAAS,YAAY,IAAI,cAAa,IAAI,QAAQ,EAAE,OAAO,IAAI;AAAA,MAC/D,OAAO,KAAK,KAAK,SAAS,GAAG,UAAU,SAAS,wBAAwB;AAAA,IACpF;AACQ,UAAM,UAAU,IAAI,YAAY,SAAS;AACzC,QAAI,CAAC,WAAW,CAAC,KAAK,SAAS,IAAI,UAAU,WAAW,sBAAsB,GAAG;AAC7E,aAAO,WAAW;AAAA,IACrB;AACD,UAAM,QAAQ,UAAU;AAAA,EAC3B;AAAA,EAED,YAAY,OAAON,WAAU,IAAI;AAC7B,UAAM,OAAOA,QAAO;AACpB,SAAK,QAAQ;AACb,SAAK,QAAQ,MAAM,MAAM,CAAE,GAAE,EAAE,QAAQ,KAAI,CAAE;AAAA,EAChD;AAAA;AAAA,EAGD,IAAI,QAAQ;AACR,WAAO,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,yBAAyB,EAAE,MAAM,KAAK,MAAM,KAAM,CAAA;AAAA,EACnG;AAAA;AAAA,EAGD,IAAI,KAAK;AACL,WAAO,GAAG,UAAU,SAAS,IAAI,KAAK,MAAM,KAAK,WAAW,KAAK,GAAG,CAAC;AAAA,EACxE;AAAA;AAAA,EAGD,WAAW,iBAAiB;AACxB,WAAO,QAAQ,MAAM,YAAY,MAAM,gBAAgB;AAAA,MACnD,SAAS,CAAC,UAAU,SAAS;AAAA,MAC7B,UAAU,WAAW,UAAU,SAAS;AAAA,MACxC,UAAU,CAAC,EAAE,cAAc,wBAAwB;AAAA,MACnD,SAAS,CAAC,kBAAkB;AAAA,MAC5B,OAAO;AAAA,MACP,QAAQ;AAAA,IACpB,CAAS;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,WAAW,sBAAsB;AAC7B,WAAO,IAAI,IAAI,UAAU,KAAK;AAAA,EACjC;AAAA,EAED,IAAI,sBAAsB;AACtB,WAAO,KAAK,YAAY;AAAA,EAC3B;AAAA;AAAA,EAGD,MAAM,QAAQA,WAAU,IAAI;AACxB,UAAM,aAAa,KAAK;AAExB,UAAM,gBAAgB,KAAK,cAAe,EACrC,OAAO,CAAC,KAAK,SAAS;AACnB,YAAM,YAAY,gBAAgB,iBAAiB,KAAK,IAAI;AAC5D,UAAI,WAAW;AACX,YAAI,KAAK,EAAE,GAAG,MAAM,MAAM,UAAU,MAAM,KAAK,UAAU,IAAK,CAAA;AAAA,MACjE;AACD,aAAO;AAAA,IACV,GAAE,EAAE,EACJ,KAAK,CAAC,GAAG,MAAM,EAAE,KAAK,cAAc,EAAE,IAAI,CAAC;AAYhD,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA,UAAU,UAAU;AAAA,IAChC;AAAA,EACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyBD,eAAe,aAAa,IAAI;AAC5B,QAAIe,WAAU,MAAM,eAAe,UAAU;AAC7C,IAAAA,WAAU,QAAQ,MAAM,aAAaA,QAAO;AAE5C,QAAI,aAAa,QAAQ,MAAM;AAAA,MAC3BA;AAAA,MACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,WAAW,UAAU;AAAA,IACjF;AAEQ,QAAI,uBAAuB,QAAQ,MAAM;AAAA,MACrCA;AAAA,MACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,WAAW,gBAAgB;AAAA,IACvF;AAEQ,UAAM,gBAAgB,CAAA;AACtB,QAAI,sBAAsB;AACtB,iBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,oBAAoB,GAAG;AAC7D,sBAAc,KAAK,KAAK;AAAA,MAC3B;AAAA,IACJ;AACD,SAAK,MAAM,aAAa;AAAA,MACpB,CAAC,SAAS,UAAU,SAAS,EAAE,GAAG;AAAA,QAC9B,CAAC,GAAG,UAAU,MAAM,WAAW,UAAU,EAAE,GAAG;AAAA,QAC9C,CAAC,GAAG,UAAU,MAAM,WAAW,gBAAgB,EAAE,GAAG;AAAA,MACvD;AAAA,IACb,CAAS;AAED,YAAQ,MAAM,YAAYA,UAAS,SAAS,UAAU,SAAS,IAAI,CAAA,CAAE;AACrE,YAAQ,MAAM;AAAA,MACVA;AAAA,MACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,WAAW,gBAAgB;AAAA,MAC3E;AAAA,IACZ;AACQ,YAAQ,MAAM;AAAA,MACVA;AAAA,MACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,WAAW,UAAU;AAAA,MACrE;AAAA,IACZ;AAEQ,IAAAA,WAAU,QAAQ,MAAM,cAAcA,QAAO;AAE7C,WAAOA;AAAA,EACV;AAAA;AAAA,EAGD,MAAM,QAAQ,OAAO;AACjB,UAAM,gBAAe;AACrB,UAAM,OAAO,QAAQ,sBAAsB,EAAE,UAAU,OAAO,WAAW;AACzE,UAAM,OAAO,WAAW,iBAAiB,KAAK;AAC9C,UAAM,aAAa,MAAM,KAAK,eAAe,IAAI;AACjD,QAAI,CAAC,YAAY;AACb;AAAA,IACH;AACD,eAAW,aAAa,YAAY;AAChC,YAAM,OAAO,UAAU;AACV,gBAAU;AACvB,WAAK;AAAA,QACD;AAAA,QACA,SAAS,sBAAsB,SAAS,KAAK;AAAA,QAC7C,SAAS,gBAAgB,SAAS;AAAA,MAClD;AAAA,IACS;AACD,WAAO;AAAA,MACH,OAAO,WAAW,GAAG,UAAU,SAAS,iCAAiC;AAAA,QACrE,QAAQ,WAAW;AAAA,QACnB,MAAM,KAAK,MAAM;AAAA,MACjC,CAAa;AAAA,MACD;AAAA,IACZ;AACQ,WAAO,KAAK;EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,gBAAgB,MAAM,WAAW,MAAM,UAAU,MAAM;AACnD,UAAM,OAAO,KAAK;AAClB,UAAM,WAAW,KAAK,KAAK,CAAC,MAAM,EAAE,SAAS,IAAI;AACjD,QAAI,UAAU;AACV,eAAS,WAAW,WAAW,WAAW,SAAS;AACnD,eAAS,UAAU,UAAU,UAAU,SAAS;AAAA,IAC5D,OAAe;AACH,WAAK,KAAK;AAAA,QACN,UAAU,WAAW,WAAW;AAAA,QAChC,SAAS,UAAU,UAAU;AAAA,QAC7B;AAAA,MAChB,CAAa;AAAA,IACJ;AACD,SAAK,MAAM,aAAa;AAAA,MACpB,CAAC,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,WAAW,gBAAgB,EAAE,GAAG;AAAA,IAC7F,CAAS;AAAA,EACJ;AAAA;AAAA,EAGD,MAAM,YAAY,OAAO;AACrB,UAAM,OAAO,QAAQ,sBAAsB,GAAG,UAAU,IAAI,WAAW;AAAA,EAC1E;AAAA;AAAA,EAGD,MAAM,gBAAgB;AAClB,UAAM,SAAS,KAAK,MAAM,MAAM,UAAU,SAAS;AACnD,WAAO,KAAK,MAAM,OAAO,EAAE,CAAC,SAAS,UAAU,SAAS,EAAE,GAAG,OAAQ,CAAA;AAAA,EACxE;AAAA;AAAA,EAGD,kBAAkB,MAAM;AACpB,UAAM,kBAAkB,IAAI;AAC5B,SAAK,CAAC,EAAE,iBAAiB,eAAe,EAAE,QAAQ,CAAC,MAAM;AACrD,cAAQ,EAAE,QAAQ,QAAM;AAAA,QACpB,KAAK;AACD,YAAE,iBAAiB,SAAS,KAAK,wBAAwB,KAAK,IAAI,CAAC;AACnE;AAAA,QACJ,KAAK;AACD,YAAE,iBAAiB,SAAS,KAAK,sBAAsB,KAAK,IAAI,CAAC;AACjE;AAAA,QACJ,KAAK;AACD,YAAE,iBAAiB,aAAa,KAAK,gBAAgB,KAAK,IAAI,CAAC;AAC/D;AAAA,QACJ,KAAK;AACD,YAAE,iBAAiB,SAAS,KAAK,cAAc,KAAK,IAAI,CAAC;AACzD;AAAA,QACJ,KAAK;AACD,YAAE,iBAAiB,SAAS,KAAK,cAAc,KAAK,IAAI,CAAC;AACzD;AAAA,MACP;AAAA,IACb,CAAS;AACD,SAAK,CAAC,EAAE,iBAAiB,kBAAkB,EAAE,QAAQ,CAAC,MAAM;AACxD,QAAE,iBAAiB,SAAS,CAAC,UAAU,MAAM,cAAc,OAAM,CAAE;AAAA,IAC/E,CAAS;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,cAAc,OAAO;AACvB,UAAM,sBAAsB,KAAK;AACjC,UAAM,aAAa,KAAK;AACxB,UAAM,SAAS,KAAK,KAAK,QAAQ,MAAO,GAAE;AAC1C,QAAI,CAAC,QAAQ;AACT,aAAO,KAAK,OAAO,WAAW,GAAG,UAAU,SAAS,0BAA0B,EAAE,GAAG,IAAI;AACvF;AAAA,IACH;AAEY,WAAO,YAAc;AAElC,UAAM,aAAa,CAAA;AACnB,UAAM,iBAAiB,MAAM,QAAQ;AAAA,MACjC,oBAAoB,IAAI,OAAO,EAAE,UAAU,SAAS,KAAI,MAAO;AAC3D,cAAM,YAAY,MAAM,gBAAgB,kBAAkB,IAAI;AAC9D,eAAO;AAAA,UACH;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACpB;AAAA,MACA,CAAa;AAAA,IACb;AA4CQ,UAAM,QAAQ,GAAG,UAAU,SAAS,uBAAuB,QAAQ,cAAc;AASjF,eAAW,oBAAoB,gBAAgB;AAC3C,YAAMN,MAAI,yBAAyB;AAAA,QAC/B,OAAO,iBAAiB;AAAA,QACxB,OAAO;AAAA,QACP,SAAS;AAAA,UACL,aAAa,iBAAiB;AAAA,UAC9B,iBAAiB,iBAAiB;AAAA,QACrC;AAAA,MACjB,CAAa;AAAA,IACJ;AAED,UAAM,iBAAiB,cAAc,QAAQ,UAAU;AAOvD,UAAM,QAAQ,GAAG,UAAU,SAAS,oBAAoB,QAAQ,UAAU;AAAA,EAC7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,cAAc,OAAO;AACjB,SAAK,MAAM,aAAa;AAAA,MACpB,CAAC,SAAS,UAAU,SAAS,EAAE,GAAG;AAAA,QAC9B,CAAC,GAAG,UAAU,MAAM,WAAW,gBAAgB,EAAE,GAAG,CAAE;AAAA,QACtD,CAAC,GAAG,UAAU,MAAM,WAAW,UAAU,EAAE,GAAG;AAAA,MACjD;AAAA,IACb,CAAS;AACD,WAAO,KAAK;EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,wBAAwB,OAAO;AAC3B,UAAM,OAAO,MAAM,cAAc,QAAQ,aAAa,EAAE,QAAQ;AAChE,UAAM,OAAO,KAAK;AAClB,SAAK,WAAW,CAAC,MAAM,EAAE,SAAS,IAAI;AACtC,SAAK,MAAM,aAAa;AAAA,MACpB,CAAC,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,WAAW,gBAAgB,EAAE,GAAG;AAAA,IAC7F,CAAS;AACD,WAAO,KAAK;EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,sBAAsB,OAAO;AAC/B,UAAM,YAAY,MAAM,SAAS,MAAM,cAAc,QAAQ,aAAa,EAAE,QAAQ,IAAI;AACxF,WAAO,UAAU,MAAM,OAAO,IAAI;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,gBAAgB,OAAO;AACnB,UAAM,cAAc,UAAU,OAAO,WAAW;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,gBAAgB;AACZ,WACI,QAAQ,MAAM;AAAA,MACV,KAAK;AAAA,MACL,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,WAAW,gBAAgB;AAAA,IAC3F,KAAiB,CAAE;AAAA,EAEd;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,oBAAoB;AAChB,UAAM,OACF,QAAQ,MAAM;AAAA,MACV,KAAK;AAAA,MACL,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,WAAW,UAAU;AAAA,IACxE,KAAI;AAST,WAAO,OAAO,OAAO,IAAI,IAAI;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYD,MAAM,eAAe,MAAM;AACvB,UAAM,WAAW,KAAK,SAAS;AAE/B,UAAM,UAAU,KAAK,SAAS;AAC9B,UAAM,SAAS,KAAK,SAAS;AAG7B,QAAI,CAAC,YAAY,CAAC,WAAW,CAAC,QAAQ;AAClC,aAAO,KAAK,OAAO,WAAW,GAAG,UAAU,SAAS,iCAAiC,EAAE,GAAG,IAAI;AAC9F,aAAO;AAAA,IACV;AAOD,QAAI,UAAU;AACV,aAAO,MAAM,KAAK,YAAY,IAAI;AAAA,IACrC;AAED,QAAI,SAAS;AACT,aAAO,MAAM,KAAK,eAAe,IAAI;AAAA,IACxC;AAED,QAAI,QAAQ;AACR,aAAO,MAAM,KAAK,UAAU,IAAI;AAAA,IACnC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,qBAAqB,MAAM;AAC7B,UAAM,YAAY,MAAM,gBAAgB,kBAAkB,KAAK,IAAI;AAgBnE,WAAO,CAAC,SAAS;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,YAAY,MAAM;AACpB,UAAM,SAAS,MAAM,SAAS,KAAK,IAAI;AAEvC,QAAI,OAAO,SAAS,aAAa;AAC7B,aAAO,KAAK,OAAO,WAAW,GAAG,UAAU,SAAS,iCAAiC,EAAE,GAAG,IAAI;AAC9F,aAAO;AAAA,IACV;AAQD,UAAM,aAAa,OAAO;AAE1B,QAAI,CAAC,WAAW,QAAQ;AACpB,aAAO,KAAK,OAAO,WAAW,GAAG,UAAU,SAAS,+BAA+B,EAAE,GAAG,IAAI;AAC5F,aAAO;AAAA,IACV;AAED,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,eAAe,MAAM;AAEvB,WAAO,MAAM,KAAK,qBAAqB,IAAI;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,UAAU,MAAM;AAClB,UAAMX,QAAO,gBAAgB,4BAA4B,KAAK,EAAE;AAChE,QAAIA,MAAK,SAAS,SAAS,aAAa;AACpC,aAAO,KAAK,OAAO,WAAW,GAAG,UAAU,SAAS,iCAAiC,EAAE,GAAG,IAAI;AAC9F,aAAO;AAAA,IACV;AAUD,UAAM,QAAQ,MAAMA,MAAK;AACzB,UAAM,aAAa,MAAM,OAAO,CAAC,KAAK,cAAc;AAChD,aAAO,IAAI,OAAO;AAAA,QACd;AAAA,UACI,GAAG;AAAA,UACH,UAAU,SAAS,sBAAsB,SAAS,KAAK;AAAA,UACvD,SAAS,SAAS,gBAAgB,SAAS;AAAA,QAC9C;AAAA,MACjB,CAAa;AAAA,IACJ,GAAE,CAAE,CAAA;AACL,QAAI,CAAC,WAAW,QAAQ;AACpB,aAAO,KAAK,OAAO,WAAW,GAAG,UAAU,SAAS,+BAA+B,EAAE,GAAG,IAAI;AAC5F,aAAO;AAAA,IACV;AACD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaD,aAAa,yBAAyB,OAAO,MAAME,WAAU,CAAA,GAAI;AAC7D,QAAIe,WAAU;AACd,QAAI,CAACA,UAAS;AACV,MAAAA,WAAU,MAAM,gBAAgB,kBAAkB,MAAM,IAAI;AAAA,IAC/D;AACD,QAAI,CAACA,UAAS;AACV,MAAAA,WAAU,MAAM,gBAAgB,eAAe,MAAM,IAAI;AAAA,IAC5D;AACD,QAAI,CAACA,UAAS;AACV,MAAAA,WAAU,MAAM,gBAAgB,6BAA6B,MAAM,IAAI;AAAA,IAC1E;AACD,UAAM,WAAWA,oBAAmB;AACpC,UAAM,UAAUA,oBAAmB;AACnC,UAAM,SAASA,oBAAmB;AAElC,QAAI,aAAa;AAGjB,QAAI,CAAC,YAAY,CAAC,WAAW,CAAC,QAAQ;AAClC,aAAO,KAAK,OAAO,WAAW,GAAG,UAAU,SAAS,iCAAiC,EAAE,GAAG,IAAI;AAC9F,aAAO;AAAA,IACV;AAGD,QAAI,UAAU;AACV,YAAM,SAAS,MAAM,gBAAgB,eAAeA,QAAO;AAE3D,UAAI,OAAO,SAAS,aAAa;AAC7B,eAAO,KAAK,OAAO,WAAW,GAAG,UAAU,SAAS,iCAAiC,EAAE,GAAG,IAAI;AAC9F,eAAO;AAAA,MACV;AACD,mBAAa,OAAO;AAAA,IACvB;AAED,QAAI,SAAS;AACT,YAAM,YAAY,MAAM,gBAAgB,kBAAkBA,QAAO;AACjE,mBAAa,CAAC,SAAS;AAAA,IAC1B;AAED,QAAI,QAAQ;AACR,YAAMjB,QAAO,MAAM,gBAAgB,6BAA6BiB,QAAO;AACvE,UAAIjB,MAAK,SAAS,SAAS,aAAa;AACpC,eAAO,KAAK,OAAO,WAAW,GAAG,UAAU,SAAS,iCAAiC,EAAE,GAAG,IAAI;AAC9F,eAAO;AAAA,MACV;AAED,YAAM,QAAQ,MAAMA,MAAK;AACzB,mBAAa,MAAM,OAAO,CAAC,KAAK,cAAc;AAC1C,eAAO,IAAI,OAAO;AAAA,UACd;AAAA,YACI,GAAG;AAAA,YACH,UAAU,SAAS,sBAAsB,SAAS,KAAK;AAAA,YACvD,SAAS,SAAS,gBAAgB,SAAS;AAAA,UAC9C;AAAA,QACrB,CAAiB;AAAA,MACJ,GAAE,CAAE,CAAA;AAAA,IACR;AAED,QAAI,CAAC,YAAY,QAAQ;AACrB,aAAO,KAAK,OAAO,WAAW,GAAG,UAAU,SAAS,+BAA+B,EAAE,GAAG,IAAI;AAC5F,aAAO;AAAA,IACV;AAED,eAAW,aAAa,YAAY;AAChC,YAAM,OAAO,UAAU;AACV,gBAAU;AAEvB,YAAM,WAAW,SAAS,sBAAsB,SAAS,KAAK;AAC9D,YAAM,UAAU,SAAS,gBAAgB,SAAS;AAElD,YAAM,OACF,QAAQ,MAAM;AAAA,QACV;AAAA,QACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,WAAW,gBAAgB;AAAA,MAC9E,KAAI;AAET,YAAM,WAAW,KAAK,KAAK,CAAC,MAAM,EAAE,SAAS,IAAI;AACjD,UAAI,UAAU;AACV,iBAAS,WAAW,WAAW,WAAW,SAAS;AACnD,iBAAS,UAAU,UAAU,UAAU,SAAS;AAAA,MAChE,OAAmB;AACH,aAAK,KAAK;AAAA,UACN,UAAU,WAAW,WAAW;AAAA,UAChC,SAAS,UAAU,UAAU;AAAA,UAC7B;AAAA,QACpB,CAAiB;AAAA,MACJ;AACD,YAAM,MAAM,OAAO;AAAA,QACf,CAAC,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,WAAW,gBAAgB,EAAE,GAAG;AAAA,MACjG,CAAa;AAAA,IACJ;AACD,WAAO;AAAA,MACH,OAAO,WAAW,GAAG,UAAU,SAAS,iCAAiC;AAAA,QACrE,QAAQ,WAAW;AAAA,QACnB,MAAM,MAAM;AAAA,MAC5B,CAAa;AAAA,MACD;AAAA,IACZ;AACQ,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,aAAa,kBAAkB,OAAO,UAAU;AAC5C,UAAM,OACF,QAAQ,MAAM;AAAA,MACV;AAAA,MACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,WAAW,gBAAgB;AAAA,IAC9E,KAAI;AACT,UAAM,OACF,QAAQ,MAAM,YAAY,OAAO,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,WAAW,UAAU,EAAE,KACxG;AAEJ,QAAI,UAAU,CAAA;AACd,QAAI,UAAU,SAAS,GAAG;AACtB,gBAAU,KAAK,OAAO,CAAC,OAAO;AAC1B,cAAM,UAAU,GAAG;AACnB,eAAO,WAAW,SAAS,SAAS,OAAO;AAAA,MAC3D,CAAa;AAAA,IACb,OAAe;AACH,gBAAU;AAAA,IACb;AAED,UAAM,iBAAiB,MAAM,QAAQ;AAAA,MACjC,QAAQ,IAAI,OAAO,EAAE,UAAU,SAAS,KAAI,MAAO;AAC/C,cAAM,YAAY,MAAM,gBAAgB,kBAAkB,IAAI;AAC9D,eAAO;AAAA,UACH;AAAA,UACA,SAAS;AAAA,YACL,aAAa;AAAA,YACb,iBAAiB;AAAA,UACpB;AAAA,QACrB;AAAA,MACA,CAAa;AAAA,IACb;AAEQ,WAAO;AAAA,MACH,eAAe;AAAA,MACf,YAAY;AAAA,IACxB;AAAA,EACK;AACL;AAxtB0D;AAA3C,IAAM,eAAN;ACkBf,MAAM,MAAM;AAAA;AAAA;AAAA;AAAA,EAIR,cAAc,IAAI,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA,EAMhC,UAAU;AACN,WAAO,KAAK,SAAS,IAAI,UAAU,WAAW,UAAU,KAAK,GAAG;AAAA,EACnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,QAAQ,aAAaE,WAAU,IAAI;AACrC,QAAI,CAAC,aAAa;AACd,aAAO,KAAK,qDAAqD,IAAI;AACrE;AAAA,IACH;AAED,WAAO,MAAM,KAAK,aAAa,KAAK,aAAaA,QAAO;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,KAAK,aAAaA,WAAU,IAAI;AAClC,QAAI,CAAC,aAAa;AACd,aAAO,KAAK,qDAAqD,IAAI;AACrE;AAAA,IACH;AACD,UAAM,QAAQ,MAAM,gBAAgB,kBAAkB,WAAW;AACjE,UAAMO,YAAW,IAAI,gBAAgB,OAAOP,QAAO;AACnD,UAAMO,UAAS;AACf,UAAM,YAAY,MAAMA,UAAS;AAEjC,UAAMN,WAAU,WAAW;AAEZ,IAAAD,UAAS,YAAYO,UAAS,YAAY;AAC9C,IAAAP,UAAS,QAAQO,UAAS,YAAY;AAEjD,UAAMI,MAAK,IAAI,cAAc,OAAOV,UAASD,UAAS,wBAAwB;AAC9E,UAAM,gBAAgB,MAAMW,IAAG;AAE/B,UAAM,OAAO,CAAA;AACb,gBAAY,MAAM,aAAa,aAAa;AAC5C,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBD,MAAM,gBAAgB,aAAaX,WAAU,IAAI;AAC7C,QAAI,CAAC,aAAa;AACd,aAAO,KAAK,gEAAgE,IAAI;AAChF;AAAA,IACH;AACD,UAAM,QAAQ,MAAM,gBAAgB,kBAAkB,WAAW;AACjE,WAAO,MAAM,KAAK,aAAa,gBAAgB,OAAOA,QAAO;AAAA,EAWhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBD,MAAM,kBAAkB,aAAaA,WAAU,IAAI;AAC/C,QAAI,CAAC,aAAa;AACd,aAAO,KAAK,kEAAkE,IAAI;AAClF;AAAA,IACH;AACD,UAAM,QAAQ,MAAM,gBAAgB,kBAAkB,WAAW;AACjE,WAAO,MAAM,KAAK,aAAa,kBAAkB,OAAOA,QAAO;AAAA,EAWlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWD,MAAM,0BAA0B,aAAa,MAAM,iBAAiB;AAChE,QAAI,CAAC,YAAY;AACb,aAAO,KAAK,2EAA2E,IAAI;AAC3F;AAAA,IACH;AACD,WAAO,MAAM,qCAAqC,0BAA0B,YAAY,eAAe;AAAA,EAC1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBD,MAAM,8BACF,gBACA,YAAY,iBAAiB,cAC7B,EAAE,kBAAkB,KAAI,IAAK,CAAE,GACjC;AACE,QAAI,CAAC,gBAAgB;AACjB,aAAO,KAAK,mFAAmF,IAAI;AACnG;AAAA,IACH;AACD,WAAO,MAAM,6BAA6B;AAAA,MACtC;AAAA,MACA,aAAa,iBAAiB;AAAA,MAC9B,EAAE,gBAAiB;AAAA,IAC/B;AAAA,EACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWD,MAAM,0BACF,gBACA,YAAY,iBAAiB,cAC7B,EAAE,kBAAkB,KAAI,IAAK,CAAE,GACjC;AACE,QAAI,CAAC,gBAAgB;AACjB,aAAO,KAAK,+EAA+E,IAAI;AAC/F;AAAA,IACH;AACD,WAAO,MAAM,6BAA6B;AAAA,MACtC;AAAA,MACA,aAAa,iBAAiB;AAAA,MAC9B,EAAE,gBAAiB;AAAA,IAC/B;AAAA,EACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2BD,MAAM,uBAAuB,aAAa,QAAQ,MAAMA,WAAU,CAAA,GAAI;AAClE,QAAI,CAAC,aAAa;AACd,aAAO,KAAK,uEAAuE,IAAI;AACvF;AAAA,IACH;AACD,WAAO,MAAM,eAAe,uBAAuB,aAAa,OAAOA,QAAO;AAAA,EACjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBD,MAAM,aAAa,aAAaA,WAAU,IAAI;AAC1C,QAAI,CAAC,aAAa;AACd,aAAO,KAAK,6DAA6D,IAAI;AAC7E;AAAA,IACH;AACD,WAAO,MAAM,eAAe,aAAa,aAAaA,QAAO;AAAA,EAChE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBD,MAAM,4BAA4B,aAAaA,WAAU,IAAI;AACzD,QAAI,CAAC,aAAa;AACd,aAAO,KAAK,4EAA4E,IAAI;AAC5F;AAAA,IACH;AACD,WAAO,MAAM,eAAe,uBAAuB,aAAa,MAAMA,QAAO;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBD,MAAM,iBAAiB,aAAaA,WAAU,IAAI;AAC9C,QAAI,CAAC,aAAa;AACd,aAAO,KAAK,iEAAiE,IAAI;AACjF;AAAA,IACH;AACD,WAAO,MAAM,eAAe,iBAAiB,aAAaA,QAAO;AAAA,EACpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyBD,MAAM,gBAAgB,aAAaA,WAAU,IAAI;AAC7C,QAAI,CAAC,aAAa;AACd,aAAO,KAAK,gEAAgE,IAAI;AAChF;AAAA,IACH;AACD,WAAO,MAAMa,oBAAkB,gBAAgB,aAAab,QAAO;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBD,MAAM,+BAA+B,aAAaA,WAAU,IAAI;AAC5D,QAAI,CAAC,aAAa;AACd,aAAO,KAAK,+EAA+E,IAAI;AAC/F;AAAA,IACH;AACD,WAAO,MAAMa,oBAAkB,0BAA0B,aAAa,MAAMb,QAAO;AAAA,EACtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBD,MAAM,oBAAoB,aAAaA,WAAU,IAAI;AACjD,QAAI,CAAC,aAAa;AACd,aAAO,KAAK,oEAAoE,IAAI;AACpF;AAAA,IACH;AACD,WAAO,MAAMa,oBAAkB,oBAAoB,aAAab,QAAO;AAAA,EAC1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,MAAM,qBAAqB,aAAa;AACpC,QAAI,CAAC,aAAa;AACd,aAAO,KAAK,qEAAqE,IAAI;AACrF;AAAA,IACH;AACD,UAAM,QAAQ,MAAMa,oBAAkB,qBAAqB,WAAW;AACtE,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWD,MAAM,gBAAgB,aAAa;AAC/B,QAAI,CAAC,aAAa;AACd,aAAO,KAAK,gEAAgE,IAAI;AAChF;AAAA,IACH;AACD,WAAO,MAAM,gBAAgB,gBAAgB,WAAW;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,kBAAkB,aAAa;AACjC,QAAI,CAAC,aAAa;AACd,aAAO,KAAK,kEAAkE,IAAI;AAClF;AAAA,IACH;AACD,WAAO,MAAM,gBAAgB,kBAAkB,WAAW;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA,EAMD,MAAM,gCAAgC,iBAAiB,MAAM,EAAE,kBAAkB,KAAM,IAAG,IAAI;AAC1F,QAAI,CAAC,gBAAgB;AACjB,aAAO,KAAK,qFAAqF,IAAI;AACrG;AAAA,IACH;AACD,WAAO,MAAM,6BAA6B,gCAAgC,gBAAgB,EAAE,gBAAiB,CAAA;AAAA,EAChH;AAAA,EAED,MAAM,sDAAsD;AACxD,WAAO,MAAM,6BAA6B;EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYD,MAAM,8BAA8B,cAAc;AAK9C,QAAI,OAAO,iBAAiB,UAAU;AAClC,YAAM,OAAO,MAAM,qEAAqE;AAAA,IAC3F;AAED,UAAM,iBAAiB,aAAa;AACpC,UAAM,YAAY,aAAa,aAAa,iBAAiB;AAC7D,UAAM,kBAAkB,aAAa;AACrC,QAAI,CAAC,gBAAgB;AACjB,aAAO,KAAK,mFAAmF,IAAI;AACnG;AAAA,IACH;AACD,WAAO,MAAM,6BAA6B,sBAAsB,gBAAgB,WAAW,EAAE,gBAAe,CAAE;AAAA,EACjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,0BAA0B,cAAc;AAK1C,QAAI,OAAO,iBAAiB,UAAU;AAClC,YAAM,OAAO,MAAM,iEAAiE;AAAA,IACvF;AACD,UAAM,aAAa,aAAa;AAChC,UAAM,kBAAkB,aAAa;AACrC,QAAI,CAAC,YAAY;AACb,aAAO,KAAK,2EAA2E,IAAI;AAC3F;AAAA,IACH;AACD,UAAM,MAAM,MAAM,qCAAqC,0BAA0B,YAAY,eAAe;AAC5G,WAAO;AAAA,EACV;AAAA,EAED,MAAM,yBAAyB,cAAc;AAKzC,QAAI,OAAO,iBAAiB,UAAU;AAClC,YAAM,OAAO,MAAM,iEAAiE;AAAA,IACvF;AACD,UAAM,QAAQ,aAAa;AAC3B,UAAM,QAAQ,aAAa;AAC3B,UAAMb,WAAU,aAAa;AAC7B,UAAM,iBAAiB,MAAM,wBAAwB,yBAAyB,OAAO,OAAOA,QAAO;AACnG,WAAO,kBAAkB,CAAA;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,qCAAqC,cAAc;AAKrD,QAAI,OAAO,iBAAiB,UAAU;AAClC,YAAM,OAAO,MAAM,iEAAiE;AAAA,IACvF;AACD,UAAM,QAAQ,aAAa;AAC3B,UAAMA,WAAU,aAAa;AAC7B,UAAM,oBAAoB,MAAM,wBAAwB,qCAAqC,OAAOA,QAAO;AAC3G,WAAO,qBAAqB,CAAA;AAAA,EAC/B;AAAA,EAED,MAAM,qDAAqD,cAAc;AAKrE,QAAI,OAAO,iBAAiB,UAAU;AAClC,YAAM,OAAO,MAAM,iEAAiE;AAAA,IACvF;AACD,UAAM,QAAQ,aAAa;AAC3B,UAAMA,WAAU,aAAa;AAC7B,UAAM,oBAAoB,MAAM,wBAAwB;AAAA,MACpD;AAAA,MACAA;AAAA,IACZ;AACQ,WAAO,qBAAqB,CAAA;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBD,MAAM,yBACF,QACAA,WAAU;AAAA,IACN,mBAAmB;AAAA,IACnB,gBAAgB;AAAA,IAChB,cAAc;AAAA,IACd,cAAc;AAAA,IACd,aAAa;AAAA,EAChB,GACD,gBAAgB,EAAE,UAAU,EAAG,GAC/B,eAAe;AAAA,IACX,aAAa;AAAA,IACb,YAAY;AAAA,IACZ,MAAM,KAAK,UAAU,WAAW;AAAA,IAChC,iBAAiB;AAAA,IACjB,eAAe;AAAA,IACf,QAAQ;AAAA,EACX,GACH;AACE,QAAI,YAAY,UAAU;AAC1B,QAAI,WAAW,UAAU,GAAG;AACxB,kBAAY,OAAO,OAAO;AAAA,IAC7B;AACD,QAAI,WAAW,SAAS,GAAG;AACvB,aAAO,MAAM,iBAAiB,yBAAyB,WAAWA,UAAS,eAAe,YAAY;AAAA,IAClH,OAAe;AACH,aAAO,KAAK,0BAA0B,IAAI;AAAA,IAC7C;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUD,MAAM,8BAA8B,QAAQ,eAAe,OAAO;AAC9D,QAAI,YAAY,UAAU;AAC1B,QAAI,WAAW,UAAU,GAAG;AACxB,kBAAY,OAAO,OAAO;AAAA,IAC7B;AACD,QAAI,WAAW,SAAS,GAAG;AACvB,YAAMA,WAAU;AAAA,QACZ,mBAAmB;AAAA,QACnB,gBAAgB;AAAA,QAChB,cAAc;AAAA,QACd;AAAA,QACA,aAAa;AAAA,MAC7B;AACY,aAAO,MAAM,iBAAiB,yBAAyB,WAAWA,QAAO;AAAA,IACrF,OAAe;AACH,aAAO,KAAK,0BAA0B,IAAI;AAAA,IAC7C;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBD,MAAM,cAAc,aAAa,gBAAgBA,WAAU,CAAA,GAAI;AAC3D,WAAO,MAAM,iBAAiB,cAAc,aAAa,gBAAgBA,QAAO;AAAA,EACnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,MAAM,iBAAiB,aAAa;AAChC,WAAO,MAAM,wBAAwB,iBAAiB,WAAW;AAAA,EACpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyBD,MAAM,4BAA4B,cAAc;AAC5C,QAAI,CAAC,MAAM,QAAQ,YAAY,GAAG;AAC9B,YAAM,OAAO,MAAM,+DAA+D;AAAA,IACrF;AACD,UAAM,CAAC,oBAAoBA,QAAO,IAAI;AACtC,UAAM,cAAc,MAAM,SAAS,kBAAkB;AACrD,WAAO,MAAM,KAAK,aAAa,gBAAgB,aAAaA,QAAO;AAAA,EACtE;AAAA,EAED,MAAM,kCAAkC,cAAc;AAClD,QAAI,CAAC,MAAM,QAAQ,YAAY,GAAG;AAC9B,YAAM,OAAO,MAAM,gEAAgE;AAAA,IACtF;AAED,UAAM,CAAC,oBAAoBC,UAAS,UAAUK,OAAM,0BAA0B,eAAe,IAAI;AACjG,UAAM,cAAc,MAAM,SAAS,kBAAkB;AAErD,UAAMK,MAAK,IAAI,cAAc,aAAaV,UAAS,0BAA0B,eAAe;AAC5F,UAAM,gBAAgB,MAAMU,IAAG;AAE/B,UAAM,iBAAiB,SAAS,gBAAgB,aAAa,SAAS,eAAe;AAErF,QAAI,mBAAmB,UAAU,mBAAmB;AAChD,YAAM,iBAAiB,IAAI,eAAe,eAAe,UAAUL,KAAI;AACvE,YAAM,eAAe,eAAe,WAAW;AAAA,IAC3D,WAAmB,mBAAmB,UAAU,iBAAiB;AACrD,YAAM,eAAeK,IAAG;AACxB,YAAM,eAAe,IAAI,aAAa,eAAe,cAAc,UAAUL,KAAI;AACjF,YAAM,aAAa,eAAe,WAAW;AAAA,IACzD,WAAmB,mBAAmB,UAAU,kBAAkB;AACtD,YAAM,gBAAgB,IAAI,cAAc,eAAe,UAAUA,KAAI;AACrE,YAAM,cAAc,eAAe,WAAW;AAAA,IAC1D,WAAmB,mBAAmB,UAAU,oBAAoB;AACxD,YAAM,kBAAkB,IAAI,gBAAgB,eAAe,UAAUA,KAAI;AACzE,YAAM,gBAAgB,eAAe,WAAW;AAAA,IAC5D,OAAe;AACH,YAAM,SAAS,eAAeL,UAAS,UAAUK,KAAI;AAAA,IACxD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaD,MAAM,yBAAyB,OAAO,MAAMN,WAAU,CAAA,GAAI;AACtD,UAAM,WAAW,MAAM,gBAAgB,cAAc,KAAK;AAK1D,WAAO,MAAM,aAAa,yBAAyB,UAAU,SAASA,QAAO;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,MAAM,kBAAkB,OAAOA,UAAS;AACpC,UAAM,WAAW,aAAaA,SAAQ,QAAQ;AAC9C,UAAM,WAAW,MAAM,gBAAgB,cAAc,KAAK;AAC1D,WAAO,MAAM,aAAa,kBAAkB,UAAU,QAAQ;AAAA,EACjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,MAAM,8CAA8C,OAAOA,UAAS;AAChE,UAAM,WAAW,aAAaA,SAAQ,QAAQ;AAC9C,UAAM,WAAW,MAAM,gBAAgB,cAAc,KAAK;AAC1D,UAAM,eAAe,MAAM,KAAK,kBAAkB,UAAU;AAAA,MACxD;AAAA,IACZ,CAAS;AACD,UAAM,gBAAgB,aAAa;AAEnC,UAAM,yBAAyB,CAAA;AAE/B,eAAW,oBAAoB,eAAe;AAC1C,YAAM,QAAQ,iBAAiB;AAC/B,YAAMA,WAAU,iBAAiB;AACjC,YAAM,oBAAoB,MAAM,KAAK,qCAAqC;AAAA,QACtE;AAAA,QACA,SAASA;AAAA,MACzB,CAAa;AACD,6BAAuB,KAAK,qBAAqB,CAAA,CAAE;AAAA,IACtD;AACD,WAAO;AAAA,EACV;AACL;AAEA,MAAA,QAAe;AC/yBR,MAAM,QAAQ;AAEd,MAAM,WAAW;AAGjB,MAAM,aAAa;AA0BnB,SAAS,mBAAmB;AA2B/B,OAAK,SAAS,SAAS,UAAU,WAAW,UAAU,oCAAoC;AAAA,IACtF,MAAM,OAAO,KAAK,GAAG,UAAU,SAAS,+CAA+C;AAAA,IACvF,MAAM,OAAO,KAAK,GAAG,UAAU,SAAS,qDAAqD;AAAA,IAC7F,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,MAAM;AAAA,EACd,CAAK;AACD,OAAK,SAAS,SAAS,UAAU,WAAW,UAAU,mCAAmC;AAAA,IACrF,MAAM,OAAO,KAAK,GAAG,UAAU,SAAS,+CAA+C;AAAA,IACvF,MAAM,OAAO,KAAK,GAAG,UAAU,SAAS,qDAAqD;AAAA,IAC7F,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,MAAM;AAAA,EACd,CAAK;AAcD,OAAK,SAAS,SAAS,UAAU,WAAW,UAAU,qBAAqB;AAAA,IACvE,MAAM,OAAO,KAAK,GAAG,UAAU,SAAS,uBAAuB;AAAA,IAC/D,MAAM,OAAO,KAAK,GAAG,UAAU,SAAS,6BAA6B;AAAA,IACrE,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,MAAM;AAAA,EACd,CAAK;AAED,OAAK,SAAS,SAAS,UAAU,WAAW,UAAU,4BAA4B;AAAA,IAC9E,MAAM,OAAO,KAAK,GAAG,UAAU,SAAS,yCAAyC;AAAA,IACjF,MAAM,OAAO,KAAK,GAAG,UAAU,SAAS,+CAA+C;AAAA,IACvF,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,MAAM;AAAA,EACd,CAAK;AAED,OAAK,SAAS,SAAS,UAAU,WAAW,UAAU,mBAAmB;AAAA,IACrE,MAAM,OAAO,KAAK,GAAG,UAAU,SAAS,qBAAqB;AAAA,IAC7D,MAAM,OAAO,KAAK,GAAG,UAAU,SAAS,2BAA2B;AAAA,IACnE,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,MAAM;AAAA,EACd,CAAK;AAID,OAAK,SAAS,SAAS,UAAU,WAAW,UAAU,yBAAyB;AAAA,IAC3E,MAAM,OAAO,KAAK,GAAG,UAAU,SAAS,sCAAsC;AAAA,IAC9E,MAAM,OAAO,KAAK,GAAG,UAAU,SAAS,4CAA4C;AAAA,IACpF,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,MAAM;AAAA,EACd,CAAK;AAID,OAAK,SAAS,SAAS,UAAU,WAAW,UAAU,KAAK,KAAK;AAAA,IAC5D,MAAM,OAAO,KAAK,GAAG,UAAU,SAAS,0BAA0B;AAAA,IAClE,MAAM,OAAO,KAAK,GAAG,UAAU,SAAS,gCAAgC;AAAA,IACxE,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,MAAM;AAAA,EACd,CAAK;AAED,OAAK,SAAS,SAAS,UAAU,WAAW,UAAU,KAAK,UAAU;AAAA,IACjE,MAAM,OAAO,KAAK,GAAG,UAAU,SAAS,+BAA+B;AAAA,IACvE,MAAM,OAAO,KAAK,GAAG,UAAU,SAAS,qCAAqC;AAAA,IAC7E,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,SAAS,CAAE;AAAA,IACX,MAAM;AAAA,EACd,CAAK;AAoCD,OAAK,SAAS,SAAS,UAAU,WAAW,oCAAoC;AAAA,IAC5E,MAAM,GAAG,UAAU,SAAS;AAAA,IAC5B,MAAM,GAAG,UAAU,SAAS;AAAA,IAC5B,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,MAAM;AAAA,EACd,CAAK;AAED,OAAK,SAAS,SAAS,UAAU,WAAW,wBAAwB;AAAA,IAChE,MAAM,GAAG,UAAU,SAAS;AAAA,IAC5B,MAAM,GAAG,UAAU,SAAS;AAAA,IAC5B,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACjB,CAAK;AAID,OAAK,SAAS,SAAS,UAAU,WAAW,SAAS;AAAA,IACjD,MAAM,GAAG,UAAU,SAAS;AAAA,IAC5B,MAAM,GAAG,UAAU,SAAS;AAAA,IAC5B,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,MAAM;AAAA,EACd,CAAK;AAGL;AA1LgB;ACnCT,MAAM,kBAAN,MAAM,wBAAuB,cAAc;AAAA;AAAA;AAAA;AAAA,EAI9C,YAAY,QAAQA,UAAS;AACzB,UAAM,QAAQA,QAAO;AACrB,SAAK,QAAQ,KAAK,YAAY,OAAO,IAAI;AACzC,SAAK,QAAQ,QAAQ,KAAK,KAAK,OAAO,GAAG,UAAU,SAAS,yBAAyB;AAAA,MACjF,OAAO,OAAO,OAAO;AAAA,MACrB,QAAQ,OAAO;AAAA,IAC3B,CAAS;AAED,SAAK,UAAUA,SAAQ;AAEvB,WAAO,OAAO,KAAK,KAAK,KAAK,IAAI;AAAA,EACpC;AAAA,EAED,IAAI,WAAW;AACX,WAAO,WAAW,UAAU,SAAS;AAAA,EACxC;AAAA,EAED,WAAW,iBAAiB;AACxB,UAAM,WAAW,MAAM;AACvB,WAAO;AAAA,MACH,GAAG;AAAA,MACH,SAAS,CAAC,GAAG,SAAS,SAAS,GAAG,UAAU,SAAS,4BAA4B;AAAA,MACjF,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,gBAAgB;AAAA,MAChB,eAAe;AAAA,MACf,eAAe;AAAA,IAC3B;AAAA,EACK;AAAA,EAED,MAAM,UAAU;AACZ,UAAM,UAAU,MAAM;AACtB,YAAQ,SAAS,KAAK;AACtB,WAAO;AAAA,EACV;AAAA,EAED,MAAMA,UAAS;AACX,WAAO,KAAK,SAAS,OAAO,KAAK,KAAK,KAAK;AAE3C,UAAM,MAAMA,QAAO;AACnB,SAAK,QAAQ,KAAK,MAAM;AAAA,EAC3B;AAAA,EAED,cAAc,OAAO,UAAU;AAC3B,SAAK,OAAO,OAAO,QAAQ;AAC3B,SAAK,MAAK;AAAA,EACb;AAAA,EAED,OAAO,KAAK,QAAQ;AAChB,WAAO,IAAI,QAAQ,CAAC,YAAY,IAAI,gBAAe,QAAQ,EAAE,QAAS,CAAA,EAAE,OAAO,MAAM,EAAE,OAAO,KAAI,CAAE,CAAC;AAAA,EACxG;AACL;AAxDkD;AAA3C,IAAM,iBAAN;ACUA,MAAM,+BAAN,MAAM,qCAAoC,gBAAgB;AAAA;AAAA,EAE7D,WAAW,iBAAiB;AACxB,WAAO,QAAQ,MAAM,YAAY,MAAM,gBAAgB;AAAA,MACnD,SAAS,CAAC,SAAS,qBAAqB,GAAG,UAAU,SAAS,oBAAoB;AAAA,MAClF,UAAU,WAAW,UAAU,SAAS;AAAA,MACxC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,eAAe;AAAA,MACf,gBAAgB,MAAM,0BAA0B;AAAA;AAAA;AAAA,MAGhD,UAAU;AAAA;AAAA,QAEN;AAAA,UACI,cAAc;AAAA,UACd,cAAc;AAAA,QACjB;AAAA,MACJ;AAAA,MACD,SAAS,CAAC,gBAAgB;AAAA,MAC1B,WAAW;AAAA,IACvB,CAAS;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcD,MAAM,QAAQA,WAAU,IAAI;AACxB,UAAM,UAAU,MAAM,MAAM,QAAQA,QAAO;AAC3C,YAAQ,kBAAkB,MAAM,WAAW,WAAW,KAAK,OAAO,aAAa;AAAA,MAC3E,OAAO;AAAA,MACP,SAAS,KAAK,OAAO;AAAA,IACjC,CAAS;AACD,UAAMC,WAAU,MAAM,QAAQ;AAAA,MAC1B,KAAK,SAAS,QAAQ,IAAI,OAAO,WAAW;AACxC,cAAM,MAAM,MAAM,iBAAiB,kBAAkB,MAAM;AAC3D,YAAI,KAAK,QAAQ;AACb,iBAAO,IAAI;AAAA,QACd;AAAA,MACjB,CAAa;AAAA,IACb;AACQ,IAAAA,SAAQ,KAAK,CAAC,GAAG,MAAM,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAG9C,QAAI,UAAU,QAAQ,MAAM,YAAY,SAAS;AAAA,MAC7C,SAASA;AAAA,MACT,aAAa,OAAO,QAAQ,MAAM,kBAAkB,EAAE,OAAO,CAAC,KAAK,MAAM;AACrE,YAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE;AACjB,eAAO;AAAA,MACV,GAAE,EAAE;AAAA,MACL,eAAe,MAAM;AAAA,MACrB,iBAAiB,MAAM,KAAK,KAAK,MAAM,KAAI,CAAE;AAAA,IACzD,CAAS;AAED,UAAM,iBAAiB,SAAS,gBAAgB,KAAK,QAAQ;AAG7D,QAAI,mBAAmB,UAAU,mBAAmB;AAChD,YAAM,KAAK,SAAS;AAAA,QAChB,UAAU;AAAA,QACV,UAAU,MAAM;AAAA,QAChB,UAAU;AAAA,MAC1B;AAAA,IACS;AACD,YAAQ,gBAAgB,KAAK,SAAS,QAAQ,UAAU,WAAW,UAAU,MAAM,sBAAsB;AACzG,YAAQ,eAAe;AACvB,YAAQ,YAAY,UAAU;AAC9B,YAAQ,WACJ,OAAO,KAAK,GAAG,UAAU,SAAS,IAAI,iBAAiB,EAAE,IACzD,MACA,OAAO,KAAK,GAAG,UAAU,SAAS,IAAI,WAAW,EAAE;AAGvD,cAAU,QAAQ,MAAM,YAAY,SAAS,UAAU,KAAK,SAAS,KAAK,CAAC;AAC3E,YAAQ,WAAW,CAAC,KAAK;AACzB,YAAQ,OAAO,KAAK,SAAS;AAC7B,YAAQ,QAAQ,KAAK,SAAS;AAI9B,SAAK,UAAU,KAAK,SAAS,UAAU,KAAK,KAAK,EAAE,IAC7C,KAAK,SAAS,UAAU,KAAK,KAAK,EAAE,MAAM,MAAM,2BAA2B,SAC3E,KAAK,SAAS,UAAU,KAAK,KAAK,EAAE,MAAM,MAAM,2BAA2B,WAC3E,KAAK;AAEX,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,kBAAkB,IAAI;AAClB,UAAM,kBAAkB,EAAE;AAE1B,UAAM,OAAO,GAAG,CAAC;AAEjB,QAAI,KAAK,SAAS;AAKd,WAAK,iBAAiB,gCAAgC,EAAE,QAAQ,CAAC,OAAO;AACpE,WAAG,WAAW;AACd,WAAG,iBAAiB,SAAS,KAAK,wBAAwB,KAAK,IAAI,CAAC;AAAA,MACpF,CAAa;AAAA,IACJ;AAGD,QAAI,CAAC,KAAK,YAAY;AAClB;AAAA,IACH;AAQD,SAAK,cAAc,oBAAoB,EAAE,iBAAiB,SAAS,KAAK,oBAAoB,KAAK,IAAI,CAAC;AAStG,SAAK,iBAAiB,eAAe,EAAE;AAAA,MAAQ,CAAC,OAC5C,GAAG,iBAAiB,SAAS,KAAK,cAAc,KAAK,IAAI,CAAC;AAAA,IACtE;AACQ,SAAK,iBAAiB,oBAAoB,EAAE;AAAA,MAAQ,CAAC,OACjD,GAAG,iBAAiB,SAAS,KAAK,gBAAgB,KAAK,IAAI,CAAC;AAAA,IACxE;AAGQ,QAAI,cAAc,KAAK,cAAc,iDAAiD;AACtF,iBAAa,iBAAiB,UAAU,KAAK,6BAA6B,KAAK,IAAI,CAAC;AAAA,EAMvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuED,MAAM,gBAAgB,OAAO;AACzB,UAAM,eAAc;AACpB,UAAM,KAAK,UAAU,KAAK;AAC1B,UAAM,KAAK,MAAM,cAAc,QAAQ,eAAe;AACtD,UAAM,SAAS,KAAK,OAAO,QAAQ,IAAI,GAAG,QAAQ,QAAQ;AAC1D,WAAO,OAAO;EACjB;AAAA;AAAA;AAAA,EAKD,MAAM,QAAQ,OAAO;AACjB,UAAM,OAAO,WAAW,iBAAiB,KAAK;AAC9C,QAAI,KAAK,UAAU,QAAQ;AACvB,YAAM,MAAM,MAAM;AAClB,YAAM,KAAK,IAAI,QAAQ,WAAW,MAAM,IAAI,QAAQ,+BAA+B;AACnF,UAAI,CAAC,IAAI;AACL,eAAO,KAAK,0BAA0B,IAAI;AAC1C;AAAA,MACH;AACD,aAAO,KAAK,aAAa,OAAO,KAAK,QAAQ,GAAG,QAAQ,QAAQ;AAAA,IAC5E,OAAe;AACH,UAAI,KAAK,SAAS,oBAAoB;AAClC,cAAM,cAAc,MAAM,SAAS,KAAK,IAAI;AAE5C,cAAM,OAAO,MAAM,SAAS,YAAY,OAAO,IAAI;AACnD,aAAK,OAAO,KAAK;AACjB,cAAM,UAAU,MAAM,KAAK,0BAA0B,KAAK,UAAU,MAAM,IAAI;AAC9E,YAAI,YAAY;AAAO;AAGvB,YAAI,CAAC,MAAM,eAAe,SAAS,KAAK,IAAI;AAAG;AAG/C,cAAMF,YAAW;AACjB,YAAI,CAACA,aAAYA,UAAS;AAAY;AAGtC,cAAM,eAAe,CAAC,CAACA,UAAS;AAChC,eAAO,MAAM,KAAK,gBAAgB,OAAO;AAAA,UACrC,MAAM,eAAe,MAAM,mBAAmB,aAAa,MAAM,mBAAmB;AAAA,UACpF,oBAAoB,eAAeA,UAAS,OAAOA,UAAS;AAAA,UAC5D,MAAMA,UAAS;AAAA,UACf,YAAYA,UAAS;AAAA,UACrB,KAAKA,UAAS,OAAO;AAAA,UACrB,OAAO;AAAA,YACH,CAAC,GAAG,UAAU,SAAS,EAAE,GAAG;AAAA,cACxB,CAAC,GAAG,UAAU,MAAM,gCAAgC,EAAE,GAAG,KAAK;AAAA,YACjE;AAAA,UACJ;AAAA,QACrB,CAAiB;AAAA,MACjB,OAAmB;AACH,eAAO,MAAM,QAAQ,KAAK;AAAA,MAC7B;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,aAAa,OAAO;AAChB,UAAM,MAAM,MAAM;AAClB,UAAM,WAAW,IAAI,QAAQ,SAAS;AACtC,QAAI,UAAU,KAAK,SAAS;AAC5B,QAAI,CAAC,UAAU;AACX,YAAM,KAAK,IAAI,QAAQ,eAAe;AACtC,YAAM,SAAS,KAAK,SAAS,QAAQ,IAAI,GAAG,QAAQ,QAAQ;AAG5D,gBAAU,OAAO;AAAA,IACpB;AACD,UAAM,KAAK,IAAI,WAAW;AAAA,MACtB,MAAM;AAAA,MACN;AAAA,MACA,UAAU,OAAO,SAAS;AAEtB,YAAI,MAAM;AAEV,cAAM,cAAc,IAAI,QAAQ,eAAe;AAC/C,YAAI,oBAAoB,YAAY,iBAAiB,OAAO;AAC5D,YAAI,kBAAkB,kBAAkB,CAAC,EAAE,SAAS;AACpD,YAAI,oBAAoB,MAAM;AAC1B,4BAAkB,CAAC,EAAE,QAAQ;AAAA,QAChC;AAQD,eAAO,KAAK,UAAU,KAAK;AAAA,MAC9B;AAAA,MACD,KAAK,KAAK,SAAS,MAAM;AAAA,MACzB,MAAM,KAAK,SAAS,OAAO;AAAA,IACvC,CAAS;AACD,WAAO,GAAG;EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqDD,MAAM,aAAa,OAAO;AAWtB,WAAO,MAAM,MAAM,aAAa,KAAK;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2ED,MAAM,aAAaE,UAAS;AAExB,UAAM,eAAe,KAAK,QAAQ,CAAC,EAAE,cAAc,wBAAwB;AAC3E,UAAM,WAAW,IAAI,IAAIA,SAAQ,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC;AACjD,UAAM,aAAa,MAAM,KAAK,aAAa,QAAQ,EAAE,OAAO,CAACG,UAAS,SAAS,IAAIA,MAAK,QAAQ,QAAQ,CAAC;AAGzG,UAAM,WAAW,KAAK,OAAO,QAAQ;AACrC,UAAM,UAAU;AAChB,QAAI,WAAW;AACf,QAAI,aAAa,KAAK,MAAM,aAAa,gBAAgB,aAAa,SAAS,CAAC,EAAE,eAAe,EAAE;AACnG,UAAM,SAAS,KAAK,IAAI,KAAK,KAAK,WAAW,WAAW,SAAS,GAAG,CAAC;AACrE,QAAI,WAAW;AAAG,iBAAW,UAAU;AAGvC,UAAM,KAAK,iBAAiB,cAAc,UAAU,QAAQ,UAAU,UAAU;AAGhF,UAAM,UAAU,WAAW,IAAI,CAAC,OAAO,KAAK,aAAa,EAAE,CAAC;AAC5D,WAAO,QAAQ,IAAI,OAAO;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoED,aAAa,OAAO;AAChB,UAAM,MAAM,MAAM;AAClB,UAAM,KAAK,IAAI,QAAQ,WAAW,MAAM,IAAI,QAAQ,+BAA+B;AACnF,UAAM,cAAc;AAAA,MAChB;AAAA,MACA,KAAK,UAAU,EAAE,OAAO,QAAQ,OAAO,GAAG,QAAQ,OAAO,QAAQ,GAAG,QAAQ,SAAQ,CAAE;AAAA,IAClG;AAAA,EACK;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,MAAM,aAAa,OAAO,QAAQ,QAAQ;AACtC,QAAI,CAAC,KAAK,YAAY,KAAK;AAAa,aAAO;AAE/C,UAAM,KAAK,UAAU,KAAK;AAI1B,UAAMH,WAAU,KAAK,SAAS,QAAQ,IAAI,CAAC,WAAW,OAAO,SAAS,KAAK,CAAC;AAC5E,IAAAA,SAAQ,KAAK,CAAC,GAAG,MAAM,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAE9C,UAAM,WAAWA,SAAQ,UAAU,CAAC,MAAM,EAAE,QAAQ,MAAM,GACtD,WAAWA,SAAQ,UAAU,CAAC,MAAM,EAAE,QAAQ,MAAM;AAExD,QAAI,YAAY,UAAU;AACtB,aAAO,KAAK,kCAAkC,IAAI;AAClD;AAAA,IACH;AAGD,UAAM,CAAC,KAAK,IAAIA,SAAQ,OAAO,UAAU,CAAC;AAC1C,IAAAA,SAAQ,OAAO,UAAU,GAAG,KAAK;AAGjC,IAAAA,SAAQ,QAAQ,CAAC,MAAO,EAAE,SAAS,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,EAAG;AACjE,QAAI,cAAc;AAClB,UAAM,UAAU,CAAA;AAChB,eAAW,UAAUA,UAAS;AAC1B,YAAM,IAAI,OAAO;AACjB,cAAQ,KAAK,EAAE,KAAK,OAAO,KAAK,QAAQ,GAAG,OAAO,CAAC,aAAa,cAAc,IAAI,CAAC,EAAG,CAAA;AACtF,oBAAc,cAAc;AAAA,IAC/B;AACD,WAAO,KAAK,SAAS,wBAAwB,eAAe,OAAO;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,MAAM,oBAAoB,OAAO;AAC7B,UAAM,eAAc;AACpB,UAAM,gBAAe;AAErB,QAAI,CAAC,KAAK,YAAY,KAAK;AAAa,aAAO;AAG/C,UAAM,KAAK,UAAU,KAAK;AAE1B,UAAMA,WAAU,KAAK,SAAS,QAAQ,IAAI,CAAC,WAAW,OAAO,SAAS,KAAK,CAAC;AAE5E,UAAM,UAAUA,SAAQ,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,QAAQ,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,GAAI,EAAC;AAE1F,WAAO,KAAK,SAAS,wBAAwB,eAAe,OAAO;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA,EAKD,MAAM,gBAAgB,OAAO;AACzB,UAAM,eAAc;AACpB,UAAM,gBAAe;AAGrB,UAAM,KAAK,UAAU,KAAK;AAE1B,UAAM,SAAS,MAAM,OAAO,QAAQ,+BAA+B;AACnE,UAAM,KAAK,OAAO,QAAQ;AAC1B,UAAM,SAAS,KAAK,SAAS,QAAQ,IAAI,EAAE;AAE3C,UAAM,OAAO,YAAY,OAAO,IAAI;AACpC,UAAM,MAAM,OAAO,OAAO,GAAG,OAAO,EAAE,KAAK,CAAC,QAAQ,IAAI,QAAQ,OAAO,IAAI;AAC3E,QAAI;AAAK,aAAO,IAAI,OAAO,MAAM,EAAE,OAAO,KAAI,CAAE;AAEjC,UAAM,eAAe,KAAK,MAAM;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA,EAKD,oBAAoB,OAAO,MAAM;AAC7B,UAAM,eAAc;AACpB,UAAM,gBAAe;AAErB,UAAM,eAAe,SAAS,cAAc,UAAU;AACtD,iBAAa,OAAO;AACpB,iBAAa,YAAY,KAAK,OAAO;AACrC,UAAM,SAAS,KAAK,cAAc,qBAAqB;AACvD,YAAQ,gBAAgB,YAAY;AACpC,SAAK,UAAU;EAClB;AAAA,EAED,eAAe,YAAY;AACvB,UAAM,OAAO,MAAM,eAAe,UAAU;AAE5C,QAAI,KAAK,eAAe;AAAW,WAAK,cAAc;AACtD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,MAAM,cAAc,OAAO;AACvB,UAAM,eAAc;AACpB,UAAM,cAAc,MAAM,cAAc,QAAQ,eAAe;AAC/D,UAAM,SAAS,KAAK,SAAS,QAAQ,IAAI,YAAY,QAAQ,QAAQ;AACrE,QAAI,eAAe,MAAM,iBAAiB,2BAA2B,QAAQ,IAAI;AAEjF,QAAI,YAAY,wBAAwB;AACxC,QAAI,qBAAqB;AAAA,MACrB;AAAA,MACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,gCAAgC;AAAA,IAC5F;AACQ,QAAI,aAAa,oBAAoB;AACjC,qBAAe,MAAM,SAAS,kBAAkB;AAAA,IACnD;AAED,QAAI,cAAc;AACd,mBAAa,MAAM,OAAO,IAAI;AAAA,IAC1C,OAAe;AACH,aAAO,KAAK,qCAAqC,IAAI;AAAA,IACxD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,MAAM,wBAAwB,OAAO;AACjC,UAAM,eAAc;AACpB,UAAM,KAAK,OAAO,EAAE,cAAc,MAAM,eAAe,KAAI,CAAE;AAC7D,QAAI,MAAM,eAAe;AACrB,YAAM,cAAc,WAAW;AAAA,IAC3C,OAAe;AACH,YAAM,OAAO,WAAW;AAAA,IAC3B;AAED,UAAM,iBAAiB,SAAS,gBAAgB,KAAK,QAAQ;AAG7D,QAAI,mBAAmB,UAAU,mBAAmB;AAChD,YAAM,KAAK,SAAS;AAAA,QAChB,UAAU;AAAA,QACV,UAAU,MAAM;AAAA,QAChB,UAAU;AAAA,MAC1B;AAAA,IACS;AACD,UAAM,cAAc,KAAK;AACzB,UAAMQ,MAAI,gBAAgB,WAAW;AACrC,QAAI,MAAM,eAAe;AACrB,YAAM,cAAc,WAAW;AAAA,IAC3C,OAAe;AACH,YAAM,OAAO,WAAW;AAAA,IAC3B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,MAAM,6BAA6B,OAAO;AACtC,UAAM,eAAc;AACpB,UAAM,SAAS,MAAM;AACrB,UAAM,QAAQ,OAAO;AACH,WAAO;AACzB,UAAM,cAAc,MAAM,cAAc,QAAQ,eAAe;AAC/D,UAAM,SAAS,KAAK,SAAS,QAAQ,IAAI,YAAY,QAAQ,QAAQ;AAErE,gBAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,gCAAgC,IAAI,KAAK;AAE7G,UAAM,KAAK,UAAU,KAAK;AAE1B,UAAM,OAAO,OAAO;AAAA,MAChB,OAAO;AAAA,QACH,CAAC,GAAG,UAAU,SAAS,EAAE,GAAG;AAAA,UACxB,CAAC,GAAG,UAAU,MAAM,gCAAgC,EAAE,GAAG,SAAS;AAAA,QACrE;AAAA,MACJ;AAAA,IACb,CAAS;AAAA,EACJ;AAAA;AAGL;AAtvBiE;AAA1D,IAAM,8BAAN;ACCA,MAAM,6BAAN,MAAM,mCAAkC,gBAAgB;AAAA;AAAA,EAE3D,WAAW,iBAAiB;AACxB,WAAO,QAAQ,MAAM,YAAY,MAAM,gBAAgB;AAAA,MACnD,SAAS,CAAC,SAAS,qBAAqB,GAAG,UAAU,SAAS,oBAAoB;AAAA,MAClF,UAAU,WAAW,UAAU,SAAS;AAAA,MACxC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,eAAe;AAAA,MACf,gBAAgB,MAAM,0BAA0B;AAAA;AAAA;AAAA,MAGhD,UAAU;AAAA;AAAA,QAEN;AAAA,UACI,cAAc;AAAA,UACd,cAAc;AAAA,QACjB;AAAA,MACJ;AAAA,MACD,SAAS,CAAC,gBAAgB;AAAA,MAC1B,WAAW;AAAA,IACvB,CAAS;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcD,MAAM,QAAQT,WAAU,IAAI;AACxB,UAAM,UAAU,MAAM,MAAM,QAAQA,QAAO;AAC3C,YAAQ,kBAAkB,MAAM,WAAW,WAAW,KAAK,OAAO,aAAa;AAAA,MAC3E,OAAO;AAAA,MACP,SAAS,KAAK,OAAO;AAAA,IACjC,CAAS;AACD,UAAMC,WAAU,MAAM,QAAQ;AAAA,MAC1B,KAAK,SAAS,QAAQ,IAAI,OAAO,WAAW;AACxC,cAAM,MAAM,MAAM,iBAAiB,kBAAkB,MAAM;AAC3D,YAAI,KAAK,QAAQ;AACb,iBAAO,IAAI;AAAA,QACd;AAAA,MACjB,CAAa;AAAA,IACb;AACQ,IAAAA,SAAQ,KAAK,CAAC,GAAG,MAAM,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAG9C,QAAI,UAAU,QAAQ,MAAM,YAAY,SAAS;AAAA,MAC7C,SAASA;AAAA,MACT,aAAa,OAAO,QAAQ,MAAM,kBAAkB,EAAE,OAAO,CAAC,KAAK,MAAM;AACrE,YAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE;AACjB,eAAO;AAAA,MACV,GAAE,EAAE;AAAA,MACL,eAAe,MAAM;AAAA,MACrB,iBAAiB,MAAM,KAAK,KAAK,MAAM,KAAI,CAAE;AAAA,IACzD,CAAS;AAED,UAAM,iBAAiB,SAAS,gBAAgB,KAAK,QAAQ;AAG7D,QAAI,mBAAmB,UAAU,iBAAiB;AAC9C,YAAM,KAAK,SAAS,QAAQ,UAAU,WAAW,UAAU,MAAM,gBAAgB,UAAU,eAAe;AAAA,IAC7G;AACD,YAAQ,gBAAgB,KAAK,SAAS,QAAQ,UAAU,WAAW,UAAU,MAAM,sBAAsB;AACzG,YAAQ,eAAe;AACvB,YAAQ,YAAY,UAAU;AAC9B,YAAQ,WACJ,OAAO,KAAK,GAAG,UAAU,SAAS,IAAI,iBAAiB,EAAE,IACzD,MACA,OAAO,KAAK,GAAG,UAAU,SAAS,IAAI,UAAU,EAAE;AAGtD,cAAU,QAAQ,MAAM,YAAY,SAAS,UAAU,KAAK,SAAS,KAAK,CAAC;AAC3E,YAAQ,WAAW,CAAC,KAAK;AACzB,YAAQ,OAAO,KAAK,SAAS;AAC7B,YAAQ,QAAQ,KAAK,SAAS;AAI9B,SAAK,UAAU,KAAK,SAAS,UAAU,KAAK,KAAK,EAAE,IAC7C,KAAK,SAAS,UAAU,KAAK,KAAK,EAAE,MAAM,MAAM,2BAA2B,SAC3E,KAAK,SAAS,UAAU,KAAK,KAAK,EAAE,MAAM,MAAM,2BAA2B,WAC3E,KAAK;AAEX,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,kBAAkB,IAAI;AAClB,UAAM,kBAAkB,EAAE;AAE1B,UAAM,OAAO,GAAG,CAAC;AAEjB,QAAI,KAAK,SAAS;AAKd,WAAK,iBAAiB,8BAA8B,EAAE,QAAQ,CAAC,OAAO;AAClE,WAAG,WAAW;AACd,WAAG,iBAAiB,SAAS,KAAK,wBAAwB,KAAK,IAAI,CAAC;AAAA,MACpF,CAAa;AAAA,IACJ;AAGD,QAAI,CAAC,KAAK,YAAY;AAClB;AAAA,IACH;AAQD,SAAK,cAAc,oBAAoB,EAAE,iBAAiB,SAAS,KAAK,oBAAoB,KAAK,IAAI,CAAC;AAStG,SAAK,iBAAiB,eAAe,EAAE;AAAA,MAAQ,CAAC,OAC5C,GAAG,iBAAiB,SAAS,KAAK,cAAc,KAAK,IAAI,CAAC;AAAA,IACtE;AACQ,SAAK,iBAAiB,oBAAoB,EAAE;AAAA,MAAQ,CAAC,OACjD,GAAG,iBAAiB,SAAS,KAAK,gBAAgB,KAAK,IAAI,CAAC;AAAA,IACxE;AAGQ,QAAI,cAAc,KAAK,cAAc,iDAAiD;AACtF,iBAAa,iBAAiB,UAAU,KAAK,6BAA6B,KAAK,IAAI,CAAC;AAMpF,SAAK,iBAAiB,eAAe,EAAE;AAAA,MAAQ,CAAC,OAC5C,GAAG,iBAAiB,SAAS,KAAK,gCAAgC,KAAK,IAAI,CAAC;AAAA,IACxF;AACQ,SAAK,iBAAiB,qBAAqB,EAAE;AAAA,MAAQ,CAAC,OAClD,GAAG,iBAAiB,SAAS,KAAK,qCAAqC,KAAK,IAAI,CAAC;AAAA,IAC7F;AAAA,EACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuED,MAAM,gBAAgB,OAAO;AACzB,UAAM,eAAc;AACpB,UAAM,KAAK,UAAU,KAAK;AAC1B,UAAM,KAAK,MAAM,cAAc,QAAQ,eAAe;AACtD,UAAM,SAAS,KAAK,OAAO,QAAQ,IAAI,GAAG,QAAQ,QAAQ;AAC1D,WAAO,OAAO;EACjB;AAAA;AAAA;AAAA,EAKD,MAAM,QAAQ,OAAO;AACjB,UAAM,OAAO,WAAW,iBAAiB,KAAK;AAC9C,QAAI,KAAK,UAAU,QAAQ;AACvB,YAAM,MAAM,MAAM;AAClB,YAAM,KAAK,IAAI,QAAQ,WAAW,MAAM,IAAI,QAAQ,+BAA+B;AACnF,UAAI,CAAC,IAAI;AACL,eAAO,KAAK,0BAA0B,IAAI;AAC1C;AAAA,MACH;AACD,aAAO,KAAK,aAAa,OAAO,KAAK,QAAQ,GAAG,QAAQ,QAAQ;AAAA,IAC5E,OAAe;AACH,UAAI,KAAK,SAAS,oBAAoB;AAClC,cAAM,cAAc,MAAM,SAAS,KAAK,IAAI;AAE5C,cAAM,OAAO,MAAM,SAAS,YAAY,OAAO,IAAI;AACnD,aAAK,OAAO,KAAK;AACjB,cAAM,UAAU,MAAM,KAAK,0BAA0B,KAAK,UAAU,MAAM,IAAI;AAC9E,YAAI,YAAY;AAAO;AAGvB,YAAI,CAAC,MAAM,eAAe,SAAS,KAAK,IAAI;AAAG;AAG/C,cAAMF,YAAW;AACjB,YAAI,CAACA,aAAYA,UAAS;AAAY;AAGtC,cAAM,eAAe,CAAC,CAACA,UAAS;AAChC,eAAO,MAAM,KAAK,gBAAgB,OAAO;AAAA,UACrC,MAAM,eAAe,MAAM,mBAAmB,aAAa,MAAM,mBAAmB;AAAA,UACpF,oBAAoB,eAAeA,UAAS,OAAOA,UAAS;AAAA,UAC5D,MAAMA,UAAS;AAAA,UACf,YAAYA,UAAS;AAAA,UACrB,KAAKA,UAAS,OAAO;AAAA,UACrB,OAAO;AAAA,YACH,CAAC,GAAG,UAAU,SAAS,EAAE,GAAG;AAAA,cACxB,CAAC,GAAG,UAAU,MAAM,gCAAgC,EAAE,GAAG,KAAK;AAAA,YACjE;AAAA,UACJ;AAAA,QACrB,CAAiB;AAAA,MACjB,OAAmB;AACH,eAAO,MAAM,QAAQ,KAAK;AAAA,MAC7B;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,aAAa,OAAO;AAChB,UAAM,MAAM,MAAM;AAClB,UAAM,WAAW,IAAI,QAAQ,SAAS;AACtC,QAAI,UAAU,KAAK,SAAS;AAC5B,QAAI,CAAC,UAAU;AACX,YAAM,KAAK,IAAI,QAAQ,eAAe;AACtC,YAAM,SAAS,KAAK,SAAS,QAAQ,IAAI,GAAG,QAAQ,QAAQ;AAG5D,gBAAU,OAAO;AAAA,IACpB;AACD,UAAM,KAAK,IAAI,WAAW;AAAA,MACtB,MAAM;AAAA,MACN;AAAA,MACA,UAAU,OAAO,SAAS;AAEtB,YAAI,MAAM;AAEV,cAAM,cAAc,IAAI,QAAQ,eAAe;AAC/C,YAAI,oBAAoB,YAAY,iBAAiB,OAAO;AAC5D,YAAI,kBAAkB,kBAAkB,CAAC,EAAE,SAAS;AACpD,YAAI,oBAAoB,MAAM;AAC1B,4BAAkB,CAAC,EAAE,QAAQ;AAAA,QAChC;AAQD,eAAO,KAAK,UAAU,KAAK;AAAA,MAC9B;AAAA,MACD,KAAK,KAAK,SAAS,MAAM;AAAA,MACzB,MAAM,KAAK,SAAS,OAAO;AAAA,IACvC,CAAS;AACD,WAAO,GAAG;EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqDD,MAAM,aAAa,OAAO;AAWtB,WAAO,MAAM,MAAM,aAAa,KAAK;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2ED,MAAM,aAAaE,UAAS;AAExB,UAAM,eAAe,KAAK,QAAQ,CAAC,EAAE,cAAc,wBAAwB;AAC3E,UAAM,WAAW,IAAI,IAAIA,SAAQ,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC;AACjD,UAAM,aAAa,MAAM,KAAK,aAAa,QAAQ,EAAE,OAAO,CAACG,UAAS,SAAS,IAAIA,MAAK,QAAQ,QAAQ,CAAC;AAGzG,UAAM,WAAW,KAAK,OAAO,QAAQ;AACrC,UAAM,UAAU;AAChB,QAAI,WAAW;AACf,QAAI,aAAa,KAAK,MAAM,aAAa,gBAAgB,aAAa,SAAS,CAAC,EAAE,eAAe,EAAE;AACnG,UAAM,SAAS,KAAK,IAAI,KAAK,KAAK,WAAW,WAAW,SAAS,GAAG,CAAC;AACrE,QAAI,WAAW;AAAG,iBAAW,UAAU;AAGvC,UAAM,KAAK,iBAAiB,cAAc,UAAU,QAAQ,UAAU,UAAU;AAGhF,UAAM,UAAU,WAAW,IAAI,CAAC,OAAO,KAAK,aAAa,EAAE,CAAC;AAC5D,WAAO,QAAQ,IAAI,OAAO;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoED,aAAa,OAAO;AAChB,UAAM,MAAM,MAAM;AAClB,UAAM,KAAK,IAAI,QAAQ,WAAW,MAAM,IAAI,QAAQ,+BAA+B;AACnF,UAAM,cAAc;AAAA,MAChB;AAAA,MACA,KAAK,UAAU,EAAE,OAAO,QAAQ,OAAO,GAAG,QAAQ,OAAO,QAAQ,GAAG,QAAQ,SAAQ,CAAE;AAAA,IAClG;AAAA,EACK;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,MAAM,aAAa,OAAO,QAAQ,QAAQ;AACtC,QAAI,CAAC,KAAK,YAAY,KAAK;AAAa,aAAO;AAE/C,UAAM,KAAK,UAAU,KAAK;AAI1B,UAAMH,WAAU,KAAK,SAAS,QAAQ,IAAI,CAAC,WAAW,OAAO,SAAS,KAAK,CAAC;AAC5E,IAAAA,SAAQ,KAAK,CAAC,GAAG,MAAM,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAE9C,UAAM,WAAWA,SAAQ,UAAU,CAAC,MAAM,EAAE,QAAQ,MAAM,GACtD,WAAWA,SAAQ,UAAU,CAAC,MAAM,EAAE,QAAQ,MAAM;AAExD,QAAI,YAAY,UAAU;AACtB,aAAO,KAAK,kCAAkC,IAAI;AAClD;AAAA,IACH;AAGD,UAAM,CAAC,KAAK,IAAIA,SAAQ,OAAO,UAAU,CAAC;AAC1C,IAAAA,SAAQ,OAAO,UAAU,GAAG,KAAK;AAGjC,IAAAA,SAAQ,QAAQ,CAAC,MAAO,EAAE,SAAS,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,EAAG;AACjE,QAAI,cAAc;AAClB,UAAM,UAAU,CAAA;AAChB,eAAW,UAAUA,UAAS;AAC1B,YAAM,IAAI,OAAO;AACjB,cAAQ,KAAK,EAAE,KAAK,OAAO,KAAK,QAAQ,GAAG,OAAO,CAAC,aAAa,cAAc,IAAI,CAAC,EAAG,CAAA;AACtF,oBAAc,cAAc;AAAA,IAC/B;AACD,WAAO,KAAK,SAAS,wBAAwB,eAAe,OAAO;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,MAAM,oBAAoB,OAAO;AAC7B,UAAM,eAAc;AACpB,UAAM,gBAAe;AAErB,QAAI,CAAC,KAAK,YAAY,KAAK;AAAa,aAAO;AAG/C,UAAM,KAAK,UAAU,KAAK;AAE1B,UAAMA,WAAU,KAAK,SAAS,QAAQ,IAAI,CAAC,WAAW,OAAO,SAAS,KAAK,CAAC;AAE5E,UAAM,UAAUA,SAAQ,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,QAAQ,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,GAAI,EAAC;AAE1F,WAAO,KAAK,SAAS,wBAAwB,eAAe,OAAO;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA,EAKD,MAAM,gBAAgB,OAAO;AACzB,UAAM,eAAc;AACpB,UAAM,gBAAe;AAGrB,UAAM,KAAK,UAAU,KAAK;AAE1B,UAAM,SAAS,MAAM,OAAO,QAAQ,+BAA+B;AACnE,UAAM,KAAK,OAAO,QAAQ;AAC1B,UAAM,SAAS,KAAK,SAAS,QAAQ,IAAI,EAAE;AAE3C,UAAM,OAAO,YAAY,OAAO,IAAI;AACpC,UAAM,MAAM,OAAO,OAAO,GAAG,OAAO,EAAE,KAAK,CAAC,QAAQ,IAAI,QAAQ,OAAO,IAAI;AAC3E,QAAI;AAAK,aAAO,IAAI,OAAO,MAAM,EAAE,OAAO,KAAI,CAAE;AAEjC,UAAM,eAAe,KAAK,MAAM;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA,EAKD,oBAAoB,OAAO,MAAM;AAC7B,UAAM,eAAc;AACpB,UAAM,gBAAe;AAErB,UAAM,eAAe,SAAS,cAAc,UAAU;AACtD,iBAAa,OAAO;AACpB,iBAAa,YAAY,KAAK,OAAO;AACrC,UAAM,SAAS,KAAK,cAAc,qBAAqB;AACvD,YAAQ,gBAAgB,YAAY;AACpC,SAAK,UAAU;EAClB;AAAA,EAED,eAAe,YAAY;AACvB,UAAM,OAAO,MAAM,eAAe,UAAU;AAE5C,QAAI,KAAK,eAAe;AAAW,WAAK,cAAc;AACtD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,MAAM,cAAc,OAAO;AACvB,UAAM,eAAc;AACpB,UAAM,cAAc,MAAM,cAAc,QAAQ,eAAe;AAC/D,UAAM,SAAS,KAAK,SAAS,QAAQ,IAAI,YAAY,QAAQ,QAAQ;AACrE,QAAI,eAAe,MAAM,iBAAiB,2BAA2B,QAAQ,IAAI;AAEjF,QAAI,YAAY,wBAAwB;AACxC,QAAI,qBAAqB;AAAA,MACrB;AAAA,MACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,gCAAgC;AAAA,IAC5F;AACQ,QAAI,aAAa,oBAAoB;AACjC,qBAAe,MAAM,SAAS,kBAAkB;AAAA,IACnD;AAED,QAAI,cAAc;AACd,mBAAa,MAAM,OAAO,IAAI;AAAA,IAC1C,OAAe;AACH,aAAO,KAAK,qCAAqC,IAAI;AAAA,IACxD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,MAAM,wBAAwB,OAAO;AACjC,UAAM,eAAc;AACpB,UAAM,KAAK,OAAO,EAAE,cAAc,MAAM,eAAe,KAAI,CAAE;AAC7D,QAAI,MAAM,eAAe;AACrB,YAAM,cAAc,WAAW;AAAA,IAC3C,OAAe;AACH,YAAM,OAAO,WAAW;AAAA,IAC3B;AAED,UAAM,iBAAiB,SAAS,gBAAgB,KAAK,QAAQ;AAG7D,QAAI,mBAAmB,UAAU,iBAAiB;AAC9C,YAAM,KAAK,SAAS,QAAQ,UAAU,WAAW,UAAU,MAAM,gBAAgB,UAAU,eAAe;AAAA,IAC7G;AACD,UAAM,cAAc,KAAK;AACzB,UAAMQ,MAAI,iBAAiB,WAAW;AACtC,QAAI,MAAM,eAAe;AACrB,YAAM,cAAc,WAAW;AAAA,IAC3C,OAAe;AACH,YAAM,OAAO,WAAW;AAAA,IAC3B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,MAAM,gCAAgC,OAAO;AACzC,UAAM,eAAc;AACpB,UAAM,KAAK,OAAO,EAAE,cAAc,MAAM,eAAe,KAAI,CAAE;AAC7D,QAAI,MAAM,eAAe;AACrB,YAAM,cAAc,WAAW;AAAA,IAC3C,OAAe;AACH,YAAM,OAAO,WAAW;AAAA,IAC3B;AAED,UAAM,iBAAiB,SAAS,gBAAgB,KAAK,QAAQ;AAG7D,QAAI,mBAAmB,UAAU,iBAAiB;AAC9C,YAAM,KAAK,SAAS,QAAQ,UAAU,WAAW,UAAU,MAAM,gBAAgB,UAAU,eAAe;AAAA,IAC7G;AACD,UAAM,cAAc,KAAK;AACzB,UAAMA,MAAI,aAAa,WAAW;AAClC,QAAI,MAAM,eAAe;AACrB,YAAM,cAAc,WAAW;AAAA,IAC3C,OAAe;AACH,YAAM,OAAO,WAAW;AAAA,IAC3B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,qCAAqC,OAAO;AAC9C,UAAM,eAAc;AACpB,UAAM,KAAK,OAAO,EAAE,cAAc,MAAM,eAAe,KAAI,CAAE;AAC7D,QAAI,MAAM,eAAe;AACrB,YAAM,cAAc,WAAW;AAAA,IAC3C,OAAe;AACH,YAAM,OAAO,WAAW;AAAA,IAC3B;AAED,UAAM,iBAAiB,SAAS,gBAAgB,KAAK,QAAQ;AAG7D,QAAI,mBAAmB,UAAU,iBAAiB;AAC9C,YAAM,KAAK,SAAS,QAAQ,UAAU,WAAW,UAAU,MAAM,gBAAgB,UAAU,eAAe;AAAA,IAC7G;AACD,UAAM,cAAc,KAAK;AACzB,UAAMA,MAAI,4BAA4B,WAAW;AACjD,QAAI,MAAM,eAAe;AACrB,YAAM,cAAc,WAAW;AAAA,IAC3C,OAAe;AACH,YAAM,OAAO,WAAW;AAAA,IAC3B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,MAAM,6BAA6B,OAAO;AACtC,UAAM,eAAc;AACpB,UAAM,SAAS,MAAM;AACrB,UAAM,QAAQ,OAAO;AACH,WAAO;AACzB,UAAM,cAAc,MAAM,cAAc,QAAQ,eAAe;AAC/D,UAAM,SAAS,KAAK,SAAS,QAAQ,IAAI,YAAY,QAAQ,QAAQ;AAErE,gBAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,gCAAgC,IAAI,KAAK;AAE7G,UAAM,KAAK,UAAU,KAAK;AAE1B,UAAM,OAAO,OAAO;AAAA,MAChB,OAAO;AAAA,QACH,CAAC,GAAG,UAAU,SAAS,EAAE,GAAG;AAAA,UACxB,CAAC,GAAG,UAAU,MAAM,gCAAgC,EAAE,GAAG,SAAS;AAAA,QACrE;AAAA,MACJ;AAAA,IACb,CAAS;AAAA,EACJ;AAAA;AAGL;AAhzB+D;AAAxD,IAAM,4BAAN;ACAA,MAAM,8BAAN,MAAM,oCAAmC,gBAAgB;AAAA;AAAA,EAE5D,WAAW,iBAAiB;AACxB,WAAO,QAAQ,MAAM,YAAY,MAAM,gBAAgB;AAAA,MACnD,SAAS,CAAC,SAAS,qBAAqB,GAAG,UAAU,SAAS,oBAAoB;AAAA,MAClF,UAAU,WAAW,UAAU,SAAS;AAAA,MACxC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,eAAe;AAAA,MACf,gBAAgB,MAAM,0BAA0B;AAAA;AAAA;AAAA,MAGhD,UAAU;AAAA;AAAA,QAEN;AAAA,UACI,cAAc;AAAA,UACd,cAAc;AAAA,QACjB;AAAA,MACJ;AAAA,MACD,SAAS,CAAC,gBAAgB;AAAA,MAC1B,WAAW;AAAA,IACvB,CAAS;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcD,MAAM,QAAQT,WAAU,IAAI;AACxB,UAAM,UAAU,MAAM,MAAM,QAAQA,QAAO;AAC3C,YAAQ,kBAAkB,MAAM,WAAW,WAAW,KAAK,OAAO,aAAa;AAAA,MAC3E,OAAO;AAAA,MACP,SAAS,KAAK,OAAO;AAAA,IACjC,CAAS;AACD,UAAMC,WAAU,MAAM,QAAQ;AAAA,MAC1B,KAAK,SAAS,QAAQ,IAAI,OAAO,WAAW;AACxC,cAAM,MAAM,MAAM,iBAAiB,kBAAkB,MAAM;AAC3D,YAAI,KAAK,QAAQ;AACb,iBAAO,IAAI;AAAA,QACd;AAAA,MACjB,CAAa;AAAA,IACb;AACQ,IAAAA,SAAQ,KAAK,CAAC,GAAG,MAAM,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAG9C,QAAI,UAAU,QAAQ,MAAM,YAAY,SAAS;AAAA,MAC7C,SAASA;AAAA,MACT,aAAa,OAAO,QAAQ,MAAM,kBAAkB,EAAE,OAAO,CAAC,KAAK,MAAM;AACrE,YAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE;AACjB,eAAO;AAAA,MACV,GAAE,EAAE;AAAA,MACL,eAAe,MAAM;AAAA,MACrB,iBAAiB,MAAM,KAAK,KAAK,MAAM,KAAI,CAAE;AAAA,IACzD,CAAS;AAED,UAAM,iBAAiB,SAAS,gBAAgB,KAAK,QAAQ;AAG7D,QAAI,mBAAmB,UAAU,kBAAkB;AAC/C,YAAM,KAAK,SAAS;AAAA,QAChB,UAAU;AAAA,QACV,UAAU,MAAM;AAAA,QAChB,UAAU;AAAA,MAC1B;AAAA,IACS;AACD,YAAQ,gBAAgB,KAAK,SAAS,QAAQ,UAAU,WAAW,UAAU,MAAM,sBAAsB;AACzG,YAAQ,eAAe;AACvB,YAAQ,YAAY,UAAU;AAC9B,YAAQ,WACJ,OAAO,KAAK,GAAG,UAAU,SAAS,IAAI,iBAAiB,EAAE,IACzD,MACA,OAAO,KAAK,GAAG,UAAU,SAAS,IAAI,WAAW,EAAE;AAGvD,cAAU,QAAQ,MAAM,YAAY,SAAS,UAAU,KAAK,SAAS,KAAK,CAAC;AAC3E,YAAQ,WAAW,CAAC,KAAK;AACzB,YAAQ,OAAO,KAAK,SAAS;AAC7B,YAAQ,QAAQ,KAAK,SAAS;AAI9B,SAAK,UAAU,KAAK,SAAS,UAAU,KAAK,KAAK,EAAE,IAC7C,KAAK,SAAS,UAAU,KAAK,KAAK,EAAE,MAAM,MAAM,2BAA2B,SAC3E,KAAK,SAAS,UAAU,KAAK,KAAK,EAAE,MAAM,MAAM,2BAA2B,WAC3E,KAAK;AAEX,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,kBAAkB,IAAI;AAClB,UAAM,kBAAkB,EAAE;AAE1B,UAAM,OAAO,GAAG,CAAC;AAEjB,QAAI,KAAK,SAAS;AAKd,WAAK,iBAAiB,+BAA+B,EAAE,QAAQ,CAAC,OAAO;AACnE,WAAG,WAAW;AACd,WAAG,iBAAiB,SAAS,KAAK,wBAAwB,KAAK,IAAI,CAAC;AAAA,MACpF,CAAa;AAAA,IACJ;AAGD,QAAI,CAAC,KAAK,YAAY;AAClB;AAAA,IACH;AAQD,SAAK,cAAc,oBAAoB,EAAE,iBAAiB,SAAS,KAAK,oBAAoB,KAAK,IAAI,CAAC;AAEtG,SAAK,iBAAiB,mBAAmB,EAAE;AAAA,MAAQ,CAAC,OAChD,GAAG,iBAAiB,SAAS,KAAK,gBAAgB,KAAK,IAAI,CAAC;AAAA,IACxE;AASQ,SAAK,iBAAiB,eAAe,EAAE;AAAA,MAAQ,CAAC,OAC5C,GAAG,iBAAiB,SAAS,KAAK,cAAc,KAAK,IAAI,CAAC;AAAA,IACtE;AACQ,SAAK,iBAAiB,oBAAoB,EAAE;AAAA,MAAQ,CAAC,OACjD,GAAG,iBAAiB,SAAS,KAAK,gBAAgB,KAAK,IAAI,CAAC;AAAA,IACxE;AAGQ,QAAI,cAAc,KAAK,cAAc,iDAAiD;AACtF,iBAAa,iBAAiB,UAAU,KAAK,6BAA6B,KAAK,IAAI,CAAC;AAAA,EAIvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuED,MAAM,gBAAgB,OAAO;AACzB,UAAM,eAAc;AACpB,UAAM,KAAK,UAAU,KAAK;AAC1B,UAAM,KAAK,MAAM,cAAc,QAAQ,eAAe;AACtD,UAAM,SAAS,KAAK,OAAO,QAAQ,IAAI,GAAG,QAAQ,QAAQ;AAC1D,WAAO,OAAO;EACjB;AAAA;AAAA;AAAA,EAKD,MAAM,QAAQ,OAAO;AACjB,UAAM,OAAO,WAAW,iBAAiB,KAAK;AAC9C,QAAI,KAAK,UAAU,QAAQ;AACvB,YAAM,MAAM,MAAM;AAClB,YAAM,KAAK,IAAI,QAAQ,WAAW,MAAM,IAAI,QAAQ,+BAA+B;AACnF,UAAI,CAAC,IAAI;AACL,eAAO,KAAK,0BAA0B,IAAI;AAC1C;AAAA,MACH;AACD,aAAO,KAAK,aAAa,OAAO,KAAK,QAAQ,GAAG,QAAQ,QAAQ;AAAA,IAC5E,OAAe;AACH,UAAI,KAAK,SAAS,oBAAoB;AAClC,cAAM,cAAc,MAAM,SAAS,KAAK,IAAI;AAE5C,cAAM,OAAO,MAAM,SAAS,YAAY,OAAO,IAAI;AACnD,aAAK,OAAO,KAAK;AACjB,cAAM,UAAU,MAAM,KAAK,0BAA0B,KAAK,UAAU,MAAM,IAAI;AAC9E,YAAI,YAAY;AAAO;AAGvB,YAAI,CAAC,MAAM,eAAe,SAAS,KAAK,IAAI;AAAG;AAG/C,cAAMF,YAAW;AACjB,YAAI,CAACA,aAAYA,UAAS;AAAY;AAGtC,cAAM,eAAe,CAAC,CAACA,UAAS;AAChC,eAAO,MAAM,KAAK,gBAAgB,OAAO;AAAA,UACrC,MAAM,eAAe,MAAM,mBAAmB,aAAa,MAAM,mBAAmB;AAAA,UACpF,oBAAoB,eAAeA,UAAS,OAAOA,UAAS;AAAA,UAC5D,MAAMA,UAAS;AAAA,UACf,YAAYA,UAAS;AAAA,UACrB,KAAKA,UAAS,OAAO;AAAA,UACrB,OAAO;AAAA,YACH,CAAC,GAAG,UAAU,SAAS,EAAE,GAAG;AAAA,cACxB,CAAC,GAAG,UAAU,MAAM,gCAAgC,EAAE,GAAG,KAAK;AAAA,YACjE;AAAA,UACJ;AAAA,QACrB,CAAiB;AAAA,MACjB,OAAmB;AACH,eAAO,MAAM,QAAQ,KAAK;AAAA,MAC7B;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,aAAa,OAAO;AAChB,UAAM,MAAM,MAAM;AAClB,UAAM,WAAW,IAAI,QAAQ,SAAS;AACtC,QAAI,UAAU,KAAK,SAAS;AAC5B,QAAI,CAAC,UAAU;AACX,YAAM,KAAK,IAAI,QAAQ,eAAe;AACtC,YAAM,SAAS,KAAK,SAAS,QAAQ,IAAI,GAAG,QAAQ,QAAQ;AAG5D,gBAAU,OAAO;AAAA,IACpB;AACD,UAAM,KAAK,IAAI,WAAW;AAAA,MACtB,MAAM;AAAA,MACN;AAAA,MACA,UAAU,OAAO,SAAS;AAEtB,YAAI,MAAM;AAEV,cAAM,cAAc,IAAI,QAAQ,eAAe;AAC/C,YAAI,oBAAoB,YAAY,iBAAiB,OAAO;AAC5D,YAAI,kBAAkB,kBAAkB,CAAC,EAAE,SAAS;AACpD,YAAI,oBAAoB,MAAM;AAC1B,4BAAkB,CAAC,EAAE,QAAQ;AAAA,QAChC;AAQD,eAAO,KAAK,UAAU,KAAK;AAAA,MAC9B;AAAA,MACD,KAAK,KAAK,SAAS,MAAM;AAAA,MACzB,MAAM,KAAK,SAAS,OAAO;AAAA,IACvC,CAAS;AACD,WAAO,GAAG;EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqDD,MAAM,aAAa,OAAO;AAWtB,WAAO,MAAM,MAAM,aAAa,KAAK;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2ED,MAAM,aAAaE,UAAS;AAExB,UAAM,eAAe,KAAK,QAAQ,CAAC,EAAE,cAAc,wBAAwB;AAC3E,UAAM,WAAW,IAAI,IAAIA,SAAQ,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC;AACjD,UAAM,aAAa,MAAM,KAAK,aAAa,QAAQ,EAAE,OAAO,CAACG,UAAS,SAAS,IAAIA,MAAK,QAAQ,QAAQ,CAAC;AAGzG,UAAM,WAAW,KAAK,OAAO,QAAQ;AACrC,UAAM,UAAU;AAChB,QAAI,WAAW;AACf,QAAI,aAAa,KAAK,MAAM,aAAa,gBAAgB,aAAa,SAAS,CAAC,EAAE,eAAe,EAAE;AACnG,UAAM,SAAS,KAAK,IAAI,KAAK,KAAK,WAAW,WAAW,SAAS,GAAG,CAAC;AACrE,QAAI,WAAW;AAAG,iBAAW,UAAU;AAGvC,UAAM,KAAK,iBAAiB,cAAc,UAAU,QAAQ,UAAU,UAAU;AAGhF,UAAM,UAAU,WAAW,IAAI,CAAC,OAAO,KAAK,aAAa,EAAE,CAAC;AAC5D,WAAO,QAAQ,IAAI,OAAO;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoED,aAAa,OAAO;AAChB,UAAM,MAAM,MAAM;AAClB,UAAM,KAAK,IAAI,QAAQ,WAAW,MAAM,IAAI,QAAQ,+BAA+B;AACnF,UAAM,cAAc;AAAA,MAChB;AAAA,MACA,KAAK,UAAU,EAAE,OAAO,QAAQ,OAAO,GAAG,QAAQ,OAAO,QAAQ,GAAG,QAAQ,SAAQ,CAAE;AAAA,IAClG;AAAA,EACK;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,MAAM,aAAa,OAAO,QAAQ,QAAQ;AACtC,QAAI,CAAC,KAAK,YAAY,KAAK;AAAa,aAAO;AAE/C,UAAM,KAAK,UAAU,KAAK;AAI1B,UAAMH,WAAU,KAAK,SAAS,QAAQ,IAAI,CAAC,WAAW,OAAO,SAAS,KAAK,CAAC;AAC5E,IAAAA,SAAQ,KAAK,CAAC,GAAG,MAAM,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAE9C,UAAM,WAAWA,SAAQ,UAAU,CAAC,MAAM,EAAE,QAAQ,MAAM,GACtD,WAAWA,SAAQ,UAAU,CAAC,MAAM,EAAE,QAAQ,MAAM;AAExD,QAAI,YAAY,UAAU;AACtB,aAAO,KAAK,kCAAkC,IAAI;AAClD;AAAA,IACH;AAGD,UAAM,CAAC,KAAK,IAAIA,SAAQ,OAAO,UAAU,CAAC;AAC1C,IAAAA,SAAQ,OAAO,UAAU,GAAG,KAAK;AAGjC,IAAAA,SAAQ,QAAQ,CAAC,MAAO,EAAE,SAAS,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,EAAG;AACjE,QAAI,cAAc;AAClB,UAAM,UAAU,CAAA;AAChB,eAAW,UAAUA,UAAS;AAC1B,YAAM,IAAI,OAAO;AACjB,cAAQ,KAAK,EAAE,KAAK,OAAO,KAAK,QAAQ,GAAG,OAAO,CAAC,aAAa,cAAc,IAAI,CAAC,EAAG,CAAA;AACtF,oBAAc,cAAc;AAAA,IAC/B;AACD,WAAO,KAAK,SAAS,wBAAwB,eAAe,OAAO;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,MAAM,oBAAoB,OAAO;AAC7B,UAAM,eAAc;AACpB,UAAM,gBAAe;AAErB,QAAI,CAAC,KAAK,YAAY,KAAK;AAAa,aAAO;AAG/C,UAAM,KAAK,UAAU,KAAK;AAE1B,UAAMA,WAAU,KAAK,SAAS,QAAQ,IAAI,CAAC,WAAW,OAAO,SAAS,KAAK,CAAC;AAE5E,UAAM,UAAUA,SAAQ,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,QAAQ,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,GAAI,EAAC;AAE1F,WAAO,KAAK,SAAS,wBAAwB,eAAe,OAAO;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA,EAKD,MAAM,gBAAgB,OAAO;AACzB,UAAM,eAAc;AACpB,UAAM,gBAAe;AAGrB,UAAM,KAAK,UAAU,KAAK;AAE1B,UAAM,SAAS,MAAM,OAAO,QAAQ,+BAA+B;AACnE,UAAM,KAAK,OAAO,QAAQ;AAC1B,UAAM,SAAS,KAAK,SAAS,QAAQ,IAAI,EAAE;AAE3C,UAAM,OAAO,YAAY,OAAO,IAAI;AACpC,UAAM,MAAM,OAAO,OAAO,GAAG,OAAO,EAAE,KAAK,CAAC,QAAQ,IAAI,QAAQ,OAAO,IAAI;AAC3E,QAAI;AAAK,aAAO,IAAI,OAAO,MAAM,EAAE,OAAO,KAAI,CAAE;AAEjC,UAAM,eAAe,KAAK,MAAM;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA,EAKD,oBAAoB,OAAO,MAAM;AAC7B,UAAM,eAAc;AACpB,UAAM,gBAAe;AAErB,UAAM,eAAe,SAAS,cAAc,UAAU;AACtD,iBAAa,OAAO;AACpB,iBAAa,YAAY,KAAK,OAAO;AACrC,UAAM,SAAS,KAAK,cAAc,qBAAqB;AACvD,YAAQ,gBAAgB,YAAY;AACpC,SAAK,UAAU;EAClB;AAAA,EAED,eAAe,YAAY;AACvB,UAAM,OAAO,MAAM,eAAe,UAAU;AAE5C,QAAI,KAAK,eAAe;AAAW,WAAK,cAAc;AACtD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,MAAM,cAAc,OAAO;AACvB,UAAM,eAAc;AACpB,UAAM,cAAc,MAAM,cAAc,QAAQ,eAAe;AAC/D,UAAM,SAAS,KAAK,SAAS,QAAQ,IAAI,YAAY,QAAQ,QAAQ;AACrE,QAAI,eAAe,MAAM,iBAAiB,2BAA2B,QAAQ,IAAI;AAEjF,QAAI,YAAY,wBAAwB;AACxC,QAAI,qBAAqB;AAAA,MACrB;AAAA,MACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,gCAAgC;AAAA,IAC5F;AACQ,QAAI,aAAa,oBAAoB;AACjC,qBAAe,MAAM,SAAS,kBAAkB;AAAA,IACnD;AAED,QAAI,cAAc;AACd,mBAAa,MAAM,OAAO,IAAI;AAAA,IAC1C,OAAe;AACH,aAAO,KAAK,qCAAqC,IAAI;AAAA,IACxD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,MAAM,wBAAwB,OAAO;AACjC,UAAM,eAAc;AACpB,UAAM,KAAK,OAAO,EAAE,cAAc,MAAM,eAAe,KAAI,CAAE;AAC7D,QAAI,MAAM,eAAe;AACrB,YAAM,cAAc,WAAW;AAAA,IAC3C,OAAe;AACH,YAAM,OAAO,WAAW;AAAA,IAC3B;AAED,UAAM,iBAAiB,SAAS,gBAAgB,KAAK,QAAQ;AAG7D,QAAI,mBAAmB,UAAU,kBAAkB;AAC/C,YAAM,KAAK,SAAS;AAAA,QAChB,UAAU;AAAA,QACV,UAAU,MAAM;AAAA,QAChB,UAAU;AAAA,MAC1B;AAAA,IACS;AACD,UAAM,cAAc,KAAK;AACzB,UAAMQ,MAAI,kBAAkB,WAAW;AACvC,QAAI,MAAM,eAAe;AACrB,YAAM,cAAc,WAAW;AAAA,IAC3C,OAAe;AACH,YAAM,OAAO,WAAW;AAAA,IAC3B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,MAAM,6BAA6B,OAAO;AACtC,UAAM,eAAc;AACpB,UAAM,SAAS,MAAM;AACrB,UAAM,QAAQ,OAAO;AACH,WAAO;AACzB,UAAM,cAAc,MAAM,cAAc,QAAQ,eAAe;AAC/D,UAAM,SAAS,KAAK,SAAS,QAAQ,IAAI,YAAY,QAAQ,QAAQ;AAErE,gBAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,gCAAgC,IAAI,KAAK;AAE7G,UAAM,KAAK,UAAU,KAAK;AAE1B,UAAM,OAAO,OAAO;AAAA,MAChB,OAAO;AAAA,QACH,CAAC,GAAG,UAAU,SAAS,EAAE,GAAG;AAAA,UACxB,CAAC,GAAG,UAAU,MAAM,gCAAgC,EAAE,GAAG,SAAS;AAAA,QACrE;AAAA,MACJ;AAAA,IACb,CAAS;AAAA,EACJ;AAAA;AAGL;AAxvBgE;AAAzD,IAAM,6BAAN;ACAA,MAAM,gCAAN,MAAM,sCAAqC,gBAAgB;AAAA;AAAA,EAE9D,WAAW,iBAAiB;AACxB,WAAO,QAAQ,MAAM,YAAY,MAAM,gBAAgB;AAAA,MACnD,SAAS,CAAC,SAAS,qBAAqB,GAAG,UAAU,SAAS,oBAAoB;AAAA,MAClF,UAAU,WAAW,UAAU,SAAS;AAAA,MACxC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,eAAe;AAAA,MACf,gBAAgB,MAAM,0BAA0B;AAAA;AAAA;AAAA,MAGhD,UAAU;AAAA;AAAA,QAEN;AAAA,UACI,cAAc;AAAA,UACd,cAAc;AAAA,QACjB;AAAA,MACJ;AAAA,MACD,SAAS,CAAC,gBAAgB;AAAA,MAC1B,WAAW;AAAA,IACvB,CAAS;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcD,MAAM,QAAQT,WAAU,IAAI;AACxB,UAAM,UAAU,MAAM,MAAM,QAAQA,QAAO;AAC3C,YAAQ,kBAAkB,MAAM,WAAW,WAAW,KAAK,OAAO,aAAa;AAAA,MAC3E,OAAO;AAAA,MACP,SAAS,KAAK,OAAO;AAAA,IACjC,CAAS;AACD,UAAMC,WAAU,MAAM,QAAQ;AAAA,MAC1B,KAAK,SAAS,QAAQ,IAAI,OAAO,WAAW;AACxC,cAAM,MAAM,MAAM,iBAAiB,kBAAkB,MAAM;AAC3D,YAAI,KAAK,QAAQ;AACb,iBAAO,IAAI;AAAA,QACd;AAAA,MACjB,CAAa;AAAA,IACb;AACQ,IAAAA,SAAQ,KAAK,CAAC,GAAG,MAAM,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAG9C,QAAI,UAAU,QAAQ,MAAM,YAAY,SAAS;AAAA,MAC7C,SAASA;AAAA,MACT,aAAa,OAAO,QAAQ,MAAM,kBAAkB,EAAE,OAAO,CAAC,KAAK,MAAM;AACrE,YAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE;AACjB,eAAO;AAAA,MACV,GAAE,EAAE;AAAA,MACL,eAAe,MAAM;AAAA,MACrB,iBAAiB,MAAM,KAAK,KAAK,MAAM,KAAI,CAAE;AAAA,IACzD,CAAS;AAED,UAAM,iBAAiB,SAAS,gBAAgB,KAAK,QAAQ;AAG7D,QAAI,mBAAmB,UAAU,oBAAoB;AACjD,YAAM,KAAK,SAAS;AAAA,QAChB,UAAU;AAAA,QACV,UAAU,MAAM;AAAA,QAChB,UAAU;AAAA,MAC1B;AAAA,IACS;AACD,YAAQ,gBAAgB,KAAK,SAAS,QAAQ,UAAU,WAAW,UAAU,MAAM,sBAAsB;AACzG,YAAQ,eAAe,KAAK,SAAS,QAAQ,UAAU,WAAW,UAAU,MAAM,sBAAsB;AACxG,YAAQ,YAAY,UAAU;AAC9B,YAAQ,WACJ,OAAO,KAAK,GAAG,UAAU,SAAS,IAAI,iBAAiB,EAAE,IACzD,MACA,OAAO,KAAK,GAAG,UAAU,SAAS,IAAI,aAAa,EAAE;AAGzD,cAAU,QAAQ,MAAM,YAAY,SAAS,UAAU,KAAK,SAAS,KAAK,CAAC;AAC3E,YAAQ,WAAW,CAAC,KAAK;AACzB,YAAQ,OAAO,KAAK,SAAS;AAC7B,YAAQ,QAAQ,KAAK,SAAS;AAI9B,SAAK,UAAU,KAAK,SAAS,UAAU,KAAK,KAAK,EAAE,IAC7C,KAAK,SAAS,UAAU,KAAK,KAAK,EAAE,MAAM,MAAM,2BAA2B,SAC3E,KAAK,SAAS,UAAU,KAAK,KAAK,EAAE,MAAM,MAAM,2BAA2B,WAC3E,KAAK;AAEX,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,kBAAkB,IAAI;AAClB,UAAM,kBAAkB,EAAE;AAE1B,UAAM,OAAO,GAAG,CAAC;AAEjB,QAAI,KAAK,SAAS;AAKd,WAAK,iBAAiB,iCAAiC,EAAE,QAAQ,CAAC,OAAO;AACrE,WAAG,WAAW;AACd,WAAG,iBAAiB,SAAS,KAAK,wBAAwB,KAAK,IAAI,CAAC;AAAA,MACpF,CAAa;AAAA,IACJ;AAGD,QAAI,CAAC,KAAK,YAAY;AAClB;AAAA,IACH;AAQD,SAAK,cAAc,oBAAoB,EAAE,iBAAiB,SAAS,KAAK,oBAAoB,KAAK,IAAI,CAAC;AAStG,SAAK,iBAAiB,eAAe,EAAE;AAAA,MAAQ,CAAC,OAC5C,GAAG,iBAAiB,SAAS,KAAK,cAAc,KAAK,IAAI,CAAC;AAAA,IACtE;AACQ,SAAK,iBAAiB,oBAAoB,EAAE;AAAA,MAAQ,CAAC,OACjD,GAAG,iBAAiB,SAAS,KAAK,gBAAgB,KAAK,IAAI,CAAC;AAAA,IACxE;AAGQ,QAAI,cAAc,KAAK,cAAc,iDAAiD;AACtF,iBAAa,iBAAiB,UAAU,KAAK,6BAA6B,KAAK,IAAI,CAAC;AAMpF,SAAK,iBAAiB,kBAAkB,EAAE;AAAA,MAAQ,CAAC,OAC/C,GAAG,iBAAiB,SAAS,KAAK,mCAAmC,KAAK,IAAI,CAAC;AAAA,IAC3F;AACQ,SAAK,iBAAiB,wBAAwB,EAAE;AAAA,MAAQ,CAAC,OACrD,GAAG,iBAAiB,SAAS,KAAK,wCAAwC,KAAK,IAAI,CAAC;AAAA,IAChG;AAAA,EACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuED,MAAM,gBAAgB,OAAO;AACzB,UAAM,eAAc;AACpB,UAAM,KAAK,UAAU,KAAK;AAC1B,UAAM,KAAK,MAAM,cAAc,QAAQ,eAAe;AACtD,UAAM,SAAS,KAAK,OAAO,QAAQ,IAAI,GAAG,QAAQ,QAAQ;AAC1D,WAAO,OAAO;EACjB;AAAA;AAAA;AAAA,EAKD,MAAM,QAAQ,OAAO;AACjB,UAAM,OAAO,WAAW,iBAAiB,KAAK;AAC9C,QAAI,KAAK,UAAU,QAAQ;AACvB,YAAM,MAAM,MAAM;AAClB,YAAM,KAAK,IAAI,QAAQ,WAAW,MAAM,IAAI,QAAQ,+BAA+B;AACnF,UAAI,CAAC,IAAI;AACL,eAAO,KAAK,0BAA0B,IAAI;AAC1C;AAAA,MACH;AACD,aAAO,KAAK,aAAa,OAAO,KAAK,QAAQ,GAAG,QAAQ,QAAQ;AAAA,IAC5E,OAAe;AACH,UAAI,KAAK,SAAS,oBAAoB;AAClC,cAAM,cAAc,MAAM,SAAS,KAAK,IAAI;AAE5C,cAAM,OAAO,MAAM,SAAS,YAAY,OAAO,IAAI;AACnD,aAAK,OAAO,KAAK;AACjB,cAAM,UAAU,MAAM,KAAK,0BAA0B,KAAK,UAAU,MAAM,IAAI;AAC9E,YAAI,YAAY;AAAO;AAGvB,YAAI,CAAC,MAAM,eAAe,SAAS,KAAK,IAAI;AAAG;AAG/C,cAAMF,YAAW;AACjB,YAAI,CAACA,aAAYA,UAAS;AAAY;AAGtC,cAAM,eAAe,CAAC,CAACA,UAAS;AAChC,eAAO,MAAM,KAAK,gBAAgB,OAAO;AAAA,UACrC,MAAM,eAAe,MAAM,mBAAmB,aAAa,MAAM,mBAAmB;AAAA,UACpF,oBAAoB,eAAeA,UAAS,OAAOA,UAAS;AAAA,UAC5D,MAAMA,UAAS;AAAA,UACf,YAAYA,UAAS;AAAA,UACrB,KAAKA,UAAS,OAAO;AAAA,UACrB,OAAO;AAAA,YACH,CAAC,GAAG,UAAU,SAAS,EAAE,GAAG;AAAA,cACxB,CAAC,GAAG,UAAU,MAAM,gCAAgC,EAAE,GAAG,KAAK;AAAA,YACjE;AAAA,UACJ;AAAA,QACrB,CAAiB;AAAA,MACjB,OAAmB;AACH,eAAO,MAAM,QAAQ,KAAK;AAAA,MAC7B;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,aAAa,OAAO;AAChB,UAAM,MAAM,MAAM;AAClB,UAAM,WAAW,IAAI,QAAQ,SAAS;AACtC,QAAI,UAAU,KAAK,SAAS;AAC5B,QAAI,CAAC,UAAU;AACX,YAAM,KAAK,IAAI,QAAQ,eAAe;AACtC,YAAM,SAAS,KAAK,SAAS,QAAQ,IAAI,GAAG,QAAQ,QAAQ;AAG5D,gBAAU,OAAO;AAAA,IACpB;AACD,UAAM,KAAK,IAAI,WAAW;AAAA,MACtB,MAAM;AAAA,MACN;AAAA,MACA,UAAU,OAAO,SAAS;AAEtB,YAAI,MAAM;AAEV,cAAM,cAAc,IAAI,QAAQ,eAAe;AAC/C,YAAI,oBAAoB,YAAY,iBAAiB,OAAO;AAC5D,YAAI,kBAAkB,kBAAkB,CAAC,EAAE,SAAS;AACpD,YAAI,oBAAoB,MAAM;AAC1B,4BAAkB,CAAC,EAAE,QAAQ;AAAA,QAChC;AAQD,eAAO,KAAK,UAAU,KAAK;AAAA,MAC9B;AAAA,MACD,KAAK,KAAK,SAAS,MAAM;AAAA,MACzB,MAAM,KAAK,SAAS,OAAO;AAAA,IACvC,CAAS;AACD,WAAO,GAAG;EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqDD,MAAM,aAAa,OAAO;AAWtB,WAAO,MAAM,MAAM,aAAa,KAAK;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2ED,MAAM,aAAaE,UAAS;AAExB,UAAM,eAAe,KAAK,QAAQ,CAAC,EAAE,cAAc,wBAAwB;AAC3E,UAAM,WAAW,IAAI,IAAIA,SAAQ,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC;AACjD,UAAM,aAAa,MAAM,KAAK,aAAa,QAAQ,EAAE,OAAO,CAACG,UAAS,SAAS,IAAIA,MAAK,QAAQ,QAAQ,CAAC;AAGzG,UAAM,WAAW,KAAK,OAAO,QAAQ;AACrC,UAAM,UAAU;AAChB,QAAI,WAAW;AACf,QAAI,aAAa,KAAK,MAAM,aAAa,gBAAgB,aAAa,SAAS,CAAC,EAAE,eAAe,EAAE;AACnG,UAAM,SAAS,KAAK,IAAI,KAAK,KAAK,WAAW,WAAW,SAAS,GAAG,CAAC;AACrE,QAAI,WAAW;AAAG,iBAAW,UAAU;AAGvC,UAAM,KAAK,iBAAiB,cAAc,UAAU,QAAQ,UAAU,UAAU;AAGhF,UAAM,UAAU,WAAW,IAAI,CAAC,OAAO,KAAK,aAAa,EAAE,CAAC;AAC5D,WAAO,QAAQ,IAAI,OAAO;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoED,aAAa,OAAO;AAChB,UAAM,MAAM,MAAM;AAClB,UAAM,KAAK,IAAI,QAAQ,WAAW,MAAM,IAAI,QAAQ,+BAA+B;AACnF,UAAM,cAAc;AAAA,MAChB;AAAA,MACA,KAAK,UAAU,EAAE,OAAO,QAAQ,OAAO,GAAG,QAAQ,OAAO,QAAQ,GAAG,QAAQ,SAAQ,CAAE;AAAA,IAClG;AAAA,EACK;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,MAAM,aAAa,OAAO,QAAQ,QAAQ;AACtC,QAAI,CAAC,KAAK,YAAY,KAAK;AAAa,aAAO;AAE/C,UAAM,KAAK,UAAU,KAAK;AAI1B,UAAMH,WAAU,KAAK,SAAS,QAAQ,IAAI,CAAC,WAAW,OAAO,SAAS,KAAK,CAAC;AAC5E,IAAAA,SAAQ,KAAK,CAAC,GAAG,MAAM,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAE9C,UAAM,WAAWA,SAAQ,UAAU,CAAC,MAAM,EAAE,QAAQ,MAAM,GACtD,WAAWA,SAAQ,UAAU,CAAC,MAAM,EAAE,QAAQ,MAAM;AAExD,QAAI,YAAY,UAAU;AACtB,aAAO,KAAK,kCAAkC,IAAI;AAClD;AAAA,IACH;AAGD,UAAM,CAAC,KAAK,IAAIA,SAAQ,OAAO,UAAU,CAAC;AAC1C,IAAAA,SAAQ,OAAO,UAAU,GAAG,KAAK;AAGjC,IAAAA,SAAQ,QAAQ,CAAC,MAAO,EAAE,SAAS,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,EAAG;AACjE,QAAI,cAAc;AAClB,UAAM,UAAU,CAAA;AAChB,eAAW,UAAUA,UAAS;AAC1B,YAAM,IAAI,OAAO;AACjB,cAAQ,KAAK,EAAE,KAAK,OAAO,KAAK,QAAQ,GAAG,OAAO,CAAC,aAAa,cAAc,IAAI,CAAC,EAAG,CAAA;AACtF,oBAAc,cAAc;AAAA,IAC/B;AACD,WAAO,KAAK,SAAS,wBAAwB,eAAe,OAAO;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,MAAM,oBAAoB,OAAO;AAC7B,UAAM,eAAc;AACpB,UAAM,gBAAe;AAErB,QAAI,CAAC,KAAK,YAAY,KAAK;AAAa,aAAO;AAG/C,UAAM,KAAK,UAAU,KAAK;AAE1B,UAAMA,WAAU,KAAK,SAAS,QAAQ,IAAI,CAAC,WAAW,OAAO,SAAS,KAAK,CAAC;AAE5E,UAAM,UAAUA,SAAQ,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,QAAQ,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,GAAI,EAAC;AAE1F,WAAO,KAAK,SAAS,wBAAwB,eAAe,OAAO;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA,EAKD,MAAM,gBAAgB,OAAO;AACzB,UAAM,eAAc;AACpB,UAAM,gBAAe;AAGrB,UAAM,KAAK,UAAU,KAAK;AAE1B,UAAM,SAAS,MAAM,OAAO,QAAQ,+BAA+B;AACnE,UAAM,KAAK,OAAO,QAAQ;AAC1B,UAAM,SAAS,KAAK,SAAS,QAAQ,IAAI,EAAE;AAE3C,UAAM,OAAO,YAAY,OAAO,IAAI;AACpC,UAAM,MAAM,OAAO,OAAO,GAAG,OAAO,EAAE,KAAK,CAAC,QAAQ,IAAI,QAAQ,OAAO,IAAI;AAC3E,QAAI;AAAK,aAAO,IAAI,OAAO,MAAM,EAAE,OAAO,KAAI,CAAE;AAEjC,UAAM,eAAe,KAAK,MAAM;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA,EAKD,oBAAoB,OAAO,MAAM;AAC7B,UAAM,eAAc;AACpB,UAAM,gBAAe;AAErB,UAAM,eAAe,SAAS,cAAc,UAAU;AACtD,iBAAa,OAAO;AACpB,iBAAa,YAAY,KAAK,OAAO;AACrC,UAAM,SAAS,KAAK,cAAc,qBAAqB;AACvD,YAAQ,gBAAgB,YAAY;AACpC,SAAK,UAAU;EAClB;AAAA,EAED,eAAe,YAAY;AACvB,UAAM,OAAO,MAAM,eAAe,UAAU;AAE5C,QAAI,KAAK,eAAe;AAAW,WAAK,cAAc;AACtD,WAAO;AAAA,EACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,MAAM,cAAc,OAAO;AACvB,UAAM,eAAc;AACpB,UAAM,cAAc,MAAM,cAAc,QAAQ,eAAe;AAC/D,UAAM,SAAS,KAAK,SAAS,QAAQ,IAAI,YAAY,QAAQ,QAAQ;AACrE,QAAI,eAAe,MAAM,iBAAiB,2BAA2B,QAAQ,IAAI;AAEjF,QAAI,YAAY,wBAAwB;AACxC,QAAI,qBAAqB;AAAA,MACrB;AAAA,MACA,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,gCAAgC;AAAA,IAC5F;AACQ,QAAI,aAAa,oBAAoB;AACjC,qBAAe,MAAM,SAAS,kBAAkB;AAAA,IACnD;AAED,QAAI,cAAc;AACd,mBAAa,MAAM,OAAO,IAAI;AAAA,IAC1C,OAAe;AACH,aAAO,KAAK,qCAAqC,IAAI;AAAA,IACxD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,MAAM,wBAAwB,OAAO;AACjC,UAAM,eAAc;AACpB,UAAM,KAAK,OAAO,EAAE,cAAc,MAAM,eAAe,KAAI,CAAE;AAC7D,QAAI,MAAM,eAAe;AACrB,YAAM,cAAc,WAAW;AAAA,IAC3C,OAAe;AACH,YAAM,OAAO,WAAW;AAAA,IAC3B;AAED,UAAM,iBAAiB,SAAS,gBAAgB,KAAK,QAAQ;AAG7D,QAAI,mBAAmB,UAAU,oBAAoB;AACjD,YAAM,KAAK,SAAS;AAAA,QAChB,UAAU;AAAA,QACV,UAAU,MAAM;AAAA,QAChB,UAAU;AAAA,MAC1B;AAAA,IACS;AACD,UAAM,cAAc,KAAK;AACzB,UAAMQ,MAAI,oBAAoB,WAAW;AACzC,QAAI,MAAM,eAAe;AACrB,YAAM,cAAc,WAAW;AAAA,IAC3C,OAAe;AACH,YAAM,OAAO,WAAW;AAAA,IAC3B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,MAAM,mCAAmC,OAAO;AAC5C,UAAM,eAAc;AACpB,UAAM,KAAK,OAAO,EAAE,cAAc,MAAM,eAAe,KAAI,CAAE;AAC7D,QAAI,MAAM,eAAe;AACrB,YAAM,cAAc,WAAW;AAAA,IAC3C,OAAe;AACH,YAAM,OAAO,WAAW;AAAA,IAC3B;AAED,UAAM,iBAAiB,SAAS,gBAAgB,KAAK,QAAQ;AAE7D,QAAI,mBAAmB,UAAU,oBAAoB;AACjD,YAAM,KAAK,SAAS;AAAA,QAChB,UAAU;AAAA,QACV,UAAU,MAAM;AAAA,QAChB,UAAU;AAAA,MAC1B;AAAA,IACS;AACD,UAAM,cAAc,KAAK;AACzB,UAAMA,MAAI,gBAAgB,WAAW;AACrC,QAAI,MAAM,eAAe;AACrB,YAAM,cAAc,WAAW;AAAA,IAC3C,OAAe;AACH,YAAM,OAAO,WAAW;AAAA,IAC3B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM,wCAAwC,OAAO;AACjD,UAAM,eAAc;AACpB,UAAM,KAAK,OAAO,EAAE,cAAc,MAAM,eAAe,KAAI,CAAE;AAC7D,QAAI,MAAM,eAAe;AACrB,YAAM,cAAc,WAAW;AAAA,IAC3C,OAAe;AACH,YAAM,OAAO,WAAW;AAAA,IAC3B;AAED,UAAM,iBAAiB,SAAS,gBAAgB,KAAK,QAAQ;AAG7D,QAAI,mBAAmB,UAAU,oBAAoB;AACjD,YAAM,KAAK,SAAS;AAAA,QAChB,UAAU;AAAA,QACV,UAAU,MAAM;AAAA,QAChB,UAAU;AAAA,MAC1B;AAAA,IACS;AACD,UAAM,cAAc,KAAK;AACzB,UAAMA,MAAI,+BAA+B,WAAW;AACpD,QAAI,MAAM,eAAe;AACrB,YAAM,cAAc,WAAW;AAAA,IAC3C,OAAe;AACH,YAAM,OAAO,WAAW;AAAA,IAC3B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,MAAM,6BAA6B,OAAO;AACtC,UAAM,eAAc;AACpB,UAAM,SAAS,MAAM;AACrB,UAAM,QAAQ,OAAO;AACH,WAAO;AACzB,UAAM,cAAc,MAAM,cAAc,QAAQ,eAAe;AAC/D,UAAM,SAAS,KAAK,SAAS,QAAQ,IAAI,YAAY,QAAQ,QAAQ;AAErE,gBAAY,QAAQ,SAAS,UAAU,SAAS,IAAI,UAAU,MAAM,gCAAgC,IAAI,KAAK;AAE7G,UAAM,KAAK,UAAU,KAAK;AAE1B,UAAM,OAAO,OAAO;AAAA,MAChB,OAAO;AAAA,QACH,CAAC,GAAG,UAAU,SAAS,EAAE,GAAG;AAAA,UACxB,CAAC,GAAG,UAAU,MAAM,gCAAgC,EAAE,GAAG,SAAS;AAAA,QACrE;AAAA,MACJ;AAAA,IACb,CAAS;AAAA,EACJ;AAAA;AAGL;AA/zBkE;AAA3D,IAAM,+BAAN;ACQP,MAAM,wBAAN,MAAM,sBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYvB,OAAO,eAAe;AAClB,SAAK,QAAQ,IAAI,UAAU,SAAS,EAAE,MAAMA;AAI5C,SAAK,eAAe,KAAK,QAAQ,IAAI,UAAU,SAAS,EAAE,IAAI;AAG9D,SAAK,QAAQ,IAAI,UAAU,SAAS,EAAE,SAAS;AAAA,MAC3C,KAAK,KAAK,QAAQ,IAAI,UAAU,SAAS,EAAE;AAAA,IACvD;AAGQ,WAAO,OAAO,KAAK,QAAQ,IAAI,UAAU,SAAS,EAAE,MAAM;AAAA,EAC7D;AAAA,EAED,aAAa,eAAe;AAOxB,UAAM,GAAG,yBAAyB,aAAa,iCAAiC;AAChF,UAAM,GAAG,qBAAqB,aAAa,wBAAwB;AAqBnE,eAAW,eAAe,aAAa,WAAY;AAC/C,YAAMT,WAAU,UAAU,UAAU,SAAS,CAAC;AAC9C,eAAS,IAAI,GAAG,IAAI,UAAU,SAAS,GAAG,KAAK;AAC3C,YAAI,UAAU,CAAC,MAAM,UAAU,CAAC,GAAG;AAC/B,iBAAOA,SAAQ,GAAG,IAAI;AAAA,QACzB;AAAA,MACJ;AACD,aAAOA,SAAQ,QAAQ,IAAI;AAAA,IACvC,CAAS;AAOD,eAAW,eAAe,QAAQ,SAAU,GAAG,GAAGA,UAAS;AACvD,aAAO,IAAI,IAAIA,SAAQ,GAAG,IAAI,IAAIA,SAAQ,QAAQ,IAAI;AAAA,IAClE,CAAS;AAWD,eAAW,eAAe,eAAe,SAAU,cAAc;AAC7D,aAAO,SAAS,oBAAoB,YAAY;AAAA,IAC5D,CAAS;AAED,eAAW,eAAe,qBAAqB,SAAU,gBAAgB;AACrE,UAAI,iBAAiB;AACrB,iBAAW,OAAO,gBAAgB;AAC9B,YAAI,mBAAmB;AAAI,4BAAkB;AAC7C,0BAAkB,GAAG,eAAe,GAAG,CAAC,GAAG,GAAG;AAAA,MACjD;AACD,aAAO;AAAA,IACnB,CAAS;AAED,eAAW,eAAe,UAAU,SAAU,OAAOA,UAAS;AAC1D,WAAK,eAAe;AACpB,aAAOA,SAAQ,GAAG,IAAI;AAAA,IAClC,CAAS;AAED,eAAW,eAAe,eAAe,SAAU,OAAOA,UAAS;AAO/D,aAAO,cAAc,KAAK,KAAK,UAAU,KAAKA,SAAQ,GAAG,IAAI,IAAIA,SAAQ,QAAQ,IAAI;AAAA,IACjG,CAAS;AAED,eAAW,eAAe,mBAAmB,SAAU,OAAOA,UAAS;AAMnE,aAAO,CAAC,cAAc,KAAK,KAAK,UAAU,KAAKA,SAAQ,GAAG,IAAI,IAAIA,SAAQ,QAAQ,IAAI;AAAA,IAClG,CAAS;AAED,eAAW,eAAe,QAAQ,SAAU,OAAOA,UAAS;AACxD,UAAI,SAAS,KAAK,cAAc;AAC5B,eAAOA,SAAQ,GAAG,IAAI;AAAA,MACzB;AAAA,IACb,CAAS;AAGD,uBAAmB,0BAAyB;AAAA,EAC/C;AAAA,EAED,OAAO,cAAc;AACjB;AAEA,UAAM,GAAG,sCAAsC,aAAa,4BAA4B;AACxF,UAAM,GAAG,qCAAqC,aAAa,2BAA2B;AACtF,UAAM,KAAK,YAAY,sBAAqB,UAAU;AAEtD,UAAM,GAAG,8BAA8B,CAAC,KAAK,OAAOA,aAAY;AAC5D,mBAAa,oBAAoB,KAAK,KAAK;AAAA,IACvD,CAAS;AAKD,eAAW,cAAc,UAAU,WAAW,6BAA6B;AAAA,MACvE,OAAO;AAAA,MACP,aAAa;AAAA,IACzB,CAAS;AACD,eAAW,cAAc,UAAU,WAAW,2BAA2B;AAAA,MACrE,OAAO;AAAA,MACP,aAAa;AAAA,IACzB,CAAS;AACD,eAAW,cAAc,UAAU,WAAW,4BAA4B;AAAA,MACtE,OAAO;AAAA,MACP,aAAa;AAAA,IACzB,CAAS;AACD,eAAW,cAAc,UAAU,WAAW,8BAA8B;AAAA,MACxE,OAAO;AAAA,MACP,aAAa;AAAA,IACzB,CAAS;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,aAAa,aAAa;AACtB,UAAM,kCAAkC,KAAK,QAAQ,IAAI,gCAAgC,EAAE;AAC3F,UAAM,YAAY,gCAAgC,MAAM;AAIxD,UAAM,SAAS;AAAA,MACX,aAAa,UAAU;AAAA,MACvB,cAAc;AAAA,QACV;AAAA,UACI,MAAM;AAAA;AAAA,UACN,cAAc;AAAA,YACV;AAAA,cACI,UAAU;AAAA,cACV,YAAY;AAAA,cACZ,aAAa;AAAA,cACb,UAAU,UAAU;AAAA,YACvB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACb;AAGQ,oCAAgC,eAAe,KAAK,MAAM;AAAA,EAC7D;AAAA;AAAA;AAAA;AAKL;AAvM2B;AAA3B,IAAM,uBAAN;ACXA,MAAM,KAAK,QAAQ,YAAY;AAO3B,uBAAqB,YAAW;AAIpC,CAAC;AAKD,MAAM,KAAK,SAAS,MAAM;AAGtB,uBAAqB,aAAY;AACrC,CAAC;AAKD,MAAM,KAAK,SAAS,YAAY;AAC5B,aAAW,MAAM;AACb,QAAI,KAAK,KAAK,MAAM;AAOhB,UAAI,CAAC,KAAK,QAAQ,IAAI,WAAW,GAAG,UAAU,KAAK,MAAM,MAAM;AAC3D,YAAI,OAAO;AACX,YAAI,KAAK,QAAQ,IAAI,WAAW;AAAG,iBAAO;AAC1C,cAAM,OAAO,MAAM,2CAA2C,IAAI,MAAM;AAAA,MAC3E;AACD,UAAI,CAAC,KAAK,QAAQ,IAAI,YAAY,GAAG,UAAU,KAAK,MAAM,MAAM;AAC5D,YAAI,OAAO;AACX,YAAI,KAAK,QAAQ,IAAI,YAAY;AAAG,iBAAO;AAC3C,cAAM,OAAO,MAAM,4CAA4C,IAAI,MAAM;AAAA,MAC5E;AAAA,IACJ;AAED,yBAAqB,aAAY;AAAA,EACpC,GAAE,GAAG;AACV,CAAC;AAMD,MAAM,KAAK,gBAAgB,CAAC,EAAE,yBAAwB,MAAO;AACzD,2BAAyB,UAAU,SAAS;AAChD,CAAC;AAED,MAAM,KAAK,mBAAmB,MAAM;AAChC;AACJ,CAAC;"}