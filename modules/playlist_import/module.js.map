{"version":3,"file":"module.js","sources":["../../src/scripts/constants.js","../../src/scripts/settings.js","../../src/scripts/lib/lib.js","../../src/module.js"],"sourcesContent":["const CONSTANTS = {\n    MODULE_NAME: \"playlist_import\",\n    PATH: `modules/playlist_import/`,\n};\nCONSTANTS.PATH = `modules/${CONSTANTS.MODULE_NAME}/`;\nexport default CONSTANTS;\n","import CONSTANTS from \"./constants.js\";\n\nexport const registerSettings = function () {\n    game.settings.register(CONSTANTS.MODULE_NAME, \"songs\", {\n        name: `${CONSTANTS.MODULE_NAME}.Songs`,\n        hint: `${CONSTANTS.MODULE_NAME}.SongsHint`,\n        scope: \"world\",\n        config: false,\n        default: {},\n        type: Object,\n    });\n    game.settings.register(CONSTANTS.MODULE_NAME, \"bucket\", {\n        name: `${CONSTANTS.MODULE_NAME}.BucketSelect`,\n        hint: `${CONSTANTS.MODULE_NAME}.BucketSelectHint`,\n        scope: \"world\",\n        config: true,\n        default: \"\",\n        type: String,\n    });\n    game.settings.register(CONSTANTS.MODULE_NAME, \"shouldRepeat\", {\n        name: `${CONSTANTS.MODULE_NAME}.ShouldRepeat`,\n        hint: `${CONSTANTS.MODULE_NAME}.ShouldRepeatHint`,\n        scope: \"world\",\n        config: true,\n        default: false,\n        type: Boolean,\n    });\n    game.settings.register(CONSTANTS.MODULE_NAME, \"shouldStream\", {\n        name: `${CONSTANTS.MODULE_NAME}.ShouldStream`,\n        hint: `${CONSTANTS.MODULE_NAME}.ShouldStreamHint`,\n        scope: \"world\",\n        config: true,\n        default: false,\n        type: Boolean,\n    });\n    game.settings.register(CONSTANTS.MODULE_NAME, \"folderDir\", {\n        name: `${CONSTANTS.MODULE_NAME}.FolderDir`,\n        hint: `${CONSTANTS.MODULE_NAME}.FolderDirHint`,\n        scope: \"world\",\n        config: true,\n        default: \"music\",\n        type: String,\n        filePicker: true,\n    });\n    game.settings.register(CONSTANTS.MODULE_NAME, \"logVolume\", {\n        name: `${CONSTANTS.MODULE_NAME}.LogVolume`,\n        hint: `${CONSTANTS.MODULE_NAME}.LogVolumeHint`,\n        scope: \"world\",\n        config: true,\n        default: \"0.5\",\n        type: String,\n    });\n    game.settings.register(CONSTANTS.MODULE_NAME, \"enableDuplicateChecking\", {\n        name: `${CONSTANTS.MODULE_NAME}.EnableDuplicate`,\n        hint: `${CONSTANTS.MODULE_NAME}.EnableDuplicateHint`,\n        scope: \"world\",\n        config: true,\n        default: true,\n        type: Boolean,\n    });\n    game.settings.register(CONSTANTS.MODULE_NAME, \"customRegexDelete\", {\n        name: `${CONSTANTS.MODULE_NAME}.CustomRegexDelete`,\n        hint: `${CONSTANTS.MODULE_NAME}.CustomRegexDeleteHint`,\n        scope: \"world\",\n        config: true,\n        default: \"^\\\\d\\\\d+ *_*-* *\",\n        type: String,\n    });\n    game.settings.register(CONSTANTS.MODULE_NAME, \"shouldOverridePlaylist\", {\n        name: `${CONSTANTS.MODULE_NAME}.ShouldOverridePlaylist`,\n        hint: `${CONSTANTS.MODULE_NAME}.ShouldOverridePlaylistHint`,\n        scope: \"world\",\n        config: true,\n        default: true,\n        type: Boolean,\n    });\n    // let sources = new FilePicker().sources;\n    // let options = Object.keys(sources);\n    game.settings.register(CONSTANTS.MODULE_NAME, \"source\", {\n        name: game.i18n.localize(`${CONSTANTS.MODULE_NAME}.SelectSource`),\n        hint: game.i18n.localize(`${CONSTANTS.MODULE_NAME}.SelectSourceHint`),\n        // hint: `${game.i18n.localize(`${CONSTANTS.MODULE_NAME}.SelectSourceHint`)} [${options}]`,\n        scope: \"world\",\n        config: true,\n        default: \"data\",\n        type: String,\n        // https://foundryvtt.wiki/en/development/api/settings\n        filePicker: \"folder\",\n    });\n    game.settings.register(CONSTANTS.MODULE_NAME, \"shouldDeletePlaylist\", {\n        name: `${CONSTANTS.MODULE_NAME}.ShouldDeletePlaylist`,\n        hint: `${CONSTANTS.MODULE_NAME}.ShouldDeletePlaylistHint`,\n        scope: \"world\",\n        config: true,\n        default: false,\n        type: Boolean,\n    });\n    game.settings.register(CONSTANTS.MODULE_NAME, \"maintainOriginalFolderName\", {\n        name: `${CONSTANTS.MODULE_NAME}.MaintainOriginalFolderName`,\n        hint: `${CONSTANTS.MODULE_NAME}.MaintainOriginalFolderNameHint`,\n        scope: \"world\",\n        config: true,\n        default: false,\n        type: Boolean,\n    });\n    // ====================================================\n    game.settings.register(CONSTANTS.MODULE_NAME, \"debug\", {\n        name: `${CONSTANTS.MODULE_NAME}.setting.debug.name`,\n        hint: `${CONSTANTS.MODULE_NAME}.setting.debug.hint`,\n        scope: \"client\",\n        config: true,\n        default: false,\n        type: Boolean,\n    });\n};\n","import CONSTANTS from \"../constants.js\";\n// // =============================\n// // Module Generic function\n// // =============================\n// export async function getToken(documentUuid) {\n// \tconst document = await fromUuid(documentUuid);\n// \t//@ts-ignore\n// \treturn document?.token ?? document;\n// }\n// export function getOwnedTokens(priorityToControlledIfGM) {\n// \tconst gm = game.user?.isGM;\n// \tif (gm) {\n// \t\tif (priorityToControlledIfGM) {\n// \t\t\tconst arr = canvas.tokens?.controlled;\n// \t\t\tif (arr && arr.length > 0) {\n// \t\t\t\treturn arr;\n// \t\t\t} else {\n// \t\t\t\treturn canvas.tokens?.placeables;\n// \t\t\t}\n// \t\t} else {\n// \t\t\treturn canvas.tokens?.placeables;\n// \t\t}\n// \t}\n// \tif (priorityToControlledIfGM) {\n// \t\tconst arr = canvas.tokens?.controlled;\n// \t\tif (arr && arr.length > 0) {\n// \t\t\treturn arr;\n// \t\t}\n// \t}\n// \tlet ownedTokens = canvas.tokens?.placeables.filter((token) => token.isOwner && (!token.document.hidden || gm));\n// \tif (ownedTokens.length === 0 || !canvas.tokens?.controlled[0]) {\n// \t\townedTokens = canvas.tokens?.placeables.filter(\n// \t\t\t(token) => (token.observer || token.isOwner) && (!token.document.hidden || gm)\n// \t\t);\n// \t}\n// \treturn ownedTokens;\n// }\n// export function is_UUID(inId) {\n// \treturn typeof inId === \"string\" && (inId.match(/\\./g) || []).length && !inId.endsWith(\".\");\n// }\n// export function getUuid(target) {\n// \t// If it's an actor, get its TokenDocument\n// \t// If it's a token, get its Document\n// \t// If it's a TokenDocument, just use it\n// \t// Otherwise fail\n// \tconst document = getDocument(target);\n// \treturn document?.uuid ?? false;\n// }\n// export function getDocument(target) {\n// \tif (target instanceof foundry.abstract.Document) return target;\n// \treturn target?.document;\n// }\n// export function is_real_number(inNumber) {\n// \treturn !isNaN(inNumber) && typeof inNumber === \"number\" && isFinite(inNumber);\n// }\n// export function isGMConnected() {\n// \treturn !!Array.from(game.users).find((user) => user.isGM && user.active);\n// }\n// export function isGMConnectedAndSocketLibEnable() {\n// \treturn isGMConnected(); // && !game.settings.get(CONSTANTS.MODULE_NAME, 'doNotUseSocketLibFeature');\n// }\n// export function wait(ms) {\n// \treturn new Promise((resolve) => setTimeout(resolve, ms));\n// }\n// export function isActiveGM(user) {\n// \treturn user.active && user.isGM;\n// }\n// export function getActiveGMs() {\n// \treturn game.users?.filter(isActiveGM);\n// }\n// export function isResponsibleGM() {\n// \tif (!game.user?.isGM) return false;\n// \t//@ts-ignore\n// \treturn !getActiveGMs()?.some((other) => other._id < game.user?._id);\n// }\n// export function firstGM() {\n// \treturn game.users?.find((u) => u.isGM && u.active);\n// }\n// export function isFirstGM() {\n// \treturn game.user?.id === firstGM()?.id;\n// }\n// export function firstOwner(doc) {\n// \t/* null docs could mean an empty lookup, null docs are not owned by anyone */\n// \tif (!doc) return undefined;\n// \tconst permissionObject = (doc instanceof TokenDocument ? doc.actor?.permission : doc.permission) ?? {};\n// \tconst playerOwners = Object.entries(permissionObject)\n// \t\t.filter(([id, level]) => !game.users?.get(id)?.isGM && game.users?.get(id)?.active && level === 3)\n// \t\t.map(([id, level]) => id);\n// \tif (playerOwners.length > 0) {\n// \t\treturn game.users?.get(playerOwners[0]);\n// \t}\n// \t/* if no online player owns this actor, fall back to first GM */\n// \treturn firstGM();\n// }\n// /* Players first, then GM */\n// export function isFirstOwner(doc) {\n// \treturn game.user?.id === firstOwner(doc)?.id;\n// }\n// ================================\n// Logger utility\n// ================================\n// export let debugEnabled = 0;\n// 0 = none, warnings = 1, debug = 2, all = 3\nexport function debug(msg, args = \"\") {\n    if (game.settings.get(CONSTANTS.MODULE_NAME, \"debug\")) {\n        console.log(`DEBUG | ${CONSTANTS.MODULE_NAME} | ${msg}`, args);\n    }\n    return msg;\n}\nexport function log(message) {\n    message = `${CONSTANTS.MODULE_NAME} | ${message}`;\n    console.log(message.replace(\"<br>\", \"\\n\"));\n    return message;\n}\nexport function notify(message) {\n    message = `${CONSTANTS.MODULE_NAME} | ${message}`;\n    ui.notifications?.notify(message);\n    console.log(message.replace(\"<br>\", \"\\n\"));\n    return message;\n}\nexport function info(info, notify = false) {\n    info = `${CONSTANTS.MODULE_NAME} | ${info}`;\n    if (notify) ui.notifications?.info(info);\n    console.log(info.replace(\"<br>\", \"\\n\"));\n    return info;\n}\nexport function warn(warning, notify = false) {\n    warning = `${CONSTANTS.MODULE_NAME} | ${warning}`;\n    if (notify) ui.notifications?.warn(warning);\n    console.warn(warning.replace(\"<br>\", \"\\n\"));\n    return warning;\n}\nexport function error(error, notify = true) {\n    error = `${CONSTANTS.MODULE_NAME} | ${error}`;\n    if (notify) ui.notifications?.error(error);\n    return new Error(error.replace(\"<br>\", \"\\n\"));\n}\nexport function timelog(message) {\n    warn(Date.now(), message);\n}\nexport const i18n = (key) => {\n    return game.i18n.localize(key)?.trim();\n};\nexport const i18nFormat = (key, data = {}) => {\n    return game.i18n.format(key, data)?.trim();\n};\n// export const setDebugLevel = (debugText: string): void => {\n//   debugEnabled = { none: 0, warn: 1, debug: 2, all: 3 }[debugText] || 0;\n//   // 0 = none, warnings = 1, debug = 2, all = 3\n//   if (debugEnabled >= 3) CONFIG.debug.hooks = true;\n// };\nexport function dialogWarning(message, icon = \"fas fa-exclamation-triangle\") {\n    return `<p class=\"${CONSTANTS.MODULE_NAME}-dialog\">\n        <i style=\"font-size:3rem;\" class=\"${icon}\"></i><br><br>\n        <strong style=\"font-size:1.2rem;\">${CONSTANTS.MODULE_NAME}</strong>\n        <br><br>${message}\n    </p>`;\n}\n\n// =====================================================\n\nexport function createUploadFolderIfMissing(originFolder, uploadFolderPath) {\n    return getFolder(originFolder, uploadFolderPath)\n        .then((location) => location.target === \".\" && createFolder(originFolder, uploadFolderPath))\n        .catch(() => createFolder(originFolder, uploadFolderPath));\n}\n\nexport function getFolder(source, target) {\n    return FilePicker.browse(source, target);\n}\n\nexport function createFolder(source, target, options = {}) {\n    return FilePicker.createDirectory(source, target, options);\n}\n\nexport async function handleAudioFiles(event, files, playlistName, uploadFolderPath) {\n    const target = uploadFolderPath;\n    let sounds = [];\n    for (const file of files) {\n        let response = await FilePicker.upload(\"data\", target, file);\n        sounds.push({ name: file.name, path: response.path });\n    }\n    let playlist = game.playlists.contents.find((playlist) => playlist.name === playlistName);\n    if (playlist) {\n        playlist.createEmbeddedDocuments(\"PlaylistSound\", sounds);\n        //await playlist?.setFlag(CONSTANTS.MODULE_NAME, \"isPlaylistImported\", true);\n        //await playlist?.setFlag(CONSTANTS.MODULE_NAME, \"directoryPath\", uploadFolderPath);\n    }\n    // else {\n    // \tawait Playlist.create({\n    // \t\tname: playlistName,\n    // \t\tdescription: \"Generated playlist\",\n    // \t\tflags: {},\n    // \t\tsounds: sounds,\n    // \t\tplaying: false,\n    // \t});\n    // \t//await playlistCreated?.setFlag(CONSTANTS.MODULE_NAME, \"isPlaylistImported\", true);\n    // \t//await playlistCreated?.setFlag(CONSTANTS.MODULE_NAME, \"directoryPath\", uploadFolderPath);\n    // \tinfo(`Successfully created playlist: ${playlistCreated.name}`);\n    // }\n}\n\nexport async function playlistDirectoryPrototypeOnDropHandler(wrapped, ...args) {\n    const [event] = args;\n    event.preventDefault();\n    const files = event.dataTransfer.files;\n    log(files);\n    if (files && files.length > 0) {\n        let filteredFiles = Array.from(files).filter((file) =>\n            Object.keys(CONST.AUDIO_FILE_EXTENSIONS).includes(file.name.split(\".\").pop()),\n        );\n        const playlistName = event.target?.innerText?.trim() ?? \"\";\n        let playlist = game.playlists.contents.find((playlist) => playlist.name === playlistName);\n        if (playlist) {\n            const originFolder = game.settings.get(CONSTANTS.MODULE_NAME, \"source\");\n            const uploadFolderPath = game.settings.get(CONSTANTS.MODULE_NAME, \"folderDir\");\n            const uploadFolderPath2 = playlist.getFlag(CONSTANTS.MODULE_NAME, \"directoryPath\") ?? uploadFolderPath;\n            const uploadFolderPath3 = decodeURI(uploadFolderPath2);\n            await handleAudioFiles(event, filteredFiles, playlistName, uploadFolderPath3);\n        } else {\n            warn(\n                `Can't drop the song no playlist found on the drop handler.MAKE SURE TO DROP THE FILE AUDIO ON THE PLAYLIST NAME`,\n            );\n        }\n    } else {\n        // originalDropFunction(event);\n        return wrapped(args);\n    }\n}\n","import { registerSettings } from \"./scripts/settings.js\";\nimport CONSTANTS from \"./scripts/constants.js\";\nimport {\n    info,\n    debug,\n    warn,\n    error,\n    log,\n    playlistDirectoryPrototypeOnDropHandler,\n    createUploadFolderIfMissing,\n} from \"./scripts/lib/lib.js\";\n\nlet PLIMP = {};\n\nclass PlaylistImporterInitializer {\n    constructor() {}\n\n    static initialize() {\n        PlaylistImporterInitializer.hookInit();\n        PlaylistImporterInitializer.hookReady();\n        PlaylistImporterInitializer.hookRenderPlaylistDirectory();\n        PlaylistImporterInitializer.hookRenderSettings();\n        PlaylistImporterInitializer.hookDeletePlaylist();\n        PlaylistImporterInitializer.hookDeletePlaylistSound();\n    }\n\n    static hookRenderPlaylistDirectory() {\n        /**\n         * Appends a button onto the playlist to import songs.\n         */\n\n        Hooks.on(\"renderPlaylistDirectory\", (app, html, data) => {\n            html.find(\".directory-footer\")[0].style.display = \"inherit\";\n            const importPlaylistString = game.i18n.localize(`${CONSTANTS.MODULE_NAME}.ImportButton`);\n            const importButton = $(`<button  style=\"width: 50%;\">${importPlaylistString}</button>`);\n            if (game.user?.isGM || game.user?.can(\"SETTINGS_MODIFY\")) {\n                html.find(\".directory-footer\").append(importButton);\n                importButton.on(\"click\", (ev) => {\n                    PLIMP.playlistImporter.playlistDirectoryInterface();\n                });\n            }\n            const deleteAllPlaylistString = game.i18n.localize(`${CONSTANTS.MODULE_NAME}.DeleteAllButton`);\n            const deleteAllButton = $(`<button  style=\"width: 50%;\">${deleteAllPlaylistString}</button>`);\n            if (game.user?.isGM || game.user?.can(\"SETTINGS_MODIFY\")) {\n                html.find(\".directory-footer\").append(deleteAllButton);\n                deleteAllButton.on(\"click\", async (ev) => {\n                    const playlists = game.playlists?.contents;\n                    for (const playlist of playlists) {\n                        const playlistHasFlag = playlist.getFlag(CONSTANTS.MODULE_NAME, \"isPlaylistImported\");\n                        if (playlistHasFlag && playlistHasFlag == true) {\n                            await playlist.delete();\n                        }\n                    }\n                });\n            }\n        });\n    }\n\n    static _removeSound(playlistName, soundNames) {\n        const currentList = game.settings.get(CONSTANTS.MODULE_NAME, \"songs\");\n        soundNames.forEach((soundName) => {\n            const trackName = PlaylistImporter._convertToUserFriendly(PlaylistImporter._getBaseName(soundName));\n            const mergedName = (playlistName + trackName).toLowerCase();\n            if (trackName && playlistName) {\n                if (currentList[mergedName]) {\n                    delete currentList[mergedName];\n                }\n            }\n        });\n        game.settings.set(CONSTANTS.MODULE_NAME, \"songs\", currentList);\n    }\n\n    static hookDeletePlaylist() {\n        Hooks.on(\"deletePlaylist\", (playlist, flags, id) => {\n            const playlistName = playlist.name;\n            const soundObjects = playlist.sounds;\n            const sounds = [];\n            for (let i = 0; i < soundObjects.length; ++i) {\n                sounds.push(soundObjects[i].path);\n            }\n\n            PlaylistImporterInitializer._removeSound(playlistName, sounds);\n        });\n    }\n\n    static hookDeletePlaylistSound() {\n        Hooks.on(\"deletePlaylistSound\", (playlist, data, flags, id) => {\n            const playlistName = playlist.name;\n            const soundName = data.path;\n            PlaylistImporterInitializer._removeSound(playlistName, [soundName]);\n        });\n    }\n\n    static hookRenderSettings() {\n        /**\n         * Appends a button onto the settings to clear playlist \"Hashtable\" memory.\n         */\n        Hooks.on(\"renderSettings\", (app, html) => {\n            const clearMemoryString = game.i18n.localize(`${CONSTANTS.MODULE_NAME}.ClearMemory`);\n            const importButton = $(`<button>${clearMemoryString}</button>`);\n            // For posterity.\n            if (game.user?.isGM || game.user?.can(\"SETTINGS_MODIFY\")) {\n                html.find(\"button[data-action='players']\").after(importButton);\n                importButton.click((ev) => {\n                    PLIMP.playlistImporter.clearMemoryInterface();\n                });\n            }\n        });\n    }\n\n    static hookInit() {\n        Hooks.once(\"init\", () => {\n            // const originFolder = game.settings.get(CONSTANTS.MODULE_NAME, \"source\");\n            // const uploadFolderPath = game.settings.get(CONSTANTS.MODULE_NAME, \"folderDir\");\n            // createUploadFolderIfMissing(originFolder, uploadFolderPath)\n            // \t.then(() => log(`Folder ${uploadFolderPath} is ready.`))\n            // \t.catch(() => log(`User doesn't have permission to create the upload folder ${uploadFolderPath}.`));\n\n            libWrapper.register(\n                CONSTANTS.MODULE_NAME,\n                \"PlaylistDirectory.prototype._onDrop\",\n                playlistDirectoryPrototypeOnDropHandler,\n                \"MIXED\",\n            );\n        });\n    }\n\n    static hookReady() {\n        Hooks.on(\"ready\", () => {\n            PLIMP.playlistImporter = new PlaylistImporter();\n            PlaylistImporterInitializer._registerSettings();\n        });\n    }\n\n    static _registerSettings() {\n        registerSettings();\n    }\n}\n\nclass PlaylistImporter {\n    constructor() {\n        /*  --------------------------------------  */\n        /*            Global settings               */\n        /*  --------------------------------------  */\n        this.DEBUG = false; // Enable to see logs\n    }\n    /*  --------------------------------------  */\n    /*           Helper functions               */\n    /*  --------------------------------------  */\n\n    /**\n     * Grabs the most recent folder name. Used in playlist naming.\n     * @private\n     * @param {string} filePath\n     */\n\n    static _getBaseName(filePath) {\n        return filePath.split(\"/\").reverse()[0];\n    }\n\n    /**\n     * Validates the audio extension to be of type 'CONST.AUDIO_FILE_EXTENSIONS'\n     * @private\n     * @param {string} fileName\n     */\n\n    _validateFileType(fileName) {\n        const ext = fileName.split(\".\").pop();\n        info(`Extension is determined to be (${ext}).`);\n        return !!ext.match(/(aac|flac|m4a|mid|mp3|ogg|opus|wav|webm)+/g);\n    }\n\n    /**\n     *\n     * @param match\n     * @param p1\n     * @param p2\n     * @param p3\n     * @param offset\n     * @param input_string\n     * @returns {string}\n     * @private\n     */\n    static _convertCamelCase(match, p1, p2, p3, offset, input_string) {\n        let replace;\n        const small = [\n            \"a\",\n            \"an\",\n            \"at\",\n            \"and\",\n            \"but\",\n            \"by\",\n            \"for\",\n            \"if\",\n            \"nor\",\n            \"on\",\n            \"of\",\n            \"or\",\n            \"so\",\n            \"the\",\n            \"to\",\n            \"yet\",\n        ];\n\n        if (p3) {\n            if (small.includes(p2.toLowerCase())) {\n                p2 = p2.toLowerCase();\n            }\n            replace = p1 + \" \" + p2 + \" \" + p3;\n        } else {\n            replace = p1 + \" \" + p2;\n        }\n\n        return replace;\n    }\n\n    /**\n     * Formats the filenames of songs to something more readable. You can add additional REGEX for other audio extensions\n     * 'CONST.AUDIO_FILE_EXTENSIONS'.\n     * @private\n     * @param {string} name\n     */\n\n    static _convertToUserFriendly(name) {\n        let words = [];\n        const small = [\n            \"a\",\n            \"an\",\n            \"at\",\n            \"and\",\n            \"but\",\n            \"by\",\n            \"for\",\n            \"if\",\n            \"nor\",\n            \"on\",\n            \"of\",\n            \"or\",\n            \"so\",\n            \"the\",\n            \"to\",\n            \"yet\",\n        ];\n        const regexReplace = new RegExp(game.settings?.get(CONSTANTS.MODULE_NAME, \"customRegexDelete\"));\n        name = decodeURIComponent(name);\n        name = name\n            .split(/(.aac|.flac|.m4a|.mid|.mp3|.ogg|.opus|.wav|.webm)+/g)[0]\n            .replace(regexReplace, \"\")\n            .replace(/[_]+/g, \" \");\n\n        while (name !== name.replace(/([a-z])([A-Z][a-z]*)([A-Z])?/, PlaylistImporter._convertCamelCase)) {\n            name = name.replace(/([a-z])([A-Z][a-z]*)([A-Z])?/, PlaylistImporter._convertCamelCase);\n        }\n\n        words = name.replace(/\\s+/g, \" \").trim().split(\" \"); // remove extra spaces prior to trimming to remove .toUpperCase() error\n\n        for (let i = 0; i < words.length; i++) {\n            if (i === 0 || i === words.length - 1 || !small.includes(words[i])) {\n                try {\n                    words[i] = words[i][0].toUpperCase() + words[i].substr(1);\n                } catch (e) {\n                    error(e);\n                    error(`Error in attempting to parse song ${name}`);\n                }\n            }\n        }\n\n        name = words.join(\" \");\n\n        debug(`Converting playlist name to eliminate spaces and extension: ${name}.`);\n        return name;\n    }\n\n    /**\n     * Waits for the creation of a playlist in a separate function for readability.\n     * @param {string} playlistName\n     */\n\n    _generatePlaylist(playlistName, dirPath) {\n        return new Promise(async (resolve, reject) => {\n            let playlist = game.playlists?.contents.find((p) => p.name === playlistName);\n            let playlistExists = playlist ? true : false;\n            if (playlistExists) {\n                const shouldOverridePlaylist = game.settings?.get(CONSTANTS.MODULE_NAME, \"shouldOverridePlaylist\");\n                if (shouldOverridePlaylist) {\n                    // \tawait playlist.delete();\n                    info(`Retrieved playlist '${playlist.id}|${playlist.name}'`);\n                    // let playlistUpdated = await playlist.update({\n                    // \tname: playlistName,\n                    // \tpermission: {\n                    // \t\tdefault: 0,\n                    // \t},\n                    // \tflags: {},\n                    // \tsounds: [],\n                    // \tmode: 0,\n                    // \tplaying: false,\n                    // });\n                    info(`Update playlist '${playlist.id}|${playlist.name}'`);\n                }\n                await playlist?.setFlag(CONSTANTS.MODULE_NAME, \"isPlaylistImported\", true);\n                await playlist?.setFlag(CONSTANTS.MODULE_NAME, \"directoryPath\", dirPath);\n                // playlistExists = false;\n                try {\n                    info(`Successfully retrieved playlist: ${playlistName}`);\n                    resolve(true);\n                } catch (e) {\n                    error(e);\n                    reject(false);\n                }\n            } else {\n                try {\n                    info(`Create playlist '${playlistName}'`);\n                    let playlistCreated = await Playlist.create({\n                        name: playlistName,\n                        permission: {\n                            default: 0,\n                        },\n                        flags: {},\n                        sounds: [],\n                        mode: 0,\n                        playing: false,\n                    });\n                    await playlistCreated?.setFlag(CONSTANTS.MODULE_NAME, \"isPlaylistImported\", true);\n                    await playlistCreated?.setFlag(CONSTANTS.MODULE_NAME, \"directoryPath\", dirPath);\n                    info(`Successfully created playlist: ${playlistCreated.name}`);\n                    resolve(true);\n                } catch (e) {\n                    error(e);\n                    reject(false);\n                }\n            }\n            resolve(false);\n        });\n    }\n\n    /**\n     * Given a path and a playlist name, it will search the path for all files and attempt to add them the created playlist using playlistName.\n     * @param {string} source\n     * @param {string} path\n     * @param {string} playlistName\n     */\n\n    _getItemsFromDir(source, path, playlistName, options) {\n        const dupCheck = game.settings.get(CONSTANTS.MODULE_NAME, \"enableDuplicateChecking\");\n        const shouldRepeat = game.settings.get(CONSTANTS.MODULE_NAME, \"shouldRepeat\");\n        const shouldStream = game.settings.get(CONSTANTS.MODULE_NAME, \"shouldStream\");\n        let logVolume = parseFloat(game.settings?.get(CONSTANTS.MODULE_NAME, \"logVolume\"));\n        if (isNaN(logVolume)) {\n            debug(`Invalid type logVolume`);\n            return;\n        }\n        logVolume = AudioHelper.inputToVolume(logVolume);\n\n        const playlist = game.playlists?.contents.find((p) => p.name === playlistName);\n\n        if (!playlist) {\n            warn(\"Cannot find a playlist with name '\" + playlistName + \"'\", true);\n        }\n\n        return new Promise(async (resolve, reject) => {\n            FilePicker.browse(source, path, options).then(\n                async function (resp) {\n                    const localFiles = resp.files;\n                    for (const fileName of localFiles) {\n                        const valid = await this._validateFileType(fileName);\n                        if (valid) {\n                            const trackName = PlaylistImporter._convertToUserFriendly(\n                                PlaylistImporter._getBaseName(fileName),\n                            );\n                            const currentList = await game.settings.get(CONSTANTS.MODULE_NAME, \"songs\");\n                            const currentPlaylist = game.playlists?.contents.find((playlist) => {\n                                return playlist && playlist.name == playlistName;\n                            });\n                            if (currentPlaylist) {\n                                const currentSound = currentPlaylist.sounds.find((sound) => {\n                                    return sound && sound.name == trackName;\n                                });\n                                if (dupCheck && currentSound) {\n                                    // DO NOTHING\n                                } else {\n                                    // if (!dupCheck || currentList[(playlistName + trackName).toLowerCase()] != true) {\n                                    // A weird way of saying always succeed if dupCheck is on otherwise see if the track is in the list\n                                    debug(`Song ${trackName} not in list ${playlistName}.`);\n                                    await this._addSong(\n                                        currentList,\n                                        trackName,\n                                        fileName,\n                                        playlistName,\n                                        playlist,\n                                        shouldRepeat,\n                                        logVolume,\n                                        shouldStream,\n                                    );\n                                    debug(`Song ${trackName} added to list ${playlistName}.`);\n                                }\n                            }\n                        } else {\n                            debug(\n                                `Determined ${fileName} to be of an invalid ext. If you believe this to be an error contact me on Discord.`,\n                            );\n                        }\n                    }\n                    resolve(true);\n                }.bind(this),\n            );\n        });\n    }\n\n    async _addSong(currentList, trackName, fileName, playlistName, playlist, shouldRepeat, logVolume, shouldStream) {\n        currentList[(playlistName + trackName).toLowerCase()] = true;\n        await game.settings.set(CONSTANTS.MODULE_NAME, \"songs\", currentList);\n\n        const mySoundLists = playlist.sounds?.filter((s) => s.name === trackName) || [];\n        const mySoundExists = mySoundLists.length > 0 ? true : false;\n        const shouldOverridePlaylist = game.settings?.get(CONSTANTS.MODULE_NAME, \"shouldOverridePlaylist\");\n        if (mySoundExists && !shouldOverridePlaylist) {\n            trackName = trackName + \"-\" + mySoundLists.length;\n        }\n\n        const sound = playlist.sounds.find((s) => s.name === trackName);\n        const soundExists = sound ? true : false;\n        if (soundExists) {\n            if (shouldOverridePlaylist) {\n                info(`Retrieved sound '${sound.id}|${trackName}' on playlist '${playlist.id}|${playlist.name}'`);\n                await playlist.updateEmbeddedDocuments(\n                    \"PlaylistSound\",\n                    [{ id: sound.id, name: trackName, path: fileName, repeat: shouldRepeat, volume: logVolume }],\n                    {},\n                );\n                info(`Updated sound '${sound.id}|${trackName}' on playlist '${playlist.id}|${playlist.name}'`);\n            }\n        } else {\n            await playlist.createEmbeddedDocuments(\n                \"PlaylistSound\",\n                [{ name: trackName, path: fileName, repeat: shouldRepeat, volume: logVolume }],\n                {},\n            );\n            info(`Created sound '${trackName}' on playlist '${playlist.id}|${playlist.name}'`);\n        }\n    }\n\n    /**\n     * A helper function designed to prompt the player of task completion.\n     */\n    _playlistCompletePrompt() {\n        const playlistComplete = new Dialog({\n            title: game.i18n.localize(`${CONSTANTS.MODULE_NAME}.OperationFinishTitle`),\n            content: `<p>${game.i18n.localize(`${CONSTANTS.MODULE_NAME}.OperationFinishContent`)}</p>`,\n            buttons: {\n                one: {\n                    icon: '<i class=\"fas fa-check\"></i>',\n                    label: \"\",\n                    callback: () => {},\n                },\n            },\n            default: \"Ack\",\n            close: () => {},\n        });\n        playlistComplete.render(true);\n    }\n\n    _playlistStatusPrompt() {\n        // TODO REMOVED UNTIL BETTER MANAGEMENT\n        /*\n\t\tconst playlistComplete = new Dialog({\n\t\t\ttitle: \"Status Update\",\n\t\t\tcontent: `<p>Number of playlists completed <span id=\"finished_playlists\">0</span>/<span id=\"total_playlists\">0</span></p>`,\n\t\t\tbuttons: {\n\t\t\t\tone: {\n\t\t\t\t\ticon: '<i class=\"fas fa-check\"></i>',\n\t\t\t\t\tlabel: \"\",\n\t\t\t\t\tcallback: () => {},\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: \"Ack\",\n\t\t\tclose: () => {},\n\t\t});\n\t\tplaylistComplete.render(true);\n\t\t*/\n    }\n\n    /**\n     * A helper function designed to clear the stored history of songs\n     */\n    _clearSongHistory() {\n        game.settings.set(CONSTANTS.MODULE_NAME, \"songs\", {});\n    }\n\n    /*  --------------------------------------  */\n    /*                 Interface                */\n    /*  --------------------------------------  */\n\n    clearMemoryInterface() {\n        const clearMemoryPrompt = new Dialog({\n            title: game.i18n.localize(`${CONSTANTS.MODULE_NAME}.ClearMemoryTitle`),\n            content: `<p>${game.i18n.localize(`${CONSTANTS.MODULE_NAME}.ClearMemoryDescription`)}</p>`,\n            buttons: {\n                one: {\n                    label: game.i18n.localize(`${CONSTANTS.MODULE_NAME}.ClearMemoryWarning`),\n                    callback: () => this._clearSongHistory(),\n                },\n                two: {\n                    label: game.i18n.localize(`${CONSTANTS.MODULE_NAME}.CancelOperation`),\n                    callback: () => warn(`Canceled`),\n                },\n            },\n            default: \"Cancel\",\n            close: () => warn(`Prompt Closed`),\n        });\n        clearMemoryPrompt.render(true);\n    }\n\n    playlistDirectoryInterface() {\n        const playlistPrompt = new Dialog({\n            title: game.i18n.localize(`${CONSTANTS.MODULE_NAME}.ImportMusicTitle`),\n            content: `<p>${game.i18n.localize(`${CONSTANTS.MODULE_NAME}.ImportMusicDescription`)}</p>`,\n            buttons: {\n                one: {\n                    icon: '<i class=\"fas fa-check\"></i>',\n                    label: game.i18n.localize(`${CONSTANTS.MODULE_NAME}.ImportMusicLabel`),\n                    callback: () => {\n                        this._playlistStatusPrompt();\n                        this.beginPlaylistImport(\n                            game.settings.get(CONSTANTS.MODULE_NAME, \"source\"),\n                            game.settings.get(CONSTANTS.MODULE_NAME, \"folderDir\"),\n                        );\n                    },\n                },\n                two: {\n                    icon: '<i class=\"fas fa-times\"></i>',\n                    label: game.i18n.localize(`${CONSTANTS.MODULE_NAME}.CancelOperation`),\n                    callback: () => warn(`Canceled`),\n                },\n            },\n            default: \"Cancel\",\n            close: () => {},\n        });\n        playlistPrompt.render(true);\n    }\n\n    /**\n     * Called by the dialogue to begin the importation process. This is the function that starts the process.\n     * @param {string} source\n     * @param {string} path\n     */\n    async beginPlaylistImport(source, path) {\n        const shouldDeletePlaylist = game.settings.get(CONSTANTS.MODULE_NAME, \"shouldDeletePlaylist\");\n        if (shouldDeletePlaylist) {\n            const playlists = game.playlists?.contents;\n            for (const playlist of playlists) {\n                const playlistHasFlag = playlist.getFlag(CONSTANTS.MODULE_NAME, \"isPlaylistImported\");\n                if (String(playlistHasFlag) === \"true\") {\n                    await playlist.delete();\n                }\n            }\n        }\n\n        //const fs = require(\"fs\");\n        const options = {};\n        if (source === \"s3\") {\n            options[\"bucket\"] = game.settings.get(CONSTANTS.MODULE_NAME, \"bucket\");\n        }\n\n        FilePicker.browse(source, path, options).then(async (resp) => {\n            try {\n                const localDirs = resp.dirs || [];\n                let finishedDirs = 0;\n                // $('#total_playlists').html((localDirs.length));\n                const dirName = resp.target;\n                const playlistName = PlaylistImporter._convertToUserFriendly(PlaylistImporter._getBaseName(dirName));\n                const success = await this._generatePlaylist(playlistName, dirName);\n                debug(`TT: ${dirName}: ${success} on creating playlists`);\n                await this._getItemsFromDir(source, dirName, playlistName, options);\n\n                for (const dirName of localDirs) {\n                    if (resp.target != dirName && !this._blackList.includes(dirName)) {\n                        finishedDirs = this._searchOnSubFolder(source, dirName, options, playlistName, finishedDirs);\n                        this._blackList.push(dirName);\n                    }\n                }\n\n                $(\"#finished_playlists\").html(++finishedDirs);\n\n                debug(`Operation Completed. Thank you!`);\n                $(\"#total_playlists\").html(this._blackList.length);\n                this._playlistCompletePrompt();\n            } finally {\n                this._blackList = [];\n            }\n        });\n    }\n\n    _blackList = [];\n\n    _searchOnSubFolder(source, path, options, dirNameParent, finishedDirs) {\n        FilePicker.browse(source, path, options).then(async (resp) => {\n            const localDirs = resp.dirs || [];\n            // let finishedDirs = 0;\n            //$('#total_playlists').html((localDirs.length));\n            const dirName = resp.target;\n            const playlistName = PlaylistImporter._convertToUserFriendly(PlaylistImporter._getBaseName(dirName));\n            let dirNameCustom = dirNameParent ? dirNameParent + \"_\" + playlistName : playlistName;\n            if (game.settings.get(CONSTANTS.MODULE_NAME, \"maintainOriginalFolderName\")) {\n                dirNameCustom = playlistName;\n            }\n            const myPlaylistLists = game.playlists?.contents.filter((p) => p.name === dirNameCustom) || [];\n            const myPlaylistExists = myPlaylistLists.length > 0 ? true : false;\n            const shouldOverridePlaylist = game.settings?.get(CONSTANTS.MODULE_NAME, \"shouldOverridePlaylist\");\n            if (myPlaylistExists && !shouldOverridePlaylist) {\n                dirNameCustom = dirNameCustom + \"-\" + myPlaylistLists.length;\n            }\n\n            const success = await this._generatePlaylist(dirNameCustom, dirName);\n            if (this.DEBUG) console.log(`TT: ${dirName}: ${success} on creating playlists`);\n            await this._getItemsFromDir(source, dirName, dirNameCustom, options);\n            // $('#finished_playlists').html(++finishedDirs);\n\n            for (const dirName of localDirs) {\n                if (resp.target != dirName && !this._blackList.includes(dirName)) {\n                    finishedDirs = this._searchOnSubFolder(source, dirName, options, dirNameCustom, finishedDirs);\n                    this._blackList.push(dirName);\n                }\n            }\n            return finishedDirs;\n        });\n    }\n}\n\nPlaylistImporterInitializer.initialize();\n"],"names":["info","error","playlist","dirName"],"mappings":"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"}