(()=>{"use strict";const COC7={eras:{standard:"CoC7.Era1920",modern:"CoC7.EraModern",modernPulp:"CoC7.EraModernPulp",pulp:"CoC7.EraPulp",downDarkerTrails:"CoC7.EraDownDarkerTrails",downDarkerTrailsPulp:"CoC7.EraDownDarkerTrailsPulp",darkAges:"CoC7.EraDarkAges",darkAgesPulp:"CoC7.EraDarkAgesPulp",regency:"CoC7.EraRegency",regencyPulp:"CoC7.EraRegencyPulp",reignOfTerror:"CoC7.EraReignOfTerror",gasLight:"CoC7.EraGasLight",invictus:"CoC7.EraInvictus"},monetaryFormatKeys:{decimalLeft:"decimalLeft",decimalRight:"decimalRight",integerLeft:"integerLeft",integerRight:"integerRight",lsd:"lsd",roman:"roman"},monetaryFormats:{decimalLeft:"CoC7.MonetaryFormatDecimalLeft",decimalRight:"CoC7.MonetaryFormatDecimalRight",integerLeft:"CoC7.MonetaryFormatIntegerLeft",integerRight:"CoC7.MonetaryFormatIntegerRight",lsd:"CoC7.MonetaryFormatLsd",roman:"CoC7.MonetaryFormatRoman"},monetaryTypeKeys:{none:"none",asses:"asses",sestertii:"sestertii",quinarii:"quinarii",denarii:"denarii",d:"d",s:"s",value:"value",multiplier:"multiplier"},monetaryTypes:{none:{name:"CoC7.MonetaryTypeNone",filter:[]},asses:{name:"CoC7.MonetaryTypeAsses",filter:["roman"]},sestertii:{name:"CoC7.MonetaryTypeSestertii",filter:["roman"]},quinarii:{name:"CoC7.MonetaryTypeQuinarii",filter:["roman"]},denarii:{name:"CoC7.MonetaryTypeDenarii",filter:["roman"]},d:{name:"CoC7.MonetaryTypeDeniers",filter:["lsd"]},s:{name:"CoC7.MonetaryTypeSous",filter:["lsd"]},value:{name:"CoC7.MonetaryTypeOne",filter:[]},multiplier:{name:"CoC7.MonetaryTypeCreditRating",filter:[]}},characteristics:{str:"CoC7.CharacStr",con:"CoC7.CharacCon",siz:"CoC7.CharacSiz",dex:"CoC7.CharacDex",app:"CoC7.CharacApp",int:"CoC7.CharacInt",pow:"CoC7.CharacPow",edu:"CoC7.CharacEdu"},skillProperties:{noadjustments:"CoC7.SkillNoAdjustments",noxpgain:"CoC7.SkillNoXpGain",special:"CoC7.SkillSpecial",rarity:"CoC7.SkillRarity",push:"CoC7.SkillPush",combat:"CoC7.SkillCombat",fighting:"CoC7.SkillFighting",firearm:"CoC7.SkillFirearm",ranged:"CoC7.SkillRanged",requiresname:"CoC7.SkillRequiresName",keepbasevalue:"CoC7.SkillKeepBaseValue",picknameonly:"CoC7.SkillPickNameOnly",onlyone:"CoC7.SkillSpecializationIsUnique"},weaponProperties:{melee:"CoC7.Weapon.Property.Melee",rngd:"CoC7.WeaponRngd",mnvr:"CoC7.WeaponProperyManeuver",thrown:"CoC7.Weapon.Property.Thrown",shotgun:"CoC7.Weapon.Property.Shotgun",dbrl:"CoC7.WeaponDbrl",impl:"CoC7.WeaponImpl",brst:"CoC7.WeaponBrst",auto:"CoC7.WeaponAuto",ahdb:"CoC7.WeaponAhdb",addb:"CoC7.WeaponAddb",slnt:"CoC7.WeaponSlnt",spcl:"CoC7.WeaponSpcl",mont:"CoC7.WeaponMont",blst:"CoC7.WeaponBlst",stun:"CoC7.WeaponStun",rare:"CoC7.WeaponRare",burn:"CoC7.Weapon.Property.Burn"},spellProperties:{call:"CoC7.CallSpell",dismiss:"CoC7.DismissSpell",contact:"CoC7.ContactSpell",summon:"CoC7.SummonSpell",bind:"CoC7.BindSpell",enchantment:"CoC7.EnchantmentSpell",gate:"CoC7.GateSpell",combat:"CoC7.CombatSpell"},bookType:{mythos:"CoC7.MythosBook",occult:"CoC7.OccultBook",other:"CoC7.Other"},talentType:{physical:"CoC7.PhysicalTalent",mental:"CoC7.MentalTalent",combat:"CoC7.CombatTalent",miscellaneous:"CoC7.MiscellaneousTalent",basic:"CoC7.BasicTalent",insane:"CoC7.InsaneTalent",other:"CoC7.OtherTalent"},statusType:{mania:"CoC7.Mania",phobia:"CoC7.Phobia"},occupationProperties:{classic:"CoC7.Classic",lovecraftian:"CoC7.Lovecraftian",modern:"CoC7.Modern",pulp:"CoC7.Pulp"},formula:{}};COC7.formula.actor={"@STR":"this.system.characteristics.str.value","@CON":"this.system.characteristics.con.value","@SIZ":"this.system.characteristics.siz.value","@DEX":"this.system.characteristics.dex.value","@APP":"this.system.characteristics.app.value","@INT":"this.system.characteristics.int.value","@POW":"this.system.characteristics.pow.value","@EDU":"this.system.characteristics.edu.value"},COC7.formula.actorsheet={"@STR":"this.actor.system.characteristics.str.value","@CON":"this.actor.system.characteristics.con.value","@SIZ":"this.actor.system.characteristics.siz.value","@DEX":"this.actor.system.characteristics.dex.value","@APP":"this.actor.system.characteristics.app.value","@INT":"this.actor.system.characteristics.int.value","@POW":"this.actor.system.characteristics.pow.value","@EDU":"this.actor.system.characteristics.edu.value"},COC7.status={tempoInsane:"tempoInsane",indefInsane:"indefInsane",unconscious:"unconscious",criticalWounds:"criticalWounds",dying:"dying",prone:"prone",dead:"dead"},COC7.newBookName="CoC7.NewBookName",COC7.newSkillName="CoC7.NewSkillName",COC7.newSpellName="CoC7.NewSpellName",COC7.newItemName="CoC7.NewItemName",COC7.newWeaponName="CoC7.NewWeaponName",COC7.creatureFightingSkill="CoC7.creatureFightingSkill",COC7.fightingSpecializationName="CoC7.FightingSpecializationName",COC7.firearmSpecializationName="CoC7.FirearmSpecializationName",COC7.rangedSpecializationName="CoC7.RangedSpecializationName",COC7.combatCards={fightBack:"CoC7.FightBack",dodge:"CoC7.Dodge",maneuver:"CoC7.Maneuver",noResponse:"CoC7.NoResponse"};class CoC7ActiveEffect extends ActiveEffect{apply(actor,change){"system.attribs.armor.value"===change.key?isNaN(change.value)||isNaN(actor.system.attribs.armor.value)||(actor.system.attribs.armor.value=Number(actor.system.attribs.armor.value)):"system.attribs.db.value"===change.key&&isNaN(change.value)&&!isNaN(actor.system.attribs.db.value)&&(actor.system.attribs.db.value=String(actor.system.attribs.db.value));return super.apply(actor,change)}static onManageActiveEffect(event,owner){event.preventDefault();const a=event.currentTarget,li=a.closest("li"),effect=li.dataset.effectId?owner.effects.get(li.dataset.effectId):null;switch(a.dataset.action){case"create":return owner.createEmbeddedDocuments("ActiveEffect",[{label:game.i18n.localize("CoC7.EffectNew"),icon:"icons/svg/aura.svg",origin:owner.uuid,"duration.rounds":"temporary"===li.dataset.effectType?1:void 0,disabled:"inactive"===li.dataset.effectType}]);case"edit":return effect.sheet.render(!0);case"delete":return effect.delete();case"toggle":return effect.update({disabled:!effect.disabled})}}_prepareDuration(){const duration=super._prepareDuration();return"seconds"===duration.type&&(duration.seconds>3600?duration.label=new Date(1e3*duration.seconds).toISOString().slice(11,19):duration.seconds>100&&(duration.label=new Date(1e3*duration.seconds).toISOString().slice(14,19))),duration}static filterActiveEffects(effect,conditionName){return foundry.utils.isNewerVersion(game.version,"11")?effect.statuses.has(conditionName):effect.flags.core?.statusId===conditionName}static getStatusKey(effect){let options=[];return foundry.utils.isNewerVersion(game.version,"11")?effect.statuses.size>0&&(options=[...effect.statuses.values()]):options=[effect.getFlag("core","statusId")],options.find((v=>Object.prototype.hasOwnProperty.call(COC7.status,v)))}get isStatus(){return"string"==typeof CoC7ActiveEffect.getStatusKey(this)}static prepareActiveEffectCategories(effects,{status=!0}={}){const categories={temporary:{type:"temporary",label:game.i18n.localize("CoC7.Temporary"),effects:[]},passive:{type:"passive",label:game.i18n.localize("CoC7.Passive"),effects:[]},inactive:{type:"inactive",label:game.i18n.localize("CoC7.Inactive"),effects:[]},suppressed:{type:"suppressed",label:game.i18n.localize("CoC7.Suppressed"),effects:[],info:[game.i18n.localize("CoC7.Unavailable")]}};status&&(categories.status={type:"status",label:game.i18n.localize("Status"),effects:[]});for(const e of effects)e.isSuppressed?categories.suppressed.effects.push(e):e.isStatus?categories.status.effects.push(e):e.disabled?categories.inactive.effects.push(e):e.isTemporary?categories.temporary.effects.push(e):categories.passive.effects.push(e);return categories.suppressed.hidden=!categories.suppressed.effects.length,categories}static prepareNPCActiveEffectCategories(effects){let count=0;const categories={active:{type:"active",label:game.i18n.localize("Active"),effects:[]},inactive:{type:"inactive",label:game.i18n.localize("Inactive"),effects:[]}};for(const e of effects)count+=1,e._getSourceName(),e.isSuppressed||e.disabled?categories.inactive.effects.push(e):categories.active.effects.push(e);return count>0&&(categories.expended=!0),categories}}class CoC7Dice{static async roll(modif=0,rollMode=null,hideDice=!1){let roll,alternativeDice="";game.modules.get("dice-so-nice")?.active&&(modif<0?alternativeDice=game.settings.get("CoC7","tenDiePenalty"):modif>0&&(alternativeDice=game.settings.get("CoC7","tenDieBonus"))),roll=game.CoC7.dev.dice.alwaysCrit&&game.settings.get("CoC7","hiddendevmenu")?Roll.fromData(CoC7Dice.crit01):game.CoC7.dev.dice.alwaysFumble&&game.settings.get("CoC7","hiddendevmenu")?Roll.fromData(CoC7Dice.fumble99):await new Roll("1dt"+(""!==alternativeDice?"+1do["+alternativeDice+"]":"+1dt").repeat(Math.abs(modif))+"+1d10").roll({async:!0});const result={unit:{total:0,results:[]},tens:{total:0,results:[]},total:0,roll};rollMode&&(result.rollMode=rollMode),hideDice&&(result.hideDice=hideDice);for(const d of roll.dice)d instanceof CONFIG.Dice.terms.t?result.tens.results.push(d.total):(result.unit.total=10===d.total?0:d.total,result.unit.results.push(result.unit.total));if(modif<0)result.tens.total=0===result.unit.total&&result.tens.results.includes(0)?100:Math.max(...result.tens.results);else if(0===result.unit.total){const dice=result.tens.results.filter((t=>t>0));result.tens.total=0===dice.length?100:Math.min(...dice)}else result.tens.total=Math.min(...result.tens.results);return result.total=result.unit.total+result.tens.total,result}static async showRollDice3d(roll){if(game.modules.get("dice-so-nice")?.active){const syncDice=game.settings.get("CoC7","syncDice3d"),chatData={whisper:null,blind:!1};ChatMessage.applyRollMode(chatData,game.settings.get("core","rollMode")),await game.dice3d.showForRoll(roll,game.user,syncDice,0===chatData.whisper.length?null:chatData.whisper,chatData.blind)}}static async combinedRoll(options){options.pool=options.pool??{},options.pool[0]=!1;const keys=Object.keys(options.pool).map((v=>parseInt(v,10)));let penaltyDice=Math.abs(Math.min(0,Math.min(...keys))),bonusDice=Math.max(0,Math.max(...keys));const hasDSN=game.modules.get("dice-so-nice")?.active,pool=[];pool.push("1dt+1d10"),penaltyDice>0&&pool.push((hasDSN?"+1do["+game.settings.get("CoC7","tenDiePenalty")+"]":"+1dt").repeat(Math.abs(penaltyDice))),bonusDice>0&&pool.push((hasDSN?"+1do["+game.settings.get("CoC7","tenDieBonus")+"]":"+1dt").repeat(Math.abs(bonusDice)));const roll=await new Roll(pool.join("")).roll({async:!0}),result={groups:{baseDie:0,penaltyDice:[],bonusDice:[]},unit:0,roll};let baseSet=!1;for(const d of roll.dice)d instanceof CONFIG.Dice.terms.t?baseSet?penaltyDice>0?(result.groups.penaltyDice.push(d.total),penaltyDice--):(result.groups.bonusDice.push(d.total),bonusDice--):(result.groups.baseDie=d.total,baseSet=!0):result.unit=10===d.total?0:d.total;const output={};for(const key in options.pool){output[key]={unit:{total:result.unit,results:[result.unit]},tens:{total:0,results:[]},total:0,roll};const modif=parseInt(key,10);let modifier=modif;output[key].tens.results.push(result.groups.baseDie);for(const offset=Math.abs(modifier);modifier<0;modifier++)output[key].tens.results.push(result.groups.penaltyDice[modifier+offset]);for(const offset=modifier;modifier>0;modifier--)output[key].tens.results.push(result.groups.bonusDice[Math.abs(modifier-offset)]);if(modif<0)output[key].tens.total=0===output[key].unit.total&&output[key].tens.results.includes(0)?100:Math.max(...output[key].tens.results);else if(0===output[key].unit.total){const dice=output[key].tens.results.filter((t=>t>0));output[key].tens.total=0===dice.length?100:Math.min(...dice)}else output[key].tens.total=Math.min(...output[key].tens.results);output[key].total=output[key].unit.total+output[key].tens.total}return output}static fumble99={class:"Roll",options:{},dice:[],formula:"1dt + 1d10",terms:[{class:"CoC7DecaderDie",options:{},evaluated:!0,number:1,faces:10,modifiers:[],results:[{result:9,active:!0}]},{class:"OperatorTerm",options:{},evaluated:!0,operator:"+"},{class:"Die",options:{},evaluated:!0,number:1,faces:10,modifiers:[],results:[{result:9,active:!0}]}],total:99,evaluated:!0};static crit01={class:"Roll",options:{},dice:[],formula:"1dt + 1d10",terms:[{class:"CoC7DecaderDie",options:{},evaluated:!0,number:1,faces:10,modifiers:[],results:[{result:10,active:!0}]},{class:"OperatorTerm",options:{},evaluated:!0,operator:"+"},{class:"Die",options:{},evaluated:!0,number:1,faces:10,modifiers:[],results:[{result:1,active:!0}]}],total:1,evaluated:!0}}class CoC7Item extends Item{constructor(data,context){if(data.type in CONFIG.Item.documentClasses&&!context?.extended)return new CONFIG.Item.documentClasses[data.type](data,{extended:!0,...context});void 0===data.img&&("skill"===data.type?data.img="systems/CoC7/assets/icons/skills.svg":"status"===data.type?data.img="icons/svg/aura.svg":"weapon"===data.type&&(data.img="icons/svg/sword.svg")),super(data,context)}async _createDocumentLink(eventData,{relativeTo,label}={}){if("string"==typeof eventData.type&&"string"==typeof eventData.uuid&&"Item"===eventData.type&&eventData.uuid.match(/^Actor\./)&&relativeTo instanceof CONFIG.JournalEntryPage.documentClass){const item=await fromUuid(eventData.uuid);if(["skill","weapon"].includes(item.type))return"@coc7.check[type:"+item.type+",name:"+item.name+"]"}return super._createDocumentLink(eventData,{relativeTo,label})}static get iconLanguage(){return"systems/CoC7/assets/icons/skills/language.svg"}static get flags(){return{malfunction:"malfc"}}async toggleProperty(propertyId,override=!1){let fighting,firearms,ranged,checkedProps={};if(void 0!==COC7.eras[propertyId])return CoCIDEditor.eraToggle(this,propertyId);if("weapon"!==this.type||override){if("skill"===this.type&&!override){let modif=!1;switch(propertyId){case"combat":this.system.properties.combat?checkedProps={"system.properties.combat":!1,"system.properties.special":!1,"system.properties.fighting":!1,"system.properties.firearm":!1,"system.properties.ranged":!1,"system.specialization":"",name:this.system.skillName}:fighting=!0,modif=!0;break;case"fighting":this.system.properties.fighting||(modif=!0,firearms=!1,ranged=!1,fighting=!0);break;case"firearm":this.system.properties.firearm||(modif=!0,firearms=!0,ranged=!1,fighting=!1),modif=!0;break;case"ranged":this.system.properties.ranged||(modif=!0,firearms=!1,ranged=!0,fighting=!1),modif=!0}if(modif)if(fighting){checkedProps={"system.properties.fighting":!0,"system.properties.firearm":!1,"system.properties.ranged":!1,"system.properties.combat":!0,"system.properties.special":!0};const parts=CoC7Item.getNamePartsSpec(this.system.skillName,game.i18n.localize(COC7.fightingSpecializationName));checkedProps.name=parts.name,checkedProps.skillName=parts.skillName,checkedProps["system.specialization"]=parts.specialization}else if(firearms){checkedProps={"system.properties.fighting":!1,"system.properties.firearm":!0,"system.properties.ranged":!1,"system.properties.combat":!0,"system.properties.special":!0};const parts=CoC7Item.getNamePartsSpec(this.system.skillName,game.i18n.localize(COC7.firearmSpecializationName));checkedProps.name=parts.name,checkedProps.skillName=parts.skillName,checkedProps["system.specialization"]=parts.specialization}else if(ranged){checkedProps={"system.properties.fighting":!1,"system.properties.firearm":!1,"system.properties.ranged":!0,"system.properties.combat":!0,"system.properties.special":!0};const parts=CoC7Item.getNamePartsSpec(this.system.skillName,game.i18n.localize(COC7.rangedSpecializationName));checkedProps.name=parts.name,checkedProps.skillName=parts.skillName,checkedProps["system.specialization"]=parts.specialization}}}else if("ahdb"===propertyId&&(checkedProps=this.system.properties.ahdb?{"system.properties.ahdb":!1}:{"system.properties.ahdb":!0,"system.properties.addb":!1}),"addb"===propertyId&&(checkedProps=this.system.properties.addb?{"system.properties.addb":!1}:{"system.properties.addb":!0,"system.properties.ahdb":!1}),"shotgun"===propertyId&&(checkedProps=this.system.properties.shotgun?{"system.properties.shotgun":!1,"system.range.extreme.value":null,"system.range.extreme.damage":null,"system.range.long.value":null,"system.range.long.damage":null}:{"system.properties.rngd":!0,"system.properties.melee":!1,"system.properties.shotgun":!0}),"melee"===propertyId||"rngd"===propertyId){let meleeWeapon;"melee"!==propertyId||this.system.properties.melee||(meleeWeapon=!0),"melee"===propertyId&&this.system.properties.melee&&(meleeWeapon=!1),"rngd"!==propertyId||this.system.properties.rngd||(meleeWeapon=!1),"rngd"===propertyId&&this.system.properties.rngd&&(meleeWeapon=!0),checkedProps=meleeWeapon?{"system.properties.melee":!0,"system.properties.rngd":!1,"system.properties.shotgun":!1,"system.properties.brst":!1,"system.properties.auto":!1,"system.properties.dbrl":!1}:{"system.properties.melee":!1,"system.properties.rngd":!0}}if("special"===propertyId&&(checkedProps=this.system.properties[propertyId]?{"system.properties.special":!1,"system.properties.fighting":!1,"system.properties.firearm":!1,"system.properties.ranged":!1,"system.properties.combat":!1,"system.specialization":"",name:this.system.skillName}:{"system.properties.special":!0,name:this.system.specialization+" ("+this.system.skillName+")"}),Object.keys(checkedProps).length>0){return await this.update(checkedProps)}{const propName=`system.properties.${propertyId}`,propValue=!this.system.properties[propertyId];await this.update({[propName]:propValue}).then((item=>item))}}hasProperty(propertyId){return this.isIncludedInSet("properties",propertyId)}get shortName(){return this.system.properties.special?this.system.skillName:this.name}async updateRoll(roll){return"updateRoll"in this.sheet?await this.sheet.updateRoll(roll):"updateRoll"in this?await this.updateRoll(roll):void 0}static getNamePartsSpec(skillName,specialization){if(!specialization)return{name:skillName,specialization:"",skillName};const specNameRegex=new RegExp("^("+CoC7Utilities.quoteRegExp(specialization)+")\\s*\\((.+)\\)$","i"),match=skillName.match(specNameRegex);return match&&(specialization=match[1],skillName=match[2]),{name:specialization+" ("+skillName+")",specialization,skillName}}static getNameWithoutSpec(item){if(item instanceof CoC7Item){if(item.system?.properties?.special&&void 0!==item.system.skillName)return item.system.skillName}else if(item.properties?.special&&void 0!==item.skillName)return item.skillName;return item.name}static isAnySpec(item){return!("skill"!==item.type||!item.system.properties?.special)&&(!(!item.system.properties?.requiresname&&!item.system.properties?.picknameonly)||[game.i18n.localize("CoC7.AnySpecName").toLowerCase(),"any"].includes(CONFIG.Item.documentClasses.skill.guessNameParts(item.name).skillName.toLowerCase()))}async checkSkillProperties(){if("skill"!==this.type)return;const checkedProps={};return this.system.properties.combat?(this.system.properties.special||(this.system.properties.special=!0,checkedProps["system.properties.special"]=!0),this.system.properties.fighting||this.system.properties.firearm||(this.system.properties.fighting=!0,checkedProps["system.properties.fighting"]=!0),!this.system.properties.fighting||this.system.specialization&&""!==this.system.specialization||(this.system.specialization=game.i18n.localize(COC7.fightingSpecializationName),checkedProps["system.specialization"]=game.i18n.localize(COC7.fightingSpecializationName)),!this.system.properties.firearm||this.system.specialization&&""!==this.system.specialization||(this.system.specialization=game.i18n.localize(COC7.firearmSpecializationName),checkedProps["system.specialization"]=game.i18n.localize(COC7.firearmSpecializationName))):(this.system.properties.fighting&&(this.system.properties.fighting=!1,checkedProps["system.properties.fighting"]=!1),this.system.properties.firearm&&(this.system.properties.firearm=!1,checkedProps["system.properties.firearm"]=!1)),Object.keys(checkedProps).length>0&&await this.update(checkedProps),checkedProps}isIncludedInSet(set,propertyId){this.system[set]||(this.system[set]=[]);return this.system[set].indexOf(propertyId)>-1}async flagForDevelopement(){(game.settings.get("CoC7","xpEnabled")||game.user.isGM)&&(this.system.flags||await this.update({"system.flags":{}}),await this.update({"system.flags.developement":!0}))}async unflagForDevelopement(){(game.settings.get("CoC7","xpEnabled")||game.user.isGM)&&(this.system.flags||await this.update({"system.flags":{}}),await this.update({"system.flags.developement":!1}))}get developementFlag(){return this.getItemFlag("developement")}async toggleItemFlag(flagName,eraseAdjustment=!0){const flagValue=!this.getItemFlag(flagName),name=`system.flags.${flagName}`;"occupation"!==flagName&&"archetype"!==flagName||flagValue||!eraseAdjustment?"developement"===flagName?game.settings.get("CoC7","xpEnabled")||game.user.isGM?await this.update({[name]:flagValue}):ui.notifications.info(game.i18n.localize("CoC7.SkillXpGainDisabled")):await this.update({[name]:flagValue}):await this.update({[`system.adjustments.${flagName}`]:null,[name]:flagValue})}async setItemFlag(flagName){await this.update({[`system.flags.${flagName}`]:!0})}async unsetItemFlag(flagName,eraseAdjustment=!0){const name=`system.flags.${flagName}`;"occupation"!==flagName&&"archetype"!==flagName||!eraseAdjustment?await this.update({[name]:!1}):await this.update({[`system.adjustments.${flagName}`]:null,[name]:!1})}getItemFlag(flagName){return this.system.flags?!!this.system.flags[flagName]&&this.system.flags[flagName]:(this.system.flags={},this.system.flags.locked=!0,this.update({"system.flags":{}}),!1)}get usesAlternativeSkill(){return"weapon"===this.type&&(!0===this.system.properties?.auto||!0===this.system.properties?.brst||!0===this.system.properties?.thrown)}get maxUsesPerRound(){if("weapon"!==this.type)return null;const multiShot=parseInt(this.system.usesPerRound.max);return isNaN(multiShot)?0:multiShot}get usesPerRound(){if("weapon"!==this.type)return null;const singleShot=parseInt(this.system.usesPerRound.normal);return isNaN(singleShot)?0:singleShot}get usesPerRoundString(){let usesPerRound;return usesPerRound=this.system.usesPerRound.normal?this.system.usesPerRound.normal:"1",this.system.usesPerRound.max&&(usesPerRound+=`(${this.system.usesPerRound.max})`),this.system.properties.auto&&(usesPerRound+=` ${game.i18n.localize("CoC7.WeaponAuto")}`),this.system.properties.brst&&(usesPerRound+=` ${game.i18n.localize("CoC7.WeaponBrst")}`,this.system.usesPerRound.burst&&(usesPerRound+=`(${this.system.usesPerRound.burst})`)),usesPerRound}get multipleShots(){return"weapon"!==this.type?null:!(this.maxUsesPerRound<=1)}get singleShot(){return"weapon"!==this.type?null:!!this.usesPerRound}get baseRange(){return parseInt(this.system.range.normal.value)}get longRange(){return parseInt(this.system.range.long.value)}get extremeRange(){return parseInt(this.system.range.extreme.value)}get skillProperties(){if("skill"!==this.type)return[];const skillProperties=[];for(const[key,value]of Object.entries(COC7.skillProperties))!0===this.system.properties[key]&&skillProperties.push(game.i18n.localize(value));return skillProperties}static async calculateBase(actor,data){if("skill"!==data.type)return null;if(String(data.system.base).includes("@")){const parsed={};for(const[key,value]of Object.entries(COC7.formula.actorsheet))key.startsWith("@")&&value.startsWith("this.actor.")&&(parsed[key.substring(1)]=foundry.utils.getProperty(actor,value.substring(11)));let value;try{value=Math.floor(new Roll(data.system.base,parsed)[foundry.utils.isNewerVersion(game.version,"12")?"evaluateSync":"evaluate"]({maximize:!0}).total)}catch(err){value=0}return value}return isNaN(parseInt(data.system.base))?null:parseInt(data.system.base)}get _base(){if("skill"!==this.type)return[null,!1];if("string"!=typeof this.system.base)return[this.system.base,!1];if(this.system.base.includes("@")){const parsed={};for(const[key,value]of Object.entries(COC7.formula.actorsheet))key.startsWith("@")&&value.startsWith("this.")&&(parsed[key.substring(1)]=foundry.utils.getProperty(this,value.substring(5)));let value;try{value=Math.floor(new Roll(this.system.base,parsed)[foundry.utils.isNewerVersion(game.version,"12")?"evaluateSync":"evaluate"]({maximize:!0}).total)}catch(err){value=0}return[value,!0]}return[isNaN(parseInt(this.system.base))?null:parseInt(this.system.base),!1]}async asyncBase(){const e=this._base;return e[1]&&(console.info(`[COC7] (${this.parent?.name}) Evaluating skill ${this.name}:${this.system.base} to ${e[0]}`),await this.update({"system.base":e[0]})),e[0]}get base(){const e=this._base;return e[1]&&this.update({"system.base":e[0]}),e[0]}getBulletLeft(){return"weapon"!==this.type?null:this.system.ammo?this.system.ammo:(this.setBullets(0),0)}async reload(){if("weapon"!==this.type)return null;const maxBullet=this.system.bullets?parseInt(this.system.bullets):1;await this.setBullets(maxBullet)}async setBullets(bullets){if("weapon"!==this.type)return null;await this.update({"system.ammo":bullets||0})}async addBullet(){if("weapon"!==this.type)return null;const bullets=await this.getBulletLeft(),maxBullets=this.system.bullets?parseInt(this.system.bullets):1;bullets+1>=maxBullets?await this.setBullets(maxBullets):await this.setBullets(bullets+1)}async shootBullets(x){if("weapon"!==this.type)return null;const bullets=await this.getBulletLeft();x>bullets?await this.setBullets(0):await this.setBullets(bullets-x)}static mergeOptionalSkills(skillList,options){return skillList.concat(options).reduce(((newArray,item)=>!CoC7Item.isAnySpec(item)&&newArray.find((skill=>skill.name===item.name))?newArray:[...newArray,item]),[]).sort(CoC7Utilities.sortByNameKey)}static _getChatCardActor(card){const tokenKey=card.dataset.tokenId;if(tokenKey){const[sceneId,tokenId]=tokenKey.split(".");if("TOKEN"===sceneId)return game.actors.tokens[tokenId];{const scene=game.scenes.get(sceneId);if(!scene)return null;const tokenData=scene.getEmbeddedDocument("Token",tokenId);if(!tokenData)return null;return new Token(tokenData).actor}}const actorId=card.dataset.actorId;return game.actors.get(actorId)||null}async getChatData(htmlOptions={}){htmlOptions.async=!0;const data=foundry.utils.duplicate(this.system);"string"==typeof data.description&&(data.description={value:data.description,special:""}),void 0===data.description.value&&(data.description.value=""),void 0===data.description.special&&(data.description.special="");const labels=[];data.description.value=await TextEditor.enrichHTML(data.description.value,htmlOptions),data.description.special=await TextEditor.enrichHTML(data.description.special,htmlOptions);const props=[],fn=this[`_${this.type}ChatData`];if(fn&&fn.bind(this)(data,labels,props,htmlOptions),"skill"===this.type)for(const[key,value]of Object.entries(COC7.skillProperties))!0===this.system.properties[key]&&props.push(value);return data.properties=props.filter((p=>!!p)),data.labels=labels,data}_weaponChatData(data,labels,props){for(const[key,value]of Object.entries(COC7.weaponProperties))!0===this.system.properties[key]&&props.push(value);let skillLabel=game.i18n.localize("CoC7.Skill"),skillName="",found=!1;if(this.system.skill.main.id){const skill=this.actor?.items.get(this.system.skill.main.id);skill&&(skillName+=CoC7Item.getNameWithoutSpec(skill),found=!0)}if(this.usesAlternativeSkill&&this.system.skill.alternativ.id){skillLabel=game.i18n.localize("CoC7.Skills");const skill=this.actor?.items.get(this.system.skill.alternativ.id);skill&&(skillName+=`/${CoC7Item.getNameWithoutSpec(skill)}`,found=!0)}found||(skillName=this.system.skill.main.name,this.usesAlternativeSkill&&this.system.skill.alternativ.name&&(skillName+=`/${this.system.skill.alternativ.name}`)),skillName&&labels.push({name:skillLabel,value:skillName}),labels.push({name:game.i18n.localize("CoC7.WeaponUsesPerRound"),value:this.usesPerRoundString}),labels.push({name:game.i18n.localize("CoC7.WeaponMalfunction"),value:this.system.malfunction?this.system.malfunction:"-"}),this.system.bullets&&labels.push({name:game.i18n.localize("CoC7.WeaponBulletsInMag"),value:this.system.bullets})}canBePushed(){return!("skill"!==this.type||!this.system.properties.push)}get impale(){return this.system.properties.impl}get isDodge(){return"skill"===this.type&&this.name.toLowerCase()===game.i18n.localize("CoC7.CoCIDFlag.keys.i.skill.dodge").toLowerCase()}}function createInlineRoll(roll){const data={cls:["inline-roll"],dataset:{}};try{data.cls.push("inline-result"),data.result=roll.total,data.title=roll.formula,data.dataset.roll=escape(JSON.stringify(roll))}catch(err){return null}const a=document.createElement("a");a.classList.add(...data.cls),a.title=data.title;for(const[k,v]of Object.entries(data.dataset))a.dataset[k]=v;return a.innerHTML=`<i class="fas fa-dice-d20"></i> ${data.result}`,a}function isCtrlKey(event){return!1!==event&&(event.metaKey||event.ctrlKey||91===event.keyCode||224===event.keyCode)}class chatHelper{static hyphenToCamelCase(string){return string.replace(/-([a-z])/g,(function(string){return string[1].toUpperCase()}))}static async createMessage(title,message,options={}){const messageData={};messageData.flavor=title,messageData.speaker=options.speaker||ChatMessage.getSpeaker(),options.whisper&&(messageData.type=CONST.CHAT_MESSAGE_TYPES.WHISPER,messageData.whisper=options.whisper),void 0!==options.roll&&(messageData.roll=options.roll,messageData.type=CONST.CHAT_MESSAGE_TYPES.ROLL,messageData.rollMode=CONST.DICE_ROLL_MODES.SELF),messageData.user=game.user.id,messageData.content=message,ChatMessage.create(messageData).then((msg=>msg))}static camelCaseToHyphen(string){return string.replace(/([A-Z])/g,(function(string){return"-"+string.toLowerCase()}))}static getActorFromKey(key){if(!key)return null;if(CoC7Utilities.isDocumentUuid(key))return CoC7Utilities.isDocumentUuidPack(key)?fromUuid(key):CoC7Utilities.SfromUuid(key);if(key.includes(".")){const[sceneId,tokenId]=key.split(".");if("TOKEN"===sceneId)return game.actors.tokens[tokenId];const token=chatHelper.getTokenFromKey(key);return token?.actor}return game.actors.get(key)||null}static getSpeakerFromKey(actorKey){const speaker={},actor=chatHelper.getActorFromKey(actorKey);if(actorKey.includes(".")){const[sceneId,tokenId]=actorKey.split(".");speaker.token=tokenId,speaker.scene=sceneId,actor.token?.name&&(speaker.alias=actor.token.name),speaker.actor=actor.id}else speaker.actor=actorKey,speaker.alias=actor.name;return speaker}static attachObjectToElement(object,element,objectName=""){for(const prop of Object.keys(object))prop.startsWith("_")||("object"==typeof object[prop]?chatHelper.attachObjectToElement(object[prop],element,`${objectName}:${prop}:`):element.dataset[`${objectName}${prop}`]=object[prop])}static getObjectFromElement(object,element){function deserialize(obj,key,value){if(key.startsWith(":")){const s=key.slice(1),objProp=s.slice(s.indexOf(":")+1),objName=s.substring(0,s.indexOf(":"));void 0===obj[objName]&&(obj[objName]={}),deserialize(obj[objName],objProp,value)}else"true"===value?obj[key]=!0:"false"===value?obj[key]=!1:Number(value).toString()===value?obj[key]=Number(value):obj[key]=value}if(element&&object)for(const prop of Object.keys(element.dataset)){if("template"===prop)return;deserialize(object,prop,element.dataset[prop])}}static getTokenFromKey(key){if(!key)return null;if(key.includes(".")){const[sceneId,tokenId]=key.split(".");if("TOKEN"===sceneId){const tokenDoc=game.actors.tokens[tokenId]?.token;return tokenDoc.object}{const scene=game.scenes.get(sceneId);if(!scene)return null;const tokenData=scene.getEmbeddedDocument("Token",tokenId);if(!tokenData)return null;const token=new Token(tokenData);return token.scene||(token.scene=foundry.utils.duplicate(scene.document)),token}}{const actor=game.actors.get(key);return chatHelper.getActorToken(actor)}}static getActorToken(actor){return actor?actor.token||actor.prototypeToken:null}static getActorImgFromKey(actorKey){if(!actorKey)return null;if(game.settings.get("CoC7","useToken")){const token=chatHelper.getTokenFromKey(actorKey);if(token&&(token.document||token).texture.src&&-1===(token.document||token).texture.src.indexOf("*"))return(token.document||token).texture.src}const actor=chatHelper.getActorFromKey(actorKey);return game.settings.get("CoC7","useToken")&&actor.prototypeToken&&actor.prototypeToken.texture.src&&-1===actor.prototypeToken.texture.src?.indexOf("*")?actor.prototypeToken.texture.src:actor.img}static getDistance(startToken,endToken){if(void 0===endToken.center&&void 0!==endToken.id&&startToken.scene?.id){const scene=game.scenes.get(startToken.scene.id);if(void 0!==scene?.tokens){const tokens=scene?.tokens.filter((token=>token.actor.id===endToken.data.document.id)).map((token=>token.object));1===tokens.length&&(endToken=tokens[0])}}let distance={gridUnit:0,value:0,unit:canvas.scene.grid.units};if(void 0!==startToken&&void 0!==startToken.center&&void 0!==endToken&&void 0!==endToken.center){const ray=new Ray(startToken.center,endToken.center),segment=[{ray}];if(distance={gridUnit:ray.distance/canvas.scene.grid.size,value:canvas.grid.measureDistances(segment,{gridSpaces:game.settings.get("CoC7","gridSpaces")})[0],unit:canvas.scene.grid.units},game.settings.get("CoC7","distanceElevation")){const elevation=Math.abs((startToken.document.elevation||0)-(endToken.document.elevation||0));distance.value=Math.sqrt(distance.value*distance.value+elevation*elevation)}}else game.settings.get("CoC7","distanceTheatreOfTheMind")||ui.notifications.warn(game.i18n.localize("CoC7.MessageDistanceCalculationFailure"));return distance}static toYards(distance){return"ft"===distance.unit?distance.value/3:distance.value}}class CoC7Roll{static getFromCard(card){const rollDiv=card.querySelector("div.dice-roll");if(!rollDiv)return null;const roll=new CoC7Roll;return chatHelper.getObjectFromElement(roll,rollDiv),roll}get resultType(){switch(this.successLevel=parseInt(this.successLevel),this.successLevel){case CoC7Check.successLevel.regular:return game.i18n.format("CoC7.RegularSuccess");case CoC7Check.successLevel.hard:return game.i18n.format("CoC7.HardSuccess");case CoC7Check.successLevel.extreme:return game.i18n.format("CoC7.ExtremeSuccess");case CoC7Check.successLevel.critical:return game.i18n.format("CoC7.CriticalSuccess");case CoC7Check.successLevel.fumble:return game.i18n.format("CoC7.Fumble");case CoC7Check.successLevel.failure:return game.i18n.format("CoC7.Failure");default:return null}}get actor(){return this.actorKey?chatHelper.getActorFromKey(this.actorKey):null}get item(){return this.itemId&&this.actor?this.actor.items.get(this.itemId):null}get skill(){return this.skillId&&this.actor?this.actor.items.get(this.skillId):null}showDiceRoll(){if(game.modules.get("dice-so-nice")?.active){const diceResults=[];for(const dieResult of this.dices.tens)diceResults.push(100===dieResult.value?0:dieResult.value/10);diceResults.push(this.dices.unit.value);const diceData={formula:`${this.dices.tens.length}d100+1d10`,results:diceResults,whisper:null,blind:!1};game.dice3d.show(diceData)}}static getFromElement(element,object=null){if(!element)return;const roll=object||new CoC7Roll;chatHelper.getObjectFromElement(roll,element),roll.dices={tens:[],unit:{}},chatHelper.getObjectFromElement(roll.dices,element.querySelector(".dice-result")),roll.dices.hasBonus=0!==roll.diceModifier,roll.dices.bonus=Math.abs(roll.diceModifier),roll.dices.bonusType=roll.diceModifier<0?game.i18n.format("CoC7.DiceModifierPenalty"):game.i18n.format("CoC7.DiceModifierBonus");const tenDice=element.querySelector(".ten-dice");if(tenDice)for(const d of tenDice.querySelectorAll("li")){const die={selected:!1,isMax:!1,isMin:!1,value:-1};chatHelper.getObjectFromElement(die,d),roll.dices.tens.push(die)}const unitDie=element.querySelector(".unit-die")?element.querySelector(".unit-die").querySelector("li"):null;roll.dices.unit.value=unitDie?parseInt(unitDie.dataset.value):null,roll.increaseSuccess=[];const increaseSuccess=element.querySelector(".increase-success");if(increaseSuccess&&increaseSuccess.querySelectorAll("button"))for(const isl of increaseSuccess.querySelectorAll("button")){const newSuccesLevel={};chatHelper.getObjectFromElement(newSuccesLevel,isl),roll.increaseSuccess.push(newSuccesLevel)}return roll.luckNeeded&&(roll.luckNeededTxt=game.i18n.format("CoC7.SpendLuck",{luckNeededValue:roll.luckNeeded})),object?void 0:roll}static getFromCheck(check){const roll=new CoC7Roll;return roll.rollType=check.rollType,roll.side=check.side,roll.action=check.action,roll.refMessageId=check.refMessageId,roll.referenceMessageId=check.referenceMessageId,roll.successLevel=check.successLevel,roll.difficulty=check.difficulty,roll.skillId=check.skill?check.skill.id:null,roll.itemId=check.item?check.item.id:null,roll.diceMod=check.diceModifier,roll.value=parseInt(check.rawValue),roll.fumble=check.isFumble,roll.critical=check.isCritical,roll.characteristic=check.characteristic?check.characteristic:null,roll.result=check.dice.total,roll.actorKey=check.actor.tokenKey,check.actor.isToken?(roll.tokenId=check.actor.tokenKey,roll.actorId=null):(roll.tokenKey=null,roll.actorId=check.actor.tokenKey),roll}static attachCheckToElement(htmlElement,check){const roll=CoC7Roll.getFromCheck(check);return roll.attachToElement(htmlElement),roll}attachToElement(htmlElement){chatHelper.attachObjectToElement(this,htmlElement)}}class CoC7Damage{static getMainDie(damageString){return damageString.toLowerCase().includes("d20")?"d20":damageString.toLowerCase().includes("d12")?"d12":damageString.toLowerCase().includes("d10")?"d10":damageString.toLowerCase().includes("d8")?"d8":damageString.toLowerCase().includes("d4")?"d4":"d6"}static getFromElement(element,object=null){if(!element)return;const damage=object||{};chatHelper.getObjectFromElement(damage,element);const rolls=element.querySelector(".dice-rolls").querySelectorAll("li");damage.rolls=[];for(const r of rolls){const roll={};chatHelper.getObjectFromElement(roll,r),damage.rolls.push(roll)}return object?void 0:damage}}class AverageParentheticalTerm extends ParentheticalTerm{_evaluateSync({minimize=!1,maximize=!1}={}){const roll=this.roll||new AverageRoll(this.term);return this.roll=roll.evaluate({minimize,maximize,async:!1}),this.flavor&&this.roll.terms.forEach((t=>{t.options.flavor=t.options.flavor??this.flavor})),this}}class AverageRoll extends Roll{_evaluateSync({minimize=!1,maximize=!1}={}){return this.terms=this.terms.map((term=>{if(!(term instanceof RollTerm))throw new Error("Roll evaluation encountered an invalid term which was not a RollTerm instance");if(term.isIntermediate){term.evaluate({minimize,maximize,async:!1}),this._dice=this._dice.concat(term.dice);let total=term.total;return minimize&&maximize&&term.dice.length&&(total=Math.floor((term.dice[0].faces+1)/2*term.total)),new NumericTerm({number:total,options:term.options})}return term})),this.terms=this.constructor.simplifyTerms(this.terms),this.terms=this.terms.map((term=>{if(!term._evaluated){if(void 0!==term.faces)return new NumericTerm({number:Math.floor((term.faces+1)/2*term.number),options:term.options});term.evaluate({minimize,maximize,async:!1})}return term})),this._total=this._evaluateTotal(),this}static _splitParentheses(_formula){return this._splitGroup(_formula,{openRegexp:AverageParentheticalTerm.OPEN_REGEXP,closeRegexp:AverageParentheticalTerm.CLOSE_REGEXP,openSymbol:"(",closeSymbol:")",onClose:group=>{const fn=group.open.slice(0,-1),expression=group.terms.join(""),options={flavor:group.flavor?group.flavor.slice(1,-1):void 0},terms=[];if(fn in Math){const args=this._splitMathArgs(expression);terms.push(new MathTerm({fn,terms:args,options}))}else fn&&terms.push(fn),terms.push(new AverageParentheticalTerm({term:expression,options}));return terms}})}}class ActorPickerDialog extends FormApplication{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","dialog","actor-picker"],title:game.i18n.localize("CoC7.PickWhichActorTitle"),template:"systems/CoC7/templates/chat/messages/actor-picker.hbs",closeOnSubmit:!1,width:415,height:375})}activateListeners(html){super.activateListeners(html),html.on("click",".directory-item",this._onPick.bind(this)),html.find(".can-ping").hover(this._onHoverIn.bind(this),this._onHoverOut.bind(this)),html.on("click",".submit-button",this._onSubmitButton.bind(this))}_onPick(event){const li=event.currentTarget;for(const l of li.parentElement.children)l.classList.toggle("picked",l===li);this.object.selected=li.dataset.entryUuid}async _onHoverIn(event){if(event.preventDefault(),!canvas.ready)return;const li=event.currentTarget,token=(await fromUuid(li.dataset.entryUuid))?.object;token?.isVisible&&(token.controlled||(token._onHoverIn(event,{hoverOutOthers:!0}),this._highlighted=token))}_onHoverOut(event){event.preventDefault(),this._highlighted&&this._highlighted._onHoverOut(event),this._highlighted=null}async _onSubmitButton(event){this.object.resolve(await fromUuid(this.object.selected)),this.close()}static async create(){const allowedTypes=["character","npc","creature"];let found=[];if(game.user.isGM&&canvas.ready&&canvas.tokens.controlled.length>0)found=canvas.tokens.controlled.map((t=>t.document));else{canvas.ready&&(found=canvas.tokens.placeables.filter((t=>allowedTypes.includes(t.document.actor.type)&&(t.actor.ownership[game.user.id]??t.actor.ownership.default)===CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER)).map((t=>t.document)));const foundIDs=found.map((t=>t.actorId));found=found.concat(game.actors.filter((a=>allowedTypes.includes(a.type)&&!foundIDs.includes(a.id)&&(a.ownership[game.user.id]??a.ownership.default)===CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER)))}if(1===found.length)return found[0];if(found.length>1){const options=[];for(const option of found){const isTokenDocument=option instanceof TokenDocument;options.push({uuid:option.uuid,name:option.name,img:isTokenDocument?option.actor.portrait:option.portrait,canPing:isTokenDocument})}options.sort(CoC7Utilities.sortByNameKey);let selected=options[1].uuid;if(game.user.character){const defaultOption=found.find((option=>(option.actorId??option.id)===game.user.character.id));defaultOption&&(selected=defaultOption.uuid)}return new Promise((resolve=>{new ActorPickerDialog({options,selected,resolve}).render(!0)}))}return ui.notifications.warn(game.i18n.localize("CoC7.WarnNoControlledActor")),null}}class CoC7GroupMessage{static async removeRoll({messageId,msg,which}){if(void 0!==messageId&&(msg=game.messages.get(messageId)),void 0!==msg.flags?.CoC7?.["group-message"]?.rollStatuses[which]){const updates={["flags.CoC7.group-message.rollStatuses.-="+which]:null};await CoC7GroupMessage.updateTheGroupMessage({msg,updates})}}static async pushMyRoll({messageId,msg,which}){void 0!==messageId&&(msg=game.messages.get(messageId));const updates={};let gmId=!1;switch(msg.canUserModify(game.user,"update")||(gmId=CoC7Utilities.getAnIdForGm()),msg.flags.CoC7["group-message"].type){case"combined":updates["flags.CoC7.group-message.wasPushed"]=!0,CoC7GroupMessage.performCombinedRoll({msg,gmId,updates,pushing:!0});break;case"opposed":{const rolls={[which]:msg.flags.CoC7["group-message"].rollStatuses[which].roll};CoC7GroupMessage.performNormalRoll({msg,rolls,gmId,updates,pushing:!0})}}}static async spendMyLuck({messageId,msg,which,index,luckAmount}){if(void 0!==messageId&&(msg=game.messages.get(messageId)),void 0!==msg.flags?.CoC7?.["group-message"]?.rollStatuses[which].completed)switch(msg.flags.CoC7["group-message"].type){case"combined":if(!luckAmount){luckAmount=CoC7Check.fromData(msg.flags?.CoC7?.["group-message"]?.rollStatuses[which].completed).increaseSuccess[index].luckToSpend??null}if(luckAmount){const actor=await CoC7GroupMessage.getActor(msg.flags.CoC7["group-message"].actorUuid);if(!(actor instanceof TokenDocument?actor.actor:actor).spendLuck(luckAmount))return void ui.notifications.error(game.i18n.format("CoC7.ErrorNotEnoughLuck",{actor:actor.name}));const updates={};for(const which in msg.flags.CoC7["group-message"].rollStatuses){const check=CoC7Check.fromData(msg.flags.CoC7["group-message"].rollStatuses[which].completed);check.increaseLuckSpend(luckAmount),updates["flags.CoC7.group-message.rollStatuses."+which+".completed"]=check.JSONRollData}if(Object.keys(updates).length)if(msg.canUserModify(game.user,"update"))await CoC7GroupMessage.updateTheGroupMessage({msg,updates});else{const gmId=CoC7Utilities.getAnIdForGm();!1!==gmId&&game.socket.emit("system.CoC7",{listener:gmId,type:"group-message-update",messageId:msg.id,updates})}}break;case"opposed":{const check=CoC7Check.fromData(msg.flags?.CoC7?.["group-message"]?.rollStatuses[which].completed);void 0!==index?check.upgradeCheck(index,!1):void 0!==luckAmount&&check.forcePass(luckAmount,!1);const updates={["flags.CoC7.group-message.rollStatuses."+which+".completed"]:check.JSONRollData};if(Object.keys(updates).length)if(msg.canUserModify(game.user,"update"))await CoC7GroupMessage.updateTheGroupMessage({msg,updates});else{const gmId=CoC7Utilities.getAnIdForGm();!1!==gmId&&game.socket.emit("system.CoC7",{listener:gmId,type:"group-message-update",messageId:msg.id,updates})}}}else ui.notifications.error("CoC7.ErrorRollAlreadyCompleted",{localize:!0})}static async updateTheGroupMessage({msg,updates,rollData}={}){if(msg?.flags?.CoC7?.["group-message"]){if(void 0===rollData){rollData={};for(const which in msg?.flags?.CoC7?.["group-message"].rollStatuses){const roll=await CoC7GroupMessage.parseRolls({roll:msg?.flags?.CoC7?.["group-message"].rollStatuses[which].roll,quick:!0});rollData[which]=roll}}const options=Object.assign({rollData},foundry.utils.mergeObject(msg.flags.CoC7["group-message"],foundry.utils.expandObject(updates)?.flags?.CoC7?.["group-message"]??{},{performDeletions:!0}));for(const which in options.rollStatuses)options.rollStatuses[which].completed&&(options.rollStatuses[which].completed=CoC7Check.fromData(options.rollStatuses[which].completed));options.allRollsCompleted=!0;for(const which in options.rollStatuses)void 0===options.rollStatuses[which].completed&&(options.allRollsCompleted=!1);switch(updates["flags.CoC7.group-message.allRollsCompleted"]=options.allRollsCompleted,options.type){case"combined":if(options.isSuccess=!1,options.isFailure=!1,options.allRollsCompleted){let successes=0,failures=0;for(const which in options.rollStatuses)options.rollStatuses[which].completed.isSuccess?successes++:options.rollStatuses[which].completed.isFailure&&failures++;successes>0&&("any"===options.combined||0===failures&&"all"===options.combined)?options.isSuccess=!0:options.isFailure=!0}updates["flags.CoC7.group-message.isSuccess"]=options.isSuccess,updates["flags.CoC7.group-message.isFailure"]=options.isFailure;break;case"opposed":if(options.allRollsCompleted){if(options.isTie=!1,options.isCombat){options.rollOrder=Array.from(new Int8Array(options.rollOrder.map((v=>parseInt(v.substr(1),10)))).sort()).map((v=>"r"+v));const successLevels={};options.defenderIsDodging=!1;for(const which in options.rollStatuses)options.rollStatuses[which].completed.passed&&(successLevels[options.rollStatuses[which].completed.successLevel]=parseInt(successLevels[options.rollStatuses[which].completed.successLevel]??0,10)+1),options.rollStatuses[which].isDodging&&!options.rollStatuses[which].isAttacker&&(options.defenderIsDodging=!0);updates["flags.CoC7.group-message.defenderIsDodging"]=options.defenderIsDodging,!1===options.advantageAttacker&&!1===options.advantageDefender&&(options.defenderIsDodging?(options.advantageDefender=!0,updates["flags.CoC7.group-message.advantageDefender"]=options.advantageDefender):(options.advantageAttacker=!0,updates["flags.CoC7.group-message.advantageAttacker"]=options.advantageAttacker));const best=Math.max(...Object.keys(successLevels));if(options.needsTieBreaker=!1,options.resultText=game.i18n.localize("CoC7.NoWinner"),best>0)for(const which in options.rollStatuses){let rollIsWinner=!1,rollIsTie=!1;options.rollStatuses[which].completed.successLevel===best&&1===successLevels[best]?rollIsWinner=!0:options.rollStatuses[which].completed.successLevel===best&&(options.advantageAttacker&&options.rollStatuses[which].isAttacker||options.advantageDefender&&!options.rollStatuses[which].isAttacker?rollIsWinner=!0:(rollIsTie=!0,options.needsTieBreaker=!0,options.isTie=!0)),options.rollStatuses[which].isWinner=rollIsWinner,options.rollStatuses[which].isTie=rollIsTie,updates["flags.CoC7.group-message.rollStatuses."+which+".isWinner"]=rollIsWinner,updates["flags.CoC7.group-message.rollStatuses."+which+".isTie"]=rollIsTie,rollIsWinner&&!rollIsTie&&(options.rollStatuses[which].isAttacker?options.rollStatuses[which].isManeuver?options.resultText=game.i18n.format("CoC7.ManeuverSuccess",{name:rollData[which].actor.name}):options.resultText=game.i18n.format("CoC7.AttackSuccess",{name:rollData[which].actor.name}):options.rollStatuses[which].isManeuver?options.rollStatuses[which].isDodging?options.resultText=game.i18n.format("CoC7.DodgeSuccess",{name:rollData[which].actor.name}):options.resultText=game.i18n.format("CoC7.ManeuverSuccess",{name:rollData[which].actor.name}):options.resultText=game.i18n.format("CoC7.AttackSuccess",{name:rollData[which].actor.name}))}updates["flags.CoC7.group-message.needsTieBreaker"]=options.needsTieBreaker}else{const opposedRollTieBreaker=game.settings.get("CoC7","opposedRollTieBreaker");options.rollOrder.sort(((a,b)=>{if(options.rollStatuses[a].completed.successLevel>options.rollStatuses[b].completed.successLevel)return-1;if(options.rollStatuses[a].completed.successLevel<options.rollStatuses[b].completed.successLevel)return 1;if(opposedRollTieBreaker){if(options.rollStatuses[a].completed.modifiedResult>options.rollStatuses[b].completed.modifiedResult)return-1;if(options.rollStatuses[a].completed.modifiedResult<options.rollStatuses[b].completed.modifiedResult)return 1}else{if(options.rollStatuses[a].completed.rawValue>options.rollStatuses[b].completed.rawValue)return-1;if(options.rollStatuses[a].completed.rawValue<options.rollStatuses[b].completed.rawValue)return 1}return 0}));const offsetMax=options.rollOrder.length;let offset=0;const a=options.rollStatuses[options.rollOrder[0]];if(a.failed)offset=-1;else for(;offset<offsetMax;offset++){const b=options.rollStatuses[options.rollOrder[offset]];if(a.completed.successLevel!==b.completed.successLevel||(opposedRollTieBreaker?a.completed.modifiedResult!==b.completed.modifiedResult:a.completed.rawValue!==b.completed.rawValue)){offset--;break}}options.isTie=offset>0;for(let i=0;i<offsetMax;i++){let isWinner=!1,isTie=!1;i<=offset&&(isWinner=!0,isTie=options.isTie);const which=options.rollOrder[i];options.rollStatuses[which].isWinner=isWinner,options.rollStatuses[which].isTie=isTie,updates["flags.CoC7.group-message.rollStatuses."+which+".isWinner"]=isWinner,updates["flags.CoC7.group-message.rollStatuses."+which+".isTie"]=isTie}options.needsTieBreaker=!1,updates["flags.CoC7.group-message.needsTieBreaker"]=!1}updates["flags.CoC7.group-message.isTie"]=options.isTie}}const html=await renderTemplate(CoC7GroupMessage.getTemplatePath(msg.flags.CoC7["group-message"].type),options);updates.content=html,await msg.update(updates)}}static async updateTheMessage({messageId,updates}){const msg=game.messages.get(messageId);msg?.flags?.CoC7?.["group-message"]&&await CoC7GroupMessage.updateTheGroupMessage({msg,updates})}static async getCheck({msg,theRoll}){const checkData={difficulty:theRoll.difficulty,diceModifier:theRoll.bonus,actorKey:theRoll.actor.actorKey??theRoll.actor.actor.actorKey,denyPush:!1,combat:msg.flags?.CoC7?.["group-message"].isCombat??!1};switch(theRoll.type){case"characteristic":checkData.characteristic=theRoll.key,checkData.denyPush=msg.flags?.CoC7?.["group-message"].denyPush??!1;break;case"attribute":checkData.attribute=theRoll.key,checkData.denyPush=msg.flags?.CoC7?.["group-message"].denyPush??!1;break;case"skill":checkData.skill=theRoll.skill,checkData.denyPush=(msg.flags?.CoC7?.["group-message"].denyPush??!1)||!theRoll.pushable;break;case"item":checkData.item=theRoll.item,checkData.denyPush=(msg.flags?.CoC7?.["group-message"].denyPush??!1)||!theRoll.pushable}return CoC7Check.create(checkData)}static async performRoll({msg,which,roll,pushing}={}){const theRoll=await CoC7GroupMessage.parseRolls({roll,quick:!1});if(!theRoll)return{};const check=await CoC7GroupMessage.getCheck({msg,theRoll});pushing&&(check.pushing=pushing),await check._perform({forceDSN:!0});const updates={};return updates["flags.CoC7.group-message.rollStatuses."+which+".completed"]=check.JSONRollData,updates}static async performCombinedRoll({messageId,msg,gmId,updates,pushing=!1}){void 0!==messageId&&(msg=game.messages.get(messageId));const rollData={};for(const which in msg?.flags?.CoC7?.["group-message"].rollStatuses){const roll=await CoC7GroupMessage.parseRolls({roll:msg?.flags?.CoC7?.["group-message"].rollStatuses[which].roll,quick:!1});roll&&(rollData[which]=roll)}const pool={};for(const which in rollData)pool[parseInt(rollData[which].bonus??0,10)]=!1;const roll=await CoC7Dice.combinedRoll({pool});let first=!0;for(const which in rollData){const bonus=parseInt(rollData[which].bonus??0,10),check=await CoC7GroupMessage.getCheck({msg,theRoll:rollData[which]});pushing&&(check.pushing=pushing),await check._perform({roll:roll[bonus],silent:!1===first||void 0,forceDSN:first}),updates["flags.CoC7.group-message.rollStatuses."+which+".completed"]=check.JSONRollData,first=!1}if(msg.canUserModify(game.user,"update"))await CoC7GroupMessage.updateTheGroupMessage({msg,updates});else{const gmId=CoC7Utilities.getAnIdForGm();!1!==gmId&&game.socket.emit("system.CoC7",{listener:gmId,type:"group-message-update",messageId:msg.id,updates})}}static async performNormalRoll({messageId,msg,rolls,gmId,updates,pushing=!1}){void 0!==messageId&&(msg=game.messages.get(messageId));for(const which in rolls)void 0===msg.flags?.CoC7?.["group-message"]?.rollStatuses[which].completed||pushing?Object.assign(updates,await CoC7GroupMessage.performRoll({msg,which,roll:rolls[which],pushing})):ui.notifications.error("CoC7.ErrorRollAlreadyCompleted",{localize:!0});msg.canUserModify(game.user,"update")?await CoC7GroupMessage.updateTheGroupMessage({msg,updates}):!1!==gmId&&game.socket.emit("system.CoC7",{listener:gmId,type:"group-message-update",messageId:msg.id,updates})}static async performMyRolls({messageId,msg,rolls}){void 0!==messageId&&(msg=game.messages.get(messageId));const updates={};for(const which in rolls)await CoC7GroupMessage.nameRoll({which,roll:rolls[which],updates});const gmId=!msg.canUserModify(game.user,"update")&&CoC7Utilities.getAnIdForGm();switch(Object.keys(updates).length>0&&(msg.canUserModify(game.user,"update")?await CoC7GroupMessage.updateTheGroupMessage({msg,updates}):!1!==gmId&&(game.socket.emit("system.CoC7",{listener:gmId,type:"group-message-update",messageId:msg.id,updates}),await new Promise((resolve=>setTimeout(resolve,200))))),msg.flags.CoC7["group-message"].type){case"combined":CoC7GroupMessage.performCombinedRoll({msg,gmId,updates});break;case"opposed":CoC7GroupMessage.performNormalRoll({msg,rolls,gmId,updates})}}static async nameRoll({which,roll,updates}){const parsed=await CoC7GroupMessage.parseRolls({roll,quick:!1});parsed&&(updates["flags.CoC7.group-message.rollStatuses."+which+".shortName"]=parsed.shortName,updates["flags.CoC7.group-message.rollStatuses."+which+".fullName"]=parsed.fullName,updates["flags.CoC7.group-message.rollStatuses."+which+".tags"]=parsed.tags??[],updates["flags.CoC7.group-message.rollStatuses."+which+".percent"]=parsed.percent??1,updates["flags.CoC7.group-message.rollStatuses."+which+".isManeuver"]=parsed.isManeuver??!1,updates["flags.CoC7.group-message.rollStatuses."+which+".isDodging"]=parsed.isDodge??!1,updates["flags.CoC7.group-message.rollStatuses."+which+".isWeapon"]=parsed.isDodge??!1)}static async newGroupMessage({rollData,options}){if(void 0===rollData){rollData={};for(const which in options.rollStatuses){const roll=await CoC7GroupMessage.parseRolls({roll:options.rollStatuses[which].roll,quick:!0});rollData[which]=roll}}const rollsByUser={},rollRequiresName={};for(const which in rollData){let asUserId="";switch(rollData[which].autoRoll.length){case 1:if(rollData[which].autoRoll[0]!==game.user.id){asUserId=rollData[which].autoRoll[0];break}case 0:asUserId=game.user.id;break;default:options.rollStatuses[which].rolling=!1,"-"===rollData[which].shortName&&(rollRequiresName[which]=rollData[which].roll)}""!==asUserId&&(Object.prototype.hasOwnProperty.call(rollsByUser,asUserId)||(rollsByUser[asUserId]={}),rollsByUser[asUserId][which]=options.rollStatuses[which].roll,options.rollStatuses[which].rolling=asUserId)}const templateData=Object.assign({rollData},options),chatData={flags:{CoC7:{"group-message":options}},content:await renderTemplate(CoC7GroupMessage.getTemplatePath(options.type),templateData)};switch(chatData.flags?.CoC7?.["group-message"]?.type){case"opposed":chatData.speaker=Object.assign(chatData.speaker??{},{alias:game.i18n.localize("CoC7.OpposedRollCard")});break;case"combined":chatData.speaker=Object.assign(chatData.speaker??{},{alias:Object.values(rollData)[0].actor.name})}const msg=await ChatMessage.create(chatData),updates={};for(const which in rollRequiresName)await CoC7GroupMessage.nameRoll({which,roll:rollRequiresName[which],updates});Object.keys(updates).length>0&&await CoC7GroupMessage.updateTheGroupMessage({msg,updates,rollData});for(const userId in rollsByUser)userId!==game.user.id&&game.socket.emit("system.CoC7",{type:"group-message-roll",listener:userId,messageId:msg.id,rolls:rollsByUser[userId]});return Object.prototype.hasOwnProperty.call(rollsByUser,game.user.id)&&await CoC7GroupMessage.performMyRolls({msg,rolls:rollsByUser[game.user.id]}),msg}static async isUserActive({which,msg}){if(msg.flags?.CoC7?.["group-message"]?.rollStatuses[which].rolling){const user=game.users.get(msg.flags.CoC7["group-message"].rollStatuses[which].rolling);if(game.user.isGM||!user||!user.active){const updates={["flags.CoC7.group-message.rollStatuses."+which+".rolling"]:!1};if(msg.canUserModify(game.user,"update"))await CoC7GroupMessage.updateTheGroupMessage({msg,updates});else{const gmId=CoC7Utilities.getAnIdForGm();!1!==gmId&&game.socket.emit("system.CoC7",{listener:gmId,type:"group-message-update",messageId:msg.id,updates})}}}}static async _onToggle(event){event.preventDefault();const button=event.currentTarget,messageId=button.closest("li.chat-message")?.dataset.messageId,key=button.dataset.key;let value=button.dataset.value;if(messageId&&key){if(button.classList.contains("select-only-gm")&&!game.user.isGM)return;const msg=game.messages.get(messageId);if(void 0!==msg.flags?.CoC7?.["group-message"]?.[key]&&msg.canUserModify(game.user,"update")){void 0===value&&(value=!msg.flags.CoC7["group-message"][key]);const updates={["flags.CoC7.group-message."+key]:value};switch(key){case"advantageDefender":updates["flags.CoC7.group-message.advantageAttacker"]=!value;break;case"advantageAttacker":updates["flags.CoC7.group-message.advantageDefender"]=!value}await CoC7GroupMessage.updateTheGroupMessage({msg,updates})}}}static async _onClick(event){event.preventDefault();const button=event.currentTarget,action=button.dataset.action,messageId=button.closest("li.chat-message")?.dataset.messageId,which=button.dataset.which;if(messageId){const msg=game.messages.get(messageId);if(void 0!==msg)if(void 0!==which&&void 0!==msg.flags?.CoC7?.["group-message"]?.rollStatuses[which]){const actor=await fromUuid(msg.flags.CoC7["group-message"].rollStatuses[which].roll.split("#")[0]);if(!actor||!actor.canUserModify(game.user,"update"))return void ui.notifications.error("CoC7.ErrorNoActorPermission",{localize:!0});switch(action){case"impatient-roll":CoC7GroupMessage.isUserActive({which,msg});break;case"normal-roll":CoC7GroupMessage.performMyRolls({msg,rolls:{[which]:msg.flags.CoC7?.["group-message"].rollStatuses[which].roll}});break;case"use-luck":CoC7GroupMessage.spendMyLuck({which,index:button.dataset.index,luckAmount:button.dataset.luckAmount,msg});break;case"remove-roll":CoC7GroupMessage.removeRoll({which,msg});break;case"push":CoC7GroupMessage.pushMyRoll({which,msg})}}else if(void 0!==msg.flags?.CoC7?.["group-message"]?.rollStatuses){let okay=!1;for(const which in msg.flags.CoC7["group-message"].rollStatuses){if((await fromUuid(msg.flags.CoC7["group-message"].rollStatuses[which].roll.split("#")[0])).canUserModify(game.user,"update")){okay=!0;break}}if(!okay)return void ui.notifications.error("CoC7.ErrorNoActorPermission",{localize:!0});switch(action){case"roll-once":if("combined"===msg.flags.CoC7["group-message"].type){const updates={};CoC7GroupMessage.performCombinedRoll({msg,updates})}break;case"toggle":CoC7GroupMessage._onToggle(event)}}}}static async renderChatMessage(app,html,data){const canModify={gm:game.user.isGM};for(const which in app.flags?.CoC7?.["group-message"]?.rollStatuses){const actor=await fromUuid(app.flags.CoC7["group-message"].rollStatuses[which].roll.split("#")[0]);canModify[which]=actor?.canUserModify(game.user,"update")??!1}canModify.any=Object.values(canModify).filter((b=>b)).length>0;for(const key in canModify)canModify[key]?html.find(".hidden-only-"+key).remove():html.find(".visible-only-"+key).remove();html.on("click",".roll-card-v2 button:not(.toggle-switch)",CoC7GroupMessage._onClick.bind(this)),html.on("click",".roll-card-v2 a:not(.toggle-link)",CoC7GroupMessage._onClick.bind(this)),html.on("click",".roll-card-v2 button.toggle-switch",CoC7GroupMessage._onToggle.bind(this)),html.on("click",".roll-card-v2 a.toggle-link",CoC7GroupMessage._onToggle.bind(this))}static async getActor(identifier){return identifier.match(/^a\./)?(await game.system.api.cocid.fromCoCID(identifier))?.[0]??null:identifier.indexOf(".")>-1?await fromUuid(identifier):game.actors.get(identifier)??null}static async parseRolls({roll,quick=!0,defaultUuid=""}){const match=roll.match(/^(?<a>[^#]+#)?(?<t>attribute|characteristic|item|skill)#(?<k>[^#]+)(#(?<m>.*))?$/);if(match){const modifiers=(match.groups.m??"").toLowerCase().split("#"),bonus=parseInt(modifiers.find((m=>m.match(/^[+-]\d+$/)))??0,10),difficulty=modifiers.find((m=>m.match(/^\d+$/))),pushing=modifiers.filter((m=>"p"===m)).length>0,rollData={type:match.groups.t,key:match.groups.k,bonus,difficulty:"0"===(difficulty??"").toString()?CoC7Check.difficultyLevel.unknown:difficulty?parseInt(difficulty,10):"unknown"===game.settings.get("CoC7","defaultCheckDifficulty")?CoC7Check.difficultyLevel.unknown:CoC7Check.difficultyLevel.regular,pushing};if(!match.groups.a&&defaultUuid&&""!==defaultUuid&&(match.groups.a=defaultUuid+"#"),match.groups.a){const actor=await CoC7GroupMessage.getActor(match.groups.a.substr(0,match.groups.a.length-1));if(!actor)return null;rollData.actor=actor,rollData.autoRoll=game.users.filter((u=>!u.isGM&&rollData.actor.canUserModify(u,"update"))).map((u=>({id:u.id,active:u.active}))),rollData.autoRoll.length>0&&(rollData.autoRoll=rollData.autoRoll.filter((d=>d.active)).map((d=>d.id)),0===rollData.autoRoll.length&&(rollData.autoRoll=["prevent","roll"]))}else{const actor=await ActorPickerDialog.create();if(!actor)return ui.notifications.warn("CoC7.WarnNoControlledActor",{localize:!0}),null;rollData.actor=actor,game.user.isGM?(rollData.autoRoll=game.users.filter((u=>!u.isGM&&rollData.actor.canUserModify(u,"update"))).map((u=>({id:u.id,active:u.active}))),rollData.autoRoll.length>0&&(rollData.autoRoll=rollData.autoRoll.filter((d=>d.active)).map((d=>d.id)),0===rollData.autoRoll.length&&(rollData.autoRoll=["prevent","roll"]))):rollData.autoRoll=[game.user.id]}switch(rollData.roll=rollData.actor.uuid+"#"+rollData.type+"#"+rollData.key+(rollData.bonus<0?"#"+rollData.bonus:rollData.bonus>0?"#+"+rollData.bonus:"")+(0===difficulty?"#0":difficulty?"#"+parseInt(difficulty,10):""),rollData.portrait=rollData.actor instanceof TokenDocument?rollData.actor.texture.src:rollData.actor.portrait,rollData.shortName="-",rollData.fullName="-",rollData.type){case"characteristic":if(rollData.shortName=CoC7Utilities.getCharacteristicNames(rollData.key)?.short??"-",rollData.fullName=CoC7Utilities.getCharacteristicNames(rollData.key)?.label??"-",rollData.percent=(rollData.actor instanceof TokenDocument?rollData.actor.actor:rollData.actor).system?.characteristics[rollData.key]?.value??1,"-"===rollData.shortName)return null;break;case"attribute":switch(rollData.key){case"lck":rollData.shortName=game.i18n.localize("CoC7.Luck"),rollData.fullName=game.i18n.localize("CoC7.Luck");break;case"san":rollData.shortName=game.i18n.localize("CoC7.SAN"),rollData.fullName=game.i18n.localize("CoC7.Sanity");break;default:return null}rollData.percent=(rollData.actor instanceof TokenDocument?rollData.actor.actor:rollData.actor).system?.attribs[rollData.key]?.value??1;break;case"skill":if(!quick){const skills=await(rollData.actor instanceof TokenDocument?rollData.actor.actor:rollData.actor).getItemOrAdd(rollData.key,"skill");skills.length&&(rollData.skill=skills[0],rollData.shortName=skills[0].shortName,rollData.fullName=skills[0].shortName,rollData.pushable=skills[0].system.properties?.push??!1,rollData.percent=skills[0].value,rollData.isManeuver=skills[0].isDodge,rollData.isDodge=skills[0].isDodge)}break;case"item":if(!quick){const items=await(rollData.actor instanceof TokenDocument?rollData.actor.actor:rollData.actor).getItemOrAdd(rollData.key,"weapon");if(items.length){rollData.item=items[0],rollData.shortName=items[0].shortName,rollData.fullName=items[0].shortName,rollData.isManeuver=items[0].system.properties?.mnvr??!1,rollData.isWeapon=!0;const skillId=items[0].system.skill[items[0].usesAlternativeSkill?"alternativ":"main"].id;if(skillId){const skill=(rollData.actor instanceof TokenDocument?rollData.actor.actor:rollData.actor).items.find((d=>d.id===skillId));rollData.tags=[skill.name],rollData.percent=skill.value,rollData.pushable=skill.system.properties?.push??!1}}}}return rollData}return null}static getTemplatePath(type){switch(type){case"opposed":return"systems/CoC7/templates/chat/messages/opposed.hbs";case"combinedall":case"combinedany":case"combined":return"systems/CoC7/templates/chat/messages/combined.hbs"}return null}static async createGroupMessage(options){if(!CoC7GroupMessage.getTemplatePath(options.type))return null;let config=Object.assign({type:"",denyPush:!1,showCompletedRolls:!0,allRollsCompleted:!1,isCombat:!1,isEditable:!0,rollStatuses:{},rollOrder:[]},options);switch(config.type){case"opposed":config=Object.assign({denyPush:!0,isTie:!1,needsTieBreaker:!1,advantageAttacker:!1,advantageDefender:!1,defenderIsDodging:!1,winnerRollsDamage:!1},config);break;case"combinedall":case"combinedany":case"combined":config=Object.assign({combined:"combinedall"===config.type?"all":"combinedany"===config.type?"any":"",actorUuid:"",isSuccess:!1,isFailure:!1,wasPushed:!1},config),config.type="combined"}const rollData={};let count=0;for(const offset in options.rollRequisites){const which="r"+offset,roll=await CoC7GroupMessage.parseRolls({roll:options.rollRequisites[offset],quick:!0,defaultUuid:config.actorUuid??""});if(!roll)return null;if("combined"===config.type){if(""!==config.actorUuid&&config.actorUuid!==roll.actor.uuid)return ui.notifications.error("CoC7.ErrorCombinedRollsRequireSingleActor",{localize:!0}),null;config.actorUuid=roll.actor.uuid}if(rollData[which]=roll,config.rollStatuses[which]={roll:roll.roll,rollable:"combined"!==config.type,rolling:!1,shortName:roll.shortName,fullName:roll.fullName,percent:roll.percent,tags:[],isManeuver:!1,isDodging:!1,isWeapon:!1},"opposed"===config.type)config.rollStatuses[which]=Object.assign({isAttacker:0===count,isWinner:!1,isTie:!1},config.rollStatuses[which]);config.rollOrder.push(which),count++}if("opposed"===config.type&&2!==Object.keys(rollData).length)return ui.notifications.error("CoC7.ErrorOpposedRollsLimitedToTwoActors",{localize:!0}),null;if(delete config.rollRequisites,game.user.isGM)return CoC7GroupMessage.newGroupMessage({rollData,options:config});{const gmId=CoC7Utilities.getAnIdForGm();return!1===gmId?null:(game.socket.emit("system.CoC7",{type:"group-message-new",listener:gmId,options:config}),!0)}}}class ChatCardActor{constructor(actorKey=null,fastForward=!1){this.actorKey=actorKey,this.fastForward=fastForward}get displayActorOnCard(){return game.settings.get("CoC7","displayActorOnCard")}get isBlind(){return this.rollMode?(void 0===this._isBlind&&(this._isBlind="blindroll"===this.rollMode),this._isBlind):null}set isBlind(x){this._isBlind=x}get rollMode(){return this._rollMode||(this._rollMode=game.settings.get("core","rollMode")),this._rollMode}set rollMode(x){this._rollMode=x}get actor(){return this.actorKey?chatHelper.getActorFromKey(this.actorKey):null}get token(){return this.actor?chatHelper.getTokenFromKey(this.actorKey):null}get item(){return this.itemId?this.actor.items.get(this.itemId):null}get weapon(){return this.item}get targetedTokens(){return[...game.user.targets]}get target(){return this.targetToken?this.targetToken:this.targetActor}get targetToken(){return this._targetToken||(this._targetKey?this._targetToken=chatHelper.getTokenFromKey(this._targetKey):(this._targetToken=this.targetedTokens.pop(),this._targetToken?this._targetKey=`${this._targetToken.scene.id}.${this._targetToken.id}`:this._targetToken=null)),this._targetToken}get targetActor(){return this._targetActor||(this.targetToken?this._targetActor=this.targetToken.actor:this._targetActor=chatHelper.getActorFromKey(this._targetKey)),this._targetActor}get targetKey(){return this.targetToken||this.targetActor?this._targetKey:null}get hasTarget(){return!(!this.targetToken&&!this.targetActor)}set targetKey(x){this._targetKey=x}get skills(){return this.actor.getWeaponSkills(this.itemId)}get targetImg(){const img=chatHelper.getActorImgFromKey(this.targetKey);return img||"../icons/svg/mystery-man-black.svg"}get name(){return this.token?this.token.name:this.actor.name}get targetName(){return this.target?this.target.name:"dummy"}get actorImg(){const img=chatHelper.getActorImgFromKey(this.actorKey);return img||"../icons/svg/mystery-man-black.svg"}async say(message,flavor=null){const speakerData={};let speaker;this.actor?(speakerData.actor=this.actor,this.token&&(speakerData.token=this.token.document),speaker=ChatMessage.getSpeaker(speakerData)):speaker=ChatMessage.getSpeaker();const chatData={user:(this.actor.user?this.actor.user:game.user).id,speaker,flavor,content:message};["gmroll","blindroll"].includes(game.settings.get("core","rollMode"))&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),"blindroll"===this.rollMode&&(chatData.blind=!0),ChatMessage.create(chatData).then((msg=>msg))}}function replacer(key,value){if(key.startsWith("__"))return;if(["_actor"].includes(key))return;return["sanCheck","intCheck"].includes(key)?value.JSONRollData:value}class SanCheckCard extends ChatCardActor{constructor(actorKey=null,sanData={},options={}){super(actorKey,void 0!==options.fastForward&&Boolean(options.fastForward)),sanData.sanReason=sanData.sanReason??"",this.sanData=sanData,this.options=options,sanData.modifier&&!isNaN(Number(sanData.modifier))&&(this.options.sanModifier=Number(sanData.modifier)),sanData.difficulty&&!isNaN(Number(sanData.difficulty))&&(this.options.sanDifficulty=Number(sanData.difficulty)),this.state={}}get isBlind(){return void 0!==this.options.isBlind?Boolean(this.options.isBlind):super.isBlind}get difficulty(){return void 0!==this.options.difficulty?this.options.difficulty:CoC7Check.difficultyLevel.regular}get modifier(){return void 0!==this.options.modifier?this.options.modifier:0}get sanLossSource(){return this.sanData.tokenKey?chatHelper.getActorFromKey(this.sanData.tokenKey):null}get involuntaryAction(){return!(!this.state.sanRolled||!this.sanCheck.isFailure&&!this.sanCheck.isFumble)}get sanLossFormula(){return this.state.sanRolled?this.sanData.sanMax&&this.sanCheck.failed?isNaN(Number(this.sanData.sanMax))?this.sanData.sanMax:Number(this.sanData.sanMax):this.sanData.sanMin&&this.sanCheck.passed?isNaN(Number(this.sanData.sanMin))?this.sanData.sanMin:Number(this.sanData.sanMin):0:null}get sanLostToReason(){return this.actor.sanLostToReason(this.sanData.sanReason)}get maxPossibleSanLoss(){return this.actor.maxLossToSanReason(this.sanData.sanReason,this.sanData.sanMax)}get maxSanLoss(){return new Roll(this.sanData.sanMax.toString())[foundry.utils.isNewerVersion(game.version,"12")?"evaluateSync":"evaluate"]({maximize:!0}).total}get sanLossReasonEncountered(){return this.actor.sanLossReasonEncountered(this.sanData.sanReason)}get firstEncounter(){return!this.actor.mythosInsanityExperienced}get isActorLoosingSan(){return!this.actor.hasTempoInsane&&(0!==this.sanLossFormula&&(!this.sanData.sanReason||0!==this.actor.maxLossToSanReason(this.sanData.sanReason,this.sanData.sanMax)||(this.state.immuneToCreature=!0,!1)))}get boutDurationText(){if(this.boutDuration){if(this.boutRealTime)return`${this.boutDuration} ${game.i18n.localize("CoC7.rounds")}`;if(this.boutSummary)return`${this.boutDuration} ${game.i18n.localize("CoC7.hours")}`}return null}get youGainCthulhuMythosString(){return this.mythosGain?game.i18n.format("CoC7.YouGainedCthulhuMythos",{value:this.mythosGain}):null}async advanceState(state){switch(state){case"keepCreatureSanData":this.state.keepCreatureSanData=!0;break;case"involuntaryActionPerformed":this.state[state]=!0,this.isActorLoosingSan||(this.state.finish=!0);break;case"sanLossApplied":await this.applySanLoss();break;case"enterBoutOfMadnessRealTime":this.boutDuration=(await new Roll("1D10").roll({async:!0})).total,this.boutRealTime=!0,this.boutSummary=!1,this.boutResult=await this.actor.enterBoutOfMadness(!0,this.boutDuration),this.state.boutOfMadnessResolved=!0,this.state.boutOfMadnessOver=!1;break;case"enterBoutOfMadnessSummary":this.boutDuration=(await new Roll("1D10").roll({async:!0})).total,this.boutRealTime=!1,this.boutSummary=!0,this.boutResult=await this.actor.enterBoutOfMadness(!1,this.boutDuration),this.state.boutOfMadnessResolved=!0,await this.triggerInsanity();break;case"boutOfMadnessOver":await this.actor.unsetCondition(COC7.status.tempoInsane),await this.triggerInsanity();break;case"noMythosGained":this.state.cthulhuMythosAwarded=!0,this.mythosGain=0;break;case"cthulhuMythosAwarded":{let amountGained=1;this.actor.mythosInsanityExperienced||(amountGained=5,await this.actor.experienceFirstMythosInsanity()),this.state.cthulhuMythosAwarded=!0;const cthulhuMythosSkill=this.actor.cthulhuMythosSkill,oldValue=cthulhuMythosSkill.data.data.adjustments.experience||0;cthulhuMythosSkill&&await cthulhuMythosSkill.update({"data.adjustments.experience":oldValue+amountGained}),this.mythosGain=amountGained;break}}}async bypassRollSan(){this.isBypassed=!0,this.sanCheck=new CoC7Check,this.sanCheck.actor=this.actorKey,this.sanCheck.attribute="san",this.sanCheck.difficulty=this.options.sanDifficulty||CoC7Check.difficultyLevel.regular,this.sanCheck.diceModifier=this.options.sanModifier||0,await this.sanCheck._perform({forceDSN:!0}),this.state.sanRolled=!0,this.state.involuntaryActionPerformed=this.sanCheck.passed,this.state.sanLossRolled=!0,this.state.ignoreSanCheck=!0,this.sanLoss=this.sanLossFormula}async rollSan(){if(this.sanCheck=new CoC7Check,this.sanCheck.actor=this.actorKey,this.sanCheck.attribute="san",this.sanCheck.difficulty=this.options.sanDifficulty||CoC7Check.difficultyLevel.regular,this.sanCheck.diceModifier=this.options.sanModifier||0,await this.sanCheck._perform({forceDSN:!0}),this.state.sanRolled=!0,this.state.involuntaryActionPerformed=this.sanCheck.passed,this.isActorLoosingSan){if("number"==typeof this.sanLossFormula)this.state.sanLossRolled=!0,this.sanData.sanReason?(this.sanLoss=this.actor.maxLossToSanReason(this.sanData.sanReason,this.sanLossFormula),this.sanLoss<this.sanLossFormula&&(this.state.limitedLossToCreature=!0)):this.sanLoss=this.sanLossFormula;else if(this.sanCheck.isFumble)this.state.sanLossRolled=!0,this.sanLoss=this.actor.maxLossToSanReason(this.sanData.sanReason,this.sanData.sanMax);else if(this.sanData.sanReason){const min=new Roll(this.sanLossFormula)[foundry.utils.isNewerVersion(game.version,"12")?"evaluateSync":"evaluate"]({minimize:!0}).total,max=this.actor.maxLossToSanReason(this.sanData.sanReason,this.sanData.sanMax);min>=max&&(this.state.sanLossRolled=!0,this.sanLoss=max,this.state.limitedLossToCreature=!0)}}else this.state.finish=!0,this.actor.hasTempoInsane&&(this.state.immuneAlreadyInBout=!0,this.sanCheck.passed||(this.state.finish=!1)),this.state.sanLossRolled=!0,this.state.sanLossApplied=!0,this.state.intRolled=!0,this.state.insanity=!1,this.sanLoss=0}async rollSanLoss(){this.sanLossRoll=new Roll(`${this.sanLossFormula}`),await this.sanLossRoll.roll({async:!0}),await CoC7Dice.showRollDice3d(this.sanLossRoll);const max=this.actor.maxLossToSanReason(this.sanData.sanReason,this.sanData.sanMax);this.sanLossRoll.total>max&&(this.state.limitedLossToCreature=!0),this.sanLoss=Math.min(this.sanLossRoll.total,max),this.state.sanLossRolled=!0}async applySanLoss(){if(await this.actor.looseSan(this.sanData.sanReason,this.sanLoss),this.sanLoss>0&&(this.state.actorLostSan=!0),this.state.sanLossApplied=!0,this.actor.san<=0)return this.state.intRolled=!0,this.state.boutOfMadnessOver=!0,this.state.insanity=!0,this.state.permanentlyInsane=!0,void(this.state.finish=!0);this.sanLoss<5?(this.state.intRolled=!0,this.actor.hasIndefInsane?(this.state.insanity=!0,this.state.shaken=!0,this.state.insanityTableRolled=!1,this.state.finish=!1,this.state.intRolled=!0):(this.state.insanity=!1,this.state.shaken=!0,this.state.insanityTableRolled=!0,this.state.finish=!0)):this.state.intRolled=!1,this.actor.dailySanLoss>=this.actor.dailySanLimit&&(this.state.insanity=!0,this.state.intRolled=!0,this.state.temporaryInsane=!1,this.state.indefinitelyInsane=!0,this.state.insanityTableRolled=!1,this.state.memoryRepressed=!1,this.state.finish=!1)}async rollInt(){this.intCheck=new CoC7Check,this.intCheck.actor=this.actorKey,this.intCheck.characteristic="int",this.intCheck.difficulty=this.options.intDifficulty||CoC7Check.difficultyLevel.regular,this.intCheck.diceModifier=this.options.intModifier||0,await this.intCheck._perform({forceDSN:!0}),this.state.intRolled=!0,this.intCheck.passed||this.state.alreadyInsane?(this.state.insanity=!0,this.state.temporaryInsane=!0,this.state.indefinitelyInsane=!1,this.state.memoryRepressed=!1):(this.state.insanity=!1,this.state.temporaryInsane=!1,this.state.indefinitelyInsane=!1,this.state.memoryRepressed=!0,this.state.finish=!0)}async triggerInsanity(){this.state.boutOfMadnessOver=!0,this.state.indefinitelyInsane&&await this.actor.setCondition(COC7.status.indefInsane),this.state.finish=!0}async clearSanLossReason(){await this.actor.setReasonSanLoss(this.sanData.sanReason,0),this.sanLossReasonEncountered||(this.state.keepCreatureSanData=!0)}async updateChatCard(){if(this.state.sanRolled&&(this.__inlineSanCheck=this.sanCheck.inlineCheck.outerHTML),this.sanLossRoll){const a=createInlineRoll(this.sanLossRoll);this.__inlineSanLossRoll=a.outerHTML}this.state.intRolled&&this.intCheck&&(this.__inlineIntCheck=this.intCheck.inlineCheck.outerHTML);const html=await renderTemplate(SanCheckCard.template,this),htmlCardElement=$.parseHTML(html)[0];htmlCardElement.dataset.object=escape(JSON.stringify(this,replacer));const chatMessage=game.messages.get(this.messageId),msg=await chatMessage.update({content:htmlCardElement.outerHTML});return await ui.chat.updateMessage(msg,!1),msg}static get template(){return"systems/CoC7/templates/chat/cards/san-check.html"}static checkTargets(sanData,fastForward=!1){const targets=[...game.user.targets];if(targets.length)for(const t of targets)t.actor.isToken?SanCheckCard.create(t.actor.tokenKey,sanData,{fastForward}):SanCheckCard.create(t.actor.id,sanData,{fastForward});else ui.notifications.warn(game.i18n.localize("CoC7.WarnNoTargetsSanCheck"))}static async create(...args){const chatCard=new SanCheckCard(...args);chatCard.actor.hasIndefInsane&&(chatCard.state.alreadyInsane=!0),chatCard.actor.san<=0&&(chatCard.state.intRolled=!0,chatCard.state.boutOfMadnessOver=!0,chatCard.state.insanity=!0,chatCard.state.permanentlyInsane=!0,chatCard.state.finish=!0);const html=await renderTemplate(SanCheckCard.template,chatCard),htmlCardElement=$.parseHTML(html)[0];htmlCardElement.dataset.object=escape(JSON.stringify(chatCard,replacer)),await chatCard.say(htmlCardElement.outerHTML)}static getFromMessageId(messageId){const message=game.messages.get(messageId),htmlCard=$.parseHTML(message.content)[0].querySelector(".chat-card");return SanCheckCard.getFromCard(htmlCard)}static getFromCard(card){const sanCheckCardData=JSON.parse(unescape(card.dataset.object)),sanCheckCard=new SanCheckCard;return Object.assign(sanCheckCard,sanCheckCardData),sanCheckCard.messageId||(sanCheckCard.messageId=card.closest(".message").dataset.messageId),"Object"===sanCheckCard.sanCheck?.constructor?.name&&(sanCheckCard.sanCheck=Object.assign(new CoC7Check,sanCheckCard.sanCheck)),"Object"===sanCheckCard.intCheck?.constructor?.name&&(sanCheckCard.intCheck=Object.assign(new CoC7Check,sanCheckCard.intCheck)),"Object"===sanCheckCard.sanLossRoll?.constructor?.name&&(sanCheckCard.sanLossRoll=Roll.fromData(sanCheckCard.sanLossRoll)),sanCheckCard}}class CoC7Link{static get CHECK_TYPE(){return{CHECK:"check",SANLOSS:"sanloss",ITEM:"item",EFFECT:"effect"}}static get LINK_TYPE(){return{CHARACTERISTIC:"characteristic",ATTRIBUTE:"attribute",SKILL:"skill"}}static init(){CONFIG.CoC7Link={documentClass:CoC7Link};const body=$("body");body.on("click","a.coc7-link",CoC7Link._onLinkClick),body.on("dragstart","a.coc7-link",(event=>CoC7Link._onDragCoC7Link(event))),CONFIG.TextEditor.enrichers.push({pattern:new RegExp("@(coc7)\\.(check|effect|item|sanloss)\\[([^\\[\\]]*(?:\\[[^\\[\\]]*(?:\\[[^\\[\\]]*\\])*[^\\[\\]]*\\])*[^\\[\\]]*)\\](?:{([^}]+)})?","gi"),enricher:CoC7Link._createLink})}static _linkFromEvent(event){const a=event.currentTarget,i=a.querySelector("[data-link-icon]"),data=foundry.utils.duplicate(a.dataset),oldType=data.type;return data.type="CoC7Link",data.icon=null,oldType&&(data.linkType=oldType),data.object&&("string"==typeof data.object||data.object instanceof String)&&(data.object=JSON.parse(data.object)),i.dataset&&i.dataset.linkIcon&&"fas fa-dice"!==i.dataset.linkIcon&&(data.icon=i.dataset.linkIcon),data.displayName=a.dataset.displayName?a.innerText:null,data.difficulty&&(data.difficulty=CoC7Utilities.convertDifficulty(data.difficulty)),data}static _onDragCoC7Link(event){const data=CoC7Link._linkFromEvent(event);event.originalEvent.dataTransfer.setData("text/plain",JSON.stringify(data))}static async fromDropData(data,options={}){const cls=new CoC7Link;cls.object=foundry.utils.mergeObject({type:"CoC7Link",check:CoC7Link.CHECK_TYPE.CHECK,linkType:CoC7Link.LINK_TYPE.SKILL,difficulty:CoC7Check.difficultyLevel.regular,modifier:0,object:{label:game.i18n.localize("CoC7.EffectNew"),icon:"icons/svg/aura.svg",changes:[]}},data);for(const key of["name","displayName","icon","id","pack","sanMin","sanMax","sanReason"])cls.object[key]=cls.object[key]??"";return void 0!==cls.object.object.icon&&void 0!==cls.object.object.external&&["http","https"].includes(cls.object.object.external)&&(cls.object.object.icon=cls.object.object.external+"://"+cls.object.object.icon),cls.options=options,cls}static async _createLink(match){const name=match[4]??void 0,options=match[3]??void 0,type=match[2]??void 0,data={cls:["coc7-link"],dataset:{check:type},icon:null,blind:!1,name};if(type===CoC7Link.CHECK_TYPE.EFFECT)data.effect=JSON.parse(options),data.dataset.object=options,void 0!==data.effect.icon&&void 0!==data.effect.external&&["http","https"].includes(data.effect.external)&&(data.effect.icon=data.effect.external+"://"+data.effect.icon);else{const matches=options.matchAll(/[^,]+/gi);for(const match of Array.from(matches)){let[key,value]=match[0].split(":");"icon"===key&&(data.icon=value),void 0===value&&("blind"===key?(value=!0,data.blind=[CoC7Link.CHECK_TYPE.CHECK].includes(type.toLowerCase())):"pushing"===key?(value=!0,data.pushing=[CoC7Link.CHECK_TYPE.CHECK].includes(type.toLowerCase())):"combat"===key&&(value=!0,data.combat=[CoC7Link.CHECK_TYPE.CHECK].includes(type.toLowerCase()))),data.dataset[key]=value}void 0!==data.dataset.icon&&void 0!==data.dataset.external&&["http","https"].includes(data.dataset.external)&&(data.dataset.icon=data.dataset.external+"://"+data.dataset.icon,data.icon=data.dataset.icon)}let title;const difficulty=CoC7Check.difficultyString(data.dataset.difficulty);switch(type.toLowerCase()){case CoC7Link.CHECK_TYPE.CHECK:{let humanName=data.dataset.name;if(["attributes","attribute","attrib","attribs"].includes(data.dataset.type?.toLowerCase()))"lck"===data.dataset.name&&(humanName=game.i18n.localize("CoC7.Luck")),"san"===data.dataset.name&&(humanName=game.i18n.localize("CoC7.Sanity"));else if(["charac","char","characteristic","characteristics"].includes(data.dataset.type?.toLowerCase()))humanName=CoC7Utilities.getCharacteristicNames(data.dataset.name)?.label;else if(!name&&data.dataset.name.match(/^.\.[^\\.]*\..+$/)){const cocIdName=(await game.system.api.cocid.fromCoCID(data.dataset.name))?.[0]?.name;cocIdName&&(humanName=cocIdName)}title=game.i18n.format(`CoC7.LinkCheck${data.dataset.difficulty?"Diff":""}${data.dataset.modifier?"Modif":""}${data.pushing?"Pushing":""}`,{difficulty,modifier:data.dataset.modifier,name:humanName});break}case CoC7Link.CHECK_TYPE.SANLOSS:title=game.i18n.format(`CoC7.LinkSanLoss${data.dataset.difficulty?"Diff":""}${data.dataset.modifier?"Modif":""}`,{difficulty,modifier:data.dataset.modifier,sanMin:data.dataset.sanMin,sanMax:data.dataset.sanMax});break;case CoC7Link.CHECK_TYPE.ITEM:title=game.i18n.format(`CoC7.LinkItem${data.dataset.difficulty?"Diff":""}${data.dataset.modifier?"Modif":""}`,{difficulty,modifier:data.dataset.modifier,name:data.dataset.name});break;case CoC7Link.CHECK_TYPE.EFFECT:title=data.effect.label}name?data.dataset.displayName=!0:data.name=title;const a=document.createElement("a");a.title=game.user.isGM?data.name:title,a.classList.add(...data.cls);for(const[k,v]of Object.entries(data.dataset))a.dataset[k]=v;return a.draggable=!0,data.icon=data.icon??data.effect?.icon??"fas fa-dice",(data.icon.includes("\\")||data.icon.includes("."))&&(data.img=data.icon),data.blind&&(a.innerHTML+='<i class="fas fa-eye-slash"></i>'),data.img?a.innerHTML+=`<img data-link-icon="${data.icon}" src="${data.img}">`:a.innerHTML+=`<i data-link-icon="${data.icon}" class="link-icon ${data.icon}"></i>`,a.innerHTML+=`<span>${data.name}</span>`,a}_createDocumentLink(eventData,{relativeTo,label}={}){if(!eventData.check)return"";switch(eventData.check.toLowerCase()){case CoC7Link.CHECK_TYPE.CHECK:{if(!eventData.linkType||!eventData.name&&!eventData.rolls)return"";let options=`${eventData.blind?"blind,":""}${eventData.pushing?"pushing,":""}type:${eventData.linkType}`;if(eventData.name?options+=`,name:${eventData.name}`:eventData.rolls&&(options+=`,rolls:${eventData.rolls}`,eventData.combat&&(options+=",combat")),void 0!==eventData.difficulty&&eventData.difficulty!==CoC7Check.difficultyLevel.regular&&(options+=`,difficulty:${eventData.difficulty}`),void 0!==eventData.modifier&&0!==eventData.modifier&&(options+=`,modifier:${eventData.modifier}`),eventData.icon){const parts=eventData.icon.match(/^(https?):\/\/(.+)$/);options+=parts?`,external:${parts[1]},icon:${parts[2]}`:`,icon:${eventData.icon}`}eventData.pack&&(options+=`,pack:${eventData.pack}`),eventData.id&&(options+=`,id:${eventData.id}`);let link=`@coc7.check[${options}]`;const displayName=eventData.displayName??label??"";return displayName&&(link+=`{${displayName}}`),link}case CoC7Link.CHECK_TYPE.SANLOSS:{if(!eventData.sanMax||!eventData.sanMin)return"";let options=`${eventData.blind?"blind,":""}sanMax:${eventData.sanMax},sanMin:${eventData.sanMin}`;if(eventData.sanReason&&(options+=`,sanReason:${eventData.sanReason}`),eventData.difficulty&&eventData.difficulty!==CoC7Check.difficultyLevel.regular&&(options+=`,difficulty:${eventData.difficulty}`),eventData.modifier&&0!==eventData.modifier&&(options+=`,modifier:${eventData.modifier}`),eventData.icon){const parts=eventData.icon.match(/^(https?):\/\/(.+)$/);options+=parts?`,external:${parts[1]},icon:${parts[2]}`:`,icon:${eventData.icon}`}let link=`@coc7.sanloss[${options}]`;const displayName=eventData.displayName??label??"";return displayName&&(link+=`{${displayName}}`),link}case CoC7Link.CHECK_TYPE.ITEM:{if(!eventData.name)return"";let options=`${eventData.blind?"blind,":""}name:${eventData.name}`;if(eventData.icon){const parts=eventData.icon.match(/^(https?):\/\/(.+)$/);options+=parts?`,external:${parts[1]},icon:${parts[2]}`:`,icon:${eventData.icon}`}eventData.pack&&(options+=`,pack:${eventData.pack}`),eventData.id&&(options+=`,id:${eventData.id}`);let link=`@coc7.item[${options}]`;const displayName=eventData.displayName??label??"";return displayName&&(link+=`{${displayName}}`),link}case CoC7Link.CHECK_TYPE.EFFECT:{const parts=eventData.object.icon.match(/^(https?):\/\/(.+)$/);parts&&(eventData.object.external=parts[1],eventData.object.icon=parts[2]);let link=`@coc7.effect[${JSON.stringify(eventData.object)}]`;const displayName=eventData.displayName??label??"";return displayName&&(link+=`{${displayName}}`),link}}return"?"}static async _onLinkActorClick(actor,options,{shiftKey=!1}={}){switch(options.check){case CoC7Link.CHECK_TYPE.CHECK:if(["charac","char","characteristic","characteristics"].includes(options.linkType.toLowerCase()))return actor.characteristicCheck(options.name,shiftKey,options);if(["skill"].includes(options.linkType.toLowerCase()))return actor.skillCheck(options,shiftKey,options);if(["attributes","attribute","attrib","attribs"].includes(options.linkType.toLowerCase()))return actor.attributeCheck(options.name,shiftKey,options);if(["combinedall","combinedany","opposed"].includes(options.linkType.toLowerCase()))return CoC7GroupMessage.createGroupMessage({type:options.linkType.toLowerCase(),rollRequisites:options.rolls.split("&&"),isCombat:Boolean(options.combat??!1)});break;case CoC7Link.CHECK_TYPE.SANLOSS:return void SanCheckCard.create(actor.actorKey,options,{fastForward:shiftKey});case CoC7Link.CHECK_TYPE.ITEM:return actor.weaponCheck(options,shiftKey);case CoC7Link.CHECK_TYPE.EFFECT:await actor.createEmbeddedDocuments("ActiveEffect",[{label:options.object.label,icon:options.object.icon,changes:options.object.changes}])}}static toChatMessage(options){const option={speaker:{alias:game.user.name}};let message;const link=(new CoC7Link)._createDocumentLink(options);message=options.check===CoC7Link.CHECK_TYPE.EFFECT?`<div class="effect-message">${link}</div>`:game.i18n.format("CoC7.MessageCheckRequestedWait",{check:link}),chatHelper.createMessage(null,message,option)}static toWhisperMessage(options,actors){for(const actor of actors){const option={speaker:{alias:game.user.name},whisper:actor.owners.map((a=>a.id))};let message;const link=(new CoC7Link)._createDocumentLink(options);message=options.check===CoC7Link.CHECK_TYPE.EFFECT?`<div class="effect-message">${link}</div>`:game.i18n.format("CoC7.MessageTargetCheckRequested",{name:actor.name,check:link}),chatHelper.createMessage(null,message,option)}}static async _onLinkClick(event){const options=CoC7Link._linkFromEvent(event);if(game.user.isGM){if(isCtrlKey(event))return void CoC7ContentLinkDialog.create(options);if(canvas.tokens.controlled.length){for(const token of canvas.tokens.controlled)CoC7Link._onLinkActorClick(token.actor,options,{shiftKey:event.shiftKey});return}const speaker=ChatMessage.getSpeaker(),actor=ChatMessage.getSpeakerActor(speaker);return actor?void CoC7Link._onLinkActorClick(actor,options,{shiftKey:event.shiftKey}):void CoC7Link.toChatMessage(options)}{const speaker=ChatMessage.getSpeaker();let actor=ChatMessage.getSpeakerActor(speaker);if(!actor){const actors=game.actors.filter((a=>(a.ownership[game.user.id]??a.ownership.default)===CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER));if(1===actors.length)actor=actors[0];else{const actors=game.actors.filter((a=>(a.ownership[game.user.id]??a.ownership.default)===CONST.DOCUMENT_OWNERSHIP_LEVELS.OBSERVER));1===actors.length&&(actor=actors[0])}}if(actor)return void CoC7Link._onLinkActorClick(actor,options,{shiftKey:event.shiftKey})}ui.notifications.warn(game.i18n.localize("CoC7.WarnNoControlledActor"))}setValue(key,value){this.object[key]=value}get link(){return this._createDocumentLink(this.object)}get id(){return this.object.id}get pack(){return this.object.pack}get checkType(){return this.object.check}get difficulty(){return this.object.difficulty}get icon(){return this.object.icon}get displayName(){return this.object.displayName}get modifier(){return this.object.modifier}get linkType(){return this.object.linkType}get sanMin(){return this.object.sanMin}get sanMax(){return this.object.sanMax}get sanReason(){return this.object.sanReason}get effect(){return this.object.object}get checkName(){if(this.isCharacteristicCheck){const characteristics=CoCActor.getCharacteristicDefinition();return characteristics.find((c=>c.key===this.object.name||c.shortName===this.object.name||c.label===this.object.name))?.key??""}return this.object.name}get isCheck(){return this.object.check===CoC7Link.CHECK_TYPE.CHECK}get isCharacteristicCheck(){return this.isCheck&&this.object.linkType===CoC7Link.LINK_TYPE.CHARACTERISTIC}get isAttributeCheck(){return this.isCheck&&this.object.linkType===CoC7Link.LINK_TYPE.ATTRIBUTE}get isSkillCheck(){return this.isCheck&&this.object.linkType===CoC7Link.LINK_TYPE.SKILL}get isItemCheck(){return this.object.check===CoC7Link.CHECK_TYPE.ITEM}get isSanLossCheck(){return this.object.check===CoC7Link.CHECK_TYPE.SANLOSS}get isEffect(){return this.object.check===CoC7Link.CHECK_TYPE.EFFECT}get isBlind(){return this.isCheck&&this.object.blind}get isPushing(){return this.isCheck&&this.object.pushing}}class CoC7ContentLinkDialog extends FormApplication{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{id:"link-creation",classes:["coc7","active-effect-sheet"],title:game.i18n.localize("CoC7.CreateLink"),dragDrop:[{dragSelector:null,dropSelector:".container"}],template:"systems/CoC7/templates/apps/link-creation.html",closeOnSubmit:!1,width:560,height:"auto",tabs:[{navSelector:".tabs",contentSelector:".effect-options",initial:"details"}]})}async getData(){const sheetData=await super.getData();return sheetData.checkType=[{key:CoC7Link.CHECK_TYPE.CHECK,label:game.i18n.localize("CoC7.Check")},{key:CoC7Link.CHECK_TYPE.SANLOSS,label:game.i18n.localize("CoC7.SanityCheck")},{key:CoC7Link.CHECK_TYPE.ITEM,label:game.i18n.localize("CoC7.ItemWeapon")},{key:CoC7Link.CHECK_TYPE.EFFECT,label:game.i18n.localize("EFFECT.TabEffects")}],sheetData.linkType=[{key:CoC7Link.LINK_TYPE.CHARACTERISTIC,label:game.i18n.localize("CoC7.Characteristic")},{key:CoC7Link.LINK_TYPE.ATTRIBUTE,label:game.i18n.localize("CoC7.Attribute")},{key:CoC7Link.LINK_TYPE.SKILL,label:game.i18n.localize("CoC7.Skill")}],sheetData.attributeType=[{key:"lck",label:game.i18n.localize("CoC7.Luck")},{key:"san",label:game.i18n.localize("CoC7.Sanity")}],sheetData.effectModes=Object.entries(CONST.ACTIVE_EFFECT_MODES).reduce(((obj,e)=>(obj[e[1]]=game.i18n.localize("EFFECT.MODE_"+e[0]),obj)),{}),sheetData.characteristicType=CoCActor.getCharacteristicDefinition(),sheetData.link=sheetData.object.link,sheetData.fromGame=sheetData.link.isItemCheck||sheetData.link.isSkillCheck,sheetData.fromDirectory="fromDirectory"===sheetData.object.hasID,sheetData.fromCompendium="fromCompendium"===sheetData.object.hasID,sheetData.isSetFromGame=sheetData.link.id&&(sheetData.fromDirectory||sheetData.fromCompendium),sheetData.difficultyLevel=CoC7Check.difficultyLevel,sheetData.actorNames=sheetData.object.actors.map((a=>a.name)).join(", "),sheetData}activateListeners(html){super.activateListeners(html),html.find("select[name=type],select[name=check],select[name=attributeKey],select[name=characteristicKey],input[type=checkbox]").change(this._onChangeSubmit.bind(this)),html.find(".effect-control").click(this._onEffectControl.bind(this))}_onChangeSubmit(event){switch(event.currentTarget.name){case"fromCompendium":case"fromDirectory":this.object.hasID=event.currentTarget.name===this.object.hasID?"":event.currentTarget.name}this._onSubmit(event)}_onEffectControl(event){event.preventDefault();const button=event.currentTarget;switch(button.dataset.action){case"add":return this._addEffectChange();case"delete":button.closest(".effect-change").remove(),this._onSubmit(event)}}async _addEffectChange(){const idx=this.object.link.effect.changes.length;return this.submit({preventClose:!0,updateData:{[`effect.changes.${idx}`]:{key:"",mode:CONST.ACTIVE_EFFECT_MODES.ADD,value:""}}})}async _updateObject(event,formData){let hasEffect=!1;const effect={duration:{},changes:[]};for(const key in formData)switch(key){case"checkName":this.object.link.setValue("name",formData.checkName);break;case"blind":case"pushing":case"difficulty":case"displayName":case"icon":case"id":case"modifier":case"pack":case"sanMin":case"sanMax":case"sanReason":this.object.link.setValue(key,formData[key]);break;case"hasModifiers":case"hasLabel":case"hasIcon":this.object[key]=formData[key];break;case"effect.label":effect.label=formData[key],hasEffect=!0;break;case"effect.icon":effect.icon=formData[key],hasEffect=!0;break;case"effect.tint":effect.tint=formData[key],hasEffect=!0;break;case"effect.disabled":effect.disabled=formData[key],hasEffect=!0;break;case"effect.duration.seconds":effect.duration.seconds=formData[key],hasEffect=!0;break;case"effect.duration.rounds":effect.duration.rounds=formData[key],hasEffect=!0;break;case"effect.duration.turns":effect.duration.turns=formData[key],hasEffect=!0;break;default:{const match=key.match(/^effect\.changes\.(\d+)\.key$/);match&&(effect.changes.push({key:formData[key],mode:formData["effect.changes."+match[1]+".mode"],value:formData["effect.changes."+match[1]+".value"]}),hasEffect=!0)}}hasEffect&&this.object.link.setValue("object",effect);const target=event.currentTarget;if(target){switch(target.name){case"type":this.object.link.setValue("check",target.value),target.value===CoC7Link.CHECK_TYPE.CHECK&&(this.object.link.setValue("linkType",CoC7Link.LINK_TYPE.SKILL),this.object.link.setValue("name",""));break;case"check":this.object.link.setValue("linkType",target.value),target.value===CoC7Link.LINK_TYPE.CHARACTERISTIC?this.object.link.setValue("name",CoCActor.getCharacteristicDefinition()[0].key):target.value===CoC7Link.LINK_TYPE.ATTRIBUTE?this.object.link.setValue("name","lck"):this.object.link.setValue("name","");break;case"attributeKey":case"characteristicKey":this.object.link.setValue("name",target.value)}if("submit"===event.type){switch(event.submitter.dataset.action){case"clipboard":CoC7Utilities.copyToClipboard(this.object.link.link);break;case"chat":CoC7Link.toChatMessage(this.object.link.object);break;case"whisper-owner":CoC7Link.toWhisperMessage(this.object.link.object,this.object.actors);break;case"whisper-selected":if(!canvas.tokens.controlled.length)return void ui.notifications.warn(game.i18n.localize("CoC7.ErrorNoTokensSelected"));CoC7Link.toWhisperMessage(this.object.link.object,canvas.tokens.controlled.filter((t=>t.actor.owners.length)).map((t=>t.actor)))}return}}this.render(!0)}async _onDrop(event){const dataString=event.dataTransfer.getData("text/plain"),data=JSON.parse(dataString);if("CoC7Link"===data.type)this.setLink(await CoC7Link.fromDropData(data)),this.render(!0);else if("Folder"===data.type&&"Actor"===data.documentName||["Item","Actor"].includes(data.type)){const dataList=await CoC7Utilities.getDataFromDropEvent(event,data.documentName??data.type);data.documentName??"Actor"===data.type?(this.object.actors=dataList.filter((a=>a.owners.length)),this.render(!0)):1===dataList.length&&["skill","weapon"].includes(dataList[0].type)&&(dataList[0].pack?(this.object.hasID="fromCompendium",this.object.link.setValue("pack",dataList[0].pack)):this.object.hasID="fromDirectory",this.object.link.setValue("id",dataList[0].id),this.object.link.setValue("name",dataList[0].name),this.render(!0))}}setLink(link){return this.object.link=link,""!==link.pack?this.object.hasID="fromCompendium":""!==link.id&&(this.object.hasID="fromDirectory"),link.difficulty!==CoC7Check.difficultyLevel.regular||0!==parseInt(link.modifier,10)||link.isPushing?this.object.hasModifiers=!0:this.object.hasModifiers=!1,""!==link.displayName&&(this.object.hasLabel=!0),""!==link.icon&&(this.object.hasIcon=!0),""}static async create(linkData={},option={}){const object=foundry.utils.mergeObject({link:null,hasID:"",hasModifiers:!1,hasLabel:!1,hasIcon:!1,actors:[]},option),dialog=new CoC7ContentLinkDialog(object,{});dialog.setLink(await CoC7Link.fromDropData(linkData)),dialog.render(!0)}}class RollDialog{static async create(options={}){options.difficulty&&(options.difficultyLevel={},CoC7Check.difficultyLevel.unknown===options.difficulty&&(options.difficultyLevel.unknown=!0),CoC7Check.difficultyLevel.regular===options.difficulty&&(options.difficultyLevel.regular=!0),CoC7Check.difficultyLevel.hard===options.difficulty&&(options.difficultyLevel.hard=!0),CoC7Check.difficultyLevel.extreme===options.difficulty&&(options.difficultyLevel.extreme=!0)),options.name&&!options.displayName&&(options.displayName=options.name);const unknownDifficultyDefault="unknown"===game.settings.get("CoC7","defaultCheckDifficulty"),data={allowFlatDiceModifier:game.settings.get("CoC7","allowFlatDiceModifier")&&!options.disableFlatDiceModifier,allowFlatThresholdModifier:game.settings.get("CoC7","allowFlatThresholdModifier")&&!options.disableFlatThresholdModifier,difficulty:CoC7Check.difficultyLevel,unknownDifficultyDefault,hideDifficulty:options.hideDifficulty??!1,options};void 0!==options.cardType&&(!options.forcedCardType??1)&&(data.cardTypes=CoC7ChatMessage.cardTypes(options));const html=await renderTemplate("systems/CoC7/templates/apps/bonus.html",data);return new Promise((resolve=>{let formData=null;const dlg=new Dialog({title:options.displayName?game.i18n.format("CoC7.BonusSelectionWindowNamed",{name:options.displayName}):game.i18n.localize("CoC7.BonusSelectionWindow"),content:html,buttons:{roll:{label:game.i18n.localize("CoC7.RollDice"),callback:html=>(formData=new FormData(html[0].querySelector("#bonus-roll-form")),resolve(formData))}},default:"roll",close:()=>{}});dlg.render(!0)}))}}class RollCard{constructor(){this.rolls=[],this.initiator=null}static async fromMessageId(messageId){const message=game.messages.get(messageId);if(!message)return;const card=await this.fromMessage(message);return card.messageId=messageId,card}static async fromMessage(message){const cardElement=$(message.content)[0];if(!cardElement)return;const card=await this.fromHTMLCardElement(cardElement);return card.message=message,card}static async fromHTMLCardElement(card){const cardData=JSON.parse(unescape(card.dataset.object));return await this.fromData(cardData)}static async fromData(data){const card=Object.assign(new this,data);for(let index=0;index<card.rolls.length;index++)"Object"===card.rolls[index]?.constructor?.name&&(card.rolls[index]=Object.assign(new CoC7Check,card.rolls[index]),card.rolls[index].rolled&&(card.rolls[index]._htmlRoll=await card.rolls[index].getHtmlRoll()));return card}static async _onToggle(event){event.preventDefault();const span=event.currentTarget;if(span&&span.classList.contains("gm-select-only")&&!game.user.isGM)return;const message=span.closest(".chat-message"),card=await this.fromMessageId(message.dataset.messageId);if(!card)return;const flag=span.dataset.flag;if(!flag)return;const toggle=span.closest(".toggle");if(toggle){const buttons=toggle.querySelectorAll(".toggle-switch");for(const b of buttons)card.unsetFlag(b.dataset.flag);card.setFlag(flag)}else card.toggleFlag(flag);card.updateChatCard()}static async dispatch(data){if(game.user.isGM){let card,messages=ui.chat.collection.filter((message=>this.defaultConfig.type===message.getFlag("CoC7","type")&&"resolved"!==message.getFlag("CoC7","state")&&(!["combinedCard"].includes(this.defaultConfig.type)||message.getFlag("CoC7","initiator")===data.roll.initiator)));if(messages.length){const timestamp=new Date(messages[0].timestamp);86400<(new Date-timestamp)/1e3&&(await messages[0].setFlag("CoC7","state","resolved"),messages=[])}card=messages.length?await this.fromMessage(messages[0]):new this,void 0!==data._rollMode&&(card._rollMode=data._rollMode),await card.process(data)}else game.socket.emit("system.CoC7",data)}static async resolveOld(userId){const messages=ui.chat.collection.filter((message=>this.defaultConfig.type===message.getFlag("CoC7","type")&&"resolved"!==message.getFlag("CoC7","state")&&(!["combinedCard"].includes(this.defaultConfig.type)||message.getFlag("CoC7","initiator")===userId)));if(messages.length){await messages[0].setFlag("CoC7","state","resolved");const card=await this.fromMessage(messages[0]);card.closeCard(),await card.updateChatCard()}}async toMessage(){const html=await renderTemplate(this.config.template,this),htmlCardElement=$(html);htmlCardElement[0].dataset.object=escape(this.dataString);const chatData={user:game.user.id,flavor:game.i18n.localize(this.config.title),content:htmlCardElement[0].outerHTML,flags:{CoC7:{type:this.config.type,state:"initiated",initiator:this.initiator}}};["gmroll","blindroll"].includes(this.rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),"blindroll"===this.rollMode&&(chatData.blind=!0);return await ChatMessage.create(chatData)}async updateChatCard(){if(await this.compute(),this.messageId){const html=await renderTemplate(this.config.template,this),htmlCardElement=$.parseHTML(html)[0];htmlCardElement.dataset.object=escape(this.dataString);const chatMessage=game.messages.get(this.messageId);this.closed&&await chatMessage.setFlag("CoC7","state","resolved");const msg=await chatMessage.update({content:htmlCardElement.outerHTML});return await ui.chat.updateMessage(msg,!1),msg}await this.toMessage()}updateRoll(data){data.fromGM||Object.assign(this.rolls[data.rank],data.roll)}addRollData(data){const check=Object.assign(new CoC7Check,data.roll);this.rolls.push(check),"combinedCard"===this.config.type&&(this.initiator=data.roll.initiator)}addRoll(data){this.rolls.push(data)}removeRoll(rank){this.rolls.splice(rank,1)}setFlag(flagName){(flagName||"string"===$.type(flagName))&&(this[flagName]=!0)}unsetFlag(flagName){(flagName||"string"===$.type(flagName))&&(this[flagName]=!1)}toggleFlag(flagName){this[flagName]=!this[flagName]}get message(){return this._message?this._message:this._messageId?game.messages.get(this._messageId):void 0}set message(x){this._message=x}get messageId(){return this._messageId?this._messageId:this._message?this._message.id:void 0}set messageId(x){this._messageId=x}static get defaultConfig(){return{exclude:["_actor","_skill","_item","_message","_htmlRoll"],excludeStartWith:"__"}}get winners(){return this.rolls.filter((r=>r.winner))}get winner(){if(this.winners.length)return this.winners[0]}get loosers(){return this.rolls.filter((r=>!r.winner))}get looser(){if(this.loosers.length)return this.loosers[0]}get hasWinner(){return this.winners.length>0}get isKeeper(){return game.user.isGM}get rollMode(){return this._rollMode||(this._rollMode=game.settings.get("core","rollMode")),this._rollMode}set rollMode(x){!1===x&&(this._rollMode=game.settings.get("core","rollMode")),this._rollMode=x}get data(){return JSON.parse(this.dataString)}get dataString(){return JSON.stringify(this,((key,value)=>{if(null!==value&&!this.config.exclude?.includes(key)&&!key.startsWith(this.config.excludeStartWith))return value}))}}class CombinedCheckCard extends RollCard{static async bindListerners(html){html.on("click",".roll-card.combined .toggle-switch",this._onToggle.bind(this)),html.on("click",".roll-card.combined a",CombinedCheckCard._onClick.bind(this)),html.on("click",".roll-card.combined button",CombinedCheckCard._onClick.bind(this))}static get defaultConfig(){return foundry.utils.mergeObject(super.defaultConfig,{template:"systems/CoC7/templates/chat/cards/combined-roll.html",type:"combinedCard",title:"CoC7.CombinedRollCard"})}get config(){return CombinedCheckCard.defaultConfig}get successCount(){if(this.rolled){let count=0;for(const r of this.rolls)r.passed&&(count+=1);return count}}get mainActorKey(){return this.rolls[0]?.actor?.actorKey||void 0}get success(){if(void 0!==this.successCount)return this.any?this.successCount>0:this.all?this.successCount===this.rolls.length:void 0}get failure(){if(void 0!==this.success)return!this.success}get checkGMInitiator(){return game.users.get(this.initiator)?.isGM}async getHtmlRoll(){if(!this.rolled)return;const check=new CoC7Check;return await check._perform({roll:this._roll[check.diceModifier||0],silent:!0}),await check.getHtmlRoll({hideSuccess:!0})}process(data){switch(data.action){case"new":case"roll":this.addRollData(data);break;case"updateRoll":this.updateRoll(data);break;case"assignRoll":this.assignRoll(data)}game.user.isGM?this.updateChatCard():game.socket.emit("system.CoC7",data)}async assignRoll(data){game.user.isGM&&(this.rolled||(this.rolled=!0,this._roll=data.roll))}static async _onClick(event){event.preventDefault();const a=event.currentTarget,action=a.dataset.action,li=a.closest("li.actor-roll"),message=a.closest(".chat-message"),cardElement=a.closest("div.roll-card"),card=await CombinedCheckCard.fromHTMLCardElement(cardElement);card.messageId=message.dataset.messageId;const rank=Number(li?.dataset?.rank);switch(action){case"remove-roll":card.removeRoll(rank),await card.updateChatCard();break;case"close-card":card.closeCard(),await card.updateChatCard();break;case"roll-card":{const pool={};for(const dice of card.rolls){const diceModifier=parseInt(dice.diceModifier,10);isNaN(diceModifier)||(pool[diceModifier]=!1)}const roll=await CoC7Dice.combinedRoll({pool});roll.initiator=game.user.id;const data={type:this.defaultConfig.type,action:"assignRoll",fromGM:game.user.isGM,roll};AudioHelper.play({src:CONFIG.sounds.dice},!0),card.process(data);break}default:{const options={update:!1,data:a.dataset,classes:a.classList,target:a};await CoC7Check.alter(card.rolls[rank],action,options);const data={type:this.defaultConfig.type,action:"updateRoll",rank,fromGM:game.user.isGM,roll:{initiator:game.user.id}};game.user.isGM||(data.roll=card.rolls[rank].JSONRollData),card.process(data);break}}}async compute(){if(this._roll){this.rolls=this.rolls.filter((roll=>void 0!==roll.actor.system));for(const r of this.rolls)r.rolled||(r.modifier=r.diceModifier||0,r.difficulty=r.difficulty||CoC7Check.difficultyLevel.regular,r.flatDiceModifier=r.flatDiceModifier||0,r.flatThresholdModifier=r.flatThresholdModifier||0,await r._perform({roll:this._roll[r.modifier],silent:!0}));for(let i=0;i<this.rolls.length;i++)this.rolls[i].rolled&&(this.rolls[i]._htmlRoll=await this.rolls[i].getHtmlRoll({hideDiceResult:!0}));this._htmlRoll=await this.getHtmlRoll()}}closeCard(){this.closed=!0}}class InteractiveChatCard{constructor(options={}){this._options=options}get options(){return foundry.utils.mergeObject(this.constructor.defaultOptions,this._options)}get template(){return this.options.template}get cssClasses(){return this.options.classes}async toMessage(optionnalChatData={}){const html=await renderTemplate(this.template,this),htmlCardElement=$(html)[0];htmlCardElement.dataset.object=escape(this.dataString),htmlCardElement.dataset.cardClass=this.constructor.name,htmlCardElement.classList.add(...this.cssClasses);const chatData=foundry.utils.mergeObject({user:game.user.id,flavor:game.i18n.localize(this.options.title),content:htmlCardElement.outerHTML},optionnalChatData);["gmroll","blindroll"].includes(this.rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),"blindroll"===this.rollMode&&(chatData.blind=!0),ChatMessage.create(chatData).then((msg=>msg))}async updateChatCard(options={}){if(options.compute&&this.compute(),this.messageId){const html=await renderTemplate(this.template,this),htmlCardElement=$.parseHTML(html)[0];htmlCardElement.dataset.object=escape(this.dataString),htmlCardElement.dataset.cardClass=this.constructor.name,htmlCardElement.classList.add(...this.cssClasses);const chatMessage=game.messages.get(this.messageId);this.closed&&await chatMessage.setFlag("CoC7","state","resolved");const msg=await chatMessage.update({content:htmlCardElement.outerHTML});return await ui.chat.updateMessage(msg,!1),msg}this.toMessage()}activateListeners(html){html.on("click",".interactive-card .ic-radio-switch",this._onToggle.bind(this)),html.on("click",".interactive-card .ic-switch",this._onToggle.bind(this)),html.on("click",".interactive-card .submit",this._onSubmit.bind(this)),html.on("focusout","input",this._onSubmit.bind(this)),html.on("click",".interactive-card button",this._onButton.bind(this)),html.on("keydown","form",this._onKey.bind(this))}static async bindListeners(html){const htmlCardElement=html[0].querySelector(".chat-card");if(!htmlCardElement)return;if(!htmlCardElement.dataset.cardClass)return;if(!Object.getOwnPropertyNames(game.CoC7.cards).includes(htmlCardElement.dataset.cardClass))return;const card=await InteractiveChatCard.fromHTMLCardElement(htmlCardElement),typedCard=Object.assign(new game.CoC7.cards[htmlCardElement.dataset.cardClass],card);typedCard.assignObject(),typedCard.activateListeners(html)}assignObject(){}_onButton(event){const action=event.currentTarget.dataset.action;this[action]&&this[action]({event,update:!0})}_onKey(event){return"Enter"===event.key&&this._onSubmit(event),"Enter"!==event.key}_onSubmit(event){event.preventDefault();const card=event.currentTarget.closest(".interactive-card");if(!card)return;this._update(card)&&this.updateChatCard()}_update(card){const forms=card.querySelectorAll("form");let updates=!1;for(let i=0;i<forms.length;i++){const form=forms[i];let data=new FormDataExtended(form).object;data=foundry.utils.diffObject(this,foundry.utils.expandObject(data));for(const[key,value]of Object.entries(data))this[key]=value,updates=!0}return updates}get message(){return this._message?this._message:this._messageId?game.messages.get(this._messageId):void 0}set message(x){this._message=x}get messageId(){return this._messageId?this._messageId:this._message?this._message.id:void 0}set messageId(x){this._messageId=x}static get defaultOptions(){return{classes:["interactive-card"],exclude:["_actor","_skill","_item","_message","_htmlRoll"],excludeStartWith:"__"}}get data(){return JSON.parse(this.dataString)}get dataString(){return JSON.stringify(this,((key,value)=>{if(null!==value&&!this.options.exclude?.includes(key)&&!key.startsWith(this.options.excludeStartWith))return value}))}get rollMode(){return this._rollMode||(this._rollMode=game.settings.get("core","rollMode")),this._rollMode}set rollMode(x){!1===x&&(this._rollMode=game.settings.get("core","rollMode")),this._rollMode=x}static async fromMessageId(messageId){const message=game.messages.get(messageId);if(!message)return;const card=await this.fromMessage(message);return card.messageId=messageId,card}static async fromMessage(message){const cardElement=$(message.content)[0];if(!cardElement)return;const card=await this.fromHTMLCardElement(cardElement);return card.message=message,card}static async fromHTMLCardElement(card){const cardData=JSON.parse(unescape(card.dataset.object));if(!cardData.messageId){const message=card.closest(".message");cardData.messageId=message?.dataset?.messageId}return await this.fromData(cardData)}static async fromData(data){const card=Object.assign(new this,data);return await card.assignObject(),card}setFlag(flagName){(flagName||"string"===$.type(flagName))&&(this[flagName]=!0)}unsetFlag(flagName){(flagName||"string"===$.type(flagName))&&(this[flagName]=!1)}toggleFlag(flagName){this[flagName]=!this[flagName]}async _onToggle(event){event.preventDefault();const target=event.currentTarget;if("action"in target.dataset)return this._onButton(event);if(target&&target.classList.contains("gm-select-only")&&!game.user.isGM)return;const flag=target.dataset.flag;if(!flag)return;const toggle=target.closest(".ic-radio");if(toggle){const buttons=toggle.querySelectorAll(".ic-radio-switch");for(const b of buttons)this.unsetFlag(b.dataset.flag);this.setFlag(flag)}else this.toggleFlag(flag);const card=target.closest(".interactive-card");card&&this._update(card),this.updateChatCard()}get displayActorOnCard(){return game.settings.get("CoC7","displayActorOnCard")}get isBlind(){return this.rollMode?(void 0===this._isBlind&&(this._isBlind="blindroll"===this.rollMode),this._isBlind):null}set isBlind(x){this._isBlind=x}get actor(){return this.actorKey?chatHelper.getActorFromKey(this.actorKey):null}get token(){return this.actor?chatHelper.getTokenFromKey(this.actorKey):null}get item(){return this.itemId?this.actor.items.get(this.itemId):null}get weapon(){return this.item}get targetedTokens(){return[...game.user.targets]}get target(){return this.targetToken?this.targetToken:this.targetActor}get isTargetOwner(){return this.target.isOwner}get isKeeper(){return game.user.isGM}get targetToken(){return this._targetToken||(this._targetKey?this._targetToken=chatHelper.getTokenFromKey(this._targetKey):(this._targetToken=this.targetedTokens.pop(),this._targetToken?this._targetKey=`${this._targetToken.scene.id}.${this._targetToken.id}`:this._targetToken=null)),this._targetToken}get targetActor(){return this._targetActor||(this.targetToken?this._targetActor=this.targetToken.actor||this.targetToken.data.actor||this.targetToken.data.document:this._targetActor=chatHelper.getActorFromKey(this._targetKey)),this._targetActor}get targetKey(){return this.targetToken||this.targetActor?this._targetKey:null}get hasTarget(){return!(!this.targetToken&&!this.targetActor)}set targetKey(x){this._targetKey=x}get skills(){return this.actor.getWeaponSkills(this.itemId)}get targetImg(){const img=chatHelper.getActorImgFromKey(this.targetKey);return img||"../icons/svg/mystery-man-black.svg"}get name(){return this.token?this.token.name:this.actor.name}get targetName(){return this.target?this.target.name:"dummy"}get actorImg(){const img=chatHelper.getActorImgFromKey(this.actorKey);return img||"../icons/svg/mystery-man-black.svg"}}class DamageCard extends InteractiveChatCard{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{exclude:["_targetToken","_targetActor","_htmlRoll","_htmlInlineRoll"].concat(super.defaultOptions.exclude),template:"systems/CoC7/templates/chat/cards/damage.html"})}async assignObject(){this.damageRoll&&"Object"===this.damageRoll.constructor.name&&(this.damageRoll=Roll.fromData(this.damageRoll))}_onButton(event){super._onButton(event)}get critical(){return this.options.critical}set critical(x){this._options.critical=x}get impale(){return void 0===this._impale?this.weapon.impale:this._impale}set impale(x){this._impale=x}get isDamageFormula(){return"string"==typeof this.damageFormula&&(!!isNaN(Number(this.damageFormula))&&Roll.validate(this.damageFormula))}get isDamageNumber(){return!isNaN(Number(this.damageFormula))}get isArmorForula(){return"string"==typeof this.armor&&(!!isNaN(Number(this.armor))&&Roll.validate(this.armor))}get totalDamageString(){let damage=Number(this.isDamageNumber?this.damageFormula:this.roll.total);return!this.ignoreArmor&&((isNaN(Number(this.armor))||Number(this.armor)>0)&&(damage-=Number(this.armor)),!isNaN(Number(this.armor))&&damage<=0)?game.i18n.localize("CoC7.ArmorAbsorbsDamage"):damage}get noDamage(){if(this.rolled){const damage=this.isDamageNumber?this.damageFormula:this.roll.total;return this.ignoreArmor?!!(damage<=0):!isNaN(Number(this.armor))&&!!(damage-Number(this.armor)<=0)}return!1}async updateChatCard(){if(!this.options.fastForward||this.roll||this.isDamageNumber||await this.rollDamage({update:!1}),this.isDamageNumber||this.roll&&null!=this.roll.total||this.hardrolled?this.rolled=!0:this.rolled=!1,!this.options.fastForward||this.damageInflicted||this.noDamage||await this.dealDamage({update:!1}),this.rolled&&this.roll){"Object"===this.roll.constructor.name&&(this.roll=Roll.fromData(this.roll));const a=createInlineRoll(this.roll);this._htmlInlineRoll=a.outerHTML,this._htmlRoll=await this.roll.render()}await super.updateChatCard()}async rollDamage(options={update:!0}){this.roll=await new Roll(this.damageFormula||"0").evaluate({async:!0}),await CoC7Dice.showRollDice3d(this.roll),this.hardrolled=!0,options.update=void 0===options.update||options.update,options.update&&this.updateChatCard()}async rollArmor(options={update:!0}){const roll=await new Roll(this.armor).evaluate({async:!0});this.armor=roll.total,options.update=void 0===options.update||options.update,options.update&&this.updateChatCard()}async dealDamageToSelectedTarget(options={update:!0}){if(this.isArmorForula&&await this.rollArmor(),isNaN(Number(this.totalDamageString)))return void ui.notifications.error(game.i18n.localize("CoC7.ErrorEvaluatingDamage"));const targets=[],targetName=[],selectedPlayers=canvas.tokens.controlled.map((token=>token.actor));for(let index=0;index<selectedPlayers.length;index++)this.actor.id!==selectedPlayers[index].id&&(targetName.push(selectedPlayers[index].name),targets.push(selectedPlayers[index]));const data={title:" ",content:game.i18n.format("CoC7.DealDamage",{damage:this.totalDamageString,target:targetName}),buttons:{one:{icon:'<i class="fas fa-check"></i>',label:game.i18n.localize("CoC7.Proceed"),callback:()=>{this.confirmDamage(targets)}},two:{icon:'<i class="fas fa-times"></i>',label:game.i18n.localize("CoC7.Cancel"),callback:()=>{}}},default:"two"};targetName.length>0&&new Dialog(data).render(!0)}async confirmDamage(targets){for(let index=0;index<targets.length;index++)await targets[index].dealDamage(Number(this.totalDamageString),{ignoreArmor:!1}),ChatMessage.create({content:game.i18n.format("CoC7.DamageDealTo",{name:targets[index].name,damage:this.totalDamageString})})}async dealDamage(options={update:!0}){this.isArmorForula&&await this.rollArmor();let damage=this.totalDamageString;if(isNaN(Number(damage))){if(game.i18n.localize("CoC7.ArmorAbsorbsDamage")!==damage)return void ui.notifications.error("Error evaluating damage");damage=0}this.targetActor&&await this.targetActor.dealDamage(Number(damage),{ignoreArmor:!0}),this.damageInflicted=!0,options.update=void 0===options.update||options.update,options.update&&this.updateChatCard()}get range(){return this.options.range||"normal"}set range(x){["normal","long","extreme"].inclues(x.toLowerCase())&&(this._options.range=x)}get damageFormula(){const range=this.range;let formula=this.weapon?.system?.range[range]?.damage,db=this.actor.db;if(db=(""===(db??"").toString().trim()?0:db).toString().trim(),db.startsWith("-")||(db="+"+db),this.weapon.system.properties.addb&&(formula+=db),this.weapon.system.properties.ahdb&&(formula=formula+"+ floor("+db+"/2)"),formula){const maxDamage=new Roll(formula)[foundry.utils.isNewerVersion(game.version,"12")?"evaluateSync":"evaluate"]({maximize:!0}).total;let rollString;return this.critical?this.impale?(rollString=formula+"+"+maxDamage,rollString):maxDamage:formula}}get armor(){return void 0!==this._armor&&""!==this._armor?this._armor:this.target?this.targetActor.system.attribs.armor.value:0}set armor(x){this._armor=x}}class OpposedCheckCard extends RollCard{static async bindListerners(html){html.on("click",".roll-card.opposed .toggle-switch",this._onToggle.bind(this)),html.on("click",".roll-card.opposed a",OpposedCheckCard._onClick.bind(this)),html.on("click",".roll-card.opposed button",OpposedCheckCard._onClick.bind(this))}static get defaultConfig(){return foundry.utils.mergeObject(super.defaultConfig,{template:"systems/CoC7/templates/chat/cards/opposed-roll.html",type:"opposedCard"})}get config(){return OpposedCheckCard.defaultConfig}get attackerRoll(){if(this.combat){if(this.rolls?.length){const attacker=this.rolls.filter((r=>0===r.index||r.attacker));if(attacker.length)return attacker[0]}}else;}get defenderRoll(){if(this.combat){if(this.rolls?.length){const defender=this.rolls.filter((r=>0!==r.index||!r.attacker));if(defender.length)return defender[0]}}else;}get defenderIsDodging(){return!(!this.defenderRoll?.actor?.dodgeSkill?.name||!this.defenderRoll?.skill?.name)&&this.defenderRoll.actor.dodgeSkill.name.toLowerCase()===this.defenderRoll.skill.name.toLowerCase()}get advantageAttacker(){return void 0===this._aa?!!this.defenderRoll&&!this.defenderIsDodging:this._aa}get winnerRollsDamage(){return!!(this.combat&&this.rolls.length>=2&&this.hasWinner&&"weapon"===this.winner?.item?.type)}set advantageAttacker(x){this._aa=!0,this._ad=!1}get advantageDefender(){return void 0===this._ad?this.defenderIsDodging:this._ad}set advantageDefender(x){this._ad=!0,this._aa=!1}get isTie(){return this.winnerCount>1}get needsTieBreaker(){return!!this.combat&&!(!this.attackerRoll||!this.defenderRoll||this.attackerRoll.successLevel!==this.defenderRoll.successLevel)}get winnerCount(){let count=0;for(const r of this.rolls)r.winner&&(count+=1);return count}get isAttackManeuver(){return!(!this.combat||!this.attackerRoll||this.attackerRoll?.item&&!this.attackerRoll?.item.system.properties?.mnvr)}get resultText(){if(this.combat&&this.attackerRoll&&this.defenderRoll){if(!this.attackerRoll.winner&&!this.defenderRoll.winner)return game.i18n.localize("CoC7.NoWinner");if(this.attackerRoll.winner)return this.attackerRoll.maneuver?game.i18n.format("CoC7.ManeuverSuccess",{name:this.attackerRoll.actor.name}):game.i18n.format("CoC7.AttackSuccess",{name:this.attackerRoll.actor.name});if(this.defenderRoll.winner)return this.defenderRoll.maneuver?game.i18n.format("CoC7.ManeuverSuccess",{name:this.defenderRoll.actor.name}):this.defenderIsDodging?game.i18n.format("CoC7.DodgeSuccess",{name:this.defenderRoll.actor.name}):game.i18n.format("CoC7.AttackSuccess",{name:this.defenderRoll.actor.name})}}async process(data){switch(data.action){case"new":this.rolls?.length||(this.combat=data.combat||void 0,this.combat&&(data.roll.attacker=!0)),data.roll.index=this.rolls.length,this.addRollData(data);break;case"roll":this.addRollData(data);break;case"updateRoll":this.updateRoll(data)}game.user.isGM?await this.updateChatCard():game.socket.emit("system.CoC7",data)}async roll(rank){await this.rolls[rank]._perform();const data={type:this.config.type,action:"updateRoll",rank,fromGM:game.user.isGM};return game.user.isGM||(data.roll=this.rolls[rank].JSONRollData),data}static async _onClick(event){event.preventDefault();const a=event.currentTarget,action=a.dataset.action,li=a.closest("li.actor-roll"),message=a.closest(".chat-message"),cardElement=a.closest("div.roll-card"),card=await OpposedCheckCard.fromHTMLCardElement(cardElement);card.messageId=message.dataset.messageId;const rank=Number(li?.dataset?.rank);switch(action){case"toggle-combat":card.combat=!card.combat,await card.updateChatCard();break;case"remove-roll":card.removeRoll(rank),await card.updateChatCard();break;case"close-card":card.closeCard(),await card.updateChatCard();break;case"roll-check":{const speaker=ChatMessage.getSpeaker();card.rolls[rank].actorKey||(card.rolls[rank].actorKey=`${speaker.scene}.${speaker.token}`);const data=await card.roll(rank);await card.process(data);break}case"roll-damage":{card.closeCard(),await card.updateChatCard();const damageChatCard=new DamageCard({critical:card.winner.isExtremeSuccess,fastForward:event.shiftKey});damageChatCard.actorKey=card.winner.actor.actorKey,damageChatCard.targetKey=card.looser.actor.actorKey,damageChatCard.itemId=card.winner.itemId,damageChatCard.updateChatCard();break}default:{const options={update:!1,data:a.dataset,classes:a.classList,target:a};await CoC7Check.alter(card.rolls[rank],action,options);const data={type:this.defaultConfig.type,action:"updateRoll",rank,fromGM:game.user.isGM};game.user.isGM||(data.roll=card.rolls[rank].JSONRollData),card.process(data);break}}}async compute(rank=void 0){if(this.rolls=this.rolls.filter((roll=>void 0!==roll.actor.actorKey)),rank)this.rolls[rank].rolled&&(this.rolls[rank]._htmlRoll=await this.rolls[rank].getHtmlRoll({hideDiceResult:!0}));else for(let i=0;i<this.rolls.length;i++)delete this.rolls[i].maneuver,this.combat&&(!this.rolls[i].item||this.rolls[i].item.system.properties?.mnvr)&&(this.rolls[i]?.actor?.dodgeSkill?.name&&this.rolls[i]?.skill?.name&&this.rolls[i].actor.dodgeSkill.name.toLowerCase()!==this.rolls[i].skill.name.toLowerCase()||!this.rolls[i]?.actor?.dodgeSkill?.name)&&(this.rolls[i].maneuver=!0),this.rolls[i].rolled&&(this.rolls[i]._htmlRoll=await this.rolls[i].getHtmlRoll({hideDiceResult:!0}));if(this.combat){if(this.rolls.sort(((a,b)=>a.index>b.index?1:a.index<b.index?-1:0)),this.rolls.length>1){this.rolls=[this.rolls[0],this.rolls[1]];for(const r of this.rolls)delete r.winner,delete r.tie}this.rolls[0]&&(this.rolls[0].attacker=!0),this.rolls[0]?.rolled&&this.rolls[1]?.rolled&&(this.rolls[0].passed||this.rolls[1].passed)&&(this.rolls[0].successLevel>this.rolls[1].successLevel?this.rolls[0].winner=!0:this.rolls[1].successLevel>this.rolls[0].successLevel?this.rolls[1].winner=!0:this.advantageAttacker?this.rolls[0].winner=!0:this.rolls[1].winner=!0)}else{if(this.rolls.sort(((a,b)=>{if(a.rolled&&!b.rolled)return-1;if(!a.rolled&&b.rolled)return 1;if(!a.rolled&&!b.rolled)return 0;if(a.successLevel>b.successLevel)return this.resolved=!0,-1;if(a.successLevel<b.successLevel)return this.resolved=!0,1;if(game.settings.get("CoC7","opposedRollTieBreaker")){if(a.modifiedResult>b.modifiedResult)return this.resolved=!0,-1;if(a.modifiedResult<b.modifiedResult)return this.resolved=!0,1}else{if(a.rawValue>b.rawValue)return this.resolved=!0,-1;if(a.rawValue<b.rawValue)return this.resolved=!0,1}return 0})),this.winCount=0,this.rolls[0]&&this.rolls[0].rolled&&!this.rolls[0].failed){this.winCount=1;for(let i=1;i<this.rolls.length;i++)this.rolls[i]&&this.rolls[i].rolled&&this.rolls[0].successLevel===this.rolls[i].successLevel&&(game.settings.get("CoC7","opposedRollTieBreaker")?this.rolls[0].modifiedResult===this.rolls[i].modifiedResult:this.rolls[0].rawValue===this.rolls[i].rawValue)&&(this.winCount=this.winCount+1)}for(let i=0;i<this.rolls.length;i++)this.rolls[i].winner=i<this.winCount,this.rolls[i].tie=this.rolls[i].winner&&this.winCount>1}}closeCard(){this.closed=!0}}class SanDataDialog extends Dialog{activateListeners(html){super.activateListeners(html),html.find(":checkbox").click((()=>this._toggleInput(html)))}_toggleInput(html){html.find('*[name="customname"]').toggle()}static async create(options={}){const html=await renderTemplate("systems/CoC7/templates/apps/sandata.html",options);return new Promise((resolve=>{let formData=null;const dlg=new SanDataDialog({title:options.displayName?game.i18n.format("CoC7.SanDataSelectionWindowNamed",{name:options.displayName}):game.i18n.localize("CoC7.SanDataSelectionWindow"),content:html,buttons:{Validate:{label:game.i18n.localize("CoC7.Validate"),callback:html=>(formData=new FormData(html[0].querySelector("#san-data-form")),resolve(formData))}},default:"Validate",close:()=>{}});dlg.render(!0)}))}}class CoC7ChatMessage{static get ROLL_TYPE_ATTRIBUTE(){return"R/AT"}static get ROLL_TYPE_CHARACTERISTIC(){return"R/CH"}static get ROLL_TYPE_COMBAT(){return"R/CO"}static get ROLL_TYPE_SKILL(){return"R/SK"}static get ROLL_TYPE_ENCOUNTER(){return"R/EC"}static get CARD_TYPE_COMBINED(){return"C/CO"}static get CARD_TYPE_GROUP(){return"C/GR"}static get CARD_TYPE_NORMAL(){return"C/NO"}static get CARD_TYPE_OPPOSED(){return"C/OP"}static get CARD_TYPE_SAN_CHECK(){return"C/SC"}static get CARD_TYPE_NONE(){return"C/NO"}static cardTypes(config){if(config.rollType===CoC7ChatMessage.ROLL_TYPE_COMBAT)return null;const select={[CoC7ChatMessage.CARD_TYPE_NORMAL]:"CoC7.RegularRollCard",[CoC7ChatMessage.CARD_TYPE_COMBINED]:"CoC7.CombinedRollCard",[CoC7ChatMessage.CARD_TYPE_OPPOSED]:"CoC7.OpposedRollCard"};return config.rollType===CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE&&"san"===config.attribute&&(select[CoC7ChatMessage.CARD_TYPE_SAN_CHECK]="CoC7.SanityLossEncounter"),select}static normalizeRequest(options){if(void 0!==options.event||void 0===options.cardType||void 0===options.actor||void 0===options.skillId&&void 0===options.skillName&&void 0===options.attribute&&void 0===options.characteristic&&options.rollType!==CoC7ChatMessage.ROLL_TYPE_ENCOUNTER){if(void 0===options.event||void 0===options.cardType||void 0===options.rollType)return ui.notifications.error(game.i18n.format("CoC7.ErrorNotFound",{value:game.i18n.localize("CoC7.Roll")})),!1}else if(void 0!==options.skillId)options.actor.items.get(options.skillId)&&(options.rollType=CoC7ChatMessage.ROLL_TYPE_SKILL);else if(void 0!==options.skillName){const skillIds=options.actor.getSkillsByName(options.skillName);skillIds.length>0&&(options.skillId=skillIds[0].id,options.rollType=CoC7ChatMessage.ROLL_TYPE_SKILL)}else void 0!==options.attribute&&["lck","san"].includes(options.attribute)?options.rollType=CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE:void 0!==options.characteristic&&void 0!==options.actor.system.characteristics[options.characteristic]&&(options.rollType=CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC);if(![CoC7ChatMessage.CARD_TYPE_COMBINED,CoC7ChatMessage.CARD_TYPE_GROUP,CoC7ChatMessage.CARD_TYPE_NORMAL,CoC7ChatMessage.CARD_TYPE_OPPOSED,CoC7ChatMessage.CARD_TYPE_SAN_CHECK].includes(options.cardType))return ui.notifications.error(game.i18n.format("CoC7.ErrorInvalidFormula",{value:game.i18n.localize("CoC7.ErrorInvalidCardType")})),!1;if(![CoC7ChatMessage.ROLL_TYPE_SKILL,CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC,CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE,CoC7ChatMessage.ROLL_TYPE_ENCOUNTER].includes(options.rollType))return ui.notifications.error(game.i18n.format("CoC7.ErrorInvalidFormula",{value:game.i18n.localize("CoC7.ErrorInvalidRollType")})),!1;const config={options:{cardType:options.cardType,shiftKey:options.fastForward??options.event?.shiftKey??options.fastForward??!1,altKey:options.event?.altKey??!1,isCtrlKey:isCtrlKey(options.event??!1),createEncounter:options.createEncounter??!1,openLinkTool:options.openLinkTool??!1,sendToChat:options.sendToChat??!1,sendToClipboard:options.sendToClipboard??!1,isCombat:options.event?.currentTarget.classList?.contains("combat")??!1,preventStandby:options.preventStandby??!1,bonusDice:0},dialogOptions:{rollType:options.rollType,cardType:options.cardType,attribute:"",chatMessage:options.chatMessage??!0,forcedCardType:options.forcedCardType??!1,hideDifficulty:options.hideDifficulty??!1}};switch(config.dialogOptions.rollType){case CoC7ChatMessage.ROLL_TYPE_SKILL:case CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC:case CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE:case CoC7ChatMessage.ROLL_TYPE_ENCOUNTER:if(config.options.skillId=options.skillId??options.event?.currentTarget.closest(".item")?.dataset.skillId,config.options.itemId=options.event?.currentTarget.closest(".item")?.dataset.itemId,config.options.characteristic=options.characteristic??options.event?.currentTarget.parentElement.dataset.characteristic,config.options.attribute=options.attribute??options.event?.currentTarget.parentElement.dataset.attrib,config.dialogOptions.attribute=config.options.attribute,config.options.actorId=options.event?.currentTarget.closest("form").dataset.actorId??options.actor.id,config.options.tokenKey=options.event?.currentTarget.closest("form").dataset.tokenId??options.actor.tokenKey,config.options.weaponAltSkill=options.event?.currentTarget.classList.contains("alternativ-skill"),config.options.actor=options.actor,config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_SKILL&&config.options.isCombat){const item=config.options.actor.items.get(config.options.itemId);if(!item)return!1;"weapon"===item.type&&(config.options.weaponName=item.name,config.dialogOptions.rollType=CoC7ChatMessage.ROLL_TYPE_COMBAT)}if(void 0===config.options.actorId||void 0===config.options.tokenKey&&void 0===config.options.actor)return ui.notifications.error(game.i18n.format("CoC7.ErrorInvalidFormula",{value:game.i18n.localize("CoC7.ErrorActor")})),!1;if(config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_SKILL&&void 0===config.options.skillId)return ui.notifications.error(game.i18n.format("CoC7.ErrorInvalidFormula",{value:game.i18n.localize("CoC7.Entities.Skill")})),!1;if(config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC){if(void 0===config.options.characteristic)return ui.notifications.error(game.i18n.format("CoC7.ErrorInvalidFormula",{value:game.i18n.localize("CoC7.Characteristic")})),!1;if(!game.user.isGM&&!config.options.actor.system.characteristics[config.options.characteristic]?.value)return!1}else if(config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE){if(void 0===config.options.attribute)return ui.notifications.error(game.i18n.format("CoC7.ErrorInvalidFormula",{value:game.i18n.localize("CoC7.Attribute")})),!1;if(!game.user.isGM&&!config.options.actor.system.attribs[config.options.attribute]?.value)return!1}else if(config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_COMBAT){if(void 0===config.options.itemId)return ui.notifications.error(game.i18n.format("CoC7.ErrorInvalidFormula",{value:game.i18n.localize("CoC7.Entities.Weapon")})),!1;if(config.options.altKey)return!1}config.options.hasPlayerOwner=config.options.actor.hasPlayerOwner??!1,config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC?(config.dialogOptions.disableFlatThresholdModifier=config.options.isCtrlKey,config.dialogOptions.disableFlatDiceModifier=config.options.isCtrlKey):(config.dialogOptions.disableFlatThresholdModifier=!1,config.dialogOptions.disableFlatDiceModifier=!1),config.dialogOptions.modifier=0,config.dialogOptions.difficulty=options.difficulty??CoC7Check.difficultyLevel[game.settings.get("CoC7","defaultCheckDifficulty")],config.dialogOptions.flatDiceModifier=0,config.dialogOptions.flatThresholdModifier=0}return config}static async trigger(options={}){const config=CoC7ChatMessage.normalizeRequest(options);if(!1!==config)if(config.options.isCtrlKey&&game.user.isGM&&[CoC7ChatMessage.CARD_TYPE_NORMAL,CoC7ChatMessage.CARD_TYPE_SAN_CHECK].includes(config.dialogOptions.cardType))CoC7ChatMessage.createLink(config);else{if(!(config.options.sendToChat||config.options.sendToClipboard||config.options.openLinkTool||config.options.createEncounter)||!game.user.isGM||CoC7ChatMessage.CARD_TYPE_NONE!==config.dialogOptions.cardType){if(void 0!==config.options.actor){if(void 0!==config.options.attribute){const bonusDice=config.options.actor.system?.attribs?.[config.options.attribute]?.bonusDice;bonusDice&&(config.dialogOptions.modifier=bonusDice)}else if(void 0!==config.options.characteristic){const bonusDice=config.options.actor.system?.characteristics?.[config.options.characteristic]?.bonusDice;bonusDice&&(config.dialogOptions.modifier=bonusDice)}else if(void 0!==config.options.itemId){const itemModifiers=Object.values(config.options.actor.system.skills).find((k=>k.foundryID===config.options.itemId));void 0!==itemModifiers?.bonusDice&&(config.dialogOptions.modifier=itemModifiers.bonusDice)}config.dialogOptions.modifier=Math.min(Math.max(config.dialogOptions.modifier,-2),2)}return config.options.shiftKey||await CoC7ChatMessage.createRoll(config),CoC7ChatMessage.runRoll(config)}CoC7ChatMessage.createLink(config)}}static createLink(config){switch(config.dialogOptions.rollType){case CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE:case CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC:case CoC7ChatMessage.ROLL_TYPE_COMBAT:case CoC7ChatMessage.ROLL_TYPE_SKILL:case CoC7ChatMessage.ROLL_TYPE_ENCOUNTER:{const linkData={type:"CoC7Link"};if(config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_SKILL){if(linkData.check=CoC7Link.CHECK_TYPE.CHECK,linkData.linkType=CoC7Link.LINK_TYPE.SKILL,linkData.name=config.options.actor.items.get(config.options.skillId)?.shortName,!linkData.name)return}else if(config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC)linkData.check=CoC7Link.CHECK_TYPE.CHECK,linkData.linkType=CoC7Link.LINK_TYPE.CHARACTERISTIC,linkData.name=config.options.characteristic;else if(config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE)(config.options.altKey||config.options.createEncounter)&&"san"===config.options.attribute?linkData.check=CoC7Link.CHECK_TYPE.SANLOSS:(linkData.check=CoC7Link.CHECK_TYPE.CHECK,linkData.linkType=CoC7Link.LINK_TYPE.ATTRIBUTE,linkData.name=config.options.attribute);else if(config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_COMBAT)linkData.check=CoC7Link.CHECK_TYPE.ITEM,linkData.name=config.options.weaponName;else{if(config.dialogOptions.rollType!==CoC7ChatMessage.ROLL_TYPE_ENCOUNTER)return;linkData.check=CoC7Link.CHECK_TYPE.SANLOSS,linkData.sanMin=config.options.actor?.system?.special?.sanLoss?.checkPassed,linkData.sanMax=config.options.actor?.system?.special?.sanLoss?.checkFailled,linkData.sanReason=config.options.actor.system.infos.type?.length?config.options.actor.system.infos.type:config.options.actor.name}"blindroll"===game.settings.get("core","rollMode")&&(linkData.blind=!0),config.options.sendToChat?CoC7Link.toChatMessage(linkData):config.options.sendToClipboard?CoC7Link.fromDropData(linkData).then((link=>{CoC7Utilities.copyToClipboard(link.link)})):CoC7ContentLinkDialog.create(linkData,{actors:[config.options.actor].filter((a=>a.owners.length)),hasModifiers:config.options.shiftKey})}}}static async createRoll(config){const usage=await RollDialog.create(config.dialogOptions);if(usage){const cardType=usage.get("cardType");cardType&&(config.dialogOptions.cardType=cardType),config.dialogOptions.modifier=Number(usage.get("bonusDice")),config.dialogOptions.difficulty=Number(usage.get("difficulty")),config.dialogOptions.flatDiceModifier=Number(usage.get("flatDiceModifier")),config.dialogOptions.flatThresholdModifier=Number(usage.get("flatThresholdModifier"))}}static async runRoll(config){switch(config.dialogOptions.cardType){case CoC7ChatMessage.CARD_TYPE_SAN_CHECK:{const sanData=await SanDataDialog.create({promptLabel:!0});if(sanData){let sanMin=sanData.get("sanMin")||0,sanMax=sanData.get("sanMax")||0;const sanReason=sanData.get("sanReason");isNaN(Number(sanMin))||(sanMin=Number(sanMin)),isNaN(Number(sanMax))||(sanMax=Number(sanMax)),SanCheckCard.create(config.options.actor.actorKey,{sanMin,sanMax,sanReason},{sanModifier:config.dialogOptions.modifier,sanDifficulty:config.dialogOptions.difficulty,fastForward:config.options.shiftKey})}}break;case CoC7ChatMessage.CARD_TYPE_NORMAL:{const check=new CoC7Check;return check.diceModifier=config.dialogOptions.modifier,check.difficulty=config.dialogOptions.difficulty,check.actor=config.options.tokenKey?config.options.tokenKey:config.options.actorId,check.flatDiceModifier=config.dialogOptions.flatDiceModifier,check.flatThresholdModifier=config.dialogOptions.flatThresholdModifier,check.standby=!config.options.preventStandby&&game.settings.get("CoC7","stanbyGMRolls")&&game.user.isGM&&config.options.hasPlayerOwner,config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_SKILL?(check.skill=config.options.skillId,await check.roll()):config.dialogOptions.rollType===CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE?await check.rollAttribute(config.options.attribute):await check.rollCharacteristic(config.options.characteristic),config.dialogOptions.chatMessage&&check.toMessage(),{result:check.modifiedResult,successLevel:check.rolledSuccessLevel,isFumble:check.isFumble,isCritical:check.isCritical,successLevels:{1:check.regularThreshold,2:check.hardThreshold,3:check.extremeThreshold},passed:check.passed}}case CoC7ChatMessage.CARD_TYPE_OPPOSED:case CoC7ChatMessage.CARD_TYPE_COMBINED:{const check=new CoC7Check;check.actor=config.options.tokenKey?config.options.tokenKey:config.options.actorId,check.characteristic=config.options.characteristic,check.attribute=config.options.attribute,check.skillId=config.options.skillId,check.rollMode=game.settings.get("core","rollMode"),check.initiator=game.user.id;let data={};config.dialogOptions.cardType===CoC7ChatMessage.CARD_TYPE_OPPOSED?(data={type:OpposedCheckCard.defaultConfig.type,combat:config.options.isCombat,action:"new"},check.item=config.options.itemId,check.weaponAltSkill=config.options.weaponAltSkill,check.denyPush=!0,await check._perform()):(data={type:CombinedCheckCard.defaultConfig.type,action:"new"},check.difficulty=config.dialogOptions.difficulty),data.roll=check.JSONRollData,data._rollMode=game.settings.get("core","rollMode"),config.dialogOptions.cardType===CoC7ChatMessage.CARD_TYPE_OPPOSED?OpposedCheckCard.dispatch(data):CombinedCheckCard.dispatch(data)}}}}class CoC7ConCheck{constructor(actorId=null,difficulty=CoC7Check.difficultyLevel.regular){this.check=new CoC7Check(actorId),this.check.characteristic="con",this.check.difficulty=difficulty,this.check.denyPush=!0,this.actorId=actorId}get isBlind(){return void 0===this._isBlind&&(this._isBlind="blindroll"===this.rollMode),this._isBlind}set isBlind(x){this._isBlind=x}get rollMode(){return this._rollMode||(this._rollMode=game.settings.get("core","rollMode")),this._rollMode}set rollMode(x){!1===x&&(this._rollMode=game.settings.get("core","rollMode")),this._rollMode=x}get actor(){return this.actorId?chatHelper.getActorFromKey(this.actorId):null}set actorId(x){this._actorId=x,this.check.actor=x}get actorId(){return this._actorId?this._actorId:null}get tokenKey(){return this.actor.isToken?this.actor.tokenKey:null}get isSuccess(){return!!this.check&&this.check.isSuccess}get isRolled(){return!!(this.check&&this.check.dices&&this.check.dices.total)}static getFromCard(card){const conCheck=new CoC7ConCheck;chatHelper.getObjectFromElement(conCheck,card);const htmlCheck=card.querySelector(".roll-result");return CoC7Roll.getFromElement(htmlCheck,conCheck.check),conCheck.messageId=card.closest(".message").dataset.messageId,conCheck}async getCheckElement(){const html=await renderTemplate("systems/CoC7/templates/chat/roll-result.html",this.check),htmlElement=$.parseHTML(html)[0];return htmlElement?(htmlElement.classList.remove("chat-card","item-card","roll-card"),htmlElement):null}async toMessage(fastForward=!1){fastForward&&await this.rollCon();const html=await renderTemplate("systems/CoC7/templates/chat/con-check.html",this),htmlElement=$.parseHTML(html)[0];if(fastForward){htmlElement.querySelector(".roll-result").replaceWith(await this.getCheckElement())}const speakerData={};let speaker;this.actor?(this.token?speakerData.token=this.token:speakerData.actor=this.actor,speaker=ChatMessage.getSpeaker(speakerData)):speaker=ChatMessage.getSpeaker();const chatData={user:(this.actor.user?this.actor.user:game.user).id,speaker,flavor:this.flavor,content:htmlElement.outerHTML};["gmroll","blindroll"].includes(game.settings.get("core","rollMode"))&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),"blindroll"===this.rollMode&&(chatData.blind=!0),ChatMessage.create(chatData).then((msg=>msg))}async rollCon(){this.check.hideDiceResult=!0,await this.check._perform(),this.isBlind||this.isRolled||this.isSuccess||(this.stayAlive?await this.actor.setCondition(COC7.status.dead):await this.actor.setCondition(COC7.status.unconscious)),this.applied=!0}async updateChatCard(){const html=await renderTemplate("systems/CoC7/templates/chat/con-check.html",this),htmlElement=$.parseHTML(html)[0];if(htmlElement.querySelector(".roll-result").replaceWith(await this.getCheckElement()),this.isBlind||!this.isRolled||this.isSuccess||(this.stayAlive?await this.actor.setCondition(COC7.status.dead):await this.actor.setCondition(COC7.status.unconscious)),!this.messageId)return;const chatMessage=game.messages.get(this.messageId),msg=await chatMessage.update({content:htmlElement.outerHTML});return await ui.chat.updateMessage(msg,!1),msg}}class SkillSelectDialog extends Dialog{activateListeners(html){super.activateListeners(html),html.find(".select-skill").click((async event=>this._onSelectSkillClicked(event)))}async _onSelectSkillClicked(event){const li=event.currentTarget.closest(".item");this.data.data.skills[Number(li.dataset.index)].selected=!0,event.currentTarget.style.display="none",this.data.data.added||(this.data.data.added=0),this.data.data.added++;event.currentTarget.closest(".skill-selector").querySelector(".count").innerText=this.data.data.added,this.data.data.added>=this.data.data.optionsCount&&this.close()}static async create(data){const html=await renderTemplate("systems/CoC7/templates/apps/skill-select.html",data);return new Promise((resolve=>{new SkillSelectDialog({title:data.title,content:html,data,buttons:{},close:()=>{if(!data.added>=data.optionsCount)return resolve(!1);const selected=data.skills.filter((skill=>skill.selected));return resolve(selected)}},{classes:["coc7","dialog","skill-select"]}).render(!0)}))}}class PointSelectDialog extends Dialog{activateListeners(html){super.activateListeners(html),html.find(".item-name").click((async event=>this._onSelectCharacteristic(event))),html.find("button").click((event=>this._onButtonClicked(event)))}async _onSelectCharacteristic(event){const li=event.currentTarget.closest(".item"),itemList=li.closest(".item-list");for(const item of itemList.querySelectorAll(".selectable"))item.classList.remove("selected"),this.data.data.characteristics[item.dataset.key].selected=!1,this.data.data.characteristics[item.dataset.key].optional=!1;$(li).toggleClass("selected"),this.data.data.characteristics[li.dataset.key].selected=!0;li.closest("#skill-selection-form").querySelector(".points").innerText=this.data.data.total+this.data.data.characteristics[li.dataset.key].multiplier*this.data.data.characteristics[li.dataset.key].value;li.closest("#skill-selection-form").querySelector("button.validate").classList.remove("inactive"),this.data.data.resolved=!0}async _onButtonClicked(event){event.preventDefault(),event.currentTarget.classList.contains("inactive")||super.close()}static async create(data){const html=await renderTemplate("systems/CoC7/templates/apps/point-select.html",data);return new Promise((resolve=>{new PointSelectDialog({title:data.title,content:html,data,buttons:{},close:()=>data.resolved?resolve(data):resolve(!1)},{classes:["coc7","dialog","char-select"]}).render(!0)}))}}class CharacSelectDialog extends Dialog{activateListeners(html){super.activateListeners(html),html.find(".item-name").click((async event=>this._onSelectCharacteristic(event)))}async _onSelectCharacteristic(event){const li=event.currentTarget.closest(".item");this.data.data.selected=li.dataset.key,this.close()}static async create(data){const html=await renderTemplate("systems/CoC7/templates/apps/char-select.html",data);return new Promise((resolve=>{new CharacSelectDialog({title:data.title,content:html,data,buttons:{},close:()=>data.selected?resolve(data.selected):resolve(!1)},{classes:["coc7","dialog","char-select"]}).render(!0)}))}}class CharacRollDialog extends Dialog{constructor(data,options){super(data,options),this.rolled=data.rolled||{}}activateListeners(html){super.activateListeners(html),html.on("change","input",this._onChangeInput.bind(this)),html.on("submit","form",this._onSubmit.bind(this)),html.on("click",".roll-characteristic",this._onRollCharacteristic.bind(this)),html.on("click",".increase-characteristic",this._onIncreaseCharacteristic.bind(this)),html.on("click",".decrease-characteristic",this._onDecreaseCharacteristic.bind(this)),html.on("click",".reset-characteristic",this._onResetCharacteristic.bind(this)),html.on("click","button",this._onButton.bind(this))}async _onRollCharacteristic(event){event.preventDefault();const characKey=event.currentTarget.closest(".item").dataset.key;await this.rollCharacteristic(characKey)}async _onIncreaseCharacteristic(event){event.preventDefault();const characKey=event.currentTarget.closest(".item").dataset.key;this.increaseCharacteristic(characKey)}async _onDecreaseCharacteristic(event){event.preventDefault();const characKey=event.currentTarget.closest(".item").dataset.key;this.decreaseCharacteristic(characKey)}async _onResetCharacteristic(event){event.preventDefault();const characKey=event.currentTarget.closest(".item").dataset.key;this.resetCharacteristic(characKey)}async _onButton(event){const action=event.currentTarget.dataset.action;if("roll"===action)for(const char of["str","con","siz","dex","app","int","pow","edu","luck"])await this.rollCharacteristic(char);this.checkTotal(),"validate"===action&&this.data.data.validate&&this.close()}async rollCharacteristic(key){const li=this._element[0].querySelector(`li.item[data-key=${key}]`),input=li?.querySelector("input"),formula=this.data.data.characteristics.rolls[key];if(input&&formula){if(isNaN(Number(formula))){const roll=new Roll(formula);await roll.evaluate({async:!0}),roll.toMessage({flavor:game.i18n.format("CoC7.MessageRollingCharacteristic",{label:this.data.data.characteristics.list[key].label,formula})}),input.value=roll.total}else input.value=Number(formula);this.data.data.characteristics.values[key]=Number(input.value),this.rolled||(this.rolled={}),this.rolled[key]=!0}this.checkTotal()}async increaseCharacteristic(key){const li=this._element[0].querySelector(`li.item[data-key=${key}]`),input=li?.querySelector("input");input&&(input.value=Number(input.value)+1,this.data.data.characteristics.values[key]=Number(input.value)),this.checkTotal()}async decreaseCharacteristic(key){const li=this._element[0].querySelector(`li.item[data-key=${key}]`),input=li?.querySelector("input");input&&Number(input.value)>0&&(input.value=Number(input.value)-1,this.data.data.characteristics.values[key]=Number(input.value)),this.checkTotal()}async resetCharacteristic(key){const li=this._element[0].querySelector(`li.item[data-key=${key}]`),input=li?.querySelector("input");input&&(input.value=null,this.data.data.characteristics.values[key]=0),this.checkTotal()}async _onChangeInput(event){event.preventDefault();const input=event.currentTarget,value=Number(input.value);isNaN(value)||(this.data.data.characteristics.values[input.name]=value),this.checkTotal()}checkTotal(){this.data.data.characteristics.points.total=0;for(const[key,value]of Object.entries(this.data.data.characteristics.values))"luck"!==key&&(this.data.data.characteristics.points.total+=value);const validation=this._element[0].querySelector(".points");if(this.data.data.characteristics.points.enabled){Number(this.data.data.characteristics.points.total)!==Number(this.data.data.characteristics.points.value)?(validation.classList.add("warning"),this.data.data.validate=!1):(validation.classList.remove("warning"),this.data.data.validate=!0);validation.querySelector(".value").innerText=this.data.data.characteristics.points.value}validation.querySelector(".total").innerText=this.data.data.characteristics.points.total,this.data.data.characteristics.rolls.enabled&&(this.data.data.validate=0===Object.values(this.data.data.characteristics.values).filter((val=>isNaN(parseInt(val)))).length)}async _onSubmit(event){event.preventDefault()}static async create(data){const rolled={};data.characteristics.points.total=0;for(const[key,value]of Object.entries(data.characteristics.values))"luck"!==key&&(data.characteristics.points.total+=value||0),!isNaN(value)&&value>0&&(rolled[key]=!0);data.characteristics.points.enabled&&Number(data.characteristics.points.total)!==Number(data.characteristics.points.value)&&(data.pointsWarning=!0);const html=await renderTemplate("systems/CoC7/templates/apps/char-roll.html",data);return new Promise((resolve=>{new CharacRollDialog({title:data.title,content:html,data,rolled,buttons:{},close:()=>data.validate?resolve(!0):resolve(!1)},{classes:["coc7","dialog","char-select"]}).render(!0)}))}}class SkillSpecSelectDialog{static async create(skills,specializationName,baseValue=null,name=null){const html=await renderTemplate("systems/CoC7/templates/apps/skill-spec-select.html",{hasSkills:skills.length>0,skills,base:baseValue,name});return new Promise((resolve=>{let formData=null;const dlg=new Dialog({title:name?game.i18n.format("CoC7.SkillSelectBase",{name}):game.i18n.format("CoC7.SkillSpecSelectTitle",{specialization:specializationName}),content:html,buttons:{validate:{label:game.i18n.localize("CoC7.Validate"),callback:html=>(formData=new FormData(html[0].querySelector("#skill-select-form")),resolve(formData))}},default:"validate",close:()=>resolve(!1)});dlg.render(!0)}))}}class SkillSpecializationSelectDialog extends FormApplication{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","skill-name-dialog"],title:"",template:"systems/CoC7/templates/apps/skill-specialization-select.hbs",width:400,height:"auto",closeOnSubmit:!1})}get title(){return game.i18n.format("CoC7.SkillSpecSelectTitle",{specialization:this.object.specializationName})}activateListeners(html){super.activateListeners(html),html.find(".submit-button").click(this._onClickSubmit.bind(this)),html.find("[name=existing-skill]").change(this._onSelectChange.bind(this))}async _onSelectChange(event){this.object.selected=event.currentTarget.value,this.render(!0)}async _onClickSubmit(event){if(""===this.object.selected){const obj=$(event.currentTarget).closest("form");this.object.name=obj.find("input[name=new-skill-name]").val()??"",this.object.baseValue=obj.find("input[name=base-value]").val()??""}if(""===this.object.selected&&""===this.object.name)return!1;this.object.resolve({selected:this.object.selected,name:this.object.name,baseValue:this.object.baseValue}),this.close()}async _updateObject(event,formData){}static async create({skills=[],allowCustom=!1,fixedBaseValue=!1,specializationName="",label="",baseValue=null}={}){const select=[];for(const skill of skills)select.push({id:skill.id,name:skill.name,base:skill.system.base});return await new Promise((resolve=>{new SkillSpecializationSelectDialog({specializationName,allowCustom,fixedBaseValue,allowSelect:skills.length>0,skills:select,selected:"",name:"",label,baseValue,resolve},{}).render(!0)}))}}class SkillValueDialog{static async create(name=null,baseValue=null){const html=await renderTemplate("systems/CoC7/templates/apps/skill-value.html",{base:baseValue,name});return new Promise((resolve=>{let formData=null;const dlg=new Dialog({title:game.i18n.format("CoC7.SkillValue",{name}),content:html,buttons:{validate:{label:game.i18n.localize("CoC7.Validate"),callback:html=>(formData=new FormData(html[0].querySelector("#skill-select-form")),resolve(formData))}},default:"validate",close:()=>resolve(!1)});dlg.render(!0)}))}}class CoC7MeleeResoltion{constructor(initiatorMessage=null,targetMessage=null,messageId=null){this.initiatorMessage=initiatorMessage,this.targetMessage=targetMessage,this.messageId=messageId}async preCreateMessage(){const html=await renderTemplate(this.template,this),chatData={user:game.user.id,content:html},rollMode=game.settings.get("core","rollMode");["gmroll","blindroll"].includes(rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),chatData.blind=!1;const chatMessage=await ChatMessage.create(chatData);return this.messageId=chatMessage.id,chatMessage}get displayActorOnCard(){return game.settings.get("CoC7","displayActorOnCard")}get target(){return this.targetMessage?CoC7MeleeTarget.getFromMessageId(this.targetMessage):null}get targetToken(){return this.target?chatHelper.getTokenFromKey(this.target.actorKey):null}get initiator(){return this.initiatorMessage?CoC7MeleeInitiator.getFromMessageId(this.initiatorMessage):null}get initiatorToken(){return this.initiator?chatHelper.getTokenFromKey(this.initiator.actorKey):null}async resolve(){if(this.target)switch(this.target.action){case"noResponse":this.initiator.roll.successLevel>0?(this.resultString=game.i18n.format("CoC7.WinnerRollDamage",{name:this.initiator.name}),this.action="roll-melee-damage",this.rollDamage=!0):(this.resultString=game.i18n.format("CoC7.InitiatorMissed",{name:this.initiator.name}),this.winner=this.initiator,this.rollDamage=!1),this.winner=this.initiator,this.winnerImg=this.initiator.weapon.img,this.winnerTitle=this.initiator.weapon.name,this.looser=this.target;break;case"dodge":this.initiator.roll.successLevel<=0&&this.target.roll.successLevel<=0?(this.resultString=game.i18n.localize("CoC7.NoWinner"),this.winner=null,this.rollDamage=!1):this.initiator.roll.successLevel>this.target.roll.successLevel?(this.resultString=game.i18n.format("CoC7.WinnerRollDamage",{name:this.initiator.name}),this.winner=this.initiator,this.winnerImg=this.initiator.weapon.img,this.winnerTitle=this.initiator.weapon.name,this.looser=this.target,this.action="roll-melee-damage",this.rollDamage=!0):this.initiator.roll.successLevel<=this.target.roll.successLevel&&(this.resultString=game.i18n.format("CoC7.DodgeSuccess",{name:this.target.name}),this.winner=this.target,this.looser=this.initiator,this.winnerImg=this.target.skill.img,this.winnerTitle=this.target.skill.name,this.action="dodge",this.rollDamage=!1);break;case"fightBack":this.initiator.roll.successLevel<=0&&this.target.roll.successLevel<=0?(this.resultString=game.i18n.localize("CoC7.NoWinner"),this.winner=null,this.rollDamage=!1):this.initiator.roll.successLevel>=this.target.roll.successLevel?(this.resultString=game.i18n.format("CoC7.WinnerRollDamage",{name:this.initiator.name}),this.winner=this.initiator,this.winnerImg=this.initiator.weapon.img,this.winnerTitle=this.initiator.weapon.name,this.looser=this.target,this.rollDamage=!0):this.initiator.roll.successLevel<=this.target.roll.successLevel&&(this.resultString=game.i18n.format("CoC7.WinnerRollDamage",{name:this.target.name}),this.winner=this.target,this.winnerImg=this.target.weapon.img,this.winnerTitle=this.target.weapon.name,this.looser=this.initiator,this.rollDamage=!0);break;case"maneuver":this.initiator.roll.successLevel<=0&&this.target.roll.successLevel<=0?(this.resultString=game.i18n.localize("CoC7.NoWinner"),this.winner=null,this.rollDamage=!1):this.initiator.roll.successLevel>=this.target.roll.successLevel?(this.resultString=game.i18n.format("CoC7.WinnerRollDamage",{name:this.initiator.name}),this.winner=this.initiator,this.winnerImg=this.initiator.weapon.img,this.winnerTitle=this.initiator.weapon.name,this.looser=this.target,this.rollDamage=!0):this.initiator.roll.successLevel<=this.target.roll.successLevel&&(this.resultString=game.i18n.format("CoC7.ManeuverSuccess",{name:this.target.name}),this.winner=this.target,this.winnerImg=this.target.skill.data.img,this.winnerTitle=this.target.skill.name,this.looser=this.initiator,this.rollDamage=!1)}else this.initiator.roll.successLevel>0?(this.resultString=game.i18n.format("CoC7.WinnerRollDamage",{name:this.initiator.name}),this.winner=this.initiator,this.rollDamage=!0):(this.resultString=game.i18n.format("CoC7.InitiatorMissed",{name:this.initiator.name}),this.winner=this.initiator,this.rollDamage=!1);this.winner&&(this.winner.roll.successLevel>=CoC7Check.successLevel.extreme?this.winner.roll.criticalDamage=!0:this.winner.roll.criticalDamage=!1),this.resolved=!0;const html=await renderTemplate(this.template,this);if(this.messageId){const message=game.messages.get(this.messageId),speakerData={};this.winner&&(this.winner.token&&(speakerData.token=this.winner.token.documment),this.winner.actor&&(speakerData.actor=this.winner.actor));const speaker=this.winner?ChatMessage.getSpeaker(speakerData):null,user=this.winner&&this.winner.actor.user?this.winner.actor.user:game.user;let msg;return message?(msg=speaker?await message.update({user:user.id,speaker,content:html}):await message.update({user:user.id,content:html}),await ui.chat.updateMessage(msg,!1),msg):void ui.notifications.warn("Resolition card missing, was deleted ?")}}get template(){return"systems/CoC7/templates/chat/combat/melee-resolution.html"}}class CoC7MeleeTarget extends ChatCardActor{constructor(actorKey,parentMessageId=null,fastForward=!1){super(actorKey,fastForward),this.actorKey=actorKey,this.initiatorKey=null,this.parentMessageId=parentMessageId,this.fastForward=fastForward,this.resolved=!1,this.outnumbered=!1,this.surprised=!1,this.autoSuccess=!1,this.advantage=!1,this.disadvantage=!1,this.messageId=null,this.skillId=null,this.itemId=null,this.dodging=!1,this.notResponding=!1,this.fightingBack=!1,this.maneuvering=!1}get actionSelected(){return this.dodging||this.notResponding||this.fightingBack||this.maneuvering}get action(){return this.dodging?"dodge":this.notResponding?"noResponse":this.fightingBack?"fightBack":this.maneuvering?"maneuver":null}get weapon(){return this.actor.items.get(this.itemId)}get skill(){return this.actor.items.get(this.skillId)}set initiatorKey(x){this._initiatorKey=x,this.targetKey=x}get initiatorKey(){return this._initiatorKey||(!this._initiator&&this.parentMessageId&&(this._initiator=CoC7MeleeInitiator.getFromMessageId(this.parentMessageId)),this._initiator&&(this._initiatorKey=this._initiator.actorKey)),this._initiatorKey?this._initiatorKey:(ui.notifications.error(`No initiator found for target : ${this.actor.name}`),null)}get initiator(){if(!this.initiatorKey){if(!this.parentMessageId)return null;this._initiator=CoC7MeleeInitiator.getFromMessageId(this.parentMessageId),this.initiatorKey=this._initiator.actorKey}return chatHelper.getActorFromKey(this.initiatorKey)}get meleeInitiator(){return this._initiator||(this._initiator=CoC7MeleeInitiator.getFromMessageId(this.parentMessageId)),this._initiator}get template(){return"systems/CoC7/templates/chat/combat/melee-target.html"}static getFromMessageId(messageId){const message=game.messages.get(messageId);if(!message)return null;const card=$(message.content)[0],target=CoC7MeleeTarget.getFromCard(card,messageId);return target.messageId=messageId,target}static updateCardSwitch(event,publishUpdate=!0){const card=event.currentTarget.closest(".melee.target"),flag=event.currentTarget.dataset.flag,camelFlag=chatHelper.hyphenToCamelCase(flag);if(publishUpdate){const target=CoC7MeleeTarget.getFromCard(card);target.toggleFlag(flag),target.updateChatCard()}else card.dataset[camelFlag]="true"!==card.dataset[camelFlag],event.currentTarget.classList.toggle("switched-on"),event.currentTarget.dataset.selected=card.dataset[camelFlag]}toggleFlag(flagName){const flag=flagName.includes("-")?chatHelper.hyphenToCamelCase(flagName):flagName;this[flag]=!this[flag]}async createChatCard(){const html=await renderTemplate(this.template,this),speakerData={},token=chatHelper.getTokenFromKey(this.actorKey);token?speakerData.token=token.document:speakerData.actor=this.actor;const speaker=ChatMessage.getSpeaker(speakerData);this.actor.isToken&&(speaker.alias=this.actor.token.name);let user=game.user;if(void 0===this.actor.user){let owners=[];const gms=game.users.filter((a=>a.isGM)).map((a=>a.id));for(const[k,v]of Object.entries(this.actor.ownership))if(v===CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER){if("default"===k){owners=game.users.map((a=>a.id));break}gms.includes(k)||owners.push(k)}let content="";switch(owners.length){case 0:break;case 1:void 0!==game.users.get(owners[0])&&(user=game.users.get(owners[0]));break;default:content="<p>"+game.i18n.localize("CoC7.MessageSelectSingleUserForTarget"),content+='<form id="selectform"><select name="user">';for(const k of owners){const user=game.users.get(k);user&&(content=content+'<option value="'+k+'">'+user.name+"</option>")}content+="</select></form></p>",await Dialog.prompt({title:game.i18n.localize("CoC7.MessageTitleSelectSingleUserForTarget"),content,callback:html=>{const formData=new FormData(html[0].querySelector("#selectform"));for(const[name,value]of formData)"user"===name&&(user=game.users.get(value))}})}}else void 0!==this.actor.user&&(user=this.actor.user);const chatData={user:user.id,speaker,content:html};["gmroll","blindroll"].includes(this.rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),chatData.blind=!1;const message=await ChatMessage.create(chatData);return this.messageId=message.id,message}async updateChatCard(){const message=game.messages.get(this.messageId);if(!game.user.isGM&&message.user.id!==game.user.id)return void ui.notifications.info(game.i18n.localize("CoC7.UnableToInteractWithChatCard"));const html=await renderTemplate(this.template,this),msg=await message.update({content:html});return await ui.chat.updateMessage(msg,!1),msg}async getUpdatedChatCard(){renderTemplate(this.template,this).then((html=>html))}static async updateSelected(card,event){const target=CoC7MeleeTarget.getFromCard(card);switch(event.currentTarget.dataset.action){case"dodge":target.dodging=!0,target.notResponding=!1,target.fightingBack=!1,target.maneuvering=!1,target.skillId=event.currentTarget.dataset.skillId,target.itemId=null;break;case"noResponse":target.dodging=!1,target.notResponding=!0,target.fightingBack=!1,target.maneuvering=!1,target.skillId=null,target.itemId=null;break;case"fightBack":target.dodging=!1,target.notResponding=!1,target.fightingBack=!0,target.maneuvering=!1,target.skillId=event.currentTarget.dataset.skillId,target.itemId=event.currentTarget.dataset.weaponId;break;case"maneuver":target.dodging=!1,target.notResponding=!1,target.fightingBack=!1,target.maneuvering=!0,target.skillId=event.currentTarget.dataset.skillId,target.itemId=null}return target.updateChatCard(),target}async performSkillCheck(skillId=null,publish=!1){const check=new CoC7Check;return check.isBlind=!1,check.isUnkonwn=!1,check.referenceMessageId=this.messageId,check.rollType="opposed",check.side="target",check.action=this.action,check.actor=this.actor,check.item=this.itemId,check.skill=skillId,check.difficulty=CoC7Check.difficultyLevel.regular,check.diceModifier=0,this.disadvantage&&(check.diceModifier-=1),this.advantage&&(check.diceModifier+=1),await check.roll(),this.check=check,this.rolled=!0,this.resolved=!0,publish&&check.toMessage(),check}async publishNoReponseResult(){this.rolled=!0,this.resolved=!0,this.notResponding=!0;const resolutionCard=new CoC7MeleeResoltion(this.parentMessageId,this.messageId),resolutionMessage=await resolutionCard.preCreateMessage();this.resolutionCard=resolutionMessage.id,await this.updateChatCard()}async publishCheckResult(check=null){if(!check&&!this.check)return null;if(check&&(this.check=check),this.roll=CoC7Roll.getFromCheck(this.check),this.rolled=!0,this.roll.rollIcons=[],this.roll.critical){this.roll.rollColor="goldenrod",this.roll.rollTitle=game.i18n.localize("CoC7.CriticalSuccess");for(let index=0;index<4;index++)this.roll.rollIcons.push("medal")}else if(this.roll.fumble){this.roll.rollColor="darkred",this.roll.rollTitle=game.i18n.localize("CoC7.Fumble");for(let index=0;index<4;index++)this.roll.rollIcons.push("spider")}else if(this.roll.success){this.roll.rollColor="goldenrod",CoC7Check.successLevel.regular===this.roll.successLevel&&(this.roll.rollTitle=game.i18n.localize("CoC7.RegularSuccess")),CoC7Check.successLevel.hard===this.roll.successLevel&&(this.roll.rollTitle=game.i18n.localize("CoC7.HardSuccess")),CoC7Check.successLevel.extreme===this.roll.successLevel&&(this.roll.rollTitle=game.i18n.localize("CoC7.ExtremeSuccess"));for(let index=0;index<this.roll.successLevel;index++)this.roll.rollIcons.push("star")}else this.roll.rollColor="black",this.roll.rollTitle=game.i18n.localize("CoC7.Failure"),this.roll.rollIcons.push("skull");const resolutionCard=new CoC7MeleeResoltion(this.parentMessageId,this.messageId),resolutionMessage=await resolutionCard.preCreateMessage();this.resolutionCard=resolutionMessage.id,await this.updateChatCard()}static getFromCard(card,messageId=null){const actorKey=card.dataset.actorKey,parentMessageId=card.dataset.parentMessageId,fastForward="true"===card.dataset.fastForward,target=new CoC7MeleeTarget(actorKey,parentMessageId,fastForward);return target.roll=CoC7Roll.getFromCard(card),chatHelper.getObjectFromElement(target,card),card.closest(".message")?target.messageId=card.closest(".message").dataset.messageId:target.messageId=messageId,target}upgradeRoll(luckAmount,newSuccessLevel,oldCard){this.actor.spendLuck(luckAmount)||ui.notifications.error(`${this.actor.name} didn't have enough luck to pass the check`),this.roll.value=null,this.roll.successLevel=newSuccessLevel,this.roll.luckSpent=!0,oldCard.dataset.processed=!1;const diceRolls=oldCard.querySelector(".dice-roll");diceRolls.dataset.value=null,diceRolls.dataset.successLevel=newSuccessLevel,diceRolls.dataset.luckSpent=!0;const resulDetails=oldCard.querySelector(".result-details"),diceTotal=oldCard.querySelector(".dice-total");switch(newSuccessLevel){case CoC7Check.successLevel.regular:diceTotal.innerText=game.i18n.localize("CoC7.RegularSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.RegularDifficulty")});break;case CoC7Check.successLevel.hard:diceTotal.innerText=game.i18n.localize("CoC7.HardSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.HardDifficulty")});break;case CoC7Check.successLevel.extreme:diceTotal.innerText=game.i18n.localize("CoC7.ExtremeSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.ExtremeDifficulty")});break;case CoC7Check.successLevel.critical:diceTotal.innerText=game.i18n.localize("CoC7.CriticalSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.CriticalDifficulty")})}diceTotal.classList.replace("failure","success"),oldCard.querySelector(".card-buttons").remove(),oldCard.querySelector(".dice-tooltip").style.display="none",CoC7Chat.updateChatCard(oldCard)}}class CoC7RangeInitiator{constructor(actorKey=null,itemId=null,fastForward=!1){this.actorKey=actorKey,this.itemId=itemId,this.fastForward=fastForward,this.resolved=!1,this.cover=!1,this.surprised=!1,this.autoSuccess=!1,this.advantage=!1,this.disadvantage=!1,this.messageId=null,this.targetCard=null,this.rolled=!1,this.singleShot=!1,this.multipleShots=!1,this.burst=!1,this.fullAuto=!1,this.tokenKey=null,this.aimed=!1,this.totalBulletsFired=0,this._targets=[];for(const t of[...game.user.targets]){const target=new CoC7RangeTarget(`${t.scene.id}.${t.id}`);target.token=t,this._targets.push(target)}if(this._targets.length)this._targets[0].active=!0;else{const target=new CoC7RangeTarget;target.active=!0,this._targets.push(target)}if(actorKey){const actor=chatHelper.getActorFromKey(actorKey);if(this.token=chatHelper.getTokenFromKey(actorKey),this.token&&(this.tokenKey=actor.tokenKey),itemId){actor.items.get(itemId)&&(this.weapon.singleShot?this.singleShot=!0:this.weapon.system.properties.auto&&(this.fullAuto=!0))}}if(this.tokenKey)for(const t of this._targets)if(t.token&&this.token){t.distance=chatHelper.getDistance(t.token,this.token),t.roundedDistance=Math.round(100*t.distance.value)/100,t.distanceUnit=t.distance.unit;const distInYd=Math.round(100*chatHelper.toYards(t.distance))/100;if(this.actor){t.pointBlankRange=!1;distInYd<=this.actor.system.characteristics.dex.value/15&&(t.pointBlankRange=!0)}this.weapon&&this.weapon.baseRange&&(t.baseRange=!1,t.longRange=!1,t.extremeRange=!1,t.outOfRange=!1,this.weapon.system.properties.shotgun?(distInYd<=this.weapon.baseRange&&(t.baseRange=!0),distInYd>this.weapon.baseRange&&distInYd<=this.weapon.longRange&&(t.longRange=!0),distInYd>this.weapon.longRange&&distInYd<=this.weapon.extremeRange&&(t.extremeRange=!0),distInYd>this.weapon.extremeRange&&(t.outOfRange=!0)):(distInYd<=this.weapon.baseRange&&(t.baseRange=!0),distInYd>this.weapon.baseRange&&distInYd<=2*this.weapon.baseRange&&(t.longRange=!0),distInYd>2*this.weapon.baseRange&&distInYd<=4*this.weapon.baseRange&&(t.extremeRange=!0),distInYd>4*this.weapon.baseRange&&(t.outOfRange=!0)),t.baseRange||t.longRange||t.extremeRange||t.outOfRange||(t.baseRange=!0))}else t.baseRange=!0}get displayActorOnCard(){return game.settings.get("CoC7","displayActorOnCard")}get actorImg(){const img=chatHelper.getActorImgFromKey(this.actorKey);return img||"../icons/svg/mystery-man-black.svg"}get actor(){return chatHelper.getActorFromKey(this.actorKey)}get item(){return this.actor.items.get(this.itemId)}get weapon(){return this.item}get targets(){return this._targets||(this._targets=[]),this._targets}get target(){return this.targets&&this.targets.length?this.targets.pop():null}get skills(){return this.actor.getWeaponSkills(this.itemId)}get mainWeaponSkill(){return this.actor.items.get(this.weapon.system.skill.main.id)}get autoWeaponSkill(){return this.weapon.system.skill.alternativ.id?this.actor.items.get(this.weapon.system.skill.alternativ.id):this.mainWeaponSkill}get autoFire(){return this.burst||this.fullAuto}get multiTarget(){return this.fullAuto||this.multipleShots}get aiming(){return void 0===this._aiming&&(this._aiming=this.actor.getActorFlag("aiming")),this._aiming}get activeTarget(){return this._targets.length?this._targets.find((t=>t.active)):null}get shots(){return void 0===this._shots&&(this._shots=[]),this._shots}get currentShotRank(){return this.shots.length+1}get activeTargetShotDifficulty(){return this.shotDifficulty()}set aiming(b){this._aiming=b}get didAnyShotHit(){let anyHit=!1;for(const r of this.rolls)anyHit=anyHit||r.isSuccess;return anyHit}get successfulHits(){const hits=[];for(let index=0;index<this.rolls.length;index++)if(this.rolls[index].isSuccess){const hit={roll:this.rolls[index],shot:this.shots[index]};hits.push(hit)}return 0!==hits.length?hits:null}get shotFired(){return this.shots?this.shots.length:0}get totalAmmo(){return this.weapon.getBulletLeft()}get maxShots(){return this.fullAuto?"∞":this.weapon.system.usesPerRound.max?parseInt(this.weapon.system.usesPerRound.max):1}get ignoreAmmo(){return game.settings.get("CoC7","disregardAmmo")}get ignoreUsesPerRound(){return game.settings.get("CoC7","disregardUsePerRound")}get outOfAmmo(){return!this.ignoreAmmo&&this.totalBulletsFired>=this.weapon.getBulletLeft()}get outOfShots(){return!this.ignoreUsesPerRound&&(!!this.shots&&this.shots.length>=this.maxShots)}get volleySize(){if(!this.weapon.system.properties.auto)return 1;if(this._volleySize)return this._volleySize;const size=Math.floor(this.autoWeaponSkill.value/10);return size<3?3:size}set volleySize(x){x>=Math.floor(this.autoWeaponSkill.value/10)?this._volleySize=Math.floor(this.autoWeaponSkill.value/10):x<=3&&(this._volleySize=3),this._volleySize=parseInt(x)}get isVolleyMinSize(){return 3===this.volleySize}get isVolleyMaxSize(){return(Math.floor(this.autoWeaponSkill.value/10)<3?3:Math.floor(this.autoWeaponSkill.value/10))===this.volleySize}getTargetFromKey(key){return this._targets.find((t=>key===t.actorKey))}calcTargetsDifficulty(){for(const t of this.targets)t.shotDifficulty=this.shotDifficulty(t)}shotDifficulty(t=null){const target=t||this.activeTarget;let damage=this.weapon.system.range.normal.damage;this.weapon.system.properties.shotgun&&(t.longRange&&(damage=this.weapon.system.range.long.damage),t.extremeRange&&(damage=this.weapon.system.range.extreme.damage));let difficulty,modifier=target.modifier;difficulty=this.weapon.system.properties.shotgun?1:target.difficulty;let difficultyName="";if(this.aiming&&1===this.currentShotRank&&modifier++,this.advantage&&modifier++,this.disadvantage&&modifier--,this.reload&&modifier--,this.multipleShots&&!this.fullAuto&&modifier--,this.fullAuto&&(modifier-=this.currentShotRank-1),modifier<-2){difficulty+=Math.abs(modifier+2),difficulty>CoC7Check.difficultyLevel.critical&&(difficulty=CoC7Check.difficultyLevel.impossible),modifier=-2}return CoC7Check.difficultyLevel.regular===difficulty&&(difficultyName="Regular"),CoC7Check.difficultyLevel.hard===difficulty&&(difficultyName="Hard"),CoC7Check.difficultyLevel.extreme===difficulty&&(difficultyName="Extreme"),CoC7Check.difficultyLevel.critical===difficulty&&(difficultyName="Critical"),CoC7Check.difficultyLevel.impossible===difficulty&&(difficultyName="Impossible"),{level:difficulty,name:difficultyName,modifier,damage,impossible:difficulty===CoC7Check.difficultyLevel.impossible}}addShotAtCurrentTarget(){this.calcTargetsDifficulty();const shot={target:this.activeTarget,extremeRange:this.activeTarget.extremeRange,actorKey:this.activeTarget.actorKey,actorName:this.activeTarget.name,difficulty:this.activeTarget.shotDifficulty.level,modifier:this.activeTarget.shotDifficulty.modifier,damage:this.activeTarget.shotDifficulty.damage,bulletsShot:1,transitBullets:0,bulletsShotTransit:1,transit:!1};let bulletLeft=this.totalAmmo-this.totalBulletsFired;if(this.fullAuto){if(this.currentShotRank>1){const previousShot=this.shots[this.currentShotRank-2];if(previousShot.actorKey!==this.activeTarget.actorKey){const distance=chatHelper.getDistance(chatHelper.getTokenFromKey(previousShot.actorKey),chatHelper.getTokenFromKey(this.activeTarget.actorKey));shot.transitBullets=Math.floor(chatHelper.toYards(distance)),shot.transitBullets>=bulletLeft&&!this.ignoreAmmo&&(shot.transitBullets=bulletLeft,bulletLeft=0),this.totalBulletsFired=parseInt(this.totalBulletsFired)+shot.transitBullets,shot.transit=!0}}shot.bulletsShot=this.volleySize,shot.bulletsShot<=3&&(shot.bulletsShot=3),shot.bulletsShot>=bulletLeft&&!this.ignoreAmmo&&(shot.bulletsShot=bulletLeft,bulletLeft=0),shot.bulletsShotTransit=shot.bulletsShot+shot.transitBullets}this.burst&&(shot.bulletsShot=parseInt(this.weapon.system.usesPerRound.burst)?parseInt(this.weapon.system.usesPerRound.burst):1,shot.bulletsShot>=bulletLeft&&!this.ignoreAmmo&&(shot.bulletsShot=bulletLeft,bulletLeft=0)),this.totalBulletsFired=parseInt(this.totalBulletsFired)+shot.bulletsShot,this.aiming&&(this.aiming=!1,this.aimed=!0),this.shots.push(shot)}get template(){return"systems/CoC7/templates/chat/combat/range-initiator.html"}async createChatCard(){this.calcTargetsDifficulty();const html=await renderTemplate(this.template,this),speakerData={},token=chatHelper.getTokenFromKey(this.actorKey);token?speakerData.token=token.document:speakerData.actor=this.actor;const speaker=ChatMessage.getSpeaker(speakerData),chatData={user:(this.actor.user?this.actor.user:game.user).id,speaker,content:html},rollMode=game.settings.get("core","rollMode");["gmroll","blindroll"].includes(rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),chatData.blind=!1;return await ChatMessage.create(chatData)}async updateChatCard(){this.calcTargetsDifficulty();const html=await renderTemplate(this.template,this),message=game.messages.get(this.messageId),msg=await message.update({content:html});return await ui.chat.updateMessage(msg,!1),msg}toggleFlag(flagName){const flag=flagName.includes("-")?chatHelper.hyphenToCamelCase(flagName):flagName;"singleShot"===flag||"multipleShots"===flag||"fullAuto"===flag?(this.singleShot=!1,this.multipleShots=!1,this.fullAuto=!1,"fullAuto"===flag&&(this.burst=!1),this[flag]=!0):"burst"===flag?(this.fullAuto=!1,this.singleShot||this.multipleShots||(this.singleShot=!0),this.burst=!this.burst):this[flag]=!this[flag]}async resolveCard(){if(this.rolls=[],this.multiTarget){let weaponMalfunction=!1,index=0;for(;!weaponMalfunction&&this.shots.length>index;){const roll=await this.shootAtTarget(this.shots[index]);roll.dice?.roll&&await CoC7Dice.showRollDice3d(roll.dice.roll),await this.weapon.shootBullets(parseInt(this.shots[index].bulletsShot)+parseInt(this.shots[index].transitBullets)),roll.hasMalfunction&&(roll.isSuccess=!1,weaponMalfunction=!0),index++,this.rolls.push(roll)}}else{const roll=await this.shootAtTarget();roll.dice?.roll&&await CoC7Dice.showRollDice3d(roll.dice.roll);let bulletFired=this.burst?parseInt(this.weapon.system.usesPerRound.burst):1;bulletFired>=this.totalAmmo&&(bulletFired=this.totalAmmo);const shot={target:this.activeTarget,extremeRange:this.activeTarget.extremeRange,actorKey:this.activeTarget.actorKey,actorName:this.activeTarget.name,difficulty:this.activeTarget.shotDifficulty.level,modifier:this.activeTarget.shotDifficulty.modifier,damage:this.activeTarget.shotDifficulty.damage,bulletsShot:bulletFired,transitBullets:0,transit:!1};await this.weapon.shootBullets(bulletFired),roll.hasMalfunction&&(roll.isSuccess=!1),this.shots.push(shot),this.rolls.push(roll)}this.resolved=!0,this.rolled=!0,await this.updateChatCard()}async shootAtTarget(shot=null){const target=shot?this.getTargetFromKey(shot.actorKey):this.activeTarget,check=new CoC7Check;return check.actorKey=this.actorKey,check.actor=this.actorKey,check.item=this.itemId,check.isBlind=!1,check.isUnkonwn=!1,this.autoFire?check.skill=this.autoWeaponSkill:check.skill=this.mainWeaponSkill,this.multiTarget?(check.difficulty=shot.difficulty,check.diceModifier=shot.modifier):(this.calcTargetsDifficulty(),this.totalBulletsFired=parseInt(this.totalBulletsFired)+1,this.aiming&&(this.aiming=!1,this.aimed=!0),check.difficulty=this.activeTarget.shotDifficulty.level,check.diceModifier=this.activeTarget.shotDifficulty.modifier),check.details=`${game.i18n.localize("CoC7.Target")}: ${target.name}`,check.targetKey=target.actorKey,await check.roll(),check}static getFromMessageId(messageId){const message=game.messages.get(messageId);if(!message)return null;const card=$(message.content)[0],initiator=CoC7RangeInitiator.getFromCard(card,messageId);return initiator.messageId=messageId,initiator}changeVolleySize(x){this.volleySize=this.volleySize+x,this.updateChatCard()}static updateCardSwitch(event,publishUpdate=!0){const card=event.currentTarget.closest(".range.initiator"),flag=event.currentTarget.dataset.flag,camelFlag=chatHelper.hyphenToCamelCase(flag);if(publishUpdate){const initiator=CoC7RangeInitiator.getFromCard(card);if(event.currentTarget.classList.contains("target-flag")){const target=event.currentTarget.closest(".target"),key=parseInt(target.dataset.targetKey);initiator.targets[key].toggleFlag(camelFlag)}else initiator.toggleFlag(camelFlag);initiator.updateChatCard()}else card.dataset[camelFlag]="true"!==card.dataset[camelFlag],event.currentTarget.classList.toggle("switched-on"),event.currentTarget.dataset.selected=card.dataset[camelFlag]}passRoll(rollIndex){const roll=this.rolls[rollIndex],luckAmount=parseInt(roll.luckNeeded);this.actor.spendLuck(luckAmount)?(roll.successLevel=roll.difficulty,roll.isSuccess=!0,roll.luckSpent=!0,this.updateChatCard()):ui.notifications.error(`${this.actor.name} does not have enough luck to pass the check`)}upgradeRoll(rollIndex,upgradeindex){const roll=this.rolls[rollIndex],increasedSuccess=roll.increaseSuccess[upgradeindex],luckAmount=parseInt(increasedSuccess.luckAmount);if(!this.actor.spendLuck(luckAmount))return void ui.notifications.error(`${this.actor.name} does not have enough luck to pass the check`);const newSuccessLevel=parseInt(increasedSuccess.newSuccessLevel);roll.successLevel=newSuccessLevel,roll.difficulty<=newSuccessLevel&&(roll.isSuccess=!0),roll.luckSpent=!0,this.updateChatCard()}static getFromCard(card,messageId=null){const rangeInitiator=new CoC7RangeInitiator;rangeInitiator._targets=[],messageId?rangeInitiator.messageId=messageId:card.closest(".message")&&(rangeInitiator.messageId=card.closest(".message").dataset.messageId),chatHelper.getObjectFromElement(rangeInitiator,card);const cardTargets=card.querySelectorAll(".target");for(const t of cardTargets){const target=CoC7RangeTarget.getFromElement(t);rangeInitiator.targets.push(target)}const cardShots=card.querySelectorAll(".shot");if(cardShots)for(const s of cardShots){const shot={};chatHelper.getObjectFromElement(shot,s),rangeInitiator.shots.push(shot)}rangeInitiator.rolls=[];const rolls=card.querySelectorAll(".roll-result");for(const r of rolls){const roll=CoC7Roll.getFromElement(r);rangeInitiator.rolls.push(roll)}rangeInitiator.damage=[];const damageRolls=card.querySelectorAll(".damage-results");for(const dr of damageRolls){const damageRoll=CoC7Damage.getFromElement(dr);rangeInitiator.damage.push(damageRoll)}return rangeInitiator}async rollDamage(){this.damage=[];const hits=this.successfulHits;for(let i=0;i<hits.length;i++){const h=hits[i],volleySize=parseInt(h.shot.bulletsShot),damageRolls=[];if(volleySize>0){let damageFormula=String(h.shot.damage);damageFormula&&""!==damageFormula||(damageFormula="0");const damageDie=CoC7Damage.getMainDie(damageFormula),maxDamage=new Roll(damageFormula)[foundry.utils.isNewerVersion(game.version,"12")?"evaluateSync":"evaluate"]({maximize:!0}).total,criticalDamageFormula=this.weapon.impale?`${damageFormula} + ${maxDamage}`:`${maxDamage}`,criticalDamageDie=CoC7Damage.getMainDie(criticalDamageFormula);let impalingShots=0,successfulShots=0,critical=!1;(this.fullAuto||this.burst)&&(successfulShots=Math.floor(volleySize/2)),0===successfulShots&&(successfulShots=1),h.roll.successLevel>=CoC7Check.difficultyLevel.extreme&&(impalingShots=successfulShots,successfulShots=volleySize-impalingShots,critical=!0,CoC7Check.difficultyLevel.critical!==h.roll.successLevel&&(CoC7Check.difficultyLevel.extreme<=h.roll.difficulty||h.shot.extremeRange)&&(successfulShots=volleySize,impalingShots=0,critical=!1));let total=0;for(let index=0;index<successfulShots;index++){const roll=new Roll(damageFormula);await roll.evaluate({async:!0}),await CoC7Dice.showRollDice3d(roll),damageRolls.push({formula:damageFormula,total:roll.total,die:damageDie,critical:!1}),total+=roll.total}for(let index=0;index<impalingShots;index++){const roll=new Roll(criticalDamageFormula);await roll.evaluate({async:!0}),await CoC7Dice.showRollDice3d(roll),damageRolls.push({formula:criticalDamageFormula,total:roll.total,die:criticalDamageDie,critical:!0}),total+=roll.total}let targetName="dummy",target=chatHelper.getTokenFromKey(h.roll.targetKey);target||(target=chatHelper.getActorFromKey(h.roll.targetKey)),target&&(targetName=target.name),this.damage.push({targetKey:h.roll.targetKey,targetName,rolls:damageRolls,total,critical,dealt:!1,resultString:game.i18n.format("CoC7.rangeCombatDamage",{name:targetName,total})})}}this.damageRolled=0!==this.damage.length,this.updateChatCard()}async dealDamage(){for(let dIndex=0;dIndex<this.damage.length;dIndex++){const actor=chatHelper.getActorFromKey(this.damage[dIndex].targetKey);if(null===actor)ui.notifications.error(game.i18n.localize("CoC7.NoTargetToDamage"));else{this.damage[dIndex].totalTaken=0,this.damage[dIndex].totalAbsorbed=0;for(let rIndex=0;rIndex<this.damage[dIndex].rolls.length;rIndex++){const dealtAmount=await actor.dealDamage(this.damage[dIndex].rolls[rIndex].total);this.damage[dIndex].totalTaken+=dealtAmount,this.damage[dIndex].rolls[rIndex].taken=dealtAmount,this.damage[dIndex].rolls[rIndex].absorbed=this.damage[dIndex].rolls[rIndex].total-dealtAmount,this.damage[dIndex].totalAbsorbed+=this.damage[dIndex].rolls[rIndex].total-dealtAmount}this.damage[dIndex].dealt=!0,this.damage[dIndex].resultString=game.i18n.format("CoC7.rangeCombatDamageArmor",{name:this.damage[dIndex].targetName,total:this.damage[dIndex].totalTaken,armor:this.damage[dIndex].totalAbsorbed})}}this.damageDealt=!0,this.updateChatCard()}}class CoC7RangeTarget{constructor(actorKey=null){this.actorKey=actorKey,this.cover=!1,this.pointBlankRange=!1,this.baseRange=!0,this.longRange=!1,this.extremeRange=!1,this.inMelee=!1}get big(){return void 0===this._big&&(this.actor&&this.actor.build?this._big=this.actor.build>=4:this._big=!1),this._big}set big(b){this._big=b}get small(){return void 0===this._small&&(this.actor&&this.actor.build?this._small=this.actor.build<=-2:this._small=!1),this._small}set small(b){this._small=b}get normal(){return!this.big&&!this.small}set normal(b){this._big=!1,this._small=!1}get isFast(){return!(!this.actor||!this.actor.mov)&&this.actor.mov>=8}get fast(){return void 0===this._fast&&(this._fast=!1),this._fast}set fast(b){this._fast=b}get actor(){return this.actorKey&&!this._actor&&(this._actor=chatHelper.getActorFromKey(this.actorKey)),this._actor}get name(){return this.token?this.token.name:this.actor?this.actor.name:"Dummy"}get img(){return this.token&&this.token.document?.texture.src?this.token.document?.texture.src:this.actor?this.actor.data.img:"../icons/svg/mystery-man-black.svg"}get token(){return!this._token&&this.actorKey&&(this._token=chatHelper.getTokenFromKey(this.actorKey)),this._token}get sizeText(){return this.big?game.i18n.localize("CoC7.rangeCombatCard.BigTargetTitle"):this.small?game.i18n.localize("CoC7.rangeCombatCard.SmallTargetTitle"):game.i18n.localize("CoC7.rangeCombatCard.NormalTargetTitle")}get sizeLabel(){return this.big?game.i18n.localize("CoC7.rangeCombatCard.BigTarget"):this.small?game.i18n.localize("CoC7.combatCard.SmallTarget"):game.i18n.localize("CoC7.rangeCombatCard.NormalTarget")}get difficulty(){return this.baseRange||this.pointBlankRange?CoC7Check.difficultyLevel.regular:this.longRange?CoC7Check.difficultyLevel.hard:this.extremeRange?CoC7Check.difficultyLevel.extreme:CoC7Check.difficultyLevel.impossible}get modifier(){let modifier=0;return this.cover&&modifier--,this.pointBlankRange&&modifier++,this.fast&&modifier--,this.small&&modifier--,this.big&&modifier++,this.inMelee&&modifier--,this.surprised&&modifier++,modifier}set token(t){this._token=t}static getFromElement(element){const target=new CoC7RangeTarget;return chatHelper.getObjectFromElement(target,element),target}static changeDisplayedTarget(event){if(!event.currentTarget.classList.contains("target-selector"))return null;return event.currentTarget.closest(".targets").querySelectorAll(".target")}attachToElement(element){chatHelper.attachObjectToElement(this,element)}toggleFlag(flag){"baseRange"===flag||"longRange"===flag||"extremeRange"===flag||"pointBlankRange"===flag?(this.pointBlankRange=!1,this.baseRange=!1,this.longRange=!1,this.extremeRange=!1,this.outOfRange=!1,this[flag]=!0):"size"===flag?this.small?(this.small=!1,this.big=!0):this.big?(this.small=!1,this.big=!1):this.small=!0:this[flag]=!this[flag],"fast"===flag&&this.fast&&!this.isFast&&ui.notifications.warn(game.i18n.format("CoC7.WarnFastTargetWithWrongMOV",{mov:this.actor.mov}))}}const CHAT_COC7_MESSAGE_FAKEROLL='<div class="dice-roll"><div class="dice-result"><div class="dice-formula">???</div><h4 class="dice-total">?</h4></div></div>';class CoC7Chat{static renderChatMessageHook(chatMessage,html){chatMessage.getFlag("CoC7","GMSelfRoll")&&!game.user.isGM&&(html.find(".whisper-to").remove(),html.find(".flavor-text").replaceWith(`<span class="flavor-text">${game.i18n.localize("CoC7.RollSecretDice")}</span>`),html.find(".message-content").replaceWith(`<div class="message-content">${CHAT_COC7_MESSAGE_FAKEROLL}</div>`)),chatMessage.getFlag("CoC7","removeWisperTargets")&&!game.user.isGM&&html.find(".whisper-to").remove(),chatMessage.getFlag("CoC7","fakeRoll")&&game.user.isGM&&(html.find(".flavor-text").replaceWith(game.i18n.localize("CoC7.KeeperSentDecoy")),html.find(".message-content").remove())}static fakeRollMessage(){const chatData={user:game.user.id,flavor:game.i18n.localize("CoC7.RollSecretDice"),whisper:game.users.players,type:CONST.CHAT_MESSAGE_TYPES.WHISPER,flags:{CoC7:{GMSelfRoll:!1,removeWisperTargets:!0,fakeRoll:!0}},content:CHAT_COC7_MESSAGE_FAKEROLL};ChatMessage.create(chatData)}static ready(){game.CoC7="init"}static async chatListeners(app,html){html.on("click",".card-buttons button",CoC7Chat._onChatCardAction.bind(this)),html.on("click",".card-title",CoC7Chat._onChatCardToggleContent.bind(this)),html.on("click",".radio-switch",CoC7Chat._onChatCardRadioSwitch.bind(this)),html.on("click",".panel-switch",CoC7Chat._onChatCardToggleSwitch.bind(this)),html.on("click",".simple-flag",CoC7Chat._onChatCardToggleSwitch.bind(this)),html.on("click",".volley-size",CoC7Chat._onChatCardVolleySize.bind(this)),html.on("click",".dropdown-element",CoC7Chat._onDropDownElementSelected.bind(this)),html.on("click",".simple-toggle",CoC7Chat._onToggleSelected.bind(this)),html.on("click",".target-selector",CoC7Chat._onTargetSelect.bind(this)),html.on("dblclick",".open-actor",CoC7Chat._onOpenActor.bind(this)),html.on("click","coc7-inline-result",CoC7Chat._onInline.bind(this)),OpposedCheckCard.bindListerners(html),CombinedCheckCard.bindListerners(html)}static _onOpenActor(event){event.preventDefault();const actorKey=event.currentTarget.dataset.actorKey;if(actorKey){const actor=chatHelper.getActorFromKey(actorKey);actor.isOwner&&actor.sheet.render(!0)}}static async onUpdateChatMessage(chatMessage){if(ui.chat.scrollBottom(),game.user.isGM&&(0===chatMessage.type||0===chatMessage.style)){const card=$(chatMessage.content)[0];if(card.classList.contains("melee")&&"true"===card.dataset.resolved){if(card.classList.contains("initiator"))if(card.dataset.targetCard){const initiator=CoC7MeleeInitiator.getFromMessageId(chatMessage.id),target=CoC7MeleeTarget.getFromMessageId(initiator.targetCard);if(target.resolved){const resolutionCard=new CoC7MeleeResoltion(chatMessage.id,target.messageId,target.resolutionCard);await resolutionCard.resolve(),initiator.checkRevealed||await initiator.revealCheck()}}else{const initiator=CoC7MeleeInitiator.getFromMessageId(chatMessage.id);if(initiator.resolutionCard){const resolutionCard=new CoC7MeleeResoltion(chatMessage.id,null,initiator.resolutionCard);await resolutionCard.resolve(),initiator.checkRevealed||await initiator.revealCheck()}}if(card.classList.contains("target")){const target=CoC7MeleeTarget.getFromMessageId(chatMessage.id),resolutionCard=new CoC7MeleeResoltion(target.parentMessageId,chatMessage.id,target.resolutionCard);await resolutionCard.resolve(),target.meleeInitiator.checkRevealed||await target.meleeInitiator.revealCheck()}}}}static async renderMessageHook(message,html){if(ui.chat.scrollBottom(),InteractiveChatCard.bindListeners(html),message.getFlag("CoC7","checkRevealed")&&(html.find(".dice-roll").removeClass("gm-visible-only"),html[0].dataset.checkRevealed=!0),html.find(".dropbtn").click((event=>event.currentTarget.closest(".dropdown").querySelector(".dropdown-content").classList.toggle("show"))),html.find(".dropdown").mouseleave((event=>event.currentTarget.querySelector(".dropdown-content").classList.remove("show"))),game.user.isGM){const card=html[0].querySelector(".coc7.chat-card");if(card&&card.classList.contains("roll-card")&&"true"!==card.dataset.processed&&card.dataset.refMessageId){const roll=CoC7Roll.getFromElement(card);"target"===card.dataset.side&&(roll.defendantId=card.dataset.tokenId?card.dataset.tokenId:card.dataset.actorId),"initiator"===card.dataset.side&&(roll.initiatorId=card.dataset.tokenId?card.dataset.tokenId:card.dataset.actorId),card.dataset.processed="true",CoC7Chat.updateCombatCardTarget(roll)}}const userOnly=html.find(".target-only");for(const element of userOnly)if(!game.user.isGM){element.style.display="none";const actorId=element.getAttribute("data-actor-id");actorId&&game.actors.get(actorId).isOwner&&(element.style.display="block")}const gmOnly=html.find(".gm-only");for(const zone of gmOnly)game.user.isGM||(zone.style.display="none");const userVisibleOnly=html.find(".user-visible-only");for(const elem of userVisibleOnly)game.user.isGM&&(elem.style.display="none");const gmVisibleOnly=html.find(".gm-visible-only");for(const elem of gmVisibleOnly)game.user.isGM||game.user.isTrusted&&game.settings.get("CoC7","trustedCanSeeChatCard")||(elem.style.display="none");const ownerVisibleOnly=html.find(".owner-visible-only");for(const zone of ownerVisibleOnly){let actor=CoC7Chat._getActorFromKey(zone.dataset?.actorKey);actor||(actor=CoC7Chat._getChatCardActor(zone.closest(".chat-card"))),actor||(actor=CoC7Chat._getActorFromKey(zone.parentElement.dataset.actorKey)),actor||(actor=CoC7Chat._getActorFromKey(zone.closest("[data-actor-key]")?.dataset.actorKey)),actor||(actor=CoC7Chat._getActorFromKey(zone.closest("[data-token-key]")?.dataset.actorKey)),(actor&&!actor.isOwner||game.user.isGM)&&(zone.style.display="none")}if(!game.user.isGM){const ownerOnly=html.find(".owner-only");for(const zone of ownerOnly){let actor=CoC7Chat._getActorFromKey(zone.dataset?.actorKey||zone.dataset?.actorId);actor||(actor=CoC7Chat._getChatCardActor(zone.closest(".chat-card"))),actor||(actor=CoC7Chat._getActorFromKey(zone.parentElement.dataset.actorKey)),actor||(actor=CoC7Chat._getActorFromKey(zone.closest("[data-actor-key]")?.dataset.actorKey)),actor||(actor=CoC7Chat._getActorFromKey(zone.closest("[data-token-key]")?.dataset.actorKey)),(actor&&!actor.isOwner||!actor&&!game.user.isGM)&&(zone.style.display="none")}const gmSelectOnly=html.find(".gm-select-only");if(!game.user.isTrusted||!game.settings.get("CoC7","trustedCanModfyChatCard"))for(const select of gmSelectOnly)select.classList.add("inactive"),select.classList.remove("simple-flag")}}static get actionTypeString(){return{fightBack:"CoC7.fightBack",maneuver:"CoC7.maneuver",dodging:"CoC7.dodge"}}static _onTargetSelect(event){const index=parseInt(event.currentTarget.dataset.key),targetsSelector=event.currentTarget.closest(".targets-selector");for(const i of targetsSelector.querySelectorAll("img"))i.style.border="none";targetsSelector.querySelector(`[data-key="${index}"]`).querySelector("img").style.border="1px solid #000";const targets=event.currentTarget.closest(".targets");for(const t of targets.querySelectorAll(".target"))t.style.display="none",t.dataset.active="false";const targetToDisplay=targets.querySelector(`[data-target-key="${index}"]`);targetToDisplay.style.display="block",targetToDisplay.dataset.active="true"}static _onDropDownElementSelected(event){event.preventDefault();const card=event.currentTarget.closest(".chat-card");if(card.classList.contains("target"))return void CoC7MeleeTarget.updateSelected(card,event);const dropDownBoxes=event.currentTarget.closest(".response-selection").querySelectorAll(".toggle-switch");for(const dpdnBox of dropDownBoxes)dpdnBox.classList.remove("switched-on");event.currentTarget.closest(".toggle-switch").classList.add("switched-on"),event.currentTarget.closest(".dropdown-content").classList.toggle("show");const selectedBox=event.currentTarget.closest(".defender-action-select").querySelector(".selected-action");selectedBox.style.display="block";const button=selectedBox.querySelector("button");switch(button.dataset.action="defending",button.dataset.actionType=event.currentTarget.dataset.action,button.dataset.defenderChoice=event.currentTarget.dataset.action,button.dataset.skillId=event.currentTarget.dataset.skillId,button.dataset.skillValue=event.currentTarget.dataset.skillValue,button.dataset.skillName=event.currentTarget.dataset.skillName,button.dataset.itemId=event.currentTarget.dataset.weaponId,button.dataset.itemName=event.currentTarget.dataset.weaponName,event.currentTarget.dataset.action){case"maneuver":button.innerText=`${game.i18n.localize(COC7.combatCards[event.currentTarget.dataset.action])} : ${event.currentTarget.dataset.skillName} (${event.currentTarget.dataset.skillValue}%)`;break;case"fightBack":button.innerText=`${game.i18n.localize(COC7.combatCards[event.currentTarget.dataset.action])} : ${event.currentTarget.dataset.weaponName} (${event.currentTarget.dataset.skillValue}%)`}}static async _onInline(event){event.preventDefault();const a=event.currentTarget;if(a.classList.contains("inline-result"))return a.classList.contains("expanded")?CoC7Check._collapseInlineResult(a):CoC7Check._expandInlineResult(a)}static _onToggleSelected(event){const card=event.currentTarget.closest(".chat-card");if(card.classList.contains("target"))return void CoC7MeleeTarget.updateSelected(card,event);if(""===event.currentTarget.dataset.skillId)return void ui.notifications.error(game.i18n.localize("CoC7.ErrorNoDodgeSkill"));const dropDownBoxes=event.currentTarget.closest(".response-selection").querySelectorAll(".toggle-switch");for(const dpdnBox of dropDownBoxes)dpdnBox.classList.remove("switched-on");event.currentTarget.classList.add("switched-on");const selectedBox=event.currentTarget.closest(".defender-action-select").querySelector(".selected-action");selectedBox.style.display="block";const button=selectedBox.querySelector("button");button.dataset.action="defending",button.dataset.actionType="dodging",button.dataset.defenderChoice=event.currentTarget.dataset.action,button.dataset.skillId=event.currentTarget.dataset.skillId,button.dataset.skillValue=event.currentTarget.dataset.skillValue,button.dataset.skillName=event.currentTarget.dataset.skillName,button.innerText=`${game.i18n.localize(COC7.combatCards[event.currentTarget.dataset.action])} : ${event.currentTarget.dataset.skillName} (${event.currentTarget.dataset.skillValue}%)`}static _onChatCardRadioSwitch(event){event.preventDefault();const optionList=event.currentTarget.parentElement.getElementsByClassName("radio-switch");let index;for(index=0;index<optionList.length;index++){const element=optionList[index];element.dataset.property===event.currentTarget.dataset.property?element.classList.add("switched-on"):element.classList.remove("switched-on")}event.currentTarget.parentElement.dataset.selected=event.currentTarget.dataset.property}static async _onChatCardVolleySize(event){const card=event.currentTarget.closest(".chat-card");if(card.classList.contains("range")&&card.classList.contains("initiator")){const rangeCard=CoC7RangeInitiator.getFromCard(card);event.currentTarget.classList.contains("increase")?rangeCard.changeVolleySize(1):event.currentTarget.classList.contains("decrease")&&rangeCard.changeVolleySize(-1)}}static async _onChatCardToggleSwitch(event){event.preventDefault();const card=event.currentTarget.closest(".chat-card");card.classList.contains("melee")&&(card.classList.contains("initiator")&&CoC7MeleeInitiator.updateCardSwitch(event),card.classList.contains("target")&&CoC7MeleeTarget.updateCardSwitch(event)),card.classList.contains("range")&&card.classList.contains("initiator")&&CoC7RangeInitiator.updateCardSwitch(event),card.classList.contains("damage"),card.classList.contains("roll-card")&&CoC7Check.updateCardSwitch(event)}static _getChatCardActor(card){const cardData=card.dataset.object?JSON.parse(unescape(card.dataset.object)):card.dataset;if(cardData.actorKey)return CoC7Chat._getActorFromKey(cardData.actorKey);const tokenKey=cardData.tokenId;if(tokenKey){const[sceneId,tokenId]=tokenKey.split(".");if("TOKEN"===sceneId)return game.actors.tokens[tokenId];{const scene=game.scenes.get(sceneId);if(!scene)return null;const token=scene.getEmbeddedDocument("Token",tokenId);return token?token.actor||new Token(tokenData).actor:null}}const actorId=cardData.actorId;if(actorId)return game.actors.get(actorId);const message=card.closest(".message"),messageId=message?message.dataset.messageId:null;if(messageId){const chatMessage=game.messages.get(messageId);if(chatMessage.user)return chatMessage.user.character}return null}static isCardOwner(card){const message=card.closest(".message"),messageId=message?message.dataset.messageId:null;if(messageId){return game.messages.get(messageId).ownner||!1}return!1}static _getActorFromKey(key){if(key){if(key.includes(".")){const[sceneId,tokenId]=key.split(".");if("TOKEN"===sceneId)return game.actors.tokens[tokenId];{const scene=game.scenes.get(sceneId);if(!scene)return null;const token=scene.getEmbeddedDocument("Token",tokenId);return token?token.actor||new Token(tokenData).actor:null}}return game.actors.get(key)||null}}static getActorFromToken(tokenKey){const token=CoC7Chat.getToken(tokenKey);return token?token.actor:null}static getToken(tokenKey){if(tokenKey){const[sceneId,tokenId]=tokenKey.split(".");if("TOKEN"===sceneId){const tokenDoc=game.actors.tokens[tokenId]?.token;return tokenDoc.object}{const scene=game.scenes.get(sceneId);if(!scene)return null;const token=scene.getEmbeddedDocument("Token",tokenId);return token?token||new Token(tokenData):null}}return null}static async updateChatCard(card,messId=null){const messageId=null==messId?card.closest(".message").dataset.messageId:messId,message=game.messages.get(messageId),msg=await message.update({content:card.outerHTML});return await ui.chat.updateMessage(msg,!1),msg}static async _onChatCardAction(event){event.preventDefault();const button=event.currentTarget,card=button.closest(".chat-card");if(!card)return;const originMessage=button.closest(".message"),action=button.dataset.action;if(CoC7Chat._getChatCardActor(card))switch(action){case"useLuck":{const luckAmount=parseInt(button.dataset.luckAmount),newSuccessLevel=parseInt(event.currentTarget.dataset.newSuccessLevel);if(card.classList.contains("melee")){let meleeCard;card.classList.contains("target")&&(meleeCard=CoC7MeleeTarget.getFromCard(card)),card.classList.contains("initiator")&&(meleeCard=CoC7MeleeInitiator.getFromCard(card)),meleeCard.upgradeRoll(luckAmount,newSuccessLevel,card)}else if(card.classList.contains("range")){const rangeCard=CoC7RangeInitiator.getFromCard(card),rollResult=button.closest(".roll-result"),rollIndex=rollResult?parseInt(rollResult.dataset.index):null;if(button.classList.contains("pass-check"))rangeCard.passRoll(rollIndex);else{const upgradeIndex=parseInt(button.dataset.index);rangeCard.upgradeRoll(rollIndex,upgradeIndex)}}else if(card.classList.contains("roll-card")||null!=card.querySelector(".roll-result")){const check=await CoC7Check.getFromCard(card);if(button.classList.contains("pass-check")){const luckAmount=parseInt(button.dataset.luckAmount);check.forcePass(luckAmount)}else{const upgradeIndex=parseInt(button.dataset.index);await check.upgradeCheck(upgradeIndex)}}else{const actor=CoC7Chat._getChatCardActor(card),detailedResultPlaceHolder=card.querySelector(".result-details");if(actor.spendLuck(luckAmount)){const result=card.querySelector(".dice-total");switch(card.dataset.successLevel=newSuccessLevel,card.dataset.processed="false",newSuccessLevel){case CoC7Check.successLevel.regular:result.innerText=game.i18n.localize("CoC7.RegularSuccess"),detailedResultPlaceHolder.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.RegularDifficulty")});break;case CoC7Check.successLevel.hard:result.innerText=game.i18n.localize("CoC7.HardSuccess"),detailedResultPlaceHolder.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.HardDifficulty")});break;case CoC7Check.successLevel.extreme:result.innerText=game.i18n.localize("CoC7.ExtremeSuccess"),detailedResultPlaceHolder.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.ExtremeDifficulty")});break;case CoC7Check.successLevel.critical:result.innerText=game.i18n.localize("CoC7.CriticalSuccess"),detailedResultPlaceHolder.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.CriticalDifficulty")})}result.classList.replace("failure","success"),result.classList.remove("fumble"),card.querySelector(".card-buttons").remove(),card.querySelector(".dice-tooltip").style.display="none",await CoC7Chat.updateChatCard(card)}else ui.notifications.error(game.i18n.format("CoC7.ErrorNotEnoughLuck",{actor:actor.name}))}break}case"push":{const newCard=card.cloneNode(!0),result=newCard.querySelector(".dice-total");result.innerText=result.innerText+game.i18n.localize("CoC7.PushingSkill"),result.classList.remove("failure"),newCard.querySelector(".card-buttons").remove(),newCard.dataset.pushedRoll=!0,await CoC7Chat.updateChatCard(newCard,originMessage.dataset.messageId),await CoC7Check.push(card);break}case"defending":{let defender,defenderKey=event.currentTarget.closest(".defender-action-select").dataset.tokenId;defenderKey?defender=this.getActorFromToken(defenderKey):(defenderKey=event.currentTarget.closest(".defender-action-select").dataset.actorId,defender=game.actors.get(defenderKey));const responseType=event.currentTarget.dataset.actionType,outnumbered="true"===event.currentTarget.dataset.outnumbered,check=new CoC7Check;switch(check.referenceMessageId=originMessage.dataset.messageId,check.rollType="opposed",check.side="target",check.action=responseType,responseType){case"dodging":check.actor=defender,check.skill=event.currentTarget.dataset.skillId,check.difficulty=CoC7Check.difficultyLevel.regular,outnumbered&&(check.diceModifier=-1),await check.roll(),check.toMessage();break;case"fightBack":check.actor=defender,check.skill=event.currentTarget.dataset.skillId,check.difficulty=CoC7Check.difficultyLevel.regular,check.item=event.currentTarget.dataset.itemId,outnumbered&&(check.diceModifier=-1),await check.roll(),check.toMessage();break;case"maneuver":{const actor=CoC7Chat._getChatCardActor(card);if(defender.build<=actor.build-3)return void ui.notifications.error(game.i18n.localize("CoC7.ErrorManeuverNotPossible"));check.actor=defender,check.skill=event.currentTarget.dataset.skillId,check.difficulty=CoC7Check.difficultyLevel.regular,outnumbered&&(check.diceModifier=-1),defender.build<actor.build&&(check.diceModifier=check.diceModifier-(actor.build-defender.build)),check.diceModifier<-2&&(check.difficulty=check.difficulty+Math.abs(check.diceModifier)-2,check.diceModifier=-2),await check.roll(),check.toMessage();break}}break}case"melee-initiator-roll":{const initiator=CoC7MeleeInitiator.getFromCard(card),check=await initiator.performSkillCheck(event.currentTarget.dataset.skill);$(button).prop("disabled",!0),await CoC7Dice.showRollDice3d(check.dice.roll),await initiator.publishCheckResult();break}case"melee-target-no-response":{const target=CoC7MeleeTarget.getFromCard(card);await target.publishNoReponseResult();break}case"melee-target-roll":{const target=CoC7MeleeTarget.getFromCard(card),check=await target.performSkillCheck(event.currentTarget.dataset.skill);$(button).prop("disabled",!0),await CoC7Dice.showRollDice3d(check.dice.roll),await target.publishCheckResult();break}case"roll-melee-damage":{const damageChatCard=new DamageCard({critical:"true"===button.dataset.critical,fastForward:event.shiftKey});damageChatCard.actorKey=button.dataset.dealer,damageChatCard.targetKey=button.dataset.target,damageChatCard.itemId=button.dataset.weapon,originMessage.dataset.messageId&&(damageChatCard.messageId=originMessage.dataset.messageId),damageChatCard.updateChatCard();break}case"range-initiator-shoot":{const rangeInitiator=CoC7RangeInitiator.getFromCard(card);rangeInitiator.addShotAtCurrentTarget(),await rangeInitiator.updateChatCard();break}case"range-initiator-roll":{const rangeInitiator=CoC7RangeInitiator.getFromCard(card);await rangeInitiator.resolveCard();break}case"roll-range-damage":{const rangeInitiator=CoC7RangeInitiator.getFromCard(card);await rangeInitiator.rollDamage();break}case"deal-melee-damage":{const targetKey=card.dataset.targetKey,amount=card.dataset.result,targetActor=chatHelper.getActorFromKey(targetKey);await targetActor.dealDamage(amount);const buttons=card.querySelector(".card-buttons"),diceTotal=card.querySelector(".dice-total");$(diceTotal).append('<i class="fas fa-check"></i>'),buttons&&buttons.remove(),await CoC7Chat.updateChatCard(card);break}case"deal-range-damage":{const rangeInitiator=CoC7RangeInitiator.getFromCard(card);await rangeInitiator.dealDamage();break}case"testcheck":(await CoC7Check.getFromCard(card)).forcePass();break;case"force-pass":(await CoC7Check.getFromCard(card)).forcePass();break;case"force-fail":(await CoC7Check.getFromCard(card)).forceFail();break;case"increase-success-level":(await CoC7Check.getFromCard(card)).increaseSuccessLevel();break;case"decrease-success-level":(await CoC7Check.getFromCard(card)).decreaseSuccessLevel();break;case"reveal-check":{const check=await CoC7Check.getFromCard(card);check.isBlind=!1,check.computeCheck(),isCtrlKey(event),check.updateChatCard({makePublic:!0});break}case"roll-check-card":{const check=await CoC7Check.getFromCard(card);check.standby=!1,await check._perform(),check.updateChatCard({forceRoll:!0});break}case"flag-for-development":{const check=await CoC7Check.getFromCard(card);await check.flagForDevelopement(),check.computeCheck(),check.updateChatCard();break}case"reset-creature-san-data":{const sanCheck=SanCheckCard.getFromCard(card);await sanCheck.clearSanLossReason(),await sanCheck.updateChatCard();break}case"roll-san-check":{const sanCheck=SanCheckCard.getFromCard(card);await sanCheck.rollSan(),await sanCheck.updateChatCard();break}case"advance-state":{const sanCheck=SanCheckCard.getFromCard(card);await sanCheck.advanceState(button.dataset.state),await sanCheck.updateChatCard();break}case"roll-san-loss":{const sanCheck=SanCheckCard.getFromCard(card);await sanCheck.rollSanLoss(),sanCheck.updateChatCard();break}case"roll-int-check":{const sanCheck=SanCheckCard.getFromCard(card);await sanCheck.rollInt(),sanCheck.updateChatCard();break}case"roll-con-check":{const conCheck=CoC7ConCheck.getFromCard(card);await conCheck.rollCon(),conCheck.updateChatCard();break}case"reveal-con-check":{const conCheck=CoC7ConCheck.getFromCard(card);conCheck.isBlind=!1,conCheck.updateChatCard();break}}}static _onChatCardToggleContent(event){event.preventDefault();const content=event.currentTarget.closest(".chat-card").querySelector(".card-content");content&&(content.style.display?content.style.display="none"===content.style.display?"block":"none":content.style.display="block")}}class CoC7MeleeInitiator extends ChatCardActor{constructor(actorKey=null,itemId=null,fastForward=!1){super(actorKey,fastForward),this.itemId=itemId,this.resolved=!1,this.outnumbered=!1,this.surprised=!1,this.autoSuccess=!1,this.advantage=!1,this.disadvantage=!1,this.messageId=null,this.targetCard=null,this.rolled=!1}get template(){return"systems/CoC7/templates/chat/combat/melee-initiator.html"}async revealCheck(){const chatMessage=game.messages.get(this.messageId);await chatMessage.setFlag("CoC7","checkRevealed",!0),await ui.chat.updateMessage(chatMessage,!1)}async createChatCard(){chatHelper.getActorImgFromKey(this.actorKey);const html=await renderTemplate(this.template,this),speakerData={};this.token?speakerData.token=this:speakerData.actor=this;const speaker=ChatMessage.getSpeaker(speakerData),chatData={user:(this.actor.user?this.actor.user:game.user).id,speaker,content:html};["gmroll","blindroll"].includes(this.rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),chatData.blind=!1;return await ChatMessage.create(chatData)}async updateChatCard(){const html=await renderTemplate(this.template,this),message=game.messages.get(this.messageId),msg=await message.update({content:html});return await ui.chat.updateMessage(msg,!1),msg}toggleFlag(flagName){const flag=flagName.includes("-")?chatHelper.hyphenToCamelCase(flagName):flagName;this[flag]=!this[flag]}async performSkillCheck(skillId=null,publish=!1){const check=new CoC7Check;if(check.isBlind=!1,check.isUnkonwn=!1,check.referenceMessageId=this.messageId,check.rollType="opposed",check.side="initiator",check.action="attack",check.actor=this.actorKey,check.item=this.itemId,check.skill=skillId,check.difficulty=CoC7Check.difficultyLevel.regular,check.diceModifier=0,game.user.isGM?this.checkRevealed=!1:this.checkRevealed=!0,this.outnumbered&&(check.diceModifier+=1),this.surprised&&(check.diceModifier+=1),this.disadvantage&&(check.diceModifier-=1),this.advantage&&(check.diceModifier+=1),await check.roll(),this.check=check,this.rolled=!0,this.resolved=!0,publish&&check.toMessage(),this.criticalDamage=check.successLevel===CoC7Check.successLevel.extreme||check.successLevel===CoC7Check.successLevel.critical,this.hasTarget&&!this.autoSuccess){const message=await game.CoC7socket.executeAsGM("gmcreatemessageas",{targetKey:this.targetKey,messageId:this.messageId,fastForward:this.fastForward,actorKey:this.actorKey});this.targetCard=message.id||message._id}return this.autoSuccess&&!this.check.isFumble&&this.check.forcePass(),check}async publishCheckResult(check=null){if(!check&&!this.check)return null;if(check&&(this.check=check),this.roll=CoC7Roll.getFromCheck(this.check),this.rolled=!0,this.roll.rollIcons=[],this.roll.critical){this.roll.rollColor="goldenrod",this.roll.rollTitle=game.i18n.localize("CoC7.CriticalSuccess");for(let index=0;index<4;index++)this.roll.rollIcons.push("medal")}else if(this.roll.fumble){this.roll.rollColor="darkred",this.roll.rollTitle=game.i18n.localize("CoC7.Fumble");for(let index=0;index<4;index++)this.roll.rollIcons.push("spider")}else if(this.roll.success){this.roll.rollColor="goldenrod",CoC7Check.successLevel.regular===this.roll.successLevel&&(this.roll.rollTitle=game.i18n.localize("CoC7.RegularSuccess")),CoC7Check.successLevel.hard===this.roll.successLevel&&(this.roll.rollTitle=game.i18n.localize("CoC7.HardSuccess")),CoC7Check.successLevel.extreme===this.roll.successLevel&&(this.roll.rollTitle=game.i18n.localize("CoC7.ExtremeSuccess"));for(let index=0;index<this.roll.successLevel;index++)this.roll.rollIcons.push("star")}else this.roll.rollColor="black",this.roll.rollTitle=game.i18n.localize("CoC7.Failure"),this.roll.rollIcons.push("skull");if(!this.targetCard&&!this.autoSuccess&&this.hasTarget){const resolutionCard=new CoC7MeleeResoltion(this.parentMessageId,this.messageId),resolutionMessage=await resolutionCard.preCreateMessage();this.resolutionCard=resolutionMessage.id}await this.updateChatCard()}static getFromCard(card,messageId=null){const initiator=new CoC7MeleeInitiator;return chatHelper.getObjectFromElement(initiator,card),initiator.roll=CoC7Roll.getFromCard(card),card.closest(".message")?initiator.messageId=card.closest(".message").dataset.messageId:initiator.messageId=messageId,initiator}static getFromMessageId(messageId){const message=game.messages.get(messageId);if(!message)return null;const card=$(message.content)[0],initiator=CoC7MeleeInitiator.getFromCard(card,messageId);return initiator.messageId=messageId,initiator}static updateCardSwitch(event,publishUpdate=!0){const card=event.currentTarget.closest(".melee.initiator"),flag=event.currentTarget.dataset.flag,camelFlag=chatHelper.hyphenToCamelCase(flag);if(publishUpdate){const initiator=CoC7MeleeInitiator.getFromCard(card);initiator.toggleFlag(flag),initiator.updateChatCard()}else card.dataset[camelFlag]="true"!==card.dataset[camelFlag],event.currentTarget.classList.toggle("switched-on"),event.currentTarget.dataset.selected=card.dataset[camelFlag]}upgradeRoll(luckAmount,newSuccessLevel,oldCard){this.actor.spendLuck(luckAmount)||ui.notifications.error(game.i18n.format("CoC7.LuckNotEnough",{name:this.actor.name})),this.roll.value=null,this.roll.successLevel=newSuccessLevel,this.roll.luckSpent=!0,oldCard.dataset.processed=!1;const diceRolls=oldCard.querySelector(".dice-roll");diceRolls.dataset.value=null,diceRolls.dataset.successLevel=newSuccessLevel,diceRolls.dataset.luckSpent=!0;const resulDetails=oldCard.querySelector(".result-details"),diceTotal=oldCard.querySelector(".dice-total"),rollDamageButton=oldCard.querySelector('button[data-action="roll-melee-damage"]');switch(rollDamageButton&&rollDamageButton.classList.remove("invisible"),newSuccessLevel){case CoC7Check.successLevel.regular:diceTotal.innerText=game.i18n.localize("CoC7.RegularSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.RegularDifficulty")});break;case CoC7Check.successLevel.hard:diceTotal.innerText=game.i18n.localize("CoC7.HardSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.HardDifficulty")});break;case CoC7Check.successLevel.extreme:rollDamageButton&&(rollDamageButton.dataset.critical=!0),diceTotal.innerText=game.i18n.localize("CoC7.ExtremeSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.ExtremeDifficulty")});break;case CoC7Check.successLevel.critical:rollDamageButton&&(rollDamageButton.dataset.critical=!0),diceTotal.innerText=game.i18n.localize("CoC7.CriticalSuccess"),resulDetails.innerText=game.i18n.format("CoC7.RollResult.LuckSpendText",{luckAmount,successLevel:game.i18n.localize("CoC7.CriticalDifficulty")})}diceTotal.classList.replace("failure","success"),oldCard.querySelector(".card-buttons").remove(),oldCard.querySelector(".dice-tooltip").style.display="none",CoC7Chat.updateChatCard(oldCard)}}class CoCActor extends Actor{constructor(data,context){if(data.type in CONFIG.Actor.documentClasses&&!context?.extended)return new CONFIG.Actor.documentClasses[data.type](data,{extended:!0,...context});super(data,context)}async initialize(){super.initialize(),await this.creatureInit()}prepareBaseData(){if(["character","npc","creature"].includes(this.type)){this.system.skills={};for(const i of this.items)"skill"===i.type&&(this.system.skills[`${i.itemIdentifier}`]={foundryID:i.id,cocid:i.flags?.CoC7?.cocidFlag?.id,value:i.rawValue,bonusDice:i.system.bonusDice});if(void 0===this.system.attribs.san.dailyLimit)if(this.system.attribs.san.oneFifthSanity){const s=this.system.attribs.san.oneFifthSanity.split("/");s[1]&&!isNaN(Number(s[1]))?this.system.attribs.san.dailyLimit=Number(s[1]):this.system.attribs.san.dailyLimit=0}else this.system.attribs.san.dailyLimit=0;this.system.attribs.mov.value=this.rawMov,this.system.attribs.db.value=this.rawDb,this.system.attribs.build.value=this.rawBuild,this.system.attribs.build.current=this.hp}super.prepareBaseData()}prepareEmbeddedDocuments(){super.prepareEmbeddedDocuments()}prepareDerivedData(){if(["character","npc","creature"].includes(this.type)){super.prepareDerivedData(),this.system.attribs.mov.value=this.rawMov,this.system.attribs.db.value=this.rawDb,this.system.attribs.build.value=this.rawBuild,this.system.attribs.hp.max=this.rawHpMax,null===this.hp&&(this.system.attribs.hp.value=this.rawHpMax),this.system.attribs.mp.max=this.rawMpMax,null===this.mp&&(this.system.attribs.mp.value=this.rawMpMax),this.system.attribs.san.max=this.rawSanMax,null===this.san&&(this.system.attribs.san.value=this.rawSanMax);const filterMatrix=[];this.system.attribs.hp.auto&&filterMatrix.push("system.attribs.hp.max"),this.system.attribs.mp.auto&&filterMatrix.push("system.attribs.mp.max"),this.system.attribs.san.auto&&filterMatrix.push("system.attribs.san.max"),this.system.attribs.mov.auto&&filterMatrix.push("system.attribs.mov.value"),this.system.attribs.db.auto&&filterMatrix.push("system.attribs.db.value"),this.system.attribs.build.auto&&filterMatrix.push("system.attribs.build.value");const changes=this.effects.reduce(((changes,e)=>e.disabled||e.isSuppressed?changes:changes.concat(e.changes.map((c=>((c=foundry.utils.duplicate(c)).effect=e,c.priority=c.priority??10*c.mode,c))))),[]);changes.sort(((a,b)=>a.priority-b.priority));const selectChanges=changes.filter((e=>filterMatrix.includes(e.key)));for(const change of selectChanges)change.effect.apply(this,change);this.hpMax&&this.hpMax<this.hp&&(this.system.attribs.hp.value=this.hpMax),this.mpMax&&this.mpMax<this.mp&&(this.system.attribs.mp.value=this.mpMax),this.sanMax&&this.sanMax<this.san&&(this.system.attribs.san.value=this.sanMax)}}static async create(data,options={}){return"character"===data.type?data.prototypeToken=foundry.utils.mergeObject(data.prototypeToken||{},{actorLink:!0,disposition:1,sight:{enabled:!0}}):"npc"===data.type?void 0!==data.img&&"icons/svg/mystery-man.svg"!==data.img||(data.img="systems/CoC7/assets/icons/cultist.svg"):"creature"===data.type?void 0!==data.img&&"icons/svg/mystery-man.svg"!==data.img||(data.img="systems/CoC7/assets/icons/floating-tentacles.svg"):"container"===data.type&&(void 0!==data.img&&"icons/svg/mystery-man.svg"!==data.img||(data.img="icons/svg/chest.svg"),data.prototypeToken=foundry.utils.mergeObject(data.prototypeToken||{},{actorLink:!0})),super.create(data,options)}checkUndefinedAuto(){const returnData={attribs:{hp:{},mp:{},san:{},mov:{},db:{},build:{}}};return void 0===this.system.attribs?.hp?.auto&&(returnData.attribs.hp.auto=!0),void 0===this.system.attribs?.mp?.auto&&(returnData.attribs.mp.auto=!0),void 0===this.system.attribs?.san?.auto&&(returnData.attribs.san.auto=!0),void 0===this.system.attribs?.mov?.auto&&(returnData.attribs.mov.auto=!0),void 0===this.system.attribs?.db?.auto&&(returnData.attribs.db.auto=!0),void 0===this.system.attribs?.build?.auto&&(returnData.attribs.build.auto=!0),returnData}get characteristics(){const characteristics={str:{value:null,shortName:"CHARAC.STR",label:"CHARAC.Strength",formula:null},con:{value:null,shortName:"CHARAC.CON",label:"CHARAC.Constitution",formula:null},siz:{value:null,shortName:"CHARAC.SIZ",label:"CHARAC.Size",formula:null},dex:{value:null,shortName:"CHARAC.DEX",label:"CHARAC.Dexterity",formula:null},app:{value:null,shortName:"CHARAC.APP",label:"CHARAC.Appearance",formula:null},int:{value:null,shortName:"CHARAC.INT",label:"CHARAC.Intelligence",formula:null},pow:{value:null,shortName:"CHARAC.POW",label:"CHARAC.Power",formula:null},edu:{value:null,shortName:"CHARAC.EDU",label:"CHARAC.Education",formula:null}};if(this.system.characteristics)for(const[key,value]of Object.entries(this.system.characteristics))characteristics[key]={key,shortName:game.i18n.localize(value.short),label:game.i18n.localize(value.label),value:value.value,hard:Math.floor(value.value/2)||null,extreme:Math.floor(value.value/5)||null,formula:value.formula};return characteristics}static async initToken(createData){}get hasTempoInsane(){return this.hasConditionStatus(COC7.status.tempoInsane)}get getTempoInsaneDurationText(){return this.hasConditionValue(COC7.status.tempoInsane,"durationText")}get hasIndefInsane(){return this.hasConditionStatus(COC7.status.indefInsane)}get portrait(){return game.settings.get("CoC7","useToken")&&(this.token?.texture?.src||this.prototypeToken?.texture?.src)||this.img}async enterBoutOfMadness(realTime=!0,duration=1){let result=null;const boutOfMadnessTableId=realTime?game.settings.get("CoC7","boutOfMadnessRealTimeTable"):game.settings.get("CoC7","boutOfMadnessSummaryTable");if("none"!==boutOfMadnessTableId){result={phobia:!1,mania:!1,description:null};const boutOfMadnessTable=game.tables.get(boutOfMadnessTableId);if(result.tableRoll=await boutOfMadnessTable.roll(),void 0!==result.tableRoll.results[0]){if(CONST.TABLE_RESULT_TYPES.DOCUMENT===result.tableRoll.results[0].type){const item=game.items.get(result.tableRoll.results[0].documentId);if(void 0!==item){item.system?.type?.phobia&&(result.phobia=!0),item.system?.type?.mania&&(result.mania=!0),result.description=`${item.name}:`+await TextEditor.enrichHTML(item.system.description.value,{async:!0}),result.name=item.name;const itemData=item.toObject();delete itemData._id,await this.createEmbeddedDocuments("Item",[itemData])}else ui.notifications.error(game.i18n.localize("CoC7.MessageBoutOfMadnessItemNotFound"))}CONST.TABLE_RESULT_TYPES.TEXT===result.tableRoll.results[0].type&&(result.description=await TextEditor.enrichHTML(result.tableRoll.results[0].text,{async:!0}))}else ui.notifications.error(game.i18n.localize("CoC7.MessageBoutOfMadnessTableNotFound"))}return realTime?(this.setCondition(COC7.status.tempoInsane,{realTime,duration}),result):result}static emptySkill(skillName,value,{rarity=!1,push=!0,combat=!1,img=!1,specialization=!1}={}){const data={name:skillName,type:"skill",system:{value,skillName,specialization:"",properties:{special:!1,rarity,push,combat}}};if(!1!==img&&(data.img=img),!1!==specialization){const parts=CoC7Item.getNamePartsSpec(skillName,specialization);data.system.specialization=parts.specialization,data.system.skillName=parts.skillName,data.name=parts.name,data.system.properties.special=!0}return data}async createSkill(skillName,value,showSheet=!1){const data=CoCActor.emptySkill(skillName,value);return await this.createEmbeddedDocuments("Item",[data],{renderSheet:showSheet})}async createWeaponSkill(name,firearms=!1,base=null){const skillData=await SkillSpecSelectDialog.create([],game.i18n.localize(firearms?"CoC7.FirearmSpecializationName":"CoC7.FightingSpecializationName"),0,name),value=Number(skillData.get("base-value")),parts=CoC7Item.getNamePartsSpec(name,game.i18n.localize(firearms?"CoC7.FirearmSpecializationName":"CoC7.FightingSpecializationName")),data={name:parts.name,type:"skill",system:{base:isNaN(value)?0:value,adjustments:{personal:null,occupation:null,archetype:null,experience:null},skillName:parts.skillName,specialization:parts.specialization,properties:{special:!0,fighting:!firearms,firearm:firearms,combat:!0}}};await this.createEmbeddedDocuments("Item",[data],{renderSheet:!base});return this.getSkillsByName(name)[0]}async creatureInit(){if("creature"!==this.type)return;if(this.getActorFlag("initialized"))return;if(0===this.getSkillsByName(game.i18n.localize(COC7.creatureFightingSkill)).length){try{const parts=CoC7Item.getNamePartsSpec(game.i18n.localize(COC7.creatureFightingSkill),game.i18n.localize(COC7.fightingSpecializationName)),data={type:"skill",name:parts.name,system:{base:0,value:null,skillName:parts.skillName,specialization:parts.specialization,properties:{combat:!0,fighting:!0,special:!0},flags:{}}},skill=await this.createEmbeddedDocuments("Item",[data],{renderSheet:!1}),attack=await this.createEmbeddedDocuments("Item",[{name:"Innate attack",type:"weapon",system:{description:{value:"Creature's natural attack",chat:"Creature's natural attack"},wpnType:"innate",properties:{addb:!0,slnt:!0}}}],{renderSheet:!1});if(skill.length>0&&attack.length>0){const createdAttack=this.items.get(attack[0].id);await createdAttack.update({"system.skill.main.id":skill[0].id,"system.skill.main.name":skill[0].name})}}catch(err){console.error("Creature init: "+err.message)}await this.setActorFlag("initialized")}}async createItem(itemName,quantity=1,showSheet=!1){const data={name:itemName,type:"item",system:{quantity}};return await this.createEmbeddedDocuments("Item",[data],{renderSheet:showSheet})}async createEmptyBook(event=null){const showSheet=!event||!event.shiftKey;if(!this.getItemIdByName(game.i18n.localize(COC7.newBookName)))return this.createBook(game.i18n.localize(COC7.newBookName),showSheet);let index=0,itemName=game.i18n.localize(COC7.newBookName)+" "+index;for(;this.getItemIdByName(itemName);)index++,itemName=game.i18n.localize(COC7.newBookName)+" "+index;return this.createBook(itemName,showSheet)}async createBook(itemName,showSheet=!1){const data={name:itemName,type:"book",system:{}};return await this.createEmbeddedDocuments("Item",[data],{renderSheet:showSheet})}async createEmptySpell(event=null){const showSheet=!event||!event.shiftKey;if(!this.getItemIdByName(game.i18n.localize(COC7.newSpellName)))return this.createSpell(game.i18n.localize(COC7.newSpellName),showSheet);let index=0,itemName=game.i18n.localize(COC7.newSpellName)+" "+index;for(;this.getItemIdByName(itemName);)index++,itemName=game.i18n.localize(COC7.newSpellName)+" "+index;return this.createSpell(itemName,showSheet)}static emptySpell(itemName){return{name:itemName,type:"spell",system:{}}}async createSpell(itemName,showSheet=!1){const data=CoCActor.emptySpell(itemName);return await this.createEmbeddedDocuments("Item",[data],{renderSheet:showSheet})}async createEmptySkill(event=null){const showSheet=!event||!event.shiftKey;if(!this.getItemIdByName(game.i18n.localize(COC7.newSkillName)))return this.createSkill(game.i18n.localize(COC7.newSkillName),"character"!==this.type?1:null,showSheet);let index=0,skillName=game.i18n.localize(COC7.newSkillName)+" "+index;for(;this.getItemIdByName(skillName);)index++,skillName=game.i18n.localize(COC7.newSkillName)+" "+index;return this.createSkill(skillName,null,showSheet)}async createEmptyItem(event=null){const showSheet=!event||!event.shiftKey;if(!this.getItemIdByName(game.i18n.localize(COC7.newItemName)))return this.createItem(game.i18n.localize(COC7.newItemName),1,showSheet);let index=0,itemName=game.i18n.localize(COC7.newItemName)+" "+index;for(;this.getItemIdByName(itemName);)index++,itemName=game.i18n.localize(COC7.newItemName)+" "+index;return this.createItem(itemName,1,showSheet)}async createEmptyWeapon(event=null,properties={}){const showSheet=!event||!event.shiftKey;let weaponName=game.i18n.localize(COC7.newWeaponName);if(this.getItemIdByName(game.i18n.localize(COC7.newWeaponName))){let index=0;for(weaponName=game.i18n.localize(COC7.newWeaponName)+" "+index;this.getItemIdByName(weaponName);)index++,weaponName=game.i18n.localize(COC7.newWeaponName)+" "+index}const data={name:weaponName,type:"weapon",system:{properties:{}}};for(const[key]of Object.entries(COC7.weaponProperties))data.system.properties[key]=Object.prototype.hasOwnProperty.call(properties,key)??!1;await this.createEmbeddedDocuments("Item",[data],{renderSheet:showSheet})}async createBioSection(title=null){const bio=this.system.biography?foundry.utils.duplicate(this.system.biography):[];bio.push({title,value:null}),await this.update({"system.biography":bio},{renderSheet:!1})}async updateBioValue(index,content){const bio=foundry.utils.duplicate(this.system.biography);bio[index].value=content,await this.update({"system.biography":bio},{render:!1})}async updateBioTitle(index,title){const bio=foundry.utils.duplicate(this.system.biography);bio[index].title=title,await this.update({"system.biography":bio})}async deleteBioSection(index){const bio=foundry.utils.duplicate(this.system.biography);bio.splice(index,1),await this.update({"system.biography":bio})}async moveBioSectionUp(index){if(0===index)return;const bio=foundry.utils.duplicate(this.system.biography);if(index>=bio.length)return;const elem=bio.splice(index,1)[0];bio.splice(index-1,0,elem),await this.update({"system.biography":bio})}async moveBioSectionDown(index){const bio=foundry.utils.duplicate(this.system.biography);if(index>=bio.length-1)return;const elem=bio.splice(index,1)[0];bio.splice(index+1,0,elem),await this.update({"system.biography":bio})}async updateTextArea(textArea){const name="system."+textArea.dataset.areaName;await this.update({[name]:textArea.value})}async createEmbeddedDocuments(embeddedName,dataArray,options){const processedDataArray=[];let baseValue=0,baseCalculated=0,archetype=!1,occupation=!1;for(let data of dataArray)switch(data.type){case"skill":{if(baseValue=data.system.base,baseCalculated=await CoC7Item.calculateBase(this,data),"character"!==this.type){if(this.getItemIdByName(data.name))return;if(baseValue&&String(baseValue)!==String(data.system.value)&&(data.system.value=baseCalculated),isNaN(Number(data.system.value))){let value;try{value=(await new Roll(data.system.value,this.parseCharacteristics()).evaluate({async:!0})).total}catch(err){value=null}value&&(data.system.value=Math.floor(value))}}else data.system.value=null;let addThis=!0;if(CoC7Item.isAnySpec(data)){const isAnyButNotFlagged=(!data.system.properties?.requiresname??!1)&&!data.system.properties?.picknameonly;let skillList=[];const group=game.system.api.cocid.guessGroupFromDocument(data);if(group&&(skillList=(await game.system.api.cocid.fromCoCIDRegexBest({cocidRegExp:new RegExp("^"+CoC7Utilities.quoteRegExp(group)+".+$"),type:"i"})).filter((item=>(item.system.properties?.special??!1)&&!item.system.properties?.requiresname&&!item.system.properties?.picknameonly))),data.system?.flags?.occupation||data.system?.flags?.archetype){const existingSkills=this.skills.filter((el=>!!el.system.specialization&&((!data.system?.flags?.occupation||!el.system.flags?.occupation)&&((!data.system?.flags?.archetype||!el.system.flags?.archetype)&&data.system.specialization.toLocaleLowerCase()===el.system.specialization.toLocaleLowerCase()))));if(existingSkills.length>0)if(skillList.length>0){for(let i=existingSkills.length-1;i>=0;i--){const found=skillList.findIndex((item=>item.name===existingSkills[i].name||item.flags?.CoC7?.cocidFlag?.id===existingSkills[i].flags?.CoC7?.cocidFlag?.id));found>-1&&skillList.splice(found,1)}skillList=skillList.concat(existingSkills)}else skillList=existingSkills}skillList.length>0&&skillList.sort(CoC7Utilities.sortByNameKey);const skillData=await SkillSpecializationSelectDialog.create({skills:skillList,allowCustom:isAnyButNotFlagged||(data.system.properties?.requiresname??!1),fixedBaseValue:data.system.properties?.keepbasevalue??!1,specializationName:data.system.specialization,label:data.name,baseValue:data.system.base});if(Object.prototype.hasOwnProperty.call(skillData,"selected"))if(skillData.selected){const existingItem=this.items.get(skillData.selected);if(existingItem){const changes={};data.system.properties?.keepbasevalue||""!==skillData.baseValue&&(baseCalculated=skillData.baseValue,changes["system.value"]=baseCalculated);for(const[key,value]of Object.entries(data.system.flags))value&&(changes[`system.flags.${key}`]=!0);Object.keys(changes).length>0&&(changes._id=existingItem.id,await this.updateEmbeddedDocuments("Item",[changes])),data.name=CoC7Item.getNameWithoutSpec(existingItem),addThis=!1}else{const existing=skillList.find((i=>i.id===skillData.selected));if(existing){const flags=data.system?.flags,keepBase=data.system.properties?.keepbasevalue??!1;data=foundry.utils.duplicate(existing);for(const[key,value]of Object.entries(flags))value&&(data.system.flags[key]=!0);keepBase&&(""!==skillData.baseValue&&(data.system.base=skillData.baseValue),baseValue=skillData.baseValue,baseCalculated=await CoC7Item.calculateBase(this,data))}}}else{const parts=CoC7Item.getNamePartsSpec(skillData.name,data.system.specialization);data.system.properties?.keepbasevalue||(""!==skillData.baseValue&&(data.system.base=skillData.baseValue),baseValue=skillData.baseValue,baseCalculated=await CoC7Item.calculateBase(this,data)),data.system.skillName=parts.skillName,data.name=parts.name}}addThis&&(String(baseValue)!==String(baseCalculated)&&(data.system.base=baseCalculated),processedDataArray.push(foundry.utils.duplicate(data)));break}case"weapon":if("container"!==this.type){const mainSkill=data.system?.skill?.main?.name;if(mainSkill){let skill=this.getSkillsByName(mainSkill)[0];if(!skill){const name=mainSkill.match(/\(([^)]+)\)/)?mainSkill.match(/\(([^)]+)\)/)[1]:mainSkill,existing=game.items.find((item=>"skill"===item.type&&(item.name.toLocaleLowerCase()===name.toLocaleLowerCase()||item.system.skillName?.toLocaleLowerCase()===name.toLocaleLowerCase())));void 0!==existing?(await this.addItems([existing]),skill=await this.getSkillsByName(mainSkill)[0]):skill=await this.createWeaponSkill(name,!!data.system.properties?.rngd)}skill&&(data.system.skill.main.id=skill.id)}const secondSkill=data.system?.skill?.alternativ?.name;if(secondSkill){let skill=this.getSkillsByName(secondSkill)[0];if(!skill){const name=secondSkill.match(/\(([^)]+)\)/)?secondSkill.match(/\(([^)]+)\)/)[1]:secondSkill,existing=game.items.find((item=>"skill"===item.type&&(item.name.toLocaleLowerCase()===name.toLocaleLowerCase()||item.system.skillName?.toLocaleLowerCase()===name.toLocaleLowerCase())));void 0!==existing?(await this.addItems([existing]),skill=await this.getSkillsByName(secondSkill)[0]):skill=await this.createWeaponSkill(name,!!data.system.properties?.rngd)}skill&&(data.system.skill.alternativ.id=skill.id)}}processedDataArray.push(foundry.utils.duplicate(data));break;case"setup":{if(data.system.enableCharacterisitics){data.system.characteristics.list={},data.system.characteristics.list.str=this.getCharacteristic("str"),data.system.characteristics.list.con=this.getCharacteristic("con"),data.system.characteristics.list.siz=this.getCharacteristic("siz"),data.system.characteristics.list.dex=this.getCharacteristic("dex"),data.system.characteristics.list.app=this.getCharacteristic("app"),data.system.characteristics.list.int=this.getCharacteristic("int"),data.system.characteristics.list.pow=this.getCharacteristic("pow"),data.system.characteristics.list.edu=this.getCharacteristic("edu"),data.system.characteristics.list.luck={},data.system.characteristics.list.luck.value=isNaN(this.luck)?null:this.luck,data.system.characteristics.list.luck.label=game.i18n.localize("CoC7.Luck"),data.system.characteristics.list.luck.shortName=game.i18n.localize("CoC7.Luck"),data.system.characteristics.values||(data.system.characteristics.values={}),data.system.characteristics.values.str=data.system.characteristics.list.str.value,data.system.characteristics.values.con=data.system.characteristics.list.con.value,data.system.characteristics.values.siz=data.system.characteristics.list.siz.value,data.system.characteristics.values.dex=data.system.characteristics.list.dex.value,data.system.characteristics.values.app=data.system.characteristics.list.app.value,data.system.characteristics.values.int=data.system.characteristics.list.int.value,data.system.characteristics.values.pow=data.system.characteristics.list.pow.value,data.system.characteristics.values.edu=data.system.characteristics.list.edu.value,data.system.characteristics.values.luck=data.system.characteristics.list.luck.value,data.system.characteristics.points.enabled?data.system.title=game.i18n.localize("CoC7.SpendPoints"):data.system.title=game.i18n.localize("CoC7.RollCharac"),data.system.pointsWarning=!(null!==data.system.characteristics.values.str&&null!==data.system.characteristics.values.con&&null!==data.system.characteristics.values.siz&&null!==data.system.characteristics.values.dex&&null!==data.system.characteristics.values.app&&null!==data.system.characteristics.values.int&&null!==data.system.characteristics.values.pow&&null!==data.system.characteristics.values.edu);if(!await CharacRollDialog.create(data.system))return;{const updateData={};for(const key of["str","con","siz","dex","app","int","pow","edu"])data.system.characteristics.values[key]&&(updateData[`system.characteristics.${key}.value`]=data.system.characteristics.values[key],updateData[`system.characteristics.${key}.formula`]=data.system.characteristics.rolls[key]);data.system.characteristics.values.luck&&(updateData["system.attribs.lck.value"]=data.system.characteristics.values.luck),data.system.characteristics.values.pow&&(updateData["system.attribs.san.value"]=data.system.characteristics.values.pow,updateData["system.attribs.san.dailyLimit"]=Math.floor(data.system.characteristics.values.pow/5),updateData["system.attribs.mp.max"]=Math.floor(data.system.characteristics.values.pow/5)),await this.update(updateData,{renderSheet:!1}),await this.update({"system.attribs.hp.value":this.rawHpMax,"system.attribs.hp.max":this.rawHpMax},{renderSheet:!1})}}const era=Object.entries(data.flags?.CoC7?.cocidFlag?.eras).filter((e=>e[1])).map((e=>e[0])),items=await game.system.api.cocid.expandItemArray({itemList:data.system.items,era:void 0===era[0]||era[0]}),skills=items.filter((it=>"skill"===it.type)),othersItems=items.filter((it=>"skill"!==it.type));if(await this.addUniqueItems(skills),await this.addItems(othersItems),game.settings.get("CoC7","oneBlockBackstory"))await this.update({"system.backstory":data.system.backstory},{renderSheet:!1});else for(const sectionName of data.system.bioSections)!this.system.biography?.find((el=>sectionName===el.title))&&sectionName&&await this.createBioSection(sectionName);const monetary=foundry.utils.mergeObject(this.system.monetary,foundry.utils.duplicate(data.system.monetary)),sheet=this.sheet;let state=!1;do{state=await new Promise((resolve=>setTimeout((()=>{resolve(sheet._state)}),100)))}while(state===Application.RENDER_STATES.RENDERING);await this.update({"system.monetary":monetary}),Hooks.call("setupFinishedCoC7");break}case"archetype":if("character"===this.type){if(this.archetype){let resetArchetype=!1;if(await Dialog.confirm({title:game.i18n.localize("CoC7.ResetArchetype"),content:`<p>${game.i18n.format("CoC7.ResetArchetypeHint",{name:this.name})}</p>`,yes:()=>{resetArchetype=!0},defaultYes:!1}),!resetArchetype)return;await this.resetArchetype()}const coreCharac=[];for(const entry of Object.entries(data.system.coreCharacteristics)){const[key,value]=entry;if(data.system.coreCharacteristics[key]=!1,value){const char=this.getCharacteristic(key);char.key=key,coreCharac.push(char)}}let charac;if(coreCharac.length>1){const charDialogData={};charDialogData.characteristics=coreCharac,charDialogData.title=game.i18n.localize("CoC7.SelectCoreCharac"),charac=await CharacSelectDialog.create(charDialogData)}else 1===coreCharac.length&&(charac=coreCharac[0].key);if(!charac)return;if(data.system.coreCharacteristics[charac]=!0,data.system.coreCharacteristicsFormula.enabled){let value=Number(data.system.coreCharacteristicsFormula.value);if(isNaN(value)){const char=this.getCharacteristic(charac),roll=new Roll(data.system.coreCharacteristicsFormula.value);await roll.roll({async:!0}),roll.toMessage({flavor:game.i18n.format("CoC7.MessageRollingCharacteristic",{label:char.label,formula:data.system.coreCharacteristicsFormula.value})}),value=char.value<roll.total?roll.total:char.value}await this.update({[`system.characteristics.${charac}.value`]:value})}data.system.skills=await game.system.api.cocid.expandItemArray({itemList:data.system.skills}),await this.addUniqueItems(data.system.skills,"archetype"),processedDataArray.push(foundry.utils.duplicate(data)),archetype=!0}break;case"occupation":if("character"===this.type){if(this.occupation){let resetOccupation=!1;if(await Dialog.confirm({title:game.i18n.localize("CoC7.ResetOccupation"),content:`<p>${game.i18n.format("CoC7.ResetOccupationHint",{name:this.name})}</p>`,yes:()=>{resetOccupation=!0},defaultYes:!1}),!resetOccupation)return;await this.resetOccupation()}if(data.system.skills=await game.system.api.cocid.expandItemArray({itemList:data.system.skills}),Number(data.system.creditRating.max)>0){const actorCreditRating=game.system.api.cocid.findCocIdInList("i.skill.credit-rating",data.system.skills);0===actorCreditRating.length?0===game.system.api.cocid.findCocIdInList("i.skill.credit-rating",this.items).length&&(data.system.skills.push("i.skill.credit-rating"),data.system.skills=await game.system.api.cocid.expandItemArray({itemList:data.system.skills})):0===game.system.api.cocid.findCocIdInList("i.skill.credit-rating",this.items).length&&data.system.skills.push(actorCreditRating[0])}const pointsDialogData={};pointsDialogData.characteristics=data.system.occupationSkillPoints;let total=0,optionalChar=!1;for(const entry of Object.entries(data.system.occupationSkillPoints)){const[key,value]=entry,char=this.getCharacteristic(key);pointsDialogData.characteristics[key].name=char.label,pointsDialogData.characteristics[key].value=char.value,value.selected&&(pointsDialogData.characteristics[key].total=char.value*Number(pointsDialogData.characteristics[key].multiplier),value.optional?optionalChar=!0:total+=pointsDialogData.characteristics[key].total)}if(pointsDialogData.total=total,optionalChar){if(!await PointSelectDialog.create(pointsDialogData))return}for(let index=0;index<data.system.groups.length;index++){data.system.groups[index].skills=await game.system.api.cocid.expandItemArray({itemList:data.system.groups[index].skills});const dialogData={skills:[],type:"occupation"};dialogData.actorId=this.id,dialogData.optionsCount=Number(data.system.groups[index].options),dialogData.title=game.i18n.localize("CoC7.SkillSelectionWindow");for(const value of data.system.groups[index].skills)if(CoC7Item.isAnySpec(value))dialogData.skills.push(value);else{const skill=this.items.find((item=>item.name===value.name&&"skill"===item.type));if(!skill||!skill.system.flags?.occupation){data.system.skills.find((item=>item.name===value.name))||dialogData.skills.push(value)}}if(0!==dialogData.skills.length)if(dialogData.skills.length<=dialogData.optionsCount){ui.notifications.info(game.i18n.format("CoC7.InfoLessSkillThanOptions",{skillCount:dialogData.skills.length,optionsCount:dialogData.optionsCount}));const merged=CoC7Item.mergeOptionalSkills(data.system.skills,dialogData.skills);data.system.skills=merged}else{const selected=await SkillSelectDialog.create(dialogData);if(!selected)return;const merged=CoC7Item.mergeOptionalSkills(data.system.skills,selected);data.system.skills=merged}else ui.notifications.info(game.i18n.localize("CoC7.InfoAllSkillsAlreadySelected"))}if(Number(data.system.personal)){const dialogData={skills:[],type:"occupation"};dialogData.actorId=this.id,dialogData.optionsCount=Number(data.system.personal),dialogData.title=game.i18n.format("CoC7.SelectPersonalSkills",{number:Number(data.system.personal)});for(const s of this.skills)if(!s.system.flags.occupation&&!s.system.properties.noadjustments&&!s.system.properties.noxpgain){data.system.skills.find((item=>item.name===s.name))||dialogData.skills.push(s)}if(0!==dialogData.skills.length)if(dialogData.skills.length<=dialogData.optionsCount){ui.notifications.info(game.i18n.format("CoC7.InfoLessSkillThanOptions",{skillCount:dialogData.skills.length,optionsCount:dialogData.optionsCount}));const merged=CoC7Item.mergeOptionalSkills(data.system.skills,dialogData.skills);data.system.skills=merged}else{const selected=await SkillSelectDialog.create(dialogData);if(!selected)return;const merged=CoC7Item.mergeOptionalSkills(data.system.skills,selected);data.system.skills=merged}else ui.notifications.info(game.i18n.localize("CoC7.InfoAllSkillsAlreadySelected"))}await this.addUniqueItems(data.system.skills,"occupation"),await(this.creditRatingSkill?.setItemFlag("occupation")),await(this.creditRatingSkill?.update({"system.adjustments.occupation":Number(data.system.creditRating.min)})),processedDataArray.push(foundry.utils.duplicate(data)),occupation=!0}break;default:processedDataArray.push(foundry.utils.duplicate(data))}if(0===processedDataArray.length)return[];const processed=await super.createEmbeddedDocuments(embeddedName,processedDataArray,options);return archetype&&(await this.update({"system.development.archetype":this.archetypePoints}),Hooks.call("archetypeFinishedCoC7")),occupation&&(await this.update({"system.development.occupation":this.occupationPoints,"system.development.personal":this.personalPoints}),Hooks.call("occupationFinishedCoC7")),processed}getItemIdByName(itemName){let id=null;const name=itemName.match(/\(([^)]+)\)/)?itemName.match(/\(([^)]+)\)/)[1]:itemName;for(const value of this.items)CoC7Item.getNameWithoutSpec(value).toLowerCase()===name.toLowerCase()&&(id=value.id);return id}getItemsByName(itemName){const itemList=[];for(const value of this.items)value.name===itemName&&itemList.push(value);return itemList}getSkillsByName(skillName){const skillList=[],name=skillName.match(/\(([^)]+)\)/)?skillName.match(/\(([^)]+)\)/)[1]:skillName;for(const value of this.items)CoC7Item.getNameWithoutSpec(value).toLowerCase()!==name.toLowerCase()&&value.flags?.CoC7?.cocidFlag?.id!==skillName||"skill"!==value.type||skillList.push(value);return skillList}getFirstItemByCoCID(cocid){return this.items.find((i=>i.flags?.CoC7?.cocidFlag?.id===cocid))}parseCharacteristics(){const parsed={};for(const[key,value]of Object.entries(COC7.formula.actor))key.startsWith("@")&&value.startsWith("this.")&&(parsed[key.substring(1)]=foundry.utils.getProperty(this,value.substring(5)));return parsed}static getCharacteristicDefinition(){const characteristics=[],characteristicList=foundry.utils.isNewerVersion(game.version,"12")?game.system.template.Actor.character.characteristics:game.system.template.Actor.templates.characteristics.characteristics;for(const[key,value]of Object.entries(characteristicList))characteristics.push({key,shortName:game.i18n.localize(value.short),label:game.i18n.localize(value.label)});return characteristics}getCharacteristic(charName){if(this.system.characteristics)for(const[key,value]of Object.entries(this.system.characteristics))if(game.i18n.localize(value.short).toLowerCase()===charName.toLowerCase()||game.i18n.localize(value.label).toLowerCase()===charName.toLowerCase()||key===charName.toLowerCase())return{key,shortName:game.i18n.localize(value.short),label:game.i18n.localize(value.label),value:value.value};return null}getAttribute(attribName){return["lck","luck",game.i18n.localize("CoC7.Luck").toLowerCase()].includes(attribName.toLowerCase())?{key:"lck",shortName:"luck",label:game.i18n.localize("CoC7.Luck"),value:this.system.attribs.lck.value}:["san",game.i18n.localize("CoC7.SAN").toLowerCase(),game.i18n.localize("CoC7.Sanity").toLowerCase()].includes(attribName.toLowerCase())?{key:"san",shortName:game.i18n.localize("CoC7.SAN"),label:game.i18n.localize("CoC7.Sanity"),value:this.system.attribs.san.value}:null}async runRoll(options={}){void 0===options.cardType&&(options.cardType=CoC7ChatMessage.CARD_TYPE_NORMAL),void 0===options.preventStandby&&(options.preventStandby=!0),options.actor=this;return await CoC7ChatMessage.trigger(options)}get occupation(){return this.items.filter((item=>"occupation"===item.type))[0]}get archetype(){return this.items.filter((item=>"archetype"===item.type))[0]}async resetOccupation(eraseOld=!0){if(eraseOld){const occupationSkill=this.items.filter((item=>item.getItemFlag("occupation")));for(let index=0;index<occupationSkill.length;index++)await occupationSkill[index].unsetItemFlag("occupation")}this.occupation&&await this.occupation.delete(),await this.update({"system.development.occupation":null})}async resetArchetype(eraseOld=!0){if(eraseOld){const archetypeSkill=this.items.filter((item=>item.getItemFlag("archetype")));for(let index=0;index<archetypeSkill.length;index++)await archetypeSkill[index].unsetItemFlag("archetype")}this.archetype&&await this.archetype.delete(),await this.update({"system.development.archetype":null})}get luck(){return parseInt(this.system.attribs?.lck?.value)}async setLuck(value){return await this.update({"system.attribs.lck.value":value})}async spendLuck(amount){return amount=parseInt(amount),this.luck>=amount&&this.setLuck(this.luck-amount)}get hp(){return parseInt(this.system.attribs.hp.value)}get rawHpMax(){return this.system.attribs.hp.auto?null!=this.system.characteristics.siz.value&&null!=this.system.characteristics.con.value?CoCActor.hpFromCharacteristics(this.system.characteristics,this.type):this.system.attribs.hp.max?parseInt(this.system.attribs.hp.max):null:parseInt(this.system.attribs.hp.max)}get hpMax(){return parseInt(this.system.attribs.hp.max)}async _setHp(value){return value<0&&(value=0),value>this.system.attribs.hp.max&&(value=parseInt(this.system.attribs.hp.max)),await this.update({"system.attribs.hp.value":value})}async addUniqueItems(skillList,flag=null){const processed=[];for(let skill of skillList)if(skill=foundry.utils.duplicate(skill),flag&&(Object.prototype.hasOwnProperty.call(skill.system,"flags")||(skill.system.flags={}),skill.system.flags[flag]=!0),CoC7Item.isAnySpec(skill))processed.push(skill);else{const itemId=this.getItemIdByName(skill.name);if(itemId){if(flag){const item=this.items.get(itemId);await item.setItemFlag(flag)}}else processed.push(skill)}0!==processed.length&&await this.createEmbeddedDocuments("Item",processed,{renderSheet:!1})}async addItems(itemList,flag=null){const processed=[];for(const item of itemList)flag&&(item.system.flags||(item.system.flags={}),item.system.flags[flag]=!0),processed.push(foundry.utils.duplicate(item));if(0!==processed.length)return await this.createEmbeddedDocuments("Item",processed,{renderSheet:!1})}async addUniqueItem(skill,flag=null){const itemId=this.getItemIdByName(skill.name);if(itemId){if(flag){const item=this.items.get(itemId);await item.setItemFlag(flag)}}else flag&&(skill.system.flags||(skill.system.flags={}),skill.system.flags[flag]=!0),await this.createEmbeddedDocuments("Item",[skill],{renderSheet:!1})}get rawMpMax(){return this.system.attribs.mp.auto?null!=this.system.characteristics.pow.value?CoCActor.mpFromCharacteristics(this.system.characteristics):0:parseInt(this.system.attribs.mp.max)}getReasonSanLoss(sanReason){return"string"==typeof sanReason?this.system.sanityLossEvents.filter((r=>r.type.toLocaleLowerCase()===sanReason.toLocaleLowerCase()))[0]??{type:"",totalLoss:0,immunity:!1}:{type:"",totalLoss:0,immunity:!1}}sanLostToReason(sanReason){if(sanReason){return this.getReasonSanLoss(sanReason).totalLoss}return 0}sanLossReasonEncountered(sanReason){if(sanReason){return""!==this.getReasonSanLoss(sanReason).type}return!1}setReasonSanLoss(sanReason,sanLoss){if("string"==typeof sanReason&&""!==sanReason){const sanityLossEvents=foundry.utils.duplicate(this.system.sanityLossEvents),index=sanityLossEvents.findIndex((r=>r.type.toLocaleLowerCase()===sanReason.toLocaleLowerCase()));return sanLoss>0?-1===index?sanityLossEvents.push({type:sanReason,totalLoss:sanLoss,immunity:!1}):sanityLossEvents[index].totalLoss+=sanLoss:index>-1&&(sanityLossEvents.splice(index,1),sanityLossEvents.sort((function(left,right){return left.type.localeCompare(right.type)}))),this.update({"system.sanityLossEvents":sanityLossEvents})}}maxLossToSanReason(sanReason,sanMaxFormula){const sanMax=new Roll(sanMaxFormula.toString())[foundry.utils.isNewerVersion(game.version,"12")?"evaluateSync":"evaluate"]({maximize:!0}).total,sanityLossEvent=this.getReasonSanLoss(sanReason);return sanityLossEvent.immunity?0:Math.max(0,sanMax-sanityLossEvent.totalLoss)}async looseSan(sanReason,sanLoss){return this.getReasonSanLoss(sanReason).immunity?0:(await this.setSan(this.san-sanLoss),this.setReasonSanLoss(sanReason,sanLoss),sanLoss)}sanLoss(checkPassed){return checkPassed?this.sanLossCheckPassed:this.sanLossCheckFailled}get sanLossCheckPassed(){return this.system.special?.sanLoss?.checkPassed}get sanLossCheckFailled(){return this.system.special?.sanLoss?.checkFailled}get sanLossMax(){return this.sanLossCheckFailled?isNaN(Number(this.sanLossCheckFailled))?new Roll(this.sanLossCheckFailled)[foundry.utils.isNewerVersion(game.version,"12")?"evaluateSync":"evaluate"]({maximize:!0}).total:Number(this.sanLossCheckFailled):0}get sanLossMin(){return this.sanLossCheckPassed?isNaN(Number(this.sanLossCheckPassed))?new Roll(this.sanLossCheckPassed)[foundry.utils.isNewerVersion(game.version,"12")?"evaluateSync":"evaluate"]({maximize:!0}).total:Number(this.sanLossCheckPassed):0}get dailySanLoss(){return this.system.attribs.san?.dailyLoss||0}get dailySanLimit(){return this.system.attribs.san?.dailyLimit||0}get rawSanMax(){if(this.system.attribs)return this.system.attribs?.san?.auto?this.cthulhuMythos?Math.max(99-this.cthulhuMythos,0):99:parseInt(this.system.attribs.san.max)}get sanMax(){return parseInt(this.system.attribs.san.max)}get mp(){return parseInt(this.system.attribs.mp.value)}get mpMax(){return this.system.attribs.mp.auto?null!=this.system.characteristics.pow.value?Math.floor(this.system.characteristics.pow.value/5):0:parseInt(this.system.attribs.mp.max)}async setMp(value){return value<0&&(value=0),value>parseInt(this.system.attribs.mp.max)&&(value=parseInt(this.system.attribs.mp.max)),await this.update({"system.attribs.mp.value":value})}get san(){return parseInt(this.system.attribs.san.value)}get int(){return this.getCharacteristic("int")}get occupationPointsSpent(){let occupationPoints=0;for(const skill of this.skills)skill.system.adjustments?.occupation&&(occupationPoints+=skill.system.adjustments.occupation);return occupationPoints}get occupationPoints(){if(!this.occupation)return 0;let points=0;for(const entry of Object.entries(this.occupation.system.occupationSkillPoints)){const[key,value]=entry,char=this.getCharacteristic(key);value.selected&&(points+=char.value*Number(value.multiplier))}return points}async resetOccupationPoints(){await this.update({"system.development.occupation":this.occupationPoints})}async resetArchetypePoints(){await this.update({"system.development.archetype":this.occupationPoints})}async resetPersonalPoints(){await this.update({"system.development.personal":this.personalPoints})}get archetypePointsSpent(){let archetypePoints=0;for(const skill of this.skills)skill.system.adjustments?.archetype&&(archetypePoints+=skill.system.adjustments.archetype);return archetypePoints}get archetypePoints(){return this.archetype?this.archetype.system.bonusPoints:0}get experiencePoints(){let experiencePoints=0;for(const skill of this.skills)skill.system.adjustments?.experience&&(experiencePoints+=skill.system.adjustments.experience);return experiencePoints}get personalPointsSpent(){let personalPoints=0;for(const skill of this.skills)skill.system.adjustments?.personal&&(personalPoints+=skill.system.adjustments.personal);return personalPoints}get personalPoints(){return 2*Number(this.system.characteristics.int.value)}get hasDevelopmentPhase(){for(const skill of this.skills)if(skill.system.flags?.developement)return!0;if(this.onlyRunOncePerSession)return!1;for(const sanityLossEvent of this.system.sanityLossEvents)if(!sanityLossEvent.immunity)return!0;return!1}async setSan(value){value<0&&(value=0),value>this.system.attribs.san.max&&(value=this.system.attribs.san.max);const loss=parseInt(this.system.attribs.san.value)-value;if(loss>0){let totalLoss=parseInt(this.system.attribs.san.dailyLoss)?parseInt(this.system.attribs.san.dailyLoss):0;totalLoss+=loss,loss>=5&&await this.setCondition(COC7.status.tempoInsane),totalLoss>=this.system.attribs.san.dailyLimit&&await this.setCondition(COC7.status.indefInsane),await this.update({"system.attribs.san.value":value,"system.attribs.san.dailyLoss":totalLoss})}else await this.update({"system.attribs.san.value":value});return value}async setAttribAuto(value,attrib){const updatedKey=`system.attribs.${attrib}.auto`;return await this.update({[updatedKey]:value})}async toggleAttribAuto(attrib){this.setAttribAuto(!this.system.attribs[attrib].auto,attrib)}static dbFromCharacteristics(characteristics){const sum=(characteristics.str.value??0)+(characteristics.siz.value??0);return sum<65?-2:sum<85?-1:sum<125?0:sum<165?"1D4":`${Math.floor((sum-45)/80)}D6`}static buildFromCharacteristics(characteristics){const sum=(characteristics.str.value??0)+(characteristics.siz.value??0);return sum<65?-2:sum<85?-1:sum<125?0:sum<165?1:Math.floor((sum-45)/80)+1}static hpFromCharacteristics(characteristics,type){const sum=parseInt(characteristics.siz.value??0,10)+parseInt(characteristics.con.value??0,10),divisor=game.settings.get("CoC7","pulpRuleDoubleMaxHealth")&&"character"===type?5:10;return Math.floor(sum/divisor)}static mpFromCharacteristics(characteristics){return Math.floor(characteristics.pow.value/5)}static movFromCharacteristics(characteristics,type,age){let MOV;return MOV=characteristics.dex.value>characteristics.siz.value&&characteristics.str.value>characteristics.siz.value?9:characteristics.dex.value>=characteristics.siz.value||characteristics.str.value>=characteristics.siz.value?8:7,"creature"===type||game.settings.get("CoC7","pulpRuleIgnoreAgePenalties")||isNaN(parseInt(age))||(MOV=parseInt(age)>=40?MOV-Math.floor(parseInt(age)/10)+3:MOV),Math.max(0,MOV)}get rawBuild(){return this.system.attribs&&this.system.attribs.build?("auto"===this.system.attribs.build.value&&(this.system.attribs.build.auto=!0),this.system.attribs.build.auto?CoCActor.buildFromCharacteristics(this.system.characteristics):this.system.attribs.build.value):null}get build(){return this.system.attribs.build.value}get rawDb(){return this.system.attribs&&this.system.attribs.db?("auto"===this.system.attribs.db.value&&(this.system.attribs.db.auto=!0),this.system.attribs.db.auto?CoCActor.dbFromCharacteristics(this.system.characteristics):this.system.attribs.db.value):null}get db(){return this.system.attribs.db.value}get rawMov(){if(!this.system.attribs)return null;if(!this.system.attribs.mov)return null;if("auto"===this.system.attribs.mov.value&&(this.system.attribs.mov.auto=!0),this.system.attribs.mov.auto){const MOV=CoCActor.movFromCharacteristics(this.system.characteristics,this.system.type,this.system.infos.age);if(MOV>0)return MOV}return this.system.attribs.mov.value}get mov(){return this.system.attribs.mov.value}get tokenId(){return this.token?`${this.token.scene._id}.${this.token.id}`:null}get locked(){return this.system.flags||(this.system.flags={},this.system.flags.locked=!0,this.update({"system.flags":{}}),this.update({"system.flags.locked":!1})),this.system.flags.locked}getItemsFromName(name){return this.items.filter((i=>i.name===name))}set locked(value){this.update({"system.flags.locked":value})}async toggleActorFlag(flagName){const flagValue=!this.system.flags[flagName],name=`system.flags.${flagName}`;await this.update({[name]:flagValue})}async attributeCheck(attributeName,fastForward=!1,options={}){const attrib=this.getAttribute(attributeName.toLowerCase());if(!attrib)return ui.notifications.error(game.i18n.format("CoC7.ErrorNotFound",{missing:attributeName})),null;const check=new CoC7Check;if(options.modifier&&(check.diceModifier=Number(options.modifier)),options.difficulty&&(check.difficulty=CoC7Utilities.convertDifficulty(options.difficulty)),!fastForward&&(void 0===options.difficulty||void 0===options.modifier)){const usage=await RollDialog.create(options);usage&&(check.diceModifier=Number(usage.get("bonusDice")),check.difficulty=Number(usage.get("difficulty")),check.flatDiceModifier=Number(usage.get("flatDiceModifier")),check.flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}check.actor=this.tokenKey,"false"===options.blind?check.isBlind=!1:check.isBlind=!!options.blind,await check.rollAttribute(attrib.key),check.toMessage()}async characteristicCheck(characteristicName,fastForward=!1,options={}){const char=this.getCharacteristic(characteristicName);if(!char)return void ui.notifications.error(game.i18n.format("CoC7.ErrorNotFoundForActor",{missing:characteristicName,actor:this.name}));const check=new CoC7Check;if(options.modifier&&(check.diceModifier=Number(options.modifier)),options.difficulty&&(check.difficulty=CoC7Utilities.convertDifficulty(options.difficulty)),!fastForward&&(void 0===options.difficulty||void 0===options.modifier)){options.displayName=char.label;const usage=await RollDialog.create(options);usage&&(check.diceModifier=Number(usage.get("bonusDice")),check.difficulty=Number(usage.get("difficulty")),check.flatDiceModifier=Number(usage.get("flatDiceModifier")),check.flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}check.actor=this.tokenKey,"false"===options.blind?check.isBlind=!1:check.isBlind=!!options.blind,await check.rollCharacteristic(char.key),check.toMessage()}static toolTipSkillText(){if(void 0!==game.CoC7Tooltips.ToolTipHover&&null!==game.CoC7Tooltips.ToolTipHover){const isCombat=game.CoC7Tooltips.ToolTipHover.classList?.contains("combat"),skillId=game.CoC7Tooltips.ToolTipHover.closest(".item")?.dataset.skillId,actorAppId=game.CoC7Tooltips.ToolTipHover.closest(".window-app")?.dataset?.appid;if(void 0!==skillId&&void 0!==actorAppId&&void 0!==ui.windows[actorAppId]?.actor?.id){const actorId=ui.windows[actorAppId].actor.id,actor=game.actors.get(actorId);if(actor){const skill=actor.items.get(skillId);if(skill){let toolTip=game.i18n.format(isCombat?"CoC7.ToolTipCombat":"CoC7.ToolTipSkill",{skill:skill.name,regular:skill.value,hard:Math.floor(skill.value/2),extreme:Math.floor(skill.value/5)});return game.user.isGM&&(toolTip+=game.i18n.format("CoC7.ToolTipKeeperSkill",{other:game.settings.get("CoC7","stanbyGMRolls")&&actor.hasPlayerOwner?game.i18n.format("CoC7.ToolTipKeeperStandbySkill",{name:actor.name}):""})),toolTip}}}}return!1}async getItemOrAdd(itemIdentifier,type="skill"){if(itemIdentifier.match(/^i\.([^\\.]+)\../)){let item=this.getFirstItemByCoCID(itemIdentifier);if(!item){const newItems=await game.system.api.cocid.fromCoCIDBest({cocid:itemIdentifier,showLoading:!0});if(1===newItems.length&&(await this.createEmbeddedDocuments("Item",newItems),item=this.getFirstItemByCoCID(itemIdentifier),item))if("skill"===item.type)ui.notifications.info(game.i18n.format("CoC7.InfoSkillAddedAtBase",{name:item.name,percent:item.value}));else if("weapon"===item.type){await item.reload();const updates={};if(""===item.system.skill.main.id&&""!==item.system.skill.main.name){const skill=await this.getItemOrAdd(item.system.skill.main.name,"skill");skill.length&&(updates["system.skill.main.id"]=skill[0].id,updates["system.skill.main.name"]=skill[0].name)}if(""===item.system.skill.alternativ.id&&""!==item.system.skill.alternativ.name){const skill=await this.getItemOrAdd(item.system.skill.alternativ.name,"skill");skill.length&&(updates["system.skill.alternativ.id"]=skill[0].id,updates["system.skill.alternativ.name"]=skill[0].name)}Object.keys(updates).length&&await item.update(updates)}}if(item)return[item]}let myItems=this.getSkillsByName(itemIdentifier);if(!myItems.length){const era=game.settings.get("CoC7","worldEra"),newItem=game.items.find((d=>{if(d.type===type&&d.name===itemIdentifier){const eras=newItem.flags?.CoC7?.cocidFlag?.eras;return!(eras&&Object.keys(eras).length>0&&!eras[era])}return!1}));if(newItem&&myItems.push(newItem),0===myItems.length)for(const pack of game.packs)if("Item"===pack.metadata?.type){await pack.getDocuments();const newItem=game.items.find((d=>{if(d.type===type&&d.name===itemIdentifier){const eras=newItem.flags?.CoC7?.cocidFlag?.eras;return!(eras&&Object.keys(eras).length>0&&!eras[era])}return!1}));newItem&&myItems.push(newItem)}if(1===myItems.length&&(await this.createEmbeddedDocuments("Item",myItems),myItems=this.getSkillsByName(itemIdentifier),1===myItems.length))if("skill"===myItems[0].type)ui.notifications.info(game.i18n.format("CoC7.InfoSkillAddedAtBase",{name:myItems[0].name,percent:myItems[0].value}));else if("weapon"===myItems[0].type){await myItems[0].reload();const updates={};if(""===myItems[0].system.skill.main.id&&""!==myItems[0].system.skill.main.name){const skill=await this.getItemOrAdd(myItems[0].system.skill.main.name,"skill");skill.length&&(updates["system.skill.main.id"]=skill[0].id,updates["system.skill.main.name"]=skill[0].name)}if(""===myItems[0].system.skill.alternativ.id&&""!==myItems[0].system.skill.alternativ.name){const skill=await this.getItemOrAdd(myItems[0].system.skill.alternativ.name,"skill");skill.length&&(updates["system.skill.alternativ.id"]=skill[0].id,updates["system.skill.alternativ.name"]=skill[0].name)}Object.keys(updates).length&&await myItems[0].update(updates)}}return myItems}async skillCheck(skillData,fastForward,options={}){const skillIdentifier=skillData.name?skillData.name:skillData;let skill=await this.getItemOrAdd(skillIdentifier,"skill");if(skill.length&&(options.name=skill[0].name),!skill.length){let item=null;if(skillData.pack){const pack=game.packs.get(skillData.pack);if("Item"!==pack.metadata.entity)return;item=await pack.getDocument(skillData.id)}else skillData.id&&(item=game.items.get(skillData.id));if(!item){const check=new CoC7Check;check._rawValue="?",await check.roll(),check.toMessage()}if(!item)return ui.notifications.warn(game.i18n.format("CoC7.NoSkill")+" "+game.i18n.format("CoC7.ErrorNotFoundForActor",{missing:skillIdentifier,actor:this.name}));let create=!1;if(await Dialog.confirm({title:`${game.i18n.localize("CoC7.AddWeapon")}`,content:`<p>${game.i18n.format("CoC7.AddWeapontHint",{weapon:skillData.name,actor:this.name})}</p>`,yes:()=>{create=!0}}),!0!==create)return;if(await this.createEmbeddedDocuments("Item",[foundry.utils.duplicate(item)]),skill=this.getSkillsByName(item.name),!skill.length)return;if(game.user.isGM){const skillValue=await SkillValueDialog.create(skill[0].name,skill[0].base),value=Number(skillValue.get("base-value"));await skill[0].updateValue(value)}}const check=new CoC7Check;if(void 0!==options.modifier&&(check.diceModifier=Number(options.modifier)),void 0!==options.difficulty&&(check.difficulty=CoC7Utilities.convertDifficulty(options.difficulty)),!fastForward&&(void 0===options.difficulty||void 0===options.modifier)){const usage=await RollDialog.create(options);usage&&(check.diceModifier=Number(usage.get("bonusDice")),check.difficulty=Number(usage.get("difficulty")),check.flatDiceModifier=Number(usage.get("flatDiceModifier")),check.flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}check.actor=this.tokenKey,check.skill=skill[0].id,"false"===options.blind?check.isBlind=!1:check.isBlind=!!options.blind,"false"===options.pushing?check.pushing=!1:check.pushing=!!options.pushing,await check.roll(),check.toMessage(check.pushing)}async weaponCheck(weaponData,fastForward=!1){let weapon;if(void 0!==weaponData.uuid&&(weapon=await fromUuid(weaponData.uuid)),void 0!==weaponData.id&&(weapon=this.items.get(weaponData.id)),!weapon){let weapons=this.getItemsFromName(weaponData.name);if(0===weapons.length){if(!game.user.isGM)return void ui.notifications.warn(game.i18n.format("CoC7.ErrorActorHasNoWeaponNamed",{actorName:this.name,weaponName:weaponData.name}));{let item=null;const pack=weaponData.pack?game.packs.get(weaponData.pack):null;if(pack){if("Item"!==pack.metadata.entity)return;item=await pack.getDocument(weaponData.id)}else weaponData.id&&(item=game.items.get(weaponData.id));if(!item)return ui.notifications.warn(game.i18n.localize("CoC7.WarnMacroNoItemFound"));let create=!1;await Dialog.confirm({title:`${game.i18n.localize("CoC7.AddWeapon")}`,content:`<p>${game.i18n.format("CoC7.AddWeapontHint",{weapon:weaponData.name,actor:this.name})}</p>`,yes:()=>{create=!0}});const actor=void 0!==this.parent?.actor?this.parent.actor:this;if(!0!==create)return;if(await actor.createEmbeddedDocuments("Item",[item.toJSON()]),weapons=actor.getItemsFromName(item.name),!weapons.length)return;await weapons[0].reload()}}else weapons.length>1&&ui.notifications.warn(game.i18n.format("CoC7.ErrorActorHasTooManyWeaponsNamed",{actorName:this.name,weaponName:weaponData.name}));weapon=weapons[0]}if(!weapon.system.properties.rngd){game.user.targets.size>1&&ui.notifications.warn(game.i18n.localize("CoC7.WarnTooManyTarget"));new CoC7MeleeInitiator(this.tokenKey,weaponData.uuid||weapon.id,fastForward).createChatCard()}if(weapon.system.properties.rngd){new CoC7RangeInitiator(this.tokenKey,weaponData.uuid||weapon.id,fastForward).createChatCard()}}async rollInitiative(hasGun=!1){if("optional"===game.settings.get("CoC7","initiativeRule")){const roll=new CoC7Check(this.actorKey);return roll.denyPush=!0,roll.denyLuck=!0,roll.denyBlindTampering=!0,roll.hideDice=!1===game.settings.get("CoC7","displayInitDices"),roll.flavor="Initiative roll",await roll.rollCharacteristic("dex",hasGun?1:0),roll.toMessage(),roll.successLevel+this.system.characteristics.dex.value/100}return hasGun?this.system.characteristics.dex.value+50:this.system.characteristics.dex.value}getActorFlag(flagName){return this.system.flags?!!this.system.flags[flagName]&&this.system.flags[flagName]:(this.system.flags={},this.system.flags.locked=!0,this.update({"system.flags":{}}),!1)}async setActorFlag(flagName){await this.update({[`system.flags.${flagName}`]:!0})}async unsetActorFlag(flagName){await this.update({[`system.flags.${flagName}`]:!1})}getWeaponSkills(itemId){let weapon=fromUuidSync(itemId);if(weapon?void 0===weapon.system&&(weapon=game.packs.get(weapon.pack).get(weapon._id)):weapon=this.items.get(itemId),"weapon"!==weapon.type)return null;const skills=[];return weapon.system.skill.main.id&&skills.push(this.items.get(weapon.system.skill.main.id)),weapon.usesAlternativeSkill&&weapon.system.skill.alternativ.id&&skills.push(this.items.get(weapon.system.skill.alternativ.id)),skills}find(name){if(!name)return;const item=this.items.get(name);if(item)return{type:"item",value:item};const matches=/\(([^)]+)\)/.exec(name);let shortName=null;matches&&matches.length&&(shortName=matches[1]);const skill=this.skills.filter((s=>!!s.name&&(s.name.toLocaleLowerCase().replace(/\s/g,"")===name.toLocaleLowerCase().replace(/\s/g,"")||s.name.toLocaleLowerCase().replace(/\s/g,"")===name.toLocaleLowerCase().replace(/\s/g,"")||s.name.toLocaleLowerCase().replace(/\s/g,"")===shortName?.toLocaleLowerCase().replace(/\s/g,""))));if(skill.length)return{type:"item",value:skill[0]};const charKey=["str","con","siz","dex","app","int","pow","edu"];for(let i=0;i<charKey.length;i++){const char=this.getCharacteristic(charKey[i]);if(char){if(char.name=char.label,char.key?.toLocaleLowerCase()===name.toLowerCase()||char.key?.toLocaleLowerCase()===shortName?.toLowerCase())return{type:"characteristic",value:char};if(char.shortName?.toLocaleLowerCase()===name.toLowerCase()||char.shortName?.toLocaleLowerCase()===shortName?.toLowerCase())return{type:"characteristic",value:char};if(char.label?.toLocaleLowerCase()===name.toLowerCase()||char.label?.toLocaleLowerCase()===shortName?.toLowerCase())return{type:"characteristic",value:char}}}const attribKey=["lck","san"];for(let i=0;i<attribKey.length;i++){const attr=this.getAttribute(attribKey[i]);if(attr){if(attr.name=attr.label,attr.key?.toLocaleLowerCase()===name.toLowerCase()||attr.key?.toLocaleLowerCase()===shortName?.toLowerCase())return{type:"attribute",value:attr};if(attr.shortName?.toLocaleLowerCase()===name.toLowerCase()||attr.shortName?.toLocaleLowerCase()===shortName?.toLowerCase())return{type:"attribute",value:attr};if(attr.label?.toLocaleLowerCase()===name.toLowerCase()||attr.label?.toLocaleLowerCase()===shortName?.toLowerCase())return{type:"attribute",value:attr}}}}get pilotSkills(){return this.skills.filter((s=>s.system.properties?.special&&s.system.specialization?.toLocaleLowerCase()===game.i18n.localize("CoC7.PilotSpecializationName")?.toLocaleLowerCase()))}get driveSkills(){return this.skills.filter((s=>s.system.properties?.special&&s.system.specialization?.toLocaleLowerCase()===game.i18n.localize("CoC7.DriveSpecializationName")?.toLocaleLowerCase()))}get tokenUuid(){return this.sheet.token?this.sheet.token.uuid:null}get tokenKey(){return this.sheet.token?`${this.sheet.token.parent.id}.${this.sheet.token.id}`:this.id}get actorKey(){return this.prototypeToken.actorLink?this.id:this.tokenKey}static getActorFromKey(key){if(key.includes(".")){const[sceneId,tokenId]=key.split(".");if("TOKEN"===sceneId)return game.actors.tokens[tokenId];{const scene=game.scenes.get(sceneId);if(!scene)return null;const tokenData=scene.getEmbeddedDocument("Token",tokenId);if(!tokenData)return null;return new Token(tokenData).actor}}return game.actors.get(key)||null}get hasRollableCharacteristics(){for(const[,value]of Object.entries(this.system.characteristics))if(isNaN(Number(value.formula)))return!0;return!1}get hosRollableSkills(){for(const skill of this.skills)if(isNaN(skill.system?.value))return!0;return!1}async rollCharacteristicsValue(){const characteristics={};for(const[key,value]of Object.entries(this.system.characteristics))if(value.formula&&!value.formula.startsWith("@")){const r=new Roll(value.formula);await r.roll({async:!0}),r.total&&(characteristics[`system.characteristics.${key}.value`]=Math.floor(r.total))}await this.update(characteristics),await this.reportCharactedriticsValue()}async averageCharacteristicsValue(){const characteristics={};for(const[key,value]of Object.entries(this.system.characteristics))if(value.formula&&!value.formula.startsWith("@")){const average=new AverageRoll("("+value.formula+")")[foundry.utils.isNewerVersion(game.version,"12")?"evaluateSync":"evaluate"]({minimize:!0,maximize:!0}).total;characteristics[`system.characteristics.${key}.value`]=average}await this.update(characteristics),await this.reportCharactedriticsValue()}async reportCharactedriticsValue(){const characteristics={};for(const[key,value]of Object.entries(this.system.characteristics))if(value.formula&&value.formula.startsWith("@")){let charValue;try{charValue=new Roll(value.formula,this.parseCharacteristics())[foundry.utils.isNewerVersion(game.version,"12")?"evaluateSync":"evaluate"]({maximize:!0}).total}catch(err){charValue=null}charValue&&(characteristics[`system.characteristics.${key}.value`]=charValue)}await this.update(characteristics)}async setCharacteristic(name,value){const characteristic={},charValue=isNaN(parseInt(value))?null:parseInt(value);if(characteristic[name]=charValue,!charValue&&value.startsWith("@")){characteristic[name.replace(".value",".formula")]=value}await this.update(characteristic),await this.reportCharactedriticsValue()}async developementPhase(fastForward=!1){const failure=[],success=[],title=game.i18n.localize("CoC7.RollAll4Dev");let skillsRolled=0,message='<p class="chat-card">';for(const item of this.items)if("skill"===item.type&&item.developementFlag){skillsRolled++;const die=await new Die({faces:100}).evaluate({async:!0}),skillValue=item.value;let augment=null,skillMasteringMessage=null;if(die.total>skillValue||die.total>=95){const augmentDie=await new Die({faces:10}).evaluate({async:!0});if(success.push(item.id),skillValue<90&&skillValue+augmentDie.total>=90){const augmentSANDie=await new Die({faces:6,number:2}).evaluate({async:!0}),sanGained=augmentSANDie.total,sanGainedMessage=`Gained 2d6 (${augmentSANDie.values[0]} + ${augmentSANDie.values[1]} = ${sanGained}) SAN`;console.debug(sanGainedMessage),skillMasteringMessage=`<span class="upgrade-success">${game.i18n.format("CoC7.SanGained",{results:`${augmentSANDie.values[0]} + ${augmentSANDie.values[1]}`,sanGained,skill:item.name,skillValue:skillValue+augmentDie.total})}</span><br>`,await this.setSan(this.san+sanGained)}augment+=augmentDie.total,message+=`<span class="upgrade-success">${game.i18n.format("CoC7.DevSuccess",{item:item.name,die:die.total,score:item.value,augment:augmentDie.total})}</span><br>`,null!==skillMasteringMessage&&(message+=skillMasteringMessage),await item.increaseExperience(augment)}else message+=`<span class="upgrade-failed">${game.i18n.format("CoC7.DevFailure",{item:item.name,die:die.total,score:item.value})}</span><br>`,failure.push(item.id);await item.unflagForDevelopement()}const sanityLossEvents=[];let changed=!1;for(const sanityLossEvent of this.system.sanityLossEvents)sanityLossEvent.immunity?sanityLossEvents.push(sanityLossEvent):sanityLossEvent.totalLoss>1?(sanityLossEvent.totalLoss--,sanityLossEvents.push(sanityLossEvent),changed=!0):changed=!0;if(changed&&(skillsRolled&&(message+="<br>"),message+=`<span>${game.i18n.format("CoC7.ReduceSanityLimits")}</span>`,await this.update({"system.sanityLossEvents":sanityLossEvents})),!fastForward){message+="</p>";const speaker={actor:this};await chatHelper.createMessage(skillsRolled?title:"",message,{speaker}),this.onlyRunOncePerSession=!0}return{failure,success}}async developLuck(fastForward=!1){const currentLuck=this.system.attribs.lck.value;currentLuck||await this.update({"system.attribs.lck.value":0});const pulpRuleDevelopmentRollLuck=game.settings.get("CoC7","pulpRuleDevelopmentRollLuck"),upgradeRoll=(await new Roll("1D100").roll({async:!0})).total,higherThanCurrentLuck=upgradeRoll>currentLuck;let augmentRoll;pulpRuleDevelopmentRollLuck?augmentRoll=higherThanCurrentLuck?"2D10+10":"1D10+5":higherThanCurrentLuck&&(augmentRoll="1D10");const title=game.i18n.localize("CoC7.RollLuck4Dev");let message='<p class="chat-card">';if(pulpRuleDevelopmentRollLuck||higherThanCurrentLuck){const augmentValue=(await new Roll(augmentRoll).roll({async:!0})).total;await this.update({"system.attribs.lck.value":this.system.attribs.lck.value+augmentValue}),message+=`<span class="upgrade-success">${game.i18n.format("CoC7.LuckIncreased",{die:upgradeRoll,score:currentLuck,augment:augmentValue})}</span>`}else message+=`<span class="upgrade-failed">${game.i18n.format("CoC7.LuckNotIncreased",{die:upgradeRoll,score:currentLuck})}</span>`;if(!fastForward){message+="</p>";const speaker={actor:this};await chatHelper.createMessage(title,message,{speaker})}}async developSkill(skillId,fastForward=!1){const skill=this.items.get(skillId);if(!skill)return;let title="",message="";const upgradeRoll=new Roll("1D100");if(await upgradeRoll.roll({async:!0}),fastForward||await CoC7Dice.showRollDice3d(upgradeRoll),upgradeRoll.total>skill.value||upgradeRoll.total>=95){const augmentRoll=new Roll("1D10");await augmentRoll.roll({async:!0}),fastForward||await CoC7Dice.showRollDice3d(augmentRoll),message=game.i18n.format("CoC7.DevSuccessDetails",{item:skill.name,augment:augmentRoll.total}),title=game.i18n.format("CoC7.DevRollTitle",{item:skill.name,die:upgradeRoll.total,score:skill.value}),await skill.increaseExperience(augmentRoll.total)}else title=game.i18n.format("CoC7.DevRollTitle",{item:skill.name,die:upgradeRoll.total,score:skill.value}),message=game.i18n.format("CoC7.DevFailureDetails",{item:skill.name});const speaker={actor:this._id};await chatHelper.createMessage(title,message,{speaker}),await skill.unflagForDevelopement()}hasConditionStatus(conditionName){const conditionValue=this.system.conditions?.[conditionName]?.value;return"boolean"==typeof conditionValue&&conditionValue}hasConditionValue(conditionName,field){if(this.hasConditionStatus(conditionName)){if(conditionName===COC7.status.tempoInsane&&"durationText"===field){const realTime=this.hasConditionValue(conditionName,"realTime"),duration=this.hasConditionValue(conditionName,"duration");if(void 0!==duration){if(!0===realTime)return duration+" "+game.i18n.localize("CoC7.rounds");if(!1===realTime)return duration+" "+game.i18n.localize("CoC7.hours")}return""}return this.system.conditions?.[conditionName]?.[field]}}async toggleCondition(conditionName){this.hasConditionStatus(conditionName)?await this.unsetCondition(conditionName):await this.setCondition(conditionName)}async setCondition(conditionName,{forceValue=!1,justThis=!1,realTime=null,duration=null}={}){if(!forceValue&&game.settings.get("CoC7","enableStatusIcons")){const effects=this.effects.filter((effect=>CoC7ActiveEffect.filterActiveEffects(effect,conditionName))).map((effect=>effect.id)),custom={};switch(conditionName){case COC7.status.dead:custom.flags={core:{overlay:!0}};break;case COC7.status.tempoInsane:custom.flags={CoC7:{realTime:void 0}},custom.duration={rounds:void 0,seconds:void 0},!0!==realTime&&!1!==realTime||(custom.flags.CoC7.realTime=realTime,custom.flags={CoC7:{realTime}},null!=duration&&(realTime?custom.duration.rounds=duration:custom.duration.seconds=3600*duration))}if(0===effects.length){const effect=CONFIG.statusEffects.filter((effect=>effect.id===conditionName));if(1===effect.length){const source={icon:effect[0].icon,disabled:!1};foundry.utils.isNewerVersion(game.version,"11")?(source.name=game.i18n.localize(effect[0].name),source.statuses=[effect[0].id]):(source.label=game.i18n.localize(effect[0].label),source.flags={core:{statusId:effect[0].id}});const effectData=foundry.utils.mergeObject(source,custom);await super.createEmbeddedDocuments("ActiveEffect",[effectData])}else forceValue=!0}else custom._id=effects[0],await super.updateEmbeddedDocuments("ActiveEffect",[custom]),forceValue=!0}if(forceValue||!game.settings.get("CoC7","enableStatusIcons")){switch(conditionName){case COC7.status.indefInsane:case COC7.status.unconscious:case COC7.status.criticalWounds:case COC7.status.dying:case COC7.status.prone:case COC7.status.dead:await this.update({[`system.conditions.${conditionName}.value`]:!0});break;case COC7.status.tempoInsane:{const fields={};fields[`system.conditions.${conditionName}.value`]=!0,!0!==realTime&&!1!==realTime||(fields[`system.conditions.${conditionName}.realTime`]=realTime,null!=duration&&(fields[`system.conditions.${conditionName}.duration`]=duration)),Object.prototype.hasOwnProperty.call(fields,`system.conditions.${conditionName}.realTime`)||(fields[`system.conditions.${conditionName}.-=realTime`]=null),Object.prototype.hasOwnProperty.call(fields,`system.conditions.${conditionName}.duration`)||(fields[`system.conditions.${conditionName}.-=duration`]=null),await this.update(fields)}}if(!justThis)switch(conditionName){case COC7.status.criticalWounds:if(await this.setCondition(COC7.status.prone),!this.hasConditionStatus(COC7.status.unconscious)&&!this.hasConditionStatus(COC7.status.dead)){new CoC7ConCheck(this.isToken?this.tokenKey:this.id).toMessage()}break;case COC7.status.dead:await this.unsetCondition(COC7.status.criticalWounds),await this.unsetCondition(COC7.status.dying),await this.unsetCondition(COC7.status.unconscious)}}}async unsetCondition(conditionName,{forceValue=!1}={}){if(!forceValue&&game.settings.get("CoC7","enableStatusIcons")){const effects=this.effects.filter((effect=>CoC7ActiveEffect.filterActiveEffects(effect,conditionName))).map((effect=>effect.id));effects.length>0?await super.deleteEmbeddedDocuments("ActiveEffect",effects):forceValue=!0}if(forceValue||!game.settings.get("CoC7","enableStatusIcons"))switch(conditionName){case COC7.status.tempoInsane:case COC7.status.indefInsane:case COC7.status.unconscious:case COC7.status.criticalWounds:case COC7.status.dying:case COC7.status.prone:case COC7.status.dead:await this.update({[`system.conditions.${conditionName}.-=value`]:null}),await this.update({[`system.conditions.${conditionName}.value`]:!1})}}async resetCounter(counter){await this.update({[counter]:0})}async resetDailySanity(){await this.update({"system.attribs.san.dailyLimit":Math.floor(this.system.attribs.san.value/5),"system.attribs.san.dailyLoss":0})}get fightingSkills(){const skillList=[];for(const value of this.items)"skill"===value.type&&value.system.properties.fighting&&skillList.push(value);return skillList.sort(CoC7Utilities.sortByNameKey),skillList}get closeCombatWeapons(){const weaponList=[];for(const value of this.items)if("weapon"===value.type&&!value.system.properties.rngd){const skill=this.items.get(value.system.skill.main.id);value.system.skill.main.value=skill?skill.value:0,weaponList.push(value)}return weaponList.sort(CoC7Utilities.sortByNameKey),weaponList}get firearmSkills(){const skillList=[];for(const value of this.items)"skill"===value.type&&(value.system.properties.firearm||value.system.properties.ranged)&&skillList.push(value);return skillList.sort(CoC7Utilities.sortByNameKey),skillList}get user(){return game.users.find((user=>!(!user.character||user.character.id!==this.id)))}get dodgeSkill(){const skill=this.getFirstItemByCoCID("i.skill.dodge");if(skill)return skill;const skillList=this.getSkillsByName(game.i18n.localize("CoC7.CoCIDFlag.keys.i.skill.dodge"));return 0!==skillList.length?skillList[0]:null}get creditRatingSkill(){const skill=this.getFirstItemByCoCID("i.skill.credit-rating");if(skill)return skill;const skillList=this.getSkillsByName(game.i18n.localize("CoC7.CoCIDFlag.keys.i.skill.credit-rating"));return 0!==skillList.length?skillList[0]:null}get cthulhuMythosSkill(){const skill=this.getFirstItemByCoCID("i.skill.cthulhu-mythos");if(skill)return skill;const skillList=this.getSkillsByName(game.i18n.localize("CoC7.CoCIDFlag.keys.i.skill.cthulhu-mythos"));return 0!==skillList.length?skillList[0]:null}get cthulhuMythos(){const CM=this.cthulhuMythosSkill;if(CM){const value=CM.value;return value||parseInt(CM.system.value)}return 0}get mythosHardened(){return this.getFlag("CoC7","mythosHardened")||!1}async setMythosHardened(){await this.setFlag("CoC7","mythosHardened",!0)}get mythosInsanityExperienced(){return this.getFlag("CoC7","mythosInsanityExperienced")||!1}async experienceFirstMythosInsanity(){await this.setFlag("CoC7","mythosInsanityExperienced",!0)}get creditRating(){const CR=this.creditRatingSkill;if(CR){const value=CR.value;return value||parseInt(CR.system.value)}return 0}static monetaryFormat(format,symbol,value){switch(format){case COC7.monetaryFormatKeys.lsd:return Math.floor(value/240)+"/"+Math.floor(value/12)%20+"/"+value%12;case COC7.monetaryFormatKeys.roman:return Math.floor(value/400)+"/"+Math.floor(value/16)%25+"/"+Math.floor(value/8)%2+"/"+Math.floor(value/4)%2+"/"+value%4;case COC7.monetaryFormatKeys.decimalLeft:return symbol+Number(value).toLocaleString(void 0,{minimumFractionDigits:2}).replace(/\.00$/,"");case COC7.monetaryFormatKeys.decimalRight:return Number(value).toLocaleString(void 0,{minimumFractionDigits:2}).replace(/\.00$/,"")+" "+symbol;case COC7.monetaryFormatKeys.integerLeft:return symbol+Number(value).toLocaleString();case COC7.monetaryFormatKeys.integerRight:return Number(value).toLocaleString()+" "+symbol}return"0"}static monetaryValue(format,values,CR,type,value){CR=CR||0;const row=values.find((r=>("object"==typeof r.min||r.min<=CR)&&("object"==typeof r.max||r.max>=CR)));if(void 0!==row&&void 0!==row[type]&&void 0!==row[value])switch(format){case COC7.monetaryFormatKeys.lsd:switch(row[type]){case COC7.monetaryTypeKeys.multiplier:return 240*CR*row[value];case COC7.monetaryTypeKeys.value:return 240*row[value];case COC7.monetaryTypeKeys.s:return 12*row[value];case COC7.monetaryTypeKeys.d:return 1*row[value]}break;case COC7.monetaryFormatKeys.roman:switch(row[type]){case COC7.monetaryTypeKeys.multiplier:return 400*CR*row[value];case COC7.monetaryTypeKeys.value:return 400*row[value];case COC7.monetaryTypeKeys.denarii:return 16*row[value];case COC7.monetaryTypeKeys.quinarii:return 8*row[value];case COC7.monetaryTypeKeys.sestertii:return 4*row[value];case COC7.monetaryTypeKeys.asses:return 1*row[value]}break;default:switch(row[type]){case COC7.monetaryTypeKeys.multiplier:return CR*row[value];case COC7.monetaryTypeKeys.value:return 1*row[value]}}return 0}get spendingLevel(){return CoCActor.monetaryValue(this.system.monetary.format,this.system.monetary.values,this.creditRating,"spendingType","spendingValue")}get cash(){return CoCActor.monetaryValue(this.system.monetary.format,this.system.monetary.values,this.creditRating,"cashType","cashValue")}get assets(){return CoCActor.monetaryValue(this.system.monetary.format,this.system.monetary.values,this.creditRating,"assetsType","assetsValue")}get skills(){const skillList=[];for(const value of this.items)"skill"===value.type&&skillList.push(value);return skillList.sort(CoC7Utilities.sortByNameKey),skillList}get owners(){return game.users.filter((u=>this.testUserPermission(u,"OWNER")&&!u.isGM))}get player(){return this.owners.filter((u=>u.character?.id===this.id))}get characterUser(){return game.users.contents.filter((u=>u.character?.id===this.id))[0]||null}async setHp(value){value<0&&(value=0),value>this.system.attribs.hp.max&&(value=this.system.attribs.hp.max);const healthBefore=this.hp;let damageTaken;return isNaN(healthBefore)||value>=healthBefore?await this._setHp(value):(damageTaken=healthBefore-value,await this.dealDamage(damageTaken,{ignoreArmor:!0})),value}async dealDamage(amount,options={}){const armorData=options.armor?options.armor:this.system.attribs.armor,grossDamage=parseInt(amount);let armorValue=0;options.ignoreArmor||null===armorData||(CoC7Utilities.isFormula(armorData)?armorValue=(await new Roll(armorData).roll({async:!0})).total:isNaN(Number(armorData))?isNaN(Number(armorData?.value))?ui.notifications.warn(game.i18n.format("CoC7.ErrorUnableToParseArmorFormula",{value:armorData})):armorValue=Number(armorData.value):armorValue=Number(armorData));const netDamage=grossDamage-armorValue;if(netDamage<=0)return 0;if(await this._setHp(this.hp-netDamage),netDamage>=this.system.attribs.hp.max)await this.setCondition(COC7.status.dead);else if(game.settings.get("CoC7","pulpRuleIgnoreMajorWounds")){if(0===this.hp)netDamage>=Math.ceil(this.system.attribs.hp.max/2)?this.setCondition(COC7.status.dying):this.setCondition(COC7.status.unconscious);else if(netDamage>=Math.ceil(this.system.attribs.hp.max/2)){new CoC7ConCheck(this.isToken?this.tokenKey:this.id).toMessage()}}else{let hasMajorWound=!1;netDamage>=Math.ceil(this.system.attribs.hp.max/2)?(await this.setCondition(COC7.status.criticalWounds),hasMajorWound=!0):hasMajorWound=this.hasConditionStatus(COC7.status.criticalWounds),0===this.hp&&(await this.setCondition(COC7.status.unconscious),hasMajorWound&&this.setCondition(COC7.status.dying))}return netDamage}get majorWound(){return this.hasConditionStatus(COC7.status.criticalWounds)}get dying(){return this.hasConditionStatus(COC7.status.dying)}get unconscious(){return this.hasConditionStatus(COC7.status.unconscious)}get dead(){return this.hasConditionStatus(COC7.status.dead)}get prone(){return this.hasConditionStatus(COC7.status.prone)}}class CoC7Check{constructor(actor=null,skill=null,item=null,diceMod=0,difficulty=null,flatThresholdModifier=0,flatDiceModifier=0){if(this.actor=actor,this.skill=skill,this.item=item,this.difficulty=difficulty,this.diceModifier=diceMod,this.rawValue=0,this.successLevel=null,this.referenceMessageId=null,this.pushing=!1,this.flatDiceModifier=flatDiceModifier,this.flatThresholdModifier=flatThresholdModifier,null===difficulty){const isUnknown="unknown"===game.settings.get("CoC7","defaultCheckDifficulty");this.difficulty=isUnknown?CoC7Check.difficultyLevel.unknown:CoC7Check.difficultyLevel.regular}}static get cardType(){return"rollCard"}static get difficultyLevel(){return{unknown:-1,regular:1,hard:2,extreme:3,critical:4,impossible:9}}static get successLevel(){return{fumble:-99,failure:0,regular:1,hard:2,extreme:3,critical:4}}static get type(){return{characteristic:"characteristic",attribute:"attribute",skill:"item",item:"item",value:"value"}}static difficultyString(difficultyLevel){switch(isNaN(Number(difficultyLevel))?difficultyLevel:Number(difficultyLevel)){case"?":return game.i18n.localize("CoC7.UnknownDifficulty");case"+":return game.i18n.localize("CoC7.HardDifficulty");case"++":return game.i18n.localize("CoC7.ExtremeDifficulty");case"+++":return game.i18n.localize("CoC7.CriticalDifficulty");case 0:return game.i18n.localize("CoC7.RegularDifficulty");case CoC7Check.difficultyLevel.unknown:return game.i18n.localize("CoC7.UnknownDifficulty");case CoC7Check.difficultyLevel.regular:return game.i18n.localize("CoC7.RegularDifficulty");case CoC7Check.difficultyLevel.hard:return game.i18n.localize("CoC7.HardDifficulty");case CoC7Check.difficultyLevel.extreme:return game.i18n.localize("CoC7.ExtremeDifficulty");case CoC7Check.difficultyLevel.critical:return game.i18n.localize("CoC7.CriticalDifficulty");default:return null}}get rawValue(){if(this._rawValue||(this.characteristic&&(this.rawValue=this.actor.system.characteristics[this.characteristic].value),this.skill&&(this.rawValue=this.skill.value),this.attribute&&(this.rawValue=this.actor.system.attribs[this.attribute].value)),this._rawValue)return this.flatThresholdModifier&&game.settings.get("CoC7","allowFlatThresholdModifier")?this._rawValue+this.flatThresholdModifier<1?1:this._rawValue+this.flatThresholdModifier:this._rawValue}set rawValue(x){this._rawValue=x}set uuid(x){this._uuid=x}get uuid(){return this._uuid||(this._uuid=foundry.utils.randomID(16)),this._uuid}get hasCard(){return ui.chat.collection.filter((message=>this.uuid===message.getFlag("CoC7","uuid")&&CoC7Check.cardType===message.getFlag("CoC7","type"))).length>0}get rawValueString(){return 0===this._rawValue?"0":this._rawValue?this.flatThresholdModifier&&game.settings.get("CoC7","allowFlatThresholdModifier")?this.flatThresholdModifier<0?this._rawValue.toString()+this.flatThresholdModifier.toString():this._rawValue.toString()+"+"+this.flatThresholdModifier.toString():this._rawValue.toString():void 0}get criticalThreshold(){return 1}get regularThreshold(){return this.rawValue?this.rawValue>=100?99:parseInt(this.rawValue):null}get hardThreshold(){return this.rawValue?Math.floor(this.rawValue/2):null}get extremeThreshold(){return this.rawValue?Math.floor(this.rawValue/5):null}get fumbleThreshold(){if(this.rawValue){if(this.difficulty){if(this.difficulty>=CoC7Check.difficultyLevel.extreme)return this.extremeThreshold<50?96:100;if(this.difficulty>=CoC7Check.difficultyLevel.hard)return this.hardThreshold<50?96:100}return this.rawValue<50?96:100}return null}get succesThreshold(){if(void 0!==this.difficulty)switch(this.difficulty){case CoC7Check.difficultyLevel.extreme:return this.extremeThreshold;case CoC7Check.difficultyLevel.hard:return this.hardThreshold;case CoC7Check.difficultyLevel.regular:return this.regularThreshold;case CoC7Check.difficultyLevel.critical:return this.criticalThreshold;case CoC7Check.difficultyLevel.unknown:return-1;default:return this.rawValue}return null}get difficultyString(){if(void 0!==this.difficulty)switch(this.difficulty){case CoC7Check.difficultyLevel.extreme:return game.i18n.format("CoC7.ExtremeDifficulty");case CoC7Check.difficultyLevel.hard:return game.i18n.format("CoC7.HardDifficulty");case CoC7Check.difficultyLevel.regular:return game.i18n.format("CoC7.RegularDifficulty");case CoC7Check.difficultyLevel.critical:return game.i18n.format("CoC7.CriticalDifficulty");case CoC7Check.difficultyLevel.unknown:return game.i18n.format("CoC7.UnknownDifficulty");default:return""}return""}get modifiedResult(){if(!this.standby){if(void 0!==this._modifiedResult)return this._modifiedResult;if(this.flatDiceModifier){const modified=this.dices.total+this.flatDiceModifier;return modified<1?1:modified>100?100:modified}return this.dices.total}}set modifiedResult(x){this._modifiedResult=x}get flatDiceModifierString(){return this.flatDiceModifier?this.flatDiceModifier>0?`+${this.flatDiceModifier}`:this.flatDiceModifier.toString():null}get isFumble(){if(!this.standby&&!this.isSimpleRoll)return this.modifiedResult>=this.fumbleThreshold}get isCritical(){if(!this.standby)return 1===this.modifiedResult}get isExtremeSuccess(){if(!this.standby)return this.successLevel>=CoC7Check.successLevel.extreme}get passed(){if(!this.standby&&!this.isSimpleRoll)return this.luckSpent?this.difficulty<=this.successLevel:this.succesThreshold>=this.modifiedResult||this.isCritical}get failed(){if(!this.standby&&!this.isSimpleRoll)return!this.passed}get isSimpleRoll(){return void 0===this.rawValue}get hasBonus(){return!!(this.diceModifier&&this.diceModifier>0)}get hasPenalty(){return!!(this.diceModifier&&this.diceModifier<0)}get hasModifier(){return!(!this.diceModifier||0===this.diceModifier)}get diceModifier(){return this._diceModifier?this._diceModifier:null}set diceModifier(x){this._diceModifier=parseInt(x)}get name(){if(this.actor){if(this.skill)return this.skill.shortName;if(this.item)return this.item.name;if(this.characteristic)return CoC7Utilities.getCharacteristicNames(this.characteristic)?.label;if(this.attribute){if("lck"===this.attribute)return game.i18n.localize("CoC7.Luck");if("san"===this.attribute)return game.i18n.localize("CoC7.Sanity")}}return null}get shortName(){if(this.actor){if(this.skill)return this.skill.shortName;if(this.item)return this.item.name;if(this.characteristic)return CoC7Utilities.getCharacteristicNames(this.characteristic)?.short;if(this.attribute){if("lck"===this.attribute)return game.i18n.localize("CoC7.Luck");if("san"===this.attribute)return game.i18n.localize("CoC7.SAN")}}return null}get fullName(){const difficulty=this._difficulty!==CoC7Check.difficultyLevel.regular&&CoC7Check.difficultyString(this._difficulty),modifier=this._diceModifier>0?`+${this._diceModifier}`:this._diceModifier.toString();return game.i18n.format(`CoC7.LinkCheck${difficulty?"Diff":""}${this._diceModifier?"Modif":""}`,{difficulty,modifier,name:this.name})}get rolled(){return!!this.dice}static getFromCard(card){const rollResult=card.classList.contains("roll-result")?card:card.querySelector(".roll-result"),check=new CoC7Check;CoC7Roll.getFromElement(rollResult,check);const message=card.closest(".message");return check.messageId=message?message.dataset.messageId:null,check}static async push(card,publish=!0){const oldCheck=CoC7Check.getFromCard(card),actorId=card.dataset.tokenId?card.dataset.tokenId:card.dataset.actorId,skillId=card.dataset.skillId,charac=card.dataset.characteristic,itemId=card.dataset.itemId,diceMod=card.dataset.diceMod,difficulty=card.dataset.difficulty;let pushedRoll;if(skillId)pushedRoll=new CoC7Check(actorId,skillId,itemId,diceMod,difficulty);else{if(!charac)return;pushedRoll=new CoC7Check,pushedRoll.diceModifier=diceMod,pushedRoll.difficulty=difficulty,pushedRoll.actor=actorId,pushedRoll.characteristic=charac}oldCheck.uuid&&(pushedRoll.context=oldCheck.context,pushedRoll.uuid=oldCheck.uuid),oldCheck.parent&&(pushedRoll.parent=oldCheck.parent),pushedRoll.pushing=!0,await pushedRoll.roll(),publish&&pushedRoll.toMessage(!0,card)}get token(){return this.actor?chatHelper.getTokenFromKey(this.actorKey):null}set actor(x){if(this.actorKey=x,null!=x){if(x instanceof Actor)return this._actor=x,this._actor.alias=this.actor.name,void(x.token&&x.token.scene&&x.token.scene.id?this.actorKey=`${x.token.scene.id}.${x.token.id}`:this.actorKey=x.id);if(x.includes(".")){const[sceneId,tokenId]=x.split(".");if("TOKEN"===sceneId)this._actor=game.actors.tokens[tokenId],this._actor.alias=this._actor.name;else{const scene=game.scenes.get(sceneId);if(!scene)return;const tokenData=scene.getEmbeddedDocument("Token",tokenId);if(!tokenData)return;const token=new Token(tokenData);this._actor=token.actor,this._actor.alias=token.name}}else this._actor=game.actors.get(x),this.actor.alias=this.actor.name}else this._actor=x}get successLevelIcons(){if(this.unknownDifficulty)return null;if(this.isSimpleRoll&&0!==this._rawValue)return null;if(this.successLevel>=this.difficulty){const icons=[];for(let index=0;index<this.successLevel-this.difficulty+1;index++)icons.push(this.isCritical?"medal":"star");const successHint=game.i18n.format("CoC7.SuccesLevelHint",{value:this.successLevel-this.difficulty+1});return{success:!0,cssClass:this.isCritical?"critical":"success",hint:successHint,icons}}{const icons=[],successLevel=this.isFumble?-1:this.successLevel;for(let index=0;index<this.difficulty-successLevel;index++)icons.push(this.isFumble?"skull":"spider");const failureHint=game.i18n.format("CoC7.FailureLevelHint",{value:this.difficulty-successLevel});return{success:!1,cssClass:this.isFumble?"fumble":"failure",hint:failureHint,icons}}}get isBlind(){return void 0===this._isBlind&&(this._isBlind="blindroll"===this.rollMode),this._isBlind}set isBlind(x){this._isBlind=x}get unknownDifficulty(){return!(this.gmDifficultyCritical||this.gmDifficultyExtreme||this.gmDifficultyHard||this.gmDifficultyRegular)&&CoC7Check.difficultyLevel.unknown===this.difficulty}get rollMode(){return this._rollMode||(this._rollMode=game.settings.get("core","rollMode")),this._rollMode}set rollMode(x){!1===x&&(this._rollMode=game.settings.get("core","rollMode")),this._rollMode=x}set skill(x){this._skill=this._getItemFromId(x),this.skillId=x}set item(x){this._item=this._getItemFromId(x),"weapon"===this._item?.type?this.itemId=x:(this._item=void 0,this.itemId=void 0)}_getItemFromId(x){return null==x?null:x instanceof Item?x:this._actor?this._actor.items.get(x):game.items.get(x)}get actor(){if(this._actor&&this._actor?.id){if("Object"===this._actor.constructor.name){const actor=new CoCActor(this._actor);this._actor=actor}}else if(this.actorKey&&(this._actor=chatHelper.getActorFromKey(this.actorKey)),this.actorId&&(this._actor=chatHelper.getActorFromKey(this.actorId)),!this._actor)return{isDummy:!0,name:this.actorName?this.actorName:void 0,id:void 0,img:"systems/CoC7/assets/icons/question-circle-regular.svg",portrait:"systems/CoC7/assets/icons/question-circle-regular.svg"};return this._actor}get skill(){return!this._skill&&this.skillId&&(this._skill=this.actor?.items.get(this.skillId)),!this._skill&&this.item&&this.item.system.skill&&(this.item.system.skill.main.id&&!this.weaponAltSkill?this._skill=this._actor.items.get(this.item.system.skill.main.id):this.item.system.skill.alternativ.id&&this.weaponAltSkill&&(this._skill=this._actor.items.get(this.item.system.skill.alternativ.id))),this._skill}get item(){return!this._item&&this.itemId&&this.actor&&(this._item=this.actor.items.get(this.itemId)),this._item}get displayResultType(){return game.settings.get("CoC7","displayResultType")}get displayCheckSuccessLevel(){return game.settings.get("CoC7","displayCheckSuccessLevel")}get displayBothSuccessLevel(){return this.displayResultType&&this.displayCheckSuccessLevel}get dontDisplaySuccessLevel(){return!this.displayResultType&&!this.displayCheckSuccessLevel}get image(){return this.skill?this.skill.img:this.item?this.item.img:void 0}get link(){return this.getLinkElement().outerHTML}get displayActorOnCard(){return game.settings.get("CoC7","displayActorOnCard")}getLinkElement(classes=null){const data={cls:["coc7-link","coc7-roll"].concat(classes),dataset:{check:"check"},icon:this.image?`<div style="background-image: url(${this.image})"></div>`:'<i class="fas fa-dice"></i>',blind:this.isBlind},difficulty=CoC7Check.difficultyString(this._difficulty),title=game.i18n.format(`CoC7.LinkCheck${this._difficulty?"Diff":""}${this._diceModifier?"Modif":""}`,{difficulty,modifier:this._diceModifier,name:this.name}),a=document.createElement("a");return a.title=title,a.classList.add(...data.cls),a.innerHTML=`${data.blind?'<i class="fas fa-eye-slash"></i>':""}${data.icon}${this.name}`,a}async roll(diceMod=null,difficulty=null,options={}){diceMod&&(this.diceModifier=diceMod),difficulty&&(this.difficulty=difficulty),this.standby||await this._perform(options)}static createFromActorRollData(rollData){const roll={};switch(rollData.difficulty&&(roll.difficulty=rollData.difficulty),rollData.diceModifier&&(roll.diceModifier=rollData.diceModifier),!0===rollData.denyPush&&(roll.denyPush=!0),rollData.flatDiceModifier&&(roll.flatDiceModifier=rollData.flatDiceModifier),rollData.flatThresholdModifier&&(roll.flatThresholdModifier=rollData.flatThresholdModifier),rollData.actor?.actorKey?roll.actorKey=rollData.actor.actorKey:rollData.actor?.name&&(roll.actorName=rollData.actor.name),rollData.type){case CoC7Check.type.characteristic:roll.characteristic=rollData.value?.key;break;case CoC7Check.type.attribute:roll.attribute=rollData.value?.key;break;case CoC7Check.type.item:roll.actorKey=rollData.value.actor.actorKey,"skill"===rollData.value?.type?roll.skill=rollData.value.id:roll.item=rollData.value.id;break;case CoC7Check.type.skill:roll.actorKey=rollData.value.actor.actorKey,roll.skill=rollData.value.id;break;case CoC7Check.type.value:roll.displayName=rollData.value.name,roll.rawValue=rollData.value.threshold}return CoC7Check.create(roll)}static create({difficulty=CoC7Check.difficultyLevel.regular,diceModifier=null,actorKey=null,characteristic=null,attribute=null,rawValue=0,item=null,skill=null,flatDiceModifier=0,flatThresholdModifier=0,displayName=null,actorName=null,denyPush}={}){const check=new CoC7Check;return check.difficulty=difficulty,!0===denyPush&&(check.denyPush=!0),diceModifier&&(check.diceModifier=diceModifier),flatDiceModifier&&(check.flatDiceModifier=flatDiceModifier),flatThresholdModifier&&(check.flatThresholdModifier=flatThresholdModifier),displayName&&(check.displayName=displayName),actorKey&&(check.actor=actorKey),actorName&&(check.actorName=actorName),isNaN(Number(rawValue))||(check.rawValue=Number(rawValue)),check.actor&&!check.actor.isDummy&&(skill?check.skill=skill:characteristic?check.characteristic=characteristic:attribute?check.attribute=attribute:item&&(check.item=item)),check}async rollCharacteristic(char,diceMod=null,difficulty=null){diceMod&&(this.diceModifier=diceMod),difficulty&&(this.difficulty=difficulty),this.characteristic=char,this.standby||await this._perform()}async rollAttribute(attrib,diceMod=null,difficulty=null){diceMod&&(this.diceModifier=diceMod),difficulty&&(this.difficulty=difficulty),this.attribute=attrib,this.standby||await this._perform()}async rollValue(val,diceMod=null,difficulty=null){diceMod&&(this.diceModifier=diceMod),difficulty&&(this.difficulty=difficulty),this.rawValue=val,this.standby||await this._perform()}get rolledSuccessLevel(){return this.successLevel}async _perform(options={}){this.dice=options.roll||await CoC7Dice.roll(this.diceModifier,this.rollMode,this.isBlind),options.silent||game.modules.get("dice-so-nice")?.active||AudioHelper.play({src:CONFIG.sounds.dice},!0),options.forceDSN&&await CoC7Dice.showRollDice3d(this.dice.roll),this.dices={tens:[],unit:{value:this.dice.unit.total},total:this.dice.total,tenResult:this.dice.total-this.dice.unit.total,hasBonus:!!this.diceModifier,bonus:Math.abs(this.diceModifier),bonusType:this.diceModifier<0?game.i18n.format("CoC7.DiceModifierPenalty"):game.i18n.format("CoC7.DiceModifierBonus"),difficulty:this.difficulty};const max=0===this.dice.unit.total?100:90,min=0===this.dice.unit.total?10:0;let selected=this.dice.total-this.dice.unit.total;for(let i=0;i<this.dice.tens.results.length;i++){const die={};die.value=this.dice.tens.results[i],die.value===selected?(selected=101,die.selected=!0,this.dices.hasBonus?(die.isMax=!0,die.isMin=!1):(die.isMin=!0,die.isMax=!1)):(die.value===max?die.isMax=!0:die.isMax=!1,die.value===min?die.isMin=!0:die.isMin=!1),this.dices.tens.push(die)}this.computeCheck()}async increaseLuckSpend(luckAmount){const spendingAmount=parseInt(luckAmount,10);this.totalLuckSpent=parseInt(this.totalLuckSpent??0,10)+spendingAmount;const modifiedResult=Math.max(1,this.modifiedResult-this.totalLuckSpent);1===modifiedResult?this.successLevel=CoC7Check.successLevel.critical:modifiedResult<=this.extremeThreshold?this.successLevel=CoC7Check.successLevel.extreme:modifiedResult<=this.hardThreshold?this.successLevel=CoC7Check.successLevel.hard:modifiedResult<=this.rawValue?this.successLevel=CoC7Check.successLevel.regular:this.fumbleThreshold<=modifiedResult?this.successLevel=CoC7Check.successLevel.fumble:modifiedResult>this.rawValue&&(this.successLevel=CoC7Check.successLevel.failure),this.difficulty<=this.successLevel&&(this.isSuccess=!0,this.isFailure=!1),this.luckSpent=!0;let remove=0;for(let index=0,maxIndex=this.increaseSuccess.length;index<maxIndex;index++)this.increaseSuccess[index].luckToSpend=this.increaseSuccess[index].luckToSpend-spendingAmount,this.increaseSuccess[index].luckToSpend<1&&remove++;for(let index=0;index<remove;index++)this.increaseSuccess.shift();this.computeCheck()}async computeCheck(){switch(this.isUnknown=this.unknownDifficulty,this.gmDifficultyRegular&&(this.difficulty=CoC7Check.difficultyLevel.regular),this.gmDifficultyHard&&(this.difficulty=CoC7Check.difficultyLevel.hard),this.gmDifficultyExtreme&&(this.difficulty=CoC7Check.difficultyLevel.extreme),this.gmDifficultyCritical&&(this.difficulty=CoC7Check.difficultyLevel.critical),this.tenOnlyOneDie=1===this.dices.tens.length,this.isValue=!1,this.isCharactiristic=!1,this.isSkill=!1,this.isItem=!1,this.isAttribute=!1,this.isSimpleRoll?(this.denyPush=!0,this.denyLuck=!0):null==this.actor?this.isValue=!0:(this.characteristic&&(this.isCharactiristic=!0,this.rawValue=this.actor.system.characteristics[this.characteristic].value),this.skill&&(this.isSkill=!0,this.rawValue=this.skill.value),this.attribute&&(this.isAttribute=!0,this.rawValue=this.actor.system.attribs[this.attribute].value)),this.luckSpent||this.isSimpleRoll||(this.modifiedResult<=this.rawValue&&(this.successLevel=CoC7Check.successLevel.regular),this.modifiedResult<=this.hardThreshold&&(this.successLevel=CoC7Check.successLevel.hard),this.modifiedResult<=this.extremeThreshold&&(this.successLevel=CoC7Check.successLevel.extreme),this.modifiedResult>this.rawValue&&(this.successLevel=CoC7Check.successLevel.failure),1===this.modifiedResult&&(this.successLevel=CoC7Check.successLevel.critical),this.fumbleThreshold<=this.modifiedResult&&(this.successLevel=CoC7Check.successLevel.fumble)),this.successLevel){case CoC7Check.successLevel.regular:this.resultType=game.i18n.format("CoC7.RegularSuccess");break;case CoC7Check.successLevel.hard:this.resultType=game.i18n.format("CoC7.HardSuccess");break;case CoC7Check.successLevel.extreme:this.resultType=game.i18n.format("CoC7.ExtremeSuccess");break;case CoC7Check.successLevel.critical:this.resultType=game.i18n.format("CoC7.CriticalSuccess");break;case CoC7Check.successLevel.fumble:this.resultType=game.i18n.format("CoC7.Fumble");break;case CoC7Check.successLevel.failure:this.resultType=game.i18n.format("CoC7.Failure")}if(this.unknownDifficulty?this.successRequired="":this.isSimpleRoll||(this.successRequired=game.i18n.format("CoC7.SuccessRequired",{successRequired:this.difficultyString})),1===this.modifiedResult&&(this.successLevel=CoC7Check.successLevel.critical),this.luckSpent||this.isUnknown||this.isSimpleRoll||(this.isFailure=this.failed,this.isSuccess=this.passed),this.hasMalfunction=!1,this.isFumble&&(this.successLevel=CoC7Check.successLevel.fumble),this.item&&(this.isItem=!0,this.item.system.malfunction&&Number(this.modifiedResult)>=Number(this.item.system.malfunction)&&(this.hasMalfunction=!0,this.malfunctionTxt=game.i18n.format("CoC7.Malfunction",{itemName:this.item.name}),await this.item.toggleItemFlag(CoC7Item.flags.malfunction))),void 0===this.canBePushed&&(this.canBePushed=!!this.skill&&this.skill.canBePushed(),null!=this.characteristic&&(this.canBePushed=!0),this.isFumble&&(this.canBePushed=!1),this.denyPush&&(this.canBePushed=!1)),!this.denyLuck&&this.actor){if(!(this.luckSpent||this.passed||this.isFumble||this.difficulty===CoC7Check.difficultyLevel.critical||this.unknownDifficulty)&&(this.skill||this.characteristic)){const luckNeeded=this.modifiedResult-this.succesThreshold;this.actor.luck>luckNeeded&&(this.hasEnoughLuck=!0,this.luckNeeded=luckNeeded,this.luckNeededTxt=game.i18n.format("CoC7.SpendLuck",{luckNeededValue:luckNeeded}))}if(!this.luckSpent&&(this.increaseSuccess=[],!this.pushing&&"lck"!==this.attribute&&"san"!==this.attribute)){if(this.unknownDifficulty&&this.modifiedResult>this.regularThreshold){const nextLevel={};nextLevel.difficultyName=game.i18n.localize("CoC7.RegularDifficulty"),nextLevel.difficulty=CoC7Check.difficultyLevel.regular,nextLevel.luckToSpend=this.modifiedResult-this.regularThreshold,nextLevel.hasEnoughLuck=nextLevel.luckToSpend<=this.actor.luck,nextLevel.luckToSpend<=this.actor.luck&&this.increaseSuccess.push(nextLevel)}if(this.difficulty<=CoC7Check.difficultyLevel.regular&&this.modifiedResult>this.hardThreshold){const nextLevel={};nextLevel.difficultyName=game.i18n.localize("CoC7.HardDifficulty"),nextLevel.difficulty=CoC7Check.difficultyLevel.hard,nextLevel.luckToSpend=this.modifiedResult-this.hardThreshold,nextLevel.hasEnoughLuck=nextLevel.luckToSpend<=this.actor.luck,nextLevel.luckToSpend<=this.actor.luck&&this.increaseSuccess.push(nextLevel)}if(this.difficulty<=CoC7Check.difficultyLevel.hard&&this.modifiedResult>this.extremeThreshold){const nextLevel={};nextLevel.difficultyName=game.i18n.localize("CoC7.ExtremeDifficulty"),nextLevel.difficulty=CoC7Check.difficultyLevel.extreme,nextLevel.luckToSpend=this.modifiedResult-this.extremeThreshold,nextLevel.hasEnoughLuck=nextLevel.luckToSpend<=this.actor.luck,nextLevel.luckToSpend<=this.actor.luck&&this.increaseSuccess.push(nextLevel)}}this.canIncreaseSuccess=this.increaseSuccess.length>0,this.isFumble&&(this.canIncreaseSuccess=!1)}if(this.canAwardExperience=this.skill&&!this.skill.system.properties.noxpgain,!(this.passed&&this.diceModifier<=0&&this.skill)||this.skill.system.properties.noxpgain||this.luckSpent||this.forced||this.isBlind||this.isUnknown||this.flagForDevelopement(),this.parent){const parent=await fromUuid(this.parent);parent&&"updateRoll"in parent&&await parent.updateRoll(this.JSONRollString)}}showDiceRoll(){if(game.modules.get("dice-so-nice")?.active){const diceResults=[];for(const dieResult of this.dices.tens)diceResults.push(100===dieResult.value?0:dieResult.value/10);diceResults.push(this.dices.unit.value);const diceData={formula:`${this.dices.tens.length}d100+1d10`,results:diceResults,whisper:null,blind:!1};game.dice3d.show(diceData)}}get cssClass(){let cssClass="";return this.isSuccess&&(cssClass="success"),this.isFailure&&(cssClass="failure"),this.isCritical&&!this.isFailure&&(cssClass="success critical"),this.isFumble&&!this.isSuccess&&(cssClass="failure fumble"),CoC7Check.successLevel.regular===this.successLevel&&(cssClass+=" regular-success"),CoC7Check.successLevel.hard===this.successLevel&&(cssClass+=" hard-success"),CoC7Check.successLevel.extreme===this.successLevel&&(cssClass+=" extreme-success"),cssClass}get cssClassList(){const cssClass=[];return this.isSuccess&&cssClass.push("success"),this.isFailure&&cssClass.push("failure"),this.isCritical&&!this.isFailure&&cssClass.push("success","critical"),this.isFumble&&!this.isSuccess&&cssClass.push("failure","fumble"),CoC7Check.successLevel.regular===this.successLevel&&cssClass.push("regular-success"),CoC7Check.successLevel.hard===this.successLevel&&cssClass.push("hard-success"),CoC7Check.successLevel.extreme===this.successLevel&&cssClass.push("extreme-success"),cssClass}get playerCssClass(){return this.isSuccess||this.forcedSuccess?"success":this.isFailure||this.forcedFailure?"failure":null}async upgradeCheck(upgradeindex,update=!0){const increasedSuccess=this.increaseSuccess[upgradeindex],luckAmount=parseInt(increasedSuccess.luckAmount)||parseInt(increasedSuccess.luckToSpend);if(!this.actor.spendLuck(luckAmount))return void ui.notifications.error(game.i18n.format("CoC7.ErrorNotEnoughLuck",{actor:this.actor.name}));this.totalLuckSpent=parseInt(this.totalLuckSpent)?parseInt(this.totalLuckSpent):0,this.totalLuckSpent+=parseInt(luckAmount);const newSuccessLevel=parseInt(increasedSuccess.newSuccessLevel)||parseInt(increasedSuccess.difficulty);this.successLevel=newSuccessLevel,this.difficulty<=newSuccessLevel&&(this.isSuccess=!0,this.isFailure=!1);for(let index=0;index<upgradeindex+1;index++)this.increaseSuccess.shift();for(const s of this.increaseSuccess)s.luckToSpend=s.luckToSpend-luckAmount;return this.luckSpent=!0,this.computeCheck(),update?await this.updateChatCard():void 0}removeUpgrades(){this.canIncreaseSuccess=!1,this.increaseSuccess=[],this.luckNeeded=0,this.luckNeededTxt=null,this.canBePushed=!1}forcePass(luckAmount=null,update=!0){if(luckAmount){this.actor.spendLuck(luckAmount),this.successLevel=this.difficulty;for(const s of this.increaseSuccess)s.luckToSpend=s.luckToSpend-luckAmount;this.luckSpent=!0,this.isSuccess=!0,this.isFailure=!1,this.totalLuckSpent=parseInt(this.totalLuckSpent)?parseInt(this.totalLuckSpent):0,this.totalLuckSpent+=parseInt(luckAmount),this.computeCheck(),update&&this.updateChatCard()}else this.forced=!0,this.forcedSuccess=!0,this.isUnknown?this.forceSuccessLevel(CoC7Check.successLevel.regular,update):this.forceSuccessLevel(this.difficulty,update)}forceFail(update=!0){this.forced=!0,this.forcedFailure=!0,this.isUnknown?this.forceSuccessLevel(CoC7Check.successLevel.failure,update):this.forceSuccessLevel(this.difficulty-1,update)}_forceCheck(high,low,update=!0){let total=Math.floor(Math.random()*(high-low))+low+1;const unitTotal=total%10;let tenTotal=Math.floor(total/10);const tens=[];let hasEnough=Math.abs(this.diceModifier)===tens.length;for(;!hasEnough;){let ten=Math.floor(10*Math.random()),roll=10*ten+unitTotal;0===roll&&(roll=100,ten=100),this.hasPenalty&&roll<=high&&(tens.push(ten),roll>total&&(total=roll)),this.hasBonus&&roll>low&&(tens.push(ten),roll<total&&(total=roll)),hasEnough=tens.length===Math.abs(this.diceModifier)}10===tenTotal&&0===unitTotal&&(tenTotal=100),tens.splice(Math.floor(Math.random()*tens.length+1),0,10===tenTotal?0:tenTotal),this.dices.tens=[],this.dices.unit.value=unitTotal,this.modifiedResult=total,this.dices.total=total,this.dices.tenResult=total-unitTotal;const max=0===unitTotal?100:90,min=0===unitTotal?10:0;let selected=total-unitTotal;for(let i=0;i<tens.length;i++){const die={};die.value=tens[i],die.value===selected?(selected=101,die.selected=!0,this.hasBonus?(die.isMax=!0,die.isMin=!1):(die.isMin=!0,die.isMax=!1)):(die.value===max?die.isMax=!0:die.isMax=!1,die.value===min?die.isMin=!0:die.isMin=!1),this.dices.tens.push(die)}this.computeCheck(),update&&this.updateChatCard()}forceSuccessLevel(successLevel,update=!0){let high,low;CoC7Check.successLevel.fumble===successLevel&&(high=100,low=this.fumbleThreshold-1),CoC7Check.successLevel.failure===successLevel&&(high=this.regularThreshold===this.fumbleThreshold-1?100:this.fumbleThreshold-1,low=this.regularThreshold),CoC7Check.successLevel.regular===successLevel&&(high=this.regularThreshold,low=this.hardThreshold),CoC7Check.successLevel.hard===successLevel&&(high=this.hardThreshold,low=this.extremeThreshold),CoC7Check.successLevel.extreme===successLevel&&(high=this.extremeThreshold,low=1),CoC7Check.successLevel.critical===successLevel&&(high=1,low=0),high===low&&low--,0===high&&(high=this.fumbleThreshold-1),this._forceCheck(high,low,update)}increaseSuccessLevel(update=!0){let high,low;CoC7Check.successLevel.fumble===this.successLevel&&(high=this.fumbleThreshold-1,low=this.regularThreshold===this.fumbleThreshold-1?this.hardThreshold:this.regularThreshold),CoC7Check.successLevel.failure===this.successLevel&&(high=this.regularThreshold,low=this.hardThreshold),CoC7Check.successLevel.regular===this.successLevel&&(high=this.hardThreshold,low=this.extremeThreshold),CoC7Check.successLevel.hard===this.successLevel&&(high=this.extremeThreshold,low=this.criticalThreshold),CoC7Check.successLevel.extreme===this.successLevel&&(high=this.criticalThreshold,low=0),high===low&&low--,this._forceCheck(high,low,update)}decreaseSuccessLevel(update=!0){let high,low;CoC7Check.successLevel.failure===this.successLevel&&(high=100,low=this.fumbleThreshold-1),CoC7Check.successLevel.regular===this.successLevel&&(high=this.fumbleThreshold-1,low=this.regularThreshold),CoC7Check.successLevel.hard===this.successLevel&&(high=this.regularThreshold,low=this.hardThreshold),CoC7Check.successLevel.extreme===this.successLevel&&(high=this.hardThreshold,low=this.extremeThreshold),CoC7Check.successLevel.critical===this.successLevel&&(high=this.extremeThreshold,low=1),0===high&&(high=this.fumbleThreshold-1),this._forceCheck(high,low,update)}async flagForDevelopement(){this.flaggedForDevelopment=!0,this.skill&&await this.skill.flagForDevelopement()}set difficulty(x){this._difficulty=parseInt(x)}get difficulty(){return this._difficulty}set flavor(x){this._flavor=x}set context(x){this._context=x}get context(){if(this._context)return this._context}set parent(x){this.uuid||(this.uuid=foundry.utils.randomID(16)),this.parentUuid=x}get parent(){if(this.parentUuid)return this.parentUuid}get flavor(){if(this._flavor)return this._flavor;let flavor="";return this.actor?.system&&(this.skill?flavor=game.i18n.format("CoC7.CheckResult",{name:this.skill.name,value:this.rawValueString,difficulty:this.difficultyString}):this.item?flavor=game.i18n.format("CoC7.ItemCheckResult",{item:this.item.name,skill:this.skill.name,value:this.rawValueString,difficulty:this.difficultyString}):this.characteristic?flavor=game.i18n.format("CoC7.CheckResult",{name:game.i18n.format(this.actor.system.characteristics[this.characteristic].label),value:this.rawValueString,difficulty:this.difficultyString}):this.attribute?flavor=game.i18n.format("CoC7.CheckResult",{name:game.i18n.format(`CoC7.${this.actor.system.attribs[this.attribute].label}`),value:this.rawValueString,difficulty:this.difficultyString}):this.displayName&&(flavor=game.i18n.format("CoC7.CheckResult",{name:this.displayName,value:this.rawValueString,difficulty:this.difficultyString}))),flavor||this.rawValue&&(flavor=this.displayName?game.i18n.format("CoC7.CheckResult",{name:this.displayName,value:this.rawValueString,difficulty:this.difficultyString}):game.i18n.format("CoC7.CheckRawValue",{rawvalue:this.rawValue,difficulty:this.difficultyString})),this.pushing&&(flavor=`${game.i18n.format("CoC7.Pushing")} ${flavor}`),flavor}get tooltipHeader(){return this.attribute?game.i18n.format(`CoC7.LinkCheck${this.difficulty===CoC7Check.difficultyLevel.regular?"":"Diff"}${this.diceModifier?"Modif":""}`,{difficulty:this.difficultyString,modifier:this.diceModifier,name:game.i18n.format(`CoC7.${this.actor.system.attribs[this.attribute].label}`)})+` (${this.actor.system.attribs[this.attribute].value}%)`:this.characteristic?game.i18n.format(`CoC7.LinkCheck${this.difficulty===CoC7Check.difficultyLevel.regular?"":"Diff"}${this.diceModifier?"Modif":""}`,{difficulty:this.difficultyString,modifier:this.diceModifier,name:game.i18n.localize(this.actor.system.characteristics[this.characteristic].label)})+` (${this.actor.system.characteristics[this.characteristic].value}%)`:this.skill?game.i18n.format(`CoC7.LinkCheck${this.difficulty===CoC7Check.difficultyLevel.regular?"":"Diff"}${this.diceModifier?"Modif":""}`,{difficulty:this.difficultyString,modifier:this.diceModifier,name:this.skill.name})+` (${this.skill.value}%)`:this.displayName?game.i18n.format(`CoC7.LinkCheck${this.difficulty===CoC7Check.difficultyLevel.regular?"":"Diff"}${this.diceModifier?"Modif":""}`,{difficulty:this.difficultyString,modifier:this.diceModifier,name:this.displayName})+` (${this.rawValueString}%)`:null}async getHtmlRollElement(options={}){this.options?this.options=foundry.utils.mergeObject(this.options,options):this.options=options;const html=await renderTemplate("systems/CoC7/templates/chat/rolls/in-card-roll.html",this);return html?$.parseHTML(html)[0]:null}async getHtmlRoll(options={}){this.options?this.options=foundry.utils.mergeObject(this.options,options):this.options=options;return await renderTemplate("systems/CoC7/templates/chat/rolls/in-card-roll.html",this)||void 0}async toMessage(pushing=!1){this.pushing=pushing;const html=await renderTemplate("systems/CoC7/templates/chat/roll-result.html",this),speakerData={};let speaker;this.actor?(this.actor.isToken?speakerData.token=this.token.document:this.actor.isDummy?this.actor.name&&(speaker={alias:this.actor.name}):speakerData.actor=this.actor,speaker=ChatMessage.getSpeaker(speakerData)):speaker=ChatMessage.getSpeaker();const chatData={user:(this.actor?.user?this.actor.user:game.user).id,speaker,flavor:this.flavor,content:html,flags:{CoC7:{type:CoC7Check.cardType}}};if(this.uuid&&(chatData.flags.CoC7.uuid=this.uuid),this.context&&(chatData.flags.CoC7.context=this.context),"selfroll"===this.rollMode)if(game.user.isGM){if(chatData.user=game.user.id,chatData.flavor=`[${this.actor.name}] ${chatData.flavor}`,chatData.flags={CoC7:{GMSelfRoll:!0}},void 0!==chatData.speaker&&(chatData.flags.CoC7.originalSpeaker=foundry.utils.duplicate(chatData.speaker)),game.user.isGM)switch(game.settings.get("CoC7","selfRollWhisperTarget")){case"owners":delete chatData.speaker,chatData.whisper=this.actor.owners,chatData.type=CONST.CHAT_MESSAGE_TYPES.WHISPER;break;case"everyone":delete chatData.speaker,chatData.whisper=game.users.players,chatData.type=CONST.CHAT_MESSAGE_TYPES.WHISPER;break;default:ChatMessage.applyRollMode(chatData,this.rollMode)}}else ChatMessage.applyRollMode(chatData,this.rollMode);["gmroll","blindroll"].includes(this.rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),"blindroll"===this.rollMode&&(chatData.blind=!0),this.dice?.roll&&!this.dice?.hideDice&&(foundry.utils.isNewerVersion(game.version,"11")?chatData.rolls=[this.dice.roll]:chatData.roll=this.dice.roll,chatData.type=CONST.CHAT_MESSAGE_TYPES.ROLL,chatData.rollMode=this.isBlind?"blindroll":this.rollMode),ChatMessage.create(chatData).then((msg=>msg))}async updateChatCard({makePublic=!1,forceRoll=!1}={}){makePublic&&(this.rollMode=!1);const chatData={flavor:this.flavor};makePublic&&(chatData.whisper=[],chatData.blind=!1,ChatMessage.applyRollMode(chatData)),chatData.blind&&(this.isBlind=!0);const html=await renderTemplate("systems/CoC7/templates/chat/roll-result.html",this);let newContent=html;if(!this.messageId)return $.parseHTML(html)[0];const message=game.messages.get(this.messageId),htmlMessage=$.parseHTML(message.content)[0];if(!htmlMessage.classList.contains("roll-result")){const htmlCheck=$.parseHTML(html)[0],rollResultElement=htmlMessage.querySelector(".roll-result");null!==rollResultElement&&rollResultElement.replaceWith(htmlCheck),newContent=htmlMessage.outerHTML}chatData.content=newContent,CONST.CHAT_MESSAGE_TYPES.ROLL===message.type&&(message.whisper?.length?chatData.type=CONST.CHAT_MESSAGE_TYPES.WHISPER:chatData.type=CONST.CHAT_MESSAGE_TYPES.OTHER),forceRoll&&this.dice?.roll&&(game.user.isGM||!this.isBlind)&&await CoC7Dice.showRollDice3d(this.dice.roll);const msg=await message.update(chatData);return await ui.chat.updateMessage(msg,!1),msg}static async updateCardSwitch(event){const card=event.currentTarget.closest(".chat-card"),check=await CoC7Check.getFromCard(card);check.gmDifficultyRegular=!1,check.gmDifficultyHard=!1,check.gmDifficultyExtreme=!1,check.gmDifficultyCritical=!1,"gmDifficultyRegular"===event.currentTarget.dataset.flag&&(check.gmDifficultyRegular=!0),"gmDifficultyHard"===event.currentTarget.dataset.flag&&(check.gmDifficultyHard=!0),"gmDifficultyExtreme"===event.currentTarget.dataset.flag&&(check.gmDifficultyExtreme=!0),"gmDifficultyCritical"===event.currentTarget.dataset.flag&&(check.gmDifficultyCritical=!0),check.computeCheck(),check.updateChatCard()}get tooltip(){return renderTemplate("systems/CoC7/templates/chat/rolls/roll-tooltip.html",this)}get inlineCheck(){const a=document.createElement("a");return a.classList.add("coc7-inline-check"),a.classList.add("coc7-check-result"),a.classList.add("coc7-inline"),a.classList.add(...this.cssClassList),a.title=this.tooltipHeader,a.dataset.roll=escape(this.JSONRollString),a.innerHTML=`<i class="game-icon game-icon-d10"></i> ${this.modifiedResult||"??"}`,a}get rollToolTip(){if(this.standby)return;const parts=[],tens=this.dices.tens.map((r=>({result:r.value,selected:r.selected,classes:["die","d10",r.selected?null:"discarded",r.isMin?"min":null,r.isMax?"max":null].filter((c=>c)).join(" ")}))),unit=[{result:this.dices.unit.value,selected:!0,classes:"die d10"}];return parts.push({formula:this.tooltipHeader,total:this.modifiedResult,icons:this.successLevelIcons,class:this.cssClass,successRequired:this.successRequired,resultType:this.resultType,face:10,rolls:[...tens,...unit]}),renderTemplate("systems/CoC7/templates/chat/rolls/roll-tooltip.html",{parts})}get JSONRollData(){return JSON.parse(this.JSONRollString)}get JSONRollString(){return JSON.stringify(this,((key,value)=>{if(null===value)return;return["_actor","_skill","_item"].includes(key)?void 0:value}))}static fromData(data){return Object.assign(new CoC7Check,data)}static fromRollString(dataString){let data;try{data=JSON.parse(unescape(dataString))}catch(err){return ui.notifications.error(err.message),null}return CoC7Check.fromData(data)}static async alter(check,command,options={}){switch(command){case"useLuck":if(options.target.classList.contains("pass-check")){const luckAmount=parseInt(options.target.dataset.luckAmount);check.forcePass(luckAmount,options.update)}else{const upgradeIndex=parseInt(options.target.dataset.index);await check.upgradeCheck(upgradeIndex,options.update)}break;case"force-pass":check.forcePass(null,options.update);break;case"force-fail":check.forceFail(options.update);break;case"increase-success-level":check.increaseSuccessLevel(options.update);break;case"decrease-success-level":check.decreaseSuccessLevel(options.update);break;case"reveal-check":check.isBlind=!1,check.rollMode=!1,check.computeCheck(),options.update&&check.updateChatCard();break;case"flag-for-development":await check.flagForDevelopement(),check.computeCheck(),options.update&&check.updateChatCard();break;case"push":await check._perform(),check.pushing=!0,options.update&&check.updateChatCard()}}static async _onClickInlineRoll(event){event.preventDefault();const a=event.currentTarget;if(a.classList.contains("coc7-check-result"))return a.classList.contains("expanded")?CoC7Check._collapseInlineResult(a):CoC7Check._expandInlineResult(a)}static _collapseInlineResult(a){if(!a.classList.contains("coc7-inline-check"))return;if(!a.classList.contains("expanded"))return;const tooltip=a.querySelector(".coc7-check-tooltip");return tooltip&&tooltip.remove(),a.classList.remove("expanded")}static async _expandInlineResult(a){if(!a.classList.contains("coc7-inline-check"))return;if(a.classList.contains("expanded"))return;const check=Object.assign(new CoC7Check,JSON.parse(unescape(a.dataset.roll)));if(check.standby)return;const tip=document.createElement("div");tip.innerHTML=await check.rollToolTip;const tooltip=tip.children[0];a.appendChild(tooltip),a.classList.add("expanded");const pa=a.getBoundingClientRect(),pt=tooltip.getBoundingClientRect();tooltip.style.left=`${Math.min(pa.x,window.innerWidth-(pt.width+3))}px`,tooltip.style.top=`${Math.min(pa.y+pa.height+3,window.innerHeight-(pt.height+3))}px`;const zi=getComputedStyle(a).zIndex;tooltip.style.zIndex=Number.isNumeric(zi)?zi+1:100}}class CoC7Utilities{static isFormula(x){return"string"==typeof x&&(!!isNaN(Number(x))&&Roll.validate(x))}static ParseChatEntry(html,content){const terms=content.match(/(\S+)/g);if(terms[0]?.toLowerCase().match(/^\/r(oll)?$/)&&terms[1]?.toLowerCase().startsWith("1d%"))return setTimeout((function(){CoC7Utilities._ExecCommand(content)}),200),!1}static async _ExecCommand(content){const options=content.toLowerCase().split(" ")?.join("")?.replace(/\/r(oll)?1d%/,""),check=new CoC7Check;if(options.length){let threshold,flatDiceModifier,flatThresholdModifier,escaped=options,difficulty=CoC7Check.difficultyLevel.regular,diceModifier=0,ask=!1;const thresholdStr=escaped.match(/[^(]+(?=\))/);if(thresholdStr&&thresholdStr.length){threshold=Number(thresholdStr[0]);for(const match of thresholdStr)escaped=escaped.replace(`(${match})`,"")}const difficultyStr=escaped.match(/[^[]+(?=\])/);if(difficultyStr&&difficultyStr.length){difficulty=CoC7Utilities.convertDifficulty(difficultyStr[0]);for(const match of difficultyStr)escaped=escaped.replace(`[${match}]`,"")}if(escaped.includes("?")&&(ask=!0,escaped=escaped.replace("?","")),isNaN(Number(escaped))||(diceModifier=Number(escaped)),ask){const dialogOptions={threshold,modifier:diceModifier,difficulty,askValue:!0},usage=await RollDialog.create(dialogOptions);usage&&(diceModifier=Number(usage.get("bonusDice")),difficulty=Number(usage.get("difficulty")),threshold=Number(usage.get("threshold"))||threshold,flatDiceModifier=Number(usage.get("flatDiceModifier")),flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}check.diceModifier=diceModifier||0,check.difficulty=difficulty||CoC7Check.difficultyLevel.regular,check.rawValue=threshold,check.flatDiceModifier=flatDiceModifier,check.flatThresholdModifier=flatThresholdModifier,threshold&&(check.rawValue=isNaN(threshold)?void 0:threshold)}const speaker=ChatMessage.getSpeaker();if(speaker.token&&speaker.scene){const actor=chatHelper.getActorFromKey(`${speaker.scene}.${speaker.token}`);actor&&(check.actor=actor)}else if(speaker.actor){const actor=game.actors.get(speaker.actor);actor&&(check.actor=actor)}await check.roll(),check.toMessage()}static async test(){ui.notifications.infos("Do some stuff")}static getActorFromString(actorString){let actor;return game.actors.tokens[actorString]?game.actors.tokens[actorString]:(actor=game.actors.get(actorString),actor||(actor=Object.values(game.actors.tokens).find((t=>t.name.toLowerCase()===actorString.toLowerCase())),actor||(actor=game.actors.find((a=>a.name.toLowerCase()===actorString.toLowerCase()))),actor||null))}static getCharacteristicNames(char){const charKey=char.toLowerCase();switch(charKey){case"str":return{short:game.i18n.localize("CHARAC.STR"),label:game.i18n.localize("CHARAC.Strength")};case"con":return{short:game.i18n.localize("CHARAC.CON"),label:game.i18n.localize("CHARAC.Constitution")};case"siz":return{short:game.i18n.localize("CHARAC.SIZ"),label:game.i18n.localize("CHARAC.Size")};case"dex":return{short:game.i18n.localize("CHARAC.DEX"),label:game.i18n.localize("CHARAC.Dexterity")};case"app":return{short:game.i18n.localize("CHARAC.APP"),label:game.i18n.localize("CHARAC.Appearance")};case"int":return{short:game.i18n.localize("CHARAC.INT"),label:game.i18n.localize("CHARAC.Intelligence")};case"pow":return{short:game.i18n.localize("CHARAC.POW"),label:game.i18n.localize("CHARAC.Power")};case"edu":return{short:game.i18n.localize("CHARAC.EDU"),label:game.i18n.localize("CHARAC.Education")};case"luck":return{short:game.i18n.localize("CoC7.Luck"),label:game.i18n.localize("CoC7.Luck")};default:{const characteristicList=foundry.utils.isNewerVersion(game.version,"12")?game.system.template.Actor.character.characteristics:game.system.template.Actor.templates.characteristics.characteristics;for(const[,value]of Object.entries(characteristicList))if(charKey===game.i18n.localize(value.short).toLowerCase())return{short:game.i18n.localize(value.short),label:game.i18n.localize(value.label)};return null}}}static convertDifficulty(difficulty){if("0"===String(difficulty))return CoC7Check.difficultyLevel.regular;if("string"!=typeof difficulty)return difficulty;if(!isNaN(Number(difficulty)))return Number(difficulty);switch(difficulty){case"?":return CoC7Check.difficultyLevel.unknown;case"+":return CoC7Check.difficultyLevel.hard;case"++":return CoC7Check.difficultyLevel.extreme;case"+++":return CoC7Check.difficultyLevel.critical;default:return CoC7Check.difficultyLevel.regular}}static skillCheckMacro(skill,event,options={}){event.preventDefault();const speaker=ChatMessage.getSpeaker();let actor;speaker.token&&(actor=game.actors.tokens[speaker.token]),actor||(actor=game.actors.get(speaker.actor)),actor?actor.skillCheck(skill,event.shiftKey,options):ui.notifications.warn(game.i18n.localize("CoC7.WarnNoActorAvailable"))}static weaponCheckMacro(weapon,event){event.preventDefault();const speaker=ChatMessage.getSpeaker();let actor;if(speaker.token&&(actor=game.actors.tokens[speaker.token]),!actor)if(speaker.scene&&speaker.token){const baseActor=game.actors.get(speaker.actor),token=game.scenes.get(speaker.scene).tokens.get(speaker.token);actor=new(getDocumentClass("Actor"))(baseActor.toJSON(),{parent:token})}else actor=game.actors.get(speaker.actor);actor?actor.weaponCheck(weapon,event.shiftKey):ui.notifications.warn(game.i18n.localize("CoC7.WarnNoActorAvailable"))}static async checkMacro(threshold=void 0,event=null){await CoC7Utilities.rollDice(event,{threshold})}static createMacro(bar,data,slot){if("Item"!==data.type)return;const item=fromUuidSync(data.uuid,bar);if(!item)return ui.notifications.warn(game.i18n.localize("CoC7.WarnMacroNoItemFound"));if("weapon"!==item.type&&"skill"!==item.type)return ui.notifications.warn(game.i18n.localize("CoC7.WarnMacroIncorrectType"));let command="";if("weapon"===item.type&&(command=`game.CoC7.macros.weaponCheck({name:'${item.name}', uuid:'${data.uuid}'}, event);`),"skill"===item.type){if(CoC7Item.isAnySpec(item))return ui.notifications.warn(game.i18n.localize("CoC7.WarnNoGlobalSpec"));command=`game.CoC7.macros.skillCheck({name:'${item.name}', uuid:'${data.uuid}'}, event);`}if(""!==command){const macro=game.macros.contents.find((m=>m.name===item.name&&m.command===command));return macro?(game.user.assignHotbarMacro(macro,slot),!1):(Macro.create(foundry.utils.duplicate({name:item.name,type:"script",img:item.img,command})).then((macro=>{game.user.assignHotbarMacro(macro,slot)})),!1)}return!0}static async toggleDevPhase(toggle){await game.settings.set("CoC7","developmentEnabled",toggle),ui.notifications.info(toggle?game.i18n.localize("CoC7.DevPhaseEnabled"):game.i18n.localize("CoC7.DevPhaseDisabled")),game.socket.emit("system.CoC7",{type:"updateChar"}),CoC7Utilities.updateCharSheets()}static async toggleCharCreation(toggle){await game.settings.set("CoC7","charCreationEnabled",toggle),ui.notifications.info(toggle?game.i18n.localize("CoC7.CharCreationEnabled"):game.i18n.localize("CoC7.CharCreationDisabled")),game.socket.emit("system.CoC7",{type:"updateChar"}),CoC7Utilities.updateCharSheets(),Hooks.call("toggleCharCreation",toggle)}static async getTarget(){const users=game.users.filter((user=>user.active)),actors=game.actors;let checkOptions=`<input type="checkbox" name="COCCheckAllPC" id="COCCheckAllPC">\n\n    <label for="COCCheckAllPC">${game.i18n.localize("CoC7.allActors")}</label>`;const playerTokenIds=users.map((u=>u.character?.id)).filter((id=>void 0!==id)),selectedPlayerIds=canvas.tokens.controlled.map((token=>token.actor.id));actors.forEach((actor=>{const checked=(selectedPlayerIds.includes(actor.id)||playerTokenIds.includes(actor.id))&&"checked";checkOptions+=`\n     <br>\n     <input type="checkbox" name="${actor.id}" id="${actor.id}" value="${actor.name}" ${checked}>\n\n     <label for="${actor.id}">${actor.name}</label>\n       `})),new Dialog({title:`${game.i18n.localize("CoC7.dreaming")}`,content:`${game.i18n.localize("CoC7.restTargets")}: ${checkOptions} <br>`,buttons:{whisper:{label:`${game.i18n.localize("CoC7.startRest")}`,callback:async html=>{const targets=[];let all=!1;const users=html.find('[type="checkbox"]');for(const user of users)"COCCheckAllPC"===user.name&&user.checked&&(all=!0),(user.checked||all)&&targets.push(user.id);await CoC7Utilities.startRest(targets)}}}}).render(!0)}static async startRest(targets){if(!targets.length)return;const actors=game.actors.filter((actor=>targets.includes(actor.id)));let chatContent=`<i>${game.i18n.localize("CoC7.dreaming")}...</i><br>`;for(const actor of actors)if(["character","npc","creature"].includes(actor.type)){let quickHealer=!1;for(const item of actor.items)"talent"===item.type&&item.name===`${game.i18n.localize("CoC7.quickHealer")}`&&(quickHealer=!0);const isCriticalWounds=!game.settings.get("CoC7","pulpRuleIgnoreMajorWounds")&&actor.hasConditionStatus(COC7.status.criticalWounds),dailySanityLoss=actor.system.attribs.san.dailyLoss,hpValue=actor.system.attribs.hp.value,hpMax=actor.system.attribs.hp.max,mpValue=actor.system.attribs.mp.value,mpMax=actor.system.attribs.mp.max,pow=actor.system.characteristics.pow.value;if(chatContent+=`<br><b>${actor.name}. </b>`,hpValue<hpMax)if(!0===isCriticalWounds)chatContent+=`<b style="color:darkred">${game.i18n.localize("CoC7.hasCriticalWounds")}. </b>`;else{let healAmount=1;game.settings.get("CoC7","pulpRuleFasterRecovery")&&(healAmount=2),!0===quickHealer&&healAmount++,healAmount=Math.min(healAmount,hpMax-hpValue),chatContent+=1===healAmount?`<b style="color:darkolivegreen">${game.i18n.localize("CoC7.healthRecovered")}. </b>`:`<b style="color:darkolivegreen">${game.i18n.format("CoC7.pulpHealthRecovered",{number:healAmount})}. </b>`,actor.update({"system.attribs.hp.value":actor.system.attribs.hp.value+healAmount})}dailySanityLoss>0&&(chatContent+=`<b style="color:darkolivegreen">${game.i18n.localize("CoC7.dailySanLossRestarted")}.</b>`,actor.update({"system.attribs.san.dailyLoss":0,"system.attribs.san.dailyLimit":Math.floor(actor.system.attribs.san.value/5)}));const hours=7;if(hours>0&&mpValue<mpMax){let magicAmount=hours*Math.ceil(pow/100);magicAmount=Math.min(magicAmount,mpMax-mpValue),chatContent+=`<b style="color:darkolivegreen">${game.i18n.format("CoC7.magicPointsRecovered")}: ${magicAmount}.</b>`,actor.update({"system.attribs.mp.value":actor.system.attribs.mp.value+magicAmount})}}const chatData={user:game.user.id,speaker:ChatMessage.getSpeaker(),content:chatContent,type:CONST.CHAT_MESSAGE_TYPES.OTHER};ChatMessage.create(chatData)}static async toggleXPGain(toggle){await game.settings.set("CoC7","xpEnabled",toggle),ui.notifications.info(toggle?game.i18n.localize("CoC7.XPGainEnabled"):game.i18n.localize("CoC7.XPGainDisabled"))}static async rollDice(event,options={}){let diceModifier,difficulty,flatDiceModifier,flatThresholdModifier;options.askValue=!options.threshold;let threshold=options.threshold;if(void 0!==options.modifier&&(diceModifier=Number(options.modifier)),void 0!==options.difficulty&&(difficulty=CoC7Utilities.convertDifficulty(options.difficulty)),!event?.shiftKey&&!options.fastForward){const usage=await RollDialog.create(options);usage&&(diceModifier=Number(usage.get("bonusDice")),difficulty=Number(usage.get("difficulty")),threshold=Number(usage.get("threshold")),flatDiceModifier=Number(usage.get("flatDiceModifier")),flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}const actors=[];if(game.user.isGM&&canvas.tokens.controlled.length)for(const token of canvas.tokens.controlled)actors.push(token.actor.tokenKey);else game.user.character&&actors.push(game.user.character.tokenKey);for(const tk of actors){const check=new CoC7Check;check.diceModifier=diceModifier||0,check.difficulty=difficulty||CoC7Check.difficultyLevel.regular,check.rawValue=threshold,check.flatDiceModifier=flatDiceModifier,check.flatThresholdModifier=flatThresholdModifier,check.actor=tk,await check.roll(),check.toMessage()}if(!actors.length){const check=new CoC7Check;check.diceModifier=diceModifier||0,check.difficulty=difficulty||CoC7Check.difficultyLevel.regular,check.rawValue=threshold,check.flatDiceModifier=flatDiceModifier,check.flatThresholdModifier=flatThresholdModifier,await check.roll(),check.toMessage()}}static updateCharSheets(){if(game.user.isGM)for(const a of game.actors.contents)"character"===a?.type&&a?.sheet&&a?.sheet?.rendered&&(a.update({"system.flags.locked":!0}),a.render(!1));else for(const a of game.actors.contents)a.isOwner&&(a.update({"system.flags.locked":!0}),a.render(!1))}static async getDataFromDropEvent(event,entityType="Item"){if(event.originalEvent)return[];try{const dataList=JSON.parse(event.dataTransfer.getData("text/plain"));if("Folder"===dataList.type&&dataList.documentName===entityType){const folder=await fromUuid(dataList.uuid);return folder?folder.contents:[]}if(dataList.type===entityType){const item=await fromUuid(dataList.uuid);return item?[item]:[]}return[]}catch(err){return[]}}static async copyToClipboard(text){try{if(navigator.clipboard&&window.isSecureContext)return navigator.clipboard.writeText(text);{const textArea=document.createElement("textarea");return textArea.value=text,textArea.style.position="fixed",textArea.style.left="-999px",textArea.style.top="-999px",document.body.appendChild(textArea),textArea.focus(),textArea.select(),new Promise(((resolve,reject)=>{document.execCommand("copy")?resolve():reject(new Error(game.i18n.localize("CoC7.UnableToCopyToClipboard"))),textArea.remove()})).catch((err=>ui.notifications.error(err)))}}catch(err){ui.notifications.error(game.i18n.localize("CoC7.UnableToCopyToClipboard"))}}static quoteRegExp(string){const len=string.length;let qString="";for(let current,i=0;i<len;++i)if(current=string.charAt(i),current>=" "&&current<="~")"\\"!==current&&"'"!==current||(qString+="\\"),qString+=current.replace(/[-[\]/{}()*+?.\\^$|]/g,"\\$&");else switch(current){case"\b":qString+="\\b";break;case"\f":qString+="\\f";break;case"\n":qString+="\\n";break;case"\r":qString+="\\r";break;case"\t":qString+="\\t";break;case"\v":qString+="\\v";break;default:qString+="\\u",current=current.charCodeAt(0).toString(16);for(let j=4;--j>=current.length;qString+="0");qString+=current}return qString}static setByPath(obj,path,value){const parts=path.split(".");let o=obj;if(parts.length>1)for(let i=0;i<parts.length-1;i++)o[parts[i]]||(o[parts[i]]={}),o=o[parts[i]];o[parts[parts.length-1]]=value}static getByPath(obj,path){const parts=path.split(".");let o=obj;if(parts.length>1)for(let i=0;i<parts.length-1;i++){if(!o[parts[i]])return;o=o[parts[i]]}return o[parts[parts.length-1]]}static SfromUuid(uuid){let doc,parts=uuid.split(".");if("Compendium"===parts[0])return null;{const[docName,docId]=parts.slice(0,2);parts=parts.slice(2);doc=CONFIG[docName].collection.instance.get(docId)}for(;doc&&parts.length>1;){const[embeddedName,embeddedId]=parts.slice(0,2);doc=doc.getEmbeddedDocument(embeddedName,embeddedId),parts=parts.slice(2)}return doc||null}static isDocumentUuidPack(uuid){return!!uuid.includes("Compendium")}static isDocumentUuid(uuid){const identifiers=["Actor","Scene","Token","Item","Compendium"];for(let i=0;i<identifiers.length;i++)if(uuid.includes(identifiers[i]))return!0;return!1}static getActorDocumentFromDropData(dropData){let docUuid,actor;return docUuid=dropData.tokenUuid?dropData.tokenUuid:void 0!==dropData.uuid?dropData.uuid:dropData.sceneId&&dropData.tokenId?`Scene.${dropData.sceneId}.Token.${dropData.tokenId}`:dropData.actorId||dropData.actorKey||dropData.id,"Token"===dropData.type?docUuid=dropData.uuid:docUuid&&(actor=CoC7Utilities.getActorFromKey(docUuid),actor||"Item"!==dropData.type||(docUuid=null)),actor&&docUuid!==actor.uuid&&(docUuid=actor.uuid),docUuid}static getDocumentFromKey(key){if(!key)return null;if(CoC7Utilities.isDocumentUuid(key))return CoC7Utilities.isDocumentUuidPack(key)?fromUuid(key):CoC7Utilities.SfromUuid(key);if(key.includes(".")){const[sceneId,tokenId]=key.split(".");if("TOKEN"===sceneId)return game.actors.tokens[tokenId];const scene=game.scenes.get(sceneId);if(!scene)return null;const tokenData=scene.getEmbeddedDocument("Token",tokenId);if(!tokenData)return null;const token=new Token(tokenData);return token.scene||(token.scene=foundry.utils.duplicate(scene)),token}return game.actors.get(key)||null}static getActorFromKey(key){const doc=CoC7Utilities.getDocumentFromKey(key);return doc?doc.actor?doc.actor:"CoCActor"===doc.constructor?.name?doc:null:null}static async createImportCharactersFolderIfNotExists(){let folderName=game.i18n.localize("CoC7.ImportedCharactersFolder");"CoC7.ImportedCharactersFolder"===folderName&&(folderName="Imported characters");let importedCharactersFolder=game.folders.find((entry=>entry.name===folderName&&"Actor"===entry.type));return null==importedCharactersFolder&&(importedCharactersFolder=await Folder.create({name:folderName,type:"Actor",parent:null}),ui.notifications.info(game.i18n.localize("CoC7.CreatedImportedCharactersFolder"))),importedCharactersFolder}static async guessItem(type,name,{combat=null,source="",fallbackAny=!1}={}){let existing=null;name=name.toLocaleLowerCase();for(let o=0,oM=source.length;o<oM;o++)switch(source.substring(o,o+1)){case"i":if(existing=game.items.find((item=>item.type===type&&item.name.toLowerCase()===name&&(null===combat||item.system.properties.combat===combat))),existing)return existing;break;case"w":case"m":case"s":for(const pack of game.packs)if("Item"===pack.metadata.type&&("w"===source[o]&&"world"===pack.metadata.package||"S"===source[o]&&"CoC7"===pack.metadata.package||"s"===source[o]&&!["world","CoC7"].includes(pack.metadata.package))){if(existing=(await pack.getDocuments()).find((item=>item.type===type&&item.name.toLowerCase()===name&&(null===combat||item.system.properties.combat===combat))),existing)return existing}}if(fallbackAny&&"skill"===type){const match=name.match(/^(.+ \()(?!any).+(\))$/);if(match)return await CoC7Utilities.guessItem(type,match[1]+"any"+match[2],{combat,source})}}static toKebabCase(s){if(!s)return"";const match=s.match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g);return match?match.join("-").toLowerCase():""}static sortByNameKey(a,b){return a.name.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLocaleLowerCase().localeCompare(b.name.normalize("NFD").replace(/[\u0300-\u036f]/g,"").toLocaleLowerCase())}static getAnIdForGm(){const keepers=game.users.filter((u=>u.active&&u.isGM&&u.id!==game.user.id));switch(keepers.length){case 0:return ui.notifications.error("CoC7.ErrorMissingKeeperUser",{localize:!0}),!1;case 1:return keepers[0].id}return keepers[Math.floor(Math.random()*keepers.length)].id}}class CoCIDEditor extends FormApplication{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","dialog","coc-id-editor"],template:"systems/CoC7/templates/apps/coc-id-editor.hbs",width:900,height:"auto",title:"CoC7.CoCIDFlag.title",closeOnSubmit:!1,submitOnClose:!0,submitOnChange:!0})}async getData(){const sheetData=super.getData();sheetData.supportedLanguages=CONFIG.supportedLanguages,this.options.editable=this.object.sheet.isEditable,sheetData.guessCode=game.system.api.cocid.guessId(this.object),sheetData.idPrefix=game.system.api.cocid.getPrefix(this.object),sheetData.cocidFlag=this.object.flags?.CoC7?.cocidFlag,sheetData.id=sheetData.cocidFlag?.id||"",sheetData.lang=sheetData.cocidFlag?.lang||game.i18n.lang,sheetData.priority=sheetData.cocidFlag?.priority||0,sheetData.eras=[];for(const[key,value]of Object.entries(COC7.eras))sheetData.eras.push({id:key,name:game.i18n.localize(value),isEnabled:!0===(sheetData.cocidFlag?.eras??{})[key]});sheetData.eras.sort(CoC7Utilities.sortByNameKey);const CoCIDKeys=foundry.utils.flattenObject(game.i18n.translations.CoC7.CoCIDFlag.keys??{}),prefix=new RegExp("^"+CoC7Utilities.quoteRegExp(sheetData.idPrefix));sheetData.existingKeys=Object.keys(CoCIDKeys).reduce(((obj,k)=>(k.match(prefix)&&obj.push({k,name:CoCIDKeys[k]}),obj)),[]).sort(CoC7Utilities.sortByNameKey),sheetData.isSystemID=void 0!==CoCIDKeys[sheetData.id];const match=sheetData.id.match(/^([^\\.]+)\.([^\\.]*)\.(.+)/);if(sheetData._existing=match&&void 0!==match[3]?match[3]:"",sheetData.id&&sheetData.lang){const worldDocuments=await game.system.api.cocid.fromCoCIDAll({cocid:sheetData.id,lang:sheetData.lang,scope:"world"}),usedEras={},uniqueWorldPriority={};sheetData.worldDocumentInfo=await Promise.all(worldDocuments.map((async d=>{d.flags.CoC7.cocidFlag.eras?Object.entries(d.flags.CoC7.cocidFlag.eras).filter((e=>e[1])).map((e=>(Object.prototype.hasOwnProperty.call(uniqueWorldPriority,d.flags.CoC7.cocidFlag.priority+"/"+e[0])||(uniqueWorldPriority[d.flags.CoC7.cocidFlag.priority+"/"+e[0]]=0),uniqueWorldPriority[d.flags.CoC7.cocidFlag.priority+"/"+e[0]]++,!1))):uniqueWorldPriority[d.flags.CoC7.cocidFlag.priority+"/*"]=1;const eras=d.flags.CoC7.cocidFlag.eras?Object.entries(d.flags.CoC7.cocidFlag.eras).filter((e=>e[1])).map((e=>e[0])).sort():[];for(const era of eras)usedEras[era]=COC7.eras[era]??"?";return{eras:eras.reduce((function(all,current){return all[current]=!0,all}),{}),priority:d.flags.CoC7.cocidFlag.priority,lang:d.flags.CoC7.cocidFlag.lang??"en",link:await TextEditor.enrichHTML(d.link,{async:!0}),folder:d?.folder?.name}}))),Object.entries(uniqueWorldPriority).filter((c=>c[1]>1)).length>0&&(sheetData.warnDuplicateWorldPriority=!0),sheetData.worldDuplicates=worldDocuments.length??0;const compendiumDocuments=await game.system.api.cocid.fromCoCIDAll({cocid:sheetData.id,lang:sheetData.lang,scope:"compendiums"}),uniqueCompendiumPriority={};sheetData.compendiumDocumentInfo=await Promise.all(compendiumDocuments.map((async d=>{d.flags.CoC7.cocidFlag.eras?Object.entries(d.flags.CoC7.cocidFlag.eras).filter((e=>e[1])).map((e=>(Object.prototype.hasOwnProperty.call(uniqueCompendiumPriority,d.flags.CoC7.cocidFlag.priority+"/"+e[0])||(uniqueCompendiumPriority[d.flags.CoC7.cocidFlag.priority+"/"+e[0]]=0),uniqueCompendiumPriority[d.flags.CoC7.cocidFlag.priority+"/"+e[0]]++,!1))):uniqueCompendiumPriority[d.flags.CoC7.cocidFlag.priority+"/*"]=1;const eras=d.flags.CoC7.cocidFlag.eras?Object.entries(d.flags.CoC7.cocidFlag.eras).filter((e=>e[1])).map((e=>e[0])).sort():[];for(const era of eras)usedEras[era]=COC7.eras[era]??"?";return{eras:eras.reduce((function(all,current){return all[current]=!0,all}),{}),priority:d.flags.CoC7.cocidFlag.priority,lang:d.flags.CoC7.cocidFlag.lang??"en",link:await TextEditor.enrichHTML(d.link,{async:!0}),folder:d?.folder?.name??""}}))),Object.entries(uniqueCompendiumPriority).filter((c=>c[1]>1)).length>0&&(sheetData.warnDuplicateCompendiumPriority=!0),sheetData.compendiumDuplicates=compendiumDocuments.length??0,sheetData.usedEras=[];for(const[key,value]of Object.entries(usedEras))sheetData.usedEras.push({id:key,name:game.i18n.localize(value)});sheetData.usedEras.sort(CoC7Utilities.sortByNameKey)}else sheetData.compendiumDocumentInfo=[],sheetData.worldDocumentInfo=[],sheetData.worldDuplicates=0,sheetData.compendiumDuplicates=0,sheetData.warnDuplicateWorldPriority=!1,sheetData.warnDuplicateCompendiumPriority=!1;return sheetData}activateListeners(html){super.activateListeners(html),html.find("a.copy-to-clipboard").click((function(e){CoC7Utilities.copyToClipboard($(this).siblings("input").val())})),this.object.sheet.isEditable&&(html.find(".toggle-switch").click(this._onClickToggle.bind(this)),html.find("input[name=_existing").change((function(e){const obj=$(this),prefix=obj.data("prefix");let value=obj.val();""!==value&&(value=prefix+CoC7Utilities.toKebabCase(value)),html.find("input[name=id]").val(value).trigger("change")})),html.find("select[name=known]").change((function(e){const obj=$(this);html.find("input[name=id]").val(obj.val())})),html.find("a[data-guess]").click((async function(e){e.preventDefault();const guess=$(this).data("guess");html.find("input[name=id]").val(guess).trigger("change")})))}static async eraToggle(document,propertyId){if("setup"===document.type){const update={[propertyId]:!0};if(void 0!==document.flags?.CoC7?.cocidFlag?.eras)for(const[key]of Object.entries(document.flags.CoC7.cocidFlag.eras))key!==propertyId&&(update["-="+key]=null);await document.update({"flags.CoC7.cocidFlag.eras":update})}else void 0===document.flags?.CoC7?.cocidFlag?.eras?.[propertyId]?void 0===document.flags?.CoC7?.cocidFlag?.eras?await document.update({"flags.CoC7.cocidFlag.eras":{[propertyId]:!0}}):await document.update({[`flags.CoC7.cocidFlag.eras.${propertyId}`]:!0}):await document.update({[`flags.CoC7.cocidFlag.eras.-=${propertyId}`]:null})}async _onClickToggle(event){event.preventDefault();const propertyId=event.currentTarget.dataset.property;await CoCIDEditor.eraToggle(this.object,propertyId);const options=foundry.utils.duplicate(this.options);await this.close(),await this.render(!0,options)}async _updateObject(event,formData){const id=formData.id||"";await this.object.update({"flags.CoC7.cocidFlag.id":id,"flags.CoC7.cocidFlag.lang":formData.lang||game.i18n.lang,"flags.CoC7.cocidFlag.priority":formData.priority||0,"flags.CoC7.cocidFlag.eras":this.object.flags?.CoC7?.cocidFlag?.eras??{}});const html=$(this.object.sheet.element).find("header.window-header a.header-button.edit-coc-id-warning,header.window-header a.header-button.edit-coc-id-exisiting");html.length&&html.css({color:id?"var(--color-text-light-highlight)":"red"}),this.render()}}function addCoCIDSheetHeaderButton(headerButtons,sheet){if(game.user.isGM){const sheetCoCID=sheet.object.flags?.CoC7?.cocidFlag,CoCIDEditorButton={class:void 0===sheetCoCID||void 0===sheetCoCID.id||""===sheetCoCID.id?"edit-coc-id-warning":"edit-coc-id-exisiting",label:"CoC7.CoCIDFlag.id",icon:"fas fa-fingerprint",onclick:()=>{new CoCIDEditor(sheet.object,{}).render(!0,{focus:!0})}},numberOfButtons=headerButtons.length;headerButtons.splice(numberOfButtons-1,0,CoCIDEditorButton)}}class CoC7ContextMenu{bind(menu,html,callback){this._callback=callback,this._html=html,this._menu=menu;try{const menuTrigger=html.find(`[data-context-menu=${menu.id}]`);if(0===menuTrigger.length)return;menuTrigger.contextmenu(this._onContextMenu.bind(this));const menuElement=CoC7ContextMenu.CreateMenu(menu);menuElement.on("click",".menu-action",this._onMenuAction.bind(this)),0!==this.menu.length?this.menu.replaceWith(menuElement):this.menuContainer.append(menuElement)}catch(error){console.error(error)}}get menuContainer(){let menuContainer=this._html.find(".menu-container");return 0===menuContainer.length&&(this._html.append('<div class="menu-container"></div>'),menuContainer=this._html.find(".menu-container")),menuContainer}get menu(){return this.menuContainer.find(`.context-menu-wrapper.${this._menu.id}`)}_onMenuAction(event){return this._callback(event,this.target)}static closeAll(){$("body").find(".menu-container").find(".context-menu-wrapper").each((function(i,m){m.style.visibility="hidden"}))}_onContextMenu(event){event.preventDefault(!0),CoC7ContextMenu.closeAll();const target=event?.currentTarget;if(this.target=target,!target)return;const menuName=target.dataset?.contextMenu;if(menuName===this._menu.id){const wrapper=this.menu;if(wrapper.length>0){const subMenu=wrapper.find(".sub-menu");let left=event.clientX,top=event.clientY;const menuHeight=wrapper.outerHeight(),menuWidth=wrapper.outerWidth();window.innerHeight<menuHeight+top&&(top-=menuHeight),window.innerWidth<menuWidth+left&&(left=window.innerWidth-menuWidth),subMenu.length>0&&(window.innerWidth<menuWidth+left+subMenu.outerWidth()?subMenu.css({right:menuWidth-5+"px",left:""}):subMenu.css({left:menuWidth-5+"px",right:""})),wrapper.css({left:`${left}px`,top:`${top}px`,visibility:"visible"})}}}static canSee(visibility){switch(visibility.toLowerCase()){case"gm":return game.user.isGM;case"trusted":return game.user.isTrusted;default:return!0}}static CreateMenu(menu){const classes="string"==typeof menu.classes?[menu.classes]:menu.classes;classes.push("context-menu-wrapper");const wrapper=$("<div></div>");if(wrapper.addClass(menu.id),classes.forEach((c=>wrapper.addClass(c))),menu.section)menu.section.forEach((s=>{const section=CoC7ContextMenu.CreateSection(s,{multi:!0});section&&wrapper.append(section)}));else{const section=CoC7ContextMenu.CreateSection(menu);section&&wrapper.append(section)}return wrapper}static CreateSection(s,{multi=!1,subMenu=!1}={}){if(!s.items)return null;if(s.visibility&&!CoC7ContextMenu.canSee(s.visibility))return null;const classes=s.classes?"string"==typeof s.classes?[s.classes]:s.classes:[];multi&&classes.push("menu-section"),subMenu&&classes.push("sub-menu");const section=$("<ul></ul>");return classes.forEach((c=>section.addClass(c))),s.items.forEach((i=>{const li=$("<li></li>");if(li.addClass("menu-item"),i.action&&(li.addClass("menu-action"),li.attr("data-action",i.action)),"string"==typeof i.label?li.append(`<span>${i.label}</span>`):(i.label.icon&&li.append(`<i class="${i.label.icon}"></i>`),i.label.text&&li.append(`<span>${i.label.text}</span>`)),i.subMenu){li.addClass("sub-menu-button"),li.append('<i class="fas fa-caret-right"></i>');const sub=CoC7ContextMenu.CreateSection(i.subMenu,{subMenu:!0});sub&&li.append(sub)}section.append(li)})),section}}class CoC7ActorSheet extends ActorSheet{_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(){const sheetData=await super.getData();if(sheetData.showHiddenDevMenu=game.settings.get("CoC7","hiddendevmenu"),sheetData.canDragToken=!!this.token&&game.user.isGM,sheetData.linkedActor=!0===this.actor.prototypeToken?.actorLink,sheetData.isToken=this.actor.isToken,sheetData.itemsByType={},sheetData.skills={},sheetData.combatSkills={},sheetData.weapons={},sheetData.rangeWpn=[],sheetData.meleeWpn=[],sheetData.actorFlags={},sheetData.effects="character"===this.actor.type?CoC7ActiveEffect.prepareActiveEffectCategories(this.actor.effects):CoC7ActiveEffect.prepareNPCActiveEffectCategories(this.actor.effects),sheetData.permissionLimited=!game.user.isGM&&(this.actor.ownership[game.user.id]??this.actor.ownership.default)===CONST.DOCUMENT_OWNERSHIP_LEVELS.LIMITED,sheetData.isKeeper=game.user.isGM,sheetData.allowUnlock="always"===game.settings.get("CoC7","playerUnlockSheetMode")||game.user.isGM||"creation"===game.settings.get("CoC7","playerUnlockSheetMode")&&game.settings.get("CoC7","charCreationEnabled"),"creation"===game.settings.get("CoC7","playerUnlockSheetMode")&&game.settings.get("CoC7","charCreationEnabled")&&(sheetData.data.system.flags.locked=!1),"vehicle"!==this.actor.type&&(sheetData.data.system.characteristics||(sheetData.data.system.characteristics={str:{value:null,short:"CHARAC.STR",label:"CHARAC.Strength",formula:null},con:{value:null,short:"CHARAC.CON",label:"CHARAC.Constitution",formula:null},siz:{value:null,short:"CHARAC.SIZ",label:"CHARAC.Size",formula:null},dex:{value:null,short:"CHARAC.DEX",label:"CHARAC.Dexterity",formula:null},app:{value:null,short:"CHARAC.APP",label:"CHARAC.Appearance",formula:null},int:{value:null,short:"CHARAC.INT",label:"CHARAC.Intelligence",formula:null},pow:{value:null,short:"CHARAC.POW",label:"CHARAC.Power",formula:null},edu:{value:null,short:"CHARAC.EDU",label:"CHARAC.Education",formula:null}}),sheetData.data.system.attribs||(sheetData.data.system.attribs={hp:{value:null,max:null,short:"HP",label:"Hit points",auto:!0},mp:{value:null,max:null,short:"HP",label:"Magic points",auto:!0},lck:{value:null,short:"LCK",label:"Luck"},san:{value:null,max:99,short:"SAN",label:"Sanity",auto:!0},mov:{value:null,short:"MOV",label:"Movement rate",auto:!0},db:{value:null,short:"DB",label:"Damage bonus",auto:!0},build:{value:null,short:"BLD",label:"Build",auto:!0},armor:{value:null,auto:!1}}),sheetData.data.system.biography||(sheetData.data.system.biography={personalDescription:{type:"string",value:""}}),sheetData.data.system.infos||(sheetData.data.system.infos={occupation:"",age:"",sex:"",residence:"",birthplace:"",archetype:"",organization:"",playername:""}),sheetData.data.system.flags||(sheetData.data.system.flags={locked:!0,manualCredit:!1}),sheetData.data.system.credit||(sheetData.data.system.credit={monetarySymbol:null,multiplier:null,spent:null,assetsDetails:null}),sheetData.data.system.development||(sheetData.data.system.development={personal:null,occupation:null,archetype:null}),sheetData.data.system.biography||(sheetData.data.system.biography=[]),sheetData.pulpRuleArchetype=game.settings.get("CoC7","pulpRuleArchetype"),sheetData.pulpRuleOrganization=game.settings.get("CoC7","pulpRuleOrganization")),sheetData.isDead=this.actor.dead,sheetData.isDying=this.actor.dying,sheetData.items){for(const item of sheetData.items){if("skill"===item.type)if(item.system.properties.special&&(item.system.properties.fighting&&(item.system.specialization=game.i18n.localize("CoC7.FightingSpecializationName")),item.system.properties.firearm&&(item.system.specialization=game.i18n.localize("CoC7.FirearmSpecializationName")),item.system.properties.ranged&&(item.system.specialization=game.i18n.localize("CoC7.RangedSpecializationName"))),"character"!==this.actor.type){if(isNaN(Number(item.system.value))){let value=null;const parsed={};for(const[key,value]of Object.entries(COC7.formula.actorsheet))key.startsWith("@")&&value.startsWith("this.")&&(parsed[key.substring(1)]=foundry.utils.getProperty(this,value.substring(5)));try{value=(await new Roll(item.system.value,parsed).evaluate({async:!0})).total}catch(err){console.warn(game.i18n.format("CoC7.ErrorUnableToParseSkillFormula",{value:item.system.value,name:item.name})),value=null}if(value){item.system.value=value;const itemToUpdate=this.actor.items.get(item._id);console.info(`[COC7] (Actor:${this.name}) Evaluating skill ${item.name}:${item.system.value} to ${value}`),await itemToUpdate.update({"system.value":value})}}const skill=this.actor.items.get(item._id),{base,rawValue,value}=skill.system;item.system.rawValue=rawValue||value||base,item.system.value=value||base}else{const skill=this.actor.items.get(item._id);if(item.system.base=await skill.asyncBase(),item.system.value){let updatedExp=(item.system.adjustments?.experience?parseInt(item.system.adjustments.experience):0)+parseInt(item.system.value)-skill.value;updatedExp<=0&&(updatedExp=null),console.info(`[COC7] Updating skill ${skill.name} experience. Experience missing: ${updatedExp}`),await this.actor.updateEmbeddedDocuments("Item",[{_id:item._id,"system.adjustments.experience":updatedExp,"system.value":null}]),item.system.adjustments||(item.system.adjustments={}),item.system.adjustments.experience=updatedExp,item.system.rawValue=skill.rawValue,item.system.value=skill.value}else item.system.value=skill.value,item.system.rawValue=skill.rawValue}let list=sheetData.itemsByType[item.type];list||(list=[],sheetData.itemsByType[item.type]=list),list.push(item)}for(const itemType in sheetData.itemsByType)sheetData.itemsByType[itemType].sort(CoC7Utilities.sortByNameKey);sheetData.skills=sheetData.items.filter((item=>"skill"===item.type)).sort(CoC7Utilities.sortByNameKey),sheetData.meleeSkills=sheetData.skills.filter((skill=>!0===skill.system.properties.combat&&!0===skill.system.properties.fighting)),sheetData.rangeSkills=sheetData.skills.filter((skill=>!0===skill.system.properties.combat&&(!0===skill.system.properties.firearm||!0===skill.system.properties.ranged)));const cbtSkills=sheetData.skills.filter((skill=>!0===skill.system.properties.combat));if(cbtSkills)for(const skill of cbtSkills)sheetData.combatSkills[skill._id]=skill;const weapons=sheetData.itemsByType.weapon;if(weapons)for(const weapon of weapons){if(weapon.usesAlternateSkill=!0===weapon.system.properties.auto||!0===weapon.system.properties.brst,weapon.system.ammo||(weapon.system.ammo=0),weapon.skillSet=!0,""===weapon.system.skill.main.id)weapon.skillSet=!1;else{if(sheetData.combatSkills[weapon.system.skill.main.id]){const skill=this.actor.items.get(weapon.system.skill.main.id);weapon.system.skill.main.name=skill.system.skillName,weapon.system.skill.main.value=skill.value}else weapon.skillSet=!1;if(""!==weapon.system.skill.alternativ.id&&sheetData.combatSkills[weapon.system.skill.alternativ.id]){const skill=this.actor.items.get(weapon.system.skill.alternativ.id);weapon.system.skill.alternativ.name=skill.system.skillName,weapon.system.skill.alternativ.value=skill.value}}weapon.system._properties=[];for(const[key,value]of Object.entries(COC7.weaponProperties)){const property={};property.id=key,property.name=value,property.value=!0===weapon.system.properties[key],weapon.system._properties.push(property)}sheetData.weapons[weapon._id]=weapon,weapon.system.properties.rngd?sheetData.rangeWpn.push(weapon):sheetData.meleeWpn.push(weapon)}const token=this.token;if(sheetData.tokenId=token?`${token.parent?.id?token.parent.id:"TOKEN"}.${token.id}`:null,sheetData.hasEmptyValueWithFormula=!1,sheetData.data.system.characteristics)for(const characteristic of Object.values(sheetData.data.system.characteristics))characteristic.value||(characteristic.editable=!0),characteristic.hard=Math.floor(characteristic.value/2),characteristic.extreme=Math.floor(characteristic.value/5),characteristic.value||characteristic.formula?characteristic.display=!0:characteristic.display=!1,!characteristic.value&&characteristic.formula&&(characteristic.hasEmptyValueWithFormula=!0),sheetData.hasEmptyValueWithFormula=sheetData.hasEmptyValueWithFormula||characteristic.hasEmptyValueWithFormula}if(["vehicle","container"].includes(this.actor.type))sheetData.data.system.attribs.hp.auto=!1,sheetData.data.system.attribs.mp.auto=!1,sheetData.data.system.attribs.san.auto=!1,sheetData.data.system.attribs.mov.auto=!1,sheetData.data.system.attribs.db.auto=!1,sheetData.data.system.attribs.build.auto=!1;else{const auto=this.actor.checkUndefinedAuto();sheetData.data.system=foundry.utils.mergeObject(sheetData.data.system,auto)}return sheetData.data.system.attribs.mp.value<0&&(sheetData.data.system.attribs.mp.value=null),sheetData.data.system.attribs.san.value<0&&(sheetData.data.system.attribs.san.value=null),["vehicle"].includes(this.actor.type)||sheetData.data.system.biography instanceof Array&&sheetData.data.system.biography.length&&(sheetData.data.system.biography[0].isFirst=!0,sheetData.data.system.biography[sheetData.data.system.biography.length-1].isLast=!0),sheetData.showInventoryItems=!1,sheetData.showInventoryBooks=!1,sheetData.showInventorySpells=!1,sheetData.showInventoryTalents=!1,sheetData.showInventoryStatuses=!1,sheetData.showInventoryWeapons=!1,sheetData.hasConditions=this.actor.effects.size>0||void 0!==this.actor.system.conditions&&Object.keys(this.actor.system.conditions).filter((condition=>this.actor.system.conditions[condition].value)).length>0,sheetData}get tokenKey(){throw ui.notifications.error("DEPRECATED SHOULD NOT HAPPEN!"),new Error("base.js get tokenKey(): DEPRECATED SHOULD NOT HAPPEN!")}onCloseSheet(){}activateListeners(html){if(super.activateListeners(html),html.find(".section-header").click(this._onSectionHeader.bind(this)),html.find(".items-header").click(this._onItemHeader.bind(this)),html.find(".inventory-header").click(this._onInventoryHeader.bind(this)),html.find(".read-only").dblclick(this._toggleReadOnly.bind(this)),html.find(".add-ammo").click(this._onAddAmo.bind(this)),html.find(".reload-weapon").click((event=>this._onReloadWeapon(event))),html.find(".reload-weapon").on("contextmenu",(event=>this._onReloadWeapon(event))),this.actor.isOwner&&!this.actor.compendium?.locked&&(html.find(".lock").click(this._onLockClicked.bind(this)),html.find(".flag").click(this._onFlagClicked.bind(this)),html.find(".formula").click(this._onFormulaClicked.bind(this)),html.find(".auto-toggle").click(this._onAutoToggle.bind(this))),this.actor.isOwner&&void 0===this.actor.compendium){if(game.settings.get("CoC7","useContextMenus")){this.menus||(this.menus=[]);const rollMenu={id:"skill-roll",classes:"roll-menu",section:[{classes:"main",items:[{action:"roll",label:"Roll"},{action:"opposed-roll",label:"Opposed roll"},{action:"combined-roll",label:"Combined roll"}]},{classes:"keeper",visibility:"gm",items:[{label:{icon:"fas fa-link",text:"Link"},subMenu:{items:[{action:"link-tool",label:"Open in link tool"},{action:"send-chat",label:"Send to chat"},{action:"copy-to-clipboard",label:"Copy to clip-board"}]}},{action:"request-roll",label:"Request roll"}]}]},sanMenu={id:"san-roll",classes:"roll-menu",section:[{classes:"main",items:[{action:"encounter",label:"Encounter"},{action:"roll",label:"Roll"},{action:"opposed-roll",label:"Opposed roll"},{action:"combined-roll",label:"Combined roll"}]},{classes:"keeper",visibility:"trusted",items:[{action:"request-roll",label:"Request roll"},{label:{icon:"fas fa-link",text:"Link"},subMenu:{items:[{action:"link-tool",label:"Open in link tool"},{action:"send-chat",label:"Send to chat"},{action:"copy-to-clipboard",label:"Copy to clip-board"},{action:"link-encounter",label:"Encounter"}]}}]}]},rollContextMenu=new CoC7ContextMenu;rollContextMenu.bind(rollMenu,html,this._onContextMenuClick.bind(this)),this.menus.push(rollContextMenu);const sanContextMenu=new CoC7ContextMenu;sanContextMenu.bind(sanMenu,html,this._onContextMenuClick.bind(this)),this.menus.push(sanContextMenu)}else html.find(".characteristic-label").contextmenu(this._onOpposedRoll.bind(this)),html.find(".skill-name.rollable").contextmenu(this._onOpposedRoll.bind(this)),html.find(".attribute-label.rollable").contextmenu(this._onOpposedRoll.bind(this));html.find(".characteristic-label").click(this._onRollCharacteriticTest.bind(this)),html.find(".skill-name.rollable").click(this._onRollSkillTest.bind(this)),html.find(".skill-image").click(this._onRollSkillTest.bind(this)),html.find(".attribute-label.rollable").click(this._onRollAttribTest.bind(this)),html.find(".token-drag-handle").on("dragstart",this._onDragTokenStart.bind(this)),html.find(".characteristic-label").on("dragstart",(event=>this._onDragCharacteristic(event))),html.find(".attribute-label").on("dragstart",(event=>this._onDragAttribute(event))),html.find(".san-check").on("dragstart",(event=>this._onDragSanCheck(event))),html.find(".weapon-name.rollable").contextmenu(this._onOpposedRoll.bind(this)),html.find(".roll-characteritics").click(this._onRollCharacteriticsValue.bind(this)),html.find(".average-characteritics").click(this._onAverageCharacteriticsValue.bind(this)),html.find(".toggle-switch").click(this._onToggle.bind(this)),(game.user.isGM||game.settings.get("CoC7","statusPlayerEditable"))&&(html.find(".reset-counter").click(this._onResetCounter.bind(this)),html.find(".condition-monitor").click(this._onConditionToggle.bind(this)),html.find(".is-dying").click(this.heal.bind(this)),html.find(".is-dead").click(this.revive.bind(this))),html.find(".dying-check").click(this.checkForDeath.bind(this)),html.find(".item .item-image").click((event=>this._onItemRoll(event))),html.find(".weapon-name.rollable").click((event=>this._onWeaponRoll(event))),html.find(".item-name.effect-name").click((event=>this._onEffect(event))),html.find(".weapon-skill.rollable").click((async event=>this._onWeaponSkillRoll(event))),html.on("click",".weapon-damage",this._onWeaponDamage.bind(this));const wheelInputs=html.find(".attribute-value");for(const wheelInput of wheelInputs)wheelInput.addEventListener("wheel",(event=>this._onWheel(event)),{passive:!0})}this.options.editable&&(html.find(".show-detail").click((event=>this._onItemSummary(event))),html.find(".item-popup").click(this._onItemPopup.bind(this)),html.find(".show-detail").dblclick((event=>this._onRenderItemSheet(event))),html.find(".item-edit").click((event=>this._onRenderItemSheet(event))),html.find(".item-delete").click((async ev=>{const li=$(ev.currentTarget).parents(".item"),itemToDelete=this.actor.items.get(li.data("itemId"),{strict:!0});await itemToDelete.delete(),li.slideUp(200,(()=>this.render(!1)))})),html.find(".add-item").click((ev=>{switch(ev.stopPropagation(),ev.currentTarget.dataset.type){case"book":this.actor.createEmptyBook(ev);break;case"item":this.actor.createEmptyItem(ev);break;case"skill":this.actor.createEmptySkill(ev);break;case"spell":this.actor.createEmptySpell(ev);break;case"weapon":{const properties={};ev.currentTarget.dataset.melee?properties.melee=!0:ev.currentTarget.dataset.rngd&&(properties.rngd=!0),this.actor.createEmptyWeapon(ev,properties)}}})),html.find(".item-trade").click(this._onTradeItem.bind(this)),html.find(".add-new-section").click((()=>{this.actor.createBioSection(),this.render()})),html.find(".delete-section").click((ev=>{const index=parseInt(ev.currentTarget.closest(".bio-section").dataset.index);this.actor.deleteBioSection(index)})),html.find(".move-section-up").click((ev=>{const index=parseInt(ev.currentTarget.closest(".bio-section").dataset.index);this.actor.moveBioSectionUp(index)})),html.find(".move-section-down").click((ev=>{const index=parseInt(ev.currentTarget.closest(".bio-section").dataset.index);this.actor.moveBioSectionDown(index)})),html.find(".development-flag").dblclick((ev=>{this.actor.items.get(ev.currentTarget.closest(".item").dataset.itemId).toggleItemFlag("developement")})),html.find(".occupation-skill-flag.clickable").click((ev=>{this.actor.items.get(ev.currentTarget.closest(".item").dataset.itemId).toggleItemFlag("occupation")})),html.find(".archetype-skill-flag.clickable").click((ev=>{this.actor.items.get(ev.currentTarget.closest(".item").dataset.itemId).toggleItemFlag("archetype")})),html.find(".skill-developement").click((event=>{this.actor.developementPhase(event.shiftKey)})),html.find(".luck-development").click((event=>{event.detail&&1!==event.detail||this.actor.developLuck(event.shiftKey)})),html.find(".clear_conditions").click((event=>{if(void 0!==this.actor.system.conditions){const disable={};for(const condition in this.actor.system.conditions)void 0!==this.actor.system.conditions[condition].value&&!0===this.actor.system.conditions[condition].value&&(disable[`system.conditions.${condition}.value`]=!1);Object.keys(disable).length>0&&this.actor.update(disable)}const effects=this.actor.effects.map((effect=>effect.id));effects.length>0&&this.actor.deleteEmbeddedDocuments("ActiveEffect",effects)})),html.find(".test-trigger").click((async event=>{if(!game.settings.get("CoC7","hiddendevmenu"))return null})),html.find(".skill-name.rollable").mouseenter(this.toolTipSkillEnter.bind(this)).mouseleave(game.CoC7Tooltips.toolTipLeave.bind(this)),html.find(".characteristic-label").mouseenter(this.toolTipCharacteristicEnter.bind(this)).mouseleave(game.CoC7Tooltips.toolTipLeave.bind(this)),html.find(".attribute-label.rollable").mouseenter(this.toolTipAttributeEnter.bind(this)).mouseleave(game.CoC7Tooltips.toolTipLeave.bind(this)),html.find(".auto-toggle").mouseenter(this.toolTipAutoEnter.bind(this)).mouseleave(game.CoC7Tooltips.toolTipLeave.bind(this)),html.find(".item-control.development-flag").mouseenter(this.toolTipFlagForDevelopment.bind(this)).mouseleave(game.CoC7Tooltips.toolTipLeave.bind(this)),html.find(".effect-control").click((ev=>CoC7ActiveEffect.onManageActiveEffect(ev,this.actor))))}toolTipSkillEnter(event){const delay=parseInt(game.settings.get("CoC7","toolTipDelay"));delay>0&&(game.CoC7Tooltips.ToolTipHover=event.currentTarget,game.CoC7Tooltips.toolTipTimer=setTimeout((()=>{const toolTip=game.actors.documentClass.toolTipSkillText();!1!==toolTip&&game.CoC7Tooltips.displayToolTip(toolTip)}),delay))}toolTipCharacteristicEnter(event){const delay=parseInt(game.settings.get("CoC7","toolTipDelay"));if(delay>0){const sheet=this;game.CoC7Tooltips.ToolTipHover=event.currentTarget,game.CoC7Tooltips.toolTipTimer=setTimeout((function(){if(void 0!==game.CoC7Tooltips.ToolTipHover&&null!==game.CoC7Tooltips.ToolTipHover){const char=game.CoC7Tooltips.ToolTipHover.closest(".char-box");if(void 0!==char&&char){const charId=char.dataset.characteristic,characteristic=sheet.actor.characteristics[charId];let toolTip=game.i18n.format("CoC7.ToolTipSkill",{skill:characteristic.label,regular:characteristic.value??0,hard:characteristic.hard??0,extreme:characteristic.extreme??0});game.user.isGM&&(toolTip+=game.i18n.format("CoC7.ToolTipKeeperSkill",{other:game.settings.get("CoC7","stanbyGMRolls")&&sheet.actor.hasPlayerOwner?game.i18n.format("CoC7.ToolTipKeeperStandbySkill",{name:sheet.actor.name}):""})),game.CoC7Tooltips.displayToolTip(toolTip)}}}),delay)}}toolTipAttributeEnter(event){const delay=parseInt(game.settings.get("CoC7","toolTipDelay"));if(delay>0){const sheet=this;game.CoC7Tooltips.ToolTipHover=event.currentTarget,game.CoC7Tooltips.toolTipTimer=setTimeout((function(){if(void 0!==game.CoC7Tooltips.ToolTipHover&&null!==game.CoC7Tooltips.ToolTipHover){const attrib=game.CoC7Tooltips.ToolTipHover.closest(".attribute");if(void 0!==attrib){const attributeId=attrib.dataset.attrib;let toolTip="";const attributes=sheet.actor.system.attribs[attributeId];switch(attributeId){case"lck":toolTip=game.i18n.format("CoC7.ToolTipSkill",{skill:attributes.label,regular:attributes.value??0,hard:Math.floor((attributes.value??0)/2),extreme:Math.floor((attributes.value??0)/5)}),game.user.isGM&&(toolTip+=game.i18n.format("CoC7.ToolTipKeeperSkill",{other:game.settings.get("CoC7","stanbyGMRolls")&&sheet.actor.hasPlayerOwner?game.i18n.format("CoC7.ToolTipKeeperStandbySkill",{name:sheet.actor.name}):""})),game.CoC7Tooltips.displayToolTip(toolTip);break;case"db":toolTip=game.i18n.localize("CoC7.ToolTipDB"),game.CoC7Tooltips.displayToolTip(toolTip);break;case"san":toolTip=game.i18n.format("CoC7.ToolTipSanity",{skill:"Sanity",regular:attributes.value??0,hard:Math.floor((attributes.value??0)/2),extreme:Math.floor((attributes.value??0)/5)}),game.user.isGM&&(toolTip+=game.i18n.format("CoC7.ToolTipKeeperSkill",{other:game.i18n.localize("CoC7.ToolTipKeeperSanity")+(game.settings.get("CoC7","stanbyGMRolls")&&sheet.actor.hasPlayerOwner?game.i18n.format("CoC7.ToolTipKeeperStandbySkill",{name:sheet.actor.name}):"")})),game.CoC7Tooltips.displayToolTip(toolTip)}}}}),delay)}}toolTipAutoEnter(event){const delay=parseInt(game.settings.get("CoC7","toolTipDelay"));delay>0&&(game.CoC7Tooltips.ToolTipHover=event.currentTarget,game.CoC7Tooltips.toolTipTimer=setTimeout((function(){if(void 0!==game.CoC7Tooltips.ToolTipHover&&null!==game.CoC7Tooltips.ToolTipHover){const toolTip=game.i18n.localize("CoC7.ToolTipAutoToggle");game.CoC7Tooltips.displayToolTip(toolTip)}}),delay))}toolTipFlagForDevelopment(event){const delay=parseInt(game.settings.get("CoC7","toolTipDelay"));if(delay>0){const sheet=this;game.CoC7Tooltips.ToolTipHover=event.currentTarget,game.CoC7Tooltips.toolTipTimer=setTimeout((function(){if(void 0!==game.CoC7Tooltips.ToolTipHover&&null!==game.CoC7Tooltips.ToolTipHover){const item=game.CoC7Tooltips.ToolTipHover.closest(".item");if(void 0!==item){const skillId=item.dataset.skillId,skill=sheet.actor.items.get(skillId),toolTip=game.i18n.format("CoC7.ToolTipSkillFlagToggle",{status:game.i18n.localize(skill.system.flags.developement?"CoC7.ToolTipSkillFlagged":"CoC7.ToolTipSkillUnflagged")});game.CoC7Tooltips.displayToolTip(toolTip)}}}),delay)}}_onContextMenuClick(event,target){const targetType=target.dataset?.targetType,rollOptions={preventStandby:!0,fastForward:!1,actor:this.actor};switch(targetType){case"skill":rollOptions.rollType=CoC7ChatMessage.ROLL_TYPE_SKILL,rollOptions.skillId=target.closest(".item")?.dataset.skillId;break;case"characteristic":rollOptions.rollType=CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC,rollOptions.characteristic=target.closest(".char-box").dataset.characteristic;break;case"attribute":rollOptions.rollType=CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE,rollOptions.attribute=target.closest(".attribute").dataset.attrib}switch(event.currentTarget.dataset.action){case"roll":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_NORMAL;break;case"opposed-roll":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_OPPOSED;break;case"combined-roll":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_COMBINED;break;case"request-roll":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_NORMAL,rollOptions.preventStandby=!1;break;case"link-tool":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_NONE,rollOptions.openLinkTool=!0;break;case"send-chat":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_NONE,rollOptions.sendToChat=!0;break;case"copy-to-clipboard":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_NONE,rollOptions.sendToClipboard=!0;break;case"link-encounter":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_NONE,rollOptions.createEncounter=!0;break;case"encounter":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_SAN_CHECK,rollOptions.rollType=CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE,rollOptions.fastForward=!0}CoC7ChatMessage.trigger(rollOptions)}_onRenderItemSheet(event){const li=$(event.currentTarget).parents(".item");this.actor.items.get(li.data("itemId")).sheet.render(!0)}async _onTradeItem(event){const li=$(event.currentTarget).parents(".item"),item=this.actor.items.get(li.data("itemId"));let content="<p>"+game.i18n.localize("CoC7.MessageSelectUserToGiveTo");const message={actorFrom:this.actor.id,scene:null,actorTo:this.actor.id,item:item.id};this.token?.actor&&(message.actorFrom=this.token.id,message.scene=this.token.parent.id);const actors=game.actors.filter((e=>{if(!["character","npc","creature","container"].includes(e.type))return!1;if(this.actor.id===e.id)return!1;let visible=!1;for(const[k,v]of Object.entries(e.ownership))"default"!==k&&k!==game.user.id||(visible=visible||v!==CONST.DOCUMENT_OWNERSHIP_LEVELS.NONE);return visible}));content+='<form id="selectform"><select name="user">';for(const actor of actors)content=content+'<option value="'+actor.id+'">'+actor.name+"</option>";content+="</select></form></p>",message.actorTo=await new Promise((resolve=>{new Dialog({title:game.i18n.localize("CoC7.MessageTitleSelectUserToGiveTo"),content,buttons:{confirm:{label:game.i18n.localize("CoC7.Validate"),callback:html=>{const formData=new FormData(html[0].querySelector("#selectform"));for(const[name,value]of formData)if("user"===name)return resolve(value)}}},default:"confirm",close:()=>{}}).render(!0)})),await game.CoC7socket.executeAsGM("gmtradeitemto",message)}_onDragStart(event){if(super._onDragStart(event),this.token){const dragData=JSON.parse(event.dataTransfer.getData("text/plain"));dragData.tokenUuid=this.token.uuid,dragData.tokenId=this.token.id,dragData.sceneId=this.token.parent.id,event.dataTransfer.setData("text/plain",JSON.stringify(dragData))}}_onDragCharacteristic(event){const box=event.currentTarget.parentElement,data={CoC7Type:"link",linkType:"characteristic",check:"check",type:"CoC7Link",hasPlayerOwner:this.actor.hasPlayerOwner,actorKey:this.actor.actorKey,name:box.dataset.characteristic,icon:null,document:{type:this.document.type,uuid:this.document.uuid}};event.originalEvent.dataTransfer.setData("text/plain",JSON.stringify(data))}_onDragAttribute(event){const box=event.currentTarget.parentElement,data={CoC7Type:"link",linkType:"attribute",check:"check",type:"CoC7Link",hasPlayerOwner:this.actor.hasPlayerOwner,actorKey:this.actor.actorKey,name:box.dataset.attrib,icon:null,document:{type:this.document.type,uuid:this.document.uuid}};event.originalEvent.dataTransfer.setData("text/plain",JSON.stringify(data))}_onDragSanCheck(event){const sanMin=event.currentTarget.querySelector(".san-value.pass"),sanMax=event.currentTarget.querySelector(".san-value.failed"),data={CoC7Type:"link",linkType:"coc7-link",check:"sanloss",hasPlayerOwner:this.actor.hasPlayerOwner,actorKey:this.actor.actorKey,sanMin:sanMin.innerText,sanMax:sanMax.innerText,icon:null,document:{type:this.document.type,uuid:this.document.uuid}};event.originalEvent.dataTransfer.setData("text/plain",JSON.stringify(data))}async _onDrop(event){const dataString=event.dataTransfer.getData("text/plain");if(""===dataString)return!1;const data=JSON.parse(dataString);"CoC7Link"===data.type&&data.check===CoC7Link.CHECK_TYPE.EFFECT&&CoC7Link._onLinkActorClick(this.actor,data),await super._onDrop(event)}async _onConditionToggle(event){event.preventDefault(),event.currentTarget.dataset.condition&&await this.actor.toggleCondition(event.currentTarget.dataset.condition)}async revive(){game.user.isGM&&this.actor.unsetCondition(COC7.status.dead)}async heal(){game.user.isGM&&this.actor.unsetCondition(COC7.status.dying)}async checkForDeath(event){const conCheck=new CoC7ConCheck(this.actor.isToken?this.actor.tokenKey:this.actor.id);conCheck.stayAlive=!0,conCheck.toMessage(event.shiftKey)}async _onDragTokenStart(event){const data={type:"Token",uuid:this.token.uuid};event.originalEvent.dataTransfer.setData("text/plain",JSON.stringify(data))}async _onResetCounter(event){event.preventDefault(),await this.actor.resetDailySanity()}async _onAutoToggle(event){if(event.currentTarget.closest(".attribute")){const attrib=event.currentTarget.closest(".attribute").dataset.attrib;this.actor.toggleAttribAuto(attrib)}}async _onToggle(event){const weapon=this.actor.items.get(event.currentTarget.closest(".item").dataset.itemId);weapon&&weapon.toggleProperty(event.currentTarget.dataset.property,isCtrlKey(event))}async _onRollCharacteriticsValue(){await this.actor.rollCharacteristicsValue()}async _onAverageCharacteriticsValue(){this.actor.averageCharacteristicsValue()}async _onLockClicked(event){event.preventDefault();const isLocked=this.actor.locked;this.actor.locked=!isLocked,Hooks.call("actorLockClickedCoC7",[!isLocked])}async _onFlagClicked(event){event.preventDefault();const flagName=event.currentTarget.dataset.flag;this.actor.toggleActorFlag(flagName)}async _onFormulaClicked(event){event.preventDefault(),this.actor.toggleActorFlag("displayFormula")}async _onWheel(event){let value=parseInt(event.currentTarget.value)||null;switch(event.deltaY>0&&(value=0===value?0:value-1),event.deltaY<0&&(value+=1),event.currentTarget.name){case"system.attribs.hp.value":case"system.attribs.build.current":this.actor.setHp(value);break;case"system.attribs.mp.value":this.actor.setMp(value);break;case"system.attribs.san.value":this.actor.setSan(value);break;case"system.attribs.lck.value":this.actor.setLuck(value)}}_toggleReadOnly(event){event.currentTarget.readOnly=!event.currentTarget.readOnly,event.currentTarget.classList.toggle("read-only")}async _onItemSummary(event){event.preventDefault();const li=$(event.currentTarget).parents(".item"),item=this.actor.items.get(li.data("item-id")),chatData=await item.getChatData({secrets:this.actor.isOwner});if(li.hasClass("expanded")){const summary=li.children(".item-summary");summary.slideUp(200,(()=>{summary.remove(),li.toggleClass("expanded")}))}else{const div=$('<div class="item-summary"></div>'),labels=$('<div class="item-labels"></div>');for(const p of chatData.labels)labels.append(`<div class="item-label"><span class="label-name">${p.name} :</span><span class="label-value">${p.value}</span></div>`);if(div.append(labels),div.append($(`<div class="item-description">${chatData.description.value}</div>`)),item.system.properties?.spcl){const specialDiv=$(`<div class="item-special">${chatData.description.special}</div>`);div.append(specialDiv)}const props=$('<div class="item-properties"></div>');for(const p of chatData.properties)props.append(`<div class="tag item-property">${game.i18n.localize(p)}</div>`);div.append(props),li.append(div.hide()),div.slideDown(200,(()=>li.toggleClass("expanded")))}}async _onSectionHeader(event){event.preventDefault();const section=event.currentTarget.closest("section"),pannelClass=event.currentTarget.dataset.pannel;if(void 0===pannelClass)return;const pannel=$(section).find(`.pannel.${pannelClass}`);pannel.hasClass("expanded")?pannel.slideUp(200,(()=>pannel.toggleClass("expanded"))):pannel.slideDown(200,(()=>pannel.toggleClass("expanded")));const camelFlag=chatHelper.hyphenToCamelCase(`data.pannel.${pannelClass}.expanded`);this.actor.update({[camelFlag]:!pannel.hasClass("expanded")},{render:!1})}_onInventoryHeader(event){event.preventDefault();const li=$(event.currentTarget).siblings("li");li.is(":visible")?li.slideUp(200):li.slideDown(200)}_onItemHeader(event){event.preventDefault();const ol=$(event.currentTarget).next("ol");ol.is(":visible")?ol.slideUp(200):ol.slideDown(200)}async _onItemPopup(event){event.preventDefault();const li=$(event.currentTarget).parents(".item"),item=this.actor.items.get(li.data("item-id"));CoC7ActorSheet.popupSkill(item)}static async popupSkill(skill){skill.system.description.enrichedValue=await TextEditor.enrichHTML(skill.system.description.value,{async:!0});new Dialog({title:game.i18n.localize("CoC7.SkillDetailsWindow"),content:skill,buttons:{},close:()=>{}},{classes:["coc7","sheet","skill"],width:520,height:480,scrollY:[".item-description"],template:"systems/CoC7/templates/apps/skill-details.html"}).render(!0)}async _onItemRoll(event){event.preventDefault()}async _onEffect(event){event.preventDefault();const effectId=event.currentTarget.closest("li").dataset.effectId,effect=this.actor.effects.get(effectId);isCtrlKey(event)&&game.user.isGM&&CoC7ContentLinkDialog.create({type:"CoC7Link",check:CoC7Link.CHECK_TYPE.EFFECT,object:effect})}async _onWeaponRoll(event){event.preventDefault();const itemId=event.currentTarget.closest("li").dataset.itemId,fastForward=event.shiftKey,weapon=this.actor.items.get(itemId);let actorKey;if(actorKey=this.token?this.actor.isToken&&game.actors.tokens[this.token.id]?`TOKEN.${this.token.id}`:`${this.token.parent.id}.${this.token.id}`:this.actor.id,isCtrlKey(event)&&game.user.isGM){const linkData={check:CoC7Link.CHECK_TYPE.ITEM,name:weapon.name};CoC7ContentLinkDialog.create(linkData,{actors:[this.actor]})}else{let proceedWithoutTarget;if(game.user.targets.size<=0&&(proceedWithoutTarget=await new Promise((resolve=>{const data={title:" ",content:game.i18n.format("CoC7.NoTargetSelected",{weapon:weapon.name}),buttons:{cancel:{icon:'<i class="fas fa-times"></i>',label:game.i18n.localize("CoC7.Cancel"),callback:()=>resolve(!1)},proceed:{icon:'<i class="fas fa-check"></i>',label:game.i18n.localize("CoC7.Proceed"),callback:()=>resolve(!0)}},default:"cancel",classes:["coc7","dialog"]};new Dialog(data).render(!0)}))),game.user.targets.size>0||proceedWithoutTarget){if(!weapon.system.properties.rngd){game.user.targets.size>1&&ui.notifications.warn(game.i18n.localize("CoC7.WarnTooManyTarget"));new CoC7MeleeInitiator(actorKey,itemId,fastForward).createChatCard()}if(weapon.system.properties.rngd){new CoC7RangeInitiator(actorKey,itemId,fastForward).createChatCard()}}}}async _onReloadWeapon(event){const itemId=event.currentTarget.closest(".item")?event.currentTarget.closest(".item").dataset.itemId:null;if(!itemId)return;const weapon=this.actor.items.get(itemId);0===event.button?event.shiftKey?await weapon.reload():await weapon.addBullet():2===event.button&&(event.shiftKey?await weapon.setBullets(0):await weapon.shootBullets(1))}async _onAddAmo(event){const itemId=event.currentTarget.closest(".item")?event.currentTarget.closest(".item").dataset.itemId:null;if(!itemId)return;const weapon=this.actor.items.get(itemId);await weapon.addBullet()}async _onWeaponSkillRoll(event){event.preventDefault();const skillId=event.currentTarget.dataset.skillId,actorId=event.currentTarget.closest("form").dataset.actorId,tokenKey=event.currentTarget.closest("form").dataset.tokenId,itemId=event.currentTarget.closest("li")?event.currentTarget.closest("li").dataset.itemId:null,check=new CoC7Check;if(!event.shiftKey){const usage=await RollDialog.create();usage&&(check.diceModifier=usage.get("bonusDice"),check.difficulty=usage.get("difficulty"),check.flatDiceModifier=Number(usage.get("flatDiceModifier")),check.flatThresholdModifier=Number(usage.get("flatThresholdModifier")))}check.actor=tokenKey||actorId,check.skill=skillId,check.item=itemId,await check.roll(),check.toMessage()}async _onWeaponDamage(event){event.preventDefault();const itemId=event.currentTarget.closest(".weapon").dataset.itemId,range=event.currentTarget.closest(".weapon-damage").dataset.range,damageChatCard=new DamageCard({fastForward:event.shiftKey,range});damageChatCard.actorKey=this.actor.tokenKey,damageChatCard.itemId=itemId,damageChatCard.updateChatCard()}async _onOpposedRoll(event){if(event.preventDefault(),"db"===event.currentTarget.parentElement.dataset.attrib)return;const data={rollType:CoC7ChatMessage.ROLL_TYPE_SKILL,cardType:CoC7ChatMessage.CARD_TYPE_OPPOSED,event,actor:this.actor};event.currentTarget.classList.contains("characteristic-label")?data.rollType=CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC:event.currentTarget.classList.contains("attribute-label")&&(data.rollType=CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE),event.altKey&&(data.cardType=CoC7ChatMessage.CARD_TYPE_COMBINED),CoC7ChatMessage.trigger(data)}async _onRollCharacteriticTest(event){event.preventDefault(),event.currentTarget.classList.contains("flagged4dev")||(game.settings.get("CoC7","useContextMenus")?CoC7ChatMessage.trigger({rollType:CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC,cardType:CoC7ChatMessage.CARD_TYPE_NORMAL,preventStandby:!0,fastForward:!0,characteristic:event.currentTarget.closest(".char-box").dataset.characteristic,actor:this.actor}):CoC7ChatMessage.trigger({rollType:CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC,cardType:CoC7ChatMessage.CARD_TYPE_NORMAL,event,actor:this.actor}))}async _onRollAttribTest(event){event.preventDefault();const attrib=event.currentTarget.parentElement.dataset.attrib;if("db"!==attrib)game.settings.get("CoC7","useContextMenus")?CoC7ChatMessage.trigger({rollType:CoC7ChatMessage.ROLL_TYPE_CHARACTERISTIC,cardType:CoC7ChatMessage.CARD_TYPE_NORMAL,preventStandby:!0,fastForward:!0,attribute:event.currentTarget.closest(".attribute").dataset.attrib,actor:this.actor}):CoC7ChatMessage.trigger({rollType:CoC7ChatMessage.ROLL_TYPE_ATTRIBUTE,cardType:event.altKey&&"san"===attrib?CoC7ChatMessage.CARD_TYPE_SAN_CHECK:CoC7ChatMessage.CARD_TYPE_NORMAL,event,actor:this.actor});else if(!/^-{0,1}\d+$/.test(event.currentTarget.parentElement.dataset.rollFormula)){const r=new Roll(event.currentTarget.parentElement.dataset.rollFormula);await r.roll({async:!0}),isNaN(r.total)||void 0===r.total||r.toMessage({speaker:ChatMessage.getSpeaker(),flavor:game.i18n.localize("CoC7.BonusDamageRoll")})}}_onRollSkillTest(event){event.preventDefault(),event.currentTarget.classList.contains("flagged4dev")||(game.settings.get("CoC7","useContextMenus")?CoC7ChatMessage.trigger({rollType:CoC7ChatMessage.ROLL_TYPE_SKILL,cardType:CoC7ChatMessage.CARD_TYPE_NORMAL,preventStandby:!0,fastForward:!0,skillId:event?.currentTarget.closest(".item")?.dataset.skillId,actor:this.actor}):CoC7ChatMessage.trigger({rollType:CoC7ChatMessage.ROLL_TYPE_SKILL,cardType:CoC7ChatMessage.CARD_TYPE_NORMAL,event,actor:this.actor}))}async _updateObject(event,formData){const overrides=foundry.utils.flattenObject(this.actor.overrides),name=event?.currentTarget?.name;if(name&&overrides&&overrides[name]&&ui.notifications.warn(game.i18n.format("CoC7.EffectAppliedCantOverride",{name})),event.currentTarget&&event.currentTarget.classList){if(event.currentTarget.classList.contains("skill-adjustment")){const item=this.actor.items.get(event.currentTarget.closest(".item").dataset.itemId);if(item){const value=event.currentTarget.value?parseInt(event.currentTarget.value):null;if(event.currentTarget.value?isNaN(value)||await item.update({[event.currentTarget.name]:value}):await item.update({[event.currentTarget.name]:null}),game.i18n.localize("CoC7.CoCIDFlag.keys.i.skill.credit-rating")===item.name&&void 0!==this.actor.occupation?.system?.creditRating?.max){const creditValue=(item.value||0)-(item.system.adjustments?.experience||0);(creditValue>Number(this.actor.occupation.system.creditRating.max)||creditValue<Number(this.actor.occupation.system.creditRating.min))&&ui.notifications.warn(game.i18n.format("CoC7.CreditOutOfRange",{min:Number(this.actor.occupation.system.creditRating.min),max:Number(this.actor.occupation.system.creditRating.max)}))}}}if(event.currentTarget.classList.contains("attribute-value")){if("system.attribs.san.value"===event.currentTarget.name)return await this.actor.setSan(parseInt(event.currentTarget.value)),void this.render(!0);if("system.attribs.hp.value"===event.currentTarget.name)return await this.actor.setHp(parseInt(event.currentTarget.value)),void this.render(!0)}if(event.currentTarget.classList.contains("text-area"))return void this.actor.updateTextArea(event.currentTarget);if(event.currentTarget.classList.contains("bio-section-value")){const index=parseInt(event.currentTarget.closest(".bio-section").dataset.index);await this.actor.updateBioValue(index,event.currentTarget.value)}if(event.currentTarget.classList.contains("bio-section-title")){const index=parseInt(event.currentTarget.closest(".bio-section").dataset.index);this.actor.updateBioTitle(index,event.currentTarget.value)}if(event.currentTarget.classList.contains("npc-skill-score")){const skill=this.actor.items.get(event.currentTarget.closest(".item").dataset.skillId);skill&&await skill.updateValue(event.currentTarget.value)}if(event.currentTarget.classList.contains("skill-name")||event.currentTarget.classList.contains("item-name")){const item=this.actor.items.get(event.currentTarget.closest(".item").dataset.skillId);if(item){const data={};if(item.system.properties.special){const parts=CoC7Item.getNamePartsSpec(event.currentTarget.value,item.system.specialization);data.name=parts.name,data["system.skillName"]=parts.skillName,data["system.specialization"]=parts.specialization}else data["system.skillName"]=event.currentTarget.value,data.name=event.currentTarget.value;await item.update(data)}}if(event.currentTarget.classList.contains("characteristic-formula")&&0!==event.currentTarget.value.length){const r=new Roll(event.currentTarget.value);await r.roll({async:!0}),(isNaN(r.total)||void 0===r.total)&&(ui.notifications.error(game.i18n.format("CoC7.ErrorInvalidFormula",{value:event.currentTarget.value})),formData[event.currentTarget.name]=game.i18n.format("CoC7.ErrorInvalid"))}if(event.currentTarget.classList.contains("attribute-value")&&0!==event.currentTarget.value.length&&"db"===event.currentTarget.closest(".attribute").dataset.attrib){const r=new Roll(event.currentTarget.value);await r.roll({async:!0}),(isNaN(r.total)||void 0===r.total)&&(ui.notifications.error(game.i18n.format("CoC7.ErrorInvalidFormula",{value:event.currentTarget.value})),formData[event.currentTarget.name]=game.i18n.format("CoC7.ErrorInvalid"))}if(event.currentTarget.classList.contains("weapon-skill")){const weapon=this.actor.items.get(event.currentTarget.closest(".item").dataset.itemId),skill=this.actor.items.get(event.currentTarget.options[event.currentTarget.selectedIndex].value);if(weapon&&skill)switch(event.currentTarget.dataset.skill){case"main":await weapon.update({"system.skill.main.id":skill.id,"system.skill.main.name":skill.name});break;case"alternativ":await weapon.update({"system.skill.alternativ.id":skill.id,"system.skill.alternativ.name":skill.name})}}if(event.currentTarget.classList.contains("weapon-name")){const weapon=this.actor.items.get(event.currentTarget.closest(".item").dataset.itemId);weapon&&await weapon.update({name:event.currentTarget.value})}if(event.currentTarget.classList.contains("damage-formula")){const weapon=this.actor.items.get(event.currentTarget.closest(".item").dataset.itemId);if(weapon)if(0!==event.currentTarget.value.length){const r=new Roll(event.currentTarget.value);if(await r.roll({async:!0}),isNaN(r.total)||void 0===r.total)ui.notifications.error(game.i18n.format("CoC7.ErrorUnableToParseFormula",{value:event.currentTarget.value}));else switch(event.currentTarget.dataset.range){case"normal":await weapon.update({"system.range.normal.damage":event.currentTarget.value});break;case"long":await weapon.update({"system.range.long.damage":event.currentTarget.value});break;case"extreme":await weapon.update({"system.range.extreme.damage":event.currentTarget.value})}}else switch(event.currentTarget.dataset.range){case"normal":await weapon.update({"system.range.normal.damage":null});break;case"long":await weapon.update({"system.range.long.damage":null});break;case"extreme":await weapon.update({"system.range.extreme.damage":null})}}}return this.object.update(formData)}}class CoC7NPCSheet extends CoC7ActorSheet{async getData(){const sheetData=await super.getData();return sheetData.allowFormula=!0,sheetData.displayFormula=this.actor.getActorFlag("displayFormula")||!1,sheetData.hasSan=null!==sheetData.data.system.attribs.san.value,sheetData.hasMp=null!==sheetData.data.system.attribs.mp.value,sheetData.hasLuck=null!==sheetData.data.system.attribs.lck.value,sheetData.isCreature=!1,sheetData.showInventoryItems=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"item")||!sheetData.data.system.flags.locked,sheetData.showInventoryBooks=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"book")||!sheetData.data.system.flags.locked,sheetData.showInventorySpells=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"spell")||!sheetData.data.system.flags.locked,sheetData.showInventoryTalents=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"talent")||!sheetData.data.system.flags.locked&&game.settings.get("CoC7","pulpRuleTalents"),sheetData.showInventoryStatuses=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"status")||!sheetData.data.system.flags.locked,sheetData.showInventoryWeapons=!1,sheetData.hasInventory=sheetData.showInventoryItems||sheetData.showInventoryBooks||sheetData.showInventorySpells||sheetData.showInventoryTalents||sheetData.showInventoryStatuses||sheetData.showInventoryWeapons,sheetData.enrichedBiographyPersonalDescription=await TextEditor.enrichHTML(sheetData.data.system.biography.personalDescription?.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData}activateListeners(html){if(super.activateListeners(html),game.settings.get("CoC7","useContextMenus")){this.menus||(this.menus=[]);const sanlossMenu={id:"san-loss-roll",classes:"roll-menu",section:[{classes:"main",items:[{action:"link-tool",label:"Open in link tool"},{action:"send-chat",label:"Send to chat"},{action:"copy-to-clipboard",label:"Copy to clip-board"}]}]},sanlossContextMenu=new CoC7ContextMenu;sanlossContextMenu.bind(sanlossMenu,html,this._onSanLossContextMenuClick.bind(this)),this.menus.push(sanlossContextMenu)}html.find(".roll-san").click(this._onSanCheck.bind(this))}async _onSanLossContextMenuClick(event){const rollOptions={rollType:CoC7ChatMessage.ROLL_TYPE_ENCOUNTER,preventStandby:!0,fastForward:!1,event,cardType:CoC7ChatMessage.CARD_TYPE_SAN_CHECK,actor:this.actor};switch(event.currentTarget.dataset.action){case"link-tool":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_NONE,rollOptions.createEncounter=!0,rollOptions.openLinkTool=!0;break;case"send-chat":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_NONE,rollOptions.createEncounter=!0,rollOptions.sendToChat=!0;break;case"copy-to-clipboard":rollOptions.cardType=CoC7ChatMessage.CARD_TYPE_NONE,rollOptions.createEncounter=!0,rollOptions.sendToClipboard=!0}CoC7ChatMessage.trigger(rollOptions)}async _onSanCheck(event){if(event.preventDefault(),this.actor.system.special.sanLoss.checkPassed||this.actor.system.special.sanLoss.checkFailled)if(isCtrlKey(event)&&game.user.isGM){let difficulty,modifier;if(!event.shiftKey){const usage=await RollDialog.create({disableFlatDiceModifier:!0});usage&&(modifier=Number(usage.get("bonusDice")),difficulty=Number(usage.get("difficulty")))}const linkData={check:"sanloss",sanMin:this.actor.system.special.sanLoss.checkPassed,sanMax:this.actor.system.special.sanLoss.checkFailled,sanReason:this.actor.system.infos.type?.length?this.actor.system.infos.type:this.actor.name,tokenKey:this.actor.actorKey};"blindroll"===game.settings.get("core","rollMode")&&(linkData.blind=!0),void 0!==modifier&&(linkData.modifier=modifier),void 0!==difficulty&&(linkData.difficulty=difficulty);const link=(new CoC7Link)._createDocumentLink(linkData);link&&chatHelper.createMessage(null,game.i18n.format("CoC7.MessageCheckRequestedWait",{check:link}))}else{const sanData={sanMax:this.actor.sanLossCheckFailled,sanMin:this.actor.sanLossCheckPassed,sanReason:this.actor.system.infos.type?.length?this.actor.system.infos.type:this.actor.name,tokenKey:this.actor.actorKey};SanCheckCard.checkTargets(sanData,event.shiftKey)}}onCloseSheet(){this.actor.unsetActorFlag("displayFormula"),super.onCloseSheet()}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheet","actor","npc"],dragDrop:[{dragSelector:".item",dropSelector:null}],template:"systems/CoC7/templates/actors/npc-sheet.html",width:580,resizable:!1,minimizable:!0})}async _updateObject(event,formData){if(!(event.currentTarget&&event.currentTarget.classList&&event.currentTarget.classList.contains("characteristic-score")))return super._updateObject(event,formData);this.actor.setCharacteristic(event.currentTarget.name,event.currentTarget.value)}static forceAuto(app,html){html.height("auto")}setPosition(a){super.setPosition(a),CoC7NPCSheet.forceAuto(a,this._element)}}class CoC7CreatureSheet extends CoC7NPCSheet{async getData(){const sheetData=await super.getData();return sheetData.isCreature=!0,sheetData}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheet","actor","npc","creature"]})}}class CoC7CreateMythosEncounter extends FormApplication{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7"],title:game.i18n.localize("CoC7.SanityLossTypeDialogTitle"),template:"systems/CoC7/templates/apps/sanity-loss-type.hbs",height:"auto"})}async getData(){const data=await super.getData();return data.isImmunity="immunity"===data.object.type,data}activateListeners(html){html.find(".field_type").change(this._onSelectChange.bind(this)),html.find(".dialog-button").click(this._onButtonClick.bind(this)),super.activateListeners(html)}_onButtonClick(event){if("add"===event.currentTarget.dataset.button){const html=$(event.currentTarget).closest(".window-content"),type=html.find(".field_type").val(),name=html.find(".field_name").val(),value=parseInt(html.find(".field_value").val()),sanityLossEvents=this.object.actor.system.sanityLossEvents??[];sanityLossEvents.push({type:name,totalLoss:value,immunity:"immunity"===type}),sanityLossEvents.sort((function(left,right){return left.type.localeCompare(right.type)})),this.object.actor.update({"data.sanityLossEvents":sanityLossEvents})}this.close()}_onSelectChange(event){const html=$(event.currentTarget).closest(".window-content");this.object.name=html.find(".field_name").val(),this.object.type=html.find(".field_type").val(),this.render(!0)}async _updateObject(event,formData){}}class CoC7CharacterSheet extends CoC7ActorSheet{_getHeaderButtons(){if("CoC7CharacterSheet"===this.constructor.name){this.summarized||(this.summarized=!1);let buttons=super._getHeaderButtons();return buttons=[{label:this.summarized?game.i18n.localize("CoC7.Maximize"):game.i18n.localize("CoC7.Summarize"),class:"test-extra-icon",icon:this.summarized?"fas fa-window-maximize":"fas fa-window-minimize",onclick:event=>this.toggleSheetMode(event)}].concat(buttons),buttons}return super._getHeaderButtons()}async toggleSheetMode(event){this.summarized=!this.summarized;let options=foundry.utils.duplicate(CoC7CharacterSheet.defaultOptions);this.summarized&&(options=foundry.utils.mergeObject(options,{classes:["coc7","actor","character","summarized"],height:200,resizable:!1,width:700})),options.token=this.options.token,await this.close(),await this.render(!0,options)}async getData(){const sheetData=await super.getData();this.isEditable&&void 0===this.actor.getFlag("CoC7","skillListMode")&&await this.actor.setFlag("CoC7","skillListMode",!1),this.isEditable&&void 0===this.actor.getFlag("CoC7","skillShowUncommon")&&await this.actor.setFlag("CoC7","skillShowUncommon",!0),sheetData.skillListModeValue=this.actor.getFlag("CoC7","skillListMode")??!1,sheetData.skillShowUncommon=this.actor.getFlag("CoC7","skillShowUncommon")??!0,sheetData.showIconsOnly=game.settings.get("CoC7","showIconsOnly"),this.actor.occupation?(sheetData.data.system.infos.occupation=this.actor.occupation.name,sheetData.data.system.infos.occupationSet=!0):sheetData.data.system.infos.occupationSet=!1,this.actor.archetype?(sheetData.data.system.infos.archetype=this.actor.archetype.name,sheetData.data.system.infos.archetypeSet=!0):sheetData.data.system.infos.archetypeSet=!1,sheetData.totalExperience=this.actor.experiencePoints,sheetData.totalOccupation=this.actor.occupationPointsSpent,sheetData.invalidOccupationPoints=Number(this.actor.occupationPointsSpent)!==Number(this.actor.system.development?.occupation),sheetData.totalArchetype=this.actor.archetypePointsSpent,sheetData.invalidArchetypePoints=Number(this.actor.archetypePointsSpent)!==Number(this.actor.system.development?.archetype),sheetData.totalPersonal=this.actor.personalPointsSpent,sheetData.invalidPersonalPoints=Number(this.actor.personalPointsSpent)!==Number(this.actor.system.development?.personal),sheetData.creditRatingMax=Number(this.actor.occupation?.system.creditRating.max),sheetData.creditRatingMin=Number(this.actor.occupation?.system.creditRating.min),sheetData.invalidCreditRating=this.actor.creditRatingSkill?.system.adjustments?.occupation>sheetData.creditRatingMax||this.actor.creditRatingSkill?.system.adjustments?.occupation<sheetData.creditRatingMin,sheetData.pulpTalentCount=sheetData.itemsByType.talent?.length?sheetData.itemsByType.talent?.length:0,sheetData.minPulpTalents=this.actor.archetype?.system.talents?this.actor.archetype?.system.talents:0,sheetData.invalidPulpTalents=sheetData.pulpTalentCount<sheetData.minPulpTalents,sheetData.hasDevelopmentPhase=this.actor.hasDevelopmentPhase,sheetData.allowDevelopment=game.settings.get("CoC7","developmentEnabled"),sheetData.allowCharCreation=game.settings.get("CoC7","charCreationEnabled"),sheetData.developmentRollForLuck=game.settings.get("CoC7","developmentRollForLuck"),sheetData.showDevPannel=sheetData.allowDevelopment||sheetData.allowCharCreation,sheetData._monetaryFormats=[];for(const key in COC7.monetaryFormats)sheetData._monetaryFormats.push({key,val:game.i18n.localize(COC7.monetaryFormats[key])});sheetData.showCurrencySymbol=["decimalLeft","decimalRight","integerLeft","integerRight"].includes(sheetData.data.system.monetary.format),sheetData._monetaryTypes=[];for(const key in COC7.monetaryTypes)(0===COC7.monetaryTypes[key].filter.length||COC7.monetaryTypes[key].filter.includes(sheetData.data.system.monetary.format))&&sheetData._monetaryTypes.push({key,val:game.i18n.localize(COC7.monetaryTypes[key].name)});sheetData.manualCredit=this.actor.getActorFlag("manualCredit"),sheetData.manualCredit||(sheetData.monetary={spendingLevel:CoCActor.monetaryFormat(sheetData.data.system.monetary.format,sheetData.data.system.monetary.symbol,this.actor.spendingLevel),assets:CoCActor.monetaryFormat(sheetData.data.system.monetary.format,sheetData.data.system.monetary.symbol,this.actor.assets),cash:CoCActor.monetaryFormat(sheetData.data.system.monetary.format,sheetData.data.system.monetary.symbol,this.actor.cash)}),sheetData.oneBlockBackStory=game.settings.get("CoC7","oneBlockBackstory"),sheetData.summarized=this.summarized&&!sheetData.permissionLimited,sheetData.skillList=[];let previousSpec="";for(const skill of sheetData.skills)!sheetData.skillShowUncommon&&skill.system.properties.rarity||(skill.system.properties.special&&previousSpec!==skill.system.specialization&&(previousSpec=skill.system.specialization,sheetData.skillList.push({isSpecialization:!0,name:skill.system.specialization})),sheetData.skillList.push(skill));if(sheetData.skillsByValue=[...sheetData.skills].sort(((a,b)=>b.system.value-a.system.value)),sheetData.topSkills=[...sheetData.skillsByValue].slice(0,14),sheetData.skillsByValue=sheetData.skillsByValue.filter((skill=>sheetData.skillShowUncommon||!skill.system.properties.rarity)),sheetData.topWeapons=[...sheetData.meleeWpn,...sheetData.rangeWpn].sort(((a,b)=>a.system.skill.main?.value-b.system.skill.main?.value)).reverse().slice(0,3),sheetData.displayPlayerName=game.settings.get("CoC7","displayPlayerNameOnSheet"),sheetData.displayPlayerName&&!sheetData.data.system.infos.playername){const user=this.actor.characterUser;user&&(sheetData.data.system.infos.playername=user.name)}return sheetData.skillListEmpty=0===sheetData.skills.length,sheetData.showInventoryItems=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"item")||!sheetData.data.system.flags.locked,sheetData.showInventoryBooks=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"book")||!sheetData.data.system.flags.locked,sheetData.showInventorySpells=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"spell")||!sheetData.data.system.flags.locked,sheetData.showInventoryTalents=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"talent")||!sheetData.data.system.flags.locked&&game.settings.get("CoC7","pulpRuleTalents"),sheetData.showInventoryStatuses=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"status")||!sheetData.data.system.flags.locked,sheetData.hasInventory=sheetData.showInventoryItems||sheetData.showInventoryBooks||sheetData.showInventorySpells||sheetData.showInventoryTalents||sheetData.showInventoryStatuses||sheetData.showInventoryWeapons,sheetData.enrichedBackstory=await TextEditor.enrichHTML(sheetData.data.system.backstory,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData}_saveScrollPositions(html){super._saveScrollPositions(html);this._scrollPositionsX=[".right-panel .tab.development ol"].reduce(((pos,sel)=>{const el=html.find(sel);return pos[sel]=Array.from(el).map((el=>el.scrollLeft)),pos}),{})}_restoreScrollPositions(html){super._restoreScrollPositions(html);const selectors=[".right-panel .tab.development ol"],positions=this._scrollPositionsX||{};for(const sel of selectors){html.find(sel).each(((i,el)=>{el.scrollLeft=positions[sel]?.[i]||0}))}}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheetV2","actor","character"],template:"systems/CoC7/templates/actors/character/index.html",width:687,height:623,resizable:!0,dragDrop:[{dragSelector:".item",dropSelector:null}],scrollY:[".right-panel .tab"],tabs:[{navSelector:".sheet-nav",contentSelector:".sheet-body",initial:"skills"}]})}activateListeners(html){super.activateListeners(html),this.actor.isOwner&&(html.find(".skill-name.rollable.flagged4dev").click((async event=>this._onSkillDev(event))),html.find(".reset-occupation").click((async()=>await this.actor.resetOccupation())),html.find(".reset-archetype").click((async()=>await this.actor.resetArchetype())),html.find(".open-item").click((event=>this._onItemDetails(event))),html.find(".toggle-list-mode").click((event=>{this.toggleSkillListMode(event)})),html.find(".toggle-uncommon-mode").click((event=>{this.toggleSkillUncommonMode(event)})),game.user.isGM&&(html.find(".sanity-loss-type-add").click(this._onAddSanityLossReason.bind(this)),html.find(".sanity-loss-type-delete").click(this._onDeleteSanityLossReason.bind(this)),html.find(".mythosEncountersTotalLoss").blur(this._onEditSanityLossReason.bind(this)),html.find(".toggle-keeper-flags").click(this._onToggleKeeperFlags.bind(this)),html.find(".add-monetary").click(this._onAddMonetary.bind(this)),html.find(".remove-monetary").click(this._onRemoveMonetary.bind(this))))}_onAddMonetary(){const values=this.actor.system.monetary.values?foundry.utils.duplicate(this.actor.system.monetary.values):[];values.push({name:"",min:null,max:null,cashType:0,cashValue:"",assetsType:0,assetsValue:"",spendingType:0,spendingValue:""}),this.actor.update({"system.monetary.values":values})}_onRemoveMonetary(event){const div=event.currentTarget.closest(".item"),values=foundry.utils.duplicate(this.actor.system.monetary.values);values.splice(Number(div.dataset.index),1),this.actor.update({"system.monetary.values":values})}_onToggleKeeperFlags(event){switch(event.preventDefault(),event.currentTarget.dataset.flag){case"mythosInsanityExperienced":this.actor.setFlag("CoC7","mythosInsanityExperienced",!this.actor.mythosInsanityExperienced);break;case"mythosHardened":this.actor.setFlag("CoC7","mythosHardened",!this.actor.mythosHardened)}}async _onAddSanityLossReason(event){event.preventDefault(),new CoC7CreateMythosEncounter({actor:this.actor,type:event.currentTarget.dataset.type},{}).render(!0)}async _onEditSanityLossReason(event){const input=$(event.currentTarget),offset=input.closest(".flexrow").data("offset");if(void 0!==this.actor.system.sanityLossEvents?.[offset]?.totalLoss){const sanityLossEvents=foundry.utils.duplicate(this.actor.system.sanityLossEvents);sanityLossEvents[offset].totalLoss=parseInt(input.val(),10),this.actor.update({"system.sanityLossEvents":sanityLossEvents})}}_onDeleteSanityLossReason(event){event.preventDefault();const offset=$(event.currentTarget).closest(".flexrow").data("offset"),sanityLossEvents=this.actor.system.sanityLossEvents??[];sanityLossEvents.splice(offset,1),sanityLossEvents.sort((function(left,right){return left.type.localeCompare(right.type)})),this.actor.update({"system.sanityLossEvents":sanityLossEvents})}async toggleSkillListMode(event){return await this.actor.setFlag("CoC7","skillListMode",!this.actor.getFlag("CoC7","skillListMode")),await this.render(!0)}async toggleSkillUncommonMode(event){return await this.actor.setFlag("CoC7","skillShowUncommon",!this.actor.getFlag("CoC7","skillShowUncommon")),await this.render(!0)}async _onSkillDev(event){event.preventDefault();const skillId=event.currentTarget.closest(".item").dataset.itemId;await this.actor.developSkill(skillId,event.shiftKey)}_onItemDetails(event){event.preventDefault();const type=event.currentTarget.dataset.type,item=this.actor[type];item&&item.sheet.render(!0)}_updateObject(event,formData){const system=foundry.utils.expandObject(formData)?.system;system.monetary?.values&&(formData["system.monetary.values"]=Object.values(system.monetary.values||[])),super._updateObject(event,formData)}static renderSheet(sheet,html){if(game.settings.get("CoC7","overrideSheetArtwork")){if(game.settings.get("CoC7","artWorkSheetBackground"))if("null"===game.settings.get("CoC7","artWorkSheetBackground").toLowerCase())sheet.element.css("--main-sheet-bg","url( './assets/images/void.webp')");else if(sheet.element.css("--main-sheet-bg",game.settings.get("CoC7","artWorkSheetBackground")),"slice"!==game.settings.get("CoC7","artWorkSheetBackgroundType")){let styleSheet,cssRuleIndex;for(let i=0;i<document.styleSheets.length;i++)if(document.styleSheets[i].href?.endsWith("coc7g.css")){styleSheet=document.styleSheets[i];break}if(styleSheet)for(let i=0;i<styleSheet.rules.length;i++)if(".sheetV2.character form"===styleSheet.rules[i].selectorText){cssRuleIndex=i;break}if(cssRuleIndex){const CSSStyle=styleSheet.rules[cssRuleIndex].style;switch(CSSStyle.removeProperty("border-image"),CSSStyle.setProperty("background",game.settings.get("CoC7","artWorkSheetBackground")),game.settings.get("CoC7","artWorkSheetBackgroundType")){case"auto":default:CSSStyle.setProperty("background-size","auto");break;case"contain":CSSStyle.setProperty("background-size","contain");break;case"cover":CSSStyle.setProperty("background-size","cover")}}}if(game.settings.get("CoC7","artWorkOtherSheetBackground")&&("null"===game.settings.get("CoC7","artWorkOtherSheetBackground").toLowerCase()?sheet.element.css("--other-sheet-bg","url( './assets/images/void.webp')"):sheet.element.css("--other-sheet-bg",game.settings.get("CoC7","artWorkOtherSheetBackground"))),game.settings.get("CoC7","artworkSheetImage")&&("null"===game.settings.get("CoC7","artworkSheetImage").toLowerCase()?sheet.element.css("--main-sheet-image","url( './assets/images/void.webp')"):sheet.element.css("--main-sheet-image",game.settings.get("CoC7","artworkSheetImage"))),game.settings.get("CoC7","artworkFrontColor")&&sheet.element.css("--main-sheet-front-color",game.settings.get("CoC7","artworkFrontColor")),game.settings.get("CoC7","artworkBackgroundColor")&&sheet.element.css("--main-sheet-back-color",game.settings.get("CoC7","artworkBackgroundColor")),game.settings.get("CoC7","artworkInteractiveColor")&&sheet.element.css("--main-sheet-interactive-color",game.settings.get("CoC7","artworkInteractiveColor")),game.settings.get("CoC7","artworkFixedSkillLength")||(sheet.element.css("--skill-length","auto"),sheet.element.css("--skill-specialization-length","auto")),game.settings.get("CoC7","artworkMainFont")){new FontFace("customSheetFont",game.settings.get("CoC7","artworkMainFont")).load().then((function(loadedFace){document.fonts.add(loadedFace)})).catch((function(error){ui.notifications.error(error)}))}if(game.settings.get("CoC7","artworkMainFontBold")){new FontFace("customSheetFont",game.settings.get("CoC7","artworkMainFontBold"),{weight:"bold"}).load().then((function(loadedFace){document.fonts.add(loadedFace)})).catch((function(error){ui.notifications.error(error)}))}if(game.settings.get("CoC7","artworkMainFontSize")){const size=`${game.settings.get("CoC7","artworkMainFontSize")}px`;size!==$(":root").css("font-size")&&$(":root").css("font-size",size)}}if(void 0!==sheet.actor?.system.pannel)for(const[key,value]of Object.entries(sheet.actor.system.pannel)){const pannelClass=chatHelper.camelCaseToHyphen(key),pannel=html.find(`.pannel.${pannelClass}`);value.expanded?pannel.addClass("expanded"):pannel.removeClass("expanded")}}}class CoC7Combat{static renderCombatTracker(app,html,data){const currentCombat=data.combats[data.currentIndex-1];currentCombat&&(html.find(".combatant").each(((i,el)=>{const combId=el.getAttribute("data-combatant-id"),combatantControlsDiv=el.querySelector(".combatant-controls"),combatant=currentCombat.combatants.get(combId);if(combatant.getFlag("CoC7","hasGun")?$(combatantControlsDiv).prepend(`<a class="combatant-control active add-init" title="${game.i18n.localize("CoC7.PutGunAway")}" data-control="drawGun"><i class="game-icon game-icon-revolver"></i></a>`):$(combatantControlsDiv).prepend(`<a class="combatant-control add-init" title="${game.i18n.localize("CoC7.DrawGun")}" data-control="drawGun"><i class="game-icon game-icon-revolver"></i></a>`),"optional"===game.settings.get("CoC7","initiativeRule")&&game.settings.get("CoC7","displayInitAsText")){if(combatant.initiative){const tokenInitiative=el.querySelector(".token-initiative"),initiativeTest=tokenInitiative.querySelector(".initiative"),roll=100*combatant.initiative-100*Math.floor(combatant.initiative);switch(Math.floor(combatant.initiative)){case CoC7Check.successLevel.fumble:tokenInitiative.classList.add("fumble"),initiativeTest.innerText=game.i18n.localize("CoC7.Fumble"),initiativeTest.title=roll;break;case CoC7Check.successLevel.failure:tokenInitiative.classList.add("failure"),initiativeTest.innerText=game.i18n.localize("CoC7.Failure"),initiativeTest.title=roll;break;case CoC7Check.successLevel.regular:tokenInitiative.classList.add("regular-success"),initiativeTest.innerText=game.i18n.localize("CoC7.RollDifficultyRegular"),initiativeTest.title=roll;break;case CoC7Check.successLevel.hard:tokenInitiative.classList.add("hard-success"),initiativeTest.innerText=game.i18n.localize("CoC7.RollDifficultyHard"),initiativeTest.title=roll;break;case CoC7Check.successLevel.extreme:tokenInitiative.classList.add("extreme-success"),initiativeTest.innerText=game.i18n.localize("CoC7.RollDifficultyExtreme"),initiativeTest.title=roll;break;case CoC7Check.successLevel.critical:tokenInitiative.classList.add("critical"),initiativeTest.innerText=game.i18n.localize("CoC7.RollDifficultyCritical"),initiativeTest.title=roll}}}else if(combatant.initiative<0){const h4=el.querySelector(".token-name").querySelector("h4"),span=el.querySelector("span.initiative");h4.style.fontWeight="900",h4.style.textShadow="1px 1px 4px darkred",span.style.fontWeight="900",span.style.textShadow="1px 1px 4px darkred",el.style.color="darkred",el.style.background="black",el.style.fontWeight="900"}})),html.find(".add-init").click((event=>CoC7Combat._onToggleGun(event))))}static async _onToggleGun(event){event.preventDefault(),event.stopPropagation();const li=event.currentTarget.closest(".combatant"),c=await game.combat.combatants.get(li.dataset.combatantId);c.actor.isOwner&&(c.getFlag("CoC7","hasGun")?await c.setFlag("CoC7","hasGun",!1):await c.setFlag("CoC7","hasGun",!0));const newInit=await c.actor.rollInitiative(!!c.getFlag("CoC7","hasGun"));c.getFlag("CoC7","hasGun")?c.initiative<newInit&&game.combat.setInitiative(c.id,newInit):game.combat.setInitiative(c.id,newInit)}}async function rollInitiative(ids,{formula=null,updateTurn=!0,messageOptions={}}={}){const updates=[];for(const[,id]of ids.entries()){const combatant=this.combatants.get(id),roll=await combatant.actor.rollInitiative(!!combatant.getFlag("CoC7","hasGun"));updates.push({_id:id,initiative:roll})}return updates.length?(await this.updateEmbeddedDocuments("Combatant",updates),this):this}class CoCIDBatch extends FormApplication{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","dialog","coc-id-editor"],template:"systems/CoC7/templates/apps/coc-id-batch.hbs",width:700,height:"auto",title:"CoC7.CoCIDFlag.title",closeOnSubmit:!1,submitOnClose:!1,submitOnChange:!1})}async getData(){const sheetData=super.getData();return sheetData.foundKeys=Object.keys(sheetData.object.foundKeys).reduce(((out,key)=>(out.push({name:key,key:sheetData.object.foundKeys[key]}),out)),[]).sort(CoC7Utilities.sortByNameKey),sheetData.missingNames=Object.keys(sheetData.object.missingNames).reduce(((out,key)=>(out.push({key:sheetData.object.foundKeys[key]??"",name:key,custom:sheetData.object.missingNames[key],suffix:sheetData.object.missingNames[key].replace(this.object.suffixRegExp,"")}),out)),[]).sort(CoC7Utilities.sortByNameKey),sheetData}activateListeners(html){super.activateListeners(html),html.find(".existing").change(this.onSetName.bind(this)),html.find(".fa-wand-magic").click(this.onClickGuess.bind(this)),html.find("input").keyup(this.onKeyup.bind(this))}onSetName(event){const obj=$(event.currentTarget);this.object.missingNames[obj.closest("li").data("name")]=obj.val(),this.render(!0)}onClickGuess(event){const name=$(event.currentTarget).closest("li").data("name");this.object.missingNames[name]=this.object.idPrefix+CoC7Utilities.toKebabCase(name),this.render(!0)}onKeyup(event){const obj=$(event.currentTarget),name=obj.closest("li").data("name");this.object.missingNames[name]=this.object.idPrefix+obj.val()}async _updateObject(event,formData){event.submitter&&(this.object.typeName===game.i18n.localize("CoC7.Entities.Skill")&&(this.close(),await CoCIDBatch.processSkillKeys(this.object.updateList,this.object.missingNames)),this.object.resolve(!0))}static async processSkillKeys(updateList,missingNames){const items=[],actors={},scenes={};for(const update of updateList){update.cocidFlag.id=missingNames[update.name],void 0===update.cocidFlag.lang&&(update.cocidFlag.lang=game.i18n.lang),void 0===update.cocidFlag.priority&&(update.cocidFlag.priority=0),void 0===update.cocidFlag.eras&&(update.cocidFlag.eras={});const flags=foundry.utils.flattenObject({flags:{CoC7:{cocidFlag:update.cocidFlag}}});if(void 0!==update.scene){if(void 0===scenes[update.scene]){const scene=game.scenes.get(update.scene);scenes[update.scene]=scene.toObject()}const tokenOffset=scenes[update.scene].tokens.findIndex((t=>t._id===update.token));if(tokenOffset>-1){const itemOffset=scenes[update.scene].tokens[tokenOffset].actorData.items.findIndex((i=>i._id===update.item));if(itemOffset>-1){const expandedFlags=foundry.utils.expandObject(Object.entries(flags).reduce(((out,entry)=>(entry[0].match(/^flags\.CoC7\.cocidFlag/)&&(out[entry[0]]=entry[1]),out)),{}));scenes[update.scene].tokens[tokenOffset].actorData.items[itemOffset]=foundry.utils.mergeObject(scenes[update.scene].tokens[tokenOffset].actorData.items[itemOffset],expandedFlags)}}}else if(void 0!==update.actor){void 0===actors[update.actor]&&(actors[update.actor]=[]);const item={_id:update.item};for(const key of Object.keys(flags))key.match(/^flags\.CoC7\.cocidFlag/)&&(item[key]=flags[key]);actors[update.actor].push(item)}else{const item={_id:update.item};for(const key of Object.keys(flags))key.match(/^flags\.CoC7\.cocidFlag/)&&(item[key]=flags[key]);items.push(item)}}if(items.length&&await Item.updateDocuments(items),Object.keys(actors).length)for(const actorId of Object.keys(actors))await Item.updateDocuments(actors[actorId],{parent:game.actors.get(actorId)});if(Object.keys(scenes).length)for(const sceneId of Object.keys(scenes)){game.scenes.get(sceneId).update(scenes[sceneId])}return!0}static async populateSkillKeys(updateList,missingNames,foundKeys){for(const actor of game.actors.contents){const actorData=actor.toObject();if(actorData.items)for(const item of actorData.items){const itemData=item instanceof CONFIG.Item.documentClass?item.toObject():item;"skill"===itemData.type&&(itemData.flags.CoC7?.cocidFlag?.id?.match(/^i.skill/)?foundKeys[itemData.name]=itemData.flags.CoC7.cocidFlag.id:(void 0===missingNames[itemData.name]&&(missingNames[itemData.name]=""),updateList.push({actor:actor._id,item:itemData._id,name:itemData.name,cocidFlag:itemData.flags.CoC7?.cocidFlag??{}})))}}for(const item of game.items.contents){const itemData=item instanceof CONFIG.Item.documentClass?item.toObject():item;"skill"===itemData.type&&(itemData.flags.CoC7?.cocidFlag?.id?.match(/^i.skill/)?foundKeys[itemData.name]=itemData.flags.CoC7.cocidFlag.id:(void 0===missingNames[itemData.name]&&(missingNames[itemData.name]=""),updateList.push({item:itemData._id,name:itemData.name,cocidFlag:itemData.flags.CoC7?.cocidFlag??{}})))}for(const scene of game.scenes){const sceneData=scene.toObject();for(const token of sceneData.tokens??[])if(token.actorId&&!token.actorLink){const actorData=foundry.utils.duplicate(token.actorData);for(const item of actorData.items??[]){const itemData=item instanceof CONFIG.Item.documentClass?item.toObject():item;"skill"===itemData.type&&(itemData.flags.CoC7?.cocidFlag?.id?.match(/^i.skill/)?foundKeys[itemData.name]=itemData.flags.CoC7.cocidFlag.id:(void 0===missingNames[itemData.name]&&(missingNames[itemData.name]=""),updateList.push({scene:sceneData._id,token:token._id,item:itemData._id,name:itemData.name,cocidFlag:itemData.flags.CoC7?.cocidFlag??{}})))}}}if(Object.keys(missingNames).filter((key=>""===missingNames[key])).length>0){const items=await game.system.api.cocid.fromCoCIDRegexBest({cocidRegExp:/^i\.skill\./,type:"i",era:!1});for(const item of items)foundKeys[item.name]=item.flags.CoC7.cocidFlag.id;for(const key in foundry.utils.flattenObject(game.i18n.translations.CoC7.CoCIDFlag.keys??{}))foundKeys[game.i18n.format("CoC7.CoCIDFlag.keys."+key)]=key;for(const name in missingNames)void 0!==foundKeys[name]&&(missingNames[name]=foundKeys[name])}}static async create(type){const updateList=[],missingNames={},foundKeys={};let typeName="",idPrefix="",suffixRegExp=null;return"skill"===type&&(typeName=game.i18n.localize("CoC7.Entities.Skill"),idPrefix="i.skill.",suffixRegExp=/^i\.skill\./,await CoCIDBatch.populateSkillKeys(updateList,missingNames,foundKeys),0===Object.keys(missingNames).filter((key=>""===missingNames[key])).length?(await CoCIDBatch.processSkillKeys(updateList,missingNames),!0):new Promise((resolve=>{new CoCIDBatch({typeName,idPrefix,suffixRegExp,updateList,missingNames,foundKeys,resolve}).render(!0)})))}}class Updater{static async checkForUpdate(){let systemUpdateVersion=game.settings.get("CoC7","systemUpdateVersion");game.actors.size+game.scenes.size+game.items.size+game.journal.size+game.tables.size===0&&(systemUpdateVersion=game.system.version,await game.settings.set("CoC7","systemUpdateVersion",systemUpdateVersion));const runMigrate=foundry.utils.isNewerVersion(game.system.version,systemUpdateVersion??"0");this.updatedModules=game.settings.get("CoC7","systemUpdatedModuleVersion")||{},this.currentModules={};for(const pack of game.packs)if(!["CoC7","world"].includes(pack.metadata.packageName)&&["Actor","Item","Scene"].includes(pack.metadata.type)&&!Object.prototype.hasOwnProperty.call(this.currentModules,pack.metadata.packageName)){const module=game.modules.get(pack.metadata.packageName);module&&(!runMigrate&&Object.prototype.hasOwnProperty.call(this.updatedModules,module.id)&&String(this.updatedModules[module.id])===String(module.version)||(this.currentModules[module.id]=module.version))}(runMigrate||Object.keys(this.currentModules).length>0)&&(game.user.isGM?new Dialog({title:game.i18n.localize("CoC7.Migrate.Title"),content:game.i18n.format(0===Object.keys(this.currentModules).length?"CoC7.Migrate.Message":"CoC7.Migrate.WithModulesMessage",{version:game.system.version,modules:"<ul><li>"+Object.keys(this.currentModules).map((mod=>game.modules.get(mod).title)).join("</li><li>")+"</li></ul>"}),buttons:{update:{label:game.i18n.localize("CoC7.Migrate.ButtonUpdate"),callback:async()=>Updater.update()},skip:{label:game.i18n.localize("CoC7.Migrate.ButtonSkip")}}}).render(!0):new Dialog({title:game.i18n.localize("CoC7.Migrate.Title"),content:game.i18n.format("CoC7.Migrate.GMRequired",{version:game.system.version}),buttons:{OK:{label:game.i18n.localize("CoC7.Migrate.ButtonOkay")}}}).render(!0))}static async update(){await this.updateDocuments(),game.settings.get("CoC7","pulpRules")&&(game.settings.set("CoC7","pulpRuleDoubleMaxHealth",!0),game.settings.set("CoC7","pulpRuleDevelopmentRollLuck",!0),game.settings.set("CoC7","pulpRuleArchetype",!0),game.settings.set("CoC7","pulpRuleOrganization",!0),game.settings.set("CoC7","pulpRuleTalents",!0),game.settings.set("CoC7","pulpRuleFasterRecovery",!0),game.settings.set("CoC7","pulpRuleIgnoreMajorWounds",!0),game.settings.set("CoC7","pulpRuleIgnoreAgePenalties",!0)),await CoCIDBatch.create("skill");const settings=foundry.utils.mergeObject(this.updatedModules||{},this.currentModules);game.settings.set("CoC7","systemUpdatedModuleVersion",settings),game.settings.set("CoC7","systemUpdateVersion",game.system.version),ui.notifications.info(game.i18n.format("CoC7.Migrate.Complete"),{permanent:!0})}static async updateDocuments(){for(const actor of game.actors.contents)try{const updateData=this.migrateActorData(actor.toObject());foundry.utils.isEmpty(updateData)||(console.log(`Migrating Actor document ${actor.name}`),await actor.update(updateData,{enforceTypes:!1}))}catch(err){console.log("Error details",err),err.message=game.i18n.format("CoC7.Migrate.ErrorActor",{name:actor.name,message:err.message}),ui.notifications.error(err.message,{permanent:!0})}for(const item of game.items.contents)try{const updateData=Updater.migrateItemData(item.toObject());foundry.utils.isEmpty(updateData)||(console.log(`Migrating Item document ${item.name}`),await item.update(updateData,{enforceTypes:!1}))}catch(err){console.log("Error details",err),err.message=game.i18n.format("CoC7.Migrate.ErrorItem",{name:item.name,message:err.message}),ui.notifications.error(err.message,{permanent:!0})}for(const table of game.tables.contents)try{const updateData=Updater.migrateTableData(table.toObject());foundry.utils.isEmpty(updateData)||(console.log(`Migrating Table document ${table.name}`),await table.update(updateData,{enforceTypes:!1}))}catch(err){console.log("Error details",err),err.message=game.i18n.format("CoC7.Migrate.ErrorTable",{name:table.name,message:err.message}),ui.notifications.error(err.message,{permanent:!0})}for(const macro of game.macros.contents)try{const updateData=Updater.migrateMacroData(macro.toObject());foundry.utils.isEmpty(updateData)||(console.log(`Migrating Macro document ${macro.name}`),await macro.update(updateData,{enforceTypes:!1}))}catch(err){console.log("Error details",err),err.message=game.i18n.format("CoC7.Migrate.ErrorMacro",{name:macro.name,message:err.message}),ui.notifications.error(err.message,{permanent:!0})}for(const scene of game.scenes)try{const updateData=Updater.migrateSceneData(scene);foundry.utils.isEmpty(updateData)||(console.log(`Migrating Scene document ${scene.name}`),await scene.update(updateData,{enforceTypes:!1})),scene.tokens.forEach((t=>t._actor=null))}catch(err){console.log("Error details",err),err.message=game.i18n.format("CoC7.Migrate.ErrorScene",{name:scene.name,message:err.message}),ui.notifications.error(err.message,{permanent:!0})}for(const pack of game.packs)"CoC7"!==pack.metadata.packageName&&["Actor","Item","Macro","RollTable","Scene"].includes(pack.metadata.type)&&await Updater.migrateCompendiumData(pack)}static migrateActorData(actor){const updateData={};if(Updater._migrateActorCharacterSanity(actor,updateData),Updater._migrateActorArtwork(actor,updateData),Updater._migrateActorKeeperNotes(actor,updateData),Updater._migrateActorNpcCreature(actor,updateData),Updater._migrateActorStatusEffectActive(actor,updateData),Updater._migrateActorSanLossReasons(actor,updateData),Updater._migrateActorMonetary(actor,updateData),actor.items){const items=actor.items.reduce(((arr,i)=>{const itemData=i instanceof CONFIG.Item.documentClass?i.toObject():i,itemUpdate=Updater.migrateItemData(itemData);return foundry.utils.isEmpty(itemUpdate)||(itemUpdate._id=itemData._id,arr.push(foundry.utils.expandObject(itemUpdate))),arr}),[]);items.length>0&&(updateData.items=items)}return updateData}static async migrateCompendiumData(pack){const documentType=pack.metadata.type;if(!["Actor","Item","Macro","RollTable","Scene"].includes(documentType))return;const wasLocked=pack.locked;await pack.configure({locked:!1});try{await pack.migrate()}catch(err){console.log("pack migrate failed",pack,err)}const documents=await pack.getDocuments();for(const doc of documents){let updateData={};try{switch(documentType){case"Actor":updateData=Updater.migrateActorData(doc.toObject());break;case"Item":updateData=Updater.migrateItemData(doc.toObject());break;case"Macro":updateData=Updater.migrateMacroData(doc.toObject());break;case"RollTable":updateData=Updater.migrateTableData(doc.toObject());break;case"Scene":updateData=Updater.migrateSceneData(doc)}foundry.utils.isEmpty(updateData)||(console.log(`Migrated ${documentType} document ${doc.name} in Compendium ${pack.collection}`),await doc.update(updateData))}catch(err){console.log("Error details",err),err.message=game.i18n.format("CoC7.Migrate.ErrorDocumentPack",{name:doc.name,collection:pack.collection,message:err.message}),ui.notifications.error(err.message,{permanent:!0})}}await pack.configure({locked:wasLocked})}static migrateItemData(item){const updateData={};return Updater._migrateItemEmbeddedv10(item,updateData),Updater._migrateItemExperience(item,updateData),Updater._migrateItemArtwork(item,updateData),Updater._migrateItemBookAutomated(item,updateData),Updater._migrateItemKeeperNotes(item,updateData),Updater._migrateItemSpellAutomated(item,updateData),Updater._migrateItemKeeperNotesMerge(item,updateData),Updater._migrateItemEras(item,updateData),Updater._migrateItemv10(item,updateData),Updater._migrateItemBookUnits(item,updateData),updateData}static migrateMacroData(table){const updateData={};return Updater._migrateMacroArtwork(table,updateData),updateData}static migrateTableData(table){const updateData={};return Updater._migrateTableArtwork(table,updateData),updateData}static migrateSceneData(scene){const returns={tokens:[]};return void 0!==scene.tokens&&scene.tokens.length&&(returns.tokens=scene.tokens.map((token=>{const t=token.toObject(),updateData={};if(Updater._migrateTokenArtwork(t,updateData),Object.keys(updateData).length&&foundry.utils.mergeObject(t,updateData),!t.actorId||t.actorLink)t.actorData={};else if(game.actors.has(t.actorId)){if(!t.actorLink){const actorData=foundry.utils.duplicate(t.actorData);actorData.type=token.actor?.type;const update=Updater.migrateActorData(actorData);["items","effects"].forEach((embeddedName=>{if(!update[embeddedName]?.length)return;const updates=new Map(update[embeddedName].map((u=>[u._id,u])));t.actorData[embeddedName].forEach((original=>{const update=updates.get(original._id);update&&foundry.utils.mergeObject(original,update)})),delete update[embeddedName]})),foundry.utils.mergeObject(t.actorData,update)}}else t.actorId=null,t.actorData={};return t}))),returns}static _migrateItemKeeperNotes(item,updateData){return["archetype","chase","item","occupation","setup","skill","spell","status","talent","weapon"].includes(item.type)&&("string"==typeof item.system.description?updateData["system.description"]={value:item.system.description,keeper:""}:void 0===item.system.description||null===item.system.description?updateData["system.description"]={value:"",keeper:""}:void 0===item.system.description.keeper&&(updateData["system.description.keeper"]="")),updateData}static _migrateItemExperience(item,updateData){return"skill"===item.type&&void 0===item.system.adjustments?.experience&&(updateData["system.adjustments.experience"]=0),updateData}static _migrateItemArtwork(item,updateData){let image=String(item.img).match(/systems\/CoC7\/artwork\/icons\/(.+)/);if(null!==image&&(updateData.img="systems/CoC7/assets/icons/"+image[1]),"setup"===item.type)for(const[k,v]of Object.entries(item.system.items))"string"!=typeof v&&(image=String(v.img).match(/systems\/CoC7\/artwork\/icons\/(.+)/),null!==image&&(void 0===updateData["system.items"]&&(updateData["system.items"]=item.system.items),updateData["system.items"][k].img="systems/CoC7/assets/icons/"+image[1]));else if("occupation"===item.type){for(const[k,v]of Object.entries(item.system.skills))"string"!=typeof v&&(image=String(v.img).match(/systems\/CoC7\/artwork\/icons\/(.+)/),null!==image&&(void 0===updateData["system.skills"]&&(updateData["system.skills"]=item.system.skills),updateData["system.skills"][k].img="systems/CoC7/assets/icons/"+image[1]));for(const[o,g]of Object.entries(item.system.groups))for(const[k,v]of Object.entries(g.skills))"string"!=typeof v&&(image=String(v.img).match(/systems\/CoC7\/artwork\/icons\/(.+)/),null!==image&&(void 0===updateData["system.groups"]&&(updateData["system.groups"]=item.system.groups),updateData["system.groups"][o].skills[k].img="systems/CoC7/assets/icons/"+image[1]))}else if("book"===item.type)for(const[k,v]of Object.entries(item.system.spells))"string"!=typeof v&&(image=String(v.img).match(/systems\/CoC7\/artwork\/icons\/(.+)/),null!==image&&(void 0===updateData["system.spells"]&&(updateData["system.spells"]=item.system.spells),updateData["system.spells"][k].img="systems/CoC7/assets/icons/"+image[1]));else if("archetype"===item.type)for(const[k,v]of Object.entries(item.system.skills))"string"!=typeof v&&(image=String(v.img).match(/systems\/CoC7\/artwork\/icons\/(.+)/),null!==image&&(void 0===updateData["system.skills"]&&(updateData["system.skills"]=item.system.skills),updateData["system.skills"][k].img="systems/CoC7/assets/icons/"+image[1]));return updateData}static _migrateItemSpellAutomated(item,updateData){"spell"===item.type&&void 0!==item.system.cost&&(updateData["system.castingTime"]=item.system.castingTime||"",updateData["system.costs.hitPoints"]=item.system.cost.hp||0,updateData["system.costs.magicPoints"]=item.system.cost.mp||0,updateData["system.costs.sanity"]=item.system.cost.san||0,updateData["system.costs.power"]=item.system.cost.pow||0,updateData["system.costs.others"]="",updateData["system.-=cost"]=null,updateData["system.description.-=unidentified"]=null,updateData["system.description.-=notes"]=null)}static _migrateItemBookAutomated(item,updateData){return"book"===item.type&&void 0!==item.system.description.unidentified&&(updateData["system.author"]=item.system.author||"",updateData["system.date"]=item.system.date||"",updateData["system.language"]=item.system.language||"",updateData["system.sanityLoss"]=item.system.sanLoss||0,updateData["system.mythosRating"]=Number(item.system.mythosRating)||0,updateData["system.content"]=item.system.description.unidentified,updateData["system.description.keeper"]=item.system.description.notes,updateData["system.difficultyLevel"]="regular",updateData["system.fullStudies"]=0,updateData["system.initialReading"]=!1,updateData["system.keeperNotes"]="",updateData["system.gains.cthulhuMythos.initial"]=Number(item.system.gain.cthulhuMythos.CMI)||0,updateData["system.gains.cthulhuMythos.final"]=Number(item.system.gain.cthulhuMythos.CMF)||0,updateData["system.gains.occult"]=Number(item.system.gain.occult)||0,updateData["system.gains.others"]=[],updateData["system.study"]={necessary:Number(item.system.weeksStudyTime)||0,progress:0,units:"CoC7.weeks"},updateData["system.-=sanLoss"]=null,updateData["system.-=weeksStudyTime"]=null,updateData["system.-=gain"]=null,updateData["system.description.-=unidentified"]=null,updateData["system.description.-=notes"]=null,updateData["system.gains.-=other"]=null,updateData["system.-=properties"]=null,updateData["system.-=flags"]=null),updateData}static _migrateItemBookUnits(item,updateData){"book"===item.type&&void 0!==item.system.study.necessary&&void 0===item.system.study.units&&(updateData["system.study.units"]="CoC7.weeks")}static _migrateItemKeeperNotesMerge(item,updateData){"spell"!==item.type&&"book"!==item.type||(void 0!==item.system.notes&&(void 0!==item.system.description.keeper?updateData["system.description.keeper"]=item.system.description.keeper+item.system.notes:updateData["system.description.keeper"]=item.system.notes,updateData["system.-=notes"]=null),void 0!==item.system.keeperNotes&&(void 0!==updateData["system.description.keeper"]?updateData["system.description.keeper"]=item.system.keeperNotes+updateData["system.description.keeper"]:updateData["system.description.keeper"]=item.system.keeperNotes,updateData["system.-=keeperNotes"]=null))}static _migrateItemEmbeddedv10(item,updateData){if("occupation"===item.type){let changed=!1;for(const[o,g]of Object.entries(item.system.groups))for(const[k,v]of Object.entries(g.skills))"string"!=typeof v&&void 0===v.system&&(item.system.groups[o].skills[k].system=v.data,changed=!0);changed&&(updateData["system.groups"]=item.system.groups)}if(["setup"].includes(item.type)){let changed=!1;for(const[k,v]of Object.entries(item.system.items))"string"!=typeof v&&void 0===v.system&&(item.system.items[k].system=v.data,changed=!0);changed&&(updateData["system.items"]=item.system.items)}if(["archetype","occupation"].includes(item.type)){let changed=!1;for(const[k,v]of Object.entries(item.system.skills))"string"!=typeof v&&void 0===v.system&&(item.system.skills[k].system=v.data,changed=!0);changed&&(updateData["system.skills"]=item.system.skills)}if(["book"].includes(item.type)){let changed=!1;for(const[k,v]of Object.entries(item.system.spells))"string"!=typeof v&&void 0===v.system&&(item.system.spells[k].system=v.data,changed=!0);changed&&(updateData["system.spells"]=item.system.spells)}}static _migrateItemv10(item,updateData){if("skill"!==item.type||void 0!==item.system.skillName&&""!==item.system.skillName){if("setup"===item.type){for(const[k,v]of Object.entries(item.system.items))if("string"!=typeof v&&"skill"===v.type&&(void 0===v.system.skillName||""===v.system.skillName)){void 0===updateData["system.items"]&&(updateData["system.items"]=item.system.items),updateData["system.items"][k].name=v.name,"Uniki"===updateData["system.items"][k].name&&(updateData["system.items"][k].name="Unik");const parts=CoC7Item.getNamePartsSpec(updateData["system.items"][k].name,"string"==typeof v.system.specialization?.group?v.system.specialization.group:v.system.specialization);updateData["system.items"][k].name=parts.name,updateData["system.items"][k].system.skillName=parts.skillName,updateData["system.items"][k].system.specialization=parts.specialization}}else if("occupation"===item.type){for(const[k,v]of Object.entries(item.system.skills))if("string"!=typeof v&&"skill"===v.type&&(void 0===v.system.skillName||""===v.system.skillName)){void 0===updateData["system.skills"]&&(updateData["system.skills"]=item.system.skills),updateData["system.skills"][k].name=v.name,"Uniki"===updateData["system.skills"][k].name&&(updateData["system.skills"][k].name="Unik");const parts=CoC7Item.getNamePartsSpec(updateData["system.skills"][k].name,"string"==typeof v.system.specialization?.group?v.system.specialization.group:v.system.specialization);updateData["system.skills"][k].name=parts.name,updateData["system.skills"][k].system.skillName=parts.skillName,updateData["system.skills"][k].system.specialization=parts.specialization}for(const[o,g]of Object.entries(item.system.groups))for(const[k,v]of Object.entries(g.skills))if("string"!=typeof v&&"skill"===v.type&&(void 0===v.system.skillName||""===v.system.skillName)){void 0===updateData["system.groups"]&&(updateData["system.groups"]=item.system.groups),updateData["system.groups"][o].skills[k].name=v.name,"Uniki"===updateData["system.groups"][o].skills[k].name&&(updateData["system.groups"][o].skills[k].name="Unik");const parts=CoC7Item.getNamePartsSpec(updateData["system.groups"][o].skills[k].name,"string"==typeof v.system.specialization?.group?v.system.specialization.group:v.system.specialization);updateData["system.groups"][o].skills[k].name=parts.name,updateData["system.groups"][o].skills[k].system.skillName=parts.skillName,updateData["system.groups"][o].skills[k].system.specialization=parts.specialization}}else if("archetype"===item.type)for(const[k,v]of Object.entries(item.system.skills))if("string"!=typeof v&&"skill"===v.type&&(void 0===v.system.skillName||""===v.system.skillName)){void 0===updateData["system.skills"]&&(updateData["system.skills"]=item.system.skills),updateData["system.skills"][k].name=v.name,"Uniki"===updateData["system.skills"][k].name&&(updateData["system.skills"][k].name="Unik");const parts=CoC7Item.getNamePartsSpec(updateData["system.skills"][k].name,"string"==typeof v.system.specialization?.group?v.system.specialization.group:v.system.specialization);updateData["system.skills"][k].name=parts.name,updateData["system.skills"][k].system.skillName=parts.skillName,updateData["system.skills"][k].system.specialization=parts.specialization}}else{updateData.name=item.name,"Uniki"===updateData.name&&(updateData.name="Unik");const parts=CoC7Item.getNamePartsSpec(updateData.name,"string"==typeof item.system.specialization?.group?item.system.specialization.group:item.system.specialization);updateData.name=parts.name,updateData["system.skillName"]=parts.skillName,updateData["system.specialization"]=parts.specialization}}static _migrateItemEras(item,updateData){if(void 0!==item.system.eras){let eras={};for(const[key,value]of Object.entries(item.system.eras))if(!0===value||"string"!=typeof value&&void 0!==value.selected)switch(key){case"1920":eras.standard=!0;break;case"mdrn":eras.modern=!0,eras.modernPulp=!0;break;case"pulp":eras.pulp=!0;break;case"ddts":eras.downDarkerTrails=!0,eras.downDarkerTrailsPulp=!0;break;case"drka":eras.darkAges=!0,eras.darkAgesPulp=!0;break;case"glit":eras.gasLight=!0;break;case"nvct":eras.invictus=!0}if("setup"===item.type){const key=Object.keys(eras)[0];eras=key?{[key]:!0}:{standard:!0}}const CoC7={cocidFlag:{id:"",lang:game.i18n.lang,priority:0,eras}};void 0===item.flags?.CoC7?(item.flags.CoC7=CoC7,updateData["flags.CoC7"]=CoC7):void 0===item.flags?.CoC7?.cocidFlag?(item.flags.CoC7.cocidFlag=CoC7.cocidFlag,updateData["flags.CoC7.cocidFlag"]=CoC7.cocidFlag):(item.flags.CoC7.cocidFlag.eras=CoC7.cocidFlag.eras,updateData["flags.CoC7.cocidFlag.eras"]=CoC7.cocidFlag.eras),updateData["system.-=eras"]=null}}static _migrateActorArtwork(actor,updateData){let image=String(actor.img).match(/systems\/CoC7\/artwork\/icons\/(.+)/);if(null!==image&&(updateData.img="systems/CoC7/assets/icons/"+image[1]),void 0!==actor.prototypeToken&&void 0!==actor.prototypeToken.texture?.src&&(image=String(actor.prototypeToken.texture.src).match(/systems\/CoC7\/artwork\/icons\/(.+)/),null!==image&&(updateData["prototypeToken.texture.src"]="systems/CoC7/assets/icons/"+image[1])),void 0!==actor.effects)for(const[k,v]of Object.entries(actor.effects))image=String(v.icon).match(/systems\/CoC7\/artwork\/icons\/(.+)/),null!==image&&(void 0===updateData.effects&&(updateData.effects=actor.effects),updateData.effects[k].icon="systems/CoC7/assets/icons/"+image[1])}static _migrateActorKeeperNotes(actor,updateData){["character","npc","creature"].includes(actor.type)&&void 0!==actor.system&&void 0===actor.system.description&&(updateData["system.description"]={keeper:""})}static _migrateActorMonetary(actor,updateData){if("character"===actor.type&&void 0!==actor.system.credit?.multiplier){updateData["system.monetary.symbol"]=actor.system.credit?.monetarySymbol?actor.system.credit.monetarySymbol:"$",""===updateData["system.monetary.symbol"].toString().trim()&&(updateData["system.monetary.symbol"]="$");const multiplier=parseInt(actor.system.credit.multiplier)?parseInt(actor.system.credit.multiplier):1;if(updateData["system.monetary.spent"]=actor.system.credit.spent,updateData["system.monetary.assetsDetails"]=actor.system.credit.assetsDetails,updateData["system.monetary.spendingLevel"]=actor.system.credit.spendingLevel,updateData["system.monetary.cash"]=actor.system.credit.cash,updateData["system.monetary.assets"]=actor.system.credit.assets,updateData["system.monetary.values"]=foundry.utils.duplicate(actor.system.monetary.values),1!==multiplier)for(const value of updateData["system.monetary.values"])value.cashValue=multiplier*value.cashValue,value.assetsValue=multiplier*value.assetsValue,value.spendingValue=multiplier*value.spendingValue;updateData["system.-=credit"]=null}}static _migrateActorSanLossReasons(actor,updateData){if("character"===actor.type&&void 0!==actor.system?.encounteredCreatures){const groups={};for(const sanityLossEvent of actor.system.encounteredCreatures)sanityLossEvent.totalLoss>0&&(groups[sanityLossEvent.name]=Math.max(groups[sanityLossEvent.name]??0,sanityLossEvent.totalLoss));const sanityLossEvents=[];for(const name in groups)sanityLossEvents.push({type:name,totalLoss:groups[name],immunity:!1});updateData["system.sanityLossEvents"]=sanityLossEvents,updateData["system.-=encounteredCreatures"]=null}}static _migrateActorStatusEffectActive(actor,updateData){if(["character","npc","creature"].includes(actor.type)&&void 0!==actor.system&&(void 0!==actor.system.status||void 0===actor.system.conditions)){if(updateData["system.conditions.criticalWounds.value"]=!1,updateData["system.conditions.unconscious.value"]=!1,updateData["system.conditions.dying.value"]=!1,updateData["system.conditions.dead.value"]=!1,updateData["system.conditions.prone.value"]=!1,updateData["system.conditions.tempoInsane.value"]=!1,updateData["system.conditions.indefInsane.value"]=!1,void 0!==actor.system.status?.criticalWounds?.value&&actor.system.status?.criticalWounds.value&&(updateData["system.conditions.criticalWounds.value"]=!0),void 0!==actor.system.status?.unconscious?.value&&actor.system.status?.unconscious.value&&(updateData["system.conditions.unconscious.value"]=!0),void 0!==actor.system.status?.dying?.value&&actor.system.status?.dying.value&&(updateData["system.conditions.dying.value"]=!0),void 0!==actor.system.status?.dead?.value&&actor.system.status?.dead.value&&(updateData["system.conditions.dead.value"]=!0),void 0!==actor.system.status?.prone?.value&&actor.system.status?.prone.value&&(updateData["system.conditions.prone.value"]=!0),void 0!==actor.system.status?.tempoInsane?.value&&actor.system.status?.tempoInsane.value&&(updateData["system.conditions.tempoInsane.value"]=!0),void 0!==actor.system.status?.indefInsane?.value&&actor.system.status?.indefInsane.value&&(updateData["system.conditions.indefInsane.value"]=!0),void 0!==actor.effects){const effects=actor.effects;let changed=!1;for(let i=0,im=effects.length;i<im;i++){const effect=effects[i],match=effect.icon.match(/\/(hanging-spider|tentacles-skull|arm-sling|heart-beats|tombstone|knocked-out-stars|falling|skull|unconscious)\./);if(null!==match){let statusId="";switch(match[1]){case"hanging-spider":statusId="tempoInsane";break;case"tentacles-skull":statusId="indefInsane";break;case"arm-sling":statusId="criticalWounds";break;case"heart-beats":statusId="dying";break;case"tombstone":case"skull":statusId="dead";break;case"knocked-out-stars":case"unconscious":statusId="unconscious";break;case"falling":statusId="prone"}""!==statusId&&(updateData[`system.conditions.${statusId}.value`]||(updateData[`system.conditions.${statusId}.value`]=!0,changed=!0),effect.flags.core?.statusId!==statusId&&(effects[i]=foundry.utils.mergeObject(effect,{flags:{core:{statusId}}}),changed=!0))}}changed&&(updateData.effects=effects)}updateData["system.-=status"]=null}return updateData}static _migrateActorNpcCreature(actor,updateData){return["npc"].includes(actor.type)&&void 0!==actor.system&&(void 0===actor.system.special&&(updateData["system.special"]={checkPassed:null,checkFailled:null}),void 0===actor.system.attacksPerRound&&(updateData["system.attacksPerRound"]=1)),updateData}static _migrateActorCharacterSanity(actor,updateData){if("character"===actor.type&&void 0!==actor.system?.attribs?.san){const oneFifthSanity=Math.ceil(actor.system.attribs.san.value/5);void 0!==actor.system.attribs.san.dailyLoss&&null!==actor.system.attribs.san.dailyLoss||(updateData["system.attribs.san.dailyLoss"]=0),void 0!==actor.system.attribs.san.oneFifthSanity&&null!==actor.system.attribs.san.oneFifthSanity||(updateData["system.attribs.san.oneFifthSanity"]=" / "+oneFifthSanity),void 0!==actor.system.attribs.san.dailyLoss&&null!==actor.system.attribs.san.dailyLoss||(updateData["system.attribs.san.dailyLoss"]=0),void 0!==actor.system.indefiniteInsanityLevel&&null!==actor.system.indefiniteInsanityLevel&&void 0!==actor.system.indefiniteInsanityLevel.value&&null!==actor.system.indefiniteInsanityLevel.value||(updateData["system.indefiniteInsanityLevel.value"]=0),void 0!==actor.system.indefiniteInsanityLevel&&null!==actor.system.indefiniteInsanityLevel&&void 0!==actor.system.indefiniteInsanityLevel.max&&null!==actor.system.indefiniteInsanityLevel.max||(updateData["system.indefiniteInsanityLevel.max"]=oneFifthSanity),void 0!==actor.system.attribs.mp&&(void 0!==actor.system.attribs.mp.value&&null!==actor.system.attribs.mp.value||(updateData["system.attribs.mp.value"]=oneFifthSanity),void 0!==actor.system.attribs.mp.max&&null!==actor.system.attribs.mp.max||(updateData["system.attribs.mp.max"]=oneFifthSanity)),void 0!==actor.system.notes&&null!==actor.system.notes||(updateData["system.notes"]="")}return updateData}static _migrateMacroArtwork(table,updateData){const image=String(table.img).match(/systems\/CoC7\/artwork\/icons\/(.+)/);return null!==image&&(updateData.img="systems/CoC7/assets/icons/"+image[1]),updateData}static _migrateTableArtwork(table,updateData){let image=String(table.img).match(/systems\/CoC7\/artwork\/icons\/(.+)/);null!==image&&(updateData.img="systems/CoC7/assets/icons/"+image[1]);for(const[k,v]of Object.entries(table.results))image=String(v.img).match(/systems\/CoC7\/artwork\/icons\/(.+)/),null!==image&&(void 0===updateData.results&&(updateData.results=table.results),updateData.results[k].img="systems/CoC7/assets/icons/"+image[1]);return updateData}static _migrateTokenArtwork(token,updateData){const image=String(token.img).match(/systems\/CoC7\/artwork\/icons\/(.+)/);return null!==image&&(updateData.img="systems/CoC7/assets/icons/"+image[1]),updateData}}const nameCharacters="\\u3000\\u3400-\\u4DBF\\u3040-\\u30FF\\u4E00-\\u9FFF\\w\\(\\)\\-\\/&\"'･（）／"+CoC7Utilities.quoteRegExp("áéíóàèìòùÀÈÌÒÙáéíóúýÁÉÍÓÚÝâêîôûÂÊÎÔÛãñõÃĀÑÕäëïöüÿÄËÏÖÜŸàèçÇßØøÅåÆæœ“”«»ąćęłńóśźżĄĆĘŁŃÓŚŹŻ"),keys={en:{description:"CoC7.English",dbNone:"none",armorNone:"none",attacksPerRoundNone:"none",sanLossNone:"none",fulldb:"(Damage Bonus|DB)",halfdb:"(½|half)",sectionCombats:"\n(?:combat|fighting attacks)[:\n]",newCombatHeader:"\nCombat\n",sectionSkills:"\n(?:skills(?:\\s*\\([^\\)]+\\))?)[:\n]",sectionLangauges:"\n(?:languages)[:\n]",sectionSpells:"\n(?:spells)[:\n]",handgun:"(?<type> Gun|Revolver|Pistol|Handgun|Derringer|Beretta|Luger|Desert Eagle| \\.38)",rifle:"(?<type>Rifle|Shotgun|Carbine|Gauge |Lee-Enfield|Elephant)",smb:"(?<type>Submachine Gun|Thompson)",machineGun:"(?<type>Browning|Vickers)",launched:"(?<type>Molotov|Grenade|Dynamite)",example:"Example Character, age 27\nSTR 75 CON 60 SIZ 80 DEX 70 APP 60 INT 80\nPOW 50 EDU 85 SAN 55 HP 14 DB: 1D4\nBuild: 1 Move: 7 MP: 10 Luck: 40 Armor: 1\nAttacks per round: 3 SAN loss: 1d4/1d8\nCombat\nBite 50% (25/10), damage 1D6\nBrawl 30% (15/6), damage 1D3\nDerringer 40% (20/8), damage 1D8+1\nDodge 50% (25/10)\nSkills\nAnimal Handling 55%, Charm 30%, First Aid 25%, Disguise 20%,\nListen 50%, Medicine 45%, Persuade 25%, Psychology 75%,\nScience (Astronomy) 90%, Science (Botany) 35%, Science (Zoology) 10%,\nSpot Hidden 35%, Stealth 10%\nLanguages: English 80%, Eklo 5%.\nSpells: Summon NPC, Dispel NPC."},de:{description:"CoC7.German",dbNone:"none",armorNone:"none",attacksPerRoundNone:"none",sanLossNone:"none",diceShort:"w|d",fulldb:"(Schadensbonus|Sb)",halfdb:"(½|1/2 Schadensbonus|Sb/2)",sectionCombats:"\n(?:Kampf|Angriff:|ANGRIFFE)[:\n]",newCombatHeader:"\nKampf\n",sectionSkills:"\n(?:Fertigkeiten(?:\\s*\\([^\\)]+\\))?)[:\n]",sectionLangauges:"\n(?:Sprachen)[:\n]",sectionSpells:"\n(?:Zauber)[:\n]",handgun:"(?<type> Gun|Revolver|Pistole|Handgun|Derringer|Beretta|Luger|Desert Eagle| \\.38)",rifle:"(?<type>Gewehr|Schrotflinte|Carabiner|Karabiner|Gauge |Lee-Enfield|Elefanten)",smb:"(?<type>Submachine Gun|Thompson)",machineGun:"(?<type>Browning|Vickers)",launched:"(?<type>Molotov|Granate|Dynamit)",example:"Vorname Nachname\nAlter: 29\nBeruf: Ein Beruf\nST 50\nMA 60\nKO 60\nGE 60\nGR 55\nER 65\nIN 80\nBI 85\nTrefferpunkte: 11\nGeistige Stabilität: 60\nSchadensbonus: 0\nStatur: 0\nMagiepunkte: 12\nBewegungsweite: 8\n\nKampf\nAngriffe: 1\nHandgemenge 30% (15/6), Schaden 1D3\nMesser 30% (15/6), Schaden 1D4\nAusweichen 30% (15/6)\n\nFertigkeiten: Anthropologie 70% (35/14), Archäologie 30% (15/6), Bibliotheksnutzung 50% (25/10), Erste Hilfe 50% (25/10), Finanzkraft 40% (20/8), Geschichte 60% (30/12), Klettern 50% (25/10)\n\nSprachen: Englisch 85% (42/17); Deutsch 45% (22/9), Latein 45% (22/9)"},pl:{description:"CoC7.Polish",dbNone:"brak",armorNone:"brak",attacksPerRoundNone:"brak",sanLossNone:"brak",diceShort:"k|d",fulldb:"(Modyfikator Obrażeń|MO)",halfdb:"(½|1/2 MO|MO/2)",sectionCombats:"\n(?:Walka|Ataki)[:\n]",newCombatHeader:"\nWalka\n",sectionSkills:"\n(?:Umiejętności(?:\\s*\\([^\\)]+\\))?)[:\n]",sectionLangauges:"\n(?:Języki)[:\n]",sectionSpells:"\n(?:Zaklęcia)[:\n]",handgun:"(?<type> Pistolet|Rewolwer|Derringer|Beretta|Luger|Desert Eagle| \\.38)",rifle:"(?<type>Karabin|Strzelba|Wiatrówka|Garand|Gauge |Lee-Enfield|Strzelba na słonie)",smb:"(?<type>Pistolet maszynowy|Thompson)",machineGun:"(?<type>Browning|Vickers)",launched:"(?<type>Mołotowa|Granat|Laska dynamitu|Dynamit)",example:"Przykładowa postać, 27 lat\nBibliotekarz\nS 75 KON 60 BC 80 ZR 70 WYG 60 INT 80\nMOC 50 WYK 85 P 55 PW 14 MO: 1D4\nKrzepa: 1 Ruch: 7 PM: 10 Szczęście: 40 Pancerz: 1\nAtaki w rundzie: 3 Utrata Poczytalności: 1K4/1K8\nWalka\nUgryzienie 50% (25/10), obrażenia 1K6\nWalka 30% (15/6), obrażenia 1K3\nDerringer 40% (20/8), obrażenia 1K8+1\nUnik 50% (25/10)\nUmiejętności\nTresura Zwierząt 55%, Urok Osobisty 30%, Pierwsza Pomoc 25%, Ukrywanie 20%,\nNasłuchiwanie 50%, Medycyna 45%, Przekonywanie 25%, Psychologia 75%,\nNauka (Astronomia) 90%, Nauka (Botanika) 35%, Nauka (Zoologia) 10%,\nSpostrzegawczość 35%, Ukrywanie 10%\nJęzyki: Angielski 80%, Eklo 5%.\nZaklęcia: Przyzwanie NPC, Odesłanie NPC."},fr:{description:"CoC7.French",dbNone:"Acune",armorNone:"(?:Acune|aucune)",attacksPerRoundNone:"Acune",sanLossNone:"Acune",fulldb:"(BD|Bonus aux dommages|Impact|Imp)",halfdb:"(½|1/2 Imp|Imp/2)",sectionCombats:"\n(?:Combat|Armes|Attaques)[:\n]",newCombatHeader:"\nCombat\n",sectionSkills:"\n(?:Compétences(?:\\s*\\([^\\)]+\\))?)[:\n]",sectionLangauges:"\n(?:Langues?)\\s*[:\n]",sectionSpells:"\n(?:Sortilèges\\s*|Sorts)[:\n]",handgun:"(?<type>Revolver|Pistolet|Derringer|Beretta|Luger|Desert Eagle| \\.38)",rifle:"(?<type>Carabine|Lee-Enfield|Fusil)",smb:"(?<type>SMG|Thompson)",machineGun:"(?<type>Browning|Vickers|Mitrailleuse)",launched:"(?<type>Boomerang de guerre|Javeline|Pierre|Shuriken|Bâton de dynamite|Cocktail Molotov|Grenade à main|Molotov|Grenade|Dynamite)",example:"Example Character, 27 ans\nFOR 75 CON 60 TAI 80 DEX 70 APP 60 INT 80\nPOU 50 ÉDU 85 SAN 55 PV 14 BD: 1D4\nCarrure: 1 Mvt: 7 PM: 10 Chance: 40 Armure: 1\nAttaques par round 3 Perte de SAN: 1d4/1d8\nAttaques\nBite 50% (25/10), dommage 1D6\nBrawl 30% (15/6), dommage 1D3\nDerringer 40% (20/8), dommage 1D8+1\nEsquiver 50% (25/10)\nCompétences\nAnimal Handling 55%, Charm 30%, First Aid 25%, Disguise 20%,\nListen 50%, Medicine 45%, Persuade 25%, Psychology 75%,\nScience (Astronomy) 90%, Science (Botany) 35%, Science (Zoology) 10%,\nSpot Hidden 35%, Stealth 10%\nLangue: English 80%, Eklo 5%.\nSortilèges: Summon NPC, Dispel NPC."},es:{description:"CoC7.Spanish",dbNone:"ninguna",armorNone:"ninguna",attacksPerRoundNone:"ninguno",sanLossNone:"no",fulldb:"(BD|bd|bonificación de daño)",halfdb:"(½|medio daño|mitad|daño a la mitad)",sectionCombats:"\n(?:Combate|Armas)[:\n]",newCombatHeader:"\nCombate\n",sectionSkills:"\n(?:Habilidades(?:\\s*\\([^\\)]+\\))?)[:\n]",sectionLangauges:"\n(?:Idiomas|Lenguajes|Lenguas)[:\n]",sectionSpells:"\n(?:Conjuros|Hechizos)[:\n]",handgun:"(?<type>Revolver|Pistola|Derringer|Beretta|Luger|Desert Eagle| \\.38)",rifle:"(?<type>Rifle|Carabina|Lee-Enfield|Caza Elefantes|Fusil|Escopeta|Galga|Recortada)",smb:"(?<type>Subfusil|Thompson)",machineGun:"(?<type>Browning|Vickers|Ametralladora)",launched:"(?<type>Molotov|Granada|Dinamita)",example:"Example Character, 27 años\nFUE 75 CON 60 TAM 80 DES 70 APA 60 INT 80\nPOD 50 EDU 85 COR 55 PV 14 BD: 1D4\nCorpulencia: 1 Movimiento: 7 PM: 10 Suerte: 40 Armadura: 1\nNúmero de Ataques 3 Pérdida de cordura: 1d4/1d8\nCombate\nBite 50% (25/10), daño 1D6\nBrawl 30% (15/6), daño 1D3\nDerringer 40% (20/8), daño 1D8+1\nEsquivar 50% (25/10)\nHabilidades\nAnimal Handling 55%, Charm 30%, First Aid 25%, Disguise 20%,\nListen 50%, Medicine 45%, Persuade 25%, Psychology 75%,\nScience (Astronomy) 90%, Science (Botany) 35%, Science (Zoology) 10%,\nSpot Hidden 35%, Stealth 10%\nIdiomas: English 80%, Eklo 5%.\nConjuros: Summon NPC, Dispel NPC."},"zh-TW":{description:"CoC7.TraditionalChinese",dbNone:"none",armorNone:"none",attacksPerRoundNone:"none",sanLossNone:"none",fulldb:"(Damage Bonus|DB|傷害加值)",halfdb:"(½|half)",sectionCombats:"\n(?:combat|fighting attacks|戰鬥技能|戰鬥列表|武器)[:\n]",newCombatHeader:"\nCombat\n",sectionSkills:"\n(?:(?:Skills|技能列表)(?:\\s*\\([^\\)]+\\))?)[:\n]",sectionLangauges:"\n(?:Languages|語言)[:\n]",sectionSpells:"\n(?:spells|咒文列表|咒文)[:\n]",handgun:"(?<type> 遂發槍|\\.22短口自動手槍|\\.25短口手槍(單管)|\\.32或7\\.65mm左輪手槍|\\.32或7\\.65mm自動手槍|\\.357 Magnum左輪手槍|\\.38或9mm左輪手槍|\\.38自動手槍|貝雷塔M9|格洛克17|9mm自動手槍|魯格P08|\\.41左輪手槍|\\.44馬格南左輪手槍|\\.45左輪手槍|\\.45自動手槍|沙漠之鷹|Gun|Revolver|Pistol|Handgun|Derringer|Beretta|Luger|Desert Eagle| \\.38)",rifle:"(?<type>步槍|卡賓槍|半自動步槍|獵象槍|Rifle|Shotgun|Carbine|Gauge |Lee-Enfield|Elephant)",smb:"(?<type>Submachine Gun|Thompson|衝鋒槍)",machineGun:"(?<type>Browning|Vickers|機槍)",launched:"(?<type>Molotov|Grenade|Dynamite爆炸物|手榴彈|重武器)",example:"示範角色, 年齡 27\n力量 75 體質 60 體型 80 敏捷 70 外貎 60 智力 80\n意志 50 教育 85 SAN 55 HP 14 DB: 1D4\n體格: 1 Move: 7 MP: 10 幸運: 40 護甲: 1\n攻擊次數: 3 理智喪失: 1d4/1d8\n戰鬥列表\n咬 50% (25/10), 傷害 1D6\n空手 30% (15/6), 傷害 1D3\n手槍 40% (20/8), 傷害 1D8+1\n閃避 50% (25/10)\n技能列表\n動物馴養 55%, 取悅 30%, 急救 25%, 潛行 20%,\n聆聽 50%, 藥學 45%, 精神分析 25%, 心理學 75%,\n科學 (司法科學) 90%, 科學 (密碼學) 35%, \n偵查 35%, 喬裝 10%\n語言: 粵語 80%, 讀唇 5%.\n咒文: 召喚 NPC, 指揮 NPC."},ja:{description:"CoC7.Japanese",dbNone:"なし",armorNone:"なし",attacksPerRoundNone:"なし",sanLossNone:"なし",fulldb:"(Damage Bonus|DB|db|ダメージ(・|･)?ボーナス)",halfdb:"(½|half)",sectionCombats:"\n(?:combat|fighting attacks|戦闘|武器)[:：\n]",newCombatHeader:"\n戦闘\n",sectionSkills:"\n(?:(?:Skills|技能)\\s*(?:\\s*\\([^\\)]+\\))?)[:：\n]",sectionLangauges:"\n(?:Languages|言語)\\s*[:：\n]",sectionSpells:"\n(?:spells|呪文)\\s*[:：\n]",handgun:"(?<type>拳銃|オートマチック|リボルバー|デリンジャー|ベレッタ|ルガー|デザート(・|･)?イーグル|Gun|Revolver|Pistol|Handgun|Derringer|Beretta|Luger|Desert Eagle| \\.38)",rifle:"(?<type>ライフル|ショットガン|カービン|ゲージ|リー＝エンフィールド|エレファント(・|･)?ガン|Rifle|Shotgun|Carbine|Gauge |Lee-Enfield|Elephant)",smb:"(?<type>サブマシンガン|トンプソン|Submachine Gun|Thompson)",machineGun:"(?<type>ブローニング|ヴッカース|マシンガン|Browning|Vickers)",launched:"(?<type>モロトフ|グレネード|ダイナマイト|Molotov|Grenade|Dynamite)",example:"サンプル 太郎、27歳、記者\nSTR 75 CON 60 SIZ 80 DEX 70 APP 60 INT 80\nPOW 50 EDU 85 正気度 55 耐久力 14 ダメージ・ボーナス：1D4\nビルド：1 移動：7 マジック・ポイント：10 幸運：40 装甲：1\n1ラウンドの攻撃回数：3 正気度喪失：1D4/1D8\n戦闘\n噛みつき 50% (25/10)、ダメージ 1D6\n格闘 30% (15/6)、ダメージ 1D3+DB\nデリンジャー 40% (20/8)、ダメージ 1D8+1\n回避 50% (25/10)\n技能\n言いくるめ 25%、医学 45%、隠密 10%、\n聞き耳 50%、説得 25%、心理学 75%、\n科学 (天文学) 90%、科学 (植物学) 35%、科学 (動物学) 10%、\n動物使い 55%、変装 20%、目星 35%、魅惑 30%。\n言語：英語 80%、アクロ語 5%。\n呪文：NPCの召喚、NPCの退散。"}},translations={en:{age:"(?<![a-z])age(\\s*:)?\\s+(?<age>\\d+)[,\\s]*",occupation:"[,\\s]*Occupation(\\s*:)?\\s+(?<occupation>.+)[,\\s\n]*",str:"(?<![a-z])STR(\\s*:)?\\s*(?<str>\\d+|-)[,\\s\n]*",con:"(?<![a-z])CON(\\s*:)?\\s*(?<con>\\d+|-)[,\\s\n]*",siz:"(?<![a-z])SIZ(\\s*:)?\\s*(?<siz>\\d+|-)[,\\s\n]*",int:"(?<![a-z])INT(\\s*:)?\\s*(?<int>\\d+|-)[,\\s\n]*",pow:"(?<![a-z])POW(\\s*:)?\\s*(?<pow>\\d+|-)[,\\s\n]*",dex:"(?<![a-z])DEX(\\s*:)?\\s*(?<dex>\\d+|-)[,\\s\n]*",app:"(?<![a-z])APP(\\s*:)?\\s*(?<app>\\d+|-)[,\\s\n]*",edu:"(?<![a-z])EDU(\\s*:)?\\s*(?<edu>\\d+|-)[,\\s\n]*",san:"(?<![a-z])(?:SAN|Sanity)(\\s*:)?\\s*(?<san>\\d+|-)[,\\s\n]*",hp:"(?<![a-z])(?:HP|Hit points)(\\s*:)?\\s*(?<hp>\\d+|-)[,\\s\n]*",mp:"(?<![a-z])(?:MP|Magic points)(\\s*:)?\\s*(?<mp>\\d+|-)[,\\s\n]*",db:"(?<![a-z])(?:"+keys.en.fulldb+")(\\s*:)?\\s+(?<db>[+-]?\\d+(?:d\\d+|D\\d+)?|"+keys.en.dbNone+")[,\\s\n]*",build:"(?<![a-z])Build(\\s*:)?\\s+(?<build>[+-]?\\d+)[,\\s\n]*",armor:"(?<![a-z])Armor(\\s*:)?\\s+(?<armor>"+keys.en.armorNone+"|\\d+)[,\\s\n]*",mov:"(?<![a-z])Move(\\s*:)?\\s*(?<mov>\\d+)[,\\s\n]*",lck:"(?<![a-z])Luck(\\s*:)?\\s+(?<lck>\\d+|-)[,\\s\n]*",attacksPerRound:"(?<![a-z])(?:Attacks per round|# Attacks)(\\s*:)?\\s+(?<attacksPerRound>"+keys.en.attacksPerRoundNone+"|\\d+(?!d))[,\\s\n]*",sanLoss:"(?<![a-z])(?:Sanity loss|SAN loss)(\\s*:)?\\s+(?<sanLoss>"+keys.en.sanLossNone+"|\\dD?[+\\d]*\\/\\dD?[+\\d]*)[,\\s\n]*",weapon:"(^|\\n)(?<name>[.\\t "+nameCharacters+"]+)(\\**,?\\s+|\\*)(?:\\(|(?<percentage>\\d+)%,?(?:\\s*\\(\\d+\\/\\d+\\)\\s*,?)?)?(\\s*damage)?\\s+(?<damage>(:?(:?\\d+d)?\\d+(\\s*/\\s*|\\s*[+-]\\s*(?:"+keys.en.fulldb+"|"+keys.en.halfdb+")\\s*|\\s*[+-]\\s*(:?\\d+d)?\\d+)*)+)\\)?",weaponDodge:"(?<name>Dodge)(\\s*:)?\\s+\\(?(?<percentage>\\d+)\\)?\\s*%(?:\\s*\\(\\d+\\/\\d+\\))?",skill:"^(?<name>[:\\*.\\s"+nameCharacters+"]+(?<!The player has|but they regenerate))\\s+\\(?(?<percentage>\\d+)[^d]%?\\)?(\\s*\\(\\d+/\\d+\\))?[\\.,]?\\s*",guessStartCombat:"(^|(?<!,)\n)(Fighting|Firearms|Brawl|Bite)",name:"^(?<name>[\\.\\s"+nameCharacters+"]+)[,\\s\n]+",sections:"("+keys.en.sectionCombats+"|"+keys.en.sectionSkills+"|"+keys.en.sectionLangauges+"|"+keys.en.sectionSpells+")"},de:{age:"(?<![a-z])Alter(\\s*:)?\\s+(?<age>\\d+)[,\\s]*",occupation:"[,\\s]*Beruf(\\s*:)?\\s+(?<occupation>.+)[,\\s\n]*",str:"(?<![a-z])ST(\\s*:)?\\s*(?<str>\\d+|-)[,\\s\n]*",con:"(?<![a-z])KO(\\s*:)?\\s*(?<con>\\d+|-)[,\\s\n]*",siz:"(?<![a-z])GR(\\s*:)?\\s*(?<siz>\\d+|-)[,\\s\n]*",int:"(?<![a-z])IN(\\s*:)?\\s*(?<int>\\d+|-)[,\\s\n]*",pow:"(?<![a-z])MA(\\s*:)?\\s*(?<pow>\\d+|-)[,\\s\n]*",dex:"(?<![a-z])GE(\\s*:)?\\s*(?<dex>\\d+|-)[,\\s\n]*",app:"(?<![a-z])ER(\\s*:)?\\s*(?<app>\\d+|-)[,\\s\n]*",edu:"(?<![a-z])BI(\\s*:)?\\s*(?<edu>\\d+|-)[,\\s\n]*",san:"(?<![a-z])(?:gS|STA|Geistige Stabilität)(\\s*:)?\\s*(?<san>\\d+|-)[,\\s\n]*",hp:"(?<![a-z])(?:TP|Trefferpunkte)(\\s*:)?\\s*(?<hp>\\d+|-)[,\\s\n]*",mp:"(?<![a-z])(?:MP|Magiepunkte)(\\s*:)?\\s*(?<mp>\\d+|-)[,\\s\n]*",db:"(?<![a-z])(?:"+keys.de.fulldb+")(\\s*:)?\\s+(?<db>[+-]?\\d+(?:d\\d+|D|W\\d+)?|"+keys.de.dbNone+")[,\\s\n]*",build:"(?<![a-z])(?:Statur|Stat.)(\\s*:)?\\s+(?<build>[+-]?\\d+)[,\\s\n]*",armor:"(?<![a-z])Panzerung(\\s*:)?\\s+(?<armor>"+keys.de.armorNone+"|\\d+)[,\\s\n]*",mov:"(?<![a-z])(?:BW|Bewegungsweite)(\\s*:)?\\s*(?<mov>\\d+)[,\\s\n]*",lck:"(?<![a-z])Glück(\\s*:)?\\s+(?<lck>\\d+|-)[,\\s\n]*",attacksPerRound:"(?<![a-z])(?:Angriffe pro Runde|Angriffe|Pro Runde)(\\s*:)?\\s+(?<attacksPerRound>"+keys.de.attacksPerRoundNone+"|\\d+(?!d))[,\\s\n]*",sanLoss:"(?<![a-z])(?:Stabilitätsverlust)(\\s*:)?\\s+(?<sanLoss>"+keys.de.sanLossNone+"|\\d[DW]?[+\\d]*\\/\\d[DW]?[+\\d]*)[,\\s\n]*",weapon:"(^|\\n)(?<name>[.\\t "+nameCharacters+"]+)(\\**,?\\s+|\\*)(?:\\(|(?<percentage>\\d+)%,?(?:\\s*\\(\\d+\\/\\d+\\)\\s*,?)?)?(\\s*Schaden)?\\s+(?<damage>(:?(:?\\d+w|d)?\\d+(\\s*/\\s*|\\s*[+-]\\s*(?:"+keys.de.fulldb+"|"+keys.de.halfdb+")\\s*|\\s*[+-]\\s*(:?\\d+d|w)?\\d+)*)+)\\)?",weaponDodge:"(?<name>Ausweichen)(\\s*:)?\\s+\\(?(?<percentage>\\d+)\\)?\\s*%(?:\\s*\\(\\d+\\/\\d+\\))?",skill:"^(?<name>[:\\*.\\s"+nameCharacters+"]+(?<!The player has|but they regenerate))\\s+\\(?(?<percentage>\\d+)[^d]%?\\)?(\\s*\\(\\d+/\\d+\\))?[\\.,;]?\\s*",guessStartCombat:"(^|(?<!,)\n)(Angriffe|Handgemenge|Nahkampf|Faustfeuerwaffe|Beißen)",name:"^(?<name>[\\.\\s"+nameCharacters+"]+)[,\\s\n]+",sections:"("+keys.de.sectionCombats+"|"+keys.de.sectionSkills+"|"+keys.de.sectionLangauges+"|"+keys.de.sectionSpells+")"},pl:{age:"(?<age>\\d+)\\s+(?:lata|lat|rok)[,\\s]*",occupation:"[,\\s]*Zawód(\\s*:)?\\s+(?<occupation>.+)[,\\s\n]*",str:"(?<![a-z])S(\\s*:)?\\s*(?<str>\\d+|-)[,\\s\n]*",con:"(?<![a-z])KON(\\s*:)?\\s*(?<con>\\d+|-)[,\\s\n]*",siz:"(?<![a-z])BC(\\s*:)?\\s*(?<siz>\\d+|-)[,\\s\n]*",int:"(?<![a-z])INT(\\s*:)?\\s*(?<int>\\d+|-)[,\\s\n]*",pow:"(?<![a-z])MOC(\\s*:)?\\s*(?<pow>\\d+|-)[,\\s\n]*",dex:"(?<![a-z])ZR(\\s*:)?\\s*(?<dex>\\d+|-)[,\\s\n]*",app:"(?<![a-z])WYG(\\s*:)?\\s*(?<app>\\d+|-)[,\\s\n]*",edu:"(?<![a-z])WYK(\\s*:)?\\s*(?<edu>\\d+|-)[,\\s\n]*",san:"(?<![a-z])(?:P|Poczytalność)(\\s*:)?\\s*(?<san>\\d+|-)[,\\s\n]*",hp:"(?<![a-z])(?:PW|Punkty Wytrzymałości)(\\s*:)?\\s*(?<hp>\\d+|-)[,\\s\n]*",mp:"(?<![a-z])(?:PM|Punkty Magii)(\\s*:)?\\s*(?<mp>\\d+|-)[,\\s\n]*",db:"(?<![a-z])(?:"+keys.pl.fulldb+")(\\s*:)?\\s+(?<db>[+-]?\\d+(?:d\\d+|D|K\\d+)?|"+keys.pl.dbNone+")[,\\s\n]*",build:"(?<![a-z])Krzepa(\\s*:)?\\s+(?<build>[+-]?\\d+)[,\\s\n]*",armor:"(?<![a-z])Pancerz(\\s*:)?\\s+(?<armor>"+keys.pl.armorNone+"|\\d+)[,\\s\n]*",mov:"(?<![a-z])Ruch(\\s*:)?\\s*(?<mov>\\d+)[,\\s\n]*",lck:"(?<![a-z])Szczęście(\\s*:)?\\s+(?<lck>\\d+|-)[,\\s\n]*",attacksPerRound:"(?<![a-z])(?:Ataki w rundzie|# Ataki)(\\s*:)?\\s+(?<attacksPerRound>"+keys.pl.attacksPerRoundNone+"|\\d+(?!d))[,\\s\n]*",sanLoss:"(?<![a-z])(?:Utrata Poczytalności|utrata P)(\\s*:)?\\s+(?<sanLoss>"+keys.pl.sanLossNone+"|\\d[DK]?[+\\d]*\\/\\d[DK]?[+\\d]*)[,\\s\n]*",weapon:"(^|\\n)(?<name>[.\\t "+nameCharacters+"]+)(\\**,?\\s+|\\*)(?:\\(|(?<percentage>\\d+)%,?(?:\\s*\\(\\d+\\/\\d+\\)\\s*,?)?)?(\\s*obrażenia)?\\s+(?<damage>(:?(:?\\d+k|d)?\\d+(\\s*/\\s*|\\s*[+-]\\s*(?:"+keys.pl.fulldb+"|"+keys.pl.halfdb+")\\s*|\\s*[+-]\\s*(:?\\d+d)?\\d+)*)+)\\)?",weaponDodge:"(?<name>Unik)(\\s*:)?\\s+\\(?(?<percentage>\\d+)\\)?\\s*%(?:\\s*\\(\\d+\\/\\d+\\))?",skill:"^(?<name>[:\\*.\\s"+nameCharacters+"]+(?<!The player has|but they regenerate))\\s+\\(?(?<percentage>\\d+)[^d]%?\\)?(\\s*\\(\\d+/\\d+\\))?[\\.,]?\\s*",guessStartCombat:"(^|(?<!,)\n)(Walka|Broń Palna|Bijatyka|Ugryzienie)",name:"^(?<name>[\\.\\s"+nameCharacters+"]+)[,\\s\n]+",sections:"("+keys.pl.sectionCombats+"|"+keys.pl.sectionSkills+"|"+keys.pl.sectionLangauges+"|"+keys.pl.sectionSpells+")"},fr:{age:"(?<age>\\d+)\\s*ans(?![a-z])[,\\s]*",occupation:"[,\\s]*Occupation(\\s*:)?\\s+(?<occupation>.+)[,\\s\n]*",str:"(?<![a-z])FOR(\\s*:)?\\s*(?<str>\\d+|-)[,\\s\n]*",con:"(?<![a-z])CON(\\s*:)?\\s*(?<con>\\d+|-)[,\\s\n]*",siz:"(?<![a-z])TAI(\\s*:)?\\s*(?<siz>\\d+|-)[,\\s\n]*",int:"(?<![a-z])INT(\\s*:)?\\s*(?<int>\\d+|-)[,\\s\n]*",pow:"(?<![a-z])POU(\\s*:)?\\s*(?<pow>\\d+|-)[,\\s\n]*",dex:"(?<![a-z])DEX(\\s*:)?\\s*(?<dex>\\d+|-)[,\\s\n]*",app:"(?<![a-z])APP(\\s*:)?\\s*(?<app>\\d+|-)[,\\s\n]*",edu:"(?<![a-z])ÉDU(\\s*:)?\\s*(?<edu>\\d+|-)[,\\s\n]*",san:"(?<!([a-z]|de\\s))(?:SAN|Santé Mentale)(\\s*:)?\\s*(?<san>\\d+|-)[,\\s\n]*",hp:"(?<![a-z])(?:PV|Points de vie)(\\s*:)?\\s*(?<hp>\\d+|-)[,\\s\n]*",mp:"(?<![a-z])(?:PM|Points de magie)(\\s*:)?\\s*(?<mp>\\d+|-)[,\\s\n]*",db:"(?<![a-z])(?:"+keys.fr.fulldb+")(\\s*:)?\\s+(?<db>[+-]?\\d+(?:d\\d+|D\\d+)?|"+keys.fr.dbNone+")[,\\s\n]*",build:"(?<![a-z])Carrure(\\s*:)?\\s+(?<build>[+-]?\\d+)[,\\s\n]*",armor:"(?<![a-z])(?:Armure|Protection)(\\s*:)?\\s+(?<armor>"+keys.fr.armorNone+"|\\d+)[,\\s\n]*",mov:"(?<![a-z])(?:Mvt|Mouvement|Déplacement)(\\s*:)?\\s*(?<mov>\\d+)[,\\s\n]*",lck:"(?<![a-z])Chance(\\s*:)?\\s+(?<lck>\\d+|-)[,\\s\n]*",attacksPerRound:"(?<![a-z])(?:Attaques par round)(\\s*:)?\\s+(?<attacksPerRound>"+keys.fr.attacksPerRoundNone+"|\\d+(?!d))[,\\s\n]*",sanLoss:"(?<![a-z])(?:Perte de Santé mentale|Perte de SAN)(\\s*:)?\\s+(?<sanLoss>"+keys.fr.sanLossNone+"|\\dD?[+\\d]*\\/\\dD?[+\\d]*)[,\\s\n]*",weapon:"(^|\\n)(?<name>[.\\t "+nameCharacters+"]+)(\\**,?\\s+|\\*)(?:\\(|(?<percentage>\\d+)%,?(?:\\s*\\(\\d+\\/\\d+\\)\\s*,?)?)?(\\s*(?:dommage|dégâts))?\\s+(?<damage>(:?(:?\\d+d)?\\d+(\\s*/\\s*|\\s*[+-]\\s*(?:"+keys.fr.fulldb+"|"+keys.fr.halfdb+")\\s*|\\s*[+-]\\s*(:?\\d+d)?\\d+)*)+)\\)?",weaponDodge:"(?<name>Esquiver?)(\\s*:)?\\s+\\(?(?<percentage>\\d+)\\)?\\s*%(?:\\s*\\(\\d+\\/\\d+\\))?",skill:"^(?<name>[:\\*.\\s"+nameCharacters+"]+(?<!The player has|but they regenerate))\\s+\\(?(?<percentage>\\d+)[^d]%?\\)?(\\s*\\(\\d+/\\d+\\))?[\\.,]?\\s*",guessStartCombat:"(^|(?<!,)\n)(Au contact|À distance|Combat rapproché|Bite)",name:"^(?<name>[\\.\\s"+nameCharacters+"]+)[,\\s\n]+",sections:"("+keys.fr.sectionCombats+"|"+keys.fr.sectionSkills+"|"+keys.fr.sectionLangauges+"|"+keys.fr.sectionSpells+")"},es:{age:"(?<age>\\d+)\\s*a[ñÑ]os(?![a-z])[,\\s]*",occupation:"[,\\s]*Ocupación(\\s*:)?\\s+(?<occupation>.+)[,\\s\n]*",str:"(?<![a-z])FUE(\\s*:)?\\s*(?<str>\\d+|-)[,\\s\n]*",con:"(?<![a-z])CON(\\s*:)?\\s*(?<con>\\d+|-)[,\\s\n]*",siz:"(?<![a-z])TAM(\\s*:)?\\s*(?<siz>\\d+|-)[,\\s\n]*",int:"(?<![a-z])INT(\\s*:)?\\s*(?<int>\\d+|-)[,\\s\n]*",pow:"(?<![a-z])POD(\\s*:)?\\s*(?<pow>\\d+|-)[,\\s\n]*",dex:"(?<![a-z])DES(\\s*:)?\\s*(?<dex>\\d+|-)[,\\s\n]*",app:"(?<![a-z])APA(\\s*:)?\\s*(?<app>\\d+|-)[,\\s\n]*",edu:"(?<![a-z])EDU(\\s*:)?\\s*(?<edu>\\d+|-)[,\\s\n]*",san:"(?<![a-z])(?:COR|Cordura)(\\s*:)?\\s*(?<san>\\d+|-)[,\\s\n]*",hp:"(?<![a-z])(?:PV|Puntos de vida|P\\. ?V\\.)(\\s*:)?\\s+(?<hp>\\d+|-)[,\\s\n]*",mp:"(?<![a-z])(?:PM|Puntos Mágicos|Puntos de Magia)(\\s*:)?\\s+(?<mp>\\d+|-)[,\\s\n]*",db:"(?<![a-z])(?:"+keys.es.fulldb+")(\\s*:)?\\s+(?<db>[+-]?\\d+(?:d\\d+|D\\d+)?|"+keys.es.dbNone+")[,\\s\n]*",build:"(?<![a-z])Corpulencia(\\s*:)?\\s+(?<build>[+-]?\\d+)[,\\s\n]*",armor:"(?<![a-z])Armadura(\\s*:)?\\s+(?<armor>"+keys.es.armorNone+"|\\d+)[,\\s\n]*",mov:"(?<![a-z])Movimiento(\\s*:)?\\s*(?<mov>\\d+)[,\\s\n]*",lck:"(?<![a-z])Suerte(\\s*:)?\\s+(?<lck>\\d+|-)[,\\s\n]*",attacksPerRound:"(?<![a-z])(?:Número de Ataques)(\\s*:)?\\s+(?<attacksPerRound>"+keys.es.attacksPerRoundNone+"|\\d+(?!d))[,\\s\n]*",sanLoss:"(?<![a-z])(?:Pérdida de cordura|Pérdida de COR)(\\s*:)?\\s+(?<sanLoss>"+keys.es.sanLossNone+"|\\dD?[+\\d]*\\/\\dD?[+\\d]*)[,\\s\n]*",weapon:"(^|\\n)(?<name>[.\\t "+nameCharacters+"]+)(\\**,?\\s+|\\*)(?:\\(|(?<percentage>\\d+)%,?(?:\\s*\\(\\d+\\/\\d+\\)\\s*,?)?)?(\\s*daño)?\\s+(?<damage>(:?(:?\\d+d)?\\d+(\\s*/\\s*|\\s*[+-]\\s*(?:"+keys.es.fulldb+"|"+keys.es.halfdb+")\\s*|\\s*[+-]\\s*(:?\\d+d)?\\d+)*)+)\\)?",weaponDodge:"(?<name>Esquivar)(\\s*:)?\\s+\\(?(?<percentage>\\d+)\\)?\\s*%(?:\\s*\\(\\d+\\/\\d+\\))?",skill:"^(?<name>[:\\*.\\s"+nameCharacters+"]+(?<!The player has|but they regenerate))\\s+\\(?(?<percentage>\\d+)[^d]%?\\)?(\\s*\\(\\d+/\\d+\\))?[\\.,]?\\s*",guessStartCombat:"(^|(?<!,)\n)(Combatir|Armas de fuego|Pelea|Mordisco)",name:"^(?<name>[\\.\\s"+nameCharacters+"]+)[,\\s\n]+",sections:"("+keys.es.sectionCombats+"|"+keys.es.sectionSkills+"|"+keys.es.sectionLangauges+"|"+keys.es.sectionSpells+")"},"zh-TW":{age:"(?<![a-z])age|年齡(\\s*:)?\\s*(?<age>\\d+)[,\\s]*",occupation:"[,\\s]*Occupation(\\s*:)?\\s+(?<occupation>.+)[,\\s\n]*",str:"(?<![a-z])STR|力量(\\s*:)?\\s*(?<str>\\d+|-)[,\\s\n]*",con:"(?<![a-z])CON|體質(\\s*:)?\\s*(?<con>\\d+|-)[,\\s\n]*",siz:"(?<![a-z])SIZ|體型(\\s*:)?\\s*(?<siz>\\d+|-)[,\\s\n]*",int:"(?<![a-z])INT|智力(\\s*:)?\\s*(?<int>\\d+|-)[,\\s\n]*",pow:"(?<![a-z])POW|意志(\\s*:)?\\s*(?<pow>\\d+|-)[,\\s\n]*",dex:"(?<![a-z])DEX|敏捷(\\s*:)?\\s*(?<dex>\\d+|-)[,\\s\n]*",app:"(?<![a-z])APP|外貎(\\s*:)?\\s*(?<app>\\d+|-)[,\\s\n]*",edu:"(?<![a-z])EDU|教育(\\s*:)?\\s*(?<edu>\\d+|-)[,\\s\n]*",san:"(?<![a-z])(?:SAN|Sanity|理智)(\\s*:)?\\s*(?<san>\\d+|-)[,\\s\n]*",hp:"(?<![a-z])(?:HP|Hit points|生命)(\\s*:)?\\s*(?<hp>\\d+|-)[,\\s\n]*",mp:"(?<![a-z])(?:MP|Magic points)(\\s*:)?\\s*(?<mp>\\d+|-)[,\\s\n]*",db:"(?<![a-z])(?:"+keys["zh-TW"].fulldb+")(\\s*:)?\\s*(?<db>[+-]?\\d+(?:d\\d+|D\\d+)?|"+keys["zh-TW"].dbNone+")[,\\s\n]*",build:"(?<![a-z])Build|體格(\\s*:)?\\s*(?<build>[+-]?\\d+)[,\\s\n]*",armor:"(?<![a-z])Armor|護甲(\\s*:)?\\s*(?<armor>"+keys["zh-TW"].armorNone+"|\\d+)[,\\s\n]*",mov:"(?<![a-z])Move(\\s*:)?\\s*(?<mov>\\d+)[,\\s\n]*",lck:"(?<![a-z])Luck|幸運(\\s*:)?\\s*(?<lck>\\d+|-)[,\\s\n]*",attacksPerRound:"(?<![a-z])(?:Attacks per round|# Attacks|攻擊次數|# 攻擊)(\\s*:)?\\s*(?<attacksPerRound>"+keys["zh-TW"].attacksPerRoundNone+"|\\d+(?!d))[,\\s\n]*",sanLoss:"(?<![a-z])(?:Sanity loss|SAN loss|理智喪失|SAN值損失|SAN值喪失|扣SAN)(\\s*:)?\\s*(?<sanLoss>"+keys["zh-TW"].sanLossNone+"|\\dD?[+\\d]*\\/\\dD?[+\\d]*)[,\\s\n]*",weapon:"(^|\\n)(?<name>[.\\t "+nameCharacters+"]+)(\\**,?\\s+|\\*)(?:\\(|(?<percentage>\\d+)%,?(?:\\s*\\(\\d+\\/\\d+\\)\\s*,?)?)?(\\s*(?:damage|傷害))?\\s+(?<damage>(:?(:?\\d+d)?\\d+(\\s*/\\s*|\\s*[+-]\\s*(?:"+keys["zh-TW"].fulldb+"|"+keys["zh-TW"].halfdb+")\\s*|\\s*[+-]\\s*(:?\\d+d)?\\d+)*)+)\\)?",weaponDodge:"(?<name>Dodge|閃避|閃躲)(\\s*:)?\\s+\\(?(?<percentage>\\d+)\\)?\\s*%?(?:\\s*\\(\\d+\\/\\d+\\))?",skill:"^(?<name>[:\\*.\\s"+nameCharacters+"]+(?<!The player has|but they regenerate))\\s+\\(?(?<percentage>\\d+)[^d]%?\\)?(\\s*\\(\\d+/\\d+\\))?[\\.,]?\\s*",guessStartCombat:"(^|(?<!,)\n)(近戰技能|射擊技能|Brawl|Bite)",name:"^(?<name>[\\.\\s"+nameCharacters+"]+)[,\\s\n]+",sections:"("+keys["zh-TW"].sectionCombats+"|"+keys["zh-TW"].sectionSkills+"|"+keys["zh-TW"].sectionLangauges+"|"+keys["zh-TW"].sectionSpells+")"},ja:{age:"[(（]?(?<age>\\d+)(\\s+)*(?:歳|才)[)）]?[,、\\s]*",occupation:"[,、\\s]*(職業)?(\\s*[:：])?\\s+(?<occupation>.+)[,、\\s\n]*",str:"(?<![a-z])STR(\\s*[:：])?\\s*(?<str>\\d+|-)[,、\\s\n]*",con:"(?<![a-z])CON(\\s*[:：])?\\s*(?<con>\\d+|-)[,、\\s\n]*",siz:"(?<![a-z])SIZ(\\s*[:：])?\\s*(?<siz>\\d+|-)[,、\\s\n]*",int:"(?<![a-z])INT(\\s*[:：])?\\s*(?<int>\\d+|-)[,、\\s\n]*",pow:"(?<![a-z])POW(\\s*[:：])?\\s*(?<pow>\\d+|-)[,、\\s\n]*",dex:"(?<![a-z])DEX(\\s*[:：])?\\s*(?<dex>\\d+|-)[,、\\s\n]*",app:"(?<![a-z])APP(\\s*[:：])?\\s*(?<app>\\d+|-)[,、\\s\n]*",edu:"(?<![a-z])EDU(\\s*[:：])?\\s*(?<edu>\\d+|-)[,、\\s\n]*",san:"(?<![a-z])(?:(SAN|Sanity|正気度))(\\s*[:：])?\\s*(?<san>\\d+|-)[,、\\s\n]*",hp:"(?<![a-z])(?:(HP|Hit points|耐久力|ヒット(・|･)?ポイント))(\\s*[:：])?\\s*(?<hp>\\d+|-)[,、\\s\n]*",mp:"(?<![a-z])(?:(MP|Magic points|マジック(・|･)?ポイント))(\\s*[:：])?\\s*(?<mp>\\d+|-)[,、\\s\n]*",db:"(?<![a-z])(?:"+keys.ja.fulldb+")(\\s*[:：])?\\s*(?<db>[+-]?\\s*\\d+(?:d\\d+|D\\d+)?|"+keys.ja.dbNone+")[,、\\s\n]*",build:"(?<![a-z])(Build|ビルド)(\\s*[:：])?\\s*(?<build>[+-]?\\d+)[,、\\s\n]*",armor:"(?<![a-z])(Armor|装甲)(\\s*[:：])?\\s*(?<armor>"+keys.ja.armorNone+"|\\d+)[,、\\s\n]*",mov:"(?<![a-z])(Move|MOV|移動率?)(\\s*[:：])?\\s*(?<mov>\\d+)[,、\\s\n]*",lck:"(?<![a-z])(Luck|幸運)(\\s*[:：])?\\s*(?<lck>\\d+|-)[,、\\s\n]*",attacksPerRound:"(?<![a-z])(?:(Attacks per round|# Attacks|((1|1 |１)ラウンドの)?攻撃回数))(\\s*[:：])?\\s*(?<attacksPerRound>"+keys.ja.attacksPerRoundNone+"|\\d+(?!d))[,、\\s\n]*",sanLoss:"(?<![a-z])(?:(Sanity loss|SAN loss|正気度喪失))(\\s*[:：]\\D*)?\\s*(?<sanLoss>"+keys.ja.sanLossNone+"|\\dD?[+\\d]*[\\/／]\\dD?[+\\d]*)[,、\\s\n]*",weapon:"(^|\\n)(?<name>[.\\t\\w "+nameCharacters+"]+)(\\**[,、]?\\s+|\\*)(?:\\(|(?<percentage>\\d+)[%％][,、]?(?:\\s*[\\(（]\\d+[\\/／]\\d+[\\)）]\\s*[,、]?)?)?(\\s*(?:damage|ダメージ))?\\s*(?<damage>(:?\\d+[dD])?\\d+(\\s*/\\s*|\\s*[+-]\\s*(?:"+keys.ja.fulldb+"|"+keys.ja.halfdb+")\\s*|\\s*[+-]\\s*(:?\\d+[dD])?\\d+)*)\\)?",weaponDodge:"(?<name>(Dodge|回避))(\\s*[:：])?\\s*\\(?(?<percentage>\\d+)\\)?\\s*[%％]?(?:\\s*[\\(（]\\d+[\\/／]\\d+[\\)）])?",skill:"^(?<name>[:\\*.\\s"+nameCharacters+"]+(?<!The player has|but they regenerate|\\d))[\\s:：]*\\(?(?<percentage>\\d+)[^d][%％]?\\)?(\\s*[\\(（]\\d+[\\/／]\\d+[\\)）])?\\s?[\\.,、]?\\s*",guessStartCombat:"(^|(?<!,)\n)(近接(戦闘|格闘)|格闘|攻撃|素手|噛みつき|射撃|Brawl|Bite)",name:"^(?<name>[\\.\\s"+nameCharacters+"]+)[,、\\s\n]+",sections:"("+keys.ja.sectionCombats+"|"+keys.ja.sectionSkills+"|"+keys.ja.sectionLangauges+"|"+keys.ja.sectionSpells+")"}};class CoC7ActorImporterRegExp{static checkLanguage(lang=null){return lang||(lang=game.i18n.lang),void 0===translations[lang]&&(lang="en"),lang}static getExampleText(lang){let example=keys.en.example;return void 0!==keys[lang]&&(example=keys[lang].example),example}static getTranslations(){const output={};for(const key in keys)output[key]=keys[key].description;return output}static getKeys(lang){return keys[lang]||keys.en}static getRegularExpressions(lang){return translations[lang]||translations.en}}class CoC7ActorImporter{constructor(){this.parsed={},this.itemLocations=""}static get asNumber(){return"n"}static get asString(){return"s"}getRegEx(regex,modifiers="iu"){return"RegExp"===regex.constructor?.name?regex:new RegExp(regex,modifiers)}cleanString(s){return"CoC7.Japanese"===this.keys.description?s.replace(/(\n|\r)/g," ").replace(/^\s*/,"").replace(/\s*[(（]\s*/g," (").replace(/\s*[)）]\s*/g,")").replace(/\s*[.。]?\s*[.。]?$/,"").replace(/^[〈《]/,"").replace(/[〉》]$/,""):s.replace(/(\n|\r)/g," ").replace(/^\s*/,"").replace(/\s*\.?\s*\.?$/,"")}translateRoll(s){if(void 0===s)return s;if(void 0!==this.keys.diceShort){const regEx=new RegExp("(?<n1>\\d+)"+this.keys.diceShort+"(?<n2>\\d+)","iug");return s.replace(regEx,"$<n1>D$<n2>")}return s}toHTML(s){return 0===s.trim().length||0===(s=s.trim().split("\n").map((text=>text.trim().replace(/^[,.\s、。]+$/,""))).filter((text=>text)).join("</p><p>")).length?"":"<p>"+s+"</p>"}check(regExKey,{removeFromText=!0,saveKeys=!0,type=CoC7ActorImporter.asString,text=!1,requiredGroup=!1}={}){let output=!1,regExp=!1;if(void 0!==this.regEx[regExKey]?regExp=this.getRegEx(this.regEx[regExKey]):void 0!==this.keys[regExKey]&&(regExp=this.getRegEx(this.keys[regExKey])),!1!==regExp){!1===text&&(text=this.text);const check=regExp.exec(text);let value=null;if(null!==check&&(!1===requiredGroup||void 0!==(check.groups||{})[requiredGroup])){if(output=check.groups||{},removeFromText&&(this.text=this.text.replace(check[0].trim(),"\n").trim()),saveKeys)for(const key of Object.keys(check.groups))switch(type){case CoC7ActorImporter.asString:this.parsed[key]=String(check.groups[key]).replace("\n"," ");break;case CoC7ActorImporter.asNumber:value=Number(check.groups[key]),isNaN(value)||(this.parsed[key]=Number(check.groups[key]))}output["-source"]=check[0],output["-index"]=check.index}}return output}processCombat(text){if(0===text.trim().length)return;let weapon,dodge,newline;CONFIG.debug.CoC7Importer&&console.log("combat text",text);let lastPercent=!1,maxLoops=40;do{if(maxLoops--,text=text.trim(),dodge=this.check("weaponDodge",{saveKeys:!1,text}))text=text.replace(dodge["-source"],"\n"),void 0===this.parsed.skills&&(this.parsed.skills=[]),this.parsed.skills.push({name:this.cleanString(dodge.name),value:Number(dodge.percentage),push:!1});else if(weapon=this.check("weapon",{saveKeys:!1,text,requiredGroup:!1===lastPercent&&"percentage"})){text=text.replace(weapon["-source"],"\n");const name=this.cleanString(weapon.name||"");let damage=this.translateRoll(this.cleanString(weapon.damage||""));const isRanged=!!(this.check("handgun",{text:name,removeFromText:!1,saveKeys:!1})||this.check("rifle",{text:name,removeFromText:!1,saveKeys:!1})||this.check("smb",{text:name,removeFromText:!1,saveKeys:!1})||this.check("machineGun",{text:name,removeFromText:!1,saveKeys:!1})||this.check("launched",{text:name,removeFromText:!1,saveKeys:!1}));let found;lastPercent=null===weapon.percentage||void 0===weapon.percentage||Number(weapon.percentage);let ahdb=!1,addb=!1;do{found=this.getRegEx("\\s*[+-]?\\s*("+this.keys.halfdb+")\\s*("+this.keys.fulldb+")?[-+]?\\s*("+this.parsed.db.replace(/^[-+]/,"")+")?").exec(damage),found?(ahdb=!0,damage=damage.replace(found[0],"")):(found=this.getRegEx("\\s*[+-]?\\s*("+this.keys.fulldb+")\\s*[-+]?\\s*("+this.parsed.db.replace(/^[-+]/,"")+")?").exec(damage),found&&(addb=!0,damage=damage.replace(found[0],"")))}while(found);const damages=damage.split("/"),isShotgun=3===damages.length,data={name,type:"weapon",system:{skill:{id:lastPercent},properties:{},range:{normal:{value:isShotgun?10:0,damage:damages[0]},long:{value:isShotgun?20:0,damage:isShotgun?damages[1]:""},extreme:{value:isShotgun?50:0,damage:isShotgun?damages[2]:""}}}};data.system.properties.shotgun=isShotgun,data.system.properties.rngd=isRanged||isShotgun,data.system.properties.melee=!data.system.properties.rngd,data.system.properties.ahdb=ahdb,data.system.properties.addb=addb,void 0===this.parsed.attacks&&(this.parsed.attacks=[]),this.parsed.attacks.push(data)}else(newline=text.match(/^(.+)\n/))?text=text.replace(newline[0],"\n"):(newline=text.match(/^[^\n]+$/))&&(text="")}while(maxLoops>0&&(weapon||dodge||text));0===maxLoops&&(ui.notifications.warn(game.i18n.localize("CoC7.ErrorUnexpectedWeaponText")),console.debug("Unexpected weapons:",text))}processSkills(text,key="skills"){if(0===text.trim().length)return;const breaks=text.split(/\.\r?\n/);let skill;breaks.length>1&&(text=breaks[0]);let maxLoops=40;do{maxLoops--,text=text.trim(),skill=this.check("skill",{saveKeys:!1,text}),skill&&(text=text.replace(skill["-source"],"\n"),void 0===this.parsed[key]&&(this.parsed[key]=[]),this.parsed[key].push({name:this.cleanString(skill.name),value:Number(skill.percentage)}))}while(maxLoops>0&&skill);0===maxLoops&&(ui.notifications.warn(game.i18n.localize("CoC7.ErrorUnexpectedSkillsText")),console.debug("Unexpected skills:",text))}processSpells(text){if(0===text.trim().length)return;const breaks=text.split(/\.\r?\n/);breaks.length>1&&(text=breaks[0]);const spellsArr=text.replace(/([\n\r]+)/g," ").split(/(?<!\([^)]+)[,、]/);this.text=this.text.replace(text.trim(),"\n");for(const spell of spellsArr)void 0===this.parsed.spells&&(this.parsed.spells=[]),this.parsed.spells.push(this.cleanString(spell))}async parseCharacter(text){this.text=String(text).trim().replace(/\u2013|\u2014|\u2212/g,"-").replace(/\u2019/g,"'").replace(/[\udbc0-\udbfe][\udc00-\udfff]/g,"");let header,min=this.text.length,check=this.check("str",{type:CoC7ActorImporter.asNumber})["-index"];if(isNaN(check)||(min=Math.min(min,check)),check=this.check("con",{type:CoC7ActorImporter.asNumber})["-index"],isNaN(check)||(min=Math.min(min,check)),check=this.check("siz",{type:CoC7ActorImporter.asNumber})["-index"],isNaN(check)||(min=Math.min(min,check)),check=this.check("int",{type:CoC7ActorImporter.asNumber})["-index"],isNaN(check)||(min=Math.min(min,check)),check=this.check("pow",{type:CoC7ActorImporter.asNumber})["-index"],isNaN(check)||(min=Math.min(min,check)),check=this.check("dex",{type:CoC7ActorImporter.asNumber})["-index"],isNaN(check)||(min=Math.min(min,check)),check=this.check("app",{type:CoC7ActorImporter.asNumber})["-index"],isNaN(check)||(min=Math.min(min,check)),check=this.check("edu",{type:CoC7ActorImporter.asNumber})["-index"],isNaN(check)||(min=Math.min(min,check)),check=this.check("san",{type:CoC7ActorImporter.asNumber})["-index"],isNaN(check)||(min=Math.min(min,check)),check=this.check("hp",{type:CoC7ActorImporter.asNumber})["-index"],isNaN(check)||(min=Math.min(min,check)),check=this.check("mp",{type:CoC7ActorImporter.asNumber})["-index"],isNaN(check)||(min=Math.min(min,check)),min>0){if(header=this.text.substr(0,min),check=this.check("name",{text:header}),!1===check?this.parsed.name=game.i18n.localize("CoC7.ImportedUnnamedCharacter"):header=header.replace(check["-source"],"\n"),check=this.check("age",{text:header}),!1!==check&&(header=header.replace(check["-source"],"\n")),!this.check("occupation",{text:header})&&""!==header.trim()){let occupation=header;header.indexOf(".")>-1&&(occupation=header.substr(0,header.indexOf(".")+1)),this.parsed.occupation=occupation.replace(/([\n\r]+)/g," ").trim().replace(/,$/,""),this.text=this.text.replace(occupation.trim(),"\n")}}else this.parsed.name=game.i18n.localize("CoC7.ImportedUnnamedCharacter");if(void 0!==this.parsed.occupation&&void 0===this.parsed.age){const occupationAge=this.parsed.occupation.match(/^(?<age>\d+),(?<occupation>.+)$/);occupationAge&&(this.parsed.age=occupationAge.groups.age,this.parsed.occupation=occupationAge.groups.occupation.trim())}this.check("db")&&!this.check("dbNone",{removeFromText:!1,saveKeys:!1,text:this.parsed.db})||(this.parsed.db="0"),this.parsed.db=this.translateRoll(this.parsed.db),this.check("build"),this.check("armor")&&!this.check("armorNone",{removeFromText:!1,saveKeys:!1,text:this.parsed.armor})||(this.parsed.armor="0"),this.check("mov",{type:CoC7ActorImporter.asNumber}),this.check("lck",{type:CoC7ActorImporter.asNumber}),this.check("sanLoss"),this.parsed.sanLoss=this.translateRoll(this.parsed.sanLoss),this.check("attacksPerRound")&&this.check("attacksPerRoundNone",{removeFromText:!1,saveKeys:!1,text:this.parsed.attacksPerRound})&&(this.parsed.attacksPerRound="0"),this.text="\n"+this.text;let sections=this.getRegEx("("+this.keys.sectionCombats+")","i");null===this.text.match(sections)&&(sections=this.check("guessStartCombat",{saveKeys:!1,removeFromText:!1}),sections&&(this.text=[this.text.slice(0,sections["-index"]),this.keys.newCombatHeader,this.text.slice(sections["-index"])].join("")));const regExpSections=this.getRegEx(this.regEx.sections,"i");if(sections=this.text.split(regExpSections),null!==sections)for(let i=0,im=sections.length;i<im;i++)null!==sections[i].match(this.getRegEx("("+this.keys.sectionCombats+")","i"))&&void 0!==sections[i+1]?(this.text=("\n"+this.text+"\n").replace(sections[i],"\n").trim(),this.processCombat(sections[i+1]),i++):null!==sections[i].match(this.getRegEx("("+this.keys.sectionSkills+")","i"))&&void 0!==sections[i+1]?(this.text=("\n"+this.text+"\n").replace(sections[i],"\n").trim(),this.processSkills(sections[i+1]),i++):null!==sections[i].match(this.getRegEx("("+this.keys.sectionLangauges+")","i"))&&void 0!==sections[i+1]?(this.text=("\n"+this.text+"\n").replace(sections[i],"\n").trim(),this.processSkills(sections[i+1],"languages"),i++):null!==sections[i].match(this.getRegEx("("+this.keys.sectionSpells+")","i"))&&void 0!==sections[i+1]&&(this.text=("\n"+this.text+"\n").replace(sections[i],"\n").trim(),this.processSpells(sections[i+1]),i++);return this.parsed.gmnotes=this.toHTML(this.text),this.parsed}disableAttribAuto(key,attribValue,check,updateData){const value=Math.max(0,Number(attribValue));return value!==Number(check)&&(updateData[`system.attribs.${key}.auto`]=!1,updateData[`system.attribs.${key}.value`]=value,"build"===key?updateData[`system.attribs.${key}.current`]=value:updateData[`system.attribs.${key}.max`]=value),updateData}async createEntity(characterData,entityType){const importedCharactersFolder=await CoC7Utilities.createImportCharactersFolderIfNotExists();"npc"!==entityType&&(entityType="creature");const actorData={name:characterData.name,type:entityType,folder:importedCharactersFolder.id,system:characterData.actor},npc=await Actor.create(actorData);await npc.createEmbeddedDocuments("Item",characterData.items,{renderSheet:!1});const updateData={};let value=0;void 0!==characterData.actor.attribs.hp?.value&&this.disableAttribAuto("hp",characterData.actor.attribs.hp.value,npc.hpMax,updateData),void 0!==characterData.actor.attribs.mp?.value&&this.disableAttribAuto("mp",characterData.actor.attribs.mp.value,npc.mpMax,updateData),void 0!==characterData.actor.attribs.mov?.value&&this.disableAttribAuto("mov",characterData.actor.attribs.mov.value,npc.mov,updateData),void 0!==characterData.actor.attribs.build?.value&&this.disableAttribAuto("build",characterData.actor.attribs.build.value,npc.build,updateData),void 0!==characterData.actor.attribs.db?.value&&(value=String(characterData.actor.attribs.db.value).replace(/^\+\s*/,""),value!==String(npc.db)&&(updateData["system.attribs.db.auto"]=!1,updateData["system.attribs.db.value"]=value)),Object.keys(updateData).length>0&&(CONFIG.debug.CoC7Importer&&console.debug("updateData:",updateData),await npc.update(updateData));const updateItemData=[];let lastWeaponSkill=null;for(const pair of this.weaponSkills){!1!==pair[0]&&(lastWeaponSkill=npc.items.filter((i=>i.name===pair[0].name&&"skill"===i.type&&Number(i.system.value)===Number(pair[0].system.value))));const weapon=npc.items.filter((i=>i.name===pair[1].name&&"weapon"===i.type&&i.system.range.normal.damage===pair[1].system.range.normal.damage));lastWeaponSkill[0]&&weapon[0]&&updateItemData.push({_id:weapon[0].id,"system.skill.main.id":lastWeaponSkill[0].id,"system.skill.main.name":lastWeaponSkill[0].name})}return updateItemData.length>0&&(CONFIG.debug.CoC7Importer&&console.debug("updateItemData:",updateItemData),await npc.updateEmbeddedDocuments("Item",updateItemData)),npc}actorData(pc){const system={characteristics:{},attribs:{},infos:{},special:{},description:{keeper:""},flags:{locked:!1,displayFormula:!1}};for(const key of["str","con","siz","dex","app","int","pow","edu"])void 0!==pc[key]&&(system.characteristics[key]={value:Number(pc[key])});for(const key of["san","mov","build","armor","lck","hp","mp"])void 0!==pc[key]&&(system.attribs[key]={value:Number(pc[key])});void 0!==pc.db&&(system.attribs.db={value:pc.db});for(const key of["age","occupation"])void 0!==pc[key]&&(system.infos[key]=pc[key]);if(void 0!==pc.sanLoss){const[passed,failed]=pc.sanLoss.split(/[/／]/);system.special.sanLoss={checkPassed:passed,checkFailled:failed}}return void 0!==pc.attacksPerRound&&(system.special.attacksPerRound=Number(pc.attacksPerRound)),system.description.keeper=pc.gmnotes,CONFIG.debug.CoC7Importer&&console.debug("actorData:",system),system}async itemsData(pc){const items=[];if(this.weaponSkills=[],void 0!==pc.attacks)for(const attack of pc.attacks){let skill=!1;!0!==attack.system?.skill?.id&&(skill=await this.weaponSkill(attack),items.push(skill)),attack.system.skill.id=null,items.push(attack),this.weaponSkills.push([skill,attack])}if(void 0!==pc.skills)for(const skill of pc.skills){const existing=await CoC7Utilities.guessItem("skill",skill.name,{source:this.itemLocations});if(void 0!==existing){const cloned=existing.toObject();cloned.system.base=skill.value,void 0!==skill.push&&(cloned.system.properties.push=skill.push),items.push(foundry.utils.duplicate(cloned))}else{const options={};void 0!==skill.push&&(options.push=skill.push),items.push(CoCActor.emptySkill(skill.name,skill.value,options))}}if(void 0!==pc.languages)for(const skill of pc.languages){const existing=await CoC7Utilities.guessItem("skill",skill.name,{source:this.itemLocations});if(void 0!==existing){const cloned=existing.toObject();cloned.system.base=skill.value,items.push(foundry.utils.duplicate(cloned))}else items.push(CoCActor.emptySkill(skill.name,skill.value,{img:CoC7Item.iconLanguage,specialization:game.i18n.localize("CoC7.LanguageSpecializationName")}))}if(void 0!==pc.spells)for(const name of pc.spells){const existing=await CoC7Utilities.guessItem("spell",name,{source:this.itemLocations});if(void 0!==existing){const cloned=existing.toObject();items.push(foundry.utils.duplicate(cloned))}else items.push(CoCActor.emptySpell(name))}return items}async weaponSkill(weapon){let skill=null;const localizedFirearm=game.i18n.localize("CoC7.FirearmSpecializationName");if(this.getRegEx(this.keys.handgun).exec(weapon.name)?(skill=await CoC7Utilities.guessItem("skill",localizedFirearm+" ("+game.i18n.localize("CoC7.SkillNameHandgun")+")",{combat:!0,source:this.itemLocations}),CONFIG.debug.CoC7Importer&&console.debug(`${weapon.name} uses Handgun skill: ${skill}`)):this.getRegEx(this.keys.rifle).exec(weapon.name)?(skill=await CoC7Utilities.guessItem("skill",localizedFirearm+" ("+game.i18n.localize("CoC7.SkillNameRifleShotgun")+")",{combat:!0,source:this.itemLocations}),skill||(skill=await CoC7Utilities.guessItem("skill",localizedFirearm+" ("+game.i18n.localize("CoC7.SkillNameRifle")+")",{combat:!0,source:this.itemLocations}),skill||(skill=await CoC7Utilities.guessItem("skill",localizedFirearm+" ("+game.i18n.localize("CoC7.SkillNameShotgun")+")",{combat:!0,source:this.itemLocations}))),CONFIG.debug.CoC7Importer&&console.debug(`${weapon.name} uses Rifle skill: ${skill}`)):this.getRegEx(this.keys.smb).exec(weapon.name)?(skill=await CoC7Utilities.guessItem("skill",localizedFirearm+" ("+game.i18n.localize("CoC7.SkillNameSmb")+")",{combat:!0,source:this.itemLocations}),CONFIG.debug.CoC7Importer&&console.debug(`${weapon.name} uses Submachine Gun skill: ${skill}`)):this.getRegEx(this.keys.machineGun).exec(weapon.name)?(skill=await CoC7Utilities.guessItem("skill",localizedFirearm+" ("+game.i18n.localize("CoC7.SkillnameMachineGun")+")",{combat:!0,source:this.itemLocations}),CONFIG.debug.CoC7Importer&&console.debug(`${weapon.name} uses Machine Gun skill: ${skill}`)):this.getRegEx(this.keys.launched).exec(weapon.name)&&(skill=await CoC7Utilities.guessItem("skill",localizedFirearm+" ("+game.i18n.localize("CoC7.SkillnameLaunch")+")",{combat:!0,source:this.itemLocations}),CONFIG.debug.CoC7Importer&&console.debug(`${weapon.name} uses Launch skill: ${skill}`)),null!=skill){return skill.clone({system:{value:weapon.system?.skill?.id}})}const firearms=weapon.system?.properties?.rngd,parts=CoC7Item.getNamePartsSpec(weapon.name,game.i18n.localize(firearms?"CoC7.FirearmSpecializationName":"CoC7.FightingSpecializationName")),newSkill={type:"skill",name:parts.name,system:{skillName:parts.skillName,specialization:parts.specialization,properties:{special:!0,fighting:!firearms,firearm:firearms,combat:!0},base:weapon.system?.skill?.id,value:weapon.system?.skill?.id}};return CONFIG.debug.CoC7Importer&&console.debug(`Weapon skill not found for ${weapon.name}, creating a new one`,newSkill),newSkill}needsConversion(npc){let needsConversionResult=!0;for(const key of["str","con","siz","dex","app","int","pow","edu"])void 0!==npc[key]&&npc[key]>30&&(needsConversionResult=!1);return CONFIG.debug.CoC7Importer&&console.debug("needsConversion:",needsConversionResult),needsConversionResult}async createActor(inputs){CONFIG.debug.CoC7Importer&&console.debug("createActor:",inputs);const lang=CoC7ActorImporterRegExp.checkLanguage(inputs.lang);this.keys=CoC7ActorImporterRegExp.getKeys(lang),this.regEx=CoC7ActorImporterRegExp.getRegularExpressions(lang),this.itemLocations=inputs.source,CONFIG.debug.CoC7Importer&&console.debug("Regular Expressions:",lang,this.keys,this.regEx);let character=await this.parseCharacter(inputs.text);CONFIG.debug.CoC7Importer&&console.debug("parseCharacter:",character),("coc-guess"===inputs.convertFrom6E&&this.needsConversion(character)||"coc-convert"===inputs.convertFrom6E)&&(character=await this.convert7E(character));const characterData={name:character.name,actor:this.actorData(character),items:await this.itemsData(character)};if(void 0!==inputs.testMode&&!0===inputs.testMode)return characterData;return await this.createEntity(characterData,inputs.entity)}async convert7E(creature){CONFIG.debug.CoC7Importer&&console.debug("Converting npc",creature);for(const key of["str","con","siz","dex","app","int","pow"])void 0!==creature[key]&&(creature[key]*=5);return void 0!==creature.edu&&(creature.edu<=18?creature.edu*=5:creature.edu<=26?creature.edu=creature.edu+90-18:creature.edu=99),void 0!==creature.db&&("-1d4"===creature.db?creature.db=-1:"-1d6"===creature.db&&(creature.db=-2)),CONFIG.debug.CoC7Importer&&console.debug("convert7E: ",creature),creature}}class CoC7DirectoryPicker extends FilePicker{get title(){return game.i18n.localize("CoC7.PickDirectory")}_onSubmit(event){event.preventDefault();const path=event.target.target.value,activeSource=this.activeSource,bucket=event.target.bucket?event.target.bucket.value:null;this.field.value=CoC7DirectoryPicker.format({activeSource,bucket,path}),this.close()}static DefaultDirectory(val){return null===val?"":String(val)}static format(value){return null!==value.bucket?`[${value.activeSource}:${value.bucket}] ${value.path}`:`[${value.activeSource}] ${value.path}`}static parse(raw){const str=raw??"",matches=str.match(/^\[([^:]+)(:(.+))?\]\s*(.+)?$/u);return matches?{activeSource:matches[1],bucket:matches[3]??"",current:matches[4]}:{activeSource:"data",bucket:null,current:str}}static processHtml(html){$(html).find('input[data-dtype="DefaultDirectory"]').each(((i,el)=>{const input=$(el);if(input.prop("readonly",!0),!input.next().length){const picker=new CoC7DirectoryPicker({field:input[0],...CoC7DirectoryPicker.parse(input.val())}),pickerButton=$('<button type="button" class="file-picker" title="'+game.i18n.localize("CoC7.PickDirectory")+'"><i class="fas fa-file-import fa-fw"></i></button>');CoC7DirectoryPicker.createDefaultDirectory(),pickerButton.on("click",(()=>{picker.render(!0)})),input.parent().append(pickerButton)}}))}activateListeners(html){super.activateListeners(html),$(html).find("ol.files-list").remove(),$(html).find("footer div").remove(),$(html).find("footer button").text(game.i18n.localize("CoC7.PickDirectory"))}static async createDefaultDirectory(){const parsed=CoC7DirectoryPicker.parse(game.settings.get("CoC7","dholeUploadDirectory"));try{return await CoC7DirectoryPicker.createDirectory(parsed.activeSource,parsed.current,{bucket:parsed.bucket}),!0}catch(e){if(!e.message.startsWith("EEXIST"))return ui.notifications.error(game.i18n.localize("CoC7.ActorImporterUploadError")),!1}}static async uploadToDefaultDirectory(file,filename){const parsed=CoC7DirectoryPicker.parse(game.settings.get("CoC7","dholeUploadDirectory"));return(await FilePicker.upload(parsed.activeSource,parsed.current,new File([file],filename,{type:"image/png"}),{bucket:parsed.bucket})).path?parsed.current+"/"+filename:(ui.notifications.error(game.i18n.localize("CoC7.FileUploadError")),!1)}}class CoC7DholeHouseActorImporter{static getBackstory(backstoryJSON){const sections=[["description","Description"],["traits","Traits"],["ideology","Ideology"],["injurues","Injuries","injuries"],["people","People"],["phobias","Phobias"],["locations","Locations"],["tomes","Tomes"],["possessions","Possessions"],["encounters","Encounters"]],backstory={block:[],sections:[]};for(const section of sections)null!==backstoryJSON[section[0]]&&(void 0!==section[2]&&""!==section[2]||(section[2]=section[0]),backstory.block.push(`<h3>${section[1]}</h3>\n<div class="${section[2]}">\n${backstoryJSON[section[0]]}\n</div>`),backstory.sections.push({title:section[1],value:backstoryJSON[section[0]]}));return backstory.block="<h2>Backstory</h2>\n"+backstory.block.join("\n",backstory.block),backstory}static async convertDholeHouseCharacterData(dholeHouseData,options){CONFIG.debug.CoC7Importer&&console.log("Source:",dholeHouseData),dholeHouseData=dholeHouseData.Investigator;const backstories=CoC7DholeHouseActorImporter.getBackstory(dholeHouseData.Backstory??{});return{name:dholeHouseData.PersonalDetails.Name,actor:{characteristics:{str:{value:parseInt(dholeHouseData.Characteristics.STR,10)},con:{value:parseInt(dholeHouseData.Characteristics.CON,10)},siz:{value:parseInt(dholeHouseData.Characteristics.SIZ,10)},dex:{value:parseInt(dholeHouseData.Characteristics.DEX,10)},app:{value:parseInt(dholeHouseData.Characteristics.APP,10)},int:{value:parseInt(dholeHouseData.Characteristics.INT,10)},pow:{value:parseInt(dholeHouseData.Characteristics.POW,10)},edu:{value:parseInt(dholeHouseData.Characteristics.EDU,10)}},attribs:{san:{value:parseInt(dholeHouseData.Characteristics.Sanity,10),max:parseInt(dholeHouseData.Characteristics.SanityMax,10),dailyLimit:Math.floor(dholeHouseData.Characteristics.Sanity/5)},hp:{value:parseInt(dholeHouseData.Characteristics.HitPts,10),max:parseInt(dholeHouseData.Characteristics.HitPtsMax,10)},mp:{value:parseInt(dholeHouseData.Characteristics.MagicPts,10),max:parseInt(dholeHouseData.Characteristics.MagicPtsMax,10)},lck:{value:parseInt(dholeHouseData.Characteristics.Luck,10)},mov:{value:parseInt(dholeHouseData.Characteristics.Move,10),max:parseInt(dholeHouseData.Characteristics.Move,10)},db:{value:dholeHouseData.Characteristics.DamageBonus},build:{value:parseInt(dholeHouseData.Characteristics.Build,10)}},infos:{occupation:dholeHouseData.PersonalDetails.Occupation,age:dholeHouseData.PersonalDetails.Age,sex:dholeHouseData.PersonalDetails.Gender,residence:dholeHouseData.PersonalDetails.Residence,birthplace:dholeHouseData.PersonalDetails.Birthplace},backstory:backstories.block,biography:backstories.sections,description:{keeper:game.i18n.localize("CoC7.DholeHouseActorImporterSource")}},skills:await CoC7DholeHouseActorImporter.extractSkills(dholeHouseData.Skills.Skill??[],options),possesions:await CoC7DholeHouseActorImporter.extractPossessions(dholeHouseData.Possessions?.item??[],options)}}static makeSkillName(name,specialization){return"None"===specialization&&(specialization="Any"),"Language (Other)"===name||"Language (Own)"===name?name="Language":"Operate Heavy Machine"===name?name="Operate Heavy Machinery":"Throw"===name&&""===specialization&&(name="Fighting",specialization="Throw"),{skillName:""===specialization?name:specialization,specialization:""===specialization?"":name,name:name+(""===specialization?"":" ("+specialization+")")}}static async extractSkills(dholeHouseskills,options){const skills=[];for(const skill of dholeHouseskills){if("None"===skill.subskill)continue;const parts=CoC7DholeHouseActorImporter.makeSkillName(skill.name,skill.subskill??""),existing=await CoC7Utilities.guessItem("skill",parts.name,{source:options.source,fallbackAny:!0});let cloned=null;void 0!==existing?(cloned=foundry.utils.duplicate(existing.toObject()),cloned.name=parts.name,cloned.system.skillName=parts.skillName,cloned.system.specialization=parts.specialization,cloned.system.properties?.requiresname&&(cloned.system.properties.requiresname=!1),cloned.system.properties?.picknameonly&&(cloned.system.properties.picknameonly=!1)):(cloned=CoCActor.emptySkill(parts.skillName,parseInt(skill.value??0,10),{specialization:""!==parts.specialization&&parts.specialization}),cloned.system.properties=cloned.system.properties??{},"Fighting"===parts.specialization?(cloned.system.properties.fighting=!0,cloned.system.properties.combat=!0,cloned.system.properties.push=!1):"Firearms"===parts.specialization?(cloned.system.properties.firearm=!0,cloned.system.properties.combat=!0,cloned.system.properties.push=!1):"Dodge"===parts.skillName&&(cloned.system.properties.push=!1)),"Any"===cloned.system.skillName&&(cloned.name=cloned.name.replace(" (Any)"," (None)"),cloned.system.skillName="None"),cloned.system.base=parseInt(skill.value??0,10),cloned.system.value=parseInt(skill.value??0,10),cloned.system.flags=cloned.system.flags??{},cloned.system.flags.occupation=!0===skill.occupation||"true"===skill.occupation,skills.push(cloned)}return skills}static findWeaponSkillId(skillName,character){const skills=character.getEmbeddedCollection("Item"),checkName=skillName.replace(/^\((.+)\)$/,"$1");return skills.find((i=>i.system?.skillName===checkName||i.system?.skillName?.indexOf(checkName)>-1))}static async extractPossessions(dholehousePossessions,options){const items=[];Array.isArray(dholehousePossessions)||null==dholehousePossessions||(dholehousePossessions=[dholehousePossessions]);for(const item of dholehousePossessions){const existing=await CoC7Utilities.guessItem("item",item.description,{source:options.source});let cloned=null;cloned=void 0!==existing?foundry.utils.duplicate(existing.toObject()):{name:item.description,type:"item"},items.push(cloned)}return items}static async extractWeapons(dholehouseWeapons,character,options){const weapons=[];Array.isArray(dholehouseWeapons)||(dholehouseWeapons=[dholehouseWeapons]);for(const weapon of dholehouseWeapons){const skill=CoC7DholeHouseActorImporter.findWeaponSkillId(weapon.skillname,character),damage=weapon.damage.replace(/\+DB/i,""),addb=damage!==weapon.damage,existing=await CoC7Utilities.guessItem("weapon",weapon.name,{source:options.source});let cloned=null;void 0!==existing?(cloned=foundry.utils.duplicate(existing.toObject()),cloned.system.skill.main.name=skill?.name??"",cloned.system.skill.main.id=skill?.id??"",cloned.system.range=cloned.system.range??{},cloned.system.range.normal=cloned.system.range.normal??{},cloned.system.range.normal.damage=damage,cloned.system.ammo=weapon.ammo,cloned.system.malfunction=weapon.malf,cloned.system.properties=cloned.system.properties??{},cloned.system.properties.melee=skill?.system.properties?.fighting??!1,cloned.system.properties.rngd=skill?.system.properties?.firearm??!1,cloned.system.properties.addb=addb):cloned={name:weapon.name,type:"weapon",system:{skill:{main:{name:skill?.name??"",id:skill?.id??""}},range:{normal:{damage}},ammo:weapon.ammo,malfunction:weapon.malf,properties:{melee:skill?.system.properties?.fighting??!1,rngd:skill?.system.properties?.firearm??!1,addb}}},weapons.push(cloned)}return weapons}static async savePortrait(base64Portrait,fileName){const base64Response=await fetch("data:image/png;base64,"+base64Portrait),imageBlob=await base64Response.blob();return CoC7DirectoryPicker.uploadToDefaultDirectory(imageBlob,fileName)}static async createNPCFromDholeHouse(dholeHouseCharacterData,options){if(!game.user?.can("FILES_UPLOAD"))return ui.notifications.error(game.i18n.localize("CoC7.ActorImporterUploadError")),!1;const characterData=await CoC7DholeHouseActorImporter.convertDholeHouseCharacterData(dholeHouseCharacterData,options);CONFIG.debug.CoC7Importer&&console.log("Character Data:",characterData);const importedCharactersFolder=await CoC7Utilities.createImportCharactersFolderIfNotExists();if(!CoC7DirectoryPicker.createDefaultDirectory())return!1;const actorData={name:characterData.name,type:"character",folder:importedCharactersFolder.id,data:characterData.actor},npc=await Actor.create(actorData);if(dholeHouseCharacterData.Investigator.PersonalDetails.Portrait?.length>10){const fileName="avatar-"+npc.id+".png",portrait=await CoC7DholeHouseActorImporter.savePortrait(dholeHouseCharacterData.Investigator.PersonalDetails.Portrait,fileName);!1!==portrait&&npc.update({img:portrait})}CONFIG.debug.CoC7Importer&&console.log("Items: ",characterData.items),await npc.createEmbeddedDocuments("Item",characterData.skills,{renderSheet:!1}),await npc.createEmbeddedDocuments("Item",characterData.possesions,{renderSheet:!1});const weapons=await CoC7DholeHouseActorImporter.extractWeapons(dholeHouseCharacterData.Investigator.Weapons?.weapon??[],npc,options);return CONFIG.debug.CoC7Importer&&console.log("Weapons: ",weapons),await npc.createEmbeddedDocuments("Item",weapons,{renderSheet:!1}),npc}}class CoC7ActorImporterDialog extends FormApplication{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","dialog","actor-importer"],title:game.i18n.localize("CoC7.ActorImporter"),template:"systems/CoC7/templates/apps/actor-importer.html",closeOnSubmit:!1,width:600,height:"auto"})}async getData(){const data=await super.getData();return data.importType=data.object.importType,data.convert6E=data.object.convert6E,data.source=data.object.source,data.characterData=data.object.characterData,data.canUpload=game.user?.can("FILES_UPLOAD"),["npc","creature"].includes(data.importType)&&(data.languages=CoC7ActorImporterRegExp.getTranslations(),data.language=CoC7ActorImporterRegExp.checkLanguage(data.object.language),data.placeholder=CoC7ActorImporterRegExp.getExampleText(data.language)),data}activateListeners(html){super.activateListeners(html),html.find("#dholehouse-character-preview").hide(),html.find("#coc-entity-type,#coc-entity-lang").change(this._onChangeSubmit.bind(this)),html.find("#dholehouse-json-file-picker").change(this._onJSONFileSelected.bind(this)),html.find("#coc-pasted-character-data").on("keyup",(function(e){const charactersTooExtended=$(this).val().match(/[\udbc0-\udbfe][\udc00-\udfff]/),prompt=$("#coc-prompt");prompt.data("extended")&&charactersTooExtended?prompt.html(game.i18n.localize("CoC7.TextFieldInvalidCharacters")).addClass("error"):prompt.html(prompt.data("text")).removeClass("error")})).trigger("keyup"),html.find(".submit-button").click(this._onClickSubmit.bind(this)),html.find("form").submit((e=>{e.preventDefault()}))}static getInputs(form){const inputs={};return inputs.entity=form.find("#coc-entity-type").val().trim(),CONFIG.debug.CoC7Importer&&console.debug("entity type:",inputs.entity),form.find("#coc-convert-6E").length>0&&(inputs.convertFrom6E=form.find("#coc-convert-6E").val().trim()),form.find("#coc-entity-lang").length>0&&(inputs.lang=CoC7ActorImporterRegExp.checkLanguage(form.find("#coc-entity-lang").val().trim())),form.find("#source").length>0&&(inputs.source=form.find("#source").val().trim()),form.find("#coc-pasted-character-data").length>0&&(inputs.text=form.find("#coc-pasted-character-data").val().trim()),CONFIG.debug.CoC7Importer&&console.debug("received text","##"+inputs.text+"##"),inputs}_onJSONFileSelected(event){const jsonFileInput=document.getElementById("dholehouse-json-file-picker"),portraitImage=document.getElementById("dholehouse-character-portrait"),characterName=document.getElementById("dholehouse-character-name"),preview=document.getElementById("dholehouse-character-preview"),file=jsonFileInput.files[0],dialog=this,fileReader=new FileReader;fileReader.onload=function(e){try{dialog.characterJSON=JSON.parse(fileReader.result)}catch(e){return $("#coc-prompt").html(game.i18n.localize("CoC7.TextFieldInvalidJSON")).addClass("error"),void event.preventDefault()}const personalDetails=dialog.characterJSON?.Investigator?.PersonalDetails;personalDetails?(characterName.textContent=personalDetails.Name,portraitImage.src="data:image/png;base64,"+personalDetails.Portrait,preview.style.display="block",$(".dialog.actor-importer").height("auto")):ui.notifications.error(game.i18n.localize("CoC7.DholeHouseInvalidActor"))},fileReader.readAsText(file)}_onChangeSubmit(event){this._onSubmit(event)}async _onClickSubmit(event){const id=event.currentTarget.dataset.button;if("no"===id)this.close();else if("getExampleNow"===id){const content=CoC7ActorImporterRegExp.getExampleText(this.object.language);CoC7Utilities.copyToClipboard(content).then((()=>ui.notifications.info(game.i18n.localize("CoC7.Copied"))))}else if("import"===id){const app=$(event.currentTarget).closest("div.dialog.actor-importer");app.hide();const form=$(event.currentTarget).closest("form"),inputs=CoC7ActorImporterDialog.getInputs(form);if("dholehouse"===inputs.entity&&this.characterJSON){const character=await CoC7DholeHouseActorImporter.createNPCFromDholeHouse(this.characterJSON,{source:inputs.source});!1!==character?(CONFIG.debug.CoC7Importer&&console.debug("character:",character),ui.notifications.info(game.i18n.format("CoC7.ActorImported",{actorType:game.i18n.localize("CoC7.Entities.Character"),actorName:character.name})),await character.sheet.render(!0),this.close()):app.show()}else inputs.text&&""!==inputs.text?(CoC7ActorImporterDialog.importActor(inputs),this.close()):app.show()}}async _updateObject(event,formData){this.object.importType=formData["coc-entity-type"],this.object.characterData=formData["coc-pasted-character-data"]?.trim(),void 0!==formData["coc-convert-6E"]&&(this.object.convert6E=formData["coc-convert-6E"]),void 0!==formData["coc-entity-lang"]&&(this.object.language=formData["coc-entity-lang"]),void 0!==formData.source&&(this.object.source=formData.source),this.render(!0)}static async importActor(inputs){"."!==inputs.text[inputs.text.length]&&(inputs.text+=".");const actor=new CoC7ActorImporter,createdActor=await actor.createActor(inputs);CONFIG.debug.CoC7Importer&&console.debug("createdActor:",createdActor),ui.notifications.info(game.i18n.format("CoC7.ActorImported",{actorType:createdActor.type?.toUpperCase(),actorName:createdActor.name})),await createdActor.sheet.render(!0)}static async create(options={}){options.importType=options.importType??"npc",options.language=options.language??CoC7ActorImporterRegExp.checkLanguage(null),options.convert6E=options.language??"coc-guess",options.source=options.source??"iwms",options.characterData=options.characterData??"",new CoC7ActorImporterDialog(options).render(!0)}}Hooks.once("ready",(()=>{game.modules.get("CoC7-Importer-Tests")?.active&&(window.CoC7ActorImporter=CoC7ActorImporter)}));class DropCoCID extends Dialog{static processForm(response,element,resolve){element.find("input").is(":checked")&&game.settings.set("CoC7","dropCoCID",response?"Y":"N"),resolve(response)}static processItem(response,item){return response&&item.flags?.CoC7?.cocidFlag?.id?item.flags.CoC7.cocidFlag.id:foundry.utils.duplicate(item)}static async create(){switch(game.settings.get("CoC7","dropCoCID")){case"":return new Promise((resolve=>{new DropCoCID({title:game.i18n.format("CoC7.Settings.DropCoCID.Name"),content:"<p>"+game.i18n.format("CoC7.Settings.DropCoCID.Dialog")+'</p><p><input type="checkbox" id="rememberthis" style="vertical-align: sub;"><label for="rememberthis">'+game.i18n.format("CoC7.Settings.DropCoCID.Remember")+"</label></p>",classes:["coc7","app","dialog"],buttons:{yes:{icon:'<i class="fas fa-check"></i>',label:game.i18n.localize("Yes"),callback:element=>{DropCoCID.processForm(!0,element,resolve)}},no:{icon:'<i class="fas fa-times"></i>',label:game.i18n.localize("No"),callback:element=>{DropCoCID.processForm(!1,element,resolve)}}}}).render(!0)}));case"Y":return!0;case"N":return!1}}}class CoC7OccupationSheet extends ItemSheet{activateListeners(html){if(super.activateListeners(html),!this.options.editable)return;html.find(".item .item-name h4").click((event=>this._onItemSummary(event,"skills"))),html.find(".item-delete").click((event=>this._onItemDelete(event,"skills"))),html.find(".group-item-delete").click(this._onGroupItemDelete.bind(this)),html.find(".group-control").click(this._onGroupControl.bind(this));new DragDrop({dropSelector:".droppable",callbacks:{drop:this._onDrop.bind(this)}}).bind(html[0])}async _onDrop(event,type="skill",collectionName="skills"){event.preventDefault(),event.stopPropagation();const optionalSkill=event?.currentTarget?.classList?.contains("optional-skills"),ol=event?.currentTarget?.closest("ol"),index=ol?.dataset?.group,dataList=await CoC7Utilities.getDataFromDropEvent(event,"Item");let useCoCID=0;const collection=this.item.system[collectionName]?foundry.utils.duplicate(this.item.system[collectionName]):[],groups=this.item.system.groups?foundry.utils.duplicate(this.item.system.groups):[];for(const item of dataList)if(item&&item.system&&[type].includes(item.type))if(optionalSkill){if(!CoC7Item.isAnySpec(item)){if(collection.find((el=>el.name===item.name)))continue;if(groups[index].skills.find((el=>el.name===item.name)))continue}0===useCoCID&&(useCoCID=await DropCoCID.create()),groups[index].skills=groups[index].skills.concat([DropCoCID.processItem(useCoCID,item)])}else{if(!CoC7Item.isAnySpec(item)){if(collection.find((el=>el.name===item.name)))continue;for(let i=0;i<groups.length;i++){const index=groups[i].skills.findIndex((el=>el.name===item.name));-1!==index&&groups[i].skills.splice(index,1)}}0===useCoCID&&(useCoCID=await DropCoCID.create()),collection.push(DropCoCID.processItem(useCoCID,item))}await this.item.update({"system.groups":groups}),await this.item.update({[`system.${collectionName}`]:collection})}async _onGroupControl(event){event.preventDefault();const a=event.currentTarget;if(a.classList.contains("add-group")){await this._onSubmit(event);const groups=this.item.system.groups;await this.item.update({"system.groups":groups.concat([{options:0,skills:[]}])})}if(a.classList.contains("remove-group")){await this._onSubmit(event);const groups=foundry.utils.duplicate(this.item.system.groups),ol=a.closest(".item-list.group");groups.splice(Number(ol.dataset.group),1),await this.item.update({"system.groups":groups})}}async _onItemSummary(event,collectionName="items"){event.preventDefault();const obj=$(event.currentTarget),li=obj.parents(".item"),group=obj.closest(".group");let item;if(item=group.length?this.item.system.groups[group.data("group")][collectionName].find((s=>s._id===li.data("item-id"))):this.item.system[collectionName].find((s=>s._id===li.data("item-id"))),!item)return;const chatData=await TextEditor.enrichHTML(item.system.description.value,{async:!0,secrets:this.item.editable});if(li.hasClass("expanded")){const summary=li.children(".item-summary");summary.slideUp(200,(()=>summary.remove()))}else{const div=$(`<div class="item-summary">${chatData}</div>`),props=$('<div class="item-properties"></div>');div.append(props),li.append(div.hide()),div.slideDown(200)}li.toggleClass("expanded")}async _onItemDelete(event,collectionName="items"){const item=$(event.currentTarget).closest(".item"),itemId=item.data("item-id"),CoCId=item.data("cocid"),itemIndex=this.item.system[collectionName].findIndex((i=>itemId&&i._id===itemId||CoCId&&i===CoCId));if(itemIndex>-1){const collection=this.item.system[collectionName]?foundry.utils.duplicate(this.item.system[collectionName]):[];collection.splice(itemIndex,1),await this.item.update({[`system.${collectionName}`]:collection})}}async _onGroupItemDelete(event){const item=$(event.currentTarget).closest(".item"),group=Number(item.closest(".item-list.group").data("group")),groups=foundry.utils.duplicate(this.item.system.groups);if(void 0!==groups[group]){const itemId=item.data("item-id"),CoCId=item.data("cocid"),itemIndex=groups[group].skills.findIndex((i=>itemId&&i._id===itemId||CoCId&&i===CoCId));itemIndex>-1&&(groups[group].skills.splice(itemIndex,1),await this.item.update({"system.groups":groups}))}}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheet","occupation"],template:"systems/CoC7/templates/items/occupation.html",width:525,height:480,dragDrop:[{dragSelector:".item"}],scrollY:[".tab.description"],tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-body",initial:"description"}]})}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(){const sheetData=super.getData();sheetData.hasOwner=!0===this.item.isEmbedded,sheetData.data.system.skills=await game.system.api.cocid.expandItemArray({itemList:sheetData.data.system.skills}),sheetData.skillListEmpty=0===sheetData.data.system.skills.length,sheetData.data.system.skills.sort(CoC7Utilities.sortByNameKey);for(let index=0,len=sheetData.data.system.groups.length;index<len;index++)sheetData.data.system.groups[index].skills=await game.system.api.cocid.expandItemArray({itemList:sheetData.data.system.groups[index].skills}),sheetData.data.system.groups[index].isEmpty=0===sheetData.data.system.groups[index].skills.length,sheetData.data.system.groups[index].skills.sort(CoC7Utilities.sortByNameKey);sheetData.occupationPointsString=CoC7OccupationSheet.occupationPointsString(sheetData.data.system.occupationSkillPoints),sheetData.itemProperties=[];for(const[key,value]of Object.entries(sheetData.data.system.type))value&&sheetData.itemProperties.push(COC7.occupationProperties[key]?COC7.occupationProperties[key]:null);return sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData.isKeeper=game.user.isGM,sheetData}static occupationPointsString(occupationSkillPoints){const optionnal=[],mandatory=[];for(const[key,carac]of Object.entries(occupationSkillPoints))if(carac.multiplier){const caracName=game.i18n.localize(`CHARAC.${key.toUpperCase()}`);carac.selected&&carac.optional&&optionnal.push(`${caracName}x${carac.multiplier}`),carac.selected&&!carac.optional&&mandatory.push(`${caracName}x${carac.multiplier}`)}let occupationPointsString="";const orString=` ${game.i18n.localize("CoC7.Or")} `;return mandatory.length&&(occupationPointsString+=mandatory.join(" + ")),optionnal.length&&mandatory.length&&(occupationPointsString+=` + (${optionnal.join(orString)})`),optionnal.length&&!mandatory.length&&(occupationPointsString+=optionnal.join(orString)),occupationPointsString}_updateObject(event,formData){const system=foundry.utils.expandObject(formData)?.system;if(system.groups){formData["system.groups"]=Object.values(system.groups||[]);for(let index=0;index<this.item.system.groups.length;index++)formData[`system.groups.${index}.skills`]=foundry.utils.duplicate(this.item.system.groups[index].skills)}super._updateObject(event,formData)}}class CoC7InvestigatorWizard extends FormApplication{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{id:"investigator-wizard-application",classes:["coc7","dialog","investigator-wizard"],title:game.i18n.localize("CoC7.InvestigatorWizard.Title"),template:"systems/CoC7/templates/apps/investigator-wizard.hbs",width:520,height:600,closeOnSubmit:!1,scrollY:[".scrollsection"],dragDrop:[{dragSelector:".draggable",dropSelector:null}]})}get pageList(){return{PAGE_NONE:-1,PAGE_INTRODUCTION:0,PAGE_CONFIGURATION:1,PAGE_SETUPS:2,PAGE_ARCHETYPES:3,PAGE_CHARACTISTICS:4,PAGE_ATTRIBUTES:5,PAGE_VIEW_ATTRIBUTES:6,PAGE_OCCUPATIONS:7,PAGE_OCCUPATION_SKILLS:8,PAGE_ARCHETYPE_SKILLS:9,PAGE_POINTS_SKILLS:10,PAGE_INVESTIGATOR:11,PAGE_BACKSTORY:12,PAGE_CREATE:13}}get characteristicsMethods(){return{METHOD_DEFAULT:1,METHOD_ROLL:1,METHOD_POINTS:2,METHOD_VALUES:3}}get cocidCreditRating(){return"i.skill.credit-rating"}get cocidLanguageOwn(){return"i.skill.language-own"}get pageOrder(){const pages=this.pageList;let pageOrder=[pages.PAGE_INTRODUCTION];return game.user.isGM&&pageOrder.push(pages.PAGE_CONFIGURATION),""===this.object.defaultSetup&&pageOrder.push(pages.PAGE_SETUPS),game.settings.get("CoC7","pulpRuleArchetype")&&pageOrder.push(pages.PAGE_ARCHETYPES),pageOrder.push(pages.PAGE_CHARACTISTICS),game.settings.get("CoC7","pulpRuleIgnoreAgePenalties")||pageOrder.push(pages.PAGE_ATTRIBUTES),pageOrder=pageOrder.concat([pages.PAGE_VIEW_ATTRIBUTES,pages.PAGE_OCCUPATIONS,pages.PAGE_OCCUPATION_SKILLS]),game.settings.get("CoC7","pulpRuleArchetype")&&pageOrder.push(pages.PAGE_ARCHETYPE_SKILLS),pageOrder=pageOrder.concat([pages.PAGE_POINTS_SKILLS,pages.PAGE_INVESTIGATOR,pages.PAGE_BACKSTORY,pages.PAGE_CREATE]),pageOrder}static async loadCacheItemByCoCID(){return new Promise(((resolve,reject)=>{game.system.api.cocid.fromCoCIDRegexBest({cocidRegExp:/^i\./,type:"i",showLoading:!0}).then((items=>{const list={};for(const item of items)list[item.flags.CoC7.cocidFlag.id]=item;resolve(list)}))}))}async filterCacheItemByCoCID(regexp){return Object.entries(await this.object.cacheCoCID).filter((entry=>entry[0].match(regexp))).map((entry=>entry[1]))}async getCacheItemByCoCID(id){return(await this.object.cacheCoCID)[id]??!1}async expandItemArray(itemList){const items=itemList.filter((it=>"string"!=typeof it)),cocids=itemList.filter((it=>"string"==typeof it));if(cocids.length){const source=await this.object.cacheCoCID,missing=[];for(const cocid of cocids)void 0!==source[cocid]?items.push(source[cocid]):missing.push(cocid);if(missing.length){const era=game.i18n.format(COC7.eras[this.object.defaultEra]??"CoC7.CoCIDFlag.error.unknown-era",{era:this.object.defaultEra});ui.notifications.warn(game.i18n.format("CoC7.CoCIDFlag.error.documents-not-found",{cocids:missing.join(", "),lang:game.i18n.lang,era}))}}return items}getAgeAdjustments(){for(const key in this.object.setupModifiers)this.object.setupModifiers[key]=0;if(!game.settings.get("CoC7","pulpRuleIgnoreAgePenalties")){if(this.object.age>=40){const key=Math.floor(this.object.age/10);this.object.requiresAgeAdjustments={edu:{total:key-2>4?4:key-2,rolled:!1},deduct:{total:key>1?5*Math.pow(2,key-4):0,from:["str","con","dex"],values:{}},reduce:{total:5*(key-3),from:"app"}}}else this.object.age>=20?this.object.requiresAgeAdjustments={edu:{total:1,rolled:!1}}:this.object.age>=15&&(this.object.requiresAgeAdjustments={deduct:{total:5,from:["str","siz"],values:{}},reduce:{total:5,from:"edu"},luck:!0});void 0!==this.object.requiresAgeAdjustments.reduce&&(this.object.setupModifiers[this.object.requiresAgeAdjustments.reduce.from]=-this.object.requiresAgeAdjustments.reduce.total)}}async getData(){const sheetData=await super.getData();let setup,archetype,occupation;sheetData.isKeeper=game.user.isGM,sheetData.pages=this.pageList,sheetData.canNext=!1,sheetData.createButton=!1;let showMonetary=!1;switch(sheetData.object.step){case sheetData.pages.PAGE_INTRODUCTION:sheetData.era=game.i18n.format(COC7.eras[sheetData.object.defaultEra]??"CoC7.CoCIDFlag.error.unknown-era",{era:sheetData.object.defaultEra}),sheetData.canNext=!0;break;case sheetData.pages.PAGE_CONFIGURATION:if(game.user.isGM){sheetData.setups=await this.filterCacheItemByCoCID(/^i\.setup\./),sheetData.occupations=await this.filterCacheItemByCoCID(/^i\.occupation\./),sheetData.archetypes=await this.filterCacheItemByCoCID(/^i\.archetype\./),setup=sheetData.setups.find((s=>s.flags.CoC7.cocidFlag.id===sheetData.object.defaultSetup)),void 0===setup?(sheetData.object.defaultSetup="",sheetData.object.setup=""):sheetData.description=await TextEditor.enrichHTML(setup.system.description.value,{async:!0,secrets:game.user.isGM}),sheetData.ownership={[CONST.DOCUMENT_OWNERSHIP_LEVELS.NONE]:"OWNERSHIP.NONE",[CONST.DOCUMENT_OWNERSHIP_LEVELS.LIMITED]:"OWNERSHIP.LIMITED",[CONST.DOCUMENT_OWNERSHIP_LEVELS.OBSERVER]:"OWNERSHIP.OBSERVER",[CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER]:"OWNERSHIP.OWNER"},sheetData._eras=[];for(const[key,value]of Object.entries(COC7.eras))sheetData._eras.push({id:key,name:game.i18n.localize(value)});sheetData.characteristicsMethods=this.characteristicsMethods,sheetData.characteristicsMethod=sheetData.characteristicsMethods.METHOD_DEFAULT,sheetData.object.enforcePointBuy?sheetData.characteristicsMethod=sheetData.characteristicsMethods.METHOD_POINTS:this.object.quickFireValues.length&&(sheetData.characteristicsMethod=sheetData.characteristicsMethods.METHOD_VALUES),sheetData._eras.sort(CoC7Utilities.sortByNameKey),sheetData.hasArchetypes=game.settings.get("CoC7","pulpRuleArchetype"),sheetData.canNext=!0}break;case sheetData.pages.PAGE_SETUPS:""===sheetData.object.defaultSetup&&(sheetData.setups=await this.filterCacheItemByCoCID(/^i\.setup\./),sheetData.setups.sort(CoC7Utilities.sortByNameKey),""!==sheetData.object.setup&&(setup=sheetData.setups.find((s=>s.flags.CoC7.cocidFlag.id===sheetData.object.setup)),void 0!==setup&&(sheetData.description=await TextEditor.enrichHTML(setup.system.description.value,{async:!0,secrets:game.user.isGM}),sheetData.canNext=!0)));break;case sheetData.pages.PAGE_ARCHETYPES:if(sheetData.archetypes=await this.filterCacheItemByCoCID(/^i\.archetype\./),0===sheetData.archetypes.length)sheetData.canNext=!0;else if(sheetData.archetypes.sort(CoC7Utilities.sortByNameKey),""!==sheetData.object.archetype&&(archetype=sheetData.archetypes.find((s=>s.flags.CoC7.cocidFlag.id===sheetData.object.archetype)),void 0!==archetype)){sheetData.description=await TextEditor.enrichHTML(archetype.system.description.value,{async:!0,secrets:game.user.isGM}),sheetData.bonusPoints=archetype.system.bonusPoints;const coreCharacteristics=[];for(const coreCharacteristic in archetype.system.coreCharacteristics)archetype.system.coreCharacteristics[coreCharacteristic]&&coreCharacteristics.push(coreCharacteristic);0===coreCharacteristics.length?this.object.coreCharacteristic="":1===coreCharacteristics.length&&(this.object.coreCharacteristic=coreCharacteristics[0]),sheetData.coreCharacteristic=coreCharacteristics.map((c=>c.toLocaleUpperCase())).join(" "+game.i18n.localize("CoC7.Or")+" ");const skills=[];archetype.system.skills=await this.expandItemArray(archetype.system.skills);for(const skill of archetype.system.skills)skills.push(skill.name);sheetData.skills=skills.join(", "),sheetData.suggestedOccupations=await TextEditor.enrichHTML(archetype.system.suggestedOccupations,{async:!0,secrets:game.user.isGM}),sheetData.suggestedTraits=await TextEditor.enrichHTML(archetype.system.suggestedTraits,{async:!0,secrets:game.user.isGM}),sheetData.canNext=!0}break;case sheetData.pages.PAGE_CHARACTISTICS:if(sheetData.characteristicsMethods=this.characteristicsMethods,sheetData.characteristicsMethod=sheetData.characteristicsMethods.METHOD_ROLL,""!==sheetData.object.setup&&(setup=await this.getCacheItemByCoCID(this.object.setup),void 0!==setup)){if(setup.system.characteristics.points.enabled||this.object.enforcePointBuy?sheetData.characteristicsMethod=sheetData.characteristicsMethods.METHOD_POINTS:this.object.quickFireValues.length&&(sheetData.characteristicsMethod=sheetData.characteristicsMethods.METHOD_VALUES),sheetData.setup={total:0,points:setup.system.characteristics.points.value,characteristics:[{key:"str",roll:setup.system.characteristics.rolls.str,label:"CHARAC.Strength"},{key:"con",roll:setup.system.characteristics.rolls.con,label:"CHARAC.Constitution"},{key:"siz",roll:setup.system.characteristics.rolls.siz,label:"CHARAC.Size"},{key:"dex",roll:setup.system.characteristics.rolls.dex,label:"CHARAC.Dexterity"},{key:"app",roll:setup.system.characteristics.rolls.app,label:"CHARAC.Appearance"},{key:"int",roll:setup.system.characteristics.rolls.int,label:"CHARAC.Intelligence"},{key:"pow",roll:setup.system.characteristics.rolls.pow,label:"CHARAC.Power"},{key:"edu",roll:setup.system.characteristics.rolls.edu,label:"CHARAC.Education"}],luck:{roll:setup.system.characteristics.rolls.luck,label:"CoC7.Luck"}},sheetData.coreCharacteristics=[],""!==sheetData.object.archetype&&(archetype=await this.getCacheItemByCoCID(this.object.archetype),void 0!==archetype)){for(const coreCharacteristic in archetype.system.coreCharacteristics)archetype.system.coreCharacteristics[coreCharacteristic]&&sheetData.coreCharacteristics.push({key:coreCharacteristic,name:game.i18n.format(sheetData.setup.characteristics.find((c=>c.key===coreCharacteristic))?.label??"Unknown")});sheetData.coreCharacteristics.sort(CoC7Utilities.sortByNameKey),""!==this.object.coreCharacteristic&&archetype.system.coreCharacteristicsFormula.enabled&&(sheetData.setup.characteristics.find((c=>c.key===this.object.coreCharacteristic)).roll=archetype.system.coreCharacteristicsFormula.value)}let empties=!1;for(const key in sheetData.object.setupPoints)""!==sheetData.object.setupPoints[key]?"luck"!==key&&(sheetData.setup.total+=parseInt(sheetData.object.setupPoints[key],10)):empties=!0;this.object.coreCharacteristic&&(sheetData.coreCharacteristic=this.object.coreCharacteristic.toLocaleUpperCase()),!empties&&this.object.age>=15&&([sheetData.characteristicsMethods.METHOD_ROLL,sheetData.characteristicsMethods.METHOD_VALUES].includes(sheetData.characteristicsMethod)||sheetData.setup.total.toString()===sheetData.setup.points.toString())&&(sheetData.canNext=!0)}break;case sheetData.pages.PAGE_ATTRIBUTES:sheetData.pulpRuleIgnoreAgePenalties=game.settings.get("CoC7","pulpRuleIgnoreAgePenalties"),sheetData.canNext=!0,sheetData.points={};for(const key in this.object.setupModifiers)sheetData.points[key]={value:parseInt(this.object.setupPoints[key],10)+parseInt(this.object.setupModifiers[key],10),min:1-parseInt(this.object.setupPoints[key],10),label:CoC7Utilities.getCharacteristicNames(key).label};if(void 0===this.object.requiresAgeAdjustments.edu||this.object.requiresAgeAdjustments.edu.rolled||(sheetData.canNext=!1),void 0!==this.object.requiresAgeAdjustments.deduct){sheetData.deductTotal=0;for(const key of this.object.requiresAgeAdjustments.deduct.from)sheetData.deductTotal=sheetData.deductTotal-parseInt(this.object.setupModifiers[key],10);sheetData.deductFrom=this.object.requiresAgeAdjustments.deduct.from.map((n=>game.i18n.localize("CHARAC."+n.toUpperCase()))).join(", ").replace(/(, )([^,]+)$/,"$1"+game.i18n.localize("CoC7.Or")+" $2").replace(/^([^,]+),([^,]+)$/,"$1$2"),sheetData.deductTotal!==this.object.requiresAgeAdjustments.deduct.total&&(sheetData.canNext=!1)}void 0!==this.object.requiresAgeAdjustments.reduce&&(sheetData.reduceFrom=game.i18n.localize("CHARAC."+this.object.requiresAgeAdjustments.reduce.from.toUpperCase())),void 0!==this.object.requiresAgeAdjustments.luck&&(sheetData.luckValue=Math.max(this.object.setupPoints.luck,this.object.setupModifiers.luck),0===this.object.setupModifiers.luck&&(sheetData.canNext=!1));break;case sheetData.pages.PAGE_VIEW_ATTRIBUTES:sheetData.points={};for(const key in this.object.setupModifiers)sheetData.points[key]={value:parseInt(this.object.setupPoints[key],10)+parseInt(this.object.setupModifiers[key],10),prefix:"",suffix:"%",label:CoC7Utilities.getCharacteristicNames(key).label};sheetData.points.db={value:CoCActor.dbFromCharacteristics(sheetData.points),prefix:"",suffix:"",label:"CoC7.BonusDamage"},(isNaN(sheetData.points.db.value)||Number(sheetData.points.db.value)>=0)&&(sheetData.points.db.prefix="+"),sheetData.points.build={value:CoCActor.buildFromCharacteristics(sheetData.points),prefix:"",suffix:"",label:"CoC7.Build"},Number(sheetData.points.build.value)>=0&&(sheetData.points.build.prefix="+"),sheetData.points.hp={value:CoCActor.hpFromCharacteristics(sheetData.points,"character"),prefix:"",suffix:"",label:"CoC7.HitPoints"},sheetData.points.hp.prefix=sheetData.points.hp.value+"/",sheetData.points.mp={value:CoCActor.mpFromCharacteristics(sheetData.points),prefix:"",suffix:"",label:"CoC7.MagicPoints"},sheetData.points.mp.prefix=sheetData.points.mp.value+"/",sheetData.points.san={value:sheetData.points.pow.value,prefix:"",suffix:"/99",label:"CoC7.Sanity"},sheetData.points.mov={value:CoCActor.movFromCharacteristics(sheetData.points,"character",this.object.age),prefix:"",suffix:"",label:"CoC7.Movement"},sheetData.canNext=!0;break;case sheetData.pages.PAGE_OCCUPATIONS:if(sheetData.occupations=await this.filterCacheItemByCoCID(/^i\.occupation\./),sheetData.occupations.sort(CoC7Utilities.sortByNameKey),""!==sheetData.object.occupation&&(occupation=sheetData.occupations.find((s=>s.flags.CoC7.cocidFlag.id===sheetData.object.occupation)),void 0!==occupation)){sheetData.description=await TextEditor.enrichHTML(occupation.system.description.value,{async:!0,secrets:game.user.isGM}),sheetData.occupationPointsString=CoC7OccupationSheet.occupationPointsString(occupation.system.occupationSkillPoints),sheetData.creditRating=occupation.system.creditRating,sheetData.personal=occupation.system.personal,sheetData.personalText=occupation.system.personalText,sheetData.skills=await this.expandItemArray(occupation.system.skills),sheetData.groups={};for(let index=0;index<occupation.system.groups.length;index++)sheetData.groups[index]={options:occupation.system.groups[index].options,skills:[]},sheetData.groups[index].skills=await this.expandItemArray(occupation.system.groups[index].skills);sheetData.points=0;const options=[];for(const[key,carac]of Object.entries(occupation.system.occupationSkillPoints))carac.selected&&(carac.optional?options.push(carac.multiplier*(parseInt(this.object.setupPoints[key],10)+parseInt(this.object.setupModifiers[key],10))):sheetData.points+=carac.multiplier*(parseInt(this.object.setupPoints[key],10)+parseInt(this.object.setupModifiers[key],10)));options.length>0&&(sheetData.points+=Math.max(...options)),sheetData.canNext=!0}break;case sheetData.pages.PAGE_INVESTIGATOR:sheetData.language=void 0!==this.object.skillItems[this.cocidLanguageOwn],sheetData.language?sheetData.languageName=this.object.skillItems[this.cocidLanguageOwn].item.name:sheetData.languageName="",sheetData.canNext=!0;break;case sheetData.pages.PAGE_OCCUPATION_SKILLS:sheetData.default=0,sheetData.selected=0,sheetData.skillItems=[];for(const key in this.object.skillItems){let group="other";const rows=sheetData.object.skillItems[key].rows.length,isMultiple=sheetData.object.skillItems[key].flags.isMultiple;isMultiple&&sheetData.skillItems.push({key,index:-1,name:sheetData.object.skillItems[key].item.name,group,toggle:!1,isCreditRating:!1,isMultiple:!0,isPickable:!1});for(let index=0;index<rows;index++){let isPickable=!1;sheetData.object.skillItems[key].rows[index].isOccupationDefault?(group="default",isMultiple&&(isPickable=!0),sheetData.default++):!1!==sheetData.object.skillItems[key].rows[index].inOccupationGroup?(group=sheetData.object.skillItems[key].rows[index].inOccupationGroup,isMultiple&&(isPickable=!0)):group="other";let toggle=sheetData.object.skillItems[key].rows[index].occupationToggle;isPickable&&(toggle=!1);let specialization=sheetData.object.skillItems[key].item.system.specialization,skillName=sheetData.object.skillItems[key].item.system.skillName,picked=!1,deleteable=!1;"string"==typeof sheetData.object.skillItems[key].rows[index].selected?(picked=!0,skillName=sheetData.object.skillItems[key].rows[index].selected):!1!==sheetData.object.skillItems[key].rows[index].selected&&(picked=!0,specialization=sheetData.object.skillItems[key].rows[index].selected.system.specialization,skillName=sheetData.object.skillItems[key].rows[index].selected.system.skillName),(toggle||isPickable&&picked)&&sheetData.selected++;let name=sheetData.object.skillItems[key].item.name;(key===this.cocidLanguageOwn||!isPickable&&picked)&&(name=specialization+" ("+skillName+")"),!isPickable&&picked&&(deleteable=!sheetData.object.skillItems[key].rows[index].archetypeToggle),sheetData.skillItems.push({key,index,name,group:group.toString(),toggle,isCreditRating:sheetData.object.skillItems[key].rows[index].isCreditRating,isMultiple:!1,isPickable,picked,deleteable,specialization,skillName})}}sheetData.max=(parseInt(sheetData.default,10)||0)+(parseInt(sheetData.object.personal,10)||0)+Object.values(sheetData.object.occupationGroups).reduce(((s,v)=>s+(parseInt(v,10)||0)),0),sheetData.skillItems.sort(CoC7Utilities.sortByNameKey),sheetData.selected===sheetData.max&&(sheetData.canNext=!0);break;case sheetData.pages.PAGE_ARCHETYPE_SKILLS:sheetData.max=0,sheetData.selected=0,sheetData.skillItems=[];for(const key in this.object.skillItems){let group="other";const rows=sheetData.object.skillItems[key].rows.length,isMultiple=sheetData.object.skillItems[key].flags.isMultiple;isMultiple&&sheetData.skillItems.push({key,index:-1,name:sheetData.object.skillItems[key].item.name,group,toggle:!1,isCreditRating:!1,isMultiple:!0,isPickable:!1});for(let index=0;index<rows;index++){let isPickable=!1;sheetData.object.skillItems[key].rows[index].isArchetypeDefault?(group="default",isMultiple&&(isPickable=!0),sheetData.max++):group="other";let toggle=sheetData.object.skillItems[key].rows[index].archetypeToggle;isPickable&&(toggle=!1);let specialization=sheetData.object.skillItems[key].item.system.specialization,skillName=sheetData.object.skillItems[key].item.system.skillName,picked=!1,deleteable=!1;"string"==typeof sheetData.object.skillItems[key].rows[index].selected?(picked=!0,skillName=sheetData.object.skillItems[key].rows[index].selected):!1!==sheetData.object.skillItems[key].rows[index].selected&&(picked=!0,specialization=sheetData.object.skillItems[key].rows[index].selected.system.specialization,skillName=sheetData.object.skillItems[key].rows[index].selected.system.skillName),(toggle||isPickable&&picked)&&sheetData.selected++;let name=sheetData.object.skillItems[key].item.name;(key===this.cocidLanguageOwn||!isPickable&&picked)&&(name=specialization+" ("+skillName+")"),!isPickable&&picked&&(deleteable=!sheetData.object.skillItems[key].rows[index].occupationToggle),sheetData.skillItems.push({key,index,name,group:group.toString(),toggle,isCreditRating:!1,isMultiple:!1,isPickable,picked,deleteable,specialization,skillName})}}sheetData.skillItems.sort(CoC7Utilities.sortByNameKey),sheetData.selected===sheetData.max&&(sheetData.canNext=!0);break;case sheetData.pages.PAGE_POINTS_SKILLS:if(sheetData.skills=[],sheetData.creditRatingOkay=!(this.object.creditRating.max>0),sheetData.personal={count:0,total:2*(parseInt(this.object.setupPoints.int,10)+parseInt(this.object.setupModifiers.int,10)),remaining:0},sheetData.occupation={count:0,total:0,remaining:0},sheetData.archetype={count:0,total:0,remaining:0},""!==sheetData.object.setup&&(showMonetary=(await this.getCacheItemByCoCID(sheetData.object.setup)).system.monetary.values.length>0),""!==sheetData.object.occupation&&(occupation=await this.getCacheItemByCoCID(this.object.occupation),occupation)){const options=[];for(const[key,carac]of Object.entries(occupation.system.occupationSkillPoints))carac.selected&&(carac.optional?options.push(carac.multiplier*(parseInt(this.object.setupPoints[key],10)+parseInt(this.object.setupModifiers[key],10))):sheetData.occupation.total+=carac.multiplier*(parseInt(this.object.setupPoints[key],10)+parseInt(this.object.setupModifiers[key],10)));options.length>0&&(sheetData.occupation.total+=Math.max(...options))}if(""!==this.object.archetype){const archetype=await game.system.api.cocid.fromCoCID(this.object.archetype);1===archetype.length&&(sheetData.archetype.total=archetype[0].system.bonusPoints)}if(Object.keys(this.object.skillItems).length>0){for(const key in this.object.skillItems){const skill=this.object.skillItems[key];for(let index=0,im=skill.rows.length;index<im;index++){const row=skill.rows[index];if(!skill.flags.isMultiple||!1!==row.selected){let item=foundry.utils.duplicate(skill.item);!1!==row.selected&&"string"!=typeof row.selected&&(item=foundry.utils.duplicate(row.selected));let base=item.system.base;if(!Number.isNumeric(base))for(const key in this.object.setupPoints){const regEx=new RegExp("@"+key,"i");base=base.replace(regEx,parseInt(this.object.setupPoints[key],10)+parseInt(this.object.setupModifiers[key],10))}Number.isNumeric(base)||(base=Math.floor(new AverageRoll("("+base+")")[foundry.utils.isNewerVersion(game.version,"12")?"evaluateSync":"evaluate"]({minimize:!0,maximize:!0}).total));let totalPoints=parseInt(base,10);if(Number(row.personalPoints)>0){const num=Number(row.personalPoints);sheetData.personal.count+=num,totalPoints+=num}if(Number(row.occupationPoints)>0){const num=Number(row.occupationPoints);sheetData.occupation.count+=num,totalPoints+=num}if(Number(row.archetypePoints)>0){const num=Number(row.archetypePoints);sheetData.archetype.count+=num,totalPoints+=num}if(Number(row.experiencePoints)>0){totalPoints+=Number(row.experiencePoints)}let name=item.name;key===this.cocidLanguageOwn?name=item.system.specialization+" ("+item.system.skillName+")":skill.flags.isCreditRating?(name=name+" ["+this.object.creditRating.min+" - "+this.object.creditRating.max+"]",totalPoints>=this.object.creditRating.min&&totalPoints<=this.object.creditRating.max&&(sheetData.creditRatingOkay=!0)):"string"==typeof row.selected&&(name=item.system.specialization+" ("+row.selected+")"),sheetData.skills.push({key,index,name,isOccupation:row.occupationToggle,isArchetype:row.archetypeToggle,base,personalPoints:row.personalPoints,occupationPoints:row.occupationPoints,archetypePoints:row.archetypePoints,experiencePoints:row.experiencePoints,totalPoints,showCreditRating:showMonetary&&key===this.cocidCreditRating})}}}sheetData.skills.sort(CoC7Utilities.sortByNameKey),sheetData.creditRatingOkay&&(sheetData.canNext=!0)}sheetData.personal.remaining=sheetData.personal.total-sheetData.personal.count,sheetData.occupation.remaining=sheetData.occupation.total-sheetData.occupation.count,sheetData.archetype.remaining=sheetData.archetype.total-sheetData.archetype.count;break;case sheetData.pages.PAGE_BACKSTORY:{const allBackstories=await this.object.cacheBackstories;sheetData.backstories={};for(let index=0;index<this.object.bioSections.length;index++)sheetData.backstories[index]={index,name:this.object.bioSections[index].name,rolls:game.system.api.cocid.findCocIdInList(this.object.bioSections[index].key,allBackstories).length?this.object.bioSections[index].key:"",value:this.object.bioSections[index].value}}sheetData.canNext=!0,sheetData.createButton=game.user.role>=CONST.USER_PERMISSIONS.ACTOR_CREATE.defaultRole;break;case sheetData.pages.PAGE_CREATE:sheetData.canNext=!0,sheetData.createButton=!0}return sheetData}activateListeners(html){super.activateListeners(html),html.keypress((e=>/textarea/i.test((e.target||e.srcElement).tagName)||13!==(e.keyCode||e.which||e.charCode||0))),html.find(".submit_on_change").change(this._onChangeSubmit.bind(this)),html.find(".roll-characteristic").click(this._onRollCharacteristic.bind(this)),html.find(".increase-10-characteristic").click(this._onIncreaseCharacteristic10.bind(this)),html.find(".increase-characteristic").click(this._onIncreaseCharacteristic.bind(this)),html.find(".decrease-characteristic").click(this._onDecreaseCharacteristic.bind(this)),html.find(".decrease-10-characteristic").click(this._onDecreaseCharacteristic10.bind(this)),html.find("button.roll_all").click(this._onRollAll.bind(this)),html.find("button.roll_edu").click(this._onRollEdu.bind(this)),html.find("button.roll_luck").click(this._onRollLuck.bind(this)),html.find(".item input.submit_on_blur").blur(this._onChangeSubmit.bind(this)),html.find(".item input.save-characteristic-on-blur").blur(this._onChangeSaveCharacteristic.bind(this)),html.find(".item.toggleable").click(this._onToggleSkill.bind(this)),html.find(".item.clickable").click(this._onClickPickSkill.bind(this)),html.find(".skills-list input").click(this._onClickSkillSpecial.bind(this)),html.find(".skills-list .remove-skill").click(this._onClickRemoveSkill.bind(this)),html.find(".item input.skill-adjustment").blur(this._onChangeSkillPoints.bind(this)),html.find("textarea.backstory-text").keyup(this._onChangeBackstoryText.bind(this)),html.find("button.backstory-roll").click(this._onRollBackstory.bind(this)),html.find("button.backstory-reset").click(this._onResetBackstory.bind(this))}async rollMessage(rolls){if(rolls.length){const html=[];for(const roll of rolls)html.push(await renderTemplate(Roll.CHAT_TEMPLATE,{formula:(CoC7Utilities.getCharacteristicNames(roll[0])?.label??roll[0])+": "+roll[1],tooltip:await roll[2].getTooltip(),total:roll[2].total}));ChatMessage.create({user:game.user.id,speaker:{alias:game.user.name},content:html.join("<div>&nbsp;</div>"),whisper:ChatMessage.getWhisperRecipients("GM")})}}addItemToList(item,{isOccupationDefault=!1,inOccupationGroup=!1,occupationToggle=!1,isArchetypeDefault=!1,archetypeToggle=!1,isCreditRating=!1}={}){const key=item.flags.CoC7?.cocidFlag?.id??item.name;if("skill"!==item.type)return void this.object.investigatorItems.push(item);const isMultiple=!(!item.system.properties.special||!(item.system.properties.requiresname&&!item.system.properties.onlyone||item.system.properties.picknameonly||item.name===game.i18n.format("CoC7.AnySpecName"))),flags={isOccupationDefault,inOccupationGroup,isArchetypeDefault,isCreditRating,occupationToggle,archetypeToggle},rows={occupationPoints:"",archetypePoints:"",experiencePoints:"",personalPoints:"",selected:!1};if(void 0===this.object.skillItems[key])this.object.skillItems[key]={item,flags:foundry.utils.mergeObject(flags,{isMultiple},{inplace:!1}),rows:[]},isMultiple&&!1===isOccupationDefault&&!1===inOccupationGroup&&!1===isArchetypeDefault||this.object.skillItems[key].rows.push(foundry.utils.mergeObject(flags,rows,{inplace:!1}));else{if(isMultiple)this.object.skillItems[key].rows.push(foundry.utils.mergeObject(flags,rows,{inplace:!1}));else for(const flag in flags)this.object.skillItems[key].rows[0][flag]=this.object.skillItems[key].rows[0][flag]||flags[flag];for(const flag in flags)this.object.skillItems[key].flags[flag]=this.object.skillItems[key].flags[flag]||flags[flag]}!isMultiple&&flags.isCreditRating&&(this.object.skillItems[key].rows[0].occupationPoints=this.object.creditRating.min)}clearSetupPoints(){for(const key in this.object.setupPoints)this.object.setupPoints[key]=""}async setSkillLists(){this.object.skillItems={},this.object.occupationGroups={},this.object.investigatorItems=[],this.object.placeable=foundry.utils.duplicate(this.object.quickFireValues);const setup=await this.getCacheItemByCoCID(this.object.setup),occupation=await this.getCacheItemByCoCID(this.object.occupation);let archetype=!1;if(""!==this.object.archetype&&(archetype=await this.getCacheItemByCoCID(this.object.archetype)),setup&&occupation&&(!game.settings.get("CoC7","pulpRuleArchetype")||archetype)){this.object.bioSections=[];for(let index=0;index<setup.system.bioSections.length;index++)this.object.bioSections.push({name:setup.system.bioSections[index],value:"",key:"rt..backstory-"+CoC7Utilities.toKebabCase(setup.system.bioSections[index])});this.object.personal=occupation.system.personal,this.object.personalText=occupation.system.personalText,this.object.creditRating=occupation.system.creditRating;let items=[];items=await this.expandItemArray(setup.system.items);for(let index=0,im=items.length;index<im;index++)this.addItemToList(items[index]);items=await this.expandItemArray(occupation.system.skills);for(let index=0,im=items.length;index<im;index++)this.addItemToList(items[index],{isOccupationDefault:!0,occupationToggle:!0});for(let group=0,gm=occupation.system.groups.length;group<gm;group++){this.object.occupationGroups[group]=occupation.system.groups[group].options,items=await this.expandItemArray(occupation.system.groups[group].skills);for(let index=0,im=items.length;index<im;index++)this.addItemToList(items[index],{inOccupationGroup:group})}if(archetype){items=await this.expandItemArray(archetype.system.skills);for(let index=0,im=items.length;index<im;index++)this.addItemToList(items[index],{isArchetypeDefault:!0,archetypeToggle:!0})}if(Number(this.object.creditRating.max)>0){const nameCreditRating=game.i18n.format("CoC7.CoCIDFlag.keys."+this.cocidCreditRating),flags={isOccupationDefault:!0,occupationToggle:!0,isCreditRating:!0};if(void 0!==this.object.skillItems[this.cocidCreditRating])this.addItemToList(this.object.skillItems[this.cocidCreditRating].item,flags);else if(void 0!==this.object.skillItems[nameCreditRating])this.addItemToList(this.object.skillItems[nameCreditRating].item,flags);else{const skill=await game.system.api.cocid.fromCoCID(this.cocidCreditRating);skill.length&&this.addItemToList(skill[0],flags)}}}}_onDragStart(event){if(event.currentTarget.dataset.characteristicKey){const dragData={type:"investigatorCharacteristic",key:event.currentTarget.dataset.characteristicKey,value:event.currentTarget.dataset.value};event.dataTransfer.setData("text/plain",JSON.stringify(dragData))}}_canDragStart(selector){return!0}_canDragDrop(selector){return!0}async _onDrop(event){try{const dataList=JSON.parse(event.dataTransfer.getData("text/plain"));if(void 0!==dataList.type&&"investigatorCharacteristic"===dataList.type){if(dataList.destination=event.target.closest("li").dataset.characteristicKey,dataList.okay=!1,"-"===dataList.key&&void 0!==this.object.setupPoints[dataList.destination]){const index=this.object.placeable.indexOf(parseInt(dataList.value,10));-1!==index&&this.object.placeable.splice(index,1),""!==this.object.setupPoints[dataList.destination]&&this.object.placeable.push(parseInt(this.object.setupPoints[dataList.destination],10)),this.object.setupPoints[dataList.destination]=parseInt(dataList.value,10),this.object.placeable.sort().reverse(),dataList.okay=!0}else if(void 0!==this.object.setupPoints[dataList.key]&&"-"===dataList.destination)""!==this.object.setupPoints[dataList.key]&&(this.object.placeable.push(parseInt(this.object.setupPoints[dataList.key],10)),this.object.setupPoints[dataList.key]="",this.object.placeable.sort().reverse(),dataList.okay=!0);else if(void 0!==this.object.setupPoints[dataList.key]&&void 0!==this.object.setupPoints[dataList.destination]){const temp=""===this.object.setupPoints[dataList.key]?"":parseInt(this.object.setupPoints[dataList.key],10);this.object.setupPoints[dataList.key]=""===this.object.setupPoints[dataList.destination]?"":parseInt(this.object.setupPoints[dataList.destination],10),this.object.setupPoints[dataList.destination]=temp,dataList.okay=!0}if(dataList.okay)return void this.render(!0)}}catch(err){}const dataList=await CoC7Utilities.getDataFromDropEvent(event,"Item");if([this.pageList.PAGE_ARCHETYPE_SKILLS,this.pageList.PAGE_OCCUPATION_SKILLS].includes(this.object.step))for(const item of dataList)"skill"===item.type&&(this.addItemToList(item),this.render(!0))}_onClickSkillSpecial(event){event.stopPropagation()}_onClickRemoveSkill(event){event.stopPropagation();const key=event.currentTarget?.parentNode?.dataset?.key,index=event.currentTarget?.parentNode?.dataset?.index;void 0!==this.object.skillItems[key]?.rows[index]&&(this.object.skillItems[key].rows.splice(index,index),this.render(!0))}async _onToggleSkill(event){const key=event.currentTarget?.dataset?.key,index=event.currentTarget?.dataset?.index,toggleKey=event.currentTarget?.dataset?.toggleKey;void 0!==this.object.skillItems[key]?.rows[index]&&(this.object.skillItems[key].rows[index][toggleKey]=!this.object.skillItems[key].rows[index][toggleKey],this.render(!0))}async _onClickPickSkill(event){const key=event.currentTarget?.dataset?.key,index=event.currentTarget?.dataset?.index,toggleKey=event.currentTarget?.dataset?.toggleKey;if(void 0!==this.object.skillItems[key]){index>-1&&(this.object.skillItems[key].rows[index][toggleKey]=!1,this.object.skillItems[key].rows[index].selected=!1,this.render(!0));let skillList=[];const group=game.system.api.cocid.guessGroupFromKey(key);group&&(skillList=(await game.system.api.cocid.fromCoCIDRegexBest({cocidRegExp:new RegExp("^"+CoC7Utilities.quoteRegExp(group)+".+$"),type:"i"})).filter((item=>!(item.system.properties?.special&&(item.system.properties?.requiresname||item.system.properties?.picknameonly)))),skillList.length>1&&skillList.sort(CoC7Utilities.sortByNameKey));const skillData=await SkillSpecializationSelectDialog.create({skills:skillList,allowCustom:this.object.skillItems[key].item.system.properties?.requiresname??!1,fixedBaseValue:!0,specializationName:this.object.skillItems[key].item.system.specialization,label:this.object.skillItems[key].item.name});if(index>-1)""!==skillData.selected?(this.object.skillItems[key].rows[index].selected=skillList.find((i=>i.id===skillData.selected)),this.object.skillItems[key].rows[index][toggleKey]=!0):""!==skillData.name&&(this.object.skillItems[key].rows[index].selected=skillData.name,this.object.skillItems[key].rows[index][toggleKey]=!0);else{let selected=!1;""!==skillData.selected?selected=skillList.find((i=>i.id===skillData.selected)):""!==skillData.name&&(selected=skillData.name),this.object.skillItems[key].rows.push({isOccupationDefault:!1,inOccupationGroup:!1,isArchetypeDefault:!1,isCreditRating:!1,occupationToggle:"occupationToggle"===toggleKey,archetypeToggle:"archetypeToggle"===toggleKey,occupationPoints:"",archetypePoints:"",experiencePoints:"",personalPoints:"",selected})}this.render(!0)}}async _onChangeSkillPoints(event){const input=$(event.currentTarget),adjustment=input.data("adjustment"),li=input.closest("li"),key=li.data("key"),index=li.data("index");void 0!==this.object.skillItems[key]?.rows[index][adjustment]&&(this.object.skillItems[key].rows[index][adjustment]=input.val()),this.render(!0)}async _onChangeBackstoryText(event){const textarea=$(event.currentTarget),index=textarea.data("index");void 0!==this.object.bioSections[index]&&(this.object.bioSections[index].value=textarea.val())}async _onRollBackstory(event){const button=$(event.currentTarget),index=button.data("index"),key=button.data("key");if(void 0!==this.object.bioSections[index]){const rolltable=await game.system.api.cocid.fromCoCID(key);if(1===rolltable.length){const tableResult=await rolltable[0].roll();tableResult.results[0].type===CONST.TABLE_RESULT_TYPES.TEXT&&(this.object.bioSections[index].value=(this.object.bioSections[index].value+"\n"+tableResult.results[0].text.trim()).trim())}}this.render(!0)}async _onResetBackstory(event){const index=$(event.currentTarget).data("index");void 0!==this.object.bioSections[index]&&(this.object.bioSections[index].value=""),this.render(!0)}async _onRollLuck(event){const setup=await this.getCacheItemByCoCID(this.object.setup);if(setup){const die=await new Roll(setup.system.characteristics.rolls.luck.toString()).evaluate({async:!0});this.object.setupModifiers.luck=[die.total];const html=await renderTemplate(Roll.CHAT_TEMPLATE,{formula:game.i18n.localize("CoC7.InvestigatorWizard.RollTwiceForLuck")+": "+setup.system.characteristics.rolls.luck.toString(),tooltip:await die.getTooltip(),total:die.total});ChatMessage.create({user:game.user.id,speaker:{alias:game.user.name},content:html,whisper:ChatMessage.getWhisperRecipients("GM")}),this.render(!0)}}async _onRollEdu(event){if(event.preventDefault(),void 0!==this.object.requiresAgeAdjustments.edu&&!this.object.requiresAgeAdjustments.edu.rolled&&this.object.requiresAgeAdjustments.edu.total){let value=parseInt(this.object.setupPoints.edu,10);const message=[];for(let rolls=this.object.requiresAgeAdjustments.edu.total;rolls>0;rolls--){const die=await new Roll("1d100").evaluate({async:!0});if(die.total>value){const augmentDie=await new Roll("1d10").evaluate({async:!0});message.push(`<span class="upgrade-success">${game.i18n.format("CoC7.DevSuccess",{item:game.i18n.localize("CHARAC.Education"),die:die.total,score:value,augment:augmentDie.total})}</span><br>`),value+=parseInt(augmentDie.total,10)}else message.push(`<span class="upgrade-failed">${game.i18n.format("CoC7.DevFailure",{item:game.i18n.localize("CHARAC.Education"),die:die.total,score:value})}</span><br>`)}ChatMessage.create({flavor:game.i18n.localize("CoC7.RollAll4Dev"),user:game.user.id,speaker:{alias:game.user.name},content:message.join(""),whisper:ChatMessage.getWhisperRecipients("GM")}),this.object.setupModifiers.edu=value-parseInt(this.object.setupPoints.edu,10),this.object.requiresAgeAdjustments.edu.rolled=!0,this.render(!0)}}async _onRollAll(event){event.preventDefault();const rolls=[];for(const key of["str","con","siz","dex","app","int","pow","edu","luck"]){const result=await this.rollCharacteristic(key);!1!==result&&rolls.push(result)}this.rollMessage(rolls),this.render(!0)}async _onIncreaseCharacteristic10(event){event.preventDefault();const li=event.currentTarget.closest(".item");void 0!==li.dataset.offset&&void 0!==li.dataset.min&&void 0!==li.dataset.max?this.modifyOffset(li.dataset.offset,10,li.dataset.min,li.dataset.max):void 0!==li.dataset.key&&this.modifyCharacteristic(li.dataset.key,10),this.render(!0)}async _onIncreaseCharacteristic(event){event.preventDefault();const li=event.currentTarget.closest(".item");void 0!==li.dataset.offset&&void 0!==li.dataset.min&&void 0!==li.dataset.max?this.modifyOffset(li.dataset.offset,1,li.dataset.min,li.dataset.max):void 0!==li.dataset.key&&this.modifyCharacteristic(li.dataset.key,1),this.render(!0)}async _onDecreaseCharacteristic(event){event.preventDefault();const li=event.currentTarget.closest(".item");void 0!==li.dataset.offset&&void 0!==li.dataset.min&&void 0!==li.dataset.max?this.modifyOffset(li.dataset.offset,-1,li.dataset.min,li.dataset.max):void 0!==li.dataset.key&&this.modifyCharacteristic(li.dataset.key,-1),this.render(!0)}_onDecreaseCharacteristic10(event){event.preventDefault();const li=event.currentTarget.closest(".item");void 0!==li.dataset.offset&&void 0!==li.dataset.min&&void 0!==li.dataset.max?this.modifyOffset(li.dataset.offset,-10,li.dataset.min,li.dataset.max):void 0!==li.dataset.key&&this.modifyCharacteristic(li.dataset.key,-10),this.render(!0)}modifyOffset(key,value,min,max){this.object.setupModifiers[key]=Math.max(Math.min(parseInt(this.object.setupModifiers[key],10)+value,parseInt(max,10)),parseInt(min,10))}modifyCharacteristic(key,value){const li=this._element[0].querySelector(`li.item[data-key=${key}]`),input=li?.querySelector("input");input&&(input.value=Number(input.value)+value,this.object.setupPoints[key]=Number(input.value))}async _onRollCharacteristic(event){event.preventDefault();const characKey=event.currentTarget.closest(".item").dataset.key,result=await this.rollCharacteristic(characKey);!1!==result&&this.rollMessage([result]),this.render(!0)}async rollCharacteristic(key){const li=$(`#investigator-wizard-application li.item[data-key=${key}]`),input=li.find("input"),formula=li.data("roll");if(input&&formula&&(this.object.rerollsEnabled||""===this.object.setupPoints[key])){const roll=new Roll(formula.toString());return await roll.evaluate({async:!0}),input.val(roll.total),this.object.setupPoints[key]=Number(roll.total),[key,formula.toString(),roll]}return!1}_onChangeSubmit(event){this._onSubmit(event)}_onChangeSaveCharacteristic(event){const obj=$(event.currentTarget),name=obj.prop("name");if(void 0!==this.object.setupPoints[name]){this.object.setupPoints[name]=obj.val();let empties=!1,total=0;for(const key in this.object.setupPoints)""!==this.object.setupPoints[key]?"luck"!==key&&(total+=parseInt(this.object.setupPoints[key],10)):empties=!0;const objTotal=obj.closest("ol.item-list").find("span.total"),max=parseInt(objTotal.siblings("span.value").text(),10);objTotal.text(total),total!==max||empties?obj.closest("form").find("button.submit-button[data-button=next]").length>0&&this.render(!0):0===obj.closest("form").find("button.submit-button[data-button=next]").length&&this.render(!0)}}getPageNumber(direction){const pageOrder=this.pageOrder,key=parseInt(Object.keys(pageOrder).find((key=>pageOrder[key]===this.object.step)),10)+direction;return pageOrder[key]}async _updateObject(event,formData){if(["back","next"].includes(event.submitter?.dataset.button)){if(event.submitter.className.indexOf("currently-submitting")>-1)return;event.submitter.className=event.submitter.className+" currently-submitting"}if(void 0!==formData["default-setup"]&&void 0!==formData["world-era"]&&void 0!==formData["default-ownership"]){if(this.object.defaultSetup!==formData["default-setup"]&&(this.object.defaultSetup=formData["default-setup"],game.settings.set("CoC7","InvestigatorWizardSetup",this.object.defaultSetup),this.object.setup=this.object.defaultSetup,this.clearSetupPoints(),await this.setSkillLists()),this.object.defaultOwnership!==formData["default-ownership"]&&(this.object.defaultOwnership=formData["default-ownership"],game.settings.set("CoC7","InvestigatorWizardOwnership",this.object.defaultOwnership)),this.object.defaultEra!==formData["world-era"]){const obj=$(this.element.find("form")),started=Date.now();obj.find(".dialog-buttons:first").hide(),obj.find(".scrollsection:first").hide(),obj.find(".erachange:first").show(),this.object.defaultEra=formData["world-era"],await game.settings.set("CoC7","worldEra",this.object.defaultEra),this.object.cacheCoCID=await CoC7InvestigatorWizard.loadCacheItemByCoCID();const buffer=500-(Date.now()-started);buffer>10&&await new Promise((resolve=>setTimeout(resolve,buffer)))}if(void 0!==formData["characteristics-method"]){const type=Number(formData["characteristics-method"]);type===this.characteristicsMethods.METHOD_DEFAULT?(this.object.enforcePointBuy=!1,this.object.quickFireValues=[]):type===this.characteristicsMethods.METHOD_POINTS?(this.object.enforcePointBuy=!0,this.object.quickFireValues=[]):type===this.characteristicsMethods.METHOD_VALUES&&(this.object.enforcePointBuy=!1,game.settings.get("CoC7","pulpRuleArchetype")?this.object.quickFireValues=[90,80,70,60,60,50,50,40]:this.object.quickFireValues=[80,70,60,60,50,50,50,40]),game.settings.set("CoC7","InvestigatorWizardPointBuy",this.object.enforcePointBuy),game.settings.set("CoC7","InvestigatorWizardQuickFire",this.object.quickFireValues)}this.object.rerollsEnabled="string"==typeof formData["rerolls-enabled"],game.settings.set("CoC7","InvestigatorWizardRerolls",this.object.rerollsEnabled);for(let i=0,im=this.object.quickFireValues.length;i<im;i++){const num=Number(formData["quick-fire-values-"+i]);num>0&&(this.object.quickFireValues[i]=num)}this.object.quickFireValues.sort().reverse(),this.object.placeable=foundry.utils.duplicate(this.object.quickFireValues),"string"==typeof formData["default-enabled"]?"0"===this.object.defaultQuantity.toString()?(this.object.defaultQuantity=1,game.settings.set("CoC7","InvestigatorWizardQuantity",this.object.defaultQuantity)):(this.object.defaultQuantity=formData["default-quantity"],game.settings.set("CoC7","InvestigatorWizardQuantity",this.object.defaultQuantity)):"0"!==this.object.defaultQuantity.toString()&&(this.object.defaultQuantity=0,game.settings.set("CoC7","InvestigatorWizardQuantity",this.object.defaultQuantity))}else if(void 0!==formData["coc-setup"])this.object.setup!==formData["coc-setup"]&&(this.object.setup=formData["coc-setup"],this.clearSetupPoints(),await this.setSkillLists());else if(void 0!==formData["coc-archetype"])this.object.archetype!==formData["coc-archetype"]&&(this.object.archetype=formData["coc-archetype"],this.object.coreCharacteristic="",this.clearSetupPoints(),await this.setSkillLists());else if(void 0!==formData["coc-occupation"])this.object.occupation!==formData["coc-occupation"]&&(this.object.occupation=formData["coc-occupation"],await this.setSkillLists());else{for(const key in this.object.setupPoints)void 0!==formData[key]&&this.object.setupPoints[key]!==formData[key]&&(this.object.setupPoints[key]=formData[key]);void 0!==formData["coc-core-characteristic"]&&this.object.coreCharacteristic!==formData["coc-core-characteristic"]&&(this.object.coreCharacteristic=formData["coc-core-characteristic"],this.clearSetupPoints(),this.object.placeable=foundry.utils.duplicate(this.object.quickFireValues))}const flatKeys=["name","age","residence","birthplace","language","avatar","token"];for(const key of flatKeys)void 0!==formData[key]&&this.object[key]!==formData[key]&&(this.object[key]=formData[key],"age"===key&&this.getAgeAdjustments());if("back"===event.submitter?.dataset.button){const pageNumber=this.getPageNumber(-1);if(void 0!==pageNumber){this.object.step=pageNumber;const obj=this.element.find(".scrollsection");obj.length&&obj[0].scrollTop&&(obj[0].scrollTop=0)}}else if("next"===event.submitter?.dataset.button){if(this.object.step===this.pageList.PAGE_CREATE||this.object.step===this.pageList.PAGE_BACKSTORY&&game.user.role>=CONST.USER_PERMISSIONS.ACTOR_CREATE.defaultRole)return void this.attemptToCreate();{const pageNumber=this.getPageNumber(1);if(void 0!==pageNumber){this.object.step=pageNumber;const obj=this.element.find(".scrollsection");obj.length&&obj[0].scrollTop&&(obj[0].scrollTop=0)}}}this.render(!0)}async attemptToCreate(){const actorData=await this.normalizeCharacterData(this.object);if(game.user.isGM||game.user.role>=CONST.USER_PERMISSIONS.ACTOR_CREATE.defaultRole){(await CoC7InvestigatorWizard.createCharacter(actorData)).sheet.render(!0),this.close()}else{const keepers=game.users.filter((u=>u.active&&u.isGM));if(keepers.length){actorData.ownership[game.user.id]=CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;const data={type:"character-wizard",listener:keepers[0].id,payload:actorData};game.socket.emit("system.CoC7",data),ui.notifications.info(game.i18n.localize("CoC7.InvestigatorWizard.CreatingInvestigator")),this.close()}else ui.notifications.error(game.i18n.localize("CoC7.ErrorMissingKeeperUser"))}}async normalizeCharacterData(data){const weaponSkills={melee:{},rngd:{}},items=[];for(const key in data.skillItems){const skill=data.skillItems[key];for(let index=0,im=skill.rows.length;index<im;index++){const row=skill.rows[index];if(!skill.flags.isMultiple||!1!==row.selected){let item=foundry.utils.duplicate(skill.item);!1!==row.selected&&"string"!=typeof row.selected&&(item=foundry.utils.duplicate(row.selected),row.selected=!1),row.occupationToggle&&(item.system.flags.occupation=!0),row.archetypeToggle&&(item.system.flags.archetype=!0);let base=item.system.base;if(!Number.isNumeric(base))for(const key in data.setupPoints){const regEx=new RegExp("@"+key,"i");base=base.replace(regEx,parseInt(data.setupPoints[key],10)+parseInt(data.setupModifiers[key],10))}Number.isNumeric(base)||(base=Math.floor(new AverageRoll("("+base+")")[foundry.utils.isNewerVersion(game.version,"12")?"evaluateSync":"evaluate"]({minimize:!0,maximize:!0}).total)),item.system.base=base,item.system.adjustments=item.system.adjustments??{},Number(row.personalPoints)>0&&(item.system.adjustments.personal=parseInt(row.personalPoints,10)),Number(row.occupationPoints)>0&&(item.system.adjustments.occupation=parseInt(row.occupationPoints,10)),Number(row.archetypePoints)>0&&(item.system.adjustments.archetype=parseInt(row.archetypePoints,10)),Number(row.experiencePoints)>0&&(item.system.adjustments.experience=parseInt(row.experiencePoints,10)),key===this.cocidLanguageOwn?(item.system.skillName=data.language,item.name=item.system.specialization+" ("+item.system.skillName+")"):"string"==typeof row.selected&&(item.system.skillName=row.selected,item._id=foundry.utils.randomID(),item.name=item.system.specialization+" ("+item.system.skillName+")",void 0!==item.flags.CoC7?.cocidFlag?.id&&(item.flags.CoC7.cocidFlag.id=game.system.api.cocid.guessId(item))),item.system.properties?.fighting?(weaponSkills.melee[item.name]=item._id,weaponSkills.melee[item.system.skillName]=item._id):(item.system.properties?.firearm||item.system.properties?.ranged)&&(weaponSkills.rngd[item.name]=item._id,weaponSkills.rngd[item.system.skillName]=item._id),items.push(item)}}}for(const sourceItem of data.investigatorItems){const item=foundry.utils.duplicate(sourceItem);item.system.properties.melee?(void 0!==weaponSkills.melee[item.system.skill.main.name]&&(item.system.skill.main.id=weaponSkills.melee[item.system.skill.main.name]),void 0!==weaponSkills.melee[item.system.skill.alternativ.name]&&(item.system.skill.alternativ.id=weaponSkills.melee[item.system.skill.alternativ.name])):item.system.properties.rngd&&(void 0!==weaponSkills.rngd[item.system.skill.main.name]&&(item.system.skill.main.id=weaponSkills.rngd[item.system.skill.main.name]),void 0!==weaponSkills.rngd[item.system.skill.alternativ.name]&&(item.system.skill.alternativ.id=weaponSkills.rngd[item.system.skill.alternativ.name])),items.push(item)}let monetary={};const setup=await this.getCacheItemByCoCID(this.object.setup);setup&&(monetary=foundry.utils.duplicate(setup.system.monetary));const development={personal:2*(parseInt(data.setupPoints.int,10)+parseInt(data.setupModifiers.int,10)),occupation:0,archetype:0};if(""!==data.archetype){const archetype=await game.system.api.cocid.fromCoCID(data.archetype);1===archetype.length&&(items.push(archetype[0].toObject()),development.archetype=archetype[0].system.bonusPoints)}if(""!==data.occupation){const occupation=await game.system.api.cocid.fromCoCID(data.occupation);if(1===occupation.length){items.push(occupation[0].toObject());const options=[];for(const[key,carac]of Object.entries(occupation[0].system.occupationSkillPoints))carac.selected&&(carac.optional?options.push(carac.multiplier*(parseInt(data.setupPoints[key],10)+parseInt(data.setupModifiers[key],10))):development.occupation+=carac.multiplier*(parseInt(data.setupPoints[key],10)+parseInt(data.setupModifiers[key],10)));options.length>0&&(development.occupation+=Math.max(...options))}}const biography=[];for(let index=0,im=data.bioSections.length;index<im;index++)biography.push({title:data.bioSections[index].name,value:data.bioSections[index].value});return{type:"character",name:data.name,img:data.avatar,system:{characteristics:{str:{value:parseInt(data.setupPoints.str,10)+parseInt(data.setupModifiers.str,10)},con:{value:parseInt(data.setupPoints.con,10)+parseInt(data.setupModifiers.con,10)},siz:{value:parseInt(data.setupPoints.siz,10)+parseInt(data.setupModifiers.siz,10)},dex:{value:parseInt(data.setupPoints.dex,10)+parseInt(data.setupModifiers.dex,10)},app:{value:parseInt(data.setupPoints.app,10)+parseInt(data.setupModifiers.app,10)},int:{value:parseInt(data.setupPoints.int,10)+parseInt(data.setupModifiers.int,10)},pow:{value:parseInt(data.setupPoints.pow,10)+parseInt(data.setupModifiers.pow,10)},edu:{value:parseInt(data.setupPoints.edu,10)+parseInt(data.setupModifiers.edu,10)}},attribs:{lck:{value:Math.max(parseInt(data.setupPoints.luck,10),parseInt(data.setupModifiers.luck,10))},san:{value:parseInt(data.setupPoints.pow,10)+parseInt(data.setupModifiers.pow,10)}},infos:{age:data.age,residence:data.residence,birthplace:data.birthplace},development,biography,monetary},prototypeToken:{name:data.name,actorLink:!0,texture:{src:data.token},disposition:CONST.TOKEN_DISPOSITIONS.FRIENDLY,sight:{enabled:!0}},items,ownership:{default:parseInt(data.defaultOwnership,10)}}}static async createCharacterFromData(actorData){const actor=await CoC7InvestigatorWizard.createCharacter(actorData),functionId=Hooks.on("renderActorSheet",((app,html,data)=>{app.object.id===actor.id&&(game.socket.emit("system.CoC7",{type:"open-character",listener:Object.keys(actorData.ownership).find((k=>"default"!==k)),payload:actor.id}),Hooks.off("renderActorSheet",functionId))}));actor.sheet.render(!0)}static async createCharacter(actorData){const actor=await Actor.create(actorData);return await actor.update({"system.attribs.hp.value":actor.rawHpMax,"system.attribs.mp.value":actor.rawMpMax,"system.attribs.san.max":actor.rawMpMax}),await actor.resetDailySanity(),actor}static async create(options={}){options=foundry.utils.mergeObject({step:0,defaultSetup:game.settings.get("CoC7","InvestigatorWizardSetup"),defaultQuantity:game.settings.get("CoC7","InvestigatorWizardQuantity"),defaultOwnership:game.settings.get("CoC7","InvestigatorWizardOwnership"),defaultEra:game.settings.get("CoC7","worldEra"),rerollsEnabled:game.settings.get("CoC7","InvestigatorWizardRerolls"),enforcePointBuy:game.settings.get("CoC7","InvestigatorWizardPointBuy"),quickFireValues:game.settings.get("CoC7","InvestigatorWizardQuickFire"),placeable:foundry.utils.duplicate(game.settings.get("CoC7","InvestigatorWizardQuickFire")),cacheCoCID:CoC7InvestigatorWizard.loadCacheItemByCoCID(),cacheBackstories:game.system.api.cocid.fromCoCIDRegexBest({cocidRegExp:/^rt\.\.backstory-/,type:"rt"}),cacheItems:{},setup:game.settings.get("CoC7","InvestigatorWizardSetup"),skillItems:{},occupationGroups:{},investigatorItems:[],setupPoints:{str:"",con:"",siz:"",dex:"",app:"",int:"",pow:"",edu:"",luck:""},setupModifiers:{str:0,con:0,siz:0,dex:0,app:0,int:0,pow:0,edu:0,luck:0},archetype:"",coreCharacteristic:"",occupation:"",bioSections:[],personal:0,personalText:"",creditRating:{min:0,max:0},name:"",age:"",requiresAgeAdjustments:!1,residence:"",birthplace:"",language:"",avatar:"icons/svg/mystery-man.svg",token:"icons/svg/mystery-man.svg"},options),new CoC7InvestigatorWizard(options).render(!0)}}class CoC7MenuLayer extends PlaceablesLayer{constructor(){super(),this.objects={}}static get layerOptions(){return foundry.utils.mergeObject(super.layerOptions,{name:"coc7menu",zIndex:60})}static get documentName(){return"Token"}get placeables(){return[]}}class CoC7Menu{static getButtons(controls){canvas.coc7gmtools=new CoC7MenuLayer;const isKeeper=game.user.isGM,showHiddenDevMenu=game.settings.get("CoC7","hiddendevmenu");controls.push({name:"coc7menu",title:"CoC7.GmTools",layer:"coc7gmtools",icon:"game-icon game-icon-tentacle-strike",visible:isKeeper,tools:[{toggle:!0,icon:"fas fa-angle-double-up",name:"devphase",active:game.settings.get("CoC7","developmentEnabled"),title:"CoC7.DevPhase",onClick:async toggle=>await CoC7Utilities.toggleDevPhase(toggle)},{toggle:!0,icon:"fas fa-user-edit",name:"charcreate",active:game.settings.get("CoC7","charCreationEnabled"),title:"CoC7.CharCreationMode",onClick:async toggle=>await CoC7Utilities.toggleCharCreation(toggle)},{button:!0,icon:"fas fa-user-plus",name:"actor-import",title:"CoC7.ActorImporter",onClick:async()=>await CoC7ActorImporterDialog.create()},{button:!0,icon:"fas fa-user-check",name:"investigator-wizard",title:"CoC7.InvestigatorWizard.Title",onClick:async()=>await CoC7InvestigatorWizard.create()},{toggle:!0,icon:"fas fa-certificate",class:"xp_toggle",name:"xptoggle",active:game.settings.get("CoC7","xpEnabled"),title:"CoC7.toggleXP",onClick:async toggle=>await CoC7Utilities.toggleXPGain(toggle)},{button:!0,icon:"game-icon game-icon-card-joker",name:"fakeroll",title:"CoC7.FakeRoll",onClick:CoC7Chat.fakeRollMessage},{button:!0,icon:"fas fa-moon",name:"startrest",title:"CoC7.startRest",onClick:async()=>await CoC7Utilities.getTarget()}]}),showHiddenDevMenu&&(canvas.coc7DevTools=new CoC7MenuLayer,controls.push({name:"coc7DevMenu",title:"Dev tools. If you don't know what it is, you don't need it and you shouldn't use it !!",layer:"coc7DevTools",icon:"game-icon game-icon-police-badge",visible:isKeeper,tools:[{toggle:!0,icon:"game-icon game-icon-dice-fire",name:"alwaysCrit",active:game.CoC7.dev.dice.alwaysCrit,title:"All rolls will crit",onClick:toggle=>{game.CoC7.dev.dice.alwaysFumble=!1,game.CoC7.dev.dice.alwaysCrit=toggle}},{toggle:!0,icon:"game-icon game-icon-fire-extinguisher",name:"alwaysFumble",active:game.CoC7.dev.dice.alwaysFumble,title:"All rolls will fumble",onClick:toggle=>{game.CoC7.dev.dice.alwaysFumble=toggle,game.CoC7.dev.dice.alwaysCrit=!1}}]}))}static renderControls(app,html,data){const isKeeper=game.user.isGM,keeperMenu=html.find(".game-icon-tentacle-strike").parent();keeperMenu.addClass("coc7-menu"),isKeeper&&keeperMenu.after('<li class="scene-control coc7-menu coc7-create-link" title="'+game.i18n.localize("CoC7.CreateLink")+'"><i class="fas fa-link"></i></li>'),keeperMenu.after('<li class="scene-control coc7-menu coc7-dice-roll" title="'+game.i18n.localize("CoC7.RollDice")+'"><i class="game-icon game-icon-d10"></i></li>'),html.find(".coc7-menu.coc7-dice-roll").click((event=>CoC7Utilities.rollDice(event))),html.find(".coc7-menu.coc7-create-link").click((event=>CoC7ContentLinkDialog.create(event)))}}class CoC7Canvas{static get COC7_TYPES_SUPPORTED(){return["CoC7Link","locator","getToken"]}static async onDropSomething(canvas,data){if(data.type&&CoC7Canvas.COC7_TYPES_SUPPORTED.includes(data.type)){const gridSize=canvas.scene.grid.size,x=data.x-gridSize/2,y=data.y-gridSize/2,height=gridSize,width=gridSize;let dropTargetTokens=canvas.tokens.placeables.filter((obj=>{const c=obj.center;return Number.between(c.x,x,x+width)&&Number.between(c.y,y,y+height)}));switch(dropTargetTokens.length||(dropTargetTokens=canvas.tokens.controlled),data.type){case"CoC7Link":if(data.check===CoC7Link.CHECK_TYPE.EFFECT){if(dropTargetTokens.length)for(const token of dropTargetTokens)CoC7Link._onLinkActorClick(token.actor,data)}else dropTargetTokens.length?CoC7Link.toWhisperMessage(data,dropTargetTokens.filter((t=>t.actor.owners.length)).map((t=>t.actor))):CoC7Link.toWhisperMessage(data,game.users.players.filter((u=>!!u.character)).map((u=>u.character)));break;case"getToken":void 0!==data.appId&&"string"==typeof data.callBack&&void 0!==ui.windows[data.appId]&&"function"==typeof ui.windows[data.appId][data.callBack]&&ui.windows[data.appId][data.callBack](dropTargetTokens);break;default:if(data.docUuid&&data.callBack){const doc=CoC7Utilities.SfromUuid(data.docUuid);if(doc[data.callBack]&&"function"==typeof doc[data.callBack])try{data.scene=canvas.scene.uuid,doc[data.callBack](data)}catch(error){console.warn(error.message)}}}}}}class CoC7SettingsDirectory extends Settings{activateListeners(html){super.activateListeners(html),game.user.isGM&&(html.find("#settings-game").append('<button class="trigger-data-migration"><i class="fas fa-wrench"></i> '+game.i18n.localize("CoC7.Migrate.TriggerButton")+"</button>"),html.find("#settings-documentation").append('<button class="trigger-system-manual"><i class="fas fa-books"></i> '+game.i18n.localize("CoC7.System.Documentation")+"</button>"),html.find(".trigger-data-migration").click((()=>{new Dialog({title:game.i18n.localize("CoC7.Migrate.TriggerTitle"),content:game.i18n.localize("CoC7.Migrate.TriggerContents"),buttons:{migrate:{icon:'<i class="fas fa-check"></i>',label:game.i18n.localize("CoC7.Migrate.TriggerRestart"),callback:async()=>{await game.settings.set("CoC7","systemUpdateVersion",0),window.location.reload()}},close:{icon:'<i class="fas fa-ban"></i>',label:game.i18n.localize("Cancel"),callback:()=>{}}},default:"close"},{}).render(!0)})),html.find(".trigger-system-manual").click((async()=>{(await game.packs.get("CoC7.system-doc").getDocument(CONFIG.CoC7.Manual))?.sheet.render(!0)})))}}class CoC7CompendiumDirectory extends CompendiumDirectory{activateListeners(html){super.activateListeners(html);let translated=!1;if("en"===game.i18n.lang)translated=!0;else if(void 0!==game.babele)for(const v of Object.values(game.babele.modules))v.lang===game.i18n.lang&&(translated=!0);translated||(html.find("footer.directory-footer").append('<a class="compendium-translation" title="'+game.i18n.localize("CoC7.HowToTranslateTitle")+'">'+game.i18n.localize("CoC7.HowToTranslateTitle")+"</a>"),html.find(".compendium-translation").click((()=>{const message="<p>"+game.i18n.localize("CoC7.HowToTranslateWarning")+"</p><p>"+game.i18n.localize("CoC7.HowToTranslateInstallBabele")+"</p><p>"+game.i18n.localize("CoC7.HowToTranslateInstallTranslation")+"</p><p>"+game.i18n.localize("CoC7.HowToTranslateEnableTranslation")+"</p><p>"+game.i18n.localize("CoC7.HowToTranslateNoTranslation")+"</p>";new Dialog({title:game.i18n.localize("CoC7.HowToTranslateTitle"),content:message,buttons:{},default:"close"},{}).render(!0)})))}}class CoC7ActorDirectory extends ActorDirectory{activateListeners(html){super.activateListeners(html);let allowWizard=game.user.role>=CONST.USER_PERMISSIONS.ACTOR_CREATE.defaultRole;if(!allowWizard){const allowed=game.settings.get("CoC7","InvestigatorWizardQuantity");if(allowed>0){allowWizard=game.actors.filter((a=>[a.ownership.default,a.ownership[game.user.id]??CONST.DOCUMENT_OWNERSHIP_LEVELS.NONE].includes(CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER))).length<allowed}}allowWizard&&(html.find("footer.directory-footer").append('<a class="investigator-wizard">'+game.i18n.localize("CoC7.InvestigatorWizard.Title")+"</a>"),html.find(".investigator-wizard").click((()=>{CoC7InvestigatorWizard.create()}))),game.user.role>=CONST.USER_PERMISSIONS.ACTOR_CREATE.defaultRole&&(html.find("footer.directory-footer").append('<a class="actor-import">'+game.i18n.localize("CoC7.ActorImporter")+"</a>"),html.find(".actor-import").click((()=>{CoC7ActorImporterDialog.create()})))}}class CoC7Spell extends CoC7Item{constructor(data,context){void 0===data.img&&(data.img="systems/CoC7/assets/icons/pentagram-rose.svg"),super(data,context),this.context=context}async cast(){if(!this.isOwned)return ui.notifications.error(game.i18n.localize("CoC7.NotOwned"));const costs=foundry.utils.duplicate(this.system.costs),losses=[];let convertSurplusIntoHitPoints;if(costs.magicPoints=CoC7Utilities.isFormula(costs.magicPoints)?(await new Roll(costs.magicPoints).roll({async:!0})).total:parseInt(costs.magicPoints),costs.magicPoints&&costs.magicPoints>this.actor.system.attribs.mp.value&&(convertSurplusIntoHitPoints=await new Promise((resolve=>{const convertedHitPoints=costs.magicPoints-this.actor.system.attribs.mp.value,convertedMagicPoints=costs.magicPoints-convertedHitPoints,data={title:" ",content:game.i18n.format("CoC7.NotEnoughMagicPoints",{actorMagicPoints:this.actor.system.attribs.mp.value,convertedHitPoints,convertedMagicPoints,originalMagicPoints:costs.magicPoints,spell:this.name}),buttons:{cancel:{icon:'<i class="fas fa-times"></i>',label:game.i18n.localize("CoC7.Cancel"),callback:()=>resolve(!1)},proceed:{icon:'<i class="fas fa-check"></i>',label:game.i18n.localize("CoC7.Proceed"),callback:()=>(costs.hitPoints=convertedHitPoints,costs.magicPoints=convertedMagicPoints,resolve(!0))}},default:"cancel",classes:["coc7","dialog"]};new Dialog(data).render(!0)})),!convertSurplusIntoHitPoints))return;for(const[key,value]of Object.entries(costs))value&&0!==Number(value)&&losses.push(await this.resolveLosses(key,value));const description=this.system.description.value,html=await renderTemplate("systems/CoC7/templates/items/spell/chat.html",{description,losses});return await ChatMessage.create({user:game.user.id,speaker:ChatMessage.getSpeaker({actor:this.actor}),flavor:this.name,content:html})}async resolveLosses(characteristic,value){let characteristicName,loss;loss=CoC7Utilities.isFormula(value)?(await new Roll(value).roll({async:!0})).total:parseInt(value);const actorData=this.actor.system;switch(characteristic){case"hitPoints":characteristicName=game.i18n.localize("CoC7.HitPoints"),this.actor.dealDamage(loss,{ignoreArmor:!0});break;case"sanity":characteristicName=game.i18n.localize("CoC7.SanityPoints"),this.grantSanityLoss(loss);break;case"magicPoints":characteristicName=game.i18n.localize("CoC7.MagicPoints"),this.actor.setMp(actorData.attribs.mp.value-loss);break;case"power":characteristicName=game.i18n.localize("CHARAC.Power"),this.actor.update({"system.characteristics.pow.value":actorData.characteristics.pow.value-loss})}return{characteristicName,loss}}async grantSanityLoss(value){const template=SanCheckCard.template;let html=await renderTemplate(template,{});const message=await ChatMessage.create({user:game.user.id,speaker:ChatMessage.getSpeaker({actor:this.actor}),flavor:game.i18n.format("CoC7.CastingSpell",{spell:this.name}),content:html}),card=await message.getHTML();if(void 0!==card.length&&1===card.length){const sanityLoss=value;html=card.find(".chat-card")[0],html.dataset.object=escape(JSON.stringify({actorKey:this.actor.id,fastForward:!1,sanData:{sanMin:sanityLoss,sanMax:sanityLoss}}));const sanityCheck=SanCheckCard.getFromCard(html);await sanityCheck.bypassRollSan(),await sanityCheck.rollSanLoss(),sanityCheck.updateChatCard()}}async update(data,context){if(void 0!==this.context.parent&&void 0!==this.context.bookId){let item,book;null===this.context.parent?(item=game.items.get(this.context.bookId),book=item.toObject()):book=this.context.parent.items.get(this.context.bookId).toObject();for(let i=0,im=book.system.spells.length;i<im;i++)book.system.spells[i]._id===this.id&&(book.system.spells[i]=foundry.utils.mergeObject(book.system.spells[i],data));null===this.context.parent?(await item.update({"system.spells":book.system.spells}),this.sheet.object=new CoC7Spell(book.system.spells.find((spell=>spell._id===this.id)),this.context)):(await this.context.parent.updateEmbeddedDocuments("Item",[book]),this.sheet.object=new CoC7Spell(book.system.spells.find((spell=>spell._id===this.id)),this.context)),this.sheet.render(!0)}else await super.update(data,context)}}class CoC7Book extends CoC7Item{constructor(data,context){void 0===data.img&&(data.img="systems/CoC7/assets/icons/secret-book.svg"),super(data,context)}static convertDifficulty(difficulty){switch(difficulty){case"hard":return CoC7Check.difficultyLevel.hard;case"extreme":return CoC7Check.difficultyLevel.extreme;case"critical":return CoC7Check.difficultyLevel.critical;case"unreadable":return CoC7Check.difficultyLevel.impossible;default:return CoC7Check.difficultyLevel.regular}}async addSpells(spells){const collection=this.system.spells?foundry.utils.duplicate(this.system.spells):[];for(const spell of spells)collection.push(spell);return await this.update({"system.spells":collection})}async spellDetail(index){const isKeeper=game.user.isGM,data=this.system.spells[index],parent=this.actor?this.actor:null,spell=new CoC7Spell(data,{parent,bookId:this.id});if(isKeeper||spell.system.learned)return await spell.sheet.render(!0)}async attemptInitialReading(){const difficulty=CoC7Book.convertDifficulty(this.system.difficultyLevel),language=this.system.language,skill=this.actor?.getSkillsByName(language);if(skill){if(0===skill.length)return ui.notifications.error(game.i18n.format("CoC7.UnknownLanguage",{actor:this.actor.name}));{const check=new CoC7Check;return check.actor=this.actor,check.skill=skill[0].id,check.difficulty=difficulty,check.parent=this.uuid,check.context="INITIAL_READING",check.flavor=game.i18n.format("CoC7.ReadAttempt",{book:this.name,language,difficulty:this.system.difficultyLevel}),await check.roll(),await check.toMessage()}}return ui.notifications.error(game.i18n.localize("CoC7.NotOwned"))}async changeProgress(mode,value){if(!this.isOwned&&"reset"!==mode)return ui.notifications.error(game.i18n.localize("CoC7.NotOwned"));if(!this.system.initialReading&&"reset"!==mode)return ui.notifications.error(game.i18n.format("CoC7.InitialReadingNeeded",{actor:this.actor.name,book:this.name}));if(!this.system.type.mythos&&"reset"!==mode)return ui.notifications.error(game.i18n.localize("CoC7.NotMythosTome"));const necessary=this.system.study.necessary;let fullStudy=this.system.fullStudy,progress=this.system.study.progress;if(isNaN(progress))return await this.update({"system.study.progress":0});if(value&&progress>value)return await this.update({"system.fullStudy":++fullStudy,"system.study.progress":value}),await this.completeFullStudy();if("increase"===mode&&progress<necessary){if(!1!==await this.checkExhaustion())return;if(await this.update({"system.study.progress":++progress}),progress===necessary)return await this.update({"system.fullStudy":++fullStudy}),await this.grantFullStudy()}else if("decrease"===mode&&progress>0)return await this.update({"system.study.progress":--progress})}async checkExhaustion(){const actorMythosValue=this.actor?.cthulhuMythos,mythosRating=this.system.mythosRating;if(this.system.initialReading)return actorMythosValue>=mythosRating&&(await this.update({"system.study.progress":this.system.study.necessary}),ui.notifications.warn(game.i18n.format("CoC7.BookHasNothingMoreToTeach",{actor:this.actor.name,book:this.name})))}async grantFullStudy(){if(!this.system.type.mythos)return;if(!1!==await this.checkExhaustion())return;const actorMythosValue=this.actor.cthulhuMythos,developments=[],mythosRating=this.system.mythosRating;let mythosFinal=this.system.gains.cthulhuMythos.final;if(actorMythosValue+mythosFinal>mythosRating)for(let index=1;index<=mythosFinal;index++)actorMythosValue+mythosFinal-index<=mythosRating&&(mythosFinal-=index);return developments.push({name:game.i18n.localize("CoC7.CoCIDFlag.keys.i.skill.cthulhu-mythos"),gain:parseInt(mythosFinal)},{name:this.system.language,gain:"development"}),await this.grantSkillDevelopment(developments),await this.rollSanityLoss(),await this.update({"system.fullStudies":++this.system.fullStudies})}async grantInitialReading(){if(this.system.initialReading)return;const developments=[],mythos={gains:this.system.gains.cthulhuMythos.initial,type:this.system.type.mythos},occult={gains:this.system.gains.occult,type:this.system.type.occult},other_gains=this.system.gains.others,other_type=this.system.type.other;if(mythos.type&&mythos.gains&&developments.push({name:game.i18n.localize("CoC7.CoCIDFlag.keys.i.skill.cthulhu-mythos"),gain:parseInt(mythos.gains)}),occult.type&&occult.gains&&developments.push({name:game.i18n.localize("CoC7.Occult"),gain:parseInt(occult.gains)}),other_type)for(const skill of other_gains){const pattern=skill.name.match(/^(.+) \((.+)\)$/);pattern&&(skill.specialization=pattern[1],skill.name=pattern[2]),"development"!==skill.value&&(skill.value=(await new Roll(skill.value).roll({async:!0})).total),skill.value&&developments.push({name:skill.name,gain:skill.value,specialization:skill.specialization})}return await this.grantSkillDevelopment(developments),(mythos.type||occult.type)&&this.system.sanityLoss&&await this.rollSanityLoss(),await this.update({"system.initialReading":!0})}async grantSpellLearning(spelllearned){for(const spell of this.system.spells)if(spell._id===spelllearned._id){spell.system.learned=!0;await this.actor.items.find((item=>"spell"===item.type&&item.name===spelllearned.name))?ui.notifications.warn(game.i18n.format("CoC7.SpellAlreadyLearned",{spell:spelllearned.name,book:this.name})):spelllearned.system.learned=!0;break}await this.update({"system.spells":this.system.spells}),spelllearned.system.learned&&(ui.notifications.info(game.i18n.format("CoC7.SpellSuccessfullyLearned",{spell:spelllearned.name,book:this.name})),await this.actor.createEmbeddedDocuments("Item",[foundry.utils.duplicate(spelllearned)]))}async grantSkillDevelopment(developments){if(0!==developments.length){for(const development of developments){if(!development.gain)continue;let skill=await this.actor.getSkillsByName(development.name);if(0===skill.length){const existingSkill=await game.items.find((item=>"skill"===item.type&&item.name===development.name));existingSkill?skill=await this.actor.createEmbeddedDocuments("Item",[foundry.utils.duplicate(existingSkill)]):(skill=await this.actor.createSkill(development.name,0),development.specialization&&await skill[0].update({"system.properties.special":!0,"system.specialization":development.specialization}))}if(skill=skill[0],"development"===development.gain)await skill.flagForDevelopement();else{if(skill.value+development.gain>99)for(let index=1;index<=development.gain;index++)skill.value+development.gain-index<=99&&(development.gain-=index,await skill.increaseExperience(development.gain));await skill.increaseExperience(development.gain)}}return this.showDevelopmentsTable(developments)}}async redoFullStudy(){return await this.update({"system.study.progress":0}),await this.update({"system.study.necessary":2*this.system.study.necessary})}async rollSanityLoss(){const value=this.system.sanityLoss;if(!value||""===value)return;const template=SanCheckCard.template;let html=await renderTemplate(template,{});const message=await ChatMessage.create({user:game.user.id,speaker:ChatMessage.getSpeaker({actor:this.actor}),flavor:game.i18n.format("CoC7.ReadingMythosTome",{book:this.name}),content:html}),card=await message.getHTML();if(void 0!==card.length&&1===card.length){const sanityLoss=(await new Roll(value).roll({async:!0})).total;html=card.find(".chat-card")[0],html.dataset.object=escape(JSON.stringify({actorKey:this.actor.id,fastForward:!1,sanData:{sanMin:sanityLoss,sanMax:sanityLoss}}));const sanityCheck=SanCheckCard.getFromCard(html);await sanityCheck.bypassRollSan(),await sanityCheck.rollSanLoss(),sanityCheck.updateChatCard()}}async showDevelopmentsTable(developments){for(const development of developments)development.specialization&&(development.name=`${development.specialization} (${development.name})`),"development"===development.gain?development.gain=game.i18n.localize("CoC7.MarkedForDevelopment"):development.gain=`+${development.gain} ${game.i18n.localize("CoC7.Points")}`;const html=await renderTemplate("systems/CoC7/templates/items/book/development.html",{developments});return await ChatMessage.create({user:game.user.id,speaker:ChatMessage.getSpeaker({actor:this.actor}),flavor:game.i18n.format("CoC7.GainsForReading",{book:this.name}),content:html})}async attemptSpellLearning(id){if(!this.isOwned)return ui.notifications.error(game.i18n.localize("CoC7.NotOwned"));if(!this.system.initialReading)return ui.notifications.error(game.i18n.format("CoC7.InitialReadingNeeded",{actor:this.actor.name,book:this.name}));const spell=this.system.spells.find((spell=>spell._id===id));if(spell){const check=new CoC7Check;check.actor=this.actor,check.difficulty=CoC7Check.difficultyLevel.hard,check.parent=this.uuid,check.flavor=game.i18n.format("CoC7.LearnSpellAttempt",{book:this.name,spell:spell.name}),check.context="SPELL_LEARNING",check.spell=spell,await check.rollCharacteristic("int"),await check.toMessage()}}async updateRoll(roll){const check=CoC7Check.fromRollString(roll);if(check.passed){if("INITIAL_READING"===check.context)return await this.grantInitialReading();if("SPELL_LEARNING"===check.context)return await this.grantSpellLearning(check.spell)}}}const ECC_CLASS="enhanced-chat-card",PERMISSION_TYPE_GM="gm",PERMISSION_TYPE_NOT_GM="!gm",PERMISSION_TYPE_SPEAKER="speaker",PERMISSION_TYPE_USER="user",PERMISSION_TYPE_BLACKLIST="blacklist",STATE_ON="switched-on",STATE_OFF="switched-off";async function updateMessage(messageId,newContent){const chatMessage=game.messages.get(messageId);await chatMessage.update({content:newContent})}async function GMUpdate(data,options,cardClassName,messageId=void 0){const card=await EnhancedChatCard.fromData(data,options,cardClassName,messageId);return await card.GMUpdate(),card.toObject()}async function advise(){}class EnhancedChatCardLib{constructor(){this.types=new Map,this.socket=null}static injectCSS(){let style=$("head").find("style");style?.length||($("head").append($('<style  type="text/css"></style>')),style=$("head").find("style")),style.append(".ecc-restricted {color: red}\n    .ecc-restricted:hover {cursor: not-allowed}")}static set socket(x){game.enhancedChatCardsLib||(game.enhancedChatCardsLib=new EnhancedChatCardLib),game.enhancedChatCardsLib.socket=x}static get socket(){if(game.enhancedChatCardsLib){if(game.enhancedChatCardsLib.socket)return game.enhancedChatCardsLib.socket;ui.notifications.error("ECC no socket")}else ui.notifications.error("ECC not Initialized")}static get types(){return game.enhancedChatCardsLib||(game.enhancedChatCardsLib=new EnhancedChatCardLib),game.enhancedChatCardsLib.types}static register(cardConstructors){cardConstructors.forEach((cardConstructor=>{EnhancedChatCardLib.types.get(cardConstructor.name)||EnhancedChatCardLib.types.set(cardConstructor.name,cardConstructor)}))}}function setByPath(obj,path,value){const parts=path.split(".");let o=obj;if(parts.length>1)for(let i=0;i<parts.length-1;i++)o[parts[i]]||(o[parts[i]]={}),o=o[parts[i]];o[parts[parts.length-1]]=value}function getByPath(obj,path){const parts=path.split(".");let o=obj;if(parts.length>1)for(let i=0;i<parts.length-1;i++){if(!o[parts[i]])return;o=o[parts[i]]}return o[parts[parts.length-1]]}class EnhancedChatCard{constructor(data={},options={}){this.data=data,this.data.flags||(this.data.flags={}),this._options=options}async initialize(){}get options(){return foundry.utils.mergeObject(this.constructor.defaultOptions,this._options)}set options(x){this._options=x}get template(){return this.options.template}get cssClasses(){return this.options.classes?.join(" ")}get speaker(){return this.options.ooc?game.user:this.options.speaker&&ChatMessage.getSpeakerActor(this.options.speaker)?ChatMessage.getSpeakerActor(this.options.speaker):game.user}async getData(){return{card:this,flags:this.flags,data:this.toObject(),options:this.options,css:this.cssClasses,user:game.user,speaker:this.speaker}}toObject(){if(!this.data)return;const data={};for(const k of Object.keys(this.data)){const v=this.data[k];data[k]=v instanceof Object?v.toObject?v.toObject():foundry.utils.deepClone(v):v}return data}async toMessage(optionnalChatData={}){await this.initialize();const data=await this.getData(),html=await renderTemplate(this.template,data),htmlCardElement=$(html)[0];this.options.attachObject&&(htmlCardElement.dataset.object=escape(this.objectDataString)),htmlCardElement.dataset.eccClass=this.constructor.name,htmlCardElement.classList.add(...this.options.classes);const speaker=this.options.speaker&&!this.options.ooc?ChatMessage.getSpeaker(this.options.speaker):{},chatData=foundry.utils.mergeObject({user:game.user.id,speaker,flavor:game.i18n.localize(this.options.title),content:htmlCardElement.outerHTML},optionnalChatData);["gmroll","blindroll"].includes(this.rollMode)&&(chatData.whisper=ChatMessage.getWhisperRecipients("GM")),"selfroll"===this.rollMode&&(chatData.whisper=[game.user.id]),"blindroll"===this.rollMode&&(chatData.blind=!0),ChatMessage.create(chatData).then((msg=>msg))}async updateChatCard({attachObject=!0}={}){if(this.options.compute&&await this.localCompute(),this.options.GMUpdate&&await this.ExecuteGMUpdate(),this.messageId){const data=await this.getData(),html=await renderTemplate(this.template,data),htmlCardElement=$.parseHTML(html)[0];attachObject&&!this.data.EEC_ACTION?.detachData&&(htmlCardElement.dataset.object=escape(this.objectDataString)),htmlCardElement.dataset.eccClass=this.constructor.name,htmlCardElement.classList.add(...this.options.classes),game.enhancedChatCardsLib.socket.executeAsGM("updateMessage",this.messageId,htmlCardElement.outerHTML)}else this.toMessage()}async activateListeners(html){html.on("change","input,select,textarea",this._onChange.bind(this)),html.on("click",`.${ECC_CLASS} .ecc-switch`,this._onToggle.bind(this)),html.on("click",`.${ECC_CLASS} .submit`,this._onSubmit.bind(this)),html.on("focusout",`.${ECC_CLASS} input`,this._onChange.bind(this)),html.on("click",`.${ECC_CLASS} button`,this._onButton.bind(this)),html.on("keydown",`.${ECC_CLASS} form`,this._onKey.bind(this)),html.find("[data-ecc-visibility]").each((async(i,el)=>await this.setVisibility(el))),html.find("[data-ecc-permissions]").each((async(i,el)=>await this.setPermission(el))),html.find(`.${ECC_CLASS} .ecc-switch`).each(((i,el)=>this.setState(el))),html.find(`.${ECC_CLASS} input[type="radio"]`).each(((i,el)=>this.setRadioState(el)))}setState(element){if(element&&(element.dataset.flag&&element.classList.add(this.flags[element.dataset.flag]?STATE_ON:STATE_OFF),element.dataset.name)){const value=getByPath(this,element.dataset.name);element.classList.add(value?STATE_ON:STATE_OFF)}}setRadioState(element){if(!element||!element.name)return;const splited=element.name.split(".");"data"===splited[0].toLowerCase()&&this.data&&void 0!==this.data[splited[1]]&&this.data[splited[1]]===element.value&&(element.checked=!0)}async setVisibility(element){if(!element.dataset.eccVisibility)return;await this.hasPerm(element.dataset.eccVisibility,!0)||(element.style.display="none")}async setPermission(element){if(!element.dataset.eccPermissions)return;await this.hasPerm(element.dataset.eccPermissions)||(element.classList.add("ecc-restricted"),$(element).is("input")&&("range"===element.type?$(element).attr("disabled",!0):$(element).attr("readonly",!0)),$(element).is("select")&&$(element).attr("disabled",!0))}async hasPerm(restrictedTo,vision=!1){if(!restrictedTo.length)return!0;let permissionsArray=restrictedTo.split(" ");const whiteList=!permissionsArray.includes(PERMISSION_TYPE_BLACKLIST);if(whiteList||(permissionsArray=permissionsArray.filter((e=>e!==PERMISSION_TYPE_BLACKLIST))),game.user.isGM){if(!vision)return!0;if(permissionsArray.includes(PERMISSION_TYPE_GM))return whiteList;if(permissionsArray.includes(PERMISSION_TYPE_NOT_GM))return!whiteList}if(permissionsArray=permissionsArray.filter((e=>e!==PERMISSION_TYPE_GM)),permissionsArray=permissionsArray.filter((e=>e!==PERMISSION_TYPE_NOT_GM)),permissionsArray.includes(PERMISSION_TYPE_USER)){if(this.message.isAuthor)return whiteList;permissionsArray=permissionsArray.filter((e=>e!==PERMISSION_TYPE_USER))}if(permissionsArray.includes(PERMISSION_TYPE_SPEAKER)){const speaker=this.message.data.speaker;if(speaker.token&&speaker.scene){const actor=await fromUuid(`Scene.${speaker.scene}.Token.${speaker.token}`);if(actor&&actor.isOwner)return whiteList}else if(speaker.actor){const actor=game.actors.get(speaker.actor);if(actor&&actor.isOwner)return whiteList}permissionsArray=permissionsArray.filter((e=>e!==PERMISSION_TYPE_SPEAKER))}if(permissionsArray.length)for(let i=0;i<permissionsArray.length;i++){const uuid=permissionsArray[i];let actor=await fromUuid(uuid);if(actor||(actor=game.actors.get(uuid)),actor)return actor.isOwner;ui.notifications.error(`Unable to find actor ${uuid}`)}return!whiteList}static async bindListeners(html){const htmlCardElement=html[0].querySelector(`.${ECC_CLASS}`);if(!htmlCardElement)return;const card=await EnhancedChatCard.fromHTMLCardElement(htmlCardElement);card&&card.activateListeners(html)}get flags(){return this.data.flags}async assignObjects(){}async localCompute(){}async GMUpdate(){}async ExecuteGMUpdate(){const newData=await game.enhancedChatCardsLib.socket.executeAsGM("GMUpdate",this.toObject(),this._options,this.constructor.name,this.messageId);this.data=newData,await this.assignObjects()}async _onButton(event){event.preventDefault();const target=event.currentTarget;target.style.display="none";const action=target.dataset.action;let formUpdate,actionUpdate=!1;const card=target.closest(`.${ECC_CLASS}`);card?formUpdate=this._update(card):console.error(`Could not find a EEC class for this card: ${this.constructor.name}`);const originalDisplayStyle=target.style.display;(action||(console.warn("no action associated with this button"),formUpdate))&&(this[action]||(console.warn(`no ${action} action found for this card`),formUpdate))&&(this[action]&&(actionUpdate=await this[action]({event,updateCard:!1})),formUpdate||actionUpdate?await this.updateChatCard():target.style.display=originalDisplayStyle)}_onKey(event){return"Enter"===event.key&&this._onSubmit(event),"Enter"!==event.key}_onChange(event){if(this.options.submitOnChange)return this._onSubmit(event)}_onSubmit(event){const target=event.currentTarget;if("BUTTON"===target.tagName&&"action"in target.dataset)return;event.preventDefault();const card=target.closest(`.${ECC_CLASS}`);if(!card)return;this._update(card)&&this.updateChatCard()}_update(card){const forms=card.querySelectorAll("form");let updates=!1;for(let i=0;i<forms.length;i++){const form=forms[i],data=new FormDataExtended(form).object;for(const[key,value]of Object.entries(data)){getByPath(this,key)!==value&&(setByPath(this,key,value),updates=!0)}}return updates}get message(){return this._message?this._message:this._messageId?game.messages.get(this._messageId):void 0}set message(x){this._message=x}get messageId(){return this._messageId?this._messageId:this._message?this._message.id:void 0}set messageId(x){this._messageId=x}static get defaultOptions(){return{attachObject:!0,classes:[ECC_CLASS],exclude:[],excludeStartWith:"_",submitOnChange:!0,speaker:ChatMessage.getSpeaker(),ooc:!1,compute:!0,GMUpdate:!1}}get objectDataString(){const saveData={data:this.data,options:this._options};return JSON.stringify(saveData,((key,value)=>{if(null!==value&&!this.options.exclude?.includes(key)&&!key.startsWith(this.options.excludeStartWith))return value}))}get rollMode(){return this._rollMode||(this._rollMode=game.settings.get("core","rollMode")),this._rollMode}set rollMode(x){!1===x&&(this._rollMode=game.settings.get("core","rollMode")),this._rollMode=x}static async fromMessageId(messageId){const message=game.messages.get(messageId);if(!message)return;const card=await this.fromMessage(message);return card.messageId=messageId,card}static async fromMessage(message){const cardElement=$(message.data.content)[0];if(!cardElement)return;const card=await this.fromHTMLCardElement(cardElement);return card.message=message,card}static async fromHTMLCardElement(htmmlCard){if(!htmmlCard)return;if(!htmmlCard.dataset.eccClass)return;if(!htmmlCard.dataset.object)return;const cardData=JSON.parse(unescape(htmmlCard.dataset.object)),message=htmmlCard.closest(".message"),messageId=message?.dataset?.messageId;return await this.fromData(cardData.data,cardData.options,htmmlCard.dataset.eccClass,messageId)}static async fromData(data,options,cardClassName,messageId=void 0){const CardClass=game.enhancedChatCardsLib.types.get(cardClassName);if(!CardClass)return void console.error(`Unknown chat card type: ${cardClassName}`);const card=new CardClass(data,options);return messageId&&(card.messageId=messageId),await card.assignObjects(),card}setData(name){(name||"string"===$.type(name))&&setByPath(this,name,!0)}unsetData(name){(name||"string"===$.type(name))&&setByPath(this,name,!1)}toggleData(name){if(!name&&"string"!==$.type(name))return;setByPath(this,name,!getByPath(this,name))}async _onToggle(event){event.preventDefault();const target=event.currentTarget;if("action"in target.dataset)return this._onButton(event);if(target&&target.classList.contains("gm-select-only")&&!game.user.isGM)return;const name=target.dataset.flag?`data.flags.${target.dataset.flag}`:target.dataset.name;if(!name)return;const toggle=target.closest(".ecc-radio");if(toggle){const buttons=toggle.querySelectorAll(".ecc-switch");for(const b of buttons){const bName=b.dataset.flag?`data.flags.${b.dataset.flag}`:b.dataset.name;this.unsetData(bName)}this.setData(name)}else this.toggleData(name);const card=target.closest(`.${ECC_CLASS}`);this.options.submitOnChange&&card&&this._update(card),await this.updateChatCard()}}class _participant{constructor(data={}){this.data=data}_fetch(){if(!this._doc&&this.data.docUuid&&(this._doc=CoC7Utilities.getDocumentFromKey(this.data.docUuid)),!this._actor)if(this._doc)switch(this._doc.constructor?.name){case"TokenDocument":this._actor=this._doc.actor;break;case"CoCActor":this._actor=this._doc}else this._actor=CoC7Utilities.getActorFromKey(this.data.docUuid)}get actor(){return this._fetch(),this._actor}get isActor(){return this.hasActor||this.hasVehicle}get isActive(){return this.data.active||!1}get key(){return this.hasVehicle?this.vehicle.actorKey:this.hasActor?this.actor.actorKey:void 0}get icon(){return this.isActor?this.hasVehicle?this.vehicle.img:this.hasActor?this.actor.img:void 0:"systems/CoC7/assets/icons/question-circle-regular.svg"}get driver(){return this._driver||(this._driver=CoC7Utilities.getActorFromKey(this.data.docUuid)),this._driver}get vehicle(){return this.data.vehicleKey&&(this._vehicle=chatHelper.getActorFromKey(this.data.vehicleKey)),this._vehicle}get hasActor(){return!!this.actor}get hasVehicle(){return!!this.vehicle}get name(){return this.hasVehicle?this.vehicle.name:this.hasActor?this.actor.name:this.data.name||void 0}get mov(){return this.data.mov||(this.hasVehicle?this.data.mov=this.vehicle.mov:this.hasActor&&(this.data.mov=this.actor.mov)),this.data.mov&&(isNaN(Number(this.data.mov))?(this.data.hasValidMov=!1,this.data.mov=void 0):this.data.hasValidMov=!0),this.data.mov}get uuid(){return this.data.uuid}get hasMaxBonusDice(){return this.bonusDice>=2}get bonusDice(){return isNaN(this.data.bonusDice)||this.data.bonusDice<0||this.data.bonusDice>2?0:this.data.bonusDice}set bonusDice(x){isNaN(x)?ui.notifications.error("Bonus dice can Only be a number"):x>2?ui.notifications.error("Max 2 bonus dice"):x<0?ui.notifications.error("No negativ bonus dice"):this.data.bonusDice=x}get hp(){return this.data.hp||(this.data.hp=0),this.actor&&(this.data.hp=this.actor.hp),this.data.hp}set hp(x){this.data.hp=x,this.actor&&this.actor.setHp(x)}addBonusDice(){this.data.bonusDice>=2?ui.notifications.error("Already have max bonus dice"):this.data.bonusDice+=1}removeBonusDice(){this.data.bonusDice<=0?ui.notifications.error("Already have 0 bonus dice"):this.data.bonusDice-=1}resetBonusDice(){this.data.bonusDice=0}get hasBonusDice(){return this.hasOneBonusDice||this.hasTwoBonusDice}get hasOneBonusDice(){return this.bonusDice>=1}get hasTwoBonusDice(){return this.bonusDice>=2}get canAssist(){return this.assist?.length>0}get canBeCautious(){return!this.hasMaxBonusDice}get assist(){return this.data.assist||[]}get dex(){return this.data.dex||(this.hasVehicle&&this.hasDriver?this.data.dex=this.driver.characteristics.dex.value:this.hasActor&&(this.data.dex=this.actor.characteristics.dex.value)),this.data.dex&&(isNaN(Number(this.data.dex))?(this.data.hasValidDex=!1,this.data.dex=0):this.data.hasValidDex=!0),this.data.dex}get hasAGunReady(){return this.data.hasAGunReady||!1}get initiative(){let init=this.dex;return this.hasAGunReady&&(init+=50),init}get isChaser(){return!!this.data.chaser}get isPrey(){return!this.isChaser}get isValid(){return this.hasValidDex&&this.hasValidMov}get hasValidDex(){return!isNaN(Number(this.data.dex))}get hasValidMov(){return!isNaN(Number(this.data.mov))}get hasDriver(){return this.hasVehicle&&this.hasActor}get movAdjustment(){if(this.data.speedCheck?.rollDataString){const roll=CoC7Check.fromRollString(this.data.speedCheck.rollDataString);if(roll&&!roll.standby){if(roll.successLevel>=CoC7Check.successLevel.extreme)return 1;if(roll.failed)return-1}}return 0}get adjustedMov(){if(void 0!==this.mov&&!isNaN(Number(this.mov)))return Number(this.mov)+this.movAdjustment}get hasMovAdjustment(){return this.hasBonusMov||this.hasMalusMov}get hasBonusMov(){return this.data.movAdjustment>0}get hasMalusMov(){return this.data.movAdjustment<0}tooSlow(){this.data.excluded=!0}includeInChase(){this.data.excluded=!1,this.data.escaped=!1}escaped(){this.data.escaped=!0}set slowest(x){this.data.slowest=x}get slowest(){return this.data.slowest}set fastest(x){this.data.fastest=x}get fastest(){return this.data.fastest}calculateMovementActions(minMov){void 0===this.movementAction||void 0===this.adjustedMov||isNaN(minMov)?this.movementAction=0:this.movementAction=this.adjustedMov-minMov+1}set movementAction(x){this.data.movementAction=x}get movementAction(){return this.data.movementAction}set currentMovementActions(x){this.data.currentMovementActions=x}get currentMovementActions(){return this.data.currentMovementActions||0}get hasMaxMvtActions(){return this.currentMovementActions>=this.movementAction}get hasNoMvtActions(){return this.currentMovementActions<=0}addMovementActions(x=1){this.currentMovementActions+=x,this.currentMovementActions>this.movementAction&&(this.currentMovementActions=this.movementAction)}alterMovementActions(x){this.currentMovementActions+=x,this.currentMovementActions>this.movementAction&&(this.currentMovementActions=this.movementAction)}get movementActionArray(){const baseArray=Array(this.movementAction).fill("base");if(this.currentMovementActions>=0){for(let i=0;i<this.currentMovementActions;i++)baseArray[i]="base available";return baseArray}if(this.currentMovementActions<0){return Array(Math.abs(this.currentMovementActions)).fill("deficit").concat(baseArray)}}get cssClass(){const cssClasses=[];return this.isChaser?cssClasses.push("chaser"):cssClasses.push("prey"),this.data.excluded&&cssClasses.push("excluded","too_slow"),this.data.escaped&&cssClasses.push("escaped"),this.data.fastest&&cssClasses.push("fastest"),this.data.slowest&&cssClasses.push("slowest"),this.data.active&&cssClasses.push("active"),this.data.currentMovementActions<=0&&cssClasses.push("no-actions"),cssClasses.join(" ")}get speedCheck(){const check={};if(this.data.speedCheck?.name&&(check.name=this.data.speedCheck.name),this.data.speedCheck?.score&&(check.score=this.data.speedCheck.score),check.cssClasses="",this.data.speedCheck?.rollDataString&&(check.roll=CoC7Check.fromRollString(this.data.speedCheck.rollDataString),check.roll&&(check.roll.standby&&!check.roll.hasCard||(check.rolled=!0,check.inlineRoll=check.roll.inlineCheck.outerHTML,check.cssClasses+="rolled",check.roll.standby||(check.roll.successLevel>=CoC7Check.successLevel.extreme?check.modifierCss="upgrade":check.roll.failed&&(check.modifierCss="downgrade"),(check.roll.successLevel>=CoC7Check.successLevel.extreme||check.roll.failed)&&(check.hasModifier=!0))))),this.hasActor){check.options=[];for(const c of["con"]){const characteristic=this.actor.getCharacteristic(c);characteristic?.value&&check.options.push(characteristic.label)}for(const s of this.actor.driveSkills)check.options.push(s.name);for(const s of this.actor.pilotSkills)check.options.push(s.name);if(check.hasOptions=!!check.options.length,this.data.speedCheck?.id){let item=this.actor.find(this.data.speedCheck.id);if(!item){const gameItem=game.items.get(this.data.speedCheck.id);gameItem&&(item=this.actor.find(gameItem.name))}item&&("item"===item.type&&"skill"===item.value.data?.type&&(check.ref=item.value,check.name=item.value.name,check.type="skill",check.isSkill=!0,check.refSet=!0,check.score=item.value.value),"characteristic"===item.type&&(check.ref=item.value,check.name=item.value.label,check.type="characteristic",check.isCharacteristic=!0,check.refSet=!0,check.score=item.value.value),"attribute"===item.type&&(check.ref=item.value,check.name=item.value.label,check.type="attribute",check.isAttribute=!0,check.refSet=!0,check.score=item.value.value))}else if(this.data.speedCheck?.name){const item=this.actor.find(this.data.speedCheck.name);item&&("item"===item.type&&"skill"===item.value.data?.type&&(check.ref=item.value,check.name=item.value.name,check.type="skill",check.isSkill=!0,check.refSet=!0,check.score=item.value.value),"characteristic"===item.type&&(check.ref=item.value,check.name=item.value.label,check.type="characteristic",check.isCharacteristic=!0,check.refSet=!0,check.score=item.value.value),"attribute"===item.type&&(check.ref=item.value,check.name=item.value.label,check.type="attribute",check.isAttribute=!0,check.refSet=!0,check.score=item.value.value))}}else if(this.data.speedCheck?.id){const item=game.items.get(this.data.speedCheck.id);item&&"skill"===item.data?.type&&(check.ref=item,check.name=item.name,check.type="skill",check.isSkill=!0,check.refSet=!1,check.score=item.base)}else this.data.speedCheck?.name&&this.data.speedCheck?.score&&(check.name=this.data.speedCheck.name,check.score=this.data.speedCheck.score,check.refSet=!1);return check.canBeRolled=!0,check.rolled||check.score||(check.cssClasses+=" invalid",check.canBeRolled=!1),check.isValid=check.rolled&&!isNaN(check.score),check}}function sortByRoleAndDex(a,b){return!a&&b?1:!b&&a?-1:a||b?b.chaser&&!a.chaser?1:a.chaser&&!b.chaser?-1:a.dex-b.dex:0}class ChaseObstacleCard extends EnhancedChatCard{static get defaultOptions(){const options=foundry.utils.mergeObject(super.defaultOptions,{template:"systems/CoC7/templates/chat/cards/chase-obstacle.html",GMUpdate:!0});return options.classes.push("obstacle-card"),options}async getData(){const data=await super.getData();if(data.status=[],data.strings={},data.displayActorOnCard=game.settings.get("CoC7","displayActorOnCard"),data.status.push({name:game.i18n.localize("CoC7.ActionCost")+` :${this.data.totalActionCost}`}),data.card.breakableObstacle=data.data.obstacle?.barrier&&data.data.obstacle.hasHitPoints,data.card.validCheck=!1,data.data.states?.obstacleDefined&&(data.data.obstacle.hazard||data.data.obstacle.barrier&&!data.data.obstacle.hasHitPoints)&&(data.data.states.tryToNegotiate=!0,data.data.states.tryToBreak=!1,data.data.states.breakOrNegotiateDefined=!0),this.participant?.actor?(data.skill=this.participant.actor.find(data.data.obstacle.checkName),data.checkOptions=this.chase.getActorSkillsAndCharacteristics(this.data.participantUuid),data.skill?(data.validCheck=!0,data.validSkill=!0):data.data.obstacle.checkName&&data.data.checkThreshold&&(data.validCheck=!0)):(data.checkOptions=this.chase.allSkillsAndCharacteristics,data.dummyActor=!0,data.data.obstacle.checkName&&data.data.checkThreshold&&(data.validCheck=!0)),data.data.bonusDice||(data.data.bonusDice=0),data.data.bonusDice<2&&data.data.totalActionCost<data.data.movementAction&&(data.canTakeCautiousApproach=!0),data.customWeapon=!1,"0"===this.data.weaponChoice&&(data.customWeapon=!0),data.validCheck){let checkName,value;data.skill?(checkName=data.skill.value.name,value=data.skill.value.value):(checkName=data.data.obstacle.checkName,value=data.data.checkThreshold),data.strings.checkRollRequest=game.i18n.format("CoC7.AskRoll",{name:checkName,value}),0!==data.data.bonusDice&&(data.data.bonusDice>0?data.strings.checkRollRequest+=` (+${data.data.bonusDice})`:data.strings.checkRollRequest+=` (${data.data.bonusDice})`)}if(data.data.states?.obstacleDefined){if(data.strings.obstacleDefined=game.i18n.format("CoC7.FacingObstacle",{type:data.data.obstacle.barrier?game.i18n.localize("CoC7.ABarrier"):game.i18n.localize("CoC7.AHazard")}),data.data.obstacle.name&&(data.strings.obstacleDefined+=` (${data.data.obstacle.name})`),data.data.states.canAskRoll=!0,data.data.obstacle.barrier&&(data.status.push({name:game.i18n.localize("CoC7.Barrier")}),data.data.obstacle.hasHitPoints&&data.status.push({name:game.i18n.localize("CoC7.Breakable")})),data.data.obstacle.hazard&&data.status.push({name:game.i18n.localize("CoC7.Hazard")}),this.data.states.tryToNegotiate&&(data.validCheck?data.validSkill||data.status.push({name:game.i18n.localize("CoC7.NoValidSkill"),css:"warning"}):(data.status.push({name:game.i18n.localize("CoC7.NoValidCheck"),css:"error"}),data.strings.EnterValueTitle=game.i18n.format("CoC7.SkillSelectBase",{name:data.data.obstacle.checkName}),data.data.checkThreshold||(data.data.states.canAskRoll=!1))),this.data.states.tryToBreak){let damageStatus=game.i18n.localize("CoC7.BreakDown");this.data.objects?.obstacleDamageRoll?.total&&(damageStatus+=` : ${this.data.objects.obstacleDamageRoll.total}`),data.status.push({name:damageStatus}),this.data.states.obstacleDamageRolled&&(this.data.objects?.obstacleDamageRoll?.total<=0?data.strings.obstacleDamage=game.i18n.localize("CoC7.NoDamageDealt"):(data.inlineDamageRoll=createInlineRoll(this.data.objects.obstacleDamageRoll)?.outerHTML,data.strings.obstacleDamage=game.i18n.format("CoC7.DamageDealt",{value:data.inlineDamageRoll})))}if(this.data.states.tryToNegotiate&&data.status.push({name:game.i18n.localize("CoC7.Negotiate")}),this.data.totalCautiousApproach){const cautiousStatus={name:game.i18n.localize("CoC7.Cautious"),css:""};this.data.totalCautiousApproach>1?(cautiousStatus.css="strong",data.strings.cautiousApproachType=game.i18n.localize("CoC7.BeingVeryCautious")):data.strings.cautiousApproachType=game.i18n.localize("CoC7.BeingCautious"),this.data.flags.consumeBonusDice&&(cautiousStatus.css+=" consume"),data.status.push(cautiousStatus)}this.data.objects?.check&&(this.data.obstacle.hazard&&(this.data.movePlayer=!0),this.data.objects.check.passed?(void 0===this.data.movePlayer&&(this.data.movePlayer=!0),data.strings.obstaclePassed=game.i18n.localize("CoC7.ObstaclePassed"),this.data.objects.check.luckSpent&&(data.strings.obstaclePassed+=` (${game.i18n.localize("CoC7.GotLucky")})`),data.status.push({name:game.i18n.localize("CoC7.Success"),css:"success"})):this.data.objects.check.isFumble?(data.strings.checkFailed=game.i18n.localize("CoC7.ObstacleFumble"),data.status.push({name:game.i18n.localize("CoC7.Fumble"),css:"fumble"})):(data.strings.checkFailed=game.i18n.localize("CoC7.ObstacleFail"),data.status.push({name:game.i18n.localize("CoC7.Failure"),css:"failure"})))}if(this.data.states.playerActionDefined&&(this.data.obstacle.hazard?data.strings.playerIntentions=game.i18n.localize("CoC7.TryToNegotiateHazard"):this.data.obstacle.barrier&&(this.data.states.tryToNegotiate?data.strings.playerIntentions=game.i18n.localize("CoC7.TryToGetPastBarriers"):this.data.states.tryToBreak&&(data.strings.playerIntentions=game.i18n.localize("CoC7.TryToBreak")))),this.data.states.checkRolled&&(this.data.states.cardResolved?data.htmlCheck=await(this.data.objects.check.inlineCheck?.outerHTML):data.htmlCheck=await this.data.objects.check.getHtmlRoll()),this.data.states.cardResolved){data.playerDamageTaken=!1,data.obstalceDefinitionChanged=!1;this.listChanges().changes&&(data.obstalceDefinitionChanged=!0),this.data.obstacle.hasDamage&&this.data.objects?.check?.isFailure&&(data.playerDamageTaken=!0,data.inlineDamageTakenRoll=createInlineRoll(this.data.objects.failedDamageRoll)?.outerHTML,0===data.data.totalPlayerDamageTaken?data.strings.damageTaken=game.i18n.localize("CoC7.YouTakeNoDamage"):data.strings.damageTaken=game.i18n.format("CoC7.YouTakeSomeDamage",{amount:data.data.totalPlayerDamageTaken}),data.status.push({name:game.i18n.localize("CoC7.TotalDamage")+` :${data.data.totalPlayerDamageTaken}`})),this.data.obstacle.hasActionCost&&this.data.obstacle.hazard&&this.data.objects?.check?.isFailure&&(data.actionLost=!0,data.strings.actionLost=game.i18n.localize("CoC7.YouLostTime"),data.inlineActionLostRoll=createInlineRoll(this.data.objects.failedActionRoll)?.outerHTML),data.status.push({name:game.i18n.localize("CoC7.CardResolved")})}return this.data.states.closed&&(this.data.movePlayer?data.strings.finalOutcome=game.i18n.localize("CoC7.MoveToLocation"):data.strings.finalOutcome=game.i18n.localize("CoC7.DontMoveToLocation")),data}async GMUpdate(){if(game.user.isGM){if(this.data.states.cardResolved){if(this.data.objects?.failedDamageRoll?.total){const totalDamage=this.data.objects.failedDamageRoll.total,armorValue=this.data.flags.ignoreArmor?0:this.data.armor;CoC7Utilities.isFormula(armorValue)?this.data.armor=(await new Roll(armorValue).roll({async:!0})).total:isNaN(Number(armorValue))||(this.data.armor=Number(armorValue)),void 0===this.data.totalPlayerDamageTaken&&(this.data.totalPlayerDamageTaken=totalDamage-this.data.armor,this.data.totalPlayerDamageTaken<0&&(this.data.totalPlayerDamageTaken=0))}void 0===this.data.reflectObstaleChanges&&(this.data.reflectObstaleChanges=!0),void 0===this.data.movePlayer&&(this.data.movePlayer=(this.data.states.tryToNegotiate||this.data.obstacle.hazard)&&!this.data.states.failedConsequencesRolled),this.data.obstacle.barrier&&this.data.obstacle.hasHitPoints&&this.data.objects?.obstacleDamageRoll?.total&&(void 0===this.data.totalObstacleDamage&&(this.data.totalObstacleDamage=this.data.objects.obstacleDamageRoll.total),void 0===this.data.flags.obstacleDestoyed&&(this.data.flags.obstacleDestoyed=this.data.obstacle.HitPoints-this.data.totalObstacleDamage<=0))}this.data.states.closed&&(this.data.movementActionArray=foundry.utils.duplicate(this.participant.movementActionArray),this.data.EEC_ACTION={detachData:!0})}else console.error("CoC7: GMUpdate called from non GM user")}async localCompute(){}async assignObjects(){this.data.objects?.check&&"Object"===this.data.objects.check?.constructor?.name&&(this.data.objects.check=CoC7Check.fromData(this.data.objects.check)),this.data.objects?.obstacleDamageRoll&&"Object"===this.data.objects.obstacleDamageRoll?.constructor?.name&&(this.data.objects.obstacleDamageRoll=Roll.fromData(this.data.objects.obstacleDamageRoll)),this.data.objects?.failedDamageRoll&&"Object"===this.data.objects.failedDamageRoll?.constructor?.name&&(this.data.objects.failedDamageRoll=Roll.fromData(this.data.objects.failedDamageRoll)),this.data.objects?.failedActionRoll&&"Object"===this.data.objects.failedActionRoll?.constructor?.name&&(this.data.objects.failedActionRoll=Roll.fromData(this.data.objects.failedActionRoll))}async initialize(){this.chase&&void 0!==this.chase.activeParticipantData?.uuid&&(void 0===this.data&&(this.data={}),void 0===this.data.states&&(this.data.states={}),this.data.obstacle=this.location?.obstacleDetails,this.data.participantUuid=this.chase.activeParticipantData.uuid,this.participantData?.bonusDice>0&&(this.data.bonusDice=this.participantData.bonusDice,this.data.flags.consumeBonusDice=!0,this.data.flags.hasBonusDice=this.participant.hasBonusDice),this.data.movementActionArray=foundry.utils.duplicate(this.participant.movementActionArray),this.data.movementAction=this.participant.currentMovementActions,this.data.totalActionCost=0)}get participant(){if(this.participantData)return new _participant(this.participantData)}get participantData(){if(this.chase&&this.data.participantUuid)return this.chase.getParticipantData(this.data.participantUuid)}get location(){if(this.chase)return this.chase.getLocationData(this.data.locationUuid)}get obstacle(){if(this.location)return this.location.obstacleDetails}get chase(){if(this.data.chaseUuid)return this._chase||(this._chase=CoC7Utilities.SfromUuid(this.data.chaseUuid)),this._chase}get roll(){let rollData;if(this.participant.actor&&this.data.obstacle.checkName){const actorSkill=this.participant.actor.find(this.data.obstacle.checkName);rollData=void 0!==actorSkill?actorSkill:{type:"value",value:{name:this.data.obstacle.checkName,threshold:this.data.checkThreshold}},rollData.actor={actorKey:this.participant.actor.id}}else this.data.obstacle.checkName&&this.data.checkThreshold&&(rollData={type:"value",value:{name:this.data.obstacle.checkName,threshold:this.data.checkThreshold},actor:{name:this.participant.name}});return rollData&&(rollData.diceModifier=this.data?.bonusDice||0,rollData.difficulty=CoC7Check.difficultyLevel.regular,rollData.denyPush=!0),rollData||void 0}get validFailedRolls(){if(!this.data.objects?.check?.isFailure)return!1;if(this.data.obstacle.hasDamage){const damage="number"==typeof this.data.obstacle.failedCheckDamage?`${this.data.obstacle.failedCheckDamage}`:this.data.obstacle.failedCheckDamage;if(!this.data.obstacle.failedCheckDamage)return!1;if(this.data.obstacle.failedCheckDamage&&!Roll.validate(damage))return!1}if(this.data.obstacle.hazard&&this.data.obstacle.hasActionCost){const actionCost="number"==typeof this.data.obstacle.failedActionCost?`${this.data.obstacle.failedActionCost}`:this.data.obstacle.failedActionCost;if(!this.data.obstacle.failedActionCost)return!1;if(this.data.obstacle.failedActionCost&&!Roll.validate(actionCost))return!1}return!0}get weaponsOptions(){const weapons=[];if(this.participant.actor?.itemTypes?.weapon?.forEach((w=>{let formula=w.data.data.range.normal.damage,db=this.participant.actor.db;db=null===db||0===Number(db)?"":`${db}`,db&&!db.startsWith("-")&&(db="+"+db),w.data.data.properties.addb&&(formula+=db),w.data.data.properties.ahbd&&(formula=formula+db+"/2"),weapons.push({name:`${w.data.name} (${formula})`,damage:formula,uuid:w.uuid})})),weapons.sort(CoC7Utilities.sortByNameKey),!weapons.find((w=>w.name.toUpperCase().startsWith(game.i18n.localize("CoC7.UnarmedWeaponName")?.toUpperCase())))){let db="";this.participant.actor&&(db=this.participant.actor.db,db&&!db.startsWith("-")&&(db="+"+db),null!==db&&0!==Number(db)||(db="")),weapons.unshift({name:`${game.i18n.localize("CoC7.UnarmedWeaponName")} (1D3${db})`,damage:`1D3${db}`,uuid:"unarmed"})}return weapons.push({name:game.i18n.localize("CoC7.Other"),damage:this.data?.customWeaponDamage||null,uuid:0}),weapons}get usedWeapon(){if(!this.data?.weaponChoice){if(!this.weaponsOptions)return;this.data||(this.data={}),this.data.weaponChoice=this.weaponsOptions[0].uuid}if(this.data.weaponChoice){const weapon=this.weaponsOptions.find((e=>e.uuid===this.data.weaponChoice));if(weapon)return weapon}}get inflictedDamageFormula(){if(this.usedWeapon){const weapon=this.usedWeapon;return weapon&&weapon.damage&&Roll.validate(weapon.damage)?weapon.damage:void 0}}get validObstacleDamage(){return!!(this.data.obstacle.hasHitPoints&&!isNaN(Number(this.data.obstacle.HitPoints))&&Number(this.data.obstacle.HitPoints)>0&&this.inflictedDamageFormula)}get strings(){const strings={};return strings.damageRollRequest=this.usedWeapon.name,strings}async validateCard(options){let loactionChanged,participantChaged=!1;const obstacleUpdate={obstacleDetails:{}},participantUpdate={};this.data.flags.obstacleDestoyed&&(loactionChanged=!0,obstacleUpdate.obstacle=!1,obstacleUpdate.obstacleDetails.hazard=!1,obstacleUpdate.obstacleDetails.barrier=!1);const diff=this.listChanges();if(diff.changes&&this.data.reflectObstaleChanges)for(const[key,value]of Object.entries(diff.obstacle))"type"!==key&&(obstacleUpdate.obstacleDetails[value.key]=value.new,loactionChanged=!0);if(this.data.totalObstacleDamage>0&&this.data.obstacle.hasHitPoints){let remainingHp=this.data.obstacle.HitPoints;remainingHp-=this.data.totalObstacleDamage,remainingHp<0&&(remainingHp=0),this.obstacle.HitPoints!==remainingHp&&(obstacleUpdate.obstacleDetails.HitPoints=remainingHp,this.data.obstacle.HitPoints=remainingHp,loactionChanged=!0)}if(this.data.totalPlayerDamageTaken>0&&(participantChaged=!0,this.participant.actor?await this.participant.actor.dealDamage(this.data.totalPlayerDamageTaken,{ignoreArmor:!0}):(participantUpdate.hp=this.participantData.hp,participantUpdate.hp-=this.data.totalPlayerDamageTaken,participantUpdate.hp<0&&(participantUpdate.hp=0))),this.data.totalActionCost>0&&(participantChaged=!0,participantUpdate.currentMovementActions=this.participantData.currentMovementActions,participantUpdate.currentMovementActions-=this.data.totalActionCost),void 0===this.data.flags.consumeBonusDice&&(this.data.flags.consumeBonusDice=!0),this.data.flags.consumeBonusDice?(participantChaged=!0,participantUpdate.bonusDice=0):isNaN(this.data.bonusDice)||this.data.bonusDice===this.participant.bonusDice||(participantUpdate.bonusDice=this.data.bonusDice),this.data.movePlayer){let targetLocation;targetLocation=this.data.forward?this.location:this.chase.getLocationShift(this.location.uuid,{skip:-1}),targetLocation.uuid&&await this.chase.moveParticipantToLocation(this.participantData.uuid,targetLocation.uuid,{scrollToLocation:!0,activateLocation:!1,render:!1})}return loactionChanged&&await this.chase.updateLocation(this.location.uuid,obstacleUpdate,{render:!1}),participantChaged&&await this.chase.updateParticipant(this.participantData.uuid,participantUpdate,{render:!1}),this.data.states.closed=!0,await this.chase.activateNextParticipantTurn(),!0}async defineObstacle(options){return this.data.states||(this.data.states={}),this.data.states.obstacleDefined=!0,!0}async tryToNegotiateObstacle(options){return this.data.states.breakOrNegotiateDefined=!0,this.data.states.tryToNegotiate=!0,this.data.states.tryToBreak=!1,!0}async tryToBreakDownObstacle(options){return this.data.states.breakOrNegotiateDefined=!0,this.data.states.tryToNegotiate=!1,this.data.states.tryToBreak=!0,!0}async cancelObstacleDefinition(options){return this.data.states.obstacleDefined=!1,this.data.states.breakOrNegotiateDefined=!1,this.data.states.tryToNegotiate=!1,this.data.states.tryToBreak=!1,!0}async cancelBreakOrPassChoice(options){return this.data.obstacle.hasHitPoints?(this.data.states.breakOrNegotiateDefined=!1,this.data.states.tryToNegotiate=!1,this.data.states.tryToBreak=!1,!0):this.cancelObstacleDefinition()}async requestRoll(options){return this.data.states.playerActionDefined=!0,!0}async takeCautiousApproach(options){return this.data.totalCautiousApproach||(this.data.totalCautiousApproach=0),this.data.totalCautiousApproach+=1,this.data.bonusDice+=1,this.data.totalActionCost+=1,this.data.flags.consumeBonusDice||(this.data.flags.consumeBonusDice=!0),this.data.flags.hasBonusDice||(this.data.flags.hasBonusDice=!0),this.data.movementAction<=this.data.totalActionCost&&(this.data.flags.consumeBonusDice=!1,this.data.states.cardResolved=!0,this.data.movePlayer=!1),!0}async rollSkillCheck(options){const target=options.event.currentTarget;if(!target.classList.contains("disabled")){if(target.classList.toggle("disabled"),this.roll)return this.data.objects||(this.data.objects={}),this.data.objects.check=CoC7Check.createFromActorRollData(this.roll),!!this.data.objects.check&&(this.data.objects.check.denyPush=!0,await this.data.objects.check._perform({forceDSN:!0}),this.data.totalActionCost+=1,this.data.states.checkRolled=!0,target.classList.toggle("disabled"),this.data.objects.check.passed?(this.data.movePlayer=!0,this.data.states.cardResolved=!0):void 0===this.data.armor&&this.participant.actor&&(this.data.armor=this.participant.actor.data.data.attribs.armor.value||0),!0);ui.notifications.error(game.i18n.localize("CoC7.NothingToRoll"))}}async useLuck(options){return await CoC7Check.alter(this.data.objects.check,"useLuck",{target:options.event.currentTarget,update:!1}),this.data.objects.check.passed&&(this.data.states.cardResolved=!0,this.data.movePlayer=!0,this.data.totalActionCost+=1),!0}async rollFailConsequences(options){if(this.data.objects||(this.data.objects={}),this.data.obstacle.hasDamage&&this.data.objects.check?.isFailure){const damage="number"==typeof this.data.obstacle.failedCheckDamage?`${this.data.obstacle.failedCheckDamage}`:this.data.obstacle.failedCheckDamage;this.data.objects.failedDamageRoll=new Roll(damage),await this.data.objects.failedDamageRoll.evaluate({async:!0})}if(this.data.obstacle.hazard&&this.data.obstacle.hasActionCost&&this.data.objects.check?.isFailure){const actionCost="number"==typeof this.data.obstacle.failedActionCost?`${this.data.obstacle.failedActionCost}`:this.data.obstacle.failedActionCost;this.data.objects.failedActionRoll=new Roll(actionCost),await this.data.objects.failedActionRoll.evaluate({async:!0}),this.data.totalActionCost+=this.data.objects.failedActionRoll.total-1}return this.data.states.failedConsequencesRolled=!0,this.data.states.cardResolved=!0,!0}async askRollObstacleDamage(options){return this.data.states.playerActionDefined=!0,!0}async rollObstacleDamage(options){return this.data.objects||(this.data.objects={}),this.data.objects.obstacleDamageRoll=new Roll(this.usedWeapon?.damage),await this.data.objects.obstacleDamageRoll.evaluate({async:!0}),await CoC7Dice.showRollDice3d(this.data.objects.obstacleDamageRoll),this.data.states.obstacleDamageRolled=!0,this.data.totalActionCost+=1,this.data.states.cardResolved=!0,!0}listChanges(validate=!1){const diff={obstacle:{},player:{},changes:!1},names={barrier:game.i18n.localize("CoC7.Type"),hazard:game.i18n.localize("CoC7.Type"),hasHitPoints:game.i18n.localize("CoC7.Breakable"),HitPoints:game.i18n.localize("CoC7.HitPoints"),hasActionCost:game.i18n.localize("CoC7.ActionCost"),failedActionCost:game.i18n.localize("CoC7.ActionCost"),hasDamage:game.i18n.localize("CoC7.FightBack"),failedCheckDamage:game.i18n.localize("CoC7.WeaponDamage"),checkName:game.i18n.localize("CoC7.Check"),name:game.i18n.localize("CoC7.Name")};validate&&!this.data.validation&&(this.data.validation={});const newObstacle=foundry.utils.diffObject(this.obstacle,this.data.obstacle);for(const[key]of Object.entries(newObstacle))""===newObstacle[key]&&null===this.obstacle[key]||!isNaN(Number(newObstacle[key]))&&Number(newObstacle[key])===this.obstacle[key]||(diff.changes=!0,diff.obstacle[key]={old:this.obstacle[key],new:newObstacle[key],name:names[key],key},validate&&(this.data.validation[key]=!0));return diff}}class CoC7Chase extends CoC7Item{constructor(data,context){void 0===data.img&&(data.img="systems/CoC7/assets/icons/running-solid.svg"),super(data,context),this.context=context}get participants(){const pList=[],preys=this.system.participants.filter((p=>!p.chaser)).map((p=>new _participant(p))),chasers=this.system.participants.filter((p=>p.chaser)).map((p=>new _participant(p)));return this.system.participants.forEach((p=>{p.assist=[],p.chaser?p.assist=chasers.filter((c=>c.uuid!==p.uuid&&!c.hasMaxBonusDice)).map((c=>({uuid:c.uuid,name:c.name}))):p.assist=preys.filter((c=>c.uuid!==p.uuid&&!c.hasMaxBonusDice)).map((c=>({uuid:c.uuid,name:c.name})));const particpant=new _participant(p);pList.push(particpant)})),pList}get participantsObject(){const participants=this.participants;return participants.forEach((p=>{p.location=this.getParticipantLocation(p.uuid)})),participants}get activeParticipantData(){return this.system.participants.find((p=>p.active))}get activeActor(){const p=this.activeParticipantData;if(p)return p.docUuid?CoC7Utilities.getActorFromKey(p.docUuid):void 0}get participantsByAdjustedMov(){const pList=this.actualParticipants.sort(((a,b)=>a.adjustedMov-b.adjustedMov));return pList.forEach((p=>{p.location=this.getParticipantLocation(p.uuid)})),pList}get participantsByInitiative(){const pList=this.actualParticipants.sort(((a,b)=>b.initiative-a.initiative));return pList.forEach((p=>{p.location=this.getParticipantLocation(p.uuid)})),pList}get preys(){return this.participants.filter((p=>!p.isChaser&&p.isValid))||[]}get chasers(){return this.participants.filter((p=>p.isChaser&&p.isValid))||[]}get allHaveValidMov(){return this.participants.every((e=>e.hasValidMov))}get allHaveSpeedRoll(){return this.participants.every((p=>p.speedCheck?.rolled))}getParticipantLocation(participantUuid){if(!this.system.locations?.list?.length)return;if(!this.started)return;const location=this.locations.find((l=>{const lp=l.participants?.find((p=>participantUuid===p.uuid));return!!lp}));return location||void 0}getParticipantData(participantUuid){const participant=this.system.participants.find((p=>participantUuid===p.uuid));if(participant)return foundry.utils.duplicate(participant)}getParticipant(participantUuid){const participantData=this.getParticipantData(participantUuid);if(participantData)return new _participant(participantData)}get nextActiveParticipant(){if(this.started)return this.participantsByInitiative.find((p=>p.data.currentMovementActions>0))}get slowestPrey(){const preys=this.participants.sort(((a,b)=>a.adjustedMov-b.adjustedMov))?.filter((p=>p.isPrey));if(preys.length>0)return preys[0]}get fastestChaser(){const chasers=this.participants.sort(((a,b)=>a.adjustedMov-b.adjustedMov))?.filter((p=>p.isChaser));if(chasers.length>0)return chasers.slice(-1).pop()}get actualParticipants(){const slowestPrey=this.slowestPrey,fastestChaser=this.fastestChaser;let pList=this.participants;return!this.system.includeLatecomers&&slowestPrey&&(pList=pList.filter((p=>p.isPrey||p.isChaser&&p.adjustedMov>=slowestPrey.adjustedMov))),!this.system.includeEscaped&&fastestChaser&&(pList=pList.filter((p=>p.isChaser||p.isPrey&&p.adjustedMov<=fastestChaser.adjustedMov))),pList}get slowestParticipant(){const pList=this.participantsByAdjustedMov;if(pList.length>0)return pList[0]}async updateParticipants(list,{render=!0}={}){const participantsData=this.cleanParticipantList(list);return await this.update({"system.participants":participantsData},{render})}async updateParticipant(particiantUuid,updateData,{render=!0}={}){const participants=foundry.utils.duplicate(this.system.participants),update=foundry.utils.duplicate(updateData),participantIndex=participants.findIndex((p=>particiantUuid===p.uuid));-1!==participantIndex&&(update.uuid&&delete update.uuid,foundry.utils.mergeObject(participants[participantIndex],update,{overwrite:!0}),await this.updateParticipants(participants,{render}))}cleanParticipantList(list){const participantsData=list||foundry.utils.duplicate(this.system.participants);return list.forEach((p=>{let data;data="_participant"===p.constructor.name?p.data:p;const index=this.findIndex(participantsData,data.uuid);-1===index?(participantsData.push(data),ui.notifications.warn(game.i18n.localize("CoC7.ParticipantDataMissing"))):participantsData[index]=data})),participantsData}async assistParticipant(assistantUuid,beneficiaryUuid,{useMovementActions=!0,render=!0}={}){const assistant=this.getParticipant(assistantUuid),beneficiary=this.getParticipant(beneficiaryUuid),participantsData=foundry.utils.duplicate(this.system.participants),assistantIndex=participantsData.findIndex((p=>assistantUuid===p.uuid)),beneficiaryIndex=participantsData.findIndex((p=>beneficiaryUuid===p.uuid));if(assistant&&beneficiary)if(beneficiary.hasMaxBonusDice)ui.notifications.error(game.i18n.format("CoC7.ErrorBeneficiaryAtMaxBonus",{name:beneficiary.name}));else{if(useMovementActions){if(assistant.currentMovementActions<1)return void ui.notifications.error(game.i18n.format("CoC7.ParticipantNotEnoughMovement",{assistantUuid,actions:assistant.currentMovementActions}));assistant.alterMovementActions(-1),participantsData[assistantIndex]=foundry.utils.duplicate(assistant.data)}beneficiary.addBonusDice(),participantsData[beneficiaryIndex]=foundry.utils.duplicate(beneficiary.data),await this.update({"system.participants":participantsData},{render})}else ui.notifications.error(game.i18n.localize("CoC7.ParticipantNotFound"))}async toggleBonusDice(participantUuid,diceNumber,{render=!0}={}){const participant=this.getParticipant(participantUuid);if(!participant)return void ui.notifications.error(game.i18n.format("CoC7.ParticipantUuidNotFound",{participantUuid}));const participantsData=foundry.utils.duplicate(this.system.participants),participantIndex=participantsData.findIndex((p=>participantUuid===p.uuid));participant.bonusDice>=diceNumber?participant.removeBonusDice():participant.addBonusDice(),participantsData[participantIndex]=foundry.utils.duplicate(participant.data),await this.update({"system.participants":participantsData},{render})}async cautiousApproach(participantUuid,{useMovementActions=!0,render=!0}={}){const participant=this.getParticipant(participantUuid);if(!participant)return void ui.notifications.error(game.i18n.format("CoC7.ParticipantUuidNotFound",{participantUuid}));const participantsData=foundry.utils.duplicate(this.system.participants),participantIndex=participantsData.findIndex((p=>participantUuid===p.uuid));if(participant.hasMaxBonusDice)ui.notifications.error(game.i18n.format("CoC7.ErrorParticipantAtMaxBonus",{participantUuid}));else{if(useMovementActions){if(participant.currentMovementActions<1)return void ui.notifications.error(game.i18n.format("CoC7.ParticipantNotEnoughMovement",{assistantUuid:participantUuid,actions:participant.currentMovementActions}));participant.alterMovementActions(-1)}participant.addBonusDice(),participantsData[participantIndex]=foundry.utils.duplicate(participant.data),await this.update({"system.participants":participantsData},{render})}}async alterParticipantMovementAction(participantUuid,count,{render=!0}={}){const participant=this.getParticipant(participantUuid);if(!participant)return void ui.notifications.error(game.i18n.format("CoC7.ParticipantUuidNotFound",{participantUuid}));const participantsData=foundry.utils.duplicate(this.system.participants),participantIndex=participantsData.findIndex((p=>participantUuid===p.uuid));participant.alterMovementActions(count),participantsData[participantIndex]=foundry.utils.duplicate(participant.data),await this.update({"system.participants":participantsData},{render})}async activateNextParticipantTurn({scrollToLocation=!0,activateLocation=!0,render=!0,html=null}={}){const activeParticipant=this.nextActiveParticipant,options={scrollToLocation,activateLocation,render,html};return activeParticipant?this.activateParticipant(activeParticipant.uuid,options):this.activateParticipant(void 0,options)}async activateParticipant(participantUuid,{scrollToLocation=!0,activateLocation=!0,render=!0,html=null}={}){const dataUpdate=this.getActivateParticipantUpdateData(participantUuid,{scrollToLocation,activeLocation:activateLocation,html});await this.update(dataUpdate,{render})}getActivateParticipantUpdateData(participantUuid,{scrollToLocation=!0,activateLocation=!0,html=null}={}){const pUuid=participantUuid,participantsDataUpdate={},participants=this.system.participants?foundry.utils.duplicate(this.system.participants):[];participants.forEach((p=>{delete p.active,pUuid&&pUuid===p.uuid&&(p.active=!0)})),participantsDataUpdate["system.participants"]=participants;const participantLocation=this.getParticipantLocation(pUuid);let locationsDataUpdate=null;return participantLocation?activateLocation?locationsDataUpdate=this.getActivateLocationUpdateData(participantLocation.uuid,{scrollToLocation,html}):scrollToLocation&&(locationsDataUpdate={},locationsDataUpdate["system.scroll.chaseTrack.from"]=this.chaseTrackCurrentScrollPosition,locationsDataUpdate["system.scroll.chaseTrack.to"]=this.getChaseTrackLocationScrollPosition(participantLocation.uuid,{html})):locationsDataUpdate=this.getActivateLocationUpdateData(void 0,{scrollToLocation}),locationsDataUpdate?foundry.utils.mergeObject(participantsDataUpdate,locationsDataUpdate):participantsDataUpdate}activeParticipantObstacleCheck(locationUuid,{moveParticipant=!0}={}){new ChaseObstacleCard({chaseUuid:this.uuid,locationUuid,moveParticipant,forward:locationUuid!==this.activeLocation.uuid}).toMessage()}async progressToNextRound({render=!0}={}){const participants=this.system.participants?foundry.utils.duplicate(this.system.participants):[];participants.forEach((p=>{p.currentMovementActions<p.movementAction&&(p.currentMovementActions+=p.movementAction,p.currentMovementActions>p.movementAction&&(p.currentMovementActions=p.movementAction))})),await this.updateParticipants(participants,{render:!1}),this.activateNextParticipantTurn({render})}async updateRoll(rollString){if(game.user.isGM){const roll=CoC7Check.fromRollString(rollString),participants=this.system.participants?foundry.utils.duplicate(this.system.participants):[],index=participants.findIndex((p=>p.rollUuid===roll.uuid));index>=0&&(participants[index].speedCheck.rollDataString=roll.JSONRollString,await this.update({"system.participants":participants}))}else{const data={data:rollString,type:"invoke",method:"updateRoll",item:this.uuid};game.socket.emit("system.CoC7",data)}}get locations(){const locations=this.started?this.system.locations.list?foundry.utils.duplicate(this.system.locations.list):[]:this.initTrack;return this.processLocations(locations),locations}getLocationData(locationUuid,{duplicateData=!0}={}){return(duplicateData?foundry.utils.duplicate(this.locations):this.locations).find((l=>locationUuid===l.uuid))}processLocations(locations){if(locations?.length){locations[0].first=!0;for(let index=0;index<locations.length;index++){const classes=[],location=locations[index];location.name||classes.push("empty"),location.active&&classes.push("active"),location.init&&!this.started&&classes.push("init"),location.cssClasses=classes.join(" ")}locations.length>1&&(locations[locations.length-1].last=!0),locations.forEach((l=>{if(l.participants&&l.participants.length){l.participants=l.participants.filter((p=>!(null===p)));for(let i=0;i<l.participants.length;i++){const elem=l.participants[i];let p;"string"==typeof elem||elem instanceof String?p=this.system.participants.find((p=>elem===p.uuid)):"_participant"===elem?.constructor?.name?(p=void 0,ui.notifications.warn(game.i18n.localize("CoC7.ParticipantAlreadyProcessed"))):p=void 0,void 0!==p?l.participants[i]=new _participant(p):console.error("Undefined paticipant while processing participants array")}l.participants.sort(sortByRoleAndDex)}}))}}get initTrack(){if(!this.system.locations.list||0===this.system.locations.list.length)return;const locations=[],init=this.startingLine;let locationsIndexStart,initIndexStart,locationsLength;if(locationsIndexStart=init.length<=0||this.system.startingIndex>=init.length?0:init.length-this.system.startingIndex,initIndexStart=this.system.startingIndex<=0||this.system.startingIndex<=init.length?0:this.system.startingIndex-init.length,locationsLength=0===locationsIndexStart?this.system.locations.list.length:this.system.locations.list.length+locationsIndexStart,0!==init.length&&this.system.startingIndex<0)for(let index=0;index<Math.abs(this.system.startingIndex);index++)init.push({uuid:this.generateNewUuid(),init:!0,participants:[]});const chaseLocations=foundry.utils.duplicate(this.system.locations);for(let index=0;index<locationsLength;index++){let location={};const participants=[];index>=locationsIndexStart&&index-locationsIndexStart<chaseLocations.list.length&&(location=foundry.utils.duplicate(chaseLocations.list[index-locationsIndexStart]),location.init=!1,location.participants?.forEach((p=>{null!=p&&participants.push(p)}))),index>=initIndexStart&&index-initIndexStart<init.length&&(foundry.utils.mergeObject(location,init[index-initIndexStart],{overwrite:!1}),init[index-initIndexStart].participants?.forEach((p=>{null!=p&&participants.push(p)})),location.participants=participants),location.first=!1,location.end=!1,locations.push(location)}return locations}get startingLine(){const preys=this.system.includeEscaped?this.preys:this.preys?.filter((p=>!p.data.escaped)),chasers=this.system.includeLatecomers?this.chasers:this.chasers?.filter((c=>!c.data.excluded)),chaseTrack=[],chasersMinMov=this.findMinMov(chasers),chasersMaxMov=this.findMaxMov(chasers),preysMinMov=this.findMinMov(preys),preysMaxMov=this.findMaxMov(preys);if(-1!==chasersMinMov&&-1!==chasersMaxMov){for(let mov=chasersMinMov;mov<=chasersMaxMov;mov++){const location={uuid:this.generateNewUuid(),init:!0,participants:[]};chasers.filter((p=>mov===p.adjustedMov)).sort(((a,b)=>a.dex-b.dex)).forEach((p=>location.participants.push(p.uuid))),chaseTrack.push(location)}for(let index=0;index<this.system.startingRange;index++)chaseTrack.push({uuid:this.generateNewUuid(),init:!0,participants:[]})}if(-1!==preysMinMov&&-1!==preysMaxMov)for(let mov=preysMinMov;mov<=preysMaxMov;mov++){const location={uuid:this.generateNewUuid(),init:!0,participants:[]};preys.filter((p=>mov===p.adjustedMov)).sort(((a,b)=>a.dex-b.dex)).forEach((p=>location.participants.push(p.uuid))),chaseTrack.push(location)}return chaseTrack}async updateLocationsList(list,{render=!0}={}){const updatedList=this.cleanLocationsList(list);await this.update({"system.locations.list":updatedList},{render})}async updateLocation(locationUuid,updateData,{render=!0}={}){const locations=foundry.utils.duplicate(this.system.locations.list),update=foundry.utils.duplicate(updateData),locationIndex=locations.findIndex((l=>locationUuid===l.uuid));-1!==locationIndex&&(update.uuid&&delete update.uuid,foundry.utils.mergeObject(locations[locationIndex],update,{overwrite:!0}),await this.updateLocationsList(locations,{render}))}cleanLocationsList(list){const updatedList=foundry.utils.duplicate(list),partipantsUuidArray=this.system.participants.map((p=>p.uuid));return updatedList.forEach((l=>{if(delete l.cssClasses,delete l.first,delete l.last,delete l.end,l.participants&&l.participants.length){for(let i=0;i<l.participants.length;i++)l.participants=l.participants.filter((p=>!(null===p))),l.participants[i].data?.uuid&&(l.participants[i]=l.participants[i].data.uuid);l.participants=l.participants.filter((uuid=>partipantsUuidArray.includes(uuid)))}})),updatedList}async insertLocation(insertAtUuid,{shift=0,locData={},render=!0}={}){const locations=foundry.utils.duplicate(this.system.locations.list);locations.forEach((l=>{delete l.active}));const locationIndex=locations.findIndex((l=>insertAtUuid===l.uuid));if(-1===locationIndex)return!1;const newLocationIndex=locationIndex+shift;if(newLocationIndex>locations.length)return!1;const newLocation=foundry.utils.duplicate(locData);return newLocation.uuid=this.generateNewUuid(),newLocation.init=locations[locationIndex].init,newLocation.active=!0,locations.splice(newLocationIndex,0,newLocation),await this.updateLocationsList(locations,{render})}async removeLocation(uuid,{render=!0}={}){const locations=foundry.utils.duplicate(this.system.locations.list),locationIndex=locations.findIndex((l=>uuid===l.uuid));if(locations.splice(locationIndex,1),locations.forEach((l=>{delete l.active})),locations.length>0){let index=locationIndex-1;index<0&&(index=0),locations[index].active=!0}return await this.updateLocationsList(locations,{render})}async activateLocation(locationUuid,{scrollToLocation=!0,render=!0}={}){const updateData=this.getActivateLocationUpdateData(locationUuid,{scrollToLocation});await this.update(updateData,{render})}getClearActiveLocationUpdateData({scrollToLocation=!0,html=null}={}){const updateData={},locations=this.system.locations.list?foundry.utils.duplicate(this.system.locations.list):[];return locations.forEach((l=>{delete l.active})),updateData["system.locations.list"]=this.cleanLocationsList(locations),scrollToLocation&&(updateData["system.scroll.chaseTrack.from"]=0,updateData["system.scroll.chaseTrack.to"]=-1),updateData}getActivateLocationUpdateData(locationUuid,{scrollToLocation=!0,html=null}={}){if(!locationUuid)return this.getClearActiveLocationUpdateData({scrollToLocation});const updateData={},locations=this.system.locations.list?foundry.utils.duplicate(this.system.locations.list):[];return locations.forEach((l=>{delete l.active,locationUuid===l.uuid&&(l.active=!0)})),updateData["system.locations.list"]=this.cleanLocationsList(locations),scrollToLocation&&(updateData["system.scroll.chaseTrack.from"]=this.chaseTrackCurrentScrollPosition,updateData["system.scroll.chaseTrack.to"]=this.getChaseTrackLocationScrollPosition(locationUuid,{html})),updateData}get activeLocation(){if(!this.locations)return;const location=this.locations.find((l=>l.active));if(!location)return;location.participants?.length&&(location.hasParticipant=!0);const actor=this.activeActor;if(actor){const test=actor.find(location.obstacleDetails?.checkName);test&&(location.activeActorHasSkill=!0,location.activeActorTest=test)}return location}get previousLocation(){if(!this.locations)return;const activeIndex=this.locations.findIndex((l=>l.active));if(-1===activeIndex)return;if(0===activeIndex)return;const location=this.locations[activeIndex-1],actor=this.activeActor;if(actor){const test=actor.find(location.obstacleDetails?.checkName);test&&(location.activeActorHasSkill=!0,location.activeActorTest=test)}return location}get nextLocation(){if(!this.locations)return;const activeIndex=this.locations.findIndex((l=>l.active));if(-1===activeIndex)return;if(activeIndex===this.locations.length-1)return;const location=this.locations[activeIndex+1],actor=this.activeActor;if(actor){const test=actor.find(location.obstacleDetails?.checkName);test&&(location.activeActorHasSkill=!0,location.activeActorTest=test)}return location}async locatorDropped(data){await this.setLocationCoordinates(data.locationUuid,data.x,data.y,data.scene)}async setLocationCoordinates(locationUuid,x,y,sceneId,{render=!0}={}){const locations=foundry.utils.duplicate(this.system.locations.list),locationIndex=locations.findIndex((l=>locationUuid===l.uuid));return locations[locationIndex].coordinates={x,y,scene:sceneId},await this.updateLocationsList(locations,{render})}async clearActiveLocationCoordinates({render=!0}={}){if(this.activeLocation)return await this.clearLocationCoordinates(this.activeLocation.uuid,{render})}async clearLocationCoordinates(locationUuid,{render=!0}={}){const locations=foundry.utils.duplicate(this.system.locations.list),locationIndex=locations.findIndex((l=>locationUuid===l.uuid));return delete locations[locationIndex].coordinates,await this.updateLocationsList(locations,{render})}async cutToTheChase(){if(this.allHaveSpeedRoll){if(this.actualParticipants?.length<2)ui.notifications.warn(game.i18n.localize("CoC7.NeedMin2Participants"));else if(this.allHaveValidMov){const participants=this.participants,minMov=this.findMinMov(this.actualParticipants);participants.forEach((p=>{p.calculateMovementActions(minMov),p.currentMovementActions=p.movementAction,p.bonusDice=0})),await this.updateParticipants(participants,{render:!1}),await this.updateLocationsList(this.locations,{render:!1}),await this.start()}}else ui.notifications.warn(game.i18n.localize("CoC7.NotAllHaveSpeedRoll"))}async restart(){const locations=this.locations.filter((l=>!l.init));for(let i=0;i<locations.length;i++)locations[i].participants&&(locations[i].participants=[]),locations[i].active&&delete locations[i].active;const participantsData=this.system.participants?foundry.utils.duplicate(this.system.participants):[];for(let i=0;i<participantsData.length;i++)participantsData[i].active&&delete participantsData[i].active;await this.setchaseTrackScroll(0,0,{render:!1}),await this.updateLocationsList(locations,{render:!1}),await this.updateParticipants(participantsData,{render:!1}),await this.stop()}getLocationShift(locationUuid,{skip=1}={}){const locations=foundry.utils.duplicate(this.system.locations.list),destinationIndex=locations.findIndex((l=>locationUuid===l.uuid))+skip;return 0===locations.length?null:destinationIndex>=locations.length?locations[locations.length-1]:destinationIndex<0?locations[0]:locations[destinationIndex]}async removeParticipant(participantUuid,{render=!0}={}){const p=this.getParticipant(participantUuid);await Dialog.confirm({title:game.i18n.localize("CoC7.RemoveParticipant"),content:`<p>${game.i18n.format("CoC7.RemoveParticipantHint",{name:p.name})}</p>`,yes:async()=>{const newParticipantsData=foundry.utils.duplicate(this.system.participants).filter((p=>participantUuid!==p.uuid)),locationsData=foundry.utils.duplicate(this.system.locations.list);locationsData.forEach((l=>{l.participants&&l.participants.length&&(l.participants=l.participants.filter((uuid=>participantUuid!==uuid)))})),await this.updateParticipants(newParticipantsData,{render:!1}),await this.updateLocationsList(locationsData,{render})}})}async addParticipant(participant,{render=!0,locationUuid=null,recalculateMovementActions=!0,update=!1}={}){const participantsData=this.system.participants?foundry.utils.duplicate(this.system.participants):[];if(participant.data.chaseUuid&&delete participant.data.chaseUuid,participant.data.locationUuid&&delete participant.data.locationUuid,participant.data.update&&delete participant.data.update,!participant.uuid){let unique=!1;for(;!unique;)participant.data.uuid=foundry.utils.randomID(16),unique=0===participantsData.filter((p=>p.uuid===participant.uuid)).length}if(update){participant.currentMovementActions>participant.movementAction&&(participant.currentMovementActions=participant.movementAction);const index=participantsData.findIndex((p=>p.uuid===participant.uuid));participantsData[index]=participant.data}else participantsData.push(participant.data);if(await this.updateParticipants(participantsData,{render:render&&!this.started&&!this.recalculateMovementActions}),recalculateMovementActions){const slowest=this.slowestParticipant?.adjustedMov,participants=this.participants;participants.forEach((p=>p.calculateMovementActions(slowest))),await this.updateParticipants(participants,{render:render&&!this.started})}if(this.started&&!participant.data.escaped&&!participant.data.excluded){const locationsData=this.system.locations.list?foundry.utils.duplicate(this.system.locations.list):[];0===locationsData.length&&ui.notifications.error(game.i18n.localize("CoC7.ErrorEmptyLocationsList"));let locationIndex=locationsData.findIndex((l=>locationUuid===l.uuid));-1===locationIndex&&(locationIndex=0),locationsData[locationIndex].participants||(locationsData[locationIndex].participants=[]),-1===locationsData[locationIndex].participants.findIndex((p=>p===participant.uuid))&&locationsData[locationIndex].participants.push(participant.uuid),await this.updateLocationsList(locationsData,{render})}}async editParticipant(participantUuid,{useMovementActions=!0,scrollToLocation=!0,activateLocation=!0,activateParticipant=!0,render=!0}={}){}async moveParticipant(participantUuid,locationMoved,{useMovementActions=!0,scrollToLocation=!0,activateLocation=!0,activateParticipant=!0,render=!0}={}){let modified=!1;const locations=foundry.utils.duplicate(this.system.locations.list),originIndex=locations.findIndex((l=>l.participants?.includes(participantUuid)));let destinationIndex=originIndex+locationMoved;destinationIndex>locations.length-1&&(destinationIndex=locations.length-1),destinationIndex<0&&(destinationIndex=0);const totalMove=destinationIndex-originIndex,participant=this.getParticipant(participantUuid),participantsData=foundry.utils.duplicate(this.system.participants),participantIndex=participantsData.findIndex((p=>participantUuid===p.uuid));if(useMovementActions){if(!participant)return void ui.notifications.error(game.i18n.format("CoC7.ParticipantUuidNotFound",{participantUuid:this.participantUuid}));if(participant.currentMovementActions<Math.abs(totalMove))return void ui.notifications.error(game.i18n.format("CoC7.ParticipantNotEnoughMovement",{assistantUuid:participantUuid,actions:participant.currentMovementActions}));participant.alterMovementActions(0-Math.abs(totalMove)),participantsData[participantIndex]=foundry.utils.duplicate(participant.data),await this.update({"system.participants":participantsData},{render:!1}),modified=!0}return 0!==totalMove&&(await this.moveParticipantToLocation(participantUuid,locations[destinationIndex].uuid,{render:!1}),modified=!0),activateParticipant&&(await this.activateParticipant(participantUuid,{scrollToLocation,activateLocation,render:!1}),modified=!0),activateLocation&&!activateParticipant&&(await this.activateLocation(locations[destinationIndex].uuid,{scrollToLocation,render:!1}),modified=!0),modified&&render&&await this.sheet.render(!0),totalMove}async moveParticipantToLocation(participantUuid,locationUuid,{scrollToLocation=!0,activateLocation=!0,animate=null,moveToken=!0,render=!0}={}){const locations=foundry.utils.duplicate(this.system.locations.list),destination=locations.find((l=>locationUuid===l.uuid));if(!destination)return void console.error(`Failed to move ${participantUuid}. Location ${locationUuid} unknown`);const origin=locations.find((l=>l.participants?.includes(participantUuid)));if(!origin)return void console.error(`Failed to find ${participantUuid} in locations`);if(destination.participants||(destination.participants=[]),destination.participants.includes(participantUuid))return;destination.participants.push(participantUuid);const oldParticipantsList=origin.participants.filter((p=>participantUuid!==p));if(origin.participants=oldParticipantsList,moveToken&&destination.coordinates){const participant=this.getParticipant(participantUuid);let particpantDocument=CoC7Utilities.getDocumentFromKey(participant?.data?.docUuid);if(particpantDocument&&!(particpantDocument instanceof TokenDocument||particpantDocument?.object instanceof Token)){const foundTokens=canvas.scene.tokens.filter((d=>d.actorLink&&d.actor?.id===particpantDocument.id));1===foundTokens.length&&(particpantDocument=foundTokens[0])}if(particpantDocument&&!(particpantDocument instanceof TokenDocument||particpantDocument?.object instanceof Token))console.warn("No token associated with this actor");else if(destination.coordinates.scene!==game.scenes.viewed.uuid&&console.warn("Caution the scene is not the active scene"),particpantDocument.parent?.uuid!==destination.coordinates.scene)ui.notifications.error(game.i18n.localize("CoC7.ErrorTokenNotOnScene"));else{const scene=CoC7Utilities.getDocumentFromKey(destination.coordinates.scene);let x=destination.coordinates.x;const y=destination.coordinates.y;let targetRect=new PIXI.Rectangle(x,y,particpantDocument.object.width,particpantDocument.object.height).normalize();const update=[];let foundFreeSpace=!1;for(;!foundFreeSpace;){const overlapingToken=scene.tokens.find((t=>t.id!==particpantDocument.id&&t.object.bounds.intersects(targetRect)));overlapingToken?(x=overlapingToken.object.bounds.right+1,targetRect=new PIXI.Rectangle(x,y,particpantDocument.object.width,particpantDocument.object.height).normalize()):foundFreeSpace=!0}update.push({_id:particpantDocument.id,x,y});const showTokenMovement="boolean"==typeof animate?animate:this.system.showTokenMovement;await particpantDocument.parent.updateEmbeddedDocuments("Token",update,{animate:showTokenMovement})}}await this.updateLocationsList(locations,{render})}async setchaseTrackScroll({from,to=-1,render=!0}={}){await this.update({"system.scroll.chaseTrack.from":void 0===from?this.chaseTrackCurrentScrollPosition:from,"system.scroll.chaseTrack.to":void 0===to?this.chaseTrackCurrentScrollPosition:to},{render})}get chaseTrackCurrentScrollPosition(){const html=this.sheet?._element;if(!html)return-1;const chaseTrack=html[0].querySelector(".chase-track");return chaseTrack?chaseTrack.scrollLeft:-1}get chaseTrackActiveLocationScrollPosition(){return this.activeLocation?this.getChaseTrackLocationScrollPosition(this.activeLocation.uuid):-1}getChaseTrackLocationScrollPosition(locationUuid,{html=null}){const htmlElement=html||this.sheet?._element;if(!htmlElement||!htmlElement[0])return-1;const chaseTrack=htmlElement[0].querySelector(".chase-track");if(!chaseTrack)return-1;const activeLocationElement=chaseTrack.querySelector(`.chase-location[data-uuid="${locationUuid}"]`);if(!activeLocationElement)return-1;const leftScroll=activeLocationElement.offsetLeft+activeLocationElement.clientWidth/2-chaseTrack.clientWidth/2;return leftScroll<0?0:Math.floor(leftScroll)}findMinMov(list){return list?.length?list.reduce(((prev,current)=>prev.adjustedMov<current.adjustedMov?prev:current)).adjustedMov:-1}findMaxMov(list){return list?.length?list.reduce(((prev,current)=>prev.adjustedMov>current.adjustedMov?prev:current)).adjustedMov:-1}findIndex(list,uuid){return list.findIndex((p=>p.uuid===uuid))}get started(){return this.getFlag("CoC7","started")}async start(){const remString=$(":root").css("font-size"),remSize=Number(remString.replace("px","")),pCount=this.actualParticipants.length,width=Math.max((11.2*pCount+3)*remSize,40*remSize);this.sheet._tabs[0].active="setup",this.sheet.position.width=width,await this.setFlag("CoC7","started",!0),await this.activateNextParticipantTurn()}async stop(){return this.unsetFlag("CoC7","started")}generateNewUuid(){return foundry.utils.randomID(16)}getActorSkillsAndCharacteristics(participantUuid){const participant=this.getParticipant(participantUuid);if(!participant.actor)return;const list=[];return CoCActor.getCharacteristicDefinition().forEach((c=>list.push(`${game.i18n.localize("CoC7.Characteristics")} (${c.shortName})`))),list.push(`${game.i18n.localize("CoC7.Attribute")} (${game.i18n.localize("CoC7.Luck")})`),list.push(`${game.i18n.localize("CoC7.Attribute")} (${game.i18n.localize("CoC7.SAN")})`),participant.actor.skills.forEach((s=>list.push(s.name))),list}get activeActorSkillsAndCharacteristics(){const particicpantData=this.activeParticipantData;if(particicpantData)return this.getActorSkillsAndCharacteristics(particicpantData.uuid)}get allSkillsAndCharacteristics(){const list=[];return CoCActor.getCharacteristicDefinition().forEach((c=>list.push(`${game.i18n.localize("CoC7.Characteristics")} (${c.shortName})`))),list.push(`${game.i18n.localize("CoC7.Attribute")} (${game.i18n.localize("CoC7.Luck")})`),list.push(`${game.i18n.localize("CoC7.Attribute")} (${game.i18n.localize("CoC7.SAN")})`),game.CoC7.skillList?.forEach((s=>{list.includes(s.name)||s.name.toLowerCase().includes(`(${game.i18n.localize("CoC7.AnySpecName")})`.toLowerCase())||list.push(s.name)})),this.participants.forEach((p=>{p.actor&&p.actor.skills.forEach((s=>{list.includes(s.name)||list.push(s.name)}))})),list.sort(Intl.Collator().compare)}get allSkillsAndCharacteristicsShort(){const list=[];return CoCActor.getCharacteristicDefinition().forEach((c=>list.push(`${c.label}`))),list.push(`${game.i18n.localize("CoC7.Luck")}`),list.push(`${game.i18n.localize("CoC7.SAN")}`),game.CoC7.skillList?.forEach((s=>{list.includes(s.name)||s.name.toLowerCase().includes(`(${game.i18n.localize("CoC7.AnySpecName")})`.toLowerCase())||list.push(s.name)})),this.participants.forEach((p=>{p.actor&&p.actor.skills.forEach((s=>{list.includes(s.name)||list.push(s.name)}))})),list.sort(Intl.Collator().compare)}}class CoC7Skill extends CoC7Item{constructor(data,context){if(void 0===data.system?.skillName){const skill=CoC7Skill.guessNameParts(data.name),{name,skillName,specialization,...newProperties}=skill;data.name=name,data.system||={};const properties={...data.system.properties,...newProperties};data.system={...data.system,skillName,specialization,properties}}super(data,context)}static guessNameParts(skillName){const output={combat:!1,fighting:!1,firearm:!1,name:skillName,skillName,special:!1,specialization:""},match=skillName.match(/^(.+)\s*\(([^)]+)\)$/);if(match){output.skillName=match[2].trim(),output.special=!0;const specialization=match[1].trim();output.specialization=specialization,output.name=specialization+" ("+output.skillName+")",output.fighting=specialization===game.i18n.localize("CoC7.FightingSpecializationName"),output.firearm=specialization===game.i18n.localize("CoC7.FirearmSpecializationName"),output.ranged=specialization===game.i18n.localize("CoC7.RangedSpecializationName"),output.combat=output.fighting||output.firearm||output.ranged}return output}get hasActiveEffects(){return this.activeEffects.length>0}get activeEffects(){if(this.parent&&this.parent.effects){const effectKeyFull=`skill.${this.name}`.toLowerCase(),effectKeyShort=`skill.${this.system.skillName}`.toLowerCase();let changes=this.parent.effects.reduce(((changes,e)=>e.disabled||e.isSuppressed?changes:changes.concat(e.data.changes.map((c=>((c=foundry.utils.duplicate(c)).effect=e,c.priority=c.priority??10*c.mode,c))))),[]);return changes.sort(((a,b)=>a.priority-b.priority)),changes=changes.filter((e=>e.key.toLowerCase()===effectKeyShort||e.key.toLowerCase()===effectKeyFull)),changes}return[]}get itemIdentifier(){return this.name}get rawValue(){let value=0;return"character"===this.actor.type?(value=this.base,value+=this.system.adjustments?.personal?parseInt(this.system.adjustments?.personal):0,value+=this.system.adjustments?.occupation?parseInt(this.system.adjustments?.occupation):0,value+=this.system.adjustments?.experience?parseInt(this.system.adjustments?.experience):0,game.settings.get("CoC7","pulpRuleArchetype")&&this.system.adjustments?.archetype&&(value+=parseInt(this.system.adjustments?.archetype))):value=parseInt(this.system.value),isNaN(value)?null:value}get value(){const value=this.parent?.system.skills?.[`${this.itemIdentifier}`]?.value;return value||this.rawValue}async updateValue(value){if("character"===this.actor.type){const delta=parseInt(value)-this.rawValue,exp=(this.system.adjustments?.experience?parseInt(this.system.adjustments.experience):0)+delta;await this.update({"system.adjustments.experience":exp>0?exp:0})}else await this.update({"system.value":value})}async increaseExperience(x){if("skill"!==this.type)return null;if("character"===this.actor.type){const exp=(this.system.adjustments?.experience?parseInt(this.system.adjustments.experience):0)+parseInt(x);await this.update({"system.adjustments.experience":exp>0?exp:0})}}}class CoC7Vehicle extends CoCActor{constructor(data,context){void 0===data.img&&(data.img="systems/CoC7/assets/icons/jeep.svg"),super(data,context)}get rawBuild(){return this.build}get build(){const build=parseInt(this.system.attribs.build.value);return isNaN(build)?null:build}get hp(){if(null===this.system.attribs.build.current||void 0===this.system.attribs.build.current||""===this.system.attribs.build.current)return this.build;if(this.system.attribs.build.current>this.system.attribs.build.value)return this.build;const hp=parseInt(this.system.attribs.build.current);return isNaN(hp)?null:hp}get hpMax(){return this.build}get rawHpMax(){return this.build}async setHp(value){return value>this.build&&(value=this.build),await this.update({"system.attribs.build.current":value})}get rawDb(){return this.db}get db(){const db=parseInt(this.system.attribs.db?.value);return isNaN(db)?null:db}get rawMov(){return this.mov}get mov(){const mov=parseInt(this.system.attribs.mov?.value);return isNaN(mov)?null:mov}get mpMax(){return parseInt(this.system.attribs?.mp?.max)||0}get rawMpMax(){return this.mpMax}get sanMax(){return null}get rawSanMax(){return null}}class CoC7DecaderDie extends Die{constructor(termData){termData.faces=10,super(termData)}get total(){const total=super.total;return 10===total?0:10*total}static get DENOMINATION(){return"t"}}class CoC7DecaderDieOther extends CoC7DecaderDie{static get DENOMINATION(){return"o"}}const SETTINGS={pulpRules:{name:"",hint:"",scope:"world",config:!1,default:!1,type:Boolean},initiativeRule:{name:"SETTINGS.InitiativeRule",hint:"SETTINGS.InitiativeRuleHint",scope:"world",config:!1,default:"basic",type:String,choices:{basic:"SETTINGS.InitiativeRuleBasic",optional:"SETTINGS.InitiativeRuleOptional"},onChange:rule=>_setInitiativeOptions(rule)},developmentRollForLuck:{name:"SETTINGS.developmentRollForLuck",hint:"SETTINGS.developmentRollForLuckHint",scope:"world",config:!1,default:!1,type:Boolean},pulpRuleDoubleMaxHealth:{name:"CoC7.Settings.PulpRules.DoubleMaxHealth.Name",hint:"CoC7.Settings.PulpRules.DoubleMaxHealth.Hint",scope:"world",config:!1,default:!1,type:Boolean},pulpRuleDevelopmentRollLuck:{name:"CoC7.Settings.PulpRules.DevelopmentRollLuck.Name",hint:"CoC7.Settings.PulpRules.DevelopmentRollLuck.Hint",scope:"world",config:!1,default:!1,type:Boolean},pulpRuleArchetype:{name:"CoC7.Settings.PulpRules.Archetype.Name",hint:"CoC7.Settings.PulpRules.Archetype.Hint",scope:"world",config:!1,default:!1,type:Boolean},pulpRuleOrganization:{name:"CoC7.Settings.PulpRules.Organization.Name",hint:"CoC7.Settings.PulpRules.Organization.Hint",scope:"world",config:!1,default:!1,type:Boolean},pulpRuleTalents:{name:"CoC7.Settings.PulpRules.Talents.Name",hint:"CoC7.Settings.PulpRules.Talents.Hint",scope:"world",config:!1,default:!1,type:Boolean},pulpRuleFasterRecovery:{name:"CoC7.Settings.PulpRules.FasterRecovery.Name",hint:"CoC7.Settings.PulpRules.FasterRecovery.Hint",scope:"world",config:!1,default:!1,type:Boolean},pulpRuleIgnoreMajorWounds:{name:"CoC7.Settings.PulpRules.IgnoreMajorWounds.Name",hint:"CoC7.Settings.PulpRules.IgnoreMajorWounds.Hint",scope:"world",config:!1,default:!1,type:Boolean},pulpRuleIgnoreAgePenalties:{name:"CoC7.Settings.PulpRules.IgnoreAgePenalties.Name",hint:"CoC7.Settings.PulpRules.IgnoreAgePenalties.Hint",scope:"world",config:!1,default:!1,type:Boolean},opposedRollTieBreaker:{name:"SETTINGS.OpposedRollTieBreaker",hint:"SETTINGS.OpposedRollTieBreakerHint",scope:"world",config:!1,default:!1,type:Boolean}};function _setInitiativeOptions(rule){let decimals=0;switch(rule){case"optional":decimals=2;break;case"basic":decimals=0}CONFIG.Combat.initiative={formula:null,decimals}}class CoC7GameRuleSettings extends FormApplication{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{title:"SETTINGS.TitleRules",id:"rules-settings",template:"systems/CoC7/templates/system/rule-settings.html",width:550,height:"auto",closeOnSubmit:!0})}getData(){const options={},pulpRules={true:!1,false:!1};for(const[k,v]of Object.entries(SETTINGS))options[k]={value:game.settings.get("CoC7",k),setting:v},k.match(/^pulpRule.{2,}$/)&&(pulpRules[options[k].value]=!0);return options.pulpSelection=pulpRules.true?pulpRules.false?"some":"all":"none",options}static registerSettings(){for(const[k,v]of Object.entries(SETTINGS))game.settings.register("CoC7",k,v);_setInitiativeOptions(game.settings.get("CoC7","initiativeRule"))}activateListeners(html){super.activateListeners(html),html.find("#pulpRulesSelect").on("change",(event=>this.onChangePulpSelect(event))),html.find("input.pulpRulesSelect[type=checkbox]").on("click",(event=>this.onClickPulp(event))),html.find("button[name=reset]").on("click",(event=>this.onResetDefaults(event)))}onChangePulpSelect(event){const val=$(event.currentTarget).val();"none"!==val&&"all"!==val||$("#rules-settings").find("input.pulpRulesSelect[type=checkbox]").each((function(){const checkbox=$(this);"none"===val?checkbox.prop("checked",!1):checkbox.prop("checked",!0)}))}onClickPulp(event){const pulpRules={true:!1,false:!1};$("#rules-settings").find("input.pulpRulesSelect[type=checkbox]").each((function(){$(this).prop("checked")?pulpRules.true=!0:pulpRules.false=!0})),$("#pulpRulesSelect").val(pulpRules.true?pulpRules.false?"some":"all":"none")}async onResetDefaults(event){event.preventDefault();for await(const[k,v]of Object.entries(SETTINGS))await game.settings.set("CoC7",k,v?.default);return this.render()}async _updateObject(event,data){const pulpRules={true:!1,false:!1};for await(const key of Object.keys(SETTINGS))game.settings.set("CoC7",key,data[key]),key.match(/^pulpRule.{2,}$/)&&(pulpRules[data[key]]=!0);game.settings.set("CoC7","pulpRules",pulpRules.true&&!pulpRules.false)}}class CoC7ArchetypeSheet extends ItemSheet{activateListeners(html){super.activateListeners(html),this.options.editable&&(html.find(".item .item-name h4").click((event=>this._onItemSummary(event,"skills"))),html.find(".item-delete").click((event=>this._onItemDelete(event,"skills"))))}async _onDrop(event,type="skill",collectionName="skills"){event.preventDefault(),event.stopPropagation();const dataList=await CoC7Utilities.getDataFromDropEvent(event,"Item");let useCoCID=0;const collection=this.item.system[collectionName]?foundry.utils.duplicate(this.item.system[collectionName]):[];for(const item of dataList)item&&item.system&&[type].includes(item.type)&&(!CoC7Item.isAnySpec(item)&&collection.find((el=>el.name===item.name))||(0===useCoCID&&(useCoCID=await DropCoCID.create()),collection.push(DropCoCID.processItem(useCoCID,item))));await this.item.update({[`system.${collectionName}`]:collection})}async _onItemSummary(event,collectionName="items"){event.preventDefault();const li=$(event.currentTarget).parents(".item"),item=this.item.system[collectionName].find((s=>s._id===li.data("item-id")));if(!item)return;const chatData=await TextEditor.enrichHTML(item.system.description.value,{async:!0,secrets:this.item.editable});if(li.hasClass("expanded")){const summary=li.children(".item-summary");summary.slideUp(200,(()=>summary.remove()))}else{const div=$(`<div class="item-summary">${chatData}</div>`),props=$('<div class="item-properties"></div>');div.append(props),li.append(div.hide()),div.slideDown(200)}li.toggleClass("expanded")}async _onItemDelete(event,collectionName="items"){const item=$(event.currentTarget).closest(".item"),itemId=item.data("item-id"),CoCId=item.data("cocid"),itemIndex=this.item.system[collectionName].findIndex((i=>itemId&&i._id===itemId||CoCId&&i===CoCId));if(itemIndex>-1){const collection=this.item.system[collectionName]?foundry.utils.duplicate(this.item.system[collectionName]):[];collection.splice(itemIndex,1),await this.item.update({[`system.${collectionName}`]:collection})}}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheet","occupation"],template:"systems/CoC7/templates/items/archetype.html",width:520,height:480,dragDrop:[{dragSelector:".item"}],scrollY:[".tab.description"],tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-body",initial:"description"}]})}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(){const sheetData=super.getData();sheetData.hasOwner=!0===this.item.isEmbedded;const coreCharacteristics=[];for(const[key,selected]of Object.entries(sheetData.data.system.coreCharacteristics))if(selected){const characName=game.i18n.localize(`CHARAC.${key.toUpperCase()}`);coreCharacteristics.push(characName)}sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData.enrichedSuggestedOccupations=await TextEditor.enrichHTML(sheetData.data.system.suggestedOccupations,{async:!0,secrets:sheetData.editable}),sheetData.enrichedSuggestedTraits=await TextEditor.enrichHTML(sheetData.data.system.suggestedTraits,{async:!0,secrets:sheetData.editable}),sheetData.data.system.skills=await game.system.api.cocid.expandItemArray({itemList:sheetData.data.system.skills}),sheetData.skillListEmpty=0===sheetData.data.system.skills.length,sheetData.data.system.skills.sort(CoC7Utilities.sortByNameKey),sheetData.coreCharacteristicsString="";const orString=` ${game.i18n.localize("CoC7.Or")} `;return coreCharacteristics.length&&(sheetData.coreCharacteristicsString+=coreCharacteristics.join(orString)),sheetData.itemProperties=[],sheetData.itemProperties.push(`${game.i18n.localize("CoC7.PulpTalents")}: ${sheetData.data.system.talents}`),sheetData.itemProperties.push(`${game.i18n.localize("CoC7.BonusPoints")}: ${sheetData.data.system.bonusPoints}`),sheetData.isKeeper=game.user.isGM,sheetData}}class CoC7BookSheet extends ItemSheet{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{template:"systems/CoC7/templates/items/book/main.html",classes:["coc7","item","book"],width:500,height:"auto",resizable:!1,dragDrop:[{dragSelector:".spells",dropSelector:null}],scrollY:[".body"],tabs:[{navSelector:".navigation",contentSelector:".body",initial:"description"}]})}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(){const sheetData=super.getData();return sheetData.initialReading=this.item.system.initialReading,sheetData.isKeeper=game.user.isGM,sheetData.isOwner=this.item.isOwner,sheetData.spellsLearned=this.spellsLearned,sheetData.exhausted=!1!==await this.item.checkExhaustion(),sheetData.studyCompleted=this.item.system.study.progress===this.item.system.study.necessary,sheetData.hasOwner=!0===this.item.isEmbedded,sheetData.spellListEmpty=0===this.item.system.spells.length,sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData.enrichedContent=await TextEditor.enrichHTML(sheetData.data.system.content,{async:!0,secrets:sheetData.editable}),sheetData}get spellsLearned(){let amount=0;const spells=this.item.system.spells;for(const spell of spells)spell.system.learned&&amount++;return`${amount} / ${spells.length}`}activateListeners(html){super.activateListeners(html),html.find("#attempt-initial-reading").click((event=>{event.preventDefault(),this.item.attemptInitialReading()})),html.find(".delete-spell").click((event=>this._onDelete(event))),html.find(".edit-spell").click((event=>this._onSpellDetail(event))),html.find(".spell-name").click((event=>this._onSpellDetail(event))),html.find(".teach-spell").click((event=>{const id=$(event.currentTarget).parents("li").data("id");this.item.attemptSpellLearning(id)})),html.find('[name="system.study.necessary"]').change((event=>{const value=parseInt(event.currentTarget.value);this.item.changeProgress("reset",value)})),html.find("#increase-progress").click((()=>{this.item.changeProgress("increase")})),html.find("#decrease-progress").click((()=>{this.item.changeProgress("decrease")})),html.find(".add-other-gains").click((event=>{this.modifyOthersGains(event,"add")})),html.find(".change-other-gains").change((event=>{this.modifyOthersGains(event,"change")})),html.find("#redo-full-study").click((()=>{this.item.redoFullStudy()})),html.find(".remove-other-gains").click((event=>{this.modifyOthersGains(event,"remove")})),html.find(".option").click((event=>this.modifyType(event)))}async _onSpellDetail(event){event.preventDefault();const index=$(event.currentTarget).parents("li").data("index");return await this.item.spellDetail(index)}async _onDelete(event){if(!game.user.isGM)return;event.preventDefault();const index=$(event.currentTarget).parents("li").data("index"),spells=this.item.system.spells?foundry.utils.duplicate(this.item.system.spells):[];return index>=0&&spells.splice(index,1),await this.item.update({"system.spells":spells})}async _onDrop(event,type="spell"){event.preventDefault(),event.stopPropagation();const dataList=await CoC7Utilities.getDataFromDropEvent(event,"Item"),spells=[];for(const item of dataList)item&&["skill","spell"].includes(item.type)&&("spell"===item.type?spells.push(item):"skill"===item.type&&this.item.system.type.other&&this.modifyOthersGains(null,"add",{name:item.name}));await this.item.addSpells(spells)}modifyType(event){event.preventDefault(),event.stopPropagation();return $(event.currentTarget).prev().trigger("click")}async modifyOthersGains(event,mode,options={}){let index=null,element=null;event&&(event.preventDefault(),element=$(event.currentTarget),index=element.parents("tr").data("index"));const skills=this.item.system.gains.others?foundry.utils.duplicate(this.item.system.gains.others):[];switch(mode){case"add":skills.push({name:options.name||game.i18n.localize("CoC7.NewSkillName"),value:"development"});break;case"change":skills[index]={name:element.is("input")?element.val():skills[index].name,value:element.is("select")?element.val():skills[index].value};break;case"remove":index>=0&&skills.splice(index,1)}return await this.item.update({"system.gains.others":skills})}}class CoC7ContainerSheet extends ActorSheet{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheet","actor","storage"],template:"systems/CoC7/templates/actors/storage-sheet.html",width:672,height:765,dragDrop:[{dragSelector:".item",dropSelector:null}],tabs:[{navSelector:".sheet-nav",contentSelector:".sheet-body",initial:"items"}]})}async _onDrop(event){event.preventDefault(),event.stopPropagation();const dataList=await CoC7Utilities.getDataFromDropEvent(event,"Item");if(!this.options.editable)return;const items=this.actor.items.toObject()||[];for(const item of dataList)item&&item.system&&["book","item","spell","weapon"].includes(item.type)&&items.push(item.toObject());await this.actor.update({items})}onCloseSheet(){}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(){const sheetData=await super.getData();if(sheetData.isKeeper=game.user.isGM,sheetData.editable=this.isEditable,sheetData.itemsByType={},sheetData.items){for(const item of sheetData.items)Object.prototype.hasOwnProperty.call(sheetData.itemsByType,item.type)||(sheetData.itemsByType[item.type]=[]),sheetData.itemsByType[item.type].push(item);for(const itemType in sheetData.itemsByType)sheetData.itemsByType[itemType].sort(CoC7Utilities.sortByNameKey)}return sheetData.allowUnlock="always"===game.settings.get("CoC7","playerUnlockSheetMode")||game.user.isGM,sheetData.showInventoryItems=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"item")||!sheetData.data.system.flags.locked,sheetData.showInventoryBooks=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"book")||!sheetData.data.system.flags.locked,sheetData.showInventorySpells=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"spell")||!sheetData.data.system.flags.locked,sheetData.showInventoryTalents=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"talent")||!sheetData.data.system.flags.locked&&game.settings.get("CoC7","pulpRuleTalents"),sheetData.showInventoryWeapons=Object.prototype.hasOwnProperty.call(sheetData.itemsByType,"weapon")||!sheetData.data.system.flags.locked,sheetData.hasInventory=sheetData.showInventoryItems||sheetData.showInventoryBooks||sheetData.showInventorySpells||sheetData.showInventoryTalents||sheetData.showInventoryWeapons,sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData}activateListeners(html){super.activateListeners(html),html.find(".item-edit").click((ev=>{const li=$(ev.currentTarget).parents(".item");this.actor.items.get(li.data("itemId")).sheet.render(!0)})),html.find(".inventory-header").click(this._onInventoryHeader.bind(this)),html.find(".item-trade").click(this._onTradeItem.bind(this)),html.find(".show-detail").click(this._onItemSummary.bind(this)),html.find(".item-delete").click((async ev=>{const li=$(ev.currentTarget).parents(".item"),itemToDelete=this.actor.items.get(li.data("itemId"),{strict:!0});await itemToDelete.delete(),li.slideUp(200,(()=>this.render(!1)))})),html.find(".add-item").click((ev=>{switch(ev.currentTarget.dataset.type){case"book":this.actor.createEmptyBook(ev);break;case"item":this.actor.createEmptyItem(ev);break;case"skill":this.actor.createEmptySkill(ev);break;case"spell":this.actor.createEmptySpell(ev);break;case"weapon":this.actor.createEmptyWeapon(ev)}})),html.find(".lock").click(this._onLockClicked.bind(this))}async _onLockClicked(event){event.preventDefault();const isLocked=this.actor.locked;this.actor.locked=!isLocked}async _onTradeItem(event){const li=$(event.currentTarget).parents(".item"),item=this.actor.items.get(li.data("itemId"));let content="<p>"+game.i18n.localize("CoC7.MessageSelectUserToGiveTo");const message={actorFrom:this.actor.id,scene:null,actorTo:this.actor.id,item:item.id};this.token?.actor&&(message.actorFrom=this.token.id,message.scene=this.token.parent.id);const actors=game.actors.filter((e=>{if(!["character","npc","creature","container"].includes(e.type))return!1;if(this.actor.id===e.id)return!1;let visible=!1;for(const[k,v]of Object.entries(e.ownership))"default"!==k&&k!==game.user.id||(visible=visible||v!==CONST.DOCUMENT_OWNERSHIP_LEVELS.NONE);return visible}));content+='<form id="selectform"><select name="user">';for(const actor of actors)content=content+'<option value="'+actor.id+'">'+actor.name+"</option>";content+="</select></form></p>",await Dialog.prompt({title:game.i18n.localize("CoC7.MessageTitleSelectUserToGiveTo"),content,callback:html=>{const formData=new FormData(html[0].querySelector("#selectform"));for(const[name,value]of formData)"user"===name&&(message.actorTo=value)}}),await game.CoC7socket.executeAsGM("gmtradeitemto",message)}async _onItemSummary(event){event.preventDefault();const li=$(event.currentTarget).parents(".item"),item=this.actor.items.get(li.data("item-id")),chatData=await item.getChatData({secrets:this.actor.isOwner});if(li.hasClass("expanded")){const summary=li.children(".item-summary");summary.slideUp(200,(()=>summary.remove()))}else{const div=$('<div class="item-summary"></div>'),labels=$('<div class="item-labels"></div>');for(const p of chatData.labels)labels.append(`<div class="item-label"><span class="label-name">${p.name} :</span><span class="label-value">${p.value}</span></div>`);if(div.append(labels),div.append($(`<div class="item-description">${chatData.description.value}</div>`)),item.system.properties?.spcl){const specialDiv=$(`<div class="item-special">${chatData.description.special}</div>`);div.append(specialDiv)}const props=$('<div class="item-properties"></div>');for(const p of chatData.properties)props.append(`<div class="tag item-property">${game.i18n.localize(p)}</div>`);div.append(props),li.append(div.hide()),div.slideDown(200)}li.toggleClass("expanded")}_onInventoryHeader(event){event.preventDefault(),$(event.currentTarget).siblings("li").slideToggle(200)}}class CoC7ChaseParticipantImporter extends FormApplication{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{title:game.i18n.localize("CoC7.AddActorToChase"),template:"systems/CoC7/templates/apps/chase-participant-importer.html",classes:["coc7","dialog","chase-participant-importer"],editable:!0,resizable:!1,submitOnChange:!0,closeOnSubmit:!1,width:300,height:"auto"})}activateListeners(html){super.activateListeners(html);new DragDrop({dropSelector:".form-container",permissions:{drop:game.user.isGM},callbacks:{drop:this._onDropParticipant.bind(this)}}).bind(html[0]);new DragDrop({dragSelector:".chase-token",permissions:{dragstart:game.user.isGM},callbacks:{dragstart:this._onTokenSelectorDragStart.bind(this)}}).bind(html[0]),html.find(".reset-participant").click((async()=>{this.object={},this._actor=null,await this.render(!0)})),html.find(".food-chain").click((async()=>{this.object.chaser=!this.object.chaser,await this.render(!0)})),html.find("[data-action]").click(this._onAction.bind(this))}async _onTokenSelectorDragStart(event){const data={type:"getToken",appId:this.appId,callBack:"addTokenToChase"};event.dataTransfer.setData("text/plain",JSON.stringify(data))}async getData(){if(!this.object.initiative){const init=CoCActor.getCharacteristicDefinition().find((c=>"dex"===c.key));this.object.initiative=init.label}if(!this.object.speedCheck){const speedCheck=CoCActor.getCharacteristicDefinition().find((c=>"con"===c.key));this.object.speedCheck={name:speedCheck.label}}this.validateParticipant();const data=await super.getData();if(data.participant=new _participant(this.object),data.object.speedCheck.name&&this.actor){const speedCheck=this.actor.find(data.object.speedCheck.name);speedCheck?(data.object.speedCheck.score=speedCheck.value.value,data.speedCheckReadOnly=!0):data.participant.speedCheck.score&&!this.object.speedCheck?.score&&(data.object.speedCheck.score=data.participant.speedCheck.score)}if(data.object.initiative&&this.actor){const initiative=this.actor.find(data.object.initiative);initiative?(data.object.dex=initiative.value.value,data.initReadOnly=!0):data.object.dex=data.participant.initiative}return data.actor=this.actor,data.chase=this.chase,data.data=this.data,data.optionsList={},this.chase&&(data.skillsAndCharacteristicsList=this.chase.allSkillsAndCharacteristicsShort),this.actor&&(data.skillsAndCharacteristicsList=[],CoCActor.getCharacteristicDefinition().forEach((c=>data.skillsAndCharacteristicsList.push(`${c.label}`))),data.skillsAndCharacteristicsList.push(`${game.i18n.localize("CoC7.Luck")}`),data.skillsAndCharacteristicsList.push(`${game.i18n.localize("CoC7.SAN")}`),this.actor.skills.forEach((s=>data.skillsAndCharacteristicsList.push(s.name)))),data}get chase(){return this._chase||(this._chase=CoC7Utilities.SfromUuid(this.object.chaseUuid)),this._chase}get actor(){return this.object.docUuid?(this._actor||(this._actor=CoC7Utilities.getActorFromKey(this.object.docUuid)),this._actor):null}async _updateObject(event,formData){foundry.utils.mergeObject(this,formData),await this.render(!0)}async _onDropParticipant(event){const dropString=event.dataTransfer.getData("text/plain"),dropData=JSON.parse(dropString),docUuid=CoC7Utilities.getActorDocumentFromDropData(dropData);this.object.docUuid=docUuid,this.object.chaser=0===this.actor?.owners?.filter((u=>!u.isGM)).length,this.object.speedCheck.rollDataString&&delete this.object.speedCheck.rollDataString,await this.render(!0)}async addTokenToChase(tokens){1===tokens.length?(this.object.docUuid=tokens[0].document?.uuid,this.object.chaser=0===this.actor?.owners?.filter((u=>!u.isGM)).length,this.object.speedCheck.rollDataString&&delete this.object.speedCheck.rollDataString,await this.render(!0)):ui.notifications.warn(game.i18n.localize("CoC7.ErrorTokenIncorrect"))}async _onAction(event){event.preventDefault();switch(event.currentTarget.dataset.action){case"chase-cancel":this.close();break;case"chase-add":{const participant=new _participant(this.object);if(this.chase.started){if(!(participant.movementAction&&participant.movementAction>0))return void ui.notifications.warn(game.i18n.localize("CoC7.DoesNotMeetMinimumReqToBeAdded"));if(this.data.overrideMovementAction){const slowest=this.chase.slowestParticipant;isNaN(participant.adjustedMov)&&(participant.mov=slowest.adjustedMov),this.data.recalculationNeeded=!1}}await this.chase.addParticipant(participant,{locationUuid:this.object.locationUuid,recalculateMovementActions:this.data.recalculationNeeded,update:this.object.update}),this.close()}break;case"roll-speed-check":{const participant=new _participant(this.object);if(participant.speedCheck.refSet){const roll=new CoC7Check;participant.data.rolled=!0,roll.actor=participant.actor.actorKey,participant.speedCheck.isCharacteristic?(await roll.rollCharacteristic(participant.speedCheck.ref.key),participant.data.speedCheck.rollDataString=roll.JSONRollString):participant.speedCheck.isSkill?(roll.skill=participant.speedCheck.ref,await roll.roll(),participant.data.speedCheck.rollDataString=roll.JSONRollString):participant.speedCheck.isAttribute&&(await roll.rollAttribute(participant.speedCheck.ref.key),participant.data.speedCheck.rollDataString=roll.JSONRollString)}else if(participant.speedCheck.score){const rollData={rawValue:participant.speedCheck.score,displayName:participant.speedCheck.name,actorName:participant.name?participant.name:void 0};participant.hasActor&&(rollData.actor=participant.actor.actorKey);const roll=CoC7Check.create(rollData);await roll.roll(),participant.data.speedCheck.rollDataString=roll.JSONRollString,participant.data.rolled=!0}foundry.utils.mergeObject(this.object,participant.data),this.render(!0)}}}validateParticipant(){const participant=new _participant(this.object);if(this.data||(this.data={}),this.object.excluded=!1,this.object.escaped=!1,this.data.recalculationNeeded=!1,this.data.participantExcluded=!1,this.data.movementActionDelta=0,!this.data.overrideMovementAction){const slowestPrey=this.chase.slowestPrey,fastestChaser=this.chase.fastestChaser,slowest=this.chase.slowestParticipant;participant.adjustedMov<slowest?.adjustedMov?(this.data.recalculationNeeded=!0,participant.movementAction=1):(this.data.recalculationNeeded=!1,participant.calculateMovementActions(slowest?.adjustedMov)),participant.isChaser&&slowestPrey&&!this.chase.system.includeLastCommers&&participant.adjustedMov<slowestPrey.adjustedMov&&(this.object.excluded=!0,this.data.participantExcluded=!0,this.data.excludedBecause=game.i18n.localize("CoC7.TooSlow"),this.data.recalculationNeeded=!1),participant.isPrey&&fastestChaser&&!this.chase.system.includeEscaped&&participant.adjustedMov>fastestChaser.adjustedMov&&(this.object.escaped=!0,this.data.participantExcluded=!0,this.data.excludedBecause=game.i18n.localize("CoC7.TooFast"),this.data.recalculationNeeded=!1)}}static async create(data){if(data.dropData){const docUuid=CoC7Utilities.getActorDocumentFromDropData(data.dropData);docUuid&&(data.docUuid=docUuid),delete data.dropData}return new CoC7ChaseParticipantImporter(data).render(!0)}}class CoC7ChaseSheet extends ItemSheet{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheetV2","item","chase"],template:"systems/CoC7/templates/items/chase.html",width:550,height:500,resizable:!0,tabs:[{navSelector:".sheet-nav",contentSelector:".sheet-body",initial:"participants"}]})}static get type(){return"coc7ChaseSheet"}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(options={}){const sheetData=super.getData(options);return sheetData.participants=this.item.participantsObject,sheetData.participantsByInitiative=this.item.participantsByInitiative,sheetData.preys=this.item.preys,sheetData.chasers=this.item.chasers,sheetData.preysMinMov=sheetData.preys.length?sheetData.preys.reduce(((prev,current)=>prev.adjustedMov<current.adjustedMov?prev:current)).adjustedMov:-1,sheetData.preysMaxMov=sheetData.preys.length?sheetData.preys.reduce(((prev,current)=>prev.adjustedMov>current.adjustedMov?prev:current)).adjustedMov:-1,sheetData.chasersMinMov=sheetData.chasers.length?sheetData.chasers.reduce(((prev,current)=>prev.adjustedMov<current.adjustedMov?prev:current)).adjustedMov:-1,sheetData.chasersMaxMov=sheetData.chasers.length?sheetData.chasers.reduce(((prev,current)=>prev.adjustedMov>current.adjustedMov?prev:current)).adjustedMov:-1,sheetData.chasers.forEach((p=>{p.adjustedMov<sheetData.preysMinMov?p.tooSlow():p.includeInChase(),p.fastest=p.adjustedMov===sheetData.chasersMaxMov,p.slowest=p.adjustedMov===sheetData.chasersMinMov})),sheetData.preys.forEach((p=>{p.adjustedMov>sheetData.chasersMaxMov?p.escaped():p.includeInChase(),p.fastest=p.adjustedMov===sheetData.preysMaxMov,p.slowest=p.adjustedMov===sheetData.preysMinMov})),sheetData.locations=this.item.locations,sheetData.allHaveValidMov=this.allHaveValidMov,sheetData.activeLocation=this.item.activeLocation,sheetData.activeLocation&&(sheetData.activeLocation.title=sheetData.activeLocation.coordinates?game.i18n.format("CoC7.LocationCoordinate",{x:sheetData.activeLocation.coordinates.x,y:sheetData.activeLocation.coordinates.y}):game.i18n.localize("CoC7.DragOnCanvas")),sheetData.previousLocation=this.item.previousLocation,sheetData.nextLocation=this.item.nextLocation,sheetData.started=this.item.started,sheetData.isKeeper=game.user.isGM,sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData}activateListeners(html){super.activateListeners(html),html.find(".dropdown-element").on("click",(event=>this._onDropDownElementSelected(event))),html.find(".dropbtn").click((event=>{event.preventDefault(),event.stopPropagation();event.currentTarget.closest(".dropdown").querySelector(".dropdown-content").classList.toggle("show")})),html.find(".dropdown").mouseleave((event=>event.currentTarget.querySelector(".dropdown-content").classList.remove("show"))),html.on("dblclick",".open-actor",CoC7Chat._onOpenActor.bind(this)),html.find(".pin-location").contextmenu(this.clearActiveLocationCoordinates.bind(this)),html.find(".participant").on("dragenter",(event=>this._onDragEnterParticipant(event))),html.find(".participant").on("dragover",(event=>this._onDragEnterParticipant(event))),html.find(".participant").on("dragleave",(event=>this._onDragLeaveParticipant(event))),html.find(".participant").on("drop",(event=>this._onDragLeaveParticipant(event))),html.find(".p-side").click(this._onChangeSide.bind(this)),html.find(".delete-participant").click(this._onDeleteParticipant.bind(this)),html.find(".reset-roll").click(this._onResetRoll.bind(this)),html.find(".delete-driver").click(this._onDeleteDriver.bind(this)),html.find(".new-participant").on("dragenter",(event=>this._onDragEnterParticipant(event))),html.find(".new-participant").on("dragover",(event=>this._onDragEnterParticipant(event))),html.find(".new-participant").on("dragleave",(event=>this._onDragLeaveParticipant(event))),html.find(".new-participant").on("drop",(event=>this._onDragLeaveParticipant(event))),html.find(".add-sign").click(this._onAddParticipant.bind(this)),html.find(".roll-participant").click(this._onRollParticipant.bind(this)),html.find(".button").click(this._onButtonClick.bind(this)),html.find(".name-container").click(this._onLocationClick.bind(this)),html.find(".obstacle-type").click(this._onObstacleTypeClick.bind(this)),html.find(".toggle").click(this._onToggle.bind(this)),html.find(".participant-control").click(this._onParticipantControlClicked.bind(this)),html.find(".chase-control").click(this._onChaseControlClicked.bind(this)),html.find(".location-control").click(this._onLocationControlClick.bind(this));new DragDrop({dragSelector:".pin-location",permissions:{dragstart:this._canPinLocationDragStart.bind(this)},callbacks:{dragstart:this._onPinLocationDragStart.bind(this)}}).bind(html[0]);new DragDrop({dropSelector:".participant",callbacks:{drop:this._onDropParticipant.bind(this)}}).bind(html[0]);if(new DragDrop({dropSelector:".new-participant",callbacks:{drop:this._onAddParticipant.bind(this)}}).bind(html[0]),this.item.started){html.find(".chase-location .chase-participant").click(this._onChaseParticipantClick.bind(this));new DragDrop({dragSelector:".chase-participant",dropSelector:".chase-location",permissions:{dragstart:this._canChaseParticipantDragStart.bind(this),drop:this._canChaseParticipantDragDrop.bind(this)},callbacks:{dragstart:this._onChaseParticipantDragStart.bind(this),drop:this._onChaseParticipantDragDrop.bind(this),dragover:this._onDragEnter.bind(this)}}).bind(html[0]),html.find(".chase-location").on("dragleave",(event=>this._onDragLeave(event)))}}_getSubmitData(updateData={}){let data=new FormDataExtended(this.form,{editors:this.editors}).object;if(data=updateData?foundry.utils.mergeObject(data,updateData):foundry.utils.expandObject(data),this.item.system.locations?.list?.length&&data.system.startingIndex>this.item.system.locations.list.length&&(data.system.startingIndex=this.item.system.locations.list.length),data.system.participants){const participants=foundry.utils.duplicate(this.item.system.participants);for(const[k,v]of Object.entries(data.system.participants)){const index=participants.findIndex((p=>p.uuid===k));if(-1===index)ui.notifications.error("Participant table corrupted");else{const original=participants[index],cleaned=clean(v);foundry.utils.mergeObject(original,cleaned),participants[index]=original}}data.system.participants=participants}if(data.locations){const locations=foundry.utils.duplicate(this.item.system.locations.list);for(const[key,value]of Object.entries(data.locations)){const locationIndex=locations.findIndex((l=>l.uuid===key));if(-1===locationIndex)ui.notifications.error("Locations table corrupted");else{const originalLocation=locations[locationIndex],cleaned=clean(value);foundry.utils.mergeObject(originalLocation,cleaned),locations[locationIndex]=originalLocation}}delete data.locations,data.system.locations={list:locations}}return foundry.utils.flattenObject(data)}async _updateObject(event,formData){const target=event.currentTarget,override="true"===target?.dataset?.override;if(target?.name?.includes(".hp")){const[,,uuid]=target.name.split("."),participant=this.item.getParticipant(uuid);participant&&participant.actor&&(isNaN(Number(target.value))||await participant.actor.setHp(Number(target.value)))}if(override){const[,type,uuid,subType,data]=target.name.split("."),index=this.findParticipantIndex(uuid);if("participants"===type&&!isNaN(index)&&"speed-check"===subType&&"name"===data){const participants=this.item.system.participants?foundry.utils.duplicate(this.item.system.participants):[];return participants[index].speedCheck?(delete participants[index].speedCheck.id,delete participants[index].speedCheck.type):participants[index].speedCheck={},participants[index].speedCheck.name=target.value,void await this.item.update({"system.participants":participants})}}super._updateObject(event,formData)}static async setScroll(app,html,data){if(!data.editable)return;const initialOpening=html[0].classList.contains("window-app"),chaseTrack=html[0].querySelector(".chase-track");if(!chaseTrack)return;let start=data.data.scroll?.chaseTrack.from,end=data.data.scroll?.chaseTrack.to;if(void 0===start&&(start=0),void 0===end&&(end=-1),initialOpening){const remString=$(":root").css("font-size"),remSize=Number(remString.replace("px",""));if(app.item.started){const pCount=app.item.actualParticipants?.length,width=(11.2*pCount+3)*remSize;app.activateTab("setup"),app.position.width=Math.max(width,40*remSize)}else app.position.width=45*remSize;return await app.item.activateNextParticipantTurn({html})}start&&-1!==start&&chaseTrack.scrollTo({top:0,left:start,behavior:"instant"}),-1!==end&&chaseTrack.scrollTo({top:0,left:end,behavior:"smooth"})}static onClose(app,html){app.item.update({"system.trackScrollPosition":-1})}findParticipantIndex(uuid){return this.item.system.participants.findIndex((p=>p.uuid===uuid))}findLocationIndex(uuid){return this.item.system.locations.list.findIndex((p=>p.uuid===uuid))}findLocation(uuid){return this.item.system.locations.list.find((p=>p.uuid===uuid))}findIndex(list,uuid){return list.findIndex((p=>p.uuid===uuid))}async _onDropDownElementSelected(event){event.preventDefault(),event.stopPropagation();const target=event.currentTarget;target.closest(".dropdown-content")?.classList.toggle("show");const assistantUuid=target.closest(".initiative-block")?.dataset?.uuid,beneficiaryUuid=target.dataset.beneficiaryUuid;await this.item.assistParticipant(assistantUuid,beneficiaryUuid)}async _onToggle(event){const target=event.currentTarget,toggle=target.getAttribute("toggle"),data=foundry.utils.expandObject({[toggle]:!target.classList.contains("switched-on")});if(data.locations){const locations=foundry.utils.duplicate(this.item.system.locations.list);for(const[key,value]of Object.entries(data.locations)){const locationIndex=locations.findIndex((l=>l.uuid===key));if(-1===locationIndex)ui.notifications.error("Locations table corrupted");else{const originalLocation=locations[locationIndex],cleaned=clean(value);foundry.utils.mergeObject(originalLocation,cleaned),locations[locationIndex]=originalLocation}}await this.item.updateLocationsList(locations)}}async _onObstacleTypeClick(event){const target=event.currentTarget,uuid=target.closest(".obstacle").dataset.uuid,locations=foundry.utils.duplicate(this.item.system.locations.list),locationIndex=this.findIndex(locations,uuid);locations[locationIndex].obstacleDetails||(locations[locationIndex].obstacleDetails={});const obstacle=locations[locationIndex].obstacleDetails,type=target.classList.contains("barrier")?"barrier":"hazard",active=obstacle[type];obstacle.barrier=!1,obstacle.hazard=!1,obstacle[type]=!active,locations[locationIndex].obstacle=!active,await this.item.updateLocationsList(locations)}async _onLocationClick(event){const lUuid=event.currentTarget.closest(".chase-location").dataset.uuid;await this.item.activateLocation(lUuid)}async _onLocationControlClick(event){event.preventDefault();const target=event.currentTarget;if(target.classList.contains("inactive"))return;const action=target.dataset.action,lUuid=target.closest(".chase-location").dataset.uuid;switch(action){case"remove":await this.item.removeLocation(lUuid);break;case"add-after":await this.item.insertLocation(lUuid,{shift:1});break;case"add-before":await this.item.insertLocation(lUuid,{shift:0});break;case"add-participant":CoC7ChaseParticipantImporter.create({chaseUuid:this.item.uuid,locationUuid:lUuid,dropData:{}})}}async _onChaseParticipantClick(event){const pUuid=event.currentTarget.dataset?.uuid;await this.item.activateParticipant(pUuid)}async _onParticipantControlClicked(event){event.preventDefault();const target=event.currentTarget;if(target.classList.contains("inactive"))return;if(target.classList.contains("dropdown"))return;event.stopPropagation();const participantUuid=target.closest(".initiative-block")?.dataset?.uuid;if(participantUuid){switch(target.dataset.action){case"drawGun":await this.toggleParticipantGun(participantUuid);break;case"decreaseActions":await this._onChangeMovementActions(-1,event);break;case"increaseActions":await this._onChangeMovementActions(1,event);break;case"moveBackward":await this.item.moveParticipant(participantUuid,-1,{render:!0});break;case"moveForward":await this.item.moveParticipant(participantUuid,1,{render:!0});break;case"activateParticipant":return await this.item.activateParticipant(participantUuid);case"bonusDice":{const diceNumber=target.dataset.count;await this.item.toggleBonusDice(participantUuid,diceNumber),this.item.activateNextParticipantTurn()}break;case"cautiousApproach":await this.item.cautiousApproach(participantUuid);break;case"editParticipant":{const participant=this.item.getParticipant(participantUuid),location=this.item.getParticipantLocation(participantUuid);participant.data.chaseUuid=this.item.uuid,participant.data.locationUuid=location.uuid,participant.data.update=!0,CoC7ChaseParticipantImporter.create(participant.data)}break;case"removeParticipant":await this.item.removeParticipant(participantUuid)}this.item.activateNextParticipantTurn()}}async _onChaseControlClicked(event){event.preventDefault();const target=event.currentTarget;event.stopPropagation();const locationUuid=target.closest(".obstacle")?.dataset?.uuid;if(locationUuid)return"obstacle-skill-check"===target.dataset.action?this.item.activeParticipantObstacleCheck(locationUuid):void 0}async _onChangeMovementActions(count,event){event.preventDefault(),event.stopPropagation();const target=event.currentTarget,participantUuid=target.closest(".initiative-block")?.dataset?.uuid;if(!participantUuid)return;const participants=this.item.participants,participant=participants.find((p=>participantUuid===p.uuid));participant.hasMaxMvtActions&&count>0||(participant.alterMovementActions(count),await this.item.setchaseTrackScroll({render:!1}),await this.item.updateParticipants(participants))}async _onButtonClick(event){const target=event.currentTarget,action=target.dataset?.action;if(action)switch(action){case"init":if(!isNaN(this.item.system.locations.total)&&this.item.system.locations.total>0){const locations=Array.apply(null,Array(this.item.system.locations.total)).map((function(){return{uuid:foundry.utils.randomID(16)}}));locations[0].name="Start",locations.length>1&&(locations[locations.length-1].name="End"),await this.item.updateLocationsList(locations)}break;case"reset":Dialog.confirm({title:`${game.i18n.localize("CoC7.ConfirmResetChase")}`,content:`<p>${game.i18n.localize("CoC7.ConfirmResetChaseHint")}</p>`,yes:async()=>{await this.item.updateLocationsList([]),await this.item.stop()}});break;case"cut2chase":this.item.allHaveSpeedRoll?Dialog.confirm({title:`${game.i18n.localize("CoC7.ConfirmCut2Chase")}`,content:`<p>${game.i18n.localize("CoC7.ConfirmCut2ChaseHint")}</p>`,yes:()=>this.item.cutToTheChase()}):ui.notifications.warn(game.i18n.localize("CoC7.NotAllHaveSpeedRoll"));break;case"restart":Dialog.confirm({title:`${game.i18n.localize("CoC7.ConfirmRestartChase")}`,content:`<p>${game.i18n.localize("CoC7.ConfirmRestartChaseHint")}</p>`,yes:()=>this.item.restart()});break;case"nextRound":this.item.nextActiveParticipant?Dialog.confirm({title:`${game.i18n.localize("CoC7.ConfirmNextChaseRound")}`,content:`<p>${game.i18n.localize("CoC7.ConfirmNextChaseRoundHint")}</p>`,yes:()=>this.item.progressToNextRound()}):this.item.progressToNextRound()}}_canPinLocationDragStart(selector){return!!game.user.isGM}async _onPinLocationDragStart(event){const a=event.currentTarget,i=a.querySelector("i.icon"),dragIcon=a.querySelector(".pin-image");event.dataTransfer.setDragImage(dragIcon,0,dragIcon.height);const locationElement=a.closest(".chase-location"),data={type:"locator",CoC7Type:"chase"};data.icon=i.dataset.linkIcon,data.locationUuid=locationElement.dataset.uuid,data.docUuid=this.item.uuid,data.callBack="locatorDropped",event.dataTransfer.setData("text/plain",JSON.stringify(data))}_canChaseParticipantDragStart(selector){return!!game.user.isGM}_canChaseParticipantDragDrop(selector){return!!game.user.isGM}async _onChaseParticipantDragStart(dragEvent){const dragData={uuid:dragEvent.currentTarget.dataset.uuid,type:"participant"};dragEvent.dataTransfer.setData("text/plain",JSON.stringify(dragData))}async _onChaseParticipantDragDrop(dragEvent){const dataString=dragEvent.dataTransfer.getData("text/plain"),data=JSON.parse(dataString);this._onDragLeave(dragEvent);const locationUuid=dragEvent.currentTarget.dataset.uuid;if("participant"===data.type){const oldLocation=this.findLocation(locationUuid);if(oldLocation&&oldLocation.participants?.includes(data.uuid))return;await this.item.setchaseTrackScroll({render:!1}),await this.item.moveParticipantToLocation(data.uuid,locationUuid)}else CoC7ChaseParticipantImporter.create({chaseUuid:this.item.uuid,locationUuid,dropData:data})}_onDragOver(dragEvent){this._onDragEnter(dragEvent)}_onDragEnter(dragEvent){dragEvent.currentTarget.classList.add("drag-over")}_onDragLeave(dragEvent){const target=dragEvent.currentTarget;target.classList?.remove("drag-over")}async _onDropParticipant(event){const target=event.currentTarget,uuid=target.dataset?.uuid,dataString=event.dataTransfer.getData("text/plain"),data=JSON.parse(dataString);await this.alterParticipant(data,uuid)}async _onAddParticipant(event){event.preventDefault();const data={chaseUuid:this.item.uuid};if(event.dataTransfer){const dataString=event.dataTransfer.getData("text/plain");data.dropData=JSON.parse(dataString)}CoC7ChaseParticipantImporter.create(data)}async _onRollParticipant(event){const uuid=event.currentTarget.closest(".participant").dataset.uuid,index=this.findParticipantIndex(uuid),participants=this.item.system.participants?foundry.utils.duplicate(this.item.system.participants):[],participant=new _participant(participants[index]);if(participant.speedCheck.refSet){const roll=new CoC7Check;roll.parent=this.item.uuid,participant.data.rolled=!0,participant.data.rollUuid=roll.uuid,roll.actor=participant.actor.actorKey,!event.shiftKey&&participant.actor.player&&(roll.standby=!0,roll.standbyText="CoC7.Chase",roll.standbyRightIcon="systems/CoC7/assets/icons/running-solid.svg"),participant.speedCheck.isCharacteristic?(await roll.rollCharacteristic(participant.speedCheck.ref.key),await roll.toMessage(),participant.data.speedCheck.rollDataString=roll.JSONRollString):participant.speedCheck.isSkill?(roll.skill=participant.speedCheck.ref,await roll.roll(),await roll.toMessage(),participant.data.speedCheck.rollDataString=roll.JSONRollString):participant.speedCheck.isAttribute&&(await roll.rollAttribute(participant.speedCheck.ref.key),await roll.toMessage(),participant.data.speedCheck.rollDataString=roll.JSONRollString)}else if(participant.speedCheck.score){const rollData={rawValue:participant.speedCheck.score,displayName:participant.speedCheck.name,actorName:participant.name?participant.name:void 0};participant.hasActor&&(rollData.actor=participant.actor.actorKey);const roll=CoC7Check.create(rollData);roll.parent=this.item.uuid,await roll.roll(),await roll.toMessage(),participant.data.speedCheck.rollDataString=roll.JSONRollString,participant.data.rolled=!0,participant.data.rollUuid=roll.uuid}await this.item.update({"system.participants":participants})}_onDragEnterParticipant(event){event.currentTarget.classList.add("drag-over")}_onDragLeaveParticipant(event){event.currentTarget.classList.remove("drag-over")}async _onChangeSide(event){const uuid=event.currentTarget.closest(".participant").dataset.uuid,index=this.findParticipantIndex(uuid),participants=this.item.system.participants?foundry.utils.duplicate(this.item.system.participants):[];participants[index].chaser=!participants[index].chaser,await this.item.update({"system.participants":participants})}async _onDeleteDriver(event){const uuid=event.currentTarget.closest(".driver").dataset.uuid,index=this.findParticipantIndex(uuid),participants=this.item.system.participants?foundry.utils.duplicate(this.item.system.participants):[];delete participants[index].docUuid,await this.item.update({"system.participants":participants})}async _onDeleteParticipant(event){const uuid=event.currentTarget.closest(".participant").dataset.uuid,index=this.findParticipantIndex(uuid),participants=this.item.system.participants?foundry.utils.duplicate(this.item.system.participants):[];participants.splice(index,1),await this.item.update({"system.participants":participants})}async _onResetRoll(event){const uuid=event.currentTarget.closest(".participant").dataset.uuid,index=this.findParticipantIndex(uuid),participants=this.item.system.participants?foundry.utils.duplicate(this.item.system.participants):[];delete participants[index].speedCheck.rollDataString,await this.item.update({"system.participants":participants})}async alterParticipant(data,uuid){let docUuid,actor;docUuid=data.tokenUuid?data.tokenUuid:data.sceneId&&data.tokenId?`Scene.${data.sceneId}.Token.${data.tokenId}`:data.actorId||data.actorKey||data.id,"Token"===data.type?docUuid=data.uuid:docUuid&&(actor=chatHelper.getActorFromKey(docUuid),actor||"Item"!==data.type||(docUuid=null)),actor&&docUuid!==actor.uuid&&(docUuid=actor.uuid);const participant={};switch(docUuid&&(participant.docUuid=docUuid),data.type?.toLowerCase()){case"actor":default:break;case"item":participant.speedCheck={id:data.data?._id||data.id,type:"item"};break;case"characteristic":participant.speedCheck={id:data.name,type:"characteristic"};break;case"attribute":participant.speedCheck={id:data.name,type:"attribute"}}const participants=this.item.system.participants?foundry.utils.duplicate(this.item.system.participants):[],oldParticipant=participants[this.findParticipantIndex(uuid)];oldParticipant.mov&&delete oldParticipant.mov,foundry.utils.mergeObject(oldParticipant,participant),await this.item.update({"system.participants":participants})}async clearActiveLocationCoordinates(){await this.item.clearActiveLocationCoordinates()}async addParticipant(data){let docUuid,actor;docUuid=data.tokenUuid?data.tokenUuid:data.sceneId&&data.tokenId?`Scene.${data.sceneId}.Token.${data.tokenId}`:data.actorId||data.actorKey||data.id,"Token"===data.type?docUuid=data.uuid:docUuid&&(actor=chatHelper.getActorFromKey(docUuid),actor||"Item"!==data.type||(docUuid=null)),actor&&docUuid!==actor.uuid&&(docUuid=actor.uuid);const participant={};switch(docUuid&&(participant.docUuid=docUuid),data.type?.toLowerCase()){case"actor":default:break;case"item":if(data.id){const item=game.items.get(data.id);if("skill"!==item?.data?.type)return}participant.speedCheck={id:data.data?._id||data.id,type:"item"};break;case"characteristic":participant.speedCheck={id:data.name,type:"characteristic"};break;case"attribute":participant.speedCheck={id:data.name,type:"attribute"}}participant.speedCheck||(this.item.system.vehicle?participant.speedCheck={type:"item",name:game.i18n.localize("CoC7.CoCIDFlag.keys.i.skill.drive-auto")}:participant.speedCheck={id:"con",type:"characteristic",name:game.i18n.localize("CHARAC.Constitution")});const participants=this.item.system.participants?foundry.utils.duplicate(this.item.system.participants):[];let unique=!1;for(;!unique;)participant.uuid=foundry.utils.randomID(16),unique=0===participants.filter((p=>p.uuid===participant.uuid)).length;participants.push(participant),await this.item.update({"system.participants":participants})}async toggleParticipantGun(participantUuid){const participants=this.item.system.participants?foundry.utils.duplicate(this.item.system.participants):[],participant=participants.find((p=>participantUuid===p.uuid));participant&&(participant.hasAGunReady=!participant.hasAGunReady,await this.item.setchaseTrackScroll({render:!1}),await this.item.updateParticipants(participants))}}function clean(obj){for(const propName in obj){const tp=foundry.utils.getType(obj[propName]);"Object"===tp&&(obj[propName]=clean(obj[propName])),("Object"!==tp||Object.entries(obj[propName]).length)&&("string"!==tp||obj[propName].length)?"string"!==tp||isNaN(Number(obj[propName]))||(obj[propName]=Number(obj[propName])):obj[propName]=null}return obj}class CoC7ItemSheetV2 extends ItemSheet{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheetV2","item"],template:"systems/CoC7/templates/items/item-sheetV2.html",width:500,height:450,scrollY:[".tab.description"],tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-body",initial:"description"}]})}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(options={}){const sheetData=super.getData(options);return sheetData.effects=CoC7ActiveEffect.prepareActiveEffectCategories(this.item.effects,{status:!1}),sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData.isKeeper=game.user.isGM,sheetData}activateListeners(html){super.activateListeners(html),this.options.editable&&html.find(".effect-control").click((ev=>CoC7ActiveEffect.onManageActiveEffect(ev,this.item)))}}class CoC7ItemSheet extends CoC7ItemSheetV2{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{width:525,height:506})}}class CoC7JournalSheet extends JournalSheet{_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}}class CoC7MacroConfig extends MacroConfig{_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}}class CoC7PlaylistConfig extends PlaylistConfig{_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}}class CoC7RollTableConfig extends RollTableConfig{_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}}class CoC7SceneConfig extends SceneConfig{_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}}class CoC7SetupSheet extends ItemSheet{activateListeners(html){super.activateListeners(html),this.options.editable&&(html.find(".item .item-name h4").click((event=>this._onItemSummary(event,"items"))),html.find(".item-delete").click((event=>this._onItemDelete(event,"items"))),html.find(".add-bio").click((async()=>await this._onAddBio())),html.find(".remove-section").click(this._onRemoveSection.bind(this)),html.find(".toggle-switch").click(this._onClickToggle.bind(this)),html.find(".add-monetary").click(this._onAddMonetary.bind(this)),html.find(".remove-monetary").click(this._onRemoveMonetary.bind(this)))}async _onClickToggle(event){event.preventDefault();const propertyId=event.currentTarget.dataset.property;await this.item.toggleProperty(propertyId,isCtrlKey(event))}async _onDrop(event,collectionName="items"){event.preventDefault(),event.stopPropagation();const dataList=await CoC7Utilities.getDataFromDropEvent(event,"Item");let useCoCID=0;const collection=this.item.system[collectionName]?foundry.utils.duplicate(this.item.system[collectionName]):[];for(const item of dataList)item&&item.system&&["item","weapon","skill","book","spell"].includes(item.type)&&(!CoC7Item.isAnySpec(item)&&collection.find((el=>el.name===item.name))||(0===useCoCID&&(useCoCID=await DropCoCID.create()),collection.push(DropCoCID.processItem(useCoCID,item))));await this.item.update({[`system.${collectionName}`]:collection})}async _onRemoveSection(event){const div=event.currentTarget.closest(".item"),bio=foundry.utils.duplicate(this.item.system.bioSections);bio.splice(Number(div.dataset.index),1),await this.item.update({"system.bioSections":bio})}async _onAddBio(){const bio=this.item.system.bioSections?foundry.utils.duplicate(this.item.system.bioSections):[];bio.push(null),await this.item.update({"system.bioSections":bio})}_onAddMonetary(){const values=this.item.system.monetary.values?foundry.utils.duplicate(this.item.system.monetary.values):[];values.push({name:"",min:null,max:null,cashType:0,cashValue:"",assetsType:0,assetsValue:"",spendingType:0,spendingValue:""}),this.item.update({"system.monetary.values":values})}_onRemoveMonetary(event){const div=event.currentTarget.closest(".item"),values=foundry.utils.duplicate(this.item.system.monetary.values);values.splice(Number(div.dataset.index),1),this.item.update({"system.monetary.values":values})}async _onItemSummary(event,collectionName="items"){event.preventDefault();const li=$(event.currentTarget).parents(".item"),item=this.item.system[collectionName].find((s=>s._id===li.data("item-id")));if(!item)return;const chatData=await TextEditor.enrichHTML(item.system.description.value,{async:!0,secrets:this.item.editable});if(li.hasClass("expanded")){const summary=li.children(".item-summary");summary.slideUp(200,(()=>summary.remove()))}else{const div=$(`<div class="item-summary">${chatData}</div>`),props=$('<div class="item-properties"></div>');div.append(props),li.append(div.hide()),div.slideDown(200)}li.toggleClass("expanded")}async _onItemDelete(event,collectionName="items"){const item=$(event.currentTarget).closest(".item"),itemId=item.data("item-id"),CoCId=item.data("cocid"),itemIndex=this.item.system[collectionName].findIndex((i=>itemId&&i._id===itemId||CoCId&&i===CoCId));if(itemIndex>-1){const collection=this.item.system[collectionName]?foundry.utils.duplicate(this.item.system[collectionName]):[];collection.splice(itemIndex,1),await this.item.update({[`system.${collectionName}`]:collection})}}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheet","setup"],template:"systems/CoC7/templates/items/setup.html",width:565,height:530,dragDrop:[{dragSelector:".item"}],scrollY:[".tab.description"],tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-body",initial:"description"}]})}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(){const sheetData=super.getData();sheetData.hasOwner=!0===this.item.isEmbedded;const era=Object.entries(this.item.flags?.CoC7?.cocidFlag?.eras??{}).filter((e=>e[1])).map((e=>e[0])),items=await game.system.api.cocid.expandItemArray({itemList:this.item.system.items,era:void 0===era[0]||era[0]});sheetData.skills=items.filter((it=>"skill"===it.type)),sheetData.otherItems=items.filter((it=>"skill"!==it.type)),sheetData.skillListEmpty=0===sheetData.skills.length,sheetData.itemsListEmpty=0===sheetData.otherItems.length,sheetData.skills.sort(CoC7Utilities.sortByNameKey),sheetData._eras=[];for(const[key,value]of Object.entries(COC7.eras))sheetData._eras.push({id:key,name:game.i18n.localize(value),isEnabled:!0===(this.item.flags?.CoC7?.cocidFlag?.eras??{})[key]});sheetData._eras.sort(CoC7Utilities.sortByNameKey),sheetData._monetaryFormats=[];for(const key in COC7.monetaryFormats)sheetData._monetaryFormats.push({key,val:game.i18n.localize(COC7.monetaryFormats[key])});sheetData.showCurrencySymbol=["decimalLeft","decimalRight","integerLeft","integerRight"].includes(sheetData.data.system.monetary.format),sheetData._monetaryTypes=[];for(const key in COC7.monetaryTypes)(0===COC7.monetaryTypes[key].filter.length||COC7.monetaryTypes[key].filter.includes(sheetData.data.system.monetary.format))&&sheetData._monetaryTypes.push({key,val:game.i18n.localize(COC7.monetaryTypes[key].name)});return sheetData.oneBlockBackStory=game.settings.get("CoC7","oneBlockBackstory"),sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData.enrichedBackstory=await TextEditor.enrichHTML(sheetData.data.system.backstory,{async:!0,secrets:sheetData.editable}),sheetData.isKeeper=game.user.isGM,sheetData}_updateObject(event,formData){const system=foundry.utils.expandObject(formData)?.system;system.bioSections&&(formData["system.bioSections"]=Object.values(system.bioSections||[])),system.monetary.values&&(formData["system.monetary.values"]=Object.values(system.monetary.values||[])),"system.characteristics.points.enabled"===event.currentTarget?.name&&(formData["system.characteristics.rolls.enabled"]=!event.currentTarget.checked),"system.characteristics.rolls.enabled"===event.currentTarget?.name&&(formData["system.characteristics.points.enabled"]=!event.currentTarget.checked),super._updateObject(event,formData)}}class CoC7SkillSheet extends ItemSheet{constructor(...args){super(...args),this._sheetTab="items"}static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheet","item"],width:520,height:480,scrollY:[".tab.description"],tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-body",initial:"description"}]})}get template(){return`systems/CoC7/templates/items/${this.item.type}-sheet.html`}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(){const sheetData=super.getData();sheetData.hasOwner=!0===this.item.isEmbedded,sheetData.hadNonCharacterOwner=sheetData.hasOwner&&"character"!==this.actor?.type,sheetData.effects=CoC7ActiveEffect.prepareActiveEffectCategories(this.item.effects),sheetData._properties=[];for(const[key,value]of Object.entries(COC7.skillProperties))sheetData._properties.push({id:key,name:value,isEnabled:!0===this.item.system.properties[key]});sheetData._eras=[];for(const[key,value]of Object.entries(COC7.eras))sheetData._eras.push({id:key,name:game.i18n.localize(value),isEnabled:!0===(this.item.flags?.CoC7?.cocidFlag?.eras??{})[key]});return sheetData._eras.sort(CoC7Utilities.sortByNameKey),sheetData.isSpecialized=this.item.system.properties.special,sheetData.canModifySpec=!this.item.system.properties.firearm&&!this.item.system.properties.fighting,sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData.isKeeper=game.user.isGM,sheetData}activateListeners(html){super.activateListeners(html),this.options.editable&&html.find(".toggle-switch").click(this._onClickToggle.bind(this))}async _onClickToggle(event){event.preventDefault();const propertyId=event.currentTarget.closest(".toggle-switch").dataset.property;await this.item.toggleProperty(propertyId,isCtrlKey(event))}async _updateObject(event,formData){const skillName=formData["system.skillName"]||this.item.system.skillName;if(this.item.system.properties?.special){const specialization=formData["system.specialization"]||this.item.system.specialization;formData.name=specialization+" ("+skillName+")"}else formData.name=skillName;return super._updateObject(event,formData)}}class CoC7SpellSheet extends ItemSheet{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{template:"systems/CoC7/templates/items/spell/main.html",classes:["coc7","item","spell"],width:500,height:"auto",resizable:!1,scrollY:[".body"],tabs:[{navSelector:".navigation",contentSelector:".body",initial:"description"}]})}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(){const sheetData=super.getData();return sheetData.hasOwner=!0===this.item.isEmbedded,sheetData.isKeeper=game.user.isGM,sheetData.isOwner=this.item.isOwner,sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData}activateListeners(html){super.activateListeners(html),html.find(".option").click((event=>this.modifyType(event))),html.find("#cast-spell").click((event=>{event.preventDefault(),this.item.cast()}))}modifyType(event){event.preventDefault(),event.stopPropagation();return $(event.currentTarget).prev().trigger("click")}}class CoC7StatusSheet extends ItemSheet{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheet","status"],template:"systems/CoC7/templates/items/status.html",width:525,height:480,scrollY:[".tab.description"],tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-body",initial:"description"}]})}activateListeners(html){super.activateListeners(html),html.find(".effect-control").click((ev=>CoC7ActiveEffect.onManageActiveEffect(ev,this.item)))}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(){const sheetData=super.getData();sheetData.effects=CoC7ActiveEffect.prepareActiveEffectCategories(this.item.effects,{status:!1}),sheetData.itemProperties=[];for(const[key,value]of Object.entries(this.item.system.type))value&&sheetData.itemProperties.push(COC7.statusType[key]?COC7.statusType[key]:null);return sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionNotes=await TextEditor.enrichHTML(sheetData.data.system.description.notes,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData.isKeeper=game.user.isGM,sheetData}}class CoC7TalentSheet extends ItemSheet{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheet","talent"],template:"systems/CoC7/templates/items/talent.html",width:525,height:480,scrollY:[".tab.description"],tabs:[{navSelector:".sheet-navigation",contentSelector:".sheet-body",initial:"description"}]})}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(){const sheetData=super.getData();sheetData.itemProperties=[];for(const[key,value]of Object.entries(this.item.system.type))value&&sheetData.itemProperties.push(COC7.talentType[key]?COC7.talentType[key]:null);return sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionNotes=await TextEditor.enrichHTML(sheetData.data.system.description.notes,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData.isKeeper=game.user.isGM,sheetData}}class CoC7VehicleSheet extends CoC7ActorSheet{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheetV2","actor","item","vehicle"],width:555,height:420,resizable:!0,template:"systems/CoC7/templates/actors/vehicle.html",dragDrop:[{dragSelector:".actor",dropSelector:".dropZone"}],tabs:[{navSelector:".sheet-nav",contentSelector:".sheet-body",initial:"description"}]})}async getData(){const sheetData=await super.getData();sheetData.properties=[],this.actor.system.properties.armed&&sheetData.properties.push(game.i18n.localize("CoC7.ArmedVehicle"));const expanded=this.actor.getFlag("CoC7","expanded");return sheetData.expanded=void 0===expanded||expanded,sheetData.expanded?sheetData.options.height=420:sheetData.options.height="auto",sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionNotes=await TextEditor.enrichHTML(sheetData.data.system.description.notes,{async:!0,secrets:sheetData.editable}),sheetData}activateListeners(html){super.activateListeners(html),html.find(".add-armor").click((async()=>await this._onAddArmor())),html.find(".remove-armor").click((async event=>await this._onRemoveArmor(event))),html.find(".expand-button").click(this._onToggleExpand.bind(this))}async _onToggleExpand(){const expanded=this.actor.getFlag("CoC7","expanded");expanded?(this.oldSize=this.position.height,this.position.height="auto"):this.position.height=this.oldSize||420,await this.actor.setFlag("CoC7","expanded",!expanded)}async _onAddArmor(){const locations=foundry.utils.duplicate(this.actor.system.attribs.armor.locations||[]);locations.push({name:null,value:null}),await this.actor.update({"system.attribs.armor.locations":locations})}async _onRemoveArmor(event){const index=event.currentTarget.closest(".armor").dataset.index,locations=foundry.utils.duplicate(this.actor.system.attribs.armor.locations||null);locations&&(locations.splice(index,1),await this.actor.update({"system.attribs.armor.locations":locations}))}onCloseSheet(){super.onCloseSheet()}_updateObject(event,formData){const system=foundry.utils.expandObject(formData)?.system;system.attribs.armor.locations&&(formData["system.attribs.armor.locations"]=Object.values(system.attribs.armor.locations||[])),super._updateObject(event,formData)}}class CoC7WeaponSheet extends ItemSheet{static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{classes:["coc7","sheet","item"],width:545,height:480,tabs:[{navSelector:".sheet-tabs",contentSelector:".sheet-body",initial:"skills"}]})}get template(){return"systems/CoC7/templates/items/weapon-sheet.html"}_getHeaderButtons(){const headerButtons=super._getHeaderButtons();return addCoCIDSheetHeaderButton(headerButtons,this),headerButtons}async getData(){const sheetData=super.getData();sheetData.combatSkill=[],sheetData.hasOwner=!0===this.item.isEmbedded,sheetData.hasOwner&&(sheetData.firearmSkills=this.actor.firearmSkills,sheetData.fightingSkills=this.actor.fightingSkills,sheetData.combatSkill=this.item.actor.items.filter((item=>!("skill"!==item.type||!item.system.properties.combat))),sheetData.combatSkill.sort(CoC7Utilities.sortByNameKey)),sheetData._properties=[];for(const[key,value]of Object.entries(COC7.weaponProperties))sheetData._properties.push({id:key,name:value,isEnabled:!0===this.item.system.properties[key]});sheetData._eras=[];for(const[key,value]of Object.entries(COC7.eras))sheetData._eras.push({price:this.item.system.price[key]??0,id:key,name:game.i18n.localize(value),isEnabled:!0===(this.item.flags?.CoC7?.cocidFlag?.eras??{})[key]});return sheetData._eras.sort(CoC7Utilities.sortByNameKey),sheetData.usesAlternateSkill=!0===this.item.system.properties.auto||!0===this.item.system.properties.brst||!0===this.item.system.properties.thrown,sheetData.enrichedDescriptionValue=await TextEditor.enrichHTML(sheetData.data.system.description.value,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionSpecial=await TextEditor.enrichHTML(sheetData.data.system.description.special,{async:!0,secrets:sheetData.editable}),sheetData.enrichedDescriptionKeeper=await TextEditor.enrichHTML(sheetData.data.system.description.keeper,{async:!0,secrets:sheetData.editable}),sheetData.isKeeper=game.user.isGM,sheetData}activateListeners(html){super.activateListeners(html),this.options.editable&&(html.find(".toggle-switch").click(this._onClickToggle.bind(this)),html.find(".weapon-property").click(this._onPropertyClick.bind(this)))}async _onClickToggle(event){event.preventDefault();const propertyId=event.currentTarget.closest(".toggle-switch").dataset.property;await this.item.toggleProperty(propertyId,isCtrlKey(event))}async _onPropertyClick(event){event.preventDefault();const propertyId=event.currentTarget.closest(".weapon-property").dataset.property;await this.item.toggleProperty(propertyId)}}async function performFilter(app){const appHtml=$("div.app[data-appid="+app.appId+"]"),type=appHtml.find("select[name=coc7type"+app.appId+"]").val(),name=appHtml.find("input[name=search]").val(),eraElement=appHtml.find("select[name=coc7era"+app.appId+"]");let setEra=!1,setType=!1,era="";switch(type){case"occupation":case"setup":case"skill":case"weapon":eraElement.closest("div.era_select").show(),era=eraElement.val(),setType=!0,setEra=!0;break;default:eraElement.closest("div.era_select").hide(),setType=!0}app.options.filterCoC7={type:setType?type:null,era:setEra?era:null};const items=await(game.packs.get(appHtml.data("packId"))?.getDocuments());if(void 0===items)return;const show=[],nameFilter=new RegExp(RegExp.escape(name),"i");for(const[,item]of Object.entries(items)){let filter=!0;if(filter&&""!==name&&(filter=item.name.match(nameFilter)),filter&&""!==type&&(filter=item.type===type),filter&&""!==era){const eras=item.flags?.CoC7?.cocidFlag?.eras;eras&&Object.keys(eras).length>0&&!eras[era]&&(filter=!1)}filter&&show.push(item.id)}appHtml.find("ol.directory-list li").each((function(){this.style.display=show.includes(this.dataset.documentId)?"flex":"none"}))}async function triggerFilterEvent(e){let appId=e.currentTarget.name.replace(/^coc7[^0-9]+(\d+)$/,"$1");"search"===appId&&(appId=$(e.currentTarget).closest("div.app").data("appid")),ui.windows[appId]&&performFilter(ui.windows[appId])}class CoCID{static init(){CONFIG.Actor.compendiumIndexFields.push("flags.CoC7.cocidFlag"),CONFIG.Item.compendiumIndexFields.push("flags.CoC7.cocidFlag"),CONFIG.Item.compendiumIndexFields.push("system.base"),CONFIG.Item.compendiumIndexFields.push("system.properties"),CONFIG.JournalEntry.compendiumIndexFields.push("flags.CoC7.cocidFlag"),CONFIG.Macro.compendiumIndexFields.push("flags.CoC7.cocidFlag"),CONFIG.Playlist.compendiumIndexFields.push("flags.CoC7.cocidFlag"),CONFIG.RollTable.compendiumIndexFields.push("flags.CoC7.cocidFlag"),CONFIG.Scene.compendiumIndexFields.push("flags.CoC7.cocidFlag"),game.system.api={cocid:CoCID}}static regExKey(){return new RegExp("^("+Object.keys(CoCID.gamePropertyLookup).join("|")+")\\.(.*?)\\.(.+)$")}static getPrefix(document){for(const type in CoCID.documentNameLookup)if(document instanceof CoCID.documentNameLookup[type])return type+"."+(document.type??"")+".";return""}static guessId(document){return CoCID.getPrefix(document)+CoC7Utilities.toKebabCase(document.name)}static guessGroupFromKey(id){if(id){const key=id.replace(/([^\\.-]+)$/,"");if("-"===key.substr(-1))return key}return""}static guessGroupFromDocument(document){return CoCID.guessGroupFromKey(document.flags?.CoC7?.cocidFlag?.id)}static eraText(era){return!1===era?game.i18n.localize("CoC7.Any"):(!0===era&&(era=game.settings.get("CoC7","worldEra")),game.i18n.format(COC7.eras[era]??"CoC7.CoCIDFlag.error.unknown-era",{era}))}static async expandItemArray({itemList,lang=game.i18n.lang,era=!0,langFallback=!0,showLoading=!1}={}){let items=[];const cocids=itemList.filter((it=>"string"==typeof it));if(items=itemList.filter((it=>"string"!=typeof it)),cocids.length){const found=await CoCID.fromCoCIDRegexBest({cocidRegExp:CoCID.makeGroupRegEx(cocids),type:"i",lang,era,langFallback,showLoading}),all=[];for(const cocid of cocids){const item=found.find((i=>i.flags.CoC7.cocidFlag.id===cocid));item&&all.push(item)}if(all.length<cocids.length){const notmissing=[];for(const doc of all)notmissing.push(doc.flags.CoC7.cocidFlag.id);!0===era&&(era=game.settings.get("CoC7","worldEra")),ui.notifications.warn(game.i18n.format("CoC7.CoCIDFlag.error.documents-not-found",{cocids:cocids.filter((x=>!notmissing.includes(x))).join(", "),lang,era:CoCID.eraText(era)}))}items=items.concat(all)}return items}static findCocIdInList(cocid,list){let itemName="";const CoCIDKeys=foundry.utils.flattenObject(game.i18n.translations.CoC7.CoCIDFlag.keys);return void 0!==CoCIDKeys[cocid]&&(itemName=CoCIDKeys[cocid]),(void 0===list.filter?Object.values(list):list).filter((i=>i.flags?.CoC7?.cocidFlag?.id===cocid||""!==itemName&&itemName===i.name))}static makeGroupRegEx(cocids){if("string"==typeof cocids)cocids=[cocids];else if(void 0===cocids||"function"!=typeof cocids.filter)return;const splits={},rgx=CoCID.regExKey();for(const i of cocids){const key=i.match(rgx);key&&(void 0===splits[key[1]]&&(splits[key[1]]={}),void 0===splits[key[1]][key[2]]&&(splits[key[1]][key[2]]=[]),splits[key[1]][key[2]].push(key[3]))}const regExParts=[];for(const t in splits){const row=[];for(const s in splits[t])splits[t][s].length>1?row.push(s+"\\.("+splits[t][s].join("|")+")"):row.push(s+"\\."+splits[t][s].join(""));row.length>1?regExParts.push(t+"\\.("+row.join("|")+")"):regExParts.push(t+"\\."+row.join(""))}return regExParts.length>1?new RegExp("^("+regExParts.join("|")+")$"):new RegExp("^"+regExParts.join("")+"$")}static async fromCoCIDRegexAll({cocidRegExp,type,lang=game.i18n.lang,era=!1,scope="match",langFallback=!0,showLoading=!1}={}){if(!cocidRegExp)return[];const result=[];let count=0;if(showLoading&&(["match","all","world"].includes(scope)&&count++,["match","all","compendiums"].includes(scope)&&(count+=game.packs.size)),["match","all","world"].includes(scope)){const worldDocuments=await CoCID.documentsFromWorld({cocidRegExp,type,lang,era,langFallback,progressBar:count});if("match"===scope&&worldDocuments.length)return showLoading&&SceneNavigation.displayProgressBar({label:game.i18n.localize("SETUP.PackagesLoading"),pct:100}),this.filterAllCoCID(worldDocuments,langFallback&&"en"!==lang);result.splice(0,0,...worldDocuments)}if(["match","all","compendiums"].includes(scope)){const compendiaDocuments=await CoCID.documentsFromCompendia({cocidRegExp,type,lang,era,langFallback,progressBar:count});result.splice(result.length,0,...compendiaDocuments)}return showLoading&&SceneNavigation.displayProgressBar({label:game.i18n.localize("SETUP.PackagesLoading"),pct:100}),this.filterAllCoCID(result,langFallback&&"en"!==lang)}static async fromCoCIDAll({cocid,lang=game.i18n.lang,era=!1,scope="match",langFallback=!0,showLoading=!1}={}){if(!cocid||"string"!=typeof cocid)return[];const parts=cocid.match(CoCID.regExKey());return parts?(""===lang&&(lang=game.i18n.lang),CoCID.fromCoCIDRegexAll({cocidRegExp:new RegExp("^"+CoC7Utilities.quoteRegExp(cocid)+"$"),type:parts[1],lang,era,scope,langFallback,showLoading})):[]}static async fromCoCIDRegexBest({cocidRegExp,type,lang=game.i18n.lang,era=!0,langFallback=!0,showLoading=!1}={}){if(!1===era)return ui.notifications.error(game.i18n.format("CoC7.CoCIDFlag.error.unknown-era",{era:game.i18n.localize("CoC7.Any")})),[];const allDocuments=await this.fromCoCIDRegexAll({cocidRegExp,type,lang,era,scope:"all",langFallback,showLoading});return this.filterBestCoCID(allDocuments)}static fromCoCID(cocid,lang=game.i18n.lang,era=!0,langFallback=!0){return!1===era?(ui.notifications.error(game.i18n.format("CoC7.CoCIDFlag.error.unknown-era",{era:game.i18n.localize("CoC7.Any")})),[]):CoCID.fromCoCIDBest({cocid,lang,era,langFallback})}static fromCoCIDBest({cocid,lang=game.i18n.lang,era=!0,langFallback=!0,showLoading=!1}={}){if(!cocid||"string"!=typeof cocid)return[];if(!1===era)return ui.notifications.error(game.i18n.format("CoC7.CoCIDFlag.error.unknown-era",{era:game.i18n.localize("CoC7.Any")})),[];const type=cocid.split(".")[0],cocidRegExp=new RegExp("^"+CoC7Utilities.quoteRegExp(cocid)+"$");return CoCID.fromCoCIDRegexBest({cocidRegExp,type,lang,era,langFallback,showLoading})}static filterBestCoCID(documents){const bestMatchDocuments=new Map;for(const doc of documents){const docCoCID=doc.getFlag("CoC7","cocidFlag")?.id;if(docCoCID){const currentDoc=bestMatchDocuments.get(docCoCID);if(void 0===currentDoc){bestMatchDocuments.set(docCoCID,doc);continue}if(!(""===(doc.pack??"")||""!==(currentDoc?.pack??"")))continue;let docPriority=parseInt(doc.getFlag("CoC7","cocidFlag")?.priority??Number.MIN_SAFE_INTEGER,10);docPriority=isNaN(docPriority)?Number.MIN_SAFE_INTEGER:docPriority;let existingPriority=parseInt(currentDoc.getFlag("CoC7","cocidFlag")?.priority??Number.MIN_SAFE_INTEGER,10);existingPriority=isNaN(existingPriority)?Number.MIN_SAFE_INTEGER:existingPriority;if(!(docPriority>=existingPriority))continue;bestMatchDocuments.set(docCoCID,doc)}}return[...bestMatchDocuments.values()]}static filterAllCoCID(documents,langFallback){if(!langFallback)return documents;const bestMatchDocuments=new Map;for(const doc of documents){const docCoCID=doc.getFlag("CoC7","cocidFlag")?.id;if(docCoCID){const docEras=Object.entries(doc.getFlag("CoC7","cocidFlag")?.eras??{}).filter((e=>e[1])).map((e=>e[0])).sort().join("/");let docPriority=parseInt(doc.getFlag("CoC7","cocidFlag")?.priority??Number.MIN_SAFE_INTEGER,10);docPriority=isNaN(docPriority)?Number.MIN_SAFE_INTEGER:docPriority;const key=docCoCID+"/"+docEras+"/"+(isNaN(docPriority)?Number.MIN_SAFE_INTEGER:docPriority),currentDoc=bestMatchDocuments.get(key);if(void 0===currentDoc){bestMatchDocuments.set(key,doc);continue}const docLang=doc.getFlag("CoC7","cocidFlag")?.lang??"en",existingLang=currentDoc?.getFlag("CoC7","cocidFlag")?.lang??"en";"en"===existingLang&&existingLang!==docLang&&bestMatchDocuments.set(key,doc)}}return[...bestMatchDocuments.values()]}static async documentsFromWorld({cocidRegExp,type,lang=game.i18n.lang,era=!1,langFallback=!0,progressBar=0}={}){if(!cocidRegExp)return[];""===lang&&(lang=game.i18n.lang),!0===era&&(era=game.settings.get("CoC7","worldEra")),progressBar>0&&SceneNavigation.displayProgressBar({label:game.i18n.localize("SETUP.PackagesLoading"),pct:Math.floor(100/progressBar)});const gameProperty=CoCID.getGameProperty(`${type}..`),candidateDocuments=game[gameProperty]?.filter((d=>{const cocidFlag=d.getFlag("CoC7","cocidFlag");if(void 0===cocidFlag)return!1;const eras=cocidFlag.eras??[],matchingEras=!1===era||0===Object.entries(eras).length||Object.prototype.hasOwnProperty.call(eras,era)&&eras[era];return cocidRegExp.test(cocidFlag.id)&&[lang,langFallback?"en":"-"].includes(cocidFlag.lang)&&matchingEras}));return void 0===candidateDocuments?[]:candidateDocuments.sort(CoCID.compareCoCIDPrio)}static async documentsFromCompendia({cocidRegExp,type,lang=game.i18n.lang,era=!1,langFallback=!0,progressBar=0}){if(!cocidRegExp)return[];""===lang&&(lang=game.i18n.lang),!0===era&&(era=game.settings.get("CoC7","worldEra"));const eraText=CoCID.eraText(era),documentType=CoCID.getDocumentType(type).name,candidateDocuments=[];let count=1;for(const pack of game.packs)if(progressBar>0&&(SceneNavigation.displayProgressBar({label:game.i18n.localize("SETUP.PackagesLoading"),pct:Math.floor(100*count/progressBar)}),count++),pack.documentName===documentType){pack.indexed||await pack.getIndex();const indexInstances=pack.index.filter((i=>{const cocidFlag=i.flags?.CoC7?.cocidFlag;if(void 0===cocidFlag)return!1;const eras=cocidFlag.eras??[],matchingEras=!1===era||0===Object.entries(eras).length||Object.prototype.hasOwnProperty.call(eras,era)&&eras[era];return cocidRegExp.test(cocidFlag.id)&&[lang,langFallback?"en":"-"].includes(cocidFlag.lang)&&matchingEras}));for(const index of indexInstances){const document=await pack.getDocument(index._id);if(!document){const msg=game.i18n.format("CoC7.CoCIDFlag.error.document-not-found",{cocid:cocidRegExp,lang,era:eraText});throw ui.notifications.error(msg),console.log("CoC7 |",msg,index),new Error}candidateDocuments.push(document)}}return candidateDocuments.sort(CoCID.compareCoCIDPrio)}static compareCoCIDPrio(a,b){return b.getFlag("CoC7","cocidFlag")?.priority-a.getFlag("CoC7","cocidFlag")?.priority}static getGameProperty(cocid){const type=cocid.split(".")[0],gameProperty=CoCID.gamePropertyLookup[type];if(!gameProperty)throw ui.notifications.warn(game.i18n.format("CoC7.CoCIDFlag.error.incorrect.type")),console.log("CoC7 | ",cocid),new Error;return gameProperty}static get gamePropertyLookup(){return{a:"actors",c:"cards",i:"items",je:"journal",m:"macros",p:"playlists",rt:"tables",s:"scenes"}}static getDocumentType(cocid){const type=cocid.split(".")[0],documentType=CoCID.documentNameLookup[type];if(!documentType)throw ui.notifications.warn(game.i18n.format("CoC7.CoCIDFlag.error.incorrect.type")),console.log("CoC7 | ",cocid),new Error;return documentType}static get documentNameLookup(){return{a:Actor,c:Card,i:Item,je:JournalEntry,m:Macro,p:Playlist,rt:RollTable,s:Scene}}}function init_listen(){Hooks.once("init",(async()=>{CONFIG.ActiveEffect.documentClass=CoC7ActiveEffect,CONFIG.Actor.documentClass=CoCActor,CONFIG.Actor.documentClasses={vehicle:CoC7Vehicle},CONFIG.Item.documentClass=CoC7Item,CONFIG.Item.documentClasses={book:CoC7Book,spell:CoC7Spell,chase:CoC7Chase,skill:CoC7Skill},async function(){loadTemplates(["systems/CoC7/templates/actors/parts/npc-skills.html","systems/CoC7/templates/actors/parts/npc-combat.html","systems/CoC7/templates/actors/parts/actor-inventory.html","systems/CoC7/templates/actors/parts/actor-inventory-items.html","systems/CoC7/templates/actors/parts/actor-background.html","systems/CoC7/templates/common/active-effects.hbs","systems/CoC7/templates/actors/parts/actor-mythos-enounters.hbs","systems/CoC7/templates/actors/parts/actor-keeper-mythos-enounters.hbs","systems/CoC7/templates/actors/parts/actor-skills-v2.html","systems/CoC7/templates/actors/parts/character-development-v2.html","systems/CoC7/templates/actors/parts/development-controls.html","systems/CoC7/templates/actors/parts/vitals.html","systems/CoC7/templates/actors/parts/combat.html","systems/CoC7/templates/actors/character-sheet-v2.html","systems/CoC7/templates/actors/character/summary.html","systems/CoC7/templates/items/book/details.html","systems/CoC7/templates/items/spell/details.html","systems/CoC7/templates/apps/investigator-wizard/introduction.hbs","systems/CoC7/templates/apps/investigator-wizard/configuration.hbs","systems/CoC7/templates/apps/investigator-wizard/select-setup.hbs","systems/CoC7/templates/apps/investigator-wizard/select-archetype.hbs","systems/CoC7/templates/apps/investigator-wizard/select-occupation.hbs","systems/CoC7/templates/apps/investigator-wizard/set-characteristics.hbs","systems/CoC7/templates/apps/investigator-wizard/set-attributes.hbs","systems/CoC7/templates/apps/investigator-wizard/view-attributes.hbs","systems/CoC7/templates/apps/investigator-wizard/set-investigator.hbs","systems/CoC7/templates/apps/investigator-wizard/set-occupation-skills.hbs","systems/CoC7/templates/apps/investigator-wizard/toggle-skill.hbs","systems/CoC7/templates/apps/investigator-wizard/set-archetype-skills.hbs","systems/CoC7/templates/apps/investigator-wizard/points-skills.hbs","systems/CoC7/templates/apps/investigator-wizard/backstory.hbs","systems/CoC7/templates/apps/investigator-wizard/create.hbs","systems/CoC7/templates/chat/messages/roll-container.hbs","systems/CoC7/templates/chat/messages/roll-dice.hbs"])}(),function(){if(game.settings.registerMenu("CoC7","gameRules",{name:"CoC7.Settings.Rules.Name",label:"CoC7.Settings.Rules.Label",hint:"CoC7.Settings.Rules.Hint",icon:"fas fa-book",type:CoC7GameRuleSettings,restricted:!0}),CoC7GameRuleSettings.registerSettings(),game.settings.register("CoC7","useContextMenus",{name:"SETTINGS.UseContextMenus",hint:"SETTINGS.UseContextMenusHint",scope:"world",config:!0,type:Boolean,default:!1}),game.settings.register("CoC7","dholeUploadDirectory",{name:"CoC7.Settings.DholeUpload.Directory.Name",hint:"CoC7.Settings.DholeUpload.Directory.Hint",scope:"world",config:!0,type:CoC7DirectoryPicker.DefaultDirectory,default:"[data] worlds/"+game.world.id+"/dhole-images"}),game.settings.register("CoC7","worldEra",{name:"CoC7.Settings.WorldEra.Name",hint:"CoC7.Settings.WorldEra.Hint",scope:"world",config:!0,default:"standard",type:String,choices:COC7.eras,onChange:()=>{ui.players.render(!0)}}),game.settings.register("CoC7","dropCoCID",{name:"CoC7.Settings.DropCoCID.Name",hint:"CoC7.Settings.DropCoCID.Hint",scope:"world",config:!0,default:"",type:String,choices:{"":"CoC7.Settings.DropCoCID.Prompt",Y:"CoC7.Settings.DropCoCID.UseCoCID",N:"CoC7.Settings.DropCoCID.IgnoreCoCID"}}),game.settings.register("CoC7","displayInitDices",{name:"SETTINGS.displayInitDices",hint:"SETTINGS.displayInitDicesHint",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register("CoC7","displayInitAsText",{name:"SETTINGS.displayInitAsText",hint:"SETTINGS.displayInitAsTextHint",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register("CoC7","stanbyGMRolls",{name:"SETTINGS.StanbyGMRolls",hint:"SETTINGS.StanbyGMRollsHint",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register("CoC7","allowFlatDiceModifier",{name:"SETTINGS.AllowFlatDiceModifier",hint:"SETTINGS.AllowFlatDiceModifierHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","allowFlatThresholdModifier",{name:"SETTINGS.AllowFlatThresholdModifier",hint:"SETTINGS.AllowFlatThresholdModifierHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","defaultCheckDifficulty",{name:"SETTINGS.DefaultDifficulty",hint:"SETTINGS.DefaultDifficultyHint",scope:"world",config:!0,default:"regular",type:String,choices:{regular:"SETTINGS.CheckDifficultyRegular",unknown:"SETTINGS.CheckDifficultyUnknown"}}),game.settings.register("CoC7","selfRollWhisperTarget",{name:"SETTINGS.SelfRollWhisperTarget",hint:"SETTINGS.SelfRollWhisperTargetHint",scope:"world",config:!0,default:"everyone",type:String,choices:{nobody:"SETTINGS.DoNotAdvise",owners:"SETTINGS.AdviseOwnersOnly",everyone:"SETTINGS.AdviseAllPlayer"}}),game.settings.register("CoC7","trustedCanModfyChatCard",{name:"SETTINGS.TrustedCanModfyChatCard",hint:"SETTINGS.TrustedCanModfyChatCardHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","trustedCanSeeChatCard",{name:"SETTINGS.TrustedCanSeeChatCard",hint:"SETTINGS.TrustedCanSeeChatCardHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","displayActorOnCard",{name:"SETTINGS.DisplayActorOnCard",hint:"SETTINGS.DisplayActorOnCardHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","displayCheckSuccessLevel",{name:"SETTINGS.DisplayCheckSuccessLevel",scope:"client",config:!0,default:!0,type:Boolean}),game.settings.register("CoC7","displayResultType",{name:"SETTINGS.DisplayResultType",scope:"client",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","useToken",{name:"SETTINGS.UseToken",hint:"SETTINGS.UseTokenHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","enableStatusIcons",{name:"SETTINGS.EnableStatusIcons",hint:"SETTINGS.EnableStatusIconsHint",scope:"world",config:!0,type:Boolean,default:!0}),game.settings.register("CoC7","gridSpaces",{name:"SETTINGS.RestrictGridSpaces",hint:"SETTINGS.RestrictGridSpacesHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","distanceElevation",{name:"SETTINGS.CheckElevation",hint:"SETTINGS.CheckElevationHint",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register("CoC7","distanceTheatreOfTheMind",{name:"SETTINGS.SceneDistanceNotCalcualtedNoError",hint:"SETTINGS.SceneDistanceNotCalcualtedNoErrorHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","tokenDropMode",{name:"SETTINGS.TokenDropMode",hint:"SETTINGS.TokenDropModeHint",scope:"world",config:!0,default:"ask",type:String,choices:{ask:"SETTINGS.TokenDropModeAsk",roll:"SETTINGS.TokenDropModeRoll",average:"SETTINGS.TokenDropModeAverage",ignore:"SETTINGS.TokenDropModeIgnore"}}),game.settings.register("CoC7","overrideGameArtwork",{name:"SETTINGS.OverrideGameArtwork",hint:"SETTINGS.OverrideGameArtworkHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.get("CoC7","overrideGameArtwork")&&(game.settings.register("CoC7","artPauseImage",{name:"SETTINGS.ArtPauseImage",hint:"SETTINGS.ArtPauseImageHint",scope:"world",config:!0,default:"systems/CoC7/assets/icons/time-trap.svg",type:String}),game.settings.register("CoC7","artPauseText",{name:"SETTINGS.ArtPauseText",hint:"SETTINGS.ArtPauseTextHint",scope:"world",config:!0,default:"The Blind Idiot God is dreaming...",type:String})),game.settings.register("CoC7","displayPlayerNameOnSheet",{name:"SETTINGS.displayPlayerNameOnSheet",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","toolTipDelay",{name:"CoC7.toolTipDelay",scope:"world",config:!0,default:2e3,type:Number}),game.settings.register("CoC7","showIconsOnly",{name:"SETTINGS.showIconsOnly",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","playerUnlockSheetMode",{name:"SETTINGS.PlayerUnlockSheetMode",scope:"world",config:!0,default:"always",type:String,choices:{always:"SETTINGS.AlwaysEditable",creation:"SETTINGS.CreationModeOnly",never:"SETTINGS.NeverEditable"}}),game.settings.register("CoC7","statusPlayerEditable",{name:"SETTINGS.StatusPlayerEditable",hint:"SETTINGS.StatusPlayerEditableHint",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register("CoC7","oneBlockBackstory",{name:"SETTINGS.OneBlockBackStory",hint:"SETTINGS.OneBlockBackStoryHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","overrideSheetArtwork",{name:"SETTINGS.OverrideSheetArtwork",hint:"SETTINGS.OverrideSheetArtworkHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.get("CoC7","overrideSheetArtwork")){function _setRootFontSize(size){$(":root").css("font-size",size),ui.sidebar.render(!0);for(const[,w]of Object.entries(ui.windows))w.render(!0)}game.settings.register("CoC7","artWorkSheetBackground",{name:"SETTINGS.ArtWorkSheetBackground",hint:"SETTINGS.ArtWorkSheetBackgroundHint",scope:"world",config:!0,default:"url('./assets/images/background.webp') 4 repeat",type:String}),game.settings.register("CoC7","artWorkSheetBackgroundType",{name:"SETTINGS.ArtWorkSheetBackgroundType",scope:"world",config:!0,default:"slice",type:String,choices:{slice:"SETTINGS.BackgroundSlice",auto:"SETTINGS.BackgroundAuto",contain:"SETTINGS.BackgroundContain",cover:"SETTINGS.BackgroundCover"}}),game.settings.register("CoC7","artWorkOtherSheetBackground",{name:"SETTINGS.ArtWorkOtherSheetBackground",hint:"SETTINGS.ArtWorkOtherSheetBackgroundHint",scope:"world",config:!0,default:"url( './assets/images/background.webp')",type:String}),game.settings.register("CoC7","artworkSheetImage",{name:"SETTINGS.ArtworkSheetImage",hint:"SETTINGS.ArtworkSheetImageHint",scope:"world",config:!0,default:"url('./assets/images/tentacles.webp')",type:String}),game.settings.register("CoC7","artworkFrontColor",{name:"SETTINGS.ArtworkFrontColor",hint:"SETTINGS.ArtworkFrontColorHint",scope:"world",config:!0,default:"rgba(43,55,83,1)",type:String}),game.settings.register("CoC7","artworkBackgroundColor",{name:"SETTINGS.ArtworkBackgroundColor",hint:"SETTINGS.ArtworkBackgroundColorHint",scope:"world",config:!0,default:"rgba(103,11,11,1)",type:String}),game.settings.register("CoC7","artworkInteractiveColor",{name:"SETTINGS.ArtworkInteractiveColor",hint:"SETTINGS.ArtworkInteractiveColorHint",scope:"world",config:!0,default:"rgba(103,11,11,1)",type:String}),game.settings.register("CoC7","artworkFixedSkillLength",{name:"SETTINGS.ArtworkFixedSkillLength",hint:"SETTINGS.ArtworkFixedSkillLengthHint",scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register("CoC7","artworkMainFont",{name:"SETTINGS.ArtworkMainFont",scope:"world",config:!0,default:"",type:String}),game.settings.register("CoC7","artworkMainFontBold",{name:"SETTINGS.ArtworkMainFontBold",scope:"world",config:!0,default:"",type:String}),game.settings.register("CoC7","artworkMainFontSize",{name:"SETTINGS.ArtworkMainFontSize",scope:"world",config:!0,default:16,type:Number,onChange:size=>_setRootFontSize(size)})}if(game.settings.register("CoC7","disregardUsePerRound",{name:"SETTINGS.DisregardUsePerRound",hint:"SETTINGS.DisregardUsePerRoundHint",scope:"world",config:!0,default:!1,type:Boolean}),game.settings.register("CoC7","disregardAmmo",{name:"SETTINGS.DisregardAmmo",hint:"SETTINGS.DisregardAmmoHint",scope:"world",config:!0,default:!1,type:Boolean}),game.modules.get("dice-so-nice")?.active){game.settings.register("CoC7","syncDice3d",{name:"SETTINGS.SyncDice3D",hint:"SETTINGS.SyncDice3DHint",scope:"world",config:!0,default:!0,type:Boolean});const[version]=game.modules.get("dice-so-nice")?.version.split(".");!isNaN(Number(version))&&Number(version)>=3&&(game.settings.register("CoC7","tenDieBonus",{name:"SETTINGS.TenDieBonus",hint:"SETTINGS.TenDieBonusHint",scope:"client",config:!0,default:"bronze",type:String}),game.settings.register("CoC7","tenDiePenalty",{name:"SETTINGS.TenDiePenalty",hint:"SETTINGS.TenDiePenaltyHint",scope:"client",config:!0,default:"bloodmoon",type:String}))}game.settings.register("CoC7","debugmode",{name:"SETTINGS.DebugMode",hint:"SETTINGS.DebugModeHint",scope:"client",config:!0,type:Boolean,default:!1}),game.settings.register("CoC7","experimentalFeatures",{name:"SETTINGS.ShowExperimentalFeatures",hint:"SETTINGS.ShowExperimentalFeaturesHint",scope:"world",config:!0,type:Boolean,default:!1}),game.settings.register("CoC7","hiddendevmenu",{name:"Hidden dev menu",hint:"Use at your own risk",scope:"world",config:!1,type:Boolean,default:!1}),game.settings.register("CoC7","developmentEnabled",{name:"Dev phased allowed",scope:"world",config:!1,type:Boolean,default:!1}),game.settings.register("CoC7","showWelcomeMessage",{name:"SETTINGS.showWelcomeMessage",hint:"SETTINGS.showWelcomeMessage",scope:"world",config:!1,default:!0,type:Boolean}),game.settings.register("CoC7","charCreationEnabled",{name:"Char creation allowed",scope:"world",config:!1,type:Boolean,default:!1}),game.settings.register("CoC7","systemUpdateVersion",{name:"System update version",scope:"world",config:!1,type:String,default:"0"}),game.settings.register("CoC7","systemUpdatedModuleVersion",{scope:"world",config:!1,default:{}}),game.settings.register("CoC7","xpEnabled",{name:"Enable XP gain",scope:"world",config:!1,type:Boolean,default:!0}),game.settings.register("CoC7","showInstructions",{name:"Show changelog/instructions",scope:"world",config:!1,type:String,default:"0"}),game.settings.register("CoC7","InvestigatorWizardSetup",{name:"Force specific setup CoC ID for Investigator Wizard",scope:"world",config:!1,type:String,default:""}),game.settings.register("CoC7","InvestigatorWizardQuantity",{name:"Number of investigators a single user without create actor rights can own",scope:"world",config:!1,type:Number,default:0}),game.settings.register("CoC7","InvestigatorWizardOwnership",{name:"Default permissions for non owner players",scope:"world",config:!1,type:Number,default:CONST.DOCUMENT_OWNERSHIP_LEVELS.NONE}),game.settings.register("CoC7","InvestigatorWizardRerolls",{name:"Allow players to reroll characteristics",scope:"world",config:!1,type:Boolean,default:!1}),game.settings.register("CoC7","InvestigatorWizardPointBuy",{name:"Force point buy instead of setup choice",scope:"world",config:!1,type:Boolean,default:!1}),game.settings.register("CoC7","InvestigatorWizardQuickFire",{name:"Quick fire setup values",scope:"world",config:!1,type:Array,default:[]}),CONFIG.Combat.initiative={formula:"@characteristics.dex.value",decimals:4},CONFIG.debug.hooks=!!game.settings.get("CoC7","debugmode"),CONFIG.Dice.terms.t=CoC7DecaderDie,CONFIG.Dice.terms.o=CoC7DecaderDieOther}(),Actors.unregisterSheet("core",ActorSheet),Actors.registerSheet("CoC7",CoC7NPCSheet,{types:["npc"],makeDefault:!0}),Actors.registerSheet("CoC7",CoC7VehicleSheet,{types:["vehicle"],makeDefault:!0}),Actors.registerSheet("CoC7",CoC7CreatureSheet,{types:["creature"],makeDefault:!0}),Actors.registerSheet("CoC7",CoC7ContainerSheet,{types:["container"],makeDefault:!0}),Actors.registerSheet("CoC7",CoC7CharacterSheet,{types:["character"],makeDefault:!0}),Items.unregisterSheet("core",ItemSheet),Items.registerSheet("CoC7",CoC7SkillSheet,{types:["skill"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7WeaponSheet,{types:["weapon"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7BookSheet,{types:["book"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7SpellSheet,{types:["spell"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7TalentSheet,{types:["talent"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7StatusSheet,{types:["status"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7OccupationSheet,{types:["occupation"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7ArchetypeSheet,{types:["archetype"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7SetupSheet,{types:["setup"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7ChaseSheet,{types:["chase"],makeDefault:!0}),Items.registerSheet("CoC7",CoC7ItemSheet,{types:["item"]}),Items.registerSheet("CoC7",CoC7ItemSheetV2,{types:["item"],makeDefault:!0}),Scenes.unregisterSheet("core",SceneConfig),Scenes.registerSheet("CoC7",CoC7SceneConfig,{makeDefault:!0}),Journal.unregisterSheet("core",JournalSheet),Journal.registerSheet("CoC7",CoC7JournalSheet,{makeDefault:!0}),RollTables.unregisterSheet("core",RollTableConfig),RollTables.registerSheet("CoC7",CoC7RollTableConfig,{makeDefault:!0}),Macros.unregisterSheet("core",MacroConfig),Macros.registerSheet("CoC7",CoC7MacroConfig,{makeDefault:!0}),Playlists.unregisterSheet("core",PlaylistConfig),Playlists.registerSheet("CoC7",CoC7PlaylistConfig,{makeDefault:!0}),Handlebars.registerHelper("rollActorImg",(function(actorKey){return chatHelper.getActorImgFromKey(actorKey)||"../icons/svg/mystery-man-black.svg"})),Handlebars.registerHelper("localizeRollName",(function(options){const difficulty=options.hash.difficulty!==CoC7Check.difficultyLevel.regular&&CoC7Check.difficultyString(options.hash.difficulty),modifier=options.hash.modifier>0?`+${options.hash.modifier}`:options.hash.modifier<0&&options.hash.modifier.toString();return game.i18n.format("CoC7.LinkCheck"+(difficulty?"Diff":"")+(modifier?"Modif":"")+(options.hash.pushing?"Pushing":""),{difficulty,modifier,name:options.hash.name})})),function(){Hooks.on("renderCompendium",(async(app,html,data)=>{if("Item"===app.collection.documentName){const input=$("input[name=search]",html);input.after(input.clone()),input.remove(),await app.collection.getIndex();const types=[...new Set(data.index.filter((i=>"#[CF_tempEntity]"!==i.name)).map((item=>item.type)))],select=[],selectedType=app.options.filterCoC7?.type??"",selectedEra=app.options.filterCoC7?.era??"";select.push('<option value="">'+game.i18n.localize("CoC7.All")+"</option>");const groupTypes=[{key:"archetype",name:"CoC7.Entities.Archetype"},{key:"book",name:"CoC7.Entities.Book"},{key:"item",name:"CoC7.Entities.Item"},{key:"occupation",name:"CoC7.Entities.Occupation"},{key:"setup",name:"CoC7.Entities.Setup"},{key:"skill",name:"CoC7.Entities.Skill"},{key:"spell",name:"CoC7.Entities.Spell"},{key:"status",name:"CoC7.Entities.Status"},{key:"talent",name:"CoC7.Entities.Talent"},{key:"weapon",name:"CoC7.Entities.Weapon"}];for(const groupType of groupTypes)types.includes(groupType.key)&&select.push('<option value="'+groupType.key+'"'+(selectedType===groupType.key?' selected="selected"':"")+">"+game.i18n.localize(groupType.name)+"</option>");const eras=[];eras.push('<option value="">'+game.i18n.localize("CoC7.All")+"</option>");for(const era of Object.entries(COC7.eras).map((e=>({id:e[0],name:game.i18n.localize(e[1])}))).sort(CoC7Utilities.sortByNameKey))eras.push('<option value="'+era.id+'"'+(selectedEra===era.id?' selected="selected"':"")+">"+era.name+"</option>");html.data("packId",app.metadata.id);let uncommon=game.i18n.localize("CoC7.SkillRarityShort");"CoC7.SkillRarityShort"===uncommon&&(uncommon="??"),html.find("li.directory-item").each((function(){const row=$(this);let item=[];item=void 0!==data.index?data.index.find((i=>i._id===row.data("document-id"))):app.collection.index.get(row.data("document-id")),item&&"skill"===item.type&&row.find("a").html(item.name+" ("+(item.system?.base??"?")+"%"+(item.system?.properties?.rarity?" "+uncommon:"")+")")})),html.find("header.directory-header").after('<div class="compendiumfilter"><div class="header-search flexrow"><i class="fas fa-layer-group"></i><select name="coc7type'+app.appId+'" style="">'+select.join("")+'</select></div><div class="header-search flexrow era_select" style="display:none"><i class="fas fa-layer-group"></i><select name="coc7era'+app.appId+'" style="">'+eras.join("")+"</select></div></div>"),html.find("select").change(triggerFilterEvent.bind(this)),html.find("input").keyup(triggerFilterEvent.bind(this)),""!==selectedType&&performFilter(app)}}))}(),CoCID.init(),CoC7Link.init(),Hooks.once("diceSoNiceReady",(dice3d=>{for(const system in dice3d.DiceFactory.systems){const d100=dice3d.DiceFactory.systems[system].dice.find((d=>"d100"===d.type));if(void 0!==d100){if(void 0===dice3d.DiceFactory.systems[system].dice.find((d=>"dt"===d.type))){const diceDecader=Object.assign(Object.create(Object.getPrototypeOf(d100)),d100);diceDecader.type="dt",dice3d.DiceFactory.systems[system].dice.push(diceDecader)}if(void 0===dice3d.DiceFactory.systems[system].dice.find((d=>"do"===d.type))){const diceDecader=Object.assign(Object.create(Object.getPrototypeOf(d100)),d100);diceDecader.type="do",dice3d.DiceFactory.systems[system].dice.push(diceDecader)}}}}))}))}class CoC7Tooltips{constructor(){this.ToolTipHover=null,this.toolTipTimer=null}displayToolTip(toolTip){if(void 0!==this.ToolTipHover){const bounds=this.ToolTipHover.getBoundingClientRect();if(!isNaN(bounds.left||"")&&!isNaN(bounds.top||"")){let left=bounds.left,top=bounds.top;const heightText=$(this.ToolTipHover).outerHeight();$("body").append('<div id="help-tooltip">'+toolTip+"</div>");const tip=$("#help-tooltip"),heightTip=tip.outerHeight(),widthTip=tip.outerWidth();window.innerHeight<1.5*heightText+heightTip+top?top-=heightTip:top+=1.5*heightText,window.innerWidth<widthTip+left&&(left=window.innerWidth-widthTip),tip.css({left:left+"px",top:top+"px"})}}}toolTipLeave(event){game.CoC7Tooltips.ToolTipHover===event.currentTarget&&(clearTimeout(game.CoC7Tooltips.toolTipTimer),game.CoC7Tooltips.ToolTipHover=null,$("#help-tooltip").remove())}}let CoC7Tour=class{};"undefined"!=typeof Tour&&(CoC7Tour=class extends Tour{async waitForElement(selector){return new Promise(((resolve,reject)=>{if(document.querySelector(selector))return void resolve();new MutationObserver(((mutations,observer)=>{document.querySelectorAll(selector).forEach((el=>{resolve(),observer.disconnect()}))})).observe(document.body,{childList:!0,subtree:!0})}))}async _preStep(){if(await super._preStep(),0===this.stepIndex)for(const app of Object.values(ui.windows))app.close();await this.waitForElement(this.currentStep.selector),void 0!==this.currentStep.sidebarTab&&ui.sidebar.activateTab(this.currentStep.sidebarTab)}async _postStep(){if(await super._postStep(),!(this.stepIndex<0)&&this.hasNext&&this.currentStep.action)if(this.isResetting)this.isResetting=!1;else if("click"===this.currentStep.action)document.querySelector(this.currentStep.selector).click()}async reset(){"completed"!==this.status&&(this.isResetting=!0),await super.reset()}});class EnableVariantRulesEn extends CoC7Tour{constructor(config){super(foundry.utils.mergeObject({title:"Enable optional/variant rules.",description:"Learn how to enable Pulp Cthulhu rules, or other variant rules",canBeResumed:!1,display:!0,steps:[{id:"goto-settings",selector:'.tabs>a[data-tab="settings"]',title:"COC7.Tour.GotoSettingsTitle",content:"COC7.Tour.GotoSettingsContent",sidebarTab:"settings"},{id:"goto-configure",selector:'[data-action="configure"]',title:"COC7.Tour.GotoConfigureTitle",content:"COC7.Tour.GotoConfigureContent",action:"click"},{id:"goto-system-settings",selector:'[data-tab="system"]',title:"COC7.Tour.GotoSystemSettingsTitle",content:"COC7.Tour.GotoSystemSettingsContent",action:"click"},{id:"goto-game-rules",selector:'[data-category="system"] [data-key="CoC7.gameRules"]',title:"COC7.Tour.GotoGameRulesTitle",content:"COC7.Tour.GotoGameRulesContent",action:"click"},{id:"save-game-rules",selector:"#rules-settings [name=submit]",title:"COC7.Tour.SaveGameRulesTitle",content:"COC7.Tour.SaveGameRulesContent"}],localization:{"COC7.Tour.GotoSettingsTitle":"Game Settings","COC7.Tour.GotoSettingsContent":"Go to the Game Settings tab","COC7.Tour.GotoConfigureTitle":"Configure Settings","COC7.Tour.GotoConfigureContent":"Click on the Configure Settings button","COC7.Tour.GotoSystemSettingsTitle":"System Settings","COC7.Tour.GotoSystemSettingsContent":"Go to the System Settings tab","COC7.Tour.GotoGameRulesTitle":"Configure Variant/Optional Rules","COC7.Tour.GotoGameRulesContent":"Click on the Configure Variant/Optional Rules button","COC7.Tour.SaveGameRulesTitle":"Save rule changes","COC7.Tour.SaveGameRulesContent":"Once you have made your changes click on the Save Changes button"}},config))}}class EnableVariantRulesFr extends EnableVariantRulesEn{constructor(config){super({title:"Activez les règles optionnelles.",description:"Activez les règles optionelles et Pulp Cthulhu",localization:{"COC7.Tour.GotoSettingsTitle":"Paramètres","COC7.Tour.GotoSettingsContent":'Ouvrir l\'onglet "Paramètres"',"COC7.Tour.GotoConfigureTitle":"Configuration des options","COC7.Tour.GotoConfigureContent":'Cliquez sur "Configuration des options"',"COC7.Tour.GotoSystemSettingsTitle":"Système de jeu","COC7.Tour.GotoSystemSettingsContent":'Ouvrez l\'onglet "Système de jeu"',"COC7.Tour.GotoGameRulesTitle":"Configurer les variantes/règles optionnelles","COC7.Tour.GotoGameRulesContent":'Clickez sur le boutton "Configurer les variantes/règles optionnelles"',"COC7.Tour.SaveGameRulesTitle":"Sauvegarder les modifications","COC7.Tour.SaveGameRulesContent":'Apres avoir choisis les options cliquez sur le bouton "Sauvegarder les modifications"'}})}}function ready_listen(){Hooks.once("ready",(async()=>{console.log("Call of Cthulhu 7th Edition | Ready"),game.settings.get("CoC7","showWelcomeMessage")&&game.user.isGM,game.CoC7Tooltips=new CoC7Tooltips;const instructionsVersion=game.settings.get("CoC7","showInstructions");let lang=game.i18n.lang;const readMe={en:"sxB2OXbfwV6M0nyQ",es:"35FM7ZOdzC6L2xlj",fr:"tdakyzTVOQsAMdSm"};void 0===readMe[lang]&&(lang="en"),CONFIG.CoC7=CONFIG.CoC7??{},CONFIG.CoC7.Manual=readMe[lang],foundry.utils.isNewerVersion(game.system.version,instructionsVersion??"0")&&((await game.packs.get("CoC7.system-doc").getDocument(CONFIG.CoC7.Manual))?.sheet.render(!0),game.settings.set("CoC7","showInstructions",game.system.version)),async function(){try{let lang=game.i18n.lang;const tours={en:{"enable-variant-rules":EnableVariantRulesEn},fr:{"enable-variant-rules":EnableVariantRulesFr}};void 0===tours[lang]&&(lang="en");for(const tourName in tours[lang])game.tours.register("CoC7",tourName,new tours[lang][tourName])}catch(err){console.error("TOUR ERROR",err)}}()}))}const CoC7Hooks={listen(){Hooks.on("createToken",(async(tokenDocument,options,craetorId)=>{if(game.user.id===craetorId&&("icons/svg/mystery-man.svg"===tokenDocument.texture.src&&tokenDocument.texture.src!==tokenDocument._object.actor.img&&(tokenDocument.texture.src=tokenDocument._object.actor.img),"character"!==tokenDocument._object.actor.type&&(tokenDocument._object.actor.hasRollableCharacteristics||tokenDocument._object.actor.hosRollableSkills)))switch(game.settings.get("CoC7","tokenDropMode")){case"ask":new Dialog({title:game.i18n.localize("CoC7.TokenCreationRoll.Title"),content:game.i18n.localize("CoC7.TokenCreationRoll.Prompt"),buttons:{roll:{label:game.i18n.localize("CoC7.TokenCreationRoll.ButtonRoll"),callback:async()=>{await tokenDocument._object.actor.rollCharacteristicsValue(),ui.notifications.info(game.i18n.format("CoC7.TokenCreationRoll.Rolled",{name:tokenDocument.object.actor.name})),tokenDocument._object.actor.locked=!0}},average:{label:game.i18n.localize("CoC7.TokenCreationRoll.ButtonAverage"),callback:async()=>{await tokenDocument._object.actor.averageCharacteristicsValue(),ui.notifications.info(game.i18n.format("CoC7.TokenCreationRoll.Averaged",{name:tokenDocument.object.actor.name})),tokenDocument._object.actor.locked=!0}},skip:{label:game.i18n.localize("CoC7.Migrate.ButtonSkip")}}}).render(!0);break;case"roll":tokenDocument._object.actor.rollCharacteristicsValue(),ui.notifications.info(game.i18n.format("CoC7.TokenCreationRoll.Rolled",{name:tokenDocument.object.actor.name})),tokenDocument._object.actor.locked=!0;break;case"average":tokenDocument._object.actor.averageCharacteristicsValue(),ui.notifications.info(game.i18n.format("CoC7.TokenCreationRoll.Averaged",{name:tokenDocument.object.actor.name})),tokenDocument._object.actor.locked=!0}})),Hooks.once("diceSoNiceReady",(dice3d=>{dice3d.addDicePreset({type:"dt",labels:["10","20","30","40","50","60","70","80","90","00"],fontScale:.75,system:"standard"}),dice3d.addDicePreset({type:"do",labels:["10","20","30","40","50","60","70","80","90","00"],fontScale:.75,system:"standard"})})),init_listen(),ready_listen(),Hooks.on("renderActorSheet",(async(data,html,options)=>{})),Hooks.on("renderChatMessage",((app,html,data)=>{CoC7Chat.renderMessageHook(app,html,data),CoC7Chat.renderChatMessageHook(app,html,data),void 0!==app.flags?.CoC7?.["group-message"]&&CoC7GroupMessage.renderChatMessage(app,html,data)})),Hooks.on("renderDialog",((dialog,html)=>{const form=html.find("form");if(form.is("#document-create")&&0!==form.find("select").length){const entityCreateSelectTag=form.find("[name='type']"),entitySortedList=[],showExperimental=!!game.settings.get("CoC7","experimentalFeatures");entityCreateSelectTag.children().each(((o,entityOption)=>{const key=entityOption.textContent?.capitalize();game.i18n.has(`CoC7.Entities.${key}`)&&(entityOption.textContent=game.i18n.localize(`CoC7.Entities.${key}`)),!showExperimental&&["vehicle"].includes(entityOption.value)||entitySortedList.push(entityOption)})),entityCreateSelectTag.empty(),entityCreateSelectTag.append(entitySortedList.sort(((first,second)=>first.innerText.localeCompare(second.innerText)))),"actor"===entityCreateSelectTag.val()?entityCreateSelectTag.val("character"):"book"===entityCreateSelectTag.val()&&entityCreateSelectTag.val("item")}})),Hooks.on("renderItemSheet",(async(data,html,options)=>{})),Hooks.on("renderPause",(async(data,html,options)=>{game.settings.get("CoC7","overrideGameArtwork")&&("null"===game.settings.get("CoC7","artPauseImage").toLowerCase()&&html.find("img").remove(),""!==game.settings.get("CoC7","artPauseImage")&&html.find("img").attr("src",game.settings.get("CoC7","artPauseImage")),""!==game.settings.get("CoC7","artPauseText")&&html.find("h3").html(game.settings.get("CoC7","artPauseText")))})),Hooks.on("renderPlayerList",((playerList,html,data)=>{$("<h4>").append('<div><i class="fa-regular fa-calendar"></i>'+game.i18n.format(COC7.eras[game.settings.get("CoC7","worldEra")]??"CoC7.CoCIDFlag.error.unknown-era",{era:game.settings.get("CoC7","worldEra")})+"</div>").insertAfter($("h3",html))})),Hooks.on("renderRealRoll",((app,html,options)=>{for(const term in options.dieTerms)for(const input in options.dieTerms[term].inputs)if(options.dieTerms[term]instanceof CoC7DecaderDie){const tag=html.find('[name="'+term+"."+input+'"]');1===tag.length&&(tag[0].placeholder=game.i18n.localize("CoC7.RealRollDecaderPlaceholderName"))}})),Hooks.on("renderSettingsConfig",((app,html,user)=>{CoC7DirectoryPicker.processHtml(html)}))}};async function gmcreatemessageas(data){const meleeTarget=new CoC7MeleeTarget(data.targetKey,data.messageId,data.fastForward);meleeTarget.initiatorKey=data.actorKey;return await meleeTarget.createChatCard()}async function gmtradeitemto(data){try{let actor;actor=data.scene?game.scenes.get(data.scene).tokens.get(data.actorFrom).actor:game.actors.get(data.actorFrom);const item=actor.items.get(data.item);await game.actors.get(data.actorTo).createEmbeddedDocuments("Item",[item.toJSON()])&&actor.deleteEmbeddedDocuments("Item",[item.id])}catch(e){return ui.notifications.error(e),!1}return!0}class CoC7SystemSocket{static async callSocket(data){if(void 0!==data.listener){if(game.user.id===data.listener)switch(data.type){case"character-wizard":CoC7InvestigatorWizard.createCharacterFromData(data.payload);break;case"open-character":game.actors.get(data.payload).sheet.render(!0);break;case"group-message-new":CoC7GroupMessage.newGroupMessage(data);break;case"group-message-roll":CoC7GroupMessage.performMyRolls(data);break;case"group-message-update":CoC7GroupMessage.updateTheMessage(data)}}else{if(game.user.isGM)switch(data.type){case OpposedCheckCard.defaultConfig.type:OpposedCheckCard.dispatch(data);break;case CombinedCheckCard.defaultConfig.type:CombinedCheckCard.dispatch(data);break;case"invoke":(await fromUuid(data.item))[data.method](data.data)}if("updateChar"===data.type)CoC7Utilities.updateCharSheets()}}static requestKeeperAction(data){if(game.user.isGM)data.listener=game.user.id,CoC7SystemSocket.callSocket(data);else{const keepers=game.users.filter((u=>u.active&&u.isGM));keepers.length?(data.listener=keepers[0].id,game.socket.emit("system.CoC7",data)):ui.notifications.error(game.i18n.localize("CoC7.ErrorMissingKeeperUser"))}}static requestUserAction(data,{userId=null,errorIfMissing=!0,includeSelf=!0}={}){if(userId&&void 0!==userId)if(userId===game.user.id)data.listener=game.user.id,CoC7SystemSocket.callSocket(data);else{const user=game.users.get(userId);void 0!==user.id&&user.active?(data.listener=user.id,game.socket.emit("system.CoC7",data)):errorIfMissing&&ui.notifications.error(game.i18n.localize("CoC7.ErrorMissingUser"))}else includeSelf&&CoC7SystemSocket.callSocket(data),game.socket.emit("system.CoC7",data)}}function _onLeftClick(event){return event.shiftKey}Hooks.on("renderSettingsConfig",((app,html,options)=>{const systemTab=$(app.form).find(".tab[data-tab=system]");systemTab.find("input[name=CoC7\\.displayInitDices]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleInitiative")+"</h2>"),systemTab.find("input[name=CoC7\\.stanbyGMRolls]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleRoll")+"</h2>"),systemTab.find("input[name=CoC7\\.trustedCanModfyChatCard]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleChatCards")+"</h2>"),systemTab.find("input[name=CoC7\\.enableStatusIcons]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleScene")+"</h2>"),systemTab.find("input[name=CoC7\\.overrideGameArtwork]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleGameArtwork")+"</h2>"),systemTab.find("input[name=CoC7\\.displayPlayerNameOnSheet]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleSheet")+"</h2>"),systemTab.find("input[name=CoC7\\.disregardUsePerRound]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleWeapon")+"</h2>"),systemTab.find("input[name=CoC7\\.syncDice3d]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleDiceSoNice")+"</h2>"),systemTab.find("input[name=CoC7\\.debugmode]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleDeveloperDebug")+"</h2>"),systemTab.find("select[name=CoC7\\.boutOfMadnessSummaryTable]").closest("div.form-group").before('<h2 class="setting-header">'+game.i18n.localize("SETTINGS.TitleRollTable")+"</h2>")})),Hooks.once("init",(async function(){game.CoC7={macros:{skillCheck:CoC7Utilities.skillCheckMacro,weaponCheck:CoC7Utilities.weaponCheckMacro,check:CoC7Utilities.checkMacro},cards:{DamageCard},dev:{dice:{alwaysCrit:!1,alwaysFumble:!1}},eras:(era,name)=>{COC7.eras[era]=name}},Combat.prototype.rollInitiative=rollInitiative})),function(...cardclass){Hooks.on("renderChatLog",((app,html,data)=>EnhancedChatCardLib.injectCSS(app,html,data))),Hooks.once("socketlib.ready",(function(){EnhancedChatCardLib.register(cardclass),EnhancedChatCardLib.socket=socketlib.registerSystem(game.system.id),EnhancedChatCardLib.socket.register("updateMessage",updateMessage),EnhancedChatCardLib.socket.register("GMUpdate",GMUpdate),EnhancedChatCardLib.socket.register("advise",advise)})),Hooks.on("renderChatMessage",((app,html,data)=>EnhancedChatCard.bindListeners(html)))}(ChaseObstacleCard),Hooks.on("renderCombatTracker",((app,html,data)=>CoC7Combat.renderCombatTracker(app,html,data))),Hooks.on("chatMessage",((html,content)=>{if(content.match(/^\/(cbr|cc)/i)){const commands=content.match(/(\d+)/g);return commands?new Roll("1d100").roll({async:!0}).then((r=>{const s=r.result,res=commands.map((m=>{let res="";return res=s<=1?game.i18n.localize("CoC7.CriticalSuccess"):s>=100?game.i18n.localize("CoC7.Fumble"):s<=m/5?game.i18n.localize("CoC7.ExtremeSuccess"):s<=m/2?game.i18n.localize("CoC7.HardSuccess"):s<=m?game.i18n.localize("CoC7.RegularSuccess"):s>=96&&m<50?game.i18n.localize("CoC7.Fumble"):game.i18n.localize("CoC7.Failure"),res+=" "+game.i18n.localize("CoC7.Value")+" "+m,res})).join(" / ");r.toMessage({speaker:ChatMessage.getSpeaker(),flavor:res})})):ui.notifications.error("Incorrect usage of command"),!1}})),CoC7Hooks.listen(),Hooks.once("socketlib.ready",(function(){game.CoC7socket=socketlib.registerSystem("CoC7"),game.CoC7socket.register("gmcreatemessageas",gmcreatemessageas),game.CoC7socket.register("gmtradeitemto",gmtradeitemto)})),Hooks.once("setup",(function(){const toLocalize=["spellProperties","bookType","talentType","occupationProperties","statusType"];for(const o of toLocalize){const localized=Object.entries(COC7[o]).map((e=>[e[0],game.i18n.localize(e[1])]));COC7[o]=localized.reduce(((obj,e)=>(obj[e[0]]=e[1],obj)),{})}let effectIndex=CONFIG.statusEffects.findIndex((t=>t.id===COC7.status.dead));-1!==effectIndex&&(CONFIG.statusEffects[effectIndex].icon="systems/CoC7/assets/icons/tombstone.svg"),effectIndex=CONFIG.statusEffects.findIndex((t=>t.id===COC7.status.unconscious)),-1!==effectIndex&&(CONFIG.statusEffects[effectIndex].icon="systems/CoC7/assets/icons/knocked-out-stars.svg");const effectNameKey=foundry.utils.isNewerVersion(game.version,"11")?"name":"label";CONFIG.statusEffects.unshift({id:COC7.status.tempoInsane,[effectNameKey]:"CoC7.BoutOfMadnessName",icon:"systems/CoC7/assets/icons/hanging-spider.svg"},{id:COC7.status.indefInsane,[effectNameKey]:"CoC7.InsanityName",icon:"systems/CoC7/assets/icons/tentacles-skull.svg"},{id:COC7.status.criticalWounds,[effectNameKey]:"CoC7.CriticalWounds",icon:"systems/CoC7/assets/icons/arm-sling.svg"},{id:COC7.status.dying,[effectNameKey]:"CoC7.Dying",icon:"systems/CoC7/assets/icons/heart-beats.svg"})})),Hooks.on("createActiveEffect",((data,options,userId)=>{if(game.userId===userId){const statusKey=CoC7ActiveEffect.getStatusKey(data);if(statusKey)switch(statusKey){case COC7.status.indefInsane:case COC7.status.unconscious:case COC7.status.criticalWounds:case COC7.status.dying:case COC7.status.prone:case COC7.status.dead:data.parent.setCondition(statusKey,{forceValue:!0});break;case COC7.status.tempoInsane:{const realTime=data.flags.CoC7?.realTime;let duration=null;!0===realTime?duration=data.duration?.rounds:!1===realTime&&(duration=data.duration?.seconds,isNaN(duration)||(duration=Math.floor(duration/3600))),data.parent.setCondition(COC7.status.tempoInsane,{forceValue:!0,realTime,duration})}}}})),Hooks.on("deleteActiveEffect",((data,options,userId)=>{if(game.userId===userId){const statusKey=CoC7ActiveEffect.getStatusKey(data);if(statusKey)switch(statusKey){case COC7.status.tempoInsane:case COC7.status.indefInsane:case COC7.status.unconscious:case COC7.status.criticalWounds:case COC7.status.dying:case COC7.status.prone:case COC7.status.dead:data.parent.unsetCondition(statusKey,{forceValue:!0})}}})),Hooks.on("changeSidebarTab",(directory=>{if(directory instanceof ItemDirectory){const item=game.items.find((i=>"__CoC7InternalItem__"===i.name));if(item){const itemElement=directory._element.find(`[data-document-id='${item.id}']`);itemElement&&(itemElement[0].style.display="none")}}})),Hooks.on("hotbarDrop",((bar,data,slot)=>CoC7Utilities.createMacro(bar,data,slot))),Hooks.on("renderChatLog",((app,html,data)=>CoC7Chat.chatListeners(app,html,data))),Hooks.on("updateChatMessage",((chatMessage,chatData,diff,speaker)=>CoC7Chat.onUpdateChatMessage(chatMessage,chatData,diff,speaker))),Hooks.on("ready",(async()=>{function _tableSettingsChanged(table,id){game.CoC7.tables[table]="none"===id?null:game.tables.get(id)}await Updater.checkForUpdate(),function(){const body=$("body");document.addEventListener("click",CoC7ContextMenu.closeAll),body.on("click","a.coc7-inline-check",CoC7Check._onClickInlineRoll),document.addEventListener("mousedown",_onLeftClick)}(),game.CoC7.skillList=await(game.packs.get("CoC7.skills")?.getDocuments()),game.socket.on("system.CoC7",(async data=>{CoC7SystemSocket.callSocket(data)}));const tableChoice={none:"SETTINGS.LetKeeperDecide"};for(const t of game.tables)tableChoice[t._id]=t.name;game.settings.register("CoC7","boutOfMadnessSummaryTable",{name:"SETTINGS.BoutOfMadnessSummaryTable",scope:"world",config:!0,default:"none",type:String,choices:tableChoice,onChange:id=>_tableSettingsChanged("boutOfMadness_Summary",id)}),game.settings.register("CoC7","boutOfMadnessRealTimeTable",{name:"SETTINGS.BoutOfMadnessRealTimeTable",scope:"world",config:!0,default:"none",type:String,choices:tableChoice,onChange:id=>_tableSettingsChanged("boutOfMadness_RealTime",id)}),game.CoC7.tables={boutOfMadness_Summary:"none"===game.settings.get("CoC7","boutOfMadnessSummaryTable")?null:game.tables.get(game.settings.get("CoC7","boutOfMadnessSummaryTable")),boutOfMadness_RealTime:"none"===game.settings.get("CoC7","boutOfMadnessRealTimeTable")?null:game.tables.get(game.settings.get("CoC7","boutOfMadnessRealTimeTable"))}})),Hooks.on("renderCoC7ChaseSheet",((app,html,data)=>CoC7ChaseSheet.setScroll(app,html,data))),Hooks.on("closeCoC7ChaseSheet",((app,html)=>CoC7ChaseSheet.onClose(app,html))),Hooks.on("closeActorSheet",(characterSheet=>characterSheet.onCloseSheet())),Hooks.on("renderCoC7CreatureSheet",((app,html,data)=>CoC7CreatureSheet.forceAuto(app,html,data))),Hooks.on("renderCoC7NPCSheet",((app,html,data)=>CoC7NPCSheet.forceAuto(app,html,data))),Hooks.on("chatMessage",CoC7Utilities.ParseChatEntry),Hooks.on("getSceneControlButtons",(()=>{})),Hooks.on("renderActorSheet",CoC7CharacterSheet.renderSheet),Hooks.on("renderItemSheet",CoC7CharacterSheet.renderSheet),Hooks.on("getSceneControlButtons",CoC7Menu.getButtons),Hooks.on("renderSceneControls",CoC7Menu.renderControls),Hooks.on("dropCanvasData",CoC7Canvas.onDropSomething),Hooks.on("dropActorSheetData",(function(actor,sheet,data){if("Item"===data.type&&data.actorId){if(actor.data._id===data.actorId)return;let actorFrom=null;switch(actorFrom=data.sceneId&&data.tokenId?game.scenes.get(data.sceneId).tokens.get(data.tokenId).actor:game.actors.get(data.actorId),actor.data.type){case"character":case"npc":case"creature":if(!["chase"].includes(data.data.type))return;break;case"vehicle":return;case"container":if(!["book","item","spell","weapon"].includes(data.data.type))return}actorFrom&&actorFrom.deleteEmbeddedDocuments("Item",[data.data._id])}})),CONFIG.ui.settings=CoC7SettingsDirectory,CONFIG.ui.compendium=CoC7CompendiumDirectory,CONFIG.ui.actors=CoC7ActorDirectory})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TTUrQixHQUFHLGlCQUFrQnFzRSxXQUFXRSxpQkFFdEMzdEMsTUFBTTUrQixHQUFHLHNCRTdkRixTQUE2Qi9mLE1BQU84RCxNQUFPdUgsTUFDaEQsR0FBa0IsU0FBZEEsS0FBS2pILE1BQW1CaUgsS0FBSzBILFFBQVMsQ0FDeEMsR0FBSS9TLE1BQU1xTCxLQUFLOHJDLE1BQVE5ckMsS0FBSzBILFFBQzFCLE9BRUYsSUFBSW13RCxVQUFZLEtBTWhCLE9BSkVBLFVBREU3M0QsS0FBS2lILFNBQVdqSCxLQUFLZ0gsUUFDWGhQLEtBQUtzUCxPQUFPMVAsSUFBSW9JLEtBQUtpSCxTQUFTRyxPQUFPeFAsSUFBSW9JLEtBQUtnSCxTQUFTclMsTUFFdkRxRCxLQUFLbVAsT0FBT3ZQLElBQUlvSSxLQUFLMEgsU0FFM0IvUyxNQUFNcUwsS0FBS2pILE1BQ2pCLElBQUssWUFDTCxJQUFLLE1BQ0wsSUFBSyxXQUNILElBQUssQ0FBQyxTQUFTMkUsU0FBU3NDLEtBQUtBLEtBQUtqSCxNQUNoQyxPQUVGLE1BQ0YsSUFBSyxVQUNILE9BQ0YsSUFBSyxZQUNILElBQUssQ0FBQyxPQUFRLE9BQVEsUUFBUyxVQUFVMkUsU0FBU3NDLEtBQUtBLEtBQUtqSCxNQUMxRCxPQUdGOCtELFdBQ0ZBLFVBQVV2YSx3QkFBd0IsT0FBUSxDQUFDdDlDLEtBQUtBLEtBQUs4ckMsS0FFekQsQ0FDRixJRjRjQXh1QyxPQUFPbUcsR0FBR3RILFNBQVdvbEYsc0JBQ3JCamtGLE9BQU9tRyxHQUFHc3dELFdBQWE0dEIsd0JBQ3ZCcmtGLE9BQU9tRyxHQUFHMEQsT0FBUzQ2RSxrQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9jb25maWcuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FjdGl2ZS1lZmZlY3QuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2RpY2UuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2l0ZW1zL2l0ZW0uanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2NoYXQvaGVscGVyLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hcHBzL2F2ZXJhZ2Utcm9sbC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvYXBwcy9hY3Rvci1waWNrZXItZGlhbG9nLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hcHBzL2NvYzctZ3JvdXAtbWVzc2FnZS5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvY2hhdC9jYXJkLWFjdG9yLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9jaGF0L2NhcmRzL3Nhbi1jaGVjay5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvYXBwcy9jb2M3LWxpbmsuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvY29jNy1jb250ZW50LWxpbmstZGlhbG9nLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hcHBzL3JvbGwtZGlhbG9nLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9jaGF0L2NhcmRzL3JvbGwtY2FyZC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvY2hhdC9jYXJkcy9jb21iaW5lZC1yb2xsLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9jaGF0L2ludGVyYWN0aXZlLWNoYXQtY2FyZC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvY2hhdC9jYXJkcy9kYW1hZ2UuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2NoYXQvY2FyZHMvb3Bwb3NlZC1yb2xsLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hcHBzL3NhbmRhdGEtZGlhbG9nLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hcHBzL2NvYzctY2hhdC1tZXNzYWdlLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9jaGF0L2NvbmNoZWNrLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hcHBzL3NraWxsLXNlbGVjdGlvbi1kaWFsb2cuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvcG9pbnQtc2VsZWN0aW9uLWRpYWxvZy5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvYXBwcy9jaGFyLXNlbGVjdGlvbi1kaWFsb2cuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvY2hhci1yb2xsLWRpYWxvZy5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvYXBwcy9za2lsbC1zcGVjLXNlbGVjdC1kaWFsb2cuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvc2tpbGwtc3BlY2lhbGl6YXRpb24tc2VsZWN0LWRpYWxvZy5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvYXBwcy9za2lsbC12YWx1ZS1kaWFsb2cuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2NoYXQvY29tYmF0L21lbGVlLXJlc29sdXRpb24uanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2NoYXQvY29tYmF0L21lbGVlLXRhcmdldC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvY2hhdC9yYW5nZWNvbWJhdC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvY2hhdC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvY2hhdC9jb21iYXQvbWVsZWUtaW5pdGlhdG9yLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hY3RvcnMvYWN0b3IuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2NoZWNrLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS91dGlsaXRpZXMuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvY29jLWlkLWVkaXRvci5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvc2NyaXB0cy9jb2MtaWQtYnV0dG9uLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9jb250ZXh0LW1lbnUuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FjdG9ycy9zaGVldHMvYmFzZS5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvYWN0b3JzL3NoZWV0cy9ucGMtc2hlZXQuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FjdG9ycy9zaGVldHMvY3JlYXR1cmUtc2hlZXQuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvY3JlYXRlLW15dGhvcy1lbmNvdW50ZXJzLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hY3RvcnMvc2hlZXRzL2NoYXJhY3Rlci5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvY29tYmF0LmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hcHBzL2NvYy1pZC1iYXRjaC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvdXBkYXRlci5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvYXBwcy9hY3Rvci1pbXBvcnRlci1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvYWN0b3ItaW1wb3J0ZXIuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL3NjcmlwdHMvY29jNy1kaXJlY3RvcnktcGlja2VyLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hcHBzL2Rob2xlaG91c2VfaW1wb3J0ZXIuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FwcHMvYWN0b3ItaW1wb3J0ZXItZGlhbG9nLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hcHBzL2Ryb3AtY29jLWlkLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9pdGVtcy9zaGVldHMvb2NjdXBhdGlvbi5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvYXBwcy9pbnZlc3RpZ2F0b3Itd2l6YXJkLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9tZW51LmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hcHBzL2NhbnZhcy5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvc2V0dGluZ3MtZGlyZWN0b3J5LmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9jb21wZW5kaXVtLWRpcmVjdG9yeS5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvYWN0b3ItZGlyZWN0b3J5LmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9pdGVtcy9zcGVsbC9kYXRhLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9pdGVtcy9ib29rL2RhdGEuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2NvbW1vbi9jaGF0Y2FyZGxpYi9zcmMvY2hhdGNhcmRsaWIuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2l0ZW1zL2NoYXNlL3BhcnRpY2lwYW50LmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9jaGF0L2NhcmRzL2NoYXNlLW9ic3RhY2xlLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9pdGVtcy9jaGFzZS9kYXRhLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9pdGVtcy9za2lsbC9kYXRhLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hY3RvcnMvdmVoaWNsZS9kYXRhLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hcHBzL2RlY2FkZXItZGllLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hcHBzL2RlY2FkZXItZGllLW90aGVyLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9zY3JpcHRzL2dhbWUtcnVsZXMuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2l0ZW1zL3NoZWV0cy9hcmNoZXR5cGUuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2l0ZW1zL2Jvb2svc2hlZXQuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FjdG9ycy9zaGVldHMvY29udGFpbmVyLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hcHBzL2NoYXNlLXBhcnRpY2lwYW50LWltcG9ydGVyLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9pdGVtcy9jaGFzZS9zaGVldC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaXRlbXMvc2hlZXRzL2l0ZW0tc2hlZXRWMi5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaXRlbXMvc2hlZXRzL2l0ZW0tc2hlZXQuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL3NoZWV0cy9jb2M3LWpvdXJuYWwtc2hlZXQuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL3NoZWV0cy9jb2M3LW1hY3JvLWNvbmZpZy5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvc2hlZXRzL2NvYzctcGxheWxpc3QtY29uZmlnLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9zaGVldHMvY29jNy1yb2xsLXRhYmxlLWNvbmZpZy5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvc2hlZXRzL2NvYzctc2NlbmUtY29uZmlnLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9pdGVtcy9zaGVldHMvc2V0dXAuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2l0ZW1zL3NoZWV0cy9za2lsbC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaXRlbXMvc3BlbGwvc2hlZXQuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2l0ZW1zL3NoZWV0cy9zdGF0dXMuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2l0ZW1zL3NoZWV0cy90YWxlbnQuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2FjdG9ycy9zaGVldHMvdmVoaWNsZS5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaXRlbXMvc2hlZXRzL3dlYXBvbi1zaGVldC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvc2NyaXB0cy9jb21wZW5kaXVtLWZpbHRlci5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvc2NyaXB0cy9jb2MtaWQuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2hvb2tzL2luaXQuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL3NjcmlwdHMvY29uZmlndXJlLWRvY3VtZW50cy5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvc2NyaXB0cy9sb2FkLXRlbXBsYXRlcy5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvc2NyaXB0cy9yZWdpc3Rlci1zZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvc2NyaXB0cy9yZWdpc3Rlci1zaGVldHMuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL3NjcmlwdHMvaGFuZGxlYmFycy1oZWxwZXIuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2hvb2tzL2RpY2Utc28tbmljZS1yZWFkeS1sYXN0LmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hcHBzL3Rvb2x0aXBzLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hcHBzL2NvYzctdG91ci5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvdG91cnMvZW5hYmxlLXZhcmlhbnQtcnVsZXMtZW4uanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL3RvdXJzL2VuYWJsZS12YXJpYW50LXJ1bGVzLWZyLmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9ob29rcy9yZWFkeS5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvc2NyaXB0cy9yZWdpc3Rlci10b3Vycy5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaG9va3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2hvb2tzL2NyZWF0ZS10b2tlbi5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaG9va3MvZGljZS1zby1uaWNlLXJlYWR5LmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9ob29rcy9yZW5kZXItYWN0b3Itc2hlZXQuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2hvb2tzL3JlbmRlci1jaGF0LW1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2hvb2tzL3JlbmRlci1kaWFsb2cuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2hvb2tzL3JlbmRlci1pdGVtLXNoZWV0LmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9ob29rcy9yZW5kZXItcGF1c2UuanMiLCJ3ZWJwYWNrOi8vZnZ0dC1jb2M3Ly4vbW9kdWxlL2hvb2tzL3JlbmRlci1wbGF5ZXItbGlzdC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaG9va3MvcmVuZGVyLXJlYWwtcm9sbC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaG9va3MvcmVuZGVyLXNldHRpbmdzLWNvbmZpZy5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaG9va3Mvc29ja2V0LmpzIiwid2VicGFjazovL2Z2dHQtY29jNy8uL21vZHVsZS9hcHBzL2NvYzctc3lzdGVtLXNvY2tldC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvY29jNy5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvZGljZWJvdC5qcyIsIndlYnBhY2s6Ly9mdnR0LWNvYzcvLi9tb2R1bGUvaG9va3MvZHJvcC1hY3Rvci1zaGVldC1kYXRhLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIE5hbWVzcGFjZSBDT0M3IENvbmZpZ3VyYXRpb24gVmFsdWVzXG5leHBvcnQgY29uc3QgQ09DNyA9IHt9XG5cbi8vIEN1c3RvbSBjaGF0TWVzc2FnZVxuLy8gQ09ORklHLkNoYXRNZXNzYWdlLnRlbXBsYXRlID0gJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvY2hhdC9jaGF0LW1lc3NhZ2UuaHRtbCc7XG5cbi8qKlxuICogVGhlIHNldCBvZiBFcmFzIHVzZWQgd2l0aGluIHRoZSBzeXN0ZW1cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbkNPQzcuZXJhcyA9IHtcbiAgc3RhbmRhcmQ6ICdDb0M3LkVyYTE5MjAnLFxuICBtb2Rlcm46ICdDb0M3LkVyYU1vZGVybicsXG4gIG1vZGVyblB1bHA6ICdDb0M3LkVyYU1vZGVyblB1bHAnLFxuICBwdWxwOiAnQ29DNy5FcmFQdWxwJyxcbiAgZG93bkRhcmtlclRyYWlsczogJ0NvQzcuRXJhRG93bkRhcmtlclRyYWlscycsXG4gIGRvd25EYXJrZXJUcmFpbHNQdWxwOiAnQ29DNy5FcmFEb3duRGFya2VyVHJhaWxzUHVscCcsXG4gIGRhcmtBZ2VzOiAnQ29DNy5FcmFEYXJrQWdlcycsXG4gIGRhcmtBZ2VzUHVscDogJ0NvQzcuRXJhRGFya0FnZXNQdWxwJyxcbiAgcmVnZW5jeTogJ0NvQzcuRXJhUmVnZW5jeScsXG4gIHJlZ2VuY3lQdWxwOiAnQ29DNy5FcmFSZWdlbmN5UHVscCcsXG4gIHJlaWduT2ZUZXJyb3I6ICdDb0M3LkVyYVJlaWduT2ZUZXJyb3InLFxuICBnYXNMaWdodDogJ0NvQzcuRXJhR2FzTGlnaHQnLFxuICBpbnZpY3R1czogJ0NvQzcuRXJhSW52aWN0dXMnXG59XG5cbkNPQzcubW9uZXRhcnlGb3JtYXRLZXlzID0ge1xuICBkZWNpbWFsTGVmdDogJ2RlY2ltYWxMZWZ0JyxcbiAgZGVjaW1hbFJpZ2h0OiAnZGVjaW1hbFJpZ2h0JyxcbiAgaW50ZWdlckxlZnQ6ICdpbnRlZ2VyTGVmdCcsXG4gIGludGVnZXJSaWdodDogJ2ludGVnZXJSaWdodCcsXG4gIGxzZDogJ2xzZCcsXG4gIHJvbWFuOiAncm9tYW4nXG59XG5cbkNPQzcubW9uZXRhcnlGb3JtYXRzID0ge1xuICBkZWNpbWFsTGVmdDogJ0NvQzcuTW9uZXRhcnlGb3JtYXREZWNpbWFsTGVmdCcsXG4gIGRlY2ltYWxSaWdodDogJ0NvQzcuTW9uZXRhcnlGb3JtYXREZWNpbWFsUmlnaHQnLFxuICBpbnRlZ2VyTGVmdDogJ0NvQzcuTW9uZXRhcnlGb3JtYXRJbnRlZ2VyTGVmdCcsXG4gIGludGVnZXJSaWdodDogJ0NvQzcuTW9uZXRhcnlGb3JtYXRJbnRlZ2VyUmlnaHQnLFxuICBsc2Q6ICdDb0M3Lk1vbmV0YXJ5Rm9ybWF0THNkJyxcbiAgcm9tYW46ICdDb0M3Lk1vbmV0YXJ5Rm9ybWF0Um9tYW4nXG59XG5cbkNPQzcubW9uZXRhcnlUeXBlS2V5cyA9IHtcbiAgbm9uZTogJ25vbmUnLFxuICBhc3NlczogJ2Fzc2VzJyxcbiAgc2VzdGVydGlpOiAnc2VzdGVydGlpJyxcbiAgcXVpbmFyaWk6ICdxdWluYXJpaScsXG4gIGRlbmFyaWk6ICdkZW5hcmlpJyxcbiAgZDogJ2QnLFxuICBzOiAncycsXG4gIHZhbHVlOiAndmFsdWUnLFxuICBtdWx0aXBsaWVyOiAnbXVsdGlwbGllcidcbn1cblxuQ09DNy5tb25ldGFyeVR5cGVzID0ge1xuICBub25lOiB7XG4gICAgbmFtZTogJ0NvQzcuTW9uZXRhcnlUeXBlTm9uZScsXG4gICAgZmlsdGVyOiBbXVxuICB9LFxuICBhc3Nlczoge1xuICAgIG5hbWU6ICdDb0M3Lk1vbmV0YXJ5VHlwZUFzc2VzJyxcbiAgICBmaWx0ZXI6IFsncm9tYW4nXVxuICB9LFxuICBzZXN0ZXJ0aWk6IHtcbiAgICBuYW1lOiAnQ29DNy5Nb25ldGFyeVR5cGVTZXN0ZXJ0aWknLFxuICAgIGZpbHRlcjogWydyb21hbiddXG4gIH0sXG4gIHF1aW5hcmlpOiB7XG4gICAgbmFtZTogJ0NvQzcuTW9uZXRhcnlUeXBlUXVpbmFyaWknLFxuICAgIGZpbHRlcjogWydyb21hbiddXG4gIH0sXG4gIGRlbmFyaWk6IHtcbiAgICBuYW1lOiAnQ29DNy5Nb25ldGFyeVR5cGVEZW5hcmlpJyxcbiAgICBmaWx0ZXI6IFsncm9tYW4nXVxuICB9LFxuICBkOiB7XG4gICAgbmFtZTogJ0NvQzcuTW9uZXRhcnlUeXBlRGVuaWVycycsXG4gICAgZmlsdGVyOiBbJ2xzZCddXG4gIH0sXG4gIHM6IHtcbiAgICBuYW1lOiAnQ29DNy5Nb25ldGFyeVR5cGVTb3VzJyxcbiAgICBmaWx0ZXI6IFsnbHNkJ11cbiAgfSxcbiAgdmFsdWU6IHtcbiAgICBuYW1lOiAnQ29DNy5Nb25ldGFyeVR5cGVPbmUnLFxuICAgIGZpbHRlcjogW11cbiAgfSxcbiAgbXVsdGlwbGllcjoge1xuICAgIG5hbWU6ICdDb0M3Lk1vbmV0YXJ5VHlwZUNyZWRpdFJhdGluZycsXG4gICAgZmlsdGVyOiBbXVxuICB9XG59XG5cbkNPQzcuY2hhcmFjdGVyaXN0aWNzID0ge1xuICBzdHI6ICdDb0M3LkNoYXJhY1N0cicsXG4gIGNvbjogJ0NvQzcuQ2hhcmFjQ29uJyxcbiAgc2l6OiAnQ29DNy5DaGFyYWNTaXonLFxuICBkZXg6ICdDb0M3LkNoYXJhY0RleCcsXG4gIGFwcDogJ0NvQzcuQ2hhcmFjQXBwJyxcbiAgaW50OiAnQ29DNy5DaGFyYWNJbnQnLFxuICBwb3c6ICdDb0M3LkNoYXJhY1BvdycsXG4gIGVkdTogJ0NvQzcuQ2hhcmFjRWR1J1xufVxuXG4vKipcbiAqIFRoZSBzZXQgb2YgU2tpbGxzIGF0dHJpYnV0ZXMgdXNlZCB3aXRoaW4gdGhlIHN5c3RlbVxuICogQHR5cGUge09iamVjdH1cbiAqL1xuQ09DNy5za2lsbFByb3BlcnRpZXMgPSB7XG4gIG5vYWRqdXN0bWVudHM6ICdDb0M3LlNraWxsTm9BZGp1c3RtZW50cycsXG4gIG5veHBnYWluOiAnQ29DNy5Ta2lsbE5vWHBHYWluJyxcbiAgc3BlY2lhbDogJ0NvQzcuU2tpbGxTcGVjaWFsJyxcbiAgcmFyaXR5OiAnQ29DNy5Ta2lsbFJhcml0eScsXG4gIHB1c2g6ICdDb0M3LlNraWxsUHVzaCcsXG4gIGNvbWJhdDogJ0NvQzcuU2tpbGxDb21iYXQnLFxuICBmaWdodGluZzogJ0NvQzcuU2tpbGxGaWdodGluZycsXG4gIGZpcmVhcm06ICdDb0M3LlNraWxsRmlyZWFybScsXG4gIHJhbmdlZDogJ0NvQzcuU2tpbGxSYW5nZWQnLFxuICByZXF1aXJlc25hbWU6ICdDb0M3LlNraWxsUmVxdWlyZXNOYW1lJyxcbiAga2VlcGJhc2V2YWx1ZTogJ0NvQzcuU2tpbGxLZWVwQmFzZVZhbHVlJyxcbiAgcGlja25hbWVvbmx5OiAnQ29DNy5Ta2lsbFBpY2tOYW1lT25seScsXG4gIG9ubHlvbmU6ICdDb0M3LlNraWxsU3BlY2lhbGl6YXRpb25Jc1VuaXF1ZSdcbn1cblxuQ09DNy53ZWFwb25Qcm9wZXJ0aWVzID0ge1xuICBtZWxlZTogJ0NvQzcuV2VhcG9uLlByb3BlcnR5Lk1lbGVlJyxcbiAgcm5nZDogJ0NvQzcuV2VhcG9uUm5nZCcsXG4gIG1udnI6ICdDb0M3LldlYXBvblByb3BlcnlNYW5ldXZlcicsXG4gIHRocm93bjogJ0NvQzcuV2VhcG9uLlByb3BlcnR5LlRocm93bicsXG4gIHNob3RndW46ICdDb0M3LldlYXBvbi5Qcm9wZXJ0eS5TaG90Z3VuJyxcbiAgZGJybDogJ0NvQzcuV2VhcG9uRGJybCcsXG4gIGltcGw6ICdDb0M3LldlYXBvbkltcGwnLFxuICBicnN0OiAnQ29DNy5XZWFwb25CcnN0JyxcbiAgYXV0bzogJ0NvQzcuV2VhcG9uQXV0bycsXG4gIGFoZGI6ICdDb0M3LldlYXBvbkFoZGInLFxuICBhZGRiOiAnQ29DNy5XZWFwb25BZGRiJyxcbiAgc2xudDogJ0NvQzcuV2VhcG9uU2xudCcsXG4gIHNwY2w6ICdDb0M3LldlYXBvblNwY2wnLFxuICBtb250OiAnQ29DNy5XZWFwb25Nb250JyxcbiAgYmxzdDogJ0NvQzcuV2VhcG9uQmxzdCcsXG4gIHN0dW46ICdDb0M3LldlYXBvblN0dW4nLFxuICByYXJlOiAnQ29DNy5XZWFwb25SYXJlJyxcbiAgYnVybjogJ0NvQzcuV2VhcG9uLlByb3BlcnR5LkJ1cm4nXG59XG5cbkNPQzcuc3BlbGxQcm9wZXJ0aWVzID0ge1xuICBjYWxsOiAnQ29DNy5DYWxsU3BlbGwnLFxuICBkaXNtaXNzOiAnQ29DNy5EaXNtaXNzU3BlbGwnLFxuICBjb250YWN0OiAnQ29DNy5Db250YWN0U3BlbGwnLFxuICBzdW1tb246ICdDb0M3LlN1bW1vblNwZWxsJyxcbiAgYmluZDogJ0NvQzcuQmluZFNwZWxsJyxcbiAgZW5jaGFudG1lbnQ6ICdDb0M3LkVuY2hhbnRtZW50U3BlbGwnLFxuICBnYXRlOiAnQ29DNy5HYXRlU3BlbGwnLFxuICBjb21iYXQ6ICdDb0M3LkNvbWJhdFNwZWxsJ1xufVxuXG5DT0M3LmJvb2tUeXBlID0ge1xuICBteXRob3M6ICdDb0M3Lk15dGhvc0Jvb2snLFxuICBvY2N1bHQ6ICdDb0M3Lk9jY3VsdEJvb2snLFxuICBvdGhlcjogJ0NvQzcuT3RoZXInXG59XG5cbkNPQzcudGFsZW50VHlwZSA9IHtcbiAgcGh5c2ljYWw6ICdDb0M3LlBoeXNpY2FsVGFsZW50JyxcbiAgbWVudGFsOiAnQ29DNy5NZW50YWxUYWxlbnQnLFxuICBjb21iYXQ6ICdDb0M3LkNvbWJhdFRhbGVudCcsXG4gIG1pc2NlbGxhbmVvdXM6ICdDb0M3Lk1pc2NlbGxhbmVvdXNUYWxlbnQnLFxuICBiYXNpYzogJ0NvQzcuQmFzaWNUYWxlbnQnLFxuICBpbnNhbmU6ICdDb0M3Lkluc2FuZVRhbGVudCcsXG4gIG90aGVyOiAnQ29DNy5PdGhlclRhbGVudCdcbn1cblxuQ09DNy5zdGF0dXNUeXBlID0ge1xuICBtYW5pYTogJ0NvQzcuTWFuaWEnLFxuICBwaG9iaWE6ICdDb0M3LlBob2JpYSdcbn1cblxuQ09DNy5vY2N1cGF0aW9uUHJvcGVydGllcyA9IHtcbiAgY2xhc3NpYzogJ0NvQzcuQ2xhc3NpYycsXG4gIGxvdmVjcmFmdGlhbjogJ0NvQzcuTG92ZWNyYWZ0aWFuJyxcbiAgbW9kZXJuOiAnQ29DNy5Nb2Rlcm4nLFxuICBwdWxwOiAnQ29DNy5QdWxwJ1xufVxuXG5DT0M3LmZvcm11bGEgPSB7fVxuXG5DT0M3LmZvcm11bGEuYWN0b3IgPSB7XG4gICdAU1RSJzogJ3RoaXMuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5zdHIudmFsdWUnLFxuICAnQENPTic6ICd0aGlzLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MuY29uLnZhbHVlJyxcbiAgJ0BTSVonOiAndGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnNpei52YWx1ZScsXG4gICdAREVYJzogJ3RoaXMuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5kZXgudmFsdWUnLFxuICAnQEFQUCc6ICd0aGlzLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MuYXBwLnZhbHVlJyxcbiAgJ0BJTlQnOiAndGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmludC52YWx1ZScsXG4gICdAUE9XJzogJ3RoaXMuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5wb3cudmFsdWUnLFxuICAnQEVEVSc6ICd0aGlzLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MuZWR1LnZhbHVlJ1xufVxuXG5DT0M3LmZvcm11bGEuYWN0b3JzaGVldCA9IHtcbiAgJ0BTVFInOiAndGhpcy5hY3Rvci5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnN0ci52YWx1ZScsXG4gICdAQ09OJzogJ3RoaXMuYWN0b3Iuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5jb24udmFsdWUnLFxuICAnQFNJWic6ICd0aGlzLmFjdG9yLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3Muc2l6LnZhbHVlJyxcbiAgJ0BERVgnOiAndGhpcy5hY3Rvci5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmRleC52YWx1ZScsXG4gICdAQVBQJzogJ3RoaXMuYWN0b3Iuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5hcHAudmFsdWUnLFxuICAnQElOVCc6ICd0aGlzLmFjdG9yLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MuaW50LnZhbHVlJyxcbiAgJ0BQT1cnOiAndGhpcy5hY3Rvci5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnBvdy52YWx1ZScsXG4gICdARURVJzogJ3RoaXMuYWN0b3Iuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5lZHUudmFsdWUnXG59XG5cbkNPQzcuc3RhdHVzID0ge1xuICB0ZW1wb0luc2FuZTogJ3RlbXBvSW5zYW5lJyxcbiAgaW5kZWZJbnNhbmU6ICdpbmRlZkluc2FuZScsXG4gIHVuY29uc2Npb3VzOiAndW5jb25zY2lvdXMnLFxuICBjcml0aWNhbFdvdW5kczogJ2NyaXRpY2FsV291bmRzJyxcbiAgZHlpbmc6ICdkeWluZycsXG4gIHByb25lOiAncHJvbmUnLFxuICBkZWFkOiAnZGVhZCdcbn1cblxuQ09DNy5uZXdCb29rTmFtZSA9ICdDb0M3Lk5ld0Jvb2tOYW1lJ1xuQ09DNy5uZXdTa2lsbE5hbWUgPSAnQ29DNy5OZXdTa2lsbE5hbWUnXG5DT0M3Lm5ld1NwZWxsTmFtZSA9ICdDb0M3Lk5ld1NwZWxsTmFtZSdcbkNPQzcubmV3SXRlbU5hbWUgPSAnQ29DNy5OZXdJdGVtTmFtZSdcbkNPQzcubmV3V2VhcG9uTmFtZSA9ICdDb0M3Lk5ld1dlYXBvbk5hbWUnXG5cbkNPQzcuY3JlYXR1cmVGaWdodGluZ1NraWxsID0gJ0NvQzcuY3JlYXR1cmVGaWdodGluZ1NraWxsJ1xuXG5DT0M3LmZpZ2h0aW5nU3BlY2lhbGl6YXRpb25OYW1lID0gJ0NvQzcuRmlnaHRpbmdTcGVjaWFsaXphdGlvbk5hbWUnXG5DT0M3LmZpcmVhcm1TcGVjaWFsaXphdGlvbk5hbWUgPSAnQ29DNy5GaXJlYXJtU3BlY2lhbGl6YXRpb25OYW1lJ1xuQ09DNy5yYW5nZWRTcGVjaWFsaXphdGlvbk5hbWUgPSAnQ29DNy5SYW5nZWRTcGVjaWFsaXphdGlvbk5hbWUnXG5cbkNPQzcuY29tYmF0Q2FyZHMgPSB7XG4gIGZpZ2h0QmFjazogJ0NvQzcuRmlnaHRCYWNrJyxcbiAgZG9kZ2U6ICdDb0M3LkRvZGdlJyxcbiAgbWFuZXV2ZXI6ICdDb0M3Lk1hbmV1dmVyJyxcbiAgbm9SZXNwb25zZTogJ0NvQzcuTm9SZXNwb25zZSdcbn1cbiIsIi8qIGdsb2JhbCBBY3RpdmVFZmZlY3QsIGZvdW5kcnksIGdhbWUgKi9cbmltcG9ydCB7IENPQzcgfSBmcm9tICcuL2NvbmZpZy5qcydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29DN0FjdGl2ZUVmZmVjdCBleHRlbmRzIEFjdGl2ZUVmZmVjdCB7XG4gIGFwcGx5IChhY3RvciwgY2hhbmdlKSB7XG4gICAgaWYgKGNoYW5nZS5rZXkgPT09ICdzeXN0ZW0uYXR0cmlicy5hcm1vci52YWx1ZScpIHtcbiAgICAgIC8vIEFybW9yIGNhbiBiZSBmcmVlIHRleHQgaWYgYm90aCBhcmUgbnVtYmVycyBhbGxvdyBjYWxjdWxhdGlvblxuICAgICAgaWYgKCFpc05hTihjaGFuZ2UudmFsdWUpICYmICFpc05hTihhY3Rvci5zeXN0ZW0uYXR0cmlicy5hcm1vci52YWx1ZSkpIHtcbiAgICAgICAgYWN0b3Iuc3lzdGVtLmF0dHJpYnMuYXJtb3IudmFsdWUgPSBOdW1iZXIoYWN0b3Iuc3lzdGVtLmF0dHJpYnMuYXJtb3IudmFsdWUpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjaGFuZ2Uua2V5ID09PSAnc3lzdGVtLmF0dHJpYnMuZGIudmFsdWUnKSB7XG4gICAgICAvLyBJZiBkYiBpcyBjdXJyZW50bHkgYSBudW1iZXIgYWxsb3cgc3RyaW5ncyB0byBiZSBhcHBsaWVkXG4gICAgICBpZiAoaXNOYU4oY2hhbmdlLnZhbHVlKSAmJiAhaXNOYU4oYWN0b3Iuc3lzdGVtLmF0dHJpYnMuZGIudmFsdWUpKSB7XG4gICAgICAgIGFjdG9yLnN5c3RlbS5hdHRyaWJzLmRiLnZhbHVlID0gU3RyaW5nKGFjdG9yLnN5c3RlbS5hdHRyaWJzLmRiLnZhbHVlKVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBjaGFuZ2VzID0gc3VwZXIuYXBwbHkoYWN0b3IsIGNoYW5nZSlcbiAgICByZXR1cm4gY2hhbmdlc1xuICB9XG5cbiAgLyoqXG4gICAqIE1hbmFnZSBBY3RpdmUgRWZmZWN0IGluc3RhbmNlcyB0aHJvdWdoIHRoZSBBY3RvciBTaGVldCB2aWEgZWZmZWN0IGNvbnRyb2wgYnV0dG9ucy5cbiAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBldmVudCAgICAgIFRoZSBsZWZ0LWNsaWNrIGV2ZW50IG9uIHRoZSBlZmZlY3QgY29udHJvbFxuICAgKiBAcGFyYW0ge0FjdG9yfEl0ZW19IG93bmVyICAgICAgVGhlIG93bmluZyBkb2N1bWVudCB3aGljaCBtYW5hZ2VzIHRoaXMgZWZmZWN0XG4gICAqIEByZXR1cm5zIHtQcm9taXNlfG51bGx9ICAgICAgICBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgY2hhbmdlcyBhcmUgY29tcGxldGUuXG4gICAqL1xuICBzdGF0aWMgb25NYW5hZ2VBY3RpdmVFZmZlY3QgKGV2ZW50LCBvd25lcikge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBhID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGNvbnN0IGxpID0gYS5jbG9zZXN0KCdsaScpXG4gICAgY29uc3QgZWZmZWN0ID0gbGkuZGF0YXNldC5lZmZlY3RJZFxuICAgICAgPyBvd25lci5lZmZlY3RzLmdldChsaS5kYXRhc2V0LmVmZmVjdElkKVxuICAgICAgOiBudWxsXG4gICAgc3dpdGNoIChhLmRhdGFzZXQuYWN0aW9uKSB7XG4gICAgICBjYXNlICdjcmVhdGUnOlxuICAgICAgICByZXR1cm4gb3duZXIuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0FjdGl2ZUVmZmVjdCcsIFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkVmZmVjdE5ldycpLFxuICAgICAgICAgICAgaWNvbjogJ2ljb25zL3N2Zy9hdXJhLnN2ZycsXG4gICAgICAgICAgICBvcmlnaW46IG93bmVyLnV1aWQsXG4gICAgICAgICAgICAnZHVyYXRpb24ucm91bmRzJzpcbiAgICAgICAgICAgICAgbGkuZGF0YXNldC5lZmZlY3RUeXBlID09PSAndGVtcG9yYXJ5JyA/IDEgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBkaXNhYmxlZDogbGkuZGF0YXNldC5lZmZlY3RUeXBlID09PSAnaW5hY3RpdmUnXG4gICAgICAgICAgfVxuICAgICAgICBdKVxuICAgICAgY2FzZSAnZWRpdCc6XG4gICAgICAgIHJldHVybiBlZmZlY3Quc2hlZXQucmVuZGVyKHRydWUpXG4gICAgICBjYXNlICdkZWxldGUnOlxuICAgICAgICByZXR1cm4gZWZmZWN0LmRlbGV0ZSgpXG4gICAgICBjYXNlICd0b2dnbGUnOlxuICAgICAgICByZXR1cm4gZWZmZWN0LnVwZGF0ZSh7IGRpc2FibGVkOiAhZWZmZWN0LmRpc2FibGVkIH0pXG4gICAgfVxuICB9XG5cbiAgX3ByZXBhcmVEdXJhdGlvbiAoKSB7XG4gICAgY29uc3QgZHVyYXRpb24gPSBzdXBlci5fcHJlcGFyZUR1cmF0aW9uKClcbiAgICBpZiAoZHVyYXRpb24udHlwZSA9PT0gJ3NlY29uZHMnKSB7XG4gICAgICBpZiAoZHVyYXRpb24uc2Vjb25kcyA+IDM2MDApIHtcbiAgICAgICAgZHVyYXRpb24ubGFiZWwgPSBuZXcgRGF0ZShkdXJhdGlvbi5zZWNvbmRzICogMTAwMCkudG9JU09TdHJpbmcoKS5zbGljZSgxMSwgMTkpXG4gICAgICB9IGVsc2UgaWYgKGR1cmF0aW9uLnNlY29uZHMgPiAxMDApIHtcbiAgICAgICAgZHVyYXRpb24ubGFiZWwgPSBuZXcgRGF0ZShkdXJhdGlvbi5zZWNvbmRzICogMTAwMCkudG9JU09TdHJpbmcoKS5zbGljZSgxNCwgMTkpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkdXJhdGlvblxuICB9XG5cbiAgc3RhdGljIGZpbHRlckFjdGl2ZUVmZmVjdHMgKGVmZmVjdCwgY29uZGl0aW9uTmFtZSkge1xuICAgIGlmICghZm91bmRyeS51dGlscy5pc05ld2VyVmVyc2lvbihnYW1lLnZlcnNpb24sICcxMScpKSB7XG4gICAgICAvLyBGb3VuZHJ5VlRUIHYxMFxuICAgICAgcmV0dXJuIGVmZmVjdC5mbGFncy5jb3JlPy5zdGF0dXNJZCA9PT0gY29uZGl0aW9uTmFtZVxuICAgIH1cbiAgICByZXR1cm4gZWZmZWN0LnN0YXR1c2VzLmhhcyhjb25kaXRpb25OYW1lKVxuICB9XG5cbiAgc3RhdGljIGdldFN0YXR1c0tleSAoZWZmZWN0KSB7XG4gICAgbGV0IG9wdGlvbnMgPSBbXVxuICAgIGlmICghZm91bmRyeS51dGlscy5pc05ld2VyVmVyc2lvbihnYW1lLnZlcnNpb24sICcxMScpKSB7XG4gICAgICAvLyBGb3VuZHJ5VlRUIHYxMFxuICAgICAgb3B0aW9ucyA9IFtlZmZlY3QuZ2V0RmxhZygnY29yZScsICdzdGF0dXNJZCcpXVxuICAgIH0gZWxzZSBpZiAoZWZmZWN0LnN0YXR1c2VzLnNpemUgPiAwKSB7XG4gICAgICBvcHRpb25zID0gWy4uLmVmZmVjdC5zdGF0dXNlcy52YWx1ZXMoKV1cbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnMuZmluZCh2ID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChDT0M3LnN0YXR1cywgdikpXG4gIH1cblxuICBnZXQgaXNTdGF0dXMgKCkge1xuICAgIHJldHVybiB0eXBlb2YgQ29DN0FjdGl2ZUVmZmVjdC5nZXRTdGF0dXNLZXkodGhpcykgPT09ICdzdHJpbmcnXG4gIH1cblxuICBzdGF0aWMgcHJlcGFyZUFjdGl2ZUVmZmVjdENhdGVnb3JpZXMgKGVmZmVjdHMsIHsgc3RhdHVzID0gdHJ1ZSB9ID0ge30pIHtcbiAgICAvLyBEZWZpbmUgZWZmZWN0IGhlYWRlciBjYXRlZ29yaWVzXG4gICAgY29uc3QgY2F0ZWdvcmllcyA9IHtcbiAgICAgIHRlbXBvcmFyeToge1xuICAgICAgICB0eXBlOiAndGVtcG9yYXJ5JyxcbiAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5UZW1wb3JhcnknKSxcbiAgICAgICAgZWZmZWN0czogW11cbiAgICAgIH0sXG4gICAgICBwYXNzaXZlOiB7XG4gICAgICAgIHR5cGU6ICdwYXNzaXZlJyxcbiAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5QYXNzaXZlJyksXG4gICAgICAgIGVmZmVjdHM6IFtdXG4gICAgICB9LFxuICAgICAgaW5hY3RpdmU6IHtcbiAgICAgICAgdHlwZTogJ2luYWN0aXZlJyxcbiAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5JbmFjdGl2ZScpLFxuICAgICAgICBlZmZlY3RzOiBbXVxuICAgICAgfSxcbiAgICAgIHN1cHByZXNzZWQ6IHtcbiAgICAgICAgdHlwZTogJ3N1cHByZXNzZWQnLFxuICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlN1cHByZXNzZWQnKSxcbiAgICAgICAgZWZmZWN0czogW10sXG4gICAgICAgIGluZm86IFtnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuVW5hdmFpbGFibGUnKV1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzKSB7XG4gICAgICBjYXRlZ29yaWVzLnN0YXR1cyA9IHtcbiAgICAgICAgdHlwZTogJ3N0YXR1cycsXG4gICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ1N0YXR1cycpLFxuICAgICAgICBlZmZlY3RzOiBbXVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBJdGVyYXRlIG92ZXIgYWN0aXZlIGVmZmVjdHMsIGNsYXNzaWZ5aW5nIHRoZW0gaW50byBjYXRlZ29yaWVzXG4gICAgZm9yIChjb25zdCBlIG9mIGVmZmVjdHMpIHtcbiAgICAgIGlmIChlLmlzU3VwcHJlc3NlZCkgY2F0ZWdvcmllcy5zdXBwcmVzc2VkLmVmZmVjdHMucHVzaChlKVxuICAgICAgZWxzZSBpZiAoZS5pc1N0YXR1cykgY2F0ZWdvcmllcy5zdGF0dXMuZWZmZWN0cy5wdXNoKGUpXG4gICAgICBlbHNlIGlmIChlLmRpc2FibGVkKSBjYXRlZ29yaWVzLmluYWN0aXZlLmVmZmVjdHMucHVzaChlKVxuICAgICAgZWxzZSBpZiAoZS5pc1RlbXBvcmFyeSkgY2F0ZWdvcmllcy50ZW1wb3JhcnkuZWZmZWN0cy5wdXNoKGUpXG4gICAgICBlbHNlIGNhdGVnb3JpZXMucGFzc2l2ZS5lZmZlY3RzLnB1c2goZSlcbiAgICB9XG5cbiAgICBjYXRlZ29yaWVzLnN1cHByZXNzZWQuaGlkZGVuID0gIWNhdGVnb3JpZXMuc3VwcHJlc3NlZC5lZmZlY3RzLmxlbmd0aFxuICAgIHJldHVybiBjYXRlZ29yaWVzXG4gIH1cblxuICBzdGF0aWMgcHJlcGFyZU5QQ0FjdGl2ZUVmZmVjdENhdGVnb3JpZXMgKGVmZmVjdHMpIHtcbiAgICBsZXQgY291bnQgPSAwXG4gICAgLy8gRGVmaW5lIGVmZmVjdCBoZWFkZXIgY2F0ZWdvcmllc1xuICAgIGNvbnN0IGNhdGVnb3JpZXMgPSB7XG4gICAgICBhY3RpdmU6IHtcbiAgICAgICAgdHlwZTogJ2FjdGl2ZScsXG4gICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0FjdGl2ZScpLFxuICAgICAgICBlZmZlY3RzOiBbXVxuICAgICAgfSxcbiAgICAgIGluYWN0aXZlOiB7XG4gICAgICAgIHR5cGU6ICdpbmFjdGl2ZScsXG4gICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0luYWN0aXZlJyksXG4gICAgICAgIGVmZmVjdHM6IFtdXG4gICAgICB9XG4gICAgfVxuICAgIC8vIEl0ZXJhdGUgb3ZlciBhY3RpdmUgZWZmZWN0cywgY2xhc3NpZnlpbmcgdGhlbSBpbnRvIGNhdGVnb3JpZXNcbiAgICBmb3IgKGNvbnN0IGUgb2YgZWZmZWN0cykge1xuICAgICAgY291bnQgKz0gMVxuICAgICAgZS5fZ2V0U291cmNlTmFtZSgpIC8vIFRyaWdnZXIgYSBsb29rdXAgZm9yIHRoZSBzb3VyY2UgbmFtZVxuICAgICAgaWYgKGUuaXNTdXBwcmVzc2VkIHx8IGUuZGlzYWJsZWQpIGNhdGVnb3JpZXMuaW5hY3RpdmUuZWZmZWN0cy5wdXNoKGUpXG4gICAgICBlbHNlIGNhdGVnb3JpZXMuYWN0aXZlLmVmZmVjdHMucHVzaChlKVxuICAgIH1cblxuICAgIGlmIChjb3VudCA+IDApIGNhdGVnb3JpZXMuZXhwZW5kZWQgPSB0cnVlXG4gICAgcmV0dXJuIGNhdGVnb3JpZXNcbiAgfVxufVxuIiwiLyogZ2xvYmFsIENoYXRNZXNzYWdlLCBDT05GSUcsIGdhbWUsIFJvbGwgKi9cblxuZXhwb3J0IGNsYXNzIENvQzdEaWNlIHtcbiAgc3RhdGljIGFzeW5jIHJvbGwgKG1vZGlmID0gMCwgcm9sbE1vZGUgPSBudWxsLCBoaWRlRGljZSA9IGZhbHNlKSB7XG4gICAgbGV0IGFsdGVybmF0aXZlRGljZSA9ICcnXG4gICAgaWYgKGdhbWUubW9kdWxlcy5nZXQoJ2RpY2Utc28tbmljZScpPy5hY3RpdmUpIHtcbiAgICAgIGlmIChtb2RpZiA8IDApIHtcbiAgICAgICAgYWx0ZXJuYXRpdmVEaWNlID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAndGVuRGllUGVuYWx0eScpXG4gICAgICB9IGVsc2UgaWYgKG1vZGlmID4gMCkge1xuICAgICAgICBhbHRlcm5hdGl2ZURpY2UgPSBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICd0ZW5EaWVCb251cycpXG4gICAgICB9XG4gICAgfVxuICAgIGxldCByb2xsXG4gICAgaWYgKFxuICAgICAgZ2FtZS5Db0M3LmRldi5kaWNlLmFsd2F5c0NyaXQgJiZcbiAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2hpZGRlbmRldm1lbnUnKVxuICAgICkge1xuICAgICAgcm9sbCA9IFJvbGwuZnJvbURhdGEoQ29DN0RpY2UuY3JpdDAxKVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICBnYW1lLkNvQzcuZGV2LmRpY2UuYWx3YXlzRnVtYmxlICYmXG4gICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdoaWRkZW5kZXZtZW51JylcbiAgICApIHtcbiAgICAgIHJvbGwgPSBSb2xsLmZyb21EYXRhKENvQzdEaWNlLmZ1bWJsZTk5KVxuICAgIH0gZWxzZSB7XG4gICAgICByb2xsID0gYXdhaXQgbmV3IFJvbGwoXG4gICAgICAgICcxZHQnICtcbiAgICAgICAgICAoYWx0ZXJuYXRpdmVEaWNlICE9PSAnJ1xuICAgICAgICAgICAgPyAnKzFkb1snICsgYWx0ZXJuYXRpdmVEaWNlICsgJ10nXG4gICAgICAgICAgICA6ICcrMWR0J1xuICAgICAgICAgICkucmVwZWF0KE1hdGguYWJzKG1vZGlmKSkgK1xuICAgICAgICAgICcrMWQxMCdcbiAgICAgICkucm9sbCh7IGFzeW5jOiB0cnVlIH0pXG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgdW5pdDoge1xuICAgICAgICB0b3RhbDogMCxcbiAgICAgICAgcmVzdWx0czogW11cbiAgICAgIH0sXG4gICAgICB0ZW5zOiB7XG4gICAgICAgIHRvdGFsOiAwLFxuICAgICAgICByZXN1bHRzOiBbXVxuICAgICAgfSxcbiAgICAgIHRvdGFsOiAwLFxuICAgICAgcm9sbFxuICAgIH1cblxuICAgIGlmIChyb2xsTW9kZSkgcmVzdWx0LnJvbGxNb2RlID0gcm9sbE1vZGVcbiAgICBpZiAoaGlkZURpY2UpIHJlc3VsdC5oaWRlRGljZSA9IGhpZGVEaWNlXG4gICAgZm9yIChjb25zdCBkIG9mIHJvbGwuZGljZSkge1xuICAgICAgaWYgKGQgaW5zdGFuY2VvZiBDT05GSUcuRGljZS50ZXJtcy50KSB7XG4gICAgICAgIHJlc3VsdC50ZW5zLnJlc3VsdHMucHVzaChkLnRvdGFsKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LnVuaXQudG90YWwgPSBkLnRvdGFsID09PSAxMCA/IDAgOiBkLnRvdGFsXG4gICAgICAgIHJlc3VsdC51bml0LnJlc3VsdHMucHVzaChyZXN1bHQudW5pdC50b3RhbClcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG1vZGlmIDwgMCkge1xuICAgICAgcmVzdWx0LnRlbnMudG90YWwgPVxuICAgICAgICByZXN1bHQudW5pdC50b3RhbCA9PT0gMCAmJiByZXN1bHQudGVucy5yZXN1bHRzLmluY2x1ZGVzKDApXG4gICAgICAgICAgPyAxMDBcbiAgICAgICAgICA6IE1hdGgubWF4KC4uLnJlc3VsdC50ZW5zLnJlc3VsdHMpXG4gICAgfSBlbHNlIGlmIChyZXN1bHQudW5pdC50b3RhbCA9PT0gMCkge1xuICAgICAgY29uc3QgZGljZSA9IHJlc3VsdC50ZW5zLnJlc3VsdHMuZmlsdGVyKHQgPT4gdCA+IDApXG4gICAgICByZXN1bHQudGVucy50b3RhbCA9IGRpY2UubGVuZ3RoID09PSAwID8gMTAwIDogTWF0aC5taW4oLi4uZGljZSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnRlbnMudG90YWwgPSBNYXRoLm1pbiguLi5yZXN1bHQudGVucy5yZXN1bHRzKVxuICAgIH1cbiAgICByZXN1bHQudG90YWwgPSByZXN1bHQudW5pdC50b3RhbCArIHJlc3VsdC50ZW5zLnRvdGFsXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgc3RhdGljIGFzeW5jIHNob3dSb2xsRGljZTNkIChyb2xsKSB7XG4gICAgaWYgKGdhbWUubW9kdWxlcy5nZXQoJ2RpY2Utc28tbmljZScpPy5hY3RpdmUpIHtcbiAgICAgIGNvbnN0IHN5bmNEaWNlID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnc3luY0RpY2UzZCcpXG5cbiAgICAgIGNvbnN0IGNoYXREYXRhID0ge1xuICAgICAgICB3aGlzcGVyOiBudWxsLFxuICAgICAgICBibGluZDogZmFsc2VcbiAgICAgIH1cbiAgICAgIENoYXRNZXNzYWdlLmFwcGx5Um9sbE1vZGUoY2hhdERhdGEsIGdhbWUuc2V0dGluZ3MuZ2V0KCdjb3JlJywgJ3JvbGxNb2RlJykpXG5cbiAgICAgIGF3YWl0IGdhbWUuZGljZTNkLnNob3dGb3JSb2xsKFxuICAgICAgICByb2xsLFxuICAgICAgICBnYW1lLnVzZXIsXG4gICAgICAgIHN5bmNEaWNlLFxuICAgICAgICAoY2hhdERhdGEud2hpc3Blci5sZW5ndGggPT09IDAgPyBudWxsIDogY2hhdERhdGEud2hpc3BlciksXG4gICAgICAgIGNoYXREYXRhLmJsaW5kXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGNvbWJpbmVkUm9sbCAob3B0aW9ucykge1xuICAgIG9wdGlvbnMucG9vbCA9IG9wdGlvbnMucG9vbCA/PyB7fVxuICAgIG9wdGlvbnMucG9vbFsnMCddID0gZmFsc2VcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucy5wb29sKS5tYXAodiA9PiBwYXJzZUludCh2LCAxMCkpXG4gICAgbGV0IHBlbmFsdHlEaWNlID0gTWF0aC5hYnMoTWF0aC5taW4oMCwgTWF0aC5taW4oLi4ua2V5cykpKVxuICAgIGxldCBib251c0RpY2UgPSBNYXRoLm1heCgwLCBNYXRoLm1heCguLi5rZXlzKSlcbiAgICBjb25zdCBoYXNEU04gPSBnYW1lLm1vZHVsZXMuZ2V0KCdkaWNlLXNvLW5pY2UnKT8uYWN0aXZlXG5cbiAgICBjb25zdCBwb29sID0gW11cbiAgICBwb29sLnB1c2goJzFkdCsxZDEwJylcblxuICAgIGlmIChwZW5hbHR5RGljZSA+IDApIHtcbiAgICAgIHBvb2wucHVzaChcbiAgICAgICAgKGhhc0RTTlxuICAgICAgICAgID8gJysxZG9bJyArIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3RlbkRpZVBlbmFsdHknKSArICddJ1xuICAgICAgICAgIDogJysxZHQnXG4gICAgICAgICkucmVwZWF0KE1hdGguYWJzKHBlbmFsdHlEaWNlKSlcbiAgICAgIClcbiAgICB9XG4gICAgaWYgKGJvbnVzRGljZSA+IDApIHtcbiAgICAgIHBvb2wucHVzaChcbiAgICAgICAgKGhhc0RTTlxuICAgICAgICAgID8gJysxZG9bJyArIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3RlbkRpZUJvbnVzJykgKyAnXSdcbiAgICAgICAgICA6ICcrMWR0J1xuICAgICAgICApLnJlcGVhdChNYXRoLmFicyhib251c0RpY2UpKVxuICAgICAgKVxuICAgIH1cbiAgICBjb25zdCByb2xsID0gYXdhaXQgbmV3IFJvbGwocG9vbC5qb2luKCcnKSkucm9sbCh7IGFzeW5jOiB0cnVlIH0pXG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgZ3JvdXBzOiB7XG4gICAgICAgIGJhc2VEaWU6IDAsXG4gICAgICAgIHBlbmFsdHlEaWNlOiBbXSxcbiAgICAgICAgYm9udXNEaWNlOiBbXVxuICAgICAgfSxcbiAgICAgIHVuaXQ6IDAsXG4gICAgICByb2xsXG4gICAgfVxuICAgIGxldCBiYXNlU2V0ID0gZmFsc2VcbiAgICBmb3IgKGNvbnN0IGQgb2Ygcm9sbC5kaWNlKSB7XG4gICAgICBpZiAoZCBpbnN0YW5jZW9mIENPTkZJRy5EaWNlLnRlcm1zLnQpIHtcbiAgICAgICAgaWYgKCFiYXNlU2V0KSB7XG4gICAgICAgICAgcmVzdWx0Lmdyb3Vwcy5iYXNlRGllID0gZC50b3RhbFxuICAgICAgICAgIGJhc2VTZXQgPSB0cnVlXG4gICAgICAgIH0gZWxzZSBpZiAocGVuYWx0eURpY2UgPiAwKSB7XG4gICAgICAgICAgcmVzdWx0Lmdyb3Vwcy5wZW5hbHR5RGljZS5wdXNoKGQudG90YWwpXG4gICAgICAgICAgcGVuYWx0eURpY2UtLVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5ncm91cHMuYm9udXNEaWNlLnB1c2goZC50b3RhbClcbiAgICAgICAgICBib251c0RpY2UtLVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQudW5pdCA9IGQudG90YWwgPT09IDEwID8gMCA6IGQudG90YWxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBvdXRwdXQgPSB7fVxuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb3B0aW9ucy5wb29sKSB7XG4gICAgICBvdXRwdXRba2V5XSA9IHtcbiAgICAgICAgdW5pdDoge1xuICAgICAgICAgIHRvdGFsOiByZXN1bHQudW5pdCxcbiAgICAgICAgICByZXN1bHRzOiBbcmVzdWx0LnVuaXRdXG4gICAgICAgIH0sXG4gICAgICAgIHRlbnM6IHtcbiAgICAgICAgICB0b3RhbDogMCxcbiAgICAgICAgICByZXN1bHRzOiBbXVxuICAgICAgICB9LFxuICAgICAgICB0b3RhbDogMCxcbiAgICAgICAgcm9sbFxuICAgICAgfVxuICAgICAgY29uc3QgbW9kaWYgPSBwYXJzZUludChrZXksIDEwKVxuICAgICAgbGV0IG1vZGlmaWVyID0gbW9kaWZcbiAgICAgIG91dHB1dFtrZXldLnRlbnMucmVzdWx0cy5wdXNoKHJlc3VsdC5ncm91cHMuYmFzZURpZSlcbiAgICAgIGZvciAoY29uc3Qgb2Zmc2V0ID0gTWF0aC5hYnMobW9kaWZpZXIpOyBtb2RpZmllciA8IDA7IG1vZGlmaWVyKyspIHtcbiAgICAgICAgb3V0cHV0W2tleV0udGVucy5yZXN1bHRzLnB1c2goXG4gICAgICAgICAgcmVzdWx0Lmdyb3Vwcy5wZW5hbHR5RGljZVttb2RpZmllciArIG9mZnNldF1cbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBvZmZzZXQgPSBtb2RpZmllcjsgbW9kaWZpZXIgPiAwOyBtb2RpZmllci0tKSB7XG4gICAgICAgIG91dHB1dFtrZXldLnRlbnMucmVzdWx0cy5wdXNoKFxuICAgICAgICAgIHJlc3VsdC5ncm91cHMuYm9udXNEaWNlW01hdGguYWJzKG1vZGlmaWVyIC0gb2Zmc2V0KV1cbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgaWYgKG1vZGlmIDwgMCkge1xuICAgICAgICBvdXRwdXRba2V5XS50ZW5zLnRvdGFsID1cbiAgICAgICAgICBvdXRwdXRba2V5XS51bml0LnRvdGFsID09PSAwICYmIG91dHB1dFtrZXldLnRlbnMucmVzdWx0cy5pbmNsdWRlcygwKVxuICAgICAgICAgICAgPyAxMDBcbiAgICAgICAgICAgIDogTWF0aC5tYXgoLi4ub3V0cHV0W2tleV0udGVucy5yZXN1bHRzKVxuICAgICAgfSBlbHNlIGlmIChvdXRwdXRba2V5XS51bml0LnRvdGFsID09PSAwKSB7XG4gICAgICAgIGNvbnN0IGRpY2UgPSBvdXRwdXRba2V5XS50ZW5zLnJlc3VsdHMuZmlsdGVyKHQgPT4gdCA+IDApXG4gICAgICAgIG91dHB1dFtrZXldLnRlbnMudG90YWwgPSBkaWNlLmxlbmd0aCA9PT0gMCA/IDEwMCA6IE1hdGgubWluKC4uLmRpY2UpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXRba2V5XS50ZW5zLnRvdGFsID0gTWF0aC5taW4oLi4ub3V0cHV0W2tleV0udGVucy5yZXN1bHRzKVxuICAgICAgfVxuICAgICAgb3V0cHV0W2tleV0udG90YWwgPSBvdXRwdXRba2V5XS51bml0LnRvdGFsICsgb3V0cHV0W2tleV0udGVucy50b3RhbFxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0XG4gIH1cblxuICAvLyBQcmVkZXRlcm1pbmVkIHZhbHVlIG9mIGRpY2UsIHVzZWQgb25seSBmb3IgREVWIGFuZCB0ZXN0IHB1cnBvc2VzXG4gIHN0YXRpYyBmdW1ibGU5OSA9IHtcbiAgICBjbGFzczogJ1JvbGwnLFxuICAgIG9wdGlvbnM6IHt9LFxuICAgIGRpY2U6IFtdLFxuICAgIGZvcm11bGE6ICcxZHQgKyAxZDEwJyxcbiAgICB0ZXJtczogW1xuICAgICAge1xuICAgICAgICBjbGFzczogJ0NvQzdEZWNhZGVyRGllJyxcbiAgICAgICAgb3B0aW9uczoge30sXG4gICAgICAgIGV2YWx1YXRlZDogdHJ1ZSxcbiAgICAgICAgbnVtYmVyOiAxLFxuICAgICAgICBmYWNlczogMTAsXG4gICAgICAgIG1vZGlmaWVyczogW10sXG4gICAgICAgIHJlc3VsdHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZXN1bHQ6IDksXG4gICAgICAgICAgICBhY3RpdmU6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNsYXNzOiAnT3BlcmF0b3JUZXJtJyxcbiAgICAgICAgb3B0aW9uczoge30sXG4gICAgICAgIGV2YWx1YXRlZDogdHJ1ZSxcbiAgICAgICAgb3BlcmF0b3I6ICcrJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3M6ICdEaWUnLFxuICAgICAgICBvcHRpb25zOiB7fSxcbiAgICAgICAgZXZhbHVhdGVkOiB0cnVlLFxuICAgICAgICBudW1iZXI6IDEsXG4gICAgICAgIGZhY2VzOiAxMCxcbiAgICAgICAgbW9kaWZpZXJzOiBbXSxcbiAgICAgICAgcmVzdWx0czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJlc3VsdDogOSxcbiAgICAgICAgICAgIGFjdGl2ZTogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIF0sXG4gICAgdG90YWw6IDk5LFxuICAgIGV2YWx1YXRlZDogdHJ1ZVxuICB9XG5cbiAgc3RhdGljIGNyaXQwMSA9IHtcbiAgICBjbGFzczogJ1JvbGwnLFxuICAgIG9wdGlvbnM6IHt9LFxuICAgIGRpY2U6IFtdLFxuICAgIGZvcm11bGE6ICcxZHQgKyAxZDEwJyxcbiAgICB0ZXJtczogW1xuICAgICAge1xuICAgICAgICBjbGFzczogJ0NvQzdEZWNhZGVyRGllJyxcbiAgICAgICAgb3B0aW9uczoge30sXG4gICAgICAgIGV2YWx1YXRlZDogdHJ1ZSxcbiAgICAgICAgbnVtYmVyOiAxLFxuICAgICAgICBmYWNlczogMTAsXG4gICAgICAgIG1vZGlmaWVyczogW10sXG4gICAgICAgIHJlc3VsdHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZXN1bHQ6IDEwLFxuICAgICAgICAgICAgYWN0aXZlOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjbGFzczogJ09wZXJhdG9yVGVybScsXG4gICAgICAgIG9wdGlvbnM6IHt9LFxuICAgICAgICBldmFsdWF0ZWQ6IHRydWUsXG4gICAgICAgIG9wZXJhdG9yOiAnKydcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNsYXNzOiAnRGllJyxcbiAgICAgICAgb3B0aW9uczoge30sXG4gICAgICAgIGV2YWx1YXRlZDogdHJ1ZSxcbiAgICAgICAgbnVtYmVyOiAxLFxuICAgICAgICBmYWNlczogMTAsXG4gICAgICAgIG1vZGlmaWVyczogW10sXG4gICAgICAgIHJlc3VsdHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZXN1bHQ6IDEsXG4gICAgICAgICAgICBhY3RpdmU6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICBdLFxuICAgIHRvdGFsOiAxLFxuICAgIGV2YWx1YXRlZDogdHJ1ZVxuICB9XG59XG4iLCIvKiBnbG9iYWwgQ09ORklHLCBmb3VuZHJ5LCBnYW1lLCBJdGVtLCBSb2xsLCBUZXh0RWRpdG9yLCBUb2tlbiwgdWksIGZyb21VdWlkICovXG5pbXBvcnQgeyBDT0M3IH0gZnJvbSAnLi4vY29uZmlnLmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4uL3V0aWxpdGllcy5qcydcbmltcG9ydCB7IENvQ0lERWRpdG9yIH0gZnJvbSAnLi4vYXBwcy9jb2MtaWQtZWRpdG9yLmpzJ1xuXG4vKipcbiAqIE92ZXJyaWRlIGFuZCBleHRlbmQgdGhlIGJhc2ljIDpjbGFzczpgSXRlbWAgaW1wbGVtZW50YXRpb25cbiAqL1xuZXhwb3J0IGNsYXNzIENvQzdJdGVtIGV4dGVuZHMgSXRlbSB7XG4gIC8qKiBDcmVhdGUgZGVyaXZlZCBkb2N1bWVudCBjbGFzc2VzIGZvciBzcGVjaWZpYyBJdGVtIHR5cGVzICovXG4gIGNvbnN0cnVjdG9yIChkYXRhLCBjb250ZXh0KSB7XG4gICAgLyoqIEBzZWUgQ09ORklHLkl0ZW0uZG9jdW1lbnRDbGFzc2VzIGluIG1vZHVsZS9zY3JpcHRzL2NvbmZpZ3VyZS1kb2N1bWVudHMgKi9cbiAgICBpZiAoZGF0YS50eXBlIGluIENPTkZJRy5JdGVtLmRvY3VtZW50Q2xhc3NlcyAmJiAhY29udGV4dD8uZXh0ZW5kZWQpIHtcbiAgICAgIC8qKlxuICAgICAgICogV2hlbiB0aGUgY29uc3RydWN0b3IgZm9yIHRoZSBuZXcgY2xhc3Mgd2lsbCBjYWxsIGl0J3Mgc3VwZXIoKSxcbiAgICAgICAqIHRoZSBleHRlbmRlZCBmbGFnIHdpbGwgYmUgdHJ1ZSwgdGh1cyBieXBhc3NpbmcgdGhpcyB3aG9sZSBwcm9jZXNzXG4gICAgICAgKiBhbmQgcmVzdW1lIGRlZmF1bHQgYmVoYXZpb3JcbiAgICAgICAqL1xuICAgICAgcmV0dXJuIG5ldyBDT05GSUcuSXRlbS5kb2N1bWVudENsYXNzZXNbZGF0YS50eXBlXShkYXRhLCB7XG4gICAgICAgIC4uLnsgZXh0ZW5kZWQ6IHRydWUgfSxcbiAgICAgICAgLi4uY29udGV4dFxuICAgICAgfSlcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkYXRhLmltZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChkYXRhLnR5cGUgPT09ICdza2lsbCcpIHtcbiAgICAgICAgZGF0YS5pbWcgPSAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy9za2lsbHMuc3ZnJ1xuICAgICAgfSBlbHNlIGlmIChkYXRhLnR5cGUgPT09ICdzdGF0dXMnKSB7XG4gICAgICAgIGRhdGEuaW1nID0gJ2ljb25zL3N2Zy9hdXJhLnN2ZydcbiAgICAgIH0gZWxzZSBpZiAoZGF0YS50eXBlID09PSAnd2VhcG9uJykge1xuICAgICAgICBkYXRhLmltZyA9ICdpY29ucy9zdmcvc3dvcmQuc3ZnJ1xuICAgICAgfVxuICAgIH1cbiAgICAvKiogRGVmYXVsdCBiZWhhdmlvciwganVzdCBjYWxsIHN1cGVyKCkgYW5kIGRvIGFsbCB0aGUgZGVmYXVsdCBJdGVtIGluaXRzICovXG4gICAgc3VwZXIoZGF0YSwgY29udGV4dClcbiAgfVxuXG4gIGFzeW5jIF9jcmVhdGVEb2N1bWVudExpbmsgKGV2ZW50RGF0YSwgeyByZWxhdGl2ZVRvLCBsYWJlbCB9ID0ge30pIHtcbiAgICBpZiAodHlwZW9mIGV2ZW50RGF0YS50eXBlID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgZXZlbnREYXRhLnV1aWQgPT09ICdzdHJpbmcnICYmIGV2ZW50RGF0YS50eXBlID09PSAnSXRlbScgJiYgZXZlbnREYXRhLnV1aWQubWF0Y2goL15BY3RvclxcLi8pICYmIHJlbGF0aXZlVG8gaW5zdGFuY2VvZiBDT05GSUcuSm91cm5hbEVudHJ5UGFnZS5kb2N1bWVudENsYXNzKSB7XG4gICAgICAvLyBJZiBkcm9wcGluZyBhIHNraWxsL3dlYXBvbiBmcm9tIGFuIEFjdG9yIG9udG8gYSBKb3VybmFsIEVudHJ5IFBhZ2UgY29udmVydCB0byBhIGNoZWNrIGxpbmtcbiAgICAgIGNvbnN0IGl0ZW0gPSBhd2FpdCBmcm9tVXVpZChldmVudERhdGEudXVpZClcbiAgICAgIGlmIChbJ3NraWxsJywgJ3dlYXBvbiddLmluY2x1ZGVzKGl0ZW0udHlwZSkpIHtcbiAgICAgICAgcmV0dXJuICdAY29jNy5jaGVja1t0eXBlOicgKyBpdGVtLnR5cGUgKyAnLG5hbWU6JyArIGl0ZW0ubmFtZSArICddJ1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3VwZXIuX2NyZWF0ZURvY3VtZW50TGluayhldmVudERhdGEsIHsgcmVsYXRpdmVUbywgbGFiZWwgfSlcbiAgfVxuXG4gIHN0YXRpYyBnZXQgaWNvbkxhbmd1YWdlICgpIHtcbiAgICByZXR1cm4gJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvc2tpbGxzL2xhbmd1YWdlLnN2ZydcbiAgfVxuXG4gIHN0YXRpYyBnZXQgZmxhZ3MgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBtYWxmdW5jdGlvbjogJ21hbGZjJ1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGUgb24gb2YgdGhlIGl0ZW0gcHJvcGVydHkgaW4gZGF0YS5kYXRhLnByb3BlcnRpZXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5SWQgOiBuYW1lIGZvciB0aGUgcHJvcGVydHkgdG8gdG9nZ2xlXG4gICAqL1xuICBhc3luYyB0b2dnbGVQcm9wZXJ0eSAocHJvcGVydHlJZCwgb3ZlcnJpZGUgPSBmYWxzZSkge1xuICAgIGxldCBjaGVja2VkUHJvcHMgPSB7fVxuICAgIGxldCBmaWdodGluZ1xuICAgIGxldCBmaXJlYXJtc1xuICAgIGxldCByYW5nZWRcbiAgICBpZiAodHlwZW9mIENPQzcuZXJhc1twcm9wZXJ0eUlkXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBDb0NJREVkaXRvci5lcmFUb2dnbGUodGhpcywgcHJvcGVydHlJZClcbiAgICB9IGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gJ3dlYXBvbicgJiYgIW92ZXJyaWRlKSB7XG4gICAgICBpZiAocHJvcGVydHlJZCA9PT0gJ2FoZGInKSB7XG4gICAgICAgIGlmICghdGhpcy5zeXN0ZW0ucHJvcGVydGllcy5haGRiKSB7XG4gICAgICAgICAgY2hlY2tlZFByb3BzID0ge1xuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLmFoZGInOiB0cnVlLFxuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLmFkZGInOiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGVja2VkUHJvcHMgPSB7XG4gICAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuYWhkYic6IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9wZXJ0eUlkID09PSAnYWRkYicpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzLmFkZGIpIHtcbiAgICAgICAgICBjaGVja2VkUHJvcHMgPSB7XG4gICAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuYWRkYic6IHRydWUsXG4gICAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuYWhkYic6IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoZWNrZWRQcm9wcyA9IHtcbiAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5hZGRiJzogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHByb3BlcnR5SWQgPT09ICdzaG90Z3VuJykge1xuICAgICAgICBpZiAoIXRoaXMuc3lzdGVtLnByb3BlcnRpZXMuc2hvdGd1bikge1xuICAgICAgICAgIGNoZWNrZWRQcm9wcyA9IHtcbiAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5ybmdkJzogdHJ1ZSxcbiAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5tZWxlZSc6IGZhbHNlLFxuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLnNob3RndW4nOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoZWNrZWRQcm9wcyA9IHtcbiAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5zaG90Z3VuJzogZmFsc2UsXG4gICAgICAgICAgICAnc3lzdGVtLnJhbmdlLmV4dHJlbWUudmFsdWUnOiBudWxsLFxuICAgICAgICAgICAgJ3N5c3RlbS5yYW5nZS5leHRyZW1lLmRhbWFnZSc6IG51bGwsXG4gICAgICAgICAgICAnc3lzdGVtLnJhbmdlLmxvbmcudmFsdWUnOiBudWxsLFxuICAgICAgICAgICAgJ3N5c3RlbS5yYW5nZS5sb25nLmRhbWFnZSc6IG51bGxcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHByb3BlcnR5SWQgPT09ICdtZWxlZScgfHwgcHJvcGVydHlJZCA9PT0gJ3JuZ2QnKSB7XG4gICAgICAgIGxldCBtZWxlZVdlYXBvblxuICAgICAgICBpZiAocHJvcGVydHlJZCA9PT0gJ21lbGVlJyAmJiAhdGhpcy5zeXN0ZW0ucHJvcGVydGllcy5tZWxlZSkge1xuICAgICAgICAgIG1lbGVlV2VhcG9uID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wZXJ0eUlkID09PSAnbWVsZWUnICYmIHRoaXMuc3lzdGVtLnByb3BlcnRpZXMubWVsZWUpIHtcbiAgICAgICAgICBtZWxlZVdlYXBvbiA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BlcnR5SWQgPT09ICdybmdkJyAmJiAhdGhpcy5zeXN0ZW0ucHJvcGVydGllcy5ybmdkKSB7XG4gICAgICAgICAgbWVsZWVXZWFwb24gPSBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wZXJ0eUlkID09PSAncm5nZCcgJiYgdGhpcy5zeXN0ZW0ucHJvcGVydGllcy5ybmdkKSB7XG4gICAgICAgICAgbWVsZWVXZWFwb24gPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lbGVlV2VhcG9uKSB7XG4gICAgICAgICAgY2hlY2tlZFByb3BzID0ge1xuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLm1lbGVlJzogdHJ1ZSxcbiAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5ybmdkJzogZmFsc2UsXG4gICAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuc2hvdGd1bic6IGZhbHNlLFxuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLmJyc3QnOiBmYWxzZSxcbiAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5hdXRvJzogZmFsc2UsXG4gICAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuZGJybCc6IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoZWNrZWRQcm9wcyA9IHtcbiAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5tZWxlZSc6IGZhbHNlLFxuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLnJuZ2QnOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnR5cGUgPT09ICdza2lsbCcgJiYgIW92ZXJyaWRlKSB7XG4gICAgICBsZXQgbW9kaWYgPSBmYWxzZVxuICAgICAgc3dpdGNoIChwcm9wZXJ0eUlkKSB7XG4gICAgICAgIGNhc2UgJ2NvbWJhdCc6XG4gICAgICAgICAgaWYgKCF0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzLmNvbWJhdCkge1xuICAgICAgICAgICAgLy8gQ2xvc2UgY29tYmF0IGJ5IGRlZmF1bHRcbiAgICAgICAgICAgIGZpZ2h0aW5nID0gdHJ1ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGVja2VkUHJvcHMgPSB7XG4gICAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5jb21iYXQnOiBmYWxzZSxcbiAgICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLnNwZWNpYWwnOiBmYWxzZSxcbiAgICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLmZpZ2h0aW5nJzogZmFsc2UsXG4gICAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5maXJlYXJtJzogZmFsc2UsXG4gICAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5yYW5nZWQnOiBmYWxzZSxcbiAgICAgICAgICAgICAgJ3N5c3RlbS5zcGVjaWFsaXphdGlvbic6ICcnLFxuICAgICAgICAgICAgICBuYW1lOiB0aGlzLnN5c3RlbS5za2lsbE5hbWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgbW9kaWYgPSB0cnVlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnZmlnaHRpbmcnOlxuICAgICAgICAgIGlmICghdGhpcy5zeXN0ZW0ucHJvcGVydGllcy5maWdodGluZykge1xuICAgICAgICAgICAgbW9kaWYgPSB0cnVlXG4gICAgICAgICAgICBmaXJlYXJtcyA9IGZhbHNlXG4gICAgICAgICAgICByYW5nZWQgPSBmYWxzZVxuICAgICAgICAgICAgZmlnaHRpbmcgPSB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2ZpcmVhcm0nOlxuICAgICAgICAgIGlmICghdGhpcy5zeXN0ZW0ucHJvcGVydGllcy5maXJlYXJtKSB7XG4gICAgICAgICAgICBtb2RpZiA9IHRydWVcbiAgICAgICAgICAgIGZpcmVhcm1zID0gdHJ1ZVxuICAgICAgICAgICAgcmFuZ2VkID0gZmFsc2VcbiAgICAgICAgICAgIGZpZ2h0aW5nID0gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgbW9kaWYgPSB0cnVlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAncmFuZ2VkJzpcbiAgICAgICAgICBpZiAoIXRoaXMuc3lzdGVtLnByb3BlcnRpZXMucmFuZ2VkKSB7XG4gICAgICAgICAgICBtb2RpZiA9IHRydWVcbiAgICAgICAgICAgIGZpcmVhcm1zID0gZmFsc2VcbiAgICAgICAgICAgIHJhbmdlZCA9IHRydWVcbiAgICAgICAgICAgIGZpZ2h0aW5nID0gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgbW9kaWYgPSB0cnVlXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGlmKSB7XG4gICAgICAgIC8vIHNldCBzcGVjaWFsaXNhdGlvbiBpZiBmaWdodGluZyBvciBmaXJlYXJtXG4gICAgICAgIGlmIChmaWdodGluZykge1xuICAgICAgICAgIGNoZWNrZWRQcm9wcyA9IHtcbiAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5maWdodGluZyc6IHRydWUsXG4gICAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuZmlyZWFybSc6IGZhbHNlLFxuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLnJhbmdlZCc6IGZhbHNlLFxuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLmNvbWJhdCc6IHRydWUsXG4gICAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuc3BlY2lhbCc6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgcGFydHMgPSBDb0M3SXRlbS5nZXROYW1lUGFydHNTcGVjKFxuICAgICAgICAgICAgdGhpcy5zeXN0ZW0uc2tpbGxOYW1lLFxuICAgICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKENPQzcuZmlnaHRpbmdTcGVjaWFsaXphdGlvbk5hbWUpXG4gICAgICAgICAgKVxuICAgICAgICAgIGNoZWNrZWRQcm9wcy5uYW1lID0gcGFydHMubmFtZVxuICAgICAgICAgIGNoZWNrZWRQcm9wcy5za2lsbE5hbWUgPSBwYXJ0cy5za2lsbE5hbWVcbiAgICAgICAgICBjaGVja2VkUHJvcHNbJ3N5c3RlbS5zcGVjaWFsaXphdGlvbiddID0gcGFydHMuc3BlY2lhbGl6YXRpb25cbiAgICAgICAgfSBlbHNlIGlmIChmaXJlYXJtcykge1xuICAgICAgICAgIGNoZWNrZWRQcm9wcyA9IHtcbiAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5maWdodGluZyc6IGZhbHNlLFxuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLmZpcmVhcm0nOiB0cnVlLFxuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLnJhbmdlZCc6IGZhbHNlLFxuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLmNvbWJhdCc6IHRydWUsXG4gICAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuc3BlY2lhbCc6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgcGFydHMgPSBDb0M3SXRlbS5nZXROYW1lUGFydHNTcGVjKFxuICAgICAgICAgICAgdGhpcy5zeXN0ZW0uc2tpbGxOYW1lLFxuICAgICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKENPQzcuZmlyZWFybVNwZWNpYWxpemF0aW9uTmFtZSlcbiAgICAgICAgICApXG4gICAgICAgICAgY2hlY2tlZFByb3BzLm5hbWUgPSBwYXJ0cy5uYW1lXG4gICAgICAgICAgY2hlY2tlZFByb3BzLnNraWxsTmFtZSA9IHBhcnRzLnNraWxsTmFtZVxuICAgICAgICAgIGNoZWNrZWRQcm9wc1snc3lzdGVtLnNwZWNpYWxpemF0aW9uJ10gPSBwYXJ0cy5zcGVjaWFsaXphdGlvblxuICAgICAgICB9IGVsc2UgaWYgKHJhbmdlZCkge1xuICAgICAgICAgIGNoZWNrZWRQcm9wcyA9IHtcbiAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5maWdodGluZyc6IGZhbHNlLFxuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLmZpcmVhcm0nOiBmYWxzZSxcbiAgICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5yYW5nZWQnOiB0cnVlLFxuICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLmNvbWJhdCc6IHRydWUsXG4gICAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuc3BlY2lhbCc6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgcGFydHMgPSBDb0M3SXRlbS5nZXROYW1lUGFydHNTcGVjKFxuICAgICAgICAgICAgdGhpcy5zeXN0ZW0uc2tpbGxOYW1lLFxuICAgICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKENPQzcucmFuZ2VkU3BlY2lhbGl6YXRpb25OYW1lKVxuICAgICAgICAgIClcbiAgICAgICAgICBjaGVja2VkUHJvcHMubmFtZSA9IHBhcnRzLm5hbWVcbiAgICAgICAgICBjaGVja2VkUHJvcHMuc2tpbGxOYW1lID0gcGFydHMuc2tpbGxOYW1lXG4gICAgICAgICAgY2hlY2tlZFByb3BzWydzeXN0ZW0uc3BlY2lhbGl6YXRpb24nXSA9IHBhcnRzLnNwZWNpYWxpemF0aW9uXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJvcGVydHlJZCA9PT0gJ3NwZWNpYWwnKSB7XG4gICAgICBpZiAodGhpcy5zeXN0ZW0ucHJvcGVydGllc1twcm9wZXJ0eUlkXSkge1xuICAgICAgICBjaGVja2VkUHJvcHMgPSB7XG4gICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLnNwZWNpYWwnOiBmYWxzZSxcbiAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuZmlnaHRpbmcnOiBmYWxzZSxcbiAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuZmlyZWFybSc6IGZhbHNlLFxuICAgICAgICAgICdzeXN0ZW0ucHJvcGVydGllcy5yYW5nZWQnOiBmYWxzZSxcbiAgICAgICAgICAnc3lzdGVtLnByb3BlcnRpZXMuY29tYmF0JzogZmFsc2UsXG4gICAgICAgICAgJ3N5c3RlbS5zcGVjaWFsaXphdGlvbic6ICcnLFxuICAgICAgICAgIG5hbWU6IHRoaXMuc3lzdGVtLnNraWxsTmFtZVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGVja2VkUHJvcHMgPSB7XG4gICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLnNwZWNpYWwnOiB0cnVlLFxuICAgICAgICAgIG5hbWU6IHRoaXMuc3lzdGVtLnNwZWNpYWxpemF0aW9uICsgJyAoJyArIHRoaXMuc3lzdGVtLnNraWxsTmFtZSArICcpJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5rZXlzKGNoZWNrZWRQcm9wcykubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgaXRlbSA9IGF3YWl0IHRoaXMudXBkYXRlKGNoZWNrZWRQcm9wcylcbiAgICAgIHJldHVybiBpdGVtXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHByb3BOYW1lID0gYHN5c3RlbS5wcm9wZXJ0aWVzLiR7cHJvcGVydHlJZH1gXG4gICAgICBjb25zdCBwcm9wVmFsdWUgPSAhdGhpcy5zeXN0ZW0ucHJvcGVydGllc1twcm9wZXJ0eUlkXVxuICAgICAgYXdhaXQgdGhpcy51cGRhdGUoeyBbcHJvcE5hbWVdOiBwcm9wVmFsdWUgfSkudGhlbihpdGVtID0+IHtcbiAgICAgICAgcmV0dXJuIGl0ZW1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgaGFzUHJvcGVydHkgKHByb3BlcnR5SWQpIHtcbiAgICByZXR1cm4gdGhpcy5pc0luY2x1ZGVkSW5TZXQoJ3Byb3BlcnRpZXMnLCBwcm9wZXJ0eUlkKVxuICB9XG5cbiAgZ2V0IHNob3J0TmFtZSAoKSB7XG4gICAgaWYgKHRoaXMuc3lzdGVtLnByb3BlcnRpZXMuc3BlY2lhbCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3lzdGVtLnNraWxsTmFtZVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5uYW1lXG4gIH1cblxuICBhc3luYyB1cGRhdGVSb2xsIChyb2xsKSB7XG4gICAgaWYgKCd1cGRhdGVSb2xsJyBpbiB0aGlzLnNoZWV0KSByZXR1cm4gYXdhaXQgdGhpcy5zaGVldC51cGRhdGVSb2xsKHJvbGwpXG4gICAgZWxzZSBpZiAoJ3VwZGF0ZVJvbGwnIGluIHRoaXMpIHJldHVybiBhd2FpdCB0aGlzLnVwZGF0ZVJvbGwocm9sbClcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBzdGF0aWMgZ2V0TmFtZVBhcnRzU3BlYyAoc2tpbGxOYW1lLCBzcGVjaWFsaXphdGlvbikge1xuICAgIGlmICghc3BlY2lhbGl6YXRpb24pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IHNraWxsTmFtZSxcbiAgICAgICAgc3BlY2lhbGl6YXRpb246ICcnLFxuICAgICAgICBza2lsbE5hbWVcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgc3BlY05hbWVSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAnXignICsgQ29DN1V0aWxpdGllcy5xdW90ZVJlZ0V4cChzcGVjaWFsaXphdGlvbikgKyAnKVxcXFxzKlxcXFwoKC4rKVxcXFwpJCcsXG4gICAgICAnaSdcbiAgICApXG4gICAgY29uc3QgbWF0Y2ggPSBza2lsbE5hbWUubWF0Y2goc3BlY05hbWVSZWdleClcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIHNwZWNpYWxpemF0aW9uID0gbWF0Y2hbMV1cbiAgICAgIHNraWxsTmFtZSA9IG1hdGNoWzJdXG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBzcGVjaWFsaXphdGlvbiArICcgKCcgKyBza2lsbE5hbWUgKyAnKScsXG4gICAgICBzcGVjaWFsaXphdGlvbixcbiAgICAgIHNraWxsTmFtZVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXROYW1lV2l0aG91dFNwZWMgKGl0ZW0pIHtcbiAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIENvQzdJdGVtKSB7XG4gICAgICBpZiAoaXRlbS5zeXN0ZW0/LnByb3BlcnRpZXM/LnNwZWNpYWwgJiYgdHlwZW9mIGl0ZW0uc3lzdGVtLnNraWxsTmFtZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uc3lzdGVtLnNraWxsTmFtZVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXRlbS5wcm9wZXJ0aWVzPy5zcGVjaWFsICYmIHR5cGVvZiBpdGVtLnNraWxsTmFtZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uc2tpbGxOYW1lXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpdGVtLm5hbWVcbiAgfVxuXG4gIHN0YXRpYyBpc0FueVNwZWMgKGl0ZW0pIHtcbiAgICBpZiAoaXRlbS50eXBlICE9PSAnc2tpbGwnIHx8ICFpdGVtLnN5c3RlbS5wcm9wZXJ0aWVzPy5zcGVjaWFsKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaWYgKGl0ZW0uc3lzdGVtLnByb3BlcnRpZXM/LnJlcXVpcmVzbmFtZSB8fCBpdGVtLnN5c3RlbS5wcm9wZXJ0aWVzPy5waWNrbmFtZW9ubHkpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBbXG4gICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQW55U3BlY05hbWUnKS50b0xvd2VyQ2FzZSgpLFxuICAgICAgJ2FueSdcbiAgICBdLmluY2x1ZGVzKENPTkZJRy5JdGVtLmRvY3VtZW50Q2xhc3Nlcy5za2lsbC5ndWVzc05hbWVQYXJ0cyhpdGVtLm5hbWUpLnNraWxsTmFtZS50b0xvd2VyQ2FzZSgpKVxuICB9XG5cbiAgYXN5bmMgY2hlY2tTa2lsbFByb3BlcnRpZXMgKCkge1xuICAgIGlmICh0aGlzLnR5cGUgIT09ICdza2lsbCcpIHJldHVyblxuICAgIGNvbnN0IGNoZWNrZWRQcm9wcyA9IHt9XG4gICAgaWYgKHRoaXMuc3lzdGVtLnByb3BlcnRpZXMuY29tYmF0KSB7XG4gICAgICAvLyBpZiBza2lsbCBpcyBub3QgYSBzcGVjaWFsaXNhdGlvbiBtYWtlIGl0IGEgc3BlY2lhbGlzYXRpb25cbiAgICAgIGlmICghdGhpcy5zeXN0ZW0ucHJvcGVydGllcy5zcGVjaWFsKSB7XG4gICAgICAgIHRoaXMuc3lzdGVtLnByb3BlcnRpZXMuc3BlY2lhbCA9IHRydWVcbiAgICAgICAgY2hlY2tlZFByb3BzWydzeXN0ZW0ucHJvcGVydGllcy5zcGVjaWFsJ10gPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIC8vIElmIHNraWxsIGlzIGNvbWJhdCBza2lsbCBhbmQgbm8gc3BlY2lhbGlzYXRpb24gc2V0IHRoZW4gbWFrZSBpdCBhIGZpZ2h0aW5nKCBjbG9zZWNvbWJhdCkgc2tpbGxcbiAgICAgIGlmIChcbiAgICAgICAgIXRoaXMuc3lzdGVtLnByb3BlcnRpZXMuZmlnaHRpbmcgJiZcbiAgICAgICAgIXRoaXMuc3lzdGVtLnByb3BlcnRpZXMuZmlyZWFybVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuc3lzdGVtLnByb3BlcnRpZXMuZmlnaHRpbmcgPSB0cnVlXG4gICAgICAgIGNoZWNrZWRQcm9wc1snc3lzdGVtLnByb3BlcnRpZXMuZmlnaHRpbmcnXSA9IHRydWVcbiAgICAgIH1cblxuICAgICAgLy8gaWYgc2tpbGwgaXMgY2xvc2UgY29tYmF0IHdpdGhvdXQgc3BlY2lhbGlzYXRpb24gbmFtZSBtYWtlIHNldCBpdCBhY2NvcmRpbmcgdG8gdGhlIGZpZ2h0aW5nU3BlY2lhbGl6YXRpb25OYW1lXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuc3lzdGVtLnByb3BlcnRpZXMuZmlnaHRpbmcgJiZcbiAgICAgICAgKCF0aGlzLnN5c3RlbS5zcGVjaWFsaXphdGlvbiB8fCB0aGlzLnN5c3RlbS5zcGVjaWFsaXphdGlvbiA9PT0gJycpXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5zeXN0ZW0uc3BlY2lhbGl6YXRpb24gPSBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgQ09DNy5maWdodGluZ1NwZWNpYWxpemF0aW9uTmFtZVxuICAgICAgICApXG4gICAgICAgIGNoZWNrZWRQcm9wc1snc3lzdGVtLnNwZWNpYWxpemF0aW9uJ10gPSBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgQ09DNy5maWdodGluZ1NwZWNpYWxpemF0aW9uTmFtZVxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIC8vIGlmIHNraWxsIGlzIHJhbmdlIGNvbWJhdCB3aXRob3V0IGEgc3BlY2lhbGlzYXRpb24gbmFtZSBtYWtlIHNldCBpdCBhY2NvcmRpbmcgdG8gdGhlIGZpcmVhcm1TcGVjaWFsaXphdGlvbk5hbWVcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5zeXN0ZW0ucHJvcGVydGllcy5maXJlYXJtICYmXG4gICAgICAgICghdGhpcy5zeXN0ZW0uc3BlY2lhbGl6YXRpb24gfHwgdGhpcy5zeXN0ZW0uc3BlY2lhbGl6YXRpb24gPT09ICcnKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuc3lzdGVtLnNwZWNpYWxpemF0aW9uID0gZ2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgIENPQzcuZmlyZWFybVNwZWNpYWxpemF0aW9uTmFtZVxuICAgICAgICApXG4gICAgICAgIGNoZWNrZWRQcm9wc1snc3lzdGVtLnNwZWNpYWxpemF0aW9uJ10gPSBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgQ09DNy5maXJlYXJtU3BlY2lhbGl6YXRpb25OYW1lXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuc3lzdGVtLnByb3BlcnRpZXMuZmlnaHRpbmcpIHtcbiAgICAgICAgdGhpcy5zeXN0ZW0ucHJvcGVydGllcy5maWdodGluZyA9IGZhbHNlXG4gICAgICAgIGNoZWNrZWRQcm9wc1snc3lzdGVtLnByb3BlcnRpZXMuZmlnaHRpbmcnXSA9IGZhbHNlXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zeXN0ZW0ucHJvcGVydGllcy5maXJlYXJtKSB7XG4gICAgICAgIHRoaXMuc3lzdGVtLnByb3BlcnRpZXMuZmlyZWFybSA9IGZhbHNlXG4gICAgICAgIGNoZWNrZWRQcm9wc1snc3lzdGVtLnByb3BlcnRpZXMuZmlyZWFybSddID0gZmFsc2VcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmtleXMoY2hlY2tlZFByb3BzKS5sZW5ndGggPiAwKSB7XG4gICAgICBhd2FpdCB0aGlzLnVwZGF0ZShjaGVja2VkUHJvcHMpXG4gICAgfVxuXG4gICAgcmV0dXJuIGNoZWNrZWRQcm9wc1xuICB9XG5cbiAgaXNJbmNsdWRlZEluU2V0IChzZXQsIHByb3BlcnR5SWQpIHtcbiAgICBpZiAoIXRoaXMuc3lzdGVtW3NldF0pIHRoaXMuc3lzdGVtW3NldF0gPSBbXVxuICAgIGNvbnN0IHByb3BlcnR5SW5kZXggPSB0aGlzLnN5c3RlbVtzZXRdLmluZGV4T2YocHJvcGVydHlJZClcbiAgICBpZiAocHJvcGVydHlJbmRleCA+IC0xKSByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgYXN5bmMgZmxhZ0ZvckRldmVsb3BlbWVudCAoKSB7XG4gICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3hwRW5hYmxlZCcpIHx8IGdhbWUudXNlci5pc0dNKSB7XG4gICAgICBpZiAoIXRoaXMuc3lzdGVtLmZsYWdzKSB7XG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlKHsgJ3N5c3RlbS5mbGFncyc6IHt9IH0pXG4gICAgICB9XG4gICAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uZmxhZ3MuZGV2ZWxvcGVtZW50JzogdHJ1ZSB9KVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHVuZmxhZ0ZvckRldmVsb3BlbWVudCAoKSB7XG4gICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3hwRW5hYmxlZCcpIHx8IGdhbWUudXNlci5pc0dNKSB7XG4gICAgICBpZiAoIXRoaXMuc3lzdGVtLmZsYWdzKSB7XG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlKHsgJ3N5c3RlbS5mbGFncyc6IHt9IH0pXG4gICAgICB9XG4gICAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uZmxhZ3MuZGV2ZWxvcGVtZW50JzogZmFsc2UgfSlcbiAgICB9XG4gIH1cblxuICBnZXQgZGV2ZWxvcGVtZW50RmxhZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SXRlbUZsYWcoJ2RldmVsb3BlbWVudCcpXG4gIH1cblxuICBhc3luYyB0b2dnbGVJdGVtRmxhZyAoZmxhZ05hbWUsIGVyYXNlQWRqdXN0bWVudCA9IHRydWUpIHtcbiAgICBjb25zdCBmbGFnVmFsdWUgPSAhdGhpcy5nZXRJdGVtRmxhZyhmbGFnTmFtZSlcbiAgICBjb25zdCBuYW1lID0gYHN5c3RlbS5mbGFncy4ke2ZsYWdOYW1lfWBcbiAgICBpZiAoXG4gICAgICAoZmxhZ05hbWUgPT09ICdvY2N1cGF0aW9uJyB8fCBmbGFnTmFtZSA9PT0gJ2FyY2hldHlwZScpICYmXG4gICAgICAhZmxhZ1ZhbHVlICYmXG4gICAgICBlcmFzZUFkanVzdG1lbnRcbiAgICApIHtcbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlKHtcbiAgICAgICAgW2BzeXN0ZW0uYWRqdXN0bWVudHMuJHtmbGFnTmFtZX1gXTogbnVsbCxcbiAgICAgICAgW25hbWVdOiBmbGFnVmFsdWVcbiAgICAgIH0pXG4gICAgfSBlbHNlIGlmIChmbGFnTmFtZSA9PT0gJ2RldmVsb3BlbWVudCcpIHtcbiAgICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICd4cEVuYWJsZWQnKSB8fCBnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7IFtuYW1lXTogZmxhZ1ZhbHVlIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1aS5ub3RpZmljYXRpb25zLmluZm8oZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlNraWxsWHBHYWluRGlzYWJsZWQnKSlcbiAgICAgIH1cbiAgICB9IGVsc2UgYXdhaXQgdGhpcy51cGRhdGUoeyBbbmFtZV06IGZsYWdWYWx1ZSB9KVxuICB9XG5cbiAgYXN5bmMgc2V0SXRlbUZsYWcgKGZsYWdOYW1lKSB7XG4gICAgYXdhaXQgdGhpcy51cGRhdGUoeyBbYHN5c3RlbS5mbGFncy4ke2ZsYWdOYW1lfWBdOiB0cnVlIH0pXG4gIH1cblxuICBhc3luYyB1bnNldEl0ZW1GbGFnIChmbGFnTmFtZSwgZXJhc2VBZGp1c3RtZW50ID0gdHJ1ZSkge1xuICAgIGNvbnN0IG5hbWUgPSBgc3lzdGVtLmZsYWdzLiR7ZmxhZ05hbWV9YFxuICAgIGlmIChcbiAgICAgIChmbGFnTmFtZSA9PT0gJ29jY3VwYXRpb24nIHx8IGZsYWdOYW1lID09PSAnYXJjaGV0eXBlJykgJiZcbiAgICAgIGVyYXNlQWRqdXN0bWVudFxuICAgICkge1xuICAgICAgYXdhaXQgdGhpcy51cGRhdGUoe1xuICAgICAgICBbYHN5c3RlbS5hZGp1c3RtZW50cy4ke2ZsYWdOYW1lfWBdOiBudWxsLFxuICAgICAgICBbbmFtZV06IGZhbHNlXG4gICAgICB9KVxuICAgIH0gZWxzZSBhd2FpdCB0aGlzLnVwZGF0ZSh7IFtuYW1lXTogZmFsc2UgfSlcbiAgfVxuXG4gIGdldEl0ZW1GbGFnIChmbGFnTmFtZSkge1xuICAgIGlmICghdGhpcy5zeXN0ZW0uZmxhZ3MpIHtcbiAgICAgIHRoaXMuc3lzdGVtLmZsYWdzID0ge31cbiAgICAgIHRoaXMuc3lzdGVtLmZsYWdzLmxvY2tlZCA9IHRydWVcbiAgICAgIHRoaXMudXBkYXRlKHsgJ3N5c3RlbS5mbGFncyc6IHt9IH0pXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuc3lzdGVtLmZsYWdzW2ZsYWdOYW1lXSkgcmV0dXJuIGZhbHNlXG4gICAgcmV0dXJuIHRoaXMuc3lzdGVtLmZsYWdzW2ZsYWdOYW1lXVxuICB9XG5cbiAgZ2V0IHVzZXNBbHRlcm5hdGl2ZVNraWxsICgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy50eXBlID09PSAnd2VhcG9uJyAmJlxuICAgICAgKHRoaXMuc3lzdGVtLnByb3BlcnRpZXM/LmF1dG8gPT09IHRydWUgfHxcbiAgICAgICAgdGhpcy5zeXN0ZW0ucHJvcGVydGllcz8uYnJzdCA9PT0gdHJ1ZSB8fFxuICAgICAgICB0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzPy50aHJvd24gPT09IHRydWUpXG4gICAgKVxuICB9XG5cbiAgZ2V0IG1heFVzZXNQZXJSb3VuZCAoKSB7XG4gICAgaWYgKHRoaXMudHlwZSAhPT0gJ3dlYXBvbicpIHJldHVybiBudWxsXG4gICAgY29uc3QgbXVsdGlTaG90ID0gcGFyc2VJbnQodGhpcy5zeXN0ZW0udXNlc1BlclJvdW5kLm1heClcbiAgICBpZiAoaXNOYU4obXVsdGlTaG90KSkgcmV0dXJuIDBcbiAgICByZXR1cm4gbXVsdGlTaG90XG4gIH1cblxuICBnZXQgdXNlc1BlclJvdW5kICgpIHtcbiAgICBpZiAodGhpcy50eXBlICE9PSAnd2VhcG9uJykgcmV0dXJuIG51bGxcbiAgICBjb25zdCBzaW5nbGVTaG90ID0gcGFyc2VJbnQodGhpcy5zeXN0ZW0udXNlc1BlclJvdW5kLm5vcm1hbClcbiAgICBpZiAoaXNOYU4oc2luZ2xlU2hvdCkpIHJldHVybiAwXG4gICAgcmV0dXJuIHNpbmdsZVNob3RcbiAgfVxuXG4gIGdldCB1c2VzUGVyUm91bmRTdHJpbmcgKCkge1xuICAgIGxldCB1c2VzUGVyUm91bmRcbiAgICBpZiAodGhpcy5zeXN0ZW0udXNlc1BlclJvdW5kLm5vcm1hbCkge1xuICAgICAgdXNlc1BlclJvdW5kID0gdGhpcy5zeXN0ZW0udXNlc1BlclJvdW5kLm5vcm1hbFxuICAgIH0gZWxzZSB7XG4gICAgICB1c2VzUGVyUm91bmQgPSAnMSdcbiAgICB9XG4gICAgaWYgKHRoaXMuc3lzdGVtLnVzZXNQZXJSb3VuZC5tYXgpIHtcbiAgICAgIHVzZXNQZXJSb3VuZCArPSBgKCR7dGhpcy5zeXN0ZW0udXNlc1BlclJvdW5kLm1heH0pYFxuICAgIH1cbiAgICBpZiAodGhpcy5zeXN0ZW0ucHJvcGVydGllcy5hdXRvKSB7XG4gICAgICB1c2VzUGVyUm91bmQgKz0gYCAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5XZWFwb25BdXRvJyl9YFxuICAgIH1cbiAgICBpZiAodGhpcy5zeXN0ZW0ucHJvcGVydGllcy5icnN0KSB7XG4gICAgICB1c2VzUGVyUm91bmQgKz0gYCAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5XZWFwb25CcnN0Jyl9YFxuICAgICAgaWYgKHRoaXMuc3lzdGVtLnVzZXNQZXJSb3VuZC5idXJzdCkge1xuICAgICAgICB1c2VzUGVyUm91bmQgKz0gYCgke3RoaXMuc3lzdGVtLnVzZXNQZXJSb3VuZC5idXJzdH0pYFxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1c2VzUGVyUm91bmRcbiAgfVxuXG4gIGdldCBtdWx0aXBsZVNob3RzICgpIHtcbiAgICBpZiAodGhpcy50eXBlICE9PSAnd2VhcG9uJykgcmV0dXJuIG51bGxcbiAgICBpZiAodGhpcy5tYXhVc2VzUGVyUm91bmQgPD0gMSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBnZXQgc2luZ2xlU2hvdCAoKSB7XG4gICAgaWYgKHRoaXMudHlwZSAhPT0gJ3dlYXBvbicpIHJldHVybiBudWxsXG4gICAgaWYgKCF0aGlzLnVzZXNQZXJSb3VuZCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBnZXQgYmFzZVJhbmdlICgpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5zeXN0ZW0ucmFuZ2Uubm9ybWFsLnZhbHVlKVxuICB9XG5cbiAgZ2V0IGxvbmdSYW5nZSAoKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuc3lzdGVtLnJhbmdlLmxvbmcudmFsdWUpXG4gIH1cblxuICBnZXQgZXh0cmVtZVJhbmdlICgpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5zeXN0ZW0ucmFuZ2UuZXh0cmVtZS52YWx1ZSlcbiAgfVxuXG4gIGdldCBza2lsbFByb3BlcnRpZXMgKCkge1xuICAgIGlmICh0aGlzLnR5cGUgIT09ICdza2lsbCcpIHJldHVybiBbXVxuXG4gICAgY29uc3Qgc2tpbGxQcm9wZXJ0aWVzID0gW11cbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhDT0M3LnNraWxsUHJvcGVydGllcykpIHtcbiAgICAgIGlmICh0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzW2tleV0gPT09IHRydWUpIHtcbiAgICAgICAgc2tpbGxQcm9wZXJ0aWVzLnB1c2goZ2FtZS5pMThuLmxvY2FsaXplKHZhbHVlKSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNraWxsUHJvcGVydGllc1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIGNhbGN1bGF0ZUJhc2UgKGFjdG9yLCBkYXRhKSB7XG4gICAgaWYgKGRhdGEudHlwZSAhPT0gJ3NraWxsJykgcmV0dXJuIG51bGxcbiAgICBpZiAoU3RyaW5nKGRhdGEuc3lzdGVtLmJhc2UpLmluY2x1ZGVzKCdAJykpIHtcbiAgICAgIGNvbnN0IHBhcnNlZCA9IHt9XG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhDT0M3LmZvcm11bGEuYWN0b3JzaGVldCkpIHtcbiAgICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdAJykgJiYgdmFsdWUuc3RhcnRzV2l0aCgndGhpcy5hY3Rvci4nKSkge1xuICAgICAgICAgIHBhcnNlZFtrZXkuc3Vic3RyaW5nKDEpXSA9IGZvdW5kcnkudXRpbHMuZ2V0UHJvcGVydHkoYWN0b3IsIHZhbHVlLnN1YnN0cmluZygxMSkpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCB2YWx1ZVxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLmZsb29yKFxuICAgICAgICAgIG5ldyBSb2xsKGRhdGEuc3lzdGVtLmJhc2UsIHBhcnNlZClbKCFmb3VuZHJ5LnV0aWxzLmlzTmV3ZXJWZXJzaW9uKGdhbWUudmVyc2lvbiwgJzEyJykgPyAnZXZhbHVhdGUnIDogJ2V2YWx1YXRlU3luYycpLyogLy8gRm91bmRyeVZUVCB2MTEgKi9dKHsgbWF4aW1pemU6IHRydWUgfSkudG90YWxcbiAgICAgICAgKVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHZhbHVlID0gMFxuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuICAgIHJldHVybiAhaXNOYU4ocGFyc2VJbnQoZGF0YS5zeXN0ZW0uYmFzZSkpID8gcGFyc2VJbnQoZGF0YS5zeXN0ZW0uYmFzZSkgOiBudWxsXG4gIH1cblxuICBnZXQgX2Jhc2UgKCkge1xuICAgIGlmICh0aGlzLnR5cGUgIT09ICdza2lsbCcpIHJldHVybiBbbnVsbCwgZmFsc2VdXG4gICAgaWYgKHR5cGVvZiB0aGlzLnN5c3RlbS5iYXNlICE9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIFt0aGlzLnN5c3RlbS5iYXNlLCBmYWxzZV1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5zeXN0ZW0uYmFzZS5pbmNsdWRlcygnQCcpKSB7XG4gICAgICBjb25zdCBwYXJzZWQgPSB7fVxuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoQ09DNy5mb3JtdWxhLmFjdG9yc2hlZXQpKSB7XG4gICAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnQCcpICYmIHZhbHVlLnN0YXJ0c1dpdGgoJ3RoaXMuJykpIHtcbiAgICAgICAgICBwYXJzZWRba2V5LnN1YnN0cmluZygxKV0gPSBmb3VuZHJ5LnV0aWxzLmdldFByb3BlcnR5KHRoaXMsIHZhbHVlLnN1YnN0cmluZyg1KSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IHZhbHVlXG4gICAgICB0cnkge1xuICAgICAgICB2YWx1ZSA9IE1hdGguZmxvb3IoXG4gICAgICAgICAgbmV3IFJvbGwodGhpcy5zeXN0ZW0uYmFzZSwgcGFyc2VkKVsoIWZvdW5kcnkudXRpbHMuaXNOZXdlclZlcnNpb24oZ2FtZS52ZXJzaW9uLCAnMTInKSA/ICdldmFsdWF0ZScgOiAnZXZhbHVhdGVTeW5jJykvKiAvLyBGb3VuZHJ5VlRUIHYxMSAqL10oeyBtYXhpbWl6ZTogdHJ1ZSB9KS50b3RhbFxuICAgICAgICApXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgdmFsdWUgPSAwXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbdmFsdWUsIHRydWVdXG4gICAgfVxuICAgIHJldHVybiBbXG4gICAgICAhaXNOYU4ocGFyc2VJbnQodGhpcy5zeXN0ZW0uYmFzZSkpXG4gICAgICAgID8gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYmFzZSlcbiAgICAgICAgOiBudWxsLFxuICAgICAgZmFsc2VcbiAgICBdXG4gIH1cblxuICBhc3luYyBhc3luY0Jhc2UgKCkge1xuICAgIGNvbnN0IGUgPSB0aGlzLl9iYXNlXG4gICAgaWYgKGVbMV0pIHtcbiAgICAgIGNvbnNvbGUuaW5mbyhcbiAgICAgICAgYFtDT0M3XSAoJHt0aGlzLnBhcmVudD8ubmFtZX0pIEV2YWx1YXRpbmcgc2tpbGwgJHt0aGlzLm5hbWV9OiR7dGhpcy5zeXN0ZW0uYmFzZX0gdG8gJHtlWzBdfWBcbiAgICAgIClcbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlKHsgJ3N5c3RlbS5iYXNlJzogZVswXSB9KVxuICAgIH1cbiAgICByZXR1cm4gZVswXVxuICB9XG5cbiAgZ2V0IGJhc2UgKCkge1xuICAgIGNvbnN0IGUgPSB0aGlzLl9iYXNlXG4gICAgaWYgKGVbMV0pIHtcbiAgICAgIHRoaXMudXBkYXRlKHsgJ3N5c3RlbS5iYXNlJzogZVswXSB9KVxuICAgIH1cbiAgICByZXR1cm4gZVswXVxuICB9XG5cbiAgZ2V0QnVsbGV0TGVmdCAoKSB7XG4gICAgaWYgKHRoaXMudHlwZSAhPT0gJ3dlYXBvbicpIHJldHVybiBudWxsXG4gICAgaWYgKCF0aGlzLnN5c3RlbS5hbW1vKSB7XG4gICAgICB0aGlzLnNldEJ1bGxldHMoMClcbiAgICAgIHJldHVybiAwXG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN5c3RlbS5hbW1vXG4gIH1cblxuICBhc3luYyByZWxvYWQgKCkge1xuICAgIGlmICh0aGlzLnR5cGUgIT09ICd3ZWFwb24nKSByZXR1cm4gbnVsbFxuICAgIGNvbnN0IG1heEJ1bGxldCA9IHRoaXMuc3lzdGVtLmJ1bGxldHNcbiAgICAgID8gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYnVsbGV0cylcbiAgICAgIDogMVxuICAgIGF3YWl0IHRoaXMuc2V0QnVsbGV0cyhtYXhCdWxsZXQpXG4gIH1cblxuICBhc3luYyBzZXRCdWxsZXRzIChidWxsZXRzKSB7XG4gICAgaWYgKHRoaXMudHlwZSAhPT0gJ3dlYXBvbicpIHJldHVybiBudWxsXG4gICAgYXdhaXQgdGhpcy51cGRhdGUoeyAnc3lzdGVtLmFtbW8nOiBidWxsZXRzIHx8IDAgfSlcbiAgfVxuXG4gIGFzeW5jIGFkZEJ1bGxldCAoKSB7XG4gICAgaWYgKHRoaXMudHlwZSAhPT0gJ3dlYXBvbicpIHJldHVybiBudWxsXG4gICAgY29uc3QgYnVsbGV0cyA9IGF3YWl0IHRoaXMuZ2V0QnVsbGV0TGVmdCgpXG4gICAgY29uc3QgbWF4QnVsbGV0cyA9IHRoaXMuc3lzdGVtLmJ1bGxldHNcbiAgICAgID8gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYnVsbGV0cylcbiAgICAgIDogMVxuICAgIGlmIChidWxsZXRzICsgMSA+PSBtYXhCdWxsZXRzKSBhd2FpdCB0aGlzLnNldEJ1bGxldHMobWF4QnVsbGV0cylcbiAgICBlbHNlIGF3YWl0IHRoaXMuc2V0QnVsbGV0cyhidWxsZXRzICsgMSlcbiAgfVxuXG4gIGFzeW5jIHNob290QnVsbGV0cyAoeCkge1xuICAgIGlmICh0aGlzLnR5cGUgIT09ICd3ZWFwb24nKSByZXR1cm4gbnVsbFxuICAgIGNvbnN0IGJ1bGxldHMgPSBhd2FpdCB0aGlzLmdldEJ1bGxldExlZnQoKVxuICAgIGlmICh4ID4gYnVsbGV0cykgYXdhaXQgdGhpcy5zZXRCdWxsZXRzKDApXG4gICAgZWxzZSBhd2FpdCB0aGlzLnNldEJ1bGxldHMoYnVsbGV0cyAtIHgpXG4gIH1cblxuICBzdGF0aWMgbWVyZ2VPcHRpb25hbFNraWxscyAoc2tpbGxMaXN0LCBvcHRpb25zKSB7XG4gICAgY29uc3Qgam9pbnRBcnJheSA9IHNraWxsTGlzdC5jb25jYXQob3B0aW9ucylcbiAgICByZXR1cm4gam9pbnRBcnJheVxuICAgICAgLnJlZHVjZSgobmV3QXJyYXksIGl0ZW0pID0+IHtcbiAgICAgICAgLy8gSWYgc2tpbGwgaXMgbm90IGEgZ2VuZXJpYyBzcGVjIGFuZCBpcyBhbHJlYWR5IGluY2x1ZGVkIHdlIGRvbid0IGFkZCBpdGVtXG4gICAgICAgIGlmIChcbiAgICAgICAgICAhQ29DN0l0ZW0uaXNBbnlTcGVjKGl0ZW0pICYmXG4gICAgICAgICAgbmV3QXJyYXkuZmluZChza2lsbCA9PiBza2lsbC5uYW1lID09PSBpdGVtLm5hbWUpXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBuZXdBcnJheVxuICAgICAgICB9XG4gICAgICAgIC8vIEVsc2UgaXRlbSBpcyBhZGRlZFxuICAgICAgICByZXR1cm4gWy4uLm5ld0FycmF5LCBpdGVtXVxuICAgICAgfSwgW10pXG4gICAgICAuc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG4gIH1cblxuICAvKiogVE9ETyA6IHJpZW4gYSBmYWlyZSBpY2kgISFcbiAgICogR2V0IHRoZSBBY3RvciB3aGljaCBpcyB0aGUgYXV0aG9yIG9mIGEgY2hhdCBjYXJkXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNhcmQgICAgVGhlIGNoYXQgY2FyZCBiZWluZyB1c2VkXG4gICAqIEByZXR1cm4ge0FjdG9yfG51bGx9ICAgICAgICAgVGhlIEFjdG9yIGVudGl0eSBvciBudWxsXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGF0aWMgX2dldENoYXRDYXJkQWN0b3IgKGNhcmQpIHtcbiAgICAvLyBDYXNlIDEgLSBhIHN5bnRoZXRpYyBhY3RvciBmcm9tIGEgVG9rZW5cbiAgICBjb25zdCB0b2tlbktleSA9IGNhcmQuZGF0YXNldC50b2tlbklkXG4gICAgaWYgKHRva2VuS2V5KSB7XG4gICAgICBjb25zdCBbc2NlbmVJZCwgdG9rZW5JZF0gPSB0b2tlbktleS5zcGxpdCgnLicpXG4gICAgICBpZiAoc2NlbmVJZCA9PT0gJ1RPS0VOJykge1xuICAgICAgICByZXR1cm4gZ2FtZS5hY3RvcnMudG9rZW5zW3Rva2VuSWRdIC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2NlbmUgPSBnYW1lLnNjZW5lcy5nZXQoc2NlbmVJZClcbiAgICAgICAgaWYgKCFzY2VuZSkgcmV0dXJuIG51bGxcbiAgICAgICAgY29uc3QgdG9rZW5EYXRhID0gc2NlbmUuZ2V0RW1iZWRkZWREb2N1bWVudCgnVG9rZW4nLCB0b2tlbklkKVxuICAgICAgICBpZiAoIXRva2VuRGF0YSkgcmV0dXJuIG51bGxcbiAgICAgICAgY29uc3QgdG9rZW4gPSBuZXcgVG9rZW4odG9rZW5EYXRhKVxuICAgICAgICByZXR1cm4gdG9rZW4uYWN0b3JcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDYXNlIDIgLSB1c2UgQWN0b3IgSUQgZGlyZWN0b3J5XG4gICAgY29uc3QgYWN0b3JJZCA9IGNhcmQuZGF0YXNldC5hY3RvcklkXG4gICAgcmV0dXJuIGdhbWUuYWN0b3JzLmdldChhY3RvcklkKSB8fCBudWxsXG4gIH1cblxuICAvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuICAvKiAgQ2hhdCBNZXNzYWdlIEhlbHBlcnMgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4gIC8qKlxuICAgKiBQcmVwYXJlIGFuIG9iamVjdCBvZiBjaGF0IGRhdGEgdXNlZCB0byBkaXNwbGF5IGEgY2FyZCBmb3IgdGhlIEl0ZW0gaW4gdGhlIGNoYXQgbG9nXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBodG1sT3B0aW9ucyAgICBPcHRpb25zIHVzZWQgYnkgdGhlIFRleHRFZGl0b3IuZW5yaWNoSFRNTCBmdW5jdGlvblxuICAgKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICAgICAgQW4gb2JqZWN0IG9mIGNoYXQgZGF0YSB0byByZW5kZXJcbiAgICovXG4gIGFzeW5jIGdldENoYXREYXRhIChodG1sT3B0aW9ucyA9IHt9KSB7XG4gICAgLy8gRm91bmRyeVZUVCB2MTFcbiAgICBodG1sT3B0aW9ucy5hc3luYyA9IHRydWVcbiAgICBjb25zdCBkYXRhID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5zeXN0ZW0pXG4gICAgLy8gRml4IDogZGF0YSBjYW4gaGF2ZSBkZXNjcmlwdGlvbiBkaXJlY3RseSBpbiBmaWVsZCwgbm90IHVuZGVyIHZhbHVlLlxuICAgIGlmICh0eXBlb2YgZGF0YS5kZXNjcmlwdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGRhdGEuZGVzY3JpcHRpb24gPSB7XG4gICAgICAgIHZhbHVlOiBkYXRhLmRlc2NyaXB0aW9uLFxuICAgICAgICBzcGVjaWFsOiAnJ1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGRhdGEuZGVzY3JpcHRpb24udmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkYXRhLmRlc2NyaXB0aW9uLnZhbHVlID0gJydcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkYXRhLmRlc2NyaXB0aW9uLnNwZWNpYWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkYXRhLmRlc2NyaXB0aW9uLnNwZWNpYWwgPSAnJ1xuICAgIH1cbiAgICBjb25zdCBsYWJlbHMgPSBbXVxuXG4gICAgLy8gUmljaCB0ZXh0IGRlc2NyaXB0aW9uXG4gICAgZGF0YS5kZXNjcmlwdGlvbi52YWx1ZSA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIGRhdGEuZGVzY3JpcHRpb24udmFsdWUsXG4gICAgICBodG1sT3B0aW9uc1xuICAgIClcbiAgICBkYXRhLmRlc2NyaXB0aW9uLnNwZWNpYWwgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBkYXRhLmRlc2NyaXB0aW9uLnNwZWNpYWwsXG4gICAgICBodG1sT3B0aW9uc1xuICAgIClcblxuICAgIC8vIEl0ZW0gdHlwZSBzcGVjaWZpYyBwcm9wZXJ0aWVzXG4gICAgY29uc3QgcHJvcHMgPSBbXVxuICAgIGNvbnN0IGZuID0gdGhpc1tgXyR7dGhpcy50eXBlfUNoYXREYXRhYF1cbiAgICBpZiAoZm4pIGZuLmJpbmQodGhpcykoZGF0YSwgbGFiZWxzLCBwcm9wcywgaHRtbE9wdGlvbnMpXG5cbiAgICBpZiAodGhpcy50eXBlID09PSAnc2tpbGwnKSB7XG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhDT0M3LnNraWxsUHJvcGVydGllcykpIHtcbiAgICAgICAgaWYgKHRoaXMuc3lzdGVtLnByb3BlcnRpZXNba2V5XSA9PT0gdHJ1ZSkgcHJvcHMucHVzaCh2YWx1ZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGaWx0ZXIgcHJvcGVydGllcyBhbmQgcmV0dXJuXG4gICAgZGF0YS5wcm9wZXJ0aWVzID0gcHJvcHMuZmlsdGVyKHAgPT4gISFwKVxuICAgIGRhdGEubGFiZWxzID0gbGFiZWxzXG4gICAgcmV0dXJuIGRhdGFcbiAgfVxuXG4gIF93ZWFwb25DaGF0RGF0YSAoZGF0YSwgbGFiZWxzLCBwcm9wcykge1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKENPQzcud2VhcG9uUHJvcGVydGllcykpIHtcbiAgICAgIGlmICh0aGlzLnN5c3RlbS5wcm9wZXJ0aWVzW2tleV0gPT09IHRydWUpIHByb3BzLnB1c2godmFsdWUpXG4gICAgfVxuXG4gICAgbGV0IHNraWxsTGFiZWwgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuU2tpbGwnKVxuICAgIGxldCBza2lsbE5hbWUgPSAnJ1xuICAgIGxldCBmb3VuZCA9IGZhbHNlXG4gICAgaWYgKHRoaXMuc3lzdGVtLnNraWxsLm1haW4uaWQpIHtcbiAgICAgIGNvbnN0IHNraWxsID0gdGhpcy5hY3Rvcj8uaXRlbXMuZ2V0KHRoaXMuc3lzdGVtLnNraWxsLm1haW4uaWQpXG4gICAgICBpZiAoc2tpbGwpIHtcbiAgICAgICAgc2tpbGxOYW1lICs9IENvQzdJdGVtLmdldE5hbWVXaXRob3V0U3BlYyhza2lsbClcbiAgICAgICAgZm91bmQgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudXNlc0FsdGVybmF0aXZlU2tpbGwgJiYgdGhpcy5zeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5pZCkge1xuICAgICAgc2tpbGxMYWJlbCA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ta2lsbHMnKVxuICAgICAgY29uc3Qgc2tpbGwgPSB0aGlzLmFjdG9yPy5pdGVtcy5nZXQodGhpcy5zeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5pZClcbiAgICAgIGlmIChza2lsbCkge1xuICAgICAgICBza2lsbE5hbWUgKz0gYC8ke0NvQzdJdGVtLmdldE5hbWVXaXRob3V0U3BlYyhza2lsbCl9YFxuICAgICAgICBmb3VuZCA9IHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWZvdW5kKSB7XG4gICAgICBza2lsbE5hbWUgPSB0aGlzLnN5c3RlbS5za2lsbC5tYWluLm5hbWVcbiAgICAgIGlmICh0aGlzLnVzZXNBbHRlcm5hdGl2ZVNraWxsICYmIHRoaXMuc3lzdGVtLnNraWxsLmFsdGVybmF0aXYubmFtZSkge1xuICAgICAgICBza2lsbE5hbWUgKz0gYC8ke3RoaXMuc3lzdGVtLnNraWxsLmFsdGVybmF0aXYubmFtZX1gXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNraWxsTmFtZSkge1xuICAgICAgbGFiZWxzLnB1c2goe1xuICAgICAgICBuYW1lOiBza2lsbExhYmVsLFxuICAgICAgICB2YWx1ZTogc2tpbGxOYW1lXG4gICAgICB9KVxuICAgIH1cblxuICAgIGxhYmVscy5wdXNoKHtcbiAgICAgIG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5XZWFwb25Vc2VzUGVyUm91bmQnKSxcbiAgICAgIHZhbHVlOiB0aGlzLnVzZXNQZXJSb3VuZFN0cmluZ1xuICAgIH0pXG5cbiAgICBsYWJlbHMucHVzaCh7XG4gICAgICBuYW1lOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuV2VhcG9uTWFsZnVuY3Rpb24nKSxcbiAgICAgIHZhbHVlOiB0aGlzLnN5c3RlbS5tYWxmdW5jdGlvbiA/IHRoaXMuc3lzdGVtLm1hbGZ1bmN0aW9uIDogJy0nXG4gICAgfSlcblxuICAgIGlmICh0aGlzLnN5c3RlbS5idWxsZXRzKSB7XG4gICAgICBsYWJlbHMucHVzaCh7XG4gICAgICAgIG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5XZWFwb25CdWxsZXRzSW5NYWcnKSxcbiAgICAgICAgdmFsdWU6IHRoaXMuc3lzdGVtLmJ1bGxldHNcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgY2FuQmVQdXNoZWQgKCkge1xuICAgIGlmICh0aGlzLnR5cGUgPT09ICdza2lsbCcgJiYgdGhpcy5zeXN0ZW0ucHJvcGVydGllcy5wdXNoKSByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZ2V0IGltcGFsZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3lzdGVtLnByb3BlcnRpZXMuaW1wbFxuICB9XG5cbiAgZ2V0IGlzRG9kZ2UgKCkge1xuICAgIGlmICh0aGlzLnR5cGUgIT09ICdza2lsbCcpIHJldHVybiBmYWxzZVxuICAgIHJldHVybiAoXG4gICAgICB0aGlzLm5hbWUudG9Mb3dlckNhc2UoKSA9PT1cbiAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Db0NJREZsYWcua2V5cy5pLnNraWxsLmRvZGdlJykudG9Mb3dlckNhc2UoKVxuICAgIClcbiAgfVxufVxuIiwiLyogZ2xvYmFsIGNhbnZhcywgQ2hhdE1lc3NhZ2UsIENPTlNULCBmb3VuZHJ5LCBmcm9tVXVpZCwgZ2FtZSwgUmF5LCBUb2tlbiwgdWkgKi9cblxuaW1wb3J0IHsgQ29DN0NoZWNrIH0gZnJvbSAnLi4vY2hlY2suanMnXG5pbXBvcnQgeyBDb0M3VXRpbGl0aWVzIH0gZnJvbSAnLi4vdXRpbGl0aWVzLmpzJ1xuXG4vKipcbiAqIFJldHVybiA8YT4gZWxlbWVudCBvZiBhIHJvbGwgaW5zdGFuY2UuIGZvdW5kcnkuanMgcmVmOlRleHRFZGl0b3IuX2NyZWF0ZUlubGluZVJvbGxcbiAqIEBwYXJhbSB7Um9sbH0gcm9sbCAgICAgIFRoZSByb2xsIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSW5saW5lUm9sbCAocm9sbCkge1xuICBjb25zdCBkYXRhID0ge1xuICAgIGNsczogWydpbmxpbmUtcm9sbCddLFxuICAgIGRhdGFzZXQ6IHt9XG4gIH1cblxuICB0cnkge1xuICAgIGRhdGEuY2xzLnB1c2goJ2lubGluZS1yZXN1bHQnKVxuICAgIGRhdGEucmVzdWx0ID0gcm9sbC50b3RhbFxuICAgIGRhdGEudGl0bGUgPSByb2xsLmZvcm11bGFcbiAgICBkYXRhLmRhdGFzZXQucm9sbCA9IGVzY2FwZShKU09OLnN0cmluZ2lmeShyb2xsKSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8vIENvbnN0cnVjdCBhbmQgcmV0dXJuIHRoZSBmb3JtZWQgbGluayBlbGVtZW50XG4gIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJylcbiAgYS5jbGFzc0xpc3QuYWRkKC4uLmRhdGEuY2xzKVxuICBhLnRpdGxlID0gZGF0YS50aXRsZVxuICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhkYXRhLmRhdGFzZXQpKSB7XG4gICAgYS5kYXRhc2V0W2tdID0gdlxuICB9XG4gIGEuaW5uZXJIVE1MID0gYDxpIGNsYXNzPVwiZmFzIGZhLWRpY2UtZDIwXCI+PC9pPiAke2RhdGEucmVzdWx0fWBcbiAgcmV0dXJuIGFcbn1cblxuLyoqXG4gKiBGdW5jdGlvbiB1c2VkIGZvciBKU09OLnN0cmluZ2lmeSByZXBsYWNlci5cbiAqIEV4Y2x1ZGUgYW55IGtleSBzdGFydGluZyB3aXRoIF9cbiAqIEBwYXJhbSB7Kn0ga2V5ICAgICBUaGUgb2JqZWN0J3MgcHJvcGVydHkgS2V5XG4gKiBAcGFyYW0geyp9IHZhbHVlICAgVGhlIGFzc29jaWF0ZWQgdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4Y2x1ZGVfIChrZXksIHZhbHVlKSB7XG4gIC8vIGNvbnZlcnQgUmVnRXhwIHRvIHN0cmluZ1xuICBpZiAoa2V5LnN0YXJ0c1dpdGgoJ18nKSkge1xuICAgIHJldHVybiB1bmRlZmluZWQgLy8gcmVtb3ZlIGZyb20gcmVzdWx0XG4gIH1cbiAgcmV0dXJuIHZhbHVlIC8vIHJldHVybiBhcyBpc1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIHVzZWQgZm9yIEpTT04uc3RyaW5naWZ5IHJlcGxhY2VyLlxuICogRXhjbHVkZSBhbnkga2V5IHN0YXJ0aW5nIHdpdGggX19cbiAqIEBwYXJhbSB7Kn0ga2V5ICAgICBUaGUgb2JqZWN0J3MgcHJvcGVydHkgS2V5XG4gKiBAcGFyYW0geyp9IHZhbHVlICAgVGhlIGFzc29jaWF0ZWQgdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4Y2x1ZGVfXyAoa2V5LCB2YWx1ZSkge1xuICAvLyBjb252ZXJ0IFJlZ0V4cCB0byBzdHJpbmdcbiAgaWYgKGtleS5zdGFydHNXaXRoKCdfXycpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZCAvLyByZW1vdmUgZnJvbSByZXN1bHRcbiAgfVxuICByZXR1cm4gdmFsdWUgLy8gcmV0dXJuIGFzIGlzXG59XG5cbi8qKlxuICogUmV0dXJuIHRydWUgaXMgQ1RSTCBrZXkgaXMgcHJlc3NlZFxuICogVXNlZCBmb3IgTUFDIGNvbXBhdC5cbiAqIEBwYXJhbSB7Uy5FdmVudH0gZXZlbnRcbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0N0cmxLZXkgKGV2ZW50KSB7XG4gIGlmIChldmVudCA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gKFxuICAgIGV2ZW50Lm1ldGFLZXkgfHxcbiAgICBldmVudC5jdHJsS2V5IHx8XG4gICAgZXZlbnQua2V5Q29kZSA9PT0gOTEgfHxcbiAgICBldmVudC5rZXlDb2RlID09PSAyMjRcbiAgKVxufVxuXG5leHBvcnQgY2xhc3MgY2hhdEhlbHBlciB7XG4gIHN0YXRpYyBoeXBoZW5Ub0NhbWVsQ2FzZSAoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8tKFthLXpdKS9nLCBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICByZXR1cm4gc3RyaW5nWzFdLnRvVXBwZXJDYXNlKClcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGNyZWF0ZU1lc3NhZ2UgKHRpdGxlLCBtZXNzYWdlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBtZXNzYWdlRGF0YSA9IHt9XG4gICAgbWVzc2FnZURhdGEuZmxhdm9yID0gdGl0bGVcbiAgICBtZXNzYWdlRGF0YS5zcGVha2VyID0gb3B0aW9ucy5zcGVha2VyIHx8IENoYXRNZXNzYWdlLmdldFNwZWFrZXIoKVxuICAgIGlmIChvcHRpb25zLndoaXNwZXIpIHtcbiAgICAgIG1lc3NhZ2VEYXRhLnR5cGUgPSBDT05TVC5DSEFUX01FU1NBR0VfVFlQRVMuV0hJU1BFUlxuICAgICAgbWVzc2FnZURhdGEud2hpc3BlciA9IG9wdGlvbnMud2hpc3BlclxuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucm9sbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIG1lc3NhZ2VEYXRhLnJvbGwgPSBvcHRpb25zLnJvbGxcbiAgICAgIG1lc3NhZ2VEYXRhLnR5cGUgPSBDT05TVC5DSEFUX01FU1NBR0VfVFlQRVMuUk9MTFxuICAgICAgbWVzc2FnZURhdGEucm9sbE1vZGUgPSBDT05TVC5ESUNFX1JPTExfTU9ERVMuU0VMRlxuICAgIH1cbiAgICBtZXNzYWdlRGF0YS51c2VyID0gZ2FtZS51c2VyLmlkXG4gICAgbWVzc2FnZURhdGEuY29udGVudCA9IG1lc3NhZ2VcblxuICAgIENoYXRNZXNzYWdlLmNyZWF0ZShtZXNzYWdlRGF0YSkudGhlbihtc2cgPT4ge1xuICAgICAgcmV0dXJuIG1zZ1xuICAgIH0pXG4gIH1cblxuICBzdGF0aWMgY2FtZWxDYXNlVG9IeXBoZW4gKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvKFtBLVpdKS9nLCBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICByZXR1cm4gJy0nICsgc3RyaW5nLnRvTG93ZXJDYXNlKClcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIGdldEFjdG9yRnJvbUtleSAoa2V5KSB7XG4gICAgaWYgKCFrZXkpIHJldHVybiBudWxsXG4gICAgLy8gQ2FzZSAwIC0gYSBkb2N1bWVudCBVdWlkXG4gICAgaWYgKENvQzdVdGlsaXRpZXMuaXNEb2N1bWVudFV1aWQoa2V5KSkge1xuICAgICAgaWYgKENvQzdVdGlsaXRpZXMuaXNEb2N1bWVudFV1aWRQYWNrKGtleSkpIHJldHVybiBmcm9tVXVpZChrZXkpIC8vIFRPRE8gQ2hlY2sgd2UgY2FuIGRvIHRoYXRcbiAgICAgIHJldHVybiBDb0M3VXRpbGl0aWVzLlNmcm9tVXVpZChrZXkpXG4gICAgfVxuXG4gICAgLy8gQ2FzZSAxIC0gYSBzeW50aGV0aWMgYWN0b3IgZnJvbSBhIFRva2VuXG4gICAgaWYgKGtleS5pbmNsdWRlcygnLicpKSB7XG4gICAgICAvLyBSRUZBQ1RPUklORyAoMilcbiAgICAgIGNvbnN0IFtzY2VuZUlkLCB0b2tlbklkXSA9IGtleS5zcGxpdCgnLicpXG4gICAgICBpZiAoc2NlbmVJZCA9PT0gJ1RPS0VOJykge1xuICAgICAgICByZXR1cm4gZ2FtZS5hY3RvcnMudG9rZW5zW3Rva2VuSWRdIC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgfVxuICAgICAgY29uc3QgdG9rZW4gPSBjaGF0SGVscGVyLmdldFRva2VuRnJvbUtleShrZXkpXG4gICAgICByZXR1cm4gdG9rZW4/LmFjdG9yXG4gICAgfVxuXG4gICAgLy8gQ2FzZSAyIC0gdXNlIEFjdG9yIElEIGRpcmVjdG9yeVxuICAgIHJldHVybiBnYW1lLmFjdG9ycy5nZXQoa2V5KSB8fCBudWxsXG4gIH1cblxuICBzdGF0aWMgZ2V0U3BlYWtlckZyb21LZXkgKGFjdG9yS2V5KSB7XG4gICAgY29uc3Qgc3BlYWtlciA9IHt9XG4gICAgY29uc3QgYWN0b3IgPSBjaGF0SGVscGVyLmdldEFjdG9yRnJvbUtleShhY3RvcktleSkgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgaWYgKGFjdG9yS2V5LmluY2x1ZGVzKCcuJykpIHtcbiAgICAgIGNvbnN0IFtzY2VuZUlkLCB0b2tlbklkXSA9IGFjdG9yS2V5LnNwbGl0KCcuJykgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgICBzcGVha2VyLnRva2VuID0gdG9rZW5JZFxuICAgICAgc3BlYWtlci5zY2VuZSA9IHNjZW5lSWRcbiAgICAgIGlmIChhY3Rvci50b2tlbj8ubmFtZSkgc3BlYWtlci5hbGlhcyA9IGFjdG9yLnRva2VuLm5hbWVcbiAgICAgIHNwZWFrZXIuYWN0b3IgPSBhY3Rvci5pZFxuICAgIH0gZWxzZSB7XG4gICAgICBzcGVha2VyLmFjdG9yID0gYWN0b3JLZXlcbiAgICAgIHNwZWFrZXIuYWxpYXMgPSBhY3Rvci5uYW1lXG4gICAgfVxuICAgIHJldHVybiBzcGVha2VyXG4gIH1cblxuICBzdGF0aWMgYXR0YWNoT2JqZWN0VG9FbGVtZW50IChvYmplY3QsIGVsZW1lbnQsIG9iamVjdE5hbWUgPSAnJykge1xuICAgIGZvciAoY29uc3QgcHJvcCBvZiBPYmplY3Qua2V5cyhvYmplY3QpKSB7XG4gICAgICBpZiAoIXByb3Auc3RhcnRzV2l0aCgnXycpKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqZWN0W3Byb3BdID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGNoYXRIZWxwZXIuYXR0YWNoT2JqZWN0VG9FbGVtZW50KFxuICAgICAgICAgICAgb2JqZWN0W3Byb3BdLFxuICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgIGAke29iamVjdE5hbWV9OiR7cHJvcH06YFxuICAgICAgICAgIClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbGVtZW50LmRhdGFzZXRbYCR7b2JqZWN0TmFtZX0ke3Byb3B9YF0gPSBvYmplY3RbcHJvcF1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRPYmplY3RGcm9tRWxlbWVudCAob2JqZWN0LCBlbGVtZW50KSB7XG4gICAgZnVuY3Rpb24gZGVzZXJpYWxpemUgKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCc6JykpIHtcbiAgICAgICAgY29uc3QgcyA9IGtleS5zbGljZSgxKVxuICAgICAgICBjb25zdCBvYmpQcm9wID0gcy5zbGljZShzLmluZGV4T2YoJzonKSArIDEpXG4gICAgICAgIGNvbnN0IG9iak5hbWUgPSBzLnN1YnN0cmluZygwLCBzLmluZGV4T2YoJzonKSlcbiAgICAgICAgaWYgKHR5cGVvZiBvYmpbb2JqTmFtZV0gPT09ICd1bmRlZmluZWQnKSBvYmpbb2JqTmFtZV0gPSB7fVxuICAgICAgICBkZXNlcmlhbGl6ZShvYmpbb2JqTmFtZV0sIG9ialByb3AsIHZhbHVlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSAndHJ1ZScpIG9ialtrZXldID0gdHJ1ZVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSA9PT0gJ2ZhbHNlJykgb2JqW2tleV0gPSBmYWxzZVxuICAgICAgICBlbHNlIGlmIChOdW1iZXIodmFsdWUpLnRvU3RyaW5nKCkgPT09IHZhbHVlKSBvYmpba2V5XSA9IE51bWJlcih2YWx1ZSlcbiAgICAgICAgZWxzZSBvYmpba2V5XSA9IHZhbHVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFlbGVtZW50IHx8ICFvYmplY3QpIHJldHVyblxuICAgIGZvciAoY29uc3QgcHJvcCBvZiBPYmplY3Qua2V5cyhlbGVtZW50LmRhdGFzZXQpKSB7XG4gICAgICBpZiAocHJvcCA9PT0gJ3RlbXBsYXRlJykgcmV0dXJuXG4gICAgICBkZXNlcmlhbGl6ZShvYmplY3QsIHByb3AsIGVsZW1lbnQuZGF0YXNldFtwcm9wXSlcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0VG9rZW5Gcm9tS2V5IChrZXkpIHtcbiAgICBpZiAoIWtleSkgcmV0dXJuIG51bGxcbiAgICBpZiAoa2V5LmluY2x1ZGVzKCcuJykpIHtcbiAgICAgIGNvbnN0IFtzY2VuZUlkLCB0b2tlbklkXSA9IGtleS5zcGxpdCgnLicpXG4gICAgICBpZiAoc2NlbmVJZCA9PT0gJ1RPS0VOJykge1xuICAgICAgICBjb25zdCB0b2tlbkRvYyA9IGdhbWUuYWN0b3JzLnRva2Vuc1t0b2tlbklkXT8udG9rZW5cbiAgICAgICAgcmV0dXJuIHRva2VuRG9jLm9iamVjdCAvLyBSRUZBQ1RPUklORyAoMilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNjZW5lID0gZ2FtZS5zY2VuZXMuZ2V0KHNjZW5lSWQpXG4gICAgICAgIGlmICghc2NlbmUpIHJldHVybiBudWxsXG4gICAgICAgIGNvbnN0IHRva2VuRGF0YSA9IHNjZW5lLmdldEVtYmVkZGVkRG9jdW1lbnQoJ1Rva2VuJywgdG9rZW5JZClcbiAgICAgICAgaWYgKCF0b2tlbkRhdGEpIHJldHVybiBudWxsXG4gICAgICAgIGNvbnN0IHRva2VuID0gbmV3IFRva2VuKHRva2VuRGF0YSlcbiAgICAgICAgaWYgKCF0b2tlbi5zY2VuZSkgdG9rZW4uc2NlbmUgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShzY2VuZS5kb2N1bWVudClcbiAgICAgICAgcmV0dXJuIHRva2VuXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGFjdG9yID0gZ2FtZS5hY3RvcnMuZ2V0KGtleSlcbiAgICAgIHJldHVybiBjaGF0SGVscGVyLmdldEFjdG9yVG9rZW4oYWN0b3IpXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldEFjdG9yVG9rZW4gKGFjdG9yKSB7XG4gICAgaWYgKCFhY3RvcikgcmV0dXJuIG51bGxcbiAgICByZXR1cm4gYWN0b3IudG9rZW4gfHwgYWN0b3IucHJvdG90eXBlVG9rZW5cbiAgICAvKioqKioqKioqKioqKioqKioqKi9cbiAgICAvLyAvLyBDYXNlIDAgLSBBY3RvciBpcyBhIHRva2VuIChzeW50aGV0aWMgYWN0b3IpLCByZXR1cm4gdGhhdCB0b2tlbi5cbiAgICAvLyBpZihhY3Rvci5pc1Rva2VuKSByZXR1cm4gYWN0b3IudG9rZW47XG4gICAgLy8gZWxzZXtcbiAgICAvLyAgLy8gQ2FzZSAxIC0gQWN0b3IgaXMgbm90IGEgdG9rZW4sIGZpbmQgaWYgYSB0b2tlbiBleGlzdCBmb3IgdGhhdCBhY3Rvci5cbiAgICAvLyAgY29uc3QgYWN0b3JUb2tlbnMgPSBhY3Rvci5nZXRBY3RpdmVUb2tlbnMoKTtcbiAgICAvLyAgaWYoIGFjdG9yVG9rZW5zLmxlbmd0aCl7XG4gICAgLy8gICAgLy8gQ2FzZSAxLjEgLSBJZiBoZSBoYXMgb25seSBvbmUgVG9rZW4gcmV0dXJuIGl0LlxuICAgIC8vICAgIGlmKCAxID09PSBhY3RvclRva2Vucy5sZW5ndGgpIHJldHVybiBhY3RvclRva2Vuc1swXTtcblxuICAgIC8vICAgIC8vIENhc2UgMS4yIC0gQWN0b3IgaGFzIG11bHRpcGxlIHRva2VucywgZmluZCBpZiBvbmUgb2YgdGhlbSBpcyB0aGUgY29udHJvbGxlZCB0b2tlbi5cbiAgICAvLyAgICBjb25zdCBjb250cm9sbGVkVG9rZW5zID0gYWN0b3JUb2tlbnMuZmlsdGVyKCB0ID0+IHQuX2NvbnRyb2xsZWQpO1xuICAgIC8vICAgIGlmKCBjb250cm9sbGVkVG9rZW5zLmxlbmd0aCl7XG4gICAgLy8gICAgICAvLyBSZXR1cm4gdGhlIDFzdCBjb250cm9sbGVkIHRva2VuLCByaXNlIGEgd2FybmluZyBpZiBoZSBoYXMgbXVsdGlwbGUgY29udHJvbGxlZCB0b2tlbnMuXG4gICAgLy8gICAgICBpZiggdmVyYm9zZSAmJiBjb250cm9sbGVkVG9rZW5zLmxlbmd0aCA+IDEpIHVpLm5vdGlmaWNhdGlvbnMud2FybiggYEFjdG9yICR7YWN0b3IubmFtZX0gaGFzICR7Y29udHJvbGxlZFRva2Vucy5sZW5ndGh9IGNvbnRyb2xsZWQgdG9rZW5zLiBVc2luZyB0aGUgZmlyc3QgZm91bmRgKTtcbiAgICAvLyAgICAgIHJldHVybiBjb250cm9sbGVkVG9rZW5zWzBdO1xuICAgIC8vICAgIH1cblxuICAgIC8vICAgIC8vIENhc2UgMS4zIGFjdG9yIGRvZXNuJ3QgaGF2ZSBhbnkgYWN0aXZlIHRva2VuLiBSZXR1cm4gdGhlIGZpcnN0IHZhbGlkIHRva2VuIGZvciB0aGF0IGFjdG9yIGFuZCByYWlzZSBhIHdhcm5pbmcuXG4gICAgLy8gICAgaWYoIHZlcmJvc2UpIHVpLm5vdGlmaWNhdGlvbnMud2FybiggYEFjdG9yICR7YWN0b3IubmFtZX0gZG9lc24ndCBoYXZlIGFueSBjb250cm9sbGVkIHRva2VuLiBVc2luZyBmaXJzdCB0b2tlbiBmb3VuZC5gKTtcbiAgICAvLyAgICByZXR1cm4gYWN0b3JUb2tlbnNbMF07XG4gICAgLy8gIH1cblxuICAgIC8vICBpZiggdmVyYm9zZSkgdWkubm90aWZpY2F0aW9ucy5lcnJvciggYENvdWxkIG5vdCBmaW4gYW55IHRva2VuIGZvciAke2FjdG9yLm5hbWV9LmApO1xuICAgIC8vICByZXR1cm4gbnVsbDtcbiAgICAvLyB9XG4gIH1cblxuICBzdGF0aWMgZ2V0QWN0b3JJbWdGcm9tS2V5IChhY3RvcktleSkge1xuICAgIGlmICghYWN0b3JLZXkpIHJldHVybiBudWxsXG4gICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3VzZVRva2VuJykpIHtcbiAgICAgIC8vIFRyeSB0byBmaW5kIGEgdG9rZW4uXG4gICAgICBjb25zdCB0b2tlbiA9IGNoYXRIZWxwZXIuZ2V0VG9rZW5Gcm9tS2V5KGFjdG9yS2V5KVxuICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgIGlmICgodG9rZW4uZG9jdW1lbnQgfHwgdG9rZW4pLnRleHR1cmUuc3JjKSB7XG4gICAgICAgICAgaWYgKCh0b2tlbi5kb2N1bWVudCB8fCB0b2tlbikudGV4dHVyZS5zcmMuaW5kZXhPZignKicpID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuICh0b2tlbi5kb2N1bWVudCB8fCB0b2tlbikudGV4dHVyZS5zcmNcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYWN0b3IgPSBjaGF0SGVscGVyLmdldEFjdG9yRnJvbUtleShhY3RvcktleSkgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3VzZVRva2VuJykpIHtcbiAgICAgIC8vIGlmIG5vIHRva2VuIGZvdW5kIGZvciB0aGF0IGFjdG9yIHJldHVybiB0aGUgcHJvdG90eXBlIHRva2VuIGltYWdlLlxuICAgICAgaWYgKGFjdG9yLnByb3RvdHlwZVRva2VuKSB7XG4gICAgICAgIGlmIChhY3Rvci5wcm90b3R5cGVUb2tlbi50ZXh0dXJlLnNyYykge1xuICAgICAgICAgIGlmIChhY3Rvci5wcm90b3R5cGVUb2tlbi50ZXh0dXJlLnNyYz8uaW5kZXhPZignKicpID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIGFjdG9yLnByb3RvdHlwZVRva2VuLnRleHR1cmUuc3JjXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhY3Rvci5pbWdcbiAgfVxuXG4gIHN0YXRpYyBnZXREaXN0YW5jZSAoc3RhcnRUb2tlbiwgZW5kVG9rZW4pIHtcbiAgICAvLyBzdGFydFRva2VuLnVwZGF0ZVNvdXJjZSgpO1xuICAgIC8vIGNhbnZhcy5zaWdodC5pbml0aWFsaXplVG9rZW5zKCk7XG4gICAgaWYgKFxuICAgICAgdHlwZW9mIGVuZFRva2VuLmNlbnRlciA9PT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIHR5cGVvZiBlbmRUb2tlbi5pZCAhPT0gJ3VuZGVmaW5lZCdcbiAgICApIHtcbiAgICAgIGlmIChzdGFydFRva2VuLnNjZW5lPy5pZCB8fCBmYWxzZSkge1xuICAgICAgICBjb25zdCBzY2VuZSA9IGdhbWUuc2NlbmVzLmdldChzdGFydFRva2VuLnNjZW5lLmlkKVxuICAgICAgICBpZiAodHlwZW9mIHNjZW5lPy50b2tlbnMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgY29uc3QgdG9rZW5zID0gc2NlbmU/LnRva2Vuc1xuICAgICAgICAgICAgLmZpbHRlcih0b2tlbiA9PiB0b2tlbi5hY3Rvci5pZCA9PT0gZW5kVG9rZW4uZGF0YS5kb2N1bWVudC5pZClcbiAgICAgICAgICAgIC5tYXAodG9rZW4gPT4gdG9rZW4ub2JqZWN0KVxuICAgICAgICAgIGlmICh0b2tlbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBlbmRUb2tlbiA9IHRva2Vuc1swXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBsZXQgZGlzdGFuY2UgPSB7XG4gICAgICBncmlkVW5pdDogMCxcbiAgICAgIHZhbHVlOiAwLFxuICAgICAgdW5pdDogY2FudmFzLnNjZW5lLmdyaWQudW5pdHNcbiAgICB9XG4gICAgaWYgKFxuICAgICAgdHlwZW9mIHN0YXJ0VG9rZW4gIT09ICd1bmRlZmluZWQnICYmXG4gICAgICB0eXBlb2Ygc3RhcnRUb2tlbi5jZW50ZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICB0eXBlb2YgZW5kVG9rZW4gIT09ICd1bmRlZmluZWQnICYmXG4gICAgICB0eXBlb2YgZW5kVG9rZW4uY2VudGVyICE9PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgY29uc3QgcmF5ID0gbmV3IFJheShzdGFydFRva2VuLmNlbnRlciwgZW5kVG9rZW4uY2VudGVyKVxuICAgICAgY29uc3Qgc2VnbWVudCA9IFt7IHJheSB9XVxuICAgICAgZGlzdGFuY2UgPSB7XG4gICAgICAgIGdyaWRVbml0OiByYXkuZGlzdGFuY2UgLyBjYW52YXMuc2NlbmUuZ3JpZC5zaXplLFxuICAgICAgICAvLyB2YWx1ZTogKHJheS5kaXN0YW5jZS9jYW52YXMuc2NlbmUuZGF0YS5ncmlkKSpjYW52YXMuc2NlbmUuZGF0YS5ncmlkRGlzdGFuY2UsXG4gICAgICAgIHZhbHVlOiBjYW52YXMuZ3JpZC5tZWFzdXJlRGlzdGFuY2VzKHNlZ21lbnQsIHtcbiAgICAgICAgICBncmlkU3BhY2VzOiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdncmlkU3BhY2VzJylcbiAgICAgICAgfSlbMF0sXG4gICAgICAgIHVuaXQ6IGNhbnZhcy5zY2VuZS5ncmlkLnVuaXRzXG4gICAgICB9XG4gICAgICBpZiAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnZGlzdGFuY2VFbGV2YXRpb24nKSkge1xuICAgICAgICBjb25zdCBlbGV2YXRpb24gPSBNYXRoLmFicyhcbiAgICAgICAgICAoc3RhcnRUb2tlbi5kb2N1bWVudC5lbGV2YXRpb24gfHwgMCkgLSAoZW5kVG9rZW4uZG9jdW1lbnQuZWxldmF0aW9uIHx8IDApXG4gICAgICAgIClcbiAgICAgICAgZGlzdGFuY2UudmFsdWUgPSBNYXRoLnNxcnQoXG4gICAgICAgICAgZGlzdGFuY2UudmFsdWUgKiBkaXN0YW5jZS52YWx1ZSArIGVsZXZhdGlvbiAqIGVsZXZhdGlvblxuICAgICAgICApXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnZGlzdGFuY2VUaGVhdHJlT2ZUaGVNaW5kJykpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihcbiAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk1lc3NhZ2VEaXN0YW5jZUNhbGN1bGF0aW9uRmFpbHVyZScpXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBkaXN0YW5jZVxuICB9XG5cbiAgc3RhdGljIHRvWWFyZHMgKGRpc3RhbmNlKSB7XG4gICAgc3dpdGNoIChkaXN0YW5jZS51bml0KSB7XG4gICAgICBjYXNlICdmdCc6XG4gICAgICAgIHJldHVybiBkaXN0YW5jZS52YWx1ZSAvIDNcblxuICAgICAgY2FzZSAneWQnOlxuICAgICAgICByZXR1cm4gZGlzdGFuY2UudmFsdWVcblxuICAgICAgY2FzZSAnbSc6XG4gICAgICAgIHJldHVybiBkaXN0YW5jZS52YWx1ZVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZGlzdGFuY2UudmFsdWVcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvQzdSb2xsIHtcbiAgc3RhdGljIGdldEZyb21DYXJkIChjYXJkKSB7XG4gICAgY29uc3Qgcm9sbERpdiA9IGNhcmQucXVlcnlTZWxlY3RvcignZGl2LmRpY2Utcm9sbCcpXG4gICAgaWYgKCFyb2xsRGl2KSByZXR1cm4gbnVsbFxuXG4gICAgY29uc3Qgcm9sbCA9IG5ldyBDb0M3Um9sbCgpXG4gICAgY2hhdEhlbHBlci5nZXRPYmplY3RGcm9tRWxlbWVudChyb2xsLCByb2xsRGl2KVxuXG4gICAgcmV0dXJuIHJvbGxcbiAgfVxuXG4gIGdldCByZXN1bHRUeXBlICgpIHtcbiAgICB0aGlzLnN1Y2Nlc3NMZXZlbCA9IHBhcnNlSW50KHRoaXMuc3VjY2Vzc0xldmVsKVxuICAgIHN3aXRjaCAodGhpcy5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgIGNhc2UgQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5yZWd1bGFyOlxuICAgICAgICByZXR1cm4gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5SZWd1bGFyU3VjY2VzcycpXG4gICAgICBjYXNlIENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuaGFyZDpcbiAgICAgICAgcmV0dXJuIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuSGFyZFN1Y2Nlc3MnKVxuICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmV4dHJlbWU6XG4gICAgICAgIHJldHVybiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkV4dHJlbWVTdWNjZXNzJylcbiAgICAgIGNhc2UgQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5jcml0aWNhbDpcbiAgICAgICAgcmV0dXJuIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuQ3JpdGljYWxTdWNjZXNzJylcbiAgICAgIGNhc2UgQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5mdW1ibGU6XG4gICAgICAgIHJldHVybiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkZ1bWJsZScpXG4gICAgICBjYXNlIENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZmFpbHVyZTpcbiAgICAgICAgcmV0dXJuIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRmFpbHVyZScpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG5cbiAgZ2V0IGFjdG9yICgpIHtcbiAgICBpZiAodGhpcy5hY3RvcktleSkgcmV0dXJuIGNoYXRIZWxwZXIuZ2V0QWN0b3JGcm9tS2V5KHRoaXMuYWN0b3JLZXkpIC8vIFJFRkFDVE9SSU5HICgyKVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBnZXQgaXRlbSAoKSB7XG4gICAgaWYgKHRoaXMuaXRlbUlkICYmIHRoaXMuYWN0b3IpIHJldHVybiB0aGlzLmFjdG9yLml0ZW1zLmdldCh0aGlzLml0ZW1JZClcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgZ2V0IHNraWxsICgpIHtcbiAgICBpZiAodGhpcy5za2lsbElkICYmIHRoaXMuYWN0b3IpIHJldHVybiB0aGlzLmFjdG9yLml0ZW1zLmdldCh0aGlzLnNraWxsSWQpXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHNob3dEaWNlUm9sbCAoKSB7XG4gICAgaWYgKGdhbWUubW9kdWxlcy5nZXQoJ2RpY2Utc28tbmljZScpPy5hY3RpdmUpIHtcbiAgICAgIGNvbnN0IGRpY2VSZXN1bHRzID0gW11cbiAgICAgIGZvciAoY29uc3QgZGllUmVzdWx0IG9mIHRoaXMuZGljZXMudGVucykge1xuICAgICAgICBkaWNlUmVzdWx0cy5wdXNoKGRpZVJlc3VsdC52YWx1ZSA9PT0gMTAwID8gMCA6IGRpZVJlc3VsdC52YWx1ZSAvIDEwKVxuICAgICAgfVxuICAgICAgZGljZVJlc3VsdHMucHVzaCh0aGlzLmRpY2VzLnVuaXQudmFsdWUpXG5cbiAgICAgIGNvbnN0IGRpY2VEYXRhID0ge1xuICAgICAgICBmb3JtdWxhOiBgJHt0aGlzLmRpY2VzLnRlbnMubGVuZ3RofWQxMDArMWQxMGAsXG4gICAgICAgIHJlc3VsdHM6IGRpY2VSZXN1bHRzLFxuICAgICAgICB3aGlzcGVyOiBudWxsLFxuICAgICAgICBibGluZDogZmFsc2VcbiAgICAgIH1cbiAgICAgIGdhbWUuZGljZTNkLnNob3coZGljZURhdGEpXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldEZyb21FbGVtZW50IChlbGVtZW50LCBvYmplY3QgPSBudWxsKSB7XG4gICAgaWYgKCFlbGVtZW50KSByZXR1cm5cbiAgICBjb25zdCByb2xsID0gb2JqZWN0IHx8IG5ldyBDb0M3Um9sbCgpXG4gICAgY2hhdEhlbHBlci5nZXRPYmplY3RGcm9tRWxlbWVudChyb2xsLCBlbGVtZW50KVxuICAgIHJvbGwuZGljZXMgPSB7XG4gICAgICB0ZW5zOiBbXSxcbiAgICAgIHVuaXQ6IHt9XG4gICAgfVxuICAgIGNoYXRIZWxwZXIuZ2V0T2JqZWN0RnJvbUVsZW1lbnQoXG4gICAgICByb2xsLmRpY2VzLFxuICAgICAgZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZGljZS1yZXN1bHQnKVxuICAgIClcbiAgICByb2xsLmRpY2VzLmhhc0JvbnVzID0gcm9sbC5kaWNlTW9kaWZpZXIgIT09IDBcbiAgICByb2xsLmRpY2VzLmJvbnVzID0gTWF0aC5hYnMocm9sbC5kaWNlTW9kaWZpZXIpXG4gICAgcm9sbC5kaWNlcy5ib251c1R5cGUgPVxuICAgICAgcm9sbC5kaWNlTW9kaWZpZXIgPCAwXG4gICAgICAgID8gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5EaWNlTW9kaWZpZXJQZW5hbHR5JylcbiAgICAgICAgOiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkRpY2VNb2RpZmllckJvbnVzJylcbiAgICBjb25zdCB0ZW5EaWNlID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcudGVuLWRpY2UnKVxuICAgIGlmICh0ZW5EaWNlKSB7XG4gICAgICBmb3IgKGNvbnN0IGQgb2YgdGVuRGljZS5xdWVyeVNlbGVjdG9yQWxsKCdsaScpKSB7XG4gICAgICAgIGNvbnN0IGRpZSA9IHtcbiAgICAgICAgICBzZWxlY3RlZDogZmFsc2UsXG4gICAgICAgICAgaXNNYXg6IGZhbHNlLFxuICAgICAgICAgIGlzTWluOiBmYWxzZSxcbiAgICAgICAgICB2YWx1ZTogLTFcbiAgICAgICAgfVxuICAgICAgICBjaGF0SGVscGVyLmdldE9iamVjdEZyb21FbGVtZW50KGRpZSwgZClcbiAgICAgICAgcm9sbC5kaWNlcy50ZW5zLnB1c2goZGllKVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB1bml0RGllID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcudW5pdC1kaWUnKVxuICAgICAgPyBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy51bml0LWRpZScpLnF1ZXJ5U2VsZWN0b3IoJ2xpJylcbiAgICAgIDogbnVsbFxuICAgIHJvbGwuZGljZXMudW5pdC52YWx1ZSA9IHVuaXREaWUgPyBwYXJzZUludCh1bml0RGllLmRhdGFzZXQudmFsdWUpIDogbnVsbFxuXG4gICAgcm9sbC5pbmNyZWFzZVN1Y2Nlc3MgPSBbXVxuICAgIGNvbnN0IGluY3JlYXNlU3VjY2VzcyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLmluY3JlYXNlLXN1Y2Nlc3MnKVxuICAgIGlmIChpbmNyZWFzZVN1Y2Nlc3MgJiYgaW5jcmVhc2VTdWNjZXNzLnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbicpKSB7XG4gICAgICBmb3IgKGNvbnN0IGlzbCBvZiBpbmNyZWFzZVN1Y2Nlc3MucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uJykpIHtcbiAgICAgICAgY29uc3QgbmV3U3VjY2VzTGV2ZWwgPSB7fVxuICAgICAgICBjaGF0SGVscGVyLmdldE9iamVjdEZyb21FbGVtZW50KG5ld1N1Y2Nlc0xldmVsLCBpc2wpXG4gICAgICAgIHJvbGwuaW5jcmVhc2VTdWNjZXNzLnB1c2gobmV3U3VjY2VzTGV2ZWwpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJvbGwubHVja05lZWRlZCkge1xuICAgICAgcm9sbC5sdWNrTmVlZGVkVHh0ID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5TcGVuZEx1Y2snLCB7XG4gICAgICAgIGx1Y2tOZWVkZWRWYWx1ZTogcm9sbC5sdWNrTmVlZGVkXG4gICAgICB9KVxuICAgIH1cbiAgICBpZiAoIW9iamVjdCkgcmV0dXJuIHJvbGxcbiAgfVxuXG4gIHN0YXRpYyBnZXRGcm9tQ2hlY2sgKGNoZWNrKSB7XG4gICAgY29uc3Qgcm9sbCA9IG5ldyBDb0M3Um9sbCgpXG5cbiAgICByb2xsLnJvbGxUeXBlID0gY2hlY2sucm9sbFR5cGVcbiAgICByb2xsLnNpZGUgPSBjaGVjay5zaWRlXG4gICAgcm9sbC5hY3Rpb24gPSBjaGVjay5hY3Rpb25cbiAgICByb2xsLnJlZk1lc3NhZ2VJZCA9IGNoZWNrLnJlZk1lc3NhZ2VJZFxuICAgIHJvbGwucmVmZXJlbmNlTWVzc2FnZUlkID0gY2hlY2sucmVmZXJlbmNlTWVzc2FnZUlkXG5cbiAgICByb2xsLnN1Y2Nlc3NMZXZlbCA9IGNoZWNrLnN1Y2Nlc3NMZXZlbFxuICAgIHJvbGwuZGlmZmljdWx0eSA9IGNoZWNrLmRpZmZpY3VsdHlcbiAgICByb2xsLnNraWxsSWQgPSBjaGVjay5za2lsbCA/IGNoZWNrLnNraWxsLmlkIDogbnVsbFxuICAgIHJvbGwuaXRlbUlkID0gY2hlY2suaXRlbSA/IGNoZWNrLml0ZW0uaWQgOiBudWxsXG4gICAgcm9sbC5kaWNlTW9kID0gY2hlY2suZGljZU1vZGlmaWVyXG4gICAgcm9sbC52YWx1ZSA9IHBhcnNlSW50KGNoZWNrLnJhd1ZhbHVlKVxuICAgIHJvbGwuZnVtYmxlID0gY2hlY2suaXNGdW1ibGVcbiAgICByb2xsLmNyaXRpY2FsID0gY2hlY2suaXNDcml0aWNhbFxuICAgIHJvbGwuY2hhcmFjdGVyaXN0aWMgPSBjaGVjay5jaGFyYWN0ZXJpc3RpYyA/IGNoZWNrLmNoYXJhY3RlcmlzdGljIDogbnVsbFxuICAgIHJvbGwucmVzdWx0ID0gY2hlY2suZGljZS50b3RhbFxuXG4gICAgcm9sbC5hY3RvcktleSA9IGNoZWNrLmFjdG9yLnRva2VuS2V5IC8vIFJFRkFDVE9SSU5HICgyKVxuXG4gICAgaWYgKGNoZWNrLmFjdG9yLmlzVG9rZW4pIHtcbiAgICAgIHJvbGwudG9rZW5JZCA9IGNoZWNrLmFjdG9yLnRva2VuS2V5IC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgcm9sbC5hY3RvcklkID0gbnVsbFxuICAgIH0gZWxzZSB7XG4gICAgICByb2xsLnRva2VuS2V5ID0gbnVsbFxuICAgICAgcm9sbC5hY3RvcklkID0gY2hlY2suYWN0b3IudG9rZW5LZXkgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgfVxuXG4gICAgcmV0dXJuIHJvbGxcbiAgfVxuXG4gIHN0YXRpYyBhdHRhY2hDaGVja1RvRWxlbWVudCAoaHRtbEVsZW1lbnQsIGNoZWNrKSB7XG4gICAgY29uc3Qgcm9sbCA9IENvQzdSb2xsLmdldEZyb21DaGVjayhjaGVjaylcbiAgICByb2xsLmF0dGFjaFRvRWxlbWVudChodG1sRWxlbWVudClcblxuICAgIHJldHVybiByb2xsXG4gIH1cblxuICBhdHRhY2hUb0VsZW1lbnQgKGh0bWxFbGVtZW50KSB7XG4gICAgY2hhdEhlbHBlci5hdHRhY2hPYmplY3RUb0VsZW1lbnQodGhpcywgaHRtbEVsZW1lbnQpXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvQzdEYW1hZ2Uge1xuICBzdGF0aWMgZ2V0TWFpbkRpZSAoZGFtYWdlU3RyaW5nKSB7XG4gICAgaWYgKGRhbWFnZVN0cmluZy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdkMjAnKSkgcmV0dXJuICdkMjAnXG4gICAgaWYgKGRhbWFnZVN0cmluZy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdkMTInKSkgcmV0dXJuICdkMTInXG4gICAgaWYgKGRhbWFnZVN0cmluZy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdkMTAnKSkgcmV0dXJuICdkMTAnXG4gICAgaWYgKGRhbWFnZVN0cmluZy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdkOCcpKSByZXR1cm4gJ2Q4J1xuICAgIGlmIChkYW1hZ2VTdHJpbmcudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnZDQnKSkgcmV0dXJuICdkNCdcbiAgICByZXR1cm4gJ2Q2J1xuICB9XG5cbiAgc3RhdGljIGdldEZyb21FbGVtZW50IChlbGVtZW50LCBvYmplY3QgPSBudWxsKSB7XG4gICAgaWYgKCFlbGVtZW50KSByZXR1cm5cbiAgICBjb25zdCBkYW1hZ2UgPSBvYmplY3QgfHwge31cbiAgICBjaGF0SGVscGVyLmdldE9iamVjdEZyb21FbGVtZW50KGRhbWFnZSwgZWxlbWVudClcbiAgICBjb25zdCByb2xscyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLmRpY2Utcm9sbHMnKS5xdWVyeVNlbGVjdG9yQWxsKCdsaScpXG4gICAgZGFtYWdlLnJvbGxzID0gW11cbiAgICBmb3IgKGNvbnN0IHIgb2Ygcm9sbHMpIHtcbiAgICAgIGNvbnN0IHJvbGwgPSB7fVxuICAgICAgY2hhdEhlbHBlci5nZXRPYmplY3RGcm9tRWxlbWVudChyb2xsLCByKVxuICAgICAgZGFtYWdlLnJvbGxzLnB1c2gocm9sbClcbiAgICB9XG5cbiAgICBpZiAoIW9iamVjdCkgcmV0dXJuIGRhbWFnZVxuICB9XG59XG4iLCIvKiBnbG9iYWwgTWF0aFRlcm0sIE51bWVyaWNUZXJtLCBQYXJlbnRoZXRpY2FsVGVybSwgUm9sbCwgUm9sbFRlcm0gKi9cbmNsYXNzIEF2ZXJhZ2VQYXJlbnRoZXRpY2FsVGVybSBleHRlbmRzIFBhcmVudGhldGljYWxUZXJtIHtcbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIF9ldmFsdWF0ZVN5bmMgKHsgbWluaW1pemUgPSBmYWxzZSwgbWF4aW1pemUgPSBmYWxzZSB9ID0ge30pIHtcbiAgICAvLyBFdmFsdWF0ZSB0aGUgaW5uZXIgUm9sbFxuICAgIGNvbnN0IHJvbGwgPSB0aGlzLnJvbGwgfHwgbmV3IEF2ZXJhZ2VSb2xsKHRoaXMudGVybSlcbiAgICB0aGlzLnJvbGwgPSByb2xsLmV2YWx1YXRlKHsgbWluaW1pemUsIG1heGltaXplLCBhc3luYzogZmFsc2UgfSlcblxuICAgIC8vIFByb3BhZ2F0ZSBmbGF2b3IgdGV4dCB0byBpbm5lciB0ZXJtc1xuICAgIGlmICh0aGlzLmZsYXZvcikgdGhpcy5yb2xsLnRlcm1zLmZvckVhY2godCA9PiB7IHQub3B0aW9ucy5mbGF2b3IgPSB0Lm9wdGlvbnMuZmxhdm9yID8/IHRoaXMuZmxhdm9yIH0pXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQXZlcmFnZVJvbGwgZXh0ZW5kcyBSb2xsIHtcbiAgLyoqXG4gICAqIEV2YWx1YXRlIHRoZSByb2xsIHN5bmNocm9ub3VzbHkuXG4gICAqIEEgdGVtcG9yYXJ5IGhlbHBlciBtZXRob2QgdXNlZCB0byBtaWdyYXRlIGJlaGF2aW9yIGZyb20gMC43LnggKHN5bmMgYnkgZGVmYXVsdCkgdG8gMC45LnggKGFzeW5jIGJ5IGRlZmF1bHQpLlxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdICAgICAgT3B0aW9ucyB3aGljaCBpbmZvcm0gaG93IGV2YWx1YXRpb24gaXMgcGVyZm9ybWVkXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubWluaW1pemVdICAgIEZvcmNlIHRoZSByZXN1bHQgdG8gYmUgbWluaW1pemVkXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubWF4aW1pemVdICAgIEZvcmNlIHRoZSByZXN1bHQgdG8gYmUgbWF4aW1pemVkXG4gICAqIEByZXR1cm5zIHtSb2xsfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2YWx1YXRlU3luYyAoeyBtaW5pbWl6ZSA9IGZhbHNlLCBtYXhpbWl6ZSA9IGZhbHNlIH0gPSB7fSkge1xuICAgIC8vIFN0ZXAgMSAtIFJlcGxhY2UgaW50ZXJtZWRpYXRlIHRlcm1zIHdpdGggZXZhbHVhdGVkIG51bWJlcnNcbiAgICB0aGlzLnRlcm1zID0gdGhpcy50ZXJtcy5tYXAodGVybSA9PiB7XG4gICAgICBpZiAoISh0ZXJtIGluc3RhbmNlb2YgUm9sbFRlcm0pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUm9sbCBldmFsdWF0aW9uIGVuY291bnRlcmVkIGFuIGludmFsaWQgdGVybSB3aGljaCB3YXMgbm90IGEgUm9sbFRlcm0gaW5zdGFuY2UnKVxuICAgICAgfVxuICAgICAgaWYgKHRlcm0uaXNJbnRlcm1lZGlhdGUpIHtcbiAgICAgICAgdGVybS5ldmFsdWF0ZSh7IG1pbmltaXplLCBtYXhpbWl6ZSwgYXN5bmM6IGZhbHNlIH0pXG4gICAgICAgIHRoaXMuX2RpY2UgPSB0aGlzLl9kaWNlLmNvbmNhdCh0ZXJtLmRpY2UpXG5cbiAgICAgICAgLy8gVGhpcyBzZWN0aW9uIGlzIHJlcGxhY2VkIHRvIGNhbGN1bGF0ZSB0aGUgYXZlcmFnZVxuICAgICAgICBsZXQgdG90YWwgPSB0ZXJtLnRvdGFsXG4gICAgICAgIGlmIChtaW5pbWl6ZSAmJiBtYXhpbWl6ZSAmJiB0ZXJtLmRpY2UubGVuZ3RoKSB7XG4gICAgICAgICAgdG90YWwgPSBNYXRoLmZsb29yKCh0ZXJtLmRpY2VbMF0uZmFjZXMgKyAxKSAvIDIgKiB0ZXJtLnRvdGFsKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBOdW1lcmljVGVybSh7IG51bWJlcjogdG90YWwsIG9wdGlvbnM6IHRlcm0ub3B0aW9ucyB9KVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRlcm1cbiAgICB9KVxuXG4gICAgLy8gU3RlcCAyIC0gU2ltcGxpZnkgcmVtYWluaW5nIHRlcm1zXG4gICAgdGhpcy50ZXJtcyA9IHRoaXMuY29uc3RydWN0b3Iuc2ltcGxpZnlUZXJtcyh0aGlzLnRlcm1zKVxuXG4gICAgLy8gU3RlcCAzIC0gRXZhbHVhdGUgcmVtYWluaW5nIHRlcm1zXG4gICAgdGhpcy50ZXJtcyA9IHRoaXMudGVybXMubWFwKHRlcm0gPT4ge1xuICAgICAgaWYgKCF0ZXJtLl9ldmFsdWF0ZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0ZXJtLmZhY2VzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHJldHVybiBuZXcgTnVtZXJpY1Rlcm0oeyBudW1iZXI6IE1hdGguZmxvb3IoKHRlcm0uZmFjZXMgKyAxKSAvIDIgKiB0ZXJtLm51bWJlciksIG9wdGlvbnM6IHRlcm0ub3B0aW9ucyB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRlcm0uZXZhbHVhdGUoeyBtaW5pbWl6ZSwgbWF4aW1pemUsIGFzeW5jOiBmYWxzZSB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGVybVxuICAgIH0pXG5cbiAgICAvLyBTdGVwIDQgLSBFdmFsdWF0ZSB0aGUgZmluYWwgZXhwcmVzc2lvblxuICAgIHRoaXMuX3RvdGFsID0gdGhpcy5fZXZhbHVhdGVUb3RhbCgpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdCBhIGZvcm11bGEgYnkgaWRlbnRpZnlpbmcgaXRzIG91dGVyLW1vc3QgcGFyZW50aGV0aWNhbCBhbmQgbWF0aCB0ZXJtc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gX2Zvcm11bGEgICAgICBUaGUgcmF3IGZvcm11bGEgdG8gc3BsaXRcbiAgICogQHJldHVybnMge3N0cmluZ1tdfSAgICAgICAgICBBbiBhcnJheSBvZiB0ZXJtcywgc3BsaXQgb24gcGFyZW50aGV0aWNhbCB0ZXJtc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhdGljIF9zcGxpdFBhcmVudGhlc2VzIChfZm9ybXVsYSkge1xuICAgIHJldHVybiB0aGlzLl9zcGxpdEdyb3VwKF9mb3JtdWxhLCB7XG4gICAgICBvcGVuUmVnZXhwOiBBdmVyYWdlUGFyZW50aGV0aWNhbFRlcm0uT1BFTl9SRUdFWFAsXG4gICAgICBjbG9zZVJlZ2V4cDogQXZlcmFnZVBhcmVudGhldGljYWxUZXJtLkNMT1NFX1JFR0VYUCxcbiAgICAgIG9wZW5TeW1ib2w6ICcoJyxcbiAgICAgIGNsb3NlU3ltYm9sOiAnKScsXG4gICAgICBvbkNsb3NlOiBncm91cCA9PiB7XG4gICAgICAgIC8vIEV4dHJhY3QgZ3JvdXAgYXJndW1lbnRzXG4gICAgICAgIGNvbnN0IGZuID0gZ3JvdXAub3Blbi5zbGljZSgwLCAtMSlcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IGdyb3VwLnRlcm1zLmpvaW4oJycpXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7IGZsYXZvcjogZ3JvdXAuZmxhdm9yID8gZ3JvdXAuZmxhdm9yLnNsaWNlKDEsIC0xKSA6IHVuZGVmaW5lZCB9XG5cbiAgICAgICAgLy8gQ2xhc3NpZnkgdGhlIHJlc3VsdGluZyB0ZXJtc1xuICAgICAgICBjb25zdCB0ZXJtcyA9IFtdXG4gICAgICAgIGlmIChmbiBpbiBNYXRoKSB7XG4gICAgICAgICAgY29uc3QgYXJncyA9IHRoaXMuX3NwbGl0TWF0aEFyZ3MoZXhwcmVzc2lvbilcbiAgICAgICAgICB0ZXJtcy5wdXNoKG5ldyBNYXRoVGVybSh7IGZuLCB0ZXJtczogYXJncywgb3B0aW9ucyB9KSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoZm4pIHRlcm1zLnB1c2goZm4pXG4gICAgICAgICAgdGVybXMucHVzaChuZXcgQXZlcmFnZVBhcmVudGhldGljYWxUZXJtKHsgdGVybTogZXhwcmVzc2lvbiwgb3B0aW9ucyB9KSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGVybXNcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG4iLCIvKiBnbG9iYWwgY2FudmFzLCBDT05TVCwgRm9ybUFwcGxpY2F0aW9uLCBmb3VuZHJ5LCBmcm9tVXVpZCwgZ2FtZSwgVG9rZW5Eb2N1bWVudCwgdWkgKi9cbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi91dGlsaXRpZXMuanMnXG5cbmV4cG9ydCBjbGFzcyBBY3RvclBpY2tlckRpYWxvZyBleHRlbmRzIEZvcm1BcHBsaWNhdGlvbiB7XG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRPcHRpb25zLCB7XG4gICAgICBjbGFzc2VzOiBbJ2NvYzcnLCAnZGlhbG9nJywgJ2FjdG9yLXBpY2tlciddLFxuICAgICAgdGl0bGU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5QaWNrV2hpY2hBY3RvclRpdGxlJyksXG4gICAgICB0ZW1wbGF0ZTogJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvY2hhdC9tZXNzYWdlcy9hY3Rvci1waWNrZXIuaGJzJyxcbiAgICAgIGNsb3NlT25TdWJtaXQ6IGZhbHNlLFxuICAgICAgd2lkdGg6IDQxNSxcbiAgICAgIGhlaWdodDogMzc1XG4gICAgfSlcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICBhY3RpdmF0ZUxpc3RlbmVycyAoaHRtbCkge1xuICAgIHN1cGVyLmFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpXG5cbiAgICBodG1sLm9uKCdjbGljaycsICcuZGlyZWN0b3J5LWl0ZW0nLCB0aGlzLl9vblBpY2suYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJy5jYW4tcGluZycpLmhvdmVyKHRoaXMuX29uSG92ZXJJbi5iaW5kKHRoaXMpLCB0aGlzLl9vbkhvdmVyT3V0LmJpbmQodGhpcykpXG4gICAgaHRtbC5vbignY2xpY2snLCAnLnN1Ym1pdC1idXR0b24nLCB0aGlzLl9vblN1Ym1pdEJ1dHRvbi5iaW5kKHRoaXMpKVxuICB9XG5cbiAgX29uUGljayAoZXZlbnQpIHtcbiAgICBjb25zdCBsaSA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBmb3IgKGNvbnN0IGwgb2YgbGkucGFyZW50RWxlbWVudC5jaGlsZHJlbikge1xuICAgICAgbC5jbGFzc0xpc3QudG9nZ2xlKCdwaWNrZWQnLCBsID09PSBsaSlcbiAgICB9XG4gICAgdGhpcy5vYmplY3Quc2VsZWN0ZWQgPSBsaS5kYXRhc2V0LmVudHJ5VXVpZFxuICB9XG5cbiAgYXN5bmMgX29uSG92ZXJJbiAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgaWYgKCFjYW52YXMucmVhZHkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCBsaSA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCB0b2tlbiA9IChhd2FpdCBmcm9tVXVpZChsaS5kYXRhc2V0LmVudHJ5VXVpZCkpPy5vYmplY3RcbiAgICBpZiAodG9rZW4/LmlzVmlzaWJsZSkge1xuICAgICAgaWYgKCF0b2tlbi5jb250cm9sbGVkKSB7XG4gICAgICAgIHRva2VuLl9vbkhvdmVySW4oZXZlbnQsIHsgaG92ZXJPdXRPdGhlcnM6IHRydWUgfSlcbiAgICAgICAgdGhpcy5faGlnaGxpZ2h0ZWQgPSB0b2tlblxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9vbkhvdmVyT3V0IChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBpZiAodGhpcy5faGlnaGxpZ2h0ZWQpIHtcbiAgICAgIHRoaXMuX2hpZ2hsaWdodGVkLl9vbkhvdmVyT3V0KGV2ZW50KVxuICAgIH1cbiAgICB0aGlzLl9oaWdobGlnaHRlZCA9IG51bGxcbiAgfVxuXG4gIGFzeW5jIF9vblN1Ym1pdEJ1dHRvbiAoZXZlbnQpIHtcbiAgICB0aGlzLm9iamVjdC5yZXNvbHZlKGF3YWl0IGZyb21VdWlkKHRoaXMub2JqZWN0LnNlbGVjdGVkKSlcbiAgICB0aGlzLmNsb3NlKClcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBjcmVhdGUgKCkge1xuICAgIGNvbnN0IGFsbG93ZWRUeXBlcyA9IFsnY2hhcmFjdGVyJywgJ25wYycsICdjcmVhdHVyZSddXG4gICAgbGV0IGZvdW5kID0gW11cbiAgICBpZiAoZ2FtZS51c2VyLmlzR00gJiYgY2FudmFzLnJlYWR5ICYmIGNhbnZhcy50b2tlbnMuY29udHJvbGxlZC5sZW5ndGggPiAwKSB7XG4gICAgICBmb3VuZCA9IGNhbnZhcy50b2tlbnMuY29udHJvbGxlZC5tYXAodCA9PiB0LmRvY3VtZW50KVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoY2FudmFzLnJlYWR5KSB7XG4gICAgICAgIGZvdW5kID0gY2FudmFzLnRva2Vucy5wbGFjZWFibGVzLmZpbHRlcih0ID0+IGFsbG93ZWRUeXBlcy5pbmNsdWRlcyh0LmRvY3VtZW50LmFjdG9yLnR5cGUpICYmICh0LmFjdG9yLm93bmVyc2hpcFtnYW1lLnVzZXIuaWRdID8/IHQuYWN0b3Iub3duZXJzaGlwLmRlZmF1bHQpID09PSBDT05TVC5ET0NVTUVOVF9PV05FUlNISVBfTEVWRUxTLk9XTkVSKS5tYXAodCA9PiB0LmRvY3VtZW50KVxuICAgICAgfVxuICAgICAgY29uc3QgZm91bmRJRHMgPSBmb3VuZC5tYXAodCA9PiB0LmFjdG9ySWQpXG4gICAgICBmb3VuZCA9IGZvdW5kLmNvbmNhdChnYW1lLmFjdG9ycy5maWx0ZXIoYSA9PiBhbGxvd2VkVHlwZXMuaW5jbHVkZXMoYS50eXBlKSAmJiAhZm91bmRJRHMuaW5jbHVkZXMoYS5pZCkgJiYgKGEub3duZXJzaGlwW2dhbWUudXNlci5pZF0gPz8gYS5vd25lcnNoaXAuZGVmYXVsdCkgPT09IENPTlNULkRPQ1VNRU5UX09XTkVSU0hJUF9MRVZFTFMuT1dORVIpKVxuICAgIH1cbiAgICBpZiAoZm91bmQubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gZm91bmRbMF1cbiAgICB9XG4gICAgaWYgKGZvdW5kLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSBbXVxuICAgICAgZm9yIChjb25zdCBvcHRpb24gb2YgZm91bmQpIHtcbiAgICAgICAgY29uc3QgaXNUb2tlbkRvY3VtZW50ID0gKG9wdGlvbiBpbnN0YW5jZW9mIFRva2VuRG9jdW1lbnQpXG4gICAgICAgIG9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgdXVpZDogb3B0aW9uLnV1aWQsXG4gICAgICAgICAgbmFtZTogb3B0aW9uLm5hbWUsXG4gICAgICAgICAgaW1nOiAoaXNUb2tlbkRvY3VtZW50ID8gb3B0aW9uLmFjdG9yLnBvcnRyYWl0IDogb3B0aW9uLnBvcnRyYWl0KSxcbiAgICAgICAgICBjYW5QaW5nOiBpc1Rva2VuRG9jdW1lbnRcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMuc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG5cbiAgICAgIGxldCBzZWxlY3RlZCA9IG9wdGlvbnNbMV0udXVpZFxuICAgICAgaWYgKGdhbWUudXNlci5jaGFyYWN0ZXIpIHtcbiAgICAgICAgY29uc3QgZGVmYXVsdE9wdGlvbiA9IGZvdW5kLmZpbmQob3B0aW9uID0+IChvcHRpb24uYWN0b3JJZCA/PyBvcHRpb24uaWQpID09PSBnYW1lLnVzZXIuY2hhcmFjdGVyLmlkKVxuICAgICAgICBpZiAoZGVmYXVsdE9wdGlvbikge1xuICAgICAgICAgIHNlbGVjdGVkID0gZGVmYXVsdE9wdGlvbi51dWlkXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBuZXcgQWN0b3JQaWNrZXJEaWFsb2coeyBvcHRpb25zLCBzZWxlY3RlZCwgcmVzb2x2ZSB9KS5yZW5kZXIodHJ1ZSlcbiAgICAgIH0pXG4gICAgfVxuICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuV2Fybk5vQ29udHJvbGxlZEFjdG9yJykpXG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuIiwiLyogZ2xvYmFsIENoYXRNZXNzYWdlLCBmb3VuZHJ5LCBmcm9tVXVpZCwgZ2FtZSwgcmVuZGVyVGVtcGxhdGUsIFRva2VuRG9jdW1lbnQsIHVpICovXG5pbXBvcnQgeyBBY3RvclBpY2tlckRpYWxvZyB9IGZyb20gJy4vYWN0b3ItcGlja2VyLWRpYWxvZy5qcydcbmltcG9ydCB7IENvQzdDaGVjayB9IGZyb20gJy4uL2NoZWNrLmpzJ1xuaW1wb3J0IHsgQ29DN0RpY2UgfSBmcm9tICcuLi9kaWNlLmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4uL3V0aWxpdGllcy5qcydcblxuZXhwb3J0IGNsYXNzIENvQzdHcm91cE1lc3NhZ2Uge1xuICAvLyBTdGVwIDZjOiBHTSAvIC0gPSBSZW1vdmUgYSByb2xsXG4gIHN0YXRpYyBhc3luYyByZW1vdmVSb2xsICh7IG1lc3NhZ2VJZCwgbXNnLCB3aGljaCB9KSB7XG4gICAgaWYgKHR5cGVvZiBtZXNzYWdlSWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBtc2cgPSBnYW1lLm1lc3NhZ2VzLmdldChtZXNzYWdlSWQpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgbXNnLmZsYWdzPy5Db0M3Py5bJ2dyb3VwLW1lc3NhZ2UnXT8ucm9sbFN0YXR1c2VzW3doaWNoXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IHVwZGF0ZXMgPSB7XG4gICAgICAgIFsnZmxhZ3MuQ29DNy5ncm91cC1tZXNzYWdlLnJvbGxTdGF0dXNlcy4tPScgKyB3aGljaF06IG51bGxcbiAgICAgIH1cbiAgICAgIGF3YWl0IENvQzdHcm91cE1lc3NhZ2UudXBkYXRlVGhlR3JvdXBNZXNzYWdlKHsgbXNnLCB1cGRhdGVzIH0pXG4gICAgfVxuICB9XG5cbiAgLy8gU3RlcCA2YjogR00gLyBOb24gR00gPSBQdXNoIFJvbGxcbiAgc3RhdGljIGFzeW5jIHB1c2hNeVJvbGwgKHsgbWVzc2FnZUlkLCBtc2csIHdoaWNoIH0pIHtcbiAgICBpZiAodHlwZW9mIG1lc3NhZ2VJZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIG1zZyA9IGdhbWUubWVzc2FnZXMuZ2V0KG1lc3NhZ2VJZClcbiAgICB9XG4gICAgY29uc3QgdXBkYXRlcyA9IHt9XG4gICAgbGV0IGdtSWQgPSBmYWxzZVxuICAgIGlmICghbXNnLmNhblVzZXJNb2RpZnkoZ2FtZS51c2VyLCAndXBkYXRlJykpIHtcbiAgICAgIGdtSWQgPSBDb0M3VXRpbGl0aWVzLmdldEFuSWRGb3JHbSgpXG4gICAgfVxuICAgIHN3aXRjaCAobXNnLmZsYWdzLkNvQzdbJ2dyb3VwLW1lc3NhZ2UnXS50eXBlKSB7XG4gICAgICBjYXNlICdjb21iaW5lZCc6XG4gICAgICAgIHVwZGF0ZXNbJ2ZsYWdzLkNvQzcuZ3JvdXAtbWVzc2FnZS53YXNQdXNoZWQnXSA9IHRydWVcbiAgICAgICAgQ29DN0dyb3VwTWVzc2FnZS5wZXJmb3JtQ29tYmluZWRSb2xsKHsgbXNnLCBnbUlkLCB1cGRhdGVzLCBwdXNoaW5nOiB0cnVlIH0pXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdvcHBvc2VkJzpcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IHJvbGxzID0geyBbd2hpY2hdOiBtc2cuZmxhZ3MuQ29DN1snZ3JvdXAtbWVzc2FnZSddLnJvbGxTdGF0dXNlc1t3aGljaF0ucm9sbCB9XG4gICAgICAgICAgQ29DN0dyb3VwTWVzc2FnZS5wZXJmb3JtTm9ybWFsUm9sbCh7IG1zZywgcm9sbHMsIGdtSWQsIHVwZGF0ZXMsIHB1c2hpbmc6IHRydWUgfSlcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIC8vIFN0ZXAgNmE6IEdNIC8gTm9uIEdNID0gU3BlbmQgbHVja1xuICBzdGF0aWMgYXN5bmMgc3BlbmRNeUx1Y2sgKHsgbWVzc2FnZUlkLCBtc2csIHdoaWNoLCBpbmRleCwgbHVja0Ftb3VudCB9KSB7XG4gICAgaWYgKHR5cGVvZiBtZXNzYWdlSWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBtc2cgPSBnYW1lLm1lc3NhZ2VzLmdldChtZXNzYWdlSWQpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgbXNnLmZsYWdzPy5Db0M3Py5bJ2dyb3VwLW1lc3NhZ2UnXT8ucm9sbFN0YXR1c2VzW3doaWNoXS5jb21wbGV0ZWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBzd2l0Y2ggKG1zZy5mbGFncy5Db0M3Wydncm91cC1tZXNzYWdlJ10udHlwZSkge1xuICAgICAgICBjYXNlICdjb21iaW5lZCc6XG4gICAgICAgICAgaWYgKCFsdWNrQW1vdW50KSB7XG4gICAgICAgICAgICBjb25zdCBjaGVjayA9IENvQzdDaGVjay5mcm9tRGF0YShtc2cuZmxhZ3M/LkNvQzc/LlsnZ3JvdXAtbWVzc2FnZSddPy5yb2xsU3RhdHVzZXNbd2hpY2hdLmNvbXBsZXRlZClcbiAgICAgICAgICAgIGx1Y2tBbW91bnQgPSBjaGVjay5pbmNyZWFzZVN1Y2Nlc3NbaW5kZXhdLmx1Y2tUb1NwZW5kID8/IG51bGxcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGx1Y2tBbW91bnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGFjdG9yID0gYXdhaXQgQ29DN0dyb3VwTWVzc2FnZS5nZXRBY3Rvcihtc2cuZmxhZ3MuQ29DN1snZ3JvdXAtbWVzc2FnZSddLmFjdG9yVXVpZClcbiAgICAgICAgICAgIGlmICghKGFjdG9yIGluc3RhbmNlb2YgVG9rZW5Eb2N1bWVudCA/IGFjdG9yLmFjdG9yIDogYWN0b3IpLnNwZW5kTHVjayhsdWNrQW1vdW50KSkge1xuICAgICAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICAgICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRXJyb3JOb3RFbm91Z2hMdWNrJywge1xuICAgICAgICAgICAgICAgICAgYWN0b3I6IGFjdG9yLm5hbWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdXBkYXRlcyA9IHt9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHdoaWNoIGluIG1zZy5mbGFncy5Db0M3Wydncm91cC1tZXNzYWdlJ10ucm9sbFN0YXR1c2VzKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNoZWNrID0gQ29DN0NoZWNrLmZyb21EYXRhKG1zZy5mbGFncy5Db0M3Wydncm91cC1tZXNzYWdlJ10ucm9sbFN0YXR1c2VzW3doaWNoXS5jb21wbGV0ZWQpXG4gICAgICAgICAgICAgIGNoZWNrLmluY3JlYXNlTHVja1NwZW5kKGx1Y2tBbW91bnQpXG4gICAgICAgICAgICAgIHVwZGF0ZXNbJ2ZsYWdzLkNvQzcuZ3JvdXAtbWVzc2FnZS5yb2xsU3RhdHVzZXMuJyArIHdoaWNoICsgJy5jb21wbGV0ZWQnXSA9IGNoZWNrLkpTT05Sb2xsRGF0YVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHVwZGF0ZXMpLmxlbmd0aCkge1xuICAgICAgICAgICAgICBpZiAobXNnLmNhblVzZXJNb2RpZnkoZ2FtZS51c2VyLCAndXBkYXRlJykpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBDb0M3R3JvdXBNZXNzYWdlLnVwZGF0ZVRoZUdyb3VwTWVzc2FnZSh7IG1zZywgdXBkYXRlcyB9KVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdtSWQgPSBDb0M3VXRpbGl0aWVzLmdldEFuSWRGb3JHbSgpXG4gICAgICAgICAgICAgICAgaWYgKGdtSWQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICBnYW1lLnNvY2tldC5lbWl0KCdzeXN0ZW0uQ29DNycsIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXI6IGdtSWQsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdncm91cC1tZXNzYWdlLXVwZGF0ZScsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VJZDogbXNnLmlkLFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVzXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdvcHBvc2VkJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBjaGVjayA9IENvQzdDaGVjay5mcm9tRGF0YShtc2cuZmxhZ3M/LkNvQzc/LlsnZ3JvdXAtbWVzc2FnZSddPy5yb2xsU3RhdHVzZXNbd2hpY2hdLmNvbXBsZXRlZClcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIGNoZWNrLnVwZ3JhZGVDaGVjayhpbmRleCwgZmFsc2UpXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsdWNrQW1vdW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICBjaGVjay5mb3JjZVBhc3MobHVja0Ftb3VudCwgZmFsc2UpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVzID0ge1xuICAgICAgICAgICAgICBbJ2ZsYWdzLkNvQzcuZ3JvdXAtbWVzc2FnZS5yb2xsU3RhdHVzZXMuJyArIHdoaWNoICsgJy5jb21wbGV0ZWQnXTogY2hlY2suSlNPTlJvbGxEYXRhXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXModXBkYXRlcykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGlmIChtc2cuY2FuVXNlck1vZGlmeShnYW1lLnVzZXIsICd1cGRhdGUnKSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IENvQzdHcm91cE1lc3NhZ2UudXBkYXRlVGhlR3JvdXBNZXNzYWdlKHsgbXNnLCB1cGRhdGVzIH0pXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZ21JZCA9IENvQzdVdGlsaXRpZXMuZ2V0QW5JZEZvckdtKClcbiAgICAgICAgICAgICAgICBpZiAoZ21JZCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgIGdhbWUuc29ja2V0LmVtaXQoJ3N5c3RlbS5Db0M3Jywge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcjogZ21JZCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2dyb3VwLW1lc3NhZ2UtdXBkYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUlkOiBtc2cuaWQsXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZXNcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoJ0NvQzcuRXJyb3JSb2xsQWxyZWFkeUNvbXBsZXRlZCcsIHsgbG9jYWxpemU6IHRydWUgfSlcbiAgICB9XG4gIH1cblxuICAvLyBTdGVwIDU6IEdNIC8gLSA9IFVwZGF0ZSB0aGUgbWVzc2FnZVxuICBzdGF0aWMgYXN5bmMgdXBkYXRlVGhlR3JvdXBNZXNzYWdlICh7IG1zZywgdXBkYXRlcywgcm9sbERhdGEgfSA9IHt9KSB7XG4gICAgaWYgKG1zZz8uZmxhZ3M/LkNvQzc/LlsnZ3JvdXAtbWVzc2FnZSddKSB7XG4gICAgICBpZiAodHlwZW9mIHJvbGxEYXRhID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByb2xsRGF0YSA9IHt9XG4gICAgICAgIGZvciAoY29uc3Qgd2hpY2ggaW4gbXNnPy5mbGFncz8uQ29DNz8uWydncm91cC1tZXNzYWdlJ10ucm9sbFN0YXR1c2VzKSB7XG4gICAgICAgICAgY29uc3Qgcm9sbCA9IGF3YWl0IENvQzdHcm91cE1lc3NhZ2UucGFyc2VSb2xscyh7IHJvbGw6IG1zZz8uZmxhZ3M/LkNvQzc/LlsnZ3JvdXAtbWVzc2FnZSddLnJvbGxTdGF0dXNlc1t3aGljaF0ucm9sbCwgcXVpY2s6IHRydWUgfSlcbiAgICAgICAgICByb2xsRGF0YVt3aGljaF0gPSByb2xsXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHsgcm9sbERhdGEgfSwgZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChtc2cuZmxhZ3MuQ29DN1snZ3JvdXAtbWVzc2FnZSddLCBmb3VuZHJ5LnV0aWxzLmV4cGFuZE9iamVjdCh1cGRhdGVzKT8uZmxhZ3M/LkNvQzc/LlsnZ3JvdXAtbWVzc2FnZSddID8/IHt9LCB7IHBlcmZvcm1EZWxldGlvbnM6IHRydWUgfSkpXG4gICAgICBmb3IgKGNvbnN0IHdoaWNoIGluIG9wdGlvbnMucm9sbFN0YXR1c2VzKSB7XG4gICAgICAgIGlmIChvcHRpb25zLnJvbGxTdGF0dXNlc1t3aGljaF0uY29tcGxldGVkKSB7XG4gICAgICAgICAgb3B0aW9ucy5yb2xsU3RhdHVzZXNbd2hpY2hdLmNvbXBsZXRlZCA9IENvQzdDaGVjay5mcm9tRGF0YShvcHRpb25zLnJvbGxTdGF0dXNlc1t3aGljaF0uY29tcGxldGVkKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvcHRpb25zLmFsbFJvbGxzQ29tcGxldGVkID0gdHJ1ZVxuICAgICAgZm9yIChjb25zdCB3aGljaCBpbiBvcHRpb25zLnJvbGxTdGF0dXNlcykge1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMucm9sbFN0YXR1c2VzW3doaWNoXS5jb21wbGV0ZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgb3B0aW9ucy5hbGxSb2xsc0NvbXBsZXRlZCA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHVwZGF0ZXNbJ2ZsYWdzLkNvQzcuZ3JvdXAtbWVzc2FnZS5hbGxSb2xsc0NvbXBsZXRlZCddID0gb3B0aW9ucy5hbGxSb2xsc0NvbXBsZXRlZFxuICAgICAgc3dpdGNoIChvcHRpb25zLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnY29tYmluZWQnOlxuICAgICAgICAgIG9wdGlvbnMuaXNTdWNjZXNzID0gZmFsc2VcbiAgICAgICAgICBvcHRpb25zLmlzRmFpbHVyZSA9IGZhbHNlXG4gICAgICAgICAgaWYgKG9wdGlvbnMuYWxsUm9sbHNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIGxldCBzdWNjZXNzZXMgPSAwXG4gICAgICAgICAgICBsZXQgZmFpbHVyZXMgPSAwXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHdoaWNoIGluIG9wdGlvbnMucm9sbFN0YXR1c2VzKSB7XG4gICAgICAgICAgICAgIGlmIChvcHRpb25zLnJvbGxTdGF0dXNlc1t3aGljaF0uY29tcGxldGVkLmlzU3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3NlcysrXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5yb2xsU3RhdHVzZXNbd2hpY2hdLmNvbXBsZXRlZC5pc0ZhaWx1cmUpIHtcbiAgICAgICAgICAgICAgICBmYWlsdXJlcysrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdWNjZXNzZXMgPiAwICYmIChvcHRpb25zLmNvbWJpbmVkID09PSAnYW55JyB8fCAoZmFpbHVyZXMgPT09IDAgJiYgb3B0aW9ucy5jb21iaW5lZCA9PT0gJ2FsbCcpKSkge1xuICAgICAgICAgICAgICBvcHRpb25zLmlzU3VjY2VzcyA9IHRydWVcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG9wdGlvbnMuaXNGYWlsdXJlID0gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB1cGRhdGVzWydmbGFncy5Db0M3Lmdyb3VwLW1lc3NhZ2UuaXNTdWNjZXNzJ10gPSBvcHRpb25zLmlzU3VjY2Vzc1xuICAgICAgICAgIHVwZGF0ZXNbJ2ZsYWdzLkNvQzcuZ3JvdXAtbWVzc2FnZS5pc0ZhaWx1cmUnXSA9IG9wdGlvbnMuaXNGYWlsdXJlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnb3Bwb3NlZCc6XG4gICAgICAgICAgaWYgKG9wdGlvbnMuYWxsUm9sbHNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuaXNUaWUgPSBmYWxzZVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaXNDb21iYXQpIHtcbiAgICAgICAgICAgICAgLy8gU29ydCBjb21iYXQgcm9sbHMgYnkgaW5kZXguIGF0dGFja2VycyBmaXJzdFxuICAgICAgICAgICAgICBvcHRpb25zLnJvbGxPcmRlciA9IEFycmF5LmZyb20oKG5ldyBJbnQ4QXJyYXkob3B0aW9ucy5yb2xsT3JkZXIubWFwKHYgPT4gcGFyc2VJbnQodi5zdWJzdHIoMSksIDEwKSkpKS5zb3J0KCkpLm1hcCh2ID0+ICdyJyArIHYpXG4gICAgICAgICAgICAgIGNvbnN0IHN1Y2Nlc3NMZXZlbHMgPSB7fVxuICAgICAgICAgICAgICBvcHRpb25zLmRlZmVuZGVySXNEb2RnaW5nID0gZmFsc2VcbiAgICAgICAgICAgICAgZm9yIChjb25zdCB3aGljaCBpbiBvcHRpb25zLnJvbGxTdGF0dXNlcykge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnJvbGxTdGF0dXNlc1t3aGljaF0uY29tcGxldGVkLnBhc3NlZCkge1xuICAgICAgICAgICAgICAgICAgc3VjY2Vzc0xldmVsc1tvcHRpb25zLnJvbGxTdGF0dXNlc1t3aGljaF0uY29tcGxldGVkLnN1Y2Nlc3NMZXZlbF0gPSBwYXJzZUludChzdWNjZXNzTGV2ZWxzW29wdGlvbnMucm9sbFN0YXR1c2VzW3doaWNoXS5jb21wbGV0ZWQuc3VjY2Vzc0xldmVsXSA/PyAwLCAxMCkgKyAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnJvbGxTdGF0dXNlc1t3aGljaF0uaXNEb2RnaW5nICYmICFvcHRpb25zLnJvbGxTdGF0dXNlc1t3aGljaF0uaXNBdHRhY2tlcikge1xuICAgICAgICAgICAgICAgICAgb3B0aW9ucy5kZWZlbmRlcklzRG9kZ2luZyA9IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdXBkYXRlc1snZmxhZ3MuQ29DNy5ncm91cC1tZXNzYWdlLmRlZmVuZGVySXNEb2RnaW5nJ10gPSBvcHRpb25zLmRlZmVuZGVySXNEb2RnaW5nXG4gICAgICAgICAgICAgIGlmIChvcHRpb25zLmFkdmFudGFnZUF0dGFja2VyID09PSBmYWxzZSAmJiBvcHRpb25zLmFkdmFudGFnZURlZmVuZGVyID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmRlZmVuZGVySXNEb2RnaW5nKSB7XG4gICAgICAgICAgICAgICAgICBvcHRpb25zLmFkdmFudGFnZURlZmVuZGVyID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgdXBkYXRlc1snZmxhZ3MuQ29DNy5ncm91cC1tZXNzYWdlLmFkdmFudGFnZURlZmVuZGVyJ10gPSBvcHRpb25zLmFkdmFudGFnZURlZmVuZGVyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIG9wdGlvbnMuYWR2YW50YWdlQXR0YWNrZXIgPSB0cnVlXG4gICAgICAgICAgICAgICAgICB1cGRhdGVzWydmbGFncy5Db0M3Lmdyb3VwLW1lc3NhZ2UuYWR2YW50YWdlQXR0YWNrZXInXSA9IG9wdGlvbnMuYWR2YW50YWdlQXR0YWNrZXJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29uc3QgYmVzdCA9IE1hdGgubWF4KC4uLk9iamVjdC5rZXlzKHN1Y2Nlc3NMZXZlbHMpKVxuICAgICAgICAgICAgICBvcHRpb25zLm5lZWRzVGllQnJlYWtlciA9IGZhbHNlXG4gICAgICAgICAgICAgIG9wdGlvbnMucmVzdWx0VGV4dCA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ob1dpbm5lcicpXG4gICAgICAgICAgICAgIGlmIChiZXN0ID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgd2hpY2ggaW4gb3B0aW9ucy5yb2xsU3RhdHVzZXMpIHtcbiAgICAgICAgICAgICAgICAgIGxldCByb2xsSXNXaW5uZXIgPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgbGV0IHJvbGxJc1RpZSA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5yb2xsU3RhdHVzZXNbd2hpY2hdLmNvbXBsZXRlZC5zdWNjZXNzTGV2ZWwgPT09IGJlc3QgJiYgc3VjY2Vzc0xldmVsc1tiZXN0XSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByb2xsSXNXaW5uZXIgPSB0cnVlXG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMucm9sbFN0YXR1c2VzW3doaWNoXS5jb21wbGV0ZWQuc3VjY2Vzc0xldmVsID09PSBiZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmFkdmFudGFnZUF0dGFja2VyICYmIG9wdGlvbnMucm9sbFN0YXR1c2VzW3doaWNoXS5pc0F0dGFja2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcm9sbElzV2lubmVyID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuYWR2YW50YWdlRGVmZW5kZXIgJiYgIW9wdGlvbnMucm9sbFN0YXR1c2VzW3doaWNoXS5pc0F0dGFja2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcm9sbElzV2lubmVyID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIHJvbGxJc1dpbm5lciA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICByb2xsSXNUaWUgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5uZWVkc1RpZUJyZWFrZXIgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5pc1RpZSA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgb3B0aW9ucy5yb2xsU3RhdHVzZXNbd2hpY2hdLmlzV2lubmVyID0gcm9sbElzV2lubmVyXG4gICAgICAgICAgICAgICAgICBvcHRpb25zLnJvbGxTdGF0dXNlc1t3aGljaF0uaXNUaWUgPSByb2xsSXNUaWVcbiAgICAgICAgICAgICAgICAgIHVwZGF0ZXNbJ2ZsYWdzLkNvQzcuZ3JvdXAtbWVzc2FnZS5yb2xsU3RhdHVzZXMuJyArIHdoaWNoICsgJy5pc1dpbm5lciddID0gcm9sbElzV2lubmVyXG4gICAgICAgICAgICAgICAgICB1cGRhdGVzWydmbGFncy5Db0M3Lmdyb3VwLW1lc3NhZ2Uucm9sbFN0YXR1c2VzLicgKyB3aGljaCArICcuaXNUaWUnXSA9IHJvbGxJc1RpZVxuICAgICAgICAgICAgICAgICAgaWYgKHJvbGxJc1dpbm5lciAmJiAhcm9sbElzVGllKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnJvbGxTdGF0dXNlc1t3aGljaF0uaXNBdHRhY2tlcikge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnJvbGxTdGF0dXNlc1t3aGljaF0uaXNNYW5ldXZlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5yZXN1bHRUZXh0ID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5NYW5ldXZlclN1Y2Nlc3MnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHJvbGxEYXRhW3doaWNoXS5hY3Rvci5uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnJlc3VsdFRleHQgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkF0dGFja1N1Y2Nlc3MnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHJvbGxEYXRhW3doaWNoXS5hY3Rvci5uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnJvbGxTdGF0dXNlc1t3aGljaF0uaXNNYW5ldXZlcikge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnJvbGxTdGF0dXNlc1t3aGljaF0uaXNEb2RnaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnJlc3VsdFRleHQgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkRvZGdlU3VjY2VzcycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcm9sbERhdGFbd2hpY2hdLmFjdG9yLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMucmVzdWx0VGV4dCA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuTWFuZXV2ZXJTdWNjZXNzJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiByb2xsRGF0YVt3aGljaF0uYWN0b3IubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5yZXN1bHRUZXh0ID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5BdHRhY2tTdWNjZXNzJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcm9sbERhdGFbd2hpY2hdLmFjdG9yLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHVwZGF0ZXNbJ2ZsYWdzLkNvQzcuZ3JvdXAtbWVzc2FnZS5uZWVkc1RpZUJyZWFrZXInXSA9IG9wdGlvbnMubmVlZHNUaWVCcmVha2VyXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBTb3J0IGJ5IHN1Y2Nlc3Nlc1xuICAgICAgICAgICAgICBjb25zdCBvcHBvc2VkUm9sbFRpZUJyZWFrZXIgPSBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdvcHBvc2VkUm9sbFRpZUJyZWFrZXInKVxuICAgICAgICAgICAgICBvcHRpb25zLnJvbGxPcmRlci5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucm9sbFN0YXR1c2VzW2FdLmNvbXBsZXRlZC5zdWNjZXNzTGV2ZWwgPiBvcHRpb25zLnJvbGxTdGF0dXNlc1tiXS5jb21wbGV0ZWQuc3VjY2Vzc0xldmVsKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLTFcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMucm9sbFN0YXR1c2VzW2FdLmNvbXBsZXRlZC5zdWNjZXNzTGV2ZWwgPCBvcHRpb25zLnJvbGxTdGF0dXNlc1tiXS5jb21wbGV0ZWQuc3VjY2Vzc0xldmVsKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gMVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3Bwb3NlZFJvbGxUaWVCcmVha2VyKSB7XG4gICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5yb2xsU3RhdHVzZXNbYV0uY29tcGxldGVkLm1vZGlmaWVkUmVzdWx0ID4gb3B0aW9ucy5yb2xsU3RhdHVzZXNbYl0uY29tcGxldGVkLm1vZGlmaWVkUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnJvbGxTdGF0dXNlc1thXS5jb21wbGV0ZWQubW9kaWZpZWRSZXN1bHQgPCBvcHRpb25zLnJvbGxTdGF0dXNlc1tiXS5jb21wbGV0ZWQubW9kaWZpZWRSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDFcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMucm9sbFN0YXR1c2VzW2FdLmNvbXBsZXRlZC5yYXdWYWx1ZSA+IG9wdGlvbnMucm9sbFN0YXR1c2VzW2JdLmNvbXBsZXRlZC5yYXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnJvbGxTdGF0dXNlc1thXS5jb21wbGV0ZWQucmF3VmFsdWUgPCBvcHRpb25zLnJvbGxTdGF0dXNlc1tiXS5jb21wbGV0ZWQucmF3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAwXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIGNvbnN0IG9mZnNldE1heCA9IG9wdGlvbnMucm9sbE9yZGVyLmxlbmd0aFxuICAgICAgICAgICAgICBsZXQgb2Zmc2V0ID0gMFxuICAgICAgICAgICAgICBjb25zdCBhID0gb3B0aW9ucy5yb2xsU3RhdHVzZXNbb3B0aW9ucy5yb2xsT3JkZXJbMF1dXG4gICAgICAgICAgICAgIGlmICghYS5mYWlsZWQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKDsgb2Zmc2V0IDwgb2Zmc2V0TWF4OyBvZmZzZXQrKykge1xuICAgICAgICAgICAgICAgICAgY29uc3QgYiA9IG9wdGlvbnMucm9sbFN0YXR1c2VzW29wdGlvbnMucm9sbE9yZGVyW29mZnNldF1dXG4gICAgICAgICAgICAgICAgICBpZiAoYS5jb21wbGV0ZWQuc3VjY2Vzc0xldmVsICE9PSBiLmNvbXBsZXRlZC5zdWNjZXNzTGV2ZWwgfHwgKG9wcG9zZWRSb2xsVGllQnJlYWtlciA/IGEuY29tcGxldGVkLm1vZGlmaWVkUmVzdWx0ICE9PSBiLmNvbXBsZXRlZC5tb2RpZmllZFJlc3VsdCA6IGEuY29tcGxldGVkLnJhd1ZhbHVlICE9PSBiLmNvbXBsZXRlZC5yYXdWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0LS1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gLTFcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBvcHRpb25zLmlzVGllID0gb2Zmc2V0ID4gMFxuICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9mZnNldE1heDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGlzV2lubmVyID0gZmFsc2VcbiAgICAgICAgICAgICAgICBsZXQgaXNUaWUgPSBmYWxzZVxuICAgICAgICAgICAgICAgIGlmIChpIDw9IG9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgaXNXaW5uZXIgPSB0cnVlXG4gICAgICAgICAgICAgICAgICBpc1RpZSA9IG9wdGlvbnMuaXNUaWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgd2hpY2ggPSBvcHRpb25zLnJvbGxPcmRlcltpXVxuICAgICAgICAgICAgICAgIG9wdGlvbnMucm9sbFN0YXR1c2VzW3doaWNoXS5pc1dpbm5lciA9IGlzV2lubmVyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5yb2xsU3RhdHVzZXNbd2hpY2hdLmlzVGllID0gaXNUaWVcbiAgICAgICAgICAgICAgICB1cGRhdGVzWydmbGFncy5Db0M3Lmdyb3VwLW1lc3NhZ2Uucm9sbFN0YXR1c2VzLicgKyB3aGljaCArICcuaXNXaW5uZXInXSA9IGlzV2lubmVyXG4gICAgICAgICAgICAgICAgdXBkYXRlc1snZmxhZ3MuQ29DNy5ncm91cC1tZXNzYWdlLnJvbGxTdGF0dXNlcy4nICsgd2hpY2ggKyAnLmlzVGllJ10gPSBpc1RpZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG9wdGlvbnMubmVlZHNUaWVCcmVha2VyID0gZmFsc2VcbiAgICAgICAgICAgICAgdXBkYXRlc1snZmxhZ3MuQ29DNy5ncm91cC1tZXNzYWdlLm5lZWRzVGllQnJlYWtlciddID0gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZXNbJ2ZsYWdzLkNvQzcuZ3JvdXAtbWVzc2FnZS5pc1RpZSddID0gb3B0aW9ucy5pc1RpZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKENvQzdHcm91cE1lc3NhZ2UuZ2V0VGVtcGxhdGVQYXRoKG1zZy5mbGFncy5Db0M3Wydncm91cC1tZXNzYWdlJ10udHlwZSksIG9wdGlvbnMpXG4gICAgICB1cGRhdGVzLmNvbnRlbnQgPSBodG1sXG4gICAgICBhd2FpdCBtc2cudXBkYXRlKHVwZGF0ZXMpXG4gICAgfVxuICB9XG5cbiAgLy8gU3RlcCA0OiBHTSAvIC0gPSBQcmVwYXJlIG1lc3NhZ2UgZGF0YVxuICBzdGF0aWMgYXN5bmMgdXBkYXRlVGhlTWVzc2FnZSAoeyBtZXNzYWdlSWQsIHVwZGF0ZXMgfSkge1xuICAgIGNvbnN0IG1zZyA9IGdhbWUubWVzc2FnZXMuZ2V0KG1lc3NhZ2VJZClcbiAgICBpZiAobXNnPy5mbGFncz8uQ29DNz8uWydncm91cC1tZXNzYWdlJ10gPz8gZmFsc2UpIHtcbiAgICAgIGF3YWl0IENvQzdHcm91cE1lc3NhZ2UudXBkYXRlVGhlR3JvdXBNZXNzYWdlKHsgbXNnLCB1cGRhdGVzIH0pXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGdldENoZWNrICh7IG1zZywgdGhlUm9sbCB9KSB7XG4gICAgY29uc3QgY2hlY2tEYXRhID0ge1xuICAgICAgZGlmZmljdWx0eTogdGhlUm9sbC5kaWZmaWN1bHR5LFxuICAgICAgZGljZU1vZGlmaWVyOiB0aGVSb2xsLmJvbnVzLFxuICAgICAgYWN0b3JLZXk6ICh0aGVSb2xsLmFjdG9yLmFjdG9yS2V5ID8/IHRoZVJvbGwuYWN0b3IuYWN0b3IuYWN0b3JLZXkpLFxuICAgICAgZGVueVB1c2g6IGZhbHNlLFxuICAgICAgY29tYmF0OiAobXNnLmZsYWdzPy5Db0M3Py5bJ2dyb3VwLW1lc3NhZ2UnXS5pc0NvbWJhdCA/PyBmYWxzZSlcbiAgICB9XG4gICAgc3dpdGNoICh0aGVSb2xsLnR5cGUpIHtcbiAgICAgIGNhc2UgJ2NoYXJhY3RlcmlzdGljJzpcbiAgICAgICAgY2hlY2tEYXRhLmNoYXJhY3RlcmlzdGljID0gdGhlUm9sbC5rZXlcbiAgICAgICAgY2hlY2tEYXRhLmRlbnlQdXNoID0gKG1zZy5mbGFncz8uQ29DNz8uWydncm91cC1tZXNzYWdlJ10uZGVueVB1c2ggPz8gZmFsc2UpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdhdHRyaWJ1dGUnOlxuICAgICAgICBjaGVja0RhdGEuYXR0cmlidXRlID0gdGhlUm9sbC5rZXlcbiAgICAgICAgY2hlY2tEYXRhLmRlbnlQdXNoID0gKG1zZy5mbGFncz8uQ29DNz8uWydncm91cC1tZXNzYWdlJ10uZGVueVB1c2ggPz8gZmFsc2UpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdza2lsbCc6XG4gICAgICAgIGNoZWNrRGF0YS5za2lsbCA9IHRoZVJvbGwuc2tpbGxcbiAgICAgICAgY2hlY2tEYXRhLmRlbnlQdXNoID0gKChtc2cuZmxhZ3M/LkNvQzc/LlsnZ3JvdXAtbWVzc2FnZSddLmRlbnlQdXNoID8/IGZhbHNlKSB8fCAhdGhlUm9sbC5wdXNoYWJsZSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2l0ZW0nOlxuICAgICAgICBjaGVja0RhdGEuaXRlbSA9IHRoZVJvbGwuaXRlbVxuICAgICAgICBjaGVja0RhdGEuZGVueVB1c2ggPSAoKG1zZy5mbGFncz8uQ29DNz8uWydncm91cC1tZXNzYWdlJ10uZGVueVB1c2ggPz8gZmFsc2UpIHx8ICF0aGVSb2xsLnB1c2hhYmxlKVxuICAgICAgICBicmVha1xuICAgIH1cbiAgICByZXR1cm4gQ29DN0NoZWNrLmNyZWF0ZShjaGVja0RhdGEpXG4gIH1cblxuICAvLyBTdGVwIDM6IEdNIC8gTm9uIEdNID0gUGVyZm9ybSBhIHJvbGxcbiAgc3RhdGljIGFzeW5jIHBlcmZvcm1Sb2xsICh7IG1zZywgd2hpY2gsIHJvbGwsIHB1c2hpbmcgfSA9IHt9KSB7XG4gICAgY29uc3QgdGhlUm9sbCA9IGF3YWl0IENvQzdHcm91cE1lc3NhZ2UucGFyc2VSb2xscyh7IHJvbGwsIHF1aWNrOiBmYWxzZSB9KVxuICAgIGlmICghdGhlUm9sbCkge1xuICAgICAgcmV0dXJuIHt9XG4gICAgfVxuICAgIGNvbnN0IGNoZWNrID0gYXdhaXQgQ29DN0dyb3VwTWVzc2FnZS5nZXRDaGVjayh7IG1zZywgdGhlUm9sbCB9KVxuICAgIGlmIChwdXNoaW5nKSB7XG4gICAgICBjaGVjay5wdXNoaW5nID0gcHVzaGluZ1xuICAgIH1cbiAgICBhd2FpdCBjaGVjay5fcGVyZm9ybSh7XG4gICAgICBmb3JjZURTTjogdHJ1ZVxuICAgIH0pXG4gICAgY29uc3QgdXBkYXRlcyA9IHt9XG4gICAgdXBkYXRlc1snZmxhZ3MuQ29DNy5ncm91cC1tZXNzYWdlLnJvbGxTdGF0dXNlcy4nICsgd2hpY2ggKyAnLmNvbXBsZXRlZCddID0gY2hlY2suSlNPTlJvbGxEYXRhXG4gICAgcmV0dXJuIHVwZGF0ZXNcbiAgfVxuXG4gIC8vIFN0ZXAgMmI6IEdNIC8gTm9uIEdNID0gcGVyZm9ybSByb2xsIGRhdGFcbiAgc3RhdGljIGFzeW5jIHBlcmZvcm1Db21iaW5lZFJvbGwgKHsgbWVzc2FnZUlkLCBtc2csIGdtSWQsIHVwZGF0ZXMsIHB1c2hpbmcgPSBmYWxzZSB9KSB7XG4gICAgaWYgKHR5cGVvZiBtZXNzYWdlSWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBtc2cgPSBnYW1lLm1lc3NhZ2VzLmdldChtZXNzYWdlSWQpXG4gICAgfVxuXG4gICAgY29uc3Qgcm9sbERhdGEgPSB7fVxuICAgIGZvciAoY29uc3Qgd2hpY2ggaW4gbXNnPy5mbGFncz8uQ29DNz8uWydncm91cC1tZXNzYWdlJ10ucm9sbFN0YXR1c2VzKSB7XG4gICAgICBjb25zdCByb2xsID0gYXdhaXQgQ29DN0dyb3VwTWVzc2FnZS5wYXJzZVJvbGxzKHsgcm9sbDogbXNnPy5mbGFncz8uQ29DNz8uWydncm91cC1tZXNzYWdlJ10ucm9sbFN0YXR1c2VzW3doaWNoXS5yb2xsLCBxdWljazogZmFsc2UgfSlcbiAgICAgIGlmIChyb2xsKSB7XG4gICAgICAgIHJvbGxEYXRhW3doaWNoXSA9IHJvbGxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBwb29sID0ge31cbiAgICBmb3IgKGNvbnN0IHdoaWNoIGluIHJvbGxEYXRhKSB7XG4gICAgICBwb29sW3BhcnNlSW50KHJvbGxEYXRhW3doaWNoXS5ib251cyA/PyAwLCAxMCldID0gZmFsc2VcbiAgICB9XG5cbiAgICBjb25zdCByb2xsID0gYXdhaXQgQ29DN0RpY2UuY29tYmluZWRSb2xsKHsgcG9vbCB9KVxuXG4gICAgbGV0IGZpcnN0ID0gdHJ1ZVxuICAgIGZvciAoY29uc3Qgd2hpY2ggaW4gcm9sbERhdGEpIHtcbiAgICAgIGNvbnN0IGJvbnVzID0gcGFyc2VJbnQocm9sbERhdGFbd2hpY2hdLmJvbnVzID8/IDAsIDEwKVxuICAgICAgY29uc3QgY2hlY2sgPSBhd2FpdCBDb0M3R3JvdXBNZXNzYWdlLmdldENoZWNrKHsgbXNnLCB0aGVSb2xsOiByb2xsRGF0YVt3aGljaF0gfSlcbiAgICAgIGlmIChwdXNoaW5nKSB7XG4gICAgICAgIGNoZWNrLnB1c2hpbmcgPSBwdXNoaW5nXG4gICAgICB9XG4gICAgICBhd2FpdCBjaGVjay5fcGVyZm9ybSh7XG4gICAgICAgIHJvbGw6IHJvbGxbYm9udXNdLFxuICAgICAgICBzaWxlbnQ6IChmaXJzdCA9PT0gZmFsc2UgPyB0cnVlIDogdW5kZWZpbmVkKSxcbiAgICAgICAgZm9yY2VEU046IGZpcnN0XG4gICAgICB9KVxuICAgICAgdXBkYXRlc1snZmxhZ3MuQ29DNy5ncm91cC1tZXNzYWdlLnJvbGxTdGF0dXNlcy4nICsgd2hpY2ggKyAnLmNvbXBsZXRlZCddID0gY2hlY2suSlNPTlJvbGxEYXRhXG4gICAgICBmaXJzdCA9IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKG1zZy5jYW5Vc2VyTW9kaWZ5KGdhbWUudXNlciwgJ3VwZGF0ZScpKSB7XG4gICAgICBhd2FpdCBDb0M3R3JvdXBNZXNzYWdlLnVwZGF0ZVRoZUdyb3VwTWVzc2FnZSh7IG1zZywgdXBkYXRlcyB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBnbUlkID0gQ29DN1V0aWxpdGllcy5nZXRBbklkRm9yR20oKVxuICAgICAgaWYgKGdtSWQgIT09IGZhbHNlKSB7XG4gICAgICAgIGdhbWUuc29ja2V0LmVtaXQoJ3N5c3RlbS5Db0M3Jywge1xuICAgICAgICAgIGxpc3RlbmVyOiBnbUlkLFxuICAgICAgICAgIHR5cGU6ICdncm91cC1tZXNzYWdlLXVwZGF0ZScsXG4gICAgICAgICAgbWVzc2FnZUlkOiBtc2cuaWQsXG4gICAgICAgICAgdXBkYXRlc1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFN0ZXAgMmE6IEdNIC8gTm9uIEdNID0gcGVyZm9ybSByb2xsIGRhdGFcbiAgc3RhdGljIGFzeW5jIHBlcmZvcm1Ob3JtYWxSb2xsICh7IG1lc3NhZ2VJZCwgbXNnLCByb2xscywgZ21JZCwgdXBkYXRlcywgcHVzaGluZyA9IGZhbHNlIH0pIHtcbiAgICBpZiAodHlwZW9mIG1lc3NhZ2VJZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIG1zZyA9IGdhbWUubWVzc2FnZXMuZ2V0KG1lc3NhZ2VJZClcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHdoaWNoIGluIHJvbGxzKSB7XG4gICAgICBpZiAodHlwZW9mIG1zZy5mbGFncz8uQ29DNz8uWydncm91cC1tZXNzYWdlJ10/LnJvbGxTdGF0dXNlc1t3aGljaF0uY29tcGxldGVkID09PSAndW5kZWZpbmVkJyB8fCBwdXNoaW5nKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odXBkYXRlcywgYXdhaXQgQ29DN0dyb3VwTWVzc2FnZS5wZXJmb3JtUm9sbCh7IG1zZywgd2hpY2gsIHJvbGw6IHJvbGxzW3doaWNoXSwgcHVzaGluZyB9KSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoJ0NvQzcuRXJyb3JSb2xsQWxyZWFkeUNvbXBsZXRlZCcsIHsgbG9jYWxpemU6IHRydWUgfSlcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG1zZy5jYW5Vc2VyTW9kaWZ5KGdhbWUudXNlciwgJ3VwZGF0ZScpKSB7XG4gICAgICBhd2FpdCBDb0M3R3JvdXBNZXNzYWdlLnVwZGF0ZVRoZUdyb3VwTWVzc2FnZSh7IG1zZywgdXBkYXRlcyB9KVxuICAgIH0gZWxzZSBpZiAoZ21JZCAhPT0gZmFsc2UpIHtcbiAgICAgIGdhbWUuc29ja2V0LmVtaXQoJ3N5c3RlbS5Db0M3Jywge1xuICAgICAgICBsaXN0ZW5lcjogZ21JZCxcbiAgICAgICAgdHlwZTogJ2dyb3VwLW1lc3NhZ2UtdXBkYXRlJyxcbiAgICAgICAgbWVzc2FnZUlkOiBtc2cuaWQsXG4gICAgICAgIHVwZGF0ZXNcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgLy8gU3RlcCAyOiBHTSAvIE5vbiBHTSA9IFByZXBhcmUgcm9sbCBkYXRhXG4gIHN0YXRpYyBhc3luYyBwZXJmb3JtTXlSb2xscyAoeyBtZXNzYWdlSWQsIG1zZywgcm9sbHMgfSkge1xuICAgIGlmICh0eXBlb2YgbWVzc2FnZUlkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgbXNnID0gZ2FtZS5tZXNzYWdlcy5nZXQobWVzc2FnZUlkKVxuICAgIH1cbiAgICBjb25zdCB1cGRhdGVzID0ge31cbiAgICBmb3IgKGNvbnN0IHdoaWNoIGluIHJvbGxzKSB7XG4gICAgICBhd2FpdCBDb0M3R3JvdXBNZXNzYWdlLm5hbWVSb2xsKHsgd2hpY2gsIHJvbGw6IHJvbGxzW3doaWNoXSwgdXBkYXRlcyB9KVxuICAgIH1cblxuICAgIGNvbnN0IGdtSWQgPSAobXNnLmNhblVzZXJNb2RpZnkoZ2FtZS51c2VyLCAndXBkYXRlJykgPyBmYWxzZSA6IENvQzdVdGlsaXRpZXMuZ2V0QW5JZEZvckdtKCkpXG5cbiAgICBpZiAoT2JqZWN0LmtleXModXBkYXRlcykubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKG1zZy5jYW5Vc2VyTW9kaWZ5KGdhbWUudXNlciwgJ3VwZGF0ZScpKSB7XG4gICAgICAgIGF3YWl0IENvQzdHcm91cE1lc3NhZ2UudXBkYXRlVGhlR3JvdXBNZXNzYWdlKHsgbXNnLCB1cGRhdGVzIH0pXG4gICAgICB9IGVsc2UgaWYgKGdtSWQgIT09IGZhbHNlKSB7XG4gICAgICAgIGdhbWUuc29ja2V0LmVtaXQoJ3N5c3RlbS5Db0M3Jywge1xuICAgICAgICAgIGxpc3RlbmVyOiBnbUlkLFxuICAgICAgICAgIHR5cGU6ICdncm91cC1tZXNzYWdlLXVwZGF0ZScsXG4gICAgICAgICAgbWVzc2FnZUlkOiBtc2cuaWQsXG4gICAgICAgICAgdXBkYXRlc1xuICAgICAgICB9KVxuICAgICAgICAvLyBXYWl0IGZvciBhIGJpdCB0byByZWR1Y2UgcmFjZSBjb25kaXRpb25zXG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAyMDApKVxuICAgICAgfVxuICAgIH1cblxuICAgIHN3aXRjaCAobXNnLmZsYWdzLkNvQzdbJ2dyb3VwLW1lc3NhZ2UnXS50eXBlKSB7XG4gICAgICBjYXNlICdjb21iaW5lZCc6XG4gICAgICAgIENvQzdHcm91cE1lc3NhZ2UucGVyZm9ybUNvbWJpbmVkUm9sbCh7IG1zZywgZ21JZCwgdXBkYXRlcyB9KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnb3Bwb3NlZCc6XG4gICAgICAgIENvQzdHcm91cE1lc3NhZ2UucGVyZm9ybU5vcm1hbFJvbGwoeyBtc2csIHJvbGxzLCBnbUlkLCB1cGRhdGVzIH0pXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgLy8gU3RlcCAyOiBHTSAvIE5vbiBHTSA9IE5hbWUgcm9sbHNcbiAgc3RhdGljIGFzeW5jIG5hbWVSb2xsICh7IHdoaWNoLCByb2xsLCB1cGRhdGVzIH0pIHtcbiAgICBjb25zdCBwYXJzZWQgPSBhd2FpdCBDb0M3R3JvdXBNZXNzYWdlLnBhcnNlUm9sbHMoeyByb2xsLCBxdWljazogZmFsc2UgfSlcbiAgICBpZiAocGFyc2VkKSB7XG4gICAgICB1cGRhdGVzWydmbGFncy5Db0M3Lmdyb3VwLW1lc3NhZ2Uucm9sbFN0YXR1c2VzLicgKyB3aGljaCArICcuc2hvcnROYW1lJ10gPSBwYXJzZWQuc2hvcnROYW1lXG4gICAgICB1cGRhdGVzWydmbGFncy5Db0M3Lmdyb3VwLW1lc3NhZ2Uucm9sbFN0YXR1c2VzLicgKyB3aGljaCArICcuZnVsbE5hbWUnXSA9IHBhcnNlZC5mdWxsTmFtZVxuICAgICAgdXBkYXRlc1snZmxhZ3MuQ29DNy5ncm91cC1tZXNzYWdlLnJvbGxTdGF0dXNlcy4nICsgd2hpY2ggKyAnLnRhZ3MnXSA9IHBhcnNlZC50YWdzID8/IFtdXG4gICAgICB1cGRhdGVzWydmbGFncy5Db0M3Lmdyb3VwLW1lc3NhZ2Uucm9sbFN0YXR1c2VzLicgKyB3aGljaCArICcucGVyY2VudCddID0gcGFyc2VkLnBlcmNlbnQgPz8gMVxuICAgICAgdXBkYXRlc1snZmxhZ3MuQ29DNy5ncm91cC1tZXNzYWdlLnJvbGxTdGF0dXNlcy4nICsgd2hpY2ggKyAnLmlzTWFuZXV2ZXInXSA9IHBhcnNlZC5pc01hbmV1dmVyID8/IGZhbHNlXG4gICAgICB1cGRhdGVzWydmbGFncy5Db0M3Lmdyb3VwLW1lc3NhZ2Uucm9sbFN0YXR1c2VzLicgKyB3aGljaCArICcuaXNEb2RnaW5nJ10gPSBwYXJzZWQuaXNEb2RnZSA/PyBmYWxzZVxuICAgICAgdXBkYXRlc1snZmxhZ3MuQ29DNy5ncm91cC1tZXNzYWdlLnJvbGxTdGF0dXNlcy4nICsgd2hpY2ggKyAnLmlzV2VhcG9uJ10gPSBwYXJzZWQuaXNEb2RnZSA/PyBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIC8vIFN0ZXAgMTogR00gLyAtID0gQ3JlYXRlIG1lc3NhZ2VcbiAgc3RhdGljIGFzeW5jIG5ld0dyb3VwTWVzc2FnZSAoeyByb2xsRGF0YSA9IHVuZGVmaW5lZCwgb3B0aW9ucyB9KSB7XG4gICAgaWYgKHR5cGVvZiByb2xsRGF0YSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJvbGxEYXRhID0ge31cbiAgICAgIGZvciAoY29uc3Qgd2hpY2ggaW4gb3B0aW9ucy5yb2xsU3RhdHVzZXMpIHtcbiAgICAgICAgY29uc3Qgcm9sbCA9IGF3YWl0IENvQzdHcm91cE1lc3NhZ2UucGFyc2VSb2xscyh7IHJvbGw6IG9wdGlvbnMucm9sbFN0YXR1c2VzW3doaWNoXS5yb2xsLCBxdWljazogdHJ1ZSB9KVxuICAgICAgICByb2xsRGF0YVt3aGljaF0gPSByb2xsXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgcm9sbHNCeVVzZXIgPSB7fVxuICAgIGNvbnN0IHJvbGxSZXF1aXJlc05hbWUgPSB7fVxuICAgIGZvciAoY29uc3Qgd2hpY2ggaW4gcm9sbERhdGEpIHtcbiAgICAgIGxldCBhc1VzZXJJZCA9ICcnXG4gICAgICBzd2l0Y2ggKHJvbGxEYXRhW3doaWNoXS5hdXRvUm9sbC5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChyb2xsRGF0YVt3aGljaF0uYXV0b1JvbGxbMF0gIT09IGdhbWUudXNlci5pZCkge1xuICAgICAgICAgICAgYXNVc2VySWQgPSByb2xsRGF0YVt3aGljaF0uYXV0b1JvbGxbMF1cbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICBhc1VzZXJJZCA9IGdhbWUudXNlci5pZFxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgb3B0aW9ucy5yb2xsU3RhdHVzZXNbd2hpY2hdLnJvbGxpbmcgPSBmYWxzZVxuICAgICAgICAgIGlmIChyb2xsRGF0YVt3aGljaF0uc2hvcnROYW1lID09PSAnLScpIHtcbiAgICAgICAgICAgIHJvbGxSZXF1aXJlc05hbWVbd2hpY2hdID0gcm9sbERhdGFbd2hpY2hdLnJvbGxcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGlmIChhc1VzZXJJZCAhPT0gJycpIHtcbiAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocm9sbHNCeVVzZXIsIGFzVXNlcklkKSkge1xuICAgICAgICAgIHJvbGxzQnlVc2VyW2FzVXNlcklkXSA9IHt9XG4gICAgICAgIH1cbiAgICAgICAgcm9sbHNCeVVzZXJbYXNVc2VySWRdW3doaWNoXSA9IG9wdGlvbnMucm9sbFN0YXR1c2VzW3doaWNoXS5yb2xsXG4gICAgICAgIG9wdGlvbnMucm9sbFN0YXR1c2VzW3doaWNoXS5yb2xsaW5nID0gYXNVc2VySWRcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB0ZW1wbGF0ZURhdGEgPSBPYmplY3QuYXNzaWduKHsgcm9sbERhdGEgfSwgb3B0aW9ucylcbiAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUoQ29DN0dyb3VwTWVzc2FnZS5nZXRUZW1wbGF0ZVBhdGgob3B0aW9ucy50eXBlKSwgdGVtcGxhdGVEYXRhKVxuICAgIGNvbnN0IGNoYXREYXRhID0ge1xuICAgICAgZmxhZ3M6IHtcbiAgICAgICAgQ29DNzoge1xuICAgICAgICAgICdncm91cC1tZXNzYWdlJzogb3B0aW9uc1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY29udGVudDogaHRtbFxuICAgIH1cbiAgICBzd2l0Y2ggKGNoYXREYXRhLmZsYWdzPy5Db0M3Py5bJ2dyb3VwLW1lc3NhZ2UnXT8udHlwZSkge1xuICAgICAgY2FzZSAnb3Bwb3NlZCc6XG4gICAgICAgIGNoYXREYXRhLnNwZWFrZXIgPSBPYmplY3QuYXNzaWduKGNoYXREYXRhLnNwZWFrZXIgPz8ge30sIHsgYWxpYXM6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5PcHBvc2VkUm9sbENhcmQnKSB9KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnY29tYmluZWQnOlxuICAgICAgICBjaGF0RGF0YS5zcGVha2VyID0gT2JqZWN0LmFzc2lnbihjaGF0RGF0YS5zcGVha2VyID8/IHt9LCB7IGFsaWFzOiBPYmplY3QudmFsdWVzKHJvbGxEYXRhKVswXS5hY3Rvci5uYW1lIH0pXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIGNvbnN0IG1zZyA9IGF3YWl0IENoYXRNZXNzYWdlLmNyZWF0ZShjaGF0RGF0YSlcblxuICAgIGNvbnN0IHVwZGF0ZXMgPSB7fVxuICAgIGZvciAoY29uc3Qgd2hpY2ggaW4gcm9sbFJlcXVpcmVzTmFtZSkge1xuICAgICAgYXdhaXQgQ29DN0dyb3VwTWVzc2FnZS5uYW1lUm9sbCh7IHdoaWNoLCByb2xsOiByb2xsUmVxdWlyZXNOYW1lW3doaWNoXSwgdXBkYXRlcyB9KVxuICAgIH1cbiAgICBpZiAoT2JqZWN0LmtleXModXBkYXRlcykubGVuZ3RoID4gMCkge1xuICAgICAgYXdhaXQgQ29DN0dyb3VwTWVzc2FnZS51cGRhdGVUaGVHcm91cE1lc3NhZ2UoeyBtc2csIHVwZGF0ZXMsIHJvbGxEYXRhIH0pXG4gICAgfVxuICAgIGZvciAoY29uc3QgdXNlcklkIGluIHJvbGxzQnlVc2VyKSB7XG4gICAgICBpZiAodXNlcklkICE9PSBnYW1lLnVzZXIuaWQpIHtcbiAgICAgICAgZ2FtZS5zb2NrZXQuZW1pdCgnc3lzdGVtLkNvQzcnLCB7XG4gICAgICAgICAgdHlwZTogJ2dyb3VwLW1lc3NhZ2Utcm9sbCcsXG4gICAgICAgICAgbGlzdGVuZXI6IHVzZXJJZCxcbiAgICAgICAgICBtZXNzYWdlSWQ6IG1zZy5pZCxcbiAgICAgICAgICByb2xsczogcm9sbHNCeVVzZXJbdXNlcklkXVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJvbGxzQnlVc2VyLCBnYW1lLnVzZXIuaWQpKSB7XG4gICAgICBhd2FpdCBDb0M3R3JvdXBNZXNzYWdlLnBlcmZvcm1NeVJvbGxzKHtcbiAgICAgICAgbXNnLFxuICAgICAgICByb2xsczogcm9sbHNCeVVzZXJbZ2FtZS51c2VyLmlkXVxuICAgICAgfSlcbiAgICB9XG4gICAgcmV0dXJuIG1zZ1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIGlzVXNlckFjdGl2ZSAoeyB3aGljaCwgbXNnIH0pIHtcbiAgICBpZiAobXNnLmZsYWdzPy5Db0M3Py5bJ2dyb3VwLW1lc3NhZ2UnXT8ucm9sbFN0YXR1c2VzW3doaWNoXS5yb2xsaW5nID8/IGZhbHNlKSB7XG4gICAgICBjb25zdCB1c2VyID0gZ2FtZS51c2Vycy5nZXQobXNnLmZsYWdzLkNvQzdbJ2dyb3VwLW1lc3NhZ2UnXS5yb2xsU3RhdHVzZXNbd2hpY2hdLnJvbGxpbmcpXG4gICAgICBpZiAoZ2FtZS51c2VyLmlzR00gfHwgIXVzZXIgfHwgIXVzZXIuYWN0aXZlKSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZXMgPSB7XG4gICAgICAgICAgWydmbGFncy5Db0M3Lmdyb3VwLW1lc3NhZ2Uucm9sbFN0YXR1c2VzLicgKyB3aGljaCArICcucm9sbGluZyddOiBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIGlmIChtc2cuY2FuVXNlck1vZGlmeShnYW1lLnVzZXIsICd1cGRhdGUnKSkge1xuICAgICAgICAgIGF3YWl0IENvQzdHcm91cE1lc3NhZ2UudXBkYXRlVGhlR3JvdXBNZXNzYWdlKHsgbXNnLCB1cGRhdGVzIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgZ21JZCA9IENvQzdVdGlsaXRpZXMuZ2V0QW5JZEZvckdtKClcbiAgICAgICAgICBpZiAoZ21JZCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGdhbWUuc29ja2V0LmVtaXQoJ3N5c3RlbS5Db0M3Jywge1xuICAgICAgICAgICAgICBsaXN0ZW5lcjogZ21JZCxcbiAgICAgICAgICAgICAgdHlwZTogJ2dyb3VwLW1lc3NhZ2UtdXBkYXRlJyxcbiAgICAgICAgICAgICAgbWVzc2FnZUlkOiBtc2cuaWQsXG4gICAgICAgICAgICAgIHVwZGF0ZXNcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIF9vblRvZ2dsZSAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgYnV0dG9uID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGNvbnN0IG1lc3NhZ2VJZCA9IGJ1dHRvbi5jbG9zZXN0KCdsaS5jaGF0LW1lc3NhZ2UnKT8uZGF0YXNldC5tZXNzYWdlSWRcbiAgICBjb25zdCBrZXkgPSBidXR0b24uZGF0YXNldC5rZXlcbiAgICBsZXQgdmFsdWUgPSBidXR0b24uZGF0YXNldC52YWx1ZVxuICAgIGlmIChtZXNzYWdlSWQgJiYga2V5KSB7XG4gICAgICBpZiAoYnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0LW9ubHktZ20nKSAmJiAhZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBjb25zdCBtc2cgPSBnYW1lLm1lc3NhZ2VzLmdldChtZXNzYWdlSWQpXG4gICAgICBpZiAodHlwZW9mIG1zZy5mbGFncz8uQ29DNz8uWydncm91cC1tZXNzYWdlJ10/LltrZXldICE9PSAndW5kZWZpbmVkJyAmJiBtc2cuY2FuVXNlck1vZGlmeShnYW1lLnVzZXIsICd1cGRhdGUnKSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHZhbHVlID0gIW1zZy5mbGFncy5Db0M3Wydncm91cC1tZXNzYWdlJ11ba2V5XVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVwZGF0ZXMgPSB7XG4gICAgICAgICAgWydmbGFncy5Db0M3Lmdyb3VwLW1lc3NhZ2UuJyArIGtleV06IHZhbHVlXG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICBjYXNlICdhZHZhbnRhZ2VEZWZlbmRlcic6XG4gICAgICAgICAgICB1cGRhdGVzWydmbGFncy5Db0M3Lmdyb3VwLW1lc3NhZ2UuYWR2YW50YWdlQXR0YWNrZXInXSA9ICF2YWx1ZVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlICdhZHZhbnRhZ2VBdHRhY2tlcic6XG4gICAgICAgICAgICB1cGRhdGVzWydmbGFncy5Db0M3Lmdyb3VwLW1lc3NhZ2UuYWR2YW50YWdlRGVmZW5kZXInXSA9ICF2YWx1ZVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBDb0M3R3JvdXBNZXNzYWdlLnVwZGF0ZVRoZUdyb3VwTWVzc2FnZSh7IG1zZywgdXBkYXRlcyB9KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBfb25DbGljayAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgYnV0dG9uID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGNvbnN0IGFjdGlvbiA9IGJ1dHRvbi5kYXRhc2V0LmFjdGlvblxuICAgIGNvbnN0IG1lc3NhZ2VJZCA9IGJ1dHRvbi5jbG9zZXN0KCdsaS5jaGF0LW1lc3NhZ2UnKT8uZGF0YXNldC5tZXNzYWdlSWRcbiAgICBjb25zdCB3aGljaCA9IGJ1dHRvbi5kYXRhc2V0LndoaWNoXG4gICAgaWYgKG1lc3NhZ2VJZCkge1xuICAgICAgY29uc3QgbXNnID0gZ2FtZS5tZXNzYWdlcy5nZXQobWVzc2FnZUlkKVxuICAgICAgaWYgKHR5cGVvZiBtc2cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygd2hpY2ggIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtc2cuZmxhZ3M/LkNvQzc/LlsnZ3JvdXAtbWVzc2FnZSddPy5yb2xsU3RhdHVzZXNbd2hpY2hdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGNvbnN0IGFjdG9yID0gYXdhaXQgZnJvbVV1aWQobXNnLmZsYWdzLkNvQzdbJ2dyb3VwLW1lc3NhZ2UnXS5yb2xsU3RhdHVzZXNbd2hpY2hdLnJvbGwuc3BsaXQoJyMnKVswXSlcbiAgICAgICAgICBpZiAoIWFjdG9yIHx8ICFhY3Rvci5jYW5Vc2VyTW9kaWZ5KGdhbWUudXNlciwgJ3VwZGF0ZScpKSB7XG4gICAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKCdDb0M3LkVycm9yTm9BY3RvclBlcm1pc3Npb24nLCB7IGxvY2FsaXplOiB0cnVlIH0pXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgJ2ltcGF0aWVudC1yb2xsJzpcbiAgICAgICAgICAgICAgQ29DN0dyb3VwTWVzc2FnZS5pc1VzZXJBY3RpdmUoe1xuICAgICAgICAgICAgICAgIHdoaWNoLFxuICAgICAgICAgICAgICAgIG1zZ1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSAnbm9ybWFsLXJvbGwnOlxuICAgICAgICAgICAgICBDb0M3R3JvdXBNZXNzYWdlLnBlcmZvcm1NeVJvbGxzKHtcbiAgICAgICAgICAgICAgICBtc2csXG4gICAgICAgICAgICAgICAgcm9sbHM6IHsgW3doaWNoXTogbXNnLmZsYWdzLkNvQzc/LlsnZ3JvdXAtbWVzc2FnZSddLnJvbGxTdGF0dXNlc1t3aGljaF0ucm9sbCB9XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlICd1c2UtbHVjayc6XG4gICAgICAgICAgICAgIENvQzdHcm91cE1lc3NhZ2Uuc3BlbmRNeUx1Y2soe1xuICAgICAgICAgICAgICAgIHdoaWNoLFxuICAgICAgICAgICAgICAgIGluZGV4OiBidXR0b24uZGF0YXNldC5pbmRleCxcbiAgICAgICAgICAgICAgICBsdWNrQW1vdW50OiBidXR0b24uZGF0YXNldC5sdWNrQW1vdW50LFxuICAgICAgICAgICAgICAgIG1zZ1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSAncmVtb3ZlLXJvbGwnOlxuICAgICAgICAgICAgICBDb0M3R3JvdXBNZXNzYWdlLnJlbW92ZVJvbGwoe1xuICAgICAgICAgICAgICAgIHdoaWNoLFxuICAgICAgICAgICAgICAgIG1zZ1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSAncHVzaCc6XG4gICAgICAgICAgICAgIENvQzdHcm91cE1lc3NhZ2UucHVzaE15Um9sbCh7XG4gICAgICAgICAgICAgICAgd2hpY2gsXG4gICAgICAgICAgICAgICAgbXNnXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBtc2cuZmxhZ3M/LkNvQzc/LlsnZ3JvdXAtbWVzc2FnZSddPy5yb2xsU3RhdHVzZXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgbGV0IG9rYXkgPSBmYWxzZVxuICAgICAgICAgIGZvciAoY29uc3Qgd2hpY2ggaW4gbXNnLmZsYWdzLkNvQzdbJ2dyb3VwLW1lc3NhZ2UnXS5yb2xsU3RhdHVzZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGFjdG9yID0gYXdhaXQgZnJvbVV1aWQobXNnLmZsYWdzLkNvQzdbJ2dyb3VwLW1lc3NhZ2UnXS5yb2xsU3RhdHVzZXNbd2hpY2hdLnJvbGwuc3BsaXQoJyMnKVswXSlcbiAgICAgICAgICAgIGlmIChhY3Rvci5jYW5Vc2VyTW9kaWZ5KGdhbWUudXNlciwgJ3VwZGF0ZScpKSB7XG4gICAgICAgICAgICAgIG9rYXkgPSB0cnVlXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghb2theSkge1xuICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcignQ29DNy5FcnJvck5vQWN0b3JQZXJtaXNzaW9uJywgeyBsb2NhbGl6ZTogdHJ1ZSB9KVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICAgICAgICBjYXNlICdyb2xsLW9uY2UnOlxuICAgICAgICAgICAgICBpZiAobXNnLmZsYWdzLkNvQzdbJ2dyb3VwLW1lc3NhZ2UnXS50eXBlID09PSAnY29tYmluZWQnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlcyA9IHt9XG4gICAgICAgICAgICAgICAgQ29DN0dyb3VwTWVzc2FnZS5wZXJmb3JtQ29tYmluZWRSb2xsKHsgbXNnLCB1cGRhdGVzIH0pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgJ3RvZ2dsZSc6XG4gICAgICAgICAgICAgIENvQzdHcm91cE1lc3NhZ2UuX29uVG9nZ2xlKGV2ZW50KVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyByZW5kZXJDaGF0TWVzc2FnZSAoYXBwLCBodG1sLCBkYXRhKSB7XG4gICAgY29uc3QgY2FuTW9kaWZ5ID0ge1xuICAgICAgZ206IGdhbWUudXNlci5pc0dNXG4gICAgfVxuICAgIGZvciAoY29uc3Qgd2hpY2ggaW4gYXBwLmZsYWdzPy5Db0M3Py5bJ2dyb3VwLW1lc3NhZ2UnXT8ucm9sbFN0YXR1c2VzKSB7XG4gICAgICBjb25zdCBhY3RvciA9IGF3YWl0IGZyb21VdWlkKGFwcC5mbGFncy5Db0M3Wydncm91cC1tZXNzYWdlJ10ucm9sbFN0YXR1c2VzW3doaWNoXS5yb2xsLnNwbGl0KCcjJylbMF0pXG4gICAgICBjYW5Nb2RpZnlbd2hpY2hdID0gYWN0b3I/LmNhblVzZXJNb2RpZnkoZ2FtZS51c2VyLCAndXBkYXRlJykgPz8gZmFsc2VcbiAgICB9XG4gICAgY2FuTW9kaWZ5LmFueSA9IE9iamVjdC52YWx1ZXMoY2FuTW9kaWZ5KS5maWx0ZXIoYiA9PiBiKS5sZW5ndGggPiAwXG4gICAgZm9yIChjb25zdCBrZXkgaW4gY2FuTW9kaWZ5KSB7XG4gICAgICBpZiAoIWNhbk1vZGlmeVtrZXldKSB7XG4gICAgICAgIGh0bWwuZmluZCgnLnZpc2libGUtb25seS0nICsga2V5KS5yZW1vdmUoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaHRtbC5maW5kKCcuaGlkZGVuLW9ubHktJyArIGtleSkucmVtb3ZlKClcbiAgICAgIH1cbiAgICB9XG4gICAgaHRtbC5vbignY2xpY2snLCAnLnJvbGwtY2FyZC12MiBidXR0b246bm90KC50b2dnbGUtc3dpdGNoKScsIENvQzdHcm91cE1lc3NhZ2UuX29uQ2xpY2suYmluZCh0aGlzKSlcbiAgICBodG1sLm9uKCdjbGljaycsICcucm9sbC1jYXJkLXYyIGE6bm90KC50b2dnbGUtbGluayknLCBDb0M3R3JvdXBNZXNzYWdlLl9vbkNsaWNrLmJpbmQodGhpcykpXG4gICAgaHRtbC5vbignY2xpY2snLCAnLnJvbGwtY2FyZC12MiBidXR0b24udG9nZ2xlLXN3aXRjaCcsIENvQzdHcm91cE1lc3NhZ2UuX29uVG9nZ2xlLmJpbmQodGhpcykpXG4gICAgaHRtbC5vbignY2xpY2snLCAnLnJvbGwtY2FyZC12MiBhLnRvZ2dsZS1saW5rJywgQ29DN0dyb3VwTWVzc2FnZS5fb25Ub2dnbGUuYmluZCh0aGlzKSlcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBnZXRBY3RvciAoaWRlbnRpZmllcikge1xuICAgIGlmIChpZGVudGlmaWVyLm1hdGNoKC9eYVxcLi8pKSB7XG4gICAgICByZXR1cm4gKChhd2FpdCBnYW1lLnN5c3RlbS5hcGkuY29jaWQuZnJvbUNvQ0lEKGlkZW50aWZpZXIpKT8uWzBdKSA/PyBudWxsXG4gICAgfVxuICAgIGlmIChpZGVudGlmaWVyLmluZGV4T2YoJy4nKSA+IC0xKSB7XG4gICAgICByZXR1cm4gYXdhaXQgZnJvbVV1aWQoaWRlbnRpZmllcilcbiAgICB9XG4gICAgcmV0dXJuIGdhbWUuYWN0b3JzLmdldChpZGVudGlmaWVyKSA/PyBudWxsXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgcGFyc2VSb2xscyAoeyByb2xsLCBxdWljayA9IHRydWUsIGRlZmF1bHRVdWlkID0gJycgfSkge1xuICAgIGNvbnN0IG1hdGNoID0gcm9sbC5tYXRjaCgvXig/PGE+W14jXSsjKT8oPzx0PmF0dHJpYnV0ZXxjaGFyYWN0ZXJpc3RpY3xpdGVtfHNraWxsKSMoPzxrPlteI10rKSgjKD88bT4uKikpPyQvKVxuICAgIGlmIChtYXRjaCkge1xuICAgICAgY29uc3QgbW9kaWZpZXJzID0gKG1hdGNoLmdyb3Vwcy5tID8/ICcnKS50b0xvd2VyQ2FzZSgpLnNwbGl0KCcjJylcbiAgICAgIGNvbnN0IGJvbnVzID0gcGFyc2VJbnQobW9kaWZpZXJzLmZpbmQobSA9PiBtLm1hdGNoKC9eWystXVxcZCskLykpID8/IDAsIDEwKVxuICAgICAgY29uc3QgZGlmZmljdWx0eSA9IG1vZGlmaWVycy5maW5kKG0gPT4gbS5tYXRjaCgvXlxcZCskLykpXG4gICAgICBjb25zdCBwdXNoaW5nID0gbW9kaWZpZXJzLmZpbHRlcihtID0+IG0gPT09ICdwJykubGVuZ3RoID4gMFxuICAgICAgLy8gY29uc3QgYXR0YWNrZXIgPSBtb2RpZmllcnMuZmlsdGVyKG0gPT4gbSA9PT0gJ3gnKS5sZW5ndGggPiAwIC8vIE5ZSVxuICAgICAgLy8gY29uc3QgZGVmZW5kZXIgPSBtb2RpZmllcnMuZmlsdGVyKG0gPT4gbSA9PT0gJ28nKS5sZW5ndGggPiAwIC8vIE5ZSVxuICAgICAgY29uc3Qgcm9sbERhdGEgPSB7XG4gICAgICAgIHR5cGU6IG1hdGNoLmdyb3Vwcy50LFxuICAgICAgICBrZXk6IG1hdGNoLmdyb3Vwcy5rLFxuICAgICAgICBib251cyxcbiAgICAgICAgZGlmZmljdWx0eTogKChkaWZmaWN1bHR5ID8/ICcnKS50b1N0cmluZygpID09PSAnMCcgPyBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnVua25vd24gOiAoZGlmZmljdWx0eSA/IHBhcnNlSW50KGRpZmZpY3VsdHksIDEwKSA6IChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdkZWZhdWx0Q2hlY2tEaWZmaWN1bHR5JykgPT09ICd1bmtub3duJyA/IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwudW5rbm93biA6IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhcikpKSxcbiAgICAgICAgcHVzaGluZ1xuICAgICAgfVxuICAgICAgaWYgKCFtYXRjaC5ncm91cHMuYSAmJiBkZWZhdWx0VXVpZCAmJiBkZWZhdWx0VXVpZCAhPT0gJycpIHtcbiAgICAgICAgbWF0Y2guZ3JvdXBzLmEgPSBkZWZhdWx0VXVpZCArICcjJ1xuICAgICAgfVxuICAgICAgaWYgKG1hdGNoLmdyb3Vwcy5hKSB7XG4gICAgICAgIGNvbnN0IGFjdG9yID0gYXdhaXQgQ29DN0dyb3VwTWVzc2FnZS5nZXRBY3RvcihtYXRjaC5ncm91cHMuYS5zdWJzdHIoMCwgbWF0Y2guZ3JvdXBzLmEubGVuZ3RoIC0gMSkpXG4gICAgICAgIGlmICghYWN0b3IpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9XG4gICAgICAgIHJvbGxEYXRhLmFjdG9yID0gYWN0b3JcbiAgICAgICAgcm9sbERhdGEuYXV0b1JvbGwgPSBnYW1lLnVzZXJzLmZpbHRlcih1ID0+ICF1LmlzR00gJiYgcm9sbERhdGEuYWN0b3IuY2FuVXNlck1vZGlmeSh1LCAndXBkYXRlJykpLm1hcCh1ID0+IHsgcmV0dXJuIHsgaWQ6IHUuaWQsIGFjdGl2ZTogdS5hY3RpdmUgfSB9KVxuICAgICAgICBpZiAocm9sbERhdGEuYXV0b1JvbGwubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJvbGxEYXRhLmF1dG9Sb2xsID0gcm9sbERhdGEuYXV0b1JvbGwuZmlsdGVyKGQgPT4gZC5hY3RpdmUpLm1hcChkID0+IGQuaWQpXG4gICAgICAgICAgaWYgKHJvbGxEYXRhLmF1dG9Sb2xsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcm9sbERhdGEuYXV0b1JvbGwgPSBbJ3ByZXZlbnQnLCAncm9sbCddXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBhY3RvciA9IGF3YWl0IEFjdG9yUGlja2VyRGlhbG9nLmNyZWF0ZSgpXG4gICAgICAgIGlmICghYWN0b3IpIHtcbiAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLndhcm4oJ0NvQzcuV2Fybk5vQ29udHJvbGxlZEFjdG9yJywgeyBsb2NhbGl6ZTogdHJ1ZSB9KVxuICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cbiAgICAgICAgcm9sbERhdGEuYWN0b3IgPSBhY3RvclxuICAgICAgICBpZiAoIWdhbWUudXNlci5pc0dNKSB7XG4gICAgICAgICAgcm9sbERhdGEuYXV0b1JvbGwgPSBbZ2FtZS51c2VyLmlkXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJvbGxEYXRhLmF1dG9Sb2xsID0gZ2FtZS51c2Vycy5maWx0ZXIodSA9PiAhdS5pc0dNICYmIHJvbGxEYXRhLmFjdG9yLmNhblVzZXJNb2RpZnkodSwgJ3VwZGF0ZScpKS5tYXAodSA9PiB7IHJldHVybiB7IGlkOiB1LmlkLCBhY3RpdmU6IHUuYWN0aXZlIH0gfSlcbiAgICAgICAgICBpZiAocm9sbERhdGEuYXV0b1JvbGwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcm9sbERhdGEuYXV0b1JvbGwgPSByb2xsRGF0YS5hdXRvUm9sbC5maWx0ZXIoZCA9PiBkLmFjdGl2ZSkubWFwKGQgPT4gZC5pZClcbiAgICAgICAgICAgIGlmIChyb2xsRGF0YS5hdXRvUm9sbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgcm9sbERhdGEuYXV0b1JvbGwgPSBbJ3ByZXZlbnQnLCAncm9sbCddXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByb2xsRGF0YS5yb2xsID0gcm9sbERhdGEuYWN0b3IudXVpZCArICcjJyArIHJvbGxEYXRhLnR5cGUgKyAnIycgKyByb2xsRGF0YS5rZXkgKyAocm9sbERhdGEuYm9udXMgPCAwID8gJyMnICsgcm9sbERhdGEuYm9udXMgOiAocm9sbERhdGEuYm9udXMgPiAwID8gJyMrJyArIHJvbGxEYXRhLmJvbnVzIDogJycpKSArIChkaWZmaWN1bHR5ID09PSAwID8gJyMwJyA6IChkaWZmaWN1bHR5ID8gJyMnICsgcGFyc2VJbnQoZGlmZmljdWx0eSwgMTApIDogJycpKVxuICAgICAgcm9sbERhdGEucG9ydHJhaXQgPSAocm9sbERhdGEuYWN0b3IgaW5zdGFuY2VvZiBUb2tlbkRvY3VtZW50ID8gcm9sbERhdGEuYWN0b3IudGV4dHVyZS5zcmMgOiByb2xsRGF0YS5hY3Rvci5wb3J0cmFpdClcbiAgICAgIHJvbGxEYXRhLnNob3J0TmFtZSA9ICctJ1xuICAgICAgcm9sbERhdGEuZnVsbE5hbWUgPSAnLSdcbiAgICAgIHN3aXRjaCAocm9sbERhdGEudHlwZSkge1xuICAgICAgICBjYXNlICdjaGFyYWN0ZXJpc3RpYyc6XG4gICAgICAgICAgcm9sbERhdGEuc2hvcnROYW1lID0gQ29DN1V0aWxpdGllcy5nZXRDaGFyYWN0ZXJpc3RpY05hbWVzKHJvbGxEYXRhLmtleSk/LnNob3J0ID8/ICctJ1xuICAgICAgICAgIHJvbGxEYXRhLmZ1bGxOYW1lID0gQ29DN1V0aWxpdGllcy5nZXRDaGFyYWN0ZXJpc3RpY05hbWVzKHJvbGxEYXRhLmtleSk/LmxhYmVsID8/ICctJ1xuICAgICAgICAgIHJvbGxEYXRhLnBlcmNlbnQgPSAocm9sbERhdGEuYWN0b3IgaW5zdGFuY2VvZiBUb2tlbkRvY3VtZW50ID8gcm9sbERhdGEuYWN0b3IuYWN0b3IgOiByb2xsRGF0YS5hY3Rvcikuc3lzdGVtPy5jaGFyYWN0ZXJpc3RpY3Nbcm9sbERhdGEua2V5XT8udmFsdWUgPz8gMVxuICAgICAgICAgIGlmIChyb2xsRGF0YS5zaG9ydE5hbWUgPT09ICctJykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnYXR0cmlidXRlJzpcbiAgICAgICAgICBzd2l0Y2ggKHJvbGxEYXRhLmtleSkge1xuICAgICAgICAgICAgY2FzZSAnbGNrJzpcbiAgICAgICAgICAgICAgcm9sbERhdGEuc2hvcnROYW1lID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lkx1Y2snKVxuICAgICAgICAgICAgICByb2xsRGF0YS5mdWxsTmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5MdWNrJylcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgJ3Nhbic6XG4gICAgICAgICAgICAgIHJvbGxEYXRhLnNob3J0TmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5TQU4nKVxuICAgICAgICAgICAgICByb2xsRGF0YS5mdWxsTmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5TYW5pdHknKVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgICB9XG4gICAgICAgICAgcm9sbERhdGEucGVyY2VudCA9IChyb2xsRGF0YS5hY3RvciBpbnN0YW5jZW9mIFRva2VuRG9jdW1lbnQgPyByb2xsRGF0YS5hY3Rvci5hY3RvciA6IHJvbGxEYXRhLmFjdG9yKS5zeXN0ZW0/LmF0dHJpYnNbcm9sbERhdGEua2V5XT8udmFsdWUgPz8gMVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ3NraWxsJzpcbiAgICAgICAgICBpZiAoIXF1aWNrKSB7XG4gICAgICAgICAgICBjb25zdCBza2lsbHMgPSBhd2FpdCAocm9sbERhdGEuYWN0b3IgaW5zdGFuY2VvZiBUb2tlbkRvY3VtZW50ID8gcm9sbERhdGEuYWN0b3IuYWN0b3IgOiByb2xsRGF0YS5hY3RvcikuZ2V0SXRlbU9yQWRkKHJvbGxEYXRhLmtleSwgJ3NraWxsJylcbiAgICAgICAgICAgIGlmIChza2lsbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHJvbGxEYXRhLnNraWxsID0gc2tpbGxzWzBdXG4gICAgICAgICAgICAgIHJvbGxEYXRhLnNob3J0TmFtZSA9IHNraWxsc1swXS5zaG9ydE5hbWVcbiAgICAgICAgICAgICAgcm9sbERhdGEuZnVsbE5hbWUgPSBza2lsbHNbMF0uc2hvcnROYW1lXG4gICAgICAgICAgICAgIHJvbGxEYXRhLnB1c2hhYmxlID0gKHNraWxsc1swXS5zeXN0ZW0ucHJvcGVydGllcz8ucHVzaCA/PyBmYWxzZSlcbiAgICAgICAgICAgICAgcm9sbERhdGEucGVyY2VudCA9IHNraWxsc1swXS52YWx1ZVxuICAgICAgICAgICAgICByb2xsRGF0YS5pc01hbmV1dmVyID0gc2tpbGxzWzBdLmlzRG9kZ2VcbiAgICAgICAgICAgICAgcm9sbERhdGEuaXNEb2RnZSA9IHNraWxsc1swXS5pc0RvZGdlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2l0ZW0nOlxuICAgICAgICAgIGlmICghcXVpY2spIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gYXdhaXQgKHJvbGxEYXRhLmFjdG9yIGluc3RhbmNlb2YgVG9rZW5Eb2N1bWVudCA/IHJvbGxEYXRhLmFjdG9yLmFjdG9yIDogcm9sbERhdGEuYWN0b3IpLmdldEl0ZW1PckFkZChyb2xsRGF0YS5rZXksICd3ZWFwb24nKVxuICAgICAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgICByb2xsRGF0YS5pdGVtID0gaXRlbXNbMF1cbiAgICAgICAgICAgICAgcm9sbERhdGEuc2hvcnROYW1lID0gaXRlbXNbMF0uc2hvcnROYW1lXG4gICAgICAgICAgICAgIHJvbGxEYXRhLmZ1bGxOYW1lID0gaXRlbXNbMF0uc2hvcnROYW1lXG4gICAgICAgICAgICAgIHJvbGxEYXRhLmlzTWFuZXV2ZXIgPSBpdGVtc1swXS5zeXN0ZW0ucHJvcGVydGllcz8ubW52ciA/PyBmYWxzZVxuICAgICAgICAgICAgICByb2xsRGF0YS5pc1dlYXBvbiA9IHRydWVcbiAgICAgICAgICAgICAgY29uc3Qgc2tpbGxJZCA9IGl0ZW1zWzBdLnN5c3RlbS5za2lsbFtpdGVtc1swXS51c2VzQWx0ZXJuYXRpdmVTa2lsbCA/ICdhbHRlcm5hdGl2JyA6ICdtYWluJ10uaWRcbiAgICAgICAgICAgICAgaWYgKHNraWxsSWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBza2lsbCA9IChyb2xsRGF0YS5hY3RvciBpbnN0YW5jZW9mIFRva2VuRG9jdW1lbnQgPyByb2xsRGF0YS5hY3Rvci5hY3RvciA6IHJvbGxEYXRhLmFjdG9yKS5pdGVtcy5maW5kKGQgPT4gZC5pZCA9PT0gc2tpbGxJZClcbiAgICAgICAgICAgICAgICByb2xsRGF0YS50YWdzID0gW3NraWxsLm5hbWVdXG4gICAgICAgICAgICAgICAgcm9sbERhdGEucGVyY2VudCA9IHNraWxsLnZhbHVlXG4gICAgICAgICAgICAgICAgcm9sbERhdGEucHVzaGFibGUgPSAoc2tpbGwuc3lzdGVtLnByb3BlcnRpZXM/LnB1c2ggPz8gZmFsc2UpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIHJldHVybiByb2xsRGF0YVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgc3RhdGljIGdldFRlbXBsYXRlUGF0aCAodHlwZSkge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnb3Bwb3NlZCc6XG4gICAgICAgIHJldHVybiAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9jaGF0L21lc3NhZ2VzL29wcG9zZWQuaGJzJ1xuICAgICAgY2FzZSAnY29tYmluZWRhbGwnOlxuICAgICAgY2FzZSAnY29tYmluZWRhbnknOlxuICAgICAgY2FzZSAnY29tYmluZWQnOlxuICAgICAgICByZXR1cm4gJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvY2hhdC9tZXNzYWdlcy9jb21iaW5lZC5oYnMnXG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY3JlYXRlR3JvdXBNZXNzYWdlIChvcHRpb25zKSB7XG4gICAgLy8gVE9ETzogQWRkIGFkZGl0aW9uYWwgcm9sbHNcbiAgICAvLyBUT0RPOiBQaHlzaWNhbCBIdW1hbiBMaW1pdHNcbiAgICBpZiAoIUNvQzdHcm91cE1lc3NhZ2UuZ2V0VGVtcGxhdGVQYXRoKG9wdGlvbnMudHlwZSkpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgbGV0IGNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgdHlwZTogJycsXG4gICAgICBkZW55UHVzaDogZmFsc2UsXG4gICAgICBzaG93Q29tcGxldGVkUm9sbHM6IHRydWUsXG4gICAgICBhbGxSb2xsc0NvbXBsZXRlZDogZmFsc2UsXG4gICAgICBpc0NvbWJhdDogZmFsc2UsXG4gICAgICBpc0VkaXRhYmxlOiB0cnVlLFxuICAgICAgcm9sbFN0YXR1c2VzOiB7fSxcbiAgICAgIHJvbGxPcmRlcjogW11cbiAgICB9LCBvcHRpb25zKVxuXG4gICAgc3dpdGNoIChjb25maWcudHlwZSkge1xuICAgICAgY2FzZSAnb3Bwb3NlZCc6XG4gICAgICAgIGNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgIGRlbnlQdXNoOiB0cnVlLFxuICAgICAgICAgIGlzVGllOiBmYWxzZSxcbiAgICAgICAgICBuZWVkc1RpZUJyZWFrZXI6IGZhbHNlLFxuICAgICAgICAgIGFkdmFudGFnZUF0dGFja2VyOiBmYWxzZSxcbiAgICAgICAgICBhZHZhbnRhZ2VEZWZlbmRlcjogZmFsc2UsXG4gICAgICAgICAgZGVmZW5kZXJJc0RvZGdpbmc6IGZhbHNlLFxuICAgICAgICAgIHdpbm5lclJvbGxzRGFtYWdlOiBmYWxzZVxuICAgICAgICB9LCBjb25maWcpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdjb21iaW5lZGFsbCc6XG4gICAgICBjYXNlICdjb21iaW5lZGFueSc6XG4gICAgICBjYXNlICdjb21iaW5lZCc6XG4gICAgICAgIGNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgIGNvbWJpbmVkOiAoY29uZmlnLnR5cGUgPT09ICdjb21iaW5lZGFsbCcgPyAnYWxsJyA6IChjb25maWcudHlwZSA9PT0gJ2NvbWJpbmVkYW55JyA/ICdhbnknIDogJycpKSxcbiAgICAgICAgICBhY3RvclV1aWQ6ICcnLFxuICAgICAgICAgIGlzU3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgaXNGYWlsdXJlOiBmYWxzZSxcbiAgICAgICAgICB3YXNQdXNoZWQ6IGZhbHNlXG4gICAgICAgIH0sIGNvbmZpZylcbiAgICAgICAgY29uZmlnLnR5cGUgPSAnY29tYmluZWQnXG4gICAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgY29uc3Qgcm9sbERhdGEgPSB7fVxuICAgIGxldCBjb3VudCA9IDBcbiAgICBmb3IgKGNvbnN0IG9mZnNldCBpbiBvcHRpb25zLnJvbGxSZXF1aXNpdGVzKSB7XG4gICAgICBjb25zdCB3aGljaCA9ICdyJyArIG9mZnNldFxuICAgICAgY29uc3Qgcm9sbCA9IGF3YWl0IENvQzdHcm91cE1lc3NhZ2UucGFyc2VSb2xscyh7IHJvbGw6IG9wdGlvbnMucm9sbFJlcXVpc2l0ZXNbb2Zmc2V0XSwgcXVpY2s6IHRydWUsIGRlZmF1bHRVdWlkOiBjb25maWcuYWN0b3JVdWlkID8/ICcnIH0pXG4gICAgICBpZiAoIXJvbGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgIH1cbiAgICAgIGlmIChjb25maWcudHlwZSA9PT0gJ2NvbWJpbmVkJykge1xuICAgICAgICBpZiAoY29uZmlnLmFjdG9yVXVpZCA9PT0gJycgfHwgY29uZmlnLmFjdG9yVXVpZCA9PT0gcm9sbC5hY3Rvci51dWlkKSB7XG4gICAgICAgICAgY29uZmlnLmFjdG9yVXVpZCA9IHJvbGwuYWN0b3IudXVpZFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoJ0NvQzcuRXJyb3JDb21iaW5lZFJvbGxzUmVxdWlyZVNpbmdsZUFjdG9yJywgeyBsb2NhbGl6ZTogdHJ1ZSB9KVxuICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJvbGxEYXRhW3doaWNoXSA9IHJvbGxcbiAgICAgIGNvbmZpZy5yb2xsU3RhdHVzZXNbd2hpY2hdID0ge1xuICAgICAgICByb2xsOiByb2xsLnJvbGwsXG4gICAgICAgIHJvbGxhYmxlOiAoY29uZmlnLnR5cGUgIT09ICdjb21iaW5lZCcpLFxuICAgICAgICByb2xsaW5nOiBmYWxzZSxcbiAgICAgICAgc2hvcnROYW1lOiByb2xsLnNob3J0TmFtZSxcbiAgICAgICAgZnVsbE5hbWU6IHJvbGwuZnVsbE5hbWUsXG4gICAgICAgIHBlcmNlbnQ6IHJvbGwucGVyY2VudCxcbiAgICAgICAgdGFnczogW10sXG4gICAgICAgIGlzTWFuZXV2ZXI6IGZhbHNlLFxuICAgICAgICBpc0RvZGdpbmc6IGZhbHNlLFxuICAgICAgICBpc1dlYXBvbjogZmFsc2VcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoY29uZmlnLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnb3Bwb3NlZCc6XG4gICAgICAgICAgY29uZmlnLnJvbGxTdGF0dXNlc1t3aGljaF0gPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgIGlzQXR0YWNrZXI6IGNvdW50ID09PSAwLCAvLyBDdXJyZW50bHkgb25seSAxdjEgYXR0YWNrZXIgZmlyc3RcbiAgICAgICAgICAgIGlzV2lubmVyOiBmYWxzZSxcbiAgICAgICAgICAgIGlzVGllOiBmYWxzZVxuICAgICAgICAgIH0sIGNvbmZpZy5yb2xsU3RhdHVzZXNbd2hpY2hdKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2NvbWJpbmVkJzpcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgY29uZmlnLnJvbGxPcmRlci5wdXNoKHdoaWNoKVxuICAgICAgY291bnQrK1xuICAgIH1cbiAgICBpZiAoY29uZmlnLnR5cGUgPT09ICdvcHBvc2VkJyAmJiBPYmplY3Qua2V5cyhyb2xsRGF0YSkubGVuZ3RoICE9PSAyKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKCdDb0M3LkVycm9yT3Bwb3NlZFJvbGxzTGltaXRlZFRvVHdvQWN0b3JzJywgeyBsb2NhbGl6ZTogdHJ1ZSB9KVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gICAgZGVsZXRlIGNvbmZpZy5yb2xsUmVxdWlzaXRlc1xuICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgcmV0dXJuIENvQzdHcm91cE1lc3NhZ2UubmV3R3JvdXBNZXNzYWdlKHsgcm9sbERhdGEsIG9wdGlvbnM6IGNvbmZpZyB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBnbUlkID0gQ29DN1V0aWxpdGllcy5nZXRBbklkRm9yR20oKVxuICAgICAgaWYgKGdtSWQgPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIEVycm9yIG1lc3NhZ2Ugc2hvd24gaW4gQ29DN1V0aWxpdGllcy5nZXRBbklkRm9yR20oKVxuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuICAgICAgZ2FtZS5zb2NrZXQuZW1pdCgnc3lzdGVtLkNvQzcnLCB7IHR5cGU6ICdncm91cC1tZXNzYWdlLW5ldycsIGxpc3RlbmVyOiBnbUlkLCBvcHRpb25zOiBjb25maWcgfSlcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG59XG4iLCIvKiBnbG9iYWwgQ2hhdE1lc3NhZ2UsIGdhbWUgKi9cbmltcG9ydCB7IGNoYXRIZWxwZXIgfSBmcm9tICcuL2hlbHBlci5qcydcblxuZXhwb3J0IGNsYXNzIENoYXRDYXJkQWN0b3Ige1xuICBjb25zdHJ1Y3RvciAoYWN0b3JLZXkgPSBudWxsLCBmYXN0Rm9yd2FyZCA9IGZhbHNlKSB7XG4gICAgdGhpcy5hY3RvcktleSA9IGFjdG9yS2V5XG4gICAgdGhpcy5mYXN0Rm9yd2FyZCA9IGZhc3RGb3J3YXJkXG4gIH1cblxuICBnZXQgZGlzcGxheUFjdG9yT25DYXJkICgpIHtcbiAgICByZXR1cm4gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnZGlzcGxheUFjdG9yT25DYXJkJylcbiAgfVxuXG4gIGdldCBpc0JsaW5kICgpIHtcbiAgICBpZiAoIXRoaXMucm9sbE1vZGUpIHJldHVybiBudWxsXG4gICAgaWYgKHVuZGVmaW5lZCA9PT0gdGhpcy5faXNCbGluZCkge1xuICAgICAgdGhpcy5faXNCbGluZCA9IHRoaXMucm9sbE1vZGUgPT09ICdibGluZHJvbGwnXG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9pc0JsaW5kXG4gIH1cblxuICBzZXQgaXNCbGluZCAoeCkge1xuICAgIHRoaXMuX2lzQmxpbmQgPSB4XG4gIH1cblxuICBnZXQgcm9sbE1vZGUgKCkge1xuICAgIGlmICghdGhpcy5fcm9sbE1vZGUpIHRoaXMuX3JvbGxNb2RlID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ2NvcmUnLCAncm9sbE1vZGUnKVxuICAgIHJldHVybiB0aGlzLl9yb2xsTW9kZVxuICB9XG5cbiAgc2V0IHJvbGxNb2RlICh4KSB7XG4gICAgdGhpcy5fcm9sbE1vZGUgPSB4XG4gIH1cblxuICBnZXQgYWN0b3IgKCkge1xuICAgIGlmICghdGhpcy5hY3RvcktleSkgcmV0dXJuIG51bGxcbiAgICByZXR1cm4gY2hhdEhlbHBlci5nZXRBY3RvckZyb21LZXkodGhpcy5hY3RvcktleSkgLy8gUkVGQUNUT1JJTkcgKDIpXG4gIH1cblxuICBnZXQgdG9rZW4gKCkge1xuICAgIGlmICghdGhpcy5hY3RvcikgcmV0dXJuIG51bGxcbiAgICByZXR1cm4gY2hhdEhlbHBlci5nZXRUb2tlbkZyb21LZXkodGhpcy5hY3RvcktleSlcbiAgfVxuXG4gIGdldCBpdGVtICgpIHtcbiAgICBpZiAoIXRoaXMuaXRlbUlkKSByZXR1cm4gbnVsbFxuICAgIHJldHVybiB0aGlzLmFjdG9yLml0ZW1zLmdldCh0aGlzLml0ZW1JZClcbiAgfVxuXG4gIGdldCB3ZWFwb24gKCkge1xuICAgIHJldHVybiB0aGlzLml0ZW1cbiAgfVxuXG4gIGdldCB0YXJnZXRlZFRva2VucyAoKSB7XG4gICAgcmV0dXJuIFsuLi5nYW1lLnVzZXIudGFyZ2V0c11cbiAgfVxuXG4gIGdldCB0YXJnZXQgKCkge1xuICAgIGlmICh0aGlzLnRhcmdldFRva2VuKSByZXR1cm4gdGhpcy50YXJnZXRUb2tlblxuICAgIHJldHVybiB0aGlzLnRhcmdldEFjdG9yXG4gIH1cblxuICAvKipcbiAgICogSWYgYSB0YXJnZXRLZXkgd2FzIHByb3ZpZGVkIHRyeSB0byBmaW5kIGEgdG9rZW4gd2l0aCB0aGF0IGtleSBhbmQgdXNlIGl0LlxuICAgKiBJZiBub3QgdGFyZ2V0S2V5IHByb3ZpZGVkIHJldHVybiB0aGUgZmlyc3QgdGFyZ2V0LlxuICAgKi9cbiAgZ2V0IHRhcmdldFRva2VuICgpIHtcbiAgICBpZiAoIXRoaXMuX3RhcmdldFRva2VuKSB7XG4gICAgICBpZiAodGhpcy5fdGFyZ2V0S2V5KSB7XG4gICAgICAgIHRoaXMuX3RhcmdldFRva2VuID0gY2hhdEhlbHBlci5nZXRUb2tlbkZyb21LZXkodGhpcy5fdGFyZ2V0S2V5KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0VG9rZW4gPSB0aGlzLnRhcmdldGVkVG9rZW5zLnBvcCgpXG4gICAgICAgIGlmICh0aGlzLl90YXJnZXRUb2tlbikge1xuICAgICAgICAgIHRoaXMuX3RhcmdldEtleSA9IGAke3RoaXMuX3RhcmdldFRva2VuLnNjZW5lLmlkfS4ke3RoaXMuX3RhcmdldFRva2VuLmlkfWBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBSRUZBQ1RPUklORyAoMilcbiAgICAgICAgICB0aGlzLl90YXJnZXRUb2tlbiA9IG51bGxcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fdGFyZ2V0VG9rZW5cbiAgfVxuXG4gIGdldCB0YXJnZXRBY3RvciAoKSB7XG4gICAgaWYgKCF0aGlzLl90YXJnZXRBY3Rvcikge1xuICAgICAgaWYgKHRoaXMudGFyZ2V0VG9rZW4pIHRoaXMuX3RhcmdldEFjdG9yID0gdGhpcy50YXJnZXRUb2tlbi5hY3RvclxuICAgICAgZWxzZSB0aGlzLl90YXJnZXRBY3RvciA9IGNoYXRIZWxwZXIuZ2V0QWN0b3JGcm9tS2V5KHRoaXMuX3RhcmdldEtleSkgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgfVxuICAgIHJldHVybiB0aGlzLl90YXJnZXRBY3RvclxuICB9XG5cbiAgZ2V0IHRhcmdldEtleSAoKSB7XG4gICAgaWYgKCF0aGlzLnRhcmdldFRva2VuICYmICF0aGlzLnRhcmdldEFjdG9yKSByZXR1cm4gbnVsbFxuICAgIHJldHVybiB0aGlzLl90YXJnZXRLZXlcbiAgfVxuXG4gIGdldCBoYXNUYXJnZXQgKCkge1xuICAgIGlmICghdGhpcy50YXJnZXRUb2tlbiAmJiAhdGhpcy50YXJnZXRBY3RvcikgcmV0dXJuIGZhbHNlXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIHNldCB0YXJnZXRLZXkgKHgpIHtcbiAgICB0aGlzLl90YXJnZXRLZXkgPSB4XG4gIH1cblxuICBnZXQgc2tpbGxzICgpIHtcbiAgICByZXR1cm4gdGhpcy5hY3Rvci5nZXRXZWFwb25Ta2lsbHModGhpcy5pdGVtSWQpXG4gIH1cblxuICBnZXQgdGFyZ2V0SW1nICgpIHtcbiAgICBjb25zdCBpbWcgPSBjaGF0SGVscGVyLmdldEFjdG9ySW1nRnJvbUtleSh0aGlzLnRhcmdldEtleSlcbiAgICBpZiAoaW1nKSByZXR1cm4gaW1nXG4gICAgcmV0dXJuICcuLi9pY29ucy9zdmcvbXlzdGVyeS1tYW4tYmxhY2suc3ZnJ1xuICB9XG5cbiAgZ2V0IG5hbWUgKCkge1xuICAgIGlmICh0aGlzLnRva2VuKSByZXR1cm4gdGhpcy50b2tlbi5uYW1lXG4gICAgcmV0dXJuIHRoaXMuYWN0b3IubmFtZVxuICB9XG5cbiAgZ2V0IHRhcmdldE5hbWUgKCkge1xuICAgIGlmICghdGhpcy50YXJnZXQpIHJldHVybiAnZHVtbXknXG4gICAgcmV0dXJuIHRoaXMudGFyZ2V0Lm5hbWVcbiAgfVxuXG4gIGdldCBhY3RvckltZyAoKSB7XG4gICAgY29uc3QgaW1nID0gY2hhdEhlbHBlci5nZXRBY3RvckltZ0Zyb21LZXkodGhpcy5hY3RvcktleSlcbiAgICBpZiAoaW1nKSByZXR1cm4gaW1nXG4gICAgcmV0dXJuICcuLi9pY29ucy9zdmcvbXlzdGVyeS1tYW4tYmxhY2suc3ZnJ1xuICB9XG5cbiAgYXN5bmMgc2F5IChtZXNzYWdlLCBmbGF2b3IgPSBudWxsKSB7XG4gICAgY29uc3Qgc3BlYWtlckRhdGEgPSB7fVxuICAgIGxldCBzcGVha2VyXG4gICAgaWYgKHRoaXMuYWN0b3IpIHtcbiAgICAgIHNwZWFrZXJEYXRhLmFjdG9yID0gdGhpcy5hY3RvclxuICAgICAgaWYgKHRoaXMudG9rZW4pIHtcbiAgICAgICAgc3BlYWtlckRhdGEudG9rZW4gPSB0aGlzLnRva2VuLmRvY3VtZW50XG4gICAgICB9XG4gICAgICBzcGVha2VyID0gQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlcihzcGVha2VyRGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgc3BlYWtlciA9IENoYXRNZXNzYWdlLmdldFNwZWFrZXIoKVxuICAgIH1cblxuICAgIGNvbnN0IHVzZXIgPSB0aGlzLmFjdG9yLnVzZXIgPyB0aGlzLmFjdG9yLnVzZXIgOiBnYW1lLnVzZXJcblxuICAgIGNvbnN0IGNoYXREYXRhID0ge1xuICAgICAgdXNlcjogdXNlci5pZCxcbiAgICAgIHNwZWFrZXIsXG4gICAgICBmbGF2b3IsXG4gICAgICBjb250ZW50OiBtZXNzYWdlXG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgWydnbXJvbGwnLCAnYmxpbmRyb2xsJ10uaW5jbHVkZXMoZ2FtZS5zZXR0aW5ncy5nZXQoJ2NvcmUnLCAncm9sbE1vZGUnKSlcbiAgICApIHtcbiAgICAgIGNoYXREYXRhLndoaXNwZXIgPSBDaGF0TWVzc2FnZS5nZXRXaGlzcGVyUmVjaXBpZW50cygnR00nKSAvLyBDaGFuZ2UgZm9yIHVzZXJcbiAgICB9XG4gICAgaWYgKHRoaXMucm9sbE1vZGUgPT09ICdibGluZHJvbGwnKSBjaGF0RGF0YS5ibGluZCA9IHRydWVcblxuICAgIENoYXRNZXNzYWdlLmNyZWF0ZShjaGF0RGF0YSkudGhlbihtc2cgPT4ge1xuICAgICAgcmV0dXJuIG1zZ1xuICAgIH0pXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCAkLCBmb3VuZHJ5LCBnYW1lLCByZW5kZXJUZW1wbGF0ZSwgUm9sbCwgdWkgKi9cbmltcG9ydCB7IENPQzcgfSBmcm9tICcuLi8uLi9jb25maWcuanMnXG5pbXBvcnQgeyBDb0M3Q2hlY2sgfSBmcm9tICcuLi8uLi9jaGVjay5qcydcbmltcG9ydCB7IENvQzdEaWNlIH0gZnJvbSAnLi4vLi4vZGljZS5qcydcbmltcG9ydCB7IENoYXRDYXJkQWN0b3IgfSBmcm9tICcuLi9jYXJkLWFjdG9yLmpzJ1xuaW1wb3J0IHsgY3JlYXRlSW5saW5lUm9sbCwgY2hhdEhlbHBlciB9IGZyb20gJy4uL2hlbHBlci5qcydcblxuZnVuY3Rpb24gcmVwbGFjZXIgKGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleS5zdGFydHNXaXRoKCdfXycpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZCAvLyByZW1vdmUgZnJvbSByZXN1bHRcbiAgfVxuXG4gIGNvbnN0IGV4Y2x1ZGUgPSBbJ19hY3RvciddXG4gIGlmIChleGNsdWRlLmluY2x1ZGVzKGtleSkpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBjb25zdCBjaGVja3MgPSBbJ3NhbkNoZWNrJywgJ2ludENoZWNrJ11cbiAgaWYgKGNoZWNrcy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgcmV0dXJuIHZhbHVlLkpTT05Sb2xsRGF0YVxuICB9XG5cbiAgcmV0dXJuIHZhbHVlIC8vIHJldHVybiBhcyBpc1xufVxuXG5leHBvcnQgY2xhc3MgU2FuQ2hlY2tDYXJkIGV4dGVuZHMgQ2hhdENhcmRBY3RvciB7XG4gIGNvbnN0cnVjdG9yIChhY3RvcktleSA9IG51bGwsIHNhbkRhdGEgPSB7fSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIoXG4gICAgICBhY3RvcktleSxcbiAgICAgIHR5cGVvZiBvcHRpb25zLmZhc3RGb3J3YXJkICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IEJvb2xlYW4ob3B0aW9ucy5mYXN0Rm9yd2FyZClcbiAgICAgICAgOiBmYWxzZVxuICAgIClcbiAgICBzYW5EYXRhLnNhblJlYXNvbiA9IHNhbkRhdGEuc2FuUmVhc29uID8/ICcnXG4gICAgdGhpcy5zYW5EYXRhID0gc2FuRGF0YVxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnNcbiAgICBpZiAoc2FuRGF0YS5tb2RpZmllciAmJiAhaXNOYU4oTnVtYmVyKHNhbkRhdGEubW9kaWZpZXIpKSkge1xuICAgICAgdGhpcy5vcHRpb25zLnNhbk1vZGlmaWVyID0gTnVtYmVyKHNhbkRhdGEubW9kaWZpZXIpXG4gICAgfVxuICAgIGlmIChzYW5EYXRhLmRpZmZpY3VsdHkgJiYgIWlzTmFOKE51bWJlcihzYW5EYXRhLmRpZmZpY3VsdHkpKSkge1xuICAgICAgdGhpcy5vcHRpb25zLnNhbkRpZmZpY3VsdHkgPSBOdW1iZXIoc2FuRGF0YS5kaWZmaWN1bHR5KVxuICAgIH1cbiAgICB0aGlzLnN0YXRlID0ge31cbiAgfVxuXG4gIGdldCBpc0JsaW5kICgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMub3B0aW9ucy5pc0JsaW5kICE9PSAndW5kZWZpbmVkJ1xuICAgICAgPyBCb29sZWFuKHRoaXMub3B0aW9ucy5pc0JsaW5kKVxuICAgICAgOiBzdXBlci5pc0JsaW5kXG4gIH1cblxuICBnZXQgZGlmZmljdWx0eSAoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLm9wdGlvbnMuZGlmZmljdWx0eSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgID8gdGhpcy5vcHRpb25zLmRpZmZpY3VsdHlcbiAgICAgIDogQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyXG4gIH1cblxuICBnZXQgbW9kaWZpZXIgKCkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy5vcHRpb25zLm1vZGlmaWVyICE9PSAndW5kZWZpbmVkJ1xuICAgICAgPyB0aGlzLm9wdGlvbnMubW9kaWZpZXJcbiAgICAgIDogMFxuICB9XG5cbiAgZ2V0IHNhbkxvc3NTb3VyY2UgKCkge1xuICAgIGlmICghdGhpcy5zYW5EYXRhLnRva2VuS2V5KSByZXR1cm4gbnVsbFxuICAgIHJldHVybiBjaGF0SGVscGVyLmdldEFjdG9yRnJvbUtleSh0aGlzLnNhbkRhdGEudG9rZW5LZXkpXG4gIH1cblxuICBnZXQgaW52b2x1bnRhcnlBY3Rpb24gKCkge1xuICAgIGlmIChcbiAgICAgIHRoaXMuc3RhdGUuc2FuUm9sbGVkICYmXG4gICAgICAodGhpcy5zYW5DaGVjay5pc0ZhaWx1cmUgfHwgdGhpcy5zYW5DaGVjay5pc0Z1bWJsZSlcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZ2V0IHNhbkxvc3NGb3JtdWxhICgpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5zYW5Sb2xsZWQpIHtcbiAgICAgIGlmICh0aGlzLnNhbkRhdGEuc2FuTWF4ICYmIHRoaXMuc2FuQ2hlY2suZmFpbGVkKSB7XG4gICAgICAgIHJldHVybiAhaXNOYU4oTnVtYmVyKHRoaXMuc2FuRGF0YS5zYW5NYXgpKVxuICAgICAgICAgID8gTnVtYmVyKHRoaXMuc2FuRGF0YS5zYW5NYXgpXG4gICAgICAgICAgOiB0aGlzLnNhbkRhdGEuc2FuTWF4XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zYW5EYXRhLnNhbk1pbiAmJiB0aGlzLnNhbkNoZWNrLnBhc3NlZCkge1xuICAgICAgICByZXR1cm4gIWlzTmFOKE51bWJlcih0aGlzLnNhbkRhdGEuc2FuTWluKSlcbiAgICAgICAgICA/IE51bWJlcih0aGlzLnNhbkRhdGEuc2FuTWluKVxuICAgICAgICAgIDogdGhpcy5zYW5EYXRhLnNhbk1pblxuICAgICAgfVxuICAgICAgcmV0dXJuIDBcbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGdldCBzYW5Mb3N0VG9SZWFzb24gKCkge1xuICAgIHJldHVybiB0aGlzLmFjdG9yLnNhbkxvc3RUb1JlYXNvbih0aGlzLnNhbkRhdGEuc2FuUmVhc29uKVxuICB9XG5cbiAgZ2V0IG1heFBvc3NpYmxlU2FuTG9zcyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWN0b3IubWF4TG9zc1RvU2FuUmVhc29uKFxuICAgICAgdGhpcy5zYW5EYXRhLnNhblJlYXNvbixcbiAgICAgIHRoaXMuc2FuRGF0YS5zYW5NYXhcbiAgICApXG4gIH1cblxuICBnZXQgbWF4U2FuTG9zcyAoKSB7XG4gICAgcmV0dXJuIG5ldyBSb2xsKHRoaXMuc2FuRGF0YS5zYW5NYXgudG9TdHJpbmcoKSlbKCFmb3VuZHJ5LnV0aWxzLmlzTmV3ZXJWZXJzaW9uKGdhbWUudmVyc2lvbiwgJzEyJykgPyAnZXZhbHVhdGUnIDogJ2V2YWx1YXRlU3luYycpLyogLy8gRm91bmRyeVZUVCB2MTEgKi9dKHsgbWF4aW1pemU6IHRydWUgfSkudG90YWxcbiAgfVxuXG4gIGdldCBzYW5Mb3NzUmVhc29uRW5jb3VudGVyZWQgKCkge1xuICAgIHJldHVybiB0aGlzLmFjdG9yLnNhbkxvc3NSZWFzb25FbmNvdW50ZXJlZCh0aGlzLnNhbkRhdGEuc2FuUmVhc29uKVxuICB9XG5cbiAgZ2V0IGZpcnN0RW5jb3VudGVyICgpIHtcbiAgICByZXR1cm4gIXRoaXMuYWN0b3IubXl0aG9zSW5zYW5pdHlFeHBlcmllbmNlZFxuICB9XG5cbiAgZ2V0IGlzQWN0b3JMb29zaW5nU2FuICgpIHtcbiAgICAvLyBObyBzYW4gbG9zcyBkdXJpbmcgYm91dCBvZiBtYWQuXG4gICAgaWYgKHRoaXMuYWN0b3IuaGFzVGVtcG9JbnNhbmUpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIC8vIFRoZSBzYW4gbG9zcyBpcyBhIDBcbiAgICBpZiAodGhpcy5zYW5Mb3NzRm9ybXVsYSA9PT0gMCkgcmV0dXJuIGZhbHNlXG5cbiAgICBpZiAoXG4gICAgICB0aGlzLnNhbkRhdGEuc2FuUmVhc29uICYmXG4gICAgICB0aGlzLmFjdG9yLm1heExvc3NUb1NhblJlYXNvbihcbiAgICAgICAgdGhpcy5zYW5EYXRhLnNhblJlYXNvbixcbiAgICAgICAgdGhpcy5zYW5EYXRhLnNhbk1heFxuICAgICAgKSA9PT0gMFxuICAgICkge1xuICAgICAgdGhpcy5zdGF0ZS5pbW11bmVUb0NyZWF0dXJlID0gdHJ1ZVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGdldCBib3V0RHVyYXRpb25UZXh0ICgpIHtcbiAgICBpZiAodGhpcy5ib3V0RHVyYXRpb24pIHtcbiAgICAgIGlmICh0aGlzLmJvdXRSZWFsVGltZSkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5ib3V0RHVyYXRpb259ICR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LnJvdW5kcycpfWBcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmJvdXRTdW1tYXJ5KSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmJvdXREdXJhdGlvbn0gJHtnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuaG91cnMnKX1gXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBnZXQgeW91R2FpbkN0aHVsaHVNeXRob3NTdHJpbmcgKCkge1xuICAgIGlmICh0aGlzLm15dGhvc0dhaW4pIHtcbiAgICAgIHJldHVybiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LllvdUdhaW5lZEN0aHVsaHVNeXRob3MnLCB7XG4gICAgICAgIHZhbHVlOiB0aGlzLm15dGhvc0dhaW5cbiAgICAgIH0pXG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBhc3luYyBhZHZhbmNlU3RhdGUgKHN0YXRlKSB7XG4gICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgY2FzZSAna2VlcENyZWF0dXJlU2FuRGF0YSc6IHtcbiAgICAgICAgdGhpcy5zdGF0ZS5rZWVwQ3JlYXR1cmVTYW5EYXRhID0gdHJ1ZVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgY2FzZSAnaW52b2x1bnRhcnlBY3Rpb25QZXJmb3JtZWQnOiB7XG4gICAgICAgIHRoaXMuc3RhdGVbc3RhdGVdID0gdHJ1ZVxuICAgICAgICBpZiAoIXRoaXMuaXNBY3Rvckxvb3NpbmdTYW4pIHRoaXMuc3RhdGUuZmluaXNoID0gdHJ1ZVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgY2FzZSAnc2FuTG9zc0FwcGxpZWQnOiB7XG4gICAgICAgIGF3YWl0IHRoaXMuYXBwbHlTYW5Mb3NzKClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2VudGVyQm91dE9mTWFkbmVzc1JlYWxUaW1lJzoge1xuICAgICAgICB0aGlzLmJvdXREdXJhdGlvbiA9IChhd2FpdCBuZXcgUm9sbCgnMUQxMCcpLnJvbGwoeyBhc3luYzogdHJ1ZSB9KSkudG90YWxcbiAgICAgICAgdGhpcy5ib3V0UmVhbFRpbWUgPSB0cnVlXG4gICAgICAgIHRoaXMuYm91dFN1bW1hcnkgPSBmYWxzZVxuICAgICAgICB0aGlzLmJvdXRSZXN1bHQgPSBhd2FpdCB0aGlzLmFjdG9yLmVudGVyQm91dE9mTWFkbmVzcyhcbiAgICAgICAgICB0cnVlLFxuICAgICAgICAgIHRoaXMuYm91dER1cmF0aW9uXG4gICAgICAgIClcbiAgICAgICAgdGhpcy5zdGF0ZS5ib3V0T2ZNYWRuZXNzUmVzb2x2ZWQgPSB0cnVlXG4gICAgICAgIHRoaXMuc3RhdGUuYm91dE9mTWFkbmVzc092ZXIgPSBmYWxzZVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgY2FzZSAnZW50ZXJCb3V0T2ZNYWRuZXNzU3VtbWFyeSc6IHtcbiAgICAgICAgdGhpcy5ib3V0RHVyYXRpb24gPSAoYXdhaXQgbmV3IFJvbGwoJzFEMTAnKS5yb2xsKHsgYXN5bmM6IHRydWUgfSkpLnRvdGFsXG4gICAgICAgIHRoaXMuYm91dFJlYWxUaW1lID0gZmFsc2VcbiAgICAgICAgdGhpcy5ib3V0U3VtbWFyeSA9IHRydWVcbiAgICAgICAgdGhpcy5ib3V0UmVzdWx0ID0gYXdhaXQgdGhpcy5hY3Rvci5lbnRlckJvdXRPZk1hZG5lc3MoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgdGhpcy5ib3V0RHVyYXRpb25cbiAgICAgICAgKVxuICAgICAgICB0aGlzLnN0YXRlLmJvdXRPZk1hZG5lc3NSZXNvbHZlZCA9IHRydWVcbiAgICAgICAgYXdhaXQgdGhpcy50cmlnZ2VySW5zYW5pdHkoKVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgY2FzZSAnYm91dE9mTWFkbmVzc092ZXInOiB7XG4gICAgICAgIGF3YWl0IHRoaXMuYWN0b3IudW5zZXRDb25kaXRpb24oQ09DNy5zdGF0dXMudGVtcG9JbnNhbmUpXG4gICAgICAgIGF3YWl0IHRoaXMudHJpZ2dlckluc2FuaXR5KClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ25vTXl0aG9zR2FpbmVkJzoge1xuICAgICAgICB0aGlzLnN0YXRlLmN0aHVsaHVNeXRob3NBd2FyZGVkID0gdHJ1ZVxuICAgICAgICB0aGlzLm15dGhvc0dhaW4gPSAwXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlICdjdGh1bGh1TXl0aG9zQXdhcmRlZCc6IHtcbiAgICAgICAgbGV0IGFtb3VudEdhaW5lZCA9IDFcbiAgICAgICAgaWYgKCF0aGlzLmFjdG9yLm15dGhvc0luc2FuaXR5RXhwZXJpZW5jZWQpIHtcbiAgICAgICAgICBhbW91bnRHYWluZWQgPSA1XG4gICAgICAgICAgYXdhaXQgdGhpcy5hY3Rvci5leHBlcmllbmNlRmlyc3RNeXRob3NJbnNhbml0eSgpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZS5jdGh1bGh1TXl0aG9zQXdhcmRlZCA9IHRydWVcbiAgICAgICAgY29uc3QgY3RodWxodU15dGhvc1NraWxsID0gdGhpcy5hY3Rvci5jdGh1bGh1TXl0aG9zU2tpbGxcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPVxuICAgICAgICAgIGN0aHVsaHVNeXRob3NTa2lsbC5kYXRhLmRhdGEuYWRqdXN0bWVudHMuZXhwZXJpZW5jZSB8fCAwXG4gICAgICAgIGlmIChjdGh1bGh1TXl0aG9zU2tpbGwpIHtcbiAgICAgICAgICBhd2FpdCBjdGh1bGh1TXl0aG9zU2tpbGwudXBkYXRlKHtcbiAgICAgICAgICAgICdkYXRhLmFkanVzdG1lbnRzLmV4cGVyaWVuY2UnOiBvbGRWYWx1ZSArIGFtb3VudEdhaW5lZFxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5teXRob3NHYWluID0gYW1vdW50R2FpbmVkXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgYnlwYXNzUm9sbFNhbiAoKSB7XG4gICAgdGhpcy5pc0J5cGFzc2VkID0gdHJ1ZVxuICAgIHRoaXMuc2FuQ2hlY2sgPSBuZXcgQ29DN0NoZWNrKClcbiAgICB0aGlzLnNhbkNoZWNrLmFjdG9yID0gdGhpcy5hY3RvcktleVxuICAgIHRoaXMuc2FuQ2hlY2suYXR0cmlidXRlID0gJ3NhbidcbiAgICB0aGlzLnNhbkNoZWNrLmRpZmZpY3VsdHkgPVxuICAgICAgdGhpcy5vcHRpb25zLnNhbkRpZmZpY3VsdHkgfHwgQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyXG4gICAgdGhpcy5zYW5DaGVjay5kaWNlTW9kaWZpZXIgPSB0aGlzLm9wdGlvbnMuc2FuTW9kaWZpZXIgfHwgMFxuICAgIGF3YWl0IHRoaXMuc2FuQ2hlY2suX3BlcmZvcm0oeyBmb3JjZURTTjogdHJ1ZSB9KVxuICAgIHRoaXMuc3RhdGUuc2FuUm9sbGVkID0gdHJ1ZVxuICAgIHRoaXMuc3RhdGUuaW52b2x1bnRhcnlBY3Rpb25QZXJmb3JtZWQgPSB0aGlzLnNhbkNoZWNrLnBhc3NlZFxuICAgIHRoaXMuc3RhdGUuc2FuTG9zc1JvbGxlZCA9IHRydWVcbiAgICB0aGlzLnN0YXRlLmlnbm9yZVNhbkNoZWNrID0gdHJ1ZVxuICAgIHRoaXMuc2FuTG9zcyA9IHRoaXMuc2FuTG9zc0Zvcm11bGFcbiAgfVxuXG4gIGFzeW5jIHJvbGxTYW4gKCkge1xuICAgIHRoaXMuc2FuQ2hlY2sgPSBuZXcgQ29DN0NoZWNrKClcbiAgICB0aGlzLnNhbkNoZWNrLmFjdG9yID0gdGhpcy5hY3RvcktleVxuICAgIHRoaXMuc2FuQ2hlY2suYXR0cmlidXRlID0gJ3NhbidcbiAgICB0aGlzLnNhbkNoZWNrLmRpZmZpY3VsdHkgPVxuICAgICAgdGhpcy5vcHRpb25zLnNhbkRpZmZpY3VsdHkgfHwgQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyXG4gICAgdGhpcy5zYW5DaGVjay5kaWNlTW9kaWZpZXIgPSB0aGlzLm9wdGlvbnMuc2FuTW9kaWZpZXIgfHwgMFxuICAgIGF3YWl0IHRoaXMuc2FuQ2hlY2suX3BlcmZvcm0oeyBmb3JjZURTTjogdHJ1ZSB9KVxuICAgIHRoaXMuc3RhdGUuc2FuUm9sbGVkID0gdHJ1ZVxuICAgIHRoaXMuc3RhdGUuaW52b2x1bnRhcnlBY3Rpb25QZXJmb3JtZWQgPSB0aGlzLnNhbkNoZWNrLnBhc3NlZFxuICAgIGlmICghdGhpcy5pc0FjdG9yTG9vc2luZ1Nhbikge1xuICAgICAgdGhpcy5zdGF0ZS5maW5pc2ggPSB0cnVlXG4gICAgICBpZiAodGhpcy5hY3Rvci5oYXNUZW1wb0luc2FuZSkge1xuICAgICAgICB0aGlzLnN0YXRlLmltbXVuZUFscmVhZHlJbkJvdXQgPSB0cnVlXG4gICAgICAgIGlmICghdGhpcy5zYW5DaGVjay5wYXNzZWQpIHRoaXMuc3RhdGUuZmluaXNoID0gZmFsc2VcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhdGUuc2FuTG9zc1JvbGxlZCA9IHRydWVcbiAgICAgIHRoaXMuc3RhdGUuc2FuTG9zc0FwcGxpZWQgPSB0cnVlXG4gICAgICB0aGlzLnN0YXRlLmludFJvbGxlZCA9IHRydWVcbiAgICAgIHRoaXMuc3RhdGUuaW5zYW5pdHkgPSBmYWxzZVxuICAgICAgdGhpcy5zYW5Mb3NzID0gMFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuc2FuTG9zc0Zvcm11bGEgPT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLnN0YXRlLnNhbkxvc3NSb2xsZWQgPSB0cnVlXG4gICAgICBpZiAodGhpcy5zYW5EYXRhLnNhblJlYXNvbikge1xuICAgICAgICB0aGlzLnNhbkxvc3MgPSB0aGlzLmFjdG9yLm1heExvc3NUb1NhblJlYXNvbihcbiAgICAgICAgICB0aGlzLnNhbkRhdGEuc2FuUmVhc29uLFxuICAgICAgICAgIHRoaXMuc2FuTG9zc0Zvcm11bGFcbiAgICAgICAgKVxuICAgICAgICBpZiAodGhpcy5zYW5Mb3NzIDwgdGhpcy5zYW5Mb3NzRm9ybXVsYSkge1xuICAgICAgICAgIHRoaXMuc3RhdGUubGltaXRlZExvc3NUb0NyZWF0dXJlID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNhbkxvc3MgPSB0aGlzLnNhbkxvc3NGb3JtdWxhXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnNhbkNoZWNrLmlzRnVtYmxlKSB7XG4gICAgICB0aGlzLnN0YXRlLnNhbkxvc3NSb2xsZWQgPSB0cnVlXG4gICAgICB0aGlzLnNhbkxvc3MgPSB0aGlzLmFjdG9yLm1heExvc3NUb1NhblJlYXNvbihcbiAgICAgICAgdGhpcy5zYW5EYXRhLnNhblJlYXNvbixcbiAgICAgICAgdGhpcy5zYW5EYXRhLnNhbk1heFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAodGhpcy5zYW5EYXRhLnNhblJlYXNvbikge1xuICAgICAgY29uc3QgbWluID0gbmV3IFJvbGwodGhpcy5zYW5Mb3NzRm9ybXVsYSlbKCFmb3VuZHJ5LnV0aWxzLmlzTmV3ZXJWZXJzaW9uKGdhbWUudmVyc2lvbiwgJzEyJykgPyAnZXZhbHVhdGUnIDogJ2V2YWx1YXRlU3luYycpLyogLy8gRm91bmRyeVZUVCB2MTEgKi9dKHsgbWluaW1pemU6IHRydWUgfSkudG90YWxcbiAgICAgIGNvbnN0IG1heCA9IHRoaXMuYWN0b3IubWF4TG9zc1RvU2FuUmVhc29uKFxuICAgICAgICB0aGlzLnNhbkRhdGEuc2FuUmVhc29uLFxuICAgICAgICB0aGlzLnNhbkRhdGEuc2FuTWF4XG4gICAgICApXG4gICAgICBpZiAobWluID49IG1heCkge1xuICAgICAgICB0aGlzLnN0YXRlLnNhbkxvc3NSb2xsZWQgPSB0cnVlXG4gICAgICAgIHRoaXMuc2FuTG9zcyA9IG1heFxuICAgICAgICB0aGlzLnN0YXRlLmxpbWl0ZWRMb3NzVG9DcmVhdHVyZSA9IHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhc3luYyByb2xsU2FuTG9zcyAoKSB7XG4gICAgdGhpcy5zYW5Mb3NzUm9sbCA9IG5ldyBSb2xsKGAke3RoaXMuc2FuTG9zc0Zvcm11bGF9YClcblxuICAgIGF3YWl0IHRoaXMuc2FuTG9zc1JvbGwucm9sbCh7IGFzeW5jOiB0cnVlIH0pXG5cbiAgICBhd2FpdCBDb0M3RGljZS5zaG93Um9sbERpY2UzZCh0aGlzLnNhbkxvc3NSb2xsKVxuXG4gICAgY29uc3QgbWF4ID0gdGhpcy5hY3Rvci5tYXhMb3NzVG9TYW5SZWFzb24oXG4gICAgICB0aGlzLnNhbkRhdGEuc2FuUmVhc29uLFxuICAgICAgdGhpcy5zYW5EYXRhLnNhbk1heFxuICAgIClcblxuICAgIGlmICh0aGlzLnNhbkxvc3NSb2xsLnRvdGFsID4gbWF4KSB7XG4gICAgICB0aGlzLnN0YXRlLmxpbWl0ZWRMb3NzVG9DcmVhdHVyZSA9IHRydWVcbiAgICB9XG5cbiAgICB0aGlzLnNhbkxvc3MgPSBNYXRoLm1pbih0aGlzLnNhbkxvc3NSb2xsLnRvdGFsLCBtYXgpXG4gICAgdGhpcy5zdGF0ZS5zYW5Mb3NzUm9sbGVkID0gdHJ1ZVxuICB9XG5cbiAgYXN5bmMgYXBwbHlTYW5Mb3NzICgpIHtcbiAgICBhd2FpdCB0aGlzLmFjdG9yLmxvb3NlU2FuKHRoaXMuc2FuRGF0YS5zYW5SZWFzb24sIHRoaXMuc2FuTG9zcylcblxuICAgIGlmICh0aGlzLnNhbkxvc3MgPiAwKSB0aGlzLnN0YXRlLmFjdG9yTG9zdFNhbiA9IHRydWVcbiAgICB0aGlzLnN0YXRlLnNhbkxvc3NBcHBsaWVkID0gdHJ1ZVxuICAgIGlmICh0aGlzLmFjdG9yLnNhbiA8PSAwKSB7XG4gICAgICB0aGlzLnN0YXRlLmludFJvbGxlZCA9IHRydWVcbiAgICAgIHRoaXMuc3RhdGUuYm91dE9mTWFkbmVzc092ZXIgPSB0cnVlXG5cbiAgICAgIHRoaXMuc3RhdGUuaW5zYW5pdHkgPSB0cnVlXG4gICAgICB0aGlzLnN0YXRlLnBlcm1hbmVudGx5SW5zYW5lID0gdHJ1ZVxuXG4gICAgICB0aGlzLnN0YXRlLmZpbmlzaCA9IHRydWVcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICh0aGlzLnNhbkxvc3MgPCA1KSB7XG4gICAgICB0aGlzLnN0YXRlLmludFJvbGxlZCA9IHRydWVcbiAgICAgIGlmICh0aGlzLmFjdG9yLmhhc0luZGVmSW5zYW5lKSB7XG4gICAgICAgIHRoaXMuc3RhdGUuaW5zYW5pdHkgPSB0cnVlXG4gICAgICAgIHRoaXMuc3RhdGUuc2hha2VuID0gdHJ1ZVxuICAgICAgICB0aGlzLnN0YXRlLmluc2FuaXR5VGFibGVSb2xsZWQgPSBmYWxzZVxuICAgICAgICB0aGlzLnN0YXRlLmZpbmlzaCA9IGZhbHNlXG4gICAgICAgIHRoaXMuc3RhdGUuaW50Um9sbGVkID0gdHJ1ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5pbnNhbml0eSA9IGZhbHNlXG4gICAgICAgIHRoaXMuc3RhdGUuc2hha2VuID0gdHJ1ZVxuICAgICAgICB0aGlzLnN0YXRlLmluc2FuaXR5VGFibGVSb2xsZWQgPSB0cnVlXG4gICAgICAgIHRoaXMuc3RhdGUuZmluaXNoID0gdHJ1ZVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YXRlLmludFJvbGxlZCA9IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYWN0b3IuZGFpbHlTYW5Mb3NzID49IHRoaXMuYWN0b3IuZGFpbHlTYW5MaW1pdCkge1xuICAgICAgLy8gdGhpcy5hY3Rvci5zYW4vNVxuICAgICAgdGhpcy5zdGF0ZS5pbnNhbml0eSA9IHRydWVcbiAgICAgIHRoaXMuc3RhdGUuaW50Um9sbGVkID0gdHJ1ZVxuICAgICAgdGhpcy5zdGF0ZS50ZW1wb3JhcnlJbnNhbmUgPSBmYWxzZVxuICAgICAgdGhpcy5zdGF0ZS5pbmRlZmluaXRlbHlJbnNhbmUgPSB0cnVlXG4gICAgICB0aGlzLnN0YXRlLmluc2FuaXR5VGFibGVSb2xsZWQgPSBmYWxzZVxuICAgICAgdGhpcy5zdGF0ZS5tZW1vcnlSZXByZXNzZWQgPSBmYWxzZVxuICAgICAgdGhpcy5zdGF0ZS5maW5pc2ggPSBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHJvbGxJbnQgKCkge1xuICAgIHRoaXMuaW50Q2hlY2sgPSBuZXcgQ29DN0NoZWNrKClcbiAgICB0aGlzLmludENoZWNrLmFjdG9yID0gdGhpcy5hY3RvcktleVxuICAgIHRoaXMuaW50Q2hlY2suY2hhcmFjdGVyaXN0aWMgPSAnaW50J1xuICAgIHRoaXMuaW50Q2hlY2suZGlmZmljdWx0eSA9XG4gICAgICB0aGlzLm9wdGlvbnMuaW50RGlmZmljdWx0eSB8fCBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXJcbiAgICB0aGlzLmludENoZWNrLmRpY2VNb2RpZmllciA9IHRoaXMub3B0aW9ucy5pbnRNb2RpZmllciB8fCAwXG4gICAgYXdhaXQgdGhpcy5pbnRDaGVjay5fcGVyZm9ybSh7IGZvcmNlRFNOOiB0cnVlIH0pXG4gICAgdGhpcy5zdGF0ZS5pbnRSb2xsZWQgPSB0cnVlXG4gICAgaWYgKHRoaXMuaW50Q2hlY2sucGFzc2VkIHx8IHRoaXMuc3RhdGUuYWxyZWFkeUluc2FuZSkge1xuICAgICAgdGhpcy5zdGF0ZS5pbnNhbml0eSA9IHRydWVcbiAgICAgIHRoaXMuc3RhdGUudGVtcG9yYXJ5SW5zYW5lID0gdHJ1ZVxuICAgICAgdGhpcy5zdGF0ZS5pbmRlZmluaXRlbHlJbnNhbmUgPSBmYWxzZVxuICAgICAgdGhpcy5zdGF0ZS5tZW1vcnlSZXByZXNzZWQgPSBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YXRlLmluc2FuaXR5ID0gZmFsc2VcbiAgICAgIHRoaXMuc3RhdGUudGVtcG9yYXJ5SW5zYW5lID0gZmFsc2VcbiAgICAgIHRoaXMuc3RhdGUuaW5kZWZpbml0ZWx5SW5zYW5lID0gZmFsc2VcbiAgICAgIHRoaXMuc3RhdGUubWVtb3J5UmVwcmVzc2VkID0gdHJ1ZVxuICAgICAgdGhpcy5zdGF0ZS5maW5pc2ggPSB0cnVlXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgdHJpZ2dlckluc2FuaXR5ICgpIHtcbiAgICB0aGlzLnN0YXRlLmJvdXRPZk1hZG5lc3NPdmVyID0gdHJ1ZVxuICAgIGlmICh0aGlzLnN0YXRlLmluZGVmaW5pdGVseUluc2FuZSkge1xuICAgICAgYXdhaXQgdGhpcy5hY3Rvci5zZXRDb25kaXRpb24oQ09DNy5zdGF0dXMuaW5kZWZJbnNhbmUpXG4gICAgfVxuICAgIHRoaXMuc3RhdGUuZmluaXNoID0gdHJ1ZVxuICB9XG5cbiAgYXN5bmMgY2xlYXJTYW5Mb3NzUmVhc29uICgpIHtcbiAgICBhd2FpdCB0aGlzLmFjdG9yLnNldFJlYXNvblNhbkxvc3ModGhpcy5zYW5EYXRhLnNhblJlYXNvbiwgMClcbiAgICBpZiAoIXRoaXMuc2FuTG9zc1JlYXNvbkVuY291bnRlcmVkKSB7XG4gICAgICB0aGlzLnN0YXRlLmtlZXBDcmVhdHVyZVNhbkRhdGEgPSB0cnVlXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgdXBkYXRlQ2hhdENhcmQgKCkge1xuICAgIC8vIEF0dGFjaGUgdGhlIHNhbkNoZWNrIHJlc3VsdCB0byB0aGUgbWVzc2FnZS5cbiAgICBpZiAodGhpcy5zdGF0ZS5zYW5Sb2xsZWQpIHtcbiAgICAgIHRoaXMuX19pbmxpbmVTYW5DaGVjayA9IHRoaXMuc2FuQ2hlY2suaW5saW5lQ2hlY2sub3V0ZXJIVE1MXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2FuTG9zc1JvbGwpIHtcbiAgICAgIGNvbnN0IGEgPSBjcmVhdGVJbmxpbmVSb2xsKHRoaXMuc2FuTG9zc1JvbGwpXG4gICAgICB0aGlzLl9faW5saW5lU2FuTG9zc1JvbGwgPSBhLm91dGVySFRNTFxuICAgIH1cblxuICAgIGlmICh0aGlzLnN0YXRlLmludFJvbGxlZCAmJiB0aGlzLmludENoZWNrKSB7XG4gICAgICB0aGlzLl9faW5saW5lSW50Q2hlY2sgPSB0aGlzLmludENoZWNrLmlubGluZUNoZWNrLm91dGVySFRNTFxuICAgIH1cblxuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZShTYW5DaGVja0NhcmQudGVtcGxhdGUsIHRoaXMpXG4gICAgY29uc3QgaHRtbENhcmRFbGVtZW50ID0gJC5wYXJzZUhUTUwoaHRtbClbMF1cblxuICAgIC8vIEF0dGFjaCB0aGUgc2FuQ2hlY2tDYXJkIG9iamVjdCB0byB0aGUgbWVzc2FnZS5cbiAgICBodG1sQ2FyZEVsZW1lbnQuZGF0YXNldC5vYmplY3QgPSBlc2NhcGUoSlNPTi5zdHJpbmdpZnkodGhpcywgcmVwbGFjZXIpKVxuXG4gICAgLy8gVXBkYXRlIHRoZSBtZXNzYWdlLlxuICAgIGNvbnN0IGNoYXRNZXNzYWdlID0gZ2FtZS5tZXNzYWdlcy5nZXQodGhpcy5tZXNzYWdlSWQpXG5cbiAgICBjb25zdCBtc2cgPSBhd2FpdCBjaGF0TWVzc2FnZS51cGRhdGUoe1xuICAgICAgY29udGVudDogaHRtbENhcmRFbGVtZW50Lm91dGVySFRNTFxuICAgIH0pXG4gICAgYXdhaXQgdWkuY2hhdC51cGRhdGVNZXNzYWdlKG1zZywgZmFsc2UpXG4gICAgcmV0dXJuIG1zZ1xuICB9XG5cbiAgc3RhdGljIGdldCB0ZW1wbGF0ZSAoKSB7XG4gICAgcmV0dXJuICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2NoYXQvY2FyZHMvc2FuLWNoZWNrLmh0bWwnXG4gIH1cblxuICBzdGF0aWMgY2hlY2tUYXJnZXRzIChzYW5EYXRhLCBmYXN0Rm9yd2FyZCA9IGZhbHNlKSB7XG4gICAgY29uc3QgdGFyZ2V0cyA9IFsuLi5nYW1lLnVzZXIudGFyZ2V0c11cbiAgICBpZiAodGFyZ2V0cy5sZW5ndGgpIHtcbiAgICAgIGZvciAoY29uc3QgdCBvZiB0YXJnZXRzKSB7XG4gICAgICAgIGlmICh0LmFjdG9yLmlzVG9rZW4pIHtcbiAgICAgICAgICBTYW5DaGVja0NhcmQuY3JlYXRlKHQuYWN0b3IudG9rZW5LZXksIHNhbkRhdGEsIHtcbiAgICAgICAgICAgIGZhc3RGb3J3YXJkXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBTYW5DaGVja0NhcmQuY3JlYXRlKHQuYWN0b3IuaWQsIHNhbkRhdGEsIHsgZmFzdEZvcndhcmQgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLndhcm4oZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lldhcm5Ob1RhcmdldHNTYW5DaGVjaycpKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBjcmVhdGUgKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBjaGF0Q2FyZCA9IG5ldyBTYW5DaGVja0NhcmQoLi4uYXJncylcbiAgICBpZiAoY2hhdENhcmQuYWN0b3IuaGFzSW5kZWZJbnNhbmUpIHtcbiAgICAgIGNoYXRDYXJkLnN0YXRlLmFscmVhZHlJbnNhbmUgPSB0cnVlXG4gICAgfVxuXG4gICAgaWYgKGNoYXRDYXJkLmFjdG9yLnNhbiA8PSAwKSB7XG4gICAgICBjaGF0Q2FyZC5zdGF0ZS5pbnRSb2xsZWQgPSB0cnVlXG4gICAgICBjaGF0Q2FyZC5zdGF0ZS5ib3V0T2ZNYWRuZXNzT3ZlciA9IHRydWVcblxuICAgICAgY2hhdENhcmQuc3RhdGUuaW5zYW5pdHkgPSB0cnVlXG4gICAgICBjaGF0Q2FyZC5zdGF0ZS5wZXJtYW5lbnRseUluc2FuZSA9IHRydWVcblxuICAgICAgY2hhdENhcmQuc3RhdGUuZmluaXNoID0gdHJ1ZVxuICAgIH1cblxuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZShTYW5DaGVja0NhcmQudGVtcGxhdGUsIGNoYXRDYXJkKVxuICAgIGNvbnN0IGh0bWxDYXJkRWxlbWVudCA9ICQucGFyc2VIVE1MKGh0bWwpWzBdXG5cbiAgICBodG1sQ2FyZEVsZW1lbnQuZGF0YXNldC5vYmplY3QgPSBlc2NhcGUoSlNPTi5zdHJpbmdpZnkoY2hhdENhcmQsIHJlcGxhY2VyKSlcbiAgICBhd2FpdCBjaGF0Q2FyZC5zYXkoaHRtbENhcmRFbGVtZW50Lm91dGVySFRNTClcbiAgfVxuXG4gIHN0YXRpYyBnZXRGcm9tTWVzc2FnZUlkIChtZXNzYWdlSWQpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gZ2FtZS5tZXNzYWdlcy5nZXQobWVzc2FnZUlkKVxuICAgIGNvbnN0IGh0bWxNZXNzYWdlID0gJC5wYXJzZUhUTUwobWVzc2FnZS5jb250ZW50KVswXVxuXG4gICAgY29uc3QgaHRtbENhcmQgPSBodG1sTWVzc2FnZS5xdWVyeVNlbGVjdG9yKCcuY2hhdC1jYXJkJylcblxuICAgIHJldHVybiBTYW5DaGVja0NhcmQuZ2V0RnJvbUNhcmQoaHRtbENhcmQpXG4gIH1cblxuICBzdGF0aWMgZ2V0RnJvbUNhcmQgKGNhcmQpIHtcbiAgICBjb25zdCBzYW5DaGVja0NhcmREYXRhID0gSlNPTi5wYXJzZSh1bmVzY2FwZShjYXJkLmRhdGFzZXQub2JqZWN0KSlcblxuICAgIGNvbnN0IHNhbkNoZWNrQ2FyZCA9IG5ldyBTYW5DaGVja0NhcmQoKVxuICAgIE9iamVjdC5hc3NpZ24oc2FuQ2hlY2tDYXJkLCBzYW5DaGVja0NhcmREYXRhKVxuICAgIGlmICghc2FuQ2hlY2tDYXJkLm1lc3NhZ2VJZCkge1xuICAgICAgc2FuQ2hlY2tDYXJkLm1lc3NhZ2VJZCA9IGNhcmQuY2xvc2VzdCgnLm1lc3NhZ2UnKS5kYXRhc2V0Lm1lc3NhZ2VJZFxuICAgIH1cblxuICAgIGlmIChzYW5DaGVja0NhcmQuc2FuQ2hlY2s/LmNvbnN0cnVjdG9yPy5uYW1lID09PSAnT2JqZWN0Jykge1xuICAgICAgc2FuQ2hlY2tDYXJkLnNhbkNoZWNrID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAgbmV3IENvQzdDaGVjaygpLFxuICAgICAgICBzYW5DaGVja0NhcmQuc2FuQ2hlY2tcbiAgICAgIClcbiAgICB9XG5cbiAgICBpZiAoc2FuQ2hlY2tDYXJkLmludENoZWNrPy5jb25zdHJ1Y3Rvcj8ubmFtZSA9PT0gJ09iamVjdCcpIHtcbiAgICAgIHNhbkNoZWNrQ2FyZC5pbnRDaGVjayA9IE9iamVjdC5hc3NpZ24oXG4gICAgICAgIG5ldyBDb0M3Q2hlY2soKSxcbiAgICAgICAgc2FuQ2hlY2tDYXJkLmludENoZWNrXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKHNhbkNoZWNrQ2FyZC5zYW5Mb3NzUm9sbD8uY29uc3RydWN0b3I/Lm5hbWUgPT09ICdPYmplY3QnKSB7XG4gICAgICBzYW5DaGVja0NhcmQuc2FuTG9zc1JvbGwgPSBSb2xsLmZyb21EYXRhKHNhbkNoZWNrQ2FyZC5zYW5Mb3NzUm9sbClcbiAgICB9XG5cbiAgICByZXR1cm4gc2FuQ2hlY2tDYXJkXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCAkLCBjYW52YXMsIENoYXRNZXNzYWdlLCBDT05GSUcsIENPTlNULCBmb3VuZHJ5LCBnYW1lLCB1aSAqL1xuaW1wb3J0IHsgQ29DQWN0b3IgfSBmcm9tICcuLi9hY3RvcnMvYWN0b3IuanMnXG5pbXBvcnQgeyBDb0M3Q2hlY2sgfSBmcm9tICcuLi9jaGVjay5qcydcbmltcG9ydCB7IENvQzdDb250ZW50TGlua0RpYWxvZyB9IGZyb20gJy4vY29jNy1jb250ZW50LWxpbmstZGlhbG9nLmpzJ1xuaW1wb3J0IHsgQ29DN0dyb3VwTWVzc2FnZSB9IGZyb20gJy4vY29jNy1ncm91cC1tZXNzYWdlLmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4uL3V0aWxpdGllcy5qcydcbmltcG9ydCB7IFNhbkNoZWNrQ2FyZCB9IGZyb20gJy4uL2NoYXQvY2FyZHMvc2FuLWNoZWNrLmpzJ1xuaW1wb3J0IHsgY2hhdEhlbHBlciwgaXNDdHJsS2V5IH0gZnJvbSAnLi4vY2hhdC9oZWxwZXIuanMnXG5cbi8qKlxuICogQWxsb3cgZm9yIHBhcnNpbmcgb2YgQ29DNyBlbGVtZW50cyBpbiBjaGF0IG1lc3NhZ2UgYW5kIHNoZWV0cy5cbiAqIEZvcm1hdCBpcyA6XG4gKiBAY29jNy5UWVBFX09GX1JFUVVFU1RbT1BUSU9OU117RElTUExBWUVEX05BTUV9XG4gKiBUWVBFX09GX1JFUVVFU1QgOlxuICogLSBzYW5sb3NzOiB0cmlnZ2VyIGEgc2FuIGNoZWNrLCB1cG9uIGZhaWx1cmUgd2lsbCBwcm9wb3NlIHRvIGRlZHVjdCB0aGUgY29ycmVzcG9uZGluZyBTQU4uXG4gKiAtIGNoZWNrOiB0cmlnZ2VyIGEgY2hlY2sgZGVwZW5kaW5nIG9uIHRoZSBvcHRpb25zLlxuICogLSBpdGVtOiBUcmlnZ2VyIGEgd2VhcG9uIGNoZWNrXG4gKiAtIGVmZmVjdDogQWRkIGFuIGVmZmVjdFxuICpcbiAqIE9QVElPTlM6IFtdID0gb3B0aW9uYWxcbiAqIHNhbmxvc3M6XG4gKiAgIHNhbk1heDogbWF4IFNBTiBsb3NzXG4gKiAgIHNhbk1pbjogbWluIFNBTiBsb3NzXG4gKiAgIHNhblJlYXNvbjogUmVhc29uXG4gKiBjaGVjazpcbiAqICAgdHlwZTogdHlwZSBvZiBjaGVjayAoY2hhcmFjdGVyaXN0aWMsIHNraWxsLCBhdHRyaWIpLlxuICogICBuYW1lOiBuYW1lIG9mIHRoZSBza2lsbC9jaGFyYWN0ZXJpc3RpYy5cbiAqICAgW2RpZmZpY3VsdHldOiA/IChibGluZCksIDAgKHJlZ3VsYXIpLCArIChoYXJkKSwgKysgKGV4dHJlbWUpLCArKysgKGNyaXRpY2FsKS5cbiAqICAgW21vZGlmaWVyXTogLXggKHggcGVuYWx0eSBkaWNlKSwgK3ggKHggYm9udXMgZGljZSksIDAgKG5vIG1vZGlmaWVyKS5cbiAqICAgW2ljb25dOiBpY29uIHRvIHVzZSAoZm9udCBhd3NvbWUpLlxuICogICBbYmxpbmRdOiB3aWxsIHRyaWdnZXIgYSBibGluZCByb2xsLlxuICogICBbcHVzaGluZ106IHdpbGwgdHJpZ2dlciBhIHB1c2hlZCByb2xsXG4gKlxuICogW0RJU1BMQVlFRF9OQU1FOiBuYW1lIHRvIGRpc3BsYXkuXVxuICpcbiAqIFRvIGFkZC9lZGl0IGEgbmV3IGxpbmsgdXBkYXRlIHRoZXNlIHNlY3Rpb25zXG4gKiAgIGZyb21Ecm9wRGF0YSA9PiBBZGQgYWxsIGRlZmF1bHRzIGhlcmVcbiAqICAgX2NyZWF0ZUxpbmsgPT4gQ3JlYXRlIEhUTUwgZnJvbSBkb2N1bWVudCBkYXRhXG4gKiAgIF9jcmVhdGVEb2N1bWVudExpbmsgPT4gQ3JlYXRlIEBsaW5rIGZyb20gZG9jdW1lbnQgZGF0YVxuICogICBfb25MaW5rQWN0b3JDbGljayA9PiBQcm9jZXNzIGxpbmtcbiAqL1xuZXhwb3J0IGNsYXNzIENvQzdMaW5rIHtcbiAgc3RhdGljIGdldCBDSEVDS19UWVBFICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgQ0hFQ0s6ICdjaGVjaycsXG4gICAgICBTQU5MT1NTOiAnc2FubG9zcycsXG4gICAgICBJVEVNOiAnaXRlbScsXG4gICAgICBFRkZFQ1Q6ICdlZmZlY3QnXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldCBMSU5LX1RZUEUgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBDSEFSQUNURVJJU1RJQzogJ2NoYXJhY3RlcmlzdGljJyxcbiAgICAgIEFUVFJJQlVURTogJ2F0dHJpYnV0ZScsXG4gICAgICBTS0lMTDogJ3NraWxsJ1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBpbml0ICgpIHtcbiAgICBDT05GSUcuQ29DN0xpbmsgPSB7XG4gICAgICBkb2N1bWVudENsYXNzOiBDb0M3TGlua1xuICAgIH1cbiAgICBjb25zdCBib2R5ID0gJCgnYm9keScpXG4gICAgYm9keS5vbignY2xpY2snLCAnYS5jb2M3LWxpbmsnLCBDb0M3TGluay5fb25MaW5rQ2xpY2spXG4gICAgYm9keS5vbignZHJhZ3N0YXJ0JywgJ2EuY29jNy1saW5rJywgZXZlbnQgPT4gQ29DN0xpbmsuX29uRHJhZ0NvQzdMaW5rKGV2ZW50KSlcblxuICAgIENPTkZJRy5UZXh0RWRpdG9yLmVucmljaGVycy5wdXNoKHtcbiAgICAgIHBhdHRlcm46IG5ldyBSZWdFeHAoJ0AoY29jNylcXFxcLicgKyAnKGNoZWNrfGVmZmVjdHxpdGVtfHNhbmxvc3MpJyArICdcXFxcWyhbXlxcXFxbXFxcXF1dKig/OlxcXFxbW15cXFxcW1xcXFxdXSooPzpcXFxcW1teXFxcXFtcXFxcXV0qXFxcXF0pKlteXFxcXFtcXFxcXV0qXFxcXF0pKlteXFxcXFtcXFxcXV0qKVxcXFxdJyArICcoPzp7KFtefV0rKX0pPycsICdnaScpLFxuICAgICAgZW5yaWNoZXI6IENvQzdMaW5rLl9jcmVhdGVMaW5rXG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBfbGlua0Zyb21FdmVudCAoZXZlbnQpIHtcbiAgICBjb25zdCBhID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGNvbnN0IGkgPSBhLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWxpbmstaWNvbl0nKVxuICAgIGNvbnN0IGRhdGEgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShhLmRhdGFzZXQpXG5cbiAgICBjb25zdCBvbGRUeXBlID0gZGF0YS50eXBlXG5cbiAgICBkYXRhLnR5cGUgPSAnQ29DN0xpbmsnXG4gICAgZGF0YS5pY29uID0gbnVsbFxuXG4gICAgaWYgKG9sZFR5cGUpIHtcbiAgICAgIGRhdGEubGlua1R5cGUgPSBvbGRUeXBlXG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgZGF0YS5vYmplY3QgJiZcbiAgICAgICh0eXBlb2YgZGF0YS5vYmplY3QgPT09ICdzdHJpbmcnIHx8IGRhdGEub2JqZWN0IGluc3RhbmNlb2YgU3RyaW5nKVxuICAgICkge1xuICAgICAgZGF0YS5vYmplY3QgPSBKU09OLnBhcnNlKGRhdGEub2JqZWN0KVxuICAgICAgLy8gZGF0YS5saW5rVHlwZSA9IENvQzdMaW5rLkxJTktfVFlQRS5FRkZFQ1RcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBpLmRhdGFzZXQgJiZcbiAgICAgIGkuZGF0YXNldC5saW5rSWNvbiAmJlxuICAgICAgaS5kYXRhc2V0LmxpbmtJY29uICE9PSAnZmFzIGZhLWRpY2UnXG4gICAgKSB7XG4gICAgICBkYXRhLmljb24gPSBpLmRhdGFzZXQubGlua0ljb25cbiAgICB9XG4gICAgZGF0YS5kaXNwbGF5TmFtZSA9IGEuZGF0YXNldC5kaXNwbGF5TmFtZSA/IGEuaW5uZXJUZXh0IDogbnVsbFxuICAgIGlmIChkYXRhLmRpZmZpY3VsdHkpIHtcbiAgICAgIGRhdGEuZGlmZmljdWx0eSA9IENvQzdVdGlsaXRpZXMuY29udmVydERpZmZpY3VsdHkoZGF0YS5kaWZmaWN1bHR5KVxuICAgIH1cbiAgICByZXR1cm4gZGF0YVxuICB9XG5cbiAgc3RhdGljIF9vbkRyYWdDb0M3TGluayAoZXZlbnQpIHtcbiAgICBjb25zdCBkYXRhID0gQ29DN0xpbmsuX2xpbmtGcm9tRXZlbnQoZXZlbnQpXG4gICAgZXZlbnQub3JpZ2luYWxFdmVudC5kYXRhVHJhbnNmZXIuc2V0RGF0YSgndGV4dC9wbGFpbicsIEpTT04uc3RyaW5naWZ5KGRhdGEpKVxuICB9XG5cbiAgLyoqXG4gICAqIEEgaGVscGVyIGZ1bmN0aW9uIHRvIGhhbmRsZSBvYnRhaW5pbmcgdGhlIHJlbGV2YW50IERvY3VtZW50IGZyb20gZHJvcHBlZCBkYXRhIHByb3ZpZGVkIHZpYSBhIERhdGFUcmFuc2ZlciBldmVudC5cbiAgICogVGhlIGRyb3BwZWQgZGF0YSBjb3VsZCBoYXZlOlxuICAgKiAxLiBBIGRhdGEgb2JqZWN0IGV4cGxpY2l0bHkgcHJvdmlkZWRcbiAgICogQG1lbWJlcm9mIENsaWVudERvY3VtZW50TWl4aW5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgICAgICAgICAgIFRoZSBkYXRhIG9iamVjdCBleHRyYWN0ZWQgZnJvbSBhIERhdGFUcmFuc2ZlciBldmVudFxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAgICAgICAgQWRkaXRpb25hbCBvcHRpb25zIHdoaWNoIGFmZmVjdCBkcm9wIGRhdGEgYmVoYXZpb3JcbiAgICogQHJldHVybnMge1Byb21pc2U8RG9jdW1lbnQ+fSAgIFRoZSByZXNvbHZlZCBEb2N1bWVudFxuICAgKiBAdGhyb3dzIElmIGEgRG9jdW1lbnQgY291bGQgbm90IGJlIHJldHJpZXZlZCBmcm9tIHRoZSBwcm92aWRlZCBkYXRhLlxuICAgKi9cbiAgc3RhdGljIGFzeW5jIGZyb21Ecm9wRGF0YSAoZGF0YSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgY2xzID0gbmV3IENvQzdMaW5rKClcbiAgICBjbHMub2JqZWN0ID0gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdCh7XG4gICAgICB0eXBlOiAnQ29DN0xpbmsnLFxuICAgICAgY2hlY2s6IENvQzdMaW5rLkNIRUNLX1RZUEUuQ0hFQ0ssXG4gICAgICBsaW5rVHlwZTogQ29DN0xpbmsuTElOS19UWVBFLlNLSUxMLFxuICAgICAgZGlmZmljdWx0eTogQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyLFxuICAgICAgbW9kaWZpZXI6IDAsXG4gICAgICBvYmplY3Q6IHtcbiAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FZmZlY3ROZXcnKSxcbiAgICAgICAgaWNvbjogJ2ljb25zL3N2Zy9hdXJhLnN2ZycsXG4gICAgICAgIGNoYW5nZXM6IFtdXG4gICAgICB9XG4gICAgfSwgZGF0YSlcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBbJ25hbWUnLCAnZGlzcGxheU5hbWUnLCAnaWNvbicsICdpZCcsICdwYWNrJywgJ3Nhbk1pbicsICdzYW5NYXgnLCAnc2FuUmVhc29uJ10pIHtcbiAgICAgIGNscy5vYmplY3Rba2V5XSA9IGNscy5vYmplY3Rba2V5XSA/PyAnJ1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNscy5vYmplY3Qub2JqZWN0Lmljb24gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjbHMub2JqZWN0Lm9iamVjdC5leHRlcm5hbCAhPT0gJ3VuZGVmaW5lZCcgJiYgWydodHRwJywgJ2h0dHBzJ10uaW5jbHVkZXMoY2xzLm9iamVjdC5vYmplY3QuZXh0ZXJuYWwpKSB7XG4gICAgICBjbHMub2JqZWN0Lm9iamVjdC5pY29uID0gY2xzLm9iamVjdC5vYmplY3QuZXh0ZXJuYWwgKyAnOi8vJyArIGNscy5vYmplY3Qub2JqZWN0Lmljb25cbiAgICB9XG4gICAgY2xzLm9wdGlvbnMgPSBvcHRpb25zXG4gICAgcmV0dXJuIGNsc1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIF9jcmVhdGVMaW5rIChtYXRjaCkge1xuICAgIGNvbnN0IG5hbWUgPSBtYXRjaFs0XSA/PyB1bmRlZmluZWRcbiAgICBjb25zdCBvcHRpb25zID0gbWF0Y2hbM10gPz8gdW5kZWZpbmVkXG4gICAgY29uc3QgdHlwZSA9IG1hdGNoWzJdID8/IHVuZGVmaW5lZFxuXG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIGNsczogWydjb2M3LWxpbmsnXSxcbiAgICAgIGRhdGFzZXQ6IHsgY2hlY2s6IHR5cGUgfSxcbiAgICAgIGljb246IG51bGwsXG4gICAgICBibGluZDogZmFsc2UsXG4gICAgICBuYW1lXG4gICAgfVxuXG4gICAgaWYgKHR5cGUgPT09IENvQzdMaW5rLkNIRUNLX1RZUEUuRUZGRUNUKSB7XG4gICAgICBkYXRhLmVmZmVjdCA9IEpTT04ucGFyc2Uob3B0aW9ucylcbiAgICAgIGRhdGEuZGF0YXNldC5vYmplY3QgPSBvcHRpb25zXG4gICAgICBpZiAodHlwZW9mIGRhdGEuZWZmZWN0Lmljb24gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkYXRhLmVmZmVjdC5leHRlcm5hbCAhPT0gJ3VuZGVmaW5lZCcgJiYgWydodHRwJywgJ2h0dHBzJ10uaW5jbHVkZXMoZGF0YS5lZmZlY3QuZXh0ZXJuYWwpKSB7XG4gICAgICAgIGRhdGEuZWZmZWN0Lmljb24gPSBkYXRhLmVmZmVjdC5leHRlcm5hbCArICc6Ly8nICsgZGF0YS5lZmZlY3QuaWNvblxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBtYXRjaGVzID0gb3B0aW9ucy5tYXRjaEFsbCgvW14sXSsvZ2kpXG4gICAgICBmb3IgKGNvbnN0IG1hdGNoIG9mIEFycmF5LmZyb20obWF0Y2hlcykpIHtcbiAgICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IG1hdGNoWzBdLnNwbGl0KCc6JylcbiAgICAgICAgaWYgKGtleSA9PT0gJ2ljb24nKSB7XG4gICAgICAgICAgZGF0YS5pY29uID0gdmFsdWVcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGlmIChrZXkgPT09ICdibGluZCcpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdHJ1ZVxuICAgICAgICAgICAgZGF0YS5ibGluZCA9IHRydWUgJiYgW0NvQzdMaW5rLkNIRUNLX1RZUEUuQ0hFQ0tdLmluY2x1ZGVzKHR5cGUudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3B1c2hpbmcnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRydWVcbiAgICAgICAgICAgIGRhdGEucHVzaGluZyA9IHRydWUgJiYgW0NvQzdMaW5rLkNIRUNLX1RZUEUuQ0hFQ0tdLmluY2x1ZGVzKHR5cGUudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2NvbWJhdCcpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdHJ1ZVxuICAgICAgICAgICAgZGF0YS5jb21iYXQgPSB0cnVlICYmIFtDb0M3TGluay5DSEVDS19UWVBFLkNIRUNLXS5pbmNsdWRlcyh0eXBlLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRhdGEuZGF0YXNldFtrZXldID0gdmFsdWVcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgZGF0YS5kYXRhc2V0Lmljb24gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkYXRhLmRhdGFzZXQuZXh0ZXJuYWwgIT09ICd1bmRlZmluZWQnICYmIFsnaHR0cCcsICdodHRwcyddLmluY2x1ZGVzKGRhdGEuZGF0YXNldC5leHRlcm5hbCkpIHtcbiAgICAgICAgZGF0YS5kYXRhc2V0Lmljb24gPSBkYXRhLmRhdGFzZXQuZXh0ZXJuYWwgKyAnOi8vJyArIGRhdGEuZGF0YXNldC5pY29uXG4gICAgICAgIGRhdGEuaWNvbiA9IGRhdGEuZGF0YXNldC5pY29uXG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHRpdGxlXG4gICAgY29uc3QgZGlmZmljdWx0eSA9IENvQzdDaGVjay5kaWZmaWN1bHR5U3RyaW5nKGRhdGEuZGF0YXNldC5kaWZmaWN1bHR5KVxuXG4gICAgc3dpdGNoICh0eXBlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIGNhc2UgQ29DN0xpbmsuQ0hFQ0tfVFlQRS5DSEVDSzoge1xuICAgICAgICBsZXQgaHVtYW5OYW1lID0gZGF0YS5kYXRhc2V0Lm5hbWVcbiAgICAgICAgaWYgKFsnYXR0cmlidXRlcycsICdhdHRyaWJ1dGUnLCAnYXR0cmliJywgJ2F0dHJpYnMnXS5pbmNsdWRlcyhkYXRhLmRhdGFzZXQudHlwZT8udG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICBpZiAoZGF0YS5kYXRhc2V0Lm5hbWUgPT09ICdsY2snKSB7XG4gICAgICAgICAgICBodW1hbk5hbWUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTHVjaycpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChkYXRhLmRhdGFzZXQubmFtZSA9PT0gJ3NhbicpIHtcbiAgICAgICAgICAgIGh1bWFuTmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5TYW5pdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChbJ2NoYXJhYycsICdjaGFyJywgJ2NoYXJhY3RlcmlzdGljJywgJ2NoYXJhY3RlcmlzdGljcyddLmluY2x1ZGVzKGRhdGEuZGF0YXNldC50eXBlPy50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgIGh1bWFuTmFtZSA9IENvQzdVdGlsaXRpZXMuZ2V0Q2hhcmFjdGVyaXN0aWNOYW1lcyhkYXRhLmRhdGFzZXQubmFtZSk/LmxhYmVsXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFuYW1lICYmIGRhdGEuZGF0YXNldC5uYW1lLm1hdGNoKC9eLlxcLlteXFxcXC5dKlxcLi4rJC8pKSB7XG4gICAgICAgICAgICBjb25zdCBjb2NJZE5hbWUgPSAoYXdhaXQgZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmZyb21Db0NJRChkYXRhLmRhdGFzZXQubmFtZSkpPy5bMF0/Lm5hbWVcbiAgICAgICAgICAgIGlmIChjb2NJZE5hbWUpIHtcbiAgICAgICAgICAgICAgaHVtYW5OYW1lID0gY29jSWROYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRpdGxlID0gZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICBgQ29DNy5MaW5rQ2hlY2skeyFkYXRhLmRhdGFzZXQuZGlmZmljdWx0eSA/ICcnIDogJ0RpZmYnfSR7IWRhdGEuZGF0YXNldC5tb2RpZmllciA/ICcnIDogJ01vZGlmJ30ke2RhdGEucHVzaGluZyA/ICdQdXNoaW5nJyA6ICcnfWAsXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGlmZmljdWx0eSxcbiAgICAgICAgICAgIG1vZGlmaWVyOiBkYXRhLmRhdGFzZXQubW9kaWZpZXIsXG4gICAgICAgICAgICBuYW1lOiBodW1hbk5hbWVcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBDb0M3TGluay5DSEVDS19UWVBFLlNBTkxPU1M6XG4gICAgICAgIHRpdGxlID0gZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICBgQ29DNy5MaW5rU2FuTG9zcyR7IWRhdGEuZGF0YXNldC5kaWZmaWN1bHR5ID8gJycgOiAnRGlmZid9JHshZGF0YS5kYXRhc2V0Lm1vZGlmaWVyID8gJycgOiAnTW9kaWYnfWAsXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGlmZmljdWx0eSxcbiAgICAgICAgICAgIG1vZGlmaWVyOiBkYXRhLmRhdGFzZXQubW9kaWZpZXIsXG4gICAgICAgICAgICBzYW5NaW46IGRhdGEuZGF0YXNldC5zYW5NaW4sXG4gICAgICAgICAgICBzYW5NYXg6IGRhdGEuZGF0YXNldC5zYW5NYXhcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSBDb0M3TGluay5DSEVDS19UWVBFLklURU06XG4gICAgICAgIHRpdGxlID0gZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICBgQ29DNy5MaW5rSXRlbSR7IWRhdGEuZGF0YXNldC5kaWZmaWN1bHR5ID8gJycgOiAnRGlmZid9JHshZGF0YS5kYXRhc2V0Lm1vZGlmaWVyID8gJycgOiAnTW9kaWYnfWAsXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGlmZmljdWx0eSxcbiAgICAgICAgICAgIG1vZGlmaWVyOiBkYXRhLmRhdGFzZXQubW9kaWZpZXIsXG4gICAgICAgICAgICBuYW1lOiBkYXRhLmRhdGFzZXQubmFtZVxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlIENvQzdMaW5rLkNIRUNLX1RZUEUuRUZGRUNUOlxuICAgICAgICB0aXRsZSA9IGRhdGEuZWZmZWN0LmxhYmVsXG4gICAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICBkYXRhLm5hbWUgPSB0aXRsZVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhLmRhdGFzZXQuZGlzcGxheU5hbWUgPSB0cnVlXG4gICAgfVxuXG4gICAgY29uc3QgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKVxuICAgIGEudGl0bGUgPSBnYW1lLnVzZXIuaXNHTSA/IGRhdGEubmFtZSA6IHRpdGxlXG4gICAgYS5jbGFzc0xpc3QuYWRkKC4uLmRhdGEuY2xzKVxuICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGEuZGF0YXNldCkpIHtcbiAgICAgIGEuZGF0YXNldFtrXSA9IHZcbiAgICB9XG4gICAgYS5kcmFnZ2FibGUgPSB0cnVlXG4gICAgZGF0YS5pY29uID0gZGF0YS5pY29uID8/IGRhdGEuZWZmZWN0Py5pY29uID8/ICdmYXMgZmEtZGljZSdcbiAgICAvLyBjaGVjayBpZiBpdCdzIGFuIGltYWdlIG9yIGFuIGljb25cbiAgICBpZiAoZGF0YS5pY29uLmluY2x1ZGVzKCdcXFxcJykgfHwgZGF0YS5pY29uLmluY2x1ZGVzKCcuJykpIHtcbiAgICAgIGRhdGEuaW1nID0gZGF0YS5pY29uXG4gICAgfVxuICAgIGlmIChkYXRhLmJsaW5kKSB7XG4gICAgICBhLmlubmVySFRNTCArPSAnPGkgY2xhc3M9XCJmYXMgZmEtZXllLXNsYXNoXCI+PC9pPidcbiAgICB9XG4gICAgaWYgKGRhdGEuaW1nKSB7XG4gICAgICBhLmlubmVySFRNTCArPSBgPGltZyBkYXRhLWxpbmstaWNvbj1cIiR7ZGF0YS5pY29ufVwiIHNyYz1cIiR7ZGF0YS5pbWd9XCI+YFxuICAgIH0gZWxzZSB7XG4gICAgICBhLmlubmVySFRNTCArPSBgPGkgZGF0YS1saW5rLWljb249XCIke2RhdGEuaWNvbn1cIiBjbGFzcz1cImxpbmstaWNvbiAke2RhdGEuaWNvbn1cIj48L2k+YFxuICAgIH1cbiAgICBhLmlubmVySFRNTCArPSBgPHNwYW4+JHtkYXRhLm5hbWV9PC9zcGFuPmBcblxuICAgIHJldHVybiBhXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgY29udGVudCBsaW5rIGZvciB0aGlzIGRvY3VtZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnREYXRhICAgICAgICAgICAgICAgICAgICAgVGhlIHBhcnNlZCBvYmplY3Qgb2YgZGF0YSBwcm92aWRlZCBieSB0aGUgZHJvcCB0cmFuc2ZlciBldmVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAgICAgICAgICAgICAgICAgICAgIEFkZGl0aW9uYWwgb3B0aW9ucyB0byBjb25maWd1cmUgbGluayBnZW5lcmF0aW9uLlxuICAgKiBAcGFyYW0ge0NsaWVudERvY3VtZW50fSBbb3B0aW9ucy5yZWxhdGl2ZVRvXSAgQSBkb2N1bWVudCB0byBnZW5lcmF0ZSBhIGxpbmsgcmVsYXRpdmUgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sYWJlbF0gICAgICAgICAgICAgICBBIGN1c3RvbSBsYWJlbCB0byB1c2UgaW5zdGVhZCBvZiB0aGUgZG9jdW1lbnQncyBuYW1lLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF9jcmVhdGVEb2N1bWVudExpbmsgKGV2ZW50RGF0YSwgeyByZWxhdGl2ZVRvLCBsYWJlbCB9ID0ge30pIHtcbiAgICBpZiAoIWV2ZW50RGF0YS5jaGVjaykge1xuICAgICAgcmV0dXJuICcnXG4gICAgfVxuICAgIHN3aXRjaCAoZXZlbnREYXRhLmNoZWNrLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIGNhc2UgQ29DN0xpbmsuQ0hFQ0tfVFlQRS5DSEVDSzoge1xuICAgICAgICAvLyBAY29jNy5jaGVja1t0eXBlOmNoYXJhYyxuYW1lOlNUUixkaWZmaWN1bHR5OissbW9kaWZpZXI6LTFde0hhcmQgU1RSIGNoZWNrKC0xKX1cbiAgICAgICAgLy8gQGNvYzcuY2hlY2tbYmxpbmQsdHlwZTpjaGFyYWN0ZXJpc3RpYyxuYW1lOnN0cixkaWZmaWN1bHR5OjEsbW9kaWZpZXI6MCxpY29uOmZhIGZhLWxpbmtde1N0cmVuZ3RofVxuICAgICAgICAvLyBAY29jNy5jaGVja1tibGluZCx0eXBlOmF0dHJpYnV0ZSxuYW1lOmxjayxkaWZmaWN1bHR5OjEsbW9kaWZpZXI6MCxpY29uOmZhIGZhLWxpbmtde0x1Y2t9XG4gICAgICAgIC8vIEBjb2M3LmNoZWNrW2JsaW5kLHR5cGU6c2tpbGwsbmFtZTpMYXcsZGlmZmljdWx0eToxLG1vZGlmaWVyOjAsaWNvbjpmYSBmYS1saW5rXXtMYXd9XG4gICAgICAgIGlmICghZXZlbnREYXRhLmxpbmtUeXBlIHx8ICghZXZlbnREYXRhLm5hbWUgJiYgIWV2ZW50RGF0YS5yb2xscykpIHtcbiAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgfVxuICAgICAgICBsZXQgb3B0aW9ucyA9IGAke2V2ZW50RGF0YS5ibGluZCA/ICdibGluZCwnIDogJyd9JHtldmVudERhdGEucHVzaGluZyA/ICdwdXNoaW5nLCcgOiAnJ310eXBlOiR7ZXZlbnREYXRhLmxpbmtUeXBlfWBcbiAgICAgICAgaWYgKGV2ZW50RGF0YS5uYW1lKSB7XG4gICAgICAgICAgb3B0aW9ucyArPSBgLG5hbWU6JHtldmVudERhdGEubmFtZX1gXG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnREYXRhLnJvbGxzKSB7XG4gICAgICAgICAgb3B0aW9ucyArPSBgLHJvbGxzOiR7ZXZlbnREYXRhLnJvbGxzfWBcbiAgICAgICAgICBpZiAoZXZlbnREYXRhLmNvbWJhdCkge1xuICAgICAgICAgICAgb3B0aW9ucyArPSAnLGNvbWJhdCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBldmVudERhdGEuZGlmZmljdWx0eSAhPT0gJ3VuZGVmaW5lZCcgJiYgZXZlbnREYXRhLmRpZmZpY3VsdHkgIT09IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhcikge1xuICAgICAgICAgIG9wdGlvbnMgKz0gYCxkaWZmaWN1bHR5OiR7ZXZlbnREYXRhLmRpZmZpY3VsdHl9YFxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZXZlbnREYXRhLm1vZGlmaWVyICE9PSAndW5kZWZpbmVkJyAmJiBldmVudERhdGEubW9kaWZpZXIgIT09IDApIHtcbiAgICAgICAgICBvcHRpb25zICs9IGAsbW9kaWZpZXI6JHtldmVudERhdGEubW9kaWZpZXJ9YFxuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudERhdGEuaWNvbikge1xuICAgICAgICAgIGNvbnN0IHBhcnRzID0gZXZlbnREYXRhLmljb24ubWF0Y2goL14oaHR0cHM/KTpcXC9cXC8oLispJC8pXG4gICAgICAgICAgaWYgKHBhcnRzKSB7XG4gICAgICAgICAgICBvcHRpb25zICs9IGAsZXh0ZXJuYWw6JHtwYXJ0c1sxXX0saWNvbjoke3BhcnRzWzJdfWBcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9ucyArPSBgLGljb246JHtldmVudERhdGEuaWNvbn1gXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudERhdGEucGFjaykge1xuICAgICAgICAgIG9wdGlvbnMgKz0gYCxwYWNrOiR7ZXZlbnREYXRhLnBhY2t9YFxuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudERhdGEuaWQpIHtcbiAgICAgICAgICBvcHRpb25zICs9IGAsaWQ6JHtldmVudERhdGEuaWR9YFxuICAgICAgICB9XG4gICAgICAgIGxldCBsaW5rID0gYEBjb2M3LmNoZWNrWyR7b3B0aW9uc31dYFxuICAgICAgICBjb25zdCBkaXNwbGF5TmFtZSA9IGV2ZW50RGF0YS5kaXNwbGF5TmFtZSA/PyAobGFiZWwgPz8gJycpXG4gICAgICAgIGlmIChkaXNwbGF5TmFtZSkge1xuICAgICAgICAgIGxpbmsgKz0gYHske2Rpc3BsYXlOYW1lfX1gXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpbmtcbiAgICAgIH1cblxuICAgICAgY2FzZSBDb0M3TGluay5DSEVDS19UWVBFLlNBTkxPU1M6IHtcbiAgICAgICAgLy8gQGNvYzcuc2FubG9zc1tzYW5NYXg6MUQ2LHNhbk1pbjoxLGRpZmZpY3VsdHk6KyssbW9kaWZpZXI6LTFde0hhcmQgU2FuIExvc3MgKC0xKSAxLzFENn1cbiAgICAgICAgaWYgKCFldmVudERhdGEuc2FuTWF4IHx8ICFldmVudERhdGEuc2FuTWluKSB7XG4gICAgICAgICAgcmV0dXJuICcnXG4gICAgICAgIH1cbiAgICAgICAgbGV0IG9wdGlvbnMgPSBgJHtldmVudERhdGEuYmxpbmQgPyAnYmxpbmQsJyA6ICcnfXNhbk1heDoke2V2ZW50RGF0YS5zYW5NYXh9LHNhbk1pbjoke2V2ZW50RGF0YS5zYW5NaW59YFxuICAgICAgICBpZiAoZXZlbnREYXRhLnNhblJlYXNvbikge1xuICAgICAgICAgIG9wdGlvbnMgKz0gYCxzYW5SZWFzb246JHtldmVudERhdGEuc2FuUmVhc29ufWBcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnREYXRhLmRpZmZpY3VsdHkgJiYgZXZlbnREYXRhLmRpZmZpY3VsdHkgIT09IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhcikge1xuICAgICAgICAgIG9wdGlvbnMgKz0gYCxkaWZmaWN1bHR5OiR7ZXZlbnREYXRhLmRpZmZpY3VsdHl9YFxuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudERhdGEubW9kaWZpZXIgJiYgZXZlbnREYXRhLm1vZGlmaWVyICE9PSAwKSB7XG4gICAgICAgICAgb3B0aW9ucyArPSBgLG1vZGlmaWVyOiR7ZXZlbnREYXRhLm1vZGlmaWVyfWBcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnREYXRhLmljb24pIHtcbiAgICAgICAgICBjb25zdCBwYXJ0cyA9IGV2ZW50RGF0YS5pY29uLm1hdGNoKC9eKGh0dHBzPyk6XFwvXFwvKC4rKSQvKVxuICAgICAgICAgIGlmIChwYXJ0cykge1xuICAgICAgICAgICAgb3B0aW9ucyArPSBgLGV4dGVybmFsOiR7cGFydHNbMV19LGljb246JHtwYXJ0c1syXX1gXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMgKz0gYCxpY29uOiR7ZXZlbnREYXRhLmljb259YFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgbGluayA9IGBAY29jNy5zYW5sb3NzWyR7b3B0aW9uc31dYFxuICAgICAgICBjb25zdCBkaXNwbGF5TmFtZSA9IGV2ZW50RGF0YS5kaXNwbGF5TmFtZSA/PyAobGFiZWwgPz8gJycpXG4gICAgICAgIGlmIChkaXNwbGF5TmFtZSkge1xuICAgICAgICAgIGxpbmsgKz0gYHske2Rpc3BsYXlOYW1lfX1gXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpbmtcbiAgICAgIH1cblxuICAgICAgY2FzZSBDb0M3TGluay5DSEVDS19UWVBFLklURU06IHtcbiAgICAgICAgLy8gQGNvYzcuaXRlbVt0eXBlOm9wdGlvbmFsLG5hbWU6U2hvdGd1bixkaWZmaWN1bHR5OissbW9kaWZpZXI6LTFde0hhcmQgU2hpdGd1biBjaGVjaygtMSl9XG4gICAgICAgIGlmICghZXZlbnREYXRhLm5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgfVxuICAgICAgICBsZXQgb3B0aW9ucyA9IGAke2V2ZW50RGF0YS5ibGluZCA/ICdibGluZCwnIDogJyd9bmFtZToke2V2ZW50RGF0YS5uYW1lfWBcbiAgICAgICAgaWYgKGV2ZW50RGF0YS5pY29uKSB7XG4gICAgICAgICAgY29uc3QgcGFydHMgPSBldmVudERhdGEuaWNvbi5tYXRjaCgvXihodHRwcz8pOlxcL1xcLyguKykkLylcbiAgICAgICAgICBpZiAocGFydHMpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgKz0gYCxleHRlcm5hbDoke3BhcnRzWzFdfSxpY29uOiR7cGFydHNbMl19YFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zICs9IGAsaWNvbjoke2V2ZW50RGF0YS5pY29ufWBcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50RGF0YS5wYWNrKSB7XG4gICAgICAgICAgb3B0aW9ucyArPSBgLHBhY2s6JHtldmVudERhdGEucGFja31gXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50RGF0YS5pZCkge1xuICAgICAgICAgIG9wdGlvbnMgKz0gYCxpZDoke2V2ZW50RGF0YS5pZH1gXG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxpbmsgPSBgQGNvYzcuaXRlbVske29wdGlvbnN9XWBcbiAgICAgICAgY29uc3QgZGlzcGxheU5hbWUgPSBldmVudERhdGEuZGlzcGxheU5hbWUgPz8gKGxhYmVsID8/ICcnKVxuICAgICAgICBpZiAoZGlzcGxheU5hbWUpIHtcbiAgICAgICAgICBsaW5rICs9IGB7JHtkaXNwbGF5TmFtZX19YFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaW5rXG4gICAgICB9XG5cbiAgICAgIGNhc2UgQ29DN0xpbmsuQ0hFQ0tfVFlQRS5FRkZFQ1Q6IHtcbiAgICAgICAgLy8gQGNvYzcuZWZmZWN0W3tcImxhYmVsXCI6XCJLYXBvd1wiLFwiaWNvblwiOlwiaWNvbnMvc3ZnL2F1cmEuc3ZnXCIsXCJjaGFuZ2VzXCI6W3tcImtleVwiOlwic3lzdGVtLnVua25vd24udGVzdFwiLFwibW9kZVwiOjIsXCJ2YWx1ZVwiOlwiNVwifV0sXCJ0aW50XCI6XCIjZTkxNjE2XCIsXCJkdXJhdGlvblwiOntcInNlY29uZHNcIjpudWxsLFwicm91bmRzXCI6NixcInR1cm5zXCI6bnVsbH19XXtLYXBvd2luZ31cbiAgICAgICAgLy8gY29uc3QgZWZmZWN0RGF0YSA9IGZvdW5kcnkudXRpbHMuZGVlcENsb25lKGV2ZW50RGF0YSlcbiAgICAgICAgLy8gaWYgKCF0aGlzLmVmZmVjdElzVGVtcCkgZGVsZXRlIGVmZmVjdERhdGEuZHVyYXRpb25cbiAgICAgICAgLy8gaWYgKGVmZmVjdERhdGEuY2hhbmdlcz8ubGVuZ3RoID09PSAwKSBkZWxldGUgZWZmZWN0RGF0YS5jaGFuZ2VzXG4gICAgICAgIC8vIGlmICghZWZmZWN0RGF0YS5kaXNhYmxlZCkgZGVsZXRlIGVmZmVjdERhdGEuZGlzYWJsZWRcbiAgICAgICAgLy8gaWYgKCFlZmZlY3REYXRhLnRpbnQpIGRlbGV0ZSBlZmZlY3REYXRhLnRpbnRcbiAgICAgICAgY29uc3QgcGFydHMgPSBldmVudERhdGEub2JqZWN0Lmljb24ubWF0Y2goL14oaHR0cHM/KTpcXC9cXC8oLispJC8pXG4gICAgICAgIGlmIChwYXJ0cykge1xuICAgICAgICAgIGV2ZW50RGF0YS5vYmplY3QuZXh0ZXJuYWwgPSBwYXJ0c1sxXVxuICAgICAgICAgIGV2ZW50RGF0YS5vYmplY3QuaWNvbiA9IHBhcnRzWzJdXG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxpbmsgPSBgQGNvYzcuZWZmZWN0WyR7SlNPTi5zdHJpbmdpZnkoZXZlbnREYXRhLm9iamVjdCl9XWBcbiAgICAgICAgY29uc3QgZGlzcGxheU5hbWUgPSBldmVudERhdGEuZGlzcGxheU5hbWUgPz8gKGxhYmVsID8/ICcnKVxuICAgICAgICBpZiAoZGlzcGxheU5hbWUpIHtcbiAgICAgICAgICBsaW5rICs9IGB7JHtkaXNwbGF5TmFtZX19YFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaW5rXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnPydcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBfb25MaW5rQWN0b3JDbGljayAoYWN0b3IsIG9wdGlvbnMsIHsgc2hpZnRLZXkgPSBmYWxzZSB9ID0ge30pIHtcbiAgICBzd2l0Y2ggKG9wdGlvbnMuY2hlY2spIHtcbiAgICAgIGNhc2UgQ29DN0xpbmsuQ0hFQ0tfVFlQRS5DSEVDSzpcbiAgICAgICAgaWYgKFsnY2hhcmFjJywgJ2NoYXInLCAnY2hhcmFjdGVyaXN0aWMnLCAnY2hhcmFjdGVyaXN0aWNzJ10uaW5jbHVkZXMob3B0aW9ucy5saW5rVHlwZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgIHJldHVybiBhY3Rvci5jaGFyYWN0ZXJpc3RpY0NoZWNrKFxuICAgICAgICAgICAgb3B0aW9ucy5uYW1lLFxuICAgICAgICAgICAgc2hpZnRLZXksXG4gICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIGlmIChbJ3NraWxsJ10uaW5jbHVkZXMob3B0aW9ucy5saW5rVHlwZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgIHJldHVybiBhY3Rvci5za2lsbENoZWNrKG9wdGlvbnMsIHNoaWZ0S2V5LCBvcHRpb25zKVxuICAgICAgICB9XG4gICAgICAgIGlmIChbJ2F0dHJpYnV0ZXMnLCAnYXR0cmlidXRlJywgJ2F0dHJpYicsICdhdHRyaWJzJ10uaW5jbHVkZXMob3B0aW9ucy5saW5rVHlwZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgIHJldHVybiBhY3Rvci5hdHRyaWJ1dGVDaGVjayhvcHRpb25zLm5hbWUsIHNoaWZ0S2V5LCBvcHRpb25zKVxuICAgICAgICB9XG4gICAgICAgIGlmIChbJ2NvbWJpbmVkYWxsJywgJ2NvbWJpbmVkYW55JywgJ29wcG9zZWQnXS5pbmNsdWRlcyhvcHRpb25zLmxpbmtUeXBlLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgcmV0dXJuIENvQzdHcm91cE1lc3NhZ2UuY3JlYXRlR3JvdXBNZXNzYWdlKHtcbiAgICAgICAgICAgIHR5cGU6IG9wdGlvbnMubGlua1R5cGUudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgIHJvbGxSZXF1aXNpdGVzOiBvcHRpb25zLnJvbGxzLnNwbGl0KCcmJicpLFxuICAgICAgICAgICAgaXNDb21iYXQ6IEJvb2xlYW4ob3B0aW9ucy5jb21iYXQgPz8gZmFsc2UpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlIENvQzdMaW5rLkNIRUNLX1RZUEUuU0FOTE9TUzpcbiAgICAgICAgU2FuQ2hlY2tDYXJkLmNyZWF0ZShhY3Rvci5hY3RvcktleSwgb3B0aW9ucywge1xuICAgICAgICAgIGZhc3RGb3J3YXJkOiBzaGlmdEtleVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm5cblxuICAgICAgY2FzZSBDb0M3TGluay5DSEVDS19UWVBFLklURU06XG4gICAgICAgIHJldHVybiBhY3Rvci53ZWFwb25DaGVjayhvcHRpb25zLCBzaGlmdEtleSlcblxuICAgICAgY2FzZSBDb0M3TGluay5DSEVDS19UWVBFLkVGRkVDVDpcbiAgICAgICAgYXdhaXQgYWN0b3IuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0FjdGl2ZUVmZmVjdCcsIFt7XG4gICAgICAgICAgbGFiZWw6IG9wdGlvbnMub2JqZWN0LmxhYmVsLFxuICAgICAgICAgIGljb246IG9wdGlvbnMub2JqZWN0Lmljb24sXG4gICAgICAgICAgY2hhbmdlczogb3B0aW9ucy5vYmplY3QuY2hhbmdlc1xuICAgICAgICB9XSlcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgdG9DaGF0TWVzc2FnZSAob3B0aW9ucykge1xuICAgIGNvbnN0IG9wdGlvbiA9IHtcbiAgICAgIHNwZWFrZXI6IHtcbiAgICAgICAgYWxpYXM6IGdhbWUudXNlci5uYW1lXG4gICAgICB9XG4gICAgfVxuICAgIGxldCBtZXNzYWdlXG4gICAgY29uc3QgbGluayA9IChuZXcgQ29DN0xpbmsoKSkuX2NyZWF0ZURvY3VtZW50TGluayhvcHRpb25zKVxuICAgIGlmIChvcHRpb25zLmNoZWNrID09PSBDb0M3TGluay5DSEVDS19UWVBFLkVGRkVDVCkge1xuICAgICAgbWVzc2FnZSA9IGA8ZGl2IGNsYXNzPVwiZWZmZWN0LW1lc3NhZ2VcIj4ke2xpbmt9PC9kaXY+YFxuICAgIH0gZWxzZSB7XG4gICAgICBtZXNzYWdlID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5NZXNzYWdlQ2hlY2tSZXF1ZXN0ZWRXYWl0Jywge1xuICAgICAgICBjaGVjazogbGlua1xuICAgICAgfSlcbiAgICB9XG4gICAgY2hhdEhlbHBlci5jcmVhdGVNZXNzYWdlKG51bGwsIG1lc3NhZ2UsIG9wdGlvbilcbiAgfVxuXG4gIHN0YXRpYyB0b1doaXNwZXJNZXNzYWdlIChvcHRpb25zLCBhY3RvcnMpIHtcbiAgICBmb3IgKGNvbnN0IGFjdG9yIG9mIGFjdG9ycykge1xuICAgICAgY29uc3Qgb3B0aW9uID0ge1xuICAgICAgICBzcGVha2VyOiB7XG4gICAgICAgICAgYWxpYXM6IGdhbWUudXNlci5uYW1lXG4gICAgICAgIH0sXG4gICAgICAgIHdoaXNwZXI6IGFjdG9yLm93bmVycy5tYXAoYSA9PiBhLmlkKVxuICAgICAgfVxuICAgICAgbGV0IG1lc3NhZ2VcbiAgICAgIGNvbnN0IGxpbmsgPSAobmV3IENvQzdMaW5rKCkpLl9jcmVhdGVEb2N1bWVudExpbmsob3B0aW9ucylcbiAgICAgIGlmIChvcHRpb25zLmNoZWNrID09PSBDb0M3TGluay5DSEVDS19UWVBFLkVGRkVDVCkge1xuICAgICAgICBtZXNzYWdlID0gYDxkaXYgY2xhc3M9XCJlZmZlY3QtbWVzc2FnZVwiPiR7bGlua308L2Rpdj5gXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXNzYWdlID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5NZXNzYWdlVGFyZ2V0Q2hlY2tSZXF1ZXN0ZWQnLCB7XG4gICAgICAgICAgbmFtZTogYWN0b3IubmFtZSxcbiAgICAgICAgICBjaGVjazogbGlua1xuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgY2hhdEhlbHBlci5jcmVhdGVNZXNzYWdlKG51bGwsIG1lc3NhZ2UsIG9wdGlvbilcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVHJpZ2dlciBhIGNoZWNrIHdoZW4gYSBsaW5rIGlzIGNsaWNrZWQuXG4gICAqIERlcGVuZGluZyB0aGUgb3JpZ2luXG4gICAqIEBwYXJhbSB7Kn0gZXZlbnRcbiAgICpcbiAgICovXG4gIHN0YXRpYyBhc3luYyBfb25MaW5rQ2xpY2sgKGV2ZW50KSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IENvQzdMaW5rLl9saW5rRnJvbUV2ZW50KGV2ZW50KVxuXG4gICAgaWYgKGdhbWUudXNlci5pc0dNKSB7XG4gICAgICBpZiAoaXNDdHJsS2V5KGV2ZW50KSkge1xuICAgICAgICBDb0M3Q29udGVudExpbmtEaWFsb2cuY3JlYXRlKG9wdGlvbnMpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgaWYgKGNhbnZhcy50b2tlbnMuY29udHJvbGxlZC5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiBjYW52YXMudG9rZW5zLmNvbnRyb2xsZWQpIHtcbiAgICAgICAgICBDb0M3TGluay5fb25MaW5rQWN0b3JDbGljayh0b2tlbi5hY3Rvciwgb3B0aW9ucywgeyBzaGlmdEtleTogZXZlbnQuc2hpZnRLZXkgfSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGNvbnN0IHNwZWFrZXIgPSBDaGF0TWVzc2FnZS5nZXRTcGVha2VyKClcbiAgICAgIGNvbnN0IGFjdG9yID0gQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlckFjdG9yKHNwZWFrZXIpXG4gICAgICBpZiAoYWN0b3IpIHtcbiAgICAgICAgQ29DN0xpbmsuX29uTGlua0FjdG9yQ2xpY2soYWN0b3IsIG9wdGlvbnMsIHsgc2hpZnRLZXk6IGV2ZW50LnNoaWZ0S2V5IH0pXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgQ29DN0xpbmsudG9DaGF0TWVzc2FnZShvcHRpb25zKVxuICAgICAgcmV0dXJuXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNwZWFrZXIgPSBDaGF0TWVzc2FnZS5nZXRTcGVha2VyKClcbiAgICAgIGxldCBhY3RvciA9IENoYXRNZXNzYWdlLmdldFNwZWFrZXJBY3RvcihzcGVha2VyKVxuICAgICAgaWYgKCFhY3Rvcikge1xuICAgICAgICBjb25zdCBhY3RvcnMgPSBnYW1lLmFjdG9ycy5maWx0ZXIoYSA9PiAoYS5vd25lcnNoaXBbZ2FtZS51c2VyLmlkXSA/PyBhLm93bmVyc2hpcC5kZWZhdWx0KSA9PT0gQ09OU1QuRE9DVU1FTlRfT1dORVJTSElQX0xFVkVMUy5PV05FUilcbiAgICAgICAgaWYgKGFjdG9ycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBhY3RvciA9IGFjdG9yc1swXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGFjdG9ycyA9IGdhbWUuYWN0b3JzLmZpbHRlcihhID0+IChhLm93bmVyc2hpcFtnYW1lLnVzZXIuaWRdID8/IGEub3duZXJzaGlwLmRlZmF1bHQpID09PSBDT05TVC5ET0NVTUVOVF9PV05FUlNISVBfTEVWRUxTLk9CU0VSVkVSKVxuICAgICAgICAgIGlmIChhY3RvcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBhY3RvciA9IGFjdG9yc1swXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGFjdG9yKSB7XG4gICAgICAgIENvQzdMaW5rLl9vbkxpbmtBY3RvckNsaWNrKGFjdG9yLCBvcHRpb25zLCB7IHNoaWZ0S2V5OiBldmVudC5zaGlmdEtleSB9KVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gICAgdWkubm90aWZpY2F0aW9ucy53YXJuKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5XYXJuTm9Db250cm9sbGVkQWN0b3InKSlcbiAgfVxuXG4gIHNldFZhbHVlIChrZXksIHZhbHVlKSB7XG4gICAgdGhpcy5vYmplY3Rba2V5XSA9IHZhbHVlXG4gIH1cblxuICBnZXQgbGluayAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZURvY3VtZW50TGluayh0aGlzLm9iamVjdClcbiAgfVxuXG4gIGdldCBpZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMub2JqZWN0LmlkXG4gIH1cblxuICBnZXQgcGFjayAoKSB7XG4gICAgcmV0dXJuIHRoaXMub2JqZWN0LnBhY2tcbiAgfVxuXG4gIGdldCBjaGVja1R5cGUgKCkge1xuICAgIHJldHVybiB0aGlzLm9iamVjdC5jaGVja1xuICB9XG5cbiAgZ2V0IGRpZmZpY3VsdHkgKCkge1xuICAgIHJldHVybiB0aGlzLm9iamVjdC5kaWZmaWN1bHR5XG4gIH1cblxuICBnZXQgaWNvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMub2JqZWN0Lmljb25cbiAgfVxuXG4gIGdldCBkaXNwbGF5TmFtZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMub2JqZWN0LmRpc3BsYXlOYW1lXG4gIH1cblxuICBnZXQgbW9kaWZpZXIgKCkge1xuICAgIHJldHVybiB0aGlzLm9iamVjdC5tb2RpZmllclxuICB9XG5cbiAgZ2V0IGxpbmtUeXBlICgpIHtcbiAgICByZXR1cm4gdGhpcy5vYmplY3QubGlua1R5cGVcbiAgfVxuXG4gIGdldCBzYW5NaW4gKCkge1xuICAgIHJldHVybiB0aGlzLm9iamVjdC5zYW5NaW5cbiAgfVxuXG4gIGdldCBzYW5NYXggKCkge1xuICAgIHJldHVybiB0aGlzLm9iamVjdC5zYW5NYXhcbiAgfVxuXG4gIGdldCBzYW5SZWFzb24gKCkge1xuICAgIHJldHVybiB0aGlzLm9iamVjdC5zYW5SZWFzb25cbiAgfVxuXG4gIGdldCBlZmZlY3QgKCkge1xuICAgIHJldHVybiB0aGlzLm9iamVjdC5vYmplY3RcbiAgfVxuXG4gIGdldCBjaGVja05hbWUgKCkge1xuICAgIGlmICh0aGlzLmlzQ2hhcmFjdGVyaXN0aWNDaGVjaykge1xuICAgICAgY29uc3QgY2hhcmFjdGVyaXN0aWNzID0gQ29DQWN0b3IuZ2V0Q2hhcmFjdGVyaXN0aWNEZWZpbml0aW9uKClcbiAgICAgIHJldHVybiBjaGFyYWN0ZXJpc3RpY3MuZmluZChjID0+IGMua2V5ID09PSB0aGlzLm9iamVjdC5uYW1lIHx8IGMuc2hvcnROYW1lID09PSB0aGlzLm9iamVjdC5uYW1lIHx8IGMubGFiZWwgPT09IHRoaXMub2JqZWN0Lm5hbWUpPy5rZXkgPz8gJydcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMub2JqZWN0Lm5hbWVcbiAgfVxuXG4gIGdldCBpc0NoZWNrICgpIHtcbiAgICByZXR1cm4gdGhpcy5vYmplY3QuY2hlY2sgPT09IENvQzdMaW5rLkNIRUNLX1RZUEUuQ0hFQ0tcbiAgfVxuXG4gIGdldCBpc0NoYXJhY3RlcmlzdGljQ2hlY2sgKCkge1xuICAgIHJldHVybiB0aGlzLmlzQ2hlY2sgJiYgdGhpcy5vYmplY3QubGlua1R5cGUgPT09IENvQzdMaW5rLkxJTktfVFlQRS5DSEFSQUNURVJJU1RJQ1xuICB9XG5cbiAgZ2V0IGlzQXR0cmlidXRlQ2hlY2sgKCkge1xuICAgIHJldHVybiB0aGlzLmlzQ2hlY2sgJiYgdGhpcy5vYmplY3QubGlua1R5cGUgPT09IENvQzdMaW5rLkxJTktfVFlQRS5BVFRSSUJVVEVcbiAgfVxuXG4gIGdldCBpc1NraWxsQ2hlY2sgKCkge1xuICAgIHJldHVybiB0aGlzLmlzQ2hlY2sgJiYgdGhpcy5vYmplY3QubGlua1R5cGUgPT09IENvQzdMaW5rLkxJTktfVFlQRS5TS0lMTFxuICB9XG5cbiAgZ2V0IGlzSXRlbUNoZWNrICgpIHtcbiAgICByZXR1cm4gdGhpcy5vYmplY3QuY2hlY2sgPT09IENvQzdMaW5rLkNIRUNLX1RZUEUuSVRFTVxuICB9XG5cbiAgZ2V0IGlzU2FuTG9zc0NoZWNrICgpIHtcbiAgICByZXR1cm4gdGhpcy5vYmplY3QuY2hlY2sgPT09IENvQzdMaW5rLkNIRUNLX1RZUEUuU0FOTE9TU1xuICB9XG5cbiAgZ2V0IGlzRWZmZWN0ICgpIHtcbiAgICByZXR1cm4gdGhpcy5vYmplY3QuY2hlY2sgPT09IENvQzdMaW5rLkNIRUNLX1RZUEUuRUZGRUNUXG4gIH1cblxuICBnZXQgaXNCbGluZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNDaGVjayAmJiB0aGlzLm9iamVjdC5ibGluZFxuICB9XG5cbiAgZ2V0IGlzUHVzaGluZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNDaGVjayAmJiB0aGlzLm9iamVjdC5wdXNoaW5nXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBjYW52YXMsIENPTlNULCBGb3JtQXBwbGljYXRpb24sIGZvdW5kcnksIGdhbWUsIHVpICovXG5pbXBvcnQgeyBDb0NBY3RvciB9IGZyb20gJy4uL2FjdG9ycy9hY3Rvci5qcydcbmltcG9ydCB7IENvQzdDaGVjayB9IGZyb20gJy4uL2NoZWNrLmpzJ1xuaW1wb3J0IHsgQ29DN0xpbmsgfSBmcm9tICcuL2NvYzctbGluay5qcydcbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi91dGlsaXRpZXMuanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3Q29udGVudExpbmtEaWFsb2cgZXh0ZW5kcyBGb3JtQXBwbGljYXRpb24ge1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zICgpIHtcbiAgICByZXR1cm4gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgaWQ6ICdsaW5rLWNyZWF0aW9uJyxcbiAgICAgIGNsYXNzZXM6IFsnY29jNycsICdhY3RpdmUtZWZmZWN0LXNoZWV0J10sXG4gICAgICB0aXRsZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNyZWF0ZUxpbmsnKSxcbiAgICAgIGRyYWdEcm9wOiBbeyBkcmFnU2VsZWN0b3I6IG51bGwsIGRyb3BTZWxlY3RvcjogJy5jb250YWluZXInIH1dLFxuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvbGluay1jcmVhdGlvbi5odG1sJyxcbiAgICAgIGNsb3NlT25TdWJtaXQ6IGZhbHNlLFxuICAgICAgd2lkdGg6IDU2MCxcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgdGFiczogW1xuICAgICAgICB7XG4gICAgICAgICAgbmF2U2VsZWN0b3I6ICcudGFicycsXG4gICAgICAgICAgY29udGVudFNlbGVjdG9yOiAnLmVmZmVjdC1vcHRpb25zJyxcbiAgICAgICAgICBpbml0aWFsOiAnZGV0YWlscydcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pXG4gIH1cblxuICBhc3luYyBnZXREYXRhICgpIHtcbiAgICBjb25zdCBzaGVldERhdGEgPSBhd2FpdCBzdXBlci5nZXREYXRhKClcblxuICAgIC8vIFByZXBhcmUgY2hlY2sgdHlwZVxuICAgIHNoZWV0RGF0YS5jaGVja1R5cGUgPSBbXG4gICAgICB7XG4gICAgICAgIGtleTogQ29DN0xpbmsuQ0hFQ0tfVFlQRS5DSEVDSyxcbiAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5DaGVjaycpXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6IENvQzdMaW5rLkNIRUNLX1RZUEUuU0FOTE9TUyxcbiAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5TYW5pdHlDaGVjaycpXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6IENvQzdMaW5rLkNIRUNLX1RZUEUuSVRFTSxcbiAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5JdGVtV2VhcG9uJylcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogQ29DN0xpbmsuQ0hFQ0tfVFlQRS5FRkZFQ1QsXG4gICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0VGRkVDVC5UYWJFZmZlY3RzJylcbiAgICAgIH1cbiAgICBdXG5cbiAgICAvLyBQcmVwYXJlICdjaGVjaycgbGluayB0eXBlXG4gICAgc2hlZXREYXRhLmxpbmtUeXBlID0gW1xuICAgICAge1xuICAgICAgICBrZXk6IENvQzdMaW5rLkxJTktfVFlQRS5DSEFSQUNURVJJU1RJQyxcbiAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5DaGFyYWN0ZXJpc3RpYycpXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6IENvQzdMaW5rLkxJTktfVFlQRS5BVFRSSUJVVEUsXG4gICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQXR0cmlidXRlJylcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogQ29DN0xpbmsuTElOS19UWVBFLlNLSUxMLFxuICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlNraWxsJylcbiAgICAgIH1cbiAgICBdXG5cbiAgICAvLyBQcmVwYXJlICdjaGVjaycgJ2F0dHJpYnV0ZScgdHlwZXNcbiAgICBzaGVldERhdGEuYXR0cmlidXRlVHlwZSA9IFtcbiAgICAgIHtcbiAgICAgICAga2V5OiAnbGNrJyxcbiAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5MdWNrJylcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogJ3NhbicsXG4gICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuU2FuaXR5JylcbiAgICAgIH1cbiAgICBdXG5cbiAgICAvLyBQcmVwYXJlIGVmZmVjdCBtb2RlIHR5cGVzXG4gICAgc2hlZXREYXRhLmVmZmVjdE1vZGVzID0gT2JqZWN0LmVudHJpZXMoQ09OU1QuQUNUSVZFX0VGRkVDVF9NT0RFUykucmVkdWNlKFxuICAgICAgKG9iaiwgZSkgPT4ge1xuICAgICAgICBvYmpbZVsxXV0gPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0VGRkVDVC5NT0RFXycgKyBlWzBdKVxuICAgICAgICByZXR1cm4gb2JqXG4gICAgICB9LFxuICAgICAge31cbiAgICApXG5cbiAgICAvLyBQcmVwYXJlICdjaGVjaycgJ2NoYXJhY3RlcmlzdGljJyB0eXBlc1xuICAgIHNoZWV0RGF0YS5jaGFyYWN0ZXJpc3RpY1R5cGUgPSBDb0NBY3Rvci5nZXRDaGFyYWN0ZXJpc3RpY0RlZmluaXRpb24oKVxuXG4gICAgc2hlZXREYXRhLmxpbmsgPSBzaGVldERhdGEub2JqZWN0LmxpbmtcblxuICAgIHNoZWV0RGF0YS5mcm9tR2FtZSA9IHNoZWV0RGF0YS5saW5rLmlzSXRlbUNoZWNrIHx8IHNoZWV0RGF0YS5saW5rLmlzU2tpbGxDaGVja1xuXG4gICAgc2hlZXREYXRhLmZyb21EaXJlY3RvcnkgPSAoc2hlZXREYXRhLm9iamVjdC5oYXNJRCA9PT0gJ2Zyb21EaXJlY3RvcnknKVxuICAgIHNoZWV0RGF0YS5mcm9tQ29tcGVuZGl1bSA9IChzaGVldERhdGEub2JqZWN0Lmhhc0lEID09PSAnZnJvbUNvbXBlbmRpdW0nKVxuXG4gICAgc2hlZXREYXRhLmlzU2V0RnJvbUdhbWUgPSAoc2hlZXREYXRhLmxpbmsuaWQgJiYgKHNoZWV0RGF0YS5mcm9tRGlyZWN0b3J5IHx8IHNoZWV0RGF0YS5mcm9tQ29tcGVuZGl1bSkpXG5cbiAgICBzaGVldERhdGEuZGlmZmljdWx0eUxldmVsID0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbFxuXG4gICAgc2hlZXREYXRhLmFjdG9yTmFtZXMgPSBzaGVldERhdGEub2JqZWN0LmFjdG9ycy5tYXAoYSA9PiBhLm5hbWUpLmpvaW4oJywgJylcblxuICAgIHJldHVybiBzaGVldERhdGFcbiAgfVxuXG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcblxuICAgIGh0bWxcbiAgICAgIC5maW5kKCdzZWxlY3RbbmFtZT10eXBlXSxzZWxlY3RbbmFtZT1jaGVja10sc2VsZWN0W25hbWU9YXR0cmlidXRlS2V5XSxzZWxlY3RbbmFtZT1jaGFyYWN0ZXJpc3RpY0tleV0saW5wdXRbdHlwZT1jaGVja2JveF0nKVxuICAgICAgLmNoYW5nZSh0aGlzLl9vbkNoYW5nZVN1Ym1pdC5iaW5kKHRoaXMpKVxuXG4gICAgLy8gSGFuZGxpbmcgZWZmZWN0c1xuICAgIGh0bWwuZmluZCgnLmVmZmVjdC1jb250cm9sJykuY2xpY2sodGhpcy5fb25FZmZlY3RDb250cm9sLmJpbmQodGhpcykpXG4gIH1cblxuICBfb25DaGFuZ2VTdWJtaXQgKGV2ZW50KSB7XG4gICAgc3dpdGNoIChldmVudC5jdXJyZW50VGFyZ2V0Lm5hbWUpIHtcbiAgICAgIGNhc2UgJ2Zyb21Db21wZW5kaXVtJzpcbiAgICAgIGNhc2UgJ2Zyb21EaXJlY3RvcnknOlxuICAgICAgICB0aGlzLm9iamVjdC5oYXNJRCA9IChldmVudC5jdXJyZW50VGFyZ2V0Lm5hbWUgPT09IHRoaXMub2JqZWN0Lmhhc0lEID8gJycgOiBldmVudC5jdXJyZW50VGFyZ2V0Lm5hbWUpXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIHRoaXMuX29uU3VibWl0KGV2ZW50KVxuICB9XG5cbiAgX29uRWZmZWN0Q29udHJvbCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgYnV0dG9uID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIHN3aXRjaCAoYnV0dG9uLmRhdGFzZXQuYWN0aW9uKSB7XG4gICAgICBjYXNlICdhZGQnOlxuICAgICAgICByZXR1cm4gdGhpcy5fYWRkRWZmZWN0Q2hhbmdlKClcbiAgICAgIGNhc2UgJ2RlbGV0ZSc6XG4gICAgICAgIGJ1dHRvbi5jbG9zZXN0KCcuZWZmZWN0LWNoYW5nZScpLnJlbW92ZSgpXG4gICAgICAgIHRoaXMuX29uU3VibWl0KGV2ZW50KVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9hZGRFZmZlY3RDaGFuZ2UgKCkge1xuICAgIGNvbnN0IGlkeCA9IHRoaXMub2JqZWN0LmxpbmsuZWZmZWN0LmNoYW5nZXMubGVuZ3RoXG4gICAgcmV0dXJuIHRoaXMuc3VibWl0KHtcbiAgICAgIHByZXZlbnRDbG9zZTogdHJ1ZSxcbiAgICAgIHVwZGF0ZURhdGE6IHtcbiAgICAgICAgW2BlZmZlY3QuY2hhbmdlcy4ke2lkeH1gXToge1xuICAgICAgICAgIGtleTogJycsXG4gICAgICAgICAgbW9kZTogQ09OU1QuQUNUSVZFX0VGRkVDVF9NT0RFUy5BREQsXG4gICAgICAgICAgdmFsdWU6ICcnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgX3VwZGF0ZU9iamVjdCAoZXZlbnQsIGZvcm1EYXRhKSB7XG4gICAgbGV0IGhhc0VmZmVjdCA9IGZhbHNlXG4gICAgY29uc3QgZWZmZWN0ID0ge1xuICAgICAgZHVyYXRpb246IHt9LFxuICAgICAgY2hhbmdlczogW11cbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gZm9ybURhdGEpIHtcbiAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgIGNhc2UgJ2NoZWNrTmFtZSc6XG4gICAgICAgICAgdGhpcy5vYmplY3QubGluay5zZXRWYWx1ZSgnbmFtZScsIGZvcm1EYXRhLmNoZWNrTmFtZSlcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdibGluZCc6XG4gICAgICAgIGNhc2UgJ3B1c2hpbmcnOlxuICAgICAgICBjYXNlICdkaWZmaWN1bHR5JzpcbiAgICAgICAgY2FzZSAnZGlzcGxheU5hbWUnOlxuICAgICAgICBjYXNlICdpY29uJzpcbiAgICAgICAgY2FzZSAnaWQnOlxuICAgICAgICBjYXNlICdtb2RpZmllcic6XG4gICAgICAgIGNhc2UgJ3BhY2snOlxuICAgICAgICBjYXNlICdzYW5NaW4nOlxuICAgICAgICBjYXNlICdzYW5NYXgnOlxuICAgICAgICBjYXNlICdzYW5SZWFzb24nOlxuICAgICAgICAgIHRoaXMub2JqZWN0Lmxpbmsuc2V0VmFsdWUoa2V5LCBmb3JtRGF0YVtrZXldKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2hhc01vZGlmaWVycyc6XG4gICAgICAgIGNhc2UgJ2hhc0xhYmVsJzpcbiAgICAgICAgY2FzZSAnaGFzSWNvbic6XG4gICAgICAgICAgdGhpcy5vYmplY3Rba2V5XSA9IGZvcm1EYXRhW2tleV1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdlZmZlY3QubGFiZWwnOlxuICAgICAgICAgIGVmZmVjdC5sYWJlbCA9IGZvcm1EYXRhW2tleV1cbiAgICAgICAgICBoYXNFZmZlY3QgPSB0cnVlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnZWZmZWN0Lmljb24nOlxuICAgICAgICAgIGVmZmVjdC5pY29uID0gZm9ybURhdGFba2V5XVxuICAgICAgICAgIGhhc0VmZmVjdCA9IHRydWVcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdlZmZlY3QudGludCc6XG4gICAgICAgICAgZWZmZWN0LnRpbnQgPSBmb3JtRGF0YVtrZXldXG4gICAgICAgICAgaGFzRWZmZWN0ID0gdHJ1ZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2VmZmVjdC5kaXNhYmxlZCc6XG4gICAgICAgICAgZWZmZWN0LmRpc2FibGVkID0gZm9ybURhdGFba2V5XVxuICAgICAgICAgIGhhc0VmZmVjdCA9IHRydWVcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdlZmZlY3QuZHVyYXRpb24uc2Vjb25kcyc6XG4gICAgICAgICAgZWZmZWN0LmR1cmF0aW9uLnNlY29uZHMgPSBmb3JtRGF0YVtrZXldXG4gICAgICAgICAgaGFzRWZmZWN0ID0gdHJ1ZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2VmZmVjdC5kdXJhdGlvbi5yb3VuZHMnOlxuICAgICAgICAgIGVmZmVjdC5kdXJhdGlvbi5yb3VuZHMgPSBmb3JtRGF0YVtrZXldXG4gICAgICAgICAgaGFzRWZmZWN0ID0gdHJ1ZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2VmZmVjdC5kdXJhdGlvbi50dXJucyc6XG4gICAgICAgICAgZWZmZWN0LmR1cmF0aW9uLnR1cm5zID0gZm9ybURhdGFba2V5XVxuICAgICAgICAgIGhhc0VmZmVjdCA9IHRydWVcbiAgICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgY29uc3QgbWF0Y2ggPSBrZXkubWF0Y2goL15lZmZlY3RcXC5jaGFuZ2VzXFwuKFxcZCspXFwua2V5JC8pXG4gICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBlZmZlY3QuY2hhbmdlcy5wdXNoKHtcbiAgICAgICAgICAgICAga2V5OiBmb3JtRGF0YVtrZXldLFxuICAgICAgICAgICAgICBtb2RlOiBmb3JtRGF0YVsnZWZmZWN0LmNoYW5nZXMuJyArIG1hdGNoWzFdICsgJy5tb2RlJ10sXG4gICAgICAgICAgICAgIHZhbHVlOiBmb3JtRGF0YVsnZWZmZWN0LmNoYW5nZXMuJyArIG1hdGNoWzFdICsgJy52YWx1ZSddXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgaGFzRWZmZWN0ID0gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaGFzRWZmZWN0KSB7XG4gICAgICB0aGlzLm9iamVjdC5saW5rLnNldFZhbHVlKCdvYmplY3QnLCBlZmZlY3QpXG4gICAgfVxuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICBzd2l0Y2ggKHRhcmdldC5uYW1lKSB7XG4gICAgICAgIGNhc2UgJ3R5cGUnOlxuICAgICAgICAgIHRoaXMub2JqZWN0Lmxpbmsuc2V0VmFsdWUoJ2NoZWNrJywgdGFyZ2V0LnZhbHVlKVxuICAgICAgICAgIGlmICh0YXJnZXQudmFsdWUgPT09IENvQzdMaW5rLkNIRUNLX1RZUEUuQ0hFQ0spIHtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0Lmxpbmsuc2V0VmFsdWUoJ2xpbmtUeXBlJywgQ29DN0xpbmsuTElOS19UWVBFLlNLSUxMKVxuICAgICAgICAgICAgdGhpcy5vYmplY3QubGluay5zZXRWYWx1ZSgnbmFtZScsICcnKVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdjaGVjayc6XG4gICAgICAgICAgdGhpcy5vYmplY3QubGluay5zZXRWYWx1ZSgnbGlua1R5cGUnLCB0YXJnZXQudmFsdWUpXG4gICAgICAgICAgaWYgKHRhcmdldC52YWx1ZSA9PT0gQ29DN0xpbmsuTElOS19UWVBFLkNIQVJBQ1RFUklTVElDKSB7XG4gICAgICAgICAgICB0aGlzLm9iamVjdC5saW5rLnNldFZhbHVlKCduYW1lJywgQ29DQWN0b3IuZ2V0Q2hhcmFjdGVyaXN0aWNEZWZpbml0aW9uKClbMF0ua2V5KVxuICAgICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0LnZhbHVlID09PSBDb0M3TGluay5MSU5LX1RZUEUuQVRUUklCVVRFKSB7XG4gICAgICAgICAgICB0aGlzLm9iamVjdC5saW5rLnNldFZhbHVlKCduYW1lJywgJ2xjaycpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0Lmxpbmsuc2V0VmFsdWUoJ25hbWUnLCAnJylcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnYXR0cmlidXRlS2V5JzpcbiAgICAgICAgY2FzZSAnY2hhcmFjdGVyaXN0aWNLZXknOlxuICAgICAgICAgIHRoaXMub2JqZWN0Lmxpbmsuc2V0VmFsdWUoJ25hbWUnLCB0YXJnZXQudmFsdWUpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGlmIChldmVudC50eXBlID09PSAnc3VibWl0Jykge1xuICAgICAgICBzd2l0Y2ggKGV2ZW50LnN1Ym1pdHRlci5kYXRhc2V0LmFjdGlvbikge1xuICAgICAgICAgIGNhc2UgJ2NsaXBib2FyZCc6XG4gICAgICAgICAgICBDb0M3VXRpbGl0aWVzLmNvcHlUb0NsaXBib2FyZCh0aGlzLm9iamVjdC5saW5rLmxpbmspXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgJ2NoYXQnOlxuICAgICAgICAgICAgQ29DN0xpbmsudG9DaGF0TWVzc2FnZSh0aGlzLm9iamVjdC5saW5rLm9iamVjdClcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSAnd2hpc3Blci1vd25lcic6XG4gICAgICAgICAgICBDb0M3TGluay50b1doaXNwZXJNZXNzYWdlKHRoaXMub2JqZWN0Lmxpbmsub2JqZWN0LCB0aGlzLm9iamVjdC5hY3RvcnMpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgJ3doaXNwZXItc2VsZWN0ZWQnOlxuICAgICAgICAgICAgaWYgKCFjYW52YXMudG9rZW5zLmNvbnRyb2xsZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihcbiAgICAgICAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRXJyb3JOb1Rva2Vuc1NlbGVjdGVkJylcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIENvQzdMaW5rLnRvV2hpc3Blck1lc3NhZ2UodGhpcy5vYmplY3QubGluay5vYmplY3QsIGNhbnZhcy50b2tlbnMuY29udHJvbGxlZC5maWx0ZXIodCA9PiB0LmFjdG9yLm93bmVycy5sZW5ndGgpLm1hcCh0ID0+IHQuYWN0b3IpKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5yZW5kZXIodHJ1ZSlcbiAgfVxuXG4gIGFzeW5jIF9vbkRyb3AgKGV2ZW50KSB7XG4gICAgY29uc3QgZGF0YVN0cmluZyA9IGV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKCd0ZXh0L3BsYWluJylcbiAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShkYXRhU3RyaW5nKVxuICAgIGlmIChkYXRhLnR5cGUgPT09ICdDb0M3TGluaycpIHtcbiAgICAgIHRoaXMuc2V0TGluayhhd2FpdCBDb0M3TGluay5mcm9tRHJvcERhdGEoZGF0YSkpXG4gICAgICB0aGlzLnJlbmRlcih0cnVlKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoKGRhdGEudHlwZSA9PT0gJ0ZvbGRlcicgJiYgZGF0YS5kb2N1bWVudE5hbWUgPT09ICdBY3RvcicpIHx8IFsnSXRlbScsICdBY3RvciddLmluY2x1ZGVzKGRhdGEudHlwZSkpIHtcbiAgICAgICAgY29uc3QgZGF0YUxpc3QgPSBhd2FpdCBDb0M3VXRpbGl0aWVzLmdldERhdGFGcm9tRHJvcEV2ZW50KGV2ZW50LCBkYXRhLmRvY3VtZW50TmFtZSA/PyBkYXRhLnR5cGUpXG4gICAgICAgIGlmIChkYXRhLmRvY3VtZW50TmFtZSA/PyBkYXRhLnR5cGUgPT09ICdBY3RvcicpIHtcbiAgICAgICAgICB0aGlzLm9iamVjdC5hY3RvcnMgPSBkYXRhTGlzdC5maWx0ZXIoYSA9PiBhLm93bmVycy5sZW5ndGgpXG4gICAgICAgICAgdGhpcy5yZW5kZXIodHJ1ZSlcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhTGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBpZiAoWydza2lsbCcsICd3ZWFwb24nXS5pbmNsdWRlcyhkYXRhTGlzdFswXS50eXBlKSkge1xuICAgICAgICAgICAgaWYgKGRhdGFMaXN0WzBdLnBhY2spIHtcbiAgICAgICAgICAgICAgdGhpcy5vYmplY3QuaGFzSUQgPSAnZnJvbUNvbXBlbmRpdW0nXG4gICAgICAgICAgICAgIHRoaXMub2JqZWN0Lmxpbmsuc2V0VmFsdWUoJ3BhY2snLCBkYXRhTGlzdFswXS5wYWNrKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5vYmplY3QuaGFzSUQgPSAnZnJvbURpcmVjdG9yeSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMub2JqZWN0Lmxpbmsuc2V0VmFsdWUoJ2lkJywgZGF0YUxpc3RbMF0uaWQpXG4gICAgICAgICAgICB0aGlzLm9iamVjdC5saW5rLnNldFZhbHVlKCduYW1lJywgZGF0YUxpc3RbMF0ubmFtZSlcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKHRydWUpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc2V0TGluayAobGluaykge1xuICAgIHRoaXMub2JqZWN0LmxpbmsgPSBsaW5rXG4gICAgaWYgKGxpbmsucGFjayAhPT0gJycpIHtcbiAgICAgIHRoaXMub2JqZWN0Lmhhc0lEID0gJ2Zyb21Db21wZW5kaXVtJ1xuICAgIH0gZWxzZSBpZiAobGluay5pZCAhPT0gJycpIHtcbiAgICAgIHRoaXMub2JqZWN0Lmhhc0lEID0gJ2Zyb21EaXJlY3RvcnknXG4gICAgfVxuICAgIGlmIChsaW5rLmRpZmZpY3VsdHkgIT09IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhciB8fCBwYXJzZUludChsaW5rLm1vZGlmaWVyLCAxMCkgIT09IDAgfHwgbGluay5pc1B1c2hpbmcpIHtcbiAgICAgIHRoaXMub2JqZWN0Lmhhc01vZGlmaWVycyA9IHRydWVcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vYmplY3QuaGFzTW9kaWZpZXJzID0gZmFsc2VcbiAgICB9XG4gICAgaWYgKGxpbmsuZGlzcGxheU5hbWUgIT09ICcnKSB7XG4gICAgICB0aGlzLm9iamVjdC5oYXNMYWJlbCA9IHRydWVcbiAgICB9XG4gICAgaWYgKGxpbmsuaWNvbiAhPT0gJycpIHtcbiAgICAgIHRoaXMub2JqZWN0Lmhhc0ljb24gPSB0cnVlXG4gICAgfVxuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIGNyZWF0ZSAobGlua0RhdGEgPSB7fSwgb3B0aW9uID0ge30pIHtcbiAgICBjb25zdCBvYmplY3QgPSBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHtcbiAgICAgIGxpbms6IG51bGwsXG4gICAgICBoYXNJRDogJycsXG4gICAgICBoYXNNb2RpZmllcnM6IGZhbHNlLFxuICAgICAgaGFzTGFiZWw6IGZhbHNlLFxuICAgICAgaGFzSWNvbjogZmFsc2UsXG4gICAgICBhY3RvcnM6IFtdXG4gICAgfSwgb3B0aW9uKVxuICAgIGNvbnN0IGRpYWxvZyA9IG5ldyBDb0M3Q29udGVudExpbmtEaWFsb2cob2JqZWN0LCB7fSlcbiAgICBkaWFsb2cuc2V0TGluayhhd2FpdCBDb0M3TGluay5mcm9tRHJvcERhdGEobGlua0RhdGEpKVxuICAgIGRpYWxvZy5yZW5kZXIodHJ1ZSlcbiAgfVxufVxuIiwiLyogZ2xvYmFsIERpYWxvZywgRm9ybURhdGEsIGdhbWUsIHJlbmRlclRlbXBsYXRlICovXG5cbmltcG9ydCB7IENvQzdDaGF0TWVzc2FnZSB9IGZyb20gJy4vY29jNy1jaGF0LW1lc3NhZ2UuanMnXG5pbXBvcnQgeyBDb0M3Q2hlY2sgfSBmcm9tICcuLi9jaGVjay5qcydcblxuZXhwb3J0IGNsYXNzIFJvbGxEaWFsb2cge1xuICBzdGF0aWMgYXN5bmMgY3JlYXRlIChvcHRpb25zID0ge30pIHtcbiAgICBpZiAob3B0aW9ucy5kaWZmaWN1bHR5KSB7XG4gICAgICBvcHRpb25zLmRpZmZpY3VsdHlMZXZlbCA9IHt9XG4gICAgICBpZiAoQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC51bmtub3duID09PSBvcHRpb25zLmRpZmZpY3VsdHkpIHtcbiAgICAgICAgb3B0aW9ucy5kaWZmaWN1bHR5TGV2ZWwudW5rbm93biA9IHRydWVcbiAgICAgIH1cbiAgICAgIGlmIChDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXIgPT09IG9wdGlvbnMuZGlmZmljdWx0eSkge1xuICAgICAgICBvcHRpb25zLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyID0gdHJ1ZVxuICAgICAgfVxuICAgICAgaWYgKENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuaGFyZCA9PT0gb3B0aW9ucy5kaWZmaWN1bHR5KSB7XG4gICAgICAgIG9wdGlvbnMuZGlmZmljdWx0eUxldmVsLmhhcmQgPSB0cnVlXG4gICAgICB9XG4gICAgICBpZiAoQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5leHRyZW1lID09PSBvcHRpb25zLmRpZmZpY3VsdHkpIHtcbiAgICAgICAgb3B0aW9ucy5kaWZmaWN1bHR5TGV2ZWwuZXh0cmVtZSA9IHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gaWYoIHVuZGVmaW5lZCA9PSBvcHRpb25zLmFza1ZhbHVlKSBvcHRpb25zLmFza1ZhbHVlID0gdHJ1ZTtcbiAgICBpZiAob3B0aW9ucy5uYW1lICYmICFvcHRpb25zLmRpc3BsYXlOYW1lKSBvcHRpb25zLmRpc3BsYXlOYW1lID0gb3B0aW9ucy5uYW1lXG4gICAgY29uc3QgdW5rbm93bkRpZmZpY3VsdHlEZWZhdWx0ID1cbiAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2RlZmF1bHRDaGVja0RpZmZpY3VsdHknKSA9PT0gJ3Vua25vd24nXG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIGFsbG93RmxhdERpY2VNb2RpZmllcjpcbiAgICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnYWxsb3dGbGF0RGljZU1vZGlmaWVyJykgJiZcbiAgICAgICAgIW9wdGlvbnMuZGlzYWJsZUZsYXREaWNlTW9kaWZpZXIsXG4gICAgICBhbGxvd0ZsYXRUaHJlc2hvbGRNb2RpZmllcjpcbiAgICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnYWxsb3dGbGF0VGhyZXNob2xkTW9kaWZpZXInKSAmJlxuICAgICAgICAhb3B0aW9ucy5kaXNhYmxlRmxhdFRocmVzaG9sZE1vZGlmaWVyLFxuICAgICAgZGlmZmljdWx0eTogQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbCxcbiAgICAgIHVua25vd25EaWZmaWN1bHR5RGVmYXVsdCxcbiAgICAgIGhpZGVEaWZmaWN1bHR5OiBvcHRpb25zLmhpZGVEaWZmaWN1bHR5ID8/IGZhbHNlLFxuICAgICAgb3B0aW9uc1xuICAgIH1cbiAgICBpZiAoXG4gICAgICB0eXBlb2Ygb3B0aW9ucy5jYXJkVHlwZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICghb3B0aW9ucy5mb3JjZWRDYXJkVHlwZSA/PyB0cnVlKVxuICAgICkge1xuICAgICAgZGF0YS5jYXJkVHlwZXMgPSBDb0M3Q2hhdE1lc3NhZ2UuY2FyZFR5cGVzKG9wdGlvbnMpXG4gICAgfVxuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZShcbiAgICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvYm9udXMuaHRtbCcsXG4gICAgICBkYXRhXG4gICAgKVxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIGxldCBmb3JtRGF0YSA9IG51bGxcbiAgICAgIGNvbnN0IGRsZyA9IG5ldyBEaWFsb2coe1xuICAgICAgICB0aXRsZTogb3B0aW9ucy5kaXNwbGF5TmFtZVxuICAgICAgICAgID8gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Cb251c1NlbGVjdGlvbldpbmRvd05hbWVkJywge1xuICAgICAgICAgICAgbmFtZTogb3B0aW9ucy5kaXNwbGF5TmFtZVxuICAgICAgICAgIH0pXG4gICAgICAgICAgOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQm9udXNTZWxlY3Rpb25XaW5kb3cnKSxcbiAgICAgICAgY29udGVudDogaHRtbCxcbiAgICAgICAgYnV0dG9uczoge1xuICAgICAgICAgIHJvbGw6IHtcbiAgICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuUm9sbERpY2UnKSxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBodG1sID0+IHtcbiAgICAgICAgICAgICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoaHRtbFswXS5xdWVyeVNlbGVjdG9yKCcjYm9udXMtcm9sbC1mb3JtJykpXG4gICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGZvcm1EYXRhKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGVmYXVsdDogJ3JvbGwnLFxuICAgICAgICBjbG9zZTogKCkgPT4ge31cbiAgICAgIH0pXG4gICAgICBkbGcucmVuZGVyKHRydWUpXG4gICAgfSlcbiAgfVxufVxuIiwiLyogZ2xvYmFsICQsIENoYXRNZXNzYWdlLCBnYW1lLCByZW5kZXJUZW1wbGF0ZSwgdWkgKi9cbi8vIGltcG9ydCB7IENvQ0FjdG9yIH0gZnJvbSAnLi4vLi4vYWN0b3JzL2FjdG9yLmpzJztcbmltcG9ydCB7IENvQzdDaGVjayB9IGZyb20gJy4uLy4uL2NoZWNrLmpzJ1xuXG5leHBvcnQgY2xhc3MgUm9sbENhcmQge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5yb2xscyA9IFtdXG4gICAgdGhpcy5pbml0aWF0b3IgPSBudWxsXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgZnJvbU1lc3NhZ2VJZCAobWVzc2FnZUlkKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGdhbWUubWVzc2FnZXMuZ2V0KG1lc3NhZ2VJZClcbiAgICBpZiAoIW1lc3NhZ2UpIHJldHVybiB1bmRlZmluZWRcbiAgICBjb25zdCBjYXJkID0gYXdhaXQgdGhpcy5mcm9tTWVzc2FnZShtZXNzYWdlKVxuICAgIGNhcmQubWVzc2FnZUlkID0gbWVzc2FnZUlkXG4gICAgcmV0dXJuIGNhcmRcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBmcm9tTWVzc2FnZSAobWVzc2FnZSkge1xuICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gJChtZXNzYWdlLmNvbnRlbnQpWzBdXG4gICAgaWYgKCFjYXJkRWxlbWVudCkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGNvbnN0IGNhcmQgPSBhd2FpdCB0aGlzLmZyb21IVE1MQ2FyZEVsZW1lbnQoY2FyZEVsZW1lbnQpXG4gICAgY2FyZC5tZXNzYWdlID0gbWVzc2FnZVxuICAgIHJldHVybiBjYXJkXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgZnJvbUhUTUxDYXJkRWxlbWVudCAoY2FyZCkge1xuICAgIGNvbnN0IGNhcmREYXRhID0gSlNPTi5wYXJzZSh1bmVzY2FwZShjYXJkLmRhdGFzZXQub2JqZWN0KSlcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5mcm9tRGF0YShjYXJkRGF0YSlcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBmcm9tRGF0YSAoZGF0YSkge1xuICAgIGNvbnN0IGNhcmQgPSBPYmplY3QuYXNzaWduKG5ldyB0aGlzKCksIGRhdGEpXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGNhcmQucm9sbHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBpZiAoY2FyZC5yb2xsc1tpbmRleF0/LmNvbnN0cnVjdG9yPy5uYW1lID09PSAnT2JqZWN0Jykge1xuICAgICAgICBjYXJkLnJvbGxzW2luZGV4XSA9IE9iamVjdC5hc3NpZ24obmV3IENvQzdDaGVjaygpLCBjYXJkLnJvbGxzW2luZGV4XSlcbiAgICAgICAgaWYgKGNhcmQucm9sbHNbaW5kZXhdLnJvbGxlZCkge1xuICAgICAgICAgIGNhcmQucm9sbHNbaW5kZXhdLl9odG1sUm9sbCA9IGF3YWl0IGNhcmQucm9sbHNbaW5kZXhdLmdldEh0bWxSb2xsKClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2FyZFxuICB9XG5cbiAgc3RhdGljIGFzeW5jIF9vblRvZ2dsZSAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBjb25zdCBzcGFuID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGlmIChzcGFuICYmIHNwYW4uY2xhc3NMaXN0LmNvbnRhaW5zKCdnbS1zZWxlY3Qtb25seScpICYmICFnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IG1lc3NhZ2UgPSBzcGFuLmNsb3Nlc3QoJy5jaGF0LW1lc3NhZ2UnKVxuICAgIGNvbnN0IGNhcmQgPSBhd2FpdCB0aGlzLmZyb21NZXNzYWdlSWQobWVzc2FnZS5kYXRhc2V0Lm1lc3NhZ2VJZClcbiAgICBpZiAoIWNhcmQpIHJldHVyblxuICAgIGNvbnN0IGZsYWcgPSBzcGFuLmRhdGFzZXQuZmxhZ1xuICAgIGlmICghZmxhZykgcmV0dXJuXG4gICAgY29uc3QgdG9nZ2xlID0gc3Bhbi5jbG9zZXN0KCcudG9nZ2xlJylcbiAgICBpZiAoIXRvZ2dsZSkge1xuICAgICAgY2FyZC50b2dnbGVGbGFnKGZsYWcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGJ1dHRvbnMgPSB0b2dnbGUucXVlcnlTZWxlY3RvckFsbCgnLnRvZ2dsZS1zd2l0Y2gnKVxuICAgICAgZm9yIChjb25zdCBiIG9mIGJ1dHRvbnMpIHtcbiAgICAgICAgY2FyZC51bnNldEZsYWcoYi5kYXRhc2V0LmZsYWcpXG4gICAgICB9XG4gICAgICBjYXJkLnNldEZsYWcoZmxhZylcbiAgICB9XG4gICAgY2FyZC51cGRhdGVDaGF0Q2FyZCgpXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgZGlzcGF0Y2ggKGRhdGEpIHtcbiAgICBpZiAoZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgIGxldCBtZXNzYWdlcyA9IHVpLmNoYXQuY29sbGVjdGlvbi5maWx0ZXIobWVzc2FnZSA9PiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzLmRlZmF1bHRDb25maWcudHlwZSA9PT0gbWVzc2FnZS5nZXRGbGFnKCdDb0M3JywgJ3R5cGUnKSAmJlxuICAgICAgICAgIG1lc3NhZ2UuZ2V0RmxhZygnQ29DNycsICdzdGF0ZScpICE9PSAncmVzb2x2ZWQnXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChbJ2NvbWJpbmVkQ2FyZCddLmluY2x1ZGVzKHRoaXMuZGVmYXVsdENvbmZpZy50eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2UuZ2V0RmxhZygnQ29DNycsICdpbml0aWF0b3InKSA9PT0gZGF0YS5yb2xsLmluaXRpYXRvclxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfSlcblxuICAgICAgaWYgKG1lc3NhZ2VzLmxlbmd0aCkge1xuICAgICAgICAvLyBPbGQgbWVzc2FnZXMgY2FuJ3QgYmUgdXNlZCBpZiBtZXNzYWdlIGlzIG1vcmUgdGhhbiBhIGRheSBvbGQgbWFyayBpdCBhcyByZXNvbHZlZFxuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZShtZXNzYWdlc1swXS50aW1lc3RhbXApXG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKClcbiAgICAgICAgY29uc3QgdGltZURpZmZTZWMgPSAobm93IC0gdGltZXN0YW1wKSAvIDEwMDBcbiAgICAgICAgaWYgKDI0ICogNjAgKiA2MCA8IHRpbWVEaWZmU2VjKSB7XG4gICAgICAgICAgYXdhaXQgbWVzc2FnZXNbMF0uc2V0RmxhZygnQ29DNycsICdzdGF0ZScsICdyZXNvbHZlZCcpXG4gICAgICAgICAgbWVzc2FnZXMgPSBbXVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxldCBjYXJkXG4gICAgICBpZiAoIW1lc3NhZ2VzLmxlbmd0aCkgY2FyZCA9IG5ldyB0aGlzKClcbiAgICAgIGVsc2UgY2FyZCA9IGF3YWl0IHRoaXMuZnJvbU1lc3NhZ2UobWVzc2FnZXNbMF0pXG4gICAgICBpZiAodHlwZW9mIGRhdGEuX3JvbGxNb2RlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjYXJkLl9yb2xsTW9kZSA9IGRhdGEuX3JvbGxNb2RlXG4gICAgICB9XG4gICAgICBhd2FpdCBjYXJkLnByb2Nlc3MoZGF0YSlcbiAgICB9IGVsc2UgZ2FtZS5zb2NrZXQuZW1pdCgnc3lzdGVtLkNvQzcnLCBkYXRhKVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIHJlc29sdmVPbGQgKHVzZXJJZCkge1xuICAgIGNvbnN0IG1lc3NhZ2VzID0gdWkuY2hhdC5jb2xsZWN0aW9uLmZpbHRlcihtZXNzYWdlID0+IHtcbiAgICAgIGlmICh0aGlzLmRlZmF1bHRDb25maWcudHlwZSA9PT0gbWVzc2FnZS5nZXRGbGFnKCdDb0M3JywgJ3R5cGUnKSAmJiBtZXNzYWdlLmdldEZsYWcoJ0NvQzcnLCAnc3RhdGUnKSAhPT0gJ3Jlc29sdmVkJykge1xuICAgICAgICBpZiAoWydjb21iaW5lZENhcmQnXS5pbmNsdWRlcyh0aGlzLmRlZmF1bHRDb25maWcudHlwZSkpIHtcbiAgICAgICAgICByZXR1cm4gbWVzc2FnZS5nZXRGbGFnKCdDb0M3JywgJ2luaXRpYXRvcicpID09PSB1c2VySWRcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSlcbiAgICBpZiAobWVzc2FnZXMubGVuZ3RoKSB7XG4gICAgICBhd2FpdCBtZXNzYWdlc1swXS5zZXRGbGFnKCdDb0M3JywgJ3N0YXRlJywgJ3Jlc29sdmVkJylcbiAgICAgIGNvbnN0IGNhcmQgPSBhd2FpdCB0aGlzLmZyb21NZXNzYWdlKG1lc3NhZ2VzWzBdKVxuICAgICAgY2FyZC5jbG9zZUNhcmQoKVxuICAgICAgYXdhaXQgY2FyZC51cGRhdGVDaGF0Q2FyZCgpXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgdG9NZXNzYWdlICgpIHtcbiAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUodGhpcy5jb25maWcudGVtcGxhdGUsIHRoaXMpXG4gICAgY29uc3QgaHRtbENhcmRFbGVtZW50ID0gJChodG1sKVxuICAgIGh0bWxDYXJkRWxlbWVudFswXS5kYXRhc2V0Lm9iamVjdCA9IGVzY2FwZSh0aGlzLmRhdGFTdHJpbmcpXG5cbiAgICBjb25zdCBjaGF0RGF0YSA9IHtcbiAgICAgIHVzZXI6IGdhbWUudXNlci5pZCxcbiAgICAgIGZsYXZvcjogZ2FtZS5pMThuLmxvY2FsaXplKHRoaXMuY29uZmlnLnRpdGxlKSxcbiAgICAgIGNvbnRlbnQ6IGh0bWxDYXJkRWxlbWVudFswXS5vdXRlckhUTUwsXG4gICAgICBmbGFnczoge1xuICAgICAgICBDb0M3OiB7XG4gICAgICAgICAgdHlwZTogdGhpcy5jb25maWcudHlwZSxcbiAgICAgICAgICBzdGF0ZTogJ2luaXRpYXRlZCcsXG4gICAgICAgICAgaW5pdGlhdG9yOiB0aGlzLmluaXRpYXRvclxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKFsnZ21yb2xsJywgJ2JsaW5kcm9sbCddLmluY2x1ZGVzKHRoaXMucm9sbE1vZGUpKSB7XG4gICAgICBjaGF0RGF0YS53aGlzcGVyID0gQ2hhdE1lc3NhZ2UuZ2V0V2hpc3BlclJlY2lwaWVudHMoJ0dNJylcbiAgICB9XG4gICAgaWYgKHRoaXMucm9sbE1vZGUgPT09ICdibGluZHJvbGwnKSBjaGF0RGF0YS5ibGluZCA9IHRydWVcblxuICAgIGNvbnN0IG1zZyA9IGF3YWl0IENoYXRNZXNzYWdlLmNyZWF0ZShjaGF0RGF0YSlcbiAgICByZXR1cm4gbXNnXG4gIH1cblxuICBhc3luYyB1cGRhdGVDaGF0Q2FyZCAoKSB7XG4gICAgYXdhaXQgdGhpcy5jb21wdXRlKClcbiAgICBpZiAoIXRoaXMubWVzc2FnZUlkKSB7XG4gICAgICBhd2FpdCB0aGlzLnRvTWVzc2FnZSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZSh0aGlzLmNvbmZpZy50ZW1wbGF0ZSwgdGhpcylcbiAgICAgIGNvbnN0IGh0bWxDYXJkRWxlbWVudCA9ICQucGFyc2VIVE1MKGh0bWwpWzBdXG5cbiAgICAgIC8vIEF0dGFjaCB0aGUgc2FuQ2hlY2tDYXJkIG9iamVjdCB0byB0aGUgbWVzc2FnZS5cbiAgICAgIGh0bWxDYXJkRWxlbWVudC5kYXRhc2V0Lm9iamVjdCA9IGVzY2FwZSh0aGlzLmRhdGFTdHJpbmcpXG5cbiAgICAgIC8vIFVwZGF0ZSB0aGUgbWVzc2FnZS5cbiAgICAgIGNvbnN0IGNoYXRNZXNzYWdlID0gZ2FtZS5tZXNzYWdlcy5nZXQodGhpcy5tZXNzYWdlSWQpXG4gICAgICBpZiAodGhpcy5jbG9zZWQpIGF3YWl0IGNoYXRNZXNzYWdlLnNldEZsYWcoJ0NvQzcnLCAnc3RhdGUnLCAncmVzb2x2ZWQnKVxuXG4gICAgICBjb25zdCBtc2cgPSBhd2FpdCBjaGF0TWVzc2FnZS51cGRhdGUoe1xuICAgICAgICBjb250ZW50OiBodG1sQ2FyZEVsZW1lbnQub3V0ZXJIVE1MXG4gICAgICB9KVxuICAgICAgYXdhaXQgdWkuY2hhdC51cGRhdGVNZXNzYWdlKG1zZywgZmFsc2UpXG4gICAgICByZXR1cm4gbXNnXG4gICAgfVxuICB9XG5cbiAgdXBkYXRlUm9sbCAoZGF0YSkge1xuICAgIGlmICghZGF0YS5mcm9tR00pIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5yb2xsc1tkYXRhLnJhbmtdLCBkYXRhLnJvbGwpXG4gICAgfVxuICB9XG5cbiAgYWRkUm9sbERhdGEgKGRhdGEpIHtcbiAgICBjb25zdCBjaGVjayA9IE9iamVjdC5hc3NpZ24obmV3IENvQzdDaGVjaygpLCBkYXRhLnJvbGwpXG4gICAgdGhpcy5yb2xscy5wdXNoKGNoZWNrKVxuICAgIGlmICh0aGlzLmNvbmZpZy50eXBlID09PSAnY29tYmluZWRDYXJkJykge1xuICAgICAgdGhpcy5pbml0aWF0b3IgPSBkYXRhLnJvbGwuaW5pdGlhdG9yXG4gICAgfVxuICB9XG5cbiAgYWRkUm9sbCAoZGF0YSkge1xuICAgIHRoaXMucm9sbHMucHVzaChkYXRhKVxuICB9XG5cbiAgcmVtb3ZlUm9sbCAocmFuaykge1xuICAgIHRoaXMucm9sbHMuc3BsaWNlKHJhbmssIDEpXG4gIH1cblxuICBzZXRGbGFnIChmbGFnTmFtZSkge1xuICAgIGlmICghZmxhZ05hbWUgJiYgISgkLnR5cGUoZmxhZ05hbWUpID09PSAnc3RyaW5nJykpIHJldHVyblxuICAgIHRoaXNbZmxhZ05hbWVdID0gdHJ1ZVxuICB9XG5cbiAgdW5zZXRGbGFnIChmbGFnTmFtZSkge1xuICAgIGlmICghZmxhZ05hbWUgJiYgISgkLnR5cGUoZmxhZ05hbWUpID09PSAnc3RyaW5nJykpIHJldHVyblxuICAgIHRoaXNbZmxhZ05hbWVdID0gZmFsc2VcbiAgfVxuXG4gIHRvZ2dsZUZsYWcgKGZsYWdOYW1lKSB7XG4gICAgdGhpc1tmbGFnTmFtZV0gPSAhdGhpc1tmbGFnTmFtZV1cbiAgfVxuXG4gIGdldCBtZXNzYWdlICgpIHtcbiAgICBpZiAodGhpcy5fbWVzc2FnZSkgcmV0dXJuIHRoaXMuX21lc3NhZ2VcbiAgICBpZiAodGhpcy5fbWVzc2FnZUlkKSByZXR1cm4gZ2FtZS5tZXNzYWdlcy5nZXQodGhpcy5fbWVzc2FnZUlkKVxuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIHNldCBtZXNzYWdlICh4KSB7XG4gICAgdGhpcy5fbWVzc2FnZSA9IHhcbiAgfVxuXG4gIGdldCBtZXNzYWdlSWQgKCkge1xuICAgIGlmICh0aGlzLl9tZXNzYWdlSWQpIHJldHVybiB0aGlzLl9tZXNzYWdlSWRcbiAgICBpZiAodGhpcy5fbWVzc2FnZSkgcmV0dXJuIHRoaXMuX21lc3NhZ2UuaWRcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBzZXQgbWVzc2FnZUlkICh4KSB7XG4gICAgdGhpcy5fbWVzc2FnZUlkID0geFxuICB9XG5cbiAgLy8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICBzdGF0aWMgZ2V0IGRlZmF1bHRDb25maWcgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBleGNsdWRlOiBbJ19hY3RvcicsICdfc2tpbGwnLCAnX2l0ZW0nLCAnX21lc3NhZ2UnLCAnX2h0bWxSb2xsJ10sXG4gICAgICBleGNsdWRlU3RhcnRXaXRoOiAnX18nXG4gICAgfVxuICB9XG5cbiAgLy8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIGdldCB3aW5uZXJzICgpIHtcbiAgICByZXR1cm4gdGhpcy5yb2xscy5maWx0ZXIociA9PiByLndpbm5lcilcbiAgfVxuXG4gIGdldCB3aW5uZXIgKCkge1xuICAgIGlmICh0aGlzLndpbm5lcnMubGVuZ3RoKSByZXR1cm4gdGhpcy53aW5uZXJzWzBdXG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgZ2V0IGxvb3NlcnMgKCkge1xuICAgIHJldHVybiB0aGlzLnJvbGxzLmZpbHRlcihyID0+ICFyLndpbm5lcilcbiAgfVxuXG4gIGdldCBsb29zZXIgKCkge1xuICAgIGlmICh0aGlzLmxvb3NlcnMubGVuZ3RoKSByZXR1cm4gdGhpcy5sb29zZXJzWzBdXG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgZ2V0IGhhc1dpbm5lciAoKSB7XG4gICAgaWYgKHRoaXMud2lubmVycy5sZW5ndGggPiAwKSByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZ2V0IGlzS2VlcGVyICgpIHtcbiAgICByZXR1cm4gZ2FtZS51c2VyLmlzR01cbiAgfVxuXG4gIGdldCByb2xsTW9kZSAoKSB7XG4gICAgaWYgKCF0aGlzLl9yb2xsTW9kZSkgdGhpcy5fcm9sbE1vZGUgPSBnYW1lLnNldHRpbmdzLmdldCgnY29yZScsICdyb2xsTW9kZScpXG4gICAgcmV0dXJuIHRoaXMuX3JvbGxNb2RlXG4gIH1cblxuICBzZXQgcm9sbE1vZGUgKHgpIHtcbiAgICBpZiAoeCA9PT0gZmFsc2UpIHRoaXMuX3JvbGxNb2RlID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ2NvcmUnLCAncm9sbE1vZGUnKVxuICAgIHRoaXMuX3JvbGxNb2RlID0geFxuICB9XG5cbiAgZ2V0IGRhdGEgKCkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMuZGF0YVN0cmluZylcbiAgfVxuXG4gIGdldCBkYXRhU3RyaW5nICgpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcywgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgaWYgKHRoaXMuY29uZmlnLmV4Y2x1ZGU/LmluY2x1ZGVzKGtleSkpIHJldHVybiB1bmRlZmluZWRcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCh0aGlzLmNvbmZpZy5leGNsdWRlU3RhcnRXaXRoKSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfSlcbiAgfVxufVxuIiwiLyogZ2xvYmFsIEF1ZGlvSGVscGVyLCBDT05GSUcsIGZvdW5kcnksIGdhbWUgKi9cbmltcG9ydCB7IENvQzdDaGVjayB9IGZyb20gJy4uLy4uL2NoZWNrLmpzJ1xuaW1wb3J0IHsgQ29DN0RpY2UgfSBmcm9tICcuLi8uLi9kaWNlLmpzJ1xuaW1wb3J0IHsgUm9sbENhcmQgfSBmcm9tICcuL3JvbGwtY2FyZC5qcydcblxuZXhwb3J0IGNsYXNzIENvbWJpbmVkQ2hlY2tDYXJkIGV4dGVuZHMgUm9sbENhcmQge1xuICBzdGF0aWMgYXN5bmMgYmluZExpc3Rlcm5lcnMgKGh0bWwpIHtcbiAgICBodG1sLm9uKFxuICAgICAgJ2NsaWNrJyxcbiAgICAgICcucm9sbC1jYXJkLmNvbWJpbmVkIC50b2dnbGUtc3dpdGNoJyxcbiAgICAgIHRoaXMuX29uVG9nZ2xlLmJpbmQodGhpcylcbiAgICApXG4gICAgLy8gaHRtbC5maW5kKCcucm9sbC1jYXJkIGEnKS5jbGljayhhc3luYyAoZXZlbnQpID0+IENvbWJpbmVkQ2hlY2tDYXJkLl9vbkNsaWNrKCBldmVudCkpO1xuICAgIGh0bWwub24oXG4gICAgICAnY2xpY2snLFxuICAgICAgJy5yb2xsLWNhcmQuY29tYmluZWQgYScsXG4gICAgICBDb21iaW5lZENoZWNrQ2FyZC5fb25DbGljay5iaW5kKHRoaXMpXG4gICAgKVxuICAgIGh0bWwub24oXG4gICAgICAnY2xpY2snLFxuICAgICAgJy5yb2xsLWNhcmQuY29tYmluZWQgYnV0dG9uJyxcbiAgICAgIENvbWJpbmVkQ2hlY2tDYXJkLl9vbkNsaWNrLmJpbmQodGhpcylcbiAgICApXG4gIH1cblxuICBzdGF0aWMgZ2V0IGRlZmF1bHRDb25maWcgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRDb25maWcsIHtcbiAgICAgIHRlbXBsYXRlOiAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9jaGF0L2NhcmRzL2NvbWJpbmVkLXJvbGwuaHRtbCcsXG4gICAgICB0eXBlOiAnY29tYmluZWRDYXJkJyxcbiAgICAgIHRpdGxlOiAnQ29DNy5Db21iaW5lZFJvbGxDYXJkJ1xuICAgIH0pXG4gIH1cblxuICBnZXQgY29uZmlnICgpIHtcbiAgICByZXR1cm4gQ29tYmluZWRDaGVja0NhcmQuZGVmYXVsdENvbmZpZ1xuICB9XG5cbiAgZ2V0IHN1Y2Nlc3NDb3VudCAoKSB7XG4gICAgaWYgKHRoaXMucm9sbGVkKSB7XG4gICAgICBsZXQgY291bnQgPSAwXG4gICAgICBmb3IgKGNvbnN0IHIgb2YgdGhpcy5yb2xscykge1xuICAgICAgICBpZiAoci5wYXNzZWQpIGNvdW50ICs9IDFcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb3VudFxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBnZXQgbWFpbkFjdG9yS2V5ICgpIHtcbiAgICByZXR1cm4gdGhpcy5yb2xsc1swXT8uYWN0b3I/LmFjdG9yS2V5IHx8IHVuZGVmaW5lZFxuICB9XG5cbiAgZ2V0IHN1Y2Nlc3MgKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5zdWNjZXNzQ291bnQgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgaWYgKHRoaXMuYW55KSB7XG4gICAgICBpZiAodGhpcy5zdWNjZXNzQ291bnQgPiAwKSByZXR1cm4gdHJ1ZVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmICh0aGlzLmFsbCkge1xuICAgICAgaWYgKHRoaXMuc3VjY2Vzc0NvdW50ID09PSB0aGlzLnJvbGxzLmxlbmd0aCkgcmV0dXJuIHRydWVcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBnZXQgZmFpbHVyZSAoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnN1Y2Nlc3MgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuICF0aGlzLnN1Y2Nlc3NcbiAgfVxuXG4gIGdldCBjaGVja0dNSW5pdGlhdG9yICgpIHtcbiAgICByZXR1cm4gZ2FtZS51c2Vycy5nZXQodGhpcy5pbml0aWF0b3IpPy5pc0dNXG4gIH1cblxuICBhc3luYyBnZXRIdG1sUm9sbCAoKSB7XG4gICAgaWYgKCF0aGlzLnJvbGxlZCkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGNvbnN0IGNoZWNrID0gbmV3IENvQzdDaGVjaygpXG4gICAgYXdhaXQgY2hlY2suX3BlcmZvcm0oe1xuICAgICAgcm9sbDogdGhpcy5fcm9sbFtjaGVjay5kaWNlTW9kaWZpZXIgfHwgMF0sXG4gICAgICBzaWxlbnQ6IHRydWVcbiAgICB9KVxuICAgIHJldHVybiBhd2FpdCBjaGVjay5nZXRIdG1sUm9sbCh7IGhpZGVTdWNjZXNzOiB0cnVlIH0pXG4gIH1cblxuICBwcm9jZXNzIChkYXRhKSB7XG4gICAgc3dpdGNoIChkYXRhLmFjdGlvbikge1xuICAgICAgY2FzZSAnbmV3JzpcbiAgICAgICAgdGhpcy5hZGRSb2xsRGF0YShkYXRhKVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlICdyb2xsJzpcbiAgICAgICAgdGhpcy5hZGRSb2xsRGF0YShkYXRhKVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlICd1cGRhdGVSb2xsJzoge1xuICAgICAgICB0aGlzLnVwZGF0ZVJvbGwoZGF0YSlcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSAnYXNzaWduUm9sbCc6IHtcbiAgICAgICAgdGhpcy5hc3NpZ25Sb2xsKGRhdGEpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGdhbWUudXNlci5pc0dNKSB0aGlzLnVwZGF0ZUNoYXRDYXJkKClcbiAgICBlbHNlIGdhbWUuc29ja2V0LmVtaXQoJ3N5c3RlbS5Db0M3JywgZGF0YSlcbiAgfVxuXG4gIGFzeW5jIGFzc2lnblJvbGwgKGRhdGEpIHtcbiAgICBpZiAoZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgIGlmICghdGhpcy5yb2xsZWQpIHtcbiAgICAgICAgdGhpcy5yb2xsZWQgPSB0cnVlXG4gICAgICAgIHRoaXMuX3JvbGwgPSBkYXRhLnJvbGxcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgX29uQ2xpY2sgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuXG4gICAgY29uc3QgYSA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCBhY3Rpb24gPSBhLmRhdGFzZXQuYWN0aW9uXG4gICAgY29uc3QgbGkgPSBhLmNsb3Nlc3QoJ2xpLmFjdG9yLXJvbGwnKVxuICAgIGNvbnN0IG1lc3NhZ2UgPSBhLmNsb3Nlc3QoJy5jaGF0LW1lc3NhZ2UnKVxuICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gYS5jbG9zZXN0KCdkaXYucm9sbC1jYXJkJylcbiAgICBjb25zdCBjYXJkID0gYXdhaXQgQ29tYmluZWRDaGVja0NhcmQuZnJvbUhUTUxDYXJkRWxlbWVudChjYXJkRWxlbWVudClcbiAgICBjYXJkLm1lc3NhZ2VJZCA9IG1lc3NhZ2UuZGF0YXNldC5tZXNzYWdlSWRcbiAgICBjb25zdCByYW5rID0gTnVtYmVyKGxpPy5kYXRhc2V0Py5yYW5rKVxuXG4gICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgIGNhc2UgJ3JlbW92ZS1yb2xsJzoge1xuICAgICAgICBjYXJkLnJlbW92ZVJvbGwocmFuaylcbiAgICAgICAgYXdhaXQgY2FyZC51cGRhdGVDaGF0Q2FyZCgpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ2Nsb3NlLWNhcmQnOiB7XG4gICAgICAgIGNhcmQuY2xvc2VDYXJkKClcbiAgICAgICAgYXdhaXQgY2FyZC51cGRhdGVDaGF0Q2FyZCgpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ3JvbGwtY2FyZCc6IHtcbiAgICAgICAgY29uc3QgcG9vbCA9IHt9XG4gICAgICAgIGZvciAoY29uc3QgZGljZSBvZiBjYXJkLnJvbGxzKSB7XG4gICAgICAgICAgY29uc3QgZGljZU1vZGlmaWVyID0gcGFyc2VJbnQoZGljZS5kaWNlTW9kaWZpZXIsIDEwKVxuICAgICAgICAgIGlmICghaXNOYU4oZGljZU1vZGlmaWVyKSkge1xuICAgICAgICAgICAgcG9vbFtkaWNlTW9kaWZpZXJdID0gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByb2xsID0gYXdhaXQgQ29DN0RpY2UuY29tYmluZWRSb2xsKHsgcG9vbCB9KVxuICAgICAgICByb2xsLmluaXRpYXRvciA9IGdhbWUudXNlci5pZFxuXG4gICAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgICAgdHlwZTogdGhpcy5kZWZhdWx0Q29uZmlnLnR5cGUsXG4gICAgICAgICAgYWN0aW9uOiAnYXNzaWduUm9sbCcsXG4gICAgICAgICAgZnJvbUdNOiBnYW1lLnVzZXIuaXNHTSxcbiAgICAgICAgICByb2xsXG4gICAgICAgIH1cbiAgICAgICAgQXVkaW9IZWxwZXIucGxheSh7IHNyYzogQ09ORklHLnNvdW5kcy5kaWNlIH0sIHRydWUpXG4gICAgICAgIGNhcmQucHJvY2VzcyhkYXRhKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgdXBkYXRlOiBmYWxzZSxcbiAgICAgICAgICBkYXRhOiBhLmRhdGFzZXQsXG4gICAgICAgICAgY2xhc3NlczogYS5jbGFzc0xpc3QsXG4gICAgICAgICAgdGFyZ2V0OiBhXG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgQ29DN0NoZWNrLmFsdGVyKGNhcmQucm9sbHNbcmFua10sIGFjdGlvbiwgb3B0aW9ucylcbiAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICB0eXBlOiB0aGlzLmRlZmF1bHRDb25maWcudHlwZSxcbiAgICAgICAgICBhY3Rpb246ICd1cGRhdGVSb2xsJyxcbiAgICAgICAgICByYW5rLFxuICAgICAgICAgIGZyb21HTTogZ2FtZS51c2VyLmlzR00sXG4gICAgICAgICAgcm9sbDoge1xuICAgICAgICAgICAgaW5pdGlhdG9yOiBnYW1lLnVzZXIuaWRcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFnYW1lLnVzZXIuaXNHTSkgZGF0YS5yb2xsID0gY2FyZC5yb2xsc1tyYW5rXS5KU09OUm9sbERhdGFcbiAgICAgICAgY2FyZC5wcm9jZXNzKGRhdGEpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgY29tcHV0ZSAoKSB7XG4gICAgaWYgKCF0aGlzLl9yb2xsKSByZXR1cm5cblxuICAgIHRoaXMucm9sbHMgPSB0aGlzLnJvbGxzLmZpbHRlcihyb2xsID0+IHtcbiAgICAgIHJldHVybiB0eXBlb2Ygcm9sbC5hY3Rvci5zeXN0ZW0gIT09ICd1bmRlZmluZWQnIC8vIHJlbW92ZSBhbnkgYWN0b3JzIHRoYXQgbm8gbG9uZ2VyIGV4aXN0XG4gICAgfSlcblxuICAgIGZvciAoY29uc3QgciBvZiB0aGlzLnJvbGxzKSB7XG4gICAgICBpZiAoIXIucm9sbGVkKSB7XG4gICAgICAgIHIubW9kaWZpZXIgPSByLmRpY2VNb2RpZmllciB8fCAwXG4gICAgICAgIHIuZGlmZmljdWx0eSA9IHIuZGlmZmljdWx0eSB8fCBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXJcbiAgICAgICAgci5mbGF0RGljZU1vZGlmaWVyID0gci5mbGF0RGljZU1vZGlmaWVyIHx8IDBcbiAgICAgICAgci5mbGF0VGhyZXNob2xkTW9kaWZpZXIgPSByLmZsYXRUaHJlc2hvbGRNb2RpZmllciB8fCAwXG4gICAgICAgIGF3YWl0IHIuX3BlcmZvcm0oeyByb2xsOiB0aGlzLl9yb2xsW3IubW9kaWZpZXJdLCBzaWxlbnQ6IHRydWUgfSlcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5yb2xsc1tpXS5yb2xsZWQpIHtcbiAgICAgICAgdGhpcy5yb2xsc1tpXS5faHRtbFJvbGwgPSBhd2FpdCB0aGlzLnJvbGxzW2ldLmdldEh0bWxSb2xsKHtcbiAgICAgICAgICBoaWRlRGljZVJlc3VsdDogdHJ1ZVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2h0bWxSb2xsID0gYXdhaXQgdGhpcy5nZXRIdG1sUm9sbCgpXG4gIH1cblxuICBjbG9zZUNhcmQgKCkge1xuICAgIHRoaXMuY2xvc2VkID0gdHJ1ZVxuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgQ2hhdE1lc3NhZ2UsIEZvcm1EYXRhRXh0ZW5kZWQsIGZvdW5kcnksIGdhbWUsIHJlbmRlclRlbXBsYXRlLCB1aSAqL1xuaW1wb3J0IHsgY2hhdEhlbHBlciB9IGZyb20gJy4vaGVscGVyLmpzJ1xuXG5leHBvcnQgY2xhc3MgSW50ZXJhY3RpdmVDaGF0Q2FyZCB7XG4gIGNvbnN0cnVjdG9yIChvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9uc1xuICB9XG5cbiAgZ2V0IG9wdGlvbnMgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdE9wdGlvbnMsIHRoaXMuX29wdGlvbnMpXG4gIH1cblxuICBnZXQgdGVtcGxhdGUgKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMudGVtcGxhdGVcbiAgfVxuXG4gIGdldCBjc3NDbGFzc2VzICgpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmNsYXNzZXNcbiAgfVxuXG4gIGFzeW5jIHRvTWVzc2FnZSAob3B0aW9ubmFsQ2hhdERhdGEgPSB7fSkge1xuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZSh0aGlzLnRlbXBsYXRlLCB0aGlzKVxuICAgIGNvbnN0IGh0bWxDYXJkRWxlbWVudCA9ICQoaHRtbClbMF1cbiAgICBodG1sQ2FyZEVsZW1lbnQuZGF0YXNldC5vYmplY3QgPSBlc2NhcGUodGhpcy5kYXRhU3RyaW5nKVxuICAgIGh0bWxDYXJkRWxlbWVudC5kYXRhc2V0LmNhcmRDbGFzcyA9IHRoaXMuY29uc3RydWN0b3IubmFtZVxuICAgIGh0bWxDYXJkRWxlbWVudC5jbGFzc0xpc3QuYWRkKC4uLnRoaXMuY3NzQ2xhc3NlcylcblxuICAgIGNvbnN0IGNoYXREYXRhID0gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChcbiAgICAgIHtcbiAgICAgICAgdXNlcjogZ2FtZS51c2VyLmlkLFxuICAgICAgICBmbGF2b3I6IGdhbWUuaTE4bi5sb2NhbGl6ZSh0aGlzLm9wdGlvbnMudGl0bGUpLFxuICAgICAgICBjb250ZW50OiBodG1sQ2FyZEVsZW1lbnQub3V0ZXJIVE1MXG4gICAgICB9LFxuICAgICAgb3B0aW9ubmFsQ2hhdERhdGFcbiAgICApXG5cbiAgICBpZiAoWydnbXJvbGwnLCAnYmxpbmRyb2xsJ10uaW5jbHVkZXModGhpcy5yb2xsTW9kZSkpIHtcbiAgICAgIGNoYXREYXRhLndoaXNwZXIgPSBDaGF0TWVzc2FnZS5nZXRXaGlzcGVyUmVjaXBpZW50cygnR00nKVxuICAgIH1cbiAgICBpZiAodGhpcy5yb2xsTW9kZSA9PT0gJ2JsaW5kcm9sbCcpIGNoYXREYXRhLmJsaW5kID0gdHJ1ZVxuXG4gICAgQ2hhdE1lc3NhZ2UuY3JlYXRlKGNoYXREYXRhKS50aGVuKG1zZyA9PiB7XG4gICAgICByZXR1cm4gbXNnXG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZUNoYXRDYXJkIChvcHRpb25zID0ge30pIHtcbiAgICBpZiAob3B0aW9ucy5jb21wdXRlKSB0aGlzLmNvbXB1dGUoKVxuICAgIGlmICghdGhpcy5tZXNzYWdlSWQpIHtcbiAgICAgIHRoaXMudG9NZXNzYWdlKClcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRoaXMudGVtcGxhdGUsIHRoaXMpXG4gICAgICBjb25zdCBodG1sQ2FyZEVsZW1lbnQgPSAkLnBhcnNlSFRNTChodG1sKVswXVxuXG4gICAgICAvLyBBdHRhY2ggdGhlIHNhbkNoZWNrQ2FyZCBvYmplY3QgdG8gdGhlIG1lc3NhZ2UuXG4gICAgICBodG1sQ2FyZEVsZW1lbnQuZGF0YXNldC5vYmplY3QgPSBlc2NhcGUodGhpcy5kYXRhU3RyaW5nKVxuICAgICAgaHRtbENhcmRFbGVtZW50LmRhdGFzZXQuY2FyZENsYXNzID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgICBodG1sQ2FyZEVsZW1lbnQuY2xhc3NMaXN0LmFkZCguLi50aGlzLmNzc0NsYXNzZXMpXG5cbiAgICAgIC8vIFVwZGF0ZSB0aGUgbWVzc2FnZS5cbiAgICAgIGNvbnN0IGNoYXRNZXNzYWdlID0gZ2FtZS5tZXNzYWdlcy5nZXQodGhpcy5tZXNzYWdlSWQpXG4gICAgICBpZiAodGhpcy5jbG9zZWQpIGF3YWl0IGNoYXRNZXNzYWdlLnNldEZsYWcoJ0NvQzcnLCAnc3RhdGUnLCAncmVzb2x2ZWQnKVxuXG4gICAgICBjb25zdCBtc2cgPSBhd2FpdCBjaGF0TWVzc2FnZS51cGRhdGUoe1xuICAgICAgICBjb250ZW50OiBodG1sQ2FyZEVsZW1lbnQub3V0ZXJIVE1MXG4gICAgICB9KVxuICAgICAgYXdhaXQgdWkuY2hhdC51cGRhdGVNZXNzYWdlKG1zZywgZmFsc2UpXG4gICAgICByZXR1cm4gbXNnXG4gICAgfVxuICB9XG5cbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBodG1sLm9uKFxuICAgICAgJ2NsaWNrJyxcbiAgICAgICcuaW50ZXJhY3RpdmUtY2FyZCAuaWMtcmFkaW8tc3dpdGNoJyxcbiAgICAgIHRoaXMuX29uVG9nZ2xlLmJpbmQodGhpcylcbiAgICApXG4gICAgaHRtbC5vbignY2xpY2snLCAnLmludGVyYWN0aXZlLWNhcmQgLmljLXN3aXRjaCcsIHRoaXMuX29uVG9nZ2xlLmJpbmQodGhpcykpXG4gICAgaHRtbC5vbignY2xpY2snLCAnLmludGVyYWN0aXZlLWNhcmQgLnN1Ym1pdCcsIHRoaXMuX29uU3VibWl0LmJpbmQodGhpcykpXG4gICAgaHRtbC5vbignZm9jdXNvdXQnLCAnaW5wdXQnLCB0aGlzLl9vblN1Ym1pdC5iaW5kKHRoaXMpKVxuICAgIGh0bWwub24oJ2NsaWNrJywgJy5pbnRlcmFjdGl2ZS1jYXJkIGJ1dHRvbicsIHRoaXMuX29uQnV0dG9uLmJpbmQodGhpcykpXG4gICAgaHRtbC5vbigna2V5ZG93bicsICdmb3JtJywgdGhpcy5fb25LZXkuYmluZCh0aGlzKSlcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBiaW5kTGlzdGVuZXJzIChodG1sKSB7XG4gICAgY29uc3QgaHRtbE1lc3NhZ2VFbGVtZW50ID0gaHRtbFswXVxuICAgIGNvbnN0IGh0bWxDYXJkRWxlbWVudCA9IGh0bWxNZXNzYWdlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2hhdC1jYXJkJylcbiAgICBpZiAoIWh0bWxDYXJkRWxlbWVudCkgcmV0dXJuXG4gICAgaWYgKCFodG1sQ2FyZEVsZW1lbnQuZGF0YXNldC5jYXJkQ2xhc3MpIHJldHVyblxuICAgIGlmIChcbiAgICAgICFPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhnYW1lLkNvQzcuY2FyZHMpLmluY2x1ZGVzKFxuICAgICAgICBodG1sQ2FyZEVsZW1lbnQuZGF0YXNldC5jYXJkQ2xhc3NcbiAgICAgIClcbiAgICApIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCBjYXJkID0gYXdhaXQgSW50ZXJhY3RpdmVDaGF0Q2FyZC5mcm9tSFRNTENhcmRFbGVtZW50KGh0bWxDYXJkRWxlbWVudClcbiAgICBjb25zdCB0eXBlZENhcmQgPSBPYmplY3QuYXNzaWduKFxuICAgICAgbmV3IGdhbWUuQ29DNy5jYXJkc1todG1sQ2FyZEVsZW1lbnQuZGF0YXNldC5jYXJkQ2xhc3NdKCksXG4gICAgICBjYXJkXG4gICAgKVxuICAgIHR5cGVkQ2FyZC5hc3NpZ25PYmplY3QoKVxuICAgIHR5cGVkQ2FyZC5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuICB9XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRvIHJlYXNzaWduIG9iamVjdCB0eXBlXG4gICAqIEByZXR1cm5zXG4gICAqL1xuICBhc3NpZ25PYmplY3QgKCkge31cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHsqfSBldmVudCB3aWxsIGNoZWNrIGZvciBhbiBhY3Rpb24gKGRhdGEtYWN0aW9uKVxuICAgKiBpZiBhIG1ldGhvZCB3aXRoIHRoYXQgbmFtZSBleGlzdCBpdCB3aWxsIGJlIHRyaWdnZXJlZC5cbiAgICovXG4gIF9vbkJ1dHRvbiAoZXZlbnQpIHtcbiAgICBjb25zdCBidXR0b24gPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgLy8gYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZScgLy9Bdm9pZCBtdWx0aXBsZSBwdXNoXG4gICAgY29uc3QgYWN0aW9uID0gYnV0dG9uLmRhdGFzZXQuYWN0aW9uXG4gICAgaWYgKHRoaXNbYWN0aW9uXSkgdGhpc1thY3Rpb25dKHsgZXZlbnQsIHVwZGF0ZTogdHJ1ZSB9KVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gZXZlbnRcbiAgICogQHJldHVybnMgZmFsc2UgaWYga2V5IGlzIGVudGVyIHRvIGF2b2lkIGdsb2JhbCBzdWJtaXNzaW9uXG4gICAqL1xuICBfb25LZXkgKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VudGVyJykgdGhpcy5fb25TdWJtaXQoZXZlbnQpXG4gICAgcmV0dXJuIGV2ZW50LmtleSAhPT0gJ0VudGVyJ1xuICB9XG5cbiAgX29uU3VibWl0IChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCBjYXJkID0gdGFyZ2V0LmNsb3Nlc3QoJy5pbnRlcmFjdGl2ZS1jYXJkJylcbiAgICBpZiAoIWNhcmQpIHJldHVyblxuICAgIGNvbnN0IHVwZGF0ZXMgPSB0aGlzLl91cGRhdGUoY2FyZClcbiAgICBpZiAodXBkYXRlcykgdGhpcy51cGRhdGVDaGF0Q2FyZCgpXG4gIH1cblxuICBfdXBkYXRlIChjYXJkKSB7XG4gICAgY29uc3QgZm9ybXMgPSBjYXJkLnF1ZXJ5U2VsZWN0b3JBbGwoJ2Zvcm0nKVxuICAgIGxldCB1cGRhdGVzID0gZmFsc2VcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZvcm1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBmb3JtID0gZm9ybXNbaV1cbiAgICAgIGNvbnN0IGZkID0gbmV3IEZvcm1EYXRhRXh0ZW5kZWQoZm9ybSlcbiAgICAgIGxldCBkYXRhID0gZmQub2JqZWN0XG4gICAgICBkYXRhID0gZm91bmRyeS51dGlscy5kaWZmT2JqZWN0KHRoaXMsIGZvdW5kcnkudXRpbHMuZXhwYW5kT2JqZWN0KGRhdGEpKVxuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZGF0YSkpIHtcbiAgICAgICAgdGhpc1trZXldID0gdmFsdWVcbiAgICAgICAgdXBkYXRlcyA9IHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZXNcbiAgfVxuXG4gIGdldCBtZXNzYWdlICgpIHtcbiAgICBpZiAodGhpcy5fbWVzc2FnZSkgcmV0dXJuIHRoaXMuX21lc3NhZ2VcbiAgICBpZiAodGhpcy5fbWVzc2FnZUlkKSByZXR1cm4gZ2FtZS5tZXNzYWdlcy5nZXQodGhpcy5fbWVzc2FnZUlkKVxuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIHNldCBtZXNzYWdlICh4KSB7XG4gICAgdGhpcy5fbWVzc2FnZSA9IHhcbiAgfVxuXG4gIGdldCBtZXNzYWdlSWQgKCkge1xuICAgIGlmICh0aGlzLl9tZXNzYWdlSWQpIHJldHVybiB0aGlzLl9tZXNzYWdlSWRcbiAgICBpZiAodGhpcy5fbWVzc2FnZSkgcmV0dXJuIHRoaXMuX21lc3NhZ2UuaWRcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBzZXQgbWVzc2FnZUlkICh4KSB7XG4gICAgdGhpcy5fbWVzc2FnZUlkID0geFxuICB9XG5cbiAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsYXNzZXM6IFsnaW50ZXJhY3RpdmUtY2FyZCddLFxuICAgICAgZXhjbHVkZTogWydfYWN0b3InLCAnX3NraWxsJywgJ19pdGVtJywgJ19tZXNzYWdlJywgJ19odG1sUm9sbCddLFxuICAgICAgZXhjbHVkZVN0YXJ0V2l0aDogJ19fJ1xuICAgIH1cbiAgfVxuXG4gIGdldCBkYXRhICgpIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZSh0aGlzLmRhdGFTdHJpbmcpXG4gIH1cblxuICBnZXQgZGF0YVN0cmluZyAoKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMsIChrZXksIHZhbHVlKSA9PiB7XG4gICAgICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiB1bmRlZmluZWRcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXhjbHVkZT8uaW5jbHVkZXMoa2V5KSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKHRoaXMub3B0aW9ucy5leGNsdWRlU3RhcnRXaXRoKSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfSlcbiAgfVxuXG4gIGdldCByb2xsTW9kZSAoKSB7XG4gICAgaWYgKCF0aGlzLl9yb2xsTW9kZSkgdGhpcy5fcm9sbE1vZGUgPSBnYW1lLnNldHRpbmdzLmdldCgnY29yZScsICdyb2xsTW9kZScpXG4gICAgcmV0dXJuIHRoaXMuX3JvbGxNb2RlXG4gIH1cblxuICBzZXQgcm9sbE1vZGUgKHgpIHtcbiAgICBpZiAoeCA9PT0gZmFsc2UpIHRoaXMuX3JvbGxNb2RlID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ2NvcmUnLCAncm9sbE1vZGUnKVxuICAgIHRoaXMuX3JvbGxNb2RlID0geFxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGZyb21NZXNzYWdlSWQgKG1lc3NhZ2VJZCkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBnYW1lLm1lc3NhZ2VzLmdldChtZXNzYWdlSWQpXG4gICAgaWYgKCFtZXNzYWdlKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgY29uc3QgY2FyZCA9IGF3YWl0IHRoaXMuZnJvbU1lc3NhZ2UobWVzc2FnZSlcbiAgICBjYXJkLm1lc3NhZ2VJZCA9IG1lc3NhZ2VJZFxuICAgIHJldHVybiBjYXJkXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgZnJvbU1lc3NhZ2UgKG1lc3NhZ2UpIHtcbiAgICBjb25zdCBjYXJkRWxlbWVudCA9ICQobWVzc2FnZS5jb250ZW50KVswXVxuICAgIGlmICghY2FyZEVsZW1lbnQpIHJldHVybiB1bmRlZmluZWRcbiAgICBjb25zdCBjYXJkID0gYXdhaXQgdGhpcy5mcm9tSFRNTENhcmRFbGVtZW50KGNhcmRFbGVtZW50KVxuICAgIGNhcmQubWVzc2FnZSA9IG1lc3NhZ2VcbiAgICByZXR1cm4gY2FyZFxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGZyb21IVE1MQ2FyZEVsZW1lbnQgKGNhcmQpIHtcbiAgICBjb25zdCBjYXJkRGF0YSA9IEpTT04ucGFyc2UodW5lc2NhcGUoY2FyZC5kYXRhc2V0Lm9iamVjdCkpXG4gICAgaWYgKCFjYXJkRGF0YS5tZXNzYWdlSWQpIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjYXJkLmNsb3Nlc3QoJy5tZXNzYWdlJylcbiAgICAgIGNhcmREYXRhLm1lc3NhZ2VJZCA9IG1lc3NhZ2U/LmRhdGFzZXQ/Lm1lc3NhZ2VJZFxuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5mcm9tRGF0YShjYXJkRGF0YSlcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBmcm9tRGF0YSAoZGF0YSkge1xuICAgIGNvbnN0IGNhcmQgPSBPYmplY3QuYXNzaWduKG5ldyB0aGlzKCksIGRhdGEpXG4gICAgYXdhaXQgY2FyZC5hc3NpZ25PYmplY3QoKVxuICAgIHJldHVybiBjYXJkXG4gIH1cblxuICAvLy8gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgc2V0RmxhZyAoZmxhZ05hbWUpIHtcbiAgICBpZiAoIWZsYWdOYW1lICYmICEoJC50eXBlKGZsYWdOYW1lKSA9PT0gJ3N0cmluZycpKSByZXR1cm5cbiAgICB0aGlzW2ZsYWdOYW1lXSA9IHRydWVcbiAgfVxuXG4gIHVuc2V0RmxhZyAoZmxhZ05hbWUpIHtcbiAgICBpZiAoIWZsYWdOYW1lICYmICEoJC50eXBlKGZsYWdOYW1lKSA9PT0gJ3N0cmluZycpKSByZXR1cm5cbiAgICB0aGlzW2ZsYWdOYW1lXSA9IGZhbHNlXG4gIH1cblxuICB0b2dnbGVGbGFnIChmbGFnTmFtZSkge1xuICAgIHRoaXNbZmxhZ05hbWVdID0gIXRoaXNbZmxhZ05hbWVdXG4gIH1cblxuICBhc3luYyBfb25Ub2dnbGUgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuXG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGlmICgnYWN0aW9uJyBpbiB0YXJnZXQuZGF0YXNldCkgcmV0dXJuIHRoaXMuX29uQnV0dG9uKGV2ZW50KVxuICAgIGlmIChcbiAgICAgIHRhcmdldCAmJlxuICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnZ20tc2VsZWN0LW9ubHknKSAmJlxuICAgICAgIWdhbWUudXNlci5pc0dNXG4gICAgKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgZmxhZyA9IHRhcmdldC5kYXRhc2V0LmZsYWdcbiAgICBpZiAoIWZsYWcpIHJldHVyblxuICAgIGNvbnN0IHRvZ2dsZSA9IHRhcmdldC5jbG9zZXN0KCcuaWMtcmFkaW8nKVxuICAgIGlmICghdG9nZ2xlKSB7XG4gICAgICB0aGlzLnRvZ2dsZUZsYWcoZmxhZylcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgYnV0dG9ucyA9IHRvZ2dsZS5xdWVyeVNlbGVjdG9yQWxsKCcuaWMtcmFkaW8tc3dpdGNoJylcbiAgICAgIGZvciAoY29uc3QgYiBvZiBidXR0b25zKSB7XG4gICAgICAgIHRoaXMudW5zZXRGbGFnKGIuZGF0YXNldC5mbGFnKVxuICAgICAgfVxuICAgICAgdGhpcy5zZXRGbGFnKGZsYWcpXG4gICAgfVxuICAgIGNvbnN0IGNhcmQgPSB0YXJnZXQuY2xvc2VzdCgnLmludGVyYWN0aXZlLWNhcmQnKVxuICAgIGlmIChjYXJkKSB0aGlzLl91cGRhdGUoY2FyZClcbiAgICB0aGlzLnVwZGF0ZUNoYXRDYXJkKClcbiAgfVxuXG4gIC8vLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgZ2V0IGRpc3BsYXlBY3Rvck9uQ2FyZCAoKSB7XG4gICAgcmV0dXJuIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2Rpc3BsYXlBY3Rvck9uQ2FyZCcpXG4gIH1cblxuICBnZXQgaXNCbGluZCAoKSB7XG4gICAgaWYgKCF0aGlzLnJvbGxNb2RlKSByZXR1cm4gbnVsbFxuICAgIGlmICh1bmRlZmluZWQgPT09IHRoaXMuX2lzQmxpbmQpIHtcbiAgICAgIHRoaXMuX2lzQmxpbmQgPSB0aGlzLnJvbGxNb2RlID09PSAnYmxpbmRyb2xsJ1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5faXNCbGluZFxuICB9XG5cbiAgc2V0IGlzQmxpbmQgKHgpIHtcbiAgICB0aGlzLl9pc0JsaW5kID0geFxuICB9XG5cbiAgZ2V0IGFjdG9yICgpIHtcbiAgICBpZiAoIXRoaXMuYWN0b3JLZXkpIHJldHVybiBudWxsXG4gICAgcmV0dXJuIGNoYXRIZWxwZXIuZ2V0QWN0b3JGcm9tS2V5KHRoaXMuYWN0b3JLZXkpIC8vIFJFRkFDVE9SSU5HICgyKVxuICB9XG5cbiAgZ2V0IHRva2VuICgpIHtcbiAgICBpZiAoIXRoaXMuYWN0b3IpIHJldHVybiBudWxsXG4gICAgcmV0dXJuIGNoYXRIZWxwZXIuZ2V0VG9rZW5Gcm9tS2V5KHRoaXMuYWN0b3JLZXkpXG4gIH1cblxuICBnZXQgaXRlbSAoKSB7XG4gICAgaWYgKCF0aGlzLml0ZW1JZCkgcmV0dXJuIG51bGxcbiAgICByZXR1cm4gdGhpcy5hY3Rvci5pdGVtcy5nZXQodGhpcy5pdGVtSWQpXG4gIH1cblxuICBnZXQgd2VhcG9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtXG4gIH1cblxuICBnZXQgdGFyZ2V0ZWRUb2tlbnMgKCkge1xuICAgIHJldHVybiBbLi4uZ2FtZS51c2VyLnRhcmdldHNdXG4gIH1cblxuICBnZXQgdGFyZ2V0ICgpIHtcbiAgICBpZiAodGhpcy50YXJnZXRUb2tlbikgcmV0dXJuIHRoaXMudGFyZ2V0VG9rZW5cbiAgICByZXR1cm4gdGhpcy50YXJnZXRBY3RvclxuICB9XG5cbiAgZ2V0IGlzVGFyZ2V0T3duZXIgKCkge1xuICAgIHJldHVybiB0aGlzLnRhcmdldC5pc093bmVyXG4gIH1cblxuICBnZXQgaXNLZWVwZXIgKCkge1xuICAgIHJldHVybiBnYW1lLnVzZXIuaXNHTVxuICB9XG5cbiAgLyoqXG4gICAqIElmIGEgdGFyZ2V0S2V5IHdhcyBwcm92aWRlZCB0cnkgdG8gZmluZCBhIHRva2VuIHdpdGggdGhhdCBrZXkgYW5kIHVzZSBpdC5cbiAgICogSWYgbm90IHRhcmdldEtleSBwcm92aWRlZCByZXR1cm4gdGhlIGZpcnN0IHRhcmdldC5cbiAgICovXG4gIGdldCB0YXJnZXRUb2tlbiAoKSB7XG4gICAgaWYgKCF0aGlzLl90YXJnZXRUb2tlbikge1xuICAgICAgaWYgKHRoaXMuX3RhcmdldEtleSkge1xuICAgICAgICB0aGlzLl90YXJnZXRUb2tlbiA9IGNoYXRIZWxwZXIuZ2V0VG9rZW5Gcm9tS2V5KHRoaXMuX3RhcmdldEtleSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3RhcmdldFRva2VuID0gdGhpcy50YXJnZXRlZFRva2Vucy5wb3AoKVxuICAgICAgICBpZiAodGhpcy5fdGFyZ2V0VG9rZW4pIHtcbiAgICAgICAgICB0aGlzLl90YXJnZXRLZXkgPSBgJHt0aGlzLl90YXJnZXRUb2tlbi5zY2VuZS5pZH0uJHt0aGlzLl90YXJnZXRUb2tlbi5pZH1gXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgICAgICAgdGhpcy5fdGFyZ2V0VG9rZW4gPSBudWxsXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3RhcmdldFRva2VuXG4gIH1cblxuICBnZXQgdGFyZ2V0QWN0b3IgKCkge1xuICAgIGlmICghdGhpcy5fdGFyZ2V0QWN0b3IpIHtcbiAgICAgIGlmICh0aGlzLnRhcmdldFRva2VuKSB7XG4gICAgICAgIHRoaXMuX3RhcmdldEFjdG9yID1cbiAgICAgICAgICB0aGlzLnRhcmdldFRva2VuLmFjdG9yIHx8XG4gICAgICAgICAgdGhpcy50YXJnZXRUb2tlbi5kYXRhLmFjdG9yIHx8XG4gICAgICAgICAgdGhpcy50YXJnZXRUb2tlbi5kYXRhLmRvY3VtZW50XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl90YXJnZXRBY3RvciA9IGNoYXRIZWxwZXIuZ2V0QWN0b3JGcm9tS2V5KHRoaXMuX3RhcmdldEtleSkgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl90YXJnZXRBY3RvclxuICB9XG5cbiAgZ2V0IHRhcmdldEtleSAoKSB7XG4gICAgaWYgKCF0aGlzLnRhcmdldFRva2VuICYmICF0aGlzLnRhcmdldEFjdG9yKSByZXR1cm4gbnVsbFxuICAgIHJldHVybiB0aGlzLl90YXJnZXRLZXlcbiAgfVxuXG4gIGdldCBoYXNUYXJnZXQgKCkge1xuICAgIGlmICghdGhpcy50YXJnZXRUb2tlbiAmJiAhdGhpcy50YXJnZXRBY3RvcikgcmV0dXJuIGZhbHNlXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIHNldCB0YXJnZXRLZXkgKHgpIHtcbiAgICB0aGlzLl90YXJnZXRLZXkgPSB4XG4gIH1cblxuICBnZXQgc2tpbGxzICgpIHtcbiAgICByZXR1cm4gdGhpcy5hY3Rvci5nZXRXZWFwb25Ta2lsbHModGhpcy5pdGVtSWQpXG4gIH1cblxuICBnZXQgdGFyZ2V0SW1nICgpIHtcbiAgICBjb25zdCBpbWcgPSBjaGF0SGVscGVyLmdldEFjdG9ySW1nRnJvbUtleSh0aGlzLnRhcmdldEtleSlcbiAgICBpZiAoaW1nKSByZXR1cm4gaW1nXG4gICAgcmV0dXJuICcuLi9pY29ucy9zdmcvbXlzdGVyeS1tYW4tYmxhY2suc3ZnJ1xuICB9XG5cbiAgZ2V0IG5hbWUgKCkge1xuICAgIGlmICh0aGlzLnRva2VuKSByZXR1cm4gdGhpcy50b2tlbi5uYW1lXG4gICAgcmV0dXJuIHRoaXMuYWN0b3IubmFtZVxuICB9XG5cbiAgZ2V0IHRhcmdldE5hbWUgKCkge1xuICAgIGlmICghdGhpcy50YXJnZXQpIHJldHVybiAnZHVtbXknXG4gICAgcmV0dXJuIHRoaXMudGFyZ2V0Lm5hbWVcbiAgfVxuXG4gIGdldCBhY3RvckltZyAoKSB7XG4gICAgY29uc3QgaW1nID0gY2hhdEhlbHBlci5nZXRBY3RvckltZ0Zyb21LZXkodGhpcy5hY3RvcktleSlcbiAgICBpZiAoaW1nKSByZXR1cm4gaW1nXG4gICAgcmV0dXJuICcuLi9pY29ucy9zdmcvbXlzdGVyeS1tYW4tYmxhY2suc3ZnJ1xuICB9XG59XG4iLCIvKiBnbG9iYWwgY2FudmFzLCBDaGF0TWVzc2FnZSwgRGlhbG9nLCBmb3VuZHJ5LCBnYW1lLCBSb2xsLCB1aSAqL1xuaW1wb3J0IHsgQ29DN0RpY2UgfSBmcm9tICcuLi8uLi9kaWNlLmpzJ1xuaW1wb3J0IHsgSW50ZXJhY3RpdmVDaGF0Q2FyZCB9IGZyb20gJy4uL2ludGVyYWN0aXZlLWNoYXQtY2FyZC5qcydcbmltcG9ydCB7IGNyZWF0ZUlubGluZVJvbGwgfSBmcm9tICcuLi9oZWxwZXIuanMnXG5cbmV4cG9ydCBjbGFzcyBEYW1hZ2VDYXJkIGV4dGVuZHMgSW50ZXJhY3RpdmVDaGF0Q2FyZCB7XG4gIC8qKlxuICAgKiBFeHRlbmQgYW5kIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG9wdGlvbnMgdXNlZCBieSB0aGUgNWUgQWN0b3IgU2hlZXRcbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRPcHRpb25zLCB7XG4gICAgICBleGNsdWRlOiBbXG4gICAgICAgICdfdGFyZ2V0VG9rZW4nLFxuICAgICAgICAnX3RhcmdldEFjdG9yJyxcbiAgICAgICAgJ19odG1sUm9sbCcsXG4gICAgICAgICdfaHRtbElubGluZVJvbGwnXG4gICAgICBdLmNvbmNhdChzdXBlci5kZWZhdWx0T3B0aW9ucy5leGNsdWRlKSxcbiAgICAgIHRlbXBsYXRlOiAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9jaGF0L2NhcmRzL2RhbWFnZS5odG1sJ1xuICAgIH0pXG4gIH1cblxuICAvLyBhY3RpdmF0ZUxpc3RlbmVycyAoaHRtbCkge1xuICAvLyAgIHN1cGVyLmFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpXG4gIC8vIH1cblxuICBhc3luYyBhc3NpZ25PYmplY3QgKCkge1xuICAgIGlmICh0aGlzLmRhbWFnZVJvbGwgJiYgdGhpcy5kYW1hZ2VSb2xsLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdPYmplY3QnKSB7XG4gICAgICB0aGlzLmRhbWFnZVJvbGwgPSBSb2xsLmZyb21EYXRhKHRoaXMuZGFtYWdlUm9sbClcbiAgICB9XG4gIH1cblxuICBfb25CdXR0b24gKGV2ZW50KSB7XG4gICAgc3VwZXIuX29uQnV0dG9uKGV2ZW50KVxuICB9XG5cbiAgZ2V0IGNyaXRpY2FsICgpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmNyaXRpY2FsXG4gIH1cblxuICBzZXQgY3JpdGljYWwgKHgpIHtcbiAgICB0aGlzLl9vcHRpb25zLmNyaXRpY2FsID0geFxuICB9XG5cbiAgZ2V0IGltcGFsZSAoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl9pbXBhbGUgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gdGhpcy53ZWFwb24uaW1wYWxlXG4gICAgcmV0dXJuIHRoaXMuX2ltcGFsZVxuICB9XG5cbiAgc2V0IGltcGFsZSAoeCkge1xuICAgIHRoaXMuX2ltcGFsZSA9IHhcbiAgfVxuXG4gIGdldCBpc0RhbWFnZUZvcm11bGEgKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5kYW1hZ2VGb3JtdWxhICE9PSAnc3RyaW5nJykgcmV0dXJuIGZhbHNlXG4gICAgaWYgKCFpc05hTihOdW1iZXIodGhpcy5kYW1hZ2VGb3JtdWxhKSkpIHJldHVybiBmYWxzZVxuICAgIHJldHVybiBSb2xsLnZhbGlkYXRlKHRoaXMuZGFtYWdlRm9ybXVsYSlcbiAgfVxuXG4gIGdldCBpc0RhbWFnZU51bWJlciAoKSB7XG4gICAgcmV0dXJuICFpc05hTihOdW1iZXIodGhpcy5kYW1hZ2VGb3JtdWxhKSlcbiAgfVxuXG4gIGdldCBpc0FybW9yRm9ydWxhICgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuYXJtb3IgIT09ICdzdHJpbmcnKSByZXR1cm4gZmFsc2VcbiAgICBpZiAoIWlzTmFOKE51bWJlcih0aGlzLmFybW9yKSkpIHJldHVybiBmYWxzZVxuICAgIHJldHVybiBSb2xsLnZhbGlkYXRlKHRoaXMuYXJtb3IpXG4gIH1cblxuICBnZXQgdG90YWxEYW1hZ2VTdHJpbmcgKCkge1xuICAgIGxldCBkYW1hZ2UgPSBOdW1iZXIoXG4gICAgICB0aGlzLmlzRGFtYWdlTnVtYmVyID8gdGhpcy5kYW1hZ2VGb3JtdWxhIDogdGhpcy5yb2xsLnRvdGFsXG4gICAgKVxuICAgIGlmICghdGhpcy5pZ25vcmVBcm1vcikge1xuICAgICAgaWYgKGlzTmFOKE51bWJlcih0aGlzLmFybW9yKSkgfHwgTnVtYmVyKHRoaXMuYXJtb3IpID4gMCkge1xuICAgICAgICBkYW1hZ2UgPSBkYW1hZ2UgLSBOdW1iZXIodGhpcy5hcm1vcilcbiAgICAgIH1cbiAgICAgIGlmICghaXNOYU4oTnVtYmVyKHRoaXMuYXJtb3IpKSkge1xuICAgICAgICBpZiAoZGFtYWdlIDw9IDApIHtcbiAgICAgICAgICByZXR1cm4gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkFybW9yQWJzb3Jic0RhbWFnZScpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhbWFnZVxuICB9XG5cbiAgZ2V0IG5vRGFtYWdlICgpIHtcbiAgICBpZiAodGhpcy5yb2xsZWQpIHtcbiAgICAgIGNvbnN0IGRhbWFnZSA9IHRoaXMuaXNEYW1hZ2VOdW1iZXIgPyB0aGlzLmRhbWFnZUZvcm11bGEgOiB0aGlzLnJvbGwudG90YWxcbiAgICAgIGlmICghdGhpcy5pZ25vcmVBcm1vcikge1xuICAgICAgICBpZiAoIWlzTmFOKE51bWJlcih0aGlzLmFybW9yKSkpIHtcbiAgICAgICAgICByZXR1cm4gISEoZGFtYWdlIC0gTnVtYmVyKHRoaXMuYXJtb3IpIDw9IDApXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gISEoZGFtYWdlIDw9IDApXG4gICAgICB9XG4gICAgfSBlbHNlIHJldHVybiBmYWxzZVxuICB9XG5cbiAgYXN5bmMgdXBkYXRlQ2hhdENhcmQgKCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZmFzdEZvcndhcmQgJiYgIXRoaXMucm9sbCAmJiAhdGhpcy5pc0RhbWFnZU51bWJlcikge1xuICAgICAgYXdhaXQgdGhpcy5yb2xsRGFtYWdlKHsgdXBkYXRlOiBmYWxzZSB9KVxuICAgIH1cbiAgICBpZiAoXG4gICAgICB0aGlzLmlzRGFtYWdlTnVtYmVyIHx8XG4gICAgICAodGhpcy5yb2xsICYmIHRoaXMucm9sbC50b3RhbCAhPSBudWxsKSB8fFxuICAgICAgdGhpcy5oYXJkcm9sbGVkXG4gICAgKSB7XG4gICAgICB0aGlzLnJvbGxlZCA9IHRydWVcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yb2xsZWQgPSBmYWxzZVxuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmZhc3RGb3J3YXJkICYmICF0aGlzLmRhbWFnZUluZmxpY3RlZCAmJiAhdGhpcy5ub0RhbWFnZSkge1xuICAgICAgYXdhaXQgdGhpcy5kZWFsRGFtYWdlKHsgdXBkYXRlOiBmYWxzZSB9KVxuICAgIH1cblxuICAgIGlmICh0aGlzLnJvbGxlZCAmJiB0aGlzLnJvbGwpIHtcbiAgICAgIGlmICh0aGlzLnJvbGwuY29uc3RydWN0b3IubmFtZSA9PT0gJ09iamVjdCcpIHtcbiAgICAgICAgdGhpcy5yb2xsID0gUm9sbC5mcm9tRGF0YSh0aGlzLnJvbGwpXG4gICAgICB9XG4gICAgICBjb25zdCBhID0gY3JlYXRlSW5saW5lUm9sbCh0aGlzLnJvbGwpXG4gICAgICB0aGlzLl9odG1sSW5saW5lUm9sbCA9IGEub3V0ZXJIVE1MXG4gICAgICB0aGlzLl9odG1sUm9sbCA9IGF3YWl0IHRoaXMucm9sbC5yZW5kZXIoKVxuICAgIH1cbiAgICBhd2FpdCBzdXBlci51cGRhdGVDaGF0Q2FyZCgpXG4gIH1cblxuICBhc3luYyByb2xsRGFtYWdlIChvcHRpb25zID0geyB1cGRhdGU6IHRydWUgfSkge1xuICAgIHRoaXMucm9sbCA9IGF3YWl0IG5ldyBSb2xsKHRoaXMuZGFtYWdlRm9ybXVsYSB8fCAnMCcpLmV2YWx1YXRlKHtcbiAgICAgIGFzeW5jOiB0cnVlXG4gICAgfSlcbiAgICBhd2FpdCBDb0M3RGljZS5zaG93Um9sbERpY2UzZCh0aGlzLnJvbGwpXG4gICAgdGhpcy5oYXJkcm9sbGVkID0gdHJ1ZVxuICAgIG9wdGlvbnMudXBkYXRlID1cbiAgICAgIHR5cGVvZiBvcHRpb25zLnVwZGF0ZSA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy51cGRhdGVcbiAgICBpZiAob3B0aW9ucy51cGRhdGUpIHRoaXMudXBkYXRlQ2hhdENhcmQoKVxuICB9XG5cbiAgYXN5bmMgcm9sbEFybW9yIChvcHRpb25zID0geyB1cGRhdGU6IHRydWUgfSkge1xuICAgIGNvbnN0IHJvbGwgPSBhd2FpdCBuZXcgUm9sbCh0aGlzLmFybW9yKS5ldmFsdWF0ZSh7IGFzeW5jOiB0cnVlIH0pXG4gICAgdGhpcy5hcm1vciA9IHJvbGwudG90YWxcbiAgICBvcHRpb25zLnVwZGF0ZSA9XG4gICAgICB0eXBlb2Ygb3B0aW9ucy51cGRhdGUgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMudXBkYXRlXG4gICAgaWYgKG9wdGlvbnMudXBkYXRlKSB0aGlzLnVwZGF0ZUNoYXRDYXJkKClcbiAgfVxuXG4gIGFzeW5jIGRlYWxEYW1hZ2VUb1NlbGVjdGVkVGFyZ2V0IChvcHRpb25zID0geyB1cGRhdGU6IHRydWUgfSkge1xuICAgIGlmICh0aGlzLmlzQXJtb3JGb3J1bGEpIGF3YWl0IHRoaXMucm9sbEFybW9yKClcbiAgICBpZiAoaXNOYU4oTnVtYmVyKHRoaXMudG90YWxEYW1hZ2VTdHJpbmcpKSkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRXJyb3JFdmFsdWF0aW5nRGFtYWdlJykpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgdGFyZ2V0cyA9IFtdXG4gICAgY29uc3QgdGFyZ2V0TmFtZSA9IFtdXG4gICAgY29uc3Qgc2VsZWN0ZWRQbGF5ZXJzID0gY2FudmFzLnRva2Vucy5jb250cm9sbGVkLm1hcCh0b2tlbiA9PiB7XG4gICAgICByZXR1cm4gdG9rZW4uYWN0b3JcbiAgICB9KVxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBzZWxlY3RlZFBsYXllcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBpZiAodGhpcy5hY3Rvci5pZCA9PT0gc2VsZWN0ZWRQbGF5ZXJzW2luZGV4XS5pZCkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgICAgdGFyZ2V0TmFtZS5wdXNoKHNlbGVjdGVkUGxheWVyc1tpbmRleF0ubmFtZSlcbiAgICAgIHRhcmdldHMucHVzaChzZWxlY3RlZFBsYXllcnNbaW5kZXhdKVxuICAgIH1cbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgdGl0bGU6ICcgJyxcbiAgICAgIGNvbnRlbnQ6IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRGVhbERhbWFnZScsIHtcbiAgICAgICAgZGFtYWdlOiB0aGlzLnRvdGFsRGFtYWdlU3RyaW5nLFxuICAgICAgICB0YXJnZXQ6IHRhcmdldE5hbWVcbiAgICAgIH0pLFxuICAgICAgYnV0dG9uczoge1xuICAgICAgICBvbmU6IHtcbiAgICAgICAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtY2hlY2tcIj48L2k+JyxcbiAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlByb2NlZWQnKSxcbiAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jb25maXJtRGFtYWdlKHRhcmdldHMpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0d286IHtcbiAgICAgICAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtdGltZXNcIj48L2k+JyxcbiAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNhbmNlbCcpLFxuICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7fVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVmYXVsdDogJ3R3bydcbiAgICB9XG4gICAgaWYgKHRhcmdldE5hbWUubGVuZ3RoID4gMCkge1xuICAgICAgbmV3IERpYWxvZyhkYXRhKS5yZW5kZXIodHJ1ZSlcbiAgICB9XG4gIH1cblxuICBhc3luYyBjb25maXJtRGFtYWdlICh0YXJnZXRzKSB7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRhcmdldHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBhd2FpdCB0YXJnZXRzW2luZGV4XS5kZWFsRGFtYWdlKE51bWJlcih0aGlzLnRvdGFsRGFtYWdlU3RyaW5nKSwge1xuICAgICAgICBpZ25vcmVBcm1vcjogZmFsc2VcbiAgICAgIH0pXG4gICAgICBDaGF0TWVzc2FnZS5jcmVhdGUoe1xuICAgICAgICBjb250ZW50OiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkRhbWFnZURlYWxUbycsIHtcbiAgICAgICAgICBuYW1lOiB0YXJnZXRzW2luZGV4XS5uYW1lLFxuICAgICAgICAgIGRhbWFnZTogdGhpcy50b3RhbERhbWFnZVN0cmluZ1xuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBhc3luYyBkZWFsRGFtYWdlIChvcHRpb25zID0geyB1cGRhdGU6IHRydWUgfSkge1xuICAgIGlmICh0aGlzLmlzQXJtb3JGb3J1bGEpIGF3YWl0IHRoaXMucm9sbEFybW9yKClcbiAgICBsZXQgZGFtYWdlID0gdGhpcy50b3RhbERhbWFnZVN0cmluZ1xuICAgIGlmIChpc05hTihOdW1iZXIoZGFtYWdlKSkpIHtcbiAgICAgIGlmIChnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQXJtb3JBYnNvcmJzRGFtYWdlJykgPT09IGRhbWFnZSkge1xuICAgICAgICBkYW1hZ2UgPSAwXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKCdFcnJvciBldmFsdWF0aW5nIGRhbWFnZScpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy50YXJnZXRBY3Rvcikge1xuICAgICAgYXdhaXQgdGhpcy50YXJnZXRBY3Rvci5kZWFsRGFtYWdlKE51bWJlcihkYW1hZ2UpLCB7XG4gICAgICAgIGlnbm9yZUFybW9yOiB0cnVlXG4gICAgICB9KVxuICAgIH1cbiAgICB0aGlzLmRhbWFnZUluZmxpY3RlZCA9IHRydWVcbiAgICBvcHRpb25zLnVwZGF0ZSA9XG4gICAgICB0eXBlb2Ygb3B0aW9ucy51cGRhdGUgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMudXBkYXRlXG4gICAgaWYgKG9wdGlvbnMudXBkYXRlKSB0aGlzLnVwZGF0ZUNoYXRDYXJkKClcbiAgfVxuXG4gIGdldCByYW5nZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5yYW5nZSB8fCAnbm9ybWFsJ1xuICB9XG5cbiAgc2V0IHJhbmdlICh4KSB7XG4gICAgY29uc3QgcmFuZ2VzID0gWydub3JtYWwnLCAnbG9uZycsICdleHRyZW1lJ11cbiAgICBpZiAoIXJhbmdlcy5pbmNsdWVzKHgudG9Mb3dlckNhc2UoKSkpIHJldHVyblxuICAgIHRoaXMuX29wdGlvbnMucmFuZ2UgPSB4XG4gIH1cblxuICBnZXQgZGFtYWdlRm9ybXVsYSAoKSB7XG4gICAgY29uc3QgcmFuZ2UgPSB0aGlzLnJhbmdlXG4gICAgbGV0IGZvcm11bGEgPSB0aGlzLndlYXBvbj8uc3lzdGVtPy5yYW5nZVtyYW5nZV0/LmRhbWFnZVxuICAgIGxldCBkYiA9IHRoaXMuYWN0b3IuZGJcbiAgICBkYiA9ICgoZGIgPz8gJycpLnRvU3RyaW5nKCkudHJpbSgpID09PSAnJyA/IDAgOiBkYikudG9TdHJpbmcoKS50cmltKClcblxuICAgIGlmICghZGIuc3RhcnRzV2l0aCgnLScpKSBkYiA9ICcrJyArIGRiXG4gICAgaWYgKHRoaXMud2VhcG9uLnN5c3RlbS5wcm9wZXJ0aWVzLmFkZGIpIGZvcm11bGEgPSBmb3JtdWxhICsgZGJcbiAgICBpZiAodGhpcy53ZWFwb24uc3lzdGVtLnByb3BlcnRpZXMuYWhkYikgZm9ybXVsYSA9IGZvcm11bGEgKyAnKyBmbG9vcignICsgZGIgKyAnLzIpJ1xuXG4gICAgaWYgKGZvcm11bGEpIHtcbiAgICAgIGNvbnN0IG1heERhbWFnZSA9IG5ldyBSb2xsKGZvcm11bGEpWyghZm91bmRyeS51dGlscy5pc05ld2VyVmVyc2lvbihnYW1lLnZlcnNpb24sICcxMicpID8gJ2V2YWx1YXRlJyA6ICdldmFsdWF0ZVN5bmMnKS8qIC8vIEZvdW5kcnlWVFQgdjExICovXSh7IG1heGltaXplOiB0cnVlIH0pLnRvdGFsXG4gICAgICBsZXQgcm9sbFN0cmluZ1xuICAgICAgaWYgKHRoaXMuY3JpdGljYWwpIHtcbiAgICAgICAgaWYgKHRoaXMuaW1wYWxlKSB7XG4gICAgICAgICAgcm9sbFN0cmluZyA9IGZvcm11bGEgKyAnKycgKyBtYXhEYW1hZ2VcbiAgICAgICAgICByZXR1cm4gcm9sbFN0cmluZ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBtYXhEYW1hZ2VcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZvcm11bGFcbiAgICAgIH1cbiAgICB9IGVsc2UgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgZ2V0IGFybW9yICgpIHtcbiAgICBpZiAodW5kZWZpbmVkICE9PSB0aGlzLl9hcm1vciAmJiB0aGlzLl9hcm1vciAhPT0gJycpIHJldHVybiB0aGlzLl9hcm1vclxuICAgIGlmICh0aGlzLnRhcmdldCkge1xuICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0QWN0b3Iuc3lzdGVtLmF0dHJpYnMuYXJtb3IudmFsdWVcbiAgICB9XG4gICAgcmV0dXJuIDBcbiAgfVxuXG4gIHNldCBhcm1vciAoeCkge1xuICAgIHRoaXMuX2FybW9yID0geFxuICB9XG59XG4iLCIvKiBnbG9iYWwgQ2hhdE1lc3NhZ2UsIGZvdW5kcnksIGdhbWUgKi9cbmltcG9ydCB7IENvQzdDaGVjayB9IGZyb20gJy4uLy4uL2NoZWNrLmpzJ1xuaW1wb3J0IHsgRGFtYWdlQ2FyZCB9IGZyb20gJy4vZGFtYWdlLmpzJ1xuaW1wb3J0IHsgUm9sbENhcmQgfSBmcm9tICcuL3JvbGwtY2FyZC5qcydcblxuZXhwb3J0IGNsYXNzIE9wcG9zZWRDaGVja0NhcmQgZXh0ZW5kcyBSb2xsQ2FyZCB7XG4gIHN0YXRpYyBhc3luYyBiaW5kTGlzdGVybmVycyAoaHRtbCkge1xuICAgIGh0bWwub24oXG4gICAgICAnY2xpY2snLFxuICAgICAgJy5yb2xsLWNhcmQub3Bwb3NlZCAudG9nZ2xlLXN3aXRjaCcsXG4gICAgICB0aGlzLl9vblRvZ2dsZS5iaW5kKHRoaXMpXG4gICAgKVxuICAgIC8vIHN1cGVyLmJpbmRMaXN0ZXJuZXJzKCBodG1sKTtcbiAgICBodG1sLm9uKFxuICAgICAgJ2NsaWNrJyxcbiAgICAgICcucm9sbC1jYXJkLm9wcG9zZWQgYScsXG4gICAgICBPcHBvc2VkQ2hlY2tDYXJkLl9vbkNsaWNrLmJpbmQodGhpcylcbiAgICApXG4gICAgaHRtbC5vbihcbiAgICAgICdjbGljaycsXG4gICAgICAnLnJvbGwtY2FyZC5vcHBvc2VkIGJ1dHRvbicsXG4gICAgICBPcHBvc2VkQ2hlY2tDYXJkLl9vbkNsaWNrLmJpbmQodGhpcylcbiAgICApXG4gIH1cblxuICBzdGF0aWMgZ2V0IGRlZmF1bHRDb25maWcgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRDb25maWcsIHtcbiAgICAgIHRlbXBsYXRlOiAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9jaGF0L2NhcmRzL29wcG9zZWQtcm9sbC5odG1sJyxcbiAgICAgIHR5cGU6ICdvcHBvc2VkQ2FyZCdcbiAgICB9KVxuICB9XG5cbiAgZ2V0IGNvbmZpZyAoKSB7XG4gICAgcmV0dXJuIE9wcG9zZWRDaGVja0NhcmQuZGVmYXVsdENvbmZpZ1xuICB9XG5cbiAgZ2V0IGF0dGFja2VyUm9sbCAoKSB7XG4gICAgaWYgKHRoaXMuY29tYmF0KSB7XG4gICAgICBpZiAodGhpcy5yb2xscz8ubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGF0dGFja2VyID0gdGhpcy5yb2xscy5maWx0ZXIociA9PiByLmluZGV4ID09PSAwIHx8IHIuYXR0YWNrZXIpXG4gICAgICAgIGlmIChhdHRhY2tlci5sZW5ndGgpIHJldHVybiBhdHRhY2tlclswXVxuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBnZXQgZGVmZW5kZXJSb2xsICgpIHtcbiAgICBpZiAodGhpcy5jb21iYXQpIHtcbiAgICAgIGlmICh0aGlzLnJvbGxzPy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgZGVmZW5kZXIgPSB0aGlzLnJvbGxzLmZpbHRlcihyID0+IHIuaW5kZXggIT09IDAgfHwgIXIuYXR0YWNrZXIpXG4gICAgICAgIGlmIChkZWZlbmRlci5sZW5ndGgpIHJldHVybiBkZWZlbmRlclswXVxuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBnZXQgZGVmZW5kZXJJc0RvZGdpbmcgKCkge1xuICAgIGlmIChcbiAgICAgIHRoaXMuZGVmZW5kZXJSb2xsPy5hY3Rvcj8uZG9kZ2VTa2lsbD8ubmFtZSAmJlxuICAgICAgdGhpcy5kZWZlbmRlclJvbGw/LnNraWxsPy5uYW1lXG4gICAgKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLmRlZmVuZGVyUm9sbC5hY3Rvci5kb2RnZVNraWxsLm5hbWUudG9Mb3dlckNhc2UoKSA9PT1cbiAgICAgICAgdGhpcy5kZWZlbmRlclJvbGwuc2tpbGwubmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZ2V0IGFkdmFudGFnZUF0dGFja2VyICgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX2FhID09PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHRoaXMuZGVmZW5kZXJSb2xsKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5kZWZlbmRlcklzRG9kZ2luZ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9hYVxuICB9XG5cbiAgZ2V0IHdpbm5lclJvbGxzRGFtYWdlICgpIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLmNvbWJhdCAmJlxuICAgICAgdGhpcy5yb2xscy5sZW5ndGggPj0gMiAmJlxuICAgICAgdGhpcy5oYXNXaW5uZXIgJiZcbiAgICAgIHRoaXMud2lubmVyPy5pdGVtPy50eXBlID09PSAnd2VhcG9uJ1xuICAgICkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBzZXQgYWR2YW50YWdlQXR0YWNrZXIgKHgpIHtcbiAgICB0aGlzLl9hYSA9IHRydWVcbiAgICB0aGlzLl9hZCA9IGZhbHNlXG4gIH1cblxuICBnZXQgYWR2YW50YWdlRGVmZW5kZXIgKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fYWQgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gdGhpcy5kZWZlbmRlcklzRG9kZ2luZ1xuICAgIHJldHVybiB0aGlzLl9hZFxuICB9XG5cbiAgc2V0IGFkdmFudGFnZURlZmVuZGVyICh4KSB7XG4gICAgdGhpcy5fYWQgPSB0cnVlXG4gICAgdGhpcy5fYWEgPSBmYWxzZVxuICB9XG5cbiAgZ2V0IGlzVGllICgpIHtcbiAgICByZXR1cm4gdGhpcy53aW5uZXJDb3VudCA+IDFcbiAgfVxuXG4gIGdldCBuZWVkc1RpZUJyZWFrZXIgKCkge1xuICAgIGlmICghdGhpcy5jb21iYXQpIHJldHVybiBmYWxzZVxuICAgIGlmIChcbiAgICAgIHRoaXMuYXR0YWNrZXJSb2xsICYmXG4gICAgICB0aGlzLmRlZmVuZGVyUm9sbCAmJlxuICAgICAgdGhpcy5hdHRhY2tlclJvbGwuc3VjY2Vzc0xldmVsID09PSB0aGlzLmRlZmVuZGVyUm9sbC5zdWNjZXNzTGV2ZWxcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZ2V0IHdpbm5lckNvdW50ICgpIHtcbiAgICBsZXQgY291bnQgPSAwXG4gICAgZm9yIChjb25zdCByIG9mIHRoaXMucm9sbHMpIHtcbiAgICAgIGlmIChyLndpbm5lcikgY291bnQgKz0gMVxuICAgIH1cbiAgICByZXR1cm4gY291bnRcbiAgfVxuXG4gIGdldCBpc0F0dGFja01hbmV1dmVyICgpIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLmNvbWJhdCAmJlxuICAgICAgdGhpcy5hdHRhY2tlclJvbGwgJiZcbiAgICAgICghdGhpcy5hdHRhY2tlclJvbGw/Lml0ZW0gfHxcbiAgICAgICAgdGhpcy5hdHRhY2tlclJvbGw/Lml0ZW0uc3lzdGVtLnByb3BlcnRpZXM/Lm1udnIpXG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGdldCByZXN1bHRUZXh0ICgpIHtcbiAgICBpZiAodGhpcy5jb21iYXQgJiYgdGhpcy5hdHRhY2tlclJvbGwgJiYgdGhpcy5kZWZlbmRlclJvbGwpIHtcbiAgICAgIGlmICghdGhpcy5hdHRhY2tlclJvbGwud2lubmVyICYmICF0aGlzLmRlZmVuZGVyUm9sbC53aW5uZXIpIHtcbiAgICAgICAgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ob1dpbm5lcicpXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5hdHRhY2tlclJvbGwud2lubmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmF0dGFja2VyUm9sbC5tYW5ldXZlcikge1xuICAgICAgICAgIHJldHVybiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lk1hbmV1dmVyU3VjY2VzcycsIHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuYXR0YWNrZXJSb2xsLmFjdG9yLm5hbWVcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkF0dGFja1N1Y2Nlc3MnLCB7XG4gICAgICAgICAgbmFtZTogdGhpcy5hdHRhY2tlclJvbGwuYWN0b3IubmFtZVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZGVmZW5kZXJSb2xsLndpbm5lcikge1xuICAgICAgICBpZiAodGhpcy5kZWZlbmRlclJvbGwubWFuZXV2ZXIpIHtcbiAgICAgICAgICByZXR1cm4gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5NYW5ldXZlclN1Y2Nlc3MnLCB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLmRlZmVuZGVyUm9sbC5hY3Rvci5uYW1lXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5kZWZlbmRlcklzRG9kZ2luZykge1xuICAgICAgICAgIHJldHVybiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkRvZGdlU3VjY2VzcycsIHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuZGVmZW5kZXJSb2xsLmFjdG9yLm5hbWVcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkF0dGFja1N1Y2Nlc3MnLCB7XG4gICAgICAgICAgbmFtZTogdGhpcy5kZWZlbmRlclJvbGwuYWN0b3IubmFtZVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBhc3luYyBwcm9jZXNzIChkYXRhKSB7XG4gICAgc3dpdGNoIChkYXRhLmFjdGlvbikge1xuICAgICAgY2FzZSAnbmV3JzpcbiAgICAgICAgaWYgKCF0aGlzLnJvbGxzPy5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLmNvbWJhdCA9IGRhdGEuY29tYmF0IHx8IHVuZGVmaW5lZFxuICAgICAgICAgIGlmICh0aGlzLmNvbWJhdCkge1xuICAgICAgICAgICAgZGF0YS5yb2xsLmF0dGFja2VyID0gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkYXRhLnJvbGwuaW5kZXggPSB0aGlzLnJvbGxzLmxlbmd0aFxuICAgICAgICB0aGlzLmFkZFJvbGxEYXRhKGRhdGEpXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgJ3JvbGwnOlxuICAgICAgICB0aGlzLmFkZFJvbGxEYXRhKGRhdGEpXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgJ3VwZGF0ZVJvbGwnOlxuICAgICAgICB0aGlzLnVwZGF0ZVJvbGwoZGF0YSlcbiAgICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBpZiAoZ2FtZS51c2VyLmlzR00pIGF3YWl0IHRoaXMudXBkYXRlQ2hhdENhcmQoKVxuICAgIGVsc2UgZ2FtZS5zb2NrZXQuZW1pdCgnc3lzdGVtLkNvQzcnLCBkYXRhKVxuICB9XG5cbiAgYXN5bmMgcm9sbCAocmFuaykge1xuICAgIGF3YWl0IHRoaXMucm9sbHNbcmFua10uX3BlcmZvcm0oKVxuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICB0eXBlOiB0aGlzLmNvbmZpZy50eXBlLFxuICAgICAgYWN0aW9uOiAndXBkYXRlUm9sbCcsXG4gICAgICByYW5rLFxuICAgICAgZnJvbUdNOiBnYW1lLnVzZXIuaXNHTVxuICAgIH1cbiAgICBpZiAoIWdhbWUudXNlci5pc0dNKSBkYXRhLnJvbGwgPSB0aGlzLnJvbGxzW3JhbmtdLkpTT05Sb2xsRGF0YVxuICAgIHJldHVybiBkYXRhXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgX29uQ2xpY2sgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuXG4gICAgY29uc3QgYSA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCBhY3Rpb24gPSBhLmRhdGFzZXQuYWN0aW9uXG4gICAgY29uc3QgbGkgPSBhLmNsb3Nlc3QoJ2xpLmFjdG9yLXJvbGwnKVxuICAgIGNvbnN0IG1lc3NhZ2UgPSBhLmNsb3Nlc3QoJy5jaGF0LW1lc3NhZ2UnKVxuICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gYS5jbG9zZXN0KCdkaXYucm9sbC1jYXJkJylcbiAgICBjb25zdCBjYXJkID0gYXdhaXQgT3Bwb3NlZENoZWNrQ2FyZC5mcm9tSFRNTENhcmRFbGVtZW50KGNhcmRFbGVtZW50KVxuICAgIGNhcmQubWVzc2FnZUlkID0gbWVzc2FnZS5kYXRhc2V0Lm1lc3NhZ2VJZFxuICAgIGNvbnN0IHJhbmsgPSBOdW1iZXIobGk/LmRhdGFzZXQ/LnJhbmspXG5cbiAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgY2FzZSAndG9nZ2xlLWNvbWJhdCc6IHtcbiAgICAgICAgY2FyZC5jb21iYXQgPSAhY2FyZC5jb21iYXRcbiAgICAgICAgLy8gaWYoICFjYXJkLmFkdmFudGFnZUF0dGFja2VyICYmICFjYXJkLmFkdmFudGFnZURlZmVuZGVyKSBjYXJkLmFkdmFudGFnZUF0dGFja2VyID0gdHJ1ZTtcbiAgICAgICAgYXdhaXQgY2FyZC51cGRhdGVDaGF0Q2FyZCgpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ3JlbW92ZS1yb2xsJzoge1xuICAgICAgICBjYXJkLnJlbW92ZVJvbGwocmFuaylcbiAgICAgICAgYXdhaXQgY2FyZC51cGRhdGVDaGF0Q2FyZCgpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ2Nsb3NlLWNhcmQnOiB7XG4gICAgICAgIGNhcmQuY2xvc2VDYXJkKClcbiAgICAgICAgYXdhaXQgY2FyZC51cGRhdGVDaGF0Q2FyZCgpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ3JvbGwtY2hlY2snOiB7XG4gICAgICAgIGNvbnN0IHNwZWFrZXIgPSBDaGF0TWVzc2FnZS5nZXRTcGVha2VyKClcbiAgICAgICAgaWYgKCFjYXJkLnJvbGxzW3JhbmtdLmFjdG9yS2V5KSB7XG4gICAgICAgICAgY2FyZC5yb2xsc1tyYW5rXS5hY3RvcktleSA9IGAke3NwZWFrZXIuc2NlbmV9LiR7c3BlYWtlci50b2tlbn1gXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgY2FyZC5yb2xsKHJhbmspXG4gICAgICAgIGF3YWl0IGNhcmQucHJvY2VzcyhkYXRhKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICdyb2xsLWRhbWFnZSc6IHtcbiAgICAgICAgY2FyZC5jbG9zZUNhcmQoKVxuICAgICAgICBhd2FpdCBjYXJkLnVwZGF0ZUNoYXRDYXJkKClcbiAgICAgICAgY29uc3QgZGFtYWdlQ2hhdENhcmQgPSBuZXcgRGFtYWdlQ2FyZCh7XG4gICAgICAgICAgY3JpdGljYWw6IGNhcmQud2lubmVyLmlzRXh0cmVtZVN1Y2Nlc3MsXG4gICAgICAgICAgZmFzdEZvcndhcmQ6IGV2ZW50LnNoaWZ0S2V5XG4gICAgICAgIH0pXG4gICAgICAgIGRhbWFnZUNoYXRDYXJkLmFjdG9yS2V5ID0gY2FyZC53aW5uZXIuYWN0b3IuYWN0b3JLZXlcbiAgICAgICAgZGFtYWdlQ2hhdENhcmQudGFyZ2V0S2V5ID0gY2FyZC5sb29zZXIuYWN0b3IuYWN0b3JLZXlcbiAgICAgICAgZGFtYWdlQ2hhdENhcmQuaXRlbUlkID0gY2FyZC53aW5uZXIuaXRlbUlkXG4gICAgICAgIC8vIGlmKCBvcmlnaW5NZXNzYWdlLmRhdGFzZXQubWVzc2FnZUlkKSBkYW1hZ2VDaGF0Q2FyZC5tZXNzYWdlSWQgPSBvcmlnaW5NZXNzYWdlLmRhdGFzZXQubWVzc2FnZUlkO1xuICAgICAgICBkYW1hZ2VDaGF0Q2FyZC51cGRhdGVDaGF0Q2FyZCgpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICB1cGRhdGU6IGZhbHNlLFxuICAgICAgICAgIGRhdGE6IGEuZGF0YXNldCxcbiAgICAgICAgICBjbGFzc2VzOiBhLmNsYXNzTGlzdCxcbiAgICAgICAgICB0YXJnZXQ6IGFcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBDb0M3Q2hlY2suYWx0ZXIoY2FyZC5yb2xsc1tyYW5rXSwgYWN0aW9uLCBvcHRpb25zKVxuICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgIHR5cGU6IHRoaXMuZGVmYXVsdENvbmZpZy50eXBlLFxuICAgICAgICAgIGFjdGlvbjogJ3VwZGF0ZVJvbGwnLFxuICAgICAgICAgIHJhbmssXG4gICAgICAgICAgZnJvbUdNOiBnYW1lLnVzZXIuaXNHTVxuICAgICAgICB9XG4gICAgICAgIGlmICghZ2FtZS51c2VyLmlzR00pIGRhdGEucm9sbCA9IGNhcmQucm9sbHNbcmFua10uSlNPTlJvbGxEYXRhXG4gICAgICAgIGNhcmQucHJvY2VzcyhkYXRhKVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNvbXB1dGUgKHJhbmsgPSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLnJvbGxzID0gdGhpcy5yb2xscy5maWx0ZXIocm9sbCA9PiB7XG4gICAgICByZXR1cm4gdHlwZW9mIHJvbGwuYWN0b3IuYWN0b3JLZXkgIT09ICd1bmRlZmluZWQnIC8vIHJlbW92ZSBhbnkgYWN0b3JzIHRoYXQgbm8gbG9uZ2VyIGV4aXN0XG4gICAgfSlcblxuICAgIGlmICghcmFuaykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvbGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnJvbGxzW2ldLm1hbmV1dmVyXG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzLmNvbWJhdCAmJlxuICAgICAgICAgICghdGhpcy5yb2xsc1tpXS5pdGVtIHx8XG4gICAgICAgICAgICB0aGlzLnJvbGxzW2ldLml0ZW0uc3lzdGVtLnByb3BlcnRpZXM/Lm1udnIpICYmXG4gICAgICAgICAgKCh0aGlzLnJvbGxzW2ldPy5hY3Rvcj8uZG9kZ2VTa2lsbD8ubmFtZSAmJlxuICAgICAgICAgICAgdGhpcy5yb2xsc1tpXT8uc2tpbGw/Lm5hbWUgJiZcbiAgICAgICAgICAgIHRoaXMucm9sbHNbaV0uYWN0b3IuZG9kZ2VTa2lsbC5uYW1lLnRvTG93ZXJDYXNlKCkgIT09XG4gICAgICAgICAgICAgIHRoaXMucm9sbHNbaV0uc2tpbGwubmFtZS50b0xvd2VyQ2FzZSgpKSB8fFxuICAgICAgICAgICAgIXRoaXMucm9sbHNbaV0/LmFjdG9yPy5kb2RnZVNraWxsPy5uYW1lKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLnJvbGxzW2ldLm1hbmV1dmVyID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnJvbGxzW2ldLnJvbGxlZCkge1xuICAgICAgICAgIHRoaXMucm9sbHNbaV0uX2h0bWxSb2xsID0gYXdhaXQgdGhpcy5yb2xsc1tpXS5nZXRIdG1sUm9sbCh7XG4gICAgICAgICAgICBoaWRlRGljZVJlc3VsdDogdHJ1ZVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMucm9sbHNbcmFua10ucm9sbGVkKSB7XG4gICAgICAgIHRoaXMucm9sbHNbcmFua10uX2h0bWxSb2xsID0gYXdhaXQgdGhpcy5yb2xsc1tyYW5rXS5nZXRIdG1sUm9sbCh7XG4gICAgICAgICAgaGlkZURpY2VSZXN1bHQ6IHRydWVcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb21iYXQpIHtcbiAgICAgIC8vIFNvcnQgY29tYmF0IHJvbGxzIGJ5IGluZGV4LlxuICAgICAgdGhpcy5yb2xscy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgIGlmIChhLmluZGV4ID4gYi5pbmRleCkgcmV0dXJuIDFcbiAgICAgICAgaWYgKGEuaW5kZXggPCBiLmluZGV4KSByZXR1cm4gLTFcbiAgICAgICAgcmV0dXJuIDBcbiAgICAgIH0pXG5cbiAgICAgIC8vIENvbWJhdCByb2xsIGluY2x1ZGVzIG9ubHkgMiBwZXJzb25zLCByZW1vdmUgdGhlIHJlc3QuXG4gICAgICBpZiAodGhpcy5yb2xscy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRoaXMucm9sbHMgPSBbdGhpcy5yb2xsc1swXSwgdGhpcy5yb2xsc1sxXV1cbiAgICAgICAgZm9yIChjb25zdCByIG9mIHRoaXMucm9sbHMpIHtcbiAgICAgICAgICBkZWxldGUgci53aW5uZXJcbiAgICAgICAgICBkZWxldGUgci50aWVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBGaXJzdCBwZXJzb24gYWRkZWQgaXMgdGhlIGF0dGFja2VyLlxuICAgICAgaWYgKHRoaXMucm9sbHNbMF0pIHRoaXMucm9sbHNbMF0uYXR0YWNrZXIgPSB0cnVlXG5cbiAgICAgIGlmICh0aGlzLnJvbGxzWzBdPy5yb2xsZWQgJiYgdGhpcy5yb2xsc1sxXT8ucm9sbGVkKSB7XG4gICAgICAgIGlmICh0aGlzLnJvbGxzWzBdLnBhc3NlZCB8fCB0aGlzLnJvbGxzWzFdLnBhc3NlZCkge1xuICAgICAgICAgIGlmICh0aGlzLnJvbGxzWzBdLnN1Y2Nlc3NMZXZlbCA+IHRoaXMucm9sbHNbMV0uc3VjY2Vzc0xldmVsKSB7XG4gICAgICAgICAgICB0aGlzLnJvbGxzWzBdLndpbm5lciA9IHRydWVcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucm9sbHNbMV0uc3VjY2Vzc0xldmVsID4gdGhpcy5yb2xsc1swXS5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgICAgICAgIHRoaXMucm9sbHNbMV0ud2lubmVyID0gdHJ1ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hZHZhbnRhZ2VBdHRhY2tlcikgdGhpcy5yb2xsc1swXS53aW5uZXIgPSB0cnVlXG4gICAgICAgICAgICBlbHNlIHRoaXMucm9sbHNbMV0ud2lubmVyID0gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvbGxzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgaWYgKGEucm9sbGVkICYmICFiLnJvbGxlZCkgcmV0dXJuIC0xXG4gICAgICAgIGlmICghYS5yb2xsZWQgJiYgYi5yb2xsZWQpIHJldHVybiAxXG4gICAgICAgIGlmICghYS5yb2xsZWQgJiYgIWIucm9sbGVkKSByZXR1cm4gMFxuICAgICAgICBpZiAoYS5zdWNjZXNzTGV2ZWwgPiBiLnN1Y2Nlc3NMZXZlbCkge1xuICAgICAgICAgIHRoaXMucmVzb2x2ZWQgPSB0cnVlXG4gICAgICAgICAgcmV0dXJuIC0xXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGEuc3VjY2Vzc0xldmVsIDwgYi5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgICAgICB0aGlzLnJlc29sdmVkID0gdHJ1ZVxuICAgICAgICAgIHJldHVybiAxXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ29wcG9zZWRSb2xsVGllQnJlYWtlcicpKSB7XG4gICAgICAgICAgaWYgKGEubW9kaWZpZWRSZXN1bHQgPiBiLm1vZGlmaWVkUmVzdWx0KSB7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmVkID0gdHJ1ZVxuICAgICAgICAgICAgcmV0dXJuIC0xXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChhLm1vZGlmaWVkUmVzdWx0IDwgYi5tb2RpZmllZFJlc3VsdCkge1xuICAgICAgICAgICAgdGhpcy5yZXNvbHZlZCA9IHRydWVcbiAgICAgICAgICAgIHJldHVybiAxXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChhLnJhd1ZhbHVlID4gYi5yYXdWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5yZXNvbHZlZCA9IHRydWVcbiAgICAgICAgICAgIHJldHVybiAtMVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYS5yYXdWYWx1ZSA8IGIucmF3VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZWQgPSB0cnVlXG4gICAgICAgICAgICByZXR1cm4gMVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMFxuICAgICAgfSlcblxuICAgICAgdGhpcy53aW5Db3VudCA9IDBcbiAgICAgIGlmICh0aGlzLnJvbGxzWzBdICYmIHRoaXMucm9sbHNbMF0ucm9sbGVkICYmICF0aGlzLnJvbGxzWzBdLmZhaWxlZCkge1xuICAgICAgICB0aGlzLndpbkNvdW50ID0gMVxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMucm9sbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLnJvbGxzW2ldICYmXG4gICAgICAgICAgICB0aGlzLnJvbGxzW2ldLnJvbGxlZCAmJlxuICAgICAgICAgICAgdGhpcy5yb2xsc1swXS5zdWNjZXNzTGV2ZWwgPT09IHRoaXMucm9sbHNbaV0uc3VjY2Vzc0xldmVsICYmXG4gICAgICAgICAgICAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnb3Bwb3NlZFJvbGxUaWVCcmVha2VyJylcbiAgICAgICAgICAgICAgPyB0aGlzLnJvbGxzWzBdLm1vZGlmaWVkUmVzdWx0ID09PSB0aGlzLnJvbGxzW2ldLm1vZGlmaWVkUmVzdWx0XG4gICAgICAgICAgICAgIDogdGhpcy5yb2xsc1swXS5yYXdWYWx1ZSA9PT0gdGhpcy5yb2xsc1tpXS5yYXdWYWx1ZSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMud2luQ291bnQgPSB0aGlzLndpbkNvdW50ICsgMVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm9sbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5yb2xsc1tpXS53aW5uZXIgPSBpIDwgdGhpcy53aW5Db3VudFxuICAgICAgICB0aGlzLnJvbGxzW2ldLnRpZSA9IHRoaXMucm9sbHNbaV0ud2lubmVyICYmIHRoaXMud2luQ291bnQgPiAxXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY2xvc2VDYXJkICgpIHtcbiAgICB0aGlzLmNsb3NlZCA9IHRydWVcbiAgfVxufVxuIiwiLyogZ2xvYmFsIERpYWxvZywgRm9ybURhdGEsIGdhbWUsIHJlbmRlclRlbXBsYXRlICovXG5cbmV4cG9ydCBjbGFzcyBTYW5EYXRhRGlhbG9nIGV4dGVuZHMgRGlhbG9nIHtcbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuICAgIGh0bWwuZmluZCgnOmNoZWNrYm94JykuY2xpY2soKCkgPT4gdGhpcy5fdG9nZ2xlSW5wdXQoaHRtbCkpXG4gIH1cblxuICBfdG9nZ2xlSW5wdXQgKGh0bWwpIHtcbiAgICBodG1sLmZpbmQoJypbbmFtZT1cImN1c3RvbW5hbWVcIl0nKS50b2dnbGUoKVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGNyZWF0ZSAob3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKFxuICAgICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYXBwcy9zYW5kYXRhLmh0bWwnLFxuICAgICAgb3B0aW9uc1xuICAgIClcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIGxldCBmb3JtRGF0YSA9IG51bGxcbiAgICAgIGNvbnN0IGRsZyA9IG5ldyBTYW5EYXRhRGlhbG9nKHtcbiAgICAgICAgdGl0bGU6IG9wdGlvbnMuZGlzcGxheU5hbWVcbiAgICAgICAgICA/IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuU2FuRGF0YVNlbGVjdGlvbldpbmRvd05hbWVkJywge1xuICAgICAgICAgICAgbmFtZTogb3B0aW9ucy5kaXNwbGF5TmFtZVxuICAgICAgICAgIH0pXG4gICAgICAgICAgOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuU2FuRGF0YVNlbGVjdGlvbldpbmRvdycpLCAvLyBUT0RPOiBSZW1vdmUgU2FuRGF0YVNlbGVjdGlvbldpbmRvd05hbWVkXG4gICAgICAgIGNvbnRlbnQ6IGh0bWwsXG4gICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICBWYWxpZGF0ZToge1xuICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5WYWxpZGF0ZScpLFxuICAgICAgICAgICAgY2FsbGJhY2s6IGh0bWwgPT4ge1xuICAgICAgICAgICAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShodG1sWzBdLnF1ZXJ5U2VsZWN0b3IoJyNzYW4tZGF0YS1mb3JtJykpXG4gICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGZvcm1EYXRhKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGVmYXVsdDogJ1ZhbGlkYXRlJyxcbiAgICAgICAgY2xvc2U6ICgpID0+IHt9XG4gICAgICB9KVxuICAgICAgZGxnLnJlbmRlcih0cnVlKVxuICAgIH0pXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBnYW1lLCB1aSAqL1xuaW1wb3J0IHsgQ29DN0NoZWNrIH0gZnJvbSAnLi4vY2hlY2suanMnXG5pbXBvcnQgeyBDb0M3Q29udGVudExpbmtEaWFsb2cgfSBmcm9tICcuL2NvYzctY29udGVudC1saW5rLWRpYWxvZy5qcydcbmltcG9ydCB7IGlzQ3RybEtleSB9IGZyb20gJy4uL2NoYXQvaGVscGVyLmpzJ1xuaW1wb3J0IHsgUm9sbERpYWxvZyB9IGZyb20gJy4vcm9sbC1kaWFsb2cuanMnXG5pbXBvcnQgeyBDb21iaW5lZENoZWNrQ2FyZCB9IGZyb20gJy4uL2NoYXQvY2FyZHMvY29tYmluZWQtcm9sbC5qcydcbmltcG9ydCB7IE9wcG9zZWRDaGVja0NhcmQgfSBmcm9tICcuLi9jaGF0L2NhcmRzL29wcG9zZWQtcm9sbC5qcydcbmltcG9ydCB7IFNhbkNoZWNrQ2FyZCB9IGZyb20gJy4uL2NoYXQvY2FyZHMvc2FuLWNoZWNrLmpzJ1xuaW1wb3J0IHsgU2FuRGF0YURpYWxvZyB9IGZyb20gJy4vc2FuZGF0YS1kaWFsb2cuanMnXG5pbXBvcnQgeyBDb0M3TGluayB9IGZyb20gJy4vY29jNy1saW5rLmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4uL3V0aWxpdGllcy5qcydcblxuZXhwb3J0IGNsYXNzIENvQzdDaGF0TWVzc2FnZSB7XG4gIHN0YXRpYyBnZXQgUk9MTF9UWVBFX0FUVFJJQlVURSAoKSB7XG4gICAgcmV0dXJuICdSL0FUJ1xuICB9XG5cbiAgc3RhdGljIGdldCBST0xMX1RZUEVfQ0hBUkFDVEVSSVNUSUMgKCkge1xuICAgIHJldHVybiAnUi9DSCdcbiAgfVxuXG4gIHN0YXRpYyBnZXQgUk9MTF9UWVBFX0NPTUJBVCAoKSB7XG4gICAgcmV0dXJuICdSL0NPJ1xuICB9XG5cbiAgc3RhdGljIGdldCBST0xMX1RZUEVfU0tJTEwgKCkge1xuICAgIHJldHVybiAnUi9TSydcbiAgfVxuXG4gIHN0YXRpYyBnZXQgUk9MTF9UWVBFX0VOQ09VTlRFUiAoKSB7XG4gICAgcmV0dXJuICdSL0VDJ1xuICB9XG5cbiAgc3RhdGljIGdldCBDQVJEX1RZUEVfQ09NQklORUQgKCkge1xuICAgIHJldHVybiAnQy9DTydcbiAgfVxuXG4gIHN0YXRpYyBnZXQgQ0FSRF9UWVBFX0dST1VQICgpIHtcbiAgICByZXR1cm4gJ0MvR1InXG4gIH1cblxuICBzdGF0aWMgZ2V0IENBUkRfVFlQRV9OT1JNQUwgKCkge1xuICAgIHJldHVybiAnQy9OTydcbiAgfVxuXG4gIHN0YXRpYyBnZXQgQ0FSRF9UWVBFX09QUE9TRUQgKCkge1xuICAgIHJldHVybiAnQy9PUCdcbiAgfVxuXG4gIHN0YXRpYyBnZXQgQ0FSRF9UWVBFX1NBTl9DSEVDSyAoKSB7XG4gICAgcmV0dXJuICdDL1NDJ1xuICB9XG5cbiAgc3RhdGljIGdldCBDQVJEX1RZUEVfTk9ORSAoKSB7XG4gICAgcmV0dXJuICdDL05PJ1xuICB9XG5cbiAgLy8gc3RhdGljIGdldCBST0xMX1RPX0NIQVQgKCkge1xuICAvLyAgIHJldHVybiAnUi9DSCdcbiAgLy8gfVxuXG4gIC8vIHN0YXRpYyBnZXQgUk9MTF9UT19DTElQQk9BUkQgKCkge1xuICAvLyAgIHJldHVybiAnUi9DTCdcbiAgLy8gfVxuXG4gIHN0YXRpYyBjYXJkVHlwZXMgKGNvbmZpZykge1xuICAgIGlmIChjb25maWcucm9sbFR5cGUgPT09IENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfQ09NQkFUKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICBjb25zdCBzZWxlY3QgPSB7XG4gICAgICBbQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9OT1JNQUxdOiAnQ29DNy5SZWd1bGFyUm9sbENhcmQnLFxuICAgICAgW0NvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfQ09NQklORURdOiAnQ29DNy5Db21iaW5lZFJvbGxDYXJkJyxcbiAgICAgIFtDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX09QUE9TRURdOiAnQ29DNy5PcHBvc2VkUm9sbENhcmQnXG4gICAgICAvLyBbQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9HUk9VUF06ICdDb0M3Lkdyb3VwUm9sbENhcmQnIC0gTllJXG4gICAgfVxuICAgIGlmIChcbiAgICAgIGNvbmZpZy5yb2xsVHlwZSA9PT0gQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9BVFRSSUJVVEUgJiZcbiAgICAgIGNvbmZpZy5hdHRyaWJ1dGUgPT09ICdzYW4nXG4gICAgKSB7XG4gICAgICBzZWxlY3RbQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9TQU5fQ0hFQ0tdID0gJ0NvQzcuU2FuaXR5TG9zc0VuY291bnRlcidcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdFxuICB9XG5cbiAgc3RhdGljIG5vcm1hbGl6ZVJlcXVlc3QgKG9wdGlvbnMpIHtcbiAgICBpZiAoXG4gICAgICB0eXBlb2Ygb3B0aW9ucy5ldmVudCA9PT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIHR5cGVvZiBvcHRpb25zLmNhcmRUeXBlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgdHlwZW9mIG9wdGlvbnMuYWN0b3IgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAodHlwZW9mIG9wdGlvbnMuc2tpbGxJZCAhPT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgdHlwZW9mIG9wdGlvbnMuc2tpbGxOYW1lICE9PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGUgIT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgIHR5cGVvZiBvcHRpb25zLmNoYXJhY3RlcmlzdGljICE9PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICBvcHRpb25zLnJvbGxUeXBlID09PSBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX0VOQ09VTlRFUilcbiAgICApIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5za2lsbElkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAob3B0aW9ucy5hY3Rvci5pdGVtcy5nZXQob3B0aW9ucy5za2lsbElkKSkge1xuICAgICAgICAgIG9wdGlvbnMucm9sbFR5cGUgPSBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX1NLSUxMXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuc2tpbGxOYW1lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCBza2lsbElkcyA9IG9wdGlvbnMuYWN0b3IuZ2V0U2tpbGxzQnlOYW1lKG9wdGlvbnMuc2tpbGxOYW1lKVxuICAgICAgICBpZiAoc2tpbGxJZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIG9wdGlvbnMuc2tpbGxJZCA9IHNraWxsSWRzWzBdLmlkXG4gICAgICAgICAgb3B0aW9ucy5yb2xsVHlwZSA9IENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfU0tJTExcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgdHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBbJ2xjaycsICdzYW4nXS5pbmNsdWRlcyhvcHRpb25zLmF0dHJpYnV0ZSlcbiAgICAgICkge1xuICAgICAgICBvcHRpb25zLnJvbGxUeXBlID0gQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9BVFRSSUJVVEVcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHR5cGVvZiBvcHRpb25zLmNoYXJhY3RlcmlzdGljICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB0eXBlb2Ygb3B0aW9ucy5hY3Rvci5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzW1xuICAgICAgICAgIG9wdGlvbnMuY2hhcmFjdGVyaXN0aWNcbiAgICAgICAgXSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICkge1xuICAgICAgICBvcHRpb25zLnJvbGxUeXBlID0gQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9DSEFSQUNURVJJU1RJQ1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0eXBlb2Ygb3B0aW9ucy5ldmVudCA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgIHR5cGVvZiBvcHRpb25zLmNhcmRUeXBlID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgdHlwZW9mIG9wdGlvbnMucm9sbFR5cGUgPT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkVycm9yTm90Rm91bmQnLCB7XG4gICAgICAgICAgdmFsdWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Sb2xsJylcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBpZiAoXG4gICAgICAhW1xuICAgICAgICBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX0NPTUJJTkVELFxuICAgICAgICBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX0dST1VQLFxuICAgICAgICBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX05PUk1BTCxcbiAgICAgICAgQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9PUFBPU0VELFxuICAgICAgICBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX1NBTl9DSEVDS1xuICAgICAgXS5pbmNsdWRlcyhvcHRpb25zLmNhcmRUeXBlKVxuICAgICkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FcnJvckludmFsaWRGb3JtdWxhJywge1xuICAgICAgICAgIHZhbHVlOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRXJyb3JJbnZhbGlkQ2FyZFR5cGUnKVxuICAgICAgICB9KVxuICAgICAgKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChcbiAgICAgICFbXG4gICAgICAgIENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfU0tJTEwsXG4gICAgICAgIENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfQ0hBUkFDVEVSSVNUSUMsXG4gICAgICAgIENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfQVRUUklCVVRFLFxuICAgICAgICBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX0VOQ09VTlRFUlxuICAgICAgXS5pbmNsdWRlcyhvcHRpb25zLnJvbGxUeXBlKVxuICAgICkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FcnJvckludmFsaWRGb3JtdWxhJywge1xuICAgICAgICAgIHZhbHVlOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRXJyb3JJbnZhbGlkUm9sbFR5cGUnKVxuICAgICAgICB9KVxuICAgICAgKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgY2FyZFR5cGU6IG9wdGlvbnMuY2FyZFR5cGUsXG4gICAgICAgIHNoaWZ0S2V5OiBvcHRpb25zLmZhc3RGb3J3YXJkID8/IG9wdGlvbnMuZXZlbnQ/LnNoaWZ0S2V5ID8/IG9wdGlvbnMuZmFzdEZvcndhcmQgPz8gZmFsc2UsXG4gICAgICAgIGFsdEtleTogb3B0aW9ucy5ldmVudD8uYWx0S2V5ID8/IGZhbHNlLFxuICAgICAgICBpc0N0cmxLZXk6IGlzQ3RybEtleShvcHRpb25zLmV2ZW50ID8/IGZhbHNlKSxcbiAgICAgICAgY3JlYXRlRW5jb3VudGVyOiBvcHRpb25zLmNyZWF0ZUVuY291bnRlciA/PyBmYWxzZSxcbiAgICAgICAgb3BlbkxpbmtUb29sOiBvcHRpb25zLm9wZW5MaW5rVG9vbCA/PyBmYWxzZSxcbiAgICAgICAgc2VuZFRvQ2hhdDogb3B0aW9ucy5zZW5kVG9DaGF0ID8/IGZhbHNlLFxuICAgICAgICBzZW5kVG9DbGlwYm9hcmQ6IG9wdGlvbnMuc2VuZFRvQ2xpcGJvYXJkID8/IGZhbHNlLFxuICAgICAgICBpc0NvbWJhdDpcbiAgICAgICAgICBvcHRpb25zLmV2ZW50Py5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdD8uY29udGFpbnMoJ2NvbWJhdCcpID8/IGZhbHNlLFxuICAgICAgICBwcmV2ZW50U3RhbmRieTogb3B0aW9ucy5wcmV2ZW50U3RhbmRieSA/PyBmYWxzZSxcbiAgICAgICAgYm9udXNEaWNlOiAwXG4gICAgICB9LFxuICAgICAgZGlhbG9nT3B0aW9uczoge1xuICAgICAgICByb2xsVHlwZTogb3B0aW9ucy5yb2xsVHlwZSxcbiAgICAgICAgY2FyZFR5cGU6IG9wdGlvbnMuY2FyZFR5cGUsXG4gICAgICAgIGF0dHJpYnV0ZTogJycsXG4gICAgICAgIGNoYXRNZXNzYWdlOiBvcHRpb25zLmNoYXRNZXNzYWdlID8/IHRydWUsXG4gICAgICAgIGZvcmNlZENhcmRUeXBlOiBvcHRpb25zLmZvcmNlZENhcmRUeXBlID8/IGZhbHNlLFxuICAgICAgICBoaWRlRGlmZmljdWx0eTogb3B0aW9ucy5oaWRlRGlmZmljdWx0eSA/PyBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgICBzd2l0Y2ggKGNvbmZpZy5kaWFsb2dPcHRpb25zLnJvbGxUeXBlKSB7XG4gICAgICBjYXNlIENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfU0tJTEw6XG4gICAgICBjYXNlIENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfQ0hBUkFDVEVSSVNUSUM6XG4gICAgICBjYXNlIENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfQVRUUklCVVRFOlxuICAgICAgY2FzZSBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX0VOQ09VTlRFUjpcbiAgICAgICAgY29uZmlnLm9wdGlvbnMuc2tpbGxJZCA9XG4gICAgICAgICAgb3B0aW9ucy5za2lsbElkID8/XG4gICAgICAgICAgb3B0aW9ucy5ldmVudD8uY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpPy5kYXRhc2V0LnNraWxsSWRcbiAgICAgICAgY29uZmlnLm9wdGlvbnMuaXRlbUlkID1cbiAgICAgICAgICBvcHRpb25zLmV2ZW50Py5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5pdGVtJyk/LmRhdGFzZXQuaXRlbUlkXG4gICAgICAgIGNvbmZpZy5vcHRpb25zLmNoYXJhY3RlcmlzdGljID1cbiAgICAgICAgICBvcHRpb25zLmNoYXJhY3RlcmlzdGljID8/XG4gICAgICAgICAgb3B0aW9ucy5ldmVudD8uY3VycmVudFRhcmdldC5wYXJlbnRFbGVtZW50LmRhdGFzZXQuY2hhcmFjdGVyaXN0aWNcbiAgICAgICAgY29uZmlnLm9wdGlvbnMuYXR0cmlidXRlID1cbiAgICAgICAgICBvcHRpb25zLmF0dHJpYnV0ZSA/P1xuICAgICAgICAgIG9wdGlvbnMuZXZlbnQ/LmN1cnJlbnRUYXJnZXQucGFyZW50RWxlbWVudC5kYXRhc2V0LmF0dHJpYlxuICAgICAgICBjb25maWcuZGlhbG9nT3B0aW9ucy5hdHRyaWJ1dGUgPSBjb25maWcub3B0aW9ucy5hdHRyaWJ1dGVcbiAgICAgICAgY29uZmlnLm9wdGlvbnMuYWN0b3JJZCA9XG4gICAgICAgICAgb3B0aW9ucy5ldmVudD8uY3VycmVudFRhcmdldC5jbG9zZXN0KCdmb3JtJykuZGF0YXNldC5hY3RvcklkID8/XG4gICAgICAgICAgb3B0aW9ucy5hY3Rvci5pZFxuICAgICAgICBjb25maWcub3B0aW9ucy50b2tlbktleSA9XG4gICAgICAgICAgb3B0aW9ucy5ldmVudD8uY3VycmVudFRhcmdldC5jbG9zZXN0KCdmb3JtJykuZGF0YXNldC50b2tlbklkID8/XG4gICAgICAgICAgb3B0aW9ucy5hY3Rvci50b2tlbktleVxuICAgICAgICBjb25maWcub3B0aW9ucy53ZWFwb25BbHRTa2lsbCA9XG4gICAgICAgICAgb3B0aW9ucy5ldmVudD8uY3VycmVudFRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2FsdGVybmF0aXYtc2tpbGwnKVxuICAgICAgICBjb25maWcub3B0aW9ucy5hY3RvciA9IG9wdGlvbnMuYWN0b3JcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGNvbmZpZy5kaWFsb2dPcHRpb25zLnJvbGxUeXBlID09PSBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX1NLSUxMICYmXG4gICAgICAgICAgY29uZmlnLm9wdGlvbnMuaXNDb21iYXRcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3QgaXRlbSA9IGNvbmZpZy5vcHRpb25zLmFjdG9yLml0ZW1zLmdldChjb25maWcub3B0aW9ucy5pdGVtSWQpXG4gICAgICAgICAgaWYgKCFpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ3dlYXBvbicpIHtcbiAgICAgICAgICAgIGNvbmZpZy5vcHRpb25zLndlYXBvbk5hbWUgPSBpdGVtLm5hbWVcbiAgICAgICAgICAgIGNvbmZpZy5kaWFsb2dPcHRpb25zLnJvbGxUeXBlID0gQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9DT01CQVRcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiBjb25maWcub3B0aW9ucy5hY3RvcklkID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICAgICh0eXBlb2YgY29uZmlnLm9wdGlvbnMudG9rZW5LZXkgPT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICB0eXBlb2YgY29uZmlnLm9wdGlvbnMuYWN0b3IgPT09ICd1bmRlZmluZWQnKVxuICAgICAgICApIHtcbiAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FcnJvckludmFsaWRGb3JtdWxhJywge1xuICAgICAgICAgICAgICB2YWx1ZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkVycm9yQWN0b3InKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGNvbmZpZy5kaWFsb2dPcHRpb25zLnJvbGxUeXBlID09PSBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX1NLSUxMICYmXG4gICAgICAgICAgdHlwZW9mIGNvbmZpZy5vcHRpb25zLnNraWxsSWQgPT09ICd1bmRlZmluZWQnXG4gICAgICAgICkge1xuICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkVycm9ySW52YWxpZEZvcm11bGEnLCB7XG4gICAgICAgICAgICAgIHZhbHVlOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRW50aXRpZXMuU2tpbGwnKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgY29uZmlnLmRpYWxvZ09wdGlvbnMucm9sbFR5cGUgPT09XG4gICAgICAgICAgQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9DSEFSQUNURVJJU1RJQ1xuICAgICAgICApIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy5vcHRpb25zLmNoYXJhY3RlcmlzdGljID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FcnJvckludmFsaWRGb3JtdWxhJywge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQ2hhcmFjdGVyaXN0aWMnKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICFnYW1lLnVzZXIuaXNHTSAmJlxuICAgICAgICAgICAgIWNvbmZpZy5vcHRpb25zLmFjdG9yLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3NbXG4gICAgICAgICAgICAgIGNvbmZpZy5vcHRpb25zLmNoYXJhY3RlcmlzdGljXG4gICAgICAgICAgICBdPy52YWx1ZVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGNvbmZpZy5kaWFsb2dPcHRpb25zLnJvbGxUeXBlID09PSBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX0FUVFJJQlVURVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy5vcHRpb25zLmF0dHJpYnV0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRXJyb3JJbnZhbGlkRm9ybXVsYScsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkF0dHJpYnV0ZScpXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgIWdhbWUudXNlci5pc0dNICYmXG4gICAgICAgICAgICAhY29uZmlnLm9wdGlvbnMuYWN0b3Iuc3lzdGVtLmF0dHJpYnNbY29uZmlnLm9wdGlvbnMuYXR0cmlidXRlXVxuICAgICAgICAgICAgICA/LnZhbHVlXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgY29uZmlnLmRpYWxvZ09wdGlvbnMucm9sbFR5cGUgPT09IENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfQ09NQkFUXG4gICAgICAgICkge1xuICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnLm9wdGlvbnMuaXRlbUlkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FcnJvckludmFsaWRGb3JtdWxhJywge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRW50aXRpZXMuV2VhcG9uJylcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLm9wdGlvbnMuYWx0S2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uZmlnLm9wdGlvbnMuaGFzUGxheWVyT3duZXIgPVxuICAgICAgICAgIGNvbmZpZy5vcHRpb25zLmFjdG9yLmhhc1BsYXllck93bmVyID8/IGZhbHNlXG4gICAgICAgIGlmIChcbiAgICAgICAgICBjb25maWcuZGlhbG9nT3B0aW9ucy5yb2xsVHlwZSA9PT1cbiAgICAgICAgICBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX0NIQVJBQ1RFUklTVElDXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbmZpZy5kaWFsb2dPcHRpb25zLmRpc2FibGVGbGF0VGhyZXNob2xkTW9kaWZpZXIgPVxuICAgICAgICAgICAgY29uZmlnLm9wdGlvbnMuaXNDdHJsS2V5XG4gICAgICAgICAgY29uZmlnLmRpYWxvZ09wdGlvbnMuZGlzYWJsZUZsYXREaWNlTW9kaWZpZXIgPVxuICAgICAgICAgICAgY29uZmlnLm9wdGlvbnMuaXNDdHJsS2V5XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uZmlnLmRpYWxvZ09wdGlvbnMuZGlzYWJsZUZsYXRUaHJlc2hvbGRNb2RpZmllciA9IGZhbHNlXG4gICAgICAgICAgY29uZmlnLmRpYWxvZ09wdGlvbnMuZGlzYWJsZUZsYXREaWNlTW9kaWZpZXIgPSBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIGNvbmZpZy5kaWFsb2dPcHRpb25zLm1vZGlmaWVyID0gMFxuICAgICAgICBjb25maWcuZGlhbG9nT3B0aW9ucy5kaWZmaWN1bHR5ID1cbiAgICAgICAgICBvcHRpb25zLmRpZmZpY3VsdHkgPz9cbiAgICAgICAgICBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsW1xuICAgICAgICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnZGVmYXVsdENoZWNrRGlmZmljdWx0eScpXG4gICAgICAgICAgXVxuICAgICAgICBjb25maWcuZGlhbG9nT3B0aW9ucy5mbGF0RGljZU1vZGlmaWVyID0gMFxuICAgICAgICBjb25maWcuZGlhbG9nT3B0aW9ucy5mbGF0VGhyZXNob2xkTW9kaWZpZXIgPSAwXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIHJldHVybiBjb25maWdcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyB0cmlnZ2VyIChvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBjb25maWcgPSBDb0M3Q2hhdE1lc3NhZ2Uubm9ybWFsaXplUmVxdWVzdChvcHRpb25zKVxuICAgIGlmIChjb25maWcgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKFxuICAgICAgKGNvbmZpZy5vcHRpb25zLmlzQ3RybEtleSkgJiZcbiAgICAgIGdhbWUudXNlci5pc0dNICYmXG4gICAgICBbXG4gICAgICAgIENvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfTk9STUFMLFxuICAgICAgICBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX1NBTl9DSEVDS1xuICAgICAgXS5pbmNsdWRlcyhjb25maWcuZGlhbG9nT3B0aW9ucy5jYXJkVHlwZSlcbiAgICApIHtcbiAgICAgIENvQzdDaGF0TWVzc2FnZS5jcmVhdGVMaW5rKGNvbmZpZylcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgKGNvbmZpZy5vcHRpb25zLnNlbmRUb0NoYXQgfHwgY29uZmlnLm9wdGlvbnMuc2VuZFRvQ2xpcGJvYXJkIHx8IGNvbmZpZy5vcHRpb25zLm9wZW5MaW5rVG9vbCB8fCBjb25maWcub3B0aW9ucy5jcmVhdGVFbmNvdW50ZXIpICYmXG4gICAgICBnYW1lLnVzZXIuaXNHTSAmJlxuICAgICAgQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9OT05FID09PSBjb25maWcuZGlhbG9nT3B0aW9ucy5jYXJkVHlwZVxuICAgICkge1xuICAgICAgQ29DN0NoYXRNZXNzYWdlLmNyZWF0ZUxpbmsoY29uZmlnKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIGNvbmZpZy5vcHRpb25zLmFjdG9yICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy5vcHRpb25zLmF0dHJpYnV0ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBjb25zdCBib251c0RpY2UgPSBjb25maWcub3B0aW9ucy5hY3Rvci5zeXN0ZW0/LmF0dHJpYnM/Lltjb25maWcub3B0aW9ucy5hdHRyaWJ1dGVdPy5ib251c0RpY2VcbiAgICAgICAgICBpZiAoYm9udXNEaWNlKSB7XG4gICAgICAgICAgICBjb25maWcuZGlhbG9nT3B0aW9ucy5tb2RpZmllciA9IGJvbnVzRGljZVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnLm9wdGlvbnMuY2hhcmFjdGVyaXN0aWMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgY29uc3QgYm9udXNEaWNlID0gY29uZmlnLm9wdGlvbnMuYWN0b3Iuc3lzdGVtPy5jaGFyYWN0ZXJpc3RpY3M/Lltjb25maWcub3B0aW9ucy5jaGFyYWN0ZXJpc3RpY10/LmJvbnVzRGljZVxuICAgICAgICAgIGlmIChib251c0RpY2UpIHtcbiAgICAgICAgICAgIGNvbmZpZy5kaWFsb2dPcHRpb25zLm1vZGlmaWVyID0gYm9udXNEaWNlXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcub3B0aW9ucy5pdGVtSWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgY29uc3QgaXRlbU1vZGlmaWVycyA9IE9iamVjdC52YWx1ZXMoY29uZmlnLm9wdGlvbnMuYWN0b3Iuc3lzdGVtLnNraWxscykuZmluZChrID0+IGsuZm91bmRyeUlEID09PSBjb25maWcub3B0aW9ucy5pdGVtSWQpXG4gICAgICAgICAgaWYgKHR5cGVvZiBpdGVtTW9kaWZpZXJzPy5ib251c0RpY2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjb25maWcuZGlhbG9nT3B0aW9ucy5tb2RpZmllciA9IGl0ZW1Nb2RpZmllcnMuYm9udXNEaWNlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbmZpZy5kaWFsb2dPcHRpb25zLm1vZGlmaWVyID0gTWF0aC5taW4oTWF0aC5tYXgoY29uZmlnLmRpYWxvZ09wdGlvbnMubW9kaWZpZXIsIC0yKSwgMilcbiAgICAgIH1cbiAgICAgIGlmICghY29uZmlnLm9wdGlvbnMuc2hpZnRLZXkpIHtcbiAgICAgICAgYXdhaXQgQ29DN0NoYXRNZXNzYWdlLmNyZWF0ZVJvbGwoY29uZmlnKVxuICAgICAgfVxuICAgICAgcmV0dXJuIENvQzdDaGF0TWVzc2FnZS5ydW5Sb2xsKGNvbmZpZylcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlTGluayAoY29uZmlnKSB7XG4gICAgc3dpdGNoIChjb25maWcuZGlhbG9nT3B0aW9ucy5yb2xsVHlwZSkge1xuICAgICAgY2FzZSBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX0FUVFJJQlVURTpcbiAgICAgIGNhc2UgQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9DSEFSQUNURVJJU1RJQzpcbiAgICAgIGNhc2UgQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9DT01CQVQ6XG4gICAgICBjYXNlIENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfU0tJTEw6XG4gICAgICBjYXNlIENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfRU5DT1VOVEVSOlxuICAgICAgICB7XG4gICAgICAgICAgY29uc3QgbGlua0RhdGEgPSB7XG4gICAgICAgICAgICB0eXBlOiAnQ29DN0xpbmsnXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb25maWcuZGlhbG9nT3B0aW9ucy5yb2xsVHlwZSA9PT0gQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9TS0lMTCkge1xuICAgICAgICAgICAgbGlua0RhdGEuY2hlY2sgPSBDb0M3TGluay5DSEVDS19UWVBFLkNIRUNLXG4gICAgICAgICAgICBsaW5rRGF0YS5saW5rVHlwZSA9IENvQzdMaW5rLkxJTktfVFlQRS5TS0lMTFxuICAgICAgICAgICAgbGlua0RhdGEubmFtZSA9IGNvbmZpZy5vcHRpb25zLmFjdG9yLml0ZW1zLmdldChjb25maWcub3B0aW9ucy5za2lsbElkKT8uc2hvcnROYW1lXG4gICAgICAgICAgICBpZiAoIWxpbmtEYXRhLm5hbWUpIHJldHVyblxuICAgICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLmRpYWxvZ09wdGlvbnMucm9sbFR5cGUgPT09IENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfQ0hBUkFDVEVSSVNUSUMpIHtcbiAgICAgICAgICAgIGxpbmtEYXRhLmNoZWNrID0gQ29DN0xpbmsuQ0hFQ0tfVFlQRS5DSEVDS1xuICAgICAgICAgICAgbGlua0RhdGEubGlua1R5cGUgPSBDb0M3TGluay5MSU5LX1RZUEUuQ0hBUkFDVEVSSVNUSUNcbiAgICAgICAgICAgIGxpbmtEYXRhLm5hbWUgPSBjb25maWcub3B0aW9ucy5jaGFyYWN0ZXJpc3RpY1xuICAgICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLmRpYWxvZ09wdGlvbnMucm9sbFR5cGUgPT09IENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfQVRUUklCVVRFKSB7XG4gICAgICAgICAgICBpZiAoKGNvbmZpZy5vcHRpb25zLmFsdEtleSB8fCBjb25maWcub3B0aW9ucy5jcmVhdGVFbmNvdW50ZXIpICYmIGNvbmZpZy5vcHRpb25zLmF0dHJpYnV0ZSA9PT0gJ3NhbicpIHtcbiAgICAgICAgICAgICAgbGlua0RhdGEuY2hlY2sgPSBDb0M3TGluay5DSEVDS19UWVBFLlNBTkxPU1NcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGxpbmtEYXRhLmNoZWNrID0gQ29DN0xpbmsuQ0hFQ0tfVFlQRS5DSEVDS1xuICAgICAgICAgICAgICBsaW5rRGF0YS5saW5rVHlwZSA9IENvQzdMaW5rLkxJTktfVFlQRS5BVFRSSUJVVEVcbiAgICAgICAgICAgICAgbGlua0RhdGEubmFtZSA9IGNvbmZpZy5vcHRpb25zLmF0dHJpYnV0ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLmRpYWxvZ09wdGlvbnMucm9sbFR5cGUgPT09IENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfQ09NQkFUKSB7XG4gICAgICAgICAgICBsaW5rRGF0YS5jaGVjayA9IENvQzdMaW5rLkNIRUNLX1RZUEUuSVRFTVxuICAgICAgICAgICAgbGlua0RhdGEubmFtZSA9IGNvbmZpZy5vcHRpb25zLndlYXBvbk5hbWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5kaWFsb2dPcHRpb25zLnJvbGxUeXBlID09PSBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX0VOQ09VTlRFUikge1xuICAgICAgICAgICAgbGlua0RhdGEuY2hlY2sgPSBDb0M3TGluay5DSEVDS19UWVBFLlNBTkxPU1NcbiAgICAgICAgICAgIGxpbmtEYXRhLnNhbk1pbiA9IGNvbmZpZy5vcHRpb25zLmFjdG9yPy5zeXN0ZW0/LnNwZWNpYWw/LnNhbkxvc3M/LmNoZWNrUGFzc2VkXG4gICAgICAgICAgICBsaW5rRGF0YS5zYW5NYXggPSBjb25maWcub3B0aW9ucy5hY3Rvcj8uc3lzdGVtPy5zcGVjaWFsPy5zYW5Mb3NzPy5jaGVja0ZhaWxsZWRcbiAgICAgICAgICAgIGxpbmtEYXRhLnNhblJlYXNvbiA9IGNvbmZpZy5vcHRpb25zLmFjdG9yLnN5c3RlbS5pbmZvcy50eXBlPy5sZW5ndGhcbiAgICAgICAgICAgICAgPyBjb25maWcub3B0aW9ucy5hY3Rvci5zeXN0ZW0uaW5mb3MudHlwZVxuICAgICAgICAgICAgICA6IGNvbmZpZy5vcHRpb25zLmFjdG9yLm5hbWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnY29yZScsICdyb2xsTW9kZScpID09PSAnYmxpbmRyb2xsJykge1xuICAgICAgICAgICAgbGlua0RhdGEuYmxpbmQgPSB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb25maWcub3B0aW9ucy5zZW5kVG9DaGF0KSB7XG4gICAgICAgICAgICBDb0M3TGluay50b0NoYXRNZXNzYWdlKGxpbmtEYXRhKVxuICAgICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLm9wdGlvbnMuc2VuZFRvQ2xpcGJvYXJkKSB7XG4gICAgICAgICAgICBDb0M3TGluay5mcm9tRHJvcERhdGEobGlua0RhdGEpLnRoZW4obGluayA9PiB7XG4gICAgICAgICAgICAgIENvQzdVdGlsaXRpZXMuY29weVRvQ2xpcGJvYXJkKGxpbmsubGluaylcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIENvQzdDb250ZW50TGlua0RpYWxvZy5jcmVhdGUobGlua0RhdGEsIHsgYWN0b3JzOiBbY29uZmlnLm9wdGlvbnMuYWN0b3JdLmZpbHRlcihhID0+IGEub3duZXJzLmxlbmd0aCksIGhhc01vZGlmaWVyczogY29uZmlnLm9wdGlvbnMuc2hpZnRLZXkgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY3JlYXRlUm9sbCAoY29uZmlnKSB7XG4gICAgY29uc3QgdXNhZ2UgPSBhd2FpdCBSb2xsRGlhbG9nLmNyZWF0ZShjb25maWcuZGlhbG9nT3B0aW9ucylcbiAgICBpZiAodXNhZ2UpIHtcbiAgICAgIGNvbnN0IGNhcmRUeXBlID0gdXNhZ2UuZ2V0KCdjYXJkVHlwZScpXG4gICAgICBpZiAoY2FyZFR5cGUpIHtcbiAgICAgICAgY29uZmlnLmRpYWxvZ09wdGlvbnMuY2FyZFR5cGUgPSBjYXJkVHlwZVxuICAgICAgfVxuICAgICAgY29uZmlnLmRpYWxvZ09wdGlvbnMubW9kaWZpZXIgPSBOdW1iZXIodXNhZ2UuZ2V0KCdib251c0RpY2UnKSlcbiAgICAgIGNvbmZpZy5kaWFsb2dPcHRpb25zLmRpZmZpY3VsdHkgPSBOdW1iZXIodXNhZ2UuZ2V0KCdkaWZmaWN1bHR5JykpXG4gICAgICBjb25maWcuZGlhbG9nT3B0aW9ucy5mbGF0RGljZU1vZGlmaWVyID0gTnVtYmVyKFxuICAgICAgICB1c2FnZS5nZXQoJ2ZsYXREaWNlTW9kaWZpZXInKVxuICAgICAgKVxuICAgICAgY29uZmlnLmRpYWxvZ09wdGlvbnMuZmxhdFRocmVzaG9sZE1vZGlmaWVyID0gTnVtYmVyKFxuICAgICAgICB1c2FnZS5nZXQoJ2ZsYXRUaHJlc2hvbGRNb2RpZmllcicpXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIHJ1blJvbGwgKGNvbmZpZykge1xuICAgIHN3aXRjaCAoY29uZmlnLmRpYWxvZ09wdGlvbnMuY2FyZFR5cGUpIHtcbiAgICAgIGNhc2UgQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9TQU5fQ0hFQ0s6XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zdCBzYW5EYXRhID0gYXdhaXQgU2FuRGF0YURpYWxvZy5jcmVhdGUoe1xuICAgICAgICAgICAgcHJvbXB0TGFiZWw6IHRydWVcbiAgICAgICAgICB9KVxuICAgICAgICAgIGlmIChzYW5EYXRhKSB7XG4gICAgICAgICAgICBsZXQgc2FuTWluID0gc2FuRGF0YS5nZXQoJ3Nhbk1pbicpIHx8IDBcbiAgICAgICAgICAgIGxldCBzYW5NYXggPSBzYW5EYXRhLmdldCgnc2FuTWF4JykgfHwgMFxuICAgICAgICAgICAgY29uc3Qgc2FuUmVhc29uID0gc2FuRGF0YS5nZXQoJ3NhblJlYXNvbicpXG5cbiAgICAgICAgICAgIGlmICghaXNOYU4oTnVtYmVyKHNhbk1pbikpKSBzYW5NaW4gPSBOdW1iZXIoc2FuTWluKVxuICAgICAgICAgICAgaWYgKCFpc05hTihOdW1iZXIoc2FuTWF4KSkpIHNhbk1heCA9IE51bWJlcihzYW5NYXgpXG5cbiAgICAgICAgICAgIFNhbkNoZWNrQ2FyZC5jcmVhdGUoXG4gICAgICAgICAgICAgIGNvbmZpZy5vcHRpb25zLmFjdG9yLmFjdG9yS2V5LFxuICAgICAgICAgICAgICB7IHNhbk1pbiwgc2FuTWF4LCBzYW5SZWFzb24gfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNhbk1vZGlmaWVyOiBjb25maWcuZGlhbG9nT3B0aW9ucy5tb2RpZmllcixcbiAgICAgICAgICAgICAgICBzYW5EaWZmaWN1bHR5OiBjb25maWcuZGlhbG9nT3B0aW9ucy5kaWZmaWN1bHR5LFxuICAgICAgICAgICAgICAgIGZhc3RGb3J3YXJkOiBjb25maWcub3B0aW9ucy5zaGlmdEtleVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIENvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfTk9STUFMOiB7XG4gICAgICAgIGNvbnN0IGNoZWNrID0gbmV3IENvQzdDaGVjaygpXG4gICAgICAgIGNoZWNrLmRpY2VNb2RpZmllciA9IGNvbmZpZy5kaWFsb2dPcHRpb25zLm1vZGlmaWVyXG4gICAgICAgIGNoZWNrLmRpZmZpY3VsdHkgPSBjb25maWcuZGlhbG9nT3B0aW9ucy5kaWZmaWN1bHR5XG4gICAgICAgIGNoZWNrLmFjdG9yID0gIWNvbmZpZy5vcHRpb25zLnRva2VuS2V5XG4gICAgICAgICAgPyBjb25maWcub3B0aW9ucy5hY3RvcklkXG4gICAgICAgICAgOiBjb25maWcub3B0aW9ucy50b2tlbktleVxuICAgICAgICBjaGVjay5mbGF0RGljZU1vZGlmaWVyID0gY29uZmlnLmRpYWxvZ09wdGlvbnMuZmxhdERpY2VNb2RpZmllclxuICAgICAgICBjaGVjay5mbGF0VGhyZXNob2xkTW9kaWZpZXIgPSBjb25maWcuZGlhbG9nT3B0aW9ucy5mbGF0VGhyZXNob2xkTW9kaWZpZXJcbiAgICAgICAgY2hlY2suc3RhbmRieSA9XG4gICAgICAgICAgIWNvbmZpZy5vcHRpb25zLnByZXZlbnRTdGFuZGJ5ICYmXG4gICAgICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnc3RhbmJ5R01Sb2xscycpICYmXG4gICAgICAgICAgZ2FtZS51c2VyLmlzR00gJiZcbiAgICAgICAgICBjb25maWcub3B0aW9ucy5oYXNQbGF5ZXJPd25lclxuICAgICAgICBpZiAoY29uZmlnLmRpYWxvZ09wdGlvbnMucm9sbFR5cGUgPT09IENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfU0tJTEwpIHtcbiAgICAgICAgICBjaGVjay5za2lsbCA9IGNvbmZpZy5vcHRpb25zLnNraWxsSWRcbiAgICAgICAgICBhd2FpdCBjaGVjay5yb2xsKClcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBjb25maWcuZGlhbG9nT3B0aW9ucy5yb2xsVHlwZSA9PT0gQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9BVFRSSUJVVEVcbiAgICAgICAgKSB7XG4gICAgICAgICAgYXdhaXQgY2hlY2sucm9sbEF0dHJpYnV0ZShjb25maWcub3B0aW9ucy5hdHRyaWJ1dGUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXdhaXQgY2hlY2sucm9sbENoYXJhY3RlcmlzdGljKGNvbmZpZy5vcHRpb25zLmNoYXJhY3RlcmlzdGljKVxuICAgICAgICB9XG4gICAgICAgIGlmIChjb25maWcuZGlhbG9nT3B0aW9ucy5jaGF0TWVzc2FnZSkge1xuICAgICAgICAgIGNoZWNrLnRvTWVzc2FnZSgpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICByZXN1bHQ6IGNoZWNrLm1vZGlmaWVkUmVzdWx0LFxuICAgICAgICAgIHN1Y2Nlc3NMZXZlbDogY2hlY2sucm9sbGVkU3VjY2Vzc0xldmVsLFxuICAgICAgICAgIGlzRnVtYmxlOiBjaGVjay5pc0Z1bWJsZSxcbiAgICAgICAgICBpc0NyaXRpY2FsOiBjaGVjay5pc0NyaXRpY2FsLFxuICAgICAgICAgIHN1Y2Nlc3NMZXZlbHM6IHtcbiAgICAgICAgICAgIDE6IGNoZWNrLnJlZ3VsYXJUaHJlc2hvbGQsXG4gICAgICAgICAgICAyOiBjaGVjay5oYXJkVGhyZXNob2xkLFxuICAgICAgICAgICAgMzogY2hlY2suZXh0cmVtZVRocmVzaG9sZFxuICAgICAgICAgIH0sXG4gICAgICAgICAgcGFzc2VkOiBjaGVjay5wYXNzZWRcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2FzZSBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX09QUE9TRUQ6XG4gICAgICBjYXNlIENvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfQ09NQklORUQ6XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zdCBjaGVjayA9IG5ldyBDb0M3Q2hlY2soKVxuICAgICAgICAgIGNoZWNrLmFjdG9yID0gIWNvbmZpZy5vcHRpb25zLnRva2VuS2V5XG4gICAgICAgICAgICA/IGNvbmZpZy5vcHRpb25zLmFjdG9ySWRcbiAgICAgICAgICAgIDogY29uZmlnLm9wdGlvbnMudG9rZW5LZXlcbiAgICAgICAgICBjaGVjay5jaGFyYWN0ZXJpc3RpYyA9IGNvbmZpZy5vcHRpb25zLmNoYXJhY3RlcmlzdGljXG4gICAgICAgICAgY2hlY2suYXR0cmlidXRlID0gY29uZmlnLm9wdGlvbnMuYXR0cmlidXRlXG4gICAgICAgICAgY2hlY2suc2tpbGxJZCA9IGNvbmZpZy5vcHRpb25zLnNraWxsSWRcbiAgICAgICAgICBjaGVjay5yb2xsTW9kZSA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdjb3JlJywgJ3JvbGxNb2RlJylcbiAgICAgICAgICBjaGVjay5pbml0aWF0b3IgPSBnYW1lLnVzZXIuaWRcbiAgICAgICAgICBsZXQgZGF0YSA9IHt9XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29uZmlnLmRpYWxvZ09wdGlvbnMuY2FyZFR5cGUgPT09IENvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfT1BQT1NFRFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgZGF0YSA9IHtcbiAgICAgICAgICAgICAgdHlwZTogT3Bwb3NlZENoZWNrQ2FyZC5kZWZhdWx0Q29uZmlnLnR5cGUsXG4gICAgICAgICAgICAgIGNvbWJhdDogY29uZmlnLm9wdGlvbnMuaXNDb21iYXQsXG4gICAgICAgICAgICAgIGFjdGlvbjogJ25ldydcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoZWNrLml0ZW0gPSBjb25maWcub3B0aW9ucy5pdGVtSWRcbiAgICAgICAgICAgIGNoZWNrLndlYXBvbkFsdFNraWxsID0gY29uZmlnLm9wdGlvbnMud2VhcG9uQWx0U2tpbGxcbiAgICAgICAgICAgIGNoZWNrLmRlbnlQdXNoID0gdHJ1ZSAvLyBPcHBvc2VkIHJvbGxlZCBjYW4ndCBiZSBwdXNoZWQuXG4gICAgICAgICAgICBhd2FpdCBjaGVjay5fcGVyZm9ybSgpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGEgPSB7XG4gICAgICAgICAgICAgIHR5cGU6IENvbWJpbmVkQ2hlY2tDYXJkLmRlZmF1bHRDb25maWcudHlwZSxcbiAgICAgICAgICAgICAgYWN0aW9uOiAnbmV3J1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hlY2suZGlmZmljdWx0eSA9IGNvbmZpZy5kaWFsb2dPcHRpb25zLmRpZmZpY3VsdHlcbiAgICAgICAgICB9XG4gICAgICAgICAgZGF0YS5yb2xsID0gY2hlY2suSlNPTlJvbGxEYXRhXG4gICAgICAgICAgZGF0YS5fcm9sbE1vZGUgPSBnYW1lLnNldHRpbmdzLmdldCgnY29yZScsICdyb2xsTW9kZScpXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29uZmlnLmRpYWxvZ09wdGlvbnMuY2FyZFR5cGUgPT09IENvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfT1BQT1NFRFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgT3Bwb3NlZENoZWNrQ2FyZC5kaXNwYXRjaChkYXRhKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBDb21iaW5lZENoZWNrQ2FyZC5kaXNwYXRjaChkYXRhKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuIiwiLyogZ2xvYmFsICQsIENoYXRNZXNzYWdlLCBnYW1lLCByZW5kZXJUZW1wbGF0ZSwgdWkgKi9cbmltcG9ydCB7IENPQzcgfSBmcm9tICcuLi9jb25maWcuanMnXG5pbXBvcnQgeyBDb0M3Q2hlY2sgfSBmcm9tICcuLi9jaGVjay5qcydcbmltcG9ydCB7IGNoYXRIZWxwZXIsIENvQzdSb2xsIH0gZnJvbSAnLi9oZWxwZXIuanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3Q29uQ2hlY2sge1xuICBjb25zdHJ1Y3RvciAoYWN0b3JJZCA9IG51bGwsIGRpZmZpY3VsdHkgPSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXIpIHtcbiAgICB0aGlzLmNoZWNrID0gbmV3IENvQzdDaGVjayhhY3RvcklkKVxuICAgIHRoaXMuY2hlY2suY2hhcmFjdGVyaXN0aWMgPSAnY29uJ1xuICAgIHRoaXMuY2hlY2suZGlmZmljdWx0eSA9IGRpZmZpY3VsdHlcbiAgICB0aGlzLmNoZWNrLmRlbnlQdXNoID0gdHJ1ZVxuICAgIHRoaXMuYWN0b3JJZCA9IGFjdG9ySWRcbiAgfVxuXG4gIGdldCBpc0JsaW5kICgpIHtcbiAgICBpZiAodW5kZWZpbmVkID09PSB0aGlzLl9pc0JsaW5kKSB7XG4gICAgICB0aGlzLl9pc0JsaW5kID0gdGhpcy5yb2xsTW9kZSA9PT0gJ2JsaW5kcm9sbCdcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2lzQmxpbmRcbiAgfVxuXG4gIHNldCBpc0JsaW5kICh4KSB7XG4gICAgdGhpcy5faXNCbGluZCA9IHhcbiAgfVxuXG4gIGdldCByb2xsTW9kZSAoKSB7XG4gICAgaWYgKCF0aGlzLl9yb2xsTW9kZSkgdGhpcy5fcm9sbE1vZGUgPSBnYW1lLnNldHRpbmdzLmdldCgnY29yZScsICdyb2xsTW9kZScpXG4gICAgcmV0dXJuIHRoaXMuX3JvbGxNb2RlXG4gIH1cblxuICBzZXQgcm9sbE1vZGUgKHgpIHtcbiAgICBpZiAoeCA9PT0gZmFsc2UpIHRoaXMuX3JvbGxNb2RlID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ2NvcmUnLCAncm9sbE1vZGUnKVxuICAgIHRoaXMuX3JvbGxNb2RlID0geFxuICB9XG5cbiAgZ2V0IGFjdG9yICgpIHtcbiAgICBpZiAodGhpcy5hY3RvcklkKSByZXR1cm4gY2hhdEhlbHBlci5nZXRBY3RvckZyb21LZXkodGhpcy5hY3RvcklkKSAvLyBSRUZBQ1RPUklORyAoMilcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgc2V0IGFjdG9ySWQgKHgpIHtcbiAgICB0aGlzLl9hY3RvcklkID0geFxuICAgIHRoaXMuY2hlY2suYWN0b3IgPSB4XG4gIH1cblxuICBnZXQgYWN0b3JJZCAoKSB7XG4gICAgaWYgKHRoaXMuX2FjdG9ySWQpIHJldHVybiB0aGlzLl9hY3RvcklkXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGdldCB0b2tlbktleSAoKSB7XG4gICAgaWYgKHRoaXMuYWN0b3IuaXNUb2tlbikgcmV0dXJuIHRoaXMuYWN0b3IudG9rZW5LZXlcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgZ2V0IGlzU3VjY2VzcyAoKSB7XG4gICAgaWYgKHRoaXMuY2hlY2spIHJldHVybiB0aGlzLmNoZWNrLmlzU3VjY2Vzc1xuICAgIGVsc2UgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBnZXQgaXNSb2xsZWQgKCkge1xuICAgIGlmICh0aGlzLmNoZWNrICYmIHRoaXMuY2hlY2suZGljZXMgJiYgdGhpcy5jaGVjay5kaWNlcy50b3RhbCkgcmV0dXJuIHRydWVcbiAgICBlbHNlIHJldHVybiBmYWxzZVxuICB9XG5cbiAgc3RhdGljIGdldEZyb21DYXJkIChjYXJkKSB7XG4gICAgY29uc3QgY29uQ2hlY2sgPSBuZXcgQ29DN0NvbkNoZWNrKClcbiAgICBjaGF0SGVscGVyLmdldE9iamVjdEZyb21FbGVtZW50KGNvbkNoZWNrLCBjYXJkKVxuICAgIGNvbnN0IGh0bWxDaGVjayA9IGNhcmQucXVlcnlTZWxlY3RvcignLnJvbGwtcmVzdWx0JylcbiAgICBDb0M3Um9sbC5nZXRGcm9tRWxlbWVudChodG1sQ2hlY2ssIGNvbkNoZWNrLmNoZWNrKVxuICAgIGNvbkNoZWNrLm1lc3NhZ2VJZCA9IGNhcmQuY2xvc2VzdCgnLm1lc3NhZ2UnKS5kYXRhc2V0Lm1lc3NhZ2VJZFxuICAgIHJldHVybiBjb25DaGVja1xuICB9XG5cbiAgYXN5bmMgZ2V0Q2hlY2tFbGVtZW50ICgpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2NoYXQvcm9sbC1yZXN1bHQuaHRtbCdcbiAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUodGVtcGxhdGUsIHRoaXMuY2hlY2spXG4gICAgY29uc3QgaHRtbEVsZW1lbnQgPSAkLnBhcnNlSFRNTChodG1sKVswXVxuICAgIGlmIChodG1sRWxlbWVudCkge1xuICAgICAgaHRtbEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnY2hhdC1jYXJkJywgJ2l0ZW0tY2FyZCcsICdyb2xsLWNhcmQnKVxuICAgICAgcmV0dXJuIGh0bWxFbGVtZW50XG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBhc3luYyB0b01lc3NhZ2UgKGZhc3RGb3J3YXJkID0gZmFsc2UpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2NoYXQvY29uLWNoZWNrLmh0bWwnXG5cbiAgICBpZiAoZmFzdEZvcndhcmQpIHtcbiAgICAgIGF3YWl0IHRoaXMucm9sbENvbigpXG4gICAgfVxuXG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRlbXBsYXRlLCB0aGlzKVxuICAgIGNvbnN0IGh0bWxFbGVtZW50ID0gJC5wYXJzZUhUTUwoaHRtbClbMF1cblxuICAgIGlmIChmYXN0Rm9yd2FyZCkge1xuICAgICAgY29uc3QgY2hlY2sgPSBodG1sRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcucm9sbC1yZXN1bHQnKVxuICAgICAgY2hlY2sucmVwbGFjZVdpdGgoYXdhaXQgdGhpcy5nZXRDaGVja0VsZW1lbnQoKSlcbiAgICB9XG5cbiAgICBjb25zdCBzcGVha2VyRGF0YSA9IHt9XG4gICAgbGV0IHNwZWFrZXJcbiAgICBpZiAodGhpcy5hY3Rvcikge1xuICAgICAgaWYgKHRoaXMudG9rZW4pIHNwZWFrZXJEYXRhLnRva2VuID0gdGhpcy50b2tlblxuICAgICAgZWxzZSBzcGVha2VyRGF0YS5hY3RvciA9IHRoaXMuYWN0b3JcbiAgICAgIHNwZWFrZXIgPSBDaGF0TWVzc2FnZS5nZXRTcGVha2VyKHNwZWFrZXJEYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICBzcGVha2VyID0gQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlcigpXG4gICAgfVxuXG4gICAgY29uc3QgdXNlciA9IHRoaXMuYWN0b3IudXNlciA/IHRoaXMuYWN0b3IudXNlciA6IGdhbWUudXNlclxuXG4gICAgY29uc3QgY2hhdERhdGEgPSB7XG4gICAgICB1c2VyOiB1c2VyLmlkLFxuICAgICAgc3BlYWtlcixcbiAgICAgIGZsYXZvcjogdGhpcy5mbGF2b3IsXG4gICAgICBjb250ZW50OiBodG1sRWxlbWVudC5vdXRlckhUTUxcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBbJ2dtcm9sbCcsICdibGluZHJvbGwnXS5pbmNsdWRlcyhnYW1lLnNldHRpbmdzLmdldCgnY29yZScsICdyb2xsTW9kZScpKVxuICAgICkge1xuICAgICAgY2hhdERhdGEud2hpc3BlciA9IENoYXRNZXNzYWdlLmdldFdoaXNwZXJSZWNpcGllbnRzKCdHTScpIC8vIENoYW5nZSBmb3IgdXNlclxuICAgIH1cbiAgICBpZiAodGhpcy5yb2xsTW9kZSA9PT0gJ2JsaW5kcm9sbCcpIGNoYXREYXRhLmJsaW5kID0gdHJ1ZVxuXG4gICAgQ2hhdE1lc3NhZ2UuY3JlYXRlKGNoYXREYXRhKS50aGVuKG1zZyA9PiB7XG4gICAgICByZXR1cm4gbXNnXG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jIHJvbGxDb24gKCkge1xuICAgIHRoaXMuY2hlY2suaGlkZURpY2VSZXN1bHQgPSB0cnVlXG4gICAgYXdhaXQgdGhpcy5jaGVjay5fcGVyZm9ybSgpXG4gICAgaWYgKCF0aGlzLmlzQmxpbmQgJiYgIXRoaXMuaXNSb2xsZWQgJiYgIXRoaXMuaXNTdWNjZXNzKSB7XG4gICAgICBpZiAodGhpcy5zdGF5QWxpdmUpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5hY3Rvci5zZXRDb25kaXRpb24oQ09DNy5zdGF0dXMuZGVhZClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF3YWl0IHRoaXMuYWN0b3Iuc2V0Q29uZGl0aW9uKENPQzcuc3RhdHVzLnVuY29uc2Npb3VzKVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmFwcGxpZWQgPSB0cnVlXG4gIH1cblxuICBhc3luYyB1cGRhdGVDaGF0Q2FyZCAoKSB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9jaGF0L2Nvbi1jaGVjay5odG1sJ1xuXG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRlbXBsYXRlLCB0aGlzKVxuICAgIGNvbnN0IGh0bWxFbGVtZW50ID0gJC5wYXJzZUhUTUwoaHRtbClbMF1cblxuICAgIGNvbnN0IGNoZWNrID0gaHRtbEVsZW1lbnQucXVlcnlTZWxlY3RvcignLnJvbGwtcmVzdWx0JylcbiAgICBjaGVjay5yZXBsYWNlV2l0aChhd2FpdCB0aGlzLmdldENoZWNrRWxlbWVudCgpKVxuXG4gICAgaWYgKCF0aGlzLmlzQmxpbmQgJiYgdGhpcy5pc1JvbGxlZCAmJiAhdGhpcy5pc1N1Y2Nlc3MpIHtcbiAgICAgIGlmICh0aGlzLnN0YXlBbGl2ZSkge1xuICAgICAgICBhd2FpdCB0aGlzLmFjdG9yLnNldENvbmRpdGlvbihDT0M3LnN0YXR1cy5kZWFkKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXdhaXQgdGhpcy5hY3Rvci5zZXRDb25kaXRpb24oQ09DNy5zdGF0dXMudW5jb25zY2lvdXMpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm1lc3NhZ2VJZCkgcmV0dXJuXG4gICAgY29uc3QgY2hhdE1lc3NhZ2UgPSBnYW1lLm1lc3NhZ2VzLmdldCh0aGlzLm1lc3NhZ2VJZClcblxuICAgIGNvbnN0IG1zZyA9IGF3YWl0IGNoYXRNZXNzYWdlLnVwZGF0ZSh7IGNvbnRlbnQ6IGh0bWxFbGVtZW50Lm91dGVySFRNTCB9KVxuICAgIGF3YWl0IHVpLmNoYXQudXBkYXRlTWVzc2FnZShtc2csIGZhbHNlKVxuICAgIHJldHVybiBtc2dcbiAgfVxufVxuIiwiLyogZ2xvYmFsIERpYWxvZywgcmVuZGVyVGVtcGxhdGUgKi9cbmV4cG9ydCBjbGFzcyBTa2lsbFNlbGVjdERpYWxvZyBleHRlbmRzIERpYWxvZyB7XG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcblxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcuc2VsZWN0LXNraWxsJylcbiAgICAgIC5jbGljayhhc3luYyBldmVudCA9PiB0aGlzLl9vblNlbGVjdFNraWxsQ2xpY2tlZChldmVudCkpXG4gIH1cblxuICBhc3luYyBfb25TZWxlY3RTa2lsbENsaWNrZWQgKGV2ZW50KSB7XG4gICAgY29uc3QgbGkgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5pdGVtJylcbiAgICAvLyBjb25zdCBhY3RvciA9IGdhbWUuYWN0b3JzLmdldCggdGhpcy5kYXRhLmRhdGEuYWN0b3JJZCk7XG4gICAgLy8gYXdhaXQgYWN0b3IuYWRkU2tpbGwoIHRoaXMuZGF0YS5kYXRhLnNraWxsc1tOdW1iZXIobGkuZGF0YXNldC5pbmRleCldLCB0aGlzLmRhdGEuZGF0YS50eXBlKTtcbiAgICB0aGlzLmRhdGEuZGF0YS5za2lsbHNbTnVtYmVyKGxpLmRhdGFzZXQuaW5kZXgpXS5zZWxlY3RlZCA9IHRydWVcbiAgICBldmVudC5jdXJyZW50VGFyZ2V0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICBpZiAoIXRoaXMuZGF0YS5kYXRhLmFkZGVkKSB0aGlzLmRhdGEuZGF0YS5hZGRlZCA9IDBcbiAgICB0aGlzLmRhdGEuZGF0YS5hZGRlZCsrXG4gICAgY29uc3QgZm9ybSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLnNraWxsLXNlbGVjdG9yJylcbiAgICBjb25zdCBkaXZDb3VudCA9IGZvcm0ucXVlcnlTZWxlY3RvcignLmNvdW50JylcbiAgICBkaXZDb3VudC5pbm5lclRleHQgPSB0aGlzLmRhdGEuZGF0YS5hZGRlZFxuICAgIGlmICh0aGlzLmRhdGEuZGF0YS5hZGRlZCA+PSB0aGlzLmRhdGEuZGF0YS5vcHRpb25zQ291bnQpIHtcbiAgICAgIHRoaXMuY2xvc2UoKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBjcmVhdGUgKGRhdGEpIHtcbiAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUoXG4gICAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hcHBzL3NraWxsLXNlbGVjdC5odG1sJyxcbiAgICAgIGRhdGFcbiAgICApIC8vIFJlbmRlciB0ZW1wbGF0ZSBidWcgYXZlYyBjZXJ0YWluZXMgZGF0YVxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIGNvbnN0IGRsZyA9IG5ldyBTa2lsbFNlbGVjdERpYWxvZyhcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBkYXRhLnRpdGxlLFxuICAgICAgICAgIGNvbnRlbnQ6IGh0bWwsXG4gICAgICAgICAgZGF0YSxcbiAgICAgICAgICBidXR0b25zOiB7fSxcbiAgICAgICAgICBjbG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFkYXRhLmFkZGVkID49IGRhdGEub3B0aW9uc0NvdW50KSByZXR1cm4gcmVzb2x2ZShmYWxzZSlcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkID0gZGF0YS5za2lsbHMuZmlsdGVyKHNraWxsID0+IHNraWxsLnNlbGVjdGVkKVxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoc2VsZWN0ZWQpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7IGNsYXNzZXM6IFsnY29jNycsICdkaWFsb2cnLCAnc2tpbGwtc2VsZWN0J10gfVxuICAgICAgKVxuICAgICAgZGxnLnJlbmRlcih0cnVlKVxuICAgIH0pXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCAkLCBEaWFsb2csIHJlbmRlclRlbXBsYXRlICovXG5cbmV4cG9ydCBjbGFzcyBQb2ludFNlbGVjdERpYWxvZyBleHRlbmRzIERpYWxvZyB7XG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcblxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcuaXRlbS1uYW1lJylcbiAgICAgIC5jbGljayhhc3luYyBldmVudCA9PiB0aGlzLl9vblNlbGVjdENoYXJhY3RlcmlzdGljKGV2ZW50KSlcbiAgICBodG1sLmZpbmQoJ2J1dHRvbicpLmNsaWNrKGV2ZW50ID0+IHRoaXMuX29uQnV0dG9uQ2xpY2tlZChldmVudCkpXG4gIH1cblxuICBhc3luYyBfb25TZWxlY3RDaGFyYWN0ZXJpc3RpYyAoZXZlbnQpIHtcbiAgICBjb25zdCBsaSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLml0ZW0nKVxuICAgIGNvbnN0IGl0ZW1MaXN0ID0gbGkuY2xvc2VzdCgnLml0ZW0tbGlzdCcpXG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1MaXN0LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWxlY3RhYmxlJykpIHtcbiAgICAgIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKVxuICAgICAgdGhpcy5kYXRhLmRhdGEuY2hhcmFjdGVyaXN0aWNzW2l0ZW0uZGF0YXNldC5rZXldLnNlbGVjdGVkID0gZmFsc2VcbiAgICAgIHRoaXMuZGF0YS5kYXRhLmNoYXJhY3RlcmlzdGljc1tpdGVtLmRhdGFzZXQua2V5XS5vcHRpb25hbCA9IGZhbHNlXG4gICAgfVxuICAgICQobGkpLnRvZ2dsZUNsYXNzKCdzZWxlY3RlZCcpXG4gICAgdGhpcy5kYXRhLmRhdGEuY2hhcmFjdGVyaXN0aWNzW2xpLmRhdGFzZXQua2V5XS5zZWxlY3RlZCA9IHRydWVcbiAgICBjb25zdCB0b3RhbFBvaW50cyA9IGxpXG4gICAgICAuY2xvc2VzdCgnI3NraWxsLXNlbGVjdGlvbi1mb3JtJylcbiAgICAgIC5xdWVyeVNlbGVjdG9yKCcucG9pbnRzJylcbiAgICB0b3RhbFBvaW50cy5pbm5lclRleHQgPVxuICAgICAgdGhpcy5kYXRhLmRhdGEudG90YWwgK1xuICAgICAgdGhpcy5kYXRhLmRhdGEuY2hhcmFjdGVyaXN0aWNzW2xpLmRhdGFzZXQua2V5XS5tdWx0aXBsaWVyICpcbiAgICAgICAgdGhpcy5kYXRhLmRhdGEuY2hhcmFjdGVyaXN0aWNzW2xpLmRhdGFzZXQua2V5XS52YWx1ZVxuICAgIGNvbnN0IGJ1dHRvbiA9IGxpXG4gICAgICAuY2xvc2VzdCgnI3NraWxsLXNlbGVjdGlvbi1mb3JtJylcbiAgICAgIC5xdWVyeVNlbGVjdG9yKCdidXR0b24udmFsaWRhdGUnKVxuICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdpbmFjdGl2ZScpXG4gICAgdGhpcy5kYXRhLmRhdGEucmVzb2x2ZWQgPSB0cnVlXG4gICAgLy8gY29uc3QgYWN0b3IgPSBnYW1lLmFjdG9ycy5nZXQoIHRoaXMuZGF0YS5kYXRhLmFjdG9ySWQpO1xuICAgIC8vIGF3YWl0IGFjdG9yLmFkZFNraWxsKCB0aGlzLmRhdGEuZGF0YS5za2lsbHNbTnVtYmVyKGxpLmRhdGFzZXQuaW5kZXgpXSwgdGhpcy5kYXRhLmRhdGEudHlwZSk7XG4gICAgLy8gZXZlbnQuY3VycmVudFRhcmdldC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIC8vIGlmKCAhdGhpcy5kYXRhLmRhdGEuYWRkZWQpIHRoaXMuZGF0YS5kYXRhLmFkZGVkID0gMDtcbiAgICAvLyB0aGlzLmRhdGEuZGF0YS5hZGRlZCsrO1xuICAgIC8vIGNvbnN0IGZvcm0gPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5wb2ludC1zZWxlY3RvcicpO1xuICAgIC8vIGNvbnN0IGRpdkNvdW50ID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcuY291bnQnKTtcbiAgICAvLyBkaXZDb3VudC5pbm5lclRleHQgPSB0aGlzLmRhdGEuZGF0YS5hZGRlZDtcbiAgICAvLyBpZiggdGhpcy5kYXRhLmRhdGEuYWRkZWQgPj0gdGhpcy5kYXRhLmRhdGEub3B0aW9ucykgdGhpcy5jbG9zZSgpO1xuICAgIC8vIHJldHVybiBldmVudDtcbiAgfVxuXG4gIGFzeW5jIF9vbkJ1dHRvbkNsaWNrZWQgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnaW5hY3RpdmUnKSkgcmV0dXJuXG4gICAgc3VwZXIuY2xvc2UoKVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGNyZWF0ZSAoZGF0YSkge1xuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZShcbiAgICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvcG9pbnQtc2VsZWN0Lmh0bWwnLFxuICAgICAgZGF0YVxuICAgIClcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBjb25zdCBkbGcgPSBuZXcgUG9pbnRTZWxlY3REaWFsb2coXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogZGF0YS50aXRsZSxcbiAgICAgICAgICBjb250ZW50OiBodG1sLFxuICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgYnV0dG9uczoge30sXG4gICAgICAgICAgY2xvc2U6ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChkYXRhLnJlc29sdmVkKSByZXR1cm4gcmVzb2x2ZShkYXRhKVxuICAgICAgICAgICAgZWxzZSByZXR1cm4gcmVzb2x2ZShmYWxzZSlcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHsgY2xhc3NlczogWydjb2M3JywgJ2RpYWxvZycsICdjaGFyLXNlbGVjdCddIH1cbiAgICAgIClcbiAgICAgIGRsZy5yZW5kZXIodHJ1ZSlcbiAgICB9KVxuICB9XG59XG4iLCIvKiBnbG9iYWwgRGlhbG9nLCByZW5kZXJUZW1wbGF0ZSAqL1xuZXhwb3J0IGNsYXNzIENoYXJhY1NlbGVjdERpYWxvZyBleHRlbmRzIERpYWxvZyB7XG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcblxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcuaXRlbS1uYW1lJylcbiAgICAgIC5jbGljayhhc3luYyBldmVudCA9PiB0aGlzLl9vblNlbGVjdENoYXJhY3RlcmlzdGljKGV2ZW50KSlcbiAgfVxuXG4gIGFzeW5jIF9vblNlbGVjdENoYXJhY3RlcmlzdGljIChldmVudCkge1xuICAgIGNvbnN0IGxpID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpXG4gICAgdGhpcy5kYXRhLmRhdGEuc2VsZWN0ZWQgPSBsaS5kYXRhc2V0LmtleVxuICAgIHRoaXMuY2xvc2UoKVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGNyZWF0ZSAoZGF0YSkge1xuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZShcbiAgICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvY2hhci1zZWxlY3QuaHRtbCcsXG4gICAgICBkYXRhXG4gICAgKVxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIGNvbnN0IGRsZyA9IG5ldyBDaGFyYWNTZWxlY3REaWFsb2coXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogZGF0YS50aXRsZSxcbiAgICAgICAgICBjb250ZW50OiBodG1sLFxuICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgYnV0dG9uczoge30sXG4gICAgICAgICAgY2xvc2U6ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChkYXRhLnNlbGVjdGVkKSByZXR1cm4gcmVzb2x2ZShkYXRhLnNlbGVjdGVkKVxuICAgICAgICAgICAgZWxzZSByZXR1cm4gcmVzb2x2ZShmYWxzZSlcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHsgY2xhc3NlczogWydjb2M3JywgJ2RpYWxvZycsICdjaGFyLXNlbGVjdCddIH1cbiAgICAgIClcbiAgICAgIGRsZy5yZW5kZXIodHJ1ZSlcbiAgICB9KVxuICB9XG59XG4iLCIvKiBnbG9iYWwgRGlhbG9nLCBnYW1lLCByZW5kZXJUZW1wbGF0ZSwgUm9sbCAqL1xuZXhwb3J0IGNsYXNzIENoYXJhY1JvbGxEaWFsb2cgZXh0ZW5kcyBEaWFsb2cge1xuICBjb25zdHJ1Y3RvciAoZGF0YSwgb3B0aW9ucykge1xuICAgIHN1cGVyKGRhdGEsIG9wdGlvbnMpXG5cbiAgICB0aGlzLnJvbGxlZCA9IGRhdGEucm9sbGVkIHx8IHt9XG4gIH1cblxuICBhY3RpdmF0ZUxpc3RlbmVycyAoaHRtbCkge1xuICAgIHN1cGVyLmFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpXG4gICAgaHRtbC5vbignY2hhbmdlJywgJ2lucHV0JywgdGhpcy5fb25DaGFuZ2VJbnB1dC5iaW5kKHRoaXMpKVxuICAgIGh0bWwub24oJ3N1Ym1pdCcsICdmb3JtJywgdGhpcy5fb25TdWJtaXQuYmluZCh0aGlzKSlcbiAgICBodG1sLm9uKFxuICAgICAgJ2NsaWNrJyxcbiAgICAgICcucm9sbC1jaGFyYWN0ZXJpc3RpYycsXG4gICAgICB0aGlzLl9vblJvbGxDaGFyYWN0ZXJpc3RpYy5iaW5kKHRoaXMpXG4gICAgKVxuICAgIGh0bWwub24oXG4gICAgICAnY2xpY2snLFxuICAgICAgJy5pbmNyZWFzZS1jaGFyYWN0ZXJpc3RpYycsXG4gICAgICB0aGlzLl9vbkluY3JlYXNlQ2hhcmFjdGVyaXN0aWMuYmluZCh0aGlzKVxuICAgIClcbiAgICBodG1sLm9uKFxuICAgICAgJ2NsaWNrJyxcbiAgICAgICcuZGVjcmVhc2UtY2hhcmFjdGVyaXN0aWMnLFxuICAgICAgdGhpcy5fb25EZWNyZWFzZUNoYXJhY3RlcmlzdGljLmJpbmQodGhpcylcbiAgICApXG4gICAgaHRtbC5vbihcbiAgICAgICdjbGljaycsXG4gICAgICAnLnJlc2V0LWNoYXJhY3RlcmlzdGljJyxcbiAgICAgIHRoaXMuX29uUmVzZXRDaGFyYWN0ZXJpc3RpYy5iaW5kKHRoaXMpXG4gICAgKVxuICAgIGh0bWwub24oJ2NsaWNrJywgJ2J1dHRvbicsIHRoaXMuX29uQnV0dG9uLmJpbmQodGhpcykpXG4gIH1cblxuICBhc3luYyBfb25Sb2xsQ2hhcmFjdGVyaXN0aWMgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGxpID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpXG4gICAgY29uc3QgY2hhcmFjS2V5ID0gbGkuZGF0YXNldC5rZXlcbiAgICBhd2FpdCB0aGlzLnJvbGxDaGFyYWN0ZXJpc3RpYyhjaGFyYWNLZXkpXG4gIH1cblxuICBhc3luYyBfb25JbmNyZWFzZUNoYXJhY3RlcmlzdGljIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBsaSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLml0ZW0nKVxuICAgIGNvbnN0IGNoYXJhY0tleSA9IGxpLmRhdGFzZXQua2V5XG4gICAgdGhpcy5pbmNyZWFzZUNoYXJhY3RlcmlzdGljKGNoYXJhY0tleSlcbiAgfVxuXG4gIGFzeW5jIF9vbkRlY3JlYXNlQ2hhcmFjdGVyaXN0aWMgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGxpID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpXG4gICAgY29uc3QgY2hhcmFjS2V5ID0gbGkuZGF0YXNldC5rZXlcbiAgICB0aGlzLmRlY3JlYXNlQ2hhcmFjdGVyaXN0aWMoY2hhcmFjS2V5KVxuICB9XG5cbiAgYXN5bmMgX29uUmVzZXRDaGFyYWN0ZXJpc3RpYyAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgbGkgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5pdGVtJylcbiAgICBjb25zdCBjaGFyYWNLZXkgPSBsaS5kYXRhc2V0LmtleVxuICAgIHRoaXMucmVzZXRDaGFyYWN0ZXJpc3RpYyhjaGFyYWNLZXkpXG4gIH1cblxuICBhc3luYyBfb25CdXR0b24gKGV2ZW50KSB7XG4gICAgY29uc3QgYWN0aW9uID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmFjdGlvblxuICAgIGlmIChhY3Rpb24gPT09ICdyb2xsJykge1xuICAgICAgZm9yIChjb25zdCBjaGFyIG9mIFtcbiAgICAgICAgJ3N0cicsXG4gICAgICAgICdjb24nLFxuICAgICAgICAnc2l6JyxcbiAgICAgICAgJ2RleCcsXG4gICAgICAgICdhcHAnLFxuICAgICAgICAnaW50JyxcbiAgICAgICAgJ3BvdycsXG4gICAgICAgICdlZHUnLFxuICAgICAgICAnbHVjaydcbiAgICAgIF0pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5yb2xsQ2hhcmFjdGVyaXN0aWMoY2hhcilcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jaGVja1RvdGFsKClcbiAgICBpZiAoYWN0aW9uID09PSAndmFsaWRhdGUnICYmIHRoaXMuZGF0YS5kYXRhLnZhbGlkYXRlKSB7XG4gICAgICB0aGlzLmNsb3NlKClcbiAgICB9XG4gIH1cblxuICBhc3luYyByb2xsQ2hhcmFjdGVyaXN0aWMgKGtleSkge1xuICAgIGNvbnN0IGxpID0gdGhpcy5fZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKGBsaS5pdGVtW2RhdGEta2V5PSR7a2V5fV1gKVxuICAgIGNvbnN0IGlucHV0ID0gbGk/LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JylcbiAgICBjb25zdCBmb3JtdWxhID0gdGhpcy5kYXRhLmRhdGEuY2hhcmFjdGVyaXN0aWNzLnJvbGxzW2tleV1cbiAgICBpZiAoaW5wdXQgJiYgZm9ybXVsYSkge1xuICAgICAgaWYgKGlzTmFOKE51bWJlcihmb3JtdWxhKSkpIHtcbiAgICAgICAgY29uc3Qgcm9sbCA9IG5ldyBSb2xsKGZvcm11bGEpXG4gICAgICAgIGF3YWl0IHJvbGwuZXZhbHVhdGUoeyBhc3luYzogdHJ1ZSB9KVxuICAgICAgICByb2xsLnRvTWVzc2FnZSh7XG4gICAgICAgICAgZmxhdm9yOiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lk1lc3NhZ2VSb2xsaW5nQ2hhcmFjdGVyaXN0aWMnLCB7XG4gICAgICAgICAgICBsYWJlbDogdGhpcy5kYXRhLmRhdGEuY2hhcmFjdGVyaXN0aWNzLmxpc3Rba2V5XS5sYWJlbCxcbiAgICAgICAgICAgIGZvcm11bGFcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgICBpbnB1dC52YWx1ZSA9IHJvbGwudG90YWxcbiAgICAgIH0gZWxzZSBpbnB1dC52YWx1ZSA9IE51bWJlcihmb3JtdWxhKVxuICAgICAgdGhpcy5kYXRhLmRhdGEuY2hhcmFjdGVyaXN0aWNzLnZhbHVlc1trZXldID0gTnVtYmVyKGlucHV0LnZhbHVlKVxuICAgICAgaWYgKCF0aGlzLnJvbGxlZCkgdGhpcy5yb2xsZWQgPSB7fVxuICAgICAgdGhpcy5yb2xsZWRba2V5XSA9IHRydWVcbiAgICB9XG4gICAgdGhpcy5jaGVja1RvdGFsKClcbiAgfVxuXG4gIGFzeW5jIGluY3JlYXNlQ2hhcmFjdGVyaXN0aWMgKGtleSkge1xuICAgIGNvbnN0IGxpID0gdGhpcy5fZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKGBsaS5pdGVtW2RhdGEta2V5PSR7a2V5fV1gKVxuICAgIGNvbnN0IGlucHV0ID0gbGk/LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JylcbiAgICBpZiAoaW5wdXQpIHtcbiAgICAgIGlucHV0LnZhbHVlID0gTnVtYmVyKGlucHV0LnZhbHVlKSArIDFcbiAgICAgIHRoaXMuZGF0YS5kYXRhLmNoYXJhY3RlcmlzdGljcy52YWx1ZXNba2V5XSA9IE51bWJlcihpbnB1dC52YWx1ZSlcbiAgICB9XG4gICAgdGhpcy5jaGVja1RvdGFsKClcbiAgfVxuXG4gIGFzeW5jIGRlY3JlYXNlQ2hhcmFjdGVyaXN0aWMgKGtleSkge1xuICAgIGNvbnN0IGxpID0gdGhpcy5fZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKGBsaS5pdGVtW2RhdGEta2V5PSR7a2V5fV1gKVxuICAgIGNvbnN0IGlucHV0ID0gbGk/LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JylcbiAgICBpZiAoaW5wdXQgJiYgTnVtYmVyKGlucHV0LnZhbHVlKSA+IDApIHtcbiAgICAgIGlucHV0LnZhbHVlID0gTnVtYmVyKGlucHV0LnZhbHVlKSAtIDFcbiAgICAgIHRoaXMuZGF0YS5kYXRhLmNoYXJhY3RlcmlzdGljcy52YWx1ZXNba2V5XSA9IE51bWJlcihpbnB1dC52YWx1ZSlcbiAgICB9XG4gICAgdGhpcy5jaGVja1RvdGFsKClcbiAgfVxuXG4gIGFzeW5jIHJlc2V0Q2hhcmFjdGVyaXN0aWMgKGtleSkge1xuICAgIGNvbnN0IGxpID0gdGhpcy5fZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKGBsaS5pdGVtW2RhdGEta2V5PSR7a2V5fV1gKVxuICAgIGNvbnN0IGlucHV0ID0gbGk/LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JylcbiAgICBpZiAoaW5wdXQpIHtcbiAgICAgIGlucHV0LnZhbHVlID0gbnVsbFxuICAgICAgdGhpcy5kYXRhLmRhdGEuY2hhcmFjdGVyaXN0aWNzLnZhbHVlc1trZXldID0gMFxuICAgIH1cbiAgICB0aGlzLmNoZWNrVG90YWwoKVxuICB9XG5cbiAgYXN5bmMgX29uQ2hhbmdlSW5wdXQgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGlucHV0ID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGNvbnN0IHZhbHVlID0gTnVtYmVyKGlucHV0LnZhbHVlKVxuICAgIGlmICghaXNOYU4odmFsdWUpKSB7XG4gICAgICB0aGlzLmRhdGEuZGF0YS5jaGFyYWN0ZXJpc3RpY3MudmFsdWVzW2lucHV0Lm5hbWVdID0gdmFsdWVcbiAgICB9XG5cbiAgICB0aGlzLmNoZWNrVG90YWwoKVxuICB9XG5cbiAgY2hlY2tUb3RhbCAoKSB7XG4gICAgdGhpcy5kYXRhLmRhdGEuY2hhcmFjdGVyaXN0aWNzLnBvaW50cy50b3RhbCA9IDBcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhcbiAgICAgIHRoaXMuZGF0YS5kYXRhLmNoYXJhY3RlcmlzdGljcy52YWx1ZXNcbiAgICApKSB7XG4gICAgICBpZiAoa2V5ICE9PSAnbHVjaycpIHtcbiAgICAgICAgdGhpcy5kYXRhLmRhdGEuY2hhcmFjdGVyaXN0aWNzLnBvaW50cy50b3RhbCArPSB2YWx1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHZhbGlkYXRpb24gPSB0aGlzLl9lbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJy5wb2ludHMnKVxuICAgIGlmICh0aGlzLmRhdGEuZGF0YS5jaGFyYWN0ZXJpc3RpY3MucG9pbnRzLmVuYWJsZWQpIHtcbiAgICAgIGlmIChcbiAgICAgICAgTnVtYmVyKHRoaXMuZGF0YS5kYXRhLmNoYXJhY3RlcmlzdGljcy5wb2ludHMudG90YWwpICE9PVxuICAgICAgICBOdW1iZXIodGhpcy5kYXRhLmRhdGEuY2hhcmFjdGVyaXN0aWNzLnBvaW50cy52YWx1ZSlcbiAgICAgICkge1xuICAgICAgICB2YWxpZGF0aW9uLmNsYXNzTGlzdC5hZGQoJ3dhcm5pbmcnKVxuICAgICAgICB0aGlzLmRhdGEuZGF0YS52YWxpZGF0ZSA9IGZhbHNlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWxpZGF0aW9uLmNsYXNzTGlzdC5yZW1vdmUoJ3dhcm5pbmcnKVxuICAgICAgICB0aGlzLmRhdGEuZGF0YS52YWxpZGF0ZSA9IHRydWVcbiAgICAgIH1cbiAgICAgIGNvbnN0IHZhbHVlID0gdmFsaWRhdGlvbi5xdWVyeVNlbGVjdG9yKCcudmFsdWUnKVxuICAgICAgdmFsdWUuaW5uZXJUZXh0ID0gdGhpcy5kYXRhLmRhdGEuY2hhcmFjdGVyaXN0aWNzLnBvaW50cy52YWx1ZVxuICAgIH1cblxuICAgIGNvbnN0IHRvdGFsID0gdmFsaWRhdGlvbi5xdWVyeVNlbGVjdG9yKCcudG90YWwnKVxuICAgIHRvdGFsLmlubmVyVGV4dCA9IHRoaXMuZGF0YS5kYXRhLmNoYXJhY3RlcmlzdGljcy5wb2ludHMudG90YWxcblxuICAgIGlmICh0aGlzLmRhdGEuZGF0YS5jaGFyYWN0ZXJpc3RpY3Mucm9sbHMuZW5hYmxlZCkge1xuICAgICAgdGhpcy5kYXRhLmRhdGEudmFsaWRhdGUgPSBPYmplY3QudmFsdWVzKHRoaXMuZGF0YS5kYXRhLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMpLmZpbHRlcih2YWwgPT4gaXNOYU4ocGFyc2VJbnQodmFsKSkpLmxlbmd0aCA9PT0gMFxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9vblN1Ym1pdCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY3JlYXRlIChkYXRhKSB7XG4gICAgY29uc3Qgcm9sbGVkID0ge31cbiAgICBkYXRhLmNoYXJhY3RlcmlzdGljcy5wb2ludHMudG90YWwgPSAwXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZGF0YS5jaGFyYWN0ZXJpc3RpY3MudmFsdWVzKSkge1xuICAgICAgaWYgKGtleSAhPT0gJ2x1Y2snKSB7XG4gICAgICAgIGRhdGEuY2hhcmFjdGVyaXN0aWNzLnBvaW50cy50b3RhbCArPSB2YWx1ZSB8fCAwXG4gICAgICB9XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlKSAmJiB2YWx1ZSA+IDApIHtcbiAgICAgICAgcm9sbGVkW2tleV0gPSB0cnVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuY2hhcmFjdGVyaXN0aWNzLnBvaW50cy5lbmFibGVkKSB7XG4gICAgICBpZiAoXG4gICAgICAgIE51bWJlcihkYXRhLmNoYXJhY3RlcmlzdGljcy5wb2ludHMudG90YWwpICE9PVxuICAgICAgICBOdW1iZXIoZGF0YS5jaGFyYWN0ZXJpc3RpY3MucG9pbnRzLnZhbHVlKVxuICAgICAgKSB7XG4gICAgICAgIGRhdGEucG9pbnRzV2FybmluZyA9IHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUoXG4gICAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hcHBzL2NoYXItcm9sbC5odG1sJyxcbiAgICAgIGRhdGFcbiAgICApXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgY29uc3QgZGxnID0gbmV3IENoYXJhY1JvbGxEaWFsb2coXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogZGF0YS50aXRsZSxcbiAgICAgICAgICBjb250ZW50OiBodG1sLFxuICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgcm9sbGVkLFxuICAgICAgICAgIGJ1dHRvbnM6IHt9LFxuICAgICAgICAgIGNsb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoZGF0YS52YWxpZGF0ZSkgcmV0dXJuIHJlc29sdmUodHJ1ZSlcbiAgICAgICAgICAgIGVsc2UgcmV0dXJuIHJlc29sdmUoZmFsc2UpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7IGNsYXNzZXM6IFsnY29jNycsICdkaWFsb2cnLCAnY2hhci1zZWxlY3QnXSB9XG4gICAgICApXG4gICAgICBkbGcucmVuZGVyKHRydWUpXG4gICAgfSlcbiAgfVxufVxuIiwiLyogZ2xvYmFsIERpYWxvZywgRm9ybURhdGEsIGdhbWUsIHJlbmRlclRlbXBsYXRlICovXG5leHBvcnQgY2xhc3MgU2tpbGxTcGVjU2VsZWN0RGlhbG9nIHtcbiAgc3RhdGljIGFzeW5jIGNyZWF0ZSAoXG4gICAgc2tpbGxzLFxuICAgIHNwZWNpYWxpemF0aW9uTmFtZSxcbiAgICBiYXNlVmFsdWUgPSBudWxsLFxuICAgIG5hbWUgPSBudWxsXG4gICkge1xuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZShcbiAgICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvc2tpbGwtc3BlYy1zZWxlY3QuaHRtbCcsXG4gICAgICB7XG4gICAgICAgIGhhc1NraWxsczogc2tpbGxzLmxlbmd0aCA+IDAsXG4gICAgICAgIHNraWxscyxcbiAgICAgICAgYmFzZTogYmFzZVZhbHVlLFxuICAgICAgICBuYW1lXG4gICAgICB9XG4gICAgKVxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIGxldCBmb3JtRGF0YSA9IG51bGxcbiAgICAgIGNvbnN0IGRsZyA9IG5ldyBEaWFsb2coe1xuICAgICAgICB0aXRsZTogbmFtZVxuICAgICAgICAgID8gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Ta2lsbFNlbGVjdEJhc2UnLCB7IG5hbWUgfSlcbiAgICAgICAgICA6IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuU2tpbGxTcGVjU2VsZWN0VGl0bGUnLCB7XG4gICAgICAgICAgICBzcGVjaWFsaXphdGlvbjogc3BlY2lhbGl6YXRpb25OYW1lXG4gICAgICAgICAgfSksXG4gICAgICAgIGNvbnRlbnQ6IGh0bWwsXG4gICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICB2YWxpZGF0ZToge1xuICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5WYWxpZGF0ZScpLFxuICAgICAgICAgICAgY2FsbGJhY2s6IGh0bWwgPT4ge1xuICAgICAgICAgICAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShcbiAgICAgICAgICAgICAgICBodG1sWzBdLnF1ZXJ5U2VsZWN0b3IoJyNza2lsbC1zZWxlY3QtZm9ybScpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZm9ybURhdGEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0OiAndmFsaWRhdGUnLFxuICAgICAgICBjbG9zZTogKCkgPT4ge1xuICAgICAgICAgIHJldHVybiByZXNvbHZlKGZhbHNlKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgZGxnLnJlbmRlcih0cnVlKVxuICAgIH0pXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCAkLCBGb3JtQXBwbGljYXRpb24sIGZvdW5kcnksIGdhbWUgKi9cblxuZXhwb3J0IGNsYXNzIFNraWxsU3BlY2lhbGl6YXRpb25TZWxlY3REaWFsb2cgZXh0ZW5kcyBGb3JtQXBwbGljYXRpb24ge1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zICgpIHtcbiAgICByZXR1cm4gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgY2xhc3NlczogWydjb2M3JywgJ3NraWxsLW5hbWUtZGlhbG9nJ10sXG4gICAgICB0aXRsZTogJycsXG4gICAgICB0ZW1wbGF0ZTogJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYXBwcy9za2lsbC1zcGVjaWFsaXphdGlvbi1zZWxlY3QuaGJzJyxcbiAgICAgIHdpZHRoOiA0MDAsXG4gICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgIGNsb3NlT25TdWJtaXQ6IGZhbHNlXG4gICAgfSlcbiAgfVxuXG4gIGdldCB0aXRsZSAoKSB7XG4gICAgcmV0dXJuIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuU2tpbGxTcGVjU2VsZWN0VGl0bGUnLCB7XG4gICAgICBzcGVjaWFsaXphdGlvbjogdGhpcy5vYmplY3Quc3BlY2lhbGl6YXRpb25OYW1lXG4gICAgfSlcbiAgfVxuXG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcblxuICAgIGh0bWwuZmluZCgnLnN1Ym1pdC1idXR0b24nKS5jbGljayh0aGlzLl9vbkNsaWNrU3VibWl0LmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCdbbmFtZT1leGlzdGluZy1za2lsbF0nKS5jaGFuZ2UodGhpcy5fb25TZWxlY3RDaGFuZ2UuYmluZCh0aGlzKSlcbiAgfVxuXG4gIGFzeW5jIF9vblNlbGVjdENoYW5nZSAoZXZlbnQpIHtcbiAgICB0aGlzLm9iamVjdC5zZWxlY3RlZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWVcbiAgICB0aGlzLnJlbmRlcih0cnVlKVxuICB9XG5cbiAgYXN5bmMgX29uQ2xpY2tTdWJtaXQgKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMub2JqZWN0LnNlbGVjdGVkID09PSAnJykge1xuICAgICAgY29uc3Qgb2JqID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5jbG9zZXN0KCdmb3JtJylcbiAgICAgIHRoaXMub2JqZWN0Lm5hbWUgPSAob2JqLmZpbmQoJ2lucHV0W25hbWU9bmV3LXNraWxsLW5hbWVdJykudmFsKCkgPz8gJycpXG4gICAgICB0aGlzLm9iamVjdC5iYXNlVmFsdWUgPSAob2JqLmZpbmQoJ2lucHV0W25hbWU9YmFzZS12YWx1ZV0nKS52YWwoKSA/PyAnJylcbiAgICB9XG4gICAgaWYgKHRoaXMub2JqZWN0LnNlbGVjdGVkID09PSAnJyAmJiB0aGlzLm9iamVjdC5uYW1lID09PSAnJykge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIHRoaXMub2JqZWN0LnJlc29sdmUoe1xuICAgICAgc2VsZWN0ZWQ6IHRoaXMub2JqZWN0LnNlbGVjdGVkLFxuICAgICAgbmFtZTogdGhpcy5vYmplY3QubmFtZSxcbiAgICAgIGJhc2VWYWx1ZTogdGhpcy5vYmplY3QuYmFzZVZhbHVlXG4gICAgfSlcbiAgICB0aGlzLmNsb3NlKClcbiAgfVxuXG4gIGFzeW5jIF91cGRhdGVPYmplY3QgKGV2ZW50LCBmb3JtRGF0YSkge1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIGNyZWF0ZSAoeyBza2lsbHMgPSBbXSwgYWxsb3dDdXN0b20gPSBmYWxzZSwgZml4ZWRCYXNlVmFsdWUgPSBmYWxzZSwgc3BlY2lhbGl6YXRpb25OYW1lID0gJycsIGxhYmVsID0gJycsIGJhc2VWYWx1ZSA9IG51bGwgfSA9IHt9KSB7XG4gICAgY29uc3Qgc2VsZWN0ID0gW11cbiAgICBmb3IgKGNvbnN0IHNraWxsIG9mIHNraWxscykge1xuICAgICAgc2VsZWN0LnB1c2goe1xuICAgICAgICBpZDogc2tpbGwuaWQsXG4gICAgICAgIG5hbWU6IHNraWxsLm5hbWUsXG4gICAgICAgIGJhc2U6IHNraWxsLnN5c3RlbS5iYXNlXG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBuZXcgU2tpbGxTcGVjaWFsaXphdGlvblNlbGVjdERpYWxvZyh7XG4gICAgICAgIHNwZWNpYWxpemF0aW9uTmFtZSxcbiAgICAgICAgYWxsb3dDdXN0b20sXG4gICAgICAgIGZpeGVkQmFzZVZhbHVlLFxuICAgICAgICBhbGxvd1NlbGVjdDogc2tpbGxzLmxlbmd0aCA+IDAsXG4gICAgICAgIHNraWxsczogc2VsZWN0LFxuICAgICAgICBzZWxlY3RlZDogJycsXG4gICAgICAgIG5hbWU6ICcnLFxuICAgICAgICBsYWJlbCxcbiAgICAgICAgYmFzZVZhbHVlLFxuICAgICAgICByZXNvbHZlXG4gICAgICB9LCB7fSkucmVuZGVyKHRydWUpXG4gICAgfSlcbiAgfVxufVxuIiwiLyogZ2xvYmFsIERpYWxvZywgRm9ybURhdGEsIGdhbWUsIHJlbmRlclRlbXBsYXRlICovXG5leHBvcnQgY2xhc3MgU2tpbGxWYWx1ZURpYWxvZyB7XG4gIHN0YXRpYyBhc3luYyBjcmVhdGUgKG5hbWUgPSBudWxsLCBiYXNlVmFsdWUgPSBudWxsKSB7XG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKFxuICAgICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYXBwcy9za2lsbC12YWx1ZS5odG1sJyxcbiAgICAgIHsgYmFzZTogYmFzZVZhbHVlLCBuYW1lIH1cbiAgICApXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgbGV0IGZvcm1EYXRhID0gbnVsbFxuICAgICAgY29uc3QgZGxnID0gbmV3IERpYWxvZyh7XG4gICAgICAgIHRpdGxlOiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlNraWxsVmFsdWUnLCB7IG5hbWUgfSksXG4gICAgICAgIGNvbnRlbnQ6IGh0bWwsXG4gICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICB2YWxpZGF0ZToge1xuICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5WYWxpZGF0ZScpLFxuICAgICAgICAgICAgY2FsbGJhY2s6IGh0bWwgPT4ge1xuICAgICAgICAgICAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShcbiAgICAgICAgICAgICAgICBodG1sWzBdLnF1ZXJ5U2VsZWN0b3IoJyNza2lsbC1zZWxlY3QtZm9ybScpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZm9ybURhdGEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0OiAndmFsaWRhdGUnLFxuICAgICAgICBjbG9zZTogKCkgPT4ge1xuICAgICAgICAgIHJldHVybiByZXNvbHZlKGZhbHNlKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgZGxnLnJlbmRlcih0cnVlKVxuICAgIH0pXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBDaGF0TWVzc2FnZSwgZ2FtZSwgcmVuZGVyVGVtcGxhdGUsIHVpICovXG5pbXBvcnQgeyBDb0M3Q2hlY2sgfSBmcm9tICcuLi8uLi9jaGVjay5qcydcbmltcG9ydCB7IGNoYXRIZWxwZXIgfSBmcm9tICcuLi9oZWxwZXIuanMnXG5pbXBvcnQgeyBDb0M3TWVsZWVJbml0aWF0b3IgfSBmcm9tICcuL21lbGVlLWluaXRpYXRvci5qcydcbmltcG9ydCB7IENvQzdNZWxlZVRhcmdldCB9IGZyb20gJy4vbWVsZWUtdGFyZ2V0LmpzJ1xuXG5leHBvcnQgY2xhc3MgQ29DN01lbGVlUmVzb2x0aW9uIHtcbiAgY29uc3RydWN0b3IgKFxuICAgIGluaXRpYXRvck1lc3NhZ2UgPSBudWxsLFxuICAgIHRhcmdldE1lc3NhZ2UgPSBudWxsLFxuICAgIG1lc3NhZ2VJZCA9IG51bGxcbiAgKSB7XG4gICAgdGhpcy5pbml0aWF0b3JNZXNzYWdlID0gaW5pdGlhdG9yTWVzc2FnZVxuICAgIHRoaXMudGFyZ2V0TWVzc2FnZSA9IHRhcmdldE1lc3NhZ2VcbiAgICB0aGlzLm1lc3NhZ2VJZCA9IG1lc3NhZ2VJZFxuICB9XG5cbiAgYXN5bmMgcHJlQ3JlYXRlTWVzc2FnZSAoKSB7XG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRoaXMudGVtcGxhdGUsIHRoaXMpXG5cbiAgICAvLyBjb25zdCBzcGVha2VyID0gQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlcih7YWN0b3I6IHRoaXMuYWN0b3J9KTtcbiAgICAvLyBpZiggdGhpcy5hY3Rvci5pc1Rva2VuKSBzcGVha2VyLmFsaWFzID0gdGhpcy5hY3Rvci50b2tlbi5uYW1lO1xuXG4gICAgLy8gY29uc3QgdXNlciA9IHRoaXMuYWN0b3IudXNlciA/IHRoaXMuYWN0b3IudXNlciA6IGdhbWUudXNlcjtcblxuICAgIGNvbnN0IGNoYXREYXRhID0ge1xuICAgICAgdXNlcjogZ2FtZS51c2VyLmlkLFxuICAgICAgY29udGVudDogaHRtbFxuICAgIH1cblxuICAgIC8vIEFkZCBpbWFnZSB0byBjYXJkLlxuICAgIC8vIGRhdGEuZmxhZ3MgPSB7XG4gICAgLy8gICBpbWc6IHRoaXMuYWN0b3IuaXNUb2tlbiA/IHRoaXMuYWN0b3IudG9rZW4uZGF0YS5pbWc6IHRoaXMuYWN0b3IuaW1nXG4gICAgLy8gfTtcblxuICAgIGNvbnN0IHJvbGxNb2RlID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ2NvcmUnLCAncm9sbE1vZGUnKVxuICAgIGlmIChbJ2dtcm9sbCcsICdibGluZHJvbGwnXS5pbmNsdWRlcyhyb2xsTW9kZSkpIHtcbiAgICAgIGNoYXREYXRhLndoaXNwZXIgPSBDaGF0TWVzc2FnZS5nZXRXaGlzcGVyUmVjaXBpZW50cygnR00nKVxuICAgIH1cbiAgICAvLyBpZiAoIHJvbGxNb2RlID09PSAnYmxpbmRyb2xsJyApIGNoYXREYXRhWydibGluZCddID0gdHJ1ZTtcbiAgICBjaGF0RGF0YS5ibGluZCA9IGZhbHNlXG5cbiAgICBjb25zdCBjaGF0TWVzc2FnZSA9IGF3YWl0IENoYXRNZXNzYWdlLmNyZWF0ZShjaGF0RGF0YSlcbiAgICB0aGlzLm1lc3NhZ2VJZCA9IGNoYXRNZXNzYWdlLmlkXG4gICAgcmV0dXJuIGNoYXRNZXNzYWdlXG4gIH1cblxuICBnZXQgZGlzcGxheUFjdG9yT25DYXJkICgpIHtcbiAgICByZXR1cm4gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnZGlzcGxheUFjdG9yT25DYXJkJylcbiAgfVxuXG4gIGdldCB0YXJnZXQgKCkge1xuICAgIGlmICh0aGlzLnRhcmdldE1lc3NhZ2UpIHtcbiAgICAgIHJldHVybiBDb0M3TWVsZWVUYXJnZXQuZ2V0RnJvbU1lc3NhZ2VJZCh0aGlzLnRhcmdldE1lc3NhZ2UpXG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBnZXQgdGFyZ2V0VG9rZW4gKCkge1xuICAgIGlmICh0aGlzLnRhcmdldCkgcmV0dXJuIGNoYXRIZWxwZXIuZ2V0VG9rZW5Gcm9tS2V5KHRoaXMudGFyZ2V0LmFjdG9yS2V5KVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBnZXQgaW5pdGlhdG9yICgpIHtcbiAgICBpZiAodGhpcy5pbml0aWF0b3JNZXNzYWdlKSB7XG4gICAgICByZXR1cm4gQ29DN01lbGVlSW5pdGlhdG9yLmdldEZyb21NZXNzYWdlSWQodGhpcy5pbml0aWF0b3JNZXNzYWdlKVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgZ2V0IGluaXRpYXRvclRva2VuICgpIHtcbiAgICBpZiAodGhpcy5pbml0aWF0b3IpIHtcbiAgICAgIHJldHVybiBjaGF0SGVscGVyLmdldFRva2VuRnJvbUtleSh0aGlzLmluaXRpYXRvci5hY3RvcktleSlcbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGFzeW5jIHJlc29sdmUgKCkge1xuICAgIGlmICh0aGlzLnRhcmdldCkge1xuICAgICAgc3dpdGNoICh0aGlzLnRhcmdldC5hY3Rpb24pIHtcbiAgICAgICAgY2FzZSAnbm9SZXNwb25zZSc6XG4gICAgICAgICAgaWYgKHRoaXMuaW5pdGlhdG9yLnJvbGwuc3VjY2Vzc0xldmVsID4gMCkge1xuICAgICAgICAgICAgdGhpcy5yZXN1bHRTdHJpbmcgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lldpbm5lclJvbGxEYW1hZ2UnLCB7XG4gICAgICAgICAgICAgIG5hbWU6IHRoaXMuaW5pdGlhdG9yLm5hbWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0aGlzLmFjdGlvbiA9ICdyb2xsLW1lbGVlLWRhbWFnZSdcbiAgICAgICAgICAgIHRoaXMucm9sbERhbWFnZSA9IHRydWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZXN1bHRTdHJpbmcgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkluaXRpYXRvck1pc3NlZCcsIHtcbiAgICAgICAgICAgICAgbmFtZTogdGhpcy5pbml0aWF0b3IubmFtZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHRoaXMud2lubmVyID0gdGhpcy5pbml0aWF0b3JcbiAgICAgICAgICAgIHRoaXMucm9sbERhbWFnZSA9IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMud2lubmVyID0gdGhpcy5pbml0aWF0b3JcbiAgICAgICAgICB0aGlzLndpbm5lckltZyA9IHRoaXMuaW5pdGlhdG9yLndlYXBvbi5pbWdcbiAgICAgICAgICB0aGlzLndpbm5lclRpdGxlID0gdGhpcy5pbml0aWF0b3Iud2VhcG9uLm5hbWVcbiAgICAgICAgICB0aGlzLmxvb3NlciA9IHRoaXMudGFyZ2V0XG4gICAgICAgICAgYnJlYWtcblxuICAgICAgICBjYXNlICdkb2RnZSc6XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5pbml0aWF0b3Iucm9sbC5zdWNjZXNzTGV2ZWwgPD0gMCAmJlxuICAgICAgICAgICAgdGhpcy50YXJnZXQucm9sbC5zdWNjZXNzTGV2ZWwgPD0gMFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5yZXN1bHRTdHJpbmcgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTm9XaW5uZXInKVxuICAgICAgICAgICAgdGhpcy53aW5uZXIgPSBudWxsXG4gICAgICAgICAgICB0aGlzLnJvbGxEYW1hZ2UgPSBmYWxzZVxuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICB0aGlzLmluaXRpYXRvci5yb2xsLnN1Y2Nlc3NMZXZlbCA+IHRoaXMudGFyZ2V0LnJvbGwuc3VjY2Vzc0xldmVsXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VsdFN0cmluZyA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuV2lubmVyUm9sbERhbWFnZScsIHtcbiAgICAgICAgICAgICAgbmFtZTogdGhpcy5pbml0aWF0b3IubmFtZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHRoaXMud2lubmVyID0gdGhpcy5pbml0aWF0b3JcbiAgICAgICAgICAgIHRoaXMud2lubmVySW1nID0gdGhpcy5pbml0aWF0b3Iud2VhcG9uLmltZ1xuICAgICAgICAgICAgdGhpcy53aW5uZXJUaXRsZSA9IHRoaXMuaW5pdGlhdG9yLndlYXBvbi5uYW1lXG4gICAgICAgICAgICB0aGlzLmxvb3NlciA9IHRoaXMudGFyZ2V0XG4gICAgICAgICAgICB0aGlzLmFjdGlvbiA9ICdyb2xsLW1lbGVlLWRhbWFnZSdcbiAgICAgICAgICAgIHRoaXMucm9sbERhbWFnZSA9IHRydWVcbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgdGhpcy5pbml0aWF0b3Iucm9sbC5zdWNjZXNzTGV2ZWwgPD0gdGhpcy50YXJnZXQucm9sbC5zdWNjZXNzTGV2ZWxcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0U3RyaW5nID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Eb2RnZVN1Y2Nlc3MnLCB7XG4gICAgICAgICAgICAgIG5hbWU6IHRoaXMudGFyZ2V0Lm5hbWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0aGlzLndpbm5lciA9IHRoaXMudGFyZ2V0XG4gICAgICAgICAgICB0aGlzLmxvb3NlciA9IHRoaXMuaW5pdGlhdG9yXG4gICAgICAgICAgICB0aGlzLndpbm5lckltZyA9IHRoaXMudGFyZ2V0LnNraWxsLmltZ1xuICAgICAgICAgICAgdGhpcy53aW5uZXJUaXRsZSA9IHRoaXMudGFyZ2V0LnNraWxsLm5hbWVcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uID0gJ2RvZGdlJ1xuICAgICAgICAgICAgdGhpcy5yb2xsRGFtYWdlID0gZmFsc2VcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGNhc2UgJ2ZpZ2h0QmFjayc6XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5pbml0aWF0b3Iucm9sbC5zdWNjZXNzTGV2ZWwgPD0gMCAmJlxuICAgICAgICAgICAgdGhpcy50YXJnZXQucm9sbC5zdWNjZXNzTGV2ZWwgPD0gMFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5yZXN1bHRTdHJpbmcgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTm9XaW5uZXInKVxuICAgICAgICAgICAgdGhpcy53aW5uZXIgPSBudWxsXG4gICAgICAgICAgICB0aGlzLnJvbGxEYW1hZ2UgPSBmYWxzZVxuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICB0aGlzLmluaXRpYXRvci5yb2xsLnN1Y2Nlc3NMZXZlbCA+PSB0aGlzLnRhcmdldC5yb2xsLnN1Y2Nlc3NMZXZlbFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5yZXN1bHRTdHJpbmcgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lldpbm5lclJvbGxEYW1hZ2UnLCB7XG4gICAgICAgICAgICAgIG5hbWU6IHRoaXMuaW5pdGlhdG9yLm5hbWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0aGlzLndpbm5lciA9IHRoaXMuaW5pdGlhdG9yXG4gICAgICAgICAgICB0aGlzLndpbm5lckltZyA9IHRoaXMuaW5pdGlhdG9yLndlYXBvbi5pbWdcbiAgICAgICAgICAgIHRoaXMud2lubmVyVGl0bGUgPSB0aGlzLmluaXRpYXRvci53ZWFwb24ubmFtZVxuICAgICAgICAgICAgdGhpcy5sb29zZXIgPSB0aGlzLnRhcmdldFxuICAgICAgICAgICAgdGhpcy5yb2xsRGFtYWdlID0gdHJ1ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICB0aGlzLmluaXRpYXRvci5yb2xsLnN1Y2Nlc3NMZXZlbCA8PSB0aGlzLnRhcmdldC5yb2xsLnN1Y2Nlc3NMZXZlbFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgLy8gVE9ETyB2ZXJpZmllciBsYSBjb25kaXRpb24gPD0gdnMgPFxuICAgICAgICAgICAgdGhpcy5yZXN1bHRTdHJpbmcgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lldpbm5lclJvbGxEYW1hZ2UnLCB7XG4gICAgICAgICAgICAgIG5hbWU6IHRoaXMudGFyZ2V0Lm5hbWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0aGlzLndpbm5lciA9IHRoaXMudGFyZ2V0XG4gICAgICAgICAgICB0aGlzLndpbm5lckltZyA9IHRoaXMudGFyZ2V0LndlYXBvbi5pbWdcbiAgICAgICAgICAgIHRoaXMud2lubmVyVGl0bGUgPSB0aGlzLnRhcmdldC53ZWFwb24ubmFtZVxuICAgICAgICAgICAgdGhpcy5sb29zZXIgPSB0aGlzLmluaXRpYXRvclxuICAgICAgICAgICAgdGhpcy5yb2xsRGFtYWdlID0gdHJ1ZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgY2FzZSAnbWFuZXV2ZXInOlxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhdG9yLnJvbGwuc3VjY2Vzc0xldmVsIDw9IDAgJiZcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0LnJvbGwuc3VjY2Vzc0xldmVsIDw9IDBcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0U3RyaW5nID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk5vV2lubmVyJylcbiAgICAgICAgICAgIHRoaXMud2lubmVyID0gbnVsbFxuICAgICAgICAgICAgdGhpcy5yb2xsRGFtYWdlID0gZmFsc2VcbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgdGhpcy5pbml0aWF0b3Iucm9sbC5zdWNjZXNzTGV2ZWwgPj0gdGhpcy50YXJnZXQucm9sbC5zdWNjZXNzTGV2ZWxcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0U3RyaW5nID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5XaW5uZXJSb2xsRGFtYWdlJywge1xuICAgICAgICAgICAgICBuYW1lOiB0aGlzLmluaXRpYXRvci5uYW1lXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgdGhpcy53aW5uZXIgPSB0aGlzLmluaXRpYXRvclxuICAgICAgICAgICAgdGhpcy53aW5uZXJJbWcgPSB0aGlzLmluaXRpYXRvci53ZWFwb24uaW1nXG4gICAgICAgICAgICB0aGlzLndpbm5lclRpdGxlID0gdGhpcy5pbml0aWF0b3Iud2VhcG9uLm5hbWVcbiAgICAgICAgICAgIHRoaXMubG9vc2VyID0gdGhpcy50YXJnZXRcbiAgICAgICAgICAgIHRoaXMucm9sbERhbWFnZSA9IHRydWVcbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgdGhpcy5pbml0aWF0b3Iucm9sbC5zdWNjZXNzTGV2ZWwgPD0gdGhpcy50YXJnZXQucm9sbC5zdWNjZXNzTGV2ZWxcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0U3RyaW5nID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5NYW5ldXZlclN1Y2Nlc3MnLCB7XG4gICAgICAgICAgICAgIG5hbWU6IHRoaXMudGFyZ2V0Lm5hbWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0aGlzLndpbm5lciA9IHRoaXMudGFyZ2V0XG4gICAgICAgICAgICB0aGlzLndpbm5lckltZyA9IHRoaXMudGFyZ2V0LnNraWxsLmRhdGEuaW1nXG4gICAgICAgICAgICB0aGlzLndpbm5lclRpdGxlID0gdGhpcy50YXJnZXQuc2tpbGwubmFtZVxuICAgICAgICAgICAgdGhpcy5sb29zZXIgPSB0aGlzLmluaXRpYXRvclxuICAgICAgICAgICAgdGhpcy5yb2xsRGFtYWdlID0gZmFsc2VcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuaW5pdGlhdG9yLnJvbGwuc3VjY2Vzc0xldmVsID4gMCkge1xuICAgICAgdGhpcy5yZXN1bHRTdHJpbmcgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lldpbm5lclJvbGxEYW1hZ2UnLCB7XG4gICAgICAgIG5hbWU6IHRoaXMuaW5pdGlhdG9yLm5hbWVcbiAgICAgIH0pXG4gICAgICB0aGlzLndpbm5lciA9IHRoaXMuaW5pdGlhdG9yXG4gICAgICB0aGlzLnJvbGxEYW1hZ2UgPSB0cnVlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVzdWx0U3RyaW5nID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Jbml0aWF0b3JNaXNzZWQnLCB7XG4gICAgICAgIG5hbWU6IHRoaXMuaW5pdGlhdG9yLm5hbWVcbiAgICAgIH0pXG4gICAgICB0aGlzLndpbm5lciA9IHRoaXMuaW5pdGlhdG9yXG4gICAgICB0aGlzLnJvbGxEYW1hZ2UgPSBmYWxzZVxuICAgIH1cblxuICAgIGlmICh0aGlzLndpbm5lcikge1xuICAgICAgaWYgKHRoaXMud2lubmVyLnJvbGwuc3VjY2Vzc0xldmVsID49IENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZXh0cmVtZSkge1xuICAgICAgICB0aGlzLndpbm5lci5yb2xsLmNyaXRpY2FsRGFtYWdlID0gdHJ1ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53aW5uZXIucm9sbC5jcml0aWNhbERhbWFnZSA9IGZhbHNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5yZXNvbHZlZCA9IHRydWVcbiAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUodGhpcy50ZW1wbGF0ZSwgdGhpcylcbiAgICBpZiAodGhpcy5tZXNzYWdlSWQpIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBnYW1lLm1lc3NhZ2VzLmdldCh0aGlzLm1lc3NhZ2VJZClcbiAgICAgIGNvbnN0IHNwZWFrZXJEYXRhID0ge31cbiAgICAgIGlmICh0aGlzLndpbm5lcikge1xuICAgICAgICBpZiAodGhpcy53aW5uZXIudG9rZW4pIHNwZWFrZXJEYXRhLnRva2VuID0gdGhpcy53aW5uZXIudG9rZW4uZG9jdW1tZW50XG4gICAgICAgIGlmICh0aGlzLndpbm5lci5hY3Rvcikgc3BlYWtlckRhdGEuYWN0b3IgPSB0aGlzLndpbm5lci5hY3RvclxuICAgICAgfVxuICAgICAgY29uc3Qgc3BlYWtlciA9IHRoaXMud2lubmVyID8gQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlcihzcGVha2VyRGF0YSkgOiBudWxsXG4gICAgICBjb25zdCB1c2VyID1cbiAgICAgICAgdGhpcy53aW5uZXIgJiYgdGhpcy53aW5uZXIuYWN0b3IudXNlclxuICAgICAgICAgID8gdGhpcy53aW5uZXIuYWN0b3IudXNlclxuICAgICAgICAgIDogZ2FtZS51c2VyXG5cbiAgICAgIGxldCBtc2dcbiAgICAgIGlmICghbWVzc2FnZSkge1xuICAgICAgICAvLyBUT0RPOiBJZiBjYXJkIGlzbid0IGZvdW5kIChjYXJkIHdhcyBkZWxldGVkIGJlZm9yZSBjb21wbGV0aW9uKSA/XG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybignUmVzb2xpdGlvbiBjYXJkIG1pc3NpbmcsIHdhcyBkZWxldGVkID8nKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGlmIChzcGVha2VyKSB7XG4gICAgICAgIG1zZyA9IGF3YWl0IG1lc3NhZ2UudXBkYXRlKHtcbiAgICAgICAgICAvLyBUT0RPOiBJZiBjYXJkIGlzbid0IGZvdW5kIChjYXJkIHdhcyBkZWxldGVkIGJlZm9yZSBjb21wbGV0aW9uKSA/XG4gICAgICAgICAgdXNlcjogdXNlci5pZCxcbiAgICAgICAgICBzcGVha2VyLFxuICAgICAgICAgIGNvbnRlbnQ6IGh0bWxcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1zZyA9IGF3YWl0IG1lc3NhZ2UudXBkYXRlKHtcbiAgICAgICAgICB1c2VyOiB1c2VyLmlkLFxuICAgICAgICAgIGNvbnRlbnQ6IGh0bWxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIGF3YWl0IHVpLmNoYXQudXBkYXRlTWVzc2FnZShtc2csIGZhbHNlKVxuICAgICAgcmV0dXJuIG1zZ1xuICAgIH1cbiAgfVxuXG4gIGdldCB0ZW1wbGF0ZSAoKSB7XG4gICAgcmV0dXJuICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2NoYXQvY29tYmF0L21lbGVlLXJlc29sdXRpb24uaHRtbCdcbiAgfVxufVxuIiwiLyogZ2xvYmFsICQsIENoYXRNZXNzYWdlLCBDT05TVCwgRGlhbG9nLCBGb3JtRGF0YSwgZ2FtZSwgcmVuZGVyVGVtcGxhdGUsIHVpICovXG5pbXBvcnQgeyBDb0M3Q2hlY2sgfSBmcm9tICcuLi8uLi9jaGVjay5qcydcbmltcG9ydCB7IGNoYXRIZWxwZXIsIENvQzdSb2xsIH0gZnJvbSAnLi4vaGVscGVyLmpzJ1xuaW1wb3J0IHsgQ29DN0NoYXQgfSBmcm9tICcuLi8uLi9jaGF0LmpzJ1xuaW1wb3J0IHsgQ2hhdENhcmRBY3RvciB9IGZyb20gJy4uL2NhcmQtYWN0b3IuanMnXG5pbXBvcnQgeyBDb0M3TWVsZWVSZXNvbHRpb24gfSBmcm9tICcuL21lbGVlLXJlc29sdXRpb24uanMnXG5pbXBvcnQgeyBDb0M3TWVsZWVJbml0aWF0b3IgfSBmcm9tICcuL21lbGVlLWluaXRpYXRvci5qcydcblxuZXhwb3J0IGNsYXNzIENvQzdNZWxlZVRhcmdldCBleHRlbmRzIENoYXRDYXJkQWN0b3Ige1xuICBjb25zdHJ1Y3RvciAoYWN0b3JLZXksIHBhcmVudE1lc3NhZ2VJZCA9IG51bGwsIGZhc3RGb3J3YXJkID0gZmFsc2UpIHtcbiAgICBzdXBlcihhY3RvcktleSwgZmFzdEZvcndhcmQpXG4gICAgdGhpcy5hY3RvcktleSA9IGFjdG9yS2V5XG4gICAgdGhpcy5pbml0aWF0b3JLZXkgPSBudWxsXG4gICAgdGhpcy5wYXJlbnRNZXNzYWdlSWQgPSBwYXJlbnRNZXNzYWdlSWRcbiAgICB0aGlzLmZhc3RGb3J3YXJkID0gZmFzdEZvcndhcmRcbiAgICB0aGlzLnJlc29sdmVkID0gZmFsc2VcblxuICAgIHRoaXMub3V0bnVtYmVyZWQgPSBmYWxzZVxuICAgIHRoaXMuc3VycHJpc2VkID0gZmFsc2VcbiAgICB0aGlzLmF1dG9TdWNjZXNzID0gZmFsc2VcbiAgICB0aGlzLmFkdmFudGFnZSA9IGZhbHNlXG4gICAgdGhpcy5kaXNhZHZhbnRhZ2UgPSBmYWxzZVxuXG4gICAgdGhpcy5tZXNzYWdlSWQgPSBudWxsXG4gICAgdGhpcy5za2lsbElkID0gbnVsbFxuICAgIHRoaXMuaXRlbUlkID0gbnVsbFxuICAgIHRoaXMuZG9kZ2luZyA9IGZhbHNlXG4gICAgdGhpcy5ub3RSZXNwb25kaW5nID0gZmFsc2VcbiAgICB0aGlzLmZpZ2h0aW5nQmFjayA9IGZhbHNlXG4gICAgdGhpcy5tYW5ldXZlcmluZyA9IGZhbHNlXG4gIH1cblxuICBnZXQgYWN0aW9uU2VsZWN0ZWQgKCkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmRvZGdpbmcgfHxcbiAgICAgIHRoaXMubm90UmVzcG9uZGluZyB8fFxuICAgICAgdGhpcy5maWdodGluZ0JhY2sgfHxcbiAgICAgIHRoaXMubWFuZXV2ZXJpbmdcbiAgICApXG4gIH1cblxuICBnZXQgYWN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5kb2RnaW5nKSByZXR1cm4gJ2RvZGdlJ1xuICAgIGlmICh0aGlzLm5vdFJlc3BvbmRpbmcpIHJldHVybiAnbm9SZXNwb25zZSdcbiAgICBpZiAodGhpcy5maWdodGluZ0JhY2spIHJldHVybiAnZmlnaHRCYWNrJ1xuICAgIGlmICh0aGlzLm1hbmV1dmVyaW5nKSByZXR1cm4gJ21hbmV1dmVyJ1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBnZXQgd2VhcG9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5hY3Rvci5pdGVtcy5nZXQodGhpcy5pdGVtSWQpXG4gIH1cblxuICBnZXQgc2tpbGwgKCkge1xuICAgIHJldHVybiB0aGlzLmFjdG9yLml0ZW1zLmdldCh0aGlzLnNraWxsSWQpXG4gIH1cblxuICBzZXQgaW5pdGlhdG9yS2V5ICh4KSB7XG4gICAgdGhpcy5faW5pdGlhdG9yS2V5ID0geFxuICAgIHRoaXMudGFyZ2V0S2V5ID0geFxuICB9XG5cbiAgZ2V0IGluaXRpYXRvcktleSAoKSB7XG4gICAgaWYgKCF0aGlzLl9pbml0aWF0b3JLZXkpIHtcbiAgICAgIGlmICghdGhpcy5faW5pdGlhdG9yICYmIHRoaXMucGFyZW50TWVzc2FnZUlkKSB7XG4gICAgICAgIHRoaXMuX2luaXRpYXRvciA9IENvQzdNZWxlZUluaXRpYXRvci5nZXRGcm9tTWVzc2FnZUlkKFxuICAgICAgICAgIHRoaXMucGFyZW50TWVzc2FnZUlkXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9pbml0aWF0b3IpIHRoaXMuX2luaXRpYXRvcktleSA9IHRoaXMuX2luaXRpYXRvci5hY3RvcktleVxuICAgIH1cbiAgICBpZiAoIXRoaXMuX2luaXRpYXRvcktleSkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgYE5vIGluaXRpYXRvciBmb3VuZCBmb3IgdGFyZ2V0IDogJHt0aGlzLmFjdG9yLm5hbWV9YFxuICAgICAgKVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2luaXRpYXRvcktleVxuICB9XG5cbiAgZ2V0IGluaXRpYXRvciAoKSB7XG4gICAgaWYgKCF0aGlzLmluaXRpYXRvcktleSkge1xuICAgICAgaWYgKHRoaXMucGFyZW50TWVzc2FnZUlkKSB7XG4gICAgICAgIHRoaXMuX2luaXRpYXRvciA9IENvQzdNZWxlZUluaXRpYXRvci5nZXRGcm9tTWVzc2FnZUlkKFxuICAgICAgICAgIHRoaXMucGFyZW50TWVzc2FnZUlkXG4gICAgICAgIClcbiAgICAgICAgdGhpcy5pbml0aWF0b3JLZXkgPSB0aGlzLl9pbml0aWF0b3IuYWN0b3JLZXlcbiAgICAgIH0gZWxzZSByZXR1cm4gbnVsbFxuICAgIH1cbiAgICByZXR1cm4gY2hhdEhlbHBlci5nZXRBY3RvckZyb21LZXkodGhpcy5pbml0aWF0b3JLZXkpIC8vIFJFRkFDVE9SSU5HICgyKVxuICB9XG5cbiAgZ2V0IG1lbGVlSW5pdGlhdG9yICgpIHtcbiAgICBpZiAoIXRoaXMuX2luaXRpYXRvcikge1xuICAgICAgdGhpcy5faW5pdGlhdG9yID0gQ29DN01lbGVlSW5pdGlhdG9yLmdldEZyb21NZXNzYWdlSWQoXG4gICAgICAgIHRoaXMucGFyZW50TWVzc2FnZUlkXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9pbml0aWF0b3JcbiAgfVxuXG4gIGdldCB0ZW1wbGF0ZSAoKSB7XG4gICAgcmV0dXJuICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2NoYXQvY29tYmF0L21lbGVlLXRhcmdldC5odG1sJ1xuICB9XG5cbiAgc3RhdGljIGdldEZyb21NZXNzYWdlSWQgKG1lc3NhZ2VJZCkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBnYW1lLm1lc3NhZ2VzLmdldChtZXNzYWdlSWQpXG4gICAgaWYgKCFtZXNzYWdlKSByZXR1cm4gbnVsbFxuICAgIGNvbnN0IGNhcmQgPSAkKG1lc3NhZ2UuY29udGVudClbMF1cblxuICAgIGNvbnN0IHRhcmdldCA9IENvQzdNZWxlZVRhcmdldC5nZXRGcm9tQ2FyZChjYXJkLCBtZXNzYWdlSWQpXG4gICAgdGFyZ2V0Lm1lc3NhZ2VJZCA9IG1lc3NhZ2VJZFxuXG4gICAgcmV0dXJuIHRhcmdldFxuICB9XG5cbiAgc3RhdGljIHVwZGF0ZUNhcmRTd2l0Y2ggKGV2ZW50LCBwdWJsaXNoVXBkYXRlID0gdHJ1ZSkge1xuICAgIGNvbnN0IGNhcmQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5tZWxlZS50YXJnZXQnKVxuICAgIGNvbnN0IGZsYWcgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuZmxhZ1xuICAgIGNvbnN0IGNhbWVsRmxhZyA9IGNoYXRIZWxwZXIuaHlwaGVuVG9DYW1lbENhc2UoZmxhZylcblxuICAgIC8vIHVwZGF0ZSBvbmx5IGZvciBsb2NhbCBwbGF5ZXJcbiAgICBpZiAoIXB1Ymxpc2hVcGRhdGUpIHtcbiAgICAgIGNhcmQuZGF0YXNldFtjYW1lbEZsYWddID0gY2FyZC5kYXRhc2V0W2NhbWVsRmxhZ10gIT09ICd0cnVlJ1xuICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKCdzd2l0Y2hlZC1vbicpXG4gICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuc2VsZWN0ZWQgPSBjYXJkLmRhdGFzZXRbY2FtZWxGbGFnXVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1cGRhdGUgY2FyZCBmb3IgYWxsIHBsYXllclxuICAgICAgY29uc3QgdGFyZ2V0ID0gQ29DN01lbGVlVGFyZ2V0LmdldEZyb21DYXJkKGNhcmQpXG4gICAgICB0YXJnZXQudG9nZ2xlRmxhZyhmbGFnKVxuICAgICAgdGFyZ2V0LnVwZGF0ZUNoYXRDYXJkKClcbiAgICB9XG4gIH1cblxuICB0b2dnbGVGbGFnIChmbGFnTmFtZSkge1xuICAgIGNvbnN0IGZsYWcgPSBmbGFnTmFtZS5pbmNsdWRlcygnLScpXG4gICAgICA/IGNoYXRIZWxwZXIuaHlwaGVuVG9DYW1lbENhc2UoZmxhZ05hbWUpXG4gICAgICA6IGZsYWdOYW1lXG4gICAgdGhpc1tmbGFnXSA9ICF0aGlzW2ZsYWddXG4gIH1cblxuICBhc3luYyBjcmVhdGVDaGF0Q2FyZCAoKSB7XG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRoaXMudGVtcGxhdGUsIHRoaXMpXG5cbiAgICBjb25zdCBzcGVha2VyRGF0YSA9IHt9XG4gICAgY29uc3QgdG9rZW4gPSBjaGF0SGVscGVyLmdldFRva2VuRnJvbUtleSh0aGlzLmFjdG9yS2V5KVxuICAgIGlmICh0b2tlbikgc3BlYWtlckRhdGEudG9rZW4gPSB0b2tlbi5kb2N1bWVudFxuICAgIGVsc2Ugc3BlYWtlckRhdGEuYWN0b3IgPSB0aGlzLmFjdG9yXG5cbiAgICBjb25zdCBzcGVha2VyID0gQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlcihzcGVha2VyRGF0YSlcbiAgICBpZiAodGhpcy5hY3Rvci5pc1Rva2VuKSBzcGVha2VyLmFsaWFzID0gdGhpcy5hY3Rvci50b2tlbi5uYW1lXG5cbiAgICBsZXQgdXNlciA9IGdhbWUudXNlclxuICAgIGlmICh0eXBlb2YgdGhpcy5hY3Rvci51c2VyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgbGV0IG93bmVycyA9IFtdXG4gICAgICBjb25zdCBnbXMgPSBnYW1lLnVzZXJzLmZpbHRlcihhID0+IGEuaXNHTSkubWFwKGEgPT4gYS5pZClcbiAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuYWN0b3Iub3duZXJzaGlwKSkge1xuICAgICAgICBpZiAodiA9PT0gQ09OU1QuRE9DVU1FTlRfT1dORVJTSElQX0xFVkVMUy5PV05FUikge1xuICAgICAgICAgIGlmIChrID09PSAnZGVmYXVsdCcpIHtcbiAgICAgICAgICAgIG93bmVycyA9IGdhbWUudXNlcnMubWFwKGEgPT4gYS5pZClcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfSBlbHNlIGlmICghZ21zLmluY2x1ZGVzKGspKSB7XG4gICAgICAgICAgICBvd25lcnMucHVzaChrKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IGNvbnRlbnQgPSAnJ1xuICAgICAgc3dpdGNoIChvd25lcnMubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAvLyBHTVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAodHlwZW9mIGdhbWUudXNlcnMuZ2V0KG93bmVyc1swXSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB1c2VyID0gZ2FtZS51c2Vycy5nZXQob3duZXJzWzBdKVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGNvbnRlbnQgPVxuICAgICAgICAgICAgJzxwPicgKyBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTWVzc2FnZVNlbGVjdFNpbmdsZVVzZXJGb3JUYXJnZXQnKVxuICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50ICsgJzxmb3JtIGlkPVwic2VsZWN0Zm9ybVwiPjxzZWxlY3QgbmFtZT1cInVzZXJcIj4nXG4gICAgICAgICAgZm9yIChjb25zdCBrIG9mIG93bmVycykge1xuICAgICAgICAgICAgY29uc3QgdXNlciA9IGdhbWUudXNlcnMuZ2V0KGspXG4gICAgICAgICAgICBpZiAodXNlcikge1xuICAgICAgICAgICAgICBjb250ZW50ID1cbiAgICAgICAgICAgICAgICBjb250ZW50ICtcbiAgICAgICAgICAgICAgICAnPG9wdGlvbiB2YWx1ZT1cIicgK1xuICAgICAgICAgICAgICAgIGsgK1xuICAgICAgICAgICAgICAgICdcIj4nICtcbiAgICAgICAgICAgICAgICB1c2VyLm5hbWUgK1xuICAgICAgICAgICAgICAgICc8L29wdGlvbj4nXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50ICsgJzwvc2VsZWN0PjwvZm9ybT48L3A+J1xuICAgICAgICAgIGF3YWl0IERpYWxvZy5wcm9tcHQoe1xuICAgICAgICAgICAgdGl0bGU6IGdhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgICAgICAgICAgJ0NvQzcuTWVzc2FnZVRpdGxlU2VsZWN0U2luZ2xlVXNlckZvclRhcmdldCdcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAgY2FsbGJhY2s6IGh0bWwgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShcbiAgICAgICAgICAgICAgICBodG1sWzBdLnF1ZXJ5U2VsZWN0b3IoJyNzZWxlY3Rmb3JtJylcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgZm9ybURhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gJ3VzZXInKSB7XG4gICAgICAgICAgICAgICAgICB1c2VyID0gZ2FtZS51c2Vycy5nZXQodmFsdWUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLmFjdG9yLnVzZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB1c2VyID0gdGhpcy5hY3Rvci51c2VyXG4gICAgfVxuXG4gICAgY29uc3QgY2hhdERhdGEgPSB7XG4gICAgICB1c2VyOiB1c2VyLmlkLFxuICAgICAgc3BlYWtlcixcbiAgICAgIGNvbnRlbnQ6IGh0bWxcbiAgICB9XG5cbiAgICBpZiAoWydnbXJvbGwnLCAnYmxpbmRyb2xsJ10uaW5jbHVkZXModGhpcy5yb2xsTW9kZSkpIHtcbiAgICAgIGNoYXREYXRhLndoaXNwZXIgPSBDaGF0TWVzc2FnZS5nZXRXaGlzcGVyUmVjaXBpZW50cygnR00nKVxuICAgIH1cbiAgICAvLyBpZiAoIHRoaXMuaXNCbGluZCApIGNoYXREYXRhWydibGluZCddID0gdHJ1ZTtcbiAgICBjaGF0RGF0YS5ibGluZCA9IGZhbHNlXG5cbiAgICBjb25zdCBtZXNzYWdlID0gYXdhaXQgQ2hhdE1lc3NhZ2UuY3JlYXRlKGNoYXREYXRhKVxuXG4gICAgdGhpcy5tZXNzYWdlSWQgPSBtZXNzYWdlLmlkXG4gICAgcmV0dXJuIG1lc3NhZ2VcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZUNoYXRDYXJkICgpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gZ2FtZS5tZXNzYWdlcy5nZXQodGhpcy5tZXNzYWdlSWQpXG4gICAgaWYgKCFnYW1lLnVzZXIuaXNHTSAmJiBtZXNzYWdlLnVzZXIuaWQgIT09IGdhbWUudXNlci5pZCkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKFxuICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuVW5hYmxlVG9JbnRlcmFjdFdpdGhDaGF0Q2FyZCcpXG4gICAgICApXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRoaXMudGVtcGxhdGUsIHRoaXMpXG5cbiAgICBjb25zdCBtc2cgPSBhd2FpdCBtZXNzYWdlLnVwZGF0ZSh7IGNvbnRlbnQ6IGh0bWwgfSlcbiAgICBhd2FpdCB1aS5jaGF0LnVwZGF0ZU1lc3NhZ2UobXNnLCBmYWxzZSlcbiAgICByZXR1cm4gbXNnXG4gIH1cblxuICBhc3luYyBnZXRVcGRhdGVkQ2hhdENhcmQgKCkge1xuICAgIHJlbmRlclRlbXBsYXRlKHRoaXMudGVtcGxhdGUsIHRoaXMpLnRoZW4oaHRtbCA9PiB7XG4gICAgICByZXR1cm4gaHRtbFxuICAgIH0pXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgdXBkYXRlU2VsZWN0ZWQgKGNhcmQsIGV2ZW50KSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gQ29DN01lbGVlVGFyZ2V0LmdldEZyb21DYXJkKGNhcmQpXG5cbiAgICBzd2l0Y2ggKGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5hY3Rpb24pIHtcbiAgICAgIGNhc2UgJ2RvZGdlJzpcbiAgICAgICAgdGFyZ2V0LmRvZGdpbmcgPSB0cnVlXG4gICAgICAgIHRhcmdldC5ub3RSZXNwb25kaW5nID0gZmFsc2VcbiAgICAgICAgdGFyZ2V0LmZpZ2h0aW5nQmFjayA9IGZhbHNlXG4gICAgICAgIHRhcmdldC5tYW5ldXZlcmluZyA9IGZhbHNlXG4gICAgICAgIHRhcmdldC5za2lsbElkID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnNraWxsSWRcbiAgICAgICAgdGFyZ2V0Lml0ZW1JZCA9IG51bGxcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSAnbm9SZXNwb25zZSc6XG4gICAgICAgIHRhcmdldC5kb2RnaW5nID0gZmFsc2VcbiAgICAgICAgdGFyZ2V0Lm5vdFJlc3BvbmRpbmcgPSB0cnVlXG4gICAgICAgIHRhcmdldC5maWdodGluZ0JhY2sgPSBmYWxzZVxuICAgICAgICB0YXJnZXQubWFuZXV2ZXJpbmcgPSBmYWxzZVxuICAgICAgICB0YXJnZXQuc2tpbGxJZCA9IG51bGxcbiAgICAgICAgdGFyZ2V0Lml0ZW1JZCA9IG51bGxcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSAnZmlnaHRCYWNrJzpcbiAgICAgICAgdGFyZ2V0LmRvZGdpbmcgPSBmYWxzZVxuICAgICAgICB0YXJnZXQubm90UmVzcG9uZGluZyA9IGZhbHNlXG4gICAgICAgIHRhcmdldC5maWdodGluZ0JhY2sgPSB0cnVlXG4gICAgICAgIHRhcmdldC5tYW5ldXZlcmluZyA9IGZhbHNlXG4gICAgICAgIHRhcmdldC5za2lsbElkID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnNraWxsSWRcbiAgICAgICAgdGFyZ2V0Lml0ZW1JZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC53ZWFwb25JZFxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlICdtYW5ldXZlcic6XG4gICAgICAgIHRhcmdldC5kb2RnaW5nID0gZmFsc2VcbiAgICAgICAgdGFyZ2V0Lm5vdFJlc3BvbmRpbmcgPSBmYWxzZVxuICAgICAgICB0YXJnZXQuZmlnaHRpbmdCYWNrID0gZmFsc2VcbiAgICAgICAgdGFyZ2V0Lm1hbmV1dmVyaW5nID0gdHJ1ZVxuICAgICAgICB0YXJnZXQuc2tpbGxJZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5za2lsbElkXG4gICAgICAgIHRhcmdldC5pdGVtSWQgPSBudWxsXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgdGFyZ2V0LnVwZGF0ZUNoYXRDYXJkKClcblxuICAgIHJldHVybiB0YXJnZXRcbiAgfVxuXG4gIGFzeW5jIHBlcmZvcm1Ta2lsbENoZWNrIChza2lsbElkID0gbnVsbCwgcHVibGlzaCA9IGZhbHNlKSB7XG4gICAgY29uc3QgY2hlY2sgPSBuZXcgQ29DN0NoZWNrKClcbiAgICAvLyBDb21iYXQgcm9sbCBjYW5ub3QgYmUgYmxpbmQgb3IgdW5rbm93blxuICAgIGNoZWNrLmlzQmxpbmQgPSBmYWxzZVxuICAgIGNoZWNrLmlzVW5rb253biA9IGZhbHNlXG4gICAgY2hlY2sucmVmZXJlbmNlTWVzc2FnZUlkID0gdGhpcy5tZXNzYWdlSWRcbiAgICBjaGVjay5yb2xsVHlwZSA9ICdvcHBvc2VkJ1xuICAgIGNoZWNrLnNpZGUgPSAndGFyZ2V0J1xuICAgIGNoZWNrLmFjdGlvbiA9IHRoaXMuYWN0aW9uXG4gICAgY2hlY2suYWN0b3IgPSB0aGlzLmFjdG9yXG4gICAgY2hlY2suaXRlbSA9IHRoaXMuaXRlbUlkXG4gICAgY2hlY2suc2tpbGwgPSBza2lsbElkXG4gICAgY2hlY2suZGlmZmljdWx0eSA9IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhclxuICAgIGNoZWNrLmRpY2VNb2RpZmllciA9IDBcblxuICAgIGlmICh0aGlzLmRpc2FkdmFudGFnZSkgY2hlY2suZGljZU1vZGlmaWVyIC09IDFcbiAgICBpZiAodGhpcy5hZHZhbnRhZ2UpIGNoZWNrLmRpY2VNb2RpZmllciArPSAxXG5cbiAgICBhd2FpdCBjaGVjay5yb2xsKClcbiAgICB0aGlzLmNoZWNrID0gY2hlY2tcbiAgICB0aGlzLnJvbGxlZCA9IHRydWVcbiAgICB0aGlzLnJlc29sdmVkID0gdHJ1ZVxuICAgIGlmIChwdWJsaXNoKSBjaGVjay50b01lc3NhZ2UoKVxuXG4gICAgcmV0dXJuIGNoZWNrXG4gIH1cblxuICBhc3luYyBwdWJsaXNoTm9SZXBvbnNlUmVzdWx0ICgpIHtcbiAgICB0aGlzLnJvbGxlZCA9IHRydWVcbiAgICB0aGlzLnJlc29sdmVkID0gdHJ1ZVxuICAgIHRoaXMubm90UmVzcG9uZGluZyA9IHRydWVcbiAgICBjb25zdCByZXNvbHV0aW9uQ2FyZCA9IG5ldyBDb0M3TWVsZWVSZXNvbHRpb24oXG4gICAgICB0aGlzLnBhcmVudE1lc3NhZ2VJZCxcbiAgICAgIHRoaXMubWVzc2FnZUlkXG4gICAgKVxuXG4gICAgY29uc3QgcmVzb2x1dGlvbk1lc3NhZ2UgPSBhd2FpdCByZXNvbHV0aW9uQ2FyZC5wcmVDcmVhdGVNZXNzYWdlKClcblxuICAgIHRoaXMucmVzb2x1dGlvbkNhcmQgPSByZXNvbHV0aW9uTWVzc2FnZS5pZFxuICAgIGF3YWl0IHRoaXMudXBkYXRlQ2hhdENhcmQoKVxuICB9XG5cbiAgYXN5bmMgcHVibGlzaENoZWNrUmVzdWx0IChjaGVjayA9IG51bGwpIHtcbiAgICBpZiAoIWNoZWNrICYmICF0aGlzLmNoZWNrKSByZXR1cm4gbnVsbFxuXG4gICAgaWYgKGNoZWNrKSB0aGlzLmNoZWNrID0gY2hlY2tcbiAgICB0aGlzLnJvbGwgPSBDb0M3Um9sbC5nZXRGcm9tQ2hlY2sodGhpcy5jaGVjaylcbiAgICB0aGlzLnJvbGxlZCA9IHRydWVcblxuICAgIHRoaXMucm9sbC5yb2xsSWNvbnMgPSBbXVxuICAgIGlmICh0aGlzLnJvbGwuY3JpdGljYWwpIHtcbiAgICAgIHRoaXMucm9sbC5yb2xsQ29sb3IgPSAnZ29sZGVucm9kJ1xuICAgICAgdGhpcy5yb2xsLnJvbGxUaXRsZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Dcml0aWNhbFN1Y2Nlc3MnKVxuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IDQ7IGluZGV4KyspIHtcbiAgICAgICAgdGhpcy5yb2xsLnJvbGxJY29ucy5wdXNoKCdtZWRhbCcpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnJvbGwuZnVtYmxlKSB7XG4gICAgICB0aGlzLnJvbGwucm9sbENvbG9yID0gJ2RhcmtyZWQnXG4gICAgICB0aGlzLnJvbGwucm9sbFRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkZ1bWJsZScpXG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgNDsgaW5kZXgrKykge1xuICAgICAgICB0aGlzLnJvbGwucm9sbEljb25zLnB1c2goJ3NwaWRlcicpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnJvbGwuc3VjY2Vzcykge1xuICAgICAgdGhpcy5yb2xsLnJvbGxDb2xvciA9ICdnb2xkZW5yb2QnXG4gICAgICBpZiAoQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5yZWd1bGFyID09PSB0aGlzLnJvbGwuc3VjY2Vzc0xldmVsKSB7XG4gICAgICAgIHRoaXMucm9sbC5yb2xsVGl0bGUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuUmVndWxhclN1Y2Nlc3MnKVxuICAgICAgfVxuICAgICAgaWYgKENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuaGFyZCA9PT0gdGhpcy5yb2xsLnN1Y2Nlc3NMZXZlbCkge1xuICAgICAgICB0aGlzLnJvbGwucm9sbFRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkhhcmRTdWNjZXNzJylcbiAgICAgIH1cbiAgICAgIGlmIChDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmV4dHJlbWUgPT09IHRoaXMucm9sbC5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgICAgdGhpcy5yb2xsLnJvbGxUaXRsZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FeHRyZW1lU3VjY2VzcycpXG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5yb2xsLnN1Y2Nlc3NMZXZlbDsgaW5kZXgrKykge1xuICAgICAgICB0aGlzLnJvbGwucm9sbEljb25zLnB1c2goJ3N0YXInKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvbGwucm9sbENvbG9yID0gJ2JsYWNrJ1xuICAgICAgdGhpcy5yb2xsLnJvbGxUaXRsZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5GYWlsdXJlJylcbiAgICAgIHRoaXMucm9sbC5yb2xsSWNvbnMucHVzaCgnc2t1bGwnKVxuICAgIH1cblxuICAgIGNvbnN0IHJlc29sdXRpb25DYXJkID0gbmV3IENvQzdNZWxlZVJlc29sdGlvbihcbiAgICAgIHRoaXMucGFyZW50TWVzc2FnZUlkLFxuICAgICAgdGhpcy5tZXNzYWdlSWRcbiAgICApXG4gICAgY29uc3QgcmVzb2x1dGlvbk1lc3NhZ2UgPSBhd2FpdCByZXNvbHV0aW9uQ2FyZC5wcmVDcmVhdGVNZXNzYWdlKClcblxuICAgIHRoaXMucmVzb2x1dGlvbkNhcmQgPSByZXNvbHV0aW9uTWVzc2FnZS5pZFxuICAgIGF3YWl0IHRoaXMudXBkYXRlQ2hhdENhcmQoKVxuICB9XG5cbiAgc3RhdGljIGdldEZyb21DYXJkIChjYXJkLCBtZXNzYWdlSWQgPSBudWxsKSB7XG4gICAgY29uc3QgYWN0b3JLZXkgPSBjYXJkLmRhdGFzZXQuYWN0b3JLZXlcbiAgICBjb25zdCBwYXJlbnRNZXNzYWdlSWQgPSBjYXJkLmRhdGFzZXQucGFyZW50TWVzc2FnZUlkXG4gICAgY29uc3QgZmFzdEZvcndhcmQgPSBjYXJkLmRhdGFzZXQuZmFzdEZvcndhcmQgPT09ICd0cnVlJ1xuICAgIGNvbnN0IHRhcmdldCA9IG5ldyBDb0M3TWVsZWVUYXJnZXQoYWN0b3JLZXksIHBhcmVudE1lc3NhZ2VJZCwgZmFzdEZvcndhcmQpXG5cbiAgICB0YXJnZXQucm9sbCA9IENvQzdSb2xsLmdldEZyb21DYXJkKGNhcmQpXG4gICAgY2hhdEhlbHBlci5nZXRPYmplY3RGcm9tRWxlbWVudCh0YXJnZXQsIGNhcmQpXG5cbiAgICBpZiAoY2FyZC5jbG9zZXN0KCcubWVzc2FnZScpKSB7XG4gICAgICB0YXJnZXQubWVzc2FnZUlkID0gY2FyZC5jbG9zZXN0KCcubWVzc2FnZScpLmRhdGFzZXQubWVzc2FnZUlkXG4gICAgfSBlbHNlIHRhcmdldC5tZXNzYWdlSWQgPSBtZXNzYWdlSWRcbiAgICByZXR1cm4gdGFyZ2V0XG4gIH1cblxuICB1cGdyYWRlUm9sbCAobHVja0Ftb3VudCwgbmV3U3VjY2Vzc0xldmVsLCBvbGRDYXJkKSB7XG4gICAgLy8gVE9ETyA6IENoZWNrIGlmIHRoaXMgbmVlZHMgdG8gYmUgYXN5bmNcbiAgICBpZiAoIXRoaXMuYWN0b3Iuc3BlbmRMdWNrKGx1Y2tBbW91bnQpKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICBgJHt0aGlzLmFjdG9yLm5hbWV9IGRpZG4ndCBoYXZlIGVub3VnaCBsdWNrIHRvIHBhc3MgdGhlIGNoZWNrYFxuICAgICAgKVxuICAgIH1cbiAgICB0aGlzLnJvbGwudmFsdWUgPSBudWxsXG4gICAgdGhpcy5yb2xsLnN1Y2Nlc3NMZXZlbCA9IG5ld1N1Y2Nlc3NMZXZlbFxuICAgIHRoaXMucm9sbC5sdWNrU3BlbnQgPSB0cnVlXG4gICAgb2xkQ2FyZC5kYXRhc2V0LnByb2Nlc3NlZCA9IGZhbHNlXG5cbiAgICBjb25zdCBkaWNlUm9sbHMgPSBvbGRDYXJkLnF1ZXJ5U2VsZWN0b3IoJy5kaWNlLXJvbGwnKVxuICAgIGRpY2VSb2xscy5kYXRhc2V0LnZhbHVlID0gbnVsbFxuICAgIGRpY2VSb2xscy5kYXRhc2V0LnN1Y2Nlc3NMZXZlbCA9IG5ld1N1Y2Nlc3NMZXZlbFxuICAgIGRpY2VSb2xscy5kYXRhc2V0Lmx1Y2tTcGVudCA9IHRydWVcblxuICAgIGNvbnN0IHJlc3VsRGV0YWlscyA9IG9sZENhcmQucXVlcnlTZWxlY3RvcignLnJlc3VsdC1kZXRhaWxzJylcbiAgICBjb25zdCBkaWNlVG90YWwgPSBvbGRDYXJkLnF1ZXJ5U2VsZWN0b3IoJy5kaWNlLXRvdGFsJylcbiAgICBzd2l0Y2ggKG5ld1N1Y2Nlc3NMZXZlbCkge1xuICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLnJlZ3VsYXI6XG4gICAgICAgIGRpY2VUb3RhbC5pbm5lclRleHQgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuUmVndWxhclN1Y2Nlc3MnKVxuICAgICAgICByZXN1bERldGFpbHMuaW5uZXJUZXh0ID0gZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICAnQ29DNy5Sb2xsUmVzdWx0Lkx1Y2tTcGVuZFRleHQnLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGx1Y2tBbW91bnQsXG4gICAgICAgICAgICBzdWNjZXNzTGV2ZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5SZWd1bGFyRGlmZmljdWx0eScpXG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5oYXJkOlxuICAgICAgICBkaWNlVG90YWwuaW5uZXJUZXh0ID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkhhcmRTdWNjZXNzJylcbiAgICAgICAgcmVzdWxEZXRhaWxzLmlubmVyVGV4dCA9IGdhbWUuaTE4bi5mb3JtYXQoXG4gICAgICAgICAgJ0NvQzcuUm9sbFJlc3VsdC5MdWNrU3BlbmRUZXh0JyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBsdWNrQW1vdW50LFxuICAgICAgICAgICAgc3VjY2Vzc0xldmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuSGFyZERpZmZpY3VsdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlIENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZXh0cmVtZTpcbiAgICAgICAgZGljZVRvdGFsLmlubmVyVGV4dCA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FeHRyZW1lU3VjY2VzcycpXG4gICAgICAgIHJlc3VsRGV0YWlscy5pbm5lclRleHQgPSBnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgICdDb0M3LlJvbGxSZXN1bHQuTHVja1NwZW5kVGV4dCcsXG4gICAgICAgICAge1xuICAgICAgICAgICAgbHVja0Ftb3VudCxcbiAgICAgICAgICAgIHN1Y2Nlc3NMZXZlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkV4dHJlbWVEaWZmaWN1bHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmNyaXRpY2FsOlxuICAgICAgICBkaWNlVG90YWwuaW5uZXJUZXh0ID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNyaXRpY2FsU3VjY2VzcycpXG4gICAgICAgIHJlc3VsRGV0YWlscy5pbm5lclRleHQgPSBnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgICdDb0M3LlJvbGxSZXN1bHQuTHVja1NwZW5kVGV4dCcsXG4gICAgICAgICAge1xuICAgICAgICAgICAgbHVja0Ftb3VudCxcbiAgICAgICAgICAgIHN1Y2Nlc3NMZXZlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNyaXRpY2FsRGlmZmljdWx0eScpXG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgZGljZVRvdGFsLmNsYXNzTGlzdC5yZXBsYWNlKCdmYWlsdXJlJywgJ3N1Y2Nlc3MnKVxuICAgIG9sZENhcmQucXVlcnlTZWxlY3RvcignLmNhcmQtYnV0dG9ucycpLnJlbW92ZSgpXG4gICAgb2xkQ2FyZC5xdWVyeVNlbGVjdG9yKCcuZGljZS10b29sdGlwJykuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgIENvQzdDaGF0LnVwZGF0ZUNoYXRDYXJkKG9sZENhcmQpIC8vIFRPRE8gOiBDaGVjayBpZiB0aGlzIG5lZWRzIHRvIGJlIGFzeW5jXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCAkLCBDaGF0TWVzc2FnZSwgZm91bmRyeSwgZ2FtZSwgcmVuZGVyVGVtcGxhdGUsIFJvbGwsIHVpICovXG5pbXBvcnQgeyBDb0M3RGljZSB9IGZyb20gJy4uL2RpY2UuanMnXG5pbXBvcnQgeyBDb0M3Q2hlY2sgfSBmcm9tICcuLi9jaGVjay5qcydcbmltcG9ydCB7IGNoYXRIZWxwZXIsIENvQzdSb2xsLCBDb0M3RGFtYWdlIH0gZnJvbSAnLi9oZWxwZXIuanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3UmFuZ2VJbml0aWF0b3Ige1xuICBjb25zdHJ1Y3RvciAoYWN0b3JLZXkgPSBudWxsLCBpdGVtSWQgPSBudWxsLCBmYXN0Rm9yd2FyZCA9IGZhbHNlKSB7XG4gICAgdGhpcy5hY3RvcktleSA9IGFjdG9yS2V5XG4gICAgdGhpcy5pdGVtSWQgPSBpdGVtSWRcbiAgICB0aGlzLmZhc3RGb3J3YXJkID0gZmFzdEZvcndhcmRcbiAgICB0aGlzLnJlc29sdmVkID0gZmFsc2VcbiAgICB0aGlzLmNvdmVyID0gZmFsc2VcbiAgICB0aGlzLnN1cnByaXNlZCA9IGZhbHNlXG4gICAgdGhpcy5hdXRvU3VjY2VzcyA9IGZhbHNlXG4gICAgdGhpcy5hZHZhbnRhZ2UgPSBmYWxzZVxuICAgIHRoaXMuZGlzYWR2YW50YWdlID0gZmFsc2VcbiAgICB0aGlzLm1lc3NhZ2VJZCA9IG51bGxcbiAgICB0aGlzLnRhcmdldENhcmQgPSBudWxsXG4gICAgdGhpcy5yb2xsZWQgPSBmYWxzZVxuICAgIHRoaXMuc2luZ2xlU2hvdCA9IGZhbHNlXG4gICAgdGhpcy5tdWx0aXBsZVNob3RzID0gZmFsc2VcbiAgICB0aGlzLmJ1cnN0ID0gZmFsc2VcbiAgICB0aGlzLmZ1bGxBdXRvID0gZmFsc2VcbiAgICB0aGlzLnRva2VuS2V5ID0gbnVsbFxuICAgIHRoaXMuYWltZWQgPSBmYWxzZVxuICAgIHRoaXMudG90YWxCdWxsZXRzRmlyZWQgPSAwXG4gICAgdGhpcy5fdGFyZ2V0cyA9IFtdXG4gICAgZm9yIChjb25zdCB0IG9mIFsuLi5nYW1lLnVzZXIudGFyZ2V0c10pIHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IG5ldyBDb0M3UmFuZ2VUYXJnZXQoYCR7dC5zY2VuZS5pZH0uJHt0LmlkfWApIC8vXG4gICAgICB0YXJnZXQudG9rZW4gPSB0XG4gICAgICB0aGlzLl90YXJnZXRzLnB1c2godGFyZ2V0KVxuICAgIH1cbiAgICBpZiAodGhpcy5fdGFyZ2V0cy5sZW5ndGgpIHRoaXMuX3RhcmdldHNbMF0uYWN0aXZlID0gdHJ1ZVxuICAgIGVsc2Uge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gbmV3IENvQzdSYW5nZVRhcmdldCgpXG4gICAgICB0YXJnZXQuYWN0aXZlID0gdHJ1ZVxuICAgICAgdGhpcy5fdGFyZ2V0cy5wdXNoKHRhcmdldClcbiAgICB9XG4gICAgaWYgKGFjdG9yS2V5KSB7XG4gICAgICBjb25zdCBhY3RvciA9IGNoYXRIZWxwZXIuZ2V0QWN0b3JGcm9tS2V5KGFjdG9yS2V5KSAvLyBSRUZBQ1RPUklORyAoMilcbiAgICAgIHRoaXMudG9rZW4gPSBjaGF0SGVscGVyLmdldFRva2VuRnJvbUtleShhY3RvcktleSkgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgICBpZiAodGhpcy50b2tlbikgdGhpcy50b2tlbktleSA9IGFjdG9yLnRva2VuS2V5XG4gICAgICBpZiAoaXRlbUlkKSB7XG4gICAgICAgIGNvbnN0IHdlYXBvbiA9IGFjdG9yLml0ZW1zLmdldChpdGVtSWQpXG4gICAgICAgIGlmICh3ZWFwb24pIHtcbiAgICAgICAgICBpZiAodGhpcy53ZWFwb24uc2luZ2xlU2hvdCkgdGhpcy5zaW5nbGVTaG90ID0gdHJ1ZVxuICAgICAgICAgIGVsc2UgaWYgKHRoaXMud2VhcG9uLnN5c3RlbS5wcm9wZXJ0aWVzLmF1dG8pIHRoaXMuZnVsbEF1dG8gPSB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMudG9rZW5LZXkpIHtcbiAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLl90YXJnZXRzKSB7XG4gICAgICAgIGlmICh0LnRva2VuICYmIHRoaXMudG9rZW4pIHtcbiAgICAgICAgICB0LmRpc3RhbmNlID0gY2hhdEhlbHBlci5nZXREaXN0YW5jZSh0LnRva2VuLCB0aGlzLnRva2VuKVxuICAgICAgICAgIHQucm91bmRlZERpc3RhbmNlID0gTWF0aC5yb3VuZCh0LmRpc3RhbmNlLnZhbHVlICogMTAwKSAvIDEwMFxuICAgICAgICAgIHQuZGlzdGFuY2VVbml0ID0gdC5kaXN0YW5jZS51bml0XG4gICAgICAgICAgY29uc3QgZGlzdEluWWQgPVxuICAgICAgICAgICAgTWF0aC5yb3VuZChjaGF0SGVscGVyLnRvWWFyZHModC5kaXN0YW5jZSkgKiAxMDApIC8gMTAwXG4gICAgICAgICAgLy8gaWYoIGRpc3RJbllkKXtcbiAgICAgICAgICBpZiAodGhpcy5hY3Rvcikge1xuICAgICAgICAgICAgdC5wb2ludEJsYW5rUmFuZ2UgPSBmYWxzZVxuICAgICAgICAgICAgY29uc3QgcGJSYW5nZUluWWQgPVxuICAgICAgICAgICAgICB0aGlzLmFjdG9yLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MuZGV4LnZhbHVlIC8gMTVcbiAgICAgICAgICAgIGlmIChkaXN0SW5ZZCA8PSBwYlJhbmdlSW5ZZCkgdC5wb2ludEJsYW5rUmFuZ2UgPSB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLndlYXBvbikge1xuICAgICAgICAgICAgaWYgKHRoaXMud2VhcG9uLmJhc2VSYW5nZSkge1xuICAgICAgICAgICAgICB0LmJhc2VSYW5nZSA9IGZhbHNlXG4gICAgICAgICAgICAgIHQubG9uZ1JhbmdlID0gZmFsc2VcbiAgICAgICAgICAgICAgdC5leHRyZW1lUmFuZ2UgPSBmYWxzZVxuICAgICAgICAgICAgICB0Lm91dE9mUmFuZ2UgPSBmYWxzZVxuICAgICAgICAgICAgICBpZiAodGhpcy53ZWFwb24uc3lzdGVtLnByb3BlcnRpZXMuc2hvdGd1bikge1xuICAgICAgICAgICAgICAgIGlmIChkaXN0SW5ZZCA8PSB0aGlzLndlYXBvbi5iYXNlUmFuZ2UpIHQuYmFzZVJhbmdlID0gdHJ1ZVxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIGRpc3RJbllkID4gdGhpcy53ZWFwb24uYmFzZVJhbmdlICYmXG4gICAgICAgICAgICAgICAgICBkaXN0SW5ZZCA8PSB0aGlzLndlYXBvbi5sb25nUmFuZ2VcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIHQubG9uZ1JhbmdlID0gdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICBkaXN0SW5ZZCA+IHRoaXMud2VhcG9uLmxvbmdSYW5nZSAmJlxuICAgICAgICAgICAgICAgICAgZGlzdEluWWQgPD0gdGhpcy53ZWFwb24uZXh0cmVtZVJhbmdlXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICB0LmV4dHJlbWVSYW5nZSA9IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRpc3RJbllkID4gdGhpcy53ZWFwb24uZXh0cmVtZVJhbmdlKSB0Lm91dE9mUmFuZ2UgPSB0cnVlXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGRpc3RJbllkIDw9IHRoaXMud2VhcG9uLmJhc2VSYW5nZSkgdC5iYXNlUmFuZ2UgPSB0cnVlXG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgZGlzdEluWWQgPiB0aGlzLndlYXBvbi5iYXNlUmFuZ2UgJiZcbiAgICAgICAgICAgICAgICAgIGRpc3RJbllkIDw9IHRoaXMud2VhcG9uLmJhc2VSYW5nZSAqIDJcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIHQubG9uZ1JhbmdlID0gdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICBkaXN0SW5ZZCA+IHRoaXMud2VhcG9uLmJhc2VSYW5nZSAqIDIgJiZcbiAgICAgICAgICAgICAgICAgIGRpc3RJbllkIDw9IHRoaXMud2VhcG9uLmJhc2VSYW5nZSAqIDRcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIHQuZXh0cmVtZVJhbmdlID0gdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZGlzdEluWWQgPiB0aGlzLndlYXBvbi5iYXNlUmFuZ2UgKiA0KSB0Lm91dE9mUmFuZ2UgPSB0cnVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICEodC5iYXNlUmFuZ2UgfHwgdC5sb25nUmFuZ2UgfHwgdC5leHRyZW1lUmFuZ2UgfHwgdC5vdXRPZlJhbmdlKVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB0LmJhc2VSYW5nZSA9IHRydWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyB9XG4gICAgICAgIH0gZWxzZSB0LmJhc2VSYW5nZSA9IHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXQgZGlzcGxheUFjdG9yT25DYXJkICgpIHtcbiAgICByZXR1cm4gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnZGlzcGxheUFjdG9yT25DYXJkJylcbiAgfVxuXG4gIGdldCBhY3RvckltZyAoKSB7XG4gICAgY29uc3QgaW1nID0gY2hhdEhlbHBlci5nZXRBY3RvckltZ0Zyb21LZXkodGhpcy5hY3RvcktleSlcbiAgICBpZiAoaW1nKSByZXR1cm4gaW1nXG4gICAgcmV0dXJuICcuLi9pY29ucy9zdmcvbXlzdGVyeS1tYW4tYmxhY2suc3ZnJ1xuICB9XG5cbiAgZ2V0IGFjdG9yICgpIHtcbiAgICByZXR1cm4gY2hhdEhlbHBlci5nZXRBY3RvckZyb21LZXkodGhpcy5hY3RvcktleSkgLy8gUkVGQUNUT1JJTkcgKDIpXG4gIH1cblxuICBnZXQgaXRlbSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWN0b3IuaXRlbXMuZ2V0KHRoaXMuaXRlbUlkKVxuICB9XG5cbiAgZ2V0IHdlYXBvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbVxuICB9XG5cbiAgZ2V0IHRhcmdldHMgKCkge1xuICAgIGlmICghdGhpcy5fdGFyZ2V0cykgdGhpcy5fdGFyZ2V0cyA9IFtdXG4gICAgcmV0dXJuIHRoaXMuX3RhcmdldHNcbiAgfVxuXG4gIGdldCB0YXJnZXQgKCkge1xuICAgIGlmICh0aGlzLnRhcmdldHMgJiYgdGhpcy50YXJnZXRzLmxlbmd0aCkgcmV0dXJuIHRoaXMudGFyZ2V0cy5wb3AoKVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBnZXQgc2tpbGxzICgpIHtcbiAgICByZXR1cm4gdGhpcy5hY3Rvci5nZXRXZWFwb25Ta2lsbHModGhpcy5pdGVtSWQpXG4gIH1cblxuICBnZXQgbWFpbldlYXBvblNraWxsICgpIHtcbiAgICByZXR1cm4gdGhpcy5hY3Rvci5pdGVtcy5nZXQodGhpcy53ZWFwb24uc3lzdGVtLnNraWxsLm1haW4uaWQpXG4gIH1cblxuICBnZXQgYXV0b1dlYXBvblNraWxsICgpIHtcbiAgICBpZiAodGhpcy53ZWFwb24uc3lzdGVtLnNraWxsLmFsdGVybmF0aXYuaWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmFjdG9yLml0ZW1zLmdldCh0aGlzLndlYXBvbi5zeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5pZClcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubWFpbldlYXBvblNraWxsXG4gIH1cblxuICBnZXQgYXV0b0ZpcmUgKCkge1xuICAgIHJldHVybiB0aGlzLmJ1cnN0IHx8IHRoaXMuZnVsbEF1dG9cbiAgfVxuXG4gIGdldCBtdWx0aVRhcmdldCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZnVsbEF1dG8gfHwgdGhpcy5tdWx0aXBsZVNob3RzXG4gIH1cblxuICBnZXQgYWltaW5nICgpIHtcbiAgICBpZiAodW5kZWZpbmVkID09PSB0aGlzLl9haW1pbmcpIHtcbiAgICAgIHRoaXMuX2FpbWluZyA9IHRoaXMuYWN0b3IuZ2V0QWN0b3JGbGFnKCdhaW1pbmcnKVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fYWltaW5nXG4gIH1cblxuICBnZXQgYWN0aXZlVGFyZ2V0ICgpIHtcbiAgICBpZiAoIXRoaXMuX3RhcmdldHMubGVuZ3RoKSByZXR1cm4gbnVsbFxuICAgIHJldHVybiB0aGlzLl90YXJnZXRzLmZpbmQodCA9PiB0LmFjdGl2ZSlcbiAgfVxuXG4gIGdldCBzaG90cyAoKSB7XG4gICAgaWYgKHVuZGVmaW5lZCA9PT0gdGhpcy5fc2hvdHMpIHRoaXMuX3Nob3RzID0gW11cbiAgICByZXR1cm4gdGhpcy5fc2hvdHNcbiAgfVxuXG4gIGdldCBjdXJyZW50U2hvdFJhbmsgKCkge1xuICAgIHJldHVybiB0aGlzLnNob3RzLmxlbmd0aCArIDFcbiAgfVxuXG4gIGdldCBhY3RpdmVUYXJnZXRTaG90RGlmZmljdWx0eSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2hvdERpZmZpY3VsdHkoKVxuICB9XG5cbiAgc2V0IGFpbWluZyAoYikge1xuICAgIHRoaXMuX2FpbWluZyA9IGJcbiAgfVxuXG4gIGdldCBkaWRBbnlTaG90SGl0ICgpIHtcbiAgICBsZXQgYW55SGl0ID0gZmFsc2VcbiAgICBmb3IgKGNvbnN0IHIgb2YgdGhpcy5yb2xscykge1xuICAgICAgYW55SGl0ID0gYW55SGl0IHx8IHIuaXNTdWNjZXNzXG4gICAgfVxuICAgIHJldHVybiBhbnlIaXRcbiAgfVxuXG4gIGdldCBzdWNjZXNzZnVsSGl0cyAoKSB7XG4gICAgY29uc3QgaGl0cyA9IFtdXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMucm9sbHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBpZiAodGhpcy5yb2xsc1tpbmRleF0uaXNTdWNjZXNzKSB7XG4gICAgICAgIGNvbnN0IGhpdCA9IHtcbiAgICAgICAgICByb2xsOiB0aGlzLnJvbGxzW2luZGV4XSxcbiAgICAgICAgICBzaG90OiB0aGlzLnNob3RzW2luZGV4XVxuICAgICAgICB9XG4gICAgICAgIGhpdHMucHVzaChoaXQpXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChoaXRzLmxlbmd0aCAhPT0gMCkgcmV0dXJuIGhpdHNcbiAgICBlbHNlIHJldHVybiBudWxsXG4gIH1cblxuICBnZXQgc2hvdEZpcmVkICgpIHtcbiAgICByZXR1cm4gdGhpcy5zaG90cyA/IHRoaXMuc2hvdHMubGVuZ3RoIDogMFxuICB9XG5cbiAgZ2V0IHRvdGFsQW1tbyAoKSB7XG4gICAgcmV0dXJuIHRoaXMud2VhcG9uLmdldEJ1bGxldExlZnQoKVxuICB9XG5cbiAgZ2V0IG1heFNob3RzICgpIHtcbiAgICBpZiAodGhpcy5mdWxsQXV0bykgcmV0dXJuICfiiJ4nXG4gICAgLy8gcmV0dXJuIHRoaXMud2VhcG9uLmRhdGEuZGF0YS51c2VzUGVyUm91bmQubWF4O1xuXG4gICAgcmV0dXJuIHRoaXMud2VhcG9uLnN5c3RlbS51c2VzUGVyUm91bmQubWF4XG4gICAgICA/IHBhcnNlSW50KHRoaXMud2VhcG9uLnN5c3RlbS51c2VzUGVyUm91bmQubWF4KVxuICAgICAgOiAxXG4gIH1cblxuICBnZXQgaWdub3JlQW1tbyAoKSB7XG4gICAgcmV0dXJuIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2Rpc3JlZ2FyZEFtbW8nKVxuICB9XG5cbiAgZ2V0IGlnbm9yZVVzZXNQZXJSb3VuZCAoKSB7XG4gICAgcmV0dXJuIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2Rpc3JlZ2FyZFVzZVBlclJvdW5kJylcbiAgfVxuXG4gIGdldCBvdXRPZkFtbW8gKCkge1xuICAgIGlmICh0aGlzLmlnbm9yZUFtbW8pIHJldHVybiBmYWxzZVxuICAgIGlmICh0aGlzLnRvdGFsQnVsbGV0c0ZpcmVkID49IHRoaXMud2VhcG9uLmdldEJ1bGxldExlZnQoKSkgcmV0dXJuIHRydWVcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGdldCBvdXRPZlNob3RzICgpIHtcbiAgICBpZiAodGhpcy5pZ25vcmVVc2VzUGVyUm91bmQpIHJldHVybiBmYWxzZVxuICAgIGlmICh0aGlzLnNob3RzKSByZXR1cm4gdGhpcy5zaG90cy5sZW5ndGggPj0gdGhpcy5tYXhTaG90c1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZ2V0IHZvbGxleVNpemUgKCkge1xuICAgIGlmICghdGhpcy53ZWFwb24uc3lzdGVtLnByb3BlcnRpZXMuYXV0bykgcmV0dXJuIDFcbiAgICBpZiAodGhpcy5fdm9sbGV5U2l6ZSkgcmV0dXJuIHRoaXMuX3ZvbGxleVNpemVcbiAgICBjb25zdCBzaXplID0gTWF0aC5mbG9vcih0aGlzLmF1dG9XZWFwb25Ta2lsbC52YWx1ZSAvIDEwKVxuICAgIHJldHVybiBzaXplIDwgMyA/IDMgOiBzaXplXG4gIH1cblxuICBzZXQgdm9sbGV5U2l6ZSAoeCkge1xuICAgIGlmICh4ID49IE1hdGguZmxvb3IodGhpcy5hdXRvV2VhcG9uU2tpbGwudmFsdWUgLyAxMCkpIHtcbiAgICAgIHRoaXMuX3ZvbGxleVNpemUgPSBNYXRoLmZsb29yKHRoaXMuYXV0b1dlYXBvblNraWxsLnZhbHVlIC8gMTApXG4gICAgfSBlbHNlIGlmICh4IDw9IDMpIHtcbiAgICAgIHRoaXMuX3ZvbGxleVNpemUgPSAzXG4gICAgfVxuICAgIHRoaXMuX3ZvbGxleVNpemUgPSBwYXJzZUludCh4KVxuICB9XG5cbiAgZ2V0IGlzVm9sbGV5TWluU2l6ZSAoKSB7XG4gICAgaWYgKHRoaXMudm9sbGV5U2l6ZSA9PT0gMykgcmV0dXJuIHRydWVcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGdldCBpc1ZvbGxleU1heFNpemUgKCkge1xuICAgIGNvbnN0IG1heFNpemUgPVxuICAgICAgTWF0aC5mbG9vcih0aGlzLmF1dG9XZWFwb25Ta2lsbC52YWx1ZSAvIDEwKSA8IDNcbiAgICAgICAgPyAzXG4gICAgICAgIDogTWF0aC5mbG9vcih0aGlzLmF1dG9XZWFwb25Ta2lsbC52YWx1ZSAvIDEwKVxuICAgIGlmIChtYXhTaXplID09PSB0aGlzLnZvbGxleVNpemUpIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBnZXRUYXJnZXRGcm9tS2V5IChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5fdGFyZ2V0cy5maW5kKHQgPT4ga2V5ID09PSB0LmFjdG9yS2V5KVxuICB9XG5cbiAgY2FsY1RhcmdldHNEaWZmaWN1bHR5ICgpIHtcbiAgICBmb3IgKGNvbnN0IHQgb2YgdGhpcy50YXJnZXRzKSB7XG4gICAgICB0LnNob3REaWZmaWN1bHR5ID0gdGhpcy5zaG90RGlmZmljdWx0eSh0KVxuICAgIH1cbiAgfVxuXG4gIHNob3REaWZmaWN1bHR5ICh0ID0gbnVsbCkge1xuICAgIGNvbnN0IHRhcmdldCA9IHQgfHwgdGhpcy5hY3RpdmVUYXJnZXRcbiAgICBsZXQgZGFtYWdlID0gdGhpcy53ZWFwb24uc3lzdGVtLnJhbmdlLm5vcm1hbC5kYW1hZ2VcbiAgICBpZiAodGhpcy53ZWFwb24uc3lzdGVtLnByb3BlcnRpZXMuc2hvdGd1bikge1xuICAgICAgaWYgKHQubG9uZ1JhbmdlKSBkYW1hZ2UgPSB0aGlzLndlYXBvbi5zeXN0ZW0ucmFuZ2UubG9uZy5kYW1hZ2VcbiAgICAgIGlmICh0LmV4dHJlbWVSYW5nZSkgZGFtYWdlID0gdGhpcy53ZWFwb24uc3lzdGVtLnJhbmdlLmV4dHJlbWUuZGFtYWdlXG4gICAgfVxuICAgIGxldCBtb2RpZmllciA9IHRhcmdldC5tb2RpZmllclxuICAgIGxldCBkaWZmaWN1bHR5XG4gICAgdGhpcy53ZWFwb24uc3lzdGVtLnByb3BlcnRpZXMuc2hvdGd1blxuICAgICAgPyAoZGlmZmljdWx0eSA9IDEpXG4gICAgICA6IChkaWZmaWN1bHR5ID0gdGFyZ2V0LmRpZmZpY3VsdHkpXG4gICAgbGV0IGRpZmZpY3VsdHlOYW1lID0gJydcbiAgICBpZiAodGhpcy5haW1pbmcgJiYgdGhpcy5jdXJyZW50U2hvdFJhbmsgPT09IDEpIG1vZGlmaWVyKytcbiAgICBpZiAodGhpcy5hZHZhbnRhZ2UpIG1vZGlmaWVyKytcbiAgICBpZiAodGhpcy5kaXNhZHZhbnRhZ2UpIG1vZGlmaWVyLS1cbiAgICBpZiAodGhpcy5yZWxvYWQpIG1vZGlmaWVyLS1cbiAgICBpZiAodGhpcy5tdWx0aXBsZVNob3RzICYmICF0aGlzLmZ1bGxBdXRvKSBtb2RpZmllci0tXG4gICAgaWYgKHRoaXMuZnVsbEF1dG8pIG1vZGlmaWVyIC09IHRoaXMuY3VycmVudFNob3RSYW5rIC0gMVxuICAgIGlmIChtb2RpZmllciA8IC0yKSB7XG4gICAgICBjb25zdCBleGNlc3MgPSBNYXRoLmFicyhtb2RpZmllciArIDIpXG4gICAgICBkaWZmaWN1bHR5ICs9IGV4Y2Vzc1xuICAgICAgaWYgKGRpZmZpY3VsdHkgPiBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmNyaXRpY2FsKSB7XG4gICAgICAgIGRpZmZpY3VsdHkgPSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmltcG9zc2libGVcbiAgICAgIH1cbiAgICAgIG1vZGlmaWVyID0gLTJcbiAgICB9XG5cbiAgICBpZiAoQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyID09PSBkaWZmaWN1bHR5KSB7XG4gICAgICBkaWZmaWN1bHR5TmFtZSA9ICdSZWd1bGFyJ1xuICAgIH1cbiAgICBpZiAoQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5oYXJkID09PSBkaWZmaWN1bHR5KSBkaWZmaWN1bHR5TmFtZSA9ICdIYXJkJ1xuICAgIGlmIChDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmV4dHJlbWUgPT09IGRpZmZpY3VsdHkpIHtcbiAgICAgIGRpZmZpY3VsdHlOYW1lID0gJ0V4dHJlbWUnXG4gICAgfVxuICAgIGlmIChDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmNyaXRpY2FsID09PSBkaWZmaWN1bHR5KSB7XG4gICAgICBkaWZmaWN1bHR5TmFtZSA9ICdDcml0aWNhbCdcbiAgICB9XG4gICAgaWYgKENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuaW1wb3NzaWJsZSA9PT0gZGlmZmljdWx0eSkge1xuICAgICAgZGlmZmljdWx0eU5hbWUgPSAnSW1wb3NzaWJsZSdcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbGV2ZWw6IGRpZmZpY3VsdHksXG4gICAgICBuYW1lOiBkaWZmaWN1bHR5TmFtZSxcbiAgICAgIG1vZGlmaWVyLFxuICAgICAgZGFtYWdlLFxuICAgICAgaW1wb3NzaWJsZTogZGlmZmljdWx0eSA9PT0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5pbXBvc3NpYmxlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNob290IGF0IHRoZSBhY3RpdmUgdGFyZ2V0LiBBZGQgaXQgdG8gdGhlIGxpc3Qgb2Ygc2hvdHMuXG4gICAqIFRPRE8gOiByZWNhbGN1bGVyIGxhIGRpZmZpY3VsdMOpIGRlIHRvdXMgbGVzIHNob3RzICEuXG4gICAqL1xuICBhZGRTaG90QXRDdXJyZW50VGFyZ2V0ICgpIHtcbiAgICB0aGlzLmNhbGNUYXJnZXRzRGlmZmljdWx0eSgpXG4gICAgY29uc3Qgc2hvdCA9IHtcbiAgICAgIHRhcmdldDogdGhpcy5hY3RpdmVUYXJnZXQsXG4gICAgICBleHRyZW1lUmFuZ2U6IHRoaXMuYWN0aXZlVGFyZ2V0LmV4dHJlbWVSYW5nZSxcbiAgICAgIGFjdG9yS2V5OiB0aGlzLmFjdGl2ZVRhcmdldC5hY3RvcktleSxcbiAgICAgIGFjdG9yTmFtZTogdGhpcy5hY3RpdmVUYXJnZXQubmFtZSxcbiAgICAgIGRpZmZpY3VsdHk6IHRoaXMuYWN0aXZlVGFyZ2V0LnNob3REaWZmaWN1bHR5LmxldmVsLFxuICAgICAgbW9kaWZpZXI6IHRoaXMuYWN0aXZlVGFyZ2V0LnNob3REaWZmaWN1bHR5Lm1vZGlmaWVyLFxuICAgICAgZGFtYWdlOiB0aGlzLmFjdGl2ZVRhcmdldC5zaG90RGlmZmljdWx0eS5kYW1hZ2UsXG4gICAgICBidWxsZXRzU2hvdDogMSxcbiAgICAgIHRyYW5zaXRCdWxsZXRzOiAwLFxuICAgICAgYnVsbGV0c1Nob3RUcmFuc2l0OiAxLFxuICAgICAgdHJhbnNpdDogZmFsc2VcbiAgICB9XG5cbiAgICBsZXQgYnVsbGV0TGVmdCA9IHRoaXMudG90YWxBbW1vIC0gdGhpcy50b3RhbEJ1bGxldHNGaXJlZFxuXG4gICAgaWYgKHRoaXMuZnVsbEF1dG8pIHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRTaG90UmFuayA+IDEpIHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNTaG90ID0gdGhpcy5zaG90c1t0aGlzLmN1cnJlbnRTaG90UmFuayAtIDJdXG4gICAgICAgIGlmIChwcmV2aW91c1Nob3QuYWN0b3JLZXkgIT09IHRoaXMuYWN0aXZlVGFyZ2V0LmFjdG9yS2V5KSB7XG4gICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBjaGF0SGVscGVyLmdldERpc3RhbmNlKFxuICAgICAgICAgICAgY2hhdEhlbHBlci5nZXRUb2tlbkZyb21LZXkocHJldmlvdXNTaG90LmFjdG9yS2V5KSxcbiAgICAgICAgICAgIGNoYXRIZWxwZXIuZ2V0VG9rZW5Gcm9tS2V5KHRoaXMuYWN0aXZlVGFyZ2V0LmFjdG9yS2V5KVxuICAgICAgICAgIClcbiAgICAgICAgICBzaG90LnRyYW5zaXRCdWxsZXRzID0gTWF0aC5mbG9vcihjaGF0SGVscGVyLnRvWWFyZHMoZGlzdGFuY2UpKVxuICAgICAgICAgIGlmIChzaG90LnRyYW5zaXRCdWxsZXRzID49IGJ1bGxldExlZnQgJiYgIXRoaXMuaWdub3JlQW1tbykge1xuICAgICAgICAgICAgc2hvdC50cmFuc2l0QnVsbGV0cyA9IGJ1bGxldExlZnRcbiAgICAgICAgICAgIGJ1bGxldExlZnQgPSAwXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMudG90YWxCdWxsZXRzRmlyZWQgPVxuICAgICAgICAgICAgcGFyc2VJbnQodGhpcy50b3RhbEJ1bGxldHNGaXJlZCkgKyBzaG90LnRyYW5zaXRCdWxsZXRzXG4gICAgICAgICAgc2hvdC50cmFuc2l0ID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzaG90LmJ1bGxldHNTaG90ID0gdGhpcy52b2xsZXlTaXplXG4gICAgICBpZiAoc2hvdC5idWxsZXRzU2hvdCA8PSAzKSBzaG90LmJ1bGxldHNTaG90ID0gM1xuICAgICAgaWYgKHNob3QuYnVsbGV0c1Nob3QgPj0gYnVsbGV0TGVmdCAmJiAhdGhpcy5pZ25vcmVBbW1vKSB7XG4gICAgICAgIHNob3QuYnVsbGV0c1Nob3QgPSBidWxsZXRMZWZ0XG4gICAgICAgIGJ1bGxldExlZnQgPSAwXG4gICAgICB9XG4gICAgICAvLyBidWxsZXRzU2hvdFRyYW5zaXQgaXMgZm9yIGxvY2FsaXppbmcgQ29DNy5TaG90QnVsbGV0cyB1c2luZyBwYXJhbWV0ZXJzLCBsb2NhbGl6ZSBkb2VzIG5vdCBhY2NlcHQgYWRkaW5nIGEgcGFyYW1ldGVyIGFzIGEgc3VtIG9mIHNob3QuYnVsbGV0c1Nob3QgKyBzaG90LnRyYW5zaXRCdWxsZXRzLCBzbyBJIGNyZWF0ZSBhIG5ldyB2YWx1ZSBpbiBhZHZhbmNlIHRvIHVzZSBpbnN0ZWFkXG4gICAgICBzaG90LmJ1bGxldHNTaG90VHJhbnNpdCA9IHNob3QuYnVsbGV0c1Nob3QgKyBzaG90LnRyYW5zaXRCdWxsZXRzXG4gICAgfVxuICAgIGlmICh0aGlzLmJ1cnN0KSB7XG4gICAgICBzaG90LmJ1bGxldHNTaG90ID0gcGFyc2VJbnQodGhpcy53ZWFwb24uc3lzdGVtLnVzZXNQZXJSb3VuZC5idXJzdClcbiAgICAgICAgPyBwYXJzZUludCh0aGlzLndlYXBvbi5zeXN0ZW0udXNlc1BlclJvdW5kLmJ1cnN0KVxuICAgICAgICA6IDFcbiAgICAgIGlmIChzaG90LmJ1bGxldHNTaG90ID49IGJ1bGxldExlZnQgJiYgIXRoaXMuaWdub3JlQW1tbykge1xuICAgICAgICBzaG90LmJ1bGxldHNTaG90ID0gYnVsbGV0TGVmdFxuICAgICAgICBidWxsZXRMZWZ0ID0gMFxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudG90YWxCdWxsZXRzRmlyZWQgPSBwYXJzZUludCh0aGlzLnRvdGFsQnVsbGV0c0ZpcmVkKSArIHNob3QuYnVsbGV0c1Nob3RcblxuICAgIGlmICh0aGlzLmFpbWluZykge1xuICAgICAgdGhpcy5haW1pbmcgPSBmYWxzZVxuICAgICAgdGhpcy5haW1lZCA9IHRydWVcbiAgICB9XG5cbiAgICB0aGlzLnNob3RzLnB1c2goc2hvdClcbiAgfVxuXG4gIGdldCB0ZW1wbGF0ZSAoKSB7XG4gICAgcmV0dXJuICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2NoYXQvY29tYmF0L3JhbmdlLWluaXRpYXRvci5odG1sJ1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlQ2hhdENhcmQgKCkge1xuICAgIHRoaXMuY2FsY1RhcmdldHNEaWZmaWN1bHR5KClcbiAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUodGhpcy50ZW1wbGF0ZSwgdGhpcylcblxuICAgIC8vIGNvbnN0IGVsZW1lbnQgPSAkKGh0bWwpWzBdO1xuICAgIC8vIGNvbnN0IHRhcmdldEVsZW1lbnQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YXJnZXRUZXN0Jyk7XG4gICAgLy8gdGhpcy50YXJnZXQuYXR0YWNoVG9FbGVtZW50KHRhcmdldEVsZW1lbnQpO1xuICAgIGNvbnN0IHNwZWFrZXJEYXRhID0ge31cbiAgICBjb25zdCB0b2tlbiA9IGNoYXRIZWxwZXIuZ2V0VG9rZW5Gcm9tS2V5KHRoaXMuYWN0b3JLZXkpXG4gICAgaWYgKHRva2VuKSBzcGVha2VyRGF0YS50b2tlbiA9IHRva2VuLmRvY3VtZW50XG4gICAgZWxzZSBzcGVha2VyRGF0YS5hY3RvciA9IHRoaXMuYWN0b3JcblxuICAgIGNvbnN0IHNwZWFrZXIgPSBDaGF0TWVzc2FnZS5nZXRTcGVha2VyKHNwZWFrZXJEYXRhKVxuICAgIC8vIGlmKCB0aGlzLmFjdG9yLmlzVG9rZW4pIHNwZWFrZXIuYWxpYXMgPSB0aGlzLmFjdG9yLnRva2VuLm5hbWU7XG5cbiAgICBjb25zdCB1c2VyID0gdGhpcy5hY3Rvci51c2VyID8gdGhpcy5hY3Rvci51c2VyIDogZ2FtZS51c2VyXG4gICAgY29uc3QgY2hhdERhdGEgPSB7XG4gICAgICB1c2VyOiB1c2VyLmlkLFxuICAgICAgc3BlYWtlcixcbiAgICAgIGNvbnRlbnQ6IGh0bWxcbiAgICB9XG5cbiAgICBjb25zdCByb2xsTW9kZSA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdjb3JlJywgJ3JvbGxNb2RlJylcbiAgICBpZiAoWydnbXJvbGwnLCAnYmxpbmRyb2xsJ10uaW5jbHVkZXMocm9sbE1vZGUpKSB7XG4gICAgICBjaGF0RGF0YS53aGlzcGVyID0gQ2hhdE1lc3NhZ2UuZ2V0V2hpc3BlclJlY2lwaWVudHMoJ0dNJylcbiAgICB9XG4gICAgLy8gaWYgKCByb2xsTW9kZSA9PT0gJ2JsaW5kcm9sbCcgKSBjaGF0RGF0YVsnYmxpbmQnXSA9IHRydWU7XG4gICAgY2hhdERhdGEuYmxpbmQgPSBmYWxzZVxuXG4gICAgY29uc3QgY2hhdE1lc3NhZ2UgPSBhd2FpdCBDaGF0TWVzc2FnZS5jcmVhdGUoY2hhdERhdGEpXG5cbiAgICByZXR1cm4gY2hhdE1lc3NhZ2VcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZUNoYXRDYXJkICgpIHtcbiAgICB0aGlzLmNhbGNUYXJnZXRzRGlmZmljdWx0eSgpXG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRoaXMudGVtcGxhdGUsIHRoaXMpXG5cbiAgICBjb25zdCBtZXNzYWdlID0gZ2FtZS5tZXNzYWdlcy5nZXQodGhpcy5tZXNzYWdlSWQpXG5cbiAgICBjb25zdCBtc2cgPSBhd2FpdCBtZXNzYWdlLnVwZGF0ZSh7IGNvbnRlbnQ6IGh0bWwgfSlcbiAgICBhd2FpdCB1aS5jaGF0LnVwZGF0ZU1lc3NhZ2UobXNnLCBmYWxzZSlcbiAgICByZXR1cm4gbXNnXG4gIH1cblxuICB0b2dnbGVGbGFnIChmbGFnTmFtZSkge1xuICAgIGNvbnN0IGZsYWcgPSBmbGFnTmFtZS5pbmNsdWRlcygnLScpXG4gICAgICA/IGNoYXRIZWxwZXIuaHlwaGVuVG9DYW1lbENhc2UoZmxhZ05hbWUpXG4gICAgICA6IGZsYWdOYW1lXG4gICAgaWYgKFxuICAgICAgZmxhZyA9PT0gJ3NpbmdsZVNob3QnIHx8XG4gICAgICBmbGFnID09PSAnbXVsdGlwbGVTaG90cycgfHxcbiAgICAgIGZsYWcgPT09ICdmdWxsQXV0bydcbiAgICApIHtcbiAgICAgIHRoaXMuc2luZ2xlU2hvdCA9IGZhbHNlXG4gICAgICB0aGlzLm11bHRpcGxlU2hvdHMgPSBmYWxzZVxuICAgICAgdGhpcy5mdWxsQXV0byA9IGZhbHNlXG4gICAgICBpZiAoZmxhZyA9PT0gJ2Z1bGxBdXRvJykgdGhpcy5idXJzdCA9IGZhbHNlXG4gICAgICB0aGlzW2ZsYWddID0gdHJ1ZVxuICAgIH0gZWxzZSBpZiAoZmxhZyA9PT0gJ2J1cnN0Jykge1xuICAgICAgdGhpcy5mdWxsQXV0byA9IGZhbHNlXG4gICAgICBpZiAoIXRoaXMuc2luZ2xlU2hvdCAmJiAhdGhpcy5tdWx0aXBsZVNob3RzKSB0aGlzLnNpbmdsZVNob3QgPSB0cnVlXG4gICAgICB0aGlzLmJ1cnN0ID0gIXRoaXMuYnVyc3RcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpc1tmbGFnXSA9ICF0aGlzW2ZsYWddXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcmVzb2x2ZUNhcmQgKCkge1xuICAgIHRoaXMucm9sbHMgPSBbXVxuICAgIGlmICh0aGlzLm11bHRpVGFyZ2V0KSB7XG4gICAgICBsZXQgd2VhcG9uTWFsZnVuY3Rpb24gPSBmYWxzZVxuICAgICAgbGV0IGluZGV4ID0gMFxuICAgICAgd2hpbGUgKCF3ZWFwb25NYWxmdW5jdGlvbiAmJiB0aGlzLnNob3RzLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHJvbGwgPSBhd2FpdCB0aGlzLnNob290QXRUYXJnZXQodGhpcy5zaG90c1tpbmRleF0pXG4gICAgICAgIGlmIChyb2xsLmRpY2U/LnJvbGwpIHtcbiAgICAgICAgICBhd2FpdCBDb0M3RGljZS5zaG93Um9sbERpY2UzZChyb2xsLmRpY2Uucm9sbClcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aGlzLndlYXBvbi5zaG9vdEJ1bGxldHMoXG4gICAgICAgICAgcGFyc2VJbnQodGhpcy5zaG90c1tpbmRleF0uYnVsbGV0c1Nob3QpICtcbiAgICAgICAgICAgIHBhcnNlSW50KHRoaXMuc2hvdHNbaW5kZXhdLnRyYW5zaXRCdWxsZXRzKVxuICAgICAgICApXG4gICAgICAgIGlmIChyb2xsLmhhc01hbGZ1bmN0aW9uKSB7XG4gICAgICAgICAgcm9sbC5pc1N1Y2Nlc3MgPSBmYWxzZVxuICAgICAgICAgIHdlYXBvbk1hbGZ1bmN0aW9uID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIGluZGV4KytcbiAgICAgICAgdGhpcy5yb2xscy5wdXNoKHJvbGwpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJvbGwgPSBhd2FpdCB0aGlzLnNob290QXRUYXJnZXQoKVxuICAgICAgaWYgKHJvbGwuZGljZT8ucm9sbCkge1xuICAgICAgICBhd2FpdCBDb0M3RGljZS5zaG93Um9sbERpY2UzZChyb2xsLmRpY2Uucm9sbClcbiAgICAgIH1cbiAgICAgIGxldCBidWxsZXRGaXJlZCA9IHRoaXMuYnVyc3RcbiAgICAgICAgPyBwYXJzZUludCh0aGlzLndlYXBvbi5zeXN0ZW0udXNlc1BlclJvdW5kLmJ1cnN0KVxuICAgICAgICA6IDFcbiAgICAgIGlmIChidWxsZXRGaXJlZCA+PSB0aGlzLnRvdGFsQW1tbykgYnVsbGV0RmlyZWQgPSB0aGlzLnRvdGFsQW1tb1xuICAgICAgY29uc3Qgc2hvdCA9IHtcbiAgICAgICAgdGFyZ2V0OiB0aGlzLmFjdGl2ZVRhcmdldCxcbiAgICAgICAgZXh0cmVtZVJhbmdlOiB0aGlzLmFjdGl2ZVRhcmdldC5leHRyZW1lUmFuZ2UsXG4gICAgICAgIGFjdG9yS2V5OiB0aGlzLmFjdGl2ZVRhcmdldC5hY3RvcktleSxcbiAgICAgICAgYWN0b3JOYW1lOiB0aGlzLmFjdGl2ZVRhcmdldC5uYW1lLFxuICAgICAgICBkaWZmaWN1bHR5OiB0aGlzLmFjdGl2ZVRhcmdldC5zaG90RGlmZmljdWx0eS5sZXZlbCxcbiAgICAgICAgbW9kaWZpZXI6IHRoaXMuYWN0aXZlVGFyZ2V0LnNob3REaWZmaWN1bHR5Lm1vZGlmaWVyLFxuICAgICAgICBkYW1hZ2U6IHRoaXMuYWN0aXZlVGFyZ2V0LnNob3REaWZmaWN1bHR5LmRhbWFnZSxcbiAgICAgICAgYnVsbGV0c1Nob3Q6IGJ1bGxldEZpcmVkLFxuICAgICAgICB0cmFuc2l0QnVsbGV0czogMCxcbiAgICAgICAgdHJhbnNpdDogZmFsc2VcbiAgICAgIH1cbiAgICAgIGF3YWl0IHRoaXMud2VhcG9uLnNob290QnVsbGV0cyhidWxsZXRGaXJlZClcblxuICAgICAgaWYgKHJvbGwuaGFzTWFsZnVuY3Rpb24pIHtcbiAgICAgICAgcm9sbC5pc1N1Y2Nlc3MgPSBmYWxzZVxuICAgICAgfVxuICAgICAgdGhpcy5zaG90cy5wdXNoKHNob3QpXG4gICAgICB0aGlzLnJvbGxzLnB1c2gocm9sbClcbiAgICB9XG4gICAgdGhpcy5yZXNvbHZlZCA9IHRydWVcbiAgICB0aGlzLnJvbGxlZCA9IHRydWVcblxuICAgIGF3YWl0IHRoaXMudXBkYXRlQ2hhdENhcmQoKVxuICB9XG5cbiAgYXN5bmMgc2hvb3RBdFRhcmdldCAoc2hvdCA9IG51bGwpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBzaG90XG4gICAgICA/IHRoaXMuZ2V0VGFyZ2V0RnJvbUtleShzaG90LmFjdG9yS2V5KVxuICAgICAgOiB0aGlzLmFjdGl2ZVRhcmdldFxuICAgIGNvbnN0IGNoZWNrID0gbmV3IENvQzdDaGVjaygpXG4gICAgY2hlY2suYWN0b3JLZXkgPSB0aGlzLmFjdG9yS2V5XG4gICAgY2hlY2suYWN0b3IgPSB0aGlzLmFjdG9yS2V5XG4gICAgY2hlY2suaXRlbSA9IHRoaXMuaXRlbUlkXG4gICAgLy8gQ29tYmF0IHJvbGwgY2Fubm90IGJlIGJsaW5kIG9yIHVua25vd25cbiAgICBjaGVjay5pc0JsaW5kID0gZmFsc2VcbiAgICBjaGVjay5pc1Vua29ud24gPSBmYWxzZVxuICAgIGlmICh0aGlzLmF1dG9GaXJlKSBjaGVjay5za2lsbCA9IHRoaXMuYXV0b1dlYXBvblNraWxsXG4gICAgZWxzZSBjaGVjay5za2lsbCA9IHRoaXMubWFpbldlYXBvblNraWxsXG4gICAgaWYgKHRoaXMubXVsdGlUYXJnZXQpIHtcbiAgICAgIGNoZWNrLmRpZmZpY3VsdHkgPSBzaG90LmRpZmZpY3VsdHlcbiAgICAgIGNoZWNrLmRpY2VNb2RpZmllciA9IHNob3QubW9kaWZpZXJcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jYWxjVGFyZ2V0c0RpZmZpY3VsdHkoKVxuICAgICAgdGhpcy50b3RhbEJ1bGxldHNGaXJlZCA9IHBhcnNlSW50KHRoaXMudG90YWxCdWxsZXRzRmlyZWQpICsgMVxuICAgICAgaWYgKHRoaXMuYWltaW5nKSB7XG4gICAgICAgIHRoaXMuYWltaW5nID0gZmFsc2VcbiAgICAgICAgdGhpcy5haW1lZCA9IHRydWVcbiAgICAgIH1cbiAgICAgIGNoZWNrLmRpZmZpY3VsdHkgPSB0aGlzLmFjdGl2ZVRhcmdldC5zaG90RGlmZmljdWx0eS5sZXZlbFxuICAgICAgY2hlY2suZGljZU1vZGlmaWVyID0gdGhpcy5hY3RpdmVUYXJnZXQuc2hvdERpZmZpY3VsdHkubW9kaWZpZXJcbiAgICB9XG5cbiAgICBjaGVjay5kZXRhaWxzID0gYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlRhcmdldCcpfTogJHt0YXJnZXQubmFtZX1gXG4gICAgY2hlY2sudGFyZ2V0S2V5ID0gdGFyZ2V0LmFjdG9yS2V5XG5cbiAgICBhd2FpdCBjaGVjay5yb2xsKClcbiAgICByZXR1cm4gY2hlY2tcbiAgfVxuXG4gIHN0YXRpYyBnZXRGcm9tTWVzc2FnZUlkIChtZXNzYWdlSWQpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gZ2FtZS5tZXNzYWdlcy5nZXQobWVzc2FnZUlkKVxuICAgIGlmICghbWVzc2FnZSkgcmV0dXJuIG51bGxcbiAgICBjb25zdCBjYXJkID0gJChtZXNzYWdlLmNvbnRlbnQpWzBdXG5cbiAgICBjb25zdCBpbml0aWF0b3IgPSBDb0M3UmFuZ2VJbml0aWF0b3IuZ2V0RnJvbUNhcmQoY2FyZCwgbWVzc2FnZUlkKVxuICAgIGluaXRpYXRvci5tZXNzYWdlSWQgPSBtZXNzYWdlSWRcblxuICAgIHJldHVybiBpbml0aWF0b3JcbiAgfVxuXG4gIGNoYW5nZVZvbGxleVNpemUgKHgpIHtcbiAgICB0aGlzLnZvbGxleVNpemUgPSB0aGlzLnZvbGxleVNpemUgKyB4XG4gICAgdGhpcy51cGRhdGVDaGF0Q2FyZCgpXG4gIH1cblxuICBzdGF0aWMgdXBkYXRlQ2FyZFN3aXRjaCAoZXZlbnQsIHB1Ymxpc2hVcGRhdGUgPSB0cnVlKSB7XG4gICAgY29uc3QgY2FyZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLnJhbmdlLmluaXRpYXRvcicpXG4gICAgY29uc3QgZmxhZyA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5mbGFnXG4gICAgY29uc3QgY2FtZWxGbGFnID0gY2hhdEhlbHBlci5oeXBoZW5Ub0NhbWVsQ2FzZShmbGFnKVxuXG4gICAgLy8gdXBkYXRlIG9ubHkgZm9yIGxvY2FsIHBsYXllclxuICAgIGlmICghcHVibGlzaFVwZGF0ZSkge1xuICAgICAgY2FyZC5kYXRhc2V0W2NhbWVsRmxhZ10gPSBjYXJkLmRhdGFzZXRbY2FtZWxGbGFnXSAhPT0gJ3RydWUnXG4gICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUoJ3N3aXRjaGVkLW9uJylcbiAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5zZWxlY3RlZCA9IGNhcmQuZGF0YXNldFtjYW1lbEZsYWddXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVwZGF0ZSBjYXJkIGZvciBhbGwgcGxheWVyXG4gICAgICBjb25zdCBpbml0aWF0b3IgPSBDb0M3UmFuZ2VJbml0aWF0b3IuZ2V0RnJvbUNhcmQoY2FyZClcbiAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygndGFyZ2V0LWZsYWcnKSkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy50YXJnZXQnKVxuICAgICAgICBjb25zdCBrZXkgPSBwYXJzZUludCh0YXJnZXQuZGF0YXNldC50YXJnZXRLZXkpXG4gICAgICAgIGluaXRpYXRvci50YXJnZXRzW2tleV0udG9nZ2xlRmxhZyhjYW1lbEZsYWcpXG4gICAgICB9IGVsc2UgaW5pdGlhdG9yLnRvZ2dsZUZsYWcoY2FtZWxGbGFnKVxuICAgICAgaW5pdGlhdG9yLnVwZGF0ZUNoYXRDYXJkKClcbiAgICB9XG4gIH1cblxuICBwYXNzUm9sbCAocm9sbEluZGV4KSB7XG4gICAgY29uc3Qgcm9sbCA9IHRoaXMucm9sbHNbcm9sbEluZGV4XVxuICAgIGNvbnN0IGx1Y2tBbW91bnQgPSBwYXJzZUludChyb2xsLmx1Y2tOZWVkZWQpXG4gICAgaWYgKCF0aGlzLmFjdG9yLnNwZW5kTHVjayhsdWNrQW1vdW50KSkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgYCR7dGhpcy5hY3Rvci5uYW1lfSBkb2VzIG5vdCBoYXZlIGVub3VnaCBsdWNrIHRvIHBhc3MgdGhlIGNoZWNrYFxuICAgICAgKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHJvbGwuc3VjY2Vzc0xldmVsID0gcm9sbC5kaWZmaWN1bHR5XG4gICAgcm9sbC5pc1N1Y2Nlc3MgPSB0cnVlXG4gICAgcm9sbC5sdWNrU3BlbnQgPSB0cnVlXG4gICAgdGhpcy51cGRhdGVDaGF0Q2FyZCgpXG4gIH1cblxuICB1cGdyYWRlUm9sbCAocm9sbEluZGV4LCB1cGdyYWRlaW5kZXgpIHtcbiAgICAvLyBUT0RPIDogQ2hlY2sgaWYgdGhpcyBuZWVkcyB0byBiZSBhc3luY1xuICAgIGNvbnN0IHJvbGwgPSB0aGlzLnJvbGxzW3JvbGxJbmRleF1cbiAgICBjb25zdCBpbmNyZWFzZWRTdWNjZXNzID0gcm9sbC5pbmNyZWFzZVN1Y2Nlc3NbdXBncmFkZWluZGV4XVxuICAgIGNvbnN0IGx1Y2tBbW91bnQgPSBwYXJzZUludChpbmNyZWFzZWRTdWNjZXNzLmx1Y2tBbW91bnQpXG4gICAgaWYgKCF0aGlzLmFjdG9yLnNwZW5kTHVjayhsdWNrQW1vdW50KSkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgYCR7dGhpcy5hY3Rvci5uYW1lfSBkb2VzIG5vdCBoYXZlIGVub3VnaCBsdWNrIHRvIHBhc3MgdGhlIGNoZWNrYFxuICAgICAgKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IG5ld1N1Y2Nlc3NMZXZlbCA9IHBhcnNlSW50KGluY3JlYXNlZFN1Y2Nlc3MubmV3U3VjY2Vzc0xldmVsKVxuICAgIHJvbGwuc3VjY2Vzc0xldmVsID0gbmV3U3VjY2Vzc0xldmVsXG4gICAgaWYgKHJvbGwuZGlmZmljdWx0eSA8PSBuZXdTdWNjZXNzTGV2ZWwpIHJvbGwuaXNTdWNjZXNzID0gdHJ1ZVxuICAgIHJvbGwubHVja1NwZW50ID0gdHJ1ZVxuICAgIHRoaXMudXBkYXRlQ2hhdENhcmQoKSAvLyBUT0RPIDogQ2hlY2sgaWYgdGhpcyBuZWVkcyB0byBiZSBhc3luY1xuICB9XG5cbiAgc3RhdGljIGdldEZyb21DYXJkIChjYXJkLCBtZXNzYWdlSWQgPSBudWxsKSB7XG4gICAgY29uc3QgcmFuZ2VJbml0aWF0b3IgPSBuZXcgQ29DN1JhbmdlSW5pdGlhdG9yKClcbiAgICByYW5nZUluaXRpYXRvci5fdGFyZ2V0cyA9IFtdXG4gICAgaWYgKG1lc3NhZ2VJZCkgcmFuZ2VJbml0aWF0b3IubWVzc2FnZUlkID0gbWVzc2FnZUlkXG4gICAgZWxzZSBpZiAoY2FyZC5jbG9zZXN0KCcubWVzc2FnZScpKSB7XG4gICAgICByYW5nZUluaXRpYXRvci5tZXNzYWdlSWQgPSBjYXJkLmNsb3Nlc3QoJy5tZXNzYWdlJykuZGF0YXNldC5tZXNzYWdlSWRcbiAgICB9XG5cbiAgICBjaGF0SGVscGVyLmdldE9iamVjdEZyb21FbGVtZW50KHJhbmdlSW5pdGlhdG9yLCBjYXJkKVxuICAgIGNvbnN0IGNhcmRUYXJnZXRzID0gY2FyZC5xdWVyeVNlbGVjdG9yQWxsKCcudGFyZ2V0JylcbiAgICBmb3IgKGNvbnN0IHQgb2YgY2FyZFRhcmdldHMpIHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IENvQzdSYW5nZVRhcmdldC5nZXRGcm9tRWxlbWVudCh0KVxuICAgICAgcmFuZ2VJbml0aWF0b3IudGFyZ2V0cy5wdXNoKHRhcmdldClcbiAgICB9XG5cbiAgICBjb25zdCBjYXJkU2hvdHMgPSBjYXJkLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zaG90JylcbiAgICBpZiAoY2FyZFNob3RzKSB7XG4gICAgICBmb3IgKGNvbnN0IHMgb2YgY2FyZFNob3RzKSB7XG4gICAgICAgIGNvbnN0IHNob3QgPSB7fVxuICAgICAgICBjaGF0SGVscGVyLmdldE9iamVjdEZyb21FbGVtZW50KHNob3QsIHMpXG4gICAgICAgIHJhbmdlSW5pdGlhdG9yLnNob3RzLnB1c2goc2hvdClcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZWxzZSB7XG4gICAgLy8gIGNvbnN0IHNob3QgPSB7XG4gICAgLy8gICAgICBzaG90T3JkZXI6IDAsXG4gICAgLy8gICAgICBhY3RvcktleTogbnVsbCxcbiAgICAvLyAgICAgIGFjdG9yTmFtZTogJ2R1bW15J1xuICAgIC8vICB9XG4gICAgLy8gfVxuXG4gICAgcmFuZ2VJbml0aWF0b3Iucm9sbHMgPSBbXVxuICAgIGNvbnN0IHJvbGxzID0gY2FyZC5xdWVyeVNlbGVjdG9yQWxsKCcucm9sbC1yZXN1bHQnKVxuICAgIGZvciAoY29uc3QgciBvZiByb2xscykge1xuICAgICAgY29uc3Qgcm9sbCA9IENvQzdSb2xsLmdldEZyb21FbGVtZW50KHIpXG4gICAgICByYW5nZUluaXRpYXRvci5yb2xscy5wdXNoKHJvbGwpXG4gICAgfVxuXG4gICAgcmFuZ2VJbml0aWF0b3IuZGFtYWdlID0gW11cbiAgICBjb25zdCBkYW1hZ2VSb2xscyA9IGNhcmQucXVlcnlTZWxlY3RvckFsbCgnLmRhbWFnZS1yZXN1bHRzJylcbiAgICBmb3IgKGNvbnN0IGRyIG9mIGRhbWFnZVJvbGxzKSB7XG4gICAgICBjb25zdCBkYW1hZ2VSb2xsID0gQ29DN0RhbWFnZS5nZXRGcm9tRWxlbWVudChkcilcbiAgICAgIHJhbmdlSW5pdGlhdG9yLmRhbWFnZS5wdXNoKGRhbWFnZVJvbGwpXG4gICAgfVxuXG4gICAgcmV0dXJuIHJhbmdlSW5pdGlhdG9yXG4gIH1cblxuICBhc3luYyByb2xsRGFtYWdlICgpIHtcbiAgICB0aGlzLmRhbWFnZSA9IFtdXG4gICAgY29uc3QgaGl0cyA9IHRoaXMuc3VjY2Vzc2Z1bEhpdHNcblxuICAgIC8vIGxldCB2b2xsZXlTaXplID0gMTtcbiAgICAvLyBpZiggdGhpcy5mdWxsQXV0bykge1xuICAgIC8vICB2b2xsZXlTaXplID0gdGhpcy52b2xsZXlTaXplO1xuICAgIC8vICBpZih2b2xsZXlTaXplIDwgMykgdm9sbGV5U2l6ZSA9IDM7XG4gICAgLy8gfVxuICAgIC8vIGlmKCB0aGlzLmJ1cnN0KSB2b2xsZXlTaXplID0gcGFyc2VJbnQodGhpcy53ZWFwb24uZGF0YS5kYXRhLnVzZXNQZXJSb3VuZC5idXJzdCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoaXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBoID0gaGl0c1tpXVxuICAgICAgY29uc3Qgdm9sbGV5U2l6ZSA9IHBhcnNlSW50KGguc2hvdC5idWxsZXRzU2hvdClcbiAgICAgIGNvbnN0IGRhbWFnZVJvbGxzID0gW11cblxuICAgICAgaWYgKHZvbGxleVNpemUgPiAwKSB7XG4gICAgICAgIGxldCBkYW1hZ2VGb3JtdWxhID0gU3RyaW5nKGguc2hvdC5kYW1hZ2UpXG4gICAgICAgIGlmICghZGFtYWdlRm9ybXVsYSB8fCBkYW1hZ2VGb3JtdWxhID09PSAnJykgZGFtYWdlRm9ybXVsYSA9ICcwJ1xuICAgICAgICBjb25zdCBkYW1hZ2VEaWUgPSBDb0M3RGFtYWdlLmdldE1haW5EaWUoZGFtYWdlRm9ybXVsYSlcbiAgICAgICAgY29uc3QgbWF4RGFtYWdlID0gbmV3IFJvbGwoZGFtYWdlRm9ybXVsYSlbKCFmb3VuZHJ5LnV0aWxzLmlzTmV3ZXJWZXJzaW9uKGdhbWUudmVyc2lvbiwgJzEyJykgPyAnZXZhbHVhdGUnIDogJ2V2YWx1YXRlU3luYycpLyogLy8gRm91bmRyeVZUVCB2MTEgKi9dKHsgbWF4aW1pemU6IHRydWUgfSkudG90YWxcbiAgICAgICAgY29uc3QgY3JpdGljYWxEYW1hZ2VGb3JtdWxhID0gdGhpcy53ZWFwb24uaW1wYWxlXG4gICAgICAgICAgPyBgJHtkYW1hZ2VGb3JtdWxhfSArICR7bWF4RGFtYWdlfWBcbiAgICAgICAgICA6IGAke21heERhbWFnZX1gXG4gICAgICAgIGNvbnN0IGNyaXRpY2FsRGFtYWdlRGllID0gQ29DN0RhbWFnZS5nZXRNYWluRGllKGNyaXRpY2FsRGFtYWdlRm9ybXVsYSlcblxuICAgICAgICBsZXQgaW1wYWxpbmdTaG90cyA9IDBcbiAgICAgICAgbGV0IHN1Y2Nlc3NmdWxTaG90cyA9IDBcbiAgICAgICAgbGV0IGNyaXRpY2FsID0gZmFsc2VcbiAgICAgICAgaWYgKHRoaXMuZnVsbEF1dG8gfHwgdGhpcy5idXJzdCkge1xuICAgICAgICAgIHN1Y2Nlc3NmdWxTaG90cyA9IE1hdGguZmxvb3Iodm9sbGV5U2l6ZSAvIDIpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1Y2Nlc3NmdWxTaG90cyA9PT0gMCkgc3VjY2Vzc2Z1bFNob3RzID0gMVxuICAgICAgICBpZiAoaC5yb2xsLnN1Y2Nlc3NMZXZlbCA+PSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmV4dHJlbWUpIHtcbiAgICAgICAgICBpbXBhbGluZ1Nob3RzID0gc3VjY2Vzc2Z1bFNob3RzXG4gICAgICAgICAgc3VjY2Vzc2Z1bFNob3RzID0gdm9sbGV5U2l6ZSAtIGltcGFsaW5nU2hvdHNcbiAgICAgICAgICBjcml0aWNhbCA9IHRydWVcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmNyaXRpY2FsICE9PSBoLnJvbGwuc3VjY2Vzc0xldmVsICYmXG4gICAgICAgICAgICAoQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5leHRyZW1lIDw9IGgucm9sbC5kaWZmaWN1bHR5IHx8XG4gICAgICAgICAgICAgIGguc2hvdC5leHRyZW1lUmFuZ2UpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBzdWNjZXNzZnVsU2hvdHMgPSB2b2xsZXlTaXplXG4gICAgICAgICAgICBpbXBhbGluZ1Nob3RzID0gMFxuICAgICAgICAgICAgY3JpdGljYWwgPSBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0b3RhbCA9IDBcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHN1Y2Nlc3NmdWxTaG90czsgaW5kZXgrKykge1xuICAgICAgICAgIGNvbnN0IHJvbGwgPSBuZXcgUm9sbChkYW1hZ2VGb3JtdWxhKVxuICAgICAgICAgIC8qKiBNT0RJRiAwLjgueCAqKi9cbiAgICAgICAgICBhd2FpdCByb2xsLmV2YWx1YXRlKHsgYXN5bmM6IHRydWUgfSlcbiAgICAgICAgICBhd2FpdCBDb0M3RGljZS5zaG93Um9sbERpY2UzZChyb2xsKVxuICAgICAgICAgIC8qKioqKioqKioqKioqKioqKi9cbiAgICAgICAgICBkYW1hZ2VSb2xscy5wdXNoKHtcbiAgICAgICAgICAgIGZvcm11bGE6IGRhbWFnZUZvcm11bGEsXG4gICAgICAgICAgICB0b3RhbDogcm9sbC50b3RhbCxcbiAgICAgICAgICAgIGRpZTogZGFtYWdlRGllLFxuICAgICAgICAgICAgY3JpdGljYWw6IGZhbHNlXG4gICAgICAgICAgfSlcbiAgICAgICAgICB0b3RhbCArPSByb2xsLnRvdGFsXG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGltcGFsaW5nU2hvdHM7IGluZGV4KyspIHtcbiAgICAgICAgICBjb25zdCByb2xsID0gbmV3IFJvbGwoY3JpdGljYWxEYW1hZ2VGb3JtdWxhKVxuICAgICAgICAgIC8qKiBNT0RJRiAwLjgueCAqKi9cbiAgICAgICAgICBhd2FpdCByb2xsLmV2YWx1YXRlKHsgYXN5bmM6IHRydWUgfSlcbiAgICAgICAgICBhd2FpdCBDb0M3RGljZS5zaG93Um9sbERpY2UzZChyb2xsKVxuICAgICAgICAgIC8qKioqKioqKioqKioqKioqKi9cbiAgICAgICAgICBkYW1hZ2VSb2xscy5wdXNoKHtcbiAgICAgICAgICAgIGZvcm11bGE6IGNyaXRpY2FsRGFtYWdlRm9ybXVsYSxcbiAgICAgICAgICAgIHRvdGFsOiByb2xsLnRvdGFsLFxuICAgICAgICAgICAgZGllOiBjcml0aWNhbERhbWFnZURpZSxcbiAgICAgICAgICAgIGNyaXRpY2FsOiB0cnVlXG4gICAgICAgICAgfSlcbiAgICAgICAgICB0b3RhbCArPSByb2xsLnRvdGFsXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdGFyZ2V0TmFtZSA9ICdkdW1teSdcbiAgICAgICAgbGV0IHRhcmdldCA9IGNoYXRIZWxwZXIuZ2V0VG9rZW5Gcm9tS2V5KGgucm9sbC50YXJnZXRLZXkpXG4gICAgICAgIGlmICghdGFyZ2V0KSB0YXJnZXQgPSBjaGF0SGVscGVyLmdldEFjdG9yRnJvbUtleShoLnJvbGwudGFyZ2V0S2V5KSAvLyBSRUZBQ1RPUklORyAoMilcbiAgICAgICAgaWYgKHRhcmdldCkgdGFyZ2V0TmFtZSA9IHRhcmdldC5uYW1lXG5cbiAgICAgICAgdGhpcy5kYW1hZ2UucHVzaCh7XG4gICAgICAgICAgdGFyZ2V0S2V5OiBoLnJvbGwudGFyZ2V0S2V5LFxuICAgICAgICAgIHRhcmdldE5hbWUsXG4gICAgICAgICAgcm9sbHM6IGRhbWFnZVJvbGxzLFxuICAgICAgICAgIHRvdGFsLFxuICAgICAgICAgIGNyaXRpY2FsLFxuICAgICAgICAgIGRlYWx0OiBmYWxzZSxcbiAgICAgICAgICByZXN1bHRTdHJpbmc6IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcucmFuZ2VDb21iYXREYW1hZ2UnLCB7XG4gICAgICAgICAgICBuYW1lOiB0YXJnZXROYW1lLFxuICAgICAgICAgICAgdG90YWxcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZGFtYWdlUm9sbGVkID0gdGhpcy5kYW1hZ2UubGVuZ3RoICE9PSAwXG4gICAgdGhpcy51cGRhdGVDaGF0Q2FyZCgpXG4gIH1cblxuICBhc3luYyBkZWFsRGFtYWdlICgpIHtcbiAgICBmb3IgKGxldCBkSW5kZXggPSAwOyBkSW5kZXggPCB0aGlzLmRhbWFnZS5sZW5ndGg7IGRJbmRleCsrKSB7XG4gICAgICBjb25zdCBhY3RvciA9IGNoYXRIZWxwZXIuZ2V0QWN0b3JGcm9tS2V5KHRoaXMuZGFtYWdlW2RJbmRleF0udGFyZ2V0S2V5KSAvLyBSRUZBQ1RPUklORyAoMilcbiAgICAgIGlmIChhY3RvciA9PT0gbnVsbCkge1xuICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ob1RhcmdldFRvRGFtYWdlJykpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRhbWFnZVtkSW5kZXhdLnRvdGFsVGFrZW4gPSAwXG4gICAgICAgIHRoaXMuZGFtYWdlW2RJbmRleF0udG90YWxBYnNvcmJlZCA9IDBcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBsZXQgckluZGV4ID0gMDtcbiAgICAgICAgICBySW5kZXggPCB0aGlzLmRhbWFnZVtkSW5kZXhdLnJvbGxzLmxlbmd0aDtcbiAgICAgICAgICBySW5kZXgrK1xuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBkZWFsdEFtb3VudCA9IGF3YWl0IGFjdG9yLmRlYWxEYW1hZ2UoXG4gICAgICAgICAgICB0aGlzLmRhbWFnZVtkSW5kZXhdLnJvbGxzW3JJbmRleF0udG90YWxcbiAgICAgICAgICApXG4gICAgICAgICAgdGhpcy5kYW1hZ2VbZEluZGV4XS50b3RhbFRha2VuICs9IGRlYWx0QW1vdW50XG4gICAgICAgICAgdGhpcy5kYW1hZ2VbZEluZGV4XS5yb2xsc1tySW5kZXhdLnRha2VuID0gZGVhbHRBbW91bnRcbiAgICAgICAgICB0aGlzLmRhbWFnZVtkSW5kZXhdLnJvbGxzW3JJbmRleF0uYWJzb3JiZWQgPVxuICAgICAgICAgICAgdGhpcy5kYW1hZ2VbZEluZGV4XS5yb2xsc1tySW5kZXhdLnRvdGFsIC0gZGVhbHRBbW91bnRcbiAgICAgICAgICB0aGlzLmRhbWFnZVtkSW5kZXhdLnRvdGFsQWJzb3JiZWQgKz1cbiAgICAgICAgICAgIHRoaXMuZGFtYWdlW2RJbmRleF0ucm9sbHNbckluZGV4XS50b3RhbCAtIGRlYWx0QW1vdW50XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kYW1hZ2VbZEluZGV4XS5kZWFsdCA9IHRydWVcbiAgICAgICAgdGhpcy5kYW1hZ2VbZEluZGV4XS5yZXN1bHRTdHJpbmcgPSBnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgICdDb0M3LnJhbmdlQ29tYmF0RGFtYWdlQXJtb3InLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuZGFtYWdlW2RJbmRleF0udGFyZ2V0TmFtZSxcbiAgICAgICAgICAgIHRvdGFsOiB0aGlzLmRhbWFnZVtkSW5kZXhdLnRvdGFsVGFrZW4sXG4gICAgICAgICAgICBhcm1vcjogdGhpcy5kYW1hZ2VbZEluZGV4XS50b3RhbEFic29yYmVkXG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZGFtYWdlRGVhbHQgPSB0cnVlXG4gICAgdGhpcy51cGRhdGVDaGF0Q2FyZCgpXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvQzdSYW5nZVRhcmdldCB7XG4gIGNvbnN0cnVjdG9yIChhY3RvcktleSA9IG51bGwpIHtcbiAgICB0aGlzLmFjdG9yS2V5ID0gYWN0b3JLZXlcbiAgICB0aGlzLmNvdmVyID0gZmFsc2VcbiAgICB0aGlzLnBvaW50QmxhbmtSYW5nZSA9IGZhbHNlXG4gICAgdGhpcy5iYXNlUmFuZ2UgPSB0cnVlXG4gICAgdGhpcy5sb25nUmFuZ2UgPSBmYWxzZVxuICAgIHRoaXMuZXh0cmVtZVJhbmdlID0gZmFsc2VcbiAgICB0aGlzLmluTWVsZWUgPSBmYWxzZVxuICB9XG5cbiAgZ2V0IGJpZyAoKSB7XG4gICAgaWYgKHVuZGVmaW5lZCA9PT0gdGhpcy5fYmlnKSB7XG4gICAgICBpZiAodGhpcy5hY3RvciAmJiB0aGlzLmFjdG9yLmJ1aWxkKSB0aGlzLl9iaWcgPSB0aGlzLmFjdG9yLmJ1aWxkID49IDRcbiAgICAgIGVsc2UgdGhpcy5fYmlnID0gZmFsc2VcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2JpZ1xuICB9XG5cbiAgc2V0IGJpZyAoYikge1xuICAgIHRoaXMuX2JpZyA9IGJcbiAgfVxuXG4gIGdldCBzbWFsbCAoKSB7XG4gICAgaWYgKHVuZGVmaW5lZCA9PT0gdGhpcy5fc21hbGwpIHtcbiAgICAgIGlmICh0aGlzLmFjdG9yICYmIHRoaXMuYWN0b3IuYnVpbGQpIHRoaXMuX3NtYWxsID0gdGhpcy5hY3Rvci5idWlsZCA8PSAtMlxuICAgICAgZWxzZSB0aGlzLl9zbWFsbCA9IGZhbHNlXG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9zbWFsbFxuICB9XG5cbiAgc2V0IHNtYWxsIChiKSB7XG4gICAgdGhpcy5fc21hbGwgPSBiXG4gIH1cblxuICBnZXQgbm9ybWFsICgpIHtcbiAgICByZXR1cm4gIXRoaXMuYmlnICYmICF0aGlzLnNtYWxsXG4gIH1cblxuICBzZXQgbm9ybWFsIChiKSB7XG4gICAgdGhpcy5fYmlnID0gZmFsc2VcbiAgICB0aGlzLl9zbWFsbCA9IGZhbHNlXG4gIH1cblxuICBnZXQgaXNGYXN0ICgpIHtcbiAgICBpZiAodGhpcy5hY3RvciAmJiB0aGlzLmFjdG9yLm1vdikgcmV0dXJuIHRoaXMuYWN0b3IubW92ID49IDhcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGdldCBmYXN0ICgpIHtcbiAgICBpZiAodW5kZWZpbmVkID09PSB0aGlzLl9mYXN0KSB7XG4gICAgICAvLyBpZiggdGhpcy5hY3RvciAmJiB0aGlzLmFjdG9yLm1vdikgdGhpcy5fZmFzdCA9IHRoaXMuYWN0b3IubW92ID49IDg7XG4gICAgICAvLyBlbHNlIHRoaXMuX2Zhc3QgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2Zhc3QgPSBmYWxzZVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fZmFzdFxuICB9XG5cbiAgc2V0IGZhc3QgKGIpIHtcbiAgICB0aGlzLl9mYXN0ID0gYlxuICB9XG5cbiAgZ2V0IGFjdG9yICgpIHtcbiAgICBpZiAodGhpcy5hY3RvcktleSAmJiAhdGhpcy5fYWN0b3IpIHtcbiAgICAgIHRoaXMuX2FjdG9yID0gY2hhdEhlbHBlci5nZXRBY3RvckZyb21LZXkodGhpcy5hY3RvcktleSkgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9hY3RvclxuICB9XG5cbiAgZ2V0IG5hbWUgKCkge1xuICAgIGlmICh0aGlzLnRva2VuKSByZXR1cm4gdGhpcy50b2tlbi5uYW1lXG4gICAgaWYgKHRoaXMuYWN0b3IpIHJldHVybiB0aGlzLmFjdG9yLm5hbWVcbiAgICByZXR1cm4gJ0R1bW15J1xuICB9XG5cbiAgZ2V0IGltZyAoKSB7XG4gICAgaWYgKHRoaXMudG9rZW4pIHtcbiAgICAgIGlmICh0aGlzLnRva2VuLmRvY3VtZW50Py50ZXh0dXJlLnNyYykge1xuICAgICAgICByZXR1cm4gdGhpcy50b2tlbi5kb2N1bWVudD8udGV4dHVyZS5zcmNcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuYWN0b3IpIHJldHVybiB0aGlzLmFjdG9yLmRhdGEuaW1nXG4gICAgcmV0dXJuICcuLi9pY29ucy9zdmcvbXlzdGVyeS1tYW4tYmxhY2suc3ZnJ1xuICB9XG5cbiAgZ2V0IHRva2VuICgpIHtcbiAgICBpZiAoIXRoaXMuX3Rva2VuICYmIHRoaXMuYWN0b3JLZXkpIHtcbiAgICAgIHRoaXMuX3Rva2VuID0gY2hhdEhlbHBlci5nZXRUb2tlbkZyb21LZXkodGhpcy5hY3RvcktleSlcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3Rva2VuXG4gIH1cblxuICBnZXQgc2l6ZVRleHQgKCkge1xuICAgIGlmICh0aGlzLmJpZykge1xuICAgICAgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5yYW5nZUNvbWJhdENhcmQuQmlnVGFyZ2V0VGl0bGUnKVxuICAgIH1cbiAgICBpZiAodGhpcy5zbWFsbCkge1xuICAgICAgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5yYW5nZUNvbWJhdENhcmQuU21hbGxUYXJnZXRUaXRsZScpXG4gICAgfVxuICAgIHJldHVybiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcucmFuZ2VDb21iYXRDYXJkLk5vcm1hbFRhcmdldFRpdGxlJylcbiAgfVxuXG4gIGdldCBzaXplTGFiZWwgKCkge1xuICAgIGlmICh0aGlzLmJpZykgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5yYW5nZUNvbWJhdENhcmQuQmlnVGFyZ2V0JylcbiAgICBpZiAodGhpcy5zbWFsbCkgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5jb21iYXRDYXJkLlNtYWxsVGFyZ2V0JylcbiAgICByZXR1cm4gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LnJhbmdlQ29tYmF0Q2FyZC5Ob3JtYWxUYXJnZXQnKVxuICB9XG5cbiAgZ2V0IGRpZmZpY3VsdHkgKCkge1xuICAgIGlmICh0aGlzLmJhc2VSYW5nZSB8fCB0aGlzLnBvaW50QmxhbmtSYW5nZSkge1xuICAgICAgcmV0dXJuIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhclxuICAgIH1cbiAgICBpZiAodGhpcy5sb25nUmFuZ2UpIHJldHVybiBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmhhcmRcbiAgICBpZiAodGhpcy5leHRyZW1lUmFuZ2UpIHJldHVybiBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmV4dHJlbWVcbiAgICByZXR1cm4gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5pbXBvc3NpYmxlXG4gIH1cblxuICBnZXQgbW9kaWZpZXIgKCkge1xuICAgIGxldCBtb2RpZmllciA9IDBcbiAgICBpZiAodGhpcy5jb3ZlcikgbW9kaWZpZXItLVxuICAgIGlmICh0aGlzLnBvaW50QmxhbmtSYW5nZSkgbW9kaWZpZXIrK1xuICAgIGlmICh0aGlzLmZhc3QpIG1vZGlmaWVyLS1cbiAgICBpZiAodGhpcy5zbWFsbCkgbW9kaWZpZXItLVxuICAgIGlmICh0aGlzLmJpZykgbW9kaWZpZXIrK1xuICAgIGlmICh0aGlzLmluTWVsZWUpIG1vZGlmaWVyLS1cbiAgICBpZiAodGhpcy5zdXJwcmlzZWQpIG1vZGlmaWVyKytcbiAgICByZXR1cm4gbW9kaWZpZXJcbiAgfVxuXG4gIHNldCB0b2tlbiAodCkge1xuICAgIHRoaXMuX3Rva2VuID0gdFxuICB9XG5cbiAgc3RhdGljIGdldEZyb21FbGVtZW50IChlbGVtZW50KSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gbmV3IENvQzdSYW5nZVRhcmdldCgpXG4gICAgY2hhdEhlbHBlci5nZXRPYmplY3RGcm9tRWxlbWVudCh0YXJnZXQsIGVsZW1lbnQpXG4gICAgcmV0dXJuIHRhcmdldFxuICB9XG5cbiAgc3RhdGljIGNoYW5nZURpc3BsYXllZFRhcmdldCAoZXZlbnQpIHtcbiAgICBpZiAoIWV2ZW50LmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd0YXJnZXQtc2VsZWN0b3InKSkgcmV0dXJuIG51bGxcbiAgICBjb25zdCB0YXJnZXRTZWxlY3RvciA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCB0YXJnZXRzID0gdGFyZ2V0U2VsZWN0b3IuY2xvc2VzdCgnLnRhcmdldHMnKVxuICAgIGNvbnN0IHRhcmdldExpc3QgPSB0YXJnZXRzLnF1ZXJ5U2VsZWN0b3JBbGwoJy50YXJnZXQnKVxuICAgIHJldHVybiB0YXJnZXRMaXN0XG4gIH1cblxuICBhdHRhY2hUb0VsZW1lbnQgKGVsZW1lbnQpIHtcbiAgICBjaGF0SGVscGVyLmF0dGFjaE9iamVjdFRvRWxlbWVudCh0aGlzLCBlbGVtZW50KVxuICB9XG5cbiAgdG9nZ2xlRmxhZyAoZmxhZykge1xuICAgIGlmIChcbiAgICAgIGZsYWcgPT09ICdiYXNlUmFuZ2UnIHx8XG4gICAgICBmbGFnID09PSAnbG9uZ1JhbmdlJyB8fFxuICAgICAgZmxhZyA9PT0gJ2V4dHJlbWVSYW5nZScgfHxcbiAgICAgIGZsYWcgPT09ICdwb2ludEJsYW5rUmFuZ2UnXG4gICAgKSB7XG4gICAgICB0aGlzLnBvaW50QmxhbmtSYW5nZSA9IGZhbHNlXG4gICAgICB0aGlzLmJhc2VSYW5nZSA9IGZhbHNlXG4gICAgICB0aGlzLmxvbmdSYW5nZSA9IGZhbHNlXG4gICAgICB0aGlzLmV4dHJlbWVSYW5nZSA9IGZhbHNlXG4gICAgICB0aGlzLm91dE9mUmFuZ2UgPSBmYWxzZVxuICAgICAgdGhpc1tmbGFnXSA9IHRydWVcbiAgICB9IGVsc2UgaWYgKGZsYWcgPT09ICdzaXplJykge1xuICAgICAgaWYgKHRoaXMuc21hbGwpIHtcbiAgICAgICAgdGhpcy5zbWFsbCA9IGZhbHNlXG4gICAgICAgIHRoaXMuYmlnID0gdHJ1ZVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmJpZykge1xuICAgICAgICB0aGlzLnNtYWxsID0gZmFsc2VcbiAgICAgICAgdGhpcy5iaWcgPSBmYWxzZVxuICAgICAgfSBlbHNlIHRoaXMuc21hbGwgPSB0cnVlXG4gICAgfSBlbHNlIHRoaXNbZmxhZ10gPSAhdGhpc1tmbGFnXVxuICAgIGlmIChmbGFnID09PSAnZmFzdCcgJiYgdGhpcy5mYXN0ICYmICF0aGlzLmlzRmFzdCkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy53YXJuKFxuICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lldhcm5GYXN0VGFyZ2V0V2l0aFdyb25nTU9WJywge1xuICAgICAgICAgIG1vdjogdGhpcy5hY3Rvci5tb3ZcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICB9XG4gIH1cbn1cbiIsIi8qIGdsb2JhbCAkLCBDaGF0TWVzc2FnZSwgQ09OU1QsIGdhbWUsIFRva2VuLCB0b2tlbkRhdGEsIHVpICovXG5pbXBvcnQgeyBDb0M3Q2hlY2sgfSBmcm9tICcuL2NoZWNrLmpzJ1xuaW1wb3J0IHsgQ09DNyB9IGZyb20gJy4vY29uZmlnLmpzJ1xuaW1wb3J0IHsgQ29DN01lbGVlSW5pdGlhdG9yIH0gZnJvbSAnLi9jaGF0L2NvbWJhdC9tZWxlZS1pbml0aWF0b3IuanMnXG5pbXBvcnQgeyBDb0M3TWVsZWVUYXJnZXQgfSBmcm9tICcuL2NoYXQvY29tYmF0L21lbGVlLXRhcmdldC5qcydcbmltcG9ydCB7IENvQzdNZWxlZVJlc29sdGlvbiB9IGZyb20gJy4vY2hhdC9jb21iYXQvbWVsZWUtcmVzb2x1dGlvbi5qcydcbmltcG9ydCB7IENvQzdSYW5nZUluaXRpYXRvciB9IGZyb20gJy4vY2hhdC9yYW5nZWNvbWJhdC5qcydcbmltcG9ydCB7IENvQzdSb2xsLCBjaGF0SGVscGVyLCBpc0N0cmxLZXkgfSBmcm9tICcuL2NoYXQvaGVscGVyLmpzJ1xuLy8gaW1wb3J0IHsgQ29DN0RhbWFnZVJvbGwgfSBmcm9tICcuL2NoYXQvZGFtYWdlY2FyZHMuanMnO1xuaW1wb3J0IHsgQ29DN0NvbkNoZWNrIH0gZnJvbSAnLi9jaGF0L2NvbmNoZWNrLmpzJ1xuaW1wb3J0IHsgU2FuQ2hlY2tDYXJkIH0gZnJvbSAnLi9jaGF0L2NhcmRzL3Nhbi1jaGVjay5qcydcbmltcG9ydCB7IE9wcG9zZWRDaGVja0NhcmQgfSBmcm9tICcuL2NoYXQvY2FyZHMvb3Bwb3NlZC1yb2xsLmpzJ1xuaW1wb3J0IHsgQ29tYmluZWRDaGVja0NhcmQgfSBmcm9tICcuL2NoYXQvY2FyZHMvY29tYmluZWQtcm9sbC5qcydcbmltcG9ydCB7IEludGVyYWN0aXZlQ2hhdENhcmQgfSBmcm9tICcuL2NoYXQvaW50ZXJhY3RpdmUtY2hhdC1jYXJkLmpzJ1xuaW1wb3J0IHsgRGFtYWdlQ2FyZCB9IGZyb20gJy4vY2hhdC9jYXJkcy9kYW1hZ2UuanMnXG5pbXBvcnQgeyBDb0M3RGljZSB9IGZyb20gJy4vZGljZS5qcydcblxuY29uc3QgQ0hBVF9DT0M3X01FU1NBR0UgPSB7XG4gIEZBS0VST0xMOlxuICAgICc8ZGl2IGNsYXNzPVwiZGljZS1yb2xsXCI+PGRpdiBjbGFzcz1cImRpY2UtcmVzdWx0XCI+PGRpdiBjbGFzcz1cImRpY2UtZm9ybXVsYVwiPj8/PzwvZGl2PjxoNCBjbGFzcz1cImRpY2UtdG90YWxcIj4/PC9oND48L2Rpdj48L2Rpdj4nXG59XG5leHBvcnQgY2xhc3MgQ29DN0NoYXQge1xuICBzdGF0aWMgcmVuZGVyQ2hhdE1lc3NhZ2VIb29rIChjaGF0TWVzc2FnZSwgaHRtbCkge1xuICAgIGlmIChjaGF0TWVzc2FnZS5nZXRGbGFnKCdDb0M3JywgJ0dNU2VsZlJvbGwnKSAmJiAhZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgIGh0bWwuZmluZCgnLndoaXNwZXItdG8nKS5yZW1vdmUoKVxuICAgICAgaHRtbFxuICAgICAgICAuZmluZCgnLmZsYXZvci10ZXh0JylcbiAgICAgICAgLnJlcGxhY2VXaXRoKFxuICAgICAgICAgIGA8c3BhbiBjbGFzcz1cImZsYXZvci10ZXh0XCI+JHtnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAnQ29DNy5Sb2xsU2VjcmV0RGljZSdcbiAgICAgICAgICApfTwvc3Bhbj5gXG4gICAgICAgIClcbiAgICAgIGh0bWxcbiAgICAgICAgLmZpbmQoJy5tZXNzYWdlLWNvbnRlbnQnKVxuICAgICAgICAucmVwbGFjZVdpdGgoXG4gICAgICAgICAgYDxkaXYgY2xhc3M9XCJtZXNzYWdlLWNvbnRlbnRcIj4ke0NIQVRfQ09DN19NRVNTQUdFLkZBS0VST0xMfTwvZGl2PmBcbiAgICAgICAgKVxuICAgIH1cblxuICAgIGlmIChjaGF0TWVzc2FnZS5nZXRGbGFnKCdDb0M3JywgJ3JlbW92ZVdpc3BlclRhcmdldHMnKSAmJiAhZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgIGh0bWwuZmluZCgnLndoaXNwZXItdG8nKS5yZW1vdmUoKVxuICAgIH1cblxuICAgIGlmIChjaGF0TWVzc2FnZS5nZXRGbGFnKCdDb0M3JywgJ2Zha2VSb2xsJykgJiYgZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgIGh0bWxcbiAgICAgICAgLmZpbmQoJy5mbGF2b3ItdGV4dCcpXG4gICAgICAgIC5yZXBsYWNlV2l0aChnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuS2VlcGVyU2VudERlY295JykpXG4gICAgICBodG1sLmZpbmQoJy5tZXNzYWdlLWNvbnRlbnQnKS5yZW1vdmUoKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBmYWtlUm9sbE1lc3NhZ2UgKCkge1xuICAgIGNvbnN0IGNoYXREYXRhID0ge1xuICAgICAgdXNlcjogZ2FtZS51c2VyLmlkLFxuICAgICAgZmxhdm9yOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuUm9sbFNlY3JldERpY2UnKSxcbiAgICAgIHdoaXNwZXI6IGdhbWUudXNlcnMucGxheWVycyxcbiAgICAgIHR5cGU6IENPTlNULkNIQVRfTUVTU0FHRV9UWVBFUy5XSElTUEVSLFxuICAgICAgZmxhZ3M6IHtcbiAgICAgICAgQ29DNzoge1xuICAgICAgICAgIEdNU2VsZlJvbGw6IGZhbHNlLFxuICAgICAgICAgIHJlbW92ZVdpc3BlclRhcmdldHM6IHRydWUsXG4gICAgICAgICAgZmFrZVJvbGw6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNvbnRlbnQ6IENIQVRfQ09DN19NRVNTQUdFLkZBS0VST0xMXG4gICAgfVxuXG4gICAgQ2hhdE1lc3NhZ2UuY3JlYXRlKGNoYXREYXRhKVxuICB9XG5cbiAgLy8gVE9ETyByZW1wbGFjZXIgbGVzIGdldEVsZW1lbnRzQnl4eHh4IHBhciBxdWVyeVNlbGVjdG9yXG5cbiAgLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKlxuICAgKiAgSW5pdCBzb2NrZXRzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gICAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4gIHN0YXRpYyByZWFkeSAoKSB7XG4gICAgLy8gY29uc29sZS5sb2coJy0tPkNvQzdDaGF0LnJlYWR5Jyk7XG4gICAgZ2FtZS5Db0M3ID0gJ2luaXQnXG4gIH1cblxuICAvLyBzdGF0aWMgb25NZXNzYWdlKCBkYXRhKSB7XG4gIC8vICBjb25zb2xlLmxvZygnLS0+Q29DN0NoYXQub25NZXNzYWdlJyk7XG4gIC8vICBjb25zb2xlLmxvZyhgbWVzc2FnZSByZWNlaXZlZCBzZW5kJmVyIDoke2RhdGEudXNlcn0gbWVzc2FnZSB0eXBlIDogJHtkYXRhLmFjdGlvbn0gZm9yIG1lc3NhZ2UgOiR7ZGF0YS5tZXNzYWdlSWR9YCk7XG4gIC8vIH1cblxuICAvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqXG4gICAqICBDaGF0IE1lc3NhZ2UgSGVscGVycyAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuICBzdGF0aWMgYXN5bmMgY2hhdExpc3RlbmVycyAoYXBwLCBodG1sKSB7XG4gICAgaHRtbC5vbihcbiAgICAgICdjbGljaycsXG4gICAgICAnLmNhcmQtYnV0dG9ucyBidXR0b24nLFxuICAgICAgQ29DN0NoYXQuX29uQ2hhdENhcmRBY3Rpb24uYmluZCh0aGlzKVxuICAgIClcbiAgICAvLyBodG1sLm9uKCdjbGljaycsICcuY2FyZC1idXR0b25zIGJ1dHRvbicsIENvQzdDaGF0Ll9vbkNoYXRDYXJkVGVzdC5iaW5kKHRoaXMpKTtcbiAgICBodG1sLm9uKFxuICAgICAgJ2NsaWNrJyxcbiAgICAgICcuY2FyZC10aXRsZScsXG4gICAgICBDb0M3Q2hhdC5fb25DaGF0Q2FyZFRvZ2dsZUNvbnRlbnQuYmluZCh0aGlzKVxuICAgIClcbiAgICBodG1sLm9uKFxuICAgICAgJ2NsaWNrJyxcbiAgICAgICcucmFkaW8tc3dpdGNoJyxcbiAgICAgIENvQzdDaGF0Ll9vbkNoYXRDYXJkUmFkaW9Td2l0Y2guYmluZCh0aGlzKVxuICAgIClcbiAgICBodG1sLm9uKFxuICAgICAgJ2NsaWNrJyxcbiAgICAgICcucGFuZWwtc3dpdGNoJyxcbiAgICAgIENvQzdDaGF0Ll9vbkNoYXRDYXJkVG9nZ2xlU3dpdGNoLmJpbmQodGhpcylcbiAgICApXG5cbiAgICBodG1sLm9uKFxuICAgICAgJ2NsaWNrJyxcbiAgICAgICcuc2ltcGxlLWZsYWcnLFxuICAgICAgQ29DN0NoYXQuX29uQ2hhdENhcmRUb2dnbGVTd2l0Y2guYmluZCh0aGlzKVxuICAgIClcbiAgICBodG1sLm9uKCdjbGljaycsICcudm9sbGV5LXNpemUnLCBDb0M3Q2hhdC5fb25DaGF0Q2FyZFZvbGxleVNpemUuYmluZCh0aGlzKSlcblxuICAgIGh0bWwub24oXG4gICAgICAnY2xpY2snLFxuICAgICAgJy5kcm9wZG93bi1lbGVtZW50JyxcbiAgICAgIENvQzdDaGF0Ll9vbkRyb3BEb3duRWxlbWVudFNlbGVjdGVkLmJpbmQodGhpcylcbiAgICApXG4gICAgaHRtbC5vbignY2xpY2snLCAnLnNpbXBsZS10b2dnbGUnLCBDb0M3Q2hhdC5fb25Ub2dnbGVTZWxlY3RlZC5iaW5kKHRoaXMpKVxuICAgIC8vIGh0bWwub24oJ2NsaWNrJywgJy5pcy1vdXRudW1iZXJlZCcsIENvQzdDaGF0Ll9vbk91dG51bWJlcmVkU2VsZWN0ZWQuYmluZCh0aGlzKSk7XG5cbiAgICBodG1sLm9uKCdjbGljaycsICcudGFyZ2V0LXNlbGVjdG9yJywgQ29DN0NoYXQuX29uVGFyZ2V0U2VsZWN0LmJpbmQodGhpcykpXG5cbiAgICBodG1sLm9uKCdkYmxjbGljaycsICcub3Blbi1hY3RvcicsIENvQzdDaGF0Ll9vbk9wZW5BY3Rvci5iaW5kKHRoaXMpKVxuXG4gICAgaHRtbC5vbignY2xpY2snLCAnY29jNy1pbmxpbmUtcmVzdWx0JywgQ29DN0NoYXQuX29uSW5saW5lLmJpbmQodGhpcykpXG5cbiAgICAvLyBSb2xsQ2FyZC5iaW5kTGlzdGVybmVycyggaHRtbCk7XG4gICAgT3Bwb3NlZENoZWNrQ2FyZC5iaW5kTGlzdGVybmVycyhodG1sKVxuICAgIENvbWJpbmVkQ2hlY2tDYXJkLmJpbmRMaXN0ZXJuZXJzKGh0bWwpXG4gIH1cblxuICBzdGF0aWMgX29uT3BlbkFjdG9yIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBhY3RvcktleSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5hY3RvcktleVxuICAgIGlmIChhY3RvcktleSkge1xuICAgICAgY29uc3QgYWN0b3IgPSBjaGF0SGVscGVyLmdldEFjdG9yRnJvbUtleShhY3RvcktleSkgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgICBpZiAoYWN0b3IuaXNPd25lcikgYWN0b3Iuc2hlZXQucmVuZGVyKHRydWUpXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIG9uVXBkYXRlQ2hhdE1lc3NhZ2UgKGNoYXRNZXNzYWdlKSB7XG4gICAgdWkuY2hhdC5zY3JvbGxCb3R0b20oKVxuXG4gICAgLy8gaWYoIGNoYXRNZXNzYWdlLmdldEZsYWcoICdDb0M3JywgJ3JldmVsZWQnKSl7XG4gICAgLy8gfVxuICAgIGlmIChnYW1lLnVzZXIuaXNHTSAmJiAoY2hhdE1lc3NhZ2UudHlwZSA9PT0gMCAvKiAvLyBGb3VuZHJ5VlRUIHYxMSAqLyB8fCBjaGF0TWVzc2FnZS5zdHlsZSA9PT0gMCAvKiAvLyBGb3VuZHJ5VlRUIHYxMiAqLykpIHtcbiAgICAgIGNvbnN0IGNhcmQgPSAkKGNoYXRNZXNzYWdlLmNvbnRlbnQpWzBdXG4gICAgICBpZiAoY2FyZC5jbGFzc0xpc3QuY29udGFpbnMoJ21lbGVlJykpIHtcbiAgICAgICAgaWYgKGNhcmQuZGF0YXNldC5yZXNvbHZlZCA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgaWYgKGNhcmQuY2xhc3NMaXN0LmNvbnRhaW5zKCdpbml0aWF0b3InKSkge1xuICAgICAgICAgICAgaWYgKGNhcmQuZGF0YXNldC50YXJnZXRDYXJkKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGluaXRpYXRvciA9IENvQzdNZWxlZUluaXRpYXRvci5nZXRGcm9tTWVzc2FnZUlkKFxuICAgICAgICAgICAgICAgIGNoYXRNZXNzYWdlLmlkXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gQ29DN01lbGVlVGFyZ2V0LmdldEZyb21NZXNzYWdlSWQoXG4gICAgICAgICAgICAgICAgaW5pdGlhdG9yLnRhcmdldENhcmRcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBpZiAodGFyZ2V0LnJlc29sdmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzb2x1dGlvbkNhcmQgPSBuZXcgQ29DN01lbGVlUmVzb2x0aW9uKFxuICAgICAgICAgICAgICAgICAgY2hhdE1lc3NhZ2UuaWQsXG4gICAgICAgICAgICAgICAgICB0YXJnZXQubWVzc2FnZUlkLFxuICAgICAgICAgICAgICAgICAgdGFyZ2V0LnJlc29sdXRpb25DYXJkXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGF3YWl0IHJlc29sdXRpb25DYXJkLnJlc29sdmUoKVxuICAgICAgICAgICAgICAgIGlmICghaW5pdGlhdG9yLmNoZWNrUmV2ZWFsZWQpIGF3YWl0IGluaXRpYXRvci5yZXZlYWxDaGVjaygpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnN0IGluaXRpYXRvciA9IENvQzdNZWxlZUluaXRpYXRvci5nZXRGcm9tTWVzc2FnZUlkKFxuICAgICAgICAgICAgICAgIGNoYXRNZXNzYWdlLmlkXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgaWYgKGluaXRpYXRvci5yZXNvbHV0aW9uQ2FyZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc29sdXRpb25DYXJkID0gbmV3IENvQzdNZWxlZVJlc29sdGlvbihcbiAgICAgICAgICAgICAgICAgIGNoYXRNZXNzYWdlLmlkLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIGluaXRpYXRvci5yZXNvbHV0aW9uQ2FyZFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBhd2FpdCByZXNvbHV0aW9uQ2FyZC5yZXNvbHZlKClcbiAgICAgICAgICAgICAgICBpZiAoIWluaXRpYXRvci5jaGVja1JldmVhbGVkKSBhd2FpdCBpbml0aWF0b3IucmV2ZWFsQ2hlY2soKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjYXJkLmNsYXNzTGlzdC5jb250YWlucygndGFyZ2V0JykpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IENvQzdNZWxlZVRhcmdldC5nZXRGcm9tTWVzc2FnZUlkKGNoYXRNZXNzYWdlLmlkKVxuICAgICAgICAgICAgY29uc3QgcmVzb2x1dGlvbkNhcmQgPSBuZXcgQ29DN01lbGVlUmVzb2x0aW9uKFxuICAgICAgICAgICAgICB0YXJnZXQucGFyZW50TWVzc2FnZUlkLFxuICAgICAgICAgICAgICBjaGF0TWVzc2FnZS5pZCxcbiAgICAgICAgICAgICAgdGFyZ2V0LnJlc29sdXRpb25DYXJkXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBhd2FpdCByZXNvbHV0aW9uQ2FyZC5yZXNvbHZlKClcbiAgICAgICAgICAgIGlmICghdGFyZ2V0Lm1lbGVlSW5pdGlhdG9yLmNoZWNrUmV2ZWFsZWQpIHtcbiAgICAgICAgICAgICAgYXdhaXQgdGFyZ2V0Lm1lbGVlSW5pdGlhdG9yLnJldmVhbENoZWNrKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgcmVuZGVyTWVzc2FnZUhvb2sgKG1lc3NhZ2UsIGh0bWwpIHtcbiAgICB1aS5jaGF0LnNjcm9sbEJvdHRvbSgpXG5cbiAgICBJbnRlcmFjdGl2ZUNoYXRDYXJkLmJpbmRMaXN0ZW5lcnMoaHRtbClcblxuICAgIGlmIChtZXNzYWdlLmdldEZsYWcoJ0NvQzcnLCAnY2hlY2tSZXZlYWxlZCcpKSB7XG4gICAgICBodG1sLmZpbmQoJy5kaWNlLXJvbGwnKS5yZW1vdmVDbGFzcygnZ20tdmlzaWJsZS1vbmx5JylcbiAgICAgIGh0bWxbMF0uZGF0YXNldC5jaGVja1JldmVhbGVkID0gdHJ1ZVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBzaG93aW5nIGRyb3Bkb3duIHNlbGVjdGlvblxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcuZHJvcGJ0bicpXG4gICAgICAuY2xpY2soZXZlbnQgPT5cbiAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldFxuICAgICAgICAgIC5jbG9zZXN0KCcuZHJvcGRvd24nKVxuICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKCcuZHJvcGRvd24tY29udGVudCcpXG4gICAgICAgICAgLmNsYXNzTGlzdC50b2dnbGUoJ3Nob3cnKVxuICAgICAgKVxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcuZHJvcGRvd24nKVxuICAgICAgLm1vdXNlbGVhdmUoZXZlbnQgPT5cbiAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldFxuICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKCcuZHJvcGRvd24tY29udGVudCcpXG4gICAgICAgICAgLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKVxuICAgICAgKVxuXG4gICAgLy8gY29uc29sZS5sb2coJyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi0tPkNvQzdDaGF0Lm1lc3NhZ2VMaXN0ZW5lcnMgbWVzc2FnZSA6JyArIG1lc3NhZ2UuaWQpO1xuICAgIC8vIG1lc3NhZ2UuZGF0YS5jb250ZW50ID0gXCJcIjtcbiAgICAvLyBkYXRhLm1lc3NhZ2UuY29udGVudCA9IFwiXCI7XG5cbiAgICAvLyBXaGVuIGEgbmV3IGNhcmQgaXMgcHVibGlzaGVkLCBjaGVjayB3ZXRoZXIgaXQncyBhIHJvbGwgdGhhdCBtb2RpZmllcyBhbiBvdGhlciBjYXJkLlxuICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgY29uc3QgY2FyZCA9IGh0bWxbMF0ucXVlcnlTZWxlY3RvcignLmNvYzcuY2hhdC1jYXJkJylcbiAgICAgIGlmIChjYXJkKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBjYXJkLmNsYXNzTGlzdC5jb250YWlucygncm9sbC1jYXJkJykgJiZcbiAgICAgICAgICAhKGNhcmQuZGF0YXNldC5wcm9jZXNzZWQgPT09ICd0cnVlJykgJiZcbiAgICAgICAgICBjYXJkLmRhdGFzZXQucmVmTWVzc2FnZUlkXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IHJvbGwgPSBDb0M3Um9sbC5nZXRGcm9tRWxlbWVudChjYXJkKVxuXG4gICAgICAgICAgaWYgKGNhcmQuZGF0YXNldC5zaWRlID09PSAndGFyZ2V0Jykge1xuICAgICAgICAgICAgcm9sbC5kZWZlbmRhbnRJZCA9IGNhcmQuZGF0YXNldC50b2tlbklkXG4gICAgICAgICAgICAgID8gY2FyZC5kYXRhc2V0LnRva2VuSWRcbiAgICAgICAgICAgICAgOiBjYXJkLmRhdGFzZXQuYWN0b3JJZFxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2FyZC5kYXRhc2V0LnNpZGUgPT09ICdpbml0aWF0b3InKSB7XG4gICAgICAgICAgICByb2xsLmluaXRpYXRvcklkID0gY2FyZC5kYXRhc2V0LnRva2VuSWRcbiAgICAgICAgICAgICAgPyBjYXJkLmRhdGFzZXQudG9rZW5JZFxuICAgICAgICAgICAgICA6IGNhcmQuZGF0YXNldC5hY3RvcklkXG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcmQuZGF0YXNldC5wcm9jZXNzZWQgPSAndHJ1ZSdcblxuICAgICAgICAgIENvQzdDaGF0LnVwZGF0ZUNvbWJhdENhcmRUYXJnZXQocm9sbClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHVzZXJPbmx5ID0gaHRtbC5maW5kKCcudGFyZ2V0LW9ubHknKVxuICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiB1c2VyT25seSkge1xuICAgICAgaWYgKCFnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICAgICAgY29uc3QgYWN0b3JJZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWFjdG9yLWlkJylcbiAgICAgICAgaWYgKGFjdG9ySWQpIHtcbiAgICAgICAgICBpZiAoZ2FtZS5hY3RvcnMuZ2V0KGFjdG9ySWQpLmlzT3duZXIpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBnbU9ubHkgPSBodG1sLmZpbmQoJy5nbS1vbmx5JylcbiAgICBmb3IgKGNvbnN0IHpvbmUgb2YgZ21Pbmx5KSB7XG4gICAgICBpZiAoIWdhbWUudXNlci5pc0dNKSB7XG4gICAgICAgIHpvbmUuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHVzZXJWaXNpYmxlT25seSA9IGh0bWwuZmluZCgnLnVzZXItdmlzaWJsZS1vbmx5JylcbiAgICBmb3IgKGNvbnN0IGVsZW0gb2YgdXNlclZpc2libGVPbmx5KSB7XG4gICAgICBpZiAoZ2FtZS51c2VyLmlzR00pIGVsZW0uc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgIH1cblxuICAgIGNvbnN0IGdtVmlzaWJsZU9ubHkgPSBodG1sLmZpbmQoJy5nbS12aXNpYmxlLW9ubHknKVxuICAgIGZvciAoY29uc3QgZWxlbSBvZiBnbVZpc2libGVPbmx5KSB7XG4gICAgICBpZiAoIShnYW1lLnVzZXIuaXNHTSB8fCAoZ2FtZS51c2VyLmlzVHJ1c3RlZCAmJiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICd0cnVzdGVkQ2FuU2VlQ2hhdENhcmQnKSkpKSBlbGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICB9XG5cbiAgICBjb25zdCBvd25lclZpc2libGVPbmx5ID0gaHRtbC5maW5kKCcub3duZXItdmlzaWJsZS1vbmx5JylcbiAgICBmb3IgKGNvbnN0IHpvbmUgb2Ygb3duZXJWaXNpYmxlT25seSkge1xuICAgICAgLy8gVHJ5IHJldHJpZXZpbmcgYWN0b3JcbiAgICAgIGxldCBhY3RvciA9IENvQzdDaGF0Ll9nZXRBY3RvckZyb21LZXkoem9uZS5kYXRhc2V0Py5hY3RvcktleSkgLy8gVHJ5IHdpdGggc2VsZi5cbiAgICAgIGlmICghYWN0b3IpIGFjdG9yID0gQ29DN0NoYXQuX2dldENoYXRDYXJkQWN0b3Ioem9uZS5jbG9zZXN0KCcuY2hhdC1jYXJkJykpIC8vIFRyeSB3aXRoIGNsb3Nlc3QgY2hhdCBjYXJkLlxuICAgICAgaWYgKCFhY3Rvcikge1xuICAgICAgICBhY3RvciA9IENvQzdDaGF0Ll9nZXRBY3RvckZyb21LZXkoem9uZS5wYXJlbnRFbGVtZW50LmRhdGFzZXQuYWN0b3JLZXkpIC8vIFRyeSB3aXRoIHBhcmVudCBlbGVtZW50LlxuICAgICAgfVxuICAgICAgaWYgKCFhY3Rvcikge1xuICAgICAgICBhY3RvciA9IENvQzdDaGF0Ll9nZXRBY3RvckZyb21LZXkoXG4gICAgICAgICAgem9uZS5jbG9zZXN0KCdbZGF0YS1hY3Rvci1rZXldJyk/LmRhdGFzZXQuYWN0b3JLZXlcbiAgICAgICAgKSAvLyBUcnkgd2l0aCBjbG9zZXN0IGRhdGEtYWN0b3Ita2V5XG4gICAgICB9XG4gICAgICBpZiAoIWFjdG9yKSB7XG4gICAgICAgIGFjdG9yID0gQ29DN0NoYXQuX2dldEFjdG9yRnJvbUtleShcbiAgICAgICAgICB6b25lLmNsb3Nlc3QoJ1tkYXRhLXRva2VuLWtleV0nKT8uZGF0YXNldC5hY3RvcktleVxuICAgICAgICApIC8vIFRyeSB3aXRoIGNsb3Nlc3QgZGF0YS10b2tlbi1rZXlcbiAgICAgIH1cblxuICAgICAgLy8gY29uc3QgYWN0b3IgPSBnYW1lLmFjdG9ycy5nZXQoIGFjdG9ySWQpO1xuICAgICAgaWYgKChhY3RvciAmJiAhYWN0b3IuaXNPd25lcikgfHwgZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgICAgem9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgICB9IC8vIGlmIGN1cnJlbnQgdXNlciBkb2Vzbid0IG93biB0aGlzIGhlIGNhbid0IGludGVycmFjdFxuICAgICAgLy8gaWYoICFDb0M3Q2hhdC5pc0NhcmRPd25lciggem9uZS5jbG9zZXN0KCcuY2hhdC1jYXJkJykpKSB7em9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO31cbiAgICB9XG5cbiAgICBpZiAoIWdhbWUudXNlci5pc0dNKSB7XG4gICAgICAvLyBHTSBjYW4gc2VlIGV2ZXJ5dGhpbmdcbiAgICAgIGNvbnN0IG93bmVyT25seSA9IGh0bWwuZmluZCgnLm93bmVyLW9ubHknKVxuICAgICAgZm9yIChjb25zdCB6b25lIG9mIG93bmVyT25seSkge1xuICAgICAgICAvLyBUcnkgcmV0cmlldmluZyBhY3RvclxuICAgICAgICBsZXQgYWN0b3IgPSBDb0M3Q2hhdC5fZ2V0QWN0b3JGcm9tS2V5KFxuICAgICAgICAgIHpvbmUuZGF0YXNldD8uYWN0b3JLZXkgfHwgem9uZS5kYXRhc2V0Py5hY3RvcklkXG4gICAgICAgICkgLy8gVHJ5IHdpdGggc2VsZi5cbiAgICAgICAgaWYgKCFhY3Rvcikge1xuICAgICAgICAgIGFjdG9yID0gQ29DN0NoYXQuX2dldENoYXRDYXJkQWN0b3Ioem9uZS5jbG9zZXN0KCcuY2hhdC1jYXJkJykpIC8vIFRyeSB3aXRoIGNsb3Nlc3QgY2hhdCBjYXJkLlxuICAgICAgICB9XG4gICAgICAgIGlmICghYWN0b3IpIHtcbiAgICAgICAgICBhY3RvciA9IENvQzdDaGF0Ll9nZXRBY3RvckZyb21LZXkoem9uZS5wYXJlbnRFbGVtZW50LmRhdGFzZXQuYWN0b3JLZXkpIC8vIFRyeSB3aXRoIHBhcmVudCBlbGVtZW50LlxuICAgICAgICB9XG4gICAgICAgIGlmICghYWN0b3IpIHtcbiAgICAgICAgICBhY3RvciA9IENvQzdDaGF0Ll9nZXRBY3RvckZyb21LZXkoXG4gICAgICAgICAgICB6b25lLmNsb3Nlc3QoJ1tkYXRhLWFjdG9yLWtleV0nKT8uZGF0YXNldC5hY3RvcktleVxuICAgICAgICAgICkgLy8gVHJ5IHdpdGggY2xvc2VzdCBkYXRhLWFjdG9yLWtleVxuICAgICAgICB9XG4gICAgICAgIGlmICghYWN0b3IpIHtcbiAgICAgICAgICBhY3RvciA9IENvQzdDaGF0Ll9nZXRBY3RvckZyb21LZXkoXG4gICAgICAgICAgICB6b25lLmNsb3Nlc3QoJ1tkYXRhLXRva2VuLWtleV0nKT8uZGF0YXNldC5hY3RvcktleVxuICAgICAgICAgICkgLy8gVHJ5IHdpdGggY2xvc2VzdCBkYXRhLXRva2VuLWtleVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29uc3QgYWN0b3IgPSBnYW1lLmFjdG9ycy5nZXQoIGFjdG9ySWQpO1xuICAgICAgICBpZiAoKGFjdG9yICYmICFhY3Rvci5pc093bmVyKSB8fCAoIWFjdG9yICYmICFnYW1lLnVzZXIuaXNHTSkpIHtcbiAgICAgICAgICB6b25lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICAgICAgfSAvLyBpZiBjdXJyZW50IHVzZXIgZG9lc24ndCBvd24gdGhpcyBoZSBjYW4ndCBpbnRlcnJhY3RcbiAgICAgICAgLy8gaWYoICFDb0M3Q2hhdC5pc0NhcmRPd25lciggem9uZS5jbG9zZXN0KCcuY2hhdC1jYXJkJykpKSB7em9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO31cbiAgICAgIH1cblxuICAgICAgY29uc3QgZ21TZWxlY3RPbmx5ID0gaHRtbC5maW5kKCcuZ20tc2VsZWN0LW9ubHknKVxuICAgICAgaWYgKCEoZ2FtZS51c2VyLmlzVHJ1c3RlZCAmJiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICd0cnVzdGVkQ2FuTW9kZnlDaGF0Q2FyZCcpKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHNlbGVjdCBvZiBnbVNlbGVjdE9ubHkpIHtcbiAgICAgICAgICBzZWxlY3QuY2xhc3NMaXN0LmFkZCgnaW5hY3RpdmUnKVxuICAgICAgICAgIHNlbGVjdC5jbGFzc0xpc3QucmVtb3ZlKCdzaW1wbGUtZmxhZycpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0IGFjdGlvblR5cGVTdHJpbmcgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmaWdodEJhY2s6ICdDb0M3LmZpZ2h0QmFjaycsXG4gICAgICBtYW5ldXZlcjogJ0NvQzcubWFuZXV2ZXInLFxuICAgICAgZG9kZ2luZzogJ0NvQzcuZG9kZ2UnXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIF9vblRhcmdldFNlbGVjdCAoZXZlbnQpIHtcbiAgICBjb25zdCBpbmRleCA9IHBhcnNlSW50KGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5rZXkpXG4gICAgY29uc3QgdGFyZ2V0c1NlbGVjdG9yID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcudGFyZ2V0cy1zZWxlY3RvcicpXG4gICAgZm9yIChjb25zdCBpIG9mIHRhcmdldHNTZWxlY3Rvci5xdWVyeVNlbGVjdG9yQWxsKCdpbWcnKSkge1xuICAgICAgaS5zdHlsZS5ib3JkZXIgPSAnbm9uZSdcbiAgICB9XG4gICAgdGFyZ2V0c1NlbGVjdG9yXG4gICAgICAucXVlcnlTZWxlY3RvcihgW2RhdGEta2V5PVwiJHtpbmRleH1cIl1gKVxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoJ2ltZycpLnN0eWxlLmJvcmRlciA9ICcxcHggc29saWQgIzAwMCdcbiAgICBjb25zdCB0YXJnZXRzID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcudGFyZ2V0cycpXG4gICAgZm9yIChjb25zdCB0IG9mIHRhcmdldHMucXVlcnlTZWxlY3RvckFsbCgnLnRhcmdldCcpKSB7XG4gICAgICB0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICAgIHQuZGF0YXNldC5hY3RpdmUgPSAnZmFsc2UnXG4gICAgfVxuICAgIGNvbnN0IHRhcmdldFRvRGlzcGxheSA9IHRhcmdldHMucXVlcnlTZWxlY3RvcihcbiAgICAgIGBbZGF0YS10YXJnZXQta2V5PVwiJHtpbmRleH1cIl1gXG4gICAgKVxuICAgIHRhcmdldFRvRGlzcGxheS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJ1xuICAgIHRhcmdldFRvRGlzcGxheS5kYXRhc2V0LmFjdGl2ZSA9ICd0cnVlJ1xuICAgIC8vIGNvbnN0IGNoYXRDYXJkID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuY2hhdC1jYXJkLnJhbmdlJyk7XG4gICAgLy8gY29uc3QgcmFuZ2VJbml0aWF0b3IgPSBDb0M3UmFuZ2VJbml0aWF0b3IuZ2V0RnJvbUNhcmQoIGNoYXRDYXJkKTtcbiAgfVxuXG4gIHN0YXRpYyBfb25Ecm9wRG93bkVsZW1lbnRTZWxlY3RlZCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBjb25zdCBjYXJkID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuY2hhdC1jYXJkJylcbiAgICBpZiAoY2FyZC5jbGFzc0xpc3QuY29udGFpbnMoJ3RhcmdldCcpKSB7XG4gICAgICBDb0M3TWVsZWVUYXJnZXQudXBkYXRlU2VsZWN0ZWQoY2FyZCwgZXZlbnQpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBjbGVhciBhbGwgZHJvcCBkb3duIGFuZCBoaWdobGlnaHQgdGhpcyBwYXJ0aWN1bGFyIG9uZVxuICAgIGNvbnN0IGRyb3BEb3duQm94ZXMgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgICAuY2xvc2VzdCgnLnJlc3BvbnNlLXNlbGVjdGlvbicpXG4gICAgICAucXVlcnlTZWxlY3RvckFsbCgnLnRvZ2dsZS1zd2l0Y2gnKVxuICAgIGZvciAoY29uc3QgZHBkbkJveCBvZiBkcm9wRG93bkJveGVzKSB7XG4gICAgICBkcGRuQm94LmNsYXNzTGlzdC5yZW1vdmUoJ3N3aXRjaGVkLW9uJylcbiAgICB9XG4gICAgZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcudG9nZ2xlLXN3aXRjaCcpLmNsYXNzTGlzdC5hZGQoJ3N3aXRjaGVkLW9uJylcblxuICAgIC8vIGNsb3NlIGRyb3Bkb3duXG4gICAgZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuZHJvcGRvd24tY29udGVudCcpLmNsYXNzTGlzdC50b2dnbGUoJ3Nob3cnKVxuXG4gICAgLy8gRGlzcGxheSB0aGUgcm9sbCBidXR0b25cbiAgICBjb25zdCBzZWxlY3RlZEJveCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICAgIC5jbG9zZXN0KCcuZGVmZW5kZXItYWN0aW9uLXNlbGVjdCcpXG4gICAgICAucXVlcnlTZWxlY3RvcignLnNlbGVjdGVkLWFjdGlvbicpXG4gICAgc2VsZWN0ZWRCb3guc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgICBjb25zdCBidXR0b24gPSBzZWxlY3RlZEJveC5xdWVyeVNlbGVjdG9yKCdidXR0b24nKVxuXG4gICAgLy8gUGFzcyB0aGUgaW5pdGlhdG9yIElkIC0gQnVpbGQgY2FuIGJlIHJldHJpZXZlZCBmcm9tIHRoYXRcblxuICAgIC8vIFBhc3MgdGhlIGluaXRpYXRvciBpdGVtXG5cbiAgICAvLyBQYXNzIHRoZSBkZWZlbmRhbnQgSWRcblxuICAgIC8vIFBhc3MgdGhlIGRlZmVuZGFudCBhY3Rpb25cbiAgICBidXR0b24uZGF0YXNldC5hY3Rpb24gPSAnZGVmZW5kaW5nJ1xuICAgIGJ1dHRvbi5kYXRhc2V0LmFjdGlvblR5cGUgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuYWN0aW9uXG4gICAgYnV0dG9uLmRhdGFzZXQuZGVmZW5kZXJDaG9pY2UgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuYWN0aW9uXG4gICAgYnV0dG9uLmRhdGFzZXQuc2tpbGxJZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5za2lsbElkXG4gICAgYnV0dG9uLmRhdGFzZXQuc2tpbGxWYWx1ZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5za2lsbFZhbHVlXG4gICAgYnV0dG9uLmRhdGFzZXQuc2tpbGxOYW1lID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnNraWxsTmFtZVxuICAgIGJ1dHRvbi5kYXRhc2V0Lml0ZW1JZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC53ZWFwb25JZFxuICAgIGJ1dHRvbi5kYXRhc2V0Lml0ZW1OYW1lID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LndlYXBvbk5hbWVcblxuICAgIC8vIFB1dCBzb21lIHRleHQgaW4gdGhlIGJ1dHRvblxuICAgIHN3aXRjaCAoZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmFjdGlvbikge1xuICAgICAgY2FzZSAnbWFuZXV2ZXInOlxuICAgICAgICBidXR0b24uaW5uZXJUZXh0ID0gYCR7Z2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgIENPQzcuY29tYmF0Q2FyZHNbZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmFjdGlvbl1cbiAgICAgICAgKX0gOiAke2V2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5za2lsbE5hbWV9ICgke1xuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5za2lsbFZhbHVlXG4gICAgICAgIH0lKWBcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2ZpZ2h0QmFjayc6XG4gICAgICAgIGJ1dHRvbi5pbm5lclRleHQgPSBgJHtnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgQ09DNy5jb21iYXRDYXJkc1tldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuYWN0aW9uXVxuICAgICAgICApfSA6ICR7ZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LndlYXBvbk5hbWV9ICgke1xuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5za2lsbFZhbHVlXG4gICAgICAgIH0lKWBcbiAgICAgICAgYnJlYWtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgLy8gU2F2ZSBhY3Rpb24gZm9yIHRoZSByb2xsXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgX29uSW5saW5lIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBhID0gZXZlbnQuY3VycmVudFRhcmdldFxuXG4gICAgaWYgKGEuY2xhc3NMaXN0LmNvbnRhaW5zKCdpbmxpbmUtcmVzdWx0JykpIHtcbiAgICAgIGlmIChhLmNsYXNzTGlzdC5jb250YWlucygnZXhwYW5kZWQnKSkge1xuICAgICAgICByZXR1cm4gQ29DN0NoZWNrLl9jb2xsYXBzZUlubGluZVJlc3VsdChhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIENvQzdDaGVjay5fZXhwYW5kSW5saW5lUmVzdWx0KGEpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIF9vblRvZ2dsZVNlbGVjdGVkIChldmVudCkge1xuICAgIGNvbnN0IGNhcmQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5jaGF0LWNhcmQnKVxuICAgIGlmIChjYXJkLmNsYXNzTGlzdC5jb250YWlucygndGFyZ2V0JykpIHtcbiAgICAgIENvQzdNZWxlZVRhcmdldC51cGRhdGVTZWxlY3RlZChjYXJkLCBldmVudClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuc2tpbGxJZCA9PT0gJycpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkVycm9yTm9Eb2RnZVNraWxsJykpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBjbGVhciBhbGwgZHJvcCBkb3duIGFuZCBoaWdobGlnaHQgdGhpcyBwYXJ0aWN1bGFyIG9uZVxuICAgIGNvbnN0IGRyb3BEb3duQm94ZXMgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgICAuY2xvc2VzdCgnLnJlc3BvbnNlLXNlbGVjdGlvbicpXG4gICAgICAucXVlcnlTZWxlY3RvckFsbCgnLnRvZ2dsZS1zd2l0Y2gnKVxuICAgIGZvciAoY29uc3QgZHBkbkJveCBvZiBkcm9wRG93bkJveGVzKSB7XG4gICAgICBkcGRuQm94LmNsYXNzTGlzdC5yZW1vdmUoJ3N3aXRjaGVkLW9uJylcbiAgICB9XG4gICAgZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuYWRkKCdzd2l0Y2hlZC1vbicpIC8vIE5lZWQgdG8gdGVzdCBpZiBpdCdzIHJlYWxseSBhIGRvZGdlICEhIVxuXG4gICAgLy8gU2F2ZSBhY3Rpb24gZm9yIHRoZSByb2xsXG4gICAgY29uc3Qgc2VsZWN0ZWRCb3ggPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgICAuY2xvc2VzdCgnLmRlZmVuZGVyLWFjdGlvbi1zZWxlY3QnKVxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5zZWxlY3RlZC1hY3Rpb24nKVxuICAgIHNlbGVjdGVkQm94LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snXG4gICAgY29uc3QgYnV0dG9uID0gc2VsZWN0ZWRCb3gucXVlcnlTZWxlY3RvcignYnV0dG9uJylcblxuICAgIGJ1dHRvbi5kYXRhc2V0LmFjdGlvbiA9ICdkZWZlbmRpbmcnXG4gICAgYnV0dG9uLmRhdGFzZXQuYWN0aW9uVHlwZSA9ICdkb2RnaW5nJ1xuICAgIGJ1dHRvbi5kYXRhc2V0LmRlZmVuZGVyQ2hvaWNlID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmFjdGlvblxuICAgIGJ1dHRvbi5kYXRhc2V0LnNraWxsSWQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuc2tpbGxJZFxuICAgIGJ1dHRvbi5kYXRhc2V0LnNraWxsVmFsdWUgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuc2tpbGxWYWx1ZVxuICAgIGJ1dHRvbi5kYXRhc2V0LnNraWxsTmFtZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5za2lsbE5hbWVcblxuICAgIGJ1dHRvbi5pbm5lclRleHQgPSBgJHtnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICBDT0M3LmNvbWJhdENhcmRzW2V2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5hY3Rpb25dXG4gICAgKX0gOiAke2V2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5za2lsbE5hbWV9ICgke1xuICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnNraWxsVmFsdWVcbiAgICB9JSlgXG4gIH1cblxuICBzdGF0aWMgX29uQ2hhdENhcmRSYWRpb1N3aXRjaCAoZXZlbnQpIHtcbiAgICAvLyBjb25zb2xlLmxvZygnLS0+Q29DN0NoYXQuX29uQ2hhdENhcmRSYWRpb1N3aXRjaCcpO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBvcHRpb25MaXN0ID1cbiAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQucGFyZW50RWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdyYWRpby1zd2l0Y2gnKVxuICAgIGxldCBpbmRleFxuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IG9wdGlvbkxpc3QubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gb3B0aW9uTGlzdFtpbmRleF1cbiAgICAgIGlmIChlbGVtZW50LmRhdGFzZXQucHJvcGVydHkgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5wcm9wZXJ0eSkge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3N3aXRjaGVkLW9uJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnc3dpdGNoZWQtb24nKVxuICAgICAgfVxuICAgIH1cbiAgICBldmVudC5jdXJyZW50VGFyZ2V0LnBhcmVudEVsZW1lbnQuZGF0YXNldC5zZWxlY3RlZCA9XG4gICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQucHJvcGVydHlcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBfb25DaGF0Q2FyZFZvbGxleVNpemUgKGV2ZW50KSB7XG4gICAgY29uc3QgY2FyZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLmNoYXQtY2FyZCcpXG5cbiAgICBpZiAoY2FyZC5jbGFzc0xpc3QuY29udGFpbnMoJ3JhbmdlJykpIHtcbiAgICAgIGlmIChjYXJkLmNsYXNzTGlzdC5jb250YWlucygnaW5pdGlhdG9yJykpIHtcbiAgICAgICAgY29uc3QgcmFuZ2VDYXJkID0gQ29DN1JhbmdlSW5pdGlhdG9yLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnaW5jcmVhc2UnKSkge1xuICAgICAgICAgIHJhbmdlQ2FyZC5jaGFuZ2VWb2xsZXlTaXplKDEpXG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2RlY3JlYXNlJykpIHtcbiAgICAgICAgICByYW5nZUNhcmQuY2hhbmdlVm9sbGV5U2l6ZSgtMSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBfb25DaGF0Q2FyZFRvZ2dsZVN3aXRjaCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBjb25zdCBjYXJkID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuY2hhdC1jYXJkJylcbiAgICBpZiAoY2FyZC5jbGFzc0xpc3QuY29udGFpbnMoJ21lbGVlJykpIHtcbiAgICAgIGlmIChjYXJkLmNsYXNzTGlzdC5jb250YWlucygnaW5pdGlhdG9yJykpIHtcbiAgICAgICAgQ29DN01lbGVlSW5pdGlhdG9yLnVwZGF0ZUNhcmRTd2l0Y2goZXZlbnQpXG4gICAgICB9XG5cbiAgICAgIGlmIChjYXJkLmNsYXNzTGlzdC5jb250YWlucygndGFyZ2V0JykpIHtcbiAgICAgICAgQ29DN01lbGVlVGFyZ2V0LnVwZGF0ZUNhcmRTd2l0Y2goZXZlbnQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNhcmQuY2xhc3NMaXN0LmNvbnRhaW5zKCdyYW5nZScpKSB7XG4gICAgICBpZiAoY2FyZC5jbGFzc0xpc3QuY29udGFpbnMoJ2luaXRpYXRvcicpKSB7XG4gICAgICAgIENvQzdSYW5nZUluaXRpYXRvci51cGRhdGVDYXJkU3dpdGNoKGV2ZW50KVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjYXJkLmNsYXNzTGlzdC5jb250YWlucygnZGFtYWdlJykpIHtcbiAgICAgIC8vIENvQzdJdGVtLnVwZGF0ZUNhcmRTd2l0Y2goIGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoY2FyZC5jbGFzc0xpc3QuY29udGFpbnMoJ3JvbGwtY2FyZCcpKSB7XG4gICAgICBDb0M3Q2hlY2sudXBkYXRlQ2FyZFN3aXRjaChldmVudClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBBY3RvciB3aGljaCBpcyB0aGUgYXV0aG9yIG9mIGEgY2hhdCBjYXJkXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNhcmQgICAgVGhlIGNoYXQgY2FyZCBiZWluZyB1c2VkXG4gICAqIEByZXR1cm4ge0FjdG9yfG51bGx9ICAgICAgICAgVGhlIEFjdG9yIGVudGl0eSBvciBudWxsXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGF0aWMgX2dldENoYXRDYXJkQWN0b3IgKGNhcmQpIHtcbiAgICAvLyBpZiBkYXRhc2V0Lm9iamVjdCBpcyB0aGVyZSA9PiBuZWVkIHRvIHVuZXNjYXBlIHRoaW5ncyAhIVxuICAgIC8vIGlmIG5vdCB1c2UgdGhlIGRhdGFzZXQgZGlyZWN0bHkuXG4gICAgY29uc3QgY2FyZERhdGEgPSBjYXJkLmRhdGFzZXQub2JqZWN0XG4gICAgICA/IEpTT04ucGFyc2UodW5lc2NhcGUoY2FyZC5kYXRhc2V0Lm9iamVjdCkpXG4gICAgICA6IGNhcmQuZGF0YXNldFxuXG4gICAgaWYgKGNhcmREYXRhLmFjdG9yS2V5KSByZXR1cm4gQ29DN0NoYXQuX2dldEFjdG9yRnJvbUtleShjYXJkRGF0YS5hY3RvcktleSlcblxuICAgIC8vIENhc2UgMSAtIGEgc3ludGhldGljIGFjdG9yIGZyb20gYSBUb2tlblxuICAgIGNvbnN0IHRva2VuS2V5ID0gY2FyZERhdGEudG9rZW5JZFxuICAgIGlmICh0b2tlbktleSkge1xuICAgICAgY29uc3QgW3NjZW5lSWQsIHRva2VuSWRdID0gdG9rZW5LZXkuc3BsaXQoJy4nKVxuICAgICAgaWYgKHNjZW5lSWQgPT09ICdUT0tFTicpIHtcbiAgICAgICAgcmV0dXJuIGdhbWUuYWN0b3JzLnRva2Vuc1t0b2tlbklkXSAvLyBSRUZBQ1RPUklORyAoMilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNjZW5lID0gZ2FtZS5zY2VuZXMuZ2V0KHNjZW5lSWQpXG4gICAgICAgIGlmICghc2NlbmUpIHJldHVybiBudWxsXG4gICAgICAgIGNvbnN0IHRva2VuID0gc2NlbmUuZ2V0RW1iZWRkZWREb2N1bWVudCgnVG9rZW4nLCB0b2tlbklkKVxuICAgICAgICBpZiAoIXRva2VuKSByZXR1cm4gbnVsbFxuICAgICAgICByZXR1cm4gdG9rZW4uYWN0b3IgfHwgbmV3IFRva2VuKHRva2VuRGF0YSkuYWN0b3JcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDYXNlIDIgLSB1c2UgQWN0b3IgSUQgZGlyZWN0b3J5XG4gICAgY29uc3QgYWN0b3JJZCA9IGNhcmREYXRhLmFjdG9ySWRcbiAgICBpZiAoYWN0b3JJZCkgcmV0dXJuIGdhbWUuYWN0b3JzLmdldChhY3RvcklkKVxuXG4gICAgY29uc3QgbWVzc2FnZSA9IGNhcmQuY2xvc2VzdCgnLm1lc3NhZ2UnKVxuICAgIGNvbnN0IG1lc3NhZ2VJZCA9IG1lc3NhZ2UgPyBtZXNzYWdlLmRhdGFzZXQubWVzc2FnZUlkIDogbnVsbFxuICAgIGlmIChtZXNzYWdlSWQpIHtcbiAgICAgIGNvbnN0IGNoYXRNZXNzYWdlID0gZ2FtZS5tZXNzYWdlcy5nZXQobWVzc2FnZUlkKVxuICAgICAgaWYgKGNoYXRNZXNzYWdlLnVzZXIpIHJldHVybiBjaGF0TWVzc2FnZS51c2VyLmNoYXJhY3RlclxuICAgIH1cblxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBzdGF0aWMgaXNDYXJkT3duZXIgKGNhcmQpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gY2FyZC5jbG9zZXN0KCcubWVzc2FnZScpXG4gICAgY29uc3QgbWVzc2FnZUlkID0gbWVzc2FnZSA/IG1lc3NhZ2UuZGF0YXNldC5tZXNzYWdlSWQgOiBudWxsXG4gICAgaWYgKG1lc3NhZ2VJZCkge1xuICAgICAgY29uc3QgY2hhdE1lc3NhZ2UgPSBnYW1lLm1lc3NhZ2VzLmdldChtZXNzYWdlSWQpXG4gICAgICByZXR1cm4gY2hhdE1lc3NhZ2Uub3dubmVyIHx8IGZhbHNlXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBzdGF0aWMgX2dldEFjdG9yRnJvbUtleSAoa2V5KSB7XG4gICAgaWYgKCFrZXkpIHJldHVybiB1bmRlZmluZWRcbiAgICAvLyBDYXNlIDEgLSBhIHN5bnRoZXRpYyBhY3RvciBmcm9tIGEgVG9rZW5cbiAgICBpZiAoa2V5LmluY2x1ZGVzKCcuJykpIHtcbiAgICAgIC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgY29uc3QgW3NjZW5lSWQsIHRva2VuSWRdID0ga2V5LnNwbGl0KCcuJylcbiAgICAgIGlmIChzY2VuZUlkID09PSAnVE9LRU4nKSB7XG4gICAgICAgIHJldHVybiBnYW1lLmFjdG9ycy50b2tlbnNbdG9rZW5JZF0gLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBzY2VuZSA9IGdhbWUuc2NlbmVzLmdldChzY2VuZUlkKVxuICAgICAgICBpZiAoIXNjZW5lKSByZXR1cm4gbnVsbFxuICAgICAgICBjb25zdCB0b2tlbiA9IHNjZW5lLmdldEVtYmVkZGVkRG9jdW1lbnQoJ1Rva2VuJywgdG9rZW5JZClcbiAgICAgICAgaWYgKCF0b2tlbikgcmV0dXJuIG51bGxcbiAgICAgICAgcmV0dXJuIHRva2VuLmFjdG9yIHx8IG5ldyBUb2tlbih0b2tlbkRhdGEpLmFjdG9yXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2FzZSAyIC0gdXNlIEFjdG9yIElEIGRpcmVjdG9yeVxuICAgIHJldHVybiBnYW1lLmFjdG9ycy5nZXQoa2V5KSB8fCBudWxsXG4gIH1cblxuICBzdGF0aWMgZ2V0QWN0b3JGcm9tVG9rZW4gKHRva2VuS2V5KSB7XG4gICAgY29uc3QgdG9rZW4gPSBDb0M3Q2hhdC5nZXRUb2tlbih0b2tlbktleSlcbiAgICByZXR1cm4gdG9rZW4gPyB0b2tlbi5hY3RvciA6IG51bGxcbiAgfVxuXG4gIHN0YXRpYyBnZXRUb2tlbiAodG9rZW5LZXkpIHtcbiAgICBpZiAodG9rZW5LZXkpIHtcbiAgICAgIGNvbnN0IFtzY2VuZUlkLCB0b2tlbklkXSA9IHRva2VuS2V5LnNwbGl0KCcuJylcbiAgICAgIGlmIChzY2VuZUlkID09PSAnVE9LRU4nKSB7XG4gICAgICAgIGNvbnN0IHRva2VuRG9jID0gZ2FtZS5hY3RvcnMudG9rZW5zW3Rva2VuSWRdPy50b2tlblxuICAgICAgICByZXR1cm4gdG9rZW5Eb2Mub2JqZWN0IC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2NlbmUgPSBnYW1lLnNjZW5lcy5nZXQoc2NlbmVJZClcbiAgICAgICAgaWYgKCFzY2VuZSkgcmV0dXJuIG51bGxcbiAgICAgICAgY29uc3QgdG9rZW4gPSBzY2VuZS5nZXRFbWJlZGRlZERvY3VtZW50KCdUb2tlbicsIHRva2VuSWQpXG4gICAgICAgIGlmICghdG9rZW4pIHJldHVybiBudWxsXG4gICAgICAgIHJldHVybiB0b2tlbiB8fCBuZXcgVG9rZW4odG9rZW5EYXRhKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIHVwZGF0ZSBhIGNoYXQgbWVzc2FnZSB3aXRoIGEgbmV3IEhUTUwgY29udGVudCBhbmQgcG9wdWxhdGUgaXQuXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNhcmRcbiAgICovXG4gIHN0YXRpYyBhc3luYyB1cGRhdGVDaGF0Q2FyZCAoY2FyZCwgbWVzc0lkID0gbnVsbCkge1xuICAgIGNvbnN0IG1lc3NhZ2VJZCA9XG4gICAgICBtZXNzSWQgPT0gbnVsbCA/IGNhcmQuY2xvc2VzdCgnLm1lc3NhZ2UnKS5kYXRhc2V0Lm1lc3NhZ2VJZCA6IG1lc3NJZFxuICAgIGNvbnN0IG1lc3NhZ2UgPSBnYW1lLm1lc3NhZ2VzLmdldChtZXNzYWdlSWQpXG5cbiAgICBjb25zdCBtc2cgPSBhd2FpdCBtZXNzYWdlLnVwZGF0ZSh7IGNvbnRlbnQ6IGNhcmQub3V0ZXJIVE1MIH0pXG4gICAgYXdhaXQgdWkuY2hhdC51cGRhdGVNZXNzYWdlKG1zZywgZmFsc2UpXG4gICAgcmV0dXJuIG1zZ1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIF9vbkNoYXRDYXJkQWN0aW9uIChldmVudCkge1xuICAgIC8vIGNvbnNvbGUubG9nKCctLT5Db0M3Q2hhdC5fb25DaGF0Q2FyZEFjdGlvbicpO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuICAgIGNvbnN0IGJ1dHRvbiA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCBjYXJkID0gYnV0dG9uLmNsb3Nlc3QoJy5jaGF0LWNhcmQnKVxuICAgIGlmICghY2FyZCkgcmV0dXJuXG4gICAgY29uc3Qgb3JpZ2luTWVzc2FnZSA9IGJ1dHRvbi5jbG9zZXN0KCcubWVzc2FnZScpXG4gICAgLy8gY29uc3QgbWVzc2FnZUlkID0gb3JpZ2luTWVzc2FnZS5kYXRhc2V0Lm1lc3NhZ2VJZDtcbiAgICBjb25zdCBhY3Rpb24gPSBidXR0b24uZGF0YXNldC5hY3Rpb25cblxuICAgIGlmICghQ29DN0NoYXQuX2dldENoYXRDYXJkQWN0b3IoY2FyZCkpIHJldHVyblxuXG4gICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgIGNhc2UgJ3VzZUx1Y2snOiB7XG4gICAgICAgIGNvbnN0IGx1Y2tBbW91bnQgPSBwYXJzZUludChidXR0b24uZGF0YXNldC5sdWNrQW1vdW50KVxuICAgICAgICBjb25zdCBuZXdTdWNjZXNzTGV2ZWwgPSBwYXJzZUludChcbiAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQubmV3U3VjY2Vzc0xldmVsXG4gICAgICAgIClcblxuICAgICAgICBpZiAoY2FyZC5jbGFzc0xpc3QuY29udGFpbnMoJ21lbGVlJykpIHtcbiAgICAgICAgICBsZXQgbWVsZWVDYXJkXG4gICAgICAgICAgaWYgKGNhcmQuY2xhc3NMaXN0LmNvbnRhaW5zKCd0YXJnZXQnKSkge1xuICAgICAgICAgICAgbWVsZWVDYXJkID0gQ29DN01lbGVlVGFyZ2V0LmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjYXJkLmNsYXNzTGlzdC5jb250YWlucygnaW5pdGlhdG9yJykpIHtcbiAgICAgICAgICAgIG1lbGVlQ2FyZCA9IENvQzdNZWxlZUluaXRpYXRvci5nZXRGcm9tQ2FyZChjYXJkKVxuICAgICAgICAgIH1cbiAgICAgICAgICBtZWxlZUNhcmQudXBncmFkZVJvbGwobHVja0Ftb3VudCwgbmV3U3VjY2Vzc0xldmVsLCBjYXJkKSAvLyBUT0RPIDogQ2hlY2sgaWYgdGhpcyBuZWVkcyB0byBiZSBhc3luY1xuICAgICAgICB9IGVsc2UgaWYgKGNhcmQuY2xhc3NMaXN0LmNvbnRhaW5zKCdyYW5nZScpKSB7XG4gICAgICAgICAgY29uc3QgcmFuZ2VDYXJkID0gQ29DN1JhbmdlSW5pdGlhdG9yLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgICAgY29uc3Qgcm9sbFJlc3VsdCA9IGJ1dHRvbi5jbG9zZXN0KCcucm9sbC1yZXN1bHQnKVxuICAgICAgICAgIGNvbnN0IHJvbGxJbmRleCA9IHJvbGxSZXN1bHRcbiAgICAgICAgICAgID8gcGFyc2VJbnQocm9sbFJlc3VsdC5kYXRhc2V0LmluZGV4KVxuICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgaWYgKGJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoJ3Bhc3MtY2hlY2snKSkge1xuICAgICAgICAgICAgcmFuZ2VDYXJkLnBhc3NSb2xsKHJvbGxJbmRleClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdXBncmFkZUluZGV4ID0gcGFyc2VJbnQoYnV0dG9uLmRhdGFzZXQuaW5kZXgpXG4gICAgICAgICAgICByYW5nZUNhcmQudXBncmFkZVJvbGwocm9sbEluZGV4LCB1cGdyYWRlSW5kZXgpIC8vIFRPRE8gOiBDaGVjayBpZiB0aGlzIG5lZWRzIHRvIGJlIGFzeW5jXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGNhcmQuY2xhc3NMaXN0LmNvbnRhaW5zKCdyb2xsLWNhcmQnKSB8fFxuICAgICAgICAgIGNhcmQucXVlcnlTZWxlY3RvcignLnJvbGwtcmVzdWx0JykgIT0gbnVsbFxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBjaGVjayA9IGF3YWl0IENvQzdDaGVjay5nZXRGcm9tQ2FyZChjYXJkKVxuICAgICAgICAgIGlmIChidXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCdwYXNzLWNoZWNrJykpIHtcbiAgICAgICAgICAgIGNvbnN0IGx1Y2tBbW91bnQgPSBwYXJzZUludChidXR0b24uZGF0YXNldC5sdWNrQW1vdW50KVxuICAgICAgICAgICAgY2hlY2suZm9yY2VQYXNzKGx1Y2tBbW91bnQpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHVwZ3JhZGVJbmRleCA9IHBhcnNlSW50KGJ1dHRvbi5kYXRhc2V0LmluZGV4KVxuICAgICAgICAgICAgYXdhaXQgY2hlY2sudXBncmFkZUNoZWNrKHVwZ3JhZGVJbmRleClcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgYWN0b3IgPSBDb0M3Q2hhdC5fZ2V0Q2hhdENhcmRBY3RvcihjYXJkKVxuICAgICAgICAgIGNvbnN0IGRldGFpbGVkUmVzdWx0UGxhY2VIb2xkZXIgPVxuICAgICAgICAgICAgY2FyZC5xdWVyeVNlbGVjdG9yKCcucmVzdWx0LWRldGFpbHMnKVxuXG4gICAgICAgICAgaWYgKGFjdG9yLnNwZW5kTHVjayhsdWNrQW1vdW50KSkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gY2FyZC5xdWVyeVNlbGVjdG9yKCcuZGljZS10b3RhbCcpXG4gICAgICAgICAgICBjYXJkLmRhdGFzZXQuc3VjY2Vzc0xldmVsID0gbmV3U3VjY2Vzc0xldmVsXG4gICAgICAgICAgICBjYXJkLmRhdGFzZXQucHJvY2Vzc2VkID0gJ2ZhbHNlJyAvLyB0cmlnZ2VyIDMgdXBkYXRlcyBkZSBjYXJkXG4gICAgICAgICAgICBzd2l0Y2ggKG5ld1N1Y2Nlc3NMZXZlbCkge1xuICAgICAgICAgICAgICBjYXNlIENvQzdDaGVjay5zdWNjZXNzTGV2ZWwucmVndWxhcjpcbiAgICAgICAgICAgICAgICByZXN1bHQuaW5uZXJUZXh0ID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlJlZ3VsYXJTdWNjZXNzJylcbiAgICAgICAgICAgICAgICBkZXRhaWxlZFJlc3VsdFBsYWNlSG9sZGVyLmlubmVyVGV4dCA9IGdhbWUuaTE4bi5mb3JtYXQoXG4gICAgICAgICAgICAgICAgICAnQ29DNy5Sb2xsUmVzdWx0Lkx1Y2tTcGVuZFRleHQnLFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsdWNrQW1vdW50LFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzTGV2ZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5SZWd1bGFyRGlmZmljdWx0eScpXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmhhcmQ6XG4gICAgICAgICAgICAgICAgcmVzdWx0LmlubmVyVGV4dCA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5IYXJkU3VjY2VzcycpXG4gICAgICAgICAgICAgICAgZGV0YWlsZWRSZXN1bHRQbGFjZUhvbGRlci5pbm5lclRleHQgPSBnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgICAgICAgICAgJ0NvQzcuUm9sbFJlc3VsdC5MdWNrU3BlbmRUZXh0JyxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbHVja0Ftb3VudCxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0xldmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuSGFyZERpZmZpY3VsdHknKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgICAgIGNhc2UgQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5leHRyZW1lOlxuICAgICAgICAgICAgICAgIHJlc3VsdC5pbm5lclRleHQgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRXh0cmVtZVN1Y2Nlc3MnKVxuICAgICAgICAgICAgICAgIGRldGFpbGVkUmVzdWx0UGxhY2VIb2xkZXIuaW5uZXJUZXh0ID0gZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICAgICAgICAgICdDb0M3LlJvbGxSZXN1bHQuTHVja1NwZW5kVGV4dCcsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGx1Y2tBbW91bnQsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NMZXZlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkV4dHJlbWVEaWZmaWN1bHR5JylcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgICAgICBjYXNlIENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuY3JpdGljYWw6XG4gICAgICAgICAgICAgICAgcmVzdWx0LmlubmVyVGV4dCA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Dcml0aWNhbFN1Y2Nlc3MnKVxuICAgICAgICAgICAgICAgIGRldGFpbGVkUmVzdWx0UGxhY2VIb2xkZXIuaW5uZXJUZXh0ID0gZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICAgICAgICAgICdDb0M3LlJvbGxSZXN1bHQuTHVja1NwZW5kVGV4dCcsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGx1Y2tBbW91bnQsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NMZXZlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNyaXRpY2FsRGlmZmljdWx0eScpXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LmNsYXNzTGlzdC5yZXBsYWNlKCdmYWlsdXJlJywgJ3N1Y2Nlc3MnKVxuICAgICAgICAgICAgcmVzdWx0LmNsYXNzTGlzdC5yZW1vdmUoJ2Z1bWJsZScpXG4gICAgICAgICAgICBjYXJkLnF1ZXJ5U2VsZWN0b3IoJy5jYXJkLWJ1dHRvbnMnKS5yZW1vdmUoKVxuICAgICAgICAgICAgY2FyZC5xdWVyeVNlbGVjdG9yKCcuZGljZS10b29sdGlwJykuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgICAgICAgICAgYXdhaXQgQ29DN0NoYXQudXBkYXRlQ2hhdENhcmQoY2FyZClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FcnJvck5vdEVub3VnaEx1Y2snLCB7XG4gICAgICAgICAgICAgICAgYWN0b3I6IGFjdG9yLm5hbWVcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ3B1c2gnOiB7XG4gICAgICAgIGNvbnN0IG5ld0NhcmQgPSBjYXJkLmNsb25lTm9kZSh0cnVlKSAvLyBUT0RPIG5vdCBuZWNlc3NhcnlcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3Q2FyZC5xdWVyeVNlbGVjdG9yKCcuZGljZS10b3RhbCcpXG4gICAgICAgIHJlc3VsdC5pbm5lclRleHQgPVxuICAgICAgICAgIHJlc3VsdC5pbm5lclRleHQgKyBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuUHVzaGluZ1NraWxsJylcbiAgICAgICAgcmVzdWx0LmNsYXNzTGlzdC5yZW1vdmUoJ2ZhaWx1cmUnKVxuICAgICAgICBuZXdDYXJkLnF1ZXJ5U2VsZWN0b3IoJy5jYXJkLWJ1dHRvbnMnKS5yZW1vdmUoKVxuICAgICAgICBuZXdDYXJkLmRhdGFzZXQucHVzaGVkUm9sbCA9IHRydWVcbiAgICAgICAgYXdhaXQgQ29DN0NoYXQudXBkYXRlQ2hhdENhcmQobmV3Q2FyZCwgb3JpZ2luTWVzc2FnZS5kYXRhc2V0Lm1lc3NhZ2VJZClcbiAgICAgICAgYXdhaXQgQ29DN0NoZWNrLnB1c2goY2FyZClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2RlZmVuZGluZyc6IHtcbiAgICAgICAgbGV0IGRlZmVuZGVyS2V5ID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuZGVmZW5kZXItYWN0aW9uLXNlbGVjdCcpXG4gICAgICAgICAgLmRhdGFzZXQudG9rZW5JZFxuICAgICAgICBsZXQgZGVmZW5kZXJcbiAgICAgICAgaWYgKCFkZWZlbmRlcktleSkge1xuICAgICAgICAgIGRlZmVuZGVyS2V5ID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuZGVmZW5kZXItYWN0aW9uLXNlbGVjdCcpXG4gICAgICAgICAgICAuZGF0YXNldC5hY3RvcklkXG4gICAgICAgICAgZGVmZW5kZXIgPSBnYW1lLmFjdG9ycy5nZXQoZGVmZW5kZXJLZXkpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVmZW5kZXIgPSB0aGlzLmdldEFjdG9yRnJvbVRva2VuKGRlZmVuZGVyS2V5KVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2VUeXBlID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmFjdGlvblR5cGVcbiAgICAgICAgY29uc3Qgb3V0bnVtYmVyZWQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQub3V0bnVtYmVyZWQgPT09ICd0cnVlJ1xuICAgICAgICBjb25zdCBjaGVjayA9IG5ldyBDb0M3Q2hlY2soKVxuICAgICAgICBjaGVjay5yZWZlcmVuY2VNZXNzYWdlSWQgPSBvcmlnaW5NZXNzYWdlLmRhdGFzZXQubWVzc2FnZUlkXG4gICAgICAgIGNoZWNrLnJvbGxUeXBlID0gJ29wcG9zZWQnXG4gICAgICAgIGNoZWNrLnNpZGUgPSAndGFyZ2V0J1xuICAgICAgICBjaGVjay5hY3Rpb24gPSByZXNwb25zZVR5cGVcbiAgICAgICAgc3dpdGNoIChyZXNwb25zZVR5cGUpIHtcbiAgICAgICAgICBjYXNlICdkb2RnaW5nJzpcbiAgICAgICAgICAgIGNoZWNrLmFjdG9yID0gZGVmZW5kZXJcbiAgICAgICAgICAgIGNoZWNrLnNraWxsID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnNraWxsSWRcbiAgICAgICAgICAgIGNoZWNrLmRpZmZpY3VsdHkgPSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXJcbiAgICAgICAgICAgIGlmIChvdXRudW1iZXJlZCkgY2hlY2suZGljZU1vZGlmaWVyID0gLTFcblxuICAgICAgICAgICAgYXdhaXQgY2hlY2sucm9sbCgpXG4gICAgICAgICAgICBjaGVjay50b01lc3NhZ2UoKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlICdmaWdodEJhY2snOlxuICAgICAgICAgICAgY2hlY2suYWN0b3IgPSBkZWZlbmRlclxuICAgICAgICAgICAgY2hlY2suc2tpbGwgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuc2tpbGxJZFxuICAgICAgICAgICAgY2hlY2suZGlmZmljdWx0eSA9IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhclxuICAgICAgICAgICAgY2hlY2suaXRlbSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5pdGVtSWRcbiAgICAgICAgICAgIGlmIChvdXRudW1iZXJlZCkgY2hlY2suZGljZU1vZGlmaWVyID0gLTFcblxuICAgICAgICAgICAgYXdhaXQgY2hlY2sucm9sbCgpXG4gICAgICAgICAgICBjaGVjay50b01lc3NhZ2UoKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlICdtYW5ldXZlcic6IHtcbiAgICAgICAgICAgIGNvbnN0IGFjdG9yID0gQ29DN0NoYXQuX2dldENoYXRDYXJkQWN0b3IoY2FyZClcbiAgICAgICAgICAgIGlmIChkZWZlbmRlci5idWlsZCA8PSBhY3Rvci5idWlsZCAtIDMpIHtcbiAgICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRXJyb3JNYW5ldXZlck5vdFBvc3NpYmxlJylcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoZWNrLmFjdG9yID0gZGVmZW5kZXJcbiAgICAgICAgICAgIGNoZWNrLnNraWxsID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnNraWxsSWRcbiAgICAgICAgICAgIGNoZWNrLmRpZmZpY3VsdHkgPSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXJcbiAgICAgICAgICAgIGlmIChvdXRudW1iZXJlZCkgY2hlY2suZGljZU1vZGlmaWVyID0gLTFcbiAgICAgICAgICAgIGlmIChkZWZlbmRlci5idWlsZCA8IGFjdG9yLmJ1aWxkKSB7XG4gICAgICAgICAgICAgIGNoZWNrLmRpY2VNb2RpZmllciA9XG4gICAgICAgICAgICAgICAgY2hlY2suZGljZU1vZGlmaWVyIC0gKGFjdG9yLmJ1aWxkIC0gZGVmZW5kZXIuYnVpbGQpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjaGVjay5kaWNlTW9kaWZpZXIgPCAtMikge1xuICAgICAgICAgICAgICBjaGVjay5kaWZmaWN1bHR5ID1cbiAgICAgICAgICAgICAgICBjaGVjay5kaWZmaWN1bHR5ICsgTWF0aC5hYnMoY2hlY2suZGljZU1vZGlmaWVyKSAtIDJcbiAgICAgICAgICAgICAgY2hlY2suZGljZU1vZGlmaWVyID0gLTJcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXdhaXQgY2hlY2sucm9sbCgpXG4gICAgICAgICAgICBjaGVjay50b01lc3NhZ2UoKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSAnbWVsZWUtaW5pdGlhdG9yLXJvbGwnOiB7XG4gICAgICAgIGNvbnN0IGluaXRpYXRvciA9IENvQzdNZWxlZUluaXRpYXRvci5nZXRGcm9tQ2FyZChjYXJkKVxuICAgICAgICBjb25zdCBjaGVjayA9IGF3YWl0IGluaXRpYXRvci5wZXJmb3JtU2tpbGxDaGVjayhcbiAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuc2tpbGxcbiAgICAgICAgKVxuICAgICAgICAkKGJ1dHRvbikucHJvcCgnZGlzYWJsZWQnLCB0cnVlKVxuICAgICAgICBhd2FpdCBDb0M3RGljZS5zaG93Um9sbERpY2UzZChjaGVjay5kaWNlLnJvbGwpXG4gICAgICAgIGF3YWl0IGluaXRpYXRvci5wdWJsaXNoQ2hlY2tSZXN1bHQoKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICdtZWxlZS10YXJnZXQtbm8tcmVzcG9uc2UnOiB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IENvQzdNZWxlZVRhcmdldC5nZXRGcm9tQ2FyZChjYXJkKVxuICAgICAgICBhd2FpdCB0YXJnZXQucHVibGlzaE5vUmVwb25zZVJlc3VsdCgpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ21lbGVlLXRhcmdldC1yb2xsJzoge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBDb0M3TWVsZWVUYXJnZXQuZ2V0RnJvbUNhcmQoY2FyZClcbiAgICAgICAgY29uc3QgY2hlY2sgPSBhd2FpdCB0YXJnZXQucGVyZm9ybVNraWxsQ2hlY2soXG4gICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnNraWxsXG4gICAgICAgIClcbiAgICAgICAgJChidXR0b24pLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSlcbiAgICAgICAgYXdhaXQgQ29DN0RpY2Uuc2hvd1JvbGxEaWNlM2QoY2hlY2suZGljZS5yb2xsKVxuICAgICAgICBhd2FpdCB0YXJnZXQucHVibGlzaENoZWNrUmVzdWx0KClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ3JvbGwtbWVsZWUtZGFtYWdlJzoge1xuICAgICAgICBjb25zdCBkYW1hZ2VDaGF0Q2FyZCA9IG5ldyBEYW1hZ2VDYXJkKHtcbiAgICAgICAgICBjcml0aWNhbDogYnV0dG9uLmRhdGFzZXQuY3JpdGljYWwgPT09ICd0cnVlJyxcbiAgICAgICAgICBmYXN0Rm9yd2FyZDogZXZlbnQuc2hpZnRLZXlcbiAgICAgICAgfSlcbiAgICAgICAgZGFtYWdlQ2hhdENhcmQuYWN0b3JLZXkgPSBidXR0b24uZGF0YXNldC5kZWFsZXJcbiAgICAgICAgZGFtYWdlQ2hhdENhcmQudGFyZ2V0S2V5ID0gYnV0dG9uLmRhdGFzZXQudGFyZ2V0XG4gICAgICAgIGRhbWFnZUNoYXRDYXJkLml0ZW1JZCA9IGJ1dHRvbi5kYXRhc2V0LndlYXBvblxuICAgICAgICBpZiAob3JpZ2luTWVzc2FnZS5kYXRhc2V0Lm1lc3NhZ2VJZCkge1xuICAgICAgICAgIGRhbWFnZUNoYXRDYXJkLm1lc3NhZ2VJZCA9IG9yaWdpbk1lc3NhZ2UuZGF0YXNldC5tZXNzYWdlSWRcbiAgICAgICAgfVxuICAgICAgICBkYW1hZ2VDaGF0Q2FyZC51cGRhdGVDaGF0Q2FyZCgpXG5cbiAgICAgICAgLy8gY29uc3QgZGFtYWdlQ2FyZCA9IG5ldyBDb0M3RGFtYWdlUm9sbChcbiAgICAgICAgLy8gIGJ1dHRvbi5kYXRhc2V0LndlYXBvbixcbiAgICAgICAgLy8gIGJ1dHRvbi5kYXRhc2V0LmRlYWxlcixcbiAgICAgICAgLy8gIHtcbiAgICAgICAgLy8gICAgdGFyZ2V0S2V5OiBidXR0b24uZGF0YXNldC50YXJnZXQsXG4gICAgICAgIC8vICAgIGNyaXRpY2FsOiAndHJ1ZScgPT0gYnV0dG9uLmRhdGFzZXQuY3JpdGljYWwsXG4gICAgICAgIC8vICAgIGZhc3RGb3J3YXJkOiBldmVudC5zaGlmdEtleVxuICAgICAgICAvLyAgfSk7XG4gICAgICAgIC8vIGlmKCBvcmlnaW5NZXNzYWdlLmRhdGFzZXQubWVzc2FnZUlkKSBkYW1hZ2VDYXJkLm1lc3NhZ2VJZCA9IG9yaWdpbk1lc3NhZ2UuZGF0YXNldC5tZXNzYWdlSWQ7XG4gICAgICAgIC8vIGRhbWFnZUNhcmQucm9sbERhbWFnZSgpO1xuICAgICAgICAvLyBpZiggb3JpZ2luTWVzc2FnZS5kYXRhc2V0Lm1lc3NhZ2VJZCkge1xuICAgICAgICAvLyAgZm9yIChjb25zdCBiIG9mIGNhcmQucXVlcnlTZWxlY3RvckFsbCgnLmNhcmQtYnV0dG9ucycpKSB7IGIucmVtb3ZlKCkgfVxuICAgICAgICAvLyAgYXdhaXQgQ29DN0NoYXQudXBkYXRlQ2hhdENhcmQoIGNhcmQpO1xuICAgICAgICAvLyB9XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlICdyYW5nZS1pbml0aWF0b3Itc2hvb3QnOiB7XG4gICAgICAgIGNvbnN0IHJhbmdlSW5pdGlhdG9yID0gQ29DN1JhbmdlSW5pdGlhdG9yLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgIHJhbmdlSW5pdGlhdG9yLmFkZFNob3RBdEN1cnJlbnRUYXJnZXQoKVxuICAgICAgICBhd2FpdCByYW5nZUluaXRpYXRvci51cGRhdGVDaGF0Q2FyZCgpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBjYXNlICdyYW5nZS1pbml0aWF0b3Itcm9sbCc6IHtcbiAgICAgICAgY29uc3QgcmFuZ2VJbml0aWF0b3IgPSBDb0M3UmFuZ2VJbml0aWF0b3IuZ2V0RnJvbUNhcmQoY2FyZClcbiAgICAgICAgYXdhaXQgcmFuZ2VJbml0aWF0b3IucmVzb2x2ZUNhcmQoKVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgY2FzZSAncm9sbC1yYW5nZS1kYW1hZ2UnOiB7XG4gICAgICAgIGNvbnN0IHJhbmdlSW5pdGlhdG9yID0gQ29DN1JhbmdlSW5pdGlhdG9yLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgIGF3YWl0IHJhbmdlSW5pdGlhdG9yLnJvbGxEYW1hZ2UoKVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgY2FzZSAnZGVhbC1tZWxlZS1kYW1hZ2UnOiB7XG4gICAgICAgIGNvbnN0IHRhcmdldEtleSA9IGNhcmQuZGF0YXNldC50YXJnZXRLZXlcbiAgICAgICAgY29uc3QgYW1vdW50ID0gY2FyZC5kYXRhc2V0LnJlc3VsdFxuICAgICAgICBjb25zdCB0YXJnZXRBY3RvciA9IGNoYXRIZWxwZXIuZ2V0QWN0b3JGcm9tS2V5KHRhcmdldEtleSkgLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgICAgIGF3YWl0IHRhcmdldEFjdG9yLmRlYWxEYW1hZ2UoYW1vdW50KVxuICAgICAgICBjb25zdCBidXR0b25zID0gY2FyZC5xdWVyeVNlbGVjdG9yKCcuY2FyZC1idXR0b25zJylcbiAgICAgICAgY29uc3QgZGljZVRvdGFsID0gY2FyZC5xdWVyeVNlbGVjdG9yKCcuZGljZS10b3RhbCcpXG4gICAgICAgICQoZGljZVRvdGFsKS5hcHBlbmQoJzxpIGNsYXNzPVwiZmFzIGZhLWNoZWNrXCI+PC9pPicpXG4gICAgICAgIGlmIChidXR0b25zKSBidXR0b25zLnJlbW92ZSgpXG4gICAgICAgIGF3YWl0IENvQzdDaGF0LnVwZGF0ZUNoYXRDYXJkKGNhcmQpXG5cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSAnZGVhbC1yYW5nZS1kYW1hZ2UnOiB7XG4gICAgICAgIGNvbnN0IHJhbmdlSW5pdGlhdG9yID0gQ29DN1JhbmdlSW5pdGlhdG9yLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgIGF3YWl0IHJhbmdlSW5pdGlhdG9yLmRlYWxEYW1hZ2UoKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICd0ZXN0Y2hlY2snOiB7XG4gICAgICAgIGNvbnN0IGNoZWNrID0gYXdhaXQgQ29DN0NoZWNrLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgIGNoZWNrLmZvcmNlUGFzcygpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ2ZvcmNlLXBhc3MnOiB7XG4gICAgICAgIGNvbnN0IGNoZWNrID0gYXdhaXQgQ29DN0NoZWNrLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgIGNoZWNrLmZvcmNlUGFzcygpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ2ZvcmNlLWZhaWwnOiB7XG4gICAgICAgIGNvbnN0IGNoZWNrID0gYXdhaXQgQ29DN0NoZWNrLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgIGNoZWNrLmZvcmNlRmFpbCgpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ2luY3JlYXNlLXN1Y2Nlc3MtbGV2ZWwnOiB7XG4gICAgICAgIGNvbnN0IGNoZWNrID0gYXdhaXQgQ29DN0NoZWNrLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgIGNoZWNrLmluY3JlYXNlU3VjY2Vzc0xldmVsKClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSAnZGVjcmVhc2Utc3VjY2Vzcy1sZXZlbCc6IHtcbiAgICAgICAgY29uc3QgY2hlY2sgPSBhd2FpdCBDb0M3Q2hlY2suZ2V0RnJvbUNhcmQoY2FyZClcbiAgICAgICAgY2hlY2suZGVjcmVhc2VTdWNjZXNzTGV2ZWwoKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICdyZXZlYWwtY2hlY2snOiB7XG4gICAgICAgIGNvbnN0IGNoZWNrID0gYXdhaXQgQ29DN0NoZWNrLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgIGNoZWNrLmlzQmxpbmQgPSBmYWxzZVxuICAgICAgICBjaGVjay5jb21wdXRlQ2hlY2soKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgaXNDdHJsS2V5KGV2ZW50KVxuICAgICAgICApIHtcbiAgICAgICAgICBjaGVjay51cGRhdGVDaGF0Q2FyZCh7IG1ha2VQdWJsaWM6IHRydWUgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGVjay51cGRhdGVDaGF0Q2FyZCh7IG1ha2VQdWJsaWM6IHRydWUgfSlcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICdyb2xsLWNoZWNrLWNhcmQnOiB7XG4gICAgICAgIGNvbnN0IGNoZWNrID0gYXdhaXQgQ29DN0NoZWNrLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICAgIGNoZWNrLnN0YW5kYnkgPSBmYWxzZVxuICAgICAgICBhd2FpdCBjaGVjay5fcGVyZm9ybSgpXG4gICAgICAgIGNoZWNrLnVwZGF0ZUNoYXRDYXJkKHsgZm9yY2VSb2xsOiB0cnVlIH0pXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ2ZsYWctZm9yLWRldmVsb3BtZW50Jzoge1xuICAgICAgICBjb25zdCBjaGVjayA9IGF3YWl0IENvQzdDaGVjay5nZXRGcm9tQ2FyZChjYXJkKVxuICAgICAgICBhd2FpdCBjaGVjay5mbGFnRm9yRGV2ZWxvcGVtZW50KClcbiAgICAgICAgY2hlY2suY29tcHV0ZUNoZWNrKClcbiAgICAgICAgY2hlY2sudXBkYXRlQ2hhdENhcmQoKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICdyZXNldC1jcmVhdHVyZS1zYW4tZGF0YSc6IHtcbiAgICAgICAgY29uc3Qgc2FuQ2hlY2sgPSBTYW5DaGVja0NhcmQuZ2V0RnJvbUNhcmQoY2FyZClcbiAgICAgICAgYXdhaXQgc2FuQ2hlY2suY2xlYXJTYW5Mb3NzUmVhc29uKClcbiAgICAgICAgYXdhaXQgc2FuQ2hlY2sudXBkYXRlQ2hhdENhcmQoKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICdyb2xsLXNhbi1jaGVjayc6IHtcbiAgICAgICAgY29uc3Qgc2FuQ2hlY2sgPSBTYW5DaGVja0NhcmQuZ2V0RnJvbUNhcmQoY2FyZClcbiAgICAgICAgYXdhaXQgc2FuQ2hlY2sucm9sbFNhbigpXG4gICAgICAgIGF3YWl0IHNhbkNoZWNrLnVwZGF0ZUNoYXRDYXJkKClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSAnYWR2YW5jZS1zdGF0ZSc6IHtcbiAgICAgICAgY29uc3Qgc2FuQ2hlY2sgPSBTYW5DaGVja0NhcmQuZ2V0RnJvbUNhcmQoY2FyZClcbiAgICAgICAgYXdhaXQgc2FuQ2hlY2suYWR2YW5jZVN0YXRlKFxuICAgICAgICAgIGJ1dHRvbi5kYXRhc2V0LnN0YXRlIC8qLCBidXR0b24uZGF0YXNldC5wYXJhbSAqL1xuICAgICAgICApXG4gICAgICAgIGF3YWl0IHNhbkNoZWNrLnVwZGF0ZUNoYXRDYXJkKClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSAncm9sbC1zYW4tbG9zcyc6IHtcbiAgICAgICAgY29uc3Qgc2FuQ2hlY2sgPSBTYW5DaGVja0NhcmQuZ2V0RnJvbUNhcmQoY2FyZClcbiAgICAgICAgYXdhaXQgc2FuQ2hlY2sucm9sbFNhbkxvc3MoKVxuICAgICAgICBzYW5DaGVjay51cGRhdGVDaGF0Q2FyZCgpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ3JvbGwtaW50LWNoZWNrJzoge1xuICAgICAgICBjb25zdCBzYW5DaGVjayA9IFNhbkNoZWNrQ2FyZC5nZXRGcm9tQ2FyZChjYXJkKVxuICAgICAgICBhd2FpdCBzYW5DaGVjay5yb2xsSW50KClcbiAgICAgICAgc2FuQ2hlY2sudXBkYXRlQ2hhdENhcmQoKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICAvLyBjYXNlICdhcHBseS1zYW4tbG9zcyc6e1xuICAgICAgLy8gIGNvbnN0IHNhbkNoZWNrID0gQ29DN1NhbkNoZWNrLmdldEZyb21DYXJkKCBjYXJkKTtcbiAgICAgIC8vICBhd2FpdCBzYW5DaGVjay5hcHBseVNhbkxvc3MoKTtcbiAgICAgIC8vICBzYW5DaGVjay51cGRhdGVDaGF0Q2FyZCgpO1xuICAgICAgLy8gIGJyZWFrO1xuICAgICAgLy8gfVxuXG4gICAgICAvLyBjYXNlICdyZXZlYWwtc2FuLWNoZWNrJzp7XG4gICAgICAvLyAgY29uc3Qgc2FuQ2hlY2sgPSBDb0M3U2FuQ2hlY2suZ2V0RnJvbUNhcmQoIGNhcmQpO1xuICAgICAgLy8gIHNhbkNoZWNrLmlzQmxpbmQgPSBmYWxzZTtcbiAgICAgIC8vICBzYW5DaGVjay51cGRhdGVDaGF0Q2FyZCgpO1xuICAgICAgLy8gIGJyZWFrO1xuICAgICAgLy8gfVxuXG4gICAgICBjYXNlICdyb2xsLWNvbi1jaGVjayc6IHtcbiAgICAgICAgY29uc3QgY29uQ2hlY2sgPSBDb0M3Q29uQ2hlY2suZ2V0RnJvbUNhcmQoY2FyZClcbiAgICAgICAgYXdhaXQgY29uQ2hlY2sucm9sbENvbigpXG4gICAgICAgIGNvbkNoZWNrLnVwZGF0ZUNoYXRDYXJkKClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSAncmV2ZWFsLWNvbi1jaGVjayc6IHtcbiAgICAgICAgY29uc3QgY29uQ2hlY2sgPSBDb0M3Q29uQ2hlY2suZ2V0RnJvbUNhcmQoY2FyZClcbiAgICAgICAgY29uQ2hlY2suaXNCbGluZCA9IGZhbHNlXG4gICAgICAgIGNvbkNoZWNrLnVwZGF0ZUNoYXRDYXJkKClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIHRvZ2dsaW5nIHRoZSB2aXNpYmlsaXR5IG9mIGNoYXQgY2FyZCBjb250ZW50IHdoZW4gdGhlIG5hbWUgaXMgY2xpY2tlZFxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAgIFRoZSBvcmlnaW5hdGluZyBjbGljayBldmVudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhdGljIF9vbkNoYXRDYXJkVG9nZ2xlQ29udGVudCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgaGVhZGVyID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGNvbnN0IGNhcmQgPSBoZWFkZXIuY2xvc2VzdCgnLmNoYXQtY2FyZCcpXG4gICAgY29uc3QgY29udGVudCA9IGNhcmQucXVlcnlTZWxlY3RvcignLmNhcmQtY29udGVudCcpXG4gICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgIGlmICghY29udGVudC5zdHlsZS5kaXNwbGF5KSB7XG4gICAgICAgIGNvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRlbnQuc3R5bGUuZGlzcGxheSA9XG4gICAgICAgICAgY29udGVudC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgPyAnYmxvY2snIDogJ25vbmUnXG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgQ2hhdE1lc3NhZ2UsIGdhbWUsIHJlbmRlclRlbXBsYXRlLCB1aSAqL1xuaW1wb3J0IHsgQ29DN0NoZWNrIH0gZnJvbSAnLi4vLi4vY2hlY2suanMnXG5pbXBvcnQgeyBjaGF0SGVscGVyLCBDb0M3Um9sbCB9IGZyb20gJy4uL2hlbHBlci5qcydcbmltcG9ydCB7IENvQzdDaGF0IH0gZnJvbSAnLi4vLi4vY2hhdC5qcydcbmltcG9ydCB7IENvQzdNZWxlZVJlc29sdGlvbiB9IGZyb20gJy4vbWVsZWUtcmVzb2x1dGlvbi5qcydcbmltcG9ydCB7IENoYXRDYXJkQWN0b3IgfSBmcm9tICcuLi9jYXJkLWFjdG9yLmpzJ1xuXG4vLyBUT0RPIDogcsOpY3Vww6lyZXIgbGUgamV0IGVuIHRhbnQgcXUnb2JqZXQgISEhXG5leHBvcnQgY2xhc3MgQ29DN01lbGVlSW5pdGlhdG9yIGV4dGVuZHMgQ2hhdENhcmRBY3RvciB7XG4gIGNvbnN0cnVjdG9yIChhY3RvcktleSA9IG51bGwsIGl0ZW1JZCA9IG51bGwsIGZhc3RGb3J3YXJkID0gZmFsc2UpIHtcbiAgICBzdXBlcihhY3RvcktleSwgZmFzdEZvcndhcmQpXG4gICAgdGhpcy5pdGVtSWQgPSBpdGVtSWRcbiAgICB0aGlzLnJlc29sdmVkID0gZmFsc2VcbiAgICB0aGlzLm91dG51bWJlcmVkID0gZmFsc2VcbiAgICB0aGlzLnN1cnByaXNlZCA9IGZhbHNlXG4gICAgdGhpcy5hdXRvU3VjY2VzcyA9IGZhbHNlXG4gICAgdGhpcy5hZHZhbnRhZ2UgPSBmYWxzZVxuICAgIHRoaXMuZGlzYWR2YW50YWdlID0gZmFsc2VcbiAgICB0aGlzLm1lc3NhZ2VJZCA9IG51bGxcbiAgICB0aGlzLnRhcmdldENhcmQgPSBudWxsXG4gICAgdGhpcy5yb2xsZWQgPSBmYWxzZVxuICB9XG5cbiAgZ2V0IHRlbXBsYXRlICgpIHtcbiAgICByZXR1cm4gJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvY2hhdC9jb21iYXQvbWVsZWUtaW5pdGlhdG9yLmh0bWwnXG4gIH1cblxuICBhc3luYyByZXZlYWxDaGVjayAoKSB7XG4gICAgLy8gVE9ETyA6IG9uIHV0aWxpc2UgbCd1cGRhdGUgZHUgbWVzc2FnZSBhdSBsaWV1IGRlIHJlY29uc3RydWlyZSBsJ29iamV0LiBDaGFuZ2VyIGNlIGNvbXBvcnRlbWVudC5cbiAgICBjb25zdCBjaGF0TWVzc2FnZSA9IGdhbWUubWVzc2FnZXMuZ2V0KHRoaXMubWVzc2FnZUlkKVxuXG4gICAgYXdhaXQgY2hhdE1lc3NhZ2Uuc2V0RmxhZygnQ29DNycsICdjaGVja1JldmVhbGVkJywgdHJ1ZSlcbiAgICBhd2FpdCB1aS5jaGF0LnVwZGF0ZU1lc3NhZ2UoY2hhdE1lc3NhZ2UsIGZhbHNlKVxuICB9XG5cbiAgYXN5bmMgY3JlYXRlQ2hhdENhcmQgKCkge1xuICAgIGNoYXRIZWxwZXIuZ2V0QWN0b3JJbWdGcm9tS2V5KHRoaXMuYWN0b3JLZXkpXG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRoaXMudGVtcGxhdGUsIHRoaXMpXG5cbiAgICBjb25zdCBzcGVha2VyRGF0YSA9IHt9XG4gICAgaWYgKHRoaXMudG9rZW4pIHNwZWFrZXJEYXRhLnRva2VuID0gdGhpc1xuICAgIGVsc2Ugc3BlYWtlckRhdGEuYWN0b3IgPSB0aGlzXG4gICAgY29uc3Qgc3BlYWtlciA9IENoYXRNZXNzYWdlLmdldFNwZWFrZXIoc3BlYWtlckRhdGEpXG5cbiAgICBjb25zdCB1c2VyID0gdGhpcy5hY3Rvci51c2VyID8gdGhpcy5hY3Rvci51c2VyIDogZ2FtZS51c2VyXG5cbiAgICBjb25zdCBjaGF0RGF0YSA9IHtcbiAgICAgIHVzZXI6IHVzZXIuaWQsXG4gICAgICBzcGVha2VyLFxuICAgICAgY29udGVudDogaHRtbFxuICAgIH1cblxuICAgIGlmIChbJ2dtcm9sbCcsICdibGluZHJvbGwnXS5pbmNsdWRlcyh0aGlzLnJvbGxNb2RlKSkge1xuICAgICAgY2hhdERhdGEud2hpc3BlciA9IENoYXRNZXNzYWdlLmdldFdoaXNwZXJSZWNpcGllbnRzKCdHTScpXG4gICAgfVxuICAgIC8vIGlmICggdGhpcy5pc0JsaW5kICkgY2hhdERhdGFbJ2JsaW5kJ10gPSB0cnVlO1xuICAgIGNoYXREYXRhLmJsaW5kID0gZmFsc2VcblxuICAgIGNvbnN0IGNoYXRNZXNzYWdlID0gYXdhaXQgQ2hhdE1lc3NhZ2UuY3JlYXRlKGNoYXREYXRhKVxuXG4gICAgcmV0dXJuIGNoYXRNZXNzYWdlXG4gIH1cblxuICBhc3luYyB1cGRhdGVDaGF0Q2FyZCAoKSB7XG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRoaXMudGVtcGxhdGUsIHRoaXMpXG5cbiAgICBjb25zdCBtZXNzYWdlID0gZ2FtZS5tZXNzYWdlcy5nZXQodGhpcy5tZXNzYWdlSWQpXG5cbiAgICBjb25zdCBtc2cgPSBhd2FpdCBtZXNzYWdlLnVwZGF0ZSh7IGNvbnRlbnQ6IGh0bWwgfSlcbiAgICBhd2FpdCB1aS5jaGF0LnVwZGF0ZU1lc3NhZ2UobXNnLCBmYWxzZSlcbiAgICByZXR1cm4gbXNnXG4gIH1cblxuICB0b2dnbGVGbGFnIChmbGFnTmFtZSkge1xuICAgIGNvbnN0IGZsYWcgPSBmbGFnTmFtZS5pbmNsdWRlcygnLScpXG4gICAgICA/IGNoYXRIZWxwZXIuaHlwaGVuVG9DYW1lbENhc2UoZmxhZ05hbWUpXG4gICAgICA6IGZsYWdOYW1lXG4gICAgdGhpc1tmbGFnXSA9ICF0aGlzW2ZsYWddXG4gIH1cblxuICBhc3luYyBwZXJmb3JtU2tpbGxDaGVjayAoc2tpbGxJZCA9IG51bGwsIHB1Ymxpc2ggPSBmYWxzZSkge1xuICAgIGNvbnN0IGNoZWNrID0gbmV3IENvQzdDaGVjaygpXG4gICAgLy8gQ29tYmF0IHJvbGwgY2Fubm90IGJlIGJsaW5kIG9yIHVua25vd25cbiAgICBjaGVjay5pc0JsaW5kID0gZmFsc2VcbiAgICBjaGVjay5pc1Vua29ud24gPSBmYWxzZVxuICAgIGNoZWNrLnJlZmVyZW5jZU1lc3NhZ2VJZCA9IHRoaXMubWVzc2FnZUlkXG4gICAgY2hlY2sucm9sbFR5cGUgPSAnb3Bwb3NlZCdcbiAgICBjaGVjay5zaWRlID0gJ2luaXRpYXRvcidcbiAgICBjaGVjay5hY3Rpb24gPSAnYXR0YWNrJ1xuICAgIGNoZWNrLmFjdG9yID0gdGhpcy5hY3RvcktleVxuICAgIGNoZWNrLml0ZW0gPSB0aGlzLml0ZW1JZFxuICAgIGNoZWNrLnNraWxsID0gc2tpbGxJZFxuICAgIGNoZWNrLmRpZmZpY3VsdHkgPSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXJcbiAgICBjaGVjay5kaWNlTW9kaWZpZXIgPSAwXG5cbiAgICBpZiAoZ2FtZS51c2VyLmlzR00pIHRoaXMuY2hlY2tSZXZlYWxlZCA9IGZhbHNlXG4gICAgZWxzZSB0aGlzLmNoZWNrUmV2ZWFsZWQgPSB0cnVlXG5cbiAgICBpZiAodGhpcy5vdXRudW1iZXJlZCkgY2hlY2suZGljZU1vZGlmaWVyICs9IDFcbiAgICBpZiAodGhpcy5zdXJwcmlzZWQpIGNoZWNrLmRpY2VNb2RpZmllciArPSAxXG4gICAgaWYgKHRoaXMuZGlzYWR2YW50YWdlKSBjaGVjay5kaWNlTW9kaWZpZXIgLT0gMVxuICAgIGlmICh0aGlzLmFkdmFudGFnZSkgY2hlY2suZGljZU1vZGlmaWVyICs9IDFcblxuICAgIGF3YWl0IGNoZWNrLnJvbGwoKVxuICAgIHRoaXMuY2hlY2sgPSBjaGVja1xuICAgIHRoaXMucm9sbGVkID0gdHJ1ZVxuICAgIHRoaXMucmVzb2x2ZWQgPSB0cnVlXG4gICAgaWYgKHB1Ymxpc2gpIGNoZWNrLnRvTWVzc2FnZSgpXG5cbiAgICB0aGlzLmNyaXRpY2FsRGFtYWdlID1cbiAgICAgIGNoZWNrLnN1Y2Nlc3NMZXZlbCA9PT0gQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5leHRyZW1lIHx8XG4gICAgICBjaGVjay5zdWNjZXNzTGV2ZWwgPT09IENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuY3JpdGljYWxcbiAgICBpZiAodGhpcy5oYXNUYXJnZXQgJiYgIXRoaXMuYXV0b1N1Y2Nlc3MpIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBhd2FpdCBnYW1lLkNvQzdzb2NrZXQuZXhlY3V0ZUFzR00oJ2dtY3JlYXRlbWVzc2FnZWFzJywge1xuICAgICAgICB0YXJnZXRLZXk6IHRoaXMudGFyZ2V0S2V5LFxuICAgICAgICBtZXNzYWdlSWQ6IHRoaXMubWVzc2FnZUlkLFxuICAgICAgICBmYXN0Rm9yd2FyZDogdGhpcy5mYXN0Rm9yd2FyZCxcbiAgICAgICAgYWN0b3JLZXk6IHRoaXMuYWN0b3JLZXlcbiAgICAgIH0pXG4gICAgICB0aGlzLnRhcmdldENhcmQgPSBtZXNzYWdlLmlkIHx8IG1lc3NhZ2UuX2lkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYXV0b1N1Y2Nlc3MgJiYgIXRoaXMuY2hlY2suaXNGdW1ibGUpIHtcbiAgICAgIHRoaXMuY2hlY2suZm9yY2VQYXNzKClcbiAgICB9XG4gICAgcmV0dXJuIGNoZWNrXG4gIH1cblxuICBhc3luYyBwdWJsaXNoQ2hlY2tSZXN1bHQgKGNoZWNrID0gbnVsbCkge1xuICAgIGlmICghY2hlY2sgJiYgIXRoaXMuY2hlY2spIHJldHVybiBudWxsXG5cbiAgICBpZiAoY2hlY2spIHRoaXMuY2hlY2sgPSBjaGVja1xuICAgIHRoaXMucm9sbCA9IENvQzdSb2xsLmdldEZyb21DaGVjayh0aGlzLmNoZWNrKVxuICAgIHRoaXMucm9sbGVkID0gdHJ1ZVxuXG4gICAgdGhpcy5yb2xsLnJvbGxJY29ucyA9IFtdXG4gICAgaWYgKHRoaXMucm9sbC5jcml0aWNhbCkge1xuICAgICAgdGhpcy5yb2xsLnJvbGxDb2xvciA9ICdnb2xkZW5yb2QnXG4gICAgICB0aGlzLnJvbGwucm9sbFRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNyaXRpY2FsU3VjY2VzcycpXG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgNDsgaW5kZXgrKykge1xuICAgICAgICB0aGlzLnJvbGwucm9sbEljb25zLnB1c2goJ21lZGFsJylcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMucm9sbC5mdW1ibGUpIHtcbiAgICAgIHRoaXMucm9sbC5yb2xsQ29sb3IgPSAnZGFya3JlZCdcbiAgICAgIHRoaXMucm9sbC5yb2xsVGl0bGUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRnVtYmxlJylcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCA0OyBpbmRleCsrKSB7XG4gICAgICAgIHRoaXMucm9sbC5yb2xsSWNvbnMucHVzaCgnc3BpZGVyJylcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMucm9sbC5zdWNjZXNzKSB7XG4gICAgICB0aGlzLnJvbGwucm9sbENvbG9yID0gJ2dvbGRlbnJvZCdcbiAgICAgIGlmIChDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLnJlZ3VsYXIgPT09IHRoaXMucm9sbC5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgICAgdGhpcy5yb2xsLnJvbGxUaXRsZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5SZWd1bGFyU3VjY2VzcycpXG4gICAgICB9XG4gICAgICBpZiAoQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5oYXJkID09PSB0aGlzLnJvbGwuc3VjY2Vzc0xldmVsKSB7XG4gICAgICAgIHRoaXMucm9sbC5yb2xsVGl0bGUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuSGFyZFN1Y2Nlc3MnKVxuICAgICAgfVxuICAgICAgaWYgKENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZXh0cmVtZSA9PT0gdGhpcy5yb2xsLnN1Y2Nlc3NMZXZlbCkge1xuICAgICAgICB0aGlzLnJvbGwucm9sbFRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkV4dHJlbWVTdWNjZXNzJylcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnJvbGwuc3VjY2Vzc0xldmVsOyBpbmRleCsrKSB7XG4gICAgICAgIHRoaXMucm9sbC5yb2xsSWNvbnMucHVzaCgnc3RhcicpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucm9sbC5yb2xsQ29sb3IgPSAnYmxhY2snXG4gICAgICB0aGlzLnJvbGwucm9sbFRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkZhaWx1cmUnKVxuICAgICAgdGhpcy5yb2xsLnJvbGxJY29ucy5wdXNoKCdza3VsbCcpXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnRhcmdldENhcmQgJiYgIXRoaXMuYXV0b1N1Y2Nlc3MgJiYgdGhpcy5oYXNUYXJnZXQpIHtcbiAgICAgIGNvbnN0IHJlc29sdXRpb25DYXJkID0gbmV3IENvQzdNZWxlZVJlc29sdGlvbihcbiAgICAgICAgdGhpcy5wYXJlbnRNZXNzYWdlSWQsXG4gICAgICAgIHRoaXMubWVzc2FnZUlkXG4gICAgICApXG4gICAgICBjb25zdCByZXNvbHV0aW9uTWVzc2FnZSA9IGF3YWl0IHJlc29sdXRpb25DYXJkLnByZUNyZWF0ZU1lc3NhZ2UoKVxuICAgICAgdGhpcy5yZXNvbHV0aW9uQ2FyZCA9IHJlc29sdXRpb25NZXNzYWdlLmlkXG4gICAgfVxuICAgIGF3YWl0IHRoaXMudXBkYXRlQ2hhdENhcmQoKVxuICB9XG5cbiAgc3RhdGljIGdldEZyb21DYXJkIChjYXJkLCBtZXNzYWdlSWQgPSBudWxsKSB7XG4gICAgY29uc3QgaW5pdGlhdG9yID0gbmV3IENvQzdNZWxlZUluaXRpYXRvcigpXG4gICAgY2hhdEhlbHBlci5nZXRPYmplY3RGcm9tRWxlbWVudChpbml0aWF0b3IsIGNhcmQpXG4gICAgaW5pdGlhdG9yLnJvbGwgPSBDb0M3Um9sbC5nZXRGcm9tQ2FyZChjYXJkKVxuXG4gICAgaWYgKGNhcmQuY2xvc2VzdCgnLm1lc3NhZ2UnKSkge1xuICAgICAgaW5pdGlhdG9yLm1lc3NhZ2VJZCA9IGNhcmQuY2xvc2VzdCgnLm1lc3NhZ2UnKS5kYXRhc2V0Lm1lc3NhZ2VJZFxuICAgIH0gZWxzZSBpbml0aWF0b3IubWVzc2FnZUlkID0gbWVzc2FnZUlkXG4gICAgcmV0dXJuIGluaXRpYXRvclxuICB9XG5cbiAgc3RhdGljIGdldEZyb21NZXNzYWdlSWQgKG1lc3NhZ2VJZCkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBnYW1lLm1lc3NhZ2VzLmdldChtZXNzYWdlSWQpXG4gICAgaWYgKCFtZXNzYWdlKSByZXR1cm4gbnVsbFxuICAgIGNvbnN0IGNhcmQgPSAkKG1lc3NhZ2UuY29udGVudClbMF1cblxuICAgIGNvbnN0IGluaXRpYXRvciA9IENvQzdNZWxlZUluaXRpYXRvci5nZXRGcm9tQ2FyZChjYXJkLCBtZXNzYWdlSWQpXG4gICAgaW5pdGlhdG9yLm1lc3NhZ2VJZCA9IG1lc3NhZ2VJZFxuXG4gICAgcmV0dXJuIGluaXRpYXRvclxuICB9XG5cbiAgc3RhdGljIHVwZGF0ZUNhcmRTd2l0Y2ggKGV2ZW50LCBwdWJsaXNoVXBkYXRlID0gdHJ1ZSkge1xuICAgIGNvbnN0IGNhcmQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5tZWxlZS5pbml0aWF0b3InKVxuICAgIGNvbnN0IGZsYWcgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuZmxhZ1xuICAgIGNvbnN0IGNhbWVsRmxhZyA9IGNoYXRIZWxwZXIuaHlwaGVuVG9DYW1lbENhc2UoZmxhZylcblxuICAgIC8vIHVwZGF0ZSBvbmx5IGZvciBsb2NhbCBwbGF5ZXJcbiAgICBpZiAoIXB1Ymxpc2hVcGRhdGUpIHtcbiAgICAgIGNhcmQuZGF0YXNldFtjYW1lbEZsYWddID0gY2FyZC5kYXRhc2V0W2NhbWVsRmxhZ10gIT09ICd0cnVlJ1xuICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKCdzd2l0Y2hlZC1vbicpXG4gICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuc2VsZWN0ZWQgPSBjYXJkLmRhdGFzZXRbY2FtZWxGbGFnXVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1cGRhdGUgY2FyZCBmb3IgYWxsIHBsYXllclxuICAgICAgY29uc3QgaW5pdGlhdG9yID0gQ29DN01lbGVlSW5pdGlhdG9yLmdldEZyb21DYXJkKGNhcmQpXG4gICAgICBpbml0aWF0b3IudG9nZ2xlRmxhZyhmbGFnKVxuICAgICAgaW5pdGlhdG9yLnVwZGF0ZUNoYXRDYXJkKClcbiAgICB9XG4gIH1cblxuICB1cGdyYWRlUm9sbCAobHVja0Ftb3VudCwgbmV3U3VjY2Vzc0xldmVsLCBvbGRDYXJkKSB7XG4gICAgLy8gVE9ETyA6IENoZWNrIGlmIHRoaXMgbmVlZHMgdG8gYmUgYXN5bmNcbiAgICBpZiAoIXRoaXMuYWN0b3Iuc3BlbmRMdWNrKGx1Y2tBbW91bnQpKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lkx1Y2tOb3RFbm91Z2gnLCB7XG4gICAgICAgICAgbmFtZTogdGhpcy5hY3Rvci5uYW1lXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgfVxuICAgIHRoaXMucm9sbC52YWx1ZSA9IG51bGxcbiAgICB0aGlzLnJvbGwuc3VjY2Vzc0xldmVsID0gbmV3U3VjY2Vzc0xldmVsXG4gICAgdGhpcy5yb2xsLmx1Y2tTcGVudCA9IHRydWVcbiAgICBvbGRDYXJkLmRhdGFzZXQucHJvY2Vzc2VkID0gZmFsc2VcblxuICAgIGNvbnN0IGRpY2VSb2xscyA9IG9sZENhcmQucXVlcnlTZWxlY3RvcignLmRpY2Utcm9sbCcpXG4gICAgZGljZVJvbGxzLmRhdGFzZXQudmFsdWUgPSBudWxsXG4gICAgZGljZVJvbGxzLmRhdGFzZXQuc3VjY2Vzc0xldmVsID0gbmV3U3VjY2Vzc0xldmVsXG4gICAgZGljZVJvbGxzLmRhdGFzZXQubHVja1NwZW50ID0gdHJ1ZVxuXG4gICAgY29uc3QgcmVzdWxEZXRhaWxzID0gb2xkQ2FyZC5xdWVyeVNlbGVjdG9yKCcucmVzdWx0LWRldGFpbHMnKVxuICAgIGNvbnN0IGRpY2VUb3RhbCA9IG9sZENhcmQucXVlcnlTZWxlY3RvcignLmRpY2UtdG90YWwnKVxuICAgIGNvbnN0IHJvbGxEYW1hZ2VCdXR0b24gPSBvbGRDYXJkLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAnYnV0dG9uW2RhdGEtYWN0aW9uPVwicm9sbC1tZWxlZS1kYW1hZ2VcIl0nXG4gICAgKVxuICAgIGlmIChyb2xsRGFtYWdlQnV0dG9uKSByb2xsRGFtYWdlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2ludmlzaWJsZScpXG5cbiAgICBzd2l0Y2ggKG5ld1N1Y2Nlc3NMZXZlbCkge1xuICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLnJlZ3VsYXI6XG4gICAgICAgIGRpY2VUb3RhbC5pbm5lclRleHQgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuUmVndWxhclN1Y2Nlc3MnKVxuICAgICAgICByZXN1bERldGFpbHMuaW5uZXJUZXh0ID0gZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICAnQ29DNy5Sb2xsUmVzdWx0Lkx1Y2tTcGVuZFRleHQnLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGx1Y2tBbW91bnQsXG4gICAgICAgICAgICBzdWNjZXNzTGV2ZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5SZWd1bGFyRGlmZmljdWx0eScpXG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5oYXJkOlxuICAgICAgICBkaWNlVG90YWwuaW5uZXJUZXh0ID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkhhcmRTdWNjZXNzJylcbiAgICAgICAgcmVzdWxEZXRhaWxzLmlubmVyVGV4dCA9IGdhbWUuaTE4bi5mb3JtYXQoXG4gICAgICAgICAgJ0NvQzcuUm9sbFJlc3VsdC5MdWNrU3BlbmRUZXh0JyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBsdWNrQW1vdW50LFxuICAgICAgICAgICAgc3VjY2Vzc0xldmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuSGFyZERpZmZpY3VsdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlIENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZXh0cmVtZTpcbiAgICAgICAgaWYgKHJvbGxEYW1hZ2VCdXR0b24pIHJvbGxEYW1hZ2VCdXR0b24uZGF0YXNldC5jcml0aWNhbCA9IHRydWVcbiAgICAgICAgZGljZVRvdGFsLmlubmVyVGV4dCA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FeHRyZW1lU3VjY2VzcycpXG4gICAgICAgIHJlc3VsRGV0YWlscy5pbm5lclRleHQgPSBnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgICdDb0M3LlJvbGxSZXN1bHQuTHVja1NwZW5kVGV4dCcsXG4gICAgICAgICAge1xuICAgICAgICAgICAgbHVja0Ftb3VudCxcbiAgICAgICAgICAgIHN1Y2Nlc3NMZXZlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkV4dHJlbWVEaWZmaWN1bHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmNyaXRpY2FsOlxuICAgICAgICBpZiAocm9sbERhbWFnZUJ1dHRvbikgcm9sbERhbWFnZUJ1dHRvbi5kYXRhc2V0LmNyaXRpY2FsID0gdHJ1ZVxuICAgICAgICBkaWNlVG90YWwuaW5uZXJUZXh0ID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNyaXRpY2FsU3VjY2VzcycpXG4gICAgICAgIHJlc3VsRGV0YWlscy5pbm5lclRleHQgPSBnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgICdDb0M3LlJvbGxSZXN1bHQuTHVja1NwZW5kVGV4dCcsXG4gICAgICAgICAge1xuICAgICAgICAgICAgbHVja0Ftb3VudCxcbiAgICAgICAgICAgIHN1Y2Nlc3NMZXZlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNyaXRpY2FsRGlmZmljdWx0eScpXG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgZGljZVRvdGFsLmNsYXNzTGlzdC5yZXBsYWNlKCdmYWlsdXJlJywgJ3N1Y2Nlc3MnKVxuICAgIG9sZENhcmQucXVlcnlTZWxlY3RvcignLmNhcmQtYnV0dG9ucycpLnJlbW92ZSgpXG4gICAgb2xkQ2FyZC5xdWVyeVNlbGVjdG9yKCcuZGljZS10b29sdGlwJykuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgIENvQzdDaGF0LnVwZGF0ZUNoYXRDYXJkKG9sZENhcmQpIC8vIFRPRE8gOiBDaGVjayBpZiB0aGlzIG5lZWRzIHRvIGJlIGFzeW5jXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBBY3RvciwgQXBwbGljYXRpb24sIENPTkZJRywgQ09OU1QsIERpYWxvZywgRGllLCBmb3VuZHJ5LCBmcm9tVXVpZCwgZnJvbVV1aWRTeW5jLCBnYW1lLCBIb29rcywgUm9sbCwgVGV4dEVkaXRvciwgVG9rZW4sIHVpICovXG5pbXBvcnQgeyBBdmVyYWdlUm9sbCB9IGZyb20gJy4uL2FwcHMvYXZlcmFnZS1yb2xsLmpzJ1xuaW1wb3J0IHsgQ09DNyB9IGZyb20gJy4uL2NvbmZpZy5qcydcbmltcG9ydCBDb0M3QWN0aXZlRWZmZWN0IGZyb20gJy4uL2FjdGl2ZS1lZmZlY3QuanMnXG5pbXBvcnQgeyBDb0M3Q2hhdE1lc3NhZ2UgfSBmcm9tICcuLi9hcHBzL2NvYzctY2hhdC1tZXNzYWdlLmpzJ1xuaW1wb3J0IHsgQ29DN0NoZWNrIH0gZnJvbSAnLi4vY2hlY2suanMnXG5pbXBvcnQgeyBDb0M3Q29uQ2hlY2sgfSBmcm9tICcuLi9jaGF0L2NvbmNoZWNrLmpzJ1xuaW1wb3J0IHsgUm9sbERpYWxvZyB9IGZyb20gJy4uL2FwcHMvcm9sbC1kaWFsb2cuanMnXG5pbXBvcnQgeyBTa2lsbFNlbGVjdERpYWxvZyB9IGZyb20gJy4uL2FwcHMvc2tpbGwtc2VsZWN0aW9uLWRpYWxvZy5qcydcbmltcG9ydCB7IFBvaW50U2VsZWN0RGlhbG9nIH0gZnJvbSAnLi4vYXBwcy9wb2ludC1zZWxlY3Rpb24tZGlhbG9nLmpzJ1xuaW1wb3J0IHsgQ2hhcmFjU2VsZWN0RGlhbG9nIH0gZnJvbSAnLi4vYXBwcy9jaGFyLXNlbGVjdGlvbi1kaWFsb2cuanMnXG5pbXBvcnQgeyBDaGFyYWNSb2xsRGlhbG9nIH0gZnJvbSAnLi4vYXBwcy9jaGFyLXJvbGwtZGlhbG9nLmpzJ1xuaW1wb3J0IHsgU2tpbGxTcGVjU2VsZWN0RGlhbG9nIH0gZnJvbSAnLi4vYXBwcy9za2lsbC1zcGVjLXNlbGVjdC1kaWFsb2cuanMnXG5pbXBvcnQgeyBTa2lsbFNwZWNpYWxpemF0aW9uU2VsZWN0RGlhbG9nIH0gZnJvbSAnLi4vYXBwcy9za2lsbC1zcGVjaWFsaXphdGlvbi1zZWxlY3QtZGlhbG9nLmpzJ1xuaW1wb3J0IHsgU2tpbGxWYWx1ZURpYWxvZyB9IGZyb20gJy4uL2FwcHMvc2tpbGwtdmFsdWUtZGlhbG9nLmpzJ1xuaW1wb3J0IHsgQ29DN01lbGVlSW5pdGlhdG9yIH0gZnJvbSAnLi4vY2hhdC9jb21iYXQvbWVsZWUtaW5pdGlhdG9yLmpzJ1xuaW1wb3J0IHsgQ29DN1JhbmdlSW5pdGlhdG9yIH0gZnJvbSAnLi4vY2hhdC9yYW5nZWNvbWJhdC5qcydcbmltcG9ydCB7IGNoYXRIZWxwZXIgfSBmcm9tICcuLi9jaGF0L2hlbHBlci5qcydcbmltcG9ydCB7IENvQzdEaWNlIH0gZnJvbSAnLi4vZGljZS5qcydcbmltcG9ydCB7IENvQzdJdGVtIH0gZnJvbSAnLi4vaXRlbXMvaXRlbS5qcydcbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi91dGlsaXRpZXMuanMnXG5cbi8qKlxuICogRXh0ZW5kIHRoZSBiYXNlIEFjdG9yIGNsYXNzIHRvIGltcGxlbWVudCBhZGRpdGlvbmFsIGxvZ2ljIHNwZWNpYWxpemVkIGZvciBDb0MgN3RoLlxuICovXG5leHBvcnQgY2xhc3MgQ29DQWN0b3IgZXh0ZW5kcyBBY3RvciB7XG4gIC8qKiBDcmVhdGUgZGVyaXZlZCBkb2N1bWVudCBjbGFzc2VzIGZvciBzcGVjaWZpYyBJdGVtIHR5cGVzICovXG4gIGNvbnN0cnVjdG9yIChkYXRhLCBjb250ZXh0KSB7XG4gICAgLyoqIEBzZWUgQ09ORklHLkFjdG9yLmRvY3VtZW50Q2xhc3NlcyBpbiBtb2R1bGUvc2NyaXB0cy9jb25maWd1cmUtZG9jdW1lbnRzICovXG4gICAgaWYgKGRhdGEudHlwZSBpbiBDT05GSUcuQWN0b3IuZG9jdW1lbnRDbGFzc2VzICYmICFjb250ZXh0Py5leHRlbmRlZCkge1xuICAgICAgLyoqXG4gICAgICAgKiBXaGVuIHRoZSBjb25zdHJ1Y3RvciBmb3IgdGhlIG5ldyBjbGFzcyB3aWxsIGNhbGwgaXQncyBzdXBlcigpLFxuICAgICAgICogdGhlIGV4dGVuZGVkIGZsYWcgd2lsbCBiZSB0cnVlLCB0aHVzIGJ5cGFzc2luZyB0aGlzIHdob2xlIHByb2Nlc3NcbiAgICAgICAqIGFuZCByZXN1bWUgZGVmYXVsdCBiZWhhdmlvclxuICAgICAgICovXG4gICAgICByZXR1cm4gbmV3IENPTkZJRy5BY3Rvci5kb2N1bWVudENsYXNzZXNbZGF0YS50eXBlXShkYXRhLCB7XG4gICAgICAgIC4uLnsgZXh0ZW5kZWQ6IHRydWUgfSxcbiAgICAgICAgLi4uY29udGV4dFxuICAgICAgfSlcbiAgICB9XG4gICAgLy8gaWYgKHR5cGVvZiBkYXRhLmltZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyAgIGlmIChkYXRhLnR5cGUgPT09ICdza2lsbCcpIHtcbiAgICAvLyAgICAgZGF0YS5pbWcgPSAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy9za2lsbHMuc3ZnJ1xuICAgIC8vICAgfSBlbHNlIGlmIChkYXRhLnR5cGUgPT09ICdzdGF0dXMnKSB7XG4gICAgLy8gICAgIGRhdGEuaW1nID0gJ2ljb25zL3N2Zy9hdXJhLnN2ZydcbiAgICAvLyAgIH0gZWxzZSBpZiAoZGF0YS50eXBlID09PSAnd2VhcG9uJykge1xuICAgIC8vICAgICBkYXRhLmltZyA9ICdpY29ucy9zdmcvc3dvcmQuc3ZnJ1xuICAgIC8vICAgfVxuICAgIC8vIH1cbiAgICAvKiogRGVmYXVsdCBiZWhhdmlvciwganVzdCBjYWxsIHN1cGVyKCkgYW5kIGRvIGFsbCB0aGUgZGVmYXVsdCBJdGVtIGluaXRzICovXG4gICAgc3VwZXIoZGF0YSwgY29udGV4dClcbiAgfVxuXG4gIGFzeW5jIGluaXRpYWxpemUgKCkge1xuICAgIHN1cGVyLmluaXRpYWxpemUoKVxuICAgIGF3YWl0IHRoaXMuY3JlYXR1cmVJbml0KCkgLy8gVE9ETyA6IG1vdmUgdGhpcyBpbiBDb0NBY3Rvci5jcmVhdGUoZGF0YSwgb3B0aW9ucylcbiAgfVxuXG4gIC8vICoqKioqKioqKioqKioqKioqKioqKiogVGVzdGluZ1xuICAvLyBhc3luYyB1cGRhdGUoZGF0YSwgb3B0aW9ucz17fSkge1xuICAvLyAgIHVpLm5vdGlmaWNhdGlvbnMuaW5mbygncmV0dXJuIHN1cGVyLnVwZGF0ZShkYXRhLCBvcHRpb25zKTsnKTtcbiAgLy8gICB1aS5ub3RpZmljYXRpb25zLmluZm8oYGludCA6ICR7dGhpcy5jaGFyYWN0ZXJpc3RpY3MuaW50fWApO1xuICAvLyAgIHRoaXMuY2hhcmFjdGVyaXN0aWNzLmludCA9IDE1O1xuICAvLyAgIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyhgbW9kaWZpZWQgaW50IDogJHt0aGlzLmNoYXJhY3RlcmlzdGljcy5pbnR9YCk7XG4gIC8vICAgcmV0dXJuIHN1cGVyLnVwZGF0ZShkYXRhLCBvcHRpb25zKTtcbiAgLy8gfVxuXG4gIC8vIGdldCBjaGFyYWN0ZXJpc3RpY3MoKXtcbiAgLy8gICBjb25zdCBhY3RvciA9IHRoaXM7XG4gIC8vICAgICByZXR1cm4ge1xuICAvLyAgICAgICBnZXQgaW50KCl7XG4gIC8vICAgICAgICAgcmV0dXJuIGFjdG9yLmdldFByb3AoJ19pbnQnKTtcbiAgLy8gICAgICAgfSxcblxuICAvLyAgICAgICBzZXQgaW50KHgpe1xuICAvLyAgICAgICAgIGFjdG9yLnNldFByb3AoJ19pbnQnLCB4KTtcbiAgLy8gICAgICAgfVxuICAvLyAgICB9O1xuICAvLyB9XG5cbiAgLy8gc2V0UHJvcChrZXksIHgpe1xuICAvLyAgIHRoaXNba2V5XSA9IHg7XG4gIC8vIH1cblxuICAvLyBnZXRQcm9wKGtleSl7XG4gIC8vICAgcmV0dXJuIHRoaXNba2V5XXx8MDtcbiAgLy8gfVxuICAvL1xuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogUHJlcGFyZSBkYXRhIHJlbGF0ZWQgdG8gdGhpcyBEb2N1bWVudCBpdHNlbGYsIGJlZm9yZSBhbnkgZW1iZWRkZWQgRG9jdW1lbnRzIG9yIGRlcml2ZWQgZGF0YSBpcyBjb21wdXRlZC5cbiAgICogQG1lbWJlcm9mIENsaWVudERvY3VtZW50TWl4aW4jXG4gICAqL1xuICBwcmVwYXJlQmFzZURhdGEgKCkge1xuICAgIGlmIChbJ2NoYXJhY3RlcicsICducGMnLCAnY3JlYXR1cmUnXS5pbmNsdWRlcyh0aGlzLnR5cGUpKSB7XG4gICAgICB0aGlzLnN5c3RlbS5za2lsbHMgPSB7fVxuICAgICAgZm9yIChjb25zdCBpIG9mIHRoaXMuaXRlbXMpIHtcbiAgICAgICAgaWYgKGkudHlwZSAhPT0gJ3NraWxsJykgY29udGludWVcbiAgICAgICAgdGhpcy5zeXN0ZW0uc2tpbGxzW2Ake2kuaXRlbUlkZW50aWZpZXJ9YF0gPSB7IGZvdW5kcnlJRDogaS5pZCwgY29jaWQ6IGkuZmxhZ3M/LkNvQzc/LmNvY2lkRmxhZz8uaWQsIHZhbHVlOiBpLnJhd1ZhbHVlLCBib251c0RpY2U6IGkuc3lzdGVtLmJvbnVzRGljZSB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAqIFJlbW92YWwgb2YgMS81IHNhbml0eVxuICAgICAqIHRoaXMgaXMgdG8gcmVtb3ZlIHRoZVxuICAgICAqIGFjdG9yLmRhdGEuYXR0cmlicy5zYW4ub25lRmlmdGhTYW5pdHkgdG8gYmUgcmVtb3ZlZCBmcm9tIHRlbXBsYXRlXG4gICAgICogYW5kIGluZGVmaW5pdGVJbnNhbml0eUxldmVsIHRvIGJlIHJlbW92ZWQgZnJvbSB0ZW1wbGF0ZVxuICAgICAqL1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLnN5c3RlbS5hdHRyaWJzLnNhbi5kYWlseUxpbWl0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAodGhpcy5zeXN0ZW0uYXR0cmlicy5zYW4ub25lRmlmdGhTYW5pdHkpIHtcbiAgICAgICAgICBjb25zdCBzID0gdGhpcy5zeXN0ZW0uYXR0cmlicy5zYW4ub25lRmlmdGhTYW5pdHkuc3BsaXQoJy8nKVxuICAgICAgICAgIGlmIChzWzFdICYmICFpc05hTihOdW1iZXIoc1sxXSkpKSB7XG4gICAgICAgICAgICB0aGlzLnN5c3RlbS5hdHRyaWJzLnNhbi5kYWlseUxpbWl0ID0gTnVtYmVyKHNbMV0pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3lzdGVtLmF0dHJpYnMuc2FuLmRhaWx5TGltaXQgPSAwXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc3lzdGVtLmF0dHJpYnMuc2FuLmRhaWx5TGltaXQgPSAwXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gcmV0dXJuIGNvbXB1dGVkIHZhbHVlcyBvciBmaXhlZCB2YWx1ZXMgaWYgbm90IGF1dG8uXG4gICAgICB0aGlzLnN5c3RlbS5hdHRyaWJzLm1vdi52YWx1ZSA9IHRoaXMucmF3TW92XG4gICAgICB0aGlzLnN5c3RlbS5hdHRyaWJzLmRiLnZhbHVlID0gdGhpcy5yYXdEYlxuICAgICAgdGhpcy5zeXN0ZW0uYXR0cmlicy5idWlsZC52YWx1ZSA9IHRoaXMucmF3QnVpbGRcblxuICAgICAgLy8gRm9yIHZlaGljbGUgb25seSA6XG4gICAgICB0aGlzLnN5c3RlbS5hdHRyaWJzLmJ1aWxkLmN1cnJlbnQgPSB0aGlzLmhwXG5cbiAgICAgIC8vIGlmIChcbiAgICAgIC8vICAgZGF0YS5kYXRhLmF0dHJpYnMubXAudmFsdWUgPiBkYXRhLmRhdGEuYXR0cmlicy5tcC5tYXggfHxcbiAgICAgIC8vICAgZGF0YS5kYXRhLmF0dHJpYnMubXAubWF4ID09IG51bGxcbiAgICAgIC8vICkge1xuICAgICAgLy8gICBkYXRhLmRhdGEuYXR0cmlicy5tcC52YWx1ZSA9IGRhdGEuZGF0YS5hdHRyaWJzLm1wLm1heFxuICAgICAgLy8gfVxuICAgICAgLy8gaWYgKFxuICAgICAgLy8gICBkYXRhLmRhdGEuYXR0cmlicy5ocC52YWx1ZSA+IGRhdGEuZGF0YS5hdHRyaWJzLmhwLm1heCB8fFxuICAgICAgLy8gICBkYXRhLmRhdGEuYXR0cmlicy5ocC5tYXggPT0gbnVsbFxuICAgICAgLy8gKSB7XG4gICAgICAvLyAgIGRhdGEuZGF0YS5hdHRyaWJzLmhwLnZhbHVlID0gZGF0YS5kYXRhLmF0dHJpYnMuaHAubWF4XG4gICAgICAvLyB9XG5cbiAgICAvLyBpZiAoXG4gICAgLy8gICBkYXRhLmRhdGEuYXR0cmlicy5ocC52YWx1ZSA9PSBudWxsICYmXG4gICAgLy8gICBkYXRhLmRhdGEuYXR0cmlicy5ocC5tYXggIT0gbnVsbFxuICAgIC8vICkge1xuICAgIC8vICAgZGF0YS5kYXRhLmF0dHJpYnMuaHAudmFsdWUgPSBkYXRhLmRhdGEuYXR0cmlicy5ocC5tYXhcbiAgICAvLyB9XG4gICAgLy8gaWYgKFxuICAgIC8vICAgZGF0YS5kYXRhLmF0dHJpYnMubXAudmFsdWUgPT0gbnVsbCAmJlxuICAgIC8vICAgZGF0YS5kYXRhLmF0dHJpYnMubXAubWF4ICE9IG51bGxcbiAgICAvLyApIHtcbiAgICAvLyAgIGRhdGEuZGF0YS5hdHRyaWJzLm1wLnZhbHVlID0gZGF0YS5kYXRhLmF0dHJpYnMubXAubWF4XG4gICAgLy8gfVxuICAgIH1cbiAgICBzdXBlci5wcmVwYXJlQmFzZURhdGEoKVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBQcmVwYXJlIGFsbCBlbWJlZGRlZCBEb2N1bWVudCBpbnN0YW5jZXMgd2hpY2ggZXhpc3Qgd2l0aGluIHRoaXMgcHJpbWFyeSBEb2N1bWVudC5cbiAgICogQG1lbWJlcm9mIENsaWVudERvY3VtZW50TWl4aW4jXG4gICAqIGFjdGl2ZSBlZmZlY3RzIGFyZSBhcHBsaWVkXG4gICAqL1xuICBwcmVwYXJlRW1iZWRkZWREb2N1bWVudHMgKCkge1xuICAgIHN1cGVyLnByZXBhcmVFbWJlZGRlZERvY3VtZW50cygpXG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqIEFwcGx5IHRyYW5zZm9ybWF0aW9ucyBvciBkZXJpdmF0aW9ucyB0byB0aGUgdmFsdWVzIG9mIHRoZSBzb3VyY2UgZGF0YSBvYmplY3QuXG4gICAqIENvbXB1dGUgZGF0YSBmaWVsZHMgd2hvc2UgdmFsdWVzIGFyZSBub3Qgc3RvcmVkIHRvIHRoZSBkYXRhYmFzZS5cbiAgICogQG1lbWJlcm9mIENsaWVudERvY3VtZW50TWl4aW4jXG4gICAqL1xuICBwcmVwYXJlRGVyaXZlZERhdGEgKCkge1xuICAgIGlmIChbJ2NoYXJhY3RlcicsICducGMnLCAnY3JlYXR1cmUnXS5pbmNsdWRlcyh0aGlzLnR5cGUpKSB7XG4gICAgICBzdXBlci5wcmVwYXJlRGVyaXZlZERhdGEoKVxuICAgICAgLy8gU2V0IGhwTWF4LCBtcE1heCwgc2FuTWF4LCBtb3YsIGRiLCBidWlsZC4gVGhpcyBpcyB0byBhbGxvdyBjYWxjdWxhdGlvbiBvZiBkZXJpdmVkIHZhbHVlIHdpdGggbW9kaWZlZCBjaGFyYWN0ZXJpc3RpY3MuXG4gICAgICB0aGlzLnN5c3RlbS5hdHRyaWJzLm1vdi52YWx1ZSA9IHRoaXMucmF3TW92XG4gICAgICB0aGlzLnN5c3RlbS5hdHRyaWJzLmRiLnZhbHVlID0gdGhpcy5yYXdEYlxuICAgICAgdGhpcy5zeXN0ZW0uYXR0cmlicy5idWlsZC52YWx1ZSA9IHRoaXMucmF3QnVpbGRcblxuICAgICAgdGhpcy5zeXN0ZW0uYXR0cmlicy5ocC5tYXggPSB0aGlzLnJhd0hwTWF4XG4gICAgICBpZiAodGhpcy5ocCA9PT0gbnVsbCkgdGhpcy5zeXN0ZW0uYXR0cmlicy5ocC52YWx1ZSA9IHRoaXMucmF3SHBNYXhcblxuICAgICAgdGhpcy5zeXN0ZW0uYXR0cmlicy5tcC5tYXggPSB0aGlzLnJhd01wTWF4XG4gICAgICBpZiAodGhpcy5tcCA9PT0gbnVsbCkgdGhpcy5zeXN0ZW0uYXR0cmlicy5tcC52YWx1ZSA9IHRoaXMucmF3TXBNYXhcblxuICAgICAgdGhpcy5zeXN0ZW0uYXR0cmlicy5zYW4ubWF4ID0gdGhpcy5yYXdTYW5NYXhcbiAgICAgIGlmICh0aGlzLnNhbiA9PT0gbnVsbCkgdGhpcy5zeXN0ZW0uYXR0cmlicy5zYW4udmFsdWUgPSB0aGlzLnJhd1Nhbk1heFxuXG4gICAgICAvLyBBcHBseSBlZmZlY3RzIHRvIGF1dG9tYXRpY2FseSBjYWxjdWxhdGVkIHZhbHVlcy5cbiAgICAgIGNvbnN0IGZpbHRlck1hdHJpeCA9IFtdXG5cbiAgICAgIGlmICh0aGlzLnN5c3RlbS5hdHRyaWJzLmhwLmF1dG8pIGZpbHRlck1hdHJpeC5wdXNoKCdzeXN0ZW0uYXR0cmlicy5ocC5tYXgnKVxuICAgICAgaWYgKHRoaXMuc3lzdGVtLmF0dHJpYnMubXAuYXV0bykgZmlsdGVyTWF0cml4LnB1c2goJ3N5c3RlbS5hdHRyaWJzLm1wLm1heCcpXG4gICAgICBpZiAodGhpcy5zeXN0ZW0uYXR0cmlicy5zYW4uYXV0bykgZmlsdGVyTWF0cml4LnB1c2goJ3N5c3RlbS5hdHRyaWJzLnNhbi5tYXgnKVxuICAgICAgaWYgKHRoaXMuc3lzdGVtLmF0dHJpYnMubW92LmF1dG8pIGZpbHRlck1hdHJpeC5wdXNoKCdzeXN0ZW0uYXR0cmlicy5tb3YudmFsdWUnKVxuICAgICAgaWYgKHRoaXMuc3lzdGVtLmF0dHJpYnMuZGIuYXV0bykgZmlsdGVyTWF0cml4LnB1c2goJ3N5c3RlbS5hdHRyaWJzLmRiLnZhbHVlJylcbiAgICAgIGlmICh0aGlzLnN5c3RlbS5hdHRyaWJzLmJ1aWxkLmF1dG8pIGZpbHRlck1hdHJpeC5wdXNoKCdzeXN0ZW0uYXR0cmlicy5idWlsZC52YWx1ZScpXG5cbiAgICAgIGNvbnN0IGNoYW5nZXMgPSB0aGlzLmVmZmVjdHMucmVkdWNlKChjaGFuZ2VzLCBlKSA9PiB7XG4gICAgICAgIGlmIChlLmRpc2FibGVkIHx8IGUuaXNTdXBwcmVzc2VkKSByZXR1cm4gY2hhbmdlc1xuICAgICAgICByZXR1cm4gY2hhbmdlcy5jb25jYXQoXG4gICAgICAgICAgZS5jaGFuZ2VzLm1hcChjID0+IHtcbiAgICAgICAgICAgIGMgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShjKVxuICAgICAgICAgICAgYy5lZmZlY3QgPSBlXG4gICAgICAgICAgICBjLnByaW9yaXR5ID0gYy5wcmlvcml0eSA/PyBjLm1vZGUgKiAxMFxuICAgICAgICAgICAgcmV0dXJuIGNcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICB9LCBbXSlcbiAgICAgIGNoYW5nZXMuc29ydCgoYSwgYikgPT4gYS5wcmlvcml0eSAtIGIucHJpb3JpdHkpXG5cbiAgICAgIGNvbnN0IHNlbGVjdENoYW5nZXMgPSBjaGFuZ2VzLmZpbHRlcihlID0+IGZpbHRlck1hdHJpeC5pbmNsdWRlcyhlLmtleSkpXG5cbiAgICAgIC8vIEFwcGx5IGFsbCBjaGFuZ2VzXG4gICAgICBmb3IgKGNvbnN0IGNoYW5nZSBvZiBzZWxlY3RDaGFuZ2VzKSB7XG4gICAgICAgIGNoYW5nZS5lZmZlY3QuYXBwbHkodGhpcywgY2hhbmdlKVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5ocE1heCAmJiB0aGlzLmhwTWF4IDwgdGhpcy5ocCkgeyB0aGlzLnN5c3RlbS5hdHRyaWJzLmhwLnZhbHVlID0gdGhpcy5ocE1heCB9XG4gICAgICBpZiAodGhpcy5tcE1heCAmJiB0aGlzLm1wTWF4IDwgdGhpcy5tcCkgeyB0aGlzLnN5c3RlbS5hdHRyaWJzLm1wLnZhbHVlID0gdGhpcy5tcE1heCB9XG4gICAgICBpZiAodGhpcy5zYW5NYXggJiYgdGhpcy5zYW5NYXggPCB0aGlzLnNhbikgeyB0aGlzLnN5c3RlbS5hdHRyaWJzLnNhbi52YWx1ZSA9IHRoaXMuc2FuTWF4IH1cbiAgICB9XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIHN0YXRpYyBhc3luYyBjcmVhdGUgKGRhdGEsIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmIChkYXRhLnR5cGUgPT09ICdjaGFyYWN0ZXInKSB7XG4gICAgICBkYXRhLnByb3RvdHlwZVRva2VuID0gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChkYXRhLnByb3RvdHlwZVRva2VuIHx8IHt9LCB7XG4gICAgICAgIGFjdG9yTGluazogdHJ1ZSxcbiAgICAgICAgZGlzcG9zaXRpb246IDEsXG4gICAgICAgIHNpZ2h0OiB7XG4gICAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0gZWxzZSBpZiAoZGF0YS50eXBlID09PSAnbnBjJykge1xuICAgICAgaWYgKHR5cGVvZiBkYXRhLmltZyA9PT0gJ3VuZGVmaW5lZCcgfHwgZGF0YS5pbWcgPT09ICdpY29ucy9zdmcvbXlzdGVyeS1tYW4uc3ZnJykge1xuICAgICAgICBkYXRhLmltZyA9ICdzeXN0ZW1zL0NvQzcvYXNzZXRzL2ljb25zL2N1bHRpc3Quc3ZnJ1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZGF0YS50eXBlID09PSAnY3JlYXR1cmUnKSB7XG4gICAgICBpZiAodHlwZW9mIGRhdGEuaW1nID09PSAndW5kZWZpbmVkJyB8fCBkYXRhLmltZyA9PT0gJ2ljb25zL3N2Zy9teXN0ZXJ5LW1hbi5zdmcnKSB7XG4gICAgICAgIGRhdGEuaW1nID0gJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvZmxvYXRpbmctdGVudGFjbGVzLnN2ZydcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGRhdGEudHlwZSA9PT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgIGlmICh0eXBlb2YgZGF0YS5pbWcgPT09ICd1bmRlZmluZWQnIHx8IGRhdGEuaW1nID09PSAnaWNvbnMvc3ZnL215c3RlcnktbWFuLnN2ZycpIHtcbiAgICAgICAgZGF0YS5pbWcgPSAnaWNvbnMvc3ZnL2NoZXN0LnN2ZydcbiAgICAgIH1cbiAgICAgIGRhdGEucHJvdG90eXBlVG9rZW4gPSBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KGRhdGEucHJvdG90eXBlVG9rZW4gfHwge30sIHtcbiAgICAgICAgYWN0b3JMaW5rOiB0cnVlXG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gc3VwZXIuY3JlYXRlKGRhdGEsIG9wdGlvbnMpXG4gIH1cblxuICAvKipcbiAgICogRWFybHkgdmVyc2lvbiBvbiB0ZW1wbGF0ZXMgZGlkIG5vdCBpbmNsdWRlIHBvc3NpYmlsaXR5IG9mIGF1dG8gY2FsY1xuICAgKiBKdXN0IGNoZWNrIGlmIGF1dG8gaXMgdW5kZWZpbmVkLCBpbiB3aGljaCBjYXNlIGl0IHdpbGwgYmUgc2V0IHRvIHRydWVcbiAgICovXG4gIGNoZWNrVW5kZWZpbmVkQXV0byAoKSB7XG4gICAgY29uc3QgcmV0dXJuRGF0YSA9IHtcbiAgICAgIGF0dHJpYnM6IHtcbiAgICAgICAgaHA6IHt9LFxuICAgICAgICBtcDoge30sXG4gICAgICAgIHNhbjoge30sXG4gICAgICAgIG1vdjoge30sXG4gICAgICAgIGRiOiB7fSxcbiAgICAgICAgYnVpbGQ6IHt9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLnN5c3RlbS5hdHRyaWJzPy5ocD8uYXV0byA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm5EYXRhLmF0dHJpYnMuaHAuYXV0byA9IHRydWVcbiAgICB9XG4gICAgaWYgKHRoaXMuc3lzdGVtLmF0dHJpYnM/Lm1wPy5hdXRvID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybkRhdGEuYXR0cmlicy5tcC5hdXRvID0gdHJ1ZVxuICAgIH1cbiAgICBpZiAodGhpcy5zeXN0ZW0uYXR0cmlicz8uc2FuPy5hdXRvID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybkRhdGEuYXR0cmlicy5zYW4uYXV0byA9IHRydWVcbiAgICB9XG4gICAgaWYgKHRoaXMuc3lzdGVtLmF0dHJpYnM/Lm1vdj8uYXV0byA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm5EYXRhLmF0dHJpYnMubW92LmF1dG8gPSB0cnVlXG4gICAgfVxuICAgIGlmICh0aGlzLnN5c3RlbS5hdHRyaWJzPy5kYj8uYXV0byA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm5EYXRhLmF0dHJpYnMuZGIuYXV0byA9IHRydWVcbiAgICB9XG4gICAgaWYgKHRoaXMuc3lzdGVtLmF0dHJpYnM/LmJ1aWxkPy5hdXRvID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybkRhdGEuYXR0cmlicy5idWlsZC5hdXRvID0gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiByZXR1cm5EYXRhXG4gIH1cblxuICBnZXQgY2hhcmFjdGVyaXN0aWNzICgpIHtcbiAgICBjb25zdCBjaGFyYWN0ZXJpc3RpY3MgPSB7XG4gICAgICBzdHI6IHtcbiAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgIHNob3J0TmFtZTogJ0NIQVJBQy5TVFInLFxuICAgICAgICBsYWJlbDogJ0NIQVJBQy5TdHJlbmd0aCcsXG4gICAgICAgIGZvcm11bGE6IG51bGxcbiAgICAgIH0sXG4gICAgICBjb246IHtcbiAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgIHNob3J0TmFtZTogJ0NIQVJBQy5DT04nLFxuICAgICAgICBsYWJlbDogJ0NIQVJBQy5Db25zdGl0dXRpb24nLFxuICAgICAgICBmb3JtdWxhOiBudWxsXG4gICAgICB9LFxuICAgICAgc2l6OiB7XG4gICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICBzaG9ydE5hbWU6ICdDSEFSQUMuU0laJyxcbiAgICAgICAgbGFiZWw6ICdDSEFSQUMuU2l6ZScsXG4gICAgICAgIGZvcm11bGE6IG51bGxcbiAgICAgIH0sXG4gICAgICBkZXg6IHtcbiAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgIHNob3J0TmFtZTogJ0NIQVJBQy5ERVgnLFxuICAgICAgICBsYWJlbDogJ0NIQVJBQy5EZXh0ZXJpdHknLFxuICAgICAgICBmb3JtdWxhOiBudWxsXG4gICAgICB9LFxuICAgICAgYXBwOiB7XG4gICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICBzaG9ydE5hbWU6ICdDSEFSQUMuQVBQJyxcbiAgICAgICAgbGFiZWw6ICdDSEFSQUMuQXBwZWFyYW5jZScsXG4gICAgICAgIGZvcm11bGE6IG51bGxcbiAgICAgIH0sXG4gICAgICBpbnQ6IHtcbiAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgIHNob3J0TmFtZTogJ0NIQVJBQy5JTlQnLFxuICAgICAgICBsYWJlbDogJ0NIQVJBQy5JbnRlbGxpZ2VuY2UnLFxuICAgICAgICBmb3JtdWxhOiBudWxsXG4gICAgICB9LFxuICAgICAgcG93OiB7XG4gICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICBzaG9ydE5hbWU6ICdDSEFSQUMuUE9XJyxcbiAgICAgICAgbGFiZWw6ICdDSEFSQUMuUG93ZXInLFxuICAgICAgICBmb3JtdWxhOiBudWxsXG4gICAgICB9LFxuICAgICAgZWR1OiB7XG4gICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICBzaG9ydE5hbWU6ICdDSEFSQUMuRURVJyxcbiAgICAgICAgbGFiZWw6ICdDSEFSQUMuRWR1Y2F0aW9uJyxcbiAgICAgICAgZm9ybXVsYTogbnVsbFxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzKSB7XG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhcbiAgICAgICAgdGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzXG4gICAgICApKSB7XG4gICAgICAgIGNoYXJhY3RlcmlzdGljc1trZXldID0ge1xuICAgICAgICAgIGtleSxcbiAgICAgICAgICBzaG9ydE5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSh2YWx1ZS5zaG9ydCksXG4gICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSh2YWx1ZS5sYWJlbCksXG4gICAgICAgICAgdmFsdWU6IHZhbHVlLnZhbHVlLFxuICAgICAgICAgIGhhcmQ6IE1hdGguZmxvb3IodmFsdWUudmFsdWUgLyAyKSB8fCBudWxsLFxuICAgICAgICAgIGV4dHJlbWU6IE1hdGguZmxvb3IodmFsdWUudmFsdWUgLyA1KSB8fCBudWxsLFxuICAgICAgICAgIGZvcm11bGE6IHZhbHVlLmZvcm11bGFcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hhcmFjdGVyaXN0aWNzXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gdG9rZW4gY3JlYXRpb24gZnJvbSBwcmVDcmVhdGVBY3RvciBob29rXG4gICAqIEBwYXJhbSB7Kn0gY3JlYXRlRGF0YVxuICAgKi9cbiAgc3RhdGljIGFzeW5jIGluaXRUb2tlbiAoY3JlYXRlRGF0YSkge1xuICAgIC8vIGNhbGxlZCB1cG9uIHRva2VuIGNyZWF0aW9uLmFjdGl2ZVxuICAgIGlmIChjcmVhdGVEYXRhKSB7XG4gICAgICAvL1xuICAgIH1cbiAgfVxuXG4gIGdldCBoYXNUZW1wb0luc2FuZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzQ29uZGl0aW9uU3RhdHVzKENPQzcuc3RhdHVzLnRlbXBvSW5zYW5lKVxuICB9XG5cbiAgZ2V0IGdldFRlbXBvSW5zYW5lRHVyYXRpb25UZXh0ICgpIHtcbiAgICByZXR1cm4gdGhpcy5oYXNDb25kaXRpb25WYWx1ZShDT0M3LnN0YXR1cy50ZW1wb0luc2FuZSwgJ2R1cmF0aW9uVGV4dCcpXG4gIH1cblxuICBnZXQgaGFzSW5kZWZJbnNhbmUgKCkge1xuICAgIHJldHVybiB0aGlzLmhhc0NvbmRpdGlvblN0YXR1cyhDT0M3LnN0YXR1cy5pbmRlZkluc2FuZSlcbiAgfVxuXG4gIGdldCBwb3J0cmFpdCAoKSB7XG4gICAgaWYgKCFnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICd1c2VUb2tlbicpKSByZXR1cm4gdGhpcy5pbWdcbiAgICByZXR1cm4gdGhpcy50b2tlbj8udGV4dHVyZT8uc3JjIHx8IHRoaXMucHJvdG90eXBlVG9rZW4/LnRleHR1cmU/LnNyYyB8fCB0aGlzLmltZ1xuICB9XG5cbiAgYXN5bmMgZW50ZXJCb3V0T2ZNYWRuZXNzIChyZWFsVGltZSA9IHRydWUsIGR1cmF0aW9uID0gMSkge1xuICAgIC8vIGNvbnN0IGR1cmF0aW9uID0ge3JvdW5kczogMSxcbiAgICAvLyAgIHNlY29uZHM6IDE3LFxuICAgIC8vICAgc3RhcnRSb3VuZDogMyxcbiAgICAvLyAgIHN0YXJ0VGltZTogNTgsXG4gICAgLy8gICBzdGFydFR1cm46IDQsXG4gICAgLy8gICB0dXJuczogMn07XG4gICAgLy8gYXdhaXQgdGhpcy5ib3V0T2ZNYWRuZXNzPy5zZXRGbGFnKCAnQ29DNycsICdtYWRuZXNzJywgdHJ1ZSk7XG5cbiAgICBsZXQgcmVzdWx0ID0gbnVsbFxuICAgIGNvbnN0IGJvdXRPZk1hZG5lc3NUYWJsZUlkID0gcmVhbFRpbWVcbiAgICAgID8gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnYm91dE9mTWFkbmVzc1JlYWxUaW1lVGFibGUnKVxuICAgICAgOiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdib3V0T2ZNYWRuZXNzU3VtbWFyeVRhYmxlJylcbiAgICBpZiAoYm91dE9mTWFkbmVzc1RhYmxlSWQgIT09ICdub25lJykge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBwaG9iaWE6IGZhbHNlLFxuICAgICAgICBtYW5pYTogZmFsc2UsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBudWxsXG4gICAgICB9XG4gICAgICBjb25zdCBib3V0T2ZNYWRuZXNzVGFibGUgPSBnYW1lLnRhYmxlcy5nZXQoYm91dE9mTWFkbmVzc1RhYmxlSWQpXG4gICAgICByZXN1bHQudGFibGVSb2xsID0gYXdhaXQgYm91dE9mTWFkbmVzc1RhYmxlLnJvbGwoKVxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQudGFibGVSb2xsLnJlc3VsdHNbMF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBDT05TVC5UQUJMRV9SRVNVTFRfVFlQRVMuRE9DVU1FTlQgPT09XG4gICAgICAgICAgcmVzdWx0LnRhYmxlUm9sbC5yZXN1bHRzWzBdLnR5cGVcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3QgaXRlbSA9IGdhbWUuaXRlbXMuZ2V0KHJlc3VsdC50YWJsZVJvbGwucmVzdWx0c1swXS5kb2N1bWVudElkKVxuICAgICAgICAgIGlmICh0eXBlb2YgaXRlbSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmIChpdGVtLnN5c3RlbT8udHlwZT8ucGhvYmlhKSByZXN1bHQucGhvYmlhID0gdHJ1ZVxuICAgICAgICAgICAgaWYgKGl0ZW0uc3lzdGVtPy50eXBlPy5tYW5pYSkgcmVzdWx0Lm1hbmlhID0gdHJ1ZVxuICAgICAgICAgICAgcmVzdWx0LmRlc2NyaXB0aW9uID0gYCR7aXRlbS5uYW1lfTpgICsgYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgICAgICAgICBpdGVtLnN5c3RlbS5kZXNjcmlwdGlvbi52YWx1ZSxcbiAgICAgICAgICAgICAgeyBhc3luYzogdHJ1ZSB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgICByZXN1bHQubmFtZSA9IGl0ZW0ubmFtZVxuICAgICAgICAgICAgY29uc3QgaXRlbURhdGEgPSBpdGVtLnRvT2JqZWN0KClcbiAgICAgICAgICAgIGRlbGV0ZSBpdGVtRGF0YS5faWRcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBbaXRlbURhdGFdKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTWVzc2FnZUJvdXRPZk1hZG5lc3NJdGVtTm90Rm91bmQnKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgQ09OU1QuVEFCTEVfUkVTVUxUX1RZUEVTLlRFWFQgPT09XG4gICAgICAgICAgcmVzdWx0LnRhYmxlUm9sbC5yZXN1bHRzWzBdLnR5cGVcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmVzdWx0LmRlc2NyaXB0aW9uID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgICAgICAgcmVzdWx0LnRhYmxlUm9sbC5yZXN1bHRzWzBdLnRleHQsXG4gICAgICAgICAgICB7IGFzeW5jOiB0cnVlIH1cbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk1lc3NhZ2VCb3V0T2ZNYWRuZXNzVGFibGVOb3RGb3VuZCcpXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiBpdCdzIG5vdCBhIHJlYWwgdGltZSBubyBuZWVkIHRvIGFjdGl2YXRlIHRoZSBib3V0XG4gICAgaWYgKCFyZWFsVGltZSkgcmV0dXJuIHJlc3VsdFxuXG4gICAgdGhpcy5zZXRDb25kaXRpb24oQ09DNy5zdGF0dXMudGVtcG9JbnNhbmUsIHtcbiAgICAgIHJlYWxUaW1lLFxuICAgICAgZHVyYXRpb25cbiAgICB9KVxuXG4gICAgLy8gY29uc3QgZWZmZWN0ID0gdGhpcy5lZmZlY3RzLmdldCggZWZmZWN0RGF0YS5faWQpO1xuICAgIC8vIGVmZmVjdC5zaGVldC5yZW5kZXIodHJ1ZSk7XG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gbmV3IGFjdG9yIGNyZWF0aW9uLlxuICAgKiBAcGFyYW0geyp9IGRhdGFcbiAgICogQHBhcmFtIHsqfSBvcHRpb25zXG4gICAqL1xuICAvLyBzdGF0aWMgYXN5bmMgY3JlYXRlKGRhdGEsIG9wdGlvbnMpIHtcbiAgLy8gIC8vIElmIHRoZSBjcmVhdGVkIGFjdG9yIGhhcyBpdGVtcyAob25seSBhcHBsaWNhYmxlIHRvIGR1cGxpY2F0ZWQgYWN0b3JzKSBieXBhc3MgdGhlIG5ldyBhY3RvciBjcmVhdGlvbiBsb2dpY1xuICAvLyAgaWYgKGRhdGEuaXRlbXMpIHtcbiAgLy8gICAgcmV0dXJuIHN1cGVyLmNyZWF0ZShkYXRhLCBvcHRpb25zKTtcbiAgLy8gIH1cbiAgLy8gIHJldHVybiBzdXBlci5jcmVhdGUoZGF0YSwgb3B0aW9ucyk7XG4gIC8vIH1cblxuICBzdGF0aWMgZW1wdHlTa2lsbCAoXG4gICAgc2tpbGxOYW1lLFxuICAgIHZhbHVlLFxuICAgIHtcbiAgICAgIHJhcml0eSA9IGZhbHNlLFxuICAgICAgcHVzaCA9IHRydWUsXG4gICAgICBjb21iYXQgPSBmYWxzZSxcbiAgICAgIGltZyA9IGZhbHNlLFxuICAgICAgc3BlY2lhbGl6YXRpb24gPSBmYWxzZVxuICAgIH0gPSB7fVxuICApIHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbmFtZTogc2tpbGxOYW1lLFxuICAgICAgdHlwZTogJ3NraWxsJyxcbiAgICAgIHN5c3RlbToge1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgc2tpbGxOYW1lLFxuICAgICAgICBzcGVjaWFsaXphdGlvbjogJycsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICBzcGVjaWFsOiBmYWxzZSxcbiAgICAgICAgICByYXJpdHksXG4gICAgICAgICAgcHVzaCxcbiAgICAgICAgICBjb21iYXRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaW1nICE9PSBmYWxzZSkge1xuICAgICAgZGF0YS5pbWcgPSBpbWdcbiAgICB9XG4gICAgaWYgKHNwZWNpYWxpemF0aW9uICE9PSBmYWxzZSkge1xuICAgICAgY29uc3QgcGFydHMgPSBDb0M3SXRlbS5nZXROYW1lUGFydHNTcGVjKHNraWxsTmFtZSwgc3BlY2lhbGl6YXRpb24pXG4gICAgICBkYXRhLnN5c3RlbS5zcGVjaWFsaXphdGlvbiA9IHBhcnRzLnNwZWNpYWxpemF0aW9uXG4gICAgICBkYXRhLnN5c3RlbS5za2lsbE5hbWUgPSBwYXJ0cy5za2lsbE5hbWVcbiAgICAgIGRhdGEubmFtZSA9IHBhcnRzLm5hbWVcbiAgICAgIGRhdGEuc3lzdGVtLnByb3BlcnRpZXMuc3BlY2lhbCA9IHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGRhdGFcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhbiBsaXN0IG9mIHNraWxscyBieSByZW1vdmluZyBzcGVjaWFsaXphdGlvbiBmcm9tIG5hbWVcbiAgICovXG4gIC8vIGFzeW5jIGNsZWFuU2tpbGxzICgpIHtcbiAgLy8gICBEaWFsb2cuY29uZmlybSh7XG4gIC8vICAgICB0aXRsZTogYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNsZWFuU2tpbGxMaXN0Jyl9YCxcbiAgLy8gICAgIGNvbnRlbnQ6IGA8cD4ke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5DbGVhblNraWxsTGlzdEhpbnQnKX08L3A+YCxcbiAgLy8gICAgIHllczogKCkgPT4gY2xlYW4odGhpcylcbiAgLy8gICB9KVxuICAvLyAgIGFzeW5jIGZ1bmN0aW9uIGNsZWFuIChhY3Rvcikge1xuICAvLyAgICAgY29uc3QgdXBkYXRlID0gW11cbiAgLy8gICAgIGFjdG9yLnNraWxscy5mb3JFYWNoKHMgPT4ge1xuICAvLyAgICAgICBpZiAocy5zeXN0ZW0ucHJvcGVydGllcy5zcGVjaWFsKSB7XG4gIC8vICAgICAgICAgY29uc3QgY2xlYW4gPSBDb0M3SXRlbS5nZXROYW1lV2l0aG91dFNwZWMocyk/LnRyaW0oKVxuICAvLyAgICAgICAgIGlmIChjbGVhbi50b0xvd2VyQ2FzZSgpICE9IHMubmFtZS50b0xvd2VyQ2FzZSgpIHx8IGNsZWFuLnRvTG93ZXJDYXNlKCkgIT0gcy5kYXRhLm5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAvLyAgICAgICAgICAgdXBkYXRlLnB1c2goe1xuICAvLyAgICAgICAgICAgICBfaWQ6IHMuaWQsXG4gIC8vICAgICAgICAgICAgIG5hbWU6IGNsZWFuXG4gIC8vICAgICAgICAgICB9KVxuICAvLyAgICAgICAgIH1cbiAgLy8gICAgICAgfVxuICAvLyAgICAgfSlcbiAgLy8gICAgIGlmICh1cGRhdGUubGVuZ3RoICE9IDApe1xuICAvLyAgICAgICBhd2FpdCBhY3Rvci51cGRhdGVFbWJlZGRlZERvY3VtZW50cygnSXRlbScsIHVwZGF0ZSlcbiAgLy8gICAgICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKCBgU2tpbGxzIDogJHtBcnJheS5mcm9tKCB1cGRhdGUsIGUgPT4gZS5uYW1lKS5qb2luKCcsICcpfSB1cGRhdGVkLmApXG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICB1aS5ub3RpZmljYXRpb25zLmluZm8oICdTa2lsbCBsaXN0IHdhcyBjbGVhbiBhbHJlYWR5ICEnKVxuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgYXN5bmMgY3JlYXRlU2tpbGwgKHNraWxsTmFtZSwgdmFsdWUsIHNob3dTaGVldCA9IGZhbHNlKSB7XG4gICAgY29uc3QgZGF0YSA9IENvQ0FjdG9yLmVtcHR5U2tpbGwoc2tpbGxOYW1lLCB2YWx1ZSlcbiAgICBjb25zdCBjcmVhdGVkID0gYXdhaXQgdGhpcy5jcmVhdGVFbWJlZGRlZERvY3VtZW50cygnSXRlbScsIFtkYXRhXSwge1xuICAgICAgcmVuZGVyU2hlZXQ6IHNob3dTaGVldFxuICAgIH0pXG4gICAgcmV0dXJuIGNyZWF0ZWRcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVdlYXBvblNraWxsIChuYW1lLCBmaXJlYXJtcyA9IGZhbHNlLCBiYXNlID0gbnVsbCkge1xuICAgIC8vIFRPRE8gOiBBc2sgZm9yIGJhc2UgdmFsdWUgaWYgbnVsbFxuXG4gICAgY29uc3Qgc2tpbGxEYXRhID0gYXdhaXQgU2tpbGxTcGVjU2VsZWN0RGlhbG9nLmNyZWF0ZShcbiAgICAgIFtdLFxuICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICBmaXJlYXJtc1xuICAgICAgICAgID8gJ0NvQzcuRmlyZWFybVNwZWNpYWxpemF0aW9uTmFtZSdcbiAgICAgICAgICA6ICdDb0M3LkZpZ2h0aW5nU3BlY2lhbGl6YXRpb25OYW1lJ1xuICAgICAgKSxcbiAgICAgIDAsXG4gICAgICBuYW1lXG4gICAgKVxuICAgIGNvbnN0IHZhbHVlID0gTnVtYmVyKHNraWxsRGF0YS5nZXQoJ2Jhc2UtdmFsdWUnKSlcbiAgICBjb25zdCBwYXJ0cyA9IENvQzdJdGVtLmdldE5hbWVQYXJ0c1NwZWMoXG4gICAgICBuYW1lLFxuICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICBmaXJlYXJtc1xuICAgICAgICAgID8gJ0NvQzcuRmlyZWFybVNwZWNpYWxpemF0aW9uTmFtZSdcbiAgICAgICAgICA6ICdDb0M3LkZpZ2h0aW5nU3BlY2lhbGl6YXRpb25OYW1lJ1xuICAgICAgKVxuICAgIClcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbmFtZTogcGFydHMubmFtZSxcbiAgICAgIHR5cGU6ICdza2lsbCcsXG4gICAgICBzeXN0ZW06IHtcbiAgICAgICAgYmFzZTogaXNOYU4odmFsdWUpID8gMCA6IHZhbHVlLFxuICAgICAgICBhZGp1c3RtZW50czoge1xuICAgICAgICAgIHBlcnNvbmFsOiBudWxsLFxuICAgICAgICAgIG9jY3VwYXRpb246IG51bGwsXG4gICAgICAgICAgYXJjaGV0eXBlOiBudWxsLFxuICAgICAgICAgIGV4cGVyaWVuY2U6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgc2tpbGxOYW1lOiBwYXJ0cy5za2lsbE5hbWUsXG4gICAgICAgIHNwZWNpYWxpemF0aW9uOiBwYXJ0cy5zcGVjaWFsaXphdGlvbixcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIHNwZWNpYWw6IHRydWUsXG4gICAgICAgICAgZmlnaHRpbmc6ICFmaXJlYXJtcyxcbiAgICAgICAgICBmaXJlYXJtOiBmaXJlYXJtcyxcbiAgICAgICAgICBjb21iYXQ6IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBhd2FpdCB0aGlzLmNyZWF0ZUVtYmVkZGVkRG9jdW1lbnRzKCdJdGVtJywgW2RhdGFdLCB7XG4gICAgICByZW5kZXJTaGVldDogIWJhc2VcbiAgICB9KVxuICAgIGNvbnN0IHNraWxsID0gdGhpcy5nZXRTa2lsbHNCeU5hbWUobmFtZSlcbiAgICByZXR1cm4gc2tpbGxbMF1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIGEgY3JlYXR1cmUgd2l0aCBtaW5pbXVtcyBza2lsbHNcbiAgICovXG4gIGFzeW5jIGNyZWF0dXJlSW5pdCAoKSB7XG4gICAgaWYgKHRoaXMudHlwZSAhPT0gJ2NyZWF0dXJlJykgcmV0dXJuXG4gICAgaWYgKHRoaXMuZ2V0QWN0b3JGbGFnKCdpbml0aWFsaXplZCcpKSByZXR1cm4gLy8gQ2hhbmdlIHRvIHJldHVybiBza2lsbCA/XG5cbiAgICAvLyBDaGVjayBpZiBmaWdodGluZyBza2lsbHMgZXhpc3RzLCBpZiBub3QgY3JlYXRlIGl0IGFuZCB0aGUgYXNzb2NpYXRlZCBhdHRhY2suXG4gICAgY29uc3Qgc2tpbGxzID0gdGhpcy5nZXRTa2lsbHNCeU5hbWUoXG4gICAgICBnYW1lLmkxOG4ubG9jYWxpemUoQ09DNy5jcmVhdHVyZUZpZ2h0aW5nU2tpbGwpXG4gICAgKVxuICAgIGlmIChza2lsbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBDcmVhdGluZyBuYXR1cmFsIGF0dGFjayBza2lsbFxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcGFydHMgPSBDb0M3SXRlbS5nZXROYW1lUGFydHNTcGVjKFxuICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZShDT0M3LmNyZWF0dXJlRmlnaHRpbmdTa2lsbCksXG4gICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKENPQzcuZmlnaHRpbmdTcGVjaWFsaXphdGlvbk5hbWUpXG4gICAgICAgIClcbiAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICB0eXBlOiAnc2tpbGwnLFxuICAgICAgICAgIG5hbWU6IHBhcnRzLm5hbWUsXG4gICAgICAgICAgc3lzdGVtOiB7XG4gICAgICAgICAgICBiYXNlOiAwLFxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICBza2lsbE5hbWU6IHBhcnRzLnNraWxsTmFtZSxcbiAgICAgICAgICAgIHNwZWNpYWxpemF0aW9uOiBwYXJ0cy5zcGVjaWFsaXphdGlvbixcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgY29tYmF0OiB0cnVlLFxuICAgICAgICAgICAgICBmaWdodGluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgc3BlY2lhbDogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZsYWdzOiB7fVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBza2lsbCA9IGF3YWl0IHRoaXMuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBbZGF0YV0sIHtcbiAgICAgICAgICByZW5kZXJTaGVldDogZmFsc2VcbiAgICAgICAgfSlcblxuICAgICAgICBjb25zdCBhdHRhY2sgPSBhd2FpdCB0aGlzLmNyZWF0ZUVtYmVkZGVkRG9jdW1lbnRzKFxuICAgICAgICAgICdJdGVtJyxcbiAgICAgICAgICBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5hbWU6ICdJbm5hdGUgYXR0YWNrJyxcbiAgICAgICAgICAgICAgdHlwZTogJ3dlYXBvbicsXG4gICAgICAgICAgICAgIHN5c3RlbToge1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZTogXCJDcmVhdHVyZSdzIG5hdHVyYWwgYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgICBjaGF0OiBcIkNyZWF0dXJlJ3MgbmF0dXJhbCBhdHRhY2tcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgd3BuVHlwZTogJ2lubmF0ZScsXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgICAgYWRkYjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIHNsbnQ6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIHsgcmVuZGVyU2hlZXQ6IGZhbHNlIH1cbiAgICAgICAgKVxuICAgICAgICBpZiAoc2tpbGwubGVuZ3RoID4gMCAmJiBhdHRhY2subGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IGNyZWF0ZWRBdHRhY2sgPSB0aGlzLml0ZW1zLmdldChhdHRhY2tbMF0uaWQpXG4gICAgICAgICAgYXdhaXQgY3JlYXRlZEF0dGFjay51cGRhdGUoe1xuICAgICAgICAgICAgJ3N5c3RlbS5za2lsbC5tYWluLmlkJzogc2tpbGxbMF0uaWQsXG4gICAgICAgICAgICAnc3lzdGVtLnNraWxsLm1haW4ubmFtZSc6IHNraWxsWzBdLm5hbWVcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignQ3JlYXR1cmUgaW5pdDogJyArIGVyci5tZXNzYWdlKVxuICAgICAgfVxuICAgICAgLy8gY29uc29sZS5sb2coICdTa2lsbCBjcmVhdGVkJyk7XG4gICAgICBhd2FpdCB0aGlzLnNldEFjdG9yRmxhZygnaW5pdGlhbGl6ZWQnKVxuICAgICAgLy8gQ3JlYXRpbmcgY29ycmVzcG9uZGluZyB3ZWFwb24uXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgY3JlYXRlSXRlbSAoaXRlbU5hbWUsIHF1YW50aXR5ID0gMSwgc2hvd1NoZWV0ID0gZmFsc2UpIHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbmFtZTogaXRlbU5hbWUsXG4gICAgICB0eXBlOiAnaXRlbScsXG4gICAgICBzeXN0ZW06IHtcbiAgICAgICAgcXVhbnRpdHlcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgY3JlYXRlZCA9IGF3YWl0IHRoaXMuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBbZGF0YV0sIHtcbiAgICAgIHJlbmRlclNoZWV0OiBzaG93U2hlZXRcbiAgICB9KVxuICAgIHJldHVybiBjcmVhdGVkXG4gIH1cblxuICBhc3luYyBjcmVhdGVFbXB0eUJvb2sgKGV2ZW50ID0gbnVsbCkge1xuICAgIGNvbnN0IHNob3dTaGVldCA9IGV2ZW50ID8gIWV2ZW50LnNoaWZ0S2V5IDogdHJ1ZVxuICAgIGlmICghdGhpcy5nZXRJdGVtSWRCeU5hbWUoZ2FtZS5pMThuLmxvY2FsaXplKENPQzcubmV3Qm9va05hbWUpKSkge1xuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQm9vayhnYW1lLmkxOG4ubG9jYWxpemUoQ09DNy5uZXdCb29rTmFtZSksIHNob3dTaGVldClcbiAgICB9XG4gICAgbGV0IGluZGV4ID0gMFxuICAgIGxldCBpdGVtTmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZShDT0M3Lm5ld0Jvb2tOYW1lKSArICcgJyArIGluZGV4XG4gICAgd2hpbGUgKHRoaXMuZ2V0SXRlbUlkQnlOYW1lKGl0ZW1OYW1lKSkge1xuICAgICAgaW5kZXgrK1xuICAgICAgaXRlbU5hbWUgPSBnYW1lLmkxOG4ubG9jYWxpemUoQ09DNy5uZXdCb29rTmFtZSkgKyAnICcgKyBpbmRleFxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jcmVhdGVCb29rKGl0ZW1OYW1lLCBzaG93U2hlZXQpXG4gIH1cblxuICBhc3luYyBjcmVhdGVCb29rIChpdGVtTmFtZSwgc2hvd1NoZWV0ID0gZmFsc2UpIHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbmFtZTogaXRlbU5hbWUsXG4gICAgICB0eXBlOiAnYm9vaycsXG4gICAgICBzeXN0ZW06IHt9XG4gICAgfVxuICAgIGNvbnN0IGNyZWF0ZWQgPSBhd2FpdCB0aGlzLmNyZWF0ZUVtYmVkZGVkRG9jdW1lbnRzKCdJdGVtJywgW2RhdGFdLCB7XG4gICAgICByZW5kZXJTaGVldDogc2hvd1NoZWV0XG4gICAgfSlcbiAgICByZXR1cm4gY3JlYXRlZFxuICB9XG5cbiAgYXN5bmMgY3JlYXRlRW1wdHlTcGVsbCAoZXZlbnQgPSBudWxsKSB7XG4gICAgY29uc3Qgc2hvd1NoZWV0ID0gZXZlbnQgPyAhZXZlbnQuc2hpZnRLZXkgOiB0cnVlXG4gICAgaWYgKCF0aGlzLmdldEl0ZW1JZEJ5TmFtZShnYW1lLmkxOG4ubG9jYWxpemUoQ09DNy5uZXdTcGVsbE5hbWUpKSkge1xuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlU3BlbGwoZ2FtZS5pMThuLmxvY2FsaXplKENPQzcubmV3U3BlbGxOYW1lKSwgc2hvd1NoZWV0KVxuICAgIH1cbiAgICBsZXQgaW5kZXggPSAwXG4gICAgbGV0IGl0ZW1OYW1lID0gZ2FtZS5pMThuLmxvY2FsaXplKENPQzcubmV3U3BlbGxOYW1lKSArICcgJyArIGluZGV4XG4gICAgd2hpbGUgKHRoaXMuZ2V0SXRlbUlkQnlOYW1lKGl0ZW1OYW1lKSkge1xuICAgICAgaW5kZXgrK1xuICAgICAgaXRlbU5hbWUgPSBnYW1lLmkxOG4ubG9jYWxpemUoQ09DNy5uZXdTcGVsbE5hbWUpICsgJyAnICsgaW5kZXhcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlU3BlbGwoaXRlbU5hbWUsIHNob3dTaGVldClcbiAgfVxuXG4gIHN0YXRpYyBlbXB0eVNwZWxsIChpdGVtTmFtZSkge1xuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICBuYW1lOiBpdGVtTmFtZSxcbiAgICAgIHR5cGU6ICdzcGVsbCcsXG4gICAgICBzeXN0ZW06IHt9XG4gICAgfVxuICAgIHJldHVybiBkYXRhXG4gIH1cblxuICBhc3luYyBjcmVhdGVTcGVsbCAoaXRlbU5hbWUsIHNob3dTaGVldCA9IGZhbHNlKSB7XG4gICAgY29uc3QgZGF0YSA9IENvQ0FjdG9yLmVtcHR5U3BlbGwoaXRlbU5hbWUpXG4gICAgY29uc3QgY3JlYXRlZCA9IGF3YWl0IHRoaXMuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBbZGF0YV0sIHtcbiAgICAgIHJlbmRlclNoZWV0OiBzaG93U2hlZXRcbiAgICB9KVxuICAgIHJldHVybiBjcmVhdGVkXG4gIH1cblxuICBhc3luYyBjcmVhdGVFbXB0eVNraWxsIChldmVudCA9IG51bGwpIHtcbiAgICBjb25zdCBzaG93U2hlZXQgPSBldmVudCA/ICFldmVudC5zaGlmdEtleSA6IHRydWVcbiAgICBpZiAoIXRoaXMuZ2V0SXRlbUlkQnlOYW1lKGdhbWUuaTE4bi5sb2NhbGl6ZShDT0M3Lm5ld1NraWxsTmFtZSkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVTa2lsbChcbiAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKENPQzcubmV3U2tpbGxOYW1lKSxcbiAgICAgICAgKHRoaXMudHlwZSAhPT0gJ2NoYXJhY3RlcicgPyAxIDogbnVsbCksXG4gICAgICAgIHNob3dTaGVldFxuICAgICAgKVxuICAgIH1cbiAgICBsZXQgaW5kZXggPSAwXG4gICAgbGV0IHNraWxsTmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZShDT0M3Lm5ld1NraWxsTmFtZSkgKyAnICcgKyBpbmRleFxuICAgIHdoaWxlICh0aGlzLmdldEl0ZW1JZEJ5TmFtZShza2lsbE5hbWUpKSB7XG4gICAgICBpbmRleCsrXG4gICAgICBza2lsbE5hbWUgPSBnYW1lLmkxOG4ubG9jYWxpemUoQ09DNy5uZXdTa2lsbE5hbWUpICsgJyAnICsgaW5kZXhcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jcmVhdGVTa2lsbChza2lsbE5hbWUsIG51bGwsIHNob3dTaGVldClcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZUVtcHR5SXRlbSAoZXZlbnQgPSBudWxsKSB7XG4gICAgY29uc3Qgc2hvd1NoZWV0ID0gZXZlbnQgPyAhZXZlbnQuc2hpZnRLZXkgOiB0cnVlXG4gICAgaWYgKCF0aGlzLmdldEl0ZW1JZEJ5TmFtZShnYW1lLmkxOG4ubG9jYWxpemUoQ09DNy5uZXdJdGVtTmFtZSkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVJdGVtKGdhbWUuaTE4bi5sb2NhbGl6ZShDT0M3Lm5ld0l0ZW1OYW1lKSwgMSwgc2hvd1NoZWV0KVxuICAgIH1cbiAgICBsZXQgaW5kZXggPSAwXG4gICAgbGV0IGl0ZW1OYW1lID0gZ2FtZS5pMThuLmxvY2FsaXplKENPQzcubmV3SXRlbU5hbWUpICsgJyAnICsgaW5kZXhcbiAgICB3aGlsZSAodGhpcy5nZXRJdGVtSWRCeU5hbWUoaXRlbU5hbWUpKSB7XG4gICAgICBpbmRleCsrXG4gICAgICBpdGVtTmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZShDT0M3Lm5ld0l0ZW1OYW1lKSArICcgJyArIGluZGV4XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNyZWF0ZUl0ZW0oaXRlbU5hbWUsIDEsIHNob3dTaGVldClcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZUVtcHR5V2VhcG9uIChldmVudCA9IG51bGwsIHByb3BlcnRpZXMgPSB7fSkge1xuICAgIGNvbnN0IHNob3dTaGVldCA9IGV2ZW50ID8gIWV2ZW50LnNoaWZ0S2V5IDogdHJ1ZVxuICAgIGxldCB3ZWFwb25OYW1lID0gZ2FtZS5pMThuLmxvY2FsaXplKENPQzcubmV3V2VhcG9uTmFtZSlcbiAgICBpZiAodGhpcy5nZXRJdGVtSWRCeU5hbWUoZ2FtZS5pMThuLmxvY2FsaXplKENPQzcubmV3V2VhcG9uTmFtZSkpKSB7XG4gICAgICBsZXQgaW5kZXggPSAwXG4gICAgICB3ZWFwb25OYW1lID0gZ2FtZS5pMThuLmxvY2FsaXplKENPQzcubmV3V2VhcG9uTmFtZSkgKyAnICcgKyBpbmRleFxuICAgICAgd2hpbGUgKHRoaXMuZ2V0SXRlbUlkQnlOYW1lKHdlYXBvbk5hbWUpKSB7XG4gICAgICAgIGluZGV4KytcbiAgICAgICAgd2VhcG9uTmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZShDT0M3Lm5ld1dlYXBvbk5hbWUpICsgJyAnICsgaW5kZXhcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbmFtZTogd2VhcG9uTmFtZSxcbiAgICAgIHR5cGU6ICd3ZWFwb24nLFxuICAgICAgc3lzdGVtOiB7XG4gICAgICAgIHByb3BlcnRpZXM6IHt9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBba2V5XSBvZiBPYmplY3QuZW50cmllcyhDT0M3LndlYXBvblByb3BlcnRpZXMpKSB7XG4gICAgICBkYXRhLnN5c3RlbS5wcm9wZXJ0aWVzW2tleV0gPVxuICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvcGVydGllcywga2V5KSA/PyBmYWxzZVxuICAgIH1cblxuICAgIGF3YWl0IHRoaXMuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBbZGF0YV0sIHtcbiAgICAgIHJlbmRlclNoZWV0OiBzaG93U2hlZXRcbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgY3JlYXRlQmlvU2VjdGlvbiAodGl0bGUgPSBudWxsKSB7XG4gICAgY29uc3QgYmlvID0gdGhpcy5zeXN0ZW0uYmlvZ3JhcGh5XG4gICAgICA/IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLmJpb2dyYXBoeSlcbiAgICAgIDogW11cbiAgICBiaW8ucHVzaCh7XG4gICAgICB0aXRsZSxcbiAgICAgIHZhbHVlOiBudWxsXG4gICAgfSlcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uYmlvZ3JhcGh5JzogYmlvIH0sIHsgcmVuZGVyU2hlZXQ6IGZhbHNlIH0pXG4gIH1cblxuICBhc3luYyB1cGRhdGVCaW9WYWx1ZSAoaW5kZXgsIGNvbnRlbnQpIHtcbiAgICBjb25zdCBiaW8gPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5iaW9ncmFwaHkpXG4gICAgYmlvW2luZGV4XS52YWx1ZSA9IGNvbnRlbnRcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uYmlvZ3JhcGh5JzogYmlvIH0sIHsgcmVuZGVyOiBmYWxzZSB9KVxuICB9XG5cbiAgYXN5bmMgdXBkYXRlQmlvVGl0bGUgKGluZGV4LCB0aXRsZSkge1xuICAgIGNvbnN0IGJpbyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLmJpb2dyYXBoeSlcbiAgICBiaW9baW5kZXhdLnRpdGxlID0gdGl0bGVcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uYmlvZ3JhcGh5JzogYmlvIH0pXG4gIH1cblxuICBhc3luYyBkZWxldGVCaW9TZWN0aW9uIChpbmRleCkge1xuICAgIGNvbnN0IGJpbyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLmJpb2dyYXBoeSlcbiAgICBiaW8uc3BsaWNlKGluZGV4LCAxKVxuICAgIGF3YWl0IHRoaXMudXBkYXRlKHsgJ3N5c3RlbS5iaW9ncmFwaHknOiBiaW8gfSlcbiAgfVxuXG4gIGFzeW5jIG1vdmVCaW9TZWN0aW9uVXAgKGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID09PSAwKSByZXR1cm5cbiAgICBjb25zdCBiaW8gPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5iaW9ncmFwaHkpXG4gICAgaWYgKGluZGV4ID49IGJpby5sZW5ndGgpIHJldHVyblxuICAgIGNvbnN0IGVsZW0gPSBiaW8uc3BsaWNlKGluZGV4LCAxKVswXVxuICAgIGJpby5zcGxpY2UoaW5kZXggLSAxLCAwLCBlbGVtKVxuICAgIGF3YWl0IHRoaXMudXBkYXRlKHsgJ3N5c3RlbS5iaW9ncmFwaHknOiBiaW8gfSlcbiAgfVxuXG4gIGFzeW5jIG1vdmVCaW9TZWN0aW9uRG93biAoaW5kZXgpIHtcbiAgICBjb25zdCBiaW8gPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5iaW9ncmFwaHkpXG4gICAgaWYgKGluZGV4ID49IGJpby5sZW5ndGggLSAxKSByZXR1cm5cbiAgICBjb25zdCBlbGVtID0gYmlvLnNwbGljZShpbmRleCwgMSlbMF1cbiAgICBiaW8uc3BsaWNlKGluZGV4ICsgMSwgMCwgZWxlbSlcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uYmlvZ3JhcGh5JzogYmlvIH0pXG4gIH1cblxuICBhc3luYyB1cGRhdGVUZXh0QXJlYSAodGV4dEFyZWEpIHtcbiAgICBjb25zdCBuYW1lID0gJ3N5c3RlbS4nICsgdGV4dEFyZWEuZGF0YXNldC5hcmVhTmFtZVxuICAgIGF3YWl0IHRoaXMudXBkYXRlKHsgW25hbWVdOiB0ZXh0QXJlYS52YWx1ZSB9KVxuICB9XG5cbiAgLy8gYXN5bmMgX3VwZGF0ZUVtYmVkZGVkRG9jdW1lbnRzIChkb2N1bWVudENsYXNzLCBwYXJlbnQsIHsgdXBkYXRlcywgb3B0aW9ucywgcGFjayB9LCB1c2VyKSB7XG4gIC8vICAgY29uc3QgcG91ZXQgPSAndG90bydcbiAgLy8gfVxuXG4gIC8vIGFzeW5jIHByZVVwZGF0ZUFjdGl2ZUVmZmVjdCAoYSxiLGMsZCkge1xuICAvLyAgIGNvbnN0IHBvdWV0ID0gJ3RvdG8nXG4gIC8vIH1cblxuICAvLyBhc3luYyB1cGRhdGVBY3RpdmVFZmZlY3QgKGEsYixjLGQpIHtcbiAgLy8gICBjb25zdCBwb3VldCA9ICd0b3RvJ1xuICAvLyB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpdGVtIGZvciB0aGF0IGFjdG9yLlxuICAgKiBJZiBpdCdzIGEgc2tpbGwgZmlyc3QgY2hlY2sgaWYgdGhlIHNraWxsIGlzIGFscmVhZHkgb3duZWQuIElmIGl0IGlzIGRvbid0IGNyZWF0ZSBhIHNlY29uZCB0aW1lLlxuICAgKiBGaWxsIHRoZSB2YWx1ZSBvZiB0aGUgc2tpbGwgd2l0aCBiYXNlIG9yIHRyeSB0byBldmFsdWF0ZSB0aGUgZm9ybXVsYS5cbiAgICogQHBhcmFtIHsqfSBlbWJlZGRlZE5hbWVcbiAgICogQHBhcmFtIHsqfSBkYXRhXG4gICAqIEBwYXJhbSB7Kn0gb3B0aW9uc1xuICAgKi9cbiAgYXN5bmMgY3JlYXRlRW1iZWRkZWREb2N1bWVudHMgKGVtYmVkZGVkTmFtZSwgZGF0YUFycmF5LCBvcHRpb25zKSB7XG4gICAgY29uc3QgcHJvY2Vzc2VkRGF0YUFycmF5ID0gW11cbiAgICBsZXQgYmFzZVZhbHVlID0gMFxuICAgIGxldCBiYXNlQ2FsY3VsYXRlZCA9IDBcbiAgICBsZXQgYXJjaGV0eXBlID0gZmFsc2VcbiAgICBsZXQgb2NjdXBhdGlvbiA9IGZhbHNlXG4gICAgZm9yIChsZXQgZGF0YSBvZiBkYXRhQXJyYXkpIHtcbiAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgICAgIGNhc2UgJ3NraWxsJzoge1xuICAgICAgICAgIGJhc2VWYWx1ZSA9IGRhdGEuc3lzdGVtLmJhc2VcbiAgICAgICAgICBiYXNlQ2FsY3VsYXRlZCA9IGF3YWl0IENvQzdJdGVtLmNhbGN1bGF0ZUJhc2UodGhpcywgZGF0YSlcbiAgICAgICAgICBpZiAodGhpcy50eXBlICE9PSAnY2hhcmFjdGVyJykge1xuICAgICAgICAgICAgLy8gSWYgbm90IGEgUEMgc2V0IHNraWxsIHZhbHVlIHRvIGJhc2VcbiAgICAgICAgICAgIGlmICh0aGlzLmdldEl0ZW1JZEJ5TmFtZShkYXRhLm5hbWUpKSByZXR1cm4gLy8gSWYgc2tpbGwgd2l0aCB0aGlzIG5hbWUgZXhpc3QgcmV0dXJuXG5cbiAgICAgICAgICAgIGlmIChiYXNlVmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKFN0cmluZyhiYXNlVmFsdWUpICE9PSBTdHJpbmcoZGF0YS5zeXN0ZW0udmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0udmFsdWUgPSBiYXNlQ2FsY3VsYXRlZFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpc05hTihOdW1iZXIoZGF0YS5zeXN0ZW0udmFsdWUpKSkge1xuICAgICAgICAgICAgICBsZXQgdmFsdWVcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IChcbiAgICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBSb2xsKFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJzZUNoYXJhY3RlcmlzdGljcygpXG4gICAgICAgICAgICAgICAgICApLmV2YWx1YXRlKHsgYXN5bmM6IHRydWUgfSlcbiAgICAgICAgICAgICAgICApLnRvdGFsXG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbnVsbFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICh2YWx1ZSkgZGF0YS5zeXN0ZW0udmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRhLnN5c3RlbS52YWx1ZSA9IG51bGxcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsZXQgYWRkVGhpcyA9IHRydWVcblxuICAgICAgICAgIGlmIChDb0M3SXRlbS5pc0FueVNwZWMoZGF0YSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzQW55QnV0Tm90RmxhZ2dlZCA9ICghKGRhdGEuc3lzdGVtLnByb3BlcnRpZXM/LnJlcXVpcmVzbmFtZSkgPz8gZmFsc2UpICYmICEoZGF0YS5zeXN0ZW0ucHJvcGVydGllcz8ucGlja25hbWVvbmx5ID8/IGZhbHNlKVxuICAgICAgICAgICAgbGV0IHNraWxsTGlzdCA9IFtdXG4gICAgICAgICAgICBjb25zdCBncm91cCA9IGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5ndWVzc0dyb3VwRnJvbURvY3VtZW50KGRhdGEpXG4gICAgICAgICAgICBpZiAoZ3JvdXApIHtcbiAgICAgICAgICAgICAgc2tpbGxMaXN0ID0gKGF3YWl0IGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5mcm9tQ29DSURSZWdleEJlc3QoeyBjb2NpZFJlZ0V4cDogbmV3IFJlZ0V4cCgnXicgKyBDb0M3VXRpbGl0aWVzLnF1b3RlUmVnRXhwKGdyb3VwKSArICcuKyQnKSwgdHlwZTogJ2knIH0pKS5maWx0ZXIoaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChpdGVtLnN5c3RlbS5wcm9wZXJ0aWVzPy5zcGVjaWFsID8/IGZhbHNlKSAmJiAhKGl0ZW0uc3lzdGVtLnByb3BlcnRpZXM/LnJlcXVpcmVzbmFtZSA/PyBmYWxzZSkgJiYgIShpdGVtLnN5c3RlbS5wcm9wZXJ0aWVzPy5waWNrbmFtZW9ubHkgPz8gZmFsc2UpXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YS5zeXN0ZW0/LmZsYWdzPy5vY2N1cGF0aW9uIHx8IGRhdGEuc3lzdGVtPy5mbGFncz8uYXJjaGV0eXBlKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nU2tpbGxzID0gdGhpcy5za2lsbHMuZmlsdGVyKGVsID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWVsLnN5c3RlbS5zcGVjaWFsaXphdGlvbikgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0/LmZsYWdzPy5vY2N1cGF0aW9uICYmXG4gICAgICAgICAgICAgICAgICBlbC5zeXN0ZW0uZmxhZ3M/Lm9jY3VwYXRpb25cbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbT8uZmxhZ3M/LmFyY2hldHlwZSAmJlxuICAgICAgICAgICAgICAgICAgZWwuc3lzdGVtLmZsYWdzPy5hcmNoZXR5cGVcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0uc3BlY2lhbGl6YXRpb24udG9Mb2NhbGVMb3dlckNhc2UoKSA9PT1cbiAgICAgICAgICAgICAgICAgIGVsLnN5c3RlbS5zcGVjaWFsaXphdGlvbi50b0xvY2FsZUxvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdTa2lsbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGlmIChza2lsbExpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGV4aXN0aW5nU2tpbGxzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvdW5kID0gc2tpbGxMaXN0LmZpbmRJbmRleChpdGVtID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5uYW1lID09PSBleGlzdGluZ1NraWxsc1tpXS5uYW1lIHx8IGl0ZW0uZmxhZ3M/LkNvQzc/LmNvY2lkRmxhZz8uaWQgPT09IGV4aXN0aW5nU2tpbGxzW2ldLmZsYWdzPy5Db0M3Py5jb2NpZEZsYWc/LmlkXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc2tpbGxMaXN0LnNwbGljZShmb3VuZCwgMSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgc2tpbGxMaXN0ID0gc2tpbGxMaXN0LmNvbmNhdChleGlzdGluZ1NraWxscylcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgc2tpbGxMaXN0ID0gZXhpc3RpbmdTa2lsbHNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChza2lsbExpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBza2lsbExpc3Quc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBza2lsbERhdGEgPSBhd2FpdCBTa2lsbFNwZWNpYWxpemF0aW9uU2VsZWN0RGlhbG9nLmNyZWF0ZSh7XG4gICAgICAgICAgICAgIHNraWxsczogc2tpbGxMaXN0LFxuICAgICAgICAgICAgICBhbGxvd0N1c3RvbTogKGlzQW55QnV0Tm90RmxhZ2dlZCB8fCAoZGF0YS5zeXN0ZW0ucHJvcGVydGllcz8ucmVxdWlyZXNuYW1lID8/IGZhbHNlKSksXG4gICAgICAgICAgICAgIGZpeGVkQmFzZVZhbHVlOiAoZGF0YS5zeXN0ZW0ucHJvcGVydGllcz8ua2VlcGJhc2V2YWx1ZSA/PyBmYWxzZSksXG4gICAgICAgICAgICAgIHNwZWNpYWxpemF0aW9uTmFtZTogZGF0YS5zeXN0ZW0uc3BlY2lhbGl6YXRpb24sXG4gICAgICAgICAgICAgIGxhYmVsOiBkYXRhLm5hbWUsXG4gICAgICAgICAgICAgIGJhc2VWYWx1ZTogZGF0YS5zeXN0ZW0uYmFzZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc2tpbGxEYXRhLCAnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgICBpZiAoc2tpbGxEYXRhLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdJdGVtID0gdGhpcy5pdGVtcy5nZXQoXG4gICAgICAgICAgICAgICAgICBza2lsbERhdGEuc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nSXRlbSkge1xuICAgICAgICAgICAgICAgICAgY29uc3QgY2hhbmdlcyA9IHt9XG4gICAgICAgICAgICAgICAgICBpZiAoIShkYXRhLnN5c3RlbS5wcm9wZXJ0aWVzPy5rZWVwYmFzZXZhbHVlID8/IGZhbHNlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2tpbGxEYXRhLmJhc2VWYWx1ZSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICBiYXNlQ2FsY3VsYXRlZCA9IHNraWxsRGF0YS5iYXNlVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzWydzeXN0ZW0udmFsdWUnXSA9IGJhc2VDYWxjdWxhdGVkXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGEuc3lzdGVtLmZsYWdzKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzW2BzeXN0ZW0uZmxhZ3MuJHtrZXl9YF0gPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhjaGFuZ2VzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZXMuX2lkID0gZXhpc3RpbmdJdGVtLmlkXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBbY2hhbmdlc10pXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBkYXRhLm5hbWUgPSBDb0M3SXRlbS5nZXROYW1lV2l0aG91dFNwZWMoZXhpc3RpbmdJdGVtKVxuICAgICAgICAgICAgICAgICAgYWRkVGhpcyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gc2tpbGxMaXN0LmZpbmQoaSA9PiBpLmlkID09PSBza2lsbERhdGEuc2VsZWN0ZWQpXG4gICAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmxhZ3MgPSBkYXRhLnN5c3RlbT8uZmxhZ3NcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2VlcEJhc2UgPSAoZGF0YS5zeXN0ZW0ucHJvcGVydGllcz8ua2VlcGJhc2V2YWx1ZSA/PyBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKGV4aXN0aW5nKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhmbGFncykpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmZsYWdzW2tleV0gPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZWVwQmFzZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChza2lsbERhdGEuYmFzZVZhbHVlICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0uYmFzZSA9IHNraWxsRGF0YS5iYXNlVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgYmFzZVZhbHVlID0gc2tpbGxEYXRhLmJhc2VWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgIGJhc2VDYWxjdWxhdGVkID0gYXdhaXQgQ29DN0l0ZW0uY2FsY3VsYXRlQmFzZSh0aGlzLCBkYXRhKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gQ29DN0l0ZW0uZ2V0TmFtZVBhcnRzU3BlYyhcbiAgICAgICAgICAgICAgICAgIHNraWxsRGF0YS5uYW1lLFxuICAgICAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0uc3BlY2lhbGl6YXRpb25cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgaWYgKCEoZGF0YS5zeXN0ZW0ucHJvcGVydGllcz8ua2VlcGJhc2V2YWx1ZSA/PyBmYWxzZSkpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChza2lsbERhdGEuYmFzZVZhbHVlICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5iYXNlID0gc2tpbGxEYXRhLmJhc2VWYWx1ZVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYmFzZVZhbHVlID0gc2tpbGxEYXRhLmJhc2VWYWx1ZVxuICAgICAgICAgICAgICAgICAgYmFzZUNhbGN1bGF0ZWQgPSBhd2FpdCBDb0M3SXRlbS5jYWxjdWxhdGVCYXNlKHRoaXMsIGRhdGEpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRhdGEuc3lzdGVtLnNraWxsTmFtZSA9IHBhcnRzLnNraWxsTmFtZVxuICAgICAgICAgICAgICAgIGRhdGEubmFtZSA9IHBhcnRzLm5hbWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhZGRUaGlzKSB7XG4gICAgICAgICAgICBpZiAoU3RyaW5nKGJhc2VWYWx1ZSkgIT09IFN0cmluZyhiYXNlQ2FsY3VsYXRlZCkpIHtcbiAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0uYmFzZSA9IGJhc2VDYWxjdWxhdGVkXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHByb2Nlc3NlZERhdGFBcnJheS5wdXNoKGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKGRhdGEpKVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAnd2VhcG9uJzoge1xuICAgICAgICAgIGlmICh0aGlzLnR5cGUgIT09ICdjb250YWluZXInKSB7XG4gICAgICAgICAgICBjb25zdCBtYWluU2tpbGwgPSBkYXRhLnN5c3RlbT8uc2tpbGw/Lm1haW4/Lm5hbWVcbiAgICAgICAgICAgIGlmIChtYWluU2tpbGwpIHtcbiAgICAgICAgICAgICAgbGV0IHNraWxsID0gdGhpcy5nZXRTa2lsbHNCeU5hbWUobWFpblNraWxsKVswXVxuICAgICAgICAgICAgICBpZiAoIXNraWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IG1haW5Ta2lsbC5tYXRjaCgvXFwoKFteKV0rKVxcKS8pXG4gICAgICAgICAgICAgICAgICA/IG1haW5Ta2lsbC5tYXRjaCgvXFwoKFteKV0rKVxcKS8pWzFdXG4gICAgICAgICAgICAgICAgICA6IG1haW5Ta2lsbFxuICAgICAgICAgICAgICAgIC8vIHRyeSB0byB1c2UgYW4gYWxyZWFkeSBkZWZpbmVkIHNraWxsXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogc2VhcmNoIG9uIHRoZSBjb21wZW5kaXVtc1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gZ2FtZS5pdGVtcy5maW5kKFxuICAgICAgICAgICAgICAgICAgaXRlbSA9PiBpdGVtLnR5cGUgPT09ICdza2lsbCcgJiZcbiAgICAgICAgICAgICAgICAgICAgKGl0ZW0ubmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCkgfHwgaXRlbS5zeXN0ZW0uc2tpbGxOYW1lPy50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCkpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkZEl0ZW1zKFtleGlzdGluZ10pXG4gICAgICAgICAgICAgICAgICBza2lsbCA9IGF3YWl0IHRoaXMuZ2V0U2tpbGxzQnlOYW1lKG1haW5Ta2lsbClbMF1cbiAgICAgICAgICAgICAgICAgIC8vIHNraWxsID0gZXhpc3RpbmcudG9PYmplY3QoKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBza2lsbCA9IGF3YWl0IHRoaXMuY3JlYXRlV2VhcG9uU2tpbGwoXG4gICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICEhZGF0YS5zeXN0ZW0ucHJvcGVydGllcz8ucm5nZFxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoc2tpbGwpIGRhdGEuc3lzdGVtLnNraWxsLm1haW4uaWQgPSBza2lsbC5pZFxuICAgICAgICAgICAgfSAvLyBUT0RPIDogRWxzZSA6IHNlbGVjdGlvbm5lciBsZSBza2lsbCBkYW5zIGxhIGxpc3RlIG91IGVuIGNyw6llciB1biBub3V2ZWF1LlxuXG4gICAgICAgICAgICBjb25zdCBzZWNvbmRTa2lsbCA9IGRhdGEuc3lzdGVtPy5za2lsbD8uYWx0ZXJuYXRpdj8ubmFtZVxuICAgICAgICAgICAgaWYgKHNlY29uZFNraWxsKSB7XG4gICAgICAgICAgICAgIGxldCBza2lsbCA9IHRoaXMuZ2V0U2tpbGxzQnlOYW1lKHNlY29uZFNraWxsKVswXVxuICAgICAgICAgICAgICBpZiAoIXNraWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IHNlY29uZFNraWxsLm1hdGNoKC9cXCgoW14pXSspXFwpLylcbiAgICAgICAgICAgICAgICAgID8gc2Vjb25kU2tpbGwubWF0Y2goL1xcKChbXildKylcXCkvKVsxXVxuICAgICAgICAgICAgICAgICAgOiBzZWNvbmRTa2lsbFxuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gZ2FtZS5pdGVtcy5maW5kKFxuICAgICAgICAgICAgICAgICAgaXRlbSA9PiBpdGVtLnR5cGUgPT09ICdza2lsbCcgJiZcbiAgICAgICAgICAgICAgICAgICAgKGl0ZW0ubmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCkgfHwgaXRlbS5zeXN0ZW0uc2tpbGxOYW1lPy50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCkpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFkZEl0ZW1zKFtleGlzdGluZ10pXG4gICAgICAgICAgICAgICAgICBza2lsbCA9IGF3YWl0IHRoaXMuZ2V0U2tpbGxzQnlOYW1lKHNlY29uZFNraWxsKVswXVxuICAgICAgICAgICAgICAgICAgLy8gc2tpbGwgPSBleGlzdGluZy50b09iamVjdCgpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHNraWxsID0gYXdhaXQgdGhpcy5jcmVhdGVXZWFwb25Ta2lsbChcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgISFkYXRhLnN5c3RlbS5wcm9wZXJ0aWVzPy5ybmdkXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChza2lsbCkgZGF0YS5zeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5pZCA9IHNraWxsLmlkXG4gICAgICAgICAgICB9IC8vIFRPRE8gOiBFbHNlIDogc2VsZWN0aW9ubmVyIGxlIHNraWxsIGRhbnMgbGEgbGlzdGUgb3UgZW4gY3LDqWVyIHVuIG5vdXZlYXUuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcHJvY2Vzc2VkRGF0YUFycmF5LnB1c2goZm91bmRyeS51dGlscy5kdXBsaWNhdGUoZGF0YSkpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgJ3NldHVwJzoge1xuICAgICAgICAgIGlmIChkYXRhLnN5c3RlbS5lbmFibGVDaGFyYWN0ZXJpc2l0aWNzKSB7XG4gICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MubGlzdCA9IHt9XG4gICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MubGlzdC5zdHIgPSB0aGlzLmdldENoYXJhY3RlcmlzdGljKCdzdHInKVxuICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmxpc3QuY29uID0gdGhpcy5nZXRDaGFyYWN0ZXJpc3RpYygnY29uJylcbiAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5saXN0LnNpeiA9IHRoaXMuZ2V0Q2hhcmFjdGVyaXN0aWMoJ3NpeicpXG4gICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MubGlzdC5kZXggPSB0aGlzLmdldENoYXJhY3RlcmlzdGljKCdkZXgnKVxuICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmxpc3QuYXBwID0gdGhpcy5nZXRDaGFyYWN0ZXJpc3RpYygnYXBwJylcbiAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5saXN0LmludCA9IHRoaXMuZ2V0Q2hhcmFjdGVyaXN0aWMoJ2ludCcpXG4gICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MubGlzdC5wb3cgPSB0aGlzLmdldENoYXJhY3RlcmlzdGljKCdwb3cnKVxuICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmxpc3QuZWR1ID0gdGhpcy5nZXRDaGFyYWN0ZXJpc3RpYygnZWR1JylcblxuICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmxpc3QubHVjayA9IHt9XG4gICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MubGlzdC5sdWNrLnZhbHVlID0gaXNOYU4odGhpcy5sdWNrKVxuICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgOiB0aGlzLmx1Y2tcbiAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5saXN0Lmx1Y2subGFiZWwgPSBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAgICdDb0M3Lkx1Y2snXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MubGlzdC5sdWNrLnNob3J0TmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgICAgICAgICAgJ0NvQzcuTHVjaydcbiAgICAgICAgICAgIClcblxuICAgICAgICAgICAgaWYgKCFkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MudmFsdWVzKSB7XG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMgPSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnZhbHVlcy5zdHIgPVxuICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MubGlzdC5zdHIudmFsdWVcbiAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMuY29uID1cbiAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmxpc3QuY29uLnZhbHVlXG4gICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MudmFsdWVzLnNpeiA9XG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5saXN0LnNpei52YWx1ZVxuICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnZhbHVlcy5kZXggPVxuICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MubGlzdC5kZXgudmFsdWVcbiAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMuYXBwID1cbiAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmxpc3QuYXBwLnZhbHVlXG4gICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MudmFsdWVzLmludCA9XG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5saXN0LmludC52YWx1ZVxuICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnZhbHVlcy5wb3cgPVxuICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MubGlzdC5wb3cudmFsdWVcbiAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMuZWR1ID1cbiAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmxpc3QuZWR1LnZhbHVlXG4gICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MudmFsdWVzLmx1Y2sgPVxuICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MubGlzdC5sdWNrLnZhbHVlXG4gICAgICAgICAgICBpZiAoZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnBvaW50cy5lbmFibGVkKSB7XG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLnRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlNwZW5kUG9pbnRzJylcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLnRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlJvbGxDaGFyYWMnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YS5zeXN0ZW0ucG9pbnRzV2FybmluZyA9ICEoXG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMuc3RyICE9PSBudWxsICYmXG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMuY29uICE9PSBudWxsICYmXG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMuc2l6ICE9PSBudWxsICYmXG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMuZGV4ICE9PSBudWxsICYmXG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMuYXBwICE9PSBudWxsICYmXG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMuaW50ICE9PSBudWxsICYmXG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMucG93ICE9PSBudWxsICYmXG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMuZWR1ICE9PSBudWxsXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBjb25zdCByb2xsZWQgPSBhd2FpdCBDaGFyYWNSb2xsRGlhbG9nLmNyZWF0ZShkYXRhLnN5c3RlbSlcbiAgICAgICAgICAgIGlmIChyb2xsZWQpIHtcbiAgICAgICAgICAgICAgY29uc3QgdXBkYXRlRGF0YSA9IHt9XG4gICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIFtcbiAgICAgICAgICAgICAgICAnc3RyJyxcbiAgICAgICAgICAgICAgICAnY29uJyxcbiAgICAgICAgICAgICAgICAnc2l6JyxcbiAgICAgICAgICAgICAgICAnZGV4JyxcbiAgICAgICAgICAgICAgICAnYXBwJyxcbiAgICAgICAgICAgICAgICAnaW50JyxcbiAgICAgICAgICAgICAgICAncG93JyxcbiAgICAgICAgICAgICAgICAnZWR1J1xuICAgICAgICAgICAgICBdKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXNba2V5XSkge1xuICAgICAgICAgICAgICAgICAgdXBkYXRlRGF0YVtgc3lzdGVtLmNoYXJhY3RlcmlzdGljcy4ke2tleX0udmFsdWVgXSA9XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXNba2V5XVxuICAgICAgICAgICAgICAgICAgdXBkYXRlRGF0YVtgc3lzdGVtLmNoYXJhY3RlcmlzdGljcy4ke2tleX0uZm9ybXVsYWBdID1cbiAgICAgICAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnJvbGxzW2tleV1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMubHVjaykge1xuICAgICAgICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5hdHRyaWJzLmxjay52YWx1ZSddID1cbiAgICAgICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMubHVja1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MudmFsdWVzLnBvdykge1xuICAgICAgICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5hdHRyaWJzLnNhbi52YWx1ZSddID1cbiAgICAgICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy52YWx1ZXMucG93XG4gICAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmF0dHJpYnMuc2FuLmRhaWx5TGltaXQnXSA9IE1hdGguZmxvb3IoXG4gICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MudmFsdWVzLnBvdyAvIDVcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmF0dHJpYnMubXAubWF4J10gPSBNYXRoLmZsb29yKFxuICAgICAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnZhbHVlcy5wb3cgLyA1XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlKHVwZGF0ZURhdGEsIHsgcmVuZGVyU2hlZXQ6IGZhbHNlIH0pXG4gICAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlKHtcbiAgICAgICAgICAgICAgICAnc3lzdGVtLmF0dHJpYnMuaHAudmFsdWUnOiB0aGlzLnJhd0hwTWF4LFxuICAgICAgICAgICAgICAgICdzeXN0ZW0uYXR0cmlicy5ocC5tYXgnOiB0aGlzLnJhd0hwTWF4XG4gICAgICAgICAgICAgIH0sIHsgcmVuZGVyU2hlZXQ6IGZhbHNlIH0pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZXJhID0gT2JqZWN0LmVudHJpZXMoZGF0YS5mbGFncz8uQ29DNz8uY29jaWRGbGFnPy5lcmFzKS5maWx0ZXIoZSA9PiBlWzFdKS5tYXAoZSA9PiBlWzBdKVxuICAgICAgICAgIGNvbnN0IGl0ZW1zID0gYXdhaXQgZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmV4cGFuZEl0ZW1BcnJheSh7IGl0ZW1MaXN0OiBkYXRhLnN5c3RlbS5pdGVtcywgZXJhOiAodHlwZW9mIGVyYVswXSAhPT0gJ3VuZGVmaW5lZCcgPyBlcmFbMF0gOiB0cnVlKSB9KVxuICAgICAgICAgIGNvbnN0IHNraWxscyA9IGl0ZW1zLmZpbHRlcihpdCA9PiBpdC50eXBlID09PSAnc2tpbGwnKVxuICAgICAgICAgIGNvbnN0IG90aGVyc0l0ZW1zID0gaXRlbXMuZmlsdGVyKGl0ID0+IGl0LnR5cGUgIT09ICdza2lsbCcpXG4gICAgICAgICAgYXdhaXQgdGhpcy5hZGRVbmlxdWVJdGVtcyhza2lsbHMpXG4gICAgICAgICAgYXdhaXQgdGhpcy5hZGRJdGVtcyhvdGhlcnNJdGVtcylcbiAgICAgICAgICBpZiAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnb25lQmxvY2tCYWNrc3RvcnknKSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGUoeyAnc3lzdGVtLmJhY2tzdG9yeSc6IGRhdGEuc3lzdGVtLmJhY2tzdG9yeSB9LCB7IHJlbmRlclNoZWV0OiBmYWxzZSB9KVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNlY3Rpb25OYW1lIG9mIGRhdGEuc3lzdGVtLmJpb1NlY3Rpb25zKSB7XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAhdGhpcy5zeXN0ZW0uYmlvZ3JhcGh5Py5maW5kKFxuICAgICAgICAgICAgICAgICAgZWwgPT4gc2VjdGlvbk5hbWUgPT09IGVsLnRpdGxlXG4gICAgICAgICAgICAgICAgKSAmJlxuICAgICAgICAgICAgICAgIHNlY3Rpb25OYW1lXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlQmlvU2VjdGlvbihzZWN0aW9uTmFtZSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyByZWZhY3RvciB0aGlzXG4gICAgICAgICAgY29uc3QgbW9uZXRhcnkgPSBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHRoaXMuc3lzdGVtLm1vbmV0YXJ5LCBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShkYXRhLnN5c3RlbS5tb25ldGFyeSkpXG4gICAgICAgICAgY29uc3Qgc2hlZXQgPSB0aGlzLnNoZWV0XG4gICAgICAgICAgbGV0IHN0YXRlID0gZmFsc2VcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICBzdGF0ZSA9IGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgIHJlc29sdmUoc2hlZXQuX3N0YXRlKVxuICAgICAgICAgICAgfSwgMTAwKSlcbiAgICAgICAgICB9IHdoaWxlIChzdGF0ZSA9PT0gQXBwbGljYXRpb24uUkVOREVSX1NUQVRFUy5SRU5ERVJJTkcpXG4gICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGUoe1xuICAgICAgICAgICAgJ3N5c3RlbS5tb25ldGFyeSc6IG1vbmV0YXJ5XG4gICAgICAgICAgfSlcbiAgICAgICAgICBIb29rcy5jYWxsKCdzZXR1cEZpbmlzaGVkQ29DNycpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdhcmNoZXR5cGUnOlxuICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdjaGFyYWN0ZXInKSB7XG4gICAgICAgICAgICAvLyBBcmNoZXR5cHJlIG9ubHkgZm9yIFBDc1xuICAgICAgICAgICAgaWYgKHRoaXMuYXJjaGV0eXBlKSB7XG4gICAgICAgICAgICAgIGxldCByZXNldEFyY2hldHlwZSA9IGZhbHNlXG4gICAgICAgICAgICAgIGF3YWl0IERpYWxvZy5jb25maXJtKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlJlc2V0QXJjaGV0eXBlJyksXG4gICAgICAgICAgICAgICAgY29udGVudDogYDxwPiR7Z2FtZS5pMThuLmZvcm1hdCgnQ29DNy5SZXNldEFyY2hldHlwZUhpbnQnLCB7XG4gICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWVcbiAgICAgICAgICAgICAgICB9KX08L3A+YCxcbiAgICAgICAgICAgICAgICB5ZXM6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIHJlc2V0QXJjaGV0eXBlID0gdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGVmYXVsdFllczogZmFsc2VcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgaWYgKHJlc2V0QXJjaGV0eXBlKSBhd2FpdCB0aGlzLnJlc2V0QXJjaGV0eXBlKClcbiAgICAgICAgICAgICAgZWxzZSByZXR1cm5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgY29yZUNoYXJhYyA9IFtdXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIE9iamVjdC5lbnRyaWVzKGRhdGEuc3lzdGVtLmNvcmVDaGFyYWN0ZXJpc3RpY3MpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IGVudHJ5XG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNvcmVDaGFyYWN0ZXJpc3RpY3Nba2V5XSA9IGZhbHNlXG4gICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoYXIgPSB0aGlzLmdldENoYXJhY3RlcmlzdGljKGtleSlcbiAgICAgICAgICAgICAgICBjaGFyLmtleSA9IGtleVxuICAgICAgICAgICAgICAgIGNvcmVDaGFyYWMucHVzaChjaGFyKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBjaGFyYWNcblxuICAgICAgICAgICAgaWYgKGNvcmVDaGFyYWMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICBjb25zdCBjaGFyRGlhbG9nRGF0YSA9IHt9XG4gICAgICAgICAgICAgIGNoYXJEaWFsb2dEYXRhLmNoYXJhY3RlcmlzdGljcyA9IGNvcmVDaGFyYWNcbiAgICAgICAgICAgICAgY2hhckRpYWxvZ0RhdGEudGl0bGUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuU2VsZWN0Q29yZUNoYXJhYycpXG4gICAgICAgICAgICAgIGNoYXJhYyA9IGF3YWl0IENoYXJhY1NlbGVjdERpYWxvZy5jcmVhdGUoY2hhckRpYWxvZ0RhdGEpXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvcmVDaGFyYWMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgIGNoYXJhYyA9IGNvcmVDaGFyYWNbMF0ua2V5XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghY2hhcmFjKSByZXR1cm5cbiAgICAgICAgICAgIGRhdGEuc3lzdGVtLmNvcmVDaGFyYWN0ZXJpc3RpY3NbY2hhcmFjXSA9IHRydWVcbiAgICAgICAgICAgIGlmIChkYXRhLnN5c3RlbS5jb3JlQ2hhcmFjdGVyaXN0aWNzRm9ybXVsYS5lbmFibGVkKSB7XG4gICAgICAgICAgICAgIGxldCB2YWx1ZSA9IE51bWJlcihkYXRhLnN5c3RlbS5jb3JlQ2hhcmFjdGVyaXN0aWNzRm9ybXVsYS52YWx1ZSlcbiAgICAgICAgICAgICAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoYXIgPSB0aGlzLmdldENoYXJhY3RlcmlzdGljKGNoYXJhYylcbiAgICAgICAgICAgICAgICBjb25zdCByb2xsID0gbmV3IFJvbGwoXG4gICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5jb3JlQ2hhcmFjdGVyaXN0aWNzRm9ybXVsYS52YWx1ZVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBhd2FpdCByb2xsLnJvbGwoeyBhc3luYzogdHJ1ZSB9KVxuICAgICAgICAgICAgICAgIHJvbGwudG9NZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgIGZsYXZvcjogZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICAgICAgICAgICAgJ0NvQzcuTWVzc2FnZVJvbGxpbmdDaGFyYWN0ZXJpc3RpYycsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogY2hhci5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICBmb3JtdWxhOiBkYXRhLnN5c3RlbS5jb3JlQ2hhcmFjdGVyaXN0aWNzRm9ybXVsYS52YWx1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGNoYXIudmFsdWUgPCByb2xsLnRvdGFsID8gcm9sbC50b3RhbCA6IGNoYXIudmFsdWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgW2BzeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLiR7Y2hhcmFjfS52YWx1ZWBdOiB2YWx1ZVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBZGQgYWxsIHNraWxsc1xuICAgICAgICAgICAgZGF0YS5zeXN0ZW0uc2tpbGxzID0gYXdhaXQgZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmV4cGFuZEl0ZW1BcnJheSh7IGl0ZW1MaXN0OiBkYXRhLnN5c3RlbS5za2lsbHMgfSlcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkVW5pcXVlSXRlbXMoZGF0YS5zeXN0ZW0uc2tpbGxzLCAnYXJjaGV0eXBlJylcblxuICAgICAgICAgICAgcHJvY2Vzc2VkRGF0YUFycmF5LnB1c2goZm91bmRyeS51dGlscy5kdXBsaWNhdGUoZGF0YSkpXG4gICAgICAgICAgICBhcmNoZXR5cGUgPSB0cnVlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnb2NjdXBhdGlvbic6XG4gICAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ2NoYXJhY3RlcicpIHtcbiAgICAgICAgICAgIC8vIE9jY3VwYXRpb24gb25seSBmb3IgUENzXG4gICAgICAgICAgICBpZiAodGhpcy5vY2N1cGF0aW9uKSB7XG4gICAgICAgICAgICAgIGxldCByZXNldE9jY3VwYXRpb24gPSBmYWxzZVxuICAgICAgICAgICAgICBhd2FpdCBEaWFsb2cuY29uZmlybSh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5SZXNldE9jY3VwYXRpb24nKSxcbiAgICAgICAgICAgICAgICBjb250ZW50OiBgPHA+JHtnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlJlc2V0T2NjdXBhdGlvbkhpbnQnLCB7XG4gICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWVcbiAgICAgICAgICAgICAgICB9KX08L3A+YCxcbiAgICAgICAgICAgICAgICB5ZXM6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIHJlc2V0T2NjdXBhdGlvbiA9IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRlZmF1bHRZZXM6IGZhbHNlXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIGlmIChyZXNldE9jY3VwYXRpb24pIGF3YWl0IHRoaXMucmVzZXRPY2N1cGF0aW9uKClcbiAgICAgICAgICAgICAgZWxzZSByZXR1cm5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ29udmVydCBDb0NJRHMgdG8gaXRlbXNcbiAgICAgICAgICAgIGRhdGEuc3lzdGVtLnNraWxscyA9IGF3YWl0IGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5leHBhbmRJdGVtQXJyYXkoeyBpdGVtTGlzdDogZGF0YS5zeXN0ZW0uc2tpbGxzIH0pXG5cbiAgICAgICAgICAgIGlmIChOdW1iZXIoZGF0YS5zeXN0ZW0uY3JlZGl0UmF0aW5nLm1heCkgPiAwKSB7XG4gICAgICAgICAgICAgIC8vIE9jY3VwYXRpb25zIHdpdGggYSBjcmVkaXQgcmF0aW5nIHJlcXVpcmUgYSBjcmVkaXQgcmF0aW5nIHNraWxsXG4gICAgICAgICAgICAgIGNvbnN0IGFjdG9yQ3JlZGl0UmF0aW5nID0gZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmZpbmRDb2NJZEluTGlzdCgnaS5za2lsbC5jcmVkaXQtcmF0aW5nJywgZGF0YS5zeXN0ZW0uc2tpbGxzKVxuICAgICAgICAgICAgICBpZiAoYWN0b3JDcmVkaXRSYXRpbmcubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5maW5kQ29jSWRJbkxpc3QoJ2kuc2tpbGwuY3JlZGl0LXJhdGluZycsIHRoaXMuaXRlbXMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgZGF0YS5zeXN0ZW0uc2tpbGxzLnB1c2goJ2kuc2tpbGwuY3JlZGl0LXJhdGluZycpXG4gICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5za2lsbHMgPSBhd2FpdCBnYW1lLnN5c3RlbS5hcGkuY29jaWQuZXhwYW5kSXRlbUFycmF5KHsgaXRlbUxpc3Q6IGRhdGEuc3lzdGVtLnNraWxscyB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmZpbmRDb2NJZEluTGlzdCgnaS5za2lsbC5jcmVkaXQtcmF0aW5nJywgdGhpcy5pdGVtcykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5za2lsbHMucHVzaChhY3RvckNyZWRpdFJhdGluZ1swXSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2VsZWN0IGNoYXJhY3RlcmlzdGljXG4gICAgICAgICAgICBjb25zdCBwb2ludHNEaWFsb2dEYXRhID0ge31cbiAgICAgICAgICAgIHBvaW50c0RpYWxvZ0RhdGEuY2hhcmFjdGVyaXN0aWNzID0gZGF0YS5zeXN0ZW0ub2NjdXBhdGlvblNraWxsUG9pbnRzXG4gICAgICAgICAgICBsZXQgdG90YWwgPSAwXG4gICAgICAgICAgICBsZXQgb3B0aW9uYWxDaGFyID0gZmFsc2VcbiAgICAgICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgT2JqZWN0LmVudHJpZXMoXG4gICAgICAgICAgICAgIGRhdGEuc3lzdGVtLm9jY3VwYXRpb25Ta2lsbFBvaW50c1xuICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgICBjb25zdCBba2V5LCB2YWx1ZV0gPSBlbnRyeVxuICAgICAgICAgICAgICBjb25zdCBjaGFyID0gdGhpcy5nZXRDaGFyYWN0ZXJpc3RpYyhrZXkpXG4gICAgICAgICAgICAgIHBvaW50c0RpYWxvZ0RhdGEuY2hhcmFjdGVyaXN0aWNzW2tleV0ubmFtZSA9IGNoYXIubGFiZWxcbiAgICAgICAgICAgICAgcG9pbnRzRGlhbG9nRGF0YS5jaGFyYWN0ZXJpc3RpY3Nba2V5XS52YWx1ZSA9IGNoYXIudmFsdWVcbiAgICAgICAgICAgICAgaWYgKHZhbHVlLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgcG9pbnRzRGlhbG9nRGF0YS5jaGFyYWN0ZXJpc3RpY3Nba2V5XS50b3RhbCA9XG4gICAgICAgICAgICAgICAgICBjaGFyLnZhbHVlICpcbiAgICAgICAgICAgICAgICAgIE51bWJlcihwb2ludHNEaWFsb2dEYXRhLmNoYXJhY3RlcmlzdGljc1trZXldLm11bHRpcGxpZXIpXG4gICAgICAgICAgICAgICAgaWYgKCF2YWx1ZS5vcHRpb25hbCkge1xuICAgICAgICAgICAgICAgICAgdG90YWwgKz0gcG9pbnRzRGlhbG9nRGF0YS5jaGFyYWN0ZXJpc3RpY3Nba2V5XS50b3RhbFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBvcHRpb25hbENoYXIgPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb2ludHNEaWFsb2dEYXRhLnRvdGFsID0gdG90YWxcbiAgICAgICAgICAgIGlmIChvcHRpb25hbENoYXIpIHtcbiAgICAgICAgICAgICAgLy8gSXMgdGhlcmUgYW55IG9wdGlvbmFsIGNoYXIgdG8gY2hvb3NlIGZvciBwb2ludHMgY2FsYyA/XG4gICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IFBvaW50U2VsZWN0RGlhbG9nLmNyZWF0ZShwb2ludHNEaWFsb2dEYXRhKVxuICAgICAgICAgICAgICBpZiAoIXJlc3VsdCkgcmV0dXJuIC8vIFBvaW50IG5vdCBzZWxlY3RlZCA9PiBleGl0LlxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBZGQgb3B0aW9uYWwgc2tpbGxzXG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgZGF0YS5zeXN0ZW0uZ3JvdXBzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAvLyBDb252ZXJ0IENvQ0lkcyB0byBpdGVtc1xuICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5ncm91cHNbaW5kZXhdLnNraWxscyA9IGF3YWl0IGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5leHBhbmRJdGVtQXJyYXkoeyBpdGVtTGlzdDogZGF0YS5zeXN0ZW0uZ3JvdXBzW2luZGV4XS5za2lsbHMgfSlcblxuICAgICAgICAgICAgICBjb25zdCBkaWFsb2dEYXRhID0ge31cbiAgICAgICAgICAgICAgZGlhbG9nRGF0YS5za2lsbHMgPSBbXVxuICAgICAgICAgICAgICBkaWFsb2dEYXRhLnR5cGUgPSAnb2NjdXBhdGlvbidcbiAgICAgICAgICAgICAgZGlhbG9nRGF0YS5hY3RvcklkID0gdGhpcy5pZFxuICAgICAgICAgICAgICBkaWFsb2dEYXRhLm9wdGlvbnNDb3VudCA9IE51bWJlcihkYXRhLnN5c3RlbS5ncm91cHNbaW5kZXhdLm9wdGlvbnMpXG4gICAgICAgICAgICAgIGRpYWxvZ0RhdGEudGl0bGUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuU2tpbGxTZWxlY3Rpb25XaW5kb3cnKVxuXG4gICAgICAgICAgICAgIC8vIFNlbGVjdCBvbmx5IHNraWxscyB0aGF0IGFyZSBub3QgcHJlc2VudCBvciBhcmUgbm90IGZsYWdnZWQgYXMgb2NjdXBhdGlvbi5cbiAgICAgICAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBkYXRhLnN5c3RlbS5ncm91cHNbaW5kZXhdLnNraWxscykge1xuICAgICAgICAgICAgICAgIGlmIChDb0M3SXRlbS5pc0FueVNwZWModmFsdWUpKSBkaWFsb2dEYXRhLnNraWxscy5wdXNoKHZhbHVlKVxuICAgICAgICAgICAgICAgIC8vIElmIGl0J3MgYSBnZW5lcmljIHNwZWMgd2UgYWx3YXlzIGFkZCBpdFxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgY29uc3Qgc2tpbGwgPSB0aGlzLml0ZW1zLmZpbmQoaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLm5hbWUgPT09IHZhbHVlLm5hbWUgJiYgaXRlbS50eXBlID09PSAnc2tpbGwnXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgaWYgKCFza2lsbCB8fCAhc2tpbGwuc3lzdGVtLmZsYWdzPy5vY2N1cGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHNraWxsIHdhcyBhZGRlZCB0byBza2lsbCBsaXN0IHByZXZpb3VzbHksIHJlbW92ZSBpdFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbHJlYWR5U2VsZWN0ZWRTa2lsbCA9IGRhdGEuc3lzdGVtLnNraWxscy5maW5kKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLm5hbWUgPT09IHZhbHVlLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbHJlYWR5U2VsZWN0ZWRTa2lsbCkgZGlhbG9nRGF0YS5za2lsbHMucHVzaCh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBpZiB0aGVyZSdzIG5vbmUsIGRvIG5vdGhpbmcuXG4gICAgICAgICAgICAgIGlmIChkaWFsb2dEYXRhLnNraWxscy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoZGlhbG9nRGF0YS5za2lsbHMubGVuZ3RoIDw9IGRpYWxvZ0RhdGEub3B0aW9uc0NvdW50KSB7XG4gICAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSdzIGlzIGxlc3Mgc2tpbGwgdGhhbiBvcHRpb25zLCBhZGQgdGhlbSBhbGwuXG4gICAgICAgICAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmluZm8oXG4gICAgICAgICAgICAgICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuSW5mb0xlc3NTa2lsbFRoYW5PcHRpb25zJywge1xuICAgICAgICAgICAgICAgICAgICAgIHNraWxsQ291bnQ6IGRpYWxvZ0RhdGEuc2tpbGxzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zQ291bnQ6IGRpYWxvZ0RhdGEub3B0aW9uc0NvdW50XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAvLyBhd2FpdCB0aGlzLmFkZFVuaXF1ZUl0ZW1zKCBkaWFsb2dEYXRhLnNraWxscywgJ29jY3VwYXRpb24nKTtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IG1lcmdlZCA9IENvQzdJdGVtLm1lcmdlT3B0aW9uYWxTa2lsbHMoXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc3lzdGVtLnNraWxscyxcbiAgICAgICAgICAgICAgICAgICAgZGlhbG9nRGF0YS5za2lsbHNcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIGRhdGEuc3lzdGVtLnNraWxscyA9IG1lcmdlZFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAvLyBXYWl0IGZvciBza2lsbCBzZWxlY3Rpb24uXG4gICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IGF3YWl0IFNraWxsU2VsZWN0RGlhbG9nLmNyZWF0ZShkaWFsb2dEYXRhKVxuICAgICAgICAgICAgICAgICAgaWYgKCFzZWxlY3RlZCkgcmV0dXJuXG4gICAgICAgICAgICAgICAgICBjb25zdCBtZXJnZWQgPSBDb0M3SXRlbS5tZXJnZU9wdGlvbmFsU2tpbGxzKFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5za2lsbHMsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5za2lsbHMgPSBtZXJnZWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKFxuICAgICAgICAgICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkluZm9BbGxTa2lsbHNBbHJlYWR5U2VsZWN0ZWQnKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBZGQgZXh0cmEgc2tpbGxzXG4gICAgICAgICAgICBpZiAoTnVtYmVyKGRhdGEuc3lzdGVtLnBlcnNvbmFsKSkge1xuICAgICAgICAgICAgICBjb25zdCBkaWFsb2dEYXRhID0ge31cbiAgICAgICAgICAgICAgZGlhbG9nRGF0YS5za2lsbHMgPSBbXVxuICAgICAgICAgICAgICBkaWFsb2dEYXRhLnR5cGUgPSAnb2NjdXBhdGlvbidcbiAgICAgICAgICAgICAgZGlhbG9nRGF0YS5hY3RvcklkID0gdGhpcy5pZFxuICAgICAgICAgICAgICBkaWFsb2dEYXRhLm9wdGlvbnNDb3VudCA9IE51bWJlcihkYXRhLnN5c3RlbS5wZXJzb25hbClcbiAgICAgICAgICAgICAgZGlhbG9nRGF0YS50aXRsZSA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuU2VsZWN0UGVyc29uYWxTa2lsbHMnLCB7XG4gICAgICAgICAgICAgICAgbnVtYmVyOiBOdW1iZXIoZGF0YS5zeXN0ZW0ucGVyc29uYWwpXG4gICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgLy8gU2VsZWN0IG9ubHkgc2tpbGxzIHRoYXQgYXJlIG5vdCBwcmVzZW50IG9yIGFyZSBub3QgZmxhZ2dlZCBhcyBvY2N1cGF0aW9uLlxuICAgICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2YgdGhpcy5za2lsbHMpIHtcbiAgICAgICAgICAgICAgICAvLyBTZWxlY3QgYWxsIHNraWxscyB0aGF0IGFyZSBub3QgYWxyZWFkeSBmbGFnZ2VkIGFzIG9jY3VwYXRpb24sIGNhbiBoYXZlIGFkanVzdG1lbnRzIGFuZCBYUC5cbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAhcy5zeXN0ZW0uZmxhZ3Mub2NjdXBhdGlvbiAmJlxuICAgICAgICAgICAgICAgICAgIXMuc3lzdGVtLnByb3BlcnRpZXMubm9hZGp1c3RtZW50cyAmJlxuICAgICAgICAgICAgICAgICAgIXMuc3lzdGVtLnByb3BlcnRpZXMubm94cGdhaW5cbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIC8vIGlmIHNraWxsIGFscmVhZHkgc2VsZWN0ZWQgZG9uJ3QgYWRkIGl0XG4gICAgICAgICAgICAgICAgICBjb25zdCBhbHJlYWR5U2VsZWN0ZWRTa2lsbCA9IGRhdGEuc3lzdGVtLnNraWxscy5maW5kKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5uYW1lID09PSBzLm5hbWVcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICBpZiAoIWFscmVhZHlTZWxlY3RlZFNraWxsKSBkaWFsb2dEYXRhLnNraWxscy5wdXNoKHMpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gaWYgdGhlcmUncyBub25lLCBkbyBub3RoaW5nLlxuICAgICAgICAgICAgICBpZiAoZGlhbG9nRGF0YS5za2lsbHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRpYWxvZ0RhdGEuc2tpbGxzLmxlbmd0aCA8PSBkaWFsb2dEYXRhLm9wdGlvbnNDb3VudCkge1xuICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBpcyBsZXNzIHNraWxsIHRoYW4gb3B0aW9ucywgYWRkIHRoZW0gYWxsLlxuICAgICAgICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKFxuICAgICAgICAgICAgICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkluZm9MZXNzU2tpbGxUaGFuT3B0aW9ucycsIHtcbiAgICAgICAgICAgICAgICAgICAgICBza2lsbENvdW50OiBkaWFsb2dEYXRhLnNraWxscy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgb3B0aW9uc0NvdW50OiBkaWFsb2dEYXRhLm9wdGlvbnNDb3VudFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgLy8gYXdhaXQgdGhpcy5hZGRVbmlxdWVJdGVtcyggZGlhbG9nRGF0YS5za2lsbHMsICdvY2N1cGF0aW9uJyk7XG4gICAgICAgICAgICAgICAgICBjb25zdCBtZXJnZWQgPSBDb0M3SXRlbS5tZXJnZU9wdGlvbmFsU2tpbGxzKFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5za2lsbHMsXG4gICAgICAgICAgICAgICAgICAgIGRpYWxvZ0RhdGEuc2tpbGxzXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5za2lsbHMgPSBtZXJnZWRcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgLy8gV2FpdCBmb3Igc2tpbGwgc2VsZWN0aW9uLlxuICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBhd2FpdCBTa2lsbFNlbGVjdERpYWxvZy5jcmVhdGUoZGlhbG9nRGF0YSkgLy8gRGlhbG9nIGRhdGEgYnVnID8/P1xuICAgICAgICAgICAgICAgICAgaWYgKCFzZWxlY3RlZCkgcmV0dXJuXG4gICAgICAgICAgICAgICAgICBjb25zdCBtZXJnZWQgPSBDb0M3SXRlbS5tZXJnZU9wdGlvbmFsU2tpbGxzKFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5za2lsbHMsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBkYXRhLnN5c3RlbS5za2lsbHMgPSBtZXJnZWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKFxuICAgICAgICAgICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkluZm9BbGxTa2lsbHNBbHJlYWR5U2VsZWN0ZWQnKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBZGQgYWxsIHNraWxsc1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGRVbmlxdWVJdGVtcyhkYXRhLnN5c3RlbS5za2lsbHMsICdvY2N1cGF0aW9uJylcbiAgICAgICAgICAgIC8vIENyZWRpdCByYXRpbmcgaXMgYWx3YXlzIHBhcnQgb2Ygb2NjdXBhdGlvblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5jcmVkaXRSYXRpbmdTa2lsbD8uc2V0SXRlbUZsYWcoJ29jY3VwYXRpb24nKVxuICAgICAgICAgICAgLy8gc2V0dGluZyBpdCB0byBtaW4gY3JlZGl0IHJhdGluZ1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jcmVkaXRSYXRpbmdTa2lsbD8udXBkYXRlKHtcbiAgICAgICAgICAgICAgJ3N5c3RlbS5hZGp1c3RtZW50cy5vY2N1cGF0aW9uJzogTnVtYmVyKGRhdGEuc3lzdGVtLmNyZWRpdFJhdGluZy5taW4pXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBwcm9jZXNzZWREYXRhQXJyYXkucHVzaChmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShkYXRhKSlcbiAgICAgICAgICAgIG9jY3VwYXRpb24gPSB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBwcm9jZXNzZWREYXRhQXJyYXkucHVzaChmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShkYXRhKSlcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb2Nlc3NlZERhdGFBcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBbXVxuICAgIH1cbiAgICBjb25zdCBwcm9jZXNzZWQgPSBhd2FpdCBzdXBlci5jcmVhdGVFbWJlZGRlZERvY3VtZW50cyhcbiAgICAgIGVtYmVkZGVkTmFtZSxcbiAgICAgIHByb2Nlc3NlZERhdGFBcnJheSxcbiAgICAgIG9wdGlvbnNcbiAgICApXG5cbiAgICBpZiAoYXJjaGV0eXBlKSB7XG4gICAgICAvLyBzZXR0aW5nIHBvaW50c1xuICAgICAgYXdhaXQgdGhpcy51cGRhdGUoe1xuICAgICAgICAnc3lzdGVtLmRldmVsb3BtZW50LmFyY2hldHlwZSc6IHRoaXMuYXJjaGV0eXBlUG9pbnRzXG4gICAgICB9KVxuICAgICAgSG9va3MuY2FsbCgnYXJjaGV0eXBlRmluaXNoZWRDb0M3JylcbiAgICB9XG4gICAgaWYgKG9jY3VwYXRpb24pIHtcbiAgICAgIC8vIHNldHRpbmcgcG9pbnRzXG4gICAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7XG4gICAgICAgICdzeXN0ZW0uZGV2ZWxvcG1lbnQub2NjdXBhdGlvbic6IHRoaXMub2NjdXBhdGlvblBvaW50cyxcbiAgICAgICAgJ3N5c3RlbS5kZXZlbG9wbWVudC5wZXJzb25hbCc6IHRoaXMucGVyc29uYWxQb2ludHNcbiAgICAgIH0pXG4gICAgICBIb29rcy5jYWxsKCdvY2N1cGF0aW9uRmluaXNoZWRDb0M3JylcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvY2Vzc2VkXG4gIH1cblxuICAvLyBnZXRTa2lsbElkQnlOYW1lKCBza2lsbE5hbWUpe1xuICAvLyAgIGxldCBpZCA9IG51bGw7XG4gIC8vICAgIGZvciAoY29uc3QgW21hcCwga2V5LCB2YWx1ZV0gb2YgdGhpcy5pdGVtcykge1xuICAvLyAgICAgaWYoIHZhbHVlLm5hbWUgPT0gc2tpbGxOYW1lKSBpZCA9IHZhbHVlLmlkO1xuICAvLyAgIH07XG5cbiAgLy8gICByZXR1cm4gaWQ7XG4gIC8vIH1cblxuICBnZXRJdGVtSWRCeU5hbWUgKGl0ZW1OYW1lKSB7XG4gICAgbGV0IGlkID0gbnVsbFxuICAgIGNvbnN0IG5hbWUgPSBpdGVtTmFtZS5tYXRjaCgvXFwoKFteKV0rKVxcKS8pXG4gICAgICA/IGl0ZW1OYW1lLm1hdGNoKC9cXCgoW14pXSspXFwpLylbMV1cbiAgICAgIDogaXRlbU5hbWVcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHRoaXMuaXRlbXMpIHtcbiAgICAgIGlmIChcbiAgICAgICAgQ29DN0l0ZW0uZ2V0TmFtZVdpdGhvdXRTcGVjKHZhbHVlKS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKClcbiAgICAgICkge1xuICAgICAgICBpZCA9IHZhbHVlLmlkXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGlkXG4gIH1cblxuICBnZXRJdGVtc0J5TmFtZSAoaXRlbU5hbWUpIHtcbiAgICBjb25zdCBpdGVtTGlzdCA9IFtdXG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiB0aGlzLml0ZW1zKSB7XG4gICAgICBpZiAodmFsdWUubmFtZSA9PT0gaXRlbU5hbWUpIGl0ZW1MaXN0LnB1c2godmFsdWUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZW1MaXN0XG4gIH1cblxuICAvKipcbiAgICpcbiAgICpcbiAgICovXG4gIGdldFNraWxsc0J5TmFtZSAoc2tpbGxOYW1lKSB7XG4gICAgLy8gVE9ETyA6IG1vcmUgYWdncmVzc2l2ZSBmaW5kaW5nIGluY2x1ZGluZyBzcGVjc1xuICAgIGNvbnN0IHNraWxsTGlzdCA9IFtdXG4gICAgY29uc3QgbmFtZSA9IHNraWxsTmFtZS5tYXRjaCgvXFwoKFteKV0rKVxcKS8pXG4gICAgICA/IHNraWxsTmFtZS5tYXRjaCgvXFwoKFteKV0rKVxcKS8pWzFdXG4gICAgICA6IHNraWxsTmFtZVxuXG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiB0aGlzLml0ZW1zKSB7XG4gICAgICBpZiAoXG4gICAgICAgIChcbiAgICAgICAgICBDb0M3SXRlbS5nZXROYW1lV2l0aG91dFNwZWModmFsdWUpLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgIHZhbHVlLmZsYWdzPy5Db0M3Py5jb2NpZEZsYWc/LmlkID09PSBza2lsbE5hbWVcbiAgICAgICAgKSAmJlxuICAgICAgICB2YWx1ZS50eXBlID09PSAnc2tpbGwnXG4gICAgICApIHtcbiAgICAgICAgc2tpbGxMaXN0LnB1c2godmFsdWUpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBza2lsbExpc3RcbiAgfVxuXG4gIGdldEZpcnN0SXRlbUJ5Q29DSUQgKGNvY2lkKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXMuZmluZChpID0+IGkuZmxhZ3M/LkNvQzc/LmNvY2lkRmxhZz8uaWQgPT09IGNvY2lkKVxuICB9XG5cbiAgLy8gcGFyc2VGb3JtdWxhIChmb3JtdWxhKSB7XG4gIC8vICAgbGV0IHBhcnNlZEZvcm11bGEgPSBmb3JtdWxhXG4gIC8vICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoQ09DNy5mb3JtdWxhLmFjdG9yKSkge1xuICAvLyAgICAgcGFyc2VkRm9ybXVsYSA9IHBhcnNlZEZvcm11bGEucmVwbGFjZShrZXksIHZhbHVlKVxuICAvLyAgIH1cbiAgLy8gICByZXR1cm4gcGFyc2VkRm9ybXVsYVxuICAvLyB9XG5cbiAgcGFyc2VDaGFyYWN0ZXJpc3RpY3MgKCkge1xuICAgIGNvbnN0IHBhcnNlZCA9IHt9XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoQ09DNy5mb3JtdWxhLmFjdG9yKSkge1xuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdAJykgJiYgdmFsdWUuc3RhcnRzV2l0aCgndGhpcy4nKSkge1xuICAgICAgICBwYXJzZWRba2V5LnN1YnN0cmluZygxKV0gPSBmb3VuZHJ5LnV0aWxzLmdldFByb3BlcnR5KHRoaXMsIHZhbHVlLnN1YnN0cmluZyg1KSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZFxuICB9XG5cbiAgc3RhdGljIGdldENoYXJhY3RlcmlzdGljRGVmaW5pdGlvbiAoKSB7XG4gICAgY29uc3QgY2hhcmFjdGVyaXN0aWNzID0gW11cbiAgICAvLyBGb3VuZHJ5VlRUIHYxMVxuICAgIGNvbnN0IGNoYXJhY3RlcmlzdGljTGlzdCA9ICghZm91bmRyeS51dGlscy5pc05ld2VyVmVyc2lvbihnYW1lLnZlcnNpb24sICcxMicpID8gZ2FtZS5zeXN0ZW0udGVtcGxhdGUuQWN0b3IudGVtcGxhdGVzLmNoYXJhY3RlcmlzdGljcy5jaGFyYWN0ZXJpc3RpY3MgOiBnYW1lLnN5c3RlbS50ZW1wbGF0ZS5BY3Rvci5jaGFyYWN0ZXIuY2hhcmFjdGVyaXN0aWNzKVxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGNoYXJhY3RlcmlzdGljTGlzdCkpIHtcbiAgICAgIGNoYXJhY3RlcmlzdGljcy5wdXNoKHtcbiAgICAgICAga2V5LFxuICAgICAgICBzaG9ydE5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSh2YWx1ZS5zaG9ydCksXG4gICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUodmFsdWUubGFiZWwpXG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gY2hhcmFjdGVyaXN0aWNzXG4gIH1cblxuICBnZXRDaGFyYWN0ZXJpc3RpYyAoY2hhck5hbWUpIHtcbiAgICBpZiAodGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzKSB7XG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhcbiAgICAgICAgdGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzXG4gICAgICApKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUodmFsdWUuc2hvcnQpLnRvTG93ZXJDYXNlKCkgPT09XG4gICAgICAgICAgICBjaGFyTmFtZS50b0xvd2VyQ2FzZSgpIHx8XG4gICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKHZhbHVlLmxhYmVsKS50b0xvd2VyQ2FzZSgpID09PVxuICAgICAgICAgICAgY2hhck5hbWUudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgIGtleSA9PT0gY2hhck5hbWUudG9Mb3dlckNhc2UoKVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgc2hvcnROYW1lOiBnYW1lLmkxOG4ubG9jYWxpemUodmFsdWUuc2hvcnQpLFxuICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSh2YWx1ZS5sYWJlbCksXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUudmFsdWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGdldEF0dHJpYnV0ZSAoYXR0cmliTmFtZSkge1xuICAgIGlmIChcbiAgICAgIFsnbGNrJywgJ2x1Y2snLCBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTHVjaycpLnRvTG93ZXJDYXNlKCldLmluY2x1ZGVzKFxuICAgICAgICBhdHRyaWJOYW1lLnRvTG93ZXJDYXNlKClcbiAgICAgIClcbiAgICApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtleTogJ2xjaycsXG4gICAgICAgIHNob3J0TmFtZTogJ2x1Y2snLFxuICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lkx1Y2snKSxcbiAgICAgICAgdmFsdWU6IHRoaXMuc3lzdGVtLmF0dHJpYnMubGNrLnZhbHVlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChcbiAgICAgIFtcbiAgICAgICAgJ3NhbicsXG4gICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5TQU4nKS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuU2FuaXR5JykudG9Mb3dlckNhc2UoKVxuICAgICAgXS5pbmNsdWRlcyhhdHRyaWJOYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBrZXk6ICdzYW4nLFxuICAgICAgICBzaG9ydE5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5TQU4nKSxcbiAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5TYW5pdHknKSxcbiAgICAgICAgdmFsdWU6IHRoaXMuc3lzdGVtLmF0dHJpYnMuc2FuLnZhbHVlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBhc3luYyBydW5Sb2xsIChvcHRpb25zID0ge30pIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuY2FyZFR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBvcHRpb25zLmNhcmRUeXBlID0gQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9OT1JNQUxcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnByZXZlbnRTdGFuZGJ5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgb3B0aW9ucy5wcmV2ZW50U3RhbmRieSA9IHRydWVcbiAgICB9XG4gICAgb3B0aW9ucy5hY3RvciA9IHRoaXNcbiAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgQ29DN0NoYXRNZXNzYWdlLnRyaWdnZXIob3B0aW9ucylcbiAgICByZXR1cm4gcmVzdWx0c1xuICB9XG5cbiAgZ2V0IG9jY3VwYXRpb24gKCkge1xuICAgIGNvbnN0IG9jY3VwYXRpb24gPSB0aGlzLml0ZW1zLmZpbHRlcihpdGVtID0+IGl0ZW0udHlwZSA9PT0gJ29jY3VwYXRpb24nKVxuICAgIHJldHVybiBvY2N1cGF0aW9uWzBdXG4gIH1cblxuICBnZXQgYXJjaGV0eXBlICgpIHtcbiAgICBjb25zdCBhcmNoZXR5cGUgPSB0aGlzLml0ZW1zLmZpbHRlcihpdGVtID0+IGl0ZW0udHlwZSA9PT0gJ2FyY2hldHlwZScpXG4gICAgcmV0dXJuIGFyY2hldHlwZVswXVxuICB9XG5cbiAgYXN5bmMgcmVzZXRPY2N1cGF0aW9uIChlcmFzZU9sZCA9IHRydWUpIHtcbiAgICBpZiAoZXJhc2VPbGQpIHtcbiAgICAgIGNvbnN0IG9jY3VwYXRpb25Ta2lsbCA9IHRoaXMuaXRlbXMuZmlsdGVyKGl0ZW0gPT5cbiAgICAgICAgaXRlbS5nZXRJdGVtRmxhZygnb2NjdXBhdGlvbicpXG4gICAgICApXG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgb2NjdXBhdGlvblNraWxsLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBhd2FpdCBvY2N1cGF0aW9uU2tpbGxbaW5kZXhdLnVuc2V0SXRlbUZsYWcoJ29jY3VwYXRpb24nKVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5vY2N1cGF0aW9uKSBhd2FpdCB0aGlzLm9jY3VwYXRpb24uZGVsZXRlKClcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uZGV2ZWxvcG1lbnQub2NjdXBhdGlvbic6IG51bGwgfSlcbiAgfVxuXG4gIGFzeW5jIHJlc2V0QXJjaGV0eXBlIChlcmFzZU9sZCA9IHRydWUpIHtcbiAgICBpZiAoZXJhc2VPbGQpIHtcbiAgICAgIGNvbnN0IGFyY2hldHlwZVNraWxsID0gdGhpcy5pdGVtcy5maWx0ZXIoaXRlbSA9PlxuICAgICAgICBpdGVtLmdldEl0ZW1GbGFnKCdhcmNoZXR5cGUnKVxuICAgICAgKVxuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGFyY2hldHlwZVNraWxsLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBhd2FpdCBhcmNoZXR5cGVTa2lsbFtpbmRleF0udW5zZXRJdGVtRmxhZygnYXJjaGV0eXBlJylcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuYXJjaGV0eXBlKSBhd2FpdCB0aGlzLmFyY2hldHlwZS5kZWxldGUoKVxuICAgIGF3YWl0IHRoaXMudXBkYXRlKHsgJ3N5c3RlbS5kZXZlbG9wbWVudC5hcmNoZXR5cGUnOiBudWxsIH0pXG4gIH1cblxuICBnZXQgbHVjayAoKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuc3lzdGVtLmF0dHJpYnM/Lmxjaz8udmFsdWUpXG4gIH1cblxuICBhc3luYyBzZXRMdWNrICh2YWx1ZSkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uYXR0cmlicy5sY2sudmFsdWUnOiB2YWx1ZSB9KVxuICB9XG5cbiAgYXN5bmMgc3BlbmRMdWNrIChhbW91bnQpIHtcbiAgICBhbW91bnQgPSBwYXJzZUludChhbW91bnQpXG4gICAgaWYgKCEodGhpcy5sdWNrID49IGFtb3VudCkpIHJldHVybiBmYWxzZVxuICAgIHJldHVybiB0aGlzLnNldEx1Y2sodGhpcy5sdWNrIC0gYW1vdW50KVxuICB9XG5cbiAgZ2V0IGhwICgpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYXR0cmlicy5ocC52YWx1ZSlcbiAgfVxuXG4gIGdldCByYXdIcE1heCAoKSB7XG4gICAgaWYgKHRoaXMuc3lzdGVtLmF0dHJpYnMuaHAuYXV0bykge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3Muc2l6LnZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgdGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmNvbi52YWx1ZSAhPSBudWxsXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIENvQ0FjdG9yLmhwRnJvbUNoYXJhY3RlcmlzdGljcyh0aGlzLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MsIHRoaXMudHlwZSlcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnN5c3RlbS5hdHRyaWJzLmhwLm1heCkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYXR0cmlicy5ocC5tYXgpXG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYXR0cmlicy5ocC5tYXgpXG4gIH1cblxuICBnZXQgaHBNYXggKCkge1xuICAgIHJldHVybiBwYXJzZUludCh0aGlzLnN5c3RlbS5hdHRyaWJzLmhwLm1heClcbiAgfVxuXG4gIGFzeW5jIF9zZXRIcCAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDBcbiAgICBpZiAodmFsdWUgPiB0aGlzLnN5c3RlbS5hdHRyaWJzLmhwLm1heCkge1xuICAgICAgdmFsdWUgPSBwYXJzZUludCh0aGlzLnN5c3RlbS5hdHRyaWJzLmhwLm1heClcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudXBkYXRlKHsgJ3N5c3RlbS5hdHRyaWJzLmhwLnZhbHVlJzogdmFsdWUgfSlcbiAgfVxuXG4gIGFzeW5jIGFkZFVuaXF1ZUl0ZW1zIChza2lsbExpc3QsIGZsYWcgPSBudWxsKSB7XG4gICAgY29uc3QgcHJvY2Vzc2VkID0gW11cbiAgICBmb3IgKGxldCBza2lsbCBvZiBza2lsbExpc3QpIHtcbiAgICAgIHNraWxsID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoc2tpbGwpXG4gICAgICBpZiAoZmxhZykge1xuICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChza2lsbC5zeXN0ZW0sICdmbGFncycpKSB7XG4gICAgICAgICAgc2tpbGwuc3lzdGVtLmZsYWdzID0ge31cbiAgICAgICAgfVxuICAgICAgICBza2lsbC5zeXN0ZW0uZmxhZ3NbZmxhZ10gPSB0cnVlXG4gICAgICB9XG4gICAgICBpZiAoQ29DN0l0ZW0uaXNBbnlTcGVjKHNraWxsKSkge1xuICAgICAgICBwcm9jZXNzZWQucHVzaChza2lsbClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGl0ZW1JZCA9IHRoaXMuZ2V0SXRlbUlkQnlOYW1lKHNraWxsLm5hbWUpXG4gICAgICAgIGlmICghaXRlbUlkKSB7XG4gICAgICAgICAgcHJvY2Vzc2VkLnB1c2goc2tpbGwpXG4gICAgICAgIH0gZWxzZSBpZiAoZmxhZykge1xuICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLml0ZW1zLmdldChpdGVtSWQpXG4gICAgICAgICAgYXdhaXQgaXRlbS5zZXRJdGVtRmxhZyhmbGFnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9jZXNzZWQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgYXdhaXQgdGhpcy5jcmVhdGVFbWJlZGRlZERvY3VtZW50cygnSXRlbScsIHByb2Nlc3NlZCwge1xuICAgICAgcmVuZGVyU2hlZXQ6IGZhbHNlXG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jIGFkZEl0ZW1zIChpdGVtTGlzdCwgZmxhZyA9IG51bGwpIHtcbiAgICBjb25zdCBwcm9jZXNzZWQgPSBbXVxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtTGlzdCkge1xuICAgICAgaWYgKGZsYWcpIHtcbiAgICAgICAgaWYgKCFpdGVtLnN5c3RlbS5mbGFncykgaXRlbS5zeXN0ZW0uZmxhZ3MgPSB7fVxuICAgICAgICBpdGVtLnN5c3RlbS5mbGFnc1tmbGFnXSA9IHRydWVcbiAgICAgIH1cbiAgICAgIHByb2Nlc3NlZC5wdXNoKGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKGl0ZW0pKVxuICAgIH1cbiAgICBpZiAocHJvY2Vzc2VkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzLmNyZWF0ZUVtYmVkZGVkRG9jdW1lbnRzKCdJdGVtJywgcHJvY2Vzc2VkLCB7XG4gICAgICByZW5kZXJTaGVldDogZmFsc2VcbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgYWRkVW5pcXVlSXRlbSAoc2tpbGwsIGZsYWcgPSBudWxsKSB7XG4gICAgY29uc3QgaXRlbUlkID0gdGhpcy5nZXRJdGVtSWRCeU5hbWUoc2tpbGwubmFtZSlcbiAgICBpZiAoIWl0ZW1JZCkge1xuICAgICAgaWYgKGZsYWcpIHtcbiAgICAgICAgaWYgKCFza2lsbC5zeXN0ZW0uZmxhZ3MpIHNraWxsLnN5c3RlbS5mbGFncyA9IHt9XG4gICAgICAgIHNraWxsLnN5c3RlbS5mbGFnc1tmbGFnXSA9IHRydWVcbiAgICAgIH1cbiAgICAgIGF3YWl0IHRoaXMuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBbc2tpbGxdLCB7XG4gICAgICAgIHJlbmRlclNoZWV0OiBmYWxzZVxuICAgICAgfSlcbiAgICB9IGVsc2UgaWYgKGZsYWcpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLml0ZW1zLmdldChpdGVtSWQpXG4gICAgICBhd2FpdCBpdGVtLnNldEl0ZW1GbGFnKGZsYWcpXG4gICAgfVxuICB9XG5cbiAgZ2V0IHJhd01wTWF4ICgpIHtcbiAgICBpZiAodGhpcy5zeXN0ZW0uYXR0cmlicy5tcC5hdXRvKSB7XG4gICAgICBpZiAodGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnBvdy52YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBDb0NBY3Rvci5tcEZyb21DaGFyYWN0ZXJpc3RpY3ModGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzKVxuICAgICAgfSBlbHNlIHJldHVybiAwXG4gICAgfVxuICAgIHJldHVybiBwYXJzZUludCh0aGlzLnN5c3RlbS5hdHRyaWJzLm1wLm1heClcbiAgfVxuXG4gIGdldFJlYXNvblNhbkxvc3MgKHNhblJlYXNvbikge1xuICAgIGlmICh0eXBlb2Ygc2FuUmVhc29uID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5zeXN0ZW0uc2FuaXR5TG9zc0V2ZW50cy5maWx0ZXIoXG4gICAgICAgICAgciA9PiByLnR5cGUudG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gc2FuUmVhc29uLnRvTG9jYWxlTG93ZXJDYXNlKClcbiAgICAgICAgKVswXSA/PyB7IHR5cGU6ICcnLCB0b3RhbExvc3M6IDAsIGltbXVuaXR5OiBmYWxzZSB9XG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiB7IHR5cGU6ICcnLCB0b3RhbExvc3M6IDAsIGltbXVuaXR5OiBmYWxzZSB9XG4gIH1cblxuICBzYW5Mb3N0VG9SZWFzb24gKHNhblJlYXNvbikge1xuICAgIGlmIChzYW5SZWFzb24pIHtcbiAgICAgIGNvbnN0IHNhbml0eUxvc3NFdmVudCA9IHRoaXMuZ2V0UmVhc29uU2FuTG9zcyhzYW5SZWFzb24pXG4gICAgICByZXR1cm4gc2FuaXR5TG9zc0V2ZW50LnRvdGFsTG9zc1xuICAgIH1cbiAgICByZXR1cm4gMFxuICB9XG5cbiAgc2FuTG9zc1JlYXNvbkVuY291bnRlcmVkIChzYW5SZWFzb24pIHtcbiAgICBpZiAoc2FuUmVhc29uKSB7XG4gICAgICBjb25zdCBzYW5pdHlMb3NzRXZlbnQgPSB0aGlzLmdldFJlYXNvblNhbkxvc3Moc2FuUmVhc29uKVxuICAgICAgcmV0dXJuIHNhbml0eUxvc3NFdmVudC50eXBlICE9PSAnJ1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHNldFJlYXNvblNhbkxvc3MgKHNhblJlYXNvbiwgc2FuTG9zcykge1xuICAgIGlmICh0eXBlb2Ygc2FuUmVhc29uID09PSAnc3RyaW5nJyAmJiBzYW5SZWFzb24gIT09ICcnKSB7XG4gICAgICBjb25zdCBzYW5pdHlMb3NzRXZlbnRzID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5zeXN0ZW0uc2FuaXR5TG9zc0V2ZW50cylcbiAgICAgIGNvbnN0IGluZGV4ID0gc2FuaXR5TG9zc0V2ZW50cy5maW5kSW5kZXgoXG4gICAgICAgIHIgPT4gci50eXBlLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IHNhblJlYXNvbi50b0xvY2FsZUxvd2VyQ2FzZSgpXG4gICAgICApXG4gICAgICBpZiAoc2FuTG9zcyA+IDApIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgIHNhbml0eUxvc3NFdmVudHMucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBzYW5SZWFzb24sXG4gICAgICAgICAgICB0b3RhbExvc3M6IHNhbkxvc3MsXG4gICAgICAgICAgICBpbW11bml0eTogZmFsc2VcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNhbml0eUxvc3NFdmVudHNbaW5kZXhdLnRvdGFsTG9zcyArPSBzYW5Mb3NzXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICBzYW5pdHlMb3NzRXZlbnRzLnNwbGljZShpbmRleCwgMSlcbiAgICAgICAgc2FuaXR5TG9zc0V2ZW50cy5zb3J0KGZ1bmN0aW9uIChsZWZ0LCByaWdodCkge1xuICAgICAgICAgIHJldHVybiBsZWZ0LnR5cGUubG9jYWxlQ29tcGFyZShyaWdodC50eXBlKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlKHtcbiAgICAgICAgJ3N5c3RlbS5zYW5pdHlMb3NzRXZlbnRzJzogc2FuaXR5TG9zc0V2ZW50c1xuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBtYXhMb3NzVG9TYW5SZWFzb24gKHNhblJlYXNvbiwgc2FuTWF4Rm9ybXVsYSkge1xuICAgIGNvbnN0IHNhbk1heCA9IG5ldyBSb2xsKHNhbk1heEZvcm11bGEudG9TdHJpbmcoKSlbKCFmb3VuZHJ5LnV0aWxzLmlzTmV3ZXJWZXJzaW9uKGdhbWUudmVyc2lvbiwgJzEyJykgPyAnZXZhbHVhdGUnIDogJ2V2YWx1YXRlU3luYycpLyogLy8gRm91bmRyeVZUVCB2MTEgKi9dKHsgbWF4aW1pemU6IHRydWUgfSkudG90YWxcbiAgICBjb25zdCBzYW5pdHlMb3NzRXZlbnQgPSB0aGlzLmdldFJlYXNvblNhbkxvc3Moc2FuUmVhc29uKVxuICAgIGlmIChzYW5pdHlMb3NzRXZlbnQuaW1tdW5pdHkpIHtcbiAgICAgIHJldHVybiAwXG4gICAgfVxuICAgIHJldHVybiBNYXRoLm1heCgwLCBzYW5NYXggLSBzYW5pdHlMb3NzRXZlbnQudG90YWxMb3NzKVxuICB9XG5cbiAgYXN5bmMgbG9vc2VTYW4gKHNhblJlYXNvbiwgc2FuTG9zcykge1xuICAgIGNvbnN0IHNhbml0eUxvc3NFdmVudCA9IHRoaXMuZ2V0UmVhc29uU2FuTG9zcyhzYW5SZWFzb24pXG4gICAgaWYgKCFzYW5pdHlMb3NzRXZlbnQuaW1tdW5pdHkpIHtcbiAgICAgIGF3YWl0IHRoaXMuc2V0U2FuKHRoaXMuc2FuIC0gc2FuTG9zcylcbiAgICAgIHRoaXMuc2V0UmVhc29uU2FuTG9zcyhzYW5SZWFzb24sIHNhbkxvc3MpXG4gICAgICByZXR1cm4gc2FuTG9zc1xuICAgIH1cbiAgICByZXR1cm4gMFxuICB9XG5cbiAgc2FuTG9zcyAoY2hlY2tQYXNzZWQpIHtcbiAgICBpZiAoY2hlY2tQYXNzZWQpIHJldHVybiB0aGlzLnNhbkxvc3NDaGVja1Bhc3NlZFxuICAgIHJldHVybiB0aGlzLnNhbkxvc3NDaGVja0ZhaWxsZWRcbiAgfVxuXG4gIGdldCBzYW5Mb3NzQ2hlY2tQYXNzZWQgKCkge1xuICAgIHJldHVybiB0aGlzLnN5c3RlbS5zcGVjaWFsPy5zYW5Mb3NzPy5jaGVja1Bhc3NlZFxuICB9XG5cbiAgZ2V0IHNhbkxvc3NDaGVja0ZhaWxsZWQgKCkge1xuICAgIHJldHVybiB0aGlzLnN5c3RlbS5zcGVjaWFsPy5zYW5Mb3NzPy5jaGVja0ZhaWxsZWRcbiAgfVxuXG4gIGdldCBzYW5Mb3NzTWF4ICgpIHtcbiAgICBpZiAodGhpcy5zYW5Mb3NzQ2hlY2tGYWlsbGVkKSB7XG4gICAgICBpZiAoIWlzTmFOKE51bWJlcih0aGlzLnNhbkxvc3NDaGVja0ZhaWxsZWQpKSkge1xuICAgICAgICByZXR1cm4gTnVtYmVyKHRoaXMuc2FuTG9zc0NoZWNrRmFpbGxlZClcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgUm9sbCh0aGlzLnNhbkxvc3NDaGVja0ZhaWxsZWQpWyghZm91bmRyeS51dGlscy5pc05ld2VyVmVyc2lvbihnYW1lLnZlcnNpb24sICcxMicpID8gJ2V2YWx1YXRlJyA6ICdldmFsdWF0ZVN5bmMnKS8qIC8vIEZvdW5kcnlWVFQgdjExICovXSh7IG1heGltaXplOiB0cnVlIH0pLnRvdGFsXG4gICAgfVxuICAgIHJldHVybiAwXG4gIH1cblxuICBnZXQgc2FuTG9zc01pbiAoKSB7XG4gICAgaWYgKHRoaXMuc2FuTG9zc0NoZWNrUGFzc2VkKSB7XG4gICAgICBpZiAoIWlzTmFOKE51bWJlcih0aGlzLnNhbkxvc3NDaGVja1Bhc3NlZCkpKSB7XG4gICAgICAgIHJldHVybiBOdW1iZXIodGhpcy5zYW5Mb3NzQ2hlY2tQYXNzZWQpXG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IFJvbGwodGhpcy5zYW5Mb3NzQ2hlY2tQYXNzZWQpWyghZm91bmRyeS51dGlscy5pc05ld2VyVmVyc2lvbihnYW1lLnZlcnNpb24sICcxMicpID8gJ2V2YWx1YXRlJyA6ICdldmFsdWF0ZVN5bmMnKS8qIC8vIEZvdW5kcnlWVFQgdjExICovXSh7IG1heGltaXplOiB0cnVlIH0pLnRvdGFsXG4gICAgfVxuICAgIHJldHVybiAwXG4gIH1cblxuICBnZXQgZGFpbHlTYW5Mb3NzICgpIHtcbiAgICByZXR1cm4gdGhpcy5zeXN0ZW0uYXR0cmlicy5zYW4/LmRhaWx5TG9zcyB8fCAwXG4gIH1cblxuICBnZXQgZGFpbHlTYW5MaW1pdCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3lzdGVtLmF0dHJpYnMuc2FuPy5kYWlseUxpbWl0IHx8IDBcbiAgfVxuXG4gIGdldCByYXdTYW5NYXggKCkge1xuICAgIGlmICghdGhpcy5zeXN0ZW0uYXR0cmlicykgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGlmICh0aGlzLnN5c3RlbS5hdHRyaWJzPy5zYW4/LmF1dG8pIHtcbiAgICAgIGlmICh0aGlzLmN0aHVsaHVNeXRob3MpIHJldHVybiBNYXRoLm1heCg5OSAtIHRoaXMuY3RodWxodU15dGhvcywgMClcbiAgICAgIHJldHVybiA5OVxuICAgIH1cbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYXR0cmlicy5zYW4ubWF4KVxuICB9XG5cbiAgZ2V0IHNhbk1heCAoKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuc3lzdGVtLmF0dHJpYnMuc2FuLm1heClcbiAgfVxuXG4gIGdldCBtcCAoKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuc3lzdGVtLmF0dHJpYnMubXAudmFsdWUpXG4gIH1cblxuICBnZXQgbXBNYXggKCkge1xuICAgIGlmICh0aGlzLnN5c3RlbS5hdHRyaWJzLm1wLmF1dG8pIHtcbiAgICAgIC8vIFRPRE8gaWYgYW55IGlzIG51bGwgc2V0IG1heCBiYWNrIHRvIG51bGwuXG4gICAgICBpZiAodGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnBvdy52YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHRoaXMuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5wb3cudmFsdWUgLyA1KVxuICAgICAgfVxuICAgICAgcmV0dXJuIDBcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuc3lzdGVtLmF0dHJpYnMubXAubWF4KVxuICB9XG5cbiAgYXN5bmMgc2V0TXAgKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAwXG4gICAgaWYgKHZhbHVlID4gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYXR0cmlicy5tcC5tYXgpKSB7IHZhbHVlID0gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYXR0cmlicy5tcC5tYXgpIH1cbiAgICByZXR1cm4gYXdhaXQgdGhpcy51cGRhdGUoeyAnc3lzdGVtLmF0dHJpYnMubXAudmFsdWUnOiB2YWx1ZSB9KVxuICB9XG5cbiAgZ2V0IHNhbiAoKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuc3lzdGVtLmF0dHJpYnMuc2FuLnZhbHVlKVxuICB9XG5cbiAgZ2V0IGludCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Q2hhcmFjdGVyaXN0aWMoJ2ludCcpXG4gIH1cblxuICBnZXQgb2NjdXBhdGlvblBvaW50c1NwZW50ICgpIHtcbiAgICBsZXQgb2NjdXBhdGlvblBvaW50cyA9IDBcbiAgICBmb3IgKGNvbnN0IHNraWxsIG9mIHRoaXMuc2tpbGxzKSB7XG4gICAgICBpZiAoc2tpbGwuc3lzdGVtLmFkanVzdG1lbnRzPy5vY2N1cGF0aW9uKSB7XG4gICAgICAgIG9jY3VwYXRpb25Qb2ludHMgKz0gc2tpbGwuc3lzdGVtLmFkanVzdG1lbnRzLm9jY3VwYXRpb25cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9jY3VwYXRpb25Qb2ludHNcbiAgfVxuXG4gIGdldCBvY2N1cGF0aW9uUG9pbnRzICgpIHtcbiAgICBpZiAoIXRoaXMub2NjdXBhdGlvbikgcmV0dXJuIDBcbiAgICBsZXQgcG9pbnRzID0gMFxuICAgIGZvciAoY29uc3QgZW50cnkgb2YgT2JqZWN0LmVudHJpZXMoXG4gICAgICB0aGlzLm9jY3VwYXRpb24uc3lzdGVtLm9jY3VwYXRpb25Ta2lsbFBvaW50c1xuICAgICkpIHtcbiAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IGVudHJ5XG4gICAgICBjb25zdCBjaGFyID0gdGhpcy5nZXRDaGFyYWN0ZXJpc3RpYyhrZXkpXG4gICAgICBpZiAodmFsdWUuc2VsZWN0ZWQpIHtcbiAgICAgICAgcG9pbnRzICs9IGNoYXIudmFsdWUgKiBOdW1iZXIodmFsdWUubXVsdGlwbGllcilcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBvaW50c1xuICB9XG5cbiAgYXN5bmMgcmVzZXRPY2N1cGF0aW9uUG9pbnRzICgpIHtcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7XG4gICAgICAnc3lzdGVtLmRldmVsb3BtZW50Lm9jY3VwYXRpb24nOiB0aGlzLm9jY3VwYXRpb25Qb2ludHNcbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgcmVzZXRBcmNoZXR5cGVQb2ludHMgKCkge1xuICAgIGF3YWl0IHRoaXMudXBkYXRlKHtcbiAgICAgICdzeXN0ZW0uZGV2ZWxvcG1lbnQuYXJjaGV0eXBlJzogdGhpcy5vY2N1cGF0aW9uUG9pbnRzXG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jIHJlc2V0UGVyc29uYWxQb2ludHMgKCkge1xuICAgIGF3YWl0IHRoaXMudXBkYXRlKHtcbiAgICAgICdzeXN0ZW0uZGV2ZWxvcG1lbnQucGVyc29uYWwnOiB0aGlzLnBlcnNvbmFsUG9pbnRzXG4gICAgfSlcbiAgfVxuXG4gIGdldCBhcmNoZXR5cGVQb2ludHNTcGVudCAoKSB7XG4gICAgbGV0IGFyY2hldHlwZVBvaW50cyA9IDBcbiAgICBmb3IgKGNvbnN0IHNraWxsIG9mIHRoaXMuc2tpbGxzKSB7XG4gICAgICBpZiAoc2tpbGwuc3lzdGVtLmFkanVzdG1lbnRzPy5hcmNoZXR5cGUpIHtcbiAgICAgICAgYXJjaGV0eXBlUG9pbnRzICs9IHNraWxsLnN5c3RlbS5hZGp1c3RtZW50cy5hcmNoZXR5cGVcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFyY2hldHlwZVBvaW50c1xuICB9XG5cbiAgZ2V0IGFyY2hldHlwZVBvaW50cyAoKSB7XG4gICAgaWYgKCF0aGlzLmFyY2hldHlwZSkgcmV0dXJuIDBcbiAgICByZXR1cm4gdGhpcy5hcmNoZXR5cGUuc3lzdGVtLmJvbnVzUG9pbnRzXG4gIH1cblxuICBnZXQgZXhwZXJpZW5jZVBvaW50cyAoKSB7XG4gICAgbGV0IGV4cGVyaWVuY2VQb2ludHMgPSAwXG4gICAgZm9yIChjb25zdCBza2lsbCBvZiB0aGlzLnNraWxscykge1xuICAgICAgaWYgKHNraWxsLnN5c3RlbS5hZGp1c3RtZW50cz8uZXhwZXJpZW5jZSkge1xuICAgICAgICBleHBlcmllbmNlUG9pbnRzICs9IHNraWxsLnN5c3RlbS5hZGp1c3RtZW50cy5leHBlcmllbmNlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBleHBlcmllbmNlUG9pbnRzXG4gIH1cblxuICBnZXQgcGVyc29uYWxQb2ludHNTcGVudCAoKSB7XG4gICAgbGV0IHBlcnNvbmFsUG9pbnRzID0gMFxuICAgIGZvciAoY29uc3Qgc2tpbGwgb2YgdGhpcy5za2lsbHMpIHtcbiAgICAgIGlmIChza2lsbC5zeXN0ZW0uYWRqdXN0bWVudHM/LnBlcnNvbmFsKSB7XG4gICAgICAgIHBlcnNvbmFsUG9pbnRzICs9IHNraWxsLnN5c3RlbS5hZGp1c3RtZW50cy5wZXJzb25hbFxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGVyc29uYWxQb2ludHNcbiAgfVxuXG4gIGdldCBwZXJzb25hbFBvaW50cyAoKSB7XG4gICAgcmV0dXJuIDIgKiBOdW1iZXIodGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmludC52YWx1ZSlcbiAgfVxuXG4gIGdldCBoYXNEZXZlbG9wbWVudFBoYXNlICgpIHtcbiAgICBmb3IgKGNvbnN0IHNraWxsIG9mIHRoaXMuc2tpbGxzKSB7XG4gICAgICBpZiAoc2tpbGwuc3lzdGVtLmZsYWdzPy5kZXZlbG9wZW1lbnQpIHJldHVybiB0cnVlXG4gICAgfVxuICAgIGlmICh0aGlzLm9ubHlSdW5PbmNlUGVyU2Vzc2lvbikge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGZvciAoY29uc3Qgc2FuaXR5TG9zc0V2ZW50IG9mIHRoaXMuc3lzdGVtLnNhbml0eUxvc3NFdmVudHMpIHtcbiAgICAgIGlmICghc2FuaXR5TG9zc0V2ZW50LmltbXVuaXR5KSByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGFzeW5jIHNldFNhbiAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDBcbiAgICBpZiAodmFsdWUgPiB0aGlzLnN5c3RlbS5hdHRyaWJzLnNhbi5tYXgpIHsgdmFsdWUgPSB0aGlzLnN5c3RlbS5hdHRyaWJzLnNhbi5tYXggfVxuICAgIGNvbnN0IGxvc3MgPSBwYXJzZUludCh0aGlzLnN5c3RlbS5hdHRyaWJzLnNhbi52YWx1ZSkgLSB2YWx1ZVxuXG4gICAgaWYgKGxvc3MgPiAwKSB7XG4gICAgICBsZXQgdG90YWxMb3NzID0gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYXR0cmlicy5zYW4uZGFpbHlMb3NzKVxuICAgICAgICA/IHBhcnNlSW50KHRoaXMuc3lzdGVtLmF0dHJpYnMuc2FuLmRhaWx5TG9zcylcbiAgICAgICAgOiAwXG4gICAgICB0b3RhbExvc3MgPSB0b3RhbExvc3MgKyBsb3NzXG4gICAgICBpZiAobG9zcyA+PSA1KSBhd2FpdCB0aGlzLnNldENvbmRpdGlvbihDT0M3LnN0YXR1cy50ZW1wb0luc2FuZSlcbiAgICAgIGlmICh0b3RhbExvc3MgPj0gdGhpcy5zeXN0ZW0uYXR0cmlicy5zYW4uZGFpbHlMaW1pdCkge1xuICAgICAgICBhd2FpdCB0aGlzLnNldENvbmRpdGlvbihDT0M3LnN0YXR1cy5pbmRlZkluc2FuZSlcbiAgICAgIH1cbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlKHtcbiAgICAgICAgJ3N5c3RlbS5hdHRyaWJzLnNhbi52YWx1ZSc6IHZhbHVlLFxuICAgICAgICAnc3lzdGVtLmF0dHJpYnMuc2FuLmRhaWx5TG9zcyc6IHRvdGFsTG9zc1xuICAgICAgfSlcbiAgICB9IGVsc2UgYXdhaXQgdGhpcy51cGRhdGUoeyAnc3lzdGVtLmF0dHJpYnMuc2FuLnZhbHVlJzogdmFsdWUgfSlcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIGFzeW5jIHNldEF0dHJpYkF1dG8gKHZhbHVlLCBhdHRyaWIpIHtcbiAgICBjb25zdCB1cGRhdGVkS2V5ID0gYHN5c3RlbS5hdHRyaWJzLiR7YXR0cmlifS5hdXRvYFxuICAgIHJldHVybiBhd2FpdCB0aGlzLnVwZGF0ZSh7IFt1cGRhdGVkS2V5XTogdmFsdWUgfSlcbiAgfVxuXG4gIGFzeW5jIHRvZ2dsZUF0dHJpYkF1dG8gKGF0dHJpYikge1xuICAgIHRoaXMuc2V0QXR0cmliQXV0byghdGhpcy5zeXN0ZW0uYXR0cmlic1thdHRyaWJdLmF1dG8sIGF0dHJpYilcbiAgfVxuXG4gIHN0YXRpYyBkYkZyb21DaGFyYWN0ZXJpc3RpY3MgKGNoYXJhY3RlcmlzdGljcykge1xuICAgIGNvbnN0IHN1bSA9IChjaGFyYWN0ZXJpc3RpY3Muc3RyLnZhbHVlID8/IDApICsgKGNoYXJhY3RlcmlzdGljcy5zaXoudmFsdWUgPz8gMClcbiAgICBpZiAoc3VtIDwgNjUpIHJldHVybiAtMlxuICAgIGlmIChzdW0gPCA4NSkgcmV0dXJuIC0xXG4gICAgaWYgKHN1bSA8IDEyNSkgcmV0dXJuIDBcbiAgICBpZiAoc3VtIDwgMTY1KSByZXR1cm4gJzFENCdcbiAgICByZXR1cm4gYCR7TWF0aC5mbG9vcigoc3VtIC0gNDUpIC8gODApfUQ2YFxuICB9XG5cbiAgc3RhdGljIGJ1aWxkRnJvbUNoYXJhY3RlcmlzdGljcyAoY2hhcmFjdGVyaXN0aWNzKSB7XG4gICAgY29uc3Qgc3VtID0gKGNoYXJhY3RlcmlzdGljcy5zdHIudmFsdWUgPz8gMCkgKyAoY2hhcmFjdGVyaXN0aWNzLnNpei52YWx1ZSA/PyAwKVxuICAgIGlmIChzdW0gPCA2NSkgcmV0dXJuIC0yXG4gICAgaWYgKHN1bSA8IDg1KSByZXR1cm4gLTFcbiAgICBpZiAoc3VtIDwgMTI1KSByZXR1cm4gMFxuICAgIGlmIChzdW0gPCAxNjUpIHJldHVybiAxXG4gICAgcmV0dXJuIE1hdGguZmxvb3IoKHN1bSAtIDQ1KSAvIDgwKSArIDFcbiAgfVxuXG4gIHN0YXRpYyBocEZyb21DaGFyYWN0ZXJpc3RpY3MgKGNoYXJhY3RlcmlzdGljcywgdHlwZSkge1xuICAgIGNvbnN0IHN1bSA9IHBhcnNlSW50KGNoYXJhY3RlcmlzdGljcy5zaXoudmFsdWUgPz8gMCwgMTApICsgcGFyc2VJbnQoY2hhcmFjdGVyaXN0aWNzLmNvbi52YWx1ZSA/PyAwLCAxMClcbiAgICBjb25zdCBkaXZpc29yID0gKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3B1bHBSdWxlRG91YmxlTWF4SGVhbHRoJykgJiYgdHlwZSA9PT0gJ2NoYXJhY3RlcicgPyA1IDogMTApXG4gICAgcmV0dXJuIE1hdGguZmxvb3Ioc3VtIC8gZGl2aXNvcilcbiAgfVxuXG4gIHN0YXRpYyBtcEZyb21DaGFyYWN0ZXJpc3RpY3MgKGNoYXJhY3RlcmlzdGljcykge1xuICAgIHJldHVybiBNYXRoLmZsb29yKGNoYXJhY3RlcmlzdGljcy5wb3cudmFsdWUgLyA1KVxuICB9XG5cbiAgc3RhdGljIG1vdkZyb21DaGFyYWN0ZXJpc3RpY3MgKGNoYXJhY3RlcmlzdGljcywgdHlwZSwgYWdlKSB7XG4gICAgbGV0IE1PVlxuICAgIGlmIChjaGFyYWN0ZXJpc3RpY3MuZGV4LnZhbHVlID4gY2hhcmFjdGVyaXN0aWNzLnNpei52YWx1ZSAmJiBjaGFyYWN0ZXJpc3RpY3Muc3RyLnZhbHVlID4gY2hhcmFjdGVyaXN0aWNzLnNpei52YWx1ZSkge1xuICAgICAgTU9WID0gOSAvLyBCdWcgY29ycmVjdGlvbiBieSBBZG1pcmFsTnlhci5cbiAgICB9IGVsc2UgaWYgKGNoYXJhY3RlcmlzdGljcy5kZXgudmFsdWUgPj0gY2hhcmFjdGVyaXN0aWNzLnNpei52YWx1ZSB8fCBjaGFyYWN0ZXJpc3RpY3Muc3RyLnZhbHVlID49IGNoYXJhY3RlcmlzdGljcy5zaXoudmFsdWUpIHtcbiAgICAgIE1PViA9IDhcbiAgICB9IGVsc2Uge1xuICAgICAgTU9WID0gN1xuICAgIH1cbiAgICBpZiAodHlwZSAhPT0gJ2NyZWF0dXJlJyAmJiAhZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAncHVscFJ1bGVJZ25vcmVBZ2VQZW5hbHRpZXMnKSkge1xuICAgICAgaWYgKCFpc05hTihwYXJzZUludChhZ2UpKSkge1xuICAgICAgICBNT1YgPSBwYXJzZUludChhZ2UpID49IDQwID8gTU9WIC0gTWF0aC5mbG9vcihwYXJzZUludChhZ2UpIC8gMTApICsgMyA6IE1PVlxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgTU9WKVxuICB9XG5cbiAgZ2V0IHJhd0J1aWxkICgpIHtcbiAgICBpZiAoIXRoaXMuc3lzdGVtLmF0dHJpYnMpIHJldHVybiBudWxsXG4gICAgaWYgKCF0aGlzLnN5c3RlbS5hdHRyaWJzLmJ1aWxkKSByZXR1cm4gbnVsbFxuICAgIGlmICh0aGlzLnN5c3RlbS5hdHRyaWJzLmJ1aWxkLnZhbHVlID09PSAnYXV0bycpIHtcbiAgICAgIHRoaXMuc3lzdGVtLmF0dHJpYnMuYnVpbGQuYXV0byA9IHRydWVcbiAgICB9XG4gICAgaWYgKHRoaXMuc3lzdGVtLmF0dHJpYnMuYnVpbGQuYXV0bykge1xuICAgICAgcmV0dXJuIENvQ0FjdG9yLmJ1aWxkRnJvbUNoYXJhY3RlcmlzdGljcyh0aGlzLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3lzdGVtLmF0dHJpYnMuYnVpbGQudmFsdWVcbiAgfVxuXG4gIGdldCBidWlsZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3lzdGVtLmF0dHJpYnMuYnVpbGQudmFsdWVcbiAgfVxuXG4gIGdldCByYXdEYiAoKSB7XG4gICAgaWYgKCF0aGlzLnN5c3RlbS5hdHRyaWJzKSByZXR1cm4gbnVsbFxuICAgIGlmICghdGhpcy5zeXN0ZW0uYXR0cmlicy5kYikgcmV0dXJuIG51bGxcbiAgICBpZiAodGhpcy5zeXN0ZW0uYXR0cmlicy5kYi52YWx1ZSA9PT0gJ2F1dG8nKSB7XG4gICAgICB0aGlzLnN5c3RlbS5hdHRyaWJzLmRiLmF1dG8gPSB0cnVlXG4gICAgfVxuICAgIGlmICh0aGlzLnN5c3RlbS5hdHRyaWJzLmRiLmF1dG8pIHtcbiAgICAgIHJldHVybiBDb0NBY3Rvci5kYkZyb21DaGFyYWN0ZXJpc3RpY3ModGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzKVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zeXN0ZW0uYXR0cmlicy5kYi52YWx1ZVxuICB9XG5cbiAgZ2V0IGRiICgpIHtcbiAgICByZXR1cm4gdGhpcy5zeXN0ZW0uYXR0cmlicy5kYi52YWx1ZVxuICB9XG5cbiAgZ2V0IHJhd01vdiAoKSB7XG4gICAgaWYgKCF0aGlzLnN5c3RlbS5hdHRyaWJzKSByZXR1cm4gbnVsbFxuICAgIGlmICghdGhpcy5zeXN0ZW0uYXR0cmlicy5tb3YpIHJldHVybiBudWxsXG4gICAgaWYgKHRoaXMuc3lzdGVtLmF0dHJpYnMubW92LnZhbHVlID09PSAnYXV0bycpIHtcbiAgICAgIHRoaXMuc3lzdGVtLmF0dHJpYnMubW92LmF1dG8gPSB0cnVlXG4gICAgfVxuICAgIGlmICh0aGlzLnN5c3RlbS5hdHRyaWJzLm1vdi5hdXRvKSB7XG4gICAgICBjb25zdCBNT1YgPSBDb0NBY3Rvci5tb3ZGcm9tQ2hhcmFjdGVyaXN0aWNzKHRoaXMuc3lzdGVtLmNoYXJhY3RlcmlzdGljcywgdGhpcy5zeXN0ZW0udHlwZSwgdGhpcy5zeXN0ZW0uaW5mb3MuYWdlKVxuICAgICAgaWYgKE1PViA+IDApIHJldHVybiBNT1ZcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3lzdGVtLmF0dHJpYnMubW92LnZhbHVlXG4gIH1cblxuICBnZXQgbW92ICgpIHtcbiAgICByZXR1cm4gdGhpcy5zeXN0ZW0uYXR0cmlicy5tb3YudmFsdWVcbiAgfVxuXG4gIGdldCB0b2tlbklkICgpIHtcbiAgICAvLyBUT0RPIGNsYXJpZmllciBjYSBldCB0b2tlbmtleVxuICAgIHJldHVybiB0aGlzLnRva2VuID8gYCR7dGhpcy50b2tlbi5zY2VuZS5faWR9LiR7dGhpcy50b2tlbi5pZH1gIDogbnVsbCAvLyBSRUZBQ1RPUklORyAoMilcbiAgfVxuXG4gIGdldCBsb2NrZWQgKCkge1xuICAgIGlmICghdGhpcy5zeXN0ZW0uZmxhZ3MpIHtcbiAgICAgIHRoaXMuc3lzdGVtLmZsYWdzID0ge31cbiAgICAgIHRoaXMuc3lzdGVtLmZsYWdzLmxvY2tlZCA9IHRydWUgLy8gTG9ja2VkIGJ5IGRlZmF1bHRcbiAgICAgIHRoaXMudXBkYXRlKHsgJ3N5c3RlbS5mbGFncyc6IHt9IH0pXG4gICAgICB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uZmxhZ3MubG9ja2VkJzogZmFsc2UgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zeXN0ZW0uZmxhZ3MubG9ja2VkXG4gIH1cblxuICBnZXRJdGVtc0Zyb21OYW1lIChuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXMuZmlsdGVyKGkgPT4gaS5uYW1lID09PSBuYW1lKVxuICB9XG5cbiAgc2V0IGxvY2tlZCAodmFsdWUpIHtcbiAgICB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uZmxhZ3MubG9ja2VkJzogdmFsdWUgfSlcbiAgfVxuXG4gIGFzeW5jIHRvZ2dsZUFjdG9yRmxhZyAoZmxhZ05hbWUpIHtcbiAgICBjb25zdCBmbGFnVmFsdWUgPSAhdGhpcy5zeXN0ZW0uZmxhZ3NbZmxhZ05hbWVdXG4gICAgY29uc3QgbmFtZSA9IGBzeXN0ZW0uZmxhZ3MuJHtmbGFnTmFtZX1gXG4gICAgYXdhaXQgdGhpcy51cGRhdGUoeyBbbmFtZV06IGZsYWdWYWx1ZSB9KVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gYXR0cmlidXRlTmFtZSBrZXkgb2YgYXR0cmlidXRlIHRvIGNoZWNrIGluIFsnbGNrJ11cbiAgICogQHBhcmFtIHsqfSBmYXN0Rm9yd2FyZFxuICAgKiBAcGFyYW0geyp9IG9wdGlvbnMgZGlmZmljdWx0eSBpbiBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLCBtb2RpZmllciAoLTIgKzIpLCBuYW1lXG4gICAqL1xuICBhc3luYyBhdHRyaWJ1dGVDaGVjayAoYXR0cmlidXRlTmFtZSwgZmFzdEZvcndhcmQgPSBmYWxzZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgYXR0cmliID0gdGhpcy5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZS50b0xvd2VyQ2FzZSgpKVxuICAgIGlmICghYXR0cmliKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkVycm9yTm90Rm91bmQnLCB7XG4gICAgICAgICAgbWlzc2luZzogYXR0cmlidXRlTmFtZVxuICAgICAgICB9KVxuICAgICAgKVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBjb25zdCBjaGVjayA9IG5ldyBDb0M3Q2hlY2soKVxuXG4gICAgaWYgKG9wdGlvbnMubW9kaWZpZXIpIGNoZWNrLmRpY2VNb2RpZmllciA9IE51bWJlcihvcHRpb25zLm1vZGlmaWVyKVxuICAgIGlmIChvcHRpb25zLmRpZmZpY3VsdHkpIHtcbiAgICAgIGNoZWNrLmRpZmZpY3VsdHkgPSBDb0M3VXRpbGl0aWVzLmNvbnZlcnREaWZmaWN1bHR5KG9wdGlvbnMuZGlmZmljdWx0eSlcbiAgICB9XG5cbiAgICBpZiAoIWZhc3RGb3J3YXJkKSB7XG4gICAgICBpZiAodW5kZWZpbmVkID09PSBvcHRpb25zLmRpZmZpY3VsdHkgfHwgdW5kZWZpbmVkID09PSBvcHRpb25zLm1vZGlmaWVyKSB7XG4gICAgICAgIGNvbnN0IHVzYWdlID0gYXdhaXQgUm9sbERpYWxvZy5jcmVhdGUob3B0aW9ucylcbiAgICAgICAgaWYgKHVzYWdlKSB7XG4gICAgICAgICAgY2hlY2suZGljZU1vZGlmaWVyID0gTnVtYmVyKHVzYWdlLmdldCgnYm9udXNEaWNlJykpXG4gICAgICAgICAgY2hlY2suZGlmZmljdWx0eSA9IE51bWJlcih1c2FnZS5nZXQoJ2RpZmZpY3VsdHknKSlcbiAgICAgICAgICBjaGVjay5mbGF0RGljZU1vZGlmaWVyID0gTnVtYmVyKHVzYWdlLmdldCgnZmxhdERpY2VNb2RpZmllcicpKVxuICAgICAgICAgIGNoZWNrLmZsYXRUaHJlc2hvbGRNb2RpZmllciA9IE51bWJlcihcbiAgICAgICAgICAgIHVzYWdlLmdldCgnZmxhdFRocmVzaG9sZE1vZGlmaWVyJylcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGVjay5hY3RvciA9IHRoaXMudG9rZW5LZXlcbiAgICBpZiAob3B0aW9ucy5ibGluZCA9PT0gJ2ZhbHNlJykgY2hlY2suaXNCbGluZCA9IGZhbHNlXG4gICAgZWxzZSBjaGVjay5pc0JsaW5kID0gISFvcHRpb25zLmJsaW5kXG4gICAgYXdhaXQgY2hlY2sucm9sbEF0dHJpYnV0ZShhdHRyaWIua2V5KVxuICAgIGNoZWNrLnRvTWVzc2FnZSgpXG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHsqfSBjaGFyYWN0ZXJpc3RpY05hbWUga2V5IG9mIGNoYXJhY3RlcmlzdGljIHRvIGNoZWNrIGluIFsnc3RyJywnY29uJywnc2l6JywnZGV4JywnYXBwJywnaW50JywncG93JywnZWR1J11cbiAgICogQHBhcmFtIHsqfSBmYXN0Rm9yd2FyZFxuICAgKiBAcGFyYW0geyp9IG9wdGlvbnMgZGlmZmljdWx0eSBpbiBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLCBtb2RpZmllciAoLTIgKzIpLCBuYW1lXG4gICAqL1xuICBhc3luYyBjaGFyYWN0ZXJpc3RpY0NoZWNrIChcbiAgICBjaGFyYWN0ZXJpc3RpY05hbWUsXG4gICAgZmFzdEZvcndhcmQgPSBmYWxzZSxcbiAgICBvcHRpb25zID0ge31cbiAgKSB7XG4gICAgY29uc3QgY2hhciA9IHRoaXMuZ2V0Q2hhcmFjdGVyaXN0aWMoY2hhcmFjdGVyaXN0aWNOYW1lKVxuXG4gICAgaWYgKCFjaGFyKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkVycm9yTm90Rm91bmRGb3JBY3RvcicsIHtcbiAgICAgICAgICBtaXNzaW5nOiBjaGFyYWN0ZXJpc3RpY05hbWUsXG4gICAgICAgICAgYWN0b3I6IHRoaXMubmFtZVxuICAgICAgICB9KVxuICAgICAgKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgY2hlY2sgPSBuZXcgQ29DN0NoZWNrKClcblxuICAgIGlmIChvcHRpb25zLm1vZGlmaWVyKSBjaGVjay5kaWNlTW9kaWZpZXIgPSBOdW1iZXIob3B0aW9ucy5tb2RpZmllcilcbiAgICBpZiAob3B0aW9ucy5kaWZmaWN1bHR5KSB7XG4gICAgICBjaGVjay5kaWZmaWN1bHR5ID0gQ29DN1V0aWxpdGllcy5jb252ZXJ0RGlmZmljdWx0eShvcHRpb25zLmRpZmZpY3VsdHkpXG4gICAgfVxuXG4gICAgaWYgKCFmYXN0Rm9yd2FyZCkge1xuICAgICAgaWYgKHVuZGVmaW5lZCA9PT0gb3B0aW9ucy5kaWZmaWN1bHR5IHx8IHVuZGVmaW5lZCA9PT0gb3B0aW9ucy5tb2RpZmllcikge1xuICAgICAgICBvcHRpb25zLmRpc3BsYXlOYW1lID0gY2hhci5sYWJlbFxuICAgICAgICBjb25zdCB1c2FnZSA9IGF3YWl0IFJvbGxEaWFsb2cuY3JlYXRlKG9wdGlvbnMpXG4gICAgICAgIGlmICh1c2FnZSkge1xuICAgICAgICAgIGNoZWNrLmRpY2VNb2RpZmllciA9IE51bWJlcih1c2FnZS5nZXQoJ2JvbnVzRGljZScpKVxuICAgICAgICAgIGNoZWNrLmRpZmZpY3VsdHkgPSBOdW1iZXIodXNhZ2UuZ2V0KCdkaWZmaWN1bHR5JykpXG4gICAgICAgICAgY2hlY2suZmxhdERpY2VNb2RpZmllciA9IE51bWJlcih1c2FnZS5nZXQoJ2ZsYXREaWNlTW9kaWZpZXInKSlcbiAgICAgICAgICBjaGVjay5mbGF0VGhyZXNob2xkTW9kaWZpZXIgPSBOdW1iZXIoXG4gICAgICAgICAgICB1c2FnZS5nZXQoJ2ZsYXRUaHJlc2hvbGRNb2RpZmllcicpXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2hlY2suYWN0b3IgPSB0aGlzLnRva2VuS2V5XG4gICAgaWYgKG9wdGlvbnMuYmxpbmQgPT09ICdmYWxzZScpIGNoZWNrLmlzQmxpbmQgPSBmYWxzZVxuICAgIGVsc2UgY2hlY2suaXNCbGluZCA9ICEhb3B0aW9ucy5ibGluZFxuICAgIGF3YWl0IGNoZWNrLnJvbGxDaGFyYWN0ZXJpc3RpYyhjaGFyLmtleSlcbiAgICBjaGVjay50b01lc3NhZ2UoKVxuICB9XG5cbiAgc3RhdGljIHRvb2xUaXBTa2lsbFRleHQgKCkge1xuICAgIGlmIChcbiAgICAgIHR5cGVvZiBnYW1lLkNvQzdUb29sdGlwcy5Ub29sVGlwSG92ZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICBnYW1lLkNvQzdUb29sdGlwcy5Ub29sVGlwSG92ZXIgIT09IG51bGxcbiAgICApIHtcbiAgICAgIGNvbnN0IGlzQ29tYmF0ID0gZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyLmNsYXNzTGlzdD8uY29udGFpbnMoXG4gICAgICAgICdjb21iYXQnXG4gICAgICApXG4gICAgICBjb25zdCBza2lsbElkID0gZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyLmNsb3Nlc3QoJy5pdGVtJyk/LmRhdGFzZXQuc2tpbGxJZFxuICAgICAgY29uc3QgYWN0b3JBcHBJZCA9IGdhbWUuQ29DN1Rvb2x0aXBzLlRvb2xUaXBIb3Zlci5jbG9zZXN0KCcud2luZG93LWFwcCcpPy5kYXRhc2V0Py5hcHBpZFxuICAgICAgaWYgKHR5cGVvZiBza2lsbElkICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgYWN0b3JBcHBJZCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHVpLndpbmRvd3NbYWN0b3JBcHBJZF0/LmFjdG9yPy5pZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc3QgYWN0b3JJZCA9IHVpLndpbmRvd3NbYWN0b3JBcHBJZF0uYWN0b3IuaWRcbiAgICAgICAgY29uc3QgYWN0b3IgPSBnYW1lLmFjdG9ycy5nZXQoYWN0b3JJZClcbiAgICAgICAgaWYgKGFjdG9yKSB7XG4gICAgICAgICAgY29uc3Qgc2tpbGwgPSBhY3Rvci5pdGVtcy5nZXQoc2tpbGxJZClcbiAgICAgICAgICBpZiAoc2tpbGwpIHtcbiAgICAgICAgICAgIGxldCB0b29sVGlwID0gZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICAgICAgaXNDb21iYXQgPyAnQ29DNy5Ub29sVGlwQ29tYmF0JyA6ICdDb0M3LlRvb2xUaXBTa2lsbCcsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBza2lsbDogc2tpbGwubmFtZSxcbiAgICAgICAgICAgICAgICByZWd1bGFyOiBza2lsbC52YWx1ZSxcbiAgICAgICAgICAgICAgICBoYXJkOiBNYXRoLmZsb29yKHNraWxsLnZhbHVlIC8gMiksXG4gICAgICAgICAgICAgICAgZXh0cmVtZTogTWF0aC5mbG9vcihza2lsbC52YWx1ZSAvIDUpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgICAgICAgICB0b29sVGlwID1cbiAgICAgICAgICAgICAgICB0b29sVGlwICtcbiAgICAgICAgICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlRvb2xUaXBLZWVwZXJTa2lsbCcsIHtcbiAgICAgICAgICAgICAgICAgIG90aGVyOlxuICAgICAgICAgICAgICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdzdGFuYnlHTVJvbGxzJykgJiZcbiAgICAgICAgICAgICAgICAgICAgYWN0b3IuaGFzUGxheWVyT3duZXJcbiAgICAgICAgICAgICAgICAgICAgICA/IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuVG9vbFRpcEtlZXBlclN0YW5kYnlTa2lsbCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGFjdG9yLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgIDogJydcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRvb2xUaXBcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBhc3luYyBnZXRJdGVtT3JBZGQgKGl0ZW1JZGVudGlmaWVyLCB0eXBlID0gJ3NraWxsJykge1xuICAgIGNvbnN0IHR5cGVDb0NJRCA9IGl0ZW1JZGVudGlmaWVyLm1hdGNoKC9eaVxcLihbXlxcXFwuXSspXFwuLi8pXG4gICAgaWYgKHR5cGVDb0NJRCkge1xuICAgICAgLy8gQXR0ZW1wdCB0byBsb2FkIGZyb20gYWN0b3IgYnkgQ29DIElEXG4gICAgICBsZXQgaXRlbSA9IHRoaXMuZ2V0Rmlyc3RJdGVtQnlDb0NJRChpdGVtSWRlbnRpZmllcilcbiAgICAgIGlmICghaXRlbSkge1xuICAgICAgICBjb25zdCBuZXdJdGVtcyA9IGF3YWl0IGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5mcm9tQ29DSURCZXN0KHsgY29jaWQ6IGl0ZW1JZGVudGlmaWVyLCBzaG93TG9hZGluZzogdHJ1ZSB9KVxuICAgICAgICBpZiAobmV3SXRlbXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5jcmVhdGVFbWJlZGRlZERvY3VtZW50cygnSXRlbScsIG5ld0l0ZW1zKVxuICAgICAgICAgIGl0ZW0gPSB0aGlzLmdldEZpcnN0SXRlbUJ5Q29DSUQoaXRlbUlkZW50aWZpZXIpXG4gICAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdza2lsbCcpIHtcbiAgICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuSW5mb1NraWxsQWRkZWRBdEJhc2UnLCB7XG4gICAgICAgICAgICAgICAgbmFtZTogaXRlbS5uYW1lLFxuICAgICAgICAgICAgICAgIHBlcmNlbnQ6IGl0ZW0udmFsdWVcbiAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ3dlYXBvbicpIHtcbiAgICAgICAgICAgICAgYXdhaXQgaXRlbS5yZWxvYWQoKVxuICAgICAgICAgICAgICBjb25zdCB1cGRhdGVzID0ge31cbiAgICAgICAgICAgICAgaWYgKGl0ZW0uc3lzdGVtLnNraWxsLm1haW4uaWQgPT09ICcnICYmIGl0ZW0uc3lzdGVtLnNraWxsLm1haW4ubmFtZSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBza2lsbCA9IGF3YWl0IHRoaXMuZ2V0SXRlbU9yQWRkKGl0ZW0uc3lzdGVtLnNraWxsLm1haW4ubmFtZSwgJ3NraWxsJylcbiAgICAgICAgICAgICAgICBpZiAoc2tpbGwubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICB1cGRhdGVzWydzeXN0ZW0uc2tpbGwubWFpbi5pZCddID0gc2tpbGxbMF0uaWRcbiAgICAgICAgICAgICAgICAgIHVwZGF0ZXNbJ3N5c3RlbS5za2lsbC5tYWluLm5hbWUnXSA9IHNraWxsWzBdLm5hbWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGl0ZW0uc3lzdGVtLnNraWxsLmFsdGVybmF0aXYuaWQgPT09ICcnICYmIGl0ZW0uc3lzdGVtLnNraWxsLmFsdGVybmF0aXYubmFtZSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBza2lsbCA9IGF3YWl0IHRoaXMuZ2V0SXRlbU9yQWRkKGl0ZW0uc3lzdGVtLnNraWxsLmFsdGVybmF0aXYubmFtZSwgJ3NraWxsJylcbiAgICAgICAgICAgICAgICBpZiAoc2tpbGwubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICB1cGRhdGVzWydzeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5pZCddID0gc2tpbGxbMF0uaWRcbiAgICAgICAgICAgICAgICAgIHVwZGF0ZXNbJ3N5c3RlbS5za2lsbC5hbHRlcm5hdGl2Lm5hbWUnXSA9IHNraWxsWzBdLm5hbWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHVwZGF0ZXMpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGl0ZW0udXBkYXRlKHVwZGF0ZXMpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBbaXRlbV1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQXR0ZW1wdCB0byBsb2FkIGZvciBhY3RvciBieSBuYW1lXG4gICAgbGV0IG15SXRlbXMgPSB0aGlzLmdldFNraWxsc0J5TmFtZShpdGVtSWRlbnRpZmllcilcbiAgICBpZiAoIW15SXRlbXMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBlcmEgPSBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICd3b3JsZEVyYScpXG4gICAgICAvLyBBdHRlbXB0IHRvIGxvYWQgaXRlbSBmcm9tIHdvcmxkXG4gICAgICBjb25zdCBuZXdJdGVtID0gZ2FtZS5pdGVtcy5maW5kKChkKSA9PiB7XG4gICAgICAgIGlmIChkLnR5cGUgPT09IHR5cGUgJiYgZC5uYW1lID09PSBpdGVtSWRlbnRpZmllcikge1xuICAgICAgICAgIGNvbnN0IGVyYXMgPSBuZXdJdGVtLmZsYWdzPy5Db0M3Py5jb2NpZEZsYWc/LmVyYXNcbiAgICAgICAgICBpZiAoZXJhcyAmJiBPYmplY3Qua2V5cyhlcmFzKS5sZW5ndGggPiAwICYmICEoZXJhc1tlcmFdID8/IGZhbHNlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfSlcbiAgICAgIGlmIChuZXdJdGVtKSB7XG4gICAgICAgIG15SXRlbXMucHVzaChuZXdJdGVtKVxuICAgICAgfVxuICAgICAgaWYgKG15SXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIEF0dGVtcHQgdG8gbG9hZCBpdGVtIGZyb20gY29tcGVuZGl1bXNcbiAgICAgICAgZm9yIChjb25zdCBwYWNrIG9mIGdhbWUucGFja3MpIHtcbiAgICAgICAgICBpZiAocGFjay5tZXRhZGF0YT8udHlwZSA9PT0gJ0l0ZW0nKSB7XG4gICAgICAgICAgICBhd2FpdCBwYWNrLmdldERvY3VtZW50cygpXG4gICAgICAgICAgICBjb25zdCBuZXdJdGVtID0gZ2FtZS5pdGVtcy5maW5kKChkKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChkLnR5cGUgPT09IHR5cGUgJiYgZC5uYW1lID09PSBpdGVtSWRlbnRpZmllcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVyYXMgPSBuZXdJdGVtLmZsYWdzPy5Db0M3Py5jb2NpZEZsYWc/LmVyYXNcbiAgICAgICAgICAgICAgICBpZiAoZXJhcyAmJiBPYmplY3Qua2V5cyhlcmFzKS5sZW5ndGggPiAwICYmICEoZXJhc1tlcmFdID8/IGZhbHNlKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGlmIChuZXdJdGVtKSB7XG4gICAgICAgICAgICAgIG15SXRlbXMucHVzaChuZXdJdGVtKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG15SXRlbXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBteUl0ZW1zKVxuICAgICAgICBteUl0ZW1zID0gdGhpcy5nZXRTa2lsbHNCeU5hbWUoaXRlbUlkZW50aWZpZXIpXG4gICAgICAgIGlmIChteUl0ZW1zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIGlmIChteUl0ZW1zWzBdLnR5cGUgPT09ICdza2lsbCcpIHtcbiAgICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyhnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkluZm9Ta2lsbEFkZGVkQXRCYXNlJywge1xuICAgICAgICAgICAgICBuYW1lOiBteUl0ZW1zWzBdLm5hbWUsXG4gICAgICAgICAgICAgIHBlcmNlbnQ6IG15SXRlbXNbMF0udmFsdWVcbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgIH0gZWxzZSBpZiAobXlJdGVtc1swXS50eXBlID09PSAnd2VhcG9uJykge1xuICAgICAgICAgICAgYXdhaXQgbXlJdGVtc1swXS5yZWxvYWQoKVxuICAgICAgICAgICAgY29uc3QgdXBkYXRlcyA9IHt9XG4gICAgICAgICAgICBpZiAobXlJdGVtc1swXS5zeXN0ZW0uc2tpbGwubWFpbi5pZCA9PT0gJycgJiYgbXlJdGVtc1swXS5zeXN0ZW0uc2tpbGwubWFpbi5uYW1lICE9PSAnJykge1xuICAgICAgICAgICAgICBjb25zdCBza2lsbCA9IGF3YWl0IHRoaXMuZ2V0SXRlbU9yQWRkKG15SXRlbXNbMF0uc3lzdGVtLnNraWxsLm1haW4ubmFtZSwgJ3NraWxsJylcbiAgICAgICAgICAgICAgaWYgKHNraWxsLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZXNbJ3N5c3RlbS5za2lsbC5tYWluLmlkJ10gPSBza2lsbFswXS5pZFxuICAgICAgICAgICAgICAgIHVwZGF0ZXNbJ3N5c3RlbS5za2lsbC5tYWluLm5hbWUnXSA9IHNraWxsWzBdLm5hbWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG15SXRlbXNbMF0uc3lzdGVtLnNraWxsLmFsdGVybmF0aXYuaWQgPT09ICcnICYmIG15SXRlbXNbMF0uc3lzdGVtLnNraWxsLmFsdGVybmF0aXYubmFtZSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgY29uc3Qgc2tpbGwgPSBhd2FpdCB0aGlzLmdldEl0ZW1PckFkZChteUl0ZW1zWzBdLnN5c3RlbS5za2lsbC5hbHRlcm5hdGl2Lm5hbWUsICdza2lsbCcpXG4gICAgICAgICAgICAgIGlmIChza2lsbC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVzWydzeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5pZCddID0gc2tpbGxbMF0uaWRcbiAgICAgICAgICAgICAgICB1cGRhdGVzWydzeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5uYW1lJ10gPSBza2lsbFswXS5uYW1lXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyh1cGRhdGVzKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgYXdhaXQgbXlJdGVtc1swXS51cGRhdGUodXBkYXRlcylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG15SXRlbXNcbiAgfVxuXG4gIGFzeW5jIHNraWxsQ2hlY2sgKHNraWxsRGF0YSwgZmFzdEZvcndhcmQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHNraWxsSWRlbnRpZmllciA9IHNraWxsRGF0YS5uYW1lID8gc2tpbGxEYXRhLm5hbWUgOiBza2lsbERhdGFcbiAgICBsZXQgc2tpbGwgPSBhd2FpdCB0aGlzLmdldEl0ZW1PckFkZChza2lsbElkZW50aWZpZXIsICdza2lsbCcpXG4gICAgaWYgKHNraWxsLmxlbmd0aCkge1xuICAgICAgb3B0aW9ucy5uYW1lID0gc2tpbGxbMF0ubmFtZVxuICAgIH1cbiAgICBpZiAoIXNraWxsLmxlbmd0aCkge1xuICAgICAgbGV0IGl0ZW0gPSBudWxsXG4gICAgICBpZiAoc2tpbGxEYXRhLnBhY2spIHtcbiAgICAgICAgY29uc3QgcGFjayA9IGdhbWUucGFja3MuZ2V0KHNraWxsRGF0YS5wYWNrKVxuICAgICAgICBpZiAocGFjay5tZXRhZGF0YS5lbnRpdHkgIT09ICdJdGVtJykgcmV0dXJuXG4gICAgICAgIGl0ZW0gPSBhd2FpdCBwYWNrLmdldERvY3VtZW50KHNraWxsRGF0YS5pZClcbiAgICAgIH0gZWxzZSBpZiAoc2tpbGxEYXRhLmlkKSB7XG4gICAgICAgIGl0ZW0gPSBnYW1lLml0ZW1zLmdldChza2lsbERhdGEuaWQpXG4gICAgICB9XG5cbiAgICAgIC8vIE5vIHNraWxsIGZvdW5kLCB0cnkgdG8gZ2V0IGdldCBpdCBmcm9tIGNvbXBlbmRpdW0gIVxuICAgICAgaWYgKCFpdGVtKSB7XG4gICAgICAgIC8vIFRPRE86IEltcGxlbWVudCByZXRyaWV2YWwgb2Ygc2tpbGwgZnJvbSBjb21wZW5kaXVtICEhXG4gICAgICAgIC8vIGdhbWUuc2V0dGluZ3MuZ2V0KCAnQ29DNycsICdEZWZhdWx0Q29tcGVuZGl1bScpO1xuICAgICAgICBjb25zdCBjaGVjayA9IG5ldyBDb0M3Q2hlY2soKVxuICAgICAgICBjaGVjay5fcmF3VmFsdWUgPSAnPydcbiAgICAgICAgYXdhaXQgY2hlY2sucm9sbCgpXG4gICAgICAgIGNoZWNrLnRvTWVzc2FnZSgpXG4gICAgICB9XG4gICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIHVpLm5vdGlmaWNhdGlvbnMud2FybihcbiAgICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lk5vU2tpbGwnKSArICcgJyArXG4gICAgICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkVycm9yTm90Rm91bmRGb3JBY3RvcicsIHtcbiAgICAgICAgICAgICAgbWlzc2luZzogc2tpbGxJZGVudGlmaWVyLFxuICAgICAgICAgICAgICBhY3RvcjogdGhpcy5uYW1lXG4gICAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIGxldCBjcmVhdGUgPSBmYWxzZVxuICAgICAgYXdhaXQgRGlhbG9nLmNvbmZpcm0oe1xuICAgICAgICB0aXRsZTogYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkFkZFdlYXBvbicpfWAsXG4gICAgICAgIGNvbnRlbnQ6IGA8cD4ke2dhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuQWRkV2VhcG9udEhpbnQnLCB7XG4gICAgICAgICAgd2VhcG9uOiBza2lsbERhdGEubmFtZSxcbiAgICAgICAgICBhY3RvcjogdGhpcy5uYW1lXG4gICAgICAgIH0pfTwvcD5gLFxuICAgICAgICB5ZXM6ICgpID0+IHtcbiAgICAgICAgICBjcmVhdGUgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIGlmIChjcmVhdGUgPT09IHRydWUpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5jcmVhdGVFbWJlZGRlZERvY3VtZW50cygnSXRlbScsIFtmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShpdGVtKV0pXG4gICAgICB9IGVsc2UgcmV0dXJuXG5cbiAgICAgIHNraWxsID0gdGhpcy5nZXRTa2lsbHNCeU5hbWUoaXRlbS5uYW1lKVxuXG4gICAgICBpZiAoIXNraWxsLmxlbmd0aCkgcmV0dXJuXG5cbiAgICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgICBjb25zdCBza2lsbFZhbHVlID0gYXdhaXQgU2tpbGxWYWx1ZURpYWxvZy5jcmVhdGUoXG4gICAgICAgICAgc2tpbGxbMF0ubmFtZSxcbiAgICAgICAgICBza2lsbFswXS5iYXNlXG4gICAgICAgIClcbiAgICAgICAgY29uc3QgdmFsdWUgPSBOdW1iZXIoc2tpbGxWYWx1ZS5nZXQoJ2Jhc2UtdmFsdWUnKSlcbiAgICAgICAgYXdhaXQgc2tpbGxbMF0udXBkYXRlVmFsdWUodmFsdWUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY2hlY2sgPSBuZXcgQ29DN0NoZWNrKClcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5tb2RpZmllciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNoZWNrLmRpY2VNb2RpZmllciA9IE51bWJlcihvcHRpb25zLm1vZGlmaWVyKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGlmZmljdWx0eSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNoZWNrLmRpZmZpY3VsdHkgPSBDb0M3VXRpbGl0aWVzLmNvbnZlcnREaWZmaWN1bHR5KG9wdGlvbnMuZGlmZmljdWx0eSlcbiAgICB9XG5cbiAgICBpZiAoIWZhc3RGb3J3YXJkKSB7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGlmZmljdWx0eSA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIG9wdGlvbnMubW9kaWZpZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnN0IHVzYWdlID0gYXdhaXQgUm9sbERpYWxvZy5jcmVhdGUob3B0aW9ucylcbiAgICAgICAgaWYgKHVzYWdlKSB7XG4gICAgICAgICAgY2hlY2suZGljZU1vZGlmaWVyID0gTnVtYmVyKHVzYWdlLmdldCgnYm9udXNEaWNlJykpXG4gICAgICAgICAgY2hlY2suZGlmZmljdWx0eSA9IE51bWJlcih1c2FnZS5nZXQoJ2RpZmZpY3VsdHknKSlcbiAgICAgICAgICBjaGVjay5mbGF0RGljZU1vZGlmaWVyID0gTnVtYmVyKHVzYWdlLmdldCgnZmxhdERpY2VNb2RpZmllcicpKVxuICAgICAgICAgIGNoZWNrLmZsYXRUaHJlc2hvbGRNb2RpZmllciA9IE51bWJlcihcbiAgICAgICAgICAgIHVzYWdlLmdldCgnZmxhdFRocmVzaG9sZE1vZGlmaWVyJylcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGVjay5hY3RvciA9IHRoaXMudG9rZW5LZXlcbiAgICBjaGVjay5za2lsbCA9IHNraWxsWzBdLmlkXG4gICAgaWYgKG9wdGlvbnMuYmxpbmQgPT09ICdmYWxzZScpIGNoZWNrLmlzQmxpbmQgPSBmYWxzZVxuICAgIGVsc2UgY2hlY2suaXNCbGluZCA9ICEhb3B0aW9ucy5ibGluZFxuICAgIGlmIChvcHRpb25zLnB1c2hpbmcgPT09ICdmYWxzZScpIGNoZWNrLnB1c2hpbmcgPSBmYWxzZVxuICAgIGVsc2UgY2hlY2sucHVzaGluZyA9ICEhb3B0aW9ucy5wdXNoaW5nXG4gICAgYXdhaXQgY2hlY2sucm9sbCgpXG4gICAgY2hlY2sudG9NZXNzYWdlKGNoZWNrLnB1c2hpbmcpXG4gIH1cblxuICBhc3luYyB3ZWFwb25DaGVjayAod2VhcG9uRGF0YSwgZmFzdEZvcndhcmQgPSBmYWxzZSkge1xuICAgIGxldCB3ZWFwb25cbiAgICBpZiAodHlwZW9mIHdlYXBvbkRhdGEudXVpZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHdlYXBvbiA9IGF3YWl0IGZyb21VdWlkKHdlYXBvbkRhdGEudXVpZClcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB3ZWFwb25EYXRhLmlkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgd2VhcG9uID0gdGhpcy5pdGVtcy5nZXQod2VhcG9uRGF0YS5pZClcbiAgICB9XG4gICAgaWYgKCF3ZWFwb24pIHtcbiAgICAgIGxldCB3ZWFwb25zID0gdGhpcy5nZXRJdGVtc0Zyb21OYW1lKHdlYXBvbkRhdGEubmFtZSlcbiAgICAgIGlmICh3ZWFwb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBpZiAoZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgICAgICBsZXQgaXRlbSA9IG51bGxcbiAgICAgICAgICBjb25zdCBwYWNrID0gd2VhcG9uRGF0YS5wYWNrID8gZ2FtZS5wYWNrcy5nZXQod2VhcG9uRGF0YS5wYWNrKSA6IG51bGxcbiAgICAgICAgICBpZiAocGFjaykge1xuICAgICAgICAgICAgaWYgKHBhY2subWV0YWRhdGEuZW50aXR5ICE9PSAnSXRlbScpIHJldHVyblxuICAgICAgICAgICAgaXRlbSA9IGF3YWl0IHBhY2suZ2V0RG9jdW1lbnQod2VhcG9uRGF0YS5pZClcbiAgICAgICAgICB9IGVsc2UgaWYgKHdlYXBvbkRhdGEuaWQpIHtcbiAgICAgICAgICAgIGl0ZW0gPSBnYW1lLml0ZW1zLmdldCh3ZWFwb25EYXRhLmlkKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIHVpLm5vdGlmaWNhdGlvbnMud2FybihcbiAgICAgICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lldhcm5NYWNyb05vSXRlbUZvdW5kJylcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsZXQgY3JlYXRlID0gZmFsc2VcbiAgICAgICAgICBhd2FpdCBEaWFsb2cuY29uZmlybSh7XG4gICAgICAgICAgICB0aXRsZTogYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkFkZFdlYXBvbicpfWAsXG4gICAgICAgICAgICBjb250ZW50OiBgPHA+JHtnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkFkZFdlYXBvbnRIaW50Jywge1xuICAgICAgICAgICAgICB3ZWFwb246IHdlYXBvbkRhdGEubmFtZSxcbiAgICAgICAgICAgICAgYWN0b3I6IHRoaXMubmFtZVxuICAgICAgICAgICAgfSl9PC9wPmAsXG4gICAgICAgICAgICB5ZXM6ICgpID0+IHtcbiAgICAgICAgICAgICAgY3JlYXRlID0gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgY29uc3QgYWN0b3IgPVxuICAgICAgICAgICAgdHlwZW9mIHRoaXMucGFyZW50Py5hY3RvciAhPT0gJ3VuZGVmaW5lZCcgPyB0aGlzLnBhcmVudC5hY3RvciA6IHRoaXNcblxuICAgICAgICAgIGlmIChjcmVhdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGF3YWl0IGFjdG9yLmNyZWF0ZUVtYmVkZGVkRG9jdW1lbnRzKCdJdGVtJywgW2l0ZW0udG9KU09OKCldKVxuICAgICAgICAgIH0gZWxzZSByZXR1cm5cbiAgICAgICAgICB3ZWFwb25zID0gYWN0b3IuZ2V0SXRlbXNGcm9tTmFtZShpdGVtLm5hbWUpXG4gICAgICAgICAgaWYgKCF3ZWFwb25zLmxlbmd0aCkgcmV0dXJuXG4gICAgICAgICAgYXdhaXQgd2VhcG9uc1swXS5yZWxvYWQoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihcbiAgICAgICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRXJyb3JBY3Rvckhhc05vV2VhcG9uTmFtZWQnLCB7XG4gICAgICAgICAgICAgIGFjdG9yTmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgICB3ZWFwb25OYW1lOiB3ZWFwb25EYXRhLm5hbWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHdlYXBvbnMubGVuZ3RoID4gMSkge1xuICAgICAgICB1aS5ub3RpZmljYXRpb25zLndhcm4oXG4gICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FcnJvckFjdG9ySGFzVG9vTWFueVdlYXBvbnNOYW1lZCcsIHtcbiAgICAgICAgICAgIGFjdG9yTmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgd2VhcG9uTmFtZTogd2VhcG9uRGF0YS5uYW1lXG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgd2VhcG9uID0gd2VhcG9uc1swXVxuICAgIH1cblxuICAgIGlmICghd2VhcG9uLnN5c3RlbS5wcm9wZXJ0aWVzLnJuZ2QpIHtcbiAgICAgIGlmIChnYW1lLnVzZXIudGFyZ2V0cy5zaXplID4gMSkge1xuICAgICAgICB1aS5ub3RpZmljYXRpb25zLndhcm4oZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lldhcm5Ub29NYW55VGFyZ2V0JykpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNhcmQgPSBuZXcgQ29DN01lbGVlSW5pdGlhdG9yKHRoaXMudG9rZW5LZXksICh3ZWFwb25EYXRhLnV1aWQgfHwgd2VhcG9uLmlkKSwgZmFzdEZvcndhcmQpXG4gICAgICBjYXJkLmNyZWF0ZUNoYXRDYXJkKClcbiAgICB9XG4gICAgaWYgKHdlYXBvbi5zeXN0ZW0ucHJvcGVydGllcy5ybmdkKSB7XG4gICAgICBjb25zdCBjYXJkID0gbmV3IENvQzdSYW5nZUluaXRpYXRvcih0aGlzLnRva2VuS2V5LCAod2VhcG9uRGF0YS51dWlkIHx8IHdlYXBvbi5pZCksIGZhc3RGb3J3YXJkKVxuICAgICAgY2FyZC5jcmVhdGVDaGF0Q2FyZCgpXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcm9sbEluaXRpYXRpdmUgKGhhc0d1biA9IGZhbHNlKSB7XG4gICAgc3dpdGNoIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdpbml0aWF0aXZlUnVsZScpKSB7XG4gICAgICBjYXNlICdvcHRpb25hbCc6IHtcbiAgICAgICAgY29uc3Qgcm9sbCA9IG5ldyBDb0M3Q2hlY2sodGhpcy5hY3RvcktleSlcbiAgICAgICAgcm9sbC5kZW55UHVzaCA9IHRydWVcbiAgICAgICAgcm9sbC5kZW55THVjayA9IHRydWVcbiAgICAgICAgcm9sbC5kZW55QmxpbmRUYW1wZXJpbmcgPSB0cnVlXG4gICAgICAgIHJvbGwuaGlkZURpY2UgPSBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdkaXNwbGF5SW5pdERpY2VzJykgPT09IGZhbHNlXG4gICAgICAgIHJvbGwuZmxhdm9yID0gJ0luaXRpYXRpdmUgcm9sbCdcbiAgICAgICAgYXdhaXQgcm9sbC5yb2xsQ2hhcmFjdGVyaXN0aWMoJ2RleCcsIGhhc0d1biA/IDEgOiAwKVxuICAgICAgICByb2xsLnRvTWVzc2FnZSgpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgcm9sbC5zdWNjZXNzTGV2ZWwgKyB0aGlzLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MuZGV4LnZhbHVlIC8gMTAwXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGhhc0d1blxuICAgICAgICAgID8gdGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLmRleC52YWx1ZSArIDUwXG4gICAgICAgICAgOiB0aGlzLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MuZGV4LnZhbHVlXG4gICAgfVxuICB9XG5cbiAgZ2V0QWN0b3JGbGFnIChmbGFnTmFtZSkge1xuICAgIGlmICghdGhpcy5zeXN0ZW0uZmxhZ3MpIHtcbiAgICAgIHRoaXMuc3lzdGVtLmZsYWdzID0ge31cbiAgICAgIHRoaXMuc3lzdGVtLmZsYWdzLmxvY2tlZCA9IHRydWVcbiAgICAgIHRoaXMudXBkYXRlKHsgJ3N5c3RlbS5mbGFncyc6IHt9IH0pXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuc3lzdGVtLmZsYWdzW2ZsYWdOYW1lXSkgcmV0dXJuIGZhbHNlXG4gICAgcmV0dXJuIHRoaXMuc3lzdGVtLmZsYWdzW2ZsYWdOYW1lXVxuICB9XG5cbiAgYXN5bmMgc2V0QWN0b3JGbGFnIChmbGFnTmFtZSkge1xuICAgIGF3YWl0IHRoaXMudXBkYXRlKHsgW2BzeXN0ZW0uZmxhZ3MuJHtmbGFnTmFtZX1gXTogdHJ1ZSB9KVxuICB9XG5cbiAgYXN5bmMgdW5zZXRBY3RvckZsYWcgKGZsYWdOYW1lKSB7XG4gICAgYXdhaXQgdGhpcy51cGRhdGUoeyBbYHN5c3RlbS5mbGFncy4ke2ZsYWdOYW1lfWBdOiBmYWxzZSB9KVxuICB9XG5cbiAgZ2V0V2VhcG9uU2tpbGxzIChpdGVtSWQpIHtcbiAgICBsZXQgd2VhcG9uID0gZnJvbVV1aWRTeW5jKGl0ZW1JZClcbiAgICBpZiAoIXdlYXBvbikge1xuICAgICAgd2VhcG9uID0gdGhpcy5pdGVtcy5nZXQoaXRlbUlkKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHdlYXBvbi5zeXN0ZW0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB3ZWFwb24gPSBnYW1lLnBhY2tzLmdldCh3ZWFwb24ucGFjaykuZ2V0KHdlYXBvbi5faWQpXG4gICAgfVxuICAgIGlmICh3ZWFwb24udHlwZSAhPT0gJ3dlYXBvbicpIHJldHVybiBudWxsXG4gICAgY29uc3Qgc2tpbGxzID0gW11cbiAgICBpZiAod2VhcG9uLnN5c3RlbS5za2lsbC5tYWluLmlkKSB7XG4gICAgICBza2lsbHMucHVzaCh0aGlzLml0ZW1zLmdldCh3ZWFwb24uc3lzdGVtLnNraWxsLm1haW4uaWQpKVxuICAgIH1cblxuICAgIGlmICh3ZWFwb24udXNlc0FsdGVybmF0aXZlU2tpbGwgJiYgd2VhcG9uLnN5c3RlbS5za2lsbC5hbHRlcm5hdGl2LmlkKSB7XG4gICAgICBza2lsbHMucHVzaCh0aGlzLml0ZW1zLmdldCh3ZWFwb24uc3lzdGVtLnNraWxsLmFsdGVybmF0aXYuaWQpKVxuICAgIH1cbiAgICByZXR1cm4gc2tpbGxzXG4gIH1cblxuICAvKiogVHJ5IHRvIGZpbmQgYSBjaGFyYWN0ZXJpc3RpYywgYXR0cmlidXRlIG9yIHNraWxsIHRoYXQgbWF0Y2hlcyB0aGUgbmFtZSAqL1xuICBmaW5kIChuYW1lKSB7XG4gICAgaWYgKCFuYW1lKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgLy8gVHJ5IElEXG4gICAgY29uc3QgaXRlbSA9IHRoaXMuaXRlbXMuZ2V0KG5hbWUpXG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdpdGVtJyxcbiAgICAgICAgdmFsdWU6IGl0ZW1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByZWdFeHAgPSAvXFwoKFteKV0rKVxcKS9cbiAgICBjb25zdCBtYXRjaGVzID0gcmVnRXhwLmV4ZWMobmFtZSlcbiAgICBsZXQgc2hvcnROYW1lID0gbnVsbFxuICAgIGlmIChtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoKSBzaG9ydE5hbWUgPSBtYXRjaGVzWzFdXG4gICAgLy8gVHJ5IHRvIGZpbmQgYSBza2lsbCB3aXRoIGV4YWN0IG5hbWUuXG4gICAgY29uc3Qgc2tpbGwgPSB0aGlzLnNraWxscy5maWx0ZXIocyA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAhIXMubmFtZSAmJlxuICAgICAgICAocy5uYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzL2csICcnKSA9PT1cbiAgICAgICAgICBuYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzL2csICcnKSB8fFxuICAgICAgICAgIHMubmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccy9nLCAnJykgPT09XG4gICAgICAgICAgICBuYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzL2csICcnKSB8fFxuICAgICAgICAgIHMubmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccy9nLCAnJykgPT09XG4gICAgICAgICAgICBzaG9ydE5hbWU/LnRvTG9jYWxlTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzL2csICcnKSlcbiAgICAgIClcbiAgICB9KVxuICAgIGlmIChza2lsbC5sZW5ndGgpIHJldHVybiB7IHR5cGU6ICdpdGVtJywgdmFsdWU6IHNraWxsWzBdIH1cblxuICAgIC8vIFRyeSB0byBmaW5kIGEgY2hhcmFjdGVyaXN0aWMuXG4gICAgY29uc3QgY2hhcktleSA9IFsnc3RyJywgJ2NvbicsICdzaXonLCAnZGV4JywgJ2FwcCcsICdpbnQnLCAncG93JywgJ2VkdSddXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFyS2V5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjaGFyID0gdGhpcy5nZXRDaGFyYWN0ZXJpc3RpYyhjaGFyS2V5W2ldKVxuICAgICAgaWYgKGNoYXIpIHtcbiAgICAgICAgY2hhci5uYW1lID0gY2hhci5sYWJlbFxuICAgICAgICBpZiAoXG4gICAgICAgICAgY2hhci5rZXk/LnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgIGNoYXIua2V5Py50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBzaG9ydE5hbWU/LnRvTG93ZXJDYXNlKClcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIHsgdHlwZTogJ2NoYXJhY3RlcmlzdGljJywgdmFsdWU6IGNoYXIgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICBjaGFyLnNob3J0TmFtZT8udG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpIHx8XG4gICAgICAgICAgY2hhci5zaG9ydE5hbWU/LnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IHNob3J0TmFtZT8udG9Mb3dlckNhc2UoKVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4geyB0eXBlOiAnY2hhcmFjdGVyaXN0aWMnLCB2YWx1ZTogY2hhciB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGNoYXIubGFiZWw/LnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgIGNoYXIubGFiZWw/LnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IHNob3J0TmFtZT8udG9Mb3dlckNhc2UoKVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4geyB0eXBlOiAnY2hhcmFjdGVyaXN0aWMnLCB2YWx1ZTogY2hhciB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUcnkgdG8gZmluZCBhIGF0dHJpYnV0ZS5cbiAgICBjb25zdCBhdHRyaWJLZXkgPSBbJ2xjaycsICdzYW4nXVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0cmliS2V5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBhdHRyID0gdGhpcy5nZXRBdHRyaWJ1dGUoYXR0cmliS2V5W2ldKVxuICAgICAgaWYgKGF0dHIpIHtcbiAgICAgICAgYXR0ci5uYW1lID0gYXR0ci5sYWJlbFxuICAgICAgICBpZiAoXG4gICAgICAgICAgYXR0ci5rZXk/LnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgIGF0dHIua2V5Py50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBzaG9ydE5hbWU/LnRvTG93ZXJDYXNlKClcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIHsgdHlwZTogJ2F0dHJpYnV0ZScsIHZhbHVlOiBhdHRyIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgYXR0ci5zaG9ydE5hbWU/LnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgIGF0dHIuc2hvcnROYW1lPy50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBzaG9ydE5hbWU/LnRvTG93ZXJDYXNlKClcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIHsgdHlwZTogJ2F0dHJpYnV0ZScsIHZhbHVlOiBhdHRyIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgYXR0ci5sYWJlbD8udG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpIHx8XG4gICAgICAgICAgYXR0ci5sYWJlbD8udG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gc2hvcnROYW1lPy50b0xvd2VyQ2FzZSgpXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiB7IHR5cGU6ICdhdHRyaWJ1dGUnLCB2YWx1ZTogYXR0ciB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUcnkgd2l0aCBwYXJ0aWFsID8/XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgZ2V0IHBpbG90U2tpbGxzICgpIHtcbiAgICByZXR1cm4gdGhpcy5za2lsbHMuZmlsdGVyKHMgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgcy5zeXN0ZW0ucHJvcGVydGllcz8uc3BlY2lhbCAmJlxuICAgICAgICBzLnN5c3RlbS5zcGVjaWFsaXphdGlvbj8udG9Mb2NhbGVMb3dlckNhc2UoKSA9PT1cbiAgICAgICAgICBnYW1lLmkxOG5cbiAgICAgICAgICAgIC5sb2NhbGl6ZSgnQ29DNy5QaWxvdFNwZWNpYWxpemF0aW9uTmFtZScpXG4gICAgICAgICAgICA/LnRvTG9jYWxlTG93ZXJDYXNlKClcbiAgICAgIClcbiAgICB9KVxuICB9XG5cbiAgZ2V0IGRyaXZlU2tpbGxzICgpIHtcbiAgICByZXR1cm4gdGhpcy5za2lsbHMuZmlsdGVyKHMgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgcy5zeXN0ZW0ucHJvcGVydGllcz8uc3BlY2lhbCAmJlxuICAgICAgICBzLnN5c3RlbS5zcGVjaWFsaXphdGlvbj8udG9Mb2NhbGVMb3dlckNhc2UoKSA9PT1cbiAgICAgICAgICBnYW1lLmkxOG5cbiAgICAgICAgICAgIC5sb2NhbGl6ZSgnQ29DNy5Ecml2ZVNwZWNpYWxpemF0aW9uTmFtZScpXG4gICAgICAgICAgICA/LnRvTG9jYWxlTG93ZXJDYXNlKClcbiAgICAgIClcbiAgICB9KVxuICB9XG5cbiAgZ2V0IHRva2VuVXVpZCAoKSB7XG4gICAgaWYgKHRoaXMuc2hlZXQudG9rZW4pIHtcbiAgICAgIHJldHVybiB0aGlzLnNoZWV0LnRva2VuLnV1aWRcbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGdldCB0b2tlbktleSAoKSB7XG4gICAgLy8gQ2xhcmlmaWVyIGNhIGV0IHRva2VuaWRcbiAgICAvKiogKiBNT0RJRiAwLjgueCAqL1xuICAgIC8vIGlmIHRoaXMuc2hlZXQudG9rZW4gPT4gd2FzIG9wZW5lZCBmcm9tIHRva2VuXG4gICAgLy8gaWYgdGhpcy50b2tlbiA9PiBzeW50aGV0aWMgYWN0b3IgPT0gdGhpcy5pc1Rva2VuXG4gICAgaWYgKHRoaXMuc2hlZXQudG9rZW4pIHtcbiAgICAgIHJldHVybiBgJHt0aGlzLnNoZWV0LnRva2VuLnBhcmVudC5pZH0uJHt0aGlzLnNoZWV0LnRva2VuLmlkfWBcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gdGhpcy5pZFxuICAgIH1cbiAgICAvKioqKioqKioqKioqKioqKiovXG4gICAgLy8gLy9DYXNlIDE6IHRoZSBhY3RvciBpcyBhIHN5bnRoZXRpYyBhY3RvciBhbmQgaGFzIGEgdG9rZW4sIHJldHVybiB0b2tlbiBrZXkuXG4gICAgLy8gaWYoIHRoaXMuaXNUb2tlbikgcmV0dXJuIGAke3RoaXMudG9rZW4uc2NlbmU/Ll9pZD90aGlzLnRva2VuLnNjZW5lLl9pZDonVE9LRU4nfS4ke3RoaXMudG9rZW4uaWR9YDsgIC8vUkVGQUNUT1JJTkcgKDIpXG5cbiAgICAvLyAvL0Nhc2UgMjogdGhlIGFjdG9yIGlzIG5vdCBhIHRva2VuIChsaW5rZWQgYWN0b3IpLiBJZiB0aGUgc2hlZXQgaGF2ZSBhbiBhc3NvY2lhdGVkIHRva2VuIHJldHVybiB0aGUgdG9rZW4ga2V5LlxuICAgIC8vIGlmKCB0aGlzLnNoZWV0LnRva2VuKSByZXR1cm4gYCR7dGhpcy5zaGVldC50b2tlbi5zY2VuZT8uaWQ/dGhpcy5zaGVldC50b2tlbi5zY2VuZS5pZDonVE9LRU4nfS4ke3RoaXMuc2hlZXQudG9rZW4uaWR9YDtcblxuICAgIC8vIC8vQ2FzZSAzOiBBY3RvciBoYXMgbm8gdG9rZW4gcmV0dXJuIGhpcyBJRDtcbiAgICAvLyByZXR1cm4gdGhpcy5pZDtcbiAgfVxuXG4gIGdldCBhY3RvcktleSAoKSB7XG4gICAgaWYgKHRoaXMucHJvdG90eXBlVG9rZW4uYWN0b3JMaW5rKSByZXR1cm4gdGhpcy5pZCAvLyBSRUZBQ1RPUklORyAoMilcbiAgICByZXR1cm4gdGhpcy50b2tlbktleVxuICB9XG5cbiAgc3RhdGljIGdldEFjdG9yRnJvbUtleSAoa2V5KSB7XG4gICAgLy8gQ2FzZSAxIC0gYSBzeW50aGV0aWMgYWN0b3IgZnJvbSBhIFRva2VuXG4gICAgaWYgKGtleS5pbmNsdWRlcygnLicpKSB7XG4gICAgICAvLyBSRUZBQ1RPUklORyAoMilcbiAgICAgIGNvbnN0IFtzY2VuZUlkLCB0b2tlbklkXSA9IGtleS5zcGxpdCgnLicpXG4gICAgICBpZiAoc2NlbmVJZCA9PT0gJ1RPS0VOJykge1xuICAgICAgICByZXR1cm4gZ2FtZS5hY3RvcnMudG9rZW5zW3Rva2VuSWRdIC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2NlbmUgPSBnYW1lLnNjZW5lcy5nZXQoc2NlbmVJZClcbiAgICAgICAgaWYgKCFzY2VuZSkgcmV0dXJuIG51bGxcbiAgICAgICAgY29uc3QgdG9rZW5EYXRhID0gc2NlbmUuZ2V0RW1iZWRkZWREb2N1bWVudCgnVG9rZW4nLCB0b2tlbklkKVxuICAgICAgICBpZiAoIXRva2VuRGF0YSkgcmV0dXJuIG51bGxcbiAgICAgICAgY29uc3QgdG9rZW4gPSBuZXcgVG9rZW4odG9rZW5EYXRhKVxuICAgICAgICByZXR1cm4gdG9rZW4uYWN0b3JcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDYXNlIDIgLSB1c2UgQWN0b3IgSUQgZGlyZWN0b3J5XG4gICAgcmV0dXJuIGdhbWUuYWN0b3JzLmdldChrZXkpIHx8IG51bGxcbiAgfVxuXG4gIGdldCBoYXNSb2xsYWJsZUNoYXJhY3RlcmlzdGljcyAoKSB7XG4gICAgZm9yIChjb25zdCBbLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzKSkge1xuICAgICAgaWYgKGlzTmFOKE51bWJlcih2YWx1ZS5mb3JtdWxhKSkpIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZ2V0IGhvc1JvbGxhYmxlU2tpbGxzICgpIHtcbiAgICBmb3IgKGNvbnN0IHNraWxsIG9mIHRoaXMuc2tpbGxzKSB7XG4gICAgICBpZiAoaXNOYU4oc2tpbGwuc3lzdGVtPy52YWx1ZSkpIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIFVzZSB0aGUgZm9ybXVsYSBpZiBhdmFpbGFibGUgdG8gcm9sbCBzb21lIGNoYXJhY3Rlcml0aWNzLlxuICAgKi9cbiAgYXN5bmMgcm9sbENoYXJhY3RlcmlzdGljc1ZhbHVlICgpIHtcbiAgICBjb25zdCBjaGFyYWN0ZXJpc3RpY3MgPSB7fVxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuc3lzdGVtLmNoYXJhY3RlcmlzdGljcykpIHtcbiAgICAgIGlmICh2YWx1ZS5mb3JtdWxhICYmICF2YWx1ZS5mb3JtdWxhLnN0YXJ0c1dpdGgoJ0AnKSkge1xuICAgICAgICBjb25zdCByID0gbmV3IFJvbGwodmFsdWUuZm9ybXVsYSlcbiAgICAgICAgYXdhaXQgci5yb2xsKHsgYXN5bmM6IHRydWUgfSlcbiAgICAgICAgaWYgKHIudG90YWwpIHtcbiAgICAgICAgICBjaGFyYWN0ZXJpc3RpY3NbYHN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MuJHtrZXl9LnZhbHVlYF0gPSBNYXRoLmZsb29yKFxuICAgICAgICAgICAgci50b3RhbFxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGF3YWl0IHRoaXMudXBkYXRlKGNoYXJhY3RlcmlzdGljcylcbiAgICBhd2FpdCB0aGlzLnJlcG9ydENoYXJhY3RlZHJpdGljc1ZhbHVlKClcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB0aGVyZSBpcyBhIGZvcm11bGEsIHdpbGwgc2V0IHRoZSBjaGFyYWN0ZXJpc3RpYyB0byB0aGUgYXZlcmFnZSB2YWx1ZSAsaWYgZGl2aXNpYmxlIGJ5IDUsIG9yIHRoZSBjbG9zZXN0IDEwLlxuICAgKi9cbiAgYXN5bmMgYXZlcmFnZUNoYXJhY3RlcmlzdGljc1ZhbHVlICgpIHtcbiAgICBjb25zdCBjaGFyYWN0ZXJpc3RpY3MgPSB7fVxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuc3lzdGVtLmNoYXJhY3RlcmlzdGljcykpIHtcbiAgICAgIGlmICh2YWx1ZS5mb3JtdWxhICYmICF2YWx1ZS5mb3JtdWxhLnN0YXJ0c1dpdGgoJ0AnKSkge1xuICAgICAgICBjb25zdCBhdmVyYWdlID0gbmV3IEF2ZXJhZ2VSb2xsKCcoJyArIHZhbHVlLmZvcm11bGEgKyAnKScpWyghZm91bmRyeS51dGlscy5pc05ld2VyVmVyc2lvbihnYW1lLnZlcnNpb24sICcxMicpID8gJ2V2YWx1YXRlJyA6ICdldmFsdWF0ZVN5bmMnKS8qIC8vIEZvdW5kcnlWVFQgdjExICovXSh7IG1pbmltaXplOiB0cnVlLCBtYXhpbWl6ZTogdHJ1ZSB9KS50b3RhbFxuICAgICAgICBjaGFyYWN0ZXJpc3RpY3NbYHN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MuJHtrZXl9LnZhbHVlYF0gPSBhdmVyYWdlXG4gICAgICB9XG4gICAgfVxuXG4gICAgYXdhaXQgdGhpcy51cGRhdGUoY2hhcmFjdGVyaXN0aWNzKVxuICAgIGF3YWl0IHRoaXMucmVwb3J0Q2hhcmFjdGVkcml0aWNzVmFsdWUoKVxuICB9XG5cbiAgLyoqXG4gICAqIFRlc3QgaWYgYSBjaGFyYWN0ZXJpc2l0YyBmb3JtdWxhIGlzIGEgcmVmZXJlbmNlIHRvIGFuIG90aGVyIGNoYXJhY3RlcmlzdGljIGFuZCBzZXQgaXQgYWNjb3JkaW5nbHkuXG4gICAqL1xuICBhc3luYyByZXBvcnRDaGFyYWN0ZWRyaXRpY3NWYWx1ZSAoKSB7XG4gICAgY29uc3QgY2hhcmFjdGVyaXN0aWNzID0ge31cbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MpKSB7XG4gICAgICBpZiAodmFsdWUuZm9ybXVsYSAmJiB2YWx1ZS5mb3JtdWxhLnN0YXJ0c1dpdGgoJ0AnKSkge1xuICAgICAgICBsZXQgY2hhclZhbHVlXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2hhclZhbHVlID0gbmV3IFJvbGwoXG4gICAgICAgICAgICB2YWx1ZS5mb3JtdWxhLFxuICAgICAgICAgICAgdGhpcy5wYXJzZUNoYXJhY3RlcmlzdGljcygpXG4gICAgICAgICAgKVsoIWZvdW5kcnkudXRpbHMuaXNOZXdlclZlcnNpb24oZ2FtZS52ZXJzaW9uLCAnMTInKSA/ICdldmFsdWF0ZScgOiAnZXZhbHVhdGVTeW5jJykvKiAvLyBGb3VuZHJ5VlRUIHYxMSAqL10oeyBtYXhpbWl6ZTogdHJ1ZSB9KS50b3RhbFxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjaGFyVmFsdWUgPSBudWxsXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoYXJWYWx1ZSkge1xuICAgICAgICAgIGNoYXJhY3RlcmlzdGljc1tgc3lzdGVtLmNoYXJhY3RlcmlzdGljcy4ke2tleX0udmFsdWVgXSA9IGNoYXJWYWx1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgYXdhaXQgdGhpcy51cGRhdGUoY2hhcmFjdGVyaXN0aWNzKVxuICB9XG5cbiAgYXN5bmMgc2V0Q2hhcmFjdGVyaXN0aWMgKG5hbWUsIHZhbHVlKSB7XG4gICAgY29uc3QgY2hhcmFjdGVyaXN0aWMgPSB7fVxuICAgIGNvbnN0IGNoYXJWYWx1ZSA9IGlzTmFOKHBhcnNlSW50KHZhbHVlKSkgPyBudWxsIDogcGFyc2VJbnQodmFsdWUpXG4gICAgY2hhcmFjdGVyaXN0aWNbbmFtZV0gPSBjaGFyVmFsdWVcbiAgICBpZiAoIWNoYXJWYWx1ZSkge1xuICAgICAgaWYgKHZhbHVlLnN0YXJ0c1dpdGgoJ0AnKSkge1xuICAgICAgICBjb25zdCBmb3JtdWxhID0gbmFtZS5yZXBsYWNlKCcudmFsdWUnLCAnLmZvcm11bGEnKVxuICAgICAgICBjaGFyYWN0ZXJpc3RpY1tmb3JtdWxhXSA9IHZhbHVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgYXdhaXQgdGhpcy51cGRhdGUoY2hhcmFjdGVyaXN0aWMpXG4gICAgYXdhaXQgdGhpcy5yZXBvcnRDaGFyYWN0ZWRyaXRpY3NWYWx1ZSgpXG4gIH1cblxuICBhc3luYyBkZXZlbG9wZW1lbnRQaGFzZSAoZmFzdEZvcndhcmQgPSBmYWxzZSkge1xuICAgIGNvbnN0IGZhaWx1cmUgPSBbXVxuICAgIGNvbnN0IHN1Y2Nlc3MgPSBbXVxuICAgIGNvbnN0IHNraWxsTWFzdGVyaW5nVGhyZXNob2xkID0gOTBcbiAgICBjb25zdCBhbHdheXNTdWNjZXNzVGhyZXNob2xkID0gOTVcblxuICAgIGNvbnN0IHRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlJvbGxBbGw0RGV2JylcbiAgICBsZXQgc2tpbGxzUm9sbGVkID0gMFxuICAgIGxldCBtZXNzYWdlID0gJzxwIGNsYXNzPVwiY2hhdC1jYXJkXCI+J1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLml0ZW1zKSB7XG4gICAgICBpZiAoaXRlbS50eXBlID09PSAnc2tpbGwnKSB7XG4gICAgICAgIGlmIChpdGVtLmRldmVsb3BlbWVudEZsYWcpIHtcbiAgICAgICAgICBza2lsbHNSb2xsZWQrK1xuICAgICAgICAgIGNvbnN0IGRpZSA9IGF3YWl0IG5ldyBEaWUoeyBmYWNlczogMTAwIH0pLmV2YWx1YXRlKHsgYXN5bmM6IHRydWUgfSlcbiAgICAgICAgICBjb25zdCBza2lsbFZhbHVlID0gaXRlbS52YWx1ZVxuICAgICAgICAgIGxldCBhdWdtZW50ID0gbnVsbFxuICAgICAgICAgIGxldCBza2lsbE1hc3RlcmluZ01lc3NhZ2UgPSBudWxsXG4gICAgICAgICAgaWYgKGRpZS50b3RhbCA+IHNraWxsVmFsdWUgfHwgZGllLnRvdGFsID49IGFsd2F5c1N1Y2Nlc3NUaHJlc2hvbGQpIHtcbiAgICAgICAgICAgIGNvbnN0IGF1Z21lbnREaWUgPSBhd2FpdCBuZXcgRGllKHsgZmFjZXM6IDEwIH0pLmV2YWx1YXRlKHtcbiAgICAgICAgICAgICAgYXN5bmM6IHRydWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBzdWNjZXNzLnB1c2goaXRlbS5pZClcbiAgICAgICAgICAgIC8vIENoZWNrIGZvciBTQU4gYXVnbWVudCB3aGVuIHRoZSBza2lsbCBnb2VzIGJleW9uZCB0aGUgc2tpbGwgbWFzdGVyaW5nIHRocmVzaG9sZC5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgc2tpbGxWYWx1ZSA8IHNraWxsTWFzdGVyaW5nVGhyZXNob2xkICYmXG4gICAgICAgICAgICAgIHNraWxsVmFsdWUgKyBhdWdtZW50RGllLnRvdGFsID49IHNraWxsTWFzdGVyaW5nVGhyZXNob2xkXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29uc3QgYXVnbWVudFNBTkRpZSA9IGF3YWl0IG5ldyBEaWUoe1xuICAgICAgICAgICAgICAgIGZhY2VzOiA2LFxuICAgICAgICAgICAgICAgIG51bWJlcjogMlxuICAgICAgICAgICAgICB9KS5ldmFsdWF0ZSh7IGFzeW5jOiB0cnVlIH0pXG4gICAgICAgICAgICAgIGNvbnN0IHNhbkdhaW5lZCA9IGF1Z21lbnRTQU5EaWUudG90YWxcbiAgICAgICAgICAgICAgY29uc3Qgc2FuR2FpbmVkTWVzc2FnZSA9IGBHYWluZWQgMmQ2ICgke2F1Z21lbnRTQU5EaWUudmFsdWVzWzBdfSArICR7YXVnbWVudFNBTkRpZS52YWx1ZXNbMV19ID0gJHtzYW5HYWluZWR9KSBTQU5gXG4gICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoc2FuR2FpbmVkTWVzc2FnZSlcbiAgICAgICAgICAgICAgc2tpbGxNYXN0ZXJpbmdNZXNzYWdlID0gYDxzcGFuIGNsYXNzPVwidXBncmFkZS1zdWNjZXNzXCI+JHtnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgICAgICAgICdDb0M3LlNhbkdhaW5lZCcsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgcmVzdWx0czogYCR7YXVnbWVudFNBTkRpZS52YWx1ZXNbMF19ICsgJHthdWdtZW50U0FORGllLnZhbHVlc1sxXX1gLFxuICAgICAgICAgICAgICAgICAgc2FuR2FpbmVkLFxuICAgICAgICAgICAgICAgICAgc2tpbGw6IGl0ZW0ubmFtZSxcbiAgICAgICAgICAgICAgICAgIHNraWxsVmFsdWU6IHNraWxsVmFsdWUgKyBhdWdtZW50RGllLnRvdGFsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICApfTwvc3Bhbj48YnI+YFxuICAgICAgICAgICAgICAvLyBTZXQgc2FuIGNvbnRyb2xzIHRoYXQgaXQgZG9lc24ndCBhdWdtZW50IGJleW9uZCBzYW5NYXhcbiAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXRTYW4odGhpcy5zYW4gKyBzYW5HYWluZWQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhdWdtZW50ICs9IGF1Z21lbnREaWUudG90YWxcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gYDxzcGFuIGNsYXNzPVwidXBncmFkZS1zdWNjZXNzXCI+JHtnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgICAgICAnQ29DNy5EZXZTdWNjZXNzJyxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06IGl0ZW0ubmFtZSxcbiAgICAgICAgICAgICAgICBkaWU6IGRpZS50b3RhbCxcbiAgICAgICAgICAgICAgICBzY29yZTogaXRlbS52YWx1ZSxcbiAgICAgICAgICAgICAgICBhdWdtZW50OiBhdWdtZW50RGllLnRvdGFsXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICl9PC9zcGFuPjxicj5gXG4gICAgICAgICAgICBpZiAoc2tpbGxNYXN0ZXJpbmdNZXNzYWdlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIG1lc3NhZ2UgKz0gc2tpbGxNYXN0ZXJpbmdNZXNzYWdlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCBpdGVtLmluY3JlYXNlRXhwZXJpZW5jZShhdWdtZW50KVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZXNzYWdlICs9IGA8c3BhbiBjbGFzcz1cInVwZ3JhZGUtZmFpbGVkXCI+JHtnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgICAgICAnQ29DNy5EZXZGYWlsdXJlJyxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06IGl0ZW0ubmFtZSxcbiAgICAgICAgICAgICAgICBkaWU6IGRpZS50b3RhbCxcbiAgICAgICAgICAgICAgICBzY29yZTogaXRlbS52YWx1ZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApfTwvc3Bhbj48YnI+YFxuICAgICAgICAgICAgZmFpbHVyZS5wdXNoKGl0ZW0uaWQpXG4gICAgICAgICAgfVxuICAgICAgICAgIGF3YWl0IGl0ZW0udW5mbGFnRm9yRGV2ZWxvcGVtZW50KClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBzYW5pdHlMb3NzRXZlbnRzID0gW11cbiAgICBsZXQgY2hhbmdlZCA9IGZhbHNlXG4gICAgZm9yIChjb25zdCBzYW5pdHlMb3NzRXZlbnQgb2YgdGhpcy5zeXN0ZW0uc2FuaXR5TG9zc0V2ZW50cykge1xuICAgICAgaWYgKHNhbml0eUxvc3NFdmVudC5pbW11bml0eSkge1xuICAgICAgICBzYW5pdHlMb3NzRXZlbnRzLnB1c2goc2FuaXR5TG9zc0V2ZW50KVxuICAgICAgfSBlbHNlIGlmIChzYW5pdHlMb3NzRXZlbnQudG90YWxMb3NzID4gMSkge1xuICAgICAgICBzYW5pdHlMb3NzRXZlbnQudG90YWxMb3NzLS1cbiAgICAgICAgc2FuaXR5TG9zc0V2ZW50cy5wdXNoKHNhbml0eUxvc3NFdmVudClcbiAgICAgICAgY2hhbmdlZCA9IHRydWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoYW5nZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICBpZiAoc2tpbGxzUm9sbGVkKSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gJzxicj4nXG4gICAgICB9XG4gICAgICBtZXNzYWdlICs9IGA8c3Bhbj4ke2dhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuUmVkdWNlU2FuaXR5TGltaXRzJyl9PC9zcGFuPmBcbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlKHtcbiAgICAgICAgJ3N5c3RlbS5zYW5pdHlMb3NzRXZlbnRzJzogc2FuaXR5TG9zc0V2ZW50c1xuICAgICAgfSlcbiAgICB9XG4gICAgaWYgKCFmYXN0Rm9yd2FyZCkge1xuICAgICAgbWVzc2FnZSArPSAnPC9wPidcbiAgICAgIGNvbnN0IHNwZWFrZXIgPSB7IGFjdG9yOiB0aGlzIH1cbiAgICAgIGF3YWl0IGNoYXRIZWxwZXIuY3JlYXRlTWVzc2FnZShza2lsbHNSb2xsZWQgPyB0aXRsZSA6ICcnLCBtZXNzYWdlLCB7XG4gICAgICAgIHNwZWFrZXJcbiAgICAgIH0pXG4gICAgICB0aGlzLm9ubHlSdW5PbmNlUGVyU2Vzc2lvbiA9IHRydWVcbiAgICB9XG4gICAgcmV0dXJuIHsgZmFpbHVyZSwgc3VjY2VzcyB9XG4gIH1cblxuICBhc3luYyBkZXZlbG9wTHVjayAoZmFzdEZvcndhcmQgPSBmYWxzZSkge1xuICAgIGNvbnN0IGN1cnJlbnRMdWNrID0gdGhpcy5zeXN0ZW0uYXR0cmlicy5sY2sudmFsdWVcbiAgICBpZiAoIWN1cnJlbnRMdWNrKSBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uYXR0cmlicy5sY2sudmFsdWUnOiAwIH0pXG4gICAgY29uc3QgcHVscFJ1bGVEZXZlbG9wbWVudFJvbGxMdWNrID0gZ2FtZS5zZXR0aW5ncy5nZXQoXG4gICAgICAnQ29DNycsXG4gICAgICAncHVscFJ1bGVEZXZlbG9wbWVudFJvbGxMdWNrJ1xuICAgIClcbiAgICBjb25zdCB1cGdyYWRlUm9sbCA9IChhd2FpdCBuZXcgUm9sbCgnMUQxMDAnKS5yb2xsKHsgYXN5bmM6IHRydWUgfSkpLnRvdGFsXG4gICAgY29uc3QgaGlnaGVyVGhhbkN1cnJlbnRMdWNrID0gdXBncmFkZVJvbGwgPiBjdXJyZW50THVja1xuICAgIGxldCBhdWdtZW50Um9sbFxuICAgIGlmIChwdWxwUnVsZURldmVsb3BtZW50Um9sbEx1Y2spIHtcbiAgICAgIGhpZ2hlclRoYW5DdXJyZW50THVja1xuICAgICAgICA/IChhdWdtZW50Um9sbCA9ICcyRDEwKzEwJylcbiAgICAgICAgOiAoYXVnbWVudFJvbGwgPSAnMUQxMCs1JylcbiAgICB9IGVsc2UgaWYgKGhpZ2hlclRoYW5DdXJyZW50THVjaykge1xuICAgICAgYXVnbWVudFJvbGwgPSAnMUQxMCdcbiAgICB9XG4gICAgY29uc3QgdGl0bGUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuUm9sbEx1Y2s0RGV2JylcbiAgICBsZXQgbWVzc2FnZSA9ICc8cCBjbGFzcz1cImNoYXQtY2FyZFwiPidcbiAgICBpZiAocHVscFJ1bGVEZXZlbG9wbWVudFJvbGxMdWNrIHx8IGhpZ2hlclRoYW5DdXJyZW50THVjaykge1xuICAgICAgY29uc3QgYXVnbWVudFZhbHVlID0gKGF3YWl0IG5ldyBSb2xsKGF1Z21lbnRSb2xsKS5yb2xsKHsgYXN5bmM6IHRydWUgfSkpXG4gICAgICAgIC50b3RhbFxuICAgICAgYXdhaXQgdGhpcy51cGRhdGUoe1xuICAgICAgICAnc3lzdGVtLmF0dHJpYnMubGNrLnZhbHVlJzpcbiAgICAgICAgICB0aGlzLnN5c3RlbS5hdHRyaWJzLmxjay52YWx1ZSArIGF1Z21lbnRWYWx1ZVxuICAgICAgfSlcbiAgICAgIG1lc3NhZ2UgKz0gYDxzcGFuIGNsYXNzPVwidXBncmFkZS1zdWNjZXNzXCI+JHtnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAnQ29DNy5MdWNrSW5jcmVhc2VkJyxcbiAgICAgICAge1xuICAgICAgICAgIGRpZTogdXBncmFkZVJvbGwsXG4gICAgICAgICAgc2NvcmU6IGN1cnJlbnRMdWNrLFxuICAgICAgICAgIGF1Z21lbnQ6IGF1Z21lbnRWYWx1ZVxuICAgICAgICB9XG4gICAgICApfTwvc3Bhbj5gXG4gICAgfSBlbHNlIHtcbiAgICAgIG1lc3NhZ2UgKz0gYDxzcGFuIGNsYXNzPVwidXBncmFkZS1mYWlsZWRcIj4ke2dhbWUuaTE4bi5mb3JtYXQoXG4gICAgICAgICdDb0M3Lkx1Y2tOb3RJbmNyZWFzZWQnLFxuICAgICAgICB7IGRpZTogdXBncmFkZVJvbGwsIHNjb3JlOiBjdXJyZW50THVjayB9XG4gICAgICApfTwvc3Bhbj5gXG4gICAgfVxuICAgIGlmICghZmFzdEZvcndhcmQpIHtcbiAgICAgIG1lc3NhZ2UgKz0gJzwvcD4nXG4gICAgICBjb25zdCBzcGVha2VyID0geyBhY3RvcjogdGhpcyB9XG4gICAgICBhd2FpdCBjaGF0SGVscGVyLmNyZWF0ZU1lc3NhZ2UodGl0bGUsIG1lc3NhZ2UsIHsgc3BlYWtlciB9KVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGRldmVsb3BTa2lsbCAoc2tpbGxJZCwgZmFzdEZvcndhcmQgPSBmYWxzZSkge1xuICAgIGNvbnN0IHNraWxsID0gdGhpcy5pdGVtcy5nZXQoc2tpbGxJZClcbiAgICBpZiAoIXNraWxsKSByZXR1cm5cbiAgICBsZXQgdGl0bGUgPSAnJ1xuICAgIGxldCBtZXNzYWdlID0gJydcbiAgICBjb25zdCB1cGdyYWRlUm9sbCA9IG5ldyBSb2xsKCcxRDEwMCcpXG4gICAgYXdhaXQgdXBncmFkZVJvbGwucm9sbCh7IGFzeW5jOiB0cnVlIH0pXG4gICAgaWYgKCFmYXN0Rm9yd2FyZCkgYXdhaXQgQ29DN0RpY2Uuc2hvd1JvbGxEaWNlM2QodXBncmFkZVJvbGwpXG4gICAgaWYgKHVwZ3JhZGVSb2xsLnRvdGFsID4gc2tpbGwudmFsdWUgfHwgdXBncmFkZVJvbGwudG90YWwgPj0gOTUpIHtcbiAgICAgIGNvbnN0IGF1Z21lbnRSb2xsID0gbmV3IFJvbGwoJzFEMTAnKVxuICAgICAgYXdhaXQgYXVnbWVudFJvbGwucm9sbCh7IGFzeW5jOiB0cnVlIH0pXG4gICAgICBpZiAoIWZhc3RGb3J3YXJkKSBhd2FpdCBDb0M3RGljZS5zaG93Um9sbERpY2UzZChhdWdtZW50Um9sbClcbiAgICAgIG1lc3NhZ2UgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkRldlN1Y2Nlc3NEZXRhaWxzJywge1xuICAgICAgICBpdGVtOiBza2lsbC5uYW1lLFxuICAgICAgICBhdWdtZW50OiBhdWdtZW50Um9sbC50b3RhbFxuICAgICAgfSlcbiAgICAgIHRpdGxlID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5EZXZSb2xsVGl0bGUnLCB7XG4gICAgICAgIGl0ZW06IHNraWxsLm5hbWUsXG4gICAgICAgIGRpZTogdXBncmFkZVJvbGwudG90YWwsXG4gICAgICAgIHNjb3JlOiBza2lsbC52YWx1ZVxuICAgICAgfSlcbiAgICAgIGF3YWl0IHNraWxsLmluY3JlYXNlRXhwZXJpZW5jZShhdWdtZW50Um9sbC50b3RhbClcbiAgICB9IGVsc2Uge1xuICAgICAgdGl0bGUgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkRldlJvbGxUaXRsZScsIHtcbiAgICAgICAgaXRlbTogc2tpbGwubmFtZSxcbiAgICAgICAgZGllOiB1cGdyYWRlUm9sbC50b3RhbCxcbiAgICAgICAgc2NvcmU6IHNraWxsLnZhbHVlXG4gICAgICB9KVxuICAgICAgbWVzc2FnZSA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRGV2RmFpbHVyZURldGFpbHMnLCB7XG4gICAgICAgIGl0ZW06IHNraWxsLm5hbWVcbiAgICAgIH0pXG4gICAgfVxuICAgIGNvbnN0IHNwZWFrZXIgPSB7IGFjdG9yOiB0aGlzLl9pZCB9XG4gICAgYXdhaXQgY2hhdEhlbHBlci5jcmVhdGVNZXNzYWdlKHRpdGxlLCBtZXNzYWdlLCB7IHNwZWFrZXIgfSlcbiAgICBhd2FpdCBza2lsbC51bmZsYWdGb3JEZXZlbG9wZW1lbnQoKVxuICB9XG5cbiAgaGFzQ29uZGl0aW9uU3RhdHVzIChjb25kaXRpb25OYW1lKSB7XG4gICAgY29uc3QgY29uZGl0aW9uVmFsdWUgPSB0aGlzLnN5c3RlbS5jb25kaXRpb25zPy5bY29uZGl0aW9uTmFtZV0/LnZhbHVlXG4gICAgaWYgKHR5cGVvZiBjb25kaXRpb25WYWx1ZSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICByZXR1cm4gZmFsc2UgLy8gTmVjZXNzYXJ5LCBpbmNvcnJlY3QgdGVtcGxhdGUgaW5pdGlhbGl6YXRpb25cbiAgICB9XG4gICAgcmV0dXJuIGNvbmRpdGlvblZhbHVlXG4gIH1cblxuICBoYXNDb25kaXRpb25WYWx1ZSAoY29uZGl0aW9uTmFtZSwgZmllbGQpIHtcbiAgICBpZiAoIXRoaXMuaGFzQ29uZGl0aW9uU3RhdHVzKGNvbmRpdGlvbk5hbWUpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuICAgIGlmIChjb25kaXRpb25OYW1lID09PSBDT0M3LnN0YXR1cy50ZW1wb0luc2FuZSAmJiBmaWVsZCA9PT0gJ2R1cmF0aW9uVGV4dCcpIHtcbiAgICAgIGNvbnN0IHJlYWxUaW1lID0gdGhpcy5oYXNDb25kaXRpb25WYWx1ZShjb25kaXRpb25OYW1lLCAncmVhbFRpbWUnKVxuICAgICAgY29uc3QgZHVyYXRpb24gPSB0aGlzLmhhc0NvbmRpdGlvblZhbHVlKGNvbmRpdGlvbk5hbWUsICdkdXJhdGlvbicpXG4gICAgICBpZiAodHlwZW9mIGR1cmF0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAocmVhbFRpbWUgPT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm4gZHVyYXRpb24gKyAnICcgKyBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcucm91bmRzJylcbiAgICAgICAgfSBlbHNlIGlmIChyZWFsVGltZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gZHVyYXRpb24gKyAnICcgKyBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuaG91cnMnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gJydcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3lzdGVtLmNvbmRpdGlvbnM/Lltjb25kaXRpb25OYW1lXT8uW2ZpZWxkXVxuICB9XG5cbiAgYXN5bmMgdG9nZ2xlQ29uZGl0aW9uIChjb25kaXRpb25OYW1lKSB7XG4gICAgY29uc3QgY29uZGl0aW9uVmFsdWUgPSB0aGlzLmhhc0NvbmRpdGlvblN0YXR1cyhjb25kaXRpb25OYW1lKVxuICAgIGlmICghY29uZGl0aW9uVmFsdWUpIHtcbiAgICAgIGF3YWl0IHRoaXMuc2V0Q29uZGl0aW9uKGNvbmRpdGlvbk5hbWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IHRoaXMudW5zZXRDb25kaXRpb24oY29uZGl0aW9uTmFtZSlcbiAgICB9XG4gIH1cblxuICBhc3luYyBzZXRDb25kaXRpb24gKFxuICAgIGNvbmRpdGlvbk5hbWUsXG4gICAge1xuICAgICAgZm9yY2VWYWx1ZSA9IGZhbHNlLFxuICAgICAganVzdFRoaXMgPSBmYWxzZSxcbiAgICAgIHJlYWxUaW1lID0gbnVsbCxcbiAgICAgIGR1cmF0aW9uID0gbnVsbFxuICAgIH0gPSB7fVxuICApIHtcbiAgICBpZiAoIWZvcmNlVmFsdWUgJiYgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnZW5hYmxlU3RhdHVzSWNvbnMnKSkge1xuICAgICAgY29uc3QgZWZmZWN0cyA9IHRoaXMuZWZmZWN0c1xuICAgICAgICAuZmlsdGVyKGVmZmVjdCA9PiBDb0M3QWN0aXZlRWZmZWN0LmZpbHRlckFjdGl2ZUVmZmVjdHMoZWZmZWN0LCBjb25kaXRpb25OYW1lKSlcbiAgICAgICAgLm1hcChlZmZlY3QgPT4gZWZmZWN0LmlkKVxuICAgICAgY29uc3QgY3VzdG9tID0ge31cbiAgICAgIHN3aXRjaCAoY29uZGl0aW9uTmFtZSkge1xuICAgICAgICBjYXNlIENPQzcuc3RhdHVzLmRlYWQ6XG4gICAgICAgICAgY3VzdG9tLmZsYWdzID0ge1xuICAgICAgICAgICAgY29yZToge1xuICAgICAgICAgICAgICBvdmVybGF5OiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMudGVtcG9JbnNhbmU6XG4gICAgICAgICAgY3VzdG9tLmZsYWdzID0ge1xuICAgICAgICAgICAgQ29DNzoge1xuICAgICAgICAgICAgICByZWFsVGltZTogdW5kZWZpbmVkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1c3RvbS5kdXJhdGlvbiA9IHtcbiAgICAgICAgICAgIHJvdW5kczogdW5kZWZpbmVkLFxuICAgICAgICAgICAgc2Vjb25kczogdW5kZWZpbmVkXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZWFsVGltZSA9PT0gdHJ1ZSB8fCByZWFsVGltZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGN1c3RvbS5mbGFncy5Db0M3LnJlYWxUaW1lID0gcmVhbFRpbWVcbiAgICAgICAgICAgIGN1c3RvbS5mbGFncyA9IHtcbiAgICAgICAgICAgICAgQ29DNzoge1xuICAgICAgICAgICAgICAgIHJlYWxUaW1lXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkdXJhdGlvbiAhPT0gbnVsbCAmJiB0eXBlb2YgZHVyYXRpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIGlmIChyZWFsVGltZSkge1xuICAgICAgICAgICAgICAgIGN1c3RvbS5kdXJhdGlvbi5yb3VuZHMgPSBkdXJhdGlvblxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGN1c3RvbS5kdXJhdGlvbi5zZWNvbmRzID0gZHVyYXRpb24gKiAzNjAwXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGlmIChlZmZlY3RzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb25zdCBlZmZlY3QgPSBDT05GSUcuc3RhdHVzRWZmZWN0cy5maWx0ZXIoXG4gICAgICAgICAgZWZmZWN0ID0+IGVmZmVjdC5pZCA9PT0gY29uZGl0aW9uTmFtZVxuICAgICAgICApXG4gICAgICAgIGlmIChlZmZlY3QubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgY29uc3Qgc291cmNlID0ge1xuICAgICAgICAgICAgaWNvbjogZWZmZWN0WzBdLmljb24sXG4gICAgICAgICAgICBkaXNhYmxlZDogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFmb3VuZHJ5LnV0aWxzLmlzTmV3ZXJWZXJzaW9uKGdhbWUudmVyc2lvbiwgJzExJykpIHtcbiAgICAgICAgICAgIC8vIEZvdW5kcnlWVFQgdjEwXG4gICAgICAgICAgICBzb3VyY2UubGFiZWwgPSBnYW1lLmkxOG4ubG9jYWxpemUoZWZmZWN0WzBdLmxhYmVsKVxuICAgICAgICAgICAgc291cmNlLmZsYWdzID0ge1xuICAgICAgICAgICAgICBjb3JlOiB7XG4gICAgICAgICAgICAgICAgc3RhdHVzSWQ6IGVmZmVjdFswXS5pZFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNvdXJjZS5uYW1lID0gZ2FtZS5pMThuLmxvY2FsaXplKGVmZmVjdFswXS5uYW1lKVxuICAgICAgICAgICAgc291cmNlLnN0YXR1c2VzID0gW2VmZmVjdFswXS5pZF1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZWZmZWN0RGF0YSA9IGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc291cmNlLCBjdXN0b20pXG4gICAgICAgICAgYXdhaXQgc3VwZXIuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0FjdGl2ZUVmZmVjdCcsIFtlZmZlY3REYXRhXSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBUaGlzIGRvZXNuJ3QgZXhpc3QgaW4gRm91bmRyeVZUVCBBY3RpdmVFZmZlY3RzP1xuICAgICAgICAgIGZvcmNlVmFsdWUgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1c3RvbS5faWQgPSBlZmZlY3RzWzBdXG4gICAgICAgIGF3YWl0IHN1cGVyLnVwZGF0ZUVtYmVkZGVkRG9jdW1lbnRzKCdBY3RpdmVFZmZlY3QnLCBbY3VzdG9tXSlcbiAgICAgICAgZm9yY2VWYWx1ZSA9IHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZvcmNlVmFsdWUgfHwgIWdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2VuYWJsZVN0YXR1c0ljb25zJykpIHtcbiAgICAgIHN3aXRjaCAoY29uZGl0aW9uTmFtZSkge1xuICAgICAgICBjYXNlIENPQzcuc3RhdHVzLmluZGVmSW5zYW5lOlxuICAgICAgICBjYXNlIENPQzcuc3RhdHVzLnVuY29uc2Npb3VzOlxuICAgICAgICBjYXNlIENPQzcuc3RhdHVzLmNyaXRpY2FsV291bmRzOlxuICAgICAgICBjYXNlIENPQzcuc3RhdHVzLmR5aW5nOlxuICAgICAgICBjYXNlIENPQzcuc3RhdHVzLnByb25lOlxuICAgICAgICBjYXNlIENPQzcuc3RhdHVzLmRlYWQ6XG4gICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGUoe1xuICAgICAgICAgICAgW2BzeXN0ZW0uY29uZGl0aW9ucy4ke2NvbmRpdGlvbk5hbWV9LnZhbHVlYF06IHRydWVcbiAgICAgICAgICB9KVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMudGVtcG9JbnNhbmU6XG4gICAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgZmllbGRzID0ge31cbiAgICAgICAgICAgIGZpZWxkc1tgc3lzdGVtLmNvbmRpdGlvbnMuJHtjb25kaXRpb25OYW1lfS52YWx1ZWBdID0gdHJ1ZVxuICAgICAgICAgICAgaWYgKHJlYWxUaW1lID09PSB0cnVlIHx8IHJlYWxUaW1lID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICBmaWVsZHNbYHN5c3RlbS5jb25kaXRpb25zLiR7Y29uZGl0aW9uTmFtZX0ucmVhbFRpbWVgXSA9IHJlYWxUaW1lXG4gICAgICAgICAgICAgIGlmIChkdXJhdGlvbiAhPT0gbnVsbCAmJiB0eXBlb2YgZHVyYXRpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgZmllbGRzW2BzeXN0ZW0uY29uZGl0aW9ucy4ke2NvbmRpdGlvbk5hbWV9LmR1cmF0aW9uYF0gPSBkdXJhdGlvblxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoXG4gICAgICAgICAgICAgICAgZmllbGRzLFxuICAgICAgICAgICAgICAgIGBzeXN0ZW0uY29uZGl0aW9ucy4ke2NvbmRpdGlvbk5hbWV9LnJlYWxUaW1lYFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgZmllbGRzW2BzeXN0ZW0uY29uZGl0aW9ucy4ke2NvbmRpdGlvbk5hbWV9Li09cmVhbFRpbWVgXSA9IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChcbiAgICAgICAgICAgICAgICBmaWVsZHMsXG4gICAgICAgICAgICAgICAgYHN5c3RlbS5jb25kaXRpb25zLiR7Y29uZGl0aW9uTmFtZX0uZHVyYXRpb25gXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBmaWVsZHNbYHN5c3RlbS5jb25kaXRpb25zLiR7Y29uZGl0aW9uTmFtZX0uLT1kdXJhdGlvbmBdID0gbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGUoZmllbGRzKVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgaWYgKCFqdXN0VGhpcykge1xuICAgICAgICAvLyBEb2VzIHNldHRpbmcgdGhlIGNvbmRpdGlvbiBhbHNvIHRyaWdnZXIgb3RoZXIgYWN0aW9ucz9cbiAgICAgICAgLy8gLSBJZiBBY3RpdmVFZmZlY3RzIGFyZSBhZGRlZCBoYXNDb25kaXRpb25TdGF0dXMgZm9yIHJlY2VudGx5IGFkZGVkIGNvbmRpdGlvbnMgbWF5IHJldHVybiBpbmNvcnJlY3RseVxuICAgICAgICBzd2l0Y2ggKGNvbmRpdGlvbk5hbWUpIHtcbiAgICAgICAgICBjYXNlIENPQzcuc3RhdHVzLmNyaXRpY2FsV291bmRzOlxuICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXRDb25kaXRpb24oQ09DNy5zdGF0dXMucHJvbmUpXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICF0aGlzLmhhc0NvbmRpdGlvblN0YXR1cyhDT0M3LnN0YXR1cy51bmNvbnNjaW91cykgJiZcbiAgICAgICAgICAgICAgIXRoaXMuaGFzQ29uZGl0aW9uU3RhdHVzKENPQzcuc3RhdHVzLmRlYWQpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29uc3QgY29uQ2hlY2sgPSBuZXcgQ29DN0NvbkNoZWNrKFxuICAgICAgICAgICAgICAgIHRoaXMuaXNUb2tlbiA/IHRoaXMudG9rZW5LZXkgOiB0aGlzLmlkXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgY29uQ2hlY2sudG9NZXNzYWdlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy5kZWFkOlxuICAgICAgICAgICAgYXdhaXQgdGhpcy51bnNldENvbmRpdGlvbihDT0M3LnN0YXR1cy5jcml0aWNhbFdvdW5kcylcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudW5zZXRDb25kaXRpb24oQ09DNy5zdGF0dXMuZHlpbmcpXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnVuc2V0Q29uZGl0aW9uKENPQzcuc3RhdHVzLnVuY29uc2Npb3VzKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHVuc2V0Q29uZGl0aW9uIChjb25kaXRpb25OYW1lLCB7IGZvcmNlVmFsdWUgPSBmYWxzZSB9ID0ge30pIHtcbiAgICBpZiAoIWZvcmNlVmFsdWUgJiYgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnZW5hYmxlU3RhdHVzSWNvbnMnKSkge1xuICAgICAgY29uc3QgZWZmZWN0cyA9IHRoaXMuZWZmZWN0c1xuICAgICAgICAuZmlsdGVyKGVmZmVjdCA9PiBDb0M3QWN0aXZlRWZmZWN0LmZpbHRlckFjdGl2ZUVmZmVjdHMoZWZmZWN0LCBjb25kaXRpb25OYW1lKSlcbiAgICAgICAgLm1hcChlZmZlY3QgPT4gZWZmZWN0LmlkKVxuICAgICAgaWYgKGVmZmVjdHMubGVuZ3RoID4gMCkge1xuICAgICAgICBhd2FpdCBzdXBlci5kZWxldGVFbWJlZGRlZERvY3VtZW50cygnQWN0aXZlRWZmZWN0JywgZWZmZWN0cylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvcmNlVmFsdWUgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmb3JjZVZhbHVlIHx8ICFnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdlbmFibGVTdGF0dXNJY29ucycpKSB7XG4gICAgICBzd2l0Y2ggKGNvbmRpdGlvbk5hbWUpIHtcbiAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy50ZW1wb0luc2FuZTpcbiAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy5pbmRlZkluc2FuZTpcbiAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy51bmNvbnNjaW91czpcbiAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy5jcml0aWNhbFdvdW5kczpcbiAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy5keWluZzpcbiAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy5wcm9uZTpcbiAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy5kZWFkOlxuICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlKHtcbiAgICAgICAgICAgIFtgc3lzdGVtLmNvbmRpdGlvbnMuJHtjb25kaXRpb25OYW1lfS4tPXZhbHVlYF06IG51bGxcbiAgICAgICAgICB9KVxuICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlKHtcbiAgICAgICAgICAgIFtgc3lzdGVtLmNvbmRpdGlvbnMuJHtjb25kaXRpb25OYW1lfS52YWx1ZWBdOiBmYWxzZVxuICAgICAgICAgIH0pXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBUT0RPIDogY2hlY2sgaWYgZXZlciB1c2VkXG4gIGFzeW5jIHJlc2V0Q291bnRlciAoY291bnRlcikge1xuICAgIGF3YWl0IHRoaXMudXBkYXRlKHsgW2NvdW50ZXJdOiAwIH0pXG4gIH1cblxuICBhc3luYyByZXNldERhaWx5U2FuaXR5ICgpIHtcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7XG4gICAgICAnc3lzdGVtLmF0dHJpYnMuc2FuLmRhaWx5TGltaXQnOiBNYXRoLmZsb29yKFxuICAgICAgICB0aGlzLnN5c3RlbS5hdHRyaWJzLnNhbi52YWx1ZSAvIDVcbiAgICAgICksXG4gICAgICAnc3lzdGVtLmF0dHJpYnMuc2FuLmRhaWx5TG9zcyc6IDBcbiAgICB9KVxuICB9XG5cbiAgZ2V0IGZpZ2h0aW5nU2tpbGxzICgpIHtcbiAgICBjb25zdCBza2lsbExpc3QgPSBbXVxuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdGhpcy5pdGVtcykge1xuICAgICAgaWYgKHZhbHVlLnR5cGUgPT09ICdza2lsbCcgJiYgdmFsdWUuc3lzdGVtLnByb3BlcnRpZXMuZmlnaHRpbmcpIHtcbiAgICAgICAgc2tpbGxMaXN0LnB1c2godmFsdWUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgc2tpbGxMaXN0LnNvcnQoQ29DN1V0aWxpdGllcy5zb3J0QnlOYW1lS2V5KVxuXG4gICAgcmV0dXJuIHNraWxsTGlzdFxuICB9XG5cbiAgZ2V0IGNsb3NlQ29tYmF0V2VhcG9ucyAoKSB7XG4gICAgY29uc3Qgd2VhcG9uTGlzdCA9IFtdXG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiB0aGlzLml0ZW1zKSB7XG4gICAgICBpZiAodmFsdWUudHlwZSA9PT0gJ3dlYXBvbicgJiYgIXZhbHVlLnN5c3RlbS5wcm9wZXJ0aWVzLnJuZ2QpIHtcbiAgICAgICAgY29uc3Qgc2tpbGwgPSB0aGlzLml0ZW1zLmdldCh2YWx1ZS5zeXN0ZW0uc2tpbGwubWFpbi5pZClcbiAgICAgICAgdmFsdWUuc3lzdGVtLnNraWxsLm1haW4udmFsdWUgPSBza2lsbCA/IHNraWxsLnZhbHVlIDogMFxuICAgICAgICB3ZWFwb25MaXN0LnB1c2godmFsdWUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgd2VhcG9uTGlzdC5zb3J0KENvQzdVdGlsaXRpZXMuc29ydEJ5TmFtZUtleSlcblxuICAgIHJldHVybiB3ZWFwb25MaXN0XG4gIH1cblxuICBnZXQgZmlyZWFybVNraWxscyAoKSB7XG4gICAgY29uc3Qgc2tpbGxMaXN0ID0gW11cbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHRoaXMuaXRlbXMpIHtcbiAgICAgIGlmICh2YWx1ZS50eXBlID09PSAnc2tpbGwnICYmICh2YWx1ZS5zeXN0ZW0ucHJvcGVydGllcy5maXJlYXJtIHx8IHZhbHVlLnN5c3RlbS5wcm9wZXJ0aWVzLnJhbmdlZCkpIHtcbiAgICAgICAgc2tpbGxMaXN0LnB1c2godmFsdWUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgc2tpbGxMaXN0LnNvcnQoQ29DN1V0aWxpdGllcy5zb3J0QnlOYW1lS2V5KVxuXG4gICAgcmV0dXJuIHNraWxsTGlzdFxuICB9XG5cbiAgZ2V0IHVzZXIgKCkge1xuICAgIC8vIGlzIHRoYXQgYWN0b3IgaW1wZXJzb25hbnRlZCBieSBhIHVzZXIgP1xuICAgIHJldHVybiBnYW1lLnVzZXJzLmZpbmQodXNlciA9PiB7XG4gICAgICBpZiAodXNlci5jaGFyYWN0ZXIpIHtcbiAgICAgICAgaWYgKHVzZXIuY2hhcmFjdGVyLmlkID09PSB0aGlzLmlkKSByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSlcbiAgfVxuXG4gIGdldCBkb2RnZVNraWxsICgpIHtcbiAgICBjb25zdCBza2lsbCA9IHRoaXMuZ2V0Rmlyc3RJdGVtQnlDb0NJRCgnaS5za2lsbC5kb2RnZScpXG4gICAgaWYgKHNraWxsKSB7XG4gICAgICByZXR1cm4gc2tpbGxcbiAgICB9XG4gICAgY29uc3Qgc2tpbGxMaXN0ID0gdGhpcy5nZXRTa2lsbHNCeU5hbWUoXG4gICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQ29DSURGbGFnLmtleXMuaS5za2lsbC5kb2RnZScpXG4gICAgKVxuICAgIGlmIChza2lsbExpc3QubGVuZ3RoICE9PSAwKSByZXR1cm4gc2tpbGxMaXN0WzBdXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGdldCBjcmVkaXRSYXRpbmdTa2lsbCAoKSB7XG4gICAgY29uc3Qgc2tpbGwgPSB0aGlzLmdldEZpcnN0SXRlbUJ5Q29DSUQoJ2kuc2tpbGwuY3JlZGl0LXJhdGluZycpXG4gICAgaWYgKHNraWxsKSB7XG4gICAgICByZXR1cm4gc2tpbGxcbiAgICB9XG4gICAgY29uc3Qgc2tpbGxMaXN0ID0gdGhpcy5nZXRTa2lsbHNCeU5hbWUoXG4gICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQ29DSURGbGFnLmtleXMuaS5za2lsbC5jcmVkaXQtcmF0aW5nJylcbiAgICApXG4gICAgaWYgKHNraWxsTGlzdC5sZW5ndGggIT09IDApIHJldHVybiBza2lsbExpc3RbMF1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgZ2V0IGN0aHVsaHVNeXRob3NTa2lsbCAoKSB7XG4gICAgY29uc3Qgc2tpbGwgPSB0aGlzLmdldEZpcnN0SXRlbUJ5Q29DSUQoJ2kuc2tpbGwuY3RodWxodS1teXRob3MnKVxuICAgIGlmIChza2lsbCkge1xuICAgICAgcmV0dXJuIHNraWxsXG4gICAgfVxuICAgIGNvbnN0IHNraWxsTGlzdCA9IHRoaXMuZ2V0U2tpbGxzQnlOYW1lKFxuICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNvQ0lERmxhZy5rZXlzLmkuc2tpbGwuY3RodWxodS1teXRob3MnKVxuICAgIClcbiAgICBpZiAoc2tpbGxMaXN0Lmxlbmd0aCAhPT0gMCkgcmV0dXJuIHNraWxsTGlzdFswXVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBnZXQgY3RodWxodU15dGhvcyAoKSB7XG4gICAgY29uc3QgQ00gPSB0aGlzLmN0aHVsaHVNeXRob3NTa2lsbFxuICAgIGlmIChDTSkge1xuICAgICAgY29uc3QgdmFsdWUgPSBDTS52YWx1ZVxuICAgICAgaWYgKHZhbHVlKSByZXR1cm4gdmFsdWVcbiAgICAgIHJldHVybiBwYXJzZUludChDTS5zeXN0ZW0udmFsdWUpXG4gICAgfVxuICAgIHJldHVybiAwXG4gIH1cblxuICBnZXQgbXl0aG9zSGFyZGVuZWQgKCkge1xuICAgIHJldHVybiB0aGlzLmdldEZsYWcoJ0NvQzcnLCAnbXl0aG9zSGFyZGVuZWQnKSB8fCBmYWxzZVxuICB9XG5cbiAgYXN5bmMgc2V0TXl0aG9zSGFyZGVuZWQgKCkge1xuICAgIGF3YWl0IHRoaXMuc2V0RmxhZygnQ29DNycsICdteXRob3NIYXJkZW5lZCcsIHRydWUpXG4gIH1cblxuICBnZXQgbXl0aG9zSW5zYW5pdHlFeHBlcmllbmNlZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RmxhZygnQ29DNycsICdteXRob3NJbnNhbml0eUV4cGVyaWVuY2VkJykgfHwgZmFsc2VcbiAgfVxuXG4gIGFzeW5jIGV4cGVyaWVuY2VGaXJzdE15dGhvc0luc2FuaXR5ICgpIHtcbiAgICBhd2FpdCB0aGlzLnNldEZsYWcoJ0NvQzcnLCAnbXl0aG9zSW5zYW5pdHlFeHBlcmllbmNlZCcsIHRydWUpXG4gIH1cblxuICBnZXQgY3JlZGl0UmF0aW5nICgpIHtcbiAgICBjb25zdCBDUiA9IHRoaXMuY3JlZGl0UmF0aW5nU2tpbGxcbiAgICBpZiAoQ1IpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gQ1IudmFsdWVcbiAgICAgIGlmICh2YWx1ZSkgcmV0dXJuIHZhbHVlXG4gICAgICByZXR1cm4gcGFyc2VJbnQoQ1Iuc3lzdGVtLnZhbHVlKVxuICAgIH1cbiAgICByZXR1cm4gMFxuICB9XG5cbiAgc3RhdGljIG1vbmV0YXJ5Rm9ybWF0IChmb3JtYXQsIHN5bWJvbCwgdmFsdWUpIHtcbiAgICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgICAgY2FzZSBDT0M3Lm1vbmV0YXJ5Rm9ybWF0S2V5cy5sc2Q6XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHZhbHVlIC8gMjQwKSArICcvJyArIChNYXRoLmZsb29yKHZhbHVlIC8gMTIpICUgMjApICsgJy8nICsgKHZhbHVlICUgMTIpXG4gICAgICBjYXNlIENPQzcubW9uZXRhcnlGb3JtYXRLZXlzLnJvbWFuOlxuICAgICAgICByZXR1cm4gKE1hdGguZmxvb3IodmFsdWUgLyA0MDApKSArICcvJyArIChNYXRoLmZsb29yKHZhbHVlIC8gMTYpICUgMjUpICsgJy8nICsgKE1hdGguZmxvb3IodmFsdWUgLyA4KSAlIDIpICsgJy8nICsgKE1hdGguZmxvb3IodmFsdWUgLyA0KSAlIDIpICsgJy8nICsgKHZhbHVlICUgNClcbiAgICAgIGNhc2UgQ09DNy5tb25ldGFyeUZvcm1hdEtleXMuZGVjaW1hbExlZnQ6XG4gICAgICAgIHJldHVybiBzeW1ib2wgKyBOdW1iZXIodmFsdWUpLnRvTG9jYWxlU3RyaW5nKHVuZGVmaW5lZCwgeyBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IDIgfSkucmVwbGFjZSgvXFwuMDAkLywgJycpXG4gICAgICBjYXNlIENPQzcubW9uZXRhcnlGb3JtYXRLZXlzLmRlY2ltYWxSaWdodDpcbiAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSkudG9Mb2NhbGVTdHJpbmcodW5kZWZpbmVkLCB7IG1pbmltdW1GcmFjdGlvbkRpZ2l0czogMiB9KS5yZXBsYWNlKC9cXC4wMCQvLCAnJykgKyAnICcgKyBzeW1ib2xcbiAgICAgIGNhc2UgQ09DNy5tb25ldGFyeUZvcm1hdEtleXMuaW50ZWdlckxlZnQ6XG4gICAgICAgIHJldHVybiBzeW1ib2wgKyBOdW1iZXIodmFsdWUpLnRvTG9jYWxlU3RyaW5nKClcbiAgICAgIGNhc2UgQ09DNy5tb25ldGFyeUZvcm1hdEtleXMuaW50ZWdlclJpZ2h0OlxuICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKS50b0xvY2FsZVN0cmluZygpICsgJyAnICsgc3ltYm9sXG4gICAgfVxuICAgIHJldHVybiAnMCdcbiAgfVxuXG4gIHN0YXRpYyBtb25ldGFyeVZhbHVlIChmb3JtYXQsIHZhbHVlcywgQ1IsIHR5cGUsIHZhbHVlKSB7XG4gICAgQ1IgPSBDUiB8fCAwXG4gICAgY29uc3Qgcm93ID0gdmFsdWVzLmZpbmQociA9PiAodHlwZW9mIHIubWluID09PSAnb2JqZWN0JyB8fCByLm1pbiA8PSBDUikgJiYgKHR5cGVvZiByLm1heCA9PT0gJ29iamVjdCcgfHwgci5tYXggPj0gQ1IpKVxuICAgIGlmICh0eXBlb2Ygcm93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygcm93W3R5cGVdICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygcm93W3ZhbHVlXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgICAgIGNhc2UgQ09DNy5tb25ldGFyeUZvcm1hdEtleXMubHNkOlxuICAgICAgICAgIHN3aXRjaCAocm93W3R5cGVdKSB7XG4gICAgICAgICAgICBjYXNlIENPQzcubW9uZXRhcnlUeXBlS2V5cy5tdWx0aXBsaWVyOlxuICAgICAgICAgICAgICByZXR1cm4gMjQwICogQ1IgKiByb3dbdmFsdWVdXG4gICAgICAgICAgICBjYXNlIENPQzcubW9uZXRhcnlUeXBlS2V5cy52YWx1ZTpcbiAgICAgICAgICAgICAgcmV0dXJuIDI0MCAqIHJvd1t2YWx1ZV1cbiAgICAgICAgICAgIGNhc2UgQ09DNy5tb25ldGFyeVR5cGVLZXlzLnM6XG4gICAgICAgICAgICAgIHJldHVybiAxMiAqIHJvd1t2YWx1ZV1cbiAgICAgICAgICAgIGNhc2UgQ09DNy5tb25ldGFyeVR5cGVLZXlzLmQ6XG4gICAgICAgICAgICAgIHJldHVybiAxICogcm93W3ZhbHVlXVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIENPQzcubW9uZXRhcnlGb3JtYXRLZXlzLnJvbWFuOlxuICAgICAgICAgIHN3aXRjaCAocm93W3R5cGVdKSB7XG4gICAgICAgICAgICBjYXNlIENPQzcubW9uZXRhcnlUeXBlS2V5cy5tdWx0aXBsaWVyOlxuICAgICAgICAgICAgICByZXR1cm4gNDAwICogQ1IgKiByb3dbdmFsdWVdXG4gICAgICAgICAgICBjYXNlIENPQzcubW9uZXRhcnlUeXBlS2V5cy52YWx1ZTpcbiAgICAgICAgICAgICAgcmV0dXJuIDQwMCAqIHJvd1t2YWx1ZV1cbiAgICAgICAgICAgIGNhc2UgQ09DNy5tb25ldGFyeVR5cGVLZXlzLmRlbmFyaWk6XG4gICAgICAgICAgICAgIHJldHVybiAxNiAqIHJvd1t2YWx1ZV1cbiAgICAgICAgICAgIGNhc2UgQ09DNy5tb25ldGFyeVR5cGVLZXlzLnF1aW5hcmlpOlxuICAgICAgICAgICAgICByZXR1cm4gOCAqIHJvd1t2YWx1ZV1cbiAgICAgICAgICAgIGNhc2UgQ09DNy5tb25ldGFyeVR5cGVLZXlzLnNlc3RlcnRpaTpcbiAgICAgICAgICAgICAgcmV0dXJuIDQgKiByb3dbdmFsdWVdXG4gICAgICAgICAgICBjYXNlIENPQzcubW9uZXRhcnlUeXBlS2V5cy5hc3NlczpcbiAgICAgICAgICAgICAgcmV0dXJuIDEgKiByb3dbdmFsdWVdXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgc3dpdGNoIChyb3dbdHlwZV0pIHtcbiAgICAgICAgICAgIGNhc2UgQ09DNy5tb25ldGFyeVR5cGVLZXlzLm11bHRpcGxpZXI6XG4gICAgICAgICAgICAgIHJldHVybiBDUiAqIHJvd1t2YWx1ZV1cbiAgICAgICAgICAgIGNhc2UgQ09DNy5tb25ldGFyeVR5cGVLZXlzLnZhbHVlOlxuICAgICAgICAgICAgICByZXR1cm4gMSAqIHJvd1t2YWx1ZV1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIDBcbiAgfVxuXG4gIGdldCBzcGVuZGluZ0xldmVsICgpIHtcbiAgICByZXR1cm4gQ29DQWN0b3IubW9uZXRhcnlWYWx1ZSh0aGlzLnN5c3RlbS5tb25ldGFyeS5mb3JtYXQsIHRoaXMuc3lzdGVtLm1vbmV0YXJ5LnZhbHVlcywgdGhpcy5jcmVkaXRSYXRpbmcsICdzcGVuZGluZ1R5cGUnLCAnc3BlbmRpbmdWYWx1ZScpXG4gIH1cblxuICBnZXQgY2FzaCAoKSB7XG4gICAgcmV0dXJuIENvQ0FjdG9yLm1vbmV0YXJ5VmFsdWUodGhpcy5zeXN0ZW0ubW9uZXRhcnkuZm9ybWF0LCB0aGlzLnN5c3RlbS5tb25ldGFyeS52YWx1ZXMsIHRoaXMuY3JlZGl0UmF0aW5nLCAnY2FzaFR5cGUnLCAnY2FzaFZhbHVlJylcbiAgfVxuXG4gIGdldCBhc3NldHMgKCkge1xuICAgIHJldHVybiBDb0NBY3Rvci5tb25ldGFyeVZhbHVlKHRoaXMuc3lzdGVtLm1vbmV0YXJ5LmZvcm1hdCwgdGhpcy5zeXN0ZW0ubW9uZXRhcnkudmFsdWVzLCB0aGlzLmNyZWRpdFJhdGluZywgJ2Fzc2V0c1R5cGUnLCAnYXNzZXRzVmFsdWUnKVxuICB9XG5cbiAgZ2V0IHNraWxscyAoKSB7XG4gICAgY29uc3Qgc2tpbGxMaXN0ID0gW11cbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHRoaXMuaXRlbXMpIHtcbiAgICAgIGlmICh2YWx1ZS50eXBlID09PSAnc2tpbGwnKSBza2lsbExpc3QucHVzaCh2YWx1ZSlcbiAgICB9XG5cbiAgICBza2lsbExpc3Quc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG5cbiAgICByZXR1cm4gc2tpbGxMaXN0XG4gIH1cblxuICBnZXQgb3duZXJzICgpIHtcbiAgICByZXR1cm4gZ2FtZS51c2Vycy5maWx0ZXIoXG4gICAgICB1ID0+IHRoaXMudGVzdFVzZXJQZXJtaXNzaW9uKHUsICdPV05FUicpICYmICF1LmlzR01cbiAgICApXG4gIH1cblxuICBnZXQgcGxheWVyICgpIHtcbiAgICByZXR1cm4gdGhpcy5vd25lcnMuZmlsdGVyKHUgPT4gdS5jaGFyYWN0ZXI/LmlkID09PSB0aGlzLmlkKVxuICB9XG5cbiAgZ2V0IGNoYXJhY3RlclVzZXIgKCkge1xuICAgIHJldHVybiAoXG4gICAgICBnYW1lLnVzZXJzLmNvbnRlbnRzLmZpbHRlcih1ID0+IHUuY2hhcmFjdGVyPy5pZCA9PT0gdGhpcy5pZClbMF0gfHwgbnVsbFxuICAgIClcbiAgfVxuXG4gIGFzeW5jIHNldEhwICh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMFxuICAgIGlmICh2YWx1ZSA+IHRoaXMuc3lzdGVtLmF0dHJpYnMuaHAubWF4KSB7XG4gICAgICB2YWx1ZSA9IHRoaXMuc3lzdGVtLmF0dHJpYnMuaHAubWF4XG4gICAgfVxuICAgIGNvbnN0IGhlYWx0aEJlZm9yZSA9IHRoaXMuaHBcbiAgICBsZXQgZGFtYWdlVGFrZW5cbiAgICAvLyBpcyBoZWFsaW5nXG4gICAgaWYgKGlzTmFOKGhlYWx0aEJlZm9yZSkgfHwgdmFsdWUgPj0gaGVhbHRoQmVmb3JlKSB7XG4gICAgICBhd2FpdCB0aGlzLl9zZXRIcCh2YWx1ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgZGFtYWdlVGFrZW4gPSBoZWFsdGhCZWZvcmUgLSB2YWx1ZVxuICAgICAgYXdhaXQgdGhpcy5kZWFsRGFtYWdlKGRhbWFnZVRha2VuLCB7IGlnbm9yZUFybW9yOiB0cnVlIH0pXG4gICAgfVxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgYXN5bmMgZGVhbERhbWFnZSAoYW1vdW50LCBvcHRpb25zID0ge30pIHtcbiAgICAvLyBUT0RPOiBDaGFuZ2Ugb3B0aW9ucyB0byBsaXN0IG9mIHZhbHVlc1xuICAgIGNvbnN0IGFybW9yRGF0YSA9IG9wdGlvbnMuYXJtb3JcbiAgICAgID8gb3B0aW9ucy5hcm1vclxuICAgICAgOiB0aGlzLnN5c3RlbS5hdHRyaWJzLmFybW9yIC8vIGlmIHRoZXJlIGFybW9yIHZhbHVlIHBhc3NlZCB3ZSB1c2UgaXRcbiAgICBjb25zdCBncm9zc0RhbWFnZSA9IHBhcnNlSW50KGFtb3VudClcbiAgICBsZXQgYXJtb3JWYWx1ZSA9IDBcbiAgICBpZiAoIW9wdGlvbnMuaWdub3JlQXJtb3IpIHtcbiAgICAgIGlmIChhcm1vckRhdGEgPT09IG51bGwpIHtcbiAgICAgICAgLy8gbm9wXG4gICAgICB9IGVsc2UgaWYgKENvQzdVdGlsaXRpZXMuaXNGb3JtdWxhKGFybW9yRGF0YSkpIHtcbiAgICAgICAgYXJtb3JWYWx1ZSA9IChhd2FpdCBuZXcgUm9sbChhcm1vckRhdGEpLnJvbGwoeyBhc3luYzogdHJ1ZSB9KSkudG90YWxcbiAgICAgIH0gZWxzZSBpZiAoIWlzTmFOKE51bWJlcihhcm1vckRhdGEpKSkge1xuICAgICAgICBhcm1vclZhbHVlID0gTnVtYmVyKGFybW9yRGF0YSlcbiAgICAgIH0gZWxzZSBpZiAoIWlzTmFOKE51bWJlcihhcm1vckRhdGE/LnZhbHVlKSkpIHtcbiAgICAgICAgYXJtb3JWYWx1ZSA9IE51bWJlcihhcm1vckRhdGEudmFsdWUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1aS5ub3RpZmljYXRpb25zLndhcm4oXG4gICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FcnJvclVuYWJsZVRvUGFyc2VBcm1vckZvcm11bGEnLCB7XG4gICAgICAgICAgICB2YWx1ZTogYXJtb3JEYXRhXG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBuZXREYW1hZ2UgPSBncm9zc0RhbWFnZSAtIGFybW9yVmFsdWVcbiAgICBpZiAobmV0RGFtYWdlIDw9IDApIHJldHVybiAwXG4gICAgYXdhaXQgdGhpcy5fc2V0SHAodGhpcy5ocCAtIG5ldERhbWFnZSlcbiAgICBpZiAobmV0RGFtYWdlID49IHRoaXMuc3lzdGVtLmF0dHJpYnMuaHAubWF4KSB7XG4gICAgICBhd2FpdCB0aGlzLnNldENvbmRpdGlvbihDT0M3LnN0YXR1cy5kZWFkKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAncHVscFJ1bGVJZ25vcmVNYWpvcldvdW5kcycpKSB7XG4gICAgICAgIGlmICh0aGlzLmhwID09PSAwKSB7XG4gICAgICAgICAgaWYgKG5ldERhbWFnZSA+PSBNYXRoLmNlaWwodGhpcy5zeXN0ZW0uYXR0cmlicy5ocC5tYXggLyAyKSkge1xuICAgICAgICAgICAgdGhpcy5zZXRDb25kaXRpb24oQ09DNy5zdGF0dXMuZHlpbmcpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q29uZGl0aW9uKENPQzcuc3RhdHVzLnVuY29uc2Npb3VzKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChuZXREYW1hZ2UgPj0gTWF0aC5jZWlsKHRoaXMuc3lzdGVtLmF0dHJpYnMuaHAubWF4IC8gMikpIHtcbiAgICAgICAgICBjb25zdCBjb25DaGVjayA9IG5ldyBDb0M3Q29uQ2hlY2soXG4gICAgICAgICAgICB0aGlzLmlzVG9rZW4gPyB0aGlzLnRva2VuS2V5IDogdGhpcy5pZFxuICAgICAgICAgIClcbiAgICAgICAgICBjb25DaGVjay50b01lc3NhZ2UoKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgaGFzTWFqb3JXb3VuZCA9IGZhbHNlXG4gICAgICAgIGlmIChuZXREYW1hZ2UgPj0gTWF0aC5jZWlsKHRoaXMuc3lzdGVtLmF0dHJpYnMuaHAubWF4IC8gMikpIHtcbiAgICAgICAgICBhd2FpdCB0aGlzLnNldENvbmRpdGlvbihDT0M3LnN0YXR1cy5jcml0aWNhbFdvdW5kcylcbiAgICAgICAgICBoYXNNYWpvcldvdW5kID0gdHJ1ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhhc01ham9yV291bmQgPSB0aGlzLmhhc0NvbmRpdGlvblN0YXR1cyhDT0M3LnN0YXR1cy5jcml0aWNhbFdvdW5kcylcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5ocCA9PT0gMCkge1xuICAgICAgICAgIGF3YWl0IHRoaXMuc2V0Q29uZGl0aW9uKENPQzcuc3RhdHVzLnVuY29uc2Npb3VzKVxuICAgICAgICAgIGlmIChoYXNNYWpvcldvdW5kKSB7XG4gICAgICAgICAgICB0aGlzLnNldENvbmRpdGlvbihDT0M3LnN0YXR1cy5keWluZylcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldERhbWFnZVxuICB9XG5cbiAgZ2V0IG1ham9yV291bmQgKCkge1xuICAgIHJldHVybiB0aGlzLmhhc0NvbmRpdGlvblN0YXR1cyhDT0M3LnN0YXR1cy5jcml0aWNhbFdvdW5kcylcbiAgfVxuXG4gIGdldCBkeWluZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzQ29uZGl0aW9uU3RhdHVzKENPQzcuc3RhdHVzLmR5aW5nKVxuICB9XG5cbiAgZ2V0IHVuY29uc2Npb3VzICgpIHtcbiAgICByZXR1cm4gdGhpcy5oYXNDb25kaXRpb25TdGF0dXMoQ09DNy5zdGF0dXMudW5jb25zY2lvdXMpXG4gIH1cblxuICBnZXQgZGVhZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzQ29uZGl0aW9uU3RhdHVzKENPQzcuc3RhdHVzLmRlYWQpXG4gIH1cblxuICBnZXQgcHJvbmUgKCkge1xuICAgIHJldHVybiB0aGlzLmhhc0NvbmRpdGlvblN0YXR1cyhDT0M3LnN0YXR1cy5wcm9uZSlcbiAgfVxuXG4gIC8vIHN0YXRpYyB1cGRhdGVBY3RvciggYWN0b3IsIGRhdGFVcGRhdGUpe1xuICAvLyAgIGlmKCBnYW1lLnVzZXIuaXNHTSl7XG4gIC8vICAgICAvLyB1aS5ub3RpZmljYXRpb25zLmluZm8oIGB1cGRhdGluZyBhY3RvciAke2FjdG9yLm5hbWV9YCk7XG4gIC8vICAgICBjb25zdCBwcm9uZSA9IGRhdGFVcGRhdGU/LmZsYWdzPy5Db0M3W0NPQzcuc3RhdHVzLnByb25lXTtcbiAgLy8gICAgIGNvbnN0IHVuY29uc2Npb3VzID0gZGF0YVVwZGF0ZT8uZmxhZ3M/LkNvQzdbQ09DNy5zdGF0dXMudW5jb25zY2lvdXNdO1xuICAvLyAgICAgY29uc3QgY3JpdGljYWxXb3VuZHMgPSBkYXRhVXBkYXRlPy5mbGFncz8uQ29DN1tDT0M3LnN0YXR1cy5jcml0aWNhbFdvdW5kc107XG4gIC8vICAgICBjb25zdCBkeWluZyA9IGRhdGFVcGRhdGU/LmZsYWdzPy5Db0M3W0NPQzcuc3RhdHVzLmR5aW5nXTtcbiAgLy8gICAgIGlmKCBwcm9uZSkgdWkubm90aWZpY2F0aW9ucy5pbmZvKCBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkluZm9BY3RvclByb25lJywge2FjdG9yOiBhY3Rvci5uYW1lfSkpO1xuICAvLyAgICAgaWYoIHVuY29uc2Npb3VzKSB1aS5ub3RpZmljYXRpb25zLmluZm8oIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuSW5mb0FjdG9yVW5jb25zY2lvdXMnLCB7YWN0b3I6IGFjdG9yLm5hbWV9KSk7XG4gIC8vICAgICBpZiggY3JpdGljYWxXb3VuZHMpIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyggZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5JbmZvQWN0b3JNYWpvcldvdW5kJywge2FjdG9yOiBhY3Rvci5uYW1lfSkpO1xuICAvLyAgICAgaWYoIGR5aW5nKSB1aS5ub3RpZmljYXRpb25zLmluZm8oIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuSW5mb0FjdG9yRHlpbmcnLCB7YWN0b3I6IGFjdG9yLm5hbWV9KSk7XG4gIC8vICAgfVxuICAvLyAgIHJldHVybjtcbiAgLy8gfVxuXG4gIC8vIFwiQ29DNy5JbmZvQWN0b3JQcm9uZVwiOiBcInthY3Rvcn0gZmFsbCBwcm9uZVwiLFxuICAvLyBcIkNvQzcuSW5mb0FjdG9yVW5jb25zY2lvdXNcIjogXCJ7YWN0b3J9IGZhbGwgdW5jb25zY2lvdXNcIixcbiAgLy8gXCJDb0M3LkluZm9BY3Rvck1ham9yV291bmRcIjogXCJ7YWN0b3J9IGdldCBhIG1ham9yIHdvdW5kXCIsXG4gIC8vIFwiQ29DNy5JbmZvQWN0b3JEeWluZ1wiOiBcInthY29yfSBpcyBkeWluZ1wiLFxuICAvLyBcIkNvQzcuSW5mb0FjdG9ySW5qdXJpZWRcIjogXCJ7YWN0b3J9IGlzIGluanVyaWVkXCIsXG5cbiAgLy8gc3RhdGljIHVwZGF0ZVRva2VuKCBzY2VuZSwgdG9rZW4sIGRhdGFVcGRhdGUpe1xuICAvLyAgIGNvbnN0IGluanVyaWVkID0gZGF0YVVwZGF0ZT8uYWN0b3JEYXRhPy5mbGFncz8uQ29DNz8uaW5qdXJpZWQ7XG4gIC8vICAgaWYoIGluanVyaWVkKSB1aS5ub3RpZmljYXRpb25zLmluZm8oIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuSW5mb0FjdG9ySW5qdXJpZWQnLCB7YWN0b3I6IHRva2VuLm5hbWV9KSk7XG4gIC8vICAgcmV0dXJuO1xuICAvLyB9XG5cbiAgLy8gYXN5bmMgdXBkYXRlIChkYXRhID0ge30sIGNvbnRleHQgPSB7fSkge1xuICAvLyAgIGNvbnNvbGUubG9nKCc+Pj4+JywgZGF0YSwgY29udGV4dClcbiAgLy8gICBzdXBlci51cGRhdGUoZGF0YSwgY29udGV4dClcbiAgLy8gfVxufVxuIiwiLyogZ2xvYmFsICQsIEFjdG9yLCBBdWRpb0hlbHBlciwgQ2hhdE1lc3NhZ2UsIENPTkZJRywgQ09OU1QsIGZvdW5kcnksIGZyb21VdWlkLCBnYW1lLCBnZXRDb21wdXRlZFN0eWxlLCBJdGVtLCByZW5kZXJUZW1wbGF0ZSwgVG9rZW4sIHVpICovXG5pbXBvcnQgeyBDb0M3RGljZSB9IGZyb20gJy4vZGljZS5qcydcbmltcG9ydCB7IENvQzdJdGVtIH0gZnJvbSAnLi9pdGVtcy9pdGVtLmpzJ1xuaW1wb3J0IHsgY2hhdEhlbHBlciwgQ29DN1JvbGwgfSBmcm9tICcuL2NoYXQvaGVscGVyLmpzJ1xuaW1wb3J0IHsgQ29DQWN0b3IgfSBmcm9tICcuL2FjdG9ycy9hY3Rvci5qcydcbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuL3V0aWxpdGllcy5qcydcblxuZXhwb3J0IGNsYXNzIENvQzdDaGVjayB7XG4gIGNvbnN0cnVjdG9yIChcbiAgICBhY3RvciA9IG51bGwsXG4gICAgc2tpbGwgPSBudWxsLFxuICAgIGl0ZW0gPSBudWxsLFxuICAgIGRpY2VNb2QgPSAwLFxuICAgIGRpZmZpY3VsdHkgPSBudWxsLFxuICAgIGZsYXRUaHJlc2hvbGRNb2RpZmllciA9IDAsXG4gICAgZmxhdERpY2VNb2RpZmllciA9IDBcbiAgKSB7XG4gICAgdGhpcy5hY3RvciA9IGFjdG9yXG4gICAgdGhpcy5za2lsbCA9IHNraWxsXG4gICAgdGhpcy5pdGVtID0gaXRlbVxuICAgIHRoaXMuZGlmZmljdWx0eSA9IGRpZmZpY3VsdHlcbiAgICB0aGlzLmRpY2VNb2RpZmllciA9IGRpY2VNb2RcbiAgICB0aGlzLnJhd1ZhbHVlID0gMCAvLyB2YWx1ZSBuZWVkZWQgYmVmb3JlIGRpZmZpY3VsdHlcbiAgICB0aGlzLnN1Y2Nlc3NMZXZlbCA9IG51bGxcbiAgICB0aGlzLnJlZmVyZW5jZU1lc3NhZ2VJZCA9IG51bGxcbiAgICB0aGlzLnB1c2hpbmcgPSBmYWxzZVxuICAgIHRoaXMuZmxhdERpY2VNb2RpZmllciA9IGZsYXREaWNlTW9kaWZpZXJcbiAgICB0aGlzLmZsYXRUaHJlc2hvbGRNb2RpZmllciA9IGZsYXRUaHJlc2hvbGRNb2RpZmllclxuXG4gICAgaWYgKGRpZmZpY3VsdHkgPT09IG51bGwpIHtcbiAgICAgIGNvbnN0IGlzVW5rbm93biA9XG4gICAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2RlZmF1bHRDaGVja0RpZmZpY3VsdHknKSA9PT0gJ3Vua25vd24nXG4gICAgICB0aGlzLmRpZmZpY3VsdHkgPSBpc1Vua25vd25cbiAgICAgICAgPyBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnVua25vd25cbiAgICAgICAgOiBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXJcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0IGNhcmRUeXBlICgpIHtcbiAgICByZXR1cm4gJ3JvbGxDYXJkJ1xuICB9XG5cbiAgc3RhdGljIGdldCBkaWZmaWN1bHR5TGV2ZWwgKCkge1xuICAgIHJldHVybiB7XG4gICAgICB1bmtub3duOiAtMSxcbiAgICAgIHJlZ3VsYXI6IDEsXG4gICAgICBoYXJkOiAyLFxuICAgICAgZXh0cmVtZTogMyxcbiAgICAgIGNyaXRpY2FsOiA0LFxuICAgICAgaW1wb3NzaWJsZTogOVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXQgc3VjY2Vzc0xldmVsICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZnVtYmxlOiAtOTksXG4gICAgICBmYWlsdXJlOiAwLFxuICAgICAgcmVndWxhcjogMSxcbiAgICAgIGhhcmQ6IDIsXG4gICAgICBleHRyZW1lOiAzLFxuICAgICAgY3JpdGljYWw6IDRcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjaGFyYWN0ZXJpc3RpYzogJ2NoYXJhY3RlcmlzdGljJyxcbiAgICAgIGF0dHJpYnV0ZTogJ2F0dHJpYnV0ZScsXG4gICAgICBza2lsbDogJ2l0ZW0nLFxuICAgICAgaXRlbTogJ2l0ZW0nLFxuICAgICAgdmFsdWU6ICd2YWx1ZSdcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZGlmZmljdWx0eVN0cmluZyAoZGlmZmljdWx0eUxldmVsKSB7XG4gICAgc3dpdGNoIChcbiAgICAgICFpc05hTihOdW1iZXIoZGlmZmljdWx0eUxldmVsKSlcbiAgICAgICAgPyBOdW1iZXIoZGlmZmljdWx0eUxldmVsKVxuICAgICAgICA6IGRpZmZpY3VsdHlMZXZlbFxuICAgICkge1xuICAgICAgY2FzZSAnPyc6XG4gICAgICAgIHJldHVybiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuVW5rbm93bkRpZmZpY3VsdHknKVxuICAgICAgY2FzZSAnKyc6XG4gICAgICAgIHJldHVybiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuSGFyZERpZmZpY3VsdHknKVxuICAgICAgY2FzZSAnKysnOlxuICAgICAgICByZXR1cm4gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkV4dHJlbWVEaWZmaWN1bHR5JylcbiAgICAgIGNhc2UgJysrKyc6XG4gICAgICAgIHJldHVybiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQ3JpdGljYWxEaWZmaWN1bHR5JylcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5SZWd1bGFyRGlmZmljdWx0eScpXG4gICAgICBjYXNlIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwudW5rbm93bjpcbiAgICAgICAgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Vbmtub3duRGlmZmljdWx0eScpXG4gICAgICBjYXNlIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhcjpcbiAgICAgICAgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5SZWd1bGFyRGlmZmljdWx0eScpXG4gICAgICBjYXNlIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuaGFyZDpcbiAgICAgICAgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5IYXJkRGlmZmljdWx0eScpXG4gICAgICBjYXNlIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuZXh0cmVtZTpcbiAgICAgICAgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FeHRyZW1lRGlmZmljdWx0eScpXG4gICAgICBjYXNlIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuY3JpdGljYWw6XG4gICAgICAgIHJldHVybiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQ3JpdGljYWxEaWZmaWN1bHR5JylcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG5cbiAgZ2V0IHJhd1ZhbHVlICgpIHtcbiAgICAvLyBpZiAoIXRoaXMuYWN0b3IgfHwgIXRoaXMuYWN0b3IuaWQpIHJldHVybiB1bmRlZmluZWRcbiAgICBpZiAoIXRoaXMuX3Jhd1ZhbHVlKSB7XG4gICAgICBpZiAodGhpcy5jaGFyYWN0ZXJpc3RpYykge1xuICAgICAgICB0aGlzLnJhd1ZhbHVlID1cbiAgICAgICAgICB0aGlzLmFjdG9yLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3NbdGhpcy5jaGFyYWN0ZXJpc3RpY10udmFsdWVcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnNraWxsKSB0aGlzLnJhd1ZhbHVlID0gdGhpcy5za2lsbC52YWx1ZVxuICAgICAgaWYgKHRoaXMuYXR0cmlidXRlKSB7XG4gICAgICAgIHRoaXMucmF3VmFsdWUgPSB0aGlzLmFjdG9yLnN5c3RlbS5hdHRyaWJzW3RoaXMuYXR0cmlidXRlXS52YWx1ZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5fcmF3VmFsdWUpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5mbGF0VGhyZXNob2xkTW9kaWZpZXIgJiZcbiAgICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnYWxsb3dGbGF0VGhyZXNob2xkTW9kaWZpZXInKVxuICAgICAgKSB7XG4gICAgICAgIGlmICh0aGlzLl9yYXdWYWx1ZSArIHRoaXMuZmxhdFRocmVzaG9sZE1vZGlmaWVyIDwgMSkgcmV0dXJuIDFcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jhd1ZhbHVlICsgdGhpcy5mbGF0VGhyZXNob2xkTW9kaWZpZXJcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9yYXdWYWx1ZVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBzZXQgcmF3VmFsdWUgKHgpIHtcbiAgICB0aGlzLl9yYXdWYWx1ZSA9IHhcbiAgfVxuXG4gIHNldCB1dWlkICh4KSB7XG4gICAgdGhpcy5fdXVpZCA9IHhcbiAgfVxuXG4gIGdldCB1dWlkICgpIHtcbiAgICBpZiAoIXRoaXMuX3V1aWQpIHRoaXMuX3V1aWQgPSBmb3VuZHJ5LnV0aWxzLnJhbmRvbUlEKDE2KVxuICAgIHJldHVybiB0aGlzLl91dWlkXG4gIH1cblxuICBnZXQgaGFzQ2FyZCAoKSB7XG4gICAgY29uc3QgY2hhdENhcmQgPSB1aS5jaGF0LmNvbGxlY3Rpb24uZmlsdGVyKG1lc3NhZ2UgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy51dWlkID09PSBtZXNzYWdlLmdldEZsYWcoJ0NvQzcnLCAndXVpZCcpICYmXG4gICAgICAgIENvQzdDaGVjay5jYXJkVHlwZSA9PT0gbWVzc2FnZS5nZXRGbGFnKCdDb0M3JywgJ3R5cGUnKVxuICAgICAgKVxuICAgIH0pXG4gICAgaWYgKGNoYXRDYXJkLmxlbmd0aCA+IDApIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBnZXQgcmF3VmFsdWVTdHJpbmcgKCkge1xuICAgIGlmICh0aGlzLl9yYXdWYWx1ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuICcwJ1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX3Jhd1ZhbHVlKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgaWYgKFxuICAgICAgdGhpcy5mbGF0VGhyZXNob2xkTW9kaWZpZXIgJiZcbiAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2FsbG93RmxhdFRocmVzaG9sZE1vZGlmaWVyJylcbiAgICApIHtcbiAgICAgIGlmICh0aGlzLmZsYXRUaHJlc2hvbGRNb2RpZmllciA8IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jhd1ZhbHVlLnRvU3RyaW5nKCkgKyB0aGlzLmZsYXRUaHJlc2hvbGRNb2RpZmllci50b1N0cmluZygpXG4gICAgICB9XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLl9yYXdWYWx1ZS50b1N0cmluZygpICsgJysnICsgdGhpcy5mbGF0VGhyZXNob2xkTW9kaWZpZXIudG9TdHJpbmcoKVxuICAgICAgKVxuICAgIH0gZWxzZSByZXR1cm4gdGhpcy5fcmF3VmFsdWUudG9TdHJpbmcoKVxuICB9XG5cbiAgZ2V0IGNyaXRpY2FsVGhyZXNob2xkICgpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgZ2V0IHJlZ3VsYXJUaHJlc2hvbGQgKCkge1xuICAgIGlmICh0aGlzLnJhd1ZhbHVlKSB7XG4gICAgICBpZiAodGhpcy5yYXdWYWx1ZSA+PSAxMDApIHJldHVybiA5OVxuICAgICAgcmV0dXJuIHBhcnNlSW50KHRoaXMucmF3VmFsdWUpXG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBnZXQgaGFyZFRocmVzaG9sZCAoKSB7XG4gICAgaWYgKHRoaXMucmF3VmFsdWUpIHJldHVybiBNYXRoLmZsb29yKHRoaXMucmF3VmFsdWUgLyAyKVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBnZXQgZXh0cmVtZVRocmVzaG9sZCAoKSB7XG4gICAgaWYgKHRoaXMucmF3VmFsdWUpIHJldHVybiBNYXRoLmZsb29yKHRoaXMucmF3VmFsdWUgLyA1KVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBnZXQgZnVtYmxlVGhyZXNob2xkICgpIHtcbiAgICBpZiAodGhpcy5yYXdWYWx1ZSkge1xuICAgICAgaWYgKHRoaXMuZGlmZmljdWx0eSkge1xuICAgICAgICBpZiAodGhpcy5kaWZmaWN1bHR5ID49IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuZXh0cmVtZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmV4dHJlbWVUaHJlc2hvbGQgPCA1MCA/IDk2IDogMTAwXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5kaWZmaWN1bHR5ID49IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuaGFyZCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmhhcmRUaHJlc2hvbGQgPCA1MCA/IDk2IDogMTAwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnJhd1ZhbHVlIDwgNTAgPyA5NiA6IDEwMFxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgZ2V0IHN1Y2Nlc1RocmVzaG9sZCAoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmRpZmZpY3VsdHkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuZGlmZmljdWx0eSkge1xuICAgICAgICBjYXNlIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuZXh0cmVtZTpcbiAgICAgICAgICByZXR1cm4gdGhpcy5leHRyZW1lVGhyZXNob2xkXG4gICAgICAgIGNhc2UgQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5oYXJkOlxuICAgICAgICAgIHJldHVybiB0aGlzLmhhcmRUaHJlc2hvbGRcbiAgICAgICAgY2FzZSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVndWxhclRocmVzaG9sZFxuICAgICAgICBjYXNlIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuY3JpdGljYWw6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY3JpdGljYWxUaHJlc2hvbGRcbiAgICAgICAgY2FzZSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnVua25vd246XG4gICAgICAgICAgcmV0dXJuIC0xXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmF3VmFsdWVcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGdldCBkaWZmaWN1bHR5U3RyaW5nICgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuZGlmZmljdWx0eSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5kaWZmaWN1bHR5KSB7XG4gICAgICAgIGNhc2UgQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5leHRyZW1lOlxuICAgICAgICAgIHJldHVybiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkV4dHJlbWVEaWZmaWN1bHR5JylcbiAgICAgICAgY2FzZSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmhhcmQ6XG4gICAgICAgICAgcmV0dXJuIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuSGFyZERpZmZpY3VsdHknKVxuICAgICAgICBjYXNlIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhcjpcbiAgICAgICAgICByZXR1cm4gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5SZWd1bGFyRGlmZmljdWx0eScpXG4gICAgICAgIGNhc2UgQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5jcml0aWNhbDpcbiAgICAgICAgICByZXR1cm4gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Dcml0aWNhbERpZmZpY3VsdHknKVxuICAgICAgICBjYXNlIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwudW5rbm93bjpcbiAgICAgICAgICByZXR1cm4gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Vbmtub3duRGlmZmljdWx0eScpXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuICcnXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgZ2V0IG1vZGlmaWVkUmVzdWx0ICgpIHtcbiAgICBpZiAodGhpcy5zdGFuZGJ5KSByZXR1cm4gdW5kZWZpbmVkXG4gICAgaWYgKHR5cGVvZiB0aGlzLl9tb2RpZmllZFJlc3VsdCAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiB0aGlzLl9tb2RpZmllZFJlc3VsdFxuICAgIGlmICh0aGlzLmZsYXREaWNlTW9kaWZpZXIpIHtcbiAgICAgIGNvbnN0IG1vZGlmaWVkID0gdGhpcy5kaWNlcy50b3RhbCArIHRoaXMuZmxhdERpY2VNb2RpZmllclxuICAgICAgaWYgKG1vZGlmaWVkIDwgMSkgcmV0dXJuIDFcbiAgICAgIGlmIChtb2RpZmllZCA+IDEwMCkgcmV0dXJuIDEwMFxuICAgICAgcmV0dXJuIG1vZGlmaWVkXG4gICAgfVxuICAgIHJldHVybiB0aGlzLmRpY2VzLnRvdGFsXG4gIH1cblxuICBzZXQgbW9kaWZpZWRSZXN1bHQgKHgpIHtcbiAgICB0aGlzLl9tb2RpZmllZFJlc3VsdCA9IHhcbiAgfVxuXG4gIGdldCBmbGF0RGljZU1vZGlmaWVyU3RyaW5nICgpIHtcbiAgICBpZiAoIXRoaXMuZmxhdERpY2VNb2RpZmllcikgcmV0dXJuIG51bGxcbiAgICBpZiAodGhpcy5mbGF0RGljZU1vZGlmaWVyID4gMCkgcmV0dXJuIGArJHt0aGlzLmZsYXREaWNlTW9kaWZpZXJ9YFxuICAgIHJldHVybiB0aGlzLmZsYXREaWNlTW9kaWZpZXIudG9TdHJpbmcoKVxuICB9XG5cbiAgZ2V0IGlzRnVtYmxlICgpIHtcbiAgICBpZiAodGhpcy5zdGFuZGJ5KSByZXR1cm4gdW5kZWZpbmVkXG4gICAgaWYgKHRoaXMuaXNTaW1wbGVSb2xsKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMubW9kaWZpZWRSZXN1bHQgPj0gdGhpcy5mdW1ibGVUaHJlc2hvbGRcbiAgfVxuXG4gIGdldCBpc0NyaXRpY2FsICgpIHtcbiAgICBpZiAodGhpcy5zdGFuZGJ5KSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMubW9kaWZpZWRSZXN1bHQgPT09IDFcbiAgfVxuXG4gIGdldCBpc0V4dHJlbWVTdWNjZXNzICgpIHtcbiAgICBpZiAodGhpcy5zdGFuZGJ5KSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMuc3VjY2Vzc0xldmVsID49IENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZXh0cmVtZVxuICB9XG5cbiAgZ2V0IHBhc3NlZCAoKSB7XG4gICAgaWYgKHRoaXMuc3RhbmRieSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGlmICh0aGlzLmlzU2ltcGxlUm9sbCkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGlmICh0aGlzLmx1Y2tTcGVudCkgcmV0dXJuIHRoaXMuZGlmZmljdWx0eSA8PSB0aGlzLnN1Y2Nlc3NMZXZlbFxuICAgIHJldHVybiB0aGlzLnN1Y2Nlc1RocmVzaG9sZCA+PSB0aGlzLm1vZGlmaWVkUmVzdWx0IHx8IHRoaXMuaXNDcml0aWNhbFxuICB9XG5cbiAgZ2V0IGZhaWxlZCAoKSB7XG4gICAgaWYgKHRoaXMuc3RhbmRieSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGlmICh0aGlzLmlzU2ltcGxlUm9sbCkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiAhdGhpcy5wYXNzZWRcbiAgfVxuXG4gIGdldCBpc1NpbXBsZVJvbGwgKCkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy5yYXdWYWx1ZSA9PT0gJ3VuZGVmaW5lZCdcbiAgfVxuXG4gIGdldCBoYXNCb251cyAoKSB7XG4gICAgaWYgKHRoaXMuZGljZU1vZGlmaWVyICYmIHRoaXMuZGljZU1vZGlmaWVyID4gMCkgcmV0dXJuIHRydWVcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGdldCBoYXNQZW5hbHR5ICgpIHtcbiAgICBpZiAodGhpcy5kaWNlTW9kaWZpZXIgJiYgdGhpcy5kaWNlTW9kaWZpZXIgPCAwKSByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZ2V0IGhhc01vZGlmaWVyICgpIHtcbiAgICBpZiAodGhpcy5kaWNlTW9kaWZpZXIgJiYgdGhpcy5kaWNlTW9kaWZpZXIgIT09IDApIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBnZXQgZGljZU1vZGlmaWVyICgpIHtcbiAgICBpZiAodGhpcy5fZGljZU1vZGlmaWVyKSByZXR1cm4gdGhpcy5fZGljZU1vZGlmaWVyXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHNldCBkaWNlTW9kaWZpZXIgKHgpIHtcbiAgICB0aGlzLl9kaWNlTW9kaWZpZXIgPSBwYXJzZUludCh4KVxuICB9XG5cbiAgZ2V0IG5hbWUgKCkge1xuICAgIGlmICh0aGlzLmFjdG9yKSB7XG4gICAgICBpZiAodGhpcy5za2lsbCkgcmV0dXJuIHRoaXMuc2tpbGwuc2hvcnROYW1lXG4gICAgICBpZiAodGhpcy5pdGVtKSByZXR1cm4gdGhpcy5pdGVtLm5hbWVcbiAgICAgIGlmICh0aGlzLmNoYXJhY3RlcmlzdGljKSB7XG4gICAgICAgIHJldHVybiBDb0M3VXRpbGl0aWVzLmdldENoYXJhY3RlcmlzdGljTmFtZXModGhpcy5jaGFyYWN0ZXJpc3RpYyk/LmxhYmVsXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5hdHRyaWJ1dGUpIHtcbiAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlID09PSAnbGNrJykgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5MdWNrJylcbiAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlID09PSAnc2FuJykgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5TYW5pdHknKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgZ2V0IHNob3J0TmFtZSAoKSB7XG4gICAgaWYgKHRoaXMuYWN0b3IpIHtcbiAgICAgIGlmICh0aGlzLnNraWxsKSByZXR1cm4gdGhpcy5za2lsbC5zaG9ydE5hbWVcbiAgICAgIGlmICh0aGlzLml0ZW0pIHJldHVybiB0aGlzLml0ZW0ubmFtZVxuICAgICAgaWYgKHRoaXMuY2hhcmFjdGVyaXN0aWMpIHtcbiAgICAgICAgcmV0dXJuIENvQzdVdGlsaXRpZXMuZ2V0Q2hhcmFjdGVyaXN0aWNOYW1lcyh0aGlzLmNoYXJhY3RlcmlzdGljKT8uc2hvcnRcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZSkge1xuICAgICAgICBpZiAodGhpcy5hdHRyaWJ1dGUgPT09ICdsY2snKSByZXR1cm4gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lkx1Y2snKVxuICAgICAgICBpZiAodGhpcy5hdHRyaWJ1dGUgPT09ICdzYW4nKSByZXR1cm4gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlNBTicpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBnZXQgZnVsbE5hbWUgKCkge1xuICAgIGNvbnN0IGRpZmZpY3VsdHkgPVxuICAgICAgdGhpcy5fZGlmZmljdWx0eSA9PT0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyXG4gICAgICAgID8gZmFsc2VcbiAgICAgICAgOiBDb0M3Q2hlY2suZGlmZmljdWx0eVN0cmluZyh0aGlzLl9kaWZmaWN1bHR5KVxuICAgIGNvbnN0IG1vZGlmaWVyID1cbiAgICAgIHRoaXMuX2RpY2VNb2RpZmllciA+IDBcbiAgICAgICAgPyBgKyR7dGhpcy5fZGljZU1vZGlmaWVyfWBcbiAgICAgICAgOiB0aGlzLl9kaWNlTW9kaWZpZXIudG9TdHJpbmcoKVxuICAgIHJldHVybiBnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgYENvQzcuTGlua0NoZWNrJHshZGlmZmljdWx0eSA/ICcnIDogJ0RpZmYnfSR7XG4gICAgICAgICF0aGlzLl9kaWNlTW9kaWZpZXIgPyAnJyA6ICdNb2RpZidcbiAgICAgIH1gLFxuICAgICAgeyBkaWZmaWN1bHR5LCBtb2RpZmllciwgbmFtZTogdGhpcy5uYW1lIH1cbiAgICApXG4gIH1cblxuICBnZXQgcm9sbGVkICgpIHtcbiAgICBpZiAodGhpcy5kaWNlKSByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIGNoZWNrIGZyb20gYW4gSFRNTEVsZW1lbnQgb3IgYSBjaGF0IGNhcmQuXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNhcmQgIFRoZSBIVE1MRWxlbWVudCB0aGF0IGlzIGEgcm9sbC1yZXN1bHQgb3IgYSBjaGF0IGNhcmQgY29udGFpbmluZyBhIHNpbmdsZSByb2xsLXJlc3VsdC5cbiAgICogQHJldHVybiB7Q29DN0NoZWNrfSAgICAgIEEgQ29DN0NoZWNrLlxuICAgKi9cbiAgc3RhdGljIGdldEZyb21DYXJkIChjYXJkKSB7XG4gICAgY29uc3Qgcm9sbFJlc3VsdCA9IGNhcmQuY2xhc3NMaXN0LmNvbnRhaW5zKCdyb2xsLXJlc3VsdCcpXG4gICAgICA/IGNhcmRcbiAgICAgIDogY2FyZC5xdWVyeVNlbGVjdG9yKCcucm9sbC1yZXN1bHQnKVxuICAgIGNvbnN0IGNoZWNrID0gbmV3IENvQzdDaGVjaygpXG4gICAgQ29DN1JvbGwuZ2V0RnJvbUVsZW1lbnQocm9sbFJlc3VsdCwgY2hlY2spXG4gICAgY29uc3QgbWVzc2FnZSA9IGNhcmQuY2xvc2VzdCgnLm1lc3NhZ2UnKVxuICAgIGNoZWNrLm1lc3NhZ2VJZCA9IG1lc3NhZ2UgPyBtZXNzYWdlLmRhdGFzZXQubWVzc2FnZUlkIDogbnVsbFxuICAgIHJldHVybiBjaGVja1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIHB1c2ggKGNhcmQsIHB1Ymxpc2ggPSB0cnVlKSB7XG4gICAgY29uc3Qgb2xkQ2hlY2sgPSBDb0M3Q2hlY2suZ2V0RnJvbUNhcmQoY2FyZCkgLy8gVE9ETzogUmVmYWN0b3JpbmdcbiAgICBjb25zdCBhY3RvcklkID0gY2FyZC5kYXRhc2V0LnRva2VuSWRcbiAgICAgID8gY2FyZC5kYXRhc2V0LnRva2VuSWRcbiAgICAgIDogY2FyZC5kYXRhc2V0LmFjdG9ySWRcbiAgICBjb25zdCBza2lsbElkID0gY2FyZC5kYXRhc2V0LnNraWxsSWRcbiAgICBjb25zdCBjaGFyYWMgPSBjYXJkLmRhdGFzZXQuY2hhcmFjdGVyaXN0aWNcbiAgICBjb25zdCBpdGVtSWQgPSBjYXJkLmRhdGFzZXQuaXRlbUlkXG4gICAgY29uc3QgZGljZU1vZCA9IGNhcmQuZGF0YXNldC5kaWNlTW9kXG4gICAgY29uc3QgZGlmZmljdWx0eSA9IGNhcmQuZGF0YXNldC5kaWZmaWN1bHR5XG5cbiAgICBsZXQgcHVzaGVkUm9sbFxuICAgIGlmIChza2lsbElkKSB7XG4gICAgICBwdXNoZWRSb2xsID0gbmV3IENvQzdDaGVjayhhY3RvcklkLCBza2lsbElkLCBpdGVtSWQsIGRpY2VNb2QsIGRpZmZpY3VsdHkpXG4gICAgfSBlbHNlIGlmIChjaGFyYWMpIHtcbiAgICAgIHB1c2hlZFJvbGwgPSBuZXcgQ29DN0NoZWNrKClcbiAgICAgIHB1c2hlZFJvbGwuZGljZU1vZGlmaWVyID0gZGljZU1vZFxuICAgICAgcHVzaGVkUm9sbC5kaWZmaWN1bHR5ID0gZGlmZmljdWx0eVxuICAgICAgcHVzaGVkUm9sbC5hY3RvciA9IGFjdG9ySWRcbiAgICAgIHB1c2hlZFJvbGwuY2hhcmFjdGVyaXN0aWMgPSBjaGFyYWNcbiAgICB9IGVsc2UgcmV0dXJuXG4gICAgaWYgKG9sZENoZWNrLnV1aWQpIHtcbiAgICAgIHB1c2hlZFJvbGwuY29udGV4dCA9IG9sZENoZWNrLmNvbnRleHRcbiAgICAgIHB1c2hlZFJvbGwudXVpZCA9IG9sZENoZWNrLnV1aWRcbiAgICB9XG4gICAgaWYgKG9sZENoZWNrLnBhcmVudCkgcHVzaGVkUm9sbC5wYXJlbnQgPSBvbGRDaGVjay5wYXJlbnRcbiAgICBwdXNoZWRSb2xsLnB1c2hpbmcgPSB0cnVlXG4gICAgYXdhaXQgcHVzaGVkUm9sbC5yb2xsKClcbiAgICBpZiAocHVibGlzaCkgcHVzaGVkUm9sbC50b01lc3NhZ2UodHJ1ZSwgY2FyZClcbiAgfVxuXG4gIGdldCB0b2tlbiAoKSB7XG4gICAgaWYgKCF0aGlzLmFjdG9yKSByZXR1cm4gbnVsbFxuICAgIHJldHVybiBjaGF0SGVscGVyLmdldFRva2VuRnJvbUtleSh0aGlzLmFjdG9yS2V5KVxuICB9XG5cbiAgc2V0IGFjdG9yICh4KSB7XG4gICAgdGhpcy5hY3RvcktleSA9IHhcbiAgICBpZiAoeCA9PSBudWxsKSB7XG4gICAgICB0aGlzLl9hY3RvciA9IHhcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICh4IGluc3RhbmNlb2YgQWN0b3IpIHtcbiAgICAgIC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgdGhpcy5fYWN0b3IgPSB4XG4gICAgICB0aGlzLl9hY3Rvci5hbGlhcyA9IHRoaXMuYWN0b3IubmFtZVxuICAgICAgaWYgKHgudG9rZW4gJiYgeC50b2tlbi5zY2VuZSAmJiB4LnRva2VuLnNjZW5lLmlkKSB7XG4gICAgICAgIHRoaXMuYWN0b3JLZXkgPSBgJHt4LnRva2VuLnNjZW5lLmlkfS4ke3gudG9rZW4uaWR9YFxuICAgICAgfSBlbHNlIHRoaXMuYWN0b3JLZXkgPSB4LmlkIC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHguaW5jbHVkZXMoJy4nKSkge1xuICAgICAgY29uc3QgW3NjZW5lSWQsIHRva2VuSWRdID0geC5zcGxpdCgnLicpIC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgaWYgKHNjZW5lSWQgPT09ICdUT0tFTicpIHtcbiAgICAgICAgdGhpcy5fYWN0b3IgPSBnYW1lLmFjdG9ycy50b2tlbnNbdG9rZW5JZF0gLy8gUkVGQUNUT1JJTkcgKDIpXG4gICAgICAgIHRoaXMuX2FjdG9yLmFsaWFzID0gdGhpcy5fYWN0b3IubmFtZSAvLyBSRUZBQ1RPUklORyAoMilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNjZW5lID0gZ2FtZS5zY2VuZXMuZ2V0KHNjZW5lSWQpXG4gICAgICAgIGlmICghc2NlbmUpIHJldHVyblxuICAgICAgICBjb25zdCB0b2tlbkRhdGEgPSBzY2VuZS5nZXRFbWJlZGRlZERvY3VtZW50KCdUb2tlbicsIHRva2VuSWQpXG4gICAgICAgIGlmICghdG9rZW5EYXRhKSByZXR1cm5cbiAgICAgICAgY29uc3QgdG9rZW4gPSBuZXcgVG9rZW4odG9rZW5EYXRhKVxuICAgICAgICB0aGlzLl9hY3RvciA9IHRva2VuLmFjdG9yXG4gICAgICAgIHRoaXMuX2FjdG9yLmFsaWFzID0gdG9rZW4ubmFtZVxuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5fYWN0b3IgPSBnYW1lLmFjdG9ycy5nZXQoeClcbiAgICB0aGlzLmFjdG9yLmFsaWFzID0gdGhpcy5hY3Rvci5uYW1lXG4gIH1cblxuICBnZXQgc3VjY2Vzc0xldmVsSWNvbnMgKCkge1xuICAgIGlmICh0aGlzLnVua25vd25EaWZmaWN1bHR5KSByZXR1cm4gbnVsbFxuICAgIGlmICh0aGlzLmlzU2ltcGxlUm9sbCAmJiB0aGlzLl9yYXdWYWx1ZSAhPT0gMCkgcmV0dXJuIG51bGxcbiAgICBpZiAodGhpcy5zdWNjZXNzTGV2ZWwgPj0gdGhpcy5kaWZmaWN1bHR5KSB7XG4gICAgICBjb25zdCBpY29ucyA9IFtdXG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgICBpbmRleCA8IHRoaXMuc3VjY2Vzc0xldmVsIC0gdGhpcy5kaWZmaWN1bHR5ICsgMTtcbiAgICAgICAgaW5kZXgrK1xuICAgICAgKSB7XG4gICAgICAgIGljb25zLnB1c2godGhpcy5pc0NyaXRpY2FsID8gJ21lZGFsJyA6ICdzdGFyJylcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN1Y2Nlc3NIaW50ID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5TdWNjZXNMZXZlbEhpbnQnLCB7XG4gICAgICAgIHZhbHVlOiB0aGlzLnN1Y2Nlc3NMZXZlbCAtIHRoaXMuZGlmZmljdWx0eSArIDFcbiAgICAgIH0pXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBjc3NDbGFzczogdGhpcy5pc0NyaXRpY2FsID8gJ2NyaXRpY2FsJyA6ICdzdWNjZXNzJyxcbiAgICAgICAgaGludDogc3VjY2Vzc0hpbnQsXG4gICAgICAgIGljb25zXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGljb25zID0gW11cbiAgICAgIGNvbnN0IHN1Y2Nlc3NMZXZlbCA9IHRoaXMuaXNGdW1ibGUgPyAtMSA6IHRoaXMuc3VjY2Vzc0xldmVsXG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5kaWZmaWN1bHR5IC0gc3VjY2Vzc0xldmVsOyBpbmRleCsrKSB7XG4gICAgICAgIGljb25zLnB1c2godGhpcy5pc0Z1bWJsZSA/ICdza3VsbCcgOiAnc3BpZGVyJylcbiAgICAgIH1cbiAgICAgIGNvbnN0IGZhaWx1cmVIaW50ID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5GYWlsdXJlTGV2ZWxIaW50Jywge1xuICAgICAgICB2YWx1ZTogdGhpcy5kaWZmaWN1bHR5IC0gc3VjY2Vzc0xldmVsXG4gICAgICB9KVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGNzc0NsYXNzOiB0aGlzLmlzRnVtYmxlID8gJ2Z1bWJsZScgOiAnZmFpbHVyZScsXG4gICAgICAgIGhpbnQ6IGZhaWx1cmVIaW50LFxuICAgICAgICBpY29uc1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldCBpc0JsaW5kICgpIHtcbiAgICBpZiAodW5kZWZpbmVkID09PSB0aGlzLl9pc0JsaW5kKSB7XG4gICAgICB0aGlzLl9pc0JsaW5kID0gdGhpcy5yb2xsTW9kZSA9PT0gJ2JsaW5kcm9sbCdcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2lzQmxpbmRcbiAgfVxuXG4gIHNldCBpc0JsaW5kICh4KSB7XG4gICAgdGhpcy5faXNCbGluZCA9IHhcbiAgfVxuXG4gIGdldCB1bmtub3duRGlmZmljdWx0eSAoKSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5nbURpZmZpY3VsdHlDcml0aWNhbCB8fFxuICAgICAgdGhpcy5nbURpZmZpY3VsdHlFeHRyZW1lIHx8XG4gICAgICB0aGlzLmdtRGlmZmljdWx0eUhhcmQgfHxcbiAgICAgIHRoaXMuZ21EaWZmaWN1bHR5UmVndWxhclxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIHJldHVybiBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnVua25vd24gPT09IHRoaXMuZGlmZmljdWx0eVxuICB9XG5cbiAgZ2V0IHJvbGxNb2RlICgpIHtcbiAgICBpZiAoIXRoaXMuX3JvbGxNb2RlKSB0aGlzLl9yb2xsTW9kZSA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdjb3JlJywgJ3JvbGxNb2RlJylcbiAgICByZXR1cm4gdGhpcy5fcm9sbE1vZGVcbiAgfVxuXG4gIHNldCByb2xsTW9kZSAoeCkge1xuICAgIGlmICh4ID09PSBmYWxzZSkgdGhpcy5fcm9sbE1vZGUgPSBnYW1lLnNldHRpbmdzLmdldCgnY29yZScsICdyb2xsTW9kZScpXG4gICAgdGhpcy5fcm9sbE1vZGUgPSB4XG4gIH1cblxuICBzZXQgc2tpbGwgKHgpIHtcbiAgICB0aGlzLl9za2lsbCA9IHRoaXMuX2dldEl0ZW1Gcm9tSWQoeClcbiAgICB0aGlzLnNraWxsSWQgPSB4XG4gIH1cblxuICBzZXQgaXRlbSAoeCkge1xuICAgIHRoaXMuX2l0ZW0gPSB0aGlzLl9nZXRJdGVtRnJvbUlkKHgpXG4gICAgaWYgKHRoaXMuX2l0ZW0/LnR5cGUgPT09ICd3ZWFwb24nKSB7XG4gICAgICB0aGlzLml0ZW1JZCA9IHhcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5faXRlbSA9IHVuZGVmaW5lZFxuICAgICAgdGhpcy5pdGVtSWQgPSB1bmRlZmluZWRcbiAgICB9XG4gIH1cblxuICBfZ2V0SXRlbUZyb21JZCAoeCkge1xuICAgIGlmICh4ID09IG51bGwpIHJldHVybiBudWxsXG4gICAgaWYgKHggaW5zdGFuY2VvZiBJdGVtKSByZXR1cm4geFxuICAgIGlmICh0aGlzLl9hY3RvcikgcmV0dXJuIHRoaXMuX2FjdG9yLml0ZW1zLmdldCh4KVxuICAgIHJldHVybiBnYW1lLml0ZW1zLmdldCh4KVxuICB9XG5cbiAgZ2V0IGFjdG9yICgpIHtcbiAgICBpZiAoIXRoaXMuX2FjdG9yIHx8ICF0aGlzLl9hY3Rvcj8uaWQpIHtcbiAgICAgIGlmICh0aGlzLmFjdG9yS2V5KSB0aGlzLl9hY3RvciA9IGNoYXRIZWxwZXIuZ2V0QWN0b3JGcm9tS2V5KHRoaXMuYWN0b3JLZXkpIC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgaWYgKHRoaXMuYWN0b3JJZCkgdGhpcy5fYWN0b3IgPSBjaGF0SGVscGVyLmdldEFjdG9yRnJvbUtleSh0aGlzLmFjdG9ySWQpIC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgaWYgKCF0aGlzLl9hY3Rvcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlzRHVtbXk6IHRydWUsXG4gICAgICAgICAgbmFtZTogdGhpcy5hY3Rvck5hbWUgPyB0aGlzLmFjdG9yTmFtZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBpZDogdW5kZWZpbmVkLFxuICAgICAgICAgIGltZzogJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvcXVlc3Rpb24tY2lyY2xlLXJlZ3VsYXIuc3ZnJyxcbiAgICAgICAgICBwb3J0cmFpdDogJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvcXVlc3Rpb24tY2lyY2xlLXJlZ3VsYXIuc3ZnJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLl9hY3Rvci5jb25zdHJ1Y3Rvci5uYW1lID09PSAnT2JqZWN0Jykge1xuICAgICAgY29uc3QgYWN0b3IgPSBuZXcgQ29DQWN0b3IodGhpcy5fYWN0b3IpXG4gICAgICB0aGlzLl9hY3RvciA9IGFjdG9yXG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9hY3RvclxuICB9XG5cbiAgZ2V0IHNraWxsICgpIHtcbiAgICBpZiAoIXRoaXMuX3NraWxsICYmIHRoaXMuc2tpbGxJZCkge1xuICAgICAgdGhpcy5fc2tpbGwgPSB0aGlzLmFjdG9yPy5pdGVtcy5nZXQodGhpcy5za2lsbElkKVxuICAgIH1cbiAgICBpZiAoIXRoaXMuX3NraWxsICYmIHRoaXMuaXRlbSkge1xuICAgICAgaWYgKHRoaXMuaXRlbS5zeXN0ZW0uc2tpbGwpIHtcbiAgICAgICAgaWYgKHRoaXMuaXRlbS5zeXN0ZW0uc2tpbGwubWFpbi5pZCAmJiAhdGhpcy53ZWFwb25BbHRTa2lsbCkge1xuICAgICAgICAgIHRoaXMuX3NraWxsID0gdGhpcy5fYWN0b3IuaXRlbXMuZ2V0KHRoaXMuaXRlbS5zeXN0ZW0uc2tpbGwubWFpbi5pZClcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICB0aGlzLml0ZW0uc3lzdGVtLnNraWxsLmFsdGVybmF0aXYuaWQgJiZcbiAgICAgICAgICB0aGlzLndlYXBvbkFsdFNraWxsXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMuX3NraWxsID0gdGhpcy5fYWN0b3IuaXRlbXMuZ2V0KFxuICAgICAgICAgICAgdGhpcy5pdGVtLnN5c3RlbS5za2lsbC5hbHRlcm5hdGl2LmlkXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9za2lsbFxuICB9XG5cbiAgZ2V0IGl0ZW0gKCkge1xuICAgIGlmICghdGhpcy5faXRlbSAmJiB0aGlzLml0ZW1JZCAmJiB0aGlzLmFjdG9yKSB7XG4gICAgICB0aGlzLl9pdGVtID0gdGhpcy5hY3Rvci5pdGVtcy5nZXQodGhpcy5pdGVtSWQpXG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9pdGVtXG4gIH1cblxuICBnZXQgZGlzcGxheVJlc3VsdFR5cGUgKCkge1xuICAgIHJldHVybiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdkaXNwbGF5UmVzdWx0VHlwZScpXG4gIH1cblxuICBnZXQgZGlzcGxheUNoZWNrU3VjY2Vzc0xldmVsICgpIHtcbiAgICByZXR1cm4gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnZGlzcGxheUNoZWNrU3VjY2Vzc0xldmVsJylcbiAgfVxuXG4gIGdldCBkaXNwbGF5Qm90aFN1Y2Nlc3NMZXZlbCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzcGxheVJlc3VsdFR5cGUgJiYgdGhpcy5kaXNwbGF5Q2hlY2tTdWNjZXNzTGV2ZWxcbiAgfVxuXG4gIGdldCBkb250RGlzcGxheVN1Y2Nlc3NMZXZlbCAoKSB7XG4gICAgcmV0dXJuICF0aGlzLmRpc3BsYXlSZXN1bHRUeXBlICYmICF0aGlzLmRpc3BsYXlDaGVja1N1Y2Nlc3NMZXZlbFxuICB9XG5cbiAgZ2V0IGltYWdlICgpIHtcbiAgICBpZiAodGhpcy5za2lsbCkgcmV0dXJuIHRoaXMuc2tpbGwuaW1nXG4gICAgaWYgKHRoaXMuaXRlbSkgcmV0dXJuIHRoaXMuaXRlbS5pbWdcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBnZXQgbGluayAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TGlua0VsZW1lbnQoKS5vdXRlckhUTUxcbiAgfVxuXG4gIGdldCBkaXNwbGF5QWN0b3JPbkNhcmQgKCkge1xuICAgIHJldHVybiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdkaXNwbGF5QWN0b3JPbkNhcmQnKVxuICB9XG5cbiAgZ2V0TGlua0VsZW1lbnQgKGNsYXNzZXMgPSBudWxsKSB7XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIGNsczogWydjb2M3LWxpbmsnLCAnY29jNy1yb2xsJ10uY29uY2F0KGNsYXNzZXMpLFxuICAgICAgZGF0YXNldDogeyBjaGVjazogJ2NoZWNrJyB9LFxuICAgICAgaWNvbjogdGhpcy5pbWFnZVxuICAgICAgICA/IGA8ZGl2IHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7dGhpcy5pbWFnZX0pXCI+PC9kaXY+YFxuICAgICAgICA6ICc8aSBjbGFzcz1cImZhcyBmYS1kaWNlXCI+PC9pPicsXG4gICAgICBibGluZDogdGhpcy5pc0JsaW5kXG4gICAgfVxuXG4gICAgY29uc3QgZGlmZmljdWx0eSA9IENvQzdDaGVjay5kaWZmaWN1bHR5U3RyaW5nKHRoaXMuX2RpZmZpY3VsdHkpXG4gICAgY29uc3QgdGl0bGUgPSBnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgYENvQzcuTGlua0NoZWNrJHshdGhpcy5fZGlmZmljdWx0eSA/ICcnIDogJ0RpZmYnfSR7XG4gICAgICAgICF0aGlzLl9kaWNlTW9kaWZpZXIgPyAnJyA6ICdNb2RpZidcbiAgICAgIH1gLFxuICAgICAge1xuICAgICAgICBkaWZmaWN1bHR5LFxuICAgICAgICBtb2RpZmllcjogdGhpcy5fZGljZU1vZGlmaWVyLFxuICAgICAgICBuYW1lOiB0aGlzLm5hbWVcbiAgICAgIH1cbiAgICApXG5cbiAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpXG4gICAgYS50aXRsZSA9IHRpdGxlXG4gICAgYS5jbGFzc0xpc3QuYWRkKC4uLmRhdGEuY2xzKVxuICAgIGEuaW5uZXJIVE1MID0gYCR7ZGF0YS5ibGluZCA/ICc8aSBjbGFzcz1cImZhcyBmYS1leWUtc2xhc2hcIj48L2k+JyA6ICcnfSR7XG4gICAgICBkYXRhLmljb25cbiAgICB9JHt0aGlzLm5hbWV9YFxuXG4gICAgcmV0dXJuIGFcbiAgfVxuXG4gIGFzeW5jIHJvbGwgKGRpY2VNb2QgPSBudWxsLCBkaWZmaWN1bHR5ID0gbnVsbCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKGRpY2VNb2QpIHRoaXMuZGljZU1vZGlmaWVyID0gZGljZU1vZFxuICAgIGlmIChkaWZmaWN1bHR5KSB0aGlzLmRpZmZpY3VsdHkgPSBkaWZmaWN1bHR5XG4gICAgaWYgKCF0aGlzLnN0YW5kYnkpIGF3YWl0IHRoaXMuX3BlcmZvcm0ob3B0aW9ucylcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBjaGVjayB3aXRoIHRoZSBwcm92aWRlZCBkYXRhXG4gICAqIFByb2Nlc3Mgcm9sbCBkYXRhIHRvIGEgZm9ybWF0IHRoYXQgY2FuIGJlIGZlZCB0byBjcmVhdGUoKVxuICAgKiBAcGFyYW0geyp9IHJvbGxEYXRhIEEgcm9sbCBkYXRhIHN0cnVjdHVyZSBhcyByZXR1cm5lZCBieSBhY3Rvci5maW5kXG4gICAqIEByZXR1cm5zIEEgY2hlY2sgd2l0aCB0aGUgcm9sbCBkYXRhIHByb3ZpZGVkXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlRnJvbUFjdG9yUm9sbERhdGEgKHJvbGxEYXRhKSB7XG4gICAgY29uc3Qgcm9sbCA9IHt9XG4gICAgLy8gY2hlY2sgTW9kaWZpZXJcbiAgICBpZiAocm9sbERhdGEuZGlmZmljdWx0eSkgcm9sbC5kaWZmaWN1bHR5ID0gcm9sbERhdGEuZGlmZmljdWx0eVxuICAgIGlmIChyb2xsRGF0YS5kaWNlTW9kaWZpZXIpIHJvbGwuZGljZU1vZGlmaWVyID0gcm9sbERhdGEuZGljZU1vZGlmaWVyXG4gICAgaWYgKHJvbGxEYXRhLmRlbnlQdXNoID09PSB0cnVlKSByb2xsLmRlbnlQdXNoID0gdHJ1ZVxuICAgIGlmIChyb2xsRGF0YS5mbGF0RGljZU1vZGlmaWVyKSB7XG4gICAgICByb2xsLmZsYXREaWNlTW9kaWZpZXIgPSByb2xsRGF0YS5mbGF0RGljZU1vZGlmaWVyXG4gICAgfVxuICAgIGlmIChyb2xsRGF0YS5mbGF0VGhyZXNob2xkTW9kaWZpZXIpIHtcbiAgICAgIHJvbGwuZmxhdFRocmVzaG9sZE1vZGlmaWVyID0gcm9sbERhdGEuZmxhdFRocmVzaG9sZE1vZGlmaWVyXG4gICAgfVxuICAgIC8vIEFjdG9yXG4gICAgaWYgKHJvbGxEYXRhLmFjdG9yPy5hY3RvcktleSkgcm9sbC5hY3RvcktleSA9IHJvbGxEYXRhLmFjdG9yLmFjdG9yS2V5XG4gICAgZWxzZSBpZiAocm9sbERhdGEuYWN0b3I/Lm5hbWUpIHJvbGwuYWN0b3JOYW1lID0gcm9sbERhdGEuYWN0b3IubmFtZVxuICAgIC8vIENoZWNrIHR5cGVcbiAgICBzd2l0Y2ggKHJvbGxEYXRhLnR5cGUpIHtcbiAgICAgIGNhc2UgQ29DN0NoZWNrLnR5cGUuY2hhcmFjdGVyaXN0aWM6XG4gICAgICAgIHJvbGwuY2hhcmFjdGVyaXN0aWMgPSByb2xsRGF0YS52YWx1ZT8ua2V5XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIENvQzdDaGVjay50eXBlLmF0dHJpYnV0ZTpcbiAgICAgICAgcm9sbC5hdHRyaWJ1dGUgPSByb2xsRGF0YS52YWx1ZT8ua2V5XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIENvQzdDaGVjay50eXBlLml0ZW06XG4gICAgICAgIHJvbGwuYWN0b3JLZXkgPSByb2xsRGF0YS52YWx1ZS5hY3Rvci5hY3RvcktleVxuICAgICAgICBpZiAocm9sbERhdGEudmFsdWU/LnR5cGUgPT09ICdza2lsbCcpIHJvbGwuc2tpbGwgPSByb2xsRGF0YS52YWx1ZS5pZFxuICAgICAgICBlbHNlIHJvbGwuaXRlbSA9IHJvbGxEYXRhLnZhbHVlLmlkXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIENvQzdDaGVjay50eXBlLnNraWxsOlxuICAgICAgICByb2xsLmFjdG9yS2V5ID0gcm9sbERhdGEudmFsdWUuYWN0b3IuYWN0b3JLZXlcbiAgICAgICAgcm9sbC5za2lsbCA9IHJvbGxEYXRhLnZhbHVlLmlkXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIENvQzdDaGVjay50eXBlLnZhbHVlOlxuICAgICAgICByb2xsLmRpc3BsYXlOYW1lID0gcm9sbERhdGEudmFsdWUubmFtZVxuICAgICAgICByb2xsLnJhd1ZhbHVlID0gcm9sbERhdGEudmFsdWUudGhyZXNob2xkXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVha1xuICAgIH1cbiAgICByZXR1cm4gQ29DN0NoZWNrLmNyZWF0ZShyb2xsKVxuICB9XG5cbiAgc3RhdGljIGNyZWF0ZSAoe1xuICAgIGRpZmZpY3VsdHkgPSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXIsXG4gICAgZGljZU1vZGlmaWVyID0gbnVsbCxcbiAgICBhY3RvcktleSA9IG51bGwsXG4gICAgY2hhcmFjdGVyaXN0aWMgPSBudWxsLFxuICAgIGF0dHJpYnV0ZSA9IG51bGwsXG4gICAgcmF3VmFsdWUgPSAwLFxuICAgIGl0ZW0gPSBudWxsLFxuICAgIHNraWxsID0gbnVsbCxcbiAgICBmbGF0RGljZU1vZGlmaWVyID0gMCxcbiAgICBmbGF0VGhyZXNob2xkTW9kaWZpZXIgPSAwLFxuICAgIGRpc3BsYXlOYW1lID0gbnVsbCxcbiAgICBhY3Rvck5hbWUgPSBudWxsLFxuICAgIGRlbnlQdXNoID0gdW5kZWZpbmVkXG4gIH0gPSB7fSkge1xuICAgIGNvbnN0IGNoZWNrID0gbmV3IENvQzdDaGVjaygpXG4gICAgY2hlY2suZGlmZmljdWx0eSA9IGRpZmZpY3VsdHlcbiAgICBpZiAoZGVueVB1c2ggPT09IHRydWUpIGNoZWNrLmRlbnlQdXNoID0gdHJ1ZVxuICAgIGlmIChkaWNlTW9kaWZpZXIpIGNoZWNrLmRpY2VNb2RpZmllciA9IGRpY2VNb2RpZmllclxuICAgIGlmIChmbGF0RGljZU1vZGlmaWVyKSBjaGVjay5mbGF0RGljZU1vZGlmaWVyID0gZmxhdERpY2VNb2RpZmllclxuICAgIGlmIChmbGF0VGhyZXNob2xkTW9kaWZpZXIpIHtcbiAgICAgIGNoZWNrLmZsYXRUaHJlc2hvbGRNb2RpZmllciA9IGZsYXRUaHJlc2hvbGRNb2RpZmllclxuICAgIH1cbiAgICBpZiAoZGlzcGxheU5hbWUpIGNoZWNrLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWVcbiAgICBpZiAoYWN0b3JLZXkpIGNoZWNrLmFjdG9yID0gYWN0b3JLZXlcbiAgICBpZiAoYWN0b3JOYW1lKSBjaGVjay5hY3Rvck5hbWUgPSBhY3Rvck5hbWVcbiAgICBpZiAoIWlzTmFOKE51bWJlcihyYXdWYWx1ZSkpKSBjaGVjay5yYXdWYWx1ZSA9IE51bWJlcihyYXdWYWx1ZSlcbiAgICBpZiAoY2hlY2suYWN0b3IgJiYgIWNoZWNrLmFjdG9yLmlzRHVtbXkpIHtcbiAgICAgIC8vIFRPRE8gOiBBZGQgY2hlY2sgZm9yIHZhbGlkaXR5IG9mIGNoYXJhY3RlcmlzdGljLCBhdHRyaWJ1dGUsIHNraWxsSWRcbiAgICAgIGlmIChza2lsbCkgY2hlY2suc2tpbGwgPSBza2lsbFxuICAgICAgLy8gVE9ETyA6IHRyeSByZXRyaWV2ZSBza2lsbCBieSBuYW1lXG4gICAgICBlbHNlIGlmIChjaGFyYWN0ZXJpc3RpYykgY2hlY2suY2hhcmFjdGVyaXN0aWMgPSBjaGFyYWN0ZXJpc3RpY1xuICAgICAgZWxzZSBpZiAoYXR0cmlidXRlKSBjaGVjay5hdHRyaWJ1dGUgPSBhdHRyaWJ1dGVcbiAgICAgIGVsc2UgaWYgKGl0ZW0pIGNoZWNrLml0ZW0gPSBpdGVtXG4gICAgfVxuICAgIHJldHVybiBjaGVja1xuICB9XG5cbiAgYXN5bmMgcm9sbENoYXJhY3RlcmlzdGljIChjaGFyLCBkaWNlTW9kID0gbnVsbCwgZGlmZmljdWx0eSA9IG51bGwpIHtcbiAgICBpZiAoZGljZU1vZCkgdGhpcy5kaWNlTW9kaWZpZXIgPSBkaWNlTW9kXG4gICAgaWYgKGRpZmZpY3VsdHkpIHRoaXMuZGlmZmljdWx0eSA9IGRpZmZpY3VsdHlcbiAgICB0aGlzLmNoYXJhY3RlcmlzdGljID0gY2hhclxuICAgIGlmICghdGhpcy5zdGFuZGJ5KSBhd2FpdCB0aGlzLl9wZXJmb3JtKClcbiAgfVxuXG4gIGFzeW5jIHJvbGxBdHRyaWJ1dGUgKGF0dHJpYiwgZGljZU1vZCA9IG51bGwsIGRpZmZpY3VsdHkgPSBudWxsKSB7XG4gICAgaWYgKGRpY2VNb2QpIHRoaXMuZGljZU1vZGlmaWVyID0gZGljZU1vZFxuICAgIGlmIChkaWZmaWN1bHR5KSB0aGlzLmRpZmZpY3VsdHkgPSBkaWZmaWN1bHR5XG4gICAgdGhpcy5hdHRyaWJ1dGUgPSBhdHRyaWJcbiAgICBpZiAoIXRoaXMuc3RhbmRieSkgYXdhaXQgdGhpcy5fcGVyZm9ybSgpXG4gIH1cblxuICBhc3luYyByb2xsVmFsdWUgKHZhbCwgZGljZU1vZCA9IG51bGwsIGRpZmZpY3VsdHkgPSBudWxsKSB7XG4gICAgaWYgKGRpY2VNb2QpIHRoaXMuZGljZU1vZGlmaWVyID0gZGljZU1vZFxuICAgIGlmIChkaWZmaWN1bHR5KSB0aGlzLmRpZmZpY3VsdHkgPSBkaWZmaWN1bHR5XG4gICAgdGhpcy5yYXdWYWx1ZSA9IHZhbFxuICAgIGlmICghdGhpcy5zdGFuZGJ5KSBhd2FpdCB0aGlzLl9wZXJmb3JtKClcbiAgfVxuXG4gIGdldCByb2xsZWRTdWNjZXNzTGV2ZWwgKCkge1xuICAgIHJldHVybiB0aGlzLnN1Y2Nlc3NMZXZlbFxuICB9XG5cbiAgYXN5bmMgX3BlcmZvcm0gKG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuZGljZSA9XG4gICAgICBvcHRpb25zLnJvbGwgfHxcbiAgICAgIChhd2FpdCBDb0M3RGljZS5yb2xsKHRoaXMuZGljZU1vZGlmaWVyLCB0aGlzLnJvbGxNb2RlLCB0aGlzLmlzQmxpbmQpKVxuICAgIGlmICghb3B0aW9ucy5zaWxlbnQgJiYgIWdhbWUubW9kdWxlcy5nZXQoJ2RpY2Utc28tbmljZScpPy5hY3RpdmUpIHtcbiAgICAgIEF1ZGlvSGVscGVyLnBsYXkoeyBzcmM6IENPTkZJRy5zb3VuZHMuZGljZSB9LCB0cnVlKVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmZvcmNlRFNOKSB7XG4gICAgICBhd2FpdCBDb0M3RGljZS5zaG93Um9sbERpY2UzZCh0aGlzLmRpY2Uucm9sbClcbiAgICB9XG5cbiAgICB0aGlzLmRpY2VzID0ge1xuICAgICAgdGVuczogW10sXG4gICAgICB1bml0OiB7XG4gICAgICAgIHZhbHVlOiB0aGlzLmRpY2UudW5pdC50b3RhbFxuICAgICAgfSxcbiAgICAgIHRvdGFsOiB0aGlzLmRpY2UudG90YWwsXG4gICAgICB0ZW5SZXN1bHQ6IHRoaXMuZGljZS50b3RhbCAtIHRoaXMuZGljZS51bml0LnRvdGFsLFxuICAgICAgaGFzQm9udXM6ICEhdGhpcy5kaWNlTW9kaWZpZXIsXG4gICAgICBib251czogTWF0aC5hYnModGhpcy5kaWNlTW9kaWZpZXIpLFxuICAgICAgYm9udXNUeXBlOlxuICAgICAgICB0aGlzLmRpY2VNb2RpZmllciA8IDBcbiAgICAgICAgICA/IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRGljZU1vZGlmaWVyUGVuYWx0eScpXG4gICAgICAgICAgOiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkRpY2VNb2RpZmllckJvbnVzJyksXG4gICAgICBkaWZmaWN1bHR5OiB0aGlzLmRpZmZpY3VsdHlcbiAgICB9XG5cbiAgICBjb25zdCBtYXggPSB0aGlzLmRpY2UudW5pdC50b3RhbCA9PT0gMCA/IDEwMCA6IDkwXG4gICAgY29uc3QgbWluID0gdGhpcy5kaWNlLnVuaXQudG90YWwgPT09IDAgPyAxMCA6IDBcbiAgICBsZXQgc2VsZWN0ZWQgPSB0aGlzLmRpY2UudG90YWwgLSB0aGlzLmRpY2UudW5pdC50b3RhbFxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRpY2UudGVucy5yZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBkaWUgPSB7fVxuICAgICAgZGllLnZhbHVlID0gdGhpcy5kaWNlLnRlbnMucmVzdWx0c1tpXVxuICAgICAgaWYgKGRpZS52YWx1ZSA9PT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgc2VsZWN0ZWQgPSAxMDFcbiAgICAgICAgZGllLnNlbGVjdGVkID0gdHJ1ZVxuICAgICAgICBpZiAodGhpcy5kaWNlcy5oYXNCb251cykge1xuICAgICAgICAgIGRpZS5pc01heCA9IHRydWVcbiAgICAgICAgICBkaWUuaXNNaW4gPSBmYWxzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRpZS5pc01pbiA9IHRydWVcbiAgICAgICAgICBkaWUuaXNNYXggPSBmYWxzZVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZGllLnZhbHVlID09PSBtYXgpIGRpZS5pc01heCA9IHRydWVcbiAgICAgICAgZWxzZSBkaWUuaXNNYXggPSBmYWxzZVxuICAgICAgICBpZiAoZGllLnZhbHVlID09PSBtaW4pIGRpZS5pc01pbiA9IHRydWVcbiAgICAgICAgZWxzZSBkaWUuaXNNaW4gPSBmYWxzZVxuICAgICAgfVxuICAgICAgLy8gaWYoIGRpZS52YWx1ZSA9PSAxMDApIGRpZS52YWx1ZSA9IFwiMDBcIjtcbiAgICAgIHRoaXMuZGljZXMudGVucy5wdXNoKGRpZSlcbiAgICB9XG4gICAgdGhpcy5jb21wdXRlQ2hlY2soKVxuICB9XG5cbiAgYXN5bmMgaW5jcmVhc2VMdWNrU3BlbmQgKGx1Y2tBbW91bnQpIHtcbiAgICBjb25zdCBzcGVuZGluZ0Ftb3VudCA9IHBhcnNlSW50KGx1Y2tBbW91bnQsIDEwKVxuICAgIHRoaXMudG90YWxMdWNrU3BlbnQgPSBwYXJzZUludCh0aGlzLnRvdGFsTHVja1NwZW50ID8/IDAsIDEwKSArIHNwZW5kaW5nQW1vdW50XG4gICAgY29uc3QgbW9kaWZpZWRSZXN1bHQgPSBNYXRoLm1heCgxLCB0aGlzLm1vZGlmaWVkUmVzdWx0IC0gdGhpcy50b3RhbEx1Y2tTcGVudClcbiAgICBpZiAobW9kaWZpZWRSZXN1bHQgPT09IDEpIHtcbiAgICAgIHRoaXMuc3VjY2Vzc0xldmVsID0gQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5jcml0aWNhbFxuICAgIH0gZWxzZSBpZiAobW9kaWZpZWRSZXN1bHQgPD0gdGhpcy5leHRyZW1lVGhyZXNob2xkKSB7XG4gICAgICB0aGlzLnN1Y2Nlc3NMZXZlbCA9IENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZXh0cmVtZVxuICAgIH0gZWxzZSBpZiAobW9kaWZpZWRSZXN1bHQgPD0gdGhpcy5oYXJkVGhyZXNob2xkKSB7XG4gICAgICB0aGlzLnN1Y2Nlc3NMZXZlbCA9IENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuaGFyZFxuICAgIH0gZWxzZSBpZiAobW9kaWZpZWRSZXN1bHQgPD0gdGhpcy5yYXdWYWx1ZSkge1xuICAgICAgdGhpcy5zdWNjZXNzTGV2ZWwgPSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLnJlZ3VsYXJcbiAgICB9IGVsc2UgaWYgKHRoaXMuZnVtYmxlVGhyZXNob2xkIDw9IG1vZGlmaWVkUmVzdWx0KSB7XG4gICAgICB0aGlzLnN1Y2Nlc3NMZXZlbCA9IENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZnVtYmxlXG4gICAgfSBlbHNlIGlmIChtb2RpZmllZFJlc3VsdCA+IHRoaXMucmF3VmFsdWUpIHtcbiAgICAgIHRoaXMuc3VjY2Vzc0xldmVsID0gQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5mYWlsdXJlXG4gICAgfVxuICAgIGlmICh0aGlzLmRpZmZpY3VsdHkgPD0gdGhpcy5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgIHRoaXMuaXNTdWNjZXNzID0gdHJ1ZVxuICAgICAgdGhpcy5pc0ZhaWx1cmUgPSBmYWxzZVxuICAgIH1cbiAgICB0aGlzLmx1Y2tTcGVudCA9IHRydWVcbiAgICBsZXQgcmVtb3ZlID0gMFxuICAgIGZvciAobGV0IGluZGV4ID0gMCwgbWF4SW5kZXggPSB0aGlzLmluY3JlYXNlU3VjY2Vzcy5sZW5ndGg7IGluZGV4IDwgbWF4SW5kZXg7IGluZGV4KyspIHtcbiAgICAgIHRoaXMuaW5jcmVhc2VTdWNjZXNzW2luZGV4XS5sdWNrVG9TcGVuZCA9IHRoaXMuaW5jcmVhc2VTdWNjZXNzW2luZGV4XS5sdWNrVG9TcGVuZCAtIHNwZW5kaW5nQW1vdW50XG4gICAgICBpZiAodGhpcy5pbmNyZWFzZVN1Y2Nlc3NbaW5kZXhdLmx1Y2tUb1NwZW5kIDwgMSkge1xuICAgICAgICByZW1vdmUrK1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcmVtb3ZlOyBpbmRleCsrKSB7XG4gICAgICB0aGlzLmluY3JlYXNlU3VjY2Vzcy5zaGlmdCgpXG4gICAgfVxuICAgIHRoaXMuY29tcHV0ZUNoZWNrKClcbiAgfVxuXG4gIGFzeW5jIGNvbXB1dGVDaGVjayAoKSB7XG4gICAgdGhpcy5pc1Vua25vd24gPSB0aGlzLnVua25vd25EaWZmaWN1bHR5XG5cbiAgICBpZiAodGhpcy5nbURpZmZpY3VsdHlSZWd1bGFyKSB7XG4gICAgICB0aGlzLmRpZmZpY3VsdHkgPSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXJcbiAgICB9XG4gICAgaWYgKHRoaXMuZ21EaWZmaWN1bHR5SGFyZCkgdGhpcy5kaWZmaWN1bHR5ID0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5oYXJkXG4gICAgaWYgKHRoaXMuZ21EaWZmaWN1bHR5RXh0cmVtZSkge1xuICAgICAgdGhpcy5kaWZmaWN1bHR5ID0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5leHRyZW1lXG4gICAgfVxuICAgIGlmICh0aGlzLmdtRGlmZmljdWx0eUNyaXRpY2FsKSB7XG4gICAgICB0aGlzLmRpZmZpY3VsdHkgPSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmNyaXRpY2FsXG4gICAgfVxuXG4gICAgdGhpcy50ZW5Pbmx5T25lRGllID0gdGhpcy5kaWNlcy50ZW5zLmxlbmd0aCA9PT0gMVxuXG4gICAgdGhpcy5pc1ZhbHVlID0gZmFsc2VcbiAgICB0aGlzLmlzQ2hhcmFjdGlyaXN0aWMgPSBmYWxzZVxuICAgIHRoaXMuaXNTa2lsbCA9IGZhbHNlXG4gICAgdGhpcy5pc0l0ZW0gPSBmYWxzZVxuICAgIHRoaXMuaXNBdHRyaWJ1dGUgPSBmYWxzZVxuICAgIGlmICh0aGlzLmlzU2ltcGxlUm9sbCkge1xuICAgICAgdGhpcy5kZW55UHVzaCA9IHRydWVcbiAgICAgIHRoaXMuZGVueUx1Y2sgPSB0cnVlXG4gICAgfSBlbHNlIGlmICh0aGlzLmFjdG9yID09IG51bGwpIHtcbiAgICAgIHRoaXMuaXNWYWx1ZSA9IHRydWVcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuY2hhcmFjdGVyaXN0aWMpIHtcbiAgICAgICAgdGhpcy5pc0NoYXJhY3RpcmlzdGljID0gdHJ1ZVxuICAgICAgICB0aGlzLnJhd1ZhbHVlID1cbiAgICAgICAgICB0aGlzLmFjdG9yLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3NbdGhpcy5jaGFyYWN0ZXJpc3RpY10udmFsdWVcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc2tpbGwpIHtcbiAgICAgICAgdGhpcy5pc1NraWxsID0gdHJ1ZVxuICAgICAgICB0aGlzLnJhd1ZhbHVlID0gdGhpcy5za2lsbC52YWx1ZVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5hdHRyaWJ1dGUpIHtcbiAgICAgICAgdGhpcy5pc0F0dHJpYnV0ZSA9IHRydWVcbiAgICAgICAgdGhpcy5yYXdWYWx1ZSA9IHRoaXMuYWN0b3Iuc3lzdGVtLmF0dHJpYnNbdGhpcy5hdHRyaWJ1dGVdLnZhbHVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmx1Y2tTcGVudCAmJiAhdGhpcy5pc1NpbXBsZVJvbGwpIHtcbiAgICAgIGlmICh0aGlzLm1vZGlmaWVkUmVzdWx0IDw9IHRoaXMucmF3VmFsdWUpIHtcbiAgICAgICAgdGhpcy5zdWNjZXNzTGV2ZWwgPSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLnJlZ3VsYXJcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm1vZGlmaWVkUmVzdWx0IDw9IHRoaXMuaGFyZFRocmVzaG9sZCkge1xuICAgICAgICB0aGlzLnN1Y2Nlc3NMZXZlbCA9IENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuaGFyZFxuICAgICAgfVxuICAgICAgaWYgKHRoaXMubW9kaWZpZWRSZXN1bHQgPD0gdGhpcy5leHRyZW1lVGhyZXNob2xkKSB7XG4gICAgICAgIHRoaXMuc3VjY2Vzc0xldmVsID0gQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5leHRyZW1lXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5tb2RpZmllZFJlc3VsdCA+IHRoaXMucmF3VmFsdWUpIHtcbiAgICAgICAgdGhpcy5zdWNjZXNzTGV2ZWwgPSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmZhaWx1cmVcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm1vZGlmaWVkUmVzdWx0ID09PSAxKSB7XG4gICAgICAgIHRoaXMuc3VjY2Vzc0xldmVsID0gQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5jcml0aWNhbFxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZnVtYmxlVGhyZXNob2xkIDw9IHRoaXMubW9kaWZpZWRSZXN1bHQpIHtcbiAgICAgICAgdGhpcy5zdWNjZXNzTGV2ZWwgPSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmZ1bWJsZVxuICAgICAgfVxuICAgIH1cblxuICAgIHN3aXRjaCAodGhpcy5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgIGNhc2UgQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5yZWd1bGFyOlxuICAgICAgICB0aGlzLnJlc3VsdFR5cGUgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlJlZ3VsYXJTdWNjZXNzJylcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5oYXJkOlxuICAgICAgICB0aGlzLnJlc3VsdFR5cGUgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkhhcmRTdWNjZXNzJylcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5leHRyZW1lOlxuICAgICAgICB0aGlzLnJlc3VsdFR5cGUgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkV4dHJlbWVTdWNjZXNzJylcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5jcml0aWNhbDpcbiAgICAgICAgdGhpcy5yZXN1bHRUeXBlID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Dcml0aWNhbFN1Y2Nlc3MnKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmZ1bWJsZTpcbiAgICAgICAgdGhpcy5yZXN1bHRUeXBlID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5GdW1ibGUnKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmZhaWx1cmU6XG4gICAgICAgIHRoaXMucmVzdWx0VHlwZSA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRmFpbHVyZScpXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgaWYgKHRoaXMudW5rbm93bkRpZmZpY3VsdHkpIHtcbiAgICAgIHRoaXMuc3VjY2Vzc1JlcXVpcmVkID0gJydcbiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU2ltcGxlUm9sbCkge1xuICAgICAgdGhpcy5zdWNjZXNzUmVxdWlyZWQgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlN1Y2Nlc3NSZXF1aXJlZCcsIHtcbiAgICAgICAgc3VjY2Vzc1JlcXVpcmVkOiB0aGlzLmRpZmZpY3VsdHlTdHJpbmdcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKHRoaXMubW9kaWZpZWRSZXN1bHQgPT09IDEpIHtcbiAgICAgIHRoaXMuc3VjY2Vzc0xldmVsID0gQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5jcml0aWNhbFxuICAgIH1cbiAgICBpZiAoIXRoaXMubHVja1NwZW50ICYmICF0aGlzLmlzVW5rbm93biAmJiAhdGhpcy5pc1NpbXBsZVJvbGwpIHtcbiAgICAgIHRoaXMuaXNGYWlsdXJlID0gdGhpcy5mYWlsZWRcbiAgICAgIHRoaXMuaXNTdWNjZXNzID0gdGhpcy5wYXNzZWRcbiAgICB9XG5cbiAgICB0aGlzLmhhc01hbGZ1bmN0aW9uID0gZmFsc2VcbiAgICBpZiAodGhpcy5pc0Z1bWJsZSkgdGhpcy5zdWNjZXNzTGV2ZWwgPSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmZ1bWJsZVxuXG4gICAgaWYgKHRoaXMuaXRlbSkge1xuICAgICAgdGhpcy5pc0l0ZW0gPSB0cnVlXG4gICAgICBpZiAodGhpcy5pdGVtLnN5c3RlbS5tYWxmdW5jdGlvbikge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgTnVtYmVyKHRoaXMubW9kaWZpZWRSZXN1bHQpID49IE51bWJlcih0aGlzLml0ZW0uc3lzdGVtLm1hbGZ1bmN0aW9uKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLmhhc01hbGZ1bmN0aW9uID0gdHJ1ZVxuICAgICAgICAgIHRoaXMubWFsZnVuY3Rpb25UeHQgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lk1hbGZ1bmN0aW9uJywge1xuICAgICAgICAgICAgaXRlbU5hbWU6IHRoaXMuaXRlbS5uYW1lXG4gICAgICAgICAgfSlcbiAgICAgICAgICBhd2FpdCB0aGlzLml0ZW0udG9nZ2xlSXRlbUZsYWcoQ29DN0l0ZW0uZmxhZ3MubWFsZnVuY3Rpb24pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHRoaXMuY2FuQmVQdXNoZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLmNhbkJlUHVzaGVkID0gdGhpcy5za2lsbCA/IHRoaXMuc2tpbGwuY2FuQmVQdXNoZWQoKSA6IGZhbHNlXG4gICAgICBpZiAodGhpcy5jaGFyYWN0ZXJpc3RpYyAhPSBudWxsKSB0aGlzLmNhbkJlUHVzaGVkID0gdHJ1ZVxuICAgICAgaWYgKHRoaXMuaXNGdW1ibGUpIHRoaXMuY2FuQmVQdXNoZWQgPSBmYWxzZVxuICAgICAgaWYgKHRoaXMuZGVueVB1c2gpIHRoaXMuY2FuQmVQdXNoZWQgPSBmYWxzZVxuICAgIH1cblxuICAgIGlmICghdGhpcy5kZW55THVjayAmJiB0aGlzLmFjdG9yKSB7XG4gICAgICBpZiAoXG4gICAgICAgICF0aGlzLmx1Y2tTcGVudCAmJlxuICAgICAgICAhdGhpcy5wYXNzZWQgJiZcbiAgICAgICAgIXRoaXMuaXNGdW1ibGUgJiZcbiAgICAgICAgdGhpcy5kaWZmaWN1bHR5ICE9PSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmNyaXRpY2FsICYmXG4gICAgICAgICF0aGlzLnVua25vd25EaWZmaWN1bHR5XG4gICAgICApIHtcbiAgICAgICAgaWYgKHRoaXMuc2tpbGwgfHwgdGhpcy5jaGFyYWN0ZXJpc3RpYykge1xuICAgICAgICAgIGNvbnN0IGx1Y2tOZWVkZWQgPSB0aGlzLm1vZGlmaWVkUmVzdWx0IC0gdGhpcy5zdWNjZXNUaHJlc2hvbGRcbiAgICAgICAgICBpZiAodGhpcy5hY3Rvci5sdWNrID4gbHVja05lZWRlZCkge1xuICAgICAgICAgICAgdGhpcy5oYXNFbm91Z2hMdWNrID0gdHJ1ZVxuICAgICAgICAgICAgdGhpcy5sdWNrTmVlZGVkID0gbHVja05lZWRlZFxuICAgICAgICAgICAgdGhpcy5sdWNrTmVlZGVkVHh0ID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5TcGVuZEx1Y2snLCB7XG4gICAgICAgICAgICAgIGx1Y2tOZWVkZWRWYWx1ZTogbHVja05lZWRlZFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmx1Y2tTcGVudCkge1xuICAgICAgICB0aGlzLmluY3JlYXNlU3VjY2VzcyA9IFtdXG5cbiAgICAgICAgLy8gQ2FuJ3Qgc3BlbmQgbHVjayBvbiBwdXNoZWQgcm9sbHMuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAhdGhpcy5wdXNoaW5nICYmXG4gICAgICAgICAgdGhpcy5hdHRyaWJ1dGUgIT09ICdsY2snICYmXG4gICAgICAgICAgdGhpcy5hdHRyaWJ1dGUgIT09ICdzYW4nXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMudW5rbm93bkRpZmZpY3VsdHkgJiZcbiAgICAgICAgICAgIHRoaXMubW9kaWZpZWRSZXN1bHQgPiB0aGlzLnJlZ3VsYXJUaHJlc2hvbGRcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRMZXZlbCA9IHt9XG4gICAgICAgICAgICBuZXh0TGV2ZWwuZGlmZmljdWx0eU5hbWUgPSBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAgICdDb0M3LlJlZ3VsYXJEaWZmaWN1bHR5J1xuICAgICAgICAgICAgKVxuICAgICAgICAgICAgbmV4dExldmVsLmRpZmZpY3VsdHkgPSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXIgLy8gUkVGQUNUT1JJTkcgKDEpXG4gICAgICAgICAgICBuZXh0TGV2ZWwubHVja1RvU3BlbmQgPSB0aGlzLm1vZGlmaWVkUmVzdWx0IC0gdGhpcy5yZWd1bGFyVGhyZXNob2xkIC8vIFJFRkFDVE9SSU5HICgxKVxuICAgICAgICAgICAgbmV4dExldmVsLmhhc0Vub3VnaEx1Y2sgPSBuZXh0TGV2ZWwubHVja1RvU3BlbmQgPD0gdGhpcy5hY3Rvci5sdWNrXG4gICAgICAgICAgICBpZiAobmV4dExldmVsLmx1Y2tUb1NwZW5kIDw9IHRoaXMuYWN0b3IubHVjaykge1xuICAgICAgICAgICAgICB0aGlzLmluY3JlYXNlU3VjY2Vzcy5wdXNoKG5leHRMZXZlbClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmRpZmZpY3VsdHkgPD0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyICYmXG4gICAgICAgICAgICB0aGlzLm1vZGlmaWVkUmVzdWx0ID4gdGhpcy5oYXJkVGhyZXNob2xkXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0TGV2ZWwgPSB7fVxuICAgICAgICAgICAgbmV4dExldmVsLmRpZmZpY3VsdHlOYW1lID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkhhcmREaWZmaWN1bHR5JylcbiAgICAgICAgICAgIG5leHRMZXZlbC5kaWZmaWN1bHR5ID0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5oYXJkIC8vIFJFRkFDVE9SSU5HICgxKVxuICAgICAgICAgICAgbmV4dExldmVsLmx1Y2tUb1NwZW5kID0gdGhpcy5tb2RpZmllZFJlc3VsdCAtIHRoaXMuaGFyZFRocmVzaG9sZCAvLyBSRUZBQ1RPUklORyAoMSlcbiAgICAgICAgICAgIG5leHRMZXZlbC5oYXNFbm91Z2hMdWNrID0gbmV4dExldmVsLmx1Y2tUb1NwZW5kIDw9IHRoaXMuYWN0b3IubHVja1xuICAgICAgICAgICAgaWYgKG5leHRMZXZlbC5sdWNrVG9TcGVuZCA8PSB0aGlzLmFjdG9yLmx1Y2spIHtcbiAgICAgICAgICAgICAgdGhpcy5pbmNyZWFzZVN1Y2Nlc3MucHVzaChuZXh0TGV2ZWwpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5kaWZmaWN1bHR5IDw9IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuaGFyZCAmJlxuICAgICAgICAgICAgdGhpcy5tb2RpZmllZFJlc3VsdCA+IHRoaXMuZXh0cmVtZVRocmVzaG9sZFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY29uc3QgbmV4dExldmVsID0ge31cbiAgICAgICAgICAgIG5leHRMZXZlbC5kaWZmaWN1bHR5TmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgICAgICAgICAgJ0NvQzcuRXh0cmVtZURpZmZpY3VsdHknXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBuZXh0TGV2ZWwuZGlmZmljdWx0eSA9IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuZXh0cmVtZVxuICAgICAgICAgICAgbmV4dExldmVsLmx1Y2tUb1NwZW5kID0gdGhpcy5tb2RpZmllZFJlc3VsdCAtIHRoaXMuZXh0cmVtZVRocmVzaG9sZCAvLyBSRUZBQ1RPUklORyAoMSlcbiAgICAgICAgICAgIG5leHRMZXZlbC5oYXNFbm91Z2hMdWNrID0gbmV4dExldmVsLmx1Y2tUb1NwZW5kIDw9IHRoaXMuYWN0b3IubHVjayAvLyBSRUZBQ1RPUklORyAoMSlcbiAgICAgICAgICAgIGlmIChuZXh0TGV2ZWwubHVja1RvU3BlbmQgPD0gdGhpcy5hY3Rvci5sdWNrKSB7XG4gICAgICAgICAgICAgIHRoaXMuaW5jcmVhc2VTdWNjZXNzLnB1c2gobmV4dExldmVsKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmNhbkluY3JlYXNlU3VjY2VzcyA9IHRoaXMuaW5jcmVhc2VTdWNjZXNzLmxlbmd0aCA+IDBcbiAgICAgIGlmICh0aGlzLmlzRnVtYmxlKSB0aGlzLmNhbkluY3JlYXNlU3VjY2VzcyA9IGZhbHNlXG4gICAgfVxuXG4gICAgdGhpcy5jYW5Bd2FyZEV4cGVyaWVuY2UgPVxuICAgICAgdGhpcy5za2lsbCAmJiAhdGhpcy5za2lsbC5zeXN0ZW0ucHJvcGVydGllcy5ub3hwZ2FpblxuXG4gICAgaWYgKFxuICAgICAgdGhpcy5wYXNzZWQgJiZcbiAgICAgIHRoaXMuZGljZU1vZGlmaWVyIDw9IDAgJiZcbiAgICAgIHRoaXMuc2tpbGwgJiZcbiAgICAgICF0aGlzLnNraWxsLnN5c3RlbS5wcm9wZXJ0aWVzLm5veHBnYWluICYmXG4gICAgICAhdGhpcy5sdWNrU3BlbnQgJiZcbiAgICAgICF0aGlzLmZvcmNlZCAmJlxuICAgICAgIXRoaXMuaXNCbGluZCAmJlxuICAgICAgIXRoaXMuaXNVbmtub3duXG4gICAgKSB7XG4gICAgICB0aGlzLmZsYWdGb3JEZXZlbG9wZW1lbnQoKVxuICAgIH1cblxuICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgY29uc3QgcGFyZW50ID0gYXdhaXQgZnJvbVV1aWQodGhpcy5wYXJlbnQpXG4gICAgICBpZiAocGFyZW50ICYmICd1cGRhdGVSb2xsJyBpbiBwYXJlbnQpIHtcbiAgICAgICAgYXdhaXQgcGFyZW50LnVwZGF0ZVJvbGwodGhpcy5KU09OUm9sbFN0cmluZylcbiAgICAgICAgLy8gdWkubm90aWZpY2F0aW9ucy5pbmZvKCBgUm9sbCAke3RoaXMudXVpZH0gZGVwZW5kcyBvZiAke3RoaXMucGFyZW50fWApXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc2hvd0RpY2VSb2xsICgpIHtcbiAgICBpZiAoZ2FtZS5tb2R1bGVzLmdldCgnZGljZS1zby1uaWNlJyk/LmFjdGl2ZSkge1xuICAgICAgY29uc3QgZGljZVJlc3VsdHMgPSBbXVxuICAgICAgZm9yIChjb25zdCBkaWVSZXN1bHQgb2YgdGhpcy5kaWNlcy50ZW5zKSB7XG4gICAgICAgIGRpY2VSZXN1bHRzLnB1c2goZGllUmVzdWx0LnZhbHVlID09PSAxMDAgPyAwIDogZGllUmVzdWx0LnZhbHVlIC8gMTApXG4gICAgICB9XG4gICAgICBkaWNlUmVzdWx0cy5wdXNoKHRoaXMuZGljZXMudW5pdC52YWx1ZSlcblxuICAgICAgY29uc3QgZGljZURhdGEgPSB7XG4gICAgICAgIGZvcm11bGE6IGAke3RoaXMuZGljZXMudGVucy5sZW5ndGh9ZDEwMCsxZDEwYCxcbiAgICAgICAgcmVzdWx0czogZGljZVJlc3VsdHMsXG4gICAgICAgIHdoaXNwZXI6IG51bGwsXG4gICAgICAgIGJsaW5kOiBmYWxzZVxuICAgICAgfVxuICAgICAgZ2FtZS5kaWNlM2Quc2hvdyhkaWNlRGF0YSlcbiAgICB9XG4gIH1cblxuICBnZXQgY3NzQ2xhc3MgKCkge1xuICAgIGxldCBjc3NDbGFzcyA9ICcnXG4gICAgaWYgKHRoaXMuaXNTdWNjZXNzKSBjc3NDbGFzcyA9ICdzdWNjZXNzJ1xuICAgIGlmICh0aGlzLmlzRmFpbHVyZSkgY3NzQ2xhc3MgPSAnZmFpbHVyZSdcbiAgICBpZiAodGhpcy5pc0NyaXRpY2FsICYmICF0aGlzLmlzRmFpbHVyZSkgY3NzQ2xhc3MgPSAnc3VjY2VzcyBjcml0aWNhbCdcbiAgICBpZiAodGhpcy5pc0Z1bWJsZSAmJiAhdGhpcy5pc1N1Y2Nlc3MpIGNzc0NsYXNzID0gJ2ZhaWx1cmUgZnVtYmxlJ1xuICAgIGlmIChDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLnJlZ3VsYXIgPT09IHRoaXMuc3VjY2Vzc0xldmVsKSB7XG4gICAgICBjc3NDbGFzcyArPSAnIHJlZ3VsYXItc3VjY2VzcydcbiAgICB9XG4gICAgaWYgKENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuaGFyZCA9PT0gdGhpcy5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgIGNzc0NsYXNzICs9ICcgaGFyZC1zdWNjZXNzJ1xuICAgIH1cbiAgICBpZiAoQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5leHRyZW1lID09PSB0aGlzLnN1Y2Nlc3NMZXZlbCkge1xuICAgICAgY3NzQ2xhc3MgKz0gJyBleHRyZW1lLXN1Y2Nlc3MnXG4gICAgfVxuXG4gICAgcmV0dXJuIGNzc0NsYXNzXG4gIH1cblxuICBnZXQgY3NzQ2xhc3NMaXN0ICgpIHtcbiAgICBjb25zdCBjc3NDbGFzcyA9IFtdXG4gICAgaWYgKHRoaXMuaXNTdWNjZXNzKSBjc3NDbGFzcy5wdXNoKCdzdWNjZXNzJylcbiAgICBpZiAodGhpcy5pc0ZhaWx1cmUpIGNzc0NsYXNzLnB1c2goJ2ZhaWx1cmUnKVxuICAgIGlmICh0aGlzLmlzQ3JpdGljYWwgJiYgIXRoaXMuaXNGYWlsdXJlKSBjc3NDbGFzcy5wdXNoKCdzdWNjZXNzJywgJ2NyaXRpY2FsJylcbiAgICBpZiAodGhpcy5pc0Z1bWJsZSAmJiAhdGhpcy5pc1N1Y2Nlc3MpIGNzc0NsYXNzLnB1c2goJ2ZhaWx1cmUnLCAnZnVtYmxlJylcbiAgICBpZiAoQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5yZWd1bGFyID09PSB0aGlzLnN1Y2Nlc3NMZXZlbCkge1xuICAgICAgY3NzQ2xhc3MucHVzaCgncmVndWxhci1zdWNjZXNzJylcbiAgICB9XG4gICAgaWYgKENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuaGFyZCA9PT0gdGhpcy5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgIGNzc0NsYXNzLnB1c2goJ2hhcmQtc3VjY2VzcycpXG4gICAgfVxuICAgIGlmIChDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmV4dHJlbWUgPT09IHRoaXMuc3VjY2Vzc0xldmVsKSB7XG4gICAgICBjc3NDbGFzcy5wdXNoKCdleHRyZW1lLXN1Y2Nlc3MnKVxuICAgIH1cblxuICAgIHJldHVybiBjc3NDbGFzc1xuICB9XG5cbiAgZ2V0IHBsYXllckNzc0NsYXNzICgpIHtcbiAgICBpZiAodGhpcy5pc1N1Y2Nlc3MgfHwgdGhpcy5mb3JjZWRTdWNjZXNzKSByZXR1cm4gJ3N1Y2Nlc3MnXG4gICAgaWYgKHRoaXMuaXNGYWlsdXJlIHx8IHRoaXMuZm9yY2VkRmFpbHVyZSkgcmV0dXJuICdmYWlsdXJlJ1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBhc3luYyB1cGdyYWRlQ2hlY2sgKHVwZ3JhZGVpbmRleCwgdXBkYXRlID0gdHJ1ZSkge1xuICAgIGNvbnN0IGluY3JlYXNlZFN1Y2Nlc3MgPSB0aGlzLmluY3JlYXNlU3VjY2Vzc1t1cGdyYWRlaW5kZXhdXG4gICAgY29uc3QgbHVja0Ftb3VudCA9XG4gICAgICBwYXJzZUludChpbmNyZWFzZWRTdWNjZXNzLmx1Y2tBbW91bnQpIHx8XG4gICAgICBwYXJzZUludChpbmNyZWFzZWRTdWNjZXNzLmx1Y2tUb1NwZW5kKSAvLyBSRUZBQ1RPUklORyAoMSlcbiAgICBpZiAoIXRoaXMuYWN0b3Iuc3BlbmRMdWNrKGx1Y2tBbW91bnQpKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkVycm9yTm90RW5vdWdoTHVjaycsIHtcbiAgICAgICAgICBhY3RvcjogdGhpcy5hY3Rvci5uYW1lXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdGhpcy50b3RhbEx1Y2tTcGVudCA9ICFwYXJzZUludCh0aGlzLnRvdGFsTHVja1NwZW50KVxuICAgICAgPyAwXG4gICAgICA6IHBhcnNlSW50KHRoaXMudG90YWxMdWNrU3BlbnQpXG4gICAgdGhpcy50b3RhbEx1Y2tTcGVudCArPSBwYXJzZUludChsdWNrQW1vdW50KVxuICAgIGNvbnN0IG5ld1N1Y2Nlc3NMZXZlbCA9XG4gICAgICBwYXJzZUludChpbmNyZWFzZWRTdWNjZXNzLm5ld1N1Y2Nlc3NMZXZlbCkgfHxcbiAgICAgIHBhcnNlSW50KGluY3JlYXNlZFN1Y2Nlc3MuZGlmZmljdWx0eSkgLy8gUkVGQUNUT1JJTkcgKDEpXG4gICAgdGhpcy5zdWNjZXNzTGV2ZWwgPSBuZXdTdWNjZXNzTGV2ZWxcbiAgICBpZiAodGhpcy5kaWZmaWN1bHR5IDw9IG5ld1N1Y2Nlc3NMZXZlbCkge1xuICAgICAgdGhpcy5pc1N1Y2Nlc3MgPSB0cnVlXG4gICAgICB0aGlzLmlzRmFpbHVyZSA9IGZhbHNlXG4gICAgfVxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB1cGdyYWRlaW5kZXggKyAxOyBpbmRleCsrKSB7XG4gICAgICB0aGlzLmluY3JlYXNlU3VjY2Vzcy5zaGlmdCgpXG4gICAgfVxuICAgIGZvciAoY29uc3QgcyBvZiB0aGlzLmluY3JlYXNlU3VjY2Vzcykge1xuICAgICAgcy5sdWNrVG9TcGVuZCA9IHMubHVja1RvU3BlbmQgLSBsdWNrQW1vdW50XG4gICAgfVxuICAgIHRoaXMubHVja1NwZW50ID0gdHJ1ZVxuICAgIHRoaXMuY29tcHV0ZUNoZWNrKClcbiAgICBpZiAodXBkYXRlKSByZXR1cm4gYXdhaXQgdGhpcy51cGRhdGVDaGF0Q2FyZCgpXG4gIH1cblxuICByZW1vdmVVcGdyYWRlcyAoKSB7XG4gICAgdGhpcy5jYW5JbmNyZWFzZVN1Y2Nlc3MgPSBmYWxzZVxuICAgIHRoaXMuaW5jcmVhc2VTdWNjZXNzID0gW11cbiAgICB0aGlzLmx1Y2tOZWVkZWQgPSAwXG4gICAgdGhpcy5sdWNrTmVlZGVkVHh0ID0gbnVsbFxuICAgIHRoaXMuY2FuQmVQdXNoZWQgPSBmYWxzZVxuICB9XG5cbiAgZm9yY2VQYXNzIChsdWNrQW1vdW50ID0gbnVsbCwgdXBkYXRlID0gdHJ1ZSkge1xuICAgIGlmIChsdWNrQW1vdW50KSB7XG4gICAgICB0aGlzLmFjdG9yLnNwZW5kTHVjayhsdWNrQW1vdW50KVxuICAgICAgdGhpcy5zdWNjZXNzTGV2ZWwgPSB0aGlzLmRpZmZpY3VsdHlcbiAgICAgIGZvciAoY29uc3QgcyBvZiB0aGlzLmluY3JlYXNlU3VjY2Vzcykge1xuICAgICAgICBzLmx1Y2tUb1NwZW5kID0gcy5sdWNrVG9TcGVuZCAtIGx1Y2tBbW91bnRcbiAgICAgIH1cbiAgICAgIHRoaXMubHVja1NwZW50ID0gdHJ1ZVxuICAgICAgdGhpcy5pc1N1Y2Nlc3MgPSB0cnVlXG4gICAgICB0aGlzLmlzRmFpbHVyZSA9IGZhbHNlXG4gICAgICB0aGlzLnRvdGFsTHVja1NwZW50ID0gIXBhcnNlSW50KHRoaXMudG90YWxMdWNrU3BlbnQpXG4gICAgICAgID8gMFxuICAgICAgICA6IHBhcnNlSW50KHRoaXMudG90YWxMdWNrU3BlbnQpXG4gICAgICB0aGlzLnRvdGFsTHVja1NwZW50ICs9IHBhcnNlSW50KGx1Y2tBbW91bnQpXG4gICAgICB0aGlzLmNvbXB1dGVDaGVjaygpXG4gICAgICBpZiAodXBkYXRlKSB0aGlzLnVwZGF0ZUNoYXRDYXJkKClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mb3JjZWQgPSB0cnVlXG4gICAgICB0aGlzLmZvcmNlZFN1Y2Nlc3MgPSB0cnVlXG4gICAgICBpZiAodGhpcy5pc1Vua25vd24pIHtcbiAgICAgICAgdGhpcy5mb3JjZVN1Y2Nlc3NMZXZlbChDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLnJlZ3VsYXIsIHVwZGF0ZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZm9yY2VTdWNjZXNzTGV2ZWwodGhpcy5kaWZmaWN1bHR5LCB1cGRhdGUpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yY2VGYWlsICh1cGRhdGUgPSB0cnVlKSB7XG4gICAgdGhpcy5mb3JjZWQgPSB0cnVlXG4gICAgdGhpcy5mb3JjZWRGYWlsdXJlID0gdHJ1ZVxuICAgIGlmICh0aGlzLmlzVW5rbm93bikge1xuICAgICAgdGhpcy5mb3JjZVN1Y2Nlc3NMZXZlbChDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmZhaWx1cmUsIHVwZGF0ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mb3JjZVN1Y2Nlc3NMZXZlbCh0aGlzLmRpZmZpY3VsdHkgLSAxLCB1cGRhdGUpXG4gICAgfVxuICB9XG5cbiAgX2ZvcmNlQ2hlY2sgKGhpZ2gsIGxvdywgdXBkYXRlID0gdHJ1ZSkge1xuICAgIGxldCB0b3RhbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChoaWdoIC0gbG93KSkgKyBsb3cgKyAxXG4gICAgY29uc3QgdW5pdFRvdGFsID0gdG90YWwgJSAxMFxuICAgIGxldCB0ZW5Ub3RhbCA9IE1hdGguZmxvb3IodG90YWwgLyAxMClcbiAgICBjb25zdCB0ZW5zID0gW11cblxuICAgIGxldCBoYXNFbm91Z2ggPSBNYXRoLmFicyh0aGlzLmRpY2VNb2RpZmllcikgPT09IHRlbnMubGVuZ3RoXG4gICAgd2hpbGUgKCFoYXNFbm91Z2gpIHtcbiAgICAgIGxldCB0ZW4gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMClcbiAgICAgIGxldCByb2xsID0gdGVuICogMTAgKyB1bml0VG90YWxcbiAgICAgIGlmIChyb2xsID09PSAwKSB7XG4gICAgICAgIHJvbGwgPSAxMDBcbiAgICAgICAgdGVuID0gMTAwXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5oYXNQZW5hbHR5ICYmIHJvbGwgPD0gaGlnaCkge1xuICAgICAgICB0ZW5zLnB1c2godGVuKVxuICAgICAgICBpZiAocm9sbCA+IHRvdGFsKSB0b3RhbCA9IHJvbGxcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmhhc0JvbnVzICYmIHJvbGwgPiBsb3cpIHtcbiAgICAgICAgdGVucy5wdXNoKHRlbilcbiAgICAgICAgaWYgKHJvbGwgPCB0b3RhbCkgdG90YWwgPSByb2xsXG4gICAgICB9XG4gICAgICBoYXNFbm91Z2ggPSB0ZW5zLmxlbmd0aCA9PT0gTWF0aC5hYnModGhpcy5kaWNlTW9kaWZpZXIpXG4gICAgfVxuXG4gICAgLy8gSW5zZXJ0IHJlc3VsdCBhdCByYW5kb20gcG9zaXRpb24uXG4gICAgaWYgKHRlblRvdGFsID09PSAxMCAmJiB1bml0VG90YWwgPT09IDApIHtcbiAgICAgIHRlblRvdGFsID0gMTAwXG4gICAgfVxuICAgIHRlbnMuc3BsaWNlKFxuICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGVucy5sZW5ndGggKyAxKSxcbiAgICAgIDAsXG4gICAgICB0ZW5Ub3RhbCA9PT0gMTAgPyAwIDogdGVuVG90YWxcbiAgICApXG5cbiAgICB0aGlzLmRpY2VzLnRlbnMgPSBbXVxuICAgIHRoaXMuZGljZXMudW5pdC52YWx1ZSA9IHVuaXRUb3RhbFxuICAgIHRoaXMubW9kaWZpZWRSZXN1bHQgPSB0b3RhbFxuICAgIHRoaXMuZGljZXMudG90YWwgPSB0b3RhbFxuICAgIHRoaXMuZGljZXMudGVuUmVzdWx0ID0gdG90YWwgLSB1bml0VG90YWxcblxuICAgIGNvbnN0IG1heCA9IHVuaXRUb3RhbCA9PT0gMCA/IDEwMCA6IDkwXG4gICAgY29uc3QgbWluID0gdW5pdFRvdGFsID09PSAwID8gMTAgOiAwXG4gICAgbGV0IHNlbGVjdGVkID0gdG90YWwgLSB1bml0VG90YWxcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGVucy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZGllID0ge31cbiAgICAgIGRpZS52YWx1ZSA9IHRlbnNbaV1cbiAgICAgIGlmIChkaWUudmFsdWUgPT09IHNlbGVjdGVkKSB7XG4gICAgICAgIHNlbGVjdGVkID0gMTAxXG4gICAgICAgIGRpZS5zZWxlY3RlZCA9IHRydWVcbiAgICAgICAgaWYgKHRoaXMuaGFzQm9udXMpIHtcbiAgICAgICAgICBkaWUuaXNNYXggPSB0cnVlXG4gICAgICAgICAgZGllLmlzTWluID0gZmFsc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkaWUuaXNNaW4gPSB0cnVlXG4gICAgICAgICAgZGllLmlzTWF4ID0gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGRpZS52YWx1ZSA9PT0gbWF4KSBkaWUuaXNNYXggPSB0cnVlXG4gICAgICAgIGVsc2UgZGllLmlzTWF4ID0gZmFsc2VcbiAgICAgICAgaWYgKGRpZS52YWx1ZSA9PT0gbWluKSBkaWUuaXNNaW4gPSB0cnVlXG4gICAgICAgIGVsc2UgZGllLmlzTWluID0gZmFsc2VcbiAgICAgIH1cbiAgICAgIC8vIGlmKCBkaWUudmFsdWUgPT0gMTAwKSBkaWUudmFsdWUgPSBcIjAwXCI7XG4gICAgICB0aGlzLmRpY2VzLnRlbnMucHVzaChkaWUpXG4gICAgfVxuXG4gICAgdGhpcy5jb21wdXRlQ2hlY2soKVxuICAgIGlmICh1cGRhdGUpIHRoaXMudXBkYXRlQ2hhdENhcmQoKVxuICB9XG5cbiAgZm9yY2VTdWNjZXNzTGV2ZWwgKHN1Y2Nlc3NMZXZlbCwgdXBkYXRlID0gdHJ1ZSkge1xuICAgIGxldCBoaWdoLCBsb3dcbiAgICBpZiAoQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5mdW1ibGUgPT09IHN1Y2Nlc3NMZXZlbCkge1xuICAgICAgaGlnaCA9IDEwMFxuICAgICAgbG93ID0gdGhpcy5mdW1ibGVUaHJlc2hvbGQgLSAxXG4gICAgfVxuICAgIGlmIChDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmZhaWx1cmUgPT09IHN1Y2Nlc3NMZXZlbCkge1xuICAgICAgaWYgKHRoaXMucmVndWxhclRocmVzaG9sZCA9PT0gdGhpcy5mdW1ibGVUaHJlc2hvbGQgLSAxKSB7XG4gICAgICAgIGhpZ2ggPSAxMDBcbiAgICAgIH0gZWxzZSBoaWdoID0gdGhpcy5mdW1ibGVUaHJlc2hvbGQgLSAxXG4gICAgICBsb3cgPSB0aGlzLnJlZ3VsYXJUaHJlc2hvbGRcbiAgICB9XG4gICAgaWYgKENvQzdDaGVjay5zdWNjZXNzTGV2ZWwucmVndWxhciA9PT0gc3VjY2Vzc0xldmVsKSB7XG4gICAgICBoaWdoID0gdGhpcy5yZWd1bGFyVGhyZXNob2xkXG4gICAgICBsb3cgPSB0aGlzLmhhcmRUaHJlc2hvbGRcbiAgICB9XG4gICAgaWYgKENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuaGFyZCA9PT0gc3VjY2Vzc0xldmVsKSB7XG4gICAgICBoaWdoID0gdGhpcy5oYXJkVGhyZXNob2xkXG4gICAgICBsb3cgPSB0aGlzLmV4dHJlbWVUaHJlc2hvbGRcbiAgICB9XG4gICAgaWYgKENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZXh0cmVtZSA9PT0gc3VjY2Vzc0xldmVsKSB7XG4gICAgICBoaWdoID0gdGhpcy5leHRyZW1lVGhyZXNob2xkXG4gICAgICBsb3cgPSAxXG4gICAgfVxuICAgIGlmIChDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmNyaXRpY2FsID09PSBzdWNjZXNzTGV2ZWwpIHtcbiAgICAgIGhpZ2ggPSAxXG4gICAgICBsb3cgPSAwXG4gICAgfVxuICAgIGlmIChoaWdoID09PSBsb3cpIGxvdy0tXG4gICAgaWYgKGhpZ2ggPT09IDApIGhpZ2ggPSB0aGlzLmZ1bWJsZVRocmVzaG9sZCAtIDFcbiAgICB0aGlzLl9mb3JjZUNoZWNrKGhpZ2gsIGxvdywgdXBkYXRlKVxuICB9XG5cbiAgaW5jcmVhc2VTdWNjZXNzTGV2ZWwgKHVwZGF0ZSA9IHRydWUpIHtcbiAgICBsZXQgaGlnaCwgbG93XG4gICAgaWYgKENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZnVtYmxlID09PSB0aGlzLnN1Y2Nlc3NMZXZlbCkge1xuICAgICAgaGlnaCA9IHRoaXMuZnVtYmxlVGhyZXNob2xkIC0gMVxuICAgICAgaWYgKHRoaXMucmVndWxhclRocmVzaG9sZCA9PT0gdGhpcy5mdW1ibGVUaHJlc2hvbGQgLSAxKSB7XG4gICAgICAgIGxvdyA9IHRoaXMuaGFyZFRocmVzaG9sZFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG93ID0gdGhpcy5yZWd1bGFyVGhyZXNob2xkXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmZhaWx1cmUgPT09IHRoaXMuc3VjY2Vzc0xldmVsKSB7XG4gICAgICBoaWdoID0gdGhpcy5yZWd1bGFyVGhyZXNob2xkXG4gICAgICBsb3cgPSB0aGlzLmhhcmRUaHJlc2hvbGRcbiAgICB9XG4gICAgaWYgKENvQzdDaGVjay5zdWNjZXNzTGV2ZWwucmVndWxhciA9PT0gdGhpcy5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgIGhpZ2ggPSB0aGlzLmhhcmRUaHJlc2hvbGRcbiAgICAgIGxvdyA9IHRoaXMuZXh0cmVtZVRocmVzaG9sZFxuICAgIH1cbiAgICBpZiAoQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5oYXJkID09PSB0aGlzLnN1Y2Nlc3NMZXZlbCkge1xuICAgICAgaGlnaCA9IHRoaXMuZXh0cmVtZVRocmVzaG9sZFxuICAgICAgbG93ID0gdGhpcy5jcml0aWNhbFRocmVzaG9sZFxuICAgIH1cbiAgICBpZiAoQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5leHRyZW1lID09PSB0aGlzLnN1Y2Nlc3NMZXZlbCkge1xuICAgICAgaGlnaCA9IHRoaXMuY3JpdGljYWxUaHJlc2hvbGRcbiAgICAgIGxvdyA9IDBcbiAgICB9XG4gICAgaWYgKGhpZ2ggPT09IGxvdykgbG93LS1cbiAgICB0aGlzLl9mb3JjZUNoZWNrKGhpZ2gsIGxvdywgdXBkYXRlKVxuICB9XG5cbiAgZGVjcmVhc2VTdWNjZXNzTGV2ZWwgKHVwZGF0ZSA9IHRydWUpIHtcbiAgICBsZXQgaGlnaCwgbG93XG4gICAgaWYgKENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZmFpbHVyZSA9PT0gdGhpcy5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgIGhpZ2ggPSAxMDBcbiAgICAgIGxvdyA9IHRoaXMuZnVtYmxlVGhyZXNob2xkIC0gMVxuICAgIH1cbiAgICBpZiAoQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5yZWd1bGFyID09PSB0aGlzLnN1Y2Nlc3NMZXZlbCkge1xuICAgICAgaGlnaCA9IHRoaXMuZnVtYmxlVGhyZXNob2xkIC0gMVxuICAgICAgbG93ID0gdGhpcy5yZWd1bGFyVGhyZXNob2xkXG4gICAgfVxuICAgIGlmIChDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmhhcmQgPT09IHRoaXMuc3VjY2Vzc0xldmVsKSB7XG4gICAgICBoaWdoID0gdGhpcy5yZWd1bGFyVGhyZXNob2xkXG4gICAgICBsb3cgPSB0aGlzLmhhcmRUaHJlc2hvbGRcbiAgICB9XG4gICAgaWYgKENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZXh0cmVtZSA9PT0gdGhpcy5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgIGhpZ2ggPSB0aGlzLmhhcmRUaHJlc2hvbGRcbiAgICAgIGxvdyA9IHRoaXMuZXh0cmVtZVRocmVzaG9sZFxuICAgIH1cbiAgICBpZiAoQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5jcml0aWNhbCA9PT0gdGhpcy5zdWNjZXNzTGV2ZWwpIHtcbiAgICAgIGhpZ2ggPSB0aGlzLmV4dHJlbWVUaHJlc2hvbGRcbiAgICAgIGxvdyA9IDFcbiAgICB9XG4gICAgaWYgKGhpZ2ggPT09IDApIGhpZ2ggPSB0aGlzLmZ1bWJsZVRocmVzaG9sZCAtIDFcbiAgICB0aGlzLl9mb3JjZUNoZWNrKGhpZ2gsIGxvdywgdXBkYXRlKVxuICB9XG5cbiAgYXN5bmMgZmxhZ0ZvckRldmVsb3BlbWVudCAoKSB7XG4gICAgdGhpcy5mbGFnZ2VkRm9yRGV2ZWxvcG1lbnQgPSB0cnVlXG4gICAgaWYgKHRoaXMuc2tpbGwpIGF3YWl0IHRoaXMuc2tpbGwuZmxhZ0ZvckRldmVsb3BlbWVudCgpXG4gIH1cblxuICBzZXQgZGlmZmljdWx0eSAoeCkge1xuICAgIHRoaXMuX2RpZmZpY3VsdHkgPSBwYXJzZUludCh4KVxuICB9XG5cbiAgZ2V0IGRpZmZpY3VsdHkgKCkge1xuICAgIHJldHVybiB0aGlzLl9kaWZmaWN1bHR5XG4gIH1cblxuICBzZXQgZmxhdm9yICh4KSB7XG4gICAgdGhpcy5fZmxhdm9yID0geFxuICB9XG5cbiAgc2V0IGNvbnRleHQgKHgpIHtcbiAgICB0aGlzLl9jb250ZXh0ID0geFxuICB9XG5cbiAgZ2V0IGNvbnRleHQgKCkge1xuICAgIGlmICghdGhpcy5fY29udGV4dCkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLl9jb250ZXh0XG4gIH1cblxuICBzZXQgcGFyZW50ICh4KSB7XG4gICAgaWYgKCF0aGlzLnV1aWQpIHRoaXMudXVpZCA9IGZvdW5kcnkudXRpbHMucmFuZG9tSUQoMTYpXG4gICAgdGhpcy5wYXJlbnRVdWlkID0geFxuICB9XG5cbiAgZ2V0IHBhcmVudCAoKSB7XG4gICAgaWYgKCF0aGlzLnBhcmVudFV1aWQpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5wYXJlbnRVdWlkXG4gIH1cblxuICBnZXQgZmxhdm9yICgpIHtcbiAgICBpZiAodGhpcy5fZmxhdm9yKSByZXR1cm4gdGhpcy5fZmxhdm9yXG4gICAgbGV0IGZsYXZvciA9ICcnXG4gICAgaWYgKHRoaXMuYWN0b3I/LnN5c3RlbSkge1xuICAgICAgaWYgKHRoaXMuc2tpbGwpIHtcbiAgICAgICAgZmxhdm9yID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5DaGVja1Jlc3VsdCcsIHtcbiAgICAgICAgICBuYW1lOiB0aGlzLnNraWxsLm5hbWUsXG4gICAgICAgICAgdmFsdWU6IHRoaXMucmF3VmFsdWVTdHJpbmcsXG4gICAgICAgICAgZGlmZmljdWx0eTogdGhpcy5kaWZmaWN1bHR5U3RyaW5nXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXRlbSkge1xuICAgICAgICBmbGF2b3IgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lkl0ZW1DaGVja1Jlc3VsdCcsIHtcbiAgICAgICAgICBpdGVtOiB0aGlzLml0ZW0ubmFtZSxcbiAgICAgICAgICBza2lsbDogdGhpcy5za2lsbC5uYW1lLFxuICAgICAgICAgIHZhbHVlOiB0aGlzLnJhd1ZhbHVlU3RyaW5nLFxuICAgICAgICAgIGRpZmZpY3VsdHk6IHRoaXMuZGlmZmljdWx0eVN0cmluZ1xuICAgICAgICB9KVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmNoYXJhY3RlcmlzdGljKSB7XG4gICAgICAgIGZsYXZvciA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuQ2hlY2tSZXN1bHQnLCB7XG4gICAgICAgICAgbmFtZTogZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICAgIHRoaXMuYWN0b3Iuc3lzdGVtLmNoYXJhY3RlcmlzdGljc1t0aGlzLmNoYXJhY3RlcmlzdGljXS5sYWJlbFxuICAgICAgICAgICksXG4gICAgICAgICAgdmFsdWU6IHRoaXMucmF3VmFsdWVTdHJpbmcsXG4gICAgICAgICAgZGlmZmljdWx0eTogdGhpcy5kaWZmaWN1bHR5U3RyaW5nXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuYXR0cmlidXRlKSB7XG4gICAgICAgIGZsYXZvciA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuQ2hlY2tSZXN1bHQnLCB7XG4gICAgICAgICAgbmFtZTogZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICAgIGBDb0M3LiR7dGhpcy5hY3Rvci5zeXN0ZW0uYXR0cmlic1t0aGlzLmF0dHJpYnV0ZV0ubGFiZWx9YFxuICAgICAgICAgICksXG4gICAgICAgICAgdmFsdWU6IHRoaXMucmF3VmFsdWVTdHJpbmcsXG4gICAgICAgICAgZGlmZmljdWx0eTogdGhpcy5kaWZmaWN1bHR5U3RyaW5nXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZGlzcGxheU5hbWUpIHtcbiAgICAgICAgZmxhdm9yID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5DaGVja1Jlc3VsdCcsIHtcbiAgICAgICAgICBuYW1lOiB0aGlzLmRpc3BsYXlOYW1lLFxuICAgICAgICAgIHZhbHVlOiB0aGlzLnJhd1ZhbHVlU3RyaW5nLFxuICAgICAgICAgIGRpZmZpY3VsdHk6IHRoaXMuZGlmZmljdWx0eVN0cmluZ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghZmxhdm9yKSB7XG4gICAgICBpZiAodGhpcy5yYXdWYWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5kaXNwbGF5TmFtZSkge1xuICAgICAgICAgIGZsYXZvciA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuQ2hlY2tSZXN1bHQnLCB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLmRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgdmFsdWU6IHRoaXMucmF3VmFsdWVTdHJpbmcsXG4gICAgICAgICAgICBkaWZmaWN1bHR5OiB0aGlzLmRpZmZpY3VsdHlTdHJpbmdcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZsYXZvciA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuQ2hlY2tSYXdWYWx1ZScsIHtcbiAgICAgICAgICAgIHJhd3ZhbHVlOiB0aGlzLnJhd1ZhbHVlLFxuICAgICAgICAgICAgZGlmZmljdWx0eTogdGhpcy5kaWZmaWN1bHR5U3RyaW5nXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLnB1c2hpbmcpIHtcbiAgICAgIGZsYXZvciA9IGAke2dhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuUHVzaGluZycpfSAke2ZsYXZvcn1gXG4gICAgfVxuXG4gICAgcmV0dXJuIGZsYXZvclxuICB9XG5cbiAgZ2V0IHRvb2x0aXBIZWFkZXIgKCkge1xuICAgIGlmICh0aGlzLmF0dHJpYnV0ZSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICBgQ29DNy5MaW5rQ2hlY2ske1xuICAgICAgICAgICAgdGhpcy5kaWZmaWN1bHR5ID09PSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXIgPyAnJyA6ICdEaWZmJ1xuICAgICAgICAgIH0keyF0aGlzLmRpY2VNb2RpZmllciA/ICcnIDogJ01vZGlmJ31gLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGRpZmZpY3VsdHk6IHRoaXMuZGlmZmljdWx0eVN0cmluZyxcbiAgICAgICAgICAgIG1vZGlmaWVyOiB0aGlzLmRpY2VNb2RpZmllcixcbiAgICAgICAgICAgIG5hbWU6IGdhbWUuaTE4bi5mb3JtYXQoXG4gICAgICAgICAgICAgIGBDb0M3LiR7dGhpcy5hY3Rvci5zeXN0ZW0uYXR0cmlic1t0aGlzLmF0dHJpYnV0ZV0ubGFiZWx9YFxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgKSArIGAgKCR7dGhpcy5hY3Rvci5zeXN0ZW0uYXR0cmlic1t0aGlzLmF0dHJpYnV0ZV0udmFsdWV9JSlgXG4gICAgICApXG4gICAgfVxuICAgIGlmICh0aGlzLmNoYXJhY3RlcmlzdGljKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgIGBDb0M3LkxpbmtDaGVjayR7XG4gICAgICAgICAgICB0aGlzLmRpZmZpY3VsdHkgPT09IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhciA/ICcnIDogJ0RpZmYnXG4gICAgICAgICAgfSR7IXRoaXMuZGljZU1vZGlmaWVyID8gJycgOiAnTW9kaWYnfWAsXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGlmZmljdWx0eTogdGhpcy5kaWZmaWN1bHR5U3RyaW5nLFxuICAgICAgICAgICAgbW9kaWZpZXI6IHRoaXMuZGljZU1vZGlmaWVyLFxuICAgICAgICAgICAgbmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgICAgICB0aGlzLmFjdG9yLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3NbdGhpcy5jaGFyYWN0ZXJpc3RpY10ubGFiZWxcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgICkgK1xuICAgICAgICBgICgke3RoaXMuYWN0b3Iuc3lzdGVtLmNoYXJhY3RlcmlzdGljc1t0aGlzLmNoYXJhY3RlcmlzdGljXS52YWx1ZX0lKWBcbiAgICAgIClcbiAgICB9XG4gICAgaWYgKHRoaXMuc2tpbGwpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoXG4gICAgICAgICAgYENvQzcuTGlua0NoZWNrJHtcbiAgICAgICAgICAgIHRoaXMuZGlmZmljdWx0eSA9PT0gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyID8gJycgOiAnRGlmZidcbiAgICAgICAgICB9JHshdGhpcy5kaWNlTW9kaWZpZXIgPyAnJyA6ICdNb2RpZid9YCxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBkaWZmaWN1bHR5OiB0aGlzLmRpZmZpY3VsdHlTdHJpbmcsXG4gICAgICAgICAgICBtb2RpZmllcjogdGhpcy5kaWNlTW9kaWZpZXIsXG4gICAgICAgICAgICBuYW1lOiB0aGlzLnNraWxsLm5hbWVcbiAgICAgICAgICB9XG4gICAgICAgICkgKyBgICgke3RoaXMuc2tpbGwudmFsdWV9JSlgXG4gICAgICApXG4gICAgfVxuICAgIGlmICh0aGlzLmRpc3BsYXlOYW1lKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgIGBDb0M3LkxpbmtDaGVjayR7XG4gICAgICAgICAgICB0aGlzLmRpZmZpY3VsdHkgPT09IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhciA/ICcnIDogJ0RpZmYnXG4gICAgICAgICAgfSR7IXRoaXMuZGljZU1vZGlmaWVyID8gJycgOiAnTW9kaWYnfWAsXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGlmZmljdWx0eTogdGhpcy5kaWZmaWN1bHR5U3RyaW5nLFxuICAgICAgICAgICAgbW9kaWZpZXI6IHRoaXMuZGljZU1vZGlmaWVyLFxuICAgICAgICAgICAgbmFtZTogdGhpcy5kaXNwbGF5TmFtZVxuICAgICAgICAgIH1cbiAgICAgICAgKSArIGAgKCR7dGhpcy5yYXdWYWx1ZVN0cmluZ30lKWBcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGFzeW5jIGdldEh0bWxSb2xsRWxlbWVudCAob3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9jaGF0L3JvbGxzL2luLWNhcmQtcm9sbC5odG1sJ1xuICAgIGlmICh0aGlzLm9wdGlvbnMpIHRoaXMub3B0aW9ucyA9IGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3QodGhpcy5vcHRpb25zLCBvcHRpb25zKVxuICAgIGVsc2UgdGhpcy5vcHRpb25zID0gb3B0aW9uc1xuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZSh0ZW1wbGF0ZSwgdGhpcylcbiAgICBpZiAoaHRtbCkgcmV0dXJuICQucGFyc2VIVE1MKGh0bWwpWzBdXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGFzeW5jIGdldEh0bWxSb2xsIChvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2NoYXQvcm9sbHMvaW4tY2FyZC1yb2xsLmh0bWwnXG4gICAgaWYgKHRoaXMub3B0aW9ucykgdGhpcy5vcHRpb25zID0gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdCh0aGlzLm9wdGlvbnMsIG9wdGlvbnMpXG4gICAgZWxzZSB0aGlzLm9wdGlvbnMgPSBvcHRpb25zXG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRlbXBsYXRlLCB0aGlzKVxuICAgIHJldHVybiBodG1sIHx8IHVuZGVmaW5lZFxuICB9XG5cbiAgYXN5bmMgdG9NZXNzYWdlIChwdXNoaW5nID0gZmFsc2UpIHtcbiAgICAvLyBJZiBjYXJkIGlzIHByb3ZpZGVkIGF0dHRhY2hlZCB0aGUgcm9sbCB0byB0aGUgY2FyZC4gSWYgVVJJRCBwcm92aWRlZCBhdHRhY2ggYXQgdGhpcyBwb3NpdGlvbi4/XG4gICAgdGhpcy5wdXNoaW5nID0gcHVzaGluZ1xuICAgIGNvbnN0IHRlbXBsYXRlID0gJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvY2hhdC9yb2xsLXJlc3VsdC5odG1sJ1xuXG4gICAgY29uc3QgaHRtbCA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRlbXBsYXRlLCB0aGlzKVxuXG4gICAgY29uc3Qgc3BlYWtlckRhdGEgPSB7fVxuICAgIGxldCBzcGVha2VyXG4gICAgaWYgKHRoaXMuYWN0b3IpIHtcbiAgICAgIGlmICh0aGlzLmFjdG9yLmlzVG9rZW4pIHtcbiAgICAgICAgc3BlYWtlckRhdGEudG9rZW4gPSB0aGlzLnRva2VuLmRvY3VtZW50XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuYWN0b3IuaXNEdW1teSkge1xuICAgICAgICBpZiAodGhpcy5hY3Rvci5uYW1lKSBzcGVha2VyID0geyBhbGlhczogdGhpcy5hY3Rvci5uYW1lIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNwZWFrZXJEYXRhLmFjdG9yID0gdGhpcy5hY3RvclxuICAgICAgfVxuICAgICAgc3BlYWtlciA9IENoYXRNZXNzYWdlLmdldFNwZWFrZXIoc3BlYWtlckRhdGEpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNwZWFrZXIgPSBDaGF0TWVzc2FnZS5nZXRTcGVha2VyKClcbiAgICB9XG5cbiAgICBjb25zdCB1c2VyID0gdGhpcy5hY3Rvcj8udXNlciA/IHRoaXMuYWN0b3IudXNlciA6IGdhbWUudXNlclxuXG4gICAgY29uc3QgY2hhdERhdGEgPSB7XG4gICAgICB1c2VyOiB1c2VyLmlkLFxuICAgICAgc3BlYWtlcixcbiAgICAgIGZsYXZvcjogdGhpcy5mbGF2b3IsXG4gICAgICBjb250ZW50OiBodG1sLFxuICAgICAgZmxhZ3M6IHtcbiAgICAgICAgQ29DNzoge1xuICAgICAgICAgIHR5cGU6IENvQzdDaGVjay5jYXJkVHlwZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudXVpZCkgY2hhdERhdGEuZmxhZ3MuQ29DNy51dWlkID0gdGhpcy51dWlkXG4gICAgaWYgKHRoaXMuY29udGV4dCkgY2hhdERhdGEuZmxhZ3MuQ29DNy5jb250ZXh0ID0gdGhpcy5jb250ZXh0XG5cbiAgICBpZiAodGhpcy5yb2xsTW9kZSA9PT0gJ3NlbGZyb2xsJykge1xuICAgICAgaWYgKGdhbWUudXNlci5pc0dNKSB7XG4gICAgICAgIGNoYXREYXRhLnVzZXIgPSBnYW1lLnVzZXIuaWRcbiAgICAgICAgY2hhdERhdGEuZmxhdm9yID0gYFske3RoaXMuYWN0b3IubmFtZX1dICR7Y2hhdERhdGEuZmxhdm9yfWBcbiAgICAgICAgY2hhdERhdGEuZmxhZ3MgPSB7XG4gICAgICAgICAgQ29DNzoge1xuICAgICAgICAgICAgR01TZWxmUm9sbDogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGNoYXREYXRhLnNwZWFrZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgY2hhdERhdGEuZmxhZ3MuQ29DNy5vcmlnaW5hbFNwZWFrZXIgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShjaGF0RGF0YS5zcGVha2VyKVxuICAgICAgICB9XG4gICAgICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgICAgIHN3aXRjaCAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnc2VsZlJvbGxXaGlzcGVyVGFyZ2V0JykpIHtcbiAgICAgICAgICAgIGNhc2UgJ293bmVycyc6XG4gICAgICAgICAgICAgIGRlbGV0ZSBjaGF0RGF0YS5zcGVha2VyXG4gICAgICAgICAgICAgIGNoYXREYXRhLndoaXNwZXIgPSB0aGlzLmFjdG9yLm93bmVyc1xuICAgICAgICAgICAgICBjaGF0RGF0YS50eXBlID0gQ09OU1QuQ0hBVF9NRVNTQUdFX1RZUEVTLldISVNQRVJcbiAgICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgICAgY2FzZSAnZXZlcnlvbmUnOlxuICAgICAgICAgICAgICBkZWxldGUgY2hhdERhdGEuc3BlYWtlclxuICAgICAgICAgICAgICBjaGF0RGF0YS53aGlzcGVyID0gZ2FtZS51c2Vycy5wbGF5ZXJzXG4gICAgICAgICAgICAgIGNoYXREYXRhLnR5cGUgPSBDT05TVC5DSEFUX01FU1NBR0VfVFlQRVMuV0hJU1BFUlxuICAgICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBDaGF0TWVzc2FnZS5hcHBseVJvbGxNb2RlKGNoYXREYXRhLCB0aGlzLnJvbGxNb2RlKVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIENoYXRNZXNzYWdlLmFwcGx5Um9sbE1vZGUoY2hhdERhdGEsIHRoaXMucm9sbE1vZGUpXG4gICAgfVxuXG4gICAgaWYgKFsnZ21yb2xsJywgJ2JsaW5kcm9sbCddLmluY2x1ZGVzKHRoaXMucm9sbE1vZGUpKSB7XG4gICAgICBjaGF0RGF0YS53aGlzcGVyID0gQ2hhdE1lc3NhZ2UuZ2V0V2hpc3BlclJlY2lwaWVudHMoJ0dNJylcbiAgICB9XG4gICAgaWYgKHRoaXMucm9sbE1vZGUgPT09ICdibGluZHJvbGwnKSBjaGF0RGF0YS5ibGluZCA9IHRydWVcblxuICAgIC8vIENoYXRNZXNzYWdlLmFwcGx5Um9sbE1vZGUoIGNoYXREYXRhLCB0aGlzLnJvbGxNb2RlKTtcbiAgICBpZiAodGhpcy5kaWNlPy5yb2xsICYmICF0aGlzLmRpY2U/LmhpZGVEaWNlKSB7XG4gICAgICAvLyBGb3VuZHJ5VlRUIHYxMVxuICAgICAgaWYgKGZvdW5kcnkudXRpbHMuaXNOZXdlclZlcnNpb24oZ2FtZS52ZXJzaW9uLCAnMTEnKSkge1xuICAgICAgICBjaGF0RGF0YS5yb2xscyA9IFt0aGlzLmRpY2Uucm9sbF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoYXREYXRhLnJvbGwgPSB0aGlzLmRpY2Uucm9sbFxuICAgICAgfVxuICAgICAgY2hhdERhdGEudHlwZSA9IENPTlNULkNIQVRfTUVTU0FHRV9UWVBFUy5ST0xMXG4gICAgICBjaGF0RGF0YS5yb2xsTW9kZSA9IHRoaXMuaXNCbGluZCA/ICdibGluZHJvbGwnIDogdGhpcy5yb2xsTW9kZVxuICAgIH1cblxuICAgIENoYXRNZXNzYWdlLmNyZWF0ZShjaGF0RGF0YSkudGhlbihtc2cgPT4ge1xuICAgICAgcmV0dXJuIG1zZ1xuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHsqfSBtYWtlUHVibGljICBXaWxsIGNoYW5nZSB0aGUgcm9sbCBtb2RlIHRvIHB1YmxpY1xuICAgKi9cbiAgYXN5bmMgdXBkYXRlQ2hhdENhcmQgKHsgbWFrZVB1YmxpYyA9IGZhbHNlLCBmb3JjZVJvbGwgPSBmYWxzZSB9ID0ge30pIHtcbiAgICBpZiAobWFrZVB1YmxpYykgdGhpcy5yb2xsTW9kZSA9IGZhbHNlIC8vIHJlc2V0IHJvbGwgbW9kZVxuXG4gICAgY29uc3QgY2hhdERhdGEgPSB7IGZsYXZvcjogdGhpcy5mbGF2b3IgfVxuXG4gICAgaWYgKG1ha2VQdWJsaWMpIHtcbiAgICAgIGNoYXREYXRhLndoaXNwZXIgPSBbXVxuICAgICAgY2hhdERhdGEuYmxpbmQgPSBmYWxzZVxuICAgICAgQ2hhdE1lc3NhZ2UuYXBwbHlSb2xsTW9kZShjaGF0RGF0YSlcbiAgICB9IC8vIGVsc2Uge1xuICAgIC8vIGNoYXREYXRhLndoaXNwZXIgPSBbXVxuICAgIC8vIGNoYXREYXRhLmJsaW5kID0gZmFsc2VcbiAgICAvLyBDaGF0TWVzc2FnZS5hcHBseVJvbGxNb2RlKGNoYXREYXRhLCBnYW1lLnNldHRpbmdzLmdldCgnY29yZScsICdyb2xsTW9kZScpKVxuICAgIC8vIH1cblxuICAgIGlmIChjaGF0RGF0YS5ibGluZCkge1xuICAgICAgdGhpcy5pc0JsaW5kID0gdHJ1ZVxuICAgIH1cblxuICAgIGNvbnN0IHRlbXBsYXRlID0gJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvY2hhdC9yb2xsLXJlc3VsdC5odG1sJ1xuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZSh0ZW1wbGF0ZSwgdGhpcylcbiAgICBsZXQgbmV3Q29udGVudCA9IGh0bWxcblxuICAgIGlmICghdGhpcy5tZXNzYWdlSWQpIHJldHVybiAkLnBhcnNlSFRNTChodG1sKVswXSAvLyBJZiBubyBtZXNzYWdlSWQgcmV0dXJuIHRoZSBIVE1MRWxlbWVudCBjb250YWluaW5nIHRoZSByb2xsLlxuICAgIC8vIElmIG5vIG1lc3NhZ2VJZFxuXG4gICAgY29uc3QgbWVzc2FnZSA9IGdhbWUubWVzc2FnZXMuZ2V0KHRoaXMubWVzc2FnZUlkKVxuICAgIGNvbnN0IGh0bWxNZXNzYWdlID0gJC5wYXJzZUhUTUwobWVzc2FnZS5jb250ZW50KVswXVxuICAgIGlmICghaHRtbE1lc3NhZ2UuY2xhc3NMaXN0LmNvbnRhaW5zKCdyb2xsLXJlc3VsdCcpKSB7XG4gICAgICBjb25zdCBodG1sQ2hlY2sgPSAkLnBhcnNlSFRNTChodG1sKVswXVxuICAgICAgY29uc3Qgcm9sbFJlc3VsdEVsZW1lbnQgPSBodG1sTWVzc2FnZS5xdWVyeVNlbGVjdG9yKCcucm9sbC1yZXN1bHQnKVxuICAgICAgaWYgKHJvbGxSZXN1bHRFbGVtZW50ICE9PSBudWxsKSB7XG4gICAgICAgIHJvbGxSZXN1bHRFbGVtZW50LnJlcGxhY2VXaXRoKGh0bWxDaGVjaylcbiAgICAgIH1cbiAgICAgIG5ld0NvbnRlbnQgPSBodG1sTWVzc2FnZS5vdXRlckhUTUxcbiAgICB9XG5cbiAgICBjaGF0RGF0YS5jb250ZW50ID0gbmV3Q29udGVudFxuXG4gICAgaWYgKENPTlNULkNIQVRfTUVTU0FHRV9UWVBFUy5ST0xMID09PSBtZXNzYWdlLnR5cGUpIHtcbiAgICAgIGlmIChtZXNzYWdlLndoaXNwZXI/Lmxlbmd0aCkge1xuICAgICAgICBjaGF0RGF0YS50eXBlID0gQ09OU1QuQ0hBVF9NRVNTQUdFX1RZUEVTLldISVNQRVJcbiAgICAgIH0gZWxzZSBjaGF0RGF0YS50eXBlID0gQ09OU1QuQ0hBVF9NRVNTQUdFX1RZUEVTLk9USEVSXG4gICAgfVxuXG4gICAgaWYgKGZvcmNlUm9sbCAmJiB0aGlzLmRpY2U/LnJvbGwgJiYgKGdhbWUudXNlci5pc0dNIHx8ICF0aGlzLmlzQmxpbmQpKSB7XG4gICAgICBhd2FpdCBDb0M3RGljZS5zaG93Um9sbERpY2UzZCh0aGlzLmRpY2Uucm9sbClcbiAgICB9XG5cbiAgICBjb25zdCBtc2cgPSBhd2FpdCBtZXNzYWdlLnVwZGF0ZShjaGF0RGF0YSlcbiAgICBhd2FpdCB1aS5jaGF0LnVwZGF0ZU1lc3NhZ2UobXNnLCBmYWxzZSlcbiAgICByZXR1cm4gbXNnXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgdXBkYXRlQ2FyZFN3aXRjaCAoZXZlbnQpIHtcbiAgICBjb25zdCBjYXJkID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuY2hhdC1jYXJkJylcbiAgICBjb25zdCBjaGVjayA9IGF3YWl0IENvQzdDaGVjay5nZXRGcm9tQ2FyZChjYXJkKVxuICAgIGNoZWNrLmdtRGlmZmljdWx0eVJlZ3VsYXIgPSBmYWxzZVxuICAgIGNoZWNrLmdtRGlmZmljdWx0eUhhcmQgPSBmYWxzZVxuICAgIGNoZWNrLmdtRGlmZmljdWx0eUV4dHJlbWUgPSBmYWxzZVxuICAgIGNoZWNrLmdtRGlmZmljdWx0eUNyaXRpY2FsID0gZmFsc2VcbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmZsYWcgPT09ICdnbURpZmZpY3VsdHlSZWd1bGFyJykge1xuICAgICAgY2hlY2suZ21EaWZmaWN1bHR5UmVndWxhciA9IHRydWVcbiAgICB9XG4gICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5mbGFnID09PSAnZ21EaWZmaWN1bHR5SGFyZCcpIHtcbiAgICAgIGNoZWNrLmdtRGlmZmljdWx0eUhhcmQgPSB0cnVlXG4gICAgfVxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuZmxhZyA9PT0gJ2dtRGlmZmljdWx0eUV4dHJlbWUnKSB7XG4gICAgICBjaGVjay5nbURpZmZpY3VsdHlFeHRyZW1lID0gdHJ1ZVxuICAgIH1cbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmZsYWcgPT09ICdnbURpZmZpY3VsdHlDcml0aWNhbCcpIHtcbiAgICAgIGNoZWNrLmdtRGlmZmljdWx0eUNyaXRpY2FsID0gdHJ1ZVxuICAgIH1cbiAgICBjaGVjay5jb21wdXRlQ2hlY2soKVxuICAgIGNoZWNrLnVwZGF0ZUNoYXRDYXJkKClcbiAgfVxuXG4gIGdldCB0b29sdGlwICgpIHtcbiAgICByZXR1cm4gcmVuZGVyVGVtcGxhdGUoXG4gICAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9jaGF0L3JvbGxzL3JvbGwtdG9vbHRpcC5odG1sJyxcbiAgICAgIHRoaXNcbiAgICApXG4gIH1cblxuICBnZXQgaW5saW5lQ2hlY2sgKCkge1xuICAgIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJylcbiAgICBhLmNsYXNzTGlzdC5hZGQoJ2NvYzctaW5saW5lLWNoZWNrJylcbiAgICBhLmNsYXNzTGlzdC5hZGQoJ2NvYzctY2hlY2stcmVzdWx0JylcbiAgICBhLmNsYXNzTGlzdC5hZGQoJ2NvYzctaW5saW5lJylcbiAgICBhLmNsYXNzTGlzdC5hZGQoLi4udGhpcy5jc3NDbGFzc0xpc3QpXG4gICAgYS50aXRsZSA9IHRoaXMudG9vbHRpcEhlYWRlclxuICAgIGEuZGF0YXNldC5yb2xsID0gZXNjYXBlKHRoaXMuSlNPTlJvbGxTdHJpbmcpIC8vIFRPRE8hSU1QT1JUQU5UISEhXG4gICAgYS5pbm5lckhUTUwgPSBgPGkgY2xhc3M9XCJnYW1lLWljb24gZ2FtZS1pY29uLWQxMFwiPjwvaT4gJHtcbiAgICAgIHRoaXMubW9kaWZpZWRSZXN1bHQgfHwgJz8/J1xuICAgIH1gXG4gICAgcmV0dXJuIGFcbiAgfVxuXG4gIGdldCByb2xsVG9vbFRpcCAoKSB7XG4gICAgaWYgKHRoaXMuc3RhbmRieSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGNvbnN0IHBhcnRzID0gW11cbiAgICBjb25zdCB0ZW5zID0gdGhpcy5kaWNlcy50ZW5zLm1hcChyID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3VsdDogci52YWx1ZSxcbiAgICAgICAgc2VsZWN0ZWQ6IHIuc2VsZWN0ZWQsXG4gICAgICAgIGNsYXNzZXM6IFtcbiAgICAgICAgICAnZGllJyxcbiAgICAgICAgICAnZDEwJyxcbiAgICAgICAgICAhci5zZWxlY3RlZCA/ICdkaXNjYXJkZWQnIDogbnVsbCxcbiAgICAgICAgICByLmlzTWluID8gJ21pbicgOiBudWxsLFxuICAgICAgICAgIHIuaXNNYXggPyAnbWF4JyA6IG51bGxcbiAgICAgICAgXVxuICAgICAgICAgIC5maWx0ZXIoYyA9PiBjKVxuICAgICAgICAgIC5qb2luKCcgJylcbiAgICAgIH1cbiAgICB9KVxuICAgIGNvbnN0IHVuaXQgPSBbXG4gICAgICB7XG4gICAgICAgIHJlc3VsdDogdGhpcy5kaWNlcy51bml0LnZhbHVlLFxuICAgICAgICBzZWxlY3RlZDogdHJ1ZSxcbiAgICAgICAgY2xhc3NlczogJ2RpZSBkMTAnXG4gICAgICB9XG4gICAgXVxuXG4gICAgcGFydHMucHVzaCh7XG4gICAgICBmb3JtdWxhOiB0aGlzLnRvb2x0aXBIZWFkZXIsXG4gICAgICB0b3RhbDogdGhpcy5tb2RpZmllZFJlc3VsdCxcbiAgICAgIGljb25zOiB0aGlzLnN1Y2Nlc3NMZXZlbEljb25zLFxuICAgICAgY2xhc3M6IHRoaXMuY3NzQ2xhc3MsXG4gICAgICBzdWNjZXNzUmVxdWlyZWQ6IHRoaXMuc3VjY2Vzc1JlcXVpcmVkLFxuICAgICAgcmVzdWx0VHlwZTogdGhpcy5yZXN1bHRUeXBlLFxuICAgICAgZmFjZTogMTAsXG4gICAgICByb2xsczogWy4uLnRlbnMsIC4uLnVuaXRdXG4gICAgfSlcbiAgICByZXR1cm4gcmVuZGVyVGVtcGxhdGUoXG4gICAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9jaGF0L3JvbGxzL3JvbGwtdG9vbHRpcC5odG1sJyxcbiAgICAgIHsgcGFydHMgfVxuICAgIClcbiAgfVxuXG4gIGdldCBKU09OUm9sbERhdGEgKCkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMuSlNPTlJvbGxTdHJpbmcpXG4gIH1cblxuICBnZXQgSlNPTlJvbGxTdHJpbmcgKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgICBjb25zdCBleGNsdWRlID0gWydfYWN0b3InLCAnX3NraWxsJywgJ19pdGVtJ11cbiAgICAgIGlmIChleGNsdWRlLmluY2x1ZGVzKGtleSkpIHJldHVybiB1bmRlZmluZWRcbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0pXG4gIH1cblxuICBzdGF0aWMgZnJvbURhdGEgKGRhdGEpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgQ29DN0NoZWNrKCksIGRhdGEpXG4gIH1cblxuICBzdGF0aWMgZnJvbVJvbGxTdHJpbmcgKGRhdGFTdHJpbmcpIHtcbiAgICBsZXQgZGF0YVxuICAgIHRyeSB7XG4gICAgICBkYXRhID0gSlNPTi5wYXJzZSh1bmVzY2FwZShkYXRhU3RyaW5nKSlcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoZXJyLm1lc3NhZ2UpXG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICByZXR1cm4gQ29DN0NoZWNrLmZyb21EYXRhKGRhdGEpXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgYWx0ZXIgKGNoZWNrLCBjb21tYW5kLCBvcHRpb25zID0ge30pIHtcbiAgICBzd2l0Y2ggKGNvbW1hbmQpIHtcbiAgICAgIGNhc2UgJ3VzZUx1Y2snOiB7XG4gICAgICAgIGlmIChvcHRpb25zLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3Bhc3MtY2hlY2snKSkge1xuICAgICAgICAgIGNvbnN0IGx1Y2tBbW91bnQgPSBwYXJzZUludChvcHRpb25zLnRhcmdldC5kYXRhc2V0Lmx1Y2tBbW91bnQpXG4gICAgICAgICAgY2hlY2suZm9yY2VQYXNzKGx1Y2tBbW91bnQsIG9wdGlvbnMudXBkYXRlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHVwZ3JhZGVJbmRleCA9IHBhcnNlSW50KG9wdGlvbnMudGFyZ2V0LmRhdGFzZXQuaW5kZXgpXG4gICAgICAgICAgYXdhaXQgY2hlY2sudXBncmFkZUNoZWNrKHVwZ3JhZGVJbmRleCwgb3B0aW9ucy51cGRhdGUpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSAnZm9yY2UtcGFzcyc6IHtcbiAgICAgICAgY2hlY2suZm9yY2VQYXNzKG51bGwsIG9wdGlvbnMudXBkYXRlKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICdmb3JjZS1mYWlsJzoge1xuICAgICAgICBjaGVjay5mb3JjZUZhaWwob3B0aW9ucy51cGRhdGUpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ2luY3JlYXNlLXN1Y2Nlc3MtbGV2ZWwnOiB7XG4gICAgICAgIGNoZWNrLmluY3JlYXNlU3VjY2Vzc0xldmVsKG9wdGlvbnMudXBkYXRlKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICdkZWNyZWFzZS1zdWNjZXNzLWxldmVsJzoge1xuICAgICAgICBjaGVjay5kZWNyZWFzZVN1Y2Nlc3NMZXZlbChvcHRpb25zLnVwZGF0ZSlcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSAncmV2ZWFsLWNoZWNrJzoge1xuICAgICAgICBjaGVjay5pc0JsaW5kID0gZmFsc2VcbiAgICAgICAgY2hlY2sucm9sbE1vZGUgPSBmYWxzZVxuICAgICAgICBjaGVjay5jb21wdXRlQ2hlY2soKVxuICAgICAgICBpZiAob3B0aW9ucy51cGRhdGUpIGNoZWNrLnVwZGF0ZUNoYXRDYXJkKClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSAnZmxhZy1mb3ItZGV2ZWxvcG1lbnQnOiB7XG4gICAgICAgIGF3YWl0IGNoZWNrLmZsYWdGb3JEZXZlbG9wZW1lbnQoKVxuICAgICAgICBjaGVjay5jb21wdXRlQ2hlY2soKVxuICAgICAgICBpZiAob3B0aW9ucy51cGRhdGUpIGNoZWNrLnVwZGF0ZUNoYXRDYXJkKClcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSAncHVzaCc6IHtcbiAgICAgICAgYXdhaXQgY2hlY2suX3BlcmZvcm0oKVxuICAgICAgICBjaGVjay5wdXNoaW5nID0gdHJ1ZVxuICAgICAgICBpZiAob3B0aW9ucy51cGRhdGUpIGNoZWNrLnVwZGF0ZUNoYXRDYXJkKClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgX29uQ2xpY2tJbmxpbmVSb2xsIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBhID0gZXZlbnQuY3VycmVudFRhcmdldFxuXG4gICAgaWYgKGEuY2xhc3NMaXN0LmNvbnRhaW5zKCdjb2M3LWNoZWNrLXJlc3VsdCcpKSB7XG4gICAgICBpZiAoYS5jbGFzc0xpc3QuY29udGFpbnMoJ2V4cGFuZGVkJykpIHtcbiAgICAgICAgcmV0dXJuIENvQzdDaGVjay5fY29sbGFwc2VJbmxpbmVSZXN1bHQoYSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBDb0M3Q2hlY2suX2V4cGFuZElubGluZVJlc3VsdChhKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBfY29sbGFwc2VJbmxpbmVSZXN1bHQgKGEpIHtcbiAgICBpZiAoIWEuY2xhc3NMaXN0LmNvbnRhaW5zKCdjb2M3LWlubGluZS1jaGVjaycpKSByZXR1cm5cbiAgICBpZiAoIWEuY2xhc3NMaXN0LmNvbnRhaW5zKCdleHBhbmRlZCcpKSByZXR1cm5cbiAgICBjb25zdCB0b29sdGlwID0gYS5xdWVyeVNlbGVjdG9yKCcuY29jNy1jaGVjay10b29sdGlwJylcbiAgICBpZiAodG9vbHRpcCkgdG9vbHRpcC5yZW1vdmUoKVxuICAgIHJldHVybiBhLmNsYXNzTGlzdC5yZW1vdmUoJ2V4cGFuZGVkJylcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBfZXhwYW5kSW5saW5lUmVzdWx0IChhKSB7XG4gICAgaWYgKCFhLmNsYXNzTGlzdC5jb250YWlucygnY29jNy1pbmxpbmUtY2hlY2snKSkgcmV0dXJuXG4gICAgaWYgKGEuY2xhc3NMaXN0LmNvbnRhaW5zKCdleHBhbmRlZCcpKSByZXR1cm5cblxuICAgIC8vIENyZWF0ZSBhIG5ldyB0b29sdGlwXG4gICAgY29uc3QgY2hlY2sgPSBPYmplY3QuYXNzaWduKFxuICAgICAgbmV3IENvQzdDaGVjaygpLFxuICAgICAgSlNPTi5wYXJzZSh1bmVzY2FwZShhLmRhdGFzZXQucm9sbCkpXG4gICAgKSAvLyBUT0RPIDogZmluZCBzdHJpbmdpZnkgdW5lc2NhcGUgISEgMjAyMTAyMDVcbiAgICBpZiAoY2hlY2suc3RhbmRieSkgcmV0dXJuXG5cbiAgICBjb25zdCB0aXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHRpcC5pbm5lckhUTUwgPSBhd2FpdCBjaGVjay5yb2xsVG9vbFRpcFxuXG4gICAgLy8gQWRkIHRoZSB0b29sdGlwXG4gICAgY29uc3QgdG9vbHRpcCA9IHRpcC5jaGlsZHJlblswXVxuICAgIGEuYXBwZW5kQ2hpbGQodG9vbHRpcClcbiAgICBhLmNsYXNzTGlzdC5hZGQoJ2V4cGFuZGVkJylcblxuICAgIC8vIFNldCB0aGUgcG9zaXRpb25cbiAgICBjb25zdCBwYSA9IGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICBjb25zdCBwdCA9IHRvb2x0aXAuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICB0b29sdGlwLnN0eWxlLmxlZnQgPSBgJHtNYXRoLm1pbihcbiAgICAgIHBhLngsXG4gICAgICB3aW5kb3cuaW5uZXJXaWR0aCAtIChwdC53aWR0aCArIDMpXG4gICAgKX1weGBcbiAgICB0b29sdGlwLnN0eWxlLnRvcCA9IGAke01hdGgubWluKFxuICAgICAgcGEueSArIHBhLmhlaWdodCArIDMsXG4gICAgICB3aW5kb3cuaW5uZXJIZWlnaHQgLSAocHQuaGVpZ2h0ICsgMylcbiAgICApfXB4YFxuICAgIGNvbnN0IHppID0gZ2V0Q29tcHV0ZWRTdHlsZShhKS56SW5kZXhcbiAgICB0b29sdGlwLnN0eWxlLnpJbmRleCA9IE51bWJlci5pc051bWVyaWMoemkpID8gemkgKyAxIDogMTAwXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBjYW52YXMsIENoYXRNZXNzYWdlLCBDT05GSUcsIENPTlNULCBEaWFsb2csIEZvbGRlciwgZm91bmRyeSwgZnJvbVV1aWQsIGZyb21VdWlkU3luYywgZ2FtZSwgZ2V0RG9jdW1lbnRDbGFzcywgSG9va3MsIE1hY3JvLCBSb2xsLCBUb2tlbiwgdWkgKi9cbmltcG9ydCB7IENPQzcgfSBmcm9tICcuL2NvbmZpZy5qcydcbmltcG9ydCB7IENvQzdDaGVjayB9IGZyb20gJy4vY2hlY2suanMnXG5pbXBvcnQgeyBDb0M3SXRlbSB9IGZyb20gJy4vaXRlbXMvaXRlbS5qcydcbmltcG9ydCB7IFJvbGxEaWFsb2cgfSBmcm9tICcuL2FwcHMvcm9sbC1kaWFsb2cuanMnXG5pbXBvcnQgeyBjaGF0SGVscGVyIH0gZnJvbSAnLi9jaGF0L2hlbHBlci5qcydcblxuZXhwb3J0IGNsYXNzIENvQzdVdGlsaXRpZXMge1xuICAvLyBzdGF0aWMgdGVzdChldmVudCl7XG4gIC8vICAgaWYoIGV2ZW50LnNoaWZ0S2V5KSB1aS5ub3RpZmljYXRpb25zLmluZm8oJ0hlbGxvIGZyb20gU0hJRlQgdXRpbGl0aWVzJyk7XG4gIC8vICAgZWxzZSB1aS5ub3RpZmljYXRpb25zLmluZm8oJ0hlbGxvIGZyb20gdXRpbGl0aWVzJyk7XG4gIC8vICAgY29uc3Qgc3BlYWtlciA9IENoYXRNZXNzYWdlLmdldFNwZWFrZXIoKTtcbiAgLy8gICBsZXQgYWN0b3I7XG4gIC8vICAgaWYgKHNwZWFrZXIudG9rZW4pIGFjdG9yID0gZ2FtZS5hY3RvcnMudG9rZW5zW3NwZWFrZXIudG9rZW5dO1xuICAvLyAgIGlmICghYWN0b3IpIGFjdG9yID0gZ2FtZS5hY3RvcnMuZ2V0KHNwZWFrZXIuYWN0b3IpO1xuXG4gIC8vICBhY3Rvci5zZXRDb25kaXRpb24oQ09DNy5zdGF0dXMuY3JpdGljYWxXb3VuZHMpO1xuICAvLyB9XG5cbiAgc3RhdGljIGlzRm9ybXVsYSAoeCkge1xuICAgIGlmICh0eXBlb2YgeCAhPT0gJ3N0cmluZycpIHJldHVybiBmYWxzZVxuICAgIGlmICghaXNOYU4oTnVtYmVyKHgpKSkgcmV0dXJuIGZhbHNlXG4gICAgcmV0dXJuIFJvbGwudmFsaWRhdGUoeClcbiAgfVxuXG4gIHN0YXRpYyBQYXJzZUNoYXRFbnRyeSAoaHRtbCwgY29udGVudCkge1xuICAgIGNvbnN0IHJlZ1ggPSAvKFxcUyspL2dcbiAgICBjb25zdCB0ZXJtcyA9IGNvbnRlbnQubWF0Y2gocmVnWClcbiAgICBpZiAoXG4gICAgICB0ZXJtc1swXT8udG9Mb3dlckNhc2UoKS5tYXRjaCgvXlxcL3Iob2xsKT8kLykgJiZcbiAgICAgIHRlcm1zWzFdPy50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoJzFkJScpXG4gICAgKSB7XG4gICAgICAvLyBEZWxheSBjYWxsaW5nIGZ1bmN0aW9uIHRvIHByZXZlbnQgY2hhdG1lc3NhZ2Uga2V5IGRvd24gdHJpZ2dlcmluZyBkZWZhdWx0XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgQ29DN1V0aWxpdGllcy5fRXhlY0NvbW1hbmQoY29udGVudClcbiAgICAgIH0sIDIwMClcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBfRXhlY0NvbW1hbmQgKGNvbnRlbnQpIHtcbiAgICBjb25zdCBvcHRpb25zID0gY29udGVudFxuICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgIC5zcGxpdCgnICcpXG4gICAgICA/LmpvaW4oJycpXG4gICAgICA/LnJlcGxhY2UoL1xcL3Iob2xsKT8xZCUvLCAnJylcbiAgICBjb25zdCBjaGVjayA9IG5ldyBDb0M3Q2hlY2soKVxuICAgIGlmIChvcHRpb25zLmxlbmd0aCkge1xuICAgICAgbGV0IGVzY2FwZWQgPSBvcHRpb25zXG4gICAgICBsZXQgdGhyZXNob2xkXG4gICAgICBsZXQgZGlmZmljdWx0eSA9IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhclxuICAgICAgbGV0IGRpY2VNb2RpZmllciA9IDBcbiAgICAgIGxldCBhc2sgPSBmYWxzZVxuICAgICAgbGV0IGZsYXREaWNlTW9kaWZpZXJcbiAgICAgIGxldCBmbGF0VGhyZXNob2xkTW9kaWZpZXJcbiAgICAgIGNvbnN0IHRocmVzaG9sZFN0ciA9IGVzY2FwZWQubWF0Y2goL1teKF0rKD89XFwpKS8pXG4gICAgICBpZiAodGhyZXNob2xkU3RyICYmIHRocmVzaG9sZFN0ci5sZW5ndGgpIHtcbiAgICAgICAgdGhyZXNob2xkID0gTnVtYmVyKHRocmVzaG9sZFN0clswXSlcbiAgICAgICAgZm9yIChjb25zdCBtYXRjaCBvZiB0aHJlc2hvbGRTdHIpIHtcbiAgICAgICAgICBlc2NhcGVkID0gZXNjYXBlZC5yZXBsYWNlKGAoJHttYXRjaH0pYCwgJycpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IGRpZmZpY3VsdHlTdHIgPSBlc2NhcGVkLm1hdGNoKC9bXltdKyg/PVxcXSkvKVxuICAgICAgaWYgKGRpZmZpY3VsdHlTdHIgJiYgZGlmZmljdWx0eVN0ci5sZW5ndGgpIHtcbiAgICAgICAgZGlmZmljdWx0eSA9IENvQzdVdGlsaXRpZXMuY29udmVydERpZmZpY3VsdHkoZGlmZmljdWx0eVN0clswXSlcbiAgICAgICAgZm9yIChjb25zdCBtYXRjaCBvZiBkaWZmaWN1bHR5U3RyKSB7XG4gICAgICAgICAgZXNjYXBlZCA9IGVzY2FwZWQucmVwbGFjZShgWyR7bWF0Y2h9XWAsICcnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZXNjYXBlZC5pbmNsdWRlcygnPycpKSB7XG4gICAgICAgIGFzayA9IHRydWVcbiAgICAgICAgZXNjYXBlZCA9IGVzY2FwZWQucmVwbGFjZSgnPycsICcnKVxuICAgICAgfVxuICAgICAgaWYgKCFpc05hTihOdW1iZXIoZXNjYXBlZCkpKSBkaWNlTW9kaWZpZXIgPSBOdW1iZXIoZXNjYXBlZClcblxuICAgICAgaWYgKGFzaykge1xuICAgICAgICBjb25zdCBkaWFsb2dPcHRpb25zID0ge1xuICAgICAgICAgIHRocmVzaG9sZCxcbiAgICAgICAgICBtb2RpZmllcjogZGljZU1vZGlmaWVyLFxuICAgICAgICAgIGRpZmZpY3VsdHksXG4gICAgICAgICAgYXNrVmFsdWU6IHRydWVcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1c2FnZSA9IGF3YWl0IFJvbGxEaWFsb2cuY3JlYXRlKGRpYWxvZ09wdGlvbnMpXG4gICAgICAgIGlmICh1c2FnZSkge1xuICAgICAgICAgIGRpY2VNb2RpZmllciA9IE51bWJlcih1c2FnZS5nZXQoJ2JvbnVzRGljZScpKVxuICAgICAgICAgIGRpZmZpY3VsdHkgPSBOdW1iZXIodXNhZ2UuZ2V0KCdkaWZmaWN1bHR5JykpXG4gICAgICAgICAgdGhyZXNob2xkID0gTnVtYmVyKHVzYWdlLmdldCgndGhyZXNob2xkJykpIHx8IHRocmVzaG9sZFxuICAgICAgICAgIGZsYXREaWNlTW9kaWZpZXIgPSBOdW1iZXIodXNhZ2UuZ2V0KCdmbGF0RGljZU1vZGlmaWVyJykpXG4gICAgICAgICAgZmxhdFRocmVzaG9sZE1vZGlmaWVyID0gTnVtYmVyKHVzYWdlLmdldCgnZmxhdFRocmVzaG9sZE1vZGlmaWVyJykpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2hlY2suZGljZU1vZGlmaWVyID0gZGljZU1vZGlmaWVyIHx8IDBcbiAgICAgIGNoZWNrLmRpZmZpY3VsdHkgPSBkaWZmaWN1bHR5IHx8IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhclxuICAgICAgY2hlY2sucmF3VmFsdWUgPSB0aHJlc2hvbGRcbiAgICAgIGNoZWNrLmZsYXREaWNlTW9kaWZpZXIgPSBmbGF0RGljZU1vZGlmaWVyXG4gICAgICBjaGVjay5mbGF0VGhyZXNob2xkTW9kaWZpZXIgPSBmbGF0VGhyZXNob2xkTW9kaWZpZXJcbiAgICAgIGlmICh0aHJlc2hvbGQpIGNoZWNrLnJhd1ZhbHVlID0gIWlzTmFOKHRocmVzaG9sZCkgPyB0aHJlc2hvbGQgOiB1bmRlZmluZWRcbiAgICB9XG4gICAgY29uc3Qgc3BlYWtlciA9IENoYXRNZXNzYWdlLmdldFNwZWFrZXIoKVxuICAgIGlmIChzcGVha2VyLnRva2VuICYmIHNwZWFrZXIuc2NlbmUpIHtcbiAgICAgIGNvbnN0IGFjdG9yID0gY2hhdEhlbHBlci5nZXRBY3RvckZyb21LZXkoXG4gICAgICAgIGAke3NwZWFrZXIuc2NlbmV9LiR7c3BlYWtlci50b2tlbn1gXG4gICAgICApIC8vIFJFRkFDVE9SSU5HICgyKSArKysgd2h5IHNwZWFrZXIuc2NlbmUuXG4gICAgICBpZiAoYWN0b3IpIGNoZWNrLmFjdG9yID0gYWN0b3JcbiAgICB9IGVsc2UgaWYgKHNwZWFrZXIuYWN0b3IpIHtcbiAgICAgIGNvbnN0IGFjdG9yID0gZ2FtZS5hY3RvcnMuZ2V0KHNwZWFrZXIuYWN0b3IpXG4gICAgICBpZiAoYWN0b3IpIGNoZWNrLmFjdG9yID0gYWN0b3JcbiAgICB9XG4gICAgYXdhaXQgY2hlY2sucm9sbCgpXG4gICAgY2hlY2sudG9NZXNzYWdlKClcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyB0ZXN0ICgpIHtcbiAgICB1aS5ub3RpZmljYXRpb25zLmluZm9zKCdEbyBzb21lIHN0dWZmJylcbiAgfVxuXG4gIHN0YXRpYyBnZXRBY3RvckZyb21TdHJpbmcgKGFjdG9yU3RyaW5nKSB7XG4gICAgbGV0IGFjdG9yXG5cbiAgICAvLyBUb2tlbiBpcyBiZXR0ZXIgdGhhbiBhY3Rvci5cbiAgICAvLyBDYXNlIDEgOiB0cnlpbmcgd2l0aCBJRC5cbiAgICAvLyBDYXNlIDEuMSA6IHRva2VuIGZvdW5kLlxuICAgIGlmIChnYW1lLmFjdG9ycy50b2tlbnNbYWN0b3JTdHJpbmddKSByZXR1cm4gZ2FtZS5hY3RvcnMudG9rZW5zW2FjdG9yU3RyaW5nXVxuICAgIC8vIENhc2UgMS4yIDogYWN0b3IgZm91bmQuXG4gICAgYWN0b3IgPSBnYW1lLmFjdG9ycy5nZXQoYWN0b3JTdHJpbmcpXG4gICAgaWYgKGFjdG9yKSByZXR1cm4gYWN0b3JcblxuICAgIC8vIENhc2UgMiA6IHRyeWluZyB3aXRoIG5hbWVcbiAgICAvLyBDYXNlIDIuMSA6IHRva2VuIGZvdW5kLlxuICAgIGFjdG9yID0gT2JqZWN0LnZhbHVlcyhnYW1lLmFjdG9ycy50b2tlbnMpLmZpbmQodCA9PiB7XG4gICAgICBpZiAodC5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IGFjdG9yU3RyaW5nLnRvTG93ZXJDYXNlKCkpIHJldHVybiB0cnVlXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9KVxuICAgIGlmICghYWN0b3IpIHtcbiAgICAgIC8vIENhc2UgMi4yIDogYWN0b3IgZm91bmQuXG4gICAgICBhY3RvciA9IGdhbWUuYWN0b3JzLmZpbmQoYSA9PiB7XG4gICAgICAgIGlmIChhLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gYWN0b3JTdHJpbmcudG9Mb3dlckNhc2UoKSkgcmV0dXJuIHRydWVcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9KVxuICAgIH1cbiAgICBpZiAoYWN0b3IpIHJldHVybiBhY3RvclxuXG4gICAgLy8gLy8gQ2FzZSAzIHN0cmluZyBtYXliZSBhbiBhY3RvcktleVxuICAgIC8vIGlmIChjcmVhdHVyZS5pbmNsdWRlcygnLicpKSB7XG4gICAgLy8gICBjb25zdCBbLCBhY3RvcklkXSA9IGtleS5zcGxpdCgnLicpXG4gICAgLy8gICByZXR1cm4gQ29DN1V0aWxpdGllcy5nZXRBY3RvckZyb21TdHJpbmcoYWN0b3JJZClcbiAgICAvLyB9XG5cbiAgICAvLyBObyBqb3lcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgc3RhdGljIGdldENoYXJhY3RlcmlzdGljTmFtZXMgKGNoYXIpIHtcbiAgICBjb25zdCBjaGFyS2V5ID0gY2hhci50b0xvd2VyQ2FzZSgpXG5cbiAgICBzd2l0Y2ggKGNoYXJLZXkpIHtcbiAgICAgIGNhc2UgJ3N0cic6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2hvcnQ6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ0hBUkFDLlNUUicpLFxuICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NIQVJBQy5TdHJlbmd0aCcpXG4gICAgICAgIH1cbiAgICAgIGNhc2UgJ2Nvbic6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2hvcnQ6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ0hBUkFDLkNPTicpLFxuICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NIQVJBQy5Db25zdGl0dXRpb24nKVxuICAgICAgICB9XG4gICAgICBjYXNlICdzaXonOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNob3J0OiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NIQVJBQy5TSVonKSxcbiAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDSEFSQUMuU2l6ZScpXG4gICAgICAgIH1cbiAgICAgIGNhc2UgJ2RleCc6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2hvcnQ6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ0hBUkFDLkRFWCcpLFxuICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NIQVJBQy5EZXh0ZXJpdHknKVxuICAgICAgICB9XG4gICAgICBjYXNlICdhcHAnOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNob3J0OiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NIQVJBQy5BUFAnKSxcbiAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDSEFSQUMuQXBwZWFyYW5jZScpXG4gICAgICAgIH1cbiAgICAgIGNhc2UgJ2ludCc6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2hvcnQ6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ0hBUkFDLklOVCcpLFxuICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NIQVJBQy5JbnRlbGxpZ2VuY2UnKVxuICAgICAgICB9XG4gICAgICBjYXNlICdwb3cnOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNob3J0OiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NIQVJBQy5QT1cnKSxcbiAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDSEFSQUMuUG93ZXInKVxuICAgICAgICB9XG4gICAgICBjYXNlICdlZHUnOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNob3J0OiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NIQVJBQy5FRFUnKSxcbiAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDSEFSQUMuRWR1Y2F0aW9uJylcbiAgICAgICAgfVxuICAgICAgY2FzZSAnbHVjayc6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2hvcnQ6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5MdWNrJyksXG4gICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5MdWNrJylcbiAgICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBjb25zdCBjaGFyYWN0ZXJpc3RpY0xpc3QgPSAoIWZvdW5kcnkudXRpbHMuaXNOZXdlclZlcnNpb24oZ2FtZS52ZXJzaW9uLCAnMTInKSA/IGdhbWUuc3lzdGVtLnRlbXBsYXRlLkFjdG9yLnRlbXBsYXRlcy5jaGFyYWN0ZXJpc3RpY3MuY2hhcmFjdGVyaXN0aWNzIDogZ2FtZS5zeXN0ZW0udGVtcGxhdGUuQWN0b3IuY2hhcmFjdGVyLmNoYXJhY3RlcmlzdGljcylcbiAgICAgICAgZm9yIChjb25zdCBbLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoY2hhcmFjdGVyaXN0aWNMaXN0KSkge1xuICAgICAgICAgIGlmIChjaGFyS2V5ID09PSBnYW1lLmkxOG4ubG9jYWxpemUodmFsdWUuc2hvcnQpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHNob3J0OiBnYW1lLmkxOG4ubG9jYWxpemUodmFsdWUuc2hvcnQpLFxuICAgICAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKHZhbHVlLmxhYmVsKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBjb252ZXJ0RGlmZmljdWx0eSAoZGlmZmljdWx0eSkge1xuICAgIGlmIChTdHJpbmcoZGlmZmljdWx0eSkgPT09ICcwJykgcmV0dXJuIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhclxuICAgIGlmICh0eXBlb2YgZGlmZmljdWx0eSAhPT0gJ3N0cmluZycpIHJldHVybiBkaWZmaWN1bHR5XG4gICAgaWYgKCFpc05hTihOdW1iZXIoZGlmZmljdWx0eSkpKSByZXR1cm4gTnVtYmVyKGRpZmZpY3VsdHkpXG5cbiAgICBzd2l0Y2ggKGRpZmZpY3VsdHkpIHtcbiAgICAgIGNhc2UgJz8nOlxuICAgICAgICByZXR1cm4gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC51bmtub3duXG4gICAgICBjYXNlICcrJzpcbiAgICAgICAgcmV0dXJuIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuaGFyZFxuICAgICAgY2FzZSAnKysnOlxuICAgICAgICByZXR1cm4gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5leHRyZW1lXG4gICAgICBjYXNlICcrKysnOlxuICAgICAgICByZXR1cm4gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5jcml0aWNhbFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhclxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBza2lsbENoZWNrTWFjcm8gKHNraWxsLCBldmVudCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IHNwZWFrZXIgPSBDaGF0TWVzc2FnZS5nZXRTcGVha2VyKClcbiAgICBsZXQgYWN0b3JcbiAgICBpZiAoc3BlYWtlci50b2tlbikgYWN0b3IgPSBnYW1lLmFjdG9ycy50b2tlbnNbc3BlYWtlci50b2tlbl1cbiAgICBpZiAoIWFjdG9yKSBhY3RvciA9IGdhbWUuYWN0b3JzLmdldChzcGVha2VyLmFjdG9yKSAvLyBObyBuZWVkIHRvIGZpbGwgYWN0b3IgdG9rZW5cblxuICAgIGlmICghYWN0b3IpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuV2Fybk5vQWN0b3JBdmFpbGFibGUnKSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGFjdG9yLnNraWxsQ2hlY2soc2tpbGwsIGV2ZW50LnNoaWZ0S2V5LCBvcHRpb25zKVxuICB9XG5cbiAgc3RhdGljIHdlYXBvbkNoZWNrTWFjcm8gKHdlYXBvbiwgZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3Qgc3BlYWtlciA9IENoYXRNZXNzYWdlLmdldFNwZWFrZXIoKVxuICAgIGxldCBhY3RvclxuICAgIGlmIChzcGVha2VyLnRva2VuKSBhY3RvciA9IGdhbWUuYWN0b3JzLnRva2Vuc1tzcGVha2VyLnRva2VuXVxuICAgIGlmICghYWN0b3IpIHtcbiAgICAgIGlmIChzcGVha2VyLnNjZW5lICYmIHNwZWFrZXIudG9rZW4pIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgc3ludGhldGljIGFjdG9yIGxpbmtlZCB3aXRoIHRoZSBhY3RpdmUgdG9rZW4uXG4gICAgICAgIGNvbnN0IGJhc2VBY3RvciA9IGdhbWUuYWN0b3JzLmdldChzcGVha2VyLmFjdG9yKVxuICAgICAgICBjb25zdCBzY2VuZSA9IGdhbWUuc2NlbmVzLmdldChzcGVha2VyLnNjZW5lKVxuICAgICAgICBjb25zdCB0b2tlbiA9IHNjZW5lLnRva2Vucy5nZXQoc3BlYWtlci50b2tlbilcblxuICAgICAgICBjb25zdCBBY3RvckNsYXNzID0gZ2V0RG9jdW1lbnRDbGFzcygnQWN0b3InKVxuICAgICAgICBjb25zdCB0b2tlbkFjdG9yID0gbmV3IEFjdG9yQ2xhc3MoYmFzZUFjdG9yLnRvSlNPTigpLCB7XG4gICAgICAgICAgcGFyZW50OiB0b2tlblxuICAgICAgICB9KVxuICAgICAgICBhY3RvciA9IHRva2VuQWN0b3JcbiAgICAgIH0gZWxzZSBhY3RvciA9IGdhbWUuYWN0b3JzLmdldChzcGVha2VyLmFjdG9yKVxuICAgIH1cblxuICAgIGlmICghYWN0b3IpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuV2Fybk5vQWN0b3JBdmFpbGFibGUnKSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGFjdG9yLndlYXBvbkNoZWNrKHdlYXBvbiwgZXZlbnQuc2hpZnRLZXkpXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY2hlY2tNYWNybyAodGhyZXNob2xkID0gdW5kZWZpbmVkLCBldmVudCA9IG51bGwpIHtcbiAgICBhd2FpdCBDb0M3VXRpbGl0aWVzLnJvbGxEaWNlKGV2ZW50LCB7IHRocmVzaG9sZCB9KVxuICB9XG5cbiAgc3RhdGljIGNyZWF0ZU1hY3JvIChiYXIsIGRhdGEsIHNsb3QpIHtcbiAgICBpZiAoZGF0YS50eXBlICE9PSAnSXRlbScpIHJldHVyblxuXG4gICAgY29uc3QgaXRlbSA9IGZyb21VdWlkU3luYyhkYXRhLnV1aWQsIGJhcilcblxuICAgIGlmICghaXRlbSkge1xuICAgICAgcmV0dXJuIHVpLm5vdGlmaWNhdGlvbnMud2FybihcbiAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lldhcm5NYWNyb05vSXRlbUZvdW5kJylcbiAgICAgIClcbiAgICB9XG4gICAgaWYgKCEoaXRlbS50eXBlID09PSAnd2VhcG9uJykgJiYgIShpdGVtLnR5cGUgPT09ICdza2lsbCcpKSB7XG4gICAgICByZXR1cm4gdWkubm90aWZpY2F0aW9ucy53YXJuKFxuICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuV2Fybk1hY3JvSW5jb3JyZWN0VHlwZScpXG4gICAgICApXG4gICAgfVxuXG4gICAgbGV0IGNvbW1hbmQgPSAnJ1xuXG4gICAgaWYgKGl0ZW0udHlwZSA9PT0gJ3dlYXBvbicpIHtcbiAgICAgIGNvbW1hbmQgPSBgZ2FtZS5Db0M3Lm1hY3Jvcy53ZWFwb25DaGVjayh7bmFtZTonJHtpdGVtLm5hbWV9JywgdXVpZDonJHtkYXRhLnV1aWR9J30sIGV2ZW50KTtgXG4gICAgfVxuXG4gICAgaWYgKGl0ZW0udHlwZSA9PT0gJ3NraWxsJykge1xuICAgICAgaWYgKENvQzdJdGVtLmlzQW55U3BlYyhpdGVtKSkge1xuICAgICAgICByZXR1cm4gdWkubm90aWZpY2F0aW9ucy53YXJuKFxuICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5XYXJuTm9HbG9iYWxTcGVjJylcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgY29tbWFuZCA9IGBnYW1lLkNvQzcubWFjcm9zLnNraWxsQ2hlY2soe25hbWU6JyR7aXRlbS5uYW1lfScsIHV1aWQ6JyR7ZGF0YS51dWlkfSd9LCBldmVudCk7YFxuICAgIH1cblxuICAgIGlmIChjb21tYW5kICE9PSAnJykge1xuICAgICAgLy8gQ3JlYXRlIHRoZSBtYWNybyBjb21tYW5kXG4gICAgICBjb25zdCBtYWNybyA9IGdhbWUubWFjcm9zLmNvbnRlbnRzLmZpbmQoXG4gICAgICAgIG0gPT4gbS5uYW1lID09PSBpdGVtLm5hbWUgJiYgbS5jb21tYW5kID09PSBjb21tYW5kXG4gICAgICApXG4gICAgICBpZiAoIW1hY3JvKSB7XG4gICAgICAgIE1hY3JvLmNyZWF0ZShmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh7XG4gICAgICAgICAgbmFtZTogaXRlbS5uYW1lLFxuICAgICAgICAgIHR5cGU6ICdzY3JpcHQnLFxuICAgICAgICAgIGltZzogaXRlbS5pbWcsXG4gICAgICAgICAgY29tbWFuZFxuICAgICAgICB9KSkudGhlbihtYWNybyA9PiB7XG4gICAgICAgICAgZ2FtZS51c2VyLmFzc2lnbkhvdGJhck1hY3JvKG1hY3JvLCBzbG90KVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGdhbWUudXNlci5hc3NpZ25Ib3RiYXJNYWNybyhtYWNybywgc2xvdClcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIHRvZ2dsZURldlBoYXNlICh0b2dnbGUpIHtcbiAgICBhd2FpdCBnYW1lLnNldHRpbmdzLnNldCgnQ29DNycsICdkZXZlbG9wbWVudEVuYWJsZWQnLCB0b2dnbGUpXG4gICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKFxuICAgICAgdG9nZ2xlXG4gICAgICAgID8gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkRldlBoYXNlRW5hYmxlZCcpXG4gICAgICAgIDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkRldlBoYXNlRGlzYWJsZWQnKVxuICAgIClcbiAgICBnYW1lLnNvY2tldC5lbWl0KCdzeXN0ZW0uQ29DNycsIHtcbiAgICAgIHR5cGU6ICd1cGRhdGVDaGFyJ1xuICAgIH0pXG4gICAgQ29DN1V0aWxpdGllcy51cGRhdGVDaGFyU2hlZXRzKClcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyB0b2dnbGVDaGFyQ3JlYXRpb24gKHRvZ2dsZSkge1xuICAgIGF3YWl0IGdhbWUuc2V0dGluZ3Muc2V0KCdDb0M3JywgJ2NoYXJDcmVhdGlvbkVuYWJsZWQnLCB0b2dnbGUpXG4gICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKFxuICAgICAgdG9nZ2xlXG4gICAgICAgID8gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNoYXJDcmVhdGlvbkVuYWJsZWQnKVxuICAgICAgICA6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5DaGFyQ3JlYXRpb25EaXNhYmxlZCcpXG4gICAgKVxuICAgIGdhbWUuc29ja2V0LmVtaXQoJ3N5c3RlbS5Db0M3Jywge1xuICAgICAgdHlwZTogJ3VwZGF0ZUNoYXInXG4gICAgfSlcbiAgICBDb0M3VXRpbGl0aWVzLnVwZGF0ZUNoYXJTaGVldHMoKVxuICAgIEhvb2tzLmNhbGwoJ3RvZ2dsZUNoYXJDcmVhdGlvbicsIHRvZ2dsZSlcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBnZXRUYXJnZXQgKCkge1xuICAgIGNvbnN0IHVzZXJzID0gZ2FtZS51c2Vycy5maWx0ZXIodXNlciA9PiB1c2VyLmFjdGl2ZSlcbiAgICBjb25zdCBhY3RvcnMgPSBnYW1lLmFjdG9yc1xuICAgIGxldCBjaGVja09wdGlvbnMgPSBgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJDT0NDaGVja0FsbFBDXCIgaWQ9XCJDT0NDaGVja0FsbFBDXCI+XFxuXG4gICAgPGxhYmVsIGZvcj1cIkNPQ0NoZWNrQWxsUENcIj4ke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5hbGxBY3RvcnMnKX08L2xhYmVsPmBcbiAgICBjb25zdCBwbGF5ZXJUb2tlbklkcyA9IHVzZXJzXG4gICAgICAubWFwKHUgPT4gdS5jaGFyYWN0ZXI/LmlkKVxuICAgICAgLmZpbHRlcihpZCA9PiBpZCAhPT0gdW5kZWZpbmVkKVxuICAgIGNvbnN0IHNlbGVjdGVkUGxheWVySWRzID0gY2FudmFzLnRva2Vucy5jb250cm9sbGVkLm1hcCh0b2tlbiA9PiB7XG4gICAgICByZXR1cm4gdG9rZW4uYWN0b3IuaWRcbiAgICB9KVxuXG4gICAgLy8gQnVpbGQgY2hlY2tib3ggbGlzdCBmb3IgYWxsIGFjdGl2ZSBwbGF5ZXJzXG4gICAgYWN0b3JzLmZvckVhY2goYWN0b3IgPT4ge1xuICAgICAgY29uc3QgY2hlY2tlZCA9XG4gICAgICAgIChzZWxlY3RlZFBsYXllcklkcy5pbmNsdWRlcyhhY3Rvci5pZCkgfHxcbiAgICAgICAgICBwbGF5ZXJUb2tlbklkcy5pbmNsdWRlcyhhY3Rvci5pZCkpICYmXG4gICAgICAgICdjaGVja2VkJ1xuICAgICAgY2hlY2tPcHRpb25zICs9IGBcbiAgICAgPGJyPlxuICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cIiR7YWN0b3IuaWR9XCIgaWQ9XCIke2FjdG9yLmlkfVwiIHZhbHVlPVwiJHthY3Rvci5uYW1lfVwiICR7Y2hlY2tlZH0+XFxuXG4gICAgIDxsYWJlbCBmb3I9XCIke2FjdG9yLmlkfVwiPiR7YWN0b3IubmFtZX08L2xhYmVsPlxuICAgICAgIGBcbiAgICB9KVxuXG4gICAgbmV3IERpYWxvZyh7XG4gICAgICB0aXRsZTogYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LmRyZWFtaW5nJyl9YCxcbiAgICAgIGNvbnRlbnQ6IGAke2dhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgICAgJ0NvQzcucmVzdFRhcmdldHMnXG4gICAgICApfTogJHtjaGVja09wdGlvbnN9IDxicj5gLFxuICAgICAgYnV0dG9uczoge1xuICAgICAgICB3aGlzcGVyOiB7XG4gICAgICAgICAgbGFiZWw6IGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5zdGFydFJlc3QnKX1gLFxuICAgICAgICAgIGNhbGxiYWNrOiBhc3luYyBodG1sID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldHMgPSBbXVxuICAgICAgICAgICAgbGV0IGFsbCA9IGZhbHNlXG4gICAgICAgICAgICBjb25zdCB1c2VycyA9IGh0bWwuZmluZCgnW3R5cGU9XCJjaGVja2JveFwiXScpXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHVzZXIgb2YgdXNlcnMpIHtcbiAgICAgICAgICAgICAgaWYgKHVzZXIubmFtZSA9PT0gJ0NPQ0NoZWNrQWxsUEMnICYmIHVzZXIuY2hlY2tlZCkgYWxsID0gdHJ1ZVxuICAgICAgICAgICAgICBpZiAodXNlci5jaGVja2VkIHx8IGFsbCkgdGFyZ2V0cy5wdXNoKHVzZXIuaWQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCBDb0M3VXRpbGl0aWVzLnN0YXJ0UmVzdCh0YXJnZXRzKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pLnJlbmRlcih0cnVlKVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIHN0YXJ0UmVzdCAodGFyZ2V0cykge1xuICAgIGlmICghdGFyZ2V0cy5sZW5ndGgpIHJldHVyblxuICAgIGNvbnN0IGFjdG9ycyA9IGdhbWUuYWN0b3JzLmZpbHRlcihhY3RvciA9PiB0YXJnZXRzLmluY2x1ZGVzKGFjdG9yLmlkKSlcbiAgICBsZXQgY2hhdENvbnRlbnQgPSBgPGk+JHtnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuZHJlYW1pbmcnKX0uLi48L2k+PGJyPmBcbiAgICBmb3IgKGNvbnN0IGFjdG9yIG9mIGFjdG9ycykge1xuICAgICAgaWYgKFsnY2hhcmFjdGVyJywgJ25wYycsICdjcmVhdHVyZSddLmluY2x1ZGVzKGFjdG9yLnR5cGUpKSB7XG4gICAgICAgIGxldCBxdWlja0hlYWxlciA9IGZhbHNlXG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBhY3Rvci5pdGVtcykge1xuICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICd0YWxlbnQnKSB7XG4gICAgICAgICAgICBpZiAoaXRlbS5uYW1lID09PSBgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcucXVpY2tIZWFsZXInKX1gKSB7XG4gICAgICAgICAgICAgIHF1aWNrSGVhbGVyID0gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc0NyaXRpY2FsV291bmRzID1cbiAgICAgICAgICAhZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAncHVscFJ1bGVJZ25vcmVNYWpvcldvdW5kcycpICYmXG4gICAgICAgICAgYWN0b3IuaGFzQ29uZGl0aW9uU3RhdHVzKENPQzcuc3RhdHVzLmNyaXRpY2FsV291bmRzKVxuICAgICAgICBjb25zdCBkYWlseVNhbml0eUxvc3MgPSBhY3Rvci5zeXN0ZW0uYXR0cmlicy5zYW4uZGFpbHlMb3NzXG4gICAgICAgIGNvbnN0IGhwVmFsdWUgPSBhY3Rvci5zeXN0ZW0uYXR0cmlicy5ocC52YWx1ZVxuICAgICAgICBjb25zdCBocE1heCA9IGFjdG9yLnN5c3RlbS5hdHRyaWJzLmhwLm1heFxuICAgICAgICBjb25zdCBtcFZhbHVlID0gYWN0b3Iuc3lzdGVtLmF0dHJpYnMubXAudmFsdWVcbiAgICAgICAgY29uc3QgbXBNYXggPSBhY3Rvci5zeXN0ZW0uYXR0cmlicy5tcC5tYXhcbiAgICAgICAgY29uc3QgcG93ID0gYWN0b3Iuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5wb3cudmFsdWVcbiAgICAgICAgY2hhdENvbnRlbnQgPSBjaGF0Q29udGVudCArIGA8YnI+PGI+JHthY3Rvci5uYW1lfS4gPC9iPmBcbiAgICAgICAgaWYgKGhwVmFsdWUgPCBocE1heCkge1xuICAgICAgICAgIGlmIChpc0NyaXRpY2FsV291bmRzID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjaGF0Q29udGVudCA9XG4gICAgICAgICAgICAgIGNoYXRDb250ZW50ICtcbiAgICAgICAgICAgICAgYDxiIHN0eWxlPVwiY29sb3I6ZGFya3JlZFwiPiR7Z2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgICAgICAgICdDb0M3Lmhhc0NyaXRpY2FsV291bmRzJ1xuICAgICAgICAgICAgICApfS4gPC9iPmBcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGhlYWxBbW91bnQgPSAxXG4gICAgICAgICAgICBpZiAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAncHVscFJ1bGVGYXN0ZXJSZWNvdmVyeScpKSB7XG4gICAgICAgICAgICAgIGhlYWxBbW91bnQgPSAyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocXVpY2tIZWFsZXIgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgaGVhbEFtb3VudCsrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoZWFsQW1vdW50ID0gTWF0aC5taW4oaGVhbEFtb3VudCwgaHBNYXggLSBocFZhbHVlKVxuICAgICAgICAgICAgaWYgKGhlYWxBbW91bnQgPT09IDEpIHtcbiAgICAgICAgICAgICAgY2hhdENvbnRlbnQgPVxuICAgICAgICAgICAgICAgIGNoYXRDb250ZW50ICtcbiAgICAgICAgICAgICAgICBgPGIgc3R5bGU9XCJjb2xvcjpkYXJrb2xpdmVncmVlblwiPiR7Z2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgICAgICAgICAgJ0NvQzcuaGVhbHRoUmVjb3ZlcmVkJ1xuICAgICAgICAgICAgICAgICl9LiA8L2I+YFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2hhdENvbnRlbnQgPVxuICAgICAgICAgICAgICAgIGNoYXRDb250ZW50ICtcbiAgICAgICAgICAgICAgICBgPGIgc3R5bGU9XCJjb2xvcjpkYXJrb2xpdmVncmVlblwiPiR7Z2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICAgICAgICAgICdDb0M3LnB1bHBIZWFsdGhSZWNvdmVyZWQnLFxuICAgICAgICAgICAgICAgICAgeyBudW1iZXI6IGhlYWxBbW91bnQgfVxuICAgICAgICAgICAgICAgICl9LiA8L2I+YFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWN0b3IudXBkYXRlKHtcbiAgICAgICAgICAgICAgJ3N5c3RlbS5hdHRyaWJzLmhwLnZhbHVlJzpcbiAgICAgICAgICAgICAgICBhY3Rvci5zeXN0ZW0uYXR0cmlicy5ocC52YWx1ZSArIGhlYWxBbW91bnRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkYWlseVNhbml0eUxvc3MgPiAwKSB7XG4gICAgICAgICAgY2hhdENvbnRlbnQgPVxuICAgICAgICAgICAgY2hhdENvbnRlbnQgK1xuICAgICAgICAgICAgYDxiIHN0eWxlPVwiY29sb3I6ZGFya29saXZlZ3JlZW5cIj4ke2dhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgICAgICAgICAgJ0NvQzcuZGFpbHlTYW5Mb3NzUmVzdGFydGVkJ1xuICAgICAgICAgICAgKX0uPC9iPmBcbiAgICAgICAgICBhY3Rvci51cGRhdGUoe1xuICAgICAgICAgICAgJ3N5c3RlbS5hdHRyaWJzLnNhbi5kYWlseUxvc3MnOiAwLFxuICAgICAgICAgICAgJ3N5c3RlbS5hdHRyaWJzLnNhbi5kYWlseUxpbWl0JzogTWF0aC5mbG9vcihhY3Rvci5zeXN0ZW0uYXR0cmlicy5zYW4udmFsdWUgLyA1KVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaG91cnMgPSA3XG4gICAgICAgIGlmIChob3VycyA+IDAgJiYgbXBWYWx1ZSA8IG1wTWF4KSB7XG4gICAgICAgICAgbGV0IG1hZ2ljQW1vdW50ID0gaG91cnMgKiBNYXRoLmNlaWwocG93IC8gMTAwKVxuICAgICAgICAgIG1hZ2ljQW1vdW50ID0gTWF0aC5taW4obWFnaWNBbW91bnQsIG1wTWF4IC0gbXBWYWx1ZSlcbiAgICAgICAgICBjaGF0Q29udGVudCA9XG4gICAgICAgICAgICBjaGF0Q29udGVudCArXG4gICAgICAgICAgICBgPGIgc3R5bGU9XCJjb2xvcjpkYXJrb2xpdmVncmVlblwiPiR7Z2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICAgICAgJ0NvQzcubWFnaWNQb2ludHNSZWNvdmVyZWQnXG4gICAgICAgICAgICApfTogJHttYWdpY0Ftb3VudH0uPC9iPmBcbiAgICAgICAgICBhY3Rvci51cGRhdGUoe1xuICAgICAgICAgICAgJ3N5c3RlbS5hdHRyaWJzLm1wLnZhbHVlJzpcbiAgICAgICAgICAgICAgYWN0b3Iuc3lzdGVtLmF0dHJpYnMubXAudmFsdWUgKyBtYWdpY0Ftb3VudFxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgY2hhdERhdGEgPSB7XG4gICAgICB1c2VyOiBnYW1lLnVzZXIuaWQsXG4gICAgICBzcGVha2VyOiBDaGF0TWVzc2FnZS5nZXRTcGVha2VyKCksXG4gICAgICBjb250ZW50OiBjaGF0Q29udGVudCxcbiAgICAgIHR5cGU6IENPTlNULkNIQVRfTUVTU0FHRV9UWVBFUy5PVEhFUlxuICAgIH1cbiAgICBDaGF0TWVzc2FnZS5jcmVhdGUoY2hhdERhdGEpXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgdG9nZ2xlWFBHYWluICh0b2dnbGUpIHtcbiAgICBhd2FpdCBnYW1lLnNldHRpbmdzLnNldCgnQ29DNycsICd4cEVuYWJsZWQnLCB0b2dnbGUpXG4gICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKFxuICAgICAgdG9nZ2xlXG4gICAgICAgID8gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlhQR2FpbkVuYWJsZWQnKVxuICAgICAgICA6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5YUEdhaW5EaXNhYmxlZCcpXG4gICAgKVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIHJvbGxEaWNlIChldmVudCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgb3B0aW9ucy5hc2tWYWx1ZSA9ICFvcHRpb25zLnRocmVzaG9sZFxuICAgIGxldCBkaWNlTW9kaWZpZXIsIGRpZmZpY3VsdHksIGZsYXREaWNlTW9kaWZpZXIsIGZsYXRUaHJlc2hvbGRNb2RpZmllclxuICAgIGxldCB0aHJlc2hvbGQgPSBvcHRpb25zLnRocmVzaG9sZFxuXG4gICAgaWYgKHVuZGVmaW5lZCAhPT0gb3B0aW9ucy5tb2RpZmllcikgZGljZU1vZGlmaWVyID0gTnVtYmVyKG9wdGlvbnMubW9kaWZpZXIpXG4gICAgaWYgKHVuZGVmaW5lZCAhPT0gb3B0aW9ucy5kaWZmaWN1bHR5KSB7XG4gICAgICBkaWZmaWN1bHR5ID0gQ29DN1V0aWxpdGllcy5jb252ZXJ0RGlmZmljdWx0eShvcHRpb25zLmRpZmZpY3VsdHkpXG4gICAgfVxuXG4gICAgaWYgKCFldmVudD8uc2hpZnRLZXkgJiYgIW9wdGlvbnMuZmFzdEZvcndhcmQpIHtcbiAgICAgIGNvbnN0IHVzYWdlID0gYXdhaXQgUm9sbERpYWxvZy5jcmVhdGUob3B0aW9ucylcbiAgICAgIGlmICh1c2FnZSkge1xuICAgICAgICBkaWNlTW9kaWZpZXIgPSBOdW1iZXIodXNhZ2UuZ2V0KCdib251c0RpY2UnKSlcbiAgICAgICAgZGlmZmljdWx0eSA9IE51bWJlcih1c2FnZS5nZXQoJ2RpZmZpY3VsdHknKSlcbiAgICAgICAgdGhyZXNob2xkID0gTnVtYmVyKHVzYWdlLmdldCgndGhyZXNob2xkJykpXG4gICAgICAgIGZsYXREaWNlTW9kaWZpZXIgPSBOdW1iZXIodXNhZ2UuZ2V0KCdmbGF0RGljZU1vZGlmaWVyJykpXG4gICAgICAgIGZsYXRUaHJlc2hvbGRNb2RpZmllciA9IE51bWJlcih1c2FnZS5nZXQoJ2ZsYXRUaHJlc2hvbGRNb2RpZmllcicpKVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGFjdG9ycyA9IFtdXG5cbiAgICBpZiAoZ2FtZS51c2VyLmlzR00gJiYgY2FudmFzLnRva2Vucy5jb250cm9sbGVkLmxlbmd0aCkge1xuICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiBjYW52YXMudG9rZW5zLmNvbnRyb2xsZWQpIHtcbiAgICAgICAgYWN0b3JzLnB1c2godG9rZW4uYWN0b3IudG9rZW5LZXkpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChnYW1lLnVzZXIuY2hhcmFjdGVyKSB7XG4gICAgICBhY3RvcnMucHVzaChnYW1lLnVzZXIuY2hhcmFjdGVyLnRva2VuS2V5KVxuICAgIH1cblxuICAgIGZvciAoY29uc3QgdGsgb2YgYWN0b3JzKSB7XG4gICAgICBjb25zdCBjaGVjayA9IG5ldyBDb0M3Q2hlY2soKVxuICAgICAgY2hlY2suZGljZU1vZGlmaWVyID0gZGljZU1vZGlmaWVyIHx8IDBcbiAgICAgIGNoZWNrLmRpZmZpY3VsdHkgPSBkaWZmaWN1bHR5IHx8IENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwucmVndWxhclxuICAgICAgY2hlY2sucmF3VmFsdWUgPSB0aHJlc2hvbGRcbiAgICAgIGNoZWNrLmZsYXREaWNlTW9kaWZpZXIgPSBmbGF0RGljZU1vZGlmaWVyXG4gICAgICBjaGVjay5mbGF0VGhyZXNob2xkTW9kaWZpZXIgPSBmbGF0VGhyZXNob2xkTW9kaWZpZXJcbiAgICAgIGNoZWNrLmFjdG9yID0gdGtcbiAgICAgIGF3YWl0IGNoZWNrLnJvbGwoKVxuICAgICAgY2hlY2sudG9NZXNzYWdlKClcbiAgICB9XG5cbiAgICBpZiAoIWFjdG9ycy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGNoZWNrID0gbmV3IENvQzdDaGVjaygpXG4gICAgICBjaGVjay5kaWNlTW9kaWZpZXIgPSBkaWNlTW9kaWZpZXIgfHwgMFxuICAgICAgY2hlY2suZGlmZmljdWx0eSA9IGRpZmZpY3VsdHkgfHwgQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyXG4gICAgICBjaGVjay5yYXdWYWx1ZSA9IHRocmVzaG9sZFxuICAgICAgY2hlY2suZmxhdERpY2VNb2RpZmllciA9IGZsYXREaWNlTW9kaWZpZXJcbiAgICAgIGNoZWNrLmZsYXRUaHJlc2hvbGRNb2RpZmllciA9IGZsYXRUaHJlc2hvbGRNb2RpZmllclxuICAgICAgYXdhaXQgY2hlY2sucm9sbCgpXG4gICAgICBjaGVjay50b01lc3NhZ2UoKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyB1cGRhdGVDaGFyU2hlZXRzICgpIHtcbiAgICBpZiAoZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgIGZvciAoY29uc3QgYSBvZiBnYW1lLmFjdG9ycy5jb250ZW50cykge1xuICAgICAgICBpZiAoYT8udHlwZSA9PT0gJ2NoYXJhY3RlcicgJiYgYT8uc2hlZXQgJiYgYT8uc2hlZXQ/LnJlbmRlcmVkKSB7XG4gICAgICAgICAgYS51cGRhdGUoeyAnc3lzdGVtLmZsYWdzLmxvY2tlZCc6IHRydWUgfSlcbiAgICAgICAgICBhLnJlbmRlcihmYWxzZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGNvbnN0IGEgb2YgZ2FtZS5hY3RvcnMuY29udGVudHMpIHtcbiAgICAgICAgaWYgKGEuaXNPd25lcikge1xuICAgICAgICAgIGEudXBkYXRlKHsgJ3N5c3RlbS5mbGFncy5sb2NrZWQnOiB0cnVlIH0pXG4gICAgICAgICAgYS5yZW5kZXIoZmFsc2UpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIGZyb20gX29uRHJvcCB0byBnZXQgdGhlIGRyb3BwZWQgZW50aXR5VHlwZSBvciBlbnRpdHlUeXBlIGZyb20gYSBmb2xkZXJcbiAgICogQHBhcmFtIHtqUXVlcnl9IGV2ZW50IEBzZWUgYWN0aXZhdGVMaXN0ZW5lcnNcbiAgICogQHJldHVybnMgW2l0ZW1zXSBhcnJheSBvZiBpdGVtc1xuICAgKi9cbiAgc3RhdGljIGFzeW5jIGdldERhdGFGcm9tRHJvcEV2ZW50IChldmVudCwgZW50aXR5VHlwZSA9ICdJdGVtJykge1xuICAgIGlmIChldmVudC5vcmlnaW5hbEV2ZW50KSByZXR1cm4gW11cbiAgICB0cnkge1xuICAgICAgY29uc3QgZGF0YUxpc3QgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKCd0ZXh0L3BsYWluJykpXG4gICAgICBpZiAoZGF0YUxpc3QudHlwZSA9PT0gJ0ZvbGRlcicgJiYgZGF0YUxpc3QuZG9jdW1lbnROYW1lID09PSBlbnRpdHlUeXBlKSB7XG4gICAgICAgIGNvbnN0IGZvbGRlciA9IGF3YWl0IGZyb21VdWlkKGRhdGFMaXN0LnV1aWQpXG4gICAgICAgIGlmICghZm9sZGVyKSByZXR1cm4gW11cbiAgICAgICAgcmV0dXJuIGZvbGRlci5jb250ZW50c1xuICAgICAgfSBlbHNlIGlmIChkYXRhTGlzdC50eXBlID09PSBlbnRpdHlUeXBlKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBhd2FpdCBmcm9tVXVpZChkYXRhTGlzdC51dWlkKVxuICAgICAgICBpZiAoIWl0ZW0pIHJldHVybiBbXVxuICAgICAgICByZXR1cm4gW2l0ZW1dXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gW11cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBbXVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBjb3B5VG9DbGlwYm9hcmQgKHRleHQpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKG5hdmlnYXRvci5jbGlwYm9hcmQgJiYgd2luZG93LmlzU2VjdXJlQ29udGV4dCkge1xuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQodGV4dClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHRleHRBcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKVxuICAgICAgICB0ZXh0QXJlYS52YWx1ZSA9IHRleHRcbiAgICAgICAgdGV4dEFyZWEuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnXG4gICAgICAgIHRleHRBcmVhLnN0eWxlLmxlZnQgPSAnLTk5OXB4J1xuICAgICAgICB0ZXh0QXJlYS5zdHlsZS50b3AgPSAnLTk5OXB4J1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRleHRBcmVhKVxuICAgICAgICB0ZXh0QXJlYS5mb2N1cygpXG4gICAgICAgIHRleHRBcmVhLnNlbGVjdCgpXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKVxuICAgICAgICAgICAgPyByZXNvbHZlKClcbiAgICAgICAgICAgIDogcmVqZWN0KFxuICAgICAgICAgICAgICBuZXcgRXJyb3IoZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlVuYWJsZVRvQ29weVRvQ2xpcGJvYXJkJykpXG4gICAgICAgICAgICApXG4gICAgICAgICAgdGV4dEFyZWEucmVtb3ZlKClcbiAgICAgICAgfSkuY2F0Y2goZXJyID0+IHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoZXJyKSlcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlVuYWJsZVRvQ29weVRvQ2xpcGJvYXJkJykpXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHF1b3RlUmVnRXhwIChzdHJpbmcpIHtcbiAgICAvLyBodHRwczovL2JpdGJ1Y2tldC5vcmcvY2dnYWVydG5lci9qcy1oYWNrcy9yYXcvbWFzdGVyL3F1b3RlLmpzXG4gICAgY29uc3QgbGVuID0gc3RyaW5nLmxlbmd0aFxuICAgIGxldCBxU3RyaW5nID0gJydcblxuICAgIGZvciAobGV0IGN1cnJlbnQsIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIGN1cnJlbnQgPSBzdHJpbmcuY2hhckF0KGkpXG5cbiAgICAgIGlmIChjdXJyZW50ID49ICcgJyAmJiBjdXJyZW50IDw9ICd+Jykge1xuICAgICAgICBpZiAoY3VycmVudCA9PT0gJ1xcXFwnIHx8IGN1cnJlbnQgPT09IFwiJ1wiKSB7XG4gICAgICAgICAgcVN0cmluZyArPSAnXFxcXCdcbiAgICAgICAgfVxuXG4gICAgICAgIHFTdHJpbmcgKz0gY3VycmVudC5yZXBsYWNlKC9bLVtcXF0ve30oKSorPy5cXFxcXiR8XS9nLCAnXFxcXCQmJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXRjaCAoY3VycmVudCkge1xuICAgICAgICAgIGNhc2UgJ1xcYic6XG4gICAgICAgICAgICBxU3RyaW5nICs9ICdcXFxcYidcbiAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICBjYXNlICdcXGYnOlxuICAgICAgICAgICAgcVN0cmluZyArPSAnXFxcXGYnXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgY2FzZSAnXFxuJzpcbiAgICAgICAgICAgIHFTdHJpbmcgKz0gJ1xcXFxuJ1xuICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgIGNhc2UgJ1xccic6XG4gICAgICAgICAgICBxU3RyaW5nICs9ICdcXFxccidcbiAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICBjYXNlICdcXHQnOlxuICAgICAgICAgICAgcVN0cmluZyArPSAnXFxcXHQnXG4gICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgY2FzZSAnXFx2JzpcbiAgICAgICAgICAgIHFTdHJpbmcgKz0gJ1xcXFx2J1xuICAgICAgICAgICAgYnJlYWtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBxU3RyaW5nICs9ICdcXFxcdSdcbiAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gNDsgLS1qID49IGN1cnJlbnQubGVuZ3RoOyBxU3RyaW5nICs9ICcwJyk7XG4gICAgICAgICAgICBxU3RyaW5nICs9IGN1cnJlbnRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBxU3RyaW5nXG4gIH1cblxuICBzdGF0aWMgc2V0QnlQYXRoIChvYmosIHBhdGgsIHZhbHVlKSB7XG4gICAgY29uc3QgcGFydHMgPSBwYXRoLnNwbGl0KCcuJylcbiAgICBsZXQgbyA9IG9ialxuICAgIGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICBpZiAoIW9bcGFydHNbaV1dKSBvW3BhcnRzW2ldXSA9IHt9XG4gICAgICAgIG8gPSBvW3BhcnRzW2ldXVxuICAgICAgfVxuICAgIH1cblxuICAgIG9bcGFydHNbcGFydHMubGVuZ3RoIC0gMV1dID0gdmFsdWVcbiAgfVxuXG4gIHN0YXRpYyBnZXRCeVBhdGggKG9iaiwgcGF0aCkge1xuICAgIGNvbnN0IHBhcnRzID0gcGF0aC5zcGxpdCgnLicpXG4gICAgbGV0IG8gPSBvYmpcbiAgICBpZiAocGFydHMubGVuZ3RoID4gMSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgaWYgKCFvW3BhcnRzW2ldXSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICBvID0gb1twYXJ0c1tpXV1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb1twYXJ0c1twYXJ0cy5sZW5ndGggLSAxXV1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSBhIERvY3VtZW50IGJ5IGl0cyBVbml2ZXJzYWxseSBVbmlxdWUgSWRlbnRpZmllciAodXVpZCkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1dWlkICAgVGhlIHV1aWQgb2YgdGhlIERvY3VtZW50IHRvIHJldHJpZXZlXG4gICAqIEByZXR1cm4ge1Byb21pc2U8RG9jdW1lbnR8bnVsbD59XG4gICAqL1xuICBzdGF0aWMgU2Zyb21VdWlkICh1dWlkKSB7XG4gICAgbGV0IHBhcnRzID0gdXVpZC5zcGxpdCgnLicpXG4gICAgbGV0IGRvY1xuXG4gICAgLy8gQ29tcGVuZGl1bSBEb2N1bWVudHNcbiAgICBpZiAocGFydHNbMF0gPT09ICdDb21wZW5kaXVtJykge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICAgIC8vIHJldHVybiBmcm9tVXVpZCh1dWlkKSAvLyBSZXR1cm4gUHJvbWlzZVxuICAgICAgLy8gcGFydHMuc2hpZnQoKTtcbiAgICAgIC8vIGNvbnN0IFtzY29wZSwgcGFja05hbWUsIGlkXSA9IHBhcnRzLnNsaWNlKDAsIDMpO1xuICAgICAgLy8gcGFydHMgPSBwYXJ0cy5zbGljZSgzKTtcbiAgICAgIC8vIGNvbnN0IHBhY2sgPSBnYW1lLnBhY2tzLmdldChgJHtzY29wZX0uJHtwYWNrTmFtZX1gKTtcbiAgICAgIC8vIHJldHVybiBhd2FpdCBwYWNrPy5nZXREb2N1bWVudChpZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFdvcmxkIERvY3VtZW50c1xuICAgICAgY29uc3QgW2RvY05hbWUsIGRvY0lkXSA9IHBhcnRzLnNsaWNlKDAsIDIpXG4gICAgICBwYXJ0cyA9IHBhcnRzLnNsaWNlKDIpXG4gICAgICBjb25zdCBjb2xsZWN0aW9uID0gQ09ORklHW2RvY05hbWVdLmNvbGxlY3Rpb24uaW5zdGFuY2VcbiAgICAgIGRvYyA9IGNvbGxlY3Rpb24uZ2V0KGRvY0lkKVxuICAgIH1cblxuICAgIC8vIEVtYmVkZGVkIERvY3VtZW50c1xuICAgIHdoaWxlIChkb2MgJiYgcGFydHMubGVuZ3RoID4gMSkge1xuICAgICAgY29uc3QgW2VtYmVkZGVkTmFtZSwgZW1iZWRkZWRJZF0gPSBwYXJ0cy5zbGljZSgwLCAyKVxuICAgICAgZG9jID0gZG9jLmdldEVtYmVkZGVkRG9jdW1lbnQoZW1iZWRkZWROYW1lLCBlbWJlZGRlZElkKVxuICAgICAgcGFydHMgPSBwYXJ0cy5zbGljZSgyKVxuICAgIH1cbiAgICByZXR1cm4gZG9jIHx8IG51bGxcbiAgfVxuXG4gIHN0YXRpYyBpc0RvY3VtZW50VXVpZFBhY2sgKHV1aWQpIHtcbiAgICBpZiAodXVpZC5pbmNsdWRlcygnQ29tcGVuZGl1bScpKSByZXR1cm4gdHJ1ZVxuICAgIGVsc2UgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBzdGF0aWMgaXNEb2N1bWVudFV1aWQgKHV1aWQpIHtcbiAgICBjb25zdCBpZGVudGlmaWVycyA9IFsnQWN0b3InLCAnU2NlbmUnLCAnVG9rZW4nLCAnSXRlbScsICdDb21wZW5kaXVtJ11cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodXVpZC5pbmNsdWRlcyhpZGVudGlmaWVyc1tpXSkpIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgc3RhdGljIGdldEFjdG9yRG9jdW1lbnRGcm9tRHJvcERhdGEgKGRyb3BEYXRhKSB7XG4gICAgbGV0IGRvY1V1aWQsIGFjdG9yXG4gICAgaWYgKGRyb3BEYXRhLnRva2VuVXVpZCkge1xuICAgICAgZG9jVXVpZCA9IGRyb3BEYXRhLnRva2VuVXVpZFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGRyb3BEYXRhLnV1aWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkb2NVdWlkID0gZHJvcERhdGEudXVpZFxuICAgIH0gZWxzZSB7XG4gICAgICBkb2NVdWlkID1cbiAgICAgICAgZHJvcERhdGEuc2NlbmVJZCAmJiBkcm9wRGF0YS50b2tlbklkXG4gICAgICAgICAgPyBgU2NlbmUuJHtkcm9wRGF0YS5zY2VuZUlkfS5Ub2tlbi4ke2Ryb3BEYXRhLnRva2VuSWR9YFxuICAgICAgICAgIDogZHJvcERhdGEuYWN0b3JJZCB8fCBkcm9wRGF0YS5hY3RvcktleSB8fCBkcm9wRGF0YS5pZFxuICAgIH1cbiAgICBpZiAoZHJvcERhdGEudHlwZSA9PT0gJ1Rva2VuJykge1xuICAgICAgZG9jVXVpZCA9IGRyb3BEYXRhLnV1aWRcbiAgICB9IGVsc2UgaWYgKGRvY1V1aWQpIHtcbiAgICAgIGFjdG9yID0gQ29DN1V0aWxpdGllcy5nZXRBY3RvckZyb21LZXkoZG9jVXVpZClcbiAgICAgIGlmICghYWN0b3IgJiYgZHJvcERhdGEudHlwZSA9PT0gJ0l0ZW0nKSBkb2NVdWlkID0gbnVsbFxuICAgIH1cblxuICAgIGlmIChhY3RvciAmJiBkb2NVdWlkICE9PSBhY3Rvci51dWlkKSB7XG4gICAgICBkb2NVdWlkID0gYWN0b3IudXVpZFxuICAgIH1cbiAgICByZXR1cm4gZG9jVXVpZFxuICB9XG5cbiAgc3RhdGljIGdldERvY3VtZW50RnJvbUtleSAoa2V5KSB7XG4gICAgaWYgKCFrZXkpIHJldHVybiBudWxsXG4gICAgLy8gQ2FzZSAwIC0gYSBkb2N1bWVudCBVdWlkXG4gICAgaWYgKENvQzdVdGlsaXRpZXMuaXNEb2N1bWVudFV1aWQoa2V5KSkge1xuICAgICAgaWYgKENvQzdVdGlsaXRpZXMuaXNEb2N1bWVudFV1aWRQYWNrKGtleSkpIHJldHVybiBmcm9tVXVpZChrZXkpIC8vIFRPRE8gQ2hlY2sgd2UgY2FuIGRvIHRoYXRcbiAgICAgIHJldHVybiBDb0M3VXRpbGl0aWVzLlNmcm9tVXVpZChrZXkpXG4gICAgfVxuXG4gICAgLy8gQ2FzZSAxIC0gYSBzeW50aGV0aWMgYWN0b3IgZnJvbSBhIFRva2VuXG4gICAgaWYgKGtleS5pbmNsdWRlcygnLicpKSB7XG4gICAgICAvLyBSRUZBQ1RPUklORyAoMilcbiAgICAgIGNvbnN0IFtzY2VuZUlkLCB0b2tlbklkXSA9IGtleS5zcGxpdCgnLicpXG4gICAgICBpZiAoc2NlbmVJZCA9PT0gJ1RPS0VOJykge1xuICAgICAgICByZXR1cm4gZ2FtZS5hY3RvcnMudG9rZW5zW3Rva2VuSWRdIC8vIFJFRkFDVE9SSU5HICgyKVxuICAgICAgfVxuICAgICAgY29uc3Qgc2NlbmUgPSBnYW1lLnNjZW5lcy5nZXQoc2NlbmVJZClcbiAgICAgIGlmICghc2NlbmUpIHJldHVybiBudWxsXG4gICAgICBjb25zdCB0b2tlbkRhdGEgPSBzY2VuZS5nZXRFbWJlZGRlZERvY3VtZW50KCdUb2tlbicsIHRva2VuSWQpXG4gICAgICBpZiAoIXRva2VuRGF0YSkgcmV0dXJuIG51bGxcbiAgICAgIGNvbnN0IHRva2VuID0gbmV3IFRva2VuKHRva2VuRGF0YSlcbiAgICAgIGlmICghdG9rZW4uc2NlbmUpIHRva2VuLnNjZW5lID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoc2NlbmUpXG4gICAgICByZXR1cm4gdG9rZW5cbiAgICB9XG4gICAgLy8gQ2FzZSAyIC0gdXNlIEFjdG9yIElEIGRpcmVjdG9yeVxuICAgIHJldHVybiBnYW1lLmFjdG9ycy5nZXQoa2V5KSB8fCBudWxsXG4gIH1cblxuICBzdGF0aWMgZ2V0QWN0b3JGcm9tS2V5IChrZXkpIHtcbiAgICBjb25zdCBkb2MgPSBDb0M3VXRpbGl0aWVzLmdldERvY3VtZW50RnJvbUtleShrZXkpXG4gICAgaWYgKCFkb2MpIHJldHVybiBudWxsXG4gICAgaWYgKGRvYy5hY3RvcikgcmV0dXJuIGRvYy5hY3RvclxuICAgIGlmIChkb2MuY29uc3RydWN0b3I/Lm5hbWUgPT09ICdDb0NBY3RvcicpIHJldHVybiBkb2NcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBmb2xkZXIgb24gdGhlIGFjdG9ycyB0YWIgY2FsbGVkIFwiSW1wb3J0ZWQgQ2hhcmFjdGVyc1wiIGlmIHRoZSBmb2xkZXIgZG9lc24ndCBleGlzdC5cbiAgICogQHJldHVybnMge0ZvbGRlcn0gdGhlIGltcG9ydGVkQ2hhcmFjdGVyc0ZvbGRlclxuICAgKi9cbiAgc3RhdGljIGFzeW5jIGNyZWF0ZUltcG9ydENoYXJhY3RlcnNGb2xkZXJJZk5vdEV4aXN0cyAoKSB7XG4gICAgbGV0IGZvbGRlck5hbWUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuSW1wb3J0ZWRDaGFyYWN0ZXJzRm9sZGVyJylcbiAgICBpZiAoZm9sZGVyTmFtZSA9PT0gJ0NvQzcuSW1wb3J0ZWRDaGFyYWN0ZXJzRm9sZGVyJykge1xuICAgICAgZm9sZGVyTmFtZSA9ICdJbXBvcnRlZCBjaGFyYWN0ZXJzJ1xuICAgIH1cbiAgICBsZXQgaW1wb3J0ZWRDaGFyYWN0ZXJzRm9sZGVyID0gZ2FtZS5mb2xkZXJzLmZpbmQoXG4gICAgICBlbnRyeSA9PiBlbnRyeS5uYW1lID09PSBmb2xkZXJOYW1lICYmIGVudHJ5LnR5cGUgPT09ICdBY3RvcidcbiAgICApXG4gICAgaWYgKFxuICAgICAgaW1wb3J0ZWRDaGFyYWN0ZXJzRm9sZGVyID09PSBudWxsIHx8XG4gICAgICB0eXBlb2YgaW1wb3J0ZWRDaGFyYWN0ZXJzRm9sZGVyID09PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgLy8gQ3JlYXRlIHRoZSBmb2xkZXJcbiAgICAgIGltcG9ydGVkQ2hhcmFjdGVyc0ZvbGRlciA9IGF3YWl0IEZvbGRlci5jcmVhdGUoe1xuICAgICAgICBuYW1lOiBmb2xkZXJOYW1lLFxuICAgICAgICB0eXBlOiAnQWN0b3InLFxuICAgICAgICBwYXJlbnQ6IG51bGxcbiAgICAgIH0pXG4gICAgICB1aS5ub3RpZmljYXRpb25zLmluZm8oXG4gICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5DcmVhdGVkSW1wb3J0ZWRDaGFyYWN0ZXJzRm9sZGVyJylcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGltcG9ydGVkQ2hhcmFjdGVyc0ZvbGRlclxuICB9XG5cbiAgLyoqXG4gICAqIGd1ZXNzSXRlbSwgdHJ5IGFuZCBmaW5kIHRoZSBpdGVtIGluIHRoZSBsb2NhdGlvbnMgZGVmaW5lZCBpbiAke3NvdXJjZX0gaSA9IEl0ZW0gRGlyZWN0b3J5LCB3ID0gV29ybGQgQ29tcGVuZGl1bXMsIG0gPSBNb2R1bGUgQ29tcGVuZGl1bXMsIHMgPSBTeXN0ZW0gQ29tcGVuZGl1bXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgSXRlbSB0eXBlIHRvIGZpbmRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgTmFtZSBvZiBpdGVtIHRvIGZpbmRcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbWJhdCBudWxsIChkZWZhdWx0KS4gSWYgYm9vbGVhbiBjb21iYXQgcHJvcGVydHkgb2Ygc2tpbGwgbXVzdCBtYXRjaFxuICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlICcnIChkZWZhdWx0KS4gQ2hlY2sgb3JkZXJcbiAgICogQHBhcmFtIHtPYmplY3R9IGZhbGxiYWNrQW55IGZhbHNlIChkZWZhdWx0KS4gU2hvdWxkIGFueSBzcGVjaWFsaXphdGlvbiB0aGF0IGlzbid0IGZvdW5kIHRyeSB1c2luZyAoQW55KSBpdGVtc1xuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBmb3JtYXR0ZWQgQWN0b3IgZGF0YSBJdGVtIG9yIG51bGxcbiAgICovXG4gIHN0YXRpYyBhc3luYyBndWVzc0l0ZW0gKFxuICAgIHR5cGUsXG4gICAgbmFtZSxcbiAgICB7IGNvbWJhdCA9IG51bGwsIHNvdXJjZSA9ICcnLCBmYWxsYmFja0FueSA9IGZhbHNlIH0gPSB7fVxuICApIHtcbiAgICBsZXQgZXhpc3RpbmcgPSBudWxsXG4gICAgbmFtZSA9IG5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKVxuICAgIGZvciAobGV0IG8gPSAwLCBvTSA9IHNvdXJjZS5sZW5ndGg7IG8gPCBvTTsgbysrKSB7XG4gICAgICBzd2l0Y2ggKHNvdXJjZS5zdWJzdHJpbmcobywgbyArIDEpKSB7XG4gICAgICAgIGNhc2UgJ2knOlxuICAgICAgICAgIGV4aXN0aW5nID0gZ2FtZS5pdGVtcy5maW5kKFxuICAgICAgICAgICAgaXRlbSA9PiBpdGVtLnR5cGUgPT09IHR5cGUgJiZcbiAgICAgICAgICAgICAgaXRlbS5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgJiZcbiAgICAgICAgICAgICAgKGNvbWJhdCA9PT0gbnVsbCB8fCBpdGVtLnN5c3RlbS5wcm9wZXJ0aWVzLmNvbWJhdCA9PT0gY29tYmF0KVxuICAgICAgICAgIClcbiAgICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBleGlzdGluZ1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgIGZvciAoY29uc3QgcGFjayBvZiBnYW1lLnBhY2tzKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHBhY2subWV0YWRhdGEudHlwZSA9PT0gJ0l0ZW0nICYmXG4gICAgICAgICAgICAgICgoc291cmNlW29dID09PSAndycgJiYgcGFjay5tZXRhZGF0YS5wYWNrYWdlID09PSAnd29ybGQnKSB8fFxuICAgICAgICAgICAgICAgIChzb3VyY2Vbb10gPT09ICdTJyAmJiBwYWNrLm1ldGFkYXRhLnBhY2thZ2UgPT09ICdDb0M3JykgfHxcbiAgICAgICAgICAgICAgICAoc291cmNlW29dID09PSAncycgJiZcbiAgICAgICAgICAgICAgICAgICFbJ3dvcmxkJywgJ0NvQzcnXS5pbmNsdWRlcyhwYWNrLm1ldGFkYXRhLnBhY2thZ2UpKSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjb25zdCBkb2N1bWVudHMgPSBhd2FpdCBwYWNrLmdldERvY3VtZW50cygpXG4gICAgICAgICAgICAgIGV4aXN0aW5nID0gZG9jdW1lbnRzLmZpbmQoXG4gICAgICAgICAgICAgICAgaXRlbSA9PlxuICAgICAgICAgICAgICAgICAgaXRlbS50eXBlID09PSB0eXBlICYmXG4gICAgICAgICAgICAgICAgICBpdGVtLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSAmJlxuICAgICAgICAgICAgICAgICAgKGNvbWJhdCA9PT0gbnVsbCB8fCBpdGVtLnN5c3RlbS5wcm9wZXJ0aWVzLmNvbWJhdCA9PT0gY29tYmF0KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIGlmIChleGlzdGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBleGlzdGluZ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmYWxsYmFja0FueSAmJiB0eXBlID09PSAnc2tpbGwnKSB7XG4gICAgICBjb25zdCBtYXRjaCA9IG5hbWUubWF0Y2goL14oLisgXFwoKSg/IWFueSkuKyhcXCkpJC8pXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IENvQzdVdGlsaXRpZXMuZ3Vlc3NJdGVtKFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgbWF0Y2hbMV0gKyAnYW55JyArIG1hdGNoWzJdLFxuICAgICAgICAgIHsgY29tYmF0LCBzb3VyY2UgfVxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHRvS2ViYWJDYXNlIChzKSB7XG4gICAgaWYgKCFzKSB7XG4gICAgICByZXR1cm4gJydcbiAgICB9XG4gICAgY29uc3QgbWF0Y2ggPSBzLm1hdGNoKC9bQS1aXXsyLH0oPz1bQS1aXVthLXpdK1swLTldKnxcXGIpfFtBLVpdP1thLXpdK1swLTldKnxbQS1aXXxbMC05XSsvZylcblxuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgIHJldHVybiAnJ1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaC5qb2luKCctJykudG9Mb3dlckNhc2UoKVxuICB9XG5cbiAgc3RhdGljIHNvcnRCeU5hbWVLZXkgKGEsIGIpIHtcbiAgICByZXR1cm4gYS5uYW1lXG4gICAgICAubm9ybWFsaXplKCdORkQnKVxuICAgICAgLnJlcGxhY2UoL1tcXHUwMzAwLVxcdTAzNmZdL2csICcnKVxuICAgICAgLnRvTG9jYWxlTG93ZXJDYXNlKClcbiAgICAgIC5sb2NhbGVDb21wYXJlKFxuICAgICAgICBiLm5hbWVcbiAgICAgICAgICAubm9ybWFsaXplKCdORkQnKVxuICAgICAgICAgIC5yZXBsYWNlKC9bXFx1MDMwMC1cXHUwMzZmXS9nLCAnJylcbiAgICAgICAgICAudG9Mb2NhbGVMb3dlckNhc2UoKVxuICAgICAgKVxuICB9XG5cbiAgc3RhdGljIGdldEFuSWRGb3JHbSAoKSB7XG4gICAgY29uc3Qga2VlcGVycyA9IGdhbWUudXNlcnMuZmlsdGVyKHUgPT4gdS5hY3RpdmUgJiYgdS5pc0dNICYmIHUuaWQgIT09IGdhbWUudXNlci5pZClcbiAgICBzd2l0Y2ggKGtlZXBlcnMubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoJ0NvQzcuRXJyb3JNaXNzaW5nS2VlcGVyVXNlcicsIHsgbG9jYWxpemU6IHRydWUgfSlcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBrZWVwZXJzWzBdLmlkXG4gICAgfVxuICAgIHJldHVybiBrZWVwZXJzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGtlZXBlcnMubGVuZ3RoKV0uaWRcbiAgfVxufVxuIiwiLyogZ2xvYmFsICQsIENPTkZJRywgRm9ybUFwcGxpY2F0aW9uLCBmb3VuZHJ5LCBnYW1lLCBUZXh0RWRpdG9yICovXG5pbXBvcnQgeyBDT0M3IH0gZnJvbSAnLi4vY29uZmlnLmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4uL3V0aWxpdGllcy5qcydcblxuZXhwb3J0IGNsYXNzIENvQ0lERWRpdG9yIGV4dGVuZHMgRm9ybUFwcGxpY2F0aW9uIHtcbiAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc3VwZXIuZGVmYXVsdE9wdGlvbnMsIHtcbiAgICAgIGNsYXNzZXM6IFsnY29jNycsICdkaWFsb2cnLCAnY29jLWlkLWVkaXRvciddLFxuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvY29jLWlkLWVkaXRvci5oYnMnLFxuICAgICAgd2lkdGg6IDkwMCxcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgdGl0bGU6ICdDb0M3LkNvQ0lERmxhZy50aXRsZScsXG4gICAgICBjbG9zZU9uU3VibWl0OiBmYWxzZSxcbiAgICAgIHN1Ym1pdE9uQ2xvc2U6IHRydWUsXG4gICAgICBzdWJtaXRPbkNoYW5nZTogdHJ1ZVxuICAgIH0pXG4gIH1cblxuICBhc3luYyBnZXREYXRhICgpIHtcbiAgICBjb25zdCBzaGVldERhdGEgPSBzdXBlci5nZXREYXRhKClcblxuICAgIHNoZWV0RGF0YS5zdXBwb3J0ZWRMYW5ndWFnZXMgPSBDT05GSUcuc3VwcG9ydGVkTGFuZ3VhZ2VzXG5cbiAgICB0aGlzLm9wdGlvbnMuZWRpdGFibGUgPSB0aGlzLm9iamVjdC5zaGVldC5pc0VkaXRhYmxlXG5cbiAgICBzaGVldERhdGEuZ3Vlc3NDb2RlID0gZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmd1ZXNzSWQodGhpcy5vYmplY3QpXG4gICAgc2hlZXREYXRhLmlkUHJlZml4ID0gZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmdldFByZWZpeCh0aGlzLm9iamVjdClcblxuICAgIHNoZWV0RGF0YS5jb2NpZEZsYWcgPSB0aGlzLm9iamVjdC5mbGFncz8uQ29DNz8uY29jaWRGbGFnXG5cbiAgICBzaGVldERhdGEuaWQgPSBzaGVldERhdGEuY29jaWRGbGFnPy5pZCB8fCAnJ1xuICAgIHNoZWV0RGF0YS5sYW5nID0gc2hlZXREYXRhLmNvY2lkRmxhZz8ubGFuZyB8fCBnYW1lLmkxOG4ubGFuZ1xuICAgIHNoZWV0RGF0YS5wcmlvcml0eSA9IHNoZWV0RGF0YS5jb2NpZEZsYWc/LnByaW9yaXR5IHx8IDBcblxuICAgIHNoZWV0RGF0YS5lcmFzID0gW11cbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhDT0M3LmVyYXMpKSB7XG4gICAgICBzaGVldERhdGEuZXJhcy5wdXNoKHtcbiAgICAgICAgaWQ6IGtleSxcbiAgICAgICAgbmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKHZhbHVlKSxcbiAgICAgICAgaXNFbmFibGVkOiAoc2hlZXREYXRhLmNvY2lkRmxhZz8uZXJhcyA/PyB7fSlba2V5XSA9PT0gdHJ1ZVxuICAgICAgfSlcbiAgICB9XG4gICAgc2hlZXREYXRhLmVyYXMuc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG5cbiAgICBjb25zdCBDb0NJREtleXMgPSBmb3VuZHJ5LnV0aWxzLmZsYXR0ZW5PYmplY3QoZ2FtZS5pMThuLnRyYW5zbGF0aW9ucy5Db0M3LkNvQ0lERmxhZy5rZXlzID8/IHt9KVxuICAgIGNvbnN0IHByZWZpeCA9IG5ldyBSZWdFeHAoJ14nICsgQ29DN1V0aWxpdGllcy5xdW90ZVJlZ0V4cChzaGVldERhdGEuaWRQcmVmaXgpKVxuICAgIHNoZWV0RGF0YS5leGlzdGluZ0tleXMgPSBPYmplY3Qua2V5cyhDb0NJREtleXMpLnJlZHVjZSgob2JqLCBrKSA9PiB7XG4gICAgICBpZiAoay5tYXRjaChwcmVmaXgpKSB7XG4gICAgICAgIG9iai5wdXNoKHsgaywgbmFtZTogQ29DSURLZXlzW2tdIH0pXG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqXG4gICAgfSwgW10pLnNvcnQoQ29DN1V0aWxpdGllcy5zb3J0QnlOYW1lS2V5KVxuXG4gICAgc2hlZXREYXRhLmlzU3lzdGVtSUQgPSAodHlwZW9mIENvQ0lES2V5c1tzaGVldERhdGEuaWRdICE9PSAndW5kZWZpbmVkJylcbiAgICBjb25zdCBtYXRjaCA9IHNoZWV0RGF0YS5pZC5tYXRjaCgvXihbXlxcXFwuXSspXFwuKFteXFxcXC5dKilcXC4oLispLylcbiAgICBzaGVldERhdGEuX2V4aXN0aW5nID0gKG1hdGNoICYmIHR5cGVvZiBtYXRjaFszXSAhPT0gJ3VuZGVmaW5lZCcgPyBtYXRjaFszXSA6ICcnKVxuXG4gICAgaWYgKHNoZWV0RGF0YS5pZCAmJiBzaGVldERhdGEubGFuZykge1xuICAgICAgLy8gRmluZCBvdXQgaWYgdGhlcmUgZXhpc3RzIGEgZHVwbGljYXRlIENvQ0lEXG4gICAgICBjb25zdCB3b3JsZERvY3VtZW50cyA9IGF3YWl0IGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5mcm9tQ29DSURBbGwoe1xuICAgICAgICBjb2NpZDogc2hlZXREYXRhLmlkLFxuICAgICAgICBsYW5nOiBzaGVldERhdGEubGFuZyxcbiAgICAgICAgc2NvcGU6ICd3b3JsZCdcbiAgICAgIH0pXG4gICAgICBjb25zdCB1c2VkRXJhcyA9IHt9XG4gICAgICBjb25zdCB1bmlxdWVXb3JsZFByaW9yaXR5ID0ge31cbiAgICAgIHNoZWV0RGF0YS53b3JsZERvY3VtZW50SW5mbyA9IGF3YWl0IFByb21pc2UuYWxsKHdvcmxkRG9jdW1lbnRzLm1hcChhc3luYyAoZCkgPT4ge1xuICAgICAgICBpZiAoZC5mbGFncy5Db0M3LmNvY2lkRmxhZy5lcmFzKSB7XG4gICAgICAgICAgT2JqZWN0LmVudHJpZXMoZC5mbGFncy5Db0M3LmNvY2lkRmxhZy5lcmFzKS5maWx0ZXIoZSA9PiBlWzFdKS5tYXAoZSA9PiB7XG4gICAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh1bmlxdWVXb3JsZFByaW9yaXR5LCBkLmZsYWdzLkNvQzcuY29jaWRGbGFnLnByaW9yaXR5ICsgJy8nICsgZVswXSkpIHtcbiAgICAgICAgICAgICAgdW5pcXVlV29ybGRQcmlvcml0eVtkLmZsYWdzLkNvQzcuY29jaWRGbGFnLnByaW9yaXR5ICsgJy8nICsgZVswXV0gPSAwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1bmlxdWVXb3JsZFByaW9yaXR5W2QuZmxhZ3MuQ29DNy5jb2NpZEZsYWcucHJpb3JpdHkgKyAnLycgKyBlWzBdXSsrXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVuaXF1ZVdvcmxkUHJpb3JpdHlbZC5mbGFncy5Db0M3LmNvY2lkRmxhZy5wcmlvcml0eSArICcvKiddID0gMVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVyYXMgPSAoZC5mbGFncy5Db0M3LmNvY2lkRmxhZy5lcmFzID8gT2JqZWN0LmVudHJpZXMoZC5mbGFncy5Db0M3LmNvY2lkRmxhZy5lcmFzKS5maWx0ZXIoZSA9PiBlWzFdKS5tYXAoZSA9PiBlWzBdKS5zb3J0KCkgOiBbXSlcbiAgICAgICAgZm9yIChjb25zdCBlcmEgb2YgZXJhcykge1xuICAgICAgICAgIHVzZWRFcmFzW2VyYV0gPSBDT0M3LmVyYXNbZXJhXSA/PyAnPydcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGVyYXM6IGVyYXMucmVkdWNlKGZ1bmN0aW9uIChhbGwsIGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGFsbFtjdXJyZW50XSA9IHRydWVcbiAgICAgICAgICAgIHJldHVybiBhbGxcbiAgICAgICAgICB9LCB7fSksXG4gICAgICAgICAgcHJpb3JpdHk6IGQuZmxhZ3MuQ29DNy5jb2NpZEZsYWcucHJpb3JpdHksXG4gICAgICAgICAgbGFuZzogZC5mbGFncy5Db0M3LmNvY2lkRmxhZy5sYW5nID8/ICdlbicsXG4gICAgICAgICAgbGluazogYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKGQubGluaywgeyBhc3luYzogdHJ1ZSB9KSxcbiAgICAgICAgICBmb2xkZXI6IGQ/LmZvbGRlcj8ubmFtZVxuICAgICAgICB9XG4gICAgICB9KSlcbiAgICAgIGlmIChPYmplY3QuZW50cmllcyh1bmlxdWVXb3JsZFByaW9yaXR5KS5maWx0ZXIoYyA9PiBjWzFdID4gMSkubGVuZ3RoID4gMCkge1xuICAgICAgICBzaGVldERhdGEud2FybkR1cGxpY2F0ZVdvcmxkUHJpb3JpdHkgPSB0cnVlXG4gICAgICB9XG4gICAgICBzaGVldERhdGEud29ybGREdXBsaWNhdGVzID0gd29ybGREb2N1bWVudHMubGVuZ3RoID8/IDBcblxuICAgICAgY29uc3QgY29tcGVuZGl1bURvY3VtZW50cyA9IGF3YWl0IGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5mcm9tQ29DSURBbGwoe1xuICAgICAgICBjb2NpZDogc2hlZXREYXRhLmlkLFxuICAgICAgICBsYW5nOiBzaGVldERhdGEubGFuZyxcbiAgICAgICAgc2NvcGU6ICdjb21wZW5kaXVtcydcbiAgICAgIH0pXG4gICAgICBjb25zdCB1bmlxdWVDb21wZW5kaXVtUHJpb3JpdHkgPSB7fVxuICAgICAgc2hlZXREYXRhLmNvbXBlbmRpdW1Eb2N1bWVudEluZm8gPSBhd2FpdCBQcm9taXNlLmFsbChjb21wZW5kaXVtRG9jdW1lbnRzLm1hcChhc3luYyAoZCkgPT4ge1xuICAgICAgICBpZiAoZC5mbGFncy5Db0M3LmNvY2lkRmxhZy5lcmFzKSB7XG4gICAgICAgICAgT2JqZWN0LmVudHJpZXMoZC5mbGFncy5Db0M3LmNvY2lkRmxhZy5lcmFzKS5maWx0ZXIoZSA9PiBlWzFdKS5tYXAoZSA9PiB7XG4gICAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh1bmlxdWVDb21wZW5kaXVtUHJpb3JpdHksIGQuZmxhZ3MuQ29DNy5jb2NpZEZsYWcucHJpb3JpdHkgKyAnLycgKyBlWzBdKSkge1xuICAgICAgICAgICAgICB1bmlxdWVDb21wZW5kaXVtUHJpb3JpdHlbZC5mbGFncy5Db0M3LmNvY2lkRmxhZy5wcmlvcml0eSArICcvJyArIGVbMF1dID0gMFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdW5pcXVlQ29tcGVuZGl1bVByaW9yaXR5W2QuZmxhZ3MuQ29DNy5jb2NpZEZsYWcucHJpb3JpdHkgKyAnLycgKyBlWzBdXSsrXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVuaXF1ZUNvbXBlbmRpdW1Qcmlvcml0eVtkLmZsYWdzLkNvQzcuY29jaWRGbGFnLnByaW9yaXR5ICsgJy8qJ10gPSAxXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXJhcyA9IChkLmZsYWdzLkNvQzcuY29jaWRGbGFnLmVyYXMgPyBPYmplY3QuZW50cmllcyhkLmZsYWdzLkNvQzcuY29jaWRGbGFnLmVyYXMpLmZpbHRlcihlID0+IGVbMV0pLm1hcChlID0+IGVbMF0pLnNvcnQoKSA6IFtdKVxuICAgICAgICBmb3IgKGNvbnN0IGVyYSBvZiBlcmFzKSB7XG4gICAgICAgICAgdXNlZEVyYXNbZXJhXSA9IENPQzcuZXJhc1tlcmFdID8/ICc/J1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZXJhczogZXJhcy5yZWR1Y2UoZnVuY3Rpb24gKGFsbCwgY3VycmVudCkge1xuICAgICAgICAgICAgYWxsW2N1cnJlbnRdID0gdHJ1ZVxuICAgICAgICAgICAgcmV0dXJuIGFsbFxuICAgICAgICAgIH0sIHt9KSxcbiAgICAgICAgICBwcmlvcml0eTogZC5mbGFncy5Db0M3LmNvY2lkRmxhZy5wcmlvcml0eSxcbiAgICAgICAgICBsYW5nOiBkLmZsYWdzLkNvQzcuY29jaWRGbGFnLmxhbmcgPz8gJ2VuJyxcbiAgICAgICAgICBsaW5rOiBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoZC5saW5rLCB7IGFzeW5jOiB0cnVlIH0pLFxuICAgICAgICAgIGZvbGRlcjogZD8uZm9sZGVyPy5uYW1lID8/ICcnXG4gICAgICAgIH1cbiAgICAgIH0pKVxuICAgICAgaWYgKE9iamVjdC5lbnRyaWVzKHVuaXF1ZUNvbXBlbmRpdW1Qcmlvcml0eSkuZmlsdGVyKGMgPT4gY1sxXSA+IDEpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgc2hlZXREYXRhLndhcm5EdXBsaWNhdGVDb21wZW5kaXVtUHJpb3JpdHkgPSB0cnVlXG4gICAgICB9XG4gICAgICBzaGVldERhdGEuY29tcGVuZGl1bUR1cGxpY2F0ZXMgPSBjb21wZW5kaXVtRG9jdW1lbnRzLmxlbmd0aCA/PyAwXG4gICAgICBzaGVldERhdGEudXNlZEVyYXMgPSBbXVxuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModXNlZEVyYXMpKSB7XG4gICAgICAgIHNoZWV0RGF0YS51c2VkRXJhcy5wdXNoKHtcbiAgICAgICAgICBpZDoga2V5LFxuICAgICAgICAgIG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSh2YWx1ZSlcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIHNoZWV0RGF0YS51c2VkRXJhcy5zb3J0KENvQzdVdGlsaXRpZXMuc29ydEJ5TmFtZUtleSlcbiAgICB9IGVsc2Uge1xuICAgICAgc2hlZXREYXRhLmNvbXBlbmRpdW1Eb2N1bWVudEluZm8gPSBbXVxuICAgICAgc2hlZXREYXRhLndvcmxkRG9jdW1lbnRJbmZvID0gW11cbiAgICAgIHNoZWV0RGF0YS53b3JsZER1cGxpY2F0ZXMgPSAwXG4gICAgICBzaGVldERhdGEuY29tcGVuZGl1bUR1cGxpY2F0ZXMgPSAwXG4gICAgICBzaGVldERhdGEud2FybkR1cGxpY2F0ZVdvcmxkUHJpb3JpdHkgPSBmYWxzZVxuICAgICAgc2hlZXREYXRhLndhcm5EdXBsaWNhdGVDb21wZW5kaXVtUHJpb3JpdHkgPSBmYWxzZVxuICAgIH1cbiAgICByZXR1cm4gc2hlZXREYXRhXG4gIH1cblxuICBhY3RpdmF0ZUxpc3RlbmVycyAoaHRtbCkge1xuICAgIHN1cGVyLmFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpXG5cbiAgICBodG1sLmZpbmQoJ2EuY29weS10by1jbGlwYm9hcmQnKS5jbGljayhmdW5jdGlvbiAoZSkge1xuICAgICAgQ29DN1V0aWxpdGllcy5jb3B5VG9DbGlwYm9hcmQoJCh0aGlzKS5zaWJsaW5ncygnaW5wdXQnKS52YWwoKSlcbiAgICB9KVxuXG4gICAgaWYgKCF0aGlzLm9iamVjdC5zaGVldC5pc0VkaXRhYmxlKSByZXR1cm5cblxuICAgIGh0bWwuZmluZCgnLnRvZ2dsZS1zd2l0Y2gnKS5jbGljayh0aGlzLl9vbkNsaWNrVG9nZ2xlLmJpbmQodGhpcykpXG5cbiAgICBodG1sLmZpbmQoJ2lucHV0W25hbWU9X2V4aXN0aW5nJykuY2hhbmdlKGZ1bmN0aW9uIChlKSB7XG4gICAgICBjb25zdCBvYmogPSAkKHRoaXMpXG4gICAgICBjb25zdCBwcmVmaXggPSBvYmouZGF0YSgncHJlZml4JylcbiAgICAgIGxldCB2YWx1ZSA9IG9iai52YWwoKVxuICAgICAgaWYgKHZhbHVlICE9PSAnJykge1xuICAgICAgICB2YWx1ZSA9IHByZWZpeCArIENvQzdVdGlsaXRpZXMudG9LZWJhYkNhc2UodmFsdWUpXG4gICAgICB9XG4gICAgICBodG1sLmZpbmQoJ2lucHV0W25hbWU9aWRdJykudmFsKHZhbHVlKS50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgIH0pXG5cbiAgICBodG1sLmZpbmQoJ3NlbGVjdFtuYW1lPWtub3duXScpLmNoYW5nZShmdW5jdGlvbiAoZSkge1xuICAgICAgY29uc3Qgb2JqID0gJCh0aGlzKVxuICAgICAgaHRtbC5maW5kKCdpbnB1dFtuYW1lPWlkXScpLnZhbChvYmoudmFsKCkpXG4gICAgfSlcblxuICAgIGh0bWwuZmluZCgnYVtkYXRhLWd1ZXNzXScpLmNsaWNrKGFzeW5jIGZ1bmN0aW9uIChlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIGNvbnN0IG9iaiA9ICQodGhpcylcbiAgICAgIGNvbnN0IGd1ZXNzID0gb2JqLmRhdGEoJ2d1ZXNzJylcbiAgICAgIGh0bWwuZmluZCgnaW5wdXRbbmFtZT1pZF0nKS52YWwoZ3Vlc3MpLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBlcmFUb2dnbGUgKGRvY3VtZW50LCBwcm9wZXJ0eUlkKSB7XG4gICAgaWYgKGRvY3VtZW50LnR5cGUgPT09ICdzZXR1cCcpIHtcbiAgICAgIC8vIFNldHVwcyBjYW4gb25seSBoYXZlIG9uZSBlcmEgdG8gbWFrZSBzdXJlIHRoZSBjb3JyZWN0IHNraWxscyBhcmUgcG9wdWxhdGVkIHZpYSBDb0MgSURcbiAgICAgIGNvbnN0IHVwZGF0ZSA9IHtcbiAgICAgICAgW3Byb3BlcnR5SWRdOiB0cnVlXG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmZsYWdzPy5Db0M3Py5jb2NpZEZsYWc/LmVyYXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGZvciAoY29uc3QgW2tleV0gb2YgT2JqZWN0LmVudHJpZXMoZG9jdW1lbnQuZmxhZ3MuQ29DNy5jb2NpZEZsYWcuZXJhcykpIHtcbiAgICAgICAgICBpZiAoa2V5ICE9PSBwcm9wZXJ0eUlkKSB7XG4gICAgICAgICAgICB1cGRhdGVbJy09JyArIGtleV0gPSBudWxsXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhd2FpdCBkb2N1bWVudC51cGRhdGUoe1xuICAgICAgICAnZmxhZ3MuQ29DNy5jb2NpZEZsYWcuZXJhcyc6IHVwZGF0ZVxuICAgICAgfSlcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudC5mbGFncz8uQ29DNz8uY29jaWRGbGFnPy5lcmFzPy5bcHJvcGVydHlJZF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodHlwZW9mIGRvY3VtZW50LmZsYWdzPy5Db0M3Py5jb2NpZEZsYWc/LmVyYXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGF3YWl0IGRvY3VtZW50LnVwZGF0ZSh7XG4gICAgICAgICAgJ2ZsYWdzLkNvQzcuY29jaWRGbGFnLmVyYXMnOiB7XG4gICAgICAgICAgICBbcHJvcGVydHlJZF06IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCBkb2N1bWVudC51cGRhdGUoe1xuICAgICAgICAgIFtgZmxhZ3MuQ29DNy5jb2NpZEZsYWcuZXJhcy4ke3Byb3BlcnR5SWR9YF06IHRydWVcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgZG9jdW1lbnQudXBkYXRlKHtcbiAgICAgICAgW2BmbGFncy5Db0M3LmNvY2lkRmxhZy5lcmFzLi09JHtwcm9wZXJ0eUlkfWBdOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9vbkNsaWNrVG9nZ2xlIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBwcm9wZXJ0eUlkID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnByb3BlcnR5XG4gICAgYXdhaXQgQ29DSURFZGl0b3IuZXJhVG9nZ2xlKHRoaXMub2JqZWN0LCBwcm9wZXJ0eUlkKVxuICAgIGNvbnN0IG9wdGlvbnMgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLm9wdGlvbnMpXG4gICAgYXdhaXQgdGhpcy5jbG9zZSgpXG4gICAgYXdhaXQgdGhpcy5yZW5kZXIodHJ1ZSwgb3B0aW9ucylcbiAgfVxuXG4gIGFzeW5jIF91cGRhdGVPYmplY3QgKGV2ZW50LCBmb3JtRGF0YSkge1xuICAgIGNvbnN0IGlkID0gZm9ybURhdGEuaWQgfHwgJydcbiAgICBhd2FpdCB0aGlzLm9iamVjdC51cGRhdGUoe1xuICAgICAgJ2ZsYWdzLkNvQzcuY29jaWRGbGFnLmlkJzogaWQsXG4gICAgICAnZmxhZ3MuQ29DNy5jb2NpZEZsYWcubGFuZyc6IGZvcm1EYXRhLmxhbmcgfHwgZ2FtZS5pMThuLmxhbmcsXG4gICAgICAnZmxhZ3MuQ29DNy5jb2NpZEZsYWcucHJpb3JpdHknOiBmb3JtRGF0YS5wcmlvcml0eSB8fCAwLFxuICAgICAgJ2ZsYWdzLkNvQzcuY29jaWRGbGFnLmVyYXMnOiAodGhpcy5vYmplY3QuZmxhZ3M/LkNvQzc/LmNvY2lkRmxhZz8uZXJhcyA/PyB7fSlcbiAgICB9KVxuICAgIGNvbnN0IGh0bWwgPSAkKHRoaXMub2JqZWN0LnNoZWV0LmVsZW1lbnQpLmZpbmQoJ2hlYWRlci53aW5kb3ctaGVhZGVyIGEuaGVhZGVyLWJ1dHRvbi5lZGl0LWNvYy1pZC13YXJuaW5nLGhlYWRlci53aW5kb3ctaGVhZGVyIGEuaGVhZGVyLWJ1dHRvbi5lZGl0LWNvYy1pZC1leGlzaXRpbmcnKVxuICAgIGlmIChodG1sLmxlbmd0aCkge1xuICAgICAgaHRtbC5jc3Moe1xuICAgICAgICBjb2xvcjogKGlkID8gJ3ZhcigtLWNvbG9yLXRleHQtbGlnaHQtaGlnaGxpZ2h0KScgOiAncmVkJylcbiAgICAgIH0pXG4gICAgfVxuICAgIHRoaXMucmVuZGVyKClcbiAgfVxufVxuIiwiLyogZ2xvYmFsIGdhbWUgKi9cbmltcG9ydCB7IENvQ0lERWRpdG9yIH0gZnJvbSAnLi4vYXBwcy9jb2MtaWQtZWRpdG9yLmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbiAoaGVhZGVyQnV0dG9ucywgc2hlZXQpIHtcbiAgaWYgKGdhbWUudXNlci5pc0dNKSB7XG4gICAgY29uc3Qgc2hlZXRDb0NJRCA9IHNoZWV0Lm9iamVjdC5mbGFncz8uQ29DNz8uY29jaWRGbGFnXG4gICAgY29uc3Qgbm9JZCA9ICh0eXBlb2Ygc2hlZXRDb0NJRCA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHNoZWV0Q29DSUQuaWQgPT09ICd1bmRlZmluZWQnIHx8IHNoZWV0Q29DSUQuaWQgPT09ICcnKVxuICAgIGNvbnN0IENvQ0lERWRpdG9yQnV0dG9uID0ge1xuICAgICAgY2xhc3M6IChub0lkID8gJ2VkaXQtY29jLWlkLXdhcm5pbmcnIDogJ2VkaXQtY29jLWlkLWV4aXNpdGluZycpLFxuICAgICAgbGFiZWw6ICdDb0M3LkNvQ0lERmxhZy5pZCcsXG4gICAgICBpY29uOiAnZmFzIGZhLWZpbmdlcnByaW50JyxcbiAgICAgIG9uY2xpY2s6ICgpID0+IHtcbiAgICAgICAgbmV3IENvQ0lERWRpdG9yKHNoZWV0Lm9iamVjdCwge30pLnJlbmRlcih0cnVlLCB7IGZvY3VzOiB0cnVlIH0pXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG51bWJlck9mQnV0dG9ucyA9IGhlYWRlckJ1dHRvbnMubGVuZ3RoXG4gICAgaGVhZGVyQnV0dG9ucy5zcGxpY2UobnVtYmVyT2ZCdXR0b25zIC0gMSwgMCwgQ29DSURFZGl0b3JCdXR0b24pXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCAkLGdhbWUgKi9cbmV4cG9ydCBjbGFzcyBDb0M3Q29udGV4dE1lbnUge1xuICBiaW5kIChtZW51LCBodG1sLCBjYWxsYmFjaykge1xuICAgIHRoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2tcbiAgICB0aGlzLl9odG1sID0gaHRtbFxuICAgIHRoaXMuX21lbnUgPSBtZW51XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG1lbnVUcmlnZ2VyID0gaHRtbC5maW5kKGBbZGF0YS1jb250ZXh0LW1lbnU9JHttZW51LmlkfV1gKSAvLyBGaW5kIGFsbCBtZW51IHRyaWdnZXJzLlxuICAgICAgaWYgKG1lbnVUcmlnZ2VyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC8vIElmIHRoZXJlIGlzIG5vIHRyaWdnZXIsIGRvIG5vdCBjb250aW51ZS5cbiAgICAgIG1lbnVUcmlnZ2VyLmNvbnRleHRtZW51KHRoaXMuX29uQ29udGV4dE1lbnUuYmluZCh0aGlzKSkgLy8gQXR0YWNoIHRoZSBoYW5kbGVyLlxuICAgICAgY29uc3QgbWVudUVsZW1lbnQgPSBDb0M3Q29udGV4dE1lbnUuQ3JlYXRlTWVudShtZW51KSAvLyBCdWlsZCB0aGUgbWVudVxuICAgICAgbWVudUVsZW1lbnQub24oJ2NsaWNrJyxcbiAgICAgICAgJy5tZW51LWFjdGlvbicsXG4gICAgICAgIHRoaXMuX29uTWVudUFjdGlvbi5iaW5kKHRoaXMpKVxuICAgICAgLy8gY29uc3QgZG9jdW1lbnRNZW51ID0gdGhpcy5tZW51Q29udGFpbmVyLmZpbmQoYC5jb250ZXh0LW1lbnUtd3JhcHBlci4ke21lbnUuaWR9YClcbiAgICAgIGlmICh0aGlzLm1lbnUubGVuZ3RoICE9PSAwKSB0aGlzLm1lbnUucmVwbGFjZVdpdGgobWVudUVsZW1lbnQpXG4gICAgICBlbHNlIHRoaXMubWVudUNvbnRhaW5lci5hcHBlbmQobWVudUVsZW1lbnQpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpXG4gICAgfVxuICB9XG5cbiAgZ2V0IG1lbnVDb250YWluZXIgKCkge1xuICAgIGxldCBtZW51Q29udGFpbmVyID0gdGhpcy5faHRtbC5maW5kKCcubWVudS1jb250YWluZXInKVxuICAgIGlmIChtZW51Q29udGFpbmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5faHRtbC5hcHBlbmQoJzxkaXYgY2xhc3M9XCJtZW51LWNvbnRhaW5lclwiPjwvZGl2PicpXG4gICAgICBtZW51Q29udGFpbmVyID0gdGhpcy5faHRtbC5maW5kKCcubWVudS1jb250YWluZXInKVxuICAgIH1cbiAgICByZXR1cm4gbWVudUNvbnRhaW5lclxuICB9XG5cbiAgZ2V0IG1lbnUgKCkge1xuICAgIC8vIGNvbnN0IG1lbnVDb250YWluZXIgPSB0aGlzLm1lbnVDb250YWluZXJcbiAgICAvLyBpZiAoIW1lbnVDb250YWluZXIgfHwgbWVudUNvbnRhaW5lci5sZW5ndGggPT09IDApIHJldHVybiBudWxsXG4gICAgcmV0dXJuIHRoaXMubWVudUNvbnRhaW5lci5maW5kKGAuY29udGV4dC1tZW51LXdyYXBwZXIuJHt0aGlzLl9tZW51LmlkfWApXG4gIH1cblxuICBfb25NZW51QWN0aW9uIChldmVudCkge1xuICAgIC8vIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICAvLyBpZiAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYnJhbmNoJykpIHJldHVyblxuICAgIHJldHVybiB0aGlzLl9jYWxsYmFjayhldmVudCwgdGhpcy50YXJnZXQpXG4gIH1cblxuICBzdGF0aWMgY2xvc2VBbGwgKCkge1xuICAgIGNvbnN0IG1lbnVDb250YWluZXJzID0gJCgnYm9keScpLmZpbmQoJy5tZW51LWNvbnRhaW5lcicpXG4gICAgY29uc3QgbWVudXMgPSBtZW51Q29udGFpbmVycy5maW5kKCcuY29udGV4dC1tZW51LXdyYXBwZXInKVxuICAgIG1lbnVzLmVhY2goZnVuY3Rpb24gKGksIG0pIHsgbS5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbicgfSlcbiAgICAvLyBib2R5LmZpbmQoJy5tZW51LXdyYXBwZXInKS5oaWRlKClcbiAgfVxuXG4gIF9vbkNvbnRleHRNZW51IChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KHRydWUpXG4gICAgQ29DN0NvbnRleHRNZW51LmNsb3NlQWxsKCkgLy8gT25seSAxIG1lbnUgY2FuIGJlIG9wZW4uXG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQ/LmN1cnJlbnRUYXJnZXRcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldFxuICAgIGlmICghdGFyZ2V0KSByZXR1cm5cbiAgICBjb25zdCBtZW51TmFtZSA9IHRhcmdldC5kYXRhc2V0Py5jb250ZXh0TWVudVxuICAgIGlmIChtZW51TmFtZSA9PT0gdGhpcy5fbWVudS5pZCkge1xuICAgICAgY29uc3Qgd3JhcHBlciA9IHRoaXMubWVudVxuICAgICAgaWYgKHdyYXBwZXIubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBzdWJNZW51ID0gd3JhcHBlci5maW5kKCcuc3ViLW1lbnUnKVxuICAgICAgICBsZXQgbGVmdCA9IGV2ZW50LmNsaWVudFhcbiAgICAgICAgbGV0IHRvcCA9IGV2ZW50LmNsaWVudFlcbiAgICAgICAgY29uc3QgbWVudUhlaWdodCA9IHdyYXBwZXIub3V0ZXJIZWlnaHQoKVxuICAgICAgICBjb25zdCBtZW51V2lkdGggPSB3cmFwcGVyLm91dGVyV2lkdGgoKVxuICAgICAgICBpZiAod2luZG93LmlubmVySGVpZ2h0IDwgbWVudUhlaWdodCArIHRvcCkge1xuICAgICAgICAgIHRvcCA9IHRvcCAtIG1lbnVIZWlnaHRcbiAgICAgICAgfVxuICAgICAgICBpZiAod2luZG93LmlubmVyV2lkdGggPCBtZW51V2lkdGggKyBsZWZ0KSB7XG4gICAgICAgICAgbGVmdCA9IHdpbmRvdy5pbm5lcldpZHRoIC0gbWVudVdpZHRoXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1Yk1lbnUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8IG1lbnVXaWR0aCArIGxlZnQgKyBzdWJNZW51Lm91dGVyV2lkdGgoKSkge1xuICAgICAgICAgICAgc3ViTWVudS5jc3Moe1xuICAgICAgICAgICAgICByaWdodDogYCR7bWVudVdpZHRoIC0gNX1weGAsXG4gICAgICAgICAgICAgIGxlZnQ6ICcnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdWJNZW51LmNzcyh7XG4gICAgICAgICAgICAgIGxlZnQ6IGAke21lbnVXaWR0aCAtIDV9cHhgLFxuICAgICAgICAgICAgICByaWdodDogJydcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHdyYXBwZXIuY3NzKHtcbiAgICAgICAgICBsZWZ0OiBgJHtsZWZ0fXB4YCxcbiAgICAgICAgICB0b3A6IGAke3RvcH1weGAsXG4gICAgICAgICAgdmlzaWJpbGl0eTogJ3Zpc2libGUnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGNhblNlZSAodmlzaWJpbGl0eSkge1xuICAgIHN3aXRjaCAodmlzaWJpbGl0eS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICBjYXNlICdnbSc6XG4gICAgICAgIHJldHVybiBnYW1lLnVzZXIuaXNHTVxuICAgICAgY2FzZSAndHJ1c3RlZCc6XG4gICAgICAgIHJldHVybiBnYW1lLnVzZXIuaXNUcnVzdGVkXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBDcmVhdGVNZW51IChtZW51KSB7XG4gICAgY29uc3QgY2xhc3NlcyA9IHR5cGVvZiBtZW51LmNsYXNzZXMgPT09ICdzdHJpbmcnID8gW21lbnUuY2xhc3Nlc10gOiBtZW51LmNsYXNzZXNcbiAgICBjbGFzc2VzLnB1c2goJ2NvbnRleHQtbWVudS13cmFwcGVyJylcbiAgICBjb25zdCB3cmFwcGVyID0gJCgnPGRpdj48L2Rpdj4nKVxuICAgIHdyYXBwZXIuYWRkQ2xhc3MobWVudS5pZClcbiAgICBjbGFzc2VzLmZvckVhY2goYyA9PiB3cmFwcGVyLmFkZENsYXNzKGMpKVxuICAgIGlmIChtZW51LnNlY3Rpb24pIHtcbiAgICAgIG1lbnUuc2VjdGlvbi5mb3JFYWNoKHMgPT4ge1xuICAgICAgICBjb25zdCBzZWN0aW9uID0gQ29DN0NvbnRleHRNZW51LkNyZWF0ZVNlY3Rpb24ocywgeyBtdWx0aTogdHJ1ZSB9KVxuICAgICAgICBpZiAoc2VjdGlvbikgd3JhcHBlci5hcHBlbmQoc2VjdGlvbilcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNlY3Rpb24gPSBDb0M3Q29udGV4dE1lbnUuQ3JlYXRlU2VjdGlvbihtZW51KVxuICAgICAgaWYgKHNlY3Rpb24pIHdyYXBwZXIuYXBwZW5kKHNlY3Rpb24pXG4gICAgfVxuICAgIHJldHVybiB3cmFwcGVyXG4gIH1cblxuICBzdGF0aWMgQ3JlYXRlU2VjdGlvbiAocywgeyBtdWx0aSA9IGZhbHNlLCBzdWJNZW51ID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgaWYgKCFzLml0ZW1zKSByZXR1cm4gbnVsbFxuICAgIGlmIChzLnZpc2liaWxpdHkgJiYgIUNvQzdDb250ZXh0TWVudS5jYW5TZWUocy52aXNpYmlsaXR5KSkgcmV0dXJuIG51bGxcbiAgICBjb25zdCBjbGFzc2VzID0gcy5jbGFzc2VzID8gdHlwZW9mIHMuY2xhc3NlcyA9PT0gJ3N0cmluZycgPyBbcy5jbGFzc2VzXSA6IHMuY2xhc3NlcyA6IFtdXG4gICAgaWYgKG11bHRpKSBjbGFzc2VzLnB1c2goJ21lbnUtc2VjdGlvbicpXG4gICAgaWYgKHN1Yk1lbnUpIGNsYXNzZXMucHVzaCgnc3ViLW1lbnUnKVxuICAgIGNvbnN0IHNlY3Rpb24gPSAkKCc8dWw+PC91bD4nKVxuICAgIGNsYXNzZXMuZm9yRWFjaChjID0+IHNlY3Rpb24uYWRkQ2xhc3MoYykpXG4gICAgcy5pdGVtcy5mb3JFYWNoKGkgPT4ge1xuICAgICAgY29uc3QgbGkgPSAkKCc8bGk+PC9saT4nKVxuICAgICAgbGkuYWRkQ2xhc3MoJ21lbnUtaXRlbScpXG4gICAgICBpZiAoaS5hY3Rpb24pIHtcbiAgICAgICAgbGkuYWRkQ2xhc3MoJ21lbnUtYWN0aW9uJylcbiAgICAgICAgbGkuYXR0cignZGF0YS1hY3Rpb24nLCBpLmFjdGlvbilcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgaS5sYWJlbCA9PT0gJ3N0cmluZycpIGxpLmFwcGVuZChgPHNwYW4+JHtpLmxhYmVsfTwvc3Bhbj5gKVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmIChpLmxhYmVsLmljb24pIGxpLmFwcGVuZChgPGkgY2xhc3M9XCIke2kubGFiZWwuaWNvbn1cIj48L2k+YClcbiAgICAgICAgaWYgKGkubGFiZWwudGV4dCkgbGkuYXBwZW5kKGA8c3Bhbj4ke2kubGFiZWwudGV4dH08L3NwYW4+YClcbiAgICAgIH1cbiAgICAgIGlmIChpLnN1Yk1lbnUpIHtcbiAgICAgICAgbGkuYWRkQ2xhc3MoJ3N1Yi1tZW51LWJ1dHRvbicpXG4gICAgICAgIGxpLmFwcGVuZCgnPGkgY2xhc3M9XCJmYXMgZmEtY2FyZXQtcmlnaHRcIj48L2k+JylcbiAgICAgICAgY29uc3Qgc3ViID0gQ29DN0NvbnRleHRNZW51LkNyZWF0ZVNlY3Rpb24oaS5zdWJNZW51LCB7IHN1Yk1lbnU6IHRydWUgfSlcbiAgICAgICAgaWYgKHN1YikgbGkuYXBwZW5kKHN1YilcbiAgICAgIH1cbiAgICAgIHNlY3Rpb24uYXBwZW5kKGxpKVxuICAgIH0pXG4gICAgcmV0dXJuIHNlY3Rpb25cbiAgfVxufVxuIiwiLyogZ2xvYmFsICQsIEFjdG9yU2hlZXQsIENoYXRNZXNzYWdlLCBDT05TVCwgRGlhbG9nLCBGb3JtRGF0YSwgZm91bmRyeSwgZ2FtZSwgSG9va3MsIFJvbGwsIFRleHRFZGl0b3IsIHVpICovXG5pbXBvcnQgeyBhZGRDb0NJRFNoZWV0SGVhZGVyQnV0dG9uIH0gZnJvbSAnLi4vLi4vc2NyaXB0cy9jb2MtaWQtYnV0dG9uLmpzJ1xuaW1wb3J0IHsgUm9sbERpYWxvZyB9IGZyb20gJy4uLy4uL2FwcHMvcm9sbC1kaWFsb2cuanMnXG5pbXBvcnQgeyBDb0M3Q2hhdE1lc3NhZ2UgfSBmcm9tICcuLi8uLi9hcHBzL2NvYzctY2hhdC1tZXNzYWdlLmpzJ1xuaW1wb3J0IHsgQ29DN0NoZWNrIH0gZnJvbSAnLi4vLi4vY2hlY2suanMnXG5pbXBvcnQgeyBDb0M3Q29udGVudExpbmtEaWFsb2cgfSBmcm9tICcuLi8uLi9hcHBzL2NvYzctY29udGVudC1saW5rLWRpYWxvZy5qcydcbmltcG9ydCB7IENPQzcgfSBmcm9tICcuLi8uLi9jb25maWcuanMnXG5pbXBvcnQgeyBDb0M3SXRlbSB9IGZyb20gJy4uLy4uL2l0ZW1zL2l0ZW0uanMnXG5pbXBvcnQgeyBDb0M3TWVsZWVJbml0aWF0b3IgfSBmcm9tICcuLi8uLi9jaGF0L2NvbWJhdC9tZWxlZS1pbml0aWF0b3IuanMnXG5pbXBvcnQgeyBDb0M3UmFuZ2VJbml0aWF0b3IgfSBmcm9tICcuLi8uLi9jaGF0L3JhbmdlY29tYmF0LmpzJ1xuaW1wb3J0IHsgQ29DN0NvbkNoZWNrIH0gZnJvbSAnLi4vLi4vY2hhdC9jb25jaGVjay5qcydcbmltcG9ydCB7IGNoYXRIZWxwZXIsIGlzQ3RybEtleSB9IGZyb20gJy4uLy4uL2NoYXQvaGVscGVyLmpzJ1xuaW1wb3J0IHsgQ29DN0xpbmsgfSBmcm9tICcuLi8uLi9hcHBzL2NvYzctbGluay5qcydcbmltcG9ydCB7IERhbWFnZUNhcmQgfSBmcm9tICcuLi8uLi9jaGF0L2NhcmRzL2RhbWFnZS5qcydcbmltcG9ydCBDb0M3QWN0aXZlRWZmZWN0IGZyb20gJy4uLy4uL2FjdGl2ZS1lZmZlY3QuanMnXG5pbXBvcnQgeyBDb0M3Q29udGV4dE1lbnUgfSBmcm9tICcuLi8uLi9jb250ZXh0LW1lbnUuanMnXG5pbXBvcnQgeyBDb0M3VXRpbGl0aWVzIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzLmpzJ1xuXG4vKipcbiAqIEV4dGVuZCB0aGUgYmFzaWMgQWN0b3JTaGVldCB3aXRoIHNvbWUgdmVyeSBzaW1wbGUgbW9kaWZpY2F0aW9uc1xuICovXG5leHBvcnQgY2xhc3MgQ29DN0FjdG9yU2hlZXQgZXh0ZW5kcyBBY3RvclNoZWV0IHtcbiAgX2dldEhlYWRlckJ1dHRvbnMgKCkge1xuICAgIGNvbnN0IGhlYWRlckJ1dHRvbnMgPSBzdXBlci5fZ2V0SGVhZGVyQnV0dG9ucygpXG4gICAgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbihoZWFkZXJCdXR0b25zLCB0aGlzKVxuICAgIHJldHVybiBoZWFkZXJCdXR0b25zXG4gIH1cblxuICBhc3luYyBnZXREYXRhICgpIHtcbiAgICBjb25zdCBzaGVldERhdGEgPSBhd2FpdCBzdXBlci5nZXREYXRhKClcblxuICAgIHNoZWV0RGF0YS5zaG93SGlkZGVuRGV2TWVudSA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2hpZGRlbmRldm1lbnUnKVxuXG4gICAgc2hlZXREYXRhLmNhbkRyYWdUb2tlbiA9ICEhdGhpcy50b2tlbiAmJiBnYW1lLnVzZXIuaXNHTVxuICAgIHNoZWV0RGF0YS5saW5rZWRBY3RvciA9IHRoaXMuYWN0b3IucHJvdG90eXBlVG9rZW4/LmFjdG9yTGluayA9PT0gdHJ1ZVxuICAgIHNoZWV0RGF0YS5pc1Rva2VuID0gdGhpcy5hY3Rvci5pc1Rva2VuXG4gICAgc2hlZXREYXRhLml0ZW1zQnlUeXBlID0ge31cbiAgICBzaGVldERhdGEuc2tpbGxzID0ge31cbiAgICBzaGVldERhdGEuY29tYmF0U2tpbGxzID0ge31cbiAgICBzaGVldERhdGEud2VhcG9ucyA9IHt9XG4gICAgc2hlZXREYXRhLnJhbmdlV3BuID0gW11cbiAgICBzaGVldERhdGEubWVsZWVXcG4gPSBbXVxuICAgIHNoZWV0RGF0YS5hY3RvckZsYWdzID0ge31cblxuICAgIHNoZWV0RGF0YS5lZmZlY3RzID1cbiAgICAgIHRoaXMuYWN0b3IudHlwZSA9PT0gJ2NoYXJhY3RlcidcbiAgICAgICAgPyBDb0M3QWN0aXZlRWZmZWN0LnByZXBhcmVBY3RpdmVFZmZlY3RDYXRlZ29yaWVzKHRoaXMuYWN0b3IuZWZmZWN0cylcbiAgICAgICAgOiBDb0M3QWN0aXZlRWZmZWN0LnByZXBhcmVOUENBY3RpdmVFZmZlY3RDYXRlZ29yaWVzKHRoaXMuYWN0b3IuZWZmZWN0cylcblxuICAgIHNoZWV0RGF0YS5wZXJtaXNzaW9uTGltaXRlZCA9ICFnYW1lLnVzZXIuaXNHTSAmJiAodGhpcy5hY3Rvci5vd25lcnNoaXBbZ2FtZS51c2VyLmlkXSA/PyB0aGlzLmFjdG9yLm93bmVyc2hpcC5kZWZhdWx0KSA9PT0gQ09OU1QuRE9DVU1FTlRfT1dORVJTSElQX0xFVkVMUy5MSU1JVEVEXG5cbiAgICBzaGVldERhdGEuaXNLZWVwZXIgPSBnYW1lLnVzZXIuaXNHTVxuICAgIHNoZWV0RGF0YS5hbGxvd1VubG9jayA9XG4gICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdwbGF5ZXJVbmxvY2tTaGVldE1vZGUnKSA9PT0gJ2Fsd2F5cycgfHxcbiAgICAgIGdhbWUudXNlci5pc0dNIHx8XG4gICAgICAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAncGxheWVyVW5sb2NrU2hlZXRNb2RlJykgPT09ICdjcmVhdGlvbicgJiZcbiAgICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnY2hhckNyZWF0aW9uRW5hYmxlZCcpKVxuICAgIGlmIChcbiAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3BsYXllclVubG9ja1NoZWV0TW9kZScpID09PSAnY3JlYXRpb24nICYmXG4gICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdjaGFyQ3JlYXRpb25FbmFibGVkJylcbiAgICApIHtcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5mbGFncy5sb2NrZWQgPSBmYWxzZVxuICAgIH1cblxuICAgIGlmICh0aGlzLmFjdG9yLnR5cGUgIT09ICd2ZWhpY2xlJykge1xuICAgICAgaWYgKCFzaGVldERhdGEuZGF0YS5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzKSB7XG4gICAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MgPSB7XG4gICAgICAgICAgc3RyOiB7XG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIHNob3J0OiAnQ0hBUkFDLlNUUicsXG4gICAgICAgICAgICBsYWJlbDogJ0NIQVJBQy5TdHJlbmd0aCcsXG4gICAgICAgICAgICBmb3JtdWxhOiBudWxsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb246IHtcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgICAgc2hvcnQ6ICdDSEFSQUMuQ09OJyxcbiAgICAgICAgICAgIGxhYmVsOiAnQ0hBUkFDLkNvbnN0aXR1dGlvbicsXG4gICAgICAgICAgICBmb3JtdWxhOiBudWxsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzaXo6IHtcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgICAgc2hvcnQ6ICdDSEFSQUMuU0laJyxcbiAgICAgICAgICAgIGxhYmVsOiAnQ0hBUkFDLlNpemUnLFxuICAgICAgICAgICAgZm9ybXVsYTogbnVsbFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGV4OiB7XG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIHNob3J0OiAnQ0hBUkFDLkRFWCcsXG4gICAgICAgICAgICBsYWJlbDogJ0NIQVJBQy5EZXh0ZXJpdHknLFxuICAgICAgICAgICAgZm9ybXVsYTogbnVsbFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYXBwOiB7XG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIHNob3J0OiAnQ0hBUkFDLkFQUCcsXG4gICAgICAgICAgICBsYWJlbDogJ0NIQVJBQy5BcHBlYXJhbmNlJyxcbiAgICAgICAgICAgIGZvcm11bGE6IG51bGxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGludDoge1xuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICBzaG9ydDogJ0NIQVJBQy5JTlQnLFxuICAgICAgICAgICAgbGFiZWw6ICdDSEFSQUMuSW50ZWxsaWdlbmNlJyxcbiAgICAgICAgICAgIGZvcm11bGE6IG51bGxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHBvdzoge1xuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICBzaG9ydDogJ0NIQVJBQy5QT1cnLFxuICAgICAgICAgICAgbGFiZWw6ICdDSEFSQUMuUG93ZXInLFxuICAgICAgICAgICAgZm9ybXVsYTogbnVsbFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZWR1OiB7XG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIHNob3J0OiAnQ0hBUkFDLkVEVScsXG4gICAgICAgICAgICBsYWJlbDogJ0NIQVJBQy5FZHVjYXRpb24nLFxuICAgICAgICAgICAgZm9ybXVsYTogbnVsbFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXNoZWV0RGF0YS5kYXRhLnN5c3RlbS5hdHRyaWJzKSB7XG4gICAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5hdHRyaWJzID0ge1xuICAgICAgICAgIGhwOiB7XG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIG1heDogbnVsbCxcbiAgICAgICAgICAgIHNob3J0OiAnSFAnLFxuICAgICAgICAgICAgbGFiZWw6ICdIaXQgcG9pbnRzJyxcbiAgICAgICAgICAgIGF1dG86IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1wOiB7XG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIG1heDogbnVsbCxcbiAgICAgICAgICAgIHNob3J0OiAnSFAnLFxuICAgICAgICAgICAgbGFiZWw6ICdNYWdpYyBwb2ludHMnLFxuICAgICAgICAgICAgYXV0bzogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbGNrOiB7IHZhbHVlOiBudWxsLCBzaG9ydDogJ0xDSycsIGxhYmVsOiAnTHVjaycgfSxcbiAgICAgICAgICBzYW46IHtcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgICAgbWF4OiA5OSxcbiAgICAgICAgICAgIHNob3J0OiAnU0FOJyxcbiAgICAgICAgICAgIGxhYmVsOiAnU2FuaXR5JyxcbiAgICAgICAgICAgIGF1dG86IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1vdjoge1xuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICBzaG9ydDogJ01PVicsXG4gICAgICAgICAgICBsYWJlbDogJ01vdmVtZW50IHJhdGUnLFxuICAgICAgICAgICAgYXV0bzogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGI6IHtcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgICAgc2hvcnQ6ICdEQicsXG4gICAgICAgICAgICBsYWJlbDogJ0RhbWFnZSBib251cycsXG4gICAgICAgICAgICBhdXRvOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBidWlsZDoge1xuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICBzaG9ydDogJ0JMRCcsXG4gICAgICAgICAgICBsYWJlbDogJ0J1aWxkJyxcbiAgICAgICAgICAgIGF1dG86IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFybW9yOiB7IHZhbHVlOiBudWxsLCBhdXRvOiBmYWxzZSB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFzaGVldERhdGEuZGF0YS5zeXN0ZW0uYmlvZ3JhcGh5KSB7XG4gICAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5iaW9ncmFwaHkgPSB7XG4gICAgICAgICAgcGVyc29uYWxEZXNjcmlwdGlvbjogeyB0eXBlOiAnc3RyaW5nJywgdmFsdWU6ICcnIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXNoZWV0RGF0YS5kYXRhLnN5c3RlbS5pbmZvcykge1xuICAgICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uaW5mb3MgPSB7XG4gICAgICAgICAgb2NjdXBhdGlvbjogJycsXG4gICAgICAgICAgYWdlOiAnJyxcbiAgICAgICAgICBzZXg6ICcnLFxuICAgICAgICAgIHJlc2lkZW5jZTogJycsXG4gICAgICAgICAgYmlydGhwbGFjZTogJycsXG4gICAgICAgICAgYXJjaGV0eXBlOiAnJyxcbiAgICAgICAgICBvcmdhbml6YXRpb246ICcnLFxuICAgICAgICAgIHBsYXllcm5hbWU6ICcnXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFzaGVldERhdGEuZGF0YS5zeXN0ZW0uZmxhZ3MpIHtcbiAgICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmZsYWdzID0geyBsb2NrZWQ6IHRydWUsIG1hbnVhbENyZWRpdDogZmFsc2UgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXNoZWV0RGF0YS5kYXRhLnN5c3RlbS5jcmVkaXQpIHtcbiAgICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmNyZWRpdCA9IHtcbiAgICAgICAgICBtb25ldGFyeVN5bWJvbDogbnVsbCxcbiAgICAgICAgICBtdWx0aXBsaWVyOiBudWxsLFxuICAgICAgICAgIHNwZW50OiBudWxsLFxuICAgICAgICAgIGFzc2V0c0RldGFpbHM6IG51bGxcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXNoZWV0RGF0YS5kYXRhLnN5c3RlbS5kZXZlbG9wbWVudCkge1xuICAgICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGV2ZWxvcG1lbnQgPSB7XG4gICAgICAgICAgcGVyc29uYWw6IG51bGwsXG4gICAgICAgICAgb2NjdXBhdGlvbjogbnVsbCxcbiAgICAgICAgICBhcmNoZXR5cGU6IG51bGxcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXNoZWV0RGF0YS5kYXRhLnN5c3RlbS5iaW9ncmFwaHkpIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5iaW9ncmFwaHkgPSBbXVxuXG4gICAgICBzaGVldERhdGEucHVscFJ1bGVBcmNoZXR5cGUgPSBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdwdWxwUnVsZUFyY2hldHlwZScpXG4gICAgICBzaGVldERhdGEucHVscFJ1bGVPcmdhbml6YXRpb24gPSBnYW1lLnNldHRpbmdzLmdldChcbiAgICAgICAgJ0NvQzcnLFxuICAgICAgICAncHVscFJ1bGVPcmdhbml6YXRpb24nXG4gICAgICApXG4gICAgfVxuXG4gICAgc2hlZXREYXRhLmlzRGVhZCA9IHRoaXMuYWN0b3IuZGVhZFxuICAgIHNoZWV0RGF0YS5pc0R5aW5nID0gdGhpcy5hY3Rvci5keWluZ1xuXG4gICAgaWYgKHNoZWV0RGF0YS5pdGVtcykge1xuICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHNoZWV0RGF0YS5pdGVtcykge1xuICAgICAgICAvLyBzaSBjJ2VzdCB1bmUgZm9ybXVsZSBldCBxdSdvbiBwZXV0IGwnZXZhbHVlclxuICAgICAgICAvLyBjZSBibG9jIGRldnJhaXQgZXRyZSBkw6lwbGFjw6kgZGFucyBsZSBibG9jIF91cGRhdGVGb3JtRGF0YVxuICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnc2tpbGwnKSB7XG4gICAgICAgICAgaWYgKGl0ZW0uc3lzdGVtLnByb3BlcnRpZXMuc3BlY2lhbCkge1xuICAgICAgICAgICAgaWYgKGl0ZW0uc3lzdGVtLnByb3BlcnRpZXMuZmlnaHRpbmcpIHtcbiAgICAgICAgICAgICAgaXRlbS5zeXN0ZW0uc3BlY2lhbGl6YXRpb24gPSBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAgICAgJ0NvQzcuRmlnaHRpbmdTcGVjaWFsaXphdGlvbk5hbWUnXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdGVtLnN5c3RlbS5wcm9wZXJ0aWVzLmZpcmVhcm0pIHtcbiAgICAgICAgICAgICAgaXRlbS5zeXN0ZW0uc3BlY2lhbGl6YXRpb24gPSBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAgICAgJ0NvQzcuRmlyZWFybVNwZWNpYWxpemF0aW9uTmFtZSdcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGl0ZW0uc3lzdGVtLnByb3BlcnRpZXMucmFuZ2VkKSB7XG4gICAgICAgICAgICAgIGl0ZW0uc3lzdGVtLnNwZWNpYWxpemF0aW9uID0gZ2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgICAgICAgICdDb0M3LlJhbmdlZFNwZWNpYWxpemF0aW9uTmFtZSdcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLmFjdG9yLnR5cGUgIT09ICdjaGFyYWN0ZXInKSB7XG4gICAgICAgICAgICBpZiAoaXNOYU4oTnVtYmVyKGl0ZW0uc3lzdGVtLnZhbHVlKSkpIHtcbiAgICAgICAgICAgICAgbGV0IHZhbHVlID0gbnVsbFxuICAgICAgICAgICAgICBjb25zdCBwYXJzZWQgPSB7fVxuICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhcbiAgICAgICAgICAgICAgICBDT0M3LmZvcm11bGEuYWN0b3JzaGVldFxuICAgICAgICAgICAgICApKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleS5zdGFydHNXaXRoKCdAJykgJiYgdmFsdWUuc3RhcnRzV2l0aCgndGhpcy4nKSkge1xuICAgICAgICAgICAgICAgICAgcGFyc2VkW2tleS5zdWJzdHJpbmcoMSldID0gZm91bmRyeS51dGlscy5nZXRQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUuc3Vic3RyaW5nKDUpXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSAoXG4gICAgICAgICAgICAgICAgICBhd2FpdCBuZXcgUm9sbChpdGVtLnN5c3RlbS52YWx1ZSwgcGFyc2VkKS5ldmFsdWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGFzeW5jOiB0cnVlXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICkudG90YWxcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FcnJvclVuYWJsZVRvUGFyc2VTa2lsbEZvcm11bGEnLCB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpdGVtLnN5c3RlbS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogaXRlbS5uYW1lXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG51bGxcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGl0ZW0uc3lzdGVtLnZhbHVlID0gdmFsdWVcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtVG9VcGRhdGUgPSB0aGlzLmFjdG9yLml0ZW1zLmdldChpdGVtLl9pZClcbiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oXG4gICAgICAgICAgICAgICAgICBgW0NPQzddIChBY3Rvcjoke3RoaXMubmFtZX0pIEV2YWx1YXRpbmcgc2tpbGwgJHtpdGVtLm5hbWV9OiR7aXRlbS5zeXN0ZW0udmFsdWV9IHRvICR7dmFsdWV9YFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBhd2FpdCBpdGVtVG9VcGRhdGUudXBkYXRlKHtcbiAgICAgICAgICAgICAgICAgICdzeXN0ZW0udmFsdWUnOiB2YWx1ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgc2tpbGwgPSB0aGlzLmFjdG9yLml0ZW1zLmdldChpdGVtLl9pZClcbiAgICAgICAgICAgIGNvbnN0IHsgYmFzZSwgcmF3VmFsdWUsIHZhbHVlIH0gPSBza2lsbC5zeXN0ZW1cblxuICAgICAgICAgICAgLy8gQXNzdW1lIGZhbGxiYWNrIHZhbHVlcywgdXNlZnVsIGZvciBpbml0aWFsIHNldHVwIG9mIHNraWxsc1xuICAgICAgICAgICAgaXRlbS5zeXN0ZW0ucmF3VmFsdWUgPSByYXdWYWx1ZSB8fCB2YWx1ZSB8fCBiYXNlXG4gICAgICAgICAgICBpdGVtLnN5c3RlbS52YWx1ZSA9IHZhbHVlIHx8IGJhc2VcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgc2tpbGwgPSB0aGlzLmFjdG9yLml0ZW1zLmdldChpdGVtLl9pZClcbiAgICAgICAgICAgIGl0ZW0uc3lzdGVtLmJhc2UgPSBhd2FpdCBza2lsbC5hc3luY0Jhc2UoKVxuXG4gICAgICAgICAgICBpZiAoaXRlbS5zeXN0ZW0udmFsdWUpIHtcbiAgICAgICAgICAgICAgLy8gVGhpcyBzaG91bGQgYmUgcGFydCBvZiBtaWdyYXRpb24gb3IgZG9uZSBhdCBpbml0ICFcbiAgICAgICAgICAgICAgLy8gV2FzIGRvbmUgd2hlbiBza2lsbCB2YWx1ZSB3YXMgY2hhbmdlZCB0byBiYXNlICsgYWRqdXN0ZW1lbnRcbiAgICAgICAgICAgICAgY29uc3QgZXhwID0gaXRlbS5zeXN0ZW0uYWRqdXN0bWVudHM/LmV4cGVyaWVuY2VcbiAgICAgICAgICAgICAgICA/IHBhcnNlSW50KGl0ZW0uc3lzdGVtLmFkanVzdG1lbnRzLmV4cGVyaWVuY2UpXG4gICAgICAgICAgICAgICAgOiAwXG4gICAgICAgICAgICAgIGxldCB1cGRhdGVkRXhwID0gZXhwICsgcGFyc2VJbnQoaXRlbS5zeXN0ZW0udmFsdWUpIC0gc2tpbGwudmFsdWVcbiAgICAgICAgICAgICAgaWYgKHVwZGF0ZWRFeHAgPD0gMCkgdXBkYXRlZEV4cCA9IG51bGxcbiAgICAgICAgICAgICAgY29uc29sZS5pbmZvKFxuICAgICAgICAgICAgICAgIGBbQ09DN10gVXBkYXRpbmcgc2tpbGwgJHtza2lsbC5uYW1lfSBleHBlcmllbmNlLiBFeHBlcmllbmNlIG1pc3Npbmc6ICR7dXBkYXRlZEV4cH1gXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hY3Rvci51cGRhdGVFbWJlZGRlZERvY3VtZW50cygnSXRlbScsIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBfaWQ6IGl0ZW0uX2lkLFxuICAgICAgICAgICAgICAgICAgJ3N5c3RlbS5hZGp1c3RtZW50cy5leHBlcmllbmNlJzogdXBkYXRlZEV4cCxcbiAgICAgICAgICAgICAgICAgICdzeXN0ZW0udmFsdWUnOiBudWxsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICBpZiAoIWl0ZW0uc3lzdGVtLmFkanVzdG1lbnRzKSBpdGVtLnN5c3RlbS5hZGp1c3RtZW50cyA9IHt9XG4gICAgICAgICAgICAgIGl0ZW0uc3lzdGVtLmFkanVzdG1lbnRzLmV4cGVyaWVuY2UgPSB1cGRhdGVkRXhwXG4gICAgICAgICAgICAgIGl0ZW0uc3lzdGVtLnJhd1ZhbHVlID0gc2tpbGwucmF3VmFsdWVcbiAgICAgICAgICAgICAgaXRlbS5zeXN0ZW0udmFsdWUgPSBza2lsbC52YWx1ZSAvLyBBQ1RJVkVfRUZGRUNUIG5lY2Vzc2FyeSB0byBhcHBseSBlZmZlY3RzXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpdGVtLnN5c3RlbS52YWx1ZSA9IHNraWxsLnZhbHVlIC8vIEFDVElWRV9FRkZFQ1QgbmVjZXNzYXJ5IHRvIGFwcGx5IGVmZmVjdHNcbiAgICAgICAgICAgICAgaXRlbS5zeXN0ZW0ucmF3VmFsdWUgPSBza2lsbC5yYXdWYWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBsaXN0ID0gc2hlZXREYXRhLml0ZW1zQnlUeXBlW2l0ZW0udHlwZV1cbiAgICAgICAgaWYgKCFsaXN0KSB7XG4gICAgICAgICAgbGlzdCA9IFtdXG4gICAgICAgICAgc2hlZXREYXRhLml0ZW1zQnlUeXBlW2l0ZW0udHlwZV0gPSBsaXN0XG4gICAgICAgIH1cbiAgICAgICAgbGlzdC5wdXNoKGl0ZW0pXG4gICAgICB9XG5cbiAgICAgIGZvciAoY29uc3QgaXRlbVR5cGUgaW4gc2hlZXREYXRhLml0ZW1zQnlUeXBlKSB7XG4gICAgICAgIHNoZWV0RGF0YS5pdGVtc0J5VHlwZVtpdGVtVHlwZV0uc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG4gICAgICB9XG5cbiAgICAgIC8vIHJlZG9uZGFudCBhdmVjIG1hdHJpY2UgaXRlbWJ5dHlwZVxuICAgICAgc2hlZXREYXRhLnNraWxscyA9IHNoZWV0RGF0YS5pdGVtc1xuICAgICAgICAuZmlsdGVyKGl0ZW0gPT4gaXRlbS50eXBlID09PSAnc2tpbGwnKVxuICAgICAgICAuc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG5cbiAgICAgIHNoZWV0RGF0YS5tZWxlZVNraWxscyA9IHNoZWV0RGF0YS5za2lsbHMuZmlsdGVyKFxuICAgICAgICBza2lsbCA9PlxuICAgICAgICAgIHNraWxsLnN5c3RlbS5wcm9wZXJ0aWVzLmNvbWJhdCA9PT0gdHJ1ZSAmJlxuICAgICAgICAgIHNraWxsLnN5c3RlbS5wcm9wZXJ0aWVzLmZpZ2h0aW5nID09PSB0cnVlXG4gICAgICApXG4gICAgICBzaGVldERhdGEucmFuZ2VTa2lsbHMgPSBzaGVldERhdGEuc2tpbGxzLmZpbHRlcihcbiAgICAgICAgc2tpbGwgPT5cbiAgICAgICAgICBza2lsbC5zeXN0ZW0ucHJvcGVydGllcy5jb21iYXQgPT09IHRydWUgJiZcbiAgICAgICAgICAoc2tpbGwuc3lzdGVtLnByb3BlcnRpZXMuZmlyZWFybSA9PT0gdHJ1ZSB8fCBza2lsbC5zeXN0ZW0ucHJvcGVydGllcy5yYW5nZWQgPT09IHRydWUpXG4gICAgICApXG5cbiAgICAgIGNvbnN0IGNidFNraWxscyA9IHNoZWV0RGF0YS5za2lsbHMuZmlsdGVyKFxuICAgICAgICBza2lsbCA9PiBza2lsbC5zeXN0ZW0ucHJvcGVydGllcy5jb21iYXQgPT09IHRydWVcbiAgICAgIClcbiAgICAgIGlmIChjYnRTa2lsbHMpIHtcbiAgICAgICAgZm9yIChjb25zdCBza2lsbCBvZiBjYnRTa2lsbHMpIHtcbiAgICAgICAgICBzaGVldERhdGEuY29tYmF0U2tpbGxzW3NraWxsLl9pZF0gPSBza2lsbFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHdlYXBvbnMgPSBzaGVldERhdGEuaXRlbXNCeVR5cGUud2VhcG9uXG5cbiAgICAgIGlmICh3ZWFwb25zKSB7XG4gICAgICAgIGZvciAoY29uc3Qgd2VhcG9uIG9mIHdlYXBvbnMpIHtcbiAgICAgICAgICB3ZWFwb24udXNlc0FsdGVybmF0ZVNraWxsID1cbiAgICAgICAgICAgIHdlYXBvbi5zeXN0ZW0ucHJvcGVydGllcy5hdXRvID09PSB0cnVlIHx8XG4gICAgICAgICAgICB3ZWFwb24uc3lzdGVtLnByb3BlcnRpZXMuYnJzdCA9PT0gdHJ1ZVxuICAgICAgICAgIGlmICghd2VhcG9uLnN5c3RlbS5hbW1vKSB3ZWFwb24uc3lzdGVtLmFtbW8gPSAwXG5cbiAgICAgICAgICB3ZWFwb24uc2tpbGxTZXQgPSB0cnVlXG4gICAgICAgICAgLy8gd2VhcG9uLnN5c3RlbS5za2lsbC5tYWluLm5hbWUgPSAnJztcbiAgICAgICAgICAvLyB3ZWFwb24uc3lzdGVtLnNraWxsLm1haW4udmFsdWUgPSAwO1xuICAgICAgICAgIC8vIHdlYXBvbi5zeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5uYW1lID0gJyc7XG4gICAgICAgICAgLy8gd2VhcG9uLnN5c3RlbS5za2lsbC5hbHRlcm5hdGl2LnZhbHVlID0gMDtcbiAgICAgICAgICBpZiAod2VhcG9uLnN5c3RlbS5za2lsbC5tYWluLmlkID09PSAnJykge1xuICAgICAgICAgICAgLy8gVE9ETyA6IHNpIGwnSUQgbidlc3RzIHBhcyBkw6lmaW5pZSBtYWlzIHF1J3VuIG5vbSBhIMOpdMOpIGRvbm7DqSwgdXRpbGlzZXIgY2Ugbm9tIGV0IHRhbnRlciBkZSByZXRyb3V2ZXIgbGUgc2tpbGxcbiAgICAgICAgICAgIHdlYXBvbi5za2lsbFNldCA9IGZhbHNlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRPRE8gOiBhdmFudCBkJ2Fzc2lnZXIgbGUgc2tpbGwgdsOpcmlmaWVyIHF1J2lsIGV4aXN0ZSB0b3Vqb3Vycy5cbiAgICAgICAgICAgIC8vIHNpIGlsIG4nZXhpc3RlIHBsdXMgaWwgZmF1dCBsZSByZXRyb3V2ZXIgb3UgcGFzc2VyIHNraWxsc2V0IGEgZmFsc2UuXG4gICAgICAgICAgICBpZiAoc2hlZXREYXRhLmNvbWJhdFNraWxsc1t3ZWFwb24uc3lzdGVtLnNraWxsLm1haW4uaWRdKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHNraWxsID0gdGhpcy5hY3Rvci5pdGVtcy5nZXQod2VhcG9uLnN5c3RlbS5za2lsbC5tYWluLmlkKVxuICAgICAgICAgICAgICB3ZWFwb24uc3lzdGVtLnNraWxsLm1haW4ubmFtZSA9IHNraWxsLnN5c3RlbS5za2lsbE5hbWVcbiAgICAgICAgICAgICAgd2VhcG9uLnN5c3RlbS5za2lsbC5tYWluLnZhbHVlID0gc2tpbGwudmFsdWVcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdlYXBvbi5za2lsbFNldCA9IGZhbHNlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh3ZWFwb24uc3lzdGVtLnNraWxsLmFsdGVybmF0aXYuaWQgIT09ICcnKSB7XG4gICAgICAgICAgICAgIGlmIChzaGVldERhdGEuY29tYmF0U2tpbGxzW3dlYXBvbi5zeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5pZF0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBza2lsbCA9IHRoaXMuYWN0b3IuaXRlbXMuZ2V0KFxuICAgICAgICAgICAgICAgICAgd2VhcG9uLnN5c3RlbS5za2lsbC5hbHRlcm5hdGl2LmlkXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHdlYXBvbi5zeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5uYW1lID0gc2tpbGwuc3lzdGVtLnNraWxsTmFtZVxuICAgICAgICAgICAgICAgIHdlYXBvbi5zeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi52YWx1ZSA9IHNraWxsLnZhbHVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB3ZWFwb24uc3lzdGVtLl9wcm9wZXJ0aWVzID0gW11cbiAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhDT0M3LndlYXBvblByb3BlcnRpZXMpKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IHt9XG4gICAgICAgICAgICBwcm9wZXJ0eS5pZCA9IGtleVxuICAgICAgICAgICAgcHJvcGVydHkubmFtZSA9IHZhbHVlXG4gICAgICAgICAgICBwcm9wZXJ0eS52YWx1ZSA9IHdlYXBvbi5zeXN0ZW0ucHJvcGVydGllc1trZXldID09PSB0cnVlXG4gICAgICAgICAgICB3ZWFwb24uc3lzdGVtLl9wcm9wZXJ0aWVzLnB1c2gocHJvcGVydHkpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2hlZXREYXRhLndlYXBvbnNbd2VhcG9uLl9pZF0gPSB3ZWFwb25cbiAgICAgICAgICBpZiAod2VhcG9uLnN5c3RlbS5wcm9wZXJ0aWVzLnJuZ2QpIHNoZWV0RGF0YS5yYW5nZVdwbi5wdXNoKHdlYXBvbilcbiAgICAgICAgICBlbHNlIHNoZWV0RGF0YS5tZWxlZVdwbi5wdXNoKHdlYXBvbilcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCB0b2tlbiA9IHRoaXMudG9rZW5cbiAgICAgIHNoZWV0RGF0YS50b2tlbklkID0gdG9rZW5cbiAgICAgICAgPyBgJHt0b2tlbi5wYXJlbnQ/LmlkID8gdG9rZW4ucGFyZW50LmlkIDogJ1RPS0VOJ30uJHt0b2tlbi5pZH1gXG4gICAgICAgIDogbnVsbCAvLyBSRUZBQ1RPUklORyAoMilcblxuICAgICAgc2hlZXREYXRhLmhhc0VtcHR5VmFsdWVXaXRoRm9ybXVsYSA9IGZhbHNlXG4gICAgICBpZiAoc2hlZXREYXRhLmRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcykge1xuICAgICAgICBmb3IgKGNvbnN0IGNoYXJhY3RlcmlzdGljIG9mIE9iamVjdC52YWx1ZXMoc2hlZXREYXRhLmRhdGEuc3lzdGVtLmNoYXJhY3RlcmlzdGljcykpIHtcbiAgICAgICAgICBpZiAoIWNoYXJhY3RlcmlzdGljLnZhbHVlKSBjaGFyYWN0ZXJpc3RpYy5lZGl0YWJsZSA9IHRydWVcbiAgICAgICAgICBjaGFyYWN0ZXJpc3RpYy5oYXJkID0gTWF0aC5mbG9vcihjaGFyYWN0ZXJpc3RpYy52YWx1ZSAvIDIpXG4gICAgICAgICAgY2hhcmFjdGVyaXN0aWMuZXh0cmVtZSA9IE1hdGguZmxvb3IoY2hhcmFjdGVyaXN0aWMudmFsdWUgLyA1KVxuXG4gICAgICAgICAgLy8gSWYgbm8gdmFsdWUgJiYgbm8gZm9ybXVsYSBkb24ndCBkaXNwbGF5IGNoYXJhYy5cbiAgICAgICAgICBpZiAoIWNoYXJhY3RlcmlzdGljLnZhbHVlICYmICFjaGFyYWN0ZXJpc3RpYy5mb3JtdWxhKSB7XG4gICAgICAgICAgICBjaGFyYWN0ZXJpc3RpYy5kaXNwbGF5ID0gZmFsc2VcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hhcmFjdGVyaXN0aWMuZGlzcGxheSA9IHRydWVcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBpZiBhbnkgY2hhcmFjdGVyaXN0aWMgaGFzIG5vIHZhbHVlIGJ1dCBoYXMgYSBmb3JtdWxhLlxuICAgICAgICAgIGlmICghY2hhcmFjdGVyaXN0aWMudmFsdWUgJiYgY2hhcmFjdGVyaXN0aWMuZm9ybXVsYSkge1xuICAgICAgICAgICAgY2hhcmFjdGVyaXN0aWMuaGFzRW1wdHlWYWx1ZVdpdGhGb3JtdWxhID0gdHJ1ZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHNoZWV0RGF0YS5oYXNFbXB0eVZhbHVlV2l0aEZvcm11bGEgPVxuICAgICAgICAgICAgc2hlZXREYXRhLmhhc0VtcHR5VmFsdWVXaXRoRm9ybXVsYSB8fFxuICAgICAgICAgICAgY2hhcmFjdGVyaXN0aWMuaGFzRW1wdHlWYWx1ZVdpdGhGb3JtdWxhXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGb3IgY29tcGF0IHdpdGggcHJldmlvdXMgY2hhcmFjdGVycyB0ZXN0IGlmIGF1dG8gaXMgZGVmaW5pZWQsIGlmIG5vdCB3ZSBkZWZpbmUgaXRcbiAgICBpZiAoIVsndmVoaWNsZScsICdjb250YWluZXInXS5pbmNsdWRlcyh0aGlzLmFjdG9yLnR5cGUpKSB7XG4gICAgICBjb25zdCBhdXRvID0gdGhpcy5hY3Rvci5jaGVja1VuZGVmaW5lZEF1dG8oKVxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtID0gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzaGVldERhdGEuZGF0YS5zeXN0ZW0sIGF1dG8pXG4gICAgfSBlbHNlIHtcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5hdHRyaWJzLmhwLmF1dG8gPSBmYWxzZVxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmF0dHJpYnMubXAuYXV0byA9IGZhbHNlXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uYXR0cmlicy5zYW4uYXV0byA9IGZhbHNlXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uYXR0cmlicy5tb3YuYXV0byA9IGZhbHNlXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uYXR0cmlicy5kYi5hdXRvID0gZmFsc2VcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5hdHRyaWJzLmJ1aWxkLmF1dG8gPSBmYWxzZVxuICAgIH1cblxuICAgIGlmIChzaGVldERhdGEuZGF0YS5zeXN0ZW0uYXR0cmlicy5tcC52YWx1ZSA8IDApIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5hdHRyaWJzLm1wLnZhbHVlID0gbnVsbFxuICAgIGlmIChzaGVldERhdGEuZGF0YS5zeXN0ZW0uYXR0cmlicy5zYW4udmFsdWUgPCAwKSBzaGVldERhdGEuZGF0YS5zeXN0ZW0uYXR0cmlicy5zYW4udmFsdWUgPSBudWxsXG5cbiAgICBpZiAoIVsndmVoaWNsZSddLmluY2x1ZGVzKHRoaXMuYWN0b3IudHlwZSkpIHtcbiAgICAgIGlmIChzaGVldERhdGEuZGF0YS5zeXN0ZW0uYmlvZ3JhcGh5IGluc3RhbmNlb2YgQXJyYXkgJiYgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmJpb2dyYXBoeS5sZW5ndGgpIHtcbiAgICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmJpb2dyYXBoeVswXS5pc0ZpcnN0ID0gdHJ1ZVxuICAgICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uYmlvZ3JhcGh5W3NoZWV0RGF0YS5kYXRhLnN5c3RlbS5iaW9ncmFwaHkubGVuZ3RoIC0gMV0uaXNMYXN0ID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeUl0ZW1zID0gZmFsc2VcbiAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeUJvb2tzID0gZmFsc2VcbiAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeVNwZWxscyA9IGZhbHNlXG4gICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlUYWxlbnRzID0gZmFsc2VcbiAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeVN0YXR1c2VzID0gZmFsc2VcbiAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeVdlYXBvbnMgPSBmYWxzZVxuXG4gICAgc2hlZXREYXRhLmhhc0NvbmRpdGlvbnMgPVxuICAgICAgdGhpcy5hY3Rvci5lZmZlY3RzLnNpemUgPiAwIHx8XG4gICAgICAodHlwZW9mIHRoaXMuYWN0b3Iuc3lzdGVtLmNvbmRpdGlvbnMgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuYWN0b3Iuc3lzdGVtLmNvbmRpdGlvbnMpLmZpbHRlcihcbiAgICAgICAgICBjb25kaXRpb24gPT4gdGhpcy5hY3Rvci5zeXN0ZW0uY29uZGl0aW9uc1tjb25kaXRpb25dLnZhbHVlXG4gICAgICAgICkubGVuZ3RoID4gMClcblxuICAgIHJldHVybiBzaGVldERhdGFcbiAgfVxuXG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4gIC8vIHN0YXRpYyBwYXJzZUZvcm11bGEgKGZvcm11bGEpIHtcbiAgLy8gICBsZXQgcGFyc2VkRm9ybXVsYSA9IGZvcm11bGFcbiAgLy8gICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhDT0M3LmZvcm11bGEuYWN0b3JzaGVldCkpIHtcbiAgLy8gICAgIHBhcnNlZEZvcm11bGEgPSBwYXJzZWRGb3JtdWxhLnJlcGxhY2Uoa2V5LCB2YWx1ZSlcbiAgLy8gICB9XG4gIC8vICAgcmV0dXJuIHBhcnNlZEZvcm11bGFcbiAgLy8gfVxuXG4gIGdldCB0b2tlbktleSAoKSB7XG4gICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcignREVQUkVDQVRFRCBTSE9VTEQgTk9UIEhBUFBFTiEnKVxuICAgIHRocm93IG5ldyBFcnJvcignYmFzZS5qcyBnZXQgdG9rZW5LZXkoKTogREVQUkVDQVRFRCBTSE9VTEQgTk9UIEhBUFBFTiEnKVxuICAgIC8vIGlmKCB0aGlzLnRva2VuKSByZXR1cm4gYCR7dGhpcy50b2tlbi5zY2VuZT8uX2lkP3RoaXMudG9rZW4uc2NlbmUuX2lkOidUT0tFTid9LiR7dGhpcy50b2tlbi5kYXRhLl9pZH1gOyAgLy9SRUZBQ1RPUklORyAoMilcbiAgICAvLyByZXR1cm4gdGhpcy5hY3Rvci5pZDtcbiAgfVxuXG4gIG9uQ2xvc2VTaGVldCAoKSB7XG4gICAgLy8gdGhpcy5hY3Rvci5sb2NrZWQgPSB0cnVlO1xuICB9XG5cbiAgLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuICAvKipcbiAgICogQWN0aXZhdGUgZXZlbnQgbGlzdGVuZXJzIHVzaW5nIHRoZSBwcmVwYXJlZCBzaGVldCBIVE1MXG4gICAqIEBwYXJhbSBodG1sIHtIVE1MfSAgIFRoZSBwcmVwYXJlZCBIVE1MIG9iamVjdCByZWFkeSB0byBiZSByZW5kZXJlZCBpbnRvIHRoZSBET01cbiAgICovXG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcblxuICAgIGh0bWwuZmluZCgnLnNlY3Rpb24taGVhZGVyJykuY2xpY2sodGhpcy5fb25TZWN0aW9uSGVhZGVyLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCcuaXRlbXMtaGVhZGVyJykuY2xpY2sodGhpcy5fb25JdGVtSGVhZGVyLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCcuaW52ZW50b3J5LWhlYWRlcicpLmNsaWNrKHRoaXMuX29uSW52ZW50b3J5SGVhZGVyLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCcucmVhZC1vbmx5JykuZGJsY2xpY2sodGhpcy5fdG9nZ2xlUmVhZE9ubHkuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJy5hZGQtYW1tbycpLmNsaWNrKHRoaXMuX29uQWRkQW1vLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCcucmVsb2FkLXdlYXBvbicpLmNsaWNrKGV2ZW50ID0+IHRoaXMuX29uUmVsb2FkV2VhcG9uKGV2ZW50KSlcbiAgICBodG1sLmZpbmQoJy5yZWxvYWQtd2VhcG9uJykub24oJ2NvbnRleHRtZW51JywgZXZlbnQgPT4gdGhpcy5fb25SZWxvYWRXZWFwb24oZXZlbnQpKVxuXG4gICAgLy8gT3duZXIgT25seSBMaXN0ZW5lcnNcbiAgICBpZiAodGhpcy5hY3Rvci5pc093bmVyICYmICEodGhpcy5hY3Rvci5jb21wZW5kaXVtPy5sb2NrZWQgPz8gZmFsc2UpKSB7XG4gICAgICBodG1sLmZpbmQoJy5sb2NrJykuY2xpY2sodGhpcy5fb25Mb2NrQ2xpY2tlZC5iaW5kKHRoaXMpKVxuICAgICAgaHRtbC5maW5kKCcuZmxhZycpLmNsaWNrKHRoaXMuX29uRmxhZ0NsaWNrZWQuYmluZCh0aGlzKSlcbiAgICAgIGh0bWwuZmluZCgnLmZvcm11bGEnKS5jbGljayh0aGlzLl9vbkZvcm11bGFDbGlja2VkLmJpbmQodGhpcykpXG4gICAgICBodG1sLmZpbmQoJy5hdXRvLXRvZ2dsZScpLmNsaWNrKHRoaXMuX29uQXV0b1RvZ2dsZS5iaW5kKHRoaXMpKVxuICAgIH1cblxuICAgIC8vIE93bmVyIE9ubHksIG5vdCBhdmFpbGFibGUgZnJvbSBjb21wZW5kaXVtXG4gICAgaWYgKHRoaXMuYWN0b3IuaXNPd25lciAmJiB0eXBlb2YgdGhpcy5hY3Rvci5jb21wZW5kaXVtID09PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3VzZUNvbnRleHRNZW51cycpKSB7XG4gICAgICAgIGlmICghdGhpcy5tZW51cykgdGhpcy5tZW51cyA9IFtdXG5cbiAgICAgICAgY29uc3Qgcm9sbE1lbnUgPSB7XG4gICAgICAgICAgaWQ6ICdza2lsbC1yb2xsJyxcbiAgICAgICAgICBjbGFzc2VzOiAncm9sbC1tZW51JyxcbiAgICAgICAgICBzZWN0aW9uOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNsYXNzZXM6ICdtYWluJyxcbiAgICAgICAgICAgICAgaXRlbXM6IFtcbiAgICAgICAgICAgICAgICB7IGFjdGlvbjogJ3JvbGwnLCBsYWJlbDogJ1JvbGwnIH0sXG4gICAgICAgICAgICAgICAgeyBhY3Rpb246ICdvcHBvc2VkLXJvbGwnLCBsYWJlbDogJ09wcG9zZWQgcm9sbCcgfSxcbiAgICAgICAgICAgICAgICB7IGFjdGlvbjogJ2NvbWJpbmVkLXJvbGwnLCBsYWJlbDogJ0NvbWJpbmVkIHJvbGwnIH1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgY2xhc3NlczogJ2tlZXBlcicsXG4gICAgICAgICAgICAgIHZpc2liaWxpdHk6ICdnbScsXG4gICAgICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbGFiZWw6IHsgaWNvbjogJ2ZhcyBmYS1saW5rJywgdGV4dDogJ0xpbmsnIH0sXG4gICAgICAgICAgICAgICAgICBzdWJNZW51OiB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICAgICAgICAgICAgeyBhY3Rpb246ICdsaW5rLXRvb2wnLCBsYWJlbDogJ09wZW4gaW4gbGluayB0b29sJyB9LFxuICAgICAgICAgICAgICAgICAgICAgIHsgYWN0aW9uOiAnc2VuZC1jaGF0JywgbGFiZWw6ICdTZW5kIHRvIGNoYXQnIH0sXG4gICAgICAgICAgICAgICAgICAgICAgeyBhY3Rpb246ICdjb3B5LXRvLWNsaXBib2FyZCcsIGxhYmVsOiAnQ29weSB0byBjbGlwLWJvYXJkJyB9XG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHsgYWN0aW9uOiAncmVxdWVzdC1yb2xsJywgbGFiZWw6ICdSZXF1ZXN0IHJvbGwnIH1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNhbk1lbnUgPSB7XG4gICAgICAgICAgaWQ6ICdzYW4tcm9sbCcsXG4gICAgICAgICAgY2xhc3NlczogJ3JvbGwtbWVudScsXG4gICAgICAgICAgc2VjdGlvbjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBjbGFzc2VzOiAnbWFpbicsXG4gICAgICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICAgICAgeyBhY3Rpb246ICdlbmNvdW50ZXInLCBsYWJlbDogJ0VuY291bnRlcicgfSxcbiAgICAgICAgICAgICAgICB7IGFjdGlvbjogJ3JvbGwnLCBsYWJlbDogJ1JvbGwnIH0sXG4gICAgICAgICAgICAgICAgeyBhY3Rpb246ICdvcHBvc2VkLXJvbGwnLCBsYWJlbDogJ09wcG9zZWQgcm9sbCcgfSxcbiAgICAgICAgICAgICAgICB7IGFjdGlvbjogJ2NvbWJpbmVkLXJvbGwnLCBsYWJlbDogJ0NvbWJpbmVkIHJvbGwnIH1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgY2xhc3NlczogJ2tlZXBlcicsXG4gICAgICAgICAgICAgIHZpc2liaWxpdHk6ICd0cnVzdGVkJyxcbiAgICAgICAgICAgICAgaXRlbXM6IFtcbiAgICAgICAgICAgICAgICB7IGFjdGlvbjogJ3JlcXVlc3Qtcm9sbCcsIGxhYmVsOiAnUmVxdWVzdCByb2xsJyB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGxhYmVsOiB7IGljb246ICdmYXMgZmEtbGluaycsIHRleHQ6ICdMaW5rJyB9LFxuICAgICAgICAgICAgICAgICAgc3ViTWVudToge1xuICAgICAgICAgICAgICAgICAgICBpdGVtczogW1xuICAgICAgICAgICAgICAgICAgICAgIHsgYWN0aW9uOiAnbGluay10b29sJywgbGFiZWw6ICdPcGVuIGluIGxpbmsgdG9vbCcgfSxcbiAgICAgICAgICAgICAgICAgICAgICB7IGFjdGlvbjogJ3NlbmQtY2hhdCcsIGxhYmVsOiAnU2VuZCB0byBjaGF0JyB9LFxuICAgICAgICAgICAgICAgICAgICAgIHsgYWN0aW9uOiAnY29weS10by1jbGlwYm9hcmQnLCBsYWJlbDogJ0NvcHkgdG8gY2xpcC1ib2FyZCcgfSxcbiAgICAgICAgICAgICAgICAgICAgICB7IGFjdGlvbjogJ2xpbmstZW5jb3VudGVyJywgbGFiZWw6ICdFbmNvdW50ZXInIH1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJvbGxDb250ZXh0TWVudSA9IG5ldyBDb0M3Q29udGV4dE1lbnUoKVxuICAgICAgICByb2xsQ29udGV4dE1lbnUuYmluZChyb2xsTWVudSwgaHRtbCwgdGhpcy5fb25Db250ZXh0TWVudUNsaWNrLmJpbmQodGhpcykpXG4gICAgICAgIHRoaXMubWVudXMucHVzaChyb2xsQ29udGV4dE1lbnUpXG5cbiAgICAgICAgY29uc3Qgc2FuQ29udGV4dE1lbnUgPSBuZXcgQ29DN0NvbnRleHRNZW51KClcbiAgICAgICAgc2FuQ29udGV4dE1lbnUuYmluZChzYW5NZW51LCBodG1sLCB0aGlzLl9vbkNvbnRleHRNZW51Q2xpY2suYmluZCh0aGlzKSlcbiAgICAgICAgdGhpcy5tZW51cy5wdXNoKHNhbkNvbnRleHRNZW51KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaHRtbFxuICAgICAgICAgIC5maW5kKCcuY2hhcmFjdGVyaXN0aWMtbGFiZWwnKVxuICAgICAgICAgIC5jb250ZXh0bWVudSh0aGlzLl9vbk9wcG9zZWRSb2xsLmJpbmQodGhpcykpXG4gICAgICAgIGh0bWxcbiAgICAgICAgICAuZmluZCgnLnNraWxsLW5hbWUucm9sbGFibGUnKVxuICAgICAgICAgIC5jb250ZXh0bWVudSh0aGlzLl9vbk9wcG9zZWRSb2xsLmJpbmQodGhpcykpXG4gICAgICAgIGh0bWxcbiAgICAgICAgICAuZmluZCgnLmF0dHJpYnV0ZS1sYWJlbC5yb2xsYWJsZScpXG4gICAgICAgICAgLmNvbnRleHRtZW51KHRoaXMuX29uT3Bwb3NlZFJvbGwuYmluZCh0aGlzKSlcbiAgICAgIH1cblxuICAgICAgLy8gY29udGV4dCBtZW51IGJpbmRcbiAgICAgIGh0bWxcbiAgICAgICAgLmZpbmQoJy5jaGFyYWN0ZXJpc3RpYy1sYWJlbCcpXG4gICAgICAgIC5jbGljayh0aGlzLl9vblJvbGxDaGFyYWN0ZXJpdGljVGVzdC5iaW5kKHRoaXMpKVxuICAgICAgaHRtbC5maW5kKCcuc2tpbGwtbmFtZS5yb2xsYWJsZScpLmNsaWNrKHRoaXMuX29uUm9sbFNraWxsVGVzdC5iaW5kKHRoaXMpKVxuICAgICAgaHRtbC5maW5kKCcuc2tpbGwtaW1hZ2UnKS5jbGljayh0aGlzLl9vblJvbGxTa2lsbFRlc3QuYmluZCh0aGlzKSlcbiAgICAgIGh0bWxcbiAgICAgICAgLmZpbmQoJy5hdHRyaWJ1dGUtbGFiZWwucm9sbGFibGUnKVxuICAgICAgICAuY2xpY2sodGhpcy5fb25Sb2xsQXR0cmliVGVzdC5iaW5kKHRoaXMpKVxuXG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCcudG9rZW4tZHJhZy1oYW5kbGUnKVxuICAgICAgICAub24oJ2RyYWdzdGFydCcsIHRoaXMuX29uRHJhZ1Rva2VuU3RhcnQuYmluZCh0aGlzKSlcblxuICAgICAgaHRtbFxuICAgICAgICAuZmluZCgnLmNoYXJhY3RlcmlzdGljLWxhYmVsJylcbiAgICAgICAgLm9uKCdkcmFnc3RhcnQnLCBldmVudCA9PiB0aGlzLl9vbkRyYWdDaGFyYWN0ZXJpc3RpYyhldmVudCkpXG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCcuYXR0cmlidXRlLWxhYmVsJylcbiAgICAgICAgLm9uKCdkcmFnc3RhcnQnLCBldmVudCA9PiB0aGlzLl9vbkRyYWdBdHRyaWJ1dGUoZXZlbnQpKVxuICAgICAgaHRtbFxuICAgICAgICAuZmluZCgnLnNhbi1jaGVjaycpXG4gICAgICAgIC5vbignZHJhZ3N0YXJ0JywgZXZlbnQgPT4gdGhpcy5fb25EcmFnU2FuQ2hlY2soZXZlbnQpKVxuXG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCcud2VhcG9uLW5hbWUucm9sbGFibGUnKVxuICAgICAgICAuY29udGV4dG1lbnUodGhpcy5fb25PcHBvc2VkUm9sbC5iaW5kKHRoaXMpKVxuXG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCcucm9sbC1jaGFyYWN0ZXJpdGljcycpXG4gICAgICAgIC5jbGljayh0aGlzLl9vblJvbGxDaGFyYWN0ZXJpdGljc1ZhbHVlLmJpbmQodGhpcykpXG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCcuYXZlcmFnZS1jaGFyYWN0ZXJpdGljcycpXG4gICAgICAgIC5jbGljayh0aGlzLl9vbkF2ZXJhZ2VDaGFyYWN0ZXJpdGljc1ZhbHVlLmJpbmQodGhpcykpXG4gICAgICBodG1sLmZpbmQoJy50b2dnbGUtc3dpdGNoJykuY2xpY2sodGhpcy5fb25Ub2dnbGUuYmluZCh0aGlzKSlcblxuICAgICAgLy8gU3RhdHVzIG1vbml0b3JcbiAgICAgIGlmIChnYW1lLnVzZXIuaXNHTSB8fCBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdzdGF0dXNQbGF5ZXJFZGl0YWJsZScpKSB7XG4gICAgICAgIGh0bWwuZmluZCgnLnJlc2V0LWNvdW50ZXInKS5jbGljayh0aGlzLl9vblJlc2V0Q291bnRlci5iaW5kKHRoaXMpKVxuICAgICAgICBodG1sXG4gICAgICAgICAgLmZpbmQoJy5jb25kaXRpb24tbW9uaXRvcicpXG4gICAgICAgICAgLmNsaWNrKHRoaXMuX29uQ29uZGl0aW9uVG9nZ2xlLmJpbmQodGhpcykpXG4gICAgICAgIGh0bWwuZmluZCgnLmlzLWR5aW5nJykuY2xpY2sodGhpcy5oZWFsLmJpbmQodGhpcykpXG4gICAgICAgIGh0bWwuZmluZCgnLmlzLWRlYWQnKS5jbGljayh0aGlzLnJldml2ZS5iaW5kKHRoaXMpKVxuICAgICAgfVxuXG4gICAgICBodG1sLmZpbmQoJy5keWluZy1jaGVjaycpLmNsaWNrKHRoaXMuY2hlY2tGb3JEZWF0aC5iaW5kKHRoaXMpKVxuXG4gICAgICBodG1sLmZpbmQoJy5pdGVtIC5pdGVtLWltYWdlJykuY2xpY2soZXZlbnQgPT4gdGhpcy5fb25JdGVtUm9sbChldmVudCkpXG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCcud2VhcG9uLW5hbWUucm9sbGFibGUnKVxuICAgICAgICAuY2xpY2soZXZlbnQgPT4gdGhpcy5fb25XZWFwb25Sb2xsKGV2ZW50KSlcbiAgICAgIGh0bWxcbiAgICAgICAgLmZpbmQoJy5pdGVtLW5hbWUuZWZmZWN0LW5hbWUnKVxuICAgICAgICAuY2xpY2soZXZlbnQgPT4gdGhpcy5fb25FZmZlY3QoZXZlbnQpKVxuICAgICAgLy8gaHRtbFxuICAgICAgLy8gICAuZmluZCgnLml0ZW0tbmFtZS5lZmZlY3QtbmFtZScpXG4gICAgICAvLyAgIC5rZXlkb3duKChldmVudCkgPT4ge1xuICAgICAgLy8gICAgIGlmIChpc0N0cmxLZXkoZXZlbnQpKSB7XG4gICAgICAvLyAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ3BvaW50ZXInKVxuICAgICAgLy8gICAgIH1cbiAgICAgIC8vICAgfSlcbiAgICAgIC8vIGh0bWxcbiAgICAgIC8vICAgLmZpbmQoJy5pdGVtLW5hbWUuZWZmZWN0LW5hbWUnKVxuICAgICAgLy8gICAua2V5ZG93bigoZXZlbnQpID0+IHtcbiAgICAgIC8vICAgICBpZiAoaXNDdHJsS2V5KGV2ZW50KSkge1xuICAgICAgLy8gICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdwb2ludGVyJylcbiAgICAgIC8vICAgICB9XG4gICAgICAvLyAgIH0pXG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCcud2VhcG9uLXNraWxsLnJvbGxhYmxlJylcbiAgICAgICAgLmNsaWNrKGFzeW5jIGV2ZW50ID0+IHRoaXMuX29uV2VhcG9uU2tpbGxSb2xsKGV2ZW50KSlcbiAgICAgIGh0bWwub24oJ2NsaWNrJywgJy53ZWFwb24tZGFtYWdlJywgdGhpcy5fb25XZWFwb25EYW1hZ2UuYmluZCh0aGlzKSlcblxuICAgICAgY29uc3Qgd2hlZWxJbnB1dHMgPSBodG1sLmZpbmQoJy5hdHRyaWJ1dGUtdmFsdWUnKVxuICAgICAgZm9yIChjb25zdCB3aGVlbElucHV0IG9mIHdoZWVsSW5wdXRzKSB7XG4gICAgICAgIHdoZWVsSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCBldmVudCA9PiB0aGlzLl9vbldoZWVsKGV2ZW50KSwge1xuICAgICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBFdmVyeXRoaW5nIGJlbG93IGhlcmUgaXMgb25seSBuZWVkZWQgaWYgdGhlIHNoZWV0IGlzIGVkaXRhYmxlXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuZWRpdGFibGUpIHJldHVyblxuXG4gICAgaHRtbC5maW5kKCcuc2hvdy1kZXRhaWwnKS5jbGljayhldmVudCA9PiB0aGlzLl9vbkl0ZW1TdW1tYXJ5KGV2ZW50KSlcbiAgICBodG1sLmZpbmQoJy5pdGVtLXBvcHVwJykuY2xpY2sodGhpcy5fb25JdGVtUG9wdXAuYmluZCh0aGlzKSlcblxuICAgIC8vIFVwZGF0ZSBJbnZlbnRvcnkgSXRlbVxuICAgIGh0bWwuZmluZCgnLnNob3ctZGV0YWlsJykuZGJsY2xpY2soZXZlbnQgPT4gdGhpcy5fb25SZW5kZXJJdGVtU2hlZXQoZXZlbnQpKVxuICAgIGh0bWwuZmluZCgnLml0ZW0tZWRpdCcpLmNsaWNrKGV2ZW50ID0+IHRoaXMuX29uUmVuZGVySXRlbVNoZWV0KGV2ZW50KSlcblxuICAgIC8vIERlbGV0ZSBJbnZlbnRvcnkgSXRlbVxuICAgIGh0bWwuZmluZCgnLml0ZW0tZGVsZXRlJykuY2xpY2soYXN5bmMgZXYgPT4ge1xuICAgICAgY29uc3QgbGkgPSAkKGV2LmN1cnJlbnRUYXJnZXQpLnBhcmVudHMoJy5pdGVtJylcbiAgICAgIGNvbnN0IGl0ZW1Ub0RlbGV0ZSA9IHRoaXMuYWN0b3IuaXRlbXMuZ2V0KGxpLmRhdGEoJ2l0ZW1JZCcpLCB7XG4gICAgICAgIHN0cmljdDogdHJ1ZVxuICAgICAgfSlcbiAgICAgIGF3YWl0IGl0ZW1Ub0RlbGV0ZS5kZWxldGUoKVxuICAgICAgbGkuc2xpZGVVcCgyMDAsICgpID0+IHRoaXMucmVuZGVyKGZhbHNlKSlcbiAgICB9KVxuXG4gICAgaHRtbC5maW5kKCcuYWRkLWl0ZW0nKS5jbGljayhldiA9PiB7XG4gICAgICBldi5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgc3dpdGNoIChldi5jdXJyZW50VGFyZ2V0LmRhdGFzZXQudHlwZSkge1xuICAgICAgICBjYXNlICdib29rJzpcbiAgICAgICAgICB0aGlzLmFjdG9yLmNyZWF0ZUVtcHR5Qm9vayhldilcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdpdGVtJzpcbiAgICAgICAgICB0aGlzLmFjdG9yLmNyZWF0ZUVtcHR5SXRlbShldilcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdza2lsbCc6XG4gICAgICAgICAgdGhpcy5hY3Rvci5jcmVhdGVFbXB0eVNraWxsKGV2KVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ3NwZWxsJzpcbiAgICAgICAgICB0aGlzLmFjdG9yLmNyZWF0ZUVtcHR5U3BlbGwoZXYpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnd2VhcG9uJzpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge31cbiAgICAgICAgICAgIGlmIChldi5jdXJyZW50VGFyZ2V0LmRhdGFzZXQubWVsZWUpIHtcbiAgICAgICAgICAgICAgcHJvcGVydGllcy5tZWxlZSA9IHRydWVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXYuY3VycmVudFRhcmdldC5kYXRhc2V0LnJuZ2QpIHtcbiAgICAgICAgICAgICAgcHJvcGVydGllcy5ybmdkID0gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hY3Rvci5jcmVhdGVFbXB0eVdlYXBvbihldiwgcHJvcGVydGllcylcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLy8gaHRtbC5maW5kKCcuY2xlYW4tc2tpbGwtbGlzdCcpLmNsaWNrKCgpID0+IHtcbiAgICAvLyAgIHRoaXMuYWN0b3IuY2xlYW5Ta2lsbHMoKVxuICAgIC8vIH0pXG5cbiAgICBodG1sLmZpbmQoJy5pdGVtLXRyYWRlJykuY2xpY2sodGhpcy5fb25UcmFkZUl0ZW0uYmluZCh0aGlzKSlcblxuICAgIGh0bWwuZmluZCgnLmFkZC1uZXctc2VjdGlvbicpLmNsaWNrKCgpID0+IHtcbiAgICAgIHRoaXMuYWN0b3IuY3JlYXRlQmlvU2VjdGlvbigpXG4gICAgICB0aGlzLnJlbmRlcigpXG4gICAgfSlcblxuICAgIGh0bWwuZmluZCgnLmRlbGV0ZS1zZWN0aW9uJykuY2xpY2soZXYgPT4ge1xuICAgICAgY29uc3QgaW5kZXggPSBwYXJzZUludChcbiAgICAgICAgZXYuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuYmlvLXNlY3Rpb24nKS5kYXRhc2V0LmluZGV4XG4gICAgICApXG4gICAgICB0aGlzLmFjdG9yLmRlbGV0ZUJpb1NlY3Rpb24oaW5kZXgpXG4gICAgfSlcblxuICAgIGh0bWwuZmluZCgnLm1vdmUtc2VjdGlvbi11cCcpLmNsaWNrKGV2ID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoXG4gICAgICAgIGV2LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLmJpby1zZWN0aW9uJykuZGF0YXNldC5pbmRleFxuICAgICAgKVxuICAgICAgdGhpcy5hY3Rvci5tb3ZlQmlvU2VjdGlvblVwKGluZGV4KVxuICAgIH0pXG5cbiAgICBodG1sLmZpbmQoJy5tb3ZlLXNlY3Rpb24tZG93bicpLmNsaWNrKGV2ID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoXG4gICAgICAgIGV2LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLmJpby1zZWN0aW9uJykuZGF0YXNldC5pbmRleFxuICAgICAgKVxuICAgICAgdGhpcy5hY3Rvci5tb3ZlQmlvU2VjdGlvbkRvd24oaW5kZXgpXG4gICAgfSlcblxuICAgIGh0bWwuZmluZCgnLmRldmVsb3BtZW50LWZsYWcnKS5kYmxjbGljayhldiA9PiB7XG4gICAgICBjb25zdCBpdGVtID0gdGhpcy5hY3Rvci5pdGVtcy5nZXQoXG4gICAgICAgIGV2LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLml0ZW0nKS5kYXRhc2V0Lml0ZW1JZFxuICAgICAgKVxuICAgICAgaXRlbS50b2dnbGVJdGVtRmxhZygnZGV2ZWxvcGVtZW50JylcbiAgICB9KVxuXG4gICAgaHRtbC5maW5kKCcub2NjdXBhdGlvbi1za2lsbC1mbGFnLmNsaWNrYWJsZScpLmNsaWNrKGV2ID0+IHtcbiAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmFjdG9yLml0ZW1zLmdldChcbiAgICAgICAgZXYuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpLmRhdGFzZXQuaXRlbUlkXG4gICAgICApXG4gICAgICBpdGVtLnRvZ2dsZUl0ZW1GbGFnKCdvY2N1cGF0aW9uJylcbiAgICB9KVxuXG4gICAgaHRtbC5maW5kKCcuYXJjaGV0eXBlLXNraWxsLWZsYWcuY2xpY2thYmxlJykuY2xpY2soZXYgPT4ge1xuICAgICAgY29uc3QgaXRlbSA9IHRoaXMuYWN0b3IuaXRlbXMuZ2V0KFxuICAgICAgICBldi5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5pdGVtJykuZGF0YXNldC5pdGVtSWRcbiAgICAgIClcbiAgICAgIGl0ZW0udG9nZ2xlSXRlbUZsYWcoJ2FyY2hldHlwZScpXG4gICAgfSlcblxuICAgIGh0bWwuZmluZCgnLnNraWxsLWRldmVsb3BlbWVudCcpLmNsaWNrKGV2ZW50ID0+IHtcbiAgICAgIHRoaXMuYWN0b3IuZGV2ZWxvcGVtZW50UGhhc2UoZXZlbnQuc2hpZnRLZXkpXG4gICAgfSlcblxuICAgIGh0bWwuZmluZCgnLmx1Y2stZGV2ZWxvcG1lbnQnKS5jbGljayhldmVudCA9PiB7XG4gICAgICBpZiAoIWV2ZW50LmRldGFpbCB8fCBldmVudC5kZXRhaWwgPT09IDEpIHtcbiAgICAgICAgdGhpcy5hY3Rvci5kZXZlbG9wTHVjayhldmVudC5zaGlmdEtleSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgaHRtbC5maW5kKCcuY2xlYXJfY29uZGl0aW9ucycpLmNsaWNrKGV2ZW50ID0+IHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5hY3Rvci5zeXN0ZW0uY29uZGl0aW9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc3QgZGlzYWJsZSA9IHt9XG4gICAgICAgIGZvciAoY29uc3QgY29uZGl0aW9uIGluIHRoaXMuYWN0b3Iuc3lzdGVtLmNvbmRpdGlvbnMpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5hY3Rvci5zeXN0ZW0uY29uZGl0aW9uc1tjb25kaXRpb25dLnZhbHVlICE9PVxuICAgICAgICAgICAgICAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgdGhpcy5hY3Rvci5zeXN0ZW0uY29uZGl0aW9uc1tjb25kaXRpb25dLnZhbHVlID09PSB0cnVlXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBkaXNhYmxlW2BzeXN0ZW0uY29uZGl0aW9ucy4ke2NvbmRpdGlvbn0udmFsdWVgXSA9IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhkaXNhYmxlKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhpcy5hY3Rvci51cGRhdGUoZGlzYWJsZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgZWZmZWN0cyA9IHRoaXMuYWN0b3IuZWZmZWN0cy5tYXAoZWZmZWN0ID0+IGVmZmVjdC5pZClcbiAgICAgIGlmIChlZmZlY3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5hY3Rvci5kZWxldGVFbWJlZGRlZERvY3VtZW50cygnQWN0aXZlRWZmZWN0JywgZWZmZWN0cylcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBpcyB1c2VkIGZvciBkZXYgcHVycG9zZXMgb25seSAhXG4gICAgICovXG4gICAgaHRtbC5maW5kKCcudGVzdC10cmlnZ2VyJykuY2xpY2soYXN5bmMgZXZlbnQgPT4ge1xuICAgICAgaWYgKCFnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdoaWRkZW5kZXZtZW51JykpIHJldHVybiBudWxsXG4gICAgICAvLyBhd2FpdCBJdGVtLmNyZWF0ZSh7XG4gICAgICAvLyAgIG5hbWU6ICdfX0NvQzdJbnRlcm5hbEl0ZW1fXycsXG4gICAgICAvLyAgIHR5cGU6ICdpdGVtJ1xuICAgICAgLy8gfSlcbiAgICAgIC8vIGNvbnN0IGVmZmVjdHMgPSBhd2FpdCBpdGVtLmNyZWF0ZUVtYmVkZGVkRG9jdW1lbnRzKCdBY3RpdmVFZmZlY3QnLCBbXG4gICAgICAvLyAgIHtcbiAgICAgIC8vICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkVmZmVjdE5ldycpLFxuICAgICAgLy8gICAgIGljb246ICdpY29ucy9zdmcvYXVyYS5zdmcnLFxuICAgICAgLy8gICAgIG9yaWdpbjogbnVsbCxcbiAgICAgIC8vICAgICAnZHVyYXRpb24ucm91bmRzJzogdW5kZWZpbmVkLFxuICAgICAgLy8gICAgIGRpc2FibGVkOiB0cnVlXG4gICAgICAvLyAgIH1cbiAgICAgIC8vIF0pXG4gICAgICAvLyBjb25zdCBlZmZlY3QgPSBlZmZlY3RzWzBdXG4gICAgICAvLyBhd2FpdCBlZmZlY3Quc2hlZXQucmVuZGVyKHRydWUpXG4gICAgICAvLyB1aS5ub3RpZmljYXRpb25zLmluZm8oICdlZmZlY3QgY3JlYXRlZCAhJylcbiAgICAgIC8vIHVpLm5vdGlmaWNhdGlvbnMuaW5mbygnZWZmZWN0IGNyZWF0ZWQgIScpXG4gICAgfSlcblxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcuc2tpbGwtbmFtZS5yb2xsYWJsZScpXG4gICAgICAubW91c2VlbnRlcih0aGlzLnRvb2xUaXBTa2lsbEVudGVyLmJpbmQodGhpcykpXG4gICAgICAubW91c2VsZWF2ZShnYW1lLkNvQzdUb29sdGlwcy50b29sVGlwTGVhdmUuYmluZCh0aGlzKSlcbiAgICBodG1sXG4gICAgICAuZmluZCgnLmNoYXJhY3RlcmlzdGljLWxhYmVsJylcbiAgICAgIC5tb3VzZWVudGVyKHRoaXMudG9vbFRpcENoYXJhY3RlcmlzdGljRW50ZXIuYmluZCh0aGlzKSlcbiAgICAgIC5tb3VzZWxlYXZlKGdhbWUuQ29DN1Rvb2x0aXBzLnRvb2xUaXBMZWF2ZS5iaW5kKHRoaXMpKVxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcuYXR0cmlidXRlLWxhYmVsLnJvbGxhYmxlJylcbiAgICAgIC5tb3VzZWVudGVyKHRoaXMudG9vbFRpcEF0dHJpYnV0ZUVudGVyLmJpbmQodGhpcykpXG4gICAgICAubW91c2VsZWF2ZShnYW1lLkNvQzdUb29sdGlwcy50b29sVGlwTGVhdmUuYmluZCh0aGlzKSlcbiAgICBodG1sXG4gICAgICAuZmluZCgnLmF1dG8tdG9nZ2xlJylcbiAgICAgIC5tb3VzZWVudGVyKHRoaXMudG9vbFRpcEF1dG9FbnRlci5iaW5kKHRoaXMpKVxuICAgICAgLm1vdXNlbGVhdmUoZ2FtZS5Db0M3VG9vbHRpcHMudG9vbFRpcExlYXZlLmJpbmQodGhpcykpXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJy5pdGVtLWNvbnRyb2wuZGV2ZWxvcG1lbnQtZmxhZycpXG4gICAgICAubW91c2VlbnRlcih0aGlzLnRvb2xUaXBGbGFnRm9yRGV2ZWxvcG1lbnQuYmluZCh0aGlzKSlcbiAgICAgIC5tb3VzZWxlYXZlKGdhbWUuQ29DN1Rvb2x0aXBzLnRvb2xUaXBMZWF2ZS5iaW5kKHRoaXMpKVxuXG4gICAgLy8gQWN0aXZlIEVmZmVjdHNcbiAgICBodG1sXG4gICAgICAuZmluZCgnLmVmZmVjdC1jb250cm9sJylcbiAgICAgIC5jbGljayhldiA9PiBDb0M3QWN0aXZlRWZmZWN0Lm9uTWFuYWdlQWN0aXZlRWZmZWN0KGV2LCB0aGlzLmFjdG9yKSlcbiAgfVxuXG4gIHRvb2xUaXBTa2lsbEVudGVyIChldmVudCkge1xuICAgIGNvbnN0IGRlbGF5ID0gcGFyc2VJbnQoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAndG9vbFRpcERlbGF5JykpXG4gICAgaWYgKGRlbGF5ID4gMCkge1xuICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMudG9vbFRpcFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRvb2xUaXAgPSBnYW1lLmFjdG9ycy5kb2N1bWVudENsYXNzLnRvb2xUaXBTa2lsbFRleHQoKVxuICAgICAgICBpZiAodG9vbFRpcCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBnYW1lLkNvQzdUb29sdGlwcy5kaXNwbGF5VG9vbFRpcCh0b29sVGlwKVxuICAgICAgICB9XG4gICAgICB9LCBkZWxheSlcbiAgICB9XG4gIH1cblxuICB0b29sVGlwQ2hhcmFjdGVyaXN0aWNFbnRlciAoZXZlbnQpIHtcbiAgICBjb25zdCBkZWxheSA9IHBhcnNlSW50KGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3Rvb2xUaXBEZWxheScpKVxuICAgIGlmIChkZWxheSA+IDApIHtcbiAgICAgIGNvbnN0IHNoZWV0ID0gdGhpc1xuICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMudG9vbFRpcFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eXBlb2YgZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgIGdhbWUuQ29DN1Rvb2x0aXBzLlRvb2xUaXBIb3ZlciAhPT0gbnVsbFxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBjaGFyID0gZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyLmNsb3Nlc3QoJy5jaGFyLWJveCcpXG4gICAgICAgICAgaWYgKHR5cGVvZiBjaGFyICE9PSAndW5kZWZpbmVkJyAmJiAhIWNoYXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYXJJZCA9IGNoYXIuZGF0YXNldC5jaGFyYWN0ZXJpc3RpY1xuICAgICAgICAgICAgY29uc3QgY2hhcmFjdGVyaXN0aWMgPSBzaGVldC5hY3Rvci5jaGFyYWN0ZXJpc3RpY3NbY2hhcklkXVxuICAgICAgICAgICAgbGV0IHRvb2xUaXAgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlRvb2xUaXBTa2lsbCcsIHtcbiAgICAgICAgICAgICAgc2tpbGw6IGNoYXJhY3RlcmlzdGljLmxhYmVsLFxuICAgICAgICAgICAgICByZWd1bGFyOiBjaGFyYWN0ZXJpc3RpYy52YWx1ZSA/PyAwLFxuICAgICAgICAgICAgICBoYXJkOiBjaGFyYWN0ZXJpc3RpYy5oYXJkID8/IDAsXG4gICAgICAgICAgICAgIGV4dHJlbWU6IGNoYXJhY3RlcmlzdGljLmV4dHJlbWUgPz8gMFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgICAgICAgICB0b29sVGlwID1cbiAgICAgICAgICAgICAgICB0b29sVGlwICtcbiAgICAgICAgICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlRvb2xUaXBLZWVwZXJTa2lsbCcsIHtcbiAgICAgICAgICAgICAgICAgIG90aGVyOlxuICAgICAgICAgICAgICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdzdGFuYnlHTVJvbGxzJykgJiZcbiAgICAgICAgICAgICAgICAgICAgc2hlZXQuYWN0b3IuaGFzUGxheWVyT3duZXJcbiAgICAgICAgICAgICAgICAgICAgICA/IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuVG9vbFRpcEtlZXBlclN0YW5kYnlTa2lsbCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHNoZWV0LmFjdG9yLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgIDogJydcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMuZGlzcGxheVRvb2xUaXAodG9vbFRpcClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIGRlbGF5KVxuICAgIH1cbiAgfVxuXG4gIHRvb2xUaXBBdHRyaWJ1dGVFbnRlciAoZXZlbnQpIHtcbiAgICBjb25zdCBkZWxheSA9IHBhcnNlSW50KGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3Rvb2xUaXBEZWxheScpKVxuICAgIGlmIChkZWxheSA+IDApIHtcbiAgICAgIGNvbnN0IHNoZWV0ID0gdGhpc1xuICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMudG9vbFRpcFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eXBlb2YgZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgIGdhbWUuQ29DN1Rvb2x0aXBzLlRvb2xUaXBIb3ZlciAhPT0gbnVsbFxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBhdHRyaWIgPSBnYW1lLkNvQzdUb29sdGlwcy5Ub29sVGlwSG92ZXIuY2xvc2VzdCgnLmF0dHJpYnV0ZScpXG4gICAgICAgICAgaWYgKHR5cGVvZiBhdHRyaWIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVJZCA9IGF0dHJpYi5kYXRhc2V0LmF0dHJpYlxuICAgICAgICAgICAgbGV0IHRvb2xUaXAgPSAnJ1xuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHNoZWV0LmFjdG9yLnN5c3RlbS5hdHRyaWJzW2F0dHJpYnV0ZUlkXVxuICAgICAgICAgICAgc3dpdGNoIChhdHRyaWJ1dGVJZCkge1xuICAgICAgICAgICAgICBjYXNlICdsY2snOlxuICAgICAgICAgICAgICAgIHRvb2xUaXAgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlRvb2xUaXBTa2lsbCcsIHtcbiAgICAgICAgICAgICAgICAgIHNraWxsOiBhdHRyaWJ1dGVzLmxhYmVsLFxuICAgICAgICAgICAgICAgICAgcmVndWxhcjogYXR0cmlidXRlcy52YWx1ZSA/PyAwLFxuICAgICAgICAgICAgICAgICAgaGFyZDogTWF0aC5mbG9vcigoYXR0cmlidXRlcy52YWx1ZSA/PyAwKSAvIDIpLFxuICAgICAgICAgICAgICAgICAgZXh0cmVtZTogTWF0aC5mbG9vcigoYXR0cmlidXRlcy52YWx1ZSA/PyAwKSAvIDUpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgICAgICAgICAgICAgIHRvb2xUaXAgPVxuICAgICAgICAgICAgICAgICAgICB0b29sVGlwICtcbiAgICAgICAgICAgICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Ub29sVGlwS2VlcGVyU2tpbGwnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgb3RoZXI6XG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdzdGFuYnlHTVJvbGxzJykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoZWV0LmFjdG9yLmhhc1BsYXllck93bmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Ub29sVGlwS2VlcGVyU3RhbmRieVNraWxsJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHNoZWV0LmFjdG9yLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnJ1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBnYW1lLkNvQzdUb29sdGlwcy5kaXNwbGF5VG9vbFRpcCh0b29sVGlwKVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIGNhc2UgJ2RiJzpcbiAgICAgICAgICAgICAgICB0b29sVGlwID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlRvb2xUaXBEQicpXG4gICAgICAgICAgICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMuZGlzcGxheVRvb2xUaXAodG9vbFRpcClcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICBjYXNlICdzYW4nOlxuICAgICAgICAgICAgICAgIHRvb2xUaXAgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlRvb2xUaXBTYW5pdHknLCB7XG4gICAgICAgICAgICAgICAgICBza2lsbDogJ1Nhbml0eScsXG4gICAgICAgICAgICAgICAgICByZWd1bGFyOiBhdHRyaWJ1dGVzLnZhbHVlID8/IDAsXG4gICAgICAgICAgICAgICAgICBoYXJkOiBNYXRoLmZsb29yKChhdHRyaWJ1dGVzLnZhbHVlID8/IDApIC8gMiksXG4gICAgICAgICAgICAgICAgICBleHRyZW1lOiBNYXRoLmZsb29yKChhdHRyaWJ1dGVzLnZhbHVlID8/IDApIC8gNSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgICAgICAgICAgICAgdG9vbFRpcCA9XG4gICAgICAgICAgICAgICAgICAgIHRvb2xUaXAgK1xuICAgICAgICAgICAgICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlRvb2xUaXBLZWVwZXJTa2lsbCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICBvdGhlcjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ub29sVGlwS2VlcGVyU2FuaXR5JykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3N0YW5ieUdNUm9sbHMnKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgc2hlZXQuYWN0b3IuaGFzUGxheWVyT3duZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlRvb2xUaXBLZWVwZXJTdGFuZGJ5U2tpbGwnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogc2hlZXQuYWN0b3IubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBnYW1lLkNvQzdUb29sdGlwcy5kaXNwbGF5VG9vbFRpcCh0b29sVGlwKVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBkZWxheSlcbiAgICB9XG4gIH1cblxuICB0b29sVGlwQXV0b0VudGVyIChldmVudCkge1xuICAgIGNvbnN0IGRlbGF5ID0gcGFyc2VJbnQoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAndG9vbFRpcERlbGF5JykpXG4gICAgaWYgKGRlbGF5ID4gMCkge1xuICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMudG9vbFRpcFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eXBlb2YgZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgIGdhbWUuQ29DN1Rvb2x0aXBzLlRvb2xUaXBIb3ZlciAhPT0gbnVsbFxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCB0b29sVGlwID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlRvb2xUaXBBdXRvVG9nZ2xlJylcbiAgICAgICAgICBnYW1lLkNvQzdUb29sdGlwcy5kaXNwbGF5VG9vbFRpcCh0b29sVGlwKVxuICAgICAgICB9XG4gICAgICB9LCBkZWxheSlcbiAgICB9XG4gIH1cblxuICB0b29sVGlwRmxhZ0ZvckRldmVsb3BtZW50IChldmVudCkge1xuICAgIGNvbnN0IGRlbGF5ID0gcGFyc2VJbnQoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAndG9vbFRpcERlbGF5JykpXG4gICAgaWYgKGRlbGF5ID4gMCkge1xuICAgICAgY29uc3Qgc2hlZXQgPSB0aGlzXG4gICAgICBnYW1lLkNvQzdUb29sdGlwcy5Ub29sVGlwSG92ZXIgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgICBnYW1lLkNvQzdUb29sdGlwcy50b29sVGlwVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiBnYW1lLkNvQzdUb29sdGlwcy5Ub29sVGlwSG92ZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyICE9PSBudWxsXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IGl0ZW0gPSBnYW1lLkNvQzdUb29sdGlwcy5Ub29sVGlwSG92ZXIuY2xvc2VzdCgnLml0ZW0nKVxuICAgICAgICAgIGlmICh0eXBlb2YgaXRlbSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHNraWxsSWQgPSBpdGVtLmRhdGFzZXQuc2tpbGxJZFxuICAgICAgICAgICAgY29uc3Qgc2tpbGwgPSBzaGVldC5hY3Rvci5pdGVtcy5nZXQoc2tpbGxJZClcbiAgICAgICAgICAgIGNvbnN0IHRvb2xUaXAgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlRvb2xUaXBTa2lsbEZsYWdUb2dnbGUnLCB7XG4gICAgICAgICAgICAgIHN0YXR1czogZ2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgICAgICAgIHNraWxsLnN5c3RlbS5mbGFncy5kZXZlbG9wZW1lbnRcbiAgICAgICAgICAgICAgICAgID8gJ0NvQzcuVG9vbFRpcFNraWxsRmxhZ2dlZCdcbiAgICAgICAgICAgICAgICAgIDogJ0NvQzcuVG9vbFRpcFNraWxsVW5mbGFnZ2VkJ1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMuZGlzcGxheVRvb2xUaXAodG9vbFRpcClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIGRlbGF5KVxuICAgIH1cbiAgfVxuXG4gIF9vbkNvbnRleHRNZW51Q2xpY2sgKGV2ZW50LCB0YXJnZXQpIHtcbiAgICBjb25zdCB0YXJnZXRUeXBlID0gdGFyZ2V0LmRhdGFzZXQ/LnRhcmdldFR5cGVcbiAgICBjb25zdCByb2xsT3B0aW9ucyA9IHtcbiAgICAgIHByZXZlbnRTdGFuZGJ5OiB0cnVlLFxuICAgICAgZmFzdEZvcndhcmQ6IGZhbHNlLFxuICAgICAgYWN0b3I6IHRoaXMuYWN0b3JcbiAgICB9XG4gICAgc3dpdGNoICh0YXJnZXRUeXBlKSB7XG4gICAgICBjYXNlICgnc2tpbGwnKTpcbiAgICAgICAgcm9sbE9wdGlvbnMucm9sbFR5cGUgPSBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX1NLSUxMXG4gICAgICAgIHJvbGxPcHRpb25zLnNraWxsSWQgPSB0YXJnZXQuY2xvc2VzdCgnLml0ZW0nKT8uZGF0YXNldC5za2lsbElkXG5cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgKCdjaGFyYWN0ZXJpc3RpYycpOlxuICAgICAgICByb2xsT3B0aW9ucy5yb2xsVHlwZSA9IENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfQ0hBUkFDVEVSSVNUSUNcbiAgICAgICAgcm9sbE9wdGlvbnMuY2hhcmFjdGVyaXN0aWMgPSB0YXJnZXQuY2xvc2VzdCgnLmNoYXItYm94JykuZGF0YXNldC5jaGFyYWN0ZXJpc3RpY1xuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlICgnYXR0cmlidXRlJyk6XG4gICAgICAgIHJvbGxPcHRpb25zLnJvbGxUeXBlID0gQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9BVFRSSUJVVEVcbiAgICAgICAgcm9sbE9wdGlvbnMuYXR0cmlidXRlID0gdGFyZ2V0LmNsb3Nlc3QoJy5hdHRyaWJ1dGUnKS5kYXRhc2V0LmF0dHJpYlxuICAgICAgICBicmVha1xuICAgIH1cbiAgICBzd2l0Y2ggKGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5hY3Rpb24pIHtcbiAgICAgIGNhc2UgKCdyb2xsJyk6XG4gICAgICAgIHJvbGxPcHRpb25zLmNhcmRUeXBlID0gQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9OT1JNQUxcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgKCdvcHBvc2VkLXJvbGwnKTpcbiAgICAgICAgcm9sbE9wdGlvbnMuY2FyZFR5cGUgPSBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX09QUE9TRURcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgKCdjb21iaW5lZC1yb2xsJyk6XG4gICAgICAgIHJvbGxPcHRpb25zLmNhcmRUeXBlID0gQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9DT01CSU5FRFxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAoJ3JlcXVlc3Qtcm9sbCcpOlxuICAgICAgICByb2xsT3B0aW9ucy5jYXJkVHlwZSA9IENvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfTk9STUFMXG4gICAgICAgIHJvbGxPcHRpb25zLnByZXZlbnRTdGFuZGJ5ID0gZmFsc2VcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgKCdsaW5rLXRvb2wnKTpcbiAgICAgICAgcm9sbE9wdGlvbnMuY2FyZFR5cGUgPSBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX05PTkVcbiAgICAgICAgcm9sbE9wdGlvbnMub3BlbkxpbmtUb29sID0gdHJ1ZVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAoJ3NlbmQtY2hhdCcpOlxuICAgICAgICByb2xsT3B0aW9ucy5jYXJkVHlwZSA9IENvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfTk9ORVxuICAgICAgICByb2xsT3B0aW9ucy5zZW5kVG9DaGF0ID0gdHJ1ZVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAoJ2NvcHktdG8tY2xpcGJvYXJkJyk6XG4gICAgICAgIHJvbGxPcHRpb25zLmNhcmRUeXBlID0gQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9OT05FXG4gICAgICAgIHJvbGxPcHRpb25zLnNlbmRUb0NsaXBib2FyZCA9IHRydWVcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgKCdsaW5rLWVuY291bnRlcicpOlxuICAgICAgICByb2xsT3B0aW9ucy5jYXJkVHlwZSA9IENvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfTk9ORVxuICAgICAgICByb2xsT3B0aW9ucy5jcmVhdGVFbmNvdW50ZXIgPSB0cnVlXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICgnZW5jb3VudGVyJyk6XG4gICAgICAgIHJvbGxPcHRpb25zLmNhcmRUeXBlID0gQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9TQU5fQ0hFQ0tcbiAgICAgICAgcm9sbE9wdGlvbnMucm9sbFR5cGUgPSBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX0FUVFJJQlVURVxuICAgICAgICByb2xsT3B0aW9ucy5mYXN0Rm9yd2FyZCA9IHRydWVcbiAgICAgICAgYnJlYWtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBDb0M3Q2hhdE1lc3NhZ2UudHJpZ2dlcihyb2xsT3B0aW9ucylcbiAgfVxuXG4gIF9vblJlbmRlckl0ZW1TaGVldCAoZXZlbnQpIHtcbiAgICBjb25zdCBsaSA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50cygnLml0ZW0nKVxuICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmFjdG9yLml0ZW1zLmdldChsaS5kYXRhKCdpdGVtSWQnKSlcbiAgICBpdGVtLnNoZWV0LnJlbmRlcih0cnVlKVxuICB9XG5cbiAgYXN5bmMgX29uVHJhZGVJdGVtIChldmVudCkge1xuICAgIGNvbnN0IGxpID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5wYXJlbnRzKCcuaXRlbScpXG4gICAgY29uc3QgaXRlbSA9IHRoaXMuYWN0b3IuaXRlbXMuZ2V0KGxpLmRhdGEoJ2l0ZW1JZCcpKVxuICAgIGxldCBjb250ZW50ID0gJzxwPicgKyBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTWVzc2FnZVNlbGVjdFVzZXJUb0dpdmVUbycpXG4gICAgY29uc3QgbWVzc2FnZSA9IHtcbiAgICAgIGFjdG9yRnJvbTogdGhpcy5hY3Rvci5pZCxcbiAgICAgIHNjZW5lOiBudWxsLFxuICAgICAgYWN0b3JUbzogdGhpcy5hY3Rvci5pZCxcbiAgICAgIGl0ZW06IGl0ZW0uaWRcbiAgICB9XG4gICAgaWYgKHRoaXMudG9rZW4/LmFjdG9yKSB7XG4gICAgICBtZXNzYWdlLmFjdG9yRnJvbSA9IHRoaXMudG9rZW4uaWRcbiAgICAgIG1lc3NhZ2Uuc2NlbmUgPSB0aGlzLnRva2VuLnBhcmVudC5pZFxuICAgIH1cbiAgICBjb25zdCBhY3RvcnMgPSBnYW1lLmFjdG9ycy5maWx0ZXIoZSA9PiB7XG4gICAgICBpZiAoIVsnY2hhcmFjdGVyJywgJ25wYycsICdjcmVhdHVyZScsICdjb250YWluZXInXS5pbmNsdWRlcyhlLnR5cGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuYWN0b3IuaWQgPT09IGUuaWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBsZXQgdmlzaWJsZSA9IGZhbHNlXG4gICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhlLm93bmVyc2hpcCkpIHtcbiAgICAgICAgaWYgKGsgPT09ICdkZWZhdWx0JyB8fCBrID09PSBnYW1lLnVzZXIuaWQpIHtcbiAgICAgICAgICB2aXNpYmxlID0gdmlzaWJsZSB8fCB2ICE9PSBDT05TVC5ET0NVTUVOVF9PV05FUlNISVBfTEVWRUxTLk5PTkVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZpc2libGVcbiAgICB9KVxuICAgIGNvbnRlbnQgPSBjb250ZW50ICsgJzxmb3JtIGlkPVwic2VsZWN0Zm9ybVwiPjxzZWxlY3QgbmFtZT1cInVzZXJcIj4nXG4gICAgZm9yIChjb25zdCBhY3RvciBvZiBhY3RvcnMpIHtcbiAgICAgIGNvbnRlbnQgPVxuICAgICAgICBjb250ZW50ICsgJzxvcHRpb24gdmFsdWU9XCInICsgYWN0b3IuaWQgKyAnXCI+JyArIGFjdG9yLm5hbWUgKyAnPC9vcHRpb24+J1xuICAgIH1cbiAgICBjb250ZW50ID0gY29udGVudCArICc8L3NlbGVjdD48L2Zvcm0+PC9wPidcbiAgICBtZXNzYWdlLmFjdG9yVG8gPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIGNvbnN0IGRsZyA9IG5ldyBEaWFsb2coe1xuICAgICAgICB0aXRsZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk1lc3NhZ2VUaXRsZVNlbGVjdFVzZXJUb0dpdmVUbycpLFxuICAgICAgICBjb250ZW50LFxuICAgICAgICBidXR0b25zOiB7XG4gICAgICAgICAgY29uZmlybToge1xuICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5WYWxpZGF0ZScpLFxuICAgICAgICAgICAgY2FsbGJhY2s6IGh0bWwgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShcbiAgICAgICAgICAgICAgICBodG1sWzBdLnF1ZXJ5U2VsZWN0b3IoJyNzZWxlY3Rmb3JtJylcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgZm9ybURhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gJ3VzZXInKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh2YWx1ZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6ICdjb25maXJtJyxcbiAgICAgICAgY2xvc2U6ICgpID0+IHt9XG4gICAgICB9KVxuICAgICAgZGxnLnJlbmRlcih0cnVlKVxuICAgIH0pXG4gICAgYXdhaXQgZ2FtZS5Db0M3c29ja2V0LmV4ZWN1dGVBc0dNKCdnbXRyYWRlaXRlbXRvJywgbWVzc2FnZSlcbiAgfVxuXG4gIF9vbkRyYWdTdGFydCAoZXZlbnQpIHtcbiAgICBzdXBlci5fb25EcmFnU3RhcnQoZXZlbnQpXG4gICAgaWYgKHRoaXMudG9rZW4pIHtcbiAgICAgIGNvbnN0IGRyYWdEYXRhID0gSlNPTi5wYXJzZShldmVudC5kYXRhVHJhbnNmZXIuZ2V0RGF0YSgndGV4dC9wbGFpbicpKVxuICAgICAgZHJhZ0RhdGEudG9rZW5VdWlkID0gdGhpcy50b2tlbi51dWlkXG4gICAgICBkcmFnRGF0YS50b2tlbklkID0gdGhpcy50b2tlbi5pZFxuICAgICAgZHJhZ0RhdGEuc2NlbmVJZCA9IHRoaXMudG9rZW4ucGFyZW50LmlkXG4gICAgICBldmVudC5kYXRhVHJhbnNmZXIuc2V0RGF0YSgndGV4dC9wbGFpbicsIEpTT04uc3RyaW5naWZ5KGRyYWdEYXRhKSlcbiAgICB9XG4gIH1cblxuICBfb25EcmFnQ2hhcmFjdGVyaXN0aWMgKGV2ZW50KSB7XG4gICAgY29uc3QgYm94ID0gZXZlbnQuY3VycmVudFRhcmdldC5wYXJlbnRFbGVtZW50XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIENvQzdUeXBlOiAnbGluaycsXG4gICAgICBsaW5rVHlwZTogJ2NoYXJhY3RlcmlzdGljJyxcbiAgICAgIGNoZWNrOiAnY2hlY2snLFxuICAgICAgdHlwZTogJ0NvQzdMaW5rJyxcbiAgICAgIGhhc1BsYXllck93bmVyOiB0aGlzLmFjdG9yLmhhc1BsYXllck93bmVyLFxuICAgICAgYWN0b3JLZXk6IHRoaXMuYWN0b3IuYWN0b3JLZXksXG4gICAgICBuYW1lOiBib3guZGF0YXNldC5jaGFyYWN0ZXJpc3RpYyxcbiAgICAgIGljb246IG51bGwsXG4gICAgICBkb2N1bWVudDoge1xuICAgICAgICB0eXBlOiB0aGlzLmRvY3VtZW50LnR5cGUsXG4gICAgICAgIHV1aWQ6IHRoaXMuZG9jdW1lbnQudXVpZFxuICAgICAgfVxuICAgIH1cblxuICAgIGV2ZW50Lm9yaWdpbmFsRXZlbnQuZGF0YVRyYW5zZmVyLnNldERhdGEoJ3RleHQvcGxhaW4nLCBKU09OLnN0cmluZ2lmeShkYXRhKSlcbiAgfVxuXG4gIF9vbkRyYWdBdHRyaWJ1dGUgKGV2ZW50KSB7XG4gICAgY29uc3QgYm94ID0gZXZlbnQuY3VycmVudFRhcmdldC5wYXJlbnRFbGVtZW50XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIENvQzdUeXBlOiAnbGluaycsXG4gICAgICBsaW5rVHlwZTogJ2F0dHJpYnV0ZScsXG4gICAgICBjaGVjazogJ2NoZWNrJyxcbiAgICAgIHR5cGU6ICdDb0M3TGluaycsXG4gICAgICBoYXNQbGF5ZXJPd25lcjogdGhpcy5hY3Rvci5oYXNQbGF5ZXJPd25lcixcbiAgICAgIGFjdG9yS2V5OiB0aGlzLmFjdG9yLmFjdG9yS2V5LFxuICAgICAgbmFtZTogYm94LmRhdGFzZXQuYXR0cmliLFxuICAgICAgaWNvbjogbnVsbCxcbiAgICAgIGRvY3VtZW50OiB7XG4gICAgICAgIHR5cGU6IHRoaXMuZG9jdW1lbnQudHlwZSxcbiAgICAgICAgdXVpZDogdGhpcy5kb2N1bWVudC51dWlkXG4gICAgICB9XG4gICAgfVxuXG4gICAgZXZlbnQub3JpZ2luYWxFdmVudC5kYXRhVHJhbnNmZXIuc2V0RGF0YSgndGV4dC9wbGFpbicsIEpTT04uc3RyaW5naWZ5KGRhdGEpKVxuICB9XG5cbiAgX29uRHJhZ1NhbkNoZWNrIChldmVudCkge1xuICAgIGNvbnN0IHNhbk1pbiA9IGV2ZW50LmN1cnJlbnRUYXJnZXQucXVlcnlTZWxlY3RvcignLnNhbi12YWx1ZS5wYXNzJylcbiAgICBjb25zdCBzYW5NYXggPSBldmVudC5jdXJyZW50VGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoJy5zYW4tdmFsdWUuZmFpbGVkJylcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgQ29DN1R5cGU6ICdsaW5rJyxcbiAgICAgIGxpbmtUeXBlOiAnY29jNy1saW5rJyxcbiAgICAgIGNoZWNrOiAnc2FubG9zcycsXG4gICAgICBoYXNQbGF5ZXJPd25lcjogdGhpcy5hY3Rvci5oYXNQbGF5ZXJPd25lcixcbiAgICAgIGFjdG9yS2V5OiB0aGlzLmFjdG9yLmFjdG9yS2V5LFxuICAgICAgc2FuTWluOiBzYW5NaW4uaW5uZXJUZXh0LFxuICAgICAgc2FuTWF4OiBzYW5NYXguaW5uZXJUZXh0LFxuICAgICAgaWNvbjogbnVsbCxcbiAgICAgIGRvY3VtZW50OiB7XG4gICAgICAgIHR5cGU6IHRoaXMuZG9jdW1lbnQudHlwZSxcbiAgICAgICAgdXVpZDogdGhpcy5kb2N1bWVudC51dWlkXG4gICAgICB9XG4gICAgfVxuXG4gICAgZXZlbnQub3JpZ2luYWxFdmVudC5kYXRhVHJhbnNmZXIuc2V0RGF0YSgndGV4dC9wbGFpbicsIEpTT04uc3RyaW5naWZ5KGRhdGEpKVxuICB9XG5cbiAgYXN5bmMgX29uRHJvcCAoZXZlbnQpIHtcbiAgICBjb25zdCBkYXRhU3RyaW5nID0gZXZlbnQuZGF0YVRyYW5zZmVyLmdldERhdGEoJ3RleHQvcGxhaW4nKVxuICAgIGlmIChkYXRhU3RyaW5nID09PSAnJykge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGRhdGFTdHJpbmcpXG4gICAgaWYgKGRhdGEudHlwZSA9PT0gJ0NvQzdMaW5rJykge1xuICAgICAgaWYgKGRhdGEuY2hlY2sgPT09IENvQzdMaW5rLkNIRUNLX1RZUEUuRUZGRUNUKSB7XG4gICAgICAgIENvQzdMaW5rLl9vbkxpbmtBY3RvckNsaWNrKHRoaXMuYWN0b3IsIGRhdGEpXG4gICAgICB9XG4gICAgfVxuICAgIGF3YWl0IHN1cGVyLl9vbkRyb3AoZXZlbnQpXG4gIH1cblxuICBhc3luYyBfb25Db25kaXRpb25Ub2dnbGUgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuY29uZGl0aW9uKSB7XG4gICAgICBhd2FpdCB0aGlzLmFjdG9yLnRvZ2dsZUNvbmRpdGlvbihldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuY29uZGl0aW9uKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHJldml2ZSAoKSB7XG4gICAgaWYgKGdhbWUudXNlci5pc0dNKSB0aGlzLmFjdG9yLnVuc2V0Q29uZGl0aW9uKENPQzcuc3RhdHVzLmRlYWQpXG4gIH1cblxuICBhc3luYyBoZWFsICgpIHtcbiAgICBpZiAoZ2FtZS51c2VyLmlzR00pIHRoaXMuYWN0b3IudW5zZXRDb25kaXRpb24oQ09DNy5zdGF0dXMuZHlpbmcpXG4gIH1cblxuICBhc3luYyBjaGVja0ZvckRlYXRoIChldmVudCkge1xuICAgIGNvbnN0IGNvbkNoZWNrID0gbmV3IENvQzdDb25DaGVjayhcbiAgICAgIHRoaXMuYWN0b3IuaXNUb2tlbiA/IHRoaXMuYWN0b3IudG9rZW5LZXkgOiB0aGlzLmFjdG9yLmlkXG4gICAgKVxuICAgIGNvbkNoZWNrLnN0YXlBbGl2ZSA9IHRydWVcbiAgICBjb25DaGVjay50b01lc3NhZ2UoZXZlbnQuc2hpZnRLZXkpXG4gIH1cblxuICBhc3luYyBfb25EcmFnVG9rZW5TdGFydCAoZXZlbnQpIHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgdHlwZTogJ1Rva2VuJyxcbiAgICAgIHV1aWQ6IHRoaXMudG9rZW4udXVpZFxuICAgIH1cbiAgICBldmVudC5vcmlnaW5hbEV2ZW50LmRhdGFUcmFuc2Zlci5zZXREYXRhKCd0ZXh0L3BsYWluJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpXG4gIH1cblxuICBhc3luYyBfb25SZXNldENvdW50ZXIgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGF3YWl0IHRoaXMuYWN0b3IucmVzZXREYWlseVNhbml0eSgpXG4gIH1cblxuICBhc3luYyBfb25BdXRvVG9nZ2xlIChldmVudCkge1xuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5hdHRyaWJ1dGUnKSkge1xuICAgICAgY29uc3QgYXR0cmliID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuYXR0cmlidXRlJykuZGF0YXNldC5hdHRyaWJcbiAgICAgIHRoaXMuYWN0b3IudG9nZ2xlQXR0cmliQXV0byhhdHRyaWIpXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgX29uVG9nZ2xlIChldmVudCkge1xuICAgIGNvbnN0IHdlYXBvbiA9IHRoaXMuYWN0b3IuaXRlbXMuZ2V0KFxuICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpLmRhdGFzZXQuaXRlbUlkXG4gICAgKVxuICAgIGlmICh3ZWFwb24pIHtcbiAgICAgIHdlYXBvbi50b2dnbGVQcm9wZXJ0eShcbiAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnByb3BlcnR5LFxuICAgICAgICBpc0N0cmxLZXkoZXZlbnQpXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgLy8gcm9sbCB0aGUgYWN0b3IgY2hhcmFjdGVyaXN0aWMgZnJvbSBmb3JtdWxhIHdoZW4gcG9zc2libGUuXG4gIGFzeW5jIF9vblJvbGxDaGFyYWN0ZXJpdGljc1ZhbHVlICgpIHtcbiAgICBhd2FpdCB0aGlzLmFjdG9yLnJvbGxDaGFyYWN0ZXJpc3RpY3NWYWx1ZSgpXG4gIH1cblxuICBhc3luYyBfb25BdmVyYWdlQ2hhcmFjdGVyaXRpY3NWYWx1ZSAoKSB7XG4gICAgdGhpcy5hY3Rvci5hdmVyYWdlQ2hhcmFjdGVyaXN0aWNzVmFsdWUoKVxuICB9XG5cbiAgYXN5bmMgX29uTG9ja0NsaWNrZWQgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGlzTG9ja2VkID0gdGhpcy5hY3Rvci5sb2NrZWRcbiAgICB0aGlzLmFjdG9yLmxvY2tlZCA9ICFpc0xvY2tlZFxuICAgIEhvb2tzLmNhbGwoJ2FjdG9yTG9ja0NsaWNrZWRDb0M3JywgWyFpc0xvY2tlZF0pXG4gIH1cblxuICBhc3luYyBfb25GbGFnQ2xpY2tlZCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgZmxhZ05hbWUgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuZmxhZ1xuICAgIHRoaXMuYWN0b3IudG9nZ2xlQWN0b3JGbGFnKGZsYWdOYW1lKVxuICB9XG5cbiAgYXN5bmMgX29uRm9ybXVsYUNsaWNrZWQgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIHRoaXMuYWN0b3IudG9nZ2xlQWN0b3JGbGFnKCdkaXNwbGF5Rm9ybXVsYScpXG4gIH1cblxuICBhc3luYyBfb25XaGVlbCAoZXZlbnQpIHtcbiAgICBsZXQgdmFsdWUgPSBwYXJzZUludChldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlKSB8fCBudWxsXG4gICAgaWYgKGV2ZW50LmRlbHRhWSA+IDApIHtcbiAgICAgIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUgLSAxXG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmRlbHRhWSA8IDApIHtcbiAgICAgIHZhbHVlID0gdmFsdWUgKyAxXG4gICAgfVxuXG4gICAgc3dpdGNoIChldmVudC5jdXJyZW50VGFyZ2V0Lm5hbWUpIHtcbiAgICAgIGNhc2UgJ3N5c3RlbS5hdHRyaWJzLmhwLnZhbHVlJzpcbiAgICAgICAgdGhpcy5hY3Rvci5zZXRIcCh2YWx1ZSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3N5c3RlbS5hdHRyaWJzLm1wLnZhbHVlJzpcbiAgICAgICAgdGhpcy5hY3Rvci5zZXRNcCh2YWx1ZSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3N5c3RlbS5hdHRyaWJzLnNhbi52YWx1ZSc6XG4gICAgICAgIHRoaXMuYWN0b3Iuc2V0U2FuKHZhbHVlKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3lzdGVtLmF0dHJpYnMubGNrLnZhbHVlJzpcbiAgICAgICAgdGhpcy5hY3Rvci5zZXRMdWNrKHZhbHVlKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3lzdGVtLmF0dHJpYnMuYnVpbGQuY3VycmVudCc6XG4gICAgICAgIHRoaXMuYWN0b3Iuc2V0SHAodmFsdWUpXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgX3RvZ2dsZVJlYWRPbmx5IChldmVudCkge1xuICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQucmVhZE9ubHkgPSAhZXZlbnQuY3VycmVudFRhcmdldC5yZWFkT25seVxuICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LnRvZ2dsZSgncmVhZC1vbmx5JylcbiAgfVxuXG4gIGFzeW5jIF9vbkl0ZW1TdW1tYXJ5IChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBsaSA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50cygnLml0ZW0nKVxuICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmFjdG9yLml0ZW1zLmdldChsaS5kYXRhKCdpdGVtLWlkJykpXG4gICAgY29uc3QgY2hhdERhdGEgPSBhd2FpdCBpdGVtLmdldENoYXREYXRhKHsgc2VjcmV0czogdGhpcy5hY3Rvci5pc093bmVyIH0pXG5cbiAgICAvLyBUb2dnbGUgc3VtbWFyeVxuICAgIGlmIChsaS5oYXNDbGFzcygnZXhwYW5kZWQnKSkge1xuICAgICAgY29uc3Qgc3VtbWFyeSA9IGxpLmNoaWxkcmVuKCcuaXRlbS1zdW1tYXJ5JylcbiAgICAgIHN1bW1hcnkuc2xpZGVVcCgyMDAsICgpID0+IHtcbiAgICAgICAgc3VtbWFyeS5yZW1vdmUoKVxuICAgICAgICBsaS50b2dnbGVDbGFzcygnZXhwYW5kZWQnKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGl2ID0gJCgnPGRpdiBjbGFzcz1cIml0ZW0tc3VtbWFyeVwiPjwvZGl2PicpXG5cbiAgICAgIGNvbnN0IGxhYmVscyA9ICQoJzxkaXYgY2xhc3M9XCJpdGVtLWxhYmVsc1wiPjwvZGl2PicpXG4gICAgICBmb3IgKGNvbnN0IHAgb2YgY2hhdERhdGEubGFiZWxzKSB7XG4gICAgICAgIGxhYmVscy5hcHBlbmQoXG4gICAgICAgICAgYDxkaXYgY2xhc3M9XCJpdGVtLWxhYmVsXCI+PHNwYW4gY2xhc3M9XCJsYWJlbC1uYW1lXCI+JHtwLm5hbWV9IDo8L3NwYW4+PHNwYW4gY2xhc3M9XCJsYWJlbC12YWx1ZVwiPiR7cC52YWx1ZX08L3NwYW4+PC9kaXY+YFxuICAgICAgICApXG4gICAgICB9XG4gICAgICBkaXYuYXBwZW5kKGxhYmVscylcblxuICAgICAgZGl2LmFwcGVuZChcbiAgICAgICAgJChgPGRpdiBjbGFzcz1cIml0ZW0tZGVzY3JpcHRpb25cIj4ke2NoYXREYXRhLmRlc2NyaXB0aW9uLnZhbHVlfTwvZGl2PmApXG4gICAgICApXG5cbiAgICAgIGlmIChpdGVtLnN5c3RlbS5wcm9wZXJ0aWVzPy5zcGNsKSB7XG4gICAgICAgIGNvbnN0IHNwZWNpYWxEaXYgPSAkKFxuICAgICAgICAgIGA8ZGl2IGNsYXNzPVwiaXRlbS1zcGVjaWFsXCI+JHtjaGF0RGF0YS5kZXNjcmlwdGlvbi5zcGVjaWFsfTwvZGl2PmBcbiAgICAgICAgKVxuICAgICAgICBkaXYuYXBwZW5kKHNwZWNpYWxEaXYpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByb3BzID0gJCgnPGRpdiBjbGFzcz1cIml0ZW0tcHJvcGVydGllc1wiPjwvZGl2PicpXG4gICAgICBmb3IgKGNvbnN0IHAgb2YgY2hhdERhdGEucHJvcGVydGllcykge1xuICAgICAgICBwcm9wcy5hcHBlbmQoXG4gICAgICAgICAgYDxkaXYgY2xhc3M9XCJ0YWcgaXRlbS1wcm9wZXJ0eVwiPiR7Z2FtZS5pMThuLmxvY2FsaXplKHApfTwvZGl2PmBcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgZGl2LmFwcGVuZChwcm9wcylcblxuICAgICAgbGkuYXBwZW5kKGRpdi5oaWRlKCkpXG4gICAgICBkaXYuc2xpZGVEb3duKDIwMCwgKCkgPT4gbGkudG9nZ2xlQ2xhc3MoJ2V4cGFuZGVkJykpXG4gICAgfVxuICAgIC8vICQoZXZlbnQuY3VycmVudFRhcmdldCkudG9nZ2xlQ2xhc3MoJ2V4cGFuZGVkJyk7XG4gIH1cblxuICBhc3luYyBfb25TZWN0aW9uSGVhZGVyIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAvLyBsZXQgc2VjdGlvbiA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50cygnc2VjdGlvbicpLFxuICAgIC8vICBwYW5uZWxDbGFzcyA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YSgncGFubmVsJyksXG4gICAgLy8gIHBhbm5lbCA9IHNlY3Rpb24uZmluZCggYC4ke3Bhbm5lbENsYXNzfWApO1xuICAgIC8vIHBhbm5lbC50b2dnbGUoKTtcbiAgICBjb25zdCBzZWN0aW9uID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCdzZWN0aW9uJylcbiAgICBjb25zdCBwYW5uZWxDbGFzcyA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5wYW5uZWxcbiAgICBpZiAodHlwZW9mIHBhbm5lbENsYXNzID09PSAndW5kZWZpbmVkJykgcmV0dXJuXG4gICAgY29uc3QgcGFubmVsID0gJChzZWN0aW9uKS5maW5kKGAucGFubmVsLiR7cGFubmVsQ2xhc3N9YClcblxuICAgIC8vIHBhbm5lbC50b2dnbGUoKTtcbiAgICBpZiAocGFubmVsLmhhc0NsYXNzKCdleHBhbmRlZCcpKSB7XG4gICAgICAvLyBDb3VsZCByZW1vdmUgZXhwYW5kZWQgY2xhc3MgYW5kIHVzZSAocGFubmVsLmlzKCc6dmlzaWJsZScpKVxuICAgICAgcGFubmVsLnNsaWRlVXAoMjAwLCAoKSA9PiBwYW5uZWwudG9nZ2xlQ2xhc3MoJ2V4cGFuZGVkJykpXG4gICAgfSBlbHNlIHtcbiAgICAgIHBhbm5lbC5zbGlkZURvd24oMjAwLCAoKSA9PiBwYW5uZWwudG9nZ2xlQ2xhc3MoJ2V4cGFuZGVkJykpXG4gICAgfVxuXG4gICAgY29uc3QgY2FtZWxGbGFnID0gY2hhdEhlbHBlci5oeXBoZW5Ub0NhbWVsQ2FzZShgZGF0YS5wYW5uZWwuJHtwYW5uZWxDbGFzc30uZXhwYW5kZWRgKVxuXG4gICAgdGhpcy5hY3Rvci51cGRhdGUoXG4gICAgICB7IFtjYW1lbEZsYWddOiAhcGFubmVsLmhhc0NsYXNzKCdleHBhbmRlZCcpIH0sXG4gICAgICB7IHJlbmRlcjogZmFsc2UgfSlcbiAgfVxuXG4gIF9vbkludmVudG9yeUhlYWRlciAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgbGkgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnNpYmxpbmdzKCdsaScpXG4gICAgaWYgKGxpLmlzKCc6dmlzaWJsZScpKSBsaS5zbGlkZVVwKDIwMClcbiAgICBlbHNlIGxpLnNsaWRlRG93bigyMDApXG4gIH1cblxuICBfb25JdGVtSGVhZGVyIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBvbCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkubmV4dCgnb2wnKVxuICAgIGlmIChvbC5pcygnOnZpc2libGUnKSkgb2wuc2xpZGVVcCgyMDApXG4gICAgZWxzZSBvbC5zbGlkZURvd24oMjAwKVxuICB9XG5cbiAgYXN5bmMgX29uSXRlbVBvcHVwIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBsaSA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50cygnLml0ZW0nKVxuICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmFjdG9yLml0ZW1zLmdldChsaS5kYXRhKCdpdGVtLWlkJykpXG5cbiAgICBDb0M3QWN0b3JTaGVldC5wb3B1cFNraWxsKGl0ZW0pXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgcG9wdXBTa2lsbCAoc2tpbGwpIHtcbiAgICBza2lsbC5zeXN0ZW0uZGVzY3JpcHRpb24uZW5yaWNoZWRWYWx1ZSA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNraWxsLnN5c3RlbS5kZXNjcmlwdGlvbi52YWx1ZSxcbiAgICAgIHsgYXN5bmM6IHRydWUgfVxuICAgIClcbiAgICBjb25zdCBkbGcgPSBuZXcgRGlhbG9nKFxuICAgICAge1xuICAgICAgICB0aXRsZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlNraWxsRGV0YWlsc1dpbmRvdycpLFxuICAgICAgICBjb250ZW50OiBza2lsbCxcbiAgICAgICAgYnV0dG9uczoge30sXG4gICAgICAgIGNsb3NlOiAoKSA9PiB7fVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NlczogWydjb2M3JywgJ3NoZWV0JywgJ3NraWxsJ10sXG4gICAgICAgIHdpZHRoOiA1MjAsXG4gICAgICAgIGhlaWdodDogNDgwLFxuICAgICAgICBzY3JvbGxZOiBbJy5pdGVtLWRlc2NyaXB0aW9uJ10sXG4gICAgICAgIHRlbXBsYXRlOiAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hcHBzL3NraWxsLWRldGFpbHMuaHRtbCdcbiAgICAgIH1cbiAgICApXG4gICAgZGxnLnJlbmRlcih0cnVlKVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSByb2xsaW5nIG9mIGFuIGl0ZW0gZnJvbSB0aGUgQWN0b3Igc2hlZXQsIG9idGFpbmluZyB0aGUgSXRlbSBpbnN0YW5jZSBhbmQgZGlzcGF0Y2hpbmcgdG8gaXQncyByb2xsIG1ldGhvZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYXN5bmMgX29uSXRlbVJvbGwgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIC8vIGNvbnN0IGl0ZW1JZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLml0ZW0nKS5kYXRhc2V0Lml0ZW1JZDtcbiAgICAvLyBjb25zdCBhY3RvcklkID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCdmb3JtJykuZGF0YXNldC5hY3RvcklkO1xuICAgIC8vIGNvbnN0IHRva2VuS2V5ID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCdmb3JtJykuZGF0YXNldC50b2tlbklkO1xuICAgIC8vIGxldCBjaGVjayA9IG5ldyBDb0M3Q2hlY2soKTtcblxuICAgIC8vIGNoZWNrLmFjdG9yID0gIXRva2VuS2V5ID8gYWN0b3JJZCA6IHRva2VuS2V5O1xuICAgIC8vIGNoZWNrLml0ZW0gPSBpdGVtSWQ7XG4gICAgLy8gY2hlY2sucm9sbCgpO1xuICAgIC8vIGNoZWNrLnRvTWVzc2FnZSgpO1xuICB9XG5cbiAgYXN5bmMgX29uRWZmZWN0IChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBlZmZlY3RJZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnbGknKS5kYXRhc2V0LmVmZmVjdElkXG4gICAgY29uc3QgZWZmZWN0ID0gdGhpcy5hY3Rvci5lZmZlY3RzLmdldChlZmZlY3RJZClcbiAgICBpZiAoaXNDdHJsS2V5KGV2ZW50KSAmJiBnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgQ29DN0NvbnRlbnRMaW5rRGlhbG9nLmNyZWF0ZSh7IHR5cGU6ICdDb0M3TGluaycsIGNoZWNrOiBDb0M3TGluay5DSEVDS19UWVBFLkVGRkVDVCwgb2JqZWN0OiBlZmZlY3QgfSlcbiAgICB9XG4gIH1cblxuICBhc3luYyBfb25XZWFwb25Sb2xsIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBpdGVtSWQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJ2xpJykuZGF0YXNldC5pdGVtSWRcbiAgICBjb25zdCBmYXN0Rm9yd2FyZCA9IGV2ZW50LnNoaWZ0S2V5XG4gICAgY29uc3Qgd2VhcG9uID0gdGhpcy5hY3Rvci5pdGVtcy5nZXQoaXRlbUlkKVxuICAgIC8vIGNvbnN0IGFjdG9yS2V5ID0gIXRoaXMudG9rZW4/IHRoaXMuYWN0b3IuYWN0b3JLZXkgOiBgJHt0aGlzLnRva2VuLnNjZW5lPy5faWQ/dGhpcy50b2tlbi5zY2VuZS5faWQ6J1RPS0VOJ30uJHt0aGlzLnRva2VuLmRhdGEuX2lkfWA7IC8vUkVGQUNUT1JJTkcgKDIpXG4gICAgLyoqICogTU9ESUYgMC44LnggKioqL1xuICAgIGxldCBhY3RvcktleVxuICAgIGlmICghdGhpcy50b2tlbikgYWN0b3JLZXkgPSB0aGlzLmFjdG9yLmlkXG4gICAgLy8gU2hlZXQgd2FzIG9wZW5lZCBmcm9tIGFjdG9yIGRpcmVjdG9yeVxuICAgIGVsc2Uge1xuICAgICAgLy8gT3BlbmVkIGZyb20gdG9rZW5cbiAgICAgIGlmICh0aGlzLmFjdG9yLmlzVG9rZW4gJiYgZ2FtZS5hY3RvcnMudG9rZW5zW3RoaXMudG9rZW4uaWRdKSB7XG4gICAgICAgIGFjdG9yS2V5ID0gYFRPS0VOLiR7dGhpcy50b2tlbi5pZH1gXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RvcktleSA9IGAke3RoaXMudG9rZW4ucGFyZW50LmlkfS4ke3RoaXMudG9rZW4uaWR9YFxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc0N0cmxLZXkoZXZlbnQpICYmIGdhbWUudXNlci5pc0dNKSB7XG4gICAgICBjb25zdCBsaW5rRGF0YSA9IHtcbiAgICAgICAgY2hlY2s6IENvQzdMaW5rLkNIRUNLX1RZUEUuSVRFTSxcbiAgICAgICAgbmFtZTogd2VhcG9uLm5hbWVcbiAgICAgIH1cbiAgICAgIENvQzdDb250ZW50TGlua0RpYWxvZy5jcmVhdGUobGlua0RhdGEsIHsgYWN0b3JzOiBbdGhpcy5hY3Rvcl0gfSlcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHByb2NlZWRXaXRob3V0VGFyZ2V0XG4gICAgICBpZiAoZ2FtZS51c2VyLnRhcmdldHMuc2l6ZSA8PSAwKSB7XG4gICAgICAgIHByb2NlZWRXaXRob3V0VGFyZ2V0ID0gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICAgIHRpdGxlOiAnICcsXG4gICAgICAgICAgICBjb250ZW50OiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lk5vVGFyZ2V0U2VsZWN0ZWQnLCB7XG4gICAgICAgICAgICAgIHdlYXBvbjogd2VhcG9uLm5hbWVcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgYnV0dG9uczoge1xuICAgICAgICAgICAgICBjYW5jZWw6IHtcbiAgICAgICAgICAgICAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtdGltZXNcIj48L2k+JyxcbiAgICAgICAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNhbmNlbCcpLFxuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShmYWxzZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHByb2NlZWQ6IHtcbiAgICAgICAgICAgICAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtY2hlY2tcIj48L2k+JyxcbiAgICAgICAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlByb2NlZWQnKSxcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodHJ1ZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWZhdWx0OiAnY2FuY2VsJyxcbiAgICAgICAgICAgIGNsYXNzZXM6IFsnY29jNycsICdkaWFsb2cnXVxuICAgICAgICAgIH1cbiAgICAgICAgICBuZXcgRGlhbG9nKGRhdGEpLnJlbmRlcih0cnVlKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgaWYgKGdhbWUudXNlci50YXJnZXRzLnNpemUgPiAwIHx8IHByb2NlZWRXaXRob3V0VGFyZ2V0KSB7XG4gICAgICAgIGlmICghd2VhcG9uLnN5c3RlbS5wcm9wZXJ0aWVzLnJuZ2QpIHtcbiAgICAgICAgICBpZiAoZ2FtZS51c2VyLnRhcmdldHMuc2l6ZSA+IDEpIHtcbiAgICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuV2FyblRvb01hbnlUYXJnZXQnKSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBjYXJkID0gbmV3IENvQzdNZWxlZUluaXRpYXRvcihhY3RvcktleSwgaXRlbUlkLCBmYXN0Rm9yd2FyZClcbiAgICAgICAgICBjYXJkLmNyZWF0ZUNoYXRDYXJkKClcbiAgICAgICAgfVxuICAgICAgICBpZiAod2VhcG9uLnN5c3RlbS5wcm9wZXJ0aWVzLnJuZ2QpIHtcbiAgICAgICAgICBjb25zdCBjYXJkID0gbmV3IENvQzdSYW5nZUluaXRpYXRvcihhY3RvcktleSwgaXRlbUlkLCBmYXN0Rm9yd2FyZClcbiAgICAgICAgICBjYXJkLmNyZWF0ZUNoYXRDYXJkKClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9vblJlbG9hZFdlYXBvbiAoZXZlbnQpIHtcbiAgICBjb25zdCBpdGVtSWQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5pdGVtJylcbiAgICAgID8gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpLmRhdGFzZXQuaXRlbUlkXG4gICAgICA6IG51bGxcbiAgICBpZiAoIWl0ZW1JZCkgcmV0dXJuXG4gICAgY29uc3Qgd2VhcG9uID0gdGhpcy5hY3Rvci5pdGVtcy5nZXQoaXRlbUlkKVxuICAgIGlmIChldmVudC5idXR0b24gPT09IDApIHtcbiAgICAgIGlmIChldmVudC5zaGlmdEtleSkgYXdhaXQgd2VhcG9uLnJlbG9hZCgpXG4gICAgICBlbHNlIGF3YWl0IHdlYXBvbi5hZGRCdWxsZXQoKVxuICAgIH0gZWxzZSBpZiAoZXZlbnQuYnV0dG9uID09PSAyKSB7XG4gICAgICBpZiAoZXZlbnQuc2hpZnRLZXkpIGF3YWl0IHdlYXBvbi5zZXRCdWxsZXRzKDApXG4gICAgICBlbHNlIGF3YWl0IHdlYXBvbi5zaG9vdEJ1bGxldHMoMSlcbiAgICB9XG4gIH1cblxuICBhc3luYyBfb25BZGRBbW8gKGV2ZW50KSB7XG4gICAgY29uc3QgaXRlbUlkID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpXG4gICAgICA/IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLml0ZW0nKS5kYXRhc2V0Lml0ZW1JZFxuICAgICAgOiBudWxsXG4gICAgaWYgKCFpdGVtSWQpIHJldHVyblxuICAgIGNvbnN0IHdlYXBvbiA9IHRoaXMuYWN0b3IuaXRlbXMuZ2V0KGl0ZW1JZClcbiAgICBhd2FpdCB3ZWFwb24uYWRkQnVsbGV0KClcbiAgfVxuXG4gIGFzeW5jIF9vbldlYXBvblNraWxsUm9sbCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3Qgc2tpbGxJZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5za2lsbElkXG4gICAgY29uc3QgYWN0b3JJZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnZm9ybScpLmRhdGFzZXQuYWN0b3JJZFxuICAgIGNvbnN0IHRva2VuS2V5ID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCdmb3JtJykuZGF0YXNldC50b2tlbklkXG4gICAgY29uc3QgaXRlbUlkID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCdsaScpXG4gICAgICA/IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnbGknKS5kYXRhc2V0Lml0ZW1JZFxuICAgICAgOiBudWxsXG5cbiAgICBjb25zdCBjaGVjayA9IG5ldyBDb0M3Q2hlY2soKVxuXG4gICAgaWYgKCFldmVudC5zaGlmdEtleSkge1xuICAgICAgY29uc3QgdXNhZ2UgPSBhd2FpdCBSb2xsRGlhbG9nLmNyZWF0ZSgpXG4gICAgICBpZiAodXNhZ2UpIHtcbiAgICAgICAgY2hlY2suZGljZU1vZGlmaWVyID0gdXNhZ2UuZ2V0KCdib251c0RpY2UnKVxuICAgICAgICBjaGVjay5kaWZmaWN1bHR5ID0gdXNhZ2UuZ2V0KCdkaWZmaWN1bHR5JylcbiAgICAgICAgY2hlY2suZmxhdERpY2VNb2RpZmllciA9IE51bWJlcih1c2FnZS5nZXQoJ2ZsYXREaWNlTW9kaWZpZXInKSlcbiAgICAgICAgY2hlY2suZmxhdFRocmVzaG9sZE1vZGlmaWVyID0gTnVtYmVyKHVzYWdlLmdldCgnZmxhdFRocmVzaG9sZE1vZGlmaWVyJykpXG4gICAgICB9XG4gICAgfVxuXG4gICAgY2hlY2suYWN0b3IgPSAhdG9rZW5LZXkgPyBhY3RvcklkIDogdG9rZW5LZXlcbiAgICBjaGVjay5za2lsbCA9IHNraWxsSWRcbiAgICBjaGVjay5pdGVtID0gaXRlbUlkXG4gICAgYXdhaXQgY2hlY2sucm9sbCgpXG4gICAgY2hlY2sudG9NZXNzYWdlKClcblxuICAgIC8vIEhBQ0s6IGp1c3QgdG8gcG9wIHRoZSBhZHZhbmNlZCByb2xsIHdpbmRvd1xuICAgIC8vIGNoZWNrLml0ZW0ucm9sbCgpO1xuICB9XG5cbiAgYXN5bmMgX29uV2VhcG9uRGFtYWdlIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBpdGVtSWQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy53ZWFwb24nKS5kYXRhc2V0Lml0ZW1JZFxuICAgIGNvbnN0IHJhbmdlID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcud2VhcG9uLWRhbWFnZScpLmRhdGFzZXQucmFuZ2VcbiAgICBjb25zdCBkYW1hZ2VDaGF0Q2FyZCA9IG5ldyBEYW1hZ2VDYXJkKHtcbiAgICAgIGZhc3RGb3J3YXJkOiBldmVudC5zaGlmdEtleSxcbiAgICAgIHJhbmdlXG4gICAgfSlcbiAgICBkYW1hZ2VDaGF0Q2FyZC5hY3RvcktleSA9IHRoaXMuYWN0b3IudG9rZW5LZXlcbiAgICBkYW1hZ2VDaGF0Q2FyZC5pdGVtSWQgPSBpdGVtSWRcbiAgICBkYW1hZ2VDaGF0Q2FyZC51cGRhdGVDaGF0Q2FyZCgpXG4gICAgLy8gY29uc29sZS5sb2coICdXZWFwb24gZGFtYWdlIENsaWNrZWQnKTtcbiAgfVxuXG4gIGFzeW5jIF9vbk9wcG9zZWRSb2xsIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LnBhcmVudEVsZW1lbnQuZGF0YXNldC5hdHRyaWIgPT09ICdkYicpIHJldHVyblxuXG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIHJvbGxUeXBlOiBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX1NLSUxMLFxuICAgICAgY2FyZFR5cGU6IENvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfT1BQT1NFRCxcbiAgICAgIGV2ZW50LFxuICAgICAgYWN0b3I6IHRoaXMuYWN0b3JcbiAgICB9XG4gICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjaGFyYWN0ZXJpc3RpYy1sYWJlbCcpKSB7XG4gICAgICBkYXRhLnJvbGxUeXBlID0gQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9DSEFSQUNURVJJU1RJQ1xuICAgIH0gZWxzZSBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2F0dHJpYnV0ZS1sYWJlbCcpKSB7XG4gICAgICBkYXRhLnJvbGxUeXBlID0gQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9BVFRSSUJVVEVcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQuYWx0S2V5KSB7XG4gICAgICBkYXRhLmNhcmRUeXBlID0gQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9DT01CSU5FRFxuICAgIH1cblxuICAgIENvQzdDaGF0TWVzc2FnZS50cmlnZ2VyKGRhdGEpXG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIHJvbGxpbmcgYSBTa2lsbCBjaGVja1xuICAgKiBAICBwYXJhbSB7RXZlbnR9IGV2ZW50ICAgVGhlIG9yaWdpbmF0aW5nIGNsaWNrIGV2ZW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBhc3luYyBfb25Sb2xsQ2hhcmFjdGVyaXRpY1Rlc3QgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnZmxhZ2dlZDRkZXYnKSkgcmV0dXJuXG4gICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3VzZUNvbnRleHRNZW51cycpKSB7XG4gICAgICBDb0M3Q2hhdE1lc3NhZ2UudHJpZ2dlcih7XG4gICAgICAgIHJvbGxUeXBlOiBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX0NIQVJBQ1RFUklTVElDLFxuICAgICAgICBjYXJkVHlwZTogQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9OT1JNQUwsXG4gICAgICAgIHByZXZlbnRTdGFuZGJ5OiB0cnVlLFxuICAgICAgICBmYXN0Rm9yd2FyZDogdHJ1ZSxcbiAgICAgICAgY2hhcmFjdGVyaXN0aWM6IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLmNoYXItYm94JykuZGF0YXNldC5jaGFyYWN0ZXJpc3RpYyxcbiAgICAgICAgYWN0b3I6IHRoaXMuYWN0b3JcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIENvQzdDaGF0TWVzc2FnZS50cmlnZ2VyKHtcbiAgICAgICAgcm9sbFR5cGU6IENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfQ0hBUkFDVEVSSVNUSUMsXG4gICAgICAgIGNhcmRUeXBlOiBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX05PUk1BTCxcbiAgICAgICAgZXZlbnQsXG4gICAgICAgIGFjdG9yOiB0aGlzLmFjdG9yXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9vblJvbGxBdHRyaWJUZXN0IChldmVudCkge1xuICAgIC8vIEZMQVRNT0RJRklFUlxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBhdHRyaWIgPSBldmVudC5jdXJyZW50VGFyZ2V0LnBhcmVudEVsZW1lbnQuZGF0YXNldC5hdHRyaWJcbiAgICBpZiAoYXR0cmliID09PSAnZGInKSB7XG4gICAgICBpZiAoXG4gICAgICAgICEvXi17MCwxfVxcZCskLy50ZXN0KFxuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQucGFyZW50RWxlbWVudC5kYXRhc2V0LnJvbGxGb3JtdWxhXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICBjb25zdCByID0gbmV3IFJvbGwoXG4gICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5wYXJlbnRFbGVtZW50LmRhdGFzZXQucm9sbEZvcm11bGFcbiAgICAgICAgKVxuICAgICAgICBhd2FpdCByLnJvbGwoeyBhc3luYzogdHJ1ZSB9KVxuICAgICAgICBpZiAoIWlzTmFOKHIudG90YWwpICYmICEoci50b3RhbCA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgIHIudG9NZXNzYWdlKHtcbiAgICAgICAgICAgIHNwZWFrZXI6IENoYXRNZXNzYWdlLmdldFNwZWFrZXIoKSxcbiAgICAgICAgICAgIGZsYXZvcjogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkJvbnVzRGFtYWdlUm9sbCcpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3VzZUNvbnRleHRNZW51cycpKSB7XG4gICAgICBDb0M3Q2hhdE1lc3NhZ2UudHJpZ2dlcih7XG4gICAgICAgIHJvbGxUeXBlOiBDb0M3Q2hhdE1lc3NhZ2UuUk9MTF9UWVBFX0NIQVJBQ1RFUklTVElDLFxuICAgICAgICBjYXJkVHlwZTogQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9OT1JNQUwsXG4gICAgICAgIHByZXZlbnRTdGFuZGJ5OiB0cnVlLFxuICAgICAgICBmYXN0Rm9yd2FyZDogdHJ1ZSxcbiAgICAgICAgYXR0cmlidXRlOiBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5hdHRyaWJ1dGUnKS5kYXRhc2V0LmF0dHJpYixcbiAgICAgICAgYWN0b3I6IHRoaXMuYWN0b3JcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIENvQzdDaGF0TWVzc2FnZS50cmlnZ2VyKHtcbiAgICAgICAgcm9sbFR5cGU6IENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfQVRUUklCVVRFLFxuICAgICAgICBjYXJkVHlwZTpcbiAgICAgICAgZXZlbnQuYWx0S2V5ICYmIGF0dHJpYiA9PT0gJ3NhbidcbiAgICAgICAgICA/IENvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfU0FOX0NIRUNLXG4gICAgICAgICAgOiBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX05PUk1BTCxcbiAgICAgICAgZXZlbnQsXG4gICAgICAgIGFjdG9yOiB0aGlzLmFjdG9yXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgcm9sbGluZyBhIFNraWxsIGNoZWNrXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50ICAgVGhlIG9yaWdpbmF0aW5nIGNsaWNrIGV2ZW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25Sb2xsU2tpbGxUZXN0IChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2ZsYWdnZWQ0ZGV2JykpIHJldHVyblxuICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICd1c2VDb250ZXh0TWVudXMnKSkge1xuICAgICAgQ29DN0NoYXRNZXNzYWdlLnRyaWdnZXIoe1xuICAgICAgICByb2xsVHlwZTogQ29DN0NoYXRNZXNzYWdlLlJPTExfVFlQRV9TS0lMTCxcbiAgICAgICAgY2FyZFR5cGU6IENvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfTk9STUFMLFxuICAgICAgICBwcmV2ZW50U3RhbmRieTogdHJ1ZSxcbiAgICAgICAgZmFzdEZvcndhcmQ6IHRydWUsXG4gICAgICAgIHNraWxsSWQ6IGV2ZW50Py5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5pdGVtJyk/LmRhdGFzZXQuc2tpbGxJZCxcbiAgICAgICAgYWN0b3I6IHRoaXMuYWN0b3JcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIENvQzdDaGF0TWVzc2FnZS50cmlnZ2VyKHtcbiAgICAgICAgcm9sbFR5cGU6IENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfU0tJTEwsXG4gICAgICAgIGNhcmRUeXBlOiBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX05PUk1BTCxcbiAgICAgICAgZXZlbnQsXG4gICAgICAgIGFjdG9yOiB0aGlzLmFjdG9yXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgLy8gX2dldFN1Ym1pdERhdGEodXBkYXRlRGF0YT17fSkge1xuXG4gIC8vICAvLyBDcmVhdGUgdGhlIGV4cGFuZGVkIHVwZGF0ZSBkYXRhIG9iamVjdFxuICAvLyAgY29uc3QgZmQgPSBuZXcgRm9ybURhdGFFeHRlbmRlZCh0aGlzLmZvcm0sIHtlZGl0b3JzOiB0aGlzLmVkaXRvcnN9KTtcbiAgLy8gIGxldCBkYXRhID0gZmQudG9PYmplY3QoKTtcbiAgLy8gIGlmICggdXBkYXRlRGF0YSApIGRhdGEgPSBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KGRhdGEsIHVwZGF0ZURhdGEpO1xuICAvLyAgZWxzZSBkYXRhID0gZm91bmRyeS51dGlscy5leHBhbmRPYmplY3QoZGF0YSk7XG5cbiAgLy8gIC8vIEhhbmRsZSBEYW1hZ2UgYXJyYXlcbiAgLy8gIGNvbnN0IGRhbWFnZSA9IGRhdGEuZGF0YT8uZGFtYWdlO1xuICAvLyAgaWYgKCBkYW1hZ2UgKSBkYW1hZ2UucGFydHMgPSBPYmplY3QudmFsdWVzKGRhbWFnZT8ucGFydHMgfHwge30pLm1hcChkID0+IFtkWzBdIHx8ICcnLCBkWzFdIHx8ICcnXSk7XG5cbiAgLy8gIC8vIFJldHVybiB0aGUgZmxhdHRlbmVkIHN1Ym1pc3Npb24gZGF0YVxuICAvLyAgcmV0dXJuIGZvdW5kcnkudXRpbHMuZmxhdHRlbk9iamVjdChkYXRhKTtcbiAgLy8gfVxuXG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbiAgLyoqXG4gICAqIEltcGxlbWVudCB0aGUgX3VwZGF0ZU9iamVjdCBtZXRob2QgYXMgcmVxdWlyZWQgYnkgdGhlIHBhcmVudCBjbGFzcyBzcGVjXG4gICAqIFRoaXMgZGVmaW5lcyBob3cgdG8gdXBkYXRlIHRoZSBzdWJqZWN0IG9mIHRoZSBmb3JtIHdoZW4gdGhlIGZvcm0gaXMgc3VibWl0dGVkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG4gIGFzeW5jIF91cGRhdGVPYmplY3QgKGV2ZW50LCBmb3JtRGF0YSkge1xuICAgIC8vIHVpLm5vdGlmaWNhdGlvbnMuaW5mbygnX3VwZGF0ZU9iamVjdCcpO1xuICAgIC8vIFRPRE86IFJlcGxhY2Ugd2l0aCAgIF9nZXRTdWJtaXREYXRhKHVwZGF0ZURhdGE9e30pIENmLiBzaGVldC5qcygyNDMpXG4gICAgY29uc3Qgb3ZlcnJpZGVzID0gZm91bmRyeS51dGlscy5mbGF0dGVuT2JqZWN0KHRoaXMuYWN0b3Iub3ZlcnJpZGVzKVxuICAgIGNvbnN0IG5hbWUgPSBldmVudD8uY3VycmVudFRhcmdldD8ubmFtZVxuICAgIGlmIChuYW1lICYmIG92ZXJyaWRlcyAmJiBvdmVycmlkZXNbbmFtZV0pIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihcbiAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FZmZlY3RBcHBsaWVkQ2FudE92ZXJyaWRlJywgeyBuYW1lIH0pXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdCkge1xuICAgICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3NraWxsLWFkanVzdG1lbnQnKSkge1xuICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmFjdG9yLml0ZW1zLmdldChcbiAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLml0ZW0nKS5kYXRhc2V0Lml0ZW1JZFxuICAgICAgICAgIClcbiAgICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgID8gcGFyc2VJbnQoZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZSlcbiAgICAgICAgICAgICAgOiBudWxsXG5cbiAgICAgICAgICAgIGlmICghZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZSkge1xuICAgICAgICAgICAgICBhd2FpdCBpdGVtLnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgW2V2ZW50LmN1cnJlbnRUYXJnZXQubmFtZV06IG51bGxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICghaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgaXRlbS51cGRhdGUoe1xuICAgICAgICAgICAgICAgICAgW2V2ZW50LmN1cnJlbnRUYXJnZXQubmFtZV06IHZhbHVlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Db0NJREZsYWcua2V5cy5pLnNraWxsLmNyZWRpdC1yYXRpbmcnKSA9PT0gaXRlbS5uYW1lICYmIHR5cGVvZiB0aGlzLmFjdG9yLm9jY3VwYXRpb24/LnN5c3RlbT8uY3JlZGl0UmF0aW5nPy5tYXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNyZWRpdFZhbHVlID1cbiAgICAgICAgICAgICAgICAoaXRlbS52YWx1ZSB8fCAwKSAtXG4gICAgICAgICAgICAgICAgKGl0ZW0uc3lzdGVtLmFkanVzdG1lbnRzPy5leHBlcmllbmNlIHx8IDApXG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBjcmVkaXRWYWx1ZSA+XG4gICAgICAgICAgICAgICAgICBOdW1iZXIodGhpcy5hY3Rvci5vY2N1cGF0aW9uLnN5c3RlbS5jcmVkaXRSYXRpbmcubWF4KSB8fFxuICAgICAgICAgICAgICAgIGNyZWRpdFZhbHVlIDxcbiAgICAgICAgICAgICAgICAgIE51bWJlcih0aGlzLmFjdG9yLm9jY3VwYXRpb24uc3lzdGVtLmNyZWRpdFJhdGluZy5taW4pXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihcbiAgICAgICAgICAgICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuQ3JlZGl0T3V0T2ZSYW5nZScsIHtcbiAgICAgICAgICAgICAgICAgICAgbWluOiBOdW1iZXIoXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3Rvci5vY2N1cGF0aW9uLnN5c3RlbS5jcmVkaXRSYXRpbmcubWluXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIG1heDogTnVtYmVyKFxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0b3Iub2NjdXBhdGlvbi5zeXN0ZW0uY3JlZGl0UmF0aW5nLm1heFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYXR0cmlidXRlLXZhbHVlJykpIHtcbiAgICAgICAgICAvLyBUT0RPIDogY2hlY2sgd2h5IFNBTiBvbmx5ID9cbiAgICAgICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5uYW1lID09PSAnc3lzdGVtLmF0dHJpYnMuc2FuLnZhbHVlJykge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5hY3Rvci5zZXRTYW4oXG4gICAgICAgICAgICAgIHBhcnNlSW50KGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWUpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICB0aGlzLnJlbmRlcih0cnVlKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0Lm5hbWUgPT09ICdzeXN0ZW0uYXR0cmlicy5ocC52YWx1ZScpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYWN0b3Iuc2V0SHAoXG4gICAgICAgICAgICAgIHBhcnNlSW50KGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWUpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICB0aGlzLnJlbmRlcih0cnVlKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd0ZXh0LWFyZWEnKSkge1xuICAgICAgICAgIHRoaXMuYWN0b3IudXBkYXRlVGV4dEFyZWEoZXZlbnQuY3VycmVudFRhcmdldClcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYmlvLXNlY3Rpb24tdmFsdWUnKSkge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoXG4gICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5iaW8tc2VjdGlvbicpLmRhdGFzZXQuaW5kZXhcbiAgICAgICAgICApXG4gICAgICAgICAgYXdhaXQgdGhpcy5hY3Rvci51cGRhdGVCaW9WYWx1ZShpbmRleCwgZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYmlvLXNlY3Rpb24tdGl0bGUnKSkge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoXG4gICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5iaW8tc2VjdGlvbicpLmRhdGFzZXQuaW5kZXhcbiAgICAgICAgICApXG4gICAgICAgICAgdGhpcy5hY3Rvci51cGRhdGVCaW9UaXRsZShpbmRleCwgZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbnBjLXNraWxsLXNjb3JlJykpIHtcbiAgICAgICAgICBjb25zdCBza2lsbCA9IHRoaXMuYWN0b3IuaXRlbXMuZ2V0KFxuICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpLmRhdGFzZXQuc2tpbGxJZFxuICAgICAgICAgIClcbiAgICAgICAgICBpZiAoc2tpbGwpIHtcbiAgICAgICAgICAgIGF3YWl0IHNraWxsLnVwZGF0ZVZhbHVlKGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWUpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdza2lsbC1uYW1lJykgfHxcbiAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnaXRlbS1uYW1lJylcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuYWN0b3IuaXRlbXMuZ2V0KFxuICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpLmRhdGFzZXQuc2tpbGxJZFxuICAgICAgICAgIClcbiAgICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHt9XG4gICAgICAgICAgICBpZiAoaXRlbS5zeXN0ZW0ucHJvcGVydGllcy5zcGVjaWFsKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gQ29DN0l0ZW0uZ2V0TmFtZVBhcnRzU3BlYyhcbiAgICAgICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlLFxuICAgICAgICAgICAgICAgIGl0ZW0uc3lzdGVtLnNwZWNpYWxpemF0aW9uXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgZGF0YS5uYW1lID0gcGFydHMubmFtZVxuICAgICAgICAgICAgICBkYXRhWydzeXN0ZW0uc2tpbGxOYW1lJ10gPSBwYXJ0cy5za2lsbE5hbWVcbiAgICAgICAgICAgICAgZGF0YVsnc3lzdGVtLnNwZWNpYWxpemF0aW9uJ10gPSBwYXJ0cy5zcGVjaWFsaXphdGlvblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZGF0YVsnc3lzdGVtLnNraWxsTmFtZSddID0gZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICBkYXRhLm5hbWUgPSBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCBpdGVtLnVwZGF0ZShkYXRhKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnY2hhcmFjdGVyaXN0aWMtZm9ybXVsYScpKSB7XG4gICAgICAgICAgLy8gdGVzdGVyIHNpIGMnZXN0IHZpZGVcbiAgICAgICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIC8vIE9uIHRlc3RlIHNpIGMnZXN0IHVuZSBmb3JtdWxlIHZhbGlkZSAhXG4gICAgICAgICAgICBjb25zdCByID0gbmV3IFJvbGwoZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZSlcbiAgICAgICAgICAgIGF3YWl0IHIucm9sbCh7IGFzeW5jOiB0cnVlIH0pXG4gICAgICAgICAgICBpZiAoaXNOYU4oci50b3RhbCkgfHwgdHlwZW9mIHIudG90YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5FcnJvckludmFsaWRGb3JtdWxhJywge1xuICAgICAgICAgICAgICAgICAgdmFsdWU6IGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIGZvcm1EYXRhW2V2ZW50LmN1cnJlbnRUYXJnZXQubmFtZV0gPSBnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgICAgICAgICdDb0M3LkVycm9ySW52YWxpZCdcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYXR0cmlidXRlLXZhbHVlJykpIHtcbiAgICAgICAgICAvLyB0ZXN0ZXIgc2kgbGUgZGIgcmV0b3VybsOpIGVzdCB2YWxpZGUuXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZS5sZW5ndGggIT09IDAgJiZcbiAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLmF0dHJpYnV0ZScpLmRhdGFzZXQuYXR0cmliID09PSAnZGInXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBPbiB0ZXN0ZSBzaSBjJ2VzdCB1bmUgZm9ybXVsZSB2YWxpZGUgIVxuICAgICAgICAgICAgY29uc3QgciA9IG5ldyBSb2xsKGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWUpXG4gICAgICAgICAgICBhd2FpdCByLnJvbGwoeyBhc3luYzogdHJ1ZSB9KVxuICAgICAgICAgICAgaWYgKGlzTmFOKHIudG90YWwpIHx8IHIudG90YWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICAgICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRXJyb3JJbnZhbGlkRm9ybXVsYScsIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBmb3JtRGF0YVtldmVudC5jdXJyZW50VGFyZ2V0Lm5hbWVdID0gZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICAgICAgICAnQ29DNy5FcnJvckludmFsaWQnXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBsZSBza2lsbCBhc3NvY2nDqSBhIGwnYXJtZSBhIGNoYW5nw6lcbiAgICAgICAgLy8gVE9ETyA6IEZhY3RvcmlzYXRpb24gZHUgc3dpdGNoXG4gICAgICAgIC8vIFRPRE8gOiByZW1wbGFjZXIgbGVzIHN0cmluZ3MgcGFyIGRlIGNvbnN0YW50ZXMgKGl0ZW0uc2tpbGwubWFpbiAuLi4pXG4gICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnd2VhcG9uLXNraWxsJykpIHtcbiAgICAgICAgICBjb25zdCB3ZWFwb24gPSB0aGlzLmFjdG9yLml0ZW1zLmdldChcbiAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLml0ZW0nKS5kYXRhc2V0Lml0ZW1JZFxuICAgICAgICAgIClcbiAgICAgICAgICBjb25zdCBza2lsbCA9IHRoaXMuYWN0b3IuaXRlbXMuZ2V0KFxuICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5vcHRpb25zW2V2ZW50LmN1cnJlbnRUYXJnZXQuc2VsZWN0ZWRJbmRleF0udmFsdWVcbiAgICAgICAgICApXG4gICAgICAgICAgaWYgKHdlYXBvbiAmJiBza2lsbCkge1xuICAgICAgICAgICAgc3dpdGNoIChldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuc2tpbGwpIHtcbiAgICAgICAgICAgICAgY2FzZSAnbWFpbic6XG4gICAgICAgICAgICAgICAgYXdhaXQgd2VhcG9uLnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgICAnc3lzdGVtLnNraWxsLm1haW4uaWQnOiBza2lsbC5pZCxcbiAgICAgICAgICAgICAgICAgICdzeXN0ZW0uc2tpbGwubWFpbi5uYW1lJzogc2tpbGwubmFtZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgY2FzZSAnYWx0ZXJuYXRpdic6XG4gICAgICAgICAgICAgICAgYXdhaXQgd2VhcG9uLnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgICAnc3lzdGVtLnNraWxsLmFsdGVybmF0aXYuaWQnOiBza2lsbC5pZCxcbiAgICAgICAgICAgICAgICAgICdzeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5uYW1lJzogc2tpbGwubmFtZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBMZSBub20gZGUgbCdhcm1lIGEgY2hhbmfDqVxuICAgICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3dlYXBvbi1uYW1lJykpIHtcbiAgICAgICAgICBjb25zdCB3ZWFwb24gPSB0aGlzLmFjdG9yLml0ZW1zLmdldChcbiAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLml0ZW0nKS5kYXRhc2V0Lml0ZW1JZFxuICAgICAgICAgIClcbiAgICAgICAgICBpZiAod2VhcG9uKSB7XG4gICAgICAgICAgICBhd2FpdCB3ZWFwb24udXBkYXRlKHsgbmFtZTogZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZSB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGxlcyBkZWdhdHMgZGUgbCdhcm1lIG9uIGNoYW5nw6lzLlxuICAgICAgICAvLyBUT0RPIDogRmFjdG9yaXNhdGlvbiBkdSBzd2l0Y2hcbiAgICAgICAgLy8gVE9ETyA6IHJlbXBsYWNlciBsZXMgc3RyaW5ncyBwYXIgZGUgY29uc3RhbnRlcyAoaXRlbS5yYW5nZS5ub3JtYWwgLi4uKVxuICAgICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2RhbWFnZS1mb3JtdWxhJykpIHtcbiAgICAgICAgICBjb25zdCB3ZWFwb24gPSB0aGlzLmFjdG9yLml0ZW1zLmdldChcbiAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLml0ZW0nKS5kYXRhc2V0Lml0ZW1JZFxuICAgICAgICAgIClcbiAgICAgICAgICBpZiAod2VhcG9uKSB7XG4gICAgICAgICAgICAvLyB0ZXN0ZSBsYSB2YWxpZGl0w6kgZGUgbGEgZm9ybXVsZS5cbiAgICAgICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICBjb25zdCByID0gbmV3IFJvbGwoZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZSlcbiAgICAgICAgICAgICAgYXdhaXQgci5yb2xsKHsgYXN5bmM6IHRydWUgfSlcbiAgICAgICAgICAgICAgaWYgKGlzTmFOKHIudG90YWwpIHx8IHR5cGVvZiByLnRvdGFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgICAgICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkVycm9yVW5hYmxlVG9QYXJzZUZvcm11bGEnLCB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5yYW5nZSkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAnbm9ybWFsJzpcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgd2VhcG9uLnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgJ3N5c3RlbS5yYW5nZS5ub3JtYWwuZGFtYWdlJzogZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgY2FzZSAnbG9uZyc6XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHdlYXBvbi51cGRhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICdzeXN0ZW0ucmFuZ2UubG9uZy5kYW1hZ2UnOiBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICBjYXNlICdleHRyZW1lJzpcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgd2VhcG9uLnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgJ3N5c3RlbS5yYW5nZS5leHRyZW1lLmRhbWFnZSc6IGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnJhbmdlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbm9ybWFsJzpcbiAgICAgICAgICAgICAgICAgIGF3YWl0IHdlYXBvbi51cGRhdGUoe1xuICAgICAgICAgICAgICAgICAgICAnc3lzdGVtLnJhbmdlLm5vcm1hbC5kYW1hZ2UnOiBudWxsXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICdsb25nJzpcbiAgICAgICAgICAgICAgICAgIGF3YWl0IHdlYXBvbi51cGRhdGUoe1xuICAgICAgICAgICAgICAgICAgICAnc3lzdGVtLnJhbmdlLmxvbmcuZGFtYWdlJzogbnVsbFxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAnZXh0cmVtZSc6XG4gICAgICAgICAgICAgICAgICBhd2FpdCB3ZWFwb24udXBkYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgJ3N5c3RlbS5yYW5nZS5leHRyZW1lLmRhbWFnZSc6IG51bGxcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm9iamVjdC51cGRhdGUoZm9ybURhdGEpXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBmb3VuZHJ5LCBnYW1lLCBUZXh0RWRpdG9yICovXG5pbXBvcnQgeyBDb0M3QWN0b3JTaGVldCB9IGZyb20gJy4vYmFzZS5qcydcbmltcG9ydCB7IFJvbGxEaWFsb2cgfSBmcm9tICcuLi8uLi9hcHBzL3JvbGwtZGlhbG9nLmpzJ1xuaW1wb3J0IHsgQ29DN0xpbmsgfSBmcm9tICcuLi8uLi9hcHBzL2NvYzctbGluay5qcydcbmltcG9ydCB7IGNoYXRIZWxwZXIsIGlzQ3RybEtleSB9IGZyb20gJy4uLy4uL2NoYXQvaGVscGVyLmpzJ1xuaW1wb3J0IHsgU2FuQ2hlY2tDYXJkIH0gZnJvbSAnLi4vLi4vY2hhdC9jYXJkcy9zYW4tY2hlY2suanMnXG5pbXBvcnQgeyBDb0M3Q29udGV4dE1lbnUgfSBmcm9tICcuLi8uLi9jb250ZXh0LW1lbnUuanMnXG5pbXBvcnQgeyBDb0M3Q2hhdE1lc3NhZ2UgfSBmcm9tICcuLi8uLi9hcHBzL2NvYzctY2hhdC1tZXNzYWdlLmpzJ1xuXG4vKipcbiAqIEV4dGVuZCB0aGUgYmFzaWMgQWN0b3JTaGVldCB3aXRoIHNvbWUgdmVyeSBzaW1wbGUgbW9kaWZpY2F0aW9uc1xuICovXG5leHBvcnQgY2xhc3MgQ29DN05QQ1NoZWV0IGV4dGVuZHMgQ29DN0FjdG9yU2hlZXQge1xuICAvKipcbiAgICogUHJlcGFyZSBkYXRhIGZvciByZW5kZXJpbmcgdGhlIEFjdG9yIHNoZWV0XG4gICAqIFRoZSBwcmVwYXJlZCBkYXRhIG9iamVjdCBjb250YWlucyBib3RoIHRoZSBhY3RvciBkYXRhIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBzaGVldCBvcHRpb25zXG4gICAqL1xuICBhc3luYyBnZXREYXRhICgpIHtcbiAgICBjb25zdCBzaGVldERhdGEgPSBhd2FpdCBzdXBlci5nZXREYXRhKClcblxuICAgIC8vIFRPRE8gOiBkbyB3ZSBuZWVkIHRoYXQgP1xuICAgIHNoZWV0RGF0YS5hbGxvd0Zvcm11bGEgPSB0cnVlXG4gICAgc2hlZXREYXRhLmRpc3BsYXlGb3JtdWxhID0gKHRoaXMuYWN0b3IuZ2V0QWN0b3JGbGFnKCdkaXNwbGF5Rm9ybXVsYScpIHx8IGZhbHNlKVxuXG4gICAgc2hlZXREYXRhLmhhc1NhbiA9IHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5hdHRyaWJzLnNhbi52YWx1ZSAhPT0gbnVsbFxuICAgIHNoZWV0RGF0YS5oYXNNcCA9IHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5hdHRyaWJzLm1wLnZhbHVlICE9PSBudWxsXG4gICAgc2hlZXREYXRhLmhhc0x1Y2sgPSBzaGVldERhdGEuZGF0YS5zeXN0ZW0uYXR0cmlicy5sY2sudmFsdWUgIT09IG51bGxcblxuICAgIHNoZWV0RGF0YS5pc0NyZWF0dXJlID0gZmFsc2VcblxuICAgIHNoZWV0RGF0YS5zaG93SW52ZW50b3J5SXRlbXMgPVxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNoZWV0RGF0YS5pdGVtc0J5VHlwZSwgJ2l0ZW0nKSB8fFxuICAgICAgIXNoZWV0RGF0YS5kYXRhLnN5c3RlbS5mbGFncy5sb2NrZWRcbiAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeUJvb2tzID1cbiAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzaGVldERhdGEuaXRlbXNCeVR5cGUsICdib29rJykgfHxcbiAgICAgICFzaGVldERhdGEuZGF0YS5zeXN0ZW0uZmxhZ3MubG9ja2VkXG4gICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlTcGVsbHMgPVxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNoZWV0RGF0YS5pdGVtc0J5VHlwZSwgJ3NwZWxsJykgfHxcbiAgICAgICFzaGVldERhdGEuZGF0YS5zeXN0ZW0uZmxhZ3MubG9ja2VkXG4gICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlUYWxlbnRzID1cbiAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzaGVldERhdGEuaXRlbXNCeVR5cGUsICd0YWxlbnQnKSB8fFxuICAgICAgKCFzaGVldERhdGEuZGF0YS5zeXN0ZW0uZmxhZ3MubG9ja2VkICYmIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3B1bHBSdWxlVGFsZW50cycpKVxuICAgIHNoZWV0RGF0YS5zaG93SW52ZW50b3J5U3RhdHVzZXMgPVxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNoZWV0RGF0YS5pdGVtc0J5VHlwZSwgJ3N0YXR1cycpIHx8XG4gICAgICAhc2hlZXREYXRhLmRhdGEuc3lzdGVtLmZsYWdzLmxvY2tlZFxuICAgIHNoZWV0RGF0YS5zaG93SW52ZW50b3J5V2VhcG9ucyA9IGZhbHNlXG4gICAgc2hlZXREYXRhLmhhc0ludmVudG9yeSA9XG4gICAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeUl0ZW1zIHx8XG4gICAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeUJvb2tzIHx8XG4gICAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeVNwZWxscyB8fFxuICAgICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlUYWxlbnRzIHx8XG4gICAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeVN0YXR1c2VzIHx8XG4gICAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeVdlYXBvbnNcblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZEJpb2dyYXBoeVBlcnNvbmFsRGVzY3JpcHRpb24gPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uYmlvZ3JhcGh5LnBlcnNvbmFsRGVzY3JpcHRpb24/LnZhbHVlLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25LZWVwZXIgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24ua2VlcGVyLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgcmV0dXJuIHNoZWV0RGF0YVxuICB9XG5cbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuXG4gICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3VzZUNvbnRleHRNZW51cycpKSB7XG4gICAgICBpZiAoIXRoaXMubWVudXMpIHRoaXMubWVudXMgPSBbXVxuXG4gICAgICBjb25zdCBzYW5sb3NzTWVudSA9IHtcbiAgICAgICAgaWQ6ICdzYW4tbG9zcy1yb2xsJyxcbiAgICAgICAgY2xhc3NlczogJ3JvbGwtbWVudScsXG4gICAgICAgIHNlY3Rpb246IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjbGFzc2VzOiAnbWFpbicsXG4gICAgICAgICAgICBpdGVtczogW1xuICAgICAgICAgICAgICB7IGFjdGlvbjogJ2xpbmstdG9vbCcsIGxhYmVsOiAnT3BlbiBpbiBsaW5rIHRvb2wnIH0sXG4gICAgICAgICAgICAgIHsgYWN0aW9uOiAnc2VuZC1jaGF0JywgbGFiZWw6ICdTZW5kIHRvIGNoYXQnIH0sXG4gICAgICAgICAgICAgIHsgYWN0aW9uOiAnY29weS10by1jbGlwYm9hcmQnLCBsYWJlbDogJ0NvcHkgdG8gY2xpcC1ib2FyZCcgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cblxuICAgICAgICBdXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNhbmxvc3NDb250ZXh0TWVudSA9IG5ldyBDb0M3Q29udGV4dE1lbnUoKVxuICAgICAgc2FubG9zc0NvbnRleHRNZW51LmJpbmQoc2FubG9zc01lbnUsIGh0bWwsIHRoaXMuX29uU2FuTG9zc0NvbnRleHRNZW51Q2xpY2suYmluZCh0aGlzKSlcbiAgICAgIHRoaXMubWVudXMucHVzaChzYW5sb3NzQ29udGV4dE1lbnUpXG4gICAgfVxuXG4gICAgaHRtbC5maW5kKCcucm9sbC1zYW4nKS5jbGljayh0aGlzLl9vblNhbkNoZWNrLmJpbmQodGhpcykpXG4gICAgLy8gaWYgKHRoaXMuYWN0b3IuaXNPd25lcikge1xuICAgIC8vICAgaHRtbFxuICAgIC8vICAgICAuZmluZCgnW25hbWU9XCJkYXRhLmF0dHJpYnMuaHAudmFsdWVcIl0nKVxuICAgIC8vICAgICAuY2hhbmdlKGV2ZW50ID0+IHRoaXMuYWN0b3Iuc2V0SGVhbHRoU3RhdHVzTWFudWFsbHkoZXZlbnQpKVxuICAgIC8vIH1cbiAgfVxuXG4gIGFzeW5jIF9vblNhbkxvc3NDb250ZXh0TWVudUNsaWNrIChldmVudCkge1xuICAgIGNvbnN0IHJvbGxPcHRpb25zID0ge1xuICAgICAgcm9sbFR5cGU6IENvQzdDaGF0TWVzc2FnZS5ST0xMX1RZUEVfRU5DT1VOVEVSLFxuICAgICAgcHJldmVudFN0YW5kYnk6IHRydWUsXG4gICAgICBmYXN0Rm9yd2FyZDogZmFsc2UsXG4gICAgICBldmVudCxcbiAgICAgIGNhcmRUeXBlOiBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX1NBTl9DSEVDSyxcbiAgICAgIGFjdG9yOiB0aGlzLmFjdG9yXG4gICAgfVxuXG4gICAgc3dpdGNoIChldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuYWN0aW9uKSB7XG4gICAgICBjYXNlICgnbGluay10b29sJyk6XG4gICAgICAgIHJvbGxPcHRpb25zLmNhcmRUeXBlID0gQ29DN0NoYXRNZXNzYWdlLkNBUkRfVFlQRV9OT05FXG4gICAgICAgIHJvbGxPcHRpb25zLmNyZWF0ZUVuY291bnRlciA9IHRydWVcbiAgICAgICAgcm9sbE9wdGlvbnMub3BlbkxpbmtUb29sID0gdHJ1ZVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAoJ3NlbmQtY2hhdCcpOlxuICAgICAgICByb2xsT3B0aW9ucy5jYXJkVHlwZSA9IENvQzdDaGF0TWVzc2FnZS5DQVJEX1RZUEVfTk9ORVxuICAgICAgICByb2xsT3B0aW9ucy5jcmVhdGVFbmNvdW50ZXIgPSB0cnVlXG4gICAgICAgIHJvbGxPcHRpb25zLnNlbmRUb0NoYXQgPSB0cnVlXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICgnY29weS10by1jbGlwYm9hcmQnKTpcbiAgICAgICAgcm9sbE9wdGlvbnMuY2FyZFR5cGUgPSBDb0M3Q2hhdE1lc3NhZ2UuQ0FSRF9UWVBFX05PTkVcbiAgICAgICAgcm9sbE9wdGlvbnMuY3JlYXRlRW5jb3VudGVyID0gdHJ1ZVxuICAgICAgICByb2xsT3B0aW9ucy5zZW5kVG9DbGlwYm9hcmQgPSB0cnVlXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVha1xuICAgIH1cbiAgICBDb0M3Q2hhdE1lc3NhZ2UudHJpZ2dlcihyb2xsT3B0aW9ucylcbiAgfVxuXG4gIGFzeW5jIF9vblNhbkNoZWNrIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBpZiAoXG4gICAgICAhdGhpcy5hY3Rvci5zeXN0ZW0uc3BlY2lhbC5zYW5Mb3NzLmNoZWNrUGFzc2VkICYmXG4gICAgICAhdGhpcy5hY3Rvci5zeXN0ZW0uc3BlY2lhbC5zYW5Mb3NzLmNoZWNrRmFpbGxlZFxuICAgICkge1xuICAgICAgLy8gdWkubm90aWZpY2F0aW9ucy5pbmZvKCdObyBzYW5pdHkgbG9zcyB2YWx1ZScpO1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmIChcbiAgICAgIGlzQ3RybEtleShldmVudCkgJiZcbiAgICAgIGdhbWUudXNlci5pc0dNXG4gICAgKSB7XG4gICAgICBsZXQgZGlmZmljdWx0eSwgbW9kaWZpZXJcbiAgICAgIGlmICghZXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgICAgY29uc3QgdXNhZ2UgPSBhd2FpdCBSb2xsRGlhbG9nLmNyZWF0ZSh7XG4gICAgICAgICAgZGlzYWJsZUZsYXREaWNlTW9kaWZpZXI6IHRydWVcbiAgICAgICAgfSlcbiAgICAgICAgaWYgKHVzYWdlKSB7XG4gICAgICAgICAgbW9kaWZpZXIgPSBOdW1iZXIodXNhZ2UuZ2V0KCdib251c0RpY2UnKSlcbiAgICAgICAgICBkaWZmaWN1bHR5ID0gTnVtYmVyKHVzYWdlLmdldCgnZGlmZmljdWx0eScpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBsaW5rRGF0YSA9IHtcbiAgICAgICAgY2hlY2s6ICdzYW5sb3NzJyxcbiAgICAgICAgc2FuTWluOiB0aGlzLmFjdG9yLnN5c3RlbS5zcGVjaWFsLnNhbkxvc3MuY2hlY2tQYXNzZWQsXG4gICAgICAgIHNhbk1heDogdGhpcy5hY3Rvci5zeXN0ZW0uc3BlY2lhbC5zYW5Mb3NzLmNoZWNrRmFpbGxlZCxcbiAgICAgICAgc2FuUmVhc29uOiB0aGlzLmFjdG9yLnN5c3RlbS5pbmZvcy50eXBlPy5sZW5ndGhcbiAgICAgICAgICA/IHRoaXMuYWN0b3Iuc3lzdGVtLmluZm9zLnR5cGVcbiAgICAgICAgICA6IHRoaXMuYWN0b3IubmFtZSxcbiAgICAgICAgdG9rZW5LZXk6IHRoaXMuYWN0b3IuYWN0b3JLZXlcbiAgICAgIH1cbiAgICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnY29yZScsICdyb2xsTW9kZScpID09PSAnYmxpbmRyb2xsJykge1xuICAgICAgICBsaW5rRGF0YS5ibGluZCA9IHRydWVcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbW9kaWZpZXIgIT09ICd1bmRlZmluZWQnKSBsaW5rRGF0YS5tb2RpZmllciA9IG1vZGlmaWVyXG4gICAgICBpZiAodHlwZW9mIGRpZmZpY3VsdHkgIT09ICd1bmRlZmluZWQnKSBsaW5rRGF0YS5kaWZmaWN1bHR5ID0gZGlmZmljdWx0eVxuICAgICAgY29uc3QgbGluayA9IChuZXcgQ29DN0xpbmsoKSkuX2NyZWF0ZURvY3VtZW50TGluayhsaW5rRGF0YSlcbiAgICAgIGlmIChsaW5rKSB7XG4gICAgICAgIGNoYXRIZWxwZXIuY3JlYXRlTWVzc2FnZShcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuTWVzc2FnZUNoZWNrUmVxdWVzdGVkV2FpdCcsIHtcbiAgICAgICAgICAgIGNoZWNrOiBsaW5rXG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzYW5EYXRhID0ge1xuICAgICAgICBzYW5NYXg6IHRoaXMuYWN0b3Iuc2FuTG9zc0NoZWNrRmFpbGxlZCxcbiAgICAgICAgc2FuTWluOiB0aGlzLmFjdG9yLnNhbkxvc3NDaGVja1Bhc3NlZCxcbiAgICAgICAgc2FuUmVhc29uOiB0aGlzLmFjdG9yLnN5c3RlbS5pbmZvcy50eXBlPy5sZW5ndGhcbiAgICAgICAgICA/IHRoaXMuYWN0b3Iuc3lzdGVtLmluZm9zLnR5cGVcbiAgICAgICAgICA6IHRoaXMuYWN0b3IubmFtZSxcbiAgICAgICAgdG9rZW5LZXk6IHRoaXMuYWN0b3IuYWN0b3JLZXlcbiAgICAgIH1cbiAgICAgIFNhbkNoZWNrQ2FyZC5jaGVja1RhcmdldHMoc2FuRGF0YSwgZXZlbnQuc2hpZnRLZXkpXG4gICAgfVxuICB9XG5cbiAgb25DbG9zZVNoZWV0ICgpIHtcbiAgICB0aGlzLmFjdG9yLnVuc2V0QWN0b3JGbGFnKCdkaXNwbGF5Rm9ybXVsYScpXG4gICAgc3VwZXIub25DbG9zZVNoZWV0KClcbiAgfVxuXG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbiAgLyoqXG4gICAqIEV4dGVuZCBhbmQgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgb3B0aW9ucyB1c2VkIGJ5IHRoZSBBY3RvciBTaGVldFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cblxuICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zICgpIHtcbiAgICByZXR1cm4gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgY2xhc3NlczogWydjb2M3JywgJ3NoZWV0JywgJ2FjdG9yJywgJ25wYyddLFxuICAgICAgZHJhZ0Ryb3A6IFt7IGRyYWdTZWxlY3RvcjogJy5pdGVtJywgZHJvcFNlbGVjdG9yOiBudWxsIH1dLFxuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FjdG9ycy9ucGMtc2hlZXQuaHRtbCcsXG4gICAgICB3aWR0aDogNTgwLFxuICAgICAgcmVzaXphYmxlOiBmYWxzZSxcbiAgICAgIG1pbmltaXphYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbXBsZW1lbnQgdGhlIF91cGRhdGVPYmplY3QgbWV0aG9kIGFzIHJlcXVpcmVkIGJ5IHRoZSBwYXJlbnQgY2xhc3Mgc3BlY1xuICAgKiBUaGlzIGRlZmluZXMgaG93IHRvIHVwZGF0ZSB0aGUgc3ViamVjdCBvZiB0aGUgZm9ybSB3aGVuIHRoZSBmb3JtIGlzIHN1Ym1pdHRlZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cblxuICBhc3luYyBfdXBkYXRlT2JqZWN0IChldmVudCwgZm9ybURhdGEpIHtcbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0KSB7XG4gICAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnY2hhcmFjdGVyaXN0aWMtc2NvcmUnKSkge1xuICAgICAgICAgIHRoaXMuYWN0b3Iuc2V0Q2hhcmFjdGVyaXN0aWMoXG4gICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0Lm5hbWUsXG4gICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlXG4gICAgICAgICAgKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5fdXBkYXRlT2JqZWN0KGV2ZW50LCBmb3JtRGF0YSlcbiAgfVxuXG4gIHN0YXRpYyBmb3JjZUF1dG8gKGFwcCwgaHRtbCkge1xuICAgIGh0bWwuaGVpZ2h0KCdhdXRvJylcbiAgfVxuXG4gIHNldFBvc2l0aW9uIChhKSB7XG4gICAgc3VwZXIuc2V0UG9zaXRpb24oYSlcbiAgICBDb0M3TlBDU2hlZXQuZm9yY2VBdXRvKGEsIHRoaXMuX2VsZW1lbnQpXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBmb3VuZHJ5ICovXG5pbXBvcnQgeyBDb0M3TlBDU2hlZXQgfSBmcm9tICcuL25wYy1zaGVldC5qcydcblxuLyoqXG4gKiBFeHRlbmQgdGhlIGJhc2ljIEFjdG9yU2hlZXQgd2l0aCBzb21lIHZlcnkgc2ltcGxlIG1vZGlmaWNhdGlvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIENvQzdDcmVhdHVyZVNoZWV0IGV4dGVuZHMgQ29DN05QQ1NoZWV0IHtcbiAgLyoqXG4gICAqIFByZXBhcmUgZGF0YSBmb3IgcmVuZGVyaW5nIHRoZSBBY3RvciBzaGVldFxuICAgKiBUaGUgcHJlcGFyZWQgZGF0YSBvYmplY3QgY29udGFpbnMgYm90aCB0aGUgYWN0b3IgZGF0YSBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgc2hlZXQgb3B0aW9uc1xuICAgKi9cbiAgYXN5bmMgZ2V0RGF0YSAoKSB7XG4gICAgY29uc3Qgc2hlZXREYXRhID0gYXdhaXQgc3VwZXIuZ2V0RGF0YSgpXG4gICAgc2hlZXREYXRhLmlzQ3JlYXR1cmUgPSB0cnVlXG4gICAgcmV0dXJuIHNoZWV0RGF0YVxuICB9XG5cbiAgLyoqXG4gICAqIEV4dGVuZCBhbmQgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgb3B0aW9ucyB1c2VkIGJ5IHRoZSBBY3RvciBTaGVldFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc3VwZXIuZGVmYXVsdE9wdGlvbnMsIHtcbiAgICAgIGNsYXNzZXM6IFsnY29jNycsICdzaGVldCcsICdhY3RvcicsICducGMnLCAnY3JlYXR1cmUnXVxuICAgIH0pXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCAkLCBGb3JtQXBwbGljYXRpb24sIGZvdW5kcnksIGdhbWUgKi9cbmV4cG9ydCBjbGFzcyBDb0M3Q3JlYXRlTXl0aG9zRW5jb3VudGVyIGV4dGVuZHMgRm9ybUFwcGxpY2F0aW9uIHtcbiAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc3VwZXIuZGVmYXVsdE9wdGlvbnMsIHtcbiAgICAgIGNsYXNzZXM6IFsnY29jNyddLFxuICAgICAgdGl0bGU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5TYW5pdHlMb3NzVHlwZURpYWxvZ1RpdGxlJyksXG4gICAgICB0ZW1wbGF0ZTogJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYXBwcy9zYW5pdHktbG9zcy10eXBlLmhicycsXG4gICAgICBoZWlnaHQ6ICdhdXRvJ1xuICAgIH0pXG4gIH1cblxuICBhc3luYyBnZXREYXRhICgpIHtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgc3VwZXIuZ2V0RGF0YSgpXG4gICAgZGF0YS5pc0ltbXVuaXR5ID0gZGF0YS5vYmplY3QudHlwZSA9PT0gJ2ltbXVuaXR5J1xuICAgIHJldHVybiBkYXRhXG4gIH1cblxuICBhY3RpdmF0ZUxpc3RlbmVycyAoaHRtbCkge1xuICAgIGh0bWwuZmluZCgnLmZpZWxkX3R5cGUnKS5jaGFuZ2UodGhpcy5fb25TZWxlY3RDaGFuZ2UuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJy5kaWFsb2ctYnV0dG9uJykuY2xpY2sodGhpcy5fb25CdXR0b25DbGljay5iaW5kKHRoaXMpKVxuICAgIHN1cGVyLmFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpXG4gIH1cblxuICBfb25CdXR0b25DbGljayAoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmJ1dHRvbiA9PT0gJ2FkZCcpIHtcbiAgICAgIGNvbnN0IGh0bWwgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmNsb3Nlc3QoJy53aW5kb3ctY29udGVudCcpXG4gICAgICBjb25zdCB0eXBlID0gaHRtbC5maW5kKCcuZmllbGRfdHlwZScpLnZhbCgpXG4gICAgICBjb25zdCBuYW1lID0gaHRtbC5maW5kKCcuZmllbGRfbmFtZScpLnZhbCgpXG4gICAgICBjb25zdCB2YWx1ZSA9IHBhcnNlSW50KGh0bWwuZmluZCgnLmZpZWxkX3ZhbHVlJykudmFsKCkpXG4gICAgICBjb25zdCBzYW5pdHlMb3NzRXZlbnRzID1cbiAgICAgICAgdGhpcy5vYmplY3QuYWN0b3Iuc3lzdGVtLnNhbml0eUxvc3NFdmVudHMgPz8gW11cbiAgICAgIHNhbml0eUxvc3NFdmVudHMucHVzaCh7XG4gICAgICAgIHR5cGU6IG5hbWUsXG4gICAgICAgIHRvdGFsTG9zczogdmFsdWUsXG4gICAgICAgIGltbXVuaXR5OiB0eXBlID09PSAnaW1tdW5pdHknXG4gICAgICB9KVxuICAgICAgc2FuaXR5TG9zc0V2ZW50cy5zb3J0KGZ1bmN0aW9uIChsZWZ0LCByaWdodCkge1xuICAgICAgICByZXR1cm4gbGVmdC50eXBlLmxvY2FsZUNvbXBhcmUocmlnaHQudHlwZSlcbiAgICAgIH0pXG4gICAgICB0aGlzLm9iamVjdC5hY3Rvci51cGRhdGUoeyAnZGF0YS5zYW5pdHlMb3NzRXZlbnRzJzogc2FuaXR5TG9zc0V2ZW50cyB9KVxuICAgIH1cbiAgICB0aGlzLmNsb3NlKClcbiAgfVxuXG4gIF9vblNlbGVjdENoYW5nZSAoZXZlbnQpIHtcbiAgICBjb25zdCBodG1sID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5jbG9zZXN0KCcud2luZG93LWNvbnRlbnQnKVxuICAgIHRoaXMub2JqZWN0Lm5hbWUgPSBodG1sLmZpbmQoJy5maWVsZF9uYW1lJykudmFsKClcbiAgICB0aGlzLm9iamVjdC50eXBlID0gaHRtbC5maW5kKCcuZmllbGRfdHlwZScpLnZhbCgpXG4gICAgdGhpcy5yZW5kZXIodHJ1ZSlcbiAgfVxuXG4gIGFzeW5jIF91cGRhdGVPYmplY3QgKGV2ZW50LCBmb3JtRGF0YSkge31cbn1cbiIsIi8qIGdsb2JhbCAkLCBGb250RmFjZSwgZm91bmRyeSwgZ2FtZSwgVGV4dEVkaXRvciwgdWkgKi9cbmltcG9ydCB7IENPQzcgfSBmcm9tICcuLi8uLi9jb25maWcuanMnXG5pbXBvcnQgeyBDb0NBY3RvciB9IGZyb20gJy4uL2FjdG9yLmpzJ1xuaW1wb3J0IHsgQ29DN0FjdG9yU2hlZXQgfSBmcm9tICcuL2Jhc2UuanMnXG5pbXBvcnQgeyBDb0M3Q3JlYXRlTXl0aG9zRW5jb3VudGVyIH0gZnJvbSAnLi4vLi4vYXBwcy9jcmVhdGUtbXl0aG9zLWVuY291bnRlcnMuanMnXG5pbXBvcnQgeyBjaGF0SGVscGVyIH0gZnJvbSAnLi4vLi4vY2hhdC9oZWxwZXIuanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3Q2hhcmFjdGVyU2hlZXQgZXh0ZW5kcyBDb0M3QWN0b3JTaGVldCB7XG4gIF9nZXRIZWFkZXJCdXR0b25zICgpIHtcbiAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci5uYW1lID09PSAnQ29DN0NoYXJhY3RlclNoZWV0Jykge1xuICAgICAgaWYgKCF0aGlzLnN1bW1hcml6ZWQpIHRoaXMuc3VtbWFyaXplZCA9IGZhbHNlXG4gICAgICBsZXQgYnV0dG9ucyA9IHN1cGVyLl9nZXRIZWFkZXJCdXR0b25zKClcbiAgICAgIGJ1dHRvbnMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBsYWJlbDogdGhpcy5zdW1tYXJpemVkXG4gICAgICAgICAgICA/IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5NYXhpbWl6ZScpXG4gICAgICAgICAgICA6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5TdW1tYXJpemUnKSxcbiAgICAgICAgICBjbGFzczogJ3Rlc3QtZXh0cmEtaWNvbicsXG4gICAgICAgICAgaWNvbjogdGhpcy5zdW1tYXJpemVkXG4gICAgICAgICAgICA/ICdmYXMgZmEtd2luZG93LW1heGltaXplJ1xuICAgICAgICAgICAgOiAnZmFzIGZhLXdpbmRvdy1taW5pbWl6ZScsXG4gICAgICAgICAgb25jbGljazogZXZlbnQgPT4gdGhpcy50b2dnbGVTaGVldE1vZGUoZXZlbnQpXG4gICAgICAgIH0vKiAsXG4gICAgICAgIHtcbiAgICAgICAgICBsYWJlbDogJycsXG4gICAgICAgICAgY2xhc3M6ICdkcmFnLXRlc3QtdGhpbmd5JyxcbiAgICAgICAgICBpY29uOiAnZ2FtZS1pY29uIGdhbWUtaWNvbi1kMTAnLFxuICAgICAgICAgIG9uZHJhZ3N0YXJ0OiAoKSA9PiB1aS5ub3RpZmljYXRpb25zLmluZm8oJ2RyYWcgc3RhcnRlZCcpXG4gICAgICAgIH0gKi9cbiAgICAgIF0uY29uY2F0KGJ1dHRvbnMpXG4gICAgICByZXR1cm4gYnV0dG9uc1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIuX2dldEhlYWRlckJ1dHRvbnMoKVxuICB9XG5cbiAgYXN5bmMgdG9nZ2xlU2hlZXRNb2RlIChldmVudCkge1xuICAgIHRoaXMuc3VtbWFyaXplZCA9ICF0aGlzLnN1bW1hcml6ZWRcbiAgICBsZXQgb3B0aW9ucyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKENvQzdDaGFyYWN0ZXJTaGVldC5kZWZhdWx0T3B0aW9ucylcbiAgICBpZiAodGhpcy5zdW1tYXJpemVkKSB7XG4gICAgICBvcHRpb25zID0gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChvcHRpb25zLCB7XG4gICAgICAgIGNsYXNzZXM6IFsnY29jNycsICdhY3RvcicsICdjaGFyYWN0ZXInLCAnc3VtbWFyaXplZCddLFxuICAgICAgICBoZWlnaHQ6IDIwMCxcbiAgICAgICAgcmVzaXphYmxlOiBmYWxzZSxcbiAgICAgICAgd2lkdGg6IDcwMFxuICAgICAgfSlcbiAgICB9XG4gICAgb3B0aW9ucy50b2tlbiA9IHRoaXMub3B0aW9ucy50b2tlblxuICAgIGF3YWl0IHRoaXMuY2xvc2UoKVxuICAgIGF3YWl0IHRoaXMucmVuZGVyKHRydWUsIG9wdGlvbnMpXG4gIH1cblxuICBhc3luYyBnZXREYXRhICgpIHtcbiAgICBjb25zdCBzaGVldERhdGEgPSBhd2FpdCBzdXBlci5nZXREYXRhKClcbiAgICBpZiAoXG4gICAgICB0aGlzLmlzRWRpdGFibGUgJiZcbiAgICAgIHR5cGVvZiB0aGlzLmFjdG9yLmdldEZsYWcoJ0NvQzcnLCAnc2tpbGxMaXN0TW9kZScpID09PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgYXdhaXQgdGhpcy5hY3Rvci5zZXRGbGFnKCdDb0M3JywgJ3NraWxsTGlzdE1vZGUnLCBmYWxzZSlcbiAgICB9XG4gICAgaWYgKFxuICAgICAgdGhpcy5pc0VkaXRhYmxlICYmXG4gICAgICB0eXBlb2YgdGhpcy5hY3Rvci5nZXRGbGFnKCdDb0M3JywgJ3NraWxsU2hvd1VuY29tbW9uJykgPT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICBhd2FpdCB0aGlzLmFjdG9yLnNldEZsYWcoJ0NvQzcnLCAnc2tpbGxTaG93VW5jb21tb24nLCB0cnVlKVxuICAgIH1cbiAgICBzaGVldERhdGEuc2tpbGxMaXN0TW9kZVZhbHVlID1cbiAgICAgIHRoaXMuYWN0b3IuZ2V0RmxhZygnQ29DNycsICdza2lsbExpc3RNb2RlJykgPz8gZmFsc2VcbiAgICBzaGVldERhdGEuc2tpbGxTaG93VW5jb21tb24gPVxuICAgICAgdGhpcy5hY3Rvci5nZXRGbGFnKCdDb0M3JywgJ3NraWxsU2hvd1VuY29tbW9uJykgPz8gdHJ1ZVxuICAgIHNoZWV0RGF0YS5zaG93SWNvbnNPbmx5ID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnc2hvd0ljb25zT25seScpXG5cbiAgICBpZiAodGhpcy5hY3Rvci5vY2N1cGF0aW9uKSB7XG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uaW5mb3Mub2NjdXBhdGlvbiA9IHRoaXMuYWN0b3Iub2NjdXBhdGlvbi5uYW1lXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uaW5mb3Mub2NjdXBhdGlvblNldCA9IHRydWVcbiAgICB9IGVsc2Ugc2hlZXREYXRhLmRhdGEuc3lzdGVtLmluZm9zLm9jY3VwYXRpb25TZXQgPSBmYWxzZVxuXG4gICAgaWYgKHRoaXMuYWN0b3IuYXJjaGV0eXBlKSB7XG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uaW5mb3MuYXJjaGV0eXBlID0gdGhpcy5hY3Rvci5hcmNoZXR5cGUubmFtZVxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmluZm9zLmFyY2hldHlwZVNldCA9IHRydWVcbiAgICB9IGVsc2Ugc2hlZXREYXRhLmRhdGEuc3lzdGVtLmluZm9zLmFyY2hldHlwZVNldCA9IGZhbHNlXG5cbiAgICBzaGVldERhdGEudG90YWxFeHBlcmllbmNlID0gdGhpcy5hY3Rvci5leHBlcmllbmNlUG9pbnRzXG4gICAgc2hlZXREYXRhLnRvdGFsT2NjdXBhdGlvbiA9IHRoaXMuYWN0b3Iub2NjdXBhdGlvblBvaW50c1NwZW50XG4gICAgc2hlZXREYXRhLmludmFsaWRPY2N1cGF0aW9uUG9pbnRzID1cbiAgICAgIE51bWJlcih0aGlzLmFjdG9yLm9jY3VwYXRpb25Qb2ludHNTcGVudCkgIT09XG4gICAgICBOdW1iZXIodGhpcy5hY3Rvci5zeXN0ZW0uZGV2ZWxvcG1lbnQ/Lm9jY3VwYXRpb24pXG4gICAgc2hlZXREYXRhLnRvdGFsQXJjaGV0eXBlID0gdGhpcy5hY3Rvci5hcmNoZXR5cGVQb2ludHNTcGVudFxuICAgIHNoZWV0RGF0YS5pbnZhbGlkQXJjaGV0eXBlUG9pbnRzID1cbiAgICAgIE51bWJlcih0aGlzLmFjdG9yLmFyY2hldHlwZVBvaW50c1NwZW50KSAhPT1cbiAgICAgIE51bWJlcih0aGlzLmFjdG9yLnN5c3RlbS5kZXZlbG9wbWVudD8uYXJjaGV0eXBlKVxuICAgIHNoZWV0RGF0YS50b3RhbFBlcnNvbmFsID0gdGhpcy5hY3Rvci5wZXJzb25hbFBvaW50c1NwZW50XG4gICAgc2hlZXREYXRhLmludmFsaWRQZXJzb25hbFBvaW50cyA9XG4gICAgICBOdW1iZXIodGhpcy5hY3Rvci5wZXJzb25hbFBvaW50c1NwZW50KSAhPT1cbiAgICAgIE51bWJlcih0aGlzLmFjdG9yLnN5c3RlbS5kZXZlbG9wbWVudD8ucGVyc29uYWwpXG4gICAgc2hlZXREYXRhLmNyZWRpdFJhdGluZ01heCA9IE51bWJlcihcbiAgICAgIHRoaXMuYWN0b3Iub2NjdXBhdGlvbj8uc3lzdGVtLmNyZWRpdFJhdGluZy5tYXhcbiAgICApXG4gICAgc2hlZXREYXRhLmNyZWRpdFJhdGluZ01pbiA9IE51bWJlcihcbiAgICAgIHRoaXMuYWN0b3Iub2NjdXBhdGlvbj8uc3lzdGVtLmNyZWRpdFJhdGluZy5taW5cbiAgICApXG4gICAgc2hlZXREYXRhLmludmFsaWRDcmVkaXRSYXRpbmcgPVxuICAgICAgdGhpcy5hY3Rvci5jcmVkaXRSYXRpbmdTa2lsbD8uc3lzdGVtLmFkanVzdG1lbnRzPy5vY2N1cGF0aW9uID5cbiAgICAgIHNoZWV0RGF0YS5jcmVkaXRSYXRpbmdNYXggfHxcbiAgICAgIHRoaXMuYWN0b3IuY3JlZGl0UmF0aW5nU2tpbGw/LnN5c3RlbS5hZGp1c3RtZW50cz8ub2NjdXBhdGlvbiA8XG4gICAgICBzaGVldERhdGEuY3JlZGl0UmF0aW5nTWluXG4gICAgc2hlZXREYXRhLnB1bHBUYWxlbnRDb3VudCA9IHNoZWV0RGF0YS5pdGVtc0J5VHlwZS50YWxlbnQ/Lmxlbmd0aFxuICAgICAgPyBzaGVldERhdGEuaXRlbXNCeVR5cGUudGFsZW50Py5sZW5ndGhcbiAgICAgIDogMFxuICAgIHNoZWV0RGF0YS5taW5QdWxwVGFsZW50cyA9IHRoaXMuYWN0b3IuYXJjaGV0eXBlPy5zeXN0ZW0udGFsZW50c1xuICAgICAgPyB0aGlzLmFjdG9yLmFyY2hldHlwZT8uc3lzdGVtLnRhbGVudHNcbiAgICAgIDogMFxuICAgIHNoZWV0RGF0YS5pbnZhbGlkUHVscFRhbGVudHMgPSBzaGVldERhdGEucHVscFRhbGVudENvdW50IDwgc2hlZXREYXRhLm1pblB1bHBUYWxlbnRzXG5cbiAgICBzaGVldERhdGEuaGFzRGV2ZWxvcG1lbnRQaGFzZSA9IHRoaXMuYWN0b3IuaGFzRGV2ZWxvcG1lbnRQaGFzZVxuXG4gICAgc2hlZXREYXRhLmFsbG93RGV2ZWxvcG1lbnQgPSBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdkZXZlbG9wbWVudEVuYWJsZWQnKVxuICAgIHNoZWV0RGF0YS5hbGxvd0NoYXJDcmVhdGlvbiA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2NoYXJDcmVhdGlvbkVuYWJsZWQnKVxuICAgIHNoZWV0RGF0YS5kZXZlbG9wbWVudFJvbGxGb3JMdWNrID0gZ2FtZS5zZXR0aW5ncy5nZXQoXG4gICAgICAnQ29DNycsXG4gICAgICAnZGV2ZWxvcG1lbnRSb2xsRm9yTHVjaydcbiAgICApXG4gICAgc2hlZXREYXRhLnNob3dEZXZQYW5uZWwgPSBzaGVldERhdGEuYWxsb3dEZXZlbG9wbWVudCB8fCBzaGVldERhdGEuYWxsb3dDaGFyQ3JlYXRpb25cblxuICAgIHNoZWV0RGF0YS5fbW9uZXRhcnlGb3JtYXRzID0gW11cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBDT0M3Lm1vbmV0YXJ5Rm9ybWF0cykge1xuICAgICAgc2hlZXREYXRhLl9tb25ldGFyeUZvcm1hdHMucHVzaCh7IGtleSwgdmFsOiBnYW1lLmkxOG4ubG9jYWxpemUoQ09DNy5tb25ldGFyeUZvcm1hdHNba2V5XSkgfSlcbiAgICB9XG5cbiAgICBzaGVldERhdGEuc2hvd0N1cnJlbmN5U3ltYm9sID0gWydkZWNpbWFsTGVmdCcsICdkZWNpbWFsUmlnaHQnLCAnaW50ZWdlckxlZnQnLCAnaW50ZWdlclJpZ2h0J10uaW5jbHVkZXMoc2hlZXREYXRhLmRhdGEuc3lzdGVtLm1vbmV0YXJ5LmZvcm1hdClcblxuICAgIHNoZWV0RGF0YS5fbW9uZXRhcnlUeXBlcyA9IFtdXG4gICAgZm9yIChjb25zdCBrZXkgaW4gQ09DNy5tb25ldGFyeVR5cGVzKSB7XG4gICAgICBpZiAoQ09DNy5tb25ldGFyeVR5cGVzW2tleV0uZmlsdGVyLmxlbmd0aCA9PT0gMCB8fCBDT0M3Lm1vbmV0YXJ5VHlwZXNba2V5XS5maWx0ZXIuaW5jbHVkZXMoc2hlZXREYXRhLmRhdGEuc3lzdGVtLm1vbmV0YXJ5LmZvcm1hdCkpIHtcbiAgICAgICAgc2hlZXREYXRhLl9tb25ldGFyeVR5cGVzLnB1c2goeyBrZXksIHZhbDogZ2FtZS5pMThuLmxvY2FsaXplKENPQzcubW9uZXRhcnlUeXBlc1trZXldLm5hbWUpIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgc2hlZXREYXRhLm1hbnVhbENyZWRpdCA9IHRoaXMuYWN0b3IuZ2V0QWN0b3JGbGFnKCdtYW51YWxDcmVkaXQnKVxuICAgIGlmICghc2hlZXREYXRhLm1hbnVhbENyZWRpdCkge1xuICAgICAgc2hlZXREYXRhLm1vbmV0YXJ5ID0ge1xuICAgICAgICBzcGVuZGluZ0xldmVsOiBDb0NBY3Rvci5tb25ldGFyeUZvcm1hdChzaGVldERhdGEuZGF0YS5zeXN0ZW0ubW9uZXRhcnkuZm9ybWF0LCBzaGVldERhdGEuZGF0YS5zeXN0ZW0ubW9uZXRhcnkuc3ltYm9sLCB0aGlzLmFjdG9yLnNwZW5kaW5nTGV2ZWwpLFxuICAgICAgICBhc3NldHM6IENvQ0FjdG9yLm1vbmV0YXJ5Rm9ybWF0KHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5tb25ldGFyeS5mb3JtYXQsIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5tb25ldGFyeS5zeW1ib2wsIHRoaXMuYWN0b3IuYXNzZXRzKSxcbiAgICAgICAgY2FzaDogQ29DQWN0b3IubW9uZXRhcnlGb3JtYXQoc2hlZXREYXRhLmRhdGEuc3lzdGVtLm1vbmV0YXJ5LmZvcm1hdCwgc2hlZXREYXRhLmRhdGEuc3lzdGVtLm1vbmV0YXJ5LnN5bWJvbCwgdGhpcy5hY3Rvci5jYXNoKVxuICAgICAgfVxuICAgIH1cblxuICAgIHNoZWV0RGF0YS5vbmVCbG9ja0JhY2tTdG9yeSA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ29uZUJsb2NrQmFja3N0b3J5JylcblxuICAgIHNoZWV0RGF0YS5zdW1tYXJpemVkID0gdGhpcy5zdW1tYXJpemVkICYmICFzaGVldERhdGEucGVybWlzc2lvbkxpbWl0ZWRcbiAgICBzaGVldERhdGEuc2tpbGxMaXN0ID0gW11cbiAgICBsZXQgcHJldmlvdXNTcGVjID0gJydcbiAgICBmb3IgKGNvbnN0IHNraWxsIG9mIHNoZWV0RGF0YS5za2lsbHMpIHtcbiAgICAgIGlmIChzaGVldERhdGEuc2tpbGxTaG93VW5jb21tb24gfHwgIXNraWxsLnN5c3RlbS5wcm9wZXJ0aWVzLnJhcml0eSkge1xuICAgICAgICBpZiAoc2tpbGwuc3lzdGVtLnByb3BlcnRpZXMuc3BlY2lhbCkge1xuICAgICAgICAgIGlmIChwcmV2aW91c1NwZWMgIT09IHNraWxsLnN5c3RlbS5zcGVjaWFsaXphdGlvbikge1xuICAgICAgICAgICAgcHJldmlvdXNTcGVjID0gc2tpbGwuc3lzdGVtLnNwZWNpYWxpemF0aW9uXG4gICAgICAgICAgICBzaGVldERhdGEuc2tpbGxMaXN0LnB1c2goe1xuICAgICAgICAgICAgICBpc1NwZWNpYWxpemF0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICBuYW1lOiBza2lsbC5zeXN0ZW0uc3BlY2lhbGl6YXRpb25cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNoZWV0RGF0YS5za2lsbExpc3QucHVzaChza2lsbClcbiAgICAgIH1cbiAgICB9XG4gICAgc2hlZXREYXRhLnNraWxsc0J5VmFsdWUgPSBbLi4uc2hlZXREYXRhLnNraWxsc10uc29ydCgoYSwgYikgPT4ge1xuICAgICAgcmV0dXJuIGIuc3lzdGVtLnZhbHVlIC0gYS5zeXN0ZW0udmFsdWVcbiAgICB9KVxuICAgIHNoZWV0RGF0YS50b3BTa2lsbHMgPSBbLi4uc2hlZXREYXRhLnNraWxsc0J5VmFsdWVdLnNsaWNlKDAsIDE0KVxuICAgIHNoZWV0RGF0YS5za2lsbHNCeVZhbHVlID0gc2hlZXREYXRhLnNraWxsc0J5VmFsdWUuZmlsdGVyKFxuICAgICAgc2tpbGwgPT4gc2hlZXREYXRhLnNraWxsU2hvd1VuY29tbW9uIHx8ICFza2lsbC5zeXN0ZW0ucHJvcGVydGllcy5yYXJpdHlcbiAgICApXG4gICAgc2hlZXREYXRhLnRvcFdlYXBvbnMgPSBbLi4uc2hlZXREYXRhLm1lbGVlV3BuLCAuLi5zaGVldERhdGEucmFuZ2VXcG5dXG4gICAgICAuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICByZXR1cm4gYS5zeXN0ZW0uc2tpbGwubWFpbj8udmFsdWUgLSBiLnN5c3RlbS5za2lsbC5tYWluPy52YWx1ZVxuICAgICAgfSlcbiAgICAgIC5yZXZlcnNlKClcbiAgICAgIC5zbGljZSgwLCAzKVxuICAgIHNoZWV0RGF0YS5kaXNwbGF5UGxheWVyTmFtZSA9IGdhbWUuc2V0dGluZ3MuZ2V0KFxuICAgICAgJ0NvQzcnLFxuICAgICAgJ2Rpc3BsYXlQbGF5ZXJOYW1lT25TaGVldCdcbiAgICApXG4gICAgaWYgKHNoZWV0RGF0YS5kaXNwbGF5UGxheWVyTmFtZSAmJiAhc2hlZXREYXRhLmRhdGEuc3lzdGVtLmluZm9zLnBsYXllcm5hbWUpIHtcbiAgICAgIGNvbnN0IHVzZXIgPSB0aGlzLmFjdG9yLmNoYXJhY3RlclVzZXJcbiAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5pbmZvcy5wbGF5ZXJuYW1lID0gdXNlci5uYW1lXG4gICAgICB9XG4gICAgfVxuXG4gICAgc2hlZXREYXRhLnNraWxsTGlzdEVtcHR5ID0gc2hlZXREYXRhLnNraWxscy5sZW5ndGggPT09IDBcblxuICAgIHNoZWV0RGF0YS5zaG93SW52ZW50b3J5SXRlbXMgPVxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNoZWV0RGF0YS5pdGVtc0J5VHlwZSwgJ2l0ZW0nKSB8fFxuICAgICAgIXNoZWV0RGF0YS5kYXRhLnN5c3RlbS5mbGFncy5sb2NrZWRcbiAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeUJvb2tzID1cbiAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzaGVldERhdGEuaXRlbXNCeVR5cGUsICdib29rJykgfHxcbiAgICAgICFzaGVldERhdGEuZGF0YS5zeXN0ZW0uZmxhZ3MubG9ja2VkXG4gICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlTcGVsbHMgPVxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNoZWV0RGF0YS5pdGVtc0J5VHlwZSwgJ3NwZWxsJykgfHxcbiAgICAgICFzaGVldERhdGEuZGF0YS5zeXN0ZW0uZmxhZ3MubG9ja2VkXG4gICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlUYWxlbnRzID1cbiAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzaGVldERhdGEuaXRlbXNCeVR5cGUsICd0YWxlbnQnKSB8fFxuICAgICAgKCFzaGVldERhdGEuZGF0YS5zeXN0ZW0uZmxhZ3MubG9ja2VkICYmIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3B1bHBSdWxlVGFsZW50cycpKVxuICAgIHNoZWV0RGF0YS5zaG93SW52ZW50b3J5U3RhdHVzZXMgPVxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNoZWV0RGF0YS5pdGVtc0J5VHlwZSwgJ3N0YXR1cycpIHx8XG4gICAgICAhc2hlZXREYXRhLmRhdGEuc3lzdGVtLmZsYWdzLmxvY2tlZFxuXG4gICAgc2hlZXREYXRhLmhhc0ludmVudG9yeSA9XG4gICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlJdGVtcyB8fFxuICAgICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlCb29rcyB8fFxuICAgICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlTcGVsbHMgfHxcbiAgICAgIHNoZWV0RGF0YS5zaG93SW52ZW50b3J5VGFsZW50cyB8fFxuICAgICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlTdGF0dXNlcyB8fFxuICAgICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlXZWFwb25zXG5cbiAgICBzaGVldERhdGEuZW5yaWNoZWRCYWNrc3RvcnkgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uYmFja3N0b3J5LFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25LZWVwZXIgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24ua2VlcGVyLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgcmV0dXJuIHNoZWV0RGF0YVxuICB9XG5cbiAgX3NhdmVTY3JvbGxQb3NpdGlvbnMgKGh0bWwpIHtcbiAgICBzdXBlci5fc2F2ZVNjcm9sbFBvc2l0aW9ucyhodG1sKVxuICAgIGNvbnN0IHNlbGVjdG9ycyA9IFsnLnJpZ2h0LXBhbmVsIC50YWIuZGV2ZWxvcG1lbnQgb2wnXVxuICAgIHRoaXMuX3Njcm9sbFBvc2l0aW9uc1ggPSBzZWxlY3RvcnMucmVkdWNlKChwb3MsIHNlbCkgPT4ge1xuICAgICAgY29uc3QgZWwgPSBodG1sLmZpbmQoc2VsKVxuICAgICAgcG9zW3NlbF0gPSBBcnJheS5mcm9tKGVsKS5tYXAoZWwgPT4gZWwuc2Nyb2xsTGVmdClcbiAgICAgIHJldHVybiBwb3NcbiAgICB9LCB7fSlcbiAgfVxuXG4gIF9yZXN0b3JlU2Nyb2xsUG9zaXRpb25zIChodG1sKSB7XG4gICAgc3VwZXIuX3Jlc3RvcmVTY3JvbGxQb3NpdGlvbnMoaHRtbClcbiAgICBjb25zdCBzZWxlY3RvcnMgPSBbJy5yaWdodC1wYW5lbCAudGFiLmRldmVsb3BtZW50IG9sJ11cbiAgICBjb25zdCBwb3NpdGlvbnMgPSB0aGlzLl9zY3JvbGxQb3NpdGlvbnNYIHx8IHt9XG4gICAgZm9yIChjb25zdCBzZWwgb2Ygc2VsZWN0b3JzKSB7XG4gICAgICBjb25zdCBlbCA9IGh0bWwuZmluZChzZWwpXG4gICAgICBlbC5lYWNoKChpLCBlbCkgPT4geyBlbC5zY3JvbGxMZWZ0ID0gcG9zaXRpb25zW3NlbF0/LltpXSB8fCAwIH0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEV4dGVuZCBhbmQgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgb3B0aW9ucyB1c2VkIGJ5IHRoZSA1ZSBBY3RvciBTaGVldFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc3VwZXIuZGVmYXVsdE9wdGlvbnMsIHtcbiAgICAgIGNsYXNzZXM6IFsnY29jNycsICdzaGVldFYyJywgJ2FjdG9yJywgJ2NoYXJhY3RlciddLFxuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FjdG9ycy9jaGFyYWN0ZXIvaW5kZXguaHRtbCcsXG4gICAgICB3aWR0aDogNjg3LFxuICAgICAgaGVpZ2h0OiA2MjMsXG4gICAgICByZXNpemFibGU6IHRydWUsXG4gICAgICBkcmFnRHJvcDogW3sgZHJhZ1NlbGVjdG9yOiAnLml0ZW0nLCBkcm9wU2VsZWN0b3I6IG51bGwgfV0sXG4gICAgICBzY3JvbGxZOiBbJy5yaWdodC1wYW5lbCAudGFiJ10sXG4gICAgICB0YWJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYXZTZWxlY3RvcjogJy5zaGVldC1uYXYnLFxuICAgICAgICAgIGNvbnRlbnRTZWxlY3RvcjogJy5zaGVldC1ib2R5JyxcbiAgICAgICAgICBpbml0aWFsOiAnc2tpbGxzJ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfSlcbiAgfVxuXG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcblxuICAgIGlmICh0aGlzLmFjdG9yLmlzT3duZXIpIHtcbiAgICAgIC8vIE1PRElGOiAwLjgueCBvd25lciBkZXByZWNhdGVkICA9PiBpc093bmVyXG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCcuc2tpbGwtbmFtZS5yb2xsYWJsZS5mbGFnZ2VkNGRldicpXG4gICAgICAgIC5jbGljayhhc3luYyBldmVudCA9PiB0aGlzLl9vblNraWxsRGV2KGV2ZW50KSlcbiAgICAgIGh0bWxcbiAgICAgICAgLmZpbmQoJy5yZXNldC1vY2N1cGF0aW9uJylcbiAgICAgICAgLmNsaWNrKGFzeW5jICgpID0+IGF3YWl0IHRoaXMuYWN0b3IucmVzZXRPY2N1cGF0aW9uKCkpXG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCcucmVzZXQtYXJjaGV0eXBlJylcbiAgICAgICAgLmNsaWNrKGFzeW5jICgpID0+IGF3YWl0IHRoaXMuYWN0b3IucmVzZXRBcmNoZXR5cGUoKSlcbiAgICAgIGh0bWwuZmluZCgnLm9wZW4taXRlbScpLmNsaWNrKGV2ZW50ID0+IHRoaXMuX29uSXRlbURldGFpbHMoZXZlbnQpKVxuICAgICAgLy8gaHRtbFxuICAgICAgLy8gICAuZmluZCgnW25hbWU9XCJkYXRhLmF0dHJpYnMuaHAudmFsdWVcIl0nKVxuICAgICAgLy8gICAuY2hhbmdlKGFzeW5jIGV2ZW50ID0+e1xuICAgICAgLy8gICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgIC8vICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgLy8gICAgIGxldCB2YWx1ZSA9IE51bWJlciggZXZlbnQuY3VycmVudFRhcmdldD8udmFsdWUpXG4gICAgICAvLyAgICAgaWYoICFpc05hTih2YWx1ZSkpIGF3YWl0IHRoaXMuYWN0b3Iuc2V0SHAoZXZlbnQpXG4gICAgICAvLyAgICAgZWxzZSB1aS5ub3RpZmljYXRpb25zLndhcm4oJ0Vycm9yIHBhcnNpbmcgSFAgdmFsdWUnKVxuICAgICAgLy8gICB9KVxuICAgICAgaHRtbC5maW5kKCcudG9nZ2xlLWxpc3QtbW9kZScpLmNsaWNrKGV2ZW50ID0+IHtcbiAgICAgICAgdGhpcy50b2dnbGVTa2lsbExpc3RNb2RlKGV2ZW50KVxuICAgICAgfSlcbiAgICAgIGh0bWwuZmluZCgnLnRvZ2dsZS11bmNvbW1vbi1tb2RlJykuY2xpY2soZXZlbnQgPT4ge1xuICAgICAgICB0aGlzLnRvZ2dsZVNraWxsVW5jb21tb25Nb2RlKGV2ZW50KVxuICAgICAgfSlcbiAgICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgICBodG1sXG4gICAgICAgICAgLmZpbmQoJy5zYW5pdHktbG9zcy10eXBlLWFkZCcpXG4gICAgICAgICAgLmNsaWNrKHRoaXMuX29uQWRkU2FuaXR5TG9zc1JlYXNvbi5iaW5kKHRoaXMpKVxuICAgICAgICBodG1sXG4gICAgICAgICAgLmZpbmQoJy5zYW5pdHktbG9zcy10eXBlLWRlbGV0ZScpXG4gICAgICAgICAgLmNsaWNrKHRoaXMuX29uRGVsZXRlU2FuaXR5TG9zc1JlYXNvbi5iaW5kKHRoaXMpKVxuICAgICAgICBodG1sXG4gICAgICAgICAgLmZpbmQoJy5teXRob3NFbmNvdW50ZXJzVG90YWxMb3NzJylcbiAgICAgICAgICAuYmx1cih0aGlzLl9vbkVkaXRTYW5pdHlMb3NzUmVhc29uLmJpbmQodGhpcykpXG4gICAgICAgIGh0bWxcbiAgICAgICAgICAuZmluZCgnLnRvZ2dsZS1rZWVwZXItZmxhZ3MnKVxuICAgICAgICAgIC5jbGljayh0aGlzLl9vblRvZ2dsZUtlZXBlckZsYWdzLmJpbmQodGhpcykpXG4gICAgICAgIGh0bWwuZmluZCgnLmFkZC1tb25ldGFyeScpLmNsaWNrKHRoaXMuX29uQWRkTW9uZXRhcnkuYmluZCh0aGlzKSlcbiAgICAgICAgaHRtbC5maW5kKCcucmVtb3ZlLW1vbmV0YXJ5JykuY2xpY2sodGhpcy5fb25SZW1vdmVNb25ldGFyeS5iaW5kKHRoaXMpKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9vbkFkZE1vbmV0YXJ5ICgpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLmFjdG9yLnN5c3RlbS5tb25ldGFyeS52YWx1ZXMgPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLmFjdG9yLnN5c3RlbS5tb25ldGFyeS52YWx1ZXMpIDogW11cbiAgICB2YWx1ZXMucHVzaCh7XG4gICAgICBuYW1lOiAnJyxcbiAgICAgIG1pbjogbnVsbCxcbiAgICAgIG1heDogbnVsbCxcbiAgICAgIGNhc2hUeXBlOiAwLFxuICAgICAgY2FzaFZhbHVlOiAnJyxcbiAgICAgIGFzc2V0c1R5cGU6IDAsXG4gICAgICBhc3NldHNWYWx1ZTogJycsXG4gICAgICBzcGVuZGluZ1R5cGU6IDAsXG4gICAgICBzcGVuZGluZ1ZhbHVlOiAnJ1xuICAgIH0pXG4gICAgdGhpcy5hY3Rvci51cGRhdGUoeyAnc3lzdGVtLm1vbmV0YXJ5LnZhbHVlcyc6IHZhbHVlcyB9KVxuICB9XG5cbiAgX29uUmVtb3ZlTW9uZXRhcnkgKGV2ZW50KSB7XG4gICAgY29uc3QgYSA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCBkaXYgPSBhLmNsb3Nlc3QoJy5pdGVtJylcbiAgICBjb25zdCB2YWx1ZXMgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLmFjdG9yLnN5c3RlbS5tb25ldGFyeS52YWx1ZXMpXG4gICAgdmFsdWVzLnNwbGljZShOdW1iZXIoZGl2LmRhdGFzZXQuaW5kZXgpLCAxKVxuICAgIHRoaXMuYWN0b3IudXBkYXRlKHsgJ3N5c3RlbS5tb25ldGFyeS52YWx1ZXMnOiB2YWx1ZXMgfSlcbiAgfVxuXG4gIF9vblRvZ2dsZUtlZXBlckZsYWdzIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBzd2l0Y2ggKGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5mbGFnKSB7XG4gICAgICBjYXNlICdteXRob3NJbnNhbml0eUV4cGVyaWVuY2VkJzpcbiAgICAgICAgdGhpcy5hY3Rvci5zZXRGbGFnKFxuICAgICAgICAgICdDb0M3JyxcbiAgICAgICAgICAnbXl0aG9zSW5zYW5pdHlFeHBlcmllbmNlZCcsXG4gICAgICAgICAgIXRoaXMuYWN0b3IubXl0aG9zSW5zYW5pdHlFeHBlcmllbmNlZFxuICAgICAgICApXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdteXRob3NIYXJkZW5lZCc6XG4gICAgICAgIHRoaXMuYWN0b3Iuc2V0RmxhZygnQ29DNycsICdteXRob3NIYXJkZW5lZCcsICF0aGlzLmFjdG9yLm15dGhvc0hhcmRlbmVkKVxuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9vbkFkZFNhbml0eUxvc3NSZWFzb24gKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIG5ldyBDb0M3Q3JlYXRlTXl0aG9zRW5jb3VudGVyKFxuICAgICAge1xuICAgICAgICBhY3RvcjogdGhpcy5hY3RvcixcbiAgICAgICAgdHlwZTogZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnR5cGVcbiAgICAgIH0sXG4gICAgICB7fVxuICAgICkucmVuZGVyKHRydWUpXG4gIH1cblxuICBhc3luYyBfb25FZGl0U2FuaXR5TG9zc1JlYXNvbiAoZXZlbnQpIHtcbiAgICBjb25zdCBpbnB1dCA9ICQoZXZlbnQuY3VycmVudFRhcmdldClcbiAgICBjb25zdCBvZmZzZXQgPSBpbnB1dC5jbG9zZXN0KCcuZmxleHJvdycpLmRhdGEoJ29mZnNldCcpXG4gICAgaWYgKHR5cGVvZiB0aGlzLmFjdG9yLnN5c3RlbS5zYW5pdHlMb3NzRXZlbnRzPy5bb2Zmc2V0XT8udG90YWxMb3NzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3Qgc2FuaXR5TG9zc0V2ZW50cyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuYWN0b3Iuc3lzdGVtLnNhbml0eUxvc3NFdmVudHMpXG4gICAgICBzYW5pdHlMb3NzRXZlbnRzW29mZnNldF0udG90YWxMb3NzID0gcGFyc2VJbnQoaW5wdXQudmFsKCksIDEwKVxuICAgICAgdGhpcy5hY3Rvci51cGRhdGUoeyAnc3lzdGVtLnNhbml0eUxvc3NFdmVudHMnOiBzYW5pdHlMb3NzRXZlbnRzIH0pXG4gICAgfVxuICB9XG5cbiAgX29uRGVsZXRlU2FuaXR5TG9zc1JlYXNvbiAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3Qgb2Zmc2V0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KVxuICAgICAgLmNsb3Nlc3QoJy5mbGV4cm93JylcbiAgICAgIC5kYXRhKCdvZmZzZXQnKVxuICAgIGNvbnN0IHNhbml0eUxvc3NFdmVudHMgPSB0aGlzLmFjdG9yLnN5c3RlbS5zYW5pdHlMb3NzRXZlbnRzID8/IFtdXG4gICAgc2FuaXR5TG9zc0V2ZW50cy5zcGxpY2Uob2Zmc2V0LCAxKVxuICAgIHNhbml0eUxvc3NFdmVudHMuc29ydChmdW5jdGlvbiAobGVmdCwgcmlnaHQpIHtcbiAgICAgIHJldHVybiBsZWZ0LnR5cGUubG9jYWxlQ29tcGFyZShyaWdodC50eXBlKVxuICAgIH0pXG4gICAgdGhpcy5hY3Rvci51cGRhdGUoeyAnc3lzdGVtLnNhbml0eUxvc3NFdmVudHMnOiBzYW5pdHlMb3NzRXZlbnRzIH0pXG4gIH1cblxuICBhc3luYyB0b2dnbGVTa2lsbExpc3RNb2RlIChldmVudCkge1xuICAgIGF3YWl0IHRoaXMuYWN0b3Iuc2V0RmxhZyhcbiAgICAgICdDb0M3JyxcbiAgICAgICdza2lsbExpc3RNb2RlJyxcbiAgICAgICF0aGlzLmFjdG9yLmdldEZsYWcoJ0NvQzcnLCAnc2tpbGxMaXN0TW9kZScpXG4gICAgKVxuICAgIHJldHVybiBhd2FpdCB0aGlzLnJlbmRlcih0cnVlKVxuICB9XG5cbiAgYXN5bmMgdG9nZ2xlU2tpbGxVbmNvbW1vbk1vZGUgKGV2ZW50KSB7XG4gICAgYXdhaXQgdGhpcy5hY3Rvci5zZXRGbGFnKFxuICAgICAgJ0NvQzcnLFxuICAgICAgJ3NraWxsU2hvd1VuY29tbW9uJyxcbiAgICAgICF0aGlzLmFjdG9yLmdldEZsYWcoJ0NvQzcnLCAnc2tpbGxTaG93VW5jb21tb24nKVxuICAgIClcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5yZW5kZXIodHJ1ZSlcbiAgfVxuXG4gIGFzeW5jIF9vblNraWxsRGV2IChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBza2lsbElkID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpLmRhdGFzZXQuaXRlbUlkXG4gICAgYXdhaXQgdGhpcy5hY3Rvci5kZXZlbG9wU2tpbGwoc2tpbGxJZCwgZXZlbnQuc2hpZnRLZXkpXG4gIH1cblxuICBfb25JdGVtRGV0YWlscyAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgdHlwZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC50eXBlXG4gICAgY29uc3QgaXRlbSA9IHRoaXMuYWN0b3JbdHlwZV1cbiAgICBpZiAoaXRlbSkgaXRlbS5zaGVldC5yZW5kZXIodHJ1ZSlcbiAgfVxuXG4gIF91cGRhdGVPYmplY3QgKGV2ZW50LCBmb3JtRGF0YSkge1xuICAgIGNvbnN0IHN5c3RlbSA9IGZvdW5kcnkudXRpbHMuZXhwYW5kT2JqZWN0KGZvcm1EYXRhKT8uc3lzdGVtXG4gICAgaWYgKHN5c3RlbS5tb25ldGFyeT8udmFsdWVzKSB7XG4gICAgICBmb3JtRGF0YVsnc3lzdGVtLm1vbmV0YXJ5LnZhbHVlcyddID0gT2JqZWN0LnZhbHVlcyhzeXN0ZW0ubW9uZXRhcnkudmFsdWVzIHx8IFtdKVxuICAgIH1cbiAgICBzdXBlci5fdXBkYXRlT2JqZWN0KGV2ZW50LCBmb3JtRGF0YSlcbiAgfVxuXG4gIHN0YXRpYyByZW5kZXJTaGVldCAoc2hlZXQsIGh0bWwpIHtcbiAgICBpZiAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnb3ZlcnJpZGVTaGVldEFydHdvcmsnKSkge1xuICAgICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2FydFdvcmtTaGVldEJhY2tncm91bmQnKSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnYXJ0V29ya1NoZWV0QmFja2dyb3VuZCcpLnRvTG93ZXJDYXNlKCkgPT09XG4gICAgICAgICAgJ251bGwnXG4gICAgICAgICkge1xuICAgICAgICAgIHNoZWV0LmVsZW1lbnQuY3NzKFxuICAgICAgICAgICAgJy0tbWFpbi1zaGVldC1iZycsXG4gICAgICAgICAgICBcInVybCggJy4vYXNzZXRzL2ltYWdlcy92b2lkLndlYnAnKVwiXG4gICAgICAgICAgKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNoZWV0LmVsZW1lbnQuY3NzKFxuICAgICAgICAgICAgJy0tbWFpbi1zaGVldC1iZycsXG4gICAgICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnRXb3JrU2hlZXRCYWNrZ3JvdW5kJylcbiAgICAgICAgICApXG4gICAgICAgICAgLy8gY29uc3QgYm9yZGVySW1hZ2UgPSBzaGVldC5lbGVtZW50LmZpbmQoJ2Zvcm0nKS5jc3MoJ2JvcmRlci1pbWFnZScpO1xuICAgICAgICAgIC8vIHNoZWV0LmVsZW1lbnQuZmluZCgnZm9ybScpLmNzcygnYm9yZGVyLWltYWdlJywgJycpO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2FydFdvcmtTaGVldEJhY2tncm91bmRUeXBlJykgIT09ICdzbGljZSdcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGxldCBzdHlsZVNoZWV0LCBjc3NSdWxlSW5kZXhcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldLmhyZWY/LmVuZHNXaXRoKCdjb2M3Zy5jc3MnKSkge1xuICAgICAgICAgICAgICAgIHN0eWxlU2hlZXQgPSBkb2N1bWVudC5zdHlsZVNoZWV0c1tpXVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHN0eWxlU2hlZXQpIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHlsZVNoZWV0LnJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgc3R5bGVTaGVldC5ydWxlc1tpXS5zZWxlY3RvclRleHQgPT09ICcuc2hlZXRWMi5jaGFyYWN0ZXIgZm9ybSdcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIGNzc1J1bGVJbmRleCA9IGlcbiAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3NzUnVsZUluZGV4KSB7XG4gICAgICAgICAgICAgIGNvbnN0IENTU1N0eWxlID0gc3R5bGVTaGVldC5ydWxlc1tjc3NSdWxlSW5kZXhdLnN0eWxlXG4gICAgICAgICAgICAgIENTU1N0eWxlLnJlbW92ZVByb3BlcnR5KCdib3JkZXItaW1hZ2UnKVxuICAgICAgICAgICAgICBDU1NTdHlsZS5zZXRQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICAnYmFja2dyb3VuZCcsXG4gICAgICAgICAgICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnYXJ0V29ya1NoZWV0QmFja2dyb3VuZCcpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgc3dpdGNoIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnRXb3JrU2hlZXRCYWNrZ3JvdW5kVHlwZScpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnYXV0byc6XG4gICAgICAgICAgICAgICAgICBDU1NTdHlsZS5zZXRQcm9wZXJ0eSgnYmFja2dyb3VuZC1zaXplJywgJ2F1dG8nKVxuICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICdjb250YWluJzpcbiAgICAgICAgICAgICAgICAgIENTU1N0eWxlLnNldFByb3BlcnR5KCdiYWNrZ3JvdW5kLXNpemUnLCAnY29udGFpbicpXG4gICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NvdmVyJzpcbiAgICAgICAgICAgICAgICAgIENTU1N0eWxlLnNldFByb3BlcnR5KCdiYWNrZ3JvdW5kLXNpemUnLCAnY292ZXInKVxuICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgQ1NTU3R5bGUuc2V0UHJvcGVydHkoJ2JhY2tncm91bmQtc2l6ZScsICdhdXRvJylcbiAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2FydFdvcmtPdGhlclNoZWV0QmFja2dyb3VuZCcpKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBnYW1lLnNldHRpbmdzXG4gICAgICAgICAgICAuZ2V0KCdDb0M3JywgJ2FydFdvcmtPdGhlclNoZWV0QmFja2dyb3VuZCcpXG4gICAgICAgICAgICAudG9Mb3dlckNhc2UoKSA9PT0gJ251bGwnXG4gICAgICAgICkge1xuICAgICAgICAgIHNoZWV0LmVsZW1lbnQuY3NzKFxuICAgICAgICAgICAgJy0tb3RoZXItc2hlZXQtYmcnLFxuICAgICAgICAgICAgXCJ1cmwoICcuL2Fzc2V0cy9pbWFnZXMvdm9pZC53ZWJwJylcIlxuICAgICAgICAgIClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzaGVldC5lbGVtZW50LmNzcyhcbiAgICAgICAgICAgICctLW90aGVyLXNoZWV0LWJnJyxcbiAgICAgICAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2FydFdvcmtPdGhlclNoZWV0QmFja2dyb3VuZCcpXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnR3b3JrU2hlZXRJbWFnZScpKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnR3b3JrU2hlZXRJbWFnZScpLnRvTG93ZXJDYXNlKCkgPT09XG4gICAgICAgICAgJ251bGwnXG4gICAgICAgICkge1xuICAgICAgICAgIHNoZWV0LmVsZW1lbnQuY3NzKFxuICAgICAgICAgICAgJy0tbWFpbi1zaGVldC1pbWFnZScsXG4gICAgICAgICAgICBcInVybCggJy4vYXNzZXRzL2ltYWdlcy92b2lkLndlYnAnKVwiXG4gICAgICAgICAgKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNoZWV0LmVsZW1lbnQuY3NzKFxuICAgICAgICAgICAgJy0tbWFpbi1zaGVldC1pbWFnZScsXG4gICAgICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnR3b3JrU2hlZXRJbWFnZScpXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnR3b3JrRnJvbnRDb2xvcicpKSB7XG4gICAgICAgIHNoZWV0LmVsZW1lbnQuY3NzKFxuICAgICAgICAgICctLW1haW4tc2hlZXQtZnJvbnQtY29sb3InLFxuICAgICAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2FydHdvcmtGcm9udENvbG9yJylcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2FydHdvcmtCYWNrZ3JvdW5kQ29sb3InKSkge1xuICAgICAgICBzaGVldC5lbGVtZW50LmNzcyhcbiAgICAgICAgICAnLS1tYWluLXNoZWV0LWJhY2stY29sb3InLFxuICAgICAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2FydHdvcmtCYWNrZ3JvdW5kQ29sb3InKVxuICAgICAgICApXG4gICAgICB9XG4gICAgICBpZiAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnYXJ0d29ya0ludGVyYWN0aXZlQ29sb3InKSkge1xuICAgICAgICBzaGVldC5lbGVtZW50LmNzcyhcbiAgICAgICAgICAnLS1tYWluLXNoZWV0LWludGVyYWN0aXZlLWNvbG9yJyxcbiAgICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnR3b3JrSW50ZXJhY3RpdmVDb2xvcicpXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIGlmICghZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnYXJ0d29ya0ZpeGVkU2tpbGxMZW5ndGgnKSkge1xuICAgICAgICBzaGVldC5lbGVtZW50LmNzcygnLS1za2lsbC1sZW5ndGgnLCAnYXV0bycpXG4gICAgICAgIHNoZWV0LmVsZW1lbnQuY3NzKCctLXNraWxsLXNwZWNpYWxpemF0aW9uLWxlbmd0aCcsICdhdXRvJylcbiAgICAgIH1cblxuICAgICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2FydHdvcmtNYWluRm9udCcpKSB7XG4gICAgICAgIGNvbnN0IGN1c3RvbVNoZWV0Rm9udCA9IG5ldyBGb250RmFjZShcbiAgICAgICAgICAnY3VzdG9tU2hlZXRGb250JyxcbiAgICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnR3b3JrTWFpbkZvbnQnKVxuICAgICAgICApXG4gICAgICAgIGN1c3RvbVNoZWV0Rm9udFxuICAgICAgICAgIC5sb2FkKClcbiAgICAgICAgICAudGhlbihmdW5jdGlvbiAobG9hZGVkRmFjZSkge1xuICAgICAgICAgICAgZG9jdW1lbnQuZm9udHMuYWRkKGxvYWRlZEZhY2UpXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKGVycm9yKVxuICAgICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnR3b3JrTWFpbkZvbnRCb2xkJykpIHtcbiAgICAgICAgY29uc3QgY3VzdG9tU2hlZXRDdXJzaXZlRm9udCA9IG5ldyBGb250RmFjZShcbiAgICAgICAgICAnY3VzdG9tU2hlZXRGb250JyxcbiAgICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnR3b3JrTWFpbkZvbnRCb2xkJyksXG4gICAgICAgICAgeyB3ZWlnaHQ6ICdib2xkJyB9XG4gICAgICAgIClcbiAgICAgICAgY3VzdG9tU2hlZXRDdXJzaXZlRm9udFxuICAgICAgICAgIC5sb2FkKClcbiAgICAgICAgICAudGhlbihmdW5jdGlvbiAobG9hZGVkRmFjZSkge1xuICAgICAgICAgICAgZG9jdW1lbnQuZm9udHMuYWRkKGxvYWRlZEZhY2UpXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKGVycm9yKVxuICAgICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnR3b3JrTWFpbkZvbnRTaXplJykpIHtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IGAke2dhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2FydHdvcmtNYWluRm9udFNpemUnKX1weGBcbiAgICAgICAgaWYgKHNpemUgIT09ICQoJzpyb290JykuY3NzKCdmb250LXNpemUnKSkge1xuICAgICAgICAgICQoJzpyb290JykuY3NzKCdmb250LXNpemUnLCBzaXplKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzaGVldC5hY3Rvcj8uc3lzdGVtLnBhbm5lbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHNoZWV0LmFjdG9yLnN5c3RlbS5wYW5uZWwpKSB7XG4gICAgICAgIGNvbnN0IHBhbm5lbENsYXNzID0gY2hhdEhlbHBlci5jYW1lbENhc2VUb0h5cGhlbihrZXkpXG4gICAgICAgIGNvbnN0IHBhbm5lbCA9IGh0bWwuZmluZChgLnBhbm5lbC4ke3Bhbm5lbENsYXNzfWApXG4gICAgICAgIGlmICh2YWx1ZS5leHBhbmRlZCkgcGFubmVsLmFkZENsYXNzKCdleHBhbmRlZCcpXG4gICAgICAgIGVsc2UgcGFubmVsLnJlbW92ZUNsYXNzKCdleHBhbmRlZCcpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgZ2FtZSAqL1xuaW1wb3J0IHsgQ29DN0NoZWNrIH0gZnJvbSAnLi9jaGVjay5qcydcblxuZXhwb3J0IGNsYXNzIENvQzdDb21iYXQge1xuICBzdGF0aWMgcmVuZGVyQ29tYmF0VHJhY2tlciAoYXBwLCBodG1sLCBkYXRhKSB7XG4gICAgY29uc3QgY3VycmVudENvbWJhdCA9IGRhdGEuY29tYmF0c1tkYXRhLmN1cnJlbnRJbmRleCAtIDFdXG4gICAgaWYgKCFjdXJyZW50Q29tYmF0KSByZXR1cm5cblxuICAgIC8vIFRPRE8gOiBTaSBsZSBjb21iYXQgZXN0IGRlamEgZGVidXTDqSBhdmFudCBjaGFyZ2VtZW50IGxhIGZvbmN0aW9uIGQnaW5pdGlhdGl2ZSBwb2ludGUgdmVycyBsJ2FuY2llbm5lLlxuICAgIC8vIGxhIGZvbmN0aW9uIGF0dHJpYnXDqWUgZXN0IGRhdGEuY29tYmF0LnJvbGxJbml0aWF0aXZlXG4gICAgaHRtbC5maW5kKCcuY29tYmF0YW50JykuZWFjaCgoaSwgZWwpID0+IHtcbiAgICAgIC8vIGlmKCBnYW1lLmNvbWJhdC5zdGFydGVkKXtcblxuICAgICAgY29uc3QgY29tYklkID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbWJhdGFudC1pZCcpXG4gICAgICBjb25zdCBjb21iYXRhbnRDb250cm9sc0RpdiA9IGVsLnF1ZXJ5U2VsZWN0b3IoJy5jb21iYXRhbnQtY29udHJvbHMnKVxuICAgICAgLy8gY29uc3QgY29tYmF0YW50ID0gZ2FtZS5jb21iYXQuZ2V0Q29tYmF0YW50KGNvbWJJZCk7XG4gICAgICBjb25zdCBjb21iYXRhbnQgPSBjdXJyZW50Q29tYmF0LmNvbWJhdGFudHMuZ2V0KGNvbWJJZClcblxuICAgICAgaWYgKGNvbWJhdGFudC5nZXRGbGFnKCdDb0M3JywgJ2hhc0d1bicpKSB7XG4gICAgICAgICQoY29tYmF0YW50Q29udHJvbHNEaXYpLnByZXBlbmQoXG4gICAgICAgICAgYDxhIGNsYXNzPVwiY29tYmF0YW50LWNvbnRyb2wgYWN0aXZlIGFkZC1pbml0XCIgdGl0bGU9XCIke2dhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgICAgICAgICdDb0M3LlB1dEd1bkF3YXknXG4gICAgICAgICAgKX1cIiBkYXRhLWNvbnRyb2w9XCJkcmF3R3VuXCI+PGkgY2xhc3M9XCJnYW1lLWljb24gZ2FtZS1pY29uLXJldm9sdmVyXCI+PC9pPjwvYT5gXG4gICAgICAgIClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoY29tYmF0YW50Q29udHJvbHNEaXYpLnByZXBlbmQoXG4gICAgICAgICAgYDxhIGNsYXNzPVwiY29tYmF0YW50LWNvbnRyb2wgYWRkLWluaXRcIiB0aXRsZT1cIiR7Z2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgICAgJ0NvQzcuRHJhd0d1bidcbiAgICAgICAgICApfVwiIGRhdGEtY29udHJvbD1cImRyYXdHdW5cIj48aSBjbGFzcz1cImdhbWUtaWNvbiBnYW1lLWljb24tcmV2b2x2ZXJcIj48L2k+PC9hPmBcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdpbml0aWF0aXZlUnVsZScpID09PSAnb3B0aW9uYWwnICYmXG4gICAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2Rpc3BsYXlJbml0QXNUZXh0JylcbiAgICAgICkge1xuICAgICAgICBpZiAoY29tYmF0YW50LmluaXRpYXRpdmUpIHtcbiAgICAgICAgICBjb25zdCB0b2tlbkluaXRpYXRpdmUgPSBlbC5xdWVyeVNlbGVjdG9yKCcudG9rZW4taW5pdGlhdGl2ZScpXG4gICAgICAgICAgY29uc3QgaW5pdGlhdGl2ZVRlc3QgPSB0b2tlbkluaXRpYXRpdmUucXVlcnlTZWxlY3RvcignLmluaXRpYXRpdmUnKVxuICAgICAgICAgIGNvbnN0IHJvbGwgPVxuICAgICAgICAgICAgMTAwICogY29tYmF0YW50LmluaXRpYXRpdmUgLSAxMDAgKiBNYXRoLmZsb29yKGNvbWJhdGFudC5pbml0aWF0aXZlKVxuICAgICAgICAgIHN3aXRjaCAoTWF0aC5mbG9vcihjb21iYXRhbnQuaW5pdGlhdGl2ZSkpIHtcbiAgICAgICAgICAgIGNhc2UgQ29DN0NoZWNrLnN1Y2Nlc3NMZXZlbC5mdW1ibGU6XG4gICAgICAgICAgICAgIHRva2VuSW5pdGlhdGl2ZS5jbGFzc0xpc3QuYWRkKCdmdW1ibGUnKVxuICAgICAgICAgICAgICBpbml0aWF0aXZlVGVzdC5pbm5lclRleHQgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRnVtYmxlJylcbiAgICAgICAgICAgICAgaW5pdGlhdGl2ZVRlc3QudGl0bGUgPSByb2xsXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlIENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZmFpbHVyZTpcbiAgICAgICAgICAgICAgdG9rZW5Jbml0aWF0aXZlLmNsYXNzTGlzdC5hZGQoJ2ZhaWx1cmUnKVxuICAgICAgICAgICAgICBpbml0aWF0aXZlVGVzdC5pbm5lclRleHQgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRmFpbHVyZScpXG4gICAgICAgICAgICAgIGluaXRpYXRpdmVUZXN0LnRpdGxlID0gcm9sbFxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLnJlZ3VsYXI6XG4gICAgICAgICAgICAgIHRva2VuSW5pdGlhdGl2ZS5jbGFzc0xpc3QuYWRkKCdyZWd1bGFyLXN1Y2Nlc3MnKVxuICAgICAgICAgICAgICBpbml0aWF0aXZlVGVzdC5pbm5lclRleHQgPSBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAgICAgJ0NvQzcuUm9sbERpZmZpY3VsdHlSZWd1bGFyJ1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIGluaXRpYXRpdmVUZXN0LnRpdGxlID0gcm9sbFxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmhhcmQ6XG4gICAgICAgICAgICAgIHRva2VuSW5pdGlhdGl2ZS5jbGFzc0xpc3QuYWRkKCdoYXJkLXN1Y2Nlc3MnKVxuICAgICAgICAgICAgICBpbml0aWF0aXZlVGVzdC5pbm5lclRleHQgPSBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAgICAgJ0NvQzcuUm9sbERpZmZpY3VsdHlIYXJkJ1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIGluaXRpYXRpdmVUZXN0LnRpdGxlID0gcm9sbFxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmV4dHJlbWU6XG4gICAgICAgICAgICAgIHRva2VuSW5pdGlhdGl2ZS5jbGFzc0xpc3QuYWRkKCdleHRyZW1lLXN1Y2Nlc3MnKVxuICAgICAgICAgICAgICBpbml0aWF0aXZlVGVzdC5pbm5lclRleHQgPSBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAgICAgJ0NvQzcuUm9sbERpZmZpY3VsdHlFeHRyZW1lJ1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIGluaXRpYXRpdmVUZXN0LnRpdGxlID0gcm9sbFxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmNyaXRpY2FsOlxuICAgICAgICAgICAgICB0b2tlbkluaXRpYXRpdmUuY2xhc3NMaXN0LmFkZCgnY3JpdGljYWwnKVxuICAgICAgICAgICAgICBpbml0aWF0aXZlVGVzdC5pbm5lclRleHQgPSBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAgICAgJ0NvQzcuUm9sbERpZmZpY3VsdHlDcml0aWNhbCdcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBpbml0aWF0aXZlVGVzdC50aXRsZSA9IHJvbGxcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY29tYmF0YW50LmluaXRpYXRpdmUgPCAwKSB7XG4gICAgICAgIGNvbnN0IGg0ID0gZWwucXVlcnlTZWxlY3RvcignLnRva2VuLW5hbWUnKS5xdWVyeVNlbGVjdG9yKCdoNCcpXG4gICAgICAgIGNvbnN0IHNwYW4gPSBlbC5xdWVyeVNlbGVjdG9yKCdzcGFuLmluaXRpYXRpdmUnKVxuICAgICAgICBoNC5zdHlsZS5mb250V2VpZ2h0ID0gJzkwMCdcbiAgICAgICAgaDQuc3R5bGUudGV4dFNoYWRvdyA9ICcxcHggMXB4IDRweCBkYXJrcmVkJ1xuICAgICAgICBzcGFuLnN0eWxlLmZvbnRXZWlnaHQgPSAnOTAwJ1xuICAgICAgICBzcGFuLnN0eWxlLnRleHRTaGFkb3cgPSAnMXB4IDFweCA0cHggZGFya3JlZCdcblxuICAgICAgICBlbC5zdHlsZS5jb2xvciA9ICdkYXJrcmVkJ1xuICAgICAgICBlbC5zdHlsZS5iYWNrZ3JvdW5kID0gJ2JsYWNrJ1xuICAgICAgICBlbC5zdHlsZS5mb250V2VpZ2h0ID0gJzkwMCdcbiAgICAgIH1cbiAgICB9KVxuICAgIGh0bWwuZmluZCgnLmFkZC1pbml0JykuY2xpY2soZXZlbnQgPT4gQ29DN0NvbWJhdC5fb25Ub2dnbGVHdW4oZXZlbnQpKVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIF9vblRvZ2dsZUd1biAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICBjb25zdCBidG4gPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgY29uc3QgbGkgPSBidG4uY2xvc2VzdCgnLmNvbWJhdGFudCcpXG4gICAgY29uc3QgYyA9IGF3YWl0IGdhbWUuY29tYmF0LmNvbWJhdGFudHMuZ2V0KGxpLmRhdGFzZXQuY29tYmF0YW50SWQpXG4gICAgaWYgKGMuYWN0b3IuaXNPd25lcikge1xuICAgICAgaWYgKGMuZ2V0RmxhZygnQ29DNycsICdoYXNHdW4nKSkge1xuICAgICAgICBhd2FpdCBjLnNldEZsYWcoJ0NvQzcnLCAnaGFzR3VuJywgZmFsc2UpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCBjLnNldEZsYWcoJ0NvQzcnLCAnaGFzR3VuJywgdHJ1ZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBuZXdJbml0ID0gYXdhaXQgYy5hY3Rvci5yb2xsSW5pdGlhdGl2ZSghIWMuZ2V0RmxhZygnQ29DNycsICdoYXNHdW4nKSlcbiAgICBpZiAoYy5nZXRGbGFnKCdDb0M3JywgJ2hhc0d1bicpKSB7XG4gICAgICBpZiAoYy5pbml0aWF0aXZlIDwgbmV3SW5pdCkgZ2FtZS5jb21iYXQuc2V0SW5pdGlhdGl2ZShjLmlkLCBuZXdJbml0KVxuICAgIH0gZWxzZSBnYW1lLmNvbWJhdC5zZXRJbml0aWF0aXZlKGMuaWQsIG5ld0luaXQpXG4gIH1cbn1cblxuLyoqXG4gKiBSb2xsIGluaXRpYXRpdmUgZm9yIG9uZSBvciBtdWx0aXBsZSBDb21iYXRhbnRzIHdpdGhpbiB0aGUgQ29tYmF0IGVudGl0eVxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IGlkcyAgICAgQSBDb21iYXRhbnQgaWQgb3IgQXJyYXkgb2YgaWRzIGZvciB3aGljaCB0byByb2xsXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnM9e31dICAgICBBZGRpdGlvbmFsIG9wdGlvbnMgd2hpY2ggbW9kaWZ5IGhvdyBpbml0aWF0aXZlIHJvbGxzIGFyZSBjcmVhdGVkIG9yIHByZXNlbnRlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IFtvcHRpb25zLmZvcm11bGFdICAgICAgICAgQSBub24tZGVmYXVsdCBpbml0aWF0aXZlIGZvcm11bGEgdG8gcm9sbC4gT3RoZXJ3aXNlIHRoZSBzeXN0ZW0gZGVmYXVsdCBpcyB1c2VkLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy51cGRhdGVUdXJuPXRydWVdICAgICBVcGRhdGUgdGhlIENvbWJhdCB0dXJuIGFmdGVyIGFkZGluZyBuZXcgaW5pdGlhdGl2ZSBzY29yZXMgdG8ga2VlcCB0aGUgdHVybiBvbiB0aGUgc2FtZSBDb21iYXRhbnQuXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMubWVzc2FnZU9wdGlvbnM9e31dICAgIEFkZGl0aW9uYWwgb3B0aW9ucyB3aXRoIHdoaWNoIHRvIGN1c3RvbWl6ZSBjcmVhdGVkIENoYXQgTWVzc2FnZXNcbiAqIEByZXR1cm4ge1Byb21pc2U8Q29tYmF0Pn0gICAgICAgIEEgcHJvbWlzZSB3aGljaCByZXNvbHZlcyB0byB0aGUgdXBkYXRlZCBDb21iYXQgZW50aXR5IG9uY2UgdXBkYXRlcyBhcmUgY29tcGxldGUuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByb2xsSW5pdGlhdGl2ZSAoXG4gIGlkcyxcbiAgeyBmb3JtdWxhID0gbnVsbCwgdXBkYXRlVHVybiA9IHRydWUsIG1lc3NhZ2VPcHRpb25zID0ge30gfSA9IHt9XG4pIHtcbiAgLy8gSXRlcmF0ZSBvdmVyIENvbWJhdGFudHMsIHBlcmZvcm1pbmcgYW4gaW5pdGlhdGl2ZSByb2xsIGZvciBlYWNoXG4gIGNvbnN0IHVwZGF0ZXMgPSBbXVxuICBmb3IgKGNvbnN0IFssIGlkXSBvZiBpZHMuZW50cmllcygpKSB7XG4gICAgLy8gR2V0IENvbWJhdGFudCBkYXRhIChub24tc3RyaWN0bHkpXG4gICAgY29uc3QgY29tYmF0YW50ID0gdGhpcy5jb21iYXRhbnRzLmdldChpZClcblxuICAgIC8vIFByb2R1Y2UgYW4gaW5pdGlhdGl2ZSByb2xsIGZvciB0aGUgQ29tYmF0YW50XG4gICAgY29uc3Qgcm9sbCA9IGF3YWl0IGNvbWJhdGFudC5hY3Rvci5yb2xsSW5pdGlhdGl2ZShcbiAgICAgICEhY29tYmF0YW50LmdldEZsYWcoJ0NvQzcnLCAnaGFzR3VuJylcbiAgICApXG4gICAgdXBkYXRlcy5wdXNoKHsgX2lkOiBpZCwgaW5pdGlhdGl2ZTogcm9sbCB9KVxuICB9XG4gIGlmICghdXBkYXRlcy5sZW5ndGgpIHJldHVybiB0aGlzXG5cbiAgLy8gVXBkYXRlIG11bHRpcGxlIGNvbWJhdGFudHNcbiAgYXdhaXQgdGhpcy51cGRhdGVFbWJlZGRlZERvY3VtZW50cygnQ29tYmF0YW50JywgdXBkYXRlcylcblxuICByZXR1cm4gdGhpc1xufVxuIiwiLyogZ2xvYmFsICQsIENPTkZJRywgRm9ybUFwcGxpY2F0aW9uLCBmb3VuZHJ5LCBnYW1lLCBJdGVtICovXG5pbXBvcnQgeyBDb0M3VXRpbGl0aWVzIH0gZnJvbSAnLi4vdXRpbGl0aWVzLmpzJ1xuXG5leHBvcnQgY2xhc3MgQ29DSURCYXRjaCBleHRlbmRzIEZvcm1BcHBsaWNhdGlvbiB7XG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRPcHRpb25zLCB7XG4gICAgICBjbGFzc2VzOiBbJ2NvYzcnLCAnZGlhbG9nJywgJ2NvYy1pZC1lZGl0b3InXSxcbiAgICAgIHRlbXBsYXRlOiAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hcHBzL2NvYy1pZC1iYXRjaC5oYnMnLFxuICAgICAgd2lkdGg6IDcwMCxcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgdGl0bGU6ICdDb0M3LkNvQ0lERmxhZy50aXRsZScsXG4gICAgICBjbG9zZU9uU3VibWl0OiBmYWxzZSxcbiAgICAgIHN1Ym1pdE9uQ2xvc2U6IGZhbHNlLFxuICAgICAgc3VibWl0T25DaGFuZ2U6IGZhbHNlXG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jIGdldERhdGEgKCkge1xuICAgIGNvbnN0IHNoZWV0RGF0YSA9IHN1cGVyLmdldERhdGEoKVxuICAgIHNoZWV0RGF0YS5mb3VuZEtleXMgPSBPYmplY3Qua2V5cyhzaGVldERhdGEub2JqZWN0LmZvdW5kS2V5cykucmVkdWNlKChvdXQsIGtleSkgPT4ge1xuICAgICAgb3V0LnB1c2goeyBuYW1lOiBrZXksIGtleTogc2hlZXREYXRhLm9iamVjdC5mb3VuZEtleXNba2V5XSB9KVxuICAgICAgcmV0dXJuIG91dFxuICAgIH0sIFtdKS5zb3J0KENvQzdVdGlsaXRpZXMuc29ydEJ5TmFtZUtleSlcbiAgICBzaGVldERhdGEubWlzc2luZ05hbWVzID0gT2JqZWN0LmtleXMoc2hlZXREYXRhLm9iamVjdC5taXNzaW5nTmFtZXMpLnJlZHVjZSgob3V0LCBrZXkpID0+IHtcbiAgICAgIG91dC5wdXNoKHsga2V5OiBzaGVldERhdGEub2JqZWN0LmZvdW5kS2V5c1trZXldID8/ICcnLCBuYW1lOiBrZXksIGN1c3RvbTogc2hlZXREYXRhLm9iamVjdC5taXNzaW5nTmFtZXNba2V5XSwgc3VmZml4OiBzaGVldERhdGEub2JqZWN0Lm1pc3NpbmdOYW1lc1trZXldLnJlcGxhY2UodGhpcy5vYmplY3Quc3VmZml4UmVnRXhwLCAnJykgfSlcbiAgICAgIHJldHVybiBvdXRcbiAgICB9LCBbXSkuc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG4gICAgcmV0dXJuIHNoZWV0RGF0YVxuICB9XG5cbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuICAgIGh0bWwuZmluZCgnLmV4aXN0aW5nJykuY2hhbmdlKHRoaXMub25TZXROYW1lLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCcuZmEtd2FuZC1tYWdpYycpLmNsaWNrKHRoaXMub25DbGlja0d1ZXNzLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCdpbnB1dCcpLmtleXVwKHRoaXMub25LZXl1cC5iaW5kKHRoaXMpKVxuICB9XG5cbiAgb25TZXROYW1lIChldmVudCkge1xuICAgIGNvbnN0IG9iaiA9ICQoZXZlbnQuY3VycmVudFRhcmdldClcbiAgICB0aGlzLm9iamVjdC5taXNzaW5nTmFtZXNbb2JqLmNsb3Nlc3QoJ2xpJykuZGF0YSgnbmFtZScpXSA9IG9iai52YWwoKVxuICAgIHRoaXMucmVuZGVyKHRydWUpXG4gIH1cblxuICBvbkNsaWNrR3Vlc3MgKGV2ZW50KSB7XG4gICAgY29uc3Qgb2JqID0gJChldmVudC5jdXJyZW50VGFyZ2V0KVxuICAgIGNvbnN0IG5hbWUgPSBvYmouY2xvc2VzdCgnbGknKS5kYXRhKCduYW1lJylcbiAgICB0aGlzLm9iamVjdC5taXNzaW5nTmFtZXNbbmFtZV0gPSB0aGlzLm9iamVjdC5pZFByZWZpeCArIENvQzdVdGlsaXRpZXMudG9LZWJhYkNhc2UobmFtZSlcbiAgICB0aGlzLnJlbmRlcih0cnVlKVxuICB9XG5cbiAgb25LZXl1cCAoZXZlbnQpIHtcbiAgICBjb25zdCBvYmogPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpXG4gICAgY29uc3QgbmFtZSA9IG9iai5jbG9zZXN0KCdsaScpLmRhdGEoJ25hbWUnKVxuICAgIHRoaXMub2JqZWN0Lm1pc3NpbmdOYW1lc1tuYW1lXSA9IHRoaXMub2JqZWN0LmlkUHJlZml4ICsgb2JqLnZhbCgpXG4gIH1cblxuICBhc3luYyBfdXBkYXRlT2JqZWN0IChldmVudCwgZm9ybURhdGEpIHtcbiAgICBpZiAoZXZlbnQuc3VibWl0dGVyKSB7XG4gICAgICBpZiAodGhpcy5vYmplY3QudHlwZU5hbWUgPT09IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FbnRpdGllcy5Ta2lsbCcpKSB7XG4gICAgICAgIHRoaXMuY2xvc2UoKVxuICAgICAgICBhd2FpdCBDb0NJREJhdGNoLnByb2Nlc3NTa2lsbEtleXModGhpcy5vYmplY3QudXBkYXRlTGlzdCwgdGhpcy5vYmplY3QubWlzc2luZ05hbWVzKVxuICAgICAgfVxuICAgICAgdGhpcy5vYmplY3QucmVzb2x2ZSh0cnVlKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBwcm9jZXNzU2tpbGxLZXlzICh1cGRhdGVMaXN0LCBtaXNzaW5nTmFtZXMpIHtcbiAgICBjb25zdCBpdGVtcyA9IFtdXG4gICAgY29uc3QgYWN0b3JzID0ge31cbiAgICBjb25zdCBzY2VuZXMgPSB7fVxuICAgIGZvciAoY29uc3QgdXBkYXRlIG9mIHVwZGF0ZUxpc3QpIHtcbiAgICAgIHVwZGF0ZS5jb2NpZEZsYWcuaWQgPSBtaXNzaW5nTmFtZXNbdXBkYXRlLm5hbWVdXG4gICAgICBpZiAodHlwZW9mIHVwZGF0ZS5jb2NpZEZsYWcubGFuZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdXBkYXRlLmNvY2lkRmxhZy5sYW5nID0gZ2FtZS5pMThuLmxhbmdcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdXBkYXRlLmNvY2lkRmxhZy5wcmlvcml0eSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdXBkYXRlLmNvY2lkRmxhZy5wcmlvcml0eSA9IDBcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdXBkYXRlLmNvY2lkRmxhZy5lcmFzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB1cGRhdGUuY29jaWRGbGFnLmVyYXMgPSB7fVxuICAgICAgfVxuICAgICAgY29uc3QgZmxhZ3MgPSBmb3VuZHJ5LnV0aWxzLmZsYXR0ZW5PYmplY3QoeyBmbGFnczogeyBDb0M3OiB7IGNvY2lkRmxhZzogdXBkYXRlLmNvY2lkRmxhZyB9IH0gfSlcbiAgICAgIGlmICh0eXBlb2YgdXBkYXRlLnNjZW5lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAodHlwZW9mIHNjZW5lc1t1cGRhdGUuc2NlbmVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGNvbnN0IHNjZW5lID0gZ2FtZS5zY2VuZXMuZ2V0KHVwZGF0ZS5zY2VuZSlcbiAgICAgICAgICBzY2VuZXNbdXBkYXRlLnNjZW5lXSA9IHNjZW5lLnRvT2JqZWN0KClcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b2tlbk9mZnNldCA9IHNjZW5lc1t1cGRhdGUuc2NlbmVdLnRva2Vucy5maW5kSW5kZXgodCA9PiB0Ll9pZCA9PT0gdXBkYXRlLnRva2VuKVxuICAgICAgICBpZiAodG9rZW5PZmZzZXQgPiAtMSkge1xuICAgICAgICAgIGNvbnN0IGl0ZW1PZmZzZXQgPSBzY2VuZXNbdXBkYXRlLnNjZW5lXS50b2tlbnNbdG9rZW5PZmZzZXRdLmFjdG9yRGF0YS5pdGVtcy5maW5kSW5kZXgoaSA9PiBpLl9pZCA9PT0gdXBkYXRlLml0ZW0pXG4gICAgICAgICAgaWYgKGl0ZW1PZmZzZXQgPiAtMSkge1xuICAgICAgICAgICAgY29uc3QgZXhwYW5kZWRGbGFncyA9IGZvdW5kcnkudXRpbHMuZXhwYW5kT2JqZWN0KE9iamVjdC5lbnRyaWVzKGZsYWdzKS5yZWR1Y2UoKG91dCwgZW50cnkpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGVudHJ5WzBdLm1hdGNoKC9eZmxhZ3NcXC5Db0M3XFwuY29jaWRGbGFnLykpIHtcbiAgICAgICAgICAgICAgICBvdXRbZW50cnlbMF1dID0gZW50cnlbMV1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gb3V0XG4gICAgICAgICAgICB9LCB7fSkpXG4gICAgICAgICAgICBzY2VuZXNbdXBkYXRlLnNjZW5lXS50b2tlbnNbdG9rZW5PZmZzZXRdLmFjdG9yRGF0YS5pdGVtc1tpdGVtT2Zmc2V0XSA9IGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc2NlbmVzW3VwZGF0ZS5zY2VuZV0udG9rZW5zW3Rva2VuT2Zmc2V0XS5hY3RvckRhdGEuaXRlbXNbaXRlbU9mZnNldF0sIGV4cGFuZGVkRmxhZ3MpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB1cGRhdGUuYWN0b3IgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWN0b3JzW3VwZGF0ZS5hY3Rvcl0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgYWN0b3JzW3VwZGF0ZS5hY3Rvcl0gPSBbXVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGl0ZW0gPSB7XG4gICAgICAgICAgX2lkOiB1cGRhdGUuaXRlbVxuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGZsYWdzKSkge1xuICAgICAgICAgIGlmIChrZXkubWF0Y2goL15mbGFnc1xcLkNvQzdcXC5jb2NpZEZsYWcvKSkge1xuICAgICAgICAgICAgaXRlbVtrZXldID0gZmxhZ3Nba2V5XVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhY3RvcnNbdXBkYXRlLmFjdG9yXS5wdXNoKGl0ZW0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBpdGVtID0ge1xuICAgICAgICAgIF9pZDogdXBkYXRlLml0ZW1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhmbGFncykpIHtcbiAgICAgICAgICBpZiAoa2V5Lm1hdGNoKC9eZmxhZ3NcXC5Db0M3XFwuY29jaWRGbGFnLykpIHtcbiAgICAgICAgICAgIGl0ZW1ba2V5XSA9IGZsYWdzW2tleV1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaXRlbXMucHVzaChpdGVtKVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXRlbXMubGVuZ3RoKSB7XG4gICAgICBhd2FpdCBJdGVtLnVwZGF0ZURvY3VtZW50cyhpdGVtcylcbiAgICB9XG4gICAgaWYgKE9iamVjdC5rZXlzKGFjdG9ycykubGVuZ3RoKSB7XG4gICAgICBmb3IgKGNvbnN0IGFjdG9ySWQgb2YgT2JqZWN0LmtleXMoYWN0b3JzKSkge1xuICAgICAgICBhd2FpdCBJdGVtLnVwZGF0ZURvY3VtZW50cyhhY3RvcnNbYWN0b3JJZF0sIHsgcGFyZW50OiBnYW1lLmFjdG9ycy5nZXQoYWN0b3JJZCkgfSlcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKE9iamVjdC5rZXlzKHNjZW5lcykubGVuZ3RoKSB7XG4gICAgICBmb3IgKGNvbnN0IHNjZW5lSWQgb2YgT2JqZWN0LmtleXMoc2NlbmVzKSkge1xuICAgICAgICBjb25zdCBzY2VuZSA9IGdhbWUuc2NlbmVzLmdldChzY2VuZUlkKVxuICAgICAgICBzY2VuZS51cGRhdGUoc2NlbmVzW3NjZW5lSWRdKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIHBvcHVsYXRlU2tpbGxLZXlzICh1cGRhdGVMaXN0LCBtaXNzaW5nTmFtZXMsIGZvdW5kS2V5cykge1xuICAgIGZvciAoY29uc3QgYWN0b3Igb2YgZ2FtZS5hY3RvcnMuY29udGVudHMpIHtcbiAgICAgIGNvbnN0IGFjdG9yRGF0YSA9IGFjdG9yLnRvT2JqZWN0KClcbiAgICAgIGlmIChhY3RvckRhdGEuaXRlbXMpIHtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGFjdG9yRGF0YS5pdGVtcykge1xuICAgICAgICAgIGNvbnN0IGl0ZW1EYXRhID0gaXRlbSBpbnN0YW5jZW9mIENPTkZJRy5JdGVtLmRvY3VtZW50Q2xhc3MgPyBpdGVtLnRvT2JqZWN0KCkgOiBpdGVtXG4gICAgICAgICAgaWYgKGl0ZW1EYXRhLnR5cGUgPT09ICdza2lsbCcpIHtcbiAgICAgICAgICAgIGlmICghaXRlbURhdGEuZmxhZ3MuQ29DNz8uY29jaWRGbGFnPy5pZD8ubWF0Y2goL15pLnNraWxsLykpIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtaXNzaW5nTmFtZXNbaXRlbURhdGEubmFtZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgbWlzc2luZ05hbWVzW2l0ZW1EYXRhLm5hbWVdID0gJydcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB1cGRhdGVMaXN0LnB1c2goe1xuICAgICAgICAgICAgICAgIGFjdG9yOiBhY3Rvci5faWQsXG4gICAgICAgICAgICAgICAgaXRlbTogaXRlbURhdGEuX2lkLFxuICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW1EYXRhLm5hbWUsXG4gICAgICAgICAgICAgICAgY29jaWRGbGFnOiBpdGVtRGF0YS5mbGFncy5Db0M3Py5jb2NpZEZsYWcgPz8ge31cbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGZvdW5kS2V5c1tpdGVtRGF0YS5uYW1lXSA9IGl0ZW1EYXRhLmZsYWdzLkNvQzcuY29jaWRGbGFnLmlkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBnYW1lLml0ZW1zLmNvbnRlbnRzKSB7XG4gICAgICBjb25zdCBpdGVtRGF0YSA9IGl0ZW0gaW5zdGFuY2VvZiBDT05GSUcuSXRlbS5kb2N1bWVudENsYXNzID8gaXRlbS50b09iamVjdCgpIDogaXRlbVxuICAgICAgaWYgKGl0ZW1EYXRhLnR5cGUgPT09ICdza2lsbCcpIHtcbiAgICAgICAgaWYgKCFpdGVtRGF0YS5mbGFncy5Db0M3Py5jb2NpZEZsYWc/LmlkPy5tYXRjaCgvXmkuc2tpbGwvKSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgbWlzc2luZ05hbWVzW2l0ZW1EYXRhLm5hbWVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgbWlzc2luZ05hbWVzW2l0ZW1EYXRhLm5hbWVdID0gJydcbiAgICAgICAgICB9XG4gICAgICAgICAgdXBkYXRlTGlzdC5wdXNoKHtcbiAgICAgICAgICAgIGl0ZW06IGl0ZW1EYXRhLl9pZCxcbiAgICAgICAgICAgIG5hbWU6IGl0ZW1EYXRhLm5hbWUsXG4gICAgICAgICAgICBjb2NpZEZsYWc6IGl0ZW1EYXRhLmZsYWdzLkNvQzc/LmNvY2lkRmxhZyA/PyB7fVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm91bmRLZXlzW2l0ZW1EYXRhLm5hbWVdID0gaXRlbURhdGEuZmxhZ3MuQ29DNy5jb2NpZEZsYWcuaWRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IHNjZW5lIG9mIGdhbWUuc2NlbmVzKSB7XG4gICAgICBjb25zdCBzY2VuZURhdGEgPSBzY2VuZS50b09iamVjdCgpXG4gICAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHNjZW5lRGF0YS50b2tlbnMgPz8gW10pIHtcbiAgICAgICAgaWYgKHRva2VuLmFjdG9ySWQgJiYgIXRva2VuLmFjdG9yTGluaykge1xuICAgICAgICAgIGNvbnN0IGFjdG9yRGF0YSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRva2VuLmFjdG9yRGF0YSlcbiAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgYWN0b3JEYXRhLml0ZW1zID8/IFtdKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtRGF0YSA9IGl0ZW0gaW5zdGFuY2VvZiBDT05GSUcuSXRlbS5kb2N1bWVudENsYXNzID8gaXRlbS50b09iamVjdCgpIDogaXRlbVxuICAgICAgICAgICAgaWYgKGl0ZW1EYXRhLnR5cGUgPT09ICdza2lsbCcpIHtcbiAgICAgICAgICAgICAgaWYgKCFpdGVtRGF0YS5mbGFncy5Db0M3Py5jb2NpZEZsYWc/LmlkPy5tYXRjaCgvXmkuc2tpbGwvKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWlzc2luZ05hbWVzW2l0ZW1EYXRhLm5hbWVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgbWlzc2luZ05hbWVzW2l0ZW1EYXRhLm5hbWVdID0gJydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdXBkYXRlTGlzdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgIHNjZW5lOiBzY2VuZURhdGEuX2lkLFxuICAgICAgICAgICAgICAgICAgdG9rZW46IHRva2VuLl9pZCxcbiAgICAgICAgICAgICAgICAgIGl0ZW06IGl0ZW1EYXRhLl9pZCxcbiAgICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW1EYXRhLm5hbWUsXG4gICAgICAgICAgICAgICAgICBjb2NpZEZsYWc6IGl0ZW1EYXRhLmZsYWdzLkNvQzc/LmNvY2lkRmxhZyA/PyB7fVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm91bmRLZXlzW2l0ZW1EYXRhLm5hbWVdID0gaXRlbURhdGEuZmxhZ3MuQ29DNy5jb2NpZEZsYWcuaWRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoT2JqZWN0LmtleXMobWlzc2luZ05hbWVzKS5maWx0ZXIoa2V5ID0+IG1pc3NpbmdOYW1lc1trZXldID09PSAnJykubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgaXRlbXMgPSBhd2FpdCBnYW1lLnN5c3RlbS5hcGkuY29jaWQuZnJvbUNvQ0lEUmVnZXhCZXN0KHsgY29jaWRSZWdFeHA6IC9eaVxcLnNraWxsXFwuLywgdHlwZTogJ2knLCBlcmE6IGZhbHNlIH0pXG4gICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgICAgZm91bmRLZXlzW2l0ZW0ubmFtZV0gPSBpdGVtLmZsYWdzLkNvQzcuY29jaWRGbGFnLmlkXG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBmb3VuZHJ5LnV0aWxzLmZsYXR0ZW5PYmplY3QoZ2FtZS5pMThuLnRyYW5zbGF0aW9ucy5Db0M3LkNvQ0lERmxhZy5rZXlzID8/IHt9KSkge1xuICAgICAgICBmb3VuZEtleXNbZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Db0NJREZsYWcua2V5cy4nICsga2V5KV0gPSBrZXlcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBtaXNzaW5nTmFtZXMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmb3VuZEtleXNbbmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgbWlzc2luZ05hbWVzW25hbWVdID0gZm91bmRLZXlzW25hbWVdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY3JlYXRlICh0eXBlKSB7XG4gICAgY29uc3QgdXBkYXRlTGlzdCA9IFtdXG4gICAgY29uc3QgbWlzc2luZ05hbWVzID0ge31cbiAgICBjb25zdCBmb3VuZEtleXMgPSB7fVxuICAgIGxldCB0eXBlTmFtZSA9ICcnXG4gICAgbGV0IGlkUHJlZml4ID0gJydcbiAgICBsZXQgc3VmZml4UmVnRXhwID0gbnVsbFxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnc2tpbGwnOlxuICAgICAgICB0eXBlTmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FbnRpdGllcy5Ta2lsbCcpXG4gICAgICAgIGlkUHJlZml4ID0gJ2kuc2tpbGwuJ1xuICAgICAgICBzdWZmaXhSZWdFeHAgPSAvXmlcXC5za2lsbFxcLi9cbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBhd2FpdCBDb0NJREJhdGNoLnBvcHVsYXRlU2tpbGxLZXlzKHVwZGF0ZUxpc3QsIG1pc3NpbmdOYW1lcywgZm91bmRLZXlzKVxuICAgIGlmIChPYmplY3Qua2V5cyhtaXNzaW5nTmFtZXMpLmZpbHRlcihrZXkgPT4gbWlzc2luZ05hbWVzW2tleV0gPT09ICcnKS5sZW5ndGggPT09IDApIHtcbiAgICAgIGF3YWl0IENvQ0lEQmF0Y2gucHJvY2Vzc1NraWxsS2V5cyh1cGRhdGVMaXN0LCBtaXNzaW5nTmFtZXMpXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBjb25zdCBkbGcgPSBuZXcgQ29DSURCYXRjaCh7IHR5cGVOYW1lLCBpZFByZWZpeCwgc3VmZml4UmVnRXhwLCB1cGRhdGVMaXN0LCBtaXNzaW5nTmFtZXMsIGZvdW5kS2V5cywgcmVzb2x2ZSB9KVxuICAgICAgZGxnLnJlbmRlcih0cnVlKVxuICAgIH0pXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBDT05GSUcsIERpYWxvZywgZm91bmRyeSwgZ2FtZSwgdWkgKi9cbmltcG9ydCB7IENvQzdJdGVtIH0gZnJvbSAnLi9pdGVtcy9pdGVtLmpzJ1xuaW1wb3J0IHsgQ29DSURCYXRjaCB9IGZyb20gJy4vYXBwcy9jb2MtaWQtYmF0Y2guanMnXG5cbmV4cG9ydCBjbGFzcyBVcGRhdGVyIHtcbiAgc3RhdGljIGFzeW5jIGNoZWNrRm9yVXBkYXRlICgpIHtcbiAgICBsZXQgc3lzdGVtVXBkYXRlVmVyc2lvbiA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3N5c3RlbVVwZGF0ZVZlcnNpb24nKVxuICAgIGlmIChnYW1lLmFjdG9ycy5zaXplICsgZ2FtZS5zY2VuZXMuc2l6ZSArIGdhbWUuaXRlbXMuc2l6ZSArIGdhbWUuam91cm5hbC5zaXplICsgZ2FtZS50YWJsZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIGFjdG9ycywgaXRlbXMsIGpvdXJuYWxzLCByb2xsIHRhYmxlcywgb3Igc2NlbmVzIHNraXAgd29ybGQgdXBkYXRlXG4gICAgICBzeXN0ZW1VcGRhdGVWZXJzaW9uID0gZ2FtZS5zeXN0ZW0udmVyc2lvblxuICAgICAgYXdhaXQgZ2FtZS5zZXR0aW5ncy5zZXQoJ0NvQzcnLCAnc3lzdGVtVXBkYXRlVmVyc2lvbicsIHN5c3RlbVVwZGF0ZVZlcnNpb24pXG4gICAgfVxuICAgIGNvbnN0IHJ1bk1pZ3JhdGUgPSBmb3VuZHJ5LnV0aWxzLmlzTmV3ZXJWZXJzaW9uKGdhbWUuc3lzdGVtLnZlcnNpb24sIHN5c3RlbVVwZGF0ZVZlcnNpb24gPz8gJzAnKVxuICAgIHRoaXMudXBkYXRlZE1vZHVsZXMgPSBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdzeXN0ZW1VcGRhdGVkTW9kdWxlVmVyc2lvbicpIHx8IHt9XG4gICAgdGhpcy5jdXJyZW50TW9kdWxlcyA9IHt9XG4gICAgZm9yIChjb25zdCBwYWNrIG9mIGdhbWUucGFja3MpIHtcbiAgICAgIGlmICghWydDb0M3JywgJ3dvcmxkJ10uaW5jbHVkZXMocGFjay5tZXRhZGF0YS5wYWNrYWdlTmFtZSkgJiYgWydBY3RvcicsICdJdGVtJywgJ1NjZW5lJ10uaW5jbHVkZXMocGFjay5tZXRhZGF0YS50eXBlKSkge1xuICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmN1cnJlbnRNb2R1bGVzLCBwYWNrLm1ldGFkYXRhLnBhY2thZ2VOYW1lKSkge1xuICAgICAgICAgIC8vIE9ubHkgbmVlZCB0byBjaGVjayBlYWNoIG1vZHVsZSBvbmNlXG4gICAgICAgICAgY29uc3QgbW9kdWxlID0gZ2FtZS5tb2R1bGVzLmdldChwYWNrLm1ldGFkYXRhLnBhY2thZ2VOYW1lKVxuICAgICAgICAgIGlmIChtb2R1bGUpIHtcbiAgICAgICAgICAgIGlmIChydW5NaWdyYXRlIHx8ICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy51cGRhdGVkTW9kdWxlcywgbW9kdWxlLmlkKSB8fCBTdHJpbmcodGhpcy51cGRhdGVkTW9kdWxlc1ttb2R1bGUuaWRdKSAhPT0gU3RyaW5nKG1vZHVsZS52ZXJzaW9uKSkge1xuICAgICAgICAgICAgICAvLyBBIG1pZ3JhdGlvbiBpcyByZXF1aXJlZCwgbW9kdWxlIGhhcyBub3QgYmVlbiB1cGRhdGVkIGJlZm9yZSwgb3IgdGhlIHZlcnNpb24gbnVtYmVyIGhhcyBjaGFuZ2VkXG4gICAgICAgICAgICAgIHRoaXMuY3VycmVudE1vZHVsZXNbbW9kdWxlLmlkXSA9IG1vZHVsZS52ZXJzaW9uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChydW5NaWdyYXRlIHx8IE9iamVjdC5rZXlzKHRoaXMuY3VycmVudE1vZHVsZXMpLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgICBuZXcgRGlhbG9nKHtcbiAgICAgICAgICB0aXRsZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk1pZ3JhdGUuVGl0bGUnKSxcbiAgICAgICAgICBjb250ZW50OiBnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5jdXJyZW50TW9kdWxlcykubGVuZ3RoID09PSAwXG4gICAgICAgICAgICAgID8gJ0NvQzcuTWlncmF0ZS5NZXNzYWdlJ1xuICAgICAgICAgICAgICA6ICdDb0M3Lk1pZ3JhdGUuV2l0aE1vZHVsZXNNZXNzYWdlJyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdmVyc2lvbjogZ2FtZS5zeXN0ZW0udmVyc2lvbixcbiAgICAgICAgICAgICAgbW9kdWxlczpcbiAgICAgICAgICAgICAgICAnPHVsPjxsaT4nICtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmN1cnJlbnRNb2R1bGVzKVxuICAgICAgICAgICAgICAgICAgLm1hcChtb2QgPT4gZ2FtZS5tb2R1bGVzLmdldChtb2QpLnRpdGxlKVxuICAgICAgICAgICAgICAgICAgLmpvaW4oJzwvbGk+PGxpPicpICtcbiAgICAgICAgICAgICAgICAnPC9saT48L3VsPidcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApLFxuICAgICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICAgIHVwZGF0ZToge1xuICAgICAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk1pZ3JhdGUuQnV0dG9uVXBkYXRlJyksXG4gICAgICAgICAgICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiBVcGRhdGVyLnVwZGF0ZSgpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2tpcDoge1xuICAgICAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk1pZ3JhdGUuQnV0dG9uU2tpcCcpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KS5yZW5kZXIodHJ1ZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ldyBEaWFsb2coe1xuICAgICAgICAgIHRpdGxlOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTWlncmF0ZS5UaXRsZScpLFxuICAgICAgICAgIGNvbnRlbnQ6IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuTWlncmF0ZS5HTVJlcXVpcmVkJywge1xuICAgICAgICAgICAgdmVyc2lvbjogZ2FtZS5zeXN0ZW0udmVyc2lvblxuICAgICAgICAgIH0pLFxuICAgICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICAgIE9LOiB7XG4gICAgICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTWlncmF0ZS5CdXR0b25Pa2F5JylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pLnJlbmRlcih0cnVlKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyB1cGRhdGUgKCkge1xuICAgIGF3YWl0IHRoaXMudXBkYXRlRG9jdW1lbnRzKClcblxuICAgIC8vIC8vIElmIHdlIHB1dCB1cCBhIHRlbXBvcmFyeSBzY2VuZSByZXR1cm4gdGhlIHVzZXIgYW5kIHJlbW92ZSBpdFxuICAgIC8vIGlmIChcbiAgICAvLyAgIHR5cGVvZiB0aGlzLnRlbXBvcmFyeVNjZW5lICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIC8vICAgdHlwZW9mIHRoaXMub3JpZ2luYWxTY2VuZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAvLyApIHtcbiAgICAvLyAgIGF3YWl0IHRoaXMub3JpZ2luYWxTY2VuZS52aWV3KClcbiAgICAvLyAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSlcbiAgICAvLyAgIGF3YWl0IHRoaXMudGVtcG9yYXJ5U2NlbmUuZGVsZXRlKClcbiAgICAvLyB9XG5cbiAgICAvLyBNaWdyYXRlIFNldHRpbmdzIGlmIFB1bHAgUnVsZXMgaXMgZW5hYmxlZCB0dXJuIG9uIGFsbCBydWxlc1xuICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdwdWxwUnVsZXMnKSkge1xuICAgICAgZ2FtZS5zZXR0aW5ncy5zZXQoJ0NvQzcnLCAncHVscFJ1bGVEb3VibGVNYXhIZWFsdGgnLCB0cnVlKVxuICAgICAgZ2FtZS5zZXR0aW5ncy5zZXQoJ0NvQzcnLCAncHVscFJ1bGVEZXZlbG9wbWVudFJvbGxMdWNrJywgdHJ1ZSlcbiAgICAgIGdhbWUuc2V0dGluZ3Muc2V0KCdDb0M3JywgJ3B1bHBSdWxlQXJjaGV0eXBlJywgdHJ1ZSlcbiAgICAgIGdhbWUuc2V0dGluZ3Muc2V0KCdDb0M3JywgJ3B1bHBSdWxlT3JnYW5pemF0aW9uJywgdHJ1ZSlcbiAgICAgIGdhbWUuc2V0dGluZ3Muc2V0KCdDb0M3JywgJ3B1bHBSdWxlVGFsZW50cycsIHRydWUpXG4gICAgICBnYW1lLnNldHRpbmdzLnNldCgnQ29DNycsICdwdWxwUnVsZUZhc3RlclJlY292ZXJ5JywgdHJ1ZSlcbiAgICAgIGdhbWUuc2V0dGluZ3Muc2V0KCdDb0M3JywgJ3B1bHBSdWxlSWdub3JlTWFqb3JXb3VuZHMnLCB0cnVlKVxuICAgICAgZ2FtZS5zZXR0aW5ncy5zZXQoJ0NvQzcnLCAncHVscFJ1bGVJZ25vcmVBZ2VQZW5hbHRpZXMnLCB0cnVlKVxuICAgIH1cblxuICAgIGF3YWl0IENvQ0lEQmF0Y2guY3JlYXRlKCdza2lsbCcpXG5cbiAgICBjb25zdCBzZXR0aW5ncyA9IGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3QodGhpcy51cGRhdGVkTW9kdWxlcyB8fCB7fSwgdGhpcy5jdXJyZW50TW9kdWxlcylcbiAgICBnYW1lLnNldHRpbmdzLnNldCgnQ29DNycsICdzeXN0ZW1VcGRhdGVkTW9kdWxlVmVyc2lvbicsIHNldHRpbmdzKVxuICAgIGdhbWUuc2V0dGluZ3Muc2V0KCdDb0M3JywgJ3N5c3RlbVVwZGF0ZVZlcnNpb24nLCBnYW1lLnN5c3RlbS52ZXJzaW9uKVxuXG4gICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuTWlncmF0ZS5Db21wbGV0ZScpLCB7XG4gICAgICBwZXJtYW5lbnQ6IHRydWVcbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIHVwZGF0ZURvY3VtZW50cyAoKSB7XG4gICAgLy8gTWlncmF0ZSBXb3JsZCBBY3RvcnNcbiAgICBmb3IgKGNvbnN0IGFjdG9yIG9mIGdhbWUuYWN0b3JzLmNvbnRlbnRzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB1cGRhdGVEYXRhID0gdGhpcy5taWdyYXRlQWN0b3JEYXRhKGFjdG9yLnRvT2JqZWN0KCkpXG4gICAgICAgIGlmICghZm91bmRyeS51dGlscy5pc0VtcHR5KHVwZGF0ZURhdGEpKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coYE1pZ3JhdGluZyBBY3RvciBkb2N1bWVudCAke2FjdG9yLm5hbWV9YClcbiAgICAgICAgICBhd2FpdCBhY3Rvci51cGRhdGUodXBkYXRlRGF0YSwgeyBlbmZvcmNlVHlwZXM6IGZhbHNlIH0pXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IgZGV0YWlscycsIGVycilcbiAgICAgICAgZXJyLm1lc3NhZ2UgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lk1pZ3JhdGUuRXJyb3JBY3RvcicsIHtcbiAgICAgICAgICBuYW1lOiBhY3Rvci5uYW1lLFxuICAgICAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlXG4gICAgICAgIH0pXG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoZXJyLm1lc3NhZ2UsIHsgcGVybWFuZW50OiB0cnVlIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTWlncmF0ZSBXb3JsZCBJdGVtc1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBnYW1lLml0ZW1zLmNvbnRlbnRzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB1cGRhdGVEYXRhID0gVXBkYXRlci5taWdyYXRlSXRlbURhdGEoaXRlbS50b09iamVjdCgpKVxuICAgICAgICBpZiAoIWZvdW5kcnkudXRpbHMuaXNFbXB0eSh1cGRhdGVEYXRhKSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGBNaWdyYXRpbmcgSXRlbSBkb2N1bWVudCAke2l0ZW0ubmFtZX1gKVxuICAgICAgICAgIGF3YWl0IGl0ZW0udXBkYXRlKHVwZGF0ZURhdGEsIHsgZW5mb3JjZVR5cGVzOiBmYWxzZSB9KVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIGRldGFpbHMnLCBlcnIpXG4gICAgICAgIGVyci5tZXNzYWdlID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5NaWdyYXRlLkVycm9ySXRlbScsIHtcbiAgICAgICAgICBuYW1lOiBpdGVtLm5hbWUsXG4gICAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2VcbiAgICAgICAgfSlcbiAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihlcnIubWVzc2FnZSwgeyBwZXJtYW5lbnQ6IHRydWUgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNaWdyYXRlIFdvcmxkIFRhYmxlc1xuICAgIGZvciAoY29uc3QgdGFibGUgb2YgZ2FtZS50YWJsZXMuY29udGVudHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZURhdGEgPSBVcGRhdGVyLm1pZ3JhdGVUYWJsZURhdGEodGFibGUudG9PYmplY3QoKSlcbiAgICAgICAgaWYgKCFmb3VuZHJ5LnV0aWxzLmlzRW1wdHkodXBkYXRlRGF0YSkpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgTWlncmF0aW5nIFRhYmxlIGRvY3VtZW50ICR7dGFibGUubmFtZX1gKVxuICAgICAgICAgIGF3YWl0IHRhYmxlLnVwZGF0ZSh1cGRhdGVEYXRhLCB7IGVuZm9yY2VUeXBlczogZmFsc2UgfSlcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBkZXRhaWxzJywgZXJyKVxuICAgICAgICBlcnIubWVzc2FnZSA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuTWlncmF0ZS5FcnJvclRhYmxlJywge1xuICAgICAgICAgIG5hbWU6IHRhYmxlLm5hbWUsXG4gICAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2VcbiAgICAgICAgfSlcbiAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihlcnIubWVzc2FnZSwgeyBwZXJtYW5lbnQ6IHRydWUgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNaWdyYXRlIE1hY3Jvc1xuICAgIGZvciAoY29uc3QgbWFjcm8gb2YgZ2FtZS5tYWNyb3MuY29udGVudHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZURhdGEgPSBVcGRhdGVyLm1pZ3JhdGVNYWNyb0RhdGEobWFjcm8udG9PYmplY3QoKSlcbiAgICAgICAgaWYgKCFmb3VuZHJ5LnV0aWxzLmlzRW1wdHkodXBkYXRlRGF0YSkpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgTWlncmF0aW5nIE1hY3JvIGRvY3VtZW50ICR7bWFjcm8ubmFtZX1gKVxuICAgICAgICAgIGF3YWl0IG1hY3JvLnVwZGF0ZSh1cGRhdGVEYXRhLCB7IGVuZm9yY2VUeXBlczogZmFsc2UgfSlcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBkZXRhaWxzJywgZXJyKVxuICAgICAgICBlcnIubWVzc2FnZSA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuTWlncmF0ZS5FcnJvck1hY3JvJywge1xuICAgICAgICAgIG5hbWU6IG1hY3JvLm5hbWUsXG4gICAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2VcbiAgICAgICAgfSlcbiAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihlcnIubWVzc2FnZSwgeyBwZXJtYW5lbnQ6IHRydWUgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNaWdyYXRlIFNjZW5lcyBbVG9rZW5dIEFjdG9yc1xuICAgIGZvciAoY29uc3Qgc2NlbmUgb2YgZ2FtZS5zY2VuZXMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZURhdGEgPSBVcGRhdGVyLm1pZ3JhdGVTY2VuZURhdGEoc2NlbmUpXG4gICAgICAgIGlmICghZm91bmRyeS51dGlscy5pc0VtcHR5KHVwZGF0ZURhdGEpKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coYE1pZ3JhdGluZyBTY2VuZSBkb2N1bWVudCAke3NjZW5lLm5hbWV9YClcbiAgICAgICAgICAvLyBpZiAoXG4gICAgICAgICAgLy8gICBzY2VuZS5pZCA9PT0gZ2FtZS5zY2VuZXMuY3VycmVudC5pZCAmJlxuICAgICAgICAgIC8vICAgdHlwZW9mIHRoaXMudGVtcG9yYXJ5U2NlbmUgPT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgLy8gICB0eXBlb2YgdGhpcy5vcmlnaW5hbFNjZW5lID09PSAndW5kZWZpbmVkJ1xuICAgICAgICAgIC8vICkge1xuICAgICAgICAgIC8vICAgdGhpcy50ZW1wb3JhcnlTY2VuZSA9IGF3YWl0IFNjZW5lLmNyZWF0ZSh7XG4gICAgICAgICAgLy8gICAgIG5hbWU6IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuTWlncmF0ZS5VcGRhdGVDdXJyZW50U2NlbmUnKSxcbiAgICAgICAgICAvLyAgICAgYmFja2dyb3VuZENvbG9yOiAnIzAwMDAwMCdcbiAgICAgICAgICAvLyAgIH0pXG4gICAgICAgICAgLy8gICB0aGlzLm9yaWdpbmFsU2NlbmUgPSBzY2VuZVxuICAgICAgICAgIC8vICAgYXdhaXQgRHJhd2luZ0RvY3VtZW50LmNyZWF0ZShcbiAgICAgICAgICAvLyAgICAge1xuICAgICAgICAgIC8vICAgICAgIGF1dGhvcjogZ2FtZS51c2VyLmlkLFxuICAgICAgICAgIC8vICAgICAgIHNoYXBlOiB7XG4gICAgICAgICAgLy8gICAgICAgICB0eXBlOiAncicsXG4gICAgICAgICAgLy8gICAgICAgICB3aWR0aDogMTYwMCxcbiAgICAgICAgICAvLyAgICAgICAgIGhlaWdodDogMjAwXG4gICAgICAgICAgLy8gICAgICAgfSxcbiAgICAgICAgICAvLyAgICAgICB4OiAyMjAwLFxuICAgICAgICAgIC8vICAgICAgIHk6IDIyMDAsXG4gICAgICAgICAgLy8gICAgICAgejogMCxcbiAgICAgICAgICAvLyAgICAgICBzdHJva2VXaWR0aDogMCxcbiAgICAgICAgICAvLyAgICAgICB0ZXh0OiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lk1pZ3JhdGUuVXBkYXRlQ3VycmVudFNjZW5lJyksXG4gICAgICAgICAgLy8gICAgICAgZm9udEZhbWlseTogJ1NpZ25pa2EnLFxuICAgICAgICAgIC8vICAgICAgIGZvbnRTaXplOiAxMjgsXG4gICAgICAgICAgLy8gICAgICAgdGV4dENvbG9yOiAnI0ZGRkZGRicsXG4gICAgICAgICAgLy8gICAgICAgdGV4dEFscGhhOiAxLFxuICAgICAgICAgIC8vICAgICAgIGhpZGRlbjogZmFsc2UsXG4gICAgICAgICAgLy8gICAgICAgbG9ja2VkOiB0cnVlXG4gICAgICAgICAgLy8gICAgIH0sXG4gICAgICAgICAgLy8gICAgIHtcbiAgICAgICAgICAvLyAgICAgICBwYXJlbnQ6IHRoaXMudGVtcG9yYXJ5U2NlbmVcbiAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgIC8vICAgKVxuICAgICAgICAgIC8vICAgYXdhaXQgdGhpcy50ZW1wb3JhcnlTY2VuZS52aWV3KClcbiAgICAgICAgICAvLyAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSlcbiAgICAgICAgICAvLyB9XG4gICAgICAgICAgYXdhaXQgc2NlbmUudXBkYXRlKHVwZGF0ZURhdGEsIHsgZW5mb3JjZVR5cGVzOiBmYWxzZSB9KVxuICAgICAgICB9XG4gICAgICAgIHNjZW5lLnRva2Vucy5mb3JFYWNoKHQgPT4gKHQuX2FjdG9yID0gbnVsbCkpXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIGRldGFpbHMnLCBlcnIpXG4gICAgICAgIGVyci5tZXNzYWdlID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5NaWdyYXRlLkVycm9yU2NlbmUnLCB7XG4gICAgICAgICAgbmFtZTogc2NlbmUubmFtZSxcbiAgICAgICAgICBtZXNzYWdlOiBlcnIubWVzc2FnZVxuICAgICAgICB9KVxuICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKGVyci5tZXNzYWdlLCB7IHBlcm1hbmVudDogdHJ1ZSB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1pZ3JhdGUgV29ybGQgQ29tcGVuZGl1bSBQYWNrc1xuICAgIGZvciAoY29uc3QgcGFjayBvZiBnYW1lLnBhY2tzKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHBhY2subWV0YWRhdGEucGFja2FnZU5hbWUgIT09ICdDb0M3JyAmJlxuICAgICAgICBbJ0FjdG9yJywgJ0l0ZW0nLCAnTWFjcm8nLCAnUm9sbFRhYmxlJywgJ1NjZW5lJ10uaW5jbHVkZXMoXG4gICAgICAgICAgcGFjay5tZXRhZGF0YS50eXBlXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICBhd2FpdCBVcGRhdGVyLm1pZ3JhdGVDb21wZW5kaXVtRGF0YShwYWNrKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBtaWdyYXRlQWN0b3JEYXRhIChhY3Rvcikge1xuICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7fVxuXG4gICAgLy8gVXBkYXRlIFdvcmxkIEFjdG9yXG4gICAgVXBkYXRlci5fbWlncmF0ZUFjdG9yQ2hhcmFjdGVyU2FuaXR5KGFjdG9yLCB1cGRhdGVEYXRhKVxuICAgIFVwZGF0ZXIuX21pZ3JhdGVBY3RvckFydHdvcmsoYWN0b3IsIHVwZGF0ZURhdGEpXG4gICAgVXBkYXRlci5fbWlncmF0ZUFjdG9yS2VlcGVyTm90ZXMoYWN0b3IsIHVwZGF0ZURhdGEpXG4gICAgVXBkYXRlci5fbWlncmF0ZUFjdG9yTnBjQ3JlYXR1cmUoYWN0b3IsIHVwZGF0ZURhdGEpXG4gICAgVXBkYXRlci5fbWlncmF0ZUFjdG9yU3RhdHVzRWZmZWN0QWN0aXZlKGFjdG9yLCB1cGRhdGVEYXRhKVxuICAgIFVwZGF0ZXIuX21pZ3JhdGVBY3RvclNhbkxvc3NSZWFzb25zKGFjdG9yLCB1cGRhdGVEYXRhKVxuICAgIFVwZGF0ZXIuX21pZ3JhdGVBY3Rvck1vbmV0YXJ5KGFjdG9yLCB1cGRhdGVEYXRhKVxuXG4gICAgLy8gTWlncmF0ZSBXb3JsZCBBY3RvciBJdGVtc1xuICAgIGlmIChhY3Rvci5pdGVtcykge1xuICAgICAgY29uc3QgaXRlbXMgPSBhY3Rvci5pdGVtcy5yZWR1Y2UoKGFyciwgaSkgPT4ge1xuICAgICAgICBjb25zdCBpdGVtRGF0YSA9XG4gICAgICAgICAgaSBpbnN0YW5jZW9mIENPTkZJRy5JdGVtLmRvY3VtZW50Q2xhc3MgPyBpLnRvT2JqZWN0KCkgOiBpXG4gICAgICAgIGNvbnN0IGl0ZW1VcGRhdGUgPSBVcGRhdGVyLm1pZ3JhdGVJdGVtRGF0YShpdGVtRGF0YSlcbiAgICAgICAgaWYgKCFmb3VuZHJ5LnV0aWxzLmlzRW1wdHkoaXRlbVVwZGF0ZSkpIHtcbiAgICAgICAgICBpdGVtVXBkYXRlLl9pZCA9IGl0ZW1EYXRhLl9pZFxuICAgICAgICAgIGFyci5wdXNoKGZvdW5kcnkudXRpbHMuZXhwYW5kT2JqZWN0KGl0ZW1VcGRhdGUpKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJcbiAgICAgIH0sIFtdKVxuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdXBkYXRlRGF0YS5pdGVtcyA9IGl0ZW1zXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVwZGF0ZURhdGFcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBtaWdyYXRlQ29tcGVuZGl1bURhdGEgKHBhY2spIHtcbiAgICBjb25zdCBkb2N1bWVudFR5cGUgPSBwYWNrLm1ldGFkYXRhLnR5cGVcbiAgICBpZiAoXG4gICAgICAhWydBY3RvcicsICdJdGVtJywgJ01hY3JvJywgJ1JvbGxUYWJsZScsICdTY2VuZSddLmluY2x1ZGVzKGRvY3VtZW50VHlwZSlcbiAgICApIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIFVubG9jayB0aGUgcGFjayBmb3IgZWRpdGluZ1xuICAgIGNvbnN0IHdhc0xvY2tlZCA9IHBhY2subG9ja2VkXG4gICAgYXdhaXQgcGFjay5jb25maWd1cmUoeyBsb2NrZWQ6IGZhbHNlIH0pXG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgcGFjay5taWdyYXRlKClcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdwYWNrIG1pZ3JhdGUgZmFpbGVkJywgcGFjaywgZXJyKVxuICAgIH1cbiAgICBjb25zdCBkb2N1bWVudHMgPSBhd2FpdCBwYWNrLmdldERvY3VtZW50cygpXG5cbiAgICAvLyBJdGVyYXRlIG92ZXIgY29tcGVuZGl1bSBlbnRyaWVzIC0gYXBwbHlpbmcgZmluZS10dW5lZCBtaWdyYXRpb24gZnVuY3Rpb25zXG4gICAgZm9yIChjb25zdCBkb2Mgb2YgZG9jdW1lbnRzKSB7XG4gICAgICBsZXQgdXBkYXRlRGF0YSA9IHt9XG4gICAgICB0cnkge1xuICAgICAgICBzd2l0Y2ggKGRvY3VtZW50VHlwZSkge1xuICAgICAgICAgIGNhc2UgJ0FjdG9yJzpcbiAgICAgICAgICAgIHVwZGF0ZURhdGEgPSBVcGRhdGVyLm1pZ3JhdGVBY3RvckRhdGEoZG9jLnRvT2JqZWN0KCkpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgJ0l0ZW0nOlxuICAgICAgICAgICAgdXBkYXRlRGF0YSA9IFVwZGF0ZXIubWlncmF0ZUl0ZW1EYXRhKGRvYy50b09iamVjdCgpKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlICdNYWNybyc6XG4gICAgICAgICAgICB1cGRhdGVEYXRhID0gVXBkYXRlci5taWdyYXRlTWFjcm9EYXRhKGRvYy50b09iamVjdCgpKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlICdSb2xsVGFibGUnOlxuICAgICAgICAgICAgdXBkYXRlRGF0YSA9IFVwZGF0ZXIubWlncmF0ZVRhYmxlRGF0YShkb2MudG9PYmplY3QoKSlcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSAnU2NlbmUnOlxuICAgICAgICAgICAgdXBkYXRlRGF0YSA9IFVwZGF0ZXIubWlncmF0ZVNjZW5lRGF0YShkb2MpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIC8vIFNhdmUgdGhlIGVudHJ5LCBpZiBkYXRhIHdhcyBjaGFuZ2VkXG4gICAgICAgIGlmICghZm91bmRyeS51dGlscy5pc0VtcHR5KHVwZGF0ZURhdGEpKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICBgTWlncmF0ZWQgJHtkb2N1bWVudFR5cGV9IGRvY3VtZW50ICR7ZG9jLm5hbWV9IGluIENvbXBlbmRpdW0gJHtwYWNrLmNvbGxlY3Rpb259YFxuICAgICAgICAgIClcbiAgICAgICAgICBhd2FpdCBkb2MudXBkYXRlKHVwZGF0ZURhdGEpXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IgZGV0YWlscycsIGVycilcbiAgICAgICAgZXJyLm1lc3NhZ2UgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3Lk1pZ3JhdGUuRXJyb3JEb2N1bWVudFBhY2snLCB7XG4gICAgICAgICAgbmFtZTogZG9jLm5hbWUsXG4gICAgICAgICAgY29sbGVjdGlvbjogcGFjay5jb2xsZWN0aW9uLFxuICAgICAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlXG4gICAgICAgIH0pXG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoZXJyLm1lc3NhZ2UsIHsgcGVybWFuZW50OiB0cnVlIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQXBwbHkgdGhlIG9yaWdpbmFsIGxvY2tlZCBzdGF0dXMgZm9yIHRoZSBwYWNrXG4gICAgYXdhaXQgcGFjay5jb25maWd1cmUoeyBsb2NrZWQ6IHdhc0xvY2tlZCB9KVxuICB9XG5cbiAgc3RhdGljIG1pZ3JhdGVJdGVtRGF0YSAoaXRlbSkge1xuICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7fVxuXG4gICAgLy8gVXBkYXRlIFdvcmxkIEl0ZW1cbiAgICBVcGRhdGVyLl9taWdyYXRlSXRlbUVtYmVkZGVkdjEwKGl0ZW0sIHVwZGF0ZURhdGEpXG4gICAgVXBkYXRlci5fbWlncmF0ZUl0ZW1FeHBlcmllbmNlKGl0ZW0sIHVwZGF0ZURhdGEpXG4gICAgVXBkYXRlci5fbWlncmF0ZUl0ZW1BcnR3b3JrKGl0ZW0sIHVwZGF0ZURhdGEpXG4gICAgVXBkYXRlci5fbWlncmF0ZUl0ZW1Cb29rQXV0b21hdGVkKGl0ZW0sIHVwZGF0ZURhdGEpXG4gICAgVXBkYXRlci5fbWlncmF0ZUl0ZW1LZWVwZXJOb3RlcyhpdGVtLCB1cGRhdGVEYXRhKVxuICAgIFVwZGF0ZXIuX21pZ3JhdGVJdGVtU3BlbGxBdXRvbWF0ZWQoaXRlbSwgdXBkYXRlRGF0YSlcbiAgICBVcGRhdGVyLl9taWdyYXRlSXRlbUtlZXBlck5vdGVzTWVyZ2UoaXRlbSwgdXBkYXRlRGF0YSlcbiAgICBVcGRhdGVyLl9taWdyYXRlSXRlbUVyYXMoaXRlbSwgdXBkYXRlRGF0YSlcbiAgICBVcGRhdGVyLl9taWdyYXRlSXRlbXYxMChpdGVtLCB1cGRhdGVEYXRhKVxuICAgIFVwZGF0ZXIuX21pZ3JhdGVJdGVtQm9va1VuaXRzKGl0ZW0sIHVwZGF0ZURhdGEpXG5cbiAgICByZXR1cm4gdXBkYXRlRGF0YVxuICB9XG5cbiAgc3RhdGljIG1pZ3JhdGVNYWNyb0RhdGEgKHRhYmxlKSB7XG4gICAgY29uc3QgdXBkYXRlRGF0YSA9IHt9XG5cbiAgICAvLyBVcGRhdGUgV29ybGQgQWN0b3JcbiAgICBVcGRhdGVyLl9taWdyYXRlTWFjcm9BcnR3b3JrKHRhYmxlLCB1cGRhdGVEYXRhKVxuXG4gICAgcmV0dXJuIHVwZGF0ZURhdGFcbiAgfVxuXG4gIHN0YXRpYyBtaWdyYXRlVGFibGVEYXRhICh0YWJsZSkge1xuICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7fVxuXG4gICAgLy8gVXBkYXRlIFdvcmxkIEFjdG9yXG4gICAgVXBkYXRlci5fbWlncmF0ZVRhYmxlQXJ0d29yayh0YWJsZSwgdXBkYXRlRGF0YSlcblxuICAgIHJldHVybiB1cGRhdGVEYXRhXG4gIH1cblxuICBzdGF0aWMgbWlncmF0ZVNjZW5lRGF0YSAoc2NlbmUpIHtcbiAgICBjb25zdCByZXR1cm5zID0ge1xuICAgICAgdG9rZW5zOiBbXVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHNjZW5lLnRva2VucyAhPT0gJ3VuZGVmaW5lZCcgJiYgc2NlbmUudG9rZW5zLmxlbmd0aCkge1xuICAgICAgcmV0dXJucy50b2tlbnMgPSBzY2VuZS50b2tlbnMubWFwKHRva2VuID0+IHtcbiAgICAgICAgY29uc3QgdCA9IHRva2VuLnRvT2JqZWN0KClcbiAgICAgICAgY29uc3QgdXBkYXRlRGF0YSA9IHt9XG4gICAgICAgIFVwZGF0ZXIuX21pZ3JhdGVUb2tlbkFydHdvcmsodCwgdXBkYXRlRGF0YSlcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHVwZGF0ZURhdGEpLmxlbmd0aCkge1xuICAgICAgICAgIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3QodCwgdXBkYXRlRGF0YSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXQuYWN0b3JJZCB8fCB0LmFjdG9yTGluaykge1xuICAgICAgICAgIHQuYWN0b3JEYXRhID0ge31cbiAgICAgICAgfSBlbHNlIGlmICghZ2FtZS5hY3RvcnMuaGFzKHQuYWN0b3JJZCkpIHtcbiAgICAgICAgICB0LmFjdG9ySWQgPSBudWxsXG4gICAgICAgICAgdC5hY3RvckRhdGEgPSB7fVxuICAgICAgICB9IGVsc2UgaWYgKCF0LmFjdG9yTGluaykge1xuICAgICAgICAgIGNvbnN0IGFjdG9yRGF0YSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHQuYWN0b3JEYXRhKVxuICAgICAgICAgIGFjdG9yRGF0YS50eXBlID0gdG9rZW4uYWN0b3I/LnR5cGVcbiAgICAgICAgICBjb25zdCB1cGRhdGUgPSBVcGRhdGVyLm1pZ3JhdGVBY3RvckRhdGEoYWN0b3JEYXRhKVxuICAgICAgICAgIDtbJ2l0ZW1zJywgJ2VmZmVjdHMnXS5mb3JFYWNoKGVtYmVkZGVkTmFtZSA9PiB7XG4gICAgICAgICAgICBpZiAoIXVwZGF0ZVtlbWJlZGRlZE5hbWVdPy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVzID0gbmV3IE1hcCh1cGRhdGVbZW1iZWRkZWROYW1lXS5tYXAodSA9PiBbdS5faWQsIHVdKSlcbiAgICAgICAgICAgIHQuYWN0b3JEYXRhW2VtYmVkZGVkTmFtZV0uZm9yRWFjaChvcmlnaW5hbCA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZSA9IHVwZGF0ZXMuZ2V0KG9yaWdpbmFsLl9pZClcbiAgICAgICAgICAgICAgaWYgKHVwZGF0ZSkgZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChvcmlnaW5hbCwgdXBkYXRlKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGRlbGV0ZSB1cGRhdGVbZW1iZWRkZWROYW1lXVxuICAgICAgICAgIH0pXG4gICAgICAgICAgZm91bmRyeS51dGlscy5tZXJnZU9iamVjdCh0LmFjdG9yRGF0YSwgdXBkYXRlKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0XG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gcmV0dXJuc1xuICB9XG5cbiAgc3RhdGljIF9taWdyYXRlSXRlbUtlZXBlck5vdGVzIChpdGVtLCB1cGRhdGVEYXRhKSB7XG4gICAgaWYgKFxuICAgICAgW1xuICAgICAgICAnYXJjaGV0eXBlJyxcbiAgICAgICAgJ2NoYXNlJyxcbiAgICAgICAgJ2l0ZW0nLFxuICAgICAgICAnb2NjdXBhdGlvbicsXG4gICAgICAgICdzZXR1cCcsXG4gICAgICAgICdza2lsbCcsXG4gICAgICAgICdzcGVsbCcsXG4gICAgICAgICdzdGF0dXMnLFxuICAgICAgICAndGFsZW50JyxcbiAgICAgICAgJ3dlYXBvbidcbiAgICAgIF0uaW5jbHVkZXMoaXRlbS50eXBlKVxuICAgICkge1xuICAgICAgaWYgKHR5cGVvZiBpdGVtLnN5c3RlbS5kZXNjcmlwdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmRlc2NyaXB0aW9uJ10gPSB7XG4gICAgICAgICAgdmFsdWU6IGl0ZW0uc3lzdGVtLmRlc2NyaXB0aW9uLFxuICAgICAgICAgIGtlZXBlcjogJydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgdHlwZW9mIGl0ZW0uc3lzdGVtLmRlc2NyaXB0aW9uID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICBpdGVtLnN5c3RlbS5kZXNjcmlwdGlvbiA9PT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5kZXNjcmlwdGlvbiddID0ge1xuICAgICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgICBrZWVwZXI6ICcnXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0uc3lzdGVtLmRlc2NyaXB0aW9uLmtlZXBlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmRlc2NyaXB0aW9uLmtlZXBlciddID0gJydcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZURhdGFcbiAgfVxuXG4gIHN0YXRpYyBfbWlncmF0ZUl0ZW1FeHBlcmllbmNlIChpdGVtLCB1cGRhdGVEYXRhKSB7XG4gICAgaWYgKGl0ZW0udHlwZSA9PT0gJ3NraWxsJykge1xuICAgICAgaWYgKHR5cGVvZiBpdGVtLnN5c3RlbS5hZGp1c3RtZW50cz8uZXhwZXJpZW5jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmFkanVzdG1lbnRzLmV4cGVyaWVuY2UnXSA9IDBcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZURhdGFcbiAgfVxuXG4gIHN0YXRpYyBfbWlncmF0ZUl0ZW1BcnR3b3JrIChpdGVtLCB1cGRhdGVEYXRhKSB7XG4gICAgbGV0IGltYWdlID0gU3RyaW5nKGl0ZW0uaW1nKS5tYXRjaCgvc3lzdGVtc1xcL0NvQzdcXC9hcnR3b3JrXFwvaWNvbnNcXC8oLispLylcbiAgICBpZiAoaW1hZ2UgIT09IG51bGwpIHtcbiAgICAgIHVwZGF0ZURhdGEuaW1nID0gJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvJyArIGltYWdlWzFdXG4gICAgfVxuICAgIGlmIChpdGVtLnR5cGUgPT09ICdzZXR1cCcpIHtcbiAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGl0ZW0uc3lzdGVtLml0ZW1zKSkge1xuICAgICAgICBpZiAodHlwZW9mIHYgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaW1hZ2UgPSBTdHJpbmcodi5pbWcpLm1hdGNoKC9zeXN0ZW1zXFwvQ29DN1xcL2FydHdvcmtcXC9pY29uc1xcLyguKykvKVxuICAgICAgICAgIGlmIChpbWFnZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB1cGRhdGVEYXRhWydzeXN0ZW0uaXRlbXMnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLml0ZW1zJ10gPSBpdGVtLnN5c3RlbS5pdGVtc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLml0ZW1zJ11ba10uaW1nID1cbiAgICAgICAgICAgICAgJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvJyArIGltYWdlWzFdXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09ICdvY2N1cGF0aW9uJykge1xuICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoaXRlbS5zeXN0ZW0uc2tpbGxzKSkge1xuICAgICAgICBpZiAodHlwZW9mIHYgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaW1hZ2UgPSBTdHJpbmcodi5pbWcpLm1hdGNoKC9zeXN0ZW1zXFwvQ29DN1xcL2FydHdvcmtcXC9pY29uc1xcLyguKykvKVxuICAgICAgICAgIGlmIChpbWFnZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5za2lsbHMnXSA9IGl0ZW0uc3lzdGVtLnNraWxsc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLnNraWxscyddW2tdLmltZyA9XG4gICAgICAgICAgICAgICdzeXN0ZW1zL0NvQzcvYXNzZXRzL2ljb25zLycgKyBpbWFnZVsxXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBbbywgZ10gb2YgT2JqZWN0LmVudHJpZXMoaXRlbS5zeXN0ZW0uZ3JvdXBzKSkge1xuICAgICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhnLnNraWxscykpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHYgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpbWFnZSA9IFN0cmluZyh2LmltZykubWF0Y2goL3N5c3RlbXNcXC9Db0M3XFwvYXJ0d29ya1xcL2ljb25zXFwvKC4rKS8pXG4gICAgICAgICAgICBpZiAoaW1hZ2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB1cGRhdGVEYXRhWydzeXN0ZW0uZ3JvdXBzJ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmdyb3VwcyddID0gaXRlbS5zeXN0ZW0uZ3JvdXBzXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmdyb3VwcyddW29dLnNraWxsc1trXS5pbWcgPVxuICAgICAgICAgICAgICAgICdzeXN0ZW1zL0NvQzcvYXNzZXRzL2ljb25zLycgKyBpbWFnZVsxXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXRlbS50eXBlID09PSAnYm9vaycpIHtcbiAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGl0ZW0uc3lzdGVtLnNwZWxscykpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIGltYWdlID0gU3RyaW5nKHYuaW1nKS5tYXRjaCgvc3lzdGVtc1xcL0NvQzdcXC9hcnR3b3JrXFwvaWNvbnNcXC8oLispLylcbiAgICAgICAgICBpZiAoaW1hZ2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdXBkYXRlRGF0YVsnc3lzdGVtLnNwZWxscyddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc3BlbGxzJ10gPSBpdGVtLnN5c3RlbS5zcGVsbHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5zcGVsbHMnXVtrXS5pbWcgPVxuICAgICAgICAgICAgICAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy8nICsgaW1hZ2VbMV1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ2FyY2hldHlwZScpIHtcbiAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGl0ZW0uc3lzdGVtLnNraWxscykpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIGltYWdlID0gU3RyaW5nKHYuaW1nKS5tYXRjaCgvc3lzdGVtc1xcL0NvQzdcXC9hcnR3b3JrXFwvaWNvbnNcXC8oLispLylcbiAgICAgICAgICBpZiAoaW1hZ2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdXBkYXRlRGF0YVsnc3lzdGVtLnNraWxscyddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ10gPSBpdGVtLnN5c3RlbS5za2lsbHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5za2lsbHMnXVtrXS5pbWcgPVxuICAgICAgICAgICAgICAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy8nICsgaW1hZ2VbMV1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZURhdGFcbiAgfVxuXG4gIHN0YXRpYyBfbWlncmF0ZUl0ZW1TcGVsbEF1dG9tYXRlZCAoaXRlbSwgdXBkYXRlRGF0YSkge1xuICAgIGlmIChpdGVtLnR5cGUgPT09ICdzcGVsbCcgJiYgdHlwZW9mIGl0ZW0uc3lzdGVtLmNvc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uY2FzdGluZ1RpbWUnXSA9IGl0ZW0uc3lzdGVtLmNhc3RpbmdUaW1lIHx8ICcnXG4gICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uY29zdHMuaGl0UG9pbnRzJ10gPSBpdGVtLnN5c3RlbS5jb3N0LmhwIHx8IDBcbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5jb3N0cy5tYWdpY1BvaW50cyddID0gaXRlbS5zeXN0ZW0uY29zdC5tcCB8fCAwXG4gICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uY29zdHMuc2FuaXR5J10gPSBpdGVtLnN5c3RlbS5jb3N0LnNhbiB8fCAwXG4gICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uY29zdHMucG93ZXInXSA9IGl0ZW0uc3lzdGVtLmNvc3QucG93IHx8IDBcbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5jb3N0cy5vdGhlcnMnXSA9ICcnXG5cbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS4tPWNvc3QnXSA9IG51bGxcbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5kZXNjcmlwdGlvbi4tPXVuaWRlbnRpZmllZCddID0gbnVsbFxuICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmRlc2NyaXB0aW9uLi09bm90ZXMnXSA9IG51bGxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQm9vayBhdXRvbWF0aW9uIHdhcyBpbmNyZWFzZWQgaW4gMC42LjVcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGl0ZW0gRG9jdW1lbnQgZGF0YSBleHByZXNzZWQgYXMgYSBwbGFpbiBvYmplY3RcbiAgICogQHBhcmFtIHtqc29ufSB1cGRhdGVEYXRhIERpZmZlcmVudGlhbCB1cGRhdGUgZGF0YSB3aGljaCBtb2RpZmllcyB0aGUgZXhpc3RpbmcgdmFsdWVzIG9mIHRoaXMgZG9jdW1lbnQgZGF0YVxuICAgKiBAcmV0dXJucyB7anNvbn0gRGlmZmVyZW50aWFsIHVwZGF0ZSBkYXRhIHdoaWNoIG1vZGlmaWVzIHRoZSBleGlzdGluZyB2YWx1ZXMgb2YgdGhpcyBkb2N1bWVudCBkYXRhXG4gICAqL1xuICBzdGF0aWMgX21pZ3JhdGVJdGVtQm9va0F1dG9tYXRlZCAoaXRlbSwgdXBkYXRlRGF0YSkge1xuICAgIGlmIChpdGVtLnR5cGUgPT09ICdib29rJykge1xuICAgICAgLyoqIElmIGJvb2sgc3RpbGwgaGFzIHRoZSBzeXN0ZW0uZGVzY3JpcHRpb24udW5pZGVudGlmaWVkIGtleSB0aGVuIHJ1biBtaWdyYXRlIG9uIGl0ICovXG4gICAgICBpZiAodHlwZW9mIGl0ZW0uc3lzdGVtLmRlc2NyaXB0aW9uLnVuaWRlbnRpZmllZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLyoqIEZpZWxkcyBjaGFuZ2VkIGZyb20gbnVsbCBkZWZhdWx0IHRvIGVtcHR5IHN0cmluZyAqL1xuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uYXV0aG9yJ10gPSBpdGVtLnN5c3RlbS5hdXRob3IgfHwgJydcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmRhdGUnXSA9IGl0ZW0uc3lzdGVtLmRhdGUgfHwgJydcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmxhbmd1YWdlJ10gPSBpdGVtLnN5c3RlbS5sYW5ndWFnZSB8fCAnJ1xuICAgICAgICAvKiogRmllbGRzIGNoYW5nZWQgZnJvbSBudWxsL3N0cmluZyBkZWZhdWx0cyB0byBpbnRlZ2VyIHRvIDAgKi9cbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLnNhbml0eUxvc3MnXSA9IGl0ZW0uc3lzdGVtLnNhbkxvc3MgfHwgMFxuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0ubXl0aG9zUmF0aW5nJ10gPSBOdW1iZXIoaXRlbS5zeXN0ZW0ubXl0aG9zUmF0aW5nKSB8fCAwXG4gICAgICAgIC8qKiBSZW5hbWVkL21vdmVkIGZpZWxkcyAqL1xuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uY29udGVudCddID0gaXRlbS5zeXN0ZW0uZGVzY3JpcHRpb24udW5pZGVudGlmaWVkXG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5kZXNjcmlwdGlvbi5rZWVwZXInXSA9IGl0ZW0uc3lzdGVtLmRlc2NyaXB0aW9uLm5vdGVzXG4gICAgICAgIC8qKiBOZXcgZmllbGRzIHNldCBkZWZhdWx0IHZhbHVlcyAqL1xuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uZGlmZmljdWx0eUxldmVsJ10gPSAncmVndWxhcidcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmZ1bGxTdHVkaWVzJ10gPSAwXG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5pbml0aWFsUmVhZGluZyddID0gZmFsc2VcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmtlZXBlck5vdGVzJ10gPSAnJ1xuICAgICAgICAvKiogTW92ZSBhbmQgcmVuYW1lIGdhaW4gZmllbGRzIHRvIGdhaW5zLCBkZWZhdWx0IE5hTiB2YWx1ZXMgdG8gMCAqL1xuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uZ2FpbnMuY3RodWxodU15dGhvcy5pbml0aWFsJ10gPVxuICAgICAgICAgIE51bWJlcihpdGVtLnN5c3RlbS5nYWluLmN0aHVsaHVNeXRob3MuQ01JKSB8fCAwXG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5nYWlucy5jdGh1bGh1TXl0aG9zLmZpbmFsJ10gPVxuICAgICAgICAgIE51bWJlcihpdGVtLnN5c3RlbS5nYWluLmN0aHVsaHVNeXRob3MuQ01GKSB8fCAwXG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5nYWlucy5vY2N1bHQnXSA9IE51bWJlcihpdGVtLnN5c3RlbS5nYWluLm9jY3VsdCkgfHwgMFxuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uZ2FpbnMub3RoZXJzJ10gPSBbXVxuICAgICAgICAvKiogTmV3IHN0dWR5IGZpZWxkIGRlZmF1bHQgbmVjZXNzYXJ5IHRvIGludGVnZXIgb2Ygd2Vla3NTdHVkeVRpbWUgb3IgMCBpZiBub3Qgc2V0ICovXG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5zdHVkeSddID0ge1xuICAgICAgICAgIG5lY2Vzc2FyeTogTnVtYmVyKGl0ZW0uc3lzdGVtLndlZWtzU3R1ZHlUaW1lKSB8fCAwLFxuICAgICAgICAgIHByb2dyZXNzOiAwLFxuICAgICAgICAgIHVuaXRzOiAnQ29DNy53ZWVrcydcbiAgICAgICAgfVxuICAgICAgICAvKiogUmVtb3ZlIG9sZCBrZXlzICovXG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS4tPXNhbkxvc3MnXSA9IG51bGxcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLi09d2Vla3NTdHVkeVRpbWUnXSA9IG51bGxcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLi09Z2FpbiddID0gbnVsbFxuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uZGVzY3JpcHRpb24uLT11bmlkZW50aWZpZWQnXSA9IG51bGxcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmRlc2NyaXB0aW9uLi09bm90ZXMnXSA9IG51bGxcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmdhaW5zLi09b3RoZXInXSA9IG51bGxcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLi09cHJvcGVydGllcyddID0gbnVsbFxuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uLT1mbGFncyddID0gbnVsbFxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdXBkYXRlRGF0YVxuICB9XG5cbiAgc3RhdGljIF9taWdyYXRlSXRlbUJvb2tVbml0cyAoaXRlbSwgdXBkYXRlRGF0YSkge1xuICAgIGlmIChpdGVtLnR5cGUgPT09ICdib29rJykge1xuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgaXRlbS5zeXN0ZW0uc3R1ZHkubmVjZXNzYXJ5ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB0eXBlb2YgaXRlbS5zeXN0ZW0uc3R1ZHkudW5pdHMgPT09ICd1bmRlZmluZWQnXG4gICAgICApIHtcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLnN0dWR5LnVuaXRzJ10gPSAnQ29DNy53ZWVrcydcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgX21pZ3JhdGVJdGVtS2VlcGVyTm90ZXNNZXJnZSAoaXRlbSwgdXBkYXRlRGF0YSkge1xuICAgIGlmIChpdGVtLnR5cGUgPT09ICdzcGVsbCcgfHwgaXRlbS50eXBlID09PSAnYm9vaycpIHtcbiAgICAgIGlmICh0eXBlb2YgaXRlbS5zeXN0ZW0ubm90ZXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbS5zeXN0ZW0uZGVzY3JpcHRpb24ua2VlcGVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5kZXNjcmlwdGlvbi5rZWVwZXInXSA9XG4gICAgICAgICAgICBpdGVtLnN5c3RlbS5kZXNjcmlwdGlvbi5rZWVwZXIgKyBpdGVtLnN5c3RlbS5ub3Rlc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5kZXNjcmlwdGlvbi5rZWVwZXInXSA9IGl0ZW0uc3lzdGVtLm5vdGVzXG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLi09bm90ZXMnXSA9IG51bGxcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgaXRlbS5zeXN0ZW0ua2VlcGVyTm90ZXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdXBkYXRlRGF0YVsnc3lzdGVtLmRlc2NyaXB0aW9uLmtlZXBlciddICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5kZXNjcmlwdGlvbi5rZWVwZXInXSA9XG4gICAgICAgICAgICBpdGVtLnN5c3RlbS5rZWVwZXJOb3RlcyArIHVwZGF0ZURhdGFbJ3N5c3RlbS5kZXNjcmlwdGlvbi5rZWVwZXInXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5kZXNjcmlwdGlvbi5rZWVwZXInXSA9IGl0ZW0uc3lzdGVtLmtlZXBlck5vdGVzXG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLi09a2VlcGVyTm90ZXMnXSA9IG51bGxcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgX21pZ3JhdGVJdGVtRW1iZWRkZWR2MTAgKGl0ZW0sIHVwZGF0ZURhdGEpIHtcbiAgICBpZiAoaXRlbS50eXBlID09PSAnb2NjdXBhdGlvbicpIHtcbiAgICAgIGxldCBjaGFuZ2VkID0gZmFsc2VcbiAgICAgIGZvciAoY29uc3QgW28sIGddIG9mIE9iamVjdC5lbnRyaWVzKGl0ZW0uc3lzdGVtLmdyb3VwcykpIHtcbiAgICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoZy5za2lsbHMpKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2LnN5c3RlbSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgaXRlbS5zeXN0ZW0uZ3JvdXBzW29dLnNraWxsc1trXS5zeXN0ZW0gPSB2LmRhdGFcbiAgICAgICAgICAgICAgY2hhbmdlZCA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5ncm91cHMnXSA9IGl0ZW0uc3lzdGVtLmdyb3Vwc1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoWydzZXR1cCddLmluY2x1ZGVzKGl0ZW0udHlwZSkpIHtcbiAgICAgIGxldCBjaGFuZ2VkID0gZmFsc2VcbiAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGl0ZW0uc3lzdGVtLml0ZW1zKSkge1xuICAgICAgICBpZiAodHlwZW9mIHYgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2LnN5c3RlbSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGl0ZW0uc3lzdGVtLml0ZW1zW2tdLnN5c3RlbSA9IHYuZGF0YVxuICAgICAgICAgICAgY2hhbmdlZCA9IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5pdGVtcyddID0gaXRlbS5zeXN0ZW0uaXRlbXNcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKFsnYXJjaGV0eXBlJywgJ29jY3VwYXRpb24nXS5pbmNsdWRlcyhpdGVtLnR5cGUpKSB7XG4gICAgICBsZXQgY2hhbmdlZCA9IGZhbHNlXG4gICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhpdGVtLnN5c3RlbS5za2lsbHMpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHYuc3lzdGVtID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaXRlbS5zeXN0ZW0uc2tpbGxzW2tdLnN5c3RlbSA9IHYuZGF0YVxuICAgICAgICAgICAgY2hhbmdlZCA9IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5za2lsbHMnXSA9IGl0ZW0uc3lzdGVtLnNraWxsc1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoWydib29rJ10uaW5jbHVkZXMoaXRlbS50eXBlKSkge1xuICAgICAgbGV0IGNoYW5nZWQgPSBmYWxzZVxuICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoaXRlbS5zeXN0ZW0uc3BlbGxzKSkge1xuICAgICAgICBpZiAodHlwZW9mIHYgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2LnN5c3RlbSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGl0ZW0uc3lzdGVtLnNwZWxsc1trXS5zeXN0ZW0gPSB2LmRhdGFcbiAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc3BlbGxzJ10gPSBpdGVtLnN5c3RlbS5zcGVsbHNcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgX21pZ3JhdGVJdGVtdjEwIChpdGVtLCB1cGRhdGVEYXRhKSB7XG4gICAgaWYgKFxuICAgICAgaXRlbS50eXBlID09PSAnc2tpbGwnICYmXG4gICAgICAodHlwZW9mIGl0ZW0uc3lzdGVtLnNraWxsTmFtZSA9PT0gJ3VuZGVmaW5lZCcgfHwgaXRlbS5zeXN0ZW0uc2tpbGxOYW1lID09PSAnJylcbiAgICApIHtcbiAgICAgIHVwZGF0ZURhdGEubmFtZSA9IGl0ZW0ubmFtZVxuICAgICAgLy8gVXBkYXRlIFBvbGlzaCBkb2RnZSB0cmFuc2xhdGlvbiBmcm9tIFVuaWtpIHRvIFVuaWsgdG8gbWF0Y2ggdXBkYXRlIHRvIGxhbmcvcGwuanNvblxuICAgICAgaWYgKHVwZGF0ZURhdGEubmFtZSA9PT0gJ1VuaWtpJykge1xuICAgICAgICB1cGRhdGVEYXRhLm5hbWUgPSAnVW5paydcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBhcnRzID0gQ29DN0l0ZW0uZ2V0TmFtZVBhcnRzU3BlYyhcbiAgICAgICAgdXBkYXRlRGF0YS5uYW1lLFxuICAgICAgICB0eXBlb2YgaXRlbS5zeXN0ZW0uc3BlY2lhbGl6YXRpb24/Lmdyb3VwID09PSAnc3RyaW5nJ1xuICAgICAgICAgID8gaXRlbS5zeXN0ZW0uc3BlY2lhbGl6YXRpb24uZ3JvdXBcbiAgICAgICAgICA6IGl0ZW0uc3lzdGVtLnNwZWNpYWxpemF0aW9uXG4gICAgICApXG4gICAgICB1cGRhdGVEYXRhLm5hbWUgPSBwYXJ0cy5uYW1lXG4gICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxOYW1lJ10gPSBwYXJ0cy5za2lsbE5hbWVcbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5zcGVjaWFsaXphdGlvbiddID0gcGFydHMuc3BlY2lhbGl6YXRpb25cbiAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ3NldHVwJykge1xuICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoaXRlbS5zeXN0ZW0uaXRlbXMpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB2LnR5cGUgPT09ICdza2lsbCcgJiZcbiAgICAgICAgICAgICh0eXBlb2Ygdi5zeXN0ZW0uc2tpbGxOYW1lID09PSAndW5kZWZpbmVkJyB8fCB2LnN5c3RlbS5za2lsbE5hbWUgPT09ICcnKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB1cGRhdGVEYXRhWydzeXN0ZW0uaXRlbXMnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLml0ZW1zJ10gPSBpdGVtLnN5c3RlbS5pdGVtc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLml0ZW1zJ11ba10ubmFtZSA9IHYubmFtZVxuICAgICAgICAgICAgaWYgKHVwZGF0ZURhdGFbJ3N5c3RlbS5pdGVtcyddW2tdLm5hbWUgPT09ICdVbmlraScpIHtcbiAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLml0ZW1zJ11ba10ubmFtZSA9ICdVbmlrJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGFydHMgPSBDb0M3SXRlbS5nZXROYW1lUGFydHNTcGVjKFxuICAgICAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uaXRlbXMnXVtrXS5uYW1lLFxuICAgICAgICAgICAgICB0eXBlb2Ygdi5zeXN0ZW0uc3BlY2lhbGl6YXRpb24/Lmdyb3VwID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgID8gdi5zeXN0ZW0uc3BlY2lhbGl6YXRpb24uZ3JvdXBcbiAgICAgICAgICAgICAgICA6IHYuc3lzdGVtLnNwZWNpYWxpemF0aW9uXG4gICAgICAgICAgICApXG4gICAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uaXRlbXMnXVtrXS5uYW1lID0gcGFydHMubmFtZVxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLml0ZW1zJ11ba10uc3lzdGVtLnNraWxsTmFtZSA9IHBhcnRzLnNraWxsTmFtZVxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLml0ZW1zJ11ba10uc3lzdGVtLnNwZWNpYWxpemF0aW9uID0gcGFydHMuc3BlY2lhbGl6YXRpb25cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ29jY3VwYXRpb24nKSB7XG4gICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhpdGVtLnN5c3RlbS5za2lsbHMpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB2LnR5cGUgPT09ICdza2lsbCcgJiZcbiAgICAgICAgICAgICh0eXBlb2Ygdi5zeXN0ZW0uc2tpbGxOYW1lID09PSAndW5kZWZpbmVkJyB8fCB2LnN5c3RlbS5za2lsbE5hbWUgPT09ICcnKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5za2lsbHMnXSA9IGl0ZW0uc3lzdGVtLnNraWxsc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLnNraWxscyddW2tdLm5hbWUgPSB2Lm5hbWVcbiAgICAgICAgICAgIGlmICh1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ11ba10ubmFtZSA9PT0gJ1VuaWtpJykge1xuICAgICAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ11ba10ubmFtZSA9ICdVbmlrJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGFydHMgPSBDb0M3SXRlbS5nZXROYW1lUGFydHNTcGVjKFxuICAgICAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ11ba10ubmFtZSxcbiAgICAgICAgICAgICAgdHlwZW9mIHYuc3lzdGVtLnNwZWNpYWxpemF0aW9uPy5ncm91cCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICA/IHYuc3lzdGVtLnNwZWNpYWxpemF0aW9uLmdyb3VwXG4gICAgICAgICAgICAgICAgOiB2LnN5c3RlbS5zcGVjaWFsaXphdGlvblxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLnNraWxscyddW2tdLm5hbWUgPSBwYXJ0cy5uYW1lXG4gICAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ11ba10uc3lzdGVtLnNraWxsTmFtZSA9IHBhcnRzLnNraWxsTmFtZVxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLnNraWxscyddW2tdLnN5c3RlbS5zcGVjaWFsaXphdGlvbiA9XG4gICAgICAgICAgICAgIHBhcnRzLnNwZWNpYWxpemF0aW9uXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IFtvLCBnXSBvZiBPYmplY3QuZW50cmllcyhpdGVtLnN5c3RlbS5ncm91cHMpKSB7XG4gICAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGcuc2tpbGxzKSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgdiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgdi50eXBlID09PSAnc2tpbGwnICYmXG4gICAgICAgICAgICAgICh0eXBlb2Ygdi5zeXN0ZW0uc2tpbGxOYW1lID09PSAndW5kZWZpbmVkJyB8fCB2LnN5c3RlbS5za2lsbE5hbWUgPT09ICcnKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgdXBkYXRlRGF0YVsnc3lzdGVtLmdyb3VwcyddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5ncm91cHMnXSA9IGl0ZW0uc3lzdGVtLmdyb3Vwc1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5ncm91cHMnXVtvXS5za2lsbHNba10ubmFtZSA9IHYubmFtZVxuICAgICAgICAgICAgICBpZiAodXBkYXRlRGF0YVsnc3lzdGVtLmdyb3VwcyddW29dLnNraWxsc1trXS5uYW1lID09PSAnVW5pa2knKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmdyb3VwcyddW29dLnNraWxsc1trXS5uYW1lID0gJ1VuaWsnXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29uc3QgcGFydHMgPSBDb0M3SXRlbS5nZXROYW1lUGFydHNTcGVjKFxuICAgICAgICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5ncm91cHMnXVtvXS5za2lsbHNba10ubmFtZSxcbiAgICAgICAgICAgICAgICB0eXBlb2Ygdi5zeXN0ZW0uc3BlY2lhbGl6YXRpb24/Lmdyb3VwID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICAgPyB2LnN5c3RlbS5zcGVjaWFsaXphdGlvbi5ncm91cFxuICAgICAgICAgICAgICAgICAgOiB2LnN5c3RlbS5zcGVjaWFsaXphdGlvblxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5ncm91cHMnXVtvXS5za2lsbHNba10ubmFtZSA9IHBhcnRzLm5hbWVcbiAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmdyb3VwcyddW29dLnNraWxsc1trXS5zeXN0ZW0uc2tpbGxOYW1lID1cbiAgICAgICAgICAgICAgICBwYXJ0cy5za2lsbE5hbWVcbiAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmdyb3VwcyddW29dLnNraWxsc1trXS5zeXN0ZW0uc3BlY2lhbGl6YXRpb24gPVxuICAgICAgICAgICAgICAgIHBhcnRzLnNwZWNpYWxpemF0aW9uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09ICdhcmNoZXR5cGUnKSB7XG4gICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhpdGVtLnN5c3RlbS5za2lsbHMpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB2LnR5cGUgPT09ICdza2lsbCcgJiZcbiAgICAgICAgICAgICh0eXBlb2Ygdi5zeXN0ZW0uc2tpbGxOYW1lID09PSAndW5kZWZpbmVkJyB8fCB2LnN5c3RlbS5za2lsbE5hbWUgPT09ICcnKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5za2lsbHMnXSA9IGl0ZW0uc3lzdGVtLnNraWxsc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLnNraWxscyddW2tdLm5hbWUgPSB2Lm5hbWVcbiAgICAgICAgICAgIGlmICh1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ11ba10ubmFtZSA9PT0gJ1VuaWtpJykge1xuICAgICAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ11ba10ubmFtZSA9ICdVbmlrJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGFydHMgPSBDb0M3SXRlbS5nZXROYW1lUGFydHNTcGVjKFxuICAgICAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ11ba10ubmFtZSxcbiAgICAgICAgICAgICAgdHlwZW9mIHYuc3lzdGVtLnNwZWNpYWxpemF0aW9uPy5ncm91cCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICA/IHYuc3lzdGVtLnNwZWNpYWxpemF0aW9uLmdyb3VwXG4gICAgICAgICAgICAgICAgOiB2LnN5c3RlbS5zcGVjaWFsaXphdGlvblxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLnNraWxscyddW2tdLm5hbWUgPSBwYXJ0cy5uYW1lXG4gICAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc2tpbGxzJ11ba10uc3lzdGVtLnNraWxsTmFtZSA9IHBhcnRzLnNraWxsTmFtZVxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLnNraWxscyddW2tdLnN5c3RlbS5zcGVjaWFsaXphdGlvbiA9XG4gICAgICAgICAgICAgIHBhcnRzLnNwZWNpYWxpemF0aW9uXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIF9taWdyYXRlSXRlbUVyYXMgKGl0ZW0sIHVwZGF0ZURhdGEpIHtcbiAgICBpZiAodHlwZW9mIGl0ZW0uc3lzdGVtLmVyYXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyAxOTIwID0+IHN0YW5kYXJkXG4gICAgICAvLyBtZHJuID0+IG1vZGVybiAvIG1vZGVyblB1bHBcbiAgICAgIC8vIHB1bHAgPT4gcHVscFxuICAgICAgLy8gZGR0cyA9PiBkb3duRGFya2VyVHJhaWxzIC8gZG93bkRhcmtlclRyYWlsc1B1bHBcbiAgICAgIC8vIGRya2EgPT4gZGFya0FnZXMgLyBkYXJrQWdlc1B1bHBcbiAgICAgIC8vIGdsaXQgPT4gZ2FzTGlnaHRcbiAgICAgIC8vIG52Y3QgPT4gaW52aWN0dXNcbiAgICAgIGxldCBlcmFzID0ge31cbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGl0ZW0uc3lzdGVtLmVyYXMpKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSB8fCAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUuc2VsZWN0ZWQgIT09ICd1bmRlZmluZWQnKSkge1xuICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICcxOTIwJzpcbiAgICAgICAgICAgICAgZXJhcy5zdGFuZGFyZCA9IHRydWVcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgJ21kcm4nOlxuICAgICAgICAgICAgICBlcmFzLm1vZGVybiA9IHRydWVcbiAgICAgICAgICAgICAgZXJhcy5tb2Rlcm5QdWxwID0gdHJ1ZVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSAncHVscCc6XG4gICAgICAgICAgICAgIGVyYXMucHVscCA9IHRydWVcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgJ2RkdHMnOlxuICAgICAgICAgICAgICBlcmFzLmRvd25EYXJrZXJUcmFpbHMgPSB0cnVlXG4gICAgICAgICAgICAgIGVyYXMuZG93bkRhcmtlclRyYWlsc1B1bHAgPSB0cnVlXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlICdkcmthJzpcbiAgICAgICAgICAgICAgZXJhcy5kYXJrQWdlcyA9IHRydWVcbiAgICAgICAgICAgICAgZXJhcy5kYXJrQWdlc1B1bHAgPSB0cnVlXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlICdnbGl0JzpcbiAgICAgICAgICAgICAgZXJhcy5nYXNMaWdodCA9IHRydWVcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgJ252Y3QnOlxuICAgICAgICAgICAgICBlcmFzLmludmljdHVzID0gdHJ1ZVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ3NldHVwJykge1xuICAgICAgICAvLyBJZiBtb3JlIHRoYW4gb25lIGVyYSB0YWtlIHRoZSBmaXJzdCBvbmUgb25seVxuICAgICAgICBjb25zdCBrZXkgPSBPYmplY3Qua2V5cyhlcmFzKVswXVxuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgZXJhcyA9IHsgW2tleV06IHRydWUgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIG5vIGVyYXMgZGVmYXVsdCB0byBzdGFuZGFyZFxuICAgICAgICAgIGVyYXMgPSB7IHN0YW5kYXJkOiB0cnVlIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgQ29DNyA9IHtcbiAgICAgICAgY29jaWRGbGFnOiB7XG4gICAgICAgICAgaWQ6ICcnLFxuICAgICAgICAgIGxhbmc6IGdhbWUuaTE4bi5sYW5nLFxuICAgICAgICAgIHByaW9yaXR5OiAwLFxuICAgICAgICAgIGVyYXNcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBpdGVtLmZsYWdzPy5Db0M3ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpdGVtLmZsYWdzLkNvQzcgPSBDb0M3XG4gICAgICAgIHVwZGF0ZURhdGFbJ2ZsYWdzLkNvQzcnXSA9IENvQzdcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0uZmxhZ3M/LkNvQzc/LmNvY2lkRmxhZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaXRlbS5mbGFncy5Db0M3LmNvY2lkRmxhZyA9IENvQzcuY29jaWRGbGFnXG4gICAgICAgIHVwZGF0ZURhdGFbJ2ZsYWdzLkNvQzcuY29jaWRGbGFnJ10gPSBDb0M3LmNvY2lkRmxhZ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlbS5mbGFncy5Db0M3LmNvY2lkRmxhZy5lcmFzID0gQ29DNy5jb2NpZEZsYWcuZXJhc1xuICAgICAgICB1cGRhdGVEYXRhWydmbGFncy5Db0M3LmNvY2lkRmxhZy5lcmFzJ10gPSBDb0M3LmNvY2lkRmxhZy5lcmFzXG4gICAgICB9XG4gICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uLT1lcmFzJ10gPSBudWxsXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIF9taWdyYXRlQWN0b3JBcnR3b3JrIChhY3RvciwgdXBkYXRlRGF0YSkge1xuICAgIGxldCBpbWFnZSA9IFN0cmluZyhhY3Rvci5pbWcpLm1hdGNoKC9zeXN0ZW1zXFwvQ29DN1xcL2FydHdvcmtcXC9pY29uc1xcLyguKykvKVxuICAgIGlmIChpbWFnZSAhPT0gbnVsbCkge1xuICAgICAgdXBkYXRlRGF0YS5pbWcgPSAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy8nICsgaW1hZ2VbMV1cbiAgICB9XG4gICAgaWYgKFxuICAgICAgdHlwZW9mIGFjdG9yLnByb3RvdHlwZVRva2VuICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgdHlwZW9mIGFjdG9yLnByb3RvdHlwZVRva2VuLnRleHR1cmU/LnNyYyAhPT0gJ3VuZGVmaW5lZCdcbiAgICApIHtcbiAgICAgIGltYWdlID0gU3RyaW5nKGFjdG9yLnByb3RvdHlwZVRva2VuLnRleHR1cmUuc3JjKS5tYXRjaChcbiAgICAgICAgL3N5c3RlbXNcXC9Db0M3XFwvYXJ0d29ya1xcL2ljb25zXFwvKC4rKS9cbiAgICAgIClcbiAgICAgIGlmIChpbWFnZSAhPT0gbnVsbCkge1xuICAgICAgICB1cGRhdGVEYXRhWydwcm90b3R5cGVUb2tlbi50ZXh0dXJlLnNyYyddID0gJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvJyArIGltYWdlWzFdXG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYWN0b3IuZWZmZWN0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGFjdG9yLmVmZmVjdHMpKSB7XG4gICAgICAgIGltYWdlID0gU3RyaW5nKHYuaWNvbikubWF0Y2goL3N5c3RlbXNcXC9Db0M3XFwvYXJ0d29ya1xcL2ljb25zXFwvKC4rKS8pXG4gICAgICAgIGlmIChpbWFnZSAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgdXBkYXRlRGF0YS5lZmZlY3RzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdXBkYXRlRGF0YS5lZmZlY3RzID0gYWN0b3IuZWZmZWN0c1xuICAgICAgICAgIH1cbiAgICAgICAgICB1cGRhdGVEYXRhLmVmZmVjdHNba10uaWNvbiA9ICdzeXN0ZW1zL0NvQzcvYXNzZXRzL2ljb25zLycgKyBpbWFnZVsxXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIF9taWdyYXRlQWN0b3JLZWVwZXJOb3RlcyAoYWN0b3IsIHVwZGF0ZURhdGEpIHtcbiAgICBpZiAoWydjaGFyYWN0ZXInLCAnbnBjJywgJ2NyZWF0dXJlJ10uaW5jbHVkZXMoYWN0b3IudHlwZSkpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIGFjdG9yLnN5c3RlbSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgdHlwZW9mIGFjdG9yLnN5c3RlbS5kZXNjcmlwdGlvbiA9PT0gJ3VuZGVmaW5lZCdcbiAgICAgICkge1xuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uZGVzY3JpcHRpb24nXSA9IHtcbiAgICAgICAgICBrZWVwZXI6ICcnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgX21pZ3JhdGVBY3Rvck1vbmV0YXJ5IChhY3RvciwgdXBkYXRlRGF0YSkge1xuICAgIGlmIChhY3Rvci50eXBlID09PSAnY2hhcmFjdGVyJyAmJiB0eXBlb2YgYWN0b3Iuc3lzdGVtLmNyZWRpdD8ubXVsdGlwbGllciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5tb25ldGFyeS5zeW1ib2wnXSA9IGFjdG9yLnN5c3RlbS5jcmVkaXQ/Lm1vbmV0YXJ5U3ltYm9sID8gYWN0b3Iuc3lzdGVtLmNyZWRpdC5tb25ldGFyeVN5bWJvbCA6ICckJ1xuICAgICAgaWYgKHVwZGF0ZURhdGFbJ3N5c3RlbS5tb25ldGFyeS5zeW1ib2wnXS50b1N0cmluZygpLnRyaW0oKSA9PT0gJycpIHtcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLm1vbmV0YXJ5LnN5bWJvbCddID0gJyQnXG4gICAgICB9XG4gICAgICBjb25zdCBtdWx0aXBsaWVyID0gcGFyc2VJbnQoYWN0b3Iuc3lzdGVtLmNyZWRpdC5tdWx0aXBsaWVyKSA/IHBhcnNlSW50KGFjdG9yLnN5c3RlbS5jcmVkaXQubXVsdGlwbGllcikgOiAxXG4gICAgICB1cGRhdGVEYXRhWydzeXN0ZW0ubW9uZXRhcnkuc3BlbnQnXSA9IGFjdG9yLnN5c3RlbS5jcmVkaXQuc3BlbnRcbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5tb25ldGFyeS5hc3NldHNEZXRhaWxzJ10gPSBhY3Rvci5zeXN0ZW0uY3JlZGl0LmFzc2V0c0RldGFpbHNcbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5tb25ldGFyeS5zcGVuZGluZ0xldmVsJ10gPSBhY3Rvci5zeXN0ZW0uY3JlZGl0LnNwZW5kaW5nTGV2ZWxcbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5tb25ldGFyeS5jYXNoJ10gPSBhY3Rvci5zeXN0ZW0uY3JlZGl0LmNhc2hcbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5tb25ldGFyeS5hc3NldHMnXSA9IGFjdG9yLnN5c3RlbS5jcmVkaXQuYXNzZXRzXG4gICAgICB1cGRhdGVEYXRhWydzeXN0ZW0ubW9uZXRhcnkudmFsdWVzJ10gPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShhY3Rvci5zeXN0ZW0ubW9uZXRhcnkudmFsdWVzKVxuICAgICAgaWYgKG11bHRpcGxpZXIgIT09IDEpIHtcbiAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiB1cGRhdGVEYXRhWydzeXN0ZW0ubW9uZXRhcnkudmFsdWVzJ10pIHtcbiAgICAgICAgICB2YWx1ZS5jYXNoVmFsdWUgPSBtdWx0aXBsaWVyICogdmFsdWUuY2FzaFZhbHVlXG4gICAgICAgICAgdmFsdWUuYXNzZXRzVmFsdWUgPSBtdWx0aXBsaWVyICogdmFsdWUuYXNzZXRzVmFsdWVcbiAgICAgICAgICB2YWx1ZS5zcGVuZGluZ1ZhbHVlID0gbXVsdGlwbGllciAqIHZhbHVlLnNwZW5kaW5nVmFsdWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLi09Y3JlZGl0J10gPSBudWxsXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIF9taWdyYXRlQWN0b3JTYW5Mb3NzUmVhc29ucyAoYWN0b3IsIHVwZGF0ZURhdGEpIHtcbiAgICBpZiAoXG4gICAgICBhY3Rvci50eXBlID09PSAnY2hhcmFjdGVyJyAmJlxuICAgICAgdHlwZW9mIGFjdG9yLnN5c3RlbT8uZW5jb3VudGVyZWRDcmVhdHVyZXMgIT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICBjb25zdCBncm91cHMgPSB7fVxuICAgICAgZm9yIChjb25zdCBzYW5pdHlMb3NzRXZlbnQgb2YgYWN0b3Iuc3lzdGVtLmVuY291bnRlcmVkQ3JlYXR1cmVzKSB7XG4gICAgICAgIGlmIChzYW5pdHlMb3NzRXZlbnQudG90YWxMb3NzID4gMCkge1xuICAgICAgICAgIGdyb3Vwc1tzYW5pdHlMb3NzRXZlbnQubmFtZV0gPSBNYXRoLm1heChcbiAgICAgICAgICAgIGdyb3Vwc1tzYW5pdHlMb3NzRXZlbnQubmFtZV0gPz8gMCxcbiAgICAgICAgICAgIHNhbml0eUxvc3NFdmVudC50b3RhbExvc3NcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHNhbml0eUxvc3NFdmVudHMgPSBbXVxuICAgICAgZm9yIChjb25zdCBuYW1lIGluIGdyb3Vwcykge1xuICAgICAgICBzYW5pdHlMb3NzRXZlbnRzLnB1c2goe1xuICAgICAgICAgIHR5cGU6IG5hbWUsXG4gICAgICAgICAgdG90YWxMb3NzOiBncm91cHNbbmFtZV0sXG4gICAgICAgICAgaW1tdW5pdHk6IGZhbHNlXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uc2FuaXR5TG9zc0V2ZW50cyddID0gc2FuaXR5TG9zc0V2ZW50c1xuICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLi09ZW5jb3VudGVyZWRDcmVhdHVyZXMnXSA9IG51bGxcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgX21pZ3JhdGVBY3RvclN0YXR1c0VmZmVjdEFjdGl2ZSAoYWN0b3IsIHVwZGF0ZURhdGEpIHtcbiAgICBpZiAoWydjaGFyYWN0ZXInLCAnbnBjJywgJ2NyZWF0dXJlJ10uaW5jbHVkZXMoYWN0b3IudHlwZSkpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIGFjdG9yLnN5c3RlbSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgKHR5cGVvZiBhY3Rvci5zeXN0ZW0uc3RhdHVzICE9PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICAgIHR5cGVvZiBhY3Rvci5zeXN0ZW0uY29uZGl0aW9ucyA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICApIHtcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmNvbmRpdGlvbnMuY3JpdGljYWxXb3VuZHMudmFsdWUnXSA9IGZhbHNlXG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5jb25kaXRpb25zLnVuY29uc2Npb3VzLnZhbHVlJ10gPSBmYWxzZVxuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uY29uZGl0aW9ucy5keWluZy52YWx1ZSddID0gZmFsc2VcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmNvbmRpdGlvbnMuZGVhZC52YWx1ZSddID0gZmFsc2VcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmNvbmRpdGlvbnMucHJvbmUudmFsdWUnXSA9IGZhbHNlXG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5jb25kaXRpb25zLnRlbXBvSW5zYW5lLnZhbHVlJ10gPSBmYWxzZVxuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uY29uZGl0aW9ucy5pbmRlZkluc2FuZS52YWx1ZSddID0gZmFsc2VcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiBhY3Rvci5zeXN0ZW0uc3RhdHVzPy5jcml0aWNhbFdvdW5kcz8udmFsdWUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgYWN0b3Iuc3lzdGVtLnN0YXR1cz8uY3JpdGljYWxXb3VuZHMudmFsdWVcbiAgICAgICAgKSB7XG4gICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmNvbmRpdGlvbnMuY3JpdGljYWxXb3VuZHMudmFsdWUnXSA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZW9mIGFjdG9yLnN5c3RlbS5zdGF0dXM/LnVuY29uc2Npb3VzPy52YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICBhY3Rvci5zeXN0ZW0uc3RhdHVzPy51bmNvbnNjaW91cy52YWx1ZVxuICAgICAgICApIHtcbiAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uY29uZGl0aW9ucy51bmNvbnNjaW91cy52YWx1ZSddID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eXBlb2YgYWN0b3Iuc3lzdGVtLnN0YXR1cz8uZHlpbmc/LnZhbHVlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgIGFjdG9yLnN5c3RlbS5zdGF0dXM/LmR5aW5nLnZhbHVlXG4gICAgICAgICkge1xuICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5jb25kaXRpb25zLmR5aW5nLnZhbHVlJ10gPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiBhY3Rvci5zeXN0ZW0uc3RhdHVzPy5kZWFkPy52YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICBhY3Rvci5zeXN0ZW0uc3RhdHVzPy5kZWFkLnZhbHVlXG4gICAgICAgICkge1xuICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5jb25kaXRpb25zLmRlYWQudmFsdWUnXSA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZW9mIGFjdG9yLnN5c3RlbS5zdGF0dXM/LnByb25lPy52YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICBhY3Rvci5zeXN0ZW0uc3RhdHVzPy5wcm9uZS52YWx1ZVxuICAgICAgICApIHtcbiAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uY29uZGl0aW9ucy5wcm9uZS52YWx1ZSddID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eXBlb2YgYWN0b3Iuc3lzdGVtLnN0YXR1cz8udGVtcG9JbnNhbmU/LnZhbHVlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgIGFjdG9yLnN5c3RlbS5zdGF0dXM/LnRlbXBvSW5zYW5lLnZhbHVlXG4gICAgICAgICkge1xuICAgICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5jb25kaXRpb25zLnRlbXBvSW5zYW5lLnZhbHVlJ10gPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiBhY3Rvci5zeXN0ZW0uc3RhdHVzPy5pbmRlZkluc2FuZT8udmFsdWUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgYWN0b3Iuc3lzdGVtLnN0YXR1cz8uaW5kZWZJbnNhbmUudmFsdWVcbiAgICAgICAgKSB7XG4gICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmNvbmRpdGlvbnMuaW5kZWZJbnNhbmUudmFsdWUnXSA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGFjdG9yLmVmZmVjdHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgY29uc3QgZWZmZWN0cyA9IGFjdG9yLmVmZmVjdHNcbiAgICAgICAgICBsZXQgY2hhbmdlZCA9IGZhbHNlXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGltID0gZWZmZWN0cy5sZW5ndGg7IGkgPCBpbTsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBlZmZlY3QgPSBlZmZlY3RzW2ldXG4gICAgICAgICAgICBjb25zdCBtYXRjaCA9IGVmZmVjdC5pY29uLm1hdGNoKFxuICAgICAgICAgICAgICAvXFwvKGhhbmdpbmctc3BpZGVyfHRlbnRhY2xlcy1za3VsbHxhcm0tc2xpbmd8aGVhcnQtYmVhdHN8dG9tYnN0b25lfGtub2NrZWQtb3V0LXN0YXJzfGZhbGxpbmd8c2t1bGx8dW5jb25zY2lvdXMpXFwuL1xuICAgICAgICAgICAgKVxuICAgICAgICAgICAgaWYgKG1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIGxldCBzdGF0dXNJZCA9ICcnXG4gICAgICAgICAgICAgIHN3aXRjaCAobWF0Y2hbMV0pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdoYW5naW5nLXNwaWRlcic6XG4gICAgICAgICAgICAgICAgICBzdGF0dXNJZCA9ICd0ZW1wb0luc2FuZSdcbiAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAndGVudGFjbGVzLXNrdWxsJzpcbiAgICAgICAgICAgICAgICAgIHN0YXR1c0lkID0gJ2luZGVmSW5zYW5lJ1xuICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICdhcm0tc2xpbmcnOlxuICAgICAgICAgICAgICAgICAgc3RhdHVzSWQgPSAnY3JpdGljYWxXb3VuZHMnXG4gICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgJ2hlYXJ0LWJlYXRzJzpcbiAgICAgICAgICAgICAgICAgIHN0YXR1c0lkID0gJ2R5aW5nJ1xuICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICd0b21ic3RvbmUnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3NrdWxsJzpcbiAgICAgICAgICAgICAgICAgIHN0YXR1c0lkID0gJ2RlYWQnXG4gICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgJ2tub2NrZWQtb3V0LXN0YXJzJzpcbiAgICAgICAgICAgICAgICBjYXNlICd1bmNvbnNjaW91cyc6XG4gICAgICAgICAgICAgICAgICBzdGF0dXNJZCA9ICd1bmNvbnNjaW91cydcbiAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAnZmFsbGluZyc6XG4gICAgICAgICAgICAgICAgICBzdGF0dXNJZCA9ICdwcm9uZSdcbiAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHN0YXR1c0lkICE9PSAnJykge1xuICAgICAgICAgICAgICAgIGlmICghdXBkYXRlRGF0YVtgc3lzdGVtLmNvbmRpdGlvbnMuJHtzdGF0dXNJZH0udmFsdWVgXSkge1xuICAgICAgICAgICAgICAgICAgdXBkYXRlRGF0YVtgc3lzdGVtLmNvbmRpdGlvbnMuJHtzdGF0dXNJZH0udmFsdWVgXSA9IHRydWVcbiAgICAgICAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlZmZlY3QuZmxhZ3MuY29yZT8uc3RhdHVzSWQgIT09IHN0YXR1c0lkKSB7XG4gICAgICAgICAgICAgICAgICBlZmZlY3RzW2ldID0gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChlZmZlY3QsIHtcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICBjb3JlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNJZFxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgICB1cGRhdGVEYXRhLmVmZmVjdHMgPSBlZmZlY3RzXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS4tPXN0YXR1cyddID0gbnVsbFxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdXBkYXRlRGF0YVxuICB9XG5cbiAgc3RhdGljIF9taWdyYXRlQWN0b3JOcGNDcmVhdHVyZSAoYWN0b3IsIHVwZGF0ZURhdGEpIHtcbiAgICBpZiAoWyducGMnXS5pbmNsdWRlcyhhY3Rvci50eXBlKSAmJiB0eXBlb2YgYWN0b3Iuc3lzdGVtICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHR5cGVvZiBhY3Rvci5zeXN0ZW0uc3BlY2lhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLnNwZWNpYWwnXSA9IHtcbiAgICAgICAgICBjaGVja1Bhc3NlZDogbnVsbCxcbiAgICAgICAgICBjaGVja0ZhaWxsZWQ6IG51bGxcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBhY3Rvci5zeXN0ZW0uYXR0YWNrc1BlclJvdW5kID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uYXR0YWNrc1BlclJvdW5kJ10gPSAxXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1cGRhdGVEYXRhXG4gIH1cblxuICBzdGF0aWMgX21pZ3JhdGVBY3RvckNoYXJhY3RlclNhbml0eSAoYWN0b3IsIHVwZGF0ZURhdGEpIHtcbiAgICBpZiAoXG4gICAgICBhY3Rvci50eXBlID09PSAnY2hhcmFjdGVyJyAmJlxuICAgICAgdHlwZW9mIGFjdG9yLnN5c3RlbT8uYXR0cmlicz8uc2FuICE9PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgY29uc3Qgb25lRmlmdGhTYW5pdHkgPSBNYXRoLmNlaWwoYWN0b3Iuc3lzdGVtLmF0dHJpYnMuc2FuLnZhbHVlIC8gNSlcbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIGFjdG9yLnN5c3RlbS5hdHRyaWJzLnNhbi5kYWlseUxvc3MgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgIGFjdG9yLnN5c3RlbS5hdHRyaWJzLnNhbi5kYWlseUxvc3MgPT09IG51bGxcbiAgICAgICkge1xuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uYXR0cmlicy5zYW4uZGFpbHlMb3NzJ10gPSAwXG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIHR5cGVvZiBhY3Rvci5zeXN0ZW0uYXR0cmlicy5zYW4ub25lRmlmdGhTYW5pdHkgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgIGFjdG9yLnN5c3RlbS5hdHRyaWJzLnNhbi5vbmVGaWZ0aFNhbml0eSA9PT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5hdHRyaWJzLnNhbi5vbmVGaWZ0aFNhbml0eSddID0gJyAvICcgKyBvbmVGaWZ0aFNhbml0eVxuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgYWN0b3Iuc3lzdGVtLmF0dHJpYnMuc2FuLmRhaWx5TG9zcyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgYWN0b3Iuc3lzdGVtLmF0dHJpYnMuc2FuLmRhaWx5TG9zcyA9PT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5hdHRyaWJzLnNhbi5kYWlseUxvc3MnXSA9IDBcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIGFjdG9yLnN5c3RlbS5pbmRlZmluaXRlSW5zYW5pdHlMZXZlbCA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgYWN0b3Iuc3lzdGVtLmluZGVmaW5pdGVJbnNhbml0eUxldmVsID09PSBudWxsIHx8XG4gICAgICAgIHR5cGVvZiBhY3Rvci5zeXN0ZW0uaW5kZWZpbml0ZUluc2FuaXR5TGV2ZWwudmFsdWUgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgIGFjdG9yLnN5c3RlbS5pbmRlZmluaXRlSW5zYW5pdHlMZXZlbC52YWx1ZSA9PT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5pbmRlZmluaXRlSW5zYW5pdHlMZXZlbC52YWx1ZSddID0gMFxuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgYWN0b3Iuc3lzdGVtLmluZGVmaW5pdGVJbnNhbml0eUxldmVsID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICBhY3Rvci5zeXN0ZW0uaW5kZWZpbml0ZUluc2FuaXR5TGV2ZWwgPT09IG51bGwgfHxcbiAgICAgICAgdHlwZW9mIGFjdG9yLnN5c3RlbS5pbmRlZmluaXRlSW5zYW5pdHlMZXZlbC5tYXggPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgIGFjdG9yLnN5c3RlbS5pbmRlZmluaXRlSW5zYW5pdHlMZXZlbC5tYXggPT09IG51bGxcbiAgICAgICkge1xuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uaW5kZWZpbml0ZUluc2FuaXR5TGV2ZWwubWF4J10gPSBvbmVGaWZ0aFNhbml0eVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBhY3Rvci5zeXN0ZW0uYXR0cmlicy5tcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiBhY3Rvci5zeXN0ZW0uYXR0cmlicy5tcC52YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgICBhY3Rvci5zeXN0ZW0uYXR0cmlicy5tcC52YWx1ZSA9PT0gbnVsbFxuICAgICAgICApIHtcbiAgICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uYXR0cmlicy5tcC52YWx1ZSddID0gb25lRmlmdGhTYW5pdHlcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZW9mIGFjdG9yLnN5c3RlbS5hdHRyaWJzLm1wLm1heCA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgICBhY3Rvci5zeXN0ZW0uYXR0cmlicy5tcC5tYXggPT09IG51bGxcbiAgICAgICAgKSB7XG4gICAgICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLmF0dHJpYnMubXAubWF4J10gPSBvbmVGaWZ0aFNhbml0eVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIHR5cGVvZiBhY3Rvci5zeXN0ZW0ubm90ZXMgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgIGFjdG9yLnN5c3RlbS5ub3RlcyA9PT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5ub3RlcyddID0gJydcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZURhdGFcbiAgfVxuXG4gIHN0YXRpYyBfbWlncmF0ZU1hY3JvQXJ0d29yayAodGFibGUsIHVwZGF0ZURhdGEpIHtcbiAgICBjb25zdCBpbWFnZSA9IFN0cmluZyh0YWJsZS5pbWcpLm1hdGNoKC9zeXN0ZW1zXFwvQ29DN1xcL2FydHdvcmtcXC9pY29uc1xcLyguKykvKVxuICAgIGlmIChpbWFnZSAhPT0gbnVsbCkge1xuICAgICAgdXBkYXRlRGF0YS5pbWcgPSAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy8nICsgaW1hZ2VbMV1cbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZURhdGFcbiAgfVxuXG4gIHN0YXRpYyBfbWlncmF0ZVRhYmxlQXJ0d29yayAodGFibGUsIHVwZGF0ZURhdGEpIHtcbiAgICBsZXQgaW1hZ2UgPSBTdHJpbmcodGFibGUuaW1nKS5tYXRjaCgvc3lzdGVtc1xcL0NvQzdcXC9hcnR3b3JrXFwvaWNvbnNcXC8oLispLylcbiAgICBpZiAoaW1hZ2UgIT09IG51bGwpIHtcbiAgICAgIHVwZGF0ZURhdGEuaW1nID0gJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvJyArIGltYWdlWzFdXG4gICAgfVxuICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKHRhYmxlLnJlc3VsdHMpKSB7XG4gICAgICBpbWFnZSA9IFN0cmluZyh2LmltZykubWF0Y2goL3N5c3RlbXNcXC9Db0M3XFwvYXJ0d29ya1xcL2ljb25zXFwvKC4rKS8pXG4gICAgICBpZiAoaW1hZ2UgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1cGRhdGVEYXRhLnJlc3VsdHMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdXBkYXRlRGF0YS5yZXN1bHRzID0gdGFibGUucmVzdWx0c1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZURhdGEucmVzdWx0c1trXS5pbWcgPSAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy8nICsgaW1hZ2VbMV1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZURhdGFcbiAgfVxuXG4gIHN0YXRpYyBfbWlncmF0ZVRva2VuQXJ0d29yayAodG9rZW4sIHVwZGF0ZURhdGEpIHtcbiAgICBjb25zdCBpbWFnZSA9IFN0cmluZyh0b2tlbi5pbWcpLm1hdGNoKC9zeXN0ZW1zXFwvQ29DN1xcL2FydHdvcmtcXC9pY29uc1xcLyguKykvKVxuICAgIGlmIChpbWFnZSAhPT0gbnVsbCkge1xuICAgICAgdXBkYXRlRGF0YS5pbWcgPSAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy8nICsgaW1hZ2VbMV1cbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZURhdGFcbiAgfVxufVxuIiwiLyogZ2xvYmFsIGdhbWUgKi9cbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi91dGlsaXRpZXMuanMnXG4vKipcbiAqIG5hbWVDaGFyYWN0ZXJzIGxpc3Qgb2YgY2hhcmFjdGVycyB0aGF0IGNhbiBiZSBwYXJ0IG9mIGEgW10gZm9yIGNoYXJhY3Rlciwgc2tpbGwsIG9yIHdlYXBvbiBuYW1lcyB1c2VkIGluIGJyYWNrZXQgZXhwcmVzc2lvbi5cbiAqXG4gKiBcImtleXMuPGxhbmd1YWdlPi5kZXNjcmlwdGlvblwiIGxhbmcga2V5IHRvIHNob3cgaW4gdGhlIGxhbmd1YWdlIHNlbGVjdGlvbiBkaWFsb2cgYm94LlxuICogXCJrZXlzLjxsYW5ndWFnZT4uZGJOb25lXCIgUmVndWxhciBleHByZXNzaW9uIHRvIGluZGljYXRlIG5vIERhbWFnZSBCb251cyBlLmcuIERCOiBcImRiTm9uZVwiLlxuICogXCJrZXlzLjxsYW5ndWFnZT4uYXJtb3JOb25lXCIgUmVndWxhciBleHByZXNzaW9uIHRvIGluZGljYXRlIG5vIEFybW91ciBCb251cyBlLmcuIEFybW9yOiBcImFybW9yTm9uZVwiLlxuICogXCJrZXlzLjxsYW5ndWFnZT4uYXR0YWNrc1BlclJvdW5kTm9uZVwiIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBpbmRpY2F0ZSBubyBhdHRhY2tzIGUuZy4gQXR0YWNrcyBQZXIgUm91bmQ6IFwiYXR0YWNrc1BlclJvdW5kTm9uZVwiLlxuICogXCJrZXlzLjxsYW5ndWFnZT4uc2FuTG9zc05vbmVcIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gaW5kaWNhdGUgbm8gc2FuaXR5IGxvc3MgZS5nLiBTQU4gbG9zczogXCJzYW5Mb3NzTm9uZVwiLlxuICogXCJrZXlzLjxsYW5ndWFnZT4uZnVsbGRiXCIgUmVndWxhciBleHByZXNzaW9uIHRvIGluZGljYXRlIGRhbWFnZSBib251cyBpbiBhdHRyaWJ1dGVzIGFuZCB3ZWFwb24gZGFtYWdlIGUuZy4gREI6IFwiZnVsbGRiXCIgLyBXZWFwb24gNTAlICgyNS8xMCksIGRhbWFnZSAxRDYgKyBcImZ1bGxkYlwiLlxuICogXCJrZXlzLjxsYW5ndWFnZT4uaGFsZmRiXCIgUmVndWxhciBleHByZXNzaW9uIHRvIGluZGljYXRlIGhhbGYgZGFtYWdlIGJvbnVzIGluIHdlYXBvbiBkYW1hZ2UgZS5nLiBXZWFwb24gNTAlICgyNS8xMCksIGRhbWFnZSAxRDYgKyBcImhhbGZkYlwiLlxuICogXCJrZXlzLjxsYW5ndWFnZT4uc2VjdGlvbkNvbWJhdHNcIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gaW5kaWNhdGUgdGhlIHN0YXJ0IG9mIHRoZSBjb21iYXQgLyB3ZWFwb24gc2VjdGlvbiBvZiB0ZXh0LlxuICogXCJrZXlzLjxsYW5ndWFnZT4ubmV3Q29tYmF0SGVhZGVyXCIgSWYgdGhlcmUgaXMgbm8gY29tYmF0IC8gd2VhcG9uIHNlY3Rpb24sIGFkZCB0aGlzIHNlY3Rpb24gd2VyZSBpdCBwcm9iYWJseSBpcywgdGhpcyBuZWVkcyB0byBtYXRjaGVkIGJ5IFwia2V5cy48bGFuZ3VhZ2U+LnNlY3Rpb25Db21iYXRzXCIuXG4gKiBcImtleXMuPGxhbmd1YWdlPi5zZWN0aW9uU2tpbGxzXCIgUmVndWxhciBleHByZXNzaW9uIHRvIGluZGljYXRlIHRoZSBzdGFydCBvZiB0aGUgc2tpbGxzIHNlY3Rpb24gb2YgdGV4dC5cbiAqIFwia2V5cy48bGFuZ3VhZ2U+LnNlY3Rpb25MYW5nYXVnZXNcIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gaW5kaWNhdGUgdGhlIHN0YXJ0IG9mIHRoZSBsYW5ndWFnZXMgc2VjdGlvbiBvZiB0ZXh0LlxuICogXCJrZXlzLjxsYW5ndWFnZT4uc2VjdGlvblNwZWxsc1wiIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBpbmRpY2F0ZSB0aGUgc3RhcnQgb2YgdGhlIHNwZWxscyBzZWN0aW9uIG9mIHRleHQuXG4gKiBcImtleXMuPGxhbmd1YWdlPi5oYW5kZ3VuXCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBjb21iYXQgc2VjdGlvbiB3ZWFwb24gbmFtZSBpcyBhIGhhbmRndW4gdHlwZS5cbiAqIFwia2V5cy48bGFuZ3VhZ2U+LnJpZmxlXCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBjb21iYXQgc2VjdGlvbiB3ZWFwb24gbmFtZSBpcyBhIHJpZmxlIHR5cGUuXG4gKiBcImtleXMuPGxhbmd1YWdlPi5zbWJcIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggTlBDIGNvbWJhdCBzZWN0aW9uIHdlYXBvbiBuYW1lIGlzIGEgc3VibWFjaGluZSBndW4gdHlwZS5cbiAqIFwia2V5cy48bGFuZ3VhZ2U+Lm1hY2hpbmVHdW5cIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggTlBDIGNvbWJhdCBzZWN0aW9uIHdlYXBvbiBuYW1lIGlzIGEgbWFjaGluZSBndW4gdHlwZS5cbiAqIFwia2V5cy48bGFuZ3VhZ2U+LmxhdW5jaGVkXCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBjb21iYXQgc2VjdGlvbiB3ZWFwb24gbmFtZSBpcyBhIGxhdW5jaGVkIHR5cGUuXG4gKiBcImtleXMuPGxhbmd1YWdlPi5leGFtcGxlXCIgU3RyaW5nIHRoYXQgc2hvdWxkIHNob3cgYXMgYSBwbGFjZWhvbGRlciBleGFtcGxlLlxuICpcbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4uYWdlXCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBhZ2UsIG5hbWVkIGNhcHR1cmluZyBncm91cCA8YWdlPi5cbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4ub2NjdXBhdGlvblwiIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBOUEMgb2NjdXBhdGlvbiwgbmFtZWQgY2FwdHVyaW5nIGdyb3VwIDxvY2N1cGF0aW9uPi5cbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4uc3RyXCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBzdHJlbmd0aCBjaGFyYWN0ZXJpc3RpYywgbmFtZWQgY2FwdHVyaW5nIGdyb3VwIDxzdHI+LlxuICogXCJ0cmFuc2xhdGlvbnMuPGxhbmd1YWdlPi5jb25cIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggTlBDIGNvbnN0aXR1dGlvbiBjaGFyYWN0ZXJpc3RpYywgbmFtZWQgY2FwdHVyaW5nIGdyb3VwIDxjb24+LlxuICogXCJ0cmFuc2xhdGlvbnMuPGxhbmd1YWdlPi5zaXpcIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggTlBDIHNpemUgY2hhcmFjdGVyaXN0aWMsIG5hbWVkIGNhcHR1cmluZyBncm91cCA8c2l6Pi5cbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4uaW50XCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBpbnRlbGxpZ2VuY2UgY2hhcmFjdGVyaXN0aWMsIG5hbWVkIGNhcHR1cmluZyBncm91cCA8aW50Pi5cbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4ucG93XCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBwb3dlciBjaGFyYWN0ZXJpc3RpYywgbmFtZWQgY2FwdHVyaW5nIGdyb3VwIDxwb3c+LlxuICogXCJ0cmFuc2xhdGlvbnMuPGxhbmd1YWdlPi5kZXhcIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggTlBDIGRleHRlcml0eSBjaGFyYWN0ZXJpc3RpYywgbmFtZWQgY2FwdHVyaW5nIGdyb3VwIDxkZXg+LlxuICogXCJ0cmFuc2xhdGlvbnMuPGxhbmd1YWdlPi5hcHBcIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggTlBDIGFwcGVhcmFuY2UgY2hhcmFjdGVyaXN0aWMsIG5hbWVkIGNhcHR1cmluZyBncm91cCA8YXBwPi5cbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4uZWR1XCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBlZHVjYXRpb24gY2hhcmFjdGVyaXN0aWMsIG5hbWVkIGNhcHR1cmluZyBncm91cCA8ZWR1Pi5cbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4uc2FuXCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBzYW5pdHkgcG9pbnRzIGF0dHJpYnV0ZSwgbmFtZWQgY2FwdHVyaW5nIGdyb3VwIDxzYW4+LlxuICogXCJ0cmFuc2xhdGlvbnMuPGxhbmd1YWdlPi5ocFwiIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBOUEMgaGl0IHBvaW50cyBhdHRyaWJ1dGUsIG5hbWVkIGNhcHR1cmluZyBncm91cCA8aHA+LlxuICogXCJ0cmFuc2xhdGlvbnMuPGxhbmd1YWdlPi5tcFwiIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBOUEMgbWFnaWMgcG9pbnRzIGF0dHJpYnV0ZSwgbmFtZWQgY2FwdHVyaW5nIGdyb3VwIDxtcD4uXG4gKiBcInRyYW5zbGF0aW9ucy48bGFuZ3VhZ2U+LmRiXCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBkYW1hZ2UgYm9udXMgYXR0cmlidXRlLCBuYW1lZCBjYXB0dXJpbmcgZ3JvdXAgPGRiPiBpZiBtYXRjaGluZyBcImtleXMuPGxhbmd1YWdlPi5kYk5vbmVcIiB0aGVuIDAuXG4gKiBcInRyYW5zbGF0aW9ucy48bGFuZ3VhZ2U+LmJ1aWxkXCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBidWlsZCBhdHRyaWJ1dGUsIG5hbWVkIGNhcHR1cmluZyBncm91cCA8YnVpbGQ+LlxuICogXCJ0cmFuc2xhdGlvbnMuPGxhbmd1YWdlPi5hcm1vclwiIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBOUEMgZGFtYWdlIGJvbnVzIGF0dHJpYnV0ZSwgbmFtZWQgY2FwdHVyaW5nIGdyb3VwIDxkYj4gaWYgbWF0Y2hpbmcgXCJrZXlzLjxsYW5ndWFnZT4uYXJtb3JOb25lXCIgdGhlbiAwLlxuICogXCJ0cmFuc2xhdGlvbnMuPGxhbmd1YWdlPi5tb3ZcIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggTlBDIG1vdmVtZW50IHJhdGUgYXR0cmlidXRlLCBuYW1lZCBjYXB0dXJpbmcgZ3JvdXAgPG1vdj4uXG4gKiBcInRyYW5zbGF0aW9ucy48bGFuZ3VhZ2U+Lmxja1wiIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBOUEMgbHVjayBhdHRyaWJ1dGUsIG5hbWVkIGNhcHR1cmluZyBncm91cCA8bGNrPi5cbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4uYXR0YWNrc1BlclJvdW5kXCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBhdHRhY2tzIHBlciByb3VuZCwgbmFtZWQgY2FwdHVyaW5nIGdyb3VwIDxhdHRhY2tzUGVyUm91bmQ+IGlmIG1hdGNoaW5nIFwia2V5cy48bGFuZ3VhZ2U+LmF0dGFja3NQZXJSb3VuZE5vbmVcIiB0aGVuIDAuXG4gKiBcInRyYW5zbGF0aW9ucy48bGFuZ3VhZ2U+LnNhbkxvc3NcIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggTlBDIHNhbiBsb3NzIG1pbi9tYXgsIG5hbWVkIGNhcHR1cmluZyBncm91cCA8c2FuTG9zcz4gaWYgbWF0Y2hpbmcgXCJrZXlzLjxsYW5ndWFnZT4uc2FuTG9zc05vbmVcIiB0aGVuIG5vbmUuXG4gKiBcInRyYW5zbGF0aW9ucy48bGFuZ3VhZ2U+LndlYXBvblwiIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBOUEMgY29tYmF0IHNlY3Rpb24sIG5hbWVkIGNhcHR1cmluZyBncm91cCB3ZWFwb24gPG5hbWU+LCBvcHRpb25hbCA8cGVyY2VudGFnZT4sIGFuZCA8ZGFtYWdlPi4gRGFtYWdlIGNhbiBjb250YWluIFwia2V5cy48bGFuZ3VhZ2U+LmZ1bGxkYlwiIGFuZCBcImtleXMuPGxhbmd1YWdlPi5oYWxmZGJcIi5cbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4ud2VhcG9uRG9kZ2VcIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggTlBDIGNvbWJhdCBzZWN0aW9uIGRvZGdlIHNraWxsLCBuYW1lZCBjYXB0dXJpbmcgZ3JvdXAgPG5hbWU+IGFuZCA8cGVyY2VudGFnZT4uXG4gKiBcInRyYW5zbGF0aW9ucy48bGFuZ3VhZ2U+LnNraWxsXCIgUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIE5QQyBza2lsbCBzZWN0aW9uIHNraWxsIG5hbWUsIG5hbWVkIGNhcHR1cmluZyBncm91cCA8bmFtZT4gYW5kIDxwZXJjZW50YWdlPi5cbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4uZ3Vlc3NTdGFydENvbWJhdFwiIFJlZ3VsYXIgZXhwcmVzc2lvbiBpZiB0aGVyZSBpcyBubyBjb21iYXQgc2VjdGlvbiBmaW5kIHRoZXNlIGFyZSBsaWtlbHkgdG8gYmUgdGhlIGZpcnN0IHdlYXBvbiBuYW1lLCBcImtleXMuPGxhbmd1YWdlPi5uZXdDb21iYXRIZWFkZXJcIiBpcyB0aGVuIGFkZGVkIGJlZm9yZSBpdCB0byBnZXQgdGhlIGdyb3Vwc1xuICpcbiAqIFRoZXNlIHNob3VsZCBub3QgYmUgZWRpdGVkIGFzIHRoZXkgc2hvdWxkIHdvcmsgYXMgaXNcbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4ubmFtZVwiIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBOUEMgbmFtZSwgbmFtZWQgY2FwdHVyaW5nIGdyb3VwIDxuYW1lPi5cbiAqIFwidHJhbnNsYXRpb25zLjxsYW5ndWFnZT4uc2VjdGlvbnNcIiBSZWd1bGFyIGV4cHJlc3Npb24gdG8gc3BsaXQgdGV4dCBpbnRvIGNvbWJhdCwgc2tpbGwsIGxhbmd1YWdlLCBhbmQgc3BlbGxzIHNlY3Rpb25cbiAqXG4gKiBJZiB0aGVyZSBpcyBuZXcgZnVuY3Rpb25hbGl0eSBjaGVjayBmb3IgdGhpcyBzdHJpbmcgaW4gdGhlIHRyYW5zbGF0aW9ucyAvIGtleXMgZm9yIHlvdXIgbGFuZ3VhZ2UgXCJORVcgS0VZIEJFTE9XIC0gVFJBTlNMQVRJT04gUkVRVUlSRURcIlxuICovXG5jb25zdCBuYW1lQ2hhcmFjdGVycyA9XG4gICdcXFxcdTMwMDBcXFxcdTM0MDAtXFxcXHU0REJGXFxcXHUzMDQwLVxcXFx1MzBGRlxcXFx1NEUwMC1cXFxcdTlGRkZcXFxcd1xcXFwoXFxcXClcXFxcLVxcXFwvJlwiXFwn772l77yI77yJ77yPJyArXG4gIENvQzdVdGlsaXRpZXMucXVvdGVSZWdFeHAoXG4gICAgJ2HMgWXMgWnMgW/MgcOgw6jDrMOyw7nDgMOIw4zDksOZw6HDqcOtw7PDusO9w4HDicONw5PDmsOdw6LDqsOuw7TDu8OCw4rDjsOUw5vDo8Oxw7XDg8SAw5HDlcOkw6vDr8O2w7zDv8OEw4vDj8OWw5zFuMOgw6jDp8OHw5/DmMO4w4XDpcOGw6bFk+KAnOKAncKrwrvEhcSHxJnFgsWEw7PFm8W6xbzEhMSGxJjFgcWDw5PFmsW5xbsnXG4gIClcblxuY29uc3Qga2V5cyA9IHtcbiAgZW46IHtcbiAgICBkZXNjcmlwdGlvbjogJ0NvQzcuRW5nbGlzaCcsXG4gICAgZGJOb25lOiAnbm9uZScsXG4gICAgYXJtb3JOb25lOiAnbm9uZScsXG4gICAgYXR0YWNrc1BlclJvdW5kTm9uZTogJ25vbmUnLFxuICAgIHNhbkxvc3NOb25lOiAnbm9uZScsXG4gICAgZnVsbGRiOiAnKCcgKyAnRGFtYWdlIEJvbnVzfERCJyArICcpJyxcbiAgICBoYWxmZGI6ICcoJyArICfCvXxoYWxmJyArICcpJyxcbiAgICBzZWN0aW9uQ29tYmF0czogJ1xcbig/OicgKyAnY29tYmF0fGZpZ2h0aW5nIGF0dGFja3MnICsgJylbOlxcbl0nLFxuICAgIG5ld0NvbWJhdEhlYWRlcjogJ1xcbicgKyAnQ29tYmF0JyArICdcXG4nLFxuICAgIHNlY3Rpb25Ta2lsbHM6ICdcXG4oPzonICsgJ3NraWxscycgKyAnKD86XFxcXHMqXFxcXChbXlxcXFwpXStcXFxcKSk/KVs6XFxuXScsXG4gICAgc2VjdGlvbkxhbmdhdWdlczogJ1xcbig/OicgKyAnbGFuZ3VhZ2VzJyArICcpWzpcXG5dJyxcbiAgICBzZWN0aW9uU3BlbGxzOiAnXFxuKD86JyArICdzcGVsbHMnICsgJylbOlxcbl0nLFxuICAgIGhhbmRndW46XG4gICAgICAnKD88dHlwZT4nICtcbiAgICAgICcgR3VufFJldm9sdmVyfFBpc3RvbHxIYW5kZ3VufERlcnJpbmdlcnxCZXJldHRhfEx1Z2VyfERlc2VydCBFYWdsZXwgXFxcXC4zOCcgK1xuICAgICAgJyknLFxuICAgIHJpZmxlOlxuICAgICAgJyg/PHR5cGU+JyArICdSaWZsZXxTaG90Z3VufENhcmJpbmV8R2F1Z2UgfExlZS1FbmZpZWxkfEVsZXBoYW50JyArICcpJyxcbiAgICBzbWI6ICcoPzx0eXBlPicgKyAnU3VibWFjaGluZSBHdW58VGhvbXBzb24nICsgJyknLFxuICAgIG1hY2hpbmVHdW46ICcoPzx0eXBlPicgKyAnQnJvd25pbmd8Vmlja2VycycgKyAnKScsXG4gICAgbGF1bmNoZWQ6ICcoPzx0eXBlPicgKyAnTW9sb3RvdnxHcmVuYWRlfER5bmFtaXRlJyArICcpJyxcbiAgICBleGFtcGxlOlxuICAgICAgJ0V4YW1wbGUgQ2hhcmFjdGVyLCBhZ2UgMjdcXG5TVFIgNzUgQ09OIDYwIFNJWiA4MCBERVggNzAgQVBQIDYwIElOVCA4MFxcblBPVyA1MCBFRFUgODUgU0FOIDU1IEhQIDE0IERCOiAxRDRcXG5CdWlsZDogMSBNb3ZlOiA3IE1QOiAxMCBMdWNrOiA0MCBBcm1vcjogMVxcbkF0dGFja3MgcGVyIHJvdW5kOiAzIFNBTiBsb3NzOiAxZDQvMWQ4XFxuQ29tYmF0XFxuQml0ZSA1MCUgKDI1LzEwKSwgZGFtYWdlIDFENlxcbkJyYXdsIDMwJSAoMTUvNiksIGRhbWFnZSAxRDNcXG5EZXJyaW5nZXIgNDAlICgyMC84KSwgZGFtYWdlIDFEOCsxXFxuRG9kZ2UgNTAlICgyNS8xMClcXG5Ta2lsbHNcXG5BbmltYWwgSGFuZGxpbmcgNTUlLCBDaGFybSAzMCUsIEZpcnN0IEFpZCAyNSUsIERpc2d1aXNlIDIwJSxcXG5MaXN0ZW4gNTAlLCBNZWRpY2luZSA0NSUsIFBlcnN1YWRlIDI1JSwgUHN5Y2hvbG9neSA3NSUsXFxuU2NpZW5jZSAoQXN0cm9ub215KSA5MCUsIFNjaWVuY2UgKEJvdGFueSkgMzUlLCBTY2llbmNlIChab29sb2d5KSAxMCUsXFxuU3BvdCBIaWRkZW4gMzUlLCBTdGVhbHRoIDEwJVxcbkxhbmd1YWdlczogRW5nbGlzaCA4MCUsIEVrbG8gNSUuXFxuU3BlbGxzOiBTdW1tb24gTlBDLCBEaXNwZWwgTlBDLidcbiAgfSxcbiAgZGU6IHtcbiAgICBkZXNjcmlwdGlvbjogJ0NvQzcuR2VybWFuJyxcbiAgICBkYk5vbmU6ICdub25lJyxcbiAgICBhcm1vck5vbmU6ICdub25lJyxcbiAgICBhdHRhY2tzUGVyUm91bmROb25lOiAnbm9uZScsXG4gICAgc2FuTG9zc05vbmU6ICdub25lJyxcbiAgICBkaWNlU2hvcnQ6ICd3fGQnLFxuICAgIGZ1bGxkYjogJygnICsgJ1NjaGFkZW5zYm9udXN8U2InICsgJyknLFxuICAgIGhhbGZkYjogJygnICsgJ8K9fDEvMiBTY2hhZGVuc2JvbnVzfFNiLzInICsgJyknLFxuICAgIHNlY3Rpb25Db21iYXRzOiAnXFxuKD86JyArICdLYW1wZnxBbmdyaWZmOnxBTkdSSUZGRScgKyAnKVs6XFxuXScsXG4gICAgbmV3Q29tYmF0SGVhZGVyOiAnXFxuJyArICdLYW1wZicgKyAnXFxuJyxcbiAgICBzZWN0aW9uU2tpbGxzOiAnXFxuKD86JyArICdGZXJ0aWdrZWl0ZW4nICsgJyg/OlxcXFxzKlxcXFwoW15cXFxcKV0rXFxcXCkpPylbOlxcbl0nLFxuICAgIHNlY3Rpb25MYW5nYXVnZXM6ICdcXG4oPzonICsgJ1NwcmFjaGVuJyArICcpWzpcXG5dJyxcbiAgICBzZWN0aW9uU3BlbGxzOiAnXFxuKD86JyArICdaYXViZXInICsgJylbOlxcbl0nLFxuICAgIGhhbmRndW46XG4gICAgICAnKD88dHlwZT4nICtcbiAgICAgICcgR3VufFJldm9sdmVyfFBpc3RvbGV8SGFuZGd1bnxEZXJyaW5nZXJ8QmVyZXR0YXxMdWdlcnxEZXNlcnQgRWFnbGV8IFxcXFwuMzgnICtcbiAgICAgICcpJyxcbiAgICByaWZsZTpcbiAgICAgICcoPzx0eXBlPicgK1xuICAgICAgJ0dld2VocnxTY2hyb3RmbGludGV8Q2FyYWJpbmVyfEthcmFiaW5lcnxHYXVnZSB8TGVlLUVuZmllbGR8RWxlZmFudGVuJyArXG4gICAgICAnKScsXG4gICAgc21iOiAnKD88dHlwZT4nICsgJ1N1Ym1hY2hpbmUgR3VufFRob21wc29uJyArICcpJyxcbiAgICBtYWNoaW5lR3VuOiAnKD88dHlwZT4nICsgJ0Jyb3duaW5nfFZpY2tlcnMnICsgJyknLFxuICAgIGxhdW5jaGVkOiAnKD88dHlwZT4nICsgJ01vbG90b3Z8R3JhbmF0ZXxEeW5hbWl0JyArICcpJyxcbiAgICBleGFtcGxlOlxuICAgICAgJ1Zvcm5hbWUgTmFjaG5hbWVcXG5BbHRlcjogMjlcXG5CZXJ1ZjogRWluIEJlcnVmXFxuU1QgNTBcXG5NQSA2MFxcbktPIDYwXFxuR0UgNjBcXG5HUiA1NVxcbkVSIDY1XFxuSU4gODBcXG5CSSA4NVxcblRyZWZmZXJwdW5rdGU6IDExXFxuR2Vpc3RpZ2UgU3RhYmlsaXTDpHQ6IDYwXFxuU2NoYWRlbnNib251czogMFxcblN0YXR1cjogMFxcbk1hZ2llcHVua3RlOiAxMlxcbkJld2VndW5nc3dlaXRlOiA4XFxuXFxuS2FtcGZcXG5BbmdyaWZmZTogMVxcbkhhbmRnZW1lbmdlIDMwJSAoMTUvNiksIFNjaGFkZW4gMUQzXFxuTWVzc2VyIDMwJSAoMTUvNiksIFNjaGFkZW4gMUQ0XFxuQXVzd2VpY2hlbiAzMCUgKDE1LzYpXFxuXFxuRmVydGlna2VpdGVuOiBBbnRocm9wb2xvZ2llIDcwJSAoMzUvMTQpLCBBcmNow6RvbG9naWUgMzAlICgxNS82KSwgQmlibGlvdGhla3NudXR6dW5nIDUwJSAoMjUvMTApLCBFcnN0ZSBIaWxmZSA1MCUgKDI1LzEwKSwgRmluYW56a3JhZnQgNDAlICgyMC84KSwgR2VzY2hpY2h0ZSA2MCUgKDMwLzEyKSwgS2xldHRlcm4gNTAlICgyNS8xMClcXG5cXG5TcHJhY2hlbjogRW5nbGlzY2ggODUlICg0Mi8xNyk7IERldXRzY2ggNDUlICgyMi85KSwgTGF0ZWluIDQ1JSAoMjIvOSknXG4gIH0sXG4gIHBsOiB7XG4gICAgZGVzY3JpcHRpb246ICdDb0M3LlBvbGlzaCcsXG4gICAgZGJOb25lOiAnYnJhaycsXG4gICAgYXJtb3JOb25lOiAnYnJhaycsXG4gICAgYXR0YWNrc1BlclJvdW5kTm9uZTogJ2JyYWsnLFxuICAgIHNhbkxvc3NOb25lOiAnYnJhaycsXG4gICAgZGljZVNob3J0OiAna3xkJyxcbiAgICBmdWxsZGI6ICcoJyArICdNb2R5ZmlrYXRvciBPYnJhxbxlxYR8TU8nICsgJyknLFxuICAgIGhhbGZkYjogJygnICsgJ8K9fDEvMiBNT3xNTy8yJyArICcpJyxcbiAgICBzZWN0aW9uQ29tYmF0czogJ1xcbig/OicgKyAnV2Fsa2F8QXRha2knICsgJylbOlxcbl0nLFxuICAgIG5ld0NvbWJhdEhlYWRlcjogJ1xcbicgKyAnV2Fsa2EnICsgJ1xcbicsXG4gICAgc2VjdGlvblNraWxsczogJ1xcbig/OicgKyAnVW1pZWrEmXRub8WbY2knICsgJyg/OlxcXFxzKlxcXFwoW15cXFxcKV0rXFxcXCkpPylbOlxcbl0nLFxuICAgIHNlY3Rpb25MYW5nYXVnZXM6ICdcXG4oPzonICsgJ0rEmXp5a2knICsgJylbOlxcbl0nLFxuICAgIHNlY3Rpb25TcGVsbHM6ICdcXG4oPzonICsgJ1pha2zEmWNpYScgKyAnKVs6XFxuXScsXG4gICAgaGFuZGd1bjpcbiAgICAgICcoPzx0eXBlPicgK1xuICAgICAgJyBQaXN0b2xldHxSZXdvbHdlcnxEZXJyaW5nZXJ8QmVyZXR0YXxMdWdlcnxEZXNlcnQgRWFnbGV8IFxcXFwuMzgnICtcbiAgICAgICcpJyxcbiAgICByaWZsZTpcbiAgICAgICcoPzx0eXBlPicgK1xuICAgICAgJ0thcmFiaW58U3RyemVsYmF8V2lhdHLDs3drYXxHYXJhbmR8R2F1Z2UgfExlZS1FbmZpZWxkfFN0cnplbGJhIG5hIHPFgm9uaWUnICtcbiAgICAgICcpJyxcbiAgICBzbWI6ICcoPzx0eXBlPicgKyAnUGlzdG9sZXQgbWFzenlub3d5fFRob21wc29uJyArICcpJyxcbiAgICBtYWNoaW5lR3VuOiAnKD88dHlwZT4nICsgJ0Jyb3duaW5nfFZpY2tlcnMnICsgJyknLFxuICAgIGxhdW5jaGVkOiAnKD88dHlwZT4nICsgJ01vxYJvdG93YXxHcmFuYXR8TGFza2EgZHluYW1pdHV8RHluYW1pdCcgKyAnKScsXG4gICAgZXhhbXBsZTpcbiAgICAgICdQcnp5a8WCYWRvd2EgcG9zdGHEhywgMjcgbGF0XFxuQmlibGlvdGVrYXJ6XFxuUyA3NSBLT04gNjAgQkMgODAgWlIgNzAgV1lHIDYwIElOVCA4MFxcbk1PQyA1MCBXWUsgODUgUCA1NSBQVyAxNCBNTzogMUQ0XFxuS3J6ZXBhOiAxIFJ1Y2g6IDcgUE06IDEwIFN6Y3rEmcWbY2llOiA0MCBQYW5jZXJ6OiAxXFxuQXRha2kgdyBydW5kemllOiAzIFV0cmF0YSBQb2N6eXRhbG5vxZtjaTogMUs0LzFLOFxcbldhbGthXFxuVWdyeXppZW5pZSA1MCUgKDI1LzEwKSwgb2JyYcW8ZW5pYSAxSzZcXG5XYWxrYSAzMCUgKDE1LzYpLCBvYnJhxbxlbmlhIDFLM1xcbkRlcnJpbmdlciA0MCUgKDIwLzgpLCBvYnJhxbxlbmlhIDFLOCsxXFxuVW5payA1MCUgKDI1LzEwKVxcblVtaWVqxJl0bm/Fm2NpXFxuVHJlc3VyYSBad2llcnrEhXQgNTUlLCBVcm9rIE9zb2Jpc3R5IDMwJSwgUGllcndzemEgUG9tb2MgMjUlLCBVa3J5d2FuaWUgMjAlLFxcbk5hc8WCdWNoaXdhbmllIDUwJSwgTWVkeWN5bmEgNDUlLCBQcnpla29ueXdhbmllIDI1JSwgUHN5Y2hvbG9naWEgNzUlLFxcbk5hdWthIChBc3Ryb25vbWlhKSA5MCUsIE5hdWthIChCb3RhbmlrYSkgMzUlLCBOYXVrYSAoWm9vbG9naWEpIDEwJSxcXG5TcG9zdHJ6ZWdhd2N6b8WbxIcgMzUlLCBVa3J5d2FuaWUgMTAlXFxuSsSZenlraTogQW5naWVsc2tpIDgwJSwgRWtsbyA1JS5cXG5aYWtsxJljaWE6IFByenl6d2FuaWUgTlBDLCBPZGVzxYJhbmllIE5QQy4nXG4gIH0sXG4gIGZyOiB7XG4gICAgZGVzY3JpcHRpb246ICdDb0M3LkZyZW5jaCcsXG4gICAgZGJOb25lOiAnQWN1bmUnLFxuICAgIGFybW9yTm9uZTogJyg/OkFjdW5lfGF1Y3VuZSknLFxuICAgIGF0dGFja3NQZXJSb3VuZE5vbmU6ICdBY3VuZScsXG4gICAgc2FuTG9zc05vbmU6ICdBY3VuZScsXG4gICAgZnVsbGRiOiAnKCcgKyAnQkR8Qm9udXMgYXV4IGRvbW1hZ2VzfEltcGFjdHxJbXAnICsgJyknLFxuICAgIGhhbGZkYjogJygnICsgJ8K9fDEvMiBJbXB8SW1wLzInICsgJyknLFxuICAgIHNlY3Rpb25Db21iYXRzOiAnXFxuKD86JyArICdDb21iYXR8QXJtZXN8QXR0YXF1ZXMnICsgJylbOlxcbl0nLFxuICAgIG5ld0NvbWJhdEhlYWRlcjogJ1xcbicgKyAnQ29tYmF0JyArICdcXG4nLFxuICAgIHNlY3Rpb25Ta2lsbHM6ICdcXG4oPzonICsgJ0NvbXDDqXRlbmNlcycgKyAnKD86XFxcXHMqXFxcXChbXlxcXFwpXStcXFxcKSk/KVs6XFxuXScsXG4gICAgc2VjdGlvbkxhbmdhdWdlczogJ1xcbig/OicgKyAnTGFuZ3Vlcz8nICsgJylcXFxccypbOlxcbl0nLFxuICAgIHNlY3Rpb25TcGVsbHM6ICdcXG4oPzonICsgJ1NvcnRpbMOoZ2VzXFxcXHMqfFNvcnRzJyArICcpWzpcXG5dJyxcbiAgICBoYW5kZ3VuOlxuICAgICAgJyg/PHR5cGU+JyArXG4gICAgICAnUmV2b2x2ZXJ8UGlzdG9sZXR8RGVycmluZ2VyfEJlcmV0dGF8THVnZXJ8RGVzZXJ0IEVhZ2xlfCBcXFxcLjM4JyArXG4gICAgICAnKScsXG4gICAgcmlmbGU6ICcoPzx0eXBlPicgKyAnQ2FyYWJpbmV8TGVlLUVuZmllbGR8RnVzaWwnICsgJyknLFxuICAgIHNtYjogJyg/PHR5cGU+JyArICdTTUd8VGhvbXBzb24nICsgJyknLFxuICAgIG1hY2hpbmVHdW46ICcoPzx0eXBlPicgKyAnQnJvd25pbmd8Vmlja2Vyc3xNaXRyYWlsbGV1c2UnICsgJyknLFxuICAgIGxhdW5jaGVkOlxuICAgICAgJyg/PHR5cGU+JyArXG4gICAgICAnQm9vbWVyYW5nIGRlIGd1ZXJyZXxKYXZlbGluZXxQaWVycmV8U2h1cmlrZW58QsOidG9uIGRlIGR5bmFtaXRlfENvY2t0YWlsIE1vbG90b3Z8R3JlbmFkZSDDoCBtYWlufE1vbG90b3Z8R3JlbmFkZXxEeW5hbWl0ZScgK1xuICAgICAgJyknLFxuICAgIGV4YW1wbGU6XG4gICAgICAnRXhhbXBsZSBDaGFyYWN0ZXIsIDI3IGFuc1xcbkZPUiA3NSBDT04gNjAgVEFJIDgwIERFWCA3MCBBUFAgNjAgSU5UIDgwXFxuUE9VIDUwIMOJRFUgODUgU0FOIDU1IFBWIDE0IEJEOiAxRDRcXG5DYXJydXJlOiAxIE12dDogNyBQTTogMTAgQ2hhbmNlOiA0MCBBcm11cmU6IDFcXG5BdHRhcXVlcyBwYXIgcm91bmQgMyBQZXJ0ZSBkZSBTQU46IDFkNC8xZDhcXG5BdHRhcXVlc1xcbkJpdGUgNTAlICgyNS8xMCksIGRvbW1hZ2UgMUQ2XFxuQnJhd2wgMzAlICgxNS82KSwgZG9tbWFnZSAxRDNcXG5EZXJyaW5nZXIgNDAlICgyMC84KSwgZG9tbWFnZSAxRDgrMVxcbkVzcXVpdmVyIDUwJSAoMjUvMTApXFxuQ29tcMOpdGVuY2VzXFxuQW5pbWFsIEhhbmRsaW5nIDU1JSwgQ2hhcm0gMzAlLCBGaXJzdCBBaWQgMjUlLCBEaXNndWlzZSAyMCUsXFxuTGlzdGVuIDUwJSwgTWVkaWNpbmUgNDUlLCBQZXJzdWFkZSAyNSUsIFBzeWNob2xvZ3kgNzUlLFxcblNjaWVuY2UgKEFzdHJvbm9teSkgOTAlLCBTY2llbmNlIChCb3RhbnkpIDM1JSwgU2NpZW5jZSAoWm9vbG9neSkgMTAlLFxcblNwb3QgSGlkZGVuIDM1JSwgU3RlYWx0aCAxMCVcXG5MYW5ndWU6IEVuZ2xpc2ggODAlLCBFa2xvIDUlLlxcblNvcnRpbMOoZ2VzOiBTdW1tb24gTlBDLCBEaXNwZWwgTlBDLidcbiAgfSxcbiAgZXM6IHtcbiAgICBkZXNjcmlwdGlvbjogJ0NvQzcuU3BhbmlzaCcsXG4gICAgZGJOb25lOiAnbmluZ3VuYScsXG4gICAgYXJtb3JOb25lOiAnbmluZ3VuYScsXG4gICAgYXR0YWNrc1BlclJvdW5kTm9uZTogJ25pbmd1bm8nLFxuICAgIHNhbkxvc3NOb25lOiAnbm8nLFxuICAgIGZ1bGxkYjogJygnICsgJ0JEfGJkfGJvbmlmaWNhY2nDs24gZGUgZGHDsW8nICsgJyknLFxuICAgIGhhbGZkYjogJygnICsgJ8K9fG1lZGlvIGRhw7FvfG1pdGFkfGRhw7FvIGEgbGEgbWl0YWQnICsgJyknLFxuICAgIHNlY3Rpb25Db21iYXRzOiAnXFxuKD86JyArICdDb21iYXRlfEFybWFzJyArICcpWzpcXG5dJyxcbiAgICBuZXdDb21iYXRIZWFkZXI6ICdcXG4nICsgJ0NvbWJhdGUnICsgJ1xcbicsXG4gICAgc2VjdGlvblNraWxsczogJ1xcbig/OicgKyAnSGFiaWxpZGFkZXMnICsgJyg/OlxcXFxzKlxcXFwoW15cXFxcKV0rXFxcXCkpPylbOlxcbl0nLFxuICAgIHNlY3Rpb25MYW5nYXVnZXM6ICdcXG4oPzonICsgJ0lkaW9tYXN8TGVuZ3VhamVzfExlbmd1YXMnICsgJylbOlxcbl0nLFxuICAgIHNlY3Rpb25TcGVsbHM6ICdcXG4oPzonICsgJ0Nvbmp1cm9zfEhlY2hpem9zJyArICcpWzpcXG5dJyxcbiAgICBoYW5kZ3VuOlxuICAgICAgJyg/PHR5cGU+JyArXG4gICAgICAnUmV2b2x2ZXJ8UGlzdG9sYXxEZXJyaW5nZXJ8QmVyZXR0YXxMdWdlcnxEZXNlcnQgRWFnbGV8IFxcXFwuMzgnICtcbiAgICAgICcpJyxcbiAgICByaWZsZTpcbiAgICAgICcoPzx0eXBlPicgK1xuICAgICAgJ1JpZmxlfENhcmFiaW5hfExlZS1FbmZpZWxkfENhemEgRWxlZmFudGVzfEZ1c2lsfEVzY29wZXRhfEdhbGdhfFJlY29ydGFkYScgK1xuICAgICAgJyknLFxuICAgIHNtYjogJyg/PHR5cGU+JyArICdTdWJmdXNpbHxUaG9tcHNvbicgKyAnKScsXG4gICAgbWFjaGluZUd1bjogJyg/PHR5cGU+JyArICdCcm93bmluZ3xWaWNrZXJzfEFtZXRyYWxsYWRvcmEnICsgJyknLFxuICAgIGxhdW5jaGVkOiAnKD88dHlwZT4nICsgJ01vbG90b3Z8R3JhbmFkYXxEaW5hbWl0YScgKyAnKScsXG4gICAgZXhhbXBsZTpcbiAgICAgICdFeGFtcGxlIENoYXJhY3RlciwgMjcgYcOxb3NcXG5GVUUgNzUgQ09OIDYwIFRBTSA4MCBERVMgNzAgQVBBIDYwIElOVCA4MFxcblBPRCA1MCBFRFUgODUgQ09SIDU1IFBWIDE0IEJEOiAxRDRcXG5Db3JwdWxlbmNpYTogMSBNb3ZpbWllbnRvOiA3IFBNOiAxMCBTdWVydGU6IDQwIEFybWFkdXJhOiAxXFxuTsO6bWVybyBkZSBBdGFxdWVzIDMgUMOpcmRpZGEgZGUgY29yZHVyYTogMWQ0LzFkOFxcbkNvbWJhdGVcXG5CaXRlIDUwJSAoMjUvMTApLCBkYcOxbyAxRDZcXG5CcmF3bCAzMCUgKDE1LzYpLCBkYcOxbyAxRDNcXG5EZXJyaW5nZXIgNDAlICgyMC84KSwgZGHDsW8gMUQ4KzFcXG5Fc3F1aXZhciA1MCUgKDI1LzEwKVxcbkhhYmlsaWRhZGVzXFxuQW5pbWFsIEhhbmRsaW5nIDU1JSwgQ2hhcm0gMzAlLCBGaXJzdCBBaWQgMjUlLCBEaXNndWlzZSAyMCUsXFxuTGlzdGVuIDUwJSwgTWVkaWNpbmUgNDUlLCBQZXJzdWFkZSAyNSUsIFBzeWNob2xvZ3kgNzUlLFxcblNjaWVuY2UgKEFzdHJvbm9teSkgOTAlLCBTY2llbmNlIChCb3RhbnkpIDM1JSwgU2NpZW5jZSAoWm9vbG9neSkgMTAlLFxcblNwb3QgSGlkZGVuIDM1JSwgU3RlYWx0aCAxMCVcXG5JZGlvbWFzOiBFbmdsaXNoIDgwJSwgRWtsbyA1JS5cXG5Db25qdXJvczogU3VtbW9uIE5QQywgRGlzcGVsIE5QQy4nXG4gIH0sXG4gICd6aC1UVyc6IHtcbiAgICBkZXNjcmlwdGlvbjogJ0NvQzcuVHJhZGl0aW9uYWxDaGluZXNlJyxcbiAgICBkYk5vbmU6ICdub25lJyxcbiAgICBhcm1vck5vbmU6ICdub25lJyxcbiAgICBhdHRhY2tzUGVyUm91bmROb25lOiAnbm9uZScsXG4gICAgc2FuTG9zc05vbmU6ICdub25lJyxcbiAgICBmdWxsZGI6ICcoJyArICdEYW1hZ2UgQm9udXN8REJ85YK35a6z5Yqg5YC8JyArICcpJyxcbiAgICAvKiBORVcgS0VZIEJFTE9XIC0gVFJBTlNMQVRJT04gUkVRVUlSRUQgKi9cbiAgICBoYWxmZGI6ICcoJyArICfCvXxoYWxmJyArICcpJyxcbiAgICBzZWN0aW9uQ29tYmF0czpcbiAgICAgICdcXG4oPzonICsgJ2NvbWJhdHxmaWdodGluZyBhdHRhY2tzfOaIsOmspeaKgOiDvXzmiLDprKXliJfooah85q2m5ZmoJyArICcpWzpcXG5dJyxcbiAgICBuZXdDb21iYXRIZWFkZXI6ICdcXG4nICsgJ0NvbWJhdCcgKyAnXFxuJyxcbiAgICBzZWN0aW9uU2tpbGxzOlxuICAgICAgJ1xcbig/OicgKyAnKD86U2tpbGxzfOaKgOiDveWIl+ihqCknICsgJyg/OlxcXFxzKlxcXFwoW15cXFxcKV0rXFxcXCkpPylbOlxcbl0nLFxuICAgIHNlY3Rpb25MYW5nYXVnZXM6ICdcXG4oPzonICsgJ0xhbmd1YWdlc3zoqp7oqIAnICsgJylbOlxcbl0nLFxuICAgIHNlY3Rpb25TcGVsbHM6ICdcXG4oPzonICsgJ3NwZWxsc3zlkpLmlofliJfooah85ZKS5paHJyArICcpWzpcXG5dJyxcbiAgICBoYW5kZ3VuOlxuICAgICAgJyg/PHR5cGU+JyArXG4gICAgICAnIOmBgueZvOanjXxcXFxcLjIy55+t5Y+j6Ieq5YuV5omL5qeNfFxcXFwuMjXnn63lj6PmiYvmp40o5Zau566hKXxcXFxcLjMy5oiWN1xcXFwuNjVtbeW3pui8quaJi+anjXxcXFxcLjMy5oiWN1xcXFwuNjVtbeiHquWLleaJi+anjXxcXFxcLjM1NyBNYWdudW3lt6bovKrmiYvmp418XFxcXC4zOOaIljltbeW3pui8quaJi+anjXxcXFxcLjM46Ieq5YuV5omL5qeNfOiynembt+WhlE05fOagvOa0m+WFizE3fDltbeiHquWLleaJi+anjXzpra/moLxQMDh8XFxcXC40MeW3pui8quaJi+anjXxcXFxcLjQ06aas5qC85Y2X5bem6Lyq5omL5qeNfFxcXFwuNDXlt6bovKrmiYvmp418XFxcXC40NeiHquWLleaJi+anjXzmspnmvKDkuYvpt7l8R3VufFJldm9sdmVyfFBpc3RvbHxIYW5kZ3VufERlcnJpbmdlcnxCZXJldHRhfEx1Z2VyfERlc2VydCBFYWdsZXwgXFxcXC4zOCcgK1xuICAgICAgJyknLFxuICAgIHJpZmxlOlxuICAgICAgJyg/PHR5cGU+JyArXG4gICAgICAn5q2l5qeNfOWNoeizk+anjXzljYroh6rli5XmraXmp41854216LGh5qeNfFJpZmxlfFNob3RndW58Q2FyYmluZXxHYXVnZSB8TGVlLUVuZmllbGR8RWxlcGhhbnQnICtcbiAgICAgICcpJyxcbiAgICBzbWI6ICcoPzx0eXBlPicgKyAnU3VibWFjaGluZSBHdW58VGhvbXBzb2586KGd6YuS5qeNJyArICcpJyxcbiAgICBtYWNoaW5lR3VuOiAnKD88dHlwZT4nICsgJ0Jyb3duaW5nfFZpY2tlcnN85qmf5qeNJyArICcpJyxcbiAgICBsYXVuY2hlZDogJyg/PHR5cGU+JyArICdNb2xvdG92fEdyZW5hZGV8RHluYW1pdGXniIbngrjnial85omL5qa05b2IfOmHjeatpuWZqCcgKyAnKScsXG4gICAgZXhhbXBsZTpcbiAgICAgICfnpLrnr4Top5LoibIsIOW5tOm9oSAyN1xcbuWKm+mHjyA3NSDpq5Tos6ogNjAg6auU5Z6LIDgwIOaVj+aNtyA3MCDlpJboso4gNjAg5pm65YqbIDgwXFxu5oSP5b+XIDUwIOaVmeiCsiA4NSBTQU4gNTUgSFAgMTQgREI6IDFENFxcbumrlOagvDogMSBNb3ZlOiA3IE1QOiAxMCDlubjpgYs6IDQwIOitt+eUsjogMVxcbuaUu+aTiuasoeaVuDogMyDnkIbmmbrllqrlpLE6IDFkNC8xZDhcXG7miLDprKXliJfooahcXG7lkqwgNTAlICgyNS8xMCksIOWCt+WusyAxRDZcXG7nqbrmiYsgMzAlICgxNS82KSwg5YK35a6zIDFEM1xcbuaJi+anjSA0MCUgKDIwLzgpLCDlgrflrrMgMUQ4KzFcXG7ploPpgb8gNTAlICgyNS8xMClcXG7mioDog73liJfooahcXG7li5XnianpprTppIogNTUlLCDlj5bmgoUgMzAlLCDmgKXmlZEgMjUlLCDmvZvooYwgMjAlLFxcbuiBhuiBvSA1MCUsIOiXpeWtuCA0NSUsIOeyvuelnuWIhuaekCAyNSUsIOW/g+eQhuWtuCA3NSUsXFxu56eR5a24ICjlj7jms5Xnp5HlrbgpIDkwJSwg56eR5a24ICjlr4bnorzlrbgpIDM1JSwgXFxu5YG15p+lIDM1JSwg5Zas6KOdIDEwJVxcbuiqnuiogDog57K16KqeIDgwJSwg6K6A5ZSHIDUlLlxcbuWSkuaWhzog5Y+s5ZaaIE5QQywg5oyH5o+uIE5QQy4nXG4gIH0sXG4gIGphOiB7XG4gICAgZGVzY3JpcHRpb246ICdDb0M3LkphcGFuZXNlJyxcbiAgICBkYk5vbmU6ICfjgarjgZcnLFxuICAgIGFybW9yTm9uZTogJ+OBquOBlycsXG4gICAgYXR0YWNrc1BlclJvdW5kTm9uZTogJ+OBquOBlycsXG4gICAgc2FuTG9zc05vbmU6ICfjgarjgZcnLFxuICAgIGZ1bGxkYjogJygnICsgJ0RhbWFnZSBCb251c3xEQnxkYnzjg4Djg6Hjg7zjgrgo44O7fO+9pSk/44Oc44O844OK44K5JyArICcpJyxcbiAgICAvKiBORVcgS0VZIEJFTE9XIC0gVFJBTlNMQVRJT04gUkVRVUlSRUQgKi9cbiAgICBoYWxmZGI6ICcoJyArICfCvXxoYWxmJyArICcpJyxcbiAgICBzZWN0aW9uQ29tYmF0czpcbiAgICAgICdcXG4oPzonICsgJ2NvbWJhdHxmaWdodGluZyBhdHRhY2tzfOaIpumXmHzmrablmagnICsgJylbOu+8mlxcbl0nLFxuICAgIG5ld0NvbWJhdEhlYWRlcjogJ1xcbicgKyAn5oim6ZeYJyArICdcXG4nLFxuICAgIHNlY3Rpb25Ta2lsbHM6XG4gICAgICAnXFxuKD86JyArICcoPzpTa2lsbHN85oqA6IO9KScgKyAnXFxcXHMqKD86XFxcXHMqXFxcXChbXlxcXFwpXStcXFxcKSk/KVs677yaXFxuXScsXG4gICAgc2VjdGlvbkxhbmdhdWdlczogJ1xcbig/OicgKyAnTGFuZ3VhZ2VzfOiogOiqnicgKyAnKVxcXFxzKls677yaXFxuXScsXG4gICAgc2VjdGlvblNwZWxsczogJ1xcbig/OicgKyAnc3BlbGxzfOWRquaWhycgKyAnKVxcXFxzKls677yaXFxuXScsXG4gICAgaGFuZGd1bjpcbiAgICAgICcoPzx0eXBlPicgK1xuICAgICAgJ+aLs+mKg3zjgqrjg7zjg4jjg57jg4Hjg4Pjgq9844Oq44Oc44Or44OQ44O8fOODh+ODquODs+OCuOODo+ODvHzjg5njg6zjg4Pjgr9844Or44Ks44O8fOODh+OCtuODvOODiCjjg7t8772lKT/jgqTjg7zjgrDjg6t8R3VufFJldm9sdmVyfFBpc3RvbHxIYW5kZ3VufERlcnJpbmdlcnxCZXJldHRhfEx1Z2VyfERlc2VydCBFYWdsZXwgXFxcXC4zOCcgK1xuICAgICAgJyknLFxuICAgIHJpZmxlOlxuICAgICAgJyg/PHR5cGU+JyArXG4gICAgICAn44Op44Kk44OV44OrfOOCt+ODp+ODg+ODiOOCrOODs3zjgqvjg7zjg5Pjg7N844Ky44O844K4fOODquODvO+8neOCqOODs+ODleOCo+ODvOODq+ODiXzjgqjjg6zjg5XjgqHjg7Pjg4go44O7fO+9pSk/44Ks44OzfFJpZmxlfFNob3RndW58Q2FyYmluZXxHYXVnZSB8TGVlLUVuZmllbGR8RWxlcGhhbnQnICtcbiAgICAgICcpJyxcbiAgICBzbWI6ICcoPzx0eXBlPicgKyAn44K144OW44Oe44K344Oz44Ks44OzfOODiOODs+ODl+OCveODs3xTdWJtYWNoaW5lIEd1bnxUaG9tcHNvbicgKyAnKScsXG4gICAgbWFjaGluZUd1bjogJyg/PHR5cGU+JyArICfjg5bjg63jg7zjg4vjg7PjgrB844O044OD44Kr44O844K5fOODnuOCt+ODs+OCrOODs3xCcm93bmluZ3xWaWNrZXJzJyArICcpJyxcbiAgICBsYXVuY2hlZDogJyg/PHR5cGU+JyArICfjg6Ljg63jg4jjg5V844Kw44Os44ON44O844OJfOODgOOCpOODiuODnuOCpOODiHxNb2xvdG92fEdyZW5hZGV8RHluYW1pdGUnICsgJyknLFxuICAgIGV4YW1wbGU6XG4gICAgICAn44K144Oz44OX44OrIOWkqumDjuOAgTI35q2z44CB6KiY6ICFXFxuU1RSIDc1IENPTiA2MCBTSVogODAgREVYIDcwIEFQUCA2MCBJTlQgODBcXG5QT1cgNTAgRURVIDg1IOato+awl+W6piA1NSDogJDkuYXlipsgMTQg44OA44Oh44O844K444O744Oc44O844OK44K577yaMUQ0XFxu44OT44Or44OJ77yaMSDnp7vli5XvvJo3IOODnuOCuOODg+OCr+ODu+ODneOCpOODs+ODiO+8mjEwIOW5uOmBi++8mjQwIOijheeUsu+8mjFcXG4x44Op44Km44Oz44OJ44Gu5pS75pKD5Zue5pWw77yaMyDmraPmsJfluqbllqrlpLHvvJoxRDQvMUQ4XFxu5oim6ZeYXFxu5Zmb44G/44Gk44GNIDUwJSAoMjUvMTAp44CB44OA44Oh44O844K4IDFENlxcbuagvOmXmCAzMCUgKDE1LzYp44CB44OA44Oh44O844K4IDFEMytEQlxcbuODh+ODquODs+OCuOODo+ODvCA0MCUgKDIwLzgp44CB44OA44Oh44O844K4IDFEOCsxXFxu5Zue6YG/IDUwJSAoMjUvMTApXFxu5oqA6IO9XFxu6KiA44GE44GP44KL44KBIDI1JeOAgeWMu+WtpiA0NSXjgIHpmqDlr4YgMTAl44CBXFxu6IGe44GN6ICzIDUwJeOAgeiqrOW+lyAyNSXjgIHlv4PnkIblraYgNzUl44CBXFxu56eR5a2mICjlpKnmloflraYpIDkwJeOAgeenkeWtpiAo5qSN54mp5a2mKSAzNSXjgIHnp5HlraYgKOWLleeJqeWtpikgMTAl44CBXFxu5YuV54mp5L2/44GEIDU1JeOAgeWkieijhSAyMCXjgIHnm67mmJ8gMzUl44CB6a2F5oORIDMwJeOAglxcbuiogOiqnu+8muiLseiqniA4MCXjgIHjgqLjgq/jg63oqp4gNSXjgIJcXG7lkarmlofvvJpOUEPjga7lj6zllprjgIFOUEPjga7pgIDmlaPjgIInXG4gIH1cbn1cblxuY29uc3QgdHJhbnNsYXRpb25zID0ge1xuICBlbjoge1xuICAgIGFnZTogJyg/PCFbYS16XSknICsgJ2FnZScgKyAnKFxcXFxzKjopP1xcXFxzKyg/PGFnZT5cXFxcZCspWyxcXFxcc10qJyxcbiAgICBvY2N1cGF0aW9uOlxuICAgICAgJ1ssXFxcXHNdKicgKyAnT2NjdXBhdGlvbicgKyAnKFxcXFxzKjopP1xcXFxzKyg/PG9jY3VwYXRpb24+LispWyxcXFxcc1xcbl0qJyxcbiAgICBzdHI6ICcoPzwhW2Etel0pJyArICdTVFInICsgJyhcXFxccyo6KT9cXFxccyooPzxzdHI+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBjb246ICcoPzwhW2Etel0pJyArICdDT04nICsgJyhcXFxccyo6KT9cXFxccyooPzxjb24+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBzaXo6ICcoPzwhW2Etel0pJyArICdTSVonICsgJyhcXFxccyo6KT9cXFxccyooPzxzaXo+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBpbnQ6ICcoPzwhW2Etel0pJyArICdJTlQnICsgJyhcXFxccyo6KT9cXFxccyooPzxpbnQ+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBwb3c6ICcoPzwhW2Etel0pJyArICdQT1cnICsgJyhcXFxccyo6KT9cXFxccyooPzxwb3c+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBkZXg6ICcoPzwhW2Etel0pJyArICdERVgnICsgJyhcXFxccyo6KT9cXFxccyooPzxkZXg+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBhcHA6ICcoPzwhW2Etel0pJyArICdBUFAnICsgJyhcXFxccyo6KT9cXFxccyooPzxhcHA+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBlZHU6ICcoPzwhW2Etel0pJyArICdFRFUnICsgJyhcXFxccyo6KT9cXFxccyooPzxlZHU+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBzYW46XG4gICAgICAnKD88IVthLXpdKSg/OicgKyAnU0FOfFNhbml0eScgKyAnKShcXFxccyo6KT9cXFxccyooPzxzYW4+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBocDpcbiAgICAgICcoPzwhW2Etel0pKD86JyArICdIUHxIaXQgcG9pbnRzJyArICcpKFxcXFxzKjopP1xcXFxzKig/PGhwPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgbXA6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ01QfE1hZ2ljIHBvaW50cycgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMqKD88bXA+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBkYjpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICBrZXlzLmVuLmZ1bGxkYiArXG4gICAgICAnKShcXFxccyo6KT9cXFxccysoPzxkYj5bKy1dP1xcXFxkKyg/OmRcXFxcZCt8RFxcXFxkKyk/fCcgK1xuICAgICAga2V5cy5lbi5kYk5vbmUgK1xuICAgICAgJylbLFxcXFxzXFxuXSonLFxuICAgIGJ1aWxkOiAnKD88IVthLXpdKScgKyAnQnVpbGQnICsgJyhcXFxccyo6KT9cXFxccysoPzxidWlsZD5bKy1dP1xcXFxkKylbLFxcXFxzXFxuXSonLFxuICAgIGFybW9yOlxuICAgICAgJyg/PCFbYS16XSknICtcbiAgICAgICdBcm1vcicgK1xuICAgICAgJyhcXFxccyo6KT9cXFxccysoPzxhcm1vcj4nICtcbiAgICAgIGtleXMuZW4uYXJtb3JOb25lICtcbiAgICAgICd8XFxcXGQrKVssXFxcXHNcXG5dKicsXG4gICAgbW92OiAnKD88IVthLXpdKScgKyAnTW92ZScgKyAnKFxcXFxzKjopP1xcXFxzKig/PG1vdj5cXFxcZCspWyxcXFxcc1xcbl0qJyxcbiAgICBsY2s6ICcoPzwhW2Etel0pJyArICdMdWNrJyArICcoXFxcXHMqOik/XFxcXHMrKD88bGNrPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgYXR0YWNrc1BlclJvdW5kOlxuICAgICAgJyg/PCFbYS16XSkoPzonICtcbiAgICAgICdBdHRhY2tzIHBlciByb3VuZHwjIEF0dGFja3MnICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKyg/PGF0dGFja3NQZXJSb3VuZD4nICtcbiAgICAgIGtleXMuZW4uYXR0YWNrc1BlclJvdW5kTm9uZSArXG4gICAgICAnfFxcXFxkKyg/IWQpKVssXFxcXHNcXG5dKicsXG4gICAgc2FuTG9zczpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICAnU2FuaXR5IGxvc3N8U0FOIGxvc3MnICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKyg/PHNhbkxvc3M+JyArXG4gICAgICBrZXlzLmVuLnNhbkxvc3NOb25lICtcbiAgICAgICd8XFxcXGREP1srXFxcXGRdKlxcXFwvXFxcXGREP1srXFxcXGRdKilbLFxcXFxzXFxuXSonLFxuICAgIHdlYXBvbjpcbiAgICAgICcoXnxcXFxcbikoPzxuYW1lPlsuXFxcXHQgJyArXG4gICAgICBuYW1lQ2hhcmFjdGVycyArXG4gICAgICAnXSspKFxcXFwqKiw/XFxcXHMrfFxcXFwqKSg/OlxcXFwofCg/PHBlcmNlbnRhZ2U+XFxcXGQrKSUsPyg/OlxcXFxzKlxcXFwoXFxcXGQrXFxcXC9cXFxcZCtcXFxcKVxcXFxzKiw/KT8pPyhcXFxccyonICtcbiAgICAgICdkYW1hZ2UnICtcbiAgICAgICcpP1xcXFxzKyg/PGRhbWFnZT4oOj8oOj9cXFxcZCtkKT9cXFxcZCsoXFxcXHMqL1xcXFxzKnxcXFxccypbKy1dXFxcXHMqKD86JyArXG4gICAgICBrZXlzLmVuLmZ1bGxkYiArXG4gICAgICAnfCcgK1xuICAgICAga2V5cy5lbi5oYWxmZGIgK1xuICAgICAgJylcXFxccyp8XFxcXHMqWystXVxcXFxzKig6P1xcXFxkK2QpP1xcXFxkKykqKSspXFxcXCk/JyxcbiAgICB3ZWFwb25Eb2RnZTpcbiAgICAgICcoPzxuYW1lPicgK1xuICAgICAgJ0RvZGdlJyArXG4gICAgICAnKShcXFxccyo6KT9cXFxccytcXFxcKD8oPzxwZXJjZW50YWdlPlxcXFxkKylcXFxcKT9cXFxccyolKD86XFxcXHMqXFxcXChcXFxcZCtcXFxcL1xcXFxkK1xcXFwpKT8nLFxuICAgIC8vIFNraWxsIHNob3VsZCBub3QgYmUgbmFtZWQgXCJUaGUgcGxheWVyIGhhc1wiIC8gXCJidXQgdGhleSByZWdlbmVyYXRlXCIgcmVxdWlyZWQgZm9yIFwiQSBDb2xkIEZpcmUgV2l0aGluXCJcbiAgICBza2lsbDpcbiAgICAgICdeKD88bmFtZT5bOlxcXFwqLlxcXFxzJyArXG4gICAgICBuYW1lQ2hhcmFjdGVycyArXG4gICAgICAnXSsoPzwhJyArXG4gICAgICAnVGhlIHBsYXllciBoYXN8YnV0IHRoZXkgcmVnZW5lcmF0ZScgK1xuICAgICAgJykpXFxcXHMrXFxcXCg/KD88cGVyY2VudGFnZT5cXFxcZCspW15kXSU/XFxcXCk/KFxcXFxzKlxcXFwoXFxcXGQrL1xcXFxkK1xcXFwpKT9bXFxcXC4sXT9cXFxccyonLFxuICAgIGd1ZXNzU3RhcnRDb21iYXQ6ICcoXnwoPzwhLClcXG4pKCcgKyAnRmlnaHRpbmd8RmlyZWFybXN8QnJhd2x8Qml0ZScgKyAnKScsXG4gICAgbmFtZTogJ14oPzxuYW1lPltcXFxcLlxcXFxzJyArIG5hbWVDaGFyYWN0ZXJzICsgJ10rKVssXFxcXHNcXG5dKycsXG4gICAgc2VjdGlvbnM6XG4gICAgICAnKCcgK1xuICAgICAga2V5cy5lbi5zZWN0aW9uQ29tYmF0cyArXG4gICAgICAnfCcgK1xuICAgICAga2V5cy5lbi5zZWN0aW9uU2tpbGxzICtcbiAgICAgICd8JyArXG4gICAgICBrZXlzLmVuLnNlY3Rpb25MYW5nYXVnZXMgK1xuICAgICAgJ3wnICtcbiAgICAgIGtleXMuZW4uc2VjdGlvblNwZWxscyArXG4gICAgICAnKSdcbiAgfSxcbiAgZGU6IHtcbiAgICBhZ2U6ICcoPzwhW2Etel0pJyArICdBbHRlcicgKyAnKFxcXFxzKjopP1xcXFxzKyg/PGFnZT5cXFxcZCspWyxcXFxcc10qJyxcbiAgICBvY2N1cGF0aW9uOiAnWyxcXFxcc10qJyArICdCZXJ1ZicgKyAnKFxcXFxzKjopP1xcXFxzKyg/PG9jY3VwYXRpb24+LispWyxcXFxcc1xcbl0qJyxcbiAgICBzdHI6ICcoPzwhW2Etel0pJyArICdTVCcgKyAnKFxcXFxzKjopP1xcXFxzKig/PHN0cj5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGNvbjogJyg/PCFbYS16XSknICsgJ0tPJyArICcoXFxcXHMqOik/XFxcXHMqKD88Y29uPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgc2l6OiAnKD88IVthLXpdKScgKyAnR1InICsgJyhcXFxccyo6KT9cXFxccyooPzxzaXo+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBpbnQ6ICcoPzwhW2Etel0pJyArICdJTicgKyAnKFxcXFxzKjopP1xcXFxzKig/PGludD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIHBvdzogJyg/PCFbYS16XSknICsgJ01BJyArICcoXFxcXHMqOik/XFxcXHMqKD88cG93PlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgZGV4OiAnKD88IVthLXpdKScgKyAnR0UnICsgJyhcXFxccyo6KT9cXFxccyooPzxkZXg+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBhcHA6ICcoPzwhW2Etel0pJyArICdFUicgKyAnKFxcXFxzKjopP1xcXFxzKig/PGFwcD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGVkdTogJyg/PCFbYS16XSknICsgJ0JJJyArICcoXFxcXHMqOik/XFxcXHMqKD88ZWR1PlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgc2FuOlxuICAgICAgJyg/PCFbYS16XSkoPzonICtcbiAgICAgICdnU3xTVEF8R2Vpc3RpZ2UgU3RhYmlsaXTDpHQnICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKig/PHNhbj5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGhwOlxuICAgICAgJyg/PCFbYS16XSkoPzonICtcbiAgICAgICdUUHxUcmVmZmVycHVua3RlJyArXG4gICAgICAnKShcXFxccyo6KT9cXFxccyooPzxocD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIG1wOlxuICAgICAgJyg/PCFbYS16XSkoPzonICtcbiAgICAgICdNUHxNYWdpZXB1bmt0ZScgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMqKD88bXA+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBkYjpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICBrZXlzLmRlLmZ1bGxkYiArXG4gICAgICAnKShcXFxccyo6KT9cXFxccysoPzxkYj5bKy1dP1xcXFxkKyg/OmRcXFxcZCt8RHxXXFxcXGQrKT98JyArXG4gICAgICBrZXlzLmRlLmRiTm9uZSArXG4gICAgICAnKVssXFxcXHNcXG5dKicsXG4gICAgYnVpbGQ6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ1N0YXR1cnxTdGF0LicgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMrKD88YnVpbGQ+WystXT9cXFxcZCspWyxcXFxcc1xcbl0qJyxcbiAgICBhcm1vcjpcbiAgICAgICcoPzwhW2Etel0pJyArXG4gICAgICAnUGFuemVydW5nJyArXG4gICAgICAnKFxcXFxzKjopP1xcXFxzKyg/PGFybW9yPicgK1xuICAgICAga2V5cy5kZS5hcm1vck5vbmUgK1xuICAgICAgJ3xcXFxcZCspWyxcXFxcc1xcbl0qJyxcbiAgICBtb3Y6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ0JXfEJld2VndW5nc3dlaXRlJyArXG4gICAgICAnKShcXFxccyo6KT9cXFxccyooPzxtb3Y+XFxcXGQrKVssXFxcXHNcXG5dKicsXG4gICAgbGNrOiAnKD88IVthLXpdKScgKyAnR2zDvGNrJyArICcoXFxcXHMqOik/XFxcXHMrKD88bGNrPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgYXR0YWNrc1BlclJvdW5kOlxuICAgICAgJyg/PCFbYS16XSkoPzonICtcbiAgICAgICdBbmdyaWZmZSBwcm8gUnVuZGV8QW5ncmlmZmV8UHJvIFJ1bmRlJyArXG4gICAgICAnKShcXFxccyo6KT9cXFxccysoPzxhdHRhY2tzUGVyUm91bmQ+JyArXG4gICAgICBrZXlzLmRlLmF0dGFja3NQZXJSb3VuZE5vbmUgK1xuICAgICAgJ3xcXFxcZCsoPyFkKSlbLFxcXFxzXFxuXSonLFxuICAgIHNhbkxvc3M6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ1N0YWJpbGl0w6R0c3Zlcmx1c3QnICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKyg/PHNhbkxvc3M+JyArXG4gICAgICBrZXlzLmRlLnNhbkxvc3NOb25lICtcbiAgICAgICd8XFxcXGRbRFddP1srXFxcXGRdKlxcXFwvXFxcXGRbRFddP1srXFxcXGRdKilbLFxcXFxzXFxuXSonLFxuICAgIHdlYXBvbjpcbiAgICAgICcoXnxcXFxcbikoPzxuYW1lPlsuXFxcXHQgJyArXG4gICAgICBuYW1lQ2hhcmFjdGVycyArXG4gICAgICAnXSspKFxcXFwqKiw/XFxcXHMrfFxcXFwqKSg/OlxcXFwofCg/PHBlcmNlbnRhZ2U+XFxcXGQrKSUsPyg/OlxcXFxzKlxcXFwoXFxcXGQrXFxcXC9cXFxcZCtcXFxcKVxcXFxzKiw/KT8pPyhcXFxccyonICtcbiAgICAgICdTY2hhZGVuJyArXG4gICAgICAnKT9cXFxccysoPzxkYW1hZ2U+KDo/KDo/XFxcXGQrd3xkKT9cXFxcZCsoXFxcXHMqL1xcXFxzKnxcXFxccypbKy1dXFxcXHMqKD86JyArXG4gICAgICBrZXlzLmRlLmZ1bGxkYiArXG4gICAgICAnfCcgK1xuICAgICAga2V5cy5kZS5oYWxmZGIgK1xuICAgICAgJylcXFxccyp8XFxcXHMqWystXVxcXFxzKig6P1xcXFxkK2R8dyk/XFxcXGQrKSopKylcXFxcKT8nLFxuICAgIHdlYXBvbkRvZGdlOlxuICAgICAgJyg/PG5hbWU+JyArXG4gICAgICAnQXVzd2VpY2hlbicgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMrXFxcXCg/KD88cGVyY2VudGFnZT5cXFxcZCspXFxcXCk/XFxcXHMqJSg/OlxcXFxzKlxcXFwoXFxcXGQrXFxcXC9cXFxcZCtcXFxcKSk/JyxcbiAgICAvLyBTa2lsbCBzaG91bGQgbm90IGJlIG5hbWVkIFwiVGhlIHBsYXllciBoYXNcIiAvIFwiYnV0IHRoZXkgcmVnZW5lcmF0ZVwiIHJlcXVpcmVkIGZvciBcIkEgQ29sZCBGaXJlIFdpdGhpblwiXG4gICAgc2tpbGw6XG4gICAgICAnXig/PG5hbWU+WzpcXFxcKi5cXFxccycgK1xuICAgICAgbmFtZUNoYXJhY3RlcnMgK1xuICAgICAgJ10rKD88IScgK1xuICAgICAgJ1RoZSBwbGF5ZXIgaGFzfGJ1dCB0aGV5IHJlZ2VuZXJhdGUnICtcbiAgICAgICcpKVxcXFxzK1xcXFwoPyg/PHBlcmNlbnRhZ2U+XFxcXGQrKVteZF0lP1xcXFwpPyhcXFxccypcXFxcKFxcXFxkKy9cXFxcZCtcXFxcKSk/W1xcXFwuLDtdP1xcXFxzKicsXG4gICAgZ3Vlc3NTdGFydENvbWJhdDpcbiAgICAgICcoXnwoPzwhLClcXG4pKCcgK1xuICAgICAgJ0FuZ3JpZmZlfEhhbmRnZW1lbmdlfE5haGthbXBmfEZhdXN0ZmV1ZXJ3YWZmZXxCZWnDn2VuJyArXG4gICAgICAnKScsXG4gICAgbmFtZTogJ14oPzxuYW1lPltcXFxcLlxcXFxzJyArIG5hbWVDaGFyYWN0ZXJzICsgJ10rKVssXFxcXHNcXG5dKycsXG4gICAgc2VjdGlvbnM6XG4gICAgICAnKCcgK1xuICAgICAga2V5cy5kZS5zZWN0aW9uQ29tYmF0cyArXG4gICAgICAnfCcgK1xuICAgICAga2V5cy5kZS5zZWN0aW9uU2tpbGxzICtcbiAgICAgICd8JyArXG4gICAgICBrZXlzLmRlLnNlY3Rpb25MYW5nYXVnZXMgK1xuICAgICAgJ3wnICtcbiAgICAgIGtleXMuZGUuc2VjdGlvblNwZWxscyArXG4gICAgICAnKSdcbiAgfSxcbiAgcGw6IHtcbiAgICBhZ2U6ICcoPzxhZ2U+XFxcXGQrKScgKyAnXFxcXHMrKD86JyArICdsYXRhfGxhdHxyb2snICsgJylbLFxcXFxzXSonLFxuICAgIG9jY3VwYXRpb246ICdbLFxcXFxzXSonICsgJ1phd8OzZCcgKyAnKFxcXFxzKjopP1xcXFxzKyg/PG9jY3VwYXRpb24+LispWyxcXFxcc1xcbl0qJyxcbiAgICBzdHI6ICcoPzwhW2Etel0pJyArICdTJyArICcoXFxcXHMqOik/XFxcXHMqKD88c3RyPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgY29uOiAnKD88IVthLXpdKScgKyAnS09OJyArICcoXFxcXHMqOik/XFxcXHMqKD88Y29uPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgc2l6OiAnKD88IVthLXpdKScgKyAnQkMnICsgJyhcXFxccyo6KT9cXFxccyooPzxzaXo+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBpbnQ6ICcoPzwhW2Etel0pJyArICdJTlQnICsgJyhcXFxccyo6KT9cXFxccyooPzxpbnQ+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBwb3c6ICcoPzwhW2Etel0pJyArICdNT0MnICsgJyhcXFxccyo6KT9cXFxccyooPzxwb3c+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBkZXg6ICcoPzwhW2Etel0pJyArICdaUicgKyAnKFxcXFxzKjopP1xcXFxzKig/PGRleD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGFwcDogJyg/PCFbYS16XSknICsgJ1dZRycgKyAnKFxcXFxzKjopP1xcXFxzKig/PGFwcD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGVkdTogJyg/PCFbYS16XSknICsgJ1dZSycgKyAnKFxcXFxzKjopP1xcXFxzKig/PGVkdT5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIHNhbjpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICAnUHxQb2N6eXRhbG5vxZvEhycgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMqKD88c2FuPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgaHA6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ1BXfFB1bmt0eSBXeXRyenltYcWCb8WbY2knICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKig/PGhwPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgbXA6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ1BNfFB1bmt0eSBNYWdpaScgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMqKD88bXA+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBkYjpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICBrZXlzLnBsLmZ1bGxkYiArXG4gICAgICAnKShcXFxccyo6KT9cXFxccysoPzxkYj5bKy1dP1xcXFxkKyg/OmRcXFxcZCt8RHxLXFxcXGQrKT98JyArXG4gICAgICBrZXlzLnBsLmRiTm9uZSArXG4gICAgICAnKVssXFxcXHNcXG5dKicsXG4gICAgYnVpbGQ6ICcoPzwhW2Etel0pJyArICdLcnplcGEnICsgJyhcXFxccyo6KT9cXFxccysoPzxidWlsZD5bKy1dP1xcXFxkKylbLFxcXFxzXFxuXSonLFxuICAgIGFybW9yOlxuICAgICAgJyg/PCFbYS16XSknICtcbiAgICAgICdQYW5jZXJ6JyArXG4gICAgICAnKFxcXFxzKjopP1xcXFxzKyg/PGFybW9yPicgK1xuICAgICAga2V5cy5wbC5hcm1vck5vbmUgK1xuICAgICAgJ3xcXFxcZCspWyxcXFxcc1xcbl0qJyxcbiAgICBtb3Y6ICcoPzwhW2Etel0pJyArICdSdWNoJyArICcoXFxcXHMqOik/XFxcXHMqKD88bW92PlxcXFxkKylbLFxcXFxzXFxuXSonLFxuICAgIGxjazogJyg/PCFbYS16XSknICsgJ1N6Y3rEmcWbY2llJyArICcoXFxcXHMqOik/XFxcXHMrKD88bGNrPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgYXR0YWNrc1BlclJvdW5kOlxuICAgICAgJyg/PCFbYS16XSkoPzonICtcbiAgICAgICdBdGFraSB3IHJ1bmR6aWV8IyBBdGFraScgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMrKD88YXR0YWNrc1BlclJvdW5kPicgK1xuICAgICAga2V5cy5wbC5hdHRhY2tzUGVyUm91bmROb25lICtcbiAgICAgICd8XFxcXGQrKD8hZCkpWyxcXFxcc1xcbl0qJyxcbiAgICBzYW5Mb3NzOlxuICAgICAgJyg/PCFbYS16XSkoPzonICtcbiAgICAgICdVdHJhdGEgUG9jenl0YWxub8WbY2l8dXRyYXRhIFAnICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKyg/PHNhbkxvc3M+JyArXG4gICAgICBrZXlzLnBsLnNhbkxvc3NOb25lICtcbiAgICAgICd8XFxcXGRbREtdP1srXFxcXGRdKlxcXFwvXFxcXGRbREtdP1srXFxcXGRdKilbLFxcXFxzXFxuXSonLFxuICAgIHdlYXBvbjpcbiAgICAgICcoXnxcXFxcbikoPzxuYW1lPlsuXFxcXHQgJyArXG4gICAgICBuYW1lQ2hhcmFjdGVycyArXG4gICAgICAnXSspKFxcXFwqKiw/XFxcXHMrfFxcXFwqKSg/OlxcXFwofCg/PHBlcmNlbnRhZ2U+XFxcXGQrKSUsPyg/OlxcXFxzKlxcXFwoXFxcXGQrXFxcXC9cXFxcZCtcXFxcKVxcXFxzKiw/KT8pPyhcXFxccyonICtcbiAgICAgICdvYnJhxbxlbmlhJyArXG4gICAgICAnKT9cXFxccysoPzxkYW1hZ2U+KDo/KDo/XFxcXGQra3xkKT9cXFxcZCsoXFxcXHMqL1xcXFxzKnxcXFxccypbKy1dXFxcXHMqKD86JyArXG4gICAgICBrZXlzLnBsLmZ1bGxkYiArXG4gICAgICAnfCcgK1xuICAgICAga2V5cy5wbC5oYWxmZGIgK1xuICAgICAgJylcXFxccyp8XFxcXHMqWystXVxcXFxzKig6P1xcXFxkK2QpP1xcXFxkKykqKSspXFxcXCk/JyxcbiAgICB3ZWFwb25Eb2RnZTpcbiAgICAgICcoPzxuYW1lPicgK1xuICAgICAgJ1VuaWsnICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzK1xcXFwoPyg/PHBlcmNlbnRhZ2U+XFxcXGQrKVxcXFwpP1xcXFxzKiUoPzpcXFxccypcXFxcKFxcXFxkK1xcXFwvXFxcXGQrXFxcXCkpPycsXG4gICAgLy8gU2tpbGwgc2hvdWxkIG5vdCBiZSBuYW1lZCBcIlRoZSBwbGF5ZXIgaGFzXCIgLyBcImJ1dCB0aGV5IHJlZ2VuZXJhdGVcIiByZXF1aXJlZCBmb3IgXCJBIENvbGQgRmlyZSBXaXRoaW5cIlxuICAgIHNraWxsOlxuICAgICAgJ14oPzxuYW1lPls6XFxcXCouXFxcXHMnICtcbiAgICAgIG5hbWVDaGFyYWN0ZXJzICtcbiAgICAgICddKyg/PCEnICtcbiAgICAgICdUaGUgcGxheWVyIGhhc3xidXQgdGhleSByZWdlbmVyYXRlJyArXG4gICAgICAnKSlcXFxccytcXFxcKD8oPzxwZXJjZW50YWdlPlxcXFxkKylbXmRdJT9cXFxcKT8oXFxcXHMqXFxcXChcXFxcZCsvXFxcXGQrXFxcXCkpP1tcXFxcLixdP1xcXFxzKicsXG4gICAgZ3Vlc3NTdGFydENvbWJhdDpcbiAgICAgICcoXnwoPzwhLClcXG4pKCcgKyAnV2Fsa2F8QnJvxYQgUGFsbmF8QmlqYXR5a2F8VWdyeXppZW5pZScgKyAnKScsXG4gICAgbmFtZTogJ14oPzxuYW1lPltcXFxcLlxcXFxzJyArIG5hbWVDaGFyYWN0ZXJzICsgJ10rKVssXFxcXHNcXG5dKycsXG4gICAgc2VjdGlvbnM6XG4gICAgICAnKCcgK1xuICAgICAga2V5cy5wbC5zZWN0aW9uQ29tYmF0cyArXG4gICAgICAnfCcgK1xuICAgICAga2V5cy5wbC5zZWN0aW9uU2tpbGxzICtcbiAgICAgICd8JyArXG4gICAgICBrZXlzLnBsLnNlY3Rpb25MYW5nYXVnZXMgK1xuICAgICAgJ3wnICtcbiAgICAgIGtleXMucGwuc2VjdGlvblNwZWxscyArXG4gICAgICAnKSdcbiAgfSxcbiAgZnI6IHtcbiAgICBhZ2U6ICcoPzxhZ2U+XFxcXGQrKVxcXFxzKicgKyAnYW5zJyArICcoPyFbYS16XSlbLFxcXFxzXSonLFxuICAgIG9jY3VwYXRpb246XG4gICAgICAnWyxcXFxcc10qJyArICdPY2N1cGF0aW9uJyArICcoXFxcXHMqOik/XFxcXHMrKD88b2NjdXBhdGlvbj4uKylbLFxcXFxzXFxuXSonLFxuICAgIHN0cjogJyg/PCFbYS16XSknICsgJ0ZPUicgKyAnKFxcXFxzKjopP1xcXFxzKig/PHN0cj5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGNvbjogJyg/PCFbYS16XSknICsgJ0NPTicgKyAnKFxcXFxzKjopP1xcXFxzKig/PGNvbj5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIHNpejogJyg/PCFbYS16XSknICsgJ1RBSScgKyAnKFxcXFxzKjopP1xcXFxzKig/PHNpej5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGludDogJyg/PCFbYS16XSknICsgJ0lOVCcgKyAnKFxcXFxzKjopP1xcXFxzKig/PGludD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIHBvdzogJyg/PCFbYS16XSknICsgJ1BPVScgKyAnKFxcXFxzKjopP1xcXFxzKig/PHBvdz5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGRleDogJyg/PCFbYS16XSknICsgJ0RFWCcgKyAnKFxcXFxzKjopP1xcXFxzKig/PGRleD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGFwcDogJyg/PCFbYS16XSknICsgJ0FQUCcgKyAnKFxcXFxzKjopP1xcXFxzKig/PGFwcD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGVkdTogJyg/PCFbYS16XSknICsgJ8OJRFUnICsgJyhcXFxccyo6KT9cXFxccyooPzxlZHU+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBzYW46XG4gICAgICAnKD88IShbYS16XXxkZVxcXFxzKSkoPzonICtcbiAgICAgICdTQU58U2FudMOpIE1lbnRhbGUnICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKig/PHNhbj5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGhwOlxuICAgICAgJyg/PCFbYS16XSkoPzonICtcbiAgICAgICdQVnxQb2ludHMgZGUgdmllJyArXG4gICAgICAnKShcXFxccyo6KT9cXFxccyooPzxocD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIG1wOlxuICAgICAgJyg/PCFbYS16XSkoPzonICtcbiAgICAgICdQTXxQb2ludHMgZGUgbWFnaWUnICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKig/PG1wPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgZGI6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAga2V5cy5mci5mdWxsZGIgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMrKD88ZGI+WystXT9cXFxcZCsoPzpkXFxcXGQrfERcXFxcZCspP3wnICtcbiAgICAgIGtleXMuZnIuZGJOb25lICtcbiAgICAgICcpWyxcXFxcc1xcbl0qJyxcbiAgICBidWlsZDpcbiAgICAgICcoPzwhW2Etel0pJyArICdDYXJydXJlJyArICcoXFxcXHMqOik/XFxcXHMrKD88YnVpbGQ+WystXT9cXFxcZCspWyxcXFxcc1xcbl0qJyxcbiAgICBhcm1vcjpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICAnQXJtdXJlfFByb3RlY3Rpb24nICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKyg/PGFybW9yPicgK1xuICAgICAga2V5cy5mci5hcm1vck5vbmUgK1xuICAgICAgJ3xcXFxcZCspWyxcXFxcc1xcbl0qJyxcbiAgICBtb3Y6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ012dHxNb3V2ZW1lbnR8RMOpcGxhY2VtZW50JyArXG4gICAgICAnKShcXFxccyo6KT9cXFxccyooPzxtb3Y+XFxcXGQrKVssXFxcXHNcXG5dKicsXG4gICAgbGNrOiAnKD88IVthLXpdKScgKyAnQ2hhbmNlJyArICcoXFxcXHMqOik/XFxcXHMrKD88bGNrPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgYXR0YWNrc1BlclJvdW5kOlxuICAgICAgJyg/PCFbYS16XSkoPzonICtcbiAgICAgICdBdHRhcXVlcyBwYXIgcm91bmQnICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKyg/PGF0dGFja3NQZXJSb3VuZD4nICtcbiAgICAgIGtleXMuZnIuYXR0YWNrc1BlclJvdW5kTm9uZSArXG4gICAgICAnfFxcXFxkKyg/IWQpKVssXFxcXHNcXG5dKicsXG4gICAgc2FuTG9zczpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICAnUGVydGUgZGUgU2FudMOpIG1lbnRhbGV8UGVydGUgZGUgU0FOJyArXG4gICAgICAnKShcXFxccyo6KT9cXFxccysoPzxzYW5Mb3NzPicgK1xuICAgICAga2V5cy5mci5zYW5Mb3NzTm9uZSArXG4gICAgICAnfFxcXFxkRD9bK1xcXFxkXSpcXFxcL1xcXFxkRD9bK1xcXFxkXSopWyxcXFxcc1xcbl0qJyxcbiAgICB3ZWFwb246XG4gICAgICAnKF58XFxcXG4pKD88bmFtZT5bLlxcXFx0ICcgK1xuICAgICAgbmFtZUNoYXJhY3RlcnMgK1xuICAgICAgJ10rKShcXFxcKiosP1xcXFxzK3xcXFxcKikoPzpcXFxcKHwoPzxwZXJjZW50YWdlPlxcXFxkKyklLD8oPzpcXFxccypcXFxcKFxcXFxkK1xcXFwvXFxcXGQrXFxcXClcXFxccyosPyk/KT8oXFxcXHMqKD86JyArXG4gICAgICAnZG9tbWFnZXxkw6lnw6J0cycgK1xuICAgICAgJykpP1xcXFxzKyg/PGRhbWFnZT4oOj8oOj9cXFxcZCtkKT9cXFxcZCsoXFxcXHMqL1xcXFxzKnxcXFxccypbKy1dXFxcXHMqKD86JyArXG4gICAgICBrZXlzLmZyLmZ1bGxkYiArXG4gICAgICAnfCcgK1xuICAgICAga2V5cy5mci5oYWxmZGIgK1xuICAgICAgJylcXFxccyp8XFxcXHMqWystXVxcXFxzKig6P1xcXFxkK2QpP1xcXFxkKykqKSspXFxcXCk/JyxcbiAgICB3ZWFwb25Eb2RnZTpcbiAgICAgICcoPzxuYW1lPicgK1xuICAgICAgJ0VzcXVpdmVyPycgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMrXFxcXCg/KD88cGVyY2VudGFnZT5cXFxcZCspXFxcXCk/XFxcXHMqJSg/OlxcXFxzKlxcXFwoXFxcXGQrXFxcXC9cXFxcZCtcXFxcKSk/JyxcbiAgICBza2lsbDpcbiAgICAgICdeKD88bmFtZT5bOlxcXFwqLlxcXFxzJyArXG4gICAgICBuYW1lQ2hhcmFjdGVycyArXG4gICAgICAnXSsoPzwhJyArXG4gICAgICAnVGhlIHBsYXllciBoYXN8YnV0IHRoZXkgcmVnZW5lcmF0ZScgK1xuICAgICAgJykpXFxcXHMrXFxcXCg/KD88cGVyY2VudGFnZT5cXFxcZCspW15kXSU/XFxcXCk/KFxcXFxzKlxcXFwoXFxcXGQrL1xcXFxkK1xcXFwpKT9bXFxcXC4sXT9cXFxccyonLFxuICAgIGd1ZXNzU3RhcnRDb21iYXQ6XG4gICAgICAnKF58KD88ISwpXFxuKSgnICsgJ0F1IGNvbnRhY3R8w4AgZGlzdGFuY2V8Q29tYmF0IHJhcHByb2Now6l8Qml0ZScgKyAnKScsXG4gICAgbmFtZTogJ14oPzxuYW1lPltcXFxcLlxcXFxzJyArIG5hbWVDaGFyYWN0ZXJzICsgJ10rKVssXFxcXHNcXG5dKycsXG4gICAgc2VjdGlvbnM6XG4gICAgICAnKCcgK1xuICAgICAga2V5cy5mci5zZWN0aW9uQ29tYmF0cyArXG4gICAgICAnfCcgK1xuICAgICAga2V5cy5mci5zZWN0aW9uU2tpbGxzICtcbiAgICAgICd8JyArXG4gICAgICBrZXlzLmZyLnNlY3Rpb25MYW5nYXVnZXMgK1xuICAgICAgJ3wnICtcbiAgICAgIGtleXMuZnIuc2VjdGlvblNwZWxscyArXG4gICAgICAnKSdcbiAgfSxcbiAgZXM6IHtcbiAgICBhZ2U6ICcoPzxhZ2U+XFxcXGQrKVxcXFxzKicgKyAnYVvDscORXW9zJyArICcoPyFbYS16XSlbLFxcXFxzXSonLFxuICAgIG9jY3VwYXRpb246XG4gICAgICAnWyxcXFxcc10qJyArICdPY3VwYWNpw7NuJyArICcoXFxcXHMqOik/XFxcXHMrKD88b2NjdXBhdGlvbj4uKylbLFxcXFxzXFxuXSonLFxuICAgIHN0cjogJyg/PCFbYS16XSknICsgJ0ZVRScgKyAnKFxcXFxzKjopP1xcXFxzKig/PHN0cj5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGNvbjogJyg/PCFbYS16XSknICsgJ0NPTicgKyAnKFxcXFxzKjopP1xcXFxzKig/PGNvbj5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIHNpejogJyg/PCFbYS16XSknICsgJ1RBTScgKyAnKFxcXFxzKjopP1xcXFxzKig/PHNpej5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGludDogJyg/PCFbYS16XSknICsgJ0lOVCcgKyAnKFxcXFxzKjopP1xcXFxzKig/PGludD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIHBvdzogJyg/PCFbYS16XSknICsgJ1BPRCcgKyAnKFxcXFxzKjopP1xcXFxzKig/PHBvdz5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGRleDogJyg/PCFbYS16XSknICsgJ0RFUycgKyAnKFxcXFxzKjopP1xcXFxzKig/PGRleD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGFwcDogJyg/PCFbYS16XSknICsgJ0FQQScgKyAnKFxcXFxzKjopP1xcXFxzKig/PGFwcD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGVkdTogJyg/PCFbYS16XSknICsgJ0VEVScgKyAnKFxcXFxzKjopP1xcXFxzKig/PGVkdT5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIHNhbjpcbiAgICAgICcoPzwhW2Etel0pKD86JyArICdDT1J8Q29yZHVyYScgKyAnKShcXFxccyo6KT9cXFxccyooPzxzYW4+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBocDpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICAnUFZ8UHVudG9zIGRlIHZpZGF8UFxcXFwuID9WXFxcXC4nICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKyg/PGhwPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgbXA6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ1BNfFB1bnRvcyBNw6FnaWNvc3xQdW50b3MgZGUgTWFnaWEnICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKyg/PG1wPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgZGI6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAga2V5cy5lcy5mdWxsZGIgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMrKD88ZGI+WystXT9cXFxcZCsoPzpkXFxcXGQrfERcXFxcZCspP3wnICtcbiAgICAgIGtleXMuZXMuZGJOb25lICtcbiAgICAgICcpWyxcXFxcc1xcbl0qJyxcbiAgICBidWlsZDpcbiAgICAgICcoPzwhW2Etel0pJyArICdDb3JwdWxlbmNpYScgKyAnKFxcXFxzKjopP1xcXFxzKyg/PGJ1aWxkPlsrLV0/XFxcXGQrKVssXFxcXHNcXG5dKicsXG4gICAgYXJtb3I6XG4gICAgICAnKD88IVthLXpdKScgK1xuICAgICAgJ0FybWFkdXJhJyArXG4gICAgICAnKFxcXFxzKjopP1xcXFxzKyg/PGFybW9yPicgK1xuICAgICAga2V5cy5lcy5hcm1vck5vbmUgK1xuICAgICAgJ3xcXFxcZCspWyxcXFxcc1xcbl0qJyxcbiAgICBtb3Y6ICcoPzwhW2Etel0pJyArICdNb3ZpbWllbnRvJyArICcoXFxcXHMqOik/XFxcXHMqKD88bW92PlxcXFxkKylbLFxcXFxzXFxuXSonLFxuICAgIGxjazogJyg/PCFbYS16XSknICsgJ1N1ZXJ0ZScgKyAnKFxcXFxzKjopP1xcXFxzKyg/PGxjaz5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGF0dGFja3NQZXJSb3VuZDpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICAnTsO6bWVybyBkZSBBdGFxdWVzJyArXG4gICAgICAnKShcXFxccyo6KT9cXFxccysoPzxhdHRhY2tzUGVyUm91bmQ+JyArXG4gICAgICBrZXlzLmVzLmF0dGFja3NQZXJSb3VuZE5vbmUgK1xuICAgICAgJ3xcXFxcZCsoPyFkKSlbLFxcXFxzXFxuXSonLFxuICAgIHNhbkxvc3M6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ1DDqXJkaWRhIGRlIGNvcmR1cmF8UMOpcmRpZGEgZGUgQ09SJyArXG4gICAgICAnKShcXFxccyo6KT9cXFxccysoPzxzYW5Mb3NzPicgK1xuICAgICAga2V5cy5lcy5zYW5Mb3NzTm9uZSArXG4gICAgICAnfFxcXFxkRD9bK1xcXFxkXSpcXFxcL1xcXFxkRD9bK1xcXFxkXSopWyxcXFxcc1xcbl0qJyxcbiAgICB3ZWFwb246XG4gICAgICAnKF58XFxcXG4pKD88bmFtZT5bLlxcXFx0ICcgK1xuICAgICAgbmFtZUNoYXJhY3RlcnMgK1xuICAgICAgJ10rKShcXFxcKiosP1xcXFxzK3xcXFxcKikoPzpcXFxcKHwoPzxwZXJjZW50YWdlPlxcXFxkKyklLD8oPzpcXFxccypcXFxcKFxcXFxkK1xcXFwvXFxcXGQrXFxcXClcXFxccyosPyk/KT8oXFxcXHMqJyArXG4gICAgICAnZGHDsW8nICtcbiAgICAgICcpP1xcXFxzKyg/PGRhbWFnZT4oOj8oOj9cXFxcZCtkKT9cXFxcZCsoXFxcXHMqL1xcXFxzKnxcXFxccypbKy1dXFxcXHMqKD86JyArXG4gICAgICBrZXlzLmVzLmZ1bGxkYiArXG4gICAgICAnfCcgK1xuICAgICAga2V5cy5lcy5oYWxmZGIgK1xuICAgICAgJylcXFxccyp8XFxcXHMqWystXVxcXFxzKig6P1xcXFxkK2QpP1xcXFxkKykqKSspXFxcXCk/JyxcbiAgICB3ZWFwb25Eb2RnZTpcbiAgICAgICcoPzxuYW1lPicgK1xuICAgICAgJ0VzcXVpdmFyJyArXG4gICAgICAnKShcXFxccyo6KT9cXFxccytcXFxcKD8oPzxwZXJjZW50YWdlPlxcXFxkKylcXFxcKT9cXFxccyolKD86XFxcXHMqXFxcXChcXFxcZCtcXFxcL1xcXFxkK1xcXFwpKT8nLFxuICAgIHNraWxsOlxuICAgICAgJ14oPzxuYW1lPls6XFxcXCouXFxcXHMnICtcbiAgICAgIG5hbWVDaGFyYWN0ZXJzICtcbiAgICAgICddKyg/PCEnICtcbiAgICAgICdUaGUgcGxheWVyIGhhc3xidXQgdGhleSByZWdlbmVyYXRlJyArXG4gICAgICAnKSlcXFxccytcXFxcKD8oPzxwZXJjZW50YWdlPlxcXFxkKylbXmRdJT9cXFxcKT8oXFxcXHMqXFxcXChcXFxcZCsvXFxcXGQrXFxcXCkpP1tcXFxcLixdP1xcXFxzKicsXG4gICAgZ3Vlc3NTdGFydENvbWJhdDpcbiAgICAgICcoXnwoPzwhLClcXG4pKCcgKyAnQ29tYmF0aXJ8QXJtYXMgZGUgZnVlZ298UGVsZWF8TW9yZGlzY28nICsgJyknLFxuICAgIG5hbWU6ICdeKD88bmFtZT5bXFxcXC5cXFxccycgKyBuYW1lQ2hhcmFjdGVycyArICddKylbLFxcXFxzXFxuXSsnLFxuICAgIHNlY3Rpb25zOlxuICAgICAgJygnICtcbiAgICAgIGtleXMuZXMuc2VjdGlvbkNvbWJhdHMgK1xuICAgICAgJ3wnICtcbiAgICAgIGtleXMuZXMuc2VjdGlvblNraWxscyArXG4gICAgICAnfCcgK1xuICAgICAga2V5cy5lcy5zZWN0aW9uTGFuZ2F1Z2VzICtcbiAgICAgICd8JyArXG4gICAgICBrZXlzLmVzLnNlY3Rpb25TcGVsbHMgK1xuICAgICAgJyknXG4gIH0sXG4gICd6aC1UVyc6IHtcbiAgICBhZ2U6ICcoPzwhW2Etel0pJyArICdhZ2V85bm06b2hJyArICcoXFxcXHMqOik/XFxcXHMqKD88YWdlPlxcXFxkKylbLFxcXFxzXSonLFxuICAgIC8qIE5FVyBLRVkgQkVMT1cgLSBUUkFOU0xBVElPTiBSRVFVSVJFRCAqL1xuICAgIG9jY3VwYXRpb246XG4gICAgICAnWyxcXFxcc10qJyArICdPY2N1cGF0aW9uJyArICcoXFxcXHMqOik/XFxcXHMrKD88b2NjdXBhdGlvbj4uKylbLFxcXFxzXFxuXSonLFxuICAgIHN0cjogJyg/PCFbYS16XSknICsgJ1NUUnzlipvph48nICsgJyhcXFxccyo6KT9cXFxccyooPzxzdHI+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBjb246ICcoPzwhW2Etel0pJyArICdDT0586auU6LOqJyArICcoXFxcXHMqOik/XFxcXHMqKD88Y29uPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgc2l6OiAnKD88IVthLXpdKScgKyAnU0lafOmrlOWeiycgKyAnKFxcXFxzKjopP1xcXFxzKig/PHNpej5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGludDogJyg/PCFbYS16XSknICsgJ0lOVHzmmbrlipsnICsgJyhcXFxccyo6KT9cXFxccyooPzxpbnQ+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBwb3c6ICcoPzwhW2Etel0pJyArICdQT1d85oSP5b+XJyArICcoXFxcXHMqOik/XFxcXHMqKD88cG93PlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgZGV4OiAnKD88IVthLXpdKScgKyAnREVYfOaVj+aNtycgKyAnKFxcXFxzKjopP1xcXFxzKig/PGRleD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIGFwcDogJyg/PCFbYS16XSknICsgJ0FQUHzlpJboso4nICsgJyhcXFxccyo6KT9cXFxccyooPzxhcHA+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBlZHU6ICcoPzwhW2Etel0pJyArICdFRFV85pWZ6IKyJyArICcoXFxcXHMqOik/XFxcXHMqKD88ZWR1PlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgc2FuOlxuICAgICAgJyg/PCFbYS16XSkoPzonICtcbiAgICAgICdTQU58U2FuaXR5fOeQhuaZuicgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMqKD88c2FuPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgaHA6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ0hQfEhpdCBwb2ludHN855Sf5ZG9JyArXG4gICAgICAnKShcXFxccyo6KT9cXFxccyooPzxocD5cXFxcZCt8LSlbLFxcXFxzXFxuXSonLFxuICAgIG1wOlxuICAgICAgJyg/PCFbYS16XSkoPzonICtcbiAgICAgICdNUHxNYWdpYyBwb2ludHMnICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKig/PG1wPlxcXFxkK3wtKVssXFxcXHNcXG5dKicsXG4gICAgZGI6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAga2V5c1snemgtVFcnXS5mdWxsZGIgK1xuICAgICAgJykoXFxcXHMqOik/XFxcXHMqKD88ZGI+WystXT9cXFxcZCsoPzpkXFxcXGQrfERcXFxcZCspP3wnICtcbiAgICAgIGtleXNbJ3poLVRXJ10uZGJOb25lICtcbiAgICAgICcpWyxcXFxcc1xcbl0qJyxcbiAgICBidWlsZDpcbiAgICAgICcoPzwhW2Etel0pJyArICdCdWlsZHzpq5TmoLwnICsgJyhcXFxccyo6KT9cXFxccyooPzxidWlsZD5bKy1dP1xcXFxkKylbLFxcXFxzXFxuXSonLFxuICAgIGFybW9yOlxuICAgICAgJyg/PCFbYS16XSknICtcbiAgICAgICdBcm1vcnzorbfnlLInICtcbiAgICAgICcoXFxcXHMqOik/XFxcXHMqKD88YXJtb3I+JyArXG4gICAgICBrZXlzWyd6aC1UVyddLmFybW9yTm9uZSArXG4gICAgICAnfFxcXFxkKylbLFxcXFxzXFxuXSonLFxuICAgIG1vdjogJyg/PCFbYS16XSknICsgJ01vdmUnICsgJyhcXFxccyo6KT9cXFxccyooPzxtb3Y+XFxcXGQrKVssXFxcXHNcXG5dKicsXG4gICAgbGNrOiAnKD88IVthLXpdKScgKyAnTHVja3zlubjpgYsnICsgJyhcXFxccyo6KT9cXFxccyooPzxsY2s+XFxcXGQrfC0pWyxcXFxcc1xcbl0qJyxcbiAgICBhdHRhY2tzUGVyUm91bmQ6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJ0F0dGFja3MgcGVyIHJvdW5kfCMgQXR0YWNrc3zmlLvmk4rmrKHmlbh8IyDmlLvmk4onICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzKig/PGF0dGFja3NQZXJSb3VuZD4nICtcbiAgICAgIGtleXNbJ3poLVRXJ10uYXR0YWNrc1BlclJvdW5kTm9uZSArXG4gICAgICAnfFxcXFxkKyg/IWQpKVssXFxcXHNcXG5dKicsXG4gICAgc2FuTG9zczpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICAnU2FuaXR5IGxvc3N8U0FOIGxvc3N855CG5pm65Zaq5aSxfFNBTuWAvOaQjeWksXxTQU7lgLzllqrlpLF85omjU0FOJyArXG4gICAgICAnKShcXFxccyo6KT9cXFxccyooPzxzYW5Mb3NzPicgK1xuICAgICAga2V5c1snemgtVFcnXS5zYW5Mb3NzTm9uZSArXG4gICAgICAnfFxcXFxkRD9bK1xcXFxkXSpcXFxcL1xcXFxkRD9bK1xcXFxkXSopWyxcXFxcc1xcbl0qJyxcbiAgICB3ZWFwb246XG4gICAgICAnKF58XFxcXG4pKD88bmFtZT5bLlxcXFx0ICcgK1xuICAgICAgbmFtZUNoYXJhY3RlcnMgK1xuICAgICAgJ10rKShcXFxcKiosP1xcXFxzK3xcXFxcKikoPzpcXFxcKHwoPzxwZXJjZW50YWdlPlxcXFxkKyklLD8oPzpcXFxccypcXFxcKFxcXFxkK1xcXFwvXFxcXGQrXFxcXClcXFxccyosPyk/KT8oXFxcXHMqKD86JyArXG4gICAgICAnZGFtYWdlfOWCt+WusycgK1xuICAgICAgJykpP1xcXFxzKyg/PGRhbWFnZT4oOj8oOj9cXFxcZCtkKT9cXFxcZCsoXFxcXHMqL1xcXFxzKnxcXFxccypbKy1dXFxcXHMqKD86JyArXG4gICAgICBrZXlzWyd6aC1UVyddLmZ1bGxkYiArXG4gICAgICAnfCcgK1xuICAgICAga2V5c1snemgtVFcnXS5oYWxmZGIgK1xuICAgICAgJylcXFxccyp8XFxcXHMqWystXVxcXFxzKig6P1xcXFxkK2QpP1xcXFxkKykqKSspXFxcXCk/JyxcbiAgICB3ZWFwb25Eb2RnZTpcbiAgICAgICcoPzxuYW1lPicgK1xuICAgICAgJ0RvZGdlfOmWg+mBv3zploPourInICtcbiAgICAgICcpKFxcXFxzKjopP1xcXFxzK1xcXFwoPyg/PHBlcmNlbnRhZ2U+XFxcXGQrKVxcXFwpP1xcXFxzKiU/KD86XFxcXHMqXFxcXChcXFxcZCtcXFxcL1xcXFxkK1xcXFwpKT8nLFxuICAgIHNraWxsOlxuICAgICAgJ14oPzxuYW1lPls6XFxcXCouXFxcXHMnICtcbiAgICAgIG5hbWVDaGFyYWN0ZXJzICtcbiAgICAgICddKyg/PCEnICtcbiAgICAgICdUaGUgcGxheWVyIGhhc3xidXQgdGhleSByZWdlbmVyYXRlJyArXG4gICAgICAnKSlcXFxccytcXFxcKD8oPzxwZXJjZW50YWdlPlxcXFxkKylbXmRdJT9cXFxcKT8oXFxcXHMqXFxcXChcXFxcZCsvXFxcXGQrXFxcXCkpP1tcXFxcLixdP1xcXFxzKicsXG4gICAgZ3Vlc3NTdGFydENvbWJhdDogJyhefCg/PCEsKVxcbikoJyArICfov5HmiLDmioDog7185bCE5pOK5oqA6IO9fEJyYXdsfEJpdGUnICsgJyknLFxuICAgIG5hbWU6ICdeKD88bmFtZT5bXFxcXC5cXFxccycgKyBuYW1lQ2hhcmFjdGVycyArICddKylbLFxcXFxzXFxuXSsnLFxuICAgIHNlY3Rpb25zOlxuICAgICAgJygnICtcbiAgICAgIGtleXNbJ3poLVRXJ10uc2VjdGlvbkNvbWJhdHMgK1xuICAgICAgJ3wnICtcbiAgICAgIGtleXNbJ3poLVRXJ10uc2VjdGlvblNraWxscyArXG4gICAgICAnfCcgK1xuICAgICAga2V5c1snemgtVFcnXS5zZWN0aW9uTGFuZ2F1Z2VzICtcbiAgICAgICd8JyArXG4gICAgICBrZXlzWyd6aC1UVyddLnNlY3Rpb25TcGVsbHMgK1xuICAgICAgJyknXG4gIH0sXG4gIGphOiB7XG4gICAgYWdlOiAnWyjvvIhdPyg/PGFnZT5cXFxcZCspJyArICcoXFxcXHMrKSooPzonICsgJ+ats3zmiY0nICsgJylbKe+8iV0/WyzjgIFcXFxcc10qJyxcbiAgICAvKiBORVcgS0VZIEJFTE9XIC0gVFJBTlNMQVRJT04gUkVRVUlSRUQgKi9cbiAgICBvY2N1cGF0aW9uOlxuICAgICAgJ1ss44CBXFxcXHNdKicgKyAnKOiBt+alrSk/JyArICcoXFxcXHMqWzrvvJpdKT9cXFxccysoPzxvY2N1cGF0aW9uPi4rKVss44CBXFxcXHNcXG5dKicsXG4gICAgc3RyOiAnKD88IVthLXpdKScgKyAnU1RSJyArICcoXFxcXHMqWzrvvJpdKT9cXFxccyooPzxzdHI+XFxcXGQrfC0pWyzjgIFcXFxcc1xcbl0qJyxcbiAgICBjb246ICcoPzwhW2Etel0pJyArICdDT04nICsgJyhcXFxccypbOu+8ml0pP1xcXFxzKig/PGNvbj5cXFxcZCt8LSlbLOOAgVxcXFxzXFxuXSonLFxuICAgIHNpejogJyg/PCFbYS16XSknICsgJ1NJWicgKyAnKFxcXFxzKls677yaXSk/XFxcXHMqKD88c2l6PlxcXFxkK3wtKVss44CBXFxcXHNcXG5dKicsXG4gICAgaW50OiAnKD88IVthLXpdKScgKyAnSU5UJyArICcoXFxcXHMqWzrvvJpdKT9cXFxccyooPzxpbnQ+XFxcXGQrfC0pWyzjgIFcXFxcc1xcbl0qJyxcbiAgICBwb3c6ICcoPzwhW2Etel0pJyArICdQT1cnICsgJyhcXFxccypbOu+8ml0pP1xcXFxzKig/PHBvdz5cXFxcZCt8LSlbLOOAgVxcXFxzXFxuXSonLFxuICAgIGRleDogJyg/PCFbYS16XSknICsgJ0RFWCcgKyAnKFxcXFxzKls677yaXSk/XFxcXHMqKD88ZGV4PlxcXFxkK3wtKVss44CBXFxcXHNcXG5dKicsXG4gICAgYXBwOiAnKD88IVthLXpdKScgKyAnQVBQJyArICcoXFxcXHMqWzrvvJpdKT9cXFxccyooPzxhcHA+XFxcXGQrfC0pWyzjgIFcXFxcc1xcbl0qJyxcbiAgICBlZHU6ICcoPzwhW2Etel0pJyArICdFRFUnICsgJyhcXFxccypbOu+8ml0pP1xcXFxzKig/PGVkdT5cXFxcZCt8LSlbLOOAgVxcXFxzXFxuXSonLFxuICAgIHNhbjpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICAnKFNBTnxTYW5pdHl85q2j5rCX5bqmKScgK1xuICAgICAgJykoXFxcXHMqWzrvvJpdKT9cXFxccyooPzxzYW4+XFxcXGQrfC0pWyzjgIFcXFxcc1xcbl0qJyxcbiAgICBocDpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICAnKEhQfEhpdCBwb2ludHN86ICQ5LmF5YqbfOODkuODg+ODiCjjg7t8772lKT/jg53jgqTjg7Pjg4gpJyArXG4gICAgICAnKShcXFxccypbOu+8ml0pP1xcXFxzKig/PGhwPlxcXFxkK3wtKVss44CBXFxcXHNcXG5dKicsXG4gICAgbXA6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJyhNUHxNYWdpYyBwb2ludHN844Oe44K444OD44KvKOODu3zvvaUpP+ODneOCpOODs+ODiCknICtcbiAgICAgICcpKFxcXFxzKls677yaXSk/XFxcXHMqKD88bXA+XFxcXGQrfC0pWyzjgIFcXFxcc1xcbl0qJyxcbiAgICBkYjpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICBrZXlzLmphLmZ1bGxkYiArXG4gICAgICAnKShcXFxccypbOu+8ml0pP1xcXFxzKig/PGRiPlsrLV0/XFxcXHMqXFxcXGQrKD86ZFxcXFxkK3xEXFxcXGQrKT98JyArXG4gICAgICBrZXlzLmphLmRiTm9uZSArXG4gICAgICAnKVss44CBXFxcXHNcXG5dKicsXG4gICAgYnVpbGQ6XG4gICAgICAnKD88IVthLXpdKScgKyAnKEJ1aWxkfOODk+ODq+ODiSknICsgJyhcXFxccypbOu+8ml0pP1xcXFxzKig/PGJ1aWxkPlsrLV0/XFxcXGQrKVss44CBXFxcXHNcXG5dKicsXG4gICAgYXJtb3I6XG4gICAgICAnKD88IVthLXpdKScgK1xuICAgICAgJyhBcm1vcnzoo4XnlLIpJyArXG4gICAgICAnKFxcXFxzKls677yaXSk/XFxcXHMqKD88YXJtb3I+JyArXG4gICAgICBrZXlzLmphLmFybW9yTm9uZSArXG4gICAgICAnfFxcXFxkKylbLOOAgVxcXFxzXFxuXSonLFxuICAgIG1vdjogJyg/PCFbYS16XSknICsgJyhNb3ZlfE1PVnznp7vli5Xnjoc/KScgKyAnKFxcXFxzKls677yaXSk/XFxcXHMqKD88bW92PlxcXFxkKylbLOOAgVxcXFxzXFxuXSonLFxuICAgIGxjazogJyg/PCFbYS16XSknICsgJyhMdWNrfOW5uOmBiyknICsgJyhcXFxccypbOu+8ml0pP1xcXFxzKig/PGxjaz5cXFxcZCt8LSlbLOOAgVxcXFxzXFxuXSonLFxuICAgIGF0dGFja3NQZXJSb3VuZDpcbiAgICAgICcoPzwhW2Etel0pKD86JyArXG4gICAgICAnKEF0dGFja3MgcGVyIHJvdW5kfCMgQXR0YWNrc3woKDF8MSB877yRKeODqeOCpuODs+ODieOBrik/5pS75pKD5Zue5pWwKScgK1xuICAgICAgJykoXFxcXHMqWzrvvJpdKT9cXFxccyooPzxhdHRhY2tzUGVyUm91bmQ+JyArXG4gICAgICBrZXlzLmphLmF0dGFja3NQZXJSb3VuZE5vbmUgK1xuICAgICAgJ3xcXFxcZCsoPyFkKSlbLOOAgVxcXFxzXFxuXSonLFxuICAgIHNhbkxvc3M6XG4gICAgICAnKD88IVthLXpdKSg/OicgK1xuICAgICAgJyhTYW5pdHkgbG9zc3xTQU4gbG9zc3zmraPmsJfluqbllqrlpLEpJyArXG4gICAgICAnKShcXFxccypbOu+8ml1cXFxcRCopP1xcXFxzKig/PHNhbkxvc3M+JyArXG4gICAgICBrZXlzLmphLnNhbkxvc3NOb25lICtcbiAgICAgICd8XFxcXGREP1srXFxcXGRdKltcXFxcL++8j11cXFxcZEQ/WytcXFxcZF0qKVss44CBXFxcXHNcXG5dKicsXG4gICAgd2VhcG9uOlxuICAgICAgJyhefFxcXFxuKSg/PG5hbWU+Wy5cXFxcdFxcXFx3ICcgK1xuICAgICAgbmFtZUNoYXJhY3RlcnMgK1xuICAgICAgJ10rKShcXFxcKipbLOOAgV0/XFxcXHMrfFxcXFwqKSg/OlxcXFwofCg/PHBlcmNlbnRhZ2U+XFxcXGQrKVsl77yFXVss44CBXT8oPzpcXFxccypbXFxcXCjvvIhdXFxcXGQrW1xcXFwv77yPXVxcXFxkK1tcXFxcKe+8iV1cXFxccypbLOOAgV0/KT8pPyhcXFxccyooPzonICtcbiAgICAgICdkYW1hZ2V844OA44Oh44O844K4JyArXG4gICAgICAnKSk/XFxcXHMqKD88ZGFtYWdlPig6P1xcXFxkK1tkRF0pP1xcXFxkKyhcXFxccyovXFxcXHMqfFxcXFxzKlsrLV1cXFxccyooPzonICtcbiAgICAgIGtleXMuamEuZnVsbGRiICtcbiAgICAgICd8JyArXG4gICAgICBrZXlzLmphLmhhbGZkYiArXG4gICAgICAnKVxcXFxzKnxcXFxccypbKy1dXFxcXHMqKDo/XFxcXGQrW2REXSk/XFxcXGQrKSopXFxcXCk/JyxcbiAgICB3ZWFwb25Eb2RnZTpcbiAgICAgICcoPzxuYW1lPicgK1xuICAgICAgJyhEb2RnZXzlm57pgb8pJyArXG4gICAgICAnKShcXFxccypbOu+8ml0pP1xcXFxzKlxcXFwoPyg/PHBlcmNlbnRhZ2U+XFxcXGQrKVxcXFwpP1xcXFxzKlsl77yFXT8oPzpcXFxccypbXFxcXCjvvIhdXFxcXGQrW1xcXFwv77yPXVxcXFxkK1tcXFxcKe+8iV0pPycsXG4gICAgc2tpbGw6XG4gICAgICAnXig/PG5hbWU+WzpcXFxcKi5cXFxccycgK1xuICAgICAgbmFtZUNoYXJhY3RlcnMgK1xuICAgICAgJ10rKD88IScgK1xuICAgICAgJ1RoZSBwbGF5ZXIgaGFzfGJ1dCB0aGV5IHJlZ2VuZXJhdGV8XFxcXGQnICtcbiAgICAgICcpKVtcXFxcczrvvJpdKlxcXFwoPyg/PHBlcmNlbnRhZ2U+XFxcXGQrKVteZF1bJe+8hV0/XFxcXCk/KFxcXFxzKltcXFxcKO+8iF1cXFxcZCtbXFxcXC/vvI9dXFxcXGQrW1xcXFwp77yJXSk/XFxcXHM/W1xcXFwuLOOAgV0/XFxcXHMqJyxcbiAgICBndWVzc1N0YXJ0Q29tYmF0OiAnKF58KD88ISwpXFxuKSgnICsgJ+i/keaOpSjmiKbpl5h85qC86ZeYKXzmoLzpl5h85pS75pKDfOe0oOaJi3zlmZvjgb/jgaTjgY185bCE5pKDfEJyYXdsfEJpdGUnICsgJyknLFxuICAgIG5hbWU6ICdeKD88bmFtZT5bXFxcXC5cXFxccycgKyBuYW1lQ2hhcmFjdGVycyArICddKylbLOOAgVxcXFxzXFxuXSsnLFxuICAgIHNlY3Rpb25zOlxuICAgICAgJygnICtcbiAgICAgIGtleXMuamEuc2VjdGlvbkNvbWJhdHMgK1xuICAgICAgJ3wnICtcbiAgICAgIGtleXMuamEuc2VjdGlvblNraWxscyArXG4gICAgICAnfCcgK1xuICAgICAga2V5cy5qYS5zZWN0aW9uTGFuZ2F1Z2VzICtcbiAgICAgICd8JyArXG4gICAgICBrZXlzLmphLnNlY3Rpb25TcGVsbHMgK1xuICAgICAgJyknXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvQzdBY3RvckltcG9ydGVyUmVnRXhwIHtcbiAgc3RhdGljIGNoZWNrTGFuZ3VhZ2UgKGxhbmcgPSBudWxsKSB7XG4gICAgaWYgKCFsYW5nKSB7XG4gICAgICBsYW5nID0gZ2FtZS5pMThuLmxhbmdcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0cmFuc2xhdGlvbnNbbGFuZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBsYW5nID0gJ2VuJ1xuICAgIH1cbiAgICByZXR1cm4gbGFuZ1xuICB9XG5cbiAgc3RhdGljIGdldEV4YW1wbGVUZXh0IChsYW5nKSB7XG4gICAgbGV0IGV4YW1wbGUgPSBrZXlzLmVuLmV4YW1wbGVcbiAgICBpZiAodHlwZW9mIGtleXNbbGFuZ10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBleGFtcGxlID0ga2V5c1tsYW5nXS5leGFtcGxlXG4gICAgfVxuICAgIHJldHVybiBleGFtcGxlXG4gIH1cblxuICBzdGF0aWMgZ2V0VHJhbnNsYXRpb25zICgpIHtcbiAgICBjb25zdCBvdXRwdXQgPSB7fVxuICAgIGZvciAoY29uc3Qga2V5IGluIGtleXMpIHtcbiAgICAgIG91dHB1dFtrZXldID0ga2V5c1trZXldLmRlc2NyaXB0aW9uXG4gICAgfVxuICAgIHJldHVybiBvdXRwdXRcbiAgfVxuXG4gIHN0YXRpYyBnZXRLZXlzIChsYW5nKSB7XG4gICAgcmV0dXJuIGtleXNbbGFuZ10gfHwga2V5cy5lblxuICB9XG5cbiAgc3RhdGljIGdldFJlZ3VsYXJFeHByZXNzaW9ucyAobGFuZykge1xuICAgIHJldHVybiB0cmFuc2xhdGlvbnNbbGFuZ10gfHwgdHJhbnNsYXRpb25zLmVuXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBBY3RvciwgQ09ORklHLCBmb3VuZHJ5LCBnYW1lLCB1aSAqL1xuaW1wb3J0IHsgQ29DN0FjdG9ySW1wb3J0ZXJSZWdFeHAgfSBmcm9tICcuL2FjdG9yLWltcG9ydGVyLXJlZ2V4cC5qcydcbmltcG9ydCB7IENvQ0FjdG9yIH0gZnJvbSAnLi4vYWN0b3JzL2FjdG9yLmpzJ1xuaW1wb3J0IHsgQ29DN0l0ZW0gfSBmcm9tICcuLi9pdGVtcy9pdGVtLmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4uL3V0aWxpdGllcy5qcydcblxuLyoqXG4gKiBDb0M3QWN0b3JJbXBvcnRlciBoZWxwZXIgY2xhc3MgdG8gaW1wb3J0IGFuIEFjdG9yIGZyb20gdGhlIHJhdyB0ZXh0IGRlc2NyaXB0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgQ29DN0FjdG9ySW1wb3J0ZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5wYXJzZWQgPSB7fVxuICAgIHRoaXMuaXRlbUxvY2F0aW9ucyA9ICcnXG4gIH1cblxuICBzdGF0aWMgZ2V0IGFzTnVtYmVyICgpIHtcbiAgICByZXR1cm4gJ24nXG4gIH1cblxuICBzdGF0aWMgZ2V0IGFzU3RyaW5nICgpIHtcbiAgICByZXR1cm4gJ3MnXG4gIH1cblxuICAvKipcbiAgICogZ2V0UmVnRXgsIGdldCBSZWdFeHAgb2JqZWN0IGlmIG5vdCBjdXJyZW50bHkgYSBSZWdFeHAgb2JqZWN0XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHJlZ2V4IFJlZ0V4cCBvciBzdHJpbmdcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1vZGlmaWVycyBpZiBzdHJpbmcgd2FzIHN1cHBsaWVkIGluIHJlZ2V4IGxpc3Qgb2YgbW9kaWZpZXJzIHRvIGFkZCB0byB0aGUgUmVnRXhwXG4gICAqIEByZXR1cm5zIHtSZWdFeHB9XG4gICAqL1xuICBnZXRSZWdFeCAocmVnZXgsIG1vZGlmaWVycyA9ICdpdScpIHtcbiAgICBpZiAocmVnZXguY29uc3RydWN0b3I/Lm5hbWUgPT09ICdSZWdFeHAnKSB7XG4gICAgICByZXR1cm4gcmVnZXhcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAocmVnZXgsIG1vZGlmaWVycylcbiAgfVxuXG4gIC8qKlxuICAgKiBjbGVhblN0cmluZywgcmVtb3ZlcyBuZXcgbGluZSBhbmQgY2FycmllciByZXR1cm4gY2hhcmFjdGVyIGFuZCBsYXRlcmFsIHNwYWNlcyBmcm9tIGEgc3RyaW5nXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzIHRoZSBzdHJpbmcgdG8gY2xlYW5cbiAgICogQHJldHVybnMge1N0cmluZ30gdGhlIGNsZWFuZWQgc3RyaW5nXG4gICAqL1xuICBjbGVhblN0cmluZyAocykge1xuICAgIGlmICh0aGlzLmtleXMuZGVzY3JpcHRpb24gPT09ICdDb0M3LkphcGFuZXNlJykge1xuICAgICAgcmV0dXJuIHNcbiAgICAgICAgLnJlcGxhY2UoLyhcXG58XFxyKS9nLCAnICcpXG4gICAgICAgIC5yZXBsYWNlKC9eXFxzKi8sICcnKVxuICAgICAgICAucmVwbGFjZSgvXFxzKlso77yIXVxccyovZywgJyAoJylcbiAgICAgICAgLnJlcGxhY2UoL1xccypbKe+8iV1cXHMqL2csICcpJylcbiAgICAgICAgLnJlcGxhY2UoL1xccypbLuOAgl0/XFxzKlsu44CCXT8kLywgJycpXG4gICAgICAgIC5yZXBsYWNlKC9eW+OAiOOAil0vLCAnJylcbiAgICAgICAgLnJlcGxhY2UoL1vjgInjgItdJC8sICcnKVxuICAgIH1cbiAgICByZXR1cm4gc1xuICAgICAgLnJlcGxhY2UoLyhcXG58XFxyKS9nLCAnICcpXG4gICAgICAucmVwbGFjZSgvXlxccyovLCAnJylcbiAgICAgIC5yZXBsYWNlKC9cXHMqXFwuP1xccypcXC4/JC8sICcnKVxuICB9XG5cbiAgLyoqXG4gICAqIHRyYW5zbGF0ZVJvbGwsIHRyYW5zbGF0ZXMgbGFuZ3VhZ2Ugc3BlY2lmaWMgc2hvcnRmb3JtIG9mIGRpY2UgKEQpIGluIHJvbGxzXG4gICAqIEV4YW1wbGUgZm9yIEdlcm1hbiByb2xsczogMVc0ID0+IDFENC5cbiAgICogRGljZSBzaG9ydGZvcm0gaXMgY29uZmlndXJlZCB1c2luZyBrZXlzLmRpY2VTaG9ydFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcyB0aGUgcm9sbCB0byBiZSB0cmFuc2xhdGVkXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSB0cmFuc2xhdGVkIHJvbGxcbiAgICovXG4gIHRyYW5zbGF0ZVJvbGwgKHMpIHtcbiAgICBpZiAodHlwZW9mIHMgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gc1xuICAgIGlmICh0eXBlb2YgdGhpcy5rZXlzLmRpY2VTaG9ydCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IHJlZ0V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgJyg/PG4xPlxcXFxkKyknICsgdGhpcy5rZXlzLmRpY2VTaG9ydCArICcoPzxuMj5cXFxcZCspJyxcbiAgICAgICAgJ2l1ZydcbiAgICAgIClcbiAgICAgIHJldHVybiBzLnJlcGxhY2UocmVnRXgsICckPG4xPkQkPG4yPicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHRvSFRNTCwgY29udmVydHMgYSBzdHJpbmcgdG8gSFRNTCBzdHJpcGluZyBvdXQgZW1wdHkgbGluZXMgb3IgbGluZXMgdGhhdCBjb250YWluIGp1c3QgLCBvciAuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzIHRoZSBzdHJpbmcgdG8gY29udmVydFxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgSFRNTCBvciBhbiBlbXB0eSBzdHJpbmdcbiAgICovXG4gIHRvSFRNTCAocykge1xuICAgIGlmIChzLnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAnJ1xuICAgIH1cbiAgICBzID0gc1xuICAgICAgLnRyaW0oKVxuICAgICAgLnNwbGl0KCdcXG4nKVxuICAgICAgLm1hcCh0ZXh0ID0+IHRleHQudHJpbSgpLnJlcGxhY2UoL15bLC5cXHPjgIHjgIJdKyQvLCAnJykpXG4gICAgICAuZmlsdGVyKHRleHQgPT4gdGV4dClcbiAgICAgIC5qb2luKCc8L3A+PHA+JylcbiAgICBpZiAocy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAnJ1xuICAgIH1cbiAgICByZXR1cm4gJzxwPicgKyBzICsgJzwvcD4nXG4gIH1cblxuICAvKipcbiAgICogY2hlY2sgZXhwZWN0cyBhIGtleSBmcm9tIHRoaXMucmVnRXggd2lsbCBhdHRlbXB0IHRvIG1hdGNoIHRoZSB0ZXh0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSByZWdFeEtleSBrZXkgaW4gdGhpcy5yZWdFeFxuICAgKiBAcGFyYW0ge0pTT059XG4gICAqIC0gcmVtb3ZlRnJvbVRleHQgcmVtb3ZlIGZyb20gdGhpcy50ZXh0XG4gICAqIC0gc2F2ZUtleXMgYWRkIGdyb3VwIGtleXMgdG8gdGhpcy5wYXJzZWRcbiAgICogLSB0eXBlIElmIGFkZGluZyB3aXRoIHNhdmVLZXlzIHNldCB0eXBlIChDb0M3QWN0b3JJbXBvcnRlci5hc1N0cmluZyAvIENvQzdBY3RvckltcG9ydGVyLmFzTnVtYmVyKVxuICAgKiAtIHRleHQgSWYgc2V0IHVzZSB0aGlzIGluc3RlYWQgb2YgdGhpcy50ZXh0XG4gICAqIC0gcmVxdWlyZWRHcm91cCBJZiBub3QgZmFsc2UgcmVxdWlyZSBzcGVjaWZpZWQga2V5IGluIFJlZ0V4cCBncm91cHNcbiAgICogQHJldHVybnMge0ZhbHNlfS97SlNPTiBncm91cHMgJycgaXMgbWF0Y2hlZCBzdHJpbmd9XG4gICAqL1xuICBjaGVjayAoXG4gICAgcmVnRXhLZXksXG4gICAge1xuICAgICAgcmVtb3ZlRnJvbVRleHQgPSB0cnVlLFxuICAgICAgc2F2ZUtleXMgPSB0cnVlLFxuICAgICAgdHlwZSA9IENvQzdBY3RvckltcG9ydGVyLmFzU3RyaW5nLFxuICAgICAgdGV4dCA9IGZhbHNlLFxuICAgICAgcmVxdWlyZWRHcm91cCA9IGZhbHNlXG4gICAgfSA9IHt9XG4gICkge1xuICAgIGxldCBvdXRwdXQgPSBmYWxzZVxuICAgIGxldCByZWdFeHAgPSBmYWxzZVxuICAgIGlmICh0eXBlb2YgdGhpcy5yZWdFeFtyZWdFeEtleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZWdFeHAgPSB0aGlzLmdldFJlZ0V4KHRoaXMucmVnRXhbcmVnRXhLZXldKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMua2V5c1tyZWdFeEtleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZWdFeHAgPSB0aGlzLmdldFJlZ0V4KHRoaXMua2V5c1tyZWdFeEtleV0pXG4gICAgfVxuICAgIGlmIChyZWdFeHAgIT09IGZhbHNlKSB7XG4gICAgICBpZiAodGV4dCA9PT0gZmFsc2UpIHtcbiAgICAgICAgdGV4dCA9IHRoaXMudGV4dFxuICAgICAgfVxuICAgICAgY29uc3QgY2hlY2sgPSByZWdFeHAuZXhlYyh0ZXh0KVxuICAgICAgbGV0IHZhbHVlID0gbnVsbFxuICAgICAgaWYgKFxuICAgICAgICBjaGVjayAhPT0gbnVsbCAmJlxuICAgICAgICAocmVxdWlyZWRHcm91cCA9PT0gZmFsc2UgfHxcbiAgICAgICAgICB0eXBlb2YgKGNoZWNrLmdyb3VwcyB8fCB7fSlbcmVxdWlyZWRHcm91cF0gIT09ICd1bmRlZmluZWQnKVxuICAgICAgKSB7XG4gICAgICAgIG91dHB1dCA9IGNoZWNrLmdyb3VwcyB8fCB7fVxuICAgICAgICBpZiAocmVtb3ZlRnJvbVRleHQpIHtcbiAgICAgICAgICB0aGlzLnRleHQgPSB0aGlzLnRleHQucmVwbGFjZShjaGVja1swXS50cmltKCksICdcXG4nKS50cmltKClcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2F2ZUtleXMpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhjaGVjay5ncm91cHMpKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgY2FzZSBDb0M3QWN0b3JJbXBvcnRlci5hc1N0cmluZzpcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnNlZFtrZXldID0gU3RyaW5nKGNoZWNrLmdyb3Vwc1trZXldKS5yZXBsYWNlKCdcXG4nLCAnICcpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgY2FzZSBDb0M3QWN0b3JJbXBvcnRlci5hc051bWJlcjpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IE51bWJlcihjaGVjay5ncm91cHNba2V5XSlcbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5wYXJzZWRba2V5XSA9IE51bWJlcihjaGVjay5ncm91cHNba2V5XSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb3V0cHV0Wyctc291cmNlJ10gPSBjaGVja1swXVxuICAgICAgICBvdXRwdXRbJy1pbmRleCddID0gY2hlY2suaW5kZXhcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dFxuICB9XG5cbiAgLyoqXG4gICAqIHByb2Nlc3NDb21iYXQgZXh0cmFjdHMgY29tYmF0IC8gZG9kZ2UgaW5mb3JtYXRpb24gZnJvbSBhIHN1YnNlY3Rpb24gb2YgdGV4dFxuICAgKiBAcGFyYW0ge1N0cmluZ30gdGV4dCB0aGUgcmF3IHRleHQgb2YgdGhlIGNvbWJhdCBzZWN0aW9uXG4gICAqIEByZXR1cm5zIHZvaWRcbiAgICovXG4gIHByb2Nlc3NDb21iYXQgKHRleHQpIHtcbiAgICBpZiAodGV4dC50cmltKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKENPTkZJRy5kZWJ1Zy5Db0M3SW1wb3J0ZXIpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdjb21iYXQgdGV4dCcsIHRleHQpXG4gICAgfVxuICAgIGxldCB3ZWFwb25cbiAgICBsZXQgZG9kZ2VcbiAgICBsZXQgbmV3bGluZVxuICAgIGxldCBsYXN0UGVyY2VudCA9IGZhbHNlXG4gICAgbGV0IG1heExvb3BzID0gNDBcbiAgICBkbyB7XG4gICAgICBtYXhMb29wcy0tXG4gICAgICB0ZXh0ID0gdGV4dC50cmltKClcbiAgICAgIGlmIChcbiAgICAgICAgKGRvZGdlID0gdGhpcy5jaGVjaygnd2VhcG9uRG9kZ2UnLCB7IHNhdmVLZXlzOiBmYWxzZSwgdGV4dCB9KSlcbiAgICAgICkge1xuICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGRvZGdlWyctc291cmNlJ10sICdcXG4nKVxuICAgICAgICBpZiAodHlwZW9mIHRoaXMucGFyc2VkLnNraWxscyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aGlzLnBhcnNlZC5za2lsbHMgPSBbXVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFyc2VkLnNraWxscy5wdXNoKHtcbiAgICAgICAgICBuYW1lOiB0aGlzLmNsZWFuU3RyaW5nKGRvZGdlLm5hbWUpLFxuICAgICAgICAgIHZhbHVlOiBOdW1iZXIoZG9kZ2UucGVyY2VudGFnZSksXG4gICAgICAgICAgcHVzaDogZmFsc2VcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICh3ZWFwb24gPSB0aGlzLmNoZWNrKCd3ZWFwb24nLCB7XG4gICAgICAgICAgc2F2ZUtleXM6IGZhbHNlLFxuICAgICAgICAgIHRleHQsXG4gICAgICAgICAgcmVxdWlyZWRHcm91cDogbGFzdFBlcmNlbnQgPT09IGZhbHNlID8gJ3BlcmNlbnRhZ2UnIDogZmFsc2VcbiAgICAgICAgfSkpXG4gICAgICApIHtcbiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSh3ZWFwb25bJy1zb3VyY2UnXSwgJ1xcbicpXG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLmNsZWFuU3RyaW5nKHdlYXBvbi5uYW1lIHx8ICcnKVxuICAgICAgICBsZXQgZGFtYWdlID0gdGhpcy50cmFuc2xhdGVSb2xsKHRoaXMuY2xlYW5TdHJpbmcod2VhcG9uLmRhbWFnZSB8fCAnJykpXG4gICAgICAgIGNvbnN0IGlzUmFuZ2VkID0gISEoXG4gICAgICAgICAgdGhpcy5jaGVjaygnaGFuZGd1bicsIHtcbiAgICAgICAgICAgIHRleHQ6IG5hbWUsXG4gICAgICAgICAgICByZW1vdmVGcm9tVGV4dDogZmFsc2UsXG4gICAgICAgICAgICBzYXZlS2V5czogZmFsc2VcbiAgICAgICAgICB9KSB8fFxuICAgICAgICAgIHRoaXMuY2hlY2soJ3JpZmxlJywge1xuICAgICAgICAgICAgdGV4dDogbmFtZSxcbiAgICAgICAgICAgIHJlbW92ZUZyb21UZXh0OiBmYWxzZSxcbiAgICAgICAgICAgIHNhdmVLZXlzOiBmYWxzZVxuICAgICAgICAgIH0pIHx8XG4gICAgICAgICAgdGhpcy5jaGVjaygnc21iJywge1xuICAgICAgICAgICAgdGV4dDogbmFtZSxcbiAgICAgICAgICAgIHJlbW92ZUZyb21UZXh0OiBmYWxzZSxcbiAgICAgICAgICAgIHNhdmVLZXlzOiBmYWxzZVxuICAgICAgICAgIH0pIHx8XG4gICAgICAgICAgdGhpcy5jaGVjaygnbWFjaGluZUd1bicsIHtcbiAgICAgICAgICAgIHRleHQ6IG5hbWUsXG4gICAgICAgICAgICByZW1vdmVGcm9tVGV4dDogZmFsc2UsXG4gICAgICAgICAgICBzYXZlS2V5czogZmFsc2VcbiAgICAgICAgICB9KSB8fFxuICAgICAgICAgIHRoaXMuY2hlY2soJ2xhdW5jaGVkJywge1xuICAgICAgICAgICAgdGV4dDogbmFtZSxcbiAgICAgICAgICAgIHJlbW92ZUZyb21UZXh0OiBmYWxzZSxcbiAgICAgICAgICAgIHNhdmVLZXlzOiBmYWxzZVxuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHdlYXBvbi5wZXJjZW50YWdlICE9PSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHdlYXBvbi5wZXJjZW50YWdlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICApIHtcbiAgICAgICAgICBsYXN0UGVyY2VudCA9IE51bWJlcih3ZWFwb24ucGVyY2VudGFnZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsYXN0UGVyY2VudCA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBsZXQgZm91bmRcbiAgICAgICAgbGV0IGFoZGIgPSBmYWxzZVxuICAgICAgICBsZXQgYWRkYiA9IGZhbHNlXG4gICAgICAgIGRvIHtcbiAgICAgICAgICBmb3VuZCA9IHRoaXMuZ2V0UmVnRXgoXG4gICAgICAgICAgICAnXFxcXHMqWystXT9cXFxccyooJyArXG4gICAgICAgICAgICAgIHRoaXMua2V5cy5oYWxmZGIgK1xuICAgICAgICAgICAgICAnKVxcXFxzKignICtcbiAgICAgICAgICAgICAgdGhpcy5rZXlzLmZ1bGxkYiArXG4gICAgICAgICAgICAgICcpP1stK10/XFxcXHMqKCcgK1xuICAgICAgICAgICAgICB0aGlzLnBhcnNlZC5kYi5yZXBsYWNlKC9eWy0rXS8sICcnKSArXG4gICAgICAgICAgICAgICcpPydcbiAgICAgICAgICApLmV4ZWMoZGFtYWdlKVxuICAgICAgICAgIGlmIChmb3VuZCkge1xuICAgICAgICAgICAgYWhkYiA9IHRydWVcbiAgICAgICAgICAgIGRhbWFnZSA9IGRhbWFnZS5yZXBsYWNlKGZvdW5kWzBdLCAnJylcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm91bmQgPSB0aGlzLmdldFJlZ0V4KFxuICAgICAgICAgICAgICAnXFxcXHMqWystXT9cXFxccyooJyArXG4gICAgICAgICAgICAgICAgdGhpcy5rZXlzLmZ1bGxkYiArXG4gICAgICAgICAgICAgICAgJylcXFxccypbLStdP1xcXFxzKignICtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnNlZC5kYi5yZXBsYWNlKC9eWy0rXS8sICcnKSArXG4gICAgICAgICAgICAgICAgJyk/J1xuICAgICAgICAgICAgKS5leGVjKGRhbWFnZSlcbiAgICAgICAgICAgIGlmIChmb3VuZCkge1xuICAgICAgICAgICAgICBhZGRiID0gdHJ1ZVxuICAgICAgICAgICAgICBkYW1hZ2UgPSBkYW1hZ2UucmVwbGFjZShmb3VuZFswXSwgJycpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlIChmb3VuZClcbiAgICAgICAgY29uc3QgZGFtYWdlcyA9IGRhbWFnZS5zcGxpdCgnLycpXG4gICAgICAgIGNvbnN0IGlzU2hvdGd1biA9IGRhbWFnZXMubGVuZ3RoID09PSAzXG4gICAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICB0eXBlOiAnd2VhcG9uJyxcbiAgICAgICAgICBzeXN0ZW06IHtcbiAgICAgICAgICAgIHNraWxsOiB7XG4gICAgICAgICAgICAgIGlkOiBsYXN0UGVyY2VudFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICAgICAgcmFuZ2U6IHtcbiAgICAgICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGlzU2hvdGd1biA/IDEwIDogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2U6IGRhbWFnZXNbMF1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbG9uZzoge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBpc1Nob3RndW4gPyAyMCA6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlOiBpc1Nob3RndW4gPyBkYW1hZ2VzWzFdIDogJydcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZXh0cmVtZToge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBpc1Nob3RndW4gPyA1MCA6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlOiBpc1Nob3RndW4gPyBkYW1hZ2VzWzJdIDogJydcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBTZXQgc29tZSBvZiB0aGUgcHJvcGVydGllc1xuICAgICAgICBkYXRhLnN5c3RlbS5wcm9wZXJ0aWVzLnNob3RndW4gPSBpc1Nob3RndW5cbiAgICAgICAgZGF0YS5zeXN0ZW0ucHJvcGVydGllcy5ybmdkID0gaXNSYW5nZWQgfHwgaXNTaG90Z3VuXG4gICAgICAgIGRhdGEuc3lzdGVtLnByb3BlcnRpZXMubWVsZWUgPSAhZGF0YS5zeXN0ZW0ucHJvcGVydGllcy5ybmdkXG4gICAgICAgIGRhdGEuc3lzdGVtLnByb3BlcnRpZXMuYWhkYiA9IGFoZGJcbiAgICAgICAgZGF0YS5zeXN0ZW0ucHJvcGVydGllcy5hZGRiID0gYWRkYlxuICAgICAgICBpZiAodHlwZW9mIHRoaXMucGFyc2VkLmF0dGFja3MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhpcy5wYXJzZWQuYXR0YWNrcyA9IFtdXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJzZWQuYXR0YWNrcy5wdXNoKGRhdGEpXG4gICAgICB9IGVsc2UgaWYgKChuZXdsaW5lID0gdGV4dC5tYXRjaCgvXiguKylcXG4vKSkpIHtcbiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZShuZXdsaW5lWzBdLCAnXFxuJylcbiAgICAgIH0gZWxzZSBpZiAoKG5ld2xpbmUgPSB0ZXh0Lm1hdGNoKC9eW15cXG5dKyQvKSkpIHtcbiAgICAgICAgdGV4dCA9ICcnXG4gICAgICB9XG4gICAgfSB3aGlsZSAobWF4TG9vcHMgPiAwICYmICghIXdlYXBvbiB8fCAhIWRvZGdlIHx8ICEhdGV4dCkpXG4gICAgaWYgKG1heExvb3BzID09PSAwKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLndhcm4oXG4gICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FcnJvclVuZXhwZWN0ZWRXZWFwb25UZXh0JylcbiAgICAgIClcbiAgICAgIGNvbnNvbGUuZGVidWcoJ1VuZXhwZWN0ZWQgd2VhcG9uczonLCB0ZXh0KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBwcm9jZXNzU2tpbGxzIGV4dHJhY3RzIHNraWxscyAvIGxhbmd1YWdlIGluZm9ybWF0aW9uIGZyb20gYSBzdWJzZWN0aW9uIG9mIHRleHRcbiAgICogQHBhcmFtIHtTdHJpbmd9IHRleHQgdGhlIHJhdyB0ZXh0IG9mIHRoZSBza2lsbHMgLyBsYW5ndWFnZSBzZWN0aW9uXG4gICAqIEByZXR1cm5zIHZvaWRcbiAgICovXG4gIHByb2Nlc3NTa2lsbHMgKHRleHQsIGtleSA9ICdza2lsbHMnKSB7XG4gICAgaWYgKHRleHQudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IGJyZWFrcyA9IHRleHQuc3BsaXQoL1xcLlxccj9cXG4vKVxuICAgIGlmIChicmVha3MubGVuZ3RoID4gMSkge1xuICAgICAgdGV4dCA9IGJyZWFrc1swXVxuICAgIH1cbiAgICBsZXQgc2tpbGxcbiAgICBsZXQgbWF4TG9vcHMgPSA0MFxuICAgIGRvIHtcbiAgICAgIG1heExvb3BzLS1cbiAgICAgIHRleHQgPSB0ZXh0LnRyaW0oKVxuICAgICAgc2tpbGwgPSB0aGlzLmNoZWNrKCdza2lsbCcsIHsgc2F2ZUtleXM6IGZhbHNlLCB0ZXh0IH0pXG4gICAgICBpZiAoc2tpbGwpIHtcbiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZShza2lsbFsnLXNvdXJjZSddLCAnXFxuJylcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnBhcnNlZFtrZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRoaXMucGFyc2VkW2tleV0gPSBbXVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFyc2VkW2tleV0ucHVzaCh7XG4gICAgICAgICAgbmFtZTogdGhpcy5jbGVhblN0cmluZyhza2lsbC5uYW1lKSxcbiAgICAgICAgICB2YWx1ZTogTnVtYmVyKHNraWxsLnBlcmNlbnRhZ2UpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSB3aGlsZSAobWF4TG9vcHMgPiAwICYmIHNraWxsKVxuICAgIGlmIChtYXhMb29wcyA9PT0gMCkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy53YXJuKFxuICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRXJyb3JVbmV4cGVjdGVkU2tpbGxzVGV4dCcpXG4gICAgICApXG4gICAgICBjb25zb2xlLmRlYnVnKCdVbmV4cGVjdGVkIHNraWxsczonLCB0ZXh0KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBwcm9jZXNzU3BlbGxzIGV4dHJhY3RzIHNwZWxsIGluZm9ybWF0aW9uIGZyb20gYSBzdWJzZWN0aW9uIG9mIHRleHRcbiAgICogQHBhcmFtIHtTdHJpbmd9IHRleHQgdGhlIHJhdyB0ZXh0IG9mIHRoZSBzcGVsbCBzZWN0aW9uXG4gICAqIEByZXR1cm5zIHZvaWRcbiAgICovXG4gIHByb2Nlc3NTcGVsbHMgKHRleHQpIHtcbiAgICBpZiAodGV4dC50cmltKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgYnJlYWtzID0gdGV4dC5zcGxpdCgvXFwuXFxyP1xcbi8pXG4gICAgaWYgKGJyZWFrcy5sZW5ndGggPiAxKSB7XG4gICAgICB0ZXh0ID0gYnJlYWtzWzBdXG4gICAgfVxuICAgIGNvbnN0IHNwZWxsc0FyciA9IHRleHQucmVwbGFjZSgvKFtcXG5cXHJdKykvZywgJyAnKS5zcGxpdCgvKD88IVxcKFteKV0rKVss44CBXS8pXG4gICAgdGhpcy50ZXh0ID0gdGhpcy50ZXh0LnJlcGxhY2UodGV4dC50cmltKCksICdcXG4nKVxuICAgIGZvciAoY29uc3Qgc3BlbGwgb2Ygc3BlbGxzQXJyKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMucGFyc2VkLnNwZWxscyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhpcy5wYXJzZWQuc3BlbGxzID0gW11cbiAgICAgIH1cbiAgICAgIHRoaXMucGFyc2VkLnNwZWxscy5wdXNoKHRoaXMuY2xlYW5TdHJpbmcoc3BlbGwpKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBwYXJzZUNoYXJhY3RlciBleHRyYWN0cyBpbmZvcm1hdGlvbiBmcm9tIHRoZSByYXcgdGV4dCBkZXNjcmlwdGlvbiBvZiBhbiBlbnRpdHkgKE5QQyBvciBDcmVhdHVyZSlcbiAgICogQHBhcmFtIHtTdHJpbmd9IHRleHQgdGhlIHJhdyB0ZXh0IG9mIHRoZSBlbnRpdHlcbiAgICogQHJldHVybnMgZXh0cmFjdGVkRGF0YSBvYmplY3Qgd2l0aCB0aGUgZW50aXR5IGRhdGFcbiAgICovXG4gIGFzeW5jIHBhcnNlQ2hhcmFjdGVyICh0ZXh0KSB7XG4gICAgLy8gUmVwbGFjZSBcIkVuIERhc2hcIiBhbmQgXCJFbSBEYXNoXCIgZGFzaGVzIHdpdGggLSBhbmQgXCJSaWdodCBTaW5nbGUgUXVvdGF0aW9uIE1hcmtcIiB3aXRoICdcbiAgICB0aGlzLnRleHQgPSBTdHJpbmcodGV4dClcbiAgICAgIC50cmltKClcbiAgICAgIC5yZXBsYWNlKC9cXHUyMDEzfFxcdTIwMTR8XFx1MjIxMi9nLCAnLScpXG4gICAgICAucmVwbGFjZSgvXFx1MjAxOS9nLCBcIidcIilcbiAgICAgIC5yZXBsYWNlKC9bXFx1ZGJjMC1cXHVkYmZlXVtcXHVkYzAwLVxcdWRmZmZdL2csICcnKVxuICAgIC8vIEVhcmxpZXN0IGNoYXJhY3RlciB0aGF0IGhhcyBiZWVuIHVzZWQsIHRvIHdvcmsgb3V0IHRoZSBoZWFkZXJcbiAgICBsZXQgbWluID0gdGhpcy50ZXh0Lmxlbmd0aFxuICAgIC8vIFNUUiwgaWYgYmVyZm9yZSB0aGFuIHByZXZpb3VzIG1pbiB1cGRhdGUgaXRcbiAgICBsZXQgY2hlY2sgPSB0aGlzLmNoZWNrKCdzdHInLCB7IHR5cGU6IENvQzdBY3RvckltcG9ydGVyLmFzTnVtYmVyIH0pW1xuICAgICAgJy1pbmRleCdcbiAgICBdXG4gICAgaWYgKCFpc05hTihjaGVjaykpIHtcbiAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgY2hlY2spXG4gICAgfVxuICAgIC8vIENPTiwgaWYgYmVyZm9yZSB0aGFuIHByZXZpb3VzIG1pbiB1cGRhdGUgaXRcbiAgICBjaGVjayA9IHRoaXMuY2hlY2soJ2NvbicsIHsgdHlwZTogQ29DN0FjdG9ySW1wb3J0ZXIuYXNOdW1iZXIgfSlbJy1pbmRleCddXG4gICAgaWYgKCFpc05hTihjaGVjaykpIHtcbiAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgY2hlY2spXG4gICAgfVxuICAgIC8vIFNJWiwgaWYgYmVyZm9yZSB0aGFuIHByZXZpb3VzIG1pbiB1cGRhdGUgaXRcbiAgICBjaGVjayA9IHRoaXMuY2hlY2soJ3NpeicsIHsgdHlwZTogQ29DN0FjdG9ySW1wb3J0ZXIuYXNOdW1iZXIgfSlbJy1pbmRleCddXG4gICAgaWYgKCFpc05hTihjaGVjaykpIHtcbiAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgY2hlY2spXG4gICAgfVxuICAgIC8vIElOVCwgaWYgYmVyZm9yZSB0aGFuIHByZXZpb3VzIG1pbiB1cGRhdGUgaXRcbiAgICBjaGVjayA9IHRoaXMuY2hlY2soJ2ludCcsIHsgdHlwZTogQ29DN0FjdG9ySW1wb3J0ZXIuYXNOdW1iZXIgfSlbJy1pbmRleCddXG4gICAgaWYgKCFpc05hTihjaGVjaykpIHtcbiAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgY2hlY2spXG4gICAgfVxuICAgIC8vIFBPVywgaWYgYmVyZm9yZSB0aGFuIHByZXZpb3VzIG1pbiB1cGRhdGUgaXRcbiAgICBjaGVjayA9IHRoaXMuY2hlY2soJ3BvdycsIHsgdHlwZTogQ29DN0FjdG9ySW1wb3J0ZXIuYXNOdW1iZXIgfSlbJy1pbmRleCddXG4gICAgaWYgKCFpc05hTihjaGVjaykpIHtcbiAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgY2hlY2spXG4gICAgfVxuICAgIC8vIERFWCwgaWYgYmVyZm9yZSB0aGFuIHByZXZpb3VzIG1pbiB1cGRhdGUgaXRcbiAgICBjaGVjayA9IHRoaXMuY2hlY2soJ2RleCcsIHsgdHlwZTogQ29DN0FjdG9ySW1wb3J0ZXIuYXNOdW1iZXIgfSlbJy1pbmRleCddXG4gICAgaWYgKCFpc05hTihjaGVjaykpIHtcbiAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgY2hlY2spXG4gICAgfVxuICAgIC8vIEFQUCwgaWYgYmVyZm9yZSB0aGFuIHByZXZpb3VzIG1pbiB1cGRhdGUgaXRcbiAgICBjaGVjayA9IHRoaXMuY2hlY2soJ2FwcCcsIHsgdHlwZTogQ29DN0FjdG9ySW1wb3J0ZXIuYXNOdW1iZXIgfSlbJy1pbmRleCddXG4gICAgaWYgKCFpc05hTihjaGVjaykpIHtcbiAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgY2hlY2spXG4gICAgfVxuICAgIC8vIEVEVSwgaWYgYmVyZm9yZSB0aGFuIHByZXZpb3VzIG1pbiB1cGRhdGUgaXRcbiAgICBjaGVjayA9IHRoaXMuY2hlY2soJ2VkdScsIHsgdHlwZTogQ29DN0FjdG9ySW1wb3J0ZXIuYXNOdW1iZXIgfSlbJy1pbmRleCddXG4gICAgaWYgKCFpc05hTihjaGVjaykpIHtcbiAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgY2hlY2spXG4gICAgfVxuICAgIC8vIFNBTiwgaWYgYmVyZm9yZSB0aGFuIHByZXZpb3VzIG1pbiB1cGRhdGUgaXRcbiAgICBjaGVjayA9IHRoaXMuY2hlY2soJ3NhbicsIHsgdHlwZTogQ29DN0FjdG9ySW1wb3J0ZXIuYXNOdW1iZXIgfSlbJy1pbmRleCddXG4gICAgaWYgKCFpc05hTihjaGVjaykpIHtcbiAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgY2hlY2spXG4gICAgfVxuICAgIC8vIEhQLCBpZiBiZXJmb3JlIHRoYW4gcHJldmlvdXMgbWluIHVwZGF0ZSBpdFxuICAgIGNoZWNrID0gdGhpcy5jaGVjaygnaHAnLCB7IHR5cGU6IENvQzdBY3RvckltcG9ydGVyLmFzTnVtYmVyIH0pWyctaW5kZXgnXVxuICAgIGlmICghaXNOYU4oY2hlY2spKSB7XG4gICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIGNoZWNrKVxuICAgIH1cbiAgICAvLyBNUCwgaWYgYmVyZm9yZSB0aGFuIHByZXZpb3VzIG1pbiB1cGRhdGUgaXRcbiAgICBjaGVjayA9IHRoaXMuY2hlY2soJ21wJywgeyB0eXBlOiBDb0M3QWN0b3JJbXBvcnRlci5hc051bWJlciB9KVsnLWluZGV4J11cbiAgICBpZiAoIWlzTmFOKGNoZWNrKSkge1xuICAgICAgbWluID0gTWF0aC5taW4obWluLCBjaGVjaylcbiAgICB9XG4gICAgLy8gV29yayBvdXQgdGhlIGhlYWRlciBiYXNlZCBvbiBwcmV2aW91cyBtaW5pbXVtIG1hdGNoZWQgY2hhcmFjdGVyXG4gICAgbGV0IGhlYWRlclxuICAgIGlmIChtaW4gPiAwKSB7XG4gICAgICBoZWFkZXIgPSB0aGlzLnRleHQuc3Vic3RyKDAsIG1pbilcbiAgICAgIC8vIEdldCBuYW1lIGZyb20gaGVhZGVyXG4gICAgICBjaGVjayA9IHRoaXMuY2hlY2soJ25hbWUnLCB7IHRleHQ6IGhlYWRlciB9KVxuICAgICAgaWYgKGNoZWNrID09PSBmYWxzZSkge1xuICAgICAgICAvLyBJZiBub3QgZm91bmQgdXNlIGRlZmF1bHQgTlBDIG5hbWVcbiAgICAgICAgdGhpcy5wYXJzZWQubmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5JbXBvcnRlZFVubmFtZWRDaGFyYWN0ZXInKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmVtb3ZlIG5hbWUgZnJvbSBoZWFkZXJcbiAgICAgICAgaGVhZGVyID0gaGVhZGVyLnJlcGxhY2UoY2hlY2tbJy1zb3VyY2UnXSwgJ1xcbicpXG4gICAgICB9XG4gICAgICAvLyBHZXQgYWdlIGZyb20gaGVhZGVyXG4gICAgICBjaGVjayA9IHRoaXMuY2hlY2soJ2FnZScsIHsgdGV4dDogaGVhZGVyIH0pXG4gICAgICBpZiAoY2hlY2sgIT09IGZhbHNlKSB7XG4gICAgICAgIC8vIElmIGZvdW5kIHJlbW92ZSBhZ2UgZnJvbSBoZWFkZXJcbiAgICAgICAgaGVhZGVyID0gaGVhZGVyLnJlcGxhY2UoY2hlY2tbJy1zb3VyY2UnXSwgJ1xcbicpXG4gICAgICB9XG4gICAgICAvLyBHZXQgb2NjdXBhdGlvbiBmcm9tIGhlYWRlclxuICAgICAgaWYgKCF0aGlzLmNoZWNrKCdvY2N1cGF0aW9uJywgeyB0ZXh0OiBoZWFkZXIgfSkgJiYgaGVhZGVyLnRyaW0oKSAhPT0gJycpIHtcbiAgICAgICAgLy8gSWYgb2NjdXBhdGlvbiBpcyBub3QgZm91bmQgYnV0IHRoZXJlIGlzIGEgaGVhZGVyIHNldCB0aGUgb2NjdXBhdGlvbiB0byB0aGUgcmVtYWluaW5nIGhlYWRlclxuICAgICAgICBsZXQgb2NjdXBhdGlvbiA9IGhlYWRlclxuICAgICAgICBpZiAoaGVhZGVyLmluZGV4T2YoJy4nKSA+IC0xKSB7XG4gICAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSBmdWxsIHN0b3AganVzdCB1c2UgdGhlIGZpcnN0IHBhcnQgb2YgdGhlIGhlYWRlciBhcyB0aGUgb2NjdXBhdGlvblxuICAgICAgICAgIG9jY3VwYXRpb24gPSBoZWFkZXIuc3Vic3RyKDAsIGhlYWRlci5pbmRleE9mKCcuJykgKyAxKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFyc2VkLm9jY3VwYXRpb24gPSBvY2N1cGF0aW9uXG4gICAgICAgICAgLnJlcGxhY2UoLyhbXFxuXFxyXSspL2csICcgJylcbiAgICAgICAgICAudHJpbSgpXG4gICAgICAgICAgLnJlcGxhY2UoLywkLywgJycpXG4gICAgICAgIHRoaXMudGV4dCA9IHRoaXMudGV4dC5yZXBsYWNlKG9jY3VwYXRpb24udHJpbSgpLCAnXFxuJylcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhlcmUgaXMgbm8gaGVhZGVyIHNldCBkZWZhdWx0IE5QQyBuYW1lXG4gICAgICB0aGlzLnBhcnNlZC5uYW1lID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkltcG9ydGVkVW5uYW1lZENoYXJhY3RlcicpXG4gICAgfVxuICAgIC8vIElmIHRoZXJlIGlzIGFuIG9jY3VwYXRpb24gYnV0IG5vIGFnZSBjaGVjayBpZiB0aGUgb2NjdXBhdGlvbiBzdGFydHMgbnVtYmVyIHNwbGl0IGFnZSBhbmQgb2NjdXBhdGlvblxuICAgIGlmIChcbiAgICAgIHR5cGVvZiB0aGlzLnBhcnNlZC5vY2N1cGF0aW9uICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgdHlwZW9mIHRoaXMucGFyc2VkLmFnZSA9PT0gJ3VuZGVmaW5lZCdcbiAgICApIHtcbiAgICAgIGNvbnN0IG9jY3VwYXRpb25BZ2UgPSB0aGlzLnBhcnNlZC5vY2N1cGF0aW9uLm1hdGNoKFxuICAgICAgICAvXig/PGFnZT5cXGQrKSwoPzxvY2N1cGF0aW9uPi4rKSQvXG4gICAgICApXG4gICAgICBpZiAob2NjdXBhdGlvbkFnZSkge1xuICAgICAgICB0aGlzLnBhcnNlZC5hZ2UgPSBvY2N1cGF0aW9uQWdlLmdyb3Vwcy5hZ2VcbiAgICAgICAgdGhpcy5wYXJzZWQub2NjdXBhdGlvbiA9IG9jY3VwYXRpb25BZ2UuZ3JvdXBzLm9jY3VwYXRpb24udHJpbSgpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIEdldCBkYW1hZ2UgYm9udXMsIGlmIG5vdCBmb3VuZCBvciBub25lIHNldCB0byAwXG4gICAgaWYgKFxuICAgICAgIXRoaXMuY2hlY2soJ2RiJykgfHxcbiAgICAgIHRoaXMuY2hlY2soJ2RiTm9uZScsIHtcbiAgICAgICAgcmVtb3ZlRnJvbVRleHQ6IGZhbHNlLFxuICAgICAgICBzYXZlS2V5czogZmFsc2UsXG4gICAgICAgIHRleHQ6IHRoaXMucGFyc2VkLmRiXG4gICAgICB9KVxuICAgICkge1xuICAgICAgdGhpcy5wYXJzZWQuZGIgPSAnMCdcbiAgICB9XG4gICAgdGhpcy5wYXJzZWQuZGIgPSB0aGlzLnRyYW5zbGF0ZVJvbGwodGhpcy5wYXJzZWQuZGIpXG4gICAgLy8gR2V0IGJ1aWxkXG4gICAgdGhpcy5jaGVjaygnYnVpbGQnKVxuICAgIC8vIEdldCBhcm1vciwgaWYgbm90IGZvdW5kIG9yIG5vbmUgc2V0IHRvIDBcbiAgICBpZiAoXG4gICAgICAhdGhpcy5jaGVjaygnYXJtb3InKSB8fFxuICAgICAgdGhpcy5jaGVjaygnYXJtb3JOb25lJywge1xuICAgICAgICByZW1vdmVGcm9tVGV4dDogZmFsc2UsXG4gICAgICAgIHNhdmVLZXlzOiBmYWxzZSxcbiAgICAgICAgdGV4dDogdGhpcy5wYXJzZWQuYXJtb3JcbiAgICAgIH0pXG4gICAgKSB7XG4gICAgICB0aGlzLnBhcnNlZC5hcm1vciA9ICcwJ1xuICAgIH1cbiAgICAvLyBHZXQgbW92ZW1lbnRcbiAgICB0aGlzLmNoZWNrKCdtb3YnLCB7IHR5cGU6IENvQzdBY3RvckltcG9ydGVyLmFzTnVtYmVyIH0pXG4gICAgLy8gR2V0IGx1Y2tcbiAgICB0aGlzLmNoZWNrKCdsY2snLCB7IHR5cGU6IENvQzdBY3RvckltcG9ydGVyLmFzTnVtYmVyIH0pXG4gICAgLy8gR2V0IHNhbml0eSBsb3NzXG4gICAgdGhpcy5jaGVjaygnc2FuTG9zcycpXG4gICAgdGhpcy5wYXJzZWQuc2FuTG9zcyA9IHRoaXMudHJhbnNsYXRlUm9sbCh0aGlzLnBhcnNlZC5zYW5Mb3NzKVxuICAgIC8vIEdldCBhdHRhY2tzIHBlciByb3VuZCwgaWYgbm90IGZvdW5kIG9yIG5vbmUgc2V0IHRvIDBcbiAgICBpZiAoXG4gICAgICB0aGlzLmNoZWNrKCdhdHRhY2tzUGVyUm91bmQnKSAmJlxuICAgICAgdGhpcy5jaGVjaygnYXR0YWNrc1BlclJvdW5kTm9uZScsIHtcbiAgICAgICAgcmVtb3ZlRnJvbVRleHQ6IGZhbHNlLFxuICAgICAgICBzYXZlS2V5czogZmFsc2UsXG4gICAgICAgIHRleHQ6IHRoaXMucGFyc2VkLmF0dGFja3NQZXJSb3VuZFxuICAgICAgfSlcbiAgICApIHtcbiAgICAgIHRoaXMucGFyc2VkLmF0dGFja3NQZXJSb3VuZCA9ICcwJ1xuICAgIH1cbiAgICAvLyBDaGVjayBpZiB0aGVyZSBpcyBhIGNvbWJhdCBzZWN0aW9uXG4gICAgdGhpcy50ZXh0ID0gJ1xcbicgKyB0aGlzLnRleHRcbiAgICBsZXQgc2VjdGlvbnMgPSB0aGlzLmdldFJlZ0V4KCcoJyArIHRoaXMua2V5cy5zZWN0aW9uQ29tYmF0cyArICcpJywgJ2knKVxuICAgIGlmICh0aGlzLnRleHQubWF0Y2goc2VjdGlvbnMpID09PSBudWxsKSB7XG4gICAgICAvLyBJZiB0aGVyZSBpcyBubyBjb21iYXQgc2VjdGlvbiBndWVzcyB3aGVyZSBpdCBzdGFydHNcbiAgICAgIHNlY3Rpb25zID0gdGhpcy5jaGVjaygnZ3Vlc3NTdGFydENvbWJhdCcsIHtcbiAgICAgICAgc2F2ZUtleXM6IGZhbHNlLFxuICAgICAgICByZW1vdmVGcm9tVGV4dDogZmFsc2VcbiAgICAgIH0pXG4gICAgICBpZiAoc2VjdGlvbnMpIHtcbiAgICAgICAgLy8gQWRkIGEgaGVhZGVyIHRvIHRoZSBzdGFydCBvZiB0aGUgY29tYmF0IHNlY3Rpb25cbiAgICAgICAgdGhpcy50ZXh0ID0gW1xuICAgICAgICAgIHRoaXMudGV4dC5zbGljZSgwLCBzZWN0aW9uc1snLWluZGV4J10pLFxuICAgICAgICAgIHRoaXMua2V5cy5uZXdDb21iYXRIZWFkZXIsXG4gICAgICAgICAgdGhpcy50ZXh0LnNsaWNlKHNlY3Rpb25zWyctaW5kZXgnXSlcbiAgICAgICAgXS5qb2luKCcnKVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBTcGxpdCB0aGUgc2VjdGlvbnMgQ29tYmF0LCBTa2lsbHMsIExhbmd1YWdlcywgYW5kIFNwZWxsc1xuICAgIGNvbnN0IHJlZ0V4cFNlY3Rpb25zID0gdGhpcy5nZXRSZWdFeCh0aGlzLnJlZ0V4LnNlY3Rpb25zLCAnaScpXG4gICAgc2VjdGlvbnMgPSB0aGlzLnRleHQuc3BsaXQocmVnRXhwU2VjdGlvbnMpXG4gICAgaWYgKHNlY3Rpb25zICE9PSBudWxsKSB7XG4gICAgICBmb3IgKGxldCBpID0gMCwgaW0gPSBzZWN0aW9ucy5sZW5ndGg7IGkgPCBpbTsgaSsrKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBzZWN0aW9uc1tpXS5tYXRjaChcbiAgICAgICAgICAgIHRoaXMuZ2V0UmVnRXgoJygnICsgdGhpcy5rZXlzLnNlY3Rpb25Db21iYXRzICsgJyknLCAnaScpXG4gICAgICAgICAgKSAhPT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiBzZWN0aW9uc1tpICsgMV0gIT09ICd1bmRlZmluZWQnXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIElmIHNlY3Rpb24gaXMgY29tYmF0XG4gICAgICAgICAgdGhpcy50ZXh0ID0gKCdcXG4nICsgdGhpcy50ZXh0ICsgJ1xcbicpXG4gICAgICAgICAgICAucmVwbGFjZShzZWN0aW9uc1tpXSwgJ1xcbicpXG4gICAgICAgICAgICAudHJpbSgpXG4gICAgICAgICAgdGhpcy5wcm9jZXNzQ29tYmF0KHNlY3Rpb25zW2kgKyAxXSlcbiAgICAgICAgICBpKytcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBzZWN0aW9uc1tpXS5tYXRjaChcbiAgICAgICAgICAgIHRoaXMuZ2V0UmVnRXgoJygnICsgdGhpcy5rZXlzLnNlY3Rpb25Ta2lsbHMgKyAnKScsICdpJylcbiAgICAgICAgICApICE9PSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHNlY3Rpb25zW2kgKyAxXSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gSWYgc2VjdGlvbiBpcyBza2lsbHNcbiAgICAgICAgICB0aGlzLnRleHQgPSAoJ1xcbicgKyB0aGlzLnRleHQgKyAnXFxuJylcbiAgICAgICAgICAgIC5yZXBsYWNlKHNlY3Rpb25zW2ldLCAnXFxuJylcbiAgICAgICAgICAgIC50cmltKClcbiAgICAgICAgICB0aGlzLnByb2Nlc3NTa2lsbHMoc2VjdGlvbnNbaSArIDFdKVxuICAgICAgICAgIGkrK1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHNlY3Rpb25zW2ldLm1hdGNoKFxuICAgICAgICAgICAgdGhpcy5nZXRSZWdFeCgnKCcgKyB0aGlzLmtleXMuc2VjdGlvbkxhbmdhdWdlcyArICcpJywgJ2knKVxuICAgICAgICAgICkgIT09IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2Ygc2VjdGlvbnNbaSArIDFdICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICApIHtcbiAgICAgICAgICAvLyBJZiBzZWN0aW9uIGlzIGxhbmd1YWdlc1xuICAgICAgICAgIHRoaXMudGV4dCA9ICgnXFxuJyArIHRoaXMudGV4dCArICdcXG4nKVxuICAgICAgICAgICAgLnJlcGxhY2Uoc2VjdGlvbnNbaV0sICdcXG4nKVxuICAgICAgICAgICAgLnRyaW0oKVxuICAgICAgICAgIHRoaXMucHJvY2Vzc1NraWxscyhzZWN0aW9uc1tpICsgMV0sICdsYW5ndWFnZXMnKVxuICAgICAgICAgIGkrK1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHNlY3Rpb25zW2ldLm1hdGNoKFxuICAgICAgICAgICAgdGhpcy5nZXRSZWdFeCgnKCcgKyB0aGlzLmtleXMuc2VjdGlvblNwZWxscyArICcpJywgJ2knKVxuICAgICAgICAgICkgIT09IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2Ygc2VjdGlvbnNbaSArIDFdICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICApIHtcbiAgICAgICAgICAvLyBJZiBzZWN0aW9uIGlzIHNwZWxsc1xuICAgICAgICAgIHRoaXMudGV4dCA9ICgnXFxuJyArIHRoaXMudGV4dCArICdcXG4nKVxuICAgICAgICAgICAgLnJlcGxhY2Uoc2VjdGlvbnNbaV0sICdcXG4nKVxuICAgICAgICAgICAgLnRyaW0oKVxuICAgICAgICAgIHRoaXMucHJvY2Vzc1NwZWxscyhzZWN0aW9uc1tpICsgMV0pXG4gICAgICAgICAgaSsrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQW55IHJlbWFpbmluZyB0ZXh0IGFkZCB0byBHTSBub3RlcyBzbyB5b3UgY2FuIGVhc2lseSBzZWUgaWYgdGhlcmUgYXJlIGFueSBvYnZpb3VzIGlzc3VlIG9yIGp1c3QgZ2VuZXJhbCBub3Rlc1xuICAgIHRoaXMucGFyc2VkLmdtbm90ZXMgPSB0aGlzLnRvSFRNTCh0aGlzLnRleHQpXG4gICAgcmV0dXJuIHRoaXMucGFyc2VkXG4gIH1cblxuICBkaXNhYmxlQXR0cmliQXV0byAoa2V5LCBhdHRyaWJWYWx1ZSwgY2hlY2ssIHVwZGF0ZURhdGEpIHtcbiAgICBjb25zdCB2YWx1ZSA9IE1hdGgubWF4KDAsIE51bWJlcihhdHRyaWJWYWx1ZSkpXG4gICAgaWYgKHZhbHVlICE9PSBOdW1iZXIoY2hlY2spKSB7XG4gICAgICB1cGRhdGVEYXRhW2BzeXN0ZW0uYXR0cmlicy4ke2tleX0uYXV0b2BdID0gZmFsc2VcbiAgICAgIHVwZGF0ZURhdGFbYHN5c3RlbS5hdHRyaWJzLiR7a2V5fS52YWx1ZWBdID0gdmFsdWVcbiAgICAgIGlmIChrZXkgPT09ICdidWlsZCcpIHtcbiAgICAgICAgdXBkYXRlRGF0YVtgc3lzdGVtLmF0dHJpYnMuJHtrZXl9LmN1cnJlbnRgXSA9IHZhbHVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cGRhdGVEYXRhW2BzeXN0ZW0uYXR0cmlicy4ke2tleX0ubWF4YF0gPSB2YWx1ZVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdXBkYXRlRGF0YVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBlbnRpdHkgKGBucGNgIG9yIGBjcmVhdHVyZWApIGZyb20gdGhlIG9iamVjdCB3aXRoIHRoZSBhbHJlYWR5IHBhcnNlZCBlbnRpdHkgZGF0YVxuICAgKiBAcGFyYW0ge09iamVjdH0gY2hhcmFjdGVyRGF0YSBvYmplY3Qgd2l0aCB0aGUgZGF0YSBleHRyYWN0ZWQgZnJvbSB0aGUgY2hhcmFjdGVyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBlbnRpdHlUeXBlU3RyaW5nIGVudGl0eSB0eXBlIG9idGFpbmVkIGZyb20gdGhlIHVzZXIgaW5wdXRcbiAgICogQHJldHVybnMge0FjdG9yfSB0aGUgY3JlYXRlZCBmb3VuZHJ5IGBBY3RvcmBcbiAgICovXG4gIGFzeW5jIGNyZWF0ZUVudGl0eSAoY2hhcmFjdGVyRGF0YSwgZW50aXR5VHlwZSkge1xuICAgIGNvbnN0IGltcG9ydGVkQ2hhcmFjdGVyc0ZvbGRlciA9XG4gICAgICBhd2FpdCBDb0M3VXRpbGl0aWVzLmNyZWF0ZUltcG9ydENoYXJhY3RlcnNGb2xkZXJJZk5vdEV4aXN0cygpXG4gICAgaWYgKGVudGl0eVR5cGUgIT09ICducGMnKSB7XG4gICAgICBlbnRpdHlUeXBlID0gJ2NyZWF0dXJlJ1xuICAgIH1cbiAgICBjb25zdCBhY3RvckRhdGEgPSB7XG4gICAgICBuYW1lOiBjaGFyYWN0ZXJEYXRhLm5hbWUsXG4gICAgICB0eXBlOiBlbnRpdHlUeXBlLFxuICAgICAgZm9sZGVyOiBpbXBvcnRlZENoYXJhY3RlcnNGb2xkZXIuaWQsXG4gICAgICBzeXN0ZW06IGNoYXJhY3RlckRhdGEuYWN0b3JcbiAgICB9XG4gICAgY29uc3QgbnBjID0gYXdhaXQgQWN0b3IuY3JlYXRlKGFjdG9yRGF0YSlcbiAgICBhd2FpdCBucGMuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBjaGFyYWN0ZXJEYXRhLml0ZW1zLCB7XG4gICAgICByZW5kZXJTaGVldDogZmFsc2VcbiAgICB9KVxuICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7fVxuICAgIGxldCB2YWx1ZSA9IDBcbiAgICBpZiAodHlwZW9mIGNoYXJhY3RlckRhdGEuYWN0b3IuYXR0cmlicy5ocD8udmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLmRpc2FibGVBdHRyaWJBdXRvKFxuICAgICAgICAnaHAnLFxuICAgICAgICBjaGFyYWN0ZXJEYXRhLmFjdG9yLmF0dHJpYnMuaHAudmFsdWUsXG4gICAgICAgIG5wYy5ocE1heCxcbiAgICAgICAgdXBkYXRlRGF0YVxuICAgICAgKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGNoYXJhY3RlckRhdGEuYWN0b3IuYXR0cmlicy5tcD8udmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLmRpc2FibGVBdHRyaWJBdXRvKFxuICAgICAgICAnbXAnLFxuICAgICAgICBjaGFyYWN0ZXJEYXRhLmFjdG9yLmF0dHJpYnMubXAudmFsdWUsXG4gICAgICAgIG5wYy5tcE1heCxcbiAgICAgICAgdXBkYXRlRGF0YVxuICAgICAgKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGNoYXJhY3RlckRhdGEuYWN0b3IuYXR0cmlicy5tb3Y/LnZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5kaXNhYmxlQXR0cmliQXV0byhcbiAgICAgICAgJ21vdicsXG4gICAgICAgIGNoYXJhY3RlckRhdGEuYWN0b3IuYXR0cmlicy5tb3YudmFsdWUsXG4gICAgICAgIG5wYy5tb3YsXG4gICAgICAgIHVwZGF0ZURhdGFcbiAgICAgIClcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjaGFyYWN0ZXJEYXRhLmFjdG9yLmF0dHJpYnMuYnVpbGQ/LnZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5kaXNhYmxlQXR0cmliQXV0byhcbiAgICAgICAgJ2J1aWxkJyxcbiAgICAgICAgY2hhcmFjdGVyRGF0YS5hY3Rvci5hdHRyaWJzLmJ1aWxkLnZhbHVlLFxuICAgICAgICBucGMuYnVpbGQsXG4gICAgICAgIHVwZGF0ZURhdGFcbiAgICAgIClcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjaGFyYWN0ZXJEYXRhLmFjdG9yLmF0dHJpYnMuZGI/LnZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFsdWUgPSBTdHJpbmcoY2hhcmFjdGVyRGF0YS5hY3Rvci5hdHRyaWJzLmRiLnZhbHVlKS5yZXBsYWNlKC9eXFwrXFxzKi8sICcnKVxuICAgICAgaWYgKHZhbHVlICE9PSBTdHJpbmcobnBjLmRiKSkge1xuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uYXR0cmlicy5kYi5hdXRvJ10gPSBmYWxzZVxuICAgICAgICB1cGRhdGVEYXRhWydzeXN0ZW0uYXR0cmlicy5kYi52YWx1ZSddID0gdmFsdWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKE9iamVjdC5rZXlzKHVwZGF0ZURhdGEpLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChDT05GSUcuZGVidWcuQ29DN0ltcG9ydGVyKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoJ3VwZGF0ZURhdGE6JywgdXBkYXRlRGF0YSlcbiAgICAgIH1cbiAgICAgIGF3YWl0IG5wYy51cGRhdGUodXBkYXRlRGF0YSlcbiAgICB9XG4gICAgY29uc3QgdXBkYXRlSXRlbURhdGEgPSBbXVxuICAgIGxldCBsYXN0V2VhcG9uU2tpbGwgPSBudWxsXG4gICAgZm9yIChjb25zdCBwYWlyIG9mIHRoaXMud2VhcG9uU2tpbGxzKSB7XG4gICAgICBpZiAocGFpclswXSAhPT0gZmFsc2UpIHtcbiAgICAgICAgbGFzdFdlYXBvblNraWxsID0gbnBjLml0ZW1zLmZpbHRlcihcbiAgICAgICAgICBpID0+IGkubmFtZSA9PT0gcGFpclswXS5uYW1lICYmXG4gICAgICAgICAgICBpLnR5cGUgPT09ICdza2lsbCcgJiZcbiAgICAgICAgICAgIE51bWJlcihpLnN5c3RlbS52YWx1ZSkgPT09IE51bWJlcihwYWlyWzBdLnN5c3RlbS52YWx1ZSlcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgY29uc3Qgd2VhcG9uID0gbnBjLml0ZW1zLmZpbHRlcihcbiAgICAgICAgaSA9PiBpLm5hbWUgPT09IHBhaXJbMV0ubmFtZSAmJlxuICAgICAgICAgIGkudHlwZSA9PT0gJ3dlYXBvbicgJiZcbiAgICAgICAgICBpLnN5c3RlbS5yYW5nZS5ub3JtYWwuZGFtYWdlID09PSBwYWlyWzFdLnN5c3RlbS5yYW5nZS5ub3JtYWwuZGFtYWdlXG4gICAgICApXG4gICAgICBpZiAobGFzdFdlYXBvblNraWxsWzBdICYmIHdlYXBvblswXSkge1xuICAgICAgICB1cGRhdGVJdGVtRGF0YS5wdXNoKHtcbiAgICAgICAgICBfaWQ6IHdlYXBvblswXS5pZCxcbiAgICAgICAgICAnc3lzdGVtLnNraWxsLm1haW4uaWQnOiBsYXN0V2VhcG9uU2tpbGxbMF0uaWQsXG4gICAgICAgICAgJ3N5c3RlbS5za2lsbC5tYWluLm5hbWUnOiBsYXN0V2VhcG9uU2tpbGxbMF0ubmFtZVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodXBkYXRlSXRlbURhdGEubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKENPTkZJRy5kZWJ1Zy5Db0M3SW1wb3J0ZXIpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZygndXBkYXRlSXRlbURhdGE6JywgdXBkYXRlSXRlbURhdGEpXG4gICAgICB9XG4gICAgICBhd2FpdCBucGMudXBkYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCB1cGRhdGVJdGVtRGF0YSlcbiAgICB9XG4gICAgcmV0dXJuIG5wY1xuICB9XG5cbiAgLyoqXG4gICAqIGFjdG9yRGF0YSwgY29udmVydCBwYXJzZUNoYXJhY3RlciBkYXRhIGludG8gQWN0b3IgZGF0YVxuICAgKiBAcGFyYW0ge09iamVjdH0gcGMgb2JqZWN0IHdpdGggdGhlIGRhdGEgZXh0cmFjdGVkIGZyb20gdGhlIGNoYXJhY3RlciBhcyByZXR1cm5lZCBmcm9tIGBwYXJzZUNoYXJhY3RlcmBcbiAgICogQHJldHVybnMge09iamVjdH0gZm9ybWF0dGVkIEFjdG9yIGRhdGFcbiAgICovXG4gIGFjdG9yRGF0YSAocGMpIHtcbiAgICBjb25zdCBzeXN0ZW0gPSB7XG4gICAgICBjaGFyYWN0ZXJpc3RpY3M6IHt9LFxuICAgICAgYXR0cmliczoge30sXG4gICAgICBpbmZvczoge30sXG4gICAgICBzcGVjaWFsOiB7fSxcbiAgICAgIGRlc2NyaXB0aW9uOiB7XG4gICAgICAgIGtlZXBlcjogJydcbiAgICAgIH0sXG4gICAgICBmbGFnczoge1xuICAgICAgICBsb2NrZWQ6IGZhbHNlLFxuICAgICAgICBkaXNwbGF5Rm9ybXVsYTogZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgb2YgW1xuICAgICAgJ3N0cicsXG4gICAgICAnY29uJyxcbiAgICAgICdzaXonLFxuICAgICAgJ2RleCcsXG4gICAgICAnYXBwJyxcbiAgICAgICdpbnQnLFxuICAgICAgJ3BvdycsXG4gICAgICAnZWR1J1xuICAgIF0pIHtcbiAgICAgIGlmICh0eXBlb2YgcGNba2V5XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc3lzdGVtLmNoYXJhY3RlcmlzdGljc1trZXldID0ge1xuICAgICAgICAgIHZhbHVlOiBOdW1iZXIocGNba2V5XSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBbJ3NhbicsICdtb3YnLCAnYnVpbGQnLCAnYXJtb3InLCAnbGNrJywgJ2hwJywgJ21wJ10pIHtcbiAgICAgIGlmICh0eXBlb2YgcGNba2V5XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc3lzdGVtLmF0dHJpYnNba2V5XSA9IHtcbiAgICAgICAgICB2YWx1ZTogTnVtYmVyKHBjW2tleV0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYy5kYiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHN5c3RlbS5hdHRyaWJzLmRiID0ge1xuICAgICAgICB2YWx1ZTogcGMuZGJcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgb2YgWydhZ2UnLCAnb2NjdXBhdGlvbiddKSB7XG4gICAgICBpZiAodHlwZW9mIHBjW2tleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHN5c3RlbS5pbmZvc1trZXldID0gcGNba2V5XVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHBjLnNhbkxvc3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCBbcGFzc2VkLCBmYWlsZWRdID0gcGMuc2FuTG9zcy5zcGxpdCgvWy/vvI9dLylcbiAgICAgIHN5c3RlbS5zcGVjaWFsLnNhbkxvc3MgPSB7XG4gICAgICAgIGNoZWNrUGFzc2VkOiBwYXNzZWQsXG4gICAgICAgIGNoZWNrRmFpbGxlZDogZmFpbGVkXG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcGMuYXR0YWNrc1BlclJvdW5kICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgc3lzdGVtLnNwZWNpYWwuYXR0YWNrc1BlclJvdW5kID0gTnVtYmVyKHBjLmF0dGFja3NQZXJSb3VuZClcbiAgICB9XG4gICAgc3lzdGVtLmRlc2NyaXB0aW9uLmtlZXBlciA9IHBjLmdtbm90ZXNcbiAgICBpZiAoQ09ORklHLmRlYnVnLkNvQzdJbXBvcnRlcikge1xuICAgICAgY29uc29sZS5kZWJ1ZygnYWN0b3JEYXRhOicsIHN5c3RlbSlcbiAgICB9XG4gICAgcmV0dXJuIHN5c3RlbVxuICB9XG5cbiAgLyoqXG4gICAqIGl0ZW1zRGF0YSwgY29udmVydCBwYXJzZUNoYXJhY3RlciBkYXRhIGludG8gQWN0b3IgaXRlbSBkYXRhXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYyBvYmplY3Qgd2l0aCB0aGUgZGF0YSBleHRyYWN0ZWQgZnJvbSB0aGUgY2hhcmFjdGVyIGFzIHJldHVybmVkIGZyb20gYHBhcnNlQ2hhcmFjdGVyYFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBmb3JtYXR0ZWQgQWN0b3IgZGF0YVxuICAgKi9cbiAgYXN5bmMgaXRlbXNEYXRhIChwYykge1xuICAgIGNvbnN0IGl0ZW1zID0gW11cbiAgICB0aGlzLndlYXBvblNraWxscyA9IFtdXG4gICAgLy8gV2VhcG9uIHNraWxsc1xuICAgIGlmICh0eXBlb2YgcGMuYXR0YWNrcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGZvciAoY29uc3QgYXR0YWNrIG9mIHBjLmF0dGFja3MpIHtcbiAgICAgICAgbGV0IHNraWxsID0gZmFsc2VcbiAgICAgICAgaWYgKGF0dGFjay5zeXN0ZW0/LnNraWxsPy5pZCAhPT0gdHJ1ZSkge1xuICAgICAgICAgIHNraWxsID0gYXdhaXQgdGhpcy53ZWFwb25Ta2lsbChhdHRhY2spXG4gICAgICAgICAgaXRlbXMucHVzaChza2lsbClcbiAgICAgICAgfVxuICAgICAgICBhdHRhY2suc3lzdGVtLnNraWxsLmlkID0gbnVsbFxuICAgICAgICBpdGVtcy5wdXNoKGF0dGFjaylcbiAgICAgICAgdGhpcy53ZWFwb25Ta2lsbHMucHVzaChbc2tpbGwsIGF0dGFja10pXG4gICAgICB9XG4gICAgfVxuICAgIC8vIFNraWxsc1xuICAgIGlmICh0eXBlb2YgcGMuc2tpbGxzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZm9yIChjb25zdCBza2lsbCBvZiBwYy5za2lsbHMpIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBhd2FpdCBDb0M3VXRpbGl0aWVzLmd1ZXNzSXRlbSgnc2tpbGwnLCBza2lsbC5uYW1lLCB7XG4gICAgICAgICAgc291cmNlOiB0aGlzLml0ZW1Mb2NhdGlvbnNcbiAgICAgICAgfSlcbiAgICAgICAgaWYgKHR5cGVvZiBleGlzdGluZyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBjb25zdCBjbG9uZWQgPSBleGlzdGluZy50b09iamVjdCgpXG4gICAgICAgICAgY2xvbmVkLnN5c3RlbS5iYXNlID0gc2tpbGwudmFsdWVcbiAgICAgICAgICBpZiAodHlwZW9mIHNraWxsLnB1c2ggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjbG9uZWQuc3lzdGVtLnByb3BlcnRpZXMucHVzaCA9IHNraWxsLnB1c2hcbiAgICAgICAgICB9XG4gICAgICAgICAgaXRlbXMucHVzaChmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShjbG9uZWQpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7fVxuICAgICAgICAgIGlmICh0eXBlb2Ygc2tpbGwucHVzaCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucHVzaCA9IHNraWxsLnB1c2hcbiAgICAgICAgICB9XG4gICAgICAgICAgaXRlbXMucHVzaChDb0NBY3Rvci5lbXB0eVNraWxsKHNraWxsLm5hbWUsIHNraWxsLnZhbHVlLCBvcHRpb25zKSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBMYW5ndWFnZXNcbiAgICBpZiAodHlwZW9mIHBjLmxhbmd1YWdlcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGZvciAoY29uc3Qgc2tpbGwgb2YgcGMubGFuZ3VhZ2VzKSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0gYXdhaXQgQ29DN1V0aWxpdGllcy5ndWVzc0l0ZW0oJ3NraWxsJywgc2tpbGwubmFtZSwge1xuICAgICAgICAgIHNvdXJjZTogdGhpcy5pdGVtTG9jYXRpb25zXG4gICAgICAgIH0pXG4gICAgICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgY29uc3QgY2xvbmVkID0gZXhpc3RpbmcudG9PYmplY3QoKVxuICAgICAgICAgIGNsb25lZC5zeXN0ZW0uYmFzZSA9IHNraWxsLnZhbHVlXG4gICAgICAgICAgaXRlbXMucHVzaChmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShjbG9uZWQpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1zLnB1c2goXG4gICAgICAgICAgICBDb0NBY3Rvci5lbXB0eVNraWxsKHNraWxsLm5hbWUsIHNraWxsLnZhbHVlLCB7XG4gICAgICAgICAgICAgIGltZzogQ29DN0l0ZW0uaWNvbkxhbmd1YWdlLFxuICAgICAgICAgICAgICBzcGVjaWFsaXphdGlvbjogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lkxhbmd1YWdlU3BlY2lhbGl6YXRpb25OYW1lJylcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFNwZWxsc1xuICAgIGlmICh0eXBlb2YgcGMuc3BlbGxzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZm9yIChjb25zdCBuYW1lIG9mIHBjLnNwZWxscykge1xuICAgICAgICBjb25zdCBleGlzdGluZyA9IGF3YWl0IENvQzdVdGlsaXRpZXMuZ3Vlc3NJdGVtKCdzcGVsbCcsIG5hbWUsIHtcbiAgICAgICAgICBzb3VyY2U6IHRoaXMuaXRlbUxvY2F0aW9uc1xuICAgICAgICB9KVxuICAgICAgICBpZiAodHlwZW9mIGV4aXN0aW5nICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGNvbnN0IGNsb25lZCA9IGV4aXN0aW5nLnRvT2JqZWN0KClcbiAgICAgICAgICBpdGVtcy5wdXNoKGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKGNsb25lZCkpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbXMucHVzaChDb0NBY3Rvci5lbXB0eVNwZWxsKG5hbWUpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpdGVtc1xuICB9XG5cbiAgLyoqIHdlYXBvblNraWxsIHRyaWVzIHRvIGd1ZXNzIHdoYXQga2luZCBvZiB3ZWFwb24gc2tpbGwgdG8gdXNlIGZvciB3ZWFwb24gZnJvbSBpdCdzIG5hbWVcbiAgICogQHBhcmFtIHdlYXBvbjogSlNPTiwgd2VhcG9uIGRhdGFcbiAgICovXG4gIGFzeW5jIHdlYXBvblNraWxsICh3ZWFwb24pIHtcbiAgICBsZXQgc2tpbGwgPSBudWxsXG4gICAgY29uc3QgbG9jYWxpemVkRmlyZWFybSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5GaXJlYXJtU3BlY2lhbGl6YXRpb25OYW1lJylcbiAgICBpZiAodGhpcy5nZXRSZWdFeCh0aGlzLmtleXMuaGFuZGd1bikuZXhlYyh3ZWFwb24ubmFtZSkpIHtcbiAgICAgIHNraWxsID0gYXdhaXQgQ29DN1V0aWxpdGllcy5ndWVzc0l0ZW0oJ3NraWxsJywgbG9jYWxpemVkRmlyZWFybSArICcgKCcgKyBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuU2tpbGxOYW1lSGFuZGd1bicpICsgJyknLCB7XG4gICAgICAgIGNvbWJhdDogdHJ1ZSxcbiAgICAgICAgc291cmNlOiB0aGlzLml0ZW1Mb2NhdGlvbnNcbiAgICAgIH0pXG4gICAgICBpZiAoQ09ORklHLmRlYnVnLkNvQzdJbXBvcnRlcikge1xuICAgICAgICBjb25zb2xlLmRlYnVnKGAke3dlYXBvbi5uYW1lfSB1c2VzIEhhbmRndW4gc2tpbGw6ICR7c2tpbGx9YClcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuZ2V0UmVnRXgodGhpcy5rZXlzLnJpZmxlKS5leGVjKHdlYXBvbi5uYW1lKSkge1xuICAgICAgc2tpbGwgPSBhd2FpdCBDb0M3VXRpbGl0aWVzLmd1ZXNzSXRlbSgnc2tpbGwnLCBsb2NhbGl6ZWRGaXJlYXJtICsgJyAoJyArIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ta2lsbE5hbWVSaWZsZVNob3RndW4nKSArICcpJywge1xuICAgICAgICBjb21iYXQ6IHRydWUsXG4gICAgICAgIHNvdXJjZTogdGhpcy5pdGVtTG9jYXRpb25zXG4gICAgICB9KVxuICAgICAgaWYgKCFza2lsbCkge1xuICAgICAgICBza2lsbCA9IGF3YWl0IENvQzdVdGlsaXRpZXMuZ3Vlc3NJdGVtKCdza2lsbCcsIGxvY2FsaXplZEZpcmVhcm0gKyAnICgnICsgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlNraWxsTmFtZVJpZmxlJykgKyAnKScsIHtcbiAgICAgICAgICBjb21iYXQ6IHRydWUsXG4gICAgICAgICAgc291cmNlOiB0aGlzLml0ZW1Mb2NhdGlvbnNcbiAgICAgICAgfSlcbiAgICAgICAgaWYgKCFza2lsbCkge1xuICAgICAgICAgIHNraWxsID0gYXdhaXQgQ29DN1V0aWxpdGllcy5ndWVzc0l0ZW0oJ3NraWxsJywgbG9jYWxpemVkRmlyZWFybSArICcgKCcgKyBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuU2tpbGxOYW1lU2hvdGd1bicpICsgJyknLCB7XG4gICAgICAgICAgICBjb21iYXQ6IHRydWUsXG4gICAgICAgICAgICBzb3VyY2U6IHRoaXMuaXRlbUxvY2F0aW9uc1xuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChDT05GSUcuZGVidWcuQ29DN0ltcG9ydGVyKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoYCR7d2VhcG9uLm5hbWV9IHVzZXMgUmlmbGUgc2tpbGw6ICR7c2tpbGx9YClcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuZ2V0UmVnRXgodGhpcy5rZXlzLnNtYikuZXhlYyh3ZWFwb24ubmFtZSkpIHtcbiAgICAgIHNraWxsID0gYXdhaXQgQ29DN1V0aWxpdGllcy5ndWVzc0l0ZW0oJ3NraWxsJywgbG9jYWxpemVkRmlyZWFybSArICcgKCcgKyBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuU2tpbGxOYW1lU21iJykgKyAnKScsIHtcbiAgICAgICAgY29tYmF0OiB0cnVlLFxuICAgICAgICBzb3VyY2U6IHRoaXMuaXRlbUxvY2F0aW9uc1xuICAgICAgfSlcbiAgICAgIGlmIChDT05GSUcuZGVidWcuQ29DN0ltcG9ydGVyKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoYCR7d2VhcG9uLm5hbWV9IHVzZXMgU3VibWFjaGluZSBHdW4gc2tpbGw6ICR7c2tpbGx9YClcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuZ2V0UmVnRXgodGhpcy5rZXlzLm1hY2hpbmVHdW4pLmV4ZWMod2VhcG9uLm5hbWUpKSB7XG4gICAgICBza2lsbCA9IGF3YWl0IENvQzdVdGlsaXRpZXMuZ3Vlc3NJdGVtKCdza2lsbCcsIGxvY2FsaXplZEZpcmVhcm0gKyAnICgnICsgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlNraWxsbmFtZU1hY2hpbmVHdW4nKSArICcpJywge1xuICAgICAgICBjb21iYXQ6IHRydWUsXG4gICAgICAgIHNvdXJjZTogdGhpcy5pdGVtTG9jYXRpb25zXG4gICAgICB9KVxuICAgICAgaWYgKENPTkZJRy5kZWJ1Zy5Db0M3SW1wb3J0ZXIpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhgJHt3ZWFwb24ubmFtZX0gdXNlcyBNYWNoaW5lIEd1biBza2lsbDogJHtza2lsbH1gKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5nZXRSZWdFeCh0aGlzLmtleXMubGF1bmNoZWQpLmV4ZWMod2VhcG9uLm5hbWUpKSB7XG4gICAgICBza2lsbCA9IGF3YWl0IENvQzdVdGlsaXRpZXMuZ3Vlc3NJdGVtKCdza2lsbCcsIGxvY2FsaXplZEZpcmVhcm0gKyAnICgnICsgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlNraWxsbmFtZUxhdW5jaCcpICsgJyknLCB7XG4gICAgICAgIGNvbWJhdDogdHJ1ZSxcbiAgICAgICAgc291cmNlOiB0aGlzLml0ZW1Mb2NhdGlvbnNcbiAgICAgIH0pXG4gICAgICBpZiAoQ09ORklHLmRlYnVnLkNvQzdJbXBvcnRlcikge1xuICAgICAgICBjb25zb2xlLmRlYnVnKGAke3dlYXBvbi5uYW1lfSB1c2VzIExhdW5jaCBza2lsbDogJHtza2lsbH1gKVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2tpbGwgIT09IG51bGwgJiYgdHlwZW9mIHNraWxsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3Qgc2tpbGxDbG9uZSA9IHNraWxsLmNsb25lKHtcbiAgICAgICAgc3lzdGVtOiB7XG4gICAgICAgICAgdmFsdWU6IHdlYXBvbi5zeXN0ZW0/LnNraWxsPy5pZFxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgcmV0dXJuIHNraWxsQ2xvbmVcbiAgICB9XG4gICAgY29uc3QgZmlyZWFybXMgPSB3ZWFwb24uc3lzdGVtPy5wcm9wZXJ0aWVzPy5ybmdkXG4gICAgY29uc3QgcGFydHMgPSBDb0M3SXRlbS5nZXROYW1lUGFydHNTcGVjKFxuICAgICAgd2VhcG9uLm5hbWUsXG4gICAgICBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgIGZpcmVhcm1zXG4gICAgICAgICAgPyAnQ29DNy5GaXJlYXJtU3BlY2lhbGl6YXRpb25OYW1lJ1xuICAgICAgICAgIDogJ0NvQzcuRmlnaHRpbmdTcGVjaWFsaXphdGlvbk5hbWUnXG4gICAgICApXG4gICAgKVxuICAgIGNvbnN0IG5ld1NraWxsID0ge1xuICAgICAgdHlwZTogJ3NraWxsJyxcbiAgICAgIG5hbWU6IHBhcnRzLm5hbWUsXG4gICAgICBzeXN0ZW06IHtcbiAgICAgICAgc2tpbGxOYW1lOiBwYXJ0cy5za2lsbE5hbWUsXG4gICAgICAgIHNwZWNpYWxpemF0aW9uOiBwYXJ0cy5zcGVjaWFsaXphdGlvbixcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIHNwZWNpYWw6IHRydWUsXG4gICAgICAgICAgZmlnaHRpbmc6ICFmaXJlYXJtcyxcbiAgICAgICAgICBmaXJlYXJtOiBmaXJlYXJtcyxcbiAgICAgICAgICBjb21iYXQ6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgYmFzZTogd2VhcG9uLnN5c3RlbT8uc2tpbGw/LmlkLFxuICAgICAgICB2YWx1ZTogd2VhcG9uLnN5c3RlbT8uc2tpbGw/LmlkXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChDT05GSUcuZGVidWcuQ29DN0ltcG9ydGVyKSB7XG4gICAgICBjb25zb2xlLmRlYnVnKFxuICAgICAgICBgV2VhcG9uIHNraWxsIG5vdCBmb3VuZCBmb3IgJHt3ZWFwb24ubmFtZX0sIGNyZWF0aW5nIGEgbmV3IG9uZWAsXG4gICAgICAgIG5ld1NraWxsXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBuZXdTa2lsbFxuICB9XG5cbiAgLyoqXG4gICAqIG5lZWRzQ29udmVyc2lvbiBkb2VzIGFuIGV2YWx1YXRpb24gdG8gc2VlIGlmIHRoZSBnaXZlbiBucGMgbmVlZHMgdG8gYmUgY29udmVydGVkIHRvIDd0aCBFZGl0aW9uXG4gICAqIFJldHVybnMgYGZhbHNlYCB3aGVuIGFueSBvZiB0aGUgQ2hhcmFjdGVyaXN0aWNzIHZhbHVlIGl0J3MgYWJvdmUgMjlcbiAgICovXG4gIG5lZWRzQ29udmVyc2lvbiAobnBjKSB7XG4gICAgbGV0IG5lZWRzQ29udmVyc2lvblJlc3VsdCA9IHRydWVcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBbXG4gICAgICAnc3RyJyxcbiAgICAgICdjb24nLFxuICAgICAgJ3NpeicsXG4gICAgICAnZGV4JyxcbiAgICAgICdhcHAnLFxuICAgICAgJ2ludCcsXG4gICAgICAncG93JyxcbiAgICAgICdlZHUnXG4gICAgXSkge1xuICAgICAgaWYgKHR5cGVvZiBucGNba2V5XSAhPT0gJ3VuZGVmaW5lZCcgJiYgbnBjW2tleV0gPiAzMCkge1xuICAgICAgICBuZWVkc0NvbnZlcnNpb25SZXN1bHQgPSBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoQ09ORklHLmRlYnVnLkNvQzdJbXBvcnRlcikge1xuICAgICAgY29uc29sZS5kZWJ1ZygnbmVlZHNDb252ZXJzaW9uOicsIG5lZWRzQ29udmVyc2lvblJlc3VsdClcbiAgICB9XG4gICAgcmV0dXJuIG5lZWRzQ29udmVyc2lvblJlc3VsdFxuICB9XG5cbiAgLyoqXG4gICAqIGNyZWF0ZUFjdG9yIG1haW4gbWV0aG9kIHRvIGNyZWF0ZSBhbiBgQWN0b3JgIGZyb20gYSBnaXZlIHVzZXIgaW5wdXQsIHRha2VzIG9uIGFjY291bnQgdGhlIGxhbmcsIGVudGl0eSB0eXBlLFxuICAgKiB0aGUgY29udmVydCB0byA3IEVkaXRpb24gZmxhZywgYW5kIHRoZSByYXcgZW50aXR5IGRhdGEuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dHMgaW5wdXRzIGZyb20gdGhlIGZvcm0gdG8gY3JlYXRlIGFuIEFjdG9yXG4gICAqIEByZXR1cm5zIHtBY3Rvcn0gdGhlIGZvdW5kcnkgYEFjdG9yYCBmcm9tIHRoZSBnaXZlbiBgaW5wdXRgIG9wdGlvbnNcbiAgICovXG4gIGFzeW5jIGNyZWF0ZUFjdG9yIChpbnB1dHMpIHtcbiAgICBpZiAoQ09ORklHLmRlYnVnLkNvQzdJbXBvcnRlcikge1xuICAgICAgY29uc29sZS5kZWJ1ZygnY3JlYXRlQWN0b3I6JywgaW5wdXRzKVxuICAgIH1cbiAgICBjb25zdCBsYW5nID0gQ29DN0FjdG9ySW1wb3J0ZXJSZWdFeHAuY2hlY2tMYW5ndWFnZShpbnB1dHMubGFuZylcbiAgICB0aGlzLmtleXMgPSBDb0M3QWN0b3JJbXBvcnRlclJlZ0V4cC5nZXRLZXlzKGxhbmcpXG4gICAgdGhpcy5yZWdFeCA9IENvQzdBY3RvckltcG9ydGVyUmVnRXhwLmdldFJlZ3VsYXJFeHByZXNzaW9ucyhsYW5nKVxuICAgIHRoaXMuaXRlbUxvY2F0aW9ucyA9IGlucHV0cy5zb3VyY2VcbiAgICBpZiAoQ09ORklHLmRlYnVnLkNvQzdJbXBvcnRlcikge1xuICAgICAgY29uc29sZS5kZWJ1ZygnUmVndWxhciBFeHByZXNzaW9uczonLCBsYW5nLCB0aGlzLmtleXMsIHRoaXMucmVnRXgpXG4gICAgfVxuICAgIGxldCBjaGFyYWN0ZXIgPSBhd2FpdCB0aGlzLnBhcnNlQ2hhcmFjdGVyKGlucHV0cy50ZXh0KVxuICAgIGlmIChDT05GSUcuZGVidWcuQ29DN0ltcG9ydGVyKSB7XG4gICAgICBjb25zb2xlLmRlYnVnKCdwYXJzZUNoYXJhY3RlcjonLCBjaGFyYWN0ZXIpXG4gICAgfVxuICAgIGlmIChcbiAgICAgIChpbnB1dHMuY29udmVydEZyb202RSA9PT0gJ2NvYy1ndWVzcycgJiZcbiAgICAgICAgdGhpcy5uZWVkc0NvbnZlcnNpb24oY2hhcmFjdGVyKSkgfHxcbiAgICAgIGlucHV0cy5jb252ZXJ0RnJvbTZFID09PSAnY29jLWNvbnZlcnQnXG4gICAgKSB7XG4gICAgICBjaGFyYWN0ZXIgPSBhd2FpdCB0aGlzLmNvbnZlcnQ3RShjaGFyYWN0ZXIpXG4gICAgfVxuICAgIGNvbnN0IGNoYXJhY3RlckRhdGEgPSB7XG4gICAgICBuYW1lOiBjaGFyYWN0ZXIubmFtZSxcbiAgICAgIGFjdG9yOiB0aGlzLmFjdG9yRGF0YShjaGFyYWN0ZXIpLFxuICAgICAgaXRlbXM6IGF3YWl0IHRoaXMuaXRlbXNEYXRhKGNoYXJhY3RlcilcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGlucHV0cy50ZXN0TW9kZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaW5wdXRzLnRlc3RNb2RlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gY2hhcmFjdGVyRGF0YVxuICAgIH1cbiAgICBjb25zdCBucGMgPSBhd2FpdCB0aGlzLmNyZWF0ZUVudGl0eShjaGFyYWN0ZXJEYXRhLCBpbnB1dHMuZW50aXR5KVxuICAgIHJldHVybiBucGNcbiAgfVxuXG4gIC8qKlxuICAgKiBjb252ZXJ0N0UgQ29udmVydHMgdGhlIGdpdmVuIGVudGl0eSBmcm9tIDYgZWRpdGlvbiB0byA3IGVkaXRpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IHRoZSBlbnRpdHkgb2JqZWN0IGFzIG9idGFpbmVkIGZyb20gYHBhcnNlQ2hhcmFjdGVyYFxuICAgKiBAcmV0dXJuIHRoZSBzYW1lIG9iamVjdCBidXQgd2l0aCB1cGRhdGVkIGNoYXJhY3RlcmlzdGljcyBmb3IgNyBlZGl0aW9uXG4gICAqL1xuICBhc3luYyBjb252ZXJ0N0UgKGNyZWF0dXJlKSB7XG4gICAgaWYgKENPTkZJRy5kZWJ1Zy5Db0M3SW1wb3J0ZXIpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoJ0NvbnZlcnRpbmcgbnBjJywgY3JlYXR1cmUpXG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IG9mIFsnc3RyJywgJ2NvbicsICdzaXonLCAnZGV4JywgJ2FwcCcsICdpbnQnLCAncG93J10pIHtcbiAgICAgIGlmICh0eXBlb2YgY3JlYXR1cmVba2V5XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY3JlYXR1cmVba2V5XSAqPSA1XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY3JlYXR1cmUuZWR1ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKGNyZWF0dXJlLmVkdSA8PSAxOCkge1xuICAgICAgICBjcmVhdHVyZS5lZHUgKj0gNVxuICAgICAgfSBlbHNlIGlmIChjcmVhdHVyZS5lZHUgPD0gMjYpIHtcbiAgICAgICAgY3JlYXR1cmUuZWR1ID0gY3JlYXR1cmUuZWR1ICsgOTAgLSAxOFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY3JlYXR1cmUuZWR1ID49MjhcbiAgICAgICAgY3JlYXR1cmUuZWR1ID0gOTlcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjcmVhdHVyZS5kYiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChjcmVhdHVyZS5kYiA9PT0gJy0xZDQnKSB7XG4gICAgICAgIGNyZWF0dXJlLmRiID0gLTFcbiAgICAgIH0gZWxzZSBpZiAoY3JlYXR1cmUuZGIgPT09ICctMWQ2Jykge1xuICAgICAgICBjcmVhdHVyZS5kYiA9IC0yXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChDT05GSUcuZGVidWcuQ29DN0ltcG9ydGVyKSB7XG4gICAgICBjb25zb2xlLmRlYnVnKCdjb252ZXJ0N0U6ICcsIGNyZWF0dXJlKVxuICAgIH1cbiAgICByZXR1cm4gY3JlYXR1cmVcbiAgfVxufVxuIiwiLyogZ2xvYmFsICQsIEZpbGUsIEZpbGVQaWNrZXIsIGdhbWUsIHVpICovXG5leHBvcnQgY2xhc3MgQ29DN0RpcmVjdG9yeVBpY2tlciBleHRlbmRzIEZpbGVQaWNrZXIge1xuICBnZXQgdGl0bGUgKCkge1xuICAgIHJldHVybiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuUGlja0RpcmVjdG9yeScpXG4gIH1cblxuICBfb25TdWJtaXQgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IHBhdGggPSBldmVudC50YXJnZXQudGFyZ2V0LnZhbHVlXG4gICAgY29uc3QgYWN0aXZlU291cmNlID0gdGhpcy5hY3RpdmVTb3VyY2VcbiAgICBjb25zdCBidWNrZXQgPSBldmVudC50YXJnZXQuYnVja2V0ID8gZXZlbnQudGFyZ2V0LmJ1Y2tldC52YWx1ZSA6IG51bGxcbiAgICB0aGlzLmZpZWxkLnZhbHVlID0gQ29DN0RpcmVjdG9yeVBpY2tlci5mb3JtYXQoe1xuICAgICAgYWN0aXZlU291cmNlLFxuICAgICAgYnVja2V0LFxuICAgICAgcGF0aFxuICAgIH0pXG4gICAgdGhpcy5jbG9zZSgpXG4gIH1cblxuICBzdGF0aWMgRGVmYXVsdERpcmVjdG9yeSAodmFsKSB7XG4gICAgcmV0dXJuIHZhbCA9PT0gbnVsbCA/ICcnIDogU3RyaW5nKHZhbClcbiAgfVxuXG4gIHN0YXRpYyBmb3JtYXQgKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLmJ1Y2tldCAhPT0gbnVsbFxuICAgICAgPyBgWyR7dmFsdWUuYWN0aXZlU291cmNlfToke3ZhbHVlLmJ1Y2tldH1dICR7dmFsdWUucGF0aH1gXG4gICAgICA6IGBbJHt2YWx1ZS5hY3RpdmVTb3VyY2V9XSAke3ZhbHVlLnBhdGh9YFxuICB9XG5cbiAgc3RhdGljIHBhcnNlIChyYXcpIHtcbiAgICBjb25zdCBzdHIgPSByYXcgPz8gJydcbiAgICBjb25zdCBtYXRjaGVzID0gc3RyLm1hdGNoKC9eXFxbKFteOl0rKSg6KC4rKSk/XFxdXFxzKiguKyk/JC91KVxuXG4gICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFjdGl2ZVNvdXJjZTogbWF0Y2hlc1sxXSxcbiAgICAgICAgYnVja2V0OiBtYXRjaGVzWzNdID8/ICcnLFxuICAgICAgICBjdXJyZW50OiBtYXRjaGVzWzRdXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBhY3RpdmVTb3VyY2U6ICdkYXRhJyxcbiAgICAgIGJ1Y2tldDogbnVsbCxcbiAgICAgIGN1cnJlbnQ6IHN0clxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBwcm9jZXNzSHRtbCAoaHRtbCkge1xuICAgICQoaHRtbClcbiAgICAgIC5maW5kKCdpbnB1dFtkYXRhLWR0eXBlPVwiRGVmYXVsdERpcmVjdG9yeVwiXScpXG4gICAgICAuZWFjaCgoaSwgZWwpID0+IHtcbiAgICAgICAgY29uc3QgaW5wdXQgPSAkKGVsKVxuICAgICAgICBpbnB1dC5wcm9wKCdyZWFkb25seScsIHRydWUpXG4gICAgICAgIGlmICghaW5wdXQubmV4dCgpLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnN0IHBpY2tlciA9IG5ldyBDb0M3RGlyZWN0b3J5UGlja2VyKHtcbiAgICAgICAgICAgIGZpZWxkOiBpbnB1dFswXSxcbiAgICAgICAgICAgIC4uLkNvQzdEaXJlY3RvcnlQaWNrZXIucGFyc2UoaW5wdXQudmFsKCkpXG4gICAgICAgICAgfSlcbiAgICAgICAgICBjb25zdCBwaWNrZXJCdXR0b24gPSAkKFxuICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiZmlsZS1waWNrZXJcIiB0aXRsZT1cIicgK1xuICAgICAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuUGlja0RpcmVjdG9yeScpICtcbiAgICAgICAgICAgICAgJ1wiPjxpIGNsYXNzPVwiZmFzIGZhLWZpbGUtaW1wb3J0IGZhLWZ3XCI+PC9pPjwvYnV0dG9uPidcbiAgICAgICAgICApXG4gICAgICAgICAgQ29DN0RpcmVjdG9yeVBpY2tlci5jcmVhdGVEZWZhdWx0RGlyZWN0b3J5KClcbiAgICAgICAgICBwaWNrZXJCdXR0b24ub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgcGlja2VyLnJlbmRlcih0cnVlKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgaW5wdXQucGFyZW50KCkuYXBwZW5kKHBpY2tlckJ1dHRvbilcbiAgICAgICAgfVxuICAgICAgfSlcbiAgfVxuXG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcblxuICAgICQoaHRtbCkuZmluZCgnb2wuZmlsZXMtbGlzdCcpLnJlbW92ZSgpXG4gICAgJChodG1sKS5maW5kKCdmb290ZXIgZGl2JykucmVtb3ZlKClcbiAgICAkKGh0bWwpLmZpbmQoJ2Zvb3RlciBidXR0b24nKS50ZXh0KGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5QaWNrRGlyZWN0b3J5JykpXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY3JlYXRlRGVmYXVsdERpcmVjdG9yeSAoKSB7XG4gICAgY29uc3QgcGFyc2VkID0gQ29DN0RpcmVjdG9yeVBpY2tlci5wYXJzZShcbiAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2Rob2xlVXBsb2FkRGlyZWN0b3J5JylcbiAgICApXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IENvQzdEaXJlY3RvcnlQaWNrZXIuY3JlYXRlRGlyZWN0b3J5KFxuICAgICAgICBwYXJzZWQuYWN0aXZlU291cmNlLFxuICAgICAgICBwYXJzZWQuY3VycmVudCxcbiAgICAgICAgeyBidWNrZXQ6IHBhcnNlZC5idWNrZXQgfVxuICAgICAgKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoIWUubWVzc2FnZS5zdGFydHNXaXRoKCdFRVhJU1QnKSkge1xuICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5BY3RvckltcG9ydGVyVXBsb2FkRXJyb3InKVxuICAgICAgICApXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyB1cGxvYWRUb0RlZmF1bHREaXJlY3RvcnkgKGZpbGUsIGZpbGVuYW1lKSB7XG4gICAgY29uc3QgcGFyc2VkID0gQ29DN0RpcmVjdG9yeVBpY2tlci5wYXJzZShcbiAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2Rob2xlVXBsb2FkRGlyZWN0b3J5JylcbiAgICApXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBGaWxlUGlja2VyLnVwbG9hZChcbiAgICAgIHBhcnNlZC5hY3RpdmVTb3VyY2UsXG4gICAgICBwYXJzZWQuY3VycmVudCxcbiAgICAgIG5ldyBGaWxlKFtmaWxlXSwgZmlsZW5hbWUsIHtcbiAgICAgICAgdHlwZTogJ2ltYWdlL3BuZydcbiAgICAgIH0pLFxuICAgICAgeyBidWNrZXQ6IHBhcnNlZC5idWNrZXQgfVxuICAgIClcbiAgICBpZiAoIXJlc3BvbnNlLnBhdGgpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkZpbGVVcGxvYWRFcnJvcicpKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIHJldHVybiBwYXJzZWQuY3VycmVudCArICcvJyArIGZpbGVuYW1lXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBBY3RvciwgQ09ORklHLCBmb3VuZHJ5LCBnYW1lLCB1aSwgZmV0Y2ggKi9cbmltcG9ydCB7IENvQ0FjdG9yIH0gZnJvbSAnLi4vYWN0b3JzL2FjdG9yLmpzJ1xuaW1wb3J0IHsgQ29DN0RpcmVjdG9yeVBpY2tlciB9IGZyb20gJy4uL3NjcmlwdHMvY29jNy1kaXJlY3RvcnktcGlja2VyLmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4uL3V0aWxpdGllcy5qcydcblxuLyoqXG4gKiBDb0M3QWN0b3JJbXBvcnRlciBoZWxwZXIgY2xhc3MgdG8gaW1wb3J0IGFuIEFjdG9yIGZyb20gdGhlIHJhdyB0ZXh0IGRlc2NyaXB0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgQ29DN0Rob2xlSG91c2VBY3RvckltcG9ydGVyIHtcbiAgLyoqXG4gICAqIENvbXBvc2UgdGhlIEJhY2tzdG9yeSBmcm9tIHRoZSBkaWZmZXJlbnQgYmxvY2tzLlxuICAgKiBAcGFyYW0ge30gYmFja3N0b3J5SlNPTiBEaG9sZUhvdXNlIGJhY2tzdG9yeSBKU09OXG4gICAqIEByZXR1cm5zIEhUTUwgd2l0aCB0aGUgZm9ybWF0dGVkIGJhY2tzdG9yeVxuICAgKi9cbiAgc3RhdGljIGdldEJhY2tzdG9yeSAoYmFja3N0b3J5SlNPTikge1xuICAgIGNvbnN0IHNlY3Rpb25zID0gW1xuICAgICAgWydkZXNjcmlwdGlvbicsICdEZXNjcmlwdGlvbiddLFxuICAgICAgWyd0cmFpdHMnLCAnVHJhaXRzJ10sXG4gICAgICBbJ2lkZW9sb2d5JywgJ0lkZW9sb2d5J10sXG4gICAgICBbJ2luanVydWVzJywgJ0luanVyaWVzJywgJ2luanVyaWVzJ10sXG4gICAgICBbJ3Blb3BsZScsICdQZW9wbGUnXSxcbiAgICAgIFsncGhvYmlhcycsICdQaG9iaWFzJ10sXG4gICAgICBbJ2xvY2F0aW9ucycsICdMb2NhdGlvbnMnXSxcbiAgICAgIFsndG9tZXMnLCAnVG9tZXMnXSxcbiAgICAgIFsncG9zc2Vzc2lvbnMnLCAnUG9zc2Vzc2lvbnMnXSxcbiAgICAgIFsnZW5jb3VudGVycycsICdFbmNvdW50ZXJzJ11cbiAgICBdXG4gICAgY29uc3QgYmFja3N0b3J5ID0ge1xuICAgICAgYmxvY2s6IFtdLFxuICAgICAgc2VjdGlvbnM6IFtdXG4gICAgfVxuICAgIGZvciAoY29uc3Qgc2VjdGlvbiBvZiBzZWN0aW9ucykge1xuICAgICAgaWYgKGJhY2tzdG9yeUpTT05bc2VjdGlvblswXV0gIT09IG51bGwpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZWN0aW9uWzJdID09PSAndW5kZWZpbmVkJyB8fCBzZWN0aW9uWzJdID09PSAnJykge1xuICAgICAgICAgIHNlY3Rpb25bMl0gPSBzZWN0aW9uWzBdXG4gICAgICAgIH1cbiAgICAgICAgYmFja3N0b3J5LmJsb2NrLnB1c2goXG4gICAgICAgICAgYDxoMz4ke3NlY3Rpb25bMV19PC9oMz5cXG48ZGl2IGNsYXNzPVwiJHtzZWN0aW9uWzJdfVwiPlxcbiR7XG4gICAgICAgICAgICBiYWNrc3RvcnlKU09OW3NlY3Rpb25bMF1dXG4gICAgICAgICAgfVxcbjwvZGl2PmBcbiAgICAgICAgKVxuICAgICAgICBiYWNrc3Rvcnkuc2VjdGlvbnMucHVzaCh7XG4gICAgICAgICAgdGl0bGU6IHNlY3Rpb25bMV0sXG4gICAgICAgICAgdmFsdWU6IGJhY2tzdG9yeUpTT05bc2VjdGlvblswXV1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gICAgYmFja3N0b3J5LmJsb2NrID1cbiAgICAgICc8aDI+QmFja3N0b3J5PC9oMj5cXG4nICsgYmFja3N0b3J5LmJsb2NrLmpvaW4oJ1xcbicsIGJhY2tzdG9yeS5ibG9jaylcbiAgICByZXR1cm4gYmFja3N0b3J5XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtKU09OfSBkaG9sZUhvdXNlRGF0YSBEaG9sZUhvdXNlSlNPTlxuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgc3RhdGljIGFzeW5jIGNvbnZlcnREaG9sZUhvdXNlQ2hhcmFjdGVyRGF0YSAoZGhvbGVIb3VzZURhdGEsIG9wdGlvbnMpIHtcbiAgICBpZiAoQ09ORklHLmRlYnVnLkNvQzdJbXBvcnRlcikge1xuICAgICAgY29uc29sZS5sb2coJ1NvdXJjZTonLCBkaG9sZUhvdXNlRGF0YSlcbiAgICB9XG4gICAgZGhvbGVIb3VzZURhdGEgPSBkaG9sZUhvdXNlRGF0YS5JbnZlc3RpZ2F0b3JcbiAgICBjb25zdCBiYWNrc3RvcmllcyA9IENvQzdEaG9sZUhvdXNlQWN0b3JJbXBvcnRlci5nZXRCYWNrc3RvcnkoXG4gICAgICBkaG9sZUhvdXNlRGF0YS5CYWNrc3RvcnkgPz8ge31cbiAgICApXG4gICAgY29uc3QgY0RhdGEgPSB7XG4gICAgICBuYW1lOiBkaG9sZUhvdXNlRGF0YS5QZXJzb25hbERldGFpbHMuTmFtZSxcbiAgICAgIGFjdG9yOiB7XG4gICAgICAgIGNoYXJhY3RlcmlzdGljczoge1xuICAgICAgICAgIHN0cjogeyB2YWx1ZTogcGFyc2VJbnQoZGhvbGVIb3VzZURhdGEuQ2hhcmFjdGVyaXN0aWNzLlNUUiwgMTApIH0sXG4gICAgICAgICAgY29uOiB7IHZhbHVlOiBwYXJzZUludChkaG9sZUhvdXNlRGF0YS5DaGFyYWN0ZXJpc3RpY3MuQ09OLCAxMCkgfSxcbiAgICAgICAgICBzaXo6IHsgdmFsdWU6IHBhcnNlSW50KGRob2xlSG91c2VEYXRhLkNoYXJhY3RlcmlzdGljcy5TSVosIDEwKSB9LFxuICAgICAgICAgIGRleDogeyB2YWx1ZTogcGFyc2VJbnQoZGhvbGVIb3VzZURhdGEuQ2hhcmFjdGVyaXN0aWNzLkRFWCwgMTApIH0sXG4gICAgICAgICAgYXBwOiB7IHZhbHVlOiBwYXJzZUludChkaG9sZUhvdXNlRGF0YS5DaGFyYWN0ZXJpc3RpY3MuQVBQLCAxMCkgfSxcbiAgICAgICAgICBpbnQ6IHsgdmFsdWU6IHBhcnNlSW50KGRob2xlSG91c2VEYXRhLkNoYXJhY3RlcmlzdGljcy5JTlQsIDEwKSB9LFxuICAgICAgICAgIHBvdzogeyB2YWx1ZTogcGFyc2VJbnQoZGhvbGVIb3VzZURhdGEuQ2hhcmFjdGVyaXN0aWNzLlBPVywgMTApIH0sXG4gICAgICAgICAgZWR1OiB7IHZhbHVlOiBwYXJzZUludChkaG9sZUhvdXNlRGF0YS5DaGFyYWN0ZXJpc3RpY3MuRURVLCAxMCkgfVxuICAgICAgICB9LFxuICAgICAgICBhdHRyaWJzOiB7XG4gICAgICAgICAgc2FuOiB7XG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VJbnQoZGhvbGVIb3VzZURhdGEuQ2hhcmFjdGVyaXN0aWNzLlNhbml0eSwgMTApLFxuICAgICAgICAgICAgbWF4OiBwYXJzZUludChkaG9sZUhvdXNlRGF0YS5DaGFyYWN0ZXJpc3RpY3MuU2FuaXR5TWF4LCAxMCksXG4gICAgICAgICAgICBkYWlseUxpbWl0OiBNYXRoLmZsb29yKGRob2xlSG91c2VEYXRhLkNoYXJhY3RlcmlzdGljcy5TYW5pdHkgLyA1KVxuICAgICAgICAgIH0sXG4gICAgICAgICAgaHA6IHtcbiAgICAgICAgICAgIHZhbHVlOiBwYXJzZUludChkaG9sZUhvdXNlRGF0YS5DaGFyYWN0ZXJpc3RpY3MuSGl0UHRzLCAxMCksXG4gICAgICAgICAgICBtYXg6IHBhcnNlSW50KGRob2xlSG91c2VEYXRhLkNoYXJhY3RlcmlzdGljcy5IaXRQdHNNYXgsIDEwKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbXA6IHtcbiAgICAgICAgICAgIHZhbHVlOiBwYXJzZUludChkaG9sZUhvdXNlRGF0YS5DaGFyYWN0ZXJpc3RpY3MuTWFnaWNQdHMsIDEwKSxcbiAgICAgICAgICAgIG1heDogcGFyc2VJbnQoZGhvbGVIb3VzZURhdGEuQ2hhcmFjdGVyaXN0aWNzLk1hZ2ljUHRzTWF4LCAxMClcbiAgICAgICAgICB9LFxuICAgICAgICAgIGxjazoge1xuICAgICAgICAgICAgdmFsdWU6IHBhcnNlSW50KGRob2xlSG91c2VEYXRhLkNoYXJhY3RlcmlzdGljcy5MdWNrLCAxMClcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1vdjoge1xuICAgICAgICAgICAgdmFsdWU6IHBhcnNlSW50KGRob2xlSG91c2VEYXRhLkNoYXJhY3RlcmlzdGljcy5Nb3ZlLCAxMCksXG4gICAgICAgICAgICBtYXg6IHBhcnNlSW50KGRob2xlSG91c2VEYXRhLkNoYXJhY3RlcmlzdGljcy5Nb3ZlLCAxMClcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRiOiB7IHZhbHVlOiBkaG9sZUhvdXNlRGF0YS5DaGFyYWN0ZXJpc3RpY3MuRGFtYWdlQm9udXMgfSxcbiAgICAgICAgICBidWlsZDogeyB2YWx1ZTogcGFyc2VJbnQoZGhvbGVIb3VzZURhdGEuQ2hhcmFjdGVyaXN0aWNzLkJ1aWxkLCAxMCkgfVxuICAgICAgICB9LFxuICAgICAgICBpbmZvczoge1xuICAgICAgICAgIG9jY3VwYXRpb246IGRob2xlSG91c2VEYXRhLlBlcnNvbmFsRGV0YWlscy5PY2N1cGF0aW9uLFxuICAgICAgICAgIGFnZTogZGhvbGVIb3VzZURhdGEuUGVyc29uYWxEZXRhaWxzLkFnZSxcbiAgICAgICAgICBzZXg6IGRob2xlSG91c2VEYXRhLlBlcnNvbmFsRGV0YWlscy5HZW5kZXIsXG4gICAgICAgICAgcmVzaWRlbmNlOiBkaG9sZUhvdXNlRGF0YS5QZXJzb25hbERldGFpbHMuUmVzaWRlbmNlLFxuICAgICAgICAgIGJpcnRocGxhY2U6IGRob2xlSG91c2VEYXRhLlBlcnNvbmFsRGV0YWlscy5CaXJ0aHBsYWNlXG4gICAgICAgIH0sXG4gICAgICAgIGJhY2tzdG9yeTogYmFja3N0b3JpZXMuYmxvY2ssXG4gICAgICAgIGJpb2dyYXBoeTogYmFja3N0b3JpZXMuc2VjdGlvbnMsXG4gICAgICAgIGRlc2NyaXB0aW9uOiB7XG4gICAgICAgICAga2VlcGVyOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRGhvbGVIb3VzZUFjdG9ySW1wb3J0ZXJTb3VyY2UnKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2tpbGxzOiBhd2FpdCBDb0M3RGhvbGVIb3VzZUFjdG9ySW1wb3J0ZXIuZXh0cmFjdFNraWxscyhcbiAgICAgICAgZGhvbGVIb3VzZURhdGEuU2tpbGxzLlNraWxsID8/IFtdLFxuICAgICAgICBvcHRpb25zXG4gICAgICApLFxuICAgICAgcG9zc2VzaW9uczogYXdhaXQgQ29DN0Rob2xlSG91c2VBY3RvckltcG9ydGVyLmV4dHJhY3RQb3NzZXNzaW9ucyhcbiAgICAgICAgZGhvbGVIb3VzZURhdGEuUG9zc2Vzc2lvbnM/Lml0ZW0gPz8gW10sXG4gICAgICAgIG9wdGlvbnNcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGNEYXRhXG4gIH1cblxuICBzdGF0aWMgbWFrZVNraWxsTmFtZSAobmFtZSwgc3BlY2lhbGl6YXRpb24pIHtcbiAgICBpZiAoc3BlY2lhbGl6YXRpb24gPT09ICdOb25lJykge1xuICAgICAgc3BlY2lhbGl6YXRpb24gPSAnQW55J1xuICAgIH1cbiAgICBpZiAobmFtZSA9PT0gJ0xhbmd1YWdlIChPdGhlciknIHx8IG5hbWUgPT09ICdMYW5ndWFnZSAoT3duKScpIHtcbiAgICAgIG5hbWUgPSAnTGFuZ3VhZ2UnXG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAnT3BlcmF0ZSBIZWF2eSBNYWNoaW5lJykge1xuICAgICAgbmFtZSA9ICdPcGVyYXRlIEhlYXZ5IE1hY2hpbmVyeSdcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdUaHJvdycgJiYgc3BlY2lhbGl6YXRpb24gPT09ICcnKSB7XG4gICAgICBuYW1lID0gJ0ZpZ2h0aW5nJ1xuICAgICAgc3BlY2lhbGl6YXRpb24gPSAnVGhyb3cnXG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBza2lsbE5hbWU6IHNwZWNpYWxpemF0aW9uID09PSAnJyA/IG5hbWUgOiBzcGVjaWFsaXphdGlvbixcbiAgICAgIHNwZWNpYWxpemF0aW9uOiBzcGVjaWFsaXphdGlvbiA9PT0gJycgPyAnJyA6IG5hbWUsXG4gICAgICBuYW1lOiBuYW1lICsgKHNwZWNpYWxpemF0aW9uID09PSAnJyA/ICcnIDogJyAoJyArIHNwZWNpYWxpemF0aW9uICsgJyknKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBleHRyYWN0U2tpbGxzIChkaG9sZUhvdXNlc2tpbGxzLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgc2tpbGxzID0gW11cbiAgICBmb3IgKGNvbnN0IHNraWxsIG9mIGRob2xlSG91c2Vza2lsbHMpIHtcbiAgICAgIGlmIChza2lsbC5zdWJza2lsbCA9PT0gJ05vbmUnKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG4gICAgICBjb25zdCBwYXJ0cyA9IENvQzdEaG9sZUhvdXNlQWN0b3JJbXBvcnRlci5tYWtlU2tpbGxOYW1lKFxuICAgICAgICBza2lsbC5uYW1lLFxuICAgICAgICBza2lsbC5zdWJza2lsbCA/PyAnJ1xuICAgICAgKVxuICAgICAgY29uc3QgZXhpc3RpbmcgPSBhd2FpdCBDb0M3VXRpbGl0aWVzLmd1ZXNzSXRlbSgnc2tpbGwnLCBwYXJ0cy5uYW1lLCB7XG4gICAgICAgIHNvdXJjZTogb3B0aW9ucy5zb3VyY2UsXG4gICAgICAgIGZhbGxiYWNrQW55OiB0cnVlXG4gICAgICB9KVxuICAgICAgbGV0IGNsb25lZCA9IG51bGxcbiAgICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNsb25lZCA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKGV4aXN0aW5nLnRvT2JqZWN0KCkpXG4gICAgICAgIGNsb25lZC5uYW1lID0gcGFydHMubmFtZVxuICAgICAgICBjbG9uZWQuc3lzdGVtLnNraWxsTmFtZSA9IHBhcnRzLnNraWxsTmFtZVxuICAgICAgICBjbG9uZWQuc3lzdGVtLnNwZWNpYWxpemF0aW9uID0gcGFydHMuc3BlY2lhbGl6YXRpb25cbiAgICAgICAgaWYgKGNsb25lZC5zeXN0ZW0ucHJvcGVydGllcz8ucmVxdWlyZXNuYW1lID8/IGZhbHNlKSB7XG4gICAgICAgICAgY2xvbmVkLnN5c3RlbS5wcm9wZXJ0aWVzLnJlcXVpcmVzbmFtZSA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNsb25lZC5zeXN0ZW0ucHJvcGVydGllcz8ucGlja25hbWVvbmx5ID8/IGZhbHNlKSB7XG4gICAgICAgICAgY2xvbmVkLnN5c3RlbS5wcm9wZXJ0aWVzLnBpY2tuYW1lb25seSA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsb25lZCA9IENvQ0FjdG9yLmVtcHR5U2tpbGwoXG4gICAgICAgICAgcGFydHMuc2tpbGxOYW1lLFxuICAgICAgICAgIHBhcnNlSW50KHNraWxsLnZhbHVlID8/IDAsIDEwKSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzcGVjaWFsaXphdGlvbjpcbiAgICAgICAgICAgICAgcGFydHMuc3BlY2lhbGl6YXRpb24gPT09ICcnID8gZmFsc2UgOiBwYXJ0cy5zcGVjaWFsaXphdGlvblxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICBjbG9uZWQuc3lzdGVtLnByb3BlcnRpZXMgPSBjbG9uZWQuc3lzdGVtLnByb3BlcnRpZXMgPz8ge31cbiAgICAgICAgaWYgKHBhcnRzLnNwZWNpYWxpemF0aW9uID09PSAnRmlnaHRpbmcnKSB7XG4gICAgICAgICAgY2xvbmVkLnN5c3RlbS5wcm9wZXJ0aWVzLmZpZ2h0aW5nID0gdHJ1ZVxuICAgICAgICAgIGNsb25lZC5zeXN0ZW0ucHJvcGVydGllcy5jb21iYXQgPSB0cnVlXG4gICAgICAgICAgY2xvbmVkLnN5c3RlbS5wcm9wZXJ0aWVzLnB1c2ggPSBmYWxzZVxuICAgICAgICB9IGVsc2UgaWYgKHBhcnRzLnNwZWNpYWxpemF0aW9uID09PSAnRmlyZWFybXMnKSB7XG4gICAgICAgICAgY2xvbmVkLnN5c3RlbS5wcm9wZXJ0aWVzLmZpcmVhcm0gPSB0cnVlXG4gICAgICAgICAgY2xvbmVkLnN5c3RlbS5wcm9wZXJ0aWVzLmNvbWJhdCA9IHRydWVcbiAgICAgICAgICBjbG9uZWQuc3lzdGVtLnByb3BlcnRpZXMucHVzaCA9IGZhbHNlXG4gICAgICAgIH0gZWxzZSBpZiAocGFydHMuc2tpbGxOYW1lID09PSAnRG9kZ2UnKSB7XG4gICAgICAgICAgY2xvbmVkLnN5c3RlbS5wcm9wZXJ0aWVzLnB1c2ggPSBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY2xvbmVkLnN5c3RlbS5za2lsbE5hbWUgPT09ICdBbnknKSB7XG4gICAgICAgIGNsb25lZC5uYW1lID0gY2xvbmVkLm5hbWUucmVwbGFjZSgnIChBbnkpJywgJyAoTm9uZSknKVxuICAgICAgICBjbG9uZWQuc3lzdGVtLnNraWxsTmFtZSA9ICdOb25lJ1xuICAgICAgfVxuICAgICAgY2xvbmVkLnN5c3RlbS5iYXNlID0gcGFyc2VJbnQoc2tpbGwudmFsdWUgPz8gMCwgMTApXG4gICAgICBjbG9uZWQuc3lzdGVtLnZhbHVlID0gcGFyc2VJbnQoc2tpbGwudmFsdWUgPz8gMCwgMTApXG4gICAgICBjbG9uZWQuc3lzdGVtLmZsYWdzID0gY2xvbmVkLnN5c3RlbS5mbGFncyA/PyB7fVxuICAgICAgY2xvbmVkLnN5c3RlbS5mbGFncy5vY2N1cGF0aW9uID1cbiAgICAgICAgc2tpbGwub2NjdXBhdGlvbiA9PT0gdHJ1ZSB8fCBza2lsbC5vY2N1cGF0aW9uID09PSAndHJ1ZSdcbiAgICAgIHNraWxscy5wdXNoKGNsb25lZClcbiAgICB9XG4gICAgcmV0dXJuIHNraWxsc1xuICB9XG5cbiAgc3RhdGljIGZpbmRXZWFwb25Ta2lsbElkIChza2lsbE5hbWUsIGNoYXJhY3Rlcikge1xuICAgIGNvbnN0IHNraWxscyA9IGNoYXJhY3Rlci5nZXRFbWJlZGRlZENvbGxlY3Rpb24oJ0l0ZW0nKVxuICAgIGNvbnN0IGNoZWNrTmFtZSA9IHNraWxsTmFtZS5yZXBsYWNlKC9eXFwoKC4rKVxcKSQvLCAnJDEnKVxuICAgIGNvbnN0IGNoYXJhY3RlclNraWxsID0gc2tpbGxzLmZpbmQoaSA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBpLnN5c3RlbT8uc2tpbGxOYW1lID09PSBjaGVja05hbWUgfHxcbiAgICAgICAgaS5zeXN0ZW0/LnNraWxsTmFtZT8uaW5kZXhPZihjaGVja05hbWUpID4gLTFcbiAgICAgIClcbiAgICB9KVxuICAgIHJldHVybiBjaGFyYWN0ZXJTa2lsbFxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGV4dHJhY3RQb3NzZXNzaW9ucyAoZGhvbGVob3VzZVBvc3Nlc3Npb25zLCBvcHRpb25zKSB7XG4gICAgY29uc3QgaXRlbXMgPSBbXVxuICAgIGlmICghQXJyYXkuaXNBcnJheShkaG9sZWhvdXNlUG9zc2Vzc2lvbnMpICYmIGRob2xlaG91c2VQb3NzZXNzaW9ucyAhPSBudWxsKSB7XG4gICAgICBkaG9sZWhvdXNlUG9zc2Vzc2lvbnMgPSBbZGhvbGVob3VzZVBvc3Nlc3Npb25zXVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgZGhvbGVob3VzZVBvc3Nlc3Npb25zKSB7XG4gICAgICBjb25zdCBleGlzdGluZyA9IGF3YWl0IENvQzdVdGlsaXRpZXMuZ3Vlc3NJdGVtKCdpdGVtJywgaXRlbS5kZXNjcmlwdGlvbiwge1xuICAgICAgICBzb3VyY2U6IG9wdGlvbnMuc291cmNlXG4gICAgICB9KVxuICAgICAgbGV0IGNsb25lZCA9IG51bGxcbiAgICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNsb25lZCA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKGV4aXN0aW5nLnRvT2JqZWN0KCkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbG9uZWQgPSB7XG4gICAgICAgICAgbmFtZTogaXRlbS5kZXNjcmlwdGlvbixcbiAgICAgICAgICB0eXBlOiAnaXRlbSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaXRlbXMucHVzaChjbG9uZWQpXG4gICAgfVxuICAgIHJldHVybiBpdGVtc1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIGV4dHJhY3RXZWFwb25zIChkaG9sZWhvdXNlV2VhcG9ucywgY2hhcmFjdGVyLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgd2VhcG9ucyA9IFtdXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGRob2xlaG91c2VXZWFwb25zKSkge1xuICAgICAgZGhvbGVob3VzZVdlYXBvbnMgPSBbZGhvbGVob3VzZVdlYXBvbnNdXG4gICAgfVxuICAgIGZvciAoY29uc3Qgd2VhcG9uIG9mIGRob2xlaG91c2VXZWFwb25zKSB7XG4gICAgICBjb25zdCBza2lsbCA9IENvQzdEaG9sZUhvdXNlQWN0b3JJbXBvcnRlci5maW5kV2VhcG9uU2tpbGxJZChcbiAgICAgICAgd2VhcG9uLnNraWxsbmFtZSxcbiAgICAgICAgY2hhcmFjdGVyXG4gICAgICApXG4gICAgICBjb25zdCBkYW1hZ2UgPSB3ZWFwb24uZGFtYWdlLnJlcGxhY2UoL1xcK0RCL2ksICcnKVxuICAgICAgY29uc3QgYWRkYiA9IGRhbWFnZSAhPT0gd2VhcG9uLmRhbWFnZVxuICAgICAgY29uc3QgZXhpc3RpbmcgPSBhd2FpdCBDb0M3VXRpbGl0aWVzLmd1ZXNzSXRlbSgnd2VhcG9uJywgd2VhcG9uLm5hbWUsIHtcbiAgICAgICAgc291cmNlOiBvcHRpb25zLnNvdXJjZVxuICAgICAgfSlcbiAgICAgIGxldCBjbG9uZWQgPSBudWxsXG4gICAgICBpZiAodHlwZW9mIGV4aXN0aW5nICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjbG9uZWQgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShleGlzdGluZy50b09iamVjdCgpKVxuICAgICAgICBjbG9uZWQuc3lzdGVtLnNraWxsLm1haW4ubmFtZSA9IHNraWxsPy5uYW1lID8/ICcnXG4gICAgICAgIGNsb25lZC5zeXN0ZW0uc2tpbGwubWFpbi5pZCA9IHNraWxsPy5pZCA/PyAnJ1xuICAgICAgICBjbG9uZWQuc3lzdGVtLnJhbmdlID0gY2xvbmVkLnN5c3RlbS5yYW5nZSA/PyB7fVxuICAgICAgICBjbG9uZWQuc3lzdGVtLnJhbmdlLm5vcm1hbCA9IGNsb25lZC5zeXN0ZW0ucmFuZ2Uubm9ybWFsID8/IHt9XG4gICAgICAgIGNsb25lZC5zeXN0ZW0ucmFuZ2Uubm9ybWFsLmRhbWFnZSA9IGRhbWFnZVxuICAgICAgICBjbG9uZWQuc3lzdGVtLmFtbW8gPSB3ZWFwb24uYW1tb1xuICAgICAgICBjbG9uZWQuc3lzdGVtLm1hbGZ1bmN0aW9uID0gd2VhcG9uLm1hbGZcbiAgICAgICAgY2xvbmVkLnN5c3RlbS5wcm9wZXJ0aWVzID0gY2xvbmVkLnN5c3RlbS5wcm9wZXJ0aWVzID8/IHt9XG4gICAgICAgIGNsb25lZC5zeXN0ZW0ucHJvcGVydGllcy5tZWxlZSA9XG4gICAgICAgICAgc2tpbGw/LnN5c3RlbS5wcm9wZXJ0aWVzPy5maWdodGluZyA/PyBmYWxzZVxuICAgICAgICBjbG9uZWQuc3lzdGVtLnByb3BlcnRpZXMucm5nZCA9XG4gICAgICAgICAgc2tpbGw/LnN5c3RlbS5wcm9wZXJ0aWVzPy5maXJlYXJtID8/IGZhbHNlXG4gICAgICAgIGNsb25lZC5zeXN0ZW0ucHJvcGVydGllcy5hZGRiID0gYWRkYlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xvbmVkID0ge1xuICAgICAgICAgIG5hbWU6IHdlYXBvbi5uYW1lLFxuICAgICAgICAgIHR5cGU6ICd3ZWFwb24nLFxuICAgICAgICAgIHN5c3RlbToge1xuICAgICAgICAgICAgc2tpbGw6IHtcbiAgICAgICAgICAgICAgbWFpbjoge1xuICAgICAgICAgICAgICAgIG5hbWU6IHNraWxsPy5uYW1lID8/ICcnLFxuICAgICAgICAgICAgICAgIGlkOiBza2lsbD8uaWQgPz8gJydcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJhbmdlOiB7XG4gICAgICAgICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgICAgIGRhbWFnZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYW1tbzogd2VhcG9uLmFtbW8sXG4gICAgICAgICAgICBtYWxmdW5jdGlvbjogd2VhcG9uLm1hbGYsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgIG1lbGVlOiBza2lsbD8uc3lzdGVtLnByb3BlcnRpZXM/LmZpZ2h0aW5nID8/IGZhbHNlLFxuICAgICAgICAgICAgICBybmdkOiBza2lsbD8uc3lzdGVtLnByb3BlcnRpZXM/LmZpcmVhcm0gPz8gZmFsc2UsXG4gICAgICAgICAgICAgIGFkZGJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdlYXBvbnMucHVzaChjbG9uZWQpXG4gICAgfVxuICAgIHJldHVybiB3ZWFwb25zXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgc2F2ZVBvcnRyYWl0IChiYXNlNjRQb3J0cmFpdCwgZmlsZU5hbWUpIHtcbiAgICBjb25zdCBiYXNlNjRSZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgJ2RhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwnICsgYmFzZTY0UG9ydHJhaXRcbiAgICApXG4gICAgY29uc3QgaW1hZ2VCbG9iID0gYXdhaXQgYmFzZTY0UmVzcG9uc2UuYmxvYigpXG4gICAgY29uc3QgZmlsZVBhdGggPSBDb0M3RGlyZWN0b3J5UGlja2VyLnVwbG9hZFRvRGVmYXVsdERpcmVjdG9yeShcbiAgICAgIGltYWdlQmxvYixcbiAgICAgIGZpbGVOYW1lXG4gICAgKVxuICAgIHJldHVybiBmaWxlUGF0aFxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGNyZWF0ZU5QQ0Zyb21EaG9sZUhvdXNlIChkaG9sZUhvdXNlQ2hhcmFjdGVyRGF0YSwgb3B0aW9ucykge1xuICAgIGlmICghZ2FtZS51c2VyPy5jYW4oJ0ZJTEVTX1VQTE9BRCcpKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQWN0b3JJbXBvcnRlclVwbG9hZEVycm9yJylcbiAgICAgIClcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBjb25zdCBjaGFyYWN0ZXJEYXRhID1cbiAgICAgIGF3YWl0IENvQzdEaG9sZUhvdXNlQWN0b3JJbXBvcnRlci5jb252ZXJ0RGhvbGVIb3VzZUNoYXJhY3RlckRhdGEoXG4gICAgICAgIGRob2xlSG91c2VDaGFyYWN0ZXJEYXRhLFxuICAgICAgICBvcHRpb25zXG4gICAgICApXG4gICAgaWYgKENPTkZJRy5kZWJ1Zy5Db0M3SW1wb3J0ZXIpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdDaGFyYWN0ZXIgRGF0YTonLCBjaGFyYWN0ZXJEYXRhKVxuICAgIH1cbiAgICBjb25zdCBpbXBvcnRlZENoYXJhY3RlcnNGb2xkZXIgPVxuICAgICAgYXdhaXQgQ29DN1V0aWxpdGllcy5jcmVhdGVJbXBvcnRDaGFyYWN0ZXJzRm9sZGVySWZOb3RFeGlzdHMoKVxuICAgIGlmICghQ29DN0RpcmVjdG9yeVBpY2tlci5jcmVhdGVEZWZhdWx0RGlyZWN0b3J5KCkpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBjb25zdCBhY3RvckRhdGEgPSB7XG4gICAgICBuYW1lOiBjaGFyYWN0ZXJEYXRhLm5hbWUsXG4gICAgICB0eXBlOiAnY2hhcmFjdGVyJyxcbiAgICAgIGZvbGRlcjogaW1wb3J0ZWRDaGFyYWN0ZXJzRm9sZGVyLmlkLFxuICAgICAgZGF0YTogY2hhcmFjdGVyRGF0YS5hY3RvclxuICAgIH1cbiAgICBjb25zdCBucGMgPSBhd2FpdCBBY3Rvci5jcmVhdGUoYWN0b3JEYXRhKVxuICAgIC8vIElmIHBvc3NpYmxlIHVwbG9hZCB0aGUgaW1hZ2UgcG9ydHJhaXRcbiAgICBpZiAoXG4gICAgICBkaG9sZUhvdXNlQ2hhcmFjdGVyRGF0YS5JbnZlc3RpZ2F0b3IuUGVyc29uYWxEZXRhaWxzLlBvcnRyYWl0Py5sZW5ndGggPiAxMFxuICAgICkge1xuICAgICAgY29uc3QgZmlsZU5hbWUgPSAnYXZhdGFyLScgKyBucGMuaWQgKyAnLnBuZydcbiAgICAgIGNvbnN0IHBvcnRyYWl0ID0gYXdhaXQgQ29DN0Rob2xlSG91c2VBY3RvckltcG9ydGVyLnNhdmVQb3J0cmFpdChcbiAgICAgICAgZGhvbGVIb3VzZUNoYXJhY3RlckRhdGEuSW52ZXN0aWdhdG9yLlBlcnNvbmFsRGV0YWlscy5Qb3J0cmFpdCxcbiAgICAgICAgZmlsZU5hbWVcbiAgICAgIClcbiAgICAgIGlmIChwb3J0cmFpdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgbnBjLnVwZGF0ZSh7XG4gICAgICAgICAgaW1nOiBwb3J0cmFpdFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoQ09ORklHLmRlYnVnLkNvQzdJbXBvcnRlcikge1xuICAgICAgY29uc29sZS5sb2coJ0l0ZW1zOiAnLCBjaGFyYWN0ZXJEYXRhLml0ZW1zKVxuICAgIH1cbiAgICBhd2FpdCBucGMuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBjaGFyYWN0ZXJEYXRhLnNraWxscywge1xuICAgICAgcmVuZGVyU2hlZXQ6IGZhbHNlXG4gICAgfSlcbiAgICBhd2FpdCBucGMuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBjaGFyYWN0ZXJEYXRhLnBvc3Nlc2lvbnMsIHtcbiAgICAgIHJlbmRlclNoZWV0OiBmYWxzZVxuICAgIH0pXG4gICAgY29uc3Qgd2VhcG9ucyA9IGF3YWl0IENvQzdEaG9sZUhvdXNlQWN0b3JJbXBvcnRlci5leHRyYWN0V2VhcG9ucyhcbiAgICAgIGRob2xlSG91c2VDaGFyYWN0ZXJEYXRhLkludmVzdGlnYXRvci5XZWFwb25zPy53ZWFwb24gPz8gW10sXG4gICAgICBucGMsXG4gICAgICBvcHRpb25zXG4gICAgKVxuICAgIGlmIChDT05GSUcuZGVidWcuQ29DN0ltcG9ydGVyKSB7XG4gICAgICBjb25zb2xlLmxvZygnV2VhcG9uczogJywgd2VhcG9ucylcbiAgICB9XG4gICAgYXdhaXQgbnBjLmNyZWF0ZUVtYmVkZGVkRG9jdW1lbnRzKCdJdGVtJywgd2VhcG9ucywge1xuICAgICAgcmVuZGVyU2hlZXQ6IGZhbHNlXG4gICAgfSlcblxuICAgIHJldHVybiBucGNcbiAgfVxufVxuIiwiLyogZ2xvYmFsICQsIENPTkZJRywgRm9ybUFwcGxpY2F0aW9uLCBmb3VuZHJ5LCBnYW1lLCBIb29rcywgdWksIEZpbGVSZWFkZXIgKi9cblxuaW1wb3J0IHsgQ29DN0FjdG9ySW1wb3J0ZXIgfSBmcm9tICcuL2FjdG9yLWltcG9ydGVyLmpzJ1xuaW1wb3J0IHsgQ29DN0Rob2xlSG91c2VBY3RvckltcG9ydGVyIH0gZnJvbSAnLi9kaG9sZWhvdXNlX2ltcG9ydGVyLmpzJ1xuaW1wb3J0IHsgQ29DN0FjdG9ySW1wb3J0ZXJSZWdFeHAgfSBmcm9tICcuL2FjdG9yLWltcG9ydGVyLXJlZ2V4cC5qcydcbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi91dGlsaXRpZXMuanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3QWN0b3JJbXBvcnRlckRpYWxvZyBleHRlbmRzIEZvcm1BcHBsaWNhdGlvbiB7XG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc3VwZXIuZGVmYXVsdE9wdGlvbnMsIHtcbiAgICAgIGNsYXNzZXM6IFsnY29jNycsICdkaWFsb2cnLCAnYWN0b3ItaW1wb3J0ZXInXSxcbiAgICAgIHRpdGxlOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQWN0b3JJbXBvcnRlcicpLFxuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvYWN0b3ItaW1wb3J0ZXIuaHRtbCcsXG4gICAgICBjbG9zZU9uU3VibWl0OiBmYWxzZSxcbiAgICAgIHdpZHRoOiA2MDAsXG4gICAgICBoZWlnaHQ6ICdhdXRvJ1xuICAgIH0pXG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGFzeW5jIGdldERhdGEgKCkge1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBzdXBlci5nZXREYXRhKClcblxuICAgIGRhdGEuaW1wb3J0VHlwZSA9IGRhdGEub2JqZWN0LmltcG9ydFR5cGVcbiAgICBkYXRhLmNvbnZlcnQ2RSA9IGRhdGEub2JqZWN0LmNvbnZlcnQ2RVxuICAgIGRhdGEuc291cmNlID0gZGF0YS5vYmplY3Quc291cmNlXG4gICAgZGF0YS5jaGFyYWN0ZXJEYXRhID0gZGF0YS5vYmplY3QuY2hhcmFjdGVyRGF0YVxuICAgIGRhdGEuY2FuVXBsb2FkID0gZ2FtZS51c2VyPy5jYW4oJ0ZJTEVTX1VQTE9BRCcpXG4gICAgaWYgKFsnbnBjJywgJ2NyZWF0dXJlJ10uaW5jbHVkZXMoZGF0YS5pbXBvcnRUeXBlKSkge1xuICAgICAgZGF0YS5sYW5ndWFnZXMgPSBDb0M3QWN0b3JJbXBvcnRlclJlZ0V4cC5nZXRUcmFuc2xhdGlvbnMoKVxuICAgICAgZGF0YS5sYW5ndWFnZSA9IENvQzdBY3RvckltcG9ydGVyUmVnRXhwLmNoZWNrTGFuZ3VhZ2UoXG4gICAgICAgIGRhdGEub2JqZWN0Lmxhbmd1YWdlXG4gICAgICApXG4gICAgICBkYXRhLnBsYWNlaG9sZGVyID0gQ29DN0FjdG9ySW1wb3J0ZXJSZWdFeHAuZ2V0RXhhbXBsZVRleHQoZGF0YS5sYW5ndWFnZSlcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YVxuICB9XG5cbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuXG4gICAgaHRtbC5maW5kKCcjZGhvbGVob3VzZS1jaGFyYWN0ZXItcHJldmlldycpLmhpZGUoKVxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcjY29jLWVudGl0eS10eXBlLCNjb2MtZW50aXR5LWxhbmcnKVxuICAgICAgLmNoYW5nZSh0aGlzLl9vbkNoYW5nZVN1Ym1pdC5iaW5kKHRoaXMpKVxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcjZGhvbGVob3VzZS1qc29uLWZpbGUtcGlja2VyJylcbiAgICAgIC5jaGFuZ2UodGhpcy5fb25KU09ORmlsZVNlbGVjdGVkLmJpbmQodGhpcykpXG5cbiAgICBodG1sXG4gICAgICAuZmluZCgnI2NvYy1wYXN0ZWQtY2hhcmFjdGVyLWRhdGEnKVxuICAgICAgLm9uKCdrZXl1cCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGNvbnN0IGNoYXJhY3RlcnNUb29FeHRlbmRlZCA9ICQodGhpcylcbiAgICAgICAgICAudmFsKClcbiAgICAgICAgICAubWF0Y2goL1tcXHVkYmMwLVxcdWRiZmVdW1xcdWRjMDAtXFx1ZGZmZl0vKVxuICAgICAgICBjb25zdCBwcm9tcHQgPSAkKCcjY29jLXByb21wdCcpXG4gICAgICAgIGlmIChwcm9tcHQuZGF0YSgnZXh0ZW5kZWQnKSAmJiBjaGFyYWN0ZXJzVG9vRXh0ZW5kZWQpIHtcbiAgICAgICAgICBwcm9tcHRcbiAgICAgICAgICAgIC5odG1sKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5UZXh0RmllbGRJbnZhbGlkQ2hhcmFjdGVycycpKVxuICAgICAgICAgICAgLmFkZENsYXNzKCdlcnJvcicpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvbXB0Lmh0bWwocHJvbXB0LmRhdGEoJ3RleHQnKSkucmVtb3ZlQ2xhc3MoJ2Vycm9yJylcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC50cmlnZ2VyKCdrZXl1cCcpXG5cbiAgICBodG1sLmZpbmQoJy5zdWJtaXQtYnV0dG9uJykuY2xpY2sodGhpcy5fb25DbGlja1N1Ym1pdC5iaW5kKHRoaXMpKVxuICAgIGh0bWwuZmluZCgnZm9ybScpLnN1Ym1pdChlID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHJldHVybnMgZ2V0SW5wdXRzIGV4dHJhY3RzIHRoZSBkYXRhIGZyb20gdGhlIGlucHV0IGZpZWxkcyBhbmRcbiAgICogYWRkcyBhIGAuYCBhdCB0aGUgZW5kIGlmIGl0J3Mgbm90IGFscmVhZHkgdGhlcmUuXG4gICAqL1xuICBzdGF0aWMgZ2V0SW5wdXRzIChmb3JtKSB7XG4gICAgY29uc3QgaW5wdXRzID0ge31cbiAgICBpbnB1dHMuZW50aXR5ID0gZm9ybS5maW5kKCcjY29jLWVudGl0eS10eXBlJykudmFsKCkudHJpbSgpXG4gICAgaWYgKENPTkZJRy5kZWJ1Zy5Db0M3SW1wb3J0ZXIpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoJ2VudGl0eSB0eXBlOicsIGlucHV0cy5lbnRpdHkpXG4gICAgfVxuICAgIGlmIChmb3JtLmZpbmQoJyNjb2MtY29udmVydC02RScpLmxlbmd0aCA+IDApIHtcbiAgICAgIGlucHV0cy5jb252ZXJ0RnJvbTZFID0gZm9ybS5maW5kKCcjY29jLWNvbnZlcnQtNkUnKS52YWwoKS50cmltKClcbiAgICB9XG4gICAgaWYgKGZvcm0uZmluZCgnI2NvYy1lbnRpdHktbGFuZycpLmxlbmd0aCA+IDApIHtcbiAgICAgIGlucHV0cy5sYW5nID0gQ29DN0FjdG9ySW1wb3J0ZXJSZWdFeHAuY2hlY2tMYW5ndWFnZShcbiAgICAgICAgZm9ybS5maW5kKCcjY29jLWVudGl0eS1sYW5nJykudmFsKCkudHJpbSgpXG4gICAgICApXG4gICAgfVxuICAgIGlmIChmb3JtLmZpbmQoJyNzb3VyY2UnKS5sZW5ndGggPiAwKSB7XG4gICAgICBpbnB1dHMuc291cmNlID0gZm9ybS5maW5kKCcjc291cmNlJykudmFsKCkudHJpbSgpXG4gICAgfVxuICAgIGlmIChmb3JtLmZpbmQoJyNjb2MtcGFzdGVkLWNoYXJhY3Rlci1kYXRhJykubGVuZ3RoID4gMCkge1xuICAgICAgaW5wdXRzLnRleHQgPSBmb3JtLmZpbmQoJyNjb2MtcGFzdGVkLWNoYXJhY3Rlci1kYXRhJykudmFsKCkudHJpbSgpXG4gICAgfVxuXG4gICAgaWYgKENPTkZJRy5kZWJ1Zy5Db0M3SW1wb3J0ZXIpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoJ3JlY2VpdmVkIHRleHQnLCAnIyMnICsgaW5wdXRzLnRleHQgKyAnIyMnKVxuICAgIH1cbiAgICByZXR1cm4gaW5wdXRzXG4gIH1cblxuICBfb25KU09ORmlsZVNlbGVjdGVkIChldmVudCkge1xuICAgIGNvbnN0IGpzb25GaWxlSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGhvbGVob3VzZS1qc29uLWZpbGUtcGlja2VyJylcbiAgICBjb25zdCBwb3J0cmFpdEltYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG4gICAgICAnZGhvbGVob3VzZS1jaGFyYWN0ZXItcG9ydHJhaXQnXG4gICAgKVxuICAgIGNvbnN0IGNoYXJhY3Rlck5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGhvbGVob3VzZS1jaGFyYWN0ZXItbmFtZScpXG4gICAgY29uc3QgcHJldmlldyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkaG9sZWhvdXNlLWNoYXJhY3Rlci1wcmV2aWV3JylcbiAgICBjb25zdCBmaWxlID0ganNvbkZpbGVJbnB1dC5maWxlc1swXVxuICAgIGNvbnN0IGRpYWxvZyA9IHRoaXNcbiAgICBjb25zdCBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgIGZpbGVSZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRpYWxvZy5jaGFyYWN0ZXJKU09OID0gSlNPTi5wYXJzZShmaWxlUmVhZGVyLnJlc3VsdClcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgJCgnI2NvYy1wcm9tcHQnKVxuICAgICAgICAgIC5odG1sKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5UZXh0RmllbGRJbnZhbGlkSlNPTicpKVxuICAgICAgICAgIC5hZGRDbGFzcygnZXJyb3InKVxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgY29uc3QgcGVyc29uYWxEZXRhaWxzID1cbiAgICAgICAgZGlhbG9nLmNoYXJhY3RlckpTT04/LkludmVzdGlnYXRvcj8uUGVyc29uYWxEZXRhaWxzXG4gICAgICBpZiAoIXBlcnNvbmFsRGV0YWlscykge1xuICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5EaG9sZUhvdXNlSW52YWxpZEFjdG9yJylcbiAgICAgICAgKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGNoYXJhY3Rlck5hbWUudGV4dENvbnRlbnQgPSBwZXJzb25hbERldGFpbHMuTmFtZVxuICAgICAgcG9ydHJhaXRJbWFnZS5zcmMgPSAnZGF0YTppbWFnZS9wbmc7YmFzZTY0LCcgKyBwZXJzb25hbERldGFpbHMuUG9ydHJhaXRcbiAgICAgIHByZXZpZXcuc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgICAgICQoJy5kaWFsb2cuYWN0b3ItaW1wb3J0ZXInKS5oZWlnaHQoJ2F1dG8nKVxuICAgIH1cbiAgICBmaWxlUmVhZGVyLnJlYWRBc1RleHQoZmlsZSlcbiAgfVxuXG4gIF9vbkNoYW5nZVN1Ym1pdCAoZXZlbnQpIHtcbiAgICB0aGlzLl9vblN1Ym1pdChldmVudClcbiAgfVxuXG4gIGFzeW5jIF9vbkNsaWNrU3VibWl0IChldmVudCkge1xuICAgIGNvbnN0IGlkID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmJ1dHRvblxuICAgIGlmIChpZCA9PT0gJ25vJykge1xuICAgICAgdGhpcy5jbG9zZSgpXG4gICAgfSBlbHNlIGlmIChpZCA9PT0gJ2dldEV4YW1wbGVOb3cnKSB7XG4gICAgICBjb25zdCBjb250ZW50ID0gQ29DN0FjdG9ySW1wb3J0ZXJSZWdFeHAuZ2V0RXhhbXBsZVRleHQoXG4gICAgICAgIHRoaXMub2JqZWN0Lmxhbmd1YWdlXG4gICAgICApXG4gICAgICBDb0M3VXRpbGl0aWVzLmNvcHlUb0NsaXBib2FyZChjb250ZW50KS50aGVuKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyhnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQ29waWVkJykpXG4gICAgICB9KVxuICAgIH0gZWxzZSBpZiAoaWQgPT09ICdpbXBvcnQnKSB7XG4gICAgICBjb25zdCBhcHAgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmNsb3Nlc3QoJ2Rpdi5kaWFsb2cuYWN0b3ItaW1wb3J0ZXInKVxuICAgICAgYXBwLmhpZGUoKVxuICAgICAgY29uc3QgZm9ybSA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkuY2xvc2VzdCgnZm9ybScpXG4gICAgICBjb25zdCBpbnB1dHMgPSBDb0M3QWN0b3JJbXBvcnRlckRpYWxvZy5nZXRJbnB1dHMoZm9ybSlcbiAgICAgIGlmIChpbnB1dHMuZW50aXR5ID09PSAnZGhvbGVob3VzZScgJiYgdGhpcy5jaGFyYWN0ZXJKU09OKSB7XG4gICAgICAgIGNvbnN0IGNoYXJhY3RlciA9XG4gICAgICAgICAgYXdhaXQgQ29DN0Rob2xlSG91c2VBY3RvckltcG9ydGVyLmNyZWF0ZU5QQ0Zyb21EaG9sZUhvdXNlKFxuICAgICAgICAgICAgdGhpcy5jaGFyYWN0ZXJKU09OLFxuICAgICAgICAgICAgeyBzb3VyY2U6IGlucHV0cy5zb3VyY2UgfVxuICAgICAgICAgIClcbiAgICAgICAgaWYgKGNoYXJhY3RlciAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBpZiAoQ09ORklHLmRlYnVnLkNvQzdJbXBvcnRlcikge1xuICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnY2hhcmFjdGVyOicsIGNoYXJhY3RlcilcbiAgICAgICAgICB9XG4gICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5pbmZvKFxuICAgICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5BY3RvckltcG9ydGVkJywge1xuICAgICAgICAgICAgICBhY3RvclR5cGU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FbnRpdGllcy5DaGFyYWN0ZXInKSxcbiAgICAgICAgICAgICAgYWN0b3JOYW1lOiBjaGFyYWN0ZXIubmFtZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG4gICAgICAgICAgYXdhaXQgY2hhcmFjdGVyLnNoZWV0LnJlbmRlcih0cnVlKVxuICAgICAgICAgIHRoaXMuY2xvc2UoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFwcC5zaG93KClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpbnB1dHMudGV4dCAmJiBpbnB1dHMudGV4dCAhPT0gJycpIHtcbiAgICAgICAgQ29DN0FjdG9ySW1wb3J0ZXJEaWFsb2cuaW1wb3J0QWN0b3IoaW5wdXRzKVxuICAgICAgICB0aGlzLmNsb3NlKClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFwcC5zaG93KClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiogQG92ZXJyaWRlXG4gICAqIEEgc3ViY2xhc3Mgb2YgdGhlIEZvcm1BcHBsaWNhdGlvbiBtdXN0IGltcGxlbWVudCB0aGUgX3VwZGF0ZU9iamVjdCBtZXRob2QuXG4gICAqL1xuICBhc3luYyBfdXBkYXRlT2JqZWN0IChldmVudCwgZm9ybURhdGEpIHtcbiAgICB0aGlzLm9iamVjdC5pbXBvcnRUeXBlID0gZm9ybURhdGFbJ2NvYy1lbnRpdHktdHlwZSddXG4gICAgdGhpcy5vYmplY3QuY2hhcmFjdGVyRGF0YSA9IGZvcm1EYXRhWydjb2MtcGFzdGVkLWNoYXJhY3Rlci1kYXRhJ10/LnRyaW0oKVxuICAgIGlmICh0eXBlb2YgZm9ybURhdGFbJ2NvYy1jb252ZXJ0LTZFJ10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLm9iamVjdC5jb252ZXJ0NkUgPSBmb3JtRGF0YVsnY29jLWNvbnZlcnQtNkUnXVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGZvcm1EYXRhWydjb2MtZW50aXR5LWxhbmcnXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMub2JqZWN0Lmxhbmd1YWdlID0gZm9ybURhdGFbJ2NvYy1lbnRpdHktbGFuZyddXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZm9ybURhdGEuc291cmNlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5vYmplY3Quc291cmNlID0gZm9ybURhdGEuc291cmNlXG4gICAgfVxuICAgIHRoaXMucmVuZGVyKHRydWUpXG4gIH1cblxuICAvKipcbiAgICogaW1wb3J0QWN0b3IgaW1wb3J0cyBhbiBBY3RvciB1c2luZyB0aGUgZGlhbG9nIGRhdGFcbiAgICogQHBhcmFtIHtodG1sfSBodG1sXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgaW1wb3J0QWN0b3IgKGlucHV0cykge1xuICAgIGlmIChpbnB1dHMudGV4dFtpbnB1dHMudGV4dC5sZW5ndGhdICE9PSAnLicpIHtcbiAgICAgIGlucHV0cy50ZXh0ICs9ICcuJyAvLyBBZGQgYSBkb3QgYSB0aGUgZW5kIHRvIGhlbHAgdGhlIHJlZ2V4IGZpbmQgdGhlIGVuZFxuICAgIH1cbiAgICBjb25zdCBhY3RvciA9IG5ldyBDb0M3QWN0b3JJbXBvcnRlcigpXG4gICAgY29uc3QgY3JlYXRlZEFjdG9yID0gYXdhaXQgYWN0b3IuY3JlYXRlQWN0b3IoaW5wdXRzKVxuICAgIC8vIEFjdG9yIGNyZWF0ZWQsIE5vdGlmeSB0aGUgdXNlciBhbmQgc2hvdyB0aGUgc2hlZXQuXG4gICAgaWYgKENPTkZJRy5kZWJ1Zy5Db0M3SW1wb3J0ZXIpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoJ2NyZWF0ZWRBY3RvcjonLCBjcmVhdGVkQWN0b3IpXG4gICAgfVxuICAgIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyhcbiAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuQWN0b3JJbXBvcnRlZCcsIHtcbiAgICAgICAgYWN0b3JUeXBlOiBjcmVhdGVkQWN0b3IudHlwZT8udG9VcHBlckNhc2UoKSxcbiAgICAgICAgYWN0b3JOYW1lOiBjcmVhdGVkQWN0b3IubmFtZVxuICAgICAgfSlcbiAgICApXG4gICAgYXdhaXQgY3JlYXRlZEFjdG9yLnNoZWV0LnJlbmRlcih0cnVlKVxuICAgIC8vIGNvbnN0IHVwZGF0ZWQgPSBhd2FpdCBVcGRhdGVyLnVwZGF0ZUFjdG9yKG5wYylcbiAgICAvLyBjb25zb2xlLmRlYnVnKCd1cGRhdGVkOicsIHVwZGF0ZWQpXG4gIH1cblxuICAvLyAvKipcbiAgLy8gICogY3JlYXRlIGl0J3MgdGhlIGRlZmF1bHQgd2ViIHRvIGNyYXRlIHRoZSBDb0M3QWN0b3JJbXBvcnRlckRpYWxvZ1xuICAvLyAgKi9cbiAgc3RhdGljIGFzeW5jIGNyZWF0ZSAob3B0aW9ucyA9IHt9KSB7XG4gICAgb3B0aW9ucy5pbXBvcnRUeXBlID0gb3B0aW9ucy5pbXBvcnRUeXBlID8/ICducGMnXG4gICAgb3B0aW9ucy5sYW5ndWFnZSA9XG4gICAgICBvcHRpb25zLmxhbmd1YWdlID8/IENvQzdBY3RvckltcG9ydGVyUmVnRXhwLmNoZWNrTGFuZ3VhZ2UobnVsbClcbiAgICBvcHRpb25zLmNvbnZlcnQ2RSA9IG9wdGlvbnMubGFuZ3VhZ2UgPz8gJ2NvYy1ndWVzcydcbiAgICBvcHRpb25zLnNvdXJjZSA9IG9wdGlvbnMuc291cmNlID8/ICdpd21zJ1xuICAgIG9wdGlvbnMuY2hhcmFjdGVyRGF0YSA9IG9wdGlvbnMuY2hhcmFjdGVyRGF0YSA/PyAnJ1xuXG4gICAgbmV3IENvQzdBY3RvckltcG9ydGVyRGlhbG9nKG9wdGlvbnMpLnJlbmRlcih0cnVlKVxuICB9XG59XG5cbkhvb2tzLm9uY2UoJ3JlYWR5JywgKCkgPT4ge1xuICBpZiAoZ2FtZS5tb2R1bGVzLmdldCgnQ29DNy1JbXBvcnRlci1UZXN0cycpPy5hY3RpdmUpIHtcbiAgICB3aW5kb3cuQ29DN0FjdG9ySW1wb3J0ZXIgPSBDb0M3QWN0b3JJbXBvcnRlclxuICB9XG59KVxuIiwiLyogZ2xvYmFsIERpYWxvZywgZm91bmRyeSwgZ2FtZSAqL1xuZXhwb3J0IGNsYXNzIERyb3BDb0NJRCBleHRlbmRzIERpYWxvZyB7XG4gIHN0YXRpYyBwcm9jZXNzRm9ybSAocmVzcG9uc2UsIGVsZW1lbnQsIHJlc29sdmUpIHtcbiAgICBpZiAoZWxlbWVudC5maW5kKCdpbnB1dCcpLmlzKCc6Y2hlY2tlZCcpKSB7XG4gICAgICBnYW1lLnNldHRpbmdzLnNldCgnQ29DNycsICdkcm9wQ29DSUQnLCAocmVzcG9uc2UgPyAnWScgOiAnTicpKVxuICAgIH1cbiAgICByZXNvbHZlKHJlc3BvbnNlKVxuICB9XG5cbiAgc3RhdGljIHByb2Nlc3NJdGVtIChyZXNwb25zZSwgaXRlbSkge1xuICAgIGlmIChyZXNwb25zZSAmJiBpdGVtLmZsYWdzPy5Db0M3Py5jb2NpZEZsYWc/LmlkKSB7XG4gICAgICByZXR1cm4gaXRlbS5mbGFncy5Db0M3LmNvY2lkRmxhZy5pZFxuICAgIH1cbiAgICByZXR1cm4gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoaXRlbSlcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBjcmVhdGUgKCkge1xuICAgIGNvbnN0IGRyb3BDb0NJRCA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2Ryb3BDb0NJRCcpXG4gICAgc3dpdGNoIChkcm9wQ29DSUQpIHtcbiAgICAgIGNhc2UgJyc6XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICBjb25zdCBkbGcgPSBuZXcgRHJvcENvQ0lEKHtcbiAgICAgICAgICAgIHRpdGxlOiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlNldHRpbmdzLkRyb3BDb0NJRC5OYW1lJyksXG4gICAgICAgICAgICBjb250ZW50OiAnPHA+JyArIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuU2V0dGluZ3MuRHJvcENvQ0lELkRpYWxvZycpICsgJzwvcD48cD48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCJyZW1lbWJlcnRoaXNcIiBzdHlsZT1cInZlcnRpY2FsLWFsaWduOiBzdWI7XCI+PGxhYmVsIGZvcj1cInJlbWVtYmVydGhpc1wiPicgKyBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlNldHRpbmdzLkRyb3BDb0NJRC5SZW1lbWJlcicpICsgJzwvbGFiZWw+PC9wPicsXG4gICAgICAgICAgICBjbGFzc2VzOiBbJ2NvYzcnLCAnYXBwJywgJ2RpYWxvZyddLFxuICAgICAgICAgICAgYnV0dG9uczoge1xuICAgICAgICAgICAgICB5ZXM6IHtcbiAgICAgICAgICAgICAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtY2hlY2tcIj48L2k+JyxcbiAgICAgICAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdZZXMnKSxcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogKGVsZW1lbnQpID0+IHsgRHJvcENvQ0lELnByb2Nlc3NGb3JtKHRydWUsIGVsZW1lbnQsIHJlc29sdmUpIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgbm86IHtcbiAgICAgICAgICAgICAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtdGltZXNcIj48L2k+JyxcbiAgICAgICAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdObycpLFxuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiAoZWxlbWVudCkgPT4geyBEcm9wQ29DSUQucHJvY2Vzc0Zvcm0oZmFsc2UsIGVsZW1lbnQsIHJlc29sdmUpIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgZGxnLnJlbmRlcih0cnVlKVxuICAgICAgICB9KVxuICAgICAgY2FzZSAnWSc6XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICBjYXNlICdOJzpcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgRHJhZ0Ryb3AsIGZvdW5kcnksIGdhbWUsIEl0ZW1TaGVldCwgVGV4dEVkaXRvciAqL1xuaW1wb3J0IHsgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbiB9IGZyb20gJy4uLy4uL3NjcmlwdHMvY29jLWlkLWJ1dHRvbi5qcydcbmltcG9ydCB7IENPQzcgfSBmcm9tICcuLi8uLi9jb25maWcuanMnXG5pbXBvcnQgeyBDb0M3SXRlbSB9IGZyb20gJy4uL2l0ZW0uanMnXG5pbXBvcnQgeyBDb0M3VXRpbGl0aWVzIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzLmpzJ1xuaW1wb3J0IHsgRHJvcENvQ0lEIH0gZnJvbSAnLi4vLi4vYXBwcy9kcm9wLWNvYy1pZC5qcydcblxuLyoqXG4gKiBFeHRlbmQgdGhlIGJhc2ljIEl0ZW1TaGVldCB3aXRoIHNvbWUgdmVyeSBzaW1wbGUgbW9kaWZpY2F0aW9uc1xuICovXG5leHBvcnQgY2xhc3MgQ29DN09jY3VwYXRpb25TaGVldCBleHRlbmRzIEl0ZW1TaGVldCB7XG4gIC8qKlxuICAgKiBBY3RpdmF0ZSBldmVudCBsaXN0ZW5lcnMgdXNpbmcgdGhlIHByZXBhcmVkIHNoZWV0IEhUTUxcbiAgICogQHBhcmFtIGh0bWwge0hUTUx9ICAgVGhlIHByZXBhcmVkIEhUTUwgb2JqZWN0IHJlYWR5IHRvIGJlIHJlbmRlcmVkIGludG8gdGhlIERPTVxuICAgKi9cbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuICAgIC8vIEV2ZXJ5dGhpbmcgYmVsb3cgaGVyZSBpcyBvbmx5IG5lZWRlZCBpZiB0aGUgc2hlZXQgaXMgZWRpdGFibGVcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5lZGl0YWJsZSkgcmV0dXJuXG5cbiAgICBodG1sXG4gICAgICAuZmluZCgnLml0ZW0gLml0ZW0tbmFtZSBoNCcpXG4gICAgICAuY2xpY2soZXZlbnQgPT4gdGhpcy5fb25JdGVtU3VtbWFyeShldmVudCwgJ3NraWxscycpKVxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcuaXRlbS1kZWxldGUnKVxuICAgICAgLmNsaWNrKGV2ZW50ID0+IHRoaXMuX29uSXRlbURlbGV0ZShldmVudCwgJ3NraWxscycpKVxuXG4gICAgaHRtbC5maW5kKCcuZ3JvdXAtaXRlbS1kZWxldGUnKS5jbGljayh0aGlzLl9vbkdyb3VwSXRlbURlbGV0ZS5iaW5kKHRoaXMpKVxuICAgIGh0bWwuZmluZCgnLmdyb3VwLWNvbnRyb2wnKS5jbGljayh0aGlzLl9vbkdyb3VwQ29udHJvbC5iaW5kKHRoaXMpKVxuXG4gICAgY29uc3QgZHJhZ0Ryb3AgPSBuZXcgRHJhZ0Ryb3Aoe1xuICAgICAgZHJvcFNlbGVjdG9yOiAnLmRyb3BwYWJsZScsXG4gICAgICBjYWxsYmFja3M6IHsgZHJvcDogdGhpcy5fb25Ecm9wLmJpbmQodGhpcykgfVxuICAgIH0pXG4gICAgZHJhZ0Ryb3AuYmluZChodG1sWzBdKVxuICB9XG5cbiAgYXN5bmMgX29uRHJvcCAoZXZlbnQsIHR5cGUgPSAnc2tpbGwnLCBjb2xsZWN0aW9uTmFtZSA9ICdza2lsbHMnKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgICBjb25zdCBvcHRpb25hbFNraWxsID0gZXZlbnQ/LmN1cnJlbnRUYXJnZXQ/LmNsYXNzTGlzdD8uY29udGFpbnMoJ29wdGlvbmFsLXNraWxscycpXG4gICAgY29uc3Qgb2wgPSBldmVudD8uY3VycmVudFRhcmdldD8uY2xvc2VzdCgnb2wnKVxuICAgIGNvbnN0IGluZGV4ID0gb2w/LmRhdGFzZXQ/Lmdyb3VwXG5cbiAgICBjb25zdCBkYXRhTGlzdCA9IGF3YWl0IENvQzdVdGlsaXRpZXMuZ2V0RGF0YUZyb21Ecm9wRXZlbnQoZXZlbnQsICdJdGVtJylcblxuICAgIGxldCB1c2VDb0NJRCA9IDBcbiAgICBjb25zdCBjb2xsZWN0aW9uID0gdGhpcy5pdGVtLnN5c3RlbVtjb2xsZWN0aW9uTmFtZV0gPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLml0ZW0uc3lzdGVtW2NvbGxlY3Rpb25OYW1lXSkgOiBbXVxuICAgIGNvbnN0IGdyb3VwcyA9IHRoaXMuaXRlbS5zeXN0ZW0uZ3JvdXBzID8gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5pdGVtLnN5c3RlbS5ncm91cHMpIDogW11cblxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBkYXRhTGlzdCkge1xuICAgICAgaWYgKCFpdGVtIHx8ICFpdGVtLnN5c3RlbSkgY29udGludWVcbiAgICAgIGlmICghW3R5cGVdLmluY2x1ZGVzKGl0ZW0udHlwZSkpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbmFsU2tpbGwpIHtcbiAgICAgICAgaWYgKCFDb0M3SXRlbS5pc0FueVNwZWMoaXRlbSkpIHtcbiAgICAgICAgICAvLyBHZW5lcmljIHNwZWNpYWxpemF0aW9uIGNhbiBiZSBpbmNsdWRlZCBtYW55IHRpbWVzXG4gICAgICAgICAgaWYgKGNvbGxlY3Rpb24uZmluZChlbCA9PiBlbC5uYW1lID09PSBpdGVtLm5hbWUpKSB7XG4gICAgICAgICAgICBjb250aW51ZSAvLyBJZiBza2lsbCBpcyBhbHJlYWR5IGluIG1haW4gZG9uJ3QgYWRkIGl0XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChncm91cHNbaW5kZXhdLnNraWxscy5maW5kKGVsID0+IGVsLm5hbWUgPT09IGl0ZW0ubmFtZSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlIC8vIElmIHNraWxsIGlzIGFscmVhZHkgaW4gZ3JvdXAgZG9uJ3QgYWRkIGl0XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVzZUNvQ0lEID09PSAwKSB7XG4gICAgICAgICAgdXNlQ29DSUQgPSBhd2FpdCBEcm9wQ29DSUQuY3JlYXRlKClcbiAgICAgICAgfVxuICAgICAgICBncm91cHNbaW5kZXhdLnNraWxscyA9IGdyb3Vwc1tpbmRleF0uc2tpbGxzLmNvbmNhdChbRHJvcENvQ0lELnByb2Nlc3NJdGVtKHVzZUNvQ0lELCBpdGVtKV0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIUNvQzdJdGVtLmlzQW55U3BlYyhpdGVtKSkge1xuICAgICAgICAgIC8vIEdlbmVyaWMgc3BlY2lhbGl6YXRpb24gY2FuIGJlIGluY2x1ZGVkIG1hbnkgdGltZXNcbiAgICAgICAgICBpZiAoY29sbGVjdGlvbi5maW5kKGVsID0+IGVsLm5hbWUgPT09IGl0ZW0ubmFtZSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBzYW1lIHNraWxsIGlzIGluIG9uZSBvZiB0aGUgZ3JvdXAgcmVtb3ZlIGl0IGZyb20gdGhlIGdyb3Vwc1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBncm91cHNbaV0uc2tpbGxzLmZpbmRJbmRleChcbiAgICAgICAgICAgICAgZWwgPT4gZWwubmFtZSA9PT0gaXRlbS5uYW1lXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgIGdyb3Vwc1tpXS5za2lsbHMuc3BsaWNlKGluZGV4LCAxKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodXNlQ29DSUQgPT09IDApIHtcbiAgICAgICAgICB1c2VDb0NJRCA9IGF3YWl0IERyb3BDb0NJRC5jcmVhdGUoKVxuICAgICAgICB9XG4gICAgICAgIGNvbGxlY3Rpb24ucHVzaChEcm9wQ29DSUQucHJvY2Vzc0l0ZW0odXNlQ29DSUQsIGl0ZW0pKVxuICAgICAgfVxuICAgIH1cbiAgICBhd2FpdCB0aGlzLml0ZW0udXBkYXRlKHsgJ3N5c3RlbS5ncm91cHMnOiBncm91cHMgfSlcbiAgICBhd2FpdCB0aGlzLml0ZW0udXBkYXRlKHsgW2BzeXN0ZW0uJHtjb2xsZWN0aW9uTmFtZX1gXTogY29sbGVjdGlvbiB9KVxuICB9XG5cbiAgYXN5bmMgX29uR3JvdXBDb250cm9sIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBhID0gZXZlbnQuY3VycmVudFRhcmdldFxuXG4gICAgLy8gQWRkIG5ldyBkYW1hZ2UgY29tcG9uZW50XG4gICAgaWYgKGEuY2xhc3NMaXN0LmNvbnRhaW5zKCdhZGQtZ3JvdXAnKSkge1xuICAgICAgYXdhaXQgdGhpcy5fb25TdWJtaXQoZXZlbnQpIC8vIFN1Ym1pdCBhbnkgdW5zYXZlZCBjaGFuZ2VzXG4gICAgICBjb25zdCBncm91cHMgPSB0aGlzLml0ZW0uc3lzdGVtLmdyb3Vwc1xuICAgICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZSh7XG4gICAgICAgICdzeXN0ZW0uZ3JvdXBzJzogZ3JvdXBzLmNvbmNhdChbeyBvcHRpb25zOiAwLCBza2lsbHM6IFtdIH1dKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAoYS5jbGFzc0xpc3QuY29udGFpbnMoJ3JlbW92ZS1ncm91cCcpKSB7XG4gICAgICBhd2FpdCB0aGlzLl9vblN1Ym1pdChldmVudCkgLy8gU3VibWl0IGFueSB1bnNhdmVkIGNoYW5nZXNcbiAgICAgIGNvbnN0IGdyb3VwcyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuaXRlbS5zeXN0ZW0uZ3JvdXBzKVxuICAgICAgY29uc3Qgb2wgPSBhLmNsb3Nlc3QoJy5pdGVtLWxpc3QuZ3JvdXAnKVxuICAgICAgZ3JvdXBzLnNwbGljZShOdW1iZXIob2wuZGF0YXNldC5ncm91cCksIDEpXG4gICAgICBhd2FpdCB0aGlzLml0ZW0udXBkYXRlKHsgJ3N5c3RlbS5ncm91cHMnOiBncm91cHMgfSlcbiAgICB9XG4gIH1cblxuICBhc3luYyBfb25JdGVtU3VtbWFyeSAoZXZlbnQsIGNvbGxlY3Rpb25OYW1lID0gJ2l0ZW1zJykge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBvYmogPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpXG4gICAgY29uc3QgbGkgPSBvYmoucGFyZW50cygnLml0ZW0nKVxuICAgIGNvbnN0IGdyb3VwID0gb2JqLmNsb3Nlc3QoJy5ncm91cCcpXG4gICAgbGV0IGl0ZW1cbiAgICBpZiAoZ3JvdXAubGVuZ3RoKSB7XG4gICAgICBpdGVtID0gdGhpcy5pdGVtLnN5c3RlbS5ncm91cHNbZ3JvdXAuZGF0YSgnZ3JvdXAnKV1bY29sbGVjdGlvbk5hbWVdLmZpbmQocyA9PiB7XG4gICAgICAgIHJldHVybiBzLl9pZCA9PT0gbGkuZGF0YSgnaXRlbS1pZCcpXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBpdGVtID0gdGhpcy5pdGVtLnN5c3RlbVtjb2xsZWN0aW9uTmFtZV0uZmluZChzID0+IHtcbiAgICAgICAgcmV0dXJuIHMuX2lkID09PSBsaS5kYXRhKCdpdGVtLWlkJylcbiAgICAgIH0pXG4gICAgfVxuICAgIGlmICghaXRlbSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IGNoYXREYXRhID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgaXRlbS5zeXN0ZW0uZGVzY3JpcHRpb24udmFsdWUsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiB0aGlzLml0ZW0uZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICAvLyBUb2dnbGUgc3VtbWFyeVxuICAgIGlmIChsaS5oYXNDbGFzcygnZXhwYW5kZWQnKSkge1xuICAgICAgY29uc3Qgc3VtbWFyeSA9IGxpLmNoaWxkcmVuKCcuaXRlbS1zdW1tYXJ5JylcbiAgICAgIHN1bW1hcnkuc2xpZGVVcCgyMDAsICgpID0+IHN1bW1hcnkucmVtb3ZlKCkpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRpdiA9ICQoYDxkaXYgY2xhc3M9XCJpdGVtLXN1bW1hcnlcIj4ke2NoYXREYXRhfTwvZGl2PmApXG4gICAgICBjb25zdCBwcm9wcyA9ICQoJzxkaXYgY2xhc3M9XCJpdGVtLXByb3BlcnRpZXNcIj48L2Rpdj4nKVxuICAgICAgLy8gZm9yIChjb25zdCBwIG9mIGNoYXREYXRhLnByb3BlcnRpZXMpIHsgcHJvcHMuYXBwZW5kKGA8c3BhbiBjbGFzcz1cInRhZ1wiPiR7cH08L3NwYW4+YCkgfVxuICAgICAgZGl2LmFwcGVuZChwcm9wcylcbiAgICAgIGxpLmFwcGVuZChkaXYuaGlkZSgpKVxuICAgICAgZGl2LnNsaWRlRG93bigyMDApXG4gICAgfVxuICAgIGxpLnRvZ2dsZUNsYXNzKCdleHBhbmRlZCcpXG4gIH1cblxuICBhc3luYyBfb25JdGVtRGVsZXRlIChldmVudCwgY29sbGVjdGlvbk5hbWUgPSAnaXRlbXMnKSB7XG4gICAgY29uc3QgaXRlbSA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkuY2xvc2VzdCgnLml0ZW0nKVxuICAgIGNvbnN0IGl0ZW1JZCA9IGl0ZW0uZGF0YSgnaXRlbS1pZCcpXG4gICAgY29uc3QgQ29DSWQgPSBpdGVtLmRhdGEoJ2NvY2lkJylcbiAgICBjb25zdCBpdGVtSW5kZXggPSB0aGlzLml0ZW0uc3lzdGVtW2NvbGxlY3Rpb25OYW1lXS5maW5kSW5kZXgoaSA9PiAoaXRlbUlkICYmIGkuX2lkID09PSBpdGVtSWQpIHx8IChDb0NJZCAmJiBpID09PSBDb0NJZCkpXG4gICAgaWYgKGl0ZW1JbmRleCA+IC0xKSB7XG4gICAgICBjb25zdCBjb2xsZWN0aW9uID0gdGhpcy5pdGVtLnN5c3RlbVtjb2xsZWN0aW9uTmFtZV0gPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLml0ZW0uc3lzdGVtW2NvbGxlY3Rpb25OYW1lXSkgOiBbXVxuICAgICAgY29sbGVjdGlvbi5zcGxpY2UoaXRlbUluZGV4LCAxKVxuICAgICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZSh7IFtgc3lzdGVtLiR7Y29sbGVjdGlvbk5hbWV9YF06IGNvbGxlY3Rpb24gfSlcbiAgICB9XG4gIH1cblxuICBhc3luYyBfb25Hcm91cEl0ZW1EZWxldGUgKGV2ZW50KSB7XG4gICAgY29uc3QgaXRlbSA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkuY2xvc2VzdCgnLml0ZW0nKVxuICAgIGNvbnN0IGdyb3VwID0gTnVtYmVyKGl0ZW0uY2xvc2VzdCgnLml0ZW0tbGlzdC5ncm91cCcpLmRhdGEoJ2dyb3VwJykpXG4gICAgY29uc3QgZ3JvdXBzID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5pdGVtLnN5c3RlbS5ncm91cHMpXG4gICAgaWYgKHR5cGVvZiBncm91cHNbZ3JvdXBdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgaXRlbUlkID0gaXRlbS5kYXRhKCdpdGVtLWlkJylcbiAgICAgIGNvbnN0IENvQ0lkID0gaXRlbS5kYXRhKCdjb2NpZCcpXG4gICAgICBjb25zdCBpdGVtSW5kZXggPSBncm91cHNbZ3JvdXBdLnNraWxscy5maW5kSW5kZXgoaSA9PiAoaXRlbUlkICYmIGkuX2lkID09PSBpdGVtSWQpIHx8IChDb0NJZCAmJiBpID09PSBDb0NJZCkpXG4gICAgICBpZiAoaXRlbUluZGV4ID4gLTEpIHtcbiAgICAgICAgZ3JvdXBzW2dyb3VwXS5za2lsbHMuc3BsaWNlKGl0ZW1JbmRleCwgMSlcbiAgICAgICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZSh7ICdzeXN0ZW0uZ3JvdXBzJzogZ3JvdXBzIH0pXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc3VwZXIuZGVmYXVsdE9wdGlvbnMsIHtcbiAgICAgIGNsYXNzZXM6IFsnY29jNycsICdzaGVldCcsICdvY2N1cGF0aW9uJ10sXG4gICAgICB0ZW1wbGF0ZTogJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvaXRlbXMvb2NjdXBhdGlvbi5odG1sJyxcbiAgICAgIHdpZHRoOiA1MjUsXG4gICAgICBoZWlnaHQ6IDQ4MCxcbiAgICAgIGRyYWdEcm9wOiBbeyBkcmFnU2VsZWN0b3I6ICcuaXRlbScgfV0sXG4gICAgICBzY3JvbGxZOiBbJy50YWIuZGVzY3JpcHRpb24nXSxcbiAgICAgIHRhYnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hdlNlbGVjdG9yOiAnLnNoZWV0LW5hdmlnYXRpb24nLFxuICAgICAgICAgIGNvbnRlbnRTZWxlY3RvcjogJy5zaGVldC1ib2R5JyxcbiAgICAgICAgICBpbml0aWFsOiAnZGVzY3JpcHRpb24nXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KVxuICB9XG5cbiAgX2dldEhlYWRlckJ1dHRvbnMgKCkge1xuICAgIGNvbnN0IGhlYWRlckJ1dHRvbnMgPSBzdXBlci5fZ2V0SGVhZGVyQnV0dG9ucygpXG4gICAgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbihoZWFkZXJCdXR0b25zLCB0aGlzKVxuICAgIHJldHVybiBoZWFkZXJCdXR0b25zXG4gIH1cblxuICBhc3luYyBnZXREYXRhICgpIHtcbiAgICBjb25zdCBzaGVldERhdGEgPSBzdXBlci5nZXREYXRhKClcblxuICAgIHNoZWV0RGF0YS5oYXNPd25lciA9IHRoaXMuaXRlbS5pc0VtYmVkZGVkID09PSB0cnVlXG5cbiAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uc2tpbGxzID0gYXdhaXQgZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmV4cGFuZEl0ZW1BcnJheSh7IGl0ZW1MaXN0OiBzaGVldERhdGEuZGF0YS5zeXN0ZW0uc2tpbGxzIH0pXG5cbiAgICBzaGVldERhdGEuc2tpbGxMaXN0RW1wdHkgPSBzaGVldERhdGEuZGF0YS5zeXN0ZW0uc2tpbGxzLmxlbmd0aCA9PT0gMFxuXG4gICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLnNraWxscy5zb3J0KENvQzdVdGlsaXRpZXMuc29ydEJ5TmFtZUtleSlcblxuICAgIGZvciAobGV0IGluZGV4ID0gMCwgbGVuID0gc2hlZXREYXRhLmRhdGEuc3lzdGVtLmdyb3Vwcy5sZW5ndGg7IGluZGV4IDwgbGVuOyBpbmRleCsrKSB7XG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZ3JvdXBzW2luZGV4XS5za2lsbHMgPSBhd2FpdCBnYW1lLnN5c3RlbS5hcGkuY29jaWQuZXhwYW5kSXRlbUFycmF5KHsgaXRlbUxpc3Q6IHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5ncm91cHNbaW5kZXhdLnNraWxscyB9KVxuXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZ3JvdXBzW2luZGV4XS5pc0VtcHR5ID0gc2hlZXREYXRhLmRhdGEuc3lzdGVtLmdyb3Vwc1tpbmRleF0uc2tpbGxzLmxlbmd0aCA9PT0gMFxuXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZ3JvdXBzW2luZGV4XS5za2lsbHMuc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG4gICAgfVxuXG4gICAgc2hlZXREYXRhLm9jY3VwYXRpb25Qb2ludHNTdHJpbmcgPSBDb0M3T2NjdXBhdGlvblNoZWV0Lm9jY3VwYXRpb25Qb2ludHNTdHJpbmcoc2hlZXREYXRhLmRhdGEuc3lzdGVtLm9jY3VwYXRpb25Ta2lsbFBvaW50cylcblxuICAgIHNoZWV0RGF0YS5pdGVtUHJvcGVydGllcyA9IFtdXG5cbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzaGVldERhdGEuZGF0YS5zeXN0ZW0udHlwZSkpIHtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBzaGVldERhdGEuaXRlbVByb3BlcnRpZXMucHVzaChDT0M3Lm9jY3VwYXRpb25Qcm9wZXJ0aWVzW2tleV0gPyBDT0M3Lm9jY3VwYXRpb25Qcm9wZXJ0aWVzW2tleV0gOiBudWxsKVxuICAgICAgfVxuICAgIH1cblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZERlc2NyaXB0aW9uVmFsdWUgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24udmFsdWUsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICBzaGVldERhdGEuZW5yaWNoZWREZXNjcmlwdGlvbktlZXBlciA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5kZXNjcmlwdGlvbi5rZWVwZXIsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICBzaGVldERhdGEuaXNLZWVwZXIgPSBnYW1lLnVzZXIuaXNHTVxuICAgIHJldHVybiBzaGVldERhdGFcbiAgfVxuXG4gIHN0YXRpYyBvY2N1cGF0aW9uUG9pbnRzU3RyaW5nIChvY2N1cGF0aW9uU2tpbGxQb2ludHMpIHtcbiAgICBjb25zdCBvcHRpb25uYWwgPSBbXVxuICAgIGNvbnN0IG1hbmRhdG9yeSA9IFtdXG4gICAgZm9yIChjb25zdCBba2V5LCBjYXJhY10gb2YgT2JqZWN0LmVudHJpZXMob2NjdXBhdGlvblNraWxsUG9pbnRzKSkge1xuICAgICAgaWYgKGNhcmFjLm11bHRpcGxpZXIpIHtcbiAgICAgICAgY29uc3QgY2FyYWNOYW1lID0gZ2FtZS5pMThuLmxvY2FsaXplKGBDSEFSQUMuJHtrZXkudG9VcHBlckNhc2UoKX1gKVxuICAgICAgICBpZiAoY2FyYWMuc2VsZWN0ZWQgJiYgY2FyYWMub3B0aW9uYWwpIHtcbiAgICAgICAgICBvcHRpb25uYWwucHVzaChgJHtjYXJhY05hbWV9eCR7Y2FyYWMubXVsdGlwbGllcn1gKVxuICAgICAgICB9XG4gICAgICAgIGlmIChjYXJhYy5zZWxlY3RlZCAmJiAhY2FyYWMub3B0aW9uYWwpIHtcbiAgICAgICAgICBtYW5kYXRvcnkucHVzaChgJHtjYXJhY05hbWV9eCR7Y2FyYWMubXVsdGlwbGllcn1gKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBvY2N1cGF0aW9uUG9pbnRzU3RyaW5nID0gJydcbiAgICBjb25zdCBvclN0cmluZyA9IGAgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuT3InKX0gYFxuICAgIGlmIChtYW5kYXRvcnkubGVuZ3RoKSBvY2N1cGF0aW9uUG9pbnRzU3RyaW5nICs9IG1hbmRhdG9yeS5qb2luKCcgKyAnKVxuICAgIGlmIChvcHRpb25uYWwubGVuZ3RoICYmIG1hbmRhdG9yeS5sZW5ndGgpIHtcbiAgICAgIG9jY3VwYXRpb25Qb2ludHNTdHJpbmcgKz0gYCArICgke29wdGlvbm5hbC5qb2luKG9yU3RyaW5nKX0pYFxuICAgIH1cbiAgICBpZiAob3B0aW9ubmFsLmxlbmd0aCAmJiAhbWFuZGF0b3J5Lmxlbmd0aCkge1xuICAgICAgb2NjdXBhdGlvblBvaW50c1N0cmluZyArPSBvcHRpb25uYWwuam9pbihvclN0cmluZylcbiAgICB9XG4gICAgcmV0dXJuIG9jY3VwYXRpb25Qb2ludHNTdHJpbmdcbiAgfVxuXG4gIF91cGRhdGVPYmplY3QgKGV2ZW50LCBmb3JtRGF0YSkge1xuICAgIGNvbnN0IHN5c3RlbSA9IGZvdW5kcnkudXRpbHMuZXhwYW5kT2JqZWN0KGZvcm1EYXRhKT8uc3lzdGVtXG4gICAgaWYgKHN5c3RlbS5ncm91cHMpIHtcbiAgICAgIGZvcm1EYXRhWydzeXN0ZW0uZ3JvdXBzJ10gPSBPYmplY3QudmFsdWVzKFxuICAgICAgICBzeXN0ZW0uZ3JvdXBzIHx8IFtdXG4gICAgICApXG4gICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5pdGVtLnN5c3RlbS5ncm91cHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGZvcm1EYXRhW2BzeXN0ZW0uZ3JvdXBzLiR7aW5kZXh9LnNraWxsc2BdID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoXG4gICAgICAgICAgdGhpcy5pdGVtLnN5c3RlbS5ncm91cHNbaW5kZXhdLnNraWxsc1xuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuXG4gICAgc3VwZXIuX3VwZGF0ZU9iamVjdChldmVudCwgZm9ybURhdGEpXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCAkLCBBY3RvciwgQ2hhdE1lc3NhZ2UsIENPTlNULCBGb3JtQXBwbGljYXRpb24sIGZvdW5kcnksIGdhbWUsIEhvb2tzLCByZW5kZXJUZW1wbGF0ZSwgUm9sbCwgVGV4dEVkaXRvciwgdWkgKi9cbmltcG9ydCB7IEF2ZXJhZ2VSb2xsIH0gZnJvbSAnLi4vYXBwcy9hdmVyYWdlLXJvbGwuanMnXG5pbXBvcnQgeyBDT0M3IH0gZnJvbSAnLi4vY29uZmlnLmpzJ1xuaW1wb3J0IHsgQ29DQWN0b3IgfSBmcm9tICcuLi9hY3RvcnMvYWN0b3IuanMnXG5pbXBvcnQgeyBDb0M3T2NjdXBhdGlvblNoZWV0IH0gZnJvbSAnLi4vaXRlbXMvc2hlZXRzL29jY3VwYXRpb24uanMnXG5pbXBvcnQgeyBDb0M3VXRpbGl0aWVzIH0gZnJvbSAnLi4vdXRpbGl0aWVzLmpzJ1xuaW1wb3J0IHsgU2tpbGxTcGVjaWFsaXphdGlvblNlbGVjdERpYWxvZyB9IGZyb20gJy4uL2FwcHMvc2tpbGwtc3BlY2lhbGl6YXRpb24tc2VsZWN0LWRpYWxvZy5qcydcblxuZXhwb3J0IGNsYXNzIENvQzdJbnZlc3RpZ2F0b3JXaXphcmQgZXh0ZW5kcyBGb3JtQXBwbGljYXRpb24ge1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zICgpIHtcbiAgICByZXR1cm4gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgaWQ6ICdpbnZlc3RpZ2F0b3Itd2l6YXJkLWFwcGxpY2F0aW9uJyxcbiAgICAgIGNsYXNzZXM6IFsnY29jNycsICdkaWFsb2cnLCAnaW52ZXN0aWdhdG9yLXdpemFyZCddLFxuICAgICAgdGl0bGU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5JbnZlc3RpZ2F0b3JXaXphcmQuVGl0bGUnKSxcbiAgICAgIHRlbXBsYXRlOiAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hcHBzL2ludmVzdGlnYXRvci13aXphcmQuaGJzJyxcbiAgICAgIHdpZHRoOiA1MjAsXG4gICAgICBoZWlnaHQ6IDYwMCxcbiAgICAgIGNsb3NlT25TdWJtaXQ6IGZhbHNlLFxuICAgICAgc2Nyb2xsWTogWycuc2Nyb2xsc2VjdGlvbiddLFxuICAgICAgZHJhZ0Ryb3A6IFt7IGRyYWdTZWxlY3RvcjogJy5kcmFnZ2FibGUnLCBkcm9wU2VsZWN0b3I6IG51bGwgfV1cbiAgICB9KVxuICB9XG5cbiAgZ2V0IHBhZ2VMaXN0ICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgUEFHRV9OT05FOiAtMSxcbiAgICAgIFBBR0VfSU5UUk9EVUNUSU9OOiAwLFxuICAgICAgUEFHRV9DT05GSUdVUkFUSU9OOiAxLFxuICAgICAgUEFHRV9TRVRVUFM6IDIsXG4gICAgICBQQUdFX0FSQ0hFVFlQRVM6IDMsXG4gICAgICBQQUdFX0NIQVJBQ1RJU1RJQ1M6IDQsXG4gICAgICBQQUdFX0FUVFJJQlVURVM6IDUsXG4gICAgICBQQUdFX1ZJRVdfQVRUUklCVVRFUzogNixcbiAgICAgIFBBR0VfT0NDVVBBVElPTlM6IDcsXG4gICAgICBQQUdFX09DQ1VQQVRJT05fU0tJTExTOiA4LFxuICAgICAgUEFHRV9BUkNIRVRZUEVfU0tJTExTOiA5LFxuICAgICAgUEFHRV9QT0lOVFNfU0tJTExTOiAxMCxcbiAgICAgIFBBR0VfSU5WRVNUSUdBVE9SOiAxMSxcbiAgICAgIFBBR0VfQkFDS1NUT1JZOiAxMixcbiAgICAgIFBBR0VfQ1JFQVRFOiAxM1xuICAgIH1cbiAgfVxuXG4gIGdldCBjaGFyYWN0ZXJpc3RpY3NNZXRob2RzICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgTUVUSE9EX0RFRkFVTFQ6IDEsXG4gICAgICBNRVRIT0RfUk9MTDogMSxcbiAgICAgIE1FVEhPRF9QT0lOVFM6IDIsXG4gICAgICBNRVRIT0RfVkFMVUVTOiAzXG4gICAgfVxuICB9XG5cbiAgZ2V0IGNvY2lkQ3JlZGl0UmF0aW5nICgpIHtcbiAgICByZXR1cm4gJ2kuc2tpbGwuY3JlZGl0LXJhdGluZydcbiAgfVxuXG4gIGdldCBjb2NpZExhbmd1YWdlT3duICgpIHtcbiAgICByZXR1cm4gJ2kuc2tpbGwubGFuZ3VhZ2Utb3duJ1xuICB9XG5cbiAgZ2V0IHBhZ2VPcmRlciAoKSB7XG4gICAgY29uc3QgcGFnZXMgPSB0aGlzLnBhZ2VMaXN0XG4gICAgbGV0IHBhZ2VPcmRlciA9IFtcbiAgICAgIHBhZ2VzLlBBR0VfSU5UUk9EVUNUSU9OXG4gICAgXVxuICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgcGFnZU9yZGVyLnB1c2gocGFnZXMuUEFHRV9DT05GSUdVUkFUSU9OKVxuICAgIH1cbiAgICBpZiAodGhpcy5vYmplY3QuZGVmYXVsdFNldHVwID09PSAnJykge1xuICAgICAgcGFnZU9yZGVyLnB1c2gocGFnZXMuUEFHRV9TRVRVUFMpXG4gICAgfVxuICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdwdWxwUnVsZUFyY2hldHlwZScpKSB7XG4gICAgICBwYWdlT3JkZXIucHVzaChwYWdlcy5QQUdFX0FSQ0hFVFlQRVMpXG4gICAgfVxuICAgIHBhZ2VPcmRlci5wdXNoKHBhZ2VzLlBBR0VfQ0hBUkFDVElTVElDUylcbiAgICBpZiAoIWdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3B1bHBSdWxlSWdub3JlQWdlUGVuYWx0aWVzJykpIHtcbiAgICAgIHBhZ2VPcmRlci5wdXNoKHBhZ2VzLlBBR0VfQVRUUklCVVRFUylcbiAgICB9XG4gICAgcGFnZU9yZGVyID0gcGFnZU9yZGVyLmNvbmNhdChbXG4gICAgICBwYWdlcy5QQUdFX1ZJRVdfQVRUUklCVVRFUyxcbiAgICAgIHBhZ2VzLlBBR0VfT0NDVVBBVElPTlMsXG4gICAgICBwYWdlcy5QQUdFX09DQ1VQQVRJT05fU0tJTExTXG4gICAgXSlcbiAgICBpZiAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAncHVscFJ1bGVBcmNoZXR5cGUnKSkge1xuICAgICAgcGFnZU9yZGVyLnB1c2gocGFnZXMuUEFHRV9BUkNIRVRZUEVfU0tJTExTKVxuICAgIH1cbiAgICBwYWdlT3JkZXIgPSBwYWdlT3JkZXIuY29uY2F0KFtcbiAgICAgIHBhZ2VzLlBBR0VfUE9JTlRTX1NLSUxMUyxcbiAgICAgIHBhZ2VzLlBBR0VfSU5WRVNUSUdBVE9SLFxuICAgICAgcGFnZXMuUEFHRV9CQUNLU1RPUlksXG4gICAgICBwYWdlcy5QQUdFX0NSRUFURVxuICAgIF0pXG4gICAgcmV0dXJuIHBhZ2VPcmRlclxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGxvYWRDYWNoZUl0ZW1CeUNvQ0lEICgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmZyb21Db0NJRFJlZ2V4QmVzdCh7IGNvY2lkUmVnRXhwOiAvXmlcXC4vLCB0eXBlOiAnaScsIHNob3dMb2FkaW5nOiB0cnVlIH0pLnRoZW4oKGl0ZW1zKSA9PiB7XG4gICAgICAgIGNvbnN0IGxpc3QgPSB7fVxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgICAgICBsaXN0W2l0ZW0uZmxhZ3MuQ29DNy5jb2NpZEZsYWcuaWRdID0gaXRlbVxuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUobGlzdClcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jIGZpbHRlckNhY2hlSXRlbUJ5Q29DSUQgKHJlZ2V4cCkge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhhd2FpdCB0aGlzLm9iamVjdC5jYWNoZUNvQ0lEKS5maWx0ZXIoZW50cnkgPT4gZW50cnlbMF0ubWF0Y2gocmVnZXhwKSkubWFwKGVudHJ5ID0+IGVudHJ5WzFdKVxuICB9XG5cbiAgYXN5bmMgZ2V0Q2FjaGVJdGVtQnlDb0NJRCAoaWQpIHtcbiAgICByZXR1cm4gKGF3YWl0IHRoaXMub2JqZWN0LmNhY2hlQ29DSUQpW2lkXSA/PyBmYWxzZVxuICB9XG5cbiAgYXN5bmMgZXhwYW5kSXRlbUFycmF5IChpdGVtTGlzdCkge1xuICAgIGNvbnN0IGl0ZW1zID0gaXRlbUxpc3QuZmlsdGVyKGl0ID0+IHR5cGVvZiBpdCAhPT0gJ3N0cmluZycpXG4gICAgY29uc3QgY29jaWRzID0gaXRlbUxpc3QuZmlsdGVyKGl0ID0+IHR5cGVvZiBpdCA9PT0gJ3N0cmluZycpXG4gICAgaWYgKGNvY2lkcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IGF3YWl0IHRoaXMub2JqZWN0LmNhY2hlQ29DSURcbiAgICAgIGNvbnN0IG1pc3NpbmcgPSBbXVxuICAgICAgZm9yIChjb25zdCBjb2NpZCBvZiBjb2NpZHMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VbY29jaWRdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGl0ZW1zLnB1c2goc291cmNlW2NvY2lkXSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtaXNzaW5nLnB1c2goY29jaWQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtaXNzaW5nLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBlcmEgPSBnYW1lLmkxOG4uZm9ybWF0KENPQzcuZXJhc1t0aGlzLm9iamVjdC5kZWZhdWx0RXJhXSA/PyAnQ29DNy5Db0NJREZsYWcuZXJyb3IudW5rbm93bi1lcmEnLCB7IGVyYTogdGhpcy5vYmplY3QuZGVmYXVsdEVyYSB9KVxuICAgICAgICB1aS5ub3RpZmljYXRpb25zLndhcm4oZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Db0NJREZsYWcuZXJyb3IuZG9jdW1lbnRzLW5vdC1mb3VuZCcsIHsgY29jaWRzOiBtaXNzaW5nLmpvaW4oJywgJyksIGxhbmc6IGdhbWUuaTE4bi5sYW5nLCBlcmEgfSkpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpdGVtc1xuICB9XG5cbiAgZ2V0QWdlQWRqdXN0bWVudHMgKCkge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMub2JqZWN0LnNldHVwTW9kaWZpZXJzKSB7XG4gICAgICB0aGlzLm9iamVjdC5zZXR1cE1vZGlmaWVyc1trZXldID0gMFxuICAgIH1cbiAgICAvLyBlZHU6IG9wdGlvbmFsIC0gbnVtYmVyIG9mIGVkdSBpbXByb3ZlbWVudCBjaGVja3NcbiAgICAvLyBkZWR1Y3Q6IG9wdGlvbmFsIC0gZGVkdWN0IFt0b3RhbF0gYmV0d2VlbiBbZnJvbV1cbiAgICAvLyByZWR1Y2U6IG9wdGlvbmFsIC0gZGVkdWN0IFt0b3RsYV0gZnJvbSBbZnJvbV1cbiAgICAvLyBsdWNrOiBvcHRpb25hbCAtIHJlcm9sbCBsdWNrIGFuZCB0YWtlIGhpZ2hlclxuICAgIGlmICghZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAncHVscFJ1bGVJZ25vcmVBZ2VQZW5hbHRpZXMnKSkge1xuICAgICAgaWYgKHRoaXMub2JqZWN0LmFnZSA+PSA0MCkge1xuICAgICAgICBjb25zdCBrZXkgPSBNYXRoLmZsb29yKHRoaXMub2JqZWN0LmFnZSAvIDEwKVxuICAgICAgICB0aGlzLm9iamVjdC5yZXF1aXJlc0FnZUFkanVzdG1lbnRzID0ge1xuICAgICAgICAgIGVkdToge1xuICAgICAgICAgICAgdG90YWw6IChrZXkgLSAyID4gNCA/IDQgOiBrZXkgLSAyKSxcbiAgICAgICAgICAgIHJvbGxlZDogZmFsc2VcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRlZHVjdDoge1xuICAgICAgICAgICAgdG90YWw6IChrZXkgPiAxID8gNSAqIE1hdGgucG93KDIsIGtleSAtIDQpIDogMCksXG4gICAgICAgICAgICBmcm9tOiBbJ3N0cicsICdjb24nLCAnZGV4J10sXG4gICAgICAgICAgICB2YWx1ZXM6IHt9XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZWR1Y2U6IHtcbiAgICAgICAgICAgIHRvdGFsOiAoa2V5IC0gMykgKiA1LFxuICAgICAgICAgICAgZnJvbTogJ2FwcCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vYmplY3QuYWdlID49IDIwKSB7XG4gICAgICAgIHRoaXMub2JqZWN0LnJlcXVpcmVzQWdlQWRqdXN0bWVudHMgPSB7XG4gICAgICAgICAgZWR1OiB7XG4gICAgICAgICAgICB0b3RhbDogMSxcbiAgICAgICAgICAgIHJvbGxlZDogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vYmplY3QuYWdlID49IDE1KSB7XG4gICAgICAgIHRoaXMub2JqZWN0LnJlcXVpcmVzQWdlQWRqdXN0bWVudHMgPSB7XG4gICAgICAgICAgZGVkdWN0OiB7XG4gICAgICAgICAgICB0b3RhbDogNSxcbiAgICAgICAgICAgIGZyb206IFsnc3RyJywgJ3NpeiddLFxuICAgICAgICAgICAgdmFsdWVzOiB7fVxuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVkdWNlOiB7XG4gICAgICAgICAgICB0b3RhbDogNSxcbiAgICAgICAgICAgIGZyb206ICdlZHUnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBsdWNrOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5vYmplY3QucmVxdWlyZXNBZ2VBZGp1c3RtZW50cy5yZWR1Y2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMub2JqZWN0LnNldHVwTW9kaWZpZXJzW3RoaXMub2JqZWN0LnJlcXVpcmVzQWdlQWRqdXN0bWVudHMucmVkdWNlLmZyb21dID0gLXRoaXMub2JqZWN0LnJlcXVpcmVzQWdlQWRqdXN0bWVudHMucmVkdWNlLnRvdGFsXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0RGF0YSAoKSB7XG4gICAgY29uc3Qgc2hlZXREYXRhID0gYXdhaXQgc3VwZXIuZ2V0RGF0YSgpXG5cbiAgICBzaGVldERhdGEuaXNLZWVwZXIgPSBnYW1lLnVzZXIuaXNHTVxuXG4gICAgc2hlZXREYXRhLnBhZ2VzID0gdGhpcy5wYWdlTGlzdFxuXG4gICAgc2hlZXREYXRhLmNhbk5leHQgPSBmYWxzZVxuICAgIHNoZWV0RGF0YS5jcmVhdGVCdXR0b24gPSBmYWxzZVxuXG4gICAgbGV0IHNldHVwXG4gICAgbGV0IGFyY2hldHlwZVxuICAgIGxldCBvY2N1cGF0aW9uXG5cbiAgICBsZXQgc2hvd01vbmV0YXJ5ID0gZmFsc2VcblxuICAgIHN3aXRjaCAoc2hlZXREYXRhLm9iamVjdC5zdGVwKSB7XG4gICAgICBjYXNlIHNoZWV0RGF0YS5wYWdlcy5QQUdFX0lOVFJPRFVDVElPTjpcbiAgICAgICAgc2hlZXREYXRhLmVyYSA9IGdhbWUuaTE4bi5mb3JtYXQoQ09DNy5lcmFzW3NoZWV0RGF0YS5vYmplY3QuZGVmYXVsdEVyYV0gPz8gJ0NvQzcuQ29DSURGbGFnLmVycm9yLnVua25vd24tZXJhJywgeyBlcmE6IHNoZWV0RGF0YS5vYmplY3QuZGVmYXVsdEVyYSB9KVxuICAgICAgICBzaGVldERhdGEuY2FuTmV4dCA9IHRydWVcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSBzaGVldERhdGEucGFnZXMuUEFHRV9DT05GSUdVUkFUSU9OOlxuICAgICAgICBpZiAoZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgICAgICBzaGVldERhdGEuc2V0dXBzID0gYXdhaXQgdGhpcy5maWx0ZXJDYWNoZUl0ZW1CeUNvQ0lEKC9eaVxcLnNldHVwXFwuLylcbiAgICAgICAgICBzaGVldERhdGEub2NjdXBhdGlvbnMgPSBhd2FpdCB0aGlzLmZpbHRlckNhY2hlSXRlbUJ5Q29DSUQoL15pXFwub2NjdXBhdGlvblxcLi8pXG4gICAgICAgICAgc2hlZXREYXRhLmFyY2hldHlwZXMgPSBhd2FpdCB0aGlzLmZpbHRlckNhY2hlSXRlbUJ5Q29DSUQoL15pXFwuYXJjaGV0eXBlXFwuLylcbiAgICAgICAgICBzZXR1cCA9IHNoZWV0RGF0YS5zZXR1cHMuZmluZChzID0+IHMuZmxhZ3MuQ29DNy5jb2NpZEZsYWcuaWQgPT09IHNoZWV0RGF0YS5vYmplY3QuZGVmYXVsdFNldHVwKVxuICAgICAgICAgIGlmICh0eXBlb2Ygc2V0dXAgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBzaGVldERhdGEub2JqZWN0LmRlZmF1bHRTZXR1cCA9ICcnXG4gICAgICAgICAgICBzaGVldERhdGEub2JqZWN0LnNldHVwID0gJydcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2hlZXREYXRhLmRlc2NyaXB0aW9uID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgICAgICAgICBzZXR1cC5zeXN0ZW0uZGVzY3JpcHRpb24udmFsdWUsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzZWNyZXRzOiBnYW1lLnVzZXIuaXNHTVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICAgIHNoZWV0RGF0YS5vd25lcnNoaXAgPSB7XG4gICAgICAgICAgICBbQ09OU1QuRE9DVU1FTlRfT1dORVJTSElQX0xFVkVMUy5OT05FXTogJ09XTkVSU0hJUC5OT05FJyxcbiAgICAgICAgICAgIFtDT05TVC5ET0NVTUVOVF9PV05FUlNISVBfTEVWRUxTLkxJTUlURURdOiAnT1dORVJTSElQLkxJTUlURUQnLFxuICAgICAgICAgICAgW0NPTlNULkRPQ1VNRU5UX09XTkVSU0hJUF9MRVZFTFMuT0JTRVJWRVJdOiAnT1dORVJTSElQLk9CU0VSVkVSJyxcbiAgICAgICAgICAgIFtDT05TVC5ET0NVTUVOVF9PV05FUlNISVBfTEVWRUxTLk9XTkVSXTogJ09XTkVSU0hJUC5PV05FUidcbiAgICAgICAgICB9XG4gICAgICAgICAgc2hlZXREYXRhLl9lcmFzID0gW11cbiAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhDT0M3LmVyYXMpKSB7XG4gICAgICAgICAgICBzaGVldERhdGEuX2VyYXMucHVzaCh7XG4gICAgICAgICAgICAgIGlkOiBrZXksXG4gICAgICAgICAgICAgIG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSh2YWx1ZSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICAgIHNoZWV0RGF0YS5jaGFyYWN0ZXJpc3RpY3NNZXRob2RzID0gdGhpcy5jaGFyYWN0ZXJpc3RpY3NNZXRob2RzXG4gICAgICAgICAgc2hlZXREYXRhLmNoYXJhY3RlcmlzdGljc01ldGhvZCA9IHNoZWV0RGF0YS5jaGFyYWN0ZXJpc3RpY3NNZXRob2RzLk1FVEhPRF9ERUZBVUxUXG4gICAgICAgICAgaWYgKHNoZWV0RGF0YS5vYmplY3QuZW5mb3JjZVBvaW50QnV5KSB7XG4gICAgICAgICAgICBzaGVldERhdGEuY2hhcmFjdGVyaXN0aWNzTWV0aG9kID0gc2hlZXREYXRhLmNoYXJhY3RlcmlzdGljc01ldGhvZHMuTUVUSE9EX1BPSU5UU1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5vYmplY3QucXVpY2tGaXJlVmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgc2hlZXREYXRhLmNoYXJhY3RlcmlzdGljc01ldGhvZCA9IHNoZWV0RGF0YS5jaGFyYWN0ZXJpc3RpY3NNZXRob2RzLk1FVEhPRF9WQUxVRVNcbiAgICAgICAgICB9XG4gICAgICAgICAgc2hlZXREYXRhLl9lcmFzLnNvcnQoQ29DN1V0aWxpdGllcy5zb3J0QnlOYW1lS2V5KVxuICAgICAgICAgIHNoZWV0RGF0YS5oYXNBcmNoZXR5cGVzID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAncHVscFJ1bGVBcmNoZXR5cGUnKVxuICAgICAgICAgIHNoZWV0RGF0YS5jYW5OZXh0ID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2Ugc2hlZXREYXRhLnBhZ2VzLlBBR0VfU0VUVVBTOlxuICAgICAgICBpZiAoc2hlZXREYXRhLm9iamVjdC5kZWZhdWx0U2V0dXAgPT09ICcnKSB7XG4gICAgICAgICAgc2hlZXREYXRhLnNldHVwcyA9IGF3YWl0IHRoaXMuZmlsdGVyQ2FjaGVJdGVtQnlDb0NJRCgvXmlcXC5zZXR1cFxcLi8pXG4gICAgICAgICAgc2hlZXREYXRhLnNldHVwcy5zb3J0KENvQzdVdGlsaXRpZXMuc29ydEJ5TmFtZUtleSlcbiAgICAgICAgICBpZiAoc2hlZXREYXRhLm9iamVjdC5zZXR1cCAhPT0gJycpIHtcbiAgICAgICAgICAgIHNldHVwID0gc2hlZXREYXRhLnNldHVwcy5maW5kKHMgPT4gcy5mbGFncy5Db0M3LmNvY2lkRmxhZy5pZCA9PT0gc2hlZXREYXRhLm9iamVjdC5zZXR1cClcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2V0dXAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHNoZWV0RGF0YS5kZXNjcmlwdGlvbiA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgICAgICAgICAgICBzZXR1cC5zeXN0ZW0uZGVzY3JpcHRpb24udmFsdWUsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgICAgICAgICAgICBzZWNyZXRzOiBnYW1lLnVzZXIuaXNHTVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBzaGVldERhdGEuY2FuTmV4dCA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSBzaGVldERhdGEucGFnZXMuUEFHRV9BUkNIRVRZUEVTOlxuICAgICAgICBzaGVldERhdGEuYXJjaGV0eXBlcyA9IGF3YWl0IHRoaXMuZmlsdGVyQ2FjaGVJdGVtQnlDb0NJRCgvXmlcXC5hcmNoZXR5cGVcXC4vKVxuICAgICAgICBpZiAoc2hlZXREYXRhLmFyY2hldHlwZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgc2hlZXREYXRhLmNhbk5leHQgPSB0cnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2hlZXREYXRhLmFyY2hldHlwZXMuc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG4gICAgICAgICAgaWYgKHNoZWV0RGF0YS5vYmplY3QuYXJjaGV0eXBlICE9PSAnJykge1xuICAgICAgICAgICAgYXJjaGV0eXBlID0gc2hlZXREYXRhLmFyY2hldHlwZXMuZmluZChzID0+IHMuZmxhZ3MuQ29DNy5jb2NpZEZsYWcuaWQgPT09IHNoZWV0RGF0YS5vYmplY3QuYXJjaGV0eXBlKVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmNoZXR5cGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHNoZWV0RGF0YS5kZXNjcmlwdGlvbiA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgICAgICAgICAgICBhcmNoZXR5cGUuc3lzdGVtLmRlc2NyaXB0aW9uLnZhbHVlLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgc2VjcmV0czogZ2FtZS51c2VyLmlzR01cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgc2hlZXREYXRhLmJvbnVzUG9pbnRzID0gYXJjaGV0eXBlLnN5c3RlbS5ib251c1BvaW50c1xuICAgICAgICAgICAgICBjb25zdCBjb3JlQ2hhcmFjdGVyaXN0aWNzID0gW11cbiAgICAgICAgICAgICAgZm9yIChjb25zdCBjb3JlQ2hhcmFjdGVyaXN0aWMgaW4gYXJjaGV0eXBlLnN5c3RlbS5jb3JlQ2hhcmFjdGVyaXN0aWNzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFyY2hldHlwZS5zeXN0ZW0uY29yZUNoYXJhY3RlcmlzdGljc1tjb3JlQ2hhcmFjdGVyaXN0aWNdKSB7XG4gICAgICAgICAgICAgICAgICBjb3JlQ2hhcmFjdGVyaXN0aWNzLnB1c2goY29yZUNoYXJhY3RlcmlzdGljKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoY29yZUNoYXJhY3RlcmlzdGljcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9iamVjdC5jb3JlQ2hhcmFjdGVyaXN0aWMgPSAnJ1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvcmVDaGFyYWN0ZXJpc3RpY3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vYmplY3QuY29yZUNoYXJhY3RlcmlzdGljID0gY29yZUNoYXJhY3RlcmlzdGljc1swXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHNoZWV0RGF0YS5jb3JlQ2hhcmFjdGVyaXN0aWMgPSBjb3JlQ2hhcmFjdGVyaXN0aWNzLm1hcChjID0+IGMudG9Mb2NhbGVVcHBlckNhc2UoKSkuam9pbignICcgKyBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuT3InKSArICcgJylcbiAgICAgICAgICAgICAgY29uc3Qgc2tpbGxzID0gW11cbiAgICAgICAgICAgICAgYXJjaGV0eXBlLnN5c3RlbS5za2lsbHMgPSBhd2FpdCB0aGlzLmV4cGFuZEl0ZW1BcnJheShhcmNoZXR5cGUuc3lzdGVtLnNraWxscylcbiAgICAgICAgICAgICAgZm9yIChjb25zdCBza2lsbCBvZiBhcmNoZXR5cGUuc3lzdGVtLnNraWxscykge1xuICAgICAgICAgICAgICAgIHNraWxscy5wdXNoKHNraWxsLm5hbWUpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc2hlZXREYXRhLnNraWxscyA9IHNraWxscy5qb2luKCcsICcpXG4gICAgICAgICAgICAgIHNoZWV0RGF0YS5zdWdnZXN0ZWRPY2N1cGF0aW9ucyA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgICAgICAgICAgICBhcmNoZXR5cGUuc3lzdGVtLnN1Z2dlc3RlZE9jY3VwYXRpb25zLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgc2VjcmV0czogZ2FtZS51c2VyLmlzR01cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgc2hlZXREYXRhLnN1Z2dlc3RlZFRyYWl0cyA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgICAgICAgICAgICBhcmNoZXR5cGUuc3lzdGVtLnN1Z2dlc3RlZFRyYWl0cyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIHNlY3JldHM6IGdhbWUudXNlci5pc0dNXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIHNoZWV0RGF0YS5jYW5OZXh0ID0gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlIHNoZWV0RGF0YS5wYWdlcy5QQUdFX0NIQVJBQ1RJU1RJQ1M6XG4gICAgICAgIHNoZWV0RGF0YS5jaGFyYWN0ZXJpc3RpY3NNZXRob2RzID0gdGhpcy5jaGFyYWN0ZXJpc3RpY3NNZXRob2RzXG4gICAgICAgIHNoZWV0RGF0YS5jaGFyYWN0ZXJpc3RpY3NNZXRob2QgPSBzaGVldERhdGEuY2hhcmFjdGVyaXN0aWNzTWV0aG9kcy5NRVRIT0RfUk9MTFxuICAgICAgICBpZiAoc2hlZXREYXRhLm9iamVjdC5zZXR1cCAhPT0gJycpIHtcbiAgICAgICAgICBzZXR1cCA9IGF3YWl0IHRoaXMuZ2V0Q2FjaGVJdGVtQnlDb0NJRCh0aGlzLm9iamVjdC5zZXR1cClcbiAgICAgICAgICBpZiAodHlwZW9mIHNldHVwICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYgKHNldHVwLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3MucG9pbnRzLmVuYWJsZWQgfHwgdGhpcy5vYmplY3QuZW5mb3JjZVBvaW50QnV5KSB7XG4gICAgICAgICAgICAgIHNoZWV0RGF0YS5jaGFyYWN0ZXJpc3RpY3NNZXRob2QgPSBzaGVldERhdGEuY2hhcmFjdGVyaXN0aWNzTWV0aG9kcy5NRVRIT0RfUE9JTlRTXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMub2JqZWN0LnF1aWNrRmlyZVZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgc2hlZXREYXRhLmNoYXJhY3RlcmlzdGljc01ldGhvZCA9IHNoZWV0RGF0YS5jaGFyYWN0ZXJpc3RpY3NNZXRob2RzLk1FVEhPRF9WQUxVRVNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNoZWV0RGF0YS5zZXR1cCA9IHtcbiAgICAgICAgICAgICAgdG90YWw6IDAsXG4gICAgICAgICAgICAgIHBvaW50czogc2V0dXAuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5wb2ludHMudmFsdWUsXG4gICAgICAgICAgICAgIGNoYXJhY3RlcmlzdGljczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGtleTogJ3N0cicsXG4gICAgICAgICAgICAgICAgICByb2xsOiBzZXR1cC5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnJvbGxzLnN0cixcbiAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQ0hBUkFDLlN0cmVuZ3RoJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAga2V5OiAnY29uJyxcbiAgICAgICAgICAgICAgICAgIHJvbGw6IHNldHVwLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3Mucm9sbHMuY29uLFxuICAgICAgICAgICAgICAgICAgbGFiZWw6ICdDSEFSQUMuQ29uc3RpdHV0aW9uJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAga2V5OiAnc2l6JyxcbiAgICAgICAgICAgICAgICAgIHJvbGw6IHNldHVwLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3Mucm9sbHMuc2l6LFxuICAgICAgICAgICAgICAgICAgbGFiZWw6ICdDSEFSQUMuU2l6ZSdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGtleTogJ2RleCcsXG4gICAgICAgICAgICAgICAgICByb2xsOiBzZXR1cC5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnJvbGxzLmRleCxcbiAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQ0hBUkFDLkRleHRlcml0eSdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGtleTogJ2FwcCcsXG4gICAgICAgICAgICAgICAgICByb2xsOiBzZXR1cC5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnJvbGxzLmFwcCxcbiAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQ0hBUkFDLkFwcGVhcmFuY2UnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBrZXk6ICdpbnQnLFxuICAgICAgICAgICAgICAgICAgcm9sbDogc2V0dXAuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5yb2xscy5pbnQsXG4gICAgICAgICAgICAgICAgICBsYWJlbDogJ0NIQVJBQy5JbnRlbGxpZ2VuY2UnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBrZXk6ICdwb3cnLFxuICAgICAgICAgICAgICAgICAgcm9sbDogc2V0dXAuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5yb2xscy5wb3csXG4gICAgICAgICAgICAgICAgICBsYWJlbDogJ0NIQVJBQy5Qb3dlcidcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGtleTogJ2VkdScsXG4gICAgICAgICAgICAgICAgICByb2xsOiBzZXR1cC5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnJvbGxzLmVkdSxcbiAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQ0hBUkFDLkVkdWNhdGlvbidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIGx1Y2s6IHtcbiAgICAgICAgICAgICAgICByb2xsOiBzZXR1cC5zeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnJvbGxzLmx1Y2ssXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdDb0M3Lkx1Y2snXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNoZWV0RGF0YS5jb3JlQ2hhcmFjdGVyaXN0aWNzID0gW11cbiAgICAgICAgICAgIGlmIChzaGVldERhdGEub2JqZWN0LmFyY2hldHlwZSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgYXJjaGV0eXBlID0gYXdhaXQgdGhpcy5nZXRDYWNoZUl0ZW1CeUNvQ0lEKHRoaXMub2JqZWN0LmFyY2hldHlwZSlcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmNoZXR5cGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBjb3JlQ2hhcmFjdGVyaXN0aWMgaW4gYXJjaGV0eXBlLnN5c3RlbS5jb3JlQ2hhcmFjdGVyaXN0aWNzKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoYXJjaGV0eXBlLnN5c3RlbS5jb3JlQ2hhcmFjdGVyaXN0aWNzW2NvcmVDaGFyYWN0ZXJpc3RpY10pIHtcbiAgICAgICAgICAgICAgICAgICAgc2hlZXREYXRhLmNvcmVDaGFyYWN0ZXJpc3RpY3MucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAga2V5OiBjb3JlQ2hhcmFjdGVyaXN0aWMsXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZTogZ2FtZS5pMThuLmZvcm1hdChzaGVldERhdGEuc2V0dXAuY2hhcmFjdGVyaXN0aWNzLmZpbmQoYyA9PiBjLmtleSA9PT0gY29yZUNoYXJhY3RlcmlzdGljKT8ubGFiZWwgPz8gJ1Vua25vd24nKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzaGVldERhdGEuY29yZUNoYXJhY3RlcmlzdGljcy5zb3J0KENvQzdVdGlsaXRpZXMuc29ydEJ5TmFtZUtleSlcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vYmplY3QuY29yZUNoYXJhY3RlcmlzdGljICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgaWYgKGFyY2hldHlwZS5zeXN0ZW0uY29yZUNoYXJhY3RlcmlzdGljc0Zvcm11bGEuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICBzaGVldERhdGEuc2V0dXAuY2hhcmFjdGVyaXN0aWNzLmZpbmQoYyA9PiBjLmtleSA9PT0gdGhpcy5vYmplY3QuY29yZUNoYXJhY3RlcmlzdGljKS5yb2xsID0gYXJjaGV0eXBlLnN5c3RlbS5jb3JlQ2hhcmFjdGVyaXN0aWNzRm9ybXVsYS52YWx1ZVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGVtcHRpZXMgPSBmYWxzZVxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gc2hlZXREYXRhLm9iamVjdC5zZXR1cFBvaW50cykge1xuICAgICAgICAgICAgICBpZiAoc2hlZXREYXRhLm9iamVjdC5zZXR1cFBvaW50c1trZXldICE9PSAnJykge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgIT09ICdsdWNrJykge1xuICAgICAgICAgICAgICAgICAgc2hlZXREYXRhLnNldHVwLnRvdGFsICs9IHBhcnNlSW50KHNoZWV0RGF0YS5vYmplY3Quc2V0dXBQb2ludHNba2V5XSwgMTApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVtcHRpZXMgPSB0cnVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm9iamVjdC5jb3JlQ2hhcmFjdGVyaXN0aWMpIHtcbiAgICAgICAgICAgICAgc2hlZXREYXRhLmNvcmVDaGFyYWN0ZXJpc3RpYyA9IHRoaXMub2JqZWN0LmNvcmVDaGFyYWN0ZXJpc3RpYy50b0xvY2FsZVVwcGVyQ2FzZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWVtcHRpZXMgJiYgdGhpcy5vYmplY3QuYWdlID49IDE1KSB7XG4gICAgICAgICAgICAgIGlmIChbc2hlZXREYXRhLmNoYXJhY3RlcmlzdGljc01ldGhvZHMuTUVUSE9EX1JPTEwsIHNoZWV0RGF0YS5jaGFyYWN0ZXJpc3RpY3NNZXRob2RzLk1FVEhPRF9WQUxVRVNdLmluY2x1ZGVzKHNoZWV0RGF0YS5jaGFyYWN0ZXJpc3RpY3NNZXRob2QpKSB7XG4gICAgICAgICAgICAgICAgc2hlZXREYXRhLmNhbk5leHQgPSB0cnVlXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2hlZXREYXRhLnNldHVwLnRvdGFsLnRvU3RyaW5nKCkgPT09IHNoZWV0RGF0YS5zZXR1cC5wb2ludHMudG9TdHJpbmcoKSkge1xuICAgICAgICAgICAgICAgIHNoZWV0RGF0YS5jYW5OZXh0ID0gdHJ1ZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2Ugc2hlZXREYXRhLnBhZ2VzLlBBR0VfQVRUUklCVVRFUzpcbiAgICAgICAgc2hlZXREYXRhLnB1bHBSdWxlSWdub3JlQWdlUGVuYWx0aWVzID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAncHVscFJ1bGVJZ25vcmVBZ2VQZW5hbHRpZXMnKVxuICAgICAgICBzaGVldERhdGEuY2FuTmV4dCA9IHRydWVcbiAgICAgICAgc2hlZXREYXRhLnBvaW50cyA9IHt9XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMub2JqZWN0LnNldHVwTW9kaWZpZXJzKSB7XG4gICAgICAgICAgc2hlZXREYXRhLnBvaW50c1trZXldID0ge1xuICAgICAgICAgICAgdmFsdWU6IHBhcnNlSW50KHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2tleV0sIDEwKSArIHBhcnNlSW50KHRoaXMub2JqZWN0LnNldHVwTW9kaWZpZXJzW2tleV0sIDEwKSxcbiAgICAgICAgICAgIG1pbjogLXBhcnNlSW50KHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2tleV0sIDEwKSArIDEsXG4gICAgICAgICAgICBsYWJlbDogQ29DN1V0aWxpdGllcy5nZXRDaGFyYWN0ZXJpc3RpY05hbWVzKGtleSkubGFiZWxcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9iamVjdC5yZXF1aXJlc0FnZUFkanVzdG1lbnRzLmVkdSAhPT0gJ3VuZGVmaW5lZCcgJiYgIXRoaXMub2JqZWN0LnJlcXVpcmVzQWdlQWRqdXN0bWVudHMuZWR1LnJvbGxlZCkge1xuICAgICAgICAgIHNoZWV0RGF0YS5jYW5OZXh0ID0gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub2JqZWN0LnJlcXVpcmVzQWdlQWRqdXN0bWVudHMuZGVkdWN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHNoZWV0RGF0YS5kZWR1Y3RUb3RhbCA9IDBcbiAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLm9iamVjdC5yZXF1aXJlc0FnZUFkanVzdG1lbnRzLmRlZHVjdC5mcm9tKSB7XG4gICAgICAgICAgICBzaGVldERhdGEuZGVkdWN0VG90YWwgPSBzaGVldERhdGEuZGVkdWN0VG90YWwgLSBwYXJzZUludCh0aGlzLm9iamVjdC5zZXR1cE1vZGlmaWVyc1trZXldLCAxMClcbiAgICAgICAgICB9XG4gICAgICAgICAgc2hlZXREYXRhLmRlZHVjdEZyb20gPSB0aGlzLm9iamVjdC5yZXF1aXJlc0FnZUFkanVzdG1lbnRzLmRlZHVjdC5mcm9tLm1hcChuID0+IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ0hBUkFDLicgKyBuLnRvVXBwZXJDYXNlKCkpKS5qb2luKCcsICcpLnJlcGxhY2UoLygsICkoW14sXSspJC8sICckMScgKyBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuT3InKSArICcgJDInKS5yZXBsYWNlKC9eKFteLF0rKSwoW14sXSspJC8sICckMSQyJylcbiAgICAgICAgICBpZiAoc2hlZXREYXRhLmRlZHVjdFRvdGFsICE9PSB0aGlzLm9iamVjdC5yZXF1aXJlc0FnZUFkanVzdG1lbnRzLmRlZHVjdC50b3RhbCkge1xuICAgICAgICAgICAgc2hlZXREYXRhLmNhbk5leHQgPSBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub2JqZWN0LnJlcXVpcmVzQWdlQWRqdXN0bWVudHMucmVkdWNlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHNoZWV0RGF0YS5yZWR1Y2VGcm9tID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDSEFSQUMuJyArIHRoaXMub2JqZWN0LnJlcXVpcmVzQWdlQWRqdXN0bWVudHMucmVkdWNlLmZyb20udG9VcHBlckNhc2UoKSlcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub2JqZWN0LnJlcXVpcmVzQWdlQWRqdXN0bWVudHMubHVjayAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBzaGVldERhdGEubHVja1ZhbHVlID0gTWF0aC5tYXgodGhpcy5vYmplY3Quc2V0dXBQb2ludHMubHVjaywgdGhpcy5vYmplY3Quc2V0dXBNb2RpZmllcnMubHVjaylcbiAgICAgICAgICBpZiAodGhpcy5vYmplY3Quc2V0dXBNb2RpZmllcnMubHVjayA9PT0gMCkge1xuICAgICAgICAgICAgc2hlZXREYXRhLmNhbk5leHQgPSBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlIHNoZWV0RGF0YS5wYWdlcy5QQUdFX1ZJRVdfQVRUUklCVVRFUzpcbiAgICAgICAgc2hlZXREYXRhLnBvaW50cyA9IHt9XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMub2JqZWN0LnNldHVwTW9kaWZpZXJzKSB7XG4gICAgICAgICAgc2hlZXREYXRhLnBvaW50c1trZXldID0ge1xuICAgICAgICAgICAgdmFsdWU6IHBhcnNlSW50KHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2tleV0sIDEwKSArIHBhcnNlSW50KHRoaXMub2JqZWN0LnNldHVwTW9kaWZpZXJzW2tleV0sIDEwKSxcbiAgICAgICAgICAgIHByZWZpeDogJycsXG4gICAgICAgICAgICBzdWZmaXg6ICclJyxcbiAgICAgICAgICAgIGxhYmVsOiBDb0M3VXRpbGl0aWVzLmdldENoYXJhY3RlcmlzdGljTmFtZXMoa2V5KS5sYWJlbFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzaGVldERhdGEucG9pbnRzLmRiID0ge1xuICAgICAgICAgIHZhbHVlOiBDb0NBY3Rvci5kYkZyb21DaGFyYWN0ZXJpc3RpY3Moc2hlZXREYXRhLnBvaW50cyksXG4gICAgICAgICAgcHJlZml4OiAnJyxcbiAgICAgICAgICBzdWZmaXg6ICcnLFxuICAgICAgICAgIGxhYmVsOiAnQ29DNy5Cb251c0RhbWFnZSdcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOYU4oc2hlZXREYXRhLnBvaW50cy5kYi52YWx1ZSkgfHwgTnVtYmVyKHNoZWV0RGF0YS5wb2ludHMuZGIudmFsdWUpID49IDApIHtcbiAgICAgICAgICBzaGVldERhdGEucG9pbnRzLmRiLnByZWZpeCA9ICcrJ1xuICAgICAgICB9XG4gICAgICAgIHNoZWV0RGF0YS5wb2ludHMuYnVpbGQgPSB7XG4gICAgICAgICAgdmFsdWU6IENvQ0FjdG9yLmJ1aWxkRnJvbUNoYXJhY3RlcmlzdGljcyhzaGVldERhdGEucG9pbnRzKSxcbiAgICAgICAgICBwcmVmaXg6ICcnLFxuICAgICAgICAgIHN1ZmZpeDogJycsXG4gICAgICAgICAgbGFiZWw6ICdDb0M3LkJ1aWxkJ1xuICAgICAgICB9XG4gICAgICAgIGlmIChOdW1iZXIoc2hlZXREYXRhLnBvaW50cy5idWlsZC52YWx1ZSkgPj0gMCkge1xuICAgICAgICAgIHNoZWV0RGF0YS5wb2ludHMuYnVpbGQucHJlZml4ID0gJysnXG4gICAgICAgIH1cbiAgICAgICAgc2hlZXREYXRhLnBvaW50cy5ocCA9IHtcbiAgICAgICAgICB2YWx1ZTogQ29DQWN0b3IuaHBGcm9tQ2hhcmFjdGVyaXN0aWNzKHNoZWV0RGF0YS5wb2ludHMsICdjaGFyYWN0ZXInKSxcbiAgICAgICAgICBwcmVmaXg6ICcnLFxuICAgICAgICAgIHN1ZmZpeDogJycsXG4gICAgICAgICAgbGFiZWw6ICdDb0M3LkhpdFBvaW50cydcbiAgICAgICAgfVxuICAgICAgICBzaGVldERhdGEucG9pbnRzLmhwLnByZWZpeCA9IHNoZWV0RGF0YS5wb2ludHMuaHAudmFsdWUgKyAnLydcbiAgICAgICAgc2hlZXREYXRhLnBvaW50cy5tcCA9IHtcbiAgICAgICAgICB2YWx1ZTogQ29DQWN0b3IubXBGcm9tQ2hhcmFjdGVyaXN0aWNzKHNoZWV0RGF0YS5wb2ludHMpLFxuICAgICAgICAgIHByZWZpeDogJycsXG4gICAgICAgICAgc3VmZml4OiAnJyxcbiAgICAgICAgICBsYWJlbDogJ0NvQzcuTWFnaWNQb2ludHMnXG4gICAgICAgIH1cbiAgICAgICAgc2hlZXREYXRhLnBvaW50cy5tcC5wcmVmaXggPSBzaGVldERhdGEucG9pbnRzLm1wLnZhbHVlICsgJy8nXG4gICAgICAgIHNoZWV0RGF0YS5wb2ludHMuc2FuID0ge1xuICAgICAgICAgIHZhbHVlOiBzaGVldERhdGEucG9pbnRzLnBvdy52YWx1ZSxcbiAgICAgICAgICBwcmVmaXg6ICcnLFxuICAgICAgICAgIHN1ZmZpeDogJy85OScsXG4gICAgICAgICAgbGFiZWw6ICdDb0M3LlNhbml0eSdcbiAgICAgICAgfVxuICAgICAgICBzaGVldERhdGEucG9pbnRzLm1vdiA9IHtcbiAgICAgICAgICB2YWx1ZTogQ29DQWN0b3IubW92RnJvbUNoYXJhY3RlcmlzdGljcyhzaGVldERhdGEucG9pbnRzLCAnY2hhcmFjdGVyJywgdGhpcy5vYmplY3QuYWdlKSxcbiAgICAgICAgICBwcmVmaXg6ICcnLFxuICAgICAgICAgIHN1ZmZpeDogJycsXG4gICAgICAgICAgbGFiZWw6ICdDb0M3Lk1vdmVtZW50J1xuICAgICAgICB9XG4gICAgICAgIHNoZWV0RGF0YS5jYW5OZXh0ID0gdHJ1ZVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlIHNoZWV0RGF0YS5wYWdlcy5QQUdFX09DQ1VQQVRJT05TOlxuICAgICAgICBzaGVldERhdGEub2NjdXBhdGlvbnMgPSBhd2FpdCB0aGlzLmZpbHRlckNhY2hlSXRlbUJ5Q29DSUQoL15pXFwub2NjdXBhdGlvblxcLi8pXG4gICAgICAgIHNoZWV0RGF0YS5vY2N1cGF0aW9ucy5zb3J0KENvQzdVdGlsaXRpZXMuc29ydEJ5TmFtZUtleSlcbiAgICAgICAgaWYgKHNoZWV0RGF0YS5vYmplY3Qub2NjdXBhdGlvbiAhPT0gJycpIHtcbiAgICAgICAgICBvY2N1cGF0aW9uID0gc2hlZXREYXRhLm9jY3VwYXRpb25zLmZpbmQocyA9PiBzLmZsYWdzLkNvQzcuY29jaWRGbGFnLmlkID09PSBzaGVldERhdGEub2JqZWN0Lm9jY3VwYXRpb24pXG4gICAgICAgICAgaWYgKHR5cGVvZiBvY2N1cGF0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgc2hlZXREYXRhLmRlc2NyaXB0aW9uID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgICAgICAgICBvY2N1cGF0aW9uLnN5c3RlbS5kZXNjcmlwdGlvbi52YWx1ZSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNlY3JldHM6IGdhbWUudXNlci5pc0dNXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIHNoZWV0RGF0YS5vY2N1cGF0aW9uUG9pbnRzU3RyaW5nID0gQ29DN09jY3VwYXRpb25TaGVldC5vY2N1cGF0aW9uUG9pbnRzU3RyaW5nKG9jY3VwYXRpb24uc3lzdGVtLm9jY3VwYXRpb25Ta2lsbFBvaW50cylcbiAgICAgICAgICAgIHNoZWV0RGF0YS5jcmVkaXRSYXRpbmcgPSBvY2N1cGF0aW9uLnN5c3RlbS5jcmVkaXRSYXRpbmdcbiAgICAgICAgICAgIHNoZWV0RGF0YS5wZXJzb25hbCA9IG9jY3VwYXRpb24uc3lzdGVtLnBlcnNvbmFsXG4gICAgICAgICAgICBzaGVldERhdGEucGVyc29uYWxUZXh0ID0gb2NjdXBhdGlvbi5zeXN0ZW0ucGVyc29uYWxUZXh0XG4gICAgICAgICAgICBzaGVldERhdGEuc2tpbGxzID0gYXdhaXQgdGhpcy5leHBhbmRJdGVtQXJyYXkob2NjdXBhdGlvbi5zeXN0ZW0uc2tpbGxzKVxuICAgICAgICAgICAgc2hlZXREYXRhLmdyb3VwcyA9IHt9XG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgb2NjdXBhdGlvbi5zeXN0ZW0uZ3JvdXBzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICBzaGVldERhdGEuZ3JvdXBzW2luZGV4XSA9IHtcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBvY2N1cGF0aW9uLnN5c3RlbS5ncm91cHNbaW5kZXhdLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgc2tpbGxzOiBbXVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHNoZWV0RGF0YS5ncm91cHNbaW5kZXhdLnNraWxscyA9IGF3YWl0IHRoaXMuZXhwYW5kSXRlbUFycmF5KG9jY3VwYXRpb24uc3lzdGVtLmdyb3Vwc1tpbmRleF0uc2tpbGxzKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2hlZXREYXRhLnBvaW50cyA9IDBcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBbXVxuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCBjYXJhY10gb2YgT2JqZWN0LmVudHJpZXMob2NjdXBhdGlvbi5zeXN0ZW0ub2NjdXBhdGlvblNraWxsUG9pbnRzKSkge1xuICAgICAgICAgICAgICBpZiAoY2FyYWMuc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2FyYWMub3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaChjYXJhYy5tdWx0aXBsaWVyICogKHBhcnNlSW50KHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2tleV0sIDEwKSArIHBhcnNlSW50KHRoaXMub2JqZWN0LnNldHVwTW9kaWZpZXJzW2tleV0sIDEwKSkpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHNoZWV0RGF0YS5wb2ludHMgKz0gY2FyYWMubXVsdGlwbGllciAqIChwYXJzZUludCh0aGlzLm9iamVjdC5zZXR1cFBvaW50c1trZXldLCAxMCkgKyBwYXJzZUludCh0aGlzLm9iamVjdC5zZXR1cE1vZGlmaWVyc1trZXldLCAxMCkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHNoZWV0RGF0YS5wb2ludHMgKz0gTWF0aC5tYXgoLi4ub3B0aW9ucylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNoZWV0RGF0YS5jYW5OZXh0ID0gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlIHNoZWV0RGF0YS5wYWdlcy5QQUdFX0lOVkVTVElHQVRPUjpcbiAgICAgICAgc2hlZXREYXRhLmxhbmd1YWdlID0gKHR5cGVvZiB0aGlzLm9iamVjdC5za2lsbEl0ZW1zW3RoaXMuY29jaWRMYW5ndWFnZU93bl0gIT09ICd1bmRlZmluZWQnKVxuICAgICAgICBpZiAoc2hlZXREYXRhLmxhbmd1YWdlKSB7XG4gICAgICAgICAgc2hlZXREYXRhLmxhbmd1YWdlTmFtZSA9IHRoaXMub2JqZWN0LnNraWxsSXRlbXNbdGhpcy5jb2NpZExhbmd1YWdlT3duXS5pdGVtLm5hbWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzaGVldERhdGEubGFuZ3VhZ2VOYW1lID0gJydcbiAgICAgICAgfVxuICAgICAgICBzaGVldERhdGEuY2FuTmV4dCA9IHRydWVcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSBzaGVldERhdGEucGFnZXMuUEFHRV9PQ0NVUEFUSU9OX1NLSUxMUzpcbiAgICAgICAgc2hlZXREYXRhLmRlZmF1bHQgPSAwXG4gICAgICAgIHNoZWV0RGF0YS5zZWxlY3RlZCA9IDBcbiAgICAgICAgc2hlZXREYXRhLnNraWxsSXRlbXMgPSBbXVxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLm9iamVjdC5za2lsbEl0ZW1zKSB7XG4gICAgICAgICAgbGV0IGdyb3VwID0gJ290aGVyJ1xuICAgICAgICAgIGNvbnN0IHJvd3MgPSBzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzLmxlbmd0aFxuICAgICAgICAgIGNvbnN0IGlzTXVsdGlwbGUgPSBzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5mbGFncy5pc011bHRpcGxlXG4gICAgICAgICAgaWYgKGlzTXVsdGlwbGUpIHtcbiAgICAgICAgICAgIHNoZWV0RGF0YS5za2lsbEl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgIGluZGV4OiAtMSxcbiAgICAgICAgICAgICAgbmFtZTogc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0uaXRlbS5uYW1lLFxuICAgICAgICAgICAgICBncm91cCxcbiAgICAgICAgICAgICAgdG9nZ2xlOiBmYWxzZSxcbiAgICAgICAgICAgICAgaXNDcmVkaXRSYXRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICBpc011bHRpcGxlOiB0cnVlLFxuICAgICAgICAgICAgICBpc1BpY2thYmxlOiBmYWxzZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJvd3M7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGxldCBpc1BpY2thYmxlID0gZmFsc2VcbiAgICAgICAgICAgIGlmIChzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XS5pc09jY3VwYXRpb25EZWZhdWx0KSB7XG4gICAgICAgICAgICAgIGdyb3VwID0gJ2RlZmF1bHQnXG4gICAgICAgICAgICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICAgICAgICAgICAgaXNQaWNrYWJsZSA9IHRydWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzaGVldERhdGEuZGVmYXVsdCsrXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNoZWV0RGF0YS5vYmplY3Quc2tpbGxJdGVtc1trZXldLnJvd3NbaW5kZXhdLmluT2NjdXBhdGlvbkdyb3VwICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICBncm91cCA9IHNoZWV0RGF0YS5vYmplY3Quc2tpbGxJdGVtc1trZXldLnJvd3NbaW5kZXhdLmluT2NjdXBhdGlvbkdyb3VwXG4gICAgICAgICAgICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICAgICAgICAgICAgaXNQaWNrYWJsZSA9IHRydWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZ3JvdXAgPSAnb3RoZXInXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdG9nZ2xlID0gc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93c1tpbmRleF0ub2NjdXBhdGlvblRvZ2dsZVxuICAgICAgICAgICAgaWYgKGlzUGlja2FibGUpIHtcbiAgICAgICAgICAgICAgdG9nZ2xlID0gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBzcGVjaWFsaXphdGlvbiA9IHNoZWV0RGF0YS5vYmplY3Quc2tpbGxJdGVtc1trZXldLml0ZW0uc3lzdGVtLnNwZWNpYWxpemF0aW9uXG4gICAgICAgICAgICBsZXQgc2tpbGxOYW1lID0gc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0uaXRlbS5zeXN0ZW0uc2tpbGxOYW1lXG4gICAgICAgICAgICBsZXQgcGlja2VkID0gZmFsc2VcbiAgICAgICAgICAgIGxldCBkZWxldGVhYmxlID0gZmFsc2VcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93c1tpbmRleF0uc2VsZWN0ZWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIHBpY2tlZCA9IHRydWVcbiAgICAgICAgICAgICAgc2tpbGxOYW1lID0gc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93c1tpbmRleF0uc2VsZWN0ZWRcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93c1tpbmRleF0uc2VsZWN0ZWQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIHBpY2tlZCA9IHRydWVcbiAgICAgICAgICAgICAgc3BlY2lhbGl6YXRpb24gPSBzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XS5zZWxlY3RlZC5zeXN0ZW0uc3BlY2lhbGl6YXRpb25cbiAgICAgICAgICAgICAgc2tpbGxOYW1lID0gc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93c1tpbmRleF0uc2VsZWN0ZWQuc3lzdGVtLnNraWxsTmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRvZ2dsZSB8fCAoaXNQaWNrYWJsZSAmJiBwaWNrZWQpKSB7XG4gICAgICAgICAgICAgIHNoZWV0RGF0YS5zZWxlY3RlZCsrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbmFtZSA9IHNoZWV0RGF0YS5vYmplY3Quc2tpbGxJdGVtc1trZXldLml0ZW0ubmFtZVxuICAgICAgICAgICAgaWYgKGtleSA9PT0gdGhpcy5jb2NpZExhbmd1YWdlT3duKSB7XG4gICAgICAgICAgICAgIG5hbWUgPSBzcGVjaWFsaXphdGlvbiArICcgKCcgKyBza2lsbE5hbWUgKyAnKSdcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzUGlja2FibGUgJiYgcGlja2VkKSB7XG4gICAgICAgICAgICAgIG5hbWUgPSBzcGVjaWFsaXphdGlvbiArICcgKCcgKyBza2lsbE5hbWUgKyAnKSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNQaWNrYWJsZSAmJiBwaWNrZWQpIHtcbiAgICAgICAgICAgICAgZGVsZXRlYWJsZSA9ICFzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XS5hcmNoZXR5cGVUb2dnbGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNoZWV0RGF0YS5za2lsbEl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICBncm91cDogZ3JvdXAudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgdG9nZ2xlLFxuICAgICAgICAgICAgICBpc0NyZWRpdFJhdGluZzogc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93c1tpbmRleF0uaXNDcmVkaXRSYXRpbmcsXG4gICAgICAgICAgICAgIGlzTXVsdGlwbGU6IGZhbHNlLFxuICAgICAgICAgICAgICBpc1BpY2thYmxlLFxuICAgICAgICAgICAgICBwaWNrZWQsXG4gICAgICAgICAgICAgIGRlbGV0ZWFibGUsXG4gICAgICAgICAgICAgIHNwZWNpYWxpemF0aW9uLFxuICAgICAgICAgICAgICBza2lsbE5hbWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNoZWV0RGF0YS5tYXggPSAocGFyc2VJbnQoc2hlZXREYXRhLmRlZmF1bHQsIDEwKSB8fCAwKSArIChwYXJzZUludChzaGVldERhdGEub2JqZWN0LnBlcnNvbmFsLCAxMCkgfHwgMCkgKyBPYmplY3QudmFsdWVzKHNoZWV0RGF0YS5vYmplY3Qub2NjdXBhdGlvbkdyb3VwcykucmVkdWNlKChzLCB2KSA9PiBzICsgKHBhcnNlSW50KHYsIDEwKSB8fCAwKSwgMClcbiAgICAgICAgc2hlZXREYXRhLnNraWxsSXRlbXMuc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG4gICAgICAgIGlmIChzaGVldERhdGEuc2VsZWN0ZWQgPT09IHNoZWV0RGF0YS5tYXgpIHtcbiAgICAgICAgICBzaGVldERhdGEuY2FuTmV4dCA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlIHNoZWV0RGF0YS5wYWdlcy5QQUdFX0FSQ0hFVFlQRV9TS0lMTFM6XG4gICAgICAgIHNoZWV0RGF0YS5tYXggPSAwXG4gICAgICAgIHNoZWV0RGF0YS5zZWxlY3RlZCA9IDBcbiAgICAgICAgc2hlZXREYXRhLnNraWxsSXRlbXMgPSBbXVxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLm9iamVjdC5za2lsbEl0ZW1zKSB7XG4gICAgICAgICAgbGV0IGdyb3VwID0gJ290aGVyJ1xuICAgICAgICAgIGNvbnN0IHJvd3MgPSBzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzLmxlbmd0aFxuICAgICAgICAgIGNvbnN0IGlzTXVsdGlwbGUgPSBzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5mbGFncy5pc011bHRpcGxlXG4gICAgICAgICAgaWYgKGlzTXVsdGlwbGUpIHtcbiAgICAgICAgICAgIHNoZWV0RGF0YS5za2lsbEl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgIGluZGV4OiAtMSxcbiAgICAgICAgICAgICAgbmFtZTogc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0uaXRlbS5uYW1lLFxuICAgICAgICAgICAgICBncm91cCxcbiAgICAgICAgICAgICAgdG9nZ2xlOiBmYWxzZSxcbiAgICAgICAgICAgICAgaXNDcmVkaXRSYXRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICBpc011bHRpcGxlOiB0cnVlLFxuICAgICAgICAgICAgICBpc1BpY2thYmxlOiBmYWxzZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJvd3M7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGxldCBpc1BpY2thYmxlID0gZmFsc2VcbiAgICAgICAgICAgIGlmIChzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XS5pc0FyY2hldHlwZURlZmF1bHQpIHtcbiAgICAgICAgICAgICAgZ3JvdXAgPSAnZGVmYXVsdCdcbiAgICAgICAgICAgICAgaWYgKGlzTXVsdGlwbGUpIHtcbiAgICAgICAgICAgICAgICBpc1BpY2thYmxlID0gdHJ1ZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHNoZWV0RGF0YS5tYXgrK1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZ3JvdXAgPSAnb3RoZXInXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdG9nZ2xlID0gc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93c1tpbmRleF0uYXJjaGV0eXBlVG9nZ2xlXG4gICAgICAgICAgICBpZiAoaXNQaWNrYWJsZSkge1xuICAgICAgICAgICAgICB0b2dnbGUgPSBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHNwZWNpYWxpemF0aW9uID0gc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0uaXRlbS5zeXN0ZW0uc3BlY2lhbGl6YXRpb25cbiAgICAgICAgICAgIGxldCBza2lsbE5hbWUgPSBzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5pdGVtLnN5c3RlbS5za2lsbE5hbWVcbiAgICAgICAgICAgIGxldCBwaWNrZWQgPSBmYWxzZVxuICAgICAgICAgICAgbGV0IGRlbGV0ZWFibGUgPSBmYWxzZVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XS5zZWxlY3RlZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgcGlja2VkID0gdHJ1ZVxuICAgICAgICAgICAgICBza2lsbE5hbWUgPSBzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XS5zZWxlY3RlZFxuICAgICAgICAgICAgfSBlbHNlIGlmIChzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XS5zZWxlY3RlZCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgcGlja2VkID0gdHJ1ZVxuICAgICAgICAgICAgICBzcGVjaWFsaXphdGlvbiA9IHNoZWV0RGF0YS5vYmplY3Quc2tpbGxJdGVtc1trZXldLnJvd3NbaW5kZXhdLnNlbGVjdGVkLnN5c3RlbS5zcGVjaWFsaXphdGlvblxuICAgICAgICAgICAgICBza2lsbE5hbWUgPSBzaGVldERhdGEub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XS5zZWxlY3RlZC5zeXN0ZW0uc2tpbGxOYW1lXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodG9nZ2xlIHx8IChpc1BpY2thYmxlICYmIHBpY2tlZCkpIHtcbiAgICAgICAgICAgICAgc2hlZXREYXRhLnNlbGVjdGVkKytcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBuYW1lID0gc2hlZXREYXRhLm9iamVjdC5za2lsbEl0ZW1zW2tleV0uaXRlbS5uYW1lXG4gICAgICAgICAgICBpZiAoa2V5ID09PSB0aGlzLmNvY2lkTGFuZ3VhZ2VPd24pIHtcbiAgICAgICAgICAgICAgbmFtZSA9IHNwZWNpYWxpemF0aW9uICsgJyAoJyArIHNraWxsTmFtZSArICcpJ1xuICAgICAgICAgICAgfSBlbHNlIGlmICghaXNQaWNrYWJsZSAmJiBwaWNrZWQpIHtcbiAgICAgICAgICAgICAgbmFtZSA9IHNwZWNpYWxpemF0aW9uICsgJyAoJyArIHNraWxsTmFtZSArICcpJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc1BpY2thYmxlICYmIHBpY2tlZCkge1xuICAgICAgICAgICAgICBkZWxldGVhYmxlID0gIXNoZWV0RGF0YS5vYmplY3Quc2tpbGxJdGVtc1trZXldLnJvd3NbaW5kZXhdLm9jY3VwYXRpb25Ub2dnbGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNoZWV0RGF0YS5za2lsbEl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICBncm91cDogZ3JvdXAudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgdG9nZ2xlLFxuICAgICAgICAgICAgICBpc0NyZWRpdFJhdGluZzogZmFsc2UsXG4gICAgICAgICAgICAgIGlzTXVsdGlwbGU6IGZhbHNlLFxuICAgICAgICAgICAgICBpc1BpY2thYmxlLFxuICAgICAgICAgICAgICBwaWNrZWQsXG4gICAgICAgICAgICAgIGRlbGV0ZWFibGUsXG4gICAgICAgICAgICAgIHNwZWNpYWxpemF0aW9uLFxuICAgICAgICAgICAgICBza2lsbE5hbWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNoZWV0RGF0YS5za2lsbEl0ZW1zLnNvcnQoQ29DN1V0aWxpdGllcy5zb3J0QnlOYW1lS2V5KVxuICAgICAgICBpZiAoc2hlZXREYXRhLnNlbGVjdGVkID09PSBzaGVldERhdGEubWF4KSB7XG4gICAgICAgICAgc2hlZXREYXRhLmNhbk5leHQgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSBzaGVldERhdGEucGFnZXMuUEFHRV9QT0lOVFNfU0tJTExTOlxuICAgICAgICBzaGVldERhdGEuc2tpbGxzID0gW11cbiAgICAgICAgc2hlZXREYXRhLmNyZWRpdFJhdGluZ09rYXkgPSAhKHRoaXMub2JqZWN0LmNyZWRpdFJhdGluZy5tYXggPiAwKVxuICAgICAgICBzaGVldERhdGEucGVyc29uYWwgPSB7XG4gICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgdG90YWw6IDIgKiAocGFyc2VJbnQodGhpcy5vYmplY3Quc2V0dXBQb2ludHMuaW50LCAxMCkgKyBwYXJzZUludCh0aGlzLm9iamVjdC5zZXR1cE1vZGlmaWVycy5pbnQsIDEwKSksXG4gICAgICAgICAgcmVtYWluaW5nOiAwXG4gICAgICAgIH1cbiAgICAgICAgc2hlZXREYXRhLm9jY3VwYXRpb24gPSB7XG4gICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgdG90YWw6IDAsXG4gICAgICAgICAgcmVtYWluaW5nOiAwXG4gICAgICAgIH1cbiAgICAgICAgc2hlZXREYXRhLmFyY2hldHlwZSA9IHtcbiAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICB0b3RhbDogMCxcbiAgICAgICAgICByZW1haW5pbmc6IDBcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hlZXREYXRhLm9iamVjdC5zZXR1cCAhPT0gJycpIHtcbiAgICAgICAgICBzaG93TW9uZXRhcnkgPSAoYXdhaXQgdGhpcy5nZXRDYWNoZUl0ZW1CeUNvQ0lEKHNoZWV0RGF0YS5vYmplY3Quc2V0dXApKS5zeXN0ZW0ubW9uZXRhcnkudmFsdWVzLmxlbmd0aCA+IDBcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hlZXREYXRhLm9iamVjdC5vY2N1cGF0aW9uICE9PSAnJykge1xuICAgICAgICAgIG9jY3VwYXRpb24gPSBhd2FpdCB0aGlzLmdldENhY2hlSXRlbUJ5Q29DSUQodGhpcy5vYmplY3Qub2NjdXBhdGlvbilcbiAgICAgICAgICBpZiAob2NjdXBhdGlvbikge1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IFtdXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIGNhcmFjXSBvZiBPYmplY3QuZW50cmllcyhvY2N1cGF0aW9uLnN5c3RlbS5vY2N1cGF0aW9uU2tpbGxQb2ludHMpKSB7XG4gICAgICAgICAgICAgIGlmIChjYXJhYy5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgIGlmIChjYXJhYy5vcHRpb25hbCkge1xuICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKGNhcmFjLm11bHRpcGxpZXIgKiAocGFyc2VJbnQodGhpcy5vYmplY3Quc2V0dXBQb2ludHNba2V5XSwgMTApICsgcGFyc2VJbnQodGhpcy5vYmplY3Quc2V0dXBNb2RpZmllcnNba2V5XSwgMTApKSlcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgc2hlZXREYXRhLm9jY3VwYXRpb24udG90YWwgKz0gY2FyYWMubXVsdGlwbGllciAqIChwYXJzZUludCh0aGlzLm9iamVjdC5zZXR1cFBvaW50c1trZXldLCAxMCkgKyBwYXJzZUludCh0aGlzLm9iamVjdC5zZXR1cE1vZGlmaWVyc1trZXldLCAxMCkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHNoZWV0RGF0YS5vY2N1cGF0aW9uLnRvdGFsICs9IE1hdGgubWF4KC4uLm9wdGlvbnMpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9iamVjdC5hcmNoZXR5cGUgIT09ICcnKSB7XG4gICAgICAgICAgY29uc3QgYXJjaGV0eXBlID0gYXdhaXQgZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmZyb21Db0NJRCh0aGlzLm9iamVjdC5hcmNoZXR5cGUpXG4gICAgICAgICAgaWYgKGFyY2hldHlwZS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHNoZWV0RGF0YS5hcmNoZXR5cGUudG90YWwgPSBhcmNoZXR5cGVbMF0uc3lzdGVtLmJvbnVzUG9pbnRzXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLm9iamVjdC5za2lsbEl0ZW1zKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5vYmplY3Quc2tpbGxJdGVtcykge1xuICAgICAgICAgICAgY29uc3Qgc2tpbGwgPSB0aGlzLm9iamVjdC5za2lsbEl0ZW1zW2tleV1cbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMCwgaW0gPSBza2lsbC5yb3dzLmxlbmd0aDsgaW5kZXggPCBpbTsgaW5kZXgrKykge1xuICAgICAgICAgICAgICBjb25zdCByb3cgPSBza2lsbC5yb3dzW2luZGV4XVxuICAgICAgICAgICAgICBpZiAoIXNraWxsLmZsYWdzLmlzTXVsdGlwbGUgfHwgcm93LnNlbGVjdGVkICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGxldCBpdGVtID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoc2tpbGwuaXRlbSlcbiAgICAgICAgICAgICAgICBpZiAocm93LnNlbGVjdGVkICE9PSBmYWxzZSAmJiB0eXBlb2Ygcm93LnNlbGVjdGVkICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgaXRlbSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHJvdy5zZWxlY3RlZClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGJhc2UgPSBpdGVtLnN5c3RlbS5iYXNlXG4gICAgICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNOdW1lcmljKGJhc2UpKSB7XG4gICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLm9iamVjdC5zZXR1cFBvaW50cykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWdFeCA9IG5ldyBSZWdFeHAoJ0AnICsga2V5LCAnaScpXG4gICAgICAgICAgICAgICAgICAgIGJhc2UgPSBiYXNlLnJlcGxhY2UocmVnRXgsIHBhcnNlSW50KHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2tleV0sIDEwKSArIHBhcnNlSW50KHRoaXMub2JqZWN0LnNldHVwTW9kaWZpZXJzW2tleV0sIDEwKSlcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNOdW1lcmljKGJhc2UpKSB7XG4gICAgICAgICAgICAgICAgICBiYXNlID0gTWF0aC5mbG9vcihuZXcgQXZlcmFnZVJvbGwoJygnICsgYmFzZSArICcpJylbKCFmb3VuZHJ5LnV0aWxzLmlzTmV3ZXJWZXJzaW9uKGdhbWUudmVyc2lvbiwgJzEyJykgPyAnZXZhbHVhdGUnIDogJ2V2YWx1YXRlU3luYycpLyogLy8gRm91bmRyeVZUVCB2MTEgKi9dKHsgbWluaW1pemU6IHRydWUsIG1heGltaXplOiB0cnVlIH0pLnRvdGFsKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgdG90YWxQb2ludHMgPSBwYXJzZUludChiYXNlLCAxMClcbiAgICAgICAgICAgICAgICBpZiAoTnVtYmVyKHJvdy5wZXJzb25hbFBvaW50cykgPiAwKSB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBudW0gPSBOdW1iZXIocm93LnBlcnNvbmFsUG9pbnRzKVxuICAgICAgICAgICAgICAgICAgc2hlZXREYXRhLnBlcnNvbmFsLmNvdW50ICs9IG51bVxuICAgICAgICAgICAgICAgICAgdG90YWxQb2ludHMgPSB0b3RhbFBvaW50cyArIG51bVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoTnVtYmVyKHJvdy5vY2N1cGF0aW9uUG9pbnRzKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IG51bSA9IE51bWJlcihyb3cub2NjdXBhdGlvblBvaW50cylcbiAgICAgICAgICAgICAgICAgIHNoZWV0RGF0YS5vY2N1cGF0aW9uLmNvdW50ICs9IG51bVxuICAgICAgICAgICAgICAgICAgdG90YWxQb2ludHMgPSB0b3RhbFBvaW50cyArIG51bVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoTnVtYmVyKHJvdy5hcmNoZXR5cGVQb2ludHMpID4gMCkge1xuICAgICAgICAgICAgICAgICAgY29uc3QgbnVtID0gTnVtYmVyKHJvdy5hcmNoZXR5cGVQb2ludHMpXG4gICAgICAgICAgICAgICAgICBzaGVldERhdGEuYXJjaGV0eXBlLmNvdW50ICs9IG51bVxuICAgICAgICAgICAgICAgICAgdG90YWxQb2ludHMgPSB0b3RhbFBvaW50cyArIG51bVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoTnVtYmVyKHJvdy5leHBlcmllbmNlUG9pbnRzKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IG51bSA9IE51bWJlcihyb3cuZXhwZXJpZW5jZVBvaW50cylcbiAgICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRzID0gdG90YWxQb2ludHMgKyBudW1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IG5hbWUgPSBpdGVtLm5hbWVcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSB0aGlzLmNvY2lkTGFuZ3VhZ2VPd24pIHtcbiAgICAgICAgICAgICAgICAgIG5hbWUgPSBpdGVtLnN5c3RlbS5zcGVjaWFsaXphdGlvbiArICcgKCcgKyBpdGVtLnN5c3RlbS5za2lsbE5hbWUgKyAnKSdcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNraWxsLmZsYWdzLmlzQ3JlZGl0UmF0aW5nKSB7XG4gICAgICAgICAgICAgICAgICBuYW1lID0gbmFtZSArICcgWycgKyB0aGlzLm9iamVjdC5jcmVkaXRSYXRpbmcubWluICsgJyAtICcgKyB0aGlzLm9iamVjdC5jcmVkaXRSYXRpbmcubWF4ICsgJ10nXG4gICAgICAgICAgICAgICAgICBpZiAodG90YWxQb2ludHMgPj0gdGhpcy5vYmplY3QuY3JlZGl0UmF0aW5nLm1pbiAmJiB0b3RhbFBvaW50cyA8PSB0aGlzLm9iamVjdC5jcmVkaXRSYXRpbmcubWF4KSB7XG4gICAgICAgICAgICAgICAgICAgIHNoZWV0RGF0YS5jcmVkaXRSYXRpbmdPa2F5ID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHJvdy5zZWxlY3RlZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgIG5hbWUgPSBpdGVtLnN5c3RlbS5zcGVjaWFsaXphdGlvbiArICcgKCcgKyByb3cuc2VsZWN0ZWQgKyAnKSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2hlZXREYXRhLnNraWxscy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgIGlzT2NjdXBhdGlvbjogcm93Lm9jY3VwYXRpb25Ub2dnbGUsXG4gICAgICAgICAgICAgICAgICBpc0FyY2hldHlwZTogcm93LmFyY2hldHlwZVRvZ2dsZSxcbiAgICAgICAgICAgICAgICAgIGJhc2UsXG4gICAgICAgICAgICAgICAgICBwZXJzb25hbFBvaW50czogcm93LnBlcnNvbmFsUG9pbnRzLFxuICAgICAgICAgICAgICAgICAgb2NjdXBhdGlvblBvaW50czogcm93Lm9jY3VwYXRpb25Qb2ludHMsXG4gICAgICAgICAgICAgICAgICBhcmNoZXR5cGVQb2ludHM6IHJvdy5hcmNoZXR5cGVQb2ludHMsXG4gICAgICAgICAgICAgICAgICBleHBlcmllbmNlUG9pbnRzOiByb3cuZXhwZXJpZW5jZVBvaW50cyxcbiAgICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRzLFxuICAgICAgICAgICAgICAgICAgc2hvd0NyZWRpdFJhdGluZzogc2hvd01vbmV0YXJ5ICYmIGtleSA9PT0gdGhpcy5jb2NpZENyZWRpdFJhdGluZ1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgc2hlZXREYXRhLnNraWxscy5zb3J0KENvQzdVdGlsaXRpZXMuc29ydEJ5TmFtZUtleSlcbiAgICAgICAgICBpZiAoc2hlZXREYXRhLmNyZWRpdFJhdGluZ09rYXkpIHtcbiAgICAgICAgICAgIHNoZWV0RGF0YS5jYW5OZXh0ID0gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNoZWV0RGF0YS5wZXJzb25hbC5yZW1haW5pbmcgPSBzaGVldERhdGEucGVyc29uYWwudG90YWwgLSBzaGVldERhdGEucGVyc29uYWwuY291bnRcbiAgICAgICAgc2hlZXREYXRhLm9jY3VwYXRpb24ucmVtYWluaW5nID0gc2hlZXREYXRhLm9jY3VwYXRpb24udG90YWwgLSBzaGVldERhdGEub2NjdXBhdGlvbi5jb3VudFxuICAgICAgICBzaGVldERhdGEuYXJjaGV0eXBlLnJlbWFpbmluZyA9IHNoZWV0RGF0YS5hcmNoZXR5cGUudG90YWwgLSBzaGVldERhdGEuYXJjaGV0eXBlLmNvdW50XG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2Ugc2hlZXREYXRhLnBhZ2VzLlBBR0VfQkFDS1NUT1JZOlxuICAgICAgICB7XG4gICAgICAgICAgY29uc3QgYWxsQmFja3N0b3JpZXMgPSBhd2FpdCB0aGlzLm9iamVjdC5jYWNoZUJhY2tzdG9yaWVzXG4gICAgICAgICAgc2hlZXREYXRhLmJhY2tzdG9yaWVzID0ge31cbiAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5vYmplY3QuYmlvU2VjdGlvbnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBzaGVldERhdGEuYmFja3N0b3JpZXNbaW5kZXhdID0ge1xuICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgbmFtZTogdGhpcy5vYmplY3QuYmlvU2VjdGlvbnNbaW5kZXhdLm5hbWUsXG4gICAgICAgICAgICAgIHJvbGxzOiAoZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmZpbmRDb2NJZEluTGlzdCh0aGlzLm9iamVjdC5iaW9TZWN0aW9uc1tpbmRleF0ua2V5LCBhbGxCYWNrc3RvcmllcykubGVuZ3RoID8gdGhpcy5vYmplY3QuYmlvU2VjdGlvbnNbaW5kZXhdLmtleSA6ICcnKSxcbiAgICAgICAgICAgICAgdmFsdWU6IHRoaXMub2JqZWN0LmJpb1NlY3Rpb25zW2luZGV4XS52YWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzaGVldERhdGEuY2FuTmV4dCA9IHRydWVcbiAgICAgICAgc2hlZXREYXRhLmNyZWF0ZUJ1dHRvbiA9IGdhbWUudXNlci5yb2xlID49IENPTlNULlVTRVJfUEVSTUlTU0lPTlMuQUNUT1JfQ1JFQVRFLmRlZmF1bHRSb2xlXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2Ugc2hlZXREYXRhLnBhZ2VzLlBBR0VfQ1JFQVRFOlxuICAgICAgICBzaGVldERhdGEuY2FuTmV4dCA9IHRydWVcbiAgICAgICAgc2hlZXREYXRhLmNyZWF0ZUJ1dHRvbiA9IHRydWVcbiAgICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICByZXR1cm4gc2hlZXREYXRhXG4gIH1cblxuICBhY3RpdmF0ZUxpc3RlbmVycyAoaHRtbCkge1xuICAgIHN1cGVyLmFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpXG4gICAgaHRtbC5rZXlwcmVzcyhlID0+IC90ZXh0YXJlYS9pLnRlc3QoKGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudCkudGFnTmFtZSkgfHwgKGUua2V5Q29kZSB8fCBlLndoaWNoIHx8IGUuY2hhckNvZGUgfHwgMCkgIT09IDEzKVxuICAgIGh0bWwuZmluZCgnLnN1Ym1pdF9vbl9jaGFuZ2UnKS5jaGFuZ2UodGhpcy5fb25DaGFuZ2VTdWJtaXQuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJy5yb2xsLWNoYXJhY3RlcmlzdGljJykuY2xpY2sodGhpcy5fb25Sb2xsQ2hhcmFjdGVyaXN0aWMuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJy5pbmNyZWFzZS0xMC1jaGFyYWN0ZXJpc3RpYycpLmNsaWNrKHRoaXMuX29uSW5jcmVhc2VDaGFyYWN0ZXJpc3RpYzEwLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCcuaW5jcmVhc2UtY2hhcmFjdGVyaXN0aWMnKS5jbGljayh0aGlzLl9vbkluY3JlYXNlQ2hhcmFjdGVyaXN0aWMuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJy5kZWNyZWFzZS1jaGFyYWN0ZXJpc3RpYycpLmNsaWNrKHRoaXMuX29uRGVjcmVhc2VDaGFyYWN0ZXJpc3RpYy5iaW5kKHRoaXMpKVxuICAgIGh0bWwuZmluZCgnLmRlY3JlYXNlLTEwLWNoYXJhY3RlcmlzdGljJykuY2xpY2sodGhpcy5fb25EZWNyZWFzZUNoYXJhY3RlcmlzdGljMTAuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJ2J1dHRvbi5yb2xsX2FsbCcpLmNsaWNrKHRoaXMuX29uUm9sbEFsbC5iaW5kKHRoaXMpKVxuICAgIGh0bWwuZmluZCgnYnV0dG9uLnJvbGxfZWR1JykuY2xpY2sodGhpcy5fb25Sb2xsRWR1LmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCdidXR0b24ucm9sbF9sdWNrJykuY2xpY2sodGhpcy5fb25Sb2xsTHVjay5iaW5kKHRoaXMpKVxuICAgIGh0bWwuZmluZCgnLml0ZW0gaW5wdXQuc3VibWl0X29uX2JsdXInKS5ibHVyKHRoaXMuX29uQ2hhbmdlU3VibWl0LmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCcuaXRlbSBpbnB1dC5zYXZlLWNoYXJhY3RlcmlzdGljLW9uLWJsdXInKS5ibHVyKHRoaXMuX29uQ2hhbmdlU2F2ZUNoYXJhY3RlcmlzdGljLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCcuaXRlbS50b2dnbGVhYmxlJykuY2xpY2sodGhpcy5fb25Ub2dnbGVTa2lsbC5iaW5kKHRoaXMpKVxuICAgIGh0bWwuZmluZCgnLml0ZW0uY2xpY2thYmxlJykuY2xpY2sodGhpcy5fb25DbGlja1BpY2tTa2lsbC5iaW5kKHRoaXMpKVxuICAgIGh0bWwuZmluZCgnLnNraWxscy1saXN0IGlucHV0JykuY2xpY2sodGhpcy5fb25DbGlja1NraWxsU3BlY2lhbC5iaW5kKHRoaXMpKVxuICAgIGh0bWwuZmluZCgnLnNraWxscy1saXN0IC5yZW1vdmUtc2tpbGwnKS5jbGljayh0aGlzLl9vbkNsaWNrUmVtb3ZlU2tpbGwuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJy5pdGVtIGlucHV0LnNraWxsLWFkanVzdG1lbnQnKS5ibHVyKHRoaXMuX29uQ2hhbmdlU2tpbGxQb2ludHMuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJ3RleHRhcmVhLmJhY2tzdG9yeS10ZXh0Jykua2V5dXAodGhpcy5fb25DaGFuZ2VCYWNrc3RvcnlUZXh0LmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCdidXR0b24uYmFja3N0b3J5LXJvbGwnKS5jbGljayh0aGlzLl9vblJvbGxCYWNrc3RvcnkuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJ2J1dHRvbi5iYWNrc3RvcnktcmVzZXQnKS5jbGljayh0aGlzLl9vblJlc2V0QmFja3N0b3J5LmJpbmQodGhpcykpXG4gIH1cblxuICBhc3luYyByb2xsTWVzc2FnZSAocm9sbHMpIHtcbiAgICBpZiAocm9sbHMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBodG1sID0gW11cbiAgICAgIGZvciAoY29uc3Qgcm9sbCBvZiByb2xscykge1xuICAgICAgICBodG1sLnB1c2goYXdhaXQgcmVuZGVyVGVtcGxhdGUoUm9sbC5DSEFUX1RFTVBMQVRFLCB7XG4gICAgICAgICAgZm9ybXVsYTogKENvQzdVdGlsaXRpZXMuZ2V0Q2hhcmFjdGVyaXN0aWNOYW1lcyhyb2xsWzBdKT8ubGFiZWwgPz8gcm9sbFswXSkgKyAnOiAnICsgcm9sbFsxXSxcbiAgICAgICAgICB0b29sdGlwOiBhd2FpdCByb2xsWzJdLmdldFRvb2x0aXAoKSxcbiAgICAgICAgICB0b3RhbDogcm9sbFsyXS50b3RhbFxuICAgICAgICB9KSlcbiAgICAgIH1cbiAgICAgIENoYXRNZXNzYWdlLmNyZWF0ZSh7XG4gICAgICAgIHVzZXI6IGdhbWUudXNlci5pZCxcbiAgICAgICAgc3BlYWtlcjoge1xuICAgICAgICAgIGFsaWFzOiBnYW1lLnVzZXIubmFtZVxuICAgICAgICB9LFxuICAgICAgICBjb250ZW50OiBodG1sLmpvaW4oJzxkaXY+Jm5ic3A7PC9kaXY+JyksXG4gICAgICAgIHdoaXNwZXI6IENoYXRNZXNzYWdlLmdldFdoaXNwZXJSZWNpcGllbnRzKCdHTScpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGFkZEl0ZW1Ub0xpc3QgKGl0ZW0sIHsgaXNPY2N1cGF0aW9uRGVmYXVsdCA9IGZhbHNlLCBpbk9jY3VwYXRpb25Hcm91cCA9IGZhbHNlLCBvY2N1cGF0aW9uVG9nZ2xlID0gZmFsc2UsIGlzQXJjaGV0eXBlRGVmYXVsdCA9IGZhbHNlLCBhcmNoZXR5cGVUb2dnbGUgPSBmYWxzZSwgaXNDcmVkaXRSYXRpbmcgPSBmYWxzZSB9ID0ge30pIHtcbiAgICBjb25zdCBrZXkgPSAoaXRlbS5mbGFncy5Db0M3Py5jb2NpZEZsYWc/LmlkID8/IGl0ZW0ubmFtZSlcbiAgICBpZiAoaXRlbS50eXBlICE9PSAnc2tpbGwnKSB7XG4gICAgICB0aGlzLm9iamVjdC5pbnZlc3RpZ2F0b3JJdGVtcy5wdXNoKGl0ZW0pXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgaXNNdWx0aXBsZSA9ICEhKGl0ZW0uc3lzdGVtLnByb3BlcnRpZXMuc3BlY2lhbCAmJiAoKGl0ZW0uc3lzdGVtLnByb3BlcnRpZXMucmVxdWlyZXNuYW1lICYmICEoaXRlbS5zeXN0ZW0ucHJvcGVydGllcy5vbmx5b25lID8/IGZhbHNlKSkgfHwgaXRlbS5zeXN0ZW0ucHJvcGVydGllcy5waWNrbmFtZW9ubHkgfHwgaXRlbS5uYW1lID09PSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkFueVNwZWNOYW1lJykpKVxuICAgIGNvbnN0IGZsYWdzID0ge1xuICAgICAgaXNPY2N1cGF0aW9uRGVmYXVsdCxcbiAgICAgIGluT2NjdXBhdGlvbkdyb3VwLFxuICAgICAgaXNBcmNoZXR5cGVEZWZhdWx0LFxuICAgICAgaXNDcmVkaXRSYXRpbmcsXG4gICAgICBvY2N1cGF0aW9uVG9nZ2xlLFxuICAgICAgYXJjaGV0eXBlVG9nZ2xlXG4gICAgfVxuICAgIGNvbnN0IHJvd3MgPSB7XG4gICAgICBvY2N1cGF0aW9uUG9pbnRzOiAnJyxcbiAgICAgIGFyY2hldHlwZVBvaW50czogJycsXG4gICAgICBleHBlcmllbmNlUG9pbnRzOiAnJyxcbiAgICAgIHBlcnNvbmFsUG9pbnRzOiAnJyxcbiAgICAgIHNlbGVjdGVkOiBmYWxzZVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHRoaXMub2JqZWN0LnNraWxsSXRlbXNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMub2JqZWN0LnNraWxsSXRlbXNba2V5XSA9IHtcbiAgICAgICAgaXRlbSxcbiAgICAgICAgZmxhZ3M6IGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3QoZmxhZ3MsIHsgaXNNdWx0aXBsZSB9LCB7IGlucGxhY2U6IGZhbHNlIH0pLFxuICAgICAgICByb3dzOiBbXVxuICAgICAgfVxuICAgICAgaWYgKCFpc011bHRpcGxlIHx8ICEoaXNPY2N1cGF0aW9uRGVmYXVsdCA9PT0gZmFsc2UgJiYgaW5PY2N1cGF0aW9uR3JvdXAgPT09IGZhbHNlICYmIGlzQXJjaGV0eXBlRGVmYXVsdCA9PT0gZmFsc2UpKSB7XG4gICAgICAgIHRoaXMub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzLnB1c2goZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChmbGFncywgcm93cywgeyBpbnBsYWNlOiBmYWxzZSB9KSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFpc011bHRpcGxlKSB7XG4gICAgICAgIGZvciAoY29uc3QgZmxhZyBpbiBmbGFncykge1xuICAgICAgICAgIHRoaXMub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzWzBdW2ZsYWddID0gdGhpcy5vYmplY3Quc2tpbGxJdGVtc1trZXldLnJvd3NbMF1bZmxhZ10gfHwgZmxhZ3NbZmxhZ11cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vYmplY3Quc2tpbGxJdGVtc1trZXldLnJvd3MucHVzaChmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KGZsYWdzLCByb3dzLCB7IGlucGxhY2U6IGZhbHNlIH0pKVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBmbGFnIGluIGZsYWdzKSB7XG4gICAgICAgIHRoaXMub2JqZWN0LnNraWxsSXRlbXNba2V5XS5mbGFnc1tmbGFnXSA9IHRoaXMub2JqZWN0LnNraWxsSXRlbXNba2V5XS5mbGFnc1tmbGFnXSB8fCBmbGFnc1tmbGFnXVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWlzTXVsdGlwbGUgJiYgZmxhZ3MuaXNDcmVkaXRSYXRpbmcpIHtcbiAgICAgIHRoaXMub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzWzBdLm9jY3VwYXRpb25Qb2ludHMgPSB0aGlzLm9iamVjdC5jcmVkaXRSYXRpbmcubWluXG4gICAgfVxuICB9XG5cbiAgY2xlYXJTZXR1cFBvaW50cyAoKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5vYmplY3Quc2V0dXBQb2ludHMpIHtcbiAgICAgIHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2tleV0gPSAnJ1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHNldFNraWxsTGlzdHMgKCkge1xuICAgIHRoaXMub2JqZWN0LnNraWxsSXRlbXMgPSB7fVxuICAgIHRoaXMub2JqZWN0Lm9jY3VwYXRpb25Hcm91cHMgPSB7fVxuICAgIHRoaXMub2JqZWN0LmludmVzdGlnYXRvckl0ZW1zID0gW11cbiAgICB0aGlzLm9iamVjdC5wbGFjZWFibGUgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLm9iamVjdC5xdWlja0ZpcmVWYWx1ZXMpXG4gICAgY29uc3Qgc2V0dXAgPSBhd2FpdCB0aGlzLmdldENhY2hlSXRlbUJ5Q29DSUQodGhpcy5vYmplY3Quc2V0dXApXG4gICAgY29uc3Qgb2NjdXBhdGlvbiA9IGF3YWl0IHRoaXMuZ2V0Q2FjaGVJdGVtQnlDb0NJRCh0aGlzLm9iamVjdC5vY2N1cGF0aW9uKVxuICAgIGxldCBhcmNoZXR5cGUgPSBmYWxzZVxuICAgIGlmICh0aGlzLm9iamVjdC5hcmNoZXR5cGUgIT09ICcnKSB7XG4gICAgICBhcmNoZXR5cGUgPSBhd2FpdCB0aGlzLmdldENhY2hlSXRlbUJ5Q29DSUQodGhpcy5vYmplY3QuYXJjaGV0eXBlKVxuICAgIH1cbiAgICBpZiAoc2V0dXAgJiYgb2NjdXBhdGlvbiAmJiAoIWdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3B1bHBSdWxlQXJjaGV0eXBlJykgfHwgYXJjaGV0eXBlKSkge1xuICAgICAgdGhpcy5vYmplY3QuYmlvU2VjdGlvbnMgPSBbXVxuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHNldHVwLnN5c3RlbS5iaW9TZWN0aW9ucy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdGhpcy5vYmplY3QuYmlvU2VjdGlvbnMucHVzaCh7XG4gICAgICAgICAgbmFtZTogc2V0dXAuc3lzdGVtLmJpb1NlY3Rpb25zW2luZGV4XSxcbiAgICAgICAgICB2YWx1ZTogJycsXG4gICAgICAgICAga2V5OiAncnQuLmJhY2tzdG9yeS0nICsgQ29DN1V0aWxpdGllcy50b0tlYmFiQ2FzZShzZXR1cC5zeXN0ZW0uYmlvU2VjdGlvbnNbaW5kZXhdKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgdGhpcy5vYmplY3QucGVyc29uYWwgPSBvY2N1cGF0aW9uLnN5c3RlbS5wZXJzb25hbFxuICAgICAgdGhpcy5vYmplY3QucGVyc29uYWxUZXh0ID0gb2NjdXBhdGlvbi5zeXN0ZW0ucGVyc29uYWxUZXh0XG4gICAgICB0aGlzLm9iamVjdC5jcmVkaXRSYXRpbmcgPSBvY2N1cGF0aW9uLnN5c3RlbS5jcmVkaXRSYXRpbmdcbiAgICAgIGxldCBpdGVtcyA9IFtdXG4gICAgICBpdGVtcyA9IGF3YWl0IHRoaXMuZXhwYW5kSXRlbUFycmF5KHNldHVwLnN5c3RlbS5pdGVtcylcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMCwgaW0gPSBpdGVtcy5sZW5ndGg7IGluZGV4IDwgaW07IGluZGV4KyspIHtcbiAgICAgICAgdGhpcy5hZGRJdGVtVG9MaXN0KGl0ZW1zW2luZGV4XSlcbiAgICAgIH1cbiAgICAgIGl0ZW1zID0gYXdhaXQgdGhpcy5leHBhbmRJdGVtQXJyYXkob2NjdXBhdGlvbi5zeXN0ZW0uc2tpbGxzKVxuICAgICAgZm9yIChsZXQgaW5kZXggPSAwLCBpbSA9IGl0ZW1zLmxlbmd0aDsgaW5kZXggPCBpbTsgaW5kZXgrKykge1xuICAgICAgICB0aGlzLmFkZEl0ZW1Ub0xpc3QoaXRlbXNbaW5kZXhdLCB7IGlzT2NjdXBhdGlvbkRlZmF1bHQ6IHRydWUsIG9jY3VwYXRpb25Ub2dnbGU6IHRydWUgfSlcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGdyb3VwID0gMCwgZ20gPSBvY2N1cGF0aW9uLnN5c3RlbS5ncm91cHMubGVuZ3RoOyBncm91cCA8IGdtOyBncm91cCsrKSB7XG4gICAgICAgIHRoaXMub2JqZWN0Lm9jY3VwYXRpb25Hcm91cHNbZ3JvdXBdID0gb2NjdXBhdGlvbi5zeXN0ZW0uZ3JvdXBzW2dyb3VwXS5vcHRpb25zXG4gICAgICAgIGl0ZW1zID0gYXdhaXQgdGhpcy5leHBhbmRJdGVtQXJyYXkob2NjdXBhdGlvbi5zeXN0ZW0uZ3JvdXBzW2dyb3VwXS5za2lsbHMpXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMCwgaW0gPSBpdGVtcy5sZW5ndGg7IGluZGV4IDwgaW07IGluZGV4KyspIHtcbiAgICAgICAgICB0aGlzLmFkZEl0ZW1Ub0xpc3QoaXRlbXNbaW5kZXhdLCB7IGluT2NjdXBhdGlvbkdyb3VwOiBncm91cCB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYXJjaGV0eXBlKSB7XG4gICAgICAgIGl0ZW1zID0gYXdhaXQgdGhpcy5leHBhbmRJdGVtQXJyYXkoYXJjaGV0eXBlLnN5c3RlbS5za2lsbHMpXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMCwgaW0gPSBpdGVtcy5sZW5ndGg7IGluZGV4IDwgaW07IGluZGV4KyspIHtcbiAgICAgICAgICB0aGlzLmFkZEl0ZW1Ub0xpc3QoaXRlbXNbaW5kZXhdLCB7IGlzQXJjaGV0eXBlRGVmYXVsdDogdHJ1ZSwgYXJjaGV0eXBlVG9nZ2xlOiB0cnVlIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChOdW1iZXIodGhpcy5vYmplY3QuY3JlZGl0UmF0aW5nLm1heCkgPiAwKSB7XG4gICAgICAgIGNvbnN0IG5hbWVDcmVkaXRSYXRpbmcgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkNvQ0lERmxhZy5rZXlzLicgKyB0aGlzLmNvY2lkQ3JlZGl0UmF0aW5nKVxuICAgICAgICBjb25zdCBmbGFncyA9IHsgaXNPY2N1cGF0aW9uRGVmYXVsdDogdHJ1ZSwgb2NjdXBhdGlvblRvZ2dsZTogdHJ1ZSwgaXNDcmVkaXRSYXRpbmc6IHRydWUgfVxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub2JqZWN0LnNraWxsSXRlbXNbdGhpcy5jb2NpZENyZWRpdFJhdGluZ10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhpcy5hZGRJdGVtVG9MaXN0KHRoaXMub2JqZWN0LnNraWxsSXRlbXNbdGhpcy5jb2NpZENyZWRpdFJhdGluZ10uaXRlbSwgZmxhZ3MpXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMub2JqZWN0LnNraWxsSXRlbXNbbmFtZUNyZWRpdFJhdGluZ10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhpcy5hZGRJdGVtVG9MaXN0KHRoaXMub2JqZWN0LnNraWxsSXRlbXNbbmFtZUNyZWRpdFJhdGluZ10uaXRlbSwgZmxhZ3MpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qgc2tpbGwgPSBhd2FpdCBnYW1lLnN5c3RlbS5hcGkuY29jaWQuZnJvbUNvQ0lEKHRoaXMuY29jaWRDcmVkaXRSYXRpbmcpXG4gICAgICAgICAgaWYgKHNraWxsLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5hZGRJdGVtVG9MaXN0KHNraWxsWzBdLCBmbGFncylcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfb25EcmFnU3RhcnQgKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5jaGFyYWN0ZXJpc3RpY0tleSkge1xuICAgICAgY29uc3QgZHJhZ0RhdGEgPSB7IHR5cGU6ICdpbnZlc3RpZ2F0b3JDaGFyYWN0ZXJpc3RpYycsIGtleTogZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmNoYXJhY3RlcmlzdGljS2V5LCB2YWx1ZTogZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnZhbHVlIH1cbiAgICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5zZXREYXRhKCd0ZXh0L3BsYWluJywgSlNPTi5zdHJpbmdpZnkoZHJhZ0RhdGEpKVxuICAgIH1cbiAgfVxuXG4gIF9jYW5EcmFnU3RhcnQgKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIF9jYW5EcmFnRHJvcCAoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgYXN5bmMgX29uRHJvcCAoZXZlbnQpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZGF0YUxpc3QgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKCd0ZXh0L3BsYWluJykpXG4gICAgICBpZiAodHlwZW9mIGRhdGFMaXN0LnR5cGUgIT09ICd1bmRlZmluZWQnICYmIGRhdGFMaXN0LnR5cGUgPT09ICdpbnZlc3RpZ2F0b3JDaGFyYWN0ZXJpc3RpYycpIHtcbiAgICAgICAgZGF0YUxpc3QuZGVzdGluYXRpb24gPSBldmVudC50YXJnZXQuY2xvc2VzdCgnbGknKS5kYXRhc2V0LmNoYXJhY3RlcmlzdGljS2V5XG4gICAgICAgIGRhdGFMaXN0Lm9rYXkgPSBmYWxzZVxuICAgICAgICBpZiAoZGF0YUxpc3Qua2V5ID09PSAnLScgJiYgdHlwZW9mIHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2RhdGFMaXN0LmRlc3RpbmF0aW9uXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMub2JqZWN0LnBsYWNlYWJsZS5pbmRleE9mKHBhcnNlSW50KGRhdGFMaXN0LnZhbHVlLCAxMCkpXG4gICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5vYmplY3QucGxhY2VhYmxlLnNwbGljZShpbmRleCwgMSlcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2RhdGFMaXN0LmRlc3RpbmF0aW9uXSAhPT0gJycpIHtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0LnBsYWNlYWJsZS5wdXNoKHBhcnNlSW50KHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2RhdGFMaXN0LmRlc3RpbmF0aW9uXSwgMTApKVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLm9iamVjdC5zZXR1cFBvaW50c1tkYXRhTGlzdC5kZXN0aW5hdGlvbl0gPSBwYXJzZUludChkYXRhTGlzdC52YWx1ZSwgMTApXG4gICAgICAgICAgdGhpcy5vYmplY3QucGxhY2VhYmxlLnNvcnQoKS5yZXZlcnNlKClcbiAgICAgICAgICBkYXRhTGlzdC5va2F5ID0gdHJ1ZVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLm9iamVjdC5zZXR1cFBvaW50c1tkYXRhTGlzdC5rZXldICE9PSAndW5kZWZpbmVkJyAmJiBkYXRhTGlzdC5kZXN0aW5hdGlvbiA9PT0gJy0nKSB7XG4gICAgICAgICAgaWYgKHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2RhdGFMaXN0LmtleV0gIT09ICcnKSB7XG4gICAgICAgICAgICB0aGlzLm9iamVjdC5wbGFjZWFibGUucHVzaChwYXJzZUludCh0aGlzLm9iamVjdC5zZXR1cFBvaW50c1tkYXRhTGlzdC5rZXldLCAxMCkpXG4gICAgICAgICAgICB0aGlzLm9iamVjdC5zZXR1cFBvaW50c1tkYXRhTGlzdC5rZXldID0gJydcbiAgICAgICAgICAgIHRoaXMub2JqZWN0LnBsYWNlYWJsZS5zb3J0KCkucmV2ZXJzZSgpXG4gICAgICAgICAgICBkYXRhTGlzdC5va2F5ID0gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5vYmplY3Quc2V0dXBQb2ludHNbZGF0YUxpc3Qua2V5XSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2RhdGFMaXN0LmRlc3RpbmF0aW9uXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBjb25zdCB0ZW1wID0gKHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2RhdGFMaXN0LmtleV0gPT09ICcnID8gJycgOiBwYXJzZUludCh0aGlzLm9iamVjdC5zZXR1cFBvaW50c1tkYXRhTGlzdC5rZXldLCAxMCkpXG4gICAgICAgICAgdGhpcy5vYmplY3Quc2V0dXBQb2ludHNbZGF0YUxpc3Qua2V5XSA9ICh0aGlzLm9iamVjdC5zZXR1cFBvaW50c1tkYXRhTGlzdC5kZXN0aW5hdGlvbl0gPT09ICcnID8gJycgOiBwYXJzZUludCh0aGlzLm9iamVjdC5zZXR1cFBvaW50c1tkYXRhTGlzdC5kZXN0aW5hdGlvbl0sIDEwKSlcbiAgICAgICAgICB0aGlzLm9iamVjdC5zZXR1cFBvaW50c1tkYXRhTGlzdC5kZXN0aW5hdGlvbl0gPSB0ZW1wXG4gICAgICAgICAgZGF0YUxpc3Qub2theSA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YUxpc3Qub2theSkge1xuICAgICAgICAgIHRoaXMucmVuZGVyKHRydWUpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICB9XG4gICAgY29uc3QgZGF0YUxpc3QgPSBhd2FpdCBDb0M3VXRpbGl0aWVzLmdldERhdGFGcm9tRHJvcEV2ZW50KGV2ZW50LCAnSXRlbScpXG4gICAgaWYgKFt0aGlzLnBhZ2VMaXN0LlBBR0VfQVJDSEVUWVBFX1NLSUxMUywgdGhpcy5wYWdlTGlzdC5QQUdFX09DQ1VQQVRJT05fU0tJTExTXS5pbmNsdWRlcyh0aGlzLm9iamVjdC5zdGVwKSkge1xuICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGRhdGFMaXN0KSB7XG4gICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdza2lsbCcpIHtcbiAgICAgICAgICB0aGlzLmFkZEl0ZW1Ub0xpc3QoaXRlbSlcbiAgICAgICAgICB0aGlzLnJlbmRlcih0cnVlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX29uQ2xpY2tTa2lsbFNwZWNpYWwgKGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgfVxuXG4gIF9vbkNsaWNrUmVtb3ZlU2tpbGwgKGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICBjb25zdCBrZXkgPSBldmVudC5jdXJyZW50VGFyZ2V0Py5wYXJlbnROb2RlPy5kYXRhc2V0Py5rZXlcbiAgICBjb25zdCBpbmRleCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ/LnBhcmVudE5vZGU/LmRhdGFzZXQ/LmluZGV4XG4gICAgaWYgKHR5cGVvZiB0aGlzLm9iamVjdC5za2lsbEl0ZW1zW2tleV0/LnJvd3NbaW5kZXhdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5vYmplY3Quc2tpbGxJdGVtc1trZXldLnJvd3Muc3BsaWNlKGluZGV4LCBpbmRleClcbiAgICAgIHRoaXMucmVuZGVyKHRydWUpXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgX29uVG9nZ2xlU2tpbGwgKGV2ZW50KSB7XG4gICAgY29uc3Qga2V5ID0gZXZlbnQuY3VycmVudFRhcmdldD8uZGF0YXNldD8ua2V5XG4gICAgY29uc3QgaW5kZXggPSBldmVudC5jdXJyZW50VGFyZ2V0Py5kYXRhc2V0Py5pbmRleFxuICAgIGNvbnN0IHRvZ2dsZUtleSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ/LmRhdGFzZXQ/LnRvZ2dsZUtleVxuICAgIGlmICh0eXBlb2YgdGhpcy5vYmplY3Quc2tpbGxJdGVtc1trZXldPy5yb3dzW2luZGV4XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XVt0b2dnbGVLZXldID0gIXRoaXMub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XVt0b2dnbGVLZXldXG4gICAgICB0aGlzLnJlbmRlcih0cnVlKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9vbkNsaWNrUGlja1NraWxsIChldmVudCkge1xuICAgIGNvbnN0IGtleSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ/LmRhdGFzZXQ/LmtleVxuICAgIGNvbnN0IGluZGV4ID0gZXZlbnQuY3VycmVudFRhcmdldD8uZGF0YXNldD8uaW5kZXhcbiAgICBjb25zdCB0b2dnbGVLZXkgPSBldmVudC5jdXJyZW50VGFyZ2V0Py5kYXRhc2V0Py50b2dnbGVLZXlcbiAgICBpZiAodHlwZW9mIHRoaXMub2JqZWN0LnNraWxsSXRlbXNba2V5XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIHRoaXMub2JqZWN0LnNraWxsSXRlbXNba2V5XS5yb3dzW2luZGV4XVt0b2dnbGVLZXldID0gZmFsc2VcbiAgICAgICAgdGhpcy5vYmplY3Quc2tpbGxJdGVtc1trZXldLnJvd3NbaW5kZXhdLnNlbGVjdGVkID0gZmFsc2VcbiAgICAgICAgdGhpcy5yZW5kZXIodHJ1ZSlcbiAgICAgIH1cbiAgICAgIGxldCBza2lsbExpc3QgPSBbXVxuICAgICAgY29uc3QgZ3JvdXAgPSBnYW1lLnN5c3RlbS5hcGkuY29jaWQuZ3Vlc3NHcm91cEZyb21LZXkoa2V5KVxuICAgICAgaWYgKGdyb3VwKSB7XG4gICAgICAgIHNraWxsTGlzdCA9IChhd2FpdCBnYW1lLnN5c3RlbS5hcGkuY29jaWQuZnJvbUNvQ0lEUmVnZXhCZXN0KHsgY29jaWRSZWdFeHA6IG5ldyBSZWdFeHAoJ14nICsgQ29DN1V0aWxpdGllcy5xdW90ZVJlZ0V4cChncm91cCkgKyAnLiskJyksIHR5cGU6ICdpJyB9KSkuZmlsdGVyKGl0ZW0gPT4ge1xuICAgICAgICAgIHJldHVybiAhKGl0ZW0uc3lzdGVtLnByb3BlcnRpZXM/LnNwZWNpYWwgJiYgISEoaXRlbS5zeXN0ZW0ucHJvcGVydGllcz8ucmVxdWlyZXNuYW1lIHx8IGl0ZW0uc3lzdGVtLnByb3BlcnRpZXM/LnBpY2tuYW1lb25seSkpXG4gICAgICAgIH0pXG4gICAgICAgIGlmIChza2lsbExpc3QubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHNraWxsTGlzdC5zb3J0KENvQzdVdGlsaXRpZXMuc29ydEJ5TmFtZUtleSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3Qgc2tpbGxEYXRhID0gYXdhaXQgU2tpbGxTcGVjaWFsaXphdGlvblNlbGVjdERpYWxvZy5jcmVhdGUoe1xuICAgICAgICBza2lsbHM6IHNraWxsTGlzdCxcbiAgICAgICAgYWxsb3dDdXN0b206ICh0aGlzLm9iamVjdC5za2lsbEl0ZW1zW2tleV0uaXRlbS5zeXN0ZW0ucHJvcGVydGllcz8ucmVxdWlyZXNuYW1lID8/IGZhbHNlKSxcbiAgICAgICAgZml4ZWRCYXNlVmFsdWU6IHRydWUsXG4gICAgICAgIHNwZWNpYWxpemF0aW9uTmFtZTogdGhpcy5vYmplY3Quc2tpbGxJdGVtc1trZXldLml0ZW0uc3lzdGVtLnNwZWNpYWxpemF0aW9uLFxuICAgICAgICBsYWJlbDogdGhpcy5vYmplY3Quc2tpbGxJdGVtc1trZXldLml0ZW0ubmFtZVxuICAgICAgfSlcbiAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIGlmIChza2lsbERhdGEuc2VsZWN0ZWQgIT09ICcnKSB7XG4gICAgICAgICAgdGhpcy5vYmplY3Quc2tpbGxJdGVtc1trZXldLnJvd3NbaW5kZXhdLnNlbGVjdGVkID0gc2tpbGxMaXN0LmZpbmQoaSA9PiBpLmlkID09PSBza2lsbERhdGEuc2VsZWN0ZWQpXG4gICAgICAgICAgdGhpcy5vYmplY3Quc2tpbGxJdGVtc1trZXldLnJvd3NbaW5kZXhdW3RvZ2dsZUtleV0gPSB0cnVlXG4gICAgICAgIH0gZWxzZSBpZiAoc2tpbGxEYXRhLm5hbWUgIT09ICcnKSB7XG4gICAgICAgICAgdGhpcy5vYmplY3Quc2tpbGxJdGVtc1trZXldLnJvd3NbaW5kZXhdLnNlbGVjdGVkID0gc2tpbGxEYXRhLm5hbWVcbiAgICAgICAgICB0aGlzLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93c1tpbmRleF1bdG9nZ2xlS2V5XSA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHNlbGVjdGVkID0gZmFsc2VcbiAgICAgICAgaWYgKHNraWxsRGF0YS5zZWxlY3RlZCAhPT0gJycpIHtcbiAgICAgICAgICBzZWxlY3RlZCA9IHNraWxsTGlzdC5maW5kKGkgPT4gaS5pZCA9PT0gc2tpbGxEYXRhLnNlbGVjdGVkKVxuICAgICAgICB9IGVsc2UgaWYgKHNraWxsRGF0YS5uYW1lICE9PSAnJykge1xuICAgICAgICAgIHNlbGVjdGVkID0gc2tpbGxEYXRhLm5hbWVcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93cy5wdXNoKHtcbiAgICAgICAgICBpc09jY3VwYXRpb25EZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgICBpbk9jY3VwYXRpb25Hcm91cDogZmFsc2UsXG4gICAgICAgICAgaXNBcmNoZXR5cGVEZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgICBpc0NyZWRpdFJhdGluZzogZmFsc2UsXG4gICAgICAgICAgb2NjdXBhdGlvblRvZ2dsZTogKHRvZ2dsZUtleSA9PT0gJ29jY3VwYXRpb25Ub2dnbGUnKSxcbiAgICAgICAgICBhcmNoZXR5cGVUb2dnbGU6ICh0b2dnbGVLZXkgPT09ICdhcmNoZXR5cGVUb2dnbGUnKSxcbiAgICAgICAgICBvY2N1cGF0aW9uUG9pbnRzOiAnJyxcbiAgICAgICAgICBhcmNoZXR5cGVQb2ludHM6ICcnLFxuICAgICAgICAgIGV4cGVyaWVuY2VQb2ludHM6ICcnLFxuICAgICAgICAgIHBlcnNvbmFsUG9pbnRzOiAnJyxcbiAgICAgICAgICBzZWxlY3RlZFxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgdGhpcy5yZW5kZXIodHJ1ZSlcbiAgICB9XG4gIH1cblxuICBhc3luYyBfb25DaGFuZ2VTa2lsbFBvaW50cyAoZXZlbnQpIHtcbiAgICBjb25zdCBpbnB1dCA9ICQoZXZlbnQuY3VycmVudFRhcmdldClcbiAgICBjb25zdCBhZGp1c3RtZW50ID0gaW5wdXQuZGF0YSgnYWRqdXN0bWVudCcpXG4gICAgY29uc3QgbGkgPSBpbnB1dC5jbG9zZXN0KCdsaScpXG4gICAgY29uc3Qga2V5ID0gbGkuZGF0YSgna2V5JylcbiAgICBjb25zdCBpbmRleCA9IGxpLmRhdGEoJ2luZGV4JylcbiAgICBpZiAodHlwZW9mIHRoaXMub2JqZWN0LnNraWxsSXRlbXNba2V5XT8ucm93c1tpbmRleF1bYWRqdXN0bWVudF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLm9iamVjdC5za2lsbEl0ZW1zW2tleV0ucm93c1tpbmRleF1bYWRqdXN0bWVudF0gPSBpbnB1dC52YWwoKVxuICAgIH1cbiAgICB0aGlzLnJlbmRlcih0cnVlKVxuICB9XG5cbiAgYXN5bmMgX29uQ2hhbmdlQmFja3N0b3J5VGV4dCAoZXZlbnQpIHtcbiAgICBjb25zdCB0ZXh0YXJlYSA9ICQoZXZlbnQuY3VycmVudFRhcmdldClcbiAgICBjb25zdCBpbmRleCA9IHRleHRhcmVhLmRhdGEoJ2luZGV4JylcbiAgICBpZiAodHlwZW9mIHRoaXMub2JqZWN0LmJpb1NlY3Rpb25zW2luZGV4XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMub2JqZWN0LmJpb1NlY3Rpb25zW2luZGV4XS52YWx1ZSA9IHRleHRhcmVhLnZhbCgpXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgX29uUm9sbEJhY2tzdG9yeSAoZXZlbnQpIHtcbiAgICBjb25zdCBidXR0b24gPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpXG4gICAgY29uc3QgaW5kZXggPSBidXR0b24uZGF0YSgnaW5kZXgnKVxuICAgIGNvbnN0IGtleSA9IGJ1dHRvbi5kYXRhKCdrZXknKVxuICAgIGlmICh0eXBlb2YgdGhpcy5vYmplY3QuYmlvU2VjdGlvbnNbaW5kZXhdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3Qgcm9sbHRhYmxlID0gYXdhaXQgZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmZyb21Db0NJRChrZXkpXG4gICAgICBpZiAocm9sbHRhYmxlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjb25zdCB0YWJsZVJlc3VsdCA9IGF3YWl0IHJvbGx0YWJsZVswXS5yb2xsKClcbiAgICAgICAgaWYgKHRhYmxlUmVzdWx0LnJlc3VsdHNbMF0udHlwZSA9PT0gQ09OU1QuVEFCTEVfUkVTVUxUX1RZUEVTLlRFWFQpIHtcbiAgICAgICAgICB0aGlzLm9iamVjdC5iaW9TZWN0aW9uc1tpbmRleF0udmFsdWUgPSAodGhpcy5vYmplY3QuYmlvU2VjdGlvbnNbaW5kZXhdLnZhbHVlICsgJ1xcbicgKyB0YWJsZVJlc3VsdC5yZXN1bHRzWzBdLnRleHQudHJpbSgpKS50cmltKClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnJlbmRlcih0cnVlKVxuICB9XG5cbiAgYXN5bmMgX29uUmVzZXRCYWNrc3RvcnkgKGV2ZW50KSB7XG4gICAgY29uc3QgYnV0dG9uID0gJChldmVudC5jdXJyZW50VGFyZ2V0KVxuICAgIGNvbnN0IGluZGV4ID0gYnV0dG9uLmRhdGEoJ2luZGV4JylcbiAgICBpZiAodHlwZW9mIHRoaXMub2JqZWN0LmJpb1NlY3Rpb25zW2luZGV4XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMub2JqZWN0LmJpb1NlY3Rpb25zW2luZGV4XS52YWx1ZSA9ICcnXG4gICAgfVxuICAgIHRoaXMucmVuZGVyKHRydWUpXG4gIH1cblxuICBhc3luYyBfb25Sb2xsTHVjayAoZXZlbnQpIHtcbiAgICBjb25zdCBzZXR1cCA9IGF3YWl0IHRoaXMuZ2V0Q2FjaGVJdGVtQnlDb0NJRCh0aGlzLm9iamVjdC5zZXR1cClcbiAgICBpZiAoc2V0dXApIHtcbiAgICAgIGNvbnN0IGRpZSA9IGF3YWl0IG5ldyBSb2xsKHNldHVwLnN5c3RlbS5jaGFyYWN0ZXJpc3RpY3Mucm9sbHMubHVjay50b1N0cmluZygpKS5ldmFsdWF0ZSh7IGFzeW5jOiB0cnVlIH0pXG4gICAgICB0aGlzLm9iamVjdC5zZXR1cE1vZGlmaWVycy5sdWNrID0gW2RpZS50b3RhbF1cbiAgICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZShSb2xsLkNIQVRfVEVNUExBVEUsIHtcbiAgICAgICAgZm9ybXVsYTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkludmVzdGlnYXRvcldpemFyZC5Sb2xsVHdpY2VGb3JMdWNrJykgKyAnOiAnICsgc2V0dXAuc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5yb2xscy5sdWNrLnRvU3RyaW5nKCksXG4gICAgICAgIHRvb2x0aXA6IGF3YWl0IGRpZS5nZXRUb29sdGlwKCksXG4gICAgICAgIHRvdGFsOiBkaWUudG90YWxcbiAgICAgIH0pXG4gICAgICBDaGF0TWVzc2FnZS5jcmVhdGUoe1xuICAgICAgICB1c2VyOiBnYW1lLnVzZXIuaWQsXG4gICAgICAgIHNwZWFrZXI6IHtcbiAgICAgICAgICBhbGlhczogZ2FtZS51c2VyLm5hbWVcbiAgICAgICAgfSxcbiAgICAgICAgY29udGVudDogaHRtbCxcbiAgICAgICAgd2hpc3BlcjogQ2hhdE1lc3NhZ2UuZ2V0V2hpc3BlclJlY2lwaWVudHMoJ0dNJylcbiAgICAgIH0pXG4gICAgICB0aGlzLnJlbmRlcih0cnVlKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9vblJvbGxFZHUgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGlmICh0eXBlb2YgdGhpcy5vYmplY3QucmVxdWlyZXNBZ2VBZGp1c3RtZW50cy5lZHUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAoIXRoaXMub2JqZWN0LnJlcXVpcmVzQWdlQWRqdXN0bWVudHMuZWR1LnJvbGxlZCAmJiB0aGlzLm9iamVjdC5yZXF1aXJlc0FnZUFkanVzdG1lbnRzLmVkdS50b3RhbCkge1xuICAgICAgICBsZXQgdmFsdWUgPSBwYXJzZUludCh0aGlzLm9iamVjdC5zZXR1cFBvaW50cy5lZHUsIDEwKVxuICAgICAgICBjb25zdCBtZXNzYWdlID0gW11cbiAgICAgICAgZm9yIChsZXQgcm9sbHMgPSB0aGlzLm9iamVjdC5yZXF1aXJlc0FnZUFkanVzdG1lbnRzLmVkdS50b3RhbDsgcm9sbHMgPiAwOyByb2xscy0tKSB7XG4gICAgICAgICAgY29uc3QgZGllID0gYXdhaXQgbmV3IFJvbGwoJzFkMTAwJykuZXZhbHVhdGUoeyBhc3luYzogdHJ1ZSB9KVxuICAgICAgICAgIGlmIChkaWUudG90YWwgPiB2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgYXVnbWVudERpZSA9IGF3YWl0IG5ldyBSb2xsKCcxZDEwJykuZXZhbHVhdGUoeyBhc3luYzogdHJ1ZSB9KVxuICAgICAgICAgICAgbWVzc2FnZS5wdXNoKGA8c3BhbiBjbGFzcz1cInVwZ3JhZGUtc3VjY2Vzc1wiPiR7Z2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICAgICAgJ0NvQzcuRGV2U3VjY2VzcycsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpdGVtOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NIQVJBQy5FZHVjYXRpb24nKSxcbiAgICAgICAgICAgICAgICBkaWU6IGRpZS50b3RhbCxcbiAgICAgICAgICAgICAgICBzY29yZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgYXVnbWVudDogYXVnbWVudERpZS50b3RhbFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApfTwvc3Bhbj48YnI+YClcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKyBwYXJzZUludChhdWdtZW50RGllLnRvdGFsLCAxMClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWVzc2FnZS5wdXNoKGA8c3BhbiBjbGFzcz1cInVwZ3JhZGUtZmFpbGVkXCI+JHtnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgICAgICAnQ29DNy5EZXZGYWlsdXJlJyxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGl0ZW06IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ0hBUkFDLkVkdWNhdGlvbicpLFxuICAgICAgICAgICAgICAgIGRpZTogZGllLnRvdGFsLFxuICAgICAgICAgICAgICAgIHNjb3JlOiB2YWx1ZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApfTwvc3Bhbj48YnI+YClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgQ2hhdE1lc3NhZ2UuY3JlYXRlKHtcbiAgICAgICAgICBmbGF2b3I6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Sb2xsQWxsNERldicpLFxuICAgICAgICAgIHVzZXI6IGdhbWUudXNlci5pZCxcbiAgICAgICAgICBzcGVha2VyOiB7XG4gICAgICAgICAgICBhbGlhczogZ2FtZS51c2VyLm5hbWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbnRlbnQ6IG1lc3NhZ2Uuam9pbignJyksXG4gICAgICAgICAgd2hpc3BlcjogQ2hhdE1lc3NhZ2UuZ2V0V2hpc3BlclJlY2lwaWVudHMoJ0dNJylcbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy5vYmplY3Quc2V0dXBNb2RpZmllcnMuZWR1ID0gdmFsdWUgLSBwYXJzZUludCh0aGlzLm9iamVjdC5zZXR1cFBvaW50cy5lZHUsIDEwKVxuICAgICAgICB0aGlzLm9iamVjdC5yZXF1aXJlc0FnZUFkanVzdG1lbnRzLmVkdS5yb2xsZWQgPSB0cnVlXG4gICAgICAgIHRoaXMucmVuZGVyKHRydWUpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgX29uUm9sbEFsbCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3Qgcm9sbHMgPSBbXVxuICAgIGZvciAoY29uc3Qga2V5IG9mIFsnc3RyJywgJ2NvbicsICdzaXonLCAnZGV4JywgJ2FwcCcsICdpbnQnLCAncG93JywgJ2VkdScsICdsdWNrJ10pIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMucm9sbENoYXJhY3RlcmlzdGljKGtleSlcbiAgICAgIGlmIChyZXN1bHQgIT09IGZhbHNlKSB7XG4gICAgICAgIHJvbGxzLnB1c2gocmVzdWx0KVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnJvbGxNZXNzYWdlKHJvbGxzKVxuICAgIHRoaXMucmVuZGVyKHRydWUpXG4gIH1cblxuICBhc3luYyBfb25JbmNyZWFzZUNoYXJhY3RlcmlzdGljMTAgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGxpID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpXG4gICAgaWYgKHR5cGVvZiBsaS5kYXRhc2V0Lm9mZnNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGxpLmRhdGFzZXQubWluICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbGkuZGF0YXNldC5tYXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLm1vZGlmeU9mZnNldChsaS5kYXRhc2V0Lm9mZnNldCwgMTAsIGxpLmRhdGFzZXQubWluLCBsaS5kYXRhc2V0Lm1heClcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaS5kYXRhc2V0LmtleSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMubW9kaWZ5Q2hhcmFjdGVyaXN0aWMobGkuZGF0YXNldC5rZXksIDEwKVxuICAgIH1cbiAgICB0aGlzLnJlbmRlcih0cnVlKVxuICB9XG5cbiAgYXN5bmMgX29uSW5jcmVhc2VDaGFyYWN0ZXJpc3RpYyAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgbGkgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5pdGVtJylcbiAgICBpZiAodHlwZW9mIGxpLmRhdGFzZXQub2Zmc2V0ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbGkuZGF0YXNldC5taW4gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBsaS5kYXRhc2V0Lm1heCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMubW9kaWZ5T2Zmc2V0KGxpLmRhdGFzZXQub2Zmc2V0LCAxLCBsaS5kYXRhc2V0Lm1pbiwgbGkuZGF0YXNldC5tYXgpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbGkuZGF0YXNldC5rZXkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLm1vZGlmeUNoYXJhY3RlcmlzdGljKGxpLmRhdGFzZXQua2V5LCAxKVxuICAgIH1cbiAgICB0aGlzLnJlbmRlcih0cnVlKVxuICB9XG5cbiAgYXN5bmMgX29uRGVjcmVhc2VDaGFyYWN0ZXJpc3RpYyAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgbGkgPSBldmVudC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5pdGVtJylcbiAgICBpZiAodHlwZW9mIGxpLmRhdGFzZXQub2Zmc2V0ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbGkuZGF0YXNldC5taW4gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBsaS5kYXRhc2V0Lm1heCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMubW9kaWZ5T2Zmc2V0KGxpLmRhdGFzZXQub2Zmc2V0LCAtMSwgbGkuZGF0YXNldC5taW4sIGxpLmRhdGFzZXQubWF4KVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpLmRhdGFzZXQua2V5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5tb2RpZnlDaGFyYWN0ZXJpc3RpYyhsaS5kYXRhc2V0LmtleSwgLTEpXG4gICAgfVxuICAgIHRoaXMucmVuZGVyKHRydWUpXG4gIH1cblxuICBfb25EZWNyZWFzZUNoYXJhY3RlcmlzdGljMTAgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGxpID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpXG4gICAgaWYgKHR5cGVvZiBsaS5kYXRhc2V0Lm9mZnNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGxpLmRhdGFzZXQubWluICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbGkuZGF0YXNldC5tYXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLm1vZGlmeU9mZnNldChsaS5kYXRhc2V0Lm9mZnNldCwgLTEwLCBsaS5kYXRhc2V0Lm1pbiwgbGkuZGF0YXNldC5tYXgpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbGkuZGF0YXNldC5rZXkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLm1vZGlmeUNoYXJhY3RlcmlzdGljKGxpLmRhdGFzZXQua2V5LCAtMTApXG4gICAgfVxuICAgIHRoaXMucmVuZGVyKHRydWUpXG4gIH1cblxuICBtb2RpZnlPZmZzZXQgKGtleSwgdmFsdWUsIG1pbiwgbWF4KSB7XG4gICAgdGhpcy5vYmplY3Quc2V0dXBNb2RpZmllcnNba2V5XSA9IE1hdGgubWF4KE1hdGgubWluKHBhcnNlSW50KHRoaXMub2JqZWN0LnNldHVwTW9kaWZpZXJzW2tleV0sIDEwKSArIHZhbHVlLCBwYXJzZUludChtYXgsIDEwKSksIHBhcnNlSW50KG1pbiwgMTApKVxuICB9XG5cbiAgbW9kaWZ5Q2hhcmFjdGVyaXN0aWMgKGtleSwgdmFsdWUpIHtcbiAgICBjb25zdCBsaSA9IHRoaXMuX2VsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcihgbGkuaXRlbVtkYXRhLWtleT0ke2tleX1dYClcbiAgICBjb25zdCBpbnB1dCA9IGxpPy5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpXG4gICAgaWYgKGlucHV0KSB7XG4gICAgICBpbnB1dC52YWx1ZSA9IE51bWJlcihpbnB1dC52YWx1ZSkgKyB2YWx1ZVxuICAgICAgdGhpcy5vYmplY3Quc2V0dXBQb2ludHNba2V5XSA9IE51bWJlcihpbnB1dC52YWx1ZSlcbiAgICB9XG4gIH1cblxuICBhc3luYyBfb25Sb2xsQ2hhcmFjdGVyaXN0aWMgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGxpID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuaXRlbScpXG4gICAgY29uc3QgY2hhcmFjS2V5ID0gbGkuZGF0YXNldC5rZXlcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnJvbGxDaGFyYWN0ZXJpc3RpYyhjaGFyYWNLZXkpXG4gICAgaWYgKHJlc3VsdCAhPT0gZmFsc2UpIHtcbiAgICAgIHRoaXMucm9sbE1lc3NhZ2UoW3Jlc3VsdF0pXG4gICAgfVxuICAgIHRoaXMucmVuZGVyKHRydWUpXG4gIH1cblxuICBhc3luYyByb2xsQ2hhcmFjdGVyaXN0aWMgKGtleSkge1xuICAgIGNvbnN0IGxpID0gJChgI2ludmVzdGlnYXRvci13aXphcmQtYXBwbGljYXRpb24gbGkuaXRlbVtkYXRhLWtleT0ke2tleX1dYClcbiAgICBjb25zdCBpbnB1dCA9IGxpLmZpbmQoJ2lucHV0JylcbiAgICBjb25zdCBmb3JtdWxhID0gbGkuZGF0YSgncm9sbCcpXG4gICAgaWYgKGlucHV0ICYmIGZvcm11bGEpIHtcbiAgICAgIGlmICh0aGlzLm9iamVjdC5yZXJvbGxzRW5hYmxlZCB8fCB0aGlzLm9iamVjdC5zZXR1cFBvaW50c1trZXldID09PSAnJykge1xuICAgICAgICBjb25zdCByb2xsID0gbmV3IFJvbGwoZm9ybXVsYS50b1N0cmluZygpKVxuICAgICAgICBhd2FpdCByb2xsLmV2YWx1YXRlKHsgYXN5bmM6IHRydWUgfSlcbiAgICAgICAgaW5wdXQudmFsKHJvbGwudG90YWwpXG4gICAgICAgIHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2tleV0gPSBOdW1iZXIocm9sbC50b3RhbClcbiAgICAgICAgcmV0dXJuIFtrZXksIGZvcm11bGEudG9TdHJpbmcoKSwgcm9sbF1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvKiogQG92ZXJyaWRlXG4gICAqIEEgc3ViY2xhc3Mgb2YgdGhlIEZvcm1BcHBsaWNhdGlvbiBtdXN0IGltcGxlbWVudCB0aGUgX29uQ2hhbmdlU3VibWl0IG1ldGhvZC5cbiAgICovXG4gIF9vbkNoYW5nZVN1Ym1pdCAoZXZlbnQpIHtcbiAgICB0aGlzLl9vblN1Ym1pdChldmVudClcbiAgfVxuXG4gIF9vbkNoYW5nZVNhdmVDaGFyYWN0ZXJpc3RpYyAoZXZlbnQpIHtcbiAgICBjb25zdCBvYmogPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpXG4gICAgY29uc3QgbmFtZSA9IG9iai5wcm9wKCduYW1lJylcbiAgICBpZiAodHlwZW9mIHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW25hbWVdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5vYmplY3Quc2V0dXBQb2ludHNbbmFtZV0gPSBvYmoudmFsKClcbiAgICAgIGxldCBlbXB0aWVzID0gZmFsc2VcbiAgICAgIGxldCB0b3RhbCA9IDBcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMub2JqZWN0LnNldHVwUG9pbnRzKSB7XG4gICAgICAgIGlmICh0aGlzLm9iamVjdC5zZXR1cFBvaW50c1trZXldICE9PSAnJykge1xuICAgICAgICAgIGlmIChrZXkgIT09ICdsdWNrJykge1xuICAgICAgICAgICAgdG90YWwgKz0gcGFyc2VJbnQodGhpcy5vYmplY3Quc2V0dXBQb2ludHNba2V5XSwgMTApXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVtcHRpZXMgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IG9ialRvdGFsID0gb2JqLmNsb3Nlc3QoJ29sLml0ZW0tbGlzdCcpLmZpbmQoJ3NwYW4udG90YWwnKVxuICAgICAgY29uc3QgbWF4ID0gcGFyc2VJbnQob2JqVG90YWwuc2libGluZ3MoJ3NwYW4udmFsdWUnKS50ZXh0KCksIDEwKVxuICAgICAgb2JqVG90YWwudGV4dCh0b3RhbClcbiAgICAgIGlmICh0b3RhbCA9PT0gbWF4ICYmICFlbXB0aWVzKSB7XG4gICAgICAgIGlmIChvYmouY2xvc2VzdCgnZm9ybScpLmZpbmQoJ2J1dHRvbi5zdWJtaXQtYnV0dG9uW2RhdGEtYnV0dG9uPW5leHRdJykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5yZW5kZXIodHJ1ZSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG9iai5jbG9zZXN0KCdmb3JtJykuZmluZCgnYnV0dG9uLnN1Ym1pdC1idXR0b25bZGF0YS1idXR0b249bmV4dF0nKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhpcy5yZW5kZXIodHJ1ZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldFBhZ2VOdW1iZXIgKGRpcmVjdGlvbikge1xuICAgIGNvbnN0IHBhZ2VPcmRlciA9IHRoaXMucGFnZU9yZGVyXG4gICAgY29uc3Qga2V5ID0gcGFyc2VJbnQoT2JqZWN0LmtleXMocGFnZU9yZGVyKS5maW5kKGtleSA9PiBwYWdlT3JkZXJba2V5XSA9PT0gdGhpcy5vYmplY3Quc3RlcCksIDEwKSArIGRpcmVjdGlvblxuICAgIHJldHVybiBwYWdlT3JkZXJba2V5XVxuICB9XG5cbiAgLyoqIEBvdmVycmlkZVxuICAgKiBBIHN1YmNsYXNzIG9mIHRoZSBGb3JtQXBwbGljYXRpb24gbXVzdCBpbXBsZW1lbnQgdGhlIF91cGRhdGVPYmplY3QgbWV0aG9kLlxuICAgKi9cbiAgYXN5bmMgX3VwZGF0ZU9iamVjdCAoZXZlbnQsIGZvcm1EYXRhKSB7XG4gICAgaWYgKFsnYmFjaycsICduZXh0J10uaW5jbHVkZXMoZXZlbnQuc3VibWl0dGVyPy5kYXRhc2V0LmJ1dHRvbikpIHtcbiAgICAgIGlmIChldmVudC5zdWJtaXR0ZXIuY2xhc3NOYW1lLmluZGV4T2YoJ2N1cnJlbnRseS1zdWJtaXR0aW5nJykgPiAtMSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGV2ZW50LnN1Ym1pdHRlci5jbGFzc05hbWUgPSBldmVudC5zdWJtaXR0ZXIuY2xhc3NOYW1lICsgJyBjdXJyZW50bHktc3VibWl0dGluZydcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBmb3JtRGF0YVsnZGVmYXVsdC1zZXR1cCddICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZm9ybURhdGFbJ3dvcmxkLWVyYSddICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZm9ybURhdGFbJ2RlZmF1bHQtb3duZXJzaGlwJ10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodGhpcy5vYmplY3QuZGVmYXVsdFNldHVwICE9PSBmb3JtRGF0YVsnZGVmYXVsdC1zZXR1cCddKSB7XG4gICAgICAgIHRoaXMub2JqZWN0LmRlZmF1bHRTZXR1cCA9IGZvcm1EYXRhWydkZWZhdWx0LXNldHVwJ11cbiAgICAgICAgZ2FtZS5zZXR0aW5ncy5zZXQoJ0NvQzcnLCAnSW52ZXN0aWdhdG9yV2l6YXJkU2V0dXAnLCB0aGlzLm9iamVjdC5kZWZhdWx0U2V0dXApXG4gICAgICAgIHRoaXMub2JqZWN0LnNldHVwID0gdGhpcy5vYmplY3QuZGVmYXVsdFNldHVwXG4gICAgICAgIHRoaXMuY2xlYXJTZXR1cFBvaW50cygpXG4gICAgICAgIGF3YWl0IHRoaXMuc2V0U2tpbGxMaXN0cygpXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vYmplY3QuZGVmYXVsdE93bmVyc2hpcCAhPT0gZm9ybURhdGFbJ2RlZmF1bHQtb3duZXJzaGlwJ10pIHtcbiAgICAgICAgdGhpcy5vYmplY3QuZGVmYXVsdE93bmVyc2hpcCA9IGZvcm1EYXRhWydkZWZhdWx0LW93bmVyc2hpcCddXG4gICAgICAgIGdhbWUuc2V0dGluZ3Muc2V0KCdDb0M3JywgJ0ludmVzdGlnYXRvcldpemFyZE93bmVyc2hpcCcsIHRoaXMub2JqZWN0LmRlZmF1bHRPd25lcnNoaXApXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vYmplY3QuZGVmYXVsdEVyYSAhPT0gZm9ybURhdGFbJ3dvcmxkLWVyYSddKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9ICQodGhpcy5lbGVtZW50LmZpbmQoJ2Zvcm0nKSlcbiAgICAgICAgY29uc3Qgc3RhcnRlZCA9IERhdGUubm93KClcbiAgICAgICAgb2JqLmZpbmQoJy5kaWFsb2ctYnV0dG9uczpmaXJzdCcpLmhpZGUoKVxuICAgICAgICBvYmouZmluZCgnLnNjcm9sbHNlY3Rpb246Zmlyc3QnKS5oaWRlKClcbiAgICAgICAgb2JqLmZpbmQoJy5lcmFjaGFuZ2U6Zmlyc3QnKS5zaG93KClcbiAgICAgICAgdGhpcy5vYmplY3QuZGVmYXVsdEVyYSA9IGZvcm1EYXRhWyd3b3JsZC1lcmEnXVxuICAgICAgICBhd2FpdCBnYW1lLnNldHRpbmdzLnNldCgnQ29DNycsICd3b3JsZEVyYScsIHRoaXMub2JqZWN0LmRlZmF1bHRFcmEpXG4gICAgICAgIHRoaXMub2JqZWN0LmNhY2hlQ29DSUQgPSBhd2FpdCBDb0M3SW52ZXN0aWdhdG9yV2l6YXJkLmxvYWRDYWNoZUl0ZW1CeUNvQ0lEKClcbiAgICAgICAgLy8gVG8gcHJldmVudCBmbGFzaGluZyBzaG93IG1lc3NhZ2UgZm9yIGF0IGxlYXN0IDUwMCBtc1xuICAgICAgICBjb25zdCBidWZmZXIgPSA1MDAgLSAoRGF0ZS5ub3coKSAtIHN0YXJ0ZWQpXG4gICAgICAgIC8vIERvbid0IGJvdGhlciBpZiBsZXNzIHRoYW4gMTBtcyByZW1haW5pbmdcbiAgICAgICAgaWYgKGJ1ZmZlciA+IDEwKSB7XG4gICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIGJ1ZmZlcikpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICgodHlwZW9mIGZvcm1EYXRhWydjaGFyYWN0ZXJpc3RpY3MtbWV0aG9kJ10gIT09ICd1bmRlZmluZWQnKSkge1xuICAgICAgICBjb25zdCB0eXBlID0gTnVtYmVyKGZvcm1EYXRhWydjaGFyYWN0ZXJpc3RpY3MtbWV0aG9kJ10pXG4gICAgICAgIGlmICh0eXBlID09PSB0aGlzLmNoYXJhY3RlcmlzdGljc01ldGhvZHMuTUVUSE9EX0RFRkFVTFQpIHtcbiAgICAgICAgICB0aGlzLm9iamVjdC5lbmZvcmNlUG9pbnRCdXkgPSBmYWxzZVxuICAgICAgICAgIHRoaXMub2JqZWN0LnF1aWNrRmlyZVZhbHVlcyA9IFtdXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gdGhpcy5jaGFyYWN0ZXJpc3RpY3NNZXRob2RzLk1FVEhPRF9QT0lOVFMpIHtcbiAgICAgICAgICB0aGlzLm9iamVjdC5lbmZvcmNlUG9pbnRCdXkgPSB0cnVlXG4gICAgICAgICAgdGhpcy5vYmplY3QucXVpY2tGaXJlVmFsdWVzID0gW11cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSB0aGlzLmNoYXJhY3RlcmlzdGljc01ldGhvZHMuTUVUSE9EX1ZBTFVFUykge1xuICAgICAgICAgIHRoaXMub2JqZWN0LmVuZm9yY2VQb2ludEJ1eSA9IGZhbHNlXG4gICAgICAgICAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3B1bHBSdWxlQXJjaGV0eXBlJykpIHtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0LnF1aWNrRmlyZVZhbHVlcyA9IFs5MCwgODAsIDcwLCA2MCwgNjAsIDUwLCA1MCwgNDBdXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0LnF1aWNrRmlyZVZhbHVlcyA9IFs4MCwgNzAsIDYwLCA2MCwgNTAsIDUwLCA1MCwgNDBdXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdhbWUuc2V0dGluZ3Muc2V0KCdDb0M3JywgJ0ludmVzdGlnYXRvcldpemFyZFBvaW50QnV5JywgdGhpcy5vYmplY3QuZW5mb3JjZVBvaW50QnV5KVxuICAgICAgICBnYW1lLnNldHRpbmdzLnNldCgnQ29DNycsICdJbnZlc3RpZ2F0b3JXaXphcmRRdWlja0ZpcmUnLCB0aGlzLm9iamVjdC5xdWlja0ZpcmVWYWx1ZXMpXG4gICAgICB9XG4gICAgICB0aGlzLm9iamVjdC5yZXJvbGxzRW5hYmxlZCA9ICh0eXBlb2YgZm9ybURhdGFbJ3Jlcm9sbHMtZW5hYmxlZCddID09PSAnc3RyaW5nJylcbiAgICAgIGdhbWUuc2V0dGluZ3Muc2V0KCdDb0M3JywgJ0ludmVzdGlnYXRvcldpemFyZFJlcm9sbHMnLCB0aGlzLm9iamVjdC5yZXJvbGxzRW5hYmxlZClcbiAgICAgIGZvciAobGV0IGkgPSAwLCBpbSA9IHRoaXMub2JqZWN0LnF1aWNrRmlyZVZhbHVlcy5sZW5ndGg7IGkgPCBpbTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG51bSA9IE51bWJlcihmb3JtRGF0YVsncXVpY2stZmlyZS12YWx1ZXMtJyArIGldKVxuICAgICAgICBpZiAobnVtID4gMCkge1xuICAgICAgICAgIHRoaXMub2JqZWN0LnF1aWNrRmlyZVZhbHVlc1tpXSA9IG51bVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLm9iamVjdC5xdWlja0ZpcmVWYWx1ZXMuc29ydCgpLnJldmVyc2UoKVxuICAgICAgdGhpcy5vYmplY3QucGxhY2VhYmxlID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5vYmplY3QucXVpY2tGaXJlVmFsdWVzKVxuICAgICAgaWYgKHR5cGVvZiBmb3JtRGF0YVsnZGVmYXVsdC1lbmFibGVkJ10gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0aGlzLm9iamVjdC5kZWZhdWx0UXVhbnRpdHkudG9TdHJpbmcoKSA9PT0gJzAnKSB7XG4gICAgICAgICAgdGhpcy5vYmplY3QuZGVmYXVsdFF1YW50aXR5ID0gMVxuICAgICAgICAgIGdhbWUuc2V0dGluZ3Muc2V0KCdDb0M3JywgJ0ludmVzdGlnYXRvcldpemFyZFF1YW50aXR5JywgdGhpcy5vYmplY3QuZGVmYXVsdFF1YW50aXR5KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMub2JqZWN0LmRlZmF1bHRRdWFudGl0eSA9IGZvcm1EYXRhWydkZWZhdWx0LXF1YW50aXR5J11cbiAgICAgICAgICBnYW1lLnNldHRpbmdzLnNldCgnQ29DNycsICdJbnZlc3RpZ2F0b3JXaXphcmRRdWFudGl0eScsIHRoaXMub2JqZWN0LmRlZmF1bHRRdWFudGl0eSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0aGlzLm9iamVjdC5kZWZhdWx0UXVhbnRpdHkudG9TdHJpbmcoKSAhPT0gJzAnKSB7XG4gICAgICAgIHRoaXMub2JqZWN0LmRlZmF1bHRRdWFudGl0eSA9IDBcbiAgICAgICAgZ2FtZS5zZXR0aW5ncy5zZXQoJ0NvQzcnLCAnSW52ZXN0aWdhdG9yV2l6YXJkUXVhbnRpdHknLCB0aGlzLm9iamVjdC5kZWZhdWx0UXVhbnRpdHkpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZm9ybURhdGFbJ2NvYy1zZXR1cCddICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHRoaXMub2JqZWN0LnNldHVwICE9PSBmb3JtRGF0YVsnY29jLXNldHVwJ10pIHtcbiAgICAgICAgdGhpcy5vYmplY3Quc2V0dXAgPSBmb3JtRGF0YVsnY29jLXNldHVwJ11cbiAgICAgICAgdGhpcy5jbGVhclNldHVwUG9pbnRzKClcbiAgICAgICAgYXdhaXQgdGhpcy5zZXRTa2lsbExpc3RzKClcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBmb3JtRGF0YVsnY29jLWFyY2hldHlwZSddICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHRoaXMub2JqZWN0LmFyY2hldHlwZSAhPT0gZm9ybURhdGFbJ2NvYy1hcmNoZXR5cGUnXSkge1xuICAgICAgICB0aGlzLm9iamVjdC5hcmNoZXR5cGUgPSBmb3JtRGF0YVsnY29jLWFyY2hldHlwZSddXG4gICAgICAgIHRoaXMub2JqZWN0LmNvcmVDaGFyYWN0ZXJpc3RpYyA9ICcnXG4gICAgICAgIHRoaXMuY2xlYXJTZXR1cFBvaW50cygpXG4gICAgICAgIGF3YWl0IHRoaXMuc2V0U2tpbGxMaXN0cygpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZm9ybURhdGFbJ2NvYy1vY2N1cGF0aW9uJ10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodGhpcy5vYmplY3Qub2NjdXBhdGlvbiAhPT0gZm9ybURhdGFbJ2NvYy1vY2N1cGF0aW9uJ10pIHtcbiAgICAgICAgdGhpcy5vYmplY3Qub2NjdXBhdGlvbiA9IGZvcm1EYXRhWydjb2Mtb2NjdXBhdGlvbiddXG4gICAgICAgIGF3YWl0IHRoaXMuc2V0U2tpbGxMaXN0cygpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMub2JqZWN0LnNldHVwUG9pbnRzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZm9ybURhdGFba2V5XSAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5vYmplY3Quc2V0dXBQb2ludHNba2V5XSAhPT0gZm9ybURhdGFba2V5XSkge1xuICAgICAgICAgIHRoaXMub2JqZWN0LnNldHVwUG9pbnRzW2tleV0gPSBmb3JtRGF0YVtrZXldXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgZm9ybURhdGFbJ2NvYy1jb3JlLWNoYXJhY3RlcmlzdGljJ10gIT09ICd1bmRlZmluZWQnICYmIHRoaXMub2JqZWN0LmNvcmVDaGFyYWN0ZXJpc3RpYyAhPT0gZm9ybURhdGFbJ2NvYy1jb3JlLWNoYXJhY3RlcmlzdGljJ10pIHtcbiAgICAgICAgdGhpcy5vYmplY3QuY29yZUNoYXJhY3RlcmlzdGljID0gZm9ybURhdGFbJ2NvYy1jb3JlLWNoYXJhY3RlcmlzdGljJ11cbiAgICAgICAgdGhpcy5jbGVhclNldHVwUG9pbnRzKClcbiAgICAgICAgdGhpcy5vYmplY3QucGxhY2VhYmxlID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5vYmplY3QucXVpY2tGaXJlVmFsdWVzKVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBmbGF0S2V5cyA9IFsnbmFtZScsICdhZ2UnLCAncmVzaWRlbmNlJywgJ2JpcnRocGxhY2UnLCAnbGFuZ3VhZ2UnLCAnYXZhdGFyJywgJ3Rva2VuJ11cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBmbGF0S2V5cykge1xuICAgICAgaWYgKHR5cGVvZiBmb3JtRGF0YVtrZXldICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLm9iamVjdFtrZXldICE9PSBmb3JtRGF0YVtrZXldKSB7XG4gICAgICAgIHRoaXMub2JqZWN0W2tleV0gPSBmb3JtRGF0YVtrZXldXG4gICAgICAgIGlmIChrZXkgPT09ICdhZ2UnKSB7XG4gICAgICAgICAgdGhpcy5nZXRBZ2VBZGp1c3RtZW50cygpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGV2ZW50LnN1Ym1pdHRlcj8uZGF0YXNldC5idXR0b24gPT09ICdiYWNrJykge1xuICAgICAgY29uc3QgcGFnZU51bWJlciA9IHRoaXMuZ2V0UGFnZU51bWJlcigtMSlcbiAgICAgIGlmICh0eXBlb2YgcGFnZU51bWJlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhpcy5vYmplY3Quc3RlcCA9IHBhZ2VOdW1iZXJcbiAgICAgICAgLy8gV2hlbiBtb3Zpbmcgc3RlcCByZXNldCBzY3JvbGwgaGVpZ2h0XG4gICAgICAgIGNvbnN0IG9iaiA9IHRoaXMuZWxlbWVudC5maW5kKCcuc2Nyb2xsc2VjdGlvbicpXG4gICAgICAgIGlmIChvYmoubGVuZ3RoICYmIG9ialswXS5zY3JvbGxUb3ApIHtcbiAgICAgICAgICBvYmpbMF0uc2Nyb2xsVG9wID0gMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChldmVudC5zdWJtaXR0ZXI/LmRhdGFzZXQuYnV0dG9uID09PSAnbmV4dCcpIHtcbiAgICAgIGlmICh0aGlzLm9iamVjdC5zdGVwID09PSB0aGlzLnBhZ2VMaXN0LlBBR0VfQ1JFQVRFIHx8ICh0aGlzLm9iamVjdC5zdGVwID09PSB0aGlzLnBhZ2VMaXN0LlBBR0VfQkFDS1NUT1JZICYmIGdhbWUudXNlci5yb2xlID49IENPTlNULlVTRVJfUEVSTUlTU0lPTlMuQUNUT1JfQ1JFQVRFLmRlZmF1bHRSb2xlKSkge1xuICAgICAgICB0aGlzLmF0dGVtcHRUb0NyZWF0ZSgpXG4gICAgICAgIHJldHVyblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgcGFnZU51bWJlciA9IHRoaXMuZ2V0UGFnZU51bWJlcigxKVxuICAgICAgICBpZiAodHlwZW9mIHBhZ2VOdW1iZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhpcy5vYmplY3Quc3RlcCA9IHBhZ2VOdW1iZXJcbiAgICAgICAgICAvLyBXaGVuIG1vdmluZyBzdGVwIHJlc2V0IHNjcm9sbCBoZWlnaHRcbiAgICAgICAgICBjb25zdCBvYmogPSB0aGlzLmVsZW1lbnQuZmluZCgnLnNjcm9sbHNlY3Rpb24nKVxuICAgICAgICAgIGlmIChvYmoubGVuZ3RoICYmIG9ialswXS5zY3JvbGxUb3ApIHtcbiAgICAgICAgICAgIG9ialswXS5zY3JvbGxUb3AgPSAwXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMucmVuZGVyKHRydWUpXG4gIH1cblxuICBhc3luYyBhdHRlbXB0VG9DcmVhdGUgKCkge1xuICAgIGNvbnN0IGFjdG9yRGF0YSA9IGF3YWl0IHRoaXMubm9ybWFsaXplQ2hhcmFjdGVyRGF0YSh0aGlzLm9iamVjdClcbiAgICBpZiAoZ2FtZS51c2VyLmlzR00gfHwgZ2FtZS51c2VyLnJvbGUgPj0gQ09OU1QuVVNFUl9QRVJNSVNTSU9OUy5BQ1RPUl9DUkVBVEUuZGVmYXVsdFJvbGUpIHtcbiAgICAgIGNvbnN0IGFjdG9yID0gYXdhaXQgQ29DN0ludmVzdGlnYXRvcldpemFyZC5jcmVhdGVDaGFyYWN0ZXIoYWN0b3JEYXRhKVxuICAgICAgYWN0b3Iuc2hlZXQucmVuZGVyKHRydWUpXG4gICAgICB0aGlzLmNsb3NlKClcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qga2VlcGVycyA9IGdhbWUudXNlcnMuZmlsdGVyKHUgPT4gdS5hY3RpdmUgJiYgdS5pc0dNKVxuICAgICAgaWYgKGtlZXBlcnMubGVuZ3RoKSB7XG4gICAgICAgIGFjdG9yRGF0YS5vd25lcnNoaXBbZ2FtZS51c2VyLmlkXSA9IENPTlNULkRPQ1VNRU5UX09XTkVSU0hJUF9MRVZFTFMuT1dORVJcbiAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICB0eXBlOiAnY2hhcmFjdGVyLXdpemFyZCcsXG4gICAgICAgICAgbGlzdGVuZXI6IGtlZXBlcnNbMF0uaWQsXG4gICAgICAgICAgcGF5bG9hZDogYWN0b3JEYXRhXG4gICAgICAgIH1cbiAgICAgICAgZ2FtZS5zb2NrZXQuZW1pdCgnc3lzdGVtLkNvQzcnLCBkYXRhKVxuICAgICAgICB1aS5ub3RpZmljYXRpb25zLmluZm8oXG4gICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkludmVzdGlnYXRvcldpemFyZC5DcmVhdGluZ0ludmVzdGlnYXRvcicpXG4gICAgICAgIClcbiAgICAgICAgdGhpcy5jbG9zZSgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FcnJvck1pc3NpbmdLZWVwZXJVc2VyJylcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIG5vcm1hbGl6ZUNoYXJhY3RlckRhdGEgKGRhdGEpIHtcbiAgICBjb25zdCB3ZWFwb25Ta2lsbHMgPSB7XG4gICAgICBtZWxlZToge30sXG4gICAgICBybmdkOiB7fVxuICAgIH1cbiAgICBjb25zdCBpdGVtcyA9IFtdXG4gICAgZm9yIChjb25zdCBrZXkgaW4gZGF0YS5za2lsbEl0ZW1zKSB7XG4gICAgICBjb25zdCBza2lsbCA9IGRhdGEuc2tpbGxJdGVtc1trZXldXG4gICAgICBmb3IgKGxldCBpbmRleCA9IDAsIGltID0gc2tpbGwucm93cy5sZW5ndGg7IGluZGV4IDwgaW07IGluZGV4KyspIHtcbiAgICAgICAgY29uc3Qgcm93ID0gc2tpbGwucm93c1tpbmRleF1cbiAgICAgICAgaWYgKCFza2lsbC5mbGFncy5pc011bHRpcGxlIHx8IHJvdy5zZWxlY3RlZCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBsZXQgaXRlbSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHNraWxsLml0ZW0pXG4gICAgICAgICAgaWYgKHJvdy5zZWxlY3RlZCAhPT0gZmFsc2UgJiYgdHlwZW9mIHJvdy5zZWxlY3RlZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGl0ZW0gPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShyb3cuc2VsZWN0ZWQpXG4gICAgICAgICAgICByb3cuc2VsZWN0ZWQgPSBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocm93Lm9jY3VwYXRpb25Ub2dnbGUpIHtcbiAgICAgICAgICAgIGl0ZW0uc3lzdGVtLmZsYWdzLm9jY3VwYXRpb24gPSB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyb3cuYXJjaGV0eXBlVG9nZ2xlKSB7XG4gICAgICAgICAgICBpdGVtLnN5c3RlbS5mbGFncy5hcmNoZXR5cGUgPSB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCBiYXNlID0gaXRlbS5zeXN0ZW0uYmFzZVxuICAgICAgICAgIGlmICghTnVtYmVyLmlzTnVtZXJpYyhiYXNlKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGF0YS5zZXR1cFBvaW50cykge1xuICAgICAgICAgICAgICBjb25zdCByZWdFeCA9IG5ldyBSZWdFeHAoJ0AnICsga2V5LCAnaScpXG4gICAgICAgICAgICAgIGJhc2UgPSBiYXNlLnJlcGxhY2UocmVnRXgsIHBhcnNlSW50KGRhdGEuc2V0dXBQb2ludHNba2V5XSwgMTApICsgcGFyc2VJbnQoZGF0YS5zZXR1cE1vZGlmaWVyc1trZXldLCAxMCkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghTnVtYmVyLmlzTnVtZXJpYyhiYXNlKSkge1xuICAgICAgICAgICAgYmFzZSA9IE1hdGguZmxvb3IobmV3IEF2ZXJhZ2VSb2xsKCcoJyArIGJhc2UgKyAnKScpWyghZm91bmRyeS51dGlscy5pc05ld2VyVmVyc2lvbihnYW1lLnZlcnNpb24sICcxMicpID8gJ2V2YWx1YXRlJyA6ICdldmFsdWF0ZVN5bmMnKS8qIC8vIEZvdW5kcnlWVFQgdjExICovXSh7IG1pbmltaXplOiB0cnVlLCBtYXhpbWl6ZTogdHJ1ZSB9KS50b3RhbClcbiAgICAgICAgICB9XG4gICAgICAgICAgaXRlbS5zeXN0ZW0uYmFzZSA9IGJhc2VcbiAgICAgICAgICBpdGVtLnN5c3RlbS5hZGp1c3RtZW50cyA9IGl0ZW0uc3lzdGVtLmFkanVzdG1lbnRzID8/IHt9XG4gICAgICAgICAgaWYgKE51bWJlcihyb3cucGVyc29uYWxQb2ludHMpID4gMCkge1xuICAgICAgICAgICAgaXRlbS5zeXN0ZW0uYWRqdXN0bWVudHMucGVyc29uYWwgPSBwYXJzZUludChyb3cucGVyc29uYWxQb2ludHMsIDEwKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoTnVtYmVyKHJvdy5vY2N1cGF0aW9uUG9pbnRzKSA+IDApIHtcbiAgICAgICAgICAgIGl0ZW0uc3lzdGVtLmFkanVzdG1lbnRzLm9jY3VwYXRpb24gPSBwYXJzZUludChyb3cub2NjdXBhdGlvblBvaW50cywgMTApXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChOdW1iZXIocm93LmFyY2hldHlwZVBvaW50cykgPiAwKSB7XG4gICAgICAgICAgICBpdGVtLnN5c3RlbS5hZGp1c3RtZW50cy5hcmNoZXR5cGUgPSBwYXJzZUludChyb3cuYXJjaGV0eXBlUG9pbnRzLCAxMClcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKE51bWJlcihyb3cuZXhwZXJpZW5jZVBvaW50cykgPiAwKSB7XG4gICAgICAgICAgICBpdGVtLnN5c3RlbS5hZGp1c3RtZW50cy5leHBlcmllbmNlID0gcGFyc2VJbnQocm93LmV4cGVyaWVuY2VQb2ludHMsIDEwKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoa2V5ID09PSB0aGlzLmNvY2lkTGFuZ3VhZ2VPd24pIHtcbiAgICAgICAgICAgIGl0ZW0uc3lzdGVtLnNraWxsTmFtZSA9IGRhdGEubGFuZ3VhZ2VcbiAgICAgICAgICAgIGl0ZW0ubmFtZSA9IGl0ZW0uc3lzdGVtLnNwZWNpYWxpemF0aW9uICsgJyAoJyArIGl0ZW0uc3lzdGVtLnNraWxsTmFtZSArICcpJ1xuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHJvdy5zZWxlY3RlZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGl0ZW0uc3lzdGVtLnNraWxsTmFtZSA9IHJvdy5zZWxlY3RlZFxuICAgICAgICAgICAgaXRlbS5faWQgPSBmb3VuZHJ5LnV0aWxzLnJhbmRvbUlEKClcbiAgICAgICAgICAgIGl0ZW0ubmFtZSA9IGl0ZW0uc3lzdGVtLnNwZWNpYWxpemF0aW9uICsgJyAoJyArIGl0ZW0uc3lzdGVtLnNraWxsTmFtZSArICcpJ1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVtLmZsYWdzLkNvQzc/LmNvY2lkRmxhZz8uaWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIGl0ZW0uZmxhZ3MuQ29DNy5jb2NpZEZsYWcuaWQgPSBnYW1lLnN5c3RlbS5hcGkuY29jaWQuZ3Vlc3NJZChpdGVtKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlbS5zeXN0ZW0ucHJvcGVydGllcz8uZmlnaHRpbmcpIHtcbiAgICAgICAgICAgIHdlYXBvblNraWxscy5tZWxlZVtpdGVtLm5hbWVdID0gaXRlbS5faWRcbiAgICAgICAgICAgIHdlYXBvblNraWxscy5tZWxlZVtpdGVtLnN5c3RlbS5za2lsbE5hbWVdID0gaXRlbS5faWRcbiAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0uc3lzdGVtLnByb3BlcnRpZXM/LmZpcmVhcm0gfHwgaXRlbS5zeXN0ZW0ucHJvcGVydGllcz8ucmFuZ2VkKSB7XG4gICAgICAgICAgICB3ZWFwb25Ta2lsbHMucm5nZFtpdGVtLm5hbWVdID0gaXRlbS5faWRcbiAgICAgICAgICAgIHdlYXBvblNraWxscy5ybmdkW2l0ZW0uc3lzdGVtLnNraWxsTmFtZV0gPSBpdGVtLl9pZFxuICAgICAgICAgIH1cbiAgICAgICAgICBpdGVtcy5wdXNoKGl0ZW0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBzb3VyY2VJdGVtIG9mIGRhdGEuaW52ZXN0aWdhdG9ySXRlbXMpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShzb3VyY2VJdGVtKVxuICAgICAgaWYgKGl0ZW0uc3lzdGVtLnByb3BlcnRpZXMubWVsZWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3ZWFwb25Ta2lsbHMubWVsZWVbaXRlbS5zeXN0ZW0uc2tpbGwubWFpbi5uYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBpdGVtLnN5c3RlbS5za2lsbC5tYWluLmlkID0gd2VhcG9uU2tpbGxzLm1lbGVlW2l0ZW0uc3lzdGVtLnNraWxsLm1haW4ubmFtZV1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHdlYXBvblNraWxscy5tZWxlZVtpdGVtLnN5c3RlbS5za2lsbC5hbHRlcm5hdGl2Lm5hbWVdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGl0ZW0uc3lzdGVtLnNraWxsLmFsdGVybmF0aXYuaWQgPSB3ZWFwb25Ta2lsbHMubWVsZWVbaXRlbS5zeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5uYW1lXVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGl0ZW0uc3lzdGVtLnByb3BlcnRpZXMucm5nZCkge1xuICAgICAgICBpZiAodHlwZW9mIHdlYXBvblNraWxscy5ybmdkW2l0ZW0uc3lzdGVtLnNraWxsLm1haW4ubmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgaXRlbS5zeXN0ZW0uc2tpbGwubWFpbi5pZCA9IHdlYXBvblNraWxscy5ybmdkW2l0ZW0uc3lzdGVtLnNraWxsLm1haW4ubmFtZV1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHdlYXBvblNraWxscy5ybmdkW2l0ZW0uc3lzdGVtLnNraWxsLmFsdGVybmF0aXYubmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgaXRlbS5zeXN0ZW0uc2tpbGwuYWx0ZXJuYXRpdi5pZCA9IHdlYXBvblNraWxscy5ybmdkW2l0ZW0uc3lzdGVtLnNraWxsLmFsdGVybmF0aXYubmFtZV1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaXRlbXMucHVzaChpdGVtKVxuICAgIH1cbiAgICBsZXQgbW9uZXRhcnkgPSB7fVxuICAgIGNvbnN0IHNldHVwID0gYXdhaXQgdGhpcy5nZXRDYWNoZUl0ZW1CeUNvQ0lEKHRoaXMub2JqZWN0LnNldHVwKVxuICAgIGlmIChzZXR1cCkge1xuICAgICAgbW9uZXRhcnkgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShzZXR1cC5zeXN0ZW0ubW9uZXRhcnkpXG4gICAgfVxuICAgIGNvbnN0IGRldmVsb3BtZW50ID0ge1xuICAgICAgcGVyc29uYWw6IDIgKiAocGFyc2VJbnQoZGF0YS5zZXR1cFBvaW50cy5pbnQsIDEwKSArIHBhcnNlSW50KGRhdGEuc2V0dXBNb2RpZmllcnMuaW50LCAxMCkpLFxuICAgICAgb2NjdXBhdGlvbjogMCxcbiAgICAgIGFyY2hldHlwZTogMFxuICAgIH1cbiAgICBpZiAoZGF0YS5hcmNoZXR5cGUgIT09ICcnKSB7XG4gICAgICBjb25zdCBhcmNoZXR5cGUgPSBhd2FpdCBnYW1lLnN5c3RlbS5hcGkuY29jaWQuZnJvbUNvQ0lEKGRhdGEuYXJjaGV0eXBlKVxuICAgICAgaWYgKGFyY2hldHlwZS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgaXRlbXMucHVzaChhcmNoZXR5cGVbMF0udG9PYmplY3QoKSlcbiAgICAgICAgZGV2ZWxvcG1lbnQuYXJjaGV0eXBlID0gYXJjaGV0eXBlWzBdLnN5c3RlbS5ib251c1BvaW50c1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGF0YS5vY2N1cGF0aW9uICE9PSAnJykge1xuICAgICAgY29uc3Qgb2NjdXBhdGlvbiA9IGF3YWl0IGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5mcm9tQ29DSUQoZGF0YS5vY2N1cGF0aW9uKVxuICAgICAgaWYgKG9jY3VwYXRpb24ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGl0ZW1zLnB1c2gob2NjdXBhdGlvblswXS50b09iamVjdCgpKVxuICAgICAgICBjb25zdCBvcHRpb25zID0gW11cbiAgICAgICAgZm9yIChjb25zdCBba2V5LCBjYXJhY10gb2YgT2JqZWN0LmVudHJpZXMob2NjdXBhdGlvblswXS5zeXN0ZW0ub2NjdXBhdGlvblNraWxsUG9pbnRzKSkge1xuICAgICAgICAgIGlmIChjYXJhYy5zZWxlY3RlZCkge1xuICAgICAgICAgICAgaWYgKGNhcmFjLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICAgIG9wdGlvbnMucHVzaChjYXJhYy5tdWx0aXBsaWVyICogKHBhcnNlSW50KGRhdGEuc2V0dXBQb2ludHNba2V5XSwgMTApICsgcGFyc2VJbnQoZGF0YS5zZXR1cE1vZGlmaWVyc1trZXldLCAxMCkpKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZGV2ZWxvcG1lbnQub2NjdXBhdGlvbiArPSBjYXJhYy5tdWx0aXBsaWVyICogKHBhcnNlSW50KGRhdGEuc2V0dXBQb2ludHNba2V5XSwgMTApICsgcGFyc2VJbnQoZGF0YS5zZXR1cE1vZGlmaWVyc1trZXldLCAxMCkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBkZXZlbG9wbWVudC5vY2N1cGF0aW9uICs9IE1hdGgubWF4KC4uLm9wdGlvbnMpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYmlvZ3JhcGh5ID0gW11cbiAgICBmb3IgKGxldCBpbmRleCA9IDAsIGltID0gZGF0YS5iaW9TZWN0aW9ucy5sZW5ndGg7IGluZGV4IDwgaW07IGluZGV4KyspIHtcbiAgICAgIGJpb2dyYXBoeS5wdXNoKHtcbiAgICAgICAgdGl0bGU6IGRhdGEuYmlvU2VjdGlvbnNbaW5kZXhdLm5hbWUsXG4gICAgICAgIHZhbHVlOiBkYXRhLmJpb1NlY3Rpb25zW2luZGV4XS52YWx1ZVxuICAgICAgfSlcbiAgICB9XG4gICAgY29uc3QgYWN0b3JEYXRhID0ge1xuICAgICAgdHlwZTogJ2NoYXJhY3RlcicsXG4gICAgICBuYW1lOiBkYXRhLm5hbWUsXG4gICAgICBpbWc6IGRhdGEuYXZhdGFyLFxuICAgICAgc3lzdGVtOiB7XG4gICAgICAgIGNoYXJhY3RlcmlzdGljczoge1xuICAgICAgICAgIHN0cjoge1xuICAgICAgICAgICAgdmFsdWU6IHBhcnNlSW50KGRhdGEuc2V0dXBQb2ludHMuc3RyLCAxMCkgKyBwYXJzZUludChkYXRhLnNldHVwTW9kaWZpZXJzLnN0ciwgMTApXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb246IHtcbiAgICAgICAgICAgIHZhbHVlOiBwYXJzZUludChkYXRhLnNldHVwUG9pbnRzLmNvbiwgMTApICsgcGFyc2VJbnQoZGF0YS5zZXR1cE1vZGlmaWVycy5jb24sIDEwKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgc2l6OiB7XG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VJbnQoZGF0YS5zZXR1cFBvaW50cy5zaXosIDEwKSArIHBhcnNlSW50KGRhdGEuc2V0dXBNb2RpZmllcnMuc2l6LCAxMClcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRleDoge1xuICAgICAgICAgICAgdmFsdWU6IHBhcnNlSW50KGRhdGEuc2V0dXBQb2ludHMuZGV4LCAxMCkgKyBwYXJzZUludChkYXRhLnNldHVwTW9kaWZpZXJzLmRleCwgMTApXG4gICAgICAgICAgfSxcbiAgICAgICAgICBhcHA6IHtcbiAgICAgICAgICAgIHZhbHVlOiBwYXJzZUludChkYXRhLnNldHVwUG9pbnRzLmFwcCwgMTApICsgcGFyc2VJbnQoZGF0YS5zZXR1cE1vZGlmaWVycy5hcHAsIDEwKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgaW50OiB7XG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VJbnQoZGF0YS5zZXR1cFBvaW50cy5pbnQsIDEwKSArIHBhcnNlSW50KGRhdGEuc2V0dXBNb2RpZmllcnMuaW50LCAxMClcbiAgICAgICAgICB9LFxuICAgICAgICAgIHBvdzoge1xuICAgICAgICAgICAgdmFsdWU6IHBhcnNlSW50KGRhdGEuc2V0dXBQb2ludHMucG93LCAxMCkgKyBwYXJzZUludChkYXRhLnNldHVwTW9kaWZpZXJzLnBvdywgMTApXG4gICAgICAgICAgfSxcbiAgICAgICAgICBlZHU6IHtcbiAgICAgICAgICAgIHZhbHVlOiBwYXJzZUludChkYXRhLnNldHVwUG9pbnRzLmVkdSwgMTApICsgcGFyc2VJbnQoZGF0YS5zZXR1cE1vZGlmaWVycy5lZHUsIDEwKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYXR0cmliczoge1xuICAgICAgICAgIGxjazoge1xuICAgICAgICAgICAgdmFsdWU6IE1hdGgubWF4KHBhcnNlSW50KGRhdGEuc2V0dXBQb2ludHMubHVjaywgMTApLCBwYXJzZUludChkYXRhLnNldHVwTW9kaWZpZXJzLmx1Y2ssIDEwKSlcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNhbjoge1xuICAgICAgICAgICAgdmFsdWU6IHBhcnNlSW50KGRhdGEuc2V0dXBQb2ludHMucG93LCAxMCkgKyBwYXJzZUludChkYXRhLnNldHVwTW9kaWZpZXJzLnBvdywgMTApXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBpbmZvczoge1xuICAgICAgICAgIGFnZTogZGF0YS5hZ2UsXG4gICAgICAgICAgcmVzaWRlbmNlOiBkYXRhLnJlc2lkZW5jZSxcbiAgICAgICAgICBiaXJ0aHBsYWNlOiBkYXRhLmJpcnRocGxhY2VcbiAgICAgICAgfSxcbiAgICAgICAgZGV2ZWxvcG1lbnQsXG4gICAgICAgIGJpb2dyYXBoeSxcbiAgICAgICAgbW9uZXRhcnlcbiAgICAgIH0sXG4gICAgICBwcm90b3R5cGVUb2tlbjoge1xuICAgICAgICBuYW1lOiBkYXRhLm5hbWUsXG4gICAgICAgIGFjdG9yTGluazogdHJ1ZSxcbiAgICAgICAgdGV4dHVyZToge1xuICAgICAgICAgIHNyYzogZGF0YS50b2tlblxuICAgICAgICB9LFxuICAgICAgICBkaXNwb3NpdGlvbjogQ09OU1QuVE9LRU5fRElTUE9TSVRJT05TLkZSSUVORExZLFxuICAgICAgICBzaWdodDoge1xuICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGl0ZW1zLFxuICAgICAgb3duZXJzaGlwOiB7XG4gICAgICAgIGRlZmF1bHQ6IHBhcnNlSW50KGRhdGEuZGVmYXVsdE93bmVyc2hpcCwgMTApXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhY3RvckRhdGFcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBjcmVhdGVDaGFyYWN0ZXJGcm9tRGF0YSAoYWN0b3JEYXRhKSB7XG4gICAgY29uc3QgYWN0b3IgPSBhd2FpdCBDb0M3SW52ZXN0aWdhdG9yV2l6YXJkLmNyZWF0ZUNoYXJhY3RlcihhY3RvckRhdGEpXG4gICAgY29uc3QgZnVuY3Rpb25JZCA9IEhvb2tzLm9uKCdyZW5kZXJBY3RvclNoZWV0JywgKGFwcCwgaHRtbCwgZGF0YSkgPT4ge1xuICAgICAgaWYgKGFwcC5vYmplY3QuaWQgPT09IGFjdG9yLmlkKSB7XG4gICAgICAgIGdhbWUuc29ja2V0LmVtaXQoJ3N5c3RlbS5Db0M3Jywge1xuICAgICAgICAgIHR5cGU6ICdvcGVuLWNoYXJhY3RlcicsXG4gICAgICAgICAgbGlzdGVuZXI6IE9iamVjdC5rZXlzKGFjdG9yRGF0YS5vd25lcnNoaXApLmZpbmQoayA9PiBrICE9PSAnZGVmYXVsdCcpLFxuICAgICAgICAgIHBheWxvYWQ6IGFjdG9yLmlkXG4gICAgICAgIH0pXG4gICAgICAgIEhvb2tzLm9mZigncmVuZGVyQWN0b3JTaGVldCcsIGZ1bmN0aW9uSWQpXG4gICAgICB9XG4gICAgfSlcbiAgICBhY3Rvci5zaGVldC5yZW5kZXIodHJ1ZSlcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBjcmVhdGVDaGFyYWN0ZXIgKGFjdG9yRGF0YSkge1xuICAgIGNvbnN0IGFjdG9yID0gYXdhaXQgQWN0b3IuY3JlYXRlKGFjdG9yRGF0YSlcbiAgICBhd2FpdCBhY3Rvci51cGRhdGUoe1xuICAgICAgJ3N5c3RlbS5hdHRyaWJzLmhwLnZhbHVlJzogYWN0b3IucmF3SHBNYXgsXG4gICAgICAnc3lzdGVtLmF0dHJpYnMubXAudmFsdWUnOiBhY3Rvci5yYXdNcE1heCxcbiAgICAgICdzeXN0ZW0uYXR0cmlicy5zYW4ubWF4JzogYWN0b3IucmF3TXBNYXhcbiAgICB9KVxuICAgIGF3YWl0IGFjdG9yLnJlc2V0RGFpbHlTYW5pdHkoKVxuICAgIHJldHVybiBhY3RvclxuICB9XG5cbiAgLyoqXG4gICAqIGNyZWF0ZSBpdCdzIHRoZSBkZWZhdWx0IHdheSB0byBjcmVhdGUgdGhlIENvQzdDaGFyYWN0ZXJXaXphcmRcbiAgICovXG4gIHN0YXRpYyBhc3luYyBjcmVhdGUgKG9wdGlvbnMgPSB7fSkge1xuICAgIC8vIFRyeSBhbmQgcHJlcmVxdXN0IGFzIG1hbnkgQ29DSURzIGR1ZSB0byB0aGUgd2F5IHRoZXkgaGF2ZSB0byBiZSBsb2FkZWRcbiAgICBvcHRpb25zID0gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdCh7XG4gICAgICBzdGVwOiAwLFxuICAgICAgZGVmYXVsdFNldHVwOiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdJbnZlc3RpZ2F0b3JXaXphcmRTZXR1cCcpLFxuICAgICAgZGVmYXVsdFF1YW50aXR5OiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdJbnZlc3RpZ2F0b3JXaXphcmRRdWFudGl0eScpLFxuICAgICAgZGVmYXVsdE93bmVyc2hpcDogZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnSW52ZXN0aWdhdG9yV2l6YXJkT3duZXJzaGlwJyksXG4gICAgICBkZWZhdWx0RXJhOiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICd3b3JsZEVyYScpLFxuICAgICAgcmVyb2xsc0VuYWJsZWQ6IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ0ludmVzdGlnYXRvcldpemFyZFJlcm9sbHMnKSxcbiAgICAgIGVuZm9yY2VQb2ludEJ1eTogZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnSW52ZXN0aWdhdG9yV2l6YXJkUG9pbnRCdXknKSxcbiAgICAgIHF1aWNrRmlyZVZhbHVlczogZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnSW52ZXN0aWdhdG9yV2l6YXJkUXVpY2tGaXJlJyksXG4gICAgICBwbGFjZWFibGU6IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ0ludmVzdGlnYXRvcldpemFyZFF1aWNrRmlyZScpKSxcbiAgICAgIGNhY2hlQ29DSUQ6IENvQzdJbnZlc3RpZ2F0b3JXaXphcmQubG9hZENhY2hlSXRlbUJ5Q29DSUQoKSxcbiAgICAgIGNhY2hlQmFja3N0b3JpZXM6IGdhbWUuc3lzdGVtLmFwaS5jb2NpZC5mcm9tQ29DSURSZWdleEJlc3QoeyBjb2NpZFJlZ0V4cDogL15ydFxcLlxcLmJhY2tzdG9yeS0vLCB0eXBlOiAncnQnIH0pLFxuICAgICAgY2FjaGVJdGVtczoge30sXG4gICAgICBzZXR1cDogZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnSW52ZXN0aWdhdG9yV2l6YXJkU2V0dXAnKSxcbiAgICAgIHNraWxsSXRlbXM6IHt9LFxuICAgICAgb2NjdXBhdGlvbkdyb3Vwczoge30sXG4gICAgICBpbnZlc3RpZ2F0b3JJdGVtczogW10sXG4gICAgICBzZXR1cFBvaW50czoge1xuICAgICAgICBzdHI6ICcnLFxuICAgICAgICBjb246ICcnLFxuICAgICAgICBzaXo6ICcnLFxuICAgICAgICBkZXg6ICcnLFxuICAgICAgICBhcHA6ICcnLFxuICAgICAgICBpbnQ6ICcnLFxuICAgICAgICBwb3c6ICcnLFxuICAgICAgICBlZHU6ICcnLFxuICAgICAgICBsdWNrOiAnJ1xuICAgICAgfSxcbiAgICAgIHNldHVwTW9kaWZpZXJzOiB7XG4gICAgICAgIHN0cjogMCxcbiAgICAgICAgY29uOiAwLFxuICAgICAgICBzaXo6IDAsXG4gICAgICAgIGRleDogMCxcbiAgICAgICAgYXBwOiAwLFxuICAgICAgICBpbnQ6IDAsXG4gICAgICAgIHBvdzogMCxcbiAgICAgICAgZWR1OiAwLFxuICAgICAgICBsdWNrOiAwXG4gICAgICB9LFxuICAgICAgYXJjaGV0eXBlOiAnJyxcbiAgICAgIGNvcmVDaGFyYWN0ZXJpc3RpYzogJycsXG4gICAgICBvY2N1cGF0aW9uOiAnJyxcbiAgICAgIGJpb1NlY3Rpb25zOiBbXSxcbiAgICAgIHBlcnNvbmFsOiAwLFxuICAgICAgcGVyc29uYWxUZXh0OiAnJyxcbiAgICAgIGNyZWRpdFJhdGluZzoge1xuICAgICAgICBtaW46IDAsXG4gICAgICAgIG1heDogMFxuICAgICAgfSxcbiAgICAgIG5hbWU6ICcnLFxuICAgICAgYWdlOiAnJyxcbiAgICAgIHJlcXVpcmVzQWdlQWRqdXN0bWVudHM6IGZhbHNlLFxuICAgICAgcmVzaWRlbmNlOiAnJyxcbiAgICAgIGJpcnRocGxhY2U6ICcnLFxuICAgICAgbGFuZ3VhZ2U6ICcnLFxuICAgICAgYXZhdGFyOiAnaWNvbnMvc3ZnL215c3RlcnktbWFuLnN2ZycsXG4gICAgICB0b2tlbjogJ2ljb25zL3N2Zy9teXN0ZXJ5LW1hbi5zdmcnXG4gICAgfSwgb3B0aW9ucylcbiAgICBuZXcgQ29DN0ludmVzdGlnYXRvcldpemFyZChvcHRpb25zKS5yZW5kZXIodHJ1ZSlcbiAgfVxufVxuIiwiLyogZ2xvYmFsIGNhbnZhcywgZm91bmRyeSwgZ2FtZSwgUGxhY2VhYmxlc0xheWVyICovXG5pbXBvcnQgeyBDb0M3Q2hhdCB9IGZyb20gJy4vY2hhdC5qcydcbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuL3V0aWxpdGllcy5qcydcbmltcG9ydCB7IENvQzdBY3RvckltcG9ydGVyRGlhbG9nIH0gZnJvbSAnLi9hcHBzL2FjdG9yLWltcG9ydGVyLWRpYWxvZy5qcydcbmltcG9ydCB7IENvQzdDb250ZW50TGlua0RpYWxvZyB9IGZyb20gJy4vYXBwcy9jb2M3LWNvbnRlbnQtbGluay1kaWFsb2cuanMnXG5pbXBvcnQgeyBDb0M3SW52ZXN0aWdhdG9yV2l6YXJkIH0gZnJvbSAnLi9hcHBzL2ludmVzdGlnYXRvci13aXphcmQuanMnXG5cbmNsYXNzIENvQzdNZW51TGF5ZXIgZXh0ZW5kcyBQbGFjZWFibGVzTGF5ZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMub2JqZWN0cyA9IHt9XG4gIH1cblxuICBzdGF0aWMgZ2V0IGxheWVyT3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc3VwZXIubGF5ZXJPcHRpb25zLCB7XG4gICAgICBuYW1lOiAnY29jN21lbnUnLFxuICAgICAgekluZGV4OiA2MFxuICAgIH0pXG4gIH1cblxuICBzdGF0aWMgZ2V0IGRvY3VtZW50TmFtZSAoKSB7XG4gICAgcmV0dXJuICdUb2tlbidcbiAgfVxuXG4gIGdldCBwbGFjZWFibGVzICgpIHtcbiAgICByZXR1cm4gW11cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29DN01lbnUge1xuICBzdGF0aWMgZ2V0QnV0dG9ucyAoY29udHJvbHMpIHtcbiAgICBjYW52YXMuY29jN2dtdG9vbHMgPSBuZXcgQ29DN01lbnVMYXllcigpXG4gICAgY29uc3QgaXNLZWVwZXIgPSBnYW1lLnVzZXIuaXNHTVxuICAgIGNvbnN0IHNob3dIaWRkZW5EZXZNZW51ID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnaGlkZGVuZGV2bWVudScpXG4gICAgY29udHJvbHMucHVzaCh7XG4gICAgICBuYW1lOiAnY29jN21lbnUnLFxuICAgICAgdGl0bGU6ICdDb0M3LkdtVG9vbHMnLFxuICAgICAgbGF5ZXI6ICdjb2M3Z210b29scycsXG4gICAgICBpY29uOiAnZ2FtZS1pY29uIGdhbWUtaWNvbi10ZW50YWNsZS1zdHJpa2UnLFxuICAgICAgdmlzaWJsZTogaXNLZWVwZXIsXG4gICAgICB0b29sczogW1xuICAgICAgICB7XG4gICAgICAgICAgdG9nZ2xlOiB0cnVlLFxuICAgICAgICAgIGljb246ICdmYXMgZmEtYW5nbGUtZG91YmxlLXVwJyxcbiAgICAgICAgICBuYW1lOiAnZGV2cGhhc2UnLFxuICAgICAgICAgIGFjdGl2ZTogZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnZGV2ZWxvcG1lbnRFbmFibGVkJyksXG4gICAgICAgICAgdGl0bGU6ICdDb0M3LkRldlBoYXNlJyxcbiAgICAgICAgICBvbkNsaWNrOiBhc3luYyB0b2dnbGUgPT4gYXdhaXQgQ29DN1V0aWxpdGllcy50b2dnbGVEZXZQaGFzZSh0b2dnbGUpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0b2dnbGU6IHRydWUsXG4gICAgICAgICAgaWNvbjogJ2ZhcyBmYS11c2VyLWVkaXQnLFxuICAgICAgICAgIG5hbWU6ICdjaGFyY3JlYXRlJyxcbiAgICAgICAgICBhY3RpdmU6IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2NoYXJDcmVhdGlvbkVuYWJsZWQnKSxcbiAgICAgICAgICB0aXRsZTogJ0NvQzcuQ2hhckNyZWF0aW9uTW9kZScsXG4gICAgICAgICAgb25DbGljazogYXN5bmMgdG9nZ2xlID0+XG4gICAgICAgICAgICBhd2FpdCBDb0M3VXRpbGl0aWVzLnRvZ2dsZUNoYXJDcmVhdGlvbih0b2dnbGUpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBidXR0b246IHRydWUsXG4gICAgICAgICAgaWNvbjogJ2ZhcyBmYS11c2VyLXBsdXMnLFxuICAgICAgICAgIG5hbWU6ICdhY3Rvci1pbXBvcnQnLFxuICAgICAgICAgIHRpdGxlOiAnQ29DNy5BY3RvckltcG9ydGVyJyxcbiAgICAgICAgICBvbkNsaWNrOiBhc3luYyAoKSA9PiBhd2FpdCBDb0M3QWN0b3JJbXBvcnRlckRpYWxvZy5jcmVhdGUoKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgYnV0dG9uOiB0cnVlLFxuICAgICAgICAgIGljb246ICdmYXMgZmEtdXNlci1jaGVjaycsXG4gICAgICAgICAgbmFtZTogJ2ludmVzdGlnYXRvci13aXphcmQnLFxuICAgICAgICAgIHRpdGxlOiAnQ29DNy5JbnZlc3RpZ2F0b3JXaXphcmQuVGl0bGUnLFxuICAgICAgICAgIG9uQ2xpY2s6IGFzeW5jICgpID0+IGF3YWl0IENvQzdJbnZlc3RpZ2F0b3JXaXphcmQuY3JlYXRlKClcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRvZ2dsZTogdHJ1ZSxcbiAgICAgICAgICBpY29uOiAnZmFzIGZhLWNlcnRpZmljYXRlJyxcbiAgICAgICAgICBjbGFzczogJ3hwX3RvZ2dsZScsXG4gICAgICAgICAgbmFtZTogJ3hwdG9nZ2xlJyxcbiAgICAgICAgICBhY3RpdmU6IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3hwRW5hYmxlZCcpLFxuICAgICAgICAgIHRpdGxlOiAnQ29DNy50b2dnbGVYUCcsXG4gICAgICAgICAgb25DbGljazogYXN5bmMgdG9nZ2xlID0+IGF3YWl0IENvQzdVdGlsaXRpZXMudG9nZ2xlWFBHYWluKHRvZ2dsZSlcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGJ1dHRvbjogdHJ1ZSxcbiAgICAgICAgICBpY29uOiAnZ2FtZS1pY29uIGdhbWUtaWNvbi1jYXJkLWpva2VyJyxcbiAgICAgICAgICBuYW1lOiAnZmFrZXJvbGwnLFxuICAgICAgICAgIHRpdGxlOiAnQ29DNy5GYWtlUm9sbCcsXG4gICAgICAgICAgb25DbGljazogQ29DN0NoYXQuZmFrZVJvbGxNZXNzYWdlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBidXR0b246IHRydWUsXG4gICAgICAgICAgaWNvbjogJ2ZhcyBmYS1tb29uJyxcbiAgICAgICAgICBuYW1lOiAnc3RhcnRyZXN0JyxcbiAgICAgICAgICB0aXRsZTogJ0NvQzcuc3RhcnRSZXN0JyxcbiAgICAgICAgICBvbkNsaWNrOiBhc3luYyAoKSA9PiBhd2FpdCBDb0M3VXRpbGl0aWVzLmdldFRhcmdldCgpXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KVxuICAgIGlmIChzaG93SGlkZGVuRGV2TWVudSkge1xuICAgICAgY2FudmFzLmNvYzdEZXZUb29scyA9IG5ldyBDb0M3TWVudUxheWVyKClcbiAgICAgIGNvbnRyb2xzLnB1c2goe1xuICAgICAgICBuYW1lOiAnY29jN0Rldk1lbnUnLFxuICAgICAgICB0aXRsZTpcbiAgICAgICAgICBcIkRldiB0b29scy4gSWYgeW91IGRvbid0IGtub3cgd2hhdCBpdCBpcywgeW91IGRvbid0IG5lZWQgaXQgYW5kIHlvdSBzaG91bGRuJ3QgdXNlIGl0ICEhXCIsXG4gICAgICAgIGxheWVyOiAnY29jN0RldlRvb2xzJyxcbiAgICAgICAgaWNvbjogJ2dhbWUtaWNvbiBnYW1lLWljb24tcG9saWNlLWJhZGdlJyxcbiAgICAgICAgdmlzaWJsZTogaXNLZWVwZXIsXG4gICAgICAgIHRvb2xzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgdG9nZ2xlOiB0cnVlLFxuICAgICAgICAgICAgaWNvbjogJ2dhbWUtaWNvbiBnYW1lLWljb24tZGljZS1maXJlJyxcbiAgICAgICAgICAgIG5hbWU6ICdhbHdheXNDcml0JyxcbiAgICAgICAgICAgIGFjdGl2ZTogZ2FtZS5Db0M3LmRldi5kaWNlLmFsd2F5c0NyaXQsXG4gICAgICAgICAgICB0aXRsZTogJ0FsbCByb2xscyB3aWxsIGNyaXQnLFxuICAgICAgICAgICAgb25DbGljazogdG9nZ2xlID0+IHtcbiAgICAgICAgICAgICAgZ2FtZS5Db0M3LmRldi5kaWNlLmFsd2F5c0Z1bWJsZSA9IGZhbHNlXG4gICAgICAgICAgICAgIGdhbWUuQ29DNy5kZXYuZGljZS5hbHdheXNDcml0ID0gdG9nZ2xlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0b2dnbGU6IHRydWUsXG4gICAgICAgICAgICBpY29uOiAnZ2FtZS1pY29uIGdhbWUtaWNvbi1maXJlLWV4dGluZ3Vpc2hlcicsXG4gICAgICAgICAgICBuYW1lOiAnYWx3YXlzRnVtYmxlJyxcbiAgICAgICAgICAgIGFjdGl2ZTogZ2FtZS5Db0M3LmRldi5kaWNlLmFsd2F5c0Z1bWJsZSxcbiAgICAgICAgICAgIHRpdGxlOiAnQWxsIHJvbGxzIHdpbGwgZnVtYmxlJyxcbiAgICAgICAgICAgIG9uQ2xpY2s6IHRvZ2dsZSA9PiB7XG4gICAgICAgICAgICAgIGdhbWUuQ29DNy5kZXYuZGljZS5hbHdheXNGdW1ibGUgPSB0b2dnbGVcbiAgICAgICAgICAgICAgZ2FtZS5Db0M3LmRldi5kaWNlLmFsd2F5c0NyaXQgPSBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgcmVuZGVyQ29udHJvbHMgKGFwcCwgaHRtbCwgZGF0YSkge1xuICAgIGNvbnN0IGlzS2VlcGVyID0gZ2FtZS51c2VyLmlzR01cbiAgICBjb25zdCBrZWVwZXJNZW51ID0gaHRtbC5maW5kKCcuZ2FtZS1pY29uLXRlbnRhY2xlLXN0cmlrZScpLnBhcmVudCgpXG4gICAga2VlcGVyTWVudS5hZGRDbGFzcygnY29jNy1tZW51JylcbiAgICBpZiAoaXNLZWVwZXIpIHtcbiAgICAgIGtlZXBlck1lbnUuYWZ0ZXIoXG4gICAgICAgICc8bGkgY2xhc3M9XCJzY2VuZS1jb250cm9sIGNvYzctbWVudSBjb2M3LWNyZWF0ZS1saW5rXCIgdGl0bGU9XCInICtcbiAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQ3JlYXRlTGluaycpICtcbiAgICAgICAgICAnXCI+PGkgY2xhc3M9XCJmYXMgZmEtbGlua1wiPjwvaT48L2xpPidcbiAgICAgIClcbiAgICB9XG4gICAga2VlcGVyTWVudS5hZnRlcihcbiAgICAgICc8bGkgY2xhc3M9XCJzY2VuZS1jb250cm9sIGNvYzctbWVudSBjb2M3LWRpY2Utcm9sbFwiIHRpdGxlPVwiJyArXG4gICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Sb2xsRGljZScpICtcbiAgICAgICAgJ1wiPjxpIGNsYXNzPVwiZ2FtZS1pY29uIGdhbWUtaWNvbi1kMTBcIj48L2k+PC9saT4nXG4gICAgKVxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcuY29jNy1tZW51LmNvYzctZGljZS1yb2xsJylcbiAgICAgIC5jbGljayhldmVudCA9PiBDb0M3VXRpbGl0aWVzLnJvbGxEaWNlKGV2ZW50KSlcbiAgICBodG1sXG4gICAgICAuZmluZCgnLmNvYzctbWVudS5jb2M3LWNyZWF0ZS1saW5rJylcbiAgICAgIC5jbGljayhldmVudCA9PiBDb0M3Q29udGVudExpbmtEaWFsb2cuY3JlYXRlKGV2ZW50KSlcbiAgfVxufVxuIiwiLyogZ2xvYmFsIGdhbWUsIHVpICovXG5pbXBvcnQgeyBDb0M3VXRpbGl0aWVzIH0gZnJvbSAnLi4vdXRpbGl0aWVzLmpzJ1xuaW1wb3J0IHsgQ29DN0xpbmsgfSBmcm9tICcuL2NvYzctbGluay5qcydcblxuZXhwb3J0IGNsYXNzIENvQzdDYW52YXMge1xuICBzdGF0aWMgZ2V0IENPQzdfVFlQRVNfU1VQUE9SVEVEICgpIHtcbiAgICByZXR1cm4gWydDb0M3TGluaycsICdsb2NhdG9yJywgJ2dldFRva2VuJ11cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBvbkRyb3BTb21ldGhpbmcgKGNhbnZhcywgZGF0YSkge1xuICAgIGlmIChcbiAgICAgIGRhdGEudHlwZSAmJlxuICAgICAgQ29DN0NhbnZhcy5DT0M3X1RZUEVTX1NVUFBPUlRFRC5pbmNsdWRlcyhkYXRhLnR5cGUpXG4gICAgKSB7XG4gICAgICBjb25zdCBncmlkU2l6ZSA9IGNhbnZhcy5zY2VuZS5ncmlkLnNpemVcbiAgICAgIGNvbnN0IHggPSBkYXRhLnggLSBncmlkU2l6ZSAvIDJcbiAgICAgIGNvbnN0IHkgPSBkYXRhLnkgLSBncmlkU2l6ZSAvIDJcbiAgICAgIGNvbnN0IGhlaWdodCA9IGdyaWRTaXplXG4gICAgICBjb25zdCB3aWR0aCA9IGdyaWRTaXplXG4gICAgICBsZXQgZHJvcFRhcmdldFRva2VucyA9IGNhbnZhcy50b2tlbnMucGxhY2VhYmxlcy5maWx0ZXIob2JqID0+IHtcbiAgICAgICAgY29uc3QgYyA9IG9iai5jZW50ZXJcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBOdW1iZXIuYmV0d2VlbihjLngsIHgsIHggKyB3aWR0aCkgJiZcbiAgICAgICAgICBOdW1iZXIuYmV0d2VlbihjLnksIHksIHkgKyBoZWlnaHQpXG4gICAgICAgIClcbiAgICAgIH0pIC8vIEZpbmQgZHJvcCB0YXJnZXQuXG4gICAgICBpZiAoIWRyb3BUYXJnZXRUb2tlbnMubGVuZ3RoKSBkcm9wVGFyZ2V0VG9rZW5zID0gY2FudmFzLnRva2Vucy5jb250cm9sbGVkIC8vIElmIG5vIHRhcmdldCB3aGlzcGVyIHRvIHNlbGVjdGVkIHRva2VuXG4gICAgICBzd2l0Y2ggKGRhdGEudHlwZSkge1xuICAgICAgICBjYXNlICdDb0M3TGluayc6XG4gICAgICAgICAgaWYgKGRhdGEuY2hlY2sgPT09IENvQzdMaW5rLkNIRUNLX1RZUEUuRUZGRUNUKSB7XG4gICAgICAgICAgICBpZiAoZHJvcFRhcmdldFRva2Vucy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiBkcm9wVGFyZ2V0VG9rZW5zKSB7XG4gICAgICAgICAgICAgICAgQ29DN0xpbmsuX29uTGlua0FjdG9yQ2xpY2sodG9rZW4uYWN0b3IsIGRhdGEpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIEFwcGx5IHRvIGV2ZXJ5b25lID8gb3Igb25seSBwbGF5ZXJzID8gb3Igbm9ib2R5XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChkcm9wVGFyZ2V0VG9rZW5zLmxlbmd0aCkge1xuICAgICAgICAgICAgQ29DN0xpbmsudG9XaGlzcGVyTWVzc2FnZShkYXRhLCBkcm9wVGFyZ2V0VG9rZW5zLmZpbHRlcih0ID0+IHQuYWN0b3Iub3duZXJzLmxlbmd0aCkubWFwKHQgPT4gdC5hY3RvcikpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIENvQzdMaW5rLnRvV2hpc3Blck1lc3NhZ2UoZGF0YSwgZ2FtZS51c2Vycy5wbGF5ZXJzLmZpbHRlcih1ID0+ICEhdS5jaGFyYWN0ZXIpLm1hcCh1ID0+IHUuY2hhcmFjdGVyKSlcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnZ2V0VG9rZW4nOlxuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YS5hcHBJZCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRhdGEuY2FsbEJhY2sgPT09ICdzdHJpbmcnICYmIHR5cGVvZiB1aS53aW5kb3dzW2RhdGEuYXBwSWRdICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdWkud2luZG93c1tkYXRhLmFwcElkXVtkYXRhLmNhbGxCYWNrXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdWkud2luZG93c1tkYXRhLmFwcElkXVtkYXRhLmNhbGxCYWNrXShkcm9wVGFyZ2V0VG9rZW5zKVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIC8vIEhhbmRsZXMgZ2VuZXJpYyBjYW52YSBkcm9wLlxuICAgICAgICAvLyBkYXRhVHJhbnNmZXIgbXVzdCBpbmNsdWRlIDpcbiAgICAgICAgLy8gLSBkb2NVdWlkIDogdGhlIFV1aWQgb2YgdGhlIGRvY3VtZW50IHRvIGNhbGxcbiAgICAgICAgLy8gLSBjYWxsQmFjayA6IHRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbiB0byBjYWxsIGluIHRoZSBkb2N1bWVudC5cbiAgICAgICAgLy8gVXNlZCB0byBzZWxlY3QgbG9jYXRpb24gZm9yIGNoYXNlXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKGRhdGEuZG9jVXVpZCAmJiBkYXRhLmNhbGxCYWNrKSB7XG4gICAgICAgICAgICBjb25zdCBkb2MgPSBDb0M3VXRpbGl0aWVzLlNmcm9tVXVpZChkYXRhLmRvY1V1aWQpXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIGRvY1tkYXRhLmNhbGxCYWNrXSAmJlxuICAgICAgICAgICAgICB0eXBlb2YgZG9jW2RhdGEuY2FsbEJhY2tdID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBkYXRhLnNjZW5lID0gY2FudmFzLnNjZW5lLnV1aWRcbiAgICAgICAgICAgICAgICBkb2NbZGF0YS5jYWxsQmFja10oZGF0YSlcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oZXJyb3IubWVzc2FnZSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiLyogZ2xvYmFsIENPTkZJRywgRGlhbG9nLCBnYW1lLCBTZXR0aW5ncyAqL1xuZXhwb3J0IGNsYXNzIENvQzdTZXR0aW5nc0RpcmVjdG9yeSBleHRlbmRzIFNldHRpbmdzIHtcbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgaHRtbFxuICAgICAgICAuZmluZCgnI3NldHRpbmdzLWdhbWUnKVxuICAgICAgICAuYXBwZW5kKFxuICAgICAgICAgICc8YnV0dG9uIGNsYXNzPVwidHJpZ2dlci1kYXRhLW1pZ3JhdGlvblwiPjxpIGNsYXNzPVwiZmFzIGZhLXdyZW5jaFwiPjwvaT4gJyArXG4gICAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTWlncmF0ZS5UcmlnZ2VyQnV0dG9uJykgK1xuICAgICAgICAgICAgJzwvYnV0dG9uPidcbiAgICAgICAgKVxuICAgICAgaHRtbC5maW5kKCcjc2V0dGluZ3MtZG9jdW1lbnRhdGlvbicpXG4gICAgICAgIC5hcHBlbmQoJzxidXR0b24gY2xhc3M9XCJ0cmlnZ2VyLXN5c3RlbS1tYW51YWxcIj48aSBjbGFzcz1cImZhcyBmYS1ib29rc1wiPjwvaT4gJyArXG4gICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5TeXN0ZW0uRG9jdW1lbnRhdGlvbicpICtcbiAgICAgICAgJzwvYnV0dG9uPicpXG4gICAgICBodG1sLmZpbmQoJy50cmlnZ2VyLWRhdGEtbWlncmF0aW9uJykuY2xpY2soKCkgPT4ge1xuICAgICAgICBuZXcgRGlhbG9nKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRpdGxlOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTWlncmF0ZS5UcmlnZ2VyVGl0bGUnKSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5NaWdyYXRlLlRyaWdnZXJDb250ZW50cycpLFxuICAgICAgICAgICAgYnV0dG9uczoge1xuICAgICAgICAgICAgICBtaWdyYXRlOiB7XG4gICAgICAgICAgICAgICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLWNoZWNrXCI+PC9pPicsXG4gICAgICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5NaWdyYXRlLlRyaWdnZXJSZXN0YXJ0JyksXG4gICAgICAgICAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGF3YWl0IGdhbWUuc2V0dGluZ3Muc2V0KCdDb0M3JywgJ3N5c3RlbVVwZGF0ZVZlcnNpb24nLCAwKVxuICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBjbG9zZToge1xuICAgICAgICAgICAgICAgIGljb246ICc8aSBjbGFzcz1cImZhcyBmYS1iYW5cIj48L2k+JyxcbiAgICAgICAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdDYW5jZWwnKSxcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge31cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdjbG9zZSdcbiAgICAgICAgICB9LFxuICAgICAgICAgIHt9XG4gICAgICAgICkucmVuZGVyKHRydWUpXG4gICAgICB9KVxuICAgICAgaHRtbC5maW5kKCcudHJpZ2dlci1zeXN0ZW0tbWFudWFsJykuY2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAoYXdhaXQgZ2FtZS5wYWNrcy5nZXQoJ0NvQzcuc3lzdGVtLWRvYycpLmdldERvY3VtZW50KENPTkZJRy5Db0M3Lk1hbnVhbCkpPy5zaGVldC5yZW5kZXIodHJ1ZSlcbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG4iLCIvKiBnbG9iYWwgQ29tcGVuZGl1bURpcmVjdG9yeSwgRGlhbG9nLCBnYW1lICovXG5leHBvcnQgY2xhc3MgQ29DN0NvbXBlbmRpdW1EaXJlY3RvcnkgZXh0ZW5kcyBDb21wZW5kaXVtRGlyZWN0b3J5IHtcbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuICAgIGxldCB0cmFuc2xhdGVkID0gZmFsc2VcbiAgICBpZiAoZ2FtZS5pMThuLmxhbmcgPT09ICdlbicpIHtcbiAgICAgIHRyYW5zbGF0ZWQgPSB0cnVlXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZ2FtZS5iYWJlbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBmb3IgKGNvbnN0IHYgb2YgT2JqZWN0LnZhbHVlcyhnYW1lLmJhYmVsZS5tb2R1bGVzKSkge1xuICAgICAgICBpZiAodi5sYW5nID09PSBnYW1lLmkxOG4ubGFuZykge1xuICAgICAgICAgIHRyYW5zbGF0ZWQgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCF0cmFuc2xhdGVkKSB7XG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCdmb290ZXIuZGlyZWN0b3J5LWZvb3RlcicpXG4gICAgICAgIC5hcHBlbmQoXG4gICAgICAgICAgJzxhIGNsYXNzPVwiY29tcGVuZGl1bS10cmFuc2xhdGlvblwiIHRpdGxlPVwiJyArXG4gICAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuSG93VG9UcmFuc2xhdGVUaXRsZScpICtcbiAgICAgICAgICAgICdcIj4nICtcbiAgICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ib3dUb1RyYW5zbGF0ZVRpdGxlJykgK1xuICAgICAgICAgICAgJzwvYT4nXG4gICAgICAgIClcbiAgICAgIGh0bWwuZmluZCgnLmNvbXBlbmRpdW0tdHJhbnNsYXRpb24nKS5jbGljaygoKSA9PiB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPVxuICAgICAgICAgICc8cD4nICtcbiAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuSG93VG9UcmFuc2xhdGVXYXJuaW5nJykgK1xuICAgICAgICAgICc8L3A+JyArXG4gICAgICAgICAgJzxwPicgK1xuICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ib3dUb1RyYW5zbGF0ZUluc3RhbGxCYWJlbGUnKSArXG4gICAgICAgICAgJzwvcD4nICtcbiAgICAgICAgICAnPHA+JyArXG4gICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lkhvd1RvVHJhbnNsYXRlSW5zdGFsbFRyYW5zbGF0aW9uJykgK1xuICAgICAgICAgICc8L3A+JyArXG4gICAgICAgICAgJzxwPicgK1xuICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ib3dUb1RyYW5zbGF0ZUVuYWJsZVRyYW5zbGF0aW9uJykgK1xuICAgICAgICAgICc8L3A+JyArXG4gICAgICAgICAgJzxwPicgK1xuICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ib3dUb1RyYW5zbGF0ZU5vVHJhbnNsYXRpb24nKSArXG4gICAgICAgICAgJzwvcD4nXG4gICAgICAgIG5ldyBEaWFsb2coXG4gICAgICAgICAge1xuICAgICAgICAgICAgdGl0bGU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ib3dUb1RyYW5zbGF0ZVRpdGxlJyksXG4gICAgICAgICAgICBjb250ZW50OiBtZXNzYWdlLFxuICAgICAgICAgICAgYnV0dG9uczoge30sXG4gICAgICAgICAgICBkZWZhdWx0OiAnY2xvc2UnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7fVxuICAgICAgICApLnJlbmRlcih0cnVlKVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBBY3RvckRpcmVjdG9yeSwgQ09OU1QsIGdhbWUgKi9cbmltcG9ydCB7IENvQzdBY3RvckltcG9ydGVyRGlhbG9nIH0gZnJvbSAnLi9hcHBzL2FjdG9yLWltcG9ydGVyLWRpYWxvZy5qcydcbmltcG9ydCB7IENvQzdJbnZlc3RpZ2F0b3JXaXphcmQgfSBmcm9tICcuL2FwcHMvaW52ZXN0aWdhdG9yLXdpemFyZC5qcydcblxuZXhwb3J0IGNsYXNzIENvQzdBY3RvckRpcmVjdG9yeSBleHRlbmRzIEFjdG9yRGlyZWN0b3J5IHtcbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuXG4gICAgLy8gQWxsb3cgSW52ZXN0aWdhdG9yIFdpemFyZFxuICAgIC8vICAqIElmIHRoZSB1c2VyIHJvbGUgaXMgYWxsb3dlZCB0byBjcmVhdGUgYWN0b3JzXG4gICAgLy8gICogSWYgdGhlIHVzZXIgaGFzIGxlc3Mgb3duZWQgYWN0b3JzIHRoYW4gYWxsb3dlZCBpbiBzZXR0aW5nc1xuICAgIGxldCBhbGxvd1dpemFyZCA9IGdhbWUudXNlci5yb2xlID49IENPTlNULlVTRVJfUEVSTUlTU0lPTlMuQUNUT1JfQ1JFQVRFLmRlZmF1bHRSb2xlXG4gICAgaWYgKCFhbGxvd1dpemFyZCkge1xuICAgICAgY29uc3QgYWxsb3dlZCA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ0ludmVzdGlnYXRvcldpemFyZFF1YW50aXR5JylcbiAgICAgIGlmIChhbGxvd2VkID4gMCkge1xuICAgICAgICBjb25zdCBleGlzdGluZyA9IGdhbWUuYWN0b3JzLmZpbHRlcihhID0+IFthLm93bmVyc2hpcC5kZWZhdWx0LCAoYS5vd25lcnNoaXBbZ2FtZS51c2VyLmlkXSA/PyBDT05TVC5ET0NVTUVOVF9PV05FUlNISVBfTEVWRUxTLk5PTkUpXS5pbmNsdWRlcyhDT05TVC5ET0NVTUVOVF9PV05FUlNISVBfTEVWRUxTLk9XTkVSKSkubGVuZ3RoXG4gICAgICAgIGFsbG93V2l6YXJkID0gZXhpc3RpbmcgPCBhbGxvd2VkXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFsbG93V2l6YXJkKSB7XG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCdmb290ZXIuZGlyZWN0b3J5LWZvb3RlcicpXG4gICAgICAgIC5hcHBlbmQoJzxhIGNsYXNzPVwiaW52ZXN0aWdhdG9yLXdpemFyZFwiPicgKyBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuSW52ZXN0aWdhdG9yV2l6YXJkLlRpdGxlJykgKyAnPC9hPicpXG4gICAgICBodG1sLmZpbmQoJy5pbnZlc3RpZ2F0b3Itd2l6YXJkJykuY2xpY2soKCkgPT4ge1xuICAgICAgICBDb0M3SW52ZXN0aWdhdG9yV2l6YXJkLmNyZWF0ZSgpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChnYW1lLnVzZXIucm9sZSA+PSBDT05TVC5VU0VSX1BFUk1JU1NJT05TLkFDVE9SX0NSRUFURS5kZWZhdWx0Um9sZSkge1xuICAgICAgaHRtbFxuICAgICAgICAuZmluZCgnZm9vdGVyLmRpcmVjdG9yeS1mb290ZXInKVxuICAgICAgICAuYXBwZW5kKFxuICAgICAgICAgICc8YSBjbGFzcz1cImFjdG9yLWltcG9ydFwiPicgK1xuICAgICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkFjdG9ySW1wb3J0ZXInKSArXG4gICAgICAgICAgICAnPC9hPidcbiAgICAgICAgKVxuICAgICAgaHRtbC5maW5kKCcuYWN0b3ItaW1wb3J0JykuY2xpY2soKCkgPT4ge1xuICAgICAgICBDb0M3QWN0b3JJbXBvcnRlckRpYWxvZy5jcmVhdGUoKVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBDaGF0TWVzc2FnZSwgRGlhbG9nLCBmb3VuZHJ5LCBnYW1lLCBSb2xsLCByZW5kZXJUZW1wbGF0ZSwgdWkgKi9cbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMuanMnXG5pbXBvcnQgeyBDb0M3SXRlbSB9IGZyb20gJy4uL2l0ZW0uanMnXG5pbXBvcnQgeyBTYW5DaGVja0NhcmQgfSBmcm9tICcuLi8uLi9jaGF0L2NhcmRzL3Nhbi1jaGVjay5qcydcblxuZXhwb3J0IGNsYXNzIENvQzdTcGVsbCBleHRlbmRzIENvQzdJdGVtIHtcbiAgY29uc3RydWN0b3IgKGRhdGEsIGNvbnRleHQpIHtcbiAgICBpZiAodHlwZW9mIGRhdGEuaW1nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZGF0YS5pbWcgPSAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy9wZW50YWdyYW0tcm9zZS5zdmcnXG4gICAgfVxuICAgIHN1cGVyKGRhdGEsIGNvbnRleHQpXG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dFxuICB9XG5cbiAgYXN5bmMgY2FzdCAoKSB7XG4gICAgaWYgKCF0aGlzLmlzT3duZWQpIHtcbiAgICAgIC8qKiBUaGlzIGlzIG5vdCBvd25lZCBieSBhbnkgQWN0b3IgKi9cbiAgICAgIHJldHVybiB1aS5ub3RpZmljYXRpb25zLmVycm9yKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ob3RPd25lZCcpKVxuICAgIH1cbiAgICBjb25zdCBjb3N0cyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLmNvc3RzKVxuICAgIGNvbnN0IGxvc3NlcyA9IFtdXG4gICAgbGV0IGNvbnZlcnRTdXJwbHVzSW50b0hpdFBvaW50c1xuICAgIGNvc3RzLm1hZ2ljUG9pbnRzID0gQ29DN1V0aWxpdGllcy5pc0Zvcm11bGEoY29zdHMubWFnaWNQb2ludHMpXG4gICAgICA/IChhd2FpdCBuZXcgUm9sbChjb3N0cy5tYWdpY1BvaW50cykucm9sbCh7IGFzeW5jOiB0cnVlIH0pKS50b3RhbFxuICAgICAgOiBwYXJzZUludChjb3N0cy5tYWdpY1BvaW50cylcbiAgICBpZiAoXG4gICAgICBjb3N0cy5tYWdpY1BvaW50cyAmJlxuICAgICAgY29zdHMubWFnaWNQb2ludHMgPiB0aGlzLmFjdG9yLnN5c3RlbS5hdHRyaWJzLm1wLnZhbHVlXG4gICAgKSB7XG4gICAgICBjb252ZXJ0U3VycGx1c0ludG9IaXRQb2ludHMgPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgY29uc3QgY29udmVydGVkSGl0UG9pbnRzID1cbiAgICAgICAgICBjb3N0cy5tYWdpY1BvaW50cyAtIHRoaXMuYWN0b3Iuc3lzdGVtLmF0dHJpYnMubXAudmFsdWVcbiAgICAgICAgY29uc3QgY29udmVydGVkTWFnaWNQb2ludHMgPSBjb3N0cy5tYWdpY1BvaW50cyAtIGNvbnZlcnRlZEhpdFBvaW50c1xuICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgIHRpdGxlOiAnICcsXG4gICAgICAgICAgY29udGVudDogZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Ob3RFbm91Z2hNYWdpY1BvaW50cycsIHtcbiAgICAgICAgICAgIGFjdG9yTWFnaWNQb2ludHM6IHRoaXMuYWN0b3Iuc3lzdGVtLmF0dHJpYnMubXAudmFsdWUsXG4gICAgICAgICAgICBjb252ZXJ0ZWRIaXRQb2ludHMsXG4gICAgICAgICAgICBjb252ZXJ0ZWRNYWdpY1BvaW50cyxcbiAgICAgICAgICAgIG9yaWdpbmFsTWFnaWNQb2ludHM6IGNvc3RzLm1hZ2ljUG9pbnRzLFxuICAgICAgICAgICAgc3BlbGw6IHRoaXMubmFtZVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICAgIGNhbmNlbDoge1xuICAgICAgICAgICAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtdGltZXNcIj48L2k+JyxcbiAgICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5DYW5jZWwnKSxcbiAgICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShmYWxzZSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb2NlZWQ6IHtcbiAgICAgICAgICAgICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLWNoZWNrXCI+PC9pPicsXG4gICAgICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuUHJvY2VlZCcpLFxuICAgICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvc3RzLmhpdFBvaW50cyA9IGNvbnZlcnRlZEhpdFBvaW50c1xuICAgICAgICAgICAgICAgIGNvc3RzLm1hZ2ljUG9pbnRzID0gY29udmVydGVkTWFnaWNQb2ludHNcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh0cnVlKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBkZWZhdWx0OiAnY2FuY2VsJyxcbiAgICAgICAgICBjbGFzc2VzOiBbJ2NvYzcnLCAnZGlhbG9nJ11cbiAgICAgICAgfVxuICAgICAgICBuZXcgRGlhbG9nKGRhdGEpLnJlbmRlcih0cnVlKVxuICAgICAgfSlcbiAgICAgIGlmICghY29udmVydFN1cnBsdXNJbnRvSGl0UG9pbnRzKSByZXR1cm5cbiAgICB9XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoY29zdHMpKSB7XG4gICAgICBpZiAoIXZhbHVlIHx8IE51bWJlcih2YWx1ZSkgPT09IDApIGNvbnRpbnVlXG4gICAgICBsb3NzZXMucHVzaChhd2FpdCB0aGlzLnJlc29sdmVMb3NzZXMoa2V5LCB2YWx1ZSkpXG4gICAgfVxuICAgIGNvbnN0IHRlbXBsYXRlID0gJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvaXRlbXMvc3BlbGwvY2hhdC5odG1sJ1xuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gdGhpcy5zeXN0ZW0uZGVzY3JpcHRpb24udmFsdWVcbiAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUodGVtcGxhdGUsIHsgZGVzY3JpcHRpb24sIGxvc3NlcyB9KVxuICAgIHJldHVybiBhd2FpdCBDaGF0TWVzc2FnZS5jcmVhdGUoe1xuICAgICAgdXNlcjogZ2FtZS51c2VyLmlkLFxuICAgICAgc3BlYWtlcjogQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlcih7IGFjdG9yOiB0aGlzLmFjdG9yIH0pLFxuICAgICAgZmxhdm9yOiB0aGlzLm5hbWUsXG4gICAgICBjb250ZW50OiBodG1sXG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jIHJlc29sdmVMb3NzZXMgKGNoYXJhY3RlcmlzdGljLCB2YWx1ZSkge1xuICAgIGxldCBjaGFyYWN0ZXJpc3RpY05hbWVcbiAgICBsZXQgbG9zc1xuICAgIGlmIChDb0M3VXRpbGl0aWVzLmlzRm9ybXVsYSh2YWx1ZSkpIHtcbiAgICAgIGxvc3MgPSAoYXdhaXQgbmV3IFJvbGwodmFsdWUpLnJvbGwoeyBhc3luYzogdHJ1ZSB9KSkudG90YWxcbiAgICB9IGVsc2Uge1xuICAgICAgbG9zcyA9IHBhcnNlSW50KHZhbHVlKVxuICAgIH1cbiAgICBjb25zdCBhY3RvckRhdGEgPSB0aGlzLmFjdG9yLnN5c3RlbVxuICAgIHN3aXRjaCAoY2hhcmFjdGVyaXN0aWMpIHtcbiAgICAgIGNhc2UgJ2hpdFBvaW50cyc6XG4gICAgICAgIGNoYXJhY3RlcmlzdGljTmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5IaXRQb2ludHMnKVxuICAgICAgICB0aGlzLmFjdG9yLmRlYWxEYW1hZ2UobG9zcywgeyBpZ25vcmVBcm1vcjogdHJ1ZSB9KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc2FuaXR5JzpcbiAgICAgICAgY2hhcmFjdGVyaXN0aWNOYW1lID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlNhbml0eVBvaW50cycpXG4gICAgICAgIHRoaXMuZ3JhbnRTYW5pdHlMb3NzKGxvc3MpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdtYWdpY1BvaW50cyc6XG4gICAgICAgIGNoYXJhY3RlcmlzdGljTmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5NYWdpY1BvaW50cycpXG4gICAgICAgIHRoaXMuYWN0b3Iuc2V0TXAoYWN0b3JEYXRhLmF0dHJpYnMubXAudmFsdWUgLSBsb3NzKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAncG93ZXInOlxuICAgICAgICBjaGFyYWN0ZXJpc3RpY05hbWUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NIQVJBQy5Qb3dlcicpXG4gICAgICAgIHRoaXMuYWN0b3IudXBkYXRlKHtcbiAgICAgICAgICAnc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5wb3cudmFsdWUnOlxuICAgICAgICAgICAgYWN0b3JEYXRhLmNoYXJhY3RlcmlzdGljcy5wb3cudmFsdWUgLSBsb3NzXG4gICAgICAgIH0pXG4gICAgfVxuICAgIHJldHVybiB7IGNoYXJhY3RlcmlzdGljTmFtZSwgbG9zcyB9XG4gIH1cblxuICAvKiogQnlwYXNzIHRoZSBTYW5pdHkgY2hlY2sgYW5kIGp1c3Qgcm9sbCB0aGUgZGFtYWdlICovXG4gIGFzeW5jIGdyYW50U2FuaXR5TG9zcyAodmFsdWUpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IFNhbkNoZWNrQ2FyZC50ZW1wbGF0ZVxuICAgIGxldCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUodGVtcGxhdGUsIHt9KVxuICAgIGNvbnN0IG1lc3NhZ2UgPSBhd2FpdCBDaGF0TWVzc2FnZS5jcmVhdGUoe1xuICAgICAgdXNlcjogZ2FtZS51c2VyLmlkLFxuICAgICAgc3BlYWtlcjogQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlcih7IGFjdG9yOiB0aGlzLmFjdG9yIH0pLFxuICAgICAgZmxhdm9yOiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkNhc3RpbmdTcGVsbCcsIHtcbiAgICAgICAgc3BlbGw6IHRoaXMubmFtZVxuICAgICAgfSksXG4gICAgICBjb250ZW50OiBodG1sXG4gICAgfSlcbiAgICBjb25zdCBjYXJkID0gYXdhaXQgbWVzc2FnZS5nZXRIVE1MKClcbiAgICBpZiAodHlwZW9mIGNhcmQubGVuZ3RoICE9PSAndW5kZWZpbmVkJyAmJiBjYXJkLmxlbmd0aCA9PT0gMSkge1xuICAgICAgY29uc3Qgc2FuaXR5TG9zcyA9IHZhbHVlXG4gICAgICBodG1sID0gY2FyZC5maW5kKCcuY2hhdC1jYXJkJylbMF1cbiAgICAgIGh0bWwuZGF0YXNldC5vYmplY3QgPSBlc2NhcGUoXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBhY3RvcktleTogdGhpcy5hY3Rvci5pZCxcbiAgICAgICAgICBmYXN0Rm9yd2FyZDogZmFsc2UsXG4gICAgICAgICAgc2FuRGF0YToge1xuICAgICAgICAgICAgc2FuTWluOiBzYW5pdHlMb3NzLFxuICAgICAgICAgICAgc2FuTWF4OiBzYW5pdHlMb3NzXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgKVxuICAgICAgY29uc3Qgc2FuaXR5Q2hlY2sgPSBTYW5DaGVja0NhcmQuZ2V0RnJvbUNhcmQoaHRtbClcbiAgICAgIGF3YWl0IHNhbml0eUNoZWNrLmJ5cGFzc1JvbGxTYW4oKVxuICAgICAgYXdhaXQgc2FuaXR5Q2hlY2sucm9sbFNhbkxvc3MoKVxuICAgICAgc2FuaXR5Q2hlY2sudXBkYXRlQ2hhdENhcmQoKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZSAoZGF0YSwgY29udGV4dCkge1xuICAgIGlmIChcbiAgICAgIHR5cGVvZiB0aGlzLmNvbnRleHQucGFyZW50ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgdHlwZW9mIHRoaXMuY29udGV4dC5ib29rSWQgIT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICBsZXQgaXRlbVxuICAgICAgbGV0IGJvb2tcbiAgICAgIC8vIGxldCBzcGVsbERhdGFcbiAgICAgIGlmICh0aGlzLmNvbnRleHQucGFyZW50ID09PSBudWxsKSB7XG4gICAgICAgIGl0ZW0gPSBnYW1lLml0ZW1zLmdldCh0aGlzLmNvbnRleHQuYm9va0lkKVxuICAgICAgICBib29rID0gaXRlbS50b09iamVjdCgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBib29rID0gdGhpcy5jb250ZXh0LnBhcmVudC5pdGVtcy5nZXQodGhpcy5jb250ZXh0LmJvb2tJZCkudG9PYmplY3QoKVxuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDAsIGltID0gYm9vay5zeXN0ZW0uc3BlbGxzLmxlbmd0aDsgaSA8IGltOyBpKyspIHtcbiAgICAgICAgaWYgKGJvb2suc3lzdGVtLnNwZWxsc1tpXS5faWQgPT09IHRoaXMuaWQpIHtcbiAgICAgICAgICBib29rLnN5c3RlbS5zcGVsbHNbaV0gPSBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KGJvb2suc3lzdGVtLnNwZWxsc1tpXSwgZGF0YSlcbiAgICAgICAgICAvLyBzcGVsbERhdGEgPSBib29rLnN5c3RlbS5zcGVsbHNbaV1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuY29udGV4dC5wYXJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgYXdhaXQgaXRlbS51cGRhdGUoe1xuICAgICAgICAgICdzeXN0ZW0uc3BlbGxzJzogYm9vay5zeXN0ZW0uc3BlbGxzXG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMuc2hlZXQub2JqZWN0ID0gbmV3IENvQzdTcGVsbChcbiAgICAgICAgICBib29rLnN5c3RlbS5zcGVsbHMuZmluZChzcGVsbCA9PiBzcGVsbC5faWQgPT09IHRoaXMuaWQpLFxuICAgICAgICAgIHRoaXMuY29udGV4dFxuICAgICAgICApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCB0aGlzLmNvbnRleHQucGFyZW50LnVwZGF0ZUVtYmVkZGVkRG9jdW1lbnRzKCdJdGVtJywgW2Jvb2tdKVxuICAgICAgICB0aGlzLnNoZWV0Lm9iamVjdCA9IG5ldyBDb0M3U3BlbGwoXG4gICAgICAgICAgYm9vay5zeXN0ZW0uc3BlbGxzLmZpbmQoc3BlbGwgPT4gc3BlbGwuX2lkID09PSB0aGlzLmlkKSxcbiAgICAgICAgICB0aGlzLmNvbnRleHRcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgdGhpcy5zaGVldC5yZW5kZXIodHJ1ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgc3VwZXIudXBkYXRlKGRhdGEsIGNvbnRleHQpXG4gICAgfVxuICB9XG59XG4iLCIvKiBnbG9iYWwgQ2hhdE1lc3NhZ2UsIGZvdW5kcnksIGdhbWUsIHJlbmRlclRlbXBsYXRlLCBSb2xsLCB1aSAqL1xuaW1wb3J0IHsgU2FuQ2hlY2tDYXJkIH0gZnJvbSAnLi4vLi4vY2hhdC9jYXJkcy9zYW4tY2hlY2suanMnXG5pbXBvcnQgeyBDb0M3Q2hlY2sgfSBmcm9tICcuLi8uLi9jaGVjay5qcydcbmltcG9ydCB7IENvQzdJdGVtIH0gZnJvbSAnLi4vaXRlbS5qcydcbmltcG9ydCB7IENvQzdTcGVsbCB9IGZyb20gJy4uL3NwZWxsL2RhdGEuanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3Qm9vayBleHRlbmRzIENvQzdJdGVtIHtcbiAgY29uc3RydWN0b3IgKGRhdGEsIGNvbnRleHQpIHtcbiAgICBpZiAodHlwZW9mIGRhdGEuaW1nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZGF0YS5pbWcgPSAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy9zZWNyZXQtYm9vay5zdmcnXG4gICAgfVxuICAgIHN1cGVyKGRhdGEsIGNvbnRleHQpXG4gIH1cblxuICAvKiogQ29udmVydCB0aGUgZGlmZmljdWx0eSBvbiB0aGUgc2VsZWN0IGVsZW1lbnQgdG8gYSBmb3JtYXQgYWNjZXB0ZWQgKi9cbiAgc3RhdGljIGNvbnZlcnREaWZmaWN1bHR5IChkaWZmaWN1bHR5KSB7XG4gICAgc3dpdGNoIChkaWZmaWN1bHR5KSB7XG4gICAgICBjYXNlICdoYXJkJzpcbiAgICAgICAgcmV0dXJuIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuaGFyZFxuICAgICAgY2FzZSAnZXh0cmVtZSc6XG4gICAgICAgIHJldHVybiBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmV4dHJlbWVcbiAgICAgIGNhc2UgJ2NyaXRpY2FsJzpcbiAgICAgICAgcmV0dXJuIENvQzdDaGVjay5kaWZmaWN1bHR5TGV2ZWwuY3JpdGljYWxcbiAgICAgIGNhc2UgJ3VucmVhZGFibGUnOlxuICAgICAgICByZXR1cm4gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5pbXBvc3NpYmxlXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gQ29DN0NoZWNrLmRpZmZpY3VsdHlMZXZlbC5yZWd1bGFyXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZvciB0aGUgZnV0dXJlOiBhZGQgYWR2YW5jZWQgcnVsZXMgZm9yIGxlYXJuaW5nIHNwZWxscywgcGcuIDE3NlxuICAgKiBAcGFyYW0gW3tEb2N1bWVudH1dIHNwZWxsc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxEb2N1bWVudD59IHVwZGF0ZSB0byBJdGVtIGRvY3VtZW50XG4gICAqL1xuICBhc3luYyBhZGRTcGVsbHMgKHNwZWxscykge1xuICAgIGNvbnN0IGNvbGxlY3Rpb24gPSB0aGlzLnN5c3RlbS5zcGVsbHNcbiAgICAgID8gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5zeXN0ZW0uc3BlbGxzKVxuICAgICAgOiBbXVxuICAgIGZvciAoY29uc3Qgc3BlbGwgb2Ygc3BlbGxzKSB7XG4gICAgICBjb2xsZWN0aW9uLnB1c2goc3BlbGwpXG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uc3BlbGxzJzogY29sbGVjdGlvbiB9KVxuICB9XG5cbiAgYXN5bmMgc3BlbGxEZXRhaWwgKGluZGV4KSB7XG4gICAgY29uc3QgaXNLZWVwZXIgPSBnYW1lLnVzZXIuaXNHTVxuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnN5c3RlbS5zcGVsbHNbaW5kZXhdXG4gICAgY29uc3QgcGFyZW50ID0gdGhpcy5hY3RvciA/IHRoaXMuYWN0b3IgOiBudWxsXG4gICAgY29uc3Qgc3BlbGwgPSBuZXcgQ29DN1NwZWxsKGRhdGEsIHsgcGFyZW50LCBib29rSWQ6IHRoaXMuaWQgfSlcbiAgICBpZiAoaXNLZWVwZXIgfHwgc3BlbGwuc3lzdGVtLmxlYXJuZWQpIHtcbiAgICAgIHJldHVybiBhd2FpdCBzcGVsbC5zaGVldC5yZW5kZXIodHJ1ZSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBhbGwgdGhlIGxvZ2ljIGludm9sdmluZyB0aGUgYXR0ZW1wdCBvZiBpbml0aWFsIHJlYWRpbmdcbiAgICogQHJldHVybnMge1Byb21pc2V9IEBzZWUgbGlzdGVuIEBzZWUgZ3JhbnRJbml0aWFsUmVhZGluZ1xuICAgKi9cbiAgYXN5bmMgYXR0ZW1wdEluaXRpYWxSZWFkaW5nICgpIHtcbiAgICAvKiogQ29udmVydHMgdGhlIGRpZmZpY3VsdHkgdmFsdWUgdG8gc29tZXRoaW5nIGFjY2VwdGVkIGJ5IENvQzdDaGVjayAqL1xuICAgIGNvbnN0IGRpZmZpY3VsdHkgPSBDb0M3Qm9vay5jb252ZXJ0RGlmZmljdWx0eShcbiAgICAgIHRoaXMuc3lzdGVtLmRpZmZpY3VsdHlMZXZlbFxuICAgIClcbiAgICBjb25zdCBsYW5ndWFnZSA9IHRoaXMuc3lzdGVtLmxhbmd1YWdlXG4gICAgY29uc3Qgc2tpbGwgPSB0aGlzLmFjdG9yPy5nZXRTa2lsbHNCeU5hbWUobGFuZ3VhZ2UpXG4gICAgaWYgKCFza2lsbCkge1xuICAgICAgLyoqIFRoaXMgaXMgbm90IG93bmVkIGJ5IGFueSBBY3RvciAqL1xuICAgICAgcmV0dXJuIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk5vdE93bmVkJykpXG4gICAgfSBlbHNlIGlmIChza2lsbC5sZW5ndGggPT09IDApIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIEFjdG9yIHdobyBvd25zIHRoaXMgZG9lcyBub3QgaGF2ZSB0aGUgc2tpbGwgb2ZcbiAgICAgICAqIHRoZSBsYW5ndWFnZSBpbiB3aGljaCBpdCB3YXMgd3JpdHRlblxuICAgICAgICovXG4gICAgICByZXR1cm4gdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Vbmtub3duTGFuZ3VhZ2UnLCB7IGFjdG9yOiB0aGlzLmFjdG9yLm5hbWUgfSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY2hlY2sgPSBuZXcgQ29DN0NoZWNrKClcbiAgICAgIGNoZWNrLmFjdG9yID0gdGhpcy5hY3RvclxuICAgICAgY2hlY2suc2tpbGwgPSBza2lsbFswXS5pZFxuICAgICAgY2hlY2suZGlmZmljdWx0eSA9IGRpZmZpY3VsdHlcbiAgICAgIGNoZWNrLnBhcmVudCA9IHRoaXMudXVpZFxuICAgICAgY2hlY2suY29udGV4dCA9ICdJTklUSUFMX1JFQURJTkcnXG4gICAgICBjaGVjay5mbGF2b3IgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlJlYWRBdHRlbXB0Jywge1xuICAgICAgICBib29rOiB0aGlzLm5hbWUsXG4gICAgICAgIGxhbmd1YWdlLFxuICAgICAgICBkaWZmaWN1bHR5OiB0aGlzLnN5c3RlbS5kaWZmaWN1bHR5TGV2ZWxcbiAgICAgIH0pXG4gICAgICBhd2FpdCBjaGVjay5yb2xsKClcbiAgICAgIHJldHVybiBhd2FpdCBjaGVjay50b01lc3NhZ2UoKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJdHMgaXMgY2FsbGVkIGV2ZXJ5IHRpbWUgdGhlIHVzZXIgaW50ZXJhY3RzIGluIHNvbWUgd2F5IHdpdGggcHJvZ3Jlc3MgYmFyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlICdyZXNldCcgfHwgJ2luY3JlYXNlJyB8fCAnZGVjcmVhc2UnXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBqdXN0IHNvIHRoYXQgcHJvZ3Jlc3MgaXMgbm90IGdyZWF0ZXIgdGhhbiBuZWNlc3NhcnlcbiAgICogQHJldHVybnMge1Byb21pc2U8RG9jdW1lbnQ+fSB1cGRhdGUgdG8gSXRlbSBkb2N1bWVudFxuICAgKi9cbiAgYXN5bmMgY2hhbmdlUHJvZ3Jlc3MgKG1vZGUsIHZhbHVlKSB7XG4gICAgaWYgKCF0aGlzLmlzT3duZWQgJiYgbW9kZSAhPT0gJ3Jlc2V0Jykge1xuICAgICAgLyoqIFRoaXMgaXMgbm90IG93bmVkIGJ5IGFueSBBY3RvciAqL1xuICAgICAgcmV0dXJuIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk5vdE93bmVkJykpXG4gICAgfVxuICAgIGlmICghdGhpcy5zeXN0ZW0uaW5pdGlhbFJlYWRpbmcgJiYgbW9kZSAhPT0gJ3Jlc2V0Jykge1xuICAgICAgLyoqIEFjdG9yIGRpZCBub3QgcGVyZm9ybWVkIGFuIGluaXRpYWwgcmVhZGluZyBmaXJzdCAqL1xuICAgICAgcmV0dXJuIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuSW5pdGlhbFJlYWRpbmdOZWVkZWQnLCB7XG4gICAgICAgICAgYWN0b3I6IHRoaXMuYWN0b3IubmFtZSxcbiAgICAgICAgICBib29rOiB0aGlzLm5hbWVcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICB9XG4gICAgaWYgKCF0aGlzLnN5c3RlbS50eXBlLm15dGhvcyAmJiBtb2RlICE9PSAncmVzZXQnKSB7XG4gICAgICByZXR1cm4gdWkubm90aWZpY2F0aW9ucy5lcnJvcihnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTm90TXl0aG9zVG9tZScpKVxuICAgIH1cbiAgICBjb25zdCBuZWNlc3NhcnkgPSB0aGlzLnN5c3RlbS5zdHVkeS5uZWNlc3NhcnlcbiAgICBsZXQgZnVsbFN0dWR5ID0gdGhpcy5zeXN0ZW0uZnVsbFN0dWR5XG4gICAgbGV0IHByb2dyZXNzID0gdGhpcy5zeXN0ZW0uc3R1ZHkucHJvZ3Jlc3NcbiAgICBpZiAoaXNOYU4ocHJvZ3Jlc3MpKSB7XG4gICAgICAvKiogSXQgc2VlbXMgYSBsaXR0bGUgaW1wb3NzaWJsZSwgYnV0IHlvdSBuZXZlciBrbm93ICovXG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy51cGRhdGUoe1xuICAgICAgICAnc3lzdGVtLnN0dWR5LnByb2dyZXNzJzogMFxuICAgICAgfSlcbiAgICB9XG4gICAgaWYgKHZhbHVlICYmIHByb2dyZXNzID4gdmFsdWUpIHtcbiAgICAgIC8qKlxuICAgICAgICogUHJvZ3Jlc3MgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIHZhbHVlIGVudGVyZWQgYnkgdXNlciBhcyBuZWNlc3NhcnksXG4gICAgICAgKiByZXNldCBwcm9ncmVzcyB0byBiZSBlcXVhbCBuZWNlc3NhcnkgYW5kIGNvbXBsZXRlIGZ1bGwgc3R1ZHlcbiAgICAgICAqL1xuICAgICAgYXdhaXQgdGhpcy51cGRhdGUoe1xuICAgICAgICAnc3lzdGVtLmZ1bGxTdHVkeSc6ICsrZnVsbFN0dWR5LFxuICAgICAgICAnc3lzdGVtLnN0dWR5LnByb2dyZXNzJzogdmFsdWVcbiAgICAgIH0pXG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb21wbGV0ZUZ1bGxTdHVkeSgpXG4gICAgfVxuICAgIGlmIChtb2RlID09PSAnaW5jcmVhc2UnICYmIHByb2dyZXNzIDwgbmVjZXNzYXJ5KSB7XG4gICAgICAvKiogVXNlciBjbGlja2VkIG9uIHBsdXMgaWNvbiB0byBpbmNyZWFzZSBwcm9ncmVzcyAqL1xuICAgICAgaWYgKChhd2FpdCB0aGlzLmNoZWNrRXhoYXVzdGlvbigpKSAhPT0gZmFsc2UpIHJldHVyblxuICAgICAgYXdhaXQgdGhpcy51cGRhdGUoe1xuICAgICAgICAnc3lzdGVtLnN0dWR5LnByb2dyZXNzJzogKytwcm9ncmVzc1xuICAgICAgfSlcbiAgICAgIGlmIChwcm9ncmVzcyA9PT0gbmVjZXNzYXJ5KSB7XG4gICAgICAgIC8qKiBDb21wbGV0ZSBmdWxsIHN0dWR5IGlmIHByb2dyZXNzIGlzIGVxdWFsIG5lY2Vzc2FyeSAqL1xuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uZnVsbFN0dWR5JzogKytmdWxsU3R1ZHkgfSlcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ3JhbnRGdWxsU3R1ZHkoKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2RlY3JlYXNlJyAmJiBwcm9ncmVzcyA+IDApIHtcbiAgICAgIC8qKiBVc2VyIGNsaWNrZWQgb24gbWludXMgaWNvbiB0byBkZWNyZWFzZSBwcm9ncmVzcyAqL1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudXBkYXRlKHtcbiAgICAgICAgJ3N5c3RlbS5zdHVkeS5wcm9ncmVzcyc6IC0tcHJvZ3Jlc3NcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgY2hlY2tFeGhhdXN0aW9uICgpIHtcbiAgICBjb25zdCBhY3Rvck15dGhvc1ZhbHVlID0gdGhpcy5hY3Rvcj8uY3RodWxodU15dGhvc1xuICAgIGNvbnN0IG15dGhvc1JhdGluZyA9IHRoaXMuc3lzdGVtLm15dGhvc1JhdGluZ1xuICAgIGlmICh0aGlzLnN5c3RlbS5pbml0aWFsUmVhZGluZykge1xuICAgICAgaWYgKGFjdG9yTXl0aG9zVmFsdWUgPj0gbXl0aG9zUmF0aW5nKSB7XG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlKHtcbiAgICAgICAgICAnc3lzdGVtLnN0dWR5LnByb2dyZXNzJzogdGhpcy5zeXN0ZW0uc3R1ZHkubmVjZXNzYXJ5XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiB1aS5ub3RpZmljYXRpb25zLndhcm4oXG4gICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Cb29rSGFzTm90aGluZ01vcmVUb1RlYWNoJywge1xuICAgICAgICAgICAgYWN0b3I6IHRoaXMuYWN0b3IubmFtZSxcbiAgICAgICAgICAgIGJvb2s6IHRoaXMubmFtZVxuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgIH0gZWxzZSByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICBhc3luYyBncmFudEZ1bGxTdHVkeSAoKSB7XG4gICAgaWYgKCF0aGlzLnN5c3RlbS50eXBlLm15dGhvcykgcmV0dXJuXG4gICAgaWYgKChhd2FpdCB0aGlzLmNoZWNrRXhoYXVzdGlvbigpKSAhPT0gZmFsc2UpIHJldHVyblxuICAgIGNvbnN0IGFjdG9yTXl0aG9zVmFsdWUgPSB0aGlzLmFjdG9yLmN0aHVsaHVNeXRob3NcbiAgICBjb25zdCBkZXZlbG9wbWVudHMgPSBbXVxuICAgIGNvbnN0IG15dGhvc1JhdGluZyA9IHRoaXMuc3lzdGVtLm15dGhvc1JhdGluZ1xuICAgIGxldCBteXRob3NGaW5hbCA9IHRoaXMuc3lzdGVtLmdhaW5zLmN0aHVsaHVNeXRob3MuZmluYWxcbiAgICBpZiAoYWN0b3JNeXRob3NWYWx1ZSArIG15dGhvc0ZpbmFsID4gbXl0aG9zUmF0aW5nKSB7XG4gICAgICBmb3IgKGxldCBpbmRleCA9IDE7IGluZGV4IDw9IG15dGhvc0ZpbmFsOyBpbmRleCsrKSB7XG4gICAgICAgIGlmIChhY3Rvck15dGhvc1ZhbHVlICsgbXl0aG9zRmluYWwgLSBpbmRleCA8PSBteXRob3NSYXRpbmcpIHtcbiAgICAgICAgICBteXRob3NGaW5hbCAtPSBpbmRleFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSByZWFkZXIgYXV0b21hdGljYWxseSBnYWlucyBhIHNraWxsIHRpY2sgZm9yIHRoZVxuICAgICAqIGxhbmd1YWdlIGluIHdoaWNoIHRoZSBib29rIGlzIHdyaXR0ZW5cbiAgICAgKi9cbiAgICBkZXZlbG9wbWVudHMucHVzaChcbiAgICAgIHtcbiAgICAgICAgbmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNvQ0lERmxhZy5rZXlzLmkuc2tpbGwuY3RodWxodS1teXRob3MnKSxcbiAgICAgICAgZ2FpbjogcGFyc2VJbnQobXl0aG9zRmluYWwpXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiB0aGlzLnN5c3RlbS5sYW5ndWFnZSxcbiAgICAgICAgZ2FpbjogJ2RldmVsb3BtZW50J1xuICAgICAgfVxuICAgIClcbiAgICBhd2FpdCB0aGlzLmdyYW50U2tpbGxEZXZlbG9wbWVudChkZXZlbG9wbWVudHMpXG4gICAgYXdhaXQgdGhpcy5yb2xsU2FuaXR5TG9zcygpXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudXBkYXRlKHtcbiAgICAgICdzeXN0ZW0uZnVsbFN0dWRpZXMnOiArK3RoaXMuc3lzdGVtLmZ1bGxTdHVkaWVzXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxEb2N1bWVudD59IHVwZGF0ZSB0byBJdGVtIGRvY3VtZW50XG4gICAqL1xuICBhc3luYyBncmFudEluaXRpYWxSZWFkaW5nICgpIHtcbiAgICAvKiogSWYgaW5pdGlhbCByZWFkaW5nIGhhcyBhbHJlYWR5IGJlZW4gZG9uZSB0aGVyZSBpcyBub3RoaW5nIHRvIGRvIGhlcmUgKi9cbiAgICBpZiAodGhpcy5zeXN0ZW0uaW5pdGlhbFJlYWRpbmcpIHJldHVyblxuICAgIGNvbnN0IGRldmVsb3BtZW50cyA9IFtdXG4gICAgY29uc3QgbXl0aG9zID0ge1xuICAgICAgZ2FpbnM6IHRoaXMuc3lzdGVtLmdhaW5zLmN0aHVsaHVNeXRob3MuaW5pdGlhbCxcbiAgICAgIHR5cGU6IHRoaXMuc3lzdGVtLnR5cGUubXl0aG9zXG4gICAgfVxuICAgIGNvbnN0IG9jY3VsdCA9IHtcbiAgICAgIGdhaW5zOiB0aGlzLnN5c3RlbS5nYWlucy5vY2N1bHQsXG4gICAgICB0eXBlOiB0aGlzLnN5c3RlbS50eXBlLm9jY3VsdFxuICAgIH1cbiAgICBjb25zdCBvdGhlciA9IHtcbiAgICAgIGdhaW5zOiB0aGlzLnN5c3RlbS5nYWlucy5vdGhlcnMsXG4gICAgICB0eXBlOiB0aGlzLnN5c3RlbS50eXBlLm90aGVyXG4gICAgfVxuICAgIGlmIChteXRob3MudHlwZSAmJiBteXRob3MuZ2FpbnMpIHtcbiAgICAgIGRldmVsb3BtZW50cy5wdXNoKHtcbiAgICAgICAgbmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNvQ0lERmxhZy5rZXlzLmkuc2tpbGwuY3RodWxodS1teXRob3MnKSxcbiAgICAgICAgZ2FpbjogcGFyc2VJbnQobXl0aG9zLmdhaW5zKVxuICAgICAgfSlcbiAgICB9XG4gICAgaWYgKG9jY3VsdC50eXBlICYmIG9jY3VsdC5nYWlucykge1xuICAgICAgZGV2ZWxvcG1lbnRzLnB1c2goe1xuICAgICAgICBuYW1lOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuT2NjdWx0JyksXG4gICAgICAgIGdhaW46IHBhcnNlSW50KG9jY3VsdC5nYWlucylcbiAgICAgIH0pXG4gICAgfVxuICAgIGlmIChvdGhlci50eXBlKSB7XG4gICAgICBmb3IgKGNvbnN0IHNraWxsIG9mIG90aGVyLmdhaW5zKSB7XG4gICAgICAgIGNvbnN0IHBhdHRlcm4gPSBza2lsbC5uYW1lLm1hdGNoKC9eKC4rKSBcXCgoLispXFwpJC8pXG4gICAgICAgIC8qKiBTYW5pdGl6YXRpb24gdG8gZGVhbCB3aXRoIHNwZWNpYWxpemF0aW9ucyAqL1xuICAgICAgICBpZiAocGF0dGVybikge1xuICAgICAgICAgIHNraWxsLnNwZWNpYWxpemF0aW9uID0gcGF0dGVyblsxXVxuICAgICAgICAgIHNraWxsLm5hbWUgPSBwYXR0ZXJuWzJdXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNraWxsLnZhbHVlICE9PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICAgICAgc2tpbGwudmFsdWUgPSAoXG4gICAgICAgICAgICBhd2FpdCBuZXcgUm9sbChza2lsbC52YWx1ZSkucm9sbCh7IGFzeW5jOiB0cnVlIH0pXG4gICAgICAgICAgKS50b3RhbFxuICAgICAgICB9XG4gICAgICAgIGlmIChza2lsbC52YWx1ZSkge1xuICAgICAgICAgIGRldmVsb3BtZW50cy5wdXNoKHtcbiAgICAgICAgICAgIG5hbWU6IHNraWxsLm5hbWUsXG4gICAgICAgICAgICBnYWluOiBza2lsbC52YWx1ZSxcbiAgICAgICAgICAgIHNwZWNpYWxpemF0aW9uOiBza2lsbC5zcGVjaWFsaXphdGlvblxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgYXdhaXQgdGhpcy5ncmFudFNraWxsRGV2ZWxvcG1lbnQoZGV2ZWxvcG1lbnRzKVxuICAgIGlmICgobXl0aG9zLnR5cGUgfHwgb2NjdWx0LnR5cGUpICYmIHRoaXMuc3lzdGVtLnNhbml0eUxvc3MpIHtcbiAgICAgIGF3YWl0IHRoaXMucm9sbFNhbml0eUxvc3MoKVxuICAgIH1cbiAgICAvKiogTWFyayBpbml0aWFsIHJlYWRpbmcgYXMgY29tcGxldGUgKi9cbiAgICByZXR1cm4gYXdhaXQgdGhpcy51cGRhdGUoeyAnc3lzdGVtLmluaXRpYWxSZWFkaW5nJzogdHJ1ZSB9KVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7SXRlbX0gc3BlbGxsZWFybmVkIFRoZSBzcGVsbCB0aGF0IHdhcyBsZWFybmVkIHN1Y2Nlc3NmdWxseSBmcm9tIGJvb2tcbiAgICogQHJldHVybnNcbiAgICovXG4gIGFzeW5jIGdyYW50U3BlbGxMZWFybmluZyAoc3BlbGxsZWFybmVkKSB7XG4gICAgZm9yIChjb25zdCBzcGVsbCBvZiB0aGlzLnN5c3RlbS5zcGVsbHMpIHtcbiAgICAgIGlmIChzcGVsbC5faWQgPT09IHNwZWxsbGVhcm5lZC5faWQpIHtcbiAgICAgICAgc3BlbGwuc3lzdGVtLmxlYXJuZWQgPSB0cnVlXG4gICAgICAgIC8vIERvZXMgdGhlIGFjdG9yIGFscmVhZHkgaGFzIGEgc3BlbGwgb2YgdGhhdCBuYW1lPyBUaGVuIGRvIG5vdCBhZGQgdGhlIHNwZWxsXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nU3BlbGwgPSBhd2FpdCB0aGlzLmFjdG9yLml0ZW1zLmZpbmQoXG4gICAgICAgICAgaXRlbSA9PlxuICAgICAgICAgICAgaXRlbS50eXBlID09PSAnc3BlbGwnICYmIGl0ZW0ubmFtZSA9PT0gc3BlbGxsZWFybmVkLm5hbWVcbiAgICAgICAgKVxuICAgICAgICBpZiAoIWV4aXN0aW5nU3BlbGwpIHtcbiAgICAgICAgICBzcGVsbGxlYXJuZWQuc3lzdGVtLmxlYXJuZWQgPSB0cnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdWkubm90aWZpY2F0aW9ucy53YXJuKFxuICAgICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5TcGVsbEFscmVhZHlMZWFybmVkJywge1xuICAgICAgICAgICAgICBzcGVsbDogc3BlbGxsZWFybmVkLm5hbWUsXG4gICAgICAgICAgICAgIGJvb2s6IHRoaXMubmFtZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gU2F2ZSBzcGVsbCBsaXN0IG9mIGJvb2tcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0uc3BlbGxzJzogdGhpcy5zeXN0ZW0uc3BlbGxzIH0pXG4gICAgLy8gQWRkIGxlYXJuZWQgc3BlbGwgdG8gYWN0b3JcbiAgICBpZiAoc3BlbGxsZWFybmVkLnN5c3RlbS5sZWFybmVkKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLmluZm8oXG4gICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuU3BlbGxTdWNjZXNzZnVsbHlMZWFybmVkJywge1xuICAgICAgICAgIHNwZWxsOiBzcGVsbGxlYXJuZWQubmFtZSxcbiAgICAgICAgICBib29rOiB0aGlzLm5hbWVcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICAgIGF3YWl0IHRoaXMuYWN0b3IuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBbXG4gICAgICAgIGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHNwZWxsbGVhcm5lZClcbiAgICAgIF0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlY2VpdmVzIGFuIEFycmF5IG9mIHNraWxscyBhbmQgaGFuZGxlcyBhbGwgdGhlIGxvZ2ljIHRvIGRldmVsb3AgdGhlbVxuICAgKiBAcGFyYW0ge0FycmF5fSBkZXZlbG9wbWVudHMgQHNlZSBncmFudEluaXRpYWxSZWFkaW5nXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPERvY3VtZW50Pn0gdXBkYXRlIHRvIEl0ZW0gZG9jdW1lbnRcbiAgICovXG4gIGFzeW5jIGdyYW50U2tpbGxEZXZlbG9wbWVudCAoZGV2ZWxvcG1lbnRzKSB7XG4gICAgaWYgKGRldmVsb3BtZW50cy5sZW5ndGggPT09IDApIHJldHVyblxuICAgIGZvciAoY29uc3QgZGV2ZWxvcG1lbnQgb2YgZGV2ZWxvcG1lbnRzKSB7XG4gICAgICAvKiogVGVzdCBpZiB0aGUgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIHplcm8gKi9cbiAgICAgIGlmICghZGV2ZWxvcG1lbnQuZ2FpbikgY29udGludWVcbiAgICAgIGxldCBza2lsbCA9IGF3YWl0IHRoaXMuYWN0b3IuZ2V0U2tpbGxzQnlOYW1lKGRldmVsb3BtZW50Lm5hbWUpXG4gICAgICAvKiogVGhlIEFjdG9yIGRvZXMgbm90IG93biB0aGlzIHNraWxsLCBjcmVhdGUgYSBuZXcgb25lXG4gICAgICAgKiBGaXJzdCwgY2hlY2sgaWYgdGhlcmUgaXMgYW55IHNraWxsIGluIHRoZSBnYW1lIHdpdGggdGhlIHNhbWUgbmFtZVxuICAgICAgICogSW4gdGhlIGxhc3QgYWx0ZXJuYXRpdmUganVzdCBjcmVhdGUgYSBuZXcgZ2VuZXJpYyBza2lsbFxuICAgICAgICovXG4gICAgICBpZiAoc2tpbGwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nU2tpbGwgPSBhd2FpdCBnYW1lLml0ZW1zLmZpbmQoXG4gICAgICAgICAgaXRlbSA9PlxuICAgICAgICAgICAgaXRlbS50eXBlID09PSAnc2tpbGwnICYmIGl0ZW0ubmFtZSA9PT0gZGV2ZWxvcG1lbnQubmFtZVxuICAgICAgICApXG4gICAgICAgIGlmIChleGlzdGluZ1NraWxsKSB7XG4gICAgICAgICAgc2tpbGwgPSBhd2FpdCB0aGlzLmFjdG9yLmNyZWF0ZUVtYmVkZGVkRG9jdW1lbnRzKCdJdGVtJywgW1xuICAgICAgICAgICAgZm91bmRyeS51dGlscy5kdXBsaWNhdGUoZXhpc3RpbmdTa2lsbClcbiAgICAgICAgICBdKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNraWxsID0gYXdhaXQgdGhpcy5hY3Rvci5jcmVhdGVTa2lsbChkZXZlbG9wbWVudC5uYW1lLCAwKVxuICAgICAgICAgIGlmIChkZXZlbG9wbWVudC5zcGVjaWFsaXphdGlvbikge1xuICAgICAgICAgICAgYXdhaXQgc2tpbGxbMF0udXBkYXRlKHtcbiAgICAgICAgICAgICAgJ3N5c3RlbS5wcm9wZXJ0aWVzLnNwZWNpYWwnOiB0cnVlLFxuICAgICAgICAgICAgICAnc3lzdGVtLnNwZWNpYWxpemF0aW9uJzogZGV2ZWxvcG1lbnQuc3BlY2lhbGl6YXRpb25cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBza2lsbCA9IHNraWxsWzBdXG4gICAgICBpZiAoZGV2ZWxvcG1lbnQuZ2FpbiA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICAvKiogU2ltcGx5IG1hcmsgdGhlIHNraWxsIGZvciBkZXZlbG9wbWVudCAqL1xuICAgICAgICBhd2FpdCBza2lsbC5mbGFnRm9yRGV2ZWxvcGVtZW50KClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGUgcmVjZWl2ZWQgdmFsdWUgZ2FpbmVkIGlzIG51bWVyaWMsIGVuc3VyZSB0aGF0IHRoZSBhbW91bnRcbiAgICAgICAgICogd2lsbCBub3QgZXhjZWVkIHRoZSBtYXhpbXVtIHZhbHVlIG9mIDk5XG4gICAgICAgICAqL1xuICAgICAgICBpZiAoc2tpbGwudmFsdWUgKyBkZXZlbG9wbWVudC5nYWluID4gOTkpIHtcbiAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDE7IGluZGV4IDw9IGRldmVsb3BtZW50LmdhaW47IGluZGV4KyspIHtcbiAgICAgICAgICAgIGlmIChza2lsbC52YWx1ZSArIGRldmVsb3BtZW50LmdhaW4gLSBpbmRleCA8PSA5OSkge1xuICAgICAgICAgICAgICBkZXZlbG9wbWVudC5nYWluIC09IGluZGV4XG4gICAgICAgICAgICAgIGF3YWl0IHNraWxsLmluY3JlYXNlRXhwZXJpZW5jZShkZXZlbG9wbWVudC5nYWluKVxuICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBza2lsbC5pbmNyZWFzZUV4cGVyaWVuY2UoZGV2ZWxvcG1lbnQuZ2FpbilcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc2hvd0RldmVsb3BtZW50c1RhYmxlKGRldmVsb3BtZW50cylcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzZXF1ZW50IHBlcmlvZHMgb2YgZnVsbCBzdHVkeSBtYXkgYmUgdW5kZXJ0YWtlbiwgdGhlIGRpZmZlcmVuY2UgYmVpbmdcbiAgICogdGhhdCBlYWNoIHN0dWR5IHdpbGwgdGFrZSB0d2ljZSBhcyBsb25nIGFzIHRoZSBwcmV2aW91cyBvbmVcbiAgICogQHJldHVybnMge1Byb21pc2UuPERvY3VtZW50Pn0gdXBkYXRlIHRvIEl0ZW0gZG9jdW1lbnRcbiAgICovXG4gIGFzeW5jIHJlZG9GdWxsU3R1ZHkgKCkge1xuICAgIGF3YWl0IHRoaXMudXBkYXRlKHsgJ3N5c3RlbS5zdHVkeS5wcm9ncmVzcyc6IDAgfSlcbiAgICByZXR1cm4gYXdhaXQgdGhpcy51cGRhdGUoe1xuICAgICAgJ3N5c3RlbS5zdHVkeS5uZWNlc3NhcnknOiB0aGlzLnN5c3RlbS5zdHVkeS5uZWNlc3NhcnkgKiAyXG4gICAgfSlcbiAgfVxuXG4gIC8qKiBCeXBhc3MgdGhlIFNhbml0eSBjaGVjayBhbmQganVzdCByb2xsIHRoZSBkYW1hZ2UgKi9cbiAgYXN5bmMgcm9sbFNhbml0eUxvc3MgKCkge1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5zeXN0ZW0uc2FuaXR5TG9zc1xuICAgIGlmICghdmFsdWUgfHwgdmFsdWUgPT09ICcnKSByZXR1cm5cbiAgICBjb25zdCB0ZW1wbGF0ZSA9IFNhbkNoZWNrQ2FyZC50ZW1wbGF0ZVxuICAgIGxldCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUodGVtcGxhdGUsIHt9KVxuICAgIGNvbnN0IG1lc3NhZ2UgPSBhd2FpdCBDaGF0TWVzc2FnZS5jcmVhdGUoe1xuICAgICAgdXNlcjogZ2FtZS51c2VyLmlkLFxuICAgICAgc3BlYWtlcjogQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlcih7IGFjdG9yOiB0aGlzLmFjdG9yIH0pLFxuICAgICAgZmxhdm9yOiBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlJlYWRpbmdNeXRob3NUb21lJywge1xuICAgICAgICBib29rOiB0aGlzLm5hbWVcbiAgICAgIH0pLFxuICAgICAgY29udGVudDogaHRtbFxuICAgIH0pXG4gICAgY29uc3QgY2FyZCA9IGF3YWl0IG1lc3NhZ2UuZ2V0SFRNTCgpXG4gICAgaWYgKHR5cGVvZiBjYXJkLmxlbmd0aCAhPT0gJ3VuZGVmaW5lZCcgJiYgY2FyZC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IHNhbml0eUxvc3MgPSAoYXdhaXQgbmV3IFJvbGwodmFsdWUpLnJvbGwoeyBhc3luYzogdHJ1ZSB9KSkudG90YWxcbiAgICAgIGh0bWwgPSBjYXJkLmZpbmQoJy5jaGF0LWNhcmQnKVswXVxuICAgICAgaHRtbC5kYXRhc2V0Lm9iamVjdCA9IGVzY2FwZShcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIGFjdG9yS2V5OiB0aGlzLmFjdG9yLmlkLFxuICAgICAgICAgIGZhc3RGb3J3YXJkOiBmYWxzZSxcbiAgICAgICAgICBzYW5EYXRhOiB7XG4gICAgICAgICAgICBzYW5NaW46IHNhbml0eUxvc3MsXG4gICAgICAgICAgICBzYW5NYXg6IHNhbml0eUxvc3NcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICApXG4gICAgICBjb25zdCBzYW5pdHlDaGVjayA9IFNhbkNoZWNrQ2FyZC5nZXRGcm9tQ2FyZChodG1sKVxuICAgICAgYXdhaXQgc2FuaXR5Q2hlY2suYnlwYXNzUm9sbFNhbigpXG4gICAgICBhd2FpdCBzYW5pdHlDaGVjay5yb2xsU2FuTG9zcygpXG4gICAgICBzYW5pdHlDaGVjay51cGRhdGVDaGF0Q2FyZCgpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNob3cgYSB0YWJsZSBpbiB0aGUgY2hhdCB3aXRoIGFsbCBza2lsbCBkZXZlbG9wbWVudHMgb2J0YWluZWRcbiAgICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSBkZXZlbG9wbWVudHNcbiAgICogQHJldHVybnMge1Byb21pc2U8RG9jdW1lbnQ+fSBjcmVhdGUgQ2hhdE1lc3NhZ2VcbiAgICovXG4gIGFzeW5jIHNob3dEZXZlbG9wbWVudHNUYWJsZSAoZGV2ZWxvcG1lbnRzKSB7XG4gICAgLyoqIFByZXBhcmUgdGhlIEFycmF5IGRhdGEgdG8gYmUgc2hvd24gdG8gdGhlIGVuZCB1c2VyIGluIGNoYXQgKi9cbiAgICBmb3IgKGNvbnN0IGRldmVsb3BtZW50IG9mIGRldmVsb3BtZW50cykge1xuICAgICAgaWYgKGRldmVsb3BtZW50LnNwZWNpYWxpemF0aW9uKSB7XG4gICAgICAgIGRldmVsb3BtZW50Lm5hbWUgPSBgJHtkZXZlbG9wbWVudC5zcGVjaWFsaXphdGlvbn0gKCR7ZGV2ZWxvcG1lbnQubmFtZX0pYFxuICAgICAgfVxuICAgICAgaWYgKGRldmVsb3BtZW50LmdhaW4gPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgZGV2ZWxvcG1lbnQuZ2FpbiA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5NYXJrZWRGb3JEZXZlbG9wbWVudCcpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZXZlbG9wbWVudC5nYWluID0gYCske2RldmVsb3BtZW50LmdhaW59ICR7Z2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgICdDb0M3LlBvaW50cydcbiAgICAgICAgKX1gXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHRlbXBsYXRlID0gJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvaXRlbXMvYm9vay9kZXZlbG9wbWVudC5odG1sJ1xuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZSh0ZW1wbGF0ZSwgeyBkZXZlbG9wbWVudHMgfSlcbiAgICByZXR1cm4gYXdhaXQgQ2hhdE1lc3NhZ2UuY3JlYXRlKHtcbiAgICAgIHVzZXI6IGdhbWUudXNlci5pZCxcbiAgICAgIHNwZWFrZXI6IENoYXRNZXNzYWdlLmdldFNwZWFrZXIoeyBhY3RvcjogdGhpcy5hY3RvciB9KSxcbiAgICAgIGZsYXZvcjogZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5HYWluc0ZvclJlYWRpbmcnLCB7IGJvb2s6IHRoaXMubmFtZSB9KSxcbiAgICAgIGNvbnRlbnQ6IGh0bWxcbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgYXR0ZW1wdFNwZWxsTGVhcm5pbmcgKGlkKSB7XG4gICAgaWYgKCF0aGlzLmlzT3duZWQpIHtcbiAgICAgIC8qKiBUaGlzIGlzIG5vdCBvd25lZCBieSBhbnkgQWN0b3IgKi9cbiAgICAgIHJldHVybiB1aS5ub3RpZmljYXRpb25zLmVycm9yKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ob3RPd25lZCcpKVxuICAgIH1cbiAgICBpZiAoIXRoaXMuc3lzdGVtLmluaXRpYWxSZWFkaW5nKSB7XG4gICAgICAvKiogQWN0b3IgZGlkIG5vdCBwZXJmb3JtZWQgYW4gaW5pdGlhbCByZWFkaW5nIGZpcnN0ICovXG4gICAgICByZXR1cm4gdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Jbml0aWFsUmVhZGluZ05lZWRlZCcsIHtcbiAgICAgICAgICBhY3RvcjogdGhpcy5hY3Rvci5uYW1lLFxuICAgICAgICAgIGJvb2s6IHRoaXMubmFtZVxuICAgICAgICB9KVxuICAgICAgKVxuICAgIH1cbiAgICBjb25zdCBzcGVsbCA9IHRoaXMuc3lzdGVtLnNwZWxscy5maW5kKHNwZWxsID0+IHtcbiAgICAgIHJldHVybiBzcGVsbC5faWQgPT09IGlkXG4gICAgfSlcbiAgICBpZiAoc3BlbGwpIHtcbiAgICAgIGNvbnN0IGNoZWNrID0gbmV3IENvQzdDaGVjaygpXG4gICAgICBjaGVjay5hY3RvciA9IHRoaXMuYWN0b3JcbiAgICAgIGNoZWNrLmRpZmZpY3VsdHkgPSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLmhhcmRcbiAgICAgIGNoZWNrLnBhcmVudCA9IHRoaXMudXVpZFxuICAgICAgY2hlY2suZmxhdm9yID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5MZWFyblNwZWxsQXR0ZW1wdCcsIHtcbiAgICAgICAgYm9vazogdGhpcy5uYW1lLFxuICAgICAgICBzcGVsbDogc3BlbGwubmFtZVxuICAgICAgfSlcbiAgICAgIGNoZWNrLmNvbnRleHQgPSAnU1BFTExfTEVBUk5JTkcnXG4gICAgICBjaGVjay5zcGVsbCA9IHNwZWxsXG4gICAgICBhd2FpdCBjaGVjay5yb2xsQ2hhcmFjdGVyaXN0aWMoJ2ludCcpXG4gICAgICBhd2FpdCBjaGVjay50b01lc3NhZ2UoKVxuICAgIH1cbiAgfVxuXG4gIC8qKiBMaXN0ZW4gdG8gY2hhbmdlcyBvbiB0aGUgY2hlY2sgY2FyZCAqL1xuICBhc3luYyB1cGRhdGVSb2xsIChyb2xsKSB7XG4gICAgY29uc3QgY2hlY2sgPSBDb0M3Q2hlY2suZnJvbVJvbGxTdHJpbmcocm9sbClcblxuICAgIC8qKiBXaWxsIGtub3cgaWYgdXNlciBwdXNoIHRoZSByb2xsIG9yIHNwZW5kIEx1Y2sgKi9cbiAgICBpZiAoY2hlY2sucGFzc2VkKSB7XG4gICAgICBpZiAoY2hlY2suY29udGV4dCA9PT0gJ0lOSVRJQUxfUkVBRElORycpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ3JhbnRJbml0aWFsUmVhZGluZygpXG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmNvbnRleHQgPT09ICdTUEVMTF9MRUFSTklORycpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ3JhbnRTcGVsbExlYXJuaW5nKGNoZWNrLnNwZWxsKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiLyogZ2xvYmFsICQsIENoYXRNZXNzYWdlLCBGb3JtRGF0YUV4dGVuZGVkLCBmb3VuZHJ5LCBmcm9tVXVpZCwgZ2FtZSwgSG9va3MsIHJlbmRlclRlbXBsYXRlLCBzb2NrZXRsaWIsIHVpICovXG5cbmNvbnN0IEVDQ19DTEFTUyA9ICdlbmhhbmNlZC1jaGF0LWNhcmQnXG5cbmNvbnN0IFBFUk1JU1NJT05fVFlQRSA9IHtcbiAgR006ICdnbScsIC8vIHVzZXIgaXMgR01cbiAgTk9UX0dNOiAnIWdtJywgLy8gdXNlciBpcyBOT1QgZ20gKGhpZGUgdG8gR00gaW4gY2FzZSBvZiB2aXNpYmlsaXR5KVxuICBTUEVBS0VSOiAnc3BlYWtlcicsIC8vIHRoZSBzcGVha2VyIGlzIGFuIGFjdG9yIGNvbnRyb2xlZC9vd25lZCBieSB0aGUgdXNlclxuICBVU0VSOiAndXNlcicsIC8vIHRoZSB1c2VyIGlzIHRoZSBtZXNzYWdlJ3MgYXV0aG9yXG4gIEVWRVJZT05FOiAnYWxsJywgLy8gZXF1aXZhbGVudCB0byBlbXB0eSBzdHJpbmdcbiAgQkxBQ0tMSVNUOiAnYmxhY2tsaXN0JyAvLyBpbnZlcnQgdGhlIGxvZ2ljXG59XG5cbmNvbnN0IFNUQVRFID0ge1xuICBPTjogJ3N3aXRjaGVkLW9uJyxcbiAgT0ZGOiAnc3dpdGNoZWQtb2ZmJ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdEVDQyAoLi4uY2FyZGNsYXNzKSB7XG4gIC8vIEhvb2tzLm9uY2UoJ2luaXQnLCBmdW5jdGlvbiAoKSB7XG4gIC8vIH0pXG5cbiAgSG9va3Mub24oJ3JlbmRlckNoYXRMb2cnLCAoYXBwLCBodG1sLCBkYXRhKSA9PlxuICAgIEVuaGFuY2VkQ2hhdENhcmRMaWIuaW5qZWN0Q1NTKGFwcCwgaHRtbCwgZGF0YSlcbiAgKVxuXG4gIEhvb2tzLm9uY2UoJ3NvY2tldGxpYi5yZWFkeScsIGZ1bmN0aW9uICgpIHtcbiAgICBFbmhhbmNlZENoYXRDYXJkTGliLnJlZ2lzdGVyKGNhcmRjbGFzcylcbiAgICBFbmhhbmNlZENoYXRDYXJkTGliLnNvY2tldCA9IHNvY2tldGxpYi5yZWdpc3RlclN5c3RlbShnYW1lLnN5c3RlbS5pZCkgLy8gU29ja2V0IGlzIGF0dGFjaGVkIHRvIGN1cnJlbnQgc3lzdGVtXG4gICAgRW5oYW5jZWRDaGF0Q2FyZExpYi5zb2NrZXQucmVnaXN0ZXIoJ3VwZGF0ZU1lc3NhZ2UnLCB1cGRhdGVNZXNzYWdlKVxuICAgIEVuaGFuY2VkQ2hhdENhcmRMaWIuc29ja2V0LnJlZ2lzdGVyKCdHTVVwZGF0ZScsIEdNVXBkYXRlKVxuICAgIEVuaGFuY2VkQ2hhdENhcmRMaWIuc29ja2V0LnJlZ2lzdGVyKCdhZHZpc2UnLCBhZHZpc2UpXG4gICAgLy8gRW5oYW5jZWRDaGF0Q2FyZExpYi5zb2NrZXQucmVnaXN0ZXIoJ2dtdHJhZGVpdGVtdG8nLCBnbXRyYWRlaXRlbXRvKVxuICB9KVxuXG4gIEhvb2tzLm9uKCdyZW5kZXJDaGF0TWVzc2FnZScsIChhcHAsIGh0bWwsIGRhdGEpID0+XG4gICAgRW5oYW5jZWRDaGF0Q2FyZC5iaW5kTGlzdGVuZXJzKGh0bWwpXG4gIClcbn1cblxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlTWVzc2FnZSAobWVzc2FnZUlkLCBuZXdDb250ZW50KSB7XG4gIGNvbnN0IGNoYXRNZXNzYWdlID0gZ2FtZS5tZXNzYWdlcy5nZXQobWVzc2FnZUlkKVxuXG4gIGF3YWl0IGNoYXRNZXNzYWdlLnVwZGF0ZSh7XG4gICAgY29udGVudDogbmV3Q29udGVudFxuICB9KVxufVxuXG5hc3luYyBmdW5jdGlvbiBHTVVwZGF0ZSAoZGF0YSwgb3B0aW9ucywgY2FyZENsYXNzTmFtZSwgbWVzc2FnZUlkID0gdW5kZWZpbmVkKSB7XG4gIGNvbnN0IGNhcmQgPSBhd2FpdCBFbmhhbmNlZENoYXRDYXJkLmZyb21EYXRhKFxuICAgIGRhdGEsXG4gICAgb3B0aW9ucyxcbiAgICBjYXJkQ2xhc3NOYW1lLFxuICAgIG1lc3NhZ2VJZFxuICApXG4gIGF3YWl0IGNhcmQuR01VcGRhdGUoKVxuICAvLyBjb25zdCBkaWZmID0gZm91bmRyeS51dGlscy5kaWZmT2JqZWN0KCBkYXRhLCBjYXJkLnRvT2JqZWN0KCkpXG4gIHJldHVybiBjYXJkLnRvT2JqZWN0KClcbn1cblxuYXN5bmMgZnVuY3Rpb24gYWR2aXNlICgpIHt9XG5cbmNsYXNzIEVuaGFuY2VkQ2hhdENhcmRMaWIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy50eXBlcyA9IG5ldyBNYXAoKVxuICAgIHRoaXMuc29ja2V0ID0gbnVsbFxuICAgIC8vIHRoaXMuZW5oYW5jZWRDaGF0Q2FyZENsYXNzID0gRW5oYW5jZWRDaGF0Q2FyZFxuICB9XG5cbiAgc3RhdGljIGluamVjdENTUyAoKSB7XG4gICAgbGV0IHN0eWxlID0gJCgnaGVhZCcpLmZpbmQoJ3N0eWxlJylcbiAgICBpZiAoIXN0eWxlPy5sZW5ndGgpIHtcbiAgICAgICQoJ2hlYWQnKS5hcHBlbmQoJCgnPHN0eWxlICB0eXBlPVwidGV4dC9jc3NcIj48L3N0eWxlPicpKVxuICAgICAgc3R5bGUgPSAkKCdoZWFkJykuZmluZCgnc3R5bGUnKVxuICAgIH1cbiAgICBzdHlsZS5hcHBlbmQoXG4gICAgICBgLmVjYy1yZXN0cmljdGVkIHtjb2xvcjogcmVkfVxuICAgIC5lY2MtcmVzdHJpY3RlZDpob3ZlciB7Y3Vyc29yOiBub3QtYWxsb3dlZH1gXG4gICAgKVxuICB9XG5cbiAgc3RhdGljIHNldCBzb2NrZXQgKHgpIHtcbiAgICBpZiAoIWdhbWUuZW5oYW5jZWRDaGF0Q2FyZHNMaWIpIHtcbiAgICAgIGdhbWUuZW5oYW5jZWRDaGF0Q2FyZHNMaWIgPSBuZXcgRW5oYW5jZWRDaGF0Q2FyZExpYigpXG4gICAgfVxuICAgIGdhbWUuZW5oYW5jZWRDaGF0Q2FyZHNMaWIuc29ja2V0ID0geFxuICB9XG5cbiAgc3RhdGljIGdldCBzb2NrZXQgKCkge1xuICAgIGlmICghZ2FtZS5lbmhhbmNlZENoYXRDYXJkc0xpYikge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcignRUNDIG5vdCBJbml0aWFsaXplZCcpXG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuICAgIGlmICghZ2FtZS5lbmhhbmNlZENoYXRDYXJkc0xpYi5zb2NrZXQpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoJ0VDQyBubyBzb2NrZXQnKVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cbiAgICByZXR1cm4gZ2FtZS5lbmhhbmNlZENoYXRDYXJkc0xpYi5zb2NrZXRcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZXMgKCkge1xuICAgIGlmICghZ2FtZS5lbmhhbmNlZENoYXRDYXJkc0xpYikge1xuICAgICAgZ2FtZS5lbmhhbmNlZENoYXRDYXJkc0xpYiA9IG5ldyBFbmhhbmNlZENoYXRDYXJkTGliKClcbiAgICB9XG4gICAgcmV0dXJuIGdhbWUuZW5oYW5jZWRDaGF0Q2FyZHNMaWIudHlwZXNcbiAgfVxuXG4gIHN0YXRpYyByZWdpc3RlciAoY2FyZENvbnN0cnVjdG9ycykge1xuICAgIGNhcmRDb25zdHJ1Y3RvcnMuZm9yRWFjaChjYXJkQ29uc3RydWN0b3IgPT4ge1xuICAgICAgaWYgKCFFbmhhbmNlZENoYXRDYXJkTGliLnR5cGVzLmdldChjYXJkQ29uc3RydWN0b3IubmFtZSkpIHtcbiAgICAgICAgRW5oYW5jZWRDaGF0Q2FyZExpYi50eXBlcy5zZXQoY2FyZENvbnN0cnVjdG9yLm5hbWUsIGNhcmRDb25zdHJ1Y3RvcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLy8gc3RhdGljIGdtX29uVG9nZ2xlIChkYXRhKXtcbiAgLy8gICB1aS5ub3RpZmljYXRpb25zLmluZm8oICdnbV9vblRvZ2dsZScpXG4gIC8vIH1cbn1cblxuZnVuY3Rpb24gc2V0QnlQYXRoIChvYmosIHBhdGgsIHZhbHVlKSB7XG4gIGNvbnN0IHBhcnRzID0gcGF0aC5zcGxpdCgnLicpXG4gIGxldCBvID0gb2JqXG4gIGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIGlmICghb1twYXJ0c1tpXV0pIG9bcGFydHNbaV1dID0ge31cbiAgICAgIG8gPSBvW3BhcnRzW2ldXVxuICAgIH1cbiAgfVxuXG4gIG9bcGFydHNbcGFydHMubGVuZ3RoIC0gMV1dID0gdmFsdWVcbn1cblxuZnVuY3Rpb24gZ2V0QnlQYXRoIChvYmosIHBhdGgpIHtcbiAgY29uc3QgcGFydHMgPSBwYXRoLnNwbGl0KCcuJylcbiAgbGV0IG8gPSBvYmpcbiAgaWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgaWYgKCFvW3BhcnRzW2ldXSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgbyA9IG9bcGFydHNbaV1dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9bcGFydHNbcGFydHMubGVuZ3RoIC0gMV1dXG59XG5cbmV4cG9ydCBjbGFzcyBFbmhhbmNlZENoYXRDYXJkIHtcbiAgLy8gc3RhdGljIHJlZ2lzdGVyIChjYXJkQ29uc3RydWN0b3IpIHtcbiAgLy8gICBFbmhhbmNlZENoYXRDYXJkTGliLnJlZ2lzdGVyKGNhcmRDb25zdHJ1Y3RvcilcbiAgLy8gfVxuXG4gIGNvbnN0cnVjdG9yIChkYXRhID0ge30sIG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGFcbiAgICBpZiAoIXRoaXMuZGF0YS5mbGFncykgdGhpcy5kYXRhLmZsYWdzID0ge31cbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9uc1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCBvbmx5IG9uY2UgYmVmb3JlIHNlbmRpbmcgbWVzc2FnZSB0byBjaGF0LlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFzeW5jIGluaXRpYWxpemUgKCkge31cblxuICBnZXQgb3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3QodGhpcy5jb25zdHJ1Y3Rvci5kZWZhdWx0T3B0aW9ucywgdGhpcy5fb3B0aW9ucylcbiAgfVxuXG4gIHNldCBvcHRpb25zICh4KSB7XG4gICAgdGhpcy5fb3B0aW9ucyA9IHhcbiAgfVxuXG4gIGdldCB0ZW1wbGF0ZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy50ZW1wbGF0ZVxuICB9XG5cbiAgZ2V0IGNzc0NsYXNzZXMgKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuY2xhc3Nlcz8uam9pbignICcpXG4gIH1cblxuICBnZXQgc3BlYWtlciAoKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5vb2MpIHJldHVybiBnYW1lLnVzZXJcbiAgICBpZiAoXG4gICAgICB0aGlzLm9wdGlvbnMuc3BlYWtlciAmJlxuICAgICAgQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlckFjdG9yKHRoaXMub3B0aW9ucy5zcGVha2VyKVxuICAgICkge1xuICAgICAgcmV0dXJuIENoYXRNZXNzYWdlLmdldFNwZWFrZXJBY3Rvcih0aGlzLm9wdGlvbnMuc3BlYWtlcilcbiAgICB9XG4gICAgcmV0dXJuIGdhbWUudXNlclxuICB9XG5cbiAgYXN5bmMgZ2V0RGF0YSAoKSB7XG4gICAgLy8gYXdhaXQgdGhpcy5hc3NpZ25PYmplY3RzKClcbiAgICByZXR1cm4ge1xuICAgICAgY2FyZDogdGhpcyxcbiAgICAgIGZsYWdzOiB0aGlzLmZsYWdzLFxuICAgICAgZGF0YTogdGhpcy50b09iamVjdCgpLFxuICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgY3NzOiB0aGlzLmNzc0NsYXNzZXMsXG4gICAgICB1c2VyOiBnYW1lLnVzZXIsXG4gICAgICBzcGVha2VyOiB0aGlzLnNwZWFrZXJcbiAgICB9XG4gIH1cblxuICB0b09iamVjdCAoKSB7XG4gICAgaWYgKCF0aGlzLmRhdGEpIHJldHVyblxuICAgIGNvbnN0IGRhdGEgPSB7fVxuICAgIGZvciAoY29uc3QgayBvZiBPYmplY3Qua2V5cyh0aGlzLmRhdGEpKSB7XG4gICAgICBjb25zdCB2ID0gdGhpcy5kYXRhW2tdXG4gICAgICBpZiAodiBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICBkYXRhW2tdID0gdi50b09iamVjdCA/IHYudG9PYmplY3QoKSA6IGZvdW5kcnkudXRpbHMuZGVlcENsb25lKHYpXG4gICAgICB9IGVsc2UgZGF0YVtrXSA9IHZcbiAgICB9XG4gICAgcmV0dXJuIGRhdGFcbiAgfVxuXG4gIGFzeW5jIHRvTWVzc2FnZSAob3B0aW9ubmFsQ2hhdERhdGEgPSB7fSkge1xuICAgIC8vIE1hcCBlY2MgY2FyZCB0eXBlIGlmIG5vdCByZWdpc3RlcmVkIGFscmVhZHlcbiAgICAvLyB0aGlzLnJlZ2lzdGVyRUNDQ2xhc3MoKVxuXG4gICAgYXdhaXQgdGhpcy5pbml0aWFsaXplKClcblxuICAgIC8vIFB1Ymxpc2ggYnkgY3VycmVudCB1c2VyIGJ5IGRlZmF1bHQgdW5sZXNzIG9wdGlvbnMuR01jaGF0Q2FyZFxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmdldERhdGEoKVxuICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJUZW1wbGF0ZSh0aGlzLnRlbXBsYXRlLCBkYXRhKVxuICAgIGNvbnN0IGh0bWxDYXJkRWxlbWVudCA9ICQoaHRtbClbMF1cbiAgICBpZiAodGhpcy5vcHRpb25zLmF0dGFjaE9iamVjdCkge1xuICAgICAgaHRtbENhcmRFbGVtZW50LmRhdGFzZXQub2JqZWN0ID0gZXNjYXBlKHRoaXMub2JqZWN0RGF0YVN0cmluZylcbiAgICB9XG4gICAgaHRtbENhcmRFbGVtZW50LmRhdGFzZXQuZWNjQ2xhc3MgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWVcbiAgICBodG1sQ2FyZEVsZW1lbnQuY2xhc3NMaXN0LmFkZCguLi50aGlzLm9wdGlvbnMuY2xhc3NlcylcblxuICAgIGNvbnN0IHNwZWFrZXIgPVxuICAgICAgdGhpcy5vcHRpb25zLnNwZWFrZXIgJiYgIXRoaXMub3B0aW9ucy5vb2NcbiAgICAgICAgPyBDaGF0TWVzc2FnZS5nZXRTcGVha2VyKHRoaXMub3B0aW9ucy5zcGVha2VyKVxuICAgICAgICA6IHt9XG5cbiAgICAvLyBjb25zdCB1c2VySWQgPSB0aGlzLm9wdGlvbnMudXNlcklkID8gdGhpcy5vcHRpb25zLnVzZXJJZCA6IGdhbWUudXNlci5pZFxuXG4gICAgY29uc3QgY2hhdERhdGEgPSBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KFxuICAgICAge1xuICAgICAgICAvLyB1c2VyOiB1c2VySWQsXG4gICAgICAgIHVzZXI6IGdhbWUudXNlci5pZCxcbiAgICAgICAgc3BlYWtlcixcbiAgICAgICAgZmxhdm9yOiBnYW1lLmkxOG4ubG9jYWxpemUodGhpcy5vcHRpb25zLnRpdGxlKSxcbiAgICAgICAgY29udGVudDogaHRtbENhcmRFbGVtZW50Lm91dGVySFRNTFxuICAgICAgfSxcbiAgICAgIG9wdGlvbm5hbENoYXREYXRhXG4gICAgKVxuXG4gICAgaWYgKFsnZ21yb2xsJywgJ2JsaW5kcm9sbCddLmluY2x1ZGVzKHRoaXMucm9sbE1vZGUpKSB7XG4gICAgICBjaGF0RGF0YS53aGlzcGVyID0gQ2hhdE1lc3NhZ2UuZ2V0V2hpc3BlclJlY2lwaWVudHMoJ0dNJylcbiAgICB9XG4gICAgaWYgKHRoaXMucm9sbE1vZGUgPT09ICdzZWxmcm9sbCcpIGNoYXREYXRhLndoaXNwZXIgPSBbZ2FtZS51c2VyLmlkXVxuICAgIGlmICh0aGlzLnJvbGxNb2RlID09PSAnYmxpbmRyb2xsJykgY2hhdERhdGEuYmxpbmQgPSB0cnVlXG5cbiAgICBDaGF0TWVzc2FnZS5jcmVhdGUoY2hhdERhdGEpLnRoZW4obXNnID0+IHtcbiAgICAgIHJldHVybiBtc2dcbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgdXBkYXRlQ2hhdENhcmQgKHsgYXR0YWNoT2JqZWN0ID0gdHJ1ZSB9ID0ge30pIHtcbiAgICAvLyBUT0RPIHRoZSB3aG9sZSBmdW5jdGlvbiBoYXMgdG8gYmUgZXhlY3V0ZWQgYnkgR00gaWYgb3B0aW9ucy5HTWNoYXRDYXJkXG4gICAgaWYgKHRoaXMub3B0aW9ucy5jb21wdXRlKSBhd2FpdCB0aGlzLmxvY2FsQ29tcHV0ZSgpXG4gICAgaWYgKHRoaXMub3B0aW9ucy5HTVVwZGF0ZSkgYXdhaXQgdGhpcy5FeGVjdXRlR01VcGRhdGUoKVxuICAgIGlmICghdGhpcy5tZXNzYWdlSWQpIHtcbiAgICAgIHRoaXMudG9NZXNzYWdlKClcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuZ2V0RGF0YSgpXG4gICAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUodGhpcy50ZW1wbGF0ZSwgZGF0YSlcbiAgICAgIGNvbnN0IGh0bWxDYXJkRWxlbWVudCA9ICQucGFyc2VIVE1MKGh0bWwpWzBdXG5cbiAgICAgIC8vIEF0dGFjaCB0aGUgb2JqZWN0IHRvIHRoZSBtZXNzYWdlLlxuICAgICAgaWYgKGF0dGFjaE9iamVjdCAmJiAhdGhpcy5kYXRhLkVFQ19BQ1RJT04/LmRldGFjaERhdGEpIHtcbiAgICAgICAgaHRtbENhcmRFbGVtZW50LmRhdGFzZXQub2JqZWN0ID0gZXNjYXBlKHRoaXMub2JqZWN0RGF0YVN0cmluZylcbiAgICAgIH1cbiAgICAgIGh0bWxDYXJkRWxlbWVudC5kYXRhc2V0LmVjY0NsYXNzID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgICBodG1sQ2FyZEVsZW1lbnQuY2xhc3NMaXN0LmFkZCguLi50aGlzLm9wdGlvbnMuY2xhc3NlcylcblxuICAgICAgLy8gVXBkYXRlIHRoZSBtZXNzYWdlLlxuICAgICAgZ2FtZS5lbmhhbmNlZENoYXRDYXJkc0xpYi5zb2NrZXQuZXhlY3V0ZUFzR00oXG4gICAgICAgICd1cGRhdGVNZXNzYWdlJyxcbiAgICAgICAgdGhpcy5tZXNzYWdlSWQsXG4gICAgICAgIGh0bWxDYXJkRWxlbWVudC5vdXRlckhUTUxcbiAgICAgIClcbiAgICAgIC8vIGNvbnN0IGNoYXRNZXNzYWdlID0gZ2FtZS5tZXNzYWdlcy5nZXQodGhpcy5tZXNzYWdlSWQpXG5cbiAgICAgIC8vIGNvbnN0IG1zZyA9IGF3YWl0IGNoYXRNZXNzYWdlLnVwZGF0ZSh7IC8vRGlzcGF0Y2ggcmVxdWVzdCBieSBzb2NrZXRcbiAgICAgIC8vIGNvbnRlbnQ6IGh0bWxDYXJkRWxlbWVudC5vdXRlckhUTUwgLy9EaXNwYXRjaCByZXF1ZXN0IGJ5IHNvY2tldFxuICAgICAgLy8gfSkgLy9EaXNwYXRjaCByZXF1ZXN0IGJ5IHNvY2tldFxuICAgICAgLy8gYXdhaXQgdWkuY2hhdC51cGRhdGVNZXNzYWdlKG1zZywgZmFsc2UpIC8vRGlzcGF0Y2ggcmVxdWVzdCBieSBzb2NrZXRcbiAgICAgIC8vIHJldHVybiBtc2cgLy9EaXNwYXRjaCByZXF1ZXN0IGJ5IHNvY2tldFxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgLy8gaHRtbC5vbihcbiAgICAvLyAgICdjbGljaycsXG4gICAgLy8gICBgLiR7RUNDX0NMQVNTfSAuZWNjLXJhZGlvLXN3aXRjaGAsXG4gICAgLy8gICB0aGlzLl9vblRvZ2dsZS5iaW5kKHRoaXMpXG4gICAgLy8gKVxuICAgIGh0bWwub24oJ2NoYW5nZScsICdpbnB1dCxzZWxlY3QsdGV4dGFyZWEnLCB0aGlzLl9vbkNoYW5nZS5iaW5kKHRoaXMpKVxuICAgIGh0bWwub24oJ2NsaWNrJywgYC4ke0VDQ19DTEFTU30gLmVjYy1zd2l0Y2hgLCB0aGlzLl9vblRvZ2dsZS5iaW5kKHRoaXMpKVxuICAgIGh0bWwub24oJ2NsaWNrJywgYC4ke0VDQ19DTEFTU30gLnN1Ym1pdGAsIHRoaXMuX29uU3VibWl0LmJpbmQodGhpcykpXG4gICAgaHRtbC5vbignZm9jdXNvdXQnLCBgLiR7RUNDX0NMQVNTfSBpbnB1dGAsIHRoaXMuX29uQ2hhbmdlLmJpbmQodGhpcykpXG4gICAgaHRtbC5vbignY2xpY2snLCBgLiR7RUNDX0NMQVNTfSBidXR0b25gLCB0aGlzLl9vbkJ1dHRvbi5iaW5kKHRoaXMpKVxuICAgIGh0bWwub24oJ2tleWRvd24nLCBgLiR7RUNDX0NMQVNTfSBmb3JtYCwgdGhpcy5fb25LZXkuYmluZCh0aGlzKSlcblxuICAgIC8vIGNvbnN0IHZpc2kgPSBodG1sLmZpbmQoJ1tkYXRhLWVjYy12aXNpYmlsaXR5XScpXG4gICAgLy8gZm9yIChsZXQgaSA9IDA7IGkgPCB2aXNpLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gICBjb25zdCBlbCA9IHZpc2lbaV07XG4gICAgLy8gICBhd2FpdCB0aGlzLnNldFZpc2liaWxpdHkoZWwpXG5cbiAgICAvLyB9XG5cbiAgICBodG1sXG4gICAgICAuZmluZCgnW2RhdGEtZWNjLXZpc2liaWxpdHldJylcbiAgICAgIC5lYWNoKGFzeW5jIChpLCBlbCkgPT4gYXdhaXQgdGhpcy5zZXRWaXNpYmlsaXR5KGVsKSlcbiAgICBodG1sXG4gICAgICAuZmluZCgnW2RhdGEtZWNjLXBlcm1pc3Npb25zXScpXG4gICAgICAuZWFjaChhc3luYyAoaSwgZWwpID0+IGF3YWl0IHRoaXMuc2V0UGVybWlzc2lvbihlbCkpXG4gICAgaHRtbC5maW5kKGAuJHtFQ0NfQ0xBU1N9IC5lY2Mtc3dpdGNoYCkuZWFjaCgoaSwgZWwpID0+IHRoaXMuc2V0U3RhdGUoZWwpKVxuICAgIGh0bWxcbiAgICAgIC5maW5kKGAuJHtFQ0NfQ0xBU1N9IGlucHV0W3R5cGU9XCJyYWRpb1wiXWApXG4gICAgICAuZWFjaCgoaSwgZWwpID0+IHRoaXMuc2V0UmFkaW9TdGF0ZShlbCkpXG4gICAgLy8gaHRtbC5maW5kKGAuJHtFQ0NfQ0xBU1N9IC5lY2MtcmFkaW8tc3dpdGNoYCkuZWFjaCggKGksIGVsKSA9PiB0aGlzLnNldFN0YXRlKGVsKSlcbiAgfVxuXG4gIHNldFN0YXRlIChlbGVtZW50KSB7XG4gICAgaWYgKCFlbGVtZW50KSByZXR1cm5cbiAgICBpZiAoZWxlbWVudC5kYXRhc2V0LmZsYWcpIHtcbiAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcbiAgICAgICAgdGhpcy5mbGFnc1tlbGVtZW50LmRhdGFzZXQuZmxhZ10gPyBTVEFURS5PTiA6IFNUQVRFLk9GRlxuICAgICAgKVxuICAgIH1cbiAgICBpZiAoZWxlbWVudC5kYXRhc2V0Lm5hbWUpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gZ2V0QnlQYXRoKHRoaXMsIGVsZW1lbnQuZGF0YXNldC5uYW1lKVxuICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKHZhbHVlID8gU1RBVEUuT04gOiBTVEFURS5PRkYpXG4gICAgfVxuICB9XG5cbiAgc2V0UmFkaW9TdGF0ZSAoZWxlbWVudCkge1xuICAgIGlmICghZWxlbWVudCB8fCAhZWxlbWVudC5uYW1lKSByZXR1cm5cbiAgICBjb25zdCBzcGxpdGVkID0gZWxlbWVudC5uYW1lLnNwbGl0KCcuJylcbiAgICBpZiAoc3BsaXRlZFswXS50b0xvd2VyQ2FzZSgpICE9PSAnZGF0YScpIHJldHVyblxuICAgIGlmICh0aGlzLmRhdGEgJiYgdHlwZW9mIHRoaXMuZGF0YVtzcGxpdGVkWzFdXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh0aGlzLmRhdGFbc3BsaXRlZFsxXV0gPT09IGVsZW1lbnQudmFsdWUpIHtcbiAgICAgICAgZWxlbWVudC5jaGVja2VkID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHNldFZpc2liaWxpdHkgKGVsZW1lbnQpIHtcbiAgICBpZiAoIWVsZW1lbnQuZGF0YXNldC5lY2NWaXNpYmlsaXR5KSByZXR1cm5cbiAgICBjb25zdCBjYW5Zb3VTZWUgPSBhd2FpdCB0aGlzLmhhc1Blcm0oZWxlbWVudC5kYXRhc2V0LmVjY1Zpc2liaWxpdHksIHRydWUpXG4gICAgaWYgKCFjYW5Zb3VTZWUpIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICB9XG5cbiAgYXN5bmMgc2V0UGVybWlzc2lvbiAoZWxlbWVudCkge1xuICAgIGlmICghZWxlbWVudC5kYXRhc2V0LmVjY1Blcm1pc3Npb25zKSByZXR1cm5cbiAgICBjb25zdCBjYW5Zb3VNb2QgPSBhd2FpdCB0aGlzLmhhc1Blcm0oZWxlbWVudC5kYXRhc2V0LmVjY1Blcm1pc3Npb25zKVxuICAgIGlmICghY2FuWW91TW9kKSB7XG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2VjYy1yZXN0cmljdGVkJylcbiAgICAgIGlmICgkKGVsZW1lbnQpLmlzKCdpbnB1dCcpKSB7XG4gICAgICAgIGlmIChlbGVtZW50LnR5cGUgPT09ICdyYW5nZScpICQoZWxlbWVudCkuYXR0cignZGlzYWJsZWQnLCB0cnVlKVxuICAgICAgICBlbHNlICQoZWxlbWVudCkuYXR0cigncmVhZG9ubHknLCB0cnVlKVxuICAgICAgfVxuICAgICAgaWYgKCQoZWxlbWVudCkuaXMoJ3NlbGVjdCcpKSAkKGVsZW1lbnQpLmF0dHIoJ2Rpc2FibGVkJywgdHJ1ZSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIGN1cnJlbnQgdXNlciBhcyBwZXJtaXNzaW9uIGFnYWluc3QgYSBzdHJpbmcgb2YgYWxsb3dlZCBwZXJzb25zLlxuICAgKiBJZiB0aGUgc3RyaW5nIGlzIGVtcHR5IHBlcm1pc3Npb24gYXJlIGFsbCBncmFudGVkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZXN0cmljdGVkVG8gICBBIHN0cmluZyBjb250YWluaW5nIHRoZSBzZXQgb2YgcGxheWVyIGFsbG93ZWQuIFZhbHVlIGNhbiBiZSBvd25lciwgZ20sIHBsYXllcnMsIHV1aWQgc2VwYXJhdGVkIGJ5IHNwYWNlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmlzaW9uICAgICAgICBpZiB0cnVlIGdtIHdpbGwgYmUgY29uc2lkZXJlZCBmb3IgcGVybWlzc2lvbnMuIGZhbHNlID0gZ20gaGFzIGFsd2F5cyByaWdodC4gdHJ1ZSBHTSBwZXJtaXNzaW9uIHdpbGwgYmUgY2hlY2tlZFxuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgYXN5bmMgaGFzUGVybSAocmVzdHJpY3RlZFRvLCB2aXNpb24gPSBmYWxzZSkge1xuICAgIGlmICghcmVzdHJpY3RlZFRvLmxlbmd0aCkgcmV0dXJuIHRydWVcbiAgICBsZXQgcGVybWlzc2lvbnNBcnJheSA9IHJlc3RyaWN0ZWRUby5zcGxpdCgnICcpXG4gICAgY29uc3Qgd2hpdGVMaXN0ID0gIXBlcm1pc3Npb25zQXJyYXkuaW5jbHVkZXMoUEVSTUlTU0lPTl9UWVBFLkJMQUNLTElTVClcbiAgICBpZiAoIXdoaXRlTGlzdCkge1xuICAgICAgcGVybWlzc2lvbnNBcnJheSA9IHBlcm1pc3Npb25zQXJyYXkuZmlsdGVyKFxuICAgICAgICBlID0+IGUgIT09IFBFUk1JU1NJT05fVFlQRS5CTEFDS0xJU1RcbiAgICAgIClcbiAgICB9XG4gICAgaWYgKGdhbWUudXNlci5pc0dNKSB7XG4gICAgICBpZiAoIXZpc2lvbikgcmV0dXJuIHRydWUgLy8gR00gY2FuIGFsd2F5cyBtb2RpZnkgZXZlcnl0aGluZyAhIE5haFxuICAgICAgaWYgKHBlcm1pc3Npb25zQXJyYXkuaW5jbHVkZXMoUEVSTUlTU0lPTl9UWVBFLkdNKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZSAmJiB3aGl0ZUxpc3RcbiAgICAgIH1cbiAgICAgIGlmIChwZXJtaXNzaW9uc0FycmF5LmluY2x1ZGVzKFBFUk1JU1NJT05fVFlQRS5OT1RfR00pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZSB8fCAhd2hpdGVMaXN0XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGVybWlzc2lvbnNBcnJheSA9IHBlcm1pc3Npb25zQXJyYXkuZmlsdGVyKGUgPT4gZSAhPT0gUEVSTUlTU0lPTl9UWVBFLkdNKVxuICAgIHBlcm1pc3Npb25zQXJyYXkgPSBwZXJtaXNzaW9uc0FycmF5LmZpbHRlcihcbiAgICAgIGUgPT4gZSAhPT0gUEVSTUlTU0lPTl9UWVBFLk5PVF9HTVxuICAgIClcblxuICAgIC8vICAgcmV0dXJuIGZhbHNlIHx8ICF3aGl0ZUxpc3QgLy9JZiBwYXNzIHRoZSBmaWx0ZXIgcmV0dXJuIGZhbHNlIHVubGVzcyBpdCdzIGEgYmxhY2tsaXN0XG4gICAgLy8gfSBlbHNlIHtcbiAgICAvLyAgIHBlcm1pc3Npb25zQXJyYXkgPSBwZXJtaXNzaW9uc0FycmF5LmZpbHRlcihlID0+IGUgIT0gUEVSTUlTU0lPTl9UWVBFLkdNKVxuICAgIC8vIH1cblxuICAgIGlmIChwZXJtaXNzaW9uc0FycmF5LmluY2x1ZGVzKFBFUk1JU1NJT05fVFlQRS5VU0VSKSkge1xuICAgICAgaWYgKHRoaXMubWVzc2FnZS5pc0F1dGhvcikgcmV0dXJuIHRydWUgJiYgd2hpdGVMaXN0IC8vIGlzQXV0aG9yIHZzIHVzZXIuaXNPd25lciA/XG4gICAgICBwZXJtaXNzaW9uc0FycmF5ID0gcGVybWlzc2lvbnNBcnJheS5maWx0ZXIoXG4gICAgICAgIGUgPT4gZSAhPT0gUEVSTUlTU0lPTl9UWVBFLlVTRVJcbiAgICAgIClcbiAgICB9XG5cbiAgICBpZiAocGVybWlzc2lvbnNBcnJheS5pbmNsdWRlcyhQRVJNSVNTSU9OX1RZUEUuU1BFQUtFUikpIHtcbiAgICAgIGNvbnN0IHNwZWFrZXIgPSB0aGlzLm1lc3NhZ2UuZGF0YS5zcGVha2VyXG4gICAgICBpZiAoc3BlYWtlci50b2tlbiAmJiBzcGVha2VyLnNjZW5lKSB7XG4gICAgICAgIGNvbnN0IGFjdG9yID0gYXdhaXQgZnJvbVV1aWQoXG4gICAgICAgICAgYFNjZW5lLiR7c3BlYWtlci5zY2VuZX0uVG9rZW4uJHtzcGVha2VyLnRva2VufWBcbiAgICAgICAgKVxuICAgICAgICBpZiAoYWN0b3IpIHtcbiAgICAgICAgICBpZiAoYWN0b3IuaXNPd25lcikgcmV0dXJuIHRydWUgJiYgd2hpdGVMaXN0XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3BlYWtlci5hY3Rvcikge1xuICAgICAgICBjb25zdCBhY3RvciA9IGdhbWUuYWN0b3JzLmdldChzcGVha2VyLmFjdG9yKVxuICAgICAgICBpZiAoYWN0b3IpIHtcbiAgICAgICAgICBpZiAoYWN0b3IuaXNPd25lcikgcmV0dXJuIHRydWUgJiYgd2hpdGVMaXN0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGVsc2UgaWYgKHNwZWFrZXIudXNlcikge1xuICAgICAgLy8gICBpZiAoZ2FtZS51c2VyLmlkID09IHNwZWFrZXIudXNlcikgcmV0dXJuIHRydWUgJiYgd2hpdGVMaXN0XG4gICAgICAvLyB9XG4gICAgICBwZXJtaXNzaW9uc0FycmF5ID0gcGVybWlzc2lvbnNBcnJheS5maWx0ZXIoXG4gICAgICAgIGUgPT4gZSAhPT0gUEVSTUlTU0lPTl9UWVBFLlNQRUFLRVJcbiAgICAgIClcbiAgICB9XG4gICAgLy8gQWxsIGZpbHRlciBwYXNzZWQsIGFycmF5IHNob3VsZCBjb250YWlucyBvbmx5IHV1aWRzIG9yIGFjdG9yL3Rva2VuIGlkc1xuICAgIGlmIChwZXJtaXNzaW9uc0FycmF5Lmxlbmd0aCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwZXJtaXNzaW9uc0FycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHV1aWQgPSBwZXJtaXNzaW9uc0FycmF5W2ldXG4gICAgICAgIGxldCBhY3RvciA9IGF3YWl0IGZyb21VdWlkKHV1aWQpXG4gICAgICAgIGlmICghYWN0b3IpIGFjdG9yID0gZ2FtZS5hY3RvcnMuZ2V0KHV1aWQpXG4gICAgICAgIGlmIChhY3Rvcikge1xuICAgICAgICAgIHJldHVybiBhY3Rvci5pc093bmVyXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihgVW5hYmxlIHRvIGZpbmQgYWN0b3IgJHt1dWlkfWApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlIHx8ICF3aGl0ZUxpc3QgLy8gSWYgcGFzcyB0aGUgZmlsdGVyIHJldHVybiBmYWxzZSB1bmxlc3MgaXQncyBhIGJsYWNrbGlzdFxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGJpbmRMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBjb25zdCBodG1sTWVzc2FnZUVsZW1lbnQgPSBodG1sWzBdXG4gICAgY29uc3QgaHRtbENhcmRFbGVtZW50ID0gaHRtbE1lc3NhZ2VFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYC4ke0VDQ19DTEFTU31gKVxuICAgIGlmICghaHRtbENhcmRFbGVtZW50KSByZXR1cm5cblxuICAgIGNvbnN0IGNhcmQgPSBhd2FpdCBFbmhhbmNlZENoYXRDYXJkLmZyb21IVE1MQ2FyZEVsZW1lbnQoaHRtbENhcmRFbGVtZW50KVxuICAgIGlmICghY2FyZCkgcmV0dXJuXG4gICAgY2FyZC5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuICB9XG5cbiAgZ2V0IGZsYWdzICgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLmZsYWdzXG4gIH1cblxuICAvKipcbiAgICogT3ZlcnJpZGUgdG8gcmVhc3NpZ24gb2JqZWN0IGZyb20gdGhlIGRhdGEgc3RydWN0dXJlLlxuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgYXN5bmMgYXNzaWduT2JqZWN0cyAoKSB7fVxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0byB1cGRhdGUgb2JqZWN0IGFmdGVyIGRhdGEgY2hhbmdlLlxuICAgKiBUaGlzIGlzIGNhbGxlZCBieSB0aGUgbG9jYWwgY2xpZW50XG4gICAqIEByZXR1cm5zXG4gICAqL1xuICBhc3luYyBsb2NhbENvbXB1dGUgKCkge31cblxuICAvKipcbiAgICogT3ZlcnJpZGUgdG8gdXBkYXRlIG9iamVjdCBhZnRlciBkYXRhIGNoYW5nZS5cbiAgICogVGhpcyBpcyBjYWxsZWQgYnkgb25lIG9mIHRoZSBHTSBjbGllbnRzLlxuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgYXN5bmMgR01VcGRhdGUgKCkge31cblxuICBhc3luYyBFeGVjdXRlR01VcGRhdGUgKCkge1xuICAgIGNvbnN0IG5ld0RhdGEgPSBhd2FpdCBnYW1lLmVuaGFuY2VkQ2hhdENhcmRzTGliLnNvY2tldC5leGVjdXRlQXNHTShcbiAgICAgICdHTVVwZGF0ZScsXG4gICAgICB0aGlzLnRvT2JqZWN0KCksXG4gICAgICB0aGlzLl9vcHRpb25zLFxuICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lLFxuICAgICAgdGhpcy5tZXNzYWdlSWRcbiAgICApXG5cbiAgICB0aGlzLmRhdGEgPSBuZXdEYXRhXG4gICAgYXdhaXQgdGhpcy5hc3NpZ25PYmplY3RzKClcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGV2ZW50IHdpbGwgY2hlY2sgZm9yIGFuIGFjdGlvbiAoZGF0YS1hY3Rpb24pXG4gICAqIGlmIGEgbWV0aG9kIHdpdGggdGhhdCBuYW1lIGV4aXN0IGl0IHdpbGwgYmUgdHJpZ2dlcmVkLlxuICAgKi9cbiAgYXN5bmMgX29uQnV0dG9uIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcblxuICAgIHRhcmdldC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnIC8vIEF2b2lkIG11bHRpcGxlIHB1c2hcbiAgICBjb25zdCBhY3Rpb24gPSB0YXJnZXQuZGF0YXNldC5hY3Rpb25cblxuICAgIGxldCBmb3JtVXBkYXRlXG4gICAgbGV0IGFjdGlvblVwZGF0ZSA9IGZhbHNlXG5cbiAgICAvLyBpZiAoJ3N1Ym1pdCcgPT0gdGFyZ2V0LnR5cGUpIHtcbiAgICAvLyAgIGNvbnNvbGUud2FybignQnV0dG9uIGlzIGFsc28gYSBzdWJtaXQnKVxuICAgIC8vIH1cblxuICAgIC8vIFBlcmZvcm0gY2FyZCB1cGRhdGUgZmlyc3RcbiAgICBjb25zdCBjYXJkID0gdGFyZ2V0LmNsb3Nlc3QoYC4ke0VDQ19DTEFTU31gKVxuICAgIGlmIChjYXJkKSBmb3JtVXBkYXRlID0gdGhpcy5fdXBkYXRlKGNhcmQpXG4gICAgZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICBgQ291bGQgbm90IGZpbmQgYSBFRUMgY2xhc3MgZm9yIHRoaXMgY2FyZDogJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9YFxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IG9yaWdpbmFsRGlzcGxheVN0eWxlID0gdGFyZ2V0LnN0eWxlLmRpc3BsYXlcblxuICAgIGlmICghYWN0aW9uKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ25vIGFjdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhpcyBidXR0b24nKVxuICAgICAgaWYgKCFmb3JtVXBkYXRlKSByZXR1cm4gLy8gSWYgdGhlIGZvcm0gd2FzIHVwZGF0ZWQgd2Ugc3RpbGwgdXBkYXRlIHRoZSBjYXJkXG4gICAgfVxuICAgIGlmICghdGhpc1thY3Rpb25dKSB7XG4gICAgICBjb25zb2xlLndhcm4oYG5vICR7YWN0aW9ufSBhY3Rpb24gZm91bmQgZm9yIHRoaXMgY2FyZGApXG4gICAgICBpZiAoIWZvcm1VcGRhdGUpIHJldHVybiAvLyBJZiB0aGUgZm9ybSB3YXMgdXBkYXRlZCB3ZSBzdGlsbCB1cGRhdGUgdGhlIGNhcmRcbiAgICB9XG4gICAgaWYgKHRoaXNbYWN0aW9uXSkge1xuICAgICAgYWN0aW9uVXBkYXRlID0gYXdhaXQgdGhpc1thY3Rpb25dKHsgZXZlbnQsIHVwZGF0ZUNhcmQ6IGZhbHNlIH0pXG4gICAgfVxuXG4gICAgaWYgKGZvcm1VcGRhdGUgfHwgYWN0aW9uVXBkYXRlKSBhd2FpdCB0aGlzLnVwZGF0ZUNoYXRDYXJkKClcbiAgICBlbHNlIHRhcmdldC5zdHlsZS5kaXNwbGF5ID0gb3JpZ2luYWxEaXNwbGF5U3R5bGVcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGV2ZW50XG4gICAqIEByZXR1cm5zIGZhbHNlIGlmIGtleSBpcyBlbnRlciB0byBhdm9pZCBnbG9iYWwgc3VibWlzc2lvblxuICAgKi9cbiAgX29uS2V5IChldmVudCkge1xuICAgIGlmIChldmVudC5rZXkgPT09ICdFbnRlcicpIHRoaXMuX29uU3VibWl0KGV2ZW50KVxuICAgIHJldHVybiBldmVudC5rZXkgIT09ICdFbnRlcidcbiAgfVxuXG4gIF9vbkNoYW5nZSAoZXZlbnQpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLnN1Ym1pdE9uQ2hhbmdlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fb25TdWJtaXQoZXZlbnQpXG4gICAgfVxuICB9XG5cbiAgX29uU3VibWl0IChldmVudCkge1xuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCB0YWdOYW1lID0gdGFyZ2V0LnRhZ05hbWVcbiAgICBpZiAodGFnTmFtZSA9PT0gJ0JVVFRPTicgJiYgJ2FjdGlvbicgaW4gdGFyZ2V0LmRhdGFzZXQpIHJldHVybiAvL1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuICAgIGNvbnN0IGNhcmQgPSB0YXJnZXQuY2xvc2VzdChgLiR7RUNDX0NMQVNTfWApXG4gICAgaWYgKCFjYXJkKSByZXR1cm5cbiAgICBjb25zdCB1cGRhdGVzID0gdGhpcy5fdXBkYXRlKGNhcmQpXG4gICAgaWYgKHVwZGF0ZXMpIHRoaXMudXBkYXRlQ2hhdENhcmQoKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIHRoZSBmb3JtIGZyb20gdGhlIGNhcmQgYW5kIHVwZGF0ZSB0aGUgZGF0YSBzdHJ1Y3R1cmVcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY2FyZFxuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgX3VwZGF0ZSAoY2FyZCkge1xuICAgIGNvbnN0IGZvcm1zID0gY2FyZC5xdWVyeVNlbGVjdG9yQWxsKCdmb3JtJylcbiAgICBsZXQgdXBkYXRlcyA9IGZhbHNlXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZm9ybSA9IGZvcm1zW2ldXG4gICAgICBjb25zdCBmZCA9IG5ldyBGb3JtRGF0YUV4dGVuZGVkKGZvcm0pXG4gICAgICBjb25zdCBkYXRhID0gZmQub2JqZWN0XG4gICAgICAvLyBkYXRhID0gZm91bmRyeS51dGlscy5kaWZmT2JqZWN0KFxuICAgICAgLy8gICB0aGlzLmRhdGEsXG4gICAgICAvLyAgIGZvdW5kcnkudXRpbHMuZXhwYW5kT2JqZWN0KGRhdGEpXG4gICAgICAvLyApXG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhkYXRhKSkge1xuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IGdldEJ5UGF0aCh0aGlzLCBrZXkpXG4gICAgICAgIGlmICghKG9sZFZhbHVlID09PSB2YWx1ZSkpIHtcbiAgICAgICAgICBzZXRCeVBhdGgodGhpcywga2V5LCB2YWx1ZSlcbiAgICAgICAgICB1cGRhdGVzID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1cGRhdGVzXG4gIH1cblxuICBnZXQgbWVzc2FnZSAoKSB7XG4gICAgaWYgKHRoaXMuX21lc3NhZ2UpIHJldHVybiB0aGlzLl9tZXNzYWdlXG4gICAgaWYgKHRoaXMuX21lc3NhZ2VJZCkgcmV0dXJuIGdhbWUubWVzc2FnZXMuZ2V0KHRoaXMuX21lc3NhZ2VJZClcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBzZXQgbWVzc2FnZSAoeCkge1xuICAgIHRoaXMuX21lc3NhZ2UgPSB4XG4gIH1cblxuICBnZXQgbWVzc2FnZUlkICgpIHtcbiAgICBpZiAodGhpcy5fbWVzc2FnZUlkKSByZXR1cm4gdGhpcy5fbWVzc2FnZUlkXG4gICAgaWYgKHRoaXMuX21lc3NhZ2UpIHJldHVybiB0aGlzLl9tZXNzYWdlLmlkXG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgc2V0IG1lc3NhZ2VJZCAoeCkge1xuICAgIHRoaXMuX21lc3NhZ2VJZCA9IHhcbiAgfVxuXG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhdHRhY2hPYmplY3Q6IHRydWUsXG4gICAgICBjbGFzc2VzOiBbRUNDX0NMQVNTXSxcbiAgICAgIGV4Y2x1ZGU6IFtdLFxuICAgICAgZXhjbHVkZVN0YXJ0V2l0aDogJ18nLFxuICAgICAgc3VibWl0T25DaGFuZ2U6IHRydWUsXG4gICAgICBzcGVha2VyOiBDaGF0TWVzc2FnZS5nZXRTcGVha2VyKCksXG4gICAgICBvb2M6IGZhbHNlLCAvLyAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLm9vYz1mYWxzZV0gIFVzZSB0aGUgc3BlYWtlci9nZXRzcGVha2VyLiBpZiB0cnVlIHVzZSB0aGUgdXNlciBpbnN0ZWFkXG4gICAgICBjb21wdXRlOiB0cnVlLCAvLyAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY29tcHV0ZS5sb2NhbD10cnVlXSBpbnZvcXVlIHRoZSBjb21wdXRlIG1ldGhvZCBhcyBsb2NhbCB1c2VyID0+IG5lZWQgdG8gb3ZlcnJpZGUgbG9jYWxDb21wdXRlXG4gICAgICBHTVVwZGF0ZTogZmFsc2UgLy8gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNvbXB1dGUuR009ZmFsc2VdIGludm9xdWUgdGhlIEdNVXBkYXRlIG1ldGhvZCBhcyBHTSA9PiBuZWVkIHRvIG92ZXJyaWRlIEdNVXBkYXRlXG4gICAgfVxuICB9XG5cbiAgZ2V0IG9iamVjdERhdGFTdHJpbmcgKCkge1xuICAgIGNvbnN0IHNhdmVEYXRhID0ge1xuICAgICAgZGF0YTogdGhpcy5kYXRhLFxuICAgICAgb3B0aW9uczogdGhpcy5fb3B0aW9uc1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc2F2ZURhdGEsIChrZXksIHZhbHVlKSA9PiB7XG4gICAgICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiB1bmRlZmluZWRcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXhjbHVkZT8uaW5jbHVkZXMoa2V5KSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgaWYgKGtleS5zdGFydHNXaXRoKHRoaXMub3B0aW9ucy5leGNsdWRlU3RhcnRXaXRoKSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfSlcbiAgfVxuXG4gIGdldCByb2xsTW9kZSAoKSB7XG4gICAgaWYgKCF0aGlzLl9yb2xsTW9kZSkgdGhpcy5fcm9sbE1vZGUgPSBnYW1lLnNldHRpbmdzLmdldCgnY29yZScsICdyb2xsTW9kZScpXG4gICAgcmV0dXJuIHRoaXMuX3JvbGxNb2RlXG4gIH1cblxuICBzZXQgcm9sbE1vZGUgKHgpIHtcbiAgICBpZiAoeCA9PT0gZmFsc2UpIHRoaXMuX3JvbGxNb2RlID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ2NvcmUnLCAncm9sbE1vZGUnKVxuICAgIHRoaXMuX3JvbGxNb2RlID0geFxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGZyb21NZXNzYWdlSWQgKG1lc3NhZ2VJZCkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBnYW1lLm1lc3NhZ2VzLmdldChtZXNzYWdlSWQpXG4gICAgaWYgKCFtZXNzYWdlKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgY29uc3QgY2FyZCA9IGF3YWl0IHRoaXMuZnJvbU1lc3NhZ2UobWVzc2FnZSlcbiAgICBjYXJkLm1lc3NhZ2VJZCA9IG1lc3NhZ2VJZFxuICAgIHJldHVybiBjYXJkXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgZnJvbU1lc3NhZ2UgKG1lc3NhZ2UpIHtcbiAgICBjb25zdCBjYXJkRWxlbWVudCA9ICQobWVzc2FnZS5kYXRhLmNvbnRlbnQpWzBdXG4gICAgaWYgKCFjYXJkRWxlbWVudCkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGNvbnN0IGNhcmQgPSBhd2FpdCB0aGlzLmZyb21IVE1MQ2FyZEVsZW1lbnQoY2FyZEVsZW1lbnQpXG4gICAgY2FyZC5tZXNzYWdlID0gbWVzc2FnZVxuICAgIHJldHVybiBjYXJkXG4gIH1cblxuICBzdGF0aWMgYXN5bmMgZnJvbUhUTUxDYXJkRWxlbWVudCAoaHRtbWxDYXJkKSB7XG4gICAgaWYgKCFodG1tbENhcmQpIHJldHVyblxuICAgIGlmICghaHRtbWxDYXJkLmRhdGFzZXQuZWNjQ2xhc3MpIHJldHVyblxuICAgIGlmICghaHRtbWxDYXJkLmRhdGFzZXQub2JqZWN0KSByZXR1cm5cbiAgICBjb25zdCBjYXJkRGF0YSA9IEpTT04ucGFyc2UodW5lc2NhcGUoaHRtbWxDYXJkLmRhdGFzZXQub2JqZWN0KSlcbiAgICBjb25zdCBtZXNzYWdlID0gaHRtbWxDYXJkLmNsb3Nlc3QoJy5tZXNzYWdlJylcbiAgICBjb25zdCBtZXNzYWdlSWQgPSBtZXNzYWdlPy5kYXRhc2V0Py5tZXNzYWdlSWRcblxuICAgIHJldHVybiBhd2FpdCB0aGlzLmZyb21EYXRhKFxuICAgICAgY2FyZERhdGEuZGF0YSxcbiAgICAgIGNhcmREYXRhLm9wdGlvbnMsXG4gICAgICBodG1tbENhcmQuZGF0YXNldC5lY2NDbGFzcyxcbiAgICAgIG1lc3NhZ2VJZFxuICAgIClcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBmcm9tRGF0YSAoZGF0YSwgb3B0aW9ucywgY2FyZENsYXNzTmFtZSwgbWVzc2FnZUlkID0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgQ2FyZENsYXNzID0gZ2FtZS5lbmhhbmNlZENoYXRDYXJkc0xpYi50eXBlcy5nZXQoY2FyZENsYXNzTmFtZSlcblxuICAgIGlmICghQ2FyZENsYXNzKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBVbmtub3duIGNoYXQgY2FyZCB0eXBlOiAke2NhcmRDbGFzc05hbWV9YClcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCBjYXJkID0gbmV3IENhcmRDbGFzcyhkYXRhLCBvcHRpb25zKVxuICAgIGlmIChtZXNzYWdlSWQpIGNhcmQubWVzc2FnZUlkID0gbWVzc2FnZUlkXG4gICAgYXdhaXQgY2FyZC5hc3NpZ25PYmplY3RzKClcbiAgICByZXR1cm4gY2FyZFxuICB9XG5cbiAgc2V0RGF0YSAobmFtZSkge1xuICAgIGlmICghbmFtZSAmJiAhKCQudHlwZShuYW1lKSA9PT0gJ3N0cmluZycpKSByZXR1cm5cbiAgICBzZXRCeVBhdGgodGhpcywgbmFtZSwgdHJ1ZSlcbiAgfVxuXG4gIHVuc2V0RGF0YSAobmFtZSkge1xuICAgIGlmICghbmFtZSAmJiAhKCQudHlwZShuYW1lKSA9PT0gJ3N0cmluZycpKSByZXR1cm5cbiAgICBzZXRCeVBhdGgodGhpcywgbmFtZSwgZmFsc2UpXG4gIH1cblxuICB0b2dnbGVEYXRhIChuYW1lKSB7XG4gICAgaWYgKCFuYW1lICYmICEoJC50eXBlKG5hbWUpID09PSAnc3RyaW5nJykpIHJldHVyblxuICAgIGNvbnN0IHZhbHVlID0gZ2V0QnlQYXRoKHRoaXMsIG5hbWUpXG4gICAgc2V0QnlQYXRoKHRoaXMsIG5hbWUsICF2YWx1ZSlcbiAgfVxuXG4gIGFzeW5jIF9vblRvZ2dsZSAoZXZlbnQpIHtcbiAgICAvLyBjb25zdCBhbnN3ZXIgPSBhd2FpdCBFbmhhbmNlZENoYXRDYXJkTGliLnNvY2tldC5leGVjdXRlQXNHTSgnZ21fb25Ub2dnbGUnLCB7XG4gICAgLy8gICBldmVudDogZXZlbnQsXG4gICAgLy8gICBjYXJkOiB0aGlzXG4gICAgLy8gfSlcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgaWYgKCdhY3Rpb24nIGluIHRhcmdldC5kYXRhc2V0KSByZXR1cm4gdGhpcy5fb25CdXR0b24oZXZlbnQpXG4gICAgaWYgKFxuICAgICAgdGFyZ2V0ICYmXG4gICAgICB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdnbS1zZWxlY3Qtb25seScpICYmXG4gICAgICAhZ2FtZS51c2VyLmlzR01cbiAgICApIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCBuYW1lID0gdGFyZ2V0LmRhdGFzZXQuZmxhZ1xuICAgICAgPyBgZGF0YS5mbGFncy4ke3RhcmdldC5kYXRhc2V0LmZsYWd9YFxuICAgICAgOiB0YXJnZXQuZGF0YXNldC5uYW1lXG4gICAgaWYgKCFuYW1lKSByZXR1cm5cbiAgICBjb25zdCB0b2dnbGUgPSB0YXJnZXQuY2xvc2VzdCgnLmVjYy1yYWRpbycpXG4gICAgaWYgKCF0b2dnbGUpIHtcbiAgICAgIHRoaXMudG9nZ2xlRGF0YShuYW1lKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBidXR0b25zID0gdG9nZ2xlLnF1ZXJ5U2VsZWN0b3JBbGwoJy5lY2Mtc3dpdGNoJylcbiAgICAgIGZvciAoY29uc3QgYiBvZiBidXR0b25zKSB7XG4gICAgICAgIGNvbnN0IGJOYW1lID0gYi5kYXRhc2V0LmZsYWdcbiAgICAgICAgICA/IGBkYXRhLmZsYWdzLiR7Yi5kYXRhc2V0LmZsYWd9YFxuICAgICAgICAgIDogYi5kYXRhc2V0Lm5hbWVcbiAgICAgICAgdGhpcy51bnNldERhdGEoYk5hbWUpXG4gICAgICB9XG4gICAgICB0aGlzLnNldERhdGEobmFtZSlcbiAgICB9XG4gICAgY29uc3QgY2FyZCA9IHRhcmdldC5jbG9zZXN0KGAuJHtFQ0NfQ0xBU1N9YClcbiAgICBpZiAodGhpcy5vcHRpb25zLnN1Ym1pdE9uQ2hhbmdlKSB7XG4gICAgICBpZiAoY2FyZCkgdGhpcy5fdXBkYXRlKGNhcmQpXG4gICAgfVxuICAgIGF3YWl0IHRoaXMudXBkYXRlQ2hhdENhcmQoKSAvLyBTdWJtaXQgb24gY2hhbmdlID9cbiAgfVxufVxuIiwiLyogZ2xvYmFsIGdhbWUsIHVpICovXG5pbXBvcnQgeyBjaGF0SGVscGVyIH0gZnJvbSAnLi4vLi4vY2hhdC9oZWxwZXIuanMnXG5pbXBvcnQgeyBDb0M3Q2hlY2sgfSBmcm9tICcuLi8uLi9jaGVjay5qcydcbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMuanMnXG5cbmV4cG9ydCBjbGFzcyBfcGFydGljaXBhbnQge1xuICBjb25zdHJ1Y3RvciAoZGF0YSA9IHt9KSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YVxuICB9XG5cbiAgX2ZldGNoICgpIHtcbiAgICBpZiAoIXRoaXMuX2RvYyAmJiB0aGlzLmRhdGEuZG9jVXVpZCkge1xuICAgICAgdGhpcy5fZG9jID0gQ29DN1V0aWxpdGllcy5nZXREb2N1bWVudEZyb21LZXkodGhpcy5kYXRhLmRvY1V1aWQpXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9hY3Rvcikge1xuICAgICAgaWYgKHRoaXMuX2RvYykge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuX2RvYy5jb25zdHJ1Y3Rvcj8ubmFtZSkge1xuICAgICAgICAgIGNhc2UgJ1Rva2VuRG9jdW1lbnQnOlxuICAgICAgICAgICAgdGhpcy5fYWN0b3IgPSB0aGlzLl9kb2MuYWN0b3JcbiAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICBjYXNlICdDb0NBY3Rvcic6XG4gICAgICAgICAgICB0aGlzLl9hY3RvciA9IHRoaXMuX2RvY1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHRoaXMuX2FjdG9yID0gQ29DN1V0aWxpdGllcy5nZXRBY3RvckZyb21LZXkodGhpcy5kYXRhLmRvY1V1aWQpXG4gICAgfVxuICB9XG5cbiAgZ2V0IGFjdG9yICgpIHtcbiAgICB0aGlzLl9mZXRjaCgpXG4gICAgcmV0dXJuIHRoaXMuX2FjdG9yXG4gIH1cblxuICBnZXQgaXNBY3RvciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzQWN0b3IgfHwgdGhpcy5oYXNWZWhpY2xlXG4gIH1cblxuICBnZXQgaXNBY3RpdmUgKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGEuYWN0aXZlIHx8IGZhbHNlXG4gIH1cblxuICBnZXQga2V5ICgpIHtcbiAgICBpZiAodGhpcy5oYXNWZWhpY2xlKSByZXR1cm4gdGhpcy52ZWhpY2xlLmFjdG9yS2V5XG4gICAgaWYgKHRoaXMuaGFzQWN0b3IpIHJldHVybiB0aGlzLmFjdG9yLmFjdG9yS2V5XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgZ2V0IGljb24gKCkge1xuICAgIGlmICghdGhpcy5pc0FjdG9yKSB7XG4gICAgICByZXR1cm4gJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvcXVlc3Rpb24tY2lyY2xlLXJlZ3VsYXIuc3ZnJ1xuICAgIH1cbiAgICBpZiAodGhpcy5oYXNWZWhpY2xlKSByZXR1cm4gdGhpcy52ZWhpY2xlLmltZ1xuICAgIGlmICh0aGlzLmhhc0FjdG9yKSByZXR1cm4gdGhpcy5hY3Rvci5pbWdcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBnZXQgZHJpdmVyICgpIHtcbiAgICBpZiAoIXRoaXMuX2RyaXZlcikge1xuICAgICAgdGhpcy5fZHJpdmVyID0gQ29DN1V0aWxpdGllcy5nZXRBY3RvckZyb21LZXkodGhpcy5kYXRhLmRvY1V1aWQpXG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9kcml2ZXJcbiAgfVxuXG4gIGdldCB2ZWhpY2xlICgpIHtcbiAgICBpZiAodGhpcy5kYXRhLnZlaGljbGVLZXkpIHtcbiAgICAgIHRoaXMuX3ZlaGljbGUgPSBjaGF0SGVscGVyLmdldEFjdG9yRnJvbUtleSh0aGlzLmRhdGEudmVoaWNsZUtleSlcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3ZlaGljbGVcbiAgfVxuXG4gIGdldCBoYXNBY3RvciAoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5hY3RvclxuICB9XG5cbiAgZ2V0IGhhc1ZlaGljbGUgKCkge1xuICAgIHJldHVybiAhIXRoaXMudmVoaWNsZVxuICB9XG5cbiAgZ2V0IG5hbWUgKCkge1xuICAgIGlmICh0aGlzLmhhc1ZlaGljbGUpIHJldHVybiB0aGlzLnZlaGljbGUubmFtZVxuICAgIGlmICh0aGlzLmhhc0FjdG9yKSByZXR1cm4gdGhpcy5hY3Rvci5uYW1lXG4gICAgcmV0dXJuIHRoaXMuZGF0YS5uYW1lIHx8IHVuZGVmaW5lZFxuICB9XG5cbiAgZ2V0IG1vdiAoKSB7XG4gICAgaWYgKCF0aGlzLmRhdGEubW92KSB7XG4gICAgICBpZiAodGhpcy5oYXNWZWhpY2xlKSB0aGlzLmRhdGEubW92ID0gdGhpcy52ZWhpY2xlLm1vdlxuICAgICAgZWxzZSBpZiAodGhpcy5oYXNBY3RvcikgdGhpcy5kYXRhLm1vdiA9IHRoaXMuYWN0b3IubW92XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZGF0YS5tb3YpIHtcbiAgICAgIGlmICghaXNOYU4oTnVtYmVyKHRoaXMuZGF0YS5tb3YpKSkgdGhpcy5kYXRhLmhhc1ZhbGlkTW92ID0gdHJ1ZVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuZGF0YS5oYXNWYWxpZE1vdiA9IGZhbHNlXG4gICAgICAgIHRoaXMuZGF0YS5tb3YgPSB1bmRlZmluZWRcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5kYXRhLm1vdlxuICB9XG5cbiAgZ2V0IHV1aWQgKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGEudXVpZFxuICB9XG5cbiAgZ2V0IGhhc01heEJvbnVzRGljZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYm9udXNEaWNlID49IDJcbiAgfVxuXG4gIGdldCBib251c0RpY2UgKCkge1xuICAgIGlmIChcbiAgICAgIGlzTmFOKHRoaXMuZGF0YS5ib251c0RpY2UpIHx8XG4gICAgICB0aGlzLmRhdGEuYm9udXNEaWNlIDwgMCB8fFxuICAgICAgdGhpcy5kYXRhLmJvbnVzRGljZSA+IDJcbiAgICApIHtcbiAgICAgIHJldHVybiAwXG4gICAgfVxuICAgIHJldHVybiB0aGlzLmRhdGEuYm9udXNEaWNlXG4gIH1cblxuICBzZXQgYm9udXNEaWNlICh4KSB7XG4gICAgaWYgKGlzTmFOKHgpKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKCdCb251cyBkaWNlIGNhbiBPbmx5IGJlIGEgbnVtYmVyJylcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAoeCA+IDIpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoJ01heCAyIGJvbnVzIGRpY2UnKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmICh4IDwgMCkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcignTm8gbmVnYXRpdiBib251cyBkaWNlJylcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB0aGlzLmRhdGEuYm9udXNEaWNlID0geFxuICB9XG5cbiAgZ2V0IGhwICgpIHtcbiAgICBpZiAoIXRoaXMuZGF0YS5ocCkge1xuICAgICAgdGhpcy5kYXRhLmhwID0gMFxuICAgIH1cbiAgICBpZiAodGhpcy5hY3Rvcikge1xuICAgICAgdGhpcy5kYXRhLmhwID0gdGhpcy5hY3Rvci5ocFxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmRhdGEuaHBcbiAgfVxuXG4gIHNldCBocCAoeCkge1xuICAgIHRoaXMuZGF0YS5ocCA9IHhcbiAgICBpZiAodGhpcy5hY3Rvcikge1xuICAgICAgdGhpcy5hY3Rvci5zZXRIcCh4KVxuICAgIH1cbiAgfVxuXG4gIGFkZEJvbnVzRGljZSAoKSB7XG4gICAgaWYgKHRoaXMuZGF0YS5ib251c0RpY2UgPj0gMikge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcignQWxyZWFkeSBoYXZlIG1heCBib251cyBkaWNlJylcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB0aGlzLmRhdGEuYm9udXNEaWNlICs9IDFcbiAgfVxuXG4gIHJlbW92ZUJvbnVzRGljZSAoKSB7XG4gICAgaWYgKHRoaXMuZGF0YS5ib251c0RpY2UgPD0gMCkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcignQWxyZWFkeSBoYXZlIDAgYm9udXMgZGljZScpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdGhpcy5kYXRhLmJvbnVzRGljZSAtPSAxXG4gIH1cblxuICByZXNldEJvbnVzRGljZSAoKSB7XG4gICAgdGhpcy5kYXRhLmJvbnVzRGljZSA9IDBcbiAgfVxuXG4gIGdldCBoYXNCb251c0RpY2UgKCkge1xuICAgIHJldHVybiB0aGlzLmhhc09uZUJvbnVzRGljZSB8fCB0aGlzLmhhc1R3b0JvbnVzRGljZVxuICB9XG5cbiAgZ2V0IGhhc09uZUJvbnVzRGljZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYm9udXNEaWNlID49IDFcbiAgfVxuXG4gIGdldCBoYXNUd29Cb251c0RpY2UgKCkge1xuICAgIHJldHVybiB0aGlzLmJvbnVzRGljZSA+PSAyXG4gIH1cblxuICBnZXQgY2FuQXNzaXN0ICgpIHtcbiAgICByZXR1cm4gdGhpcy5hc3Npc3Q/Lmxlbmd0aCA+IDBcbiAgfVxuXG4gIGdldCBjYW5CZUNhdXRpb3VzICgpIHtcbiAgICByZXR1cm4gIXRoaXMuaGFzTWF4Qm9udXNEaWNlXG4gIH1cblxuICBnZXQgYXNzaXN0ICgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLmFzc2lzdCB8fCBbXVxuICB9XG5cbiAgZ2V0IGRleCAoKSB7XG4gICAgaWYgKCF0aGlzLmRhdGEuZGV4KSB7XG4gICAgICBpZiAodGhpcy5oYXNWZWhpY2xlICYmIHRoaXMuaGFzRHJpdmVyKSB7XG4gICAgICAgIHRoaXMuZGF0YS5kZXggPSB0aGlzLmRyaXZlci5jaGFyYWN0ZXJpc3RpY3MuZGV4LnZhbHVlXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaGFzQWN0b3IpIHtcbiAgICAgICAgdGhpcy5kYXRhLmRleCA9IHRoaXMuYWN0b3IuY2hhcmFjdGVyaXN0aWNzLmRleC52YWx1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmRhdGEuZGV4KSB7XG4gICAgICBpZiAoIWlzTmFOKE51bWJlcih0aGlzLmRhdGEuZGV4KSkpIHRoaXMuZGF0YS5oYXNWYWxpZERleCA9IHRydWVcbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmRhdGEuaGFzVmFsaWREZXggPSBmYWxzZVxuICAgICAgICB0aGlzLmRhdGEuZGV4ID0gMFxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmRhdGEuZGV4XG4gIH1cblxuICBnZXQgaGFzQUd1blJlYWR5ICgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLmhhc0FHdW5SZWFkeSB8fCBmYWxzZVxuICB9XG5cbiAgZ2V0IGluaXRpYXRpdmUgKCkge1xuICAgIGxldCBpbml0ID0gdGhpcy5kZXhcbiAgICBpZiAodGhpcy5oYXNBR3VuUmVhZHkpIHtcbiAgICAgIGluaXQgKz0gNTBcbiAgICB9XG4gICAgLy8gaWYoIHRoaXMuc3BlZWRDaGVjayl7XG4gICAgLy8gICBpZih0aGlzLnNwZWVkQ2hlY2suc2NvcmUpIGluaXQgKz0gdGhpcy5zcGVlZENoZWNrLnNjb3JlLzEwMFxuICAgIC8vIH1cblxuICAgIHJldHVybiBpbml0XG4gIH1cblxuICBnZXQgaXNDaGFzZXIgKCkge1xuICAgIHJldHVybiAhIXRoaXMuZGF0YS5jaGFzZXJcbiAgfVxuXG4gIGdldCBpc1ByZXkgKCkge1xuICAgIHJldHVybiAhdGhpcy5pc0NoYXNlclxuICB9XG5cbiAgZ2V0IGlzVmFsaWQgKCkge1xuICAgIHJldHVybiB0aGlzLmhhc1ZhbGlkRGV4ICYmIHRoaXMuaGFzVmFsaWRNb3ZcbiAgfVxuXG4gIGdldCBoYXNWYWxpZERleCAoKSB7XG4gICAgcmV0dXJuICFpc05hTihOdW1iZXIodGhpcy5kYXRhLmRleCkpXG4gIH1cblxuICBnZXQgaGFzVmFsaWRNb3YgKCkge1xuICAgIHJldHVybiAhaXNOYU4oTnVtYmVyKHRoaXMuZGF0YS5tb3YpKVxuICB9XG5cbiAgZ2V0IGhhc0RyaXZlciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzVmVoaWNsZSAmJiB0aGlzLmhhc0FjdG9yXG4gIH1cblxuICBnZXQgbW92QWRqdXN0bWVudCAoKSB7XG4gICAgaWYgKHRoaXMuZGF0YS5zcGVlZENoZWNrPy5yb2xsRGF0YVN0cmluZykge1xuICAgICAgY29uc3Qgcm9sbCA9IENvQzdDaGVjay5mcm9tUm9sbFN0cmluZyh0aGlzLmRhdGEuc3BlZWRDaGVjay5yb2xsRGF0YVN0cmluZylcbiAgICAgIGlmIChyb2xsKSB7XG4gICAgICAgIGlmICghcm9sbC5zdGFuZGJ5KSB7XG4gICAgICAgICAgaWYgKHJvbGwuc3VjY2Vzc0xldmVsID49IENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZXh0cmVtZSkgcmV0dXJuIDFcbiAgICAgICAgICBlbHNlIGlmIChyb2xsLmZhaWxlZCkgcmV0dXJuIC0xXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIDBcbiAgfVxuXG4gIGdldCBhZGp1c3RlZE1vdiAoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLm1vdiA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiB1bmRlZmluZWRcbiAgICBpZiAoaXNOYU4oTnVtYmVyKHRoaXMubW92KSkpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gTnVtYmVyKHRoaXMubW92KSArIHRoaXMubW92QWRqdXN0bWVudFxuICB9XG5cbiAgZ2V0IGhhc01vdkFkanVzdG1lbnQgKCkge1xuICAgIHJldHVybiB0aGlzLmhhc0JvbnVzTW92IHx8IHRoaXMuaGFzTWFsdXNNb3ZcbiAgfVxuXG4gIGdldCBoYXNCb251c01vdiAoKSB7XG4gICAgaWYgKHRoaXMuZGF0YS5tb3ZBZGp1c3RtZW50ID4gMCkgcmV0dXJuIHRydWVcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGdldCBoYXNNYWx1c01vdiAoKSB7XG4gICAgaWYgKHRoaXMuZGF0YS5tb3ZBZGp1c3RtZW50IDwgMCkgcmV0dXJuIHRydWVcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIGdldCBvcHRpb25zKCl7XG4gIC8vICByZXR1cm4ge1xuICAvLyAgICBleGNsdWRlOiBbXSxcbiAgLy8gICAgZXhjbHVkZVN0YXJ0V2l0aDogJ18nXG4gIC8vICB9O1xuICAvLyB9XG5cbiAgLy8gZ2V0IGRhdGFTdHJpbmcoKXtcbiAgLy8gIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLCAoa2V5LHZhbHVlKT0+e1xuICAvLyAgICBpZiggbnVsbCA9PT0gdmFsdWUpIHJldHVybiB1bmRlZmluZWQ7XG4gIC8vICAgIGlmKCB0aGlzLm9wdGlvbnMuZXhjbHVkZT8uaW5jbHVkZXMoa2V5KSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgLy8gICAgaWYoIGtleS5zdGFydHNXaXRoKHRoaXMub3B0aW9ucy5leGNsdWRlU3RhcnRXaXRoKSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgLy8gICAgcmV0dXJuIHZhbHVlO1xuICAvLyAgfSk7XG4gIC8vIH1cblxuICB0b29TbG93ICgpIHtcbiAgICB0aGlzLmRhdGEuZXhjbHVkZWQgPSB0cnVlXG4gIH1cblxuICBpbmNsdWRlSW5DaGFzZSAoKSB7XG4gICAgdGhpcy5kYXRhLmV4Y2x1ZGVkID0gZmFsc2VcbiAgICB0aGlzLmRhdGEuZXNjYXBlZCA9IGZhbHNlXG4gIH1cblxuICBlc2NhcGVkICgpIHtcbiAgICB0aGlzLmRhdGEuZXNjYXBlZCA9IHRydWVcbiAgfVxuXG4gIHNldCBzbG93ZXN0ICh4KSB7XG4gICAgdGhpcy5kYXRhLnNsb3dlc3QgPSB4XG4gIH1cblxuICBnZXQgc2xvd2VzdCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS5zbG93ZXN0XG4gIH1cblxuICBzZXQgZmFzdGVzdCAoeCkge1xuICAgIHRoaXMuZGF0YS5mYXN0ZXN0ID0geFxuICB9XG5cbiAgZ2V0IGZhc3Rlc3QgKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGEuZmFzdGVzdFxuICB9XG5cbiAgY2FsY3VsYXRlTW92ZW1lbnRBY3Rpb25zIChtaW5Nb3YpIHtcbiAgICBpZiAoXG4gICAgICB0eXBlb2YgdGhpcy5tb3ZlbWVudEFjdGlvbiA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgIHR5cGVvZiB0aGlzLmFkanVzdGVkTW92ID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgaXNOYU4obWluTW92KVxuICAgICkge1xuICAgICAgdGhpcy5tb3ZlbWVudEFjdGlvbiA9IDBcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tb3ZlbWVudEFjdGlvbiA9IDEgKyAodGhpcy5hZGp1c3RlZE1vdiAtIG1pbk1vdilcbiAgICB9XG4gICAgLy8gaWYoIHRoaXMubW92ZW1lbnRBY3Rpb24gPCAwKSB0aGlzLm1vdmVtZW50QWN0aW9uID0gMFxuICB9XG5cbiAgc2V0IG1vdmVtZW50QWN0aW9uICh4KSB7XG4gICAgdGhpcy5kYXRhLm1vdmVtZW50QWN0aW9uID0geFxuICB9XG5cbiAgZ2V0IG1vdmVtZW50QWN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLm1vdmVtZW50QWN0aW9uXG4gIH1cblxuICBzZXQgY3VycmVudE1vdmVtZW50QWN0aW9ucyAoeCkge1xuICAgIHRoaXMuZGF0YS5jdXJyZW50TW92ZW1lbnRBY3Rpb25zID0geFxuICB9XG5cbiAgZ2V0IGN1cnJlbnRNb3ZlbWVudEFjdGlvbnMgKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGEuY3VycmVudE1vdmVtZW50QWN0aW9ucyB8fCAwXG4gIH1cblxuICBnZXQgaGFzTWF4TXZ0QWN0aW9ucyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudE1vdmVtZW50QWN0aW9ucyA+PSB0aGlzLm1vdmVtZW50QWN0aW9uXG4gIH1cblxuICBnZXQgaGFzTm9NdnRBY3Rpb25zICgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50TW92ZW1lbnRBY3Rpb25zIDw9IDBcbiAgfVxuXG4gIGFkZE1vdmVtZW50QWN0aW9ucyAoeCA9IDEpIHtcbiAgICB0aGlzLmN1cnJlbnRNb3ZlbWVudEFjdGlvbnMgKz0geFxuICAgIGlmICh0aGlzLmN1cnJlbnRNb3ZlbWVudEFjdGlvbnMgPiB0aGlzLm1vdmVtZW50QWN0aW9uKSB7XG4gICAgICB0aGlzLmN1cnJlbnRNb3ZlbWVudEFjdGlvbnMgPSB0aGlzLm1vdmVtZW50QWN0aW9uXG4gICAgfVxuICB9XG5cbiAgYWx0ZXJNb3ZlbWVudEFjdGlvbnMgKHgpIHtcbiAgICB0aGlzLmN1cnJlbnRNb3ZlbWVudEFjdGlvbnMgKz0geFxuICAgIGlmICh0aGlzLmN1cnJlbnRNb3ZlbWVudEFjdGlvbnMgPiB0aGlzLm1vdmVtZW50QWN0aW9uKSB7XG4gICAgICB0aGlzLmN1cnJlbnRNb3ZlbWVudEFjdGlvbnMgPSB0aGlzLm1vdmVtZW50QWN0aW9uXG4gICAgfVxuICB9XG5cbiAgZ2V0IG1vdmVtZW50QWN0aW9uQXJyYXkgKCkge1xuICAgIGNvbnN0IGJhc2VBcnJheSA9IEFycmF5KHRoaXMubW92ZW1lbnRBY3Rpb24pLmZpbGwoJ2Jhc2UnKVxuICAgIGlmICh0aGlzLmN1cnJlbnRNb3ZlbWVudEFjdGlvbnMgPj0gMCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmN1cnJlbnRNb3ZlbWVudEFjdGlvbnM7IGkrKykge1xuICAgICAgICBiYXNlQXJyYXlbaV0gPSAnYmFzZSBhdmFpbGFibGUnXG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUFycmF5XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY3VycmVudE1vdmVtZW50QWN0aW9ucyA8IDApIHtcbiAgICAgIGNvbnN0IGRlZmljaXRBcnJheSA9IEFycmF5KE1hdGguYWJzKHRoaXMuY3VycmVudE1vdmVtZW50QWN0aW9ucykpLmZpbGwoXG4gICAgICAgICdkZWZpY2l0J1xuICAgICAgKVxuICAgICAgcmV0dXJuIGRlZmljaXRBcnJheS5jb25jYXQoYmFzZUFycmF5KVxuICAgIH1cbiAgfVxuXG4gIGdldCBjc3NDbGFzcyAoKSB7XG4gICAgY29uc3QgY3NzQ2xhc3NlcyA9IFtdXG4gICAgaWYgKHRoaXMuaXNDaGFzZXIpIGNzc0NsYXNzZXMucHVzaCgnY2hhc2VyJylcbiAgICBlbHNlIGNzc0NsYXNzZXMucHVzaCgncHJleScpXG4gICAgaWYgKHRoaXMuZGF0YS5leGNsdWRlZCkgY3NzQ2xhc3Nlcy5wdXNoKCdleGNsdWRlZCcsICd0b29fc2xvdycpXG4gICAgaWYgKHRoaXMuZGF0YS5lc2NhcGVkKSBjc3NDbGFzc2VzLnB1c2goJ2VzY2FwZWQnKVxuICAgIGlmICh0aGlzLmRhdGEuZmFzdGVzdCkgY3NzQ2xhc3Nlcy5wdXNoKCdmYXN0ZXN0JylcbiAgICBpZiAodGhpcy5kYXRhLnNsb3dlc3QpIGNzc0NsYXNzZXMucHVzaCgnc2xvd2VzdCcpXG4gICAgaWYgKHRoaXMuZGF0YS5hY3RpdmUpIGNzc0NsYXNzZXMucHVzaCgnYWN0aXZlJylcbiAgICBpZiAodGhpcy5kYXRhLmN1cnJlbnRNb3ZlbWVudEFjdGlvbnMgPD0gMCkgY3NzQ2xhc3Nlcy5wdXNoKCduby1hY3Rpb25zJylcbiAgICByZXR1cm4gY3NzQ2xhc3Nlcy5qb2luKCcgJylcbiAgfVxuXG4gIGdldCBzcGVlZENoZWNrICgpIHtcbiAgICBjb25zdCBjaGVjayA9IHt9XG4gICAgaWYgKHRoaXMuZGF0YS5zcGVlZENoZWNrPy5uYW1lKSBjaGVjay5uYW1lID0gdGhpcy5kYXRhLnNwZWVkQ2hlY2submFtZVxuICAgIGlmICh0aGlzLmRhdGEuc3BlZWRDaGVjaz8uc2NvcmUpIGNoZWNrLnNjb3JlID0gdGhpcy5kYXRhLnNwZWVkQ2hlY2suc2NvcmVcbiAgICBjaGVjay5jc3NDbGFzc2VzID0gJydcbiAgICBpZiAodGhpcy5kYXRhLnNwZWVkQ2hlY2s/LnJvbGxEYXRhU3RyaW5nKSB7XG4gICAgICBjaGVjay5yb2xsID0gQ29DN0NoZWNrLmZyb21Sb2xsU3RyaW5nKHRoaXMuZGF0YS5zcGVlZENoZWNrLnJvbGxEYXRhU3RyaW5nKVxuICAgICAgaWYgKGNoZWNrLnJvbGwpIHtcbiAgICAgICAgaWYgKCFjaGVjay5yb2xsLnN0YW5kYnkgfHwgY2hlY2sucm9sbC5oYXNDYXJkKSB7XG4gICAgICAgICAgY2hlY2sucm9sbGVkID0gdHJ1ZVxuICAgICAgICAgIGNoZWNrLmlubGluZVJvbGwgPSBjaGVjay5yb2xsLmlubGluZUNoZWNrLm91dGVySFRNTFxuICAgICAgICAgIGNoZWNrLmNzc0NsYXNzZXMgKz0gJ3JvbGxlZCdcbiAgICAgICAgICBpZiAoIWNoZWNrLnJvbGwuc3RhbmRieSkge1xuICAgICAgICAgICAgaWYgKGNoZWNrLnJvbGwuc3VjY2Vzc0xldmVsID49IENvQzdDaGVjay5zdWNjZXNzTGV2ZWwuZXh0cmVtZSkge1xuICAgICAgICAgICAgICBjaGVjay5tb2RpZmllckNzcyA9ICd1cGdyYWRlJ1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaGVjay5yb2xsLmZhaWxlZCkgY2hlY2subW9kaWZpZXJDc3MgPSAnZG93bmdyYWRlJ1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBjaGVjay5yb2xsLnN1Y2Nlc3NMZXZlbCA+PSBDb0M3Q2hlY2suc3VjY2Vzc0xldmVsLmV4dHJlbWUgfHxcbiAgICAgICAgICAgICAgY2hlY2sucm9sbC5mYWlsZWRcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjaGVjay5oYXNNb2RpZmllciA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuaGFzQWN0b3IpIHtcbiAgICAgIGNoZWNrLm9wdGlvbnMgPSBbXVxuICAgICAgZm9yIChjb25zdCBjIG9mIFsnY29uJ10pIHtcbiAgICAgICAgY29uc3QgY2hhcmFjdGVyaXN0aWMgPSB0aGlzLmFjdG9yLmdldENoYXJhY3RlcmlzdGljKGMpXG4gICAgICAgIGlmIChjaGFyYWN0ZXJpc3RpYz8udmFsdWUpIGNoZWNrLm9wdGlvbnMucHVzaChjaGFyYWN0ZXJpc3RpYy5sYWJlbClcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBzIG9mIHRoaXMuYWN0b3IuZHJpdmVTa2lsbHMpIHtcbiAgICAgICAgY2hlY2sub3B0aW9ucy5wdXNoKHMubmFtZSlcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBzIG9mIHRoaXMuYWN0b3IucGlsb3RTa2lsbHMpIHtcbiAgICAgICAgY2hlY2sub3B0aW9ucy5wdXNoKHMubmFtZSlcbiAgICAgIH1cbiAgICAgIGNoZWNrLmhhc09wdGlvbnMgPSAhIWNoZWNrLm9wdGlvbnMubGVuZ3RoXG5cbiAgICAgIGlmICh0aGlzLmRhdGEuc3BlZWRDaGVjaz8uaWQpIHtcbiAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLmFjdG9yLmZpbmQodGhpcy5kYXRhLnNwZWVkQ2hlY2suaWQpXG4gICAgICAgIGlmICghaXRlbSkge1xuICAgICAgICAgIGNvbnN0IGdhbWVJdGVtID0gZ2FtZS5pdGVtcy5nZXQodGhpcy5kYXRhLnNwZWVkQ2hlY2suaWQpXG4gICAgICAgICAgaWYgKGdhbWVJdGVtKSBpdGVtID0gdGhpcy5hY3Rvci5maW5kKGdhbWVJdGVtLm5hbWUpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdpdGVtJyAmJiBpdGVtLnZhbHVlLmRhdGE/LnR5cGUgPT09ICdza2lsbCcpIHtcbiAgICAgICAgICAgIGNoZWNrLnJlZiA9IGl0ZW0udmFsdWVcbiAgICAgICAgICAgIGNoZWNrLm5hbWUgPSBpdGVtLnZhbHVlLm5hbWVcbiAgICAgICAgICAgIGNoZWNrLnR5cGUgPSAnc2tpbGwnXG4gICAgICAgICAgICBjaGVjay5pc1NraWxsID0gdHJ1ZVxuICAgICAgICAgICAgY2hlY2sucmVmU2V0ID0gdHJ1ZVxuICAgICAgICAgICAgY2hlY2suc2NvcmUgPSBpdGVtLnZhbHVlLnZhbHVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdjaGFyYWN0ZXJpc3RpYycpIHtcbiAgICAgICAgICAgIGNoZWNrLnJlZiA9IGl0ZW0udmFsdWVcbiAgICAgICAgICAgIGNoZWNrLm5hbWUgPSBpdGVtLnZhbHVlLmxhYmVsXG4gICAgICAgICAgICBjaGVjay50eXBlID0gJ2NoYXJhY3RlcmlzdGljJ1xuICAgICAgICAgICAgY2hlY2suaXNDaGFyYWN0ZXJpc3RpYyA9IHRydWVcbiAgICAgICAgICAgIGNoZWNrLnJlZlNldCA9IHRydWVcbiAgICAgICAgICAgIGNoZWNrLnNjb3JlID0gaXRlbS52YWx1ZS52YWx1ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnYXR0cmlidXRlJykge1xuICAgICAgICAgICAgY2hlY2sucmVmID0gaXRlbS52YWx1ZVxuICAgICAgICAgICAgY2hlY2submFtZSA9IGl0ZW0udmFsdWUubGFiZWxcbiAgICAgICAgICAgIGNoZWNrLnR5cGUgPSAnYXR0cmlidXRlJ1xuICAgICAgICAgICAgY2hlY2suaXNBdHRyaWJ1dGUgPSB0cnVlXG4gICAgICAgICAgICBjaGVjay5yZWZTZXQgPSB0cnVlXG4gICAgICAgICAgICBjaGVjay5zY29yZSA9IGl0ZW0udmFsdWUudmFsdWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhLnNwZWVkQ2hlY2s/Lm5hbWUpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuYWN0b3IuZmluZCh0aGlzLmRhdGEuc3BlZWRDaGVjay5uYW1lKVxuICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdpdGVtJyAmJiBpdGVtLnZhbHVlLmRhdGE/LnR5cGUgPT09ICdza2lsbCcpIHtcbiAgICAgICAgICAgIGNoZWNrLnJlZiA9IGl0ZW0udmFsdWVcbiAgICAgICAgICAgIGNoZWNrLm5hbWUgPSBpdGVtLnZhbHVlLm5hbWVcbiAgICAgICAgICAgIGNoZWNrLnR5cGUgPSAnc2tpbGwnXG4gICAgICAgICAgICBjaGVjay5pc1NraWxsID0gdHJ1ZVxuICAgICAgICAgICAgY2hlY2sucmVmU2V0ID0gdHJ1ZVxuICAgICAgICAgICAgY2hlY2suc2NvcmUgPSBpdGVtLnZhbHVlLnZhbHVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdjaGFyYWN0ZXJpc3RpYycpIHtcbiAgICAgICAgICAgIGNoZWNrLnJlZiA9IGl0ZW0udmFsdWVcbiAgICAgICAgICAgIGNoZWNrLm5hbWUgPSBpdGVtLnZhbHVlLmxhYmVsXG4gICAgICAgICAgICBjaGVjay50eXBlID0gJ2NoYXJhY3RlcmlzdGljJ1xuICAgICAgICAgICAgY2hlY2suaXNDaGFyYWN0ZXJpc3RpYyA9IHRydWVcbiAgICAgICAgICAgIGNoZWNrLnJlZlNldCA9IHRydWVcbiAgICAgICAgICAgIGNoZWNrLnNjb3JlID0gaXRlbS52YWx1ZS52YWx1ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnYXR0cmlidXRlJykge1xuICAgICAgICAgICAgY2hlY2sucmVmID0gaXRlbS52YWx1ZVxuICAgICAgICAgICAgY2hlY2submFtZSA9IGl0ZW0udmFsdWUubGFiZWxcbiAgICAgICAgICAgIGNoZWNrLnR5cGUgPSAnYXR0cmlidXRlJ1xuICAgICAgICAgICAgY2hlY2suaXNBdHRyaWJ1dGUgPSB0cnVlXG4gICAgICAgICAgICBjaGVjay5yZWZTZXQgPSB0cnVlXG4gICAgICAgICAgICBjaGVjay5zY29yZSA9IGl0ZW0udmFsdWUudmFsdWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YS5zcGVlZENoZWNrPy5pZCkge1xuICAgICAgY29uc3QgaXRlbSA9IGdhbWUuaXRlbXMuZ2V0KHRoaXMuZGF0YS5zcGVlZENoZWNrLmlkKVxuICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgaWYgKGl0ZW0uZGF0YT8udHlwZSA9PT0gJ3NraWxsJykge1xuICAgICAgICAgIGNoZWNrLnJlZiA9IGl0ZW1cbiAgICAgICAgICBjaGVjay5uYW1lID0gaXRlbS5uYW1lXG4gICAgICAgICAgY2hlY2sudHlwZSA9ICdza2lsbCdcbiAgICAgICAgICBjaGVjay5pc1NraWxsID0gdHJ1ZVxuICAgICAgICAgIGNoZWNrLnJlZlNldCA9IGZhbHNlXG4gICAgICAgICAgY2hlY2suc2NvcmUgPSBpdGVtLmJhc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhLnNwZWVkQ2hlY2s/Lm5hbWUgJiYgdGhpcy5kYXRhLnNwZWVkQ2hlY2s/LnNjb3JlKSB7XG4gICAgICBjaGVjay5uYW1lID0gdGhpcy5kYXRhLnNwZWVkQ2hlY2submFtZVxuICAgICAgY2hlY2suc2NvcmUgPSB0aGlzLmRhdGEuc3BlZWRDaGVjay5zY29yZVxuICAgICAgY2hlY2sucmVmU2V0ID0gZmFsc2VcbiAgICB9XG5cbiAgICBjaGVjay5jYW5CZVJvbGxlZCA9IHRydWVcblxuICAgIGlmICghY2hlY2sucm9sbGVkICYmICFjaGVjay5zY29yZSkge1xuICAgICAgY2hlY2suY3NzQ2xhc3NlcyArPSAnIGludmFsaWQnXG4gICAgICBjaGVjay5jYW5CZVJvbGxlZCA9IGZhbHNlXG4gICAgfVxuICAgIGNoZWNrLmlzVmFsaWQgPSBjaGVjay5yb2xsZWQgJiYgIWlzTmFOKGNoZWNrLnNjb3JlKVxuXG4gICAgcmV0dXJuIGNoZWNrXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNvcnRCeVJvbGVBbmREZXggKGEsIGIpIHtcbiAgaWYgKCFhICYmIGIpIHJldHVybiAxXG4gIGlmICghYiAmJiBhKSByZXR1cm4gLTFcbiAgaWYgKCFhICYmICFiKSByZXR1cm4gMFxuICAvLyBQdXQgY2hhc2VycyBmaXJzdFxuICBpZiAoYi5jaGFzZXIgJiYgIWEuY2hhc2VyKSByZXR1cm4gMVxuICBpZiAoYS5jaGFzZXIgJiYgIWIuY2hhc2VyKSByZXR1cm4gLTFcbiAgLy8gSWYgc2FtZXR5cGUgc29ydCBieSBkZXhcbiAgcmV0dXJuIGEuZGV4IC0gYi5kZXhcbn1cbiIsIi8qIGdsb2JhbCBmb3VuZHJ5LCBnYW1lLCBSb2xsLCB1aSAqL1xuaW1wb3J0IHsgQ29DN0NoZWNrIH0gZnJvbSAnLi4vLi4vY2hlY2suanMnXG5pbXBvcnQgeyBFbmhhbmNlZENoYXRDYXJkIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NoYXRjYXJkbGliL3NyYy9jaGF0Y2FyZGxpYi5qcydcbmltcG9ydCB7IENvQzdEaWNlIH0gZnJvbSAnLi4vLi4vZGljZS5qcydcbmltcG9ydCB7IF9wYXJ0aWNpcGFudCB9IGZyb20gJy4uLy4uL2l0ZW1zL2NoYXNlL3BhcnRpY2lwYW50LmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy5qcydcbmltcG9ydCB7IGNyZWF0ZUlubGluZVJvbGwgfSBmcm9tICcuLi9oZWxwZXIuanMnXG5cbmV4cG9ydCBjbGFzcyBDaGFzZU9ic3RhY2xlQ2FyZCBleHRlbmRzIEVuaGFuY2VkQ2hhdENhcmQge1xuICAvKiogQG92ZXJyaWRlICovXG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMgKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRPcHRpb25zLCB7XG4gICAgICB0ZW1wbGF0ZTogJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvY2hhdC9jYXJkcy9jaGFzZS1vYnN0YWNsZS5odG1sJyxcbiAgICAgIEdNVXBkYXRlOiB0cnVlXG4gICAgfSlcbiAgICBvcHRpb25zLmNsYXNzZXMucHVzaCgnb2JzdGFjbGUtY2FyZCcpXG4gICAgcmV0dXJuIG9wdGlvbnNcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgYXN5bmMgZ2V0RGF0YSAoKSB7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHN1cGVyLmdldERhdGEoKVxuXG4gICAgZGF0YS5zdGF0dXMgPSBbXVxuICAgIGRhdGEuc3RyaW5ncyA9IHt9XG4gICAgZGF0YS5kaXNwbGF5QWN0b3JPbkNhcmQgPSBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdkaXNwbGF5QWN0b3JPbkNhcmQnKVxuICAgIC8vIGRhdGEucGFydGljaXBhbnQgPSBuZXcgX3BhcnRpY2lwYW50KHRoaXMucGFydGljaXBhbnREYXRhKVxuXG4gICAgZGF0YS5zdGF0dXMucHVzaCh7XG4gICAgICBuYW1lOlxuICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQWN0aW9uQ29zdCcpICsgYCA6JHt0aGlzLmRhdGEudG90YWxBY3Rpb25Db3N0fWBcbiAgICB9KVxuXG4gICAgZGF0YS5jYXJkLmJyZWFrYWJsZU9ic3RhY2xlID1cbiAgICAgIGRhdGEuZGF0YS5vYnN0YWNsZT8uYmFycmllciAmJiBkYXRhLmRhdGEub2JzdGFjbGUuaGFzSGl0UG9pbnRzIC8vIFRPRE86IENoZWNrIGlmIHVzZWZ1bGxcbiAgICBkYXRhLmNhcmQudmFsaWRDaGVjayA9IGZhbHNlXG5cbiAgICBpZiAoXG4gICAgICBkYXRhLmRhdGEuc3RhdGVzPy5vYnN0YWNsZURlZmluZWQgJiZcbiAgICAgIChkYXRhLmRhdGEub2JzdGFjbGUuaGF6YXJkIHx8XG4gICAgICAgIChkYXRhLmRhdGEub2JzdGFjbGUuYmFycmllciAmJiAhZGF0YS5kYXRhLm9ic3RhY2xlLmhhc0hpdFBvaW50cykpXG4gICAgKSB7XG4gICAgICBkYXRhLmRhdGEuc3RhdGVzLnRyeVRvTmVnb3RpYXRlID0gdHJ1ZVxuICAgICAgZGF0YS5kYXRhLnN0YXRlcy50cnlUb0JyZWFrID0gZmFsc2VcbiAgICAgIGRhdGEuZGF0YS5zdGF0ZXMuYnJlYWtPck5lZ290aWF0ZURlZmluZWQgPSB0cnVlXG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGFydGljaXBhbnQ/LmFjdG9yKSB7XG4gICAgICBkYXRhLnNraWxsID0gdGhpcy5wYXJ0aWNpcGFudC5hY3Rvci5maW5kKGRhdGEuZGF0YS5vYnN0YWNsZS5jaGVja05hbWUpXG4gICAgICBkYXRhLmNoZWNrT3B0aW9ucyA9IHRoaXMuY2hhc2UuZ2V0QWN0b3JTa2lsbHNBbmRDaGFyYWN0ZXJpc3RpY3MoXG4gICAgICAgIHRoaXMuZGF0YS5wYXJ0aWNpcGFudFV1aWRcbiAgICAgIClcbiAgICAgIGlmIChkYXRhLnNraWxsKSB7XG4gICAgICAgIGRhdGEudmFsaWRDaGVjayA9IHRydWVcbiAgICAgICAgZGF0YS52YWxpZFNraWxsID0gdHJ1ZVxuICAgICAgfSBlbHNlIGlmIChkYXRhLmRhdGEub2JzdGFjbGUuY2hlY2tOYW1lICYmIGRhdGEuZGF0YS5jaGVja1RocmVzaG9sZCkge1xuICAgICAgICBkYXRhLnZhbGlkQ2hlY2sgPSB0cnVlXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEuY2hlY2tPcHRpb25zID0gdGhpcy5jaGFzZS5hbGxTa2lsbHNBbmRDaGFyYWN0ZXJpc3RpY3NcbiAgICAgIGRhdGEuZHVtbXlBY3RvciA9IHRydWVcbiAgICAgIGlmIChkYXRhLmRhdGEub2JzdGFjbGUuY2hlY2tOYW1lICYmIGRhdGEuZGF0YS5jaGVja1RocmVzaG9sZCkge1xuICAgICAgICBkYXRhLnZhbGlkQ2hlY2sgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFkYXRhLmRhdGEuYm9udXNEaWNlKSBkYXRhLmRhdGEuYm9udXNEaWNlID0gMFxuXG4gICAgaWYgKFxuICAgICAgZGF0YS5kYXRhLmJvbnVzRGljZSA8IDIgJiZcbiAgICAgIGRhdGEuZGF0YS50b3RhbEFjdGlvbkNvc3QgPCBkYXRhLmRhdGEubW92ZW1lbnRBY3Rpb25cbiAgICApIHtcbiAgICAgIGRhdGEuY2FuVGFrZUNhdXRpb3VzQXBwcm9hY2ggPSB0cnVlXG4gICAgfVxuXG4gICAgZGF0YS5jdXN0b21XZWFwb24gPSBmYWxzZVxuICAgIGlmICh0aGlzLmRhdGEud2VhcG9uQ2hvaWNlID09PSAnMCcpIHtcbiAgICAgIGRhdGEuY3VzdG9tV2VhcG9uID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChkYXRhLnZhbGlkQ2hlY2spIHtcbiAgICAgIGxldCBjaGVja05hbWUsIHZhbHVlXG4gICAgICBpZiAoZGF0YS5za2lsbCkge1xuICAgICAgICBjaGVja05hbWUgPSBkYXRhLnNraWxsLnZhbHVlLm5hbWVcbiAgICAgICAgdmFsdWUgPSBkYXRhLnNraWxsLnZhbHVlLnZhbHVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGVja05hbWUgPSBkYXRhLmRhdGEub2JzdGFjbGUuY2hlY2tOYW1lXG4gICAgICAgIHZhbHVlID0gZGF0YS5kYXRhLmNoZWNrVGhyZXNob2xkXG4gICAgICB9XG4gICAgICBkYXRhLnN0cmluZ3MuY2hlY2tSb2xsUmVxdWVzdCA9IGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuQXNrUm9sbCcsIHtcbiAgICAgICAgbmFtZTogY2hlY2tOYW1lLFxuICAgICAgICB2YWx1ZVxuICAgICAgfSlcbiAgICAgIGlmIChkYXRhLmRhdGEuYm9udXNEaWNlICE9PSAwKSB7XG4gICAgICAgIGlmIChkYXRhLmRhdGEuYm9udXNEaWNlID4gMCkge1xuICAgICAgICAgIGRhdGEuc3RyaW5ncy5jaGVja1JvbGxSZXF1ZXN0ICs9IGAgKCske2RhdGEuZGF0YS5ib251c0RpY2V9KWBcbiAgICAgICAgfSBlbHNlIGRhdGEuc3RyaW5ncy5jaGVja1JvbGxSZXF1ZXN0ICs9IGAgKCR7ZGF0YS5kYXRhLmJvbnVzRGljZX0pYFxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkYXRhLmRhdGEuc3RhdGVzPy5vYnN0YWNsZURlZmluZWQpIHtcbiAgICAgIGRhdGEuc3RyaW5ncy5vYnN0YWNsZURlZmluZWQgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkZhY2luZ09ic3RhY2xlJywge1xuICAgICAgICB0eXBlOiBkYXRhLmRhdGEub2JzdGFjbGUuYmFycmllclxuICAgICAgICAgID8gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkFCYXJyaWVyJylcbiAgICAgICAgICA6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5BSGF6YXJkJylcbiAgICAgIH0pXG4gICAgICBpZiAoZGF0YS5kYXRhLm9ic3RhY2xlLm5hbWUpIHtcbiAgICAgICAgZGF0YS5zdHJpbmdzLm9ic3RhY2xlRGVmaW5lZCArPSBgICgke2RhdGEuZGF0YS5vYnN0YWNsZS5uYW1lfSlgXG4gICAgICB9XG5cbiAgICAgIGRhdGEuZGF0YS5zdGF0ZXMuY2FuQXNrUm9sbCA9IHRydWVcbiAgICAgIC8vIGRhdGEuZGF0YS5zdGF0ZXMub2JzdGFjbGVDYW5CZUJyb2tlbiA9IGZhbHNlXG4gICAgICBpZiAoZGF0YS5kYXRhLm9ic3RhY2xlLmJhcnJpZXIpIHtcbiAgICAgICAgZGF0YS5zdGF0dXMucHVzaCh7IG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5CYXJyaWVyJykgfSlcbiAgICAgICAgaWYgKGRhdGEuZGF0YS5vYnN0YWNsZS5oYXNIaXRQb2ludHMpIHtcbiAgICAgICAgICBkYXRhLnN0YXR1cy5wdXNoKHsgbmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkJyZWFrYWJsZScpIH0pXG4gICAgICAgICAgLy8gZGF0YS5kYXRhLnN0YXRlcy5vYnN0YWNsZUNhbkJlQnJva2VuID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGF0YS5kYXRhLm9ic3RhY2xlLmhhemFyZCkge1xuICAgICAgICBkYXRhLnN0YXR1cy5wdXNoKHsgbmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkhhemFyZCcpIH0pXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRhdGEuc3RhdGVzLnRyeVRvTmVnb3RpYXRlKSB7XG4gICAgICAgIGlmICghZGF0YS52YWxpZENoZWNrKSB7XG4gICAgICAgICAgZGF0YS5zdGF0dXMucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTm9WYWxpZENoZWNrJyksXG4gICAgICAgICAgICBjc3M6ICdlcnJvcidcbiAgICAgICAgICB9KVxuICAgICAgICAgIGRhdGEuc3RyaW5ncy5FbnRlclZhbHVlVGl0bGUgPSBnYW1lLmkxOG4uZm9ybWF0KFxuICAgICAgICAgICAgJ0NvQzcuU2tpbGxTZWxlY3RCYXNlJyxcbiAgICAgICAgICAgIHsgbmFtZTogZGF0YS5kYXRhLm9ic3RhY2xlLmNoZWNrTmFtZSB9XG4gICAgICAgICAgKVxuICAgICAgICAgIGlmICghZGF0YS5kYXRhLmNoZWNrVGhyZXNob2xkKSBkYXRhLmRhdGEuc3RhdGVzLmNhbkFza1JvbGwgPSBmYWxzZVxuICAgICAgICB9IGVsc2UgaWYgKCFkYXRhLnZhbGlkU2tpbGwpIHtcbiAgICAgICAgICBkYXRhLnN0YXR1cy5wdXNoKHtcbiAgICAgICAgICAgIG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ob1ZhbGlkU2tpbGwnKSxcbiAgICAgICAgICAgIGNzczogJ3dhcm5pbmcnXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5kYXRhLnN0YXRlcy50cnlUb0JyZWFrKSB7XG4gICAgICAgIGxldCBkYW1hZ2VTdGF0dXMgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQnJlYWtEb3duJylcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5vYmplY3RzPy5vYnN0YWNsZURhbWFnZVJvbGw/LnRvdGFsKSB7XG4gICAgICAgICAgZGFtYWdlU3RhdHVzICs9IGAgOiAke3RoaXMuZGF0YS5vYmplY3RzLm9ic3RhY2xlRGFtYWdlUm9sbC50b3RhbH1gXG4gICAgICAgIH1cbiAgICAgICAgZGF0YS5zdGF0dXMucHVzaCh7XG4gICAgICAgICAgbmFtZTogZGFtYWdlU3RhdHVzXG4gICAgICAgIH0pXG5cbiAgICAgICAgaWYgKHRoaXMuZGF0YS5zdGF0ZXMub2JzdGFjbGVEYW1hZ2VSb2xsZWQpIHtcbiAgICAgICAgICBpZiAodGhpcy5kYXRhLm9iamVjdHM/Lm9ic3RhY2xlRGFtYWdlUm9sbD8udG90YWwgPD0gMCkge1xuICAgICAgICAgICAgZGF0YS5zdHJpbmdzLm9ic3RhY2xlRGFtYWdlID1cbiAgICAgICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk5vRGFtYWdlRGVhbHQnKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRhLmlubGluZURhbWFnZVJvbGwgPSBjcmVhdGVJbmxpbmVSb2xsKFxuICAgICAgICAgICAgICB0aGlzLmRhdGEub2JqZWN0cy5vYnN0YWNsZURhbWFnZVJvbGxcbiAgICAgICAgICAgICk/Lm91dGVySFRNTFxuICAgICAgICAgICAgZGF0YS5zdHJpbmdzLm9ic3RhY2xlRGFtYWdlID0gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5EYW1hZ2VEZWFsdCcsIHtcbiAgICAgICAgICAgICAgdmFsdWU6IGRhdGEuaW5saW5lRGFtYWdlUm9sbFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZGF0YS5zdGF0ZXMudHJ5VG9OZWdvdGlhdGUpIHtcbiAgICAgICAgZGF0YS5zdGF0dXMucHVzaCh7IG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5OZWdvdGlhdGUnKSB9KVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5kYXRhLnRvdGFsQ2F1dGlvdXNBcHByb2FjaCkge1xuICAgICAgICBjb25zdCBjYXV0aW91c1N0YXR1cyA9IHtcbiAgICAgICAgICBuYW1lOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQ2F1dGlvdXMnKSxcbiAgICAgICAgICBjc3M6ICcnXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZGF0YS50b3RhbENhdXRpb3VzQXBwcm9hY2ggPiAxKSB7XG4gICAgICAgICAgY2F1dGlvdXNTdGF0dXMuY3NzID0gJ3N0cm9uZydcbiAgICAgICAgICBkYXRhLnN0cmluZ3MuY2F1dGlvdXNBcHByb2FjaFR5cGUgPSBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAnQ29DNy5CZWluZ1ZlcnlDYXV0aW91cydcbiAgICAgICAgICApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGF0YS5zdHJpbmdzLmNhdXRpb3VzQXBwcm9hY2hUeXBlID1cbiAgICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5CZWluZ0NhdXRpb3VzJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmRhdGEuZmxhZ3MuY29uc3VtZUJvbnVzRGljZSkgY2F1dGlvdXNTdGF0dXMuY3NzICs9ICcgY29uc3VtZSdcbiAgICAgICAgZGF0YS5zdGF0dXMucHVzaChjYXV0aW91c1N0YXR1cylcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZGF0YS5vYmplY3RzPy5jaGVjaykge1xuICAgICAgICBpZiAodGhpcy5kYXRhLm9ic3RhY2xlLmhhemFyZCkgdGhpcy5kYXRhLm1vdmVQbGF5ZXIgPSB0cnVlIC8vIE9uIGhhemFyZCwgeW91IHBhc3MgZXZlbiBpZiB5b3UgZmFpbCB5b3VyIHJvbGxcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5vYmplY3RzLmNoZWNrLnBhc3NlZCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5kYXRhLm1vdmVQbGF5ZXIgPT09ICd1bmRlZmluZWQnKSB0aGlzLmRhdGEubW92ZVBsYXllciA9IHRydWVcbiAgICAgICAgICBkYXRhLnN0cmluZ3Mub2JzdGFjbGVQYXNzZWQgPSBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAnQ29DNy5PYnN0YWNsZVBhc3NlZCdcbiAgICAgICAgICApXG4gICAgICAgICAgaWYgKHRoaXMuZGF0YS5vYmplY3RzLmNoZWNrLmx1Y2tTcGVudCkge1xuICAgICAgICAgICAgZGF0YS5zdHJpbmdzLm9ic3RhY2xlUGFzc2VkICs9IGAgKCR7Z2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgICAgICAnQ29DNy5Hb3RMdWNreSdcbiAgICAgICAgICAgICl9KWBcbiAgICAgICAgICB9XG4gICAgICAgICAgZGF0YS5zdGF0dXMucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuU3VjY2VzcycpLFxuICAgICAgICAgICAgY3NzOiAnc3VjY2VzcydcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YS5vYmplY3RzLmNoZWNrLmlzRnVtYmxlKSB7XG4gICAgICAgICAgZGF0YS5zdHJpbmdzLmNoZWNrRmFpbGVkID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk9ic3RhY2xlRnVtYmxlJylcbiAgICAgICAgICBkYXRhLnN0YXR1cy5wdXNoKHtcbiAgICAgICAgICAgIG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5GdW1ibGUnKSxcbiAgICAgICAgICAgIGNzczogJ2Z1bWJsZSdcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGEuc3RyaW5ncy5jaGVja0ZhaWxlZCA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5PYnN0YWNsZUZhaWwnKVxuICAgICAgICAgIGRhdGEuc3RhdHVzLnB1c2goe1xuICAgICAgICAgICAgbmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkZhaWx1cmUnKSxcbiAgICAgICAgICAgIGNzczogJ2ZhaWx1cmUnXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmRhdGEuc3RhdGVzLnBsYXllckFjdGlvbkRlZmluZWQpIHtcbiAgICAgIGlmICh0aGlzLmRhdGEub2JzdGFjbGUuaGF6YXJkKSB7XG4gICAgICAgIGRhdGEuc3RyaW5ncy5wbGF5ZXJJbnRlbnRpb25zID0gZ2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgICdDb0M3LlRyeVRvTmVnb3RpYXRlSGF6YXJkJ1xuICAgICAgICApXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YS5vYnN0YWNsZS5iYXJyaWVyKSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGEuc3RhdGVzLnRyeVRvTmVnb3RpYXRlKSB7XG4gICAgICAgICAgZGF0YS5zdHJpbmdzLnBsYXllckludGVudGlvbnMgPSBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAnQ29DNy5UcnlUb0dldFBhc3RCYXJyaWVycydcbiAgICAgICAgICApXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhLnN0YXRlcy50cnlUb0JyZWFrKSB7XG4gICAgICAgICAgZGF0YS5zdHJpbmdzLnBsYXllckludGVudGlvbnMgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuVHJ5VG9CcmVhaycpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5kYXRhLnN0YXRlcy5jaGVja1JvbGxlZCkge1xuICAgICAgaWYgKHRoaXMuZGF0YS5zdGF0ZXMuY2FyZFJlc29sdmVkKSB7XG4gICAgICAgIC8vIElmIHRoZSBjYXJkIGlzIHJlc29sdmVkIHRoZSBjaGVjayBpcyBmcm96ZW5cbiAgICAgICAgZGF0YS5odG1sQ2hlY2sgPSBhd2FpdCB0aGlzLmRhdGEub2JqZWN0cy5jaGVjay5pbmxpbmVDaGVjaz8ub3V0ZXJIVE1MXG4gICAgICB9IGVsc2UgZGF0YS5odG1sQ2hlY2sgPSBhd2FpdCB0aGlzLmRhdGEub2JqZWN0cy5jaGVjay5nZXRIdG1sUm9sbCgpXG4gICAgfVxuXG4gICAgLy8gaWYgKHRoaXMuZGF0YS5vYmplY3RzPy5mYWlsZWREYW1hZ2VSb2xsKSB7XG4gICAgLy8gICBpZiAoIWRhdGEuZGF0YS5hcm1vcikge1xuICAgIC8vICAgICBpZiAodGhpcy5wYXJ0aWNpcGFudC5hY3RvcilcbiAgICAvLyAgICAgICBkYXRhLmRhdGEuYXJtb3IgPVxuICAgIC8vICAgICAgICAgdGhpcy5wYXJ0aWNpcGFudC5hY3Rvci5kYXRhLmRhdGEuYXR0cmlicy5hcm1vci52YWx1ZSB8fCAwXG4gICAgLy8gICB9XG4gICAgLy8gICBpZiAoZGF0YS5kYXRhLmFybW9yKSB7XG4gICAgLy8gICAgIGlmIChpc05hTihOdW1iZXIoZGF0YS5kYXRhLmFybW9yKSkpIGRhdGEuZGF0YS5hcm1vciA9IG51bGxcbiAgICAvLyAgIH1cbiAgICAvLyB9XG5cbiAgICBpZiAodGhpcy5kYXRhLnN0YXRlcy5jYXJkUmVzb2x2ZWQpIHtcbiAgICAgIGRhdGEucGxheWVyRGFtYWdlVGFrZW4gPSBmYWxzZVxuICAgICAgZGF0YS5vYnN0YWxjZURlZmluaXRpb25DaGFuZ2VkID0gZmFsc2VcblxuICAgICAgLy8gSGFzIHRoZSBvYnN0YWNsZSBjaGFuZ2VkID9cbiAgICAgIGNvbnN0IGRpZmYgPSB0aGlzLmxpc3RDaGFuZ2VzKClcbiAgICAgIGlmIChkaWZmLmNoYW5nZXMpIHtcbiAgICAgICAgZGF0YS5vYnN0YWxjZURlZmluaXRpb25DaGFuZ2VkID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICAvLyBJcyBwbGF5ZXIgdGFraW5nIGRhbWFnZVxuICAgICAgaWYgKHRoaXMuZGF0YS5vYnN0YWNsZS5oYXNEYW1hZ2UgJiYgdGhpcy5kYXRhLm9iamVjdHM/LmNoZWNrPy5pc0ZhaWx1cmUpIHtcbiAgICAgICAgZGF0YS5wbGF5ZXJEYW1hZ2VUYWtlbiA9IHRydWVcbiAgICAgICAgZGF0YS5pbmxpbmVEYW1hZ2VUYWtlblJvbGwgPSBjcmVhdGVJbmxpbmVSb2xsKFxuICAgICAgICAgIHRoaXMuZGF0YS5vYmplY3RzLmZhaWxlZERhbWFnZVJvbGxcbiAgICAgICAgKT8ub3V0ZXJIVE1MXG4gICAgICAgIC8vIGlmIChkYXRhLmRhdGEudG90YWxQbGF5ZXJEYW1hZ2VUYWtlbiA8IDApXG4gICAgICAgIC8vICAgZGF0YS5kYXRhLnRvdGFsUGxheWVyRGFtYWdlVGFrZW4gPSAwXG5cbiAgICAgICAgaWYgKGRhdGEuZGF0YS50b3RhbFBsYXllckRhbWFnZVRha2VuID09PSAwKSB7XG4gICAgICAgICAgZGF0YS5zdHJpbmdzLmRhbWFnZVRha2VuID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LllvdVRha2VOb0RhbWFnZScpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGF0YS5zdHJpbmdzLmRhbWFnZVRha2VuID0gZ2FtZS5pMThuLmZvcm1hdChcbiAgICAgICAgICAgICdDb0M3LllvdVRha2VTb21lRGFtYWdlJyxcbiAgICAgICAgICAgIHsgYW1vdW50OiBkYXRhLmRhdGEudG90YWxQbGF5ZXJEYW1hZ2VUYWtlbiB9XG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIGRhdGEuc3RhdHVzLnB1c2goe1xuICAgICAgICAgIG5hbWU6XG4gICAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuVG90YWxEYW1hZ2UnKSArXG4gICAgICAgICAgICBgIDoke2RhdGEuZGF0YS50b3RhbFBsYXllckRhbWFnZVRha2VufWBcbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICB0aGlzLmRhdGEub2JzdGFjbGUuaGFzQWN0aW9uQ29zdCAmJlxuICAgICAgICB0aGlzLmRhdGEub2JzdGFjbGUuaGF6YXJkICYmXG4gICAgICAgIHRoaXMuZGF0YS5vYmplY3RzPy5jaGVjaz8uaXNGYWlsdXJlXG4gICAgICApIHtcbiAgICAgICAgZGF0YS5hY3Rpb25Mb3N0ID0gdHJ1ZVxuICAgICAgICBkYXRhLnN0cmluZ3MuYWN0aW9uTG9zdCA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Zb3VMb3N0VGltZScpXG4gICAgICAgIGRhdGEuaW5saW5lQWN0aW9uTG9zdFJvbGwgPSBjcmVhdGVJbmxpbmVSb2xsKFxuICAgICAgICAgIHRoaXMuZGF0YS5vYmplY3RzLmZhaWxlZEFjdGlvblJvbGxcbiAgICAgICAgKT8ub3V0ZXJIVE1MXG4gICAgICB9XG5cbiAgICAgIGRhdGEuc3RhdHVzLnB1c2goe1xuICAgICAgICBuYW1lOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQ2FyZFJlc29sdmVkJylcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZGF0YS5zdGF0ZXMuY2xvc2VkKSB7XG4gICAgICBpZiAodGhpcy5kYXRhLm1vdmVQbGF5ZXIpIHtcbiAgICAgICAgZGF0YS5zdHJpbmdzLmZpbmFsT3V0Y29tZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Nb3ZlVG9Mb2NhdGlvbicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhLnN0cmluZ3MuZmluYWxPdXRjb21lID0gZ2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgICdDb0M3LkRvbnRNb3ZlVG9Mb2NhdGlvbidcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YVxuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBhc3luYyBHTVVwZGF0ZSAoKSB7XG4gICAgaWYgKCFnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgY29uc29sZS5lcnJvcignQ29DNzogR01VcGRhdGUgY2FsbGVkIGZyb20gbm9uIEdNIHVzZXInKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmICh0aGlzLmRhdGEuc3RhdGVzLmNhcmRSZXNvbHZlZCkge1xuICAgICAgLy8gQ2FyZCBpcyByZXNvbHZlZCwgY29tcHV0ZSBhbGwgZm9ybXVsYXMgYW5kIGRhbWFnZS5cbiAgICAgIGlmICh0aGlzLmRhdGEub2JqZWN0cz8uZmFpbGVkRGFtYWdlUm9sbD8udG90YWwpIHtcbiAgICAgICAgY29uc3QgdG90YWxEYW1hZ2UgPSB0aGlzLmRhdGEub2JqZWN0cy5mYWlsZWREYW1hZ2VSb2xsLnRvdGFsXG4gICAgICAgIGNvbnN0IGFybW9yVmFsdWUgPSB0aGlzLmRhdGEuZmxhZ3MuaWdub3JlQXJtb3IgPyAwIDogdGhpcy5kYXRhLmFybW9yXG4gICAgICAgIGlmIChDb0M3VXRpbGl0aWVzLmlzRm9ybXVsYShhcm1vclZhbHVlKSkge1xuICAgICAgICAgIHRoaXMuZGF0YS5hcm1vciA9IChcbiAgICAgICAgICAgIGF3YWl0IG5ldyBSb2xsKGFybW9yVmFsdWUpLnJvbGwoeyBhc3luYzogdHJ1ZSB9KVxuICAgICAgICAgICkudG90YWxcbiAgICAgICAgfSBlbHNlIGlmICghaXNOYU4oTnVtYmVyKGFybW9yVmFsdWUpKSkge1xuICAgICAgICAgIHRoaXMuZGF0YS5hcm1vciA9IE51bWJlcihhcm1vclZhbHVlKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmRhdGEudG90YWxQbGF5ZXJEYW1hZ2VUYWtlbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aGlzLmRhdGEudG90YWxQbGF5ZXJEYW1hZ2VUYWtlbiA9IHRvdGFsRGFtYWdlIC0gdGhpcy5kYXRhLmFybW9yXG4gICAgICAgICAgaWYgKHRoaXMuZGF0YS50b3RhbFBsYXllckRhbWFnZVRha2VuIDwgMCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhLnRvdGFsUGxheWVyRGFtYWdlVGFrZW4gPSAwXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh1bmRlZmluZWQgPT09IHRoaXMuZGF0YS5yZWZsZWN0T2JzdGFsZUNoYW5nZXMpIHtcbiAgICAgICAgdGhpcy5kYXRhLnJlZmxlY3RPYnN0YWxlQ2hhbmdlcyA9IHRydWUgLy8gQnkgZGVmYXVsdCByZWZsZWN0IGNoYW5nZXNcbiAgICAgIH1cblxuICAgICAgaWYgKHVuZGVmaW5lZCA9PT0gdGhpcy5kYXRhLm1vdmVQbGF5ZXIpIHtcbiAgICAgICAgdGhpcy5kYXRhLm1vdmVQbGF5ZXIgPVxuICAgICAgICAgICh0aGlzLmRhdGEuc3RhdGVzLnRyeVRvTmVnb3RpYXRlIHx8IHRoaXMuZGF0YS5vYnN0YWNsZS5oYXphcmQpICYmXG4gICAgICAgICAgIXRoaXMuZGF0YS5zdGF0ZXMuZmFpbGVkQ29uc2VxdWVuY2VzUm9sbGVkXG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5kYXRhLm9ic3RhY2xlLmJhcnJpZXIgJiZcbiAgICAgICAgdGhpcy5kYXRhLm9ic3RhY2xlLmhhc0hpdFBvaW50cyAmJlxuICAgICAgICB0aGlzLmRhdGEub2JqZWN0cz8ub2JzdGFjbGVEYW1hZ2VSb2xsPy50b3RhbFxuICAgICAgKSB7XG4gICAgICAgIGlmICh1bmRlZmluZWQgPT09IHRoaXMuZGF0YS50b3RhbE9ic3RhY2xlRGFtYWdlKSB7XG4gICAgICAgICAgdGhpcy5kYXRhLnRvdGFsT2JzdGFjbGVEYW1hZ2UgPVxuICAgICAgICAgICAgdGhpcy5kYXRhLm9iamVjdHMub2JzdGFjbGVEYW1hZ2VSb2xsLnRvdGFsXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVuZGVmaW5lZCA9PT0gdGhpcy5kYXRhLmZsYWdzLm9ic3RhY2xlRGVzdG95ZWQpIHtcbiAgICAgICAgICB0aGlzLmRhdGEuZmxhZ3Mub2JzdGFjbGVEZXN0b3llZCA9XG4gICAgICAgICAgICB0aGlzLmRhdGEub2JzdGFjbGUuSGl0UG9pbnRzIC0gdGhpcy5kYXRhLnRvdGFsT2JzdGFjbGVEYW1hZ2UgPD0gMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZGF0YS5zdGF0ZXMuY2xvc2VkKSB7XG4gICAgICB0aGlzLmRhdGEubW92ZW1lbnRBY3Rpb25BcnJheSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKFxuICAgICAgICB0aGlzLnBhcnRpY2lwYW50Lm1vdmVtZW50QWN0aW9uQXJyYXlcbiAgICAgIClcbiAgICAgIHRoaXMuZGF0YS5FRUNfQUNUSU9OID0geyBkZXRhY2hEYXRhOiB0cnVlIH1cbiAgICB9XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGFzeW5jIGxvY2FsQ29tcHV0ZSAoKSB7fVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgYXN5bmMgYXNzaWduT2JqZWN0cyAoKSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5kYXRhLm9iamVjdHM/LmNoZWNrICYmXG4gICAgICB0aGlzLmRhdGEub2JqZWN0cy5jaGVjaz8uY29uc3RydWN0b3I/Lm5hbWUgPT09ICdPYmplY3QnXG4gICAgKSB7XG4gICAgICB0aGlzLmRhdGEub2JqZWN0cy5jaGVjayA9IENvQzdDaGVjay5mcm9tRGF0YSh0aGlzLmRhdGEub2JqZWN0cy5jaGVjaylcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICB0aGlzLmRhdGEub2JqZWN0cz8ub2JzdGFjbGVEYW1hZ2VSb2xsICYmXG4gICAgICB0aGlzLmRhdGEub2JqZWN0cy5vYnN0YWNsZURhbWFnZVJvbGw/LmNvbnN0cnVjdG9yPy5uYW1lID09PSAnT2JqZWN0J1xuICAgICkge1xuICAgICAgdGhpcy5kYXRhLm9iamVjdHMub2JzdGFjbGVEYW1hZ2VSb2xsID0gUm9sbC5mcm9tRGF0YShcbiAgICAgICAgdGhpcy5kYXRhLm9iamVjdHMub2JzdGFjbGVEYW1hZ2VSb2xsXG4gICAgICApXG4gICAgfVxuICAgIGlmIChcbiAgICAgIHRoaXMuZGF0YS5vYmplY3RzPy5mYWlsZWREYW1hZ2VSb2xsICYmXG4gICAgICB0aGlzLmRhdGEub2JqZWN0cy5mYWlsZWREYW1hZ2VSb2xsPy5jb25zdHJ1Y3Rvcj8ubmFtZSA9PT0gJ09iamVjdCdcbiAgICApIHtcbiAgICAgIHRoaXMuZGF0YS5vYmplY3RzLmZhaWxlZERhbWFnZVJvbGwgPSBSb2xsLmZyb21EYXRhKFxuICAgICAgICB0aGlzLmRhdGEub2JqZWN0cy5mYWlsZWREYW1hZ2VSb2xsXG4gICAgICApXG4gICAgfVxuICAgIGlmIChcbiAgICAgIHRoaXMuZGF0YS5vYmplY3RzPy5mYWlsZWRBY3Rpb25Sb2xsICYmXG4gICAgICB0aGlzLmRhdGEub2JqZWN0cy5mYWlsZWRBY3Rpb25Sb2xsPy5jb25zdHJ1Y3Rvcj8ubmFtZSA9PT0gJ09iamVjdCdcbiAgICApIHtcbiAgICAgIHRoaXMuZGF0YS5vYmplY3RzLmZhaWxlZEFjdGlvblJvbGwgPSBSb2xsLmZyb21EYXRhKFxuICAgICAgICB0aGlzLmRhdGEub2JqZWN0cy5mYWlsZWRBY3Rpb25Sb2xsXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBhc3luYyBpbml0aWFsaXplICgpIHtcbiAgICAvLyBjb25zdCBjaGFzZSA9IGF3YWl0IGZyb21VdWlkKHRoaXMuZGF0YS5jaGFzZVV1aWQpXG4gICAgaWYgKCF0aGlzLmNoYXNlKSByZXR1cm5cbiAgICBpZiAodHlwZW9mIHRoaXMuY2hhc2UuYWN0aXZlUGFydGljaXBhbnREYXRhPy51dWlkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0aGlzLmRhdGEgPT09ICd1bmRlZmluZWQnKSB0aGlzLmRhdGEgPSB7fVxuICAgIGlmICh0eXBlb2YgdGhpcy5kYXRhLnN0YXRlcyA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMuZGF0YS5zdGF0ZXMgPSB7fVxuXG4gICAgLy8gY29uc3QgbG9jYXRpb24gPSBjaGFzZS5nZXRMb2NhdGlvbkRhdGEodGhpcy5kYXRhLmxvY2F0aW9uVXVpZClcbiAgICB0aGlzLmRhdGEub2JzdGFjbGUgPSB0aGlzLmxvY2F0aW9uPy5vYnN0YWNsZURldGFpbHMgLy8gRmVlZCB0aGUgb2JzdGFjbGUgZGVmaW5pdGlvblxuICAgIC8vIHRoaXMuZGF0YS5wYXJ0aWNpcGFudERhdGEgPSBjaGFzZS5hY3RpdmVQYXJ0aWNpcGFudERhdGFcbiAgICB0aGlzLmRhdGEucGFydGljaXBhbnRVdWlkID0gdGhpcy5jaGFzZS5hY3RpdmVQYXJ0aWNpcGFudERhdGEudXVpZFxuXG4gICAgaWYgKHRoaXMucGFydGljaXBhbnREYXRhPy5ib251c0RpY2UgPiAwKSB7XG4gICAgICB0aGlzLmRhdGEuYm9udXNEaWNlID0gdGhpcy5wYXJ0aWNpcGFudERhdGEuYm9udXNEaWNlXG4gICAgICB0aGlzLmRhdGEuZmxhZ3MuY29uc3VtZUJvbnVzRGljZSA9IHRydWVcbiAgICAgIHRoaXMuZGF0YS5mbGFncy5oYXNCb251c0RpY2UgPSB0aGlzLnBhcnRpY2lwYW50Lmhhc0JvbnVzRGljZVxuICAgIH1cblxuICAgIHRoaXMuZGF0YS5tb3ZlbWVudEFjdGlvbkFycmF5ID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoXG4gICAgICB0aGlzLnBhcnRpY2lwYW50Lm1vdmVtZW50QWN0aW9uQXJyYXlcbiAgICApXG4gICAgdGhpcy5kYXRhLm1vdmVtZW50QWN0aW9uID0gdGhpcy5wYXJ0aWNpcGFudC5jdXJyZW50TW92ZW1lbnRBY3Rpb25zXG4gICAgdGhpcy5kYXRhLnRvdGFsQWN0aW9uQ29zdCA9IDBcbiAgfVxuXG4gIGdldCBwYXJ0aWNpcGFudCAoKSB7XG4gICAgaWYgKCF0aGlzLnBhcnRpY2lwYW50RGF0YSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIC8vIGlmICghdGhpcy5fcGFydGljaXBhbnQpXG4gICAgLy8gICB0aGlzLl9wYXJ0aWNpcGFudCA9IG5ldyBfcGFydGljaXBhbnQodGhpcy5wYXJ0aWNpcGFudERhdGEpXG4gICAgLy8gcmV0dXJuIHRoaXMuX3BhcnRpY2lwYW50XG4gICAgcmV0dXJuIG5ldyBfcGFydGljaXBhbnQodGhpcy5wYXJ0aWNpcGFudERhdGEpIC8vIFRPIFJFU0VUXG4gIH1cblxuICBnZXQgcGFydGljaXBhbnREYXRhICgpIHtcbiAgICBpZiAoIXRoaXMuY2hhc2UpIHJldHVybiB1bmRlZmluZWRcbiAgICBpZiAoIXRoaXMuZGF0YS5wYXJ0aWNpcGFudFV1aWQpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5jaGFzZS5nZXRQYXJ0aWNpcGFudERhdGEodGhpcy5kYXRhLnBhcnRpY2lwYW50VXVpZClcbiAgfVxuXG4gIGdldCBsb2NhdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLmNoYXNlKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMuY2hhc2UuZ2V0TG9jYXRpb25EYXRhKHRoaXMuZGF0YS5sb2NhdGlvblV1aWQpXG4gIH1cblxuICBnZXQgb2JzdGFjbGUgKCkge1xuICAgIGlmICghdGhpcy5sb2NhdGlvbikgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLmxvY2F0aW9uLm9ic3RhY2xlRGV0YWlsc1xuICB9XG5cbiAgZ2V0IGNoYXNlICgpIHtcbiAgICBpZiAoIXRoaXMuZGF0YS5jaGFzZVV1aWQpIHJldHVybiB1bmRlZmluZWRcbiAgICBpZiAoIXRoaXMuX2NoYXNlKSB0aGlzLl9jaGFzZSA9IENvQzdVdGlsaXRpZXMuU2Zyb21VdWlkKHRoaXMuZGF0YS5jaGFzZVV1aWQpXG4gICAgcmV0dXJuIHRoaXMuX2NoYXNlXG4gIH1cblxuICBnZXQgcm9sbCAoKSB7XG4gICAgbGV0IHJvbGxEYXRhXG4gICAgaWYgKHRoaXMucGFydGljaXBhbnQuYWN0b3IgJiYgdGhpcy5kYXRhLm9ic3RhY2xlLmNoZWNrTmFtZSkge1xuICAgICAgY29uc3QgYWN0b3JTa2lsbCA9IHRoaXMucGFydGljaXBhbnQuYWN0b3IuZmluZChcbiAgICAgICAgdGhpcy5kYXRhLm9ic3RhY2xlLmNoZWNrTmFtZVxuICAgICAgKVxuICAgICAgaWYgKHR5cGVvZiBhY3RvclNraWxsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByb2xsRGF0YSA9IGFjdG9yU2tpbGxcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvbGxEYXRhID0ge1xuICAgICAgICAgIHR5cGU6ICd2YWx1ZScsXG4gICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuZGF0YS5vYnN0YWNsZS5jaGVja05hbWUsXG4gICAgICAgICAgICB0aHJlc2hvbGQ6IHRoaXMuZGF0YS5jaGVja1RocmVzaG9sZFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcm9sbERhdGEuYWN0b3IgPSB7IGFjdG9yS2V5OiB0aGlzLnBhcnRpY2lwYW50LmFjdG9yLmlkIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuZGF0YS5vYnN0YWNsZS5jaGVja05hbWUgJiYgdGhpcy5kYXRhLmNoZWNrVGhyZXNob2xkKSB7XG4gICAgICAgIHJvbGxEYXRhID0ge1xuICAgICAgICAgIHR5cGU6ICd2YWx1ZScsXG4gICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuZGF0YS5vYnN0YWNsZS5jaGVja05hbWUsXG4gICAgICAgICAgICB0aHJlc2hvbGQ6IHRoaXMuZGF0YS5jaGVja1RocmVzaG9sZFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYWN0b3I6IHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMucGFydGljaXBhbnQubmFtZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAocm9sbERhdGEpIHtcbiAgICAgIHJvbGxEYXRhLmRpY2VNb2RpZmllciA9IHRoaXMuZGF0YT8uYm9udXNEaWNlIHx8IDBcbiAgICAgIHJvbGxEYXRhLmRpZmZpY3VsdHkgPSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXJcbiAgICAgIHJvbGxEYXRhLmRlbnlQdXNoID0gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gcm9sbERhdGEgfHwgdW5kZWZpbmVkXG4gIH1cblxuICBnZXQgdmFsaWRGYWlsZWRSb2xscyAoKSB7XG4gICAgaWYgKCF0aGlzLmRhdGEub2JqZWN0cz8uY2hlY2s/LmlzRmFpbHVyZSkgcmV0dXJuIGZhbHNlXG4gICAgaWYgKHRoaXMuZGF0YS5vYnN0YWNsZS5oYXNEYW1hZ2UpIHtcbiAgICAgIGNvbnN0IGRhbWFnZSA9XG4gICAgICAgIHR5cGVvZiB0aGlzLmRhdGEub2JzdGFjbGUuZmFpbGVkQ2hlY2tEYW1hZ2UgPT09ICdudW1iZXInXG4gICAgICAgICAgPyBgJHt0aGlzLmRhdGEub2JzdGFjbGUuZmFpbGVkQ2hlY2tEYW1hZ2V9YFxuICAgICAgICAgIDogdGhpcy5kYXRhLm9ic3RhY2xlLmZhaWxlZENoZWNrRGFtYWdlXG4gICAgICBpZiAoIXRoaXMuZGF0YS5vYnN0YWNsZS5mYWlsZWRDaGVja0RhbWFnZSkgcmV0dXJuIGZhbHNlXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuZGF0YS5vYnN0YWNsZS5mYWlsZWRDaGVja0RhbWFnZSAmJlxuICAgICAgICAhUm9sbC52YWxpZGF0ZShkYW1hZ2UpIC8vIFZhbGlkYXRlIG9ubHkgdGFrZSBhIHN0cmluZywgaWYgZGFtYWdlIGlzIGEgbnVtYmVyIGNvbnZlcnQgdG8gYSBzdHJpbmdcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuZGF0YS5vYnN0YWNsZS5oYXphcmQgJiYgdGhpcy5kYXRhLm9ic3RhY2xlLmhhc0FjdGlvbkNvc3QpIHtcbiAgICAgIGNvbnN0IGFjdGlvbkNvc3QgPVxuICAgICAgICB0eXBlb2YgdGhpcy5kYXRhLm9ic3RhY2xlLmZhaWxlZEFjdGlvbkNvc3QgPT09ICdudW1iZXInXG4gICAgICAgICAgPyBgJHt0aGlzLmRhdGEub2JzdGFjbGUuZmFpbGVkQWN0aW9uQ29zdH1gXG4gICAgICAgICAgOiB0aGlzLmRhdGEub2JzdGFjbGUuZmFpbGVkQWN0aW9uQ29zdFxuICAgICAgaWYgKCF0aGlzLmRhdGEub2JzdGFjbGUuZmFpbGVkQWN0aW9uQ29zdCkgcmV0dXJuIGZhbHNlXG4gICAgICBpZiAodGhpcy5kYXRhLm9ic3RhY2xlLmZhaWxlZEFjdGlvbkNvc3QgJiYgIVJvbGwudmFsaWRhdGUoYWN0aW9uQ29zdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBnZXQgd2VhcG9uc09wdGlvbnMgKCkge1xuICAgIGNvbnN0IHdlYXBvbnMgPSBbXVxuICAgIHRoaXMucGFydGljaXBhbnQuYWN0b3I/Lml0ZW1UeXBlcz8ud2VhcG9uPy5mb3JFYWNoKHcgPT4ge1xuICAgICAgbGV0IGZvcm11bGEgPSB3LmRhdGEuZGF0YS5yYW5nZS5ub3JtYWwuZGFtYWdlXG4gICAgICBsZXQgZGIgPSB0aGlzLnBhcnRpY2lwYW50LmFjdG9yLmRiXG4gICAgICBpZiAoZGIgPT09IG51bGwgfHwgTnVtYmVyKGRiKSA9PT0gMCkge1xuICAgICAgICBkYiA9ICcnXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYiA9IGAke2RifWBcbiAgICAgIH1cblxuICAgICAgaWYgKGRiICYmICFkYi5zdGFydHNXaXRoKCctJykpIGRiID0gJysnICsgZGJcbiAgICAgIGlmICh3LmRhdGEuZGF0YS5wcm9wZXJ0aWVzLmFkZGIpIGZvcm11bGEgPSBmb3JtdWxhICsgZGJcbiAgICAgIGlmICh3LmRhdGEuZGF0YS5wcm9wZXJ0aWVzLmFoYmQpIGZvcm11bGEgPSBmb3JtdWxhICsgZGIgKyAnLzInXG4gICAgICB3ZWFwb25zLnB1c2goe1xuICAgICAgICBuYW1lOiBgJHt3LmRhdGEubmFtZX0gKCR7Zm9ybXVsYX0pYCxcbiAgICAgICAgZGFtYWdlOiBmb3JtdWxhLFxuICAgICAgICB1dWlkOiB3LnV1aWRcbiAgICAgIH0pXG4gICAgfSlcbiAgICB3ZWFwb25zLnNvcnQoQ29DN1V0aWxpdGllcy5zb3J0QnlOYW1lS2V5KVxuXG4gICAgaWYgKFxuICAgICAgIXdlYXBvbnMuZmluZCh3ID0+XG4gICAgICAgIHcubmFtZVxuICAgICAgICAgIC50b1VwcGVyQ2FzZSgpXG4gICAgICAgICAgLnN0YXJ0c1dpdGgoXG4gICAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuVW5hcm1lZFdlYXBvbk5hbWUnKT8udG9VcHBlckNhc2UoKVxuICAgICAgICAgIClcbiAgICAgIClcbiAgICApIHtcbiAgICAgIGxldCBkYiA9ICcnXG4gICAgICBpZiAodGhpcy5wYXJ0aWNpcGFudC5hY3Rvcikge1xuICAgICAgICBkYiA9IHRoaXMucGFydGljaXBhbnQuYWN0b3IuZGJcbiAgICAgICAgaWYgKGRiICYmICFkYi5zdGFydHNXaXRoKCctJykpIGRiID0gJysnICsgZGJcbiAgICAgICAgaWYgKGRiID09PSBudWxsIHx8IE51bWJlcihkYikgPT09IDApIGRiID0gJydcbiAgICAgIH1cblxuICAgICAgd2VhcG9ucy51bnNoaWZ0KHtcbiAgICAgICAgbmFtZTogYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlVuYXJtZWRXZWFwb25OYW1lJyl9ICgxRDMke2RifSlgLFxuICAgICAgICBkYW1hZ2U6IGAxRDMke2RifWAsXG4gICAgICAgIHV1aWQ6ICd1bmFybWVkJ1xuICAgICAgfSlcbiAgICB9XG5cbiAgICB3ZWFwb25zLnB1c2goe1xuICAgICAgbmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk90aGVyJyksXG4gICAgICBkYW1hZ2U6IHRoaXMuZGF0YT8uY3VzdG9tV2VhcG9uRGFtYWdlIHx8IG51bGwsXG4gICAgICB1dWlkOiAwXG4gICAgfSlcbiAgICByZXR1cm4gd2VhcG9uc1xuICB9XG5cbiAgZ2V0IHVzZWRXZWFwb24gKCkge1xuICAgIGlmICghdGhpcy5kYXRhPy53ZWFwb25DaG9pY2UpIHtcbiAgICAgIGlmICghdGhpcy53ZWFwb25zT3B0aW9ucykgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgaWYgKCF0aGlzLmRhdGEpIHRoaXMuZGF0YSA9IHt9IC8vIHVzZWxlc3MgISEhXG4gICAgICB0aGlzLmRhdGEud2VhcG9uQ2hvaWNlID0gdGhpcy53ZWFwb25zT3B0aW9uc1swXS51dWlkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZGF0YS53ZWFwb25DaG9pY2UpIHtcbiAgICAgIGNvbnN0IHdlYXBvbiA9IHRoaXMud2VhcG9uc09wdGlvbnMuZmluZChcbiAgICAgICAgZSA9PiBlLnV1aWQgPT09IHRoaXMuZGF0YS53ZWFwb25DaG9pY2VcbiAgICAgIClcbiAgICAgIGlmICh3ZWFwb24pIHJldHVybiB3ZWFwb25cbiAgICB9XG4gIH1cblxuICBnZXQgaW5mbGljdGVkRGFtYWdlRm9ybXVsYSAoKSB7XG4gICAgaWYgKHRoaXMudXNlZFdlYXBvbikge1xuICAgICAgY29uc3Qgd2VhcG9uID0gdGhpcy51c2VkV2VhcG9uXG4gICAgICBpZiAod2VhcG9uICYmIHdlYXBvbi5kYW1hZ2UgJiYgUm9sbC52YWxpZGF0ZSh3ZWFwb24uZGFtYWdlKSkge1xuICAgICAgICByZXR1cm4gd2VhcG9uLmRhbWFnZVxuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBnZXQgdmFsaWRPYnN0YWNsZURhbWFnZSAoKSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5kYXRhLm9ic3RhY2xlLmhhc0hpdFBvaW50cyAmJlxuICAgICAgIWlzTmFOKE51bWJlcih0aGlzLmRhdGEub2JzdGFjbGUuSGl0UG9pbnRzKSkgJiZcbiAgICAgIE51bWJlcih0aGlzLmRhdGEub2JzdGFjbGUuSGl0UG9pbnRzKSA+IDAgJiZcbiAgICAgIHRoaXMuaW5mbGljdGVkRGFtYWdlRm9ybXVsYVxuICAgICkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBnZXQgc3RyaW5ncyAoKSB7XG4gICAgY29uc3Qgc3RyaW5ncyA9IHt9XG4gICAgc3RyaW5ncy5kYW1hZ2VSb2xsUmVxdWVzdCA9IHRoaXMudXNlZFdlYXBvbi5uYW1lXG5cbiAgICByZXR1cm4gc3RyaW5nc1xuICB9XG5cbiAgLy8gQWN0aW9ucyA6XG4gIGFzeW5jIHZhbGlkYXRlQ2FyZCAob3B0aW9ucykge1xuICAgIGxldCBsb2FjdGlvbkNoYW5nZWRcbiAgICBsZXQgcGFydGljaXBhbnRDaGFnZWQgPSBmYWxzZVxuICAgIGNvbnN0IG9ic3RhY2xlVXBkYXRlID0ge31cbiAgICBvYnN0YWNsZVVwZGF0ZS5vYnN0YWNsZURldGFpbHMgPSB7fVxuICAgIGNvbnN0IHBhcnRpY2lwYW50VXBkYXRlID0ge31cbiAgICBpZiAodGhpcy5kYXRhLmZsYWdzLm9ic3RhY2xlRGVzdG95ZWQpIHtcbiAgICAgIGxvYWN0aW9uQ2hhbmdlZCA9IHRydWVcbiAgICAgIG9ic3RhY2xlVXBkYXRlLm9ic3RhY2xlID0gZmFsc2VcbiAgICAgIG9ic3RhY2xlVXBkYXRlLm9ic3RhY2xlRGV0YWlscy5oYXphcmQgPSBmYWxzZVxuICAgICAgb2JzdGFjbGVVcGRhdGUub2JzdGFjbGVEZXRhaWxzLmJhcnJpZXIgPSBmYWxzZVxuICAgIH1cblxuICAgIGNvbnN0IGRpZmYgPSB0aGlzLmxpc3RDaGFuZ2VzKClcbiAgICBpZiAoZGlmZi5jaGFuZ2VzKSB7XG4gICAgICBpZiAodGhpcy5kYXRhLnJlZmxlY3RPYnN0YWxlQ2hhbmdlcykge1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhkaWZmLm9ic3RhY2xlKSkge1xuICAgICAgICAgIGlmIChrZXkgIT09ICd0eXBlJykge1xuICAgICAgICAgICAgb2JzdGFjbGVVcGRhdGUub2JzdGFjbGVEZXRhaWxzW3ZhbHVlLmtleV0gPSB2YWx1ZS5uZXdcbiAgICAgICAgICAgIGxvYWN0aW9uQ2hhbmdlZCA9IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5kYXRhLnRvdGFsT2JzdGFjbGVEYW1hZ2UgPiAwICYmIHRoaXMuZGF0YS5vYnN0YWNsZS5oYXNIaXRQb2ludHMpIHtcbiAgICAgIGxldCByZW1haW5pbmdIcCA9IHRoaXMuZGF0YS5vYnN0YWNsZS5IaXRQb2ludHNcbiAgICAgIHJlbWFpbmluZ0hwIC09IHRoaXMuZGF0YS50b3RhbE9ic3RhY2xlRGFtYWdlXG4gICAgICBpZiAocmVtYWluaW5nSHAgPCAwKSByZW1haW5pbmdIcCA9IDBcbiAgICAgIGlmICh0aGlzLm9ic3RhY2xlLkhpdFBvaW50cyAhPT0gcmVtYWluaW5nSHApIHtcbiAgICAgICAgb2JzdGFjbGVVcGRhdGUub2JzdGFjbGVEZXRhaWxzLkhpdFBvaW50cyA9IHJlbWFpbmluZ0hwXG4gICAgICAgIHRoaXMuZGF0YS5vYnN0YWNsZS5IaXRQb2ludHMgPSByZW1haW5pbmdIcFxuICAgICAgICBsb2FjdGlvbkNoYW5nZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZGF0YS50b3RhbFBsYXllckRhbWFnZVRha2VuID4gMCkge1xuICAgICAgcGFydGljaXBhbnRDaGFnZWQgPSB0cnVlXG4gICAgICBpZiAodGhpcy5wYXJ0aWNpcGFudC5hY3Rvcikge1xuICAgICAgICBhd2FpdCB0aGlzLnBhcnRpY2lwYW50LmFjdG9yLmRlYWxEYW1hZ2UoXG4gICAgICAgICAgdGhpcy5kYXRhLnRvdGFsUGxheWVyRGFtYWdlVGFrZW4sXG4gICAgICAgICAgeyBpZ25vcmVBcm1vcjogdHJ1ZSB9XG4gICAgICAgIClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnRpY2lwYW50VXBkYXRlLmhwID0gdGhpcy5wYXJ0aWNpcGFudERhdGEuaHBcbiAgICAgICAgcGFydGljaXBhbnRVcGRhdGUuaHAgLT0gdGhpcy5kYXRhLnRvdGFsUGxheWVyRGFtYWdlVGFrZW5cbiAgICAgICAgaWYgKHBhcnRpY2lwYW50VXBkYXRlLmhwIDwgMCkgcGFydGljaXBhbnRVcGRhdGUuaHAgPSAwXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZGF0YS50b3RhbEFjdGlvbkNvc3QgPiAwKSB7XG4gICAgICBwYXJ0aWNpcGFudENoYWdlZCA9IHRydWVcbiAgICAgIHBhcnRpY2lwYW50VXBkYXRlLmN1cnJlbnRNb3ZlbWVudEFjdGlvbnMgPVxuICAgICAgICB0aGlzLnBhcnRpY2lwYW50RGF0YS5jdXJyZW50TW92ZW1lbnRBY3Rpb25zXG4gICAgICBwYXJ0aWNpcGFudFVwZGF0ZS5jdXJyZW50TW92ZW1lbnRBY3Rpb25zIC09IHRoaXMuZGF0YS50b3RhbEFjdGlvbkNvc3RcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHRoaXMuZGF0YS5mbGFncy5jb25zdW1lQm9udXNEaWNlID09PSAndW5kZWZpbmVkJykgdGhpcy5kYXRhLmZsYWdzLmNvbnN1bWVCb251c0RpY2UgPSB0cnVlIC8vIEJvbnVzIGRpY2UgYXdhcmRlZCBkdXJpbmcgZmxvdyBhcmUgYmVpbmcgY29uc3VtZWRcblxuICAgIGlmICh0aGlzLmRhdGEuZmxhZ3MuY29uc3VtZUJvbnVzRGljZSkge1xuICAgICAgcGFydGljaXBhbnRDaGFnZWQgPSB0cnVlXG4gICAgICBwYXJ0aWNpcGFudFVwZGF0ZS5ib251c0RpY2UgPSAwXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChcbiAgICAgICAgIWlzTmFOKHRoaXMuZGF0YS5ib251c0RpY2UpICYmXG4gICAgICAgIHRoaXMuZGF0YS5ib251c0RpY2UgIT09IHRoaXMucGFydGljaXBhbnQuYm9udXNEaWNlXG4gICAgICApIHtcbiAgICAgICAgcGFydGljaXBhbnRVcGRhdGUuYm9udXNEaWNlID0gdGhpcy5kYXRhLmJvbnVzRGljZVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmRhdGEubW92ZVBsYXllcikge1xuICAgICAgbGV0IHRhcmdldExvY2F0aW9uXG4gICAgICBpZiAodGhpcy5kYXRhLmZvcndhcmQpIHtcbiAgICAgICAgdGFyZ2V0TG9jYXRpb24gPSB0aGlzLmxvY2F0aW9uXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRMb2NhdGlvbiA9IHRoaXMuY2hhc2UuZ2V0TG9jYXRpb25TaGlmdCh0aGlzLmxvY2F0aW9uLnV1aWQsIHtcbiAgICAgICAgICBza2lwOiAtMVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICBpZiAodGFyZ2V0TG9jYXRpb24udXVpZCkge1xuICAgICAgICBhd2FpdCB0aGlzLmNoYXNlLm1vdmVQYXJ0aWNpcGFudFRvTG9jYXRpb24oXG4gICAgICAgICAgdGhpcy5wYXJ0aWNpcGFudERhdGEudXVpZCxcbiAgICAgICAgICB0YXJnZXRMb2NhdGlvbi51dWlkLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNjcm9sbFRvTG9jYXRpb246IHRydWUsXG4gICAgICAgICAgICBhY3RpdmF0ZUxvY2F0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgIHJlbmRlcjogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobG9hY3Rpb25DaGFuZ2VkKSB7XG4gICAgICBhd2FpdCB0aGlzLmNoYXNlLnVwZGF0ZUxvY2F0aW9uKHRoaXMubG9jYXRpb24udXVpZCwgb2JzdGFjbGVVcGRhdGUsIHtcbiAgICAgICAgcmVuZGVyOiBmYWxzZVxuICAgICAgfSlcbiAgICB9XG4gICAgaWYgKHBhcnRpY2lwYW50Q2hhZ2VkKSB7XG4gICAgICBhd2FpdCB0aGlzLmNoYXNlLnVwZGF0ZVBhcnRpY2lwYW50KFxuICAgICAgICB0aGlzLnBhcnRpY2lwYW50RGF0YS51dWlkLFxuICAgICAgICBwYXJ0aWNpcGFudFVwZGF0ZSxcbiAgICAgICAgeyByZW5kZXI6IGZhbHNlIH1cbiAgICAgIClcbiAgICB9XG4gICAgdGhpcy5kYXRhLnN0YXRlcy5jbG9zZWQgPSB0cnVlXG4gICAgYXdhaXQgdGhpcy5jaGFzZS5hY3RpdmF0ZU5leHRQYXJ0aWNpcGFudFR1cm4oKSAvLyBSZW5kZXIgd2lsbCBiZSBkb25lIHRoZXJlICFcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgYXN5bmMgZGVmaW5lT2JzdGFjbGUgKG9wdGlvbnMpIHtcbiAgICBpZiAoIXRoaXMuZGF0YS5zdGF0ZXMpIHRoaXMuZGF0YS5zdGF0ZXMgPSB7fVxuICAgIHRoaXMuZGF0YS5zdGF0ZXMub2JzdGFjbGVEZWZpbmVkID0gdHJ1ZVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBhc3luYyB0cnlUb05lZ290aWF0ZU9ic3RhY2xlIChvcHRpb25zKSB7XG4gICAgdGhpcy5kYXRhLnN0YXRlcy5icmVha09yTmVnb3RpYXRlRGVmaW5lZCA9IHRydWVcbiAgICB0aGlzLmRhdGEuc3RhdGVzLnRyeVRvTmVnb3RpYXRlID0gdHJ1ZVxuICAgIHRoaXMuZGF0YS5zdGF0ZXMudHJ5VG9CcmVhayA9IGZhbHNlXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGFzeW5jIHRyeVRvQnJlYWtEb3duT2JzdGFjbGUgKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRhdGEuc3RhdGVzLmJyZWFrT3JOZWdvdGlhdGVEZWZpbmVkID0gdHJ1ZVxuICAgIHRoaXMuZGF0YS5zdGF0ZXMudHJ5VG9OZWdvdGlhdGUgPSBmYWxzZVxuICAgIHRoaXMuZGF0YS5zdGF0ZXMudHJ5VG9CcmVhayA9IHRydWVcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgYXN5bmMgY2FuY2VsT2JzdGFjbGVEZWZpbml0aW9uIChvcHRpb25zKSB7XG4gICAgdGhpcy5kYXRhLnN0YXRlcy5vYnN0YWNsZURlZmluZWQgPSBmYWxzZVxuICAgIHRoaXMuZGF0YS5zdGF0ZXMuYnJlYWtPck5lZ290aWF0ZURlZmluZWQgPSBmYWxzZVxuICAgIHRoaXMuZGF0YS5zdGF0ZXMudHJ5VG9OZWdvdGlhdGUgPSBmYWxzZVxuICAgIHRoaXMuZGF0YS5zdGF0ZXMudHJ5VG9CcmVhayA9IGZhbHNlXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGFzeW5jIGNhbmNlbEJyZWFrT3JQYXNzQ2hvaWNlIChvcHRpb25zKSB7XG4gICAgaWYgKCF0aGlzLmRhdGEub2JzdGFjbGUuaGFzSGl0UG9pbnRzKSByZXR1cm4gdGhpcy5jYW5jZWxPYnN0YWNsZURlZmluaXRpb24oKVxuICAgIHRoaXMuZGF0YS5zdGF0ZXMuYnJlYWtPck5lZ290aWF0ZURlZmluZWQgPSBmYWxzZVxuICAgIHRoaXMuZGF0YS5zdGF0ZXMudHJ5VG9OZWdvdGlhdGUgPSBmYWxzZVxuICAgIHRoaXMuZGF0YS5zdGF0ZXMudHJ5VG9CcmVhayA9IGZhbHNlXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGFzeW5jIHJlcXVlc3RSb2xsIChvcHRpb25zKSB7XG4gICAgdGhpcy5kYXRhLnN0YXRlcy5wbGF5ZXJBY3Rpb25EZWZpbmVkID0gdHJ1ZVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBhc3luYyB0YWtlQ2F1dGlvdXNBcHByb2FjaCAob3B0aW9ucykge1xuICAgIGlmICghdGhpcy5kYXRhLnRvdGFsQ2F1dGlvdXNBcHByb2FjaCkgdGhpcy5kYXRhLnRvdGFsQ2F1dGlvdXNBcHByb2FjaCA9IDBcbiAgICB0aGlzLmRhdGEudG90YWxDYXV0aW91c0FwcHJvYWNoICs9IDFcbiAgICB0aGlzLmRhdGEuYm9udXNEaWNlICs9IDFcbiAgICB0aGlzLmRhdGEudG90YWxBY3Rpb25Db3N0ICs9IDFcbiAgICBpZiAoIXRoaXMuZGF0YS5mbGFncy5jb25zdW1lQm9udXNEaWNlKSB7XG4gICAgICB0aGlzLmRhdGEuZmxhZ3MuY29uc3VtZUJvbnVzRGljZSA9IHRydWVcbiAgICB9XG4gICAgaWYgKCF0aGlzLmRhdGEuZmxhZ3MuaGFzQm9udXNEaWNlKSB7XG4gICAgICB0aGlzLmRhdGEuZmxhZ3MuaGFzQm9udXNEaWNlID0gdHJ1ZVxuICAgIH1cbiAgICBpZiAodGhpcy5kYXRhLm1vdmVtZW50QWN0aW9uIDw9IHRoaXMuZGF0YS50b3RhbEFjdGlvbkNvc3QpIHsgLy8gQWxsIG1vdiBhY3Rpb24gaGF2ZSBiZWVuIHVzZWQgdG8gdGFrZSBjdWF0aW91cyBhcHByb2FjaC5cbiAgICAgIHRoaXMuZGF0YS5mbGFncy5jb25zdW1lQm9udXNEaWNlID0gZmFsc2UgLy8gRG8gbm90IGNvbnN1bWUgdGhlIGJvbnVzIGRpY2UuXG4gICAgICB0aGlzLmRhdGEuc3RhdGVzLmNhcmRSZXNvbHZlZCA9IHRydWVcbiAgICAgIHRoaXMuZGF0YS5tb3ZlUGxheWVyID0gZmFsc2VcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGFzeW5jIHJvbGxTa2lsbENoZWNrIChvcHRpb25zKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gb3B0aW9ucy5ldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykpIHJldHVyblxuICAgIHRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKCdkaXNhYmxlZCcpXG4gICAgaWYgKCF0aGlzLnJvbGwpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk5vdGhpbmdUb1JvbGwnKSlcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAoIXRoaXMuZGF0YS5vYmplY3RzKSB0aGlzLmRhdGEub2JqZWN0cyA9IHt9XG4gICAgdGhpcy5kYXRhLm9iamVjdHMuY2hlY2sgPSBDb0M3Q2hlY2suY3JlYXRlRnJvbUFjdG9yUm9sbERhdGEodGhpcy5yb2xsKVxuICAgIGlmICghdGhpcy5kYXRhLm9iamVjdHMuY2hlY2spIHJldHVybiBmYWxzZVxuICAgIHRoaXMuZGF0YS5vYmplY3RzLmNoZWNrLmRlbnlQdXNoID0gdHJ1ZSAvLyBPYnN0YWNsZSBjaGVjayBjYW4ndCBiZSBwdXNoZWRcbiAgICBhd2FpdCB0aGlzLmRhdGEub2JqZWN0cy5jaGVjay5fcGVyZm9ybSh7IGZvcmNlRFNOOiB0cnVlIH0pXG4gICAgdGhpcy5kYXRhLnRvdGFsQWN0aW9uQ29zdCArPSAxXG4gICAgdGhpcy5kYXRhLnN0YXRlcy5jaGVja1JvbGxlZCA9IHRydWVcbiAgICB0YXJnZXQuY2xhc3NMaXN0LnRvZ2dsZSgnZGlzYWJsZWQnKVxuICAgIGlmICh0aGlzLmRhdGEub2JqZWN0cy5jaGVjay5wYXNzZWQpIHtcbiAgICAgIHRoaXMuZGF0YS5tb3ZlUGxheWVyID0gdHJ1ZVxuICAgICAgdGhpcy5kYXRhLnN0YXRlcy5jYXJkUmVzb2x2ZWQgPSB0cnVlXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5kYXRhLmFybW9yID09PSAndW5kZWZpbmVkJyAmJiB0aGlzLnBhcnRpY2lwYW50LmFjdG9yKSB7XG4gICAgICAgIHRoaXMuZGF0YS5hcm1vciA9XG4gICAgICAgICAgdGhpcy5wYXJ0aWNpcGFudC5hY3Rvci5kYXRhLmRhdGEuYXR0cmlicy5hcm1vci52YWx1ZSB8fCAwXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGFzeW5jIHVzZUx1Y2sgKG9wdGlvbnMpIHtcbiAgICBhd2FpdCBDb0M3Q2hlY2suYWx0ZXIodGhpcy5kYXRhLm9iamVjdHMuY2hlY2ssICd1c2VMdWNrJywge1xuICAgICAgdGFyZ2V0OiBvcHRpb25zLmV2ZW50LmN1cnJlbnRUYXJnZXQsXG4gICAgICB1cGRhdGU6IGZhbHNlXG4gICAgfSlcbiAgICBpZiAodGhpcy5kYXRhLm9iamVjdHMuY2hlY2sucGFzc2VkKSB7XG4gICAgICB0aGlzLmRhdGEuc3RhdGVzLmNhcmRSZXNvbHZlZCA9IHRydWVcbiAgICAgIHRoaXMuZGF0YS5tb3ZlUGxheWVyID0gdHJ1ZVxuICAgICAgdGhpcy5kYXRhLnRvdGFsQWN0aW9uQ29zdCArPSAxXG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBhc3luYyByb2xsRmFpbENvbnNlcXVlbmNlcyAob3B0aW9ucykge1xuICAgIGlmICghdGhpcy5kYXRhLm9iamVjdHMpIHRoaXMuZGF0YS5vYmplY3RzID0ge31cbiAgICBpZiAodGhpcy5kYXRhLm9ic3RhY2xlLmhhc0RhbWFnZSAmJiB0aGlzLmRhdGEub2JqZWN0cy5jaGVjaz8uaXNGYWlsdXJlKSB7XG4gICAgICBjb25zdCBkYW1hZ2UgPVxuICAgICAgICB0eXBlb2YgdGhpcy5kYXRhLm9ic3RhY2xlLmZhaWxlZENoZWNrRGFtYWdlID09PSAnbnVtYmVyJ1xuICAgICAgICAgID8gYCR7dGhpcy5kYXRhLm9ic3RhY2xlLmZhaWxlZENoZWNrRGFtYWdlfWBcbiAgICAgICAgICA6IHRoaXMuZGF0YS5vYnN0YWNsZS5mYWlsZWRDaGVja0RhbWFnZVxuICAgICAgdGhpcy5kYXRhLm9iamVjdHMuZmFpbGVkRGFtYWdlUm9sbCA9IG5ldyBSb2xsKGRhbWFnZSlcbiAgICAgIGF3YWl0IHRoaXMuZGF0YS5vYmplY3RzLmZhaWxlZERhbWFnZVJvbGwuZXZhbHVhdGUoeyBhc3luYzogdHJ1ZSB9KVxuICAgIH1cbiAgICBpZiAodGhpcy5kYXRhLm9ic3RhY2xlLmhhemFyZCkge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLmRhdGEub2JzdGFjbGUuaGFzQWN0aW9uQ29zdCAmJlxuICAgICAgICB0aGlzLmRhdGEub2JqZWN0cy5jaGVjaz8uaXNGYWlsdXJlXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgYWN0aW9uQ29zdCA9XG4gICAgICAgICAgdHlwZW9mIHRoaXMuZGF0YS5vYnN0YWNsZS5mYWlsZWRBY3Rpb25Db3N0ID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyBgJHt0aGlzLmRhdGEub2JzdGFjbGUuZmFpbGVkQWN0aW9uQ29zdH1gXG4gICAgICAgICAgICA6IHRoaXMuZGF0YS5vYnN0YWNsZS5mYWlsZWRBY3Rpb25Db3N0XG4gICAgICAgIHRoaXMuZGF0YS5vYmplY3RzLmZhaWxlZEFjdGlvblJvbGwgPSBuZXcgUm9sbChhY3Rpb25Db3N0KVxuICAgICAgICBhd2FpdCB0aGlzLmRhdGEub2JqZWN0cy5mYWlsZWRBY3Rpb25Sb2xsLmV2YWx1YXRlKHsgYXN5bmM6IHRydWUgfSlcbiAgICAgICAgdGhpcy5kYXRhLnRvdGFsQWN0aW9uQ29zdCArPSAodGhpcy5kYXRhLm9iamVjdHMuZmFpbGVkQWN0aW9uUm9sbC50b3RhbCAtIDEpIC8vIDEgYWN0aW9uIGFscmVhZHkgc3BlbmQgZm9yIHNraWxsIGNoZWNrXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5kYXRhLnN0YXRlcy5mYWlsZWRDb25zZXF1ZW5jZXNSb2xsZWQgPSB0cnVlXG4gICAgdGhpcy5kYXRhLnN0YXRlcy5jYXJkUmVzb2x2ZWQgPSB0cnVlXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGFzeW5jIGFza1JvbGxPYnN0YWNsZURhbWFnZSAob3B0aW9ucykge1xuICAgIHRoaXMuZGF0YS5zdGF0ZXMucGxheWVyQWN0aW9uRGVmaW5lZCA9IHRydWVcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgYXN5bmMgcm9sbE9ic3RhY2xlRGFtYWdlIChvcHRpb25zKSB7XG4gICAgaWYgKCF0aGlzLmRhdGEub2JqZWN0cykgdGhpcy5kYXRhLm9iamVjdHMgPSB7fVxuICAgIHRoaXMuZGF0YS5vYmplY3RzLm9ic3RhY2xlRGFtYWdlUm9sbCA9IG5ldyBSb2xsKHRoaXMudXNlZFdlYXBvbj8uZGFtYWdlKVxuICAgIGF3YWl0IHRoaXMuZGF0YS5vYmplY3RzLm9ic3RhY2xlRGFtYWdlUm9sbC5ldmFsdWF0ZSh7IGFzeW5jOiB0cnVlIH0pXG4gICAgYXdhaXQgQ29DN0RpY2Uuc2hvd1JvbGxEaWNlM2QodGhpcy5kYXRhLm9iamVjdHMub2JzdGFjbGVEYW1hZ2VSb2xsKVxuICAgIHRoaXMuZGF0YS5zdGF0ZXMub2JzdGFjbGVEYW1hZ2VSb2xsZWQgPSB0cnVlXG4gICAgdGhpcy5kYXRhLnRvdGFsQWN0aW9uQ29zdCArPSAxXG4gICAgdGhpcy5kYXRhLnN0YXRlcy5jYXJkUmVzb2x2ZWQgPSB0cnVlXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8vIExpc3QgYWxsIGNoYW5nZXNcbiAgbGlzdENoYW5nZXMgKHZhbGlkYXRlID0gZmFsc2UpIHtcbiAgICBjb25zdCBkaWZmID0ge1xuICAgICAgb2JzdGFjbGU6IHt9LFxuICAgICAgcGxheWVyOiB7fSxcbiAgICAgIGNoYW5nZXM6IGZhbHNlXG4gICAgfVxuICAgIGNvbnN0IG5hbWVzID0ge1xuICAgICAgYmFycmllcjogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlR5cGUnKSxcbiAgICAgIGhhemFyZDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlR5cGUnKSxcbiAgICAgIGhhc0hpdFBvaW50czogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkJyZWFrYWJsZScpLFxuICAgICAgSGl0UG9pbnRzOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuSGl0UG9pbnRzJyksXG4gICAgICBoYXNBY3Rpb25Db3N0OiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQWN0aW9uQ29zdCcpLFxuICAgICAgZmFpbGVkQWN0aW9uQ29zdDogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkFjdGlvbkNvc3QnKSxcbiAgICAgIGhhc0RhbWFnZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkZpZ2h0QmFjaycpLFxuICAgICAgZmFpbGVkQ2hlY2tEYW1hZ2U6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5XZWFwb25EYW1hZ2UnKSxcbiAgICAgIGNoZWNrTmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNoZWNrJyksXG4gICAgICBuYW1lOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTmFtZScpXG4gICAgfVxuXG4gICAgaWYgKHZhbGlkYXRlICYmICF0aGlzLmRhdGEudmFsaWRhdGlvbikge1xuICAgICAgdGhpcy5kYXRhLnZhbGlkYXRpb24gPSB7fVxuICAgIH1cblxuICAgIGNvbnN0IG5ld09ic3RhY2xlID0gZm91bmRyeS51dGlscy5kaWZmT2JqZWN0KFxuICAgICAgdGhpcy5vYnN0YWNsZSxcbiAgICAgIHRoaXMuZGF0YS5vYnN0YWNsZVxuICAgIClcbiAgICAvLyBjb25zdCBvbGRPYnN0YWNsZSA9IGZvdW5kcnkudXRpbHMuZGlmZk9iamVjdCh0aGlzLmRhdGEub2JzdGFjbGUsIHRoaXMub2JzdGFjbGUpXG5cbiAgICBmb3IgKGNvbnN0IFtrZXldIG9mIE9iamVjdC5lbnRyaWVzKG5ld09ic3RhY2xlKSkge1xuICAgICAgLy8gaWYgKCdiYXJyaWVyJyA9PSBrZXkgfHwgJ2hhemFyZCcgPT0ga2V5KVxuICAgICAgLy8ge1xuICAgICAgLy8gICBkaWZmLmNoYW5nZXMgPSB0cnVlXG4gICAgICAvLyAgIGRpZmYub2JzdGFjbGUudHlwZSA9IHtcbiAgICAgIC8vICAgICBvbGQ6IGdhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgIC8vICAgICAgIHRoaXMub2JzdGFjbGUuYmFycmllciA/ICdDb0M3LkJhcnJpZXInIDogJ0NvQzcuSGF6YXJkJ1xuICAgICAgLy8gICAgICksXG4gICAgICAvLyAgICAgbmV3OiBnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAvLyAgICAgICB0aGlzLmRhdGEub2JzdGFjbGUuYmFycmllciA/ICdDb0M3LkJhcnJpZXInIDogJ0NvQzcuSGF6YXJkJ1xuICAgICAgLy8gICAgICksXG4gICAgICAvLyAgICAga2V5OiAndHlwZScsXG4gICAgICAvLyAgICAgbmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlR5cGUnKVxuICAgICAgLy8gICB9XG4gICAgICAvLyAgIGlmICh2YWxpZGF0ZSkge1xuICAgICAgLy8gICAgIHRoaXMuZGF0YS52YWxpZGF0aW9uW2tleV0gPSB0cnVlXG4gICAgICAvLyAgICAgdGhpcy5kYXRhLnZhbGlkYXRpb24udHlwZSA9IHRydWVcbiAgICAgIC8vICAgfVxuICAgICAgLy8gfVxuICAgICAgLy8gZWxzZVxuICAgICAgLy8ge1xuICAgICAgaWYgKFxuICAgICAgICAhKFxuICAgICAgICAgIChuZXdPYnN0YWNsZVtrZXldID09PSAnJyAmJiB0aGlzLm9ic3RhY2xlW2tleV0gPT09IG51bGwpIHx8XG4gICAgICAgICAgKCFpc05hTihOdW1iZXIobmV3T2JzdGFjbGVba2V5XSkpICYmXG4gICAgICAgICAgICBOdW1iZXIobmV3T2JzdGFjbGVba2V5XSkgPT09IHRoaXMub2JzdGFjbGVba2V5XSlcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIGRpZmYuY2hhbmdlcyA9IHRydWVcblxuICAgICAgICBkaWZmLm9ic3RhY2xlW2tleV0gPSB7XG4gICAgICAgICAgb2xkOiB0aGlzLm9ic3RhY2xlW2tleV0sXG4gICAgICAgICAgbmV3OiBuZXdPYnN0YWNsZVtrZXldLFxuICAgICAgICAgIG5hbWU6IG5hbWVzW2tleV0sXG4gICAgICAgICAga2V5XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbGlkYXRlKSB0aGlzLmRhdGEudmFsaWRhdGlvbltrZXldID0gdHJ1ZVxuICAgICAgfVxuICAgICAgLy8gfVxuICAgIH1cblxuICAgIHJldHVybiBkaWZmXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCAkLCBjYW52YXMsIERpYWxvZywgZm91bmRyeSwgZ2FtZSwgUElYSSwgVG9rZW4sIFRva2VuRG9jdW1lbnQsIHVpICovXG5pbXBvcnQgeyBDb0NBY3RvciB9IGZyb20gJy4uLy4uL2FjdG9ycy9hY3Rvci5qcydcbmltcG9ydCB7IENoYXNlT2JzdGFjbGVDYXJkIH0gZnJvbSAnLi4vLi4vY2hhdC9jYXJkcy9jaGFzZS1vYnN0YWNsZS5qcydcbmltcG9ydCB7IENvQzdDaGVjayB9IGZyb20gJy4uLy4uL2NoZWNrLmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy5qcydcbmltcG9ydCB7IENvQzdJdGVtIH0gZnJvbSAnLi4vaXRlbS5qcydcbmltcG9ydCB7IF9wYXJ0aWNpcGFudCwgc29ydEJ5Um9sZUFuZERleCB9IGZyb20gJy4vcGFydGljaXBhbnQuanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3Q2hhc2UgZXh0ZW5kcyBDb0M3SXRlbSB7XG4gIGNvbnN0cnVjdG9yIChkYXRhLCBjb250ZXh0KSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhLmltZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRhdGEuaW1nID0gJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMvcnVubmluZy1zb2xpZC5zdmcnXG4gICAgfVxuICAgIHN1cGVyKGRhdGEsIGNvbnRleHQpXG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dFxuICB9XG5cbiAgLy8gSGFuZGxlIHBhcnRpY2lwYW50c1xuICBnZXQgcGFydGljaXBhbnRzICgpIHtcbiAgICBjb25zdCBwTGlzdCA9IFtdXG4gICAgY29uc3QgcHJleXMgPSB0aGlzLnN5c3RlbS5wYXJ0aWNpcGFudHNcbiAgICAgIC5maWx0ZXIocCA9PiAhcC5jaGFzZXIpXG4gICAgICAubWFwKHAgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IF9wYXJ0aWNpcGFudChwKVxuICAgICAgfSlcbiAgICBjb25zdCBjaGFzZXJzID0gdGhpcy5zeXN0ZW0ucGFydGljaXBhbnRzXG4gICAgICAuZmlsdGVyKHAgPT4gcC5jaGFzZXIpXG4gICAgICAubWFwKHAgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IF9wYXJ0aWNpcGFudChwKVxuICAgICAgfSlcbiAgICB0aGlzLnN5c3RlbS5wYXJ0aWNpcGFudHMuZm9yRWFjaChwID0+IHtcbiAgICAgIC8vIHAuaW5kZXggPSBwTGlzdC5sZW5ndGggLSAxXG4gICAgICBwLmFzc2lzdCA9IFtdXG4gICAgICBpZiAocC5jaGFzZXIpIHtcbiAgICAgICAgcC5hc3Npc3QgPSBjaGFzZXJzXG4gICAgICAgICAgLmZpbHRlcihjID0+IGMudXVpZCAhPT0gcC51dWlkICYmICFjLmhhc01heEJvbnVzRGljZSlcbiAgICAgICAgICAubWFwKGMgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHsgdXVpZDogYy51dWlkLCBuYW1lOiBjLm5hbWUgfVxuICAgICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwLmFzc2lzdCA9IHByZXlzXG4gICAgICAgICAgLmZpbHRlcihjID0+IGMudXVpZCAhPT0gcC51dWlkICYmICFjLmhhc01heEJvbnVzRGljZSlcbiAgICAgICAgICAubWFwKGMgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHsgdXVpZDogYy51dWlkLCBuYW1lOiBjLm5hbWUgfVxuICAgICAgICAgIH0pXG4gICAgICB9XG4gICAgICBjb25zdCBwYXJ0aWNwYW50ID0gbmV3IF9wYXJ0aWNpcGFudChwKVxuICAgICAgLy8gcGFydGljcGFudC5sb2NhdGlvbiA9IHRoaXMuZ2V0UGFydGljaXBhbnRMb2NhdGlvbiggcGFydGljcGFudC51dWlkKSAvLyBSZWN1cnNpdml0eVxuICAgICAgcExpc3QucHVzaChwYXJ0aWNwYW50KVxuICAgIH0pXG4gICAgcmV0dXJuIHBMaXN0XG4gIH1cblxuICBnZXQgcGFydGljaXBhbnRzT2JqZWN0ICgpIHtcbiAgICBjb25zdCBwYXJ0aWNpcGFudHMgPSB0aGlzLnBhcnRpY2lwYW50c1xuICAgIHBhcnRpY2lwYW50cy5mb3JFYWNoKHAgPT4ge1xuICAgICAgcC5sb2NhdGlvbiA9IHRoaXMuZ2V0UGFydGljaXBhbnRMb2NhdGlvbihwLnV1aWQpXG4gICAgfSlcbiAgICByZXR1cm4gcGFydGljaXBhbnRzXG4gIH1cblxuICBnZXQgYWN0aXZlUGFydGljaXBhbnREYXRhICgpIHtcbiAgICByZXR1cm4gdGhpcy5zeXN0ZW0ucGFydGljaXBhbnRzLmZpbmQocCA9PiBwLmFjdGl2ZSlcbiAgfVxuXG4gIGdldCBhY3RpdmVBY3RvciAoKSB7XG4gICAgY29uc3QgcCA9IHRoaXMuYWN0aXZlUGFydGljaXBhbnREYXRhXG4gICAgaWYgKCFwKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgaWYgKHAuZG9jVXVpZCkge1xuICAgICAgcmV0dXJuIENvQzdVdGlsaXRpZXMuZ2V0QWN0b3JGcm9tS2V5KHAuZG9jVXVpZClcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgZ2V0IHBhcnRpY2lwYW50c0J5QWRqdXN0ZWRNb3YgKCkge1xuICAgIGNvbnN0IHBMaXN0ID0gdGhpcy5hY3R1YWxQYXJ0aWNpcGFudHMuc29ydChcbiAgICAgIChhLCBiKSA9PiBhLmFkanVzdGVkTW92IC0gYi5hZGp1c3RlZE1vdlxuICAgIClcbiAgICBwTGlzdC5mb3JFYWNoKHAgPT4ge1xuICAgICAgcC5sb2NhdGlvbiA9IHRoaXMuZ2V0UGFydGljaXBhbnRMb2NhdGlvbihwLnV1aWQpXG4gICAgfSlcbiAgICByZXR1cm4gcExpc3RcbiAgfVxuXG4gIGdldCBwYXJ0aWNpcGFudHNCeUluaXRpYXRpdmUgKCkge1xuICAgIGNvbnN0IHBMaXN0ID0gdGhpcy5hY3R1YWxQYXJ0aWNpcGFudHMuc29ydChcbiAgICAgIChhLCBiKSA9PiBiLmluaXRpYXRpdmUgLSBhLmluaXRpYXRpdmVcbiAgICApXG4gICAgcExpc3QuZm9yRWFjaChwID0+IHtcbiAgICAgIHAubG9jYXRpb24gPSB0aGlzLmdldFBhcnRpY2lwYW50TG9jYXRpb24ocC51dWlkKVxuICAgIH0pXG4gICAgcmV0dXJuIHBMaXN0XG4gIH1cblxuICBnZXQgcHJleXMgKCkge1xuICAgIHJldHVybiB0aGlzLnBhcnRpY2lwYW50cy5maWx0ZXIocCA9PiAhcC5pc0NoYXNlciAmJiBwLmlzVmFsaWQpIHx8IFtdXG4gIH1cblxuICBnZXQgY2hhc2VycyAoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFydGljaXBhbnRzLmZpbHRlcihwID0+IHAuaXNDaGFzZXIgJiYgcC5pc1ZhbGlkKSB8fCBbXVxuICB9XG5cbiAgZ2V0IGFsbEhhdmVWYWxpZE1vdiAoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFydGljaXBhbnRzLmV2ZXJ5KGUgPT4gZS5oYXNWYWxpZE1vdilcbiAgfVxuXG4gIGdldCBhbGxIYXZlU3BlZWRSb2xsICgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJ0aWNpcGFudHMuZXZlcnkocCA9PiBwLnNwZWVkQ2hlY2s/LnJvbGxlZClcbiAgfVxuXG4gIGdldFBhcnRpY2lwYW50TG9jYXRpb24gKHBhcnRpY2lwYW50VXVpZCkge1xuICAgIGlmICghdGhpcy5zeXN0ZW0ubG9jYXRpb25zPy5saXN0Py5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG4gICAgaWYgKCF0aGlzLnN0YXJ0ZWQpIHJldHVybiB1bmRlZmluZWRcbiAgICBjb25zdCBsb2NhdGlvbnMgPSB0aGlzLmxvY2F0aW9uc1xuXG4gICAgY29uc3QgbG9jYXRpb24gPSBsb2NhdGlvbnMuZmluZChsID0+IHtcbiAgICAgIGNvbnN0IGxwID0gbC5wYXJ0aWNpcGFudHM/LmZpbmQocCA9PiBwYXJ0aWNpcGFudFV1aWQgPT09IHAudXVpZClcbiAgICAgIHJldHVybiAhIWxwXG4gICAgfSlcbiAgICBpZiAobG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBsb2NhdGlvblxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBnZXRQYXJ0aWNpcGFudERhdGEgKHBhcnRpY2lwYW50VXVpZCkge1xuICAgIGNvbnN0IHBhcnRpY2lwYW50ID0gdGhpcy5zeXN0ZW0ucGFydGljaXBhbnRzLmZpbmQoXG4gICAgICBwID0+IHBhcnRpY2lwYW50VXVpZCA9PT0gcC51dWlkXG4gICAgKVxuICAgIGlmIChwYXJ0aWNpcGFudCkgcmV0dXJuIGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHBhcnRpY2lwYW50KSAvLyBUT0RPIDogY2hlY2sgaWYgd2UgbmVlZCB0byBkdXBsaWNhdGVcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBnZXRQYXJ0aWNpcGFudCAocGFydGljaXBhbnRVdWlkKSB7XG4gICAgY29uc3QgcGFydGljaXBhbnREYXRhID0gdGhpcy5nZXRQYXJ0aWNpcGFudERhdGEocGFydGljaXBhbnRVdWlkKVxuICAgIGlmIChwYXJ0aWNpcGFudERhdGEpIHJldHVybiBuZXcgX3BhcnRpY2lwYW50KHBhcnRpY2lwYW50RGF0YSlcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBnZXQgbmV4dEFjdGl2ZVBhcnRpY2lwYW50ICgpIHtcbiAgICBpZiAoIXRoaXMuc3RhcnRlZCkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLnBhcnRpY2lwYW50c0J5SW5pdGlhdGl2ZS5maW5kKFxuICAgICAgcCA9PiBwLmRhdGEuY3VycmVudE1vdmVtZW50QWN0aW9ucyA+IDBcbiAgICApXG4gIH1cblxuICBnZXQgc2xvd2VzdFByZXkgKCkge1xuICAgIGNvbnN0IHByZXlzID0gdGhpcy5wYXJ0aWNpcGFudHNcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmFkanVzdGVkTW92IC0gYi5hZGp1c3RlZE1vdilcbiAgICAgID8uZmlsdGVyKHAgPT4gcC5pc1ByZXkpXG4gICAgaWYgKHByZXlzLmxlbmd0aCA+IDApIHJldHVybiBwcmV5c1swXVxuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIGdldCBmYXN0ZXN0Q2hhc2VyICgpIHtcbiAgICBjb25zdCBjaGFzZXJzID0gdGhpcy5wYXJ0aWNpcGFudHNcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmFkanVzdGVkTW92IC0gYi5hZGp1c3RlZE1vdilcbiAgICAgID8uZmlsdGVyKHAgPT4gcC5pc0NoYXNlcilcbiAgICBpZiAoY2hhc2Vycy5sZW5ndGggPiAwKSByZXR1cm4gY2hhc2Vycy5zbGljZSgtMSkucG9wKClcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBnZXQgYWN0dWFsUGFydGljaXBhbnRzICgpIHtcbiAgICBjb25zdCBzbG93ZXN0UHJleSA9IHRoaXMuc2xvd2VzdFByZXlcbiAgICBjb25zdCBmYXN0ZXN0Q2hhc2VyID0gdGhpcy5mYXN0ZXN0Q2hhc2VyXG4gICAgbGV0IHBMaXN0ID0gdGhpcy5wYXJ0aWNpcGFudHNcbiAgICBpZiAoIXRoaXMuc3lzdGVtLmluY2x1ZGVMYXRlY29tZXJzICYmIHNsb3dlc3RQcmV5KSB7XG4gICAgICBwTGlzdCA9IHBMaXN0LmZpbHRlcihwID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBwLmlzUHJleSB8fCAocC5pc0NoYXNlciAmJiBwLmFkanVzdGVkTW92ID49IHNsb3dlc3RQcmV5LmFkanVzdGVkTW92KVxuICAgICAgICApXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmICghdGhpcy5zeXN0ZW0uaW5jbHVkZUVzY2FwZWQgJiYgZmFzdGVzdENoYXNlcikge1xuICAgICAgcExpc3QgPSBwTGlzdC5maWx0ZXIocCA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgcC5pc0NoYXNlciB8fCAocC5pc1ByZXkgJiYgcC5hZGp1c3RlZE1vdiA8PSBmYXN0ZXN0Q2hhc2VyLmFkanVzdGVkTW92KVxuICAgICAgICApXG4gICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiBwTGlzdFxuICB9XG5cbiAgZ2V0IHNsb3dlc3RQYXJ0aWNpcGFudCAoKSB7XG4gICAgY29uc3QgcExpc3QgPSB0aGlzLnBhcnRpY2lwYW50c0J5QWRqdXN0ZWRNb3ZcbiAgICBpZiAocExpc3QubGVuZ3RoID4gMCkgcmV0dXJuIHBMaXN0WzBdXG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgYXN5bmMgdXBkYXRlUGFydGljaXBhbnRzIChsaXN0LCB7IHJlbmRlciA9IHRydWUgfSA9IHt9KSB7XG4gICAgY29uc3QgcGFydGljaXBhbnRzRGF0YSA9IHRoaXMuY2xlYW5QYXJ0aWNpcGFudExpc3QobGlzdClcbiAgICByZXR1cm4gYXdhaXQgdGhpcy51cGRhdGUoXG4gICAgICB7ICdzeXN0ZW0ucGFydGljaXBhbnRzJzogcGFydGljaXBhbnRzRGF0YSB9LFxuICAgICAgeyByZW5kZXIgfVxuICAgIClcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZVBhcnRpY2lwYW50IChwYXJ0aWNpYW50VXVpZCwgdXBkYXRlRGF0YSwgeyByZW5kZXIgPSB0cnVlIH0gPSB7fSkge1xuICAgIGNvbnN0IHBhcnRpY2lwYW50cyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLnBhcnRpY2lwYW50cylcbiAgICBjb25zdCB1cGRhdGUgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh1cGRhdGVEYXRhKVxuICAgIGNvbnN0IHBhcnRpY2lwYW50SW5kZXggPSBwYXJ0aWNpcGFudHMuZmluZEluZGV4KFxuICAgICAgcCA9PiBwYXJ0aWNpYW50VXVpZCA9PT0gcC51dWlkXG4gICAgKVxuICAgIGlmIChwYXJ0aWNpcGFudEluZGV4ID09PSAtMSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGlmICh1cGRhdGUudXVpZCkgZGVsZXRlIHVwZGF0ZS51dWlkXG4gICAgZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChwYXJ0aWNpcGFudHNbcGFydGljaXBhbnRJbmRleF0sIHVwZGF0ZSwge1xuICAgICAgb3ZlcndyaXRlOiB0cnVlXG4gICAgfSlcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZVBhcnRpY2lwYW50cyhwYXJ0aWNpcGFudHMsIHsgcmVuZGVyIH0pXG4gIH1cblxuICBjbGVhblBhcnRpY2lwYW50TGlzdCAobGlzdCkge1xuICAgIGNvbnN0IHBhcnRpY2lwYW50c0RhdGEgPSBsaXN0IHx8IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLnBhcnRpY2lwYW50cylcbiAgICBsaXN0LmZvckVhY2gocCA9PiB7XG4gICAgICBsZXQgZGF0YVxuICAgICAgaWYgKHAuY29uc3RydWN0b3IubmFtZSA9PT0gJ19wYXJ0aWNpcGFudCcpIHtcbiAgICAgICAgZGF0YSA9IHAuZGF0YVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YSA9IHBcbiAgICAgIH1cbiAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5maW5kSW5kZXgocGFydGljaXBhbnRzRGF0YSwgZGF0YS51dWlkKVxuICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICBwYXJ0aWNpcGFudHNEYXRhLnB1c2goZGF0YSlcbiAgICAgICAgdWkubm90aWZpY2F0aW9ucy53YXJuKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5QYXJ0aWNpcGFudERhdGFNaXNzaW5nJykpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJ0aWNpcGFudHNEYXRhW2luZGV4XSA9IGRhdGFcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBwYXJ0aWNpcGFudHNEYXRhXG4gIH1cblxuICBhc3luYyBhc3Npc3RQYXJ0aWNpcGFudCAoXG4gICAgYXNzaXN0YW50VXVpZCxcbiAgICBiZW5lZmljaWFyeVV1aWQsXG4gICAgeyB1c2VNb3ZlbWVudEFjdGlvbnMgPSB0cnVlLCByZW5kZXIgPSB0cnVlIH0gPSB7fVxuICApIHtcbiAgICBjb25zdCBhc3Npc3RhbnQgPSB0aGlzLmdldFBhcnRpY2lwYW50KGFzc2lzdGFudFV1aWQpXG4gICAgY29uc3QgYmVuZWZpY2lhcnkgPSB0aGlzLmdldFBhcnRpY2lwYW50KGJlbmVmaWNpYXJ5VXVpZClcbiAgICBjb25zdCBwYXJ0aWNpcGFudHNEYXRhID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoXG4gICAgICB0aGlzLnN5c3RlbS5wYXJ0aWNpcGFudHNcbiAgICApXG4gICAgY29uc3QgYXNzaXN0YW50SW5kZXggPSBwYXJ0aWNpcGFudHNEYXRhLmZpbmRJbmRleChcbiAgICAgIHAgPT4gYXNzaXN0YW50VXVpZCA9PT0gcC51dWlkXG4gICAgKVxuICAgIGNvbnN0IGJlbmVmaWNpYXJ5SW5kZXggPSBwYXJ0aWNpcGFudHNEYXRhLmZpbmRJbmRleChcbiAgICAgIHAgPT4gYmVuZWZpY2lhcnlVdWlkID09PSBwLnV1aWRcbiAgICApXG5cbiAgICBpZiAoIWFzc2lzdGFudCB8fCAhYmVuZWZpY2lhcnkpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlBhcnRpY2lwYW50Tm90Rm91bmQnKSlcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG5cbiAgICBpZiAoYmVuZWZpY2lhcnkuaGFzTWF4Qm9udXNEaWNlKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkVycm9yQmVuZWZpY2lhcnlBdE1heEJvbnVzJywge1xuICAgICAgICAgIG5hbWU6IGJlbmVmaWNpYXJ5Lm5hbWVcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG5cbiAgICBpZiAodXNlTW92ZW1lbnRBY3Rpb25zKSB7XG4gICAgICBpZiAoYXNzaXN0YW50LmN1cnJlbnRNb3ZlbWVudEFjdGlvbnMgPCAxKSB7XG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5QYXJ0aWNpcGFudE5vdEVub3VnaE1vdmVtZW50Jywge1xuICAgICAgICAgICAgYXNzaXN0YW50VXVpZCxcbiAgICAgICAgICAgIGFjdGlvbnM6IGFzc2lzdGFudC5jdXJyZW50TW92ZW1lbnRBY3Rpb25zXG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgICBhc3Npc3RhbnQuYWx0ZXJNb3ZlbWVudEFjdGlvbnMoLTEpXG4gICAgICBwYXJ0aWNpcGFudHNEYXRhW2Fzc2lzdGFudEluZGV4XSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKGFzc2lzdGFudC5kYXRhKVxuICAgIH1cblxuICAgIGJlbmVmaWNpYXJ5LmFkZEJvbnVzRGljZSgpXG4gICAgcGFydGljaXBhbnRzRGF0YVtiZW5lZmljaWFyeUluZGV4XSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKFxuICAgICAgYmVuZWZpY2lhcnkuZGF0YVxuICAgIClcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZShcbiAgICAgIHsgJ3N5c3RlbS5wYXJ0aWNpcGFudHMnOiBwYXJ0aWNpcGFudHNEYXRhIH0sXG4gICAgICB7IHJlbmRlciB9XG4gICAgKVxuICB9XG5cbiAgYXN5bmMgdG9nZ2xlQm9udXNEaWNlIChwYXJ0aWNpcGFudFV1aWQsIGRpY2VOdW1iZXIsIHsgcmVuZGVyID0gdHJ1ZSB9ID0ge30pIHtcbiAgICBjb25zdCBwYXJ0aWNpcGFudCA9IHRoaXMuZ2V0UGFydGljaXBhbnQocGFydGljaXBhbnRVdWlkKVxuXG4gICAgaWYgKCFwYXJ0aWNpcGFudCkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5QYXJ0aWNpcGFudFV1aWROb3RGb3VuZCcsIHtcbiAgICAgICAgICBwYXJ0aWNpcGFudFV1aWRcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG5cbiAgICBjb25zdCBwYXJ0aWNpcGFudHNEYXRhID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoXG4gICAgICB0aGlzLnN5c3RlbS5wYXJ0aWNpcGFudHNcbiAgICApXG4gICAgY29uc3QgcGFydGljaXBhbnRJbmRleCA9IHBhcnRpY2lwYW50c0RhdGEuZmluZEluZGV4KFxuICAgICAgcCA9PiBwYXJ0aWNpcGFudFV1aWQgPT09IHAudXVpZFxuICAgIClcbiAgICBpZiAocGFydGljaXBhbnQuYm9udXNEaWNlID49IGRpY2VOdW1iZXIpIHBhcnRpY2lwYW50LnJlbW92ZUJvbnVzRGljZSgpXG4gICAgZWxzZSBwYXJ0aWNpcGFudC5hZGRCb251c0RpY2UoKVxuICAgIHBhcnRpY2lwYW50c0RhdGFbcGFydGljaXBhbnRJbmRleF0gPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShcbiAgICAgIHBhcnRpY2lwYW50LmRhdGFcbiAgICApXG4gICAgYXdhaXQgdGhpcy51cGRhdGUoXG4gICAgICB7ICdzeXN0ZW0ucGFydGljaXBhbnRzJzogcGFydGljaXBhbnRzRGF0YSB9LFxuICAgICAgeyByZW5kZXIgfVxuICAgIClcbiAgfVxuXG4gIGFzeW5jIGNhdXRpb3VzQXBwcm9hY2ggKFxuICAgIHBhcnRpY2lwYW50VXVpZCxcbiAgICB7IHVzZU1vdmVtZW50QWN0aW9ucyA9IHRydWUsIHJlbmRlciA9IHRydWUgfSA9IHt9XG4gICkge1xuICAgIGNvbnN0IHBhcnRpY2lwYW50ID0gdGhpcy5nZXRQYXJ0aWNpcGFudChwYXJ0aWNpcGFudFV1aWQpXG5cbiAgICBpZiAoIXBhcnRpY2lwYW50KSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlBhcnRpY2lwYW50VXVpZE5vdEZvdW5kJywge1xuICAgICAgICAgIHBhcnRpY2lwYW50VXVpZFxuICAgICAgICB9KVxuICAgICAgKVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cblxuICAgIGNvbnN0IHBhcnRpY2lwYW50c0RhdGEgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShcbiAgICAgIHRoaXMuc3lzdGVtLnBhcnRpY2lwYW50c1xuICAgIClcbiAgICBjb25zdCBwYXJ0aWNpcGFudEluZGV4ID0gcGFydGljaXBhbnRzRGF0YS5maW5kSW5kZXgoXG4gICAgICBwID0+IHBhcnRpY2lwYW50VXVpZCA9PT0gcC51dWlkXG4gICAgKVxuICAgIGlmIChwYXJ0aWNpcGFudC5oYXNNYXhCb251c0RpY2UpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuRXJyb3JQYXJ0aWNpcGFudEF0TWF4Qm9udXMnLCB7XG4gICAgICAgICAgcGFydGljaXBhbnRVdWlkXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKHVzZU1vdmVtZW50QWN0aW9ucykge1xuICAgICAgaWYgKHBhcnRpY2lwYW50LmN1cnJlbnRNb3ZlbWVudEFjdGlvbnMgPCAxKSB7XG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5QYXJ0aWNpcGFudE5vdEVub3VnaE1vdmVtZW50Jywge1xuICAgICAgICAgICAgYXNzaXN0YW50VXVpZDogcGFydGljaXBhbnRVdWlkLFxuICAgICAgICAgICAgYWN0aW9uczogcGFydGljaXBhbnQuY3VycmVudE1vdmVtZW50QWN0aW9uc1xuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgfVxuICAgICAgcGFydGljaXBhbnQuYWx0ZXJNb3ZlbWVudEFjdGlvbnMoLTEpXG4gICAgfVxuICAgIHBhcnRpY2lwYW50LmFkZEJvbnVzRGljZSgpXG4gICAgcGFydGljaXBhbnRzRGF0YVtwYXJ0aWNpcGFudEluZGV4XSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKFxuICAgICAgcGFydGljaXBhbnQuZGF0YVxuICAgIClcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZShcbiAgICAgIHsgJ3N5c3RlbS5wYXJ0aWNpcGFudHMnOiBwYXJ0aWNpcGFudHNEYXRhIH0sXG4gICAgICB7IHJlbmRlciB9XG4gICAgKVxuICB9XG5cbiAgYXN5bmMgYWx0ZXJQYXJ0aWNpcGFudE1vdmVtZW50QWN0aW9uIChcbiAgICBwYXJ0aWNpcGFudFV1aWQsXG4gICAgY291bnQsXG4gICAgeyByZW5kZXIgPSB0cnVlIH0gPSB7fVxuICApIHtcbiAgICBjb25zdCBwYXJ0aWNpcGFudCA9IHRoaXMuZ2V0UGFydGljaXBhbnQocGFydGljaXBhbnRVdWlkKVxuXG4gICAgaWYgKCFwYXJ0aWNpcGFudCkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5QYXJ0aWNpcGFudFV1aWROb3RGb3VuZCcsIHtcbiAgICAgICAgICBwYXJ0aWNpcGFudFV1aWRcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG5cbiAgICBjb25zdCBwYXJ0aWNpcGFudHNEYXRhID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoXG4gICAgICB0aGlzLnN5c3RlbS5wYXJ0aWNpcGFudHNcbiAgICApXG4gICAgY29uc3QgcGFydGljaXBhbnRJbmRleCA9IHBhcnRpY2lwYW50c0RhdGEuZmluZEluZGV4KFxuICAgICAgcCA9PiBwYXJ0aWNpcGFudFV1aWQgPT09IHAudXVpZFxuICAgIClcblxuICAgIHBhcnRpY2lwYW50LmFsdGVyTW92ZW1lbnRBY3Rpb25zKGNvdW50KVxuXG4gICAgcGFydGljaXBhbnRzRGF0YVtwYXJ0aWNpcGFudEluZGV4XSA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKFxuICAgICAgcGFydGljaXBhbnQuZGF0YVxuICAgIClcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZShcbiAgICAgIHsgJ3N5c3RlbS5wYXJ0aWNpcGFudHMnOiBwYXJ0aWNpcGFudHNEYXRhIH0sXG4gICAgICB7IHJlbmRlciB9XG4gICAgKVxuICB9XG5cbiAgYXN5bmMgYWN0aXZhdGVOZXh0UGFydGljaXBhbnRUdXJuICh7XG4gICAgc2Nyb2xsVG9Mb2NhdGlvbiA9IHRydWUsXG4gICAgYWN0aXZhdGVMb2NhdGlvbiA9IHRydWUsXG4gICAgcmVuZGVyID0gdHJ1ZSxcbiAgICBodG1sID0gbnVsbFxuICB9ID0ge30pIHtcbiAgICBjb25zdCBhY3RpdmVQYXJ0aWNpcGFudCA9IHRoaXMubmV4dEFjdGl2ZVBhcnRpY2lwYW50XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIHNjcm9sbFRvTG9jYXRpb24sXG4gICAgICBhY3RpdmF0ZUxvY2F0aW9uLFxuICAgICAgcmVuZGVyLFxuICAgICAgaHRtbFxuICAgIH1cbiAgICBpZiAoIWFjdGl2ZVBhcnRpY2lwYW50KSByZXR1cm4gdGhpcy5hY3RpdmF0ZVBhcnRpY2lwYW50KHVuZGVmaW5lZCwgb3B0aW9ucylcbiAgICByZXR1cm4gdGhpcy5hY3RpdmF0ZVBhcnRpY2lwYW50KGFjdGl2ZVBhcnRpY2lwYW50LnV1aWQsIG9wdGlvbnMpXG4gIH1cblxuICBhc3luYyBhY3RpdmF0ZVBhcnRpY2lwYW50IChcbiAgICBwYXJ0aWNpcGFudFV1aWQsXG4gICAge1xuICAgICAgc2Nyb2xsVG9Mb2NhdGlvbiA9IHRydWUsXG4gICAgICBhY3RpdmF0ZUxvY2F0aW9uID0gdHJ1ZSxcbiAgICAgIHJlbmRlciA9IHRydWUsXG4gICAgICBodG1sID0gbnVsbFxuICAgIH0gPSB7fVxuICApIHtcbiAgICBjb25zdCBkYXRhVXBkYXRlID0gdGhpcy5nZXRBY3RpdmF0ZVBhcnRpY2lwYW50VXBkYXRlRGF0YShwYXJ0aWNpcGFudFV1aWQsIHtcbiAgICAgIHNjcm9sbFRvTG9jYXRpb24sXG4gICAgICBhY3RpdmVMb2NhdGlvbjogYWN0aXZhdGVMb2NhdGlvbixcbiAgICAgIGh0bWxcbiAgICB9KVxuICAgIGF3YWl0IHRoaXMudXBkYXRlKGRhdGFVcGRhdGUsIHsgcmVuZGVyIH0pXG4gIH1cblxuICBnZXRBY3RpdmF0ZVBhcnRpY2lwYW50VXBkYXRlRGF0YSAoXG4gICAgcGFydGljaXBhbnRVdWlkLFxuICAgIHsgc2Nyb2xsVG9Mb2NhdGlvbiA9IHRydWUsIGFjdGl2YXRlTG9jYXRpb24gPSB0cnVlLCBodG1sID0gbnVsbCB9ID0ge31cbiAgKSB7XG4gICAgY29uc3QgcFV1aWQgPSBwYXJ0aWNpcGFudFV1aWRcbiAgICAvLyAgID8gcGFydGljaXBhbnRVdWlkXG4gICAgLy8gICA6IHRoaXMucGFydGljaXBhbnRzQnlJbml0aWF0aXZlWzBdPy51dWlkXG4gICAgY29uc3QgcGFydGljaXBhbnRzRGF0YVVwZGF0ZSA9IHt9XG4gICAgY29uc3QgcGFydGljaXBhbnRzID0gdGhpcy5zeXN0ZW0ucGFydGljaXBhbnRzXG4gICAgICA/IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLnBhcnRpY2lwYW50cylcbiAgICAgIDogW11cbiAgICBwYXJ0aWNpcGFudHMuZm9yRWFjaChwID0+IHtcbiAgICAgIGRlbGV0ZSBwLmFjdGl2ZVxuICAgICAgaWYgKHBVdWlkICYmIHBVdWlkID09PSBwLnV1aWQpIHAuYWN0aXZlID0gdHJ1ZVxuICAgIH0pXG4gICAgcGFydGljaXBhbnRzRGF0YVVwZGF0ZVsnc3lzdGVtLnBhcnRpY2lwYW50cyddID0gcGFydGljaXBhbnRzXG5cbiAgICBjb25zdCBwYXJ0aWNpcGFudExvY2F0aW9uID0gdGhpcy5nZXRQYXJ0aWNpcGFudExvY2F0aW9uKHBVdWlkKVxuICAgIGxldCBsb2NhdGlvbnNEYXRhVXBkYXRlID0gbnVsbFxuICAgIGlmIChwYXJ0aWNpcGFudExvY2F0aW9uKSB7XG4gICAgICBpZiAoYWN0aXZhdGVMb2NhdGlvbikge1xuICAgICAgICBsb2NhdGlvbnNEYXRhVXBkYXRlID0gdGhpcy5nZXRBY3RpdmF0ZUxvY2F0aW9uVXBkYXRlRGF0YShcbiAgICAgICAgICBwYXJ0aWNpcGFudExvY2F0aW9uLnV1aWQsXG4gICAgICAgICAgeyBzY3JvbGxUb0xvY2F0aW9uLCBodG1sIH1cbiAgICAgICAgKVxuICAgICAgfSBlbHNlIGlmIChzY3JvbGxUb0xvY2F0aW9uKSB7XG4gICAgICAgIGxvY2F0aW9uc0RhdGFVcGRhdGUgPSB7fVxuICAgICAgICBsb2NhdGlvbnNEYXRhVXBkYXRlWydzeXN0ZW0uc2Nyb2xsLmNoYXNlVHJhY2suZnJvbSddID1cbiAgICAgICAgICB0aGlzLmNoYXNlVHJhY2tDdXJyZW50U2Nyb2xsUG9zaXRpb25cbiAgICAgICAgbG9jYXRpb25zRGF0YVVwZGF0ZVsnc3lzdGVtLnNjcm9sbC5jaGFzZVRyYWNrLnRvJ10gPVxuICAgICAgICAgIHRoaXMuZ2V0Q2hhc2VUcmFja0xvY2F0aW9uU2Nyb2xsUG9zaXRpb24ocGFydGljaXBhbnRMb2NhdGlvbi51dWlkLCB7XG4gICAgICAgICAgICBodG1sXG4gICAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb25zRGF0YVVwZGF0ZSA9IHRoaXMuZ2V0QWN0aXZhdGVMb2NhdGlvblVwZGF0ZURhdGEodW5kZWZpbmVkLCB7XG4gICAgICAgIHNjcm9sbFRvTG9jYXRpb25cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uc0RhdGFVcGRhdGUpIHtcbiAgICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KFxuICAgICAgICBwYXJ0aWNpcGFudHNEYXRhVXBkYXRlLFxuICAgICAgICBsb2NhdGlvbnNEYXRhVXBkYXRlXG4gICAgICApXG4gICAgfSBlbHNlIHJldHVybiBwYXJ0aWNpcGFudHNEYXRhVXBkYXRlXG4gIH1cblxuICBhY3RpdmVQYXJ0aWNpcGFudE9ic3RhY2xlQ2hlY2sgKFxuICAgIGxvY2F0aW9uVXVpZCxcbiAgICB7IG1vdmVQYXJ0aWNpcGFudCA9IHRydWUgfSA9IHt9XG4gICkge1xuICAgIGNvbnN0IGNhcmQgPSBuZXcgQ2hhc2VPYnN0YWNsZUNhcmQoe1xuICAgICAgY2hhc2VVdWlkOiB0aGlzLnV1aWQsXG4gICAgICBsb2NhdGlvblV1aWQsXG4gICAgICBtb3ZlUGFydGljaXBhbnQsXG4gICAgICBmb3J3YXJkOiBsb2NhdGlvblV1aWQgIT09IHRoaXMuYWN0aXZlTG9jYXRpb24udXVpZFxuICAgIH0pXG4gICAgY2FyZC50b01lc3NhZ2UoKVxuXG4gICAgLy8gY29uc3QgdGVzdCA9IG5ldyB0ZXN0Q2FyZCgpXG4gICAgLy8gdGVzdC5pbml0aWFsaXplKHt9KVxuICAgIC8vIHRlc3QudG9NZXNzYWdlKClcbiAgfVxuXG4gIC8vIEhhbmRsZSByb3VuZHNcblxuICBhc3luYyBwcm9ncmVzc1RvTmV4dFJvdW5kICh7IHJlbmRlciA9IHRydWUgfSA9IHt9KSB7XG4gICAgY29uc3QgcGFydGljaXBhbnRzID0gdGhpcy5zeXN0ZW0ucGFydGljaXBhbnRzXG4gICAgICA/IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLnBhcnRpY2lwYW50cylcbiAgICAgIDogW11cbiAgICBwYXJ0aWNpcGFudHMuZm9yRWFjaChwID0+IHtcbiAgICAgIGlmIChwLmN1cnJlbnRNb3ZlbWVudEFjdGlvbnMgPCBwLm1vdmVtZW50QWN0aW9uKSB7XG4gICAgICAgIHAuY3VycmVudE1vdmVtZW50QWN0aW9ucyArPSBwLm1vdmVtZW50QWN0aW9uXG4gICAgICAgIGlmIChwLmN1cnJlbnRNb3ZlbWVudEFjdGlvbnMgPiBwLm1vdmVtZW50QWN0aW9uKSB7XG4gICAgICAgICAgcC5jdXJyZW50TW92ZW1lbnRBY3Rpb25zID0gcC5tb3ZlbWVudEFjdGlvblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZVBhcnRpY2lwYW50cyhwYXJ0aWNpcGFudHMsIHsgcmVuZGVyOiBmYWxzZSB9KVxuICAgIHRoaXMuYWN0aXZhdGVOZXh0UGFydGljaXBhbnRUdXJuKHsgcmVuZGVyIH0pXG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGFzeW5jIHVwZGF0ZVJvbGwgKHJvbGxTdHJpbmcpIHtcbiAgICBpZiAoZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgIGNvbnN0IHJvbGwgPSBDb0M3Q2hlY2suZnJvbVJvbGxTdHJpbmcocm9sbFN0cmluZylcbiAgICAgIGNvbnN0IHBhcnRpY2lwYW50cyA9IHRoaXMuc3lzdGVtLnBhcnRpY2lwYW50c1xuICAgICAgICA/IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLnBhcnRpY2lwYW50cylcbiAgICAgICAgOiBbXVxuICAgICAgY29uc3QgaW5kZXggPSBwYXJ0aWNpcGFudHMuZmluZEluZGV4KHAgPT4gcC5yb2xsVXVpZCA9PT0gcm9sbC51dWlkKVxuICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgcGFydGljaXBhbnRzW2luZGV4XS5zcGVlZENoZWNrLnJvbGxEYXRhU3RyaW5nID0gcm9sbC5KU09OUm9sbFN0cmluZ1xuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7ICdzeXN0ZW0ucGFydGljaXBhbnRzJzogcGFydGljaXBhbnRzIH0pXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIGRhdGE6IHJvbGxTdHJpbmcsXG4gICAgICAgIHR5cGU6ICdpbnZva2UnLFxuICAgICAgICBtZXRob2Q6ICd1cGRhdGVSb2xsJyxcbiAgICAgICAgaXRlbTogdGhpcy51dWlkXG4gICAgICB9XG4gICAgICBnYW1lLnNvY2tldC5lbWl0KCdzeXN0ZW0uQ29DNycsIGRhdGEpXG4gICAgfVxuICB9XG5cbiAgLy8gaGFuZGxlIGxvY2F0aW9uc1xuICBnZXQgbG9jYXRpb25zICgpIHtcbiAgICBjb25zdCBsb2NhdGlvbnMgPSB0aGlzLnN0YXJ0ZWRcbiAgICAgID8gdGhpcy5zeXN0ZW0ubG9jYXRpb25zLmxpc3RcbiAgICAgICAgPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5sb2NhdGlvbnMubGlzdClcbiAgICAgICAgOiBbXVxuICAgICAgOiB0aGlzLmluaXRUcmFja1xuICAgIHRoaXMucHJvY2Vzc0xvY2F0aW9ucyhsb2NhdGlvbnMpXG4gICAgcmV0dXJuIGxvY2F0aW9uc1xuICB9XG5cbiAgZ2V0TG9jYXRpb25EYXRhIChsb2NhdGlvblV1aWQsIHsgZHVwbGljYXRlRGF0YSA9IHRydWUgfSA9IHt9KSB7XG4gICAgY29uc3QgbG9jYXRpb25zID0gZHVwbGljYXRlRGF0YVxuICAgICAgPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLmxvY2F0aW9ucylcbiAgICAgIDogdGhpcy5sb2NhdGlvbnNcbiAgICByZXR1cm4gbG9jYXRpb25zLmZpbmQobCA9PiBsb2NhdGlvblV1aWQgPT09IGwudXVpZClcbiAgfVxuXG4gIHByb2Nlc3NMb2NhdGlvbnMgKGxvY2F0aW9ucykge1xuICAgIGlmICghbG9jYXRpb25zPy5sZW5ndGgpIHJldHVyblxuICAgIGxvY2F0aW9uc1swXS5maXJzdCA9IHRydWVcblxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBsb2NhdGlvbnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBjb25zdCBjbGFzc2VzID0gW11cbiAgICAgIGNvbnN0IGxvY2F0aW9uID0gbG9jYXRpb25zW2luZGV4XVxuICAgICAgaWYgKCFsb2NhdGlvbi5uYW1lKSBjbGFzc2VzLnB1c2goJ2VtcHR5JylcbiAgICAgIGlmIChsb2NhdGlvbi5hY3RpdmUpIGNsYXNzZXMucHVzaCgnYWN0aXZlJylcbiAgICAgIGlmIChsb2NhdGlvbi5pbml0ICYmICF0aGlzLnN0YXJ0ZWQpIGNsYXNzZXMucHVzaCgnaW5pdCcpXG4gICAgICBsb2NhdGlvbi5jc3NDbGFzc2VzID0gY2xhc3Nlcy5qb2luKCcgJylcbiAgICB9XG5cbiAgICBpZiAobG9jYXRpb25zLmxlbmd0aCA+IDEpIGxvY2F0aW9uc1tsb2NhdGlvbnMubGVuZ3RoIC0gMV0ubGFzdCA9IHRydWVcblxuICAgIGxvY2F0aW9ucy5mb3JFYWNoKGwgPT4ge1xuICAgICAgaWYgKGwucGFydGljaXBhbnRzICYmIGwucGFydGljaXBhbnRzLmxlbmd0aCkge1xuICAgICAgICBsLnBhcnRpY2lwYW50cyA9IGwucGFydGljaXBhbnRzLmZpbHRlcihwID0+ICEocCA9PT0gbnVsbCkpXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbC5wYXJ0aWNpcGFudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBlbGVtID0gbC5wYXJ0aWNpcGFudHNbaV0gLy8gSW5pdCB0cmFjayA9IG9ubHkgdXVpZCwgdXBkYXRlIGxvY2F0aW9uIGxpc3QgY2hhbmdlIGZvciB1dWlkXG5cbiAgICAgICAgICAvLyB1aS5ub3RpZmljYXRpb25zLmVycm9yKGBUeXBlIDogJHt0eXBlb2YgZWxlbX1gKVxuICAgICAgICAgIGxldCBwXG4gICAgICAgICAgaWYgKHR5cGVvZiBlbGVtID09PSAnc3RyaW5nJyB8fCBlbGVtIGluc3RhbmNlb2YgU3RyaW5nKSB7XG4gICAgICAgICAgICBwID0gdGhpcy5zeXN0ZW0ucGFydGljaXBhbnRzLmZpbmQocCA9PiBlbGVtID09PSBwLnV1aWQpIC8vIFJldHJpZXZlIHBhcnRpY2lwYW50IGRhdGEgZnJvbSBsaXN0LlxuICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbT8uY29uc3RydWN0b3I/Lm5hbWUgPT09ICdfcGFydGljaXBhbnQnKSB7XG4gICAgICAgICAgICBwID0gdW5kZWZpbmVkIC8vIHBhcnRpY2lwYW50IGlzIGFscmVhZHkgcHJvY2Vzc2VkLlxuICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy53YXJuKFxuICAgICAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuUGFydGljaXBhbnRBbHJlYWR5UHJvY2Vzc2VkJylcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9IGVsc2UgcCA9IHVuZGVmaW5lZFxuXG4gICAgICAgICAgaWYgKHR5cGVvZiBwICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgbC5wYXJ0aWNpcGFudHNbaV0gPSBuZXcgX3BhcnRpY2lwYW50KHApIC8vIHJlcGxhY2UgdXVpZCB3aXRoIF9wYXJ0aWNpcGFudFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBwYXJ0aWNpcGFudHMucHVzaCggbnVsbClcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICdVbmRlZmluZWQgcGF0aWNpcGFudCB3aGlsZSBwcm9jZXNzaW5nIHBhcnRpY2lwYW50cyBhcnJheSdcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbC5wYXJ0aWNpcGFudHMuc29ydChzb3J0QnlSb2xlQW5kRGV4KSAvLyBUT0RPIDogdGVzdCBpZiBzb3J0aW5nIHdvcmtzXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGdldCBpbml0VHJhY2sgKCkge1xuICAgIGlmIChcbiAgICAgICF0aGlzLnN5c3RlbS5sb2NhdGlvbnMubGlzdCB8fFxuICAgICAgdGhpcy5zeXN0ZW0ubG9jYXRpb25zLmxpc3QubGVuZ3RoID09PSAwXG4gICAgKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgY29uc3QgbG9jYXRpb25zID0gW10gLy8gISEhISEhISBsb2NhdGlvbnMgdnMgaW5pdCBsb2NhdGlvbnMgISEhXG5cbiAgICBjb25zdCBpbml0ID0gdGhpcy5zdGFydGluZ0xpbmVcbiAgICBsZXQgbG9jYXRpb25zSW5kZXhTdGFydCwgaW5pdEluZGV4U3RhcnQsIGxvY2F0aW9uc0xlbmd0aFxuICAgIGlmIChpbml0Lmxlbmd0aCA8PSAwKSBsb2NhdGlvbnNJbmRleFN0YXJ0ID0gMFxuICAgIGVsc2UgaWYgKHRoaXMuc3lzdGVtLnN0YXJ0aW5nSW5kZXggPj0gaW5pdC5sZW5ndGgpIHtcbiAgICAgIGxvY2F0aW9uc0luZGV4U3RhcnQgPSAwXG4gICAgfSBlbHNlIGxvY2F0aW9uc0luZGV4U3RhcnQgPSBpbml0Lmxlbmd0aCAtIHRoaXMuc3lzdGVtLnN0YXJ0aW5nSW5kZXhcblxuICAgIGlmICh0aGlzLnN5c3RlbS5zdGFydGluZ0luZGV4IDw9IDApIGluaXRJbmRleFN0YXJ0ID0gMFxuICAgIGVsc2UgaWYgKHRoaXMuc3lzdGVtLnN0YXJ0aW5nSW5kZXggPD0gaW5pdC5sZW5ndGgpIGluaXRJbmRleFN0YXJ0ID0gMFxuICAgIGVsc2UgaW5pdEluZGV4U3RhcnQgPSB0aGlzLnN5c3RlbS5zdGFydGluZ0luZGV4IC0gaW5pdC5sZW5ndGhcblxuICAgIGlmIChsb2NhdGlvbnNJbmRleFN0YXJ0ID09PSAwKSB7XG4gICAgICBsb2NhdGlvbnNMZW5ndGggPSB0aGlzLnN5c3RlbS5sb2NhdGlvbnMubGlzdC5sZW5ndGhcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb25zTGVuZ3RoID1cbiAgICAgICAgdGhpcy5zeXN0ZW0ubG9jYXRpb25zLmxpc3QubGVuZ3RoICsgbG9jYXRpb25zSW5kZXhTdGFydFxuICAgIH1cblxuICAgIGlmIChpbml0Lmxlbmd0aCAhPT0gMCkge1xuICAgICAgaWYgKHRoaXMuc3lzdGVtLnN0YXJ0aW5nSW5kZXggPCAwKSB7XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgICBpbmRleCA8IE1hdGguYWJzKHRoaXMuc3lzdGVtLnN0YXJ0aW5nSW5kZXgpO1xuICAgICAgICAgIGluZGV4KytcbiAgICAgICAgKSB7XG4gICAgICAgICAgaW5pdC5wdXNoKHtcbiAgICAgICAgICAgIHV1aWQ6IHRoaXMuZ2VuZXJhdGVOZXdVdWlkKCksXG4gICAgICAgICAgICBpbml0OiB0cnVlLFxuICAgICAgICAgICAgcGFydGljaXBhbnRzOiBbXVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjaGFzZUxvY2F0aW9ucyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLmxvY2F0aW9ucylcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbG9jYXRpb25zTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBsZXQgbG9jYXRpb24gPSB7fVxuICAgICAgY29uc3QgcGFydGljaXBhbnRzID0gW11cbiAgICAgIGlmIChcbiAgICAgICAgaW5kZXggPj0gbG9jYXRpb25zSW5kZXhTdGFydCAmJlxuICAgICAgICBpbmRleCAtIGxvY2F0aW9uc0luZGV4U3RhcnQgPCBjaGFzZUxvY2F0aW9ucy5saXN0Lmxlbmd0aFxuICAgICAgKSB7XG4gICAgICAgIGxvY2F0aW9uID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoXG4gICAgICAgICAgY2hhc2VMb2NhdGlvbnMubGlzdFtpbmRleCAtIGxvY2F0aW9uc0luZGV4U3RhcnRdXG4gICAgICAgIClcbiAgICAgICAgbG9jYXRpb24uaW5pdCA9IGZhbHNlXG4gICAgICAgIGxvY2F0aW9uLnBhcnRpY2lwYW50cz8uZm9yRWFjaChwID0+IHtcbiAgICAgICAgICBpZiAocCAhPSBudWxsKSBwYXJ0aWNpcGFudHMucHVzaChwKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgaWYgKGluZGV4ID49IGluaXRJbmRleFN0YXJ0ICYmIGluZGV4IC0gaW5pdEluZGV4U3RhcnQgPCBpbml0Lmxlbmd0aCkge1xuICAgICAgICBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KGxvY2F0aW9uLCBpbml0W2luZGV4IC0gaW5pdEluZGV4U3RhcnRdLCB7XG4gICAgICAgICAgb3ZlcndyaXRlOiBmYWxzZVxuICAgICAgICB9KVxuXG4gICAgICAgIGluaXRbaW5kZXggLSBpbml0SW5kZXhTdGFydF0ucGFydGljaXBhbnRzPy5mb3JFYWNoKHAgPT4ge1xuICAgICAgICAgIGlmIChwICE9IG51bGwpIHBhcnRpY2lwYW50cy5wdXNoKHApXG4gICAgICAgIH0pXG5cbiAgICAgICAgbG9jYXRpb24ucGFydGljaXBhbnRzID0gcGFydGljaXBhbnRzXG4gICAgICB9XG4gICAgICBsb2NhdGlvbi5maXJzdCA9IGZhbHNlXG4gICAgICBsb2NhdGlvbi5lbmQgPSBmYWxzZVxuICAgICAgbG9jYXRpb25zLnB1c2gobG9jYXRpb24pXG4gICAgfVxuXG4gICAgcmV0dXJuIGxvY2F0aW9uc1xuICB9XG5cbiAgZ2V0IHN0YXJ0aW5nTGluZSAoKSB7XG4gICAgLy8gR2V0IHByZXlzIGFuZCBjaGVjayBmb3IgZXNjYXBlZFxuICAgIGNvbnN0IHByZXlzID0gdGhpcy5zeXN0ZW0uaW5jbHVkZUVzY2FwZWRcbiAgICAgID8gdGhpcy5wcmV5c1xuICAgICAgOiB0aGlzLnByZXlzPy5maWx0ZXIocCA9PiAhcC5kYXRhLmVzY2FwZWQpXG4gICAgLy8gR2V0IGNoYXNlcnNcbiAgICBjb25zdCBjaGFzZXJzID0gdGhpcy5zeXN0ZW0uaW5jbHVkZUxhdGVjb21lcnNcbiAgICAgID8gdGhpcy5jaGFzZXJzXG4gICAgICA6IHRoaXMuY2hhc2Vycz8uZmlsdGVyKGMgPT4gIWMuZGF0YS5leGNsdWRlZClcblxuICAgIC8vIFJlY3Vyc2l2aXR5ICEhIHdpdGggZ2V0UGFydGljaXBhbnRMb2NhdGlvbiBhbmQgZ2V0IHBhcnRpY2lwYW50c1xuXG4gICAgLy8gSWYgbm8gcHJleSBvciBubyBjaGFzc2VyXG4gICAgLy8gaWYgKDAgPT0gY2hhc2Vycy5sZW5ndGgpIHtcbiAgICAvLyAgIHVpLm5vdGlmaWNhdGlvbnMud2FybignTm8gY2hhc2VycycpXG4gICAgLy8gICByZXR1cm4gdW5kZWZpbmVkXG4gICAgLy8gfVxuICAgIC8vIGlmICgwID09IHByZXlzLmxlbmd0aCkge1xuICAgIC8vICAgdWkubm90aWZpY2F0aW9ucy53YXJuKCdObyBwcmV5cycpXG4gICAgLy8gICByZXR1cm4gdW5kZWZpbmVkXG4gICAgLy8gfVxuXG4gICAgLy8gQnVpbGQgc3RhcnRpbmcgdHJhY2tcbiAgICBjb25zdCBjaGFzZVRyYWNrID0gW11cblxuICAgIGNvbnN0IGNoYXNlcnNNaW5Nb3YgPSB0aGlzLmZpbmRNaW5Nb3YoY2hhc2VycylcbiAgICBjb25zdCBjaGFzZXJzTWF4TW92ID0gdGhpcy5maW5kTWF4TW92KGNoYXNlcnMpXG4gICAgY29uc3QgcHJleXNNaW5Nb3YgPSB0aGlzLmZpbmRNaW5Nb3YocHJleXMpXG4gICAgY29uc3QgcHJleXNNYXhNb3YgPSB0aGlzLmZpbmRNYXhNb3YocHJleXMpXG5cbiAgICBpZiAoY2hhc2Vyc01pbk1vdiAhPT0gLTEgJiYgY2hhc2Vyc01heE1vdiAhPT0gLTEpIHtcbiAgICAgIC8vIEFkZCBjaGFzZXJzIHRvIHRoZSB0cmFjay5cbiAgICAgIGZvciAobGV0IG1vdiA9IGNoYXNlcnNNaW5Nb3Y7IG1vdiA8PSBjaGFzZXJzTWF4TW92OyBtb3YrKykge1xuICAgICAgICAvLyBGaW5kIGFsbCB3aXRoIHRoYXQgbW92XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0ge1xuICAgICAgICAgIHV1aWQ6IHRoaXMuZ2VuZXJhdGVOZXdVdWlkKCksXG4gICAgICAgICAgaW5pdDogdHJ1ZSxcbiAgICAgICAgICBwYXJ0aWNpcGFudHM6IFtdXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbG9jYXRpb25QYXJ0aWNpcGFudHNMaXN0ID0gY2hhc2Vyc1xuICAgICAgICAgIC5maWx0ZXIocCA9PiBtb3YgPT09IHAuYWRqdXN0ZWRNb3YpXG4gICAgICAgICAgLnNvcnQoKGEsIGIpID0+IGEuZGV4IC0gYi5kZXgpXG4gICAgICAgIGxvY2F0aW9uUGFydGljaXBhbnRzTGlzdC5mb3JFYWNoKHAgPT5cbiAgICAgICAgICBsb2NhdGlvbi5wYXJ0aWNpcGFudHMucHVzaChwLnV1aWQpXG4gICAgICAgIClcbiAgICAgICAgY2hhc2VUcmFjay5wdXNoKGxvY2F0aW9uKVxuICAgICAgfVxuXG4gICAgICAvLyBBZGQgc3BhY2UgYmV0d2VlbiBjaGFzZXJzIGFuZCBwcmV5cy5cbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnN5c3RlbS5zdGFydGluZ1JhbmdlOyBpbmRleCsrKSB7XG4gICAgICAgIGNoYXNlVHJhY2sucHVzaCh7XG4gICAgICAgICAgdXVpZDogdGhpcy5nZW5lcmF0ZU5ld1V1aWQoKSxcbiAgICAgICAgICBpbml0OiB0cnVlLFxuICAgICAgICAgIHBhcnRpY2lwYW50czogW11cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJleXNNaW5Nb3YgIT09IC0xICYmIHByZXlzTWF4TW92ICE9PSAtMSkge1xuICAgICAgLy8gQWRkIHByZXlzIHRvIHRoZSB0cmFjay5cbiAgICAgIGZvciAobGV0IG1vdiA9IHByZXlzTWluTW92OyBtb3YgPD0gcHJleXNNYXhNb3Y7IG1vdisrKSB7XG4gICAgICAgIC8vIEZpbmQgYWxsIHdpdGggdGhhdCBtb3ZcbiAgICAgICAgY29uc3QgbG9jYXRpb24gPSB7XG4gICAgICAgICAgdXVpZDogdGhpcy5nZW5lcmF0ZU5ld1V1aWQoKSxcbiAgICAgICAgICBpbml0OiB0cnVlLFxuICAgICAgICAgIHBhcnRpY2lwYW50czogW11cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsb2NhdGlvblBhcnRpY2lwYW50c0xpc3QgPSBwcmV5c1xuICAgICAgICAgIC5maWx0ZXIocCA9PiBtb3YgPT09IHAuYWRqdXN0ZWRNb3YpXG4gICAgICAgICAgLnNvcnQoKGEsIGIpID0+IGEuZGV4IC0gYi5kZXgpXG4gICAgICAgIGxvY2F0aW9uUGFydGljaXBhbnRzTGlzdC5mb3JFYWNoKHAgPT5cbiAgICAgICAgICBsb2NhdGlvbi5wYXJ0aWNpcGFudHMucHVzaChwLnV1aWQpXG4gICAgICAgIClcbiAgICAgICAgY2hhc2VUcmFjay5wdXNoKGxvY2F0aW9uKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjaGFzZVRyYWNrXG4gIH1cblxuICBhc3luYyB1cGRhdGVMb2NhdGlvbnNMaXN0IChsaXN0LCB7IHJlbmRlciA9IHRydWUgfSA9IHt9KSB7XG4gICAgLy8gUmVtb3ZlIGFsbCB1bm5lY2Vzc2FyeSBpdGVtcyAoY3NzQ2xhc3MsIClcbiAgICBjb25zdCB1cGRhdGVkTGlzdCA9IHRoaXMuY2xlYW5Mb2NhdGlvbnNMaXN0KGxpc3QpXG4gICAgYXdhaXQgdGhpcy51cGRhdGUoXG4gICAgICB7ICdzeXN0ZW0ubG9jYXRpb25zLmxpc3QnOiB1cGRhdGVkTGlzdCB9LFxuICAgICAgeyByZW5kZXIgfVxuICAgIClcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZUxvY2F0aW9uIChsb2NhdGlvblV1aWQsIHVwZGF0ZURhdGEsIHsgcmVuZGVyID0gdHJ1ZSB9ID0ge30pIHtcbiAgICBjb25zdCBsb2NhdGlvbnMgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5sb2NhdGlvbnMubGlzdClcbiAgICBjb25zdCB1cGRhdGUgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh1cGRhdGVEYXRhKVxuICAgIGNvbnN0IGxvY2F0aW9uSW5kZXggPSBsb2NhdGlvbnMuZmluZEluZGV4KGwgPT4gbG9jYXRpb25VdWlkID09PSBsLnV1aWQpXG4gICAgaWYgKGxvY2F0aW9uSW5kZXggPT09IC0xKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgaWYgKHVwZGF0ZS51dWlkKSBkZWxldGUgdXBkYXRlLnV1aWRcbiAgICBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KGxvY2F0aW9uc1tsb2NhdGlvbkluZGV4XSwgdXBkYXRlLCB7XG4gICAgICBvdmVyd3JpdGU6IHRydWVcbiAgICB9KVxuICAgIGF3YWl0IHRoaXMudXBkYXRlTG9jYXRpb25zTGlzdChsb2NhdGlvbnMsIHsgcmVuZGVyIH0pXG4gIH1cblxuICBjbGVhbkxvY2F0aW9uc0xpc3QgKGxpc3QpIHtcbiAgICBjb25zdCB1cGRhdGVkTGlzdCA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKGxpc3QpXG4gICAgY29uc3QgcGFydGlwYW50c1V1aWRBcnJheSA9IHRoaXMuc3lzdGVtLnBhcnRpY2lwYW50cy5tYXAocCA9PiBwLnV1aWQpXG5cbiAgICB1cGRhdGVkTGlzdC5mb3JFYWNoKGwgPT4ge1xuICAgICAgLy8gZGVsZXRlIGwuYWN0aXZlXG4gICAgICBkZWxldGUgbC5jc3NDbGFzc2VzXG4gICAgICBkZWxldGUgbC5maXJzdFxuICAgICAgZGVsZXRlIGwubGFzdFxuICAgICAgZGVsZXRlIGwuZW5kXG4gICAgICBpZiAobC5wYXJ0aWNpcGFudHMgJiYgbC5wYXJ0aWNpcGFudHMubGVuZ3RoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbC5wYXJ0aWNpcGFudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsLnBhcnRpY2lwYW50cyA9IGwucGFydGljaXBhbnRzLmZpbHRlcihwID0+ICEocCA9PT0gbnVsbCkpIC8vIFJlbW92ZSBudWxsIGVsZW1lbnRzXG4gICAgICAgICAgLy8gUmVwbGFjZSBfUGFydGljaXBhbnRzIGJ5IHV1aWRcbiAgICAgICAgICBpZiAobC5wYXJ0aWNpcGFudHNbaV0uZGF0YT8udXVpZCkge1xuICAgICAgICAgICAgbC5wYXJ0aWNpcGFudHNbaV0gPSBsLnBhcnRpY2lwYW50c1tpXS5kYXRhLnV1aWRcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgdW5rb3duIHBhcnRpY2ljcGFudHNcbiAgICAgICAgbC5wYXJ0aWNpcGFudHMgPSBsLnBhcnRpY2lwYW50cy5maWx0ZXIodXVpZCA9PlxuICAgICAgICAgIHBhcnRpcGFudHNVdWlkQXJyYXkuaW5jbHVkZXModXVpZClcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4gdXBkYXRlZExpc3RcbiAgfVxuXG4gIGFzeW5jIGluc2VydExvY2F0aW9uIChcbiAgICBpbnNlcnRBdFV1aWQsXG4gICAgeyBzaGlmdCA9IDAsIGxvY0RhdGEgPSB7fSwgcmVuZGVyID0gdHJ1ZSB9ID0ge31cbiAgKSB7XG4gICAgY29uc3QgbG9jYXRpb25zID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5zeXN0ZW0ubG9jYXRpb25zLmxpc3QpXG4gICAgbG9jYXRpb25zLmZvckVhY2gobCA9PiB7XG4gICAgICBkZWxldGUgbC5hY3RpdmVcbiAgICB9KVxuICAgIGNvbnN0IGxvY2F0aW9uSW5kZXggPSBsb2NhdGlvbnMuZmluZEluZGV4KGwgPT4gaW5zZXJ0QXRVdWlkID09PSBsLnV1aWQpXG4gICAgaWYgKGxvY2F0aW9uSW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgY29uc3QgbmV3TG9jYXRpb25JbmRleCA9IGxvY2F0aW9uSW5kZXggKyBzaGlmdFxuICAgIGlmIChuZXdMb2NhdGlvbkluZGV4ID4gbG9jYXRpb25zLmxlbmd0aCkgcmV0dXJuIGZhbHNlXG4gICAgY29uc3QgbmV3TG9jYXRpb24gPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShsb2NEYXRhKVxuICAgIG5ld0xvY2F0aW9uLnV1aWQgPSB0aGlzLmdlbmVyYXRlTmV3VXVpZCgpXG4gICAgbmV3TG9jYXRpb24uaW5pdCA9IGxvY2F0aW9uc1tsb2NhdGlvbkluZGV4XS5pbml0XG4gICAgbmV3TG9jYXRpb24uYWN0aXZlID0gdHJ1ZVxuICAgIGxvY2F0aW9ucy5zcGxpY2UobmV3TG9jYXRpb25JbmRleCwgMCwgbmV3TG9jYXRpb24pXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudXBkYXRlTG9jYXRpb25zTGlzdChsb2NhdGlvbnMsIHsgcmVuZGVyIH0pXG4gIH1cblxuICBhc3luYyByZW1vdmVMb2NhdGlvbiAodXVpZCwgeyByZW5kZXIgPSB0cnVlIH0gPSB7fSkge1xuICAgIGNvbnN0IGxvY2F0aW9ucyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLmxvY2F0aW9ucy5saXN0KVxuICAgIGNvbnN0IGxvY2F0aW9uSW5kZXggPSBsb2NhdGlvbnMuZmluZEluZGV4KGwgPT4gdXVpZCA9PT0gbC51dWlkKVxuICAgIGxvY2F0aW9ucy5zcGxpY2UobG9jYXRpb25JbmRleCwgMSlcbiAgICBsb2NhdGlvbnMuZm9yRWFjaChsID0+IHtcbiAgICAgIGRlbGV0ZSBsLmFjdGl2ZVxuICAgIH0pXG4gICAgaWYgKGxvY2F0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICBsZXQgaW5kZXggPSBsb2NhdGlvbkluZGV4IC0gMVxuICAgICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSAwXG4gICAgICBsb2NhdGlvbnNbaW5kZXhdLmFjdGl2ZSA9IHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudXBkYXRlTG9jYXRpb25zTGlzdChsb2NhdGlvbnMsIHsgcmVuZGVyIH0pXG4gIH1cblxuICBhc3luYyBhY3RpdmF0ZUxvY2F0aW9uIChcbiAgICBsb2NhdGlvblV1aWQsXG4gICAgeyBzY3JvbGxUb0xvY2F0aW9uID0gdHJ1ZSwgcmVuZGVyID0gdHJ1ZSB9ID0ge31cbiAgKSB7XG4gICAgY29uc3QgdXBkYXRlRGF0YSA9IHRoaXMuZ2V0QWN0aXZhdGVMb2NhdGlvblVwZGF0ZURhdGEobG9jYXRpb25VdWlkLCB7XG4gICAgICBzY3JvbGxUb0xvY2F0aW9uXG4gICAgfSlcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZSh1cGRhdGVEYXRhLCB7IHJlbmRlciB9KVxuICB9XG5cbiAgZ2V0Q2xlYXJBY3RpdmVMb2NhdGlvblVwZGF0ZURhdGEgKHtcbiAgICBzY3JvbGxUb0xvY2F0aW9uID0gdHJ1ZSxcbiAgICBodG1sID0gbnVsbFxuICB9ID0ge30pIHtcbiAgICBjb25zdCB1cGRhdGVEYXRhID0ge31cbiAgICBjb25zdCBsb2NhdGlvbnMgPSB0aGlzLnN5c3RlbS5sb2NhdGlvbnMubGlzdFxuICAgICAgPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5sb2NhdGlvbnMubGlzdClcbiAgICAgIDogW11cbiAgICBsb2NhdGlvbnMuZm9yRWFjaChsID0+IHtcbiAgICAgIGRlbGV0ZSBsLmFjdGl2ZVxuICAgIH0pXG4gICAgdXBkYXRlRGF0YVsnc3lzdGVtLmxvY2F0aW9ucy5saXN0J10gPSB0aGlzLmNsZWFuTG9jYXRpb25zTGlzdChsb2NhdGlvbnMpXG5cbiAgICBpZiAoc2Nyb2xsVG9Mb2NhdGlvbikge1xuICAgICAgdXBkYXRlRGF0YVsnc3lzdGVtLnNjcm9sbC5jaGFzZVRyYWNrLmZyb20nXSA9IDBcbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5zY3JvbGwuY2hhc2VUcmFjay50byddID0gLTFcbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZURhdGFcbiAgfVxuXG4gIGdldEFjdGl2YXRlTG9jYXRpb25VcGRhdGVEYXRhIChcbiAgICBsb2NhdGlvblV1aWQsXG4gICAgeyBzY3JvbGxUb0xvY2F0aW9uID0gdHJ1ZSwgaHRtbCA9IG51bGwgfSA9IHt9XG4gICkge1xuICAgIGlmICghbG9jYXRpb25VdWlkKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRDbGVhckFjdGl2ZUxvY2F0aW9uVXBkYXRlRGF0YSh7XG4gICAgICAgIHNjcm9sbFRvTG9jYXRpb25cbiAgICAgIH0pXG4gICAgfVxuICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7fVxuICAgIGNvbnN0IGxvY2F0aW9ucyA9IHRoaXMuc3lzdGVtLmxvY2F0aW9ucy5saXN0XG4gICAgICA/IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLmxvY2F0aW9ucy5saXN0KVxuICAgICAgOiBbXVxuICAgIGxvY2F0aW9ucy5mb3JFYWNoKGwgPT4ge1xuICAgICAgZGVsZXRlIGwuYWN0aXZlXG4gICAgICBpZiAobG9jYXRpb25VdWlkID09PSBsLnV1aWQpIGwuYWN0aXZlID0gdHJ1ZVxuICAgIH0pXG4gICAgdXBkYXRlRGF0YVsnc3lzdGVtLmxvY2F0aW9ucy5saXN0J10gPSB0aGlzLmNsZWFuTG9jYXRpb25zTGlzdChsb2NhdGlvbnMpXG4gICAgLy8gYXdhaXQgdGhpcy51cGRhdGVMb2NhdGlvbnNMaXN0KGxvY2F0aW9ucywgeyByZW5kZXI6IGZhbHNlIH0pXG4gICAgaWYgKHNjcm9sbFRvTG9jYXRpb24pIHtcbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5zY3JvbGwuY2hhc2VUcmFjay5mcm9tJ10gPVxuICAgICAgICB0aGlzLmNoYXNlVHJhY2tDdXJyZW50U2Nyb2xsUG9zaXRpb25cbiAgICAgIHVwZGF0ZURhdGFbJ3N5c3RlbS5zY3JvbGwuY2hhc2VUcmFjay50byddID1cbiAgICAgICAgdGhpcy5nZXRDaGFzZVRyYWNrTG9jYXRpb25TY3JvbGxQb3NpdGlvbihsb2NhdGlvblV1aWQsIHsgaHRtbCB9KVxuICAgICAgLy8gYXdhaXQgdGhpcy5zZXRjaGFzZVRyYWNrU2Nyb2xsKHtcbiAgICAgIC8vICAgZnJvbTogdGhpcy5jaGFzZVRyYWNrQ3VycmVudFNjcm9sbFBvc2l0aW9uLFxuICAgICAgLy8gICB0bzogdGhpcy5jaGFzZVRyYWNrQWN0aXZlTG9jYXRpb25TY3JvbGxQb3NpdGlvblxuICAgICAgLy8gfSlcbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZURhdGFcbiAgfVxuXG4gIC8vIExvY2F0aW9ucyBuYXZpZ2F0aW9uXG4gIGdldCBhY3RpdmVMb2NhdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLmxvY2F0aW9ucykgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGNvbnN0IGxvY2F0aW9uID0gdGhpcy5sb2NhdGlvbnMuZmluZChsID0+IGwuYWN0aXZlKVxuICAgIGlmICghbG9jYXRpb24pIHJldHVybiB1bmRlZmluZWRcbiAgICBpZiAobG9jYXRpb24ucGFydGljaXBhbnRzPy5sZW5ndGgpIGxvY2F0aW9uLmhhc1BhcnRpY2lwYW50ID0gdHJ1ZVxuICAgIGNvbnN0IGFjdG9yID0gdGhpcy5hY3RpdmVBY3RvclxuICAgIGlmIChhY3Rvcikge1xuICAgICAgY29uc3QgdGVzdCA9IGFjdG9yLmZpbmQobG9jYXRpb24ub2JzdGFjbGVEZXRhaWxzPy5jaGVja05hbWUpXG4gICAgICBpZiAodGVzdCkge1xuICAgICAgICBsb2NhdGlvbi5hY3RpdmVBY3Rvckhhc1NraWxsID0gdHJ1ZVxuICAgICAgICBsb2NhdGlvbi5hY3RpdmVBY3RvclRlc3QgPSB0ZXN0XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsb2NhdGlvblxuICB9XG5cbiAgZ2V0IHByZXZpb3VzTG9jYXRpb24gKCkge1xuICAgIGlmICghdGhpcy5sb2NhdGlvbnMpIHJldHVybiB1bmRlZmluZWRcbiAgICBjb25zdCBhY3RpdmVJbmRleCA9IHRoaXMubG9jYXRpb25zLmZpbmRJbmRleChsID0+IGwuYWN0aXZlKVxuICAgIGlmIChhY3RpdmVJbmRleCA9PT0gLTEpIHJldHVybiB1bmRlZmluZWRcbiAgICBpZiAoYWN0aXZlSW5kZXggPT09IDApIHJldHVybiB1bmRlZmluZWRcbiAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMubG9jYXRpb25zW2FjdGl2ZUluZGV4IC0gMV1cbiAgICBjb25zdCBhY3RvciA9IHRoaXMuYWN0aXZlQWN0b3JcbiAgICBpZiAoYWN0b3IpIHtcbiAgICAgIGNvbnN0IHRlc3QgPSBhY3Rvci5maW5kKGxvY2F0aW9uLm9ic3RhY2xlRGV0YWlscz8uY2hlY2tOYW1lKVxuICAgICAgaWYgKHRlc3QpIHtcbiAgICAgICAgbG9jYXRpb24uYWN0aXZlQWN0b3JIYXNTa2lsbCA9IHRydWVcbiAgICAgICAgbG9jYXRpb24uYWN0aXZlQWN0b3JUZXN0ID0gdGVzdFxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbG9jYXRpb25cbiAgfVxuXG4gIGdldCBuZXh0TG9jYXRpb24gKCkge1xuICAgIGlmICghdGhpcy5sb2NhdGlvbnMpIHJldHVybiB1bmRlZmluZWRcbiAgICBjb25zdCBhY3RpdmVJbmRleCA9IHRoaXMubG9jYXRpb25zLmZpbmRJbmRleChsID0+IGwuYWN0aXZlKVxuICAgIGlmIChhY3RpdmVJbmRleCA9PT0gLTEpIHJldHVybiB1bmRlZmluZWRcbiAgICBpZiAoYWN0aXZlSW5kZXggPT09IHRoaXMubG9jYXRpb25zLmxlbmd0aCAtIDEpIHJldHVybiB1bmRlZmluZWRcbiAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMubG9jYXRpb25zW2FjdGl2ZUluZGV4ICsgMV1cbiAgICBjb25zdCBhY3RvciA9IHRoaXMuYWN0aXZlQWN0b3JcbiAgICBpZiAoYWN0b3IpIHtcbiAgICAgIGNvbnN0IHRlc3QgPSBhY3Rvci5maW5kKGxvY2F0aW9uLm9ic3RhY2xlRGV0YWlscz8uY2hlY2tOYW1lKVxuICAgICAgaWYgKHRlc3QpIHtcbiAgICAgICAgbG9jYXRpb24uYWN0aXZlQWN0b3JIYXNTa2lsbCA9IHRydWVcbiAgICAgICAgbG9jYXRpb24uYWN0aXZlQWN0b3JUZXN0ID0gdGVzdFxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbG9jYXRpb25cbiAgfVxuXG4gIGFzeW5jIGxvY2F0b3JEcm9wcGVkIChkYXRhKSB7XG4gICAgYXdhaXQgdGhpcy5zZXRMb2NhdGlvbkNvb3JkaW5hdGVzKFxuICAgICAgZGF0YS5sb2NhdGlvblV1aWQsXG4gICAgICBkYXRhLngsXG4gICAgICBkYXRhLnksXG4gICAgICBkYXRhLnNjZW5lXG4gICAgKVxuICB9XG5cbiAgYXN5bmMgc2V0TG9jYXRpb25Db29yZGluYXRlcyAoXG4gICAgbG9jYXRpb25VdWlkLFxuICAgIHgsXG4gICAgeSxcbiAgICBzY2VuZUlkLFxuICAgIHsgcmVuZGVyID0gdHJ1ZSB9ID0ge31cbiAgKSB7XG4gICAgY29uc3QgbG9jYXRpb25zID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5zeXN0ZW0ubG9jYXRpb25zLmxpc3QpXG4gICAgY29uc3QgbG9jYXRpb25JbmRleCA9IGxvY2F0aW9ucy5maW5kSW5kZXgobCA9PiBsb2NhdGlvblV1aWQgPT09IGwudXVpZClcbiAgICBsb2NhdGlvbnNbbG9jYXRpb25JbmRleF0uY29vcmRpbmF0ZXMgPSB7IHgsIHksIHNjZW5lOiBzY2VuZUlkIH1cblxuICAgIHJldHVybiBhd2FpdCB0aGlzLnVwZGF0ZUxvY2F0aW9uc0xpc3QobG9jYXRpb25zLCB7IHJlbmRlciB9KVxuICB9XG5cbiAgYXN5bmMgY2xlYXJBY3RpdmVMb2NhdGlvbkNvb3JkaW5hdGVzICh7IHJlbmRlciA9IHRydWUgfSA9IHt9KSB7XG4gICAgaWYgKHRoaXMuYWN0aXZlTG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNsZWFyTG9jYXRpb25Db29yZGluYXRlcyh0aGlzLmFjdGl2ZUxvY2F0aW9uLnV1aWQsIHtcbiAgICAgICAgcmVuZGVyXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNsZWFyTG9jYXRpb25Db29yZGluYXRlcyAobG9jYXRpb25VdWlkLCB7IHJlbmRlciA9IHRydWUgfSA9IHt9KSB7XG4gICAgY29uc3QgbG9jYXRpb25zID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5zeXN0ZW0ubG9jYXRpb25zLmxpc3QpXG4gICAgY29uc3QgbG9jYXRpb25JbmRleCA9IGxvY2F0aW9ucy5maW5kSW5kZXgobCA9PiBsb2NhdGlvblV1aWQgPT09IGwudXVpZClcbiAgICBkZWxldGUgbG9jYXRpb25zW2xvY2F0aW9uSW5kZXhdLmNvb3JkaW5hdGVzXG5cbiAgICByZXR1cm4gYXdhaXQgdGhpcy51cGRhdGVMb2NhdGlvbnNMaXN0KGxvY2F0aW9ucywgeyByZW5kZXIgfSlcbiAgfVxuXG4gIC8vIGdldCBhY3RpdmVQYXJ0aWNpcGFudEhhdmVBY3RpdmVMb2NhdGlvblNraWxsICgpe1xuICAvLyAgIGlmKCAhdGhpcy5hY3RpdmVBY3RvcikgcmV0dXJuIGZhbHNlXG4gIC8vICAgaWYoIHRoaXMuYWN0aXZlQWN0b3IuZmluZCggdGhpcy5hY3RpdmVMb2NhdGlvbi5vYnN0YWNsZURldGFpbHM/LmNoZWNrTmFtZSkpIHJldHVybiB0cnVlXG4gIC8vICAgcmV0dXJuIGZhbHNlXG4gIC8vIH1cblxuICAvLyBIYW5kbGUgbWVjaGFuaWNzXG4gIGFzeW5jIGN1dFRvVGhlQ2hhc2UgKCkge1xuICAgIGlmICghdGhpcy5hbGxIYXZlU3BlZWRSb2xsKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLndhcm4oZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk5vdEFsbEhhdmVTcGVlZFJvbGwnKSlcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAodGhpcy5hY3R1YWxQYXJ0aWNpcGFudHM/Lmxlbmd0aCA8IDIpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTmVlZE1pbjJQYXJ0aWNpcGFudHMnKSlcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAodGhpcy5hbGxIYXZlVmFsaWRNb3YpIHtcbiAgICAgIC8vIFRPRE8gOiBDaGVjayBmb3Igc3BlZWQgcm9sbCA/P1xuXG4gICAgICAvLyBDYWxjdWxhdGUgbW92ZW1lbnQgYWN0aW9uc1xuICAgICAgY29uc3QgcGFydGljaXBhbnRzID0gdGhpcy5wYXJ0aWNpcGFudHNcbiAgICAgIGNvbnN0IG1pbk1vdiA9IHRoaXMuZmluZE1pbk1vdih0aGlzLmFjdHVhbFBhcnRpY2lwYW50cylcbiAgICAgIHBhcnRpY2lwYW50cy5mb3JFYWNoKHAgPT4ge1xuICAgICAgICAvLyBwLmRhdGEubW92ZW1lbnRBY3Rpb24gPSAxICsgKHAuYWRqdXN0ZWRNb3YgLSBtaW5Nb3YpXG4gICAgICAgIHAuY2FsY3VsYXRlTW92ZW1lbnRBY3Rpb25zKG1pbk1vdilcbiAgICAgICAgcC5jdXJyZW50TW92ZW1lbnRBY3Rpb25zID0gcC5tb3ZlbWVudEFjdGlvblxuICAgICAgICBwLmJvbnVzRGljZSA9IDBcbiAgICAgIH0pXG4gICAgICBhd2FpdCB0aGlzLnVwZGF0ZVBhcnRpY2lwYW50cyhwYXJ0aWNpcGFudHMsIHsgcmVuZGVyOiBmYWxzZSB9KVxuICAgICAgYXdhaXQgdGhpcy51cGRhdGVMb2NhdGlvbnNMaXN0KHRoaXMubG9jYXRpb25zLCB7IHJlbmRlcjogZmFsc2UgfSlcbiAgICAgIGF3YWl0IHRoaXMuc3RhcnQoKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHJlc3RhcnQgKCkge1xuICAgIC8vIGF3YWl0IHRoaXMuY2xlYW5Mb2NhdGlvbnMoKSAvL1RyYW5zZmVycmVkIGluIHVwZGF0ZUxvY2F0aW9uTGlzdFxuICAgIGNvbnN0IGxvY2F0aW9ucyA9IHRoaXMubG9jYXRpb25zLmZpbHRlcihsID0+ICFsLmluaXQpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb2NhdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChsb2NhdGlvbnNbaV0ucGFydGljaXBhbnRzKSBsb2NhdGlvbnNbaV0ucGFydGljaXBhbnRzID0gW11cbiAgICAgIGlmIChsb2NhdGlvbnNbaV0uYWN0aXZlKSBkZWxldGUgbG9jYXRpb25zW2ldLmFjdGl2ZVxuICAgIH1cbiAgICBjb25zdCBwYXJ0aWNpcGFudHNEYXRhID0gdGhpcy5zeXN0ZW0ucGFydGljaXBhbnRzXG4gICAgICA/IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLnBhcnRpY2lwYW50cylcbiAgICAgIDogW11cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRpY2lwYW50c0RhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChwYXJ0aWNpcGFudHNEYXRhW2ldLmFjdGl2ZSkgZGVsZXRlIHBhcnRpY2lwYW50c0RhdGFbaV0uYWN0aXZlXG4gICAgfVxuICAgIGF3YWl0IHRoaXMuc2V0Y2hhc2VUcmFja1Njcm9sbCgwLCAwLCB7IHJlbmRlcjogZmFsc2UgfSlcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZUxvY2F0aW9uc0xpc3QobG9jYXRpb25zLCB7IHJlbmRlcjogZmFsc2UgfSlcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZVBhcnRpY2lwYW50cyhwYXJ0aWNpcGFudHNEYXRhLCB7IHJlbmRlcjogZmFsc2UgfSlcbiAgICBhd2FpdCB0aGlzLnN0b3AoKVxuICB9XG5cbiAgZ2V0TG9jYXRpb25TaGlmdCAobG9jYXRpb25VdWlkLCB7IHNraXAgPSAxIH0gPSB7fSkge1xuICAgIGNvbnN0IGxvY2F0aW9ucyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLmxvY2F0aW9ucy5saXN0KVxuICAgIGNvbnN0IG9yaWdpbkluZGV4ID0gbG9jYXRpb25zLmZpbmRJbmRleChsID0+IGxvY2F0aW9uVXVpZCA9PT0gbC51dWlkKVxuICAgIGNvbnN0IGRlc3RpbmF0aW9uSW5kZXggPSBvcmlnaW5JbmRleCArIHNraXBcbiAgICBpZiAobG9jYXRpb25zLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGxcbiAgICBpZiAoZGVzdGluYXRpb25JbmRleCA+PSBsb2NhdGlvbnMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbG9jYXRpb25zW2xvY2F0aW9ucy5sZW5ndGggLSAxXVxuICAgIH1cbiAgICBpZiAoZGVzdGluYXRpb25JbmRleCA8IDApIHJldHVybiBsb2NhdGlvbnNbMF1cbiAgICByZXR1cm4gbG9jYXRpb25zW2Rlc3RpbmF0aW9uSW5kZXhdIC8vIEVSUk9SIE1PVkUgMiBGT1IgU0tJUCArMVxuICB9XG5cbiAgYXN5bmMgcmVtb3ZlUGFydGljaXBhbnQgKHBhcnRpY2lwYW50VXVpZCwgeyByZW5kZXIgPSB0cnVlIH0gPSB7fSkge1xuICAgIGNvbnN0IHAgPSB0aGlzLmdldFBhcnRpY2lwYW50KHBhcnRpY2lwYW50VXVpZClcbiAgICBhd2FpdCBEaWFsb2cuY29uZmlybSh7XG4gICAgICB0aXRsZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlJlbW92ZVBhcnRpY2lwYW50JyksXG4gICAgICBjb250ZW50OiBgPHA+JHtnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlJlbW92ZVBhcnRpY2lwYW50SGludCcsIHtcbiAgICAgICAgbmFtZTogcC5uYW1lXG4gICAgICB9KX08L3A+YCxcbiAgICAgIHllczogYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBwYXJ0aWNpcGFudHNEYXRhID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoXG4gICAgICAgICAgdGhpcy5zeXN0ZW0ucGFydGljaXBhbnRzXG4gICAgICAgIClcbiAgICAgICAgY29uc3QgbmV3UGFydGljaXBhbnRzRGF0YSA9IHBhcnRpY2lwYW50c0RhdGEuZmlsdGVyKFxuICAgICAgICAgIHAgPT4gcGFydGljaXBhbnRVdWlkICE9PSBwLnV1aWRcbiAgICAgICAgKVxuICAgICAgICBjb25zdCBsb2NhdGlvbnNEYXRhID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUoXG4gICAgICAgICAgdGhpcy5zeXN0ZW0ubG9jYXRpb25zLmxpc3RcbiAgICAgICAgKVxuICAgICAgICBsb2NhdGlvbnNEYXRhLmZvckVhY2gobCA9PiB7XG4gICAgICAgICAgaWYgKGwucGFydGljaXBhbnRzICYmIGwucGFydGljaXBhbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgbC5wYXJ0aWNpcGFudHMgPSBsLnBhcnRpY2lwYW50cy5maWx0ZXIoXG4gICAgICAgICAgICAgIHV1aWQgPT4gcGFydGljaXBhbnRVdWlkICE9PSB1dWlkXG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZVBhcnRpY2lwYW50cyhuZXdQYXJ0aWNpcGFudHNEYXRhLCB7IHJlbmRlcjogZmFsc2UgfSlcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVMb2NhdGlvbnNMaXN0KGxvY2F0aW9uc0RhdGEsIHsgcmVuZGVyIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGFzeW5jIGFkZFBhcnRpY2lwYW50IChcbiAgICBwYXJ0aWNpcGFudCxcbiAgICB7XG4gICAgICByZW5kZXIgPSB0cnVlLFxuICAgICAgbG9jYXRpb25VdWlkID0gbnVsbCxcbiAgICAgIHJlY2FsY3VsYXRlTW92ZW1lbnRBY3Rpb25zID0gdHJ1ZSxcbiAgICAgIHVwZGF0ZSA9IGZhbHNlXG4gICAgfSA9IHt9XG4gICkge1xuICAgIGNvbnN0IHBhcnRpY2lwYW50c0RhdGEgPSB0aGlzLnN5c3RlbS5wYXJ0aWNpcGFudHNcbiAgICAgID8gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5zeXN0ZW0ucGFydGljaXBhbnRzKVxuICAgICAgOiBbXVxuXG4gICAgaWYgKHBhcnRpY2lwYW50LmRhdGEuY2hhc2VVdWlkKSBkZWxldGUgcGFydGljaXBhbnQuZGF0YS5jaGFzZVV1aWRcbiAgICBpZiAocGFydGljaXBhbnQuZGF0YS5sb2NhdGlvblV1aWQpIGRlbGV0ZSBwYXJ0aWNpcGFudC5kYXRhLmxvY2F0aW9uVXVpZFxuICAgIGlmIChwYXJ0aWNpcGFudC5kYXRhLnVwZGF0ZSkgZGVsZXRlIHBhcnRpY2lwYW50LmRhdGEudXBkYXRlXG5cbiAgICBpZiAoIXBhcnRpY2lwYW50LnV1aWQpIHtcbiAgICAgIGxldCB1bmlxdWUgPSBmYWxzZVxuICAgICAgd2hpbGUgKCF1bmlxdWUpIHtcbiAgICAgICAgcGFydGljaXBhbnQuZGF0YS51dWlkID0gZm91bmRyeS51dGlscy5yYW5kb21JRCgxNilcbiAgICAgICAgdW5pcXVlID1cbiAgICAgICAgICBwYXJ0aWNpcGFudHNEYXRhLmZpbHRlcihwID0+IHAudXVpZCA9PT0gcGFydGljaXBhbnQudXVpZCkubGVuZ3RoID09PSAwXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHVwZGF0ZSkge1xuICAgICAgaWYgKHBhcnRpY2lwYW50LmN1cnJlbnRNb3ZlbWVudEFjdGlvbnMgPiBwYXJ0aWNpcGFudC5tb3ZlbWVudEFjdGlvbikge1xuICAgICAgICBwYXJ0aWNpcGFudC5jdXJyZW50TW92ZW1lbnRBY3Rpb25zID0gcGFydGljaXBhbnQubW92ZW1lbnRBY3Rpb25cbiAgICAgIH1cbiAgICAgIGNvbnN0IGluZGV4ID0gcGFydGljaXBhbnRzRGF0YS5maW5kSW5kZXgocCA9PiBwLnV1aWQgPT09IHBhcnRpY2lwYW50LnV1aWQpXG4gICAgICBwYXJ0aWNpcGFudHNEYXRhW2luZGV4XSA9IHBhcnRpY2lwYW50LmRhdGFcbiAgICB9IGVsc2UgcGFydGljaXBhbnRzRGF0YS5wdXNoKHBhcnRpY2lwYW50LmRhdGEpXG5cbiAgICBhd2FpdCB0aGlzLnVwZGF0ZVBhcnRpY2lwYW50cyhwYXJ0aWNpcGFudHNEYXRhLCB7XG4gICAgICByZW5kZXI6IHJlbmRlciAmJiAhdGhpcy5zdGFydGVkICYmICF0aGlzLnJlY2FsY3VsYXRlTW92ZW1lbnRBY3Rpb25zXG4gICAgfSlcblxuICAgIGlmIChyZWNhbGN1bGF0ZU1vdmVtZW50QWN0aW9ucykge1xuICAgICAgY29uc3Qgc2xvd2VzdCA9IHRoaXMuc2xvd2VzdFBhcnRpY2lwYW50Py5hZGp1c3RlZE1vdlxuICAgICAgY29uc3QgcGFydGljaXBhbnRzID0gdGhpcy5wYXJ0aWNpcGFudHNcbiAgICAgIHBhcnRpY2lwYW50cy5mb3JFYWNoKHAgPT4gcC5jYWxjdWxhdGVNb3ZlbWVudEFjdGlvbnMoc2xvd2VzdCkpXG4gICAgICBhd2FpdCB0aGlzLnVwZGF0ZVBhcnRpY2lwYW50cyhwYXJ0aWNpcGFudHMsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIgJiYgIXRoaXMuc3RhcnRlZFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICB0aGlzLnN0YXJ0ZWQgJiZcbiAgICAgICEocGFydGljaXBhbnQuZGF0YS5lc2NhcGVkIHx8IHBhcnRpY2lwYW50LmRhdGEuZXhjbHVkZWQpXG4gICAgKSB7XG4gICAgICBjb25zdCBsb2NhdGlvbnNEYXRhID0gdGhpcy5zeXN0ZW0ubG9jYXRpb25zLmxpc3RcbiAgICAgICAgPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5sb2NhdGlvbnMubGlzdClcbiAgICAgICAgOiBbXVxuXG4gICAgICBpZiAobG9jYXRpb25zRGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRXJyb3JFbXB0eUxvY2F0aW9uc0xpc3QnKVxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIGxldCBsb2NhdGlvbkluZGV4ID0gbG9jYXRpb25zRGF0YS5maW5kSW5kZXgobCA9PiBsb2NhdGlvblV1aWQgPT09IGwudXVpZClcbiAgICAgIGlmIChsb2NhdGlvbkluZGV4ID09PSAtMSkgbG9jYXRpb25JbmRleCA9IDBcbiAgICAgIGlmICghbG9jYXRpb25zRGF0YVtsb2NhdGlvbkluZGV4XS5wYXJ0aWNpcGFudHMpIHtcbiAgICAgICAgbG9jYXRpb25zRGF0YVtsb2NhdGlvbkluZGV4XS5wYXJ0aWNpcGFudHMgPSBbXVxuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICBsb2NhdGlvbnNEYXRhW2xvY2F0aW9uSW5kZXhdLnBhcnRpY2lwYW50cy5maW5kSW5kZXgoXG4gICAgICAgICAgcCA9PiBwID09PSBwYXJ0aWNpcGFudC51dWlkXG4gICAgICAgICkgPT09IC0xXG4gICAgICApIHtcbiAgICAgICAgbG9jYXRpb25zRGF0YVtsb2NhdGlvbkluZGV4XS5wYXJ0aWNpcGFudHMucHVzaChwYXJ0aWNpcGFudC51dWlkKVxuICAgICAgfVxuICAgICAgYXdhaXQgdGhpcy51cGRhdGVMb2NhdGlvbnNMaXN0KGxvY2F0aW9uc0RhdGEsIHsgcmVuZGVyIH0pXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZWRpdFBhcnRpY2lwYW50IChcbiAgICBwYXJ0aWNpcGFudFV1aWQsXG4gICAge1xuICAgICAgdXNlTW92ZW1lbnRBY3Rpb25zID0gdHJ1ZSxcbiAgICAgIHNjcm9sbFRvTG9jYXRpb24gPSB0cnVlLFxuICAgICAgYWN0aXZhdGVMb2NhdGlvbiA9IHRydWUsXG4gICAgICBhY3RpdmF0ZVBhcnRpY2lwYW50ID0gdHJ1ZSxcbiAgICAgIHJlbmRlciA9IHRydWVcbiAgICB9ID0ge31cbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBNb3ZlIGEgcGFydGljaXBhbnQgZm9yIGEgbnVtYmVyIG9mIGxvY2F0aW9ucy5cbiAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gcGFydGljaXBhbnRVdWlkICAgICBVdWlkIG9mIHBhcnRpY2lwYW50XG4gICAqIEBwYXJhbSB7Kn0gbG9jYXRpb25Nb3ZlZCAgICAgICAgICAgICAgICAgTnVtYmVyIG9mIGxvY2F0aW9ucyBtb3ZyZWRcbiAgICogQHJldHVybnMge251bWJlcn0gICAgICAgICAgICAgICAgICAgICAgICBUb3RhbCBudW1iZXIgb2YgbG9jYXRpb25zIGNyb3NzZWRcbiAgICovXG4gIGFzeW5jIG1vdmVQYXJ0aWNpcGFudCAoXG4gICAgcGFydGljaXBhbnRVdWlkLFxuICAgIGxvY2F0aW9uTW92ZWQsXG4gICAge1xuICAgICAgdXNlTW92ZW1lbnRBY3Rpb25zID0gdHJ1ZSxcbiAgICAgIHNjcm9sbFRvTG9jYXRpb24gPSB0cnVlLFxuICAgICAgYWN0aXZhdGVMb2NhdGlvbiA9IHRydWUsXG4gICAgICBhY3RpdmF0ZVBhcnRpY2lwYW50ID0gdHJ1ZSxcbiAgICAgIHJlbmRlciA9IHRydWVcbiAgICB9ID0ge31cbiAgKSB7XG4gICAgLy8gY29uc3Qgc2VsZWN0b3IgPSBgI2l0ZW0tJHt0aGlzLmlkfSAuY2hhc2UtdHJhY2tgXG4gICAgLy8gdWkubm90aWZpY2F0aW9ucy5pbmZvKCBgbW92ZVBhcnRpY2lwYW50IDogSnF1ZXJ5IHJvb3Q6ICR7JCgnOnJvb3QnKS5maW5kKHNlbGVjdG9yKS5zY3JvbGxMZWZ0KCl9YClcbiAgICBsZXQgbW9kaWZpZWQgPSBmYWxzZVxuICAgIGNvbnN0IGxvY2F0aW9ucyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLmxvY2F0aW9ucy5saXN0KVxuICAgIGNvbnN0IG9yaWdpbkluZGV4ID0gbG9jYXRpb25zLmZpbmRJbmRleChsID0+XG4gICAgICBsLnBhcnRpY2lwYW50cz8uaW5jbHVkZXMocGFydGljaXBhbnRVdWlkKVxuICAgIClcbiAgICBsZXQgZGVzdGluYXRpb25JbmRleCA9IG9yaWdpbkluZGV4ICsgbG9jYXRpb25Nb3ZlZFxuICAgIGlmIChkZXN0aW5hdGlvbkluZGV4ID4gbG9jYXRpb25zLmxlbmd0aCAtIDEpIHtcbiAgICAgIGRlc3RpbmF0aW9uSW5kZXggPSBsb2NhdGlvbnMubGVuZ3RoIC0gMVxuICAgIH1cblxuICAgIGlmIChkZXN0aW5hdGlvbkluZGV4IDwgMCkge1xuICAgICAgZGVzdGluYXRpb25JbmRleCA9IDBcbiAgICB9XG5cbiAgICBjb25zdCB0b3RhbE1vdmUgPSBkZXN0aW5hdGlvbkluZGV4IC0gb3JpZ2luSW5kZXhcbiAgICBjb25zdCBwYXJ0aWNpcGFudCA9IHRoaXMuZ2V0UGFydGljaXBhbnQocGFydGljaXBhbnRVdWlkKVxuICAgIGNvbnN0IHBhcnRpY2lwYW50c0RhdGEgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShcbiAgICAgIHRoaXMuc3lzdGVtLnBhcnRpY2lwYW50c1xuICAgIClcbiAgICBjb25zdCBwYXJ0aWNpcGFudEluZGV4ID0gcGFydGljaXBhbnRzRGF0YS5maW5kSW5kZXgoXG4gICAgICBwID0+IHBhcnRpY2lwYW50VXVpZCA9PT0gcC51dWlkXG4gICAgKVxuXG4gICAgaWYgKHVzZU1vdmVtZW50QWN0aW9ucykge1xuICAgICAgaWYgKCFwYXJ0aWNpcGFudCkge1xuICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKFxuICAgICAgICAgIGdhbWUuaTE4bi5mb3JtYXQoJ0NvQzcuUGFydGljaXBhbnRVdWlkTm90Rm91bmQnLCB7XG4gICAgICAgICAgICBwYXJ0aWNpcGFudFV1aWQ6IHRoaXMucGFydGljaXBhbnRVdWlkXG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgICBpZiAocGFydGljaXBhbnQuY3VycmVudE1vdmVtZW50QWN0aW9ucyA8IE1hdGguYWJzKHRvdGFsTW92ZSkpIHtcbiAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgICBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlBhcnRpY2lwYW50Tm90RW5vdWdoTW92ZW1lbnQnLCB7XG4gICAgICAgICAgICBhc3Npc3RhbnRVdWlkOiBwYXJ0aWNpcGFudFV1aWQsXG4gICAgICAgICAgICBhY3Rpb25zOiBwYXJ0aWNpcGFudC5jdXJyZW50TW92ZW1lbnRBY3Rpb25zXG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgICBwYXJ0aWNpcGFudC5hbHRlck1vdmVtZW50QWN0aW9ucygwIC0gTWF0aC5hYnModG90YWxNb3ZlKSlcbiAgICAgIHBhcnRpY2lwYW50c0RhdGFbcGFydGljaXBhbnRJbmRleF0gPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShcbiAgICAgICAgcGFydGljaXBhbnQuZGF0YVxuICAgICAgKVxuICAgICAgYXdhaXQgdGhpcy51cGRhdGUoXG4gICAgICAgIHsgJ3N5c3RlbS5wYXJ0aWNpcGFudHMnOiBwYXJ0aWNpcGFudHNEYXRhIH0sXG4gICAgICAgIHsgcmVuZGVyOiBmYWxzZSB9XG4gICAgICApXG4gICAgICBtb2RpZmllZCA9IHRydWVcbiAgICB9XG5cbiAgICBpZiAodG90YWxNb3ZlICE9PSAwKSB7XG4gICAgICBhd2FpdCB0aGlzLm1vdmVQYXJ0aWNpcGFudFRvTG9jYXRpb24oXG4gICAgICAgIHBhcnRpY2lwYW50VXVpZCxcbiAgICAgICAgbG9jYXRpb25zW2Rlc3RpbmF0aW9uSW5kZXhdLnV1aWQsXG4gICAgICAgIHsgcmVuZGVyOiBmYWxzZSB9XG4gICAgICApXG4gICAgICBtb2RpZmllZCA9IHRydWVcbiAgICB9XG5cbiAgICBpZiAoYWN0aXZhdGVQYXJ0aWNpcGFudCkge1xuICAgICAgYXdhaXQgdGhpcy5hY3RpdmF0ZVBhcnRpY2lwYW50KHBhcnRpY2lwYW50VXVpZCwge1xuICAgICAgICBzY3JvbGxUb0xvY2F0aW9uLFxuICAgICAgICBhY3RpdmF0ZUxvY2F0aW9uLFxuICAgICAgICByZW5kZXI6IGZhbHNlXG4gICAgICB9KVxuICAgICAgbW9kaWZpZWQgPSB0cnVlXG4gICAgfVxuXG4gICAgaWYgKGFjdGl2YXRlTG9jYXRpb24gJiYgIWFjdGl2YXRlUGFydGljaXBhbnQpIHtcbiAgICAgIGF3YWl0IHRoaXMuYWN0aXZhdGVMb2NhdGlvbihsb2NhdGlvbnNbZGVzdGluYXRpb25JbmRleF0udXVpZCwge1xuICAgICAgICBzY3JvbGxUb0xvY2F0aW9uLFxuICAgICAgICByZW5kZXI6IGZhbHNlXG4gICAgICB9KVxuICAgICAgbW9kaWZpZWQgPSB0cnVlXG4gICAgfVxuXG4gICAgaWYgKG1vZGlmaWVkICYmIHJlbmRlcikgYXdhaXQgdGhpcy5zaGVldC5yZW5kZXIodHJ1ZSlcbiAgICByZXR1cm4gdG90YWxNb3ZlXG4gIH1cblxuICBhc3luYyBtb3ZlUGFydGljaXBhbnRUb0xvY2F0aW9uIChcbiAgICBwYXJ0aWNpcGFudFV1aWQsXG4gICAgbG9jYXRpb25VdWlkLFxuICAgIHtcbiAgICAgIHNjcm9sbFRvTG9jYXRpb24gPSB0cnVlLFxuICAgICAgYWN0aXZhdGVMb2NhdGlvbiA9IHRydWUsXG4gICAgICBhbmltYXRlID0gbnVsbCxcbiAgICAgIG1vdmVUb2tlbiA9IHRydWUsXG4gICAgICByZW5kZXIgPSB0cnVlXG4gICAgfSA9IHt9XG4gICkge1xuICAgIGNvbnN0IGxvY2F0aW9ucyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuc3lzdGVtLmxvY2F0aW9ucy5saXN0KVxuXG4gICAgLy8gRmluZCBkZXN0aW5hdGlvbiBsb2NhdGlvbi5cbiAgICBjb25zdCBkZXN0aW5hdGlvbiA9IGxvY2F0aW9ucy5maW5kKGwgPT4gbG9jYXRpb25VdWlkID09PSBsLnV1aWQpXG4gICAgaWYgKCFkZXN0aW5hdGlvbikge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgYEZhaWxlZCB0byBtb3ZlICR7cGFydGljaXBhbnRVdWlkfS4gTG9jYXRpb24gJHtsb2NhdGlvblV1aWR9IHVua25vd25gXG4gICAgICApXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBGaW5kIG9yaWdpbiBsb2NhdGlvblxuICAgIGNvbnN0IG9yaWdpbiA9IGxvY2F0aW9ucy5maW5kKGwgPT5cbiAgICAgIGwucGFydGljaXBhbnRzPy5pbmNsdWRlcyhwYXJ0aWNpcGFudFV1aWQpXG4gICAgKVxuXG4gICAgaWYgKCFvcmlnaW4pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBmaW5kICR7cGFydGljaXBhbnRVdWlkfSBpbiBsb2NhdGlvbnNgKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKCFkZXN0aW5hdGlvbi5wYXJ0aWNpcGFudHMpIGRlc3RpbmF0aW9uLnBhcnRpY2lwYW50cyA9IFtdXG4gICAgaWYgKGRlc3RpbmF0aW9uLnBhcnRpY2lwYW50cy5pbmNsdWRlcyhwYXJ0aWNpcGFudFV1aWQpKSByZXR1cm4gLy8gbW92aW5nIHBhcnRpY3BhbnQgdG8gYSBsb2NhdGlvbiBoZSBhbHJlYWR5IG9jY3VwaWVzXG4gICAgZGVzdGluYXRpb24ucGFydGljaXBhbnRzLnB1c2gocGFydGljaXBhbnRVdWlkKVxuICAgIC8vIGRlc3RpbmF0aW9uLnBhcnRpY2lwYW50cy5zb3J0KHNvcnRCeVJvbGVBbmREZXgpXG5cbiAgICBjb25zdCBvbGRQYXJ0aWNpcGFudHNMaXN0ID0gb3JpZ2luLnBhcnRpY2lwYW50cy5maWx0ZXIoXG4gICAgICBwID0+IHBhcnRpY2lwYW50VXVpZCAhPT0gcFxuICAgIClcbiAgICBvcmlnaW4ucGFydGljaXBhbnRzID0gb2xkUGFydGljaXBhbnRzTGlzdFxuXG4gICAgaWYgKG1vdmVUb2tlbiAmJiBkZXN0aW5hdGlvbi5jb29yZGluYXRlcykge1xuICAgICAgY29uc3QgcGFydGljaXBhbnQgPSB0aGlzLmdldFBhcnRpY2lwYW50KHBhcnRpY2lwYW50VXVpZClcbiAgICAgIGxldCBwYXJ0aWNwYW50RG9jdW1lbnQgPSBDb0M3VXRpbGl0aWVzLmdldERvY3VtZW50RnJvbUtleShcbiAgICAgICAgcGFydGljaXBhbnQ/LmRhdGE/LmRvY1V1aWRcbiAgICAgIClcbiAgICAgIC8vIEZpbmQgdG9rZW5cbiAgICAgIGlmIChwYXJ0aWNwYW50RG9jdW1lbnQgJiYgIShwYXJ0aWNwYW50RG9jdW1lbnQgaW5zdGFuY2VvZiBUb2tlbkRvY3VtZW50IHx8IHBhcnRpY3BhbnREb2N1bWVudD8ub2JqZWN0IGluc3RhbmNlb2YgVG9rZW4pKSB7XG4gICAgICAgIGNvbnN0IGZvdW5kVG9rZW5zID0gY2FudmFzLnNjZW5lLnRva2Vucy5maWx0ZXIoZCA9PiBkLmFjdG9yTGluayAmJiBkLmFjdG9yPy5pZCA9PT0gcGFydGljcGFudERvY3VtZW50LmlkKVxuICAgICAgICBpZiAoZm91bmRUb2tlbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgcGFydGljcGFudERvY3VtZW50ID0gZm91bmRUb2tlbnNbMF1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICBwYXJ0aWNwYW50RG9jdW1lbnQgJiZcbiAgICAgICAgIShcbiAgICAgICAgICAvKiBwYXJ0aWNwYW50RG9jdW1lbnQuaXNUb2tlbiB8fCAqLyAoXG4gICAgICAgICAgICBwYXJ0aWNwYW50RG9jdW1lbnQgaW5zdGFuY2VvZiBUb2tlbkRvY3VtZW50IHx8XG4gICAgICAgICAgICBwYXJ0aWNwYW50RG9jdW1lbnQ/Lm9iamVjdCBpbnN0YW5jZW9mIFRva2VuXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdObyB0b2tlbiBhc3NvY2lhdGVkIHdpdGggdGhpcyBhY3RvcicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZGVzdGluYXRpb24uY29vcmRpbmF0ZXMuc2NlbmUgIT09IGdhbWUuc2NlbmVzLnZpZXdlZC51dWlkKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdDYXV0aW9uIHRoZSBzY2VuZSBpcyBub3QgdGhlIGFjdGl2ZSBzY2VuZScpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpY3BhbnREb2N1bWVudC5wYXJlbnQ/LnV1aWQgIT09IGRlc3RpbmF0aW9uLmNvb3JkaW5hdGVzLnNjZW5lKSB7XG4gICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihcbiAgICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FcnJvclRva2VuTm90T25TY2VuZScpXG4gICAgICAgICAgKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHNjZW5lID0gQ29DN1V0aWxpdGllcy5nZXREb2N1bWVudEZyb21LZXkoXG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5jb29yZGluYXRlcy5zY2VuZVxuICAgICAgICAgIClcbiAgICAgICAgICBsZXQgeCA9IGRlc3RpbmF0aW9uLmNvb3JkaW5hdGVzLnhcbiAgICAgICAgICBjb25zdCB5ID0gZGVzdGluYXRpb24uY29vcmRpbmF0ZXMueVxuICAgICAgICAgIGxldCB0YXJnZXRSZWN0ID0gbmV3IFBJWEkuUmVjdGFuZ2xlKFxuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHksXG4gICAgICAgICAgICBwYXJ0aWNwYW50RG9jdW1lbnQub2JqZWN0LndpZHRoLFxuICAgICAgICAgICAgcGFydGljcGFudERvY3VtZW50Lm9iamVjdC5oZWlnaHRcbiAgICAgICAgICApLm5vcm1hbGl6ZSgpXG4gICAgICAgICAgY29uc3QgdXBkYXRlID0gW11cbiAgICAgICAgICBsZXQgZm91bmRGcmVlU3BhY2UgPSBmYWxzZVxuICAgICAgICAgIHdoaWxlICghZm91bmRGcmVlU3BhY2UpIHtcbiAgICAgICAgICAgIGNvbnN0IG92ZXJsYXBpbmdUb2tlbiA9IHNjZW5lLnRva2Vucy5maW5kKHQgPT4ge1xuICAgICAgICAgICAgICBpZiAodC5pZCA9PT0gcGFydGljcGFudERvY3VtZW50LmlkKSByZXR1cm4gZmFsc2UgLy8gWW91IGNhbid0IG92ZXJsYXAgd2l0aCB5b3Vyc2VsZlxuICAgICAgICAgICAgICByZXR1cm4gdC5vYmplY3QuYm91bmRzLmludGVyc2VjdHModGFyZ2V0UmVjdClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBpZiAob3ZlcmxhcGluZ1Rva2VuKSB7XG4gICAgICAgICAgICAgIHggPSBvdmVybGFwaW5nVG9rZW4ub2JqZWN0LmJvdW5kcy5yaWdodCArIDFcbiAgICAgICAgICAgICAgdGFyZ2V0UmVjdCA9IG5ldyBQSVhJLlJlY3RhbmdsZShcbiAgICAgICAgICAgICAgICB4LFxuICAgICAgICAgICAgICAgIHksXG4gICAgICAgICAgICAgICAgcGFydGljcGFudERvY3VtZW50Lm9iamVjdC53aWR0aCxcbiAgICAgICAgICAgICAgICBwYXJ0aWNwYW50RG9jdW1lbnQub2JqZWN0LmhlaWdodFxuICAgICAgICAgICAgICApLm5vcm1hbGl6ZSgpXG4gICAgICAgICAgICB9IGVsc2UgZm91bmRGcmVlU3BhY2UgPSB0cnVlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdXBkYXRlLnB1c2goe1xuICAgICAgICAgICAgX2lkOiBwYXJ0aWNwYW50RG9jdW1lbnQuaWQsXG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeVxuICAgICAgICAgIH0pXG5cbiAgICAgICAgICAvLyBkZXN0aW5hdGlvbi5wYXJ0aWNpcGFudHM/LmZvckVhY2goIHBVdWlkID0+e1xuICAgICAgICAgIC8vICAgY29uc3QgcCA9IHRoaXMuZ2V0UGFydGljaXBhbnQocFV1aWQpXG4gICAgICAgICAgLy8gICBjb25zdCBwRG9jID0gQ29DN1V0aWxpdGllcy5nZXREb2N1bWVudEZyb21LZXkoIHA/LmRhdGE/LmRvY1V1aWQpXG4gICAgICAgICAgLy8gICBpZiggcERvYyBpbnN0YW5jZW9mIFRva2VuRG9jdW1lbnQgJiYgcERvYy5vYmplY3QgaW5zdGFuY2VvZiBUb2tlbil7XG4gICAgICAgICAgLy8gICAgIHVwZGF0ZXMgPSB0cnVlXG4gICAgICAgICAgLy8gICAgIHVwZGF0ZS5wdXNoKHtcbiAgICAgICAgICAvLyAgICAgICBfaWQ6IHBEb2MuaWQsXG4gICAgICAgICAgLy8gICAgICAgeDp4LFxuICAgICAgICAgIC8vICAgICAgIHk6eVxuICAgICAgICAgIC8vICAgICB9KVxuICAgICAgICAgIC8vICAgICBpZiggcERvYy5vYmplY3Qud2lkdGgpIHggKz0gcERvYy5vYmplY3Qud2lkdGhcbiAgICAgICAgICAvLyAgIH1cbiAgICAgICAgICAvLyB9KVxuICAgICAgICAgIGNvbnN0IHNob3dUb2tlbk1vdmVtZW50ID1cbiAgICAgICAgICAgIHR5cGVvZiBhbmltYXRlID09PSAnYm9vbGVhbidcbiAgICAgICAgICAgICAgPyBhbmltYXRlXG4gICAgICAgICAgICAgIDogdGhpcy5zeXN0ZW0uc2hvd1Rva2VuTW92ZW1lbnRcbiAgICAgICAgICBhd2FpdCBwYXJ0aWNwYW50RG9jdW1lbnQucGFyZW50LnVwZGF0ZUVtYmVkZGVkRG9jdW1lbnRzKFxuICAgICAgICAgICAgJ1Rva2VuJyxcbiAgICAgICAgICAgIHVwZGF0ZSxcbiAgICAgICAgICAgIHsgYW5pbWF0ZTogc2hvd1Rva2VuTW92ZW1lbnQgfVxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGF3YWl0IHRoaXMudXBkYXRlTG9jYXRpb25zTGlzdChsb2NhdGlvbnMsIHsgcmVuZGVyIH0pXG4gIH1cblxuICAvLyBIYW5kbGUgc2Nyb2xsaW5nXG4gIGFzeW5jIHNldGNoYXNlVHJhY2tTY3JvbGwgKHtcbiAgICBmcm9tID0gdW5kZWZpbmVkLFxuICAgIHRvID0gLTEsXG4gICAgcmVuZGVyID0gdHJ1ZVxuICB9ID0ge30pIHtcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZShcbiAgICAgIHtcbiAgICAgICAgJ3N5c3RlbS5zY3JvbGwuY2hhc2VUcmFjay5mcm9tJzpcbiAgICAgICAgICB1bmRlZmluZWQgPT09IGZyb20gPyB0aGlzLmNoYXNlVHJhY2tDdXJyZW50U2Nyb2xsUG9zaXRpb24gOiBmcm9tLFxuICAgICAgICAnc3lzdGVtLnNjcm9sbC5jaGFzZVRyYWNrLnRvJzpcbiAgICAgICAgICB1bmRlZmluZWQgPT09IHRvID8gdGhpcy5jaGFzZVRyYWNrQ3VycmVudFNjcm9sbFBvc2l0aW9uIDogdG9cbiAgICAgIH0sXG4gICAgICB7IHJlbmRlciB9XG4gICAgKVxuICB9XG5cbiAgZ2V0IGNoYXNlVHJhY2tDdXJyZW50U2Nyb2xsUG9zaXRpb24gKCkge1xuICAgIGNvbnN0IGh0bWwgPSB0aGlzLnNoZWV0Py5fZWxlbWVudFxuICAgIGlmICghaHRtbCkgcmV0dXJuIC0xXG4gICAgY29uc3QgY2hhc2VUcmFjayA9IGh0bWxbMF0ucXVlcnlTZWxlY3RvcignLmNoYXNlLXRyYWNrJylcbiAgICBpZiAoIWNoYXNlVHJhY2spIHJldHVybiAtMVxuICAgIC8vIGNvbnN0IHNlbGVjdG9yID0gYCNpdGVtLSR7dGhpcy5pZH0gLmNoYXNlLXRyYWNrYFxuICAgIC8vIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyggYERBVEEgOiBKcXVlcnkgcm9vdDogJHskKCc6cm9vdCcpLmZpbmQoc2VsZWN0b3IpLnNjcm9sbExlZnQoKX1gKVxuICAgIC8vIHJldHVybiAkKCc6cm9vdCcpLmZpbmQoc2VsZWN0b3IpLnNjcm9sbExlZnQoKVxuXG4gICAgLy8gdWkubm90aWZpY2F0aW9ucy5pbmZvKCBgREFUQSA6IEpxdWVyeSByb290OiAkeyQoJzpyb290JykuZmluZCgnI2l0ZW0tVk5odHF4QTJ3SkpuV1N0VCAuY2hhc2UtdHJhY2snKS5zY3JvbGxMZWZ0KCl9LkNoYXNlIHRyYWNrIG9mZnNldDogJHtjaGFzZVRyYWNrLnNjcm9sbExlZnR9LCBEb2N1bWVudCBvZmZzZXQ6JHtkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaXRlbS1WTmh0cXhBMndKSm5XU3RUJykucXVlcnlTZWxlY3RvcignLmNoYXNlLXRyYWNrJykuc2Nyb2xsTGVmdH1gKVxuICAgIHJldHVybiBjaGFzZVRyYWNrLnNjcm9sbExlZnRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIG9mZnNldCBwb3NpdGlvbiBvZiB0aGUgYWN0aXZlIGxvY2F0aW9uXG4gICAqIHRoZSBjZW50ZXIgb2YgdGhlIGFjdGl2ZSBsb2NhdGlvbiB3aWxsIGJlIGNlbnRlcmVkXG4gICAqIGluIHRoZSBwYXJlbnQuXG4gICAqL1xuICBnZXQgY2hhc2VUcmFja0FjdGl2ZUxvY2F0aW9uU2Nyb2xsUG9zaXRpb24gKCkge1xuICAgIGlmICghdGhpcy5hY3RpdmVMb2NhdGlvbikgcmV0dXJuIC0xXG4gICAgcmV0dXJuIHRoaXMuZ2V0Q2hhc2VUcmFja0xvY2F0aW9uU2Nyb2xsUG9zaXRpb24odGhpcy5hY3RpdmVMb2NhdGlvbi51dWlkKVxuICB9XG5cbiAgZ2V0Q2hhc2VUcmFja0xvY2F0aW9uU2Nyb2xsUG9zaXRpb24gKGxvY2F0aW9uVXVpZCwgeyBodG1sID0gbnVsbCB9KSB7XG4gICAgY29uc3QgaHRtbEVsZW1lbnQgPSBodG1sIHx8IHRoaXMuc2hlZXQ/Ll9lbGVtZW50XG4gICAgaWYgKCFodG1sRWxlbWVudCB8fCAhaHRtbEVsZW1lbnRbMF0pIHJldHVybiAtMVxuICAgIGNvbnN0IGNoYXNlVHJhY2sgPSBodG1sRWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcuY2hhc2UtdHJhY2snKVxuICAgIGlmICghY2hhc2VUcmFjaykgcmV0dXJuIC0xXG4gICAgY29uc3QgYWN0aXZlTG9jYXRpb25FbGVtZW50ID0gY2hhc2VUcmFjay5xdWVyeVNlbGVjdG9yKFxuICAgICAgYC5jaGFzZS1sb2NhdGlvbltkYXRhLXV1aWQ9XCIke2xvY2F0aW9uVXVpZH1cIl1gXG4gICAgKVxuICAgIGlmICghYWN0aXZlTG9jYXRpb25FbGVtZW50KSByZXR1cm4gLTFcbiAgICBjb25zdCBsZWZ0U2Nyb2xsID1cbiAgICAgIGFjdGl2ZUxvY2F0aW9uRWxlbWVudC5vZmZzZXRMZWZ0ICtcbiAgICAgIGFjdGl2ZUxvY2F0aW9uRWxlbWVudC5jbGllbnRXaWR0aCAvIDIgLVxuICAgICAgY2hhc2VUcmFjay5jbGllbnRXaWR0aCAvIDJcbiAgICByZXR1cm4gbGVmdFNjcm9sbCA8IDAgPyAwIDogTWF0aC5mbG9vcihsZWZ0U2Nyb2xsKVxuICB9XG5cbiAgLy8gU2hvdWxkIGJlIHJlbW92ZWRcbiAgZmluZE1pbk1vdiAobGlzdCkge1xuICAgIGlmICghbGlzdD8ubGVuZ3RoKSByZXR1cm4gLTFcbiAgICByZXR1cm4gbGlzdC5yZWR1Y2UoKHByZXYsIGN1cnJlbnQpID0+XG4gICAgICBwcmV2LmFkanVzdGVkTW92IDwgY3VycmVudC5hZGp1c3RlZE1vdiA/IHByZXYgOiBjdXJyZW50XG4gICAgKS5hZGp1c3RlZE1vdlxuICB9XG5cbiAgZmluZE1heE1vdiAobGlzdCkge1xuICAgIGlmICghbGlzdD8ubGVuZ3RoKSByZXR1cm4gLTFcbiAgICByZXR1cm4gbGlzdC5yZWR1Y2UoKHByZXYsIGN1cnJlbnQpID0+XG4gICAgICBwcmV2LmFkanVzdGVkTW92ID4gY3VycmVudC5hZGp1c3RlZE1vdiA/IHByZXYgOiBjdXJyZW50XG4gICAgKS5hZGp1c3RlZE1vdlxuICB9XG5cbiAgLy8gVXRpbGl0aWVzXG4gIGZpbmRJbmRleCAobGlzdCwgdXVpZCkge1xuICAgIHJldHVybiBsaXN0LmZpbmRJbmRleChwID0+IHAudXVpZCA9PT0gdXVpZClcbiAgfVxuXG4gIGdldCBzdGFydGVkICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRGbGFnKCdDb0M3JywgJ3N0YXJ0ZWQnKVxuICB9XG5cbiAgYXN5bmMgc3RhcnQgKCkge1xuICAgIGNvbnN0IHJlbVN0cmluZyA9ICQoJzpyb290JykuY3NzKCdmb250LXNpemUnKVxuICAgIGNvbnN0IHJlbVNpemUgPSBOdW1iZXIocmVtU3RyaW5nLnJlcGxhY2UoJ3B4JywgJycpKVxuICAgIGNvbnN0IHBDb3VudCA9IHRoaXMuYWN0dWFsUGFydGljaXBhbnRzLmxlbmd0aFxuICAgIGNvbnN0IHdpZHRoID0gTWF0aC5tYXgoKHBDb3VudCAqIDExLjIgKyAzKSAqIHJlbVNpemUsIDQwICogcmVtU2l6ZSlcbiAgICB0aGlzLnNoZWV0Ll90YWJzWzBdLmFjdGl2ZSA9ICdzZXR1cCdcbiAgICB0aGlzLnNoZWV0LnBvc2l0aW9uLndpZHRoID0gd2lkdGhcbiAgICBhd2FpdCB0aGlzLnNldEZsYWcoJ0NvQzcnLCAnc3RhcnRlZCcsIHRydWUpXG4gICAgYXdhaXQgdGhpcy5hY3RpdmF0ZU5leHRQYXJ0aWNpcGFudFR1cm4oKVxuICB9XG5cbiAgYXN5bmMgc3RvcCAoKSB7XG4gICAgcmV0dXJuIHRoaXMudW5zZXRGbGFnKCdDb0M3JywgJ3N0YXJ0ZWQnKVxuICB9XG5cbiAgZ2VuZXJhdGVOZXdVdWlkICgpIHtcbiAgICByZXR1cm4gZm91bmRyeS51dGlscy5yYW5kb21JRCgxNilcbiAgfVxuXG4gIGdldEFjdG9yU2tpbGxzQW5kQ2hhcmFjdGVyaXN0aWNzIChwYXJ0aWNpcGFudFV1aWQpIHtcbiAgICBjb25zdCBwYXJ0aWNpcGFudCA9IHRoaXMuZ2V0UGFydGljaXBhbnQocGFydGljaXBhbnRVdWlkKVxuICAgIGlmICghcGFydGljaXBhbnQuYWN0b3IpIHJldHVybiB1bmRlZmluZWRcbiAgICBjb25zdCBsaXN0ID0gW11cbiAgICBDb0NBY3Rvci5nZXRDaGFyYWN0ZXJpc3RpY0RlZmluaXRpb24oKS5mb3JFYWNoKGMgPT5cbiAgICAgIGxpc3QucHVzaChcbiAgICAgICAgYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNoYXJhY3RlcmlzdGljcycpfSAoJHtjLnNob3J0TmFtZX0pYFxuICAgICAgKVxuICAgIClcbiAgICBsaXN0LnB1c2goXG4gICAgICBgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQXR0cmlidXRlJyl9ICgke2dhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgICAgJ0NvQzcuTHVjaydcbiAgICAgICl9KWBcbiAgICApXG4gICAgbGlzdC5wdXNoKFxuICAgICAgYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkF0dHJpYnV0ZScpfSAoJHtnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICdDb0M3LlNBTidcbiAgICAgICl9KWBcbiAgICApXG4gICAgcGFydGljaXBhbnQuYWN0b3Iuc2tpbGxzLmZvckVhY2gocyA9PiBsaXN0LnB1c2gocy5uYW1lKSlcbiAgICByZXR1cm4gbGlzdFxuICB9XG5cbiAgZ2V0IGFjdGl2ZUFjdG9yU2tpbGxzQW5kQ2hhcmFjdGVyaXN0aWNzICgpIHtcbiAgICBjb25zdCBwYXJ0aWNpY3BhbnREYXRhID0gdGhpcy5hY3RpdmVQYXJ0aWNpcGFudERhdGFcbiAgICBpZiAoIXBhcnRpY2ljcGFudERhdGEpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5nZXRBY3RvclNraWxsc0FuZENoYXJhY3RlcmlzdGljcyhwYXJ0aWNpY3BhbnREYXRhLnV1aWQpXG4gIH1cblxuICBnZXQgYWxsU2tpbGxzQW5kQ2hhcmFjdGVyaXN0aWNzICgpIHtcbiAgICBjb25zdCBsaXN0ID0gW11cbiAgICBDb0NBY3Rvci5nZXRDaGFyYWN0ZXJpc3RpY0RlZmluaXRpb24oKS5mb3JFYWNoKGMgPT5cbiAgICAgIGxpc3QucHVzaChcbiAgICAgICAgYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNoYXJhY3RlcmlzdGljcycpfSAoJHtjLnNob3J0TmFtZX0pYFxuICAgICAgKVxuICAgIClcbiAgICBsaXN0LnB1c2goXG4gICAgICBgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQXR0cmlidXRlJyl9ICgke2dhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgICAgJ0NvQzcuTHVjaydcbiAgICAgICl9KWBcbiAgICApXG4gICAgbGlzdC5wdXNoKFxuICAgICAgYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkF0dHJpYnV0ZScpfSAoJHtnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICdDb0M3LlNBTidcbiAgICAgICl9KWBcbiAgICApXG5cbiAgICBnYW1lLkNvQzcuc2tpbGxMaXN0Py5mb3JFYWNoKHMgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICAhbGlzdC5pbmNsdWRlcyhzLm5hbWUpICYmXG4gICAgICAgICFzLm5hbWVcbiAgICAgICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgICAgIC5pbmNsdWRlcyhgKCR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkFueVNwZWNOYW1lJyl9KWAudG9Mb3dlckNhc2UoKSlcbiAgICAgICkge1xuICAgICAgICBsaXN0LnB1c2gocy5uYW1lKVxuICAgICAgfVxuICAgIH0pIC8vIFRPRE86IFJlbW92ZSA/P1xuICAgIHRoaXMucGFydGljaXBhbnRzLmZvckVhY2gocCA9PiB7XG4gICAgICBpZiAocC5hY3Rvcikge1xuICAgICAgICBwLmFjdG9yLnNraWxscy5mb3JFYWNoKHMgPT4ge1xuICAgICAgICAgIGlmICghbGlzdC5pbmNsdWRlcyhzLm5hbWUpKSBsaXN0LnB1c2gocy5uYW1lKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGxpc3Quc29ydChJbnRsLkNvbGxhdG9yKCkuY29tcGFyZSlcbiAgfVxuXG4gIGdldCBhbGxTa2lsbHNBbmRDaGFyYWN0ZXJpc3RpY3NTaG9ydCAoKSB7XG4gICAgY29uc3QgbGlzdCA9IFtdXG4gICAgQ29DQWN0b3IuZ2V0Q2hhcmFjdGVyaXN0aWNEZWZpbml0aW9uKCkuZm9yRWFjaChjID0+IGxpc3QucHVzaChgJHtjLmxhYmVsfWApKVxuICAgIGxpc3QucHVzaChgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTHVjaycpfWApXG4gICAgbGlzdC5wdXNoKGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5TQU4nKX1gKVxuXG4gICAgZ2FtZS5Db0M3LnNraWxsTGlzdD8uZm9yRWFjaChzID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgIWxpc3QuaW5jbHVkZXMocy5uYW1lKSAmJlxuICAgICAgICAhcy5uYW1lXG4gICAgICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAuaW5jbHVkZXMoYCgke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5BbnlTcGVjTmFtZScpfSlgLnRvTG93ZXJDYXNlKCkpXG4gICAgICApIHtcbiAgICAgICAgbGlzdC5wdXNoKHMubmFtZSlcbiAgICAgIH1cbiAgICB9KSAvLyBUT0RPOiBSZW1vdmUgPz9cbiAgICB0aGlzLnBhcnRpY2lwYW50cy5mb3JFYWNoKHAgPT4ge1xuICAgICAgaWYgKHAuYWN0b3IpIHtcbiAgICAgICAgcC5hY3Rvci5za2lsbHMuZm9yRWFjaChzID0+IHtcbiAgICAgICAgICBpZiAoIWxpc3QuaW5jbHVkZXMocy5uYW1lKSkgbGlzdC5wdXNoKHMubmFtZSlcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBsaXN0LnNvcnQoSW50bC5Db2xsYXRvcigpLmNvbXBhcmUpXG4gIH1cblxuICAvKipcbiAgICogQ2xlYW4gdGhlIGRhdGEgb2YgYWxsIHBhcmFzaXRlIHBhcnRpY2lwYW50cyBpbiBsb2NhdGlvbnMuXG4gICAqIFNob3VsZCBuZXZlciBoYXBwZW5cbiAgICovXG4gIC8vIGFzeW5jIGNsZWFuTG9jYXRpb25zICgpIHtcbiAgLy8gICBjb25zdCBsb2NhdGlvbnMgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLnN5c3RlbS5sb2NhdGlvbnMubGlzdClcbiAgLy8gICBsb2NhdGlvbnMuZm9yRWFjaChsID0+IHtcbiAgLy8gICAgIGNvbnN0IHBhcnRpcGFudHNVdWlkQXJyYXkgPSB0aGlzLnN5c3RlbS5wYXJ0aWNpcGFudHMubWFwKHAgPT4gcC51dWlkKVxuICAvLyAgICAgaWYgKGwucGFydGljaXBhbnRzKSB7XG4gIC8vICAgICAgIGwucGFydGljaXBhbnRzID0gbC5wYXJ0aWNpcGFudHMuZmlsdGVyKHV1aWQgPT5cbiAgLy8gICAgICAgICBwYXJ0aXBhbnRzVXVpZEFycmF5LmluY2x1ZGVzKHV1aWQpXG4gIC8vICAgICAgIClcbiAgLy8gICAgIH1cbiAgLy8gICB9KVxuICAvLyAgIHRoaXMudXBkYXRlTG9jYXRpb25zTGlzdChsb2NhdGlvbnMpXG4gIC8vIH1cbn1cbiIsIi8qIGdsb2JhbCBmb3VuZHJ5LCBnYW1lICovXG5pbXBvcnQgeyBDb0M3SXRlbSB9IGZyb20gJy4uL2l0ZW0uanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3U2tpbGwgZXh0ZW5kcyBDb0M3SXRlbSB7XG4gIGNvbnN0cnVjdG9yIChkYXRhLCBjb250ZXh0KSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhLnN5c3RlbT8uc2tpbGxOYW1lID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3Qgc2tpbGwgPSBDb0M3U2tpbGwuZ3Vlc3NOYW1lUGFydHMoZGF0YS5uYW1lKVxuICAgICAgY29uc3QgeyBuYW1lLCBza2lsbE5hbWUsIHNwZWNpYWxpemF0aW9uLCAuLi5uZXdQcm9wZXJ0aWVzIH0gPSBza2lsbFxuICAgICAgZGF0YS5uYW1lID0gbmFtZVxuICAgICAgZGF0YS5zeXN0ZW0gfHw9IHt9XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0geyAuLi5kYXRhLnN5c3RlbS5wcm9wZXJ0aWVzLCAuLi5uZXdQcm9wZXJ0aWVzIH1cbiAgICAgIGRhdGEuc3lzdGVtID0geyAuLi5kYXRhLnN5c3RlbSwgc2tpbGxOYW1lLCBzcGVjaWFsaXphdGlvbiwgcHJvcGVydGllcyB9XG4gICAgfVxuICAgIHN1cGVyKGRhdGEsIGNvbnRleHQpXG4gIH1cblxuICBzdGF0aWMgZ3Vlc3NOYW1lUGFydHMgKHNraWxsTmFtZSkge1xuICAgIGNvbnN0IG91dHB1dCA9IHtcbiAgICAgIGNvbWJhdDogZmFsc2UsXG4gICAgICBmaWdodGluZzogZmFsc2UsXG4gICAgICBmaXJlYXJtOiBmYWxzZSxcbiAgICAgIG5hbWU6IHNraWxsTmFtZSxcbiAgICAgIHNraWxsTmFtZSxcbiAgICAgIHNwZWNpYWw6IGZhbHNlLFxuICAgICAgc3BlY2lhbGl6YXRpb246ICcnXG4gICAgfVxuXG4gICAgY29uc3QgbWF0Y2ggPSBza2lsbE5hbWUubWF0Y2goL14oLispXFxzKlxcKChbXildKylcXCkkLylcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIG91dHB1dC5za2lsbE5hbWUgPSBtYXRjaFsyXS50cmltKClcbiAgICAgIG91dHB1dC5zcGVjaWFsID0gdHJ1ZVxuXG4gICAgICBjb25zdCBzcGVjaWFsaXphdGlvbiA9IG1hdGNoWzFdLnRyaW0oKVxuICAgICAgb3V0cHV0LnNwZWNpYWxpemF0aW9uID0gc3BlY2lhbGl6YXRpb25cbiAgICAgIG91dHB1dC5uYW1lID0gc3BlY2lhbGl6YXRpb24gKyAnICgnICsgb3V0cHV0LnNraWxsTmFtZSArICcpJ1xuICAgICAgb3V0cHV0LmZpZ2h0aW5nID0gc3BlY2lhbGl6YXRpb24gPT09IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5GaWdodGluZ1NwZWNpYWxpemF0aW9uTmFtZScpXG4gICAgICBvdXRwdXQuZmlyZWFybSA9IHNwZWNpYWxpemF0aW9uID09PSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRmlyZWFybVNwZWNpYWxpemF0aW9uTmFtZScpXG4gICAgICBvdXRwdXQucmFuZ2VkID0gc3BlY2lhbGl6YXRpb24gPT09IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5SYW5nZWRTcGVjaWFsaXphdGlvbk5hbWUnKVxuICAgICAgb3V0cHV0LmNvbWJhdCA9IG91dHB1dC5maWdodGluZyB8fCBvdXRwdXQuZmlyZWFybSB8fCBvdXRwdXQucmFuZ2VkXG4gICAgfVxuICAgIHJldHVybiBvdXRwdXRcbiAgfVxuXG4gIGdldCBoYXNBY3RpdmVFZmZlY3RzICgpIHtcbiAgICByZXR1cm4gdGhpcy5hY3RpdmVFZmZlY3RzLmxlbmd0aCA+IDBcbiAgfVxuXG4gIGdldCBhY3RpdmVFZmZlY3RzICgpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuZWZmZWN0cykge1xuICAgICAgY29uc3QgZWZmZWN0S2V5RnVsbCA9IGBza2lsbC4ke3RoaXMubmFtZX1gLnRvTG93ZXJDYXNlKClcbiAgICAgIGNvbnN0IGVmZmVjdEtleVNob3J0ID0gYHNraWxsLiR7dGhpcy5zeXN0ZW0uc2tpbGxOYW1lfWAudG9Mb3dlckNhc2UoKVxuICAgICAgbGV0IGNoYW5nZXMgPSB0aGlzLnBhcmVudC5lZmZlY3RzLnJlZHVjZSgoY2hhbmdlcywgZSkgPT4ge1xuICAgICAgICBpZiAoZS5kaXNhYmxlZCB8fCBlLmlzU3VwcHJlc3NlZCkgcmV0dXJuIGNoYW5nZXNcbiAgICAgICAgcmV0dXJuIGNoYW5nZXMuY29uY2F0KFxuICAgICAgICAgIGUuZGF0YS5jaGFuZ2VzLm1hcChjID0+IHtcbiAgICAgICAgICAgIGMgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShjKVxuICAgICAgICAgICAgYy5lZmZlY3QgPSBlXG4gICAgICAgICAgICBjLnByaW9yaXR5ID0gYy5wcmlvcml0eSA/PyBjLm1vZGUgKiAxMFxuICAgICAgICAgICAgcmV0dXJuIGNcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICB9LCBbXSlcbiAgICAgIGNoYW5nZXMuc29ydCgoYSwgYikgPT4gYS5wcmlvcml0eSAtIGIucHJpb3JpdHkpXG4gICAgICBjaGFuZ2VzID0gY2hhbmdlcy5maWx0ZXIoXG4gICAgICAgIGUgPT5cbiAgICAgICAgICBlLmtleS50b0xvd2VyQ2FzZSgpID09PSBlZmZlY3RLZXlTaG9ydCB8fFxuICAgICAgICAgIGUua2V5LnRvTG93ZXJDYXNlKCkgPT09IGVmZmVjdEtleUZ1bGxcbiAgICAgIClcbiAgICAgIHJldHVybiBjaGFuZ2VzXG4gICAgfVxuICAgIHJldHVybiBbXVxuICB9XG5cbiAgLyoqXG4gICogVW5pcXVlIGlkZW50aWZpZXIgc2hvdWxkIGJlIHVzZWQgdG8gc3RvcmUgYW5kIG9idGFpbiBpdGVtIHRvIGFzc2VzcyBpdGVtIHVuaXF1ZW5lc3MuXG4gICogRm9yIG9sZCBpdGVtcyB3aXRob3V0IGlkLCBmYWxsYmFjayBvZiBza2lsbE5hbWUgbWF5IHN0aWxsIGJlIHVzZWRcbiAgKiBidXQgaWYgc2tpbGwgbmFtZSBpcyBub3QgdW5pcXVlIGl0IHdpbGwgY2F1c2UgcHJvYmxlbXMuXG4gICovXG4gIGdldCBpdGVtSWRlbnRpZmllciAoKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZVxuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHZhbHVlIG9mIHRoZSBza2lsbCBzY29yZSB1bmFmZmVjdGVkIGJ5IGFjdGl2ZSBlZmZlY3RzXG4gICAqL1xuICBnZXQgcmF3VmFsdWUgKCkge1xuICAgIGxldCB2YWx1ZSA9IDBcbiAgICBpZiAodGhpcy5hY3Rvci50eXBlID09PSAnY2hhcmFjdGVyJykge1xuICAgICAgLy8gRm9yIGFuIGFjdG9yIHdpdGggZXhwZXJpZW5jZSB3ZSBuZWVkIHRvIGNhbGN1bGF0ZSBza2lsbCB2YWx1ZVxuICAgICAgdmFsdWUgPSB0aGlzLmJhc2VcbiAgICAgIHZhbHVlICs9IHRoaXMuc3lzdGVtLmFkanVzdG1lbnRzPy5wZXJzb25hbFxuICAgICAgICA/IHBhcnNlSW50KHRoaXMuc3lzdGVtLmFkanVzdG1lbnRzPy5wZXJzb25hbClcbiAgICAgICAgOiAwXG4gICAgICB2YWx1ZSArPSB0aGlzLnN5c3RlbS5hZGp1c3RtZW50cz8ub2NjdXBhdGlvblxuICAgICAgICA/IHBhcnNlSW50KHRoaXMuc3lzdGVtLmFkanVzdG1lbnRzPy5vY2N1cGF0aW9uKVxuICAgICAgICA6IDBcbiAgICAgIHZhbHVlICs9IHRoaXMuc3lzdGVtLmFkanVzdG1lbnRzPy5leHBlcmllbmNlXG4gICAgICAgID8gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYWRqdXN0bWVudHM/LmV4cGVyaWVuY2UpXG4gICAgICAgIDogMFxuICAgICAgaWYgKFxuICAgICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdwdWxwUnVsZUFyY2hldHlwZScpICYmXG4gICAgICAgIHRoaXMuc3lzdGVtLmFkanVzdG1lbnRzPy5hcmNoZXR5cGVcbiAgICAgICkge1xuICAgICAgICB2YWx1ZSArPSBwYXJzZUludCh0aGlzLnN5c3RlbS5hZGp1c3RtZW50cz8uYXJjaGV0eXBlKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGb3IgYWxsIG90aGVycyBhY3RvciB3ZSBzdG9yZSB0aGUgdmFsdWUgZGlyZWN0bHlcbiAgICAgIHZhbHVlID0gcGFyc2VJbnQodGhpcy5zeXN0ZW0udmFsdWUpXG4gICAgfVxuICAgIHJldHVybiAhaXNOYU4odmFsdWUpID8gdmFsdWUgOiBudWxsXG4gIH1cblxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgc2tpbGwncyB2YWx1ZSBhZnRlciBhY3RpdmUgZWZmZWN0cyBoYXZlIGJlZW4gYXBwbGllZFxuICAgKi9cbiAgZ2V0IHZhbHVlICgpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMucGFyZW50Py5zeXN0ZW0uc2tpbGxzPy5bYCR7dGhpcy5pdGVtSWRlbnRpZmllcn1gXT8udmFsdWVcbiAgICByZXR1cm4gdmFsdWUgfHwgdGhpcy5yYXdWYWx1ZVxuICB9XG5cbiAgYXN5bmMgdXBkYXRlVmFsdWUgKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuYWN0b3IudHlwZSA9PT0gJ2NoYXJhY3RlcicpIHtcbiAgICAgIGNvbnN0IGRlbHRhID0gcGFyc2VJbnQodmFsdWUpIC0gdGhpcy5yYXdWYWx1ZVxuICAgICAgY29uc3QgZXhwID1cbiAgICAgICAgKHRoaXMuc3lzdGVtLmFkanVzdG1lbnRzPy5leHBlcmllbmNlXG4gICAgICAgICAgPyBwYXJzZUludCh0aGlzLnN5c3RlbS5hZGp1c3RtZW50cy5leHBlcmllbmNlKVxuICAgICAgICAgIDogMCkgKyBkZWx0YVxuICAgICAgYXdhaXQgdGhpcy51cGRhdGUoe1xuICAgICAgICAnc3lzdGVtLmFkanVzdG1lbnRzLmV4cGVyaWVuY2UnOiBleHAgPiAwID8gZXhwIDogMFxuICAgICAgfSlcbiAgICB9IGVsc2UgYXdhaXQgdGhpcy51cGRhdGUoeyAnc3lzdGVtLnZhbHVlJzogdmFsdWUgfSlcbiAgfVxuXG4gIGFzeW5jIGluY3JlYXNlRXhwZXJpZW5jZSAoeCkge1xuICAgIGlmICh0aGlzLnR5cGUgIT09ICdza2lsbCcpIHJldHVybiBudWxsXG4gICAgaWYgKHRoaXMuYWN0b3IudHlwZSA9PT0gJ2NoYXJhY3RlcicpIHtcbiAgICAgIGNvbnN0IGV4cCA9XG4gICAgICAgICh0aGlzLnN5c3RlbS5hZGp1c3RtZW50cz8uZXhwZXJpZW5jZVxuICAgICAgICAgID8gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYWRqdXN0bWVudHMuZXhwZXJpZW5jZSlcbiAgICAgICAgICA6IDApICsgcGFyc2VJbnQoeClcbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlKHtcbiAgICAgICAgJ3N5c3RlbS5hZGp1c3RtZW50cy5leHBlcmllbmNlJzogZXhwID4gMCA/IGV4cCA6IDBcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgLy8gZ2V0IHZhbHVlICgpIHtcbiAgLy8gICBsZXQgcFZhbHVlXG4gIC8vICAgaWYoIHRoaXMucGFyZW50KXtcblxuICAvLyAgIH1cbiAgLy8gICBjb25zdCB2YWx1ZSA9IHN1cGVyLnZhbHVlXG4gIC8vICAgbGV0IHVwZGF0ZWQgPSB2YWx1ZVxuICAvLyAgIGZvciAoY29uc3QgY2hhbmdlIG9mIHRoaXMuYWN0aXZlRWZmZWN0cykge1xuICAvLyAgICAgY29uc3QgbW9kaWZpZXIgPSBOdW1iZXIuZnJvbVN0cmluZyhjaGFuZ2UudmFsdWUpXG4gIC8vICAgICBpZiAoIWlzTmFOKG1vZGlmaWVyKSkge1xuICAvLyAgICAgICBjb25zdCBtb2RlcyA9IENPTlNULkFDVElWRV9FRkZFQ1RfTU9ERVNcbiAgLy8gICAgICAgc3dpdGNoIChjaGFuZ2UubW9kZSkge1xuICAvLyAgICAgICAgIGNhc2UgbW9kZXMuQUREOlxuICAvLyAgICAgICAgICAgdXBkYXRlZCArPSBtb2RpZmllclxuICAvLyAgICAgICAgICAgYnJlYWtcbiAgLy8gICAgICAgICBjYXNlIG1vZGVzLk1VTFRJUExZOlxuICAvLyAgICAgICAgICAgdXBkYXRlZCA9IE1hdGgucm91bmQodXBkYXRlZCAqIG1vZGlmaWVyKVxuICAvLyAgICAgICAgICAgYnJlYWtcbiAgLy8gICAgICAgICBjYXNlIG1vZGVzLk9WRVJSSURFOlxuICAvLyAgICAgICAgICAgdXBkYXRlZCA9IG1vZGlmaWVyXG4gIC8vICAgICAgICAgICBicmVha1xuICAvLyAgICAgICAgIGNhc2UgbW9kZXMuVVBHUkFERTpcbiAgLy8gICAgICAgICAgIGlmIChtb2RpZmVyID4gdXBkYXRlZCkgdXBkYXRlZCA9IG1vZGlmaWVyXG4gIC8vICAgICAgICAgICBicmVha1xuICAvLyAgICAgICAgIGNhc2UgbW9kZXMuRE9XTkdSQURFOlxuICAvLyAgICAgICAgICAgaWYgKG1vZGlmZXIgPCB1cGRhdGVkKSB1cGRhdGVkID0gbW9kaWZpZXJcbiAgLy8gICAgICAgICAgIGJyZWFrXG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH1cbiAgLy8gICB9XG4gIC8vICAgaWYgKCFpc05hTih1cGRhdGVkKSAmJiB1cGRhdGVkICE9IHZhbHVlKSB7XG4gIC8vICAgICBpZiAodXBkYXRlZCA8IDApIHVwZGF0ZWQgPSAwXG4gIC8vICAgICByZXR1cm4gdXBkYXRlZFxuICAvLyAgIH0gcmV0dXJuIHZhbHVlXG4gIC8vIH1cbn1cbiIsImltcG9ydCB7IENvQ0FjdG9yIH0gZnJvbSAnLi4vYWN0b3IuanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3VmVoaWNsZSBleHRlbmRzIENvQ0FjdG9yIHtcbiAgY29uc3RydWN0b3IgKGRhdGEsIGNvbnRleHQpIHtcbiAgICBpZiAodHlwZW9mIGRhdGEuaW1nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZGF0YS5pbWcgPSAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy9qZWVwLnN2ZydcbiAgICB9XG4gICAgc3VwZXIoZGF0YSwgY29udGV4dClcbiAgfVxuXG4gIGdldCByYXdCdWlsZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVpbGRcbiAgfVxuXG4gIGdldCBidWlsZCAoKSB7XG4gICAgY29uc3QgYnVpbGQgPSBwYXJzZUludCh0aGlzLnN5c3RlbS5hdHRyaWJzLmJ1aWxkLnZhbHVlKVxuICAgIHJldHVybiBpc05hTihidWlsZCkgPyBudWxsIDogYnVpbGRcbiAgfVxuXG4gIGdldCBocCAoKSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5zeXN0ZW0uYXR0cmlicy5idWlsZC5jdXJyZW50ID09PSBudWxsIHx8XG4gICAgICB1bmRlZmluZWQgPT09IHRoaXMuc3lzdGVtLmF0dHJpYnMuYnVpbGQuY3VycmVudCB8fFxuICAgICAgdGhpcy5zeXN0ZW0uYXR0cmlicy5idWlsZC5jdXJyZW50ID09PSAnJ1xuICAgICkge1xuICAgICAgcmV0dXJuIHRoaXMuYnVpbGRcbiAgICB9XG4gICAgaWYgKFxuICAgICAgdGhpcy5zeXN0ZW0uYXR0cmlicy5idWlsZC5jdXJyZW50ID4gdGhpcy5zeXN0ZW0uYXR0cmlicy5idWlsZC52YWx1ZVxuICAgICkge1xuICAgICAgcmV0dXJuIHRoaXMuYnVpbGRcbiAgICB9XG4gICAgY29uc3QgaHAgPSBwYXJzZUludCh0aGlzLnN5c3RlbS5hdHRyaWJzLmJ1aWxkLmN1cnJlbnQpXG4gICAgcmV0dXJuIGlzTmFOKGhwKSA/IG51bGwgOiBocFxuICB9XG5cbiAgZ2V0IGhwTWF4ICgpIHtcbiAgICByZXR1cm4gdGhpcy5idWlsZFxuICB9XG5cbiAgZ2V0IHJhd0hwTWF4ICgpIHtcbiAgICByZXR1cm4gdGhpcy5idWlsZFxuICB9XG5cbiAgYXN5bmMgc2V0SHAgKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID4gdGhpcy5idWlsZCkgdmFsdWUgPSB0aGlzLmJ1aWxkXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudXBkYXRlKHsgJ3N5c3RlbS5hdHRyaWJzLmJ1aWxkLmN1cnJlbnQnOiB2YWx1ZSB9KVxuICB9XG5cbiAgZ2V0IHJhd0RiICgpIHtcbiAgICByZXR1cm4gdGhpcy5kYlxuICB9XG5cbiAgZ2V0IGRiICgpIHtcbiAgICBjb25zdCBkYiA9IHBhcnNlSW50KHRoaXMuc3lzdGVtLmF0dHJpYnMuZGI/LnZhbHVlKVxuICAgIHJldHVybiBpc05hTihkYikgPyBudWxsIDogZGJcbiAgfVxuXG4gIGdldCByYXdNb3YgKCkge1xuICAgIHJldHVybiB0aGlzLm1vdlxuICB9XG5cbiAgZ2V0IG1vdiAoKSB7XG4gICAgY29uc3QgbW92ID0gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYXR0cmlicy5tb3Y/LnZhbHVlKVxuICAgIHJldHVybiBpc05hTihtb3YpID8gbnVsbCA6IG1vdlxuICB9XG5cbiAgZ2V0IG1wTWF4ICgpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5zeXN0ZW0uYXR0cmlicz8ubXA/Lm1heCkgfHwgMFxuICB9XG5cbiAgZ2V0IHJhd01wTWF4ICgpIHtcbiAgICByZXR1cm4gdGhpcy5tcE1heFxuICB9XG5cbiAgZ2V0IHNhbk1heCAoKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGdldCByYXdTYW5NYXggKCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBEaWUgKi9cblxuZXhwb3J0IGNsYXNzIENvQzdEZWNhZGVyRGllIGV4dGVuZHMgRGllIHtcbiAgY29uc3RydWN0b3IgKHRlcm1EYXRhKSB7XG4gICAgdGVybURhdGEuZmFjZXMgPSAxMFxuICAgIHN1cGVyKHRlcm1EYXRhKVxuICB9XG5cbiAgZ2V0IHRvdGFsICgpIHtcbiAgICBjb25zdCB0b3RhbCA9IHN1cGVyLnRvdGFsXG4gICAgcmV0dXJuIHRvdGFsID09PSAxMCA/IDAgOiB0b3RhbCAqIDEwXG4gIH1cblxuICAvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuICAvKiogQG92ZXJyaWRlICovXG4gIHN0YXRpYyBnZXQgREVOT01JTkFUSU9OICgpIHtcbiAgICByZXR1cm4gJ3QnXG4gIH1cbn1cbiIsImltcG9ydCB7IENvQzdEZWNhZGVyRGllIH0gZnJvbSAnLi9kZWNhZGVyLWRpZS5qcydcblxuZXhwb3J0IGNsYXNzIENvQzdEZWNhZGVyRGllT3RoZXIgZXh0ZW5kcyBDb0M3RGVjYWRlckRpZSB7XG4gIHN0YXRpYyBnZXQgREVOT01JTkFUSU9OICgpIHtcbiAgICByZXR1cm4gJ28nXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCAkLCBDT05GSUcsIEZvcm1BcHBsaWNhdGlvbiwgZm91bmRyeSwgZ2FtZSAqL1xuY29uc3QgU0VUVElOR1MgPSB7XG4gIHB1bHBSdWxlczoge1xuICAgIG5hbWU6ICcnLFxuICAgIGhpbnQ6ICcnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogZmFsc2UsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9LFxuICBpbml0aWF0aXZlUnVsZToge1xuICAgIG5hbWU6ICdTRVRUSU5HUy5Jbml0aWF0aXZlUnVsZScsXG4gICAgaGludDogJ1NFVFRJTkdTLkluaXRpYXRpdmVSdWxlSGludCcsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiBmYWxzZSxcbiAgICBkZWZhdWx0OiAnYmFzaWMnLFxuICAgIHR5cGU6IFN0cmluZyxcbiAgICBjaG9pY2VzOiB7XG4gICAgICBiYXNpYzogJ1NFVFRJTkdTLkluaXRpYXRpdmVSdWxlQmFzaWMnLFxuICAgICAgb3B0aW9uYWw6ICdTRVRUSU5HUy5Jbml0aWF0aXZlUnVsZU9wdGlvbmFsJ1xuICAgIH0sXG4gICAgb25DaGFuZ2U6IHJ1bGUgPT4gX3NldEluaXRpYXRpdmVPcHRpb25zKHJ1bGUpXG4gIH0sXG4gIGRldmVsb3BtZW50Um9sbEZvckx1Y2s6IHtcbiAgICBuYW1lOiAnU0VUVElOR1MuZGV2ZWxvcG1lbnRSb2xsRm9yTHVjaycsXG4gICAgaGludDogJ1NFVFRJTkdTLmRldmVsb3BtZW50Um9sbEZvckx1Y2tIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IGZhbHNlLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHR5cGU6IEJvb2xlYW5cbiAgfSxcbiAgcHVscFJ1bGVEb3VibGVNYXhIZWFsdGg6IHtcbiAgICBuYW1lOiAnQ29DNy5TZXR0aW5ncy5QdWxwUnVsZXMuRG91YmxlTWF4SGVhbHRoLk5hbWUnLFxuICAgIGhpbnQ6ICdDb0M3LlNldHRpbmdzLlB1bHBSdWxlcy5Eb3VibGVNYXhIZWFsdGguSGludCcsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiBmYWxzZSxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0sXG4gIHB1bHBSdWxlRGV2ZWxvcG1lbnRSb2xsTHVjazoge1xuICAgIG5hbWU6ICdDb0M3LlNldHRpbmdzLlB1bHBSdWxlcy5EZXZlbG9wbWVudFJvbGxMdWNrLk5hbWUnLFxuICAgIGhpbnQ6ICdDb0M3LlNldHRpbmdzLlB1bHBSdWxlcy5EZXZlbG9wbWVudFJvbGxMdWNrLkhpbnQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogZmFsc2UsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9LFxuICBwdWxwUnVsZUFyY2hldHlwZToge1xuICAgIG5hbWU6ICdDb0M3LlNldHRpbmdzLlB1bHBSdWxlcy5BcmNoZXR5cGUuTmFtZScsXG4gICAgaGludDogJ0NvQzcuU2V0dGluZ3MuUHVscFJ1bGVzLkFyY2hldHlwZS5IaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IGZhbHNlLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHR5cGU6IEJvb2xlYW5cbiAgfSxcbiAgcHVscFJ1bGVPcmdhbml6YXRpb246IHtcbiAgICBuYW1lOiAnQ29DNy5TZXR0aW5ncy5QdWxwUnVsZXMuT3JnYW5pemF0aW9uLk5hbWUnLFxuICAgIGhpbnQ6ICdDb0M3LlNldHRpbmdzLlB1bHBSdWxlcy5Pcmdhbml6YXRpb24uSGludCcsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiBmYWxzZSxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0sXG4gIHB1bHBSdWxlVGFsZW50czoge1xuICAgIG5hbWU6ICdDb0M3LlNldHRpbmdzLlB1bHBSdWxlcy5UYWxlbnRzLk5hbWUnLFxuICAgIGhpbnQ6ICdDb0M3LlNldHRpbmdzLlB1bHBSdWxlcy5UYWxlbnRzLkhpbnQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogZmFsc2UsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9LFxuICBwdWxwUnVsZUZhc3RlclJlY292ZXJ5OiB7XG4gICAgbmFtZTogJ0NvQzcuU2V0dGluZ3MuUHVscFJ1bGVzLkZhc3RlclJlY292ZXJ5Lk5hbWUnLFxuICAgIGhpbnQ6ICdDb0M3LlNldHRpbmdzLlB1bHBSdWxlcy5GYXN0ZXJSZWNvdmVyeS5IaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IGZhbHNlLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHR5cGU6IEJvb2xlYW5cbiAgfSxcbiAgcHVscFJ1bGVJZ25vcmVNYWpvcldvdW5kczoge1xuICAgIG5hbWU6ICdDb0M3LlNldHRpbmdzLlB1bHBSdWxlcy5JZ25vcmVNYWpvcldvdW5kcy5OYW1lJyxcbiAgICBoaW50OiAnQ29DNy5TZXR0aW5ncy5QdWxwUnVsZXMuSWdub3JlTWFqb3JXb3VuZHMuSGludCcsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiBmYWxzZSxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0sXG4gIHB1bHBSdWxlSWdub3JlQWdlUGVuYWx0aWVzOiB7XG4gICAgbmFtZTogJ0NvQzcuU2V0dGluZ3MuUHVscFJ1bGVzLklnbm9yZUFnZVBlbmFsdGllcy5OYW1lJyxcbiAgICBoaW50OiAnQ29DNy5TZXR0aW5ncy5QdWxwUnVsZXMuSWdub3JlQWdlUGVuYWx0aWVzLkhpbnQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogZmFsc2UsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9LFxuICBvcHBvc2VkUm9sbFRpZUJyZWFrZXI6IHtcbiAgICBuYW1lOiAnU0VUVElOR1MuT3Bwb3NlZFJvbGxUaWVCcmVha2VyJyxcbiAgICBoaW50OiAnU0VUVElOR1MuT3Bwb3NlZFJvbGxUaWVCcmVha2VySGludCcsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiBmYWxzZSxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH1cbn1cblxuZnVuY3Rpb24gX3NldEluaXRpYXRpdmVPcHRpb25zIChydWxlKSB7XG4gIGxldCBkZWNpbWFscyA9IDBcbiAgc3dpdGNoIChydWxlKSB7XG4gICAgY2FzZSAnb3B0aW9uYWwnOlxuICAgICAgZGVjaW1hbHMgPSAyXG4gICAgICBicmVha1xuICAgIGNhc2UgJ2Jhc2ljJzpcbiAgICAgIGRlY2ltYWxzID0gMFxuICAgICAgYnJlYWtcbiAgfVxuICBDT05GSUcuQ29tYmF0LmluaXRpYXRpdmUgPSB7XG4gICAgZm9ybXVsYTogbnVsbCxcbiAgICBkZWNpbWFsc1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb0M3R2FtZVJ1bGVTZXR0aW5ncyBleHRlbmRzIEZvcm1BcHBsaWNhdGlvbiB7XG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRPcHRpb25zLCB7XG4gICAgICB0aXRsZTogJ1NFVFRJTkdTLlRpdGxlUnVsZXMnLFxuICAgICAgaWQ6ICdydWxlcy1zZXR0aW5ncycsXG4gICAgICB0ZW1wbGF0ZTogJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvc3lzdGVtL3J1bGUtc2V0dGluZ3MuaHRtbCcsXG4gICAgICB3aWR0aDogNTUwLFxuICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgICBjbG9zZU9uU3VibWl0OiB0cnVlXG4gICAgfSlcbiAgfVxuXG4gIGdldERhdGEgKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7fVxuICAgIGNvbnN0IHB1bHBSdWxlcyA9IHtcbiAgICAgIHRydWU6IGZhbHNlLFxuICAgICAgZmFsc2U6IGZhbHNlXG4gICAgfVxuICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKFNFVFRJTkdTKSkge1xuICAgICAgb3B0aW9uc1trXSA9IHtcbiAgICAgICAgdmFsdWU6IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgayksXG4gICAgICAgIHNldHRpbmc6IHZcbiAgICAgIH1cbiAgICAgIGlmIChrLm1hdGNoKC9ecHVscFJ1bGUuezIsfSQvKSkge1xuICAgICAgICBwdWxwUnVsZXNbb3B0aW9uc1trXS52YWx1ZV0gPSB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIG9wdGlvbnMucHVscFNlbGVjdGlvbiA9IHB1bHBSdWxlcy50cnVlXG4gICAgICA/IHB1bHBSdWxlcy5mYWxzZVxuICAgICAgICA/ICdzb21lJ1xuICAgICAgICA6ICdhbGwnXG4gICAgICA6ICdub25lJ1xuICAgIHJldHVybiBvcHRpb25zXG4gIH1cblxuICBzdGF0aWMgcmVnaXN0ZXJTZXR0aW5ncyAoKSB7XG4gICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoU0VUVElOR1MpKSB7XG4gICAgICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgaywgdilcbiAgICB9XG4gICAgX3NldEluaXRpYXRpdmVPcHRpb25zKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2luaXRpYXRpdmVSdWxlJykpXG4gIH1cblxuICBhY3RpdmF0ZUxpc3RlbmVycyAoaHRtbCkge1xuICAgIHN1cGVyLmFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJyNwdWxwUnVsZXNTZWxlY3QnKVxuICAgICAgLm9uKCdjaGFuZ2UnLCBldmVudCA9PiB0aGlzLm9uQ2hhbmdlUHVscFNlbGVjdChldmVudCkpXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJ2lucHV0LnB1bHBSdWxlc1NlbGVjdFt0eXBlPWNoZWNrYm94XScpXG4gICAgICAub24oJ2NsaWNrJywgZXZlbnQgPT4gdGhpcy5vbkNsaWNrUHVscChldmVudCkpXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJ2J1dHRvbltuYW1lPXJlc2V0XScpXG4gICAgICAub24oJ2NsaWNrJywgZXZlbnQgPT4gdGhpcy5vblJlc2V0RGVmYXVsdHMoZXZlbnQpKVxuICB9XG5cbiAgb25DaGFuZ2VQdWxwU2VsZWN0IChldmVudCkge1xuICAgIGNvbnN0IHZhbCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkudmFsKClcbiAgICBpZiAodmFsID09PSAnbm9uZScgfHwgdmFsID09PSAnYWxsJykge1xuICAgICAgJCgnI3J1bGVzLXNldHRpbmdzJylcbiAgICAgICAgLmZpbmQoJ2lucHV0LnB1bHBSdWxlc1NlbGVjdFt0eXBlPWNoZWNrYm94XScpXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjb25zdCBjaGVja2JveCA9ICQodGhpcylcbiAgICAgICAgICBpZiAodmFsID09PSAnbm9uZScpIHtcbiAgICAgICAgICAgIGNoZWNrYm94LnByb3AoJ2NoZWNrZWQnLCBmYWxzZSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hlY2tib3gucHJvcCgnY2hlY2tlZCcsIHRydWUpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIG9uQ2xpY2tQdWxwIChldmVudCkge1xuICAgIGNvbnN0IHB1bHBSdWxlcyA9IHtcbiAgICAgIHRydWU6IGZhbHNlLFxuICAgICAgZmFsc2U6IGZhbHNlXG4gICAgfVxuICAgICQoJyNydWxlcy1zZXR0aW5ncycpXG4gICAgICAuZmluZCgnaW5wdXQucHVscFJ1bGVzU2VsZWN0W3R5cGU9Y2hlY2tib3hdJylcbiAgICAgIC5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgY2hlY2tib3ggPSAkKHRoaXMpXG4gICAgICAgIGlmIChjaGVja2JveC5wcm9wKCdjaGVja2VkJykpIHtcbiAgICAgICAgICBwdWxwUnVsZXMudHJ1ZSA9IHRydWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwdWxwUnVsZXMuZmFsc2UgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgJCgnI3B1bHBSdWxlc1NlbGVjdCcpLnZhbChcbiAgICAgIHB1bHBSdWxlcy50cnVlID8gKHB1bHBSdWxlcy5mYWxzZSA/ICdzb21lJyA6ICdhbGwnKSA6ICdub25lJ1xuICAgIClcbiAgfVxuXG4gIGFzeW5jIG9uUmVzZXREZWZhdWx0cyAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZm9yIGF3YWl0IChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoU0VUVElOR1MpKSB7XG4gICAgICBhd2FpdCBnYW1lLnNldHRpbmdzLnNldCgnQ29DNycsIGssIHY/LmRlZmF1bHQpXG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJlbmRlcigpXG4gIH1cblxuICBhc3luYyBfdXBkYXRlT2JqZWN0IChldmVudCwgZGF0YSkge1xuICAgIGNvbnN0IHB1bHBSdWxlcyA9IHtcbiAgICAgIHRydWU6IGZhbHNlLFxuICAgICAgZmFsc2U6IGZhbHNlXG4gICAgfVxuICAgIGZvciBhd2FpdCAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKFNFVFRJTkdTKSkge1xuICAgICAgZ2FtZS5zZXR0aW5ncy5zZXQoJ0NvQzcnLCBrZXksIGRhdGFba2V5XSlcbiAgICAgIGlmIChrZXkubWF0Y2goL15wdWxwUnVsZS57Mix9JC8pKSB7XG4gICAgICAgIHB1bHBSdWxlc1tkYXRhW2tleV1dID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICBnYW1lLnNldHRpbmdzLnNldCgnQ29DNycsICdwdWxwUnVsZXMnLCBwdWxwUnVsZXMudHJ1ZSAmJiAhcHVscFJ1bGVzLmZhbHNlKVxuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgZm91bmRyeSwgZ2FtZSwgSXRlbVNoZWV0LCBUZXh0RWRpdG9yICovXG5pbXBvcnQgeyBhZGRDb0NJRFNoZWV0SGVhZGVyQnV0dG9uIH0gZnJvbSAnLi4vLi4vc2NyaXB0cy9jb2MtaWQtYnV0dG9uLmpzJ1xuaW1wb3J0IHsgQ29DN0l0ZW0gfSBmcm9tICcuLi9pdGVtLmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy5qcydcbmltcG9ydCB7IERyb3BDb0NJRCB9IGZyb20gJy4uLy4uL2FwcHMvZHJvcC1jb2MtaWQuanMnXG5cbi8qKlxuICogRXh0ZW5kIHRoZSBiYXNpYyBJdGVtU2hlZXQgd2l0aCBzb21lIHZlcnkgc2ltcGxlIG1vZGlmaWNhdGlvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIENvQzdBcmNoZXR5cGVTaGVldCBleHRlbmRzIEl0ZW1TaGVldCB7XG4gIC8qKlxuICAgKiBBY3RpdmF0ZSBldmVudCBsaXN0ZW5lcnMgdXNpbmcgdGhlIHByZXBhcmVkIHNoZWV0IEhUTUxcbiAgICogQHBhcmFtIGh0bWwge0hUTUx9ICAgVGhlIHByZXBhcmVkIEhUTUwgb2JqZWN0IHJlYWR5IHRvIGJlIHJlbmRlcmVkIGludG8gdGhlIERPTVxuICAgKi9cbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuICAgIC8vIEV2ZXJ5dGhpbmcgYmVsb3cgaGVyZSBpcyBvbmx5IG5lZWRlZCBpZiB0aGUgc2hlZXQgaXMgZWRpdGFibGVcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5lZGl0YWJsZSkgcmV0dXJuXG5cbiAgICBodG1sXG4gICAgICAuZmluZCgnLml0ZW0gLml0ZW0tbmFtZSBoNCcpXG4gICAgICAuY2xpY2soZXZlbnQgPT4gdGhpcy5fb25JdGVtU3VtbWFyeShldmVudCwgJ3NraWxscycpKVxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcuaXRlbS1kZWxldGUnKVxuICAgICAgLmNsaWNrKGV2ZW50ID0+IHRoaXMuX29uSXRlbURlbGV0ZShldmVudCwgJ3NraWxscycpKVxuICB9XG5cbiAgYXN5bmMgX29uRHJvcCAoZXZlbnQsIHR5cGUgPSAnc2tpbGwnLCBjb2xsZWN0aW9uTmFtZSA9ICdza2lsbHMnKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgICBjb25zdCBkYXRhTGlzdCA9IGF3YWl0IENvQzdVdGlsaXRpZXMuZ2V0RGF0YUZyb21Ecm9wRXZlbnQoZXZlbnQsICdJdGVtJylcblxuICAgIGxldCB1c2VDb0NJRCA9IDBcbiAgICBjb25zdCBjb2xsZWN0aW9uID0gdGhpcy5pdGVtLnN5c3RlbVtjb2xsZWN0aW9uTmFtZV0gPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLml0ZW0uc3lzdGVtW2NvbGxlY3Rpb25OYW1lXSkgOiBbXVxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBkYXRhTGlzdCkge1xuICAgICAgaWYgKCFpdGVtIHx8ICFpdGVtLnN5c3RlbSkgY29udGludWVcbiAgICAgIGlmICghW3R5cGVdLmluY2x1ZGVzKGl0ZW0udHlwZSkpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cbiAgICAgIGlmICghQ29DN0l0ZW0uaXNBbnlTcGVjKGl0ZW0pKSB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uLmZpbmQoZWwgPT4gZWwubmFtZSA9PT0gaXRlbS5uYW1lKSkge1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHVzZUNvQ0lEID09PSAwKSB7XG4gICAgICAgIHVzZUNvQ0lEID0gYXdhaXQgRHJvcENvQ0lELmNyZWF0ZSgpXG4gICAgICB9XG4gICAgICBjb2xsZWN0aW9uLnB1c2goRHJvcENvQ0lELnByb2Nlc3NJdGVtKHVzZUNvQ0lELCBpdGVtKSlcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZSh7IFtgc3lzdGVtLiR7Y29sbGVjdGlvbk5hbWV9YF06IGNvbGxlY3Rpb24gfSlcbiAgfVxuXG4gIGFzeW5jIF9vbkl0ZW1TdW1tYXJ5IChldmVudCwgY29sbGVjdGlvbk5hbWUgPSAnaXRlbXMnKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGxpID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5wYXJlbnRzKCcuaXRlbScpXG4gICAgY29uc3QgaXRlbSA9IHRoaXMuaXRlbS5zeXN0ZW1bY29sbGVjdGlvbk5hbWVdLmZpbmQocyA9PiB7XG4gICAgICByZXR1cm4gcy5faWQgPT09IGxpLmRhdGEoJ2l0ZW0taWQnKVxuICAgIH0pXG4gICAgaWYgKCFpdGVtKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgY2hhdERhdGEgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBpdGVtLnN5c3RlbS5kZXNjcmlwdGlvbi52YWx1ZSxcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHRoaXMuaXRlbS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIC8vIFRvZ2dsZSBzdW1tYXJ5XG4gICAgaWYgKGxpLmhhc0NsYXNzKCdleHBhbmRlZCcpKSB7XG4gICAgICBjb25zdCBzdW1tYXJ5ID0gbGkuY2hpbGRyZW4oJy5pdGVtLXN1bW1hcnknKVxuICAgICAgc3VtbWFyeS5zbGlkZVVwKDIwMCwgKCkgPT4gc3VtbWFyeS5yZW1vdmUoKSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGl2ID0gJChgPGRpdiBjbGFzcz1cIml0ZW0tc3VtbWFyeVwiPiR7Y2hhdERhdGF9PC9kaXY+YClcbiAgICAgIGNvbnN0IHByb3BzID0gJCgnPGRpdiBjbGFzcz1cIml0ZW0tcHJvcGVydGllc1wiPjwvZGl2PicpXG4gICAgICAvLyBmb3IgKGNvbnN0IHAgb2YgY2hhdERhdGEucHJvcGVydGllcykgeyBwcm9wcy5hcHBlbmQoYDxzcGFuIGNsYXNzPVwidGFnXCI+JHtwfTwvc3Bhbj5gKSB9XG4gICAgICBkaXYuYXBwZW5kKHByb3BzKVxuICAgICAgbGkuYXBwZW5kKGRpdi5oaWRlKCkpXG4gICAgICBkaXYuc2xpZGVEb3duKDIwMClcbiAgICB9XG4gICAgbGkudG9nZ2xlQ2xhc3MoJ2V4cGFuZGVkJylcbiAgfVxuXG4gIGFzeW5jIF9vbkl0ZW1EZWxldGUgKGV2ZW50LCBjb2xsZWN0aW9uTmFtZSA9ICdpdGVtcycpIHtcbiAgICBjb25zdCBpdGVtID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5jbG9zZXN0KCcuaXRlbScpXG4gICAgY29uc3QgaXRlbUlkID0gaXRlbS5kYXRhKCdpdGVtLWlkJylcbiAgICBjb25zdCBDb0NJZCA9IGl0ZW0uZGF0YSgnY29jaWQnKVxuICAgIGNvbnN0IGl0ZW1JbmRleCA9IHRoaXMuaXRlbS5zeXN0ZW1bY29sbGVjdGlvbk5hbWVdLmZpbmRJbmRleChpID0+IChpdGVtSWQgJiYgaS5faWQgPT09IGl0ZW1JZCkgfHwgKENvQ0lkICYmIGkgPT09IENvQ0lkKSlcbiAgICBpZiAoaXRlbUluZGV4ID4gLTEpIHtcbiAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSB0aGlzLml0ZW0uc3lzdGVtW2NvbGxlY3Rpb25OYW1lXSA/IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuaXRlbS5zeXN0ZW1bY29sbGVjdGlvbk5hbWVdKSA6IFtdXG4gICAgICBjb2xsZWN0aW9uLnNwbGljZShpdGVtSW5kZXgsIDEpXG4gICAgICBhd2FpdCB0aGlzLml0ZW0udXBkYXRlKHsgW2BzeXN0ZW0uJHtjb2xsZWN0aW9uTmFtZX1gXTogY29sbGVjdGlvbiB9KVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRPcHRpb25zLCB7XG4gICAgICBjbGFzc2VzOiBbJ2NvYzcnLCAnc2hlZXQnLCAnb2NjdXBhdGlvbiddLFxuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2l0ZW1zL2FyY2hldHlwZS5odG1sJyxcbiAgICAgIHdpZHRoOiA1MjAsXG4gICAgICBoZWlnaHQ6IDQ4MCxcbiAgICAgIGRyYWdEcm9wOiBbeyBkcmFnU2VsZWN0b3I6ICcuaXRlbScgfV0sXG4gICAgICBzY3JvbGxZOiBbJy50YWIuZGVzY3JpcHRpb24nXSxcbiAgICAgIHRhYnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hdlNlbGVjdG9yOiAnLnNoZWV0LW5hdmlnYXRpb24nLFxuICAgICAgICAgIGNvbnRlbnRTZWxlY3RvcjogJy5zaGVldC1ib2R5JyxcbiAgICAgICAgICBpbml0aWFsOiAnZGVzY3JpcHRpb24nXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KVxuICB9XG5cbiAgX2dldEhlYWRlckJ1dHRvbnMgKCkge1xuICAgIGNvbnN0IGhlYWRlckJ1dHRvbnMgPSBzdXBlci5fZ2V0SGVhZGVyQnV0dG9ucygpXG4gICAgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbihoZWFkZXJCdXR0b25zLCB0aGlzKVxuICAgIHJldHVybiBoZWFkZXJCdXR0b25zXG4gIH1cblxuICBhc3luYyBnZXREYXRhICgpIHtcbiAgICBjb25zdCBzaGVldERhdGEgPSBzdXBlci5nZXREYXRhKClcblxuICAgIHNoZWV0RGF0YS5oYXNPd25lciA9IHRoaXMuaXRlbS5pc0VtYmVkZGVkID09PSB0cnVlXG5cbiAgICBjb25zdCBjb3JlQ2hhcmFjdGVyaXN0aWNzID0gW11cbiAgICBmb3IgKGNvbnN0IFtrZXksIHNlbGVjdGVkXSBvZiBPYmplY3QuZW50cmllcyhcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5jb3JlQ2hhcmFjdGVyaXN0aWNzXG4gICAgKSkge1xuICAgICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICAgIGNvbnN0IGNoYXJhY05hbWUgPSBnYW1lLmkxOG4ubG9jYWxpemUoYENIQVJBQy4ke2tleS50b1VwcGVyQ2FzZSgpfWApXG4gICAgICAgIGNvcmVDaGFyYWN0ZXJpc3RpY3MucHVzaChjaGFyYWNOYW1lKVxuICAgICAgfVxuICAgIH1cblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZERlc2NyaXB0aW9uVmFsdWUgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24udmFsdWUsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICBzaGVldERhdGEuZW5yaWNoZWREZXNjcmlwdGlvbktlZXBlciA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5kZXNjcmlwdGlvbi5rZWVwZXIsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICBzaGVldERhdGEuZW5yaWNoZWRTdWdnZXN0ZWRPY2N1cGF0aW9ucyA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5zdWdnZXN0ZWRPY2N1cGF0aW9ucyxcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZFN1Z2dlc3RlZFRyYWl0cyA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5zdWdnZXN0ZWRUcmFpdHMsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uc2tpbGxzID0gYXdhaXQgZ2FtZS5zeXN0ZW0uYXBpLmNvY2lkLmV4cGFuZEl0ZW1BcnJheSh7IGl0ZW1MaXN0OiBzaGVldERhdGEuZGF0YS5zeXN0ZW0uc2tpbGxzIH0pXG4gICAgc2hlZXREYXRhLnNraWxsTGlzdEVtcHR5ID0gc2hlZXREYXRhLmRhdGEuc3lzdGVtLnNraWxscy5sZW5ndGggPT09IDBcblxuICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5za2lsbHMuc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG5cbiAgICBzaGVldERhdGEuY29yZUNoYXJhY3RlcmlzdGljc1N0cmluZyA9ICcnXG4gICAgY29uc3Qgb3JTdHJpbmcgPSBgICR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk9yJyl9IGBcbiAgICBpZiAoY29yZUNoYXJhY3RlcmlzdGljcy5sZW5ndGgpIHtcbiAgICAgIHNoZWV0RGF0YS5jb3JlQ2hhcmFjdGVyaXN0aWNzU3RyaW5nICs9IGNvcmVDaGFyYWN0ZXJpc3RpY3Muam9pbihvclN0cmluZylcbiAgICB9XG5cbiAgICBzaGVldERhdGEuaXRlbVByb3BlcnRpZXMgPSBbXVxuXG4gICAgc2hlZXREYXRhLml0ZW1Qcm9wZXJ0aWVzLnB1c2goXG4gICAgICBgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuUHVscFRhbGVudHMnKX06ICR7c2hlZXREYXRhLmRhdGEuc3lzdGVtLnRhbGVudHN9YFxuICAgIClcbiAgICBzaGVldERhdGEuaXRlbVByb3BlcnRpZXMucHVzaChcbiAgICAgIGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Cb251c1BvaW50cycpfTogJHtzaGVldERhdGEuZGF0YS5zeXN0ZW0uYm9udXNQb2ludHN9YFxuICAgIClcblxuICAgIHNoZWV0RGF0YS5pc0tlZXBlciA9IGdhbWUudXNlci5pc0dNXG4gICAgcmV0dXJuIHNoZWV0RGF0YVxuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgZm91bmRyeSwgZ2FtZSwgSXRlbVNoZWV0LCBUZXh0RWRpdG9yICovXG5pbXBvcnQgeyBhZGRDb0NJRFNoZWV0SGVhZGVyQnV0dG9uIH0gZnJvbSAnLi4vLi4vc2NyaXB0cy9jb2MtaWQtYnV0dG9uLmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy5qcydcblxuZXhwb3J0IGNsYXNzIENvQzdCb29rU2hlZXQgZXh0ZW5kcyBJdGVtU2hlZXQge1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zICgpIHtcbiAgICByZXR1cm4gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2l0ZW1zL2Jvb2svbWFpbi5odG1sJyxcbiAgICAgIGNsYXNzZXM6IFsnY29jNycsICdpdGVtJywgJ2Jvb2snXSxcbiAgICAgIHdpZHRoOiA1MDAsXG4gICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgIHJlc2l6YWJsZTogZmFsc2UsXG4gICAgICBkcmFnRHJvcDogW3sgZHJhZ1NlbGVjdG9yOiAnLnNwZWxscycsIGRyb3BTZWxlY3RvcjogbnVsbCB9XSxcbiAgICAgIHNjcm9sbFk6IFsnLmJvZHknXSxcbiAgICAgIHRhYnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hdlNlbGVjdG9yOiAnLm5hdmlnYXRpb24nLFxuICAgICAgICAgIGNvbnRlbnRTZWxlY3RvcjogJy5ib2R5JyxcbiAgICAgICAgICBpbml0aWFsOiAnZGVzY3JpcHRpb24nXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KVxuICB9XG5cbiAgX2dldEhlYWRlckJ1dHRvbnMgKCkge1xuICAgIGNvbnN0IGhlYWRlckJ1dHRvbnMgPSBzdXBlci5fZ2V0SGVhZGVyQnV0dG9ucygpXG4gICAgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbihoZWFkZXJCdXR0b25zLCB0aGlzKVxuICAgIHJldHVybiBoZWFkZXJCdXR0b25zXG4gIH1cblxuICBhc3luYyBnZXREYXRhICgpIHtcbiAgICBjb25zdCBzaGVldERhdGEgPSBzdXBlci5nZXREYXRhKClcbiAgICBzaGVldERhdGEuaW5pdGlhbFJlYWRpbmcgPSB0aGlzLml0ZW0uc3lzdGVtLmluaXRpYWxSZWFkaW5nXG4gICAgc2hlZXREYXRhLmlzS2VlcGVyID0gZ2FtZS51c2VyLmlzR01cbiAgICBzaGVldERhdGEuaXNPd25lciA9IHRoaXMuaXRlbS5pc093bmVyXG4gICAgc2hlZXREYXRhLnNwZWxsc0xlYXJuZWQgPSB0aGlzLnNwZWxsc0xlYXJuZWRcbiAgICBzaGVldERhdGEuZXhoYXVzdGVkID0gKGF3YWl0IHRoaXMuaXRlbS5jaGVja0V4aGF1c3Rpb24oKSkgIT09IGZhbHNlXG4gICAgc2hlZXREYXRhLnN0dWR5Q29tcGxldGVkID0gdGhpcy5pdGVtLnN5c3RlbS5zdHVkeS5wcm9ncmVzcyA9PT0gdGhpcy5pdGVtLnN5c3RlbS5zdHVkeS5uZWNlc3NhcnlcbiAgICBzaGVldERhdGEuaGFzT3duZXIgPSB0aGlzLml0ZW0uaXNFbWJlZGRlZCA9PT0gdHJ1ZVxuICAgIHNoZWV0RGF0YS5zcGVsbExpc3RFbXB0eSA9IHRoaXMuaXRlbS5zeXN0ZW0uc3BlbGxzLmxlbmd0aCA9PT0gMFxuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25WYWx1ZSA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5kZXNjcmlwdGlvbi52YWx1ZSxcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZERlc2NyaXB0aW9uS2VlcGVyID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmRlc2NyaXB0aW9uLmtlZXBlcixcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZENvbnRlbnQgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uY29udGVudCxcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIHJldHVybiBzaGVldERhdGFcbiAgfVxuXG4gIGdldCBzcGVsbHNMZWFybmVkICgpIHtcbiAgICBsZXQgYW1vdW50ID0gMFxuICAgIGNvbnN0IHNwZWxscyA9IHRoaXMuaXRlbS5zeXN0ZW0uc3BlbGxzXG4gICAgZm9yIChjb25zdCBzcGVsbCBvZiBzcGVsbHMpIHtcbiAgICAgIGlmIChzcGVsbC5zeXN0ZW0ubGVhcm5lZCkgYW1vdW50KytcbiAgICB9XG4gICAgcmV0dXJuIGAke2Ftb3VudH0gLyAke3NwZWxscy5sZW5ndGh9YFxuICB9XG5cbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuICAgIGh0bWwuZmluZCgnI2F0dGVtcHQtaW5pdGlhbC1yZWFkaW5nJykuY2xpY2soZXZlbnQgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgdGhpcy5pdGVtLmF0dGVtcHRJbml0aWFsUmVhZGluZygpXG4gICAgfSlcbiAgICBodG1sLmZpbmQoJy5kZWxldGUtc3BlbGwnKS5jbGljayhldmVudCA9PiB0aGlzLl9vbkRlbGV0ZShldmVudCkpXG4gICAgaHRtbC5maW5kKCcuZWRpdC1zcGVsbCcpLmNsaWNrKGV2ZW50ID0+IHRoaXMuX29uU3BlbGxEZXRhaWwoZXZlbnQpKVxuICAgIGh0bWwuZmluZCgnLnNwZWxsLW5hbWUnKS5jbGljayhldmVudCA9PiB0aGlzLl9vblNwZWxsRGV0YWlsKGV2ZW50KSlcbiAgICBodG1sLmZpbmQoJy50ZWFjaC1zcGVsbCcpLmNsaWNrKGV2ZW50ID0+IHtcbiAgICAgIGNvbnN0IGlkID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5wYXJlbnRzKCdsaScpLmRhdGEoJ2lkJylcbiAgICAgIHRoaXMuaXRlbS5hdHRlbXB0U3BlbGxMZWFybmluZyhpZClcbiAgICB9KVxuICAgIGh0bWwuZmluZCgnW25hbWU9XCJzeXN0ZW0uc3R1ZHkubmVjZXNzYXJ5XCJdJykuY2hhbmdlKGV2ZW50ID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gcGFyc2VJbnQoZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZSlcbiAgICAgIHRoaXMuaXRlbS5jaGFuZ2VQcm9ncmVzcygncmVzZXQnLCB2YWx1ZSlcbiAgICB9KVxuICAgIGh0bWwuZmluZCgnI2luY3JlYXNlLXByb2dyZXNzJykuY2xpY2soKCkgPT4ge1xuICAgICAgdGhpcy5pdGVtLmNoYW5nZVByb2dyZXNzKCdpbmNyZWFzZScpXG4gICAgfSlcbiAgICBodG1sLmZpbmQoJyNkZWNyZWFzZS1wcm9ncmVzcycpLmNsaWNrKCgpID0+IHtcbiAgICAgIHRoaXMuaXRlbS5jaGFuZ2VQcm9ncmVzcygnZGVjcmVhc2UnKVxuICAgIH0pXG4gICAgaHRtbC5maW5kKCcuYWRkLW90aGVyLWdhaW5zJykuY2xpY2soZXZlbnQgPT4ge1xuICAgICAgdGhpcy5tb2RpZnlPdGhlcnNHYWlucyhldmVudCwgJ2FkZCcpXG4gICAgfSlcbiAgICBodG1sLmZpbmQoJy5jaGFuZ2Utb3RoZXItZ2FpbnMnKS5jaGFuZ2UoZXZlbnQgPT4ge1xuICAgICAgdGhpcy5tb2RpZnlPdGhlcnNHYWlucyhldmVudCwgJ2NoYW5nZScpXG4gICAgfSlcbiAgICBodG1sLmZpbmQoJyNyZWRvLWZ1bGwtc3R1ZHknKS5jbGljaygoKSA9PiB7XG4gICAgICB0aGlzLml0ZW0ucmVkb0Z1bGxTdHVkeSgpXG4gICAgfSlcbiAgICBodG1sLmZpbmQoJy5yZW1vdmUtb3RoZXItZ2FpbnMnKS5jbGljayhldmVudCA9PiB7XG4gICAgICB0aGlzLm1vZGlmeU90aGVyc0dhaW5zKGV2ZW50LCAncmVtb3ZlJylcbiAgICB9KVxuICAgIGh0bWwuZmluZCgnLm9wdGlvbicpLmNsaWNrKGV2ZW50ID0+IHRoaXMubW9kaWZ5VHlwZShldmVudCkpXG4gIH1cblxuICBhc3luYyBfb25TcGVsbERldGFpbCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgZWxlbWVudCA9ICQoZXZlbnQuY3VycmVudFRhcmdldClcbiAgICAvKiogQHNlZSBkYXRhLWluZGV4IHByb3BlcnR5IG9uIHRlbXBsYXRlICovXG4gICAgY29uc3QgaW5kZXggPSBlbGVtZW50LnBhcmVudHMoJ2xpJykuZGF0YSgnaW5kZXgnKVxuICAgIHJldHVybiBhd2FpdCB0aGlzLml0ZW0uc3BlbGxEZXRhaWwoaW5kZXgpXG4gIH1cblxuICAvKipcbiAgICogSXQgaXMgY2FsbGVkIGV2ZXJ5IHRpbWUgdGhlIHVzZXIgZGVsZXRlIGEgc3BlbGwgb24gdGhlIHNoZWV0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBldmVudCBAc2VlIGFjdGl2YXRlTGlzdGVuZXJzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlLjxEb2N1bWVudD59IHVwZGF0ZSB0byBJdGVtIGRvY3VtZW50XG4gICAqL1xuICBhc3luYyBfb25EZWxldGUgKGV2ZW50KSB7XG4gICAgaWYgKCFnYW1lLnVzZXIuaXNHTSkgcmV0dXJuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGVsZW1lbnQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpXG4gICAgLyoqIEBzZWUgZGF0YS1pbmRleCBwcm9wZXJ0eSBvbiB0ZW1wbGF0ZSAqL1xuICAgIGNvbnN0IGluZGV4ID0gZWxlbWVudC5wYXJlbnRzKCdsaScpLmRhdGEoJ2luZGV4JylcbiAgICAvKiogQWx3YXlzIGhhcyB0byBiZSBAdHlwZSB7QXJyYXl9ICovXG4gICAgY29uc3Qgc3BlbGxzID0gdGhpcy5pdGVtLnN5c3RlbS5zcGVsbHNcbiAgICAgID8gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5pdGVtLnN5c3RlbS5zcGVsbHMpXG4gICAgICA6IFtdXG4gICAgaWYgKGluZGV4ID49IDApIHNwZWxscy5zcGxpY2UoaW5kZXgsIDEpXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuaXRlbS51cGRhdGUoeyAnc3lzdGVtLnNwZWxscyc6IHNwZWxscyB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEl0IGlzIGNhbGxlZCBldmVyeSB0aW1lIHRoZSB1c2VyIGRyYWdzIGFuIGl0ZW0gdG8gdGhlIHNoZWV0XG4gICAqIEZpbHRlcnMgb25seSAnc3BlbGwnIGl0ZW1zIGFuZCBpbnNlcnRzIHRoZW0gaW4gYSBAdHlwZSB7QXJyYXl9XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBldmVudCBAc2VlIGFjdGl2YXRlTGlzdGVuZXJzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlLjxEb2N1bWVudD59IHVwZGF0ZSB0byBJdGVtIGRvY3VtZW50XG4gICAqL1xuICBhc3luYyBfb25Ecm9wIChldmVudCwgdHlwZSA9ICdzcGVsbCcpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgLyoqIFByZXZlbnRzIHByb3BhZ2F0aW9uIG9mIHRoZSBzYW1lIGV2ZW50IGZyb20gYmVpbmcgY2FsbGVkICovXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcblxuICAgIGNvbnN0IGRhdGFMaXN0ID0gYXdhaXQgQ29DN1V0aWxpdGllcy5nZXREYXRhRnJvbURyb3BFdmVudChldmVudCwgJ0l0ZW0nKVxuXG4gICAgY29uc3Qgc3BlbGxzID0gW11cbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgZGF0YUxpc3QpIHtcbiAgICAgIGlmICghaXRlbSB8fCAhWydza2lsbCcsICdzcGVsbCddLmluY2x1ZGVzKGl0ZW0udHlwZSkpIGNvbnRpbnVlXG4gICAgICBpZiAoaXRlbS50eXBlID09PSAnc3BlbGwnKSB7XG4gICAgICAgIHNwZWxscy5wdXNoKGl0ZW0pXG4gICAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ3NraWxsJyAmJiB0aGlzLml0ZW0uc3lzdGVtLnR5cGUub3RoZXIpIHtcbiAgICAgICAgdGhpcy5tb2RpZnlPdGhlcnNHYWlucyhudWxsLCAnYWRkJywgeyBuYW1lOiBpdGVtLm5hbWUgfSlcbiAgICAgIH1cbiAgICB9XG4gICAgYXdhaXQgdGhpcy5pdGVtLmFkZFNwZWxscyhzcGVsbHMpXG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlIHRoZSBjaGVja2JveGVzIGZvciB0eXBlIHdoZW4gdXNlciBjbGlja3Mgb24gdGhlIGNvcnJlc3BvbmRpbmdcbiAgICogbGFiZWwsIG5vdCBzdXJlIGlmIHRoaXMgd29ya3Mgb24gZW5naW5lcyBvdGhlciB0aGFuIFY4XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBldmVudCBAc2VlIGFjdGl2YXRlTGlzdGVuZXJzXG4gICAqIEByZXR1cm5zIHtqUXVlcnkuRXZlbnR9IGNsaWNrXG4gICAqL1xuICBtb2RpZnlUeXBlIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAvKiogUHJldmVudHMgcHJvcGFnYXRpb24gb2YgdGhlIHNhbWUgZXZlbnQgZnJvbSBiZWluZyBjYWxsZWQgKi9cbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgIGNvbnN0IHRvZ2dsZVN3aXRjaCA9ICQoZXZlbnQuY3VycmVudFRhcmdldClcbiAgICByZXR1cm4gdG9nZ2xlU3dpdGNoLnByZXYoKS50cmlnZ2VyKCdjbGljaycpXG4gIH1cblxuICAvKipcbiAgICogTW9kaWZ5IEl0ZW0gZGF0YSBiYXNlZCBvbiB1c2VyIGludGVyYWN0aW9ucyB3aXRoIHRoZSBvdGhlciBza2lsbFxuICAgKiBnYWlucyB0YWJsZSBvbiBkZXRhaWxzIHRhYiBvbiB0aGlzIHNoZWV0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBldmVudCBAc2VlIGFjdGl2YXRlTGlzdGVuZXJzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlICdhZGQnIHx8ICdjaGFuZ2UnIHx8ICdyZW1vdmUnXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPERvY3VtZW50Pn0gdXBkYXRlIHRvIEl0ZW0gZG9jdW1lbnRcbiAgICovXG4gIGFzeW5jIG1vZGlmeU90aGVyc0dhaW5zIChldmVudCwgbW9kZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgLyoqIE5vIG5lZWQgdG8gY2hlY2sgaWYgdXNlciBpcyBHTSBiZWNhdXNlIG9ubHkgdGhleSBjYW4gc2VlIGRldGFpbHMgdGFiICovXG4gICAgbGV0IGluZGV4ID0gbnVsbFxuICAgIGxldCBlbGVtZW50ID0gbnVsbFxuICAgIGlmIChldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgZWxlbWVudCA9ICQoZXZlbnQuY3VycmVudFRhcmdldClcbiAgICAgIC8qKiBAc2VlIGRhdGEtaW5kZXggcHJvcGVydHkgb24gdGVtcGxhdGUgKi9cbiAgICAgIGluZGV4ID0gZWxlbWVudC5wYXJlbnRzKCd0cicpLmRhdGEoJ2luZGV4JylcbiAgICAgIC8qKiBBbHdheXMgaGFzIHRvIGJlIEB0eXBlIHtBcnJheX0gKi9cbiAgICB9XG4gICAgY29uc3Qgc2tpbGxzID0gdGhpcy5pdGVtLnN5c3RlbS5nYWlucy5vdGhlcnNcbiAgICAgID8gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5pdGVtLnN5c3RlbS5nYWlucy5vdGhlcnMpXG4gICAgICA6IFtdXG4gICAgc3dpdGNoIChtb2RlKSB7XG4gICAgICBjYXNlICdhZGQnOlxuICAgICAgICAvKiogVXNlciBjbGlja2VkIG9uIHBsdXMgaWNvbiB0byBhZGQgYSBuZXcgc2tpbGwgb24gb3RoZXIgZ2FpbnMgdGFibGUgKi9cbiAgICAgICAgc2tpbGxzLnB1c2goe1xuICAgICAgICAgIC8qKiBuZXcgc2tpbGwgKi9cbiAgICAgICAgICBuYW1lOiBvcHRpb25zLm5hbWUgfHwgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk5ld1NraWxsTmFtZScpLFxuICAgICAgICAgIC8qKiBkZXZlbG9wbWVudCBieSBkZWZhdWx0LCB2YWx1ZSBjYW4gYWxzbyBiZSAxZDYgb3IgMWQxMCAqL1xuICAgICAgICAgIHZhbHVlOiAnZGV2ZWxvcG1lbnQnXG4gICAgICAgIH0pXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdjaGFuZ2UnOlxuICAgICAgICAvKiogVXNlciBjaGFuZ2VkIG5hbWUgKGlucHV0KSBvciB2YWx1ZSAoc2VsZWN0KSBvZiBhIHNraWxsIG9uIHRhYmxlICovXG4gICAgICAgIHNraWxsc1tpbmRleF0gPSB7XG4gICAgICAgICAgbmFtZTogZWxlbWVudC5pcygnaW5wdXQnKSA/IGVsZW1lbnQudmFsKCkgOiBza2lsbHNbaW5kZXhdLm5hbWUsXG4gICAgICAgICAgdmFsdWU6IGVsZW1lbnQuaXMoJ3NlbGVjdCcpID8gZWxlbWVudC52YWwoKSA6IHNraWxsc1tpbmRleF0udmFsdWVcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAncmVtb3ZlJzpcbiAgICAgICAgLyoqIFVzZXIgY2xpY2tlZCBvbiBtaW51cyBpY29uIHRvIHJlbW92ZSBhIHNraWxsIG9uIG90aGVyIGdhaW5zIHRhYmxlICovXG4gICAgICAgIGlmIChpbmRleCA+PSAwKSBza2lsbHMuc3BsaWNlKGluZGV4LCAxKVxuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZSh7ICdzeXN0ZW0uZ2FpbnMub3RoZXJzJzogc2tpbGxzIH0pXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCAkLCBBY3RvclNoZWV0LCBDT05TVCwgRGlhbG9nLCBGb3JtRGF0YSwgZm91bmRyeSwgZ2FtZSwgVGV4dEVkaXRvciAqL1xuaW1wb3J0IHsgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbiB9IGZyb20gJy4uLy4uL3NjcmlwdHMvY29jLWlkLWJ1dHRvbi5qcydcbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMuanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3Q29udGFpbmVyU2hlZXQgZXh0ZW5kcyBBY3RvclNoZWV0IHtcbiAgLyoqXG4gICAqIEV4dGVuZCBhbmQgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgb3B0aW9ucyB1c2VkIGJ5IHRoZSA1ZSBBY3RvciBTaGVldFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc3VwZXIuZGVmYXVsdE9wdGlvbnMsIHtcbiAgICAgIGNsYXNzZXM6IFsnY29jNycsICdzaGVldCcsICdhY3RvcicsICdzdG9yYWdlJ10sXG4gICAgICB0ZW1wbGF0ZTogJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYWN0b3JzL3N0b3JhZ2Utc2hlZXQuaHRtbCcsXG4gICAgICB3aWR0aDogNjcyLFxuICAgICAgaGVpZ2h0OiA3NjUsXG4gICAgICBkcmFnRHJvcDogW3sgZHJhZ1NlbGVjdG9yOiAnLml0ZW0nLCBkcm9wU2VsZWN0b3I6IG51bGwgfV0sXG4gICAgICB0YWJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYXZTZWxlY3RvcjogJy5zaGVldC1uYXYnLFxuICAgICAgICAgIGNvbnRlbnRTZWxlY3RvcjogJy5zaGVldC1ib2R5JyxcbiAgICAgICAgICBpbml0aWFsOiAnaXRlbXMnXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgX29uRHJvcCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcblxuICAgIGNvbnN0IGRhdGFMaXN0ID0gYXdhaXQgQ29DN1V0aWxpdGllcy5nZXREYXRhRnJvbURyb3BFdmVudChldmVudCwgJ0l0ZW0nKVxuICAgIGlmICghdGhpcy5vcHRpb25zLmVkaXRhYmxlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLmFjdG9yLml0ZW1zLnRvT2JqZWN0KCkgfHwgW11cbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgZGF0YUxpc3QpIHtcbiAgICAgIGlmICghaXRlbSB8fCAhaXRlbS5zeXN0ZW0pIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cbiAgICAgIGlmICghWydib29rJywgJ2l0ZW0nLCAnc3BlbGwnLCAnd2VhcG9uJ10uaW5jbHVkZXMoaXRlbS50eXBlKSkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgICAgaXRlbXMucHVzaChpdGVtLnRvT2JqZWN0KCkpXG4gICAgfVxuICAgIGF3YWl0IHRoaXMuYWN0b3IudXBkYXRlKHsgaXRlbXMgfSlcbiAgfVxuXG4gIG9uQ2xvc2VTaGVldCAoKSB7fVxuXG4gIF9nZXRIZWFkZXJCdXR0b25zICgpIHtcbiAgICBjb25zdCBoZWFkZXJCdXR0b25zID0gc3VwZXIuX2dldEhlYWRlckJ1dHRvbnMoKVxuICAgIGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24oaGVhZGVyQnV0dG9ucywgdGhpcylcbiAgICByZXR1cm4gaGVhZGVyQnV0dG9uc1xuICB9XG5cbiAgYXN5bmMgZ2V0RGF0YSAoKSB7XG4gICAgY29uc3Qgc2hlZXREYXRhID0gYXdhaXQgc3VwZXIuZ2V0RGF0YSgpXG5cbiAgICBzaGVldERhdGEuaXNLZWVwZXIgPSBnYW1lLnVzZXIuaXNHTVxuICAgIHNoZWV0RGF0YS5lZGl0YWJsZSA9IHRoaXMuaXNFZGl0YWJsZVxuXG4gICAgc2hlZXREYXRhLml0ZW1zQnlUeXBlID0ge31cbiAgICBpZiAoc2hlZXREYXRhLml0ZW1zKSB7XG4gICAgICBmb3IgKGNvbnN0IGl0ZW0gb2Ygc2hlZXREYXRhLml0ZW1zKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFxuICAgICAgICAgICAgc2hlZXREYXRhLml0ZW1zQnlUeXBlLFxuICAgICAgICAgICAgaXRlbS50eXBlXG4gICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICBzaGVldERhdGEuaXRlbXNCeVR5cGVbaXRlbS50eXBlXSA9IFtdXG4gICAgICAgIH1cbiAgICAgICAgc2hlZXREYXRhLml0ZW1zQnlUeXBlW2l0ZW0udHlwZV0ucHVzaChpdGVtKVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBpdGVtVHlwZSBpbiBzaGVldERhdGEuaXRlbXNCeVR5cGUpIHtcbiAgICAgICAgc2hlZXREYXRhLml0ZW1zQnlUeXBlW2l0ZW1UeXBlXS5zb3J0KENvQzdVdGlsaXRpZXMuc29ydEJ5TmFtZUtleSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzaGVldERhdGEuYWxsb3dVbmxvY2sgPVxuICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAncGxheWVyVW5sb2NrU2hlZXRNb2RlJykgPT09ICdhbHdheXMnIHx8XG4gICAgICBnYW1lLnVzZXIuaXNHTVxuXG4gICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlJdGVtcyA9XG4gICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc2hlZXREYXRhLml0ZW1zQnlUeXBlLCAnaXRlbScpIHx8XG4gICAgICAhc2hlZXREYXRhLmRhdGEuc3lzdGVtLmZsYWdzLmxvY2tlZFxuICAgIHNoZWV0RGF0YS5zaG93SW52ZW50b3J5Qm9va3MgPVxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNoZWV0RGF0YS5pdGVtc0J5VHlwZSwgJ2Jvb2snKSB8fFxuICAgICAgIXNoZWV0RGF0YS5kYXRhLnN5c3RlbS5mbGFncy5sb2NrZWRcbiAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeVNwZWxscyA9XG4gICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc2hlZXREYXRhLml0ZW1zQnlUeXBlLCAnc3BlbGwnKSB8fFxuICAgICAgIXNoZWV0RGF0YS5kYXRhLnN5c3RlbS5mbGFncy5sb2NrZWRcbiAgICBzaGVldERhdGEuc2hvd0ludmVudG9yeVRhbGVudHMgPVxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNoZWV0RGF0YS5pdGVtc0J5VHlwZSwgJ3RhbGVudCcpIHx8XG4gICAgICAoIXNoZWV0RGF0YS5kYXRhLnN5c3RlbS5mbGFncy5sb2NrZWQgJiZcbiAgICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAncHVscFJ1bGVUYWxlbnRzJykpXG4gICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlXZWFwb25zID1cbiAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzaGVldERhdGEuaXRlbXNCeVR5cGUsICd3ZWFwb24nKSB8fFxuICAgICAgIXNoZWV0RGF0YS5kYXRhLnN5c3RlbS5mbGFncy5sb2NrZWRcblxuICAgIHNoZWV0RGF0YS5oYXNJbnZlbnRvcnkgPVxuICAgICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlJdGVtcyB8fFxuICAgICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlCb29rcyB8fFxuICAgICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlTcGVsbHMgfHxcbiAgICAgIHNoZWV0RGF0YS5zaG93SW52ZW50b3J5VGFsZW50cyB8fFxuICAgICAgc2hlZXREYXRhLnNob3dJbnZlbnRvcnlXZWFwb25zXG5cbiAgICBzaGVldERhdGEuZW5yaWNoZWREZXNjcmlwdGlvblZhbHVlID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmRlc2NyaXB0aW9uLnZhbHVlLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25LZWVwZXIgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24ua2VlcGVyLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgcmV0dXJuIHNoZWV0RGF0YVxuICB9XG5cbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuXG4gICAgaHRtbC5maW5kKCcuaXRlbS1lZGl0JykuY2xpY2soZXYgPT4ge1xuICAgICAgY29uc3QgbGkgPSAkKGV2LmN1cnJlbnRUYXJnZXQpLnBhcmVudHMoJy5pdGVtJylcbiAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmFjdG9yLml0ZW1zLmdldChsaS5kYXRhKCdpdGVtSWQnKSlcbiAgICAgIGl0ZW0uc2hlZXQucmVuZGVyKHRydWUpXG4gICAgfSlcblxuICAgIGh0bWwuZmluZCgnLmludmVudG9yeS1oZWFkZXInKS5jbGljayh0aGlzLl9vbkludmVudG9yeUhlYWRlci5iaW5kKHRoaXMpKVxuXG4gICAgaHRtbC5maW5kKCcuaXRlbS10cmFkZScpLmNsaWNrKHRoaXMuX29uVHJhZGVJdGVtLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCcuc2hvdy1kZXRhaWwnKS5jbGljayh0aGlzLl9vbkl0ZW1TdW1tYXJ5LmJpbmQodGhpcykpXG5cbiAgICBodG1sLmZpbmQoJy5pdGVtLWRlbGV0ZScpLmNsaWNrKGFzeW5jIGV2ID0+IHtcbiAgICAgIGNvbnN0IGxpID0gJChldi5jdXJyZW50VGFyZ2V0KS5wYXJlbnRzKCcuaXRlbScpXG4gICAgICBjb25zdCBpdGVtVG9EZWxldGUgPSB0aGlzLmFjdG9yLml0ZW1zLmdldChsaS5kYXRhKCdpdGVtSWQnKSwge1xuICAgICAgICBzdHJpY3Q6IHRydWVcbiAgICAgIH0pXG4gICAgICBhd2FpdCBpdGVtVG9EZWxldGUuZGVsZXRlKClcbiAgICAgIGxpLnNsaWRlVXAoMjAwLCAoKSA9PiB0aGlzLnJlbmRlcihmYWxzZSkpXG4gICAgfSlcblxuICAgIGh0bWwuZmluZCgnLmFkZC1pdGVtJykuY2xpY2soZXYgPT4ge1xuICAgICAgc3dpdGNoIChldi5jdXJyZW50VGFyZ2V0LmRhdGFzZXQudHlwZSkge1xuICAgICAgICBjYXNlICdib29rJzpcbiAgICAgICAgICB0aGlzLmFjdG9yLmNyZWF0ZUVtcHR5Qm9vayhldilcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdpdGVtJzpcbiAgICAgICAgICB0aGlzLmFjdG9yLmNyZWF0ZUVtcHR5SXRlbShldilcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdza2lsbCc6XG4gICAgICAgICAgdGhpcy5hY3Rvci5jcmVhdGVFbXB0eVNraWxsKGV2KVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ3NwZWxsJzpcbiAgICAgICAgICB0aGlzLmFjdG9yLmNyZWF0ZUVtcHR5U3BlbGwoZXYpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnd2VhcG9uJzpcbiAgICAgICAgICB0aGlzLmFjdG9yLmNyZWF0ZUVtcHR5V2VhcG9uKGV2KVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfSlcblxuICAgIGh0bWwuZmluZCgnLmxvY2snKS5jbGljayh0aGlzLl9vbkxvY2tDbGlja2VkLmJpbmQodGhpcykpXG4gIH1cblxuICBhc3luYyBfb25Mb2NrQ2xpY2tlZCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgaXNMb2NrZWQgPSB0aGlzLmFjdG9yLmxvY2tlZFxuICAgIHRoaXMuYWN0b3IubG9ja2VkID0gIWlzTG9ja2VkXG4gIH1cblxuICBhc3luYyBfb25UcmFkZUl0ZW0gKGV2ZW50KSB7XG4gICAgY29uc3QgbGkgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnBhcmVudHMoJy5pdGVtJylcbiAgICBjb25zdCBpdGVtID0gdGhpcy5hY3Rvci5pdGVtcy5nZXQobGkuZGF0YSgnaXRlbUlkJykpXG4gICAgbGV0IGNvbnRlbnQgPSAnPHA+JyArIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5NZXNzYWdlU2VsZWN0VXNlclRvR2l2ZVRvJylcbiAgICBjb25zdCBtZXNzYWdlID0ge1xuICAgICAgYWN0b3JGcm9tOiB0aGlzLmFjdG9yLmlkLFxuICAgICAgc2NlbmU6IG51bGwsXG4gICAgICBhY3RvclRvOiB0aGlzLmFjdG9yLmlkLFxuICAgICAgaXRlbTogaXRlbS5pZFxuICAgIH1cbiAgICBpZiAodGhpcy50b2tlbj8uYWN0b3IpIHtcbiAgICAgIG1lc3NhZ2UuYWN0b3JGcm9tID0gdGhpcy50b2tlbi5pZFxuICAgICAgbWVzc2FnZS5zY2VuZSA9IHRoaXMudG9rZW4ucGFyZW50LmlkXG4gICAgfVxuICAgIGNvbnN0IGFjdG9ycyA9IGdhbWUuYWN0b3JzLmZpbHRlcihlID0+IHtcbiAgICAgIGlmICghWydjaGFyYWN0ZXInLCAnbnBjJywgJ2NyZWF0dXJlJywgJ2NvbnRhaW5lciddLmluY2x1ZGVzKGUudHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5hY3Rvci5pZCA9PT0gZS5pZCkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIGxldCB2aXNpYmxlID0gZmFsc2VcbiAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGUub3duZXJzaGlwKSkge1xuICAgICAgICBpZiAoayA9PT0gJ2RlZmF1bHQnIHx8IGsgPT09IGdhbWUudXNlci5pZCkge1xuICAgICAgICAgIHZpc2libGUgPVxuICAgICAgICAgICAgdmlzaWJsZSB8fFxuICAgICAgICAgICAgdiAhPT0gQ09OU1QuRE9DVU1FTlRfT1dORVJTSElQX0xFVkVMUy5OT05FXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2aXNpYmxlXG4gICAgfSlcbiAgICBjb250ZW50ID0gY29udGVudCArICc8Zm9ybSBpZD1cInNlbGVjdGZvcm1cIj48c2VsZWN0IG5hbWU9XCJ1c2VyXCI+J1xuICAgIGZvciAoY29uc3QgYWN0b3Igb2YgYWN0b3JzKSB7XG4gICAgICBjb250ZW50ID1cbiAgICAgICAgY29udGVudCArICc8b3B0aW9uIHZhbHVlPVwiJyArIGFjdG9yLmlkICsgJ1wiPicgKyBhY3Rvci5uYW1lICsgJzwvb3B0aW9uPidcbiAgICB9XG4gICAgY29udGVudCA9IGNvbnRlbnQgKyAnPC9zZWxlY3Q+PC9mb3JtPjwvcD4nXG4gICAgYXdhaXQgRGlhbG9nLnByb21wdCh7XG4gICAgICB0aXRsZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3Lk1lc3NhZ2VUaXRsZVNlbGVjdFVzZXJUb0dpdmVUbycpLFxuICAgICAgY29udGVudCxcbiAgICAgIGNhbGxiYWNrOiBodG1sID0+IHtcbiAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoaHRtbFswXS5xdWVyeVNlbGVjdG9yKCcjc2VsZWN0Zm9ybScpKVxuICAgICAgICBmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgZm9ybURhdGEpIHtcbiAgICAgICAgICBpZiAobmFtZSA9PT0gJ3VzZXInKSB7XG4gICAgICAgICAgICBtZXNzYWdlLmFjdG9yVG8gPSB2YWx1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgYXdhaXQgZ2FtZS5Db0M3c29ja2V0LmV4ZWN1dGVBc0dNKCdnbXRyYWRlaXRlbXRvJywgbWVzc2FnZSlcbiAgfVxuXG4gIGFzeW5jIF9vbkl0ZW1TdW1tYXJ5IChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBsaSA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50cygnLml0ZW0nKVxuICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmFjdG9yLml0ZW1zLmdldChsaS5kYXRhKCdpdGVtLWlkJykpXG4gICAgY29uc3QgY2hhdERhdGEgPSBhd2FpdCBpdGVtLmdldENoYXREYXRhKHsgc2VjcmV0czogdGhpcy5hY3Rvci5pc093bmVyIH0pXG5cbiAgICAvLyBUb2dnbGUgc3VtbWFyeVxuICAgIGlmIChsaS5oYXNDbGFzcygnZXhwYW5kZWQnKSkge1xuICAgICAgY29uc3Qgc3VtbWFyeSA9IGxpLmNoaWxkcmVuKCcuaXRlbS1zdW1tYXJ5JylcbiAgICAgIHN1bW1hcnkuc2xpZGVVcCgyMDAsICgpID0+IHN1bW1hcnkucmVtb3ZlKCkpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRpdiA9ICQoJzxkaXYgY2xhc3M9XCJpdGVtLXN1bW1hcnlcIj48L2Rpdj4nKVxuXG4gICAgICBjb25zdCBsYWJlbHMgPSAkKCc8ZGl2IGNsYXNzPVwiaXRlbS1sYWJlbHNcIj48L2Rpdj4nKVxuICAgICAgZm9yIChjb25zdCBwIG9mIGNoYXREYXRhLmxhYmVscykge1xuICAgICAgICBsYWJlbHMuYXBwZW5kKFxuICAgICAgICAgIGA8ZGl2IGNsYXNzPVwiaXRlbS1sYWJlbFwiPjxzcGFuIGNsYXNzPVwibGFiZWwtbmFtZVwiPiR7cC5uYW1lfSA6PC9zcGFuPjxzcGFuIGNsYXNzPVwibGFiZWwtdmFsdWVcIj4ke3AudmFsdWV9PC9zcGFuPjwvZGl2PmBcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgZGl2LmFwcGVuZChsYWJlbHMpXG5cbiAgICAgIGRpdi5hcHBlbmQoXG4gICAgICAgICQoYDxkaXYgY2xhc3M9XCJpdGVtLWRlc2NyaXB0aW9uXCI+JHtjaGF0RGF0YS5kZXNjcmlwdGlvbi52YWx1ZX08L2Rpdj5gKVxuICAgICAgKVxuICAgICAgaWYgKGl0ZW0uc3lzdGVtLnByb3BlcnRpZXM/LnNwY2wpIHtcbiAgICAgICAgY29uc3Qgc3BlY2lhbERpdiA9ICQoXG4gICAgICAgICAgYDxkaXYgY2xhc3M9XCJpdGVtLXNwZWNpYWxcIj4ke2NoYXREYXRhLmRlc2NyaXB0aW9uLnNwZWNpYWx9PC9kaXY+YFxuICAgICAgICApXG4gICAgICAgIGRpdi5hcHBlbmQoc3BlY2lhbERpdilcbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJvcHMgPSAkKCc8ZGl2IGNsYXNzPVwiaXRlbS1wcm9wZXJ0aWVzXCI+PC9kaXY+JylcbiAgICAgIGZvciAoY29uc3QgcCBvZiBjaGF0RGF0YS5wcm9wZXJ0aWVzKSB7XG4gICAgICAgIHByb3BzLmFwcGVuZChcbiAgICAgICAgICBgPGRpdiBjbGFzcz1cInRhZyBpdGVtLXByb3BlcnR5XCI+JHtnYW1lLmkxOG4ubG9jYWxpemUocCl9PC9kaXY+YFxuICAgICAgICApXG4gICAgICB9XG4gICAgICBkaXYuYXBwZW5kKHByb3BzKVxuXG4gICAgICBsaS5hcHBlbmQoZGl2LmhpZGUoKSlcbiAgICAgIGRpdi5zbGlkZURvd24oMjAwKVxuICAgIH1cbiAgICBsaS50b2dnbGVDbGFzcygnZXhwYW5kZWQnKVxuICAgIC8vICQoZXZlbnQuY3VycmVudFRhcmdldCkudG9nZ2xlQ2xhc3MoJ2V4cGFuZGVkJyk7XG4gIH1cblxuICBfb25JbnZlbnRvcnlIZWFkZXIgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICQoZXZlbnQuY3VycmVudFRhcmdldCkuc2libGluZ3MoJ2xpJykuc2xpZGVUb2dnbGUoMjAwKVxuICB9XG59XG4iLCIvKiBnbG9iYWwgRHJhZ0Ryb3AsIEZvcm1BcHBsaWNhdGlvbiwgZm91bmRyeSwgZ2FtZSwgdWkgKi9cbmltcG9ydCB7IENvQ0FjdG9yIH0gZnJvbSAnLi4vYWN0b3JzL2FjdG9yLmpzJ1xuaW1wb3J0IHsgQ29DN0NoZWNrIH0gZnJvbSAnLi4vY2hlY2suanMnXG5pbXBvcnQgeyBfcGFydGljaXBhbnQgfSBmcm9tICcuLi9pdGVtcy9jaGFzZS9wYXJ0aWNpcGFudC5qcydcbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi91dGlsaXRpZXMuanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3Q2hhc2VQYXJ0aWNpcGFudEltcG9ydGVyIGV4dGVuZHMgRm9ybUFwcGxpY2F0aW9uIHtcbiAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc3VwZXIuZGVmYXVsdE9wdGlvbnMsIHtcbiAgICAgIHRpdGxlOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQWRkQWN0b3JUb0NoYXNlJyksXG4gICAgICB0ZW1wbGF0ZTogJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYXBwcy9jaGFzZS1wYXJ0aWNpcGFudC1pbXBvcnRlci5odG1sJyxcbiAgICAgIGNsYXNzZXM6IFsnY29jNycsICdkaWFsb2cnLCAnY2hhc2UtcGFydGljaXBhbnQtaW1wb3J0ZXInXSxcbiAgICAgIGVkaXRhYmxlOiB0cnVlLFxuICAgICAgcmVzaXphYmxlOiBmYWxzZSxcbiAgICAgIHN1Ym1pdE9uQ2hhbmdlOiB0cnVlLFxuICAgICAgY2xvc2VPblN1Ym1pdDogZmFsc2UsXG4gICAgICB3aWR0aDogMzAwLFxuICAgICAgaGVpZ2h0OiAnYXV0bydcbiAgICB9KVxuICB9XG5cbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuXG4gICAgY29uc3QgcGFydGljaXBhbnREcmFnRHJvcCA9IG5ldyBEcmFnRHJvcCh7XG4gICAgICBkcm9wU2VsZWN0b3I6ICcuZm9ybS1jb250YWluZXInLFxuICAgICAgcGVybWlzc2lvbnM6IHsgZHJvcDogZ2FtZS51c2VyLmlzR00gfSxcbiAgICAgIGNhbGxiYWNrczogeyBkcm9wOiB0aGlzLl9vbkRyb3BQYXJ0aWNpcGFudC5iaW5kKHRoaXMpIH1cbiAgICB9KVxuICAgIHBhcnRpY2lwYW50RHJhZ0Ryb3AuYmluZChodG1sWzBdKVxuXG4gICAgY29uc3QgdG9rZW5TZWxlY3RvckRyYWdEcm9wID0gbmV3IERyYWdEcm9wKHtcbiAgICAgIGRyYWdTZWxlY3RvcjogJy5jaGFzZS10b2tlbicsXG4gICAgICBwZXJtaXNzaW9uczoge1xuICAgICAgICBkcmFnc3RhcnQ6IGdhbWUudXNlci5pc0dNXG4gICAgICB9LFxuICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgIGRyYWdzdGFydDogdGhpcy5fb25Ub2tlblNlbGVjdG9yRHJhZ1N0YXJ0LmJpbmQodGhpcylcbiAgICAgIH1cbiAgICB9KVxuICAgIHRva2VuU2VsZWN0b3JEcmFnRHJvcC5iaW5kKGh0bWxbMF0pXG5cbiAgICBodG1sLmZpbmQoJy5yZXNldC1wYXJ0aWNpcGFudCcpLmNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgIHRoaXMub2JqZWN0ID0ge31cbiAgICAgIHRoaXMuX2FjdG9yID0gbnVsbFxuICAgICAgYXdhaXQgdGhpcy5yZW5kZXIodHJ1ZSlcbiAgICB9KVxuXG4gICAgaHRtbC5maW5kKCcuZm9vZC1jaGFpbicpLmNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgIHRoaXMub2JqZWN0LmNoYXNlciA9ICF0aGlzLm9iamVjdC5jaGFzZXJcbiAgICAgIGF3YWl0IHRoaXMucmVuZGVyKHRydWUpXG4gICAgfSlcblxuICAgIGh0bWwuZmluZCgnW2RhdGEtYWN0aW9uXScpLmNsaWNrKHRoaXMuX29uQWN0aW9uLmJpbmQodGhpcykpXG5cbiAgICAvLyBodG1sLmZpbmQoJ2J1dHRvbicpLmNsaWNrKHRoaXMuX29uQnV0dG9uLmJpbmQodGhpcykpXG4gIH1cblxuICBhc3luYyBfb25Ub2tlblNlbGVjdG9yRHJhZ1N0YXJ0IChldmVudCkge1xuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICB0eXBlOiAnZ2V0VG9rZW4nLFxuICAgICAgYXBwSWQ6IHRoaXMuYXBwSWQsXG4gICAgICBjYWxsQmFjazogJ2FkZFRva2VuVG9DaGFzZSdcbiAgICB9XG4gICAgZXZlbnQuZGF0YVRyYW5zZmVyLnNldERhdGEoJ3RleHQvcGxhaW4nLCBKU09OLnN0cmluZ2lmeShkYXRhKSlcbiAgfVxuXG4gIGFzeW5jIGdldERhdGEgKCkge1xuICAgIGlmICghdGhpcy5vYmplY3QuaW5pdGlhdGl2ZSkge1xuICAgICAgY29uc3QgaW5pdCA9IENvQ0FjdG9yLmdldENoYXJhY3RlcmlzdGljRGVmaW5pdGlvbigpLmZpbmQoXG4gICAgICAgIGMgPT4gYy5rZXkgPT09ICdkZXgnXG4gICAgICApXG4gICAgICB0aGlzLm9iamVjdC5pbml0aWF0aXZlID0gaW5pdC5sYWJlbFxuICAgICAgLy8gdGhpcy5vYmplY3QuaW5pdGlhdGl2ZSA9IGAke2dhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgIC8vICAgJ0NvQzcuQ2hhcmFjdGVyaXN0aWNzJ1xuICAgICAgLy8gKX0gKCR7aW5pdC5zaG9ydE5hbWV9KWBcbiAgICB9XG4gICAgaWYgKCF0aGlzLm9iamVjdC5zcGVlZENoZWNrKSB7XG4gICAgICBjb25zdCBzcGVlZENoZWNrID0gQ29DQWN0b3IuZ2V0Q2hhcmFjdGVyaXN0aWNEZWZpbml0aW9uKCkuZmluZChcbiAgICAgICAgYyA9PiBjLmtleSA9PT0gJ2NvbidcbiAgICAgIClcbiAgICAgIHRoaXMub2JqZWN0LnNwZWVkQ2hlY2sgPSB7XG4gICAgICAgIG5hbWU6IHNwZWVkQ2hlY2subGFiZWxcbiAgICAgIH1cbiAgICAgIC8vIHRoaXMub2JqZWN0LnNwZWVkQ2hlY2sgPSB7XG4gICAgICAvLyAgIG5hbWU6IGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5DaGFyYWN0ZXJpc3RpY3MnKX0gKCR7XG4gICAgICAvLyAgICAgc3BlZWRDaGVjay5zaG9ydE5hbWVcbiAgICAgIC8vICAgfSlgXG4gICAgICAvLyB9XG4gICAgfVxuXG4gICAgdGhpcy52YWxpZGF0ZVBhcnRpY2lwYW50KClcblxuICAgIC8vIGNvbnN0IHNwZWVkQ2hlY2sgPSB0aGlzLmFjdG9yPy5maW5kKCB0aGlzLm9iamVjdC5zcGVlZENoZWNrPy5uYW1lKVxuICAgIC8vIGlmKCBzcGVlZENoZWNrKXtcbiAgICAvLyAgIHRoaXMub2JqZWN0LnNwZWVkQ2hlY2sgPSBzcGVlZENoZWNrXG4gICAgLy8gfVxuXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHN1cGVyLmdldERhdGEoKVxuXG4gICAgZGF0YS5wYXJ0aWNpcGFudCA9IG5ldyBfcGFydGljaXBhbnQodGhpcy5vYmplY3QpXG4gICAgaWYgKGRhdGEub2JqZWN0LnNwZWVkQ2hlY2submFtZSAmJiB0aGlzLmFjdG9yKSB7XG4gICAgICBjb25zdCBzcGVlZENoZWNrID0gdGhpcy5hY3Rvci5maW5kKGRhdGEub2JqZWN0LnNwZWVkQ2hlY2submFtZSlcbiAgICAgIGlmIChzcGVlZENoZWNrKSB7XG4gICAgICAgIGRhdGEub2JqZWN0LnNwZWVkQ2hlY2suc2NvcmUgPSBzcGVlZENoZWNrLnZhbHVlLnZhbHVlXG4gICAgICAgIGRhdGEuc3BlZWRDaGVja1JlYWRPbmx5ID0gdHJ1ZVxuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgZGF0YS5wYXJ0aWNpcGFudC5zcGVlZENoZWNrLnNjb3JlICYmXG4gICAgICAgICF0aGlzLm9iamVjdC5zcGVlZENoZWNrPy5zY29yZVxuICAgICAgKSB7XG4gICAgICAgIGRhdGEub2JqZWN0LnNwZWVkQ2hlY2suc2NvcmUgPSBkYXRhLnBhcnRpY2lwYW50LnNwZWVkQ2hlY2suc2NvcmVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGF0YS5vYmplY3QuaW5pdGlhdGl2ZSAmJiB0aGlzLmFjdG9yKSB7XG4gICAgICBjb25zdCBpbml0aWF0aXZlID0gdGhpcy5hY3Rvci5maW5kKGRhdGEub2JqZWN0LmluaXRpYXRpdmUpXG4gICAgICBpZiAoaW5pdGlhdGl2ZSkge1xuICAgICAgICBkYXRhLm9iamVjdC5kZXggPSBpbml0aWF0aXZlLnZhbHVlLnZhbHVlXG4gICAgICAgIGRhdGEuaW5pdFJlYWRPbmx5ID0gdHJ1ZVxuICAgICAgfSBlbHNlIGRhdGEub2JqZWN0LmRleCA9IGRhdGEucGFydGljaXBhbnQuaW5pdGlhdGl2ZVxuICAgIH1cblxuICAgIGRhdGEuYWN0b3IgPSB0aGlzLmFjdG9yXG4gICAgZGF0YS5jaGFzZSA9IHRoaXMuY2hhc2VcbiAgICBkYXRhLmRhdGEgPSB0aGlzLmRhdGFcblxuICAgIGRhdGEub3B0aW9uc0xpc3QgPSB7fVxuICAgIGlmICh0aGlzLmNoYXNlKSB7XG4gICAgICBkYXRhLnNraWxsc0FuZENoYXJhY3RlcmlzdGljc0xpc3QgPVxuICAgICAgICB0aGlzLmNoYXNlLmFsbFNraWxsc0FuZENoYXJhY3RlcmlzdGljc1Nob3J0XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYWN0b3IpIHtcbiAgICAgIGRhdGEuc2tpbGxzQW5kQ2hhcmFjdGVyaXN0aWNzTGlzdCA9IFtdXG4gICAgICBDb0NBY3Rvci5nZXRDaGFyYWN0ZXJpc3RpY0RlZmluaXRpb24oKS5mb3JFYWNoKGMgPT5cbiAgICAgICAgZGF0YS5za2lsbHNBbmRDaGFyYWN0ZXJpc3RpY3NMaXN0LnB1c2goYCR7Yy5sYWJlbH1gKVxuICAgICAgKVxuICAgICAgZGF0YS5za2lsbHNBbmRDaGFyYWN0ZXJpc3RpY3NMaXN0LnB1c2goXG4gICAgICAgIGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5MdWNrJyl9YFxuICAgICAgKVxuICAgICAgZGF0YS5za2lsbHNBbmRDaGFyYWN0ZXJpc3RpY3NMaXN0LnB1c2goXG4gICAgICAgIGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5TQU4nKX1gXG4gICAgICApXG4gICAgICB0aGlzLmFjdG9yLnNraWxscy5mb3JFYWNoKHMgPT5cbiAgICAgICAgZGF0YS5za2lsbHNBbmRDaGFyYWN0ZXJpc3RpY3NMaXN0LnB1c2gocy5uYW1lKVxuICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhXG4gIH1cblxuICBnZXQgY2hhc2UgKCkge1xuICAgIGlmICghdGhpcy5fY2hhc2UpIHtcbiAgICAgIHRoaXMuX2NoYXNlID0gQ29DN1V0aWxpdGllcy5TZnJvbVV1aWQodGhpcy5vYmplY3QuY2hhc2VVdWlkKVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2hhc2VcbiAgfVxuXG4gIGdldCBhY3RvciAoKSB7XG4gICAgaWYgKCF0aGlzLm9iamVjdC5kb2NVdWlkKSByZXR1cm4gbnVsbFxuICAgIGlmICghdGhpcy5fYWN0b3IpIHtcbiAgICAgIHRoaXMuX2FjdG9yID0gQ29DN1V0aWxpdGllcy5nZXRBY3RvckZyb21LZXkodGhpcy5vYmplY3QuZG9jVXVpZClcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2FjdG9yXG4gIH1cblxuICBhc3luYyBfdXBkYXRlT2JqZWN0IChldmVudCwgZm9ybURhdGEpIHtcbiAgICBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHRoaXMsIGZvcm1EYXRhKVxuICAgIGF3YWl0IHRoaXMucmVuZGVyKHRydWUpXG4gIH1cblxuICBhc3luYyBfb25Ecm9wUGFydGljaXBhbnQgKGV2ZW50KSB7XG4gICAgY29uc3QgZHJvcFN0cmluZyA9IGV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKCd0ZXh0L3BsYWluJylcbiAgICBjb25zdCBkcm9wRGF0YSA9IEpTT04ucGFyc2UoZHJvcFN0cmluZylcblxuICAgIGNvbnN0IGRvY1V1aWQgPSBDb0M3VXRpbGl0aWVzLmdldEFjdG9yRG9jdW1lbnRGcm9tRHJvcERhdGEoZHJvcERhdGEpXG5cbiAgICB0aGlzLm9iamVjdC5kb2NVdWlkID0gZG9jVXVpZFxuXG4gICAgLy8gSWYgYWN0b3IgaXMgY29udHJvbGxlZCBieSBHTSBvbmx5IHdlIGFzc3VtZSBoZSBpcyBhIGNoYXNlclxuICAgIHRoaXMub2JqZWN0LmNoYXNlciA9IHRoaXMuYWN0b3I/Lm93bmVycz8uZmlsdGVyKHUgPT4gIXUuaXNHTSkubGVuZ3RoID09PSAwXG4gICAgaWYgKHRoaXMub2JqZWN0LnNwZWVkQ2hlY2sucm9sbERhdGFTdHJpbmcpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLm9iamVjdC5zcGVlZENoZWNrLnJvbGxEYXRhU3RyaW5nXG4gICAgfVxuXG4gICAgYXdhaXQgdGhpcy5yZW5kZXIodHJ1ZSlcbiAgfVxuXG4gIGFzeW5jIGFkZFRva2VuVG9DaGFzZSAodG9rZW5zKSB7XG4gICAgaWYgKHRva2Vucy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHRoaXMub2JqZWN0LmRvY1V1aWQgPSB0b2tlbnNbMF0uZG9jdW1lbnQ/LnV1aWRcbiAgICAgIC8vIElmIGFjdG9yIGlzIGNvbnRyb2xsZWQgYnkgR00gb25seSB3ZSBhc3N1bWUgaGUgaXMgYSBjaGFzZXJcbiAgICAgIHRoaXMub2JqZWN0LmNoYXNlciA9IHRoaXMuYWN0b3I/Lm93bmVycz8uZmlsdGVyKHUgPT4gIXUuaXNHTSkubGVuZ3RoID09PSAwXG4gICAgICBpZiAodGhpcy5vYmplY3Quc3BlZWRDaGVjay5yb2xsRGF0YVN0cmluZykge1xuICAgICAgICBkZWxldGUgdGhpcy5vYmplY3Quc3BlZWRDaGVjay5yb2xsRGF0YVN0cmluZ1xuICAgICAgfVxuICAgICAgYXdhaXQgdGhpcy5yZW5kZXIodHJ1ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy53YXJuKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FcnJvclRva2VuSW5jb3JyZWN0JykpXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgX29uQWN0aW9uIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuICAgIGNvbnN0IGFjdGlvbiA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5hY3Rpb25cbiAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgY2FzZSAnY2hhc2UtY2FuY2VsJzpcbiAgICAgICAgdGhpcy5jbG9zZSgpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdjaGFzZS1hZGQnOlxuICAgICAgICB7XG4gICAgICAgICAgY29uc3QgcGFydGljaXBhbnQgPSBuZXcgX3BhcnRpY2lwYW50KHRoaXMub2JqZWN0KVxuXG4gICAgICAgICAgaWYgKHRoaXMuY2hhc2Uuc3RhcnRlZCkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAhKHBhcnRpY2lwYW50Lm1vdmVtZW50QWN0aW9uICYmIHBhcnRpY2lwYW50Lm1vdmVtZW50QWN0aW9uID4gMClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLndhcm4oXG4gICAgICAgICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkRvZXNOb3RNZWV0TWluaW11bVJlcVRvQmVBZGRlZCcpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhLm92ZXJyaWRlTW92ZW1lbnRBY3Rpb24pIHtcbiAgICAgICAgICAgICAgY29uc3Qgc2xvd2VzdCA9IHRoaXMuY2hhc2Uuc2xvd2VzdFBhcnRpY2lwYW50XG4gICAgICAgICAgICAgIGlmIChpc05hTihwYXJ0aWNpcGFudC5hZGp1c3RlZE1vdikpIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWNpcGFudC5tb3YgPSBzbG93ZXN0LmFkanVzdGVkTW92XG4gICAgICAgICAgICAgIH0gLyoqIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnRpY2lwYW50LmRhdGEubW92ID1cbiAgICAgICAgICAgICAgICAgIHNsb3dlc3QuYWRqdXN0ZWRNb3YgKyBwYXJ0aWNpcGFudC5tb3ZlbWVudEFjdGlvbiAtIDFcbiAgICAgICAgICAgICAgfSAqL1xuICAgICAgICAgICAgICB0aGlzLmRhdGEucmVjYWxjdWxhdGlvbk5lZWRlZCA9IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYXdhaXQgdGhpcy5jaGFzZS5hZGRQYXJ0aWNpcGFudChwYXJ0aWNpcGFudCwge1xuICAgICAgICAgICAgbG9jYXRpb25VdWlkOiB0aGlzLm9iamVjdC5sb2NhdGlvblV1aWQsXG4gICAgICAgICAgICByZWNhbGN1bGF0ZU1vdmVtZW50QWN0aW9uczogdGhpcy5kYXRhLnJlY2FsY3VsYXRpb25OZWVkZWQsXG4gICAgICAgICAgICB1cGRhdGU6IHRoaXMub2JqZWN0LnVwZGF0ZVxuICAgICAgICAgIH0pXG4gICAgICAgICAgdGhpcy5jbG9zZSgpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSAncm9sbC1zcGVlZC1jaGVjayc6XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zdCBwYXJ0aWNpcGFudCA9IG5ldyBfcGFydGljaXBhbnQodGhpcy5vYmplY3QpXG4gICAgICAgICAgaWYgKHBhcnRpY2lwYW50LnNwZWVkQ2hlY2sucmVmU2V0KSB7XG4gICAgICAgICAgICBjb25zdCByb2xsID0gbmV3IENvQzdDaGVjaygpXG4gICAgICAgICAgICBwYXJ0aWNpcGFudC5kYXRhLnJvbGxlZCA9IHRydWVcbiAgICAgICAgICAgIHJvbGwuYWN0b3IgPSBwYXJ0aWNpcGFudC5hY3Rvci5hY3RvcktleVxuICAgICAgICAgICAgaWYgKHBhcnRpY2lwYW50LnNwZWVkQ2hlY2suaXNDaGFyYWN0ZXJpc3RpYykge1xuICAgICAgICAgICAgICBhd2FpdCByb2xsLnJvbGxDaGFyYWN0ZXJpc3RpYyhwYXJ0aWNpcGFudC5zcGVlZENoZWNrLnJlZi5rZXkpXG4gICAgICAgICAgICAgIHBhcnRpY2lwYW50LmRhdGEuc3BlZWRDaGVjay5yb2xsRGF0YVN0cmluZyA9IHJvbGwuSlNPTlJvbGxTdHJpbmdcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFydGljaXBhbnQuc3BlZWRDaGVjay5pc1NraWxsKSB7XG4gICAgICAgICAgICAgIHJvbGwuc2tpbGwgPSBwYXJ0aWNpcGFudC5zcGVlZENoZWNrLnJlZlxuICAgICAgICAgICAgICBhd2FpdCByb2xsLnJvbGwoKVxuICAgICAgICAgICAgICBwYXJ0aWNpcGFudC5kYXRhLnNwZWVkQ2hlY2sucm9sbERhdGFTdHJpbmcgPSByb2xsLkpTT05Sb2xsU3RyaW5nXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnRpY2lwYW50LnNwZWVkQ2hlY2suaXNBdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgICAgYXdhaXQgcm9sbC5yb2xsQXR0cmlidXRlKHBhcnRpY2lwYW50LnNwZWVkQ2hlY2sucmVmLmtleSlcbiAgICAgICAgICAgICAgcGFydGljaXBhbnQuZGF0YS5zcGVlZENoZWNrLnJvbGxEYXRhU3RyaW5nID0gcm9sbC5KU09OUm9sbFN0cmluZ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAocGFydGljaXBhbnQuc3BlZWRDaGVjay5zY29yZSkge1xuICAgICAgICAgICAgY29uc3Qgcm9sbERhdGEgPSB7XG4gICAgICAgICAgICAgIHJhd1ZhbHVlOiBwYXJ0aWNpcGFudC5zcGVlZENoZWNrLnNjb3JlLFxuICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogcGFydGljaXBhbnQuc3BlZWRDaGVjay5uYW1lLFxuICAgICAgICAgICAgICBhY3Rvck5hbWU6IHBhcnRpY2lwYW50Lm5hbWUgPyBwYXJ0aWNpcGFudC5uYW1lIDogdW5kZWZpbmVkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFydGljaXBhbnQuaGFzQWN0b3IpIHtcbiAgICAgICAgICAgICAgcm9sbERhdGEuYWN0b3IgPSBwYXJ0aWNpcGFudC5hY3Rvci5hY3RvcktleVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgcm9sbCA9IENvQzdDaGVjay5jcmVhdGUocm9sbERhdGEpXG4gICAgICAgICAgICBhd2FpdCByb2xsLnJvbGwoKVxuICAgICAgICAgICAgcGFydGljaXBhbnQuZGF0YS5zcGVlZENoZWNrLnJvbGxEYXRhU3RyaW5nID0gcm9sbC5KU09OUm9sbFN0cmluZ1xuICAgICAgICAgICAgcGFydGljaXBhbnQuZGF0YS5yb2xsZWQgPSB0cnVlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm91bmRyeS51dGlscy5tZXJnZU9iamVjdCh0aGlzLm9iamVjdCwgcGFydGljaXBhbnQuZGF0YSlcbiAgICAgICAgICB0aGlzLnJlbmRlcih0cnVlKVxuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICB2YWxpZGF0ZVBhcnRpY2lwYW50ICgpIHtcbiAgICBjb25zdCBwYXJ0aWNpcGFudCA9IG5ldyBfcGFydGljaXBhbnQodGhpcy5vYmplY3QpXG4gICAgaWYgKCF0aGlzLmRhdGEpIHRoaXMuZGF0YSA9IHt9XG4gICAgdGhpcy5vYmplY3QuZXhjbHVkZWQgPSBmYWxzZVxuICAgIHRoaXMub2JqZWN0LmVzY2FwZWQgPSBmYWxzZVxuICAgIHRoaXMuZGF0YS5yZWNhbGN1bGF0aW9uTmVlZGVkID0gZmFsc2VcbiAgICB0aGlzLmRhdGEucGFydGljaXBhbnRFeGNsdWRlZCA9IGZhbHNlXG4gICAgdGhpcy5kYXRhLm1vdmVtZW50QWN0aW9uRGVsdGEgPSAwXG5cbiAgICBpZiAoIXRoaXMuZGF0YS5vdmVycmlkZU1vdmVtZW50QWN0aW9uKSB7XG4gICAgICBjb25zdCBzbG93ZXN0UHJleSA9IHRoaXMuY2hhc2Uuc2xvd2VzdFByZXlcbiAgICAgIGNvbnN0IGZhc3Rlc3RDaGFzZXIgPSB0aGlzLmNoYXNlLmZhc3Rlc3RDaGFzZXJcbiAgICAgIGNvbnN0IHNsb3dlc3QgPSB0aGlzLmNoYXNlLnNsb3dlc3RQYXJ0aWNpcGFudFxuXG4gICAgICBpZiAocGFydGljaXBhbnQuYWRqdXN0ZWRNb3YgPCBzbG93ZXN0Py5hZGp1c3RlZE1vdikge1xuICAgICAgICB0aGlzLmRhdGEucmVjYWxjdWxhdGlvbk5lZWRlZCA9IHRydWVcbiAgICAgICAgcGFydGljaXBhbnQubW92ZW1lbnRBY3Rpb24gPSAxXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRhdGEucmVjYWxjdWxhdGlvbk5lZWRlZCA9IGZhbHNlXG4gICAgICAgIHBhcnRpY2lwYW50LmNhbGN1bGF0ZU1vdmVtZW50QWN0aW9ucyhzbG93ZXN0Py5hZGp1c3RlZE1vdilcbiAgICAgIH1cbiAgICAgIGlmIChwYXJ0aWNpcGFudC5pc0NoYXNlcikge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgc2xvd2VzdFByZXkgJiZcbiAgICAgICAgICAhdGhpcy5jaGFzZS5zeXN0ZW0uaW5jbHVkZUxhc3RDb21tZXJzICYmXG4gICAgICAgICAgcGFydGljaXBhbnQuYWRqdXN0ZWRNb3YgPCBzbG93ZXN0UHJleS5hZGp1c3RlZE1vdlxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLm9iamVjdC5leGNsdWRlZCA9IHRydWVcbiAgICAgICAgICB0aGlzLmRhdGEucGFydGljaXBhbnRFeGNsdWRlZCA9IHRydWVcbiAgICAgICAgICB0aGlzLmRhdGEuZXhjbHVkZWRCZWNhdXNlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlRvb1Nsb3cnKVxuICAgICAgICAgIHRoaXMuZGF0YS5yZWNhbGN1bGF0aW9uTmVlZGVkID0gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGFydGljaXBhbnQuaXNQcmV5KSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBmYXN0ZXN0Q2hhc2VyICYmXG4gICAgICAgICAgIXRoaXMuY2hhc2Uuc3lzdGVtLmluY2x1ZGVFc2NhcGVkICYmXG4gICAgICAgICAgcGFydGljaXBhbnQuYWRqdXN0ZWRNb3YgPiBmYXN0ZXN0Q2hhc2VyLmFkanVzdGVkTW92XG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMub2JqZWN0LmVzY2FwZWQgPSB0cnVlXG4gICAgICAgICAgdGhpcy5kYXRhLnBhcnRpY2lwYW50RXhjbHVkZWQgPSB0cnVlXG4gICAgICAgICAgdGhpcy5kYXRhLmV4Y2x1ZGVkQmVjYXVzZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ub29GYXN0JylcbiAgICAgICAgICB0aGlzLmRhdGEucmVjYWxjdWxhdGlvbk5lZWRlZCA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgY3JlYXRlIChkYXRhKSB7XG4gICAgaWYgKGRhdGEuZHJvcERhdGEpIHtcbiAgICAgIGNvbnN0IGRvY1V1aWQgPSBDb0M3VXRpbGl0aWVzLmdldEFjdG9yRG9jdW1lbnRGcm9tRHJvcERhdGEoZGF0YS5kcm9wRGF0YSlcbiAgICAgIGlmIChkb2NVdWlkKSBkYXRhLmRvY1V1aWQgPSBkb2NVdWlkXG4gICAgICBkZWxldGUgZGF0YS5kcm9wRGF0YVxuICAgIH1cbiAgICByZXR1cm4gbmV3IENvQzdDaGFzZVBhcnRpY2lwYW50SW1wb3J0ZXIoZGF0YSkucmVuZGVyKHRydWUpXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCAkLCBEaWFsb2csIERyYWdEcm9wLCBGb3JtRGF0YUV4dGVuZGVkLCBmb3VuZHJ5LCBnYW1lLCBJdGVtU2hlZXQsIFRleHRFZGl0b3IsIHVpICovXG5pbXBvcnQgeyBhZGRDb0NJRFNoZWV0SGVhZGVyQnV0dG9uIH0gZnJvbSAnLi4vLi4vc2NyaXB0cy9jb2MtaWQtYnV0dG9uLmpzJ1xuaW1wb3J0IHsgQ29DN0NoYXNlUGFydGljaXBhbnRJbXBvcnRlciB9IGZyb20gJy4uLy4uL2FwcHMvY2hhc2UtcGFydGljaXBhbnQtaW1wb3J0ZXIuanMnXG5pbXBvcnQgeyBDb0M3Q2hhdCB9IGZyb20gJy4uLy4uL2NoYXQuanMnXG5pbXBvcnQgeyBjaGF0SGVscGVyIH0gZnJvbSAnLi4vLi4vY2hhdC9oZWxwZXIuanMnXG5pbXBvcnQgeyBDb0M3Q2hlY2sgfSBmcm9tICcuLi8uLi9jaGVjay5qcydcbmltcG9ydCB7IF9wYXJ0aWNpcGFudCB9IGZyb20gJy4vcGFydGljaXBhbnQuanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3Q2hhc2VTaGVldCBleHRlbmRzIEl0ZW1TaGVldCB7XG4gIC8qKlxuICAgKiBFeHRlbmQgYW5kIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG9wdGlvbnMgdXNlZCBieSB0aGUgU2ltcGxlIEl0ZW0gU2hlZXRcbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMgKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRPcHRpb25zLCB7XG4gICAgICBjbGFzc2VzOiBbJ2NvYzcnLCAnc2hlZXRWMicsICdpdGVtJywgJ2NoYXNlJ10sXG4gICAgICB0ZW1wbGF0ZTogJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvaXRlbXMvY2hhc2UuaHRtbCcsXG4gICAgICB3aWR0aDogNTUwLFxuICAgICAgaGVpZ2h0OiA1MDAsXG4gICAgICByZXNpemFibGU6IHRydWUsXG4gICAgICB0YWJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYXZTZWxlY3RvcjogJy5zaGVldC1uYXYnLFxuICAgICAgICAgIGNvbnRlbnRTZWxlY3RvcjogJy5zaGVldC1ib2R5JyxcbiAgICAgICAgICBpbml0aWFsOiAncGFydGljaXBhbnRzJ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfSlcblxuICAgIHJldHVybiBvcHRpb25zXG5cbiAgICAvLyBjbG9zZU9uU3VibWl0OiBmYWxzZSxcbiAgICAvLyBzdWJtaXRPbkNsb3NlOiB0cnVlLFxuICB9XG5cbiAgLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiAnY29jN0NoYXNlU2hlZXQnXG4gIH1cblxuICBfZ2V0SGVhZGVyQnV0dG9ucyAoKSB7XG4gICAgY29uc3QgaGVhZGVyQnV0dG9ucyA9IHN1cGVyLl9nZXRIZWFkZXJCdXR0b25zKClcbiAgICBhZGRDb0NJRFNoZWV0SGVhZGVyQnV0dG9uKGhlYWRlckJ1dHRvbnMsIHRoaXMpXG4gICAgcmV0dXJuIGhlYWRlckJ1dHRvbnNcbiAgfVxuXG4gIGFzeW5jIGdldERhdGEgKG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHNoZWV0RGF0YSA9IHN1cGVyLmdldERhdGEob3B0aW9ucylcblxuICAgIHNoZWV0RGF0YS5wYXJ0aWNpcGFudHMgPSB0aGlzLml0ZW0ucGFydGljaXBhbnRzT2JqZWN0XG4gICAgc2hlZXREYXRhLnBhcnRpY2lwYW50c0J5SW5pdGlhdGl2ZSA9IHRoaXMuaXRlbS5wYXJ0aWNpcGFudHNCeUluaXRpYXRpdmVcbiAgICBzaGVldERhdGEucHJleXMgPSB0aGlzLml0ZW0ucHJleXNcbiAgICBzaGVldERhdGEuY2hhc2VycyA9IHRoaXMuaXRlbS5jaGFzZXJzXG5cbiAgICBzaGVldERhdGEucHJleXNNaW5Nb3YgPSBzaGVldERhdGEucHJleXMubGVuZ3RoID8gc2hlZXREYXRhLnByZXlzLnJlZHVjZSgocHJldiwgY3VycmVudCkgPT4gcHJldi5hZGp1c3RlZE1vdiA8IGN1cnJlbnQuYWRqdXN0ZWRNb3YgPyBwcmV2IDogY3VycmVudCkuYWRqdXN0ZWRNb3YgOiAtMVxuXG4gICAgc2hlZXREYXRhLnByZXlzTWF4TW92ID0gc2hlZXREYXRhLnByZXlzLmxlbmd0aCA/IHNoZWV0RGF0YS5wcmV5cy5yZWR1Y2UoKHByZXYsIGN1cnJlbnQpID0+IHByZXYuYWRqdXN0ZWRNb3YgPiBjdXJyZW50LmFkanVzdGVkTW92ID8gcHJldiA6IGN1cnJlbnQpLmFkanVzdGVkTW92IDogLTFcblxuICAgIHNoZWV0RGF0YS5jaGFzZXJzTWluTW92ID0gc2hlZXREYXRhLmNoYXNlcnMubGVuZ3RoID8gc2hlZXREYXRhLmNoYXNlcnMucmVkdWNlKChwcmV2LCBjdXJyZW50KSA9PiBwcmV2LmFkanVzdGVkTW92IDwgY3VycmVudC5hZGp1c3RlZE1vdiA/IHByZXYgOiBjdXJyZW50KS5hZGp1c3RlZE1vdiA6IC0xXG5cbiAgICBzaGVldERhdGEuY2hhc2Vyc01heE1vdiA9IHNoZWV0RGF0YS5jaGFzZXJzLmxlbmd0aCA/IHNoZWV0RGF0YS5jaGFzZXJzLnJlZHVjZSgocHJldiwgY3VycmVudCkgPT4gcHJldi5hZGp1c3RlZE1vdiA+IGN1cnJlbnQuYWRqdXN0ZWRNb3YgPyBwcmV2IDogY3VycmVudCkuYWRqdXN0ZWRNb3YgOiAtMVxuXG4gICAgc2hlZXREYXRhLmNoYXNlcnMuZm9yRWFjaChwID0+IHtcbiAgICAgIGlmIChwLmFkanVzdGVkTW92IDwgc2hlZXREYXRhLnByZXlzTWluTW92KSB7XG4gICAgICAgIHAudG9vU2xvdygpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwLmluY2x1ZGVJbkNoYXNlKClcbiAgICAgIH1cbiAgICAgIHAuZmFzdGVzdCA9IHAuYWRqdXN0ZWRNb3YgPT09IHNoZWV0RGF0YS5jaGFzZXJzTWF4TW92XG4gICAgICBwLnNsb3dlc3QgPSBwLmFkanVzdGVkTW92ID09PSBzaGVldERhdGEuY2hhc2Vyc01pbk1vdlxuICAgIH0pXG5cbiAgICBzaGVldERhdGEucHJleXMuZm9yRWFjaChwID0+IHtcbiAgICAgIGlmIChwLmFkanVzdGVkTW92ID4gc2hlZXREYXRhLmNoYXNlcnNNYXhNb3YpIHtcbiAgICAgICAgcC5lc2NhcGVkKClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHAuaW5jbHVkZUluQ2hhc2UoKVxuICAgICAgfVxuICAgICAgcC5mYXN0ZXN0ID0gcC5hZGp1c3RlZE1vdiA9PT0gc2hlZXREYXRhLnByZXlzTWF4TW92XG4gICAgICBwLnNsb3dlc3QgPSBwLmFkanVzdGVkTW92ID09PSBzaGVldERhdGEucHJleXNNaW5Nb3ZcbiAgICB9KVxuXG4gICAgc2hlZXREYXRhLmxvY2F0aW9ucyA9IHRoaXMuaXRlbS5sb2NhdGlvbnNcbiAgICBzaGVldERhdGEuYWxsSGF2ZVZhbGlkTW92ID0gdGhpcy5hbGxIYXZlVmFsaWRNb3ZcbiAgICBzaGVldERhdGEuYWN0aXZlTG9jYXRpb24gPSB0aGlzLml0ZW0uYWN0aXZlTG9jYXRpb25cbiAgICBpZiAoc2hlZXREYXRhLmFjdGl2ZUxvY2F0aW9uKSB7XG4gICAgICBzaGVldERhdGEuYWN0aXZlTG9jYXRpb24udGl0bGUgPSBzaGVldERhdGEuYWN0aXZlTG9jYXRpb24uY29vcmRpbmF0ZXNcbiAgICAgICAgPyBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkxvY2F0aW9uQ29vcmRpbmF0ZScsIHtcbiAgICAgICAgICB4OiBzaGVldERhdGEuYWN0aXZlTG9jYXRpb24uY29vcmRpbmF0ZXMueCxcbiAgICAgICAgICB5OiBzaGVldERhdGEuYWN0aXZlTG9jYXRpb24uY29vcmRpbmF0ZXMueVxuICAgICAgICB9KVxuICAgICAgICA6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5EcmFnT25DYW52YXMnKVxuICAgIH1cbiAgICBzaGVldERhdGEucHJldmlvdXNMb2NhdGlvbiA9IHRoaXMuaXRlbS5wcmV2aW91c0xvY2F0aW9uXG4gICAgc2hlZXREYXRhLm5leHRMb2NhdGlvbiA9IHRoaXMuaXRlbS5uZXh0TG9jYXRpb25cbiAgICBzaGVldERhdGEuc3RhcnRlZCA9IHRoaXMuaXRlbS5zdGFydGVkXG5cbiAgICBzaGVldERhdGEuaXNLZWVwZXIgPSBnYW1lLnVzZXIuaXNHTVxuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25LZWVwZXIgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24ua2VlcGVyLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgcmV0dXJuIHNoZWV0RGF0YVxuICB9XG5cbiAgLy8gZ2V0IGFjdGl2ZVBhcnRpY2lwYW50ICgpIHtcbiAgLy8gICBpZiAoIXRoaXMuaXRlbS5zeXN0ZW0ucGFydGljaXBhbnRzKSByZXR1cm4gdW5kZWZpbmVkXG4gIC8vICAgY29uc3QgcGFydGljaXBhbnQgPSB0aGlzLml0ZW0uc3lzdGVtLnBhcnRpY2lwYW50cy5maW5kKHAgPT4gcC5hY3RpdmUpXG4gIC8vICAgaWYgKCFwYXJ0aWNpcGFudCkgcmV0dXJuIHVuZGVmaW5lZFxuICAvLyAgIHJldHVybiBuZXcgX3BhcnRpY2lwYW50KHBhcnRpY2lwYW50KVxuICAvLyB9XG5cbiAgLy8gZ2V0IGFjdGl2ZVBhcnRpY2lwYW50TG9jYXRpb24gKCkge1xuICAvLyAgIGlmICghdGhpcy5pdGVtLnN5c3RlbS5wYXJ0aWNpcGFudHMpIHJldHVybiB1bmRlZmluZWRcbiAgLy8gICBjb25zdCBwYXJ0aWNpcGFudCA9IHRoaXMuaXRlbS5zeXN0ZW0ucGFydGljaXBhbnRzLmZpbmQocCA9PiBwLmFjdGl2ZSlcbiAgLy8gfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuXG4gICAgLy8gaHRtbC5maW5kKCcuY2hhc2UtdHJhY2snKS5yZWFkeShhc3luYyBodG1sID0+IGF3YWl0IHRoaXMuX29uU2hlZXRSZWFkeShodG1sKSlcblxuICAgIC8vIEhhbmRsZSBEcm9wcm93blxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcuZHJvcGRvd24tZWxlbWVudCcpXG4gICAgICAub24oJ2NsaWNrJywgZXZlbnQgPT4gdGhpcy5fb25Ecm9wRG93bkVsZW1lbnRTZWxlY3RlZChldmVudCkpXG5cbiAgICBodG1sLmZpbmQoJy5kcm9wYnRuJykuY2xpY2soZXZlbnQgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICAgIGNvbnN0IGRyb3Bkb3duID0gdGFyZ2V0LmNsb3Nlc3QoJy5kcm9wZG93bicpXG4gICAgICBjb25zdCBkcm9wZG93bkNvbnRlbnQgPSBkcm9wZG93bi5xdWVyeVNlbGVjdG9yKCcuZHJvcGRvd24tY29udGVudCcpXG4gICAgICBkcm9wZG93bkNvbnRlbnQuY2xhc3NMaXN0LnRvZ2dsZSgnc2hvdycpXG4gICAgfSlcbiAgICBodG1sXG4gICAgICAuZmluZCgnLmRyb3Bkb3duJylcbiAgICAgIC5tb3VzZWxlYXZlKGV2ZW50ID0+XG4gICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICAgICAgICAucXVlcnlTZWxlY3RvcignLmRyb3Bkb3duLWNvbnRlbnQnKVxuICAgICAgICAgIC5jbGFzc0xpc3QucmVtb3ZlKCdzaG93JylcbiAgICAgIClcblxuICAgIGh0bWwub24oJ2RibGNsaWNrJywgJy5vcGVuLWFjdG9yJywgQ29DN0NoYXQuX29uT3BlbkFjdG9yLmJpbmQodGhpcykpXG5cbiAgICBodG1sXG4gICAgICAuZmluZCgnLnBpbi1sb2NhdGlvbicpXG4gICAgICAuY29udGV4dG1lbnUodGhpcy5jbGVhckFjdGl2ZUxvY2F0aW9uQ29vcmRpbmF0ZXMuYmluZCh0aGlzKSlcblxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcucGFydGljaXBhbnQnKVxuICAgICAgLm9uKCdkcmFnZW50ZXInLCBldmVudCA9PiB0aGlzLl9vbkRyYWdFbnRlclBhcnRpY2lwYW50KGV2ZW50KSlcbiAgICBodG1sXG4gICAgICAuZmluZCgnLnBhcnRpY2lwYW50JylcbiAgICAgIC5vbignZHJhZ292ZXInLCBldmVudCA9PiB0aGlzLl9vbkRyYWdFbnRlclBhcnRpY2lwYW50KGV2ZW50KSlcbiAgICBodG1sXG4gICAgICAuZmluZCgnLnBhcnRpY2lwYW50JylcbiAgICAgIC5vbignZHJhZ2xlYXZlJywgZXZlbnQgPT4gdGhpcy5fb25EcmFnTGVhdmVQYXJ0aWNpcGFudChldmVudCkpXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJy5wYXJ0aWNpcGFudCcpXG4gICAgICAub24oJ2Ryb3AnLCBldmVudCA9PiB0aGlzLl9vbkRyYWdMZWF2ZVBhcnRpY2lwYW50KGV2ZW50KSlcblxuICAgIGh0bWwuZmluZCgnLnAtc2lkZScpLmNsaWNrKHRoaXMuX29uQ2hhbmdlU2lkZS5iaW5kKHRoaXMpKVxuICAgIGh0bWwuZmluZCgnLmRlbGV0ZS1wYXJ0aWNpcGFudCcpLmNsaWNrKHRoaXMuX29uRGVsZXRlUGFydGljaXBhbnQuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJy5yZXNldC1yb2xsJykuY2xpY2sodGhpcy5fb25SZXNldFJvbGwuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJy5kZWxldGUtZHJpdmVyJykuY2xpY2sodGhpcy5fb25EZWxldGVEcml2ZXIuYmluZCh0aGlzKSlcblxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcubmV3LXBhcnRpY2lwYW50JylcbiAgICAgIC5vbignZHJhZ2VudGVyJywgZXZlbnQgPT4gdGhpcy5fb25EcmFnRW50ZXJQYXJ0aWNpcGFudChldmVudCkpXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJy5uZXctcGFydGljaXBhbnQnKVxuICAgICAgLm9uKCdkcmFnb3ZlcicsIGV2ZW50ID0+IHRoaXMuX29uRHJhZ0VudGVyUGFydGljaXBhbnQoZXZlbnQpKVxuICAgIGh0bWxcbiAgICAgIC5maW5kKCcubmV3LXBhcnRpY2lwYW50JylcbiAgICAgIC5vbignZHJhZ2xlYXZlJywgZXZlbnQgPT4gdGhpcy5fb25EcmFnTGVhdmVQYXJ0aWNpcGFudChldmVudCkpXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJy5uZXctcGFydGljaXBhbnQnKVxuICAgICAgLm9uKCdkcm9wJywgZXZlbnQgPT4gdGhpcy5fb25EcmFnTGVhdmVQYXJ0aWNpcGFudChldmVudCkpXG5cbiAgICBodG1sLmZpbmQoJy5hZGQtc2lnbicpLmNsaWNrKHRoaXMuX29uQWRkUGFydGljaXBhbnQuYmluZCh0aGlzKSlcblxuICAgIGh0bWwuZmluZCgnLnJvbGwtcGFydGljaXBhbnQnKS5jbGljayh0aGlzLl9vblJvbGxQYXJ0aWNpcGFudC5iaW5kKHRoaXMpKVxuXG4gICAgaHRtbC5maW5kKCcuYnV0dG9uJykuY2xpY2sodGhpcy5fb25CdXR0b25DbGljay5iaW5kKHRoaXMpKVxuXG4gICAgaHRtbC5maW5kKCcubmFtZS1jb250YWluZXInKS5jbGljayh0aGlzLl9vbkxvY2F0aW9uQ2xpY2suYmluZCh0aGlzKSlcblxuICAgIGh0bWwuZmluZCgnLm9ic3RhY2xlLXR5cGUnKS5jbGljayh0aGlzLl9vbk9ic3RhY2xlVHlwZUNsaWNrLmJpbmQodGhpcykpXG4gICAgLy8gaHRtbC5maW5kKCcub2JzdGFjbGUtdG9nZ2xlJykuY2xpY2sodGhpcy5fb25PYnN0YWNsZVRvZ2dsZUNsaWNrLmJpbmQodGhpcykpXG4gICAgaHRtbC5maW5kKCcudG9nZ2xlJykuY2xpY2sodGhpcy5fb25Ub2dnbGUuYmluZCh0aGlzKSlcbiAgICBodG1sXG4gICAgICAuZmluZCgnLnBhcnRpY2lwYW50LWNvbnRyb2wnKVxuICAgICAgLmNsaWNrKHRoaXMuX29uUGFydGljaXBhbnRDb250cm9sQ2xpY2tlZC5iaW5kKHRoaXMpKVxuXG4gICAgaHRtbC5maW5kKCcuY2hhc2UtY29udHJvbCcpLmNsaWNrKHRoaXMuX29uQ2hhc2VDb250cm9sQ2xpY2tlZC5iaW5kKHRoaXMpKVxuXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJy5sb2NhdGlvbi1jb250cm9sJylcbiAgICAgIC5jbGljayh0aGlzLl9vbkxvY2F0aW9uQ29udHJvbENsaWNrLmJpbmQodGhpcykpXG4gICAgLy8gaHRtbFxuICAgIC8vICAgLmZpbmQoJy5tb3ZlbWVudC1hY3Rpb24gLmRlY3JlYXNlJylcbiAgICAvLyAgIC5jbGljayh0aGlzLl9vbkNoYW5nZU1vdmVtZW50QWN0aW9ucy5iaW5kKHRoaXMsIC0xKSlcbiAgICAvLyBodG1sXG4gICAgLy8gICAuZmluZCgnLm1vdmVtZW50LWFjdGlvbiAuaW5jcmVhc2UnKVxuICAgIC8vICAgLmNsaWNrKHRoaXMuX29uQ2hhbmdlTW92ZW1lbnRBY3Rpb25zLmJpbmQodGhpcywgMSkpXG5cbiAgICAvLyBodG1sXG4gICAgLy8gLmZpbmQoJy5waW4tbG9jYXRpb24nKVxuICAgIC8vIC5vbignZHJhZ3N0YXJ0JywgZXZlbnQgPT4gdGhpcy5fb25QaW5Mb2NhdGlvbkRyYWdTdGFydChldmVudCkpXG5cbiAgICBjb25zdCBwaW5Mb2NhdGlvblNlbGVjdG9yRHJhZ0Ryb3AgPSBuZXcgRHJhZ0Ryb3Aoe1xuICAgICAgZHJhZ1NlbGVjdG9yOiAnLnBpbi1sb2NhdGlvbicsXG4gICAgICBwZXJtaXNzaW9uczoge1xuICAgICAgICBkcmFnc3RhcnQ6IHRoaXMuX2NhblBpbkxvY2F0aW9uRHJhZ1N0YXJ0LmJpbmQodGhpcylcbiAgICAgIH0sXG4gICAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgZHJhZ3N0YXJ0OiB0aGlzLl9vblBpbkxvY2F0aW9uRHJhZ1N0YXJ0LmJpbmQodGhpcylcbiAgICAgIH1cbiAgICB9KVxuICAgIHBpbkxvY2F0aW9uU2VsZWN0b3JEcmFnRHJvcC5iaW5kKGh0bWxbMF0pXG5cbiAgICBjb25zdCBwYXJ0aWNpcGFudERyYWdEcm9wID0gbmV3IERyYWdEcm9wKHtcbiAgICAgIGRyb3BTZWxlY3RvcjogJy5wYXJ0aWNpcGFudCcsXG4gICAgICBjYWxsYmFja3M6IHsgZHJvcDogdGhpcy5fb25Ecm9wUGFydGljaXBhbnQuYmluZCh0aGlzKSB9XG4gICAgfSlcbiAgICBwYXJ0aWNpcGFudERyYWdEcm9wLmJpbmQoaHRtbFswXSlcblxuICAgIGNvbnN0IG5ld1BhcnRpY2lwYW50RHJhZ0Ryb3AgPSBuZXcgRHJhZ0Ryb3Aoe1xuICAgICAgZHJvcFNlbGVjdG9yOiAnLm5ldy1wYXJ0aWNpcGFudCcsXG4gICAgICBjYWxsYmFja3M6IHsgZHJvcDogdGhpcy5fb25BZGRQYXJ0aWNpcGFudC5iaW5kKHRoaXMpIH1cbiAgICB9KVxuICAgIG5ld1BhcnRpY2lwYW50RHJhZ0Ryb3AuYmluZChodG1sWzBdKVxuXG4gICAgaWYgKHRoaXMuaXRlbS5zdGFydGVkKSB7XG4gICAgICBodG1sXG4gICAgICAgIC5maW5kKCcuY2hhc2UtbG9jYXRpb24gLmNoYXNlLXBhcnRpY2lwYW50JylcbiAgICAgICAgLmNsaWNrKHRoaXMuX29uQ2hhc2VQYXJ0aWNpcGFudENsaWNrLmJpbmQodGhpcykpXG5cbiAgICAgIGNvbnN0IGNoYXNlUGFydGljaXBhbnREcmFncERyb3AgPSBuZXcgRHJhZ0Ryb3Aoe1xuICAgICAgICBkcmFnU2VsZWN0b3I6ICcuY2hhc2UtcGFydGljaXBhbnQnLFxuICAgICAgICBkcm9wU2VsZWN0b3I6ICcuY2hhc2UtbG9jYXRpb24nLFxuICAgICAgICBwZXJtaXNzaW9uczoge1xuICAgICAgICAgIGRyYWdzdGFydDogdGhpcy5fY2FuQ2hhc2VQYXJ0aWNpcGFudERyYWdTdGFydC5iaW5kKHRoaXMpLFxuICAgICAgICAgIGRyb3A6IHRoaXMuX2NhbkNoYXNlUGFydGljaXBhbnREcmFnRHJvcC5iaW5kKHRoaXMpXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICAgIGRyYWdzdGFydDogdGhpcy5fb25DaGFzZVBhcnRpY2lwYW50RHJhZ1N0YXJ0LmJpbmQodGhpcyksXG4gICAgICAgICAgZHJvcDogdGhpcy5fb25DaGFzZVBhcnRpY2lwYW50RHJhZ0Ryb3AuYmluZCh0aGlzKSxcbiAgICAgICAgICBkcmFnb3ZlcjogdGhpcy5fb25EcmFnRW50ZXIuYmluZCh0aGlzKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgY2hhc2VQYXJ0aWNpcGFudERyYWdwRHJvcC5iaW5kKGh0bWxbMF0pXG5cbiAgICAgIGh0bWxcbiAgICAgICAgLmZpbmQoJy5jaGFzZS1sb2NhdGlvbicpXG4gICAgICAgIC5vbignZHJhZ2xlYXZlJywgZXZlbnQgPT4gdGhpcy5fb25EcmFnTGVhdmUoZXZlbnQpKVxuICAgIH1cbiAgfVxuXG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4gIC8qICBGb3JtIFN1Ym1pc3Npb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBfZ2V0U3VibWl0RGF0YSAodXBkYXRlRGF0YSA9IHt9KSB7XG4gICAgLy8gQ3JlYXRlIHRoZSBleHBhbmRlZCB1cGRhdGUgZGF0YSBvYmplY3RcbiAgICBjb25zdCBmZCA9IG5ldyBGb3JtRGF0YUV4dGVuZGVkKHRoaXMuZm9ybSwgeyBlZGl0b3JzOiB0aGlzLmVkaXRvcnMgfSlcbiAgICBsZXQgZGF0YSA9IGZkLm9iamVjdFxuICAgIGlmICh1cGRhdGVEYXRhKSB7XG4gICAgICBkYXRhID0gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChkYXRhLCB1cGRhdGVEYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhID0gZm91bmRyeS51dGlscy5leHBhbmRPYmplY3QoZGF0YSlcbiAgICB9XG5cbiAgICAvLyBDaGVjayB0aGF0IHN0YXJ0aW5nIHBvc2l0aW9uIGlzIG5vdCBvdXRzaWRlIG9mIGNoYXNlIHJhbmdlLlxuICAgIGlmIChcbiAgICAgIHRoaXMuaXRlbS5zeXN0ZW0ubG9jYXRpb25zPy5saXN0Py5sZW5ndGggJiZcbiAgICAgIGRhdGEuc3lzdGVtLnN0YXJ0aW5nSW5kZXggPiB0aGlzLml0ZW0uc3lzdGVtLmxvY2F0aW9ucy5saXN0Lmxlbmd0aFxuICAgICkge1xuICAgICAgZGF0YS5zeXN0ZW0uc3RhcnRpbmdJbmRleCA9IHRoaXMuaXRlbS5zeXN0ZW0ubG9jYXRpb25zLmxpc3QubGVuZ3RoXG4gICAgfVxuXG4gICAgaWYgKGRhdGEuc3lzdGVtLnBhcnRpY2lwYW50cykge1xuICAgICAgY29uc3QgcGFydGljaXBhbnRzID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5pdGVtLnN5c3RlbS5wYXJ0aWNpcGFudHMpXG4gICAgICAvLyBIYW5kbGUgcGFydGljaXBhbnRzIGFycmF5XG4gICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhkYXRhLnN5c3RlbS5wYXJ0aWNpcGFudHMpKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gcGFydGljaXBhbnRzLmZpbmRJbmRleChwID0+IHAudXVpZCA9PT0gaylcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkgdWkubm90aWZpY2F0aW9ucy5lcnJvcignUGFydGljaXBhbnQgdGFibGUgY29ycnVwdGVkJylcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgY29uc3Qgb3JpZ2luYWwgPSBwYXJ0aWNpcGFudHNbaW5kZXhdXG4gICAgICAgICAgY29uc3QgY2xlYW5lZCA9IGNsZWFuKHYpXG4gICAgICAgICAgZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChvcmlnaW5hbCwgY2xlYW5lZClcbiAgICAgICAgICBwYXJ0aWNpcGFudHNbaW5kZXhdID0gb3JpZ2luYWxcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkYXRhLnN5c3RlbS5wYXJ0aWNpcGFudHMgPSBwYXJ0aWNpcGFudHNcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5sb2NhdGlvbnMpIHtcbiAgICAgIGNvbnN0IGxvY2F0aW9ucyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuaXRlbS5zeXN0ZW0ubG9jYXRpb25zLmxpc3QpXG4gICAgICAvLyBIYW5kbGUgbG9jYXRpb25zIGxpc3RcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGEubG9jYXRpb25zKSkge1xuICAgICAgICBjb25zdCBsb2NhdGlvbkluZGV4ID0gbG9jYXRpb25zLmZpbmRJbmRleChsID0+IGwudXVpZCA9PT0ga2V5KVxuICAgICAgICBpZiAobG9jYXRpb25JbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKCdMb2NhdGlvbnMgdGFibGUgY29ycnVwdGVkJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBvcmlnaW5hbExvY2F0aW9uID0gbG9jYXRpb25zW2xvY2F0aW9uSW5kZXhdXG4gICAgICAgICAgY29uc3QgY2xlYW5lZCA9IGNsZWFuKHZhbHVlKVxuICAgICAgICAgIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qob3JpZ2luYWxMb2NhdGlvbiwgY2xlYW5lZClcbiAgICAgICAgICBsb2NhdGlvbnNbbG9jYXRpb25JbmRleF0gPSBvcmlnaW5hbExvY2F0aW9uXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZGVsZXRlIGRhdGEubG9jYXRpb25zXG4gICAgICBkYXRhLnN5c3RlbS5sb2NhdGlvbnMgPSB7IGxpc3Q6IGxvY2F0aW9ucyB9XG4gICAgfVxuICAgIC8vIGNvbnN0IHBhcnRpY2lwYW50cyA9IGRhdGEuc3lzdGVtPy5wYXJ0aWNpcGFudHM7XG4gICAgLy8gaWYoIHBhcnRpY2lwYW50cykgZGF0YS5zeXN0ZW0ucGFydGljaXBhbnRzID0gT2JqZWN0LnZhbHVlcyggcGFydGljaXBhbnRzKS5tYXAoIHAgPT4gY2xlYW4ocCkpO1xuXG4gICAgLy8gUmV0dXJuIHRoZSBmbGF0dGVuZWQgc3VibWlzc2lvbiBkYXRhXG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMuZmxhdHRlbk9iamVjdChkYXRhKVxuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICAvLyBhc3luYyBfb25TdWJtaXQoLi4uYXJncykge1xuICAvLyAgYXdhaXQgc3VwZXIuX29uU3VibWl0KC4uLmFyZ3MpO1xuICAvLyB9XG5cbiAgYXN5bmMgX3VwZGF0ZU9iamVjdCAoZXZlbnQsIGZvcm1EYXRhKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGNvbnN0IG92ZXJyaWRlID0gdGFyZ2V0Py5kYXRhc2V0Py5vdmVycmlkZSA9PT0gJ3RydWUnXG4gICAgaWYgKHRhcmdldD8ubmFtZT8uaW5jbHVkZXMoJy5ocCcpKSB7XG4gICAgICBjb25zdCBbLCAsIHV1aWRdID0gdGFyZ2V0Lm5hbWUuc3BsaXQoJy4nKVxuICAgICAgY29uc3QgcGFydGljaXBhbnQgPSB0aGlzLml0ZW0uZ2V0UGFydGljaXBhbnQodXVpZClcbiAgICAgIGlmIChwYXJ0aWNpcGFudCAmJiBwYXJ0aWNpcGFudC5hY3Rvcikge1xuICAgICAgICBpZiAoIWlzTmFOKE51bWJlcih0YXJnZXQudmFsdWUpKSkge1xuICAgICAgICAgIGF3YWl0IHBhcnRpY2lwYW50LmFjdG9yLnNldEhwKE51bWJlcih0YXJnZXQudmFsdWUpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvdmVycmlkZSkge1xuICAgICAgY29uc3QgWywgdHlwZSwgdXVpZCwgc3ViVHlwZSwgZGF0YV0gPSB0YXJnZXQubmFtZS5zcGxpdCgnLicpXG4gICAgICBjb25zdCBpbmRleCA9IHRoaXMuZmluZFBhcnRpY2lwYW50SW5kZXgodXVpZClcbiAgICAgIGlmIChcbiAgICAgICAgdHlwZSA9PT0gJ3BhcnRpY2lwYW50cycgJiZcbiAgICAgICAgIWlzTmFOKGluZGV4KSAmJlxuICAgICAgICBzdWJUeXBlID09PSAnc3BlZWQtY2hlY2snXG4gICAgICApIHtcbiAgICAgICAgaWYgKGRhdGEgPT09ICduYW1lJykge1xuICAgICAgICAgIC8vIENoYW5naW5nIG5hbWUgd2lsbCByZW1vdmUgYWxsIG90aGVyIHJlZiAhXG4gICAgICAgICAgY29uc3QgcGFydGljaXBhbnRzID0gdGhpcy5pdGVtLnN5c3RlbS5wYXJ0aWNpcGFudHNcbiAgICAgICAgICAgID8gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5pdGVtLnN5c3RlbS5wYXJ0aWNpcGFudHMpXG4gICAgICAgICAgICA6IFtdXG4gICAgICAgICAgaWYgKHBhcnRpY2lwYW50c1tpbmRleF0uc3BlZWRDaGVjaykge1xuICAgICAgICAgICAgZGVsZXRlIHBhcnRpY2lwYW50c1tpbmRleF0uc3BlZWRDaGVjay5pZFxuICAgICAgICAgICAgZGVsZXRlIHBhcnRpY2lwYW50c1tpbmRleF0uc3BlZWRDaGVjay50eXBlXG4gICAgICAgICAgfSBlbHNlIHBhcnRpY2lwYW50c1tpbmRleF0uc3BlZWRDaGVjayA9IHt9XG4gICAgICAgICAgcGFydGljaXBhbnRzW2luZGV4XS5zcGVlZENoZWNrLm5hbWUgPSB0YXJnZXQudmFsdWVcbiAgICAgICAgICBhd2FpdCB0aGlzLml0ZW0udXBkYXRlKHsgJ3N5c3RlbS5wYXJ0aWNpcGFudHMnOiBwYXJ0aWNpcGFudHMgfSlcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBzdXBlci5fdXBkYXRlT2JqZWN0KGV2ZW50LCBmb3JtRGF0YSlcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBzZXRTY3JvbGwgKGFwcCwgaHRtbCwgZGF0YSkge1xuICAgIGlmICghZGF0YS5lZGl0YWJsZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IGluaXRpYWxPcGVuaW5nID0gaHRtbFswXS5jbGFzc0xpc3QuY29udGFpbnMoJ3dpbmRvdy1hcHAnKVxuICAgIGNvbnN0IGNoYXNlVHJhY2sgPSBodG1sWzBdLnF1ZXJ5U2VsZWN0b3IoJy5jaGFzZS10cmFjaycpXG4gICAgaWYgKCFjaGFzZVRyYWNrKSByZXR1cm5cblxuICAgIGxldCBzdGFydCA9IGRhdGEuZGF0YS5zY3JvbGw/LmNoYXNlVHJhY2suZnJvbVxuICAgIGxldCBlbmQgPSBkYXRhLmRhdGEuc2Nyb2xsPy5jaGFzZVRyYWNrLnRvXG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHN0YXJ0ID0gMFxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGVuZCA9IC0xXG4gICAgfVxuXG4gICAgaWYgKGluaXRpYWxPcGVuaW5nKSB7XG4gICAgICBjb25zdCByZW1TdHJpbmcgPSAkKCc6cm9vdCcpLmNzcygnZm9udC1zaXplJylcbiAgICAgIGNvbnN0IHJlbVNpemUgPSBOdW1iZXIocmVtU3RyaW5nLnJlcGxhY2UoJ3B4JywgJycpKVxuICAgICAgaWYgKGFwcC5pdGVtLnN0YXJ0ZWQpIHtcbiAgICAgICAgY29uc3QgcENvdW50ID0gYXBwLml0ZW0uYWN0dWFsUGFydGljaXBhbnRzPy5sZW5ndGhcbiAgICAgICAgY29uc3Qgd2lkdGggPSAocENvdW50ICogMTEuMiArIDMpICogcmVtU2l6ZVxuICAgICAgICBhcHAuYWN0aXZhdGVUYWIoJ3NldHVwJylcbiAgICAgICAgLy8gYXBwLl90YWJzWzBdLmFjdGl2ZSA9ICdzZXR1cCdcbiAgICAgICAgYXBwLnBvc2l0aW9uLndpZHRoID0gTWF0aC5tYXgod2lkdGgsIDQwICogcmVtU2l6ZSlcbiAgICAgICAgLy8gaHRtbC5jc3MoJ3dpZHRoJywgYCR7d2lkdGh9cHhgKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBwLnBvc2l0aW9uLndpZHRoID0gNDUgKiByZW1TaXplXG4gICAgICB9XG4gICAgICByZXR1cm4gYXdhaXQgYXBwLml0ZW0uYWN0aXZhdGVOZXh0UGFydGljaXBhbnRUdXJuKHsgaHRtbCB9KSAvLyBodG1sIGlzIG5vdCByZW5kZXJlZCwgZWxlbWVudCBoYXZlIHNpemUgPSAwXG4gICAgICAvLyBpZiAoZW5kID4gMCkge1xuICAgICAgLy8gICBzdGFydCA9IDBcbiAgICAgIC8vIH0gZWxzZSBpZiAoc3RhcnQgPiAwKSB7XG4gICAgICAvLyAgIGVuZCA9IHN0YXJ0XG4gICAgICAvLyAgIHN0YXJ0ID0gMFxuICAgICAgLy8gfVxuICAgIH1cblxuICAgIGlmIChzdGFydCAmJiBzdGFydCAhPT0gLTEpIHtcbiAgICAgIGNoYXNlVHJhY2suc2Nyb2xsVG8oe1xuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IHN0YXJ0LFxuICAgICAgICBiZWhhdmlvcjogJ2luc3RhbnQnXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChlbmQgIT09IC0xKSB7XG4gICAgICBjaGFzZVRyYWNrLnNjcm9sbFRvKHtcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiBlbmQsXG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyBhd2FpdCBhcHAuaXRlbS51cGRhdGUoeyAnZGF0YS50cmFja1Njcm9sbFBvc2l0aW9uJzogZWxlbWVudENlbnRlclJlbGF0aXZlTGVmdCB9KVxuICB9XG5cbiAgc3RhdGljIG9uQ2xvc2UgKGFwcCwgaHRtbCkge1xuICAgIGFwcC5pdGVtLnVwZGF0ZSh7ICdzeXN0ZW0udHJhY2tTY3JvbGxQb3NpdGlvbic6IC0xIH0pXG4gIH1cblxuICAvLyBhc3luYyBfb25TaGVldFJlYWR5IChodG1sKSB7XG4gIC8vICAgY29uc3QgdHJhY2sgPSBodG1sLmZpbmQoJy5jaGFzZS10cmFjaycpXG4gIC8vICAgY29uc3QgZWxlbWVudCA9ICQodHJhY2spLmZpbmQoJy5hY3RpdmUnKVxuXG4gIC8vICAgY29uc3QgZWxlbWVudGxlZnQgPSBlbGVtZW50WzBdLm9mZnNldExlZnRcbiAgLy8gICBjb25zdCBkaXZXaWR0aCA9IHRyYWNrWzBdLmNsaWVudFdpZHRoXG4gIC8vICAgbGV0IGVsZW1lbnRDZW50ZXJSZWxhdGl2ZUxlZnQgPSBlbGVtZW50bGVmdCAtIGRpdldpZHRoIC8gMlxuICAvLyAgIGlmIChlbGVtZW50Q2VudGVyUmVsYXRpdmVMZWZ0IDwgMCkgZWxlbWVudENlbnRlclJlbGF0aXZlTGVmdCA9IDBcblxuICAvLyAgIGNvbnN0IHNjcm9sbFBvc2l0aW9uID0gdGhpcy5pdGVtLnN5c3RlbS50cmFja1Njcm9sbFBvc2l0aW9uXG4gIC8vICAgaWYgKCF0cmFjay5sZW5ndGgpIHJldHVyblxuICAvLyAgIGlmICghc2Nyb2xsUG9zaXRpb24pIHJldHVyblxuICAvLyAgIGNvbnN0IHRyYWNrRWxlbWVudCA9IHRyYWNrWzBdXG4gIC8vICAgdHJhY2tFbGVtZW50LnNjcm9sbFRvKHtcbiAgLy8gICAgIHRvcDogMCxcbiAgLy8gICAgIGxlZnQ6IGVsZW1lbnRDZW50ZXJSZWxhdGl2ZUxlZnQsXG4gIC8vICAgICBiZWhhdmlvcjogJ2luc3RhbnQnXG4gIC8vICAgfSlcblxuICAvLyAgIC8vVE9ETyA6IGNvdWxkZCB1c2UgcGFyZW50Lm9mZnNldFRvcCBldCBjaGlsZC5vZmZzZXRUb3AgdG8gY2VudGVyIHRoZSBhY3RpdmUgZWxlbWVudFxuXG4gIC8vICAgLy8gY29uc3QgYWN0aXZlID0gaHRtbC5maW5kKCcubmFtZS1jb250YWluZXIuYWN0aXZlJylcbiAgLy8gICAvLyBpZiggYWN0aXZlKXtcbiAgLy8gICAvLyAgIGNvbnN0IGVsZW1lbnQgPSBhY3RpdmVbMF1cbiAgLy8gICAvLyAgIGVsZW1lbnQuc2Nyb2xsSW50b1ZpZXcoe2JlaGF2aW9yOiBcInNtb290aFwiLCBibG9jazogXCJlbmRcIiwgaW5saW5lOiBcImNlbnRlclwifSlcbiAgLy8gICAvLyBlbGVtZW50LnNjcm9sbEludG9WaWV3KGZhbHNlKVxuICAvLyAgIC8vIH1cbiAgLy8gICAvLyB9KVxuICAvLyB9XG5cbiAgZmluZFBhcnRpY2lwYW50SW5kZXggKHV1aWQpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtLnN5c3RlbS5wYXJ0aWNpcGFudHMuZmluZEluZGV4KHAgPT4gcC51dWlkID09PSB1dWlkKVxuICB9XG5cbiAgZmluZExvY2F0aW9uSW5kZXggKHV1aWQpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtLnN5c3RlbS5sb2NhdGlvbnMubGlzdC5maW5kSW5kZXgocCA9PiBwLnV1aWQgPT09IHV1aWQpXG4gIH1cblxuICBmaW5kTG9jYXRpb24gKHV1aWQpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtLnN5c3RlbS5sb2NhdGlvbnMubGlzdC5maW5kKHAgPT4gcC51dWlkID09PSB1dWlkKVxuICB9XG5cbiAgZmluZEluZGV4IChsaXN0LCB1dWlkKSB7XG4gICAgcmV0dXJuIGxpc3QuZmluZEluZGV4KHAgPT4gcC51dWlkID09PSB1dWlkKVxuICB9XG5cbiAgYXN5bmMgX29uRHJvcERvd25FbGVtZW50U2VsZWN0ZWQgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIHRhcmdldC5jbG9zZXN0KCcuZHJvcGRvd24tY29udGVudCcpPy5jbGFzc0xpc3QudG9nZ2xlKCdzaG93JylcbiAgICBjb25zdCBhc3Npc3RhbnRVdWlkID0gdGFyZ2V0LmNsb3Nlc3QoJy5pbml0aWF0aXZlLWJsb2NrJyk/LmRhdGFzZXQ/LnV1aWRcbiAgICBjb25zdCBiZW5lZmljaWFyeVV1aWQgPSB0YXJnZXQuZGF0YXNldC5iZW5lZmljaWFyeVV1aWRcbiAgICBhd2FpdCB0aGlzLml0ZW0uYXNzaXN0UGFydGljaXBhbnQoYXNzaXN0YW50VXVpZCwgYmVuZWZpY2lhcnlVdWlkKVxuICB9XG5cbiAgYXN5bmMgX29uVG9nZ2xlIChldmVudCkge1xuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICAvLyBjb25zdCBsb2NhdGlvbkVsZW1lbnQgPSB0YXJnZXQuY2xvc2VzdCgnLmxvY2F0aW9uLm9ic3RhY2xlJylcbiAgICAvLyBjb25zdCB1dWlkID0gbG9jYXRpb25FbGVtZW50LmRhdGFzZXQudXVpZFxuICAgIC8vIGNvbnN0IGxvY2F0aW9ucyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuaXRlbS5zeXN0ZW0ubG9jYXRpb25zLmxpc3QpXG4gICAgLy8gY29uc3QgbG9jYXRpb25JbmRleCA9IHRoaXMuZmluZEluZGV4KGxvY2F0aW9ucywgdXVpZClcbiAgICBjb25zdCB0b2dnbGUgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCd0b2dnbGUnKVxuICAgIGNvbnN0IGRhdGEgPSBmb3VuZHJ5LnV0aWxzLmV4cGFuZE9iamVjdCh7XG4gICAgICBbdG9nZ2xlXTogIXRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3N3aXRjaGVkLW9uJylcbiAgICB9KVxuICAgIGlmIChkYXRhLmxvY2F0aW9ucykge1xuICAgICAgY29uc3QgbG9jYXRpb25zID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5pdGVtLnN5c3RlbS5sb2NhdGlvbnMubGlzdClcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGEubG9jYXRpb25zKSkge1xuICAgICAgICBjb25zdCBsb2NhdGlvbkluZGV4ID0gbG9jYXRpb25zLmZpbmRJbmRleChsID0+IGwudXVpZCA9PT0ga2V5KVxuICAgICAgICBpZiAobG9jYXRpb25JbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKCdMb2NhdGlvbnMgdGFibGUgY29ycnVwdGVkJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBvcmlnaW5hbExvY2F0aW9uID0gbG9jYXRpb25zW2xvY2F0aW9uSW5kZXhdXG4gICAgICAgICAgY29uc3QgY2xlYW5lZCA9IGNsZWFuKHZhbHVlKVxuICAgICAgICAgIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qob3JpZ2luYWxMb2NhdGlvbiwgY2xlYW5lZClcbiAgICAgICAgICBsb2NhdGlvbnNbbG9jYXRpb25JbmRleF0gPSBvcmlnaW5hbExvY2F0aW9uXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGF3YWl0IHRoaXMuaXRlbS51cGRhdGVMb2NhdGlvbnNMaXN0KGxvY2F0aW9ucylcbiAgICB9XG4gIH1cblxuICAvLyBhc3luYyBfb25PYnN0YWNsZVRvZ2dsZUNsaWNrIChldmVudCkge1xuICAvLyAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgLy8gICBjb25zdCBsb2NhdGlvbkVsZW1lbnQgPSB0YXJnZXQuY2xvc2VzdCgnLm9ic3RhY2xlJylcbiAgLy8gICBjb25zdCB1dWlkID0gbG9jYXRpb25FbGVtZW50LmRhdGFzZXQudXVpZFxuICAvLyAgIGNvbnN0IGxvY2F0aW9ucyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuaXRlbS5zeXN0ZW0ubG9jYXRpb25zLmxpc3QpXG4gIC8vICAgY29uc3QgbG9jYXRpb25JbmRleCA9IHRoaXMuZmluZEluZGV4KGxvY2F0aW9ucywgdXVpZClcbiAgLy8gICBsb2NhdGlvbnNbbG9jYXRpb25JbmRleF0ub2JzdGFjbGUgPSAhbG9jYXRpb25zW2xvY2F0aW9uSW5kZXhdLm9ic3RhY2xlXG4gIC8vICAgaWYgKCFsb2NhdGlvbnNbbG9jYXRpb25JbmRleF0ub2JzdGFjbGVEZXRhaWxzKSB7XG4gIC8vICAgICBsb2NhdGlvbnNbbG9jYXRpb25JbmRleF0ub2JzdGFjbGVEZXRhaWxzID0ge1xuICAvLyAgICAgICBiYXJyaWVyOiB0cnVlXG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIGF3YWl0IHRoaXMuaXRlbS51cGRhdGVMb2NhdGlvbnNMaXN0KGxvY2F0aW9ucylcbiAgLy8gfVxuXG4gIGFzeW5jIF9vbk9ic3RhY2xlVHlwZUNsaWNrIChldmVudCkge1xuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCBsb2NhdGlvbkVsZW1lbnQgPSB0YXJnZXQuY2xvc2VzdCgnLm9ic3RhY2xlJylcbiAgICBjb25zdCB1dWlkID0gbG9jYXRpb25FbGVtZW50LmRhdGFzZXQudXVpZFxuICAgIGNvbnN0IGxvY2F0aW9ucyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuaXRlbS5zeXN0ZW0ubG9jYXRpb25zLmxpc3QpXG4gICAgY29uc3QgbG9jYXRpb25JbmRleCA9IHRoaXMuZmluZEluZGV4KGxvY2F0aW9ucywgdXVpZClcbiAgICBpZiAoIWxvY2F0aW9uc1tsb2NhdGlvbkluZGV4XS5vYnN0YWNsZURldGFpbHMpIHtcbiAgICAgIGxvY2F0aW9uc1tsb2NhdGlvbkluZGV4XS5vYnN0YWNsZURldGFpbHMgPSB7fVxuICAgIH1cbiAgICBjb25zdCBvYnN0YWNsZSA9IGxvY2F0aW9uc1tsb2NhdGlvbkluZGV4XS5vYnN0YWNsZURldGFpbHNcbiAgICBjb25zdCB0eXBlID0gdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnYmFycmllcicpID8gJ2JhcnJpZXInIDogJ2hhemFyZCdcbiAgICBjb25zdCBhY3RpdmUgPSBvYnN0YWNsZVt0eXBlXVxuICAgIG9ic3RhY2xlLmJhcnJpZXIgPSBmYWxzZVxuICAgIG9ic3RhY2xlLmhhemFyZCA9IGZhbHNlXG4gICAgb2JzdGFjbGVbdHlwZV0gPSAhYWN0aXZlXG4gICAgbG9jYXRpb25zW2xvY2F0aW9uSW5kZXhdLm9ic3RhY2xlID0gIWFjdGl2ZVxuICAgIC8vIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdiYXJyaWVyJykpIHtcbiAgICAvLyAgIGxvY2F0aW9uc1tsb2NhdGlvbkluZGV4XS5vYnN0YWNsZURldGFpbHMuYmFycmllciA9ICFsb2NhdGlvbnNbXG4gICAgLy8gICAgIGxvY2F0aW9uSW5kZXhcbiAgICAvLyAgIF0ub2JzdGFjbGVEZXRhaWxzLmJhcnJpZXJcbiAgICAvLyAgIGxvY2F0aW9uc1tsb2NhdGlvbkluZGV4XS5vYnN0YWNsZURldGFpbHMuaGF6YXJkID0gIWxvY2F0aW9uc1tcbiAgICAvLyAgICAgbG9jYXRpb25JbmRleFxuICAgIC8vICAgXS5vYnN0YWNsZURldGFpbHMuYmFycmllclxuICAgIC8vIH0gZWxzZSBpZiAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnaGF6YXJkJykpIHtcbiAgICAvLyAgIGxvY2F0aW9uc1tsb2NhdGlvbkluZGV4XS5vYnN0YWNsZURldGFpbHMuaGF6YXJkID0gIWxvY2F0aW9uc1tcbiAgICAvLyAgICAgbG9jYXRpb25JbmRleFxuICAgIC8vICAgXS5vYnN0YWNsZURldGFpbHMuaGF6YXJkXG4gICAgLy8gICBsb2NhdGlvbnNbbG9jYXRpb25JbmRleF0ub2JzdGFjbGVEZXRhaWxzLmJhcnJpZXIgPSAhbG9jYXRpb25zW1xuICAgIC8vICAgICBsb2NhdGlvbkluZGV4XG4gICAgLy8gICBdLm9ic3RhY2xlRGV0YWlscy5oYXphcmRcbiAgICAvLyB9XG4gICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZUxvY2F0aW9uc0xpc3QobG9jYXRpb25zKVxuICB9XG5cbiAgYXN5bmMgX29uTG9jYXRpb25DbGljayAoZXZlbnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgY29uc3QgbG9jYXRpb25FbGVtZW50ID0gdGFyZ2V0LmNsb3Nlc3QoJy5jaGFzZS1sb2NhdGlvbicpXG4gICAgY29uc3QgbFV1aWQgPSBsb2NhdGlvbkVsZW1lbnQuZGF0YXNldC51dWlkXG4gICAgYXdhaXQgdGhpcy5pdGVtLmFjdGl2YXRlTG9jYXRpb24obFV1aWQpXG4gIH1cblxuICBhc3luYyBfb25Mb2NhdGlvbkNvbnRyb2xDbGljayAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdpbmFjdGl2ZScpKSByZXR1cm5cbiAgICBjb25zdCBhY3Rpb24gPSB0YXJnZXQuZGF0YXNldC5hY3Rpb25cbiAgICBjb25zdCBsb2NhdGlvbkVsZW1lbnQgPSB0YXJnZXQuY2xvc2VzdCgnLmNoYXNlLWxvY2F0aW9uJylcbiAgICBjb25zdCBsVXVpZCA9IGxvY2F0aW9uRWxlbWVudC5kYXRhc2V0LnV1aWRcbiAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgY2FzZSAncmVtb3ZlJzpcbiAgICAgICAgYXdhaXQgdGhpcy5pdGVtLnJlbW92ZUxvY2F0aW9uKGxVdWlkKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnYWRkLWFmdGVyJzpcbiAgICAgICAgYXdhaXQgdGhpcy5pdGVtLmluc2VydExvY2F0aW9uKGxVdWlkLCB7IHNoaWZ0OiAxIH0pXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgJ2FkZC1iZWZvcmUnOlxuICAgICAgICBhd2FpdCB0aGlzLml0ZW0uaW5zZXJ0TG9jYXRpb24obFV1aWQsIHsgc2hpZnQ6IDAgfSlcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSAnYWRkLXBhcnRpY2lwYW50JzpcbiAgICAgICAgQ29DN0NoYXNlUGFydGljaXBhbnRJbXBvcnRlci5jcmVhdGUoe1xuICAgICAgICAgIGNoYXNlVXVpZDogdGhpcy5pdGVtLnV1aWQsXG4gICAgICAgICAgbG9jYXRpb25VdWlkOiBsVXVpZCxcbiAgICAgICAgICBkcm9wRGF0YToge31cbiAgICAgICAgfSlcbiAgICAgICAgYnJlYWtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgLy8gdWkubm90aWZpY2F0aW9ucy5pbmZvKGBMb2NhdGlvbiAke2xVdWlkfSBDbGlja2VkLiBBY3Rpb246ICR7YWN0aW9ufWApXG4gIH1cblxuICBhc3luYyBfb25DaGFzZVBhcnRpY2lwYW50Q2xpY2sgKGV2ZW50KSB7XG4gICAgY29uc3QgcFV1aWQgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQ/LnV1aWRcbiAgICBhd2FpdCB0aGlzLml0ZW0uYWN0aXZhdGVQYXJ0aWNpcGFudChwVXVpZClcbiAgfVxuXG4gIGFzeW5jIF9vblBhcnRpY2lwYW50Q29udHJvbENsaWNrZWQgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBpZiAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnaW5hY3RpdmUnKSkgcmV0dXJuXG4gICAgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2Ryb3Bkb3duJykpIHJldHVyblxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgICBjb25zdCBwYXJ0aWNpcGFudFV1aWQgPSB0YXJnZXQuY2xvc2VzdCgnLmluaXRpYXRpdmUtYmxvY2snKT8uZGF0YXNldD8udXVpZFxuICAgIGlmICghcGFydGljaXBhbnRVdWlkKSByZXR1cm5cbiAgICBzd2l0Y2ggKHRhcmdldC5kYXRhc2V0LmFjdGlvbikge1xuICAgICAgY2FzZSAnZHJhd0d1bic6XG4gICAgICAgIGF3YWl0IHRoaXMudG9nZ2xlUGFydGljaXBhbnRHdW4ocGFydGljaXBhbnRVdWlkKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnZGVjcmVhc2VBY3Rpb25zJzpcbiAgICAgICAgYXdhaXQgdGhpcy5fb25DaGFuZ2VNb3ZlbWVudEFjdGlvbnMoLTEsIGV2ZW50KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnaW5jcmVhc2VBY3Rpb25zJzpcbiAgICAgICAgYXdhaXQgdGhpcy5fb25DaGFuZ2VNb3ZlbWVudEFjdGlvbnMoMSwgZXZlbnQpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdtb3ZlQmFja3dhcmQnOlxuICAgICAgICBhd2FpdCB0aGlzLml0ZW0ubW92ZVBhcnRpY2lwYW50KHBhcnRpY2lwYW50VXVpZCwgLTEsIHsgcmVuZGVyOiB0cnVlIH0pXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdtb3ZlRm9yd2FyZCc6XG4gICAgICAgIGF3YWl0IHRoaXMuaXRlbS5tb3ZlUGFydGljaXBhbnQocGFydGljaXBhbnRVdWlkLCAxLCB7IHJlbmRlcjogdHJ1ZSB9KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnYWN0aXZhdGVQYXJ0aWNpcGFudCc6XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLml0ZW0uYWN0aXZhdGVQYXJ0aWNpcGFudChwYXJ0aWNpcGFudFV1aWQpXG4gICAgICBjYXNlICdib251c0RpY2UnOlxuICAgICAgICB7XG4gICAgICAgICAgY29uc3QgZGljZU51bWJlciA9IHRhcmdldC5kYXRhc2V0LmNvdW50XG4gICAgICAgICAgYXdhaXQgdGhpcy5pdGVtLnRvZ2dsZUJvbnVzRGljZShwYXJ0aWNpcGFudFV1aWQsIGRpY2VOdW1iZXIpXG4gICAgICAgICAgdGhpcy5pdGVtLmFjdGl2YXRlTmV4dFBhcnRpY2lwYW50VHVybigpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2NhdXRpb3VzQXBwcm9hY2gnOlxuICAgICAgICBhd2FpdCB0aGlzLml0ZW0uY2F1dGlvdXNBcHByb2FjaChwYXJ0aWNpcGFudFV1aWQpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdlZGl0UGFydGljaXBhbnQnOlxuICAgICAgICB7XG4gICAgICAgICAgY29uc3QgcGFydGljaXBhbnQgPSB0aGlzLml0ZW0uZ2V0UGFydGljaXBhbnQocGFydGljaXBhbnRVdWlkKVxuICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gdGhpcy5pdGVtLmdldFBhcnRpY2lwYW50TG9jYXRpb24ocGFydGljaXBhbnRVdWlkKVxuICAgICAgICAgIHBhcnRpY2lwYW50LmRhdGEuY2hhc2VVdWlkID0gdGhpcy5pdGVtLnV1aWRcbiAgICAgICAgICBwYXJ0aWNpcGFudC5kYXRhLmxvY2F0aW9uVXVpZCA9IGxvY2F0aW9uLnV1aWRcbiAgICAgICAgICBwYXJ0aWNpcGFudC5kYXRhLnVwZGF0ZSA9IHRydWVcbiAgICAgICAgICBDb0M3Q2hhc2VQYXJ0aWNpcGFudEltcG9ydGVyLmNyZWF0ZShwYXJ0aWNpcGFudC5kYXRhKVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdyZW1vdmVQYXJ0aWNpcGFudCc6XG4gICAgICAgIGF3YWl0IHRoaXMuaXRlbS5yZW1vdmVQYXJ0aWNpcGFudChwYXJ0aWNpcGFudFV1aWQpXG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIHRoaXMuaXRlbS5hY3RpdmF0ZU5leHRQYXJ0aWNpcGFudFR1cm4oKVxuICB9XG5cbiAgYXN5bmMgX29uQ2hhc2VDb250cm9sQ2xpY2tlZCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgICBjb25zdCBsb2NhdGlvblV1aWQgPSB0YXJnZXQuY2xvc2VzdCgnLm9ic3RhY2xlJyk/LmRhdGFzZXQ/LnV1aWRcbiAgICBpZiAoIWxvY2F0aW9uVXVpZCkgcmV0dXJuXG4gICAgc3dpdGNoICh0YXJnZXQuZGF0YXNldC5hY3Rpb24pIHtcbiAgICAgIGNhc2UgJ29ic3RhY2xlLXNraWxsLWNoZWNrJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbS5hY3RpdmVQYXJ0aWNpcGFudE9ic3RhY2xlQ2hlY2sobG9jYXRpb25VdWlkKVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9vbkNoYW5nZU1vdmVtZW50QWN0aW9ucyAoY291bnQsIGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGNvbnN0IHBhcnRpY2lwYW50VXVpZCA9IHRhcmdldC5jbG9zZXN0KCcuaW5pdGlhdGl2ZS1ibG9jaycpPy5kYXRhc2V0Py51dWlkXG4gICAgaWYgKCFwYXJ0aWNpcGFudFV1aWQpIHJldHVyblxuICAgIGNvbnN0IHBhcnRpY2lwYW50cyA9IHRoaXMuaXRlbS5wYXJ0aWNpcGFudHNcbiAgICBjb25zdCBwYXJ0aWNpcGFudCA9IHBhcnRpY2lwYW50cy5maW5kKHAgPT4gcGFydGljaXBhbnRVdWlkID09PSBwLnV1aWQpXG4gICAgaWYgKHBhcnRpY2lwYW50Lmhhc01heE12dEFjdGlvbnMgJiYgY291bnQgPiAwKSByZXR1cm5cbiAgICBwYXJ0aWNpcGFudC5hbHRlck1vdmVtZW50QWN0aW9ucyhjb3VudClcblxuICAgIC8vIGNvbnN0IHNoZWV0ID0gdGFyZ2V0LmNsb3Nlc3QoJy5jb2M3Lml0ZW0uY2hhc2UnKVxuICAgIC8vIGNvbnN0IGNoYXNlVHJhY2sgPSBzaGVldC5xdWVyeVNlbGVjdG9yKCcuY2hhc2UtdHJhY2snKVxuICAgIC8vIGlmIChjaGFzZVRyYWNrKVxuICAgIC8vICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZSh7XG4gICAgLy8gICAgICdkYXRhLnRyYWNrU2Nyb2xsUG9zaXRpb24nOiBjaGFzZVRyYWNrLnNjcm9sbExlZnRcbiAgICAvLyAgIH0pXG4gICAgYXdhaXQgdGhpcy5pdGVtLnNldGNoYXNlVHJhY2tTY3JvbGwoeyByZW5kZXI6IGZhbHNlIH0pXG4gICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZVBhcnRpY2lwYW50cyhwYXJ0aWNpcGFudHMpXG4gIH1cblxuICBhc3luYyBfb25CdXR0b25DbGljayAoZXZlbnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgY29uc3QgYWN0aW9uID0gdGFyZ2V0LmRhdGFzZXQ/LmFjdGlvblxuICAgIGlmICghYWN0aW9uKSByZXR1cm5cbiAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgY2FzZSAnaW5pdCc6XG4gICAgICAgIGlmIChcbiAgICAgICAgICAhaXNOYU4odGhpcy5pdGVtLnN5c3RlbS5sb2NhdGlvbnMudG90YWwpICYmXG4gICAgICAgICAgdGhpcy5pdGVtLnN5c3RlbS5sb2NhdGlvbnMudG90YWwgPiAwXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IGxvY2F0aW9ucyA9IEFycmF5LmFwcGx5KFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIEFycmF5KHRoaXMuaXRlbS5zeXN0ZW0ubG9jYXRpb25zLnRvdGFsKVxuICAgICAgICAgICkubWFwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHV1aWQ6IGZvdW5kcnkudXRpbHMucmFuZG9tSUQoMTYpIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIGxvY2F0aW9uc1swXS5uYW1lID0gJ1N0YXJ0J1xuICAgICAgICAgIGlmIChsb2NhdGlvbnMubGVuZ3RoID4gMSkgbG9jYXRpb25zW2xvY2F0aW9ucy5sZW5ndGggLSAxXS5uYW1lID0gJ0VuZCdcbiAgICAgICAgICBhd2FpdCB0aGlzLml0ZW0udXBkYXRlTG9jYXRpb25zTGlzdChsb2NhdGlvbnMpXG4gICAgICAgIH1cblxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAncmVzZXQnOlxuICAgICAgICBEaWFsb2cuY29uZmlybSh7XG4gICAgICAgICAgdGl0bGU6IGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Db25maXJtUmVzZXRDaGFzZScpfWAsXG4gICAgICAgICAgY29udGVudDogYDxwPiR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNvbmZpcm1SZXNldENoYXNlSGludCcpfTwvcD5gLFxuICAgICAgICAgIHllczogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZUxvY2F0aW9uc0xpc3QoW10pXG4gICAgICAgICAgICBhd2FpdCB0aGlzLml0ZW0uc3RvcCgpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlICdjdXQyY2hhc2UnOlxuICAgICAgICBpZiAodGhpcy5pdGVtLmFsbEhhdmVTcGVlZFJvbGwpIHtcbiAgICAgICAgICBEaWFsb2cuY29uZmlybSh7XG4gICAgICAgICAgICB0aXRsZTogYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkNvbmZpcm1DdXQyQ2hhc2UnKX1gLFxuICAgICAgICAgICAgY29udGVudDogYDxwPiR7Z2FtZS5pMThuLmxvY2FsaXplKFxuICAgICAgICAgICAgICAnQ29DNy5Db25maXJtQ3V0MkNoYXNlSGludCdcbiAgICAgICAgICAgICl9PC9wPmAsXG4gICAgICAgICAgICB5ZXM6ICgpID0+IHRoaXMuaXRlbS5jdXRUb1RoZUNoYXNlKClcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuTm90QWxsSGF2ZVNwZWVkUm9sbCcpKVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgJ3Jlc3RhcnQnOlxuICAgICAgICBEaWFsb2cuY29uZmlybSh7XG4gICAgICAgICAgdGl0bGU6IGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Db25maXJtUmVzdGFydENoYXNlJyl9YCxcbiAgICAgICAgICBjb250ZW50OiBgPHA+JHtnYW1lLmkxOG4ubG9jYWxpemUoXG4gICAgICAgICAgICAnQ29DNy5Db25maXJtUmVzdGFydENoYXNlSGludCdcbiAgICAgICAgICApfTwvcD5gLFxuICAgICAgICAgIHllczogKCkgPT4gdGhpcy5pdGVtLnJlc3RhcnQoKVxuICAgICAgICB9KVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlICduZXh0Um91bmQnOlxuICAgICAgICBpZiAodGhpcy5pdGVtLm5leHRBY3RpdmVQYXJ0aWNpcGFudCkge1xuICAgICAgICAgIERpYWxvZy5jb25maXJtKHtcbiAgICAgICAgICAgIHRpdGxlOiBgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQ29uZmlybU5leHRDaGFzZVJvdW5kJyl9YCxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGA8cD4ke2dhbWUuaTE4bi5sb2NhbGl6ZShcbiAgICAgICAgICAgICAgJ0NvQzcuQ29uZmlybU5leHRDaGFzZVJvdW5kSGludCdcbiAgICAgICAgICAgICl9PC9wPmAsXG4gICAgICAgICAgICB5ZXM6ICgpID0+IHRoaXMuaXRlbS5wcm9ncmVzc1RvTmV4dFJvdW5kKClcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2UgdGhpcy5pdGVtLnByb2dyZXNzVG9OZXh0Um91bmQoKVxuICAgICAgICBicmVha1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIF9jYW5QaW5Mb2NhdGlvbkRyYWdTdGFydCAoc2VsZWN0b3IpIHtcbiAgICBpZiAoZ2FtZS51c2VyLmlzR00pIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBhc3luYyBfb25QaW5Mb2NhdGlvbkRyYWdTdGFydCAoZXZlbnQpIHtcbiAgICBjb25zdCBhID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgIGNvbnN0IGkgPSBhLnF1ZXJ5U2VsZWN0b3IoJ2kuaWNvbicpXG4gICAgY29uc3QgZHJhZ0ljb24gPSBhLnF1ZXJ5U2VsZWN0b3IoJy5waW4taW1hZ2UnKVxuXG4gICAgZXZlbnQuZGF0YVRyYW5zZmVyLnNldERyYWdJbWFnZShkcmFnSWNvbiwgMCwgZHJhZ0ljb24uaGVpZ2h0KVxuXG4gICAgY29uc3QgbG9jYXRpb25FbGVtZW50ID0gYS5jbG9zZXN0KCcuY2hhc2UtbG9jYXRpb24nKVxuICAgIGNvbnN0IGRhdGEgPSB7fVxuXG4gICAgZGF0YS50eXBlID0gJ2xvY2F0b3InXG4gICAgZGF0YS5Db0M3VHlwZSA9ICdjaGFzZSdcbiAgICBkYXRhLmljb24gPSBpLmRhdGFzZXQubGlua0ljb25cbiAgICBkYXRhLmxvY2F0aW9uVXVpZCA9IGxvY2F0aW9uRWxlbWVudC5kYXRhc2V0LnV1aWRcbiAgICBkYXRhLmRvY1V1aWQgPSB0aGlzLml0ZW0udXVpZFxuICAgIGRhdGEuY2FsbEJhY2sgPSAnbG9jYXRvckRyb3BwZWQnXG4gICAgZXZlbnQuZGF0YVRyYW5zZmVyLnNldERhdGEoJ3RleHQvcGxhaW4nLCBKU09OLnN0cmluZ2lmeShkYXRhKSlcblxuICAgIC8vIGNvbnN0IGRyYWdEYXRhID0geyB1dWlkOiBsb2NhdGlvbkVsZW1lbnQuZGF0YXNldC51dWlkLCBjaGFzZVV1aWQ6IHRoaXMuaXRlbS51dWlkIH1cbiAgICAvLyBkcmFnRXZlbnQuZGF0YVRyYW5zZmVyLnNldERhdGEoJ3RleHQvcGxhaW4nLCBKU09OLnN0cmluZ2lmeShkcmFnRGF0YSkpXG4gIH1cblxuICBfY2FuQ2hhc2VQYXJ0aWNpcGFudERyYWdTdGFydCAoc2VsZWN0b3IpIHtcbiAgICBpZiAoZ2FtZS51c2VyLmlzR00pIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBfY2FuQ2hhc2VQYXJ0aWNpcGFudERyYWdEcm9wIChzZWxlY3Rvcikge1xuICAgIGlmIChnYW1lLnVzZXIuaXNHTSkgcmV0dXJuIHRydWVcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGFzeW5jIF9vbkNoYXNlUGFydGljaXBhbnREcmFnU3RhcnQgKGRyYWdFdmVudCkge1xuICAgIGNvbnN0IHRhcmdldCA9IGRyYWdFdmVudC5jdXJyZW50VGFyZ2V0XG4gICAgY29uc3QgZHJhZ0RhdGEgPSB7IHV1aWQ6IHRhcmdldC5kYXRhc2V0LnV1aWQsIHR5cGU6ICdwYXJ0aWNpcGFudCcgfVxuICAgIGRyYWdFdmVudC5kYXRhVHJhbnNmZXIuc2V0RGF0YSgndGV4dC9wbGFpbicsIEpTT04uc3RyaW5naWZ5KGRyYWdEYXRhKSlcbiAgfVxuXG4gIGFzeW5jIF9vbkNoYXNlUGFydGljaXBhbnREcmFnRHJvcCAoZHJhZ0V2ZW50KSB7XG4gICAgY29uc3QgZGF0YVN0cmluZyA9IGRyYWdFdmVudC5kYXRhVHJhbnNmZXIuZ2V0RGF0YSgndGV4dC9wbGFpbicpXG4gICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoZGF0YVN0cmluZylcblxuICAgIC8vIHVpLm5vdGlmaWNhdGlvbnMuaW5mbygnRHJvcHBlZCcpXG4gICAgdGhpcy5fb25EcmFnTGVhdmUoZHJhZ0V2ZW50KVxuXG4gICAgY29uc3QgdGFyZ2V0ID0gZHJhZ0V2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCBsb2NhdGlvblV1aWQgPSB0YXJnZXQuZGF0YXNldC51dWlkXG5cbiAgICBpZiAoZGF0YS50eXBlID09PSAncGFydGljaXBhbnQnKSB7XG4gICAgICBjb25zdCBvbGRMb2NhdGlvbiA9IHRoaXMuZmluZExvY2F0aW9uKGxvY2F0aW9uVXVpZClcbiAgICAgIGlmIChvbGRMb2NhdGlvbikge1xuICAgICAgICBpZiAob2xkTG9jYXRpb24ucGFydGljaXBhbnRzPy5pbmNsdWRlcyhkYXRhLnV1aWQpKSByZXR1cm5cbiAgICAgIH1cbiAgICAgIGF3YWl0IHRoaXMuaXRlbS5zZXRjaGFzZVRyYWNrU2Nyb2xsKHsgcmVuZGVyOiBmYWxzZSB9KVxuICAgICAgYXdhaXQgdGhpcy5pdGVtLm1vdmVQYXJ0aWNpcGFudFRvTG9jYXRpb24oZGF0YS51dWlkLCBsb2NhdGlvblV1aWQpXG4gICAgfSBlbHNlIHtcbiAgICAgIENvQzdDaGFzZVBhcnRpY2lwYW50SW1wb3J0ZXIuY3JlYXRlKHtcbiAgICAgICAgY2hhc2VVdWlkOiB0aGlzLml0ZW0udXVpZCxcbiAgICAgICAgbG9jYXRpb25VdWlkLFxuICAgICAgICBkcm9wRGF0YTogZGF0YVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBfb25EcmFnT3ZlciAoZHJhZ0V2ZW50KSB7XG4gICAgdGhpcy5fb25EcmFnRW50ZXIoZHJhZ0V2ZW50KVxuICB9XG5cbiAgX29uRHJhZ0VudGVyIChkcmFnRXZlbnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBkcmFnRXZlbnQuY3VycmVudFRhcmdldFxuICAgIHRhcmdldC5jbGFzc0xpc3QuYWRkKCdkcmFnLW92ZXInKVxuICB9XG5cbiAgX29uRHJhZ0xlYXZlIChkcmFnRXZlbnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBkcmFnRXZlbnQuY3VycmVudFRhcmdldFxuICAgIHRhcmdldC5jbGFzc0xpc3Q/LnJlbW92ZSgnZHJhZy1vdmVyJylcbiAgfVxuXG4gIGFzeW5jIF9vbkRyb3BQYXJ0aWNpcGFudCAoZXZlbnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgY29uc3QgdXVpZCA9IHRhcmdldC5kYXRhc2V0Py51dWlkXG4gICAgY29uc3QgZGF0YVN0cmluZyA9IGV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKCd0ZXh0L3BsYWluJylcbiAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShkYXRhU3RyaW5nKVxuICAgIGF3YWl0IHRoaXMuYWx0ZXJQYXJ0aWNpcGFudChkYXRhLCB1dWlkKVxuICB9XG5cbiAgYXN5bmMgX29uQWRkUGFydGljaXBhbnQgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGNvbnN0IGRhdGEgPSB7IGNoYXNlVXVpZDogdGhpcy5pdGVtLnV1aWQgfVxuICAgIGlmIChldmVudC5kYXRhVHJhbnNmZXIpIHtcbiAgICAgIGNvbnN0IGRhdGFTdHJpbmcgPSBldmVudC5kYXRhVHJhbnNmZXIuZ2V0RGF0YSgndGV4dC9wbGFpbicpXG4gICAgICBkYXRhLmRyb3BEYXRhID0gSlNPTi5wYXJzZShkYXRhU3RyaW5nKVxuICAgIH1cbiAgICBDb0M3Q2hhc2VQYXJ0aWNpcGFudEltcG9ydGVyLmNyZWF0ZShkYXRhKVxuICB9XG5cbiAgYXN5bmMgX29uUm9sbFBhcnRpY2lwYW50IChldmVudCkge1xuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCBwYXJ0aWNpcGFudEVsZW1lbnQgPSB0YXJnZXQuY2xvc2VzdCgnLnBhcnRpY2lwYW50JylcbiAgICBjb25zdCB1dWlkID0gcGFydGljaXBhbnRFbGVtZW50LmRhdGFzZXQudXVpZFxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5maW5kUGFydGljaXBhbnRJbmRleCh1dWlkKVxuICAgIGNvbnN0IHBhcnRpY2lwYW50cyA9IHRoaXMuaXRlbS5zeXN0ZW0ucGFydGljaXBhbnRzXG4gICAgICA/IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuaXRlbS5zeXN0ZW0ucGFydGljaXBhbnRzKVxuICAgICAgOiBbXVxuXG4gICAgY29uc3QgcGFydGljaXBhbnQgPSBuZXcgX3BhcnRpY2lwYW50KHBhcnRpY2lwYW50c1tpbmRleF0pXG4gICAgaWYgKHBhcnRpY2lwYW50LnNwZWVkQ2hlY2sucmVmU2V0KSB7XG4gICAgICBjb25zdCByb2xsID0gbmV3IENvQzdDaGVjaygpXG4gICAgICByb2xsLnBhcmVudCA9IHRoaXMuaXRlbS51dWlkXG4gICAgICBwYXJ0aWNpcGFudC5kYXRhLnJvbGxlZCA9IHRydWVcbiAgICAgIHBhcnRpY2lwYW50LmRhdGEucm9sbFV1aWQgPSByb2xsLnV1aWRcbiAgICAgIHJvbGwuYWN0b3IgPSBwYXJ0aWNpcGFudC5hY3Rvci5hY3RvcktleVxuICAgICAgaWYgKCFldmVudC5zaGlmdEtleSAmJiBwYXJ0aWNpcGFudC5hY3Rvci5wbGF5ZXIpIHtcbiAgICAgICAgcm9sbC5zdGFuZGJ5ID0gdHJ1ZVxuICAgICAgICByb2xsLnN0YW5kYnlUZXh0ID0gJ0NvQzcuQ2hhc2UnXG4gICAgICAgIHJvbGwuc3RhbmRieVJpZ2h0SWNvbiA9ICdzeXN0ZW1zL0NvQzcvYXNzZXRzL2ljb25zL3J1bm5pbmctc29saWQuc3ZnJ1xuICAgICAgfVxuXG4gICAgICBpZiAocGFydGljaXBhbnQuc3BlZWRDaGVjay5pc0NoYXJhY3RlcmlzdGljKSB7XG4gICAgICAgIGF3YWl0IHJvbGwucm9sbENoYXJhY3RlcmlzdGljKHBhcnRpY2lwYW50LnNwZWVkQ2hlY2sucmVmLmtleSlcbiAgICAgICAgYXdhaXQgcm9sbC50b01lc3NhZ2UoKVxuICAgICAgICBwYXJ0aWNpcGFudC5kYXRhLnNwZWVkQ2hlY2sucm9sbERhdGFTdHJpbmcgPSByb2xsLkpTT05Sb2xsU3RyaW5nXG4gICAgICB9IGVsc2UgaWYgKHBhcnRpY2lwYW50LnNwZWVkQ2hlY2suaXNTa2lsbCkge1xuICAgICAgICByb2xsLnNraWxsID0gcGFydGljaXBhbnQuc3BlZWRDaGVjay5yZWZcbiAgICAgICAgYXdhaXQgcm9sbC5yb2xsKClcbiAgICAgICAgYXdhaXQgcm9sbC50b01lc3NhZ2UoKVxuICAgICAgICBwYXJ0aWNpcGFudC5kYXRhLnNwZWVkQ2hlY2sucm9sbERhdGFTdHJpbmcgPSByb2xsLkpTT05Sb2xsU3RyaW5nXG4gICAgICB9IGVsc2UgaWYgKHBhcnRpY2lwYW50LnNwZWVkQ2hlY2suaXNBdHRyaWJ1dGUpIHtcbiAgICAgICAgYXdhaXQgcm9sbC5yb2xsQXR0cmlidXRlKHBhcnRpY2lwYW50LnNwZWVkQ2hlY2sucmVmLmtleSlcbiAgICAgICAgYXdhaXQgcm9sbC50b01lc3NhZ2UoKVxuICAgICAgICBwYXJ0aWNpcGFudC5kYXRhLnNwZWVkQ2hlY2sucm9sbERhdGFTdHJpbmcgPSByb2xsLkpTT05Sb2xsU3RyaW5nXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJ0aWNpcGFudC5zcGVlZENoZWNrLnNjb3JlKSB7XG4gICAgICBjb25zdCByb2xsRGF0YSA9IHtcbiAgICAgICAgcmF3VmFsdWU6IHBhcnRpY2lwYW50LnNwZWVkQ2hlY2suc2NvcmUsXG4gICAgICAgIGRpc3BsYXlOYW1lOiBwYXJ0aWNpcGFudC5zcGVlZENoZWNrLm5hbWUsXG4gICAgICAgIGFjdG9yTmFtZTogcGFydGljaXBhbnQubmFtZSA/IHBhcnRpY2lwYW50Lm5hbWUgOiB1bmRlZmluZWRcbiAgICAgIH1cbiAgICAgIGlmIChwYXJ0aWNpcGFudC5oYXNBY3Rvcikgcm9sbERhdGEuYWN0b3IgPSBwYXJ0aWNpcGFudC5hY3Rvci5hY3RvcktleVxuICAgICAgY29uc3Qgcm9sbCA9IENvQzdDaGVjay5jcmVhdGUocm9sbERhdGEpXG4gICAgICByb2xsLnBhcmVudCA9IHRoaXMuaXRlbS51dWlkXG4gICAgICBhd2FpdCByb2xsLnJvbGwoKVxuICAgICAgYXdhaXQgcm9sbC50b01lc3NhZ2UoKVxuICAgICAgcGFydGljaXBhbnQuZGF0YS5zcGVlZENoZWNrLnJvbGxEYXRhU3RyaW5nID0gcm9sbC5KU09OUm9sbFN0cmluZ1xuICAgICAgcGFydGljaXBhbnQuZGF0YS5yb2xsZWQgPSB0cnVlXG4gICAgICBwYXJ0aWNpcGFudC5kYXRhLnJvbGxVdWlkID0gcm9sbC51dWlkXG4gICAgfVxuXG4gICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZSh7ICdzeXN0ZW0ucGFydGljaXBhbnRzJzogcGFydGljaXBhbnRzIH0pXG4gIH1cblxuICBfb25EcmFnRW50ZXJQYXJ0aWNpcGFudCAoZXZlbnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2RyYWctb3ZlcicpXG4gIH1cblxuICBfb25EcmFnTGVhdmVQYXJ0aWNpcGFudCAoZXZlbnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgdGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoJ2RyYWctb3ZlcicpXG4gIH1cblxuICBhc3luYyBfb25DaGFuZ2VTaWRlIChldmVudCkge1xuICAgIC8vIGNvbnN0IHRlc3QgPSBhd2FpdCBmcm9tVXVpZCggJ1NjZW5lLndoN1NMdXZJT3BjUXliOFMuVG9rZW4ubkNkb0N5b2l1ZHRqck5rdScpO1xuICAgIC8vIGNvbnN0IGl0ZW1UZXN0ID0gYXdhaXQgZnJvbVV1aWQoICdJdGVtLnBsSUVtTlJQNk83UHZlTnYucm9sbC5xMnNBenNIdDRGc3FzZGZEJyk7XG5cbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgY29uc3QgcGFydGljaXBhbnQgPSB0YXJnZXQuY2xvc2VzdCgnLnBhcnRpY2lwYW50JylcbiAgICBjb25zdCB1dWlkID0gcGFydGljaXBhbnQuZGF0YXNldC51dWlkXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmZpbmRQYXJ0aWNpcGFudEluZGV4KHV1aWQpXG4gICAgY29uc3QgcGFydGljaXBhbnRzID0gdGhpcy5pdGVtLnN5c3RlbS5wYXJ0aWNpcGFudHNcbiAgICAgID8gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5pdGVtLnN5c3RlbS5wYXJ0aWNpcGFudHMpXG4gICAgICA6IFtdXG4gICAgcGFydGljaXBhbnRzW2luZGV4XS5jaGFzZXIgPSAhcGFydGljaXBhbnRzW2luZGV4XS5jaGFzZXJcbiAgICBhd2FpdCB0aGlzLml0ZW0udXBkYXRlKHsgJ3N5c3RlbS5wYXJ0aWNpcGFudHMnOiBwYXJ0aWNpcGFudHMgfSlcbiAgfVxuXG4gIGFzeW5jIF9vbkRlbGV0ZURyaXZlciAoZXZlbnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgY29uc3QgZHJpdmVyID0gdGFyZ2V0LmNsb3Nlc3QoJy5kcml2ZXInKVxuICAgIGNvbnN0IHV1aWQgPSBkcml2ZXIuZGF0YXNldC51dWlkXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmZpbmRQYXJ0aWNpcGFudEluZGV4KHV1aWQpXG4gICAgY29uc3QgcGFydGljaXBhbnRzID0gdGhpcy5pdGVtLnN5c3RlbS5wYXJ0aWNpcGFudHNcbiAgICAgID8gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5pdGVtLnN5c3RlbS5wYXJ0aWNpcGFudHMpXG4gICAgICA6IFtdXG4gICAgY29uc3QgcGFydGljaXBhbnQgPSBwYXJ0aWNpcGFudHNbaW5kZXhdXG4gICAgZGVsZXRlIHBhcnRpY2lwYW50LmRvY1V1aWRcbiAgICBhd2FpdCB0aGlzLml0ZW0udXBkYXRlKHsgJ3N5c3RlbS5wYXJ0aWNpcGFudHMnOiBwYXJ0aWNpcGFudHMgfSlcbiAgfVxuXG4gIGFzeW5jIF9vbkRlbGV0ZVBhcnRpY2lwYW50IChldmVudCkge1xuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCBwYXJ0aWNpcGFudCA9IHRhcmdldC5jbG9zZXN0KCcucGFydGljaXBhbnQnKVxuICAgIGNvbnN0IHV1aWQgPSBwYXJ0aWNpcGFudC5kYXRhc2V0LnV1aWRcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuZmluZFBhcnRpY2lwYW50SW5kZXgodXVpZClcbiAgICBjb25zdCBwYXJ0aWNpcGFudHMgPSB0aGlzLml0ZW0uc3lzdGVtLnBhcnRpY2lwYW50c1xuICAgICAgPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLml0ZW0uc3lzdGVtLnBhcnRpY2lwYW50cylcbiAgICAgIDogW11cbiAgICBwYXJ0aWNpcGFudHMuc3BsaWNlKGluZGV4LCAxKVxuICAgIGF3YWl0IHRoaXMuaXRlbS51cGRhdGUoeyAnc3lzdGVtLnBhcnRpY2lwYW50cyc6IHBhcnRpY2lwYW50cyB9KVxuICB9XG5cbiAgYXN5bmMgX29uUmVzZXRSb2xsIChldmVudCkge1xuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCBwYXJ0aWNpcGFudCA9IHRhcmdldC5jbG9zZXN0KCcucGFydGljaXBhbnQnKVxuICAgIGNvbnN0IHV1aWQgPSBwYXJ0aWNpcGFudC5kYXRhc2V0LnV1aWRcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuZmluZFBhcnRpY2lwYW50SW5kZXgodXVpZClcbiAgICBjb25zdCBwYXJ0aWNpcGFudHMgPSB0aGlzLml0ZW0uc3lzdGVtLnBhcnRpY2lwYW50c1xuICAgICAgPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLml0ZW0uc3lzdGVtLnBhcnRpY2lwYW50cylcbiAgICAgIDogW11cbiAgICBkZWxldGUgcGFydGljaXBhbnRzW2luZGV4XS5zcGVlZENoZWNrLnJvbGxEYXRhU3RyaW5nXG4gICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZSh7ICdzeXN0ZW0ucGFydGljaXBhbnRzJzogcGFydGljaXBhbnRzIH0pXG4gIH1cblxuICBhc3luYyBhbHRlclBhcnRpY2lwYW50IChkYXRhLCB1dWlkKSB7XG4gICAgbGV0IGRvY1V1aWQsIGFjdG9yXG4gICAgaWYgKGRhdGEudG9rZW5VdWlkKSBkb2NVdWlkID0gZGF0YS50b2tlblV1aWRcbiAgICBlbHNlIHtcbiAgICAgIGRvY1V1aWQgPVxuICAgICAgICBkYXRhLnNjZW5lSWQgJiYgZGF0YS50b2tlbklkXG4gICAgICAgICAgPyBgU2NlbmUuJHtkYXRhLnNjZW5lSWR9LlRva2VuLiR7ZGF0YS50b2tlbklkfWBcbiAgICAgICAgICA6IGRhdGEuYWN0b3JJZCB8fCBkYXRhLmFjdG9yS2V5IHx8IGRhdGEuaWRcbiAgICB9XG5cbiAgICBpZiAoZGF0YS50eXBlID09PSAnVG9rZW4nKSB7XG4gICAgICBkb2NVdWlkID0gZGF0YS51dWlkXG4gICAgfSBlbHNlIGlmIChkb2NVdWlkKSB7XG4gICAgICBhY3RvciA9IGNoYXRIZWxwZXIuZ2V0QWN0b3JGcm9tS2V5KGRvY1V1aWQpXG4gICAgICBpZiAoIWFjdG9yICYmIGRhdGEudHlwZSA9PT0gJ0l0ZW0nKSBkb2NVdWlkID0gbnVsbFxuICAgIH1cblxuICAgIGlmIChhY3RvciAmJiBkb2NVdWlkICE9PSBhY3Rvci51dWlkKSB7XG4gICAgICBkb2NVdWlkID0gYWN0b3IudXVpZFxuICAgIH1cblxuICAgIGNvbnN0IHBhcnRpY2lwYW50ID0ge31cbiAgICBpZiAoZG9jVXVpZCkgcGFydGljaXBhbnQuZG9jVXVpZCA9IGRvY1V1aWRcblxuICAgIHN3aXRjaCAoZGF0YS50eXBlPy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICBjYXNlICdhY3Rvcic6XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdpdGVtJzpcbiAgICAgICAgcGFydGljaXBhbnQuc3BlZWRDaGVjayA9IHtcbiAgICAgICAgICBpZDogZGF0YS5kYXRhPy5faWQgfHwgZGF0YS5pZCxcbiAgICAgICAgICB0eXBlOiAnaXRlbSdcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnY2hhcmFjdGVyaXN0aWMnOlxuICAgICAgICBwYXJ0aWNpcGFudC5zcGVlZENoZWNrID0ge1xuICAgICAgICAgIGlkOiBkYXRhLm5hbWUsXG4gICAgICAgICAgdHlwZTogJ2NoYXJhY3RlcmlzdGljJ1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdhdHRyaWJ1dGUnOlxuICAgICAgICBwYXJ0aWNpcGFudC5zcGVlZENoZWNrID0ge1xuICAgICAgICAgIGlkOiBkYXRhLm5hbWUsXG4gICAgICAgICAgdHlwZTogJ2F0dHJpYnV0ZSdcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVha1xuICAgIH1cblxuICAgIC8vIFRPRE86Q2hlY2sgZm9yIHNwZWVkIGNoZWNrLCBpZiBub25lIGFkZCBzcGVlZGNoZWNrXG4gICAgLy8gc3BlZWRDaGVjayA9IHtcbiAgICAvLyAgIGlkOiAnc3RyJ1xuICAgIC8vICAgdHlwZTogJ2NoYXJhY3RlcmlzdGljJ1xuICAgIC8vIH1cbiAgICBjb25zdCBwYXJ0aWNpcGFudHMgPSB0aGlzLml0ZW0uc3lzdGVtLnBhcnRpY2lwYW50c1xuICAgICAgPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLml0ZW0uc3lzdGVtLnBhcnRpY2lwYW50cylcbiAgICAgIDogW11cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuZmluZFBhcnRpY2lwYW50SW5kZXgodXVpZClcbiAgICBjb25zdCBvbGRQYXJ0aWNpcGFudCA9IHBhcnRpY2lwYW50c1tpbmRleF1cbiAgICBpZiAob2xkUGFydGljaXBhbnQubW92KSBkZWxldGUgb2xkUGFydGljaXBhbnQubW92XG4gICAgZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChvbGRQYXJ0aWNpcGFudCwgcGFydGljaXBhbnQpXG4gICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZSh7ICdzeXN0ZW0ucGFydGljaXBhbnRzJzogcGFydGljaXBhbnRzIH0pXG4gIH1cblxuICBhc3luYyBjbGVhckFjdGl2ZUxvY2F0aW9uQ29vcmRpbmF0ZXMgKCkge1xuICAgIGF3YWl0IHRoaXMuaXRlbS5jbGVhckFjdGl2ZUxvY2F0aW9uQ29vcmRpbmF0ZXMoKVxuICB9XG5cbiAgYXN5bmMgYWRkUGFydGljaXBhbnQgKGRhdGEpIHtcbiAgICAvLyBsZXQgcHJvdXQgPSBjaGF0SGVscGVyLmdldEFjdG9yRnJvbUtleShcbiAgICAvLyAgICdTY2VuZS53aDdTTHV2SU9wY1F5YjhTLlRva2VuLlF5RlRpaUVaaVg5dlRmaUMnXG4gICAgLy8gKVxuICAgIC8vIHByb3V0ID0gY2hhdEhlbHBlci5nZXRBY3RvckZyb21LZXkoXG4gICAgLy8gICAnU2NlbmUud2g3U0x1dklPcGNReWI4Uy5Ub2tlbi51Ykx6aGU1N0pPVEhNSXI5J1xuICAgIC8vIClcbiAgICAvLyBwcm91dCA9IGNoYXRIZWxwZXIuZ2V0QWN0b3JGcm9tS2V5KCdBY3Rvci51aVkzY2FwU1VlTEx2U0xpJylcbiAgICAvLyBwcm91dCA9IENvQzdVdGlsaXRpZXMuZ2V0RG9jdW1lbnRGcm9tS2V5KCAnU2NlbmUud2g3U0x1dklPcGNReWI4Uy5Ub2tlbi5ReUZUaWlFWmlYOXZUZmlDLkl0ZW0uR3JPSGVMWGZlRXBoc1JNWicpXG4gICAgLy8gcHJvdXQgPSBDb0M3VXRpbGl0aWVzLmdldERvY3VtZW50RnJvbUtleSggXCJTY2VuZS53aDdTTHV2SU9wY1F5YjhTLlRva2VuLllxc05RUERoRkNQbFNScUpcIilcbiAgICAvLyBwcm91dCA9IENvQzdVdGlsaXRpZXMuZ2V0RG9jdW1lbnRGcm9tS2V5KCBcIlNjZW5lLndoN1NMdXZJT3BjUXliOFMuVG9rZW4uWXFzTlFQRGhGQ1BsU1JxSi5JdGVtLjhKRW5UakpPR0ZYbWw0d2tcIilcblxuICAgIC8vIHRyeSB0byBmaW5kIGEgdmFsaWQgZG9jdW1lbnRcbiAgICBsZXQgZG9jVXVpZCwgYWN0b3JcbiAgICBpZiAoZGF0YS50b2tlblV1aWQpIGRvY1V1aWQgPSBkYXRhLnRva2VuVXVpZFxuICAgIGVsc2Uge1xuICAgICAgZG9jVXVpZCA9XG4gICAgICAgIGRhdGEuc2NlbmVJZCAmJiBkYXRhLnRva2VuSWRcbiAgICAgICAgICA/IGBTY2VuZS4ke2RhdGEuc2NlbmVJZH0uVG9rZW4uJHtkYXRhLnRva2VuSWR9YFxuICAgICAgICAgIDogZGF0YS5hY3RvcklkIHx8IGRhdGEuYWN0b3JLZXkgfHwgZGF0YS5pZFxuICAgIH1cblxuICAgIGlmIChkYXRhLnR5cGUgPT09ICdUb2tlbicpIHtcbiAgICAgIGRvY1V1aWQgPSBkYXRhLnV1aWRcbiAgICB9IGVsc2UgaWYgKGRvY1V1aWQpIHtcbiAgICAgIGFjdG9yID0gY2hhdEhlbHBlci5nZXRBY3RvckZyb21LZXkoZG9jVXVpZClcbiAgICAgIGlmICghYWN0b3IgJiYgZGF0YS50eXBlID09PSAnSXRlbScpIGRvY1V1aWQgPSBudWxsXG4gICAgfVxuXG4gICAgaWYgKGFjdG9yICYmIGRvY1V1aWQgIT09IGFjdG9yLnV1aWQpIHtcbiAgICAgIGRvY1V1aWQgPSBhY3Rvci51dWlkXG4gICAgfVxuXG4gICAgY29uc3QgcGFydGljaXBhbnQgPSB7fVxuICAgIGlmIChkb2NVdWlkKSBwYXJ0aWNpcGFudC5kb2NVdWlkID0gZG9jVXVpZFxuXG4gICAgc3dpdGNoIChkYXRhLnR5cGU/LnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIGNhc2UgJ2FjdG9yJzpcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2l0ZW0nOlxuICAgICAgICBpZiAoZGF0YS5pZCkge1xuICAgICAgICAgIGNvbnN0IGl0ZW0gPSBnYW1lLml0ZW1zLmdldChkYXRhLmlkKVxuICAgICAgICAgIGlmIChpdGVtPy5kYXRhPy50eXBlICE9PSAnc2tpbGwnKSByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnRpY2lwYW50LnNwZWVkQ2hlY2sgPSB7XG4gICAgICAgICAgaWQ6IGRhdGEuZGF0YT8uX2lkIHx8IGRhdGEuaWQsXG4gICAgICAgICAgdHlwZTogJ2l0ZW0nXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2NoYXJhY3RlcmlzdGljJzpcbiAgICAgICAgcGFydGljaXBhbnQuc3BlZWRDaGVjayA9IHtcbiAgICAgICAgICBpZDogZGF0YS5uYW1lLFxuICAgICAgICAgIHR5cGU6ICdjaGFyYWN0ZXJpc3RpYydcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnYXR0cmlidXRlJzpcbiAgICAgICAgcGFydGljaXBhbnQuc3BlZWRDaGVjayA9IHtcbiAgICAgICAgICBpZDogZGF0YS5uYW1lLFxuICAgICAgICAgIHR5cGU6ICdhdHRyaWJ1dGUnXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICAvLyBUT0RPOkNoZWNrIGZvciBzcGVlZCBjaGVjaywgaWYgbm9uZSBhZGQgc3BlZWRjaGVjayBjb24gbm9uIHZlaGljbGUsIGRyaXZlIGF1dG8gZm9yIHZlaGljbGVcbiAgICAvLyBzcGVlZENoZWNrID0ge1xuICAgIC8vICAgaWQ6ICdjb24nXG4gICAgLy8gICB0eXBlOiAnY2hhcmFjdGVyaXN0aWMnXG4gICAgLy8gfVxuXG4gICAgaWYgKCFwYXJ0aWNpcGFudC5zcGVlZENoZWNrKSB7XG4gICAgICBpZiAoIXRoaXMuaXRlbS5zeXN0ZW0udmVoaWNsZSkge1xuICAgICAgICBwYXJ0aWNpcGFudC5zcGVlZENoZWNrID0ge1xuICAgICAgICAgIGlkOiAnY29uJyxcbiAgICAgICAgICB0eXBlOiAnY2hhcmFjdGVyaXN0aWMnLFxuICAgICAgICAgIG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ0hBUkFDLkNvbnN0aXR1dGlvbicpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnRpY2lwYW50LnNwZWVkQ2hlY2sgPSB7XG4gICAgICAgICAgdHlwZTogJ2l0ZW0nLFxuICAgICAgICAgIG5hbWU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Db0NJREZsYWcua2V5cy5pLnNraWxsLmRyaXZlLWF1dG8nKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHBhcnRpY2lwYW50cyA9IHRoaXMuaXRlbS5zeXN0ZW0ucGFydGljaXBhbnRzXG4gICAgICA/IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuaXRlbS5zeXN0ZW0ucGFydGljaXBhbnRzKVxuICAgICAgOiBbXVxuXG4gICAgbGV0IHVuaXF1ZSA9IGZhbHNlXG4gICAgd2hpbGUgKCF1bmlxdWUpIHtcbiAgICAgIHBhcnRpY2lwYW50LnV1aWQgPSBmb3VuZHJ5LnV0aWxzLnJhbmRvbUlEKDE2KVxuICAgICAgdW5pcXVlID1cbiAgICAgICAgcGFydGljaXBhbnRzLmZpbHRlcihwID0+IHAudXVpZCA9PT0gcGFydGljaXBhbnQudXVpZCkubGVuZ3RoID09PSAwXG4gICAgfVxuXG4gICAgcGFydGljaXBhbnRzLnB1c2gocGFydGljaXBhbnQpXG4gICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZSh7ICdzeXN0ZW0ucGFydGljaXBhbnRzJzogcGFydGljaXBhbnRzIH0pXG4gIH1cblxuICBhc3luYyB0b2dnbGVQYXJ0aWNpcGFudEd1biAocGFydGljaXBhbnRVdWlkKSB7XG4gICAgY29uc3QgcGFydGljaXBhbnRzID0gdGhpcy5pdGVtLnN5c3RlbS5wYXJ0aWNpcGFudHNcbiAgICAgID8gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5pdGVtLnN5c3RlbS5wYXJ0aWNpcGFudHMpXG4gICAgICA6IFtdXG4gICAgY29uc3QgcGFydGljaXBhbnQgPSBwYXJ0aWNpcGFudHMuZmluZChwID0+IHBhcnRpY2lwYW50VXVpZCA9PT0gcC51dWlkKVxuICAgIGlmICghcGFydGljaXBhbnQpIHJldHVyblxuICAgIHBhcnRpY2lwYW50Lmhhc0FHdW5SZWFkeSA9ICFwYXJ0aWNpcGFudC5oYXNBR3VuUmVhZHlcbiAgICBhd2FpdCB0aGlzLml0ZW0uc2V0Y2hhc2VUcmFja1Njcm9sbCh7IHJlbmRlcjogZmFsc2UgfSlcbiAgICBhd2FpdCB0aGlzLml0ZW0udXBkYXRlUGFydGljaXBhbnRzKHBhcnRpY2lwYW50cylcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYW4gKG9iaikge1xuICBmb3IgKGNvbnN0IHByb3BOYW1lIGluIG9iaikge1xuICAgIGNvbnN0IHRwID0gZm91bmRyeS51dGlscy5nZXRUeXBlKG9ialtwcm9wTmFtZV0pXG4gICAgaWYgKHRwID09PSAnT2JqZWN0Jykge1xuICAgICAgb2JqW3Byb3BOYW1lXSA9IGNsZWFuKG9ialtwcm9wTmFtZV0pXG4gICAgfVxuXG4gICAgaWYgKHRwID09PSAnT2JqZWN0JyAmJiAhT2JqZWN0LmVudHJpZXMob2JqW3Byb3BOYW1lXSkubGVuZ3RoKSB7XG4gICAgICBvYmpbcHJvcE5hbWVdID0gbnVsbFxuICAgIH0gZWxzZSBpZiAodHAgPT09ICdzdHJpbmcnICYmICFvYmpbcHJvcE5hbWVdLmxlbmd0aCkge1xuICAgICAgb2JqW3Byb3BOYW1lXSA9IG51bGxcbiAgICB9IGVsc2UgaWYgKHRwID09PSAnc3RyaW5nJyAmJiAhaXNOYU4oTnVtYmVyKG9ialtwcm9wTmFtZV0pKSkge1xuICAgICAgb2JqW3Byb3BOYW1lXSA9IE51bWJlcihvYmpbcHJvcE5hbWVdKVxuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqXG59XG4iLCIvKiBnbG9iYWwgZm91bmRyeSwgZ2FtZSwgSXRlbVNoZWV0LCBUZXh0RWRpdG9yICovXG5pbXBvcnQgeyBhZGRDb0NJRFNoZWV0SGVhZGVyQnV0dG9uIH0gZnJvbSAnLi4vLi4vc2NyaXB0cy9jb2MtaWQtYnV0dG9uLmpzJ1xuaW1wb3J0IENvQzdBY3RpdmVFZmZlY3QgZnJvbSAnLi4vLi4vYWN0aXZlLWVmZmVjdC5qcydcblxuLyoqXG4gKiBFeHRlbmQgdGhlIGJhc2ljIEl0ZW1TaGVldCB3aXRoIHNvbWUgdmVyeSBzaW1wbGUgbW9kaWZpY2F0aW9uc1xuICovXG5leHBvcnQgY2xhc3MgQ29DN0l0ZW1TaGVldFYyIGV4dGVuZHMgSXRlbVNoZWV0IHtcbiAgLyoqXG4gICAqIEV4dGVuZCBhbmQgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgb3B0aW9ucyB1c2VkIGJ5IHRoZSBTaW1wbGUgSXRlbSBTaGVldFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc3VwZXIuZGVmYXVsdE9wdGlvbnMsIHtcbiAgICAgIGNsYXNzZXM6IFsnY29jNycsICdzaGVldFYyJywgJ2l0ZW0nXSxcbiAgICAgIHRlbXBsYXRlOiAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9pdGVtcy9pdGVtLXNoZWV0VjIuaHRtbCcsXG4gICAgICB3aWR0aDogNTAwLFxuICAgICAgaGVpZ2h0OiA0NTAsXG4gICAgICBzY3JvbGxZOiBbJy50YWIuZGVzY3JpcHRpb24nXSxcbiAgICAgIHRhYnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hdlNlbGVjdG9yOiAnLnNoZWV0LW5hdmlnYXRpb24nLFxuICAgICAgICAgIGNvbnRlbnRTZWxlY3RvcjogJy5zaGVldC1ib2R5JyxcbiAgICAgICAgICBpbml0aWFsOiAnZGVzY3JpcHRpb24nXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KVxuICB9XG5cbiAgX2dldEhlYWRlckJ1dHRvbnMgKCkge1xuICAgIGNvbnN0IGhlYWRlckJ1dHRvbnMgPSBzdXBlci5fZ2V0SGVhZGVyQnV0dG9ucygpXG4gICAgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbihoZWFkZXJCdXR0b25zLCB0aGlzKVxuICAgIHJldHVybiBoZWFkZXJCdXR0b25zXG4gIH1cblxuICAvKipcbiAgICogUHJlcGFyZSBkYXRhIGZvciByZW5kZXJpbmcgdGhlIEl0ZW0gc2hlZXRcbiAgICogVGhlIHByZXBhcmVkIGRhdGEgb2JqZWN0IGNvbnRhaW5zIGJvdGggdGhlIGFjdG9yIGRhdGEgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIHNoZWV0IG9wdGlvbnNcbiAgICovXG4gIGFzeW5jIGdldERhdGEgKG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHNoZWV0RGF0YSA9IHN1cGVyLmdldERhdGEob3B0aW9ucylcblxuICAgIHNoZWV0RGF0YS5lZmZlY3RzID0gQ29DN0FjdGl2ZUVmZmVjdC5wcmVwYXJlQWN0aXZlRWZmZWN0Q2F0ZWdvcmllcyh0aGlzLml0ZW0uZWZmZWN0cywgeyBzdGF0dXM6IGZhbHNlIH0pXG5cbiAgICBzaGVldERhdGEuZW5yaWNoZWREZXNjcmlwdGlvblZhbHVlID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmRlc2NyaXB0aW9uLnZhbHVlLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25LZWVwZXIgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24ua2VlcGVyLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgc2hlZXREYXRhLmlzS2VlcGVyID0gZ2FtZS51c2VyLmlzR01cblxuICAgIHJldHVybiBzaGVldERhdGFcbiAgfVxuXG4gIC8qKlxuICAgKiBBY3RpdmF0ZSBldmVudCBsaXN0ZW5lcnMgdXNpbmcgdGhlIHByZXBhcmVkIHNoZWV0IEhUTUxcbiAgICogQHBhcmFtIGh0bWwge0hUTUx9ICAgVGhlIHByZXBhcmVkIEhUTUwgb2JqZWN0IHJlYWR5IHRvIGJlIHJlbmRlcmVkIGludG8gdGhlIERPTVxuICAgKi9cbiAgYWN0aXZhdGVMaXN0ZW5lcnMgKGh0bWwpIHtcbiAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKVxuICAgIC8vIEV2ZXJ5dGhpbmcgYmVsb3cgaGVyZSBpcyBvbmx5IG5lZWRlZCBpZiB0aGUgc2hlZXQgaXMgZWRpdGFibGVcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5lZGl0YWJsZSkgcmV0dXJuXG5cbiAgICBodG1sXG4gICAgICAuZmluZCgnLmVmZmVjdC1jb250cm9sJylcbiAgICAgIC5jbGljayhldiA9PiBDb0M3QWN0aXZlRWZmZWN0Lm9uTWFuYWdlQWN0aXZlRWZmZWN0KGV2LCB0aGlzLml0ZW0pKVxuICB9XG59XG4iLCIvKiBnbG9iYWwgZm91bmRyeSAqL1xuXG5pbXBvcnQgeyBDb0M3SXRlbVNoZWV0VjIgfSBmcm9tICcuL2l0ZW0tc2hlZXRWMi5qcydcblxuLyoqXG4gKiBFeHRlbmQgdGhlIGJhc2ljIEl0ZW1TaGVldCB3aXRoIHNvbWUgdmVyeSBzaW1wbGUgbW9kaWZpY2F0aW9uc1xuICovXG5leHBvcnQgY2xhc3MgQ29DN0l0ZW1TaGVldCBleHRlbmRzIENvQzdJdGVtU2hlZXRWMiB7XG4gIC8qKlxuICAgKiBFeHRlbmQgYW5kIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG9wdGlvbnMgdXNlZCBieSB0aGUgU2ltcGxlIEl0ZW0gU2hlZXRcbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRPcHRpb25zLCB7XG4gICAgICB3aWR0aDogNTI1LFxuICAgICAgaGVpZ2h0OiA1MDZcbiAgICB9KVxuICB9XG59XG4iLCIvKiBnbG9iYWwgSm91cm5hbFNoZWV0ICovXG5pbXBvcnQgeyBhZGRDb0NJRFNoZWV0SGVhZGVyQnV0dG9uIH0gZnJvbSAnLi4vc2NyaXB0cy9jb2MtaWQtYnV0dG9uLmpzJ1xuXG5leHBvcnQgY2xhc3MgQ29DN0pvdXJuYWxTaGVldCBleHRlbmRzIEpvdXJuYWxTaGVldCB7XG4gIF9nZXRIZWFkZXJCdXR0b25zICgpIHtcbiAgICBjb25zdCBoZWFkZXJCdXR0b25zID0gc3VwZXIuX2dldEhlYWRlckJ1dHRvbnMoKVxuICAgIGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24oaGVhZGVyQnV0dG9ucywgdGhpcylcbiAgICByZXR1cm4gaGVhZGVyQnV0dG9uc1xuICB9XG59XG4iLCIvKiBnbG9iYWwgTWFjcm9Db25maWcgKi9cbmltcG9ydCB7IGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24gfSBmcm9tICcuLi9zY3JpcHRzL2NvYy1pZC1idXR0b24uanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3TWFjcm9Db25maWcgZXh0ZW5kcyBNYWNyb0NvbmZpZyB7XG4gIF9nZXRIZWFkZXJCdXR0b25zICgpIHtcbiAgICBjb25zdCBoZWFkZXJCdXR0b25zID0gc3VwZXIuX2dldEhlYWRlckJ1dHRvbnMoKVxuICAgIGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24oaGVhZGVyQnV0dG9ucywgdGhpcylcbiAgICByZXR1cm4gaGVhZGVyQnV0dG9uc1xuICB9XG59XG4iLCIvKiBnbG9iYWwgUGxheWxpc3RDb25maWcgKi9cbmltcG9ydCB7IGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24gfSBmcm9tICcuLi9zY3JpcHRzL2NvYy1pZC1idXR0b24uanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3UGxheWxpc3RDb25maWcgZXh0ZW5kcyBQbGF5bGlzdENvbmZpZyB7XG4gIF9nZXRIZWFkZXJCdXR0b25zICgpIHtcbiAgICBjb25zdCBoZWFkZXJCdXR0b25zID0gc3VwZXIuX2dldEhlYWRlckJ1dHRvbnMoKVxuICAgIGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24oaGVhZGVyQnV0dG9ucywgdGhpcylcbiAgICByZXR1cm4gaGVhZGVyQnV0dG9uc1xuICB9XG59XG4iLCIvKiBnbG9iYWwgUm9sbFRhYmxlQ29uZmlnICovXG5pbXBvcnQgeyBhZGRDb0NJRFNoZWV0SGVhZGVyQnV0dG9uIH0gZnJvbSAnLi4vc2NyaXB0cy9jb2MtaWQtYnV0dG9uLmpzJ1xuXG5leHBvcnQgY2xhc3MgQ29DN1JvbGxUYWJsZUNvbmZpZyBleHRlbmRzIFJvbGxUYWJsZUNvbmZpZyB7XG4gIF9nZXRIZWFkZXJCdXR0b25zICgpIHtcbiAgICBjb25zdCBoZWFkZXJCdXR0b25zID0gc3VwZXIuX2dldEhlYWRlckJ1dHRvbnMoKVxuICAgIGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24oaGVhZGVyQnV0dG9ucywgdGhpcylcbiAgICByZXR1cm4gaGVhZGVyQnV0dG9uc1xuICB9XG59XG4iLCIvKiBnbG9iYWwgU2NlbmVDb25maWcgKi9cbmltcG9ydCB7IGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24gfSBmcm9tICcuLi9zY3JpcHRzL2NvYy1pZC1idXR0b24uanMnXG5cbmV4cG9ydCBjbGFzcyBDb0M3U2NlbmVDb25maWcgZXh0ZW5kcyBTY2VuZUNvbmZpZyB7XG4gIF9nZXRIZWFkZXJCdXR0b25zICgpIHtcbiAgICBjb25zdCBoZWFkZXJCdXR0b25zID0gc3VwZXIuX2dldEhlYWRlckJ1dHRvbnMoKVxuICAgIGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24oaGVhZGVyQnV0dG9ucywgdGhpcylcbiAgICByZXR1cm4gaGVhZGVyQnV0dG9uc1xuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgZm91bmRyeSwgZ2FtZSwgSXRlbVNoZWV0LCBUZXh0RWRpdG9yICovXG5pbXBvcnQgeyBhZGRDb0NJRFNoZWV0SGVhZGVyQnV0dG9uIH0gZnJvbSAnLi4vLi4vc2NyaXB0cy9jb2MtaWQtYnV0dG9uLmpzJ1xuaW1wb3J0IHsgQ09DNyB9IGZyb20gJy4uLy4uL2NvbmZpZy5qcydcbmltcG9ydCB7IENvQzdJdGVtIH0gZnJvbSAnLi4vaXRlbS5qcydcbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMuanMnXG5pbXBvcnQgeyBEcm9wQ29DSUQgfSBmcm9tICcuLi8uLi9hcHBzL2Ryb3AtY29jLWlkLmpzJ1xuaW1wb3J0IHsgaXNDdHJsS2V5IH0gZnJvbSAnLi4vLi4vY2hhdC9oZWxwZXIuanMnXG5cbi8qKlxuICogRXh0ZW5kIHRoZSBiYXNpYyBJdGVtU2hlZXQgd2l0aCBzb21lIHZlcnkgc2ltcGxlIG1vZGlmaWNhdGlvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIENvQzdTZXR1cFNoZWV0IGV4dGVuZHMgSXRlbVNoZWV0IHtcbiAgLyoqXG4gICAqIEFjdGl2YXRlIGV2ZW50IGxpc3RlbmVycyB1c2luZyB0aGUgcHJlcGFyZWQgc2hlZXQgSFRNTFxuICAgKiBAcGFyYW0gaHRtbCB7SFRNTH0gICBUaGUgcHJlcGFyZWQgSFRNTCBvYmplY3QgcmVhZHkgdG8gYmUgcmVuZGVyZWQgaW50byB0aGUgRE9NXG4gICAqL1xuICBhY3RpdmF0ZUxpc3RlbmVycyAoaHRtbCkge1xuICAgIHN1cGVyLmFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpXG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5lZGl0YWJsZSkgcmV0dXJuXG5cbiAgICBodG1sLmZpbmQoJy5pdGVtIC5pdGVtLW5hbWUgaDQnKS5jbGljayhldmVudCA9PiB0aGlzLl9vbkl0ZW1TdW1tYXJ5KGV2ZW50LCAnaXRlbXMnKSlcbiAgICBodG1sLmZpbmQoJy5pdGVtLWRlbGV0ZScpLmNsaWNrKGV2ZW50ID0+IHRoaXMuX29uSXRlbURlbGV0ZShldmVudCwgJ2l0ZW1zJykpXG4gICAgaHRtbC5maW5kKCcuYWRkLWJpbycpLmNsaWNrKGFzeW5jICgpID0+IGF3YWl0IHRoaXMuX29uQWRkQmlvKCkpXG4gICAgaHRtbC5maW5kKCcucmVtb3ZlLXNlY3Rpb24nKS5jbGljayh0aGlzLl9vblJlbW92ZVNlY3Rpb24uYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJy50b2dnbGUtc3dpdGNoJykuY2xpY2sodGhpcy5fb25DbGlja1RvZ2dsZS5iaW5kKHRoaXMpKVxuICAgIGh0bWwuZmluZCgnLmFkZC1tb25ldGFyeScpLmNsaWNrKHRoaXMuX29uQWRkTW9uZXRhcnkuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJy5yZW1vdmUtbW9uZXRhcnknKS5jbGljayh0aGlzLl9vblJlbW92ZU1vbmV0YXJ5LmJpbmQodGhpcykpXG4gIH1cblxuICBhc3luYyBfb25DbGlja1RvZ2dsZSAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgcHJvcGVydHlJZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5wcm9wZXJ0eVxuICAgIGF3YWl0IHRoaXMuaXRlbS50b2dnbGVQcm9wZXJ0eShcbiAgICAgIHByb3BlcnR5SWQsXG4gICAgICBpc0N0cmxLZXkoZXZlbnQpXG4gICAgKVxuICB9XG5cbiAgYXN5bmMgX29uRHJvcCAoZXZlbnQsIGNvbGxlY3Rpb25OYW1lID0gJ2l0ZW1zJykge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuXG4gICAgY29uc3QgZGF0YUxpc3QgPSBhd2FpdCBDb0M3VXRpbGl0aWVzLmdldERhdGFGcm9tRHJvcEV2ZW50KGV2ZW50LCAnSXRlbScpXG5cbiAgICBsZXQgdXNlQ29DSUQgPSAwXG4gICAgY29uc3QgY29sbGVjdGlvbiA9IHRoaXMuaXRlbS5zeXN0ZW1bY29sbGVjdGlvbk5hbWVdID8gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5pdGVtLnN5c3RlbVtjb2xsZWN0aW9uTmFtZV0pIDogW11cbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgZGF0YUxpc3QpIHtcbiAgICAgIGlmICghaXRlbSB8fCAhaXRlbS5zeXN0ZW0pIGNvbnRpbnVlXG4gICAgICBpZiAoIVsnaXRlbScsICd3ZWFwb24nLCAnc2tpbGwnLCAnYm9vaycsICdzcGVsbCddLmluY2x1ZGVzKGl0ZW0udHlwZSkpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgaWYgKCFDb0M3SXRlbS5pc0FueVNwZWMoaXRlbSkpIHtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24uZmluZChlbCA9PiBlbC5uYW1lID09PSBpdGVtLm5hbWUpKSB7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodXNlQ29DSUQgPT09IDApIHtcbiAgICAgICAgdXNlQ29DSUQgPSBhd2FpdCBEcm9wQ29DSUQuY3JlYXRlKClcbiAgICAgIH1cbiAgICAgIGNvbGxlY3Rpb24ucHVzaChEcm9wQ29DSUQucHJvY2Vzc0l0ZW0odXNlQ29DSUQsIGl0ZW0pKVxuICAgIH1cblxuICAgIGF3YWl0IHRoaXMuaXRlbS51cGRhdGUoeyBbYHN5c3RlbS4ke2NvbGxlY3Rpb25OYW1lfWBdOiBjb2xsZWN0aW9uIH0pXG4gIH1cblxuICBhc3luYyBfb25SZW1vdmVTZWN0aW9uIChldmVudCkge1xuICAgIGNvbnN0IGEgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgY29uc3QgZGl2ID0gYS5jbG9zZXN0KCcuaXRlbScpXG4gICAgY29uc3QgYmlvID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5pdGVtLnN5c3RlbS5iaW9TZWN0aW9ucylcbiAgICBiaW8uc3BsaWNlKE51bWJlcihkaXYuZGF0YXNldC5pbmRleCksIDEpXG4gICAgYXdhaXQgdGhpcy5pdGVtLnVwZGF0ZSh7ICdzeXN0ZW0uYmlvU2VjdGlvbnMnOiBiaW8gfSlcbiAgfVxuXG4gIGFzeW5jIF9vbkFkZEJpbyAoKSB7XG4gICAgY29uc3QgYmlvID0gdGhpcy5pdGVtLnN5c3RlbS5iaW9TZWN0aW9ucyA/IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKHRoaXMuaXRlbS5zeXN0ZW0uYmlvU2VjdGlvbnMpIDogW11cbiAgICBiaW8ucHVzaChudWxsKVxuICAgIGF3YWl0IHRoaXMuaXRlbS51cGRhdGUoeyAnc3lzdGVtLmJpb1NlY3Rpb25zJzogYmlvIH0pXG4gIH1cblxuICBfb25BZGRNb25ldGFyeSAoKSB7XG4gICAgY29uc3QgdmFsdWVzID0gdGhpcy5pdGVtLnN5c3RlbS5tb25ldGFyeS52YWx1ZXMgPyBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZSh0aGlzLml0ZW0uc3lzdGVtLm1vbmV0YXJ5LnZhbHVlcykgOiBbXVxuICAgIHZhbHVlcy5wdXNoKHtcbiAgICAgIG5hbWU6ICcnLFxuICAgICAgbWluOiBudWxsLFxuICAgICAgbWF4OiBudWxsLFxuICAgICAgY2FzaFR5cGU6IDAsXG4gICAgICBjYXNoVmFsdWU6ICcnLFxuICAgICAgYXNzZXRzVHlwZTogMCxcbiAgICAgIGFzc2V0c1ZhbHVlOiAnJyxcbiAgICAgIHNwZW5kaW5nVHlwZTogMCxcbiAgICAgIHNwZW5kaW5nVmFsdWU6ICcnXG4gICAgfSlcbiAgICB0aGlzLml0ZW0udXBkYXRlKHsgJ3N5c3RlbS5tb25ldGFyeS52YWx1ZXMnOiB2YWx1ZXMgfSlcbiAgfVxuXG4gIF9vblJlbW92ZU1vbmV0YXJ5IChldmVudCkge1xuICAgIGNvbnN0IGEgPSBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgY29uc3QgZGl2ID0gYS5jbG9zZXN0KCcuaXRlbScpXG4gICAgY29uc3QgdmFsdWVzID0gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5pdGVtLnN5c3RlbS5tb25ldGFyeS52YWx1ZXMpXG4gICAgdmFsdWVzLnNwbGljZShOdW1iZXIoZGl2LmRhdGFzZXQuaW5kZXgpLCAxKVxuICAgIHRoaXMuaXRlbS51cGRhdGUoeyAnc3lzdGVtLm1vbmV0YXJ5LnZhbHVlcyc6IHZhbHVlcyB9KVxuICB9XG5cbiAgYXN5bmMgX29uSXRlbVN1bW1hcnkgKGV2ZW50LCBjb2xsZWN0aW9uTmFtZSA9ICdpdGVtcycpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgbGkgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnBhcmVudHMoJy5pdGVtJylcbiAgICBjb25zdCBpdGVtID0gdGhpcy5pdGVtLnN5c3RlbVtjb2xsZWN0aW9uTmFtZV0uZmluZChzID0+IHtcbiAgICAgIHJldHVybiBzLl9pZCA9PT0gbGkuZGF0YSgnaXRlbS1pZCcpXG4gICAgfSlcbiAgICBpZiAoIWl0ZW0pIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCBjaGF0RGF0YSA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIGl0ZW0uc3lzdGVtLmRlc2NyaXB0aW9uLnZhbHVlLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogdGhpcy5pdGVtLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgLy8gVG9nZ2xlIHN1bW1hcnlcbiAgICBpZiAobGkuaGFzQ2xhc3MoJ2V4cGFuZGVkJykpIHtcbiAgICAgIGNvbnN0IHN1bW1hcnkgPSBsaS5jaGlsZHJlbignLml0ZW0tc3VtbWFyeScpXG4gICAgICBzdW1tYXJ5LnNsaWRlVXAoMjAwLCAoKSA9PiBzdW1tYXJ5LnJlbW92ZSgpKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBkaXYgPSAkKGA8ZGl2IGNsYXNzPVwiaXRlbS1zdW1tYXJ5XCI+JHtjaGF0RGF0YX08L2Rpdj5gKVxuICAgICAgY29uc3QgcHJvcHMgPSAkKCc8ZGl2IGNsYXNzPVwiaXRlbS1wcm9wZXJ0aWVzXCI+PC9kaXY+JylcbiAgICAgIC8vIGZvciAoY29uc3QgcCBvZiBjaGF0RGF0YS5wcm9wZXJ0aWVzKSB7IHByb3BzLmFwcGVuZChgPHNwYW4gY2xhc3M9XCJ0YWdcIj4ke3B9PC9zcGFuPmApIH1cbiAgICAgIGRpdi5hcHBlbmQocHJvcHMpXG4gICAgICBsaS5hcHBlbmQoZGl2LmhpZGUoKSlcbiAgICAgIGRpdi5zbGlkZURvd24oMjAwKVxuICAgIH1cbiAgICBsaS50b2dnbGVDbGFzcygnZXhwYW5kZWQnKVxuICB9XG5cbiAgYXN5bmMgX29uSXRlbURlbGV0ZSAoZXZlbnQsIGNvbGxlY3Rpb25OYW1lID0gJ2l0ZW1zJykge1xuICAgIGNvbnN0IGl0ZW0gPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmNsb3Nlc3QoJy5pdGVtJylcbiAgICBjb25zdCBpdGVtSWQgPSBpdGVtLmRhdGEoJ2l0ZW0taWQnKVxuICAgIGNvbnN0IENvQ0lkID0gaXRlbS5kYXRhKCdjb2NpZCcpXG4gICAgY29uc3QgaXRlbUluZGV4ID0gdGhpcy5pdGVtLnN5c3RlbVtjb2xsZWN0aW9uTmFtZV0uZmluZEluZGV4KGkgPT4gKGl0ZW1JZCAmJiBpLl9pZCA9PT0gaXRlbUlkKSB8fCAoQ29DSWQgJiYgaSA9PT0gQ29DSWQpKVxuICAgIGlmIChpdGVtSW5kZXggPiAtMSkge1xuICAgICAgY29uc3QgY29sbGVjdGlvbiA9IHRoaXMuaXRlbS5zeXN0ZW1bY29sbGVjdGlvbk5hbWVdID8gZm91bmRyeS51dGlscy5kdXBsaWNhdGUodGhpcy5pdGVtLnN5c3RlbVtjb2xsZWN0aW9uTmFtZV0pIDogW11cbiAgICAgIGNvbGxlY3Rpb24uc3BsaWNlKGl0ZW1JbmRleCwgMSlcbiAgICAgIGF3YWl0IHRoaXMuaXRlbS51cGRhdGUoeyBbYHN5c3RlbS4ke2NvbGxlY3Rpb25OYW1lfWBdOiBjb2xsZWN0aW9uIH0pXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc3VwZXIuZGVmYXVsdE9wdGlvbnMsIHtcbiAgICAgIGNsYXNzZXM6IFsnY29jNycsICdzaGVldCcsICdzZXR1cCddLFxuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2l0ZW1zL3NldHVwLmh0bWwnLFxuICAgICAgd2lkdGg6IDU2NSxcbiAgICAgIGhlaWdodDogNTMwLFxuICAgICAgZHJhZ0Ryb3A6IFt7IGRyYWdTZWxlY3RvcjogJy5pdGVtJyB9XSxcbiAgICAgIHNjcm9sbFk6IFsnLnRhYi5kZXNjcmlwdGlvbiddLFxuICAgICAgdGFiczogW1xuICAgICAgICB7XG4gICAgICAgICAgbmF2U2VsZWN0b3I6ICcuc2hlZXQtbmF2aWdhdGlvbicsXG4gICAgICAgICAgY29udGVudFNlbGVjdG9yOiAnLnNoZWV0LWJvZHknLFxuICAgICAgICAgIGluaXRpYWw6ICdkZXNjcmlwdGlvbidcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pXG4gIH1cblxuICBfZ2V0SGVhZGVyQnV0dG9ucyAoKSB7XG4gICAgY29uc3QgaGVhZGVyQnV0dG9ucyA9IHN1cGVyLl9nZXRIZWFkZXJCdXR0b25zKClcbiAgICBhZGRDb0NJRFNoZWV0SGVhZGVyQnV0dG9uKGhlYWRlckJ1dHRvbnMsIHRoaXMpXG4gICAgcmV0dXJuIGhlYWRlckJ1dHRvbnNcbiAgfVxuXG4gIGFzeW5jIGdldERhdGEgKCkge1xuICAgIGNvbnN0IHNoZWV0RGF0YSA9IHN1cGVyLmdldERhdGEoKVxuXG4gICAgc2hlZXREYXRhLmhhc093bmVyID0gdGhpcy5pdGVtLmlzRW1iZWRkZWQgPT09IHRydWVcblxuICAgIGNvbnN0IGVyYSA9IE9iamVjdC5lbnRyaWVzKHRoaXMuaXRlbS5mbGFncz8uQ29DNz8uY29jaWRGbGFnPy5lcmFzID8/IHt9KS5maWx0ZXIoZSA9PiBlWzFdKS5tYXAoZSA9PiBlWzBdKVxuXG4gICAgY29uc3QgaXRlbXMgPSBhd2FpdCBnYW1lLnN5c3RlbS5hcGkuY29jaWQuZXhwYW5kSXRlbUFycmF5KHsgaXRlbUxpc3Q6IHRoaXMuaXRlbS5zeXN0ZW0uaXRlbXMsIGVyYTogKHR5cGVvZiBlcmFbMF0gIT09ICd1bmRlZmluZWQnID8gZXJhWzBdIDogdHJ1ZSkgfSlcblxuICAgIHNoZWV0RGF0YS5za2lsbHMgPSBpdGVtcy5maWx0ZXIoaXQgPT4gaXQudHlwZSA9PT0gJ3NraWxsJylcbiAgICBzaGVldERhdGEub3RoZXJJdGVtcyA9IGl0ZW1zLmZpbHRlcihpdCA9PiBpdC50eXBlICE9PSAnc2tpbGwnKVxuXG4gICAgc2hlZXREYXRhLnNraWxsTGlzdEVtcHR5ID0gc2hlZXREYXRhLnNraWxscy5sZW5ndGggPT09IDBcbiAgICBzaGVldERhdGEuaXRlbXNMaXN0RW1wdHkgPSBzaGVldERhdGEub3RoZXJJdGVtcy5sZW5ndGggPT09IDBcblxuICAgIHNoZWV0RGF0YS5za2lsbHMuc29ydChDb0M3VXRpbGl0aWVzLnNvcnRCeU5hbWVLZXkpXG5cbiAgICBzaGVldERhdGEuX2VyYXMgPSBbXVxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKENPQzcuZXJhcykpIHtcbiAgICAgIHNoZWV0RGF0YS5fZXJhcy5wdXNoKHtcbiAgICAgICAgaWQ6IGtleSxcbiAgICAgICAgbmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKHZhbHVlKSxcbiAgICAgICAgaXNFbmFibGVkOiAodGhpcy5pdGVtLmZsYWdzPy5Db0M3Py5jb2NpZEZsYWc/LmVyYXMgPz8ge30pW2tleV0gPT09IHRydWVcbiAgICAgIH0pXG4gICAgfVxuICAgIHNoZWV0RGF0YS5fZXJhcy5zb3J0KENvQzdVdGlsaXRpZXMuc29ydEJ5TmFtZUtleSlcblxuICAgIHNoZWV0RGF0YS5fbW9uZXRhcnlGb3JtYXRzID0gW11cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBDT0M3Lm1vbmV0YXJ5Rm9ybWF0cykge1xuICAgICAgc2hlZXREYXRhLl9tb25ldGFyeUZvcm1hdHMucHVzaCh7IGtleSwgdmFsOiBnYW1lLmkxOG4ubG9jYWxpemUoQ09DNy5tb25ldGFyeUZvcm1hdHNba2V5XSkgfSlcbiAgICB9XG5cbiAgICBzaGVldERhdGEuc2hvd0N1cnJlbmN5U3ltYm9sID0gWydkZWNpbWFsTGVmdCcsICdkZWNpbWFsUmlnaHQnLCAnaW50ZWdlckxlZnQnLCAnaW50ZWdlclJpZ2h0J10uaW5jbHVkZXMoc2hlZXREYXRhLmRhdGEuc3lzdGVtLm1vbmV0YXJ5LmZvcm1hdClcblxuICAgIHNoZWV0RGF0YS5fbW9uZXRhcnlUeXBlcyA9IFtdXG4gICAgZm9yIChjb25zdCBrZXkgaW4gQ09DNy5tb25ldGFyeVR5cGVzKSB7XG4gICAgICBpZiAoQ09DNy5tb25ldGFyeVR5cGVzW2tleV0uZmlsdGVyLmxlbmd0aCA9PT0gMCB8fCBDT0M3Lm1vbmV0YXJ5VHlwZXNba2V5XS5maWx0ZXIuaW5jbHVkZXMoc2hlZXREYXRhLmRhdGEuc3lzdGVtLm1vbmV0YXJ5LmZvcm1hdCkpIHtcbiAgICAgICAgc2hlZXREYXRhLl9tb25ldGFyeVR5cGVzLnB1c2goeyBrZXksIHZhbDogZ2FtZS5pMThuLmxvY2FsaXplKENPQzcubW9uZXRhcnlUeXBlc1trZXldLm5hbWUpIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgc2hlZXREYXRhLm9uZUJsb2NrQmFja1N0b3J5ID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnb25lQmxvY2tCYWNrc3RvcnknKVxuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25WYWx1ZSA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5kZXNjcmlwdGlvbi52YWx1ZSxcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZERlc2NyaXB0aW9uS2VlcGVyID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmRlc2NyaXB0aW9uLmtlZXBlcixcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZEJhY2tzdG9yeSA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5iYWNrc3RvcnksXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICBzaGVldERhdGEuaXNLZWVwZXIgPSBnYW1lLnVzZXIuaXNHTVxuICAgIHJldHVybiBzaGVldERhdGFcbiAgfVxuXG4gIF91cGRhdGVPYmplY3QgKGV2ZW50LCBmb3JtRGF0YSkge1xuICAgIGNvbnN0IHN5c3RlbSA9IGZvdW5kcnkudXRpbHMuZXhwYW5kT2JqZWN0KGZvcm1EYXRhKT8uc3lzdGVtXG4gICAgaWYgKHN5c3RlbS5iaW9TZWN0aW9ucykge1xuICAgICAgZm9ybURhdGFbJ3N5c3RlbS5iaW9TZWN0aW9ucyddID0gT2JqZWN0LnZhbHVlcyhcbiAgICAgICAgc3lzdGVtLmJpb1NlY3Rpb25zIHx8IFtdXG4gICAgICApXG4gICAgfVxuICAgIGlmIChzeXN0ZW0ubW9uZXRhcnkudmFsdWVzKSB7XG4gICAgICBmb3JtRGF0YVsnc3lzdGVtLm1vbmV0YXJ5LnZhbHVlcyddID0gT2JqZWN0LnZhbHVlcyhzeXN0ZW0ubW9uZXRhcnkudmFsdWVzIHx8IFtdKVxuICAgIH1cblxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0Py5uYW1lID09PSAnc3lzdGVtLmNoYXJhY3RlcmlzdGljcy5wb2ludHMuZW5hYmxlZCcpIHtcbiAgICAgIGZvcm1EYXRhWydzeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnJvbGxzLmVuYWJsZWQnXSA9ICFldmVudC5jdXJyZW50VGFyZ2V0LmNoZWNrZWRcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldD8ubmFtZSA9PT0gJ3N5c3RlbS5jaGFyYWN0ZXJpc3RpY3Mucm9sbHMuZW5hYmxlZCcpIHtcbiAgICAgIGZvcm1EYXRhWydzeXN0ZW0uY2hhcmFjdGVyaXN0aWNzLnBvaW50cy5lbmFibGVkJ10gPSAhZXZlbnQuY3VycmVudFRhcmdldC5jaGVja2VkXG4gICAgfVxuXG4gICAgc3VwZXIuX3VwZGF0ZU9iamVjdChldmVudCwgZm9ybURhdGEpXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBmb3VuZHJ5LCBnYW1lLCBJdGVtU2hlZXQsIFRleHRFZGl0b3IgKi9cbmltcG9ydCB7IGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24gfSBmcm9tICcuLi8uLi9zY3JpcHRzL2NvYy1pZC1idXR0b24uanMnXG5pbXBvcnQgQ29DN0FjdGl2ZUVmZmVjdCBmcm9tICcuLi8uLi9hY3RpdmUtZWZmZWN0LmpzJ1xuaW1wb3J0IHsgQ09DNyB9IGZyb20gJy4uLy4uL2NvbmZpZy5qcydcbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMuanMnXG5pbXBvcnQgeyBpc0N0cmxLZXkgfSBmcm9tICcuLi8uLi9jaGF0L2hlbHBlci5qcydcblxuLyoqXG4gKiBFeHRlbmQgdGhlIGJhc2ljIEl0ZW1TaGVldCB3aXRoIHNvbWUgdmVyeSBzaW1wbGUgbW9kaWZpY2F0aW9uc1xuICovXG5leHBvcnQgY2xhc3MgQ29DN1NraWxsU2hlZXQgZXh0ZW5kcyBJdGVtU2hlZXQge1xuICBjb25zdHJ1Y3RvciAoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpXG4gICAgdGhpcy5fc2hlZXRUYWIgPSAnaXRlbXMnXG4gIH1cblxuICAvKipcbiAgICogRXh0ZW5kIGFuZCBvdmVycmlkZSB0aGUgZGVmYXVsdCBvcHRpb25zIHVzZWQgYnkgdGhlIFNpbXBsZSBJdGVtIFNoZWV0XG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zICgpIHtcbiAgICByZXR1cm4gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgY2xhc3NlczogWydjb2M3JywgJ3NoZWV0JywgJ2l0ZW0nXSxcbiAgICAgIHdpZHRoOiA1MjAsXG4gICAgICBoZWlnaHQ6IDQ4MCxcbiAgICAgIHNjcm9sbFk6IFsnLnRhYi5kZXNjcmlwdGlvbiddLFxuICAgICAgdGFiczogW1xuICAgICAgICB7XG4gICAgICAgICAgbmF2U2VsZWN0b3I6ICcuc2hlZXQtbmF2aWdhdGlvbicsXG4gICAgICAgICAgY29udGVudFNlbGVjdG9yOiAnLnNoZWV0LWJvZHknLFxuICAgICAgICAgIGluaXRpYWw6ICdkZXNjcmlwdGlvbidcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pXG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGdldCB0ZW1wbGF0ZSAoKSB7XG4gICAgcmV0dXJuIGBzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2l0ZW1zLyR7dGhpcy5pdGVtLnR5cGV9LXNoZWV0Lmh0bWxgXG4gIH1cblxuICBfZ2V0SGVhZGVyQnV0dG9ucyAoKSB7XG4gICAgY29uc3QgaGVhZGVyQnV0dG9ucyA9IHN1cGVyLl9nZXRIZWFkZXJCdXR0b25zKClcbiAgICBhZGRDb0NJRFNoZWV0SGVhZGVyQnV0dG9uKGhlYWRlckJ1dHRvbnMsIHRoaXMpXG4gICAgcmV0dXJuIGhlYWRlckJ1dHRvbnNcbiAgfVxuXG4gIC8qKlxuICAgKiBQcmVwYXJlIGRhdGEgZm9yIHJlbmRlcmluZyB0aGUgSXRlbSBzaGVldFxuICAgKiBUaGUgcHJlcGFyZWQgZGF0YSBvYmplY3QgY29udGFpbnMgYm90aCB0aGUgYWN0b3IgZGF0YSBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgc2hlZXQgb3B0aW9uc1xuICAgKi9cbiAgYXN5bmMgZ2V0RGF0YSAoKSB7XG4gICAgLy8gdGhpcy5pdGVtLmNoZWNrU2tpbGxQcm9wZXJ0aWVzKCk7XG4gICAgY29uc3Qgc2hlZXREYXRhID0gc3VwZXIuZ2V0RGF0YSgpXG5cbiAgICBzaGVldERhdGEuaGFzT3duZXIgPSB0aGlzLml0ZW0uaXNFbWJlZGRlZCA9PT0gdHJ1ZVxuICAgIHNoZWV0RGF0YS5oYWROb25DaGFyYWN0ZXJPd25lciA9IHNoZWV0RGF0YS5oYXNPd25lciAmJiB0aGlzLmFjdG9yPy50eXBlICE9PSAnY2hhcmFjdGVyJ1xuXG4gICAgc2hlZXREYXRhLmVmZmVjdHMgPSBDb0M3QWN0aXZlRWZmZWN0LnByZXBhcmVBY3RpdmVFZmZlY3RDYXRlZ29yaWVzKFxuICAgICAgdGhpcy5pdGVtLmVmZmVjdHNcbiAgICApXG5cbiAgICBzaGVldERhdGEuX3Byb3BlcnRpZXMgPSBbXVxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKENPQzcuc2tpbGxQcm9wZXJ0aWVzKSkge1xuICAgICAgc2hlZXREYXRhLl9wcm9wZXJ0aWVzLnB1c2goe1xuICAgICAgICBpZDoga2V5LFxuICAgICAgICBuYW1lOiB2YWx1ZSxcbiAgICAgICAgaXNFbmFibGVkOiB0aGlzLml0ZW0uc3lzdGVtLnByb3BlcnRpZXNba2V5XSA9PT0gdHJ1ZVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBzaGVldERhdGEuX2VyYXMgPSBbXVxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKENPQzcuZXJhcykpIHtcbiAgICAgIHNoZWV0RGF0YS5fZXJhcy5wdXNoKHtcbiAgICAgICAgaWQ6IGtleSxcbiAgICAgICAgbmFtZTogZ2FtZS5pMThuLmxvY2FsaXplKHZhbHVlKSxcbiAgICAgICAgaXNFbmFibGVkOiAodGhpcy5pdGVtLmZsYWdzPy5Db0M3Py5jb2NpZEZsYWc/LmVyYXMgPz8ge30pW2tleV0gPT09IHRydWVcbiAgICAgIH0pXG4gICAgfVxuICAgIHNoZWV0RGF0YS5fZXJhcy5zb3J0KENvQzdVdGlsaXRpZXMuc29ydEJ5TmFtZUtleSlcblxuICAgIHNoZWV0RGF0YS5pc1NwZWNpYWxpemVkID0gdGhpcy5pdGVtLnN5c3RlbS5wcm9wZXJ0aWVzLnNwZWNpYWxcbiAgICBzaGVldERhdGEuY2FuTW9kaWZ5U3BlYyA9XG4gICAgICAhdGhpcy5pdGVtLnN5c3RlbS5wcm9wZXJ0aWVzLmZpcmVhcm0gJiZcbiAgICAgICF0aGlzLml0ZW0uc3lzdGVtLnByb3BlcnRpZXMuZmlnaHRpbmdcblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZERlc2NyaXB0aW9uVmFsdWUgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24udmFsdWUsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICBzaGVldERhdGEuZW5yaWNoZWREZXNjcmlwdGlvbktlZXBlciA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5kZXNjcmlwdGlvbi5rZWVwZXIsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICBzaGVldERhdGEuaXNLZWVwZXIgPSBnYW1lLnVzZXIuaXNHTVxuICAgIHJldHVybiBzaGVldERhdGFcbiAgfVxuXG4gIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbiAgLyoqXG4gICAqIEFjdGl2YXRlIGV2ZW50IGxpc3RlbmVycyB1c2luZyB0aGUgcHJlcGFyZWQgc2hlZXQgSFRNTFxuICAgKiBAcGFyYW0gaHRtbCB7SFRNTH0gICBUaGUgcHJlcGFyZWQgSFRNTCBvYmplY3QgcmVhZHkgdG8gYmUgcmVuZGVyZWQgaW50byB0aGUgRE9NXG4gICAqL1xuICBhY3RpdmF0ZUxpc3RlbmVycyAoaHRtbCkge1xuICAgIHN1cGVyLmFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpXG4gICAgLy8gRXZlcnl0aGluZyBiZWxvdyBoZXJlIGlzIG9ubHkgbmVlZGVkIGlmIHRoZSBzaGVldCBpcyBlZGl0YWJsZVxuICAgIGlmICghdGhpcy5vcHRpb25zLmVkaXRhYmxlKSByZXR1cm5cblxuICAgIGh0bWwuZmluZCgnLnRvZ2dsZS1zd2l0Y2gnKS5jbGljayh0aGlzLl9vbkNsaWNrVG9nZ2xlLmJpbmQodGhpcykpXG4gIH1cblxuICAvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4gIGFzeW5jIF9vbkNsaWNrVG9nZ2xlIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBwcm9wZXJ0eUlkID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcudG9nZ2xlLXN3aXRjaCcpLmRhdGFzZXQucHJvcGVydHlcbiAgICBhd2FpdCB0aGlzLml0ZW0udG9nZ2xlUHJvcGVydHkoXG4gICAgICBwcm9wZXJ0eUlkLFxuICAgICAgaXNDdHJsS2V5KGV2ZW50KVxuICAgIClcbiAgfVxuXG4gIC8vIGFzeW5jIF9vbkNsaWNrQXR0cmlidXRlQ29udHJvbChldmVudCkge1xuICAvLyAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIC8vICAgY29uc3QgYSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gIC8vICAgY29uc3QgYWN0aW9uID0gYS5kYXRhc2V0LmFjdGlvbjtcbiAgLy8gICBjb25zdCBhdHRycyA9IHRoaXMub2JqZWN0LmRhdGEuZGF0YS5hdHRyaWJ1dGVzO1xuICAvLyAgIGNvbnN0IGZvcm0gPSB0aGlzLmZvcm07XG5cbiAgLy8gICAvLyBBZGQgbmV3IGF0dHJpYnV0ZVxuICAvLyAgIGlmIChhY3Rpb24gPT09IFwiY3JlYXRlXCIpIHtcbiAgLy8gICAgIGNvbnN0IG5rID0gT2JqZWN0LmtleXMoYXR0cnMpLmxlbmd0aCArIDE7XG4gIC8vICAgICBsZXQgbmV3S2V5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgLy8gICAgIG5ld0tleS5pbm5lckhUTUwgPSBgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImRhdGEuYXR0cmlidXRlcy5hdHRyJHtua30ua2V5XCIgdmFsdWU9XCJhdHRyJHtua31cIi8+YDtcbiAgLy8gICAgIG5ld0tleSA9IG5ld0tleS5jaGlsZHJlblswXTtcbiAgLy8gICAgIGZvcm0uYXBwZW5kQ2hpbGQobmV3S2V5KTtcbiAgLy8gICAgIGF3YWl0IHRoaXMuX29uU3VibWl0KGV2ZW50KTtcbiAgLy8gICB9XG5cbiAgLy8gICAvLyBSZW1vdmUgZXhpc3RpbmcgYXR0cmlidXRlXG4gIC8vICAgZWxzZSBpZiAoYWN0aW9uID09PSBcImRlbGV0ZVwiKSB7XG4gIC8vICAgICBjb25zdCBsaSA9IGEuY2xvc2VzdChcIi5hdHRyaWJ1dGVcIik7XG4gIC8vICAgICBsaS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGxpKTtcbiAgLy8gICAgIGF3YWl0IHRoaXMuX29uU3VibWl0KGV2ZW50KTtcbiAgLy8gICB9XG4gIC8vIH1cblxuICAvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4gIC8qKlxuICAgKiBJbXBsZW1lbnQgdGhlIF91cGRhdGVPYmplY3QgbWV0aG9kIGFzIHJlcXVpcmVkIGJ5IHRoZSBwYXJlbnQgY2xhc3Mgc3BlY1xuICAgKiBUaGlzIGRlZmluZXMgaG93IHRvIHVwZGF0ZSB0aGUgc3ViamVjdCBvZiB0aGUgZm9ybSB3aGVuIHRoZSBmb3JtIGlzIHN1Ym1pdHRlZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgLy8gX3VwZGF0ZU9iamVjdChldmVudCwgZm9ybURhdGEpIHtcbiAgLy8gICAvLyBIYW5kbGUgdGhlIGZyZWUtZm9ybSBhdHRyaWJ1dGVzIGxpc3RcbiAgLy8gICBjb25zdCBmb3JkID0gZm91bmRyeS51dGlscy5leHBhbmRPYmplY3QoZm9ybURhdGEpO1xuICAvLyAgIGNvbnN0IGZvcm1BdHRycyA9IGZvdW5kcnkudXRpbHMuZXhwYW5kT2JqZWN0KGZvcm1EYXRhKS5kYXRhLmF0dHJpYnV0ZXMgfHwge307XG4gIC8vICAgY29uc3QgYXR0cmlidXRlcyA9IE9iamVjdC52YWx1ZXMoZm9ybUF0dHJzKS5yZWR1Y2UoKG9iaiwgdikgPT4ge1xuICAvLyAgICAgbGV0IGsgPSB2W1wia2V5XCJdLnRyaW0oKTtcbiAgLy8gICAgIGlmICgvW1xcc1xcLl0vLnRlc3QoaykpIHJldHVybiB1aS5ub3RpZmljYXRpb25zLmVycm9yKFwiQXR0cmlidXRlIGtleXMgbWF5IG5vdCBjb250YWluIHNwYWNlcyBvciBwZXJpb2RzXCIpO1xuICAvLyAgICAgZGVsZXRlIHZbXCJrZXlcIl07XG4gIC8vICAgICBvYmpba10gPSB2O1xuICAvLyAgICAgcmV0dXJuIG9iajtcbiAgLy8gICB9LCB7fSk7XG5cbiAgLy8gICAvLyBSZW1vdmUgYXR0cmlidXRlcyB3aGljaCBhcmUgbm8gbG9uZ2VyIHVzZWRcbiAgLy8gICBmb3IgKGxldCBrIG9mIE9iamVjdC5rZXlzKHRoaXMub2JqZWN0LmRhdGEuZGF0YS5hdHRyaWJ1dGVzKSkge1xuICAvLyAgICAgaWYgKCFhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KGspKSBhdHRyaWJ1dGVzW2AtPSR7a31gXSA9IG51bGw7XG4gIC8vICAgfVxuXG4gIC8vICAgLy8gUmUtY29tYmluZSBmb3JtRGF0YVxuICAvLyAgIGZvcm1EYXRhID0gT2JqZWN0LmVudHJpZXMoZm9ybURhdGEpLmZpbHRlcihlID0+ICFlWzBdLnN0YXJ0c1dpdGgoXCJkYXRhLmF0dHJpYnV0ZXNcIikpLnJlZHVjZSgob2JqLCBlKSA9PiB7XG4gIC8vICAgICBvYmpbZVswXV0gPSBlWzFdO1xuICAvLyAgICAgcmV0dXJuIG9iajtcbiAgLy8gICB9LCB7IF9pZDogdGhpcy5vYmplY3QuX2lkLCBcImRhdGEuYXR0cmlidXRlc1wiOiBhdHRyaWJ1dGVzIH0pO1xuXG4gIC8vICAgLy8gVXBkYXRlIHRoZSBJdGVtXG4gIC8vICAgcmV0dXJuIHRoaXMub2JqZWN0LnVwZGF0ZShmb3JtRGF0YSk7XG4gIC8vIH1cblxuICBhc3luYyBfdXBkYXRlT2JqZWN0IChldmVudCwgZm9ybURhdGEpIHtcbiAgICBjb25zdCBza2lsbE5hbWUgPSBmb3JtRGF0YVsnc3lzdGVtLnNraWxsTmFtZSddIHx8IHRoaXMuaXRlbS5zeXN0ZW0uc2tpbGxOYW1lXG4gICAgaWYgKHRoaXMuaXRlbS5zeXN0ZW0ucHJvcGVydGllcz8uc3BlY2lhbCkge1xuICAgICAgY29uc3Qgc3BlY2lhbGl6YXRpb24gPSBmb3JtRGF0YVsnc3lzdGVtLnNwZWNpYWxpemF0aW9uJ10gfHwgdGhpcy5pdGVtLnN5c3RlbS5zcGVjaWFsaXphdGlvblxuICAgICAgZm9ybURhdGEubmFtZSA9IHNwZWNpYWxpemF0aW9uICsgJyAoJyArIHNraWxsTmFtZSArICcpJ1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JtRGF0YS5uYW1lID0gc2tpbGxOYW1lXG4gICAgfVxuICAgIHJldHVybiBzdXBlci5fdXBkYXRlT2JqZWN0KGV2ZW50LCBmb3JtRGF0YSlcbiAgfVxufVxuIiwiLyogZ2xvYmFsICQsIGZvdW5kcnksIGdhbWUsIEl0ZW1TaGVldCwgVGV4dEVkaXRvciAqL1xuaW1wb3J0IHsgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbiB9IGZyb20gJy4uLy4uL3NjcmlwdHMvY29jLWlkLWJ1dHRvbi5qcydcblxuZXhwb3J0IGNsYXNzIENvQzdTcGVsbFNoZWV0IGV4dGVuZHMgSXRlbVNoZWV0IHtcbiAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc3VwZXIuZGVmYXVsdE9wdGlvbnMsIHtcbiAgICAgIHRlbXBsYXRlOiAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9pdGVtcy9zcGVsbC9tYWluLmh0bWwnLFxuICAgICAgY2xhc3NlczogWydjb2M3JywgJ2l0ZW0nLCAnc3BlbGwnXSxcbiAgICAgIHdpZHRoOiA1MDAsXG4gICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgIHJlc2l6YWJsZTogZmFsc2UsXG4gICAgICBzY3JvbGxZOiBbJy5ib2R5J10sXG4gICAgICB0YWJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYXZTZWxlY3RvcjogJy5uYXZpZ2F0aW9uJyxcbiAgICAgICAgICBjb250ZW50U2VsZWN0b3I6ICcuYm9keScsXG4gICAgICAgICAgaW5pdGlhbDogJ2Rlc2NyaXB0aW9uJ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfSlcbiAgfVxuXG4gIF9nZXRIZWFkZXJCdXR0b25zICgpIHtcbiAgICBjb25zdCBoZWFkZXJCdXR0b25zID0gc3VwZXIuX2dldEhlYWRlckJ1dHRvbnMoKVxuICAgIGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24oaGVhZGVyQnV0dG9ucywgdGhpcylcbiAgICByZXR1cm4gaGVhZGVyQnV0dG9uc1xuICB9XG5cbiAgYXN5bmMgZ2V0RGF0YSAoKSB7XG4gICAgY29uc3Qgc2hlZXREYXRhID0gc3VwZXIuZ2V0RGF0YSgpXG4gICAgc2hlZXREYXRhLmhhc093bmVyID0gdGhpcy5pdGVtLmlzRW1iZWRkZWQgPT09IHRydWVcbiAgICBzaGVldERhdGEuaXNLZWVwZXIgPSBnYW1lLnVzZXIuaXNHTVxuICAgIHNoZWV0RGF0YS5pc093bmVyID0gdGhpcy5pdGVtLmlzT3duZXJcblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZERlc2NyaXB0aW9uVmFsdWUgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24udmFsdWUsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICBzaGVldERhdGEuZW5yaWNoZWREZXNjcmlwdGlvbktlZXBlciA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5kZXNjcmlwdGlvbi5rZWVwZXIsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICByZXR1cm4gc2hlZXREYXRhXG4gIH1cblxuICBhY3RpdmF0ZUxpc3RlbmVycyAoaHRtbCkge1xuICAgIHN1cGVyLmFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpXG4gICAgaHRtbC5maW5kKCcub3B0aW9uJykuY2xpY2soZXZlbnQgPT4gdGhpcy5tb2RpZnlUeXBlKGV2ZW50KSlcbiAgICBodG1sLmZpbmQoJyNjYXN0LXNwZWxsJykuY2xpY2soZXZlbnQgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgdGhpcy5pdGVtLmNhc3QoKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlIHRoZSBjaGVja2JveGVzIGZvciB0eXBlIHdoZW4gdXNlciBjbGlja3Mgb24gdGhlIGNvcnJlc3BvbmRpbmdcbiAgICogbGFiZWwsIG5vdCBzdXJlIGlmIHRoaXMgd29ya3Mgb24gZW5naW5lcyBvdGhlciB0aGFuIFY4XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBldmVudCBAc2VlIGFjdGl2YXRlTGlzdGVuZXJzXG4gICAqIEByZXR1cm5zIHtqUXVlcnkuRXZlbnR9IGNsaWNrXG4gICAqL1xuICBtb2RpZnlUeXBlIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAvKiogUHJldmVudHMgcHJvcGFnYXRpb24gb2YgdGhlIHNhbWUgZXZlbnQgZnJvbSBiZWluZyBjYWxsZWQgKi9cbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgIGNvbnN0IHRvZ2dsZVN3aXRjaCA9ICQoZXZlbnQuY3VycmVudFRhcmdldClcbiAgICByZXR1cm4gdG9nZ2xlU3dpdGNoLnByZXYoKS50cmlnZ2VyKCdjbGljaycpXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBmb3VuZHJ5LCBnYW1lLCBJdGVtU2hlZXQsIFRleHRFZGl0b3IgKi9cbmltcG9ydCB7IGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24gfSBmcm9tICcuLi8uLi9zY3JpcHRzL2NvYy1pZC1idXR0b24uanMnXG5pbXBvcnQgQ29DN0FjdGl2ZUVmZmVjdCBmcm9tICcuLi8uLi9hY3RpdmUtZWZmZWN0LmpzJ1xuaW1wb3J0IHsgQ09DNyB9IGZyb20gJy4uLy4uL2NvbmZpZy5qcydcblxuLyoqXG4gKiBFeHRlbmQgdGhlIGJhc2ljIEl0ZW1TaGVldCB3aXRoIHNvbWUgdmVyeSBzaW1wbGUgbW9kaWZpY2F0aW9uc1xuICovXG5leHBvcnQgY2xhc3MgQ29DN1N0YXR1c1NoZWV0IGV4dGVuZHMgSXRlbVNoZWV0IHtcbiAgLyoqXG4gICAqXG4gICAqL1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zICgpIHtcbiAgICByZXR1cm4gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgY2xhc3NlczogWydjb2M3JywgJ3NoZWV0JywgJ3N0YXR1cyddLFxuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2l0ZW1zL3N0YXR1cy5odG1sJyxcbiAgICAgIHdpZHRoOiA1MjUsXG4gICAgICBoZWlnaHQ6IDQ4MCxcbiAgICAgIHNjcm9sbFk6IFsnLnRhYi5kZXNjcmlwdGlvbiddLFxuICAgICAgdGFiczogW1xuICAgICAgICB7XG4gICAgICAgICAgbmF2U2VsZWN0b3I6ICcuc2hlZXQtbmF2aWdhdGlvbicsXG4gICAgICAgICAgY29udGVudFNlbGVjdG9yOiAnLnNoZWV0LWJvZHknLFxuICAgICAgICAgIGluaXRpYWw6ICdkZXNjcmlwdGlvbidcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pXG4gIH1cblxuICBhY3RpdmF0ZUxpc3RlbmVycyAoaHRtbCkge1xuICAgIHN1cGVyLmFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpXG5cbiAgICBodG1sXG4gICAgICAuZmluZCgnLmVmZmVjdC1jb250cm9sJylcbiAgICAgIC5jbGljayhldiA9PiBDb0M3QWN0aXZlRWZmZWN0Lm9uTWFuYWdlQWN0aXZlRWZmZWN0KGV2LCB0aGlzLml0ZW0pKVxuICB9XG5cbiAgX2dldEhlYWRlckJ1dHRvbnMgKCkge1xuICAgIGNvbnN0IGhlYWRlckJ1dHRvbnMgPSBzdXBlci5fZ2V0SGVhZGVyQnV0dG9ucygpXG4gICAgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbihoZWFkZXJCdXR0b25zLCB0aGlzKVxuICAgIHJldHVybiBoZWFkZXJCdXR0b25zXG4gIH1cblxuICAvKiBQcmVwYXJlIGRhdGEgZm9yIHJlbmRlcmluZyB0aGUgSXRlbSBzaGVldFxuICAgKiBUaGUgcHJlcGFyZWQgZGF0YSBvYmplY3QgY29udGFpbnMgYm90aCB0aGUgYWN0b3IgZGF0YSBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgc2hlZXQgb3B0aW9uc1xuICAgKi9cbiAgYXN5bmMgZ2V0RGF0YSAoKSB7XG4gICAgY29uc3Qgc2hlZXREYXRhID0gc3VwZXIuZ2V0RGF0YSgpXG4gICAgc2hlZXREYXRhLmVmZmVjdHMgPSBDb0M3QWN0aXZlRWZmZWN0LnByZXBhcmVBY3RpdmVFZmZlY3RDYXRlZ29yaWVzKHRoaXMuaXRlbS5lZmZlY3RzLCB7IHN0YXR1czogZmFsc2UgfSlcblxuICAgIHNoZWV0RGF0YS5pdGVtUHJvcGVydGllcyA9IFtdXG5cbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLml0ZW0uc3lzdGVtLnR5cGUpKSB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgc2hlZXREYXRhLml0ZW1Qcm9wZXJ0aWVzLnB1c2goXG4gICAgICAgICAgQ09DNy5zdGF0dXNUeXBlW2tleV0gPyBDT0M3LnN0YXR1c1R5cGVba2V5XSA6IG51bGxcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZERlc2NyaXB0aW9uVmFsdWUgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24udmFsdWUsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICBzaGVldERhdGEuZW5yaWNoZWREZXNjcmlwdGlvbk5vdGVzID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmRlc2NyaXB0aW9uLm5vdGVzLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25LZWVwZXIgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24ua2VlcGVyLFxuICAgICAge1xuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc2VjcmV0czogc2hlZXREYXRhLmVkaXRhYmxlXG4gICAgICB9XG4gICAgKVxuXG4gICAgc2hlZXREYXRhLmlzS2VlcGVyID0gZ2FtZS51c2VyLmlzR01cbiAgICByZXR1cm4gc2hlZXREYXRhXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBmb3VuZHJ5LCBnYW1lLCBJdGVtU2hlZXQsIFRleHRFZGl0b3IgKi9cbmltcG9ydCB7IGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24gfSBmcm9tICcuLi8uLi9zY3JpcHRzL2NvYy1pZC1idXR0b24uanMnXG5pbXBvcnQgeyBDT0M3IH0gZnJvbSAnLi4vLi4vY29uZmlnLmpzJ1xuXG4vKipcbiAqIEV4dGVuZCB0aGUgYmFzaWMgSXRlbVNoZWV0IHdpdGggc29tZSB2ZXJ5IHNpbXBsZSBtb2RpZmljYXRpb25zXG4gKi9cbmV4cG9ydCBjbGFzcyBDb0M3VGFsZW50U2hlZXQgZXh0ZW5kcyBJdGVtU2hlZXQge1xuICAvKipcbiAgICpcbiAgICovXG4gIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMgKCkge1xuICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRPcHRpb25zLCB7XG4gICAgICBjbGFzc2VzOiBbJ2NvYzcnLCAnc2hlZXQnLCAndGFsZW50J10sXG4gICAgICB0ZW1wbGF0ZTogJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvaXRlbXMvdGFsZW50Lmh0bWwnLFxuICAgICAgd2lkdGg6IDUyNSxcbiAgICAgIGhlaWdodDogNDgwLFxuICAgICAgc2Nyb2xsWTogWycudGFiLmRlc2NyaXB0aW9uJ10sXG4gICAgICB0YWJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYXZTZWxlY3RvcjogJy5zaGVldC1uYXZpZ2F0aW9uJyxcbiAgICAgICAgICBjb250ZW50U2VsZWN0b3I6ICcuc2hlZXQtYm9keScsXG4gICAgICAgICAgaW5pdGlhbDogJ2Rlc2NyaXB0aW9uJ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfSlcbiAgfVxuXG4gIF9nZXRIZWFkZXJCdXR0b25zICgpIHtcbiAgICBjb25zdCBoZWFkZXJCdXR0b25zID0gc3VwZXIuX2dldEhlYWRlckJ1dHRvbnMoKVxuICAgIGFkZENvQ0lEU2hlZXRIZWFkZXJCdXR0b24oaGVhZGVyQnV0dG9ucywgdGhpcylcbiAgICByZXR1cm4gaGVhZGVyQnV0dG9uc1xuICB9XG5cbiAgLyogUHJlcGFyZSBkYXRhIGZvciByZW5kZXJpbmcgdGhlIEl0ZW0gc2hlZXRcbiAgICogVGhlIHByZXBhcmVkIGRhdGEgb2JqZWN0IGNvbnRhaW5zIGJvdGggdGhlIGFjdG9yIGRhdGEgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIHNoZWV0IG9wdGlvbnNcbiAgICovXG4gIGFzeW5jIGdldERhdGEgKCkge1xuICAgIGNvbnN0IHNoZWV0RGF0YSA9IHN1cGVyLmdldERhdGEoKVxuXG4gICAgc2hlZXREYXRhLml0ZW1Qcm9wZXJ0aWVzID0gW11cblxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuaXRlbS5zeXN0ZW0udHlwZSkpIHtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBzaGVldERhdGEuaXRlbVByb3BlcnRpZXMucHVzaChcbiAgICAgICAgICBDT0M3LnRhbGVudFR5cGVba2V5XSA/IENPQzcudGFsZW50VHlwZVtrZXldIDogbnVsbFxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25WYWx1ZSA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5kZXNjcmlwdGlvbi52YWx1ZSxcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZERlc2NyaXB0aW9uTm90ZXMgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24ubm90ZXMsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICBzaGVldERhdGEuZW5yaWNoZWREZXNjcmlwdGlvbktlZXBlciA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5kZXNjcmlwdGlvbi5rZWVwZXIsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICBzaGVldERhdGEuaXNLZWVwZXIgPSBnYW1lLnVzZXIuaXNHTVxuICAgIHJldHVybiBzaGVldERhdGFcbiAgfVxufVxuIiwiLyogZ2xvYmFsIGZvdW5kcnksIGdhbWUsIFRleHRFZGl0b3IgKi9cbmltcG9ydCB7IENvQzdBY3RvclNoZWV0IH0gZnJvbSAnLi9iYXNlLmpzJ1xuXG5leHBvcnQgY2xhc3MgQ29DN1ZlaGljbGVTaGVldCBleHRlbmRzIENvQzdBY3RvclNoZWV0IHtcbiAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucyAoKSB7XG4gICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc3VwZXIuZGVmYXVsdE9wdGlvbnMsIHtcbiAgICAgIGNsYXNzZXM6IFsnY29jNycsICdzaGVldFYyJywgJ2FjdG9yJywgJ2l0ZW0nLCAndmVoaWNsZSddLFxuICAgICAgd2lkdGg6IDU1NSxcbiAgICAgIGhlaWdodDogNDIwLFxuICAgICAgcmVzaXphYmxlOiB0cnVlLFxuICAgICAgdGVtcGxhdGU6ICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FjdG9ycy92ZWhpY2xlLmh0bWwnLFxuICAgICAgZHJhZ0Ryb3A6IFt7IGRyYWdTZWxlY3RvcjogJy5hY3RvcicsIGRyb3BTZWxlY3RvcjogJy5kcm9wWm9uZScgfV0sXG4gICAgICB0YWJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYXZTZWxlY3RvcjogJy5zaGVldC1uYXYnLFxuICAgICAgICAgIGNvbnRlbnRTZWxlY3RvcjogJy5zaGVldC1ib2R5JyxcbiAgICAgICAgICBpbml0aWFsOiAnZGVzY3JpcHRpb24nXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgZ2V0RGF0YSAoKSB7XG4gICAgLy8gdWkubm90aWZpY2F0aW9ucy53YXJuKFxuICAgIC8vICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkV4cGVyaW1lbnRhbEZlYXR1cmVzV2FybmluZycpXG4gICAgLy8gKVxuICAgIGNvbnN0IHNoZWV0RGF0YSA9IGF3YWl0IHN1cGVyLmdldERhdGEoKVxuXG4gICAgc2hlZXREYXRhLnByb3BlcnRpZXMgPSBbXVxuICAgIGlmICh0aGlzLmFjdG9yLnN5c3RlbS5wcm9wZXJ0aWVzLmFybWVkKSB7XG4gICAgICBzaGVldERhdGEucHJvcGVydGllcy5wdXNoKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Bcm1lZFZlaGljbGUnKSlcbiAgICB9XG5cbiAgICBjb25zdCBleHBhbmRlZCA9IHRoaXMuYWN0b3IuZ2V0RmxhZygnQ29DNycsICdleHBhbmRlZCcpXG4gICAgaWYgKHR5cGVvZiBleHBhbmRlZCA9PT0gJ3VuZGVmaW5lZCcpIHNoZWV0RGF0YS5leHBhbmRlZCA9IHRydWVcbiAgICBlbHNlIHNoZWV0RGF0YS5leHBhbmRlZCA9IGV4cGFuZGVkXG4gICAgaWYgKHNoZWV0RGF0YS5leHBhbmRlZCkge1xuICAgICAgc2hlZXREYXRhLm9wdGlvbnMuaGVpZ2h0ID0gNDIwXG4gICAgfSBlbHNlIHNoZWV0RGF0YS5vcHRpb25zLmhlaWdodCA9ICdhdXRvJ1xuXG4gICAgc2hlZXREYXRhLmVucmljaGVkRGVzY3JpcHRpb25WYWx1ZSA9IGF3YWl0IFRleHRFZGl0b3IuZW5yaWNoSFRNTChcbiAgICAgIHNoZWV0RGF0YS5kYXRhLnN5c3RlbS5kZXNjcmlwdGlvbi52YWx1ZSxcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZERlc2NyaXB0aW9uTm90ZXMgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24ubm90ZXMsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICAvLyBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoc2hlZXREYXRhLmRhdGEudHlwZSkpIHtcbiAgICAvLyAgIGlmKCB2YWx1ZSkgc2hlZXREYXRhLml0ZW1Qcm9wZXJ0aWVzLnB1c2goIENPQzcuYm9va1R5cGVba2V5XT9DT0M3LmJvb2tUeXBlW2tleV06bnVsbCk7XG4gICAgLy8gfVxuICAgIHJldHVybiBzaGVldERhdGFcbiAgfVxuXG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcbiAgICBodG1sLmZpbmQoJy5hZGQtYXJtb3InKS5jbGljayhhc3luYyAoKSA9PiBhd2FpdCB0aGlzLl9vbkFkZEFybW9yKCkpXG4gICAgaHRtbFxuICAgICAgLmZpbmQoJy5yZW1vdmUtYXJtb3InKVxuICAgICAgLmNsaWNrKGFzeW5jIGV2ZW50ID0+IGF3YWl0IHRoaXMuX29uUmVtb3ZlQXJtb3IoZXZlbnQpKVxuICAgIGh0bWwuZmluZCgnLmV4cGFuZC1idXR0b24nKS5jbGljayh0aGlzLl9vblRvZ2dsZUV4cGFuZC5iaW5kKHRoaXMpKVxuICAgIC8vIEV2ZXJ5dGhpbmcgYmVsb3cgaGVyZSBpcyBvbmx5IG5lZWRlZCBpZiB0aGUgc2hlZXQgaXMgZWRpdGFibGVcbiAgICAvLyBpZiAoIXRoaXMub3B0aW9ucy5lZGl0YWJsZSkgcmV0dXJuO1xuICAgIC8vIGh0bWwub24oJ2Ryb3AnLCAoZXZlbnQpID0+IHRoaXMuX29uRHJvcChldmVudCkpO1xuICAgIC8vIGh0bWwuZmluZCgnLnNwZWxsIC5zcGVsbC1uYW1lIGg0JykuY2xpY2soZXZlbnQgPT4gdGhpcy5fb25TcGVsbFN1bW1hcnkoZXZlbnQpKTtcbiAgICAvLyBodG1sLmZpbmQoJy5pdGVtLWRlbGV0ZScpLmNsaWNrKHRoaXMuX29uU3BlbGxEZWxldGUuYmluZCh0aGlzKSk7XG4gIH1cblxuICBhc3luYyBfb25Ub2dnbGVFeHBhbmQgKCkge1xuICAgIGNvbnN0IGV4cGFuZGVkID0gdGhpcy5hY3Rvci5nZXRGbGFnKCdDb0M3JywgJ2V4cGFuZGVkJylcbiAgICBpZiAoZXhwYW5kZWQpIHtcbiAgICAgIHRoaXMub2xkU2l6ZSA9IHRoaXMucG9zaXRpb24uaGVpZ2h0XG4gICAgICB0aGlzLnBvc2l0aW9uLmhlaWdodCA9ICdhdXRvJyAvLyBSZXNldCB0aGUgc3RvcmVkIHBvc2l0aW9uIHRvIGZvcmNlIHRvIHJlY2FsY3VsYXRlIHdpbmRvdyBzaXplIFRPRE86IFN0b3JlIHByZXZpb3VzIHBvc2l0aW9uIHRvIHJlc3RvcmUgaXQgaW5zdGVhZCBvZiBhdXRvXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucG9zaXRpb24uaGVpZ2h0ID0gdGhpcy5vbGRTaXplIHx8IDQyMCAvLyBSZXNldCB0aGUgc3RvcmVkIHBvc2l0aW9uIHRvIGZvcmNlIHRvIHJlY2FsY3VsYXRlIHdpbmRvdyBzaXplIFRPRE86IFN0b3JlIHByZXZpb3VzIHBvc2l0aW9uIHRvIHJlc3RvcmUgaXQgaW5zdGVhZCBvZiBhdXRvXG4gICAgfVxuICAgIGF3YWl0IHRoaXMuYWN0b3Iuc2V0RmxhZygnQ29DNycsICdleHBhbmRlZCcsICFleHBhbmRlZClcbiAgfVxuXG4gIGFzeW5jIF9vbkFkZEFybW9yICgpIHtcbiAgICBjb25zdCBsb2NhdGlvbnMgPSBmb3VuZHJ5LnV0aWxzLmR1cGxpY2F0ZShcbiAgICAgIHRoaXMuYWN0b3Iuc3lzdGVtLmF0dHJpYnMuYXJtb3IubG9jYXRpb25zIHx8IFtdXG4gICAgKVxuICAgIGxvY2F0aW9ucy5wdXNoKHsgbmFtZTogbnVsbCwgdmFsdWU6IG51bGwgfSlcbiAgICBhd2FpdCB0aGlzLmFjdG9yLnVwZGF0ZSh7ICdzeXN0ZW0uYXR0cmlicy5hcm1vci5sb2NhdGlvbnMnOiBsb2NhdGlvbnMgfSlcbiAgfVxuXG4gIGFzeW5jIF9vblJlbW92ZUFybW9yIChldmVudCkge1xuICAgIGNvbnN0IGJ1dHRvbiA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICBjb25zdCBsb2NhdGlvbiA9IGJ1dHRvbi5jbG9zZXN0KCcuYXJtb3InKVxuICAgIGNvbnN0IGluZGV4ID0gbG9jYXRpb24uZGF0YXNldC5pbmRleFxuICAgIGNvbnN0IGxvY2F0aW9ucyA9IGZvdW5kcnkudXRpbHMuZHVwbGljYXRlKFxuICAgICAgdGhpcy5hY3Rvci5zeXN0ZW0uYXR0cmlicy5hcm1vci5sb2NhdGlvbnMgfHwgbnVsbFxuICAgIClcbiAgICBpZiAoIWxvY2F0aW9ucykgcmV0dXJuXG4gICAgbG9jYXRpb25zLnNwbGljZShpbmRleCwgMSlcbiAgICBhd2FpdCB0aGlzLmFjdG9yLnVwZGF0ZSh7ICdzeXN0ZW0uYXR0cmlicy5hcm1vci5sb2NhdGlvbnMnOiBsb2NhdGlvbnMgfSlcbiAgfVxuXG4gIG9uQ2xvc2VTaGVldCAoKSB7XG4gICAgc3VwZXIub25DbG9zZVNoZWV0KClcbiAgICAvLyB0aGlzLmFjdG9yLmxvY2tlZCA9IHRydWU7XG4gIH1cblxuICAvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuICAvKiAgRm9ybSBTdWJtaXNzaW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuICBfdXBkYXRlT2JqZWN0IChldmVudCwgZm9ybURhdGEpIHtcbiAgICBjb25zdCBzeXN0ZW0gPSBmb3VuZHJ5LnV0aWxzLmV4cGFuZE9iamVjdChmb3JtRGF0YSk/LnN5c3RlbVxuICAgIGlmIChzeXN0ZW0uYXR0cmlicy5hcm1vci5sb2NhdGlvbnMpIHtcbiAgICAgIGZvcm1EYXRhWydzeXN0ZW0uYXR0cmlicy5hcm1vci5sb2NhdGlvbnMnXSA9IE9iamVjdC52YWx1ZXMoXG4gICAgICAgIHN5c3RlbS5hdHRyaWJzLmFybW9yLmxvY2F0aW9ucyB8fCBbXVxuICAgICAgKVxuICAgIH1cblxuICAgIHN1cGVyLl91cGRhdGVPYmplY3QoZXZlbnQsIGZvcm1EYXRhKVxuICB9XG59XG4iLCIvKiBnbG9iYWwgZm91bmRyeSwgZ2FtZSwgSXRlbVNoZWV0LCBUZXh0RWRpdG9yICovXG5pbXBvcnQgeyBhZGRDb0NJRFNoZWV0SGVhZGVyQnV0dG9uIH0gZnJvbSAnLi4vLi4vc2NyaXB0cy9jb2MtaWQtYnV0dG9uLmpzJ1xuaW1wb3J0IHsgQ09DNyB9IGZyb20gJy4uLy4uL2NvbmZpZy5qcydcbmltcG9ydCB7IGlzQ3RybEtleSB9IGZyb20gJy4uLy4uL2NoYXQvaGVscGVyLmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy5qcydcblxuLyoqXG4gKiBFeHRlbmQgdGhlIGJhc2ljIEl0ZW1TaGVldCB3aXRoIHNvbWUgdmVyeSBzaW1wbGUgbW9kaWZpY2F0aW9uc1xuICovXG5leHBvcnQgY2xhc3MgQ29DN1dlYXBvblNoZWV0IGV4dGVuZHMgSXRlbVNoZWV0IHtcbiAgLyoqXG4gICAqXG4gICAqL1xuICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zICgpIHtcbiAgICByZXR1cm4gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgY2xhc3NlczogWydjb2M3JywgJ3NoZWV0JywgJ2l0ZW0nXSxcbiAgICAgIHdpZHRoOiA1NDUsXG4gICAgICBoZWlnaHQ6IDQ4MCxcbiAgICAgIHRhYnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hdlNlbGVjdG9yOiAnLnNoZWV0LXRhYnMnLFxuICAgICAgICAgIGNvbnRlbnRTZWxlY3RvcjogJy5zaGVldC1ib2R5JyxcbiAgICAgICAgICBpbml0aWFsOiAnc2tpbGxzJ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgZ2V0IHRlbXBsYXRlICgpIHtcbiAgICBjb25zdCBwYXRoID0gJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvaXRlbXMnXG4gICAgcmV0dXJuIGAke3BhdGh9L3dlYXBvbi1zaGVldC5odG1sYFxuICB9XG5cbiAgX2dldEhlYWRlckJ1dHRvbnMgKCkge1xuICAgIGNvbnN0IGhlYWRlckJ1dHRvbnMgPSBzdXBlci5fZ2V0SGVhZGVyQnV0dG9ucygpXG4gICAgYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbihoZWFkZXJCdXR0b25zLCB0aGlzKVxuICAgIHJldHVybiBoZWFkZXJCdXR0b25zXG4gIH1cblxuICAvKipcbiAgICogUHJlcGFyZSBkYXRhIGZvciByZW5kZXJpbmcgdGhlIEl0ZW0gc2hlZXRcbiAgICogVGhlIHByZXBhcmVkIGRhdGEgb2JqZWN0IGNvbnRhaW5zIGJvdGggdGhlIGFjdG9yIGRhdGEgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIHNoZWV0IG9wdGlvbnNcbiAgICovXG4gIGFzeW5jIGdldERhdGEgKCkge1xuICAgIGNvbnN0IHNoZWV0RGF0YSA9IHN1cGVyLmdldERhdGEoKVxuXG4gICAgc2hlZXREYXRhLmNvbWJhdFNraWxsID0gW11cblxuICAgIHNoZWV0RGF0YS5oYXNPd25lciA9IHRoaXMuaXRlbS5pc0VtYmVkZGVkID09PSB0cnVlXG4gICAgaWYgKHNoZWV0RGF0YS5oYXNPd25lcikge1xuICAgICAgc2hlZXREYXRhLmZpcmVhcm1Ta2lsbHMgPSB0aGlzLmFjdG9yLmZpcmVhcm1Ta2lsbHNcbiAgICAgIHNoZWV0RGF0YS5maWdodGluZ1NraWxscyA9IHRoaXMuYWN0b3IuZmlnaHRpbmdTa2lsbHNcbiAgICAgIHNoZWV0RGF0YS5jb21iYXRTa2lsbCA9IHRoaXMuaXRlbS5hY3Rvci5pdGVtcy5maWx0ZXIoaXRlbSA9PiB7XG4gICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdza2lsbCcpIHtcbiAgICAgICAgICBpZiAoaXRlbS5zeXN0ZW0ucHJvcGVydGllcy5jb21iYXQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfSlcblxuICAgICAgc2hlZXREYXRhLmNvbWJhdFNraWxsLnNvcnQoQ29DN1V0aWxpdGllcy5zb3J0QnlOYW1lS2V5KVxuICAgIH1cblxuICAgIHNoZWV0RGF0YS5fcHJvcGVydGllcyA9IFtdXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoQ09DNy53ZWFwb25Qcm9wZXJ0aWVzKSkge1xuICAgICAgc2hlZXREYXRhLl9wcm9wZXJ0aWVzLnB1c2goe1xuICAgICAgICBpZDoga2V5LFxuICAgICAgICBuYW1lOiB2YWx1ZSxcbiAgICAgICAgaXNFbmFibGVkOiB0aGlzLml0ZW0uc3lzdGVtLnByb3BlcnRpZXNba2V5XSA9PT0gdHJ1ZVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBzaGVldERhdGEuX2VyYXMgPSBbXVxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKENPQzcuZXJhcykpIHtcbiAgICAgIHNoZWV0RGF0YS5fZXJhcy5wdXNoKHtcbiAgICAgICAgcHJpY2U6IHRoaXMuaXRlbS5zeXN0ZW0ucHJpY2Vba2V5XSA/PyAwLFxuICAgICAgICBpZDoga2V5LFxuICAgICAgICBuYW1lOiBnYW1lLmkxOG4ubG9jYWxpemUodmFsdWUpLFxuICAgICAgICBpc0VuYWJsZWQ6ICh0aGlzLml0ZW0uZmxhZ3M/LkNvQzc/LmNvY2lkRmxhZz8uZXJhcyA/PyB7fSlba2V5XSA9PT0gdHJ1ZVxuICAgICAgfSlcbiAgICB9XG4gICAgc2hlZXREYXRhLl9lcmFzLnNvcnQoQ29DN1V0aWxpdGllcy5zb3J0QnlOYW1lS2V5KVxuXG4gICAgc2hlZXREYXRhLnVzZXNBbHRlcm5hdGVTa2lsbCA9XG4gICAgICB0aGlzLml0ZW0uc3lzdGVtLnByb3BlcnRpZXMuYXV0byA9PT0gdHJ1ZSB8fFxuICAgICAgdGhpcy5pdGVtLnN5c3RlbS5wcm9wZXJ0aWVzLmJyc3QgPT09IHRydWUgfHxcbiAgICAgIHRoaXMuaXRlbS5zeXN0ZW0ucHJvcGVydGllcy50aHJvd24gPT09IHRydWVcblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZERlc2NyaXB0aW9uVmFsdWUgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24udmFsdWUsXG4gICAgICB7XG4gICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICBzZWNyZXRzOiBzaGVldERhdGEuZWRpdGFibGVcbiAgICAgIH1cbiAgICApXG5cbiAgICBzaGVldERhdGEuZW5yaWNoZWREZXNjcmlwdGlvblNwZWNpYWwgPSBhd2FpdCBUZXh0RWRpdG9yLmVucmljaEhUTUwoXG4gICAgICBzaGVldERhdGEuZGF0YS5zeXN0ZW0uZGVzY3JpcHRpb24uc3BlY2lhbCxcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIHNoZWV0RGF0YS5lbnJpY2hlZERlc2NyaXB0aW9uS2VlcGVyID0gYXdhaXQgVGV4dEVkaXRvci5lbnJpY2hIVE1MKFxuICAgICAgc2hlZXREYXRhLmRhdGEuc3lzdGVtLmRlc2NyaXB0aW9uLmtlZXBlcixcbiAgICAgIHtcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNlY3JldHM6IHNoZWV0RGF0YS5lZGl0YWJsZVxuICAgICAgfVxuICAgIClcblxuICAgIHNoZWV0RGF0YS5pc0tlZXBlciA9IGdhbWUudXNlci5pc0dNXG4gICAgcmV0dXJuIHNoZWV0RGF0YVxuICB9XG5cbiAgLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuICAvKipcbiAgICogQWN0aXZhdGUgZXZlbnQgbGlzdGVuZXJzIHVzaW5nIHRoZSBwcmVwYXJlZCBzaGVldCBIVE1MXG4gICAqIEBwYXJhbSBodG1sIHtIVE1MfSAgIFRoZSBwcmVwYXJlZCBIVE1MIG9iamVjdCByZWFkeSB0byBiZSByZW5kZXJlZCBpbnRvIHRoZSBET01cbiAgICovXG4gIGFjdGl2YXRlTGlzdGVuZXJzIChodG1sKSB7XG4gICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbClcblxuICAgIC8vIEV2ZXJ5dGhpbmcgYmVsb3cgaGVyZSBpcyBvbmx5IG5lZWRlZCBpZiB0aGUgc2hlZXQgaXMgZWRpdGFibGVcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5lZGl0YWJsZSkgcmV0dXJuXG4gICAgaHRtbC5maW5kKCcudG9nZ2xlLXN3aXRjaCcpLmNsaWNrKHRoaXMuX29uQ2xpY2tUb2dnbGUuYmluZCh0aGlzKSlcbiAgICBodG1sLmZpbmQoJy53ZWFwb24tcHJvcGVydHknKS5jbGljayh0aGlzLl9vblByb3BlcnR5Q2xpY2suYmluZCh0aGlzKSlcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGV2ZW50XG4gICAqL1xuICBhc3luYyBfb25DbGlja1RvZ2dsZSAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgY29uc3QgcHJvcGVydHlJZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLnRvZ2dsZS1zd2l0Y2gnKS5kYXRhc2V0LnByb3BlcnR5XG4gICAgYXdhaXQgdGhpcy5pdGVtLnRvZ2dsZVByb3BlcnR5KFxuICAgICAgcHJvcGVydHlJZCxcbiAgICAgIGlzQ3RybEtleShldmVudClcbiAgICApXG4gIH1cblxuICBhc3luYyBfb25Qcm9wZXJ0eUNsaWNrIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBwcm9wZXJ0eUlkID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcud2VhcG9uLXByb3BlcnR5JykuZGF0YXNldC5wcm9wZXJ0eVxuICAgIGF3YWl0IHRoaXMuaXRlbS50b2dnbGVQcm9wZXJ0eShwcm9wZXJ0eUlkKVxuICB9XG59XG4iLCIvKiBnbG9iYWwgJCwgZ2FtZSwgSG9va3MsIHVpICovXG5pbXBvcnQgeyBDT0M3IH0gZnJvbSAnLi4vY29uZmlnLmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4uL3V0aWxpdGllcy5qcydcblxuYXN5bmMgZnVuY3Rpb24gcGVyZm9ybUZpbHRlciAoYXBwKSB7XG4gIGNvbnN0IGFwcEh0bWwgPSAkKCdkaXYuYXBwW2RhdGEtYXBwaWQ9JyArIGFwcC5hcHBJZCArICddJylcbiAgY29uc3QgdHlwZSA9IGFwcEh0bWwuZmluZCgnc2VsZWN0W25hbWU9Y29jN3R5cGUnICsgYXBwLmFwcElkICsgJ10nKS52YWwoKVxuICBjb25zdCBuYW1lID0gYXBwSHRtbC5maW5kKCdpbnB1dFtuYW1lPXNlYXJjaF0nKS52YWwoKVxuICBjb25zdCBlcmFFbGVtZW50ID0gYXBwSHRtbC5maW5kKCdzZWxlY3RbbmFtZT1jb2M3ZXJhJyArIGFwcC5hcHBJZCArICddJylcbiAgbGV0IHNldEVyYSA9IGZhbHNlXG4gIGxldCBzZXRUeXBlID0gZmFsc2VcbiAgbGV0IGVyYSA9ICcnXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ29jY3VwYXRpb24nOlxuICAgIGNhc2UgJ3NldHVwJzpcbiAgICBjYXNlICdza2lsbCc6XG4gICAgY2FzZSAnd2VhcG9uJzpcbiAgICAgIGVyYUVsZW1lbnQuY2xvc2VzdCgnZGl2LmVyYV9zZWxlY3QnKS5zaG93KClcbiAgICAgIGVyYSA9IGVyYUVsZW1lbnQudmFsKClcbiAgICAgIHNldFR5cGUgPSB0cnVlXG4gICAgICBzZXRFcmEgPSB0cnVlXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBlcmFFbGVtZW50LmNsb3Nlc3QoJ2Rpdi5lcmFfc2VsZWN0JykuaGlkZSgpXG4gICAgICBzZXRUeXBlID0gdHJ1ZVxuICB9XG4gIGFwcC5vcHRpb25zLmZpbHRlckNvQzcgPSB7XG4gICAgdHlwZTogKHNldFR5cGUgPyB0eXBlIDogbnVsbCksXG4gICAgZXJhOiAoc2V0RXJhID8gZXJhIDogbnVsbClcbiAgfVxuICBjb25zdCBpdGVtcyA9IGF3YWl0IGdhbWUucGFja3MuZ2V0KGFwcEh0bWwuZGF0YSgncGFja0lkJykpPy5nZXREb2N1bWVudHMoKVxuICBpZiAodHlwZW9mIGl0ZW1zID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVyblxuICB9XG4gIGNvbnN0IHNob3cgPSBbXVxuICBjb25zdCBuYW1lRmlsdGVyID0gbmV3IFJlZ0V4cChSZWdFeHAuZXNjYXBlKG5hbWUpLCAnaScpXG4gIGZvciAoY29uc3QgWywgaXRlbV0gb2YgT2JqZWN0LmVudHJpZXMoaXRlbXMpKSB7XG4gICAgbGV0IGZpbHRlciA9IHRydWVcbiAgICBpZiAoZmlsdGVyICYmIG5hbWUgIT09ICcnKSB7XG4gICAgICBmaWx0ZXIgPSBpdGVtLm5hbWUubWF0Y2gobmFtZUZpbHRlcilcbiAgICB9XG4gICAgaWYgKGZpbHRlciAmJiB0eXBlICE9PSAnJykge1xuICAgICAgZmlsdGVyID0gaXRlbS50eXBlID09PSB0eXBlXG4gICAgfVxuICAgIGlmIChmaWx0ZXIgJiYgZXJhICE9PSAnJykge1xuICAgICAgY29uc3QgZXJhcyA9IGl0ZW0uZmxhZ3M/LkNvQzc/LmNvY2lkRmxhZz8uZXJhc1xuICAgICAgaWYgKGVyYXMgJiYgT2JqZWN0LmtleXMoZXJhcykubGVuZ3RoID4gMCAmJiAhKGVyYXNbZXJhXSA/PyBmYWxzZSkpIHtcbiAgICAgICAgZmlsdGVyID0gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZpbHRlcikge1xuICAgICAgc2hvdy5wdXNoKGl0ZW0uaWQpXG4gICAgfVxuICB9XG4gIGFwcEh0bWwuZmluZCgnb2wuZGlyZWN0b3J5LWxpc3QgbGknKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnN0eWxlLmRpc3BsYXkgPSBzaG93LmluY2x1ZGVzKHRoaXMuZGF0YXNldC5kb2N1bWVudElkKVxuICAgICAgPyAnZmxleCdcbiAgICAgIDogJ25vbmUnXG4gIH0pXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHRyaWdnZXJGaWx0ZXJFdmVudCAoZSkge1xuICBsZXQgYXBwSWQgPSBlLmN1cnJlbnRUYXJnZXQubmFtZS5yZXBsYWNlKC9eY29jN1teMC05XSsoXFxkKykkLywgJyQxJylcbiAgaWYgKGFwcElkID09PSAnc2VhcmNoJykge1xuICAgIGFwcElkID0gJChlLmN1cnJlbnRUYXJnZXQpLmNsb3Nlc3QoJ2Rpdi5hcHAnKS5kYXRhKCdhcHBpZCcpXG4gIH1cbiAgaWYgKHVpLndpbmRvd3NbYXBwSWRdID8/IGZhbHNlKSB7XG4gICAgcGVyZm9ybUZpbHRlcih1aS53aW5kb3dzW2FwcElkXSlcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcGVuZGl1bUZpbHRlciAoKSB7XG4gIEhvb2tzLm9uKCdyZW5kZXJDb21wZW5kaXVtJywgYXN5bmMgKGFwcCwgaHRtbCwgZGF0YSkgPT4ge1xuICAgIGlmIChhcHAuY29sbGVjdGlvbi5kb2N1bWVudE5hbWUgPT09ICdJdGVtJykge1xuICAgICAgY29uc3QgaW5wdXQgPSAkKCdpbnB1dFtuYW1lPXNlYXJjaF0nLCBodG1sKVxuICAgICAgaW5wdXQuYWZ0ZXIoaW5wdXQuY2xvbmUoKSlcbiAgICAgIGlucHV0LnJlbW92ZSgpXG4gICAgICBhd2FpdCBhcHAuY29sbGVjdGlvbi5nZXRJbmRleCgpXG4gICAgICBjb25zdCB0eXBlcyA9IFsuLi5uZXcgU2V0KGRhdGEuaW5kZXguZmlsdGVyKGkgPT4gaS5uYW1lICE9PSAnI1tDRl90ZW1wRW50aXR5XScpLm1hcChpdGVtID0+IGl0ZW0udHlwZSkpXVxuICAgICAgY29uc3Qgc2VsZWN0ID0gW11cbiAgICAgIGNvbnN0IHNlbGVjdGVkVHlwZSA9IChhcHAub3B0aW9ucy5maWx0ZXJDb0M3Py50eXBlID8/ICcnKVxuICAgICAgY29uc3Qgc2VsZWN0ZWRFcmEgPSAoYXBwLm9wdGlvbnMuZmlsdGVyQ29DNz8uZXJhID8/ICcnKVxuICAgICAgc2VsZWN0LnB1c2goXG4gICAgICAgICc8b3B0aW9uIHZhbHVlPVwiXCI+JyArIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5BbGwnKSArICc8L29wdGlvbj4nXG4gICAgICApXG4gICAgICBjb25zdCBncm91cFR5cGVzID0gW1xuICAgICAgICB7XG4gICAgICAgICAga2V5OiAnYXJjaGV0eXBlJyxcbiAgICAgICAgICBuYW1lOiAnQ29DNy5FbnRpdGllcy5BcmNoZXR5cGUnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6ICdib29rJyxcbiAgICAgICAgICBuYW1lOiAnQ29DNy5FbnRpdGllcy5Cb29rJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAga2V5OiAnaXRlbScsXG4gICAgICAgICAgbmFtZTogJ0NvQzcuRW50aXRpZXMuSXRlbSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGtleTogJ29jY3VwYXRpb24nLFxuICAgICAgICAgIG5hbWU6ICdDb0M3LkVudGl0aWVzLk9jY3VwYXRpb24nXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6ICdzZXR1cCcsXG4gICAgICAgICAgbmFtZTogJ0NvQzcuRW50aXRpZXMuU2V0dXAnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6ICdza2lsbCcsXG4gICAgICAgICAgbmFtZTogJ0NvQzcuRW50aXRpZXMuU2tpbGwnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6ICdzcGVsbCcsXG4gICAgICAgICAgbmFtZTogJ0NvQzcuRW50aXRpZXMuU3BlbGwnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6ICdzdGF0dXMnLFxuICAgICAgICAgIG5hbWU6ICdDb0M3LkVudGl0aWVzLlN0YXR1cydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGtleTogJ3RhbGVudCcsXG4gICAgICAgICAgbmFtZTogJ0NvQzcuRW50aXRpZXMuVGFsZW50J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAga2V5OiAnd2VhcG9uJyxcbiAgICAgICAgICBuYW1lOiAnQ29DNy5FbnRpdGllcy5XZWFwb24nXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICAgIGZvciAoY29uc3QgZ3JvdXBUeXBlIG9mIGdyb3VwVHlwZXMpIHtcbiAgICAgICAgaWYgKHR5cGVzLmluY2x1ZGVzKGdyb3VwVHlwZS5rZXkpKSB7XG4gICAgICAgICAgc2VsZWN0LnB1c2goXG4gICAgICAgICAgICAnPG9wdGlvbiB2YWx1ZT1cIicgKyBncm91cFR5cGUua2V5ICsgJ1wiJyArIChzZWxlY3RlZFR5cGUgPT09IGdyb3VwVHlwZS5rZXkgPyAnIHNlbGVjdGVkPVwic2VsZWN0ZWRcIicgOiAnJykgKyAnPicgK1xuICAgICAgICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoZ3JvdXBUeXBlLm5hbWUpICtcbiAgICAgICAgICAgICAgJzwvb3B0aW9uPidcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IGVyYXMgPSBbXVxuICAgICAgZXJhcy5wdXNoKFxuICAgICAgICAnPG9wdGlvbiB2YWx1ZT1cIlwiPicgKyBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQWxsJykgKyAnPC9vcHRpb24+J1xuICAgICAgKVxuICAgICAgZm9yIChjb25zdCBlcmEgb2YgT2JqZWN0LmVudHJpZXMoQ09DNy5lcmFzKS5tYXAoZSA9PiB7IHJldHVybiB7IGlkOiBlWzBdLCBuYW1lOiBnYW1lLmkxOG4ubG9jYWxpemUoZVsxXSkgfSB9KS5zb3J0KENvQzdVdGlsaXRpZXMuc29ydEJ5TmFtZUtleSkpIHtcbiAgICAgICAgZXJhcy5wdXNoKFxuICAgICAgICAgICc8b3B0aW9uIHZhbHVlPVwiJyArXG4gICAgICAgICAgICBlcmEuaWQgK1xuICAgICAgICAgICAgJ1wiJyArIChzZWxlY3RlZEVyYSA9PT0gZXJhLmlkID8gJyBzZWxlY3RlZD1cInNlbGVjdGVkXCInIDogJycpICsgJz4nICtcbiAgICAgICAgICAgIGVyYS5uYW1lICtcbiAgICAgICAgICAgICc8L29wdGlvbj4nXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIGh0bWwuZGF0YSgncGFja0lkJywgYXBwLm1ldGFkYXRhLmlkKVxuICAgICAgbGV0IHVuY29tbW9uID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlNraWxsUmFyaXR5U2hvcnQnKVxuICAgICAgaWYgKHVuY29tbW9uID09PSAnQ29DNy5Ta2lsbFJhcml0eVNob3J0Jykge1xuICAgICAgICB1bmNvbW1vbiA9ICc/PydcbiAgICAgIH1cbiAgICAgIGh0bWwuZmluZCgnbGkuZGlyZWN0b3J5LWl0ZW0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3Qgcm93ID0gJCh0aGlzKVxuICAgICAgICBsZXQgaXRlbSA9IFtdXG4gICAgICAgIGlmICh0eXBlb2YgZGF0YS5pbmRleCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAvLyBERVBSRUNJQVRFRCBJTiB2MTFcbiAgICAgICAgICBpdGVtID0gZGF0YS5pbmRleC5maW5kKGkgPT4gaS5faWQgPT09IHJvdy5kYXRhKCdkb2N1bWVudC1pZCcpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW0gPSBhcHAuY29sbGVjdGlvbi5pbmRleC5nZXQocm93LmRhdGEoJ2RvY3VtZW50LWlkJykpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW0gJiYgaXRlbS50eXBlID09PSAnc2tpbGwnKSB7XG4gICAgICAgICAgcm93LmZpbmQoJ2EnKS5odG1sKGl0ZW0ubmFtZSArICcgKCcgKyAoaXRlbS5zeXN0ZW0/LmJhc2UgPz8gJz8nKSArICclJyArICgoaXRlbS5zeXN0ZW0/LnByb3BlcnRpZXM/LnJhcml0eSA/PyBmYWxzZSkgPyAnICcgKyB1bmNvbW1vbiA6ICcnKSArICcpJylcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIGh0bWxcbiAgICAgICAgLmZpbmQoJ2hlYWRlci5kaXJlY3RvcnktaGVhZGVyJylcbiAgICAgICAgLmFmdGVyKFxuICAgICAgICAgICc8ZGl2IGNsYXNzPVwiY29tcGVuZGl1bWZpbHRlclwiPicgK1xuICAgICAgICAgICc8ZGl2IGNsYXNzPVwiaGVhZGVyLXNlYXJjaCBmbGV4cm93XCI+PGkgY2xhc3M9XCJmYXMgZmEtbGF5ZXItZ3JvdXBcIj48L2k+PHNlbGVjdCBuYW1lPVwiY29jN3R5cGUnICsgYXBwLmFwcElkICsgJ1wiIHN0eWxlPVwiXCI+JyArIHNlbGVjdC5qb2luKCcnKSArICc8L3NlbGVjdD48L2Rpdj4nICtcbiAgICAgICAgICAnPGRpdiBjbGFzcz1cImhlYWRlci1zZWFyY2ggZmxleHJvdyBlcmFfc2VsZWN0XCIgc3R5bGU9XCJkaXNwbGF5Om5vbmVcIj48aSBjbGFzcz1cImZhcyBmYS1sYXllci1ncm91cFwiPjwvaT48c2VsZWN0IG5hbWU9XCJjb2M3ZXJhJyArIGFwcC5hcHBJZCArICdcIiBzdHlsZT1cIlwiPicgKyBlcmFzLmpvaW4oJycpICsgJzwvc2VsZWN0PjwvZGl2PicgK1xuICAgICAgICAgICc8L2Rpdj4nXG4gICAgICAgIClcbiAgICAgIGh0bWwuZmluZCgnc2VsZWN0JykuY2hhbmdlKHRyaWdnZXJGaWx0ZXJFdmVudC5iaW5kKHRoaXMpKVxuICAgICAgaHRtbC5maW5kKCdpbnB1dCcpLmtleXVwKHRyaWdnZXJGaWx0ZXJFdmVudC5iaW5kKHRoaXMpKVxuICAgICAgaWYgKHNlbGVjdGVkVHlwZSAhPT0gJycpIHtcbiAgICAgICAgcGVyZm9ybUZpbHRlcihhcHApXG4gICAgICB9XG4gICAgfVxuICB9KVxufVxuIiwiLyogZ2xvYmFsIEFjdG9yLCBDYXJkLCBDT05GSUcsIGZvdW5kcnksIGdhbWUsIEl0ZW0sIEpvdXJuYWxFbnRyeSwgTWFjcm8sIFBsYXlsaXN0LCBSb2xsVGFibGUsIFNjZW5lLCBTY2VuZU5hdmlnYXRpb24sIHVpICovXG5pbXBvcnQgeyBDT0M3IH0gZnJvbSAnLi4vY29uZmlnLmpzJ1xuaW1wb3J0IHsgQ29DN1V0aWxpdGllcyB9IGZyb20gJy4uL3V0aWxpdGllcy5qcydcblxuZXhwb3J0IGNsYXNzIENvQ0lEIHtcbiAgc3RhdGljIGluaXQgKCkge1xuICAgIENPTkZJRy5BY3Rvci5jb21wZW5kaXVtSW5kZXhGaWVsZHMucHVzaCgnZmxhZ3MuQ29DNy5jb2NpZEZsYWcnKVxuICAgIC8vIENPTkZJRy5DYXJkcy5jb21wZW5kaXVtSW5kZXhGaWVsZHMucHVzaCgnZmxhZ3MuQ29DNy5jb2NpZEZsYWcnKVxuICAgIENPTkZJRy5JdGVtLmNvbXBlbmRpdW1JbmRleEZpZWxkcy5wdXNoKCdmbGFncy5Db0M3LmNvY2lkRmxhZycpXG4gICAgQ09ORklHLkl0ZW0uY29tcGVuZGl1bUluZGV4RmllbGRzLnB1c2goJ3N5c3RlbS5iYXNlJylcbiAgICBDT05GSUcuSXRlbS5jb21wZW5kaXVtSW5kZXhGaWVsZHMucHVzaCgnc3lzdGVtLnByb3BlcnRpZXMnKVxuICAgIENPTkZJRy5Kb3VybmFsRW50cnkuY29tcGVuZGl1bUluZGV4RmllbGRzLnB1c2goJ2ZsYWdzLkNvQzcuY29jaWRGbGFnJylcbiAgICBDT05GSUcuTWFjcm8uY29tcGVuZGl1bUluZGV4RmllbGRzLnB1c2goJ2ZsYWdzLkNvQzcuY29jaWRGbGFnJylcbiAgICBDT05GSUcuUGxheWxpc3QuY29tcGVuZGl1bUluZGV4RmllbGRzLnB1c2goJ2ZsYWdzLkNvQzcuY29jaWRGbGFnJylcbiAgICBDT05GSUcuUm9sbFRhYmxlLmNvbXBlbmRpdW1JbmRleEZpZWxkcy5wdXNoKCdmbGFncy5Db0M3LmNvY2lkRmxhZycpXG4gICAgQ09ORklHLlNjZW5lLmNvbXBlbmRpdW1JbmRleEZpZWxkcy5wdXNoKCdmbGFncy5Db0M3LmNvY2lkRmxhZycpXG4gICAgZ2FtZS5zeXN0ZW0uYXBpID0ge1xuICAgICAgY29jaWQ6IENvQ0lEXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgUmVnRXhwIGZvciB2YWxpZCB0eXBlIGFuZCBmb3JtYXRcbiAgICogQHJldHVybnMgUmVnRXhwXG4gICAqL1xuICBzdGF0aWMgcmVnRXhLZXkgKCkge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKCdeKCcgKyBPYmplY3Qua2V5cyhDb0NJRC5nYW1lUHJvcGVydHlMb29rdXApLmpvaW4oJ3wnKSArICcpXFxcXC4oLio/KVxcXFwuKC4rKSQnKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBDb0NJRCB0eXBlLnN1YnR5cGUuIGJhc2VkIG9uIGRvY3VtZW50XG4gICAqIEBwYXJhbSBkb2N1bWVudFxuICAgKiBAcmV0dXJucyBzdHJpbmdcbiAgICovXG4gIHN0YXRpYyBnZXRQcmVmaXggKGRvY3VtZW50KSB7XG4gICAgZm9yIChjb25zdCB0eXBlIGluIENvQ0lELmRvY3VtZW50TmFtZUxvb2t1cCkge1xuICAgICAgaWYgKGRvY3VtZW50IGluc3RhbmNlb2YgQ29DSUQuZG9jdW1lbnROYW1lTG9va3VwW3R5cGVdKSB7XG4gICAgICAgIHJldHVybiB0eXBlICsgJy4nICsgKGRvY3VtZW50LnR5cGUgPz8gJycpICsgJy4nXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBDb0NJRCB0eXBlLnN1YnR5cGUubmFtZSBiYXNlZCBvbiBkb2N1bWVudFxuICAgKiBAcGFyYW0gZG9jdW1lbnRcbiAgICogQHJldHVybnMgc3RyaW5nXG4gICAqL1xuICBzdGF0aWMgZ3Vlc3NJZCAoZG9jdW1lbnQpIHtcbiAgICByZXR1cm4gQ29DSUQuZ2V0UHJlZml4KGRvY3VtZW50KSArIENvQzdVdGlsaXRpZXMudG9LZWJhYkNhc2UoZG9jdW1lbnQubmFtZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgQ29DSUQgdHlwZS5zdWJ0eXBlLnBhcnRpYWwtbmFtZSgtcmVtb3ZlZClcbiAgICogQHBhcmFtIGtleVxuICAgKiBAcmV0dXJucyBzdHJpbmdcbiAgICovXG4gIHN0YXRpYyBndWVzc0dyb3VwRnJvbUtleSAoaWQpIHtcbiAgICBpZiAoaWQpIHtcbiAgICAgIGNvbnN0IGtleSA9IGlkLnJlcGxhY2UoLyhbXlxcXFwuLV0rKSQvLCAnJylcbiAgICAgIGlmIChrZXkuc3Vic3RyKC0xKSA9PT0gJy0nKSB7XG4gICAgICAgIHJldHVybiBrZXlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvKipcbiAgICogR2V0IENvQ0lEIHR5cGUuc3VidHlwZS5wYXJ0aWFsLW5hbWUoLXJlbW92ZWQpXG4gICAqIEBwYXJhbSBkb2N1bWVudFxuICAgKiBAcmV0dXJucyBzdHJpbmdcbiAgICovXG4gIHN0YXRpYyBndWVzc0dyb3VwRnJvbURvY3VtZW50IChkb2N1bWVudCkge1xuICAgIHJldHVybiBDb0NJRC5ndWVzc0dyb3VwRnJvbUtleShkb2N1bWVudC5mbGFncz8uQ29DNz8uY29jaWRGbGFnPy5pZClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRyYW5zbGF0aW9uIG9mIGVyYSBrZXlcbiAgICogQHBhcmFtIGVyYSB0aGUgZXJhcyB0byBtYXRjaCBhZ2FpbnN0ICgnc3RhbmRhcmQnLCAnbW9kZXJuUHVscCcsIC4uLiksIHRydWUgPSB3b3JsZCBkZWZhdWx0LCBmYWxzZSA9IG5vIGZpbHRlclxuICAgKiBAcmV0dXJucyBzdHJpbmdcbiAgICovXG4gIHN0YXRpYyBlcmFUZXh0IChlcmEpIHtcbiAgICBpZiAoZXJhID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5BbnknKVxuICAgIH0gZWxzZSBpZiAoZXJhID09PSB0cnVlKSB7XG4gICAgICBlcmEgPSBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICd3b3JsZEVyYScpXG4gICAgfVxuXG4gICAgcmV0dXJuIGdhbWUuaTE4bi5mb3JtYXQoQ09DNy5lcmFzW2VyYV0gPz8gJ0NvQzcuQ29DSURGbGFnLmVycm9yLnVua25vd24tZXJhJywgeyBlcmEgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFsbCBpdGVtcyB3aXRoIG1hdGNoaW5nIENvQ0lEcywgbGFuZ3VhZ2UsIGFuZCBlcmFzXG4gICAqIHVpLm5vdGlmaWNhdGlvbnMud2FybiBmb3IgbWlzc2luZyBrZXlzXG4gICAqIEBwYXJhbSBpdGVtTGlzdCBhcnJheSBvZiBDb0NJRHNcbiAgICogQHBhcmFtIGxhbmcgdGhlIGxhbmd1YWdlIHRvIG1hdGNoIGFnYWluc3QgKCdlbicsICdlcycsIC4uLilcbiAgICogQHBhcmFtIGVyYSB0aGUgZXJhcyB0byBtYXRjaCBhZ2FpbnN0ICgnc3RhbmRhcmQnLCAnbW9kZXJuUHVscCcsIC4uLiksIHRydWUgPSB3b3JsZCBkZWZhdWx0LCBmYWxzZSA9IG5vIGZpbHRlclxuICAgKiBAcGFyYW0gbGFuZ0ZhbGxiYWNrIHNob3VsZCB0aGUgc3lzdGVtIGZhbGwgYmFjayB0byBlbiBpbmNhc2UgdGhlcmUgaXMgbm8gdHJhbnNsYXRpb25cbiAgICogQHBhcmFtIHNob3dMb2FkaW5nIFNob3cgbG9hZGluZyBiYXJcbiAgICogQHJldHVybnMgYXJyYXlcbiAgICovXG4gIHN0YXRpYyBhc3luYyBleHBhbmRJdGVtQXJyYXkgKHsgaXRlbUxpc3QsIGxhbmcgPSBnYW1lLmkxOG4ubGFuZywgZXJhID0gdHJ1ZSwgbGFuZ0ZhbGxiYWNrID0gdHJ1ZSwgc2hvd0xvYWRpbmcgPSBmYWxzZSB9ID0ge30pIHtcbiAgICBsZXQgaXRlbXMgPSBbXVxuICAgIGNvbnN0IGNvY2lkcyA9IGl0ZW1MaXN0LmZpbHRlcihpdCA9PiB0eXBlb2YgaXQgPT09ICdzdHJpbmcnKVxuICAgIGl0ZW1zID0gaXRlbUxpc3QuZmlsdGVyKGl0ID0+IHR5cGVvZiBpdCAhPT0gJ3N0cmluZycpXG5cbiAgICBpZiAoY29jaWRzLmxlbmd0aCkge1xuICAgICAgY29uc3QgZm91bmQgPSBhd2FpdCBDb0NJRC5mcm9tQ29DSURSZWdleEJlc3QoeyBjb2NpZFJlZ0V4cDogQ29DSUQubWFrZUdyb3VwUmVnRXgoY29jaWRzKSwgdHlwZTogJ2knLCBsYW5nLCBlcmEsIGxhbmdGYWxsYmFjaywgc2hvd0xvYWRpbmcgfSlcbiAgICAgIGNvbnN0IGFsbCA9IFtdXG4gICAgICBmb3IgKGNvbnN0IGNvY2lkIG9mIGNvY2lkcykge1xuICAgICAgICBjb25zdCBpdGVtID0gZm91bmQuZmluZChpID0+IGkuZmxhZ3MuQ29DNy5jb2NpZEZsYWcuaWQgPT09IGNvY2lkKVxuICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgIGFsbC5wdXNoKGl0ZW0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChhbGwubGVuZ3RoIDwgY29jaWRzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBub3RtaXNzaW5nID0gW11cbiAgICAgICAgZm9yIChjb25zdCBkb2Mgb2YgYWxsKSB7XG4gICAgICAgICAgbm90bWlzc2luZy5wdXNoKGRvYy5mbGFncy5Db0M3LmNvY2lkRmxhZy5pZClcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJhID09PSB0cnVlKSB7XG4gICAgICAgICAgZXJhID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnd29ybGRFcmEnKVxuICAgICAgICB9XG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkNvQ0lERmxhZy5lcnJvci5kb2N1bWVudHMtbm90LWZvdW5kJywgeyBjb2NpZHM6IGNvY2lkcy5maWx0ZXIoeCA9PiAhbm90bWlzc2luZy5pbmNsdWRlcyh4KSkuam9pbignLCAnKSwgbGFuZywgZXJhOiBDb0NJRC5lcmFUZXh0KGVyYSkgfSkpXG4gICAgICB9XG4gICAgICBpdGVtcyA9IGl0ZW1zLmNvbmNhdChhbGwpXG4gICAgfVxuICAgIHJldHVybiBpdGVtc1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgaXRlbSB3aXRoIG1hdGNoaW5nIENvQ0lEcyBmcm9tIGxpc3RcbiAgICogRW1wdHkgYXJyYXkgcmV0dXJuIGZvciBtaXNzaW5nIGtleXNcbiAgICogQHBhcmFtIGNvY2lkIGEgc2luZ2xlIGNvY2lkXG4gICAqIEBwYXJhbSBsaXN0IGFycmF5IG9mIGl0ZW1zXG4gICAqIEByZXR1cm5zIGFycmF5XG4gICAqL1xuICBzdGF0aWMgZmluZENvY0lkSW5MaXN0IChjb2NpZCwgbGlzdCkge1xuICAgIGxldCBpdGVtTmFtZSA9ICcnXG4gICAgY29uc3QgQ29DSURLZXlzID0gZm91bmRyeS51dGlscy5mbGF0dGVuT2JqZWN0KGdhbWUuaTE4bi50cmFuc2xhdGlvbnMuQ29DNy5Db0NJREZsYWcua2V5cylcbiAgICBpZiAodHlwZW9mIENvQ0lES2V5c1tjb2NpZF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpdGVtTmFtZSA9IENvQ0lES2V5c1tjb2NpZF1cbiAgICB9XG4gICAgcmV0dXJuICh0eXBlb2YgbGlzdC5maWx0ZXIgPT09ICd1bmRlZmluZWQnID8gT2JqZWN0LnZhbHVlcyhsaXN0KSA6IGxpc3QpLmZpbHRlcihpID0+IGkuZmxhZ3M/LkNvQzc/LmNvY2lkRmxhZz8uaWQgPT09IGNvY2lkIHx8IChpdGVtTmFtZSAhPT0gJycgJiYgaXRlbU5hbWUgPT09IGkubmFtZSkpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBSZWdFeHAgbWF0Y2hpbmcgYWxsIHN0cmluZ3MgaW4gYXJyYXlcbiAgICogQHBhcmFtIGNvY2lkcyBhbiBhcnJheSBvZiBDb0NJRCBzdHJpbmdzXG4gICAqIEBwYXJhbSBsaXN0IGFycmF5IG9mIGl0ZW1zXG4gICAqIEByZXR1cm5zIFJlZ0V4cFxuICAgKi9cbiAgc3RhdGljIG1ha2VHcm91cFJlZ0V4IChjb2NpZHMpIHtcbiAgICBpZiAodHlwZW9mIGNvY2lkcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvY2lkcyA9IFtjb2NpZHNdXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29jaWRzID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgY29jaWRzLmZpbHRlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cbiAgICBjb25zdCBzcGxpdHMgPSB7fVxuICAgIGNvbnN0IHJneCA9IENvQ0lELnJlZ0V4S2V5KClcbiAgICBmb3IgKGNvbnN0IGkgb2YgY29jaWRzKSB7XG4gICAgICBjb25zdCBrZXkgPSBpLm1hdGNoKHJneClcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzcGxpdHNba2V5WzFdXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBzcGxpdHNba2V5WzFdXSA9IHt9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBzcGxpdHNba2V5WzFdXVtrZXlbMl1dID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHNwbGl0c1trZXlbMV1dW2tleVsyXV0gPSBbXVxuICAgICAgICB9XG4gICAgICAgIHNwbGl0c1trZXlbMV1dW2tleVsyXV0ucHVzaChrZXlbM10pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTbGllbnRseSBlcnJvclxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCByZWdFeFBhcnRzID0gW11cbiAgICBmb3IgKGNvbnN0IHQgaW4gc3BsaXRzKSB7XG4gICAgICBjb25zdCByb3cgPSBbXVxuICAgICAgZm9yIChjb25zdCBzIGluIHNwbGl0c1t0XSkge1xuICAgICAgICBpZiAoc3BsaXRzW3RdW3NdLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICByb3cucHVzaChzICsgJ1xcXFwuJyArICcoJyArIHNwbGl0c1t0XVtzXS5qb2luKCd8JykgKyAnKScpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm93LnB1c2gocyArICdcXFxcLicgKyBzcGxpdHNbdF1bc10uam9pbignJykpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChyb3cubGVuZ3RoID4gMSkge1xuICAgICAgICByZWdFeFBhcnRzLnB1c2godCArICdcXFxcLicgKyAnKCcgKyByb3cuam9pbignfCcpICsgJyknKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVnRXhQYXJ0cy5wdXNoKHQgKyAnXFxcXC4nICsgcm93LmpvaW4oJycpKVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVnRXhQYXJ0cy5sZW5ndGggPiAxKSB7XG4gICAgICByZXR1cm4gbmV3IFJlZ0V4cCgnXignICsgcmVnRXhQYXJ0cy5qb2luKCd8JykgKyAnKSQnKVxuICAgIH1cbiAgICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyByZWdFeFBhcnRzLmpvaW4oJycpICsgJyQnKVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYWxsIGRvY3VtZW50cyB3aXRoIGFuIENvQ0lEIG1hdGNoaW5nIHRoZSByZWdleCBhbmQgbWF0Y2hpbmcgdGhlIGRvY3VtZW50IHR5cGVcbiAgICogYW5kIGxhbmd1YWdlLCBmcm9tIHRoZSBzcGVjaWZpZWQgc2NvcGUuXG4gICAqIEVtcHR5IGFycmF5IHJldHVybiBmb3Igbm8gbWF0Y2hlc1xuICAgKiBAcGFyYW0gY29jaWRSZWdFeHAgcmVnZXggdXNlZCBvbiB0aGUgQ29DSURcbiAgICogQHBhcmFtIHR5cGUgdGhlIGZpcnN0IHBhcnQgb2YgdGhlIHdhbnRlZCBDb0NJRCwgZm9yIGV4YW1wbGUgJ2knLCAnYScsICdqZSdcbiAgICogQHBhcmFtIGVyYSB0aGUgZXJhcyB0byBtYXRjaCBhZ2FpbnN0ICgnc3RhbmRhcmQnLCAnbW9kZXJuUHVscCcsIC4uLiksIHRydWUgPSB3b3JsZCBkZWZhdWx0LCBmYWxzZSA9IG5vIGZpbHRlclxuICAgKiBAcGFyYW0gbGFuZyB0aGUgbGFuZ3VhZ2UgdG8gbWF0Y2ggYWdhaW5zdCAoJ2VuJywgJ2VzJywgLi4uKVxuICAgKiBAcGFyYW0gc2NvcGUgZGVmaW5lcyB3aGVyZSBpdCB3aWxsIGxvb2s6XG4gICAqICoqbWF0Y2gqKiBzYW1lIGxvZ2ljIGFzIGZyb21Db0NJRCBmdW5jdGlvbixcbiAgICogKiphbGwqKjogZmluZCBpbiBib3RoIHdvcmxkICYgY29tcGVuZGlhLFxuICAgKiAqKndvcmxkKio6IG9ubHkgc2VhcmNoIGluIHdvcmxkLFxuICAgKiAqKmNvbXBlbmRpdW1zKio6IG9ubHkgc2VhcmNoIGluIGNvbXBlbmRpdW1zXG4gICAqIEBwYXJhbSBsYW5nRmFsbGJhY2sgc2hvdWxkIHRoZSBzeXN0ZW0gZmFsbCBiYWNrIHRvIGVuIGluY2FzZSB0aGVyZSBpcyBubyB0cmFuc2xhdGlvblxuICAgKiBAcGFyYW0gc2hvd0xvYWRpbmcgU2hvdyBsb2FkaW5nIGJhclxuICAgKiBAcmV0dXJucyBhcnJheVxuICAgKi9cbiAgc3RhdGljIGFzeW5jIGZyb21Db0NJRFJlZ2V4QWxsICh7IGNvY2lkUmVnRXhwLCB0eXBlLCBsYW5nID0gZ2FtZS5pMThuLmxhbmcsIGVyYSA9IGZhbHNlLCBzY29wZSA9ICdtYXRjaCcsIGxhbmdGYWxsYmFjayA9IHRydWUsIHNob3dMb2FkaW5nID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgaWYgKCFjb2NpZFJlZ0V4cCkge1xuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IFtdXG5cbiAgICBsZXQgY291bnQgPSAwXG4gICAgaWYgKHNob3dMb2FkaW5nKSB7XG4gICAgICBpZiAoWydtYXRjaCcsICdhbGwnLCAnd29ybGQnXS5pbmNsdWRlcyhzY29wZSkpIHtcbiAgICAgICAgY291bnQrK1xuICAgICAgfVxuICAgICAgaWYgKFsnbWF0Y2gnLCAnYWxsJywgJ2NvbXBlbmRpdW1zJ10uaW5jbHVkZXMoc2NvcGUpKSB7XG4gICAgICAgIGNvdW50ID0gY291bnQgKyBnYW1lLnBhY2tzLnNpemVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoWydtYXRjaCcsICdhbGwnLCAnd29ybGQnXS5pbmNsdWRlcyhzY29wZSkpIHtcbiAgICAgIGNvbnN0IHdvcmxkRG9jdW1lbnRzID0gYXdhaXQgQ29DSUQuZG9jdW1lbnRzRnJvbVdvcmxkKHsgY29jaWRSZWdFeHAsIHR5cGUsIGxhbmcsIGVyYSwgbGFuZ0ZhbGxiYWNrLCBwcm9ncmVzc0JhcjogY291bnQgfSlcbiAgICAgIGlmIChzY29wZSA9PT0gJ21hdGNoJyAmJiB3b3JsZERvY3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHNob3dMb2FkaW5nKSB7XG4gICAgICAgICAgU2NlbmVOYXZpZ2F0aW9uLmRpc3BsYXlQcm9ncmVzc0Jhcih7IGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ1NFVFVQLlBhY2thZ2VzTG9hZGluZycpLCBwY3Q6IDEwMCB9KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlckFsbENvQ0lEKHdvcmxkRG9jdW1lbnRzLCBsYW5nRmFsbGJhY2sgJiYgbGFuZyAhPT0gJ2VuJylcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5zcGxpY2UoMCwgMCwgLi4ud29ybGREb2N1bWVudHMpXG4gICAgfVxuXG4gICAgaWYgKFsnbWF0Y2gnLCAnYWxsJywgJ2NvbXBlbmRpdW1zJ10uaW5jbHVkZXMoc2NvcGUpKSB7XG4gICAgICBjb25zdCBjb21wZW5kaWFEb2N1bWVudHMgPSBhd2FpdCBDb0NJRC5kb2N1bWVudHNGcm9tQ29tcGVuZGlhKHsgY29jaWRSZWdFeHAsIHR5cGUsIGxhbmcsIGVyYSwgbGFuZ0ZhbGxiYWNrLCBwcm9ncmVzc0JhcjogY291bnQgfSlcblxuICAgICAgcmVzdWx0LnNwbGljZShyZXN1bHQubGVuZ3RoLCAwLCAuLi5jb21wZW5kaWFEb2N1bWVudHMpXG4gICAgfVxuXG4gICAgaWYgKHNob3dMb2FkaW5nKSB7XG4gICAgICBTY2VuZU5hdmlnYXRpb24uZGlzcGxheVByb2dyZXNzQmFyKHsgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU0VUVVAuUGFja2FnZXNMb2FkaW5nJyksIHBjdDogMTAwIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyQWxsQ29DSUQocmVzdWx0LCBsYW5nRmFsbGJhY2sgJiYgbGFuZyAhPT0gJ2VuJylcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFsbCBkb2N1bWVudHMgd2l0aCBhbiBDb0NJRCwgbGFuZ3VhZ2UsIGFuZCBlcmEgZnJvbSB0aGUgc3BlY2lmaWVkIHNjb3BlLlxuICAgKiBFbXB0eSBhcnJheSByZXR1cm4gZm9yIG5vIG1hdGNoZXNcbiAgICogQHBhcmFtIGNvY2lkIGEgc2luZ2xlIGNvY2lkXG4gICAqIEBwYXJhbSBsYW5nIHRoZSBsYW5ndWFnZSB0byBtYXRjaCBhZ2FpbnN0ICgnZW4nLCAnZXMnLCAuLi4pXG4gICAqIEBwYXJhbSBlcmEgdGhlIGVyYXMgdG8gbWF0Y2ggYWdhaW5zdCAoJ3N0YW5kYXJkJywgJ21vZGVyblB1bHAnLCAuLi4pLCB0cnVlID0gd29ybGQgZGVmYXVsdCwgZmFsc2UgPSBubyBmaWx0ZXJcbiAgICogQHBhcmFtIHNjb3BlIGRlZmluZXMgd2hlcmUgaXQgd2lsbCBsb29rOlxuICAgKiAqKm1hdGNoKiogc2FtZSBsb2dpYyBhcyBmcm9tQ29DSUQgZnVuY3Rpb24sXG4gICAqICoqYWxsKio6IGZpbmQgaW4gYm90aCB3b3JsZCAmIGNvbXBlbmRpYSxcbiAgICogKip3b3JsZCoqOiBvbmx5IHNlYXJjaCBpbiB3b3JsZCxcbiAgICogKipjb21wZW5kaXVtcyoqOiBvbmx5IHNlYXJjaCBpbiBjb21wZW5kaXVtc1xuICAgKiBAcGFyYW0gbGFuZ0ZhbGxiYWNrIHNob3VsZCB0aGUgc3lzdGVtIGZhbGwgYmFjayB0byBlbiBpbmNhc2UgdGhlcmUgaXMgbm8gdHJhbnNsYXRpb25cbiAgICogQHBhcmFtIHNob3dMb2FkaW5nIFNob3cgbG9hZGluZyBiYXJcbiAgICogQHJldHVybnMgYXJyYXlcbiAgICovXG4gIHN0YXRpYyBhc3luYyBmcm9tQ29DSURBbGwgKHsgY29jaWQsIGxhbmcgPSBnYW1lLmkxOG4ubGFuZywgZXJhID0gZmFsc2UsIHNjb3BlID0gJ21hdGNoJywgbGFuZ0ZhbGxiYWNrID0gdHJ1ZSwgc2hvd0xvYWRpbmcgPSBmYWxzZSB9ID0ge30pIHtcbiAgICBpZiAoIWNvY2lkIHx8IHR5cGVvZiBjb2NpZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBbXVxuICAgIH1cbiAgICBjb25zdCBwYXJ0cyA9IGNvY2lkLm1hdGNoKENvQ0lELnJlZ0V4S2V5KCkpXG4gICAgaWYgKCFwYXJ0cykge1xuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuICAgIGlmIChsYW5nID09PSAnJykge1xuICAgICAgbGFuZyA9IGdhbWUuaTE4bi5sYW5nXG4gICAgfVxuICAgIHJldHVybiBDb0NJRC5mcm9tQ29DSURSZWdleEFsbCh7IGNvY2lkUmVnRXhwOiBuZXcgUmVnRXhwKCdeJyArIENvQzdVdGlsaXRpZXMucXVvdGVSZWdFeHAoY29jaWQpICsgJyQnKSwgdHlwZTogcGFydHNbMV0sIGxhbmcsIGVyYSwgc2NvcGUsIGxhbmdGYWxsYmFjaywgc2hvd0xvYWRpbmcgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIG9ubHkgdGhlIGhpZ2hlc3QgcHJpb3JpdHkgZG9jdW1lbnRzIGZvciBlYWNoIENvQ0lEIHRoYXQgbWF0Y2hlcyB0aGUgUmVnRXhwIGFuZFxuICAgKiBsYW5ndWFnZSwgd2l0aCB0aGUgaGlnaGVzdCBwcmlvcml0eSBkb2N1bWVudHMgaW4gdGhlIFdvcmxkIHRha2luZyBwcmVjZWRlbmNlIG92ZXJcbiAgICogYW55IGRvY3VtZW50cyBpbiBjb21wZW5kaXVtIHBhY2tzLlxuICAgKiBFbXB0eSBhcnJheSByZXR1cm4gZm9yIG5vIG1hdGNoZXNcbiAgICogQHBhcmFtIGNvY2lkUmVnRXhwIHJlZ2V4IHVzZWQgb24gdGhlIENvQ0lEXG4gICAqIEBwYXJhbSB0eXBlIHRoZSBmaXJzdCBwYXJ0IG9mIHRoZSB3YW50ZWQgQ29DSUQsIGZvciBleGFtcGxlICdpJywgJ2EnLCAnamUnXG4gICAqIEBwYXJhbSBsYW5nIHRoZSBsYW5ndWFnZSB0byBtYXRjaCBhZ2FpbnN0IChcImVuXCIsIFwiZXNcIiwgLi4uKVxuICAgKiBAcGFyYW0gZXJhIHRoZSBlcmFzIHRvIG1hdGNoIGFnYWluc3QgKCdzdGFuZGFyZCcsICdtb2Rlcm5QdWxwJywgLi4uKSwgdHJ1ZSA9IHdvcmxkIGRlZmF1bHRcbiAgICogQHBhcmFtIGxhbmdGYWxsYmFjayBzaG91bGQgdGhlIHN5c3RlbSBmYWxsIGJhY2sgdG8gZW4gaW5jYXNlIHRoZXJlIGlzIG5vIHRyYW5zbGF0aW9uXG4gICAqIEBwYXJhbSBzaG93TG9hZGluZyBTaG93IGxvYWRpbmcgYmFyXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgZnJvbUNvQ0lEUmVnZXhCZXN0ICh7IGNvY2lkUmVnRXhwLCB0eXBlLCBsYW5nID0gZ2FtZS5pMThuLmxhbmcsIGVyYSA9IHRydWUsIGxhbmdGYWxsYmFjayA9IHRydWUsIHNob3dMb2FkaW5nID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgaWYgKGVyYSA9PT0gZmFsc2UpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Db0NJREZsYWcuZXJyb3IudW5rbm93bi1lcmEnLCB7IGVyYTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkFueScpIH0pKVxuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuICAgIGNvbnN0IGFsbERvY3VtZW50cyA9IGF3YWl0IHRoaXMuZnJvbUNvQ0lEUmVnZXhBbGwoeyBjb2NpZFJlZ0V4cCwgdHlwZSwgbGFuZywgZXJhLCBzY29wZTogJ2FsbCcsIGxhbmdGYWxsYmFjaywgc2hvd0xvYWRpbmcgfSlcbiAgICBjb25zdCBiZXN0RG9jdW1lbnRzID0gdGhpcy5maWx0ZXJCZXN0Q29DSUQoYWxsRG9jdW1lbnRzKVxuICAgIHJldHVybiBiZXN0RG9jdW1lbnRzXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBvbmx5IHRoZSBoaWdoZXN0IHByaW9yaXR5IGRvY3VtZW50IGZvciBDb0NJRCB0aGF0IG1hdGNoZXMgdGhlIGxhbmd1YWdlLFxuICAgKiB3aXRoIHRoZSBoaWdoZXN0IHByaW9yaXR5IGRvY3VtZW50cyBpbiB0aGUgV29ybGQgdGFraW5nIHByZWNlZGVuY2Ugb3ZlclxuICAgKiBhbnkgZG9jdW1lbnRzXG4gICAqIGluIGNvbXBlbmRpdW0gcGFja3MuXG4gICAqIEBwYXJhbSBjb2NpZCBzdHJpbmcgQ29DSURcbiAgICogQHBhcmFtIGxhbmcgdGhlIGxhbmd1YWdlIHRvIG1hdGNoIGFnYWluc3QgKFwiZW5cIiwgXCJlc1wiLCAuLi4pXG4gICAqIEBwYXJhbSBlcmEgdGhlIGVyYXMgdG8gbWF0Y2ggYWdhaW5zdCAoJ3N0YW5kYXJkJywgJ21vZGVyblB1bHAnLCAuLi4pLCB0cnVlID0gd29ybGQgZGVmYXVsdFxuICAgKiBAcGFyYW0gbGFuZ0ZhbGxiYWNrIHNob3VsZCB0aGUgc3lzdGVtIGZhbGwgYmFjayB0byBlbiBpbmNhc2UgdGhlcmUgaXMgbm8gdHJhbnNsYXRpb25cbiAgICovXG4gIHN0YXRpYyBmcm9tQ29DSUQgKGNvY2lkLCBsYW5nID0gZ2FtZS5pMThuLmxhbmcsIGVyYSA9IHRydWUsIGxhbmdGYWxsYmFjayA9IHRydWUpIHtcbiAgICBpZiAoZXJhID09PSBmYWxzZSkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkNvQ0lERmxhZy5lcnJvci51bmtub3duLWVyYScsIHsgZXJhOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQW55JykgfSkpXG4gICAgICByZXR1cm4gW11cbiAgICB9XG4gICAgcmV0dXJuIENvQ0lELmZyb21Db0NJREJlc3QoeyBjb2NpZCwgbGFuZywgZXJhLCBsYW5nRmFsbGJhY2sgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIG9ubHkgdGhlIGhpZ2hlc3QgcHJpb3JpdHkgZG9jdW1lbnQgZm9yIENvQ0lEIHRoYXQgbWF0Y2hlcyB0aGUgbGFuZ3VhZ2UsXG4gICAqIHdpdGggdGhlIGhpZ2hlc3QgcHJpb3JpdHkgZG9jdW1lbnRzIGluIHRoZSBXb3JsZCB0YWtpbmcgcHJlY2VkZW5jZSBvdmVyXG4gICAqIGFueSBkb2N1bWVudHNcbiAgICogaW4gY29tcGVuZGl1bSBwYWNrcy5cbiAgICogQHBhcmFtIGNvY2lkIHN0cmluZyBDb0NJRFxuICAgKiBAcGFyYW0gbGFuZyB0aGUgbGFuZ3VhZ2UgdG8gbWF0Y2ggYWdhaW5zdCAoXCJlblwiLCBcImVzXCIsIC4uLilcbiAgICogQHBhcmFtIGVyYSB0aGUgZXJhcyB0byBtYXRjaCBhZ2FpbnN0ICgnc3RhbmRhcmQnLCAnbW9kZXJuUHVscCcsIC4uLiksIHRydWUgPSB3b3JsZCBkZWZhdWx0XG4gICAqIEBwYXJhbSBsYW5nRmFsbGJhY2sgc2hvdWxkIHRoZSBzeXN0ZW0gZmFsbCBiYWNrIHRvIGVuIGluY2FzZSB0aGVyZSBpcyBubyB0cmFuc2xhdGlvblxuICAgKiBAcGFyYW0gc2hvd0xvYWRpbmcgU2hvdyBsb2FkaW5nIGJhclxuICAgKi9cbiAgc3RhdGljIGZyb21Db0NJREJlc3QgKHsgY29jaWQsIGxhbmcgPSBnYW1lLmkxOG4ubGFuZywgZXJhID0gdHJ1ZSwgbGFuZ0ZhbGxiYWNrID0gdHJ1ZSwgc2hvd0xvYWRpbmcgPSBmYWxzZSB9ID0ge30pIHtcbiAgICBpZiAoIWNvY2lkIHx8IHR5cGVvZiBjb2NpZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBbXVxuICAgIH1cbiAgICBpZiAoZXJhID09PSBmYWxzZSkge1xuICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkNvQ0lERmxhZy5lcnJvci51bmtub3duLWVyYScsIHsgZXJhOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQW55JykgfSkpXG4gICAgICByZXR1cm4gW11cbiAgICB9XG4gICAgY29uc3QgdHlwZSA9IGNvY2lkLnNwbGl0KCcuJylbMF1cbiAgICBjb25zdCBjb2NpZFJlZ0V4cCA9IG5ldyBSZWdFeHAoJ14nICsgQ29DN1V0aWxpdGllcy5xdW90ZVJlZ0V4cChjb2NpZCkgKyAnJCcpXG4gICAgcmV0dXJuIENvQ0lELmZyb21Db0NJRFJlZ2V4QmVzdCh7IGNvY2lkUmVnRXhwLCB0eXBlLCBsYW5nLCBlcmEsIGxhbmdGYWxsYmFjaywgc2hvd0xvYWRpbmcgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3IgYW4gYXJyYXkgb2YgZG9jdW1lbnRzIGFscmVhZHkgcHJvY2Vzc2VkIGJ5IGZpbHRlckFsbENvQ0lELCByZXR1cm5zIG9ubHkgdGhvc2UgdGhhdCBhcmUgdGhlIFwiYmVzdFwiIHZlcnNpb24gb2YgdGhlaXIgQ29DSURcbiAgICogQHBhcmFtIGRvY3VtZW50c1xuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgc3RhdGljIGZpbHRlckJlc3RDb0NJRCAoZG9jdW1lbnRzKSB7XG4gICAgY29uc3QgYmVzdE1hdGNoRG9jdW1lbnRzID0gbmV3IE1hcCgpXG4gICAgZm9yIChjb25zdCBkb2Mgb2YgZG9jdW1lbnRzKSB7XG4gICAgICBjb25zdCBkb2NDb0NJRCA9IGRvYy5nZXRGbGFnKCdDb0M3JywgJ2NvY2lkRmxhZycpPy5pZFxuICAgICAgaWYgKGRvY0NvQ0lEKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnREb2MgPSBiZXN0TWF0Y2hEb2N1bWVudHMuZ2V0KGRvY0NvQ0lEKVxuICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnREb2MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgYmVzdE1hdGNoRG9jdW1lbnRzLnNldChkb2NDb0NJRCwgZG9jKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBQcmVmZXIgcGFjayA9PT0gJycgaWYgcG9zc2libGVcbiAgICAgICAgY29uc3QgZG9jUGFjayA9IChkb2MucGFjayA/PyAnJylcbiAgICAgICAgY29uc3QgZXhpc3RpbmdQYWNrID0gKGN1cnJlbnREb2M/LnBhY2sgPz8gJycpXG4gICAgICAgIGNvbnN0IHByZWZlcldvcmxkID0gZG9jUGFjayA9PT0gJycgfHwgZXhpc3RpbmdQYWNrICE9PSAnJ1xuICAgICAgICBpZiAoIXByZWZlcldvcmxkKSB7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFByZWZlciBoaWdoZXN0IHByaW9yaXR5XG4gICAgICAgIGxldCBkb2NQcmlvcml0eSA9IHBhcnNlSW50KGRvYy5nZXRGbGFnKCdDb0M3JywgJ2NvY2lkRmxhZycpPy5wcmlvcml0eSA/PyBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUiwgMTApXG4gICAgICAgIGRvY1ByaW9yaXR5ID0gaXNOYU4oZG9jUHJpb3JpdHkpID8gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIgOiBkb2NQcmlvcml0eVxuICAgICAgICBsZXQgZXhpc3RpbmdQcmlvcml0eSA9IHBhcnNlSW50KGN1cnJlbnREb2MuZ2V0RmxhZygnQ29DNycsICdjb2NpZEZsYWcnKT8ucHJpb3JpdHkgPz8gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIsIDEwKVxuICAgICAgICBleGlzdGluZ1ByaW9yaXR5ID0gaXNOYU4oZXhpc3RpbmdQcmlvcml0eSkgPyBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUiA6IGV4aXN0aW5nUHJpb3JpdHlcbiAgICAgICAgY29uc3QgcHJlZmVyUHJpb3JpdHkgPSBkb2NQcmlvcml0eSA+PSBleGlzdGluZ1ByaW9yaXR5XG4gICAgICAgIGlmICghcHJlZmVyUHJpb3JpdHkpIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgYmVzdE1hdGNoRG9jdW1lbnRzLnNldChkb2NDb0NJRCwgZG9jKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gWy4uLmJlc3RNYXRjaERvY3VtZW50cy52YWx1ZXMoKV1cbiAgfVxuXG4gIC8qKlxuICAgKiBGb3IgYW4gYXJyYXkgb2YgZG9jdW1lbnRzLCByZXR1cm5zIGZpbHRlciBvdXQgZW4gZG9jdW1lbnRzIGlmIGEgdHJhbnNsYXRlZCBvbmUgZXhpc3RzIG1hdGNoaW5nIHRoZSBzYW1lIGVyYXNcbiAgICogQHBhcmFtIGRvY3VtZW50c1xuICAgKiBAcGFyYW0gbGFuZ0ZhbGxiYWNrIHNob3VsZCB0aGUgc3lzdGVtIGZhbGwgYmFjayB0byBlbiBpbiBjYXNlIHRoZXJlIGlzIG5vIHRyYW5zbGF0aW9uXG4gICAqIEByZXR1cm5zXG4gICAqL1xuICBzdGF0aWMgZmlsdGVyQWxsQ29DSUQgKGRvY3VtZW50cywgbGFuZ0ZhbGxiYWNrKSB7XG4gICAgaWYgKCFsYW5nRmFsbGJhY2spIHtcbiAgICAgIHJldHVybiBkb2N1bWVudHNcbiAgICB9XG4gICAgY29uc3QgYmVzdE1hdGNoRG9jdW1lbnRzID0gbmV3IE1hcCgpXG4gICAgZm9yIChjb25zdCBkb2Mgb2YgZG9jdW1lbnRzKSB7XG4gICAgICBjb25zdCBkb2NDb0NJRCA9IGRvYy5nZXRGbGFnKCdDb0M3JywgJ2NvY2lkRmxhZycpPy5pZFxuICAgICAgaWYgKGRvY0NvQ0lEKSB7XG4gICAgICAgIGNvbnN0IGRvY0VyYXMgPSBPYmplY3QuZW50cmllcyhkb2MuZ2V0RmxhZygnQ29DNycsICdjb2NpZEZsYWcnKT8uZXJhcyA/PyB7fSkuZmlsdGVyKGUgPT4gZVsxXSkubWFwKGUgPT4gZVswXSkuc29ydCgpLmpvaW4oJy8nKVxuICAgICAgICBsZXQgZG9jUHJpb3JpdHkgPSBwYXJzZUludChkb2MuZ2V0RmxhZygnQ29DNycsICdjb2NpZEZsYWcnKT8ucHJpb3JpdHkgPz8gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIsIDEwKVxuICAgICAgICBkb2NQcmlvcml0eSA9IGlzTmFOKGRvY1ByaW9yaXR5KSA/IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSIDogZG9jUHJpb3JpdHlcbiAgICAgICAgY29uc3Qga2V5ID0gZG9jQ29DSUQgKyAnLycgKyBkb2NFcmFzICsgJy8nICsgKGlzTmFOKGRvY1ByaW9yaXR5KSA/IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSIDogZG9jUHJpb3JpdHkpXG5cbiAgICAgICAgY29uc3QgY3VycmVudERvYyA9IGJlc3RNYXRjaERvY3VtZW50cy5nZXQoa2V5KVxuICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnREb2MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgYmVzdE1hdGNoRG9jdW1lbnRzLnNldChrZXksIGRvYylcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZG9jTGFuZyA9IGRvYy5nZXRGbGFnKCdDb0M3JywgJ2NvY2lkRmxhZycpPy5sYW5nID8/ICdlbidcbiAgICAgICAgY29uc3QgZXhpc3RpbmdMYW5nID0gY3VycmVudERvYz8uZ2V0RmxhZygnQ29DNycsICdjb2NpZEZsYWcnKT8ubGFuZyA/PyAnZW4nXG4gICAgICAgIGlmIChleGlzdGluZ0xhbmcgPT09ICdlbicgJiYgZXhpc3RpbmdMYW5nICE9PSBkb2NMYW5nKSB7XG4gICAgICAgICAgYmVzdE1hdGNoRG9jdW1lbnRzLnNldChrZXksIGRvYylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gWy4uLmJlc3RNYXRjaERvY3VtZW50cy52YWx1ZXMoKV1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYSBsaXN0IG9mIGFsbCBkb2N1bWVudHMgbWF0Y2hpbmcgdGhlIENvQ0lEIHJlZ2V4LCBsYW5ndWFnZSwgYW5kIGVyYSBmcm9tIHRoZSB3b3JsZC5cbiAgICogVGhlIGRvY3VtZW50IGxpc3QgaXMgc29ydGVkIHdpdGggdGhlIGhpZ2hlc3QgcHJpb3JpdHkgZmlyc3QuXG4gICAqIEBwYXJhbSBjb2NpZFJlZ0V4cCByZWdleCB1c2VkIG9uIHRoZSBDb0NJRFxuICAgKiBAcGFyYW0gdHlwZSB0aGUgZmlyc3QgcGFydCBvZiB0aGUgd2FudGVkIENvQ0lELCBmb3IgZXhhbXBsZSAnaScsICdhJywgJ2plJ1xuICAgKiBAcGFyYW0gZXJhIHRoZSBlcmFzIHRvIG1hdGNoIGFnYWluc3QgKCdzdGFuZGFyZCcsICdtb2Rlcm5QdWxwJywgLi4uKSwgdHJ1ZSA9IHdvcmxkIGRlZmF1bHQsIGZhbHNlID0gbm8gZmlsdGVyXG4gICAqIEBwYXJhbSBsYW5nIHRoZSBsYW5ndWFnZSB0byBtYXRjaCBhZ2FpbnN0ICgnZW4nLCAnZXMnLCAuLi4pXG4gICAqIEBwYXJhbSBsYW5nRmFsbGJhY2sgc2hvdWxkIHRoZSBzeXN0ZW0gZmFsbCBiYWNrIHRvIGVuIGluY2FzZSB0aGVyZSBpcyBubyB0cmFuc2xhdGlvblxuICAgKiBAcGFyYW0gcHJvZ3Jlc3NCYXIgSWYgZ3JlYXRlciB0aGFuIHplcm8gc2hvdyBwZXJjZW50YWdlXG4gICAqIEByZXR1cm5zIGFycmF5XG4gICAqL1xuICBzdGF0aWMgYXN5bmMgZG9jdW1lbnRzRnJvbVdvcmxkICh7IGNvY2lkUmVnRXhwLCB0eXBlLCBsYW5nID0gZ2FtZS5pMThuLmxhbmcsIGVyYSA9IGZhbHNlLCBsYW5nRmFsbGJhY2sgPSB0cnVlLCBwcm9ncmVzc0JhciA9IDAgfSA9IHt9KSB7XG4gICAgaWYgKCFjb2NpZFJlZ0V4cCkge1xuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuICAgIGlmIChsYW5nID09PSAnJykge1xuICAgICAgbGFuZyA9IGdhbWUuaTE4bi5sYW5nXG4gICAgfVxuICAgIGlmIChlcmEgPT09IHRydWUpIHtcbiAgICAgIGVyYSA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3dvcmxkRXJhJylcbiAgICB9XG5cbiAgICBpZiAocHJvZ3Jlc3NCYXIgPiAwKSB7XG4gICAgICBTY2VuZU5hdmlnYXRpb24uZGlzcGxheVByb2dyZXNzQmFyKHsgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU0VUVVAuUGFja2FnZXNMb2FkaW5nJyksIHBjdDogTWF0aC5mbG9vcigxMDAgLyBwcm9ncmVzc0JhcikgfSlcbiAgICB9XG5cbiAgICBjb25zdCBnYW1lUHJvcGVydHkgPSBDb0NJRC5nZXRHYW1lUHJvcGVydHkoYCR7dHlwZX0uLmApXG5cbiAgICBjb25zdCBjYW5kaWRhdGVEb2N1bWVudHMgPSBnYW1lW2dhbWVQcm9wZXJ0eV0/LmZpbHRlcigoZCkgPT4ge1xuICAgICAgY29uc3QgY29jaWRGbGFnID0gZC5nZXRGbGFnKCdDb0M3JywgJ2NvY2lkRmxhZycpXG4gICAgICBpZiAodHlwZW9mIGNvY2lkRmxhZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBjb25zdCBlcmFzID0gKGNvY2lkRmxhZy5lcmFzID8/IFtdKVxuICAgICAgY29uc3QgbWF0Y2hpbmdFcmFzID0gKGVyYSA9PT0gZmFsc2UgfHwgT2JqZWN0LmVudHJpZXMoZXJhcykubGVuZ3RoID09PSAwIHx8IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXJhcywgZXJhKSAmJiBlcmFzW2VyYV0pKVxuICAgICAgcmV0dXJuIGNvY2lkUmVnRXhwLnRlc3QoY29jaWRGbGFnLmlkKSAmJiBbbGFuZywgKGxhbmdGYWxsYmFjayA/ICdlbicgOiAnLScpXS5pbmNsdWRlcyhjb2NpZEZsYWcubGFuZykgJiYgbWF0Y2hpbmdFcmFzXG4gICAgfSlcblxuICAgIGlmIChjYW5kaWRhdGVEb2N1bWVudHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbmRpZGF0ZURvY3VtZW50cy5zb3J0KENvQ0lELmNvbXBhcmVDb0NJRFByaW8pXG4gIH1cblxuICAvKipcbiAgICogR2V0IGEgbGlzdCBvZiBhbGwgZG9jdW1lbnRzIG1hdGNoaW5nIHRoZSBDb0NJRCByZWdleCwgbGFuZ3VhZ2UsIGFuZCBlcmEgZnJvbSB0aGUgY29tcGVuZGl1bXMuXG4gICAqIFRoZSBkb2N1bWVudCBsaXN0IGlzIHNvcnRlZCB3aXRoIHRoZSBoaWdoZXN0IHByaW9yaXR5IGZpcnN0LlxuICAgKiBAcGFyYW0gY29jaWRSZWdFeHAgcmVnZXggdXNlZCBvbiB0aGUgQ29DSURcbiAgICogQHBhcmFtIHR5cGUgdGhlIGZpcnN0IHBhcnQgb2YgdGhlIHdhbnRlZCBDb0NJRCwgZm9yIGV4YW1wbGUgJ2knLCAnYScsICdqZSdcbiAgICogQHBhcmFtIGVyYSB0aGUgZXJhcyB0byBtYXRjaCBhZ2FpbnN0ICgnc3RhbmRhcmQnLCAnbW9kZXJuUHVscCcsIC4uLiksIHRydWUgPSB3b3JsZCBkZWZhdWx0LCBmYWxzZSA9IG5vIGZpbHRlclxuICAgKiBAcGFyYW0gbGFuZyB0aGUgbGFuZ3VhZ2UgdG8gbWF0Y2ggYWdhaW5zdCAoJ2VuJywgJ2VzJywgLi4uKVxuICAgKiBAcGFyYW0gbGFuZ0ZhbGxiYWNrIHNob3VsZCB0aGUgc3lzdGVtIGZhbGwgYmFjayB0byBlbiBpbmNhc2UgdGhlcmUgaXMgbm8gdHJhbnNsYXRpb25cbiAgICogQHBhcmFtIHByb2dyZXNzQmFyIElmIGdyZWF0ZXIgdGhhbiB6ZXJvIHNob3cgcGVyY2VudGFnZVxuICAgKiBAcmV0dXJucyBhcnJheVxuICAgKi9cbiAgc3RhdGljIGFzeW5jIGRvY3VtZW50c0Zyb21Db21wZW5kaWEgKHsgY29jaWRSZWdFeHAsIHR5cGUsIGxhbmcgPSBnYW1lLmkxOG4ubGFuZywgZXJhID0gZmFsc2UsIGxhbmdGYWxsYmFjayA9IHRydWUsIHByb2dyZXNzQmFyID0gMCB9KSB7XG4gICAgaWYgKCFjb2NpZFJlZ0V4cCkge1xuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuICAgIGlmIChsYW5nID09PSAnJykge1xuICAgICAgbGFuZyA9IGdhbWUuaTE4bi5sYW5nXG4gICAgfVxuICAgIGlmIChlcmEgPT09IHRydWUpIHtcbiAgICAgIGVyYSA9IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3dvcmxkRXJhJylcbiAgICB9XG4gICAgY29uc3QgZXJhVGV4dCA9IENvQ0lELmVyYVRleHQoZXJhKVxuXG4gICAgY29uc3QgZG9jdW1lbnRUeXBlID0gQ29DSUQuZ2V0RG9jdW1lbnRUeXBlKHR5cGUpLm5hbWVcbiAgICBjb25zdCBjYW5kaWRhdGVEb2N1bWVudHMgPSBbXVxuXG4gICAgbGV0IGNvdW50ID0gMVxuICAgIGZvciAoY29uc3QgcGFjayBvZiBnYW1lLnBhY2tzKSB7XG4gICAgICBpZiAocHJvZ3Jlc3NCYXIgPiAwKSB7XG4gICAgICAgIFNjZW5lTmF2aWdhdGlvbi5kaXNwbGF5UHJvZ3Jlc3NCYXIoeyBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdTRVRVUC5QYWNrYWdlc0xvYWRpbmcnKSwgcGN0OiBNYXRoLmZsb29yKGNvdW50ICogMTAwIC8gcHJvZ3Jlc3NCYXIpIH0pXG4gICAgICAgIGNvdW50KytcbiAgICAgIH1cbiAgICAgIGlmIChwYWNrLmRvY3VtZW50TmFtZSA9PT0gZG9jdW1lbnRUeXBlKSB7XG4gICAgICAgIGlmICghcGFjay5pbmRleGVkKSB7XG4gICAgICAgICAgYXdhaXQgcGFjay5nZXRJbmRleCgpXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5kZXhJbnN0YW5jZXMgPSBwYWNrLmluZGV4LmZpbHRlcigoaSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGNvY2lkRmxhZyA9IGkuZmxhZ3M/LkNvQzc/LmNvY2lkRmxhZ1xuICAgICAgICAgIGlmICh0eXBlb2YgY29jaWRGbGFnID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGVyYXMgPSAoY29jaWRGbGFnLmVyYXMgPz8gW10pXG4gICAgICAgICAgY29uc3QgbWF0Y2hpbmdFcmFzID0gKGVyYSA9PT0gZmFsc2UgfHwgT2JqZWN0LmVudHJpZXMoZXJhcykubGVuZ3RoID09PSAwIHx8IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXJhcywgZXJhKSAmJiBlcmFzW2VyYV0pKVxuICAgICAgICAgIHJldHVybiBjb2NpZFJlZ0V4cC50ZXN0KGNvY2lkRmxhZy5pZCkgJiYgW2xhbmcsIChsYW5nRmFsbGJhY2sgPyAnZW4nIDogJy0nKV0uaW5jbHVkZXMoY29jaWRGbGFnLmxhbmcpICYmIG1hdGNoaW5nRXJhc1xuICAgICAgICB9KVxuICAgICAgICBmb3IgKGNvbnN0IGluZGV4IG9mIGluZGV4SW5zdGFuY2VzKSB7XG4gICAgICAgICAgY29uc3QgZG9jdW1lbnQgPSBhd2FpdCBwYWNrLmdldERvY3VtZW50KGluZGV4Ll9pZClcbiAgICAgICAgICBpZiAoIWRvY3VtZW50KSB7XG4gICAgICAgICAgICBjb25zdCBtc2cgPSBnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkNvQ0lERmxhZy5lcnJvci5kb2N1bWVudC1ub3QtZm91bmQnLCB7XG4gICAgICAgICAgICAgIGNvY2lkOiBjb2NpZFJlZ0V4cCxcbiAgICAgICAgICAgICAgbGFuZyxcbiAgICAgICAgICAgICAgZXJhOiBlcmFUZXh0XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihtc2cpXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnQ29DNyB8JywgbXNnLCBpbmRleClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbmRpZGF0ZURvY3VtZW50cy5wdXNoKGRvY3VtZW50KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2FuZGlkYXRlRG9jdW1lbnRzLnNvcnQoQ29DSUQuY29tcGFyZUNvQ0lEUHJpbylcbiAgfVxuXG4gIC8qKlxuICAgKiBTb3J0IGEgbGlzdCBvZiBkb2N1bWVudCBvbiBDb0NJRCBwcmlvcml0eSAtIHRoZSBoaWdoZXN0IGZpcnN0LlxuICAgKiBAZXhhbXBsZVxuICAgKiBhTGlzdE9mRG9jdW1lbnRzLnNvcnQoQ29DSUQuY29tcGFyZUNvQ0lEUHJpbylcbiAgICovXG4gIHN0YXRpYyBjb21wYXJlQ29DSURQcmlvIChhLCBiKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGIuZ2V0RmxhZygnQ29DNycsICdjb2NpZEZsYWcnKT8ucHJpb3JpdHkgLVxuICAgICAgYS5nZXRGbGFnKCdDb0M3JywgJ2NvY2lkRmxhZycpPy5wcmlvcml0eVxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2xhdGVzIHRoZSBmaXJzdCBwYXJ0IG9mIGEgQ29DSUQgdG8gd2hhdCB0aG9zZSBkb2N1bWVudHMgYXJlIGNhbGxlZCBpbiB0aGUgYGdhbWVgIG9iamVjdC5cbiAgICogQHBhcmFtIGNvY2lkIGEgc2luZ2xlIGNvY2lkXG4gICAqL1xuICBzdGF0aWMgZ2V0R2FtZVByb3BlcnR5IChjb2NpZCkge1xuICAgIGNvbnN0IHR5cGUgPSBjb2NpZC5zcGxpdCgnLicpWzBdXG4gICAgY29uc3QgZ2FtZVByb3BlcnR5ID0gQ29DSUQuZ2FtZVByb3BlcnR5TG9va3VwW3R5cGVdXG4gICAgaWYgKCFnYW1lUHJvcGVydHkpIHtcbiAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LkNvQ0lERmxhZy5lcnJvci5pbmNvcnJlY3QudHlwZScpKVxuICAgICAgY29uc29sZS5sb2coJ0NvQzcgfCAnLCBjb2NpZClcbiAgICAgIHRocm93IG5ldyBFcnJvcigpXG4gICAgfVxuICAgIHJldHVybiBnYW1lUHJvcGVydHlcbiAgfVxuXG4gIHN0YXRpYyBnZXQgZ2FtZVByb3BlcnR5TG9va3VwICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYTogJ2FjdG9ycycsXG4gICAgICBjOiAnY2FyZHMnLFxuICAgICAgaTogJ2l0ZW1zJyxcbiAgICAgIGplOiAnam91cm5hbCcsXG4gICAgICBtOiAnbWFjcm9zJyxcbiAgICAgIHA6ICdwbGF5bGlzdHMnLFxuICAgICAgcnQ6ICd0YWJsZXMnLFxuICAgICAgczogJ3NjZW5lcydcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVHJhbnNsYXRlcyB0aGUgZmlyc3QgcGFydCBvZiBhIENvQ0lEIHRvIHdoYXQgdGhvc2UgZG9jdW1lbnRzIGFyZSBjYWxsZWQgaW4gdGhlIGBnYW1lYCBvYmplY3QuXG4gICAqIEBwYXJhbSBjb2NpZCBhIHNpbmdsZSBjb2NpZFxuICAgKi9cbiAgc3RhdGljIGdldERvY3VtZW50VHlwZSAoY29jaWQpIHtcbiAgICBjb25zdCB0eXBlID0gY29jaWQuc3BsaXQoJy4nKVswXVxuICAgIGNvbnN0IGRvY3VtZW50VHlwZSA9IENvQ0lELmRvY3VtZW50TmFtZUxvb2t1cFt0eXBlXVxuICAgIGlmICghZG9jdW1lbnRUeXBlKSB7XG4gICAgICB1aS5ub3RpZmljYXRpb25zLndhcm4oZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Db0NJREZsYWcuZXJyb3IuaW5jb3JyZWN0LnR5cGUnKSlcbiAgICAgIGNvbnNvbGUubG9nKCdDb0M3IHwgJywgY29jaWQpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoKVxuICAgIH1cbiAgICByZXR1cm4gZG9jdW1lbnRUeXBlXG4gIH1cblxuICBzdGF0aWMgZ2V0IGRvY3VtZW50TmFtZUxvb2t1cCAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGE6IEFjdG9yLFxuICAgICAgYzogQ2FyZCxcbiAgICAgIGk6IEl0ZW0sXG4gICAgICBqZTogSm91cm5hbEVudHJ5LFxuICAgICAgbTogTWFjcm8sXG4gICAgICBwOiBQbGF5bGlzdCxcbiAgICAgIHJ0OiBSb2xsVGFibGUsXG4gICAgICBzOiBTY2VuZVxuICAgIH1cbiAgfVxufVxuIiwiLyogZ2xvYmFsIEhvb2tzICovXG5pbXBvcnQgeyBjb25maWd1cmVEb2N1bWVudHMgfSBmcm9tICcuLi9zY3JpcHRzL2NvbmZpZ3VyZS1kb2N1bWVudHMuanMnXG5pbXBvcnQgeyBwcmVsb2FkSGFuZGxlYmFyc1RlbXBsYXRlcyB9IGZyb20gJy4uL3NjcmlwdHMvbG9hZC10ZW1wbGF0ZXMuanMnXG5pbXBvcnQgeyByZWdpc3RlclNldHRpbmdzIH0gZnJvbSAnLi4vc2NyaXB0cy9yZWdpc3Rlci1zZXR0aW5ncy5qcydcbmltcG9ydCB7IHJlZ2lzdGVyU2hlZXRzIH0gZnJvbSAnLi4vc2NyaXB0cy9yZWdpc3Rlci1zaGVldHMuanMnXG5pbXBvcnQgeyBoYW5kbGViYXJzSGVscGVyIH0gZnJvbSAnLi4vc2NyaXB0cy9oYW5kbGViYXJzLWhlbHBlci5qcydcbmltcG9ydCB7IGNvbXBlbmRpdW1GaWx0ZXIgfSBmcm9tICcuLi9zY3JpcHRzL2NvbXBlbmRpdW0tZmlsdGVyLmpzJ1xuaW1wb3J0IHsgQ29DSUQgfSBmcm9tICcuLi9zY3JpcHRzL2NvYy1pZC5qcydcbmltcG9ydCB7IENvQzdMaW5rIH0gZnJvbSAnLi4vYXBwcy9jb2M3LWxpbmsuanMnXG5pbXBvcnQgKiBhcyBEaWNlU29OaWNlUmVhZHlMYXN0IGZyb20gJy4vZGljZS1zby1uaWNlLXJlYWR5LWxhc3QuanMnXG5cbmV4cG9ydCBmdW5jdGlvbiBsaXN0ZW4gKCkge1xuICBIb29rcy5vbmNlKCdpbml0JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbmZpZ3VyZURvY3VtZW50cygpXG4gICAgcHJlbG9hZEhhbmRsZWJhcnNUZW1wbGF0ZXMoKVxuICAgIHJlZ2lzdGVyU2V0dGluZ3MoKVxuICAgIHJlZ2lzdGVyU2hlZXRzKClcbiAgICBoYW5kbGViYXJzSGVscGVyKClcbiAgICBjb21wZW5kaXVtRmlsdGVyKClcbiAgICBDb0NJRC5pbml0KClcbiAgICBDb0M3TGluay5pbml0KClcbiAgICBEaWNlU29OaWNlUmVhZHlMYXN0Lmxpc3RlbigpXG4gIH0pXG59XG4iLCIvKiBnbG9iYWwgQ09ORklHICovXG5pbXBvcnQgeyBDb0NBY3RvciB9IGZyb20gJy4uL2FjdG9ycy9hY3Rvci5qcydcbmltcG9ydCB7IENvQzdCb29rIH0gZnJvbSAnLi4vaXRlbXMvYm9vay9kYXRhLmpzJ1xuaW1wb3J0IHsgQ29DN0l0ZW0gfSBmcm9tICcuLi9pdGVtcy9pdGVtLmpzJ1xuaW1wb3J0IHsgQ29DN1NwZWxsIH0gZnJvbSAnLi4vaXRlbXMvc3BlbGwvZGF0YS5qcydcbmltcG9ydCB7IENvQzdDaGFzZSB9IGZyb20gJy4uL2l0ZW1zL2NoYXNlL2RhdGEuanMnXG5pbXBvcnQgQ29DN0FjdGl2ZUVmZmVjdCBmcm9tICcuLi9hY3RpdmUtZWZmZWN0LmpzJ1xuaW1wb3J0IHsgQ29DN1NraWxsIH0gZnJvbSAnLi4vaXRlbXMvc2tpbGwvZGF0YS5qcydcbmltcG9ydCB7IENvQzdWZWhpY2xlIH0gZnJvbSAnLi4vYWN0b3JzL3ZlaGljbGUvZGF0YS5qcydcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ3VyZURvY3VtZW50cyAoKSB7XG4gIENPTkZJRy5BY3RpdmVFZmZlY3QuZG9jdW1lbnRDbGFzcyA9IENvQzdBY3RpdmVFZmZlY3RcbiAgQ09ORklHLkFjdG9yLmRvY3VtZW50Q2xhc3MgPSBDb0NBY3RvclxuICBDT05GSUcuQWN0b3IuZG9jdW1lbnRDbGFzc2VzID0ge1xuICAgIHZlaGljbGU6IENvQzdWZWhpY2xlXG4gIH1cbiAgQ09ORklHLkl0ZW0uZG9jdW1lbnRDbGFzcyA9IENvQzdJdGVtXG4gIENPTkZJRy5JdGVtLmRvY3VtZW50Q2xhc3NlcyA9IHtcbiAgICBib29rOiBDb0M3Qm9vayxcbiAgICBzcGVsbDogQ29DN1NwZWxsLFxuICAgIGNoYXNlOiBDb0M3Q2hhc2UsXG4gICAgc2tpbGw6IENvQzdTa2lsbFxuICB9XG59XG4iLCIvKiBnbG9iYWwgbG9hZFRlbXBsYXRlcyAqL1xuXG4vKipcbiAqIERlZmluZSBhIHNldCBvZiB0ZW1wbGF0ZSBwYXRocyB0byBwcmUtbG9hZFxuICogUHJlLWxvYWRlZCB0ZW1wbGF0ZXMgYXJlIGNvbXBpbGVkIGFuZCBjYWNoZWQgZm9yIGZhc3QgYWNjZXNzIHdoZW4gcmVuZGVyaW5nXG4gKiBAcmV0dXJuIHtQcm9taXNlfVxuICovXG5leHBvcnQgY29uc3QgcHJlbG9hZEhhbmRsZWJhcnNUZW1wbGF0ZXMgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIC8qKiBEZWZpbmUgdGVtcGxhdGUgcGF0aHMgdG8gbG9hZCAqL1xuICBjb25zdCB0ZW1wbGF0ZVBhdGhzID0gW1xuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FjdG9ycy9wYXJ0cy9ucGMtc2tpbGxzLmh0bWwnLFxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FjdG9ycy9wYXJ0cy9ucGMtY29tYmF0Lmh0bWwnLFxuXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYWN0b3JzL3BhcnRzL2FjdG9yLWludmVudG9yeS5odG1sJyxcbiAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hY3RvcnMvcGFydHMvYWN0b3ItaW52ZW50b3J5LWl0ZW1zLmh0bWwnLFxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FjdG9ycy9wYXJ0cy9hY3Rvci1iYWNrZ3JvdW5kLmh0bWwnLFxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2NvbW1vbi9hY3RpdmUtZWZmZWN0cy5oYnMnLFxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FjdG9ycy9wYXJ0cy9hY3Rvci1teXRob3MtZW5vdW50ZXJzLmhicycsXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYWN0b3JzL3BhcnRzL2FjdG9yLWtlZXBlci1teXRob3MtZW5vdW50ZXJzLmhicycsXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYWN0b3JzL3BhcnRzL2FjdG9yLXNraWxscy12Mi5odG1sJyxcbiAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hY3RvcnMvcGFydHMvY2hhcmFjdGVyLWRldmVsb3BtZW50LXYyLmh0bWwnLFxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FjdG9ycy9wYXJ0cy9kZXZlbG9wbWVudC1jb250cm9scy5odG1sJyxcbiAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hY3RvcnMvcGFydHMvdml0YWxzLmh0bWwnLFxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FjdG9ycy9wYXJ0cy9jb21iYXQuaHRtbCcsXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYWN0b3JzL2NoYXJhY3Rlci1zaGVldC12Mi5odG1sJyxcbiAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hY3RvcnMvY2hhcmFjdGVyL3N1bW1hcnkuaHRtbCcsXG5cbiAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9pdGVtcy9ib29rL2RldGFpbHMuaHRtbCcsXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvaXRlbXMvc3BlbGwvZGV0YWlscy5odG1sJyxcblxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvaW52ZXN0aWdhdG9yLXdpemFyZC9pbnRyb2R1Y3Rpb24uaGJzJyxcbiAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hcHBzL2ludmVzdGlnYXRvci13aXphcmQvY29uZmlndXJhdGlvbi5oYnMnLFxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvaW52ZXN0aWdhdG9yLXdpemFyZC9zZWxlY3Qtc2V0dXAuaGJzJyxcbiAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hcHBzL2ludmVzdGlnYXRvci13aXphcmQvc2VsZWN0LWFyY2hldHlwZS5oYnMnLFxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvaW52ZXN0aWdhdG9yLXdpemFyZC9zZWxlY3Qtb2NjdXBhdGlvbi5oYnMnLFxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvaW52ZXN0aWdhdG9yLXdpemFyZC9zZXQtY2hhcmFjdGVyaXN0aWNzLmhicycsXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYXBwcy9pbnZlc3RpZ2F0b3Itd2l6YXJkL3NldC1hdHRyaWJ1dGVzLmhicycsXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYXBwcy9pbnZlc3RpZ2F0b3Itd2l6YXJkL3ZpZXctYXR0cmlidXRlcy5oYnMnLFxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvaW52ZXN0aWdhdG9yLXdpemFyZC9zZXQtaW52ZXN0aWdhdG9yLmhicycsXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvYXBwcy9pbnZlc3RpZ2F0b3Itd2l6YXJkL3NldC1vY2N1cGF0aW9uLXNraWxscy5oYnMnLFxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvaW52ZXN0aWdhdG9yLXdpemFyZC90b2dnbGUtc2tpbGwuaGJzJyxcbiAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hcHBzL2ludmVzdGlnYXRvci13aXphcmQvc2V0LWFyY2hldHlwZS1za2lsbHMuaGJzJyxcbiAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hcHBzL2ludmVzdGlnYXRvci13aXphcmQvcG9pbnRzLXNraWxscy5oYnMnLFxuICAgICdzeXN0ZW1zL0NvQzcvdGVtcGxhdGVzL2FwcHMvaW52ZXN0aWdhdG9yLXdpemFyZC9iYWNrc3RvcnkuaGJzJyxcbiAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9hcHBzL2ludmVzdGlnYXRvci13aXphcmQvY3JlYXRlLmhicycsXG5cbiAgICAnc3lzdGVtcy9Db0M3L3RlbXBsYXRlcy9jaGF0L21lc3NhZ2VzL3JvbGwtY29udGFpbmVyLmhicycsXG4gICAgJ3N5c3RlbXMvQ29DNy90ZW1wbGF0ZXMvY2hhdC9tZXNzYWdlcy9yb2xsLWRpY2UuaGJzJ1xuICBdXG5cbiAgLyoqIExvYWQgdGhlIHRlbXBsYXRlIHBhcnRzICovXG4gIHJldHVybiBsb2FkVGVtcGxhdGVzKHRlbXBsYXRlUGF0aHMpXG59XG4iLCIvKiBnbG9iYWwgJCwgQ09ORklHLCBDT05TVCwgZ2FtZSwgdWkgKi9cbmltcG9ydCB7IENPQzcgfSBmcm9tICcuLi9jb25maWcuanMnXG5pbXBvcnQgeyBDb0M3RGVjYWRlckRpZSB9IGZyb20gJy4uL2FwcHMvZGVjYWRlci1kaWUuanMnXG5pbXBvcnQgeyBDb0M3RGVjYWRlckRpZU90aGVyIH0gZnJvbSAnLi4vYXBwcy9kZWNhZGVyLWRpZS1vdGhlci5qcydcbmltcG9ydCB7IENvQzdHYW1lUnVsZVNldHRpbmdzIH0gZnJvbSAnLi9nYW1lLXJ1bGVzLmpzJ1xuaW1wb3J0IHsgQ29DN0RpcmVjdG9yeVBpY2tlciB9IGZyb20gJy4vY29jNy1kaXJlY3RvcnktcGlja2VyLmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJTZXR0aW5ncyAoKSB7XG4gIC8qKlxuICAgKiBSdWxlc1xuICAgKi9cbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3Rlck1lbnUoJ0NvQzcnLCAnZ2FtZVJ1bGVzJywge1xuICAgIG5hbWU6ICdDb0M3LlNldHRpbmdzLlJ1bGVzLk5hbWUnLFxuICAgIGxhYmVsOiAnQ29DNy5TZXR0aW5ncy5SdWxlcy5MYWJlbCcsXG4gICAgaGludDogJ0NvQzcuU2V0dGluZ3MuUnVsZXMuSGludCcsXG4gICAgaWNvbjogJ2ZhcyBmYS1ib29rJyxcbiAgICB0eXBlOiBDb0M3R2FtZVJ1bGVTZXR0aW5ncyxcbiAgICByZXN0cmljdGVkOiB0cnVlXG4gIH0pXG4gIENvQzdHYW1lUnVsZVNldHRpbmdzLnJlZ2lzdGVyU2V0dGluZ3MoKVxuXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAndXNlQ29udGV4dE1lbnVzJywge1xuICAgIG5hbWU6ICdTRVRUSU5HUy5Vc2VDb250ZXh0TWVudXMnLFxuICAgIGhpbnQ6ICdTRVRUSU5HUy5Vc2VDb250ZXh0TWVudXNIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiBmYWxzZVxuICB9KVxuXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnZGhvbGVVcGxvYWREaXJlY3RvcnknLCB7XG4gICAgbmFtZTogJ0NvQzcuU2V0dGluZ3MuRGhvbGVVcGxvYWQuRGlyZWN0b3J5Lk5hbWUnLFxuICAgIGhpbnQ6ICdDb0M3LlNldHRpbmdzLkRob2xlVXBsb2FkLkRpcmVjdG9yeS5IaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgdHlwZTogQ29DN0RpcmVjdG9yeVBpY2tlci5EZWZhdWx0RGlyZWN0b3J5LFxuICAgIGRlZmF1bHQ6ICdbZGF0YV0gd29ybGRzLycgKyBnYW1lLndvcmxkLmlkICsgJy9kaG9sZS1pbWFnZXMnXG4gIH0pXG5cbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICd3b3JsZEVyYScsIHtcbiAgICBuYW1lOiAnQ29DNy5TZXR0aW5ncy5Xb3JsZEVyYS5OYW1lJyxcbiAgICBoaW50OiAnQ29DNy5TZXR0aW5ncy5Xb3JsZEVyYS5IaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogJ3N0YW5kYXJkJyxcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgY2hvaWNlczogQ09DNy5lcmFzLFxuICAgIG9uQ2hhbmdlOiAoKSA9PiB7XG4gICAgICB1aS5wbGF5ZXJzLnJlbmRlcih0cnVlKVxuICAgIH1cbiAgfSlcblxuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2Ryb3BDb0NJRCcsIHtcbiAgICBuYW1lOiAnQ29DNy5TZXR0aW5ncy5Ecm9wQ29DSUQuTmFtZScsXG4gICAgaGludDogJ0NvQzcuU2V0dGluZ3MuRHJvcENvQ0lELkhpbnQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogdHJ1ZSxcbiAgICBkZWZhdWx0OiAnJyxcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgY2hvaWNlczoge1xuICAgICAgJyc6ICdDb0M3LlNldHRpbmdzLkRyb3BDb0NJRC5Qcm9tcHQnLFxuICAgICAgWTogJ0NvQzcuU2V0dGluZ3MuRHJvcENvQ0lELlVzZUNvQ0lEJyxcbiAgICAgIE46ICdDb0M3LlNldHRpbmdzLkRyb3BDb0NJRC5JZ25vcmVDb0NJRCdcbiAgICB9XG4gIH0pXG5cbiAgLyoqXG4gICAqIEluaXRpYXRpdmVcbiAgICovXG4gIC8qKiBTZXQgZGlzcGxheWluZyBkaWNlcyBmb3IgaW5pdCByb2xsICovXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnZGlzcGxheUluaXREaWNlcycsIHtcbiAgICBuYW1lOiAnU0VUVElOR1MuZGlzcGxheUluaXREaWNlcycsXG4gICAgaGludDogJ1NFVFRJTkdTLmRpc3BsYXlJbml0RGljZXNIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0pXG4gIC8qKiBTZXQgZGlzcGxheWluZyBkaWNlcyBmb3IgaW5pdCByb2xsICovXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnZGlzcGxheUluaXRBc1RleHQnLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLmRpc3BsYXlJbml0QXNUZXh0JyxcbiAgICBoaW50OiAnU0VUVElOR1MuZGlzcGxheUluaXRBc1RleHRIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0pXG5cbiAgLyoqXG4gICAqIFJvbGwgY3VzdG9taXNhaW9uc1xuICAgKi9cbiAgLyoqIFN0YW5kYnkgcm9sbHMgbWFkZSBieSBHTSBmcm9tIHBsYXllciBzaGVldCAqL1xuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ3N0YW5ieUdNUm9sbHMnLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLlN0YW5ieUdNUm9sbHMnLFxuICAgIGhpbnQ6ICdTRVRUSU5HUy5TdGFuYnlHTVJvbGxzSGludCcsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiB0cnVlLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdHlwZTogQm9vbGVhblxuICB9KVxuICAvKiogQWxsb3cgdXNhZ2Ugb2YgYSBmbGF0IGRpY2UgbW9kaWZpZXIgKi9cbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdhbGxvd0ZsYXREaWNlTW9kaWZpZXInLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLkFsbG93RmxhdERpY2VNb2RpZmllcicsXG4gICAgaGludDogJ1NFVFRJTkdTLkFsbG93RmxhdERpY2VNb2RpZmllckhpbnQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogdHJ1ZSxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0pXG4gIC8qKiBBbGxvdyB1c2FnZSBvZiBhIGZsYXQgdGhyZXNob2xkIG1vZGlmaWVyICovXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnYWxsb3dGbGF0VGhyZXNob2xkTW9kaWZpZXInLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLkFsbG93RmxhdFRocmVzaG9sZE1vZGlmaWVyJyxcbiAgICBoaW50OiAnU0VUVElOR1MuQWxsb3dGbGF0VGhyZXNob2xkTW9kaWZpZXJIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9KVxuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2RlZmF1bHRDaGVja0RpZmZpY3VsdHknLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLkRlZmF1bHREaWZmaWN1bHR5JyxcbiAgICBoaW50OiAnU0VUVElOR1MuRGVmYXVsdERpZmZpY3VsdHlIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogJ3JlZ3VsYXInLFxuICAgIHR5cGU6IFN0cmluZyxcbiAgICBjaG9pY2VzOiB7XG4gICAgICByZWd1bGFyOiAnU0VUVElOR1MuQ2hlY2tEaWZmaWN1bHR5UmVndWxhcicsXG4gICAgICB1bmtub3duOiAnU0VUVElOR1MuQ2hlY2tEaWZmaWN1bHR5VW5rbm93bidcbiAgICB9XG4gIH0pXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnc2VsZlJvbGxXaGlzcGVyVGFyZ2V0Jywge1xuICAgIG5hbWU6ICdTRVRUSU5HUy5TZWxmUm9sbFdoaXNwZXJUYXJnZXQnLFxuICAgIGhpbnQ6ICdTRVRUSU5HUy5TZWxmUm9sbFdoaXNwZXJUYXJnZXRIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogJ2V2ZXJ5b25lJyxcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgY2hvaWNlczoge1xuICAgICAgbm9ib2R5OiAnU0VUVElOR1MuRG9Ob3RBZHZpc2UnLFxuICAgICAgb3duZXJzOiAnU0VUVElOR1MuQWR2aXNlT3duZXJzT25seScsXG4gICAgICBldmVyeW9uZTogJ1NFVFRJTkdTLkFkdmlzZUFsbFBsYXllcidcbiAgICB9XG4gIH0pXG5cbiAgLyoqXG4gICAqIENoYXQgQ2FyZHNcbiAgICovXG4gIC8qKiBUcnVzdGVkIHBsYXllcnMgd2lsbCBiZSBhbGxvd2VkIHRvIG1vZGlmeSBjaGF0IGNhcmRzICovXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAndHJ1c3RlZENhbk1vZGZ5Q2hhdENhcmQnLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLlRydXN0ZWRDYW5Nb2RmeUNoYXRDYXJkJyxcbiAgICBoaW50OiAnU0VUVElOR1MuVHJ1c3RlZENhbk1vZGZ5Q2hhdENhcmRIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9KVxuICAvKiogVHJ1c3RlZCBwbGF5ZXJzIHdpbGwgYmUgYWxsb3dlZCB0byBzZWUgY2hhdCBjYXJkcyBwcml2YXRlIHNlY3Rpb25zICovXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAndHJ1c3RlZENhblNlZUNoYXRDYXJkJywge1xuICAgIG5hbWU6ICdTRVRUSU5HUy5UcnVzdGVkQ2FuU2VlQ2hhdENhcmQnLFxuICAgIGhpbnQ6ICdTRVRUSU5HUy5UcnVzdGVkQ2FuU2VlQ2hhdENhcmRIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9KVxuICAvKiogU2V0IHRoZSBuZWVkIHRvIGRpc3BsYXkgYWN0b3IgaW1hZ2Ugb24gY2hhdCBjYXJkcyAqL1xuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2Rpc3BsYXlBY3Rvck9uQ2FyZCcsIHtcbiAgICBuYW1lOiAnU0VUVElOR1MuRGlzcGxheUFjdG9yT25DYXJkJyxcbiAgICBoaW50OiAnU0VUVElOR1MuRGlzcGxheUFjdG9yT25DYXJkSGludCcsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiB0cnVlLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHR5cGU6IEJvb2xlYW5cbiAgfSlcbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdkaXNwbGF5Q2hlY2tTdWNjZXNzTGV2ZWwnLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLkRpc3BsYXlDaGVja1N1Y2Nlc3NMZXZlbCcsXG4gICAgc2NvcGU6ICdjbGllbnQnLFxuICAgIGNvbmZpZzogdHJ1ZSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHR5cGU6IEJvb2xlYW5cbiAgfSlcbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdkaXNwbGF5UmVzdWx0VHlwZScsIHtcbiAgICBuYW1lOiAnU0VUVElOR1MuRGlzcGxheVJlc3VsdFR5cGUnLFxuICAgIHNjb3BlOiAnY2xpZW50JyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9KVxuICAvKiogU2V0IHRoZSB1c2Ugb2YgdG9rZW4gaW5zdGVhZCBvZiBwb3J0cmFpdHMgKi9cbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICd1c2VUb2tlbicsIHtcbiAgICBuYW1lOiAnU0VUVElOR1MuVXNlVG9rZW4nLFxuICAgIGhpbnQ6ICdTRVRUSU5HUy5Vc2VUb2tlbkhpbnQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogdHJ1ZSxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0pXG5cbiAgLyoqXG4gICAqIFNjZW5lIFNldHRpbmdzXG4gICAqL1xuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2VuYWJsZVN0YXR1c0ljb25zJywge1xuICAgIG5hbWU6ICdTRVRUSU5HUy5FbmFibGVTdGF0dXNJY29ucycsXG4gICAgaGludDogJ1NFVFRJTkdTLkVuYWJsZVN0YXR1c0ljb25zSGludCcsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiB0cnVlLFxuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9KVxuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2dyaWRTcGFjZXMnLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLlJlc3RyaWN0R3JpZFNwYWNlcycsXG4gICAgaGludDogJ1NFVFRJTkdTLlJlc3RyaWN0R3JpZFNwYWNlc0hpbnQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogdHJ1ZSxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0pXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnZGlzdGFuY2VFbGV2YXRpb24nLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLkNoZWNrRWxldmF0aW9uJyxcbiAgICBoaW50OiAnU0VUVElOR1MuQ2hlY2tFbGV2YXRpb25IaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0pXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnZGlzdGFuY2VUaGVhdHJlT2ZUaGVNaW5kJywge1xuICAgIG5hbWU6ICdTRVRUSU5HUy5TY2VuZURpc3RhbmNlTm90Q2FsY3VhbHRlZE5vRXJyb3InLFxuICAgIGhpbnQ6ICdTRVRUSU5HUy5TY2VuZURpc3RhbmNlTm90Q2FsY3VhbHRlZE5vRXJyb3JIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9KVxuICAvKiogRGVmYXVsdCBiZWhhdmlvciB3aGVuIE5QQyBpcyBjcmVhdGVkIG9uIGEgc2NlbmUgKi9cbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICd0b2tlbkRyb3BNb2RlJywge1xuICAgIG5hbWU6ICdTRVRUSU5HUy5Ub2tlbkRyb3BNb2RlJyxcbiAgICBoaW50OiAnU0VUVElOR1MuVG9rZW5Ecm9wTW9kZUhpbnQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogdHJ1ZSxcbiAgICBkZWZhdWx0OiAnYXNrJyxcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgY2hvaWNlczoge1xuICAgICAgYXNrOiAnU0VUVElOR1MuVG9rZW5Ecm9wTW9kZUFzaycsXG4gICAgICByb2xsOiAnU0VUVElOR1MuVG9rZW5Ecm9wTW9kZVJvbGwnLFxuICAgICAgYXZlcmFnZTogJ1NFVFRJTkdTLlRva2VuRHJvcE1vZGVBdmVyYWdlJyxcbiAgICAgIGlnbm9yZTogJ1NFVFRJTkdTLlRva2VuRHJvcE1vZGVJZ25vcmUnXG4gICAgfVxuICB9KVxuICAvKipcbiAgICogR2FtZSBBcnR3b3JrIFNldHRpbmdzXG4gICAqL1xuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ292ZXJyaWRlR2FtZUFydHdvcmsnLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLk92ZXJyaWRlR2FtZUFydHdvcmsnLFxuICAgIGhpbnQ6ICdTRVRUSU5HUy5PdmVycmlkZUdhbWVBcnR3b3JrSGludCcsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiB0cnVlLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHR5cGU6IEJvb2xlYW5cbiAgfSlcbiAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ292ZXJyaWRlR2FtZUFydHdvcmsnKSkge1xuICAgIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnYXJ0UGF1c2VJbWFnZScsIHtcbiAgICAgIG5hbWU6ICdTRVRUSU5HUy5BcnRQYXVzZUltYWdlJyxcbiAgICAgIGhpbnQ6ICdTRVRUSU5HUy5BcnRQYXVzZUltYWdlSGludCcsXG4gICAgICBzY29wZTogJ3dvcmxkJyxcbiAgICAgIGNvbmZpZzogdHJ1ZSxcbiAgICAgIGRlZmF1bHQ6ICdzeXN0ZW1zL0NvQzcvYXNzZXRzL2ljb25zL3RpbWUtdHJhcC5zdmcnLFxuICAgICAgdHlwZTogU3RyaW5nXG4gICAgfSlcbiAgICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2FydFBhdXNlVGV4dCcsIHtcbiAgICAgIG5hbWU6ICdTRVRUSU5HUy5BcnRQYXVzZVRleHQnLFxuICAgICAgaGludDogJ1NFVFRJTkdTLkFydFBhdXNlVGV4dEhpbnQnLFxuICAgICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgICBjb25maWc6IHRydWUsXG4gICAgICBkZWZhdWx0OiAnVGhlIEJsaW5kIElkaW90IEdvZCBpcyBkcmVhbWluZy4uLicsXG4gICAgICB0eXBlOiBTdHJpbmdcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFNoZWV0IHNldHRpbmdzXG4gICAqL1xuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2Rpc3BsYXlQbGF5ZXJOYW1lT25TaGVldCcsIHtcbiAgICBuYW1lOiAnU0VUVElOR1MuZGlzcGxheVBsYXllck5hbWVPblNoZWV0JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9KVxuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ3Rvb2xUaXBEZWxheScsIHtcbiAgICBuYW1lOiAnQ29DNy50b29sVGlwRGVsYXknLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogdHJ1ZSxcbiAgICBkZWZhdWx0OiAyMDAwLFxuICAgIHR5cGU6IE51bWJlclxuICB9KVxuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ3Nob3dJY29uc09ubHknLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLnNob3dJY29uc09ubHknLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogdHJ1ZSxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0pXG4gIC8qKiBBbGxvdyBwbGF5ZXIgdG8gdW5sb2NrIHRoZSBzaGVldCBvdXRzaWRlIG9mIGNyZWF0aW9uIG1vZGUgKi9cbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdwbGF5ZXJVbmxvY2tTaGVldE1vZGUnLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLlBsYXllclVubG9ja1NoZWV0TW9kZScsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiB0cnVlLFxuICAgIGRlZmF1bHQ6ICdhbHdheXMnLFxuICAgIHR5cGU6IFN0cmluZyxcbiAgICBjaG9pY2VzOiB7XG4gICAgICBhbHdheXM6ICdTRVRUSU5HUy5BbHdheXNFZGl0YWJsZScsXG4gICAgICBjcmVhdGlvbjogJ1NFVFRJTkdTLkNyZWF0aW9uTW9kZU9ubHknLFxuICAgICAgbmV2ZXI6ICdTRVRUSU5HUy5OZXZlckVkaXRhYmxlJ1xuICAgIH1cbiAgfSlcbiAgLyoqIEFsbG93IHBsYXllciB0byBtb2RpZnkgc3RhdHVzICovXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnc3RhdHVzUGxheWVyRWRpdGFibGUnLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLlN0YXR1c1BsYXllckVkaXRhYmxlJyxcbiAgICBoaW50OiAnU0VUVElOR1MuU3RhdHVzUGxheWVyRWRpdGFibGVIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0pXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnb25lQmxvY2tCYWNrc3RvcnknLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLk9uZUJsb2NrQmFja1N0b3J5JyxcbiAgICBoaW50OiAnU0VUVElOR1MuT25lQmxvY2tCYWNrU3RvcnlIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9KVxuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ292ZXJyaWRlU2hlZXRBcnR3b3JrJywge1xuICAgIG5hbWU6ICdTRVRUSU5HUy5PdmVycmlkZVNoZWV0QXJ0d29yaycsXG4gICAgaGludDogJ1NFVFRJTkdTLk92ZXJyaWRlU2hlZXRBcnR3b3JrSGludCcsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiB0cnVlLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHR5cGU6IEJvb2xlYW5cbiAgfSlcbiAgaWYgKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ292ZXJyaWRlU2hlZXRBcnR3b3JrJykpIHtcbiAgICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2FydFdvcmtTaGVldEJhY2tncm91bmQnLCB7XG4gICAgICBuYW1lOiAnU0VUVElOR1MuQXJ0V29ya1NoZWV0QmFja2dyb3VuZCcsXG4gICAgICBoaW50OiAnU0VUVElOR1MuQXJ0V29ya1NoZWV0QmFja2dyb3VuZEhpbnQnLFxuICAgICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgICBjb25maWc6IHRydWUsXG4gICAgICBkZWZhdWx0OiBcInVybCgnLi9hc3NldHMvaW1hZ2VzL2JhY2tncm91bmQud2VicCcpIDQgcmVwZWF0XCIsXG4gICAgICB0eXBlOiBTdHJpbmdcbiAgICB9KVxuICAgIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnYXJ0V29ya1NoZWV0QmFja2dyb3VuZFR5cGUnLCB7XG4gICAgICBuYW1lOiAnU0VUVElOR1MuQXJ0V29ya1NoZWV0QmFja2dyb3VuZFR5cGUnLFxuICAgICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgICBjb25maWc6IHRydWUsXG4gICAgICBkZWZhdWx0OiAnc2xpY2UnLFxuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgY2hvaWNlczoge1xuICAgICAgICBzbGljZTogJ1NFVFRJTkdTLkJhY2tncm91bmRTbGljZScsXG4gICAgICAgIGF1dG86ICdTRVRUSU5HUy5CYWNrZ3JvdW5kQXV0bycsXG4gICAgICAgIGNvbnRhaW46ICdTRVRUSU5HUy5CYWNrZ3JvdW5kQ29udGFpbicsXG4gICAgICAgIGNvdmVyOiAnU0VUVElOR1MuQmFja2dyb3VuZENvdmVyJ1xuICAgICAgfVxuICAgIH0pXG4gICAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdhcnRXb3JrT3RoZXJTaGVldEJhY2tncm91bmQnLCB7XG4gICAgICBuYW1lOiAnU0VUVElOR1MuQXJ0V29ya090aGVyU2hlZXRCYWNrZ3JvdW5kJyxcbiAgICAgIGhpbnQ6ICdTRVRUSU5HUy5BcnRXb3JrT3RoZXJTaGVldEJhY2tncm91bmRIaW50JyxcbiAgICAgIHNjb3BlOiAnd29ybGQnLFxuICAgICAgY29uZmlnOiB0cnVlLFxuICAgICAgZGVmYXVsdDogXCJ1cmwoICcuL2Fzc2V0cy9pbWFnZXMvYmFja2dyb3VuZC53ZWJwJylcIixcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH0pXG4gICAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdhcnR3b3JrU2hlZXRJbWFnZScsIHtcbiAgICAgIG5hbWU6ICdTRVRUSU5HUy5BcnR3b3JrU2hlZXRJbWFnZScsXG4gICAgICBoaW50OiAnU0VUVElOR1MuQXJ0d29ya1NoZWV0SW1hZ2VIaW50JyxcbiAgICAgIHNjb3BlOiAnd29ybGQnLFxuICAgICAgY29uZmlnOiB0cnVlLFxuICAgICAgZGVmYXVsdDogXCJ1cmwoJy4vYXNzZXRzL2ltYWdlcy90ZW50YWNsZXMud2VicCcpXCIsXG4gICAgICB0eXBlOiBTdHJpbmdcbiAgICB9KVxuICAgIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnYXJ0d29ya0Zyb250Q29sb3InLCB7XG4gICAgICBuYW1lOiAnU0VUVElOR1MuQXJ0d29ya0Zyb250Q29sb3InLFxuICAgICAgaGludDogJ1NFVFRJTkdTLkFydHdvcmtGcm9udENvbG9ySGludCcsXG4gICAgICBzY29wZTogJ3dvcmxkJyxcbiAgICAgIGNvbmZpZzogdHJ1ZSxcbiAgICAgIGRlZmF1bHQ6ICdyZ2JhKDQzLDU1LDgzLDEpJyxcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH0pXG4gICAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdhcnR3b3JrQmFja2dyb3VuZENvbG9yJywge1xuICAgICAgbmFtZTogJ1NFVFRJTkdTLkFydHdvcmtCYWNrZ3JvdW5kQ29sb3InLFxuICAgICAgaGludDogJ1NFVFRJTkdTLkFydHdvcmtCYWNrZ3JvdW5kQ29sb3JIaW50JyxcbiAgICAgIHNjb3BlOiAnd29ybGQnLFxuICAgICAgY29uZmlnOiB0cnVlLFxuICAgICAgZGVmYXVsdDogJ3JnYmEoMTAzLDExLDExLDEpJyxcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH0pXG4gICAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdhcnR3b3JrSW50ZXJhY3RpdmVDb2xvcicsIHtcbiAgICAgIG5hbWU6ICdTRVRUSU5HUy5BcnR3b3JrSW50ZXJhY3RpdmVDb2xvcicsXG4gICAgICBoaW50OiAnU0VUVElOR1MuQXJ0d29ya0ludGVyYWN0aXZlQ29sb3JIaW50JyxcbiAgICAgIHNjb3BlOiAnd29ybGQnLFxuICAgICAgY29uZmlnOiB0cnVlLFxuICAgICAgZGVmYXVsdDogJ3JnYmEoMTAzLDExLDExLDEpJyxcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH0pXG4gICAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdhcnR3b3JrRml4ZWRTa2lsbExlbmd0aCcsIHtcbiAgICAgIG5hbWU6ICdTRVRUSU5HUy5BcnR3b3JrRml4ZWRTa2lsbExlbmd0aCcsXG4gICAgICBoaW50OiAnU0VUVElOR1MuQXJ0d29ya0ZpeGVkU2tpbGxMZW5ndGhIaW50JyxcbiAgICAgIHNjb3BlOiAnd29ybGQnLFxuICAgICAgY29uZmlnOiB0cnVlLFxuICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgIHR5cGU6IEJvb2xlYW5cbiAgICB9KVxuICAgIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnYXJ0d29ya01haW5Gb250Jywge1xuICAgICAgbmFtZTogJ1NFVFRJTkdTLkFydHdvcmtNYWluRm9udCcsXG4gICAgICBzY29wZTogJ3dvcmxkJyxcbiAgICAgIGNvbmZpZzogdHJ1ZSxcbiAgICAgIGRlZmF1bHQ6ICcnLFxuICAgICAgdHlwZTogU3RyaW5nXG4gICAgfSlcbiAgICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2FydHdvcmtNYWluRm9udEJvbGQnLCB7XG4gICAgICBuYW1lOiAnU0VUVElOR1MuQXJ0d29ya01haW5Gb250Qm9sZCcsXG4gICAgICBzY29wZTogJ3dvcmxkJyxcbiAgICAgIGNvbmZpZzogdHJ1ZSxcbiAgICAgIGRlZmF1bHQ6ICcnLFxuICAgICAgdHlwZTogU3RyaW5nXG4gICAgfSlcbiAgICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2FydHdvcmtNYWluRm9udFNpemUnLCB7XG4gICAgICBuYW1lOiAnU0VUVElOR1MuQXJ0d29ya01haW5Gb250U2l6ZScsXG4gICAgICBzY29wZTogJ3dvcmxkJyxcbiAgICAgIGNvbmZpZzogdHJ1ZSxcbiAgICAgIGRlZmF1bHQ6IDE2LFxuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgb25DaGFuZ2U6IHNpemUgPT4gX3NldFJvb3RGb250U2l6ZShzaXplKVxuICAgIH0pXG5cbiAgICBmdW5jdGlvbiBfc2V0Um9vdEZvbnRTaXplIChzaXplKSB7XG4gICAgICAkKCc6cm9vdCcpLmNzcygnZm9udC1zaXplJywgc2l6ZSlcbiAgICAgIHVpLnNpZGViYXIucmVuZGVyKHRydWUpXG4gICAgICBmb3IgKGNvbnN0IFssIHddIG9mIE9iamVjdC5lbnRyaWVzKHVpLndpbmRvd3MpKSB7XG4gICAgICAgIHcucmVuZGVyKHRydWUpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFdlYXBvbnNcbiAgICovXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnZGlzcmVnYXJkVXNlUGVyUm91bmQnLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLkRpc3JlZ2FyZFVzZVBlclJvdW5kJyxcbiAgICBoaW50OiAnU0VUVElOR1MuRGlzcmVnYXJkVXNlUGVyUm91bmRIaW50JyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhblxuICB9KVxuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2Rpc3JlZ2FyZEFtbW8nLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLkRpc3JlZ2FyZEFtbW8nLFxuICAgIGhpbnQ6ICdTRVRUSU5HUy5EaXNyZWdhcmRBbW1vSGludCcsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiB0cnVlLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHR5cGU6IEJvb2xlYW5cbiAgfSlcblxuICAvKipcbiAgICogQ2hhc2VzXG4gICAqL1xuICAvLyBNT1ZFRCBUTyBDSEFTU0UgSU5ESVZJRFVBTCBTRVRUSU5HXG4gIC8vIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnY2hhc2VTaG93VG9rZW5Nb3ZlbWVudCcsIHtcbiAgLy8gICBuYW1lOiAnU0VUVElOR1MuQ2hhc2VTaG93VG9rZW5Nb3ZlbWVudCcsXG4gIC8vICAgaGludDogJ1NFVFRJTkdTLkNoYXNlU2hvd1Rva2VuTW92ZW1lbnRIaW50JyxcbiAgLy8gICBzY29wZTogJ3dvcmxkJyxcbiAgLy8gICBjb25maWc6IHRydWUsXG4gIC8vICAgZGVmYXVsdDogdHJ1ZSxcbiAgLy8gICB0eXBlOiBCb29sZWFuXG4gIC8vIH0pXG5cbiAgLyoqXG4gICAqIERpY2UgU28gTmljZVxuICAgKi9cbiAgaWYgKGdhbWUubW9kdWxlcy5nZXQoJ2RpY2Utc28tbmljZScpPy5hY3RpdmUpIHtcbiAgICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ3N5bmNEaWNlM2QnLCB7XG4gICAgICBuYW1lOiAnU0VUVElOR1MuU3luY0RpY2UzRCcsXG4gICAgICBoaW50OiAnU0VUVElOR1MuU3luY0RpY2UzREhpbnQnLFxuICAgICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgICBjb25maWc6IHRydWUsXG4gICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgdHlwZTogQm9vbGVhblxuICAgIH0pXG4gICAgY29uc3QgW3ZlcnNpb25dID0gZ2FtZS5tb2R1bGVzLmdldCgnZGljZS1zby1uaWNlJyk/LnZlcnNpb24uc3BsaXQoJy4nKVxuICAgIGlmICghaXNOYU4oTnVtYmVyKHZlcnNpb24pKSAmJiBOdW1iZXIodmVyc2lvbikgPj0gMykge1xuICAgICAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICd0ZW5EaWVCb251cycsIHtcbiAgICAgICAgbmFtZTogJ1NFVFRJTkdTLlRlbkRpZUJvbnVzJyxcbiAgICAgICAgaGludDogJ1NFVFRJTkdTLlRlbkRpZUJvbnVzSGludCcsXG4gICAgICAgIHNjb3BlOiAnY2xpZW50JyxcbiAgICAgICAgY29uZmlnOiB0cnVlLFxuICAgICAgICBkZWZhdWx0OiAnYnJvbnplJyxcbiAgICAgICAgdHlwZTogU3RyaW5nXG4gICAgICB9KVxuICAgICAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICd0ZW5EaWVQZW5hbHR5Jywge1xuICAgICAgICBuYW1lOiAnU0VUVElOR1MuVGVuRGllUGVuYWx0eScsXG4gICAgICAgIGhpbnQ6ICdTRVRUSU5HUy5UZW5EaWVQZW5hbHR5SGludCcsXG4gICAgICAgIHNjb3BlOiAnY2xpZW50JyxcbiAgICAgICAgY29uZmlnOiB0cnVlLFxuICAgICAgICBkZWZhdWx0OiAnYmxvb2Rtb29uJyxcbiAgICAgICAgdHlwZTogU3RyaW5nXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXZlbG9wZXIgYW5kIGRlYnVnIHNldHRpbmdzXG4gICAqL1xuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2RlYnVnbW9kZScsIHtcbiAgICBuYW1lOiAnU0VUVElOR1MuRGVidWdNb2RlJyxcbiAgICBoaW50OiAnU0VUVElOR1MuRGVidWdNb2RlSGludCcsXG4gICAgc2NvcGU6ICdjbGllbnQnLFxuICAgIGNvbmZpZzogdHJ1ZSxcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IGZhbHNlXG4gIH0pXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnZXhwZXJpbWVudGFsRmVhdHVyZXMnLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLlNob3dFeHBlcmltZW50YWxGZWF0dXJlcycsXG4gICAgaGludDogJ1NFVFRJTkdTLlNob3dFeHBlcmltZW50YWxGZWF0dXJlc0hpbnQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogdHJ1ZSxcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IGZhbHNlXG4gIH0pXG4gIC8qKlxuICAgKiBPdGhlciBzZXR0aW5nc1xuICAgKi9cbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdoaWRkZW5kZXZtZW51Jywge1xuICAgIG5hbWU6ICdIaWRkZW4gZGV2IG1lbnUnLFxuICAgIGhpbnQ6ICdVc2UgYXQgeW91ciBvd24gcmlzaycsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiBmYWxzZSxcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IGZhbHNlXG4gIH0pXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnZGV2ZWxvcG1lbnRFbmFibGVkJywge1xuICAgIG5hbWU6ICdEZXYgcGhhc2VkIGFsbG93ZWQnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogZmFsc2UsXG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiBmYWxzZVxuICB9KVxuICAvKiogRmVhdDogd2VsY29tZSBtZXNzYWdlICovXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnc2hvd1dlbGNvbWVNZXNzYWdlJywge1xuICAgIG5hbWU6ICdTRVRUSU5HUy5zaG93V2VsY29tZU1lc3NhZ2UnLFxuICAgIGhpbnQ6ICdTRVRUSU5HUy5zaG93V2VsY29tZU1lc3NhZ2UnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogZmFsc2UsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0eXBlOiBCb29sZWFuXG4gIH0pXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnY2hhckNyZWF0aW9uRW5hYmxlZCcsIHtcbiAgICBuYW1lOiAnQ2hhciBjcmVhdGlvbiBhbGxvd2VkJyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IGZhbHNlLFxuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfSlcbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdzeXN0ZW1VcGRhdGVWZXJzaW9uJywge1xuICAgIG5hbWU6ICdTeXN0ZW0gdXBkYXRlIHZlcnNpb24nLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogZmFsc2UsXG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICcwJ1xuICB9KVxuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ3N5c3RlbVVwZGF0ZWRNb2R1bGVWZXJzaW9uJywge1xuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogZmFsc2UsXG4gICAgZGVmYXVsdDoge31cbiAgfSlcbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICd4cEVuYWJsZWQnLCB7XG4gICAgbmFtZTogJ0VuYWJsZSBYUCBnYWluJyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IGZhbHNlLFxuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9KVxuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ3Nob3dJbnN0cnVjdGlvbnMnLCB7XG4gICAgbmFtZTogJ1Nob3cgY2hhbmdlbG9nL2luc3RydWN0aW9ucycsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiBmYWxzZSxcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJzAnXG4gIH0pXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnSW52ZXN0aWdhdG9yV2l6YXJkU2V0dXAnLCB7XG4gICAgbmFtZTogJ0ZvcmNlIHNwZWNpZmljIHNldHVwIENvQyBJRCBmb3IgSW52ZXN0aWdhdG9yIFdpemFyZCcsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiBmYWxzZSxcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJydcbiAgfSlcbiAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdJbnZlc3RpZ2F0b3JXaXphcmRRdWFudGl0eScsIHtcbiAgICBuYW1lOiAnTnVtYmVyIG9mIGludmVzdGlnYXRvcnMgYSBzaW5nbGUgdXNlciB3aXRob3V0IGNyZWF0ZSBhY3RvciByaWdodHMgY2FuIG93bicsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiBmYWxzZSxcbiAgICB0eXBlOiBOdW1iZXIsXG4gICAgZGVmYXVsdDogMFxuICB9KVxuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ0ludmVzdGlnYXRvcldpemFyZE93bmVyc2hpcCcsIHtcbiAgICBuYW1lOiAnRGVmYXVsdCBwZXJtaXNzaW9ucyBmb3Igbm9uIG93bmVyIHBsYXllcnMnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogZmFsc2UsXG4gICAgdHlwZTogTnVtYmVyLFxuICAgIGRlZmF1bHQ6IENPTlNULkRPQ1VNRU5UX09XTkVSU0hJUF9MRVZFTFMuTk9ORVxuICB9KVxuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ0ludmVzdGlnYXRvcldpemFyZFJlcm9sbHMnLCB7XG4gICAgbmFtZTogJ0FsbG93IHBsYXllcnMgdG8gcmVyb2xsIGNoYXJhY3RlcmlzdGljcycsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiBmYWxzZSxcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IGZhbHNlXG4gIH0pXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnSW52ZXN0aWdhdG9yV2l6YXJkUG9pbnRCdXknLCB7XG4gICAgbmFtZTogJ0ZvcmNlIHBvaW50IGJ1eSBpbnN0ZWFkIG9mIHNldHVwIGNob2ljZScsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiBmYWxzZSxcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IGZhbHNlXG4gIH0pXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnSW52ZXN0aWdhdG9yV2l6YXJkUXVpY2tGaXJlJywge1xuICAgIG5hbWU6ICdRdWljayBmaXJlIHNldHVwIHZhbHVlcycsXG4gICAgc2NvcGU6ICd3b3JsZCcsXG4gICAgY29uZmlnOiBmYWxzZSxcbiAgICB0eXBlOiBBcnJheSxcbiAgICBkZWZhdWx0OiBbXVxuICB9KVxuICAvKiogU2V0IGFuIGluaXRpYXRpdmUgZm9ybXVsYSBmb3IgdGhlIHN5c3RlbSAqL1xuICBDT05GSUcuQ29tYmF0LmluaXRpYXRpdmUgPSB7XG4gICAgZm9ybXVsYTogJ0BjaGFyYWN0ZXJpc3RpY3MuZGV4LnZhbHVlJyxcbiAgICBkZWNpbWFsczogNFxuICB9XG4gIENPTkZJRy5kZWJ1Zy5ob29rcyA9ICEhZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnZGVidWdtb2RlJylcbiAgQ09ORklHLkRpY2UudGVybXMudCA9IENvQzdEZWNhZGVyRGllXG4gIENPTkZJRy5EaWNlLnRlcm1zLm8gPSBDb0M3RGVjYWRlckRpZU90aGVyXG59XG4iLCIvKiBnbG9iYWwgQWN0b3JzLCBBY3RvclNoZWV0LCBJdGVtcywgSXRlbVNoZWV0LCBKb3VybmFsLCBKb3VybmFsU2hlZXQsIE1hY3JvQ29uZmlnLCBNYWNyb3MsIFBsYXlsaXN0Q29uZmlnLCBQbGF5bGlzdHMsIFJvbGxUYWJsZXMsIFJvbGxUYWJsZUNvbmZpZywgU2NlbmVzLCBTY2VuZUNvbmZpZyAqL1xuaW1wb3J0IHsgQ29DN0FyY2hldHlwZVNoZWV0IH0gZnJvbSAnLi4vaXRlbXMvc2hlZXRzL2FyY2hldHlwZS5qcydcbmltcG9ydCB7IENvQzdCb29rU2hlZXQgfSBmcm9tICcuLi9pdGVtcy9ib29rL3NoZWV0LmpzJ1xuaW1wb3J0IHsgQ29DN0NoYXJhY3RlclNoZWV0IH0gZnJvbSAnLi4vYWN0b3JzL3NoZWV0cy9jaGFyYWN0ZXIuanMnXG5pbXBvcnQgeyBDb0M3Q29udGFpbmVyU2hlZXQgfSBmcm9tICcuLi9hY3RvcnMvc2hlZXRzL2NvbnRhaW5lci5qcydcbmltcG9ydCB7IENvQzdDaGFzZVNoZWV0IH0gZnJvbSAnLi4vaXRlbXMvY2hhc2Uvc2hlZXQuanMnXG5pbXBvcnQgeyBDb0M3Q3JlYXR1cmVTaGVldCB9IGZyb20gJy4uL2FjdG9ycy9zaGVldHMvY3JlYXR1cmUtc2hlZXQuanMnXG5pbXBvcnQgeyBDb0M3SXRlbVNoZWV0IH0gZnJvbSAnLi4vaXRlbXMvc2hlZXRzL2l0ZW0tc2hlZXQuanMnXG5pbXBvcnQgeyBDb0M3SXRlbVNoZWV0VjIgfSBmcm9tICcuLi9pdGVtcy9zaGVldHMvaXRlbS1zaGVldFYyLmpzJ1xuaW1wb3J0IHsgQ29DN0pvdXJuYWxTaGVldCB9IGZyb20gJy4uL3NoZWV0cy9jb2M3LWpvdXJuYWwtc2hlZXQuanMnXG5pbXBvcnQgeyBDb0M3TWFjcm9Db25maWcgfSBmcm9tICcuLi9zaGVldHMvY29jNy1tYWNyby1jb25maWcuanMnXG5pbXBvcnQgeyBDb0M3TlBDU2hlZXQgfSBmcm9tICcuLi9hY3RvcnMvc2hlZXRzL25wYy1zaGVldC5qcydcbmltcG9ydCB7IENvQzdPY2N1cGF0aW9uU2hlZXQgfSBmcm9tICcuLi9pdGVtcy9zaGVldHMvb2NjdXBhdGlvbi5qcydcbmltcG9ydCB7IENvQzdQbGF5bGlzdENvbmZpZyB9IGZyb20gJy4uL3NoZWV0cy9jb2M3LXBsYXlsaXN0LWNvbmZpZy5qcydcbmltcG9ydCB7IENvQzdSb2xsVGFibGVDb25maWcgfSBmcm9tICcuLi9zaGVldHMvY29jNy1yb2xsLXRhYmxlLWNvbmZpZy5qcydcbmltcG9ydCB7IENvQzdTY2VuZUNvbmZpZyB9IGZyb20gJy4uL3NoZWV0cy9jb2M3LXNjZW5lLWNvbmZpZy5qcydcbmltcG9ydCB7IENvQzdTZXR1cFNoZWV0IH0gZnJvbSAnLi4vaXRlbXMvc2hlZXRzL3NldHVwLmpzJ1xuaW1wb3J0IHsgQ29DN1NraWxsU2hlZXQgfSBmcm9tICcuLi9pdGVtcy9zaGVldHMvc2tpbGwuanMnXG5pbXBvcnQgeyBDb0M3U3BlbGxTaGVldCB9IGZyb20gJy4uL2l0ZW1zL3NwZWxsL3NoZWV0LmpzJ1xuaW1wb3J0IHsgQ29DN1N0YXR1c1NoZWV0IH0gZnJvbSAnLi4vaXRlbXMvc2hlZXRzL3N0YXR1cy5qcydcbmltcG9ydCB7IENvQzdUYWxlbnRTaGVldCB9IGZyb20gJy4uL2l0ZW1zL3NoZWV0cy90YWxlbnQuanMnXG5pbXBvcnQgeyBDb0M3VmVoaWNsZVNoZWV0IH0gZnJvbSAnLi4vYWN0b3JzL3NoZWV0cy92ZWhpY2xlLmpzJ1xuaW1wb3J0IHsgQ29DN1dlYXBvblNoZWV0IH0gZnJvbSAnLi4vaXRlbXMvc2hlZXRzL3dlYXBvbi1zaGVldC5qcydcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyU2hlZXRzICgpIHtcbiAgQWN0b3JzLnVucmVnaXN0ZXJTaGVldCgnY29yZScsIEFjdG9yU2hlZXQpXG4gIEFjdG9ycy5yZWdpc3RlclNoZWV0KCdDb0M3JywgQ29DN05QQ1NoZWV0LCB7XG4gICAgdHlwZXM6IFsnbnBjJ10sXG4gICAgbWFrZURlZmF1bHQ6IHRydWVcbiAgfSlcbiAgQWN0b3JzLnJlZ2lzdGVyU2hlZXQoJ0NvQzcnLCBDb0M3VmVoaWNsZVNoZWV0LCB7XG4gICAgdHlwZXM6IFsndmVoaWNsZSddLFxuICAgIG1ha2VEZWZhdWx0OiB0cnVlXG4gIH0pXG4gIEFjdG9ycy5yZWdpc3RlclNoZWV0KCdDb0M3JywgQ29DN0NyZWF0dXJlU2hlZXQsIHtcbiAgICB0eXBlczogWydjcmVhdHVyZSddLFxuICAgIG1ha2VEZWZhdWx0OiB0cnVlXG4gIH0pXG4gIEFjdG9ycy5yZWdpc3RlclNoZWV0KCdDb0M3JywgQ29DN0NvbnRhaW5lclNoZWV0LCB7XG4gICAgdHlwZXM6IFsnY29udGFpbmVyJ10sXG4gICAgbWFrZURlZmF1bHQ6IHRydWVcbiAgfSlcbiAgQWN0b3JzLnJlZ2lzdGVyU2hlZXQoJ0NvQzcnLCBDb0M3Q2hhcmFjdGVyU2hlZXQsIHtcbiAgICB0eXBlczogWydjaGFyYWN0ZXInXSxcbiAgICBtYWtlRGVmYXVsdDogdHJ1ZVxuICB9KVxuXG4gIEl0ZW1zLnVucmVnaXN0ZXJTaGVldCgnY29yZScsIEl0ZW1TaGVldClcbiAgSXRlbXMucmVnaXN0ZXJTaGVldCgnQ29DNycsIENvQzdTa2lsbFNoZWV0LCB7XG4gICAgdHlwZXM6IFsnc2tpbGwnXSxcbiAgICBtYWtlRGVmYXVsdDogdHJ1ZVxuICB9KVxuICBJdGVtcy5yZWdpc3RlclNoZWV0KCdDb0M3JywgQ29DN1dlYXBvblNoZWV0LCB7XG4gICAgdHlwZXM6IFsnd2VhcG9uJ10sXG4gICAgbWFrZURlZmF1bHQ6IHRydWVcbiAgfSlcbiAgSXRlbXMucmVnaXN0ZXJTaGVldCgnQ29DNycsIENvQzdCb29rU2hlZXQsIHtcbiAgICB0eXBlczogWydib29rJ10sXG4gICAgbWFrZURlZmF1bHQ6IHRydWVcbiAgfSlcbiAgSXRlbXMucmVnaXN0ZXJTaGVldCgnQ29DNycsIENvQzdTcGVsbFNoZWV0LCB7XG4gICAgdHlwZXM6IFsnc3BlbGwnXSxcbiAgICBtYWtlRGVmYXVsdDogdHJ1ZVxuICB9KVxuICBJdGVtcy5yZWdpc3RlclNoZWV0KCdDb0M3JywgQ29DN1RhbGVudFNoZWV0LCB7XG4gICAgdHlwZXM6IFsndGFsZW50J10sXG4gICAgbWFrZURlZmF1bHQ6IHRydWVcbiAgfSlcbiAgSXRlbXMucmVnaXN0ZXJTaGVldCgnQ29DNycsIENvQzdTdGF0dXNTaGVldCwge1xuICAgIHR5cGVzOiBbJ3N0YXR1cyddLFxuICAgIG1ha2VEZWZhdWx0OiB0cnVlXG4gIH0pXG4gIEl0ZW1zLnJlZ2lzdGVyU2hlZXQoJ0NvQzcnLCBDb0M3T2NjdXBhdGlvblNoZWV0LCB7XG4gICAgdHlwZXM6IFsnb2NjdXBhdGlvbiddLFxuICAgIG1ha2VEZWZhdWx0OiB0cnVlXG4gIH0pXG4gIEl0ZW1zLnJlZ2lzdGVyU2hlZXQoJ0NvQzcnLCBDb0M3QXJjaGV0eXBlU2hlZXQsIHtcbiAgICB0eXBlczogWydhcmNoZXR5cGUnXSxcbiAgICBtYWtlRGVmYXVsdDogdHJ1ZVxuICB9KVxuICBJdGVtcy5yZWdpc3RlclNoZWV0KCdDb0M3JywgQ29DN1NldHVwU2hlZXQsIHtcbiAgICB0eXBlczogWydzZXR1cCddLFxuICAgIG1ha2VEZWZhdWx0OiB0cnVlXG4gIH0pXG4gIEl0ZW1zLnJlZ2lzdGVyU2hlZXQoJ0NvQzcnLCBDb0M3Q2hhc2VTaGVldCwge1xuICAgIHR5cGVzOiBbJ2NoYXNlJ10sXG4gICAgbWFrZURlZmF1bHQ6IHRydWVcbiAgfSlcbiAgSXRlbXMucmVnaXN0ZXJTaGVldCgnQ29DNycsIENvQzdJdGVtU2hlZXQsIHsgdHlwZXM6IFsnaXRlbSddIH0pXG4gIEl0ZW1zLnJlZ2lzdGVyU2hlZXQoJ0NvQzcnLCBDb0M3SXRlbVNoZWV0VjIsIHtcbiAgICB0eXBlczogWydpdGVtJ10sXG4gICAgbWFrZURlZmF1bHQ6IHRydWVcbiAgfSlcblxuICBTY2VuZXMudW5yZWdpc3RlclNoZWV0KCdjb3JlJywgU2NlbmVDb25maWcpXG4gIFNjZW5lcy5yZWdpc3RlclNoZWV0KCdDb0M3JywgQ29DN1NjZW5lQ29uZmlnLCB7XG4gICAgbWFrZURlZmF1bHQ6IHRydWVcbiAgfSlcblxuICBKb3VybmFsLnVucmVnaXN0ZXJTaGVldCgnY29yZScsIEpvdXJuYWxTaGVldClcbiAgSm91cm5hbC5yZWdpc3RlclNoZWV0KCdDb0M3JywgQ29DN0pvdXJuYWxTaGVldCwge1xuICAgIG1ha2VEZWZhdWx0OiB0cnVlXG4gIH0pXG5cbiAgUm9sbFRhYmxlcy51bnJlZ2lzdGVyU2hlZXQoJ2NvcmUnLCBSb2xsVGFibGVDb25maWcpXG4gIFJvbGxUYWJsZXMucmVnaXN0ZXJTaGVldCgnQ29DNycsIENvQzdSb2xsVGFibGVDb25maWcsIHtcbiAgICBtYWtlRGVmYXVsdDogdHJ1ZVxuICB9KVxuXG4gIE1hY3Jvcy51bnJlZ2lzdGVyU2hlZXQoJ2NvcmUnLCBNYWNyb0NvbmZpZylcbiAgTWFjcm9zLnJlZ2lzdGVyU2hlZXQoJ0NvQzcnLCBDb0M3TWFjcm9Db25maWcsIHtcbiAgICBtYWtlRGVmYXVsdDogdHJ1ZVxuICB9KVxuXG4gIFBsYXlsaXN0cy51bnJlZ2lzdGVyU2hlZXQoJ2NvcmUnLCBQbGF5bGlzdENvbmZpZylcbiAgUGxheWxpc3RzLnJlZ2lzdGVyU2hlZXQoJ0NvQzcnLCBDb0M3UGxheWxpc3RDb25maWcsIHtcbiAgICBtYWtlRGVmYXVsdDogdHJ1ZVxuICB9KVxufVxuIiwiLyogZ2xvYmFsIGdhbWUsIEhhbmRsZWJhcnMgKi9cbmltcG9ydCB7IGNoYXRIZWxwZXIgfSBmcm9tICcuLi9jaGF0L2hlbHBlci5qcydcbmltcG9ydCB7IENvQzdDaGVjayB9IGZyb20gJy4uL2NoZWNrLmpzJ1xuXG5leHBvcnQgY29uc3QgaGFuZGxlYmFyc0hlbHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcigncm9sbEFjdG9ySW1nJywgZnVuY3Rpb24gKGFjdG9yS2V5KSB7XG4gICAgY29uc3QgaW1nID0gY2hhdEhlbHBlci5nZXRBY3RvckltZ0Zyb21LZXkoYWN0b3JLZXkpXG4gICAgaWYgKGltZykgcmV0dXJuIGltZ1xuICAgIHJldHVybiAnLi4vaWNvbnMvc3ZnL215c3RlcnktbWFuLWJsYWNrLnN2ZydcbiAgfSlcbiAgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignbG9jYWxpemVSb2xsTmFtZScsIGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgY29uc3QgZGlmZmljdWx0eSA9IG9wdGlvbnMuaGFzaC5kaWZmaWN1bHR5ID09PSBDb0M3Q2hlY2suZGlmZmljdWx0eUxldmVsLnJlZ3VsYXIgPyBmYWxzZSA6IENvQzdDaGVjay5kaWZmaWN1bHR5U3RyaW5nKG9wdGlvbnMuaGFzaC5kaWZmaWN1bHR5KVxuICAgIGNvbnN0IG1vZGlmaWVyID0gKG9wdGlvbnMuaGFzaC5tb2RpZmllciA+IDAgPyBgKyR7b3B0aW9ucy5oYXNoLm1vZGlmaWVyfWAgOiBvcHRpb25zLmhhc2gubW9kaWZpZXIgPCAwID8gb3B0aW9ucy5oYXNoLm1vZGlmaWVyLnRvU3RyaW5nKCkgOiBmYWxzZSlcbiAgICByZXR1cm4gZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5MaW5rQ2hlY2snICsgKCFkaWZmaWN1bHR5ID8gJycgOiAnRGlmZicpICsgKCFtb2RpZmllciA/ICcnIDogJ01vZGlmJykgKyAoIW9wdGlvbnMuaGFzaC5wdXNoaW5nID8gJycgOiAnUHVzaGluZycpLCB7IGRpZmZpY3VsdHksIG1vZGlmaWVyLCBuYW1lOiBvcHRpb25zLmhhc2gubmFtZSB9KVxuICB9KVxufVxuIiwiLyogZ2xvYmFsIEhvb2tzICovXG5leHBvcnQgZnVuY3Rpb24gbGlzdGVuICgpIHtcbiAgSG9va3Mub25jZSgnZGljZVNvTmljZVJlYWR5JywgZGljZTNkID0+IHtcbiAgICBmb3IgKGNvbnN0IHN5c3RlbSBpbiBkaWNlM2QuRGljZUZhY3Rvcnkuc3lzdGVtcykge1xuICAgICAgY29uc3QgZDEwMCA9IGRpY2UzZC5EaWNlRmFjdG9yeS5zeXN0ZW1zW3N5c3RlbV0uZGljZS5maW5kKGQgPT4gZC50eXBlID09PSAnZDEwMCcpXG4gICAgICBpZiAodHlwZW9mIGQxMDAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGljZTNkLkRpY2VGYWN0b3J5LnN5c3RlbXNbc3lzdGVtXS5kaWNlLmZpbmQoZCA9PiBkLnR5cGUgPT09ICdkdCcpID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGNvbnN0IGRpY2VEZWNhZGVyID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihkMTAwKSksIGQxMDApXG4gICAgICAgICAgZGljZURlY2FkZXIudHlwZSA9ICdkdCdcbiAgICAgICAgICBkaWNlM2QuRGljZUZhY3Rvcnkuc3lzdGVtc1tzeXN0ZW1dLmRpY2UucHVzaChkaWNlRGVjYWRlcilcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGRpY2UzZC5EaWNlRmFjdG9yeS5zeXN0ZW1zW3N5c3RlbV0uZGljZS5maW5kKGQgPT4gZC50eXBlID09PSAnZG8nKSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBjb25zdCBkaWNlRGVjYWRlciA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YoZDEwMCkpLCBkMTAwKVxuICAgICAgICAgIGRpY2VEZWNhZGVyLnR5cGUgPSAnZG8nXG4gICAgICAgICAgZGljZTNkLkRpY2VGYWN0b3J5LnN5c3RlbXNbc3lzdGVtXS5kaWNlLnB1c2goZGljZURlY2FkZXIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pXG59XG4iLCIvKiBnbG9iYWwgJCwgZ2FtZSAqL1xuZXhwb3J0IGNsYXNzIENvQzdUb29sdGlwcyB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLlRvb2xUaXBIb3ZlciA9IG51bGxcbiAgICB0aGlzLnRvb2xUaXBUaW1lciA9IG51bGxcbiAgfVxuXG4gIGRpc3BsYXlUb29sVGlwICh0b29sVGlwKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLlRvb2xUaXBIb3ZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IGJvdW5kcyA9IHRoaXMuVG9vbFRpcEhvdmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICBpZiAoIWlzTmFOKGJvdW5kcy5sZWZ0IHx8ICcnKSAmJiAhaXNOYU4oYm91bmRzLnRvcCB8fCAnJykpIHtcbiAgICAgICAgbGV0IGxlZnQgPSBib3VuZHMubGVmdFxuICAgICAgICBsZXQgdG9wID0gYm91bmRzLnRvcFxuICAgICAgICBjb25zdCBoZWlnaHRUZXh0ID0gJCh0aGlzLlRvb2xUaXBIb3Zlcikub3V0ZXJIZWlnaHQoKVxuICAgICAgICAkKCdib2R5JykuYXBwZW5kKCc8ZGl2IGlkPVwiaGVscC10b29sdGlwXCI+JyArIHRvb2xUaXAgKyAnPC9kaXY+JylcbiAgICAgICAgY29uc3QgdGlwID0gJCgnI2hlbHAtdG9vbHRpcCcpXG4gICAgICAgIGNvbnN0IGhlaWdodFRpcCA9IHRpcC5vdXRlckhlaWdodCgpXG4gICAgICAgIGNvbnN0IHdpZHRoVGlwID0gdGlwLm91dGVyV2lkdGgoKVxuICAgICAgICBpZiAod2luZG93LmlubmVySGVpZ2h0IDwgaGVpZ2h0VGV4dCAqIDEuNSArIGhlaWdodFRpcCArIHRvcCkge1xuICAgICAgICAgIHRvcCA9IHRvcCAtIGhlaWdodFRpcFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRvcCA9IHRvcCArIGhlaWdodFRleHQgKiAxLjVcbiAgICAgICAgfVxuICAgICAgICBpZiAod2luZG93LmlubmVyV2lkdGggPCB3aWR0aFRpcCArIGxlZnQpIHtcbiAgICAgICAgICBsZWZ0ID0gd2luZG93LmlubmVyV2lkdGggLSB3aWR0aFRpcFxuICAgICAgICB9XG4gICAgICAgIHRpcC5jc3Moe1xuICAgICAgICAgIGxlZnQ6IGxlZnQgKyAncHgnLFxuICAgICAgICAgIHRvcDogdG9wICsgJ3B4J1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRvb2xUaXBMZWF2ZSAoZXZlbnQpIHtcbiAgICBpZiAoZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyID09PSBldmVudC5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQoZ2FtZS5Db0M3VG9vbHRpcHMudG9vbFRpcFRpbWVyKVxuICAgICAgZ2FtZS5Db0M3VG9vbHRpcHMuVG9vbFRpcEhvdmVyID0gbnVsbFxuICAgICAgJCgnI2hlbHAtdG9vbHRpcCcpLnJlbW92ZSgpXG4gICAgfVxuICB9XG59XG4iLCIvKiBnbG9iYWwgTXV0YXRpb25PYnNlcnZlciwgVG91ciwgdWkgKi9cbmxldCBDb0M3VG91ciA9IGNsYXNzIGludGVybmFsQ29DN1RvdXIge31cbmlmICh0eXBlb2YgVG91ciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgQ29DN1RvdXIgPSBjbGFzcyBpbnRlcm5hbENvQzdUb3VyIGV4dGVuZHMgVG91ciB7XG4gICAgYXN5bmMgd2FpdEZvckVsZW1lbnQgKHNlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcilcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKG11dGF0aW9ucywgb2JzZXJ2ZXIpID0+IHtcbiAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKS5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KClcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuXG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuYm9keSwge1xuICAgICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgICBzdWJ0cmVlOiB0cnVlXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH1cblxuICAgIGFzeW5jIF9wcmVTdGVwICgpIHtcbiAgICAgIGF3YWl0IHN1cGVyLl9wcmVTdGVwKClcblxuICAgICAgLy8gQ2xvc2UgY3VycmVudGx5IG9wZW4gYXBwbGljYXRpb25zXG4gICAgICBpZiAodGhpcy5zdGVwSW5kZXggPT09IDApIHtcbiAgICAgICAgZm9yIChjb25zdCBhcHAgb2YgT2JqZWN0LnZhbHVlcyh1aS53aW5kb3dzKSkge1xuICAgICAgICAgIGFwcC5jbG9zZSgpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYXdhaXQgdGhpcy53YWl0Rm9yRWxlbWVudCh0aGlzLmN1cnJlbnRTdGVwLnNlbGVjdG9yKVxuXG4gICAgICBpZiAodHlwZW9mIHRoaXMuY3VycmVudFN0ZXAuc2lkZWJhclRhYiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdWkuc2lkZWJhci5hY3RpdmF0ZVRhYih0aGlzLmN1cnJlbnRTdGVwLnNpZGViYXJUYWIpXG4gICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgX3Bvc3RTdGVwICgpIHtcbiAgICAgIGF3YWl0IHN1cGVyLl9wb3N0U3RlcCgpXG4gICAgICBpZiAodGhpcy5zdGVwSW5kZXggPCAwIHx8ICF0aGlzLmhhc05leHQpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5jdXJyZW50U3RlcC5hY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlzUmVzZXR0aW5nKSB7XG4gICAgICAgIHRoaXMuaXNSZXNldHRpbmcgPSBmYWxzZVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgc3dpdGNoICh0aGlzLmN1cnJlbnRTdGVwLmFjdGlvbikge1xuICAgICAgICBjYXNlICdjbGljayc6XG4gICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLmN1cnJlbnRTdGVwLnNlbGVjdG9yKS5jbGljaygpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyByZXNldCAoKSB7XG4gICAgICBpZiAodGhpcy5zdGF0dXMgIT09ICdjb21wbGV0ZWQnKSB7XG4gICAgICAgIHRoaXMuaXNSZXNldHRpbmcgPSB0cnVlXG4gICAgICB9XG4gICAgICBhd2FpdCBzdXBlci5yZXNldCgpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IENvQzdUb3VyIH1cbiIsIi8qIGdsb2JhbCBmb3VuZHJ5ICovXG5pbXBvcnQgeyBDb0M3VG91ciB9IGZyb20gJy4uL2FwcHMvY29jNy10b3VyLmpzJ1xuXG5leHBvcnQgY2xhc3MgRW5hYmxlVmFyaWFudFJ1bGVzRW4gZXh0ZW5kcyBDb0M3VG91ciB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcpIHtcbiAgICBzdXBlcihmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHtcbiAgICAgIHRpdGxlOiAnRW5hYmxlIG9wdGlvbmFsL3ZhcmlhbnQgcnVsZXMuJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnTGVhcm4gaG93IHRvIGVuYWJsZSBQdWxwIEN0aHVsaHUgcnVsZXMsIG9yIG90aGVyIHZhcmlhbnQgcnVsZXMnLFxuICAgICAgY2FuQmVSZXN1bWVkOiBmYWxzZSxcbiAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICBzdGVwczogW1xuICAgICAgICB7XG4gICAgICAgICAgaWQ6ICdnb3RvLXNldHRpbmdzJyxcbiAgICAgICAgICBzZWxlY3RvcjogJy50YWJzPmFbZGF0YS10YWI9XCJzZXR0aW5nc1wiXScsXG4gICAgICAgICAgdGl0bGU6ICdDT0M3LlRvdXIuR290b1NldHRpbmdzVGl0bGUnLFxuICAgICAgICAgIGNvbnRlbnQ6ICdDT0M3LlRvdXIuR290b1NldHRpbmdzQ29udGVudCcsXG4gICAgICAgICAgc2lkZWJhclRhYjogJ3NldHRpbmdzJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaWQ6ICdnb3RvLWNvbmZpZ3VyZScsXG4gICAgICAgICAgc2VsZWN0b3I6ICdbZGF0YS1hY3Rpb249XCJjb25maWd1cmVcIl0nLFxuICAgICAgICAgIHRpdGxlOiAnQ09DNy5Ub3VyLkdvdG9Db25maWd1cmVUaXRsZScsXG4gICAgICAgICAgY29udGVudDogJ0NPQzcuVG91ci5Hb3RvQ29uZmlndXJlQ29udGVudCcsXG4gICAgICAgICAgYWN0aW9uOiAnY2xpY2snXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ2dvdG8tc3lzdGVtLXNldHRpbmdzJyxcbiAgICAgICAgICBzZWxlY3RvcjogJ1tkYXRhLXRhYj1cInN5c3RlbVwiXScsXG4gICAgICAgICAgdGl0bGU6ICdDT0M3LlRvdXIuR290b1N5c3RlbVNldHRpbmdzVGl0bGUnLFxuICAgICAgICAgIGNvbnRlbnQ6ICdDT0M3LlRvdXIuR290b1N5c3RlbVNldHRpbmdzQ29udGVudCcsXG4gICAgICAgICAgYWN0aW9uOiAnY2xpY2snXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ2dvdG8tZ2FtZS1ydWxlcycsXG4gICAgICAgICAgc2VsZWN0b3I6ICdbZGF0YS1jYXRlZ29yeT1cInN5c3RlbVwiXSBbZGF0YS1rZXk9XCJDb0M3LmdhbWVSdWxlc1wiXScsXG4gICAgICAgICAgdGl0bGU6ICdDT0M3LlRvdXIuR290b0dhbWVSdWxlc1RpdGxlJyxcbiAgICAgICAgICBjb250ZW50OiAnQ09DNy5Ub3VyLkdvdG9HYW1lUnVsZXNDb250ZW50JyxcbiAgICAgICAgICBhY3Rpb246ICdjbGljaydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAnc2F2ZS1nYW1lLXJ1bGVzJyxcbiAgICAgICAgICBzZWxlY3RvcjogJyNydWxlcy1zZXR0aW5ncyBbbmFtZT1zdWJtaXRdJyxcbiAgICAgICAgICB0aXRsZTogJ0NPQzcuVG91ci5TYXZlR2FtZVJ1bGVzVGl0bGUnLFxuICAgICAgICAgIGNvbnRlbnQ6ICdDT0M3LlRvdXIuU2F2ZUdhbWVSdWxlc0NvbnRlbnQnXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBsb2NhbGl6YXRpb246IHtcbiAgICAgICAgJ0NPQzcuVG91ci5Hb3RvU2V0dGluZ3NUaXRsZSc6ICdHYW1lIFNldHRpbmdzJyxcbiAgICAgICAgJ0NPQzcuVG91ci5Hb3RvU2V0dGluZ3NDb250ZW50JzogJ0dvIHRvIHRoZSBHYW1lIFNldHRpbmdzIHRhYicsXG4gICAgICAgICdDT0M3LlRvdXIuR290b0NvbmZpZ3VyZVRpdGxlJzogJ0NvbmZpZ3VyZSBTZXR0aW5ncycsXG4gICAgICAgICdDT0M3LlRvdXIuR290b0NvbmZpZ3VyZUNvbnRlbnQnOiAnQ2xpY2sgb24gdGhlIENvbmZpZ3VyZSBTZXR0aW5ncyBidXR0b24nLFxuICAgICAgICAnQ09DNy5Ub3VyLkdvdG9TeXN0ZW1TZXR0aW5nc1RpdGxlJzogJ1N5c3RlbSBTZXR0aW5ncycsXG4gICAgICAgICdDT0M3LlRvdXIuR290b1N5c3RlbVNldHRpbmdzQ29udGVudCc6ICdHbyB0byB0aGUgU3lzdGVtIFNldHRpbmdzIHRhYicsXG4gICAgICAgICdDT0M3LlRvdXIuR290b0dhbWVSdWxlc1RpdGxlJzogJ0NvbmZpZ3VyZSBWYXJpYW50L09wdGlvbmFsIFJ1bGVzJyxcbiAgICAgICAgJ0NPQzcuVG91ci5Hb3RvR2FtZVJ1bGVzQ29udGVudCc6ICdDbGljayBvbiB0aGUgQ29uZmlndXJlIFZhcmlhbnQvT3B0aW9uYWwgUnVsZXMgYnV0dG9uJyxcbiAgICAgICAgJ0NPQzcuVG91ci5TYXZlR2FtZVJ1bGVzVGl0bGUnOiAnU2F2ZSBydWxlIGNoYW5nZXMnLFxuICAgICAgICAnQ09DNy5Ub3VyLlNhdmVHYW1lUnVsZXNDb250ZW50JzogJ09uY2UgeW91IGhhdmUgbWFkZSB5b3VyIGNoYW5nZXMgY2xpY2sgb24gdGhlIFNhdmUgQ2hhbmdlcyBidXR0b24nXG4gICAgICB9XG4gICAgfSwgY29uZmlnKSlcbiAgfVxufVxuIiwiaW1wb3J0IHsgRW5hYmxlVmFyaWFudFJ1bGVzRW4gfSBmcm9tICcuL2VuYWJsZS12YXJpYW50LXJ1bGVzLWVuLmpzJ1xuXG5leHBvcnQgY2xhc3MgRW5hYmxlVmFyaWFudFJ1bGVzRnIgZXh0ZW5kcyBFbmFibGVWYXJpYW50UnVsZXNFbiB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcpIHtcbiAgICBzdXBlcih7XG4gICAgICB0aXRsZTogJ0FjdGl2ZXogbGVzIHLDqGdsZXMgb3B0aW9ubmVsbGVzLicsXG4gICAgICBkZXNjcmlwdGlvbjogJ0FjdGl2ZXogbGVzIHLDqGdsZXMgb3B0aW9uZWxsZXMgZXQgUHVscCBDdGh1bGh1JyxcbiAgICAgIGxvY2FsaXphdGlvbjoge1xuICAgICAgICAnQ09DNy5Ub3VyLkdvdG9TZXR0aW5nc1RpdGxlJzogJ1BhcmFtw6h0cmVzJyxcbiAgICAgICAgJ0NPQzcuVG91ci5Hb3RvU2V0dGluZ3NDb250ZW50JzogJ091dnJpciBsXFwnb25nbGV0IFwiUGFyYW3DqHRyZXNcIicsXG4gICAgICAgICdDT0M3LlRvdXIuR290b0NvbmZpZ3VyZVRpdGxlJzogJ0NvbmZpZ3VyYXRpb24gZGVzIG9wdGlvbnMnLFxuICAgICAgICAnQ09DNy5Ub3VyLkdvdG9Db25maWd1cmVDb250ZW50JzogJ0NsaXF1ZXogc3VyIFwiQ29uZmlndXJhdGlvbiBkZXMgb3B0aW9uc1wiJyxcbiAgICAgICAgJ0NPQzcuVG91ci5Hb3RvU3lzdGVtU2V0dGluZ3NUaXRsZSc6ICdTeXN0w6htZSBkZSBqZXUnLFxuICAgICAgICAnQ09DNy5Ub3VyLkdvdG9TeXN0ZW1TZXR0aW5nc0NvbnRlbnQnOiAnT3V2cmV6IGxcXCdvbmdsZXQgXCJTeXN0w6htZSBkZSBqZXVcIicsXG4gICAgICAgICdDT0M3LlRvdXIuR290b0dhbWVSdWxlc1RpdGxlJzogJ0NvbmZpZ3VyZXIgbGVzIHZhcmlhbnRlcy9yw6hnbGVzIG9wdGlvbm5lbGxlcycsXG4gICAgICAgICdDT0M3LlRvdXIuR290b0dhbWVSdWxlc0NvbnRlbnQnOiAnQ2xpY2tleiBzdXIgbGUgYm91dHRvbiBcIkNvbmZpZ3VyZXIgbGVzIHZhcmlhbnRlcy9yw6hnbGVzIG9wdGlvbm5lbGxlc1wiJyxcbiAgICAgICAgJ0NPQzcuVG91ci5TYXZlR2FtZVJ1bGVzVGl0bGUnOiAnU2F1dmVnYXJkZXIgbGVzIG1vZGlmaWNhdGlvbnMnLFxuICAgICAgICAnQ09DNy5Ub3VyLlNhdmVHYW1lUnVsZXNDb250ZW50JzogJ0FwcmVzIGF2b2lyIGNob2lzaXMgbGVzIG9wdGlvbnMgY2xpcXVleiBzdXIgbGUgYm91dG9uIFwiU2F1dmVnYXJkZXIgbGVzIG1vZGlmaWNhdGlvbnNcIidcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG4iLCIvKiBnbG9iYWwgQ09ORklHLCBmb3VuZHJ5LCBnYW1lLCBIb29rcyAqL1xuaW1wb3J0IHsgQ29DN1Rvb2x0aXBzIH0gZnJvbSAnLi4vYXBwcy90b29sdGlwcy5qcydcbi8vIGltcG9ydCB7IENvQzdXZWxjb21lTWVzc2FnZSB9IGZyb20gJy4uL2FwcHMvd2VsY29tZS1tZXNzYWdlLmpzJ1xuaW1wb3J0IHsgcmVnaXN0ZXJUb3VycyB9IGZyb20gJy4uL3NjcmlwdHMvcmVnaXN0ZXItdG91cnMuanMnXG5cbmV4cG9ydCBmdW5jdGlvbiBsaXN0ZW4gKCkge1xuICBIb29rcy5vbmNlKCdyZWFkeScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnQ2FsbCBvZiBDdGh1bGh1IDd0aCBFZGl0aW9uIHwgUmVhZHknKVxuICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdzaG93V2VsY29tZU1lc3NhZ2UnKSAmJiBnYW1lLnVzZXIuaXNHTSkge1xuICAgICAgLyoqIFRoaXMgd2lsbCBwcm9tcHQgdGhlIHdlbGNvbWUgbWVzc2FnZSB3aGVuIGl0IGlzICBmaW5pc2hlZCAqL1xuICAgICAgLy8gYXdhaXQgQ29DN1dlbGNvbWVNZXNzYWdlLmNyZWF0ZSgpXG4gICAgfVxuICAgIGdhbWUuQ29DN1Rvb2x0aXBzID0gbmV3IENvQzdUb29sdGlwcygpXG5cbiAgICBjb25zdCBpbnN0cnVjdGlvbnNWZXJzaW9uID0gZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnc2hvd0luc3RydWN0aW9ucycpXG4gICAgbGV0IGxhbmcgPSBnYW1lLmkxOG4ubGFuZ1xuICAgIGNvbnN0IHJlYWRNZSA9IHtcbiAgICAgIGVuOiAnc3hCMk9YYmZ3VjZNMG55UScsXG4gICAgICBlczogJzM1Rk03Wk9kekM2TDJ4bGonLFxuICAgICAgZnI6ICd0ZGFreXpUVk9Rc0FNZFNtJ1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlYWRNZVtsYW5nXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGxhbmcgPSAnZW4nXG4gICAgfVxuICAgIENPTkZJRy5Db0M3ID0gQ09ORklHLkNvQzcgPz8ge31cbiAgICBDT05GSUcuQ29DNy5NYW51YWwgPSByZWFkTWVbbGFuZ11cbiAgICBpZiAoZm91bmRyeS51dGlscy5pc05ld2VyVmVyc2lvbihnYW1lLnN5c3RlbS52ZXJzaW9uLCBpbnN0cnVjdGlvbnNWZXJzaW9uID8/ICcwJykpIHtcbiAgICAgIChhd2FpdCBnYW1lLnBhY2tzLmdldCgnQ29DNy5zeXN0ZW0tZG9jJykuZ2V0RG9jdW1lbnQoQ09ORklHLkNvQzcuTWFudWFsKSk/LnNoZWV0LnJlbmRlcih0cnVlKVxuICAgICAgZ2FtZS5zZXR0aW5ncy5zZXQoJ0NvQzcnLCAnc2hvd0luc3RydWN0aW9ucycsIGdhbWUuc3lzdGVtLnZlcnNpb24pXG4gICAgfVxuICAgIHJlZ2lzdGVyVG91cnMoKVxuICB9KVxufVxuIiwiLyogZ2xvYmFsIGdhbWUgKi9cbmltcG9ydCB7IEVuYWJsZVZhcmlhbnRSdWxlc0VuIH0gZnJvbSAnLi4vdG91cnMvZW5hYmxlLXZhcmlhbnQtcnVsZXMtZW4uanMnXG5pbXBvcnQgeyBFbmFibGVWYXJpYW50UnVsZXNGciB9IGZyb20gJy4uL3RvdXJzL2VuYWJsZS12YXJpYW50LXJ1bGVzLWZyLmpzJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVnaXN0ZXJUb3VycyAoKSB7XG4gIHRyeSB7XG4gICAgbGV0IGxhbmcgPSBnYW1lLmkxOG4ubGFuZ1xuICAgIGNvbnN0IHRvdXJzID0ge1xuICAgICAgZW46IHtcbiAgICAgICAgJ2VuYWJsZS12YXJpYW50LXJ1bGVzJzogRW5hYmxlVmFyaWFudFJ1bGVzRW5cbiAgICAgIH0sXG4gICAgICBmcjoge1xuICAgICAgICAnZW5hYmxlLXZhcmlhbnQtcnVsZXMnOiBFbmFibGVWYXJpYW50UnVsZXNGclxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHRvdXJzW2xhbmddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgbGFuZyA9ICdlbidcbiAgICB9XG4gICAgZm9yIChjb25zdCB0b3VyTmFtZSBpbiB0b3Vyc1tsYW5nXSkge1xuICAgICAgZ2FtZS50b3Vycy5yZWdpc3RlcignQ29DNycsIHRvdXJOYW1lLCBuZXcgdG91cnNbbGFuZ11bdG91ck5hbWVdKCkpXG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmVycm9yKCdUT1VSIEVSUk9SJywgZXJyKVxuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBDcmVhdGVUb2tlbiBmcm9tICcuL2NyZWF0ZS10b2tlbi5qcydcbmltcG9ydCAqIGFzIERpY2VTb05pY2VSZWFkeSBmcm9tICcuL2RpY2Utc28tbmljZS1yZWFkeS5qcydcbmltcG9ydCAqIGFzIEluaXQgZnJvbSAnLi9pbml0LmpzJ1xuaW1wb3J0ICogYXMgUmVhZHkgZnJvbSAnLi9yZWFkeS5qcydcbmltcG9ydCAqIGFzIFJlbmRlckFjdG9yU2hlZXQgZnJvbSAnLi9yZW5kZXItYWN0b3Itc2hlZXQuanMnXG5pbXBvcnQgKiBhcyBSZW5kZXJDaGF0TWVzc2FnZSBmcm9tICcuL3JlbmRlci1jaGF0LW1lc3NhZ2UuanMnXG5pbXBvcnQgKiBhcyBSZW5kZXJEaWFsb2cgZnJvbSAnLi9yZW5kZXItZGlhbG9nLmpzJ1xuaW1wb3J0ICogYXMgUmVuZGVySXRlbVNoZWV0IGZyb20gJy4vcmVuZGVyLWl0ZW0tc2hlZXQuanMnXG5pbXBvcnQgKiBhcyBSZW5kZXJQYXVzZSBmcm9tICcuL3JlbmRlci1wYXVzZS5qcydcbmltcG9ydCAqIGFzIFJlbmRlclBsYXllckxpc3QgZnJvbSAnLi9yZW5kZXItcGxheWVyLWxpc3QuanMnXG5pbXBvcnQgKiBhcyBSZW5kZXJSZWFsUm9sbCBmcm9tICcuL3JlbmRlci1yZWFsLXJvbGwuanMnXG5pbXBvcnQgKiBhcyBSZW5kZXJTZXR0aW5nc0NvbmZpZyBmcm9tICcuL3JlbmRlci1zZXR0aW5ncy1jb25maWcuanMnXG5cbmV4cG9ydCBjb25zdCBDb0M3SG9va3MgPSB7XG4gIGxpc3RlbiAoKSB7XG4gICAgQ3JlYXRlVG9rZW4ubGlzdGVuKClcbiAgICBEaWNlU29OaWNlUmVhZHkubGlzdGVuKClcbiAgICBJbml0Lmxpc3RlbigpXG4gICAgUmVhZHkubGlzdGVuKClcbiAgICBSZW5kZXJBY3RvclNoZWV0Lmxpc3RlbigpXG4gICAgUmVuZGVyQ2hhdE1lc3NhZ2UubGlzdGVuKClcbiAgICBSZW5kZXJEaWFsb2cubGlzdGVuKClcbiAgICBSZW5kZXJJdGVtU2hlZXQubGlzdGVuKClcbiAgICBSZW5kZXJQYXVzZS5saXN0ZW4oKVxuICAgIFJlbmRlclBsYXllckxpc3QubGlzdGVuKClcbiAgICBSZW5kZXJSZWFsUm9sbC5saXN0ZW4oKVxuICAgIFJlbmRlclNldHRpbmdzQ29uZmlnLmxpc3RlbigpXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBIb29rcywgRGlhbG9nLCBnYW1lLCB1aSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpc3RlbiAoKSB7XG4gIEhvb2tzLm9uKCdjcmVhdGVUb2tlbicsIGFzeW5jICh0b2tlbkRvY3VtZW50LCBvcHRpb25zLCBjcmFldG9ySWQpID0+IHtcbiAgICAvLyBPbmx5IHRva2VuIGNyZWF0b3IgY2FuIHJvbGxcbiAgICBpZiAoZ2FtZS51c2VyLmlkICE9PSBjcmFldG9ySWQpIHJldHVyblxuICAgIC8vIFNldCB0b2tlbiBpY29uIGNvcnJlY3RseVxuICAgIGlmIChcbiAgICAgIHRva2VuRG9jdW1lbnQudGV4dHVyZS5zcmMgPT09ICdpY29ucy9zdmcvbXlzdGVyeS1tYW4uc3ZnJyAmJlxuICAgICAgdG9rZW5Eb2N1bWVudC50ZXh0dXJlLnNyYyAhPT0gdG9rZW5Eb2N1bWVudC5fb2JqZWN0LmFjdG9yLmltZykge1xuICAgICAgdG9rZW5Eb2N1bWVudC50ZXh0dXJlLnNyYyA9IHRva2VuRG9jdW1lbnQuX29iamVjdC5hY3Rvci5pbWdcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSBpcyBzb21ldGhpbmcgdG8gcm9sbCBhc2sgaWYgd2Ugc2hvdWxkIHJvbGwgaXRcbiAgICBpZiAodG9rZW5Eb2N1bWVudC5fb2JqZWN0LmFjdG9yLnR5cGUgIT09ICdjaGFyYWN0ZXInICYmICh0b2tlbkRvY3VtZW50Ll9vYmplY3QuYWN0b3IuaGFzUm9sbGFibGVDaGFyYWN0ZXJpc3RpY3MgfHwgdG9rZW5Eb2N1bWVudC5fb2JqZWN0LmFjdG9yLmhvc1JvbGxhYmxlU2tpbGxzKSkge1xuICAgICAgc3dpdGNoIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICd0b2tlbkRyb3BNb2RlJykpIHtcbiAgICAgICAgY2FzZSAnYXNrJzpcbiAgICAgICAgICBuZXcgRGlhbG9nKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0aXRsZTogZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlRva2VuQ3JlYXRpb25Sb2xsLlRpdGxlJyksXG4gICAgICAgICAgICAgIGNvbnRlbnQ6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5Ub2tlbkNyZWF0aW9uUm9sbC5Qcm9tcHQnKSxcbiAgICAgICAgICAgICAgYnV0dG9uczoge1xuICAgICAgICAgICAgICAgIHJvbGw6IHtcbiAgICAgICAgICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuVG9rZW5DcmVhdGlvblJvbGwuQnV0dG9uUm9sbCcpLFxuICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdG9rZW5Eb2N1bWVudC5fb2JqZWN0LmFjdG9yLnJvbGxDaGFyYWN0ZXJpc3RpY3NWYWx1ZSgpXG4gICAgICAgICAgICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyhnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlRva2VuQ3JlYXRpb25Sb2xsLlJvbGxlZCcsIHsgbmFtZTogdG9rZW5Eb2N1bWVudC5vYmplY3QuYWN0b3IubmFtZSB9KSlcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5Eb2N1bWVudC5fb2JqZWN0LmFjdG9yLmxvY2tlZCA9IHRydWVcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF2ZXJhZ2U6IHtcbiAgICAgICAgICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuVG9rZW5DcmVhdGlvblJvbGwuQnV0dG9uQXZlcmFnZScpLFxuICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdG9rZW5Eb2N1bWVudC5fb2JqZWN0LmFjdG9yLmF2ZXJhZ2VDaGFyYWN0ZXJpc3RpY3NWYWx1ZSgpXG4gICAgICAgICAgICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyhnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlRva2VuQ3JlYXRpb25Sb2xsLkF2ZXJhZ2VkJywgeyBuYW1lOiB0b2tlbkRvY3VtZW50Lm9iamVjdC5hY3Rvci5uYW1lIH0pKVxuICAgICAgICAgICAgICAgICAgICB0b2tlbkRvY3VtZW50Ll9vYmplY3QuYWN0b3IubG9ja2VkID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2tpcDoge1xuICAgICAgICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5NaWdyYXRlLkJ1dHRvblNraXAnKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkucmVuZGVyKHRydWUpXG4gICAgICAgICAgYnJlYWtcblxuICAgICAgICBjYXNlICdyb2xsJzpcbiAgICAgICAgICB0b2tlbkRvY3VtZW50Ll9vYmplY3QuYWN0b3Iucm9sbENoYXJhY3RlcmlzdGljc1ZhbHVlKClcbiAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmluZm8oZ2FtZS5pMThuLmZvcm1hdCgnQ29DNy5Ub2tlbkNyZWF0aW9uUm9sbC5Sb2xsZWQnLCB7IG5hbWU6IHRva2VuRG9jdW1lbnQub2JqZWN0LmFjdG9yLm5hbWUgfSkpXG4gICAgICAgICAgdG9rZW5Eb2N1bWVudC5fb2JqZWN0LmFjdG9yLmxvY2tlZCA9IHRydWVcbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGNhc2UgJ2F2ZXJhZ2UnOlxuICAgICAgICAgIHRva2VuRG9jdW1lbnQuX29iamVjdC5hY3Rvci5hdmVyYWdlQ2hhcmFjdGVyaXN0aWNzVmFsdWUoKVxuICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyhnYW1lLmkxOG4uZm9ybWF0KCdDb0M3LlRva2VuQ3JlYXRpb25Sb2xsLkF2ZXJhZ2VkJywgeyBuYW1lOiB0b2tlbkRvY3VtZW50Lm9iamVjdC5hY3Rvci5uYW1lIH0pKVxuICAgICAgICAgIHRva2VuRG9jdW1lbnQuX29iamVjdC5hY3Rvci5sb2NrZWQgPSB0cnVlXG4gICAgICAgICAgYnJlYWtcblxuICAgICAgICBjYXNlICdpZ25vcmUnOlxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9KVxufVxuIiwiLyogZ2xvYmFsIEhvb2tzICovXG5leHBvcnQgZnVuY3Rpb24gbGlzdGVuICgpIHtcbiAgSG9va3Mub25jZSgnZGljZVNvTmljZVJlYWR5JywgZGljZTNkID0+IHtcbiAgICBkaWNlM2QuYWRkRGljZVByZXNldCh7XG4gICAgICB0eXBlOiAnZHQnLFxuICAgICAgbGFiZWxzOiBbJzEwJywgJzIwJywgJzMwJywgJzQwJywgJzUwJywgJzYwJywgJzcwJywgJzgwJywgJzkwJywgJzAwJ10sXG4gICAgICBmb250U2NhbGU6IDAuNzUsXG4gICAgICBzeXN0ZW06ICdzdGFuZGFyZCdcbiAgICB9KVxuICAgIGRpY2UzZC5hZGREaWNlUHJlc2V0KHtcbiAgICAgIHR5cGU6ICdkbycsXG4gICAgICBsYWJlbHM6IFsnMTAnLCAnMjAnLCAnMzAnLCAnNDAnLCAnNTAnLCAnNjAnLCAnNzAnLCAnODAnLCAnOTAnLCAnMDAnXSxcbiAgICAgIGZvbnRTY2FsZTogMC43NSxcbiAgICAgIHN5c3RlbTogJ3N0YW5kYXJkJ1xuICAgIH0pXG4gIH0pXG59XG4iLCIvKiBnbG9iYWwgSG9va3MgKi9cbmV4cG9ydCBmdW5jdGlvbiBsaXN0ZW4gKCkge1xuICBIb29rcy5vbigncmVuZGVyQWN0b3JTaGVldCcsIGFzeW5jIChkYXRhLCBodG1sLCBvcHRpb25zKSA9PiB7fSlcbn1cbiIsIi8qIGdsb2JhbCBIb29rcyAqL1xuaW1wb3J0IHsgQ29DN0NoYXQgfSBmcm9tICcuLi9jaGF0LmpzJ1xuaW1wb3J0IHsgQ29DN0dyb3VwTWVzc2FnZSB9IGZyb20gJy4uL2FwcHMvY29jNy1ncm91cC1tZXNzYWdlLmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gbGlzdGVuICgpIHtcbiAgSG9va3Mub24oJ3JlbmRlckNoYXRNZXNzYWdlJywgKGFwcCwgaHRtbCwgZGF0YSkgPT4ge1xuICAgIENvQzdDaGF0LnJlbmRlck1lc3NhZ2VIb29rKGFwcCwgaHRtbCwgZGF0YSlcbiAgICBDb0M3Q2hhdC5yZW5kZXJDaGF0TWVzc2FnZUhvb2soYXBwLCBodG1sLCBkYXRhKVxuICAgIGlmICh0eXBlb2YgYXBwLmZsYWdzPy5Db0M3Py5bJ2dyb3VwLW1lc3NhZ2UnXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIENvQzdHcm91cE1lc3NhZ2UucmVuZGVyQ2hhdE1lc3NhZ2UoYXBwLCBodG1sLCBkYXRhKVxuICAgIH1cbiAgfSlcbn1cbiIsIi8qIGdsb2JhbCBnYW1lLCBIb29rcyAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpc3RlbiAoKSB7XG4gIEhvb2tzLm9uKCdyZW5kZXJEaWFsb2cnLCAoZGlhbG9nLCBodG1sKSA9PiB7XG4gICAgY29uc3QgZm9ybSA9IGh0bWwuZmluZCgnZm9ybScpXG4gICAgaWYgKGZvcm0uaXMoJyNkb2N1bWVudC1jcmVhdGUnKSAmJiBmb3JtLmZpbmQoJ3NlbGVjdCcpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgY29uc3QgZW50aXR5Q3JlYXRlU2VsZWN0VGFnID0gZm9ybS5maW5kKFwiW25hbWU9J3R5cGUnXVwiKVxuICAgICAgY29uc3QgZW50aXR5U29ydGVkTGlzdCA9IFtdXG4gICAgICBjb25zdCBzaG93RXhwZXJpbWVudGFsID0gISFnYW1lLnNldHRpbmdzLmdldChcbiAgICAgICAgJ0NvQzcnLFxuICAgICAgICAnZXhwZXJpbWVudGFsRmVhdHVyZXMnXG4gICAgICApXG4gICAgICBlbnRpdHlDcmVhdGVTZWxlY3RUYWcuY2hpbGRyZW4oKS5lYWNoKChvLCBlbnRpdHlPcHRpb24pID0+IHtcbiAgICAgICAgY29uc3Qga2V5ID0gZW50aXR5T3B0aW9uLnRleHRDb250ZW50Py5jYXBpdGFsaXplKClcbiAgICAgICAgaWYgKGdhbWUuaTE4bi5oYXMoYENvQzcuRW50aXRpZXMuJHtrZXl9YCkpIHtcbiAgICAgICAgICBlbnRpdHlPcHRpb24udGV4dENvbnRlbnQgPSBnYW1lLmkxOG4ubG9jYWxpemUoYENvQzcuRW50aXRpZXMuJHtrZXl9YClcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvd0V4cGVyaW1lbnRhbCB8fCAhWyd2ZWhpY2xlJ10uaW5jbHVkZXMoZW50aXR5T3B0aW9uLnZhbHVlKSkge1xuICAgICAgICAgIGVudGl0eVNvcnRlZExpc3QucHVzaChlbnRpdHlPcHRpb24pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBlbnRpdHlDcmVhdGVTZWxlY3RUYWcuZW1wdHkoKVxuICAgICAgZW50aXR5Q3JlYXRlU2VsZWN0VGFnLmFwcGVuZChcbiAgICAgICAgZW50aXR5U29ydGVkTGlzdC5zb3J0KChmaXJzdCwgc2Vjb25kKSA9PlxuICAgICAgICAgIGZpcnN0LmlubmVyVGV4dC5sb2NhbGVDb21wYXJlKHNlY29uZC5pbm5lclRleHQpXG4gICAgICAgIClcbiAgICAgIClcbiAgICAgIGlmIChlbnRpdHlDcmVhdGVTZWxlY3RUYWcudmFsKCkgPT09ICdhY3RvcicpIHtcbiAgICAgICAgZW50aXR5Q3JlYXRlU2VsZWN0VGFnLnZhbCgnY2hhcmFjdGVyJylcbiAgICAgIH0gZWxzZSBpZiAoZW50aXR5Q3JlYXRlU2VsZWN0VGFnLnZhbCgpID09PSAnYm9vaycpIHtcbiAgICAgICAgZW50aXR5Q3JlYXRlU2VsZWN0VGFnLnZhbCgnaXRlbScpXG4gICAgICB9XG4gICAgfVxuICB9KVxufVxuIiwiLyogZ2xvYmFsIEhvb2tzICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsaXN0ZW4gKCkge1xuICBIb29rcy5vbigncmVuZGVySXRlbVNoZWV0JywgYXN5bmMgKGRhdGEsIGh0bWwsIG9wdGlvbnMpID0+IHt9KVxufVxuIiwiLyogZ2xvYmFsIGdhbWUsIEhvb2tzICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsaXN0ZW4gKCkge1xuICBIb29rcy5vbigncmVuZGVyUGF1c2UnLCBhc3luYyAoZGF0YSwgaHRtbCwgb3B0aW9ucykgPT4ge1xuICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdvdmVycmlkZUdhbWVBcnR3b3JrJykpIHtcbiAgICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnRQYXVzZUltYWdlJykudG9Mb3dlckNhc2UoKSA9PT0gJ251bGwnKSB7XG4gICAgICAgIGh0bWwuZmluZCgnaW1nJykucmVtb3ZlKClcbiAgICAgIH1cbiAgICAgIGlmIChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdhcnRQYXVzZUltYWdlJykgIT09ICcnKSB7XG4gICAgICAgIGh0bWwuZmluZCgnaW1nJykuYXR0cignc3JjJywgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnYXJ0UGF1c2VJbWFnZScpKVxuICAgICAgfVxuXG4gICAgICBpZiAoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnYXJ0UGF1c2VUZXh0JykgIT09ICcnKSB7XG4gICAgICAgIGh0bWwuZmluZCgnaDMnKS5odG1sKGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2FydFBhdXNlVGV4dCcpKVxuICAgICAgfVxuICAgIH1cbiAgfSlcbn1cbiIsIi8qIGdsb2JhbCAkLCBnYW1lLCBIb29rcyAqL1xuaW1wb3J0IHsgQ09DNyB9IGZyb20gJy4uL2NvbmZpZy5qcydcblxuZXhwb3J0IGZ1bmN0aW9uIGxpc3RlbiAoKSB7XG4gIEhvb2tzLm9uKCdyZW5kZXJQbGF5ZXJMaXN0JywgKHBsYXllckxpc3QsIGh0bWwsIGRhdGEpID0+IHtcbiAgICAkKCc8aDQ+JykuYXBwZW5kKCc8ZGl2PjxpIGNsYXNzPVwiZmEtcmVndWxhciBmYS1jYWxlbmRhclwiPjwvaT4nICsgZ2FtZS5pMThuLmZvcm1hdChDT0M3LmVyYXNbZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnd29ybGRFcmEnKV0gPz8gJ0NvQzcuQ29DSURGbGFnLmVycm9yLnVua25vd24tZXJhJywgeyBlcmE6IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ3dvcmxkRXJhJykgfSkgKyAnPC9kaXY+JykuaW5zZXJ0QWZ0ZXIoJCgnaDMnLCBodG1sKSlcbiAgfSlcbn1cbiIsIi8qIGdsb2JhbCBnYW1lLCBIb29rcyAqL1xuaW1wb3J0IHsgQ29DN0RlY2FkZXJEaWUgfSBmcm9tICcuLi9hcHBzL2RlY2FkZXItZGllLmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gbGlzdGVuICgpIHtcbiAgSG9va3Mub24oJ3JlbmRlclJlYWxSb2xsJywgKGFwcCwgaHRtbCwgb3B0aW9ucykgPT4ge1xuICAgIGZvciAoY29uc3QgdGVybSBpbiBvcHRpb25zLmRpZVRlcm1zKSB7XG4gICAgICBmb3IgKGNvbnN0IGlucHV0IGluIG9wdGlvbnMuZGllVGVybXNbdGVybV0uaW5wdXRzKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmRpZVRlcm1zW3Rlcm1dIGluc3RhbmNlb2YgQ29DN0RlY2FkZXJEaWUpIHtcbiAgICAgICAgICBjb25zdCB0YWcgPSBodG1sLmZpbmQoJ1tuYW1lPVwiJyArIHRlcm0gKyAnLicgKyBpbnB1dCArICdcIl0nKVxuICAgICAgICAgIGlmICh0YWcubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB0YWdbMF0ucGxhY2Vob2xkZXIgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuUmVhbFJvbGxEZWNhZGVyUGxhY2Vob2xkZXJOYW1lJylcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pXG59XG4iLCIvKiBnbG9iYWwgSG9va3MgKi9cbmltcG9ydCB7IENvQzdEaXJlY3RvcnlQaWNrZXIgfSBmcm9tICcuLi9zY3JpcHRzL2NvYzctZGlyZWN0b3J5LXBpY2tlci5qcydcblxuZXhwb3J0IGZ1bmN0aW9uIGxpc3RlbiAoKSB7XG4gIEhvb2tzLm9uKCdyZW5kZXJTZXR0aW5nc0NvbmZpZycsIChhcHAsIGh0bWwsIHVzZXIpID0+IHtcbiAgICBDb0M3RGlyZWN0b3J5UGlja2VyLnByb2Nlc3NIdG1sKGh0bWwpXG4gIH0pXG59XG4iLCIvKiBnbG9iYWwgZ2FtZSwgc29ja2V0bGliLCB1aSAqL1xuaW1wb3J0IHsgQ29DN01lbGVlVGFyZ2V0IH0gZnJvbSAnLi4vY2hhdC9jb21iYXQvbWVsZWUtdGFyZ2V0LmpzJ1xuXG5leHBvcnQgZnVuY3Rpb24gQ29DN1NvY2tldCAoKSB7XG4gIGdhbWUuQ29DN3NvY2tldCA9IHNvY2tldGxpYi5yZWdpc3RlclN5c3RlbSgnQ29DNycpXG4gIGdhbWUuQ29DN3NvY2tldC5yZWdpc3RlcignZ21jcmVhdGVtZXNzYWdlYXMnLCBnbWNyZWF0ZW1lc3NhZ2VhcylcbiAgZ2FtZS5Db0M3c29ja2V0LnJlZ2lzdGVyKCdnbXRyYWRlaXRlbXRvJywgZ210cmFkZWl0ZW10bylcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ21jcmVhdGVtZXNzYWdlYXMgKGRhdGEpIHtcbiAgY29uc3QgbWVsZWVUYXJnZXQgPSBuZXcgQ29DN01lbGVlVGFyZ2V0KFxuICAgIGRhdGEudGFyZ2V0S2V5LFxuICAgIGRhdGEubWVzc2FnZUlkLFxuICAgIGRhdGEuZmFzdEZvcndhcmRcbiAgKVxuICBtZWxlZVRhcmdldC5pbml0aWF0b3JLZXkgPSBkYXRhLmFjdG9yS2V5XG4gIGNvbnN0IG1lc3NhZ2UgPSBhd2FpdCBtZWxlZVRhcmdldC5jcmVhdGVDaGF0Q2FyZCgpXG4gIHJldHVybiBtZXNzYWdlXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdtdHJhZGVpdGVtdG8gKGRhdGEpIHtcbiAgdHJ5IHtcbiAgICBsZXQgYWN0b3JcbiAgICBpZiAoZGF0YS5zY2VuZSkge1xuICAgICAgYWN0b3IgPSBnYW1lLnNjZW5lcy5nZXQoZGF0YS5zY2VuZSkudG9rZW5zLmdldChkYXRhLmFjdG9yRnJvbSkuYWN0b3JcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0b3IgPSBnYW1lLmFjdG9ycy5nZXQoZGF0YS5hY3RvckZyb20pXG4gICAgfVxuICAgIGNvbnN0IGl0ZW0gPSBhY3Rvci5pdGVtcy5nZXQoZGF0YS5pdGVtKVxuICAgIGNvbnN0IGNyZWF0ZWQgPSBhd2FpdCBnYW1lLmFjdG9yc1xuICAgICAgLmdldChkYXRhLmFjdG9yVG8pXG4gICAgICAuY3JlYXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBbaXRlbS50b0pTT04oKV0pXG4gICAgaWYgKGNyZWF0ZWQpIHtcbiAgICAgIGFjdG9yLmRlbGV0ZUVtYmVkZGVkRG9jdW1lbnRzKCdJdGVtJywgW2l0ZW0uaWRdKVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoZSlcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuIiwiLyogZ2xvYmFsIGZyb21VdWlkLCBnYW1lLCB1aSAqL1xuaW1wb3J0IHsgQ29DN0dyb3VwTWVzc2FnZSB9IGZyb20gJy4vY29jNy1ncm91cC1tZXNzYWdlLmpzJ1xuaW1wb3J0IHsgQ29DN0ludmVzdGlnYXRvcldpemFyZCB9IGZyb20gJy4vaW52ZXN0aWdhdG9yLXdpemFyZC5qcydcbmltcG9ydCB7IENvQzdVdGlsaXRpZXMgfSBmcm9tICcuLi91dGlsaXRpZXMuanMnXG5pbXBvcnQgeyBDb21iaW5lZENoZWNrQ2FyZCB9IGZyb20gJy4uL2NoYXQvY2FyZHMvY29tYmluZWQtcm9sbC5qcydcbmltcG9ydCB7IE9wcG9zZWRDaGVja0NhcmQgfSBmcm9tICcuLi9jaGF0L2NhcmRzL29wcG9zZWQtcm9sbC5qcydcblxuZXhwb3J0IGNsYXNzIENvQzdTeXN0ZW1Tb2NrZXQge1xuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgICAgICAgICAgICAgICAgICAgICAgIERhdGEgdG8gc2VuZCB0byBzb2NrZXQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZGF0YS50eXBlXSAgICAgICAgICAgICAgICBBY3Rpb24gdG8gcnVuXG4gICAqIEBwYXJhbSB7c3RyaW5nfHVuZGVmaW5lZH0gW2RhdGEubGlzdGVuZXJdICBvbmx5IHRoaXMgc3BlY2ZpYyB1c2VyIHNob3VsZCBydW4gdGhlIGFjdGlvblxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgc3RhdGljIGFzeW5jIGNhbGxTb2NrZXQgKGRhdGEpIHtcbiAgICBpZiAodHlwZW9mIGRhdGEubGlzdGVuZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAoZ2FtZS51c2VyLmlkID09PSBkYXRhLmxpc3RlbmVyKSB7XG4gICAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgICAgICAgY2FzZSAnY2hhcmFjdGVyLXdpemFyZCc6XG4gICAgICAgICAgICBDb0M3SW52ZXN0aWdhdG9yV2l6YXJkLmNyZWF0ZUNoYXJhY3RlckZyb21EYXRhKGRhdGEucGF5bG9hZClcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSAnb3Blbi1jaGFyYWN0ZXInOlxuICAgICAgICAgICAgZ2FtZS5hY3RvcnMuZ2V0KGRhdGEucGF5bG9hZCkuc2hlZXQucmVuZGVyKHRydWUpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgJ2dyb3VwLW1lc3NhZ2UtbmV3JzpcbiAgICAgICAgICAgIENvQzdHcm91cE1lc3NhZ2UubmV3R3JvdXBNZXNzYWdlKGRhdGEpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgJ2dyb3VwLW1lc3NhZ2Utcm9sbCc6XG4gICAgICAgICAgICBDb0M3R3JvdXBNZXNzYWdlLnBlcmZvcm1NeVJvbGxzKGRhdGEpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgJ2dyb3VwLW1lc3NhZ2UtdXBkYXRlJzpcbiAgICAgICAgICAgIENvQzdHcm91cE1lc3NhZ2UudXBkYXRlVGhlTWVzc2FnZShkYXRhKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZ2FtZS51c2VyLmlzR00pIHtcbiAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcbiAgICAgICAgICBjYXNlIE9wcG9zZWRDaGVja0NhcmQuZGVmYXVsdENvbmZpZy50eXBlOlxuICAgICAgICAgICAgT3Bwb3NlZENoZWNrQ2FyZC5kaXNwYXRjaChkYXRhKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlIENvbWJpbmVkQ2hlY2tDYXJkLmRlZmF1bHRDb25maWcudHlwZTpcbiAgICAgICAgICAgIENvbWJpbmVkQ2hlY2tDYXJkLmRpc3BhdGNoKGRhdGEpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgJ2ludm9rZSc6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBhd2FpdCBmcm9tVXVpZChkYXRhLml0ZW0pXG4gICAgICAgICAgICAgIGl0ZW1bZGF0YS5tZXRob2RdKGRhdGEuZGF0YSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgICAgIGNhc2UgJ3VwZGF0ZUNoYXInOlxuICAgICAgICAgIENvQzdVdGlsaXRpZXMudXBkYXRlQ2hhclNoZWV0cygpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCBLZWVwZXIgYWN0aW9uLCBpZiB5b3UgYXJlIGEga2VlcGVyIHJ1biB5b3Vyc2VsZiwgaWYgdGhlcmUgaXMgbm8gYWN0aXZlIEdNIHNob3cgZXJyb3JcbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgICAgICAgICAgICAgRGF0YSB0byBzZW5kIHRvIHNvY2tldC5cbiAgICovXG4gIHN0YXRpYyByZXF1ZXN0S2VlcGVyQWN0aW9uIChkYXRhKSB7XG4gICAgaWYgKGdhbWUudXNlci5pc0dNKSB7XG4gICAgICBkYXRhLmxpc3RlbmVyID0gZ2FtZS51c2VyLmlkXG4gICAgICBDb0M3U3lzdGVtU29ja2V0LmNhbGxTb2NrZXQoZGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qga2VlcGVycyA9IGdhbWUudXNlcnMuZmlsdGVyKHUgPT4gdS5hY3RpdmUgJiYgdS5pc0dNKVxuICAgICAgaWYgKGtlZXBlcnMubGVuZ3RoKSB7XG4gICAgICAgIGRhdGEubGlzdGVuZXIgPSBrZWVwZXJzWzBdLmlkXG4gICAgICAgIGdhbWUuc29ja2V0LmVtaXQoJ3N5c3RlbS5Db0M3JywgZGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoXG4gICAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkVycm9yTWlzc2luZ0tlZXBlclVzZXInKVxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdXNlciBhY3Rpb25cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgICAgICAgICAgICAgRGF0YSB0byBzZW5kIHRvIHNvY2tldC5cbiAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gdXNlcklkICAgICAgT25seSB0aGlzIHVzZXIgaWQgc2hvdWxkIHJ1biB0aGUgYWN0aW9uLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGVycm9ySWZNaXNzaW5nICBJZiByZXF1ZXN0aW5nIGEgc3BlY2lmaWMgdXNlciBzaG91bGQgcnVuIHRoZSBhY3Rpb24gZXJyb3IgaWYgdXNlciBub3QgZm91bmQgLyBsb2dnZWQgaW4uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5jbHVkZVNlbGYgICAgIElmIHJ1bm5pbmcgYXMgYWxsIHVzZXJzIHNob3VsZCB0aGUgY3VycmVudCB1c2VyIGFsc28gcnVuIHRoZSBhY3Rpb24uXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBzdGF0aWMgcmVxdWVzdFVzZXJBY3Rpb24gKFxuICAgIGRhdGEsXG4gICAgeyB1c2VySWQgPSBudWxsLCBlcnJvcklmTWlzc2luZyA9IHRydWUsIGluY2x1ZGVTZWxmID0gdHJ1ZSB9ID0ge31cbiAgKSB7XG4gICAgaWYgKHVzZXJJZCAmJiB0eXBlb2YgdXNlcklkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHVzZXJJZCA9PT0gZ2FtZS51c2VyLmlkKSB7XG4gICAgICAgIGRhdGEubGlzdGVuZXIgPSBnYW1lLnVzZXIuaWRcbiAgICAgICAgQ29DN1N5c3RlbVNvY2tldC5jYWxsU29ja2V0KGRhdGEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB1c2VyID0gZ2FtZS51c2Vycy5nZXQodXNlcklkKVxuICAgICAgICBpZiAodHlwZW9mIHVzZXIuaWQgIT09ICd1bmRlZmluZWQnICYmIHVzZXIuYWN0aXZlKSB7XG4gICAgICAgICAgZGF0YS5saXN0ZW5lciA9IHVzZXIuaWRcbiAgICAgICAgICBnYW1lLnNvY2tldC5lbWl0KCdzeXN0ZW0uQ29DNycsIGRhdGEpXG4gICAgICAgIH0gZWxzZSBpZiAoZXJyb3JJZk1pc3NpbmcpIHtcbiAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5FcnJvck1pc3NpbmdVc2VyJykpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGluY2x1ZGVTZWxmKSB7XG4gICAgICAgIENvQzdTeXN0ZW1Tb2NrZXQuY2FsbFNvY2tldChkYXRhKVxuICAgICAgfVxuICAgICAgZ2FtZS5zb2NrZXQuZW1pdCgnc3lzdGVtLkNvQzcnLCBkYXRhKVxuICAgIH1cbiAgfVxufVxuIiwiLyogZ2xvYmFsICQsIENvbWJhdCwgQ09ORklHLCBmb3VuZHJ5LCBnYW1lLCBIb29rcywgSXRlbURpcmVjdG9yeSAqL1xuaW1wb3J0IENvQzdBY3RpdmVFZmZlY3QgZnJvbSAnLi9hY3RpdmUtZWZmZWN0LmpzJ1xuaW1wb3J0IHsgQ29DN05QQ1NoZWV0IH0gZnJvbSAnLi9hY3RvcnMvc2hlZXRzL25wYy1zaGVldC5qcydcbmltcG9ydCB7IENvQzdDcmVhdHVyZVNoZWV0IH0gZnJvbSAnLi9hY3RvcnMvc2hlZXRzL2NyZWF0dXJlLXNoZWV0LmpzJ1xuaW1wb3J0IHsgQ29DN0NoYXJhY3RlclNoZWV0IH0gZnJvbSAnLi9hY3RvcnMvc2hlZXRzL2NoYXJhY3Rlci5qcydcbmltcG9ydCB7IENvQzdDaGF0IH0gZnJvbSAnLi9jaGF0LmpzJ1xuaW1wb3J0IHsgQ29DN0NvbWJhdCwgcm9sbEluaXRpYXRpdmUgfSBmcm9tICcuL2NvbWJhdC5qcydcbmltcG9ydCB7IENPQzcgfSBmcm9tICcuL2NvbmZpZy5qcydcbmltcG9ydCB7IFVwZGF0ZXIgfSBmcm9tICcuL3VwZGF0ZXIuanMnXG5pbXBvcnQgeyBDb0M3VXRpbGl0aWVzIH0gZnJvbSAnLi91dGlsaXRpZXMuanMnXG5pbXBvcnQgeyBDb0M3Q2hlY2sgfSBmcm9tICcuL2NoZWNrLmpzJ1xuaW1wb3J0IHsgQ29DN01lbnUgfSBmcm9tICcuL21lbnUuanMnXG5pbXBvcnQgeyBEYW1hZ2VDYXJkIH0gZnJvbSAnLi9jaGF0L2NhcmRzL2RhbWFnZS5qcydcbmltcG9ydCB7IENvQzdDYW52YXMgfSBmcm9tICcuL2FwcHMvY2FudmFzLmpzJ1xuaW1wb3J0IHsgQ29DN1NldHRpbmdzRGlyZWN0b3J5IH0gZnJvbSAnLi9zZXR0aW5ncy1kaXJlY3RvcnkuanMnXG5pbXBvcnQgeyBDb0M3Q29tcGVuZGl1bURpcmVjdG9yeSB9IGZyb20gJy4vY29tcGVuZGl1bS1kaXJlY3RvcnkuanMnXG5pbXBvcnQgeyBDb0M3QWN0b3JEaXJlY3RvcnkgfSBmcm9tICcuL2FjdG9yLWRpcmVjdG9yeS5qcydcbmltcG9ydCB7IENvQzdIb29rcyB9IGZyb20gJy4vaG9va3MvaW5kZXguanMnXG5pbXBvcnQgKiBhcyBEaWNlQm90IGZyb20gJy4vZGljZWJvdC5qcydcbmltcG9ydCAnLi4vc3R5bGVzL3N5c3RlbS9pbmRleC5sZXNzJ1xuaW1wb3J0IHsgQ29DN0NoYXNlU2hlZXQgfSBmcm9tICcuL2l0ZW1zL2NoYXNlL3NoZWV0LmpzJ1xuaW1wb3J0IHsgQ29DN1NvY2tldCB9IGZyb20gJy4vaG9va3Mvc29ja2V0LmpzJ1xuaW1wb3J0IHsgQ29DN1N5c3RlbVNvY2tldCB9IGZyb20gJy4vYXBwcy9jb2M3LXN5c3RlbS1zb2NrZXQuanMnXG5pbXBvcnQgeyBEcm9wQWN0b3JTaGVldERhdGEgfSBmcm9tICcuL2hvb2tzL2Ryb3AtYWN0b3Itc2hlZXQtZGF0YS5qcydcblxuLy8gQ2FyZCBpbml0XG5pbXBvcnQgeyBpbml0RUNDIH0gZnJvbSAnLi9jb21tb24vY2hhdGNhcmRsaWIvc3JjL2NoYXRjYXJkbGliLmpzJ1xuaW1wb3J0IHsgQ2hhc2VPYnN0YWNsZUNhcmQgfSBmcm9tICcuL2NoYXQvY2FyZHMvY2hhc2Utb2JzdGFjbGUuanMnXG5pbXBvcnQgeyBDb0M3Q29udGV4dE1lbnUgfSBmcm9tICcuL2NvbnRleHQtbWVudS5qcydcblxuSG9va3Mub24oJ3JlbmRlclNldHRpbmdzQ29uZmlnJywgKGFwcCwgaHRtbCwgb3B0aW9ucykgPT4ge1xuICBjb25zdCBzeXN0ZW1UYWIgPSAkKGFwcC5mb3JtKS5maW5kKCcudGFiW2RhdGEtdGFiPXN5c3RlbV0nKVxuICBzeXN0ZW1UYWJcbiAgICAuZmluZCgnaW5wdXRbbmFtZT1Db0M3XFxcXC5kaXNwbGF5SW5pdERpY2VzXScpXG4gICAgLmNsb3Nlc3QoJ2Rpdi5mb3JtLWdyb3VwJylcbiAgICAuYmVmb3JlKFxuICAgICAgJzxoMiBjbGFzcz1cInNldHRpbmctaGVhZGVyXCI+JyArXG4gICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnU0VUVElOR1MuVGl0bGVJbml0aWF0aXZlJykgK1xuICAgICAgICAnPC9oMj4nXG4gICAgKVxuICBzeXN0ZW1UYWJcbiAgICAuZmluZCgnaW5wdXRbbmFtZT1Db0M3XFxcXC5zdGFuYnlHTVJvbGxzXScpXG4gICAgLmNsb3Nlc3QoJ2Rpdi5mb3JtLWdyb3VwJylcbiAgICAuYmVmb3JlKFxuICAgICAgJzxoMiBjbGFzcz1cInNldHRpbmctaGVhZGVyXCI+JyArXG4gICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnU0VUVElOR1MuVGl0bGVSb2xsJykgK1xuICAgICAgICAnPC9oMj4nXG4gICAgKVxuICBzeXN0ZW1UYWJcbiAgICAuZmluZCgnaW5wdXRbbmFtZT1Db0M3XFxcXC50cnVzdGVkQ2FuTW9kZnlDaGF0Q2FyZF0nKVxuICAgIC5jbG9zZXN0KCdkaXYuZm9ybS1ncm91cCcpXG4gICAgLmJlZm9yZShcbiAgICAgICc8aDIgY2xhc3M9XCJzZXR0aW5nLWhlYWRlclwiPicgK1xuICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ1NFVFRJTkdTLlRpdGxlQ2hhdENhcmRzJykgK1xuICAgICAgICAnPC9oMj4nXG4gICAgKVxuICBzeXN0ZW1UYWJcbiAgICAuZmluZCgnaW5wdXRbbmFtZT1Db0M3XFxcXC5lbmFibGVTdGF0dXNJY29uc10nKVxuICAgIC5jbG9zZXN0KCdkaXYuZm9ybS1ncm91cCcpXG4gICAgLmJlZm9yZShcbiAgICAgICc8aDIgY2xhc3M9XCJzZXR0aW5nLWhlYWRlclwiPicgK1xuICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ1NFVFRJTkdTLlRpdGxlU2NlbmUnKSArXG4gICAgICAgICc8L2gyPidcbiAgICApXG4gIHN5c3RlbVRhYlxuICAgIC5maW5kKCdpbnB1dFtuYW1lPUNvQzdcXFxcLm92ZXJyaWRlR2FtZUFydHdvcmtdJylcbiAgICAuY2xvc2VzdCgnZGl2LmZvcm0tZ3JvdXAnKVxuICAgIC5iZWZvcmUoXG4gICAgICAnPGgyIGNsYXNzPVwic2V0dGluZy1oZWFkZXJcIj4nICtcbiAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdTRVRUSU5HUy5UaXRsZUdhbWVBcnR3b3JrJykgK1xuICAgICAgICAnPC9oMj4nXG4gICAgKVxuICBzeXN0ZW1UYWJcbiAgICAuZmluZCgnaW5wdXRbbmFtZT1Db0M3XFxcXC5kaXNwbGF5UGxheWVyTmFtZU9uU2hlZXRdJylcbiAgICAuY2xvc2VzdCgnZGl2LmZvcm0tZ3JvdXAnKVxuICAgIC5iZWZvcmUoXG4gICAgICAnPGgyIGNsYXNzPVwic2V0dGluZy1oZWFkZXJcIj4nICtcbiAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdTRVRUSU5HUy5UaXRsZVNoZWV0JykgK1xuICAgICAgICAnPC9oMj4nXG4gICAgKVxuICBzeXN0ZW1UYWJcbiAgICAuZmluZCgnaW5wdXRbbmFtZT1Db0M3XFxcXC5kaXNyZWdhcmRVc2VQZXJSb3VuZF0nKVxuICAgIC5jbG9zZXN0KCdkaXYuZm9ybS1ncm91cCcpXG4gICAgLmJlZm9yZShcbiAgICAgICc8aDIgY2xhc3M9XCJzZXR0aW5nLWhlYWRlclwiPicgK1xuICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ1NFVFRJTkdTLlRpdGxlV2VhcG9uJykgK1xuICAgICAgICAnPC9oMj4nXG4gICAgKVxuICBzeXN0ZW1UYWJcbiAgICAuZmluZCgnaW5wdXRbbmFtZT1Db0M3XFxcXC5zeW5jRGljZTNkXScpXG4gICAgLmNsb3Nlc3QoJ2Rpdi5mb3JtLWdyb3VwJylcbiAgICAuYmVmb3JlKFxuICAgICAgJzxoMiBjbGFzcz1cInNldHRpbmctaGVhZGVyXCI+JyArXG4gICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZSgnU0VUVElOR1MuVGl0bGVEaWNlU29OaWNlJykgK1xuICAgICAgICAnPC9oMj4nXG4gICAgKVxuICBzeXN0ZW1UYWJcbiAgICAuZmluZCgnaW5wdXRbbmFtZT1Db0M3XFxcXC5kZWJ1Z21vZGVdJylcbiAgICAuY2xvc2VzdCgnZGl2LmZvcm0tZ3JvdXAnKVxuICAgIC5iZWZvcmUoXG4gICAgICAnPGgyIGNsYXNzPVwic2V0dGluZy1oZWFkZXJcIj4nICtcbiAgICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdTRVRUSU5HUy5UaXRsZURldmVsb3BlckRlYnVnJykgK1xuICAgICAgICAnPC9oMj4nXG4gICAgKVxuICBzeXN0ZW1UYWJcbiAgICAuZmluZCgnc2VsZWN0W25hbWU9Q29DN1xcXFwuYm91dE9mTWFkbmVzc1N1bW1hcnlUYWJsZV0nKVxuICAgIC5jbG9zZXN0KCdkaXYuZm9ybS1ncm91cCcpXG4gICAgLmJlZm9yZShcbiAgICAgICc8aDIgY2xhc3M9XCJzZXR0aW5nLWhlYWRlclwiPicgK1xuICAgICAgICBnYW1lLmkxOG4ubG9jYWxpemUoJ1NFVFRJTkdTLlRpdGxlUm9sbFRhYmxlJykgK1xuICAgICAgICAnPC9oMj4nXG4gICAgKVxuICAvLyBNT1ZFRCBUTyBDSEFTU0UgSU5ESVZJRFVBTCBTRVRUSU5HXG4gIC8vIHN5c3RlbVRhYlxuICAvLyAgIC5maW5kKCdpbnB1dFtuYW1lPUNvQzdcXFxcLmNoYXNlU2hvd1Rva2VuTW92ZW1lbnRdJylcbiAgLy8gICAuY2xvc2VzdCgnZGl2LmZvcm0tZ3JvdXAnKVxuICAvLyAgIC5iZWZvcmUoXG4gIC8vICAgICAnPGgyIGNsYXNzPVwic2V0dGluZy1oZWFkZXJcIj4nICtcbiAgLy8gICAgICAgZ2FtZS5pMThuLmxvY2FsaXplKCdTRVRUSU5HUy5UaXRsZUNoYXNlU2V0dGluZ3MnKSArXG4gIC8vICAgICAgICc8L2gyPidcbiAgLy8gICApXG59KVxuXG5Ib29rcy5vbmNlKCdpbml0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICBnYW1lLkNvQzcgPSB7XG4gICAgbWFjcm9zOiB7XG4gICAgICBza2lsbENoZWNrOiBDb0M3VXRpbGl0aWVzLnNraWxsQ2hlY2tNYWNybyxcbiAgICAgIHdlYXBvbkNoZWNrOiBDb0M3VXRpbGl0aWVzLndlYXBvbkNoZWNrTWFjcm8sXG4gICAgICBjaGVjazogQ29DN1V0aWxpdGllcy5jaGVja01hY3JvXG4gICAgfSxcbiAgICBjYXJkczoge1xuICAgICAgRGFtYWdlQ2FyZFxuICAgIH0sXG4gICAgZGV2OiB7XG4gICAgICBkaWNlOiB7XG4gICAgICAgIGFsd2F5c0NyaXQ6IGZhbHNlLFxuICAgICAgICBhbHdheXNGdW1ibGU6IGZhbHNlXG4gICAgICB9XG4gICAgfSxcbiAgICBlcmFzOiAoZXJhLCBuYW1lKSA9PiB7XG4gICAgICBDT0M3LmVyYXNbZXJhXSA9IG5hbWVcbiAgICB9XG4gIH1cbiAgQ29tYmF0LnByb3RvdHlwZS5yb2xsSW5pdGlhdGl2ZSA9IHJvbGxJbml0aWF0aXZlXG59KVxuXG5pbml0RUNDKENoYXNlT2JzdGFjbGVDYXJkKVxuXG5Ib29rcy5vbigncmVuZGVyQ29tYmF0VHJhY2tlcicsIChhcHAsIGh0bWwsIGRhdGEpID0+XG4gIENvQzdDb21iYXQucmVuZGVyQ29tYmF0VHJhY2tlcihhcHAsIGh0bWwsIGRhdGEpXG4pXG5cbkRpY2VCb3QubGlzdGVuKClcbkNvQzdIb29rcy5saXN0ZW4oKVxuXG5Ib29rcy5vbmNlKCdzb2NrZXRsaWIucmVhZHknLCBDb0M3U29ja2V0KVxuXG5Ib29rcy5vbmNlKCdzZXR1cCcsIGZ1bmN0aW9uICgpIHtcbiAgLy8gTG9jYWxpemUgQ09ORklHIG9iamVjdHMgb25jZSB1cC1mcm9udFxuICBjb25zdCB0b0xvY2FsaXplID0gW1xuICAgICdzcGVsbFByb3BlcnRpZXMnLFxuICAgICdib29rVHlwZScsXG4gICAgJ3RhbGVudFR5cGUnLFxuICAgICdvY2N1cGF0aW9uUHJvcGVydGllcycsXG4gICAgJ3N0YXR1c1R5cGUnXG4gIF1cblxuICBmb3IgKGNvbnN0IG8gb2YgdG9Mb2NhbGl6ZSkge1xuICAgIGNvbnN0IGxvY2FsaXplZCA9IE9iamVjdC5lbnRyaWVzKENPQzdbb10pLm1hcChlID0+IHtcbiAgICAgIHJldHVybiBbZVswXSwgZ2FtZS5pMThuLmxvY2FsaXplKGVbMV0pXVxuICAgIH0pXG4gICAgQ09DN1tvXSA9IGxvY2FsaXplZC5yZWR1Y2UoKG9iaiwgZSkgPT4ge1xuICAgICAgb2JqW2VbMF1dID0gZVsxXVxuICAgICAgcmV0dXJuIG9ialxuICAgIH0sIHt9KVxuICB9XG5cbiAgbGV0IGVmZmVjdEluZGV4ID0gQ09ORklHLnN0YXR1c0VmZmVjdHMuZmluZEluZGV4KFxuICAgIHQgPT4gdC5pZCA9PT0gQ09DNy5zdGF0dXMuZGVhZFxuICApXG4gIGlmIChlZmZlY3RJbmRleCAhPT0gLTEpIHtcbiAgICBDT05GSUcuc3RhdHVzRWZmZWN0c1tlZmZlY3RJbmRleF0uaWNvbiA9XG4gICAgICAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy90b21ic3RvbmUuc3ZnJ1xuICB9XG4gIGVmZmVjdEluZGV4ID0gQ09ORklHLnN0YXR1c0VmZmVjdHMuZmluZEluZGV4KFxuICAgIHQgPT4gdC5pZCA9PT0gQ09DNy5zdGF0dXMudW5jb25zY2lvdXNcbiAgKVxuICBpZiAoZWZmZWN0SW5kZXggIT09IC0xKSB7XG4gICAgQ09ORklHLnN0YXR1c0VmZmVjdHNbZWZmZWN0SW5kZXhdLmljb24gPVxuICAgICAgJ3N5c3RlbXMvQ29DNy9hc3NldHMvaWNvbnMva25vY2tlZC1vdXQtc3RhcnMuc3ZnJ1xuICB9XG4gIC8vIEZvdW5kcnlWVFQgdjEwXG4gIGNvbnN0IGVmZmVjdE5hbWVLZXkgPSAoIWZvdW5kcnkudXRpbHMuaXNOZXdlclZlcnNpb24oZ2FtZS52ZXJzaW9uLCAnMTEnKSA/ICdsYWJlbCcgOiAnbmFtZScpXG4gIENPTkZJRy5zdGF0dXNFZmZlY3RzLnVuc2hpZnQoXG4gICAge1xuICAgICAgaWQ6IENPQzcuc3RhdHVzLnRlbXBvSW5zYW5lLFxuICAgICAgW2VmZmVjdE5hbWVLZXldOiAnQ29DNy5Cb3V0T2ZNYWRuZXNzTmFtZScsXG4gICAgICBpY29uOiAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy9oYW5naW5nLXNwaWRlci5zdmcnXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogQ09DNy5zdGF0dXMuaW5kZWZJbnNhbmUsXG4gICAgICBbZWZmZWN0TmFtZUtleV06ICdDb0M3Lkluc2FuaXR5TmFtZScsXG4gICAgICBpY29uOiAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy90ZW50YWNsZXMtc2t1bGwuc3ZnJ1xuICAgIH0sXG4gICAge1xuICAgICAgaWQ6IENPQzcuc3RhdHVzLmNyaXRpY2FsV291bmRzLFxuICAgICAgW2VmZmVjdE5hbWVLZXldOiAnQ29DNy5Dcml0aWNhbFdvdW5kcycsXG4gICAgICBpY29uOiAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy9hcm0tc2xpbmcuc3ZnJ1xuICAgIH0sXG4gICAge1xuICAgICAgaWQ6IENPQzcuc3RhdHVzLmR5aW5nLFxuICAgICAgW2VmZmVjdE5hbWVLZXldOiAnQ29DNy5EeWluZycsXG4gICAgICBpY29uOiAnc3lzdGVtcy9Db0M3L2Fzc2V0cy9pY29ucy9oZWFydC1iZWF0cy5zdmcnXG4gICAgfVxuICApXG59KVxuXG5Ib29rcy5vbignY3JlYXRlQWN0aXZlRWZmZWN0JywgKGRhdGEsIG9wdGlvbnMsIHVzZXJJZCkgPT4ge1xuICBpZiAoZ2FtZS51c2VySWQgPT09IHVzZXJJZCkge1xuICAgIGNvbnN0IHN0YXR1c0tleSA9IENvQzdBY3RpdmVFZmZlY3QuZ2V0U3RhdHVzS2V5KGRhdGEpXG4gICAgaWYgKHN0YXR1c0tleSkge1xuICAgICAgc3dpdGNoIChzdGF0dXNLZXkpIHtcbiAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy5pbmRlZkluc2FuZTpcbiAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy51bmNvbnNjaW91czpcbiAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy5jcml0aWNhbFdvdW5kczpcbiAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy5keWluZzpcbiAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy5wcm9uZTpcbiAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy5kZWFkOlxuICAgICAgICAgIGRhdGEucGFyZW50LnNldENvbmRpdGlvbihzdGF0dXNLZXksIHtcbiAgICAgICAgICAgIGZvcmNlVmFsdWU6IHRydWVcbiAgICAgICAgICB9KVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgQ09DNy5zdGF0dXMudGVtcG9JbnNhbmU6XG4gICAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgcmVhbFRpbWUgPSBkYXRhLmZsYWdzLkNvQzc/LnJlYWxUaW1lXG4gICAgICAgICAgICBsZXQgZHVyYXRpb24gPSBudWxsXG4gICAgICAgICAgICBpZiAocmVhbFRpbWUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uPy5yb3VuZHNcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVhbFRpbWUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbj8uc2Vjb25kc1xuICAgICAgICAgICAgICBpZiAoIWlzTmFOKGR1cmF0aW9uKSkge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gTWF0aC5mbG9vcihkdXJhdGlvbiAvIDM2MDApXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGEucGFyZW50LnNldENvbmRpdGlvbihDT0M3LnN0YXR1cy50ZW1wb0luc2FuZSwge1xuICAgICAgICAgICAgICBmb3JjZVZhbHVlOiB0cnVlLFxuICAgICAgICAgICAgICByZWFsVGltZSxcbiAgICAgICAgICAgICAgZHVyYXRpb25cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG59KVxuXG5Ib29rcy5vbignZGVsZXRlQWN0aXZlRWZmZWN0JywgKGRhdGEsIG9wdGlvbnMsIHVzZXJJZCkgPT4ge1xuICBpZiAoZ2FtZS51c2VySWQgPT09IHVzZXJJZCkge1xuICAgIGNvbnN0IHN0YXR1c0tleSA9IENvQzdBY3RpdmVFZmZlY3QuZ2V0U3RhdHVzS2V5KGRhdGEpXG4gICAgaWYgKHN0YXR1c0tleSkge1xuICAgICAgc3dpdGNoIChzdGF0dXNLZXkpIHtcbiAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy50ZW1wb0luc2FuZTpcbiAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy5pbmRlZkluc2FuZTpcbiAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy51bmNvbnNjaW91czpcbiAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy5jcml0aWNhbFdvdW5kczpcbiAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy5keWluZzpcbiAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy5wcm9uZTpcbiAgICAgICAgY2FzZSBDT0M3LnN0YXR1cy5kZWFkOlxuICAgICAgICAgIGRhdGEucGFyZW50LnVuc2V0Q29uZGl0aW9uKHN0YXR1c0tleSwge1xuICAgICAgICAgICAgZm9yY2VWYWx1ZTogdHJ1ZVxuICAgICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICB9XG59KVxuXG4vLyBUaGlzIHdpbGwgaGlkZSB0aGUgaXRlbSBjYWxsZWQgJ19fQ29DN0ludGVybmFsSXRlbV9fJ1xuLy8gVGhpcyBpdGVtIGlzIHVzZWQgZm9yIGludGVybmFsIHB1cnBvc2VzIGFuZCBzaG91bGQgbm90IGJlIHNlZW4gYnkgYW55b25lXG5Ib29rcy5vbignY2hhbmdlU2lkZWJhclRhYicsIGRpcmVjdG9yeSA9PiB7XG4gIGlmIChkaXJlY3RvcnkgaW5zdGFuY2VvZiBJdGVtRGlyZWN0b3J5KSB7XG4gICAgY29uc3QgaXRlbSA9IGdhbWUuaXRlbXMuZmluZChpID0+IGkubmFtZSA9PT0gJ19fQ29DN0ludGVybmFsSXRlbV9fJylcbiAgICBpZiAoaXRlbSkge1xuICAgICAgY29uc3QgaHRtbCA9IGRpcmVjdG9yeS5fZWxlbWVudFxuICAgICAgY29uc3QgaXRlbUVsZW1lbnQgPSBodG1sLmZpbmQoYFtkYXRhLWRvY3VtZW50LWlkPScke2l0ZW0uaWR9J11gKVxuICAgICAgaWYgKGl0ZW1FbGVtZW50KSBpdGVtRWxlbWVudFswXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gICAgfVxuICB9XG59KVxuXG5Ib29rcy5vbignaG90YmFyRHJvcCcsIChiYXIsIGRhdGEsIHNsb3QpID0+IHtcbiAgcmV0dXJuIENvQzdVdGlsaXRpZXMuY3JlYXRlTWFjcm8oYmFyLCBkYXRhLCBzbG90KVxufSlcblxuSG9va3Mub24oJ3JlbmRlckNoYXRMb2cnLCAoYXBwLCBodG1sLCBkYXRhKSA9PlxuICBDb0M3Q2hhdC5jaGF0TGlzdGVuZXJzKGFwcCwgaHRtbCwgZGF0YSlcbilcbkhvb2tzLm9uKCd1cGRhdGVDaGF0TWVzc2FnZScsIChjaGF0TWVzc2FnZSwgY2hhdERhdGEsIGRpZmYsIHNwZWFrZXIpID0+XG4gIENvQzdDaGF0Lm9uVXBkYXRlQ2hhdE1lc3NhZ2UoY2hhdE1lc3NhZ2UsIGNoYXREYXRhLCBkaWZmLCBzcGVha2VyKVxuKVxuXG5Ib29rcy5vbigncmVhZHknLCBhc3luYyAoKSA9PiB7XG4gIGF3YWl0IFVwZGF0ZXIuY2hlY2tGb3JVcGRhdGUoKVxuXG4gIC8vIGdhbWUuQ29DNy5tZW51cyA9IG5ldyBDb0M3TWVudSgpO1xuXG4gIGFjdGl2YXRlR2xvYmFsTGlzdGVuZXIoKVxuXG4gIC8vIHNldEdsb2JhbENzc1ZhcigpXG5cbiAgZ2FtZS5Db0M3LnNraWxsTGlzdCA9IGF3YWl0IGdhbWUucGFja3MuZ2V0KCdDb0M3LnNraWxscycpPy5nZXREb2N1bWVudHMoKVxuXG4gIGdhbWUuc29ja2V0Lm9uKCdzeXN0ZW0uQ29DNycsIGFzeW5jIGRhdGEgPT4ge1xuICAgIENvQzdTeXN0ZW1Tb2NrZXQuY2FsbFNvY2tldChkYXRhKVxuICB9KVxuXG4gIC8vIFwiU0VUVElOR1MuQm91dE9mTWFkbmVzc1Bob2JpYXNJbmRleFwiOiBcIlBob2JpYXMgaW5kZXhcIixcbiAgLy8gXCJTRVRUSU5HUy5Cb3V0T2ZNYWRuZXNzUGhvYmlhc0luZGV4SGludFwiOiBcIlRoZSBpbmRleCAocm9sbCByZXN1bHQpIHRoYXQgd2lsbCB0cmlnZ2VyIGEgcm9sbCBpbiB0aGUgcGhvYmlhcyB0YWJsZVwiLFxuICAvLyBcIlNFVFRJTkdTLkJvdXRPZk1hZG5lc3NNYW5pYXNJbmRleFwiOiBcIk1hbmlhcyBpbmRleFwiLFxuICAvLyBcIlNFVFRJTkdTLkJvdXRPZk1hZG5lc3NNYW5pYXNJbmRleEhpbnRcIjogXCJUaGUgaW5kZXggKHJvbGwgcmVzdWx0KSB0aGF0IHdpbGwgdHJpZ2dlciBhIHJvbGwgaW4gdGhlIG1hbmlhcyB0YWJsZVwiLFxuICAvLyBcIlNFVFRJTkdTLlNhbXBsZVBob2JpYXNUYWJsZVwiOiBcIlNhbXBsZSBwaG9iaWFzIHRhYmxlXCIsXG4gIC8vIFwiU0VUVElOR1MuU2FtcGxlTWFuaWFzVGFibGVcIjogXCJTYW1wbGUgTWFuaWFzIHRhYmxlXCIsXG5cbiAgZnVuY3Rpb24gX3RhYmxlU2V0dGluZ3NDaGFuZ2VkICh0YWJsZSwgaWQpIHtcbiAgICBpZiAoaWQgPT09ICdub25lJykgZ2FtZS5Db0M3LnRhYmxlc1t0YWJsZV0gPSBudWxsXG4gICAgZWxzZSBnYW1lLkNvQzcudGFibGVzW3RhYmxlXSA9IGdhbWUudGFibGVzLmdldChpZClcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uIF90YWJsZUluZGV4Q2hhbmdlZCggdGFibGUsIGluZGV4KXtcbiAgLy8gIGdhbWUuQ29DNy50YWJsZXNbdGFibGVdPWluZGV4O1xuICAvLyB9XG5cbiAgY29uc3QgdGFibGVDaG9pY2UgPSB7IG5vbmU6ICdTRVRUSU5HUy5MZXRLZWVwZXJEZWNpZGUnIH1cbiAgZm9yIChjb25zdCB0IG9mIGdhbWUudGFibGVzKSB7XG4gICAgdGFibGVDaG9pY2VbdC5faWRdID0gdC5uYW1lXG4gIH1cblxuICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ2JvdXRPZk1hZG5lc3NTdW1tYXJ5VGFibGUnLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLkJvdXRPZk1hZG5lc3NTdW1tYXJ5VGFibGUnLFxuICAgIHNjb3BlOiAnd29ybGQnLFxuICAgIGNvbmZpZzogdHJ1ZSxcbiAgICBkZWZhdWx0OiAnbm9uZScsXG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGNob2ljZXM6IHRhYmxlQ2hvaWNlLFxuICAgIG9uQ2hhbmdlOiBpZCA9PiBfdGFibGVTZXR0aW5nc0NoYW5nZWQoJ2JvdXRPZk1hZG5lc3NfU3VtbWFyeScsIGlkKVxuICB9KVxuXG4gIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoJ0NvQzcnLCAnYm91dE9mTWFkbmVzc1JlYWxUaW1lVGFibGUnLCB7XG4gICAgbmFtZTogJ1NFVFRJTkdTLkJvdXRPZk1hZG5lc3NSZWFsVGltZVRhYmxlJyxcbiAgICBzY29wZTogJ3dvcmxkJyxcbiAgICBjb25maWc6IHRydWUsXG4gICAgZGVmYXVsdDogJ25vbmUnLFxuICAgIHR5cGU6IFN0cmluZyxcbiAgICBjaG9pY2VzOiB0YWJsZUNob2ljZSxcbiAgICBvbkNoYW5nZTogaWQgPT4gX3RhYmxlU2V0dGluZ3NDaGFuZ2VkKCdib3V0T2ZNYWRuZXNzX1JlYWxUaW1lJywgaWQpXG4gIH0pXG5cbiAgLy8gZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdib3V0T2ZNYWRuZXNzUGhvYmlhc0luZGV4Jyx7XG4gIC8vICBuYW1lOiAnU0VUVElOR1MuQm91dE9mTWFkbmVzc1Bob2JpYXNJbmRleCcsXG4gIC8vICBoaW50OiAnU0VUVElOR1MuQm91dE9mTWFkbmVzc1Bob2JpYXNJbmRleEhpbnQnLFxuICAvLyAgc2NvcGU6ICd3b3JsZCcsXG4gIC8vICBjb25maWc6IHRydWUsXG4gIC8vICBkZWZhdWx0OiA5LFxuICAvLyAgdHlwZTogTnVtYmVyLFxuICAvLyAgb25DaGFuZ2U6ICBpZCA9PiBfdGFibGVJbmRleENoYW5nZWQoICdwaG9iaWFzSW5kZXgnLCBpZClcbiAgLy8gfSk7XG5cbiAgLy8gZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdib3V0T2ZNYWRuZXNzTWFuaWFzSW5kZXgnLHtcbiAgLy8gIG5hbWU6ICdTRVRUSU5HUy5Cb3V0T2ZNYWRuZXNzTWFuaWFzSW5kZXgnLFxuICAvLyAgaGludDogJ1NFVFRJTkdTLkJvdXRPZk1hZG5lc3NNYW5pYXNJbmRleEhpbnQnLFxuICAvLyAgc2NvcGU6ICd3b3JsZCcsXG4gIC8vICBjb25maWc6IHRydWUsXG4gIC8vICBkZWZhdWx0OiAxMCxcbiAgLy8gIHR5cGU6IE51bWJlcixcbiAgLy8gIG9uQ2hhbmdlOiAgaWQgPT4gX3RhYmxlSW5kZXhDaGFuZ2VkKCAnbWFuaWFzSW5kZXgnLCBpZClcbiAgLy8gfSk7XG5cbiAgLy8gZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcignQ29DNycsICdzYW1wbGVQaG9iaWFzVGFibGUnLHtcbiAgLy8gIG5hbWU6ICdTRVRUSU5HUy5TYW1wbGVQaG9iaWFzVGFibGUnLFxuICAvLyAgc2NvcGU6ICd3b3JsZCcsXG4gIC8vICBjb25maWc6IHRydWUsXG4gIC8vICBkZWZhdWx0OiAnbm9uZScsXG4gIC8vICB0eXBlOiBTdHJpbmcsXG4gIC8vICBjaG9pY2VzOiB0YWJsZUNob2ljZSxcbiAgLy8gIG9uQ2hhbmdlOiAgaWQgPT4gX3RhYmxlU2V0dGluZ3NDaGFuZ2VkKCAncGhvYmlhcycsIGlkKVxuICAvLyB9KTtcblxuICAvLyBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKCdDb0M3JywgJ3NhbXBsZU1hbmlhc1RhYmxlJyx7XG4gIC8vICBuYW1lOiAnU0VUVElOR1MuU2FtcGxlTWFuaWFzVGFibGUnLFxuICAvLyAgc2NvcGU6ICd3b3JsZCcsXG4gIC8vICBjb25maWc6IHRydWUsXG4gIC8vICBkZWZhdWx0OiAnbm9uZScsXG4gIC8vICB0eXBlOiBTdHJpbmcsXG4gIC8vICBjaG9pY2VzOiB0YWJsZUNob2ljZSxcbiAgLy8gIG9uQ2hhbmdlOiAgaWQgPT4gX3RhYmxlU2V0dGluZ3NDaGFuZ2VkKCAnbWFuaWFzJywgaWQpXG4gIC8vIH0pO1xuXG4gIGdhbWUuQ29DNy50YWJsZXMgPSB7XG4gICAgYm91dE9mTWFkbmVzc19TdW1tYXJ5OlxuICAgICAgZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnYm91dE9mTWFkbmVzc1N1bW1hcnlUYWJsZScpID09PSAnbm9uZSdcbiAgICAgICAgPyBudWxsXG4gICAgICAgIDogZ2FtZS50YWJsZXMuZ2V0KFxuICAgICAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2JvdXRPZk1hZG5lc3NTdW1tYXJ5VGFibGUnKVxuICAgICAgICApLFxuICAgIGJvdXRPZk1hZG5lc3NfUmVhbFRpbWU6XG4gICAgICBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdib3V0T2ZNYWRuZXNzUmVhbFRpbWVUYWJsZScpID09PSAnbm9uZSdcbiAgICAgICAgPyBudWxsXG4gICAgICAgIDogZ2FtZS50YWJsZXMuZ2V0KFxuICAgICAgICAgIGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2JvdXRPZk1hZG5lc3NSZWFsVGltZVRhYmxlJylcbiAgICAgICAgKVxuICAgIC8vIG1hbmlhc0luZGV4OiBnZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnYm91dE9mTWFkbmVzc1Bob2JpYXNJbmRleCcpLFxuICAgIC8vIHBob2JpYXNJbmRleDogZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnYm91dE9mTWFkbmVzc01hbmlhc0luZGV4JyksXG4gICAgLy8gcGhvYmlhczogKCdub25lJyA9PSBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdzYW1wbGVQaG9iaWFzVGFibGUnKSk/bnVsbDpnYW1lLnRhYmxlcy5nZXQoZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnc2FtcGxlUGhvYmlhc1RhYmxlJykpLFxuICAgIC8vIG1hbmlhczogKCdub25lJyA9PSBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdzYW1wbGVNYW5pYXNUYWJsZScpKT9udWxsOmdhbWUudGFibGVzLmdldChnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdzYW1wbGVNYW5pYXNUYWJsZScpKSxcbiAgfVxufSlcblxuLy8gSG9va3Mub24oJ3ByZUNyZWF0ZUFjdG9yJywgKGNyZWF0ZURhdGEpID0+IENvQ0FjdG9yLmluaXRUb2tlbiggY3JlYXRlRGF0YSkpO1xuXG5Ib29rcy5vbihcbiAgJ3JlbmRlckNvQzdDaGFzZVNoZWV0JyxcbiAgLyoqIGFzeW5jICovIChhcHAsIGh0bWwsIGRhdGEpID0+XG4gICAgLyoqIGF3YWl0ICovIENvQzdDaGFzZVNoZWV0LnNldFNjcm9sbChhcHAsIGh0bWwsIGRhdGEpXG4pXG5cbkhvb2tzLm9uKCdjbG9zZUNvQzdDaGFzZVNoZWV0JywgKGFwcCwgaHRtbCkgPT5cbiAgQ29DN0NoYXNlU2hlZXQub25DbG9zZShhcHAsIGh0bWwpXG4pXG5cbi8vIENhbGxlZCBvbiBjbG9zaW5nIGEgY2hhcmFjdGVyIHNoZWV0IHRvIGxvY2sgaXQgb24gZ2V0dGluZyBpdCB0byBkaXNwbGF5IHZhbHVlc1xuSG9va3Mub24oJ2Nsb3NlQWN0b3JTaGVldCcsIGNoYXJhY3RlclNoZWV0ID0+IGNoYXJhY3RlclNoZWV0Lm9uQ2xvc2VTaGVldCgpKVxuSG9va3Mub24oJ3JlbmRlckNvQzdDcmVhdHVyZVNoZWV0JywgKGFwcCwgaHRtbCwgZGF0YSkgPT5cbiAgQ29DN0NyZWF0dXJlU2hlZXQuZm9yY2VBdXRvKGFwcCwgaHRtbCwgZGF0YSlcbilcbkhvb2tzLm9uKCdyZW5kZXJDb0M3TlBDU2hlZXQnLCAoYXBwLCBodG1sLCBkYXRhKSA9PlxuICBDb0M3TlBDU2hlZXQuZm9yY2VBdXRvKGFwcCwgaHRtbCwgZGF0YSlcbilcbi8vIEhvb2tzLm9uKCd1cGRhdGVBY3RvcicsIChhY3RvciwgZGF0YVVwZGF0ZSkgPT4gQ29DQWN0b3IudXBkYXRlQWN0b3IoIGFjdG9yLCBkYXRhVXBkYXRlKSk7XG4vLyBIb29rcy5vbigndXBkYXRlVG9rZW4nLCAoc2NlbmUsIHRva2VuLCBkYXRhVXBkYXRlKSA9PiBDb0NBY3Rvci51cGRhdGVUb2tlbiggc2NlbmUsIHRva2VuLCBkYXRhVXBkYXRlKSk7XG5cbkhvb2tzLm9uKCdjaGF0TWVzc2FnZScsIENvQzdVdGlsaXRpZXMuUGFyc2VDaGF0RW50cnkpXG4vLyBIb29rcy5vbigncHJlQ3JlYXRlVG9rZW4nLCAoIHNjZW5lLCBhY3Rvciwgb3B0aW9ucywgaWQpID0+IENvQ0FjdG9yLnByZUNyZWF0ZVRva2VuKCBzY2VuZSwgYWN0b3IsIG9wdGlvbnMsIGlkKSlcbi8vIEhvb2tzLm9uKCdjcmVhdGVUb2tlbicsICggc2NlbmUsIGFjdG9yLCBvcHRpb25zLCBpZCkgPT4gQ29DQWN0b3IucHJlQ3JlYXRlVG9rZW4oIHNjZW5lLCBhY3Rvciwgb3B0aW9ucywgaWQpKVxuLy8gSG9va3Mub24oXCJyZW5kZXJDaGF0TG9nXCIsIChhcHAsIGh0bWwsIGRhdGEpID0+IENvQzdJdGVtLmNoYXRMaXN0ZW5lcnMoaHRtbCkpO1xuXG5Ib29rcy5vbignZ2V0U2NlbmVDb250cm9sQnV0dG9ucycsICgvKiBjb250cm9scyAqLykgPT4ge1xuICAvLyBpZiggZ2FtZS51c2VyLmlzR00pe1xuICAvLyAgbGV0IGdyb3VwID0gY29udHJvbHMuZmluZChiID0+IGIubmFtZSA9PSAndG9rZW4nKTtcbiAgLy8gIGdyb3VwLnRvb2xzLnB1c2goe1xuICAvLyAgICB0b2dnbGU6IHRydWUsXG4gIC8vICAgIGljb24gOiAnZmFzIGZhLWFuZ2xlLWRvdWJsZS11cCcsXG4gIC8vICAgIG5hbWU6ICdkZXZwaGFzZScsXG4gIC8vICAgIGFjdGl2ZTogZ2FtZS5zZXR0aW5ncy5nZXQoJ0NvQzcnLCAnZGV2ZWxvcG1lbnRFbmFibGVkJyksXG4gIC8vICAgIHRpdGxlOiBnYW1lLnNldHRpbmdzLmdldCgnQ29DNycsICdkZXZlbG9wbWVudEVuYWJsZWQnKT8gZ2FtZS5pMThuLmxvY2FsaXplKCAnQ29DNy5EZXZQaGFzZUVuYWJsZWQnKTogZ2FtZS5pMThuLmxvY2FsaXplKCAnQ29DNy5EZXZQaGFzZURpc2FibGVkJyksXG4gIC8vICAgIG9uQ2xpY2sgOmFzeW5jICgpID0+IGF3YWl0IENvQzdVdGlsaXRpZXMudG9nZ2xlRGV2UGhhc2UoKVxuICAvLyAgfSk7XG4gIC8vICBncm91cC50b29scy5wdXNoKHtcbiAgLy8gICAgdG9nZ2xlOiB0cnVlLFxuICAvLyAgICBpY29uIDogJ2ZhcyBmYXMgZmEtdXNlci1lZGl0JyxcbiAgLy8gICAgbmFtZTogJ2NoYXJjcmVhdGUnLFxuICAvLyAgICBhY3RpdmU6IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2NoYXJDcmVhdGlvbkVuYWJsZWQnKSxcbiAgLy8gICAgdGl0bGU6IGdhbWUuc2V0dGluZ3MuZ2V0KCdDb0M3JywgJ2NoYXJDcmVhdGlvbkVuYWJsZWQnKT8gZ2FtZS5pMThuLmxvY2FsaXplKCAnQ29DNy5DaGFyQ3JlYXRpb25FbmFibGVkJyk6IGdhbWUuaTE4bi5sb2NhbGl6ZSggJ0NvQzcuQ2hhckNyZWF0aW9uRGlzYWJsZWQnKSxcbiAgLy8gICAgb25DbGljayA6YXN5bmMgKCkgPT4gYXdhaXQgQ29DN1V0aWxpdGllcy50b2dnbGVDaGFyQ3JlYXRpb24oKVxuICAvLyAgfSk7XG4gIC8vIH1cbn0pXG5cbi8vIEhvb2tzLm9uKCdyZW5kZXJTY2VuZUNvbnRyb2xzJywgKCkgPT4gQ29DN1V0aWxpdGllcy51cGRhdGVDaGFyU2hlZXRzKCkpO1xuLy8gSG9va3Mub24oJ3JlbmRlclNjZW5lTmF2aWdhdGlvbicsICgpID0+IENvQzdVdGlsaXRpZXMudXBkYXRlQ2hhclNoZWV0cygpKTtcbi8vIFNoZWV0IGNzcyBvcHRpb25zXG4vLyBIb29rcy5vbigncmVuZGVyQ29DN0NoYXJhY3RlclNoZWV0JywgQ29DN0NoYXJhY3RlclNoZWV0LnJlbmRlclNoZWV0KTtcbkhvb2tzLm9uKCdyZW5kZXJBY3RvclNoZWV0JywgQ29DN0NoYXJhY3RlclNoZWV0LnJlbmRlclNoZWV0KVxuSG9va3Mub24oJ3JlbmRlckl0ZW1TaGVldCcsIENvQzdDaGFyYWN0ZXJTaGVldC5yZW5kZXJTaGVldClcblxuSG9va3Mub24oJ2dldFNjZW5lQ29udHJvbEJ1dHRvbnMnLCBDb0M3TWVudS5nZXRCdXR0b25zKVxuSG9va3Mub24oJ3JlbmRlclNjZW5lQ29udHJvbHMnLCBDb0M3TWVudS5yZW5kZXJDb250cm9scylcblxuSG9va3Mub24oJ2Ryb3BDYW52YXNEYXRhJywgQ29DN0NhbnZhcy5vbkRyb3BTb21ldGhpbmcpXG5cbkhvb2tzLm9uKCdkcm9wQWN0b3JTaGVldERhdGEnLCBEcm9wQWN0b3JTaGVldERhdGEpXG5cbmZ1bmN0aW9uIGFjdGl2YXRlR2xvYmFsTGlzdGVuZXIgKCkge1xuICBjb25zdCBib2R5ID0gJCgnYm9keScpXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgQ29DN0NvbnRleHRNZW51LmNsb3NlQWxsKVxuICBib2R5Lm9uKCdjbGljaycsICdhLmNvYzctaW5saW5lLWNoZWNrJywgQ29DN0NoZWNrLl9vbkNsaWNrSW5saW5lUm9sbClcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgX29uTGVmdENsaWNrKVxufVxuXG5mdW5jdGlvbiBfb25MZWZ0Q2xpY2sgKGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zaGlmdEtleVxufVxuXG5DT05GSUcudWkuc2V0dGluZ3MgPSBDb0M3U2V0dGluZ3NEaXJlY3RvcnlcbkNPTkZJRy51aS5jb21wZW5kaXVtID0gQ29DN0NvbXBlbmRpdW1EaXJlY3RvcnlcbkNPTkZJRy51aS5hY3RvcnMgPSBDb0M3QWN0b3JEaXJlY3RvcnlcbiIsIi8qIGdsb2JhbCBDaGF0TWVzc2FnZSwgZ2FtZSwgSG9va3MsIFJvbGwsIHVpICovXG5cbi8qKlxuICpDYWxsb2ZDdGh1bGh1KDd0aEVkLikgRGVmaW5lIHlvdXIgb3duIGNvbW1hbmRzXG4gKkhlcmUsIHdlIHJlY2VpdmUgdGhlIGNoYXQgTWVzc2FnZXMgYW5kIGRldGVybWluZSBlYWNoIGNvbW1hbmQuXG4gKlsvQ0NdRGVmaW5lIGEgY29tbWFuZCB0byBqdWRnZSBhIG5vcm1hbCBkaWNlLlxuICpbL0NCUl0gQ29tbWFuZCB0byBkZWZpbmUgdGhlIGRlY2lzaW9uIG9uIGNvbWJpbmF0aW9uIHJvbGxzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbGlzdGVuICgpIHtcbiAgSG9va3Mub24oJ2NoYXRNZXNzYWdlJywgKGh0bWwsIGNvbnRlbnQpID0+IHtcbiAgICAvLyBJJ20gY3VycmVudGx5IHVzaW5nIGl0IGZvciB0ZXN0aW5nIGJvbnVzIGRpY2UuXG4gICAgaWYgKGNvbnRlbnQubWF0Y2goL15cXC8oY2JyfGNjKS9pKSkge1xuICAgICAgLy8gRXh0cmFjdGluZyBudW1iZXJzIGZyb20gY29tYmluYXRpb24gcm9sbHNcbiAgICAgIGNvbnN0IGNvbW1hbmRzID0gY29udGVudC5tYXRjaCgvKFxcZCspL2cpXG4gICAgICBpZiAoY29tbWFuZHMpIHtcbiAgICAgICAgbmV3IFJvbGwoJzFkMTAwJykucm9sbCh7IGFzeW5jOiB0cnVlIH0pLnRoZW4ociA9PiB7XG4gICAgICAgICAgY29uc3QgcyA9IHIucmVzdWx0XG4gICAgICAgICAgY29uc3QgcmVzID0gY29tbWFuZHNcbiAgICAgICAgICAgIC5tYXAobSA9PiB7XG4gICAgICAgICAgICAgIGxldCByZXMgPSAnJ1xuICAgICAgICAgICAgICBpZiAocyA8PSAxKSByZXMgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuQ3JpdGljYWxTdWNjZXNzJylcbiAgICAgICAgICAgICAgZWxzZSBpZiAocyA+PSAxMDApIHJlcyA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5GdW1ibGUnKVxuICAgICAgICAgICAgICBlbHNlIGlmIChzIDw9IG0gLyA1KSB7XG4gICAgICAgICAgICAgICAgcmVzID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkV4dHJlbWVTdWNjZXNzJylcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChzIDw9IG0gLyAyKSB7XG4gICAgICAgICAgICAgICAgcmVzID0gZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LkhhcmRTdWNjZXNzJylcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChzIDw9IG0pIHJlcyA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5SZWd1bGFyU3VjY2VzcycpXG4gICAgICAgICAgICAgIGVsc2UgaWYgKHMgPj0gOTYpIHtcbiAgICAgICAgICAgICAgICBpZiAobSA8IDUwKSByZXMgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ0NvQzcuRnVtYmxlJylcbiAgICAgICAgICAgICAgICBlbHNlIHJlcyA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5GYWlsdXJlJylcbiAgICAgICAgICAgICAgfSBlbHNlIHJlcyA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnQ29DNy5GYWlsdXJlJylcbiAgICAgICAgICAgICAgLy8gUmVjb3JkIHRoZSBmaXJzdCByZXN1bHRzLlxuICAgICAgICAgICAgICByZXMgKz0gJyAnICsgZ2FtZS5pMThuLmxvY2FsaXplKCdDb0M3LlZhbHVlJykgKyAnICcgKyBtXG4gICAgICAgICAgICAgIHJldHVybiByZXNcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuam9pbignIC8gJylcbiAgICAgICAgICByLnRvTWVzc2FnZSh7XG4gICAgICAgICAgICBzcGVha2VyOiBDaGF0TWVzc2FnZS5nZXRTcGVha2VyKCksXG4gICAgICAgICAgICBmbGF2b3I6IHJlc1xuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKCdJbmNvcnJlY3QgdXNhZ2Ugb2YgY29tbWFuZCcpXG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gdG8gYXZvaWQgZXJyb3JzIGluIHRoZSBjb21tYW5kLlxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9KVxufVxuIiwiLyogZ2xvYmFsIGdhbWUgKi9cbmV4cG9ydCBmdW5jdGlvbiBEcm9wQWN0b3JTaGVldERhdGEgKGFjdG9yLCBzaGVldCwgZGF0YSkge1xuICBpZiAoZGF0YS50eXBlID09PSAnSXRlbScgJiYgZGF0YS5hY3RvcklkKSB7XG4gICAgaWYgKGFjdG9yLmRhdGEuX2lkID09PSBkYXRhLmFjdG9ySWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBsZXQgYWN0b3JGcm9tID0gbnVsbFxuICAgIGlmIChkYXRhLnNjZW5lSWQgJiYgZGF0YS50b2tlbklkKSB7XG4gICAgICBhY3RvckZyb20gPSBnYW1lLnNjZW5lcy5nZXQoZGF0YS5zY2VuZUlkKS50b2tlbnMuZ2V0KGRhdGEudG9rZW5JZCkuYWN0b3JcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0b3JGcm9tID0gZ2FtZS5hY3RvcnMuZ2V0KGRhdGEuYWN0b3JJZClcbiAgICB9XG4gICAgc3dpdGNoIChhY3Rvci5kYXRhLnR5cGUpIHtcbiAgICAgIGNhc2UgJ2NoYXJhY3Rlcic6XG4gICAgICBjYXNlICducGMnOlxuICAgICAgY2FzZSAnY3JlYXR1cmUnOlxuICAgICAgICBpZiAoIVsnY2hhc2UnXS5pbmNsdWRlcyhkYXRhLmRhdGEudHlwZSkpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAndmVoaWNsZSc6XG4gICAgICAgIHJldHVyblxuICAgICAgY2FzZSAnY29udGFpbmVyJzpcbiAgICAgICAgaWYgKCFbJ2Jvb2snLCAnaXRlbScsICdzcGVsbCcsICd3ZWFwb24nXS5pbmNsdWRlcyhkYXRhLmRhdGEudHlwZSkpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYWN0b3JGcm9tKSB7XG4gICAgICBhY3RvckZyb20uZGVsZXRlRW1iZWRkZWREb2N1bWVudHMoJ0l0ZW0nLCBbZGF0YS5kYXRhLl9pZF0pXG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsiQ09DNyIsInN0YW5kYXJkIiwibW9kZXJuIiwibW9kZXJuUHVscCIsInB1bHAiLCJkb3duRGFya2VyVHJhaWxzIiwiZG93bkRhcmtlclRyYWlsc1B1bHAiLCJkYXJrQWdlcyIsImRhcmtBZ2VzUHVscCIsInJlZ2VuY3kiLCJyZWdlbmN5UHVscCIsInJlaWduT2ZUZXJyb3IiLCJnYXNMaWdodCIsImludmljdHVzIiwiZGVjaW1hbExlZnQiLCJkZWNpbWFsUmlnaHQiLCJpbnRlZ2VyTGVmdCIsImludGVnZXJSaWdodCIsImxzZCIsInJvbWFuIiwibm9uZSIsImFzc2VzIiwic2VzdGVydGlpIiwicXVpbmFyaWkiLCJkZW5hcmlpIiwiZCIsInMiLCJ2YWx1ZSIsIm11bHRpcGxpZXIiLCJuYW1lIiwiZmlsdGVyIiwic3RyIiwiY29uIiwic2l6IiwiZGV4IiwiYXBwIiwiaW50IiwicG93IiwiZWR1Iiwibm9hZGp1c3RtZW50cyIsIm5veHBnYWluIiwic3BlY2lhbCIsInJhcml0eSIsInB1c2giLCJjb21iYXQiLCJmaWdodGluZyIsImZpcmVhcm0iLCJyYW5nZWQiLCJyZXF1aXJlc25hbWUiLCJrZWVwYmFzZXZhbHVlIiwicGlja25hbWVvbmx5Iiwib25seW9uZSIsIm1lbGVlIiwicm5nZCIsIm1udnIiLCJ0aHJvd24iLCJzaG90Z3VuIiwiZGJybCIsImltcGwiLCJicnN0IiwiYXV0byIsImFoZGIiLCJhZGRiIiwic2xudCIsInNwY2wiLCJtb250IiwiYmxzdCIsInN0dW4iLCJyYXJlIiwiYnVybiIsImNhbGwiLCJkaXNtaXNzIiwiY29udGFjdCIsInN1bW1vbiIsImJpbmQiLCJlbmNoYW50bWVudCIsImdhdGUiLCJteXRob3MiLCJvY2N1bHQiLCJvdGhlciIsInBoeXNpY2FsIiwibWVudGFsIiwibWlzY2VsbGFuZW91cyIsImJhc2ljIiwiaW5zYW5lIiwibWFuaWEiLCJwaG9iaWEiLCJjbGFzc2ljIiwibG92ZWNyYWZ0aWFuIiwiZm9ybXVsYSIsImFjdG9yIiwiYWN0b3JzaGVldCIsInN0YXR1cyIsInRlbXBvSW5zYW5lIiwiaW5kZWZJbnNhbmUiLCJ1bmNvbnNjaW91cyIsImNyaXRpY2FsV291bmRzIiwiZHlpbmciLCJwcm9uZSIsImRlYWQiLCJuZXdCb29rTmFtZSIsIm5ld1NraWxsTmFtZSIsIm5ld1NwZWxsTmFtZSIsIm5ld0l0ZW1OYW1lIiwibmV3V2VhcG9uTmFtZSIsImNyZWF0dXJlRmlnaHRpbmdTa2lsbCIsImZpZ2h0aW5nU3BlY2lhbGl6YXRpb25OYW1lIiwiZmlyZWFybVNwZWNpYWxpemF0aW9uTmFtZSIsInJhbmdlZFNwZWNpYWxpemF0aW9uTmFtZSIsImNvbWJhdENhcmRzIiwiZmlnaHRCYWNrIiwiZG9kZ2UiLCJtYW5ldXZlciIsIm5vUmVzcG9uc2UiLCJDb0M3QWN0aXZlRWZmZWN0IiwiQWN0aXZlRWZmZWN0IiwiYXBwbHkiLCJjaGFuZ2UiLCJrZXkiLCJpc05hTiIsInN5c3RlbSIsImF0dHJpYnMiLCJhcm1vciIsIk51bWJlciIsImRiIiwiU3RyaW5nIiwic3VwZXIiLCJvbk1hbmFnZUFjdGl2ZUVmZmVjdCIsImV2ZW50Iiwib3duZXIiLCJwcmV2ZW50RGVmYXVsdCIsImEiLCJjdXJyZW50VGFyZ2V0IiwibGkiLCJjbG9zZXN0IiwiZWZmZWN0IiwiZGF0YXNldCIsImVmZmVjdElkIiwiZWZmZWN0cyIsImdldCIsImFjdGlvbiIsImNyZWF0ZUVtYmVkZGVkRG9jdW1lbnRzIiwibGFiZWwiLCJnYW1lIiwiaTE4biIsImxvY2FsaXplIiwiaWNvbiIsIm9yaWdpbiIsInV1aWQiLCJlZmZlY3RUeXBlIiwidW5kZWZpbmVkIiwiZGlzYWJsZWQiLCJzaGVldCIsInJlbmRlciIsImRlbGV0ZSIsInVwZGF0ZSIsIl9wcmVwYXJlRHVyYXRpb24iLCJkdXJhdGlvbiIsInR5cGUiLCJzZWNvbmRzIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwic2xpY2UiLCJmaWx0ZXJBY3RpdmVFZmZlY3RzIiwiY29uZGl0aW9uTmFtZSIsImZvdW5kcnkiLCJ1dGlscyIsImlzTmV3ZXJWZXJzaW9uIiwidmVyc2lvbiIsInN0YXR1c2VzIiwiaGFzIiwiZmxhZ3MiLCJjb3JlIiwic3RhdHVzSWQiLCJnZXRTdGF0dXNLZXkiLCJvcHRpb25zIiwic2l6ZSIsInZhbHVlcyIsImdldEZsYWciLCJmaW5kIiwidiIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiaXNTdGF0dXMiLCJ0aGlzIiwicHJlcGFyZUFjdGl2ZUVmZmVjdENhdGVnb3JpZXMiLCJjYXRlZ29yaWVzIiwidGVtcG9yYXJ5IiwicGFzc2l2ZSIsImluYWN0aXZlIiwic3VwcHJlc3NlZCIsImluZm8iLCJlIiwiaXNTdXBwcmVzc2VkIiwiaXNUZW1wb3JhcnkiLCJoaWRkZW4iLCJsZW5ndGgiLCJwcmVwYXJlTlBDQWN0aXZlRWZmZWN0Q2F0ZWdvcmllcyIsImNvdW50IiwiYWN0aXZlIiwiX2dldFNvdXJjZU5hbWUiLCJleHBlbmRlZCIsIkNvQzdEaWNlIiwicm9sbCIsIm1vZGlmIiwicm9sbE1vZGUiLCJoaWRlRGljZSIsImFsdGVybmF0aXZlRGljZSIsIm1vZHVsZXMiLCJzZXR0aW5ncyIsIkNvQzciLCJkZXYiLCJkaWNlIiwiYWx3YXlzQ3JpdCIsIlJvbGwiLCJmcm9tRGF0YSIsImNyaXQwMSIsImFsd2F5c0Z1bWJsZSIsImZ1bWJsZTk5IiwicmVwZWF0IiwiTWF0aCIsImFicyIsImFzeW5jIiwicmVzdWx0IiwidW5pdCIsInRvdGFsIiwicmVzdWx0cyIsInRlbnMiLCJDT05GSUciLCJEaWNlIiwidGVybXMiLCJ0IiwiaW5jbHVkZXMiLCJtYXgiLCJtaW4iLCJzaG93Um9sbERpY2UzZCIsInN5bmNEaWNlIiwiY2hhdERhdGEiLCJ3aGlzcGVyIiwiYmxpbmQiLCJDaGF0TWVzc2FnZSIsImFwcGx5Um9sbE1vZGUiLCJkaWNlM2QiLCJzaG93Rm9yUm9sbCIsInVzZXIiLCJjb21iaW5lZFJvbGwiLCJwb29sIiwia2V5cyIsIm1hcCIsInBhcnNlSW50IiwicGVuYWx0eURpY2UiLCJib251c0RpY2UiLCJoYXNEU04iLCJqb2luIiwiZ3JvdXBzIiwiYmFzZURpZSIsImJhc2VTZXQiLCJvdXRwdXQiLCJtb2RpZmllciIsIm9mZnNldCIsInN0YXRpYyIsImNsYXNzIiwiZXZhbHVhdGVkIiwibnVtYmVyIiwiZmFjZXMiLCJtb2RpZmllcnMiLCJvcGVyYXRvciIsIkNvQzdJdGVtIiwiSXRlbSIsImNvbnN0cnVjdG9yIiwiZGF0YSIsImNvbnRleHQiLCJkb2N1bWVudENsYXNzZXMiLCJleHRlbmRlZCIsImltZyIsIl9jcmVhdGVEb2N1bWVudExpbmsiLCJldmVudERhdGEiLCJtYXRjaCIsInJlbGF0aXZlVG8iLCJKb3VybmFsRW50cnlQYWdlIiwiZG9jdW1lbnRDbGFzcyIsIml0ZW0iLCJmcm9tVXVpZCIsImljb25MYW5ndWFnZSIsIm1hbGZ1bmN0aW9uIiwidG9nZ2xlUHJvcGVydHkiLCJwcm9wZXJ0eUlkIiwib3ZlcnJpZGUiLCJmaXJlYXJtcyIsImNoZWNrZWRQcm9wcyIsImVyYXMiLCJDb0NJREVkaXRvciIsImVyYVRvZ2dsZSIsInByb3BlcnRpZXMiLCJza2lsbE5hbWUiLCJwYXJ0cyIsImdldE5hbWVQYXJ0c1NwZWMiLCJzcGVjaWFsaXphdGlvbiIsIm1lbGVlV2VhcG9uIiwicHJvcE5hbWUiLCJwcm9wVmFsdWUiLCJ0aGVuIiwiaGFzUHJvcGVydHkiLCJpc0luY2x1ZGVkSW5TZXQiLCJzaG9ydE5hbWUiLCJ1cGRhdGVSb2xsIiwic3BlY05hbWVSZWdleCIsIlJlZ0V4cCIsIkNvQzdVdGlsaXRpZXMiLCJxdW90ZVJlZ0V4cCIsImdldE5hbWVXaXRob3V0U3BlYyIsImlzQW55U3BlYyIsInRvTG93ZXJDYXNlIiwic2tpbGwiLCJndWVzc05hbWVQYXJ0cyIsImNoZWNrU2tpbGxQcm9wZXJ0aWVzIiwic2V0IiwiaW5kZXhPZiIsImZsYWdGb3JEZXZlbG9wZW1lbnQiLCJpc0dNIiwidW5mbGFnRm9yRGV2ZWxvcGVtZW50IiwiZGV2ZWxvcGVtZW50RmxhZyIsImdldEl0ZW1GbGFnIiwidG9nZ2xlSXRlbUZsYWciLCJmbGFnTmFtZSIsImVyYXNlQWRqdXN0bWVudCIsImZsYWdWYWx1ZSIsInVpIiwibm90aWZpY2F0aW9ucyIsInNldEl0ZW1GbGFnIiwidW5zZXRJdGVtRmxhZyIsImxvY2tlZCIsInVzZXNBbHRlcm5hdGl2ZVNraWxsIiwibWF4VXNlc1BlclJvdW5kIiwibXVsdGlTaG90IiwidXNlc1BlclJvdW5kIiwic2luZ2xlU2hvdCIsIm5vcm1hbCIsInVzZXNQZXJSb3VuZFN0cmluZyIsImJ1cnN0IiwibXVsdGlwbGVTaG90cyIsImJhc2VSYW5nZSIsInJhbmdlIiwibG9uZ1JhbmdlIiwibG9uZyIsImV4dHJlbWVSYW5nZSIsImV4dHJlbWUiLCJza2lsbFByb3BlcnRpZXMiLCJlbnRyaWVzIiwiY2FsY3VsYXRlQmFzZSIsImJhc2UiLCJwYXJzZWQiLCJzdGFydHNXaXRoIiwic3Vic3RyaW5nIiwiZ2V0UHJvcGVydHkiLCJmbG9vciIsIm1heGltaXplIiwiZXJyIiwiX2Jhc2UiLCJhc3luY0Jhc2UiLCJjb25zb2xlIiwicGFyZW50IiwiZ2V0QnVsbGV0TGVmdCIsImFtbW8iLCJzZXRCdWxsZXRzIiwicmVsb2FkIiwibWF4QnVsbGV0IiwiYnVsbGV0cyIsImFkZEJ1bGxldCIsIm1heEJ1bGxldHMiLCJzaG9vdEJ1bGxldHMiLCJ4IiwibWVyZ2VPcHRpb25hbFNraWxscyIsInNraWxsTGlzdCIsImNvbmNhdCIsInJlZHVjZSIsIm5ld0FycmF5Iiwic29ydCIsInNvcnRCeU5hbWVLZXkiLCJfZ2V0Q2hhdENhcmRBY3RvciIsImNhcmQiLCJ0b2tlbktleSIsInRva2VuSWQiLCJzY2VuZUlkIiwic3BsaXQiLCJhY3RvcnMiLCJ0b2tlbnMiLCJzY2VuZSIsInNjZW5lcyIsInRva2VuRGF0YSIsImdldEVtYmVkZGVkRG9jdW1lbnQiLCJUb2tlbiIsImFjdG9ySWQiLCJnZXRDaGF0RGF0YSIsImh0bWxPcHRpb25zIiwiZHVwbGljYXRlIiwiZGVzY3JpcHRpb24iLCJsYWJlbHMiLCJUZXh0RWRpdG9yIiwiZW5yaWNoSFRNTCIsInByb3BzIiwiZm4iLCJwIiwiX3dlYXBvbkNoYXREYXRhIiwid2VhcG9uUHJvcGVydGllcyIsInNraWxsTGFiZWwiLCJmb3VuZCIsIm1haW4iLCJpZCIsIml0ZW1zIiwiYWx0ZXJuYXRpdiIsImNhbkJlUHVzaGVkIiwiaW1wYWxlIiwiaXNEb2RnZSIsImNyZWF0ZUlubGluZVJvbGwiLCJjbHMiLCJ0aXRsZSIsImVzY2FwZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJrIiwiaW5uZXJIVE1MIiwiaXNDdHJsS2V5IiwibWV0YUtleSIsImN0cmxLZXkiLCJrZXlDb2RlIiwiY2hhdEhlbHBlciIsImh5cGhlblRvQ2FtZWxDYXNlIiwic3RyaW5nIiwicmVwbGFjZSIsInRvVXBwZXJDYXNlIiwiY3JlYXRlTWVzc2FnZSIsIm1lc3NhZ2UiLCJtZXNzYWdlRGF0YSIsImZsYXZvciIsInNwZWFrZXIiLCJnZXRTcGVha2VyIiwiQ09OU1QiLCJDSEFUX01FU1NBR0VfVFlQRVMiLCJXSElTUEVSIiwiUk9MTCIsIkRJQ0VfUk9MTF9NT0RFUyIsIlNFTEYiLCJjb250ZW50IiwiY3JlYXRlIiwibXNnIiwiY2FtZWxDYXNlVG9IeXBoZW4iLCJnZXRBY3RvckZyb21LZXkiLCJpc0RvY3VtZW50VXVpZCIsImlzRG9jdW1lbnRVdWlkUGFjayIsIlNmcm9tVXVpZCIsInRva2VuIiwiZ2V0VG9rZW5Gcm9tS2V5IiwiZ2V0U3BlYWtlckZyb21LZXkiLCJhY3RvcktleSIsImFsaWFzIiwiYXR0YWNoT2JqZWN0VG9FbGVtZW50Iiwib2JqZWN0IiwiZWxlbWVudCIsIm9iamVjdE5hbWUiLCJwcm9wIiwiZ2V0T2JqZWN0RnJvbUVsZW1lbnQiLCJkZXNlcmlhbGl6ZSIsIm9iaiIsIm9ialByb3AiLCJvYmpOYW1lIiwidG9TdHJpbmciLCJ0b2tlbkRvYyIsImdldEFjdG9yVG9rZW4iLCJwcm90b3R5cGVUb2tlbiIsImdldEFjdG9ySW1nRnJvbUtleSIsInRleHR1cmUiLCJzcmMiLCJnZXREaXN0YW5jZSIsInN0YXJ0VG9rZW4iLCJlbmRUb2tlbiIsImNlbnRlciIsImRpc3RhbmNlIiwiZ3JpZFVuaXQiLCJjYW52YXMiLCJncmlkIiwidW5pdHMiLCJyYXkiLCJSYXkiLCJzZWdtZW50IiwibWVhc3VyZURpc3RhbmNlcyIsImdyaWRTcGFjZXMiLCJlbGV2YXRpb24iLCJzcXJ0Iiwid2FybiIsInRvWWFyZHMiLCJDb0M3Um9sbCIsImdldEZyb21DYXJkIiwicm9sbERpdiIsInF1ZXJ5U2VsZWN0b3IiLCJyZXN1bHRUeXBlIiwic3VjY2Vzc0xldmVsIiwiQ29DN0NoZWNrIiwicmVndWxhciIsImZvcm1hdCIsImhhcmQiLCJjcml0aWNhbCIsImZ1bWJsZSIsImZhaWx1cmUiLCJpdGVtSWQiLCJza2lsbElkIiwic2hvd0RpY2VSb2xsIiwiZGljZVJlc3VsdHMiLCJkaWVSZXN1bHQiLCJkaWNlcyIsImRpY2VEYXRhIiwic2hvdyIsImdldEZyb21FbGVtZW50IiwiaGFzQm9udXMiLCJkaWNlTW9kaWZpZXIiLCJib251cyIsImJvbnVzVHlwZSIsInRlbkRpY2UiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZGllIiwic2VsZWN0ZWQiLCJpc01heCIsImlzTWluIiwidW5pdERpZSIsImluY3JlYXNlU3VjY2VzcyIsImlzbCIsIm5ld1N1Y2Nlc0xldmVsIiwibHVja05lZWRlZCIsImx1Y2tOZWVkZWRUeHQiLCJsdWNrTmVlZGVkVmFsdWUiLCJnZXRGcm9tQ2hlY2siLCJjaGVjayIsInJvbGxUeXBlIiwic2lkZSIsInJlZk1lc3NhZ2VJZCIsInJlZmVyZW5jZU1lc3NhZ2VJZCIsImRpZmZpY3VsdHkiLCJkaWNlTW9kIiwicmF3VmFsdWUiLCJpc0Z1bWJsZSIsImlzQ3JpdGljYWwiLCJjaGFyYWN0ZXJpc3RpYyIsImlzVG9rZW4iLCJhdHRhY2hDaGVja1RvRWxlbWVudCIsImh0bWxFbGVtZW50IiwiYXR0YWNoVG9FbGVtZW50IiwiQ29DN0RhbWFnZSIsImdldE1haW5EaWUiLCJkYW1hZ2VTdHJpbmciLCJkYW1hZ2UiLCJyb2xscyIsInIiLCJBdmVyYWdlUGFyZW50aGV0aWNhbFRlcm0iLCJQYXJlbnRoZXRpY2FsVGVybSIsIl9ldmFsdWF0ZVN5bmMiLCJBdmVyYWdlUm9sbCIsInRlcm0iLCJldmFsdWF0ZSIsIm1pbmltaXplIiwiZm9yRWFjaCIsIlJvbGxUZXJtIiwiRXJyb3IiLCJpc0ludGVybWVkaWF0ZSIsIl9kaWNlIiwiTnVtZXJpY1Rlcm0iLCJzaW1wbGlmeVRlcm1zIiwiX2V2YWx1YXRlZCIsIl90b3RhbCIsIl9ldmFsdWF0ZVRvdGFsIiwiX3NwbGl0UGFyZW50aGVzZXMiLCJfZm9ybXVsYSIsIl9zcGxpdEdyb3VwIiwib3BlblJlZ2V4cCIsIk9QRU5fUkVHRVhQIiwiY2xvc2VSZWdleHAiLCJDTE9TRV9SRUdFWFAiLCJvcGVuU3ltYm9sIiwiY2xvc2VTeW1ib2wiLCJvbkNsb3NlIiwiZ3JvdXAiLCJvcGVuIiwiZXhwcmVzc2lvbiIsImFyZ3MiLCJfc3BsaXRNYXRoQXJncyIsIk1hdGhUZXJtIiwiQWN0b3JQaWNrZXJEaWFsb2ciLCJGb3JtQXBwbGljYXRpb24iLCJkZWZhdWx0T3B0aW9ucyIsIm1lcmdlT2JqZWN0IiwiY2xhc3NlcyIsInRlbXBsYXRlIiwiY2xvc2VPblN1Ym1pdCIsIndpZHRoIiwiaGVpZ2h0IiwiYWN0aXZhdGVMaXN0ZW5lcnMiLCJodG1sIiwib24iLCJfb25QaWNrIiwiaG92ZXIiLCJfb25Ib3ZlckluIiwiX29uSG92ZXJPdXQiLCJfb25TdWJtaXRCdXR0b24iLCJsIiwicGFyZW50RWxlbWVudCIsImNoaWxkcmVuIiwidG9nZ2xlIiwiZW50cnlVdWlkIiwicmVhZHkiLCJpc1Zpc2libGUiLCJjb250cm9sbGVkIiwiaG92ZXJPdXRPdGhlcnMiLCJfaGlnaGxpZ2h0ZWQiLCJyZXNvbHZlIiwiY2xvc2UiLCJhbGxvd2VkVHlwZXMiLCJwbGFjZWFibGVzIiwib3duZXJzaGlwIiwiZGVmYXVsdCIsIkRPQ1VNRU5UX09XTkVSU0hJUF9MRVZFTFMiLCJPV05FUiIsImZvdW5kSURzIiwib3B0aW9uIiwiaXNUb2tlbkRvY3VtZW50IiwiVG9rZW5Eb2N1bWVudCIsInBvcnRyYWl0IiwiY2FuUGluZyIsImNoYXJhY3RlciIsImRlZmF1bHRPcHRpb24iLCJQcm9taXNlIiwiQ29DN0dyb3VwTWVzc2FnZSIsInJlbW92ZVJvbGwiLCJtZXNzYWdlSWQiLCJtZXNzYWdlcyIsInJvbGxTdGF0dXNlcyIsIndoaWNoIiwidXBkYXRlcyIsInVwZGF0ZVRoZUdyb3VwTWVzc2FnZSIsInB1c2hNeVJvbGwiLCJnbUlkIiwiY2FuVXNlck1vZGlmeSIsImdldEFuSWRGb3JHbSIsInBlcmZvcm1Db21iaW5lZFJvbGwiLCJwdXNoaW5nIiwicGVyZm9ybU5vcm1hbFJvbGwiLCJzcGVuZE15THVjayIsImNvbXBsZXRlZCIsImx1Y2tBbW91bnQiLCJpbmRleCIsImx1Y2tUb1NwZW5kIiwiZ2V0QWN0b3IiLCJhY3RvclV1aWQiLCJzcGVuZEx1Y2siLCJlcnJvciIsImluY3JlYXNlTHVja1NwZW5kIiwiSlNPTlJvbGxEYXRhIiwic29ja2V0IiwiZW1pdCIsImxpc3RlbmVyIiwidXBncmFkZUNoZWNrIiwiZm9yY2VQYXNzIiwicm9sbERhdGEiLCJwYXJzZVJvbGxzIiwicXVpY2siLCJhc3NpZ24iLCJleHBhbmRPYmplY3QiLCJwZXJmb3JtRGVsZXRpb25zIiwiYWxsUm9sbHNDb21wbGV0ZWQiLCJpc1N1Y2Nlc3MiLCJpc0ZhaWx1cmUiLCJzdWNjZXNzZXMiLCJmYWlsdXJlcyIsImNvbWJpbmVkIiwiaXNUaWUiLCJpc0NvbWJhdCIsInJvbGxPcmRlciIsIkFycmF5IiwiZnJvbSIsIkludDhBcnJheSIsInN1YnN0ciIsInN1Y2Nlc3NMZXZlbHMiLCJkZWZlbmRlcklzRG9kZ2luZyIsInBhc3NlZCIsImlzRG9kZ2luZyIsImlzQXR0YWNrZXIiLCJhZHZhbnRhZ2VBdHRhY2tlciIsImFkdmFudGFnZURlZmVuZGVyIiwiYmVzdCIsIm5lZWRzVGllQnJlYWtlciIsInJlc3VsdFRleHQiLCJyb2xsSXNXaW5uZXIiLCJyb2xsSXNUaWUiLCJpc1dpbm5lciIsImlzTWFuZXV2ZXIiLCJvcHBvc2VkUm9sbFRpZUJyZWFrZXIiLCJiIiwibW9kaWZpZWRSZXN1bHQiLCJvZmZzZXRNYXgiLCJmYWlsZWQiLCJpIiwicmVuZGVyVGVtcGxhdGUiLCJnZXRUZW1wbGF0ZVBhdGgiLCJ1cGRhdGVUaGVNZXNzYWdlIiwiZ2V0Q2hlY2siLCJjaGVja0RhdGEiLCJ0aGVSb2xsIiwiZGVueVB1c2giLCJhdHRyaWJ1dGUiLCJwdXNoYWJsZSIsInBlcmZvcm1Sb2xsIiwiX3BlcmZvcm0iLCJmb3JjZURTTiIsImZpcnN0Iiwic2lsZW50IiwicGVyZm9ybU15Um9sbHMiLCJuYW1lUm9sbCIsInNldFRpbWVvdXQiLCJmdWxsTmFtZSIsInRhZ3MiLCJwZXJjZW50IiwibmV3R3JvdXBNZXNzYWdlIiwicm9sbHNCeVVzZXIiLCJyb2xsUmVxdWlyZXNOYW1lIiwiYXNVc2VySWQiLCJhdXRvUm9sbCIsInJvbGxpbmciLCJ0ZW1wbGF0ZURhdGEiLCJ1c2VySWQiLCJpc1VzZXJBY3RpdmUiLCJ1c2VycyIsIl9vblRvZ2dsZSIsImJ1dHRvbiIsImNvbnRhaW5zIiwiX29uQ2xpY2siLCJva2F5IiwicmVuZGVyQ2hhdE1lc3NhZ2UiLCJjYW5Nb2RpZnkiLCJnbSIsImFueSIsInJlbW92ZSIsImlkZW50aWZpZXIiLCJhcGkiLCJjb2NpZCIsImZyb21Db0NJRCIsIm0iLCJkaWZmaWN1bHR5TGV2ZWwiLCJ1bmtub3duIiwiZGVmYXVsdFV1aWQiLCJ1IiwiZ2V0Q2hhcmFjdGVyaXN0aWNOYW1lcyIsInNob3J0IiwiY2hhcmFjdGVyaXN0aWNzIiwic2tpbGxzIiwiZ2V0SXRlbU9yQWRkIiwiaXNXZWFwb24iLCJjcmVhdGVHcm91cE1lc3NhZ2UiLCJjb25maWciLCJzaG93Q29tcGxldGVkUm9sbHMiLCJpc0VkaXRhYmxlIiwid2lubmVyUm9sbHNEYW1hZ2UiLCJ3YXNQdXNoZWQiLCJyb2xsUmVxdWlzaXRlcyIsInJvbGxhYmxlIiwiQ2hhdENhcmRBY3RvciIsImZhc3RGb3J3YXJkIiwiZGlzcGxheUFjdG9yT25DYXJkIiwiaXNCbGluZCIsIl9pc0JsaW5kIiwiX3JvbGxNb2RlIiwid2VhcG9uIiwidGFyZ2V0ZWRUb2tlbnMiLCJ0YXJnZXRzIiwidGFyZ2V0IiwidGFyZ2V0VG9rZW4iLCJ0YXJnZXRBY3RvciIsIl90YXJnZXRUb2tlbiIsIl90YXJnZXRLZXkiLCJwb3AiLCJfdGFyZ2V0QWN0b3IiLCJ0YXJnZXRLZXkiLCJoYXNUYXJnZXQiLCJnZXRXZWFwb25Ta2lsbHMiLCJ0YXJnZXRJbWciLCJ0YXJnZXROYW1lIiwiYWN0b3JJbWciLCJzYXkiLCJzcGVha2VyRGF0YSIsImdldFdoaXNwZXJSZWNpcGllbnRzIiwicmVwbGFjZXIiLCJTYW5DaGVja0NhcmQiLCJzYW5EYXRhIiwiQm9vbGVhbiIsInNhblJlYXNvbiIsInNhbk1vZGlmaWVyIiwic2FuRGlmZmljdWx0eSIsInN0YXRlIiwic2FuTG9zc1NvdXJjZSIsImludm9sdW50YXJ5QWN0aW9uIiwic2FuUm9sbGVkIiwic2FuQ2hlY2siLCJzYW5Mb3NzRm9ybXVsYSIsInNhbk1heCIsInNhbk1pbiIsInNhbkxvc3RUb1JlYXNvbiIsIm1heFBvc3NpYmxlU2FuTG9zcyIsIm1heExvc3NUb1NhblJlYXNvbiIsIm1heFNhbkxvc3MiLCJzYW5Mb3NzUmVhc29uRW5jb3VudGVyZWQiLCJmaXJzdEVuY291bnRlciIsIm15dGhvc0luc2FuaXR5RXhwZXJpZW5jZWQiLCJpc0FjdG9yTG9vc2luZ1NhbiIsImhhc1RlbXBvSW5zYW5lIiwiaW1tdW5lVG9DcmVhdHVyZSIsImJvdXREdXJhdGlvblRleHQiLCJib3V0RHVyYXRpb24iLCJib3V0UmVhbFRpbWUiLCJib3V0U3VtbWFyeSIsInlvdUdhaW5DdGh1bGh1TXl0aG9zU3RyaW5nIiwibXl0aG9zR2FpbiIsImFkdmFuY2VTdGF0ZSIsImtlZXBDcmVhdHVyZVNhbkRhdGEiLCJmaW5pc2giLCJhcHBseVNhbkxvc3MiLCJib3V0UmVzdWx0IiwiZW50ZXJCb3V0T2ZNYWRuZXNzIiwiYm91dE9mTWFkbmVzc1Jlc29sdmVkIiwiYm91dE9mTWFkbmVzc092ZXIiLCJ0cmlnZ2VySW5zYW5pdHkiLCJ1bnNldENvbmRpdGlvbiIsImN0aHVsaHVNeXRob3NBd2FyZGVkIiwiYW1vdW50R2FpbmVkIiwiZXhwZXJpZW5jZUZpcnN0TXl0aG9zSW5zYW5pdHkiLCJjdGh1bGh1TXl0aG9zU2tpbGwiLCJvbGRWYWx1ZSIsImFkanVzdG1lbnRzIiwiZXhwZXJpZW5jZSIsImJ5cGFzc1JvbGxTYW4iLCJpc0J5cGFzc2VkIiwiaW52b2x1bnRhcnlBY3Rpb25QZXJmb3JtZWQiLCJzYW5Mb3NzUm9sbGVkIiwiaWdub3JlU2FuQ2hlY2siLCJzYW5Mb3NzIiwicm9sbFNhbiIsImxpbWl0ZWRMb3NzVG9DcmVhdHVyZSIsImltbXVuZUFscmVhZHlJbkJvdXQiLCJzYW5Mb3NzQXBwbGllZCIsImludFJvbGxlZCIsImluc2FuaXR5Iiwicm9sbFNhbkxvc3MiLCJzYW5Mb3NzUm9sbCIsImxvb3NlU2FuIiwiYWN0b3JMb3N0U2FuIiwic2FuIiwicGVybWFuZW50bHlJbnNhbmUiLCJoYXNJbmRlZkluc2FuZSIsInNoYWtlbiIsImluc2FuaXR5VGFibGVSb2xsZWQiLCJkYWlseVNhbkxvc3MiLCJkYWlseVNhbkxpbWl0IiwidGVtcG9yYXJ5SW5zYW5lIiwiaW5kZWZpbml0ZWx5SW5zYW5lIiwibWVtb3J5UmVwcmVzc2VkIiwicm9sbEludCIsImludENoZWNrIiwiaW50RGlmZmljdWx0eSIsImludE1vZGlmaWVyIiwiYWxyZWFkeUluc2FuZSIsInNldENvbmRpdGlvbiIsImNsZWFyU2FuTG9zc1JlYXNvbiIsInNldFJlYXNvblNhbkxvc3MiLCJ1cGRhdGVDaGF0Q2FyZCIsIl9faW5saW5lU2FuQ2hlY2siLCJpbmxpbmVDaGVjayIsIm91dGVySFRNTCIsIl9faW5saW5lU2FuTG9zc1JvbGwiLCJfX2lubGluZUludENoZWNrIiwiaHRtbENhcmRFbGVtZW50IiwiJCIsInBhcnNlSFRNTCIsImNoYXRNZXNzYWdlIiwiY2hhdCIsInVwZGF0ZU1lc3NhZ2UiLCJjaGVja1RhcmdldHMiLCJjaGF0Q2FyZCIsImdldEZyb21NZXNzYWdlSWQiLCJodG1sQ2FyZCIsInNhbkNoZWNrQ2FyZERhdGEiLCJwYXJzZSIsInVuZXNjYXBlIiwic2FuQ2hlY2tDYXJkIiwiQ29DN0xpbmsiLCJDSEVDS19UWVBFIiwiQ0hFQ0siLCJTQU5MT1NTIiwiSVRFTSIsIkVGRkVDVCIsIkxJTktfVFlQRSIsIkNIQVJBQ1RFUklTVElDIiwiQVRUUklCVVRFIiwiU0tJTEwiLCJpbml0IiwiYm9keSIsIl9vbkxpbmtDbGljayIsIl9vbkRyYWdDb0M3TGluayIsImVucmljaGVycyIsInBhdHRlcm4iLCJlbnJpY2hlciIsIl9jcmVhdGVMaW5rIiwiX2xpbmtGcm9tRXZlbnQiLCJvbGRUeXBlIiwibGlua1R5cGUiLCJsaW5rSWNvbiIsImRpc3BsYXlOYW1lIiwiaW5uZXJUZXh0IiwiY29udmVydERpZmZpY3VsdHkiLCJvcmlnaW5hbEV2ZW50IiwiZGF0YVRyYW5zZmVyIiwic2V0RGF0YSIsImZyb21Ecm9wRGF0YSIsImNoYW5nZXMiLCJleHRlcm5hbCIsIm1hdGNoZXMiLCJtYXRjaEFsbCIsImRpZmZpY3VsdHlTdHJpbmciLCJodW1hbk5hbWUiLCJjb2NJZE5hbWUiLCJkcmFnZ2FibGUiLCJwYWNrIiwibGluayIsIl9vbkxpbmtBY3RvckNsaWNrIiwiY2hhcmFjdGVyaXN0aWNDaGVjayIsInNoaWZ0S2V5Iiwic2tpbGxDaGVjayIsImF0dHJpYnV0ZUNoZWNrIiwid2VhcG9uQ2hlY2siLCJ0b0NoYXRNZXNzYWdlIiwidG9XaGlzcGVyTWVzc2FnZSIsIm93bmVycyIsIkNvQzdDb250ZW50TGlua0RpYWxvZyIsImdldFNwZWFrZXJBY3RvciIsIk9CU0VSVkVSIiwic2V0VmFsdWUiLCJjaGVja1R5cGUiLCJjaGVja05hbWUiLCJpc0NoYXJhY3RlcmlzdGljQ2hlY2siLCJDb0NBY3RvciIsImdldENoYXJhY3RlcmlzdGljRGVmaW5pdGlvbiIsImMiLCJpc0NoZWNrIiwiaXNBdHRyaWJ1dGVDaGVjayIsImlzU2tpbGxDaGVjayIsImlzSXRlbUNoZWNrIiwiaXNTYW5Mb3NzQ2hlY2siLCJpc0VmZmVjdCIsImlzUHVzaGluZyIsImRyYWdEcm9wIiwiZHJhZ1NlbGVjdG9yIiwiZHJvcFNlbGVjdG9yIiwidGFicyIsIm5hdlNlbGVjdG9yIiwiY29udGVudFNlbGVjdG9yIiwiaW5pdGlhbCIsImdldERhdGEiLCJzaGVldERhdGEiLCJhdHRyaWJ1dGVUeXBlIiwiZWZmZWN0TW9kZXMiLCJBQ1RJVkVfRUZGRUNUX01PREVTIiwiY2hhcmFjdGVyaXN0aWNUeXBlIiwiZnJvbUdhbWUiLCJmcm9tRGlyZWN0b3J5IiwiaGFzSUQiLCJmcm9tQ29tcGVuZGl1bSIsImlzU2V0RnJvbUdhbWUiLCJhY3Rvck5hbWVzIiwiX29uQ2hhbmdlU3VibWl0IiwiY2xpY2siLCJfb25FZmZlY3RDb250cm9sIiwiX29uU3VibWl0IiwiX2FkZEVmZmVjdENoYW5nZSIsImlkeCIsInN1Ym1pdCIsInByZXZlbnRDbG9zZSIsInVwZGF0ZURhdGEiLCJtb2RlIiwiQUREIiwiX3VwZGF0ZU9iamVjdCIsImZvcm1EYXRhIiwiaGFzRWZmZWN0IiwidGludCIsInJvdW5kcyIsInR1cm5zIiwic3VibWl0dGVyIiwiY29weVRvQ2xpcGJvYXJkIiwiX29uRHJvcCIsImRhdGFTdHJpbmciLCJzZXRMaW5rIiwiZG9jdW1lbnROYW1lIiwiZGF0YUxpc3QiLCJnZXREYXRhRnJvbURyb3BFdmVudCIsImhhc01vZGlmaWVycyIsImhhc0xhYmVsIiwiaGFzSWNvbiIsImxpbmtEYXRhIiwiZGlhbG9nIiwiUm9sbERpYWxvZyIsInVua25vd25EaWZmaWN1bHR5RGVmYXVsdCIsImFsbG93RmxhdERpY2VNb2RpZmllciIsImRpc2FibGVGbGF0RGljZU1vZGlmaWVyIiwiYWxsb3dGbGF0VGhyZXNob2xkTW9kaWZpZXIiLCJkaXNhYmxlRmxhdFRocmVzaG9sZE1vZGlmaWVyIiwiaGlkZURpZmZpY3VsdHkiLCJjYXJkVHlwZSIsImZvcmNlZENhcmRUeXBlIiwiY2FyZFR5cGVzIiwiQ29DN0NoYXRNZXNzYWdlIiwiZGxnIiwiRGlhbG9nIiwiYnV0dG9ucyIsImNhbGxiYWNrIiwiRm9ybURhdGEiLCJSb2xsQ2FyZCIsImluaXRpYXRvciIsImZyb21NZXNzYWdlSWQiLCJmcm9tTWVzc2FnZSIsImNhcmRFbGVtZW50IiwiZnJvbUhUTUxDYXJkRWxlbWVudCIsImNhcmREYXRhIiwicm9sbGVkIiwiX2h0bWxSb2xsIiwiZ2V0SHRtbFJvbGwiLCJzcGFuIiwiZmxhZyIsInVuc2V0RmxhZyIsInNldEZsYWciLCJ0b2dnbGVGbGFnIiwiZGlzcGF0Y2giLCJjb2xsZWN0aW9uIiwiZGVmYXVsdENvbmZpZyIsInRpbWVzdGFtcCIsInByb2Nlc3MiLCJyZXNvbHZlT2xkIiwiY2xvc2VDYXJkIiwidG9NZXNzYWdlIiwiY29tcHV0ZSIsImNsb3NlZCIsImZyb21HTSIsInJhbmsiLCJhZGRSb2xsRGF0YSIsImFkZFJvbGwiLCJzcGxpY2UiLCJfbWVzc2FnZSIsIl9tZXNzYWdlSWQiLCJleGNsdWRlIiwiZXhjbHVkZVN0YXJ0V2l0aCIsIndpbm5lcnMiLCJ3aW5uZXIiLCJsb29zZXJzIiwibG9vc2VyIiwiaGFzV2lubmVyIiwiaXNLZWVwZXIiLCJDb21iaW5lZENoZWNrQ2FyZCIsImJpbmRMaXN0ZXJuZXJzIiwic3VjY2Vzc0NvdW50IiwibWFpbkFjdG9yS2V5Iiwic3VjY2VzcyIsImFsbCIsImNoZWNrR01Jbml0aWF0b3IiLCJfcm9sbCIsImhpZGVTdWNjZXNzIiwiYXNzaWduUm9sbCIsIkF1ZGlvSGVscGVyIiwicGxheSIsInNvdW5kcyIsImFsdGVyIiwiZmxhdERpY2VNb2RpZmllciIsImZsYXRUaHJlc2hvbGRNb2RpZmllciIsImhpZGVEaWNlUmVzdWx0IiwiSW50ZXJhY3RpdmVDaGF0Q2FyZCIsIl9vcHRpb25zIiwiY3NzQ2xhc3NlcyIsIm9wdGlvbm5hbENoYXREYXRhIiwiY2FyZENsYXNzIiwiX29uQnV0dG9uIiwiX29uS2V5IiwiYmluZExpc3RlbmVycyIsImdldE93blByb3BlcnR5TmFtZXMiLCJjYXJkcyIsInR5cGVkQ2FyZCIsImFzc2lnbk9iamVjdCIsIl91cGRhdGUiLCJmb3JtcyIsImZvcm0iLCJGb3JtRGF0YUV4dGVuZGVkIiwiZGlmZk9iamVjdCIsImlzVGFyZ2V0T3duZXIiLCJpc093bmVyIiwiRGFtYWdlQ2FyZCIsImRhbWFnZVJvbGwiLCJfaW1wYWxlIiwiaXNEYW1hZ2VGb3JtdWxhIiwiZGFtYWdlRm9ybXVsYSIsInZhbGlkYXRlIiwiaXNEYW1hZ2VOdW1iZXIiLCJpc0FybW9yRm9ydWxhIiwidG90YWxEYW1hZ2VTdHJpbmciLCJpZ25vcmVBcm1vciIsIm5vRGFtYWdlIiwicm9sbERhbWFnZSIsImhhcmRyb2xsZWQiLCJkYW1hZ2VJbmZsaWN0ZWQiLCJkZWFsRGFtYWdlIiwiX2h0bWxJbmxpbmVSb2xsIiwicm9sbEFybW9yIiwiZGVhbERhbWFnZVRvU2VsZWN0ZWRUYXJnZXQiLCJzZWxlY3RlZFBsYXllcnMiLCJvbmUiLCJjb25maXJtRGFtYWdlIiwidHdvIiwiaW5jbHVlcyIsInRyaW0iLCJtYXhEYW1hZ2UiLCJyb2xsU3RyaW5nIiwiX2FybW9yIiwiT3Bwb3NlZENoZWNrQ2FyZCIsImF0dGFja2VyUm9sbCIsImF0dGFja2VyIiwiZGVmZW5kZXJSb2xsIiwiZGVmZW5kZXIiLCJkb2RnZVNraWxsIiwiX2FhIiwiX2FkIiwid2lubmVyQ291bnQiLCJpc0F0dGFja01hbmV1dmVyIiwiZGFtYWdlQ2hhdENhcmQiLCJpc0V4dHJlbWVTdWNjZXNzIiwidGllIiwicmVzb2x2ZWQiLCJ3aW5Db3VudCIsIlNhbkRhdGFEaWFsb2ciLCJfdG9nZ2xlSW5wdXQiLCJWYWxpZGF0ZSIsIlJPTExfVFlQRV9BVFRSSUJVVEUiLCJST0xMX1RZUEVfQ0hBUkFDVEVSSVNUSUMiLCJST0xMX1RZUEVfQ09NQkFUIiwiUk9MTF9UWVBFX1NLSUxMIiwiUk9MTF9UWVBFX0VOQ09VTlRFUiIsIkNBUkRfVFlQRV9DT01CSU5FRCIsIkNBUkRfVFlQRV9HUk9VUCIsIkNBUkRfVFlQRV9OT1JNQUwiLCJDQVJEX1RZUEVfT1BQT1NFRCIsIkNBUkRfVFlQRV9TQU5fQ0hFQ0siLCJDQVJEX1RZUEVfTk9ORSIsInNlbGVjdCIsIm5vcm1hbGl6ZVJlcXVlc3QiLCJza2lsbElkcyIsImdldFNraWxsc0J5TmFtZSIsImFsdEtleSIsImNyZWF0ZUVuY291bnRlciIsIm9wZW5MaW5rVG9vbCIsInNlbmRUb0NoYXQiLCJzZW5kVG9DbGlwYm9hcmQiLCJwcmV2ZW50U3RhbmRieSIsImRpYWxvZ09wdGlvbnMiLCJhdHRyaWIiLCJ3ZWFwb25BbHRTa2lsbCIsIndlYXBvbk5hbWUiLCJoYXNQbGF5ZXJPd25lciIsInRyaWdnZXIiLCJjcmVhdGVMaW5rIiwiaXRlbU1vZGlmaWVycyIsImZvdW5kcnlJRCIsImNyZWF0ZVJvbGwiLCJydW5Sb2xsIiwiY2hlY2tQYXNzZWQiLCJjaGVja0ZhaWxsZWQiLCJpbmZvcyIsInVzYWdlIiwicHJvbXB0TGFiZWwiLCJzdGFuZGJ5Iiwicm9sbEF0dHJpYnV0ZSIsInJvbGxDaGFyYWN0ZXJpc3RpYyIsInJvbGxlZFN1Y2Nlc3NMZXZlbCIsInJlZ3VsYXJUaHJlc2hvbGQiLCJoYXJkVGhyZXNob2xkIiwiZXh0cmVtZVRocmVzaG9sZCIsIkNvQzdDb25DaGVjayIsIl9hY3RvcklkIiwiaXNSb2xsZWQiLCJjb25DaGVjayIsImh0bWxDaGVjayIsImdldENoZWNrRWxlbWVudCIsInJvbGxDb24iLCJyZXBsYWNlV2l0aCIsInN0YXlBbGl2ZSIsImFwcGxpZWQiLCJTa2lsbFNlbGVjdERpYWxvZyIsIl9vblNlbGVjdFNraWxsQ2xpY2tlZCIsInN0eWxlIiwiZGlzcGxheSIsImFkZGVkIiwib3B0aW9uc0NvdW50IiwiUG9pbnRTZWxlY3REaWFsb2ciLCJfb25TZWxlY3RDaGFyYWN0ZXJpc3RpYyIsIl9vbkJ1dHRvbkNsaWNrZWQiLCJpdGVtTGlzdCIsIm9wdGlvbmFsIiwidG9nZ2xlQ2xhc3MiLCJDaGFyYWNTZWxlY3REaWFsb2ciLCJDaGFyYWNSb2xsRGlhbG9nIiwiX29uQ2hhbmdlSW5wdXQiLCJfb25Sb2xsQ2hhcmFjdGVyaXN0aWMiLCJfb25JbmNyZWFzZUNoYXJhY3RlcmlzdGljIiwiX29uRGVjcmVhc2VDaGFyYWN0ZXJpc3RpYyIsIl9vblJlc2V0Q2hhcmFjdGVyaXN0aWMiLCJjaGFyYWNLZXkiLCJpbmNyZWFzZUNoYXJhY3RlcmlzdGljIiwiZGVjcmVhc2VDaGFyYWN0ZXJpc3RpYyIsInJlc2V0Q2hhcmFjdGVyaXN0aWMiLCJjaGFyIiwiY2hlY2tUb3RhbCIsIl9lbGVtZW50IiwiaW5wdXQiLCJsaXN0IiwicG9pbnRzIiwidmFsaWRhdGlvbiIsImVuYWJsZWQiLCJ2YWwiLCJwb2ludHNXYXJuaW5nIiwiU2tpbGxTcGVjU2VsZWN0RGlhbG9nIiwic3BlY2lhbGl6YXRpb25OYW1lIiwiYmFzZVZhbHVlIiwiaGFzU2tpbGxzIiwiU2tpbGxTcGVjaWFsaXphdGlvblNlbGVjdERpYWxvZyIsIl9vbkNsaWNrU3VibWl0IiwiX29uU2VsZWN0Q2hhbmdlIiwiYWxsb3dDdXN0b20iLCJmaXhlZEJhc2VWYWx1ZSIsImFsbG93U2VsZWN0IiwiU2tpbGxWYWx1ZURpYWxvZyIsIkNvQzdNZWxlZVJlc29sdGlvbiIsImluaXRpYXRvck1lc3NhZ2UiLCJ0YXJnZXRNZXNzYWdlIiwicHJlQ3JlYXRlTWVzc2FnZSIsIkNvQzdNZWxlZVRhcmdldCIsIkNvQzdNZWxlZUluaXRpYXRvciIsImluaXRpYXRvclRva2VuIiwicmVzdWx0U3RyaW5nIiwid2lubmVySW1nIiwid2lubmVyVGl0bGUiLCJjcml0aWNhbERhbWFnZSIsImRvY3VtbWVudCIsInBhcmVudE1lc3NhZ2VJZCIsImluaXRpYXRvcktleSIsIm91dG51bWJlcmVkIiwic3VycHJpc2VkIiwiYXV0b1N1Y2Nlc3MiLCJhZHZhbnRhZ2UiLCJkaXNhZHZhbnRhZ2UiLCJkb2RnaW5nIiwibm90UmVzcG9uZGluZyIsImZpZ2h0aW5nQmFjayIsIm1hbmV1dmVyaW5nIiwiYWN0aW9uU2VsZWN0ZWQiLCJfaW5pdGlhdG9yS2V5IiwiX2luaXRpYXRvciIsIm1lbGVlSW5pdGlhdG9yIiwidXBkYXRlQ2FyZFN3aXRjaCIsInB1Ymxpc2hVcGRhdGUiLCJjYW1lbEZsYWciLCJjcmVhdGVDaGF0Q2FyZCIsImdtcyIsInByb21wdCIsImdldFVwZGF0ZWRDaGF0Q2FyZCIsInVwZGF0ZVNlbGVjdGVkIiwid2VhcG9uSWQiLCJwZXJmb3JtU2tpbGxDaGVjayIsInB1Ymxpc2giLCJpc1Vua29ud24iLCJwdWJsaXNoTm9SZXBvbnNlUmVzdWx0IiwicmVzb2x1dGlvbkNhcmQiLCJyZXNvbHV0aW9uTWVzc2FnZSIsInB1Ymxpc2hDaGVja1Jlc3VsdCIsInJvbGxJY29ucyIsInJvbGxDb2xvciIsInJvbGxUaXRsZSIsInVwZ3JhZGVSb2xsIiwibmV3U3VjY2Vzc0xldmVsIiwib2xkQ2FyZCIsImx1Y2tTcGVudCIsInByb2Nlc3NlZCIsImRpY2VSb2xscyIsInJlc3VsRGV0YWlscyIsImRpY2VUb3RhbCIsIkNvQzdDaGF0IiwiQ29DN1JhbmdlSW5pdGlhdG9yIiwiY292ZXIiLCJ0YXJnZXRDYXJkIiwiZnVsbEF1dG8iLCJhaW1lZCIsInRvdGFsQnVsbGV0c0ZpcmVkIiwiX3RhcmdldHMiLCJDb0M3UmFuZ2VUYXJnZXQiLCJyb3VuZGVkRGlzdGFuY2UiLCJyb3VuZCIsImRpc3RhbmNlVW5pdCIsImRpc3RJbllkIiwicG9pbnRCbGFua1JhbmdlIiwib3V0T2ZSYW5nZSIsIm1haW5XZWFwb25Ta2lsbCIsImF1dG9XZWFwb25Ta2lsbCIsImF1dG9GaXJlIiwibXVsdGlUYXJnZXQiLCJhaW1pbmciLCJfYWltaW5nIiwiZ2V0QWN0b3JGbGFnIiwiYWN0aXZlVGFyZ2V0Iiwic2hvdHMiLCJfc2hvdHMiLCJjdXJyZW50U2hvdFJhbmsiLCJhY3RpdmVUYXJnZXRTaG90RGlmZmljdWx0eSIsInNob3REaWZmaWN1bHR5IiwiZGlkQW55U2hvdEhpdCIsImFueUhpdCIsInN1Y2Nlc3NmdWxIaXRzIiwiaGl0cyIsImhpdCIsInNob3QiLCJzaG90RmlyZWQiLCJ0b3RhbEFtbW8iLCJtYXhTaG90cyIsImlnbm9yZUFtbW8iLCJpZ25vcmVVc2VzUGVyUm91bmQiLCJvdXRPZkFtbW8iLCJvdXRPZlNob3RzIiwidm9sbGV5U2l6ZSIsIl92b2xsZXlTaXplIiwiaXNWb2xsZXlNaW5TaXplIiwiaXNWb2xsZXlNYXhTaXplIiwiZ2V0VGFyZ2V0RnJvbUtleSIsImNhbGNUYXJnZXRzRGlmZmljdWx0eSIsImRpZmZpY3VsdHlOYW1lIiwiaW1wb3NzaWJsZSIsImxldmVsIiwiYWRkU2hvdEF0Q3VycmVudFRhcmdldCIsImFjdG9yTmFtZSIsImJ1bGxldHNTaG90IiwidHJhbnNpdEJ1bGxldHMiLCJidWxsZXRzU2hvdFRyYW5zaXQiLCJ0cmFuc2l0IiwiYnVsbGV0TGVmdCIsInByZXZpb3VzU2hvdCIsInJlc29sdmVDYXJkIiwid2VhcG9uTWFsZnVuY3Rpb24iLCJzaG9vdEF0VGFyZ2V0IiwiaGFzTWFsZnVuY3Rpb24iLCJidWxsZXRGaXJlZCIsImRldGFpbHMiLCJjaGFuZ2VWb2xsZXlTaXplIiwicGFzc1JvbGwiLCJyb2xsSW5kZXgiLCJ1cGdyYWRlaW5kZXgiLCJpbmNyZWFzZWRTdWNjZXNzIiwicmFuZ2VJbml0aWF0b3IiLCJjYXJkVGFyZ2V0cyIsImNhcmRTaG90cyIsImRhbWFnZVJvbGxzIiwiZHIiLCJoIiwiZGFtYWdlRGllIiwiY3JpdGljYWxEYW1hZ2VGb3JtdWxhIiwiY3JpdGljYWxEYW1hZ2VEaWUiLCJpbXBhbGluZ1Nob3RzIiwic3VjY2Vzc2Z1bFNob3RzIiwiZGVhbHQiLCJkYW1hZ2VSb2xsZWQiLCJkSW5kZXgiLCJ0b3RhbFRha2VuIiwidG90YWxBYnNvcmJlZCIsInJJbmRleCIsImRlYWx0QW1vdW50IiwidGFrZW4iLCJhYnNvcmJlZCIsImRhbWFnZURlYWx0IiwiaW5NZWxlZSIsImJpZyIsIl9iaWciLCJidWlsZCIsInNtYWxsIiwiX3NtYWxsIiwiaXNGYXN0IiwibW92IiwiZmFzdCIsIl9mYXN0IiwiX2FjdG9yIiwiX3Rva2VuIiwic2l6ZVRleHQiLCJzaXplTGFiZWwiLCJjaGFuZ2VEaXNwbGF5ZWRUYXJnZXQiLCJDSEFUX0NPQzdfTUVTU0FHRSIsInJlbmRlckNoYXRNZXNzYWdlSG9vayIsImZha2VSb2xsTWVzc2FnZSIsInBsYXllcnMiLCJHTVNlbGZSb2xsIiwicmVtb3ZlV2lzcGVyVGFyZ2V0cyIsImZha2VSb2xsIiwiY2hhdExpc3RlbmVycyIsIl9vbkNoYXRDYXJkQWN0aW9uIiwiX29uQ2hhdENhcmRUb2dnbGVDb250ZW50IiwiX29uQ2hhdENhcmRSYWRpb1N3aXRjaCIsIl9vbkNoYXRDYXJkVG9nZ2xlU3dpdGNoIiwiX29uQ2hhdENhcmRWb2xsZXlTaXplIiwiX29uRHJvcERvd25FbGVtZW50U2VsZWN0ZWQiLCJfb25Ub2dnbGVTZWxlY3RlZCIsIl9vblRhcmdldFNlbGVjdCIsIl9vbk9wZW5BY3RvciIsIl9vbklubGluZSIsIm9uVXBkYXRlQ2hhdE1lc3NhZ2UiLCJzY3JvbGxCb3R0b20iLCJjaGVja1JldmVhbGVkIiwicmV2ZWFsQ2hlY2siLCJyZW5kZXJNZXNzYWdlSG9vayIsInJlbW92ZUNsYXNzIiwibW91c2VsZWF2ZSIsImRlZmVuZGFudElkIiwiaW5pdGlhdG9ySWQiLCJ1cGRhdGVDb21iYXRDYXJkVGFyZ2V0IiwidXNlck9ubHkiLCJnZXRBdHRyaWJ1dGUiLCJnbU9ubHkiLCJ6b25lIiwidXNlclZpc2libGVPbmx5IiwiZWxlbSIsImdtVmlzaWJsZU9ubHkiLCJpc1RydXN0ZWQiLCJvd25lclZpc2libGVPbmx5IiwiX2dldEFjdG9yRnJvbUtleSIsIm93bmVyT25seSIsImdtU2VsZWN0T25seSIsImFjdGlvblR5cGVTdHJpbmciLCJ0YXJnZXRzU2VsZWN0b3IiLCJib3JkZXIiLCJ0YXJnZXRUb0Rpc3BsYXkiLCJkcm9wRG93bkJveGVzIiwiZHBkbkJveCIsInNlbGVjdGVkQm94IiwiYWN0aW9uVHlwZSIsImRlZmVuZGVyQ2hvaWNlIiwic2tpbGxWYWx1ZSIsIml0ZW1OYW1lIiwiX2NvbGxhcHNlSW5saW5lUmVzdWx0IiwiX2V4cGFuZElubGluZVJlc3VsdCIsIm9wdGlvbkxpc3QiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicHJvcGVydHkiLCJyYW5nZUNhcmQiLCJpc0NhcmRPd25lciIsIm93bm5lciIsImdldEFjdG9yRnJvbVRva2VuIiwiZ2V0VG9rZW4iLCJtZXNzSWQiLCJvcmlnaW5NZXNzYWdlIiwibWVsZWVDYXJkIiwicm9sbFJlc3VsdCIsInVwZ3JhZGVJbmRleCIsImRldGFpbGVkUmVzdWx0UGxhY2VIb2xkZXIiLCJuZXdDYXJkIiwiY2xvbmVOb2RlIiwicHVzaGVkUm9sbCIsImRlZmVuZGVyS2V5IiwicmVzcG9uc2VUeXBlIiwiZGVhbGVyIiwiYW1vdW50IiwiYXBwZW5kIiwiZm9yY2VGYWlsIiwiaW5jcmVhc2VTdWNjZXNzTGV2ZWwiLCJkZWNyZWFzZVN1Y2Nlc3NMZXZlbCIsImNvbXB1dGVDaGVjayIsIm1ha2VQdWJsaWMiLCJmb3JjZVJvbGwiLCJDb0M3c29ja2V0IiwiZXhlY3V0ZUFzR00iLCJfaWQiLCJyb2xsRGFtYWdlQnV0dG9uIiwiQWN0b3IiLCJpbml0aWFsaXplIiwiY3JlYXR1cmVJbml0IiwicHJlcGFyZUJhc2VEYXRhIiwiaXRlbUlkZW50aWZpZXIiLCJjb2NpZEZsYWciLCJkYWlseUxpbWl0Iiwib25lRmlmdGhTYW5pdHkiLCJyYXdNb3YiLCJyYXdEYiIsInJhd0J1aWxkIiwiY3VycmVudCIsImhwIiwicHJlcGFyZUVtYmVkZGVkRG9jdW1lbnRzIiwicHJlcGFyZURlcml2ZWREYXRhIiwicmF3SHBNYXgiLCJtcCIsInJhd01wTWF4IiwicmF3U2FuTWF4IiwiZmlsdGVyTWF0cml4IiwicHJpb3JpdHkiLCJzZWxlY3RDaGFuZ2VzIiwiaHBNYXgiLCJtcE1heCIsImFjdG9yTGluayIsImRpc3Bvc2l0aW9uIiwic2lnaHQiLCJjaGVja1VuZGVmaW5lZEF1dG8iLCJyZXR1cm5EYXRhIiwiaW5pdFRva2VuIiwiY3JlYXRlRGF0YSIsImhhc0NvbmRpdGlvblN0YXR1cyIsImdldFRlbXBvSW5zYW5lRHVyYXRpb25UZXh0IiwiaGFzQ29uZGl0aW9uVmFsdWUiLCJyZWFsVGltZSIsImJvdXRPZk1hZG5lc3NUYWJsZUlkIiwiYm91dE9mTWFkbmVzc1RhYmxlIiwidGFibGVzIiwidGFibGVSb2xsIiwiVEFCTEVfUkVTVUxUX1RZUEVTIiwiRE9DVU1FTlQiLCJkb2N1bWVudElkIiwiaXRlbURhdGEiLCJ0b09iamVjdCIsIlRFWFQiLCJ0ZXh0IiwiZW1wdHlTa2lsbCIsImNyZWF0ZVNraWxsIiwic2hvd1NoZWV0IiwicmVuZGVyU2hlZXQiLCJjcmVhdGVXZWFwb25Ta2lsbCIsInNraWxsRGF0YSIsInBlcnNvbmFsIiwib2NjdXBhdGlvbiIsImFyY2hldHlwZSIsImF0dGFjayIsIndwblR5cGUiLCJjcmVhdGVkQXR0YWNrIiwic2V0QWN0b3JGbGFnIiwiY3JlYXRlSXRlbSIsInF1YW50aXR5IiwiY3JlYXRlRW1wdHlCb29rIiwiZ2V0SXRlbUlkQnlOYW1lIiwiY3JlYXRlQm9vayIsImNyZWF0ZUVtcHR5U3BlbGwiLCJjcmVhdGVTcGVsbCIsImVtcHR5U3BlbGwiLCJjcmVhdGVFbXB0eVNraWxsIiwiY3JlYXRlRW1wdHlJdGVtIiwiY3JlYXRlRW1wdHlXZWFwb24iLCJjcmVhdGVCaW9TZWN0aW9uIiwiYmlvIiwiYmlvZ3JhcGh5IiwidXBkYXRlQmlvVmFsdWUiLCJ1cGRhdGVCaW9UaXRsZSIsImRlbGV0ZUJpb1NlY3Rpb24iLCJtb3ZlQmlvU2VjdGlvblVwIiwibW92ZUJpb1NlY3Rpb25Eb3duIiwidXBkYXRlVGV4dEFyZWEiLCJ0ZXh0QXJlYSIsImFyZWFOYW1lIiwiZW1iZWRkZWROYW1lIiwiZGF0YUFycmF5IiwicHJvY2Vzc2VkRGF0YUFycmF5IiwiYmFzZUNhbGN1bGF0ZWQiLCJwYXJzZUNoYXJhY3RlcmlzdGljcyIsImFkZFRoaXMiLCJpc0FueUJ1dE5vdEZsYWdnZWQiLCJndWVzc0dyb3VwRnJvbURvY3VtZW50IiwiZnJvbUNvQ0lEUmVnZXhCZXN0IiwiY29jaWRSZWdFeHAiLCJleGlzdGluZ1NraWxscyIsImVsIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJmaW5kSW5kZXgiLCJleGlzdGluZ0l0ZW0iLCJ1cGRhdGVFbWJlZGRlZERvY3VtZW50cyIsImV4aXN0aW5nIiwia2VlcEJhc2UiLCJtYWluU2tpbGwiLCJhZGRJdGVtcyIsInNlY29uZFNraWxsIiwiZW5hYmxlQ2hhcmFjdGVyaXNpdGljcyIsImdldENoYXJhY3RlcmlzdGljIiwibHVjayIsImVyYSIsImV4cGFuZEl0ZW1BcnJheSIsIml0Iiwib3RoZXJzSXRlbXMiLCJhZGRVbmlxdWVJdGVtcyIsImJhY2tzdG9yeSIsInNlY3Rpb25OYW1lIiwiYmlvU2VjdGlvbnMiLCJtb25ldGFyeSIsIl9zdGF0ZSIsIkFwcGxpY2F0aW9uIiwiUkVOREVSX1NUQVRFUyIsIlJFTkRFUklORyIsIkhvb2tzIiwicmVzZXRBcmNoZXR5cGUiLCJjb25maXJtIiwieWVzIiwiZGVmYXVsdFllcyIsImNvcmVDaGFyYWMiLCJlbnRyeSIsImNvcmVDaGFyYWN0ZXJpc3RpY3MiLCJjaGFyYWMiLCJjaGFyRGlhbG9nRGF0YSIsImNvcmVDaGFyYWN0ZXJpc3RpY3NGb3JtdWxhIiwicmVzZXRPY2N1cGF0aW9uIiwiY3JlZGl0UmF0aW5nIiwiYWN0b3JDcmVkaXRSYXRpbmciLCJmaW5kQ29jSWRJbkxpc3QiLCJwb2ludHNEaWFsb2dEYXRhIiwib2NjdXBhdGlvblNraWxsUG9pbnRzIiwib3B0aW9uYWxDaGFyIiwiZGlhbG9nRGF0YSIsInNraWxsQ291bnQiLCJtZXJnZWQiLCJjcmVkaXRSYXRpbmdTa2lsbCIsImFyY2hldHlwZVBvaW50cyIsIm9jY3VwYXRpb25Qb2ludHMiLCJwZXJzb25hbFBvaW50cyIsImdldEl0ZW1zQnlOYW1lIiwiZ2V0Rmlyc3RJdGVtQnlDb0NJRCIsImNoYXJhY3RlcmlzdGljTGlzdCIsInRlbXBsYXRlcyIsImNoYXJOYW1lIiwiYXR0cmliTmFtZSIsImxjayIsImVyYXNlT2xkIiwib2NjdXBhdGlvblNraWxsIiwiYXJjaGV0eXBlU2tpbGwiLCJzZXRMdWNrIiwiaHBGcm9tQ2hhcmFjdGVyaXN0aWNzIiwiX3NldEhwIiwiYWRkVW5pcXVlSXRlbSIsIm1wRnJvbUNoYXJhY3RlcmlzdGljcyIsImdldFJlYXNvblNhbkxvc3MiLCJzYW5pdHlMb3NzRXZlbnRzIiwidG90YWxMb3NzIiwiaW1tdW5pdHkiLCJsZWZ0IiwicmlnaHQiLCJsb2NhbGVDb21wYXJlIiwic2FuTWF4Rm9ybXVsYSIsInNhbml0eUxvc3NFdmVudCIsInNldFNhbiIsInNhbkxvc3NDaGVja1Bhc3NlZCIsInNhbkxvc3NDaGVja0ZhaWxsZWQiLCJzYW5Mb3NzTWF4Iiwic2FuTG9zc01pbiIsImRhaWx5TG9zcyIsImN0aHVsaHVNeXRob3MiLCJzZXRNcCIsIm9jY3VwYXRpb25Qb2ludHNTcGVudCIsInJlc2V0T2NjdXBhdGlvblBvaW50cyIsInJlc2V0QXJjaGV0eXBlUG9pbnRzIiwicmVzZXRQZXJzb25hbFBvaW50cyIsImFyY2hldHlwZVBvaW50c1NwZW50IiwiYm9udXNQb2ludHMiLCJleHBlcmllbmNlUG9pbnRzIiwicGVyc29uYWxQb2ludHNTcGVudCIsImhhc0RldmVsb3BtZW50UGhhc2UiLCJkZXZlbG9wZW1lbnQiLCJvbmx5UnVuT25jZVBlclNlc3Npb24iLCJsb3NzIiwic2V0QXR0cmliQXV0byIsInVwZGF0ZWRLZXkiLCJ0b2dnbGVBdHRyaWJBdXRvIiwiZGJGcm9tQ2hhcmFjdGVyaXN0aWNzIiwic3VtIiwiYnVpbGRGcm9tQ2hhcmFjdGVyaXN0aWNzIiwiZGl2aXNvciIsIm1vdkZyb21DaGFyYWN0ZXJpc3RpY3MiLCJhZ2UiLCJNT1YiLCJnZXRJdGVtc0Zyb21OYW1lIiwidG9nZ2xlQWN0b3JGbGFnIiwiYXR0cmlidXRlTmFtZSIsIm1pc3NpbmciLCJjaGFyYWN0ZXJpc3RpY05hbWUiLCJ0b29sVGlwU2tpbGxUZXh0IiwiQ29DN1Rvb2x0aXBzIiwiVG9vbFRpcEhvdmVyIiwiYWN0b3JBcHBJZCIsImFwcGlkIiwid2luZG93cyIsInRvb2xUaXAiLCJuZXdJdGVtcyIsImZyb21Db0NJREJlc3QiLCJzaG93TG9hZGluZyIsIm15SXRlbXMiLCJuZXdJdGVtIiwicGFja3MiLCJtZXRhZGF0YSIsImdldERvY3VtZW50cyIsInNraWxsSWRlbnRpZmllciIsImVudGl0eSIsImdldERvY3VtZW50IiwiX3Jhd1ZhbHVlIiwidXBkYXRlVmFsdWUiLCJ3ZWFwb25EYXRhIiwid2VhcG9ucyIsInRvSlNPTiIsInJvbGxJbml0aWF0aXZlIiwiaGFzR3VuIiwiZGVueUx1Y2siLCJkZW55QmxpbmRUYW1wZXJpbmciLCJ1bnNldEFjdG9yRmxhZyIsImZyb21VdWlkU3luYyIsImV4ZWMiLCJjaGFyS2V5IiwiYXR0cmliS2V5IiwiYXR0ciIsInBpbG90U2tpbGxzIiwiZHJpdmVTa2lsbHMiLCJ0b2tlblV1aWQiLCJoYXNSb2xsYWJsZUNoYXJhY3RlcmlzdGljcyIsImhvc1JvbGxhYmxlU2tpbGxzIiwicm9sbENoYXJhY3RlcmlzdGljc1ZhbHVlIiwicmVwb3J0Q2hhcmFjdGVkcml0aWNzVmFsdWUiLCJhdmVyYWdlQ2hhcmFjdGVyaXN0aWNzVmFsdWUiLCJhdmVyYWdlIiwiY2hhclZhbHVlIiwic2V0Q2hhcmFjdGVyaXN0aWMiLCJkZXZlbG9wZW1lbnRQaGFzZSIsInNraWxsc1JvbGxlZCIsIkRpZSIsImF1Z21lbnQiLCJza2lsbE1hc3RlcmluZ01lc3NhZ2UiLCJhdWdtZW50RGllIiwiYXVnbWVudFNBTkRpZSIsInNhbkdhaW5lZCIsInNhbkdhaW5lZE1lc3NhZ2UiLCJkZWJ1ZyIsInNjb3JlIiwiaW5jcmVhc2VFeHBlcmllbmNlIiwiY2hhbmdlZCIsImRldmVsb3BMdWNrIiwiY3VycmVudEx1Y2siLCJwdWxwUnVsZURldmVsb3BtZW50Um9sbEx1Y2siLCJoaWdoZXJUaGFuQ3VycmVudEx1Y2siLCJhdWdtZW50Um9sbCIsImF1Z21lbnRWYWx1ZSIsImRldmVsb3BTa2lsbCIsImNvbmRpdGlvblZhbHVlIiwiY29uZGl0aW9ucyIsImZpZWxkIiwidG9nZ2xlQ29uZGl0aW9uIiwiZm9yY2VWYWx1ZSIsImN1c3RvbSIsIm92ZXJsYXkiLCJzdGF0dXNFZmZlY3RzIiwic291cmNlIiwiZWZmZWN0RGF0YSIsImZpZWxkcyIsImp1c3RUaGlzIiwiZGVsZXRlRW1iZWRkZWREb2N1bWVudHMiLCJyZXNldENvdW50ZXIiLCJjb3VudGVyIiwicmVzZXREYWlseVNhbml0eSIsImZpZ2h0aW5nU2tpbGxzIiwiY2xvc2VDb21iYXRXZWFwb25zIiwid2VhcG9uTGlzdCIsImZpcmVhcm1Ta2lsbHMiLCJDTSIsIm15dGhvc0hhcmRlbmVkIiwic2V0TXl0aG9zSGFyZGVuZWQiLCJDUiIsIm1vbmV0YXJ5Rm9ybWF0Iiwic3ltYm9sIiwibW9uZXRhcnlGb3JtYXRLZXlzIiwidG9Mb2NhbGVTdHJpbmciLCJtaW5pbXVtRnJhY3Rpb25EaWdpdHMiLCJtb25ldGFyeVZhbHVlIiwicm93IiwibW9uZXRhcnlUeXBlS2V5cyIsInNwZW5kaW5nTGV2ZWwiLCJjYXNoIiwiYXNzZXRzIiwidGVzdFVzZXJQZXJtaXNzaW9uIiwicGxheWVyIiwiY2hhcmFjdGVyVXNlciIsImNvbnRlbnRzIiwic2V0SHAiLCJoZWFsdGhCZWZvcmUiLCJkYW1hZ2VUYWtlbiIsImFybW9yRGF0YSIsImdyb3NzRGFtYWdlIiwiYXJtb3JWYWx1ZSIsImlzRm9ybXVsYSIsIm5ldERhbWFnZSIsImNlaWwiLCJoYXNNYWpvcldvdW5kIiwibWFqb3JXb3VuZCIsImlzVW5rbm93biIsIl91dWlkIiwicmFuZG9tSUQiLCJoYXNDYXJkIiwicmF3VmFsdWVTdHJpbmciLCJjcml0aWNhbFRocmVzaG9sZCIsImZ1bWJsZVRocmVzaG9sZCIsInN1Y2Nlc1RocmVzaG9sZCIsIl9tb2RpZmllZFJlc3VsdCIsIm1vZGlmaWVkIiwiZmxhdERpY2VNb2RpZmllclN0cmluZyIsImlzU2ltcGxlUm9sbCIsImhhc1BlbmFsdHkiLCJoYXNNb2RpZmllciIsIl9kaWNlTW9kaWZpZXIiLCJfZGlmZmljdWx0eSIsIm9sZENoZWNrIiwic3VjY2Vzc0xldmVsSWNvbnMiLCJ1bmtub3duRGlmZmljdWx0eSIsImljb25zIiwic3VjY2Vzc0hpbnQiLCJjc3NDbGFzcyIsImhpbnQiLCJmYWlsdXJlSGludCIsImdtRGlmZmljdWx0eUNyaXRpY2FsIiwiZ21EaWZmaWN1bHR5RXh0cmVtZSIsImdtRGlmZmljdWx0eUhhcmQiLCJnbURpZmZpY3VsdHlSZWd1bGFyIiwiX3NraWxsIiwiX2dldEl0ZW1Gcm9tSWQiLCJfaXRlbSIsImlzRHVtbXkiLCJkaXNwbGF5UmVzdWx0VHlwZSIsImRpc3BsYXlDaGVja1N1Y2Nlc3NMZXZlbCIsImRpc3BsYXlCb3RoU3VjY2Vzc0xldmVsIiwiZG9udERpc3BsYXlTdWNjZXNzTGV2ZWwiLCJpbWFnZSIsImdldExpbmtFbGVtZW50IiwiY3JlYXRlRnJvbUFjdG9yUm9sbERhdGEiLCJ0aHJlc2hvbGQiLCJyb2xsVmFsdWUiLCJ0ZW5SZXN1bHQiLCJzcGVuZGluZ0Ftb3VudCIsInRvdGFsTHVja1NwZW50IiwibWF4SW5kZXgiLCJzaGlmdCIsInRlbk9ubHlPbmVEaWUiLCJpc1ZhbHVlIiwiaXNDaGFyYWN0aXJpc3RpYyIsImlzU2tpbGwiLCJpc0l0ZW0iLCJpc0F0dHJpYnV0ZSIsInN1Y2Nlc3NSZXF1aXJlZCIsIm1hbGZ1bmN0aW9uVHh0IiwiaGFzRW5vdWdoTHVjayIsIm5leHRMZXZlbCIsImNhbkluY3JlYXNlU3VjY2VzcyIsImNhbkF3YXJkRXhwZXJpZW5jZSIsImZvcmNlZCIsIkpTT05Sb2xsU3RyaW5nIiwiY3NzQ2xhc3NMaXN0IiwicGxheWVyQ3NzQ2xhc3MiLCJmb3JjZWRTdWNjZXNzIiwiZm9yY2VkRmFpbHVyZSIsInJlbW92ZVVwZ3JhZGVzIiwiZm9yY2VTdWNjZXNzTGV2ZWwiLCJfZm9yY2VDaGVjayIsImhpZ2giLCJsb3ciLCJyYW5kb20iLCJ1bml0VG90YWwiLCJ0ZW5Ub3RhbCIsImhhc0Vub3VnaCIsInRlbiIsImZsYWdnZWRGb3JEZXZlbG9wbWVudCIsIl9mbGF2b3IiLCJfY29udGV4dCIsInBhcmVudFV1aWQiLCJyYXd2YWx1ZSIsInRvb2x0aXBIZWFkZXIiLCJnZXRIdG1sUm9sbEVsZW1lbnQiLCJvcmlnaW5hbFNwZWFrZXIiLCJuZXdDb250ZW50IiwiaHRtbE1lc3NhZ2UiLCJyb2xsUmVzdWx0RWxlbWVudCIsIk9USEVSIiwidG9vbHRpcCIsInJvbGxUb29sVGlwIiwiZmFjZSIsImZyb21Sb2xsU3RyaW5nIiwiY29tbWFuZCIsIl9vbkNsaWNrSW5saW5lUm9sbCIsInRpcCIsImFwcGVuZENoaWxkIiwicGEiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwdCIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJ0b3AiLCJ5IiwiaW5uZXJIZWlnaHQiLCJ6aSIsImdldENvbXB1dGVkU3R5bGUiLCJ6SW5kZXgiLCJpc051bWVyaWMiLCJQYXJzZUNoYXRFbnRyeSIsIl9FeGVjQ29tbWFuZCIsImVzY2FwZWQiLCJhc2siLCJ0aHJlc2hvbGRTdHIiLCJkaWZmaWN1bHR5U3RyIiwiYXNrVmFsdWUiLCJ0ZXN0IiwiZ2V0QWN0b3JGcm9tU3RyaW5nIiwiYWN0b3JTdHJpbmciLCJza2lsbENoZWNrTWFjcm8iLCJ3ZWFwb25DaGVja01hY3JvIiwiYmFzZUFjdG9yIiwiZ2V0RG9jdW1lbnRDbGFzcyIsImNoZWNrTWFjcm8iLCJyb2xsRGljZSIsImNyZWF0ZU1hY3JvIiwiYmFyIiwic2xvdCIsIm1hY3JvIiwibWFjcm9zIiwiYXNzaWduSG90YmFyTWFjcm8iLCJNYWNybyIsInRvZ2dsZURldlBoYXNlIiwidXBkYXRlQ2hhclNoZWV0cyIsInRvZ2dsZUNoYXJDcmVhdGlvbiIsImdldFRhcmdldCIsImNoZWNrT3B0aW9ucyIsInBsYXllclRva2VuSWRzIiwic2VsZWN0ZWRQbGF5ZXJJZHMiLCJjaGVja2VkIiwic3RhcnRSZXN0IiwiY2hhdENvbnRlbnQiLCJxdWlja0hlYWxlciIsImlzQ3JpdGljYWxXb3VuZHMiLCJkYWlseVNhbml0eUxvc3MiLCJocFZhbHVlIiwibXBWYWx1ZSIsImhlYWxBbW91bnQiLCJob3VycyIsIm1hZ2ljQW1vdW50IiwidG9nZ2xlWFBHYWluIiwidGsiLCJyZW5kZXJlZCIsImVudGl0eVR5cGUiLCJmb2xkZXIiLCJuYXZpZ2F0b3IiLCJjbGlwYm9hcmQiLCJpc1NlY3VyZUNvbnRleHQiLCJ3cml0ZVRleHQiLCJwb3NpdGlvbiIsImZvY3VzIiwicmVqZWN0IiwiZXhlY0NvbW1hbmQiLCJjYXRjaCIsImxlbiIsInFTdHJpbmciLCJjaGFyQXQiLCJjaGFyQ29kZUF0IiwiaiIsInNldEJ5UGF0aCIsInBhdGgiLCJvIiwiZ2V0QnlQYXRoIiwiZG9jIiwiZG9jTmFtZSIsImRvY0lkIiwiaW5zdGFuY2UiLCJlbWJlZGRlZElkIiwiaWRlbnRpZmllcnMiLCJnZXRBY3RvckRvY3VtZW50RnJvbURyb3BEYXRhIiwiZHJvcERhdGEiLCJkb2NVdWlkIiwiZ2V0RG9jdW1lbnRGcm9tS2V5IiwiY3JlYXRlSW1wb3J0Q2hhcmFjdGVyc0ZvbGRlcklmTm90RXhpc3RzIiwiZm9sZGVyTmFtZSIsImltcG9ydGVkQ2hhcmFjdGVyc0ZvbGRlciIsImZvbGRlcnMiLCJGb2xkZXIiLCJndWVzc0l0ZW0iLCJvTSIsInBhY2thZ2UiLCJmYWxsYmFja0FueSIsInRvS2ViYWJDYXNlIiwibm9ybWFsaXplIiwia2VlcGVycyIsInN1Ym1pdE9uQ2xvc2UiLCJzdWJtaXRPbkNoYW5nZSIsInN1cHBvcnRlZExhbmd1YWdlcyIsImVkaXRhYmxlIiwiZ3Vlc3NDb2RlIiwiZ3Vlc3NJZCIsImlkUHJlZml4IiwiZ2V0UHJlZml4IiwibGFuZyIsImlzRW5hYmxlZCIsIkNvQ0lES2V5cyIsImZsYXR0ZW5PYmplY3QiLCJ0cmFuc2xhdGlvbnMiLCJDb0NJREZsYWciLCJwcmVmaXgiLCJleGlzdGluZ0tleXMiLCJpc1N5c3RlbUlEIiwiX2V4aXN0aW5nIiwid29ybGREb2N1bWVudHMiLCJmcm9tQ29DSURBbGwiLCJzY29wZSIsInVzZWRFcmFzIiwidW5pcXVlV29ybGRQcmlvcml0eSIsIndvcmxkRG9jdW1lbnRJbmZvIiwid2FybkR1cGxpY2F0ZVdvcmxkUHJpb3JpdHkiLCJ3b3JsZER1cGxpY2F0ZXMiLCJjb21wZW5kaXVtRG9jdW1lbnRzIiwidW5pcXVlQ29tcGVuZGl1bVByaW9yaXR5IiwiY29tcGVuZGl1bURvY3VtZW50SW5mbyIsIndhcm5EdXBsaWNhdGVDb21wZW5kaXVtUHJpb3JpdHkiLCJjb21wZW5kaXVtRHVwbGljYXRlcyIsInNpYmxpbmdzIiwiX29uQ2xpY2tUb2dnbGUiLCJndWVzcyIsImNzcyIsImNvbG9yIiwiYWRkQ29DSURTaGVldEhlYWRlckJ1dHRvbiIsImhlYWRlckJ1dHRvbnMiLCJzaGVldENvQ0lEIiwiQ29DSURFZGl0b3JCdXR0b24iLCJvbmNsaWNrIiwibnVtYmVyT2ZCdXR0b25zIiwiQ29DN0NvbnRleHRNZW51IiwibWVudSIsIl9jYWxsYmFjayIsIl9odG1sIiwiX21lbnUiLCJtZW51VHJpZ2dlciIsImNvbnRleHRtZW51IiwiX29uQ29udGV4dE1lbnUiLCJtZW51RWxlbWVudCIsIkNyZWF0ZU1lbnUiLCJfb25NZW51QWN0aW9uIiwibWVudUNvbnRhaW5lciIsImNsb3NlQWxsIiwiZWFjaCIsInZpc2liaWxpdHkiLCJtZW51TmFtZSIsImNvbnRleHRNZW51Iiwid3JhcHBlciIsInN1Yk1lbnUiLCJjbGllbnRYIiwiY2xpZW50WSIsIm1lbnVIZWlnaHQiLCJvdXRlckhlaWdodCIsIm1lbnVXaWR0aCIsIm91dGVyV2lkdGgiLCJjYW5TZWUiLCJhZGRDbGFzcyIsInNlY3Rpb24iLCJDcmVhdGVTZWN0aW9uIiwibXVsdGkiLCJzdWIiLCJDb0M3QWN0b3JTaGVldCIsIkFjdG9yU2hlZXQiLCJfZ2V0SGVhZGVyQnV0dG9ucyIsInNob3dIaWRkZW5EZXZNZW51IiwiY2FuRHJhZ1Rva2VuIiwibGlua2VkQWN0b3IiLCJpdGVtc0J5VHlwZSIsImNvbWJhdFNraWxscyIsInJhbmdlV3BuIiwibWVsZWVXcG4iLCJhY3RvckZsYWdzIiwicGVybWlzc2lvbkxpbWl0ZWQiLCJMSU1JVEVEIiwiYWxsb3dVbmxvY2siLCJwZXJzb25hbERlc2NyaXB0aW9uIiwic2V4IiwicmVzaWRlbmNlIiwiYmlydGhwbGFjZSIsIm9yZ2FuaXphdGlvbiIsInBsYXllcm5hbWUiLCJtYW51YWxDcmVkaXQiLCJjcmVkaXQiLCJtb25ldGFyeVN5bWJvbCIsInNwZW50IiwiYXNzZXRzRGV0YWlscyIsImRldmVsb3BtZW50IiwicHVscFJ1bGVBcmNoZXR5cGUiLCJwdWxwUnVsZU9yZ2FuaXphdGlvbiIsImlzRGVhZCIsImlzRHlpbmciLCJpdGVtVG9VcGRhdGUiLCJ1cGRhdGVkRXhwIiwiaXRlbVR5cGUiLCJtZWxlZVNraWxscyIsInJhbmdlU2tpbGxzIiwiY2J0U2tpbGxzIiwidXNlc0FsdGVybmF0ZVNraWxsIiwic2tpbGxTZXQiLCJfcHJvcGVydGllcyIsImhhc0VtcHR5VmFsdWVXaXRoRm9ybXVsYSIsImlzRmlyc3QiLCJpc0xhc3QiLCJzaG93SW52ZW50b3J5SXRlbXMiLCJzaG93SW52ZW50b3J5Qm9va3MiLCJzaG93SW52ZW50b3J5U3BlbGxzIiwic2hvd0ludmVudG9yeVRhbGVudHMiLCJzaG93SW52ZW50b3J5U3RhdHVzZXMiLCJzaG93SW52ZW50b3J5V2VhcG9ucyIsImhhc0NvbmRpdGlvbnMiLCJjb25kaXRpb24iLCJvbkNsb3NlU2hlZXQiLCJfb25TZWN0aW9uSGVhZGVyIiwiX29uSXRlbUhlYWRlciIsIl9vbkludmVudG9yeUhlYWRlciIsImRibGNsaWNrIiwiX3RvZ2dsZVJlYWRPbmx5IiwiX29uQWRkQW1vIiwiX29uUmVsb2FkV2VhcG9uIiwiY29tcGVuZGl1bSIsIl9vbkxvY2tDbGlja2VkIiwiX29uRmxhZ0NsaWNrZWQiLCJfb25Gb3JtdWxhQ2xpY2tlZCIsIl9vbkF1dG9Ub2dnbGUiLCJtZW51cyIsInJvbGxNZW51Iiwic2FuTWVudSIsInJvbGxDb250ZXh0TWVudSIsIl9vbkNvbnRleHRNZW51Q2xpY2siLCJzYW5Db250ZXh0TWVudSIsIl9vbk9wcG9zZWRSb2xsIiwiX29uUm9sbENoYXJhY3Rlcml0aWNUZXN0IiwiX29uUm9sbFNraWxsVGVzdCIsIl9vblJvbGxBdHRyaWJUZXN0IiwiX29uRHJhZ1Rva2VuU3RhcnQiLCJfb25EcmFnQ2hhcmFjdGVyaXN0aWMiLCJfb25EcmFnQXR0cmlidXRlIiwiX29uRHJhZ1NhbkNoZWNrIiwiX29uUm9sbENoYXJhY3Rlcml0aWNzVmFsdWUiLCJfb25BdmVyYWdlQ2hhcmFjdGVyaXRpY3NWYWx1ZSIsIl9vblJlc2V0Q291bnRlciIsIl9vbkNvbmRpdGlvblRvZ2dsZSIsImhlYWwiLCJyZXZpdmUiLCJjaGVja0ZvckRlYXRoIiwiX29uSXRlbVJvbGwiLCJfb25XZWFwb25Sb2xsIiwiX29uRWZmZWN0IiwiX29uV2VhcG9uU2tpbGxSb2xsIiwiX29uV2VhcG9uRGFtYWdlIiwid2hlZWxJbnB1dHMiLCJ3aGVlbElucHV0IiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9vbldoZWVsIiwiX29uSXRlbVN1bW1hcnkiLCJfb25JdGVtUG9wdXAiLCJfb25SZW5kZXJJdGVtU2hlZXQiLCJldiIsInBhcmVudHMiLCJpdGVtVG9EZWxldGUiLCJzdHJpY3QiLCJzbGlkZVVwIiwic3RvcFByb3BhZ2F0aW9uIiwiX29uVHJhZGVJdGVtIiwiZGV0YWlsIiwiZGlzYWJsZSIsIm1vdXNlZW50ZXIiLCJ0b29sVGlwU2tpbGxFbnRlciIsInRvb2xUaXBMZWF2ZSIsInRvb2xUaXBDaGFyYWN0ZXJpc3RpY0VudGVyIiwidG9vbFRpcEF0dHJpYnV0ZUVudGVyIiwidG9vbFRpcEF1dG9FbnRlciIsInRvb2xUaXBGbGFnRm9yRGV2ZWxvcG1lbnQiLCJkZWxheSIsInRvb2xUaXBUaW1lciIsImRpc3BsYXlUb29sVGlwIiwiY2hhcklkIiwiYXR0cmlidXRlSWQiLCJhdHRyaWJ1dGVzIiwidGFyZ2V0VHlwZSIsInJvbGxPcHRpb25zIiwiYWN0b3JGcm9tIiwiYWN0b3JUbyIsInZpc2libGUiLCJOT05FIiwiX29uRHJhZ1N0YXJ0IiwiZHJhZ0RhdGEiLCJib3giLCJDb0M3VHlwZSIsImlzTG9ja2VkIiwiZGVsdGFZIiwicmVhZE9ubHkiLCJzZWNyZXRzIiwiaGFzQ2xhc3MiLCJzdW1tYXJ5IiwiZGl2Iiwic3BlY2lhbERpdiIsImhpZGUiLCJzbGlkZURvd24iLCJwYW5uZWxDbGFzcyIsInBhbm5lbCIsImlzIiwib2wiLCJuZXh0IiwicG9wdXBTa2lsbCIsImVucmljaGVkVmFsdWUiLCJzY3JvbGxZIiwicHJvY2VlZFdpdGhvdXRUYXJnZXQiLCJjYW5jZWwiLCJwcm9jZWVkIiwicm9sbEZvcm11bGEiLCJvdmVycmlkZXMiLCJjcmVkaXRWYWx1ZSIsInNlbGVjdGVkSW5kZXgiLCJDb0M3TlBDU2hlZXQiLCJhbGxvd0Zvcm11bGEiLCJkaXNwbGF5Rm9ybXVsYSIsImhhc1NhbiIsImhhc01wIiwiaGFzTHVjayIsImlzQ3JlYXR1cmUiLCJoYXNJbnZlbnRvcnkiLCJlbnJpY2hlZEJpb2dyYXBoeVBlcnNvbmFsRGVzY3JpcHRpb24iLCJlbnJpY2hlZERlc2NyaXB0aW9uS2VlcGVyIiwia2VlcGVyIiwic2FubG9zc01lbnUiLCJzYW5sb3NzQ29udGV4dE1lbnUiLCJfb25TYW5Mb3NzQ29udGV4dE1lbnVDbGljayIsIl9vblNhbkNoZWNrIiwicmVzaXphYmxlIiwibWluaW1pemFibGUiLCJmb3JjZUF1dG8iLCJzZXRQb3NpdGlvbiIsIkNvQzdDcmVhdHVyZVNoZWV0IiwiQ29DN0NyZWF0ZU15dGhvc0VuY291bnRlciIsImlzSW1tdW5pdHkiLCJfb25CdXR0b25DbGljayIsIkNvQzdDaGFyYWN0ZXJTaGVldCIsInN1bW1hcml6ZWQiLCJ0b2dnbGVTaGVldE1vZGUiLCJza2lsbExpc3RNb2RlVmFsdWUiLCJza2lsbFNob3dVbmNvbW1vbiIsInNob3dJY29uc09ubHkiLCJvY2N1cGF0aW9uU2V0IiwiYXJjaGV0eXBlU2V0IiwidG90YWxFeHBlcmllbmNlIiwidG90YWxPY2N1cGF0aW9uIiwiaW52YWxpZE9jY3VwYXRpb25Qb2ludHMiLCJ0b3RhbEFyY2hldHlwZSIsImludmFsaWRBcmNoZXR5cGVQb2ludHMiLCJ0b3RhbFBlcnNvbmFsIiwiaW52YWxpZFBlcnNvbmFsUG9pbnRzIiwiY3JlZGl0UmF0aW5nTWF4IiwiY3JlZGl0UmF0aW5nTWluIiwiaW52YWxpZENyZWRpdFJhdGluZyIsInB1bHBUYWxlbnRDb3VudCIsInRhbGVudCIsIm1pblB1bHBUYWxlbnRzIiwidGFsZW50cyIsImludmFsaWRQdWxwVGFsZW50cyIsImFsbG93RGV2ZWxvcG1lbnQiLCJhbGxvd0NoYXJDcmVhdGlvbiIsImRldmVsb3BtZW50Um9sbEZvckx1Y2siLCJzaG93RGV2UGFubmVsIiwiX21vbmV0YXJ5Rm9ybWF0cyIsIm1vbmV0YXJ5Rm9ybWF0cyIsInNob3dDdXJyZW5jeVN5bWJvbCIsIl9tb25ldGFyeVR5cGVzIiwibW9uZXRhcnlUeXBlcyIsIm9uZUJsb2NrQmFja1N0b3J5IiwicHJldmlvdXNTcGVjIiwiaXNTcGVjaWFsaXphdGlvbiIsInNraWxsc0J5VmFsdWUiLCJ0b3BTa2lsbHMiLCJ0b3BXZWFwb25zIiwicmV2ZXJzZSIsImRpc3BsYXlQbGF5ZXJOYW1lIiwic2tpbGxMaXN0RW1wdHkiLCJlbnJpY2hlZEJhY2tzdG9yeSIsIl9zYXZlU2Nyb2xsUG9zaXRpb25zIiwiX3Njcm9sbFBvc2l0aW9uc1giLCJwb3MiLCJzZWwiLCJzY3JvbGxMZWZ0IiwiX3Jlc3RvcmVTY3JvbGxQb3NpdGlvbnMiLCJzZWxlY3RvcnMiLCJwb3NpdGlvbnMiLCJfb25Ta2lsbERldiIsIl9vbkl0ZW1EZXRhaWxzIiwidG9nZ2xlU2tpbGxMaXN0TW9kZSIsInRvZ2dsZVNraWxsVW5jb21tb25Nb2RlIiwiX29uQWRkU2FuaXR5TG9zc1JlYXNvbiIsIl9vbkRlbGV0ZVNhbml0eUxvc3NSZWFzb24iLCJibHVyIiwiX29uRWRpdFNhbml0eUxvc3NSZWFzb24iLCJfb25Ub2dnbGVLZWVwZXJGbGFncyIsIl9vbkFkZE1vbmV0YXJ5IiwiX29uUmVtb3ZlTW9uZXRhcnkiLCJjYXNoVHlwZSIsImNhc2hWYWx1ZSIsImFzc2V0c1R5cGUiLCJhc3NldHNWYWx1ZSIsInNwZW5kaW5nVHlwZSIsInNwZW5kaW5nVmFsdWUiLCJzdHlsZVNoZWV0IiwiY3NzUnVsZUluZGV4Iiwic3R5bGVTaGVldHMiLCJocmVmIiwiZW5kc1dpdGgiLCJydWxlcyIsInNlbGVjdG9yVGV4dCIsIkNTU1N0eWxlIiwicmVtb3ZlUHJvcGVydHkiLCJzZXRQcm9wZXJ0eSIsIkZvbnRGYWNlIiwibG9hZCIsImxvYWRlZEZhY2UiLCJmb250cyIsIndlaWdodCIsImV4cGFuZGVkIiwiQ29DN0NvbWJhdCIsInJlbmRlckNvbWJhdFRyYWNrZXIiLCJjdXJyZW50Q29tYmF0IiwiY29tYmF0cyIsImN1cnJlbnRJbmRleCIsImNvbWJJZCIsImNvbWJhdGFudENvbnRyb2xzRGl2IiwiY29tYmF0YW50IiwiY29tYmF0YW50cyIsInByZXBlbmQiLCJpbml0aWF0aXZlIiwidG9rZW5Jbml0aWF0aXZlIiwiaW5pdGlhdGl2ZVRlc3QiLCJoNCIsImZvbnRXZWlnaHQiLCJ0ZXh0U2hhZG93IiwiYmFja2dyb3VuZCIsIl9vblRvZ2dsZUd1biIsImNvbWJhdGFudElkIiwibmV3SW5pdCIsInNldEluaXRpYXRpdmUiLCJpZHMiLCJDb0NJREJhdGNoIiwiZm91bmRLZXlzIiwib3V0IiwibWlzc2luZ05hbWVzIiwic3VmZml4Iiwic3VmZml4UmVnRXhwIiwib25TZXROYW1lIiwib25DbGlja0d1ZXNzIiwia2V5dXAiLCJvbktleXVwIiwidHlwZU5hbWUiLCJwcm9jZXNzU2tpbGxLZXlzIiwidXBkYXRlTGlzdCIsInRva2VuT2Zmc2V0IiwiaXRlbU9mZnNldCIsImFjdG9yRGF0YSIsImV4cGFuZGVkRmxhZ3MiLCJ1cGRhdGVEb2N1bWVudHMiLCJwb3B1bGF0ZVNraWxsS2V5cyIsInNjZW5lRGF0YSIsIlVwZGF0ZXIiLCJjaGVja0ZvclVwZGF0ZSIsInN5c3RlbVVwZGF0ZVZlcnNpb24iLCJqb3VybmFsIiwicnVuTWlncmF0ZSIsInVwZGF0ZWRNb2R1bGVzIiwiY3VycmVudE1vZHVsZXMiLCJwYWNrYWdlTmFtZSIsIm1vZHVsZSIsIm1vZCIsInNraXAiLCJPSyIsInBlcm1hbmVudCIsIm1pZ3JhdGVBY3RvckRhdGEiLCJpc0VtcHR5IiwibG9nIiwiZW5mb3JjZVR5cGVzIiwibWlncmF0ZUl0ZW1EYXRhIiwidGFibGUiLCJtaWdyYXRlVGFibGVEYXRhIiwibWlncmF0ZU1hY3JvRGF0YSIsIm1pZ3JhdGVTY2VuZURhdGEiLCJtaWdyYXRlQ29tcGVuZGl1bURhdGEiLCJfbWlncmF0ZUFjdG9yQ2hhcmFjdGVyU2FuaXR5IiwiX21pZ3JhdGVBY3RvckFydHdvcmsiLCJfbWlncmF0ZUFjdG9yS2VlcGVyTm90ZXMiLCJfbWlncmF0ZUFjdG9yTnBjQ3JlYXR1cmUiLCJfbWlncmF0ZUFjdG9yU3RhdHVzRWZmZWN0QWN0aXZlIiwiX21pZ3JhdGVBY3RvclNhbkxvc3NSZWFzb25zIiwiX21pZ3JhdGVBY3Rvck1vbmV0YXJ5IiwiYXJyIiwiaXRlbVVwZGF0ZSIsImRvY3VtZW50VHlwZSIsIndhc0xvY2tlZCIsImNvbmZpZ3VyZSIsIm1pZ3JhdGUiLCJkb2N1bWVudHMiLCJfbWlncmF0ZUl0ZW1FbWJlZGRlZHYxMCIsIl9taWdyYXRlSXRlbUV4cGVyaWVuY2UiLCJfbWlncmF0ZUl0ZW1BcnR3b3JrIiwiX21pZ3JhdGVJdGVtQm9va0F1dG9tYXRlZCIsIl9taWdyYXRlSXRlbUtlZXBlck5vdGVzIiwiX21pZ3JhdGVJdGVtU3BlbGxBdXRvbWF0ZWQiLCJfbWlncmF0ZUl0ZW1LZWVwZXJOb3Rlc01lcmdlIiwiX21pZ3JhdGVJdGVtRXJhcyIsIl9taWdyYXRlSXRlbXYxMCIsIl9taWdyYXRlSXRlbUJvb2tVbml0cyIsIl9taWdyYXRlTWFjcm9BcnR3b3JrIiwiX21pZ3JhdGVUYWJsZUFydHdvcmsiLCJyZXR1cm5zIiwiX21pZ3JhdGVUb2tlbkFydHdvcmsiLCJNYXAiLCJvcmlnaW5hbCIsImciLCJzcGVsbHMiLCJjb3N0IiwiY2FzdGluZ1RpbWUiLCJ1bmlkZW50aWZpZWQiLCJhdXRob3IiLCJkYXRlIiwibGFuZ3VhZ2UiLCJteXRob3NSYXRpbmciLCJub3RlcyIsImdhaW4iLCJDTUkiLCJDTUYiLCJuZWNlc3NhcnkiLCJ3ZWVrc1N0dWR5VGltZSIsInByb2dyZXNzIiwic3R1ZHkiLCJrZWVwZXJOb3RlcyIsImVuY291bnRlcmVkQ3JlYXR1cmVzIiwiaW0iLCJhdHRhY2tzUGVyUm91bmQiLCJpbmRlZmluaXRlSW5zYW5pdHlMZXZlbCIsIm5hbWVDaGFyYWN0ZXJzIiwiZW4iLCJkYk5vbmUiLCJhcm1vck5vbmUiLCJhdHRhY2tzUGVyUm91bmROb25lIiwic2FuTG9zc05vbmUiLCJmdWxsZGIiLCJoYWxmZGIiLCJzZWN0aW9uQ29tYmF0cyIsIm5ld0NvbWJhdEhlYWRlciIsInNlY3Rpb25Ta2lsbHMiLCJzZWN0aW9uTGFuZ2F1Z2VzIiwic2VjdGlvblNwZWxscyIsImhhbmRndW4iLCJyaWZsZSIsInNtYiIsIm1hY2hpbmVHdW4iLCJsYXVuY2hlZCIsImV4YW1wbGUiLCJkZSIsImRpY2VTaG9ydCIsInBsIiwiZnIiLCJlcyIsImphIiwid2VhcG9uRG9kZ2UiLCJndWVzc1N0YXJ0Q29tYmF0Iiwic2VjdGlvbnMiLCJDb0M3QWN0b3JJbXBvcnRlclJlZ0V4cCIsImNoZWNrTGFuZ3VhZ2UiLCJnZXRFeGFtcGxlVGV4dCIsImdldFRyYW5zbGF0aW9ucyIsImdldEtleXMiLCJnZXRSZWd1bGFyRXhwcmVzc2lvbnMiLCJDb0M3QWN0b3JJbXBvcnRlciIsIml0ZW1Mb2NhdGlvbnMiLCJhc051bWJlciIsImFzU3RyaW5nIiwiZ2V0UmVnRXgiLCJyZWdleCIsImNsZWFuU3RyaW5nIiwidHJhbnNsYXRlUm9sbCIsInJlZ0V4IiwidG9IVE1MIiwicmVnRXhLZXkiLCJyZWdFeHAiLCJyZXF1aXJlZEdyb3VwIiwicmVtb3ZlRnJvbVRleHQiLCJzYXZlS2V5cyIsInByb2Nlc3NDb21iYXQiLCJuZXdsaW5lIiwiQ29DN0ltcG9ydGVyIiwibGFzdFBlcmNlbnQiLCJtYXhMb29wcyIsInBlcmNlbnRhZ2UiLCJpc1JhbmdlZCIsImRhbWFnZXMiLCJpc1Nob3RndW4iLCJhdHRhY2tzIiwicHJvY2Vzc1NraWxscyIsImJyZWFrcyIsInByb2Nlc3NTcGVsbHMiLCJzcGVsbHNBcnIiLCJzcGVsbCIsInBhcnNlQ2hhcmFjdGVyIiwiaGVhZGVyIiwib2NjdXBhdGlvbkFnZSIsInJlZ0V4cFNlY3Rpb25zIiwiZ21ub3RlcyIsImRpc2FibGVBdHRyaWJBdXRvIiwiYXR0cmliVmFsdWUiLCJjcmVhdGVFbnRpdHkiLCJjaGFyYWN0ZXJEYXRhIiwibnBjIiwidXBkYXRlSXRlbURhdGEiLCJsYXN0V2VhcG9uU2tpbGwiLCJwYWlyIiwid2VhcG9uU2tpbGxzIiwicGMiLCJpdGVtc0RhdGEiLCJ3ZWFwb25Ta2lsbCIsImNsb25lZCIsImxhbmd1YWdlcyIsImxvY2FsaXplZEZpcmVhcm0iLCJjbG9uZSIsIm5ld1NraWxsIiwibmVlZHNDb252ZXJzaW9uIiwibmVlZHNDb252ZXJzaW9uUmVzdWx0IiwiY3JlYXRlQWN0b3IiLCJpbnB1dHMiLCJjb252ZXJ0RnJvbTZFIiwiY29udmVydDdFIiwidGVzdE1vZGUiLCJjcmVhdHVyZSIsIkNvQzdEaXJlY3RvcnlQaWNrZXIiLCJGaWxlUGlja2VyIiwiYWN0aXZlU291cmNlIiwiYnVja2V0IiwiRGVmYXVsdERpcmVjdG9yeSIsInJhdyIsInByb2Nlc3NIdG1sIiwicGlja2VyIiwicGlja2VyQnV0dG9uIiwiY3JlYXRlRGVmYXVsdERpcmVjdG9yeSIsImNyZWF0ZURpcmVjdG9yeSIsInVwbG9hZFRvRGVmYXVsdERpcmVjdG9yeSIsImZpbGUiLCJmaWxlbmFtZSIsInVwbG9hZCIsIkZpbGUiLCJDb0M3RGhvbGVIb3VzZUFjdG9ySW1wb3J0ZXIiLCJnZXRCYWNrc3RvcnkiLCJiYWNrc3RvcnlKU09OIiwiYmxvY2siLCJjb252ZXJ0RGhvbGVIb3VzZUNoYXJhY3RlckRhdGEiLCJkaG9sZUhvdXNlRGF0YSIsIkludmVzdGlnYXRvciIsImJhY2tzdG9yaWVzIiwiQmFja3N0b3J5IiwiUGVyc29uYWxEZXRhaWxzIiwiTmFtZSIsIkNoYXJhY3RlcmlzdGljcyIsIlNUUiIsIkNPTiIsIlNJWiIsIkRFWCIsIkFQUCIsIklOVCIsIlBPVyIsIkVEVSIsIlNhbml0eSIsIlNhbml0eU1heCIsIkhpdFB0cyIsIkhpdFB0c01heCIsIk1hZ2ljUHRzIiwiTWFnaWNQdHNNYXgiLCJMdWNrIiwiTW92ZSIsIkRhbWFnZUJvbnVzIiwiQnVpbGQiLCJPY2N1cGF0aW9uIiwiQWdlIiwiR2VuZGVyIiwiUmVzaWRlbmNlIiwiQmlydGhwbGFjZSIsImV4dHJhY3RTa2lsbHMiLCJTa2lsbHMiLCJTa2lsbCIsInBvc3Nlc2lvbnMiLCJleHRyYWN0UG9zc2Vzc2lvbnMiLCJQb3NzZXNzaW9ucyIsIm1ha2VTa2lsbE5hbWUiLCJkaG9sZUhvdXNlc2tpbGxzIiwic3Vic2tpbGwiLCJmaW5kV2VhcG9uU2tpbGxJZCIsImdldEVtYmVkZGVkQ29sbGVjdGlvbiIsImRob2xlaG91c2VQb3NzZXNzaW9ucyIsImlzQXJyYXkiLCJleHRyYWN0V2VhcG9ucyIsImRob2xlaG91c2VXZWFwb25zIiwic2tpbGxuYW1lIiwibWFsZiIsInNhdmVQb3J0cmFpdCIsImJhc2U2NFBvcnRyYWl0IiwiZmlsZU5hbWUiLCJiYXNlNjRSZXNwb25zZSIsImZldGNoIiwiaW1hZ2VCbG9iIiwiYmxvYiIsImNyZWF0ZU5QQ0Zyb21EaG9sZUhvdXNlIiwiZGhvbGVIb3VzZUNoYXJhY3RlckRhdGEiLCJjYW4iLCJQb3J0cmFpdCIsIldlYXBvbnMiLCJDb0M3QWN0b3JJbXBvcnRlckRpYWxvZyIsImltcG9ydFR5cGUiLCJjb252ZXJ0NkUiLCJjYW5VcGxvYWQiLCJwbGFjZWhvbGRlciIsIl9vbkpTT05GaWxlU2VsZWN0ZWQiLCJjaGFyYWN0ZXJzVG9vRXh0ZW5kZWQiLCJnZXRJbnB1dHMiLCJqc29uRmlsZUlucHV0IiwiZ2V0RWxlbWVudEJ5SWQiLCJwb3J0cmFpdEltYWdlIiwiY2hhcmFjdGVyTmFtZSIsInByZXZpZXciLCJmaWxlcyIsImZpbGVSZWFkZXIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwiY2hhcmFjdGVySlNPTiIsInBlcnNvbmFsRGV0YWlscyIsInRleHRDb250ZW50IiwicmVhZEFzVGV4dCIsImFjdG9yVHlwZSIsImltcG9ydEFjdG9yIiwiY3JlYXRlZEFjdG9yIiwib25jZSIsIkRyb3BDb0NJRCIsInByb2Nlc3NGb3JtIiwicmVzcG9uc2UiLCJwcm9jZXNzSXRlbSIsIm5vIiwiQ29DN09jY3VwYXRpb25TaGVldCIsIkl0ZW1TaGVldCIsIl9vbkl0ZW1EZWxldGUiLCJfb25Hcm91cEl0ZW1EZWxldGUiLCJfb25Hcm91cENvbnRyb2wiLCJEcmFnRHJvcCIsImNhbGxiYWNrcyIsImRyb3AiLCJjb2xsZWN0aW9uTmFtZSIsIm9wdGlvbmFsU2tpbGwiLCJ1c2VDb0NJRCIsIkNvQ0lkIiwiaXRlbUluZGV4IiwiaGFzT3duZXIiLCJpc0VtYmVkZGVkIiwib2NjdXBhdGlvblBvaW50c1N0cmluZyIsIml0ZW1Qcm9wZXJ0aWVzIiwib2NjdXBhdGlvblByb3BlcnRpZXMiLCJlbnJpY2hlZERlc2NyaXB0aW9uVmFsdWUiLCJvcHRpb25uYWwiLCJtYW5kYXRvcnkiLCJjYXJhYyIsImNhcmFjTmFtZSIsIm9yU3RyaW5nIiwiQ29DN0ludmVzdGlnYXRvcldpemFyZCIsInBhZ2VMaXN0IiwiUEFHRV9OT05FIiwiUEFHRV9JTlRST0RVQ1RJT04iLCJQQUdFX0NPTkZJR1VSQVRJT04iLCJQQUdFX1NFVFVQUyIsIlBBR0VfQVJDSEVUWVBFUyIsIlBBR0VfQ0hBUkFDVElTVElDUyIsIlBBR0VfQVRUUklCVVRFUyIsIlBBR0VfVklFV19BVFRSSUJVVEVTIiwiUEFHRV9PQ0NVUEFUSU9OUyIsIlBBR0VfT0NDVVBBVElPTl9TS0lMTFMiLCJQQUdFX0FSQ0hFVFlQRV9TS0lMTFMiLCJQQUdFX1BPSU5UU19TS0lMTFMiLCJQQUdFX0lOVkVTVElHQVRPUiIsIlBBR0VfQkFDS1NUT1JZIiwiUEFHRV9DUkVBVEUiLCJjaGFyYWN0ZXJpc3RpY3NNZXRob2RzIiwiTUVUSE9EX0RFRkFVTFQiLCJNRVRIT0RfUk9MTCIsIk1FVEhPRF9QT0lOVFMiLCJNRVRIT0RfVkFMVUVTIiwiY29jaWRDcmVkaXRSYXRpbmciLCJjb2NpZExhbmd1YWdlT3duIiwicGFnZU9yZGVyIiwicGFnZXMiLCJkZWZhdWx0U2V0dXAiLCJsb2FkQ2FjaGVJdGVtQnlDb0NJRCIsImZpbHRlckNhY2hlSXRlbUJ5Q29DSUQiLCJyZWdleHAiLCJjYWNoZUNvQ0lEIiwiZ2V0Q2FjaGVJdGVtQnlDb0NJRCIsImNvY2lkcyIsImRlZmF1bHRFcmEiLCJnZXRBZ2VBZGp1c3RtZW50cyIsInNldHVwTW9kaWZpZXJzIiwicmVxdWlyZXNBZ2VBZGp1c3RtZW50cyIsImRlZHVjdCIsInNldHVwIiwiY2FuTmV4dCIsImNyZWF0ZUJ1dHRvbiIsInNob3dNb25ldGFyeSIsInN0ZXAiLCJzZXR1cHMiLCJvY2N1cGF0aW9ucyIsImFyY2hldHlwZXMiLCJfZXJhcyIsImNoYXJhY3RlcmlzdGljc01ldGhvZCIsImVuZm9yY2VQb2ludEJ1eSIsInF1aWNrRmlyZVZhbHVlcyIsImhhc0FyY2hldHlwZXMiLCJjb3JlQ2hhcmFjdGVyaXN0aWMiLCJ0b0xvY2FsZVVwcGVyQ2FzZSIsInN1Z2dlc3RlZE9jY3VwYXRpb25zIiwic3VnZ2VzdGVkVHJhaXRzIiwiZW1wdGllcyIsInNldHVwUG9pbnRzIiwicHVscFJ1bGVJZ25vcmVBZ2VQZW5hbHRpZXMiLCJkZWR1Y3RUb3RhbCIsImRlZHVjdEZyb20iLCJuIiwicmVkdWNlRnJvbSIsImx1Y2tWYWx1ZSIsInBlcnNvbmFsVGV4dCIsInNraWxsSXRlbXMiLCJsYW5ndWFnZU5hbWUiLCJyb3dzIiwiaXNNdWx0aXBsZSIsImlzQ3JlZGl0UmF0aW5nIiwiaXNQaWNrYWJsZSIsImlzT2NjdXBhdGlvbkRlZmF1bHQiLCJpbk9jY3VwYXRpb25Hcm91cCIsIm9jY3VwYXRpb25Ub2dnbGUiLCJwaWNrZWQiLCJkZWxldGVhYmxlIiwiYXJjaGV0eXBlVG9nZ2xlIiwib2NjdXBhdGlvbkdyb3VwcyIsImlzQXJjaGV0eXBlRGVmYXVsdCIsImNyZWRpdFJhdGluZ09rYXkiLCJyZW1haW5pbmciLCJ0b3RhbFBvaW50cyIsIm51bSIsImlzT2NjdXBhdGlvbiIsImlzQXJjaGV0eXBlIiwic2hvd0NyZWRpdFJhdGluZyIsImFsbEJhY2tzdG9yaWVzIiwiY2FjaGVCYWNrc3RvcmllcyIsInJvbGUiLCJVU0VSX1BFUk1JU1NJT05TIiwiQUNUT1JfQ1JFQVRFIiwiZGVmYXVsdFJvbGUiLCJrZXlwcmVzcyIsInNyY0VsZW1lbnQiLCJ0YWdOYW1lIiwiY2hhckNvZGUiLCJfb25JbmNyZWFzZUNoYXJhY3RlcmlzdGljMTAiLCJfb25EZWNyZWFzZUNoYXJhY3RlcmlzdGljMTAiLCJfb25Sb2xsQWxsIiwiX29uUm9sbEVkdSIsIl9vblJvbGxMdWNrIiwiX29uQ2hhbmdlU2F2ZUNoYXJhY3RlcmlzdGljIiwiX29uVG9nZ2xlU2tpbGwiLCJfb25DbGlja1BpY2tTa2lsbCIsIl9vbkNsaWNrU2tpbGxTcGVjaWFsIiwiX29uQ2xpY2tSZW1vdmVTa2lsbCIsIl9vbkNoYW5nZVNraWxsUG9pbnRzIiwiX29uQ2hhbmdlQmFja3N0b3J5VGV4dCIsIl9vblJvbGxCYWNrc3RvcnkiLCJfb25SZXNldEJhY2tzdG9yeSIsInJvbGxNZXNzYWdlIiwiQ0hBVF9URU1QTEFURSIsImdldFRvb2x0aXAiLCJhZGRJdGVtVG9MaXN0IiwiaW52ZXN0aWdhdG9ySXRlbXMiLCJpbnBsYWNlIiwiY2xlYXJTZXR1cFBvaW50cyIsInNldFNraWxsTGlzdHMiLCJwbGFjZWFibGUiLCJuYW1lQ3JlZGl0UmF0aW5nIiwiY2hhcmFjdGVyaXN0aWNLZXkiLCJfY2FuRHJhZ1N0YXJ0Iiwic2VsZWN0b3IiLCJfY2FuRHJhZ0Ryb3AiLCJkZXN0aW5hdGlvbiIsInRlbXAiLCJwYXJlbnROb2RlIiwidG9nZ2xlS2V5IiwiZ3Vlc3NHcm91cEZyb21LZXkiLCJhZGp1c3RtZW50IiwidGV4dGFyZWEiLCJyb2xsdGFibGUiLCJ0YWJsZVJlc3VsdCIsIm1vZGlmeU9mZnNldCIsIm1vZGlmeUNoYXJhY3RlcmlzdGljIiwicmVyb2xsc0VuYWJsZWQiLCJvYmpUb3RhbCIsImdldFBhZ2VOdW1iZXIiLCJkaXJlY3Rpb24iLCJjbGFzc05hbWUiLCJkZWZhdWx0T3duZXJzaGlwIiwic3RhcnRlZCIsIm5vdyIsImJ1ZmZlciIsImRlZmF1bHRRdWFudGl0eSIsImZsYXRLZXlzIiwicGFnZU51bWJlciIsInNjcm9sbFRvcCIsImF0dGVtcHRUb0NyZWF0ZSIsIm5vcm1hbGl6ZUNoYXJhY3RlckRhdGEiLCJjcmVhdGVDaGFyYWN0ZXIiLCJwYXlsb2FkIiwic291cmNlSXRlbSIsImF2YXRhciIsIlRPS0VOX0RJU1BPU0lUSU9OUyIsIkZSSUVORExZIiwiY3JlYXRlQ2hhcmFjdGVyRnJvbURhdGEiLCJmdW5jdGlvbklkIiwib2ZmIiwiY2FjaGVJdGVtcyIsIkNvQzdNZW51TGF5ZXIiLCJQbGFjZWFibGVzTGF5ZXIiLCJvYmplY3RzIiwibGF5ZXJPcHRpb25zIiwiQ29DN01lbnUiLCJnZXRCdXR0b25zIiwiY29udHJvbHMiLCJjb2M3Z210b29scyIsImxheWVyIiwidG9vbHMiLCJvbkNsaWNrIiwiY29jN0RldlRvb2xzIiwicmVuZGVyQ29udHJvbHMiLCJrZWVwZXJNZW51IiwiYWZ0ZXIiLCJDb0M3Q2FudmFzIiwiQ09DN19UWVBFU19TVVBQT1JURUQiLCJvbkRyb3BTb21ldGhpbmciLCJncmlkU2l6ZSIsImRyb3BUYXJnZXRUb2tlbnMiLCJiZXR3ZWVuIiwiYXBwSWQiLCJjYWxsQmFjayIsIkNvQzdTZXR0aW5nc0RpcmVjdG9yeSIsIlNldHRpbmdzIiwibG9jYXRpb24iLCJNYW51YWwiLCJDb0M3Q29tcGVuZGl1bURpcmVjdG9yeSIsIkNvbXBlbmRpdW1EaXJlY3RvcnkiLCJ0cmFuc2xhdGVkIiwiYmFiZWxlIiwiQ29DN0FjdG9yRGlyZWN0b3J5IiwiQWN0b3JEaXJlY3RvcnkiLCJhbGxvd1dpemFyZCIsImFsbG93ZWQiLCJDb0M3U3BlbGwiLCJjYXN0IiwiaXNPd25lZCIsImNvc3RzIiwibG9zc2VzIiwiY29udmVydFN1cnBsdXNJbnRvSGl0UG9pbnRzIiwibWFnaWNQb2ludHMiLCJjb252ZXJ0ZWRIaXRQb2ludHMiLCJjb252ZXJ0ZWRNYWdpY1BvaW50cyIsImFjdG9yTWFnaWNQb2ludHMiLCJvcmlnaW5hbE1hZ2ljUG9pbnRzIiwiaGl0UG9pbnRzIiwicmVzb2x2ZUxvc3NlcyIsImdyYW50U2FuaXR5TG9zcyIsImdldEhUTUwiLCJzYW5pdHlMb3NzIiwic2FuaXR5Q2hlY2siLCJib29rSWQiLCJib29rIiwiQ29DN0Jvb2siLCJhZGRTcGVsbHMiLCJzcGVsbERldGFpbCIsImxlYXJuZWQiLCJhdHRlbXB0SW5pdGlhbFJlYWRpbmciLCJjaGFuZ2VQcm9ncmVzcyIsImluaXRpYWxSZWFkaW5nIiwiZnVsbFN0dWR5IiwiY29tcGxldGVGdWxsU3R1ZHkiLCJjaGVja0V4aGF1c3Rpb24iLCJncmFudEZ1bGxTdHVkeSIsImFjdG9yTXl0aG9zVmFsdWUiLCJkZXZlbG9wbWVudHMiLCJteXRob3NGaW5hbCIsImdhaW5zIiwiZmluYWwiLCJncmFudFNraWxsRGV2ZWxvcG1lbnQiLCJyb2xsU2FuaXR5TG9zcyIsImZ1bGxTdHVkaWVzIiwiZ3JhbnRJbml0aWFsUmVhZGluZyIsIm90aGVycyIsImdyYW50U3BlbGxMZWFybmluZyIsInNwZWxsbGVhcm5lZCIsImV4aXN0aW5nU2tpbGwiLCJzaG93RGV2ZWxvcG1lbnRzVGFibGUiLCJyZWRvRnVsbFN0dWR5IiwiYXR0ZW1wdFNwZWxsTGVhcm5pbmciLCJFQ0NfQ0xBU1MiLCJQRVJNSVNTSU9OX1RZUEUiLCJTVEFURSIsIkdNVXBkYXRlIiwiY2FyZENsYXNzTmFtZSIsIkVuaGFuY2VkQ2hhdENhcmQiLCJhZHZpc2UiLCJFbmhhbmNlZENoYXRDYXJkTGliIiwidHlwZXMiLCJpbmplY3RDU1MiLCJlbmhhbmNlZENoYXRDYXJkc0xpYiIsInJlZ2lzdGVyIiwiY2FyZENvbnN0cnVjdG9ycyIsImNhcmRDb25zdHJ1Y3RvciIsIm9vYyIsImRlZXBDbG9uZSIsImF0dGFjaE9iamVjdCIsIm9iamVjdERhdGFTdHJpbmciLCJlY2NDbGFzcyIsImxvY2FsQ29tcHV0ZSIsIkV4ZWN1dGVHTVVwZGF0ZSIsIkVFQ19BQ1RJT04iLCJkZXRhY2hEYXRhIiwiX29uQ2hhbmdlIiwic2V0VmlzaWJpbGl0eSIsInNldFBlcm1pc3Npb24iLCJzZXRTdGF0ZSIsInNldFJhZGlvU3RhdGUiLCJzcGxpdGVkIiwiZWNjVmlzaWJpbGl0eSIsImhhc1Blcm0iLCJlY2NQZXJtaXNzaW9ucyIsInJlc3RyaWN0ZWRUbyIsInZpc2lvbiIsInBlcm1pc3Npb25zQXJyYXkiLCJ3aGl0ZUxpc3QiLCJpc0F1dGhvciIsImFzc2lnbk9iamVjdHMiLCJuZXdEYXRhIiwiZm9ybVVwZGF0ZSIsImFjdGlvblVwZGF0ZSIsIm9yaWdpbmFsRGlzcGxheVN0eWxlIiwidXBkYXRlQ2FyZCIsInNhdmVEYXRhIiwiaHRtbWxDYXJkIiwiQ2FyZENsYXNzIiwidW5zZXREYXRhIiwidG9nZ2xlRGF0YSIsImJOYW1lIiwiX3BhcnRpY2lwYW50IiwiX2ZldGNoIiwiX2RvYyIsImlzQWN0b3IiLCJoYXNBY3RvciIsImhhc1ZlaGljbGUiLCJpc0FjdGl2ZSIsInZlaGljbGUiLCJkcml2ZXIiLCJfZHJpdmVyIiwidmVoaWNsZUtleSIsIl92ZWhpY2xlIiwiaGFzVmFsaWRNb3YiLCJoYXNNYXhCb251c0RpY2UiLCJhZGRCb251c0RpY2UiLCJyZW1vdmVCb251c0RpY2UiLCJyZXNldEJvbnVzRGljZSIsImhhc0JvbnVzRGljZSIsImhhc09uZUJvbnVzRGljZSIsImhhc1R3b0JvbnVzRGljZSIsImNhbkFzc2lzdCIsImFzc2lzdCIsImNhbkJlQ2F1dGlvdXMiLCJoYXNEcml2ZXIiLCJoYXNWYWxpZERleCIsImhhc0FHdW5SZWFkeSIsImlzQ2hhc2VyIiwiY2hhc2VyIiwiaXNQcmV5IiwiaXNWYWxpZCIsIm1vdkFkanVzdG1lbnQiLCJzcGVlZENoZWNrIiwicm9sbERhdGFTdHJpbmciLCJhZGp1c3RlZE1vdiIsImhhc01vdkFkanVzdG1lbnQiLCJoYXNCb251c01vdiIsImhhc01hbHVzTW92IiwidG9vU2xvdyIsImV4Y2x1ZGVkIiwiaW5jbHVkZUluQ2hhc2UiLCJzbG93ZXN0IiwiZmFzdGVzdCIsImNhbGN1bGF0ZU1vdmVtZW50QWN0aW9ucyIsIm1pbk1vdiIsIm1vdmVtZW50QWN0aW9uIiwiY3VycmVudE1vdmVtZW50QWN0aW9ucyIsImhhc01heE12dEFjdGlvbnMiLCJoYXNOb012dEFjdGlvbnMiLCJhZGRNb3ZlbWVudEFjdGlvbnMiLCJhbHRlck1vdmVtZW50QWN0aW9ucyIsIm1vdmVtZW50QWN0aW9uQXJyYXkiLCJiYXNlQXJyYXkiLCJmaWxsIiwiaW5saW5lUm9sbCIsIm1vZGlmaWVyQ3NzIiwiaGFzT3B0aW9ucyIsImdhbWVJdGVtIiwicmVmIiwicmVmU2V0IiwiaXNDaGFyYWN0ZXJpc3RpYyIsImNhbkJlUm9sbGVkIiwic29ydEJ5Um9sZUFuZERleCIsIkNoYXNlT2JzdGFjbGVDYXJkIiwic3RyaW5ncyIsInRvdGFsQWN0aW9uQ29zdCIsImJyZWFrYWJsZU9ic3RhY2xlIiwib2JzdGFjbGUiLCJiYXJyaWVyIiwiaGFzSGl0UG9pbnRzIiwidmFsaWRDaGVjayIsInN0YXRlcyIsIm9ic3RhY2xlRGVmaW5lZCIsImhhemFyZCIsInRyeVRvTmVnb3RpYXRlIiwidHJ5VG9CcmVhayIsImJyZWFrT3JOZWdvdGlhdGVEZWZpbmVkIiwicGFydGljaXBhbnQiLCJjaGFzZSIsImdldEFjdG9yU2tpbGxzQW5kQ2hhcmFjdGVyaXN0aWNzIiwicGFydGljaXBhbnRVdWlkIiwidmFsaWRTa2lsbCIsImNoZWNrVGhyZXNob2xkIiwiYWxsU2tpbGxzQW5kQ2hhcmFjdGVyaXN0aWNzIiwiZHVtbXlBY3RvciIsImNhblRha2VDYXV0aW91c0FwcHJvYWNoIiwiY3VzdG9tV2VhcG9uIiwid2VhcG9uQ2hvaWNlIiwiY2hlY2tSb2xsUmVxdWVzdCIsImNhbkFza1JvbGwiLCJFbnRlclZhbHVlVGl0bGUiLCJkYW1hZ2VTdGF0dXMiLCJvYnN0YWNsZURhbWFnZVJvbGwiLCJvYnN0YWNsZURhbWFnZVJvbGxlZCIsIm9ic3RhY2xlRGFtYWdlIiwiaW5saW5lRGFtYWdlUm9sbCIsInRvdGFsQ2F1dGlvdXNBcHByb2FjaCIsImNhdXRpb3VzU3RhdHVzIiwiY2F1dGlvdXNBcHByb2FjaFR5cGUiLCJjb25zdW1lQm9udXNEaWNlIiwibW92ZVBsYXllciIsIm9ic3RhY2xlUGFzc2VkIiwiY2hlY2tGYWlsZWQiLCJwbGF5ZXJBY3Rpb25EZWZpbmVkIiwicGxheWVySW50ZW50aW9ucyIsImNoZWNrUm9sbGVkIiwiY2FyZFJlc29sdmVkIiwicGxheWVyRGFtYWdlVGFrZW4iLCJvYnN0YWxjZURlZmluaXRpb25DaGFuZ2VkIiwibGlzdENoYW5nZXMiLCJoYXNEYW1hZ2UiLCJpbmxpbmVEYW1hZ2VUYWtlblJvbGwiLCJmYWlsZWREYW1hZ2VSb2xsIiwidG90YWxQbGF5ZXJEYW1hZ2VUYWtlbiIsImhhc0FjdGlvbkNvc3QiLCJhY3Rpb25Mb3N0IiwiaW5saW5lQWN0aW9uTG9zdFJvbGwiLCJmYWlsZWRBY3Rpb25Sb2xsIiwiZmluYWxPdXRjb21lIiwidG90YWxEYW1hZ2UiLCJyZWZsZWN0T2JzdGFsZUNoYW5nZXMiLCJmYWlsZWRDb25zZXF1ZW5jZXNSb2xsZWQiLCJ0b3RhbE9ic3RhY2xlRGFtYWdlIiwib2JzdGFjbGVEZXN0b3llZCIsIkhpdFBvaW50cyIsImFjdGl2ZVBhcnRpY2lwYW50RGF0YSIsIm9ic3RhY2xlRGV0YWlscyIsInBhcnRpY2lwYW50RGF0YSIsImdldFBhcnRpY2lwYW50RGF0YSIsImdldExvY2F0aW9uRGF0YSIsImxvY2F0aW9uVXVpZCIsImNoYXNlVXVpZCIsIl9jaGFzZSIsImFjdG9yU2tpbGwiLCJ2YWxpZEZhaWxlZFJvbGxzIiwiZmFpbGVkQ2hlY2tEYW1hZ2UiLCJhY3Rpb25Db3N0IiwiZmFpbGVkQWN0aW9uQ29zdCIsIndlYXBvbnNPcHRpb25zIiwiaXRlbVR5cGVzIiwidyIsImFoYmQiLCJ1bnNoaWZ0IiwiY3VzdG9tV2VhcG9uRGFtYWdlIiwidXNlZFdlYXBvbiIsImluZmxpY3RlZERhbWFnZUZvcm11bGEiLCJ2YWxpZE9ic3RhY2xlRGFtYWdlIiwiZGFtYWdlUm9sbFJlcXVlc3QiLCJ2YWxpZGF0ZUNhcmQiLCJsb2FjdGlvbkNoYW5nZWQiLCJwYXJ0aWNpcGFudENoYWdlZCIsIm9ic3RhY2xlVXBkYXRlIiwicGFydGljaXBhbnRVcGRhdGUiLCJkaWZmIiwibmV3IiwicmVtYWluaW5nSHAiLCJ0YXJnZXRMb2NhdGlvbiIsImZvcndhcmQiLCJnZXRMb2NhdGlvblNoaWZ0IiwibW92ZVBhcnRpY2lwYW50VG9Mb2NhdGlvbiIsInNjcm9sbFRvTG9jYXRpb24iLCJhY3RpdmF0ZUxvY2F0aW9uIiwidXBkYXRlTG9jYXRpb24iLCJ1cGRhdGVQYXJ0aWNpcGFudCIsImFjdGl2YXRlTmV4dFBhcnRpY2lwYW50VHVybiIsImRlZmluZU9ic3RhY2xlIiwidHJ5VG9OZWdvdGlhdGVPYnN0YWNsZSIsInRyeVRvQnJlYWtEb3duT2JzdGFjbGUiLCJjYW5jZWxPYnN0YWNsZURlZmluaXRpb24iLCJjYW5jZWxCcmVha09yUGFzc0Nob2ljZSIsInJlcXVlc3RSb2xsIiwidGFrZUNhdXRpb3VzQXBwcm9hY2giLCJyb2xsU2tpbGxDaGVjayIsInVzZUx1Y2siLCJyb2xsRmFpbENvbnNlcXVlbmNlcyIsImFza1JvbGxPYnN0YWNsZURhbWFnZSIsInJvbGxPYnN0YWNsZURhbWFnZSIsIm5hbWVzIiwibmV3T2JzdGFjbGUiLCJvbGQiLCJDb0M3Q2hhc2UiLCJwYXJ0aWNpcGFudHMiLCJwTGlzdCIsInByZXlzIiwiY2hhc2VycyIsInBhcnRpY3BhbnQiLCJwYXJ0aWNpcGFudHNPYmplY3QiLCJnZXRQYXJ0aWNpcGFudExvY2F0aW9uIiwiYWN0aXZlQWN0b3IiLCJwYXJ0aWNpcGFudHNCeUFkanVzdGVkTW92IiwiYWN0dWFsUGFydGljaXBhbnRzIiwicGFydGljaXBhbnRzQnlJbml0aWF0aXZlIiwiYWxsSGF2ZVZhbGlkTW92IiwiZXZlcnkiLCJhbGxIYXZlU3BlZWRSb2xsIiwibG9jYXRpb25zIiwibHAiLCJnZXRQYXJ0aWNpcGFudCIsIm5leHRBY3RpdmVQYXJ0aWNpcGFudCIsInNsb3dlc3RQcmV5IiwiZmFzdGVzdENoYXNlciIsImluY2x1ZGVMYXRlY29tZXJzIiwiaW5jbHVkZUVzY2FwZWQiLCJzbG93ZXN0UGFydGljaXBhbnQiLCJ1cGRhdGVQYXJ0aWNpcGFudHMiLCJwYXJ0aWNpcGFudHNEYXRhIiwiY2xlYW5QYXJ0aWNpcGFudExpc3QiLCJwYXJ0aWNpYW50VXVpZCIsInBhcnRpY2lwYW50SW5kZXgiLCJvdmVyd3JpdGUiLCJhc3Npc3RQYXJ0aWNpcGFudCIsImFzc2lzdGFudFV1aWQiLCJiZW5lZmljaWFyeVV1aWQiLCJhc3Npc3RhbnQiLCJiZW5lZmljaWFyeSIsImFzc2lzdGFudEluZGV4IiwiYmVuZWZpY2lhcnlJbmRleCIsInVzZU1vdmVtZW50QWN0aW9ucyIsImFjdGlvbnMiLCJ0b2dnbGVCb251c0RpY2UiLCJkaWNlTnVtYmVyIiwiY2F1dGlvdXNBcHByb2FjaCIsImFsdGVyUGFydGljaXBhbnRNb3ZlbWVudEFjdGlvbiIsImFjdGl2ZVBhcnRpY2lwYW50IiwiYWN0aXZhdGVQYXJ0aWNpcGFudCIsImRhdGFVcGRhdGUiLCJnZXRBY3RpdmF0ZVBhcnRpY2lwYW50VXBkYXRlRGF0YSIsImFjdGl2ZUxvY2F0aW9uIiwicFV1aWQiLCJwYXJ0aWNpcGFudHNEYXRhVXBkYXRlIiwicGFydGljaXBhbnRMb2NhdGlvbiIsImxvY2F0aW9uc0RhdGFVcGRhdGUiLCJnZXRBY3RpdmF0ZUxvY2F0aW9uVXBkYXRlRGF0YSIsImNoYXNlVHJhY2tDdXJyZW50U2Nyb2xsUG9zaXRpb24iLCJnZXRDaGFzZVRyYWNrTG9jYXRpb25TY3JvbGxQb3NpdGlvbiIsImFjdGl2ZVBhcnRpY2lwYW50T2JzdGFjbGVDaGVjayIsIm1vdmVQYXJ0aWNpcGFudCIsInByb2dyZXNzVG9OZXh0Um91bmQiLCJyb2xsVXVpZCIsIm1ldGhvZCIsImluaXRUcmFjayIsInByb2Nlc3NMb2NhdGlvbnMiLCJkdXBsaWNhdGVEYXRhIiwibGFzdCIsInN0YXJ0aW5nTGluZSIsImxvY2F0aW9uc0luZGV4U3RhcnQiLCJpbml0SW5kZXhTdGFydCIsImxvY2F0aW9uc0xlbmd0aCIsInN0YXJ0aW5nSW5kZXgiLCJnZW5lcmF0ZU5ld1V1aWQiLCJjaGFzZUxvY2F0aW9ucyIsImVuZCIsImNoYXNlVHJhY2siLCJjaGFzZXJzTWluTW92IiwiZmluZE1pbk1vdiIsImNoYXNlcnNNYXhNb3YiLCJmaW5kTWF4TW92IiwicHJleXNNaW5Nb3YiLCJwcmV5c01heE1vdiIsInN0YXJ0aW5nUmFuZ2UiLCJ1cGRhdGVMb2NhdGlvbnNMaXN0IiwidXBkYXRlZExpc3QiLCJjbGVhbkxvY2F0aW9uc0xpc3QiLCJsb2NhdGlvbkluZGV4IiwicGFydGlwYW50c1V1aWRBcnJheSIsImluc2VydExvY2F0aW9uIiwiaW5zZXJ0QXRVdWlkIiwibmV3TG9jYXRpb25JbmRleCIsIm5ld0xvY2F0aW9uIiwibG9jRGF0YSIsInJlbW92ZUxvY2F0aW9uIiwiZ2V0Q2xlYXJBY3RpdmVMb2NhdGlvblVwZGF0ZURhdGEiLCJoYXNQYXJ0aWNpcGFudCIsImFjdGl2ZUFjdG9ySGFzU2tpbGwiLCJhY3RpdmVBY3RvclRlc3QiLCJwcmV2aW91c0xvY2F0aW9uIiwiYWN0aXZlSW5kZXgiLCJuZXh0TG9jYXRpb24iLCJsb2NhdG9yRHJvcHBlZCIsInNldExvY2F0aW9uQ29vcmRpbmF0ZXMiLCJjb29yZGluYXRlcyIsImNsZWFyQWN0aXZlTG9jYXRpb25Db29yZGluYXRlcyIsImNsZWFyTG9jYXRpb25Db29yZGluYXRlcyIsImN1dFRvVGhlQ2hhc2UiLCJzdGFydCIsInJlc3RhcnQiLCJzZXRjaGFzZVRyYWNrU2Nyb2xsIiwic3RvcCIsImRlc3RpbmF0aW9uSW5kZXgiLCJyZW1vdmVQYXJ0aWNpcGFudCIsIm5ld1BhcnRpY2lwYW50c0RhdGEiLCJsb2NhdGlvbnNEYXRhIiwiYWRkUGFydGljaXBhbnQiLCJ1bmlxdWUiLCJyZWNhbGN1bGF0ZU1vdmVtZW50QWN0aW9ucyIsImVkaXRQYXJ0aWNpcGFudCIsImxvY2F0aW9uTW92ZWQiLCJvcmlnaW5JbmRleCIsInRvdGFsTW92ZSIsIm9sZFBhcnRpY2lwYW50c0xpc3QiLCJtb3ZlVG9rZW4iLCJwYXJ0aWNwYW50RG9jdW1lbnQiLCJmb3VuZFRva2VucyIsInZpZXdlZCIsInRhcmdldFJlY3QiLCJQSVhJIiwiUmVjdGFuZ2xlIiwiZm91bmRGcmVlU3BhY2UiLCJvdmVybGFwaW5nVG9rZW4iLCJib3VuZHMiLCJpbnRlcnNlY3RzIiwic2hvd1Rva2VuTW92ZW1lbnQiLCJhbmltYXRlIiwidG8iLCJjaGFzZVRyYWNrQWN0aXZlTG9jYXRpb25TY3JvbGxQb3NpdGlvbiIsImFjdGl2ZUxvY2F0aW9uRWxlbWVudCIsImxlZnRTY3JvbGwiLCJvZmZzZXRMZWZ0IiwiY2xpZW50V2lkdGgiLCJwcmV2IiwicmVtU3RyaW5nIiwicmVtU2l6ZSIsInBDb3VudCIsIl90YWJzIiwiYWN0aXZlQWN0b3JTa2lsbHNBbmRDaGFyYWN0ZXJpc3RpY3MiLCJwYXJ0aWNpY3BhbnREYXRhIiwiSW50bCIsIkNvbGxhdG9yIiwiY29tcGFyZSIsImFsbFNraWxsc0FuZENoYXJhY3RlcmlzdGljc1Nob3J0IiwiQ29DN1NraWxsIiwibmV3UHJvcGVydGllcyIsImhhc0FjdGl2ZUVmZmVjdHMiLCJhY3RpdmVFZmZlY3RzIiwiZWZmZWN0S2V5RnVsbCIsImVmZmVjdEtleVNob3J0IiwiZGVsdGEiLCJleHAiLCJDb0M3VmVoaWNsZSIsIkNvQzdEZWNhZGVyRGllIiwidGVybURhdGEiLCJERU5PTUlOQVRJT04iLCJDb0M3RGVjYWRlckRpZU90aGVyIiwiU0VUVElOR1MiLCJwdWxwUnVsZXMiLCJpbml0aWF0aXZlUnVsZSIsImNob2ljZXMiLCJvbkNoYW5nZSIsInJ1bGUiLCJfc2V0SW5pdGlhdGl2ZU9wdGlvbnMiLCJwdWxwUnVsZURvdWJsZU1heEhlYWx0aCIsInB1bHBSdWxlVGFsZW50cyIsInB1bHBSdWxlRmFzdGVyUmVjb3ZlcnkiLCJwdWxwUnVsZUlnbm9yZU1ham9yV291bmRzIiwiZGVjaW1hbHMiLCJDb21iYXQiLCJDb0M3R2FtZVJ1bGVTZXR0aW5ncyIsInRydWUiLCJmYWxzZSIsInNldHRpbmciLCJwdWxwU2VsZWN0aW9uIiwicmVnaXN0ZXJTZXR0aW5ncyIsIm9uQ2hhbmdlUHVscFNlbGVjdCIsIm9uQ2xpY2tQdWxwIiwib25SZXNldERlZmF1bHRzIiwiY2hlY2tib3giLCJDb0M3QXJjaGV0eXBlU2hlZXQiLCJjaGFyYWNOYW1lIiwiZW5yaWNoZWRTdWdnZXN0ZWRPY2N1cGF0aW9ucyIsImVucmljaGVkU3VnZ2VzdGVkVHJhaXRzIiwiY29yZUNoYXJhY3RlcmlzdGljc1N0cmluZyIsIkNvQzdCb29rU2hlZXQiLCJzcGVsbHNMZWFybmVkIiwiZXhoYXVzdGVkIiwic3R1ZHlDb21wbGV0ZWQiLCJzcGVsbExpc3RFbXB0eSIsImVucmljaGVkQ29udGVudCIsIl9vbkRlbGV0ZSIsIl9vblNwZWxsRGV0YWlsIiwibW9kaWZ5T3RoZXJzR2FpbnMiLCJtb2RpZnlUeXBlIiwiQ29DN0NvbnRhaW5lclNoZWV0Iiwic2xpZGVUb2dnbGUiLCJDb0M3Q2hhc2VQYXJ0aWNpcGFudEltcG9ydGVyIiwicGVybWlzc2lvbnMiLCJfb25Ecm9wUGFydGljaXBhbnQiLCJkcmFnc3RhcnQiLCJfb25Ub2tlblNlbGVjdG9yRHJhZ1N0YXJ0IiwiX29uQWN0aW9uIiwidmFsaWRhdGVQYXJ0aWNpcGFudCIsInNwZWVkQ2hlY2tSZWFkT25seSIsImluaXRSZWFkT25seSIsIm9wdGlvbnNMaXN0Iiwic2tpbGxzQW5kQ2hhcmFjdGVyaXN0aWNzTGlzdCIsImRyb3BTdHJpbmciLCJhZGRUb2tlblRvQ2hhc2UiLCJvdmVycmlkZU1vdmVtZW50QWN0aW9uIiwicmVjYWxjdWxhdGlvbk5lZWRlZCIsInBhcnRpY2lwYW50RXhjbHVkZWQiLCJtb3ZlbWVudEFjdGlvbkRlbHRhIiwiaW5jbHVkZUxhc3RDb21tZXJzIiwiZXhjbHVkZWRCZWNhdXNlIiwiQ29DN0NoYXNlU2hlZXQiLCJfb25EcmFnRW50ZXJQYXJ0aWNpcGFudCIsIl9vbkRyYWdMZWF2ZVBhcnRpY2lwYW50IiwiX29uQ2hhbmdlU2lkZSIsIl9vbkRlbGV0ZVBhcnRpY2lwYW50IiwiX29uUmVzZXRSb2xsIiwiX29uRGVsZXRlRHJpdmVyIiwiX29uQWRkUGFydGljaXBhbnQiLCJfb25Sb2xsUGFydGljaXBhbnQiLCJfb25Mb2NhdGlvbkNsaWNrIiwiX29uT2JzdGFjbGVUeXBlQ2xpY2siLCJfb25QYXJ0aWNpcGFudENvbnRyb2xDbGlja2VkIiwiX29uQ2hhc2VDb250cm9sQ2xpY2tlZCIsIl9vbkxvY2F0aW9uQ29udHJvbENsaWNrIiwiX2NhblBpbkxvY2F0aW9uRHJhZ1N0YXJ0IiwiX29uUGluTG9jYXRpb25EcmFnU3RhcnQiLCJfb25DaGFzZVBhcnRpY2lwYW50Q2xpY2siLCJfY2FuQ2hhc2VQYXJ0aWNpcGFudERyYWdTdGFydCIsIl9jYW5DaGFzZVBhcnRpY2lwYW50RHJhZ0Ryb3AiLCJfb25DaGFzZVBhcnRpY2lwYW50RHJhZ1N0YXJ0IiwiX29uQ2hhc2VQYXJ0aWNpcGFudERyYWdEcm9wIiwiZHJhZ292ZXIiLCJfb25EcmFnRW50ZXIiLCJfb25EcmFnTGVhdmUiLCJfZ2V0U3VibWl0RGF0YSIsImVkaXRvcnMiLCJjbGVhbmVkIiwiY2xlYW4iLCJvcmlnaW5hbExvY2F0aW9uIiwic3ViVHlwZSIsImZpbmRQYXJ0aWNpcGFudEluZGV4Iiwic2V0U2Nyb2xsIiwiaW5pdGlhbE9wZW5pbmciLCJzY3JvbGwiLCJhY3RpdmF0ZVRhYiIsInNjcm9sbFRvIiwiYmVoYXZpb3IiLCJmaW5kTG9jYXRpb25JbmRleCIsImZpbmRMb2NhdGlvbiIsImxVdWlkIiwidG9nZ2xlUGFydGljaXBhbnRHdW4iLCJfb25DaGFuZ2VNb3ZlbWVudEFjdGlvbnMiLCJkcmFnSWNvbiIsInNldERyYWdJbWFnZSIsImxvY2F0aW9uRWxlbWVudCIsImRyYWdFdmVudCIsIm9sZExvY2F0aW9uIiwiX29uRHJhZ092ZXIiLCJhbHRlclBhcnRpY2lwYW50Iiwic3RhbmRieVRleHQiLCJzdGFuZGJ5UmlnaHRJY29uIiwib2xkUGFydGljaXBhbnQiLCJ0cCIsImdldFR5cGUiLCJDb0M3SXRlbVNoZWV0VjIiLCJDb0M3SXRlbVNoZWV0IiwiQ29DN0pvdXJuYWxTaGVldCIsIkpvdXJuYWxTaGVldCIsIkNvQzdNYWNyb0NvbmZpZyIsIk1hY3JvQ29uZmlnIiwiQ29DN1BsYXlsaXN0Q29uZmlnIiwiUGxheWxpc3RDb25maWciLCJDb0M3Um9sbFRhYmxlQ29uZmlnIiwiUm9sbFRhYmxlQ29uZmlnIiwiQ29DN1NjZW5lQ29uZmlnIiwiU2NlbmVDb25maWciLCJDb0M3U2V0dXBTaGVldCIsIl9vbkFkZEJpbyIsIl9vblJlbW92ZVNlY3Rpb24iLCJvdGhlckl0ZW1zIiwiaXRlbXNMaXN0RW1wdHkiLCJDb0M3U2tpbGxTaGVldCIsIl9zaGVldFRhYiIsImhhZE5vbkNoYXJhY3Rlck93bmVyIiwiaXNTcGVjaWFsaXplZCIsImNhbk1vZGlmeVNwZWMiLCJDb0M3U3BlbGxTaGVldCIsIkNvQzdTdGF0dXNTaGVldCIsInN0YXR1c1R5cGUiLCJlbnJpY2hlZERlc2NyaXB0aW9uTm90ZXMiLCJDb0M3VGFsZW50U2hlZXQiLCJ0YWxlbnRUeXBlIiwiQ29DN1ZlaGljbGVTaGVldCIsImFybWVkIiwiX29uQWRkQXJtb3IiLCJfb25SZW1vdmVBcm1vciIsIl9vblRvZ2dsZUV4cGFuZCIsIm9sZFNpemUiLCJDb0M3V2VhcG9uU2hlZXQiLCJjb21iYXRTa2lsbCIsInByaWNlIiwiZW5yaWNoZWREZXNjcmlwdGlvblNwZWNpYWwiLCJfb25Qcm9wZXJ0eUNsaWNrIiwicGVyZm9ybUZpbHRlciIsImFwcEh0bWwiLCJlcmFFbGVtZW50Iiwic2V0RXJhIiwic2V0VHlwZSIsImZpbHRlckNvQzciLCJuYW1lRmlsdGVyIiwidHJpZ2dlckZpbHRlckV2ZW50IiwiQ29DSUQiLCJjb21wZW5kaXVtSW5kZXhGaWVsZHMiLCJKb3VybmFsRW50cnkiLCJQbGF5bGlzdCIsIlJvbGxUYWJsZSIsIlNjZW5lIiwiZ2FtZVByb3BlcnR5TG9va3VwIiwiZG9jdW1lbnROYW1lTG9va3VwIiwiZXJhVGV4dCIsIm1ha2VHcm91cFJlZ0V4IiwibGFuZ0ZhbGxiYWNrIiwibm90bWlzc2luZyIsInNwbGl0cyIsInJneCIsInJlZ0V4UGFydHMiLCJmcm9tQ29DSURSZWdleEFsbCIsImRvY3VtZW50c0Zyb21Xb3JsZCIsInByb2dyZXNzQmFyIiwiU2NlbmVOYXZpZ2F0aW9uIiwiZGlzcGxheVByb2dyZXNzQmFyIiwicGN0IiwiZmlsdGVyQWxsQ29DSUQiLCJjb21wZW5kaWFEb2N1bWVudHMiLCJkb2N1bWVudHNGcm9tQ29tcGVuZGlhIiwiYWxsRG9jdW1lbnRzIiwiZmlsdGVyQmVzdENvQ0lEIiwiYmVzdE1hdGNoRG9jdW1lbnRzIiwiZG9jQ29DSUQiLCJjdXJyZW50RG9jIiwiZG9jUHJpb3JpdHkiLCJNSU5fU0FGRV9JTlRFR0VSIiwiZXhpc3RpbmdQcmlvcml0eSIsImRvY0VyYXMiLCJkb2NMYW5nIiwiZXhpc3RpbmdMYW5nIiwiZ2FtZVByb3BlcnR5IiwiZ2V0R2FtZVByb3BlcnR5IiwiY2FuZGlkYXRlRG9jdW1lbnRzIiwibWF0Y2hpbmdFcmFzIiwiY29tcGFyZUNvQ0lEUHJpbyIsImdldERvY3VtZW50VHlwZSIsImluZGV4ZWQiLCJnZXRJbmRleCIsImluZGV4SW5zdGFuY2VzIiwiamUiLCJydCIsIkNhcmQiLCJsb2FkVGVtcGxhdGVzIiwicHJlbG9hZEhhbmRsZWJhcnNUZW1wbGF0ZXMiLCJyZWdpc3Rlck1lbnUiLCJyZXN0cmljdGVkIiwid29ybGQiLCJZIiwiTiIsIm5vYm9keSIsImV2ZXJ5b25lIiwiaWdub3JlIiwiYWx3YXlzIiwiY3JlYXRpb24iLCJuZXZlciIsIl9zZXRSb290Rm9udFNpemUiLCJzaWRlYmFyIiwiY29udGFpbiIsImhvb2tzIiwiQWN0b3JzIiwidW5yZWdpc3RlclNoZWV0IiwicmVnaXN0ZXJTaGVldCIsIm1ha2VEZWZhdWx0IiwiSXRlbXMiLCJTY2VuZXMiLCJKb3VybmFsIiwiUm9sbFRhYmxlcyIsIk1hY3JvcyIsIlBsYXlsaXN0cyIsIkhhbmRsZWJhcnMiLCJyZWdpc3RlckhlbHBlciIsImhhc2giLCJTZXQiLCJzZWxlY3RlZFR5cGUiLCJzZWxlY3RlZEVyYSIsImdyb3VwVHlwZXMiLCJncm91cFR5cGUiLCJ1bmNvbW1vbiIsImNvbXBlbmRpdW1GaWx0ZXIiLCJEaWNlRmFjdG9yeSIsInN5c3RlbXMiLCJkMTAwIiwiZGljZURlY2FkZXIiLCJnZXRQcm90b3R5cGVPZiIsImhlaWdodFRleHQiLCJoZWlnaHRUaXAiLCJ3aWR0aFRpcCIsImNsZWFyVGltZW91dCIsIkNvQzdUb3VyIiwiVG91ciIsIndhaXRGb3JFbGVtZW50IiwiTXV0YXRpb25PYnNlcnZlciIsIm11dGF0aW9ucyIsIm9ic2VydmVyIiwiZGlzY29ubmVjdCIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiX3ByZVN0ZXAiLCJzdGVwSW5kZXgiLCJjdXJyZW50U3RlcCIsInNpZGViYXJUYWIiLCJfcG9zdFN0ZXAiLCJoYXNOZXh0IiwiaXNSZXNldHRpbmciLCJyZXNldCIsIkVuYWJsZVZhcmlhbnRSdWxlc0VuIiwiY2FuQmVSZXN1bWVkIiwic3RlcHMiLCJsb2NhbGl6YXRpb24iLCJFbmFibGVWYXJpYW50UnVsZXNGciIsImluc3RydWN0aW9uc1ZlcnNpb24iLCJyZWFkTWUiLCJ0b3VycyIsInRvdXJOYW1lIiwicmVnaXN0ZXJUb3VycyIsIkNvQzdIb29rcyIsImxpc3RlbiIsInRva2VuRG9jdW1lbnQiLCJjcmFldG9ySWQiLCJfb2JqZWN0IiwiYWRkRGljZVByZXNldCIsImZvbnRTY2FsZSIsImVudGl0eUNyZWF0ZVNlbGVjdFRhZyIsImVudGl0eVNvcnRlZExpc3QiLCJzaG93RXhwZXJpbWVudGFsIiwiZW50aXR5T3B0aW9uIiwiY2FwaXRhbGl6ZSIsImVtcHR5Iiwic2Vjb25kIiwicGxheWVyTGlzdCIsImluc2VydEFmdGVyIiwiZGllVGVybXMiLCJ0YWciLCJnbWNyZWF0ZW1lc3NhZ2VhcyIsIm1lbGVlVGFyZ2V0IiwiZ210cmFkZWl0ZW10byIsIkNvQzdTeXN0ZW1Tb2NrZXQiLCJjYWxsU29ja2V0IiwicmVxdWVzdEtlZXBlckFjdGlvbiIsInJlcXVlc3RVc2VyQWN0aW9uIiwiZXJyb3JJZk1pc3NpbmciLCJpbmNsdWRlU2VsZiIsIl9vbkxlZnRDbGljayIsInN5c3RlbVRhYiIsImJlZm9yZSIsImNhcmRjbGFzcyIsInNvY2tldGxpYiIsInJlZ2lzdGVyU3lzdGVtIiwiaW5pdEVDQyIsImNvbW1hbmRzIiwicmVzIiwidG9Mb2NhbGl6ZSIsImxvY2FsaXplZCIsImVmZmVjdEluZGV4IiwiZWZmZWN0TmFtZUtleSIsInN0YXR1c0tleSIsImRpcmVjdG9yeSIsIkl0ZW1EaXJlY3RvcnkiLCJpdGVtRWxlbWVudCIsIl90YWJsZVNldHRpbmdzQ2hhbmdlZCIsImFjdGl2YXRlR2xvYmFsTGlzdGVuZXIiLCJ0YWJsZUNob2ljZSIsImJvdXRPZk1hZG5lc3NfU3VtbWFyeSIsImJvdXRPZk1hZG5lc3NfUmVhbFRpbWUiLCJjaGFyYWN0ZXJTaGVldCJdLCJzb3VyY2VSb290IjoiIn0=